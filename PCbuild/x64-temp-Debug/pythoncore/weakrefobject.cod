; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@DFFFNEPO@weakcallableproxy?$AA@	; `string'
PUBLIC	??_C@_09MEIONHNF@weakproxy?$AA@			; `string'
PUBLIC	??_C@_09PAJHGGFL@__bytes__?$AA@			; `string'
PUBLIC	??_C@_07HEABOMAD@weakref?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	_PyWeakref_RefType
PUBLIC	_PyWeakref_ProxyType
PUBLIC	_PyWeakref_CallableProxyType
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
?kwlist@?1??weakref_call@@9@9 DQ 01H DUP (?)		; `weakref_call'::`2'::kwlist
_BSS	ENDS
;	COMDAT ??_C@_0BC@DFFFNEPO@weakcallableproxy?$AA@
CONST	SEGMENT
??_C@_0BC@DFFFNEPO@weakcallableproxy?$AA@ DB 'weakcallableproxy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MEIONHNF@weakproxy?$AA@
CONST	SEGMENT
??_C@_09MEIONHNF@weakproxy?$AA@ DB 'weakproxy', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PAJHGGFL@__bytes__?$AA@
CONST	SEGMENT
??_C@_09PAJHGGFL@__bytes__?$AA@ DB '__bytes__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_PyWeakref_RefType DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07HEABOMAD@weakref?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:weakref_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:weakref_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:weakref_hash
	DQ	FLAT:weakref_call
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:gc_traverse
	DQ	FLAT:gc_clear
	DQ	FLAT:weakref_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:weakref___init__
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:weakref___new__
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
proxy_methods DQ FLAT:??_C@_09PAJHGGFL@__bytes__?$AA@
	DQ	FLAT:proxy_bytes
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
proxy_as_number DQ FLAT:proxy_add
	DQ	FLAT:proxy_sub
	DQ	FLAT:proxy_mul
	DQ	FLAT:proxy_mod
	DQ	FLAT:proxy_divmod
	DQ	FLAT:proxy_pow
	DQ	FLAT:proxy_neg
	DQ	FLAT:proxy_pos
	DQ	FLAT:proxy_abs
	DQ	FLAT:proxy_bool
	DQ	FLAT:proxy_invert
	DQ	FLAT:proxy_lshift
	DQ	FLAT:proxy_rshift
	DQ	FLAT:proxy_and
	DQ	FLAT:proxy_xor
	DQ	FLAT:proxy_or
	DQ	FLAT:proxy_int
	DQ	0000000000000000H
	DQ	FLAT:proxy_float
	DQ	FLAT:proxy_iadd
	DQ	FLAT:proxy_isub
	DQ	FLAT:proxy_imul
	DQ	FLAT:proxy_imod
	DQ	FLAT:proxy_ipow
	DQ	FLAT:proxy_ilshift
	DQ	FLAT:proxy_irshift
	DQ	FLAT:proxy_iand
	DQ	FLAT:proxy_ixor
	DQ	FLAT:proxy_ior
	DQ	FLAT:proxy_floor_div
	DQ	FLAT:proxy_true_div
	DQ	FLAT:proxy_ifloor_div
	DQ	FLAT:proxy_itrue_div
	DQ	FLAT:proxy_index
proxy_as_sequence DQ FLAT:proxy_length
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:proxy_contains
	ORG $+16
proxy_as_mapping DQ FLAT:proxy_length
	DQ	FLAT:proxy_getitem
	DQ	FLAT:proxy_setitem
	ORG $+8
_PyWeakref_ProxyType DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09MEIONHNF@weakproxy?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:proxy_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:proxy_repr
	DQ	FLAT:proxy_as_number
	DQ	FLAT:proxy_as_sequence
	DQ	FLAT:proxy_as_mapping
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:proxy_str
	DQ	FLAT:proxy_getattr
	DQ	FLAT:proxy_setattr
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:gc_traverse
	DQ	FLAT:gc_clear
	DQ	FLAT:proxy_richcompare
	DQ	0000000000000000H
	DQ	FLAT:proxy_iter
	DQ	FLAT:proxy_iternext
	DQ	FLAT:proxy_methods
	ORG $+152
_PyWeakref_CallableProxyType DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@DFFFNEPO@weakcallableproxy?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:proxy_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:proxy_repr
	DQ	FLAT:proxy_as_number
	DQ	FLAT:proxy_as_sequence
	DQ	FLAT:proxy_as_mapping
	DQ	0000000000000000H
	DQ	FLAT:proxy_call
	DQ	FLAT:proxy_str
	DQ	FLAT:proxy_getattr
	DQ	FLAT:proxy_setattr
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:gc_traverse
	DQ	FLAT:gc_clear
	DQ	FLAT:proxy_richcompare
	DQ	0000000000000000H
	DQ	FLAT:proxy_iter
	DQ	FLAT:proxy_iternext
	ORG $+160
_DATA	ENDS
;	COMDAT ??_C@_07HEABOMAD@weakref?$AA@
CONST	SEGMENT
??_C@_07HEABOMAD@weakref?$AA@ DB 'weakref', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___bytes__@?1??proxy_bytes@@9@9 DQ 0000000000000000H ; `proxy_bytes'::`2'::PyId___bytes__
	DQ	FLAT:??_C@_09PAJHGGFL@__bytes__?$AA@
	DQ	0000000000000000H
?PyId___name__@?1??weakref_repr@@9@9 DQ 0000000000000000H ; `weakref_repr'::`2'::PyId___name__
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
PUBLIC	_PyWeakref_GetWeakrefCount
;	COMDAT pdata
; File c:\src\pyparallel\objects\weakrefobject.c
pdata	SEGMENT
$pdata$_PyWeakref_GetWeakrefCount DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$_PyWeakref_GetWeakrefCount
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyWeakref_GetWeakrefCount DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyWeakref_GetWeakrefCount
_TEXT	SEGMENT
count$ = 0
head$ = 32
_PyWeakref_GetWeakrefCount PROC				; COMDAT

; 11   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 12   :     Py_ssize_t count = 0;

  00009	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR count$[rsp], 0
$LN2@PyWeakref_:

; 13   : 
; 14   :     while (head != NULL) {

  00011	48 83 7c 24 20
	00		 cmp	 QWORD PTR head$[rsp], 0
  00017	74 1e		 je	 SHORT $LN1@PyWeakref_

; 15   :         ++count;

  00019	48 8b 04 24	 mov	 rax, QWORD PTR count$[rsp]
  0001d	48 ff c0	 inc	 rax
  00020	48 89 04 24	 mov	 QWORD PTR count$[rsp], rax

; 16   :         head = head->wr_next;

  00024	48 8b 44 24 20	 mov	 rax, QWORD PTR head$[rsp]
  00029	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00030	48 89 44 24 20	 mov	 QWORD PTR head$[rsp], rax

; 17   :     }

  00035	eb da		 jmp	 SHORT $LN2@PyWeakref_
$LN1@PyWeakref_:

; 18   :     return count;

  00037	48 8b 04 24	 mov	 rax, QWORD PTR count$[rsp]

; 19   : }

  0003b	48 83 c4 18	 add	 rsp, 24
  0003f	c3		 ret	 0
_PyWeakref_GetWeakrefCount ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CM@LMPNJKPO@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@KLMFOMEM@?$AAs?$AAe?$AAl?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@JJKGCBP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAw?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	_PyWeakref_ClearRef
EXTRN	PyType_IsSubtype:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyWeakref_ClearRef DD imagerel $LN6
	DD	imagerel $LN6+208
	DD	imagerel $unwind$_PyWeakref_ClearRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyWeakref_ClearRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1CM@LMPNJKPO@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@LMPNJKPO@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'W', 00H, 'e', 00H, 'a', 00H, 'k', 00H, 'r', 00H
	DB	'e', 00H, 'f', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@KLMFOMEM@?$AAs?$AAe?$AAl?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@KLMFOMEM@?$AAs?$AAe?$AAl?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@JJKGCBP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAw?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@JJKGCBP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAw?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'w', 00H, 'e', 00H, 'a'
	DB	00H, 'k', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'o', 00H, 'b', 00H
	DB	'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyWeakref_ClearRef
_TEXT	SEGMENT
callback$ = 32
self$ = 64
_PyWeakref_ClearRef PROC				; COMDAT

; 90   : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 91   :     PyObject *callback;
; 92   : 
; 93   :     assert(self != NULL);

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR self$[rsp], 0
  0000f	75 1c		 jne	 SHORT $LN3@PyWeakref_@2
  00011	41 b8 5d 00 00
	00		 mov	 r8d, 93			; 0000005dH
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@JJKGCBP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAw?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@KLMFOMEM@?$AAs?$AAe?$AAl?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002b	33 c0		 xor	 eax, eax
$LN3@PyWeakref_@2:

; 94   :     assert(PyWeakref_Check(self));

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00039	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0003d	74 59		 je	 SHORT $LN4@PyWeakref_@2
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_RefType
  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004b	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0004f	e8 00 00 00 00	 call	 PyType_IsSubtype
  00054	85 c0		 test	 eax, eax
  00056	75 40		 jne	 SHORT $LN4@PyWeakref_@2
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00064	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00068	74 2e		 je	 SHORT $LN5@PyWeakref_@2
  0006a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00076	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0007a	74 1c		 je	 SHORT $LN5@PyWeakref_@2
  0007c	41 b8 5e 00 00
	00		 mov	 r8d, 94			; 0000005eH
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@JJKGCBP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAw?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@LMPNJKPO@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00096	33 c0		 xor	 eax, eax
$LN4@PyWeakref_@2:
$LN5@PyWeakref_@2:

; 95   :     /* Preserve and restore the callback around clear_weakref. */
; 96   :     callback = self->wr_callback;

  00098	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0009d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a1	48 89 44 24 20	 mov	 QWORD PTR callback$[rsp], rax

; 97   :     self->wr_callback = NULL;

  000a6	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000ab	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 98   :     clear_weakref(self);

  000b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000b8	e8 00 00 00 00	 call	 clear_weakref

; 99   :     self->wr_callback = callback;

  000bd	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR callback$[rsp]
  000c7	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 100  : }

  000cb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cf	c3		 ret	 0
_PyWeakref_ClearRef ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$clear_weakref DD imagerel clear_weakref
	DD	imagerel clear_weakref+278
	DD	imagerel $unwind$clear_weakref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clear_weakref DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT clear_weakref
_TEXT	SEGMENT
callback$ = 32
list$20364 = 40
self$ = 64
clear_weakref PROC					; COMDAT

; 52   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 53   :     PyObject *callback = self->wr_callback;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00012	48 89 44 24 20	 mov	 QWORD PTR callback$[rsp], rax

; 54   : 
; 55   :     if (self->wr_object != Py_None) {

  00017	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00023	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00027	0f 84 c5 00 00
	00		 je	 $LN5@clear_weak

; 56   :         PyWeakReference **list = GET_WEAKREFS_LISTPTR(self->wr_object);

  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00032	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00036	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0003f	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00043	48 03 88 28 01
	00 00		 add	 rcx, QWORD PTR [rax+296]
  0004a	48 8b c1	 mov	 rax, rcx
  0004d	48 89 44 24 28	 mov	 QWORD PTR list$20364[rsp], rax

; 57   : 
; 58   :         if (*list == self)

  00052	48 8b 44 24 28	 mov	 rax, QWORD PTR list$20364[rsp]
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0005c	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0005f	75 14		 jne	 SHORT $LN4@clear_weak

; 59   :             /* If 'self' is the end of the list (and thus self->wr_next == NULL)
; 60   :                then the weakref list itself (and thus the value of *list) will
; 61   :                end up being set to NULL. */
; 62   :             *list = self->wr_next;

  00061	48 8b 44 24 28	 mov	 rax, QWORD PTR list$20364[rsp]
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0006b	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN4@clear_weak:

; 63   :         self->wr_object = Py_None;

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00081	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 64   :         if (self->wr_prev != NULL)

  00085	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0008a	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0008f	74 1c		 je	 SHORT $LN3@clear_weak

; 65   :             self->wr_prev->wr_next = self->wr_next;

  00091	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00096	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0009a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0009f	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  000a6	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN3@clear_weak:

; 66   :         if (self->wr_next != NULL)

  000ad	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000b2	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000ba	74 19		 je	 SHORT $LN2@clear_weak

; 67   :             self->wr_next->wr_prev = self->wr_prev;

  000bc	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000c1	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000c8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000cd	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  000d1	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx
$LN2@clear_weak:

; 68   :         self->wr_prev = NULL;

  000d5	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000da	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 69   :         self->wr_next = NULL;

  000e2	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000e7	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0
$LN5@clear_weak:

; 70   :     }
; 71   :     if (callback != NULL) {

  000f2	48 83 7c 24 20
	00		 cmp	 QWORD PTR callback$[rsp], 0
  000f8	74 17		 je	 SHORT $LN1@clear_weak

; 72   :         Py_DECREF(callback);

  000fa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR callback$[rsp]
  000ff	e8 00 00 00 00	 call	 _Py_DecRef

; 73   :         self->wr_callback = NULL;

  00104	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00109	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
$LN1@clear_weak:

; 74   :     }
; 75   : }

  00111	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00115	c3		 ret	 0
clear_weakref ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\weakrefobject.c
pdata	SEGMENT
$pdata$weakref_dealloc DD imagerel weakref_dealloc
	DD	imagerel weakref_dealloc+54
	DD	imagerel $unwind$weakref_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT weakref_dealloc
_TEXT	SEGMENT
self$ = 48
weakref_dealloc PROC					; COMDAT

; 104  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 105  :     PyObject_GC_UnTrack(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 106  :     clear_weakref((PyWeakReference *) self);

  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00018	e8 00 00 00 00	 call	 clear_weakref

; 107  :     Py_TYPE(self)->tp_free(self);

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00022	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0002b	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 108  : }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
weakref_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@DEJAOFJD@gc_traverse?$AA@		; `string'
PUBLIC	??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_traverse DD imagerel gc_traverse
	DD	imagerel gc_traverse+116
	DD	imagerel $unwind$gc_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0M@DEJAOFJD@gc_traverse?$AA@
CONST	SEGMENT
??_C@_0M@DEJAOFJD@gc_traverse?$AA@ DB 'gc_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@
CONST	SEGMENT
??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@ DB '..\Objects\we'
	DB	'akrefobject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_traverse
_TEXT	SEGMENT
vret$20416 = 32
self$ = 64
visit$ = 72
arg$ = 80
gc_traverse PROC					; COMDAT

; 113  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@gc_travers:

; 114  :     Py_VISIT(self->wr_callback);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@gc_travers
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 72 00 00
	00		 mov	 r8d, 114		; 00000072H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DEJAOFJD@gc_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@gc_travers:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 23		 je	 SHORT $LN2@gc_travers
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20416[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20416[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@gc_travers
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20416[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@gc_travers
$LN1@gc_travers:
$LN2@gc_travers:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@gc_travers

; 115  :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@gc_travers:

; 116  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
gc_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_clear DD imagerel gc_clear
	DD	imagerel gc_clear+26
	DD	imagerel $unwind$gc_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_clear DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gc_clear
_TEXT	SEGMENT
self$ = 48
gc_clear PROC						; COMDAT

; 121  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 122  :     clear_weakref(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 clear_weakref

; 123  :     return 0;

  00013	33 c0		 xor	 eax, eax

; 124  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
gc_clear ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_09EMEOJKND@?3__call__?$AA@		; `string'
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$weakref_call DD imagerel weakref_call
	DD	imagerel weakref_call+130
	DD	imagerel $unwind$weakref_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref_call DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_09EMEOJKND@?3__call__?$AA@
CONST	SEGMENT
??_C@_09EMEOJKND@?3__call__?$AA@ DB ':__call__', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT weakref_call
_TEXT	SEGMENT
object$20436 = 32
tv74 = 40
self$ = 64
args$ = 72
kw$ = 80
weakref_call PROC					; COMDAT

; 129  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 130  :     static char *kwlist[] = {NULL};
; 131  : 
; 132  :     if (PyArg_ParseTupleAndKeywords(args, kw, ":__call__", kwlist)) {

  00013	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??weakref_call@@9@9
  0001a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09EMEOJKND@?3__call__?$AA@
  00021	48 8b 54 24 50	 mov	 rdx, QWORD PTR kw$[rsp]
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0002b	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00030	85 c0		 test	 eax, eax
  00032	74 47		 je	 SHORT $LN1@weakref_ca

; 133  :         PyObject *object = PyWeakref_GET_OBJECT(self);

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00039	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0003d	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00042	7e 10		 jle	 SHORT $LN4@weakref_ca
  00044	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00049	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004d	48 89 44 24 28	 mov	 QWORD PTR tv74[rsp], rax
  00052	eb 0c		 jmp	 SHORT $LN5@weakref_ca
$LN4@weakref_ca:
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0005b	48 89 44 24 28	 mov	 QWORD PTR tv74[rsp], rax
$LN5@weakref_ca:
  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR tv74[rsp]
  00065	48 89 44 24 20	 mov	 QWORD PTR object$20436[rsp], rax

; 134  :         Py_INCREF(object);

  0006a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR object$20436[rsp]
  0006f	e8 00 00 00 00	 call	 _Py_IncRef

; 135  :         return (object);

  00074	48 8b 44 24 20	 mov	 rax, QWORD PTR object$20436[rsp]
  00079	eb 02		 jmp	 SHORT $LN2@weakref_ca
$LN1@weakref_ca:

; 136  :     }
; 137  :     return NULL;

  0007b	33 c0		 xor	 eax, eax
$LN2@weakref_ca:

; 138  : }

  0007d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00081	c3		 ret	 0
weakref_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BHJBMPEM@weak?5object?5has?5gone?5away?$AA@ ; `string'
EXTRN	PyObject_Hash:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\objects\weakrefobject.c
pdata	SEGMENT
$pdata$weakref_hash DD imagerel weakref_hash
	DD	imagerel weakref_hash+198
	DD	imagerel $unwind$weakref_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref_hash DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BK@BHJBMPEM@weak?5object?5has?5gone?5away?$AA@
CONST	SEGMENT
??_C@_0BK@BHJBMPEM@weak?5object?5has?5gone?5away?$AA@ DB 'weak object has'
	DB	' gone away', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT weakref_hash
_TEXT	SEGMENT
tv71 = 32
tv81 = 40
self$ = 64
weakref_hash PROC					; COMDAT

; 143  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 144  :     if (self->hash != -1)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 70 ff	 cmp	 QWORD PTR [rax+112], -1
  00013	74 0e		 je	 SHORT $LN2@weakref_ha

; 145  :         return self->hash;

  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001a	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0001e	e9 9e 00 00 00	 jmp	 $LN3@weakref_ha
$LN2@weakref_ha:

; 146  :     if (PyWeakref_GET_OBJECT(self) == Py_None) {

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00028	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0002c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00031	7e 10		 jle	 SHORT $LN5@weakref_ha
  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00038	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0003c	48 89 44 24 20	 mov	 QWORD PTR tv71[rsp], rax
  00041	eb 0c		 jmp	 SHORT $LN6@weakref_ha
$LN5@weakref_ha:
  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004a	48 89 44 24 20	 mov	 QWORD PTR tv71[rsp], rax
$LN6@weakref_ha:
  0004f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00056	48 39 44 24 20	 cmp	 QWORD PTR tv71[rsp], rax
  0005b	75 1c		 jne	 SHORT $LN1@weakref_ha

; 147  :         PyErr_SetString(PyExc_TypeError, "weak object has gone away");

  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BHJBMPEM@weak?5object?5has?5gone?5away?$AA@
  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0006b	e8 00 00 00 00	 call	 PyErr_SetString

; 148  :         return -1;

  00070	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00077	eb 48		 jmp	 SHORT $LN3@weakref_ha
$LN1@weakref_ha:

; 149  :     }
; 150  :     self->hash = PyObject_Hash(PyWeakref_GET_OBJECT(self));

  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0007e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00082	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00087	7e 10		 jle	 SHORT $LN7@weakref_ha
  00089	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0008e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00092	48 89 44 24 28	 mov	 QWORD PTR tv81[rsp], rax
  00097	eb 0c		 jmp	 SHORT $LN8@weakref_ha
$LN7@weakref_ha:
  00099	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000a0	48 89 44 24 28	 mov	 QWORD PTR tv81[rsp], rax
$LN8@weakref_ha:
  000a5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv81[rsp]
  000aa	e8 00 00 00 00	 call	 PyObject_Hash
  000af	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000b4	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 151  :     return self->hash;

  000b8	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000bd	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
$LN3@weakref_ha:

; 152  : }

  000c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c5	c3		 ret	 0
weakref_hash ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@JMPLLHOJ@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?5?$CI?$CF@ ; `string'
PUBLIC	??_C@_0BP@NIAEBOAB@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BG@FNPEKPFD@?$DMweakref?5at?5?$CFp?$DL?5dead?$DO?$AA@ ; `string'
EXTRN	PyErr_Clear:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$weakref_repr DD imagerel weakref_repr
	DD	imagerel weakref_repr+576
	DD	imagerel $unwind$weakref_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref_repr DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_0CE@JMPLLHOJ@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CE@JMPLLHOJ@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?5?$CI?$CF@ DB '<'
	DB	'weakref at %p; to ''%s'' at %p (%U)>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NIAEBOAB@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BP@NIAEBOAB@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?$DO?$AA@ DB '<'
	DB	'weakref at %p; to ''%s'' at %p>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FNPEKPFD@?$DMweakref?5at?5?$CFp?$DL?5dead?$DO?$AA@
CONST	SEGMENT
??_C@_0BG@FNPEKPFD@?$DMweakref?5at?5?$CFp?$DL?5dead?$DO?$AA@ DB '<weakref'
	DB	' at %p; dead>', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT weakref_repr
_TEXT	SEGMENT
name$ = 48
repr$ = 56
tv68 = 64
tv85 = 72
tv130 = 80
tv136 = 88
tv148 = 96
tv154 = 104
self$ = 128
weakref_repr PROC					; COMDAT

; 157  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 158  :     PyObject *name, *repr;
; 159  :     _Py_IDENTIFIER(__name__);
; 160  : 
; 161  :     if (PyWeakref_GET_OBJECT(self) == Py_None)

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00011	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00015	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0001a	7e 13		 jle	 SHORT $LN12@weakref_re
  0001c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00028	48 89 44 24 40	 mov	 QWORD PTR tv68[rsp], rax
  0002d	eb 0c		 jmp	 SHORT $LN13@weakref_re
$LN12@weakref_re:
  0002f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00036	48 89 44 24 40	 mov	 QWORD PTR tv68[rsp], rax
$LN13@weakref_re:
  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00042	48 39 44 24 40	 cmp	 QWORD PTR tv68[rsp], rax
  00047	75 19		 jne	 SHORT $LN9@weakref_re

; 162  :         return PyUnicode_FromFormat("<weakref at %p; dead>", self);

  00049	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@FNPEKPFD@?$DMweakref?5at?5?$CFp?$DL?5dead?$DO?$AA@
  00058	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0005d	e9 d9 01 00 00	 jmp	 $LN10@weakref_re
$LN9@weakref_re:

; 163  : 
; 164  :     name = _PyObject_GetAttrId(PyWeakref_GET_OBJECT(self), &PyId___name__);

  00062	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0006a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00073	7e 13		 jle	 SHORT $LN14@weakref_re
  00075	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0007d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00081	48 89 44 24 48	 mov	 QWORD PTR tv85[rsp], rax
  00086	eb 0c		 jmp	 SHORT $LN15@weakref_re
$LN14@weakref_re:
  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0008f	48 89 44 24 48	 mov	 QWORD PTR tv85[rsp], rax
$LN15@weakref_re:
  00094	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___name__@?1??weakref_repr@@9@9
  00099	8b c0		 mov	 eax, eax
  0009b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000a1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000aa	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000ae	48 8b d0	 mov	 rdx, rax
  000b1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv85[rsp]
  000b6	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000bb	48 89 44 24 30	 mov	 QWORD PTR name$[rsp], rax

; 165  :     if (name == NULL || !PyUnicode_Check(name)) {

  000c0	48 83 7c 24 30
	00		 cmp	 QWORD PTR name$[rsp], 0
  000c6	74 1c		 je	 SHORT $LN7@weakref_re
  000c8	48 8b 44 24 30	 mov	 rax, QWORD PTR name$[rsp]
  000cd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000dc	85 c0		 test	 eax, eax
  000de	0f 85 a1 00 00
	00		 jne	 $LN8@weakref_re
$LN7@weakref_re:

; 166  :         if (name == NULL)

  000e4	48 83 7c 24 30
	00		 cmp	 QWORD PTR name$[rsp], 0
  000ea	75 05		 jne	 SHORT $LN6@weakref_re

; 167  :             PyErr_Clear();

  000ec	e8 00 00 00 00	 call	 PyErr_Clear
$LN6@weakref_re:

; 168  :         repr = PyUnicode_FromFormat(
; 169  :             "<weakref at %p; to '%s' at %p>",
; 170  :             self,
; 171  :             Py_TYPE(PyWeakref_GET_OBJECT(self))->tp_name,
; 172  :             PyWeakref_GET_OBJECT(self));

  000f1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000f9	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000fd	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00102	7e 13		 jle	 SHORT $LN16@weakref_re
  00104	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0010c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00110	48 89 44 24 50	 mov	 QWORD PTR tv130[rsp], rax
  00115	eb 0c		 jmp	 SHORT $LN17@weakref_re
$LN16@weakref_re:
  00117	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0011e	48 89 44 24 50	 mov	 QWORD PTR tv130[rsp], rax
$LN17@weakref_re:
  00123	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0012b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0012f	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00134	7e 13		 jle	 SHORT $LN18@weakref_re
  00136	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0013e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00142	48 89 44 24 58	 mov	 QWORD PTR tv136[rsp], rax
  00147	eb 0c		 jmp	 SHORT $LN19@weakref_re
$LN18@weakref_re:
  00149	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00150	48 89 44 24 58	 mov	 QWORD PTR tv136[rsp], rax
$LN19@weakref_re:
  00155	48 8b 44 24 58	 mov	 rax, QWORD PTR tv136[rsp]
  0015a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0015e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR tv130[rsp]
  00163	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00167	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  0016f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@NIAEBOAB@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?$DO?$AA@
  00176	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0017b	48 89 44 24 38	 mov	 QWORD PTR repr$[rsp], rax

; 173  :     }
; 174  :     else {

  00180	e9 99 00 00 00	 jmp	 $LN5@weakref_re
$LN8@weakref_re:

; 175  :         repr = PyUnicode_FromFormat(
; 176  :             "<weakref at %p; to '%s' at %p (%U)>",
; 177  :             self,
; 178  :             Py_TYPE(PyWeakref_GET_OBJECT(self))->tp_name,
; 179  :             PyWeakref_GET_OBJECT(self),
; 180  :             name);

  00185	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0018d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00191	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00196	7e 13		 jle	 SHORT $LN20@weakref_re
  00198	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001a0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001a4	48 89 44 24 60	 mov	 QWORD PTR tv148[rsp], rax
  001a9	eb 0c		 jmp	 SHORT $LN21@weakref_re
$LN20@weakref_re:
  001ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001b2	48 89 44 24 60	 mov	 QWORD PTR tv148[rsp], rax
$LN21@weakref_re:
  001b7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001bf	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001c3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  001c8	7e 13		 jle	 SHORT $LN22@weakref_re
  001ca	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001d2	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001d6	48 89 44 24 68	 mov	 QWORD PTR tv154[rsp], rax
  001db	eb 0c		 jmp	 SHORT $LN23@weakref_re
$LN22@weakref_re:
  001dd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001e4	48 89 44 24 68	 mov	 QWORD PTR tv154[rsp], rax
$LN23@weakref_re:
  001e9	48 8b 44 24 68	 mov	 rax, QWORD PTR tv154[rsp]
  001ee	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001f2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  001f7	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001fc	4c 8b 4c 24 60	 mov	 r9, QWORD PTR tv148[rsp]
  00201	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00205	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  0020d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@JMPLLHOJ@?$DMweakref?5at?5?$CFp?$DL?5to?5?8?$CFs?8?5at?5?$CFp?5?$CI?$CF@
  00214	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00219	48 89 44 24 38	 mov	 QWORD PTR repr$[rsp], rax
$LN5@weakref_re:
$LN4@weakref_re:

; 181  :     }
; 182  :     Py_XDECREF(name);

  0021e	48 83 7c 24 30
	00		 cmp	 QWORD PTR name$[rsp], 0
  00224	74 0a		 je	 SHORT $LN1@weakref_re
  00226	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  0022b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@weakref_re:
  00230	33 c0		 xor	 eax, eax
  00232	85 c0		 test	 eax, eax
  00234	75 e8		 jne	 SHORT $LN4@weakref_re

; 183  :     return repr;

  00236	48 8b 44 24 38	 mov	 rax, QWORD PTR repr$[rsp]
$LN10@weakref_re:

; 184  : }

  0023b	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0023f	c3		 ret	 0
weakref_repr ENDP
_TEXT	ENDS
EXTRN	PyObject_RichCompare:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$weakref_richcompare DD imagerel weakref_richcompare
	DD	imagerel weakref_richcompare+584
	DD	imagerel $unwind$weakref_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref_richcompare DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT weakref_richcompare
_TEXT	SEGMENT
res$20530 = 32
tv93 = 40
tv131 = 48
tv134 = 56
tv137 = 60
tv147 = 64
tv153 = 72
self$ = 96
other$ = 104
op$ = 112
weakref_richcompare PROC				; COMDAT

; 192  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 193  :     if ((op != Py_EQ && op != Py_NE) ||
; 194  :         !PyWeakref_Check(self) ||
; 195  :         !PyWeakref_Check(other)) {

  00013	83 7c 24 70 02	 cmp	 DWORD PTR op$[rsp], 2
  00018	74 0b		 je	 SHORT $LN8@weakref_ri
  0001a	83 7c 24 70 03	 cmp	 DWORD PTR op$[rsp], 3
  0001f	0f 85 9e 00 00
	00		 jne	 $LN9@weakref_ri
$LN8@weakref_ri:
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  0002c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00031	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00035	74 3d		 je	 SHORT $LN7@weakref_ri
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_RefType
  0003e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00043	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00047	e8 00 00 00 00	 call	 PyType_IsSubtype
  0004c	85 c0		 test	 eax, eax
  0004e	75 24		 jne	 SHORT $LN7@weakref_ri
  00050	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00057	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0005c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00060	74 12		 je	 SHORT $LN6@weakref_ri
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00069	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0006e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00072	75 4f		 jne	 SHORT $LN9@weakref_ri
$LN6@weakref_ri:
$LN7@weakref_ri:
  00074	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  0007b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  00080	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00084	74 55		 je	 SHORT $LN10@weakref_ri
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_RefType
  0008d	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  00092	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00096	e8 00 00 00 00	 call	 PyType_IsSubtype
  0009b	85 c0		 test	 eax, eax
  0009d	75 3c		 jne	 SHORT $LN10@weakref_ri
  0009f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  000a6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  000ab	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000af	74 2a		 je	 SHORT $LN10@weakref_ri
  000b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  000b8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  000bd	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000c1	74 18		 je	 SHORT $LN10@weakref_ri
$LN9@weakref_ri:

; 196  :         Py_RETURN_NOTIMPLEMENTED;

  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  000ca	e8 00 00 00 00	 call	 _Py_IncRef
  000cf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  000d6	e9 68 01 00 00	 jmp	 $LN11@weakref_ri
$LN10@weakref_ri:

; 197  :     }
; 198  :     if (PyWeakref_GET_OBJECT(self) == Py_None
; 199  :         || PyWeakref_GET_OBJECT(other) == Py_None) {

  000db	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000e0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000e4	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000e9	7e 10		 jle	 SHORT $LN13@weakref_ri
  000eb	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000f0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000f4	48 89 44 24 28	 mov	 QWORD PTR tv93[rsp], rax
  000f9	eb 0c		 jmp	 SHORT $LN14@weakref_ri
$LN13@weakref_ri:
  000fb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00102	48 89 44 24 28	 mov	 QWORD PTR tv93[rsp], rax
$LN14@weakref_ri:
  00107	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0010e	48 39 44 24 28	 cmp	 QWORD PTR tv93[rsp], rax
  00113	74 3e		 je	 SHORT $LN4@weakref_ri
  00115	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  0011a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0011e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00123	7e 10		 jle	 SHORT $LN15@weakref_ri
  00125	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  0012a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0012e	48 89 44 24 30	 mov	 QWORD PTR tv131[rsp], rax
  00133	eb 0c		 jmp	 SHORT $LN16@weakref_ri
$LN15@weakref_ri:
  00135	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0013c	48 89 44 24 30	 mov	 QWORD PTR tv131[rsp], rax
$LN16@weakref_ri:
  00141	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00148	48 39 44 24 30	 cmp	 QWORD PTR tv131[rsp], rax
  0014d	0f 85 84 00 00
	00		 jne	 $LN5@weakref_ri
$LN4@weakref_ri:

; 200  :         int res = (self == other);

  00153	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  00158	48 39 44 24 60	 cmp	 QWORD PTR self$[rsp], rax
  0015d	75 0a		 jne	 SHORT $LN17@weakref_ri
  0015f	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv134[rsp], 1
  00167	eb 08		 jmp	 SHORT $LN18@weakref_ri
$LN17@weakref_ri:
  00169	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv134[rsp], 0
$LN18@weakref_ri:
  00171	8b 44 24 38	 mov	 eax, DWORD PTR tv134[rsp]
  00175	89 44 24 20	 mov	 DWORD PTR res$20530[rsp], eax

; 201  :         if (op == Py_NE)

  00179	83 7c 24 70 03	 cmp	 DWORD PTR op$[rsp], 3
  0017e	75 21		 jne	 SHORT $LN3@weakref_ri

; 202  :             res = !res;

  00180	83 7c 24 20 00	 cmp	 DWORD PTR res$20530[rsp], 0
  00185	75 0a		 jne	 SHORT $LN19@weakref_ri
  00187	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv137[rsp], 1
  0018f	eb 08		 jmp	 SHORT $LN20@weakref_ri
$LN19@weakref_ri:
  00191	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv137[rsp], 0
$LN20@weakref_ri:
  00199	8b 44 24 3c	 mov	 eax, DWORD PTR tv137[rsp]
  0019d	89 44 24 20	 mov	 DWORD PTR res$20530[rsp], eax
$LN3@weakref_ri:

; 203  :         if (res)

  001a1	83 7c 24 20 00	 cmp	 DWORD PTR res$20530[rsp], 0
  001a6	74 1a		 je	 SHORT $LN2@weakref_ri

; 204  :             Py_RETURN_TRUE;

  001a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  001af	e8 00 00 00 00	 call	 _Py_IncRef
  001b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001bb	e9 83 00 00 00	 jmp	 $LN11@weakref_ri

; 205  :         else

  001c0	eb 15		 jmp	 SHORT $LN1@weakref_ri
$LN2@weakref_ri:

; 206  :             Py_RETURN_FALSE;

  001c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  001c9	e8 00 00 00 00	 call	 _Py_IncRef
  001ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001d5	eb 6c		 jmp	 SHORT $LN11@weakref_ri
$LN1@weakref_ri:
$LN5@weakref_ri:

; 207  :     }
; 208  :     return PyObject_RichCompare(PyWeakref_GET_OBJECT(self),
; 209  :                                 PyWeakref_GET_OBJECT(other), op);

  001d7	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  001dc	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001e0	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  001e5	7e 10		 jle	 SHORT $LN21@weakref_ri
  001e7	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  001ec	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001f0	48 89 44 24 40	 mov	 QWORD PTR tv147[rsp], rax
  001f5	eb 0c		 jmp	 SHORT $LN22@weakref_ri
$LN21@weakref_ri:
  001f7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001fe	48 89 44 24 40	 mov	 QWORD PTR tv147[rsp], rax
$LN22@weakref_ri:
  00203	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00208	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0020c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00211	7e 10		 jle	 SHORT $LN23@weakref_ri
  00213	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00218	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0021c	48 89 44 24 48	 mov	 QWORD PTR tv153[rsp], rax
  00221	eb 0c		 jmp	 SHORT $LN24@weakref_ri
$LN23@weakref_ri:
  00223	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0022a	48 89 44 24 48	 mov	 QWORD PTR tv153[rsp], rax
$LN24@weakref_ri:
  0022f	44 8b 44 24 70	 mov	 r8d, DWORD PTR op$[rsp]
  00234	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv147[rsp]
  00239	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv153[rsp]
  0023e	e8 00 00 00 00	 call	 PyObject_RichCompare
$LN11@weakref_ri:

; 210  : }

  00243	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00247	c3		 ret	 0
weakref_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@ ; `string'
PUBLIC	??_C@_07MEBHOIG@__new__?$AA@			; `string'
EXTRN	PyErr_Format:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$weakref___new__ DD imagerel weakref___new__
	DD	imagerel weakref___new__+493
	DD	imagerel $unwind$weakref___new__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref___new__ DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@
CONST	SEGMENT
??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@ DB 'cannot crea'
	DB	'te weak reference to ''%s'' object', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEBHOIG@__new__?$AA@
CONST	SEGMENT
??_C@_07MEBHOIG@__new__?$AA@ DB '__new__', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT weakref___new__
_TEXT	SEGMENT
ob$ = 48
self$ = 56
callback$ = 64
ref$20612 = 72
list$20614 = 80
proxy$20613 = 88
prev$20638 = 96
tv138 = 104
type$ = 128
args$ = 136
kwargs$ = 144
weakref___new__ PROC					; COMDAT

; 277  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 278  :     PyWeakReference *self = NULL;

  00013	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR self$[rsp], 0

; 279  :     PyObject *ob, *callback = NULL;

  0001c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR callback$[rsp], 0

; 280  : 
; 281  :     if (parse_weakref_init_args("__new__", args, kwargs, &ob, &callback)) {

  00025	48 8d 44 24 40	 lea	 rax, QWORD PTR callback$[rsp]
  0002a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002f	4c 8d 4c 24 30	 lea	 r9, QWORD PTR ob$[rsp]
  00034	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR kwargs$[rsp]
  0003c	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR args$[rsp]
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07MEBHOIG@__new__?$AA@
  0004b	e8 00 00 00 00	 call	 parse_weakref_init_args
  00050	85 c0		 test	 eax, eax
  00052	0f 84 8b 01 00
	00		 je	 $LN10@weakref___

; 282  :         PyWeakReference *ref, *proxy;
; 283  :         PyWeakReference **list;
; 284  : 
; 285  :         if (!PyType_SUPPORTS_WEAKREFS(Py_TYPE(ob))) {

  00058	48 8b 44 24 30	 mov	 rax, QWORD PTR ob$[rsp]
  0005d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00061	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  00069	7f 27		 jg	 SHORT $LN9@weakref___

; 286  :             PyErr_Format(PyExc_TypeError,
; 287  :                          "cannot create weak reference to '%s' object",
; 288  :                          Py_TYPE(ob)->tp_name);

  0006b	48 8b 44 24 30	 mov	 rax, QWORD PTR ob$[rsp]
  00070	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00074	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@
  0007f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00086	e8 00 00 00 00	 call	 PyErr_Format

; 289  :             return NULL;

  0008b	33 c0		 xor	 eax, eax
  0008d	e9 56 01 00 00	 jmp	 $LN11@weakref___
$LN9@weakref___:

; 290  :         }
; 291  :         if (callback == Py_None)

  00092	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00099	48 39 44 24 40	 cmp	 QWORD PTR callback$[rsp], rax
  0009e	75 09		 jne	 SHORT $LN8@weakref___

; 292  :             callback = NULL;

  000a0	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR callback$[rsp], 0
$LN8@weakref___:

; 293  :         list = GET_WEAKREFS_LISTPTR(ob);

  000a9	48 8b 44 24 30	 mov	 rax, QWORD PTR ob$[rsp]
  000ae	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b2	48 8b 80 28 01
	00 00		 mov	 rax, QWORD PTR [rax+296]
  000b9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ob$[rsp]
  000be	48 03 c8	 add	 rcx, rax
  000c1	48 8b c1	 mov	 rax, rcx
  000c4	48 89 44 24 50	 mov	 QWORD PTR list$20614[rsp], rax

; 294  :         get_basic_refs(*list, &ref, &proxy);

  000c9	4c 8d 44 24 58	 lea	 r8, QWORD PTR proxy$20613[rsp]
  000ce	48 8d 54 24 48	 lea	 rdx, QWORD PTR ref$20612[rsp]
  000d3	48 8b 44 24 50	 mov	 rax, QWORD PTR list$20614[rsp]
  000d8	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000db	e8 00 00 00 00	 call	 get_basic_refs

; 295  :         if (callback == NULL && type == &_PyWeakref_RefType) {

  000e0	48 83 7c 24 40
	00		 cmp	 QWORD PTR callback$[rsp], 0
  000e6	75 2d		 jne	 SHORT $LN7@weakref___
  000e8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  000ef	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR type$[rsp], rax
  000f7	75 1c		 jne	 SHORT $LN7@weakref___

; 296  :             if (ref != NULL) {

  000f9	48 83 7c 24 48
	00		 cmp	 QWORD PTR ref$20612[rsp], 0
  000ff	74 14		 je	 SHORT $LN6@weakref___

; 297  :                 /* We can re-use an existing reference. */
; 298  :                 Py_INCREF(ref);

  00101	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ref$20612[rsp]
  00106	e8 00 00 00 00	 call	 _Py_IncRef

; 299  :                 return (PyObject *)ref;

  0010b	48 8b 44 24 48	 mov	 rax, QWORD PTR ref$20612[rsp]
  00110	e9 d3 00 00 00	 jmp	 $LN11@weakref___
$LN6@weakref___:
$LN7@weakref___:

; 300  :             }
; 301  :         }
; 302  :         /* We have to create a new reference. */
; 303  :         /* Note: the tp_alloc() can trigger cyclic GC, so the weakref
; 304  :            list on ob can be mutated.  This means that the ref and
; 305  :            proxy pointers we got back earlier may have been collected,
; 306  :            so we need to compute these values again before we use
; 307  :            them. */
; 308  :         self = (PyWeakReference *) (type->tp_alloc(type, 0));

  00115	33 d2		 xor	 edx, edx
  00117	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  0011f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00127	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  0012d	48 89 44 24 38	 mov	 QWORD PTR self$[rsp], rax

; 309  :         if (self != NULL) {

  00132	48 83 7c 24 38
	00		 cmp	 QWORD PTR self$[rsp], 0
  00138	0f 84 a5 00 00
	00		 je	 $LN5@weakref___

; 310  :             init_weakref(self, ob, callback);

  0013e	4c 8b 44 24 40	 mov	 r8, QWORD PTR callback$[rsp]
  00143	48 8b 54 24 30	 mov	 rdx, QWORD PTR ob$[rsp]
  00148	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  0014d	e8 00 00 00 00	 call	 init_weakref

; 311  :             if (callback == NULL && type == &_PyWeakref_RefType) {

  00152	48 83 7c 24 40
	00		 cmp	 QWORD PTR callback$[rsp], 0
  00158	75 22		 jne	 SHORT $LN4@weakref___
  0015a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  00161	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR type$[rsp], rax
  00169	75 11		 jne	 SHORT $LN4@weakref___

; 312  :                 insert_head(self, list);

  0016b	48 8b 54 24 50	 mov	 rdx, QWORD PTR list$20614[rsp]
  00170	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  00175	e8 00 00 00 00	 call	 insert_head

; 313  :             }
; 314  :             else {

  0017a	eb 67		 jmp	 SHORT $LN3@weakref___
$LN4@weakref___:

; 315  :                 PyWeakReference *prev;
; 316  : 
; 317  :                 get_basic_refs(*list, &ref, &proxy);

  0017c	4c 8d 44 24 58	 lea	 r8, QWORD PTR proxy$20613[rsp]
  00181	48 8d 54 24 48	 lea	 rdx, QWORD PTR ref$20612[rsp]
  00186	48 8b 44 24 50	 mov	 rax, QWORD PTR list$20614[rsp]
  0018b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0018e	e8 00 00 00 00	 call	 get_basic_refs

; 318  :                 prev = (proxy == NULL) ? ref : proxy;

  00193	48 83 7c 24 58
	00		 cmp	 QWORD PTR proxy$20613[rsp], 0
  00199	75 0c		 jne	 SHORT $LN13@weakref___
  0019b	48 8b 44 24 48	 mov	 rax, QWORD PTR ref$20612[rsp]
  001a0	48 89 44 24 68	 mov	 QWORD PTR tv138[rsp], rax
  001a5	eb 0a		 jmp	 SHORT $LN14@weakref___
$LN13@weakref___:
  001a7	48 8b 44 24 58	 mov	 rax, QWORD PTR proxy$20613[rsp]
  001ac	48 89 44 24 68	 mov	 QWORD PTR tv138[rsp], rax
$LN14@weakref___:
  001b1	48 8b 44 24 68	 mov	 rax, QWORD PTR tv138[rsp]
  001b6	48 89 44 24 60	 mov	 QWORD PTR prev$20638[rsp], rax

; 319  :                 if (prev == NULL)

  001bb	48 83 7c 24 60
	00		 cmp	 QWORD PTR prev$20638[rsp], 0
  001c1	75 11		 jne	 SHORT $LN2@weakref___

; 320  :                     insert_head(self, list);

  001c3	48 8b 54 24 50	 mov	 rdx, QWORD PTR list$20614[rsp]
  001c8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  001cd	e8 00 00 00 00	 call	 insert_head

; 321  :                 else

  001d2	eb 0f		 jmp	 SHORT $LN1@weakref___
$LN2@weakref___:

; 322  :                     insert_after(self, prev);

  001d4	48 8b 54 24 60	 mov	 rdx, QWORD PTR prev$20638[rsp]
  001d9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  001de	e8 00 00 00 00	 call	 insert_after
$LN1@weakref___:
$LN3@weakref___:
$LN5@weakref___:
$LN10@weakref___:

; 323  :             }
; 324  :         }
; 325  :     }
; 326  :     return (PyObject *)self;

  001e3	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
$LN11@weakref___:

; 327  : }

  001e8	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001ec	c3		 ret	 0
weakref___new__ ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_weakref DD imagerel init_weakref
	DD	imagerel init_weakref+89
	DD	imagerel $unwind$init_weakref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_weakref DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT init_weakref
_TEXT	SEGMENT
self$ = 48
ob$ = 56
callback$ = 64
init_weakref PROC					; COMDAT

; 24   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 25   :     self->hash = -1;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 c7 40 70 ff
	ff ff ff	 mov	 QWORD PTR [rax+112], -1

; 26   :     self->wr_object = ob;

  00020	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00025	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ob$[rsp]
  0002a	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN4@init_weakr:

; 27   :     Py_XINCREF(callback);

  0002e	48 83 7c 24 40
	00		 cmp	 QWORD PTR callback$[rsp], 0
  00034	74 0a		 je	 SHORT $LN1@init_weakr
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR callback$[rsp]
  0003b	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@init_weakr:
  00040	33 c0		 xor	 eax, eax
  00042	85 c0		 test	 eax, eax
  00044	75 e8		 jne	 SHORT $LN4@init_weakr

; 28   :     self->wr_callback = callback;

  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR callback$[rsp]
  00050	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 29   : }

  00054	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00058	c3		 ret	 0
init_weakref ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT get_basic_refs
_TEXT	SEGMENT
head$ = 8
refp$ = 16
proxyp$ = 24
get_basic_refs PROC					; COMDAT

; 220  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 221  :     *refp = NULL;

  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR refp$[rsp]
  00014	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 222  :     *proxyp = NULL;

  0001b	48 8b 44 24 18	 mov	 rax, QWORD PTR proxyp$[rsp]
  00020	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 223  : 
; 224  :     if (head != NULL && head->wr_callback == NULL) {

  00027	48 83 7c 24 08
	00		 cmp	 QWORD PTR head$[rsp], 0
  0002d	0f 84 81 00 00
	00		 je	 $LN4@get_basic_
  00033	48 8b 44 24 08	 mov	 rax, QWORD PTR head$[rsp]
  00038	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0003d	75 75		 jne	 SHORT $LN4@get_basic_

; 225  :         /* We need to be careful that the "basic refs" aren't
; 226  :            subclasses of the main types.  That complicates this a
; 227  :            little. */
; 228  :         if (PyWeakref_CheckRefExact(head)) {

  0003f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  00046	48 8b 4c 24 08	 mov	 rcx, QWORD PTR head$[rsp]
  0004b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0004f	75 1e		 jne	 SHORT $LN3@get_basic_

; 229  :             *refp = head;

  00051	48 8b 44 24 10	 mov	 rax, QWORD PTR refp$[rsp]
  00056	48 8b 4c 24 08	 mov	 rcx, QWORD PTR head$[rsp]
  0005b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 230  :             head = head->wr_next;

  0005e	48 8b 44 24 08	 mov	 rax, QWORD PTR head$[rsp]
  00063	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0006a	48 89 44 24 08	 mov	 QWORD PTR head$[rsp], rax
$LN3@get_basic_:

; 231  :         }
; 232  :         if (head != NULL
; 233  :             && head->wr_callback == NULL
; 234  :             && PyWeakref_CheckProxy(head)) {

  0006f	48 83 7c 24 08
	00		 cmp	 QWORD PTR head$[rsp], 0
  00075	74 3d		 je	 SHORT $LN2@get_basic_
  00077	48 8b 44 24 08	 mov	 rax, QWORD PTR head$[rsp]
  0007c	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00081	75 31		 jne	 SHORT $LN2@get_basic_
  00083	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  0008a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR head$[rsp]
  0008f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00093	74 12		 je	 SHORT $LN1@get_basic_
  00095	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  0009c	48 8b 4c 24 08	 mov	 rcx, QWORD PTR head$[rsp]
  000a1	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a5	75 0d		 jne	 SHORT $LN2@get_basic_
$LN1@get_basic_:

; 235  :             *proxyp = head;

  000a7	48 8b 44 24 18	 mov	 rax, QWORD PTR proxyp$[rsp]
  000ac	48 8b 4c 24 08	 mov	 rcx, QWORD PTR head$[rsp]
  000b1	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN2@get_basic_:
$LN4@get_basic_:

; 236  :             /* head = head->wr_next; */
; 237  :         }
; 238  :     }
; 239  : }

  000b4	f3 c3		 fatret	 0
get_basic_refs ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT insert_after
_TEXT	SEGMENT
newref$ = 8
prev$ = 16
insert_after PROC					; COMDAT

; 244  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 245  :     newref->wr_prev = prev;

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR newref$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR prev$[rsp]
  00014	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 246  :     newref->wr_next = prev->wr_next;

  00018	48 8b 44 24 08	 mov	 rax, QWORD PTR newref$[rsp]
  0001d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR prev$[rsp]
  00022	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00029	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 247  :     if (prev->wr_next != NULL)

  00030	48 8b 44 24 10	 mov	 rax, QWORD PTR prev$[rsp]
  00035	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0003d	74 15		 je	 SHORT $LN1@insert_aft

; 248  :         prev->wr_next->wr_prev = newref;

  0003f	48 8b 44 24 10	 mov	 rax, QWORD PTR prev$[rsp]
  00044	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0004b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR newref$[rsp]
  00050	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx
$LN1@insert_aft:

; 249  :     prev->wr_next = newref;

  00054	48 8b 44 24 10	 mov	 rax, QWORD PTR prev$[rsp]
  00059	48 8b 4c 24 08	 mov	 rcx, QWORD PTR newref$[rsp]
  0005e	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 250  : }

  00065	c3		 ret	 0
insert_after ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$insert_head DD imagerel insert_head
	DD	imagerel insert_head+93
	DD	imagerel $unwind$insert_head
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$insert_head DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT insert_head
_TEXT	SEGMENT
next$ = 0
newref$ = 32
list$ = 40
insert_head PROC					; COMDAT

; 257  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 258  :     PyWeakReference *next = *list;

  0000e	48 8b 44 24 28	 mov	 rax, QWORD PTR list$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 04 24	 mov	 QWORD PTR next$[rsp], rax

; 259  : 
; 260  :     newref->wr_prev = NULL;

  0001a	48 8b 44 24 20	 mov	 rax, QWORD PTR newref$[rsp]
  0001f	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 261  :     newref->wr_next = next;

  00027	48 8b 44 24 20	 mov	 rax, QWORD PTR newref$[rsp]
  0002c	48 8b 0c 24	 mov	 rcx, QWORD PTR next$[rsp]
  00030	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 262  :     if (next != NULL)

  00037	48 83 3c 24 00	 cmp	 QWORD PTR next$[rsp], 0
  0003c	74 0d		 je	 SHORT $LN1@insert_hea

; 263  :         next->wr_prev = newref;

  0003e	48 8b 04 24	 mov	 rax, QWORD PTR next$[rsp]
  00042	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newref$[rsp]
  00047	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx
$LN1@insert_hea:

; 264  :     *list = newref;

  0004b	48 8b 44 24 28	 mov	 rax, QWORD PTR list$[rsp]
  00050	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newref$[rsp]
  00055	48 89 08	 mov	 QWORD PTR [rax], rcx

; 265  : }

  00058	48 83 c4 18	 add	 rsp, 24
  0005c	c3		 ret	 0
insert_head ENDP
_TEXT	ENDS
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_weakref_init_args DD imagerel parse_weakref_init_args
	DD	imagerel parse_weakref_init_args+76
	DD	imagerel $unwind$parse_weakref_init_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_weakref_init_args DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parse_weakref_init_args
_TEXT	SEGMENT
funcname$ = 64
args$ = 72
kwargs$ = 80
obp$ = 88
callbackp$ = 96
parse_weakref_init_args PROC				; COMDAT

; 270  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 271  :     /* XXX Should check that kwargs == NULL or is empty. */
; 272  :     return PyArg_UnpackTuple(args, funcname, 1, 2, obp, callbackp);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR callbackp$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR obp$[rsp]
  00027	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00032	41 b8 01 00 00
	00		 mov	 r8d, 1
  00038	48 8b 54 24 40	 mov	 rdx, QWORD PTR funcname$[rsp]
  0003d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00042	e8 00 00 00 00	 call	 PyArg_UnpackTuple

; 273  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
parse_weakref_init_args ENDP
_TEXT	ENDS
PUBLIC	??_C@_08DOHHOJGB@__init__?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$weakref___init__ DD imagerel weakref___init__
	DD	imagerel weakref___init__+76
	DD	imagerel $unwind$weakref___init__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$weakref___init__ DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_08DOHHOJGB@__init__?$AA@
CONST	SEGMENT
??_C@_08DOHHOJGB@__init__?$AA@ DB '__init__', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT weakref___init__
_TEXT	SEGMENT
tmp$ = 48
self$ = 80
args$ = 88
kwargs$ = 96
weakref___init__ PROC					; COMDAT

; 331  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 332  :     PyObject *tmp;
; 333  : 
; 334  :     if (parse_weakref_init_args("__init__", args, kwargs, &tmp, &tmp))

  00013	48 8d 44 24 30	 lea	 rax, QWORD PTR tmp$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0001d	4c 8d 4c 24 30	 lea	 r9, QWORD PTR tmp$[rsp]
  00022	4c 8b 44 24 60	 mov	 r8, QWORD PTR kwargs$[rsp]
  00027	48 8b 54 24 58	 mov	 rdx, QWORD PTR args$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08DOHHOJGB@__init__?$AA@
  00033	e8 00 00 00 00	 call	 parse_weakref_init_args
  00038	85 c0		 test	 eax, eax
  0003a	74 06		 je	 SHORT $LN2@weakref___@2

; 335  :         return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 07		 jmp	 SHORT $LN3@weakref___@2

; 336  :     else

  00040	eb 05		 jmp	 SHORT $LN1@weakref___@2
$LN2@weakref___@2:

; 337  :         return -1;

  00042	b8 ff ff ff ff	 mov	 eax, -1
$LN1@weakref___@2:
$LN3@weakref___@2:

; 338  : }

  00047	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004b	c3		 ret	 0
weakref___init__ ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_getattr DD imagerel proxy_getattr
	DD	imagerel proxy_getattr+253
	DD	imagerel $unwind$proxy_getattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_getattr DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_getattr
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_getattr PROC					; COMDAT

; 455  : WRAP_BINARY(proxy_getattr, PyObject_GetAttr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_geta
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_geta
$LN5@proxy_geta:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_geta
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_geta
$LN4@proxy_geta:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_geta
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_geta
$LN9@proxy_geta:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_geta:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_geta:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_geta
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_geta
$LN2@proxy_geta:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_geta
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_geta
$LN1@proxy_geta:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_geta
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_geta
$LN11@proxy_geta:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_geta:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_geta:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyObject_GetAttr
$LN7@proxy_geta:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_getattr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@EDCOGGKH@weakly?9referenced?5object?5no?5long@ ; `string'
EXTRN	PyExc_ReferenceError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_checkref DD imagerel proxy_checkref
	DD	imagerel proxy_checkref+100
	DD	imagerel $unwind$proxy_checkref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_checkref DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CK@EDCOGGKH@weakly?9referenced?5object?5no?5long@
CONST	SEGMENT
??_C@_0CK@EDCOGGKH@weakly?9referenced?5object?5no?5long@ DB 'weakly-refer'
	DB	'enced object no longer exists', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT proxy_checkref
_TEXT	SEGMENT
tv68 = 32
proxy$ = 64
proxy_checkref PROC					; COMDAT

; 388  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 389  :     if (PyWeakref_GET_OBJECT(proxy) == Py_None) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00017	7e 10		 jle	 SHORT $LN4@proxy_chec
  00019	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  0001e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00022	48 89 44 24 20	 mov	 QWORD PTR tv68[rsp], rax
  00027	eb 0c		 jmp	 SHORT $LN5@proxy_chec
$LN4@proxy_chec:
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00030	48 89 44 24 20	 mov	 QWORD PTR tv68[rsp], rax
$LN5@proxy_chec:
  00035	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0003c	48 39 44 24 20	 cmp	 QWORD PTR tv68[rsp], rax
  00041	75 17		 jne	 SHORT $LN1@proxy_chec

; 390  :         PyErr_SetString(PyExc_ReferenceError,
; 391  :                         "weakly-referenced object no longer exists");

  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EDCOGGKH@weakly?9referenced?5object?5no?5long@
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ReferenceError
  00051	e8 00 00 00 00	 call	 PyErr_SetString

; 392  :         return 0;

  00056	33 c0		 xor	 eax, eax
  00058	eb 05		 jmp	 SHORT $LN2@proxy_chec
$LN1@proxy_chec:

; 393  :     }
; 394  :     return 1;

  0005a	b8 01 00 00 00	 mov	 eax, 1
$LN2@proxy_chec:

; 395  : }

  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	c3		 ret	 0
proxy_checkref ENDP
_TEXT	ENDS
EXTRN	PyObject_Str:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_str DD imagerel proxy_str
	DD	imagerel proxy_str+132
	DD	imagerel $unwind$proxy_str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_str DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_str
_TEXT	SEGMENT
tv75 = 32
proxy$ = 64
proxy_str PROC						; COMDAT

; 456  : WRAP_UNARY(proxy_str, PyObject_Str)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 12		 je	 SHORT $LN2@proxy_str
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00027	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002b	75 48		 jne	 SHORT $LN3@proxy_str
$LN2@proxy_str:
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00032	e8 00 00 00 00	 call	 proxy_checkref
  00037	85 c0		 test	 eax, eax
  00039	75 04		 jne	 SHORT $LN1@proxy_str
  0003b	33 c0		 xor	 eax, eax
  0003d	eb 40		 jmp	 SHORT $LN4@proxy_str
$LN1@proxy_str:
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0004d	7e 10		 jle	 SHORT $LN6@proxy_str
  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00054	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00058	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0005d	eb 0c		 jmp	 SHORT $LN7@proxy_str
$LN6@proxy_str:
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN7@proxy_str:
  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00070	48 89 44 24 40	 mov	 QWORD PTR proxy$[rsp], rax
$LN3@proxy_str:
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0007a	e8 00 00 00 00	 call	 PyObject_Str
$LN4@proxy_str:
  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
proxy_str ENDP
_TEXT	ENDS
EXTRN	PyEval_CallObjectWithKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_call DD imagerel proxy_call
	DD	imagerel proxy_call+382
	DD	imagerel $unwind$proxy_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_call DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_call
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
tv132 = 48
proxy$ = 80
v$ = 88
w$ = 96
proxy_call PROC						; COMDAT

; 457  : WRAP_TERNARY(proxy_call, PyEval_CallObjectWithKeywords)

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 12		 je	 SHORT $LN9@proxy_call
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  00031	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00035	75 4b		 jne	 SHORT $LN10@proxy_call
$LN9@proxy_call:
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  0003c	e8 00 00 00 00	 call	 proxy_checkref
  00041	85 c0		 test	 eax, eax
  00043	75 07		 jne	 SHORT $LN8@proxy_call
  00045	33 c0		 xor	 eax, eax
  00047	e9 2d 01 00 00	 jmp	 $LN11@proxy_call
$LN8@proxy_call:
  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR proxy$[rsp]
  00051	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00055	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0005a	7e 10		 jle	 SHORT $LN13@proxy_call
  0005c	48 8b 44 24 50	 mov	 rax, QWORD PTR proxy$[rsp]
  00061	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00065	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0006a	eb 0c		 jmp	 SHORT $LN14@proxy_call
$LN13@proxy_call:
  0006c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00073	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN14@proxy_call:
  00078	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  0007d	48 89 44 24 50	 mov	 QWORD PTR proxy$[rsp], rax
$LN10@proxy_call:
  00082	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00089	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  0008e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00092	74 12		 je	 SHORT $LN6@proxy_call
  00094	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  0009b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  000a0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a4	75 4b		 jne	 SHORT $LN7@proxy_call
$LN6@proxy_call:
  000a6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  000ab	e8 00 00 00 00	 call	 proxy_checkref
  000b0	85 c0		 test	 eax, eax
  000b2	75 07		 jne	 SHORT $LN5@proxy_call
  000b4	33 c0		 xor	 eax, eax
  000b6	e9 be 00 00 00	 jmp	 $LN11@proxy_call
$LN5@proxy_call:
  000bb	48 8b 44 24 58	 mov	 rax, QWORD PTR v$[rsp]
  000c0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000c4	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c9	7e 10		 jle	 SHORT $LN15@proxy_call
  000cb	48 8b 44 24 58	 mov	 rax, QWORD PTR v$[rsp]
  000d0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000d4	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d9	eb 0c		 jmp	 SHORT $LN16@proxy_call
$LN15@proxy_call:
  000db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000e2	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN16@proxy_call:
  000e7	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000ec	48 89 44 24 58	 mov	 QWORD PTR v$[rsp], rax
$LN7@proxy_call:
  000f1	48 83 7c 24 60
	00		 cmp	 QWORD PTR w$[rsp], 0
  000f7	74 6c		 je	 SHORT $LN4@proxy_call
  000f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00100	48 8b 4c 24 60	 mov	 rcx, QWORD PTR w$[rsp]
  00105	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00109	74 12		 je	 SHORT $LN2@proxy_call
  0010b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00112	48 8b 4c 24 60	 mov	 rcx, QWORD PTR w$[rsp]
  00117	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0011b	75 48		 jne	 SHORT $LN3@proxy_call
$LN2@proxy_call:
  0011d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR w$[rsp]
  00122	e8 00 00 00 00	 call	 proxy_checkref
  00127	85 c0		 test	 eax, eax
  00129	75 04		 jne	 SHORT $LN1@proxy_call
  0012b	33 c0		 xor	 eax, eax
  0012d	eb 4a		 jmp	 SHORT $LN11@proxy_call
$LN1@proxy_call:
  0012f	48 8b 44 24 60	 mov	 rax, QWORD PTR w$[rsp]
  00134	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00138	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0013d	7e 10		 jle	 SHORT $LN17@proxy_call
  0013f	48 8b 44 24 60	 mov	 rax, QWORD PTR w$[rsp]
  00144	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00148	48 89 44 24 30	 mov	 QWORD PTR tv132[rsp], rax
  0014d	eb 0c		 jmp	 SHORT $LN18@proxy_call
$LN17@proxy_call:
  0014f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00156	48 89 44 24 30	 mov	 QWORD PTR tv132[rsp], rax
$LN18@proxy_call:
  0015b	48 8b 44 24 30	 mov	 rax, QWORD PTR tv132[rsp]
  00160	48 89 44 24 60	 mov	 QWORD PTR w$[rsp], rax
$LN3@proxy_call:
$LN4@proxy_call:
  00165	4c 8b 44 24 60	 mov	 r8, QWORD PTR w$[rsp]
  0016a	48 8b 54 24 58	 mov	 rdx, QWORD PTR v$[rsp]
  0016f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  00174	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
$LN11@proxy_call:
  00179	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0017d	c3		 ret	 0
proxy_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@CMOAABP@?$DMweakproxy?5at?5?$CFp?5to?5?$CFs?5at?5?$CFp?$DO?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_repr DD imagerel proxy_repr
	DD	imagerel proxy_repr+137
	DD	imagerel $unwind$proxy_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_repr DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BO@CMOAABP@?$DMweakproxy?5at?5?$CFp?5to?5?$CFs?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BO@CMOAABP@?$DMweakproxy?5at?5?$CFp?5to?5?$CFs?5at?5?$CFp?$DO?$AA@ DB '<'
	DB	'weakproxy at %p to %s at %p>', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT proxy_repr
_TEXT	SEGMENT
tv69 = 32
tv75 = 40
proxy$ = 64
proxy_repr PROC						; COMDAT

; 461  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 462  :     return PyUnicode_FromFormat(
; 463  :         "<weakproxy at %p to %s at %p>",
; 464  :         proxy,
; 465  :         Py_TYPE(PyWeakref_GET_OBJECT(proxy))->tp_name,
; 466  :         PyWeakref_GET_OBJECT(proxy));

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00017	7e 10		 jle	 SHORT $LN3@proxy_repr
  00019	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  0001e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00022	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00027	eb 0c		 jmp	 SHORT $LN4@proxy_repr
$LN3@proxy_repr:
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00030	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
$LN4@proxy_repr:
  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  0003a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0003e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00043	7e 10		 jle	 SHORT $LN5@proxy_repr
  00045	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  0004a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004e	48 89 44 24 28	 mov	 QWORD PTR tv75[rsp], rax
  00053	eb 0c		 jmp	 SHORT $LN6@proxy_repr
$LN5@proxy_repr:
  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0005c	48 89 44 24 28	 mov	 QWORD PTR tv75[rsp], rax
$LN6@proxy_repr:
  00061	48 8b 44 24 28	 mov	 rax, QWORD PTR tv75[rsp]
  00066	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006a	4c 8b 4c 24 20	 mov	 r9, QWORD PTR tv69[rsp]
  0006f	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00073	48 8b 54 24 40	 mov	 rdx, QWORD PTR proxy$[rsp]
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@CMOAABP@?$DMweakproxy?5at?5?$CFp?5to?5?$CFs?5at?5?$CFp?$DO?$AA@
  0007f	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 467  : }

  00084	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00088	c3		 ret	 0
proxy_repr ENDP
_TEXT	ENDS
EXTRN	PyObject_SetAttr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_setattr DD imagerel proxy_setattr
	DD	imagerel proxy_setattr+109
	DD	imagerel $unwind$proxy_setattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_setattr DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_setattr
_TEXT	SEGMENT
tv74 = 32
proxy$ = 64
name$ = 72
value$ = 80
proxy_setattr PROC					; COMDAT

; 472  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 473  :     if (!proxy_checkref(proxy))

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00018	e8 00 00 00 00	 call	 proxy_checkref
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN1@proxy_seta

; 474  :         return -1;

  00021	b8 ff ff ff ff	 mov	 eax, -1
  00026	eb 40		 jmp	 SHORT $LN2@proxy_seta
$LN1@proxy_seta:

; 475  :     return PyObject_SetAttr(PyWeakref_GET_OBJECT(proxy), name, value);

  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  0002d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00031	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00036	7e 10		 jle	 SHORT $LN4@proxy_seta
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  0003d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00041	48 89 44 24 20	 mov	 QWORD PTR tv74[rsp], rax
  00046	eb 0c		 jmp	 SHORT $LN5@proxy_seta
$LN4@proxy_seta:
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004f	48 89 44 24 20	 mov	 QWORD PTR tv74[rsp], rax
$LN5@proxy_seta:
  00054	4c 8b 44 24 50	 mov	 r8, QWORD PTR value$[rsp]
  00059	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  0005e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv74[rsp]
  00063	e8 00 00 00 00	 call	 PyObject_SetAttr
$LN2@proxy_seta:

; 476  : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
proxy_setattr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_richcompare DD imagerel proxy_richcompare
	DD	imagerel proxy_richcompare+263
	DD	imagerel $unwind$proxy_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_richcompare DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_richcompare
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
proxy$ = 64
v$ = 72
op$ = 80
proxy_richcompare PROC					; COMDAT

; 480  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 481  :     UNWRAP(proxy);

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 12		 je	 SHORT $LN5@proxy_rich
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00031	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00035	75 4b		 jne	 SHORT $LN6@proxy_rich
$LN5@proxy_rich:
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0003c	e8 00 00 00 00	 call	 proxy_checkref
  00041	85 c0		 test	 eax, eax
  00043	75 07		 jne	 SHORT $LN4@proxy_rich
  00045	33 c0		 xor	 eax, eax
  00047	e9 b6 00 00 00	 jmp	 $LN7@proxy_rich
$LN4@proxy_rich:
  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00051	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00055	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0005a	7e 10		 jle	 SHORT $LN9@proxy_rich
  0005c	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00061	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00065	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0006a	eb 0c		 jmp	 SHORT $LN10@proxy_rich
$LN9@proxy_rich:
  0006c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00073	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_rich:
  00078	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  0007d	48 89 44 24 40	 mov	 QWORD PTR proxy$[rsp], rax
$LN6@proxy_rich:

; 482  :     UNWRAP(v);

  00082	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00089	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  0008e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00092	74 12		 je	 SHORT $LN2@proxy_rich
  00094	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  0009b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  000a0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a4	75 48		 jne	 SHORT $LN3@proxy_rich
$LN2@proxy_rich:
  000a6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  000ab	e8 00 00 00 00	 call	 proxy_checkref
  000b0	85 c0		 test	 eax, eax
  000b2	75 04		 jne	 SHORT $LN1@proxy_rich
  000b4	33 c0		 xor	 eax, eax
  000b6	eb 4a		 jmp	 SHORT $LN7@proxy_rich
$LN1@proxy_rich:
  000b8	48 8b 44 24 48	 mov	 rax, QWORD PTR v$[rsp]
  000bd	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000c1	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c6	7e 10		 jle	 SHORT $LN11@proxy_rich
  000c8	48 8b 44 24 48	 mov	 rax, QWORD PTR v$[rsp]
  000cd	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000d1	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d6	eb 0c		 jmp	 SHORT $LN12@proxy_rich
$LN11@proxy_rich:
  000d8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000df	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_rich:
  000e4	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e9	48 89 44 24 48	 mov	 QWORD PTR v$[rsp], rax
$LN3@proxy_rich:

; 483  :     return PyObject_RichCompare(proxy, v, op);

  000ee	44 8b 44 24 50	 mov	 r8d, DWORD PTR op$[rsp]
  000f3	48 8b 54 24 48	 mov	 rdx, QWORD PTR v$[rsp]
  000f8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  000fd	e8 00 00 00 00	 call	 PyObject_RichCompare
$LN7@proxy_rich:

; 484  : }

  00102	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00106	c3		 ret	 0
proxy_richcompare ENDP
_TEXT	ENDS
EXTRN	PyNumber_Add:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_add DD imagerel proxy_add
	DD	imagerel proxy_add+253
	DD	imagerel $unwind$proxy_add
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_add DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_add
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_add PROC						; COMDAT

; 487  : WRAP_BINARY(proxy_add, PyNumber_Add)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_add
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_add
$LN5@proxy_add:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_add
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_add
$LN4@proxy_add:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_add
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_add
$LN9@proxy_add:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_add:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_add:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_add
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_add
$LN2@proxy_add:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_add
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_add
$LN1@proxy_add:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_add
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_add
$LN11@proxy_add:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_add:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_add:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_Add
$LN7@proxy_add:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_add ENDP
_TEXT	ENDS
EXTRN	PyNumber_Subtract:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_sub DD imagerel proxy_sub
	DD	imagerel proxy_sub+253
	DD	imagerel $unwind$proxy_sub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_sub DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_sub
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_sub PROC						; COMDAT

; 488  : WRAP_BINARY(proxy_sub, PyNumber_Subtract)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_sub
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_sub
$LN5@proxy_sub:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_sub
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_sub
$LN4@proxy_sub:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_sub
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_sub
$LN9@proxy_sub:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_sub:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_sub:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_sub
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_sub
$LN2@proxy_sub:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_sub
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_sub
$LN1@proxy_sub:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_sub
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_sub
$LN11@proxy_sub:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_sub:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_sub:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_Subtract
$LN7@proxy_sub:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_sub ENDP
_TEXT	ENDS
EXTRN	PyNumber_Multiply:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_mul DD imagerel proxy_mul
	DD	imagerel proxy_mul+253
	DD	imagerel $unwind$proxy_mul
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_mul DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_mul
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_mul PROC						; COMDAT

; 489  : WRAP_BINARY(proxy_mul, PyNumber_Multiply)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_mul
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_mul
$LN5@proxy_mul:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_mul
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_mul
$LN4@proxy_mul:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_mul
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_mul
$LN9@proxy_mul:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_mul:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_mul:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_mul
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_mul
$LN2@proxy_mul:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_mul
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_mul
$LN1@proxy_mul:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_mul
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_mul
$LN11@proxy_mul:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_mul:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_mul:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_Multiply
$LN7@proxy_mul:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_mul ENDP
_TEXT	ENDS
EXTRN	PyNumber_FloorDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_floor_div DD imagerel proxy_floor_div
	DD	imagerel proxy_floor_div+253
	DD	imagerel $unwind$proxy_floor_div
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_floor_div DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_floor_div
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_floor_div PROC					; COMDAT

; 490  : WRAP_BINARY(proxy_floor_div, PyNumber_FloorDivide)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_floo
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_floo
$LN5@proxy_floo:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_floo
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_floo
$LN4@proxy_floo:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_floo
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_floo
$LN9@proxy_floo:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_floo:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_floo:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_floo
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_floo
$LN2@proxy_floo:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_floo
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_floo
$LN1@proxy_floo:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_floo
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_floo
$LN11@proxy_floo:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_floo:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_floo:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_FloorDivide
$LN7@proxy_floo:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_floor_div ENDP
_TEXT	ENDS
EXTRN	PyNumber_TrueDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_true_div DD imagerel proxy_true_div
	DD	imagerel proxy_true_div+253
	DD	imagerel $unwind$proxy_true_div
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_true_div DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_true_div
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_true_div PROC					; COMDAT

; 491  : WRAP_BINARY(proxy_true_div, PyNumber_TrueDivide)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_true
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_true
$LN5@proxy_true:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_true
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_true
$LN4@proxy_true:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_true
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_true
$LN9@proxy_true:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_true:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_true:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_true
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_true
$LN2@proxy_true:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_true
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_true
$LN1@proxy_true:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_true
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_true
$LN11@proxy_true:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_true:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_true:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_TrueDivide
$LN7@proxy_true:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_true_div ENDP
_TEXT	ENDS
EXTRN	PyNumber_Remainder:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_mod DD imagerel proxy_mod
	DD	imagerel proxy_mod+253
	DD	imagerel $unwind$proxy_mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_mod DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_mod
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_mod PROC						; COMDAT

; 492  : WRAP_BINARY(proxy_mod, PyNumber_Remainder)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_mod
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_mod
$LN5@proxy_mod:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_mod
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_mod
$LN4@proxy_mod:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_mod
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_mod
$LN9@proxy_mod:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_mod:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_mod:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_mod
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_mod
$LN2@proxy_mod:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_mod
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_mod
$LN1@proxy_mod:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_mod
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_mod
$LN11@proxy_mod:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_mod:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_mod:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_Remainder
$LN7@proxy_mod:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_mod ENDP
_TEXT	ENDS
EXTRN	PyNumber_Divmod:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_divmod DD imagerel proxy_divmod
	DD	imagerel proxy_divmod+253
	DD	imagerel $unwind$proxy_divmod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_divmod DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_divmod
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_divmod PROC					; COMDAT

; 493  : WRAP_BINARY(proxy_divmod, PyNumber_Divmod)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_divm
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_divm
$LN5@proxy_divm:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_divm
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_divm
$LN4@proxy_divm:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_divm
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_divm
$LN9@proxy_divm:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_divm:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_divm:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_divm
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_divm
$LN2@proxy_divm:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_divm
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_divm
$LN1@proxy_divm:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_divm
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_divm
$LN11@proxy_divm:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_divm:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_divm:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_Divmod
$LN7@proxy_divm:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_divmod ENDP
_TEXT	ENDS
EXTRN	PyNumber_Power:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_pow DD imagerel proxy_pow
	DD	imagerel proxy_pow+382
	DD	imagerel $unwind$proxy_pow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_pow DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_pow
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
tv132 = 48
proxy$ = 80
v$ = 88
w$ = 96
proxy_pow PROC						; COMDAT

; 494  : WRAP_TERNARY(proxy_pow, PyNumber_Power)

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 12		 je	 SHORT $LN9@proxy_pow
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  00031	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00035	75 4b		 jne	 SHORT $LN10@proxy_pow
$LN9@proxy_pow:
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  0003c	e8 00 00 00 00	 call	 proxy_checkref
  00041	85 c0		 test	 eax, eax
  00043	75 07		 jne	 SHORT $LN8@proxy_pow
  00045	33 c0		 xor	 eax, eax
  00047	e9 2d 01 00 00	 jmp	 $LN11@proxy_pow
$LN8@proxy_pow:
  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR proxy$[rsp]
  00051	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00055	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0005a	7e 10		 jle	 SHORT $LN13@proxy_pow
  0005c	48 8b 44 24 50	 mov	 rax, QWORD PTR proxy$[rsp]
  00061	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00065	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0006a	eb 0c		 jmp	 SHORT $LN14@proxy_pow
$LN13@proxy_pow:
  0006c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00073	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN14@proxy_pow:
  00078	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  0007d	48 89 44 24 50	 mov	 QWORD PTR proxy$[rsp], rax
$LN10@proxy_pow:
  00082	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00089	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  0008e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00092	74 12		 je	 SHORT $LN6@proxy_pow
  00094	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  0009b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  000a0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a4	75 4b		 jne	 SHORT $LN7@proxy_pow
$LN6@proxy_pow:
  000a6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  000ab	e8 00 00 00 00	 call	 proxy_checkref
  000b0	85 c0		 test	 eax, eax
  000b2	75 07		 jne	 SHORT $LN5@proxy_pow
  000b4	33 c0		 xor	 eax, eax
  000b6	e9 be 00 00 00	 jmp	 $LN11@proxy_pow
$LN5@proxy_pow:
  000bb	48 8b 44 24 58	 mov	 rax, QWORD PTR v$[rsp]
  000c0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000c4	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c9	7e 10		 jle	 SHORT $LN15@proxy_pow
  000cb	48 8b 44 24 58	 mov	 rax, QWORD PTR v$[rsp]
  000d0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000d4	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d9	eb 0c		 jmp	 SHORT $LN16@proxy_pow
$LN15@proxy_pow:
  000db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000e2	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN16@proxy_pow:
  000e7	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000ec	48 89 44 24 58	 mov	 QWORD PTR v$[rsp], rax
$LN7@proxy_pow:
  000f1	48 83 7c 24 60
	00		 cmp	 QWORD PTR w$[rsp], 0
  000f7	74 6c		 je	 SHORT $LN4@proxy_pow
  000f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00100	48 8b 4c 24 60	 mov	 rcx, QWORD PTR w$[rsp]
  00105	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00109	74 12		 je	 SHORT $LN2@proxy_pow
  0010b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00112	48 8b 4c 24 60	 mov	 rcx, QWORD PTR w$[rsp]
  00117	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0011b	75 48		 jne	 SHORT $LN3@proxy_pow
$LN2@proxy_pow:
  0011d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR w$[rsp]
  00122	e8 00 00 00 00	 call	 proxy_checkref
  00127	85 c0		 test	 eax, eax
  00129	75 04		 jne	 SHORT $LN1@proxy_pow
  0012b	33 c0		 xor	 eax, eax
  0012d	eb 4a		 jmp	 SHORT $LN11@proxy_pow
$LN1@proxy_pow:
  0012f	48 8b 44 24 60	 mov	 rax, QWORD PTR w$[rsp]
  00134	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00138	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0013d	7e 10		 jle	 SHORT $LN17@proxy_pow
  0013f	48 8b 44 24 60	 mov	 rax, QWORD PTR w$[rsp]
  00144	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00148	48 89 44 24 30	 mov	 QWORD PTR tv132[rsp], rax
  0014d	eb 0c		 jmp	 SHORT $LN18@proxy_pow
$LN17@proxy_pow:
  0014f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00156	48 89 44 24 30	 mov	 QWORD PTR tv132[rsp], rax
$LN18@proxy_pow:
  0015b	48 8b 44 24 30	 mov	 rax, QWORD PTR tv132[rsp]
  00160	48 89 44 24 60	 mov	 QWORD PTR w$[rsp], rax
$LN3@proxy_pow:
$LN4@proxy_pow:
  00165	4c 8b 44 24 60	 mov	 r8, QWORD PTR w$[rsp]
  0016a	48 8b 54 24 58	 mov	 rdx, QWORD PTR v$[rsp]
  0016f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  00174	e8 00 00 00 00	 call	 PyNumber_Power
$LN11@proxy_pow:
  00179	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0017d	c3		 ret	 0
proxy_pow ENDP
_TEXT	ENDS
EXTRN	PyNumber_Negative:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_neg DD imagerel proxy_neg
	DD	imagerel proxy_neg+132
	DD	imagerel $unwind$proxy_neg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_neg DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_neg
_TEXT	SEGMENT
tv75 = 32
proxy$ = 64
proxy_neg PROC						; COMDAT

; 495  : WRAP_UNARY(proxy_neg, PyNumber_Negative)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 12		 je	 SHORT $LN2@proxy_neg
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00027	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002b	75 48		 jne	 SHORT $LN3@proxy_neg
$LN2@proxy_neg:
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00032	e8 00 00 00 00	 call	 proxy_checkref
  00037	85 c0		 test	 eax, eax
  00039	75 04		 jne	 SHORT $LN1@proxy_neg
  0003b	33 c0		 xor	 eax, eax
  0003d	eb 40		 jmp	 SHORT $LN4@proxy_neg
$LN1@proxy_neg:
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0004d	7e 10		 jle	 SHORT $LN6@proxy_neg
  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00054	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00058	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0005d	eb 0c		 jmp	 SHORT $LN7@proxy_neg
$LN6@proxy_neg:
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN7@proxy_neg:
  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00070	48 89 44 24 40	 mov	 QWORD PTR proxy$[rsp], rax
$LN3@proxy_neg:
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0007a	e8 00 00 00 00	 call	 PyNumber_Negative
$LN4@proxy_neg:
  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
proxy_neg ENDP
_TEXT	ENDS
EXTRN	PyNumber_Positive:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_pos DD imagerel proxy_pos
	DD	imagerel proxy_pos+132
	DD	imagerel $unwind$proxy_pos
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_pos DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_pos
_TEXT	SEGMENT
tv75 = 32
proxy$ = 64
proxy_pos PROC						; COMDAT

; 496  : WRAP_UNARY(proxy_pos, PyNumber_Positive)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 12		 je	 SHORT $LN2@proxy_pos
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00027	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002b	75 48		 jne	 SHORT $LN3@proxy_pos
$LN2@proxy_pos:
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00032	e8 00 00 00 00	 call	 proxy_checkref
  00037	85 c0		 test	 eax, eax
  00039	75 04		 jne	 SHORT $LN1@proxy_pos
  0003b	33 c0		 xor	 eax, eax
  0003d	eb 40		 jmp	 SHORT $LN4@proxy_pos
$LN1@proxy_pos:
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0004d	7e 10		 jle	 SHORT $LN6@proxy_pos
  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00054	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00058	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0005d	eb 0c		 jmp	 SHORT $LN7@proxy_pos
$LN6@proxy_pos:
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN7@proxy_pos:
  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00070	48 89 44 24 40	 mov	 QWORD PTR proxy$[rsp], rax
$LN3@proxy_pos:
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0007a	e8 00 00 00 00	 call	 PyNumber_Positive
$LN4@proxy_pos:
  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
proxy_pos ENDP
_TEXT	ENDS
EXTRN	PyNumber_Absolute:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_abs DD imagerel proxy_abs
	DD	imagerel proxy_abs+132
	DD	imagerel $unwind$proxy_abs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_abs DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_abs
_TEXT	SEGMENT
tv75 = 32
proxy$ = 64
proxy_abs PROC						; COMDAT

; 497  : WRAP_UNARY(proxy_abs, PyNumber_Absolute)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 12		 je	 SHORT $LN2@proxy_abs
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00027	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002b	75 48		 jne	 SHORT $LN3@proxy_abs
$LN2@proxy_abs:
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00032	e8 00 00 00 00	 call	 proxy_checkref
  00037	85 c0		 test	 eax, eax
  00039	75 04		 jne	 SHORT $LN1@proxy_abs
  0003b	33 c0		 xor	 eax, eax
  0003d	eb 40		 jmp	 SHORT $LN4@proxy_abs
$LN1@proxy_abs:
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0004d	7e 10		 jle	 SHORT $LN6@proxy_abs
  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00054	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00058	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0005d	eb 0c		 jmp	 SHORT $LN7@proxy_abs
$LN6@proxy_abs:
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN7@proxy_abs:
  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00070	48 89 44 24 40	 mov	 QWORD PTR proxy$[rsp], rax
$LN3@proxy_abs:
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0007a	e8 00 00 00 00	 call	 PyNumber_Absolute
$LN4@proxy_abs:
  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
proxy_abs ENDP
_TEXT	ENDS
EXTRN	PyNumber_Invert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_invert DD imagerel proxy_invert
	DD	imagerel proxy_invert+132
	DD	imagerel $unwind$proxy_invert
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_invert DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_invert
_TEXT	SEGMENT
tv75 = 32
proxy$ = 64
proxy_invert PROC					; COMDAT

; 498  : WRAP_UNARY(proxy_invert, PyNumber_Invert)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 12		 je	 SHORT $LN2@proxy_inve
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00027	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002b	75 48		 jne	 SHORT $LN3@proxy_inve
$LN2@proxy_inve:
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00032	e8 00 00 00 00	 call	 proxy_checkref
  00037	85 c0		 test	 eax, eax
  00039	75 04		 jne	 SHORT $LN1@proxy_inve
  0003b	33 c0		 xor	 eax, eax
  0003d	eb 40		 jmp	 SHORT $LN4@proxy_inve
$LN1@proxy_inve:
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0004d	7e 10		 jle	 SHORT $LN6@proxy_inve
  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00054	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00058	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0005d	eb 0c		 jmp	 SHORT $LN7@proxy_inve
$LN6@proxy_inve:
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN7@proxy_inve:
  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00070	48 89 44 24 40	 mov	 QWORD PTR proxy$[rsp], rax
$LN3@proxy_inve:
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0007a	e8 00 00 00 00	 call	 PyNumber_Invert
$LN4@proxy_inve:
  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
proxy_invert ENDP
_TEXT	ENDS
EXTRN	PyNumber_Lshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_lshift DD imagerel proxy_lshift
	DD	imagerel proxy_lshift+253
	DD	imagerel $unwind$proxy_lshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_lshift DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_lshift
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_lshift PROC					; COMDAT

; 499  : WRAP_BINARY(proxy_lshift, PyNumber_Lshift)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_lshi
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_lshi
$LN5@proxy_lshi:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_lshi
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_lshi
$LN4@proxy_lshi:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_lshi
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_lshi
$LN9@proxy_lshi:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_lshi:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_lshi:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_lshi
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_lshi
$LN2@proxy_lshi:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_lshi
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_lshi
$LN1@proxy_lshi:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_lshi
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_lshi
$LN11@proxy_lshi:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_lshi:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_lshi:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_Lshift
$LN7@proxy_lshi:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_lshift ENDP
_TEXT	ENDS
EXTRN	PyNumber_Rshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_rshift DD imagerel proxy_rshift
	DD	imagerel proxy_rshift+253
	DD	imagerel $unwind$proxy_rshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_rshift DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_rshift
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_rshift PROC					; COMDAT

; 500  : WRAP_BINARY(proxy_rshift, PyNumber_Rshift)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_rshi
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_rshi
$LN5@proxy_rshi:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_rshi
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_rshi
$LN4@proxy_rshi:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_rshi
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_rshi
$LN9@proxy_rshi:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_rshi:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_rshi:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_rshi
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_rshi
$LN2@proxy_rshi:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_rshi
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_rshi
$LN1@proxy_rshi:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_rshi
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_rshi
$LN11@proxy_rshi:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_rshi:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_rshi:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_Rshift
$LN7@proxy_rshi:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_rshift ENDP
_TEXT	ENDS
EXTRN	PyNumber_And:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_and DD imagerel proxy_and
	DD	imagerel proxy_and+253
	DD	imagerel $unwind$proxy_and
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_and DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_and
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_and PROC						; COMDAT

; 501  : WRAP_BINARY(proxy_and, PyNumber_And)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_and
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_and
$LN5@proxy_and:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_and
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_and
$LN4@proxy_and:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_and
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_and
$LN9@proxy_and:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_and:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_and:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_and
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_and
$LN2@proxy_and:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_and
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_and
$LN1@proxy_and:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_and
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_and
$LN11@proxy_and:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_and:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_and:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_And
$LN7@proxy_and:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_and ENDP
_TEXT	ENDS
EXTRN	PyNumber_Xor:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_xor DD imagerel proxy_xor
	DD	imagerel proxy_xor+253
	DD	imagerel $unwind$proxy_xor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_xor DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_xor
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_xor PROC						; COMDAT

; 502  : WRAP_BINARY(proxy_xor, PyNumber_Xor)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_xor
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_xor
$LN5@proxy_xor:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_xor
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_xor
$LN4@proxy_xor:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_xor
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_xor
$LN9@proxy_xor:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_xor:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_xor:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_xor
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_xor
$LN2@proxy_xor:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_xor
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_xor
$LN1@proxy_xor:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_xor
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_xor
$LN11@proxy_xor:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_xor:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_xor:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_Xor
$LN7@proxy_xor:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_xor ENDP
_TEXT	ENDS
EXTRN	PyNumber_Or:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_or DD imagerel proxy_or
	DD	imagerel proxy_or+253
	DD	imagerel $unwind$proxy_or
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_or DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_or
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_or PROC						; COMDAT

; 503  : WRAP_BINARY(proxy_or, PyNumber_Or)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_or
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_or
$LN5@proxy_or:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_or
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_or
$LN4@proxy_or:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_or
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_or
$LN9@proxy_or:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_or:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_or:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_or
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_or
$LN2@proxy_or:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_or
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_or
$LN1@proxy_or:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_or
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_or
$LN11@proxy_or:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_or:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_or:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_Or
$LN7@proxy_or:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_or ENDP
_TEXT	ENDS
EXTRN	PyNumber_Long:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_int DD imagerel proxy_int
	DD	imagerel proxy_int+132
	DD	imagerel $unwind$proxy_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_int DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_int
_TEXT	SEGMENT
tv75 = 32
proxy$ = 64
proxy_int PROC						; COMDAT

; 504  : WRAP_UNARY(proxy_int, PyNumber_Long)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 12		 je	 SHORT $LN2@proxy_int
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00027	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002b	75 48		 jne	 SHORT $LN3@proxy_int
$LN2@proxy_int:
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00032	e8 00 00 00 00	 call	 proxy_checkref
  00037	85 c0		 test	 eax, eax
  00039	75 04		 jne	 SHORT $LN1@proxy_int
  0003b	33 c0		 xor	 eax, eax
  0003d	eb 40		 jmp	 SHORT $LN4@proxy_int
$LN1@proxy_int:
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0004d	7e 10		 jle	 SHORT $LN6@proxy_int
  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00054	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00058	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0005d	eb 0c		 jmp	 SHORT $LN7@proxy_int
$LN6@proxy_int:
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN7@proxy_int:
  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00070	48 89 44 24 40	 mov	 QWORD PTR proxy$[rsp], rax
$LN3@proxy_int:
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0007a	e8 00 00 00 00	 call	 PyNumber_Long
$LN4@proxy_int:
  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
proxy_int ENDP
_TEXT	ENDS
EXTRN	PyNumber_Float:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_float DD imagerel proxy_float
	DD	imagerel proxy_float+132
	DD	imagerel $unwind$proxy_float
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_float DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_float
_TEXT	SEGMENT
tv75 = 32
proxy$ = 64
proxy_float PROC					; COMDAT

; 505  : WRAP_UNARY(proxy_float, PyNumber_Float)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 12		 je	 SHORT $LN2@proxy_floa
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00027	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002b	75 48		 jne	 SHORT $LN3@proxy_floa
$LN2@proxy_floa:
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00032	e8 00 00 00 00	 call	 proxy_checkref
  00037	85 c0		 test	 eax, eax
  00039	75 04		 jne	 SHORT $LN1@proxy_floa
  0003b	33 c0		 xor	 eax, eax
  0003d	eb 40		 jmp	 SHORT $LN4@proxy_floa
$LN1@proxy_floa:
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0004d	7e 10		 jle	 SHORT $LN6@proxy_floa
  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00054	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00058	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0005d	eb 0c		 jmp	 SHORT $LN7@proxy_floa
$LN6@proxy_floa:
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN7@proxy_floa:
  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00070	48 89 44 24 40	 mov	 QWORD PTR proxy$[rsp], rax
$LN3@proxy_floa:
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0007a	e8 00 00 00 00	 call	 PyNumber_Float
$LN4@proxy_floa:
  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
proxy_float ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceAdd:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_iadd DD imagerel proxy_iadd
	DD	imagerel proxy_iadd+253
	DD	imagerel $unwind$proxy_iadd
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_iadd DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_iadd
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_iadd PROC						; COMDAT

; 506  : WRAP_BINARY(proxy_iadd, PyNumber_InPlaceAdd)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_iadd
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_iadd
$LN5@proxy_iadd:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_iadd
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_iadd
$LN4@proxy_iadd:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_iadd
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_iadd
$LN9@proxy_iadd:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_iadd:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_iadd:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_iadd
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_iadd
$LN2@proxy_iadd:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_iadd
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_iadd
$LN1@proxy_iadd:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_iadd
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_iadd
$LN11@proxy_iadd:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_iadd:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_iadd:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_InPlaceAdd
$LN7@proxy_iadd:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_iadd ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceSubtract:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_isub DD imagerel proxy_isub
	DD	imagerel proxy_isub+253
	DD	imagerel $unwind$proxy_isub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_isub DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_isub
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_isub PROC						; COMDAT

; 507  : WRAP_BINARY(proxy_isub, PyNumber_InPlaceSubtract)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_isub
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_isub
$LN5@proxy_isub:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_isub
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_isub
$LN4@proxy_isub:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_isub
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_isub
$LN9@proxy_isub:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_isub:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_isub:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_isub
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_isub
$LN2@proxy_isub:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_isub
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_isub
$LN1@proxy_isub:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_isub
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_isub
$LN11@proxy_isub:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_isub:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_isub:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_InPlaceSubtract
$LN7@proxy_isub:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_isub ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceMultiply:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_imul DD imagerel proxy_imul
	DD	imagerel proxy_imul+253
	DD	imagerel $unwind$proxy_imul
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_imul DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_imul
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_imul PROC						; COMDAT

; 508  : WRAP_BINARY(proxy_imul, PyNumber_InPlaceMultiply)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_imul
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_imul
$LN5@proxy_imul:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_imul
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_imul
$LN4@proxy_imul:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_imul
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_imul
$LN9@proxy_imul:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_imul:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_imul:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_imul
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_imul
$LN2@proxy_imul:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_imul
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_imul
$LN1@proxy_imul:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_imul
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_imul
$LN11@proxy_imul:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_imul:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_imul:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_InPlaceMultiply
$LN7@proxy_imul:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_imul ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceFloorDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_ifloor_div DD imagerel proxy_ifloor_div
	DD	imagerel proxy_ifloor_div+253
	DD	imagerel $unwind$proxy_ifloor_div
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_ifloor_div DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_ifloor_div
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_ifloor_div PROC					; COMDAT

; 509  : WRAP_BINARY(proxy_ifloor_div, PyNumber_InPlaceFloorDivide)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_iflo
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_iflo
$LN5@proxy_iflo:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_iflo
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_iflo
$LN4@proxy_iflo:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_iflo
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_iflo
$LN9@proxy_iflo:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_iflo:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_iflo:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_iflo
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_iflo
$LN2@proxy_iflo:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_iflo
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_iflo
$LN1@proxy_iflo:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_iflo
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_iflo
$LN11@proxy_iflo:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_iflo:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_iflo:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_InPlaceFloorDivide
$LN7@proxy_iflo:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_ifloor_div ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceTrueDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_itrue_div DD imagerel proxy_itrue_div
	DD	imagerel proxy_itrue_div+253
	DD	imagerel $unwind$proxy_itrue_div
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_itrue_div DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_itrue_div
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_itrue_div PROC					; COMDAT

; 510  : WRAP_BINARY(proxy_itrue_div, PyNumber_InPlaceTrueDivide)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_itru
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_itru
$LN5@proxy_itru:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_itru
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_itru
$LN4@proxy_itru:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_itru
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_itru
$LN9@proxy_itru:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_itru:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_itru:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_itru
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_itru
$LN2@proxy_itru:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_itru
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_itru
$LN1@proxy_itru:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_itru
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_itru
$LN11@proxy_itru:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_itru:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_itru:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_InPlaceTrueDivide
$LN7@proxy_itru:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_itrue_div ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceRemainder:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_imod DD imagerel proxy_imod
	DD	imagerel proxy_imod+253
	DD	imagerel $unwind$proxy_imod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_imod DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_imod
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_imod PROC						; COMDAT

; 511  : WRAP_BINARY(proxy_imod, PyNumber_InPlaceRemainder)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_imod
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_imod
$LN5@proxy_imod:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_imod
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_imod
$LN4@proxy_imod:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_imod
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_imod
$LN9@proxy_imod:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_imod:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_imod:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_imod
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_imod
$LN2@proxy_imod:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_imod
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_imod
$LN1@proxy_imod:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_imod
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_imod
$LN11@proxy_imod:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_imod:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_imod:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_InPlaceRemainder
$LN7@proxy_imod:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_imod ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlacePower:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_ipow DD imagerel proxy_ipow
	DD	imagerel proxy_ipow+382
	DD	imagerel $unwind$proxy_ipow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_ipow DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_ipow
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
tv132 = 48
proxy$ = 80
v$ = 88
w$ = 96
proxy_ipow PROC						; COMDAT

; 512  : WRAP_TERNARY(proxy_ipow, PyNumber_InPlacePower)

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 12		 je	 SHORT $LN9@proxy_ipow
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  0002c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  00031	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00035	75 4b		 jne	 SHORT $LN10@proxy_ipow
$LN9@proxy_ipow:
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  0003c	e8 00 00 00 00	 call	 proxy_checkref
  00041	85 c0		 test	 eax, eax
  00043	75 07		 jne	 SHORT $LN8@proxy_ipow
  00045	33 c0		 xor	 eax, eax
  00047	e9 2d 01 00 00	 jmp	 $LN11@proxy_ipow
$LN8@proxy_ipow:
  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR proxy$[rsp]
  00051	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00055	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0005a	7e 10		 jle	 SHORT $LN13@proxy_ipow
  0005c	48 8b 44 24 50	 mov	 rax, QWORD PTR proxy$[rsp]
  00061	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00065	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0006a	eb 0c		 jmp	 SHORT $LN14@proxy_ipow
$LN13@proxy_ipow:
  0006c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00073	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN14@proxy_ipow:
  00078	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  0007d	48 89 44 24 50	 mov	 QWORD PTR proxy$[rsp], rax
$LN10@proxy_ipow:
  00082	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00089	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  0008e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00092	74 12		 je	 SHORT $LN6@proxy_ipow
  00094	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  0009b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  000a0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a4	75 4b		 jne	 SHORT $LN7@proxy_ipow
$LN6@proxy_ipow:
  000a6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  000ab	e8 00 00 00 00	 call	 proxy_checkref
  000b0	85 c0		 test	 eax, eax
  000b2	75 07		 jne	 SHORT $LN5@proxy_ipow
  000b4	33 c0		 xor	 eax, eax
  000b6	e9 be 00 00 00	 jmp	 $LN11@proxy_ipow
$LN5@proxy_ipow:
  000bb	48 8b 44 24 58	 mov	 rax, QWORD PTR v$[rsp]
  000c0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000c4	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c9	7e 10		 jle	 SHORT $LN15@proxy_ipow
  000cb	48 8b 44 24 58	 mov	 rax, QWORD PTR v$[rsp]
  000d0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000d4	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d9	eb 0c		 jmp	 SHORT $LN16@proxy_ipow
$LN15@proxy_ipow:
  000db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000e2	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN16@proxy_ipow:
  000e7	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000ec	48 89 44 24 58	 mov	 QWORD PTR v$[rsp], rax
$LN7@proxy_ipow:
  000f1	48 83 7c 24 60
	00		 cmp	 QWORD PTR w$[rsp], 0
  000f7	74 6c		 je	 SHORT $LN4@proxy_ipow
  000f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00100	48 8b 4c 24 60	 mov	 rcx, QWORD PTR w$[rsp]
  00105	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00109	74 12		 je	 SHORT $LN2@proxy_ipow
  0010b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00112	48 8b 4c 24 60	 mov	 rcx, QWORD PTR w$[rsp]
  00117	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0011b	75 48		 jne	 SHORT $LN3@proxy_ipow
$LN2@proxy_ipow:
  0011d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR w$[rsp]
  00122	e8 00 00 00 00	 call	 proxy_checkref
  00127	85 c0		 test	 eax, eax
  00129	75 04		 jne	 SHORT $LN1@proxy_ipow
  0012b	33 c0		 xor	 eax, eax
  0012d	eb 4a		 jmp	 SHORT $LN11@proxy_ipow
$LN1@proxy_ipow:
  0012f	48 8b 44 24 60	 mov	 rax, QWORD PTR w$[rsp]
  00134	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00138	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0013d	7e 10		 jle	 SHORT $LN17@proxy_ipow
  0013f	48 8b 44 24 60	 mov	 rax, QWORD PTR w$[rsp]
  00144	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00148	48 89 44 24 30	 mov	 QWORD PTR tv132[rsp], rax
  0014d	eb 0c		 jmp	 SHORT $LN18@proxy_ipow
$LN17@proxy_ipow:
  0014f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00156	48 89 44 24 30	 mov	 QWORD PTR tv132[rsp], rax
$LN18@proxy_ipow:
  0015b	48 8b 44 24 30	 mov	 rax, QWORD PTR tv132[rsp]
  00160	48 89 44 24 60	 mov	 QWORD PTR w$[rsp], rax
$LN3@proxy_ipow:
$LN4@proxy_ipow:
  00165	4c 8b 44 24 60	 mov	 r8, QWORD PTR w$[rsp]
  0016a	48 8b 54 24 58	 mov	 rdx, QWORD PTR v$[rsp]
  0016f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR proxy$[rsp]
  00174	e8 00 00 00 00	 call	 PyNumber_InPlacePower
$LN11@proxy_ipow:
  00179	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0017d	c3		 ret	 0
proxy_ipow ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceLshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_ilshift DD imagerel proxy_ilshift
	DD	imagerel proxy_ilshift+253
	DD	imagerel $unwind$proxy_ilshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_ilshift DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_ilshift
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_ilshift PROC					; COMDAT

; 513  : WRAP_BINARY(proxy_ilshift, PyNumber_InPlaceLshift)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_ilsh
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_ilsh
$LN5@proxy_ilsh:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_ilsh
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_ilsh
$LN4@proxy_ilsh:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_ilsh
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_ilsh
$LN9@proxy_ilsh:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_ilsh:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_ilsh:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_ilsh
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_ilsh
$LN2@proxy_ilsh:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_ilsh
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_ilsh
$LN1@proxy_ilsh:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_ilsh
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_ilsh
$LN11@proxy_ilsh:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_ilsh:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_ilsh:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_InPlaceLshift
$LN7@proxy_ilsh:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_ilshift ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceRshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_irshift DD imagerel proxy_irshift
	DD	imagerel proxy_irshift+253
	DD	imagerel $unwind$proxy_irshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_irshift DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_irshift
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_irshift PROC					; COMDAT

; 514  : WRAP_BINARY(proxy_irshift, PyNumber_InPlaceRshift)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_irsh
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_irsh
$LN5@proxy_irsh:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_irsh
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_irsh
$LN4@proxy_irsh:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_irsh
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_irsh
$LN9@proxy_irsh:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_irsh:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_irsh:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_irsh
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_irsh
$LN2@proxy_irsh:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_irsh
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_irsh
$LN1@proxy_irsh:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_irsh
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_irsh
$LN11@proxy_irsh:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_irsh:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_irsh:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_InPlaceRshift
$LN7@proxy_irsh:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_irshift ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceAnd:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_iand DD imagerel proxy_iand
	DD	imagerel proxy_iand+253
	DD	imagerel $unwind$proxy_iand
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_iand DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_iand
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_iand PROC						; COMDAT

; 515  : WRAP_BINARY(proxy_iand, PyNumber_InPlaceAnd)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_iand
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_iand
$LN5@proxy_iand:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_iand
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_iand
$LN4@proxy_iand:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_iand
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_iand
$LN9@proxy_iand:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_iand:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_iand:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_iand
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_iand
$LN2@proxy_iand:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_iand
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_iand
$LN1@proxy_iand:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_iand
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_iand
$LN11@proxy_iand:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_iand:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_iand:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_InPlaceAnd
$LN7@proxy_iand:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_iand ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceXor:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_ixor DD imagerel proxy_ixor
	DD	imagerel proxy_ixor+253
	DD	imagerel $unwind$proxy_ixor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_ixor DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_ixor
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_ixor PROC						; COMDAT

; 516  : WRAP_BINARY(proxy_ixor, PyNumber_InPlaceXor)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_ixor
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_ixor
$LN5@proxy_ixor:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_ixor
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_ixor
$LN4@proxy_ixor:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_ixor
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_ixor
$LN9@proxy_ixor:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_ixor:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_ixor:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_ixor
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_ixor
$LN2@proxy_ixor:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_ixor
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_ixor
$LN1@proxy_ixor:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_ixor
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_ixor
$LN11@proxy_ixor:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_ixor:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_ixor:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_InPlaceXor
$LN7@proxy_ixor:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_ixor ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlaceOr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_ior DD imagerel proxy_ior
	DD	imagerel proxy_ior+253
	DD	imagerel $unwind$proxy_ior
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_ior DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_ior
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_ior PROC						; COMDAT

; 517  : WRAP_BINARY(proxy_ior, PyNumber_InPlaceOr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_ior
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_ior
$LN5@proxy_ior:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_ior
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_ior
$LN4@proxy_ior:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_ior
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_ior
$LN9@proxy_ior:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_ior:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_ior:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_ior
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_ior
$LN2@proxy_ior:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_ior
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_ior
$LN1@proxy_ior:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_ior
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_ior
$LN11@proxy_ior:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_ior:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_ior:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
$LN7@proxy_ior:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_ior ENDP
_TEXT	ENDS
EXTRN	PyNumber_Index:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_index DD imagerel proxy_index
	DD	imagerel proxy_index+132
	DD	imagerel $unwind$proxy_index
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_index DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_index
_TEXT	SEGMENT
tv75 = 32
proxy$ = 64
proxy_index PROC					; COMDAT

; 518  : WRAP_UNARY(proxy_index, PyNumber_Index)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 12		 je	 SHORT $LN2@proxy_inde
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00027	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002b	75 48		 jne	 SHORT $LN3@proxy_inde
$LN2@proxy_inde:
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00032	e8 00 00 00 00	 call	 proxy_checkref
  00037	85 c0		 test	 eax, eax
  00039	75 04		 jne	 SHORT $LN1@proxy_inde
  0003b	33 c0		 xor	 eax, eax
  0003d	eb 40		 jmp	 SHORT $LN4@proxy_inde
$LN1@proxy_inde:
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0004d	7e 10		 jle	 SHORT $LN6@proxy_inde
  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00054	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00058	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0005d	eb 0c		 jmp	 SHORT $LN7@proxy_inde
$LN6@proxy_inde:
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN7@proxy_inde:
  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00070	48 89 44 24 40	 mov	 QWORD PTR proxy$[rsp], rax
$LN3@proxy_inde:
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0007a	e8 00 00 00 00	 call	 PyNumber_Index
$LN4@proxy_inde:
  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
proxy_index ENDP
_TEXT	ENDS
EXTRN	PyObject_IsTrue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_bool DD imagerel proxy_bool
	DD	imagerel proxy_bool+99
	DD	imagerel $unwind$proxy_bool
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_bool DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_bool
_TEXT	SEGMENT
o$ = 32
tv68 = 40
proxy$ = 64
proxy_bool PROC						; COMDAT

; 522  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 523  :     PyObject *o = PyWeakref_GET_OBJECT(proxy);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00017	7e 10		 jle	 SHORT $LN4@proxy_bool
  00019	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  0001e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00022	48 89 44 24 28	 mov	 QWORD PTR tv68[rsp], rax
  00027	eb 0c		 jmp	 SHORT $LN5@proxy_bool
$LN4@proxy_bool:
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00030	48 89 44 24 28	 mov	 QWORD PTR tv68[rsp], rax
$LN5@proxy_bool:
  00035	48 8b 44 24 28	 mov	 rax, QWORD PTR tv68[rsp]
  0003a	48 89 44 24 20	 mov	 QWORD PTR o$[rsp], rax

; 524  :     if (!proxy_checkref(proxy))

  0003f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00044	e8 00 00 00 00	 call	 proxy_checkref
  00049	85 c0		 test	 eax, eax
  0004b	75 07		 jne	 SHORT $LN1@proxy_bool

; 525  :         return -1;

  0004d	b8 ff ff ff ff	 mov	 eax, -1
  00052	eb 0a		 jmp	 SHORT $LN2@proxy_bool
$LN1@proxy_bool:

; 526  :     return PyObject_IsTrue(o);

  00054	48 8b 4c 24 20	 mov	 rcx, QWORD PTR o$[rsp]
  00059	e8 00 00 00 00	 call	 PyObject_IsTrue
$LN2@proxy_bool:

; 527  : }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
proxy_bool ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_dealloc DD imagerel proxy_dealloc
	DD	imagerel proxy_dealloc+56
	DD	imagerel $unwind$proxy_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_dealloc
_TEXT	SEGMENT
self$ = 48
proxy_dealloc PROC					; COMDAT

; 531  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 532  :     if (self->wr_callback != NULL)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	74 0a		 je	 SHORT $LN1@proxy_deal

; 533  :         PyObject_GC_UnTrack((PyObject *)self);

  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0001a	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN1@proxy_deal:

; 534  :     clear_weakref(self);

  0001f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00024	e8 00 00 00 00	 call	 clear_weakref

; 535  :     PyObject_GC_Del(self);

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0002e	e8 00 00 00 00	 call	 PyObject_GC_Del

; 536  : }

  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00037	c3		 ret	 0
proxy_dealloc ENDP
_TEXT	ENDS
EXTRN	PySequence_Contains:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_contains DD imagerel proxy_contains
	DD	imagerel proxy_contains+99
	DD	imagerel $unwind$proxy_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_contains DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_contains
_TEXT	SEGMENT
tv73 = 32
proxy$ = 64
value$ = 72
proxy_contains PROC					; COMDAT

; 542  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 543  :     if (!proxy_checkref(proxy))

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00013	e8 00 00 00 00	 call	 proxy_checkref
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@proxy_cont

; 544  :         return -1;

  0001c	b8 ff ff ff ff	 mov	 eax, -1
  00021	eb 3b		 jmp	 SHORT $LN2@proxy_cont
$LN1@proxy_cont:

; 545  :     return PySequence_Contains(PyWeakref_GET_OBJECT(proxy), value);

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00028	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0002c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00031	7e 10		 jle	 SHORT $LN4@proxy_cont
  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00038	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0003c	48 89 44 24 20	 mov	 QWORD PTR tv73[rsp], rax
  00041	eb 0c		 jmp	 SHORT $LN5@proxy_cont
$LN4@proxy_cont:
  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004a	48 89 44 24 20	 mov	 QWORD PTR tv73[rsp], rax
$LN5@proxy_cont:
  0004f	48 8b 54 24 48	 mov	 rdx, QWORD PTR value$[rsp]
  00054	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv73[rsp]
  00059	e8 00 00 00 00	 call	 PySequence_Contains
$LN2@proxy_cont:

; 546  : }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
proxy_contains ENDP
_TEXT	ENDS
EXTRN	PyObject_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_length DD imagerel proxy_length
	DD	imagerel proxy_length+91
	DD	imagerel $unwind$proxy_length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_length DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_length
_TEXT	SEGMENT
tv72 = 32
proxy$ = 64
proxy_length PROC					; COMDAT

; 553  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 554  :     if (!proxy_checkref(proxy))

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0000e	e8 00 00 00 00	 call	 proxy_checkref
  00013	85 c0		 test	 eax, eax
  00015	75 09		 jne	 SHORT $LN1@proxy_leng

; 555  :         return -1;

  00017	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0001e	eb 36		 jmp	 SHORT $LN2@proxy_leng
$LN1@proxy_leng:

; 556  :     return PyObject_Length(PyWeakref_GET_OBJECT(proxy));

  00020	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00025	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00029	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0002e	7e 10		 jle	 SHORT $LN4@proxy_leng
  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00035	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00039	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
  0003e	eb 0c		 jmp	 SHORT $LN5@proxy_leng
$LN4@proxy_leng:
  00040	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00047	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
$LN5@proxy_leng:
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv72[rsp]
  00051	e8 00 00 00 00	 call	 PyObject_Size
$LN2@proxy_leng:

; 557  : }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	c3		 ret	 0
proxy_length ENDP
_TEXT	ENDS
EXTRN	PyObject_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_getitem DD imagerel proxy_getitem
	DD	imagerel proxy_getitem+253
	DD	imagerel $unwind$proxy_getitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_getitem DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_getitem
_TEXT	SEGMENT
tv75 = 32
tv87 = 40
x$ = 64
y$ = 72
proxy_getitem PROC					; COMDAT

; 559  : WRAP_BINARY(proxy_getitem, PyObject_GetItem)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN5@proxy_geti
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 4b		 jne	 SHORT $LN6@proxy_geti
$LN5@proxy_geti:
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  00037	e8 00 00 00 00	 call	 proxy_checkref
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN4@proxy_geti
  00040	33 c0		 xor	 eax, eax
  00042	e9 b1 00 00 00	 jmp	 $LN7@proxy_geti
$LN4@proxy_geti:
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00055	7e 10		 jle	 SHORT $LN9@proxy_geti
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  0005c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00060	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  00065	eb 0c		 jmp	 SHORT $LN10@proxy_geti
$LN9@proxy_geti:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN10@proxy_geti:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00078	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax
$LN6@proxy_geti:
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  00089	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008d	74 12		 je	 SHORT $LN2@proxy_geti
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  0009b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009f	75 48		 jne	 SHORT $LN3@proxy_geti
$LN2@proxy_geti:
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR y$[rsp]
  000a6	e8 00 00 00 00	 call	 proxy_checkref
  000ab	85 c0		 test	 eax, eax
  000ad	75 04		 jne	 SHORT $LN1@proxy_geti
  000af	33 c0		 xor	 eax, eax
  000b1	eb 45		 jmp	 SHORT $LN7@proxy_geti
$LN1@proxy_geti:
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000c1	7e 10		 jle	 SHORT $LN11@proxy_geti
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR y$[rsp]
  000c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cc	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN12@proxy_geti
$LN11@proxy_geti:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
$LN12@proxy_geti:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  000e4	48 89 44 24 48	 mov	 QWORD PTR y$[rsp], rax
$LN3@proxy_geti:
  000e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR y$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR x$[rsp]
  000f3	e8 00 00 00 00	 call	 PyObject_GetItem
$LN7@proxy_geti:
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
proxy_getitem ENDP
_TEXT	ENDS
EXTRN	PyObject_SetItem:PROC
EXTRN	PyObject_DelItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_setitem DD imagerel proxy_setitem
	DD	imagerel proxy_setitem+183
	DD	imagerel $unwind$proxy_setitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_setitem DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_setitem
_TEXT	SEGMENT
tv74 = 32
tv83 = 40
proxy$ = 64
key$ = 72
value$ = 80
proxy_setitem PROC					; COMDAT

; 563  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 564  :     if (!proxy_checkref(proxy))

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00018	e8 00 00 00 00	 call	 proxy_checkref
  0001d	85 c0		 test	 eax, eax
  0001f	75 0a		 jne	 SHORT $LN3@proxy_seti

; 565  :         return -1;

  00021	b8 ff ff ff ff	 mov	 eax, -1
  00026	e9 87 00 00 00	 jmp	 $LN4@proxy_seti
$LN3@proxy_seti:

; 566  : 
; 567  :     if (value == NULL)

  0002b	48 83 7c 24 50
	00		 cmp	 QWORD PTR value$[rsp], 0
  00031	75 3f		 jne	 SHORT $LN2@proxy_seti

; 568  :         return PyObject_DelItem(PyWeakref_GET_OBJECT(proxy), key);

  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00038	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0003c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00041	7e 10		 jle	 SHORT $LN6@proxy_seti
  00043	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 20	 mov	 QWORD PTR tv74[rsp], rax
  00051	eb 0c		 jmp	 SHORT $LN7@proxy_seti
$LN6@proxy_seti:
  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0005a	48 89 44 24 20	 mov	 QWORD PTR tv74[rsp], rax
$LN7@proxy_seti:
  0005f	48 8b 54 24 48	 mov	 rdx, QWORD PTR key$[rsp]
  00064	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv74[rsp]
  00069	e8 00 00 00 00	 call	 PyObject_DelItem
  0006e	eb 42		 jmp	 SHORT $LN4@proxy_seti

; 569  :     else

  00070	eb 40		 jmp	 SHORT $LN1@proxy_seti
$LN2@proxy_seti:

; 570  :         return PyObject_SetItem(PyWeakref_GET_OBJECT(proxy), key, value);

  00072	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00077	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0007b	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00080	7e 10		 jle	 SHORT $LN8@proxy_seti
  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00087	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0008b	48 89 44 24 28	 mov	 QWORD PTR tv83[rsp], rax
  00090	eb 0c		 jmp	 SHORT $LN9@proxy_seti
$LN8@proxy_seti:
  00092	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00099	48 89 44 24 28	 mov	 QWORD PTR tv83[rsp], rax
$LN9@proxy_seti:
  0009e	4c 8b 44 24 50	 mov	 r8, QWORD PTR value$[rsp]
  000a3	48 8b 54 24 48	 mov	 rdx, QWORD PTR key$[rsp]
  000a8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv83[rsp]
  000ad	e8 00 00 00 00	 call	 PyObject_SetItem
$LN1@proxy_seti:
$LN4@proxy_seti:

; 571  : }

  000b2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b6	c3		 ret	 0
proxy_setitem ENDP
_TEXT	ENDS
EXTRN	PyObject_GetIter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_iter DD imagerel proxy_iter
	DD	imagerel proxy_iter+86
	DD	imagerel $unwind$proxy_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_iter DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_iter
_TEXT	SEGMENT
tv72 = 32
proxy$ = 64
proxy_iter PROC						; COMDAT

; 577  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 578  :     if (!proxy_checkref(proxy))

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0000e	e8 00 00 00 00	 call	 proxy_checkref
  00013	85 c0		 test	 eax, eax
  00015	75 04		 jne	 SHORT $LN1@proxy_iter

; 579  :         return NULL;

  00017	33 c0		 xor	 eax, eax
  00019	eb 36		 jmp	 SHORT $LN2@proxy_iter
$LN1@proxy_iter:

; 580  :     return PyObject_GetIter(PyWeakref_GET_OBJECT(proxy));

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00020	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00024	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00029	7e 10		 jle	 SHORT $LN4@proxy_iter
  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00030	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00034	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
  00039	eb 0c		 jmp	 SHORT $LN5@proxy_iter
$LN4@proxy_iter:
  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00042	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
$LN5@proxy_iter:
  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv72[rsp]
  0004c	e8 00 00 00 00	 call	 PyObject_GetIter
$LN2@proxy_iter:

; 581  : }

  00051	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00055	c3		 ret	 0
proxy_iter ENDP
_TEXT	ENDS
EXTRN	PyIter_Next:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_iternext DD imagerel proxy_iternext
	DD	imagerel proxy_iternext+86
	DD	imagerel $unwind$proxy_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_iternext DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT proxy_iternext
_TEXT	SEGMENT
tv72 = 32
proxy$ = 64
proxy_iternext PROC					; COMDAT

; 585  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 586  :     if (!proxy_checkref(proxy))

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0000e	e8 00 00 00 00	 call	 proxy_checkref
  00013	85 c0		 test	 eax, eax
  00015	75 04		 jne	 SHORT $LN1@proxy_iter@2

; 587  :         return NULL;

  00017	33 c0		 xor	 eax, eax
  00019	eb 36		 jmp	 SHORT $LN2@proxy_iter@2
$LN1@proxy_iter@2:

; 588  :     return PyIter_Next(PyWeakref_GET_OBJECT(proxy));

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00020	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00024	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00029	7e 10		 jle	 SHORT $LN4@proxy_iter@2
  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00030	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00034	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
  00039	eb 0c		 jmp	 SHORT $LN5@proxy_iter@2
$LN4@proxy_iter@2:
  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00042	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
$LN5@proxy_iter@2:
  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv72[rsp]
  0004c	e8 00 00 00 00	 call	 PyIter_Next
$LN2@proxy_iter@2:

; 589  : }

  00051	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00055	c3		 ret	 0
proxy_iternext ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	_PyObject_CallMethodId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$proxy_bytes DD imagerel proxy_bytes
	DD	imagerel proxy_bytes+168
	DD	imagerel $unwind$proxy_bytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$proxy_bytes DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT proxy_bytes
_TEXT	SEGMENT
tv75 = 32
proxy$ = 64
proxy_bytes PROC					; COMDAT

; 592  : WRAP_METHOD(proxy_bytes, __bytes__)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 12		 je	 SHORT $LN2@proxy_byte
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00027	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002b	75 48		 jne	 SHORT $LN3@proxy_byte
$LN2@proxy_byte:
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  00032	e8 00 00 00 00	 call	 proxy_checkref
  00037	85 c0		 test	 eax, eax
  00039	75 04		 jne	 SHORT $LN1@proxy_byte
  0003b	33 c0		 xor	 eax, eax
  0003d	eb 64		 jmp	 SHORT $LN4@proxy_byte
$LN1@proxy_byte:
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0004d	7e 10		 jle	 SHORT $LN6@proxy_byte
  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR proxy$[rsp]
  00054	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00058	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0005d	eb 0c		 jmp	 SHORT $LN7@proxy_byte
$LN6@proxy_byte:
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
$LN7@proxy_byte:
  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR tv75[rsp]
  00070	48 89 44 24 40	 mov	 QWORD PTR proxy$[rsp], rax
$LN3@proxy_byte:
  00075	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___bytes__@?1??proxy_bytes@@9@9
  0007a	8b c0		 mov	 eax, eax
  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00082	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0008b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0008f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00096	48 8b d0	 mov	 rdx, rax
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR proxy$[rsp]
  0009e	e8 00 00 00 00	 call	 _PyObject_CallMethodId
$LN4@proxy_byte:
  000a3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a7	c3		 ret	 0
proxy_bytes ENDP
_TEXT	ENDS
PUBLIC	PyWeakref_NewRef
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyWeakref_NewRef DD imagerel $LN17
	DD	imagerel $LN17+410
	DD	imagerel $unwind$PyWeakref_NewRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyWeakref_NewRef DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyWeakref_NewRef
_TEXT	SEGMENT
ref$ = 32
list$ = 40
proxy$ = 48
result$ = 56
prev$21803 = 64
tv128 = 72
ob$ = 96
callback$ = 104
PyWeakref_NewRef PROC					; COMDAT

; 726  : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 727  :     PyWeakReference *result = NULL;

  0000e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 728  :     PyWeakReference **list;
; 729  :     PyWeakReference *ref, *proxy;
; 730  : 
; 731  :     if (!PyType_SUPPORTS_WEAKREFS(Py_TYPE(ob))) {

  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR ob$[rsp]
  0001c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00020	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  00028	7f 27		 jg	 SHORT $LN12@PyWeakref_@3

; 732  :         PyErr_Format(PyExc_TypeError,
; 733  :                      "cannot create weak reference to '%s' object",
; 734  :                      Py_TYPE(ob)->tp_name);

  0002a	48 8b 44 24 60	 mov	 rax, QWORD PTR ob$[rsp]
  0002f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00033	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@
  0003e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00045	e8 00 00 00 00	 call	 PyErr_Format

; 735  :         return NULL;

  0004a	33 c0		 xor	 eax, eax
  0004c	e9 44 01 00 00	 jmp	 $LN13@PyWeakref_@3
$LN12@PyWeakref_@3:

; 736  :     }
; 737  :     list = GET_WEAKREFS_LISTPTR(ob);

  00051	48 8b 44 24 60	 mov	 rax, QWORD PTR ob$[rsp]
  00056	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005a	48 8b 80 28 01
	00 00		 mov	 rax, QWORD PTR [rax+296]
  00061	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ob$[rsp]
  00066	48 03 c8	 add	 rcx, rax
  00069	48 8b c1	 mov	 rax, rcx
  0006c	48 89 44 24 28	 mov	 QWORD PTR list$[rsp], rax

; 738  :     get_basic_refs(*list, &ref, &proxy);

  00071	4c 8d 44 24 30	 lea	 r8, QWORD PTR proxy$[rsp]
  00076	48 8d 54 24 20	 lea	 rdx, QWORD PTR ref$[rsp]
  0007b	48 8b 44 24 28	 mov	 rax, QWORD PTR list$[rsp]
  00080	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00083	e8 00 00 00 00	 call	 get_basic_refs

; 739  :     if (callback == Py_None)

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0008f	48 39 44 24 68	 cmp	 QWORD PTR callback$[rsp], rax
  00094	75 09		 jne	 SHORT $LN11@PyWeakref_@3

; 740  :         callback = NULL;

  00096	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR callback$[rsp], 0
$LN11@PyWeakref_@3:

; 741  :     if (callback == NULL)

  0009f	48 83 7c 24 68
	00		 cmp	 QWORD PTR callback$[rsp], 0
  000a5	75 0a		 jne	 SHORT $LN10@PyWeakref_@3

; 742  :         /* return existing weak reference if it exists */
; 743  :         result = ref;

  000a7	48 8b 44 24 20	 mov	 rax, QWORD PTR ref$[rsp]
  000ac	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax
$LN10@PyWeakref_@3:

; 744  :     if (result != NULL)

  000b1	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  000b7	74 0f		 je	 SHORT $LN9@PyWeakref_@3

; 745  :         Py_INCREF(result);

  000b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  000be	e8 00 00 00 00	 call	 _Py_IncRef

; 746  :     else {

  000c3	e9 c8 00 00 00	 jmp	 $LN8@PyWeakref_@3
$LN9@PyWeakref_@3:

; 747  :         /* Note: new_weakref() can trigger cyclic GC, so the weakref
; 748  :            list on ob can be mutated.  This means that the ref and
; 749  :            proxy pointers we got back earlier may have been collected,
; 750  :            so we need to compute these values again before we use
; 751  :            them. */
; 752  :         result = new_weakref(ob, callback);

  000c8	48 8b 54 24 68	 mov	 rdx, QWORD PTR callback$[rsp]
  000cd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ob$[rsp]
  000d2	e8 00 00 00 00	 call	 new_weakref
  000d7	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 753  :         if (result != NULL) {

  000dc	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  000e2	0f 84 a8 00 00
	00		 je	 $LN7@PyWeakref_@3

; 754  :             get_basic_refs(*list, &ref, &proxy);

  000e8	4c 8d 44 24 30	 lea	 r8, QWORD PTR proxy$[rsp]
  000ed	48 8d 54 24 20	 lea	 rdx, QWORD PTR ref$[rsp]
  000f2	48 8b 44 24 28	 mov	 rax, QWORD PTR list$[rsp]
  000f7	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000fa	e8 00 00 00 00	 call	 get_basic_refs

; 755  :             if (callback == NULL) {

  000ff	48 83 7c 24 68
	00		 cmp	 QWORD PTR callback$[rsp], 0
  00105	75 39		 jne	 SHORT $LN6@PyWeakref_@3

; 756  :                 if (ref == NULL)

  00107	48 83 7c 24 20
	00		 cmp	 QWORD PTR ref$[rsp], 0
  0010d	75 11		 jne	 SHORT $LN5@PyWeakref_@3

; 757  :                     insert_head(result, list);

  0010f	48 8b 54 24 28	 mov	 rdx, QWORD PTR list$[rsp]
  00114	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  00119	e8 00 00 00 00	 call	 insert_head

; 758  :                 else {

  0011e	eb 1e		 jmp	 SHORT $LN4@PyWeakref_@3
$LN5@PyWeakref_@3:

; 759  :                     /* Someone else added a ref without a callback
; 760  :                        during GC.  Return that one instead of this one
; 761  :                        to avoid violating the invariants of the list
; 762  :                        of weakrefs for ob. */
; 763  :                     Py_DECREF(result);

  00120	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  00125	e8 00 00 00 00	 call	 _Py_DecRef

; 764  :                     Py_INCREF(ref);

  0012a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ref$[rsp]
  0012f	e8 00 00 00 00	 call	 _Py_IncRef

; 765  :                     result = ref;

  00134	48 8b 44 24 20	 mov	 rax, QWORD PTR ref$[rsp]
  00139	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax
$LN4@PyWeakref_@3:

; 766  :                 }
; 767  :             }
; 768  :             else {

  0013e	eb 50		 jmp	 SHORT $LN3@PyWeakref_@3
$LN6@PyWeakref_@3:

; 769  :                 PyWeakReference *prev;
; 770  : 
; 771  :                 prev = (proxy == NULL) ? ref : proxy;

  00140	48 83 7c 24 30
	00		 cmp	 QWORD PTR proxy$[rsp], 0
  00146	75 0c		 jne	 SHORT $LN15@PyWeakref_@3
  00148	48 8b 44 24 20	 mov	 rax, QWORD PTR ref$[rsp]
  0014d	48 89 44 24 48	 mov	 QWORD PTR tv128[rsp], rax
  00152	eb 0a		 jmp	 SHORT $LN16@PyWeakref_@3
$LN15@PyWeakref_@3:
  00154	48 8b 44 24 30	 mov	 rax, QWORD PTR proxy$[rsp]
  00159	48 89 44 24 48	 mov	 QWORD PTR tv128[rsp], rax
$LN16@PyWeakref_@3:
  0015e	48 8b 44 24 48	 mov	 rax, QWORD PTR tv128[rsp]
  00163	48 89 44 24 40	 mov	 QWORD PTR prev$21803[rsp], rax

; 772  :                 if (prev == NULL)

  00168	48 83 7c 24 40
	00		 cmp	 QWORD PTR prev$21803[rsp], 0
  0016e	75 11		 jne	 SHORT $LN2@PyWeakref_@3

; 773  :                     insert_head(result, list);

  00170	48 8b 54 24 28	 mov	 rdx, QWORD PTR list$[rsp]
  00175	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  0017a	e8 00 00 00 00	 call	 insert_head

; 774  :                 else

  0017f	eb 0f		 jmp	 SHORT $LN1@PyWeakref_@3
$LN2@PyWeakref_@3:

; 775  :                     insert_after(result, prev);

  00181	48 8b 54 24 40	 mov	 rdx, QWORD PTR prev$21803[rsp]
  00186	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  0018b	e8 00 00 00 00	 call	 insert_after
$LN1@PyWeakref_@3:
$LN3@PyWeakref_@3:
$LN7@PyWeakref_@3:
$LN8@PyWeakref_@3:

; 776  :             }
; 777  :         }
; 778  :     }
; 779  :     return (PyObject *) result;

  00190	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN13@PyWeakref_@3:

; 780  : }

  00195	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00199	c3		 ret	 0
PyWeakref_NewRef ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_Track:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_weakref DD imagerel new_weakref
	DD	imagerel new_weakref+117
	DD	imagerel $unwind$new_weakref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_weakref DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT new_weakref
_TEXT	SEGMENT
result$ = 32
tv70 = 40
ob$ = 64
callback$ = 72
new_weakref PROC					; COMDAT

; 33   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 34   :     PyWeakReference *result;
; 35   : 
; 36   :     result = PyObject_GC_New(PyWeakReference, &_PyWeakref_RefType);

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 13		 je	 SHORT $LN4@new_weakre
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_RefType
  0001e	e8 00 00 00 00	 call	 _PxObject_New
  00023	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00028	eb 11		 jmp	 SHORT $LN5@new_weakre
$LN4@new_weakre:
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_RefType
  00031	e8 00 00 00 00	 call	 _PyObject_GC_New
  00036	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
$LN5@new_weakre:
  0003b	48 8b 44 24 28	 mov	 rax, QWORD PTR tv70[rsp]
  00040	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 37   :     if (result) {

  00045	48 83 7c 24 20
	00		 cmp	 QWORD PTR result$[rsp], 0
  0004b	74 1e		 je	 SHORT $LN1@new_weakre

; 38   :         init_weakref(result, ob, callback);

  0004d	4c 8b 44 24 48	 mov	 r8, QWORD PTR callback$[rsp]
  00052	48 8b 54 24 40	 mov	 rdx, QWORD PTR ob$[rsp]
  00057	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  0005c	e8 00 00 00 00	 call	 init_weakref

; 39   :         PyObject_GC_Track(result);

  00061	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  00066	e8 00 00 00 00	 call	 PyObject_GC_Track
$LN1@new_weakre:

; 40   :     }
; 41   :     return result;

  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]

; 42   : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
new_weakref ENDP
_TEXT	ENDS
PUBLIC	PyWeakref_NewProxy
EXTRN	PyCallable_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyWeakref_NewProxy DD imagerel $LN18
	DD	imagerel $LN18+453
	DD	imagerel $unwind$PyWeakref_NewProxy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyWeakref_NewProxy DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyWeakref_NewProxy
_TEXT	SEGMENT
ref$ = 32
list$ = 40
proxy$ = 48
result$ = 56
prev$21837 = 64
tv131 = 72
ob$ = 96
callback$ = 104
PyWeakref_NewProxy PROC					; COMDAT

; 785  : {

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 786  :     PyWeakReference *result = NULL;

  0000e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 787  :     PyWeakReference **list;
; 788  :     PyWeakReference *ref, *proxy;
; 789  : 
; 790  :     if (!PyType_SUPPORTS_WEAKREFS(Py_TYPE(ob))) {

  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR ob$[rsp]
  0001c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00020	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  00028	7f 27		 jg	 SHORT $LN13@PyWeakref_@4

; 791  :         PyErr_Format(PyExc_TypeError,
; 792  :                      "cannot create weak reference to '%s' object",
; 793  :                      Py_TYPE(ob)->tp_name);

  0002a	48 8b 44 24 60	 mov	 rax, QWORD PTR ob$[rsp]
  0002f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00033	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IJKCCOEC@cannot?5create?5weak?5reference?5to?5@
  0003e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00045	e8 00 00 00 00	 call	 PyErr_Format

; 794  :         return NULL;

  0004a	33 c0		 xor	 eax, eax
  0004c	e9 6f 01 00 00	 jmp	 $LN14@PyWeakref_@4
$LN13@PyWeakref_@4:

; 795  :     }
; 796  :     list = GET_WEAKREFS_LISTPTR(ob);

  00051	48 8b 44 24 60	 mov	 rax, QWORD PTR ob$[rsp]
  00056	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005a	48 8b 80 28 01
	00 00		 mov	 rax, QWORD PTR [rax+296]
  00061	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ob$[rsp]
  00066	48 03 c8	 add	 rcx, rax
  00069	48 8b c1	 mov	 rax, rcx
  0006c	48 89 44 24 28	 mov	 QWORD PTR list$[rsp], rax

; 797  :     get_basic_refs(*list, &ref, &proxy);

  00071	4c 8d 44 24 30	 lea	 r8, QWORD PTR proxy$[rsp]
  00076	48 8d 54 24 20	 lea	 rdx, QWORD PTR ref$[rsp]
  0007b	48 8b 44 24 28	 mov	 rax, QWORD PTR list$[rsp]
  00080	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00083	e8 00 00 00 00	 call	 get_basic_refs

; 798  :     if (callback == Py_None)

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0008f	48 39 44 24 68	 cmp	 QWORD PTR callback$[rsp], rax
  00094	75 09		 jne	 SHORT $LN12@PyWeakref_@4

; 799  :         callback = NULL;

  00096	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR callback$[rsp], 0
$LN12@PyWeakref_@4:

; 800  :     if (callback == NULL)

  0009f	48 83 7c 24 68
	00		 cmp	 QWORD PTR callback$[rsp], 0
  000a5	75 0a		 jne	 SHORT $LN11@PyWeakref_@4

; 801  :         /* attempt to return an existing weak reference if it exists */
; 802  :         result = proxy;

  000a7	48 8b 44 24 30	 mov	 rax, QWORD PTR proxy$[rsp]
  000ac	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax
$LN11@PyWeakref_@4:

; 803  :     if (result != NULL)

  000b1	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  000b7	74 0f		 je	 SHORT $LN10@PyWeakref_@4

; 804  :         Py_INCREF(result);

  000b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  000be	e8 00 00 00 00	 call	 _Py_IncRef

; 805  :     else {

  000c3	e9 f3 00 00 00	 jmp	 $LN9@PyWeakref_@4
$LN10@PyWeakref_@4:

; 806  :         /* Note: new_weakref() can trigger cyclic GC, so the weakref
; 807  :            list on ob can be mutated.  This means that the ref and
; 808  :            proxy pointers we got back earlier may have been collected,
; 809  :            so we need to compute these values again before we use
; 810  :            them. */
; 811  :         result = new_weakref(ob, callback);

  000c8	48 8b 54 24 68	 mov	 rdx, QWORD PTR callback$[rsp]
  000cd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ob$[rsp]
  000d2	e8 00 00 00 00	 call	 new_weakref
  000d7	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 812  :         if (result != NULL) {

  000dc	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  000e2	0f 84 d3 00 00
	00		 je	 $LN8@PyWeakref_@4

; 813  :             PyWeakReference *prev;
; 814  : 
; 815  :             if (PyCallable_Check(ob))

  000e8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ob$[rsp]
  000ed	e8 00 00 00 00	 call	 PyCallable_Check
  000f2	85 c0		 test	 eax, eax
  000f4	74 12		 je	 SHORT $LN7@PyWeakref_@4

; 816  :                 Py_TYPE(result) = &_PyWeakref_CallableProxyType;

  000f6	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00102	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 817  :             else

  00106	eb 10		 jmp	 SHORT $LN6@PyWeakref_@4
$LN7@PyWeakref_@4:

; 818  :                 Py_TYPE(result) = &_PyWeakref_ProxyType;

  00108	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  0010d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00114	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx
$LN6@PyWeakref_@4:

; 819  :             get_basic_refs(*list, &ref, &proxy);

  00118	4c 8d 44 24 30	 lea	 r8, QWORD PTR proxy$[rsp]
  0011d	48 8d 54 24 20	 lea	 rdx, QWORD PTR ref$[rsp]
  00122	48 8b 44 24 28	 mov	 rax, QWORD PTR list$[rsp]
  00127	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0012a	e8 00 00 00 00	 call	 get_basic_refs

; 820  :             if (callback == NULL) {

  0012f	48 83 7c 24 68
	00		 cmp	 QWORD PTR callback$[rsp], 0
  00135	75 34		 jne	 SHORT $LN5@PyWeakref_@4

; 821  :                 if (proxy != NULL) {

  00137	48 83 7c 24 30
	00		 cmp	 QWORD PTR proxy$[rsp], 0
  0013d	74 20		 je	 SHORT $LN4@PyWeakref_@4

; 822  :                     /* Someone else added a proxy without a callback
; 823  :                        during GC.  Return that one instead of this one
; 824  :                        to avoid violating the invariants of the list
; 825  :                        of weakrefs for ob. */
; 826  :                     Py_DECREF(result);

  0013f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  00144	e8 00 00 00 00	 call	 _Py_DecRef

; 827  :                     Py_INCREF(result = proxy);

  00149	48 8b 44 24 30	 mov	 rax, QWORD PTR proxy$[rsp]
  0014e	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax
  00153	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  00158	e8 00 00 00 00	 call	 _Py_IncRef

; 828  :                     goto skip_insert;

  0015d	eb 5c		 jmp	 SHORT $skip_insert$21848
$LN4@PyWeakref_@4:

; 829  :                 }
; 830  :                 prev = ref;

  0015f	48 8b 44 24 20	 mov	 rax, QWORD PTR ref$[rsp]
  00164	48 89 44 24 40	 mov	 QWORD PTR prev$21837[rsp], rax

; 831  :             }
; 832  :             else

  00169	eb 28		 jmp	 SHORT $LN3@PyWeakref_@4
$LN5@PyWeakref_@4:

; 833  :                 prev = (proxy == NULL) ? ref : proxy;

  0016b	48 83 7c 24 30
	00		 cmp	 QWORD PTR proxy$[rsp], 0
  00171	75 0c		 jne	 SHORT $LN16@PyWeakref_@4
  00173	48 8b 44 24 20	 mov	 rax, QWORD PTR ref$[rsp]
  00178	48 89 44 24 48	 mov	 QWORD PTR tv131[rsp], rax
  0017d	eb 0a		 jmp	 SHORT $LN17@PyWeakref_@4
$LN16@PyWeakref_@4:
  0017f	48 8b 44 24 30	 mov	 rax, QWORD PTR proxy$[rsp]
  00184	48 89 44 24 48	 mov	 QWORD PTR tv131[rsp], rax
$LN17@PyWeakref_@4:
  00189	48 8b 44 24 48	 mov	 rax, QWORD PTR tv131[rsp]
  0018e	48 89 44 24 40	 mov	 QWORD PTR prev$21837[rsp], rax
$LN3@PyWeakref_@4:

; 834  : 
; 835  :             if (prev == NULL)

  00193	48 83 7c 24 40
	00		 cmp	 QWORD PTR prev$21837[rsp], 0
  00199	75 11		 jne	 SHORT $LN2@PyWeakref_@4

; 836  :                 insert_head(result, list);

  0019b	48 8b 54 24 28	 mov	 rdx, QWORD PTR list$[rsp]
  001a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  001a5	e8 00 00 00 00	 call	 insert_head

; 837  :             else

  001aa	eb 0f		 jmp	 SHORT $LN1@PyWeakref_@4
$LN2@PyWeakref_@4:

; 838  :                 insert_after(result, prev);

  001ac	48 8b 54 24 40	 mov	 rdx, QWORD PTR prev$21837[rsp]
  001b1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  001b6	e8 00 00 00 00	 call	 insert_after
$LN1@PyWeakref_@4:
$skip_insert$21848:
$LN8@PyWeakref_@4:
$LN9@PyWeakref_@4:

; 839  :         skip_insert:
; 840  :             ;
; 841  :         }
; 842  :     }
; 843  :     return (PyObject *) result;

  001bb	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN14@PyWeakref_@4:

; 844  : }

  001c0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001c4	c3		 ret	 0
PyWeakref_NewProxy ENDP
_TEXT	ENDS
PUBLIC	PyWeakref_GetObject
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyWeakref_GetObject DD imagerel $LN7
	DD	imagerel $LN7+171
	DD	imagerel $unwind$PyWeakref_GetObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyWeakref_GetObject DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyWeakref_GetObject
_TEXT	SEGMENT
tv82 = 32
ref$ = 64
PyWeakref_GetObject PROC				; COMDAT

; 849  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 850  :     if (ref == NULL || !PyWeakref_Check(ref)) {

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR ref$[rsp], 0
  0000f	74 4f		 je	 SHORT $LN1@PyWeakref_@5
  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ref$[rsp]
  0001d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00021	74 52		 je	 SHORT $LN2@PyWeakref_@5
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_RefType
  0002a	48 8b 44 24 40	 mov	 rax, QWORD PTR ref$[rsp]
  0002f	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00033	e8 00 00 00 00	 call	 PyType_IsSubtype
  00038	85 c0		 test	 eax, eax
  0003a	75 39		 jne	 SHORT $LN2@PyWeakref_@5
  0003c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  00043	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ref$[rsp]
  00048	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0004c	74 27		 je	 SHORT $LN2@PyWeakref_@5
  0004e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  00055	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ref$[rsp]
  0005a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0005e	74 15		 je	 SHORT $LN2@PyWeakref_@5
$LN1@PyWeakref_@5:

; 851  :         PyErr_BadInternalCall();

  00060	ba 53 03 00 00	 mov	 edx, 851		; 00000353H
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@
  0006c	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 852  :         return NULL;

  00071	33 c0		 xor	 eax, eax
  00073	eb 31		 jmp	 SHORT $LN3@PyWeakref_@5
$LN2@PyWeakref_@5:

; 853  :     }
; 854  :     return PyWeakref_GET_OBJECT(ref);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR ref$[rsp]
  0007a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0007e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00083	7e 10		 jle	 SHORT $LN5@PyWeakref_@5
  00085	48 8b 44 24 40	 mov	 rax, QWORD PTR ref$[rsp]
  0008a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0008e	48 89 44 24 20	 mov	 QWORD PTR tv82[rsp], rax
  00093	eb 0c		 jmp	 SHORT $LN6@PyWeakref_@5
$LN5@PyWeakref_@5:
  00095	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0009c	48 89 44 24 20	 mov	 QWORD PTR tv82[rsp], rax
$LN6@PyWeakref_@5:
  000a1	48 8b 44 24 20	 mov	 rax, QWORD PTR tv82[rsp]
$LN3@PyWeakref_@5:

; 855  : }

  000a6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000aa	c3		 ret	 0
PyWeakref_GetObject ENDP
_TEXT	ENDS
PUBLIC	PyObject_ClearWeakRefs
EXTRN	PyErr_Restore:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyErr_Fetch:PROC
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_ClearWeakRefs DD imagerel $LN27
	DD	imagerel $LN27+819
	DD	imagerel $unwind$PyObject_ClearWeakRefs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_ClearWeakRefs DD 020c01H
	DD	013010cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_ClearWeakRefs
_TEXT	SEGMENT
list$ = 32
restore_error$21903 = 40
current$21901 = 48
count$21902 = 56
err_value$21905 = 64
err_type$21904 = 72
err_tb$21906 = 80
callback$21909 = 88
i$21918 = 96
tuple$21917 = 104
next$21925 = 112
callback$21938 = 120
item$21942 = 128
tv88 = 136
object$ = 160
PyObject_ClearWeakRefs PROC				; COMDAT

; 879  : {

$LN27:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 880  :     PyWeakReference **list;
; 881  : 
; 882  :     if (object == NULL
; 883  :         || !PyType_SUPPORTS_WEAKREFS(Py_TYPE(object))
; 884  :         || object->ob_refcnt != 0) {

  0000c	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR object$[rsp], 0
  00015	74 25		 je	 SHORT $LN21@PyObject_C
  00017	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR object$[rsp]
  0001f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00023	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  0002b	7e 0f		 jle	 SHORT $LN21@PyObject_C
  0002d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR object$[rsp]
  00035	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0003a	74 16		 je	 SHORT $LN22@PyObject_C
$LN21@PyObject_C:

; 885  :         PyErr_BadInternalCall();

  0003c	ba 75 03 00 00	 mov	 edx, 885		; 00000375H
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@LBKJPICB@?4?4?2Objects?2weakrefobject?4c?$AA@
  00048	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 886  :         return;

  0004d	e9 d9 02 00 00	 jmp	 $LN23@PyObject_C
$LN22@PyObject_C:

; 887  :     }
; 888  :     list = GET_WEAKREFS_LISTPTR(object);

  00052	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR object$[rsp]
  0005a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005e	48 8b 80 28 01
	00 00		 mov	 rax, QWORD PTR [rax+296]
  00065	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR object$[rsp]
  0006d	48 03 c8	 add	 rcx, rax
  00070	48 8b c1	 mov	 rax, rcx
  00073	48 89 44 24 20	 mov	 QWORD PTR list$[rsp], rax

; 889  :     /* Remove the callback-less basic and proxy references */
; 890  :     if (*list != NULL && (*list)->wr_callback == NULL) {

  00078	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  0007d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00081	74 43		 je	 SHORT $LN20@PyObject_C
  00083	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  00088	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008b	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00090	75 34		 jne	 SHORT $LN20@PyObject_C

; 891  :         clear_weakref(*list);

  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  00097	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0009a	e8 00 00 00 00	 call	 clear_weakref

; 892  :         if (*list != NULL && (*list)->wr_callback == NULL)

  0009f	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  000a4	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000a8	74 1c		 je	 SHORT $LN19@PyObject_C
  000aa	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  000af	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b2	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000b7	75 0d		 jne	 SHORT $LN19@PyObject_C

; 893  :             clear_weakref(*list);

  000b9	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  000be	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000c1	e8 00 00 00 00	 call	 clear_weakref
$LN19@PyObject_C:
$LN20@PyObject_C:

; 894  :     }
; 895  :     if (*list != NULL) {

  000c6	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  000cb	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000cf	0f 84 56 02 00
	00		 je	 $LN18@PyObject_C

; 896  :         PyWeakReference *current = *list;

  000d5	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  000da	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000dd	48 89 44 24 30	 mov	 QWORD PTR current$21901[rsp], rax

; 897  :         Py_ssize_t count = _PyWeakref_GetWeakrefCount(current);

  000e2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR current$21901[rsp]
  000e7	e8 00 00 00 00	 call	 _PyWeakref_GetWeakrefCount
  000ec	48 89 44 24 38	 mov	 QWORD PTR count$21902[rsp], rax

; 898  :         int restore_error = PyErr_Occurred() ? 1 : 0;

  000f1	e8 00 00 00 00	 call	 PyErr_Occurred
  000f6	48 85 c0	 test	 rax, rax
  000f9	74 0d		 je	 SHORT $LN25@PyObject_C
  000fb	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv88[rsp], 1
  00106	eb 0b		 jmp	 SHORT $LN26@PyObject_C
$LN25@PyObject_C:
  00108	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv88[rsp], 0
$LN26@PyObject_C:
  00113	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv88[rsp]
  0011a	89 44 24 28	 mov	 DWORD PTR restore_error$21903[rsp], eax

; 899  :         PyObject *err_type, *err_value, *err_tb;
; 900  : 
; 901  :         if (restore_error)

  0011e	83 7c 24 28 00	 cmp	 DWORD PTR restore_error$21903[rsp], 0
  00123	74 14		 je	 SHORT $LN17@PyObject_C

; 902  :             PyErr_Fetch(&err_type, &err_value, &err_tb);

  00125	4c 8d 44 24 50	 lea	 r8, QWORD PTR err_tb$21906[rsp]
  0012a	48 8d 54 24 40	 lea	 rdx, QWORD PTR err_value$21905[rsp]
  0012f	48 8d 4c 24 48	 lea	 rcx, QWORD PTR err_type$21904[rsp]
  00134	e8 00 00 00 00	 call	 PyErr_Fetch
$LN17@PyObject_C:

; 903  :         if (count == 1) {

  00139	48 83 7c 24 38
	01		 cmp	 QWORD PTR count$21902[rsp], 1
  0013f	75 57		 jne	 SHORT $LN16@PyObject_C

; 904  :             PyObject *callback = current->wr_callback;

  00141	48 8b 44 24 30	 mov	 rax, QWORD PTR current$21901[rsp]
  00146	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0014a	48 89 44 24 58	 mov	 QWORD PTR callback$21909[rsp], rax

; 905  : 
; 906  :             current->wr_callback = NULL;

  0014f	48 8b 44 24 30	 mov	 rax, QWORD PTR current$21901[rsp]
  00154	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 907  :             clear_weakref(current);

  0015c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR current$21901[rsp]
  00161	e8 00 00 00 00	 call	 clear_weakref

; 908  :             if (callback != NULL) {

  00166	48 83 7c 24 58
	00		 cmp	 QWORD PTR callback$21909[rsp], 0
  0016c	74 25		 je	 SHORT $LN15@PyObject_C

; 909  :                 if (((PyObject *)current)->ob_refcnt > 0)

  0016e	48 8b 44 24 30	 mov	 rax, QWORD PTR current$21901[rsp]
  00173	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00178	7e 0f		 jle	 SHORT $LN14@PyObject_C

; 910  :                     handle_callback(current, callback);

  0017a	48 8b 54 24 58	 mov	 rdx, QWORD PTR callback$21909[rsp]
  0017f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR current$21901[rsp]
  00184	e8 00 00 00 00	 call	 handle_callback
$LN14@PyObject_C:

; 911  :                 Py_DECREF(callback);

  00189	48 8b 4c 24 58	 mov	 rcx, QWORD PTR callback$21909[rsp]
  0018e	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@PyObject_C:

; 912  :             }
; 913  :         }
; 914  :         else {

  00193	e9 78 01 00 00	 jmp	 $LN13@PyObject_C
$LN16@PyObject_C:

; 915  :             PyObject *tuple;
; 916  :             Py_ssize_t i = 0;

  00198	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR i$21918[rsp], 0

; 917  : 
; 918  :             tuple = PyTuple_New(count * 2);

  001a1	48 8b 44 24 38	 mov	 rax, QWORD PTR count$21902[rsp]
  001a6	48 d1 e0	 shl	 rax, 1
  001a9	48 8b c8	 mov	 rcx, rax
  001ac	e8 00 00 00 00	 call	 PyTuple_New
  001b1	48 89 44 24 68	 mov	 QWORD PTR tuple$21917[rsp], rax

; 919  :             if (tuple == NULL) {

  001b6	48 83 7c 24 68
	00		 cmp	 QWORD PTR tuple$21917[rsp], 0
  001bc	75 20		 jne	 SHORT $LN12@PyObject_C

; 920  :                 if (restore_error)

  001be	83 7c 24 28 00	 cmp	 DWORD PTR restore_error$21903[rsp], 0
  001c3	74 14		 je	 SHORT $LN11@PyObject_C

; 921  :                     PyErr_Fetch(&err_type, &err_value, &err_tb);

  001c5	4c 8d 44 24 50	 lea	 r8, QWORD PTR err_tb$21906[rsp]
  001ca	48 8d 54 24 40	 lea	 rdx, QWORD PTR err_value$21905[rsp]
  001cf	48 8d 4c 24 48	 lea	 rcx, QWORD PTR err_type$21904[rsp]
  001d4	e8 00 00 00 00	 call	 PyErr_Fetch
$LN11@PyObject_C:

; 922  :                 return;

  001d9	e9 4d 01 00 00	 jmp	 $LN23@PyObject_C
$LN12@PyObject_C:

; 923  :             }
; 924  : 
; 925  :             for (i = 0; i < count; ++i) {

  001de	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR i$21918[rsp], 0
  001e7	eb 0d		 jmp	 SHORT $LN10@PyObject_C
$LN9@PyObject_C:
  001e9	48 8b 44 24 60	 mov	 rax, QWORD PTR i$21918[rsp]
  001ee	48 ff c0	 inc	 rax
  001f1	48 89 44 24 60	 mov	 QWORD PTR i$21918[rsp], rax
$LN10@PyObject_C:
  001f6	48 8b 44 24 38	 mov	 rax, QWORD PTR count$21902[rsp]
  001fb	48 39 44 24 60	 cmp	 QWORD PTR i$21918[rsp], rax
  00200	0f 8d 8f 00 00
	00		 jge	 $LN8@PyObject_C

; 926  :                 PyWeakReference *next = current->wr_next;

  00206	48 8b 44 24 30	 mov	 rax, QWORD PTR current$21901[rsp]
  0020b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00212	48 89 44 24 70	 mov	 QWORD PTR next$21925[rsp], rax

; 927  : 
; 928  :                 if (((PyObject *)current)->ob_refcnt > 0)

  00217	48 8b 44 24 30	 mov	 rax, QWORD PTR current$21901[rsp]
  0021c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00221	7e 3e		 jle	 SHORT $LN7@PyObject_C

; 929  :                 {
; 930  :                     Py_INCREF(current);

  00223	48 8b 4c 24 30	 mov	 rcx, QWORD PTR current$21901[rsp]
  00228	e8 00 00 00 00	 call	 _Py_IncRef

; 931  :                     PyTuple_SET_ITEM(tuple, i * 2, (PyObject *) current);

  0022d	48 8b 44 24 60	 mov	 rax, QWORD PTR i$21918[rsp]
  00232	48 d1 e0	 shl	 rax, 1
  00235	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tuple$21917[rsp]
  0023a	48 8b 54 24 30	 mov	 rdx, QWORD PTR current$21901[rsp]
  0023f	48 89 54 c1 70	 mov	 QWORD PTR [rcx+rax*8+112], rdx

; 932  :                     PyTuple_SET_ITEM(tuple, i * 2 + 1, current->wr_callback);

  00244	48 8b 44 24 60	 mov	 rax, QWORD PTR i$21918[rsp]
  00249	48 d1 e0	 shl	 rax, 1
  0024c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tuple$21917[rsp]
  00251	48 8b 54 24 30	 mov	 rdx, QWORD PTR current$21901[rsp]
  00256	48 8b 52 68	 mov	 rdx, QWORD PTR [rdx+104]
  0025a	48 89 54 c1 78	 mov	 QWORD PTR [rcx+rax*8+120], rdx

; 933  :                 }
; 934  :                 else {

  0025f	eb 0e		 jmp	 SHORT $LN6@PyObject_C
$LN7@PyObject_C:

; 935  :                     Py_DECREF(current->wr_callback);

  00261	48 8b 44 24 30	 mov	 rax, QWORD PTR current$21901[rsp]
  00266	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0026a	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyObject_C:

; 936  :                 }
; 937  :                 current->wr_callback = NULL;

  0026f	48 8b 44 24 30	 mov	 rax, QWORD PTR current$21901[rsp]
  00274	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 938  :                 clear_weakref(current);

  0027c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR current$21901[rsp]
  00281	e8 00 00 00 00	 call	 clear_weakref

; 939  :                 current = next;

  00286	48 8b 44 24 70	 mov	 rax, QWORD PTR next$21925[rsp]
  0028b	48 89 44 24 30	 mov	 QWORD PTR current$21901[rsp], rax

; 940  :             }

  00290	e9 54 ff ff ff	 jmp	 $LN9@PyObject_C
$LN8@PyObject_C:

; 941  :             for (i = 0; i < count; ++i) {

  00295	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR i$21918[rsp], 0
  0029e	eb 0d		 jmp	 SHORT $LN5@PyObject_C
$LN4@PyObject_C:
  002a0	48 8b 44 24 60	 mov	 rax, QWORD PTR i$21918[rsp]
  002a5	48 ff c0	 inc	 rax
  002a8	48 89 44 24 60	 mov	 QWORD PTR i$21918[rsp], rax
$LN5@PyObject_C:
  002ad	48 8b 44 24 38	 mov	 rax, QWORD PTR count$21902[rsp]
  002b2	48 39 44 24 60	 cmp	 QWORD PTR i$21918[rsp], rax
  002b7	7d 4d		 jge	 SHORT $LN3@PyObject_C

; 942  :                 PyObject *callback = PyTuple_GET_ITEM(tuple, i * 2 + 1);

  002b9	48 8b 44 24 60	 mov	 rax, QWORD PTR i$21918[rsp]
  002be	48 d1 e0	 shl	 rax, 1
  002c1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tuple$21917[rsp]
  002c6	48 8b 44 c1 78	 mov	 rax, QWORD PTR [rcx+rax*8+120]
  002cb	48 89 44 24 78	 mov	 QWORD PTR callback$21938[rsp], rax

; 943  : 
; 944  :                 /* The tuple may have slots left to NULL */
; 945  :                 if (callback != NULL) {

  002d0	48 83 7c 24 78
	00		 cmp	 QWORD PTR callback$21938[rsp], 0
  002d6	74 2c		 je	 SHORT $LN2@PyObject_C

; 946  :                     PyObject *item = PyTuple_GET_ITEM(tuple, i * 2);

  002d8	48 8b 44 24 60	 mov	 rax, QWORD PTR i$21918[rsp]
  002dd	48 d1 e0	 shl	 rax, 1
  002e0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tuple$21917[rsp]
  002e5	48 8b 44 c1 70	 mov	 rax, QWORD PTR [rcx+rax*8+112]
  002ea	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR item$21942[rsp], rax

; 947  :                     handle_callback((PyWeakReference *)item, callback);

  002f2	48 8b 54 24 78	 mov	 rdx, QWORD PTR callback$21938[rsp]
  002f7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR item$21942[rsp]
  002ff	e8 00 00 00 00	 call	 handle_callback
$LN2@PyObject_C:

; 948  :                 }
; 949  :             }

  00304	eb 9a		 jmp	 SHORT $LN4@PyObject_C
$LN3@PyObject_C:

; 950  :             Py_DECREF(tuple);

  00306	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tuple$21917[rsp]
  0030b	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyObject_C:

; 951  :         }
; 952  :         if (restore_error)

  00310	83 7c 24 28 00	 cmp	 DWORD PTR restore_error$21903[rsp], 0
  00315	74 14		 je	 SHORT $LN1@PyObject_C

; 953  :             PyErr_Restore(err_type, err_value, err_tb);

  00317	4c 8b 44 24 50	 mov	 r8, QWORD PTR err_tb$21906[rsp]
  0031c	48 8b 54 24 40	 mov	 rdx, QWORD PTR err_value$21905[rsp]
  00321	48 8b 4c 24 48	 mov	 rcx, QWORD PTR err_type$21904[rsp]
  00326	e8 00 00 00 00	 call	 PyErr_Restore
$LN1@PyObject_C:
$LN18@PyObject_C:
$LN23@PyObject_C:

; 954  :     }
; 955  : }

  0032b	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00332	c3		 ret	 0
PyObject_ClearWeakRefs ENDP
_TEXT	ENDS
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$handle_callback DD imagerel handle_callback
	DD	imagerel handle_callback+72
	DD	imagerel $unwind$handle_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$handle_callback DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT handle_callback
_TEXT	SEGMENT
cbresult$ = 32
ref$ = 64
callback$ = 72
handle_callback PROC					; COMDAT

; 862  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 863  :     PyObject *cbresult = PyObject_CallFunctionObjArgs(callback, ref, NULL);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 40	 mov	 rdx, QWORD PTR ref$[rsp]
  00016	48 8b 4c 24 48	 mov	 rcx, QWORD PTR callback$[rsp]
  0001b	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00020	48 89 44 24 20	 mov	 QWORD PTR cbresult$[rsp], rax

; 864  : 
; 865  :     if (cbresult == NULL)

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR cbresult$[rsp], 0
  0002b	75 0c		 jne	 SHORT $LN2@handle_cal

; 866  :         PyErr_WriteUnraisable(callback);

  0002d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR callback$[rsp]
  00032	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 867  :     else

  00037	eb 0a		 jmp	 SHORT $LN1@handle_cal
$LN2@handle_cal:

; 868  :         Py_DECREF(cbresult);

  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR cbresult$[rsp]
  0003e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@handle_cal:

; 869  : }

  00043	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00047	c3		 ret	 0
handle_callback ENDP
_TEXT	ENDS
END
