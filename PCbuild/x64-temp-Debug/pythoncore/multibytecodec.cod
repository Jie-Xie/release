; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BA@EEJLBBNI@_multibytecodec?$AA@		; `string'
PUBLIC	??_C@_0P@CGBPDBNI@__create_codec?$AA@		; `string'
PUBLIC	??_C@_0BG@BIPCHKOG@MultibyteStreamWriter?$AA@	; `string'
PUBLIC	??_C@_0L@MKGKOOMC@writelines?$AA@		; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_0BG@DEHAHLDM@MultibyteStreamReader?$AA@	; `string'
PUBLIC	??_C@_09OBGGLHMH@readlines?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_0BM@JAAPDPFD@MultibyteIncrementalDecoder?$AA@ ; `string'
PUBLIC	??_C@_0BM@FOKCGLDH@MultibyteIncrementalEncoder?$AA@ ; `string'
PUBLIC	??_C@_05CFMALAOA@reset?$AA@			; `string'
PUBLIC	??_C@_0P@LGCJMNJM@MultibyteCodec?$AA@		; `string'
PUBLIC	??_C@_06KPNAMAEI@decode?$AA@			; `string'
PUBLIC	??_C@_06GDGADLDP@encode?$AA@			; `string'
PUBLIC	??_C@_0BE@GJHBECHK@how?5to?5treat?5errors?$AA@	; `string'
PUBLIC	??_C@_06DJAMKFID@stream?$AA@			; `string'
PUBLIC	??_C@_05FPBGKCKL@final?$AA@			; `string'
PUBLIC	??_C@_06EOMHCNPI@errors?$AA@			; `string'
PUBLIC	??_C@_05DFJCHPDH@input?$AA@			; `string'
EXTRN	PyObject_GenericGetAttr:PROC
;	COMDAT ??_C@_0BA@EEJLBBNI@_multibytecodec?$AA@
CONST	SEGMENT
??_C@_0BA@EEJLBBNI@_multibytecodec?$AA@ DB '_multibytecodec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CGBPDBNI@__create_codec?$AA@
CONST	SEGMENT
??_C@_0P@CGBPDBNI@__create_codec?$AA@ DB '__create_codec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BIPCHKOG@MultibyteStreamWriter?$AA@
CONST	SEGMENT
??_C@_0BG@BIPCHKOG@MultibyteStreamWriter?$AA@ DB 'MultibyteStreamWriter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MKGKOOMC@writelines?$AA@
CONST	SEGMENT
??_C@_0L@MKGKOOMC@writelines?$AA@ DB 'writelines', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_write@?2??mbstreamwriter_reset@@9@9 DQ 0000000000000000H ; `mbstreamwriter_reset'::`3'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
?PyId_write@?1??mbstreamwriter_iwrite@@9@9 DQ 0000000000000000H ; `mbstreamwriter_iwrite'::`2'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DEHAHLDM@MultibyteStreamReader?$AA@
CONST	SEGMENT
??_C@_0BG@DEHAHLDM@MultibyteStreamReader?$AA@ DB 'MultibyteStreamReader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OBGGLHMH@readlines?$AA@
CONST	SEGMENT
??_C@_09OBGGLHMH@readlines?$AA@ DB 'readlines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JAAPDPFD@MultibyteIncrementalDecoder?$AA@
CONST	SEGMENT
??_C@_0BM@JAAPDPFD@MultibyteIncrementalDecoder?$AA@ DB 'MultibyteIncremen'
	DB	'talDecoder', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FOKCGLDH@MultibyteIncrementalEncoder?$AA@
CONST	SEGMENT
??_C@_0BM@FOKCGLDH@MultibyteIncrementalEncoder?$AA@ DB 'MultibyteIncremen'
	DB	'talEncoder', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFMALAOA@reset?$AA@
CONST	SEGMENT
??_C@_05CFMALAOA@reset?$AA@ DB 'reset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LGCJMNJM@MultibyteCodec?$AA@
CONST	SEGMENT
??_C@_0P@LGCJMNJM@MultibyteCodec?$AA@ DB 'MultibyteCodec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPNAMAEI@decode?$AA@
CONST	SEGMENT
??_C@_06KPNAMAEI@decode?$AA@ DB 'decode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDGADLDP@encode?$AA@
CONST	SEGMENT
??_C@_06GDGADLDP@encode?$AA@ DB 'encode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GJHBECHK@how?5to?5treat?5errors?$AA@
CONST	SEGMENT
??_C@_0BE@GJHBECHK@how?5to?5treat?5errors?$AA@ DB 'how to treat errors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJAMKFID@stream?$AA@
CONST	SEGMENT
??_C@_06DJAMKFID@stream?$AA@ DB 'stream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FPBGKCKL@final?$AA@
CONST	SEGMENT
??_C@_05FPBGKCKL@final?$AA@ DB 'final', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOMHCNPI@errors?$AA@
CONST	SEGMENT
??_C@_06EOMHCNPI@errors?$AA@ DB 'errors', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFJCHPDH@input?$AA@
CONST	SEGMENT
??_C@_05DFJCHPDH@input?$AA@ DB 'input', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
MultibyteCodec_Encode__doc__ DB 'I.encode(unicode[, errors]) -> (string, '
	DB	'length consumed)', 0aH, 0aH, 'Return an encoded string versio'
	DB	'n of `unicode''. errors may be given to', 0aH, 'set a differe'
	DB	'nt error handling scheme. Default is ''strict'' meaning that', 0aH
	DB	'encoding errors raise a UnicodeEncodeError. Other possible va'
	DB	'lues are', 0aH, '''ignore'', ''replace'' and ''xmlcharrefrepl'
	DB	'ace'' as well as any other name', 0aH, 'registered with codec'
	DB	's.register_error that can handle UnicodeEncodeErrors.', 00H
	ORG $+1
MultibyteCodec_Decode__doc__ DB 'I.decode(string[, errors]) -> (unicodeob'
	DB	'ject, length consumed)', 0aH, 0aH, 'Decodes `string'' using I'
	DB	', an MultibyteCodec instance. errors may be given', 0aH, 'to '
	DB	'set a different error handling scheme. Default is ''strict'' '
	DB	'meaning', 0aH, 'that encoding errors raise a UnicodeDecodeErr'
	DB	'or. Other possible values', 0aH, 'are ''ignore'' and ''replac'
	DB	'e'' as well as any other name registered with', 0aH, 'codecs.'
	DB	'register_error that is able to handle UnicodeDecodeErrors.', 00H
	ORG $+2
codeckwarglist DQ FLAT:??_C@_05DFJCHPDH@input?$AA@
	DQ	FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	0000000000000000H
incnewkwarglist DQ FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	0000000000000000H
incrementalkwarglist DQ FLAT:??_C@_05DFJCHPDH@input?$AA@
	DQ	FLAT:??_C@_05FPBGKCKL@final?$AA@
	DQ	0000000000000000H
streamkwarglist DQ FLAT:??_C@_06DJAMKFID@stream?$AA@
	DQ	FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	0000000000000000H
	ORG $+8
codecctx_getsets DQ FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	FLAT:codecctx_errors_get
	DQ	FLAT:codecctx_errors_set
	DQ	FLAT:??_C@_0BE@GJHBECHK@how?5to?5treat?5errors?$AA@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
multibytecodec_methods DQ FLAT:??_C@_06GDGADLDP@encode?$AA@
	DQ	FLAT:MultibyteCodec_Encode
	DD	03H
	ORG $+4
	DQ	FLAT:MultibyteCodec_Encode__doc__
	DQ	FLAT:??_C@_06KPNAMAEI@decode?$AA@
	DQ	FLAT:MultibyteCodec_Decode
	DD	03H
	ORG $+4
	DQ	FLAT:MultibyteCodec_Decode__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
MultibyteCodec_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@LGCJMNJM@MultibyteCodec?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:multibytecodec_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:multibytecodec_methods
	ORG $+152
mbiencoder_methods DQ FLAT:??_C@_06GDGADLDP@encode?$AA@
	DQ	FLAT:mbiencoder_encode
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_05CFMALAOA@reset?$AA@
	DQ	FLAT:mbiencoder_reset
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
MultibyteIncrementalEncoder_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BM@FOKCGLDH@MultibyteIncrementalEncoder?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:mbiencoder_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:mbiencoder_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbiencoder_methods
	DQ	0000000000000000H
	DQ	FLAT:codecctx_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbiencoder_init
	DQ	0000000000000000H
	DQ	FLAT:mbiencoder_new
	ORG $+72
mbidecoder_methods DQ FLAT:??_C@_06KPNAMAEI@decode?$AA@
	DQ	FLAT:mbidecoder_decode
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_05CFMALAOA@reset?$AA@
	DQ	FLAT:mbidecoder_reset
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
MultibyteIncrementalDecoder_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BM@JAAPDPFD@MultibyteIncrementalDecoder?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:mbidecoder_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:mbidecoder_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbidecoder_methods
	DQ	0000000000000000H
	DQ	FLAT:codecctx_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbidecoder_init
	DQ	0000000000000000H
	DQ	FLAT:mbidecoder_new
	ORG $+72
mbstreamreader_methods DQ FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:mbstreamreader_read
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:mbstreamreader_readline
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_09OBGGLHMH@readlines?$AA@
	DQ	FLAT:mbstreamreader_readlines
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_05CFMALAOA@reset?$AA@
	DQ	FLAT:mbstreamreader_reset
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
mbstreamreader_members DQ FLAT:??_C@_06DJAMKFID@stream?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
MultibyteStreamReader_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BG@DEHAHLDM@MultibyteStreamReader?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamreader_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:mbstreamreader_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamreader_methods
	DQ	FLAT:mbstreamreader_members
	DQ	FLAT:codecctx_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamreader_init
	DQ	0000000000000000H
	DQ	FLAT:mbstreamreader_new
	ORG $+72
mbstreamwriter_methods DQ FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:mbstreamwriter_write
	DD	08H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0L@MKGKOOMC@writelines?$AA@
	DQ	FLAT:mbstreamwriter_writelines
	DD	08H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_05CFMALAOA@reset?$AA@
	DQ	FLAT:mbstreamwriter_reset
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
mbstreamwriter_members DQ FLAT:??_C@_06DJAMKFID@stream?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
MultibyteStreamWriter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BG@BIPCHKOG@MultibyteStreamWriter?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamwriter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:mbstreamwriter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamwriter_methods
	DQ	FLAT:mbstreamwriter_members
	DQ	FLAT:codecctx_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mbstreamwriter_init
	DQ	0000000000000000H
	DQ	FLAT:mbstreamwriter_new
	ORG $+72
__methods DQ	FLAT:??_C@_0P@CGBPDBNI@__create_codec?$AA@
	DQ	FLAT:__create_codec
	DD	08H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_multibytecodecmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BA@EEJLBBNI@_multibytecodec?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:__methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_07CLEHDIEJ@replace?$AA@			; `string'
PUBLIC	??_C@_06GDPEBLPA@ignore?$AA@			; `string'
PUBLIC	??_C@_06OLFOGHEN@strict?$AA@			; `string'
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
pdata	SEGMENT
$pdata$codecctx_errors_get DD imagerel codecctx_errors_get
	DD	imagerel codecctx_errors_get+127
	DD	imagerel $unwind$codecctx_errors_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codecctx_errors_get DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_07CLEHDIEJ@replace?$AA@
CONST	SEGMENT
??_C@_07CLEHDIEJ@replace?$AA@ DB 'replace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDPEBLPA@ignore?$AA@
CONST	SEGMENT
??_C@_06GDPEBLPA@ignore?$AA@ DB 'ignore', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLFOGHEN@strict?$AA@
CONST	SEGMENT
??_C@_06OLFOGHEN@strict?$AA@ DB 'strict', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT codecctx_errors_get
_TEXT	SEGMENT
errors$ = 32
self$ = 64
codecctx_errors_get PROC				; COMDAT

; 122  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 123  :     const char *errors;
; 124  : 
; 125  :     if (self->errors == ERROR_STRICT)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 70 01	 cmp	 QWORD PTR [rax+112], 1
  00013	75 0e		 jne	 SHORT $LN6@codecctx_e

; 126  :         errors = "strict";

  00015	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  0001c	48 89 44 24 20	 mov	 QWORD PTR errors$[rsp], rax
  00021	eb 4d		 jmp	 SHORT $LN5@codecctx_e
$LN6@codecctx_e:

; 127  :     else if (self->errors == ERROR_IGNORE)

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00028	48 83 78 70 02	 cmp	 QWORD PTR [rax+112], 2
  0002d	75 0e		 jne	 SHORT $LN4@codecctx_e

; 128  :         errors = "ignore";

  0002f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  00036	48 89 44 24 20	 mov	 QWORD PTR errors$[rsp], rax
  0003b	eb 33		 jmp	 SHORT $LN3@codecctx_e
$LN4@codecctx_e:

; 129  :     else if (self->errors == ERROR_REPLACE)

  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00042	48 83 78 70 03	 cmp	 QWORD PTR [rax+112], 3
  00047	75 0e		 jne	 SHORT $LN2@codecctx_e

; 130  :         errors = "replace";

  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07CLEHDIEJ@replace?$AA@
  00050	48 89 44 24 20	 mov	 QWORD PTR errors$[rsp], rax

; 131  :     else {

  00055	eb 19		 jmp	 SHORT $LN1@codecctx_e
$LN2@codecctx_e:

; 132  :         Py_INCREF(self->errors);

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0005c	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00060	e8 00 00 00 00	 call	 _Py_IncRef

; 133  :         return self->errors;

  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0006a	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0006e	eb 0a		 jmp	 SHORT $LN7@codecctx_e
$LN1@codecctx_e:
$LN3@codecctx_e:
$LN5@codecctx_e:

; 134  :     }
; 135  : 
; 136  :     return PyUnicode_FromString(errors);

  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR errors$[rsp]
  00075	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN7@codecctx_e:

; 137  : }

  0007a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007e	c3		 ret	 0
codecctx_errors_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0BI@IFJPBJFA@errors?5must?5be?5a?5string?$AA@ ; `string'
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
pdata	SEGMENT
$pdata$codecctx_errors_set DD imagerel codecctx_errors_set
	DD	imagerel codecctx_errors_set+209
	DD	imagerel $unwind$codecctx_errors_set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codecctx_errors_set DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BI@IFJPBJFA@errors?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0BI@IFJPBJFA@errors?5must?5be?5a?5string?$AA@ DB 'errors must be a '
	DB	'string', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT codecctx_errors_set
_TEXT	SEGMENT
str$ = 32
cb$ = 40
self$ = 64
value$ = 72
closure$ = 80
codecctx_errors_set PROC				; COMDAT

; 142  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 143  :     PyObject *cb;
; 144  :     const char *str;
; 145  : 
; 146  :     if (!PyUnicode_Check(value)) {

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00022	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00027	85 c0		 test	 eax, eax
  00029	75 1d		 jne	 SHORT $LN8@codecctx_e@2

; 147  :         PyErr_SetString(PyExc_TypeError, "errors must be a string");

  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IFJPBJFA@errors?5must?5be?5a?5string?$AA@
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00039	e8 00 00 00 00	 call	 PyErr_SetString

; 148  :         return -1;

  0003e	b8 ff ff ff ff	 mov	 eax, -1
  00043	e9 84 00 00 00	 jmp	 $LN9@codecctx_e@2
$LN8@codecctx_e@2:

; 149  :     }
; 150  : 
; 151  :     str = _PyUnicode_AsString(value);

  00048	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0004d	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00052	48 89 44 24 20	 mov	 QWORD PTR str$[rsp], rax

; 152  :     if (str == NULL)

  00057	48 83 7c 24 20
	00		 cmp	 QWORD PTR str$[rsp], 0
  0005d	75 07		 jne	 SHORT $LN7@codecctx_e@2

; 153  :         return -1;

  0005f	b8 ff ff ff ff	 mov	 eax, -1
  00064	eb 66		 jmp	 SHORT $LN9@codecctx_e@2
$LN7@codecctx_e@2:

; 154  : 
; 155  :     cb = internal_error_callback(str);

  00066	48 8b 4c 24 20	 mov	 rcx, QWORD PTR str$[rsp]
  0006b	e8 00 00 00 00	 call	 internal_error_callback
  00070	48 89 44 24 28	 mov	 QWORD PTR cb$[rsp], rax

; 156  :     if (cb == NULL)

  00075	48 83 7c 24 28
	00		 cmp	 QWORD PTR cb$[rsp], 0
  0007b	75 07		 jne	 SHORT $LN6@codecctx_e@2

; 157  :         return -1;

  0007d	b8 ff ff ff ff	 mov	 eax, -1
  00082	eb 48		 jmp	 SHORT $LN9@codecctx_e@2
$LN6@codecctx_e@2:
$LN5@codecctx_e@2:

; 158  : 
; 159  :     ERROR_DECREF(self->errors);

  00084	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00089	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0008e	74 26		 je	 SHORT $LN2@codecctx_e@2
  00090	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00095	48 83 78 70 01	 cmp	 QWORD PTR [rax+112], 1
  0009a	72 0c		 jb	 SHORT $LN1@codecctx_e@2
  0009c	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000a1	48 83 78 70 03	 cmp	 QWORD PTR [rax+112], 3
  000a6	76 0e		 jbe	 SHORT $LN2@codecctx_e@2
$LN1@codecctx_e@2:
  000a8	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000ad	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000b1	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@codecctx_e@2:
  000b6	33 c0		 xor	 eax, eax
  000b8	85 c0		 test	 eax, eax
  000ba	75 c8		 jne	 SHORT $LN5@codecctx_e@2

; 160  :     self->errors = cb;

  000bc	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cb$[rsp]
  000c6	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 161  :     return 0;

  000ca	33 c0		 xor	 eax, eax
$LN9@codecctx_e@2:

; 162  : }

  000cc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d0	c3		 ret	 0
codecctx_errors_set ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	strcmp:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\cjkcodecs\multibytecodec.c
pdata	SEGMENT
$pdata$internal_error_callback DD imagerel internal_error_callback
	DD	imagerel internal_error_callback+122
	DD	imagerel $unwind$internal_error_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$internal_error_callback DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT internal_error_callback
_TEXT	SEGMENT
errors$ = 48
internal_error_callback PROC				; COMDAT

; 80   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 81   :     if (errors == NULL || strcmp(errors, "strict") == 0)

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR errors$[rsp], 0
  0000f	74 15		 je	 SHORT $LN6@internal_e
  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR errors$[rsp]
  0001d	e8 00 00 00 00	 call	 strcmp
  00022	85 c0		 test	 eax, eax
  00024	75 09		 jne	 SHORT $LN7@internal_e
$LN6@internal_e:

; 82   :         return ERROR_STRICT;

  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	eb 48		 jmp	 SHORT $LN8@internal_e
  0002d	eb 46		 jmp	 SHORT $LN5@internal_e
$LN7@internal_e:

; 83   :     else if (strcmp(errors, "ignore") == 0)

  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR errors$[rsp]
  0003b	e8 00 00 00 00	 call	 strcmp
  00040	85 c0		 test	 eax, eax
  00042	75 09		 jne	 SHORT $LN4@internal_e

; 84   :         return ERROR_IGNORE;

  00044	b8 02 00 00 00	 mov	 eax, 2
  00049	eb 2a		 jmp	 SHORT $LN8@internal_e
  0004b	eb 28		 jmp	 SHORT $LN3@internal_e
$LN4@internal_e:

; 85   :     else if (strcmp(errors, "replace") == 0)

  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CLEHDIEJ@replace?$AA@
  00054	48 8b 4c 24 30	 mov	 rcx, QWORD PTR errors$[rsp]
  00059	e8 00 00 00 00	 call	 strcmp
  0005e	85 c0		 test	 eax, eax
  00060	75 09		 jne	 SHORT $LN2@internal_e

; 86   :         return ERROR_REPLACE;

  00062	b8 03 00 00 00	 mov	 eax, 3
  00067	eb 0c		 jmp	 SHORT $LN8@internal_e

; 87   :     else

  00069	eb 0a		 jmp	 SHORT $LN1@internal_e
$LN2@internal_e:

; 88   :         return PyUnicode_FromString(errors);

  0006b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR errors$[rsp]
  00070	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN1@internal_e:
$LN3@internal_e:
$LN5@internal_e:
$LN8@internal_e:

; 89   : }

  00075	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00079	c3		 ret	 0
internal_error_callback ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@IEEIFIKA@couldn?8t?5convert?5the?5object?5to?5u@ ; `string'
PUBLIC	??_C@_0L@ENMONLGM@O?$HMz?3encode?$AA@		; `string'
EXTRN	PyUnicode_AsUnicodeAndSize:PROC
EXTRN	PyObject_Str:PROC
EXTRN	_PyArg_ParseTupleAndKeywords_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultibyteCodec_Encode DD imagerel MultibyteCodec_Encode
	DD	imagerel MultibyteCodec_Encode+641
	DD	imagerel $unwind$MultibyteCodec_Encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultibyteCodec_Encode DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_0CI@IEEIFIKA@couldn?8t?5convert?5the?5object?5to?5u@
CONST	SEGMENT
??_C@_0CI@IEEIFIKA@couldn?8t?5convert?5the?5object?5to?5u@ DB 'couldn''t '
	DB	'convert the object to unicode.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ENMONLGM@O?$HMz?3encode?$AA@
CONST	SEGMENT
??_C@_0L@ENMONLGM@O?$HMz?3encode?$AA@ DB 'O|z:encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT MultibyteCodec_Encode
_TEXT	SEGMENT
arg$ = 48
errors$ = 56
datalen$ = 64
data$ = 72
r$ = 80
errorcb$ = 88
ucvt$ = 96
state$ = 104
tv170 = 112
self$ = 144
args$ = 152
kwargs$ = 160
MultibyteCodec_Encode PROC				; COMDAT

; 558  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 559  :     MultibyteCodec_State state;
; 560  :     Py_UNICODE *data;
; 561  :     PyObject *errorcb, *r, *arg, *ucvt;
; 562  :     const char *errors = NULL;

  00016	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 563  :     Py_ssize_t datalen;
; 564  : 
; 565  :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|z:encode",
; 566  :                             codeckwarglist, &arg, &errors))

  0001f	48 8d 44 24 38	 lea	 rax, QWORD PTR errors$[rsp]
  00024	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00029	48 8d 44 24 30	 lea	 rax, QWORD PTR arg$[rsp]
  0002e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00033	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:codeckwarglist
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@ENMONLGM@O?$HMz?3encode?$AA@
  00041	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR kwargs$[rsp]
  00049	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00051	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00056	85 c0		 test	 eax, eax
  00058	75 07		 jne	 SHORT $LN36@MultibyteC

; 567  :         return NULL;

  0005a	33 c0		 xor	 eax, eax
  0005c	e9 18 02 00 00	 jmp	 $LN37@MultibyteC
$LN36@MultibyteC:

; 568  : 
; 569  :     if (PyUnicode_Check(arg))

  00061	48 8b 44 24 30	 mov	 rax, QWORD PTR arg$[rsp]
  00066	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00070	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00075	85 c0		 test	 eax, eax
  00077	74 0b		 je	 SHORT $LN35@MultibyteC

; 570  :         ucvt = NULL;

  00079	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR ucvt$[rsp], 0

; 571  :     else {

  00082	eb 66		 jmp	 SHORT $LN34@MultibyteC
$LN35@MultibyteC:

; 572  :         arg = ucvt = PyObject_Str(arg);

  00084	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  00089	e8 00 00 00 00	 call	 PyObject_Str
  0008e	48 89 44 24 60	 mov	 QWORD PTR ucvt$[rsp], rax
  00093	48 8b 44 24 60	 mov	 rax, QWORD PTR ucvt$[rsp]
  00098	48 89 44 24 30	 mov	 QWORD PTR arg$[rsp], rax

; 573  :         if (arg == NULL)

  0009d	48 83 7c 24 30
	00		 cmp	 QWORD PTR arg$[rsp], 0
  000a3	75 09		 jne	 SHORT $LN33@MultibyteC

; 574  :             return NULL;

  000a5	33 c0		 xor	 eax, eax
  000a7	e9 cd 01 00 00	 jmp	 $LN37@MultibyteC
  000ac	eb 3c		 jmp	 SHORT $LN32@MultibyteC
$LN33@MultibyteC:

; 575  :         else if (!PyUnicode_Check(arg)) {

  000ae	48 8b 44 24 30	 mov	 rax, QWORD PTR arg$[rsp]
  000b3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000bd	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000c2	85 c0		 test	 eax, eax
  000c4	75 24		 jne	 SHORT $LN31@MultibyteC

; 576  :             PyErr_SetString(PyExc_TypeError,
; 577  :                 "couldn't convert the object to unicode.");

  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@IEEIFIKA@couldn?8t?5convert?5the?5object?5to?5u@
  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d4	e8 00 00 00 00	 call	 PyErr_SetString

; 578  :             Py_DECREF(ucvt);

  000d9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ucvt$[rsp]
  000de	e8 00 00 00 00	 call	 _Py_DecRef

; 579  :             return NULL;

  000e3	33 c0		 xor	 eax, eax
  000e5	e9 8f 01 00 00	 jmp	 $LN37@MultibyteC
$LN31@MultibyteC:
$LN32@MultibyteC:
$LN34@MultibyteC:

; 580  :         }
; 581  :     }
; 582  : 
; 583  :     data = PyUnicode_AsUnicodeAndSize(arg, &datalen);

  000ea	48 8d 54 24 40	 lea	 rdx, QWORD PTR datalen$[rsp]
  000ef	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  000f4	e8 00 00 00 00	 call	 PyUnicode_AsUnicodeAndSize
  000f9	48 89 44 24 48	 mov	 QWORD PTR data$[rsp], rax

; 584  :     if (data == NULL) {

  000fe	48 83 7c 24 48
	00		 cmp	 QWORD PTR data$[rsp], 0
  00104	75 1f		 jne	 SHORT $LN30@MultibyteC
$LN29@MultibyteC:

; 585  :         Py_XDECREF(ucvt);

  00106	48 83 7c 24 60
	00		 cmp	 QWORD PTR ucvt$[rsp], 0
  0010c	74 0a		 je	 SHORT $LN26@MultibyteC
  0010e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ucvt$[rsp]
  00113	e8 00 00 00 00	 call	 _Py_DecRef
$LN26@MultibyteC:
  00118	33 c0		 xor	 eax, eax
  0011a	85 c0		 test	 eax, eax
  0011c	75 e8		 jne	 SHORT $LN29@MultibyteC

; 586  :         return NULL;

  0011e	33 c0		 xor	 eax, eax
  00120	e9 54 01 00 00	 jmp	 $LN37@MultibyteC
$LN30@MultibyteC:

; 587  :     }
; 588  : 
; 589  :     errorcb = internal_error_callback(errors);

  00125	48 8b 4c 24 38	 mov	 rcx, QWORD PTR errors$[rsp]
  0012a	e8 00 00 00 00	 call	 internal_error_callback
  0012f	48 89 44 24 58	 mov	 QWORD PTR errorcb$[rsp], rax

; 590  :     if (errorcb == NULL) {

  00134	48 83 7c 24 58
	00		 cmp	 QWORD PTR errorcb$[rsp], 0
  0013a	75 1f		 jne	 SHORT $LN25@MultibyteC
$LN24@MultibyteC:

; 591  :         Py_XDECREF(ucvt);

  0013c	48 83 7c 24 60
	00		 cmp	 QWORD PTR ucvt$[rsp], 0
  00142	74 0a		 je	 SHORT $LN21@MultibyteC
  00144	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ucvt$[rsp]
  00149	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@MultibyteC:
  0014e	33 c0		 xor	 eax, eax
  00150	85 c0		 test	 eax, eax
  00152	75 e8		 jne	 SHORT $LN24@MultibyteC

; 592  :         return NULL;

  00154	33 c0		 xor	 eax, eax
  00156	e9 1e 01 00 00	 jmp	 $LN37@MultibyteC
$LN25@MultibyteC:

; 593  :     }
; 594  : 
; 595  :     if (self->codec->encinit != NULL &&
; 596  :         self->codec->encinit(&state, self->codec->config) != 0)

  0015b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00163	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00167	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  0016c	74 37		 je	 SHORT $LN20@MultibyteC
  0016e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00176	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0017a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00182	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00186	48 89 4c 24 70	 mov	 QWORD PTR tv170[rsp], rcx
  0018b	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0018f	48 8d 4c 24 68	 lea	 rcx, QWORD PTR state$[rsp]
  00194	48 8b 44 24 70	 mov	 rax, QWORD PTR tv170[rsp]
  00199	ff 50 20	 call	 QWORD PTR [rax+32]
  0019c	85 c0		 test	 eax, eax
  0019e	74 05		 je	 SHORT $LN20@MultibyteC

; 597  :         goto errorexit;

  001a0	e9 92 00 00 00	 jmp	 $errorexit$21120
$LN20@MultibyteC:

; 598  :     r = multibytecodec_encode(self->codec, &state,
; 599  :                     (const Py_UNICODE **)&data, datalen, errorcb,
; 600  :                     MBENC_FLUSH | MBENC_RESET);

  001a5	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR [rsp+40], 3
  001ad	48 8b 44 24 58	 mov	 rax, QWORD PTR errorcb$[rsp]
  001b2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b7	4c 8b 4c 24 40	 mov	 r9, QWORD PTR datalen$[rsp]
  001bc	4c 8d 44 24 48	 lea	 r8, QWORD PTR data$[rsp]
  001c1	48 8d 54 24 68	 lea	 rdx, QWORD PTR state$[rsp]
  001c6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ce	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  001d2	e8 00 00 00 00	 call	 multibytecodec_encode
  001d7	48 89 44 24 50	 mov	 QWORD PTR r$[rsp], rax

; 601  :     if (r == NULL)

  001dc	48 83 7c 24 50
	00		 cmp	 QWORD PTR r$[rsp], 0
  001e2	75 02		 jne	 SHORT $LN19@MultibyteC

; 602  :         goto errorexit;

  001e4	eb 51		 jmp	 SHORT $errorexit$21120
$LN19@MultibyteC:
$LN18@MultibyteC:

; 603  : 
; 604  :     ERROR_DECREF(errorcb);

  001e6	48 83 7c 24 58
	00		 cmp	 QWORD PTR errorcb$[rsp], 0
  001ec	74 1a		 je	 SHORT $LN15@MultibyteC
  001ee	48 83 7c 24 58
	01		 cmp	 QWORD PTR errorcb$[rsp], 1
  001f4	72 08		 jb	 SHORT $LN14@MultibyteC
  001f6	48 83 7c 24 58
	03		 cmp	 QWORD PTR errorcb$[rsp], 3
  001fc	76 0a		 jbe	 SHORT $LN15@MultibyteC
$LN14@MultibyteC:
  001fe	48 8b 4c 24 58	 mov	 rcx, QWORD PTR errorcb$[rsp]
  00203	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@MultibyteC:
  00208	33 c0		 xor	 eax, eax
  0020a	85 c0		 test	 eax, eax
  0020c	75 d8		 jne	 SHORT $LN18@MultibyteC
$LN13@MultibyteC:

; 605  :     Py_XDECREF(ucvt);

  0020e	48 83 7c 24 60
	00		 cmp	 QWORD PTR ucvt$[rsp], 0
  00214	74 0a		 je	 SHORT $LN10@MultibyteC
  00216	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ucvt$[rsp]
  0021b	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@MultibyteC:
  00220	33 c0		 xor	 eax, eax
  00222	85 c0		 test	 eax, eax
  00224	75 e8		 jne	 SHORT $LN13@MultibyteC

; 606  :     return make_tuple(r, datalen);

  00226	48 8b 54 24 40	 mov	 rdx, QWORD PTR datalen$[rsp]
  0022b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$[rsp]
  00230	e8 00 00 00 00	 call	 make_tuple
  00235	eb 42		 jmp	 SHORT $LN37@MultibyteC
$errorexit$21120:
$LN9@MultibyteC:

; 607  : 
; 608  : errorexit:
; 609  :     ERROR_DECREF(errorcb);

  00237	48 83 7c 24 58
	00		 cmp	 QWORD PTR errorcb$[rsp], 0
  0023d	74 1a		 je	 SHORT $LN6@MultibyteC
  0023f	48 83 7c 24 58
	01		 cmp	 QWORD PTR errorcb$[rsp], 1
  00245	72 08		 jb	 SHORT $LN5@MultibyteC
  00247	48 83 7c 24 58
	03		 cmp	 QWORD PTR errorcb$[rsp], 3
  0024d	76 0a		 jbe	 SHORT $LN6@MultibyteC
$LN5@MultibyteC:
  0024f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR errorcb$[rsp]
  00254	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@MultibyteC:
  00259	33 c0		 xor	 eax, eax
  0025b	85 c0		 test	 eax, eax
  0025d	75 d8		 jne	 SHORT $LN9@MultibyteC
$LN4@MultibyteC:

; 610  :     Py_XDECREF(ucvt);

  0025f	48 83 7c 24 60
	00		 cmp	 QWORD PTR ucvt$[rsp], 0
  00265	74 0a		 je	 SHORT $LN1@MultibyteC
  00267	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ucvt$[rsp]
  0026c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@MultibyteC:
  00271	33 c0		 xor	 eax, eax
  00273	85 c0		 test	 eax, eax
  00275	75 e8		 jne	 SHORT $LN4@MultibyteC

; 611  :     return NULL;

  00277	33 c0		 xor	 eax, eax
$LN37@MultibyteC:

; 612  : }

  00279	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00280	c3		 ret	 0
MultibyteCodec_Encode ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_tuple DD imagerel make_tuple
	DD	imagerel make_tuple+138
	DD	imagerel $unwind$make_tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_tuple DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT make_tuple
_TEXT	SEGMENT
w$ = 32
v$ = 40
object$ = 64
len$ = 72
make_tuple PROC						; COMDAT

; 55   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 56   :     PyObject *v, *w;
; 57   : 
; 58   :     if (object == NULL)

  0000e	48 83 7c 24 40
	00		 cmp	 QWORD PTR object$[rsp], 0
  00014	75 04		 jne	 SHORT $LN3@make_tuple

; 59   :         return NULL;

  00016	33 c0		 xor	 eax, eax
  00018	eb 6b		 jmp	 SHORT $LN4@make_tuple
$LN3@make_tuple:

; 60   : 
; 61   :     v = PyTuple_New(2);

  0001a	b9 02 00 00 00	 mov	 ecx, 2
  0001f	e8 00 00 00 00	 call	 PyTuple_New
  00024	48 89 44 24 28	 mov	 QWORD PTR v$[rsp], rax

; 62   :     if (v == NULL) {

  00029	48 83 7c 24 28
	00		 cmp	 QWORD PTR v$[rsp], 0
  0002f	75 0e		 jne	 SHORT $LN2@make_tuple

; 63   :         Py_DECREF(object);

  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR object$[rsp]
  00036	e8 00 00 00 00	 call	 _Py_DecRef

; 64   :         return NULL;

  0003b	33 c0		 xor	 eax, eax
  0003d	eb 46		 jmp	 SHORT $LN4@make_tuple
$LN2@make_tuple:

; 65   :     }
; 66   :     PyTuple_SET_ITEM(v, 0, object);

  0003f	48 8b 44 24 28	 mov	 rax, QWORD PTR v$[rsp]
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR object$[rsp]
  00049	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 67   : 
; 68   :     w = PyLong_FromSsize_t(len);

  0004d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR len$[rsp]
  00052	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00057	48 89 44 24 20	 mov	 QWORD PTR w$[rsp], rax

; 69   :     if (w == NULL) {

  0005c	48 83 7c 24 20
	00		 cmp	 QWORD PTR w$[rsp], 0
  00062	75 0e		 jne	 SHORT $LN1@make_tuple

; 70   :         Py_DECREF(v);

  00064	48 8b 4c 24 28	 mov	 rcx, QWORD PTR v$[rsp]
  00069	e8 00 00 00 00	 call	 _Py_DecRef

; 71   :         return NULL;

  0006e	33 c0		 xor	 eax, eax
  00070	eb 13		 jmp	 SHORT $LN4@make_tuple
$LN1@make_tuple:

; 72   :     }
; 73   :     PyTuple_SET_ITEM(v, 1, w);

  00072	48 8b 44 24 28	 mov	 rax, QWORD PTR v$[rsp]
  00077	48 8b 4c 24 20	 mov	 rcx, QWORD PTR w$[rsp]
  0007c	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 74   : 
; 75   :     return v;

  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR v$[rsp]
$LN4@make_tuple:

; 76   : }

  00085	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00089	c3		 ret	 0
make_tuple ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DE@DHDFIPLJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@ ; `string'
EXTRN	_PyBytes_Resize:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$multibytecodec_encode DD imagerel multibytecodec_encode
	DD	imagerel multibytecodec_encode+1070
	DD	imagerel $unwind$multibytecodec_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$multibytecodec_encode DD 021b01H
	DD	015011bH
xdata	ENDS
;	COMDAT ??_C@_1DE@DHDFIPLJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@DHDFIPLJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'b', 00H, 'u', 00H, 'f', 00H, '.', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
CONST	SEGMENT
??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'c', 00H, 'j', 00H, 'k'
	DB	00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 's', 00H
	DB	'\', 00H, 'm', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'y', 00H, 't', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'd', 00H
	DB	'e', 00H, 'c', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT multibytecodec_encode
_TEXT	SEGMENT
buf$ = 64
r$ = 120
finalsize$ = 128
outleft$21024 = 136
inleft$21023 = 144
outleft$21038 = 152
codec$ = 176
state$ = 184
data$ = 192
datalen$ = 200
errors$ = 208
flags$ = 216
multibytecodec_encode PROC				; COMDAT

; 484  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 485  :     MultibyteEncodeBuffer buf;
; 486  :     Py_ssize_t finalsize, r = 0;

  0001b	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR r$[rsp], 0

; 487  : 
; 488  :     if (datalen == 0 && !(flags & MBENC_RESET))

  00024	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR datalen$[rsp], 0
  0002d	75 1c		 jne	 SHORT $LN31@multibytec
  0002f	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00036	83 e0 02	 and	 eax, 2
  00039	85 c0		 test	 eax, eax
  0003b	75 0e		 jne	 SHORT $LN31@multibytec

; 489  :         return PyBytes_FromStringAndSize(NULL, 0);

  0003d	33 d2		 xor	 edx, edx
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00046	e9 db 03 00 00	 jmp	 $LN32@multibytec
$LN31@multibytec:

; 490  : 
; 491  :     buf.excobj = NULL;

  0004b	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR buf$[rsp+40], 0

; 492  :     buf.outobj = NULL;

  00054	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR buf$[rsp+48], 0

; 493  :     buf.inbuf = buf.inbuf_top = *data;

  0005d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00065	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00068	48 89 44 24 48	 mov	 QWORD PTR buf$[rsp+8], rax
  0006d	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp+8]
  00072	48 89 44 24 40	 mov	 QWORD PTR buf$[rsp], rax

; 494  :     buf.inbuf_end = buf.inbuf_top + datalen;

  00077	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp+8]
  0007c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR datalen$[rsp]
  00084	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00088	48 89 44 24 50	 mov	 QWORD PTR buf$[rsp+16], rax

; 495  : 
; 496  :     if (datalen > (PY_SSIZE_T_MAX - 16) / 2) {

  0008d	48 b8 f7 ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387895 ; 3ffffffffffffff7H
  00097	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR datalen$[rsp], rax
  0009f	7e 0a		 jle	 SHORT $LN30@multibytec

; 497  :         PyErr_NoMemory();

  000a1	e8 00 00 00 00	 call	 PyErr_NoMemory

; 498  :         goto errorexit;

  000a6	e9 49 03 00 00	 jmp	 $errorexit$21008
$LN30@multibytec:

; 499  :     }
; 500  : 
; 501  :     buf.outobj = PyBytes_FromStringAndSize(NULL, datalen * 2 + 16);

  000ab	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR datalen$[rsp]
  000b3	48 8d 44 00 10	 lea	 rax, QWORD PTR [rax+rax+16]
  000b8	48 8b d0	 mov	 rdx, rax
  000bb	33 c9		 xor	 ecx, ecx
  000bd	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000c2	48 89 44 24 70	 mov	 QWORD PTR buf$[rsp+48], rax

; 502  :     if (buf.outobj == NULL)

  000c7	48 83 7c 24 70
	00		 cmp	 QWORD PTR buf$[rsp+48], 0
  000cd	75 05		 jne	 SHORT $LN29@multibytec

; 503  :         goto errorexit;

  000cf	e9 20 03 00 00	 jmp	 $errorexit$21008
$LN29@multibytec:

; 504  :     buf.outbuf = (unsigned char *)PyBytes_AS_STRING(buf.outobj);

  000d4	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  000d9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000dd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e3	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000e8	85 c0		 test	 eax, eax
  000ea	75 1c		 jne	 SHORT $LN34@multibytec
  000ec	41 b8 f8 01 00
	00		 mov	 r8d, 504		; 000001f8H
  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@DHDFIPLJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00100	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00106	33 c0		 xor	 eax, eax
$LN34@multibytec:
  00108	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  0010d	48 83 c0 78	 add	 rax, 120		; 00000078H
  00111	48 89 44 24 58	 mov	 QWORD PTR buf$[rsp+24], rax

; 505  :     buf.outbuf_end = buf.outbuf + PyBytes_GET_SIZE(buf.outobj);

  00116	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  0011b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0011f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00125	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0012a	85 c0		 test	 eax, eax
  0012c	75 1c		 jne	 SHORT $LN35@multibytec
  0012e	41 b8 f9 01 00
	00		 mov	 r8d, 505		; 000001f9H
  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@DHDFIPLJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00148	33 c0		 xor	 eax, eax
$LN35@multibytec:
  0014a	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  0014f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00153	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buf$[rsp+24]
  00158	48 03 c8	 add	 rcx, rax
  0015b	48 8b c1	 mov	 rax, rcx
  0015e	48 89 44 24 60	 mov	 QWORD PTR buf$[rsp+32], rax
$LN28@multibytec:

; 506  : 
; 507  :     while (buf.inbuf < buf.inbuf_end) {

  00163	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp+16]
  00168	48 39 44 24 40	 cmp	 QWORD PTR buf$[rsp], rax
  0016d	0f 83 ee 00 00
	00		 jae	 $LN27@multibytec

; 508  :         Py_ssize_t inleft, outleft;
; 509  : 
; 510  :         /* we don't reuse inleft and outleft here.
; 511  :          * error callbacks can relocate the cursor anywhere on buffer*/
; 512  :         inleft = (Py_ssize_t)(buf.inbuf_end - buf.inbuf);

  00173	48 8b 44 24 40	 mov	 rax, QWORD PTR buf$[rsp]
  00178	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp+16]
  0017d	48 2b c8	 sub	 rcx, rax
  00180	48 8b c1	 mov	 rax, rcx
  00183	48 d1 f8	 sar	 rax, 1
  00186	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR inleft$21023[rsp], rax

; 513  :         outleft = (Py_ssize_t)(buf.outbuf_end - buf.outbuf);

  0018e	48 8b 44 24 58	 mov	 rax, QWORD PTR buf$[rsp+24]
  00193	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp+32]
  00198	48 2b c8	 sub	 rcx, rax
  0019b	48 8b c1	 mov	 rax, rcx
  0019e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR outleft$21024[rsp], rax

; 514  :         r = codec->encode(state, codec->config, &buf.inbuf, inleft,
; 515  :                           &buf.outbuf, outleft, flags);

  001a6	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  001ad	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  001b1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR outleft$21024[rsp]
  001b9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001be	48 8d 44 24 58	 lea	 rax, QWORD PTR buf$[rsp+24]
  001c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c8	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR inleft$21023[rsp]
  001d0	4c 8d 44 24 40	 lea	 r8, QWORD PTR buf$[rsp]
  001d5	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR codec$[rsp]
  001dd	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  001e1	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR state$[rsp]
  001e9	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR codec$[rsp]
  001f1	ff 50 18	 call	 QWORD PTR [rax+24]
  001f4	48 89 44 24 78	 mov	 QWORD PTR r$[rsp], rax

; 516  :         if ((r == 0) || (r == MBERR_TOOFEW && !(flags & MBENC_FLUSH)))

  001f9	48 83 7c 24 78
	00		 cmp	 QWORD PTR r$[rsp], 0
  001ff	74 16		 je	 SHORT $LN25@multibytec
  00201	48 83 7c 24 78
	fe		 cmp	 QWORD PTR r$[rsp], -2
  00207	75 12		 jne	 SHORT $LN26@multibytec
  00209	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00210	83 e0 01	 and	 eax, 1
  00213	85 c0		 test	 eax, eax
  00215	75 04		 jne	 SHORT $LN26@multibytec
$LN25@multibytec:

; 517  :             break;

  00217	eb 48		 jmp	 SHORT $LN27@multibytec
  00219	eb 41		 jmp	 SHORT $LN24@multibytec
$LN26@multibytec:

; 518  :         else if (multibytecodec_encerror(codec, state, &buf, errors,r))

  0021b	48 8b 44 24 78	 mov	 rax, QWORD PTR r$[rsp]
  00220	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00225	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR errors$[rsp]
  0022d	4c 8d 44 24 40	 lea	 r8, QWORD PTR buf$[rsp]
  00232	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR state$[rsp]
  0023a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR codec$[rsp]
  00242	e8 00 00 00 00	 call	 multibytecodec_encerror
  00247	85 c0		 test	 eax, eax
  00249	74 07		 je	 SHORT $LN23@multibytec

; 519  :             goto errorexit;

  0024b	e9 a4 01 00 00	 jmp	 $errorexit$21008
  00250	eb 0a		 jmp	 SHORT $LN22@multibytec
$LN23@multibytec:

; 520  :         else if (r == MBERR_TOOFEW)

  00252	48 83 7c 24 78
	fe		 cmp	 QWORD PTR r$[rsp], -2
  00258	75 02		 jne	 SHORT $LN21@multibytec

; 521  :             break;

  0025a	eb 05		 jmp	 SHORT $LN27@multibytec
$LN21@multibytec:
$LN22@multibytec:
$LN24@multibytec:

; 522  :     }

  0025c	e9 02 ff ff ff	 jmp	 $LN28@multibytec
$LN27@multibytec:

; 523  : 
; 524  :     if (codec->encreset != NULL && (flags & MBENC_RESET))

  00261	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR codec$[rsp]
  00269	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  0026e	0f 84 a1 00 00
	00		 je	 $LN20@multibytec
  00274	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  0027b	83 e0 02	 and	 eax, 2
  0027e	85 c0		 test	 eax, eax
  00280	0f 84 8f 00 00
	00		 je	 $LN20@multibytec
$LN19@multibytec:

; 525  :         for (;;) {
; 526  :             Py_ssize_t outleft;
; 527  : 
; 528  :             outleft = (Py_ssize_t)(buf.outbuf_end - buf.outbuf);

  00286	48 8b 44 24 58	 mov	 rax, QWORD PTR buf$[rsp+24]
  0028b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp+32]
  00290	48 2b c8	 sub	 rcx, rax
  00293	48 8b c1	 mov	 rax, rcx
  00296	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR outleft$21038[rsp], rax

; 529  :             r = codec->encreset(state, codec->config, &buf.outbuf,
; 530  :                                 outleft);

  0029e	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR outleft$21038[rsp]
  002a6	4c 8d 44 24 58	 lea	 r8, QWORD PTR buf$[rsp+24]
  002ab	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR codec$[rsp]
  002b3	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  002b7	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR state$[rsp]
  002bf	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR codec$[rsp]
  002c7	ff 50 28	 call	 QWORD PTR [rax+40]
  002ca	48 89 44 24 78	 mov	 QWORD PTR r$[rsp], rax

; 531  :             if (r == 0)

  002cf	48 83 7c 24 78
	00		 cmp	 QWORD PTR r$[rsp], 0
  002d5	75 04		 jne	 SHORT $LN17@multibytec

; 532  :                 break;

  002d7	eb 3c		 jmp	 SHORT $LN18@multibytec

; 533  :             else if (multibytecodec_encerror(codec, state,

  002d9	eb 35		 jmp	 SHORT $LN16@multibytec
$LN17@multibytec:

; 534  :                                              &buf, errors, r))

  002db	48 8b 44 24 78	 mov	 rax, QWORD PTR r$[rsp]
  002e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e5	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR errors$[rsp]
  002ed	4c 8d 44 24 40	 lea	 r8, QWORD PTR buf$[rsp]
  002f2	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR state$[rsp]
  002fa	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR codec$[rsp]
  00302	e8 00 00 00 00	 call	 multibytecodec_encerror
  00307	85 c0		 test	 eax, eax
  00309	74 05		 je	 SHORT $LN15@multibytec

; 535  :                 goto errorexit;

  0030b	e9 e4 00 00 00	 jmp	 $errorexit$21008
$LN15@multibytec:
$LN16@multibytec:

; 536  :         }

  00310	e9 71 ff ff ff	 jmp	 $LN19@multibytec
$LN18@multibytec:
$LN20@multibytec:

; 537  : 
; 538  :     finalsize = (Py_ssize_t)((char *)buf.outbuf -
; 539  :                              PyBytes_AS_STRING(buf.outobj));

  00315	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  0031a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0031e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00324	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00329	85 c0		 test	 eax, eax
  0032b	75 1c		 jne	 SHORT $LN36@multibytec
  0032d	41 b8 1b 02 00
	00		 mov	 r8d, 539		; 0000021bH
  00333	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  0033a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@DHDFIPLJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00341	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00347	33 c0		 xor	 eax, eax
$LN36@multibytec:
  00349	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  0034e	48 83 c0 78	 add	 rax, 120		; 00000078H
  00352	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buf$[rsp+24]
  00357	48 2b c8	 sub	 rcx, rax
  0035a	48 8b c1	 mov	 rax, rcx
  0035d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR finalsize$[rsp], rax

; 540  : 
; 541  :     if (finalsize != PyBytes_GET_SIZE(buf.outobj))

  00365	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  0036a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0036e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00374	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00379	85 c0		 test	 eax, eax
  0037b	75 1c		 jne	 SHORT $LN37@multibytec
  0037d	41 b8 1d 02 00
	00		 mov	 r8d, 541		; 0000021dH
  00383	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  0038a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@DHDFIPLJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00391	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00397	33 c0		 xor	 eax, eax
$LN37@multibytec:
  00399	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  0039e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  003a2	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR finalsize$[rsp], rax
  003aa	74 19		 je	 SHORT $LN14@multibytec

; 542  :         if (_PyBytes_Resize(&buf.outobj, finalsize) == -1)

  003ac	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR finalsize$[rsp]
  003b4	48 8d 4c 24 70	 lea	 rcx, QWORD PTR buf$[rsp+48]
  003b9	e8 00 00 00 00	 call	 _PyBytes_Resize
  003be	83 f8 ff	 cmp	 eax, -1
  003c1	75 02		 jne	 SHORT $LN13@multibytec

; 543  :             goto errorexit;

  003c3	eb 2f		 jmp	 SHORT $errorexit$21008
$LN13@multibytec:
$LN14@multibytec:

; 544  : 
; 545  :     *data = buf.inbuf;

  003c5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  003cd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  003d2	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN12@multibytec:

; 546  :     Py_XDECREF(buf.excobj);

  003d5	48 83 7c 24 68
	00		 cmp	 QWORD PTR buf$[rsp+40], 0
  003db	74 0a		 je	 SHORT $LN9@multibytec
  003dd	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp+40]
  003e2	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@multibytec:
  003e7	33 c0		 xor	 eax, eax
  003e9	85 c0		 test	 eax, eax
  003eb	75 e8		 jne	 SHORT $LN12@multibytec

; 547  :     return buf.outobj;

  003ed	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  003f2	eb 32		 jmp	 SHORT $LN32@multibytec
$errorexit$21008:
$LN8@multibytec:

; 548  : 
; 549  : errorexit:
; 550  :     Py_XDECREF(buf.excobj);

  003f4	48 83 7c 24 68
	00		 cmp	 QWORD PTR buf$[rsp+40], 0
  003fa	74 0a		 je	 SHORT $LN5@multibytec
  003fc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp+40]
  00401	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@multibytec:
  00406	33 c0		 xor	 eax, eax
  00408	85 c0		 test	 eax, eax
  0040a	75 e8		 jne	 SHORT $LN8@multibytec
$LN4@multibytec:

; 551  :     Py_XDECREF(buf.outobj);

  0040c	48 83 7c 24 70
	00		 cmp	 QWORD PTR buf$[rsp+48], 0
  00412	74 0a		 je	 SHORT $LN1@multibytec
  00414	48 8b 4c 24 70	 mov	 rcx, QWORD PTR buf$[rsp+48]
  00419	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@multibytec:
  0041e	33 c0		 xor	 eax, eax
  00420	85 c0		 test	 eax, eax
  00422	75 e8		 jne	 SHORT $LN4@multibytec

; 552  :     return NULL;

  00424	33 c0		 xor	 eax, eax
$LN32@multibytec:

; 553  : }

  00426	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0042d	c3		 ret	 0
multibytecodec_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@NELAFELL@position?5?$CFzd?5from?5error?5handler?5@ ; `string'
PUBLIC	??_C@_1CM@NOCPDCHC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EA@LIFMAMJL@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@NBOHGAC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DE@PKHNAIAA@encoding?5error?5handler?5must?5retu@ ; `string'
PUBLIC	??_C@_0BG@NBDJHAFE@unknown?5runtime?5error?$AA@	; `string'
PUBLIC	??_C@_0BF@DBHHINF@internal?5codec?5error?$AA@	; `string'
PUBLIC	??_C@_0BO@NPKGELOO@incomplete?5multibyte?5sequence?$AA@ ; `string'
PUBLIC	??_C@_0BL@MMCIDIKH@illegal?5multibyte?5sequence?$AA@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_IndexError:QWORD
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	memcpy:PROC
EXTRN	PyUnicode_AsUnicode:PROC
EXTRN	PyCodec_StrictErrors:PROC
EXTRN	PyUnicodeEncodeError_SetReason:PROC
EXTRN	PyUnicodeEncodeError_SetEnd:PROC
EXTRN	PyUnicodeEncodeError_SetStart:PROC
EXTRN	PyUnicodeEncodeError_Create:PROC
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$multibytecodec_encerror DD imagerel multibytecodec_encerror
	DD	imagerel multibytecodec_encerror+2344
	DD	imagerel $unwind$multibytecodec_encerror
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$multibytecodec_encerror DD 021b01H
	DD	01d011bH
xdata	ENDS
;	COMDAT ??_C@_0CO@NELAFELL@position?5?$CFzd?5from?5error?5handler?5@
CONST	SEGMENT
??_C@_0CO@NELAFELL@position?5?$CFzd?5from?5error?5handler?5@ DB 'position'
	DB	' %zd from error handler out of bounds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NOCPDCHC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@NOCPDCHC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'r', 00H, 'e', 00H, 't', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LIFMAMJL@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@LIFMAMJL@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt?$AAr?$AA?$AA@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'A', 00H, 'S', 00H, 'C', 00H
	DB	'I', 00H, 'I', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, '*', 00H, ')', 00H, '(', 00H, 't', 00H
	DB	'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 'w', 00H, 's', 00H, 't', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NBOHGAC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@NBOHGAC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 't', 00H, 'o', 00H, 'b', 00H, 'j', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PKHNAIAA@encoding?5error?5handler?5must?5retu@
CONST	SEGMENT
??_C@_0DE@PKHNAIAA@encoding?5error?5handler?5must?5retu@ DB 'encoding err'
	DB	'or handler must return (str, int) tuple', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NBDJHAFE@unknown?5runtime?5error?$AA@
CONST	SEGMENT
??_C@_0BG@NBDJHAFE@unknown?5runtime?5error?$AA@ DB 'unknown runtime error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DBHHINF@internal?5codec?5error?$AA@
CONST	SEGMENT
??_C@_0BF@DBHHINF@internal?5codec?5error?$AA@ DB 'internal codec error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NPKGELOO@incomplete?5multibyte?5sequence?$AA@
CONST	SEGMENT
??_C@_0BO@NPKGELOO@incomplete?5multibyte?5sequence?$AA@ DB 'incomplete mu'
	DB	'ltibyte sequence', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MMCIDIKH@illegal?5multibyte?5sequence?$AA@
CONST	SEGMENT
??_C@_0BL@MMCIDIKH@illegal?5multibyte?5sequence?$AA@ DB 'illegal multibyt'
	DB	'e sequence', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT multibytecodec_encerror
_TEXT	SEGMENT
esize$ = 64
newpos$ = 72
reason$ = 80
end$ = 88
start$ = 96
retstrsize$ = 104
tobj$ = 112
retobj$ = 120
retstr$ = 128
inbuf$20774 = 136
replchar$20773 = 144
r$20775 = 152
outleft$20779 = 160
uraw$20818 = 168
tv65 = 176
tv238 = 184
tv261 = 192
tv281 = 200
tv279 = 208
codec$ = 240
state$ = 248
buf$ = 256
errors$ = 264
e$ = 272
multibytecodec_encerror PROC				; COMDAT

; 233  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H

; 234  :     PyObject *retobj = NULL, *retstr = NULL, *tobj;

  0001b	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR retobj$[rsp], 0
  00024	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retstr$[rsp], 0

; 235  :     Py_ssize_t retstrsize, newpos;
; 236  :     Py_ssize_t esize, start, end;
; 237  :     const char *reason;
; 238  : 
; 239  :     if (e > 0) {

  00030	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR e$[rsp], 0
  00039	7e 1e		 jle	 SHORT $LN50@multibytec@2

; 240  :         reason = "illegal multibyte sequence";

  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BL@MMCIDIKH@illegal?5multibyte?5sequence?$AA@
  00042	48 89 44 24 50	 mov	 QWORD PTR reason$[rsp], rax

; 241  :         esize = e;

  00047	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  0004f	48 89 44 24 40	 mov	 QWORD PTR esize$[rsp], rax

; 242  :     }
; 243  :     else {

  00054	e9 c9 00 00 00	 jmp	 $LN49@multibytec@2
$LN50@multibytec@2:

; 244  :         switch (e) {

  00059	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00061	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv65[rsp], rax
  00069	48 83 bc 24 b0
	00 00 00 fd	 cmp	 QWORD PTR tv65[rsp], -3
  00072	74 74		 je	 SHORT $LN42@multibytec@2
  00074	48 83 bc 24 b0
	00 00 00 fe	 cmp	 QWORD PTR tv65[rsp], -2
  0007d	74 39		 je	 SHORT $LN43@multibytec@2
  0007f	48 83 bc 24 b0
	00 00 00 ff	 cmp	 QWORD PTR tv65[rsp], -1
  00088	74 02		 je	 SHORT $LN46@multibytec@2
  0008a	eb 79		 jmp	 SHORT $LN41@multibytec@2
$LN46@multibytec@2:

; 245  :         case MBERR_TOOSMALL:
; 246  :             REQUIRE_ENCODEBUFFER(buf, -1);

  0008c	33 c0		 xor	 eax, eax
  0008e	83 f8 01	 cmp	 eax, 1
  00091	74 1e		 je	 SHORT $LN45@multibytec@2
  00093	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0009a	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  000a2	e8 00 00 00 00	 call	 expand_encodebuffer
  000a7	83 f8 ff	 cmp	 eax, -1
  000aa	75 05		 jne	 SHORT $LN44@multibytec@2
  000ac	e9 34 08 00 00	 jmp	 $errorexit$20763
$LN44@multibytec@2:
$LN45@multibytec@2:

; 247  :             return 0; /* retry it */

  000b1	33 c0		 xor	 eax, eax
  000b3	e9 68 08 00 00	 jmp	 $LN51@multibytec@2
$LN43@multibytec@2:

; 248  :         case MBERR_TOOFEW:
; 249  :             reason = "incomplete multibyte sequence";

  000b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@NPKGELOO@incomplete?5multibyte?5sequence?$AA@
  000bf	48 89 44 24 50	 mov	 QWORD PTR reason$[rsp], rax

; 250  :             esize = (Py_ssize_t)(buf->inbuf_end - buf->inbuf);

  000c4	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  000cc	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  000d4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d7	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000db	48 2b c1	 sub	 rax, rcx
  000de	48 d1 f8	 sar	 rax, 1
  000e1	48 89 44 24 40	 mov	 QWORD PTR esize$[rsp], rax

; 251  :             break;

  000e6	eb 3a		 jmp	 SHORT $LN47@multibytec@2
$LN42@multibytec@2:

; 252  :         case MBERR_INTERNAL:
; 253  :             PyErr_SetString(PyExc_RuntimeError,
; 254  :                             "internal codec error");

  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@DBHHINF@internal?5codec?5error?$AA@
  000ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000f6	e8 00 00 00 00	 call	 PyErr_SetString

; 255  :             return -1;

  000fb	b8 ff ff ff ff	 mov	 eax, -1
  00100	e9 1b 08 00 00	 jmp	 $LN51@multibytec@2
$LN41@multibytec@2:

; 256  :         default:
; 257  :             PyErr_SetString(PyExc_RuntimeError,
; 258  :                             "unknown runtime error");

  00105	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@NBDJHAFE@unknown?5runtime?5error?$AA@
  0010c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00113	e8 00 00 00 00	 call	 PyErr_SetString

; 259  :             return -1;

  00118	b8 ff ff ff ff	 mov	 eax, -1
  0011d	e9 fe 07 00 00	 jmp	 $LN51@multibytec@2
$LN47@multibytec@2:
$LN49@multibytec@2:

; 260  :         }
; 261  :     }
; 262  : 
; 263  :     if (errors == ERROR_REPLACE) {

  00122	48 83 bc 24 08
	01 00 00 03	 cmp	 QWORD PTR errors$[rsp], 3
  0012b	0f 85 4d 01 00
	00		 jne	 $LN40@multibytec@2

; 264  :         const Py_UNICODE replchar = '?', *inbuf = &replchar;

  00131	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  00136	66 89 84 24 90
	00 00 00	 mov	 WORD PTR replchar$20773[rsp], ax
  0013e	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR replchar$20773[rsp]
  00146	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR inbuf$20774[rsp], rax
$LN39@multibytec@2:

; 265  :         Py_ssize_t r;
; 266  : 
; 267  :         for (;;) {
; 268  :             Py_ssize_t outleft;
; 269  : 
; 270  :             outleft = (Py_ssize_t)(buf->outbuf_end - buf->outbuf);

  0014e	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00156	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0015e	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00162	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00166	48 2b c1	 sub	 rax, rcx
  00169	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR outleft$20779[rsp], rax

; 271  :             r = codec->encode(state, codec->config, &inbuf, 1,
; 272  :                               &buf->outbuf, outleft, 0);

  00171	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00179	48 83 c0 18	 add	 rax, 24
  0017d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00185	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR outleft$20779[rsp]
  0018d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00192	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00197	41 b9 01 00 00
	00		 mov	 r9d, 1
  0019d	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR inbuf$20774[rsp]
  001a5	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR codec$[rsp]
  001ad	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  001b1	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR state$[rsp]
  001b9	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR codec$[rsp]
  001c1	ff 50 18	 call	 QWORD PTR [rax+24]
  001c4	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR r$20775[rsp], rax

; 273  :             if (r == MBERR_TOOSMALL) {

  001cc	48 83 bc 24 98
	00 00 00 ff	 cmp	 QWORD PTR r$20775[rsp], -1
  001d5	75 2c		 jne	 SHORT $LN37@multibytec@2

; 274  :                 REQUIRE_ENCODEBUFFER(buf, -1);

  001d7	33 c0		 xor	 eax, eax
  001d9	83 f8 01	 cmp	 eax, 1
  001dc	74 1e		 je	 SHORT $LN36@multibytec@2
  001de	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  001e5	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  001ed	e8 00 00 00 00	 call	 expand_encodebuffer
  001f2	83 f8 ff	 cmp	 eax, -1
  001f5	75 05		 jne	 SHORT $LN35@multibytec@2
  001f7	e9 e9 06 00 00	 jmp	 $errorexit$20763
$LN35@multibytec@2:
$LN36@multibytec@2:

; 275  :                 continue;

  001fc	e9 4d ff ff ff	 jmp	 $LN39@multibytec@2

; 276  :             }
; 277  :             else

  00201	eb 02		 jmp	 SHORT $LN34@multibytec@2
$LN37@multibytec@2:

; 278  :                 break;

  00203	eb 05		 jmp	 SHORT $LN38@multibytec@2
$LN34@multibytec@2:

; 279  :         }

  00205	e9 44 ff ff ff	 jmp	 $LN39@multibytec@2
$LN38@multibytec@2:

; 280  : 
; 281  :         if (r != 0) {

  0020a	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR r$20775[rsp], 0
  00213	74 69		 je	 SHORT $LN33@multibytec@2

; 282  :             REQUIRE_ENCODEBUFFER(buf, 1);

  00215	33 c0		 xor	 eax, eax
  00217	85 c0		 test	 eax, eax
  00219	75 1d		 jne	 SHORT $LN31@multibytec@2
  0021b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00223	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00227	48 ff c0	 inc	 rax
  0022a	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00232	48 3b 41 20	 cmp	 rax, QWORD PTR [rcx+32]
  00236	76 1c		 jbe	 SHORT $LN32@multibytec@2
$LN31@multibytec@2:
  00238	ba 01 00 00 00	 mov	 edx, 1
  0023d	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00245	e8 00 00 00 00	 call	 expand_encodebuffer
  0024a	83 f8 ff	 cmp	 eax, -1
  0024d	75 05		 jne	 SHORT $LN30@multibytec@2
  0024f	e9 91 06 00 00	 jmp	 $errorexit$20763
$LN30@multibytec@2:
$LN32@multibytec@2:

; 283  :             *buf->outbuf++ = '?';

  00254	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0025c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00260	c6 00 3f	 mov	 BYTE PTR [rax], 63	; 0000003fH
  00263	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0026b	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0026f	48 ff c0	 inc	 rax
  00272	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0027a	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN33@multibytec@2:
$LN40@multibytec@2:

; 284  :         }
; 285  :     }
; 286  :     if (errors == ERROR_IGNORE || errors == ERROR_REPLACE) {

  0027e	48 83 bc 24 08
	01 00 00 02	 cmp	 QWORD PTR errors$[rsp], 2
  00287	74 0b		 je	 SHORT $LN28@multibytec@2
  00289	48 83 bc 24 08
	01 00 00 03	 cmp	 QWORD PTR errors$[rsp], 3
  00292	75 26		 jne	 SHORT $LN29@multibytec@2
$LN28@multibytec@2:

; 287  :         buf->inbuf += esize;

  00294	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0029c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0029f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR esize$[rsp]
  002a4	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  002a8	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  002b0	48 89 01	 mov	 QWORD PTR [rcx], rax

; 288  :         return 0;

  002b3	33 c0		 xor	 eax, eax
  002b5	e9 66 06 00 00	 jmp	 $LN51@multibytec@2
$LN29@multibytec@2:

; 289  :     }
; 290  : 
; 291  :     start = (Py_ssize_t)(buf->inbuf - buf->inbuf_top);

  002ba	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  002c2	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  002ca	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  002ce	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002d1	48 2b c1	 sub	 rax, rcx
  002d4	48 d1 f8	 sar	 rax, 1
  002d7	48 89 44 24 60	 mov	 QWORD PTR start$[rsp], rax

; 292  :     end = start + esize;

  002dc	48 8b 44 24 40	 mov	 rax, QWORD PTR esize$[rsp]
  002e1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR start$[rsp]
  002e6	48 03 c8	 add	 rcx, rax
  002e9	48 8b c1	 mov	 rax, rcx
  002ec	48 89 44 24 58	 mov	 QWORD PTR end$[rsp], rax

; 293  : 
; 294  :     /* use cached exception object if available */
; 295  :     if (buf->excobj == NULL) {

  002f1	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  002f9	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  002fe	75 78		 jne	 SHORT $LN27@multibytec@2

; 296  :         buf->excobj = PyUnicodeEncodeError_Create(codec->encoding,
; 297  :                         buf->inbuf_top,
; 298  :                         buf->inbuf_end - buf->inbuf_top,
; 299  :                         start, end, reason);

  00300	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00308	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00310	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00314	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00318	48 2b c1	 sub	 rax, rcx
  0031b	48 d1 f8	 sar	 rax, 1
  0031e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR reason$[rsp]
  00323	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00328	48 8b 4c 24 58	 mov	 rcx, QWORD PTR end$[rsp]
  0032d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00332	4c 8b 4c 24 60	 mov	 r9, QWORD PTR start$[rsp]
  00337	4c 8b c0	 mov	 r8, rax
  0033a	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00342	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00346	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR codec$[rsp]
  0034e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00351	e8 00 00 00 00	 call	 PyUnicodeEncodeError_Create
  00356	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0035e	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 300  :         if (buf->excobj == NULL)

  00362	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0036a	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  0036f	75 05		 jne	 SHORT $LN26@multibytec@2

; 301  :             goto errorexit;

  00371	e9 6f 05 00 00	 jmp	 $errorexit$20763
$LN26@multibytec@2:

; 302  :     }
; 303  :     else

  00376	eb 53		 jmp	 SHORT $LN25@multibytec@2
$LN27@multibytec@2:

; 304  :         if (PyUnicodeEncodeError_SetStart(buf->excobj, start) != 0 ||
; 305  :             PyUnicodeEncodeError_SetEnd(buf->excobj, end) != 0 ||
; 306  :             PyUnicodeEncodeError_SetReason(buf->excobj, reason) != 0)

  00378	48 8b 54 24 60	 mov	 rdx, QWORD PTR start$[rsp]
  0037d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00385	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00389	e8 00 00 00 00	 call	 PyUnicodeEncodeError_SetStart
  0038e	85 c0		 test	 eax, eax
  00390	75 34		 jne	 SHORT $LN23@multibytec@2
  00392	48 8b 54 24 58	 mov	 rdx, QWORD PTR end$[rsp]
  00397	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0039f	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  003a3	e8 00 00 00 00	 call	 PyUnicodeEncodeError_SetEnd
  003a8	85 c0		 test	 eax, eax
  003aa	75 1a		 jne	 SHORT $LN23@multibytec@2
  003ac	48 8b 54 24 50	 mov	 rdx, QWORD PTR reason$[rsp]
  003b1	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  003b9	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  003bd	e8 00 00 00 00	 call	 PyUnicodeEncodeError_SetReason
  003c2	85 c0		 test	 eax, eax
  003c4	74 05		 je	 SHORT $LN24@multibytec@2
$LN23@multibytec@2:

; 307  :             goto errorexit;

  003c6	e9 1a 05 00 00	 jmp	 $errorexit$20763
$LN24@multibytec@2:
$LN25@multibytec@2:

; 308  : 
; 309  :     if (errors == ERROR_STRICT) {

  003cb	48 83 bc 24 08
	01 00 00 01	 cmp	 QWORD PTR errors$[rsp], 1
  003d4	75 16		 jne	 SHORT $LN22@multibytec@2

; 310  :         PyCodec_StrictErrors(buf->excobj);

  003d6	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  003de	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  003e2	e8 00 00 00 00	 call	 PyCodec_StrictErrors

; 311  :         goto errorexit;

  003e7	e9 f9 04 00 00	 jmp	 $errorexit$20763
$LN22@multibytec@2:

; 312  :     }
; 313  : 
; 314  :     retobj = call_error_callback(errors, buf->excobj);

  003ec	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  003f4	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  003f8	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR errors$[rsp]
  00400	e8 00 00 00 00	 call	 call_error_callback
  00405	48 89 44 24 78	 mov	 QWORD PTR retobj$[rsp], rax

; 315  :     if (retobj == NULL)

  0040a	48 83 7c 24 78
	00		 cmp	 QWORD PTR retobj$[rsp], 0
  00410	75 05		 jne	 SHORT $LN21@multibytec@2

; 316  :         goto errorexit;

  00412	e9 ce 04 00 00	 jmp	 $errorexit$20763
$LN21@multibytec@2:

; 317  : 
; 318  :     if (!PyTuple_Check(retobj) || PyTuple_GET_SIZE(retobj) != 2 ||
; 319  :         (!PyUnicode_Check((tobj = PyTuple_GET_ITEM(retobj, 0))) && !PyBytes_Check(tobj)) ||
; 320  :         !PyLong_Check(PyTuple_GET_ITEM(retobj, 1))) {

  00417	48 8b 44 24 78	 mov	 rax, QWORD PTR retobj$[rsp]
  0041c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00420	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00426	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0042b	85 c0		 test	 eax, eax
  0042d	74 66		 je	 SHORT $LN19@multibytec@2
  0042f	48 8b 44 24 78	 mov	 rax, QWORD PTR retobj$[rsp]
  00434	48 83 78 60 02	 cmp	 QWORD PTR [rax+96], 2
  00439	75 5a		 jne	 SHORT $LN19@multibytec@2
  0043b	48 8b 44 24 78	 mov	 rax, QWORD PTR retobj$[rsp]
  00440	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00444	48 89 44 24 70	 mov	 QWORD PTR tobj$[rsp], rax
  00449	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  0044e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00452	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00458	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0045d	85 c0		 test	 eax, eax
  0045f	75 18		 jne	 SHORT $LN18@multibytec@2
  00461	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  00466	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0046a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00470	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00475	85 c0		 test	 eax, eax
  00477	74 1c		 je	 SHORT $LN19@multibytec@2
$LN18@multibytec@2:
  00479	48 8b 44 24 78	 mov	 rax, QWORD PTR retobj$[rsp]
  0047e	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00482	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00486	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0048c	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00491	85 c0		 test	 eax, eax
  00493	75 18		 jne	 SHORT $LN20@multibytec@2
$LN19@multibytec@2:

; 321  :         PyErr_SetString(PyExc_TypeError,
; 322  :                         "encoding error handler must return "
; 323  :                         "(str, int) tuple");

  00495	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@PKHNAIAA@encoding?5error?5handler?5must?5retu@
  0049c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  004a3	e8 00 00 00 00	 call	 PyErr_SetString

; 324  :         goto errorexit;

  004a8	e9 38 04 00 00	 jmp	 $errorexit$20763
$LN20@multibytec@2:

; 325  :     }
; 326  : 
; 327  :     if (PyUnicode_Check(tobj)) {

  004ad	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  004b2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004b6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004bc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004c1	85 c0		 test	 eax, eax
  004c3	0f 84 f2 01 00
	00		 je	 $LN17@multibytec@2

; 328  :         const Py_UNICODE *uraw = PyUnicode_AS_UNICODE(tobj);

  004c9	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  004ce	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004d2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004d8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004dd	85 c0		 test	 eax, eax
  004df	75 1c		 jne	 SHORT $LN53@multibytec@2
  004e1	41 b8 48 01 00
	00		 mov	 r8d, 328		; 00000148H
  004e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  004ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NBOHGAC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  004f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004fb	33 c0		 xor	 eax, eax
$LN53@multibytec@2:
  004fd	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  00502	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00507	74 13		 je	 SHORT $LN54@multibytec@2
  00509	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  0050e	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00512	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv238[rsp], rax
  0051a	eb 12		 jmp	 SHORT $LN55@multibytec@2
$LN54@multibytec@2:
  0051c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tobj$[rsp]
  00521	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00526	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv238[rsp], rax
$LN55@multibytec@2:
  0052e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv238[rsp]
  00536	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR uraw$20818[rsp], rax

; 329  : 
; 330  :         retstr = multibytecodec_encode(codec, state, &uraw,
; 331  :                         PyUnicode_GET_SIZE(tobj), ERROR_STRICT,
; 332  :                         MBENC_FLUSH);

  0053e	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  00543	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00547	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0054d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00552	85 c0		 test	 eax, eax
  00554	75 1c		 jne	 SHORT $LN56@multibytec@2
  00556	41 b8 4b 01 00
	00		 mov	 r8d, 331		; 0000014bH
  0055c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00563	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NBOHGAC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0056a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00570	33 c0		 xor	 eax, eax
$LN56@multibytec@2:
  00572	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  00577	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0057c	74 60		 je	 SHORT $LN62@multibytec@2
  0057e	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  00583	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00586	c1 e8 06	 shr	 eax, 6
  00589	83 e0 01	 and	 eax, 1
  0058c	85 c0		 test	 eax, eax
  0058e	74 25		 je	 SHORT $LN57@multibytec@2
  00590	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  00595	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00598	c1 e8 05	 shr	 eax, 5
  0059b	83 e0 01	 and	 eax, 1
  0059e	85 c0		 test	 eax, eax
  005a0	74 13		 je	 SHORT $LN57@multibytec@2
  005a2	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  005a7	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  005ab	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv261[rsp], rax
  005b3	eb 14		 jmp	 SHORT $LN58@multibytec@2
$LN57@multibytec@2:
  005b5	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  005ba	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  005c1	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv261[rsp], rax
$LN58@multibytec@2:
  005c9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv261[rsp]
  005d1	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv281[rsp], rax
  005d9	e9 8d 00 00 00	 jmp	 $LN63@multibytec@2
$LN62@multibytec@2:
  005de	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tobj$[rsp]
  005e3	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  005e8	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  005ed	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  005f2	75 1c		 jne	 SHORT $LN59@multibytec@2
  005f4	41 b8 4b 01 00
	00		 mov	 r8d, 331		; 0000014bH
  005fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00601	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@LIFMAMJL@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt?$AAr?$AA?$AA@
  00608	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0060e	33 c0		 xor	 eax, eax
$LN59@multibytec@2:
  00610	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  00615	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00618	c1 e8 06	 shr	 eax, 6
  0061b	83 e0 01	 and	 eax, 1
  0061e	85 c0		 test	 eax, eax
  00620	74 25		 je	 SHORT $LN60@multibytec@2
  00622	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  00627	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0062a	c1 e8 05	 shr	 eax, 5
  0062d	83 e0 01	 and	 eax, 1
  00630	85 c0		 test	 eax, eax
  00632	74 13		 je	 SHORT $LN60@multibytec@2
  00634	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  00639	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0063d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv279[rsp], rax
  00645	eb 14		 jmp	 SHORT $LN61@multibytec@2
$LN60@multibytec@2:
  00647	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  0064c	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00653	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv279[rsp], rax
$LN61@multibytec@2:
  0065b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv279[rsp]
  00663	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv281[rsp], rax
$LN63@multibytec@2:
  0066b	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  00673	48 c7 44 24 20
	01 00 00 00	 mov	 QWORD PTR [rsp+32], 1
  0067c	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR tv281[rsp]
  00684	4c 8d 84 24 a8
	00 00 00	 lea	 r8, QWORD PTR uraw$20818[rsp]
  0068c	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR state$[rsp]
  00694	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR codec$[rsp]
  0069c	e8 00 00 00 00	 call	 multibytecodec_encode
  006a1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR retstr$[rsp], rax

; 333  :         if (retstr == NULL)

  006a9	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR retstr$[rsp], 0
  006b2	75 05		 jne	 SHORT $LN16@multibytec@2

; 334  :             goto errorexit;

  006b4	e9 2c 02 00 00	 jmp	 $errorexit$20763
$LN16@multibytec@2:

; 335  :     }
; 336  :     else {

  006b9	eb 17		 jmp	 SHORT $LN15@multibytec@2
$LN17@multibytec@2:

; 337  :         Py_INCREF(tobj);

  006bb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tobj$[rsp]
  006c0	e8 00 00 00 00	 call	 _Py_IncRef

; 338  :         retstr = tobj;

  006c5	48 8b 44 24 70	 mov	 rax, QWORD PTR tobj$[rsp]
  006ca	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR retstr$[rsp], rax
$LN15@multibytec@2:

; 339  :     }
; 340  : 
; 341  :     assert(PyBytes_Check(retstr));

  006d2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR retstr$[rsp]
  006da	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  006de	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  006e4	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  006e9	85 c0		 test	 eax, eax
  006eb	75 1c		 jne	 SHORT $LN64@multibytec@2
  006ed	41 b8 55 01 00
	00		 mov	 r8d, 341		; 00000155H
  006f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  006fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NOCPDCHC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00701	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00707	33 c0		 xor	 eax, eax
$LN64@multibytec@2:

; 342  :     retstrsize = PyBytes_GET_SIZE(retstr);

  00709	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR retstr$[rsp]
  00711	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00715	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0071b	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00720	85 c0		 test	 eax, eax
  00722	75 1c		 jne	 SHORT $LN65@multibytec@2
  00724	41 b8 56 01 00
	00		 mov	 r8d, 342		; 00000156H
  0072a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00731	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NOCPDCHC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00738	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0073e	33 c0		 xor	 eax, eax
$LN65@multibytec@2:
  00740	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR retstr$[rsp]
  00748	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0074c	48 89 44 24 68	 mov	 QWORD PTR retstrsize$[rsp], rax

; 343  :     REQUIRE_ENCODEBUFFER(buf, retstrsize);

  00751	48 83 7c 24 68
	01		 cmp	 QWORD PTR retstrsize$[rsp], 1
  00757	7c 1f		 jl	 SHORT $LN13@multibytec@2
  00759	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00761	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00765	48 03 44 24 68	 add	 rax, QWORD PTR retstrsize$[rsp]
  0076a	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00772	48 3b 41 20	 cmp	 rax, QWORD PTR [rcx+32]
  00776	76 1c		 jbe	 SHORT $LN14@multibytec@2
$LN13@multibytec@2:
  00778	48 8b 54 24 68	 mov	 rdx, QWORD PTR retstrsize$[rsp]
  0077d	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00785	e8 00 00 00 00	 call	 expand_encodebuffer
  0078a	83 f8 ff	 cmp	 eax, -1
  0078d	75 05		 jne	 SHORT $LN12@multibytec@2
  0078f	e9 51 01 00 00	 jmp	 $errorexit$20763
$LN12@multibytec@2:
$LN14@multibytec@2:

; 344  : 
; 345  :     memcpy(buf->outbuf, PyBytes_AS_STRING(retstr), retstrsize);

  00794	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR retstr$[rsp]
  0079c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007a0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  007a6	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  007ab	85 c0		 test	 eax, eax
  007ad	75 1c		 jne	 SHORT $LN66@multibytec@2
  007af	41 b8 59 01 00
	00		 mov	 r8d, 345		; 00000159H
  007b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  007bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NOCPDCHC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  007c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007c9	33 c0		 xor	 eax, eax
$LN66@multibytec@2:
  007cb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR retstr$[rsp]
  007d3	48 83 c0 78	 add	 rax, 120		; 00000078H
  007d7	4c 8b 44 24 68	 mov	 r8, QWORD PTR retstrsize$[rsp]
  007dc	48 8b d0	 mov	 rdx, rax
  007df	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  007e7	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  007eb	e8 00 00 00 00	 call	 memcpy

; 346  :     buf->outbuf += retstrsize;

  007f0	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  007f8	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  007fc	48 03 44 24 68	 add	 rax, QWORD PTR retstrsize$[rsp]
  00801	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00809	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 347  : 
; 348  :     newpos = PyLong_AsSsize_t(PyTuple_GET_ITEM(retobj, 1));

  0080d	48 8b 44 24 78	 mov	 rax, QWORD PTR retobj$[rsp]
  00812	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00816	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  0081b	48 89 44 24 48	 mov	 QWORD PTR newpos$[rsp], rax

; 349  :     if (newpos < 0 && !PyErr_Occurred())

  00820	48 83 7c 24 48
	00		 cmp	 QWORD PTR newpos$[rsp], 0
  00826	7d 38		 jge	 SHORT $LN11@multibytec@2
  00828	e8 00 00 00 00	 call	 PyErr_Occurred
  0082d	48 85 c0	 test	 rax, rax
  00830	75 2e		 jne	 SHORT $LN11@multibytec@2

; 350  :         newpos += (Py_ssize_t)(buf->inbuf_end - buf->inbuf_top);

  00832	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0083a	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00842	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00846	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0084a	48 2b c1	 sub	 rax, rcx
  0084d	48 d1 f8	 sar	 rax, 1
  00850	48 8b 4c 24 48	 mov	 rcx, QWORD PTR newpos$[rsp]
  00855	48 03 c8	 add	 rcx, rax
  00858	48 8b c1	 mov	 rax, rcx
  0085b	48 89 44 24 48	 mov	 QWORD PTR newpos$[rsp], rax
$LN11@multibytec@2:

; 351  :     if (newpos < 0 || buf->inbuf_top + newpos > buf->inbuf_end) {

  00860	48 83 7c 24 48
	00		 cmp	 QWORD PTR newpos$[rsp], 0
  00866	7c 23		 jl	 SHORT $LN9@multibytec@2
  00868	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00870	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00874	48 8b 4c 24 48	 mov	 rcx, QWORD PTR newpos$[rsp]
  00879	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0087d	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00885	48 3b 41 10	 cmp	 rax, QWORD PTR [rcx+16]
  00889	76 1f		 jbe	 SHORT $LN10@multibytec@2
$LN9@multibytec@2:

; 352  :         PyErr_Clear();

  0088b	e8 00 00 00 00	 call	 PyErr_Clear

; 353  :         PyErr_Format(PyExc_IndexError,
; 354  :                      "position %zd from error handler out of bounds",
; 355  :                      newpos);

  00890	4c 8b 44 24 48	 mov	 r8, QWORD PTR newpos$[rsp]
  00895	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@NELAFELL@position?5?$CFzd?5from?5error?5handler?5@
  0089c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  008a3	e8 00 00 00 00	 call	 PyErr_Format

; 356  :         goto errorexit;

  008a8	eb 3b		 jmp	 SHORT $errorexit$20763
$LN10@multibytec@2:

; 357  :     }
; 358  :     buf->inbuf = buf->inbuf_top + newpos;

  008aa	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  008b2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  008b6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR newpos$[rsp]
  008bb	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  008bf	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  008c7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 359  : 
; 360  :     Py_DECREF(retobj);

  008ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR retobj$[rsp]
  008cf	e8 00 00 00 00	 call	 _Py_DecRef

; 361  :     Py_DECREF(retstr);

  008d4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR retstr$[rsp]
  008dc	e8 00 00 00 00	 call	 _Py_DecRef

; 362  :     return 0;

  008e1	33 c0		 xor	 eax, eax
  008e3	eb 3b		 jmp	 SHORT $LN51@multibytec@2
$errorexit$20763:
$LN8@multibytec@2:

; 363  : 
; 364  : errorexit:
; 365  :     Py_XDECREF(retobj);

  008e5	48 83 7c 24 78
	00		 cmp	 QWORD PTR retobj$[rsp], 0
  008eb	74 0a		 je	 SHORT $LN5@multibytec@2
  008ed	48 8b 4c 24 78	 mov	 rcx, QWORD PTR retobj$[rsp]
  008f2	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@multibytec@2:
  008f7	33 c0		 xor	 eax, eax
  008f9	85 c0		 test	 eax, eax
  008fb	75 e8		 jne	 SHORT $LN8@multibytec@2
$LN4@multibytec@2:

; 366  :     Py_XDECREF(retstr);

  008fd	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR retstr$[rsp], 0
  00906	74 0d		 je	 SHORT $LN1@multibytec@2
  00908	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR retstr$[rsp]
  00910	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@multibytec@2:
  00915	33 c0		 xor	 eax, eax
  00917	85 c0		 test	 eax, eax
  00919	75 e2		 jne	 SHORT $LN4@multibytec@2

; 367  :     return -1;

  0091b	b8 ff ff ff ff	 mov	 eax, -1
$LN51@multibytec@2:

; 368  : }

  00920	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  00927	c3		 ret	 0
multibytecodec_encerror ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@HLHDCKMA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyObject_CallObject:PROC
EXTRN	PyCodec_LookupError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_error_callback DD imagerel call_error_callback
	DD	imagerel call_error_callback+234
	DD	imagerel $unwind$call_error_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_error_callback DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_1DA@HLHDCKMA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@HLHDCKMA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H
	DB	'r', 00H, 's', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT call_error_callback
_TEXT	SEGMENT
args$ = 32
r$ = 40
str$ = 48
cb$ = 56
errors$ = 80
exc$ = 88
call_error_callback PROC				; COMDAT

; 93   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 94   :     PyObject *args, *cb, *r;
; 95   :     const char *str;
; 96   : 
; 97   :     assert(PyUnicode_Check(errors));

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR errors$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00022	85 c0		 test	 eax, eax
  00024	75 1c		 jne	 SHORT $LN6@call_error
  00026	41 b8 61 00 00
	00		 mov	 r8d, 97			; 00000061H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@HLHDCKMA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00040	33 c0		 xor	 eax, eax
$LN6@call_error:

; 98   :     str = _PyUnicode_AsString(errors);

  00042	48 8b 4c 24 50	 mov	 rcx, QWORD PTR errors$[rsp]
  00047	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0004c	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 99   :     if (str == NULL)

  00051	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00057	75 07		 jne	 SHORT $LN3@call_error

; 100  :         return NULL;

  00059	33 c0		 xor	 eax, eax
  0005b	e9 85 00 00 00	 jmp	 $LN4@call_error
$LN3@call_error:

; 101  :     cb = PyCodec_LookupError(str);

  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00065	e8 00 00 00 00	 call	 PyCodec_LookupError
  0006a	48 89 44 24 38	 mov	 QWORD PTR cb$[rsp], rax

; 102  :     if (cb == NULL)

  0006f	48 83 7c 24 38
	00		 cmp	 QWORD PTR cb$[rsp], 0
  00075	75 04		 jne	 SHORT $LN2@call_error

; 103  :         return NULL;

  00077	33 c0		 xor	 eax, eax
  00079	eb 6a		 jmp	 SHORT $LN4@call_error
$LN2@call_error:

; 104  : 
; 105  :     args = PyTuple_New(1);

  0007b	b9 01 00 00 00	 mov	 ecx, 1
  00080	e8 00 00 00 00	 call	 PyTuple_New
  00085	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 106  :     if (args == NULL) {

  0008a	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  00090	75 0e		 jne	 SHORT $LN1@call_error

; 107  :         Py_DECREF(cb);

  00092	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cb$[rsp]
  00097	e8 00 00 00 00	 call	 _Py_DecRef

; 108  :         return NULL;

  0009c	33 c0		 xor	 eax, eax
  0009e	eb 45		 jmp	 SHORT $LN4@call_error
$LN1@call_error:

; 109  :     }
; 110  : 
; 111  :     PyTuple_SET_ITEM(args, 0, exc);

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  000a5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR exc$[rsp]
  000aa	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 112  :     Py_INCREF(exc);

  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR exc$[rsp]
  000b3	e8 00 00 00 00	 call	 _Py_IncRef

; 113  : 
; 114  :     r = PyObject_CallObject(cb, args);

  000b8	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  000bd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cb$[rsp]
  000c2	e8 00 00 00 00	 call	 PyObject_CallObject
  000c7	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax

; 115  :     Py_DECREF(args);

  000cc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR args$[rsp]
  000d1	e8 00 00 00 00	 call	 _Py_DecRef

; 116  :     Py_DECREF(cb);

  000d6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cb$[rsp]
  000db	e8 00 00 00 00	 call	 _Py_DecRef

; 117  :     return r;

  000e0	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
$LN4@call_error:

; 118  : }

  000e5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e9	c3		 ret	 0
call_error_callback ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DG@BMCJEPGD@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$expand_encodebuffer DD imagerel expand_encodebuffer
	DD	imagerel expand_encodebuffer+550
	DD	imagerel $unwind$expand_encodebuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$expand_encodebuffer DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_1DG@BMCJEPGD@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@BMCJEPGD@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'b', 00H, 'u', 00H, 'f', 00H, '-', 00H, '>', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT expand_encodebuffer
_TEXT	SEGMENT
incsize$ = 32
orgsize$ = 40
orgpos$ = 48
tv92 = 56
buf$ = 80
esize$ = 88
expand_encodebuffer PROC				; COMDAT

; 174  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 175  :     Py_ssize_t orgpos, orgsize, incsize;
; 176  : 
; 177  :     orgpos = (Py_ssize_t)((char *)buf->outbuf -
; 178  :                             PyBytes_AS_STRING(buf->outobj));

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00013	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00017	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00021	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00026	85 c0		 test	 eax, eax
  00028	75 1c		 jne	 SHORT $LN5@expand_enc
  0002a	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@BMCJEPGD@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00044	33 c0		 xor	 eax, eax
$LN5@expand_enc:
  00046	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  0004b	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0004f	48 83 c0 78	 add	 rax, 120		; 00000078H
  00053	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00058	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0005c	48 2b c8	 sub	 rcx, rax
  0005f	48 8b c1	 mov	 rax, rcx
  00062	48 89 44 24 30	 mov	 QWORD PTR orgpos$[rsp], rax

; 179  :     orgsize = PyBytes_GET_SIZE(buf->outobj);

  00067	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  0006c	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00070	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00074	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0007a	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0007f	85 c0		 test	 eax, eax
  00081	75 1c		 jne	 SHORT $LN6@expand_enc
  00083	41 b8 b3 00 00
	00		 mov	 r8d, 179		; 000000b3H
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@BMCJEPGD@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0009d	33 c0		 xor	 eax, eax
$LN6@expand_enc:
  0009f	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  000a4	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  000a8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ac	48 89 44 24 28	 mov	 QWORD PTR orgsize$[rsp], rax

; 180  :     incsize = (esize < (orgsize >> 1) ? (orgsize >> 1) | 1 : esize);

  000b1	48 8b 44 24 28	 mov	 rax, QWORD PTR orgsize$[rsp]
  000b6	48 d1 f8	 sar	 rax, 1
  000b9	48 39 44 24 58	 cmp	 QWORD PTR esize$[rsp], rax
  000be	7d 13		 jge	 SHORT $LN7@expand_enc
  000c0	48 8b 44 24 28	 mov	 rax, QWORD PTR orgsize$[rsp]
  000c5	48 d1 f8	 sar	 rax, 1
  000c8	48 83 c8 01	 or	 rax, 1
  000cc	48 89 44 24 38	 mov	 QWORD PTR tv92[rsp], rax
  000d1	eb 0a		 jmp	 SHORT $LN8@expand_enc
$LN7@expand_enc:
  000d3	48 8b 44 24 58	 mov	 rax, QWORD PTR esize$[rsp]
  000d8	48 89 44 24 38	 mov	 QWORD PTR tv92[rsp], rax
$LN8@expand_enc:
  000dd	48 8b 44 24 38	 mov	 rax, QWORD PTR tv92[rsp]
  000e2	48 89 44 24 20	 mov	 QWORD PTR incsize$[rsp], rax

; 181  : 
; 182  :     if (orgsize > PY_SSIZE_T_MAX - incsize)

  000e7	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  000f1	48 2b 44 24 20	 sub	 rax, QWORD PTR incsize$[rsp]
  000f6	48 39 44 24 28	 cmp	 QWORD PTR orgsize$[rsp], rax
  000fb	7e 0a		 jle	 SHORT $LN2@expand_enc

; 183  :         return -1;

  000fd	b8 ff ff ff ff	 mov	 eax, -1
  00102	e9 1a 01 00 00	 jmp	 $LN3@expand_enc
$LN2@expand_enc:

; 184  : 
; 185  :     if (_PyBytes_Resize(&buf->outobj, orgsize + incsize) == -1)

  00107	48 8b 44 24 20	 mov	 rax, QWORD PTR incsize$[rsp]
  0010c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR orgsize$[rsp]
  00111	48 03 c8	 add	 rcx, rax
  00114	48 8b c1	 mov	 rax, rcx
  00117	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  0011c	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00120	48 8b d0	 mov	 rdx, rax
  00123	e8 00 00 00 00	 call	 _PyBytes_Resize
  00128	83 f8 ff	 cmp	 eax, -1
  0012b	75 0a		 jne	 SHORT $LN1@expand_enc

; 186  :         return -1;

  0012d	b8 ff ff ff ff	 mov	 eax, -1
  00132	e9 ea 00 00 00	 jmp	 $LN3@expand_enc
$LN1@expand_enc:

; 187  : 
; 188  :     buf->outbuf = (unsigned char *)PyBytes_AS_STRING(buf->outobj) +orgpos;

  00137	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  0013c	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00140	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00144	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0014a	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0014f	85 c0		 test	 eax, eax
  00151	75 1c		 jne	 SHORT $LN9@expand_enc
  00153	41 b8 bc 00 00
	00		 mov	 r8d, 188		; 000000bcH
  00159	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@BMCJEPGD@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00167	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0016d	33 c0		 xor	 eax, eax
$LN9@expand_enc:
  0016f	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00174	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00178	48 8b 4c 24 30	 mov	 rcx, QWORD PTR orgpos$[rsp]
  0017d	48 8d 44 08 78	 lea	 rax, QWORD PTR [rax+rcx+120]
  00182	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00187	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 189  :     buf->outbuf_end = (unsigned char *)PyBytes_AS_STRING(buf->outobj)
; 190  :         + PyBytes_GET_SIZE(buf->outobj);

  0018b	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00190	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00194	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00198	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0019e	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001a3	85 c0		 test	 eax, eax
  001a5	75 1c		 jne	 SHORT $LN10@expand_enc
  001a7	41 b8 bd 00 00
	00		 mov	 r8d, 189		; 000000bdH
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@BMCJEPGD@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c1	33 c0		 xor	 eax, eax
$LN10@expand_enc:
  001c3	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  001c8	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  001cc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001d0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001d6	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001db	85 c0		 test	 eax, eax
  001dd	75 1c		 jne	 SHORT $LN11@expand_enc
  001df	41 b8 be 00 00
	00		 mov	 r8d, 190		; 000000beH
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@BMCJEPGD@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  001f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001f9	33 c0		 xor	 eax, eax
$LN11@expand_enc:
  001fb	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00200	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00204	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00209	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0020d	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00211	48 8d 44 08 78	 lea	 rax, QWORD PTR [rax+rcx+120]
  00216	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  0021b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 191  : 
; 192  :     return 0;

  0021f	33 c0		 xor	 eax, eax
$LN3@expand_enc:

; 193  : }

  00221	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00225	c3		 ret	 0
expand_encodebuffer ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@JIIJICAB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9@ ; `string'
PUBLIC	??_C@_1DI@MOOGFILO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@JEMNGIH@y?$CK?$HMz?3decode?$AA@	; `string'
EXTRN	PyUnicode_Resize:PROC
EXTRN	PyUnicode_FromUnicode:PROC
EXTRN	PyUnicode_New:PROC
EXTRN	PyBuffer_Release:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultibyteCodec_Decode DD imagerel MultibyteCodec_Decode
	DD	imagerel MultibyteCodec_Decode+2006
	DD	imagerel $unwind$MultibyteCodec_Decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultibyteCodec_Decode DD 021601H
	DD	02b0116H
xdata	ENDS
;	COMDAT ??_C@_1EM@JIIJICAB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9@
CONST	SEGMENT
??_C@_1EM@JIIJICAB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'A', 00H, 'S', 00H, 'C', 00H
	DB	'I', 00H, 'I', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, '*', 00H, ')', 00H, '(', 00H, 'b', 00H
	DB	'u', 00H, 'f', 00H, '.', 00H, 'o', 00H, 'u', 00H, 't', 00H, 'o'
	DB	00H, 'b', 00H, 'j', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H
	DB	'w', 00H, 's', 00H, 't', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@MOOGFILO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@MOOGFILO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'b', 00H, 'u', 00H, 'f', 00H, '.', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JEMNGIH@y?$CK?$HMz?3decode?$AA@
CONST	SEGMENT
??_C@_0M@JEMNGIH@y?$CK?$HMz?3decode?$AA@ DB 'y*|z:decode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT MultibyteCodec_Decode
_TEXT	SEGMENT
errors$ = 48
datalen$ = 56
pdata$ = 64
buf$ = 144
data$ = 200
errorcb$ = 208
finalsize$ = 216
state$ = 224
outleft$21222 = 232
r$21223 = 240
inleft$21221 = 248
tv139 = 256
tv160 = 264
tv180 = 272
tv178 = 280
tv307 = 288
tv305 = 296
tv231 = 304
tv253 = 312
tv273 = 320
tv271 = 328
self$ = 352
args$ = 360
kwargs$ = 368
MultibyteCodec_Decode PROC				; COMDAT

; 617  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H

; 618  :     MultibyteCodec_State state;
; 619  :     MultibyteDecodeBuffer buf;
; 620  :     PyObject *errorcb;
; 621  :     Py_buffer pdata;
; 622  :     const char *data, *errors = NULL;

  00016	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 623  :     Py_ssize_t datalen, finalsize;
; 624  : 
; 625  :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "y*|z:decode",
; 626  :                             codeckwarglist, &pdata, &errors))

  0001f	48 8d 44 24 30	 lea	 rax, QWORD PTR errors$[rsp]
  00024	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00029	48 8d 44 24 40	 lea	 rax, QWORD PTR pdata$[rsp]
  0002e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00033	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:codeckwarglist
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@JEMNGIH@y?$CK?$HMz?3decode?$AA@
  00041	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR kwargs$[rsp]
  00049	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00051	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00056	85 c0		 test	 eax, eax
  00058	75 07		 jne	 SHORT $LN40@MultibyteC@2

; 627  :         return NULL;

  0005a	33 c0		 xor	 eax, eax
  0005c	e9 6d 07 00 00	 jmp	 $LN41@MultibyteC@2
$LN40@MultibyteC@2:

; 628  :     data = pdata.buf;

  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR pdata$[rsp]
  00066	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR data$[rsp], rax

; 629  :     datalen = pdata.len;

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR pdata$[rsp+16]
  00073	48 89 44 24 38	 mov	 QWORD PTR datalen$[rsp], rax

; 630  : 
; 631  :     errorcb = internal_error_callback(errors);

  00078	48 8b 4c 24 30	 mov	 rcx, QWORD PTR errors$[rsp]
  0007d	e8 00 00 00 00	 call	 internal_error_callback
  00082	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR errorcb$[rsp], rax

; 632  :     if (errorcb == NULL) {

  0008a	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR errorcb$[rsp], 0
  00093	75 11		 jne	 SHORT $LN39@MultibyteC@2

; 633  :         PyBuffer_Release(&pdata);

  00095	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pdata$[rsp]
  0009a	e8 00 00 00 00	 call	 PyBuffer_Release

; 634  :         return NULL;

  0009f	33 c0		 xor	 eax, eax
  000a1	e9 28 07 00 00	 jmp	 $LN41@MultibyteC@2
$LN39@MultibyteC@2:

; 635  :     }
; 636  : 
; 637  :     if (datalen == 0) {

  000a6	48 83 7c 24 38
	00		 cmp	 QWORD PTR datalen$[rsp], 0
  000ac	75 56		 jne	 SHORT $LN38@MultibyteC@2

; 638  :         PyBuffer_Release(&pdata);

  000ae	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pdata$[rsp]
  000b3	e8 00 00 00 00	 call	 PyBuffer_Release
$LN37@MultibyteC@2:

; 639  :         ERROR_DECREF(errorcb);

  000b8	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR errorcb$[rsp], 0
  000c1	74 23		 je	 SHORT $LN34@MultibyteC@2
  000c3	48 83 bc 24 d0
	00 00 00 01	 cmp	 QWORD PTR errorcb$[rsp], 1
  000cc	72 0b		 jb	 SHORT $LN33@MultibyteC@2
  000ce	48 83 bc 24 d0
	00 00 00 03	 cmp	 QWORD PTR errorcb$[rsp], 3
  000d7	76 0d		 jbe	 SHORT $LN34@MultibyteC@2
$LN33@MultibyteC@2:
  000d9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR errorcb$[rsp]
  000e1	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@MultibyteC@2:
  000e6	33 c0		 xor	 eax, eax
  000e8	85 c0		 test	 eax, eax
  000ea	75 cc		 jne	 SHORT $LN37@MultibyteC@2

; 640  :         return make_tuple(PyUnicode_New(0, 0), 0);

  000ec	33 d2		 xor	 edx, edx
  000ee	33 c9		 xor	 ecx, ecx
  000f0	e8 00 00 00 00	 call	 PyUnicode_New
  000f5	33 d2		 xor	 edx, edx
  000f7	48 8b c8	 mov	 rcx, rax
  000fa	e8 00 00 00 00	 call	 make_tuple
  000ff	e9 ca 06 00 00	 jmp	 $LN41@MultibyteC@2
$LN38@MultibyteC@2:

; 641  :     }
; 642  : 
; 643  :     buf.excobj = NULL;

  00104	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR buf$[rsp+40], 0

; 644  :     buf.inbuf = buf.inbuf_top = (unsigned char *)data;

  00110	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00118	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR buf$[rsp+8], rax
  00120	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+8]
  00128	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR buf$[rsp], rax

; 645  :     buf.inbuf_end = buf.inbuf_top + datalen;

  00130	48 8b 44 24 38	 mov	 rax, QWORD PTR datalen$[rsp]
  00135	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+8]
  0013d	48 03 c8	 add	 rcx, rax
  00140	48 8b c1	 mov	 rax, rcx
  00143	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR buf$[rsp+16], rax

; 646  :     buf.outobj = PyUnicode_FromUnicode(NULL, datalen);

  0014b	48 8b 54 24 38	 mov	 rdx, QWORD PTR datalen$[rsp]
  00150	33 c9		 xor	 ecx, ecx
  00152	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  00157	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR buf$[rsp+48], rax

; 647  :     if (buf.outobj == NULL)

  0015f	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp+48], 0
  00168	75 05		 jne	 SHORT $LN32@MultibyteC@2

; 648  :         goto errorexit;

  0016a	e9 e3 05 00 00	 jmp	 $errorexit$21191
$LN32@MultibyteC@2:

; 649  :     buf.outbuf = PyUnicode_AS_UNICODE(buf.outobj);

  0016f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00177	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0017b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00181	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00186	85 c0		 test	 eax, eax
  00188	75 1c		 jne	 SHORT $LN43@MultibyteC@2
  0018a	41 b8 89 02 00
	00		 mov	 r8d, 649		; 00000289H
  00190	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MOOGFILO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0019e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a4	33 c0		 xor	 eax, eax
$LN43@MultibyteC@2:
  001a6	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  001ae	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  001b3	74 16		 je	 SHORT $LN44@MultibyteC@2
  001b5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  001bd	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001c1	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv139[rsp], rax
  001c9	eb 15		 jmp	 SHORT $LN45@MultibyteC@2
$LN44@MultibyteC@2:
  001cb	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+48]
  001d3	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  001d8	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv139[rsp], rax
$LN45@MultibyteC@2:
  001e0	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv139[rsp]
  001e8	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR buf$[rsp+24], rax

; 650  :     if (buf.outbuf == NULL)

  001f0	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp+24], 0
  001f9	75 05		 jne	 SHORT $LN31@MultibyteC@2

; 651  :         goto errorexit;

  001fb	e9 52 05 00 00	 jmp	 $errorexit$21191
$LN31@MultibyteC@2:

; 652  :     buf.outbuf_end = buf.outbuf + PyUnicode_GET_SIZE(buf.outobj);

  00200	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00208	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0020c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00212	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00217	85 c0		 test	 eax, eax
  00219	75 1c		 jne	 SHORT $LN46@MultibyteC@2
  0021b	41 b8 8c 02 00
	00		 mov	 r8d, 652		; 0000028cH
  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00228	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MOOGFILO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0022f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00235	33 c0		 xor	 eax, eax
$LN46@MultibyteC@2:
  00237	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0023f	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00244	74 6c		 je	 SHORT $LN52@MultibyteC@2
  00246	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0024e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00251	c1 e8 06	 shr	 eax, 6
  00254	83 e0 01	 and	 eax, 1
  00257	85 c0		 test	 eax, eax
  00259	74 2b		 je	 SHORT $LN47@MultibyteC@2
  0025b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00263	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00266	c1 e8 05	 shr	 eax, 5
  00269	83 e0 01	 and	 eax, 1
  0026c	85 c0		 test	 eax, eax
  0026e	74 16		 je	 SHORT $LN47@MultibyteC@2
  00270	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00278	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0027c	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv160[rsp], rax
  00284	eb 17		 jmp	 SHORT $LN48@MultibyteC@2
$LN47@MultibyteC@2:
  00286	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0028e	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00295	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv160[rsp], rax
$LN48@MultibyteC@2:
  0029d	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv160[rsp]
  002a5	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv180[rsp], rax
  002ad	e9 9f 00 00 00	 jmp	 $LN53@MultibyteC@2
$LN52@MultibyteC@2:
  002b2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+48]
  002ba	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  002bf	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  002c7	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  002cc	75 1c		 jne	 SHORT $LN49@MultibyteC@2
  002ce	41 b8 8c 02 00
	00		 mov	 r8d, 652		; 0000028cH
  002d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  002db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@JIIJICAB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9@
  002e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e8	33 c0		 xor	 eax, eax
$LN49@MultibyteC@2:
  002ea	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  002f2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002f5	c1 e8 06	 shr	 eax, 6
  002f8	83 e0 01	 and	 eax, 1
  002fb	85 c0		 test	 eax, eax
  002fd	74 2b		 je	 SHORT $LN50@MultibyteC@2
  002ff	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00307	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0030a	c1 e8 05	 shr	 eax, 5
  0030d	83 e0 01	 and	 eax, 1
  00310	85 c0		 test	 eax, eax
  00312	74 16		 je	 SHORT $LN50@MultibyteC@2
  00314	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0031c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00320	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv178[rsp], rax
  00328	eb 17		 jmp	 SHORT $LN51@MultibyteC@2
$LN50@MultibyteC@2:
  0032a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00332	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00339	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv178[rsp], rax
$LN51@MultibyteC@2:
  00341	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv178[rsp]
  00349	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv180[rsp], rax
$LN53@MultibyteC@2:
  00351	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+24]
  00359	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv180[rsp]
  00361	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00365	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR buf$[rsp+32], rax

; 653  : 
; 654  :     if (self->codec->decinit != NULL &&
; 655  :         self->codec->decinit(&state, self->codec->config) != 0)

  0036d	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00375	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00379	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0037e	74 40		 je	 SHORT $LN30@MultibyteC@2
  00380	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00388	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0038c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00394	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00398	48 89 8c 24 20
	01 00 00	 mov	 QWORD PTR tv307[rsp], rcx
  003a0	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  003a4	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR state$[rsp]
  003ac	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR tv307[rsp]
  003b4	ff 50 38	 call	 QWORD PTR [rax+56]
  003b7	85 c0		 test	 eax, eax
  003b9	74 05		 je	 SHORT $LN30@MultibyteC@2

; 656  :         goto errorexit;

  003bb	e9 92 03 00 00	 jmp	 $errorexit$21191
$LN30@MultibyteC@2:
$LN29@MultibyteC@2:

; 657  : 
; 658  :     while (buf.inbuf < buf.inbuf_end) {

  003c0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+16]
  003c8	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR buf$[rsp], rax
  003d0	0f 83 fb 00 00
	00		 jae	 $LN28@MultibyteC@2

; 659  :         Py_ssize_t inleft, outleft, r;
; 660  : 
; 661  :         inleft = (Py_ssize_t)(buf.inbuf_end - buf.inbuf);

  003d6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  003de	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+16]
  003e6	48 2b c8	 sub	 rcx, rax
  003e9	48 8b c1	 mov	 rax, rcx
  003ec	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR inleft$21221[rsp], rax

; 662  :         outleft = (Py_ssize_t)(buf.outbuf_end - buf.outbuf);

  003f4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+24]
  003fc	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+32]
  00404	48 2b c8	 sub	 rcx, rax
  00407	48 8b c1	 mov	 rax, rcx
  0040a	48 d1 f8	 sar	 rax, 1
  0040d	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR outleft$21222[rsp], rax

; 663  : 
; 664  :         r = self->codec->decode(&state, self->codec->config,
; 665  :                         &buf.inbuf, inleft, &buf.outbuf, outleft);

  00415	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0041d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00421	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00429	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0042d	48 89 8c 24 28
	01 00 00	 mov	 QWORD PTR tv305[rsp], rcx
  00435	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR outleft$21222[rsp]
  0043d	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00442	48 8d 94 24 a8
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp+24]
  0044a	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0044f	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR inleft$21221[rsp]
  00457	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR buf$[rsp]
  0045f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00463	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR state$[rsp]
  0046b	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR tv305[rsp]
  00473	ff 50 30	 call	 QWORD PTR [rax+48]
  00476	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR r$21223[rsp], rax

; 666  :         if (r == 0)

  0047e	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR r$21223[rsp], 0
  00487	75 04		 jne	 SHORT $LN27@MultibyteC@2

; 667  :             break;

  00489	eb 46		 jmp	 SHORT $LN28@MultibyteC@2

; 668  :         else if (multibytecodec_decerror(self->codec, &state,

  0048b	eb 3f		 jmp	 SHORT $LN26@MultibyteC@2
$LN27@MultibyteC@2:

; 669  :                                          &buf, errorcb, r))

  0048d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR r$21223[rsp]
  00495	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0049a	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR errorcb$[rsp]
  004a2	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR buf$[rsp]
  004aa	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR state$[rsp]
  004b2	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004ba	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  004be	e8 00 00 00 00	 call	 multibytecodec_decerror
  004c3	85 c0		 test	 eax, eax
  004c5	74 05		 je	 SHORT $LN25@MultibyteC@2

; 670  :             goto errorexit;

  004c7	e9 86 02 00 00	 jmp	 $errorexit$21191
$LN25@MultibyteC@2:
$LN26@MultibyteC@2:

; 671  :     }

  004cc	e9 ef fe ff ff	 jmp	 $LN29@MultibyteC@2
$LN28@MultibyteC@2:

; 672  : 
; 673  :     finalsize = (Py_ssize_t)(buf.outbuf -
; 674  :                              PyUnicode_AS_UNICODE(buf.outobj));

  004d1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  004d9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004dd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004e3	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004e8	85 c0		 test	 eax, eax
  004ea	75 1c		 jne	 SHORT $LN54@MultibyteC@2
  004ec	41 b8 a2 02 00
	00		 mov	 r8d, 674		; 000002a2H
  004f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  004f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MOOGFILO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00500	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00506	33 c0		 xor	 eax, eax
$LN54@MultibyteC@2:
  00508	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00510	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00515	74 16		 je	 SHORT $LN55@MultibyteC@2
  00517	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0051f	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00523	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv231[rsp], rax
  0052b	eb 15		 jmp	 SHORT $LN56@MultibyteC@2
$LN55@MultibyteC@2:
  0052d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+48]
  00535	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  0053a	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv231[rsp], rax
$LN56@MultibyteC@2:
  00542	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR tv231[rsp]
  0054a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+24]
  00552	48 2b c8	 sub	 rcx, rax
  00555	48 8b c1	 mov	 rax, rcx
  00558	48 d1 f8	 sar	 rax, 1
  0055b	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR finalsize$[rsp], rax

; 675  : 
; 676  :     if (finalsize != PyUnicode_GET_SIZE(buf.outobj))

  00563	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0056b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0056f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00575	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0057a	85 c0		 test	 eax, eax
  0057c	75 1c		 jne	 SHORT $LN57@MultibyteC@2
  0057e	41 b8 a4 02 00
	00		 mov	 r8d, 676		; 000002a4H
  00584	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  0058b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MOOGFILO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00592	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00598	33 c0		 xor	 eax, eax
$LN57@MultibyteC@2:
  0059a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  005a2	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  005a7	74 6c		 je	 SHORT $LN63@MultibyteC@2
  005a9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  005b1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005b4	c1 e8 06	 shr	 eax, 6
  005b7	83 e0 01	 and	 eax, 1
  005ba	85 c0		 test	 eax, eax
  005bc	74 2b		 je	 SHORT $LN58@MultibyteC@2
  005be	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  005c6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005c9	c1 e8 05	 shr	 eax, 5
  005cc	83 e0 01	 and	 eax, 1
  005cf	85 c0		 test	 eax, eax
  005d1	74 16		 je	 SHORT $LN58@MultibyteC@2
  005d3	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  005db	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  005df	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv253[rsp], rax
  005e7	eb 17		 jmp	 SHORT $LN59@MultibyteC@2
$LN58@MultibyteC@2:
  005e9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  005f1	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  005f8	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv253[rsp], rax
$LN59@MultibyteC@2:
  00600	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR tv253[rsp]
  00608	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv273[rsp], rax
  00610	e9 9f 00 00 00	 jmp	 $LN64@MultibyteC@2
$LN63@MultibyteC@2:
  00615	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+48]
  0061d	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00622	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0062a	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0062f	75 1c		 jne	 SHORT $LN60@MultibyteC@2
  00631	41 b8 a4 02 00
	00		 mov	 r8d, 676		; 000002a4H
  00637	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  0063e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@JIIJICAB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9@
  00645	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0064b	33 c0		 xor	 eax, eax
$LN60@MultibyteC@2:
  0064d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00655	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00658	c1 e8 06	 shr	 eax, 6
  0065b	83 e0 01	 and	 eax, 1
  0065e	85 c0		 test	 eax, eax
  00660	74 2b		 je	 SHORT $LN61@MultibyteC@2
  00662	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0066a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0066d	c1 e8 05	 shr	 eax, 5
  00670	83 e0 01	 and	 eax, 1
  00673	85 c0		 test	 eax, eax
  00675	74 16		 je	 SHORT $LN61@MultibyteC@2
  00677	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0067f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00683	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv271[rsp], rax
  0068b	eb 17		 jmp	 SHORT $LN62@MultibyteC@2
$LN61@MultibyteC@2:
  0068d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00695	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0069c	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv271[rsp], rax
$LN62@MultibyteC@2:
  006a4	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR tv271[rsp]
  006ac	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv273[rsp], rax
$LN64@MultibyteC@2:
  006b4	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR tv273[rsp]
  006bc	48 39 84 24 d8
	00 00 00	 cmp	 QWORD PTR finalsize$[rsp], rax
  006c4	74 1c		 je	 SHORT $LN24@MultibyteC@2

; 677  :         if (PyUnicode_Resize(&buf.outobj, finalsize) == -1)

  006c6	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR finalsize$[rsp]
  006ce	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp+48]
  006d6	e8 00 00 00 00	 call	 PyUnicode_Resize
  006db	83 f8 ff	 cmp	 eax, -1
  006de	75 02		 jne	 SHORT $LN23@MultibyteC@2

; 678  :             goto errorexit;

  006e0	eb 70		 jmp	 SHORT $errorexit$21191
$LN23@MultibyteC@2:
$LN24@MultibyteC@2:

; 679  : 
; 680  :     PyBuffer_Release(&pdata);

  006e2	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pdata$[rsp]
  006e7	e8 00 00 00 00	 call	 PyBuffer_Release
$LN22@MultibyteC@2:

; 681  :     Py_XDECREF(buf.excobj);

  006ec	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp+40], 0
  006f5	74 0d		 je	 SHORT $LN19@MultibyteC@2
  006f7	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+40]
  006ff	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@MultibyteC@2:
  00704	33 c0		 xor	 eax, eax
  00706	85 c0		 test	 eax, eax
  00708	75 e2		 jne	 SHORT $LN22@MultibyteC@2
$LN18@MultibyteC@2:

; 682  :     ERROR_DECREF(errorcb);

  0070a	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR errorcb$[rsp], 0
  00713	74 23		 je	 SHORT $LN15@MultibyteC@2
  00715	48 83 bc 24 d0
	00 00 00 01	 cmp	 QWORD PTR errorcb$[rsp], 1
  0071e	72 0b		 jb	 SHORT $LN14@MultibyteC@2
  00720	48 83 bc 24 d0
	00 00 00 03	 cmp	 QWORD PTR errorcb$[rsp], 3
  00729	76 0d		 jbe	 SHORT $LN15@MultibyteC@2
$LN14@MultibyteC@2:
  0072b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR errorcb$[rsp]
  00733	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@MultibyteC@2:
  00738	33 c0		 xor	 eax, eax
  0073a	85 c0		 test	 eax, eax
  0073c	75 cc		 jne	 SHORT $LN18@MultibyteC@2

; 683  :     return make_tuple(buf.outobj, datalen);

  0073e	48 8b 54 24 38	 mov	 rdx, QWORD PTR datalen$[rsp]
  00743	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+48]
  0074b	e8 00 00 00 00	 call	 make_tuple
  00750	eb 7c		 jmp	 SHORT $LN41@MultibyteC@2
$errorexit$21191:

; 684  : 
; 685  : errorexit:
; 686  :     PyBuffer_Release(&pdata);

  00752	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pdata$[rsp]
  00757	e8 00 00 00 00	 call	 PyBuffer_Release
$LN13@MultibyteC@2:

; 687  :     ERROR_DECREF(errorcb);

  0075c	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR errorcb$[rsp], 0
  00765	74 23		 je	 SHORT $LN10@MultibyteC@2
  00767	48 83 bc 24 d0
	00 00 00 01	 cmp	 QWORD PTR errorcb$[rsp], 1
  00770	72 0b		 jb	 SHORT $LN9@MultibyteC@2
  00772	48 83 bc 24 d0
	00 00 00 03	 cmp	 QWORD PTR errorcb$[rsp], 3
  0077b	76 0d		 jbe	 SHORT $LN10@MultibyteC@2
$LN9@MultibyteC@2:
  0077d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR errorcb$[rsp]
  00785	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@MultibyteC@2:
  0078a	33 c0		 xor	 eax, eax
  0078c	85 c0		 test	 eax, eax
  0078e	75 cc		 jne	 SHORT $LN13@MultibyteC@2
$LN8@MultibyteC@2:

; 688  :     Py_XDECREF(buf.excobj);

  00790	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp+40], 0
  00799	74 0d		 je	 SHORT $LN5@MultibyteC@2
  0079b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+40]
  007a3	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@MultibyteC@2:
  007a8	33 c0		 xor	 eax, eax
  007aa	85 c0		 test	 eax, eax
  007ac	75 e2		 jne	 SHORT $LN8@MultibyteC@2
$LN4@MultibyteC@2:

; 689  :     Py_XDECREF(buf.outobj);

  007ae	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp+48], 0
  007b7	74 0d		 je	 SHORT $LN1@MultibyteC@2
  007b9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+48]
  007c1	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@MultibyteC@2:
  007c6	33 c0		 xor	 eax, eax
  007c8	85 c0		 test	 eax, eax
  007ca	75 e2		 jne	 SHORT $LN4@MultibyteC@2

; 690  : 
; 691  :     return NULL;

  007cc	33 c0		 xor	 eax, eax
$LN41@MultibyteC@2:

; 692  : }

  007ce	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  007d5	c3		 ret	 0
MultibyteCodec_Decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EE@JJGKILMB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAt?$AAu?$AAn?$AAi?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt@ ; `string'
PUBLIC	??_C@_1DA@DFDKMLNP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAu?$AAn?$AAi?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DE@PBMBGFCE@decoding?5error?5handler?5must?5retu@ ; `string'
EXTRN	PyUnicodeDecodeError_SetReason:PROC
EXTRN	PyUnicodeDecodeError_SetEnd:PROC
EXTRN	PyUnicodeDecodeError_SetStart:PROC
EXTRN	PyUnicodeDecodeError_Create:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$multibytecodec_decerror DD imagerel multibytecodec_decerror
	DD	imagerel multibytecodec_decerror+1727
	DD	imagerel $unwind$multibytecodec_decerror
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$multibytecodec_decerror DD 021b01H
	DD	015011bH
xdata	ENDS
;	COMDAT ??_C@_1EE@JJGKILMB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAt?$AAu?$AAn?$AAi?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt@
CONST	SEGMENT
??_C@_1EE@JJGKILMB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAt?$AAu?$AAn?$AAi?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'A', 00H, 'S', 00H, 'C', 00H
	DB	'I', 00H, 'I', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, '*', 00H, ')', 00H, '(', 00H, 'r', 00H
	DB	'e', 00H, 't', 00H, 'u', 00H, 'n', 00H, 'i', 00H, ')', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 'w', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@DFDKMLNP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAu?$AAn?$AAi?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@DFDKMLNP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAu?$AAn?$AAi?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'r', 00H, 'e', 00H, 't', 00H, 'u', 00H
	DB	'n', 00H, 'i', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PBMBGFCE@decoding?5error?5handler?5must?5retu@
CONST	SEGMENT
??_C@_0DE@PBMBGFCE@decoding?5error?5handler?5must?5retu@ DB 'decoding err'
	DB	'or handler must return (str, int) tuple', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT multibytecodec_decerror
_TEXT	SEGMENT
esize$ = 48
retunisize$ = 56
retuni$ = 64
newpos$ = 72
reason$ = 80
end$ = 88
start$ = 96
retobj$ = 104
tv65 = 112
tv214 = 120
tv234 = 128
tv232 = 136
tv262 = 144
codec$ = 176
state$ = 184
buf$ = 192
errors$ = 200
e$ = 208
multibytecodec_decerror PROC				; COMDAT

; 375  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 376  :     PyObject *retobj = NULL, *retuni = NULL;

  0001b	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR retobj$[rsp], 0
  00024	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR retuni$[rsp], 0

; 377  :     Py_ssize_t retunisize, newpos;
; 378  :     const char *reason;
; 379  :     Py_ssize_t esize, start, end;
; 380  : 
; 381  :     if (e > 0) {

  0002d	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR e$[rsp], 0
  00036	7e 1e		 jle	 SHORT $LN37@multibytec@3

; 382  :         reason = "illegal multibyte sequence";

  00038	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BL@MMCIDIKH@illegal?5multibyte?5sequence?$AA@
  0003f	48 89 44 24 50	 mov	 QWORD PTR reason$[rsp], rax

; 383  :         esize = e;

  00044	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR e$[rsp]
  0004c	48 89 44 24 30	 mov	 QWORD PTR esize$[rsp], rax

; 384  :     }
; 385  :     else {

  00051	e9 ba 00 00 00	 jmp	 $LN36@multibytec@3
$LN37@multibytec@3:

; 386  :         switch (e) {

  00056	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR e$[rsp]
  0005e	48 89 44 24 70	 mov	 QWORD PTR tv65[rsp], rax
  00063	48 83 7c 24 70
	fd		 cmp	 QWORD PTR tv65[rsp], -3
  00069	74 6b		 je	 SHORT $LN29@multibytec@3
  0006b	48 83 7c 24 70
	fe		 cmp	 QWORD PTR tv65[rsp], -2
  00071	74 36		 je	 SHORT $LN30@multibytec@3
  00073	48 83 7c 24 70
	ff		 cmp	 QWORD PTR tv65[rsp], -1
  00079	74 02		 je	 SHORT $LN33@multibytec@3
  0007b	eb 76		 jmp	 SHORT $LN28@multibytec@3
$LN33@multibytec@3:

; 387  :         case MBERR_TOOSMALL:
; 388  :             REQUIRE_DECODEBUFFER(buf, -1);

  0007d	33 c0		 xor	 eax, eax
  0007f	83 f8 01	 cmp	 eax, 1
  00082	74 1e		 je	 SHORT $LN32@multibytec@3
  00084	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0008b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00093	e8 00 00 00 00	 call	 expand_decodebuffer
  00098	83 f8 ff	 cmp	 eax, -1
  0009b	75 05		 jne	 SHORT $LN31@multibytec@3
  0009d	e9 f8 05 00 00	 jmp	 $errorexit$20907
$LN31@multibytec@3:
$LN32@multibytec@3:

; 389  :             return 0; /* retry it */

  000a2	33 c0		 xor	 eax, eax
  000a4	e9 0e 06 00 00	 jmp	 $LN38@multibytec@3
$LN30@multibytec@3:

; 390  :         case MBERR_TOOFEW:
; 391  :             reason = "incomplete multibyte sequence";

  000a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@NPKGELOO@incomplete?5multibyte?5sequence?$AA@
  000b0	48 89 44 24 50	 mov	 QWORD PTR reason$[rsp], rax

; 392  :             esize = (Py_ssize_t)(buf->inbuf_end - buf->inbuf);

  000b5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  000bd	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  000c5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000c8	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000cc	48 2b c1	 sub	 rax, rcx
  000cf	48 89 44 24 30	 mov	 QWORD PTR esize$[rsp], rax

; 393  :             break;

  000d4	eb 3a		 jmp	 SHORT $LN34@multibytec@3
$LN29@multibytec@3:

; 394  :         case MBERR_INTERNAL:
; 395  :             PyErr_SetString(PyExc_RuntimeError,
; 396  :                             "internal codec error");

  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@DBHHINF@internal?5codec?5error?$AA@
  000dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000e4	e8 00 00 00 00	 call	 PyErr_SetString

; 397  :             return -1;

  000e9	b8 ff ff ff ff	 mov	 eax, -1
  000ee	e9 c4 05 00 00	 jmp	 $LN38@multibytec@3
$LN28@multibytec@3:

; 398  :         default:
; 399  :             PyErr_SetString(PyExc_RuntimeError,
; 400  :                             "unknown runtime error");

  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@NBDJHAFE@unknown?5runtime?5error?$AA@
  000fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00101	e8 00 00 00 00	 call	 PyErr_SetString

; 401  :             return -1;

  00106	b8 ff ff ff ff	 mov	 eax, -1
  0010b	e9 a7 05 00 00	 jmp	 $LN38@multibytec@3
$LN34@multibytec@3:
$LN36@multibytec@3:

; 402  :         }
; 403  :     }
; 404  : 
; 405  :     if (errors == ERROR_REPLACE) {

  00110	48 83 bc 24 c8
	00 00 00 03	 cmp	 QWORD PTR errors$[rsp], 3
  00119	75 70		 jne	 SHORT $LN27@multibytec@3

; 406  :         REQUIRE_DECODEBUFFER(buf, 1);

  0011b	33 c0		 xor	 eax, eax
  0011d	85 c0		 test	 eax, eax
  0011f	75 1e		 jne	 SHORT $LN25@multibytec@3
  00121	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00129	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0012d	48 83 c0 02	 add	 rax, 2
  00131	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00139	48 3b 41 20	 cmp	 rax, QWORD PTR [rcx+32]
  0013d	76 1c		 jbe	 SHORT $LN26@multibytec@3
$LN25@multibytec@3:
  0013f	ba 01 00 00 00	 mov	 edx, 1
  00144	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0014c	e8 00 00 00 00	 call	 expand_decodebuffer
  00151	83 f8 ff	 cmp	 eax, -1
  00154	75 05		 jne	 SHORT $LN24@multibytec@3
  00156	e9 3f 05 00 00	 jmp	 $errorexit$20907
$LN24@multibytec@3:
$LN26@multibytec@3:

; 407  :         *buf->outbuf++ = Py_UNICODE_REPLACEMENT_CHARACTER;

  0015b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00163	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00167	b9 fd ff 00 00	 mov	 ecx, 65533		; 0000fffdH
  0016c	66 89 08	 mov	 WORD PTR [rax], cx
  0016f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00177	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0017b	48 83 c0 02	 add	 rax, 2
  0017f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00187	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN27@multibytec@3:

; 408  :     }
; 409  :     if (errors == ERROR_IGNORE || errors == ERROR_REPLACE) {

  0018b	48 83 bc 24 c8
	00 00 00 02	 cmp	 QWORD PTR errors$[rsp], 2
  00194	74 0b		 je	 SHORT $LN22@multibytec@3
  00196	48 83 bc 24 c8
	00 00 00 03	 cmp	 QWORD PTR errors$[rsp], 3
  0019f	75 22		 jne	 SHORT $LN23@multibytec@3
$LN22@multibytec@3:

; 410  :         buf->inbuf += esize;

  001a1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  001a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ac	48 03 44 24 30	 add	 rax, QWORD PTR esize$[rsp]
  001b1	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  001b9	48 89 01	 mov	 QWORD PTR [rcx], rax

; 411  :         return 0;

  001bc	33 c0		 xor	 eax, eax
  001be	e9 f4 04 00 00	 jmp	 $LN38@multibytec@3
$LN23@multibytec@3:

; 412  :     }
; 413  : 
; 414  :     start = (Py_ssize_t)(buf->inbuf - buf->inbuf_top);

  001c3	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  001cb	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  001d3	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001d7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001da	48 2b c1	 sub	 rax, rcx
  001dd	48 89 44 24 60	 mov	 QWORD PTR start$[rsp], rax

; 415  :     end = start + esize;

  001e2	48 8b 44 24 30	 mov	 rax, QWORD PTR esize$[rsp]
  001e7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR start$[rsp]
  001ec	48 03 c8	 add	 rcx, rax
  001ef	48 8b c1	 mov	 rax, rcx
  001f2	48 89 44 24 58	 mov	 QWORD PTR end$[rsp], rax

; 416  : 
; 417  :     /* use cached exception object if available */
; 418  :     if (buf->excobj == NULL) {

  001f7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  001ff	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00204	75 75		 jne	 SHORT $LN21@multibytec@3

; 419  :         buf->excobj = PyUnicodeDecodeError_Create(codec->encoding,
; 420  :                         (const char *)buf->inbuf_top,
; 421  :                         (Py_ssize_t)(buf->inbuf_end - buf->inbuf_top),
; 422  :                         start, end, reason);

  00206	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0020e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00216	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0021a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0021e	48 2b c1	 sub	 rax, rcx
  00221	48 8b 4c 24 50	 mov	 rcx, QWORD PTR reason$[rsp]
  00226	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0022b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR end$[rsp]
  00230	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00235	4c 8b 4c 24 60	 mov	 r9, QWORD PTR start$[rsp]
  0023a	4c 8b c0	 mov	 r8, rax
  0023d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00245	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00249	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR codec$[rsp]
  00251	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00254	e8 00 00 00 00	 call	 PyUnicodeDecodeError_Create
  00259	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00261	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 423  :         if (buf->excobj == NULL)

  00265	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0026d	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00272	75 05		 jne	 SHORT $LN20@multibytec@3

; 424  :             goto errorexit;

  00274	e9 21 04 00 00	 jmp	 $errorexit$20907
$LN20@multibytec@3:

; 425  :     }
; 426  :     else

  00279	eb 53		 jmp	 SHORT $LN19@multibytec@3
$LN21@multibytec@3:

; 427  :         if (PyUnicodeDecodeError_SetStart(buf->excobj, start) ||
; 428  :             PyUnicodeDecodeError_SetEnd(buf->excobj, end) ||
; 429  :             PyUnicodeDecodeError_SetReason(buf->excobj, reason))

  0027b	48 8b 54 24 60	 mov	 rdx, QWORD PTR start$[rsp]
  00280	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00288	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  0028c	e8 00 00 00 00	 call	 PyUnicodeDecodeError_SetStart
  00291	85 c0		 test	 eax, eax
  00293	75 34		 jne	 SHORT $LN17@multibytec@3
  00295	48 8b 54 24 58	 mov	 rdx, QWORD PTR end$[rsp]
  0029a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  002a2	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  002a6	e8 00 00 00 00	 call	 PyUnicodeDecodeError_SetEnd
  002ab	85 c0		 test	 eax, eax
  002ad	75 1a		 jne	 SHORT $LN17@multibytec@3
  002af	48 8b 54 24 50	 mov	 rdx, QWORD PTR reason$[rsp]
  002b4	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  002bc	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  002c0	e8 00 00 00 00	 call	 PyUnicodeDecodeError_SetReason
  002c5	85 c0		 test	 eax, eax
  002c7	74 05		 je	 SHORT $LN18@multibytec@3
$LN17@multibytec@3:

; 430  :             goto errorexit;

  002c9	e9 cc 03 00 00	 jmp	 $errorexit$20907
$LN18@multibytec@3:
$LN19@multibytec@3:

; 431  : 
; 432  :     if (errors == ERROR_STRICT) {

  002ce	48 83 bc 24 c8
	00 00 00 01	 cmp	 QWORD PTR errors$[rsp], 1
  002d7	75 16		 jne	 SHORT $LN16@multibytec@3

; 433  :         PyCodec_StrictErrors(buf->excobj);

  002d9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  002e1	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  002e5	e8 00 00 00 00	 call	 PyCodec_StrictErrors

; 434  :         goto errorexit;

  002ea	e9 ab 03 00 00	 jmp	 $errorexit$20907
$LN16@multibytec@3:

; 435  :     }
; 436  : 
; 437  :     retobj = call_error_callback(errors, buf->excobj);

  002ef	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  002f7	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  002fb	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR errors$[rsp]
  00303	e8 00 00 00 00	 call	 call_error_callback
  00308	48 89 44 24 68	 mov	 QWORD PTR retobj$[rsp], rax

; 438  :     if (retobj == NULL)

  0030d	48 83 7c 24 68
	00		 cmp	 QWORD PTR retobj$[rsp], 0
  00313	75 05		 jne	 SHORT $LN15@multibytec@3

; 439  :         goto errorexit;

  00315	e9 80 03 00 00	 jmp	 $errorexit$20907
$LN15@multibytec@3:

; 440  : 
; 441  :     if (!PyTuple_Check(retobj) || PyTuple_GET_SIZE(retobj) != 2 ||
; 442  :         !PyUnicode_Check((retuni = PyTuple_GET_ITEM(retobj, 0))) ||
; 443  :         !PyLong_Check(PyTuple_GET_ITEM(retobj, 1))) {

  0031a	48 8b 44 24 68	 mov	 rax, QWORD PTR retobj$[rsp]
  0031f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00323	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00329	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0032e	85 c0		 test	 eax, eax
  00330	74 4e		 je	 SHORT $LN13@multibytec@3
  00332	48 8b 44 24 68	 mov	 rax, QWORD PTR retobj$[rsp]
  00337	48 83 78 60 02	 cmp	 QWORD PTR [rax+96], 2
  0033c	75 42		 jne	 SHORT $LN13@multibytec@3
  0033e	48 8b 44 24 68	 mov	 rax, QWORD PTR retobj$[rsp]
  00343	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00347	48 89 44 24 40	 mov	 QWORD PTR retuni$[rsp], rax
  0034c	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  00351	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00355	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0035b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00360	85 c0		 test	 eax, eax
  00362	74 1c		 je	 SHORT $LN13@multibytec@3
  00364	48 8b 44 24 68	 mov	 rax, QWORD PTR retobj$[rsp]
  00369	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0036d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00371	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00377	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0037c	85 c0		 test	 eax, eax
  0037e	75 18		 jne	 SHORT $LN14@multibytec@3
$LN13@multibytec@3:

; 444  :         PyErr_SetString(PyExc_TypeError,
; 445  :                         "decoding error handler must return "
; 446  :                         "(str, int) tuple");

  00380	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@PBMBGFCE@decoding?5error?5handler?5must?5retu@
  00387	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0038e	e8 00 00 00 00	 call	 PyErr_SetString

; 447  :         goto errorexit;

  00393	e9 02 03 00 00	 jmp	 $errorexit$20907
$LN14@multibytec@3:

; 448  :     }
; 449  : 
; 450  :     if (PyUnicode_AsUnicode(retuni) == NULL)

  00398	48 8b 4c 24 40	 mov	 rcx, QWORD PTR retuni$[rsp]
  0039d	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  003a2	48 85 c0	 test	 rax, rax
  003a5	75 05		 jne	 SHORT $LN12@multibytec@3

; 451  :         goto errorexit;

  003a7	e9 ee 02 00 00	 jmp	 $errorexit$20907
$LN12@multibytec@3:

; 452  :     retunisize = PyUnicode_GET_SIZE(retuni);

  003ac	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  003b1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003b5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003bb	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003c0	85 c0		 test	 eax, eax
  003c2	75 1c		 jne	 SHORT $LN40@multibytec@3
  003c4	41 b8 c4 01 00
	00		 mov	 r8d, 452		; 000001c4H
  003ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@DFDKMLNP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAu?$AAn?$AAi?$AA?$CJ?$AA?$AA@
  003d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003de	33 c0		 xor	 eax, eax
$LN40@multibytec@3:
  003e0	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  003e5	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  003ea	74 57		 je	 SHORT $LN46@multibytec@3
  003ec	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  003f1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003f4	c1 e8 06	 shr	 eax, 6
  003f7	83 e0 01	 and	 eax, 1
  003fa	85 c0		 test	 eax, eax
  003fc	74 22		 je	 SHORT $LN41@multibytec@3
  003fe	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  00403	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00406	c1 e8 05	 shr	 eax, 5
  00409	83 e0 01	 and	 eax, 1
  0040c	85 c0		 test	 eax, eax
  0040e	74 10		 je	 SHORT $LN41@multibytec@3
  00410	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  00415	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00419	48 89 44 24 78	 mov	 QWORD PTR tv214[rsp], rax
  0041e	eb 11		 jmp	 SHORT $LN42@multibytec@3
$LN41@multibytec@3:
  00420	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  00425	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0042c	48 89 44 24 78	 mov	 QWORD PTR tv214[rsp], rax
$LN42@multibytec@3:
  00431	48 8b 44 24 78	 mov	 rax, QWORD PTR tv214[rsp]
  00436	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv234[rsp], rax
  0043e	e9 8d 00 00 00	 jmp	 $LN47@multibytec@3
$LN46@multibytec@3:
  00443	48 8b 4c 24 40	 mov	 rcx, QWORD PTR retuni$[rsp]
  00448	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  0044d	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  00452	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00457	75 1c		 jne	 SHORT $LN43@multibytec@3
  00459	41 b8 c4 01 00
	00		 mov	 r8d, 452		; 000001c4H
  0045f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00466	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JJGKILMB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAt?$AAu?$AAn?$AAi?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt@
  0046d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00473	33 c0		 xor	 eax, eax
$LN43@multibytec@3:
  00475	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  0047a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0047d	c1 e8 06	 shr	 eax, 6
  00480	83 e0 01	 and	 eax, 1
  00483	85 c0		 test	 eax, eax
  00485	74 25		 je	 SHORT $LN44@multibytec@3
  00487	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  0048c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0048f	c1 e8 05	 shr	 eax, 5
  00492	83 e0 01	 and	 eax, 1
  00495	85 c0		 test	 eax, eax
  00497	74 13		 je	 SHORT $LN44@multibytec@3
  00499	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  0049e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  004a2	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv232[rsp], rax
  004aa	eb 14		 jmp	 SHORT $LN45@multibytec@3
$LN44@multibytec@3:
  004ac	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  004b1	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  004b8	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv232[rsp], rax
$LN45@multibytec@3:
  004c0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv232[rsp]
  004c8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv234[rsp], rax
$LN47@multibytec@3:
  004d0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv234[rsp]
  004d8	48 89 44 24 38	 mov	 QWORD PTR retunisize$[rsp], rax

; 453  :     if (retunisize > 0) {

  004dd	48 83 7c 24 38
	00		 cmp	 QWORD PTR retunisize$[rsp], 0
  004e3	0f 8e f1 00 00
	00		 jle	 $LN11@multibytec@3

; 454  :         REQUIRE_DECODEBUFFER(buf, retunisize);

  004e9	48 83 7c 24 38
	01		 cmp	 QWORD PTR retunisize$[rsp], 1
  004ef	7c 23		 jl	 SHORT $LN9@multibytec@3
  004f1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  004f9	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  004fd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR retunisize$[rsp]
  00502	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00506	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0050e	48 3b 41 20	 cmp	 rax, QWORD PTR [rcx+32]
  00512	76 1c		 jbe	 SHORT $LN10@multibytec@3
$LN9@multibytec@3:
  00514	48 8b 54 24 38	 mov	 rdx, QWORD PTR retunisize$[rsp]
  00519	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00521	e8 00 00 00 00	 call	 expand_decodebuffer
  00526	83 f8 ff	 cmp	 eax, -1
  00529	75 05		 jne	 SHORT $LN8@multibytec@3
  0052b	e9 6a 01 00 00	 jmp	 $errorexit$20907
$LN8@multibytec@3:
$LN10@multibytec@3:

; 455  :         memcpy((char *)buf->outbuf, PyUnicode_AS_UNICODE(retuni),
; 456  :                         retunisize * Py_UNICODE_SIZE);

  00530	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  00535	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00539	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0053f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00544	85 c0		 test	 eax, eax
  00546	75 1c		 jne	 SHORT $LN48@multibytec@3
  00548	41 b8 c7 01 00
	00		 mov	 r8d, 455		; 000001c7H
  0054e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00555	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@DFDKMLNP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAu?$AAn?$AAi?$AA?$CJ?$AA?$AA@
  0055c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00562	33 c0		 xor	 eax, eax
$LN48@multibytec@3:
  00564	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  00569	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0056e	74 13		 je	 SHORT $LN49@multibytec@3
  00570	48 8b 44 24 40	 mov	 rax, QWORD PTR retuni$[rsp]
  00575	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00579	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv262[rsp], rax
  00581	eb 12		 jmp	 SHORT $LN50@multibytec@3
$LN49@multibytec@3:
  00583	48 8b 4c 24 40	 mov	 rcx, QWORD PTR retuni$[rsp]
  00588	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  0058d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv262[rsp], rax
$LN50@multibytec@3:
  00595	48 8b 44 24 38	 mov	 rax, QWORD PTR retunisize$[rsp]
  0059a	48 03 c0	 add	 rax, rax
  0059d	4c 8b c0	 mov	 r8, rax
  005a0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv262[rsp]
  005a8	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  005b0	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  005b4	e8 00 00 00 00	 call	 memcpy

; 457  :         buf->outbuf += retunisize;

  005b9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  005c1	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  005c5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR retunisize$[rsp]
  005ca	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  005ce	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  005d6	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN11@multibytec@3:

; 458  :     }
; 459  : 
; 460  :     newpos = PyLong_AsSsize_t(PyTuple_GET_ITEM(retobj, 1));

  005da	48 8b 44 24 68	 mov	 rax, QWORD PTR retobj$[rsp]
  005df	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  005e3	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  005e8	48 89 44 24 48	 mov	 QWORD PTR newpos$[rsp], rax

; 461  :     if (newpos < 0 && !PyErr_Occurred())

  005ed	48 83 7c 24 48
	00		 cmp	 QWORD PTR newpos$[rsp], 0
  005f3	7d 35		 jge	 SHORT $LN7@multibytec@3
  005f5	e8 00 00 00 00	 call	 PyErr_Occurred
  005fa	48 85 c0	 test	 rax, rax
  005fd	75 2b		 jne	 SHORT $LN7@multibytec@3

; 462  :         newpos += (Py_ssize_t)(buf->inbuf_end - buf->inbuf_top);

  005ff	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00607	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0060f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00613	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00617	48 2b c1	 sub	 rax, rcx
  0061a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR newpos$[rsp]
  0061f	48 03 c8	 add	 rcx, rax
  00622	48 8b c1	 mov	 rax, rcx
  00625	48 89 44 24 48	 mov	 QWORD PTR newpos$[rsp], rax
$LN7@multibytec@3:

; 463  :     if (newpos < 0 || buf->inbuf_top + newpos > buf->inbuf_end) {

  0062a	48 83 7c 24 48
	00		 cmp	 QWORD PTR newpos$[rsp], 0
  00630	7c 1f		 jl	 SHORT $LN5@multibytec@3
  00632	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0063a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0063e	48 03 44 24 48	 add	 rax, QWORD PTR newpos$[rsp]
  00643	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0064b	48 3b 41 10	 cmp	 rax, QWORD PTR [rcx+16]
  0064f	76 1f		 jbe	 SHORT $LN6@multibytec@3
$LN5@multibytec@3:

; 464  :         PyErr_Clear();

  00651	e8 00 00 00 00	 call	 PyErr_Clear

; 465  :         PyErr_Format(PyExc_IndexError,
; 466  :                      "position %zd from error handler out of bounds",
; 467  :                      newpos);

  00656	4c 8b 44 24 48	 mov	 r8, QWORD PTR newpos$[rsp]
  0065b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@NELAFELL@position?5?$CFzd?5from?5error?5handler?5@
  00662	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00669	e8 00 00 00 00	 call	 PyErr_Format

; 468  :         goto errorexit;

  0066e	eb 2a		 jmp	 SHORT $errorexit$20907
$LN6@multibytec@3:

; 469  :     }
; 470  :     buf->inbuf = buf->inbuf_top + newpos;

  00670	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00678	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0067c	48 03 44 24 48	 add	 rax, QWORD PTR newpos$[rsp]
  00681	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00689	48 89 01	 mov	 QWORD PTR [rcx], rax

; 471  :     Py_DECREF(retobj);

  0068c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR retobj$[rsp]
  00691	e8 00 00 00 00	 call	 _Py_DecRef

; 472  :     return 0;

  00696	33 c0		 xor	 eax, eax
  00698	eb 1d		 jmp	 SHORT $LN38@multibytec@3
$errorexit$20907:
$LN4@multibytec@3:

; 473  : 
; 474  : errorexit:
; 475  :     Py_XDECREF(retobj);

  0069a	48 83 7c 24 68
	00		 cmp	 QWORD PTR retobj$[rsp], 0
  006a0	74 0a		 je	 SHORT $LN1@multibytec@3
  006a2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR retobj$[rsp]
  006a7	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@multibytec@3:
  006ac	33 c0		 xor	 eax, eax
  006ae	85 c0		 test	 eax, eax
  006b0	75 e8		 jne	 SHORT $LN4@multibytec@3

; 476  :     return -1;

  006b2	b8 ff ff ff ff	 mov	 eax, -1
$LN38@multibytec@3:

; 477  : }

  006b7	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  006be	c3		 ret	 0
multibytecodec_decerror ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EO@LMFKBMGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1DK@ELNPGHAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$expand_decodebuffer DD imagerel expand_decodebuffer
	DD	imagerel expand_decodebuffer+1309
	DD	imagerel $unwind$expand_decodebuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$expand_decodebuffer DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_1EO@LMFKBMGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ@
CONST	SEGMENT
??_C@_1EO@LMFKBMGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'A', 00H, 'S', 00H, 'C', 00H
	DB	'I', 00H, 'I', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, '*', 00H, ')', 00H, '(', 00H, 'b', 00H
	DB	'u', 00H, 'f', 00H, '-', 00H, '>', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, ')', 00H, '-', 00H
	DB	'>', 00H, 'w', 00H, 's', 00H, 't', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@ELNPGHAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@ELNPGHAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'b', 00H, 'u', 00H, 'f', 00H, '-', 00H
	DB	'>', 00H, 'o', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'b', 00H, 'j'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT expand_decodebuffer
_TEXT	SEGMENT
orgsize$ = 32
orgpos$ = 40
tv82 = 48
tv142 = 56
tv168 = 64
tv166 = 72
tv174 = 80
tv198 = 88
tv219 = 96
tv245 = 104
tv271 = 112
tv269 = 120
buf$ = 144
esize$ = 152
expand_decodebuffer PROC				; COMDAT

; 202  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 203  :     Py_ssize_t orgpos, orgsize;
; 204  : 
; 205  :     orgpos = (Py_ssize_t)(buf->outbuf - PyUnicode_AS_UNICODE(buf->outobj));

  00011	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00019	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0001d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00021	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00027	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0002c	85 c0		 test	 eax, eax
  0002e	75 1c		 jne	 SHORT $LN4@expand_dec
  00030	41 b8 cd 00 00
	00		 mov	 r8d, 205		; 000000cdH
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@ELNPGHAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004a	33 c0		 xor	 eax, eax
$LN4@expand_dec:
  0004c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00054	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00058	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0005d	74 17		 je	 SHORT $LN5@expand_dec
  0005f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00067	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0006b	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0006f	48 89 44 24 30	 mov	 QWORD PTR tv82[rsp], rax
  00074	eb 16		 jmp	 SHORT $LN6@expand_dec
$LN5@expand_dec:
  00076	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0007e	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00082	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00087	48 89 44 24 30	 mov	 QWORD PTR tv82[rsp], rax
$LN6@expand_dec:
  0008c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00094	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv82[rsp]
  00099	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0009d	48 2b c1	 sub	 rax, rcx
  000a0	48 d1 f8	 sar	 rax, 1
  000a3	48 89 44 24 28	 mov	 QWORD PTR orgpos$[rsp], rax

; 206  :     orgsize = PyUnicode_GET_SIZE(buf->outobj);

  000a8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  000b0	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  000b4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000be	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000c3	85 c0		 test	 eax, eax
  000c5	75 1c		 jne	 SHORT $LN7@expand_dec
  000c7	41 b8 ce 00 00
	00		 mov	 r8d, 206		; 000000ceH
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@ELNPGHAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e1	33 c0		 xor	 eax, eax
$LN7@expand_dec:
  000e3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  000eb	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  000ef	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  000f4	74 70		 je	 SHORT $LN13@expand_dec
  000f6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  000fe	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00102	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00105	c1 e8 06	 shr	 eax, 6
  00108	83 e0 01	 and	 eax, 1
  0010b	85 c0		 test	 eax, eax
  0010d	74 30		 je	 SHORT $LN8@expand_dec
  0010f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00117	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0011b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0011e	c1 e8 05	 shr	 eax, 5
  00121	83 e0 01	 and	 eax, 1
  00124	85 c0		 test	 eax, eax
  00126	74 17		 je	 SHORT $LN8@expand_dec
  00128	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00130	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00134	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00138	48 89 44 24 38	 mov	 QWORD PTR tv142[rsp], rax
  0013d	eb 18		 jmp	 SHORT $LN9@expand_dec
$LN8@expand_dec:
  0013f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00147	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0014b	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00152	48 89 44 24 38	 mov	 QWORD PTR tv142[rsp], rax
$LN9@expand_dec:
  00157	48 8b 44 24 38	 mov	 rax, QWORD PTR tv142[rsp]
  0015c	48 89 44 24 40	 mov	 QWORD PTR tv168[rsp], rax
  00161	e9 ab 00 00 00	 jmp	 $LN14@expand_dec
$LN13@expand_dec:
  00166	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0016e	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00172	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00177	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0017f	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00183	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00188	75 1c		 jne	 SHORT $LN10@expand_dec
  0018a	41 b8 ce 00 00
	00		 mov	 r8d, 206		; 000000ceH
  00190	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@LMFKBMGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ@
  0019e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a4	33 c0		 xor	 eax, eax
$LN10@expand_dec:
  001a6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  001ae	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  001b2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001b5	c1 e8 06	 shr	 eax, 6
  001b8	83 e0 01	 and	 eax, 1
  001bb	85 c0		 test	 eax, eax
  001bd	74 30		 je	 SHORT $LN11@expand_dec
  001bf	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  001c7	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  001cb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001ce	c1 e8 05	 shr	 eax, 5
  001d1	83 e0 01	 and	 eax, 1
  001d4	85 c0		 test	 eax, eax
  001d6	74 17		 je	 SHORT $LN11@expand_dec
  001d8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  001e0	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  001e4	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001e8	48 89 44 24 48	 mov	 QWORD PTR tv166[rsp], rax
  001ed	eb 18		 jmp	 SHORT $LN12@expand_dec
$LN11@expand_dec:
  001ef	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  001f7	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  001fb	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00202	48 89 44 24 48	 mov	 QWORD PTR tv166[rsp], rax
$LN12@expand_dec:
  00207	48 8b 44 24 48	 mov	 rax, QWORD PTR tv166[rsp]
  0020c	48 89 44 24 40	 mov	 QWORD PTR tv168[rsp], rax
$LN14@expand_dec:
  00211	48 8b 44 24 40	 mov	 rax, QWORD PTR tv168[rsp]
  00216	48 89 44 24 20	 mov	 QWORD PTR orgsize$[rsp], rax

; 207  :     if (PyUnicode_Resize(&buf->outobj, orgsize + (
; 208  :         esize < (orgsize >> 1) ? (orgsize >> 1) | 1 : esize)) == -1)

  0021b	48 8b 44 24 20	 mov	 rax, QWORD PTR orgsize$[rsp]
  00220	48 d1 f8	 sar	 rax, 1
  00223	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR esize$[rsp], rax
  0022b	7d 13		 jge	 SHORT $LN15@expand_dec
  0022d	48 8b 44 24 20	 mov	 rax, QWORD PTR orgsize$[rsp]
  00232	48 d1 f8	 sar	 rax, 1
  00235	48 83 c8 01	 or	 rax, 1
  00239	48 89 44 24 50	 mov	 QWORD PTR tv174[rsp], rax
  0023e	eb 0d		 jmp	 SHORT $LN16@expand_dec
$LN15@expand_dec:
  00240	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR esize$[rsp]
  00248	48 89 44 24 50	 mov	 QWORD PTR tv174[rsp], rax
$LN16@expand_dec:
  0024d	48 8b 44 24 50	 mov	 rax, QWORD PTR tv174[rsp]
  00252	48 8b 4c 24 20	 mov	 rcx, QWORD PTR orgsize$[rsp]
  00257	48 03 c8	 add	 rcx, rax
  0025a	48 8b c1	 mov	 rax, rcx
  0025d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00265	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00269	48 8b d0	 mov	 rdx, rax
  0026c	e8 00 00 00 00	 call	 PyUnicode_Resize
  00271	83 f8 ff	 cmp	 eax, -1
  00274	75 0a		 jne	 SHORT $LN1@expand_dec

; 209  :         return -1;

  00276	b8 ff ff ff ff	 mov	 eax, -1
  0027b	e9 95 02 00 00	 jmp	 $LN2@expand_dec
$LN1@expand_dec:

; 210  : 
; 211  :     buf->outbuf = PyUnicode_AS_UNICODE(buf->outobj) + orgpos;

  00280	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00288	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0028c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00290	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00296	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0029b	85 c0		 test	 eax, eax
  0029d	75 1c		 jne	 SHORT $LN17@expand_dec
  0029f	41 b8 d3 00 00
	00		 mov	 r8d, 211		; 000000d3H
  002a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@ELNPGHAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  002b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b9	33 c0		 xor	 eax, eax
$LN17@expand_dec:
  002bb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  002c3	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  002c7	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  002cc	74 17		 je	 SHORT $LN18@expand_dec
  002ce	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  002d6	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  002da	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  002de	48 89 44 24 58	 mov	 QWORD PTR tv198[rsp], rax
  002e3	eb 16		 jmp	 SHORT $LN19@expand_dec
$LN18@expand_dec:
  002e5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  002ed	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  002f1	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  002f6	48 89 44 24 58	 mov	 QWORD PTR tv198[rsp], rax
$LN19@expand_dec:
  002fb	48 8b 44 24 58	 mov	 rax, QWORD PTR tv198[rsp]
  00300	48 8b 4c 24 28	 mov	 rcx, QWORD PTR orgpos$[rsp]
  00305	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00309	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00311	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 212  :     buf->outbuf_end = PyUnicode_AS_UNICODE(buf->outobj)
; 213  :                       + PyUnicode_GET_SIZE(buf->outobj);

  00315	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0031d	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00321	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00325	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0032b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00330	85 c0		 test	 eax, eax
  00332	75 1c		 jne	 SHORT $LN20@expand_dec
  00334	41 b8 d4 00 00
	00		 mov	 r8d, 212		; 000000d4H
  0033a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00341	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@ELNPGHAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00348	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0034e	33 c0		 xor	 eax, eax
$LN20@expand_dec:
  00350	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00358	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0035c	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00361	74 17		 je	 SHORT $LN21@expand_dec
  00363	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0036b	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0036f	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00373	48 89 44 24 60	 mov	 QWORD PTR tv219[rsp], rax
  00378	eb 16		 jmp	 SHORT $LN22@expand_dec
$LN21@expand_dec:
  0037a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00382	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00386	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  0038b	48 89 44 24 60	 mov	 QWORD PTR tv219[rsp], rax
$LN22@expand_dec:
  00390	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00398	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0039c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003a0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003a6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003ab	85 c0		 test	 eax, eax
  003ad	75 1c		 jne	 SHORT $LN23@expand_dec
  003af	41 b8 d5 00 00
	00		 mov	 r8d, 213		; 000000d5H
  003b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  003bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@ELNPGHAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  003c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003c9	33 c0		 xor	 eax, eax
$LN23@expand_dec:
  003cb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  003d3	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  003d7	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  003dc	74 70		 je	 SHORT $LN29@expand_dec
  003de	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  003e6	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  003ea	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003ed	c1 e8 06	 shr	 eax, 6
  003f0	83 e0 01	 and	 eax, 1
  003f3	85 c0		 test	 eax, eax
  003f5	74 30		 je	 SHORT $LN24@expand_dec
  003f7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  003ff	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00403	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00406	c1 e8 05	 shr	 eax, 5
  00409	83 e0 01	 and	 eax, 1
  0040c	85 c0		 test	 eax, eax
  0040e	74 17		 je	 SHORT $LN24@expand_dec
  00410	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00418	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0041c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00420	48 89 44 24 68	 mov	 QWORD PTR tv245[rsp], rax
  00425	eb 18		 jmp	 SHORT $LN25@expand_dec
$LN24@expand_dec:
  00427	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0042f	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00433	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0043a	48 89 44 24 68	 mov	 QWORD PTR tv245[rsp], rax
$LN25@expand_dec:
  0043f	48 8b 44 24 68	 mov	 rax, QWORD PTR tv245[rsp]
  00444	48 89 44 24 70	 mov	 QWORD PTR tv271[rsp], rax
  00449	e9 ab 00 00 00	 jmp	 $LN30@expand_dec
$LN29@expand_dec:
  0044e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00456	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0045a	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  0045f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00467	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0046b	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00470	75 1c		 jne	 SHORT $LN26@expand_dec
  00472	41 b8 d5 00 00
	00		 mov	 r8d, 213		; 000000d5H
  00478	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  0047f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@LMFKBMGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ@
  00486	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0048c	33 c0		 xor	 eax, eax
$LN26@expand_dec:
  0048e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00496	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0049a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0049d	c1 e8 06	 shr	 eax, 6
  004a0	83 e0 01	 and	 eax, 1
  004a3	85 c0		 test	 eax, eax
  004a5	74 30		 je	 SHORT $LN27@expand_dec
  004a7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  004af	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  004b3	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004b6	c1 e8 05	 shr	 eax, 5
  004b9	83 e0 01	 and	 eax, 1
  004bc	85 c0		 test	 eax, eax
  004be	74 17		 je	 SHORT $LN27@expand_dec
  004c0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  004c8	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  004cc	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  004d0	48 89 44 24 78	 mov	 QWORD PTR tv269[rsp], rax
  004d5	eb 18		 jmp	 SHORT $LN28@expand_dec
$LN27@expand_dec:
  004d7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  004df	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  004e3	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  004ea	48 89 44 24 78	 mov	 QWORD PTR tv269[rsp], rax
$LN28@expand_dec:
  004ef	48 8b 44 24 78	 mov	 rax, QWORD PTR tv269[rsp]
  004f4	48 89 44 24 70	 mov	 QWORD PTR tv271[rsp], rax
$LN30@expand_dec:
  004f9	48 8b 44 24 60	 mov	 rax, QWORD PTR tv219[rsp]
  004fe	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv271[rsp]
  00503	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00507	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0050f	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 214  : 
; 215  :     return 0;

  00513	33 c0		 xor	 eax, eax
$LN2@expand_dec:

; 216  : }

  00515	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0051c	c3		 ret	 0
expand_decodebuffer ENDP
_TEXT	ENDS
EXTRN	_PyObject_DebugFree:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$multibytecodec_dealloc DD imagerel multibytecodec_dealloc
	DD	imagerel multibytecodec_dealloc+24
	DD	imagerel $unwind$multibytecodec_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$multibytecodec_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT multibytecodec_dealloc
_TEXT	SEGMENT
self$ = 48
multibytecodec_dealloc PROC				; COMDAT

; 706  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 707  :     PyObject_Del(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 708  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
multibytecodec_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@NIIDKFNI@O?$HMi?3encode?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbiencoder_encode DD imagerel mbiencoder_encode
	DD	imagerel mbiencoder_encode+109
	DD	imagerel $unwind$mbiencoder_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbiencoder_encode DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0L@NIIDKFNI@O?$HMi?3encode?$AA@
CONST	SEGMENT
??_C@_0L@NIIDKFNI@O?$HMi?3encode?$AA@ DB 'O|i:encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbiencoder_encode
_TEXT	SEGMENT
final$ = 48
data$ = 56
self$ = 80
args$ = 88
kwargs$ = 96
mbiencoder_encode PROC					; COMDAT

; 906  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 907  :     PyObject *data;
; 908  :     int final = 0;

  00013	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 909  : 
; 910  :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|i:encode",
; 911  :                     incrementalkwarglist, &data, &final))

  0001b	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  00020	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00025	48 8d 44 24 38	 lea	 rax, QWORD PTR data$[rsp]
  0002a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:incrementalkwarglist
  00036	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@NIIDKFNI@O?$HMi?3encode?$AA@
  0003d	48 8b 54 24 60	 mov	 rdx, QWORD PTR kwargs$[rsp]
  00042	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00047	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0004c	85 c0		 test	 eax, eax
  0004e	75 04		 jne	 SHORT $LN1@mbiencoder

; 912  :         return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	eb 14		 jmp	 SHORT $LN2@mbiencoder
$LN1@mbiencoder:

; 913  : 
; 914  :     return encoder_encode_stateful(STATEFUL_ECTX(self), data, final);

  00054	44 8b 44 24 30	 mov	 r8d, DWORD PTR final$[rsp]
  00059	48 8b 54 24 38	 mov	 rdx, QWORD PTR data$[rsp]
  0005e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00063	e8 00 00 00 00	 call	 encoder_encode_stateful
$LN2@mbiencoder:

; 915  : }

  00068	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006c	c3		 ret	 0
mbiencoder_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@KFMEJOOM@pending?5buffer?5overflow?$AA@ ; `string'
PUBLIC	??_C@_1DA@JMDIELKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CE@PKCMPAJM@couldn?8t?5convert?5the?5object?5to?5s@ ; `string'
EXTRN	PyMem_Free:PROC
EXTRN	PyExc_UnicodeError:QWORD
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_encode_stateful DD imagerel encoder_encode_stateful
	DD	imagerel encoder_encode_stateful+1283
	DD	imagerel $unwind$encoder_encode_stateful
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_encode_stateful DD 021601H
	DD	0130116H
xdata	ENDS
;	COMDAT ??_C@_0BI@KFMEJOOM@pending?5buffer?5overflow?$AA@
CONST	SEGMENT
??_C@_0BI@KFMEJOOM@pending?5buffer?5overflow?$AA@ DB 'pending buffer over'
	DB	'flow', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@JMDIELKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@JMDIELKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PKCMPAJM@couldn?8t?5convert?5the?5object?5to?5s@
CONST	SEGMENT
??_C@_0CE@PKCMPAJM@couldn?8t?5convert?5the?5object?5to?5s@ DB 'couldn''t '
	DB	'convert the object to str.', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT encoder_encode_stateful
_TEXT	SEGMENT
inbuf$ = 48
datalen$ = 56
inbuf_end$ = 64
data$ = 72
origpending$ = 80
r$ = 88
inbuf_tmp$ = 96
ucvt$ = 104
tv95 = 112
tv151 = 120
tv172 = 128
tv177 = 136
ctx$ = 160
unistr$ = 168
final$ = 176
encoder_encode_stateful PROC				; COMDAT

; 753  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 754  :     PyObject *ucvt, *r = NULL;

  00016	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR r$[rsp], 0

; 755  :     Py_UNICODE *inbuf, *inbuf_end, *inbuf_tmp = NULL;

  0001f	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR inbuf_tmp$[rsp], 0

; 756  :     Py_ssize_t datalen, origpending;
; 757  :     wchar_t *data;
; 758  : 
; 759  :     if (PyUnicode_Check(unistr))

  00028	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unistr$[rsp]
  00030	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00034	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0003f	85 c0		 test	 eax, eax
  00041	74 0b		 je	 SHORT $LN28@encoder_en

; 760  :         ucvt = NULL;

  00043	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR ucvt$[rsp], 0

; 761  :     else {

  0004c	eb 72		 jmp	 SHORT $LN27@encoder_en
$LN28@encoder_en:

; 762  :         unistr = ucvt = PyObject_Str(unistr);

  0004e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR unistr$[rsp]
  00056	e8 00 00 00 00	 call	 PyObject_Str
  0005b	48 89 44 24 68	 mov	 QWORD PTR ucvt$[rsp], rax
  00060	48 8b 44 24 68	 mov	 rax, QWORD PTR ucvt$[rsp]
  00065	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR unistr$[rsp], rax

; 763  :         if (unistr == NULL)

  0006d	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR unistr$[rsp], 0
  00076	75 09		 jne	 SHORT $LN26@encoder_en

; 764  :             return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 7c 04 00 00	 jmp	 $LN29@encoder_en
  0007f	eb 3f		 jmp	 SHORT $LN25@encoder_en
$LN26@encoder_en:

; 765  :         else if (!PyUnicode_Check(unistr)) {

  00081	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unistr$[rsp]
  00089	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00093	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00098	85 c0		 test	 eax, eax
  0009a	75 24		 jne	 SHORT $LN24@encoder_en

; 766  :             PyErr_SetString(PyExc_TypeError,
; 767  :                 "couldn't convert the object to str.");

  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@PKCMPAJM@couldn?8t?5convert?5the?5object?5to?5s@
  000a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000aa	e8 00 00 00 00	 call	 PyErr_SetString

; 768  :             Py_DECREF(ucvt);

  000af	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ucvt$[rsp]
  000b4	e8 00 00 00 00	 call	 _Py_DecRef

; 769  :             return NULL;

  000b9	33 c0		 xor	 eax, eax
  000bb	e9 3b 04 00 00	 jmp	 $LN29@encoder_en
$LN24@encoder_en:
$LN25@encoder_en:
$LN27@encoder_en:

; 770  :         }
; 771  :     }
; 772  : 
; 773  :     data = PyUnicode_AsUnicodeAndSize(unistr, &datalen);

  000c0	48 8d 54 24 38	 lea	 rdx, QWORD PTR datalen$[rsp]
  000c5	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR unistr$[rsp]
  000cd	e8 00 00 00 00	 call	 PyUnicode_AsUnicodeAndSize
  000d2	48 89 44 24 48	 mov	 QWORD PTR data$[rsp], rax

; 774  :     if (data == NULL)

  000d7	48 83 7c 24 48
	00		 cmp	 QWORD PTR data$[rsp], 0
  000dd	75 05		 jne	 SHORT $LN23@encoder_en

; 775  :         goto errorexit;

  000df	e9 d3 03 00 00	 jmp	 $errorexit$21349
$LN23@encoder_en:

; 776  :     origpending = ctx->pendingsize;

  000e4	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  000ec	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000f3	48 89 44 24 50	 mov	 QWORD PTR origpending$[rsp], rax

; 777  : 
; 778  :     if (origpending > 0) {

  000f8	48 83 7c 24 50
	00		 cmp	 QWORD PTR origpending$[rsp], 0
  000fe	0f 8e a3 01 00
	00		 jle	 $LN22@encoder_en

; 779  :         if (datalen > PY_SSIZE_T_MAX - ctx->pendingsize) {

  00104	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0010e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  00116	48 2b 81 80 00
	00 00		 sub	 rax, QWORD PTR [rcx+128]
  0011d	48 39 44 24 38	 cmp	 QWORD PTR datalen$[rsp], rax
  00122	7e 0a		 jle	 SHORT $LN21@encoder_en

; 780  :             PyErr_NoMemory();

  00124	e8 00 00 00 00	 call	 PyErr_NoMemory

; 781  :             /* inbuf_tmp == NULL */
; 782  :             goto errorexit;

  00129	e9 89 03 00 00	 jmp	 $errorexit$21349
$LN21@encoder_en:

; 783  :         }
; 784  :         inbuf_tmp = PyMem_New(Py_UNICODE, datalen + ctx->pendingsize);

  0012e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00136	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0013d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR datalen$[rsp]
  00142	48 03 c8	 add	 rcx, rax
  00145	48 8b c1	 mov	 rax, rcx
  00148	48 b9 ff ff ff
	ff ff ff ff 3f	 mov	 rcx, 4611686018427387903 ; 3fffffffffffffffH
  00152	48 3b c1	 cmp	 rax, rcx
  00155	76 0b		 jbe	 SHORT $LN31@encoder_en
  00157	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv95[rsp], 0
  00160	eb 2a		 jmp	 SHORT $LN32@encoder_en
$LN31@encoder_en:
  00162	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  0016a	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00171	48 8b 4c 24 38	 mov	 rcx, QWORD PTR datalen$[rsp]
  00176	48 03 c8	 add	 rcx, rax
  00179	48 8b c1	 mov	 rax, rcx
  0017c	48 d1 e0	 shl	 rax, 1
  0017f	48 8b c8	 mov	 rcx, rax
  00182	e8 00 00 00 00	 call	 PyMem_Malloc
  00187	48 89 44 24 70	 mov	 QWORD PTR tv95[rsp], rax
$LN32@encoder_en:
  0018c	48 8b 44 24 70	 mov	 rax, QWORD PTR tv95[rsp]
  00191	48 89 44 24 60	 mov	 QWORD PTR inbuf_tmp$[rsp], rax

; 785  :         if (inbuf_tmp == NULL)

  00196	48 83 7c 24 60
	00		 cmp	 QWORD PTR inbuf_tmp$[rsp], 0
  0019c	75 05		 jne	 SHORT $LN20@encoder_en

; 786  :             goto errorexit;

  0019e	e9 14 03 00 00	 jmp	 $errorexit$21349
$LN20@encoder_en:

; 787  :         memcpy(inbuf_tmp, ctx->pending,
; 788  :             Py_UNICODE_SIZE * ctx->pendingsize);

  001a3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  001ab	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  001b2	48 d1 e0	 shl	 rax, 1
  001b5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  001bd	48 83 c1 78	 add	 rcx, 120		; 00000078H
  001c1	4c 8b c0	 mov	 r8, rax
  001c4	48 8b d1	 mov	 rdx, rcx
  001c7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inbuf_tmp$[rsp]
  001cc	e8 00 00 00 00	 call	 memcpy

; 789  :         memcpy(inbuf_tmp + ctx->pendingsize,
; 790  :             PyUnicode_AS_UNICODE(unistr),
; 791  :             Py_UNICODE_SIZE * datalen);

  001d1	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unistr$[rsp]
  001d9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001dd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001e3	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001e8	85 c0		 test	 eax, eax
  001ea	75 1c		 jne	 SHORT $LN33@encoder_en
  001ec	41 b8 16 03 00
	00		 mov	 r8d, 790		; 00000316H
  001f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  001f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@JMDIELKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00200	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00206	33 c0		 xor	 eax, eax
$LN33@encoder_en:
  00208	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unistr$[rsp]
  00210	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00215	74 13		 je	 SHORT $LN34@encoder_en
  00217	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unistr$[rsp]
  0021f	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00223	48 89 44 24 78	 mov	 QWORD PTR tv151[rsp], rax
  00228	eb 12		 jmp	 SHORT $LN35@encoder_en
$LN34@encoder_en:
  0022a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR unistr$[rsp]
  00232	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00237	48 89 44 24 78	 mov	 QWORD PTR tv151[rsp], rax
$LN35@encoder_en:
  0023c	48 8b 44 24 38	 mov	 rax, QWORD PTR datalen$[rsp]
  00241	48 03 c0	 add	 rax, rax
  00244	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  0024c	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00253	48 8b 54 24 60	 mov	 rdx, QWORD PTR inbuf_tmp$[rsp]
  00258	48 8d 0c 4a	 lea	 rcx, QWORD PTR [rdx+rcx*2]
  0025c	4c 8b c0	 mov	 r8, rax
  0025f	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv151[rsp]
  00264	e8 00 00 00 00	 call	 memcpy

; 792  :         datalen += ctx->pendingsize;

  00269	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00271	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00278	48 8b 4c 24 38	 mov	 rcx, QWORD PTR datalen$[rsp]
  0027d	48 03 c8	 add	 rcx, rax
  00280	48 8b c1	 mov	 rax, rcx
  00283	48 89 44 24 38	 mov	 QWORD PTR datalen$[rsp], rax

; 793  :         ctx->pendingsize = 0;

  00288	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00290	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 794  :         inbuf = inbuf_tmp;

  0029b	48 8b 44 24 60	 mov	 rax, QWORD PTR inbuf_tmp$[rsp]
  002a0	48 89 44 24 30	 mov	 QWORD PTR inbuf$[rsp], rax

; 795  :     }
; 796  :     else

  002a5	eb 7e		 jmp	 SHORT $LN19@encoder_en
$LN22@encoder_en:

; 797  :         inbuf = (Py_UNICODE *)PyUnicode_AS_UNICODE(unistr);

  002a7	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unistr$[rsp]
  002af	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002b3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002b9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002be	85 c0		 test	 eax, eax
  002c0	75 1c		 jne	 SHORT $LN36@encoder_en
  002c2	41 b8 1d 03 00
	00		 mov	 r8d, 797		; 0000031dH
  002c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  002cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@JMDIELKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  002d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002dc	33 c0		 xor	 eax, eax
$LN36@encoder_en:
  002de	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unistr$[rsp]
  002e6	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  002eb	74 16		 je	 SHORT $LN37@encoder_en
  002ed	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unistr$[rsp]
  002f5	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  002f9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv172[rsp], rax
  00301	eb 15		 jmp	 SHORT $LN38@encoder_en
$LN37@encoder_en:
  00303	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR unistr$[rsp]
  0030b	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00310	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv172[rsp], rax
$LN38@encoder_en:
  00318	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv172[rsp]
  00320	48 89 44 24 30	 mov	 QWORD PTR inbuf$[rsp], rax
$LN19@encoder_en:

; 798  : 
; 799  :     inbuf_end = inbuf + datalen;

  00325	48 8b 44 24 30	 mov	 rax, QWORD PTR inbuf$[rsp]
  0032a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR datalen$[rsp]
  0032f	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00333	48 89 44 24 40	 mov	 QWORD PTR inbuf_end$[rsp], rax

; 800  : 
; 801  :     r = multibytecodec_encode(ctx->codec, &ctx->state,
; 802  :                     (const Py_UNICODE **)&inbuf, datalen,
; 803  :                     ctx->errors, final ? MBENC_FLUSH | MBENC_RESET : 0);

  00338	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR final$[rsp], 0
  00340	74 0d		 je	 SHORT $LN39@encoder_en
  00342	c7 84 24 88 00
	00 00 03 00 00
	00		 mov	 DWORD PTR tv177[rsp], 3
  0034d	eb 0b		 jmp	 SHORT $LN40@encoder_en
$LN39@encoder_en:
  0034f	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv177[rsp], 0
$LN40@encoder_en:
  0035a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00362	48 83 c0 68	 add	 rax, 104		; 00000068H
  00366	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv177[rsp]
  0036d	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00371	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  00379	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0037d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00382	4c 8b 4c 24 38	 mov	 r9, QWORD PTR datalen$[rsp]
  00387	4c 8d 44 24 30	 lea	 r8, QWORD PTR inbuf$[rsp]
  0038c	48 8b d0	 mov	 rdx, rax
  0038f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00397	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0039b	e8 00 00 00 00	 call	 multibytecodec_encode
  003a0	48 89 44 24 58	 mov	 QWORD PTR r$[rsp], rax

; 804  :     if (r == NULL) {

  003a5	48 83 7c 24 58
	00		 cmp	 QWORD PTR r$[rsp], 0
  003ab	75 42		 jne	 SHORT $LN18@encoder_en

; 805  :         /* recover the original pending buffer */
; 806  :         if (origpending > 0)

  003ad	48 83 7c 24 50
	00		 cmp	 QWORD PTR origpending$[rsp], 0
  003b3	7e 21		 jle	 SHORT $LN17@encoder_en

; 807  :             memcpy(ctx->pending, inbuf_tmp,
; 808  :                 Py_UNICODE_SIZE * origpending);

  003b5	48 8b 44 24 50	 mov	 rax, QWORD PTR origpending$[rsp]
  003ba	48 d1 e0	 shl	 rax, 1
  003bd	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  003c5	48 83 c1 78	 add	 rcx, 120		; 00000078H
  003c9	4c 8b c0	 mov	 r8, rax
  003cc	48 8b 54 24 60	 mov	 rdx, QWORD PTR inbuf_tmp$[rsp]
  003d1	e8 00 00 00 00	 call	 memcpy
$LN17@encoder_en:

; 809  :         ctx->pendingsize = origpending;

  003d6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  003de	48 8b 4c 24 50	 mov	 rcx, QWORD PTR origpending$[rsp]
  003e3	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 810  :         goto errorexit;

  003ea	e9 c8 00 00 00	 jmp	 $errorexit$21349
$LN18@encoder_en:

; 811  :     }
; 812  : 
; 813  :     if (inbuf < inbuf_end) {

  003ef	48 8b 44 24 40	 mov	 rax, QWORD PTR inbuf_end$[rsp]
  003f4	48 39 44 24 30	 cmp	 QWORD PTR inbuf$[rsp], rax
  003f9	0f 83 87 00 00
	00		 jae	 $LN16@encoder_en

; 814  :         ctx->pendingsize = (Py_ssize_t)(inbuf_end - inbuf);

  003ff	48 8b 44 24 30	 mov	 rax, QWORD PTR inbuf$[rsp]
  00404	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inbuf_end$[rsp]
  00409	48 2b c8	 sub	 rcx, rax
  0040c	48 8b c1	 mov	 rax, rcx
  0040f	48 d1 f8	 sar	 rax, 1
  00412	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  0041a	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 815  :         if (ctx->pendingsize > MAXENCPENDING) {

  00421	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00429	48 83 b8 80 00
	00 00 02	 cmp	 QWORD PTR [rax+128], 2
  00431	7e 28		 jle	 SHORT $LN15@encoder_en

; 816  :             /* normal codecs can't reach here */
; 817  :             ctx->pendingsize = 0;

  00433	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  0043b	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 818  :             PyErr_SetString(PyExc_UnicodeError,
; 819  :                             "pending buffer overflow");

  00446	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFMEJOOM@pending?5buffer?5overflow?$AA@
  0044d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_UnicodeError
  00454	e8 00 00 00 00	 call	 PyErr_SetString

; 820  :             goto errorexit;

  00459	eb 5c		 jmp	 SHORT $errorexit$21349
$LN15@encoder_en:

; 821  :         }
; 822  :         memcpy(ctx->pending, inbuf,
; 823  :             ctx->pendingsize * Py_UNICODE_SIZE);

  0045b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ctx$[rsp]
  00463	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0046a	48 d1 e0	 shl	 rax, 1
  0046d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR ctx$[rsp]
  00475	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00479	4c 8b c0	 mov	 r8, rax
  0047c	48 8b 54 24 30	 mov	 rdx, QWORD PTR inbuf$[rsp]
  00481	e8 00 00 00 00	 call	 memcpy
$LN16@encoder_en:

; 824  :     }
; 825  : 
; 826  :     if (inbuf_tmp != NULL)

  00486	48 83 7c 24 60
	00		 cmp	 QWORD PTR inbuf_tmp$[rsp], 0
  0048c	74 0a		 je	 SHORT $LN14@encoder_en

; 827  :         PyMem_Del(inbuf_tmp);

  0048e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inbuf_tmp$[rsp]
  00493	e8 00 00 00 00	 call	 PyMem_Free
$LN14@encoder_en:
$LN13@encoder_en:

; 828  :     Py_XDECREF(ucvt);

  00498	48 83 7c 24 68
	00		 cmp	 QWORD PTR ucvt$[rsp], 0
  0049e	74 0a		 je	 SHORT $LN10@encoder_en
  004a0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ucvt$[rsp]
  004a5	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@encoder_en:
  004aa	33 c0		 xor	 eax, eax
  004ac	85 c0		 test	 eax, eax
  004ae	75 e8		 jne	 SHORT $LN13@encoder_en

; 829  :     return r;

  004b0	48 8b 44 24 58	 mov	 rax, QWORD PTR r$[rsp]
  004b5	eb 44		 jmp	 SHORT $LN29@encoder_en
$errorexit$21349:

; 830  : 
; 831  : errorexit:
; 832  :     if (inbuf_tmp != NULL)

  004b7	48 83 7c 24 60
	00		 cmp	 QWORD PTR inbuf_tmp$[rsp], 0
  004bd	74 0a		 je	 SHORT $LN9@encoder_en

; 833  :         PyMem_Del(inbuf_tmp);

  004bf	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inbuf_tmp$[rsp]
  004c4	e8 00 00 00 00	 call	 PyMem_Free
$LN9@encoder_en:
$LN8@encoder_en:

; 834  :     Py_XDECREF(r);

  004c9	48 83 7c 24 58
	00		 cmp	 QWORD PTR r$[rsp], 0
  004cf	74 0a		 je	 SHORT $LN5@encoder_en
  004d1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR r$[rsp]
  004d6	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@encoder_en:
  004db	33 c0		 xor	 eax, eax
  004dd	85 c0		 test	 eax, eax
  004df	75 e8		 jne	 SHORT $LN8@encoder_en
$LN4@encoder_en:

; 835  :     Py_XDECREF(ucvt);

  004e1	48 83 7c 24 68
	00		 cmp	 QWORD PTR ucvt$[rsp], 0
  004e7	74 0a		 je	 SHORT $LN1@encoder_en
  004e9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ucvt$[rsp]
  004ee	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@encoder_en:
  004f3	33 c0		 xor	 eax, eax
  004f5	85 c0		 test	 eax, eax
  004f7	75 e8		 jne	 SHORT $LN4@encoder_en

; 836  :     return NULL;

  004f9	33 c0		 xor	 eax, eax
$LN29@encoder_en:

; 837  : }

  004fb	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00502	c3		 ret	 0
encoder_encode_stateful ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbiencoder_reset DD imagerel mbiencoder_reset
	DD	imagerel mbiencoder_reset+147
	DD	imagerel $unwind$mbiencoder_reset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbiencoder_reset DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mbiencoder_reset
_TEXT	SEGMENT
outbuf$ = 32
r$ = 40
buffer$ = 48
tv81 = 56
self$ = 80
mbiencoder_reset PROC					; COMDAT

; 919  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 920  :     /* Longest output: 4 bytes (b'\x0F\x1F(B') with ISO 2022 */
; 921  :     unsigned char buffer[4], *outbuf;
; 922  :     Py_ssize_t r;
; 923  :     if (self->codec->encreset != NULL) {

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00017	74 52		 je	 SHORT $LN2@mbiencoder@2

; 924  :         outbuf = buffer;

  00019	48 8d 44 24 30	 lea	 rax, QWORD PTR buffer$[rsp]
  0001e	48 89 44 24 20	 mov	 QWORD PTR outbuf$[rsp], rax

; 925  :         r = self->codec->encreset(&self->state, self->codec->config,
; 926  :                                   &outbuf, sizeof(buffer));

  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00028	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0002c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00031	48 83 c1 68	 add	 rcx, 104		; 00000068H
  00035	48 8b 54 24 50	 mov	 rdx, QWORD PTR self$[rsp]
  0003a	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0003e	48 89 54 24 38	 mov	 QWORD PTR tv81[rsp], rdx
  00043	41 b9 04 00 00
	00		 mov	 r9d, 4
  00049	4c 8d 44 24 20	 lea	 r8, QWORD PTR outbuf$[rsp]
  0004e	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00052	48 8b 44 24 38	 mov	 rax, QWORD PTR tv81[rsp]
  00057	ff 50 28	 call	 QWORD PTR [rax+40]
  0005a	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax

; 927  :         if (r != 0)

  0005f	48 83 7c 24 28
	00		 cmp	 QWORD PTR r$[rsp], 0
  00065	74 04		 je	 SHORT $LN1@mbiencoder@2

; 928  :             return NULL;

  00067	33 c0		 xor	 eax, eax
  00069	eb 23		 jmp	 SHORT $LN3@mbiencoder@2
$LN1@mbiencoder@2:
$LN2@mbiencoder@2:

; 929  :     }
; 930  :     self->pendingsize = 0;

  0006b	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00070	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 931  :     Py_RETURN_NONE;

  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00082	e8 00 00 00 00	 call	 _Py_IncRef
  00087	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@mbiencoder@2:

; 932  : }

  0008e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00092	c3		 ret	 0
mbiencoder_reset ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@ ; `string'
PUBLIC	??_C@_05GPLHJCMP@codec?$AA@			; `string'
PUBLIC	??_C@_0BG@CIPFGIMM@?$HMs?3IncrementalEncoder?$AA@ ; `string'
EXTRN	PyObject_GetAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbiencoder_new DD imagerel mbiencoder_new
	DD	imagerel mbiencoder_new+407
	DD	imagerel $unwind$mbiencoder_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbiencoder_new DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@
CONST	SEGMENT
??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@ DB 'codec is unexpect'
	DB	'ed type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPLHJCMP@codec?$AA@
CONST	SEGMENT
??_C@_05GPLHJCMP@codec?$AA@ DB 'codec', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CIPFGIMM@?$HMs?3IncrementalEncoder?$AA@
CONST	SEGMENT
??_C@_0BG@CIPFGIMM@?$HMs?3IncrementalEncoder?$AA@ DB '|s:IncrementalEncod'
	DB	'er', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbiencoder_new
_TEXT	SEGMENT
errors$ = 48
codec$ = 56
self$ = 64
tv144 = 72
type$ = 96
args$ = 104
kwds$ = 112
mbiencoder_new PROC					; COMDAT

; 944  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 945  :     MultibyteIncrementalEncoderObject *self;
; 946  :     PyObject *codec = NULL;

  00013	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR codec$[rsp], 0

; 947  :     char *errors = NULL;

  0001c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 948  : 
; 949  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|s:IncrementalEncoder",
; 950  :                                      incnewkwarglist, &errors))

  00025	48 8d 44 24 30	 lea	 rax, QWORD PTR errors$[rsp]
  0002a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:incnewkwarglist
  00036	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@CIPFGIMM@?$HMs?3IncrementalEncoder?$AA@
  0003d	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwds$[rsp]
  00042	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00047	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0004c	85 c0		 test	 eax, eax
  0004e	75 07		 jne	 SHORT $LN14@mbiencoder@3

; 951  :         return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	e9 3b 01 00 00	 jmp	 $LN15@mbiencoder@3
$LN14@mbiencoder@3:

; 952  : 
; 953  :     self = (MultibyteIncrementalEncoderObject *)type->tp_alloc(type, 0);

  00057	33 d2		 xor	 edx, edx
  00059	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  0005e	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00063	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00069	48 89 44 24 40	 mov	 QWORD PTR self$[rsp], rax

; 954  :     if (self == NULL)

  0006e	48 83 7c 24 40
	00		 cmp	 QWORD PTR self$[rsp], 0
  00074	75 07		 jne	 SHORT $LN13@mbiencoder@3

; 955  :         return NULL;

  00076	33 c0		 xor	 eax, eax
  00078	e9 15 01 00 00	 jmp	 $LN15@mbiencoder@3
$LN13@mbiencoder@3:

; 956  : 
; 957  :     codec = PyObject_GetAttrString((PyObject *)type, "codec");

  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GPLHJCMP@codec?$AA@
  00084	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  00089	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0008e	48 89 44 24 38	 mov	 QWORD PTR codec$[rsp], rax

; 958  :     if (codec == NULL)

  00093	48 83 7c 24 38
	00		 cmp	 QWORD PTR codec$[rsp], 0
  00099	75 05		 jne	 SHORT $LN12@mbiencoder@3

; 959  :         goto errorexit;

  0009b	e9 c0 00 00 00	 jmp	 $errorexit$21523
$LN12@mbiencoder@3:

; 960  :     if (!MultibyteCodec_Check(codec)) {

  000a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteCodec_Type
  000a7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR codec$[rsp]
  000ac	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000b0	74 18		 je	 SHORT $LN11@mbiencoder@3

; 961  :         PyErr_SetString(PyExc_TypeError, "codec is unexpected type");

  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@
  000b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c0	e8 00 00 00 00	 call	 PyErr_SetString

; 962  :         goto errorexit;

  000c5	e9 96 00 00 00	 jmp	 $errorexit$21523
$LN11@mbiencoder@3:

; 963  :     }
; 964  : 
; 965  :     self->codec = ((MultibyteCodecObject *)codec)->codec;

  000ca	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000cf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR codec$[rsp]
  000d4	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000d8	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 966  :     self->pendingsize = 0;

  000dc	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000e1	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 967  :     self->errors = internal_error_callback(errors);

  000ec	48 8b 4c 24 30	 mov	 rcx, QWORD PTR errors$[rsp]
  000f1	e8 00 00 00 00	 call	 internal_error_callback
  000f6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000fb	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 968  :     if (self->errors == NULL)

  000ff	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00104	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00109	75 02		 jne	 SHORT $LN10@mbiencoder@3

; 969  :         goto errorexit;

  0010b	eb 53		 jmp	 SHORT $errorexit$21523
$LN10@mbiencoder@3:

; 970  :     if (self->codec->encinit != NULL &&
; 971  :         self->codec->encinit(&self->state, self->codec->config) != 0)

  0010d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00112	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00116	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  0011b	74 32		 je	 SHORT $LN9@mbiencoder@3
  0011d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00122	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00126	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0012b	48 83 c1 68	 add	 rcx, 104		; 00000068H
  0012f	48 8b 54 24 40	 mov	 rdx, QWORD PTR self$[rsp]
  00134	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00138	48 89 54 24 48	 mov	 QWORD PTR tv144[rsp], rdx
  0013d	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00141	48 8b 44 24 48	 mov	 rax, QWORD PTR tv144[rsp]
  00146	ff 50 20	 call	 QWORD PTR [rax+32]
  00149	85 c0		 test	 eax, eax
  0014b	74 02		 je	 SHORT $LN9@mbiencoder@3

; 972  :         goto errorexit;

  0014d	eb 11		 jmp	 SHORT $errorexit$21523
$LN9@mbiencoder@3:

; 973  : 
; 974  :     Py_DECREF(codec);

  0014f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR codec$[rsp]
  00154	e8 00 00 00 00	 call	 _Py_DecRef

; 975  :     return (PyObject *)self;

  00159	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0015e	eb 32		 jmp	 SHORT $LN15@mbiencoder@3
$errorexit$21523:
$LN8@mbiencoder@3:

; 976  : 
; 977  : errorexit:
; 978  :     Py_XDECREF(self);

  00160	48 83 7c 24 40
	00		 cmp	 QWORD PTR self$[rsp], 0
  00166	74 0a		 je	 SHORT $LN5@mbiencoder@3
  00168	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0016d	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@mbiencoder@3:
  00172	33 c0		 xor	 eax, eax
  00174	85 c0		 test	 eax, eax
  00176	75 e8		 jne	 SHORT $LN8@mbiencoder@3
$LN4@mbiencoder@3:

; 979  :     Py_XDECREF(codec);

  00178	48 83 7c 24 38
	00		 cmp	 QWORD PTR codec$[rsp], 0
  0017e	74 0a		 je	 SHORT $LN1@mbiencoder@3
  00180	48 8b 4c 24 38	 mov	 rcx, QWORD PTR codec$[rsp]
  00185	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@mbiencoder@3:
  0018a	33 c0		 xor	 eax, eax
  0018c	85 c0		 test	 eax, eax
  0018e	75 e8		 jne	 SHORT $LN4@mbiencoder@3

; 980  :     return NULL;

  00190	33 c0		 xor	 eax, eax
$LN15@mbiencoder@3:

; 981  : }

  00192	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00196	c3		 ret	 0
mbiencoder_new ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT mbiencoder_init
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
mbiencoder_init PROC					; COMDAT

; 985  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 986  :     return 0;

  0000f	33 c0		 xor	 eax, eax

; 987  : }

  00011	c3		 ret	 0
mbiencoder_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@IDLOODAG@mbiencoder_traverse?$AA@	; `string'
PUBLIC	??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbiencoder_traverse DD imagerel mbiencoder_traverse
	DD	imagerel mbiencoder_traverse+140
	DD	imagerel $unwind$mbiencoder_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbiencoder_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BE@IDLOODAG@mbiencoder_traverse?$AA@
CONST	SEGMENT
??_C@_0BE@IDLOODAG@mbiencoder_traverse?$AA@ DB 'mbiencoder_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
CONST	SEGMENT
??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@ DB '..\Modules\'
	DB	'cjkcodecs\multibytecodec.c', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbiencoder_traverse
_TEXT	SEGMENT
vret$21571 = 32
self$ = 64
visit$ = 72
arg$ = 80
mbiencoder_traverse PROC				; COMDAT

; 992  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 993  :     if (ERROR_ISCUSTOM(self->errors))

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 83 78 70 01	 cmp	 QWORD PTR [rax+112], 1
  0001d	72 0c		 jb	 SHORT $LN7@mbiencoder@4
  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 83 78 70 03	 cmp	 QWORD PTR [rax+112], 3
  00029	76 5a		 jbe	 SHORT $LN8@mbiencoder@4
$LN7@mbiencoder@4:
$LN6@mbiencoder@4:

; 994  :         Py_VISIT(self->errors);

  0002b	e8 00 00 00 00	 call	 _Py_PXCTX
  00030	85 c0		 test	 eax, eax
  00032	74 1c		 je	 SHORT $LN3@mbiencoder@4
  00034	45 33 c9	 xor	 r9d, r9d
  00037	41 b8 e2 03 00
	00		 mov	 r8d, 994		; 000003e2H
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@IDLOODAG@mbiencoder_traverse?$AA@
  0004b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@mbiencoder@4:
  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00055	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0005a	74 23		 je	 SHORT $LN2@mbiencoder@4
  0005c	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00066	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0006a	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  0006e	89 44 24 20	 mov	 DWORD PTR vret$21571[rsp], eax
  00072	83 7c 24 20 00	 cmp	 DWORD PTR vret$21571[rsp], 0
  00077	74 06		 je	 SHORT $LN1@mbiencoder@4
  00079	8b 44 24 20	 mov	 eax, DWORD PTR vret$21571[rsp]
  0007d	eb 08		 jmp	 SHORT $LN9@mbiencoder@4
$LN1@mbiencoder@4:
$LN2@mbiencoder@4:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a6		 jne	 SHORT $LN6@mbiencoder@4
$LN8@mbiencoder@4:

; 995  :     return 0;

  00085	33 c0		 xor	 eax, eax
$LN9@mbiencoder@4:

; 996  : }

  00087	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008b	c3		 ret	 0
mbiencoder_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbiencoder_dealloc DD imagerel mbiencoder_dealloc
	DD	imagerel mbiencoder_dealloc+100
	DD	imagerel $unwind$mbiencoder_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbiencoder_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mbiencoder_dealloc
_TEXT	SEGMENT
self$ = 48
mbiencoder_dealloc PROC					; COMDAT

; 1000 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1001 :     PyObject_GC_UnTrack(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN5@mbiencoder@5:

; 1002 :     ERROR_DECREF(self->errors);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0001d	74 26		 je	 SHORT $LN2@mbiencoder@5
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 83 78 70 01	 cmp	 QWORD PTR [rax+112], 1
  00029	72 0c		 jb	 SHORT $LN1@mbiencoder@5
  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00030	48 83 78 70 03	 cmp	 QWORD PTR [rax+112], 3
  00035	76 0e		 jbe	 SHORT $LN2@mbiencoder@5
$LN1@mbiencoder@5:
  00037	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003c	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00040	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@mbiencoder@5:
  00045	33 c0		 xor	 eax, eax
  00047	85 c0		 test	 eax, eax
  00049	75 c8		 jne	 SHORT $LN5@mbiencoder@5

; 1003 :     Py_TYPE(self)->tp_free(self);

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00050	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00054	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00059	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 1004 : }

  0005f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00063	c3		 ret	 0
mbiencoder_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@JMABKIDD@y?$CK?$HMi?3decode?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbidecoder_decode DD imagerel mbidecoder_decode
	DD	imagerel mbidecoder_decode+1453
	DD	imagerel $unwind$mbidecoder_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbidecoder_decode DD 021601H
	DD	0230116H
xdata	ENDS
;	COMDAT ??_C@_0M@JMABKIDD@y?$CK?$HMi?3decode?$AA@
CONST	SEGMENT
??_C@_0M@JMABKIDD@y?$CK?$HMi?3decode?$AA@ DB 'y*|i:decode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbidecoder_decode
_TEXT	SEGMENT
final$ = 48
wdata$ = 56
pdata$ = 64
size$ = 144
buf$ = 152
wsize$ = 208
data$ = 216
origpending$ = 224
finalsize$ = 232
tv170 = 240
tv192 = 248
tv212 = 256
tv210 = 264
self$ = 288
args$ = 296
kwargs$ = 304
mbidecoder_decode PROC					; COMDAT

; 1057 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 1058 :     MultibyteDecodeBuffer buf;
; 1059 :     char *data, *wdata = NULL;

  00016	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR wdata$[rsp], 0

; 1060 :     Py_buffer pdata;
; 1061 :     Py_ssize_t wsize, finalsize = 0, size, origpending;

  0001f	48 c7 84 24 e8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR finalsize$[rsp], 0

; 1062 :     int final = 0;

  0002b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 1063 : 
; 1064 :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "y*|i:decode",
; 1065 :                     incrementalkwarglist, &pdata, &final))

  00033	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  00038	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0003d	48 8d 44 24 40	 lea	 rax, QWORD PTR pdata$[rsp]
  00042	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00047	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:incrementalkwarglist
  0004e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@JMABKIDD@y?$CK?$HMi?3decode?$AA@
  00055	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR kwargs$[rsp]
  0005d	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00065	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0006a	85 c0		 test	 eax, eax
  0006c	75 07		 jne	 SHORT $LN27@mbidecoder

; 1066 :         return NULL;

  0006e	33 c0		 xor	 eax, eax
  00070	e9 30 05 00 00	 jmp	 $LN28@mbidecoder
$LN27@mbidecoder:

; 1067 :     data = pdata.buf;

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR pdata$[rsp]
  0007a	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR data$[rsp], rax

; 1068 :     size = pdata.len;

  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR pdata$[rsp+16]
  00087	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR size$[rsp], rax

; 1069 : 
; 1070 :     buf.outobj = buf.excobj = NULL;

  0008f	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR buf$[rsp+40], 0
  0009b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+40]
  000a3	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR buf$[rsp+48], rax

; 1071 :     origpending = self->pendingsize;

  000ab	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000b3	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000ba	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR origpending$[rsp], rax

; 1072 : 
; 1073 :     if (self->pendingsize == 0) {

  000c2	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000ca	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000d2	75 22		 jne	 SHORT $LN26@mbidecoder

; 1074 :         wsize = size;

  000d4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR size$[rsp]
  000dc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR wsize$[rsp], rax

; 1075 :         wdata = data;

  000e4	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  000ec	48 89 44 24 38	 mov	 QWORD PTR wdata$[rsp], rax

; 1076 :     }
; 1077 :     else {

  000f1	e9 de 00 00 00	 jmp	 $LN25@mbidecoder
$LN26@mbidecoder:

; 1078 :         if (size > PY_SSIZE_T_MAX - self->pendingsize) {

  000f6	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00100	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00108	48 2b 81 80 00
	00 00		 sub	 rax, QWORD PTR [rcx+128]
  0010f	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR size$[rsp], rax
  00117	7e 0a		 jle	 SHORT $LN24@mbidecoder

; 1079 :             PyErr_NoMemory();

  00119	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1080 :             goto errorexit;

  0011e	e9 19 04 00 00	 jmp	 $errorexit$21633
$LN24@mbidecoder:

; 1081 :         }
; 1082 :         wsize = size + self->pendingsize;

  00123	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0012b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00132	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR size$[rsp]
  0013a	48 03 c8	 add	 rcx, rax
  0013d	48 8b c1	 mov	 rax, rcx
  00140	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR wsize$[rsp], rax

; 1083 :         wdata = PyMem_Malloc(wsize);

  00148	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR wsize$[rsp]
  00150	e8 00 00 00 00	 call	 PyMem_Malloc
  00155	48 89 44 24 38	 mov	 QWORD PTR wdata$[rsp], rax

; 1084 :         if (wdata == NULL)

  0015a	48 83 7c 24 38
	00		 cmp	 QWORD PTR wdata$[rsp], 0
  00160	75 05		 jne	 SHORT $LN23@mbidecoder

; 1085 :             goto errorexit;

  00162	e9 d5 03 00 00	 jmp	 $errorexit$21633
$LN23@mbidecoder:

; 1086 :         memcpy(wdata, self->pending, self->pendingsize);

  00167	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0016f	48 83 c0 78	 add	 rax, 120		; 00000078H
  00173	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0017b	4c 8b 81 80 00
	00 00		 mov	 r8, QWORD PTR [rcx+128]
  00182	48 8b d0	 mov	 rdx, rax
  00185	48 8b 4c 24 38	 mov	 rcx, QWORD PTR wdata$[rsp]
  0018a	e8 00 00 00 00	 call	 memcpy

; 1087 :         memcpy(wdata + self->pendingsize, data, size);

  0018f	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00197	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0019e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR wdata$[rsp]
  001a3	48 03 c8	 add	 rcx, rax
  001a6	48 8b c1	 mov	 rax, rcx
  001a9	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR size$[rsp]
  001b1	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR data$[rsp]
  001b9	48 8b c8	 mov	 rcx, rax
  001bc	e8 00 00 00 00	 call	 memcpy

; 1088 :         self->pendingsize = 0;

  001c1	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001c9	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0
$LN25@mbidecoder:

; 1089 :     }
; 1090 : 
; 1091 :     if (decoder_prepare_buffer(&buf, wdata, wsize) != 0)

  001d4	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR wsize$[rsp]
  001dc	48 8b 54 24 38	 mov	 rdx, QWORD PTR wdata$[rsp]
  001e1	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  001e9	e8 00 00 00 00	 call	 decoder_prepare_buffer
  001ee	85 c0		 test	 eax, eax
  001f0	74 05		 je	 SHORT $LN22@mbidecoder

; 1092 :         goto errorexit;

  001f2	e9 45 03 00 00	 jmp	 $errorexit$21633
$LN22@mbidecoder:

; 1093 : 
; 1094 :     if (decoder_feed_buffer(STATEFUL_DCTX(self), &buf))

  001f7	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  001ff	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00207	e8 00 00 00 00	 call	 decoder_feed_buffer
  0020c	85 c0		 test	 eax, eax
  0020e	74 05		 je	 SHORT $LN21@mbidecoder

; 1095 :         goto errorexit;

  00210	e9 27 03 00 00	 jmp	 $errorexit$21633
$LN21@mbidecoder:

; 1096 : 
; 1097 :     if (final && buf.inbuf < buf.inbuf_end) {

  00215	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  0021a	0f 84 90 00 00
	00		 je	 $LN20@mbidecoder
  00220	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+16]
  00228	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR buf$[rsp], rax
  00230	73 7e		 jae	 SHORT $LN20@mbidecoder

; 1098 :         if (multibytecodec_decerror(self->codec, &self->state,
; 1099 :                         &buf, self->errors, MBERR_TOOFEW)) {

  00232	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0023a	48 83 c0 68	 add	 rax, 104		; 00000068H
  0023e	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR [rsp+32], -2
  00247	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0024f	4c 8b 49 70	 mov	 r9, QWORD PTR [rcx+112]
  00253	4c 8d 84 24 98
	00 00 00	 lea	 r8, QWORD PTR buf$[rsp]
  0025b	48 8b d0	 mov	 rdx, rax
  0025e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00266	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0026a	e8 00 00 00 00	 call	 multibytecodec_decerror
  0026f	85 c0		 test	 eax, eax
  00271	74 3d		 je	 SHORT $LN19@mbidecoder

; 1100 :             /* recover the original pending buffer */
; 1101 :             memcpy(self->pending, wdata, origpending);

  00273	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0027b	48 83 c0 78	 add	 rax, 120		; 00000078H
  0027f	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR origpending$[rsp]
  00287	48 8b 54 24 38	 mov	 rdx, QWORD PTR wdata$[rsp]
  0028c	48 8b c8	 mov	 rcx, rax
  0028f	e8 00 00 00 00	 call	 memcpy

; 1102 :             self->pendingsize = origpending;

  00294	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0029c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR origpending$[rsp]
  002a4	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 1103 :             goto errorexit;

  002ab	e9 8c 02 00 00	 jmp	 $errorexit$21633
$LN19@mbidecoder:
$LN20@mbidecoder:

; 1104 :         }
; 1105 :     }
; 1106 : 
; 1107 :     if (buf.inbuf < buf.inbuf_end) { /* pending sequence still exists */

  002b0	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+16]
  002b8	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR buf$[rsp], rax
  002c0	73 1e		 jae	 SHORT $LN18@mbidecoder

; 1108 :         if (decoder_append_pending(STATEFUL_DCTX(self), &buf) != 0)

  002c2	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  002ca	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002d2	e8 00 00 00 00	 call	 decoder_append_pending
  002d7	85 c0		 test	 eax, eax
  002d9	74 05		 je	 SHORT $LN17@mbidecoder

; 1109 :             goto errorexit;

  002db	e9 5c 02 00 00	 jmp	 $errorexit$21633
$LN17@mbidecoder:
$LN18@mbidecoder:

; 1110 :     }
; 1111 : 
; 1112 :     finalsize = (Py_ssize_t)(buf.outbuf - PyUnicode_AS_UNICODE(buf.outobj));

  002e0	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  002e8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002ec	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002f2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002f7	85 c0		 test	 eax, eax
  002f9	75 1c		 jne	 SHORT $LN30@mbidecoder
  002fb	41 b8 58 04 00
	00		 mov	 r8d, 1112		; 00000458H
  00301	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00308	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MOOGFILO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0030f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00315	33 c0		 xor	 eax, eax
$LN30@mbidecoder:
  00317	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0031f	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00324	74 16		 je	 SHORT $LN31@mbidecoder
  00326	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0032e	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00332	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv170[rsp], rax
  0033a	eb 15		 jmp	 SHORT $LN32@mbidecoder
$LN31@mbidecoder:
  0033c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+48]
  00344	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00349	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv170[rsp], rax
$LN32@mbidecoder:
  00351	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv170[rsp]
  00359	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+24]
  00361	48 2b c8	 sub	 rcx, rax
  00364	48 8b c1	 mov	 rax, rcx
  00367	48 d1 f8	 sar	 rax, 1
  0036a	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR finalsize$[rsp], rax

; 1113 :     if (finalsize != PyUnicode_GET_SIZE(buf.outobj))

  00372	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0037a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0037e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00384	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00389	85 c0		 test	 eax, eax
  0038b	75 1c		 jne	 SHORT $LN33@mbidecoder
  0038d	41 b8 59 04 00
	00		 mov	 r8d, 1113		; 00000459H
  00393	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  0039a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MOOGFILO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  003a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003a7	33 c0		 xor	 eax, eax
$LN33@mbidecoder:
  003a9	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  003b1	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  003b6	74 6c		 je	 SHORT $LN39@mbidecoder
  003b8	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  003c0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003c3	c1 e8 06	 shr	 eax, 6
  003c6	83 e0 01	 and	 eax, 1
  003c9	85 c0		 test	 eax, eax
  003cb	74 2b		 je	 SHORT $LN34@mbidecoder
  003cd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  003d5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003d8	c1 e8 05	 shr	 eax, 5
  003db	83 e0 01	 and	 eax, 1
  003de	85 c0		 test	 eax, eax
  003e0	74 16		 je	 SHORT $LN34@mbidecoder
  003e2	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  003ea	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  003ee	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv192[rsp], rax
  003f6	eb 17		 jmp	 SHORT $LN35@mbidecoder
$LN34@mbidecoder:
  003f8	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00400	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00407	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv192[rsp], rax
$LN35@mbidecoder:
  0040f	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv192[rsp]
  00417	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv212[rsp], rax
  0041f	e9 9f 00 00 00	 jmp	 $LN40@mbidecoder
$LN39@mbidecoder:
  00424	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+48]
  0042c	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00431	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00439	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0043e	75 1c		 jne	 SHORT $LN36@mbidecoder
  00440	41 b8 59 04 00
	00		 mov	 r8d, 1113		; 00000459H
  00446	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  0044d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@JIIJICAB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9@
  00454	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0045a	33 c0		 xor	 eax, eax
$LN36@mbidecoder:
  0045c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00464	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00467	c1 e8 06	 shr	 eax, 6
  0046a	83 e0 01	 and	 eax, 1
  0046d	85 c0		 test	 eax, eax
  0046f	74 2b		 je	 SHORT $LN37@mbidecoder
  00471	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  00479	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0047c	c1 e8 05	 shr	 eax, 5
  0047f	83 e0 01	 and	 eax, 1
  00482	85 c0		 test	 eax, eax
  00484	74 16		 je	 SHORT $LN37@mbidecoder
  00486	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0048e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00492	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv210[rsp], rax
  0049a	eb 17		 jmp	 SHORT $LN38@mbidecoder
$LN37@mbidecoder:
  0049c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  004a4	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  004ab	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv210[rsp], rax
$LN38@mbidecoder:
  004b3	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv210[rsp]
  004bb	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv212[rsp], rax
$LN40@mbidecoder:
  004c3	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv212[rsp]
  004cb	48 39 84 24 e8
	00 00 00	 cmp	 QWORD PTR finalsize$[rsp], rax
  004d3	74 1c		 je	 SHORT $LN16@mbidecoder

; 1114 :         if (PyUnicode_Resize(&buf.outobj, finalsize) == -1)

  004d5	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR finalsize$[rsp]
  004dd	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp+48]
  004e5	e8 00 00 00 00	 call	 PyUnicode_Resize
  004ea	83 f8 ff	 cmp	 eax, -1
  004ed	75 02		 jne	 SHORT $LN15@mbidecoder

; 1115 :             goto errorexit;

  004ef	eb 4b		 jmp	 SHORT $errorexit$21633
$LN15@mbidecoder:
$LN16@mbidecoder:

; 1116 : 
; 1117 :     PyBuffer_Release(&pdata);

  004f1	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pdata$[rsp]
  004f6	e8 00 00 00 00	 call	 PyBuffer_Release

; 1118 :     if (wdata != data)

  004fb	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00503	48 39 44 24 38	 cmp	 QWORD PTR wdata$[rsp], rax
  00508	74 0a		 je	 SHORT $LN14@mbidecoder

; 1119 :         PyMem_Del(wdata);

  0050a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR wdata$[rsp]
  0050f	e8 00 00 00 00	 call	 PyMem_Free
$LN14@mbidecoder:
$LN13@mbidecoder:

; 1120 :     Py_XDECREF(buf.excobj);

  00514	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp+40], 0
  0051d	74 0d		 je	 SHORT $LN10@mbidecoder
  0051f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+40]
  00527	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@mbidecoder:
  0052c	33 c0		 xor	 eax, eax
  0052e	85 c0		 test	 eax, eax
  00530	75 e2		 jne	 SHORT $LN13@mbidecoder

; 1121 :     return buf.outobj;

  00532	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp+48]
  0053a	eb 69		 jmp	 SHORT $LN28@mbidecoder
$errorexit$21633:

; 1122 : 
; 1123 : errorexit:
; 1124 :     PyBuffer_Release(&pdata);

  0053c	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pdata$[rsp]
  00541	e8 00 00 00 00	 call	 PyBuffer_Release

; 1125 :     if (wdata != NULL && wdata != data)

  00546	48 83 7c 24 38
	00		 cmp	 QWORD PTR wdata$[rsp], 0
  0054c	74 19		 je	 SHORT $LN9@mbidecoder
  0054e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00556	48 39 44 24 38	 cmp	 QWORD PTR wdata$[rsp], rax
  0055b	74 0a		 je	 SHORT $LN9@mbidecoder

; 1126 :         PyMem_Del(wdata);

  0055d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR wdata$[rsp]
  00562	e8 00 00 00 00	 call	 PyMem_Free
$LN9@mbidecoder:
$LN8@mbidecoder:

; 1127 :     Py_XDECREF(buf.excobj);

  00567	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp+40], 0
  00570	74 0d		 je	 SHORT $LN5@mbidecoder
  00572	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+40]
  0057a	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@mbidecoder:
  0057f	33 c0		 xor	 eax, eax
  00581	85 c0		 test	 eax, eax
  00583	75 e2		 jne	 SHORT $LN8@mbidecoder
$LN4@mbidecoder:

; 1128 :     Py_XDECREF(buf.outobj);

  00585	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp+48], 0
  0058e	74 0d		 je	 SHORT $LN1@mbidecoder
  00590	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp+48]
  00598	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@mbidecoder:
  0059d	33 c0		 xor	 eax, eax
  0059f	85 c0		 test	 eax, eax
  005a1	75 e2		 jne	 SHORT $LN4@mbidecoder

; 1129 :     return NULL;

  005a3	33 c0		 xor	 eax, eax
$LN28@mbidecoder:

; 1130 : }

  005a5	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  005ac	c3		 ret	 0
mbidecoder_decode ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$decoder_append_pending DD imagerel decoder_append_pending
	DD	imagerel decoder_append_pending+202
	DD	imagerel $unwind$decoder_append_pending
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decoder_append_pending DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT decoder_append_pending
_TEXT	SEGMENT
npendings$ = 32
ctx$ = 64
buf$ = 72
decoder_append_pending PROC				; COMDAT

; 842  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 843  :     Py_ssize_t npendings;
; 844  : 
; 845  :     npendings = (Py_ssize_t)(buf->inbuf_end - buf->inbuf);

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR buf$[rsp]
  00018	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001f	48 2b c1	 sub	 rax, rcx
  00022	48 89 44 24 20	 mov	 QWORD PTR npendings$[rsp], rax

; 846  :     if (npendings + ctx->pendingsize > MAXDECPENDING ||
; 847  :         npendings > PY_SSIZE_T_MAX - ctx->pendingsize) {

  00027	48 8b 44 24 40	 mov	 rax, QWORD PTR ctx$[rsp]
  0002c	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR npendings$[rsp]
  00038	48 03 c8	 add	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx
  0003e	48 83 f8 08	 cmp	 rax, 8
  00042	7f 1d		 jg	 SHORT $LN1@decoder_ap
  00044	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0004e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctx$[rsp]
  00053	48 2b 81 80 00
	00 00		 sub	 rax, QWORD PTR [rcx+128]
  0005a	48 39 44 24 20	 cmp	 QWORD PTR npendings$[rsp], rax
  0005f	7e 1a		 jle	 SHORT $LN2@decoder_ap
$LN1@decoder_ap:

; 848  :             PyErr_SetString(PyExc_UnicodeError, "pending buffer overflow");

  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFMEJOOM@pending?5buffer?5overflow?$AA@
  00068	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_UnicodeError
  0006f	e8 00 00 00 00	 call	 PyErr_SetString

; 849  :             return -1;

  00074	b8 ff ff ff ff	 mov	 eax, -1
  00079	eb 4a		 jmp	 SHORT $LN3@decoder_ap
$LN2@decoder_ap:

; 850  :     }
; 851  :     memcpy(ctx->pending + ctx->pendingsize, buf->inbuf, npendings);

  0007b	48 8b 44 24 40	 mov	 rax, QWORD PTR ctx$[rsp]
  00080	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00087	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctx$[rsp]
  0008c	48 8d 44 01 78	 lea	 rax, QWORD PTR [rcx+rax+120]
  00091	4c 8b 44 24 20	 mov	 r8, QWORD PTR npendings$[rsp]
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR buf$[rsp]
  0009b	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0009e	48 8b c8	 mov	 rcx, rax
  000a1	e8 00 00 00 00	 call	 memcpy

; 852  :     ctx->pendingsize += npendings;

  000a6	48 8b 44 24 40	 mov	 rax, QWORD PTR ctx$[rsp]
  000ab	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000b2	48 03 44 24 20	 add	 rax, QWORD PTR npendings$[rsp]
  000b7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctx$[rsp]
  000bc	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 853  :     return 0;

  000c3	33 c0		 xor	 eax, eax
$LN3@decoder_ap:

; 854  : }

  000c5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c9	c3		 ret	 0
decoder_append_pending ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$decoder_prepare_buffer DD imagerel decoder_prepare_buffer
	DD	imagerel decoder_prepare_buffer+532
	DD	imagerel $unwind$decoder_prepare_buffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decoder_prepare_buffer DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT decoder_prepare_buffer
_TEXT	SEGMENT
tv141 = 32
tv167 = 40
tv165 = 48
buf$ = 80
data$ = 88
size$ = 96
decoder_prepare_buffer PROC				; COMDAT

; 859  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 860  :     buf->inbuf = buf->inbuf_top = (const unsigned char *)data;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00018	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  0001d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00021	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00026	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  0002b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 861  :     buf->inbuf_end = buf->inbuf_top + size;

  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00033	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00037	48 03 44 24 60	 add	 rax, QWORD PTR size$[rsp]
  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00041	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 862  :     if (buf->outobj == NULL) { /* only if outobj is not allocated yet */

  00045	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  0004a	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0004f	0f 85 b8 01 00
	00		 jne	 $LN3@decoder_pr

; 863  :         buf->outobj = PyUnicode_FromUnicode(NULL, size);

  00055	48 8b 54 24 60	 mov	 rdx, QWORD PTR size$[rsp]
  0005a	33 c9		 xor	 ecx, ecx
  0005c	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  00061	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00066	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 864  :         if (buf->outobj == NULL)

  0006a	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  0006f	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00074	75 0a		 jne	 SHORT $LN2@decoder_pr

; 865  :             return -1;

  00076	b8 ff ff ff ff	 mov	 eax, -1
  0007b	e9 8f 01 00 00	 jmp	 $LN4@decoder_pr
$LN2@decoder_pr:

; 866  :         buf->outbuf = PyUnicode_AsUnicode(buf->outobj);

  00080	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00085	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00089	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  0008e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00093	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 867  :         if (buf->outbuf == NULL)

  00097	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  0009c	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  000a1	75 0a		 jne	 SHORT $LN1@decoder_pr

; 868  :             return -1;

  000a3	b8 ff ff ff ff	 mov	 eax, -1
  000a8	e9 62 01 00 00	 jmp	 $LN4@decoder_pr
$LN1@decoder_pr:

; 869  :         buf->outbuf_end = buf->outbuf +
; 870  :                           PyUnicode_GET_SIZE(buf->outobj);

  000ad	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  000b2	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  000b6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ba	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000c5	85 c0		 test	 eax, eax
  000c7	75 1c		 jne	 SHORT $LN6@decoder_pr
  000c9	41 b8 66 03 00
	00		 mov	 r8d, 870		; 00000366H
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@ELNPGHAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e3	33 c0		 xor	 eax, eax
$LN6@decoder_pr:
  000e5	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  000ea	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  000ee	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  000f3	74 64		 je	 SHORT $LN12@decoder_pr
  000f5	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  000fa	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  000fe	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00101	c1 e8 06	 shr	 eax, 6
  00104	83 e0 01	 and	 eax, 1
  00107	85 c0		 test	 eax, eax
  00109	74 2a		 je	 SHORT $LN7@decoder_pr
  0010b	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00110	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00114	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00117	c1 e8 05	 shr	 eax, 5
  0011a	83 e0 01	 and	 eax, 1
  0011d	85 c0		 test	 eax, eax
  0011f	74 14		 je	 SHORT $LN7@decoder_pr
  00121	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00126	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0012a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0012e	48 89 44 24 20	 mov	 QWORD PTR tv141[rsp], rax
  00133	eb 15		 jmp	 SHORT $LN8@decoder_pr
$LN7@decoder_pr:
  00135	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  0013a	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0013e	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00145	48 89 44 24 20	 mov	 QWORD PTR tv141[rsp], rax
$LN8@decoder_pr:
  0014a	48 8b 44 24 20	 mov	 rax, QWORD PTR tv141[rsp]
  0014f	48 89 44 24 28	 mov	 QWORD PTR tv167[rsp], rax
  00154	e9 99 00 00 00	 jmp	 $LN13@decoder_pr
$LN12@decoder_pr:
  00159	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  0015e	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00162	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00167	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  0016c	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00170	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00175	75 1c		 jne	 SHORT $LN9@decoder_pr
  00177	41 b8 66 03 00
	00		 mov	 r8d, 870		; 00000366H
  0017d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@LMFKBMGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ@
  0018b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00191	33 c0		 xor	 eax, eax
$LN9@decoder_pr:
  00193	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00198	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0019c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0019f	c1 e8 06	 shr	 eax, 6
  001a2	83 e0 01	 and	 eax, 1
  001a5	85 c0		 test	 eax, eax
  001a7	74 2a		 je	 SHORT $LN10@decoder_pr
  001a9	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  001ae	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  001b2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001b5	c1 e8 05	 shr	 eax, 5
  001b8	83 e0 01	 and	 eax, 1
  001bb	85 c0		 test	 eax, eax
  001bd	74 14		 je	 SHORT $LN10@decoder_pr
  001bf	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  001c4	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  001c8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001cc	48 89 44 24 30	 mov	 QWORD PTR tv165[rsp], rax
  001d1	eb 15		 jmp	 SHORT $LN11@decoder_pr
$LN10@decoder_pr:
  001d3	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  001d8	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  001dc	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  001e3	48 89 44 24 30	 mov	 QWORD PTR tv165[rsp], rax
$LN11@decoder_pr:
  001e8	48 8b 44 24 30	 mov	 rax, QWORD PTR tv165[rsp]
  001ed	48 89 44 24 28	 mov	 QWORD PTR tv167[rsp], rax
$LN13@decoder_pr:
  001f2	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  001f7	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  001fb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv167[rsp]
  00200	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00204	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00209	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN3@decoder_pr:

; 871  :     }
; 872  : 
; 873  :     return 0;

  0020d	33 c0		 xor	 eax, eax
$LN4@decoder_pr:

; 874  : }

  0020f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00213	c3		 ret	 0
decoder_prepare_buffer ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$decoder_feed_buffer DD imagerel decoder_feed_buffer
	DD	imagerel decoder_feed_buffer+280
	DD	imagerel $unwind$decoder_feed_buffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decoder_feed_buffer DD 010e01H
	DD	0c20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT decoder_feed_buffer
_TEXT	SEGMENT
outleft$21457 = 48
r$21458 = 56
inleft$21456 = 64
tv83 = 72
tv129 = 80
ctx$ = 112
buf$ = 120
decoder_feed_buffer PROC				; COMDAT

; 879  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN6@decoder_fe:

; 880  :     while (buf->inbuf < buf->inbuf_end) {

  0000e	48 8b 44 24 78	 mov	 rax, QWORD PTR buf$[rsp]
  00013	48 8b 4c 24 78	 mov	 rcx, QWORD PTR buf$[rsp]
  00018	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0001c	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0001f	0f 83 ec 00 00
	00		 jae	 $LN5@decoder_fe

; 881  :         Py_ssize_t inleft, outleft;
; 882  :         Py_ssize_t r;
; 883  : 
; 884  :         inleft = (Py_ssize_t)(buf->inbuf_end - buf->inbuf);

  00025	48 8b 44 24 78	 mov	 rax, QWORD PTR buf$[rsp]
  0002a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR buf$[rsp]
  0002f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00032	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00036	48 2b c1	 sub	 rax, rcx
  00039	48 89 44 24 40	 mov	 QWORD PTR inleft$21456[rsp], rax

; 885  :         outleft = (Py_ssize_t)(buf->outbuf_end - buf->outbuf);

  0003e	48 8b 44 24 78	 mov	 rax, QWORD PTR buf$[rsp]
  00043	48 8b 4c 24 78	 mov	 rcx, QWORD PTR buf$[rsp]
  00048	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0004c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00050	48 2b c1	 sub	 rax, rcx
  00053	48 d1 f8	 sar	 rax, 1
  00056	48 89 44 24 30	 mov	 QWORD PTR outleft$21457[rsp], rax

; 886  : 
; 887  :         r = ctx->codec->decode(&ctx->state, ctx->codec->config,
; 888  :             &buf->inbuf, inleft, &buf->outbuf, outleft);

  0005b	48 8b 44 24 78	 mov	 rax, QWORD PTR buf$[rsp]
  00060	48 83 c0 18	 add	 rax, 24
  00064	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ctx$[rsp]
  00069	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0006d	48 8b 54 24 70	 mov	 rdx, QWORD PTR ctx$[rsp]
  00072	48 83 c2 68	 add	 rdx, 104		; 00000068H
  00076	48 89 54 24 48	 mov	 QWORD PTR tv83[rsp], rdx
  0007b	4c 8b 44 24 70	 mov	 r8, QWORD PTR ctx$[rsp]
  00080	4d 8b 40 60	 mov	 r8, QWORD PTR [r8+96]
  00084	4c 89 44 24 50	 mov	 QWORD PTR tv129[rsp], r8
  00089	4c 8b 4c 24 30	 mov	 r9, QWORD PTR outleft$21457[rsp]
  0008e	4c 89 4c 24 28	 mov	 QWORD PTR [rsp+40], r9
  00093	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00098	4c 8b 4c 24 40	 mov	 r9, QWORD PTR inleft$21456[rsp]
  0009d	4c 8b 44 24 78	 mov	 r8, QWORD PTR buf$[rsp]
  000a2	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  000a6	48 8b 44 24 48	 mov	 rax, QWORD PTR tv83[rsp]
  000ab	48 8b c8	 mov	 rcx, rax
  000ae	48 8b 44 24 50	 mov	 rax, QWORD PTR tv129[rsp]
  000b3	ff 50 30	 call	 QWORD PTR [rax+48]
  000b6	48 89 44 24 38	 mov	 QWORD PTR r$21458[rsp], rax

; 889  :         if (r == 0 || r == MBERR_TOOFEW)

  000bb	48 83 7c 24 38
	00		 cmp	 QWORD PTR r$21458[rsp], 0
  000c1	74 08		 je	 SHORT $LN3@decoder_fe
  000c3	48 83 7c 24 38
	fe		 cmp	 QWORD PTR r$21458[rsp], -2
  000c9	75 04		 jne	 SHORT $LN4@decoder_fe
$LN3@decoder_fe:

; 890  :             break;

  000cb	eb 44		 jmp	 SHORT $LN5@decoder_fe

; 891  :         else if (multibytecodec_decerror(ctx->codec, &ctx->state,

  000cd	eb 3d		 jmp	 SHORT $LN2@decoder_fe
$LN4@decoder_fe:

; 892  :                                          buf, ctx->errors, r))

  000cf	48 8b 44 24 70	 mov	 rax, QWORD PTR ctx$[rsp]
  000d4	48 83 c0 68	 add	 rax, 104		; 00000068H
  000d8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR r$21458[rsp]
  000dd	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000e2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ctx$[rsp]
  000e7	4c 8b 49 70	 mov	 r9, QWORD PTR [rcx+112]
  000eb	4c 8b 44 24 78	 mov	 r8, QWORD PTR buf$[rsp]
  000f0	48 8b d0	 mov	 rdx, rax
  000f3	48 8b 44 24 70	 mov	 rax, QWORD PTR ctx$[rsp]
  000f8	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000fc	e8 00 00 00 00	 call	 multibytecodec_decerror
  00101	85 c0		 test	 eax, eax
  00103	74 07		 je	 SHORT $LN1@decoder_fe

; 893  :             return -1;

  00105	b8 ff ff ff ff	 mov	 eax, -1
  0010a	eb 07		 jmp	 SHORT $LN7@decoder_fe
$LN1@decoder_fe:
$LN2@decoder_fe:

; 894  :     }

  0010c	e9 fd fe ff ff	 jmp	 $LN6@decoder_fe
$LN5@decoder_fe:

; 895  :     return 0;

  00111	33 c0		 xor	 eax, eax
$LN7@decoder_fe:

; 896  : }

  00113	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00117	c3		 ret	 0
decoder_feed_buffer ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbidecoder_reset DD imagerel mbidecoder_reset
	DD	imagerel mbidecoder_reset+118
	DD	imagerel $unwind$mbidecoder_reset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbidecoder_reset DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mbidecoder_reset
_TEXT	SEGMENT
tv79 = 32
self$ = 64
mbidecoder_reset PROC					; COMDAT

; 1134 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1135 :     if (self->codec->decreset != NULL &&
; 1136 :         self->codec->decreset(&self->state, self->codec->config) != 0)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  00017	74 35		 je	 SHORT $LN1@mbidecoder@2
  00019	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00027	48 83 c1 68	 add	 rcx, 104		; 00000068H
  0002b	48 8b 54 24 40	 mov	 rdx, QWORD PTR self$[rsp]
  00030	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00034	48 89 54 24 20	 mov	 QWORD PTR tv79[rsp], rdx
  00039	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR tv79[rsp]
  00042	ff 50 40	 call	 QWORD PTR [rax+64]
  00045	48 85 c0	 test	 rax, rax
  00048	74 04		 je	 SHORT $LN1@mbidecoder@2

; 1137 :         return NULL;

  0004a	33 c0		 xor	 eax, eax
  0004c	eb 23		 jmp	 SHORT $LN2@mbidecoder@2
$LN1@mbidecoder@2:

; 1138 :     self->pendingsize = 0;

  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00053	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1139 : 
; 1140 :     Py_RETURN_NONE;

  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00065	e8 00 00 00 00	 call	 _Py_IncRef
  0006a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@mbidecoder@2:

; 1141 : }

  00071	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00075	c3		 ret	 0
mbidecoder_reset ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@OGFIDMKI@?$HMs?3IncrementalDecoder?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbidecoder_new DD imagerel mbidecoder_new
	DD	imagerel mbidecoder_new+407
	DD	imagerel $unwind$mbidecoder_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbidecoder_new DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BG@OGFIDMKI@?$HMs?3IncrementalDecoder?$AA@
CONST	SEGMENT
??_C@_0BG@OGFIDMKI@?$HMs?3IncrementalDecoder?$AA@ DB '|s:IncrementalDecod'
	DB	'er', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbidecoder_new
_TEXT	SEGMENT
errors$ = 48
codec$ = 56
self$ = 64
tv144 = 72
type$ = 96
args$ = 104
kwds$ = 112
mbidecoder_new PROC					; COMDAT

; 1153 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1154 :     MultibyteIncrementalDecoderObject *self;
; 1155 :     PyObject *codec = NULL;

  00013	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR codec$[rsp], 0

; 1156 :     char *errors = NULL;

  0001c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 1157 : 
; 1158 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|s:IncrementalDecoder",
; 1159 :                                      incnewkwarglist, &errors))

  00025	48 8d 44 24 30	 lea	 rax, QWORD PTR errors$[rsp]
  0002a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:incnewkwarglist
  00036	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@OGFIDMKI@?$HMs?3IncrementalDecoder?$AA@
  0003d	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwds$[rsp]
  00042	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00047	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0004c	85 c0		 test	 eax, eax
  0004e	75 07		 jne	 SHORT $LN14@mbidecoder@3

; 1160 :         return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	e9 3b 01 00 00	 jmp	 $LN15@mbidecoder@3
$LN14@mbidecoder@3:

; 1161 : 
; 1162 :     self = (MultibyteIncrementalDecoderObject *)type->tp_alloc(type, 0);

  00057	33 d2		 xor	 edx, edx
  00059	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  0005e	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00063	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00069	48 89 44 24 40	 mov	 QWORD PTR self$[rsp], rax

; 1163 :     if (self == NULL)

  0006e	48 83 7c 24 40
	00		 cmp	 QWORD PTR self$[rsp], 0
  00074	75 07		 jne	 SHORT $LN13@mbidecoder@3

; 1164 :         return NULL;

  00076	33 c0		 xor	 eax, eax
  00078	e9 15 01 00 00	 jmp	 $LN15@mbidecoder@3
$LN13@mbidecoder@3:

; 1165 : 
; 1166 :     codec = PyObject_GetAttrString((PyObject *)type, "codec");

  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GPLHJCMP@codec?$AA@
  00084	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  00089	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0008e	48 89 44 24 38	 mov	 QWORD PTR codec$[rsp], rax

; 1167 :     if (codec == NULL)

  00093	48 83 7c 24 38
	00		 cmp	 QWORD PTR codec$[rsp], 0
  00099	75 05		 jne	 SHORT $LN12@mbidecoder@3

; 1168 :         goto errorexit;

  0009b	e9 c0 00 00 00	 jmp	 $errorexit$21724
$LN12@mbidecoder@3:

; 1169 :     if (!MultibyteCodec_Check(codec)) {

  000a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteCodec_Type
  000a7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR codec$[rsp]
  000ac	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000b0	74 18		 je	 SHORT $LN11@mbidecoder@3

; 1170 :         PyErr_SetString(PyExc_TypeError, "codec is unexpected type");

  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@
  000b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c0	e8 00 00 00 00	 call	 PyErr_SetString

; 1171 :         goto errorexit;

  000c5	e9 96 00 00 00	 jmp	 $errorexit$21724
$LN11@mbidecoder@3:

; 1172 :     }
; 1173 : 
; 1174 :     self->codec = ((MultibyteCodecObject *)codec)->codec;

  000ca	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000cf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR codec$[rsp]
  000d4	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000d8	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1175 :     self->pendingsize = 0;

  000dc	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000e1	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1176 :     self->errors = internal_error_callback(errors);

  000ec	48 8b 4c 24 30	 mov	 rcx, QWORD PTR errors$[rsp]
  000f1	e8 00 00 00 00	 call	 internal_error_callback
  000f6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000fb	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 1177 :     if (self->errors == NULL)

  000ff	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00104	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00109	75 02		 jne	 SHORT $LN10@mbidecoder@3

; 1178 :         goto errorexit;

  0010b	eb 53		 jmp	 SHORT $errorexit$21724
$LN10@mbidecoder@3:

; 1179 :     if (self->codec->decinit != NULL &&
; 1180 :         self->codec->decinit(&self->state, self->codec->config) != 0)

  0010d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00112	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00116	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0011b	74 32		 je	 SHORT $LN9@mbidecoder@3
  0011d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00122	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00126	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0012b	48 83 c1 68	 add	 rcx, 104		; 00000068H
  0012f	48 8b 54 24 40	 mov	 rdx, QWORD PTR self$[rsp]
  00134	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00138	48 89 54 24 48	 mov	 QWORD PTR tv144[rsp], rdx
  0013d	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00141	48 8b 44 24 48	 mov	 rax, QWORD PTR tv144[rsp]
  00146	ff 50 38	 call	 QWORD PTR [rax+56]
  00149	85 c0		 test	 eax, eax
  0014b	74 02		 je	 SHORT $LN9@mbidecoder@3

; 1181 :         goto errorexit;

  0014d	eb 11		 jmp	 SHORT $errorexit$21724
$LN9@mbidecoder@3:

; 1182 : 
; 1183 :     Py_DECREF(codec);

  0014f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR codec$[rsp]
  00154	e8 00 00 00 00	 call	 _Py_DecRef

; 1184 :     return (PyObject *)self;

  00159	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0015e	eb 32		 jmp	 SHORT $LN15@mbidecoder@3
$errorexit$21724:
$LN8@mbidecoder@3:

; 1185 : 
; 1186 : errorexit:
; 1187 :     Py_XDECREF(self);

  00160	48 83 7c 24 40
	00		 cmp	 QWORD PTR self$[rsp], 0
  00166	74 0a		 je	 SHORT $LN5@mbidecoder@3
  00168	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0016d	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@mbidecoder@3:
  00172	33 c0		 xor	 eax, eax
  00174	85 c0		 test	 eax, eax
  00176	75 e8		 jne	 SHORT $LN8@mbidecoder@3
$LN4@mbidecoder@3:

; 1188 :     Py_XDECREF(codec);

  00178	48 83 7c 24 38
	00		 cmp	 QWORD PTR codec$[rsp], 0
  0017e	74 0a		 je	 SHORT $LN1@mbidecoder@3
  00180	48 8b 4c 24 38	 mov	 rcx, QWORD PTR codec$[rsp]
  00185	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@mbidecoder@3:
  0018a	33 c0		 xor	 eax, eax
  0018c	85 c0		 test	 eax, eax
  0018e	75 e8		 jne	 SHORT $LN4@mbidecoder@3

; 1189 :     return NULL;

  00190	33 c0		 xor	 eax, eax
$LN15@mbidecoder@3:

; 1190 : }

  00192	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00196	c3		 ret	 0
mbidecoder_new ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT mbidecoder_init
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
mbidecoder_init PROC					; COMDAT

; 1194 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1195 :     return 0;

  0000f	33 c0		 xor	 eax, eax

; 1196 : }

  00011	c3		 ret	 0
mbidecoder_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@FOMDADPI@mbidecoder_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbidecoder_traverse DD imagerel mbidecoder_traverse
	DD	imagerel mbidecoder_traverse+140
	DD	imagerel $unwind$mbidecoder_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbidecoder_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BE@FOMDADPI@mbidecoder_traverse?$AA@
CONST	SEGMENT
??_C@_0BE@FOMDADPI@mbidecoder_traverse?$AA@ DB 'mbidecoder_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbidecoder_traverse
_TEXT	SEGMENT
vret$21770 = 32
self$ = 64
visit$ = 72
arg$ = 80
mbidecoder_traverse PROC				; COMDAT

; 1201 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1202 :     if (ERROR_ISCUSTOM(self->errors))

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 83 78 70 01	 cmp	 QWORD PTR [rax+112], 1
  0001d	72 0c		 jb	 SHORT $LN7@mbidecoder@4
  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 83 78 70 03	 cmp	 QWORD PTR [rax+112], 3
  00029	76 5a		 jbe	 SHORT $LN8@mbidecoder@4
$LN7@mbidecoder@4:
$LN6@mbidecoder@4:

; 1203 :         Py_VISIT(self->errors);

  0002b	e8 00 00 00 00	 call	 _Py_PXCTX
  00030	85 c0		 test	 eax, eax
  00032	74 1c		 je	 SHORT $LN3@mbidecoder@4
  00034	45 33 c9	 xor	 r9d, r9d
  00037	41 b8 b3 04 00
	00		 mov	 r8d, 1203		; 000004b3H
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FOMDADPI@mbidecoder_traverse?$AA@
  0004b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@mbidecoder@4:
  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00055	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0005a	74 23		 je	 SHORT $LN2@mbidecoder@4
  0005c	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00066	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0006a	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  0006e	89 44 24 20	 mov	 DWORD PTR vret$21770[rsp], eax
  00072	83 7c 24 20 00	 cmp	 DWORD PTR vret$21770[rsp], 0
  00077	74 06		 je	 SHORT $LN1@mbidecoder@4
  00079	8b 44 24 20	 mov	 eax, DWORD PTR vret$21770[rsp]
  0007d	eb 08		 jmp	 SHORT $LN9@mbidecoder@4
$LN1@mbidecoder@4:
$LN2@mbidecoder@4:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a6		 jne	 SHORT $LN6@mbidecoder@4
$LN8@mbidecoder@4:

; 1204 :     return 0;

  00085	33 c0		 xor	 eax, eax
$LN9@mbidecoder@4:

; 1205 : }

  00087	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008b	c3		 ret	 0
mbidecoder_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbidecoder_dealloc DD imagerel mbidecoder_dealloc
	DD	imagerel mbidecoder_dealloc+100
	DD	imagerel $unwind$mbidecoder_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbidecoder_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mbidecoder_dealloc
_TEXT	SEGMENT
self$ = 48
mbidecoder_dealloc PROC					; COMDAT

; 1209 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1210 :     PyObject_GC_UnTrack(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN5@mbidecoder@5:

; 1211 :     ERROR_DECREF(self->errors);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0001d	74 26		 je	 SHORT $LN2@mbidecoder@5
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 83 78 70 01	 cmp	 QWORD PTR [rax+112], 1
  00029	72 0c		 jb	 SHORT $LN1@mbidecoder@5
  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00030	48 83 78 70 03	 cmp	 QWORD PTR [rax+112], 3
  00035	76 0e		 jbe	 SHORT $LN2@mbidecoder@5
$LN1@mbidecoder@5:
  00037	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003c	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00040	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@mbidecoder@5:
  00045	33 c0		 xor	 eax, eax
  00047	85 c0		 test	 eax, eax
  00049	75 c8		 jne	 SHORT $LN5@mbidecoder@5

; 1212 :     Py_TYPE(self)->tp_free(self);

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00050	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00054	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00059	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 1213 : }

  0005f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00063	c3		 ret	 0
mbidecoder_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@ ; `string'
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_read DD imagerel mbstreamreader_read
	DD	imagerel mbstreamreader_read+216
	DD	imagerel $unwind$mbstreamreader_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_read DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@
CONST	SEGMENT
??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@ DB 'arg 1 must be a'
	DB	'n integer', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbstreamreader_read
_TEXT	SEGMENT
sizeobj$ = 48
size$ = 56
self$ = 80
args$ = 88
mbstreamreader_read PROC				; COMDAT

; 1371 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1372 :     PyObject *sizeobj = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR sizeobj$[rsp], 0

; 1373 :     Py_ssize_t size;
; 1374 : 
; 1375 :     if (!PyArg_UnpackTuple(args, "read", 0, 1, &sizeobj))

  00017	48 8d 44 24 30	 lea	 rax, QWORD PTR sizeobj$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00021	41 b9 01 00 00
	00		 mov	 r9d, 1
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@
  00031	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00036	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003b	85 c0		 test	 eax, eax
  0003d	75 07		 jne	 SHORT $LN7@mbstreamre

; 1376 :         return NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 8d 00 00 00	 jmp	 $LN8@mbstreamre
$LN7@mbstreamre:

; 1377 : 
; 1378 :     if (sizeobj == Py_None || sizeobj == NULL)

  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004d	48 39 44 24 30	 cmp	 QWORD PTR sizeobj$[rsp], rax
  00052	74 08		 je	 SHORT $LN5@mbstreamre
  00054	48 83 7c 24 30
	00		 cmp	 QWORD PTR sizeobj$[rsp], 0
  0005a	75 0b		 jne	 SHORT $LN6@mbstreamre
$LN5@mbstreamre:

; 1379 :         size = -1;

  0005c	48 c7 44 24 38
	ff ff ff ff	 mov	 QWORD PTR size$[rsp], -1
  00065	eb 40		 jmp	 SHORT $LN4@mbstreamre
$LN6@mbstreamre:

; 1380 :     else if (PyLong_Check(sizeobj))

  00067	48 8b 44 24 30	 mov	 rax, QWORD PTR sizeobj$[rsp]
  0006c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00070	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00076	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0007b	85 c0		 test	 eax, eax
  0007d	74 11		 je	 SHORT $LN3@mbstreamre

; 1381 :         size = PyLong_AsSsize_t(sizeobj);

  0007f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sizeobj$[rsp]
  00084	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00089	48 89 44 24 38	 mov	 QWORD PTR size$[rsp], rax

; 1382 :     else {

  0008e	eb 17		 jmp	 SHORT $LN2@mbstreamre
$LN3@mbstreamre:

; 1383 :         PyErr_SetString(PyExc_TypeError, "arg 1 must be an integer");

  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@
  00097	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009e	e8 00 00 00 00	 call	 PyErr_SetString

; 1384 :         return NULL;

  000a3	33 c0		 xor	 eax, eax
  000a5	eb 2c		 jmp	 SHORT $LN8@mbstreamre
$LN2@mbstreamre:
$LN4@mbstreamre:

; 1385 :     }
; 1386 : 
; 1387 :     if (size == -1 && PyErr_Occurred())

  000a7	48 83 7c 24 38
	ff		 cmp	 QWORD PTR size$[rsp], -1
  000ad	75 0e		 jne	 SHORT $LN1@mbstreamre
  000af	e8 00 00 00 00	 call	 PyErr_Occurred
  000b4	48 85 c0	 test	 rax, rax
  000b7	74 04		 je	 SHORT $LN1@mbstreamre

; 1388 :         return NULL;

  000b9	33 c0		 xor	 eax, eax
  000bb	eb 16		 jmp	 SHORT $LN8@mbstreamre
$LN1@mbstreamre:

; 1389 : 
; 1390 :     return mbstreamreader_iread(self, "read", size);

  000bd	4c 8b 44 24 38	 mov	 r8, QWORD PTR size$[rsp]
  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@
  000c9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000ce	e8 00 00 00 00	 call	 mbstreamreader_iread
$LN8@mbstreamre:

; 1391 : }

  000d3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d7	c3		 ret	 0
mbstreamreader_read ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@FDBKJMMB@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@CABHOJCK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DF@CIOCGHOM@stream?5function?5returned?5a?5non?9b@ ; `string'
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
EXTRN	_PyObject_CallMethod_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_iread DD imagerel mbstreamreader_iread
	DD	imagerel mbstreamreader_iread+1909
	DD	imagerel $unwind$mbstreamreader_iread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_iread DD 021601H
	DD	0190116H
xdata	ENDS
;	COMDAT ??_C@_1CG@FDBKJMMB@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@FDBKJMMB@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'c', 00H, 't', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@CABHOJCK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@CABHOJCK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'c', 00H, 'r', 00H, 'e', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CIOCGHOM@stream?5function?5returned?5a?5non?9b@
CONST	SEGMENT
??_C@_0DF@CIOCGHOM@stream?5function?5returned?5a?5non?9b@ DB 'stream func'
	DB	'tion returned a non-bytes object (%.100s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbstreamreader_iread
_TEXT	SEGMENT
rsize$ = 48
cres$ = 56
buf$ = 64
finalsize$ = 120
endoffile$21823 = 128
ctr$21841 = 136
ctrdata$21842 = 144
tv132 = 152
tv260 = 160
tv286 = 168
tv306 = 176
tv304 = 184
self$ = 208
method$ = 216
sizehint$ = 224
mbstreamreader_iread PROC				; COMDAT

; 1266 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 1267 :     MultibyteDecodeBuffer buf;
; 1268 :     PyObject *cres;
; 1269 :     Py_ssize_t rsize, finalsize = 0;

  00016	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR finalsize$[rsp], 0

; 1270 : 
; 1271 :     if (sizehint == 0)

  0001f	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR sizehint$[rsp], 0
  00028	75 0e		 jne	 SHORT $LN41@mbstreamre@2

; 1272 :         return PyUnicode_New(0, 0);

  0002a	33 d2		 xor	 edx, edx
  0002c	33 c9		 xor	 ecx, ecx
  0002e	e8 00 00 00 00	 call	 PyUnicode_New
  00033	e9 35 07 00 00	 jmp	 $LN42@mbstreamre@2
$LN41@mbstreamre@2:

; 1273 : 
; 1274 :     buf.outobj = buf.excobj = NULL;

  00038	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR buf$[rsp+40], 0
  00041	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp+40]
  00046	48 89 44 24 70	 mov	 QWORD PTR buf$[rsp+48], rax

; 1275 :     cres = NULL;

  0004b	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR cres$[rsp], 0
$LN40@mbstreamre@2:

; 1276 : 
; 1277 :     for (;;) {
; 1278 :         int endoffile;
; 1279 : 
; 1280 :         if (sizehint < 0)

  00054	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR sizehint$[rsp], 0
  0005d	7d 26		 jge	 SHORT $LN38@mbstreamre@2

; 1281 :             cres = PyObject_CallMethod(self->stream,
; 1282 :                             (char *)method, NULL);

  0005f	45 33 c0	 xor	 r8d, r8d
  00062	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR method$[rsp]
  0006a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00072	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00079	e8 00 00 00 00	 call	 _PyObject_CallMethod_SizeT
  0007e	48 89 44 24 38	 mov	 QWORD PTR cres$[rsp], rax

; 1283 :         else

  00083	eb 30		 jmp	 SHORT $LN37@mbstreamre@2
$LN38@mbstreamre@2:

; 1284 :             cres = PyObject_CallMethod(self->stream,
; 1285 :                             (char *)method, "i", sizehint);

  00085	4c 8b 8c 24 e0
	00 00 00	 mov	 r9, QWORD PTR sizehint$[rsp]
  0008d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  00094	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR method$[rsp]
  0009c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000a4	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  000ab	e8 00 00 00 00	 call	 _PyObject_CallMethod_SizeT
  000b0	48 89 44 24 38	 mov	 QWORD PTR cres$[rsp], rax
$LN37@mbstreamre@2:

; 1286 :         if (cres == NULL)

  000b5	48 83 7c 24 38
	00		 cmp	 QWORD PTR cres$[rsp], 0
  000bb	75 05		 jne	 SHORT $LN36@mbstreamre@2

; 1287 :             goto errorexit;

  000bd	e9 61 06 00 00	 jmp	 $errorexit$21832
$LN36@mbstreamre@2:

; 1288 : 
; 1289 :         if (!PyBytes_Check(cres)) {

  000c2	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  000c7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000cb	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d1	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000d6	85 c0		 test	 eax, eax
  000d8	75 25		 jne	 SHORT $LN35@mbstreamre@2

; 1290 :             PyErr_Format(PyExc_TypeError,
; 1291 :                          "stream function returned a "
; 1292 :                          "non-bytes object (%.100s)",
; 1293 :                          cres->ob_type->tp_name);

  000da	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  000df	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e3	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@CIOCGHOM@stream?5function?5returned?5a?5non?9b@
  000ee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000f5	e8 00 00 00 00	 call	 PyErr_Format

; 1294 :             goto errorexit;

  000fa	e9 24 06 00 00	 jmp	 $errorexit$21832
$LN35@mbstreamre@2:

; 1295 :         }
; 1296 : 
; 1297 :         endoffile = (PyBytes_GET_SIZE(cres) == 0);

  000ff	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  00104	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00108	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0010e	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00113	85 c0		 test	 eax, eax
  00115	75 1c		 jne	 SHORT $LN44@mbstreamre@2
  00117	41 b8 11 05 00
	00		 mov	 r8d, 1297		; 00000511H
  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@CABHOJCK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00131	33 c0		 xor	 eax, eax
$LN44@mbstreamre@2:
  00133	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  00138	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0013d	75 0d		 jne	 SHORT $LN45@mbstreamre@2
  0013f	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv132[rsp], 1
  0014a	eb 0b		 jmp	 SHORT $LN46@mbstreamre@2
$LN45@mbstreamre@2:
  0014c	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv132[rsp], 0
$LN46@mbstreamre@2:
  00157	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv132[rsp]
  0015e	89 84 24 80 00
	00 00		 mov	 DWORD PTR endoffile$21823[rsp], eax

; 1298 : 
; 1299 :         if (self->pendingsize > 0) {

  00165	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0016d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00175	0f 8e 16 02 00
	00		 jle	 $LN34@mbstreamre@2

; 1300 :             PyObject *ctr;
; 1301 :             char *ctrdata;
; 1302 : 
; 1303 :             if (PyBytes_GET_SIZE(cres) > PY_SSIZE_T_MAX - self->pendingsize) {

  0017b	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  00180	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00184	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0018a	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0018f	85 c0		 test	 eax, eax
  00191	75 1c		 jne	 SHORT $LN47@mbstreamre@2
  00193	41 b8 17 05 00
	00		 mov	 r8d, 1303		; 00000517H
  00199	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@CABHOJCK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  001a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ad	33 c0		 xor	 eax, eax
$LN47@mbstreamre@2:
  001af	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  001b9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001c1	48 2b 81 80 00
	00 00		 sub	 rax, QWORD PTR [rcx+128]
  001c8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cres$[rsp]
  001cd	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  001d1	7e 0a		 jle	 SHORT $LN33@mbstreamre@2

; 1304 :                 PyErr_NoMemory();

  001d3	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1305 :                 goto errorexit;

  001d8	e9 46 05 00 00	 jmp	 $errorexit$21832
$LN33@mbstreamre@2:

; 1306 :         }
; 1307 :                     rsize = PyBytes_GET_SIZE(cres) + self->pendingsize;

  001dd	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  001e2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001e6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001ec	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001f1	85 c0		 test	 eax, eax
  001f3	75 1c		 jne	 SHORT $LN48@mbstreamre@2
  001f5	41 b8 1b 05 00
	00		 mov	 r8d, 1307		; 0000051bH
  001fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00202	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@CABHOJCK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0020f	33 c0		 xor	 eax, eax
$LN48@mbstreamre@2:
  00211	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  00216	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0021a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00222	48 03 81 80 00
	00 00		 add	 rax, QWORD PTR [rcx+128]
  00229	48 89 44 24 30	 mov	 QWORD PTR rsize$[rsp], rax

; 1308 :                     ctr = PyBytes_FromStringAndSize(NULL, rsize);

  0022e	48 8b 54 24 30	 mov	 rdx, QWORD PTR rsize$[rsp]
  00233	33 c9		 xor	 ecx, ecx
  00235	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0023a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR ctr$21841[rsp], rax

; 1309 :                     if (ctr == NULL)

  00242	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR ctr$21841[rsp], 0
  0024b	75 05		 jne	 SHORT $LN32@mbstreamre@2

; 1310 :                             goto errorexit;

  0024d	e9 d1 04 00 00	 jmp	 $errorexit$21832
$LN32@mbstreamre@2:

; 1311 :                     ctrdata = PyBytes_AS_STRING(ctr);

  00252	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ctr$21841[rsp]
  0025a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0025e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00264	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00269	85 c0		 test	 eax, eax
  0026b	75 1c		 jne	 SHORT $LN49@mbstreamre@2
  0026d	41 b8 1f 05 00
	00		 mov	 r8d, 1311		; 0000051fH
  00273	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  0027a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@FDBKJMMB@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00281	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00287	33 c0		 xor	 eax, eax
$LN49@mbstreamre@2:
  00289	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ctr$21841[rsp]
  00291	48 83 c0 78	 add	 rax, 120		; 00000078H
  00295	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR ctrdata$21842[rsp], rax

; 1312 :                     memcpy(ctrdata, self->pending, self->pendingsize);

  0029d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002a5	48 83 c0 78	 add	 rax, 120		; 00000078H
  002a9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002b1	4c 8b 81 80 00
	00 00		 mov	 r8, QWORD PTR [rcx+128]
  002b8	48 8b d0	 mov	 rdx, rax
  002bb	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ctrdata$21842[rsp]
  002c3	e8 00 00 00 00	 call	 memcpy

; 1313 :                     memcpy(ctrdata + self->pendingsize,
; 1314 :                             PyBytes_AS_STRING(cres),
; 1315 :                             PyBytes_GET_SIZE(cres));

  002c8	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  002cd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002d1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002d7	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  002dc	85 c0		 test	 eax, eax
  002de	75 1c		 jne	 SHORT $LN50@mbstreamre@2
  002e0	41 b8 23 05 00
	00		 mov	 r8d, 1315		; 00000523H
  002e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  002ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@CABHOJCK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  002f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002fa	33 c0		 xor	 eax, eax
$LN50@mbstreamre@2:
  002fc	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  00301	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00305	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0030b	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00310	85 c0		 test	 eax, eax
  00312	75 1c		 jne	 SHORT $LN51@mbstreamre@2
  00314	41 b8 22 05 00
	00		 mov	 r8d, 1314		; 00000522H
  0031a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  00321	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@CABHOJCK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00328	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0032e	33 c0		 xor	 eax, eax
$LN51@mbstreamre@2:
  00330	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  00335	48 83 c0 78	 add	 rax, 120		; 00000078H
  00339	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00341	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00348	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR ctrdata$21842[rsp]
  00350	48 03 d1	 add	 rdx, rcx
  00353	48 8b ca	 mov	 rcx, rdx
  00356	48 8b 54 24 38	 mov	 rdx, QWORD PTR cres$[rsp]
  0035b	4c 8b 42 60	 mov	 r8, QWORD PTR [rdx+96]
  0035f	48 8b d0	 mov	 rdx, rax
  00362	e8 00 00 00 00	 call	 memcpy

; 1316 :                     Py_DECREF(cres);

  00367	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cres$[rsp]
  0036c	e8 00 00 00 00	 call	 _Py_DecRef

; 1317 :                     cres = ctr;

  00371	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ctr$21841[rsp]
  00379	48 89 44 24 38	 mov	 QWORD PTR cres$[rsp], rax

; 1318 :                     self->pendingsize = 0;

  0037e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00386	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0
$LN34@mbstreamre@2:

; 1319 :         }
; 1320 : 
; 1321 :         rsize = PyBytes_GET_SIZE(cres);

  00391	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  00396	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0039a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003a0	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  003a5	85 c0		 test	 eax, eax
  003a7	75 1c		 jne	 SHORT $LN52@mbstreamre@2
  003a9	41 b8 29 05 00
	00		 mov	 r8d, 1321		; 00000529H
  003af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  003b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@CABHOJCK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  003bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003c3	33 c0		 xor	 eax, eax
$LN52@mbstreamre@2:
  003c5	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  003ca	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  003ce	48 89 44 24 30	 mov	 QWORD PTR rsize$[rsp], rax

; 1322 :         if (decoder_prepare_buffer(&buf, PyBytes_AS_STRING(cres),
; 1323 :                                    rsize) != 0)

  003d3	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  003d8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003dc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003e2	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  003e7	85 c0		 test	 eax, eax
  003e9	75 1c		 jne	 SHORT $LN53@mbstreamre@2
  003eb	41 b8 2a 05 00
	00		 mov	 r8d, 1322		; 0000052aH
  003f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  003f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@CABHOJCK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  003ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00405	33 c0		 xor	 eax, eax
$LN53@mbstreamre@2:
  00407	48 8b 44 24 38	 mov	 rax, QWORD PTR cres$[rsp]
  0040c	48 83 c0 78	 add	 rax, 120		; 00000078H
  00410	4c 8b 44 24 30	 mov	 r8, QWORD PTR rsize$[rsp]
  00415	48 8b d0	 mov	 rdx, rax
  00418	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  0041d	e8 00 00 00 00	 call	 decoder_prepare_buffer
  00422	85 c0		 test	 eax, eax
  00424	74 05		 je	 SHORT $LN31@mbstreamre@2

; 1324 :             goto errorexit;

  00426	e9 f8 02 00 00	 jmp	 $errorexit$21832
$LN31@mbstreamre@2:

; 1325 : 
; 1326 :         if (rsize > 0 && decoder_feed_buffer(
; 1327 :                         (MultibyteStatefulDecoderContext *)self, &buf))

  0042b	48 83 7c 24 30
	00		 cmp	 QWORD PTR rsize$[rsp], 0
  00431	7e 1b		 jle	 SHORT $LN30@mbstreamre@2
  00433	48 8d 54 24 40	 lea	 rdx, QWORD PTR buf$[rsp]
  00438	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00440	e8 00 00 00 00	 call	 decoder_feed_buffer
  00445	85 c0		 test	 eax, eax
  00447	74 05		 je	 SHORT $LN30@mbstreamre@2

; 1328 :             goto errorexit;

  00449	e9 d5 02 00 00	 jmp	 $errorexit$21832
$LN30@mbstreamre@2:

; 1329 : 
; 1330 :         if (endoffile || sizehint < 0) {

  0044e	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR endoffile$21823[rsp], 0
  00456	75 0b		 jne	 SHORT $LN28@mbstreamre@2
  00458	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR sizehint$[rsp], 0
  00461	7d 4f		 jge	 SHORT $LN29@mbstreamre@2
$LN28@mbstreamre@2:

; 1331 :             if (buf.inbuf < buf.inbuf_end &&
; 1332 :                 multibytecodec_decerror(self->codec, &self->state,
; 1333 :                             &buf, self->errors, MBERR_TOOFEW))

  00463	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp+16]
  00468	48 39 44 24 40	 cmp	 QWORD PTR buf$[rsp], rax
  0046d	73 43		 jae	 SHORT $LN27@mbstreamre@2
  0046f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00477	48 83 c0 68	 add	 rax, 104		; 00000068H
  0047b	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR [rsp+32], -2
  00484	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0048c	4c 8b 49 70	 mov	 r9, QWORD PTR [rcx+112]
  00490	4c 8d 44 24 40	 lea	 r8, QWORD PTR buf$[rsp]
  00495	48 8b d0	 mov	 rdx, rax
  00498	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004a0	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  004a4	e8 00 00 00 00	 call	 multibytecodec_decerror
  004a9	85 c0		 test	 eax, eax
  004ab	74 05		 je	 SHORT $LN27@mbstreamre@2

; 1334 :                 goto errorexit;

  004ad	e9 71 02 00 00	 jmp	 $errorexit$21832
$LN27@mbstreamre@2:
$LN29@mbstreamre@2:

; 1335 :         }
; 1336 : 
; 1337 :         if (buf.inbuf < buf.inbuf_end) { /* pending sequence exists */

  004b2	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp+16]
  004b7	48 39 44 24 40	 cmp	 QWORD PTR buf$[rsp], rax
  004bc	73 1b		 jae	 SHORT $LN26@mbstreamre@2

; 1338 :             if (decoder_append_pending(STATEFUL_DCTX(self),
; 1339 :                                        &buf) != 0)

  004be	48 8d 54 24 40	 lea	 rdx, QWORD PTR buf$[rsp]
  004c3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004cb	e8 00 00 00 00	 call	 decoder_append_pending
  004d0	85 c0		 test	 eax, eax
  004d2	74 05		 je	 SHORT $LN25@mbstreamre@2

; 1340 :                 goto errorexit;

  004d4	e9 4a 02 00 00	 jmp	 $errorexit$21832
$LN25@mbstreamre@2:
$LN26@mbstreamre@2:

; 1341 :         }
; 1342 : 
; 1343 :         finalsize = (Py_ssize_t)(buf.outbuf -
; 1344 :                         PyUnicode_AS_UNICODE(buf.outobj));

  004d9	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  004de	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004e2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004e8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004ed	85 c0		 test	 eax, eax
  004ef	75 1c		 jne	 SHORT $LN54@mbstreamre@2
  004f1	41 b8 40 05 00
	00		 mov	 r8d, 1344		; 00000540H
  004f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  004fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MOOGFILO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00505	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0050b	33 c0		 xor	 eax, eax
$LN54@mbstreamre@2:
  0050d	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  00512	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00517	74 13		 je	 SHORT $LN55@mbstreamre@2
  00519	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  0051e	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00522	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv260[rsp], rax
  0052a	eb 12		 jmp	 SHORT $LN56@mbstreamre@2
$LN55@mbstreamre@2:
  0052c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR buf$[rsp+48]
  00531	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00536	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv260[rsp], rax
$LN56@mbstreamre@2:
  0053e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv260[rsp]
  00546	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buf$[rsp+24]
  0054b	48 2b c8	 sub	 rcx, rax
  0054e	48 8b c1	 mov	 rax, rcx
  00551	48 d1 f8	 sar	 rax, 1
  00554	48 89 44 24 78	 mov	 QWORD PTR finalsize$[rsp], rax

; 1345 :         Py_DECREF(cres);

  00559	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cres$[rsp]
  0055e	e8 00 00 00 00	 call	 _Py_DecRef

; 1346 :         cres = NULL;

  00563	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR cres$[rsp], 0

; 1347 : 
; 1348 :         if (sizehint < 0 || finalsize != 0 || rsize == 0)

  0056c	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR sizehint$[rsp], 0
  00575	7c 10		 jl	 SHORT $LN23@mbstreamre@2
  00577	48 83 7c 24 78
	00		 cmp	 QWORD PTR finalsize$[rsp], 0
  0057d	75 08		 jne	 SHORT $LN23@mbstreamre@2
  0057f	48 83 7c 24 30
	00		 cmp	 QWORD PTR rsize$[rsp], 0
  00585	75 02		 jne	 SHORT $LN24@mbstreamre@2
$LN23@mbstreamre@2:

; 1349 :             break;

  00587	eb 11		 jmp	 SHORT $LN39@mbstreamre@2
$LN24@mbstreamre@2:

; 1350 : 
; 1351 :         sizehint = 1; /* read 1 more byte and retry */

  00589	48 c7 84 24 e0
	00 00 00 01 00
	00 00		 mov	 QWORD PTR sizehint$[rsp], 1

; 1352 :     }

  00595	e9 ba fa ff ff	 jmp	 $LN40@mbstreamre@2
$LN39@mbstreamre@2:

; 1353 : 
; 1354 :     if (finalsize != PyUnicode_GET_SIZE(buf.outobj))

  0059a	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  0059f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  005a3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  005a9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  005ae	85 c0		 test	 eax, eax
  005b0	75 1c		 jne	 SHORT $LN57@mbstreamre@2
  005b2	41 b8 4a 05 00
	00		 mov	 r8d, 1354		; 0000054aH
  005b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  005bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MOOGFILO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  005c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005cc	33 c0		 xor	 eax, eax
$LN57@mbstreamre@2:
  005ce	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  005d3	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  005d8	74 60		 je	 SHORT $LN63@mbstreamre@2
  005da	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  005df	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005e2	c1 e8 06	 shr	 eax, 6
  005e5	83 e0 01	 and	 eax, 1
  005e8	85 c0		 test	 eax, eax
  005ea	74 25		 je	 SHORT $LN58@mbstreamre@2
  005ec	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  005f1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005f4	c1 e8 05	 shr	 eax, 5
  005f7	83 e0 01	 and	 eax, 1
  005fa	85 c0		 test	 eax, eax
  005fc	74 13		 je	 SHORT $LN58@mbstreamre@2
  005fe	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  00603	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00607	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv286[rsp], rax
  0060f	eb 14		 jmp	 SHORT $LN59@mbstreamre@2
$LN58@mbstreamre@2:
  00611	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  00616	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0061d	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv286[rsp], rax
$LN59@mbstreamre@2:
  00625	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv286[rsp]
  0062d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv306[rsp], rax
  00635	e9 8d 00 00 00	 jmp	 $LN64@mbstreamre@2
$LN63@mbstreamre@2:
  0063a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR buf$[rsp+48]
  0063f	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00644	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  00649	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0064e	75 1c		 jne	 SHORT $LN60@mbstreamre@2
  00650	41 b8 4a 05 00
	00		 mov	 r8d, 1354		; 0000054aH
  00656	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  0065d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@JIIJICAB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AAu?$AAf?$AA?4?$AAo?$AAu?$AAt?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9@
  00664	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0066a	33 c0		 xor	 eax, eax
$LN60@mbstreamre@2:
  0066c	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  00671	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00674	c1 e8 06	 shr	 eax, 6
  00677	83 e0 01	 and	 eax, 1
  0067a	85 c0		 test	 eax, eax
  0067c	74 25		 je	 SHORT $LN61@mbstreamre@2
  0067e	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  00683	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00686	c1 e8 05	 shr	 eax, 5
  00689	83 e0 01	 and	 eax, 1
  0068c	85 c0		 test	 eax, eax
  0068e	74 13		 je	 SHORT $LN61@mbstreamre@2
  00690	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  00695	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00699	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv304[rsp], rax
  006a1	eb 14		 jmp	 SHORT $LN62@mbstreamre@2
$LN61@mbstreamre@2:
  006a3	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  006a8	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  006af	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv304[rsp], rax
$LN62@mbstreamre@2:
  006b7	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv304[rsp]
  006bf	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv306[rsp], rax
$LN64@mbstreamre@2:
  006c7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv306[rsp]
  006cf	48 39 44 24 78	 cmp	 QWORD PTR finalsize$[rsp], rax
  006d4	74 16		 je	 SHORT $LN22@mbstreamre@2

; 1355 :         if (PyUnicode_Resize(&buf.outobj, finalsize) == -1)

  006d6	48 8b 54 24 78	 mov	 rdx, QWORD PTR finalsize$[rsp]
  006db	48 8d 4c 24 70	 lea	 rcx, QWORD PTR buf$[rsp+48]
  006e0	e8 00 00 00 00	 call	 PyUnicode_Resize
  006e5	83 f8 ff	 cmp	 eax, -1
  006e8	75 02		 jne	 SHORT $LN21@mbstreamre@2

; 1356 :             goto errorexit;

  006ea	eb 37		 jmp	 SHORT $errorexit$21832
$LN21@mbstreamre@2:
$LN22@mbstreamre@2:
$LN20@mbstreamre@2:

; 1357 : 
; 1358 :     Py_XDECREF(cres);

  006ec	48 83 7c 24 38
	00		 cmp	 QWORD PTR cres$[rsp], 0
  006f2	74 0a		 je	 SHORT $LN17@mbstreamre@2
  006f4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cres$[rsp]
  006f9	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@mbstreamre@2:
  006fe	33 c0		 xor	 eax, eax
  00700	85 c0		 test	 eax, eax
  00702	75 e8		 jne	 SHORT $LN20@mbstreamre@2
$LN16@mbstreamre@2:

; 1359 :     Py_XDECREF(buf.excobj);

  00704	48 83 7c 24 68
	00		 cmp	 QWORD PTR buf$[rsp+40], 0
  0070a	74 0a		 je	 SHORT $LN13@mbstreamre@2
  0070c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp+40]
  00711	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@mbstreamre@2:
  00716	33 c0		 xor	 eax, eax
  00718	85 c0		 test	 eax, eax
  0071a	75 e8		 jne	 SHORT $LN16@mbstreamre@2

; 1360 :     return buf.outobj;

  0071c	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp+48]
  00721	eb 4a		 jmp	 SHORT $LN42@mbstreamre@2
$errorexit$21832:
$LN12@mbstreamre@2:

; 1361 : 
; 1362 : errorexit:
; 1363 :     Py_XDECREF(cres);

  00723	48 83 7c 24 38
	00		 cmp	 QWORD PTR cres$[rsp], 0
  00729	74 0a		 je	 SHORT $LN9@mbstreamre@2
  0072b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cres$[rsp]
  00730	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@mbstreamre@2:
  00735	33 c0		 xor	 eax, eax
  00737	85 c0		 test	 eax, eax
  00739	75 e8		 jne	 SHORT $LN12@mbstreamre@2
$LN8@mbstreamre@2:

; 1364 :     Py_XDECREF(buf.excobj);

  0073b	48 83 7c 24 68
	00		 cmp	 QWORD PTR buf$[rsp+40], 0
  00741	74 0a		 je	 SHORT $LN5@mbstreamre@2
  00743	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp+40]
  00748	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@mbstreamre@2:
  0074d	33 c0		 xor	 eax, eax
  0074f	85 c0		 test	 eax, eax
  00751	75 e8		 jne	 SHORT $LN8@mbstreamre@2
$LN4@mbstreamre@2:

; 1365 :     Py_XDECREF(buf.outobj);

  00753	48 83 7c 24 70
	00		 cmp	 QWORD PTR buf$[rsp+48], 0
  00759	74 0a		 je	 SHORT $LN1@mbstreamre@2
  0075b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR buf$[rsp+48]
  00760	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@mbstreamre@2:
  00765	33 c0		 xor	 eax, eax
  00767	85 c0		 test	 eax, eax
  00769	75 e8		 jne	 SHORT $LN4@mbstreamre@2

; 1366 :     return NULL;

  0076b	33 c0		 xor	 eax, eax
$LN42@mbstreamre@2:

; 1367 : }

  0076d	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00774	c3		 ret	 0
mbstreamreader_iread ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_readline DD imagerel mbstreamreader_readline
	DD	imagerel mbstreamreader_readline+216
	DD	imagerel $unwind$mbstreamreader_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_readline DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mbstreamreader_readline
_TEXT	SEGMENT
sizeobj$ = 48
size$ = 56
self$ = 80
args$ = 88
mbstreamreader_readline PROC				; COMDAT

; 1395 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1396 :     PyObject *sizeobj = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR sizeobj$[rsp], 0

; 1397 :     Py_ssize_t size;
; 1398 : 
; 1399 :     if (!PyArg_UnpackTuple(args, "readline", 0, 1, &sizeobj))

  00017	48 8d 44 24 30	 lea	 rax, QWORD PTR sizeobj$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00021	41 b9 01 00 00
	00		 mov	 r9d, 1
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KBCDPPMN@readline?$AA@
  00031	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00036	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003b	85 c0		 test	 eax, eax
  0003d	75 07		 jne	 SHORT $LN7@mbstreamre@3

; 1400 :         return NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 8d 00 00 00	 jmp	 $LN8@mbstreamre@3
$LN7@mbstreamre@3:

; 1401 : 
; 1402 :     if (sizeobj == Py_None || sizeobj == NULL)

  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004d	48 39 44 24 30	 cmp	 QWORD PTR sizeobj$[rsp], rax
  00052	74 08		 je	 SHORT $LN5@mbstreamre@3
  00054	48 83 7c 24 30
	00		 cmp	 QWORD PTR sizeobj$[rsp], 0
  0005a	75 0b		 jne	 SHORT $LN6@mbstreamre@3
$LN5@mbstreamre@3:

; 1403 :         size = -1;

  0005c	48 c7 44 24 38
	ff ff ff ff	 mov	 QWORD PTR size$[rsp], -1
  00065	eb 40		 jmp	 SHORT $LN4@mbstreamre@3
$LN6@mbstreamre@3:

; 1404 :     else if (PyLong_Check(sizeobj))

  00067	48 8b 44 24 30	 mov	 rax, QWORD PTR sizeobj$[rsp]
  0006c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00070	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00076	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0007b	85 c0		 test	 eax, eax
  0007d	74 11		 je	 SHORT $LN3@mbstreamre@3

; 1405 :         size = PyLong_AsSsize_t(sizeobj);

  0007f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sizeobj$[rsp]
  00084	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00089	48 89 44 24 38	 mov	 QWORD PTR size$[rsp], rax

; 1406 :     else {

  0008e	eb 17		 jmp	 SHORT $LN2@mbstreamre@3
$LN3@mbstreamre@3:

; 1407 :         PyErr_SetString(PyExc_TypeError, "arg 1 must be an integer");

  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@
  00097	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009e	e8 00 00 00 00	 call	 PyErr_SetString

; 1408 :         return NULL;

  000a3	33 c0		 xor	 eax, eax
  000a5	eb 2c		 jmp	 SHORT $LN8@mbstreamre@3
$LN2@mbstreamre@3:
$LN4@mbstreamre@3:

; 1409 :     }
; 1410 : 
; 1411 :     if (size == -1 && PyErr_Occurred())

  000a7	48 83 7c 24 38
	ff		 cmp	 QWORD PTR size$[rsp], -1
  000ad	75 0e		 jne	 SHORT $LN1@mbstreamre@3
  000af	e8 00 00 00 00	 call	 PyErr_Occurred
  000b4	48 85 c0	 test	 rax, rax
  000b7	74 04		 je	 SHORT $LN1@mbstreamre@3

; 1412 :         return NULL;

  000b9	33 c0		 xor	 eax, eax
  000bb	eb 16		 jmp	 SHORT $LN8@mbstreamre@3
$LN1@mbstreamre@3:

; 1413 : 
; 1414 :     return mbstreamreader_iread(self, "readline", size);

  000bd	4c 8b 44 24 38	 mov	 r8, QWORD PTR size$[rsp]
  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KBCDPPMN@readline?$AA@
  000c9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000ce	e8 00 00 00 00	 call	 mbstreamreader_iread
$LN8@mbstreamre@3:

; 1415 : }

  000d3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d7	c3		 ret	 0
mbstreamreader_readline ENDP
_TEXT	ENDS
EXTRN	PyUnicode_Splitlines:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_readlines DD imagerel mbstreamreader_readlines
	DD	imagerel mbstreamreader_readlines+268
	DD	imagerel $unwind$mbstreamreader_readlines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_readlines DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mbstreamreader_readlines
_TEXT	SEGMENT
sizehint$ = 48
sr$ = 56
r$ = 64
sizehintobj$ = 72
self$ = 96
args$ = 104
mbstreamreader_readlines PROC				; COMDAT

; 1419 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1420 :     PyObject *sizehintobj = NULL, *r, *sr;

  0000e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR sizehintobj$[rsp], 0

; 1421 :     Py_ssize_t sizehint;
; 1422 : 
; 1423 :     if (!PyArg_UnpackTuple(args, "readlines", 0, 1, &sizehintobj))

  00017	48 8d 44 24 48	 lea	 rax, QWORD PTR sizehintobj$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00021	41 b9 01 00 00
	00		 mov	 r9d, 1
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09OBGGLHMH@readlines?$AA@
  00031	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00036	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003b	85 c0		 test	 eax, eax
  0003d	75 07		 jne	 SHORT $LN8@mbstreamre@4

; 1424 :         return NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 c1 00 00 00	 jmp	 $LN9@mbstreamre@4
$LN8@mbstreamre@4:

; 1425 : 
; 1426 :     if (sizehintobj == Py_None || sizehintobj == NULL)

  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004d	48 39 44 24 48	 cmp	 QWORD PTR sizehintobj$[rsp], rax
  00052	74 08		 je	 SHORT $LN6@mbstreamre@4
  00054	48 83 7c 24 48
	00		 cmp	 QWORD PTR sizehintobj$[rsp], 0
  0005a	75 0b		 jne	 SHORT $LN7@mbstreamre@4
$LN6@mbstreamre@4:

; 1427 :         sizehint = -1;

  0005c	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR sizehint$[rsp], -1
  00065	eb 40		 jmp	 SHORT $LN5@mbstreamre@4
$LN7@mbstreamre@4:

; 1428 :     else if (PyLong_Check(sizehintobj))

  00067	48 8b 44 24 48	 mov	 rax, QWORD PTR sizehintobj$[rsp]
  0006c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00070	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00076	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0007b	85 c0		 test	 eax, eax
  0007d	74 11		 je	 SHORT $LN4@mbstreamre@4

; 1429 :         sizehint = PyLong_AsSsize_t(sizehintobj);

  0007f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR sizehintobj$[rsp]
  00084	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00089	48 89 44 24 30	 mov	 QWORD PTR sizehint$[rsp], rax

; 1430 :     else {

  0008e	eb 17		 jmp	 SHORT $LN3@mbstreamre@4
$LN4@mbstreamre@4:

; 1431 :         PyErr_SetString(PyExc_TypeError, "arg 1 must be an integer");

  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DJBLLDPH@arg?51?5must?5be?5an?5integer?$AA@
  00097	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009e	e8 00 00 00 00	 call	 PyErr_SetString

; 1432 :         return NULL;

  000a3	33 c0		 xor	 eax, eax
  000a5	eb 60		 jmp	 SHORT $LN9@mbstreamre@4
$LN3@mbstreamre@4:
$LN5@mbstreamre@4:

; 1433 :     }
; 1434 : 
; 1435 :     if (sizehint == -1 && PyErr_Occurred())

  000a7	48 83 7c 24 30
	ff		 cmp	 QWORD PTR sizehint$[rsp], -1
  000ad	75 0e		 jne	 SHORT $LN2@mbstreamre@4
  000af	e8 00 00 00 00	 call	 PyErr_Occurred
  000b4	48 85 c0	 test	 rax, rax
  000b7	74 04		 je	 SHORT $LN2@mbstreamre@4

; 1436 :         return NULL;

  000b9	33 c0		 xor	 eax, eax
  000bb	eb 4a		 jmp	 SHORT $LN9@mbstreamre@4
$LN2@mbstreamre@4:

; 1437 : 
; 1438 :     r = mbstreamreader_iread(self, "read", sizehint);

  000bd	4c 8b 44 24 30	 mov	 r8, QWORD PTR sizehint$[rsp]
  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@
  000c9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000ce	e8 00 00 00 00	 call	 mbstreamreader_iread
  000d3	48 89 44 24 40	 mov	 QWORD PTR r$[rsp], rax

; 1439 :     if (r == NULL)

  000d8	48 83 7c 24 40
	00		 cmp	 QWORD PTR r$[rsp], 0
  000de	75 04		 jne	 SHORT $LN1@mbstreamre@4

; 1440 :         return NULL;

  000e0	33 c0		 xor	 eax, eax
  000e2	eb 23		 jmp	 SHORT $LN9@mbstreamre@4
$LN1@mbstreamre@4:

; 1441 : 
; 1442 :     sr = PyUnicode_Splitlines(r, 1);

  000e4	ba 01 00 00 00	 mov	 edx, 1
  000e9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  000ee	e8 00 00 00 00	 call	 PyUnicode_Splitlines
  000f3	48 89 44 24 38	 mov	 QWORD PTR sr$[rsp], rax

; 1443 :     Py_DECREF(r);

  000f8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  000fd	e8 00 00 00 00	 call	 _Py_DecRef

; 1444 :     return sr;

  00102	48 8b 44 24 38	 mov	 rax, QWORD PTR sr$[rsp]
$LN9@mbstreamre@4:

; 1445 : }

  00107	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0010b	c3		 ret	 0
mbstreamreader_readlines ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_reset DD imagerel mbstreamreader_reset
	DD	imagerel mbstreamreader_reset+118
	DD	imagerel $unwind$mbstreamreader_reset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_reset DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mbstreamreader_reset
_TEXT	SEGMENT
tv79 = 32
self$ = 64
mbstreamreader_reset PROC				; COMDAT

; 1449 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1450 :     if (self->codec->decreset != NULL &&
; 1451 :         self->codec->decreset(&self->state, self->codec->config) != 0)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  00017	74 35		 je	 SHORT $LN1@mbstreamre@5
  00019	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00027	48 83 c1 68	 add	 rcx, 104		; 00000068H
  0002b	48 8b 54 24 40	 mov	 rdx, QWORD PTR self$[rsp]
  00030	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00034	48 89 54 24 20	 mov	 QWORD PTR tv79[rsp], rdx
  00039	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR tv79[rsp]
  00042	ff 50 40	 call	 QWORD PTR [rax+64]
  00045	48 85 c0	 test	 rax, rax
  00048	74 04		 je	 SHORT $LN1@mbstreamre@5

; 1452 :         return NULL;

  0004a	33 c0		 xor	 eax, eax
  0004c	eb 23		 jmp	 SHORT $LN2@mbstreamre@5
$LN1@mbstreamre@5:

; 1453 :     self->pendingsize = 0;

  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00053	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1454 : 
; 1455 :     Py_RETURN_NONE;

  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00065	e8 00 00 00 00	 call	 _Py_IncRef
  0006a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@mbstreamre@5:

; 1456 : }

  00071	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00075	c3		 ret	 0
mbstreamreader_reset ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@BGFKLJJG@O?$HMs?3StreamReader?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_new DD imagerel mbstreamreader_new
	DD	imagerel mbstreamreader_new+447
	DD	imagerel $unwind$mbstreamreader_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_new DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0BB@BGFKLJJG@O?$HMs?3StreamReader?$AA@
CONST	SEGMENT
??_C@_0BB@BGFKLJJG@O?$HMs?3StreamReader?$AA@ DB 'O|s:StreamReader', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbstreamreader_new
_TEXT	SEGMENT
stream$ = 48
errors$ = 56
codec$ = 64
self$ = 72
tv147 = 80
type$ = 112
args$ = 120
kwds$ = 128
mbstreamreader_new PROC					; COMDAT

; 1479 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1480 :     MultibyteStreamReaderObject *self;
; 1481 :     PyObject *stream, *codec = NULL;

  00013	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR codec$[rsp], 0

; 1482 :     char *errors = NULL;

  0001c	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 1483 : 
; 1484 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|s:StreamReader",
; 1485 :                             streamkwarglist, &stream, &errors))

  00025	48 8d 44 24 38	 lea	 rax, QWORD PTR errors$[rsp]
  0002a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002f	48 8d 44 24 30	 lea	 rax, QWORD PTR stream$[rsp]
  00034	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00039	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:streamkwarglist
  00040	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@BGFKLJJG@O?$HMs?3StreamReader?$AA@
  00047	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0004f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00054	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00059	85 c0		 test	 eax, eax
  0005b	75 07		 jne	 SHORT $LN14@mbstreamre@6

; 1486 :         return NULL;

  0005d	33 c0		 xor	 eax, eax
  0005f	e9 56 01 00 00	 jmp	 $LN15@mbstreamre@6
$LN14@mbstreamre@6:

; 1487 : 
; 1488 :     self = (MultibyteStreamReaderObject *)type->tp_alloc(type, 0);

  00064	33 d2		 xor	 edx, edx
  00066	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  0006b	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  00070	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00076	48 89 44 24 48	 mov	 QWORD PTR self$[rsp], rax

; 1489 :     if (self == NULL)

  0007b	48 83 7c 24 48
	00		 cmp	 QWORD PTR self$[rsp], 0
  00081	75 07		 jne	 SHORT $LN13@mbstreamre@6

; 1490 :         return NULL;

  00083	33 c0		 xor	 eax, eax
  00085	e9 30 01 00 00	 jmp	 $LN15@mbstreamre@6
$LN13@mbstreamre@6:

; 1491 : 
; 1492 :     codec = PyObject_GetAttrString((PyObject *)type, "codec");

  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GPLHJCMP@codec?$AA@
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  00096	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0009b	48 89 44 24 40	 mov	 QWORD PTR codec$[rsp], rax

; 1493 :     if (codec == NULL)

  000a0	48 83 7c 24 40
	00		 cmp	 QWORD PTR codec$[rsp], 0
  000a6	75 05		 jne	 SHORT $LN12@mbstreamre@6

; 1494 :         goto errorexit;

  000a8	e9 db 00 00 00	 jmp	 $errorexit$22056
$LN12@mbstreamre@6:

; 1495 :     if (!MultibyteCodec_Check(codec)) {

  000ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteCodec_Type
  000b4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR codec$[rsp]
  000b9	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000bd	74 18		 je	 SHORT $LN11@mbstreamre@6

; 1496 :         PyErr_SetString(PyExc_TypeError, "codec is unexpected type");

  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@
  000c6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000cd	e8 00 00 00 00	 call	 PyErr_SetString

; 1497 :         goto errorexit;

  000d2	e9 b1 00 00 00	 jmp	 $errorexit$22056
$LN11@mbstreamre@6:

; 1498 :     }
; 1499 : 
; 1500 :     self->codec = ((MultibyteCodecObject *)codec)->codec;

  000d7	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  000dc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR codec$[rsp]
  000e1	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000e5	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1501 :     self->stream = stream;

  000e9	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  000ee	48 8b 4c 24 30	 mov	 rcx, QWORD PTR stream$[rsp]
  000f3	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 1502 :     Py_INCREF(stream);

  000fa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR stream$[rsp]
  000ff	e8 00 00 00 00	 call	 _Py_IncRef

; 1503 :     self->pendingsize = 0;

  00104	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  00109	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1504 :     self->errors = internal_error_callback(errors);

  00114	48 8b 4c 24 38	 mov	 rcx, QWORD PTR errors$[rsp]
  00119	e8 00 00 00 00	 call	 internal_error_callback
  0011e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR self$[rsp]
  00123	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 1505 :     if (self->errors == NULL)

  00127	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  0012c	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00131	75 02		 jne	 SHORT $LN10@mbstreamre@6

; 1506 :         goto errorexit;

  00133	eb 53		 jmp	 SHORT $errorexit$22056
$LN10@mbstreamre@6:

; 1507 :     if (self->codec->decinit != NULL &&
; 1508 :         self->codec->decinit(&self->state, self->codec->config) != 0)

  00135	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  0013a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0013e	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00143	74 32		 je	 SHORT $LN9@mbstreamre@6
  00145	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  0014a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0014e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR self$[rsp]
  00153	48 83 c1 68	 add	 rcx, 104		; 00000068H
  00157	48 8b 54 24 48	 mov	 rdx, QWORD PTR self$[rsp]
  0015c	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00160	48 89 54 24 50	 mov	 QWORD PTR tv147[rsp], rdx
  00165	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00169	48 8b 44 24 50	 mov	 rax, QWORD PTR tv147[rsp]
  0016e	ff 50 38	 call	 QWORD PTR [rax+56]
  00171	85 c0		 test	 eax, eax
  00173	74 02		 je	 SHORT $LN9@mbstreamre@6

; 1509 :         goto errorexit;

  00175	eb 11		 jmp	 SHORT $errorexit$22056
$LN9@mbstreamre@6:

; 1510 : 
; 1511 :     Py_DECREF(codec);

  00177	48 8b 4c 24 40	 mov	 rcx, QWORD PTR codec$[rsp]
  0017c	e8 00 00 00 00	 call	 _Py_DecRef

; 1512 :     return (PyObject *)self;

  00181	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  00186	eb 32		 jmp	 SHORT $LN15@mbstreamre@6
$errorexit$22056:
$LN8@mbstreamre@6:

; 1513 : 
; 1514 : errorexit:
; 1515 :     Py_XDECREF(self);

  00188	48 83 7c 24 48
	00		 cmp	 QWORD PTR self$[rsp], 0
  0018e	74 0a		 je	 SHORT $LN5@mbstreamre@6
  00190	48 8b 4c 24 48	 mov	 rcx, QWORD PTR self$[rsp]
  00195	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@mbstreamre@6:
  0019a	33 c0		 xor	 eax, eax
  0019c	85 c0		 test	 eax, eax
  0019e	75 e8		 jne	 SHORT $LN8@mbstreamre@6
$LN4@mbstreamre@6:

; 1516 :     Py_XDECREF(codec);

  001a0	48 83 7c 24 40
	00		 cmp	 QWORD PTR codec$[rsp], 0
  001a6	74 0a		 je	 SHORT $LN1@mbstreamre@6
  001a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR codec$[rsp]
  001ad	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@mbstreamre@6:
  001b2	33 c0		 xor	 eax, eax
  001b4	85 c0		 test	 eax, eax
  001b6	75 e8		 jne	 SHORT $LN4@mbstreamre@6

; 1517 :     return NULL;

  001b8	33 c0		 xor	 eax, eax
$LN15@mbstreamre@6:

; 1518 : }

  001ba	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001be	c3		 ret	 0
mbstreamreader_new ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT mbstreamreader_init
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
mbstreamreader_init PROC				; COMDAT

; 1522 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1523 :     return 0;

  0000f	33 c0		 xor	 eax, eax

; 1524 : }

  00011	c3		 ret	 0
mbstreamreader_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@EABPECGB@mbstreamreader_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_traverse DD imagerel mbstreamreader_traverse
	DD	imagerel mbstreamreader_traverse+236
	DD	imagerel $unwind$mbstreamreader_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BI@EABPECGB@mbstreamreader_traverse?$AA@
CONST	SEGMENT
??_C@_0BI@EABPECGB@mbstreamreader_traverse?$AA@ DB 'mbstreamreader_traver'
	DB	'se', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbstreamreader_traverse
_TEXT	SEGMENT
vret$22103 = 32
vret$22111 = 36
self$ = 64
visit$ = 72
arg$ = 80
mbstreamreader_traverse PROC				; COMDAT

; 1529 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1530 :     if (ERROR_ISCUSTOM(self->errors))

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 83 78 70 01	 cmp	 QWORD PTR [rax+112], 1
  0001d	72 0c		 jb	 SHORT $LN13@mbstreamre@7
  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 83 78 70 03	 cmp	 QWORD PTR [rax+112], 3
  00029	76 5a		 jbe	 SHORT $LN14@mbstreamre@7
$LN13@mbstreamre@7:
$LN12@mbstreamre@7:

; 1531 :         Py_VISIT(self->errors);

  0002b	e8 00 00 00 00	 call	 _Py_PXCTX
  00030	85 c0		 test	 eax, eax
  00032	74 1c		 je	 SHORT $LN9@mbstreamre@7
  00034	45 33 c9	 xor	 r9d, r9d
  00037	41 b8 fb 05 00
	00		 mov	 r8d, 1531		; 000005fbH
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@EABPECGB@mbstreamreader_traverse?$AA@
  0004b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@mbstreamre@7:
  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00055	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0005a	74 23		 je	 SHORT $LN8@mbstreamre@7
  0005c	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00066	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0006a	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  0006e	89 44 24 20	 mov	 DWORD PTR vret$22103[rsp], eax
  00072	83 7c 24 20 00	 cmp	 DWORD PTR vret$22103[rsp], 0
  00077	74 06		 je	 SHORT $LN7@mbstreamre@7
  00079	8b 44 24 20	 mov	 eax, DWORD PTR vret$22103[rsp]
  0007d	eb 68		 jmp	 SHORT $LN15@mbstreamre@7
$LN7@mbstreamre@7:
$LN8@mbstreamre@7:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a6		 jne	 SHORT $LN12@mbstreamre@7
$LN14@mbstreamre@7:
$LN6@mbstreamre@7:

; 1532 :     Py_VISIT(self->stream);

  00085	e8 00 00 00 00	 call	 _Py_PXCTX
  0008a	85 c0		 test	 eax, eax
  0008c	74 1c		 je	 SHORT $LN3@mbstreamre@7
  0008e	45 33 c9	 xor	 r9d, r9d
  00091	41 b8 fc 05 00
	00		 mov	 r8d, 1532		; 000005fcH
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@EABPECGB@mbstreamreader_traverse?$AA@
  000a5	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@mbstreamre@7:
  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000af	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  000b7	74 26		 je	 SHORT $LN2@mbstreamre@7
  000b9	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000be	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000c3	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  000ca	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000ce	89 44 24 24	 mov	 DWORD PTR vret$22111[rsp], eax
  000d2	83 7c 24 24 00	 cmp	 DWORD PTR vret$22111[rsp], 0
  000d7	74 06		 je	 SHORT $LN1@mbstreamre@7
  000d9	8b 44 24 24	 mov	 eax, DWORD PTR vret$22111[rsp]
  000dd	eb 08		 jmp	 SHORT $LN15@mbstreamre@7
$LN1@mbstreamre@7:
$LN2@mbstreamre@7:
  000df	33 c0		 xor	 eax, eax
  000e1	85 c0		 test	 eax, eax
  000e3	75 a0		 jne	 SHORT $LN6@mbstreamre@7

; 1533 :     return 0;

  000e5	33 c0		 xor	 eax, eax
$LN15@mbstreamre@7:

; 1534 : }

  000e7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000eb	c3		 ret	 0
mbstreamreader_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamreader_dealloc DD imagerel mbstreamreader_dealloc
	DD	imagerel mbstreamreader_dealloc+138
	DD	imagerel $unwind$mbstreamreader_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamreader_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mbstreamreader_dealloc
_TEXT	SEGMENT
self$ = 48
mbstreamreader_dealloc PROC				; COMDAT

; 1538 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1539 :     PyObject_GC_UnTrack(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN9@mbstreamre@8:

; 1540 :     ERROR_DECREF(self->errors);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0001d	74 26		 je	 SHORT $LN6@mbstreamre@8
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 83 78 70 01	 cmp	 QWORD PTR [rax+112], 1
  00029	72 0c		 jb	 SHORT $LN5@mbstreamre@8
  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00030	48 83 78 70 03	 cmp	 QWORD PTR [rax+112], 3
  00035	76 0e		 jbe	 SHORT $LN6@mbstreamre@8
$LN5@mbstreamre@8:
  00037	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003c	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00040	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@mbstreamre@8:
  00045	33 c0		 xor	 eax, eax
  00047	85 c0		 test	 eax, eax
  00049	75 c8		 jne	 SHORT $LN9@mbstreamre@8
$LN4@mbstreamre@8:

; 1541 :     Py_XDECREF(self->stream);

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00050	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00058	74 11		 je	 SHORT $LN1@mbstreamre@8
  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00066	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@mbstreamre@8:
  0006b	33 c0		 xor	 eax, eax
  0006d	85 c0		 test	 eax, eax
  0006f	75 da		 jne	 SHORT $LN4@mbstreamre@8

; 1542 :     Py_TYPE(self)->tp_free(self);

  00071	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00076	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0007f	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 1543 : }

  00085	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00089	c3		 ret	 0
mbstreamreader_dealloc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamwriter_write DD imagerel mbstreamwriter_write
	DD	imagerel mbstreamwriter_write+63
	DD	imagerel $unwind$mbstreamwriter_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_write DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mbstreamwriter_write
_TEXT	SEGMENT
self$ = 48
strobj$ = 56
mbstreamwriter_write PROC				; COMDAT

; 1615 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1616 :     if (mbstreamwriter_iwrite(self, strobj))

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR strobj$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00018	e8 00 00 00 00	 call	 mbstreamwriter_iwrite
  0001d	85 c0		 test	 eax, eax
  0001f	74 06		 je	 SHORT $LN2@mbstreamwr

; 1617 :         return NULL;

  00021	33 c0		 xor	 eax, eax
  00023	eb 15		 jmp	 SHORT $LN3@mbstreamwr

; 1618 :     else

  00025	eb 13		 jmp	 SHORT $LN1@mbstreamwr
$LN2@mbstreamwr:

; 1619 :         Py_RETURN_NONE;

  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0002e	e8 00 00 00 00	 call	 _Py_IncRef
  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN1@mbstreamwr:
$LN3@mbstreamwr:

; 1620 : }

  0003a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003e	c3		 ret	 0
mbstreamwriter_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamwriter_iwrite DD imagerel mbstreamwriter_iwrite
	DD	imagerel mbstreamwriter_iwrite+157
	DD	imagerel $unwind$mbstreamwriter_iwrite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_iwrite DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbstreamwriter_iwrite
_TEXT	SEGMENT
wr$ = 32
str$ = 40
self$ = 64
unistr$ = 72
mbstreamwriter_iwrite PROC				; COMDAT

; 1596 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1597 :     PyObject *str, *wr;
; 1598 :     _Py_IDENTIFIER(write);
; 1599 : 
; 1600 :     str = encoder_encode_stateful(STATEFUL_ECTX(self), unistr, 0);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 48	 mov	 rdx, QWORD PTR unistr$[rsp]
  00016	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0001b	e8 00 00 00 00	 call	 encoder_encode_stateful
  00020	48 89 44 24 28	 mov	 QWORD PTR str$[rsp], rax

; 1601 :     if (str == NULL)

  00025	48 83 7c 24 28
	00		 cmp	 QWORD PTR str$[rsp], 0
  0002b	75 07		 jne	 SHORT $LN2@mbstreamwr@2

; 1602 :         return -1;

  0002d	b8 ff ff ff ff	 mov	 eax, -1
  00032	eb 64		 jmp	 SHORT $LN3@mbstreamwr@2
$LN2@mbstreamwr@2:

; 1603 : 
; 1604 :     wr = _PyObject_CallMethodId(self->stream, &PyId_write, "O", str);

  00034	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_write@?1??mbstreamwriter_iwrite@@9@9
  00039	8b c0		 mov	 eax, eax
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00041	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0004e	4c 8b 4c 24 28	 mov	 r9, QWORD PTR str$[rsp]
  00053	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0005a	48 8b d0	 mov	 rdx, rax
  0005d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00062	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00069	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0006e	48 89 44 24 20	 mov	 QWORD PTR wr$[rsp], rax

; 1605 :     Py_DECREF(str);

  00073	48 8b 4c 24 28	 mov	 rcx, QWORD PTR str$[rsp]
  00078	e8 00 00 00 00	 call	 _Py_DecRef

; 1606 :     if (wr == NULL)

  0007d	48 83 7c 24 20
	00		 cmp	 QWORD PTR wr$[rsp], 0
  00083	75 07		 jne	 SHORT $LN1@mbstreamwr@2

; 1607 :         return -1;

  00085	b8 ff ff ff ff	 mov	 eax, -1
  0008a	eb 0c		 jmp	 SHORT $LN3@mbstreamwr@2
$LN1@mbstreamwr@2:

; 1608 : 
; 1609 :     Py_DECREF(wr);

  0008c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR wr$[rsp]
  00091	e8 00 00 00 00	 call	 _Py_DecRef

; 1610 :     return 0;

  00096	33 c0		 xor	 eax, eax
$LN3@mbstreamwr@2:

; 1611 : }

  00098	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009c	c3		 ret	 0
mbstreamwriter_iwrite ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@MDFCPOLN@arg?5must?5be?5a?5sequence?5object?$AA@ ; `string'
EXTRN	PySequence_GetItem:PROC
EXTRN	PySequence_Size:PROC
EXTRN	PySequence_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamwriter_writelines DD imagerel mbstreamwriter_writelines
	DD	imagerel mbstreamwriter_writelines+205
	DD	imagerel $unwind$mbstreamwriter_writelines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_writelines DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BO@MDFCPOLN@arg?5must?5be?5a?5sequence?5object?$AA@
CONST	SEGMENT
??_C@_0BO@MDFCPOLN@arg?5must?5be?5a?5sequence?5object?$AA@ DB 'arg must b'
	DB	'e a sequence object', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbstreamwriter_writelines
_TEXT	SEGMENT
i$ = 32
strobj$ = 40
r$ = 48
tv70 = 56
self$ = 80
lines$ = 88
mbstreamwriter_writelines PROC				; COMDAT

; 1624 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1625 :     PyObject *strobj;
; 1626 :     int i, r;
; 1627 : 
; 1628 :     if (!PySequence_Check(lines)) {

  0000e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR lines$[rsp]
  00013	e8 00 00 00 00	 call	 PySequence_Check
  00018	85 c0		 test	 eax, eax
  0001a	75 1a		 jne	 SHORT $LN6@mbstreamwr@3

; 1629 :         PyErr_SetString(PyExc_TypeError,
; 1630 :                         "arg must be a sequence object");

  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@MDFCPOLN@arg?5must?5be?5a?5sequence?5object?$AA@
  00023	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0002a	e8 00 00 00 00	 call	 PyErr_SetString

; 1631 :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	e9 92 00 00 00	 jmp	 $LN7@mbstreamwr@3
$LN6@mbstreamwr@3:

; 1632 :     }
; 1633 : 
; 1634 :     for (i = 0; i < PySequence_Length(lines); i++) {

  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0003e	eb 0a		 jmp	 SHORT $LN5@mbstreamwr@3
$LN4@mbstreamwr@3:
  00040	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00044	ff c0		 inc	 eax
  00046	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN5@mbstreamwr@3:
  0004a	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0004f	48 89 44 24 38	 mov	 QWORD PTR tv70[rsp], rax
  00054	48 8b 4c 24 58	 mov	 rcx, QWORD PTR lines$[rsp]
  00059	e8 00 00 00 00	 call	 PySequence_Size
  0005e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv70[rsp]
  00063	48 3b c8	 cmp	 rcx, rax
  00066	7d 4d		 jge	 SHORT $LN3@mbstreamwr@3

; 1635 :         /* length can be changed even within this loop */
; 1636 :         strobj = PySequence_GetItem(lines, i);

  00068	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0006d	48 8b d0	 mov	 rdx, rax
  00070	48 8b 4c 24 58	 mov	 rcx, QWORD PTR lines$[rsp]
  00075	e8 00 00 00 00	 call	 PySequence_GetItem
  0007a	48 89 44 24 28	 mov	 QWORD PTR strobj$[rsp], rax

; 1637 :         if (strobj == NULL)

  0007f	48 83 7c 24 28
	00		 cmp	 QWORD PTR strobj$[rsp], 0
  00085	75 04		 jne	 SHORT $LN2@mbstreamwr@3

; 1638 :             return NULL;

  00087	33 c0		 xor	 eax, eax
  00089	eb 3d		 jmp	 SHORT $LN7@mbstreamwr@3
$LN2@mbstreamwr@3:

; 1639 : 
; 1640 :         r = mbstreamwriter_iwrite(self, strobj);

  0008b	48 8b 54 24 28	 mov	 rdx, QWORD PTR strobj$[rsp]
  00090	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00095	e8 00 00 00 00	 call	 mbstreamwriter_iwrite
  0009a	89 44 24 30	 mov	 DWORD PTR r$[rsp], eax

; 1641 :         Py_DECREF(strobj);

  0009e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR strobj$[rsp]
  000a3	e8 00 00 00 00	 call	 _Py_DecRef

; 1642 :         if (r == -1)

  000a8	83 7c 24 30 ff	 cmp	 DWORD PTR r$[rsp], -1
  000ad	75 04		 jne	 SHORT $LN1@mbstreamwr@3

; 1643 :             return NULL;

  000af	33 c0		 xor	 eax, eax
  000b1	eb 15		 jmp	 SHORT $LN7@mbstreamwr@3
$LN1@mbstreamwr@3:

; 1644 :     }

  000b3	eb 8b		 jmp	 SHORT $LN4@mbstreamwr@3
$LN3@mbstreamwr@3:

; 1645 : 
; 1646 :     Py_RETURN_NONE;

  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000bc	e8 00 00 00 00	 call	 _Py_IncRef
  000c1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN7@mbstreamwr@3:

; 1647 : }

  000c8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000cc	c3		 ret	 0
mbstreamwriter_writelines ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@NGMDBFOI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAw?$AAr?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyBytes_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamwriter_reset DD imagerel mbstreamwriter_reset
	DD	imagerel mbstreamwriter_reset+310
	DD	imagerel $unwind$mbstreamwriter_reset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_reset DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_1CI@NGMDBFOI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAw?$AAr?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@NGMDBFOI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAw?$AAr?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'p', 00H, 'w', 00H, 'r', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbstreamwriter_reset
_TEXT	SEGMENT
pwrt$ = 48
pending$ = 56
wr$22215 = 64
self$ = 96
mbstreamwriter_reset PROC				; COMDAT

; 1651 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1652 :     const Py_UNICODE *pending;
; 1653 :     PyObject *pwrt;
; 1654 : 
; 1655 :     pending = self->pending;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 c0 78	 add	 rax, 120		; 00000078H
  00012	48 89 44 24 38	 mov	 QWORD PTR pending$[rsp], rax

; 1656 :     pwrt = multibytecodec_encode(self->codec, &self->state,
; 1657 :                     &pending, self->pendingsize, self->errors,
; 1658 :                     MBENC_FLUSH | MBENC_RESET);

  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0001c	48 83 c0 68	 add	 rax, 104		; 00000068H
  00020	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR [rsp+40], 3
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0002d	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00031	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00036	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0003b	4c 8b 89 80 00
	00 00		 mov	 r9, QWORD PTR [rcx+128]
  00042	4c 8d 44 24 38	 lea	 r8, QWORD PTR pending$[rsp]
  00047	48 8b d0	 mov	 rdx, rax
  0004a	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0004f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00053	e8 00 00 00 00	 call	 multibytecodec_encode
  00058	48 89 44 24 30	 mov	 QWORD PTR pwrt$[rsp], rax

; 1659 :     /* some pending buffer can be truncated when UnicodeEncodeError is
; 1660 :      * raised on 'strict' mode. but, 'reset' method is designed to
; 1661 :      * reset the pending buffer or states so failed string sequence
; 1662 :      * ought to be missed */
; 1663 :     self->pendingsize = 0;

  0005d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00062	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1664 :     if (pwrt == NULL)

  0006d	48 83 7c 24 30
	00		 cmp	 QWORD PTR pwrt$[rsp], 0
  00073	75 07		 jne	 SHORT $LN3@mbstreamwr@4

; 1665 :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	e9 b5 00 00 00	 jmp	 $LN4@mbstreamwr@4
$LN3@mbstreamwr@4:

; 1666 : 
; 1667 :     assert(PyBytes_Check(pwrt));

  0007c	48 8b 44 24 30	 mov	 rax, QWORD PTR pwrt$[rsp]
  00081	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00085	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008b	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00090	85 c0		 test	 eax, eax
  00092	75 1c		 jne	 SHORT $LN6@mbstreamwr@4
  00094	41 b8 83 06 00
	00		 mov	 r8d, 1667		; 00000683H
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EM@HOCNGLED@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAc?$AAj?$AAk?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?2?$AAm?$AAu?$AAl?$AAt?$AAi?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo@
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@NGMDBFOI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAw?$AAr?$AAt?$AA?$CJ?$AA?$AA@
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ae	33 c0		 xor	 eax, eax
$LN6@mbstreamwr@4:

; 1668 :     if (PyBytes_Size(pwrt) > 0) {

  000b0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pwrt$[rsp]
  000b5	e8 00 00 00 00	 call	 PyBytes_Size
  000ba	48 85 c0	 test	 rax, rax
  000bd	7e 55		 jle	 SHORT $LN2@mbstreamwr@4

; 1669 :         PyObject *wr;
; 1670 :         _Py_IDENTIFIER(write);
; 1671 : 
; 1672 :         wr = _PyObject_CallMethodId(self->stream, &PyId_write, "O", pwrt);

  000bf	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_write@?2??mbstreamwriter_reset@@9@9
  000c4	8b c0		 mov	 eax, eax
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000cc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000d5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000d9	4c 8b 4c 24 30	 mov	 r9, QWORD PTR pwrt$[rsp]
  000de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  000e5	48 8b d0	 mov	 rdx, rax
  000e8	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000ed	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  000f4	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  000f9	48 89 44 24 40	 mov	 QWORD PTR wr$22215[rsp], rax

; 1673 :         if (wr == NULL) {

  000fe	48 83 7c 24 40
	00		 cmp	 QWORD PTR wr$22215[rsp], 0
  00104	75 0e		 jne	 SHORT $LN1@mbstreamwr@4

; 1674 :             Py_DECREF(pwrt);

  00106	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pwrt$[rsp]
  0010b	e8 00 00 00 00	 call	 _Py_DecRef

; 1675 :             return NULL;

  00110	33 c0		 xor	 eax, eax
  00112	eb 1d		 jmp	 SHORT $LN4@mbstreamwr@4
$LN1@mbstreamwr@4:
$LN2@mbstreamwr@4:

; 1676 :         }
; 1677 :     }
; 1678 :     Py_DECREF(pwrt);

  00114	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pwrt$[rsp]
  00119	e8 00 00 00 00	 call	 _Py_DecRef

; 1679 : 
; 1680 :     Py_RETURN_NONE;

  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00125	e8 00 00 00 00	 call	 _Py_IncRef
  0012a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@mbstreamwr@4:

; 1681 : }

  00131	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00135	c3		 ret	 0
mbstreamwriter_reset ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@DKNILIEM@O?$HMs?3StreamWriter?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamwriter_new DD imagerel mbstreamwriter_new
	DD	imagerel mbstreamwriter_new+447
	DD	imagerel $unwind$mbstreamwriter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_new DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0BB@DKNILIEM@O?$HMs?3StreamWriter?$AA@
CONST	SEGMENT
??_C@_0BB@DKNILIEM@O?$HMs?3StreamWriter?$AA@ DB 'O|s:StreamWriter', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbstreamwriter_new
_TEXT	SEGMENT
stream$ = 48
errors$ = 56
codec$ = 64
self$ = 72
tv147 = 80
type$ = 112
args$ = 120
kwds$ = 128
mbstreamwriter_new PROC					; COMDAT

; 1685 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1686 :     MultibyteStreamWriterObject *self;
; 1687 :     PyObject *stream, *codec = NULL;

  00013	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR codec$[rsp], 0

; 1688 :     char *errors = NULL;

  0001c	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 1689 : 
; 1690 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|s:StreamWriter",
; 1691 :                             streamkwarglist, &stream, &errors))

  00025	48 8d 44 24 38	 lea	 rax, QWORD PTR errors$[rsp]
  0002a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002f	48 8d 44 24 30	 lea	 rax, QWORD PTR stream$[rsp]
  00034	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00039	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:streamkwarglist
  00040	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@DKNILIEM@O?$HMs?3StreamWriter?$AA@
  00047	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0004f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00054	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00059	85 c0		 test	 eax, eax
  0005b	75 07		 jne	 SHORT $LN14@mbstreamwr@5

; 1692 :         return NULL;

  0005d	33 c0		 xor	 eax, eax
  0005f	e9 56 01 00 00	 jmp	 $LN15@mbstreamwr@5
$LN14@mbstreamwr@5:

; 1693 : 
; 1694 :     self = (MultibyteStreamWriterObject *)type->tp_alloc(type, 0);

  00064	33 d2		 xor	 edx, edx
  00066	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  0006b	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  00070	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00076	48 89 44 24 48	 mov	 QWORD PTR self$[rsp], rax

; 1695 :     if (self == NULL)

  0007b	48 83 7c 24 48
	00		 cmp	 QWORD PTR self$[rsp], 0
  00081	75 07		 jne	 SHORT $LN13@mbstreamwr@5

; 1696 :         return NULL;

  00083	33 c0		 xor	 eax, eax
  00085	e9 30 01 00 00	 jmp	 $LN15@mbstreamwr@5
$LN13@mbstreamwr@5:

; 1697 : 
; 1698 :     codec = PyObject_GetAttrString((PyObject *)type, "codec");

  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GPLHJCMP@codec?$AA@
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  00096	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0009b	48 89 44 24 40	 mov	 QWORD PTR codec$[rsp], rax

; 1699 :     if (codec == NULL)

  000a0	48 83 7c 24 40
	00		 cmp	 QWORD PTR codec$[rsp], 0
  000a6	75 05		 jne	 SHORT $LN12@mbstreamwr@5

; 1700 :         goto errorexit;

  000a8	e9 db 00 00 00	 jmp	 $errorexit$22248
$LN12@mbstreamwr@5:

; 1701 :     if (!MultibyteCodec_Check(codec)) {

  000ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteCodec_Type
  000b4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR codec$[rsp]
  000b9	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000bd	74 18		 je	 SHORT $LN11@mbstreamwr@5

; 1702 :         PyErr_SetString(PyExc_TypeError, "codec is unexpected type");

  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GBEONPKL@codec?5is?5unexpected?5type?$AA@
  000c6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000cd	e8 00 00 00 00	 call	 PyErr_SetString

; 1703 :         goto errorexit;

  000d2	e9 b1 00 00 00	 jmp	 $errorexit$22248
$LN11@mbstreamwr@5:

; 1704 :     }
; 1705 : 
; 1706 :     self->codec = ((MultibyteCodecObject *)codec)->codec;

  000d7	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  000dc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR codec$[rsp]
  000e1	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000e5	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1707 :     self->stream = stream;

  000e9	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  000ee	48 8b 4c 24 30	 mov	 rcx, QWORD PTR stream$[rsp]
  000f3	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 1708 :     Py_INCREF(stream);

  000fa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR stream$[rsp]
  000ff	e8 00 00 00 00	 call	 _Py_IncRef

; 1709 :     self->pendingsize = 0;

  00104	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  00109	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1710 :     self->errors = internal_error_callback(errors);

  00114	48 8b 4c 24 38	 mov	 rcx, QWORD PTR errors$[rsp]
  00119	e8 00 00 00 00	 call	 internal_error_callback
  0011e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR self$[rsp]
  00123	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 1711 :     if (self->errors == NULL)

  00127	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  0012c	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00131	75 02		 jne	 SHORT $LN10@mbstreamwr@5

; 1712 :         goto errorexit;

  00133	eb 53		 jmp	 SHORT $errorexit$22248
$LN10@mbstreamwr@5:

; 1713 :     if (self->codec->encinit != NULL &&
; 1714 :         self->codec->encinit(&self->state, self->codec->config) != 0)

  00135	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  0013a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0013e	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00143	74 32		 je	 SHORT $LN9@mbstreamwr@5
  00145	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  0014a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0014e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR self$[rsp]
  00153	48 83 c1 68	 add	 rcx, 104		; 00000068H
  00157	48 8b 54 24 48	 mov	 rdx, QWORD PTR self$[rsp]
  0015c	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00160	48 89 54 24 50	 mov	 QWORD PTR tv147[rsp], rdx
  00165	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00169	48 8b 44 24 50	 mov	 rax, QWORD PTR tv147[rsp]
  0016e	ff 50 20	 call	 QWORD PTR [rax+32]
  00171	85 c0		 test	 eax, eax
  00173	74 02		 je	 SHORT $LN9@mbstreamwr@5

; 1715 :         goto errorexit;

  00175	eb 11		 jmp	 SHORT $errorexit$22248
$LN9@mbstreamwr@5:

; 1716 : 
; 1717 :     Py_DECREF(codec);

  00177	48 8b 4c 24 40	 mov	 rcx, QWORD PTR codec$[rsp]
  0017c	e8 00 00 00 00	 call	 _Py_DecRef

; 1718 :     return (PyObject *)self;

  00181	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  00186	eb 32		 jmp	 SHORT $LN15@mbstreamwr@5
$errorexit$22248:
$LN8@mbstreamwr@5:

; 1719 : 
; 1720 : errorexit:
; 1721 :     Py_XDECREF(self);

  00188	48 83 7c 24 48
	00		 cmp	 QWORD PTR self$[rsp], 0
  0018e	74 0a		 je	 SHORT $LN5@mbstreamwr@5
  00190	48 8b 4c 24 48	 mov	 rcx, QWORD PTR self$[rsp]
  00195	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@mbstreamwr@5:
  0019a	33 c0		 xor	 eax, eax
  0019c	85 c0		 test	 eax, eax
  0019e	75 e8		 jne	 SHORT $LN8@mbstreamwr@5
$LN4@mbstreamwr@5:

; 1722 :     Py_XDECREF(codec);

  001a0	48 83 7c 24 40
	00		 cmp	 QWORD PTR codec$[rsp], 0
  001a6	74 0a		 je	 SHORT $LN1@mbstreamwr@5
  001a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR codec$[rsp]
  001ad	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@mbstreamwr@5:
  001b2	33 c0		 xor	 eax, eax
  001b4	85 c0		 test	 eax, eax
  001b6	75 e8		 jne	 SHORT $LN4@mbstreamwr@5

; 1723 :     return NULL;

  001b8	33 c0		 xor	 eax, eax
$LN15@mbstreamwr@5:

; 1724 : }

  001ba	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001be	c3		 ret	 0
mbstreamwriter_new ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT mbstreamwriter_init
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
mbstreamwriter_init PROC				; COMDAT

; 1728 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1729 :     return 0;

  0000f	33 c0		 xor	 eax, eax

; 1730 : }

  00011	c3		 ret	 0
mbstreamwriter_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@GCHLLHMO@mbstreamwriter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamwriter_traverse DD imagerel mbstreamwriter_traverse
	DD	imagerel mbstreamwriter_traverse+236
	DD	imagerel $unwind$mbstreamwriter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BI@GCHLLHMO@mbstreamwriter_traverse?$AA@
CONST	SEGMENT
??_C@_0BI@GCHLLHMO@mbstreamwriter_traverse?$AA@ DB 'mbstreamwriter_traver'
	DB	'se', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbstreamwriter_traverse
_TEXT	SEGMENT
vret$22295 = 32
vret$22303 = 36
self$ = 64
visit$ = 72
arg$ = 80
mbstreamwriter_traverse PROC				; COMDAT

; 1735 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1736 :     if (ERROR_ISCUSTOM(self->errors))

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 83 78 70 01	 cmp	 QWORD PTR [rax+112], 1
  0001d	72 0c		 jb	 SHORT $LN13@mbstreamwr@6
  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 83 78 70 03	 cmp	 QWORD PTR [rax+112], 3
  00029	76 5a		 jbe	 SHORT $LN14@mbstreamwr@6
$LN13@mbstreamwr@6:
$LN12@mbstreamwr@6:

; 1737 :         Py_VISIT(self->errors);

  0002b	e8 00 00 00 00	 call	 _Py_PXCTX
  00030	85 c0		 test	 eax, eax
  00032	74 1c		 je	 SHORT $LN9@mbstreamwr@6
  00034	45 33 c9	 xor	 r9d, r9d
  00037	41 b8 c9 06 00
	00		 mov	 r8d, 1737		; 000006c9H
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@GCHLLHMO@mbstreamwriter_traverse?$AA@
  0004b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@mbstreamwr@6:
  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00055	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0005a	74 23		 je	 SHORT $LN8@mbstreamwr@6
  0005c	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00066	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0006a	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  0006e	89 44 24 20	 mov	 DWORD PTR vret$22295[rsp], eax
  00072	83 7c 24 20 00	 cmp	 DWORD PTR vret$22295[rsp], 0
  00077	74 06		 je	 SHORT $LN7@mbstreamwr@6
  00079	8b 44 24 20	 mov	 eax, DWORD PTR vret$22295[rsp]
  0007d	eb 68		 jmp	 SHORT $LN15@mbstreamwr@6
$LN7@mbstreamwr@6:
$LN8@mbstreamwr@6:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a6		 jne	 SHORT $LN12@mbstreamwr@6
$LN14@mbstreamwr@6:
$LN6@mbstreamwr@6:

; 1738 :     Py_VISIT(self->stream);

  00085	e8 00 00 00 00	 call	 _Py_PXCTX
  0008a	85 c0		 test	 eax, eax
  0008c	74 1c		 je	 SHORT $LN3@mbstreamwr@6
  0008e	45 33 c9	 xor	 r9d, r9d
  00091	41 b8 ca 06 00
	00		 mov	 r8d, 1738		; 000006caH
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IEEBIMPD@?4?4?2Modules?2cjkcodecs?2multibyteco@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@GCHLLHMO@mbstreamwriter_traverse?$AA@
  000a5	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@mbstreamwr@6:
  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000af	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  000b7	74 26		 je	 SHORT $LN2@mbstreamwr@6
  000b9	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000be	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000c3	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  000ca	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000ce	89 44 24 24	 mov	 DWORD PTR vret$22303[rsp], eax
  000d2	83 7c 24 24 00	 cmp	 DWORD PTR vret$22303[rsp], 0
  000d7	74 06		 je	 SHORT $LN1@mbstreamwr@6
  000d9	8b 44 24 24	 mov	 eax, DWORD PTR vret$22303[rsp]
  000dd	eb 08		 jmp	 SHORT $LN15@mbstreamwr@6
$LN1@mbstreamwr@6:
$LN2@mbstreamwr@6:
  000df	33 c0		 xor	 eax, eax
  000e1	85 c0		 test	 eax, eax
  000e3	75 a0		 jne	 SHORT $LN6@mbstreamwr@6

; 1739 :     return 0;

  000e5	33 c0		 xor	 eax, eax
$LN15@mbstreamwr@6:

; 1740 : }

  000e7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000eb	c3		 ret	 0
mbstreamwriter_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbstreamwriter_dealloc DD imagerel mbstreamwriter_dealloc
	DD	imagerel mbstreamwriter_dealloc+138
	DD	imagerel $unwind$mbstreamwriter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbstreamwriter_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mbstreamwriter_dealloc
_TEXT	SEGMENT
self$ = 48
mbstreamwriter_dealloc PROC				; COMDAT

; 1744 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1745 :     PyObject_GC_UnTrack(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN9@mbstreamwr@7:

; 1746 :     ERROR_DECREF(self->errors);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0001d	74 26		 je	 SHORT $LN6@mbstreamwr@7
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 83 78 70 01	 cmp	 QWORD PTR [rax+112], 1
  00029	72 0c		 jb	 SHORT $LN5@mbstreamwr@7
  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00030	48 83 78 70 03	 cmp	 QWORD PTR [rax+112], 3
  00035	76 0e		 jbe	 SHORT $LN6@mbstreamwr@7
$LN5@mbstreamwr@7:
  00037	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003c	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00040	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@mbstreamwr@7:
  00045	33 c0		 xor	 eax, eax
  00047	85 c0		 test	 eax, eax
  00049	75 c8		 jne	 SHORT $LN9@mbstreamwr@7
$LN4@mbstreamwr@7:

; 1747 :     Py_XDECREF(self->stream);

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00050	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00058	74 11		 je	 SHORT $LN1@mbstreamwr@7
  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00066	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@mbstreamwr@7:
  0006b	33 c0		 xor	 eax, eax
  0006d	85 c0		 test	 eax, eax
  0006f	75 da		 jne	 SHORT $LN4@mbstreamwr@7

; 1748 :     Py_TYPE(self)->tp_free(self);

  00071	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00076	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0007f	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 1749 : }

  00085	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00089	c3		 ret	 0
mbstreamwriter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@FPFOACMO@argument?5type?5invalid?$AA@	; `string'
PUBLIC	??_C@_0BH@MFGEOELK@multibytecodec?4__map_?$CK?$AA@ ; `string'
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	PyCapsule_GetPointer:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyCapsule_IsValid:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$__create_codec DD imagerel __create_codec
	DD	imagerel __create_codec+211
	DD	imagerel $unwind$__create_codec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__create_codec DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BG@FPFOACMO@argument?5type?5invalid?$AA@
CONST	SEGMENT
??_C@_0BG@FPFOACMO@argument?5type?5invalid?$AA@ DB 'argument type invalid'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MFGEOELK@multibytecodec?4__map_?$CK?$AA@
CONST	SEGMENT
??_C@_0BH@MFGEOELK@multibytecodec?4__map_?$CK?$AA@ DB 'multibytecodec.__m'
	DB	'ap_*', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT __create_codec
_TEXT	SEGMENT
codec$ = 32
self$ = 40
tv86 = 48
ignore$ = 80
arg$ = 88
__create_codec PROC					; COMDAT

; 1818 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1819 :     MultibyteCodecObject *self;
; 1820 :     MultibyteCodec *codec;
; 1821 : 
; 1822 :     if (!PyCapsule_IsValid(arg, PyMultibyteCodec_CAPSULE_NAME)) {

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MFGEOELK@multibytecodec?4__map_?$CK?$AA@
  00015	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arg$[rsp]
  0001a	e8 00 00 00 00	 call	 PyCapsule_IsValid
  0001f	85 c0		 test	 eax, eax
  00021	75 1a		 jne	 SHORT $LN3@create_cod

; 1823 :         PyErr_SetString(PyExc_ValueError, "argument type invalid");

  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@FPFOACMO@argument?5type?5invalid?$AA@
  0002a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00031	e8 00 00 00 00	 call	 PyErr_SetString

; 1824 :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 91 00 00 00	 jmp	 $LN4@create_cod
$LN3@create_cod:

; 1825 :     }
; 1826 : 
; 1827 :     codec = PyCapsule_GetPointer(arg, PyMultibyteCodec_CAPSULE_NAME);

  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MFGEOELK@multibytecodec?4__map_?$CK?$AA@
  00044	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arg$[rsp]
  00049	e8 00 00 00 00	 call	 PyCapsule_GetPointer
  0004e	48 89 44 24 20	 mov	 QWORD PTR codec$[rsp], rax

; 1828 :     if (codec->codecinit != NULL && codec->codecinit(codec->config) != 0)

  00053	48 8b 44 24 20	 mov	 rax, QWORD PTR codec$[rsp]
  00058	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0005d	74 19		 je	 SHORT $LN2@create_cod
  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR codec$[rsp]
  00064	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR codec$[rsp]
  0006d	ff 50 10	 call	 QWORD PTR [rax+16]
  00070	85 c0		 test	 eax, eax
  00072	74 04		 je	 SHORT $LN2@create_cod

; 1829 :         return NULL;

  00074	33 c0		 xor	 eax, eax
  00076	eb 56		 jmp	 SHORT $LN4@create_cod
$LN2@create_cod:

; 1830 : 
; 1831 :     self = PyObject_New(MultibyteCodecObject, &MultibyteCodec_Type);

  00078	e8 00 00 00 00	 call	 _Py_PXCTX
  0007d	85 c0		 test	 eax, eax
  0007f	74 13		 je	 SHORT $LN6@create_cod
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:MultibyteCodec_Type
  00088	e8 00 00 00 00	 call	 _PxObject_New
  0008d	48 89 44 24 30	 mov	 QWORD PTR tv86[rsp], rax
  00092	eb 11		 jmp	 SHORT $LN7@create_cod
$LN6@create_cod:
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:MultibyteCodec_Type
  0009b	e8 00 00 00 00	 call	 _PyObject_New
  000a0	48 89 44 24 30	 mov	 QWORD PTR tv86[rsp], rax
$LN7@create_cod:
  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR tv86[rsp]
  000aa	48 89 44 24 28	 mov	 QWORD PTR self$[rsp], rax

; 1832 :     if (self == NULL)

  000af	48 83 7c 24 28
	00		 cmp	 QWORD PTR self$[rsp], 0
  000b5	75 04		 jne	 SHORT $LN1@create_cod

; 1833 :         return NULL;

  000b7	33 c0		 xor	 eax, eax
  000b9	eb 13		 jmp	 SHORT $LN4@create_cod
$LN1@create_cod:

; 1834 :     self->codec = codec;

  000bb	48 8b 44 24 28	 mov	 rax, QWORD PTR self$[rsp]
  000c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR codec$[rsp]
  000c5	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1835 : 
; 1836 :     return (PyObject *)self;

  000c9	48 8b 44 24 28	 mov	 rax, QWORD PTR self$[rsp]
$LN4@create_cod:

; 1837 : }

  000ce	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d2	c3		 ret	 0
__create_codec ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@MIMLPEL@can?8t?5initialize?5the?5_multibytec@ ; `string'
PUBLIC	PyInit__multibytecodec
EXTRN	Py_FatalError:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__multibytecodec DD imagerel $LN10
	DD	imagerel $LN10+279
	DD	imagerel $unwind$PyInit__multibytecodec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__multibytecodec DD 010401H
	DD	0c204H
xdata	ENDS
;	COMDAT ??_C@_0CM@MIMLPEL@can?8t?5initialize?5the?5_multibytec@
CONST	SEGMENT
??_C@_0CM@MIMLPEL@can?8t?5initialize?5the?5_multibytec@ DB 'can''t initia'
	DB	'lize the _multibytecodec module', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit__multibytecodec
_TEXT	SEGMENT
i$ = 32
typelist$ = 40
m$ = 80
PyInit__multibytecodec PROC				; COMDAT

; 1859 : {

$LN10:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1860 :     int i;
; 1861 :     PyObject *m;
; 1862 :     PyTypeObject *typelist[] = {
; 1863 :         &MultibyteIncrementalEncoder_Type,

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteIncrementalEncoder_Type
  0000b	48 89 44 24 28	 mov	 QWORD PTR typelist$[rsp], rax

; 1864 :         &MultibyteIncrementalDecoder_Type,

  00010	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteIncrementalDecoder_Type
  00017	48 89 44 24 30	 mov	 QWORD PTR typelist$[rsp+8], rax

; 1865 :         &MultibyteStreamReader_Type,

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteStreamReader_Type
  00023	48 89 44 24 38	 mov	 QWORD PTR typelist$[rsp+16], rax

; 1866 :         &MultibyteStreamWriter_Type,

  00028	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MultibyteStreamWriter_Type
  0002f	48 89 44 24 40	 mov	 QWORD PTR typelist$[rsp+24], rax

; 1867 :         NULL
; 1868 :     };

  00034	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR typelist$[rsp+32], 0

; 1869 : 
; 1870 :     if (PyType_Ready(&MultibyteCodec_Type) < 0)

  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:MultibyteCodec_Type
  00044	e8 00 00 00 00	 call	 PyType_Ready
  00049	85 c0		 test	 eax, eax
  0004b	7d 07		 jge	 SHORT $LN7@PyInit__mu

; 1871 :         return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	e9 be 00 00 00	 jmp	 $LN8@PyInit__mu
$LN7@PyInit__mu:

; 1872 : 
; 1873 :     m = PyModule_Create(&_multibytecodecmodule);

  00054	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_multibytecodecmodule
  00060	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00065	48 89 44 24 50	 mov	 QWORD PTR m$[rsp], rax

; 1874 :     if (m == NULL)

  0006a	48 83 7c 24 50
	00		 cmp	 QWORD PTR m$[rsp], 0
  00070	75 07		 jne	 SHORT $LN6@PyInit__mu

; 1875 :         return NULL;

  00072	33 c0		 xor	 eax, eax
  00074	e9 99 00 00 00	 jmp	 $LN8@PyInit__mu
$LN6@PyInit__mu:

; 1876 : 
; 1877 :     for (i = 0; typelist[i] != NULL; i++) {

  00079	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00081	eb 0a		 jmp	 SHORT $LN5@PyInit__mu
$LN4@PyInit__mu:
  00083	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00087	ff c0		 inc	 eax
  00089	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN5@PyInit__mu:
  0008d	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00092	48 83 7c c4 28
	00		 cmp	 QWORD PTR typelist$[rsp+rax*8], 0
  00098	74 4a		 je	 SHORT $LN3@PyInit__mu

; 1878 :         if (PyType_Ready(typelist[i]) < 0)

  0009a	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0009f	48 8b 4c c4 28	 mov	 rcx, QWORD PTR typelist$[rsp+rax*8]
  000a4	e8 00 00 00 00	 call	 PyType_Ready
  000a9	85 c0		 test	 eax, eax
  000ab	7d 04		 jge	 SHORT $LN2@PyInit__mu

; 1879 :             return NULL;

  000ad	33 c0		 xor	 eax, eax
  000af	eb 61		 jmp	 SHORT $LN8@PyInit__mu
$LN2@PyInit__mu:

; 1880 :         Py_INCREF(typelist[i]);

  000b1	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000b6	48 8b 4c c4 28	 mov	 rcx, QWORD PTR typelist$[rsp+rax*8]
  000bb	e8 00 00 00 00	 call	 _Py_IncRef

; 1881 :         PyModule_AddObject(m, typelist[i]->tp_name,
; 1882 :                            (PyObject *)typelist[i]);

  000c0	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000c5	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  000ca	48 8b 4c cc 28	 mov	 rcx, QWORD PTR typelist$[rsp+rcx*8]
  000cf	4c 8b 44 c4 28	 mov	 r8, QWORD PTR typelist$[rsp+rax*8]
  000d4	48 8b 51 70	 mov	 rdx, QWORD PTR [rcx+112]
  000d8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  000dd	e8 00 00 00 00	 call	 PyModule_AddObject

; 1883 :     }

  000e2	eb 9f		 jmp	 SHORT $LN4@PyInit__mu
$LN3@PyInit__mu:

; 1884 : 
; 1885 :     if (PyErr_Occurred()) {

  000e4	e8 00 00 00 00	 call	 PyErr_Occurred
  000e9	48 85 c0	 test	 rax, rax
  000ec	74 1f		 je	 SHORT $LN1@PyInit__mu

; 1886 :         Py_FatalError("can't initialize the _multibytecodec module");

  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@MIMLPEL@can?8t?5initialize?5the?5_multibytec@
  000f5	e8 00 00 00 00	 call	 Py_FatalError

; 1887 :         Py_DECREF(m);

  000fa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  000ff	e8 00 00 00 00	 call	 _Py_DecRef

; 1888 :         m = NULL;

  00104	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR m$[rsp], 0
$LN1@PyInit__mu:

; 1889 :     }
; 1890 :     return m;

  0010d	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
$LN8@PyInit__mu:

; 1891 : }

  00112	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00116	c3		 ret	 0
PyInit__multibytecodec ENDP
_TEXT	ENDS
END
