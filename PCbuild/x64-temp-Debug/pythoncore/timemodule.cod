; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@IHBBIOOL@get_clock_info?$AA@		; `string'
PUBLIC	??_C@_0N@MEONCEDN@perf_counter?$AA@		; `string'
PUBLIC	??_C@_0N@HNHIBMAE@process_time?$AA@		; `string'
PUBLIC	??_C@_09FKNHDPAJ@monotonic?$AA@			; `string'
PUBLIC	??_C@_08JKOOHOPP@strptime?$AA@			; `string'
PUBLIC	??_C@_08EPGBJPHJ@strftime?$AA@			; `string'
PUBLIC	??_C@_06PIDIMLCK@mktime?$AA@			; `string'
PUBLIC	??_C@_05NCKEBKLP@ctime?$AA@			; `string'
PUBLIC	??_C@_07MHIFAOOG@asctime?$AA@			; `string'
PUBLIC	??_C@_09EKBOCLDN@localtime?$AA@			; `string'
PUBLIC	??_C@_06IKBBHHHJ@gmtime?$AA@			; `string'
PUBLIC	??_C@_05PCJCMMHD@sleep?$AA@			; `string'
PUBLIC	??_C@_05DDECJJKE@clock?$AA@			; `string'
PUBLIC	??_C@_04CLCEDBPF@time?$AA@			; `string'
PUBLIC	??_C@_0P@FKAOFBKD@_strptime_time?$AA@		; `string'
PUBLIC	??_C@_0BKB@DDEPIBMP@The?5time?5value?5as?5returned?5by?5gm@ ; `string'
PUBLIC	??_C@_0BB@MGIFIEFG@time?4struct_time?$AA@	; `string'
PUBLIC	??_C@_0DL@PJPOCPKM@1?5if?5summer?5time?5is?5in?5effect?0?50@ ; `string'
PUBLIC	??_C@_08BCODJLJO@tm_isdst?$AA@			; `string'
PUBLIC	??_C@_0BM@HBKLLDAH@day?5of?5year?0?5range?5?$FL1?0?5366?$FN?$AA@ ; `string'
PUBLIC	??_C@_07FCBAKJLJ@tm_yday?$AA@			; `string'
PUBLIC	??_C@_0CH@OJOJLICN@day?5of?5week?0?5range?5?$FL0?0?56?$FN?0?5Monda@ ; `string'
PUBLIC	??_C@_07ONCABHNI@tm_wday?$AA@			; `string'
PUBLIC	??_C@_0BI@BFAAEDLC@seconds?0?5range?5?$FL0?0?561?$FN?$CJ?$AA@ ; `string'
PUBLIC	??_C@_06NNLKOPK@tm_sec?$AA@			; `string'
PUBLIC	??_C@_0BH@BDJOIMKA@minutes?0?5range?5?$FL0?0?559?$FN?$AA@ ; `string'
PUBLIC	??_C@_06BKJAJHP@tm_min?$AA@			; `string'
PUBLIC	??_C@_0BF@JJPIOGPE@hours?0?5range?5?$FL0?0?523?$FN?$AA@ ; `string'
PUBLIC	??_C@_07CAEKECON@tm_hour?$AA@			; `string'
PUBLIC	??_C@_0BM@EKABLPKI@day?5of?5month?0?5range?5?$FL1?0?531?$FN?$AA@ ; `string'
PUBLIC	??_C@_07MHHAJIPL@tm_mday?$AA@			; `string'
PUBLIC	??_C@_0BN@NIJEHJGK@month?5of?5year?0?5range?5?$FL1?0?512?$FN?$AA@ ; `string'
PUBLIC	??_C@_06FCEHFMN@tm_mon?$AA@			; `string'
PUBLIC	??_C@_0BI@BLDDGDNH@year?0?5for?5example?0?51993?$AA@ ; `string'
PUBLIC	??_C@_07JFIBHBH@tm_year?$AA@			; `string'
_BSS	SEGMENT
?cpu_frequency@?1??win_perf_counter@@9@9 DQ 01H DUP (?)	; `win_perf_counter'::`2'::cpu_frequency
?GetTickCount64@?1??pymonotonic@@9@9 DQ 01H DUP (?)	; `pymonotonic'::`2'::GetTickCount64
?last_ticks@?5??pymonotonic@@9@9 DD 01H DUP (?)		; `pymonotonic'::`6'::last_ticks
?n_overflow@?5??pymonotonic@@9@9 DD 01H DUP (?)		; `pymonotonic'::`6'::n_overflow
_BSS	ENDS
;	COMDAT ??_C@_0P@IHBBIOOL@get_clock_info?$AA@
CONST	SEGMENT
??_C@_0P@IHBBIOOL@get_clock_info?$AA@ DB 'get_clock_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MEONCEDN@perf_counter?$AA@
CONST	SEGMENT
??_C@_0N@MEONCEDN@perf_counter?$AA@ DB 'perf_counter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HNHIBMAE@process_time?$AA@
CONST	SEGMENT
??_C@_0N@HNHIBMAE@process_time?$AA@ DB 'process_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FKNHDPAJ@monotonic?$AA@
CONST	SEGMENT
??_C@_09FKNHDPAJ@monotonic?$AA@ DB 'monotonic', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKOOHOPP@strptime?$AA@
CONST	SEGMENT
??_C@_08JKOOHOPP@strptime?$AA@ DB 'strptime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EPGBJPHJ@strftime?$AA@
CONST	SEGMENT
??_C@_08EPGBJPHJ@strftime?$AA@ DB 'strftime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PIDIMLCK@mktime?$AA@
CONST	SEGMENT
??_C@_06PIDIMLCK@mktime?$AA@ DB 'mktime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCKEBKLP@ctime?$AA@
CONST	SEGMENT
??_C@_05NCKEBKLP@ctime?$AA@ DB 'ctime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MHIFAOOG@asctime?$AA@
CONST	SEGMENT
??_C@_07MHIFAOOG@asctime?$AA@ DB 'asctime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKBOCLDN@localtime?$AA@
CONST	SEGMENT
??_C@_09EKBOCLDN@localtime?$AA@ DB 'localtime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKBBHHHJ@gmtime?$AA@
CONST	SEGMENT
??_C@_06IKBBHHHJ@gmtime?$AA@ DB 'gmtime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PCJCMMHD@sleep?$AA@
CONST	SEGMENT
??_C@_05PCJCMMHD@sleep?$AA@ DB 'sleep', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DDECJJKE@clock?$AA@
CONST	SEGMENT
??_C@_05DDECJJKE@clock?$AA@ DB 'clock', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLCEDBPF@time?$AA@
CONST	SEGMENT
??_C@_04CLCEDBPF@time?$AA@ DB 'time', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId__strptime_time@?1??time_strptime@@9@9 DQ 0000000000000000H ; `time_strptime'::`2'::PyId__strptime_time
	DQ	FLAT:??_C@_0P@FKAOFBKD@_strptime_time?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0P@FKAOFBKD@_strptime_time?$AA@
CONST	SEGMENT
??_C@_0P@FKAOFBKD@_strptime_time?$AA@ DB '_strptime_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BKB@DDEPIBMP@The?5time?5value?5as?5returned?5by?5gm@
CONST	SEGMENT
??_C@_0BKB@DDEPIBMP@The?5time?5value?5as?5returned?5by?5gm@ DB 'The time '
	DB	'value as returned by gmtime(), localtime(), and strptime(), a'
	DB	'nd', 0aH, ' accepted by asctime(), mktime() and strftime().  '
	DB	'May be considered as a', 0aH, ' sequence of 9 integers.', 0aH
	DB	0aH, ' Note that several fields'' values are not the same as t'
	DB	'hose defined by', 0aH, ' the C language standard for struct t'
	DB	'm.  For example, the value of the', 0aH, ' field tm_year is t'
	DB	'he actual year, not year - 1900.  See individual', 0aH, ' fie'
	DB	'lds'' descriptions for details.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MGIFIEFG@time?4struct_time?$AA@
CONST	SEGMENT
??_C@_0BB@MGIFIEFG@time?4struct_time?$AA@ DB 'time.struct_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@PJPOCPKM@1?5if?5summer?5time?5is?5in?5effect?0?50@
CONST	SEGMENT
??_C@_0DL@PJPOCPKM@1?5if?5summer?5time?5is?5in?5effect?0?50@ DB '1 if sum'
	DB	'mer time is in effect, 0 if not, and -1 if unknown', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BCODJLJO@tm_isdst?$AA@
CONST	SEGMENT
??_C@_08BCODJLJO@tm_isdst?$AA@ DB 'tm_isdst', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HBKLLDAH@day?5of?5year?0?5range?5?$FL1?0?5366?$FN?$AA@
CONST	SEGMENT
??_C@_0BM@HBKLLDAH@day?5of?5year?0?5range?5?$FL1?0?5366?$FN?$AA@ DB 'day '
	DB	'of year, range [1, 366]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FCBAKJLJ@tm_yday?$AA@
CONST	SEGMENT
??_C@_07FCBAKJLJ@tm_yday?$AA@ DB 'tm_yday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OJOJLICN@day?5of?5week?0?5range?5?$FL0?0?56?$FN?0?5Monda@
CONST	SEGMENT
??_C@_0CH@OJOJLICN@day?5of?5week?0?5range?5?$FL0?0?56?$FN?0?5Monda@ DB 'd'
	DB	'ay of week, range [0, 6], Monday is 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ONCABHNI@tm_wday?$AA@
CONST	SEGMENT
??_C@_07ONCABHNI@tm_wday?$AA@ DB 'tm_wday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BFAAEDLC@seconds?0?5range?5?$FL0?0?561?$FN?$CJ?$AA@
CONST	SEGMENT
??_C@_0BI@BFAAEDLC@seconds?0?5range?5?$FL0?0?561?$FN?$CJ?$AA@ DB 'seconds'
	DB	', range [0, 61])', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NNLKOPK@tm_sec?$AA@
CONST	SEGMENT
??_C@_06NNLKOPK@tm_sec?$AA@ DB 'tm_sec', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BDJOIMKA@minutes?0?5range?5?$FL0?0?559?$FN?$AA@
CONST	SEGMENT
??_C@_0BH@BDJOIMKA@minutes?0?5range?5?$FL0?0?559?$FN?$AA@ DB 'minutes, ra'
	DB	'nge [0, 59]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06BKJAJHP@tm_min?$AA@
CONST	SEGMENT
??_C@_06BKJAJHP@tm_min?$AA@ DB 'tm_min', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JJPIOGPE@hours?0?5range?5?$FL0?0?523?$FN?$AA@
CONST	SEGMENT
??_C@_0BF@JJPIOGPE@hours?0?5range?5?$FL0?0?523?$FN?$AA@ DB 'hours, range '
	DB	'[0, 23]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07CAEKECON@tm_hour?$AA@
CONST	SEGMENT
??_C@_07CAEKECON@tm_hour?$AA@ DB 'tm_hour', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EKABLPKI@day?5of?5month?0?5range?5?$FL1?0?531?$FN?$AA@
CONST	SEGMENT
??_C@_0BM@EKABLPKI@day?5of?5month?0?5range?5?$FL1?0?531?$FN?$AA@ DB 'day '
	DB	'of month, range [1, 31]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MHHAJIPL@tm_mday?$AA@
CONST	SEGMENT
??_C@_07MHHAJIPL@tm_mday?$AA@ DB 'tm_mday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NIJEHJGK@month?5of?5year?0?5range?5?$FL1?0?512?$FN?$AA@
CONST	SEGMENT
??_C@_0BN@NIJEHJGK@month?5of?5year?0?5range?5?$FL1?0?512?$FN?$AA@ DB 'mon'
	DB	'th of year, range [1, 12]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FCEHFMN@tm_mon?$AA@
CONST	SEGMENT
??_C@_06FCEHFMN@tm_mon?$AA@ DB 'tm_mon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BLDDGDNH@year?0?5for?5example?0?51993?$AA@
CONST	SEGMENT
??_C@_0BI@BLDDGDNH@year?0?5for?5example?0?51993?$AA@ DB 'year, for exampl'
	DB	'e, 1993', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07JFIBHBH@tm_year?$AA@
CONST	SEGMENT
??_C@_07JFIBHBH@tm_year?$AA@ DB 'tm_year', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
time_doc DB	'time() -> floating point number', 0aH, 0aH, 'Return the '
	DB	'current time in seconds since the Epoch.', 0aH, 'Fractions of'
	DB	' a second may be present if the system clock provides them.', 00H
	ORG $+3
clock_doc DB	'clock() -> floating point number', 0aH, 0aH, 'Return the'
	DB	' CPU time or real time since the start of the process or sinc'
	DB	'e', 0aH, 'the first call to clock().  This has as much precis'
	DB	'ion as the system', 0aH, 'records.', 00H
	ORG $+7
sleep_doc DB	'sleep(seconds)', 0aH, 0aH, 'Delay execution for a given '
	DB	'number of seconds.  The argument may be', 0aH, 'a floating po'
	DB	'int number for subsecond precision.', 00H
	ORG $+3
struct_time_type_desc DQ FLAT:??_C@_0BB@MGIFIEFG@time?4struct_time?$AA@
	DQ	FLAT:??_C@_0BKB@DDEPIBMP@The?5time?5value?5as?5returned?5by?5gm@
	DQ	FLAT:struct_time_type_fields
	DD	09H
	ORG $+4
?has_getickcount64@?1??pymonotonic@@9@9 DD 0ffffffffH	; `pymonotonic'::`2'::has_getickcount64
	ORG $+4
struct_time_type_fields DQ FLAT:??_C@_07JFIBHBH@tm_year?$AA@
	DQ	FLAT:??_C@_0BI@BLDDGDNH@year?0?5for?5example?0?51993?$AA@
	DQ	FLAT:??_C@_06FCEHFMN@tm_mon?$AA@
	DQ	FLAT:??_C@_0BN@NIJEHJGK@month?5of?5year?0?5range?5?$FL1?0?512?$FN?$AA@
	DQ	FLAT:??_C@_07MHHAJIPL@tm_mday?$AA@
	DQ	FLAT:??_C@_0BM@EKABLPKI@day?5of?5month?0?5range?5?$FL1?0?531?$FN?$AA@
	DQ	FLAT:??_C@_07CAEKECON@tm_hour?$AA@
	DQ	FLAT:??_C@_0BF@JJPIOGPE@hours?0?5range?5?$FL0?0?523?$FN?$AA@
	DQ	FLAT:??_C@_06BKJAJHP@tm_min?$AA@
	DQ	FLAT:??_C@_0BH@BDJOIMKA@minutes?0?5range?5?$FL0?0?559?$FN?$AA@
	DQ	FLAT:??_C@_06NNLKOPK@tm_sec?$AA@
	DQ	FLAT:??_C@_0BI@BFAAEDLC@seconds?0?5range?5?$FL0?0?561?$FN?$CJ?$AA@
	DQ	FLAT:??_C@_07ONCABHNI@tm_wday?$AA@
	DQ	FLAT:??_C@_0CH@OJOJLICN@day?5of?5week?0?5range?5?$FL0?0?56?$FN?0?5Monda@
	DQ	FLAT:??_C@_07FCBAKJLJ@tm_yday?$AA@
	DQ	FLAT:??_C@_0BM@HBKLLDAH@day?5of?5year?0?5range?5?$FL1?0?5366?$FN?$AA@
	DQ	FLAT:??_C@_08BCODJLJO@tm_isdst?$AA@
	DQ	FLAT:??_C@_0DL@PJPOCPKM@1?5if?5summer?5time?5is?5in?5effect?0?50@
	DQ	0000000000000000H
	ORG $+8
gmtime_doc DB	'gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour,'
	DB	' tm_min,', 0aH, '                       tm_sec, tm_wday, tm_y'
	DB	'day, tm_isdst)', 0aH, 0aH, 'Convert seconds since the Epoch t'
	DB	'o a time tuple expressing UTC (a.k.a.', 0aH, 'GMT).  When ''s'
	DB	'econds'' is not passed in, convert the current time instead.', 0aH
	DB	0aH, 'If the platform supports the tm_gmtoff and tm_zone, they'
	DB	' are available as', 0aH, 'attributes only.', 00H
	ORG $+6
localtime_doc DB 'localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour'
	DB	',tm_min,', 0aH, '                          tm_sec,tm_wday,tm_'
	DB	'yday,tm_isdst)', 0aH, 0aH, 'Convert seconds since the Epoch t'
	DB	'o a time tuple expressing local time.', 0aH, 'When ''seconds'''
	DB	' is not passed in, convert the current time instead.', 00H
	ORG $+2
?mon_name@?1??_asctime@@9@9 DB 'Jan', 00H		; `_asctime'::`2'::mon_name
	DB	'Feb', 00H
	DB	'Mar', 00H
	DB	'Apr', 00H
	DB	'May', 00H
	DB	'Jun', 00H
	DB	'Jul', 00H
	DB	'Aug', 00H
	DB	'Sep', 00H
	DB	'Oct', 00H
	DB	'Nov', 00H
	DB	'Dec', 00H
?use_perf_counter@?1??perf_counter@@9@9 DD 01H		; `perf_counter'::`2'::use_perf_counter
	ORG $+4
strftime_doc DB	'strftime(format[, tuple]) -> string', 0aH, 0aH, 'Convert'
	DB	' a time tuple to a string according to a format specification'
	DB	'.', 0aH, 'See the library reference manual for formatting cod'
	DB	'es. When the time tuple', 0aH, 'is not present, current time '
	DB	'as returned by localtime() is used.', 00H
	ORG $+1
?use_monotonic@?1??perf_counter@@9@9 DD 01H		; `perf_counter'::`2'::use_monotonic
	ORG $+4
strptime_doc DB	'strptime(string, format) -> struct_time', 0aH, 0aH, 'Par'
	DB	'se a string to a time tuple according to a format specificati'
	DB	'on.', 0aH, 'See the library reference manual for formatting c'
	DB	'odes (same as strftime()).', 00H
	ORG $+7
?wday_name@?1??_asctime@@9@9 DB 'Sun', 00H		; `_asctime'::`2'::wday_name
	DB	'Mon', 00H
	DB	'Tue', 00H
	DB	'Wed', 00H
	DB	'Thu', 00H
	DB	'Fri', 00H
	DB	'Sat', 00H
	ORG $+4
asctime_doc DB	'asctime([tuple]) -> string', 0aH, 0aH, 'Convert a time t'
	DB	'uple to a string, e.g. ''Sat Jun 06 16:26:11 1998''.', 0aH, 'W'
	DB	'hen the time tuple is not present, current time as returned b'
	DB	'y localtime()', 0aH, 'is used.', 00H
	ORG $+12
ctime_doc DB	'ctime(seconds) -> string', 0aH, 0aH, 'Convert a time in '
	DB	'seconds since the Epoch to a string in local time.', 0aH, 'Th'
	DB	'is is equivalent to asctime(localtime(seconds)). When the tim'
	DB	'e tuple is', 0aH, 'not present, current time as returned by l'
	DB	'ocaltime() is used.', 00H
	ORG $+9
mktime_doc DB	'mktime(tuple) -> floating point number', 0aH, 0aH, 'Conv'
	DB	'ert a time tuple in local time to seconds since the Epoch.', 0aH
	DB	'Note that mktime(gmtime(0)) will not generally return zero fo'
	DB	'r most', 0aH, 'time zones; instead the returned value will ei'
	DB	'ther be equal to that', 0aH, 'of the timezone or altzone attr'
	DB	'ibutes on the time module.', 00H
	ORG $+7
monotonic_doc DB 'monotonic() -> float', 0aH, 0aH, 'Monotonic clock, cann'
	DB	'ot go backward.', 00H
	ORG $+5
perf_counter_doc DB 'perf_counter() -> float', 0aH, 0aH, 'Performance cou'
	DB	'nter for benchmarking.', 00H
	ORG $+1
process_time_doc DB 'process_time() -> float', 0aH, 0aH, 'Process time fo'
	DB	'r profiling: sum of the kernel and user-space CPU time.', 00H
get_clock_info_doc DB 'get_clock_info(name: str) -> dict', 0aH, 0aH, 'Get'
	DB	' information of the specified clock.', 00H
	ORG $+5
time_methods DQ	FLAT:??_C@_04CLCEDBPF@time?$AA@
	DQ	FLAT:time_time
	DD	04H
	ORG $+4
	DQ	FLAT:time_doc
	DQ	FLAT:??_C@_05DDECJJKE@clock?$AA@
	DQ	FLAT:time_clock
	DD	04H
	ORG $+4
	DQ	FLAT:clock_doc
	DQ	FLAT:??_C@_05PCJCMMHD@sleep?$AA@
	DQ	FLAT:time_sleep
	DD	01H
	ORG $+4
	DQ	FLAT:sleep_doc
	DQ	FLAT:??_C@_06IKBBHHHJ@gmtime?$AA@
	DQ	FLAT:time_gmtime
	DD	01H
	ORG $+4
	DQ	FLAT:gmtime_doc
	DQ	FLAT:??_C@_09EKBOCLDN@localtime?$AA@
	DQ	FLAT:time_localtime
	DD	01H
	ORG $+4
	DQ	FLAT:localtime_doc
	DQ	FLAT:??_C@_07MHIFAOOG@asctime?$AA@
	DQ	FLAT:time_asctime
	DD	01H
	ORG $+4
	DQ	FLAT:asctime_doc
	DQ	FLAT:??_C@_05NCKEBKLP@ctime?$AA@
	DQ	FLAT:time_ctime
	DD	01H
	ORG $+4
	DQ	FLAT:ctime_doc
	DQ	FLAT:??_C@_06PIDIMLCK@mktime?$AA@
	DQ	FLAT:time_mktime
	DD	08H
	ORG $+4
	DQ	FLAT:mktime_doc
	DQ	FLAT:??_C@_08EPGBJPHJ@strftime?$AA@
	DQ	FLAT:time_strftime
	DD	01H
	ORG $+4
	DQ	FLAT:strftime_doc
	DQ	FLAT:??_C@_08JKOOHOPP@strptime?$AA@
	DQ	FLAT:time_strptime
	DD	01H
	ORG $+4
	DQ	FLAT:strptime_doc
	DQ	FLAT:??_C@_09FKNHDPAJ@monotonic?$AA@
	DQ	FLAT:time_monotonic
	DD	04H
	ORG $+4
	DQ	FLAT:monotonic_doc
	DQ	FLAT:??_C@_0N@HNHIBMAE@process_time?$AA@
	DQ	FLAT:time_process_time
	DD	04H
	ORG $+4
	DQ	FLAT:process_time_doc
	DQ	FLAT:??_C@_0N@MEONCEDN@perf_counter?$AA@
	DQ	FLAT:time_perf_counter
	DD	04H
	ORG $+4
	DQ	FLAT:perf_counter_doc
	DQ	FLAT:??_C@_0P@IHBBIOOL@get_clock_info?$AA@
	DQ	FLAT:time_get_clock_info
	DD	01H
	ORG $+4
	DQ	FLAT:get_clock_info_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
module_doc DB	'This module provides various functions to manipulate tim'
	DB	'e values.', 0aH, 0aH, 'There are two standard representations'
	DB	' of time.  One is the number', 0aH, 'of seconds since the Epo'
	DB	'ch, in UTC (a.k.a. GMT).  It may be an integer', 0aH, 'or a f'
	DB	'loating point number (to represent fractions of seconds).', 0aH
	DB	'The Epoch is system-defined; on Unix, it is generally January'
	DB	' 1st, 1970.', 0aH, 'The actual value can be retrieved by call'
	DB	'ing gmtime(0).', 0aH, 0aH, 'The other representation is a tup'
	DB	'le of 9 integers giving local time.', 0aH, 'The tuple items a'
	DB	're:', 0aH, '  year (including century, e.g. 1998)', 0aH, '  m'
	DB	'onth (1-12)', 0aH, '  day (1-31)', 0aH, '  hours (0-23)', 0aH
	DB	'  minutes (0-59)', 0aH, '  seconds (0-59)', 0aH, '  weekday ('
	DB	'0-6, Monday is 0)', 0aH, '  Julian day (day in the year, 1-36'
	DB	'6)', 0aH, '  DST (Daylight Savings Time) flag (-1, 0 or 1)', 0aH
	DB	'If the DST flag is 0, the time is given in the regular time z'
	DB	'one;', 0aH, 'if it is 1, the time is given in the DST time zo'
	DB	'ne;', 0aH, 'if it is -1, mktime() should guess based on the d'
	DB	'ate and time.', 0aH, 0aH, 'Variables:', 0aH, 0aH, 'timezone -'
	DB	'- difference in seconds between UTC and local standard time', 0aH
	DB	'altzone -- difference in  seconds between UTC and local DST t'
	DB	'ime', 0aH, 'daylight -- whether local time should reflect DST'
	DB	0aH, 'tzname -- tuple of (standard time zone name, DST time zo'
	DB	'ne name)', 0aH, 0aH, 'Functions:', 0aH, 0aH, 'time() -- retur'
	DB	'n current time in seconds since the Epoch as a float', 0aH, 'c'
	DB	'lock() -- return CPU time since process start as a float', 0aH
	DB	'sleep() -- delay for a number of seconds given as a float', 0aH
	DB	'gmtime() -- convert seconds since Epoch to UTC tuple', 0aH, 'l'
	DB	'ocaltime() -- convert seconds since Epoch to local time tuple'
	DB	0aH, 'asctime() -- convert time tuple to string', 0aH, 'ctime('
	DB	') -- convert time in seconds to string', 0aH, 'mktime() -- co'
	DB	'nvert local time tuple to seconds since Epoch', 0aH, 'strftim'
	DB	'e() -- convert time tuple to string according to format speci'
	DB	'fication', 0aH, 'strptime() -- parse string to time tuple acc'
	DB	'ording to format specification', 0aH, 'tzset() -- change the '
	DB	'local timezone', 00H
	ORG $+12
timemodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04CLCEDBPF@time?$AA@
	DQ	FLAT:module_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:time_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\timemodule.c
pdata	SEGMENT
$pdata$time_time DD imagerel time_time
	DD	imagerel time_time+26
	DD	imagerel $unwind$time_time
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_time DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT time_time
_TEXT	SEGMENT
self$ = 48
unused$ = 56
time_time PROC						; COMDAT

; 64   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 65   :     return floattime(NULL);

  0000e	33 c9		 xor	 ecx, ecx
  00010	e8 00 00 00 00	 call	 floattime

; 66   : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
time_time ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$time_clock DD imagerel time_clock
	DD	imagerel time_clock+26
	DD	imagerel $unwind$time_clock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_clock DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT time_clock
_TEXT	SEGMENT
self$ = 48
unused$ = 56
time_clock PROC						; COMDAT

; 157  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 158  :     return pyclock(NULL);

  0000e	33 c9		 xor	 ecx, ecx
  00010	e8 00 00 00 00	 call	 pyclock

; 159  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
time_clock ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pyclock DD imagerel pyclock
	DD	imagerel pyclock+50
	DD	imagerel $unwind$pyclock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pyclock DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT pyclock
_TEXT	SEGMENT
res$ = 32
info$ = 64
pyclock	PROC						; COMDAT

; 146  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 147  : #ifdef WIN32_PERF_COUNTER
; 148  :     PyObject *res;
; 149  :     if (win_perf_counter(info, &res) == 0)

  00009	48 8d 54 24 20	 lea	 rdx, QWORD PTR res$[rsp]
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR info$[rsp]
  00013	e8 00 00 00 00	 call	 win_perf_counter
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@pyclock

; 150  :         return res;

  0001c	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00021	eb 0a		 jmp	 SHORT $LN2@pyclock
$LN1@pyclock:

; 151  : #endif
; 152  :     return floatclock(info);

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR info$[rsp]
  00028	e8 00 00 00 00	 call	 floatclock
$LN2@pyclock:

; 153  : }

  0002d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00031	c3		 ret	 0
pyclock	ENDP
_TEXT	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	??_C@_07DBKAOJPM@clock?$CI?$CJ?$AA@		; `string'
PUBLIC	??_C@_0EM@CHFAIPKH@the?5processor?5time?5used?5is?5not?5a@ ; `string'
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	__imp_clock:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$floatclock DD imagerel floatclock
	DD	imagerel floatclock+142
	DD	imagerel $unwind$floatclock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$floatclock DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT ??_C@_07DBKAOJPM@clock?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_07DBKAOJPM@clock?$CI?$CJ?$AA@ DB 'clock()', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@CHFAIPKH@the?5processor?5time?5used?5is?5not?5a@
CONST	SEGMENT
??_C@_0EM@CHFAIPKH@the?5processor?5time?5used?5is?5not?5a@ DB 'the proces'
	DB	'sor time used is not available or its value cannot be represe'
	DB	'nted', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT floatclock
_TEXT	SEGMENT
value$ = 32
info$ = 64
floatclock PROC						; COMDAT

; 86   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 87   :     clock_t value;
; 88   :     value = clock();

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clock
  0000f	89 44 24 20	 mov	 DWORD PTR value$[rsp], eax

; 89   :     if (value == (clock_t)-1) {

  00013	83 7c 24 20 ff	 cmp	 DWORD PTR value$[rsp], -1
  00018	75 17		 jne	 SHORT $LN2@floatclock

; 90   :         PyErr_SetString(PyExc_RuntimeError,
; 91   :                 "the processor time used is not available "
; 92   :                 "or its value cannot be represented");

  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EM@CHFAIPKH@the?5processor?5time?5used?5is?5not?5a@
  00021	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00028	e8 00 00 00 00	 call	 PyErr_SetString

; 93   :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 58		 jmp	 SHORT $LN3@floatclock
$LN2@floatclock:

; 94   :     }
; 95   :     if (info) {

  00031	48 83 7c 24 40
	00		 cmp	 QWORD PTR info$[rsp], 0
  00037	74 39		 je	 SHORT $LN1@floatclock

; 96   :         info->implementation = "clock()";

  00039	48 8b 44 24 40	 mov	 rax, QWORD PTR info$[rsp]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DBKAOJPM@clock?$CI?$CJ?$AA@
  00045	48 89 08	 mov	 QWORD PTR [rax], rcx

; 97   :         info->resolution = 1.0 / (double)CLOCKS_PER_SEC;

  00048	48 8b 44 24 40	 mov	 rax, QWORD PTR info$[rsp]
  0004d	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00055	f2 0f 11 40 10	 movsdx	 QWORD PTR [rax+16], xmm0

; 98   :         info->monotonic = 1;

  0005a	48 8b 44 24 40	 mov	 rax, QWORD PTR info$[rsp]
  0005f	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 99   :         info->adjustable = 0;

  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR info$[rsp]
  0006b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0
$LN1@floatclock:

; 100  :     }
; 101  :     return PyFloat_FromDouble((double)value / CLOCKS_PER_SEC);

  00072	66 0f 6e 44 24
	20		 movd	 xmm0, DWORD PTR value$[rsp]
  00078	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0007c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  00084	e8 00 00 00 00	 call	 PyFloat_FromDouble
$LN3@floatclock:

; 102  : }

  00089	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008d	c3		 ret	 0
floatclock ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_0BK@GHHFKNCE@QueryPerformanceCounter?$CI?$CJ?$AA@ ; `string'
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
_BSS	SEGMENT
?ctrStart@?1??win_perf_counter@@9@9 DQ 01H DUP (?)	; `win_perf_counter'::`2'::ctrStart
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win_perf_counter DD imagerel win_perf_counter
	DD	imagerel win_perf_counter+281
	DD	imagerel $unwind$win_perf_counter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win_perf_counter DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_0BK@GHHFKNCE@QueryPerformanceCounter?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BK@GHHFKNCE@QueryPerformanceCounter?$CI?$CJ?$AA@ DB 'QueryPerforma'
	DB	'nceCounter()', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT win_perf_counter
_TEXT	SEGMENT
now$ = 32
diff$ = 40
freq$63688 = 48
info$ = 80
result$ = 88
win_perf_counter PROC					; COMDAT

; 111  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 112  :     static LONGLONG cpu_frequency = 0;
; 113  :     static LONGLONG ctrStart;
; 114  :     LARGE_INTEGER now;
; 115  :     double diff;
; 116  : 
; 117  :     if (cpu_frequency == 0) {

  0000e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?cpu_frequency@?1??win_perf_counter@@9@9, 0
  00016	75 50		 jne	 SHORT $LN4@win_perf_c

; 118  :         LARGE_INTEGER freq;
; 119  :         QueryPerformanceCounter(&now);

  00018	48 8d 4c 24 20	 lea	 rcx, QWORD PTR now$[rsp]
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 120  :         ctrStart = now.QuadPart;

  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR now$[rsp]
  00028	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?ctrStart@?1??win_perf_counter@@9@9, rax

; 121  :         if (!QueryPerformanceFrequency(&freq) || freq.QuadPart == 0) {

  0002f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR freq$63688[rsp]
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency
  0003a	85 c0		 test	 eax, eax
  0003c	74 08		 je	 SHORT $LN2@win_perf_c
  0003e	48 83 7c 24 30
	00		 cmp	 QWORD PTR freq$63688[rsp], 0
  00044	75 16		 jne	 SHORT $LN3@win_perf_c
$LN2@win_perf_c:

; 122  :             /* Unlikely to happen - this works on all intel
; 123  :                machines at least!  Revert to clock() */
; 124  :             *result = NULL;

  00046	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
  0004b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 125  :             return -1;

  00052	b8 ff ff ff ff	 mov	 eax, -1
  00057	e9 b8 00 00 00	 jmp	 $LN5@win_perf_c
$LN3@win_perf_c:

; 126  :         }
; 127  :         cpu_frequency = freq.QuadPart;

  0005c	48 8b 44 24 30	 mov	 rax, QWORD PTR freq$63688[rsp]
  00061	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?cpu_frequency@?1??win_perf_counter@@9@9, rax
$LN4@win_perf_c:

; 128  :     }
; 129  :     QueryPerformanceCounter(&now);

  00068	48 8d 4c 24 20	 lea	 rcx, QWORD PTR now$[rsp]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 130  :     diff = (double)(now.QuadPart - ctrStart);

  00073	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?ctrStart@?1??win_perf_counter@@9@9
  0007a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR now$[rsp]
  0007f	48 2b c8	 sub	 rcx, rax
  00082	48 8b c1	 mov	 rax, rcx
  00085	66 0f ef c0	 pxor	 xmm0, xmm0
  00089	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  0008e	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR diff$[rsp], xmm0

; 131  :     if (info) {

  00094	48 83 7c 24 50
	00		 cmp	 QWORD PTR info$[rsp], 0
  0009a	74 4e		 je	 SHORT $LN1@win_perf_c

; 132  :         info->implementation = "QueryPerformanceCounter()";

  0009c	48 8b 44 24 50	 mov	 rax, QWORD PTR info$[rsp]
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@GHHFKNCE@QueryPerformanceCounter?$CI?$CJ?$AA@
  000a8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 133  :         info->resolution = 1.0 / (double)cpu_frequency;

  000ab	66 0f ef c0	 pxor	 xmm0, xmm0
  000af	f2 48 0f 2a 05
	00 00 00 00	 cvtsi2sd xmm0, QWORD PTR ?cpu_frequency@?1??win_perf_counter@@9@9
  000b8	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ff0000000000000
  000c0	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000c4	66 0f 28 c1	 movapd	 xmm0, xmm1
  000c8	48 8b 44 24 50	 mov	 rax, QWORD PTR info$[rsp]
  000cd	f2 0f 11 40 10	 movsdx	 QWORD PTR [rax+16], xmm0

; 134  :         info->monotonic = 1;

  000d2	48 8b 44 24 50	 mov	 rax, QWORD PTR info$[rsp]
  000d7	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 135  :         info->adjustable = 0;

  000de	48 8b 44 24 50	 mov	 rax, QWORD PTR info$[rsp]
  000e3	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0
$LN1@win_perf_c:

; 136  :     }
; 137  :     *result = PyFloat_FromDouble(diff / (double)cpu_frequency);

  000ea	66 0f ef c0	 pxor	 xmm0, xmm0
  000ee	f2 48 0f 2a 05
	00 00 00 00	 cvtsi2sd xmm0, QWORD PTR ?cpu_frequency@?1??win_perf_counter@@9@9
  000f7	f2 0f 10 4c 24
	28		 movsdx	 xmm1, QWORD PTR diff$[rsp]
  000fd	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00101	66 0f 28 c1	 movapd	 xmm0, xmm1
  00105	e8 00 00 00 00	 call	 PyFloat_FromDouble
  0010a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR result$[rsp]
  0010f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 138  :     return 0;

  00112	33 c0		 xor	 eax, eax
$LN5@win_perf_c:

; 139  : }

  00114	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00118	c3		 ret	 0
win_perf_counter ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0CC@ODLECAHN@sleep?5length?5must?5be?5non?9negativ@ ; `string'
PUBLIC	??_C@_07HOMAOGOE@d?3sleep?$AA@			; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$time_sleep DD imagerel time_sleep
	DD	imagerel time_sleep+122
	DD	imagerel $unwind$time_sleep
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_sleep DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CC@ODLECAHN@sleep?5length?5must?5be?5non?9negativ@
CONST	SEGMENT
??_C@_0CC@ODLECAHN@sleep?5length?5must?5be?5non?9negativ@ DB 'sleep lengt'
	DB	'h must be non-negative', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HOMAOGOE@d?3sleep?$AA@
CONST	SEGMENT
??_C@_07HOMAOGOE@d?3sleep?$AA@ DB 'd:sleep', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT time_sleep
_TEXT	SEGMENT
secs$ = 32
self$ = 64
args$ = 72
time_sleep PROC						; COMDAT

; 251  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 252  :     double secs;
; 253  :     if (!PyArg_ParseTuple(args, "d:sleep", &secs))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR secs$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07HOMAOGOE@d?3sleep?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN3@time_sleep

; 254  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 49		 jmp	 SHORT $LN4@time_sleep
$LN3@time_sleep:

; 255  :     if (secs < 0) {

  0002c	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00030	66 0f 2f 44 24
	20		 comisd	 xmm0, QWORD PTR secs$[rsp]
  00036	76 17		 jbe	 SHORT $LN2@time_sleep

; 256  :         PyErr_SetString(PyExc_ValueError,
; 257  :                         "sleep length must be non-negative");

  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@ODLECAHN@sleep?5length?5must?5be?5non?9negativ@
  0003f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00046	e8 00 00 00 00	 call	 PyErr_SetString

; 258  :         return NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	eb 26		 jmp	 SHORT $LN4@time_sleep
$LN2@time_sleep:

; 259  :     }
; 260  :     if (floatsleep(secs) != 0)

  0004f	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR secs$[rsp]
  00055	e8 00 00 00 00	 call	 floatsleep
  0005a	85 c0		 test	 eax, eax
  0005c	74 04		 je	 SHORT $LN1@time_sleep

; 261  :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	eb 13		 jmp	 SHORT $LN4@time_sleep
$LN1@time_sleep:

; 262  :     Py_INCREF(Py_None);

  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00069	e8 00 00 00 00	 call	 _Py_IncRef

; 263  :     return Py_None;

  0006e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@time_sleep:

; 264  : }

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
time_sleep ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	$T64696
PUBLIC	??_C@_09NKECGAE@?$HMO?3gmtime?$AA@		; `string'
EXTRN	PyErr_SetFromErrno:PROC
EXTRN	PyExc_OSError:QWORD
EXTRN	__imp__errno:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\timemodule.c
pdata	SEGMENT
$pdata$time_gmtime DD imagerel time_gmtime
	DD	imagerel time_gmtime+187
	DD	imagerel $unwind$time_gmtime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_gmtime DD 041301H
	DD	0110113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_09NKECGAE@?$HMO?3gmtime?$AA@
CONST	SEGMENT
??_C@_09NKECGAE@?$HMO?3gmtime?$AA@ DB '|O:gmtime', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT time_gmtime
_TEXT	SEGMENT
when$ = 32
local$ = 40
buf$ = 48
$T64696 = 88
self$ = 160
args$ = 168
time_gmtime PROC					; COMDAT

; 363  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 364  :     time_t when;
; 365  :     struct tm buf, *local;
; 366  : 
; 367  :     if (!parse_time_t_args(args, "|O:gmtime", &when))

  00013	4c 8d 44 24 20	 lea	 r8, QWORD PTR when$[rsp]
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09NKECGAE@?$HMO?3gmtime?$AA@
  0001f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00027	e8 00 00 00 00	 call	 parse_time_t_args
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN3@time_gmtim

; 368  :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 7d		 jmp	 SHORT $LN4@time_gmtim
$LN3@time_gmtim:

; 369  : 
; 370  :     errno = 0;

  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 371  :     local = gmtime(&when);

  00040	48 8d 4c 24 20	 lea	 rcx, QWORD PTR when$[rsp]
  00045	e8 00 00 00 00	 call	 gmtime
  0004a	48 89 44 24 28	 mov	 QWORD PTR local$[rsp], rax

; 372  :     if (local == NULL) {

  0004f	48 83 7c 24 28
	00		 cmp	 QWORD PTR local$[rsp], 0
  00055	75 25		 jne	 SHORT $LN2@time_gmtim

; 373  : #ifdef EINVAL
; 374  :         if (errno == 0)

  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0005d	83 38 00	 cmp	 DWORD PTR [rax], 0
  00060	75 0c		 jne	 SHORT $LN1@time_gmtim

; 375  :             errno = EINVAL;

  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00068	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22
$LN1@time_gmtim:

; 376  : #endif
; 377  :         return PyErr_SetFromErrno(PyExc_OSError);

  0006e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OSError
  00075	e8 00 00 00 00	 call	 PyErr_SetFromErrno
  0007a	eb 35		 jmp	 SHORT $LN4@time_gmtim
$LN2@time_gmtim:

; 378  :     }
; 379  :     buf = *local;

  0007c	48 8d 44 24 58	 lea	 rax, QWORD PTR $T64696[rsp]
  00081	48 8b f8	 mov	 rdi, rax
  00084	48 8b 74 24 28	 mov	 rsi, QWORD PTR local$[rsp]
  00089	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0008e	f3 a4		 rep movsb
  00090	48 8d 44 24 30	 lea	 rax, QWORD PTR buf$[rsp]
  00095	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T64696[rsp]
  0009a	48 8b f8	 mov	 rdi, rax
  0009d	48 8b f1	 mov	 rsi, rcx
  000a0	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000a5	f3 a4		 rep movsb

; 380  :     return tmtotuple(&buf);

  000a7	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  000ac	e8 00 00 00 00	 call	 tmtotuple
$LN4@time_gmtim:

; 381  : }

  000b1	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000b8	5f		 pop	 rdi
  000b9	5e		 pop	 rsi
  000ba	c3		 ret	 0
time_gmtime ENDP
_TEXT	ENDS
EXTRN	__imp__gmtime64:PROC
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
pdata	SEGMENT
$pdata$gmtime DD imagerel gmtime
	DD	imagerel gmtime+25
	DD	imagerel $unwind$gmtime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gmtime DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gmtime
_TEXT	SEGMENT
_Time$ = 48
gmtime	PROC						; COMDAT

; 100  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 101  : #pragma warning( push )
; 102  : #pragma warning( disable : 4996 )
; 103  :     return _gmtime64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__gmtime64

; 104  : #pragma warning( pop )
; 105  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
gmtime	ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyStructSequence_New:PROC
_BSS	SEGMENT
StructTimeType DB 01e0H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\timemodule.c
pdata	SEGMENT
$pdata$tmtotuple DD imagerel tmtotuple
	DD	imagerel tmtotuple+337
	DD	imagerel $unwind$tmtotuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tmtotuple DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tmtotuple
_TEXT	SEGMENT
v$ = 32
p$ = 64
tmtotuple PROC						; COMDAT

; 308  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 309  :     PyObject *v = PyStructSequence_New(&StructTimeType);

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StructTimeType
  00010	e8 00 00 00 00	 call	 PyStructSequence_New
  00015	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 310  :     if (v == NULL)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00020	75 07		 jne	 SHORT $LN6@tmtotuple

; 311  :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 23 01 00 00	 jmp	 $LN7@tmtotuple
$LN6@tmtotuple:

; 312  : 
; 313  : #define SET(i,val) PyStructSequence_SET_ITEM(v, i, PyLong_FromLong((long) val))
; 314  : 
; 315  :     SET(0, p->tm_year + 1900);

  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  0002e	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00031	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  00036	8b c8		 mov	 ecx, eax
  00038	e8 00 00 00 00	 call	 PyLong_FromLong
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00042	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 316  :     SET(1, p->tm_mon + 1);         /* Want January == 1 */

  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  0004b	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0004e	ff c0		 inc	 eax
  00050	8b c8		 mov	 ecx, eax
  00052	e8 00 00 00 00	 call	 PyLong_FromLong
  00057	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0005c	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 317  :     SET(2, p->tm_mday);

  00060	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  00065	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  00068	e8 00 00 00 00	 call	 PyLong_FromLong
  0006d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00072	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 318  :     SET(3, p->tm_hour);

  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  0007e	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  00081	e8 00 00 00 00	 call	 PyLong_FromLong
  00086	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0008b	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 319  :     SET(4, p->tm_min);

  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  00097	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  0009a	e8 00 00 00 00	 call	 PyLong_FromLong
  0009f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000a4	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 320  :     SET(5, p->tm_sec);

  000ab	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  000b0	8b 08		 mov	 ecx, DWORD PTR [rax]
  000b2	e8 00 00 00 00	 call	 PyLong_FromLong
  000b7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000bc	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax

; 321  :     SET(6, (p->tm_wday + 6) % 7); /* Want Monday == 0 */

  000c3	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  000c8	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000cb	83 c0 06	 add	 eax, 6
  000ce	99		 cdq
  000cf	b9 07 00 00 00	 mov	 ecx, 7
  000d4	f7 f9		 idiv	 ecx
  000d6	8b c2		 mov	 eax, edx
  000d8	8b c8		 mov	 ecx, eax
  000da	e8 00 00 00 00	 call	 PyLong_FromLong
  000df	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000e4	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 322  :     SET(7, p->tm_yday + 1);        /* Want January, 1 == 1 */

  000eb	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  000f0	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  000f3	ff c0		 inc	 eax
  000f5	8b c8		 mov	 ecx, eax
  000f7	e8 00 00 00 00	 call	 PyLong_FromLong
  000fc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00101	48 89 81 a8 00
	00 00		 mov	 QWORD PTR [rcx+168], rax

; 323  :     SET(8, p->tm_isdst);

  00108	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  0010d	8b 48 20	 mov	 ecx, DWORD PTR [rax+32]
  00110	e8 00 00 00 00	 call	 PyLong_FromLong
  00115	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0011a	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax

; 324  : #ifdef HAVE_STRUCT_TM_TM_ZONE
; 325  :     PyStructSequence_SET_ITEM(v, 9,
; 326  :         PyUnicode_DecodeLocale(p->tm_zone, "surrogateescape"));
; 327  :     SET(10, p->tm_gmtoff);
; 328  : #endif /* HAVE_STRUCT_TM_TM_ZONE */
; 329  : #undef SET
; 330  :     if (PyErr_Occurred()) {

  00121	e8 00 00 00 00	 call	 PyErr_Occurred
  00126	48 85 c0	 test	 rax, rax
  00129	74 1c		 je	 SHORT $LN5@tmtotuple
$LN4@tmtotuple:

; 331  :         Py_XDECREF(v);

  0012b	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00131	74 0a		 je	 SHORT $LN1@tmtotuple
  00133	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00138	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@tmtotuple:
  0013d	33 c0		 xor	 eax, eax
  0013f	85 c0		 test	 eax, eax
  00141	75 e8		 jne	 SHORT $LN4@tmtotuple

; 332  :         return NULL;

  00143	33 c0		 xor	 eax, eax
  00145	eb 05		 jmp	 SHORT $LN7@tmtotuple
$LN5@tmtotuple:

; 333  :     }
; 334  : 
; 335  :     return v;

  00147	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN7@tmtotuple:

; 336  : }

  0014c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00150	c3		 ret	 0
tmtotuple ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	_PyTime_ObjectToTime_t:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\timemodule.c
pdata	SEGMENT
$pdata$parse_time_t_args DD imagerel parse_time_t_args
	DD	imagerel parse_time_t_args+139
	DD	imagerel $unwind$parse_time_t_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_time_t_args DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parse_time_t_args
_TEXT	SEGMENT
whent$ = 32
ot$ = 40
args$ = 64
format$ = 72
pwhen$ = 80
parse_time_t_args PROC					; COMDAT

; 344  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 345  :     PyObject *ot = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR ot$[rsp], 0

; 346  :     time_t whent;
; 347  : 
; 348  :     if (!PyArg_ParseTuple(args, format, &ot))

  0001c	4c 8d 44 24 28	 lea	 r8, QWORD PTR ot$[rsp]
  00021	48 8b 54 24 48	 mov	 rdx, QWORD PTR format$[rsp]
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR args$[rsp]
  0002b	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00030	85 c0		 test	 eax, eax
  00032	75 04		 jne	 SHORT $LN5@parse_time

; 349  :         return 0;

  00034	33 c0		 xor	 eax, eax
  00036	eb 4e		 jmp	 SHORT $LN6@parse_time
$LN5@parse_time:

; 350  :     if (ot == NULL || ot == Py_None) {

  00038	48 83 7c 24 28
	00		 cmp	 QWORD PTR ot$[rsp], 0
  0003e	74 0e		 je	 SHORT $LN3@parse_time
  00040	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00047	48 39 44 24 28	 cmp	 QWORD PTR ot$[rsp], rax
  0004c	75 0e		 jne	 SHORT $LN4@parse_time
$LN3@parse_time:

; 351  :         whent = time(NULL);

  0004e	33 c9		 xor	 ecx, ecx
  00050	e8 00 00 00 00	 call	 time
  00055	48 89 44 24 20	 mov	 QWORD PTR whent$[rsp], rax

; 352  :     }
; 353  :     else {

  0005a	eb 18		 jmp	 SHORT $LN2@parse_time
$LN4@parse_time:

; 354  :         if (_PyTime_ObjectToTime_t(ot, &whent) == -1)

  0005c	48 8d 54 24 20	 lea	 rdx, QWORD PTR whent$[rsp]
  00061	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ot$[rsp]
  00066	e8 00 00 00 00	 call	 _PyTime_ObjectToTime_t
  0006b	83 f8 ff	 cmp	 eax, -1
  0006e	75 04		 jne	 SHORT $LN1@parse_time

; 355  :             return 0;

  00070	33 c0		 xor	 eax, eax
  00072	eb 12		 jmp	 SHORT $LN6@parse_time
$LN1@parse_time:
$LN2@parse_time:

; 356  :     }
; 357  :     *pwhen = whent;

  00074	48 8b 44 24 50	 mov	 rax, QWORD PTR pwhen$[rsp]
  00079	48 8b 4c 24 20	 mov	 rcx, QWORD PTR whent$[rsp]
  0007e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 358  :     return 1;

  00081	b8 01 00 00 00	 mov	 eax, 1
$LN6@parse_time:

; 359  : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
parse_time_t_args ENDP
_TEXT	ENDS
EXTRN	__imp__time64:PROC
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
pdata	SEGMENT
$pdata$time DD	imagerel time
	DD	imagerel time+25
	DD	imagerel $unwind$time
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time DD	010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT time
_TEXT	SEGMENT
_Time$ = 48
time	PROC						; COMDAT

; 132  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 133  :     return _time64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 134  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
time	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@OJMPLKP@?$HMO?3localtime?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\modules\timemodule.c
pdata	SEGMENT
$pdata$time_localtime DD imagerel time_localtime
	DD	imagerel time_localtime+83
	DD	imagerel $unwind$time_localtime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_localtime DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0N@OJMPLKP@?$HMO?3localtime?$AA@
CONST	SEGMENT
??_C@_0N@OJMPLKP@?$HMO?3localtime?$AA@ DB '|O:localtime', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT time_localtime
_TEXT	SEGMENT
when$ = 32
buf$ = 40
self$ = 96
args$ = 104
time_localtime PROC					; COMDAT

; 415  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 416  :     time_t when;
; 417  :     struct tm buf;
; 418  : 
; 419  :     if (!parse_time_t_args(args, "|O:localtime", &when))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR when$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@OJMPLKP@?$HMO?3localtime?$AA@
  0001a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 parse_time_t_args
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN2@time_local

; 420  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 22		 jmp	 SHORT $LN3@time_local
$LN2@time_local:

; 421  :     if (pylocaltime(&when, &buf) == -1)

  0002c	48 8d 54 24 28	 lea	 rdx, QWORD PTR buf$[rsp]
  00031	48 8d 4c 24 20	 lea	 rcx, QWORD PTR when$[rsp]
  00036	e8 00 00 00 00	 call	 pylocaltime
  0003b	83 f8 ff	 cmp	 eax, -1
  0003e	75 04		 jne	 SHORT $LN1@time_local

; 422  :         return NULL;

  00040	33 c0		 xor	 eax, eax
  00042	eb 0a		 jmp	 SHORT $LN3@time_local
$LN1@time_local:

; 423  :     return tmtotuple(&buf);

  00044	48 8d 4c 24 28	 lea	 rcx, QWORD PTR buf$[rsp]
  00049	e8 00 00 00 00	 call	 tmtotuple
$LN3@time_local:

; 424  : }

  0004e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00052	c3		 ret	 0
time_localtime ENDP
_TEXT	ENDS
PUBLIC	$T64743
PUBLIC	??_C@_1BM@DAKDJBPG@?$AAt?$AAi?$AAm?$AAe?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@HKMBAFBM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAt?$AAi?$AAm?$AAe?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$pylocaltime DD imagerel pylocaltime
	DD	imagerel pylocaltime+166
	DD	imagerel $unwind$pylocaltime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pylocaltime DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT ??_C@_1BM@DAKDJBPG@?$AAt?$AAi?$AAm?$AAe?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@DAKDJBPG@?$AAt?$AAi?$AAm?$AAe?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 't'
	DB	00H, 'i', 00H, 'm', 00H, 'e', 00H, 'p', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@HKMBAFBM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAt?$AAi?$AAm?$AAe?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@HKMBAFBM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAt?$AAi?$AAm?$AAe?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 't', 00H, 'i', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'l', 00H
	DB	'e', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT pylocaltime
_TEXT	SEGMENT
local$ = 32
$T64743 = 40
timep$ = 112
result$ = 120
pylocaltime PROC					; COMDAT

; 395  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 396  :     struct tm *local;
; 397  : 
; 398  :     assert (timep != NULL);

  00010	48 83 7c 24 70
	00		 cmp	 QWORD PTR timep$[rsp], 0
  00016	75 1c		 jne	 SHORT $LN5@pylocaltim
  00018	41 b8 8e 01 00
	00		 mov	 r8d, 398		; 0000018eH
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@HKMBAFBM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAt?$AAi?$AAm?$AAe?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@DAKDJBPG@?$AAt?$AAi?$AAm?$AAe?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00032	33 c0		 xor	 eax, eax
$LN5@pylocaltim:

; 399  :     local = localtime(timep);

  00034	48 8b 4c 24 70	 mov	 rcx, QWORD PTR timep$[rsp]
  00039	e8 00 00 00 00	 call	 localtime
  0003e	48 89 44 24 20	 mov	 QWORD PTR local$[rsp], rax

; 400  :     if (local == NULL) {

  00043	48 83 7c 24 20
	00		 cmp	 QWORD PTR local$[rsp], 0
  00049	75 2a		 jne	 SHORT $LN2@pylocaltim

; 401  :         /* unconvertible time */
; 402  : #ifdef EINVAL
; 403  :         if (errno == 0)

  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00051	83 38 00	 cmp	 DWORD PTR [rax], 0
  00054	75 0c		 jne	 SHORT $LN1@pylocaltim

; 404  :             errno = EINVAL;

  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0005c	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22
$LN1@pylocaltim:

; 405  : #endif
; 406  :         PyErr_SetFromErrno(PyExc_OSError);

  00062	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OSError
  00069	e8 00 00 00 00	 call	 PyErr_SetFromErrno

; 407  :         return -1;

  0006e	b8 ff ff ff ff	 mov	 eax, -1
  00073	eb 2a		 jmp	 SHORT $LN3@pylocaltim
$LN2@pylocaltim:

; 408  :     }
; 409  :     *result = *local;

  00075	48 8d 44 24 28	 lea	 rax, QWORD PTR $T64743[rsp]
  0007a	48 8b f8	 mov	 rdi, rax
  0007d	48 8b 74 24 20	 mov	 rsi, QWORD PTR local$[rsp]
  00082	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00087	f3 a4		 rep movsb
  00089	48 8d 44 24 28	 lea	 rax, QWORD PTR $T64743[rsp]
  0008e	48 8b 7c 24 78	 mov	 rdi, QWORD PTR result$[rsp]
  00093	48 8b f0	 mov	 rsi, rax
  00096	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0009b	f3 a4		 rep movsb

; 410  :     return 0;

  0009d	33 c0		 xor	 eax, eax
$LN3@pylocaltim:

; 411  : }

  0009f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000a3	5f		 pop	 rdi
  000a4	5e		 pop	 rsi
  000a5	c3		 ret	 0
pylocaltime ENDP
_TEXT	ENDS
EXTRN	__imp__localtime64:PROC
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
pdata	SEGMENT
$pdata$localtime DD imagerel localtime
	DD	imagerel localtime+25
	DD	imagerel $unwind$localtime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$localtime DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT localtime
_TEXT	SEGMENT
_Time$ = 48
localtime PROC						; COMDAT

; 113  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 114  : #pragma warning( push )
; 115  : #pragma warning( disable : 4996 )
; 116  :     return _localtime64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__localtime64

; 117  : #pragma warning( pop )
; 118  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
localtime ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@FIDKHLFK@format?5?$CFy?5requires?5year?5?$DO?$DN?51900?5@ ; `string'
PUBLIC	??_C@_0BG@HMAFAPHD@Invalid?5format?5string?$AA@	; `string'
PUBLIC	??_C@_0BI@PAENNBAG@aAbBcdHIjmMpSUwWxXyYzZ?$CF?$AA@ ; `string'
PUBLIC	??_C@_1CM@KFGFCBJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BA@GMJLDMKP@surrogateescape?$AA@		; `string'
PUBLIC	??_C@_0CG@HINAEAFH@strftime?$CI?$CJ?5requires?5year?5in?5?$FL1?$DL?5@ ; `string'
PUBLIC	??_C@_0N@KJJIHKJK@U?$HMO?3strftime?$AA@		; `string'
EXTRN	PyMem_Free:PROC
EXTRN	PyUnicode_DecodeLocaleAndSize:PROC
EXTRN	__imp_strftime:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strchr:PROC
EXTRN	PyUnicode_EncodeLocale:PROC
EXTRN	memset:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\timemodule.c
pdata	SEGMENT
$pdata$time_strftime DD imagerel time_strftime
	DD	imagerel time_strftime+912
	DD	imagerel $unwind$time_strftime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_strftime DD 021101H
	DD	0150111H
xdata	ENDS
;	COMDAT ??_C@_0CL@FIDKHLFK@format?5?$CFy?5requires?5year?5?$DO?$DN?51900?5@
CONST	SEGMENT
??_C@_0CL@FIDKHLFK@format?5?$CFy?5requires?5year?5?$DO?$DN?51900?5@ DB 'f'
	DB	'ormat %y requires year >= 1900 on Windows', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HMAFAPHD@Invalid?5format?5string?$AA@
CONST	SEGMENT
??_C@_0BG@HMAFAPHD@Invalid?5format?5string?$AA@ DB 'Invalid format string'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PAENNBAG@aAbBcdHIjmMpSUwWxXyYzZ?$CF?$AA@
CONST	SEGMENT
??_C@_0BI@PAENNBAG@aAbBcdHIjmMpSUwWxXyYzZ?$CF?$AA@ DB 'aAbBcdHIjmMpSUwWxX'
	DB	'yYzZ%', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@KFGFCBJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@KFGFCBJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GMJLDMKP@surrogateescape?$AA@
CONST	SEGMENT
??_C@_0BA@GMJLDMKP@surrogateescape?$AA@ DB 'surrogateescape', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HINAEAFH@strftime?$CI?$CJ?5requires?5year?5in?5?$FL1?$DL?5@
CONST	SEGMENT
??_C@_0CG@HINAEAFH@strftime?$CI?$CJ?5requires?5year?5in?5?$FL1?$DL?5@ DB 's'
	DB	'trftime() requires year in [1; 9999]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KJJIHKJK@U?$HMO?3strftime?$AA@
CONST	SEGMENT
??_C@_0N@KJJIHKJK@U?$HMO?3strftime?$AA@ DB 'U|O:strftime', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT time_strftime
_TEXT	SEGMENT
outbuf$ = 32
buflen$ = 40
fmtlen$ = 48
i$ = 56
format_arg$ = 64
format$ = 72
fmt$ = 80
ret$ = 88
buf$ = 96
tup$ = 136
tt$63921 = 144
err$63962 = 152
self$ = 176
args$ = 184
time_strftime PROC					; COMDAT

; 560  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 561  :     PyObject *tup = NULL;

  00011	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tup$[rsp], 0

; 562  :     struct tm buf;
; 563  :     const time_char *fmt;
; 564  : #ifdef HAVE_WCSFTIME
; 565  :     wchar_t *format;
; 566  : #else
; 567  :     PyObject *format;
; 568  : #endif
; 569  :     PyObject *format_arg;
; 570  :     size_t fmtlen, buflen;
; 571  :     time_char *outbuf = NULL;

  0001d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR outbuf$[rsp], 0

; 572  :     size_t i;
; 573  :     PyObject *ret = NULL;

  00026	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR ret$[rsp], 0

; 574  : 
; 575  :     memset((void *) &buf, '\0', sizeof(buf));

  0002f	41 b8 24 00 00
	00		 mov	 r8d, 36			; 00000024H
  00035	33 d2		 xor	 edx, edx
  00037	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0003c	e8 00 00 00 00	 call	 memset

; 576  : 
; 577  :     /* Will always expect a unicode string to be passed as format.
; 578  :        Given that there's no str type anymore in py3k this seems safe.
; 579  :     */
; 580  :     if (!PyArg_ParseTuple(args, "U|O:strftime", &format_arg, &tup))

  00041	4c 8d 8c 24 88
	00 00 00	 lea	 r9, QWORD PTR tup$[rsp]
  00049	4c 8d 44 24 40	 lea	 r8, QWORD PTR format_arg$[rsp]
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@KJJIHKJK@U?$HMO?3strftime?$AA@
  00055	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005d	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00062	85 c0		 test	 eax, eax
  00064	75 07		 jne	 SHORT $LN26@time_strft

; 581  :         return NULL;

  00066	33 c0		 xor	 eax, eax
  00068	e9 1b 03 00 00	 jmp	 $LN27@time_strft
$LN26@time_strft:

; 582  : 
; 583  :     if (tup == NULL) {

  0006d	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR tup$[rsp], 0
  00076	75 2f		 jne	 SHORT $LN25@time_strft

; 584  :         time_t tt = time(NULL);

  00078	33 c9		 xor	 ecx, ecx
  0007a	e8 00 00 00 00	 call	 time
  0007f	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tt$63921[rsp], rax

; 585  :         if (pylocaltime(&tt, &buf) == -1)

  00087	48 8d 54 24 60	 lea	 rdx, QWORD PTR buf$[rsp]
  0008c	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR tt$63921[rsp]
  00094	e8 00 00 00 00	 call	 pylocaltime
  00099	83 f8 ff	 cmp	 eax, -1
  0009c	75 07		 jne	 SHORT $LN24@time_strft

; 586  :             return NULL;

  0009e	33 c0		 xor	 eax, eax
  000a0	e9 e3 02 00 00	 jmp	 $LN27@time_strft
$LN24@time_strft:

; 587  :     }
; 588  :     else if (!gettmarg(tup, &buf) || !checktm(&buf))

  000a5	eb 2b		 jmp	 SHORT $LN23@time_strft
$LN25@time_strft:
  000a7	48 8d 54 24 60	 lea	 rdx, QWORD PTR buf$[rsp]
  000ac	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tup$[rsp]
  000b4	e8 00 00 00 00	 call	 gettmarg
  000b9	85 c0		 test	 eax, eax
  000bb	74 0e		 je	 SHORT $LN21@time_strft
  000bd	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  000c2	e8 00 00 00 00	 call	 checktm
  000c7	85 c0		 test	 eax, eax
  000c9	75 07		 jne	 SHORT $LN22@time_strft
$LN21@time_strft:

; 589  :         return NULL;

  000cb	33 c0		 xor	 eax, eax
  000cd	e9 b6 02 00 00	 jmp	 $LN27@time_strft
$LN22@time_strft:
$LN23@time_strft:

; 590  : 
; 591  : #if defined(_MSC_VER) || defined(sun) || defined(_AIX)
; 592  :     if (buf.tm_year + 1900 < 1 || 9999 < buf.tm_year + 1900) {

  000d2	8b 44 24 74	 mov	 eax, DWORD PTR buf$[rsp+20]
  000d6	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  000db	83 f8 01	 cmp	 eax, 1
  000de	7c 10		 jl	 SHORT $LN19@time_strft
  000e0	8b 44 24 74	 mov	 eax, DWORD PTR buf$[rsp+20]
  000e4	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  000e9	3d 0f 27 00 00	 cmp	 eax, 9999		; 0000270fH
  000ee	7e 1a		 jle	 SHORT $LN20@time_strft
$LN19@time_strft:

; 593  :         PyErr_SetString(PyExc_ValueError,
; 594  :                         "strftime() requires year in [1; 9999]");

  000f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@HINAEAFH@strftime?$CI?$CJ?5requires?5year?5in?5?$FL1?$DL?5@
  000f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000fe	e8 00 00 00 00	 call	 PyErr_SetString

; 595  :         return NULL;

  00103	33 c0		 xor	 eax, eax
  00105	e9 7e 02 00 00	 jmp	 $LN27@time_strft
$LN20@time_strft:

; 596  :     }
; 597  : #endif
; 598  : 
; 599  :     /* Normalize tm_isdst just in case someone foolishly implements %Z
; 600  :        based on the assumption that tm_isdst falls within the range of
; 601  :        [-1, 1] */
; 602  :     if (buf.tm_isdst < -1)

  0010a	83 bc 24 80 00
	00 00 ff	 cmp	 DWORD PTR buf$[rsp+32], -1
  00112	7d 0d		 jge	 SHORT $LN18@time_strft

; 603  :         buf.tm_isdst = -1;

  00114	c7 84 24 80 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR buf$[rsp+32], -1
  0011f	eb 15		 jmp	 SHORT $LN17@time_strft
$LN18@time_strft:

; 604  :     else if (buf.tm_isdst > 1)

  00121	83 bc 24 80 00
	00 00 01	 cmp	 DWORD PTR buf$[rsp+32], 1
  00129	7e 0b		 jle	 SHORT $LN16@time_strft

; 605  :         buf.tm_isdst = 1;

  0012b	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR buf$[rsp+32], 1
$LN16@time_strft:
$LN17@time_strft:

; 606  : 
; 607  : #ifdef HAVE_WCSFTIME
; 608  :     format = PyUnicode_AsWideCharString(format_arg, NULL);
; 609  :     if (format == NULL)
; 610  :         return NULL;
; 611  :     fmt = format;
; 612  : #else
; 613  :     /* Convert the unicode string to an ascii one */
; 614  :     format = PyUnicode_EncodeLocale(format_arg, "surrogateescape");

  00136	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@GMJLDMKP@surrogateescape?$AA@
  0013d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR format_arg$[rsp]
  00142	e8 00 00 00 00	 call	 PyUnicode_EncodeLocale
  00147	48 89 44 24 48	 mov	 QWORD PTR format$[rsp], rax

; 615  :     if (format == NULL)

  0014c	48 83 7c 24 48
	00		 cmp	 QWORD PTR format$[rsp], 0
  00152	75 07		 jne	 SHORT $LN15@time_strft

; 616  :         return NULL;

  00154	33 c0		 xor	 eax, eax
  00156	e9 2d 02 00 00	 jmp	 $LN27@time_strft
$LN15@time_strft:

; 617  :     fmt = PyBytes_AS_STRING(format);

  0015b	48 8b 44 24 48	 mov	 rax, QWORD PTR format$[rsp]
  00160	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00164	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0016a	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0016f	85 c0		 test	 eax, eax
  00171	75 1c		 jne	 SHORT $LN29@time_strft
  00173	41 b8 69 02 00
	00		 mov	 r8d, 617		; 00000269H
  00179	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@HKMBAFBM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAt?$AAi?$AAm?$AAe?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KFGFCBJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$CJ?$AA?$AA@
  00187	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018d	33 c0		 xor	 eax, eax
$LN29@time_strft:
  0018f	48 8b 44 24 48	 mov	 rax, QWORD PTR format$[rsp]
  00194	48 83 c0 78	 add	 rax, 120		; 00000078H
  00198	48 89 44 24 50	 mov	 QWORD PTR fmt$[rsp], rax

; 618  : #endif
; 619  : 
; 620  : #if defined(MS_WINDOWS) && !defined(HAVE_WCSFTIME)
; 621  :     /* check that the format string contains only valid directives */
; 622  :     for(outbuf = strchr(fmt, '%');
; 623  :         outbuf != NULL;
; 624  :         outbuf = strchr(outbuf+2, '%'))

  0019d	ba 25 00 00 00	 mov	 edx, 37			; 00000025H
  001a2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fmt$[rsp]
  001a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  001ad	48 89 44 24 20	 mov	 QWORD PTR outbuf$[rsp], rax
  001b2	eb 1c		 jmp	 SHORT $LN14@time_strft
$LN13@time_strft:
  001b4	48 8b 44 24 20	 mov	 rax, QWORD PTR outbuf$[rsp]
  001b9	48 83 c0 02	 add	 rax, 2
  001bd	ba 25 00 00 00	 mov	 edx, 37			; 00000025H
  001c2	48 8b c8	 mov	 rcx, rax
  001c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  001cb	48 89 44 24 20	 mov	 QWORD PTR outbuf$[rsp], rax
$LN14@time_strft:
  001d0	48 83 7c 24 20
	00		 cmp	 QWORD PTR outbuf$[rsp], 0
  001d6	0f 84 a7 00 00
	00		 je	 $LN12@time_strft

; 625  :     {
; 626  :         if (outbuf[1]=='#')

  001dc	48 8b 44 24 20	 mov	 rax, QWORD PTR outbuf$[rsp]
  001e1	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  001e5	83 f8 23	 cmp	 eax, 35			; 00000023H
  001e8	75 0d		 jne	 SHORT $LN11@time_strft

; 627  :             ++outbuf; /* not documented by python, */

  001ea	48 8b 44 24 20	 mov	 rax, QWORD PTR outbuf$[rsp]
  001ef	48 ff c0	 inc	 rax
  001f2	48 89 44 24 20	 mov	 QWORD PTR outbuf$[rsp], rax
$LN11@time_strft:

; 628  :         if (outbuf[1]=='\0' ||
; 629  :             !strchr("aAbBcdHIjmMpSUwWxXyYzZ%", outbuf[1]))

  001f7	48 8b 44 24 20	 mov	 rax, QWORD PTR outbuf$[rsp]
  001fc	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  00200	85 c0		 test	 eax, eax
  00202	74 1d		 je	 SHORT $LN9@time_strft
  00204	48 8b 44 24 20	 mov	 rax, QWORD PTR outbuf$[rsp]
  00209	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  0020d	8b d0		 mov	 edx, eax
  0020f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@PAENNBAG@aAbBcdHIjmMpSUwWxXyYzZ?$CF?$AA@
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0021c	48 85 c0	 test	 rax, rax
  0021f	75 24		 jne	 SHORT $LN10@time_strft
$LN9@time_strft:

; 630  :         {
; 631  :             PyErr_SetString(PyExc_ValueError, "Invalid format string");

  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HMAFAPHD@Invalid?5format?5string?$AA@
  00228	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0022f	e8 00 00 00 00	 call	 PyErr_SetString

; 632  :             Py_DECREF(format);

  00234	48 8b 4c 24 48	 mov	 rcx, QWORD PTR format$[rsp]
  00239	e8 00 00 00 00	 call	 _Py_DecRef

; 633  :             return NULL;

  0023e	33 c0		 xor	 eax, eax
  00240	e9 43 01 00 00	 jmp	 $LN27@time_strft
$LN10@time_strft:

; 634  :         }
; 635  :         if ((outbuf[1] == 'y') && buf.tm_year < 0)

  00245	48 8b 44 24 20	 mov	 rax, QWORD PTR outbuf$[rsp]
  0024a	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  0024e	83 f8 79	 cmp	 eax, 121		; 00000079H
  00251	75 2b		 jne	 SHORT $LN8@time_strft
  00253	83 7c 24 74 00	 cmp	 DWORD PTR buf$[rsp+20], 0
  00258	7d 24		 jge	 SHORT $LN8@time_strft

; 636  :         {
; 637  :             PyErr_SetString(PyExc_ValueError,
; 638  :                         "format %y requires year >= 1900 on Windows");

  0025a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@FIDKHLFK@format?5?$CFy?5requires?5year?5?$DO?$DN?51900?5@
  00261	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00268	e8 00 00 00 00	 call	 PyErr_SetString

; 639  :             Py_DECREF(format);

  0026d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR format$[rsp]
  00272	e8 00 00 00 00	 call	 _Py_DecRef

; 640  :             return NULL;

  00277	33 c0		 xor	 eax, eax
  00279	e9 0a 01 00 00	 jmp	 $LN27@time_strft
$LN8@time_strft:

; 641  :         }
; 642  :     }

  0027e	e9 31 ff ff ff	 jmp	 $LN13@time_strft
$LN12@time_strft:

; 643  : #endif
; 644  : 
; 645  :     fmtlen = time_strlen(fmt);

  00283	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fmt$[rsp]
  00288	e8 00 00 00 00	 call	 strlen
  0028d	48 89 44 24 30	 mov	 QWORD PTR fmtlen$[rsp], rax

; 646  : 
; 647  :     /* I hate these functions that presume you know how big the output
; 648  :      * will be ahead of time...
; 649  :      */
; 650  :     for (i = 1024; ; i += i) {

  00292	48 c7 44 24 38
	00 04 00 00	 mov	 QWORD PTR i$[rsp], 1024	; 00000400H
  0029b	eb 15		 jmp	 SHORT $LN7@time_strft
$LN6@time_strft:
  0029d	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  002a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  002a7	48 03 c8	 add	 rcx, rax
  002aa	48 8b c1	 mov	 rax, rcx
  002ad	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN7@time_strft:

; 651  : #if defined _MSC_VER && _MSC_VER >= 1400 && defined(__STDC_SECURE_LIB__)
; 652  :         int err;
; 653  : #endif
; 654  :         outbuf = (time_char *)PyMem_Malloc(i*sizeof(time_char));

  002b2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  002b7	e8 00 00 00 00	 call	 PyMem_Malloc
  002bc	48 89 44 24 20	 mov	 QWORD PTR outbuf$[rsp], rax

; 655  :         if (outbuf == NULL) {

  002c1	48 83 7c 24 20
	00		 cmp	 QWORD PTR outbuf$[rsp], 0
  002c7	75 0a		 jne	 SHORT $LN4@time_strft

; 656  :             PyErr_NoMemory();

  002c9	e8 00 00 00 00	 call	 PyErr_NoMemory

; 657  :             break;

  002ce	e9 a6 00 00 00	 jmp	 $LN5@time_strft
$LN4@time_strft:

; 658  :         }
; 659  :         buflen = format_time(outbuf, i, fmt, &buf);

  002d3	4c 8d 4c 24 60	 lea	 r9, QWORD PTR buf$[rsp]
  002d8	4c 8b 44 24 50	 mov	 r8, QWORD PTR fmt$[rsp]
  002dd	48 8b 54 24 38	 mov	 rdx, QWORD PTR i$[rsp]
  002e2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR outbuf$[rsp]
  002e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strftime
  002ed	48 89 44 24 28	 mov	 QWORD PTR buflen$[rsp], rax

; 660  : #if defined _MSC_VER && _MSC_VER >= 1400 && defined(__STDC_SECURE_LIB__)
; 661  :         err = errno;

  002f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002f8	8b 00		 mov	 eax, DWORD PTR [rax]
  002fa	89 84 24 98 00
	00 00		 mov	 DWORD PTR err$63962[rsp], eax

; 662  : #endif
; 663  :         if (buflen > 0 || i >= 256 * fmtlen) {

  00301	48 83 7c 24 28
	00		 cmp	 QWORD PTR buflen$[rsp], 0
  00307	77 13		 ja	 SHORT $LN2@time_strft
  00309	48 8b 44 24 30	 mov	 rax, QWORD PTR fmtlen$[rsp]
  0030e	48 69 c0 00 01
	00 00		 imul	 rax, 256		; 00000100H
  00315	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  0031a	72 27		 jb	 SHORT $LN3@time_strft
$LN2@time_strft:

; 664  :             /* If the buffer is 256 times as long as the format,
; 665  :                it's probably not failing for lack of room!
; 666  :                More likely, the format yields an empty result,
; 667  :                e.g. an empty format, or %Z when the timezone
; 668  :                is unknown. */
; 669  : #ifdef HAVE_WCSFTIME
; 670  :             ret = PyUnicode_FromWideChar(outbuf, buflen);
; 671  : #else
; 672  :             ret = PyUnicode_DecodeLocaleAndSize(outbuf, buflen,
; 673  :                                                 "surrogateescape");

  0031c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@GMJLDMKP@surrogateescape?$AA@
  00323	48 8b 54 24 28	 mov	 rdx, QWORD PTR buflen$[rsp]
  00328	48 8b 4c 24 20	 mov	 rcx, QWORD PTR outbuf$[rsp]
  0032d	e8 00 00 00 00	 call	 PyUnicode_DecodeLocaleAndSize
  00332	48 89 44 24 58	 mov	 QWORD PTR ret$[rsp], rax

; 674  : #endif
; 675  :             PyMem_Free(outbuf);

  00337	48 8b 4c 24 20	 mov	 rcx, QWORD PTR outbuf$[rsp]
  0033c	e8 00 00 00 00	 call	 PyMem_Free

; 676  :             break;

  00341	eb 36		 jmp	 SHORT $LN5@time_strft
$LN3@time_strft:

; 677  :         }
; 678  :         PyMem_Free(outbuf);

  00343	48 8b 4c 24 20	 mov	 rcx, QWORD PTR outbuf$[rsp]
  00348	e8 00 00 00 00	 call	 PyMem_Free

; 679  : #if defined _MSC_VER && _MSC_VER >= 1400 && defined(__STDC_SECURE_LIB__)
; 680  :         /* VisualStudio .NET 2005 does this properly */
; 681  :         if (buflen == 0 && err == EINVAL) {

  0034d	48 83 7c 24 28
	00		 cmp	 QWORD PTR buflen$[rsp], 0
  00353	75 1f		 jne	 SHORT $LN1@time_strft
  00355	83 bc 24 98 00
	00 00 16	 cmp	 DWORD PTR err$63962[rsp], 22
  0035d	75 15		 jne	 SHORT $LN1@time_strft

; 682  :             PyErr_SetString(PyExc_ValueError, "Invalid format string");

  0035f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HMAFAPHD@Invalid?5format?5string?$AA@
  00366	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0036d	e8 00 00 00 00	 call	 PyErr_SetString

; 683  :             break;

  00372	eb 05		 jmp	 SHORT $LN5@time_strft
$LN1@time_strft:

; 684  :         }
; 685  : #endif
; 686  :     }

  00374	e9 24 ff ff ff	 jmp	 $LN6@time_strft
$LN5@time_strft:

; 687  : #ifdef HAVE_WCSFTIME
; 688  :     PyMem_Free(format);
; 689  : #else
; 690  :     Py_DECREF(format);

  00379	48 8b 4c 24 48	 mov	 rcx, QWORD PTR format$[rsp]
  0037e	e8 00 00 00 00	 call	 _Py_DecRef

; 691  : #endif
; 692  :     return ret;

  00383	48 8b 44 24 58	 mov	 rax, QWORD PTR ret$[rsp]
$LN27@time_strft:

; 693  : }

  00388	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0038f	c3		 ret	 0
time_strftime ENDP
_TEXT	ENDS
PUBLIC	??_C@_09BOADOOAM@iiiiiiiii?$AA@			; `string'
PUBLIC	??_C@_0CH@CHMFHGAK@Tuple?5or?5struct_time?5argument?5re@ ; `string'
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$gettmarg DD imagerel gettmarg
	DD	imagerel gettmarg+363
	DD	imagerel $unwind$gettmarg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gettmarg DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_09BOADOOAM@iiiiiiiii?$AA@
CONST	SEGMENT
??_C@_09BOADOOAM@iiiiiiiii?$AA@ DB 'iiiiiiiii', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CHMFHGAK@Tuple?5or?5struct_time?5argument?5re@
CONST	SEGMENT
??_C@_0CH@CHMFHGAK@Tuple?5or?5struct_time?5argument?5re@ DB 'Tuple or str'
	DB	'uct_time argument required', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gettmarg
_TEXT	SEGMENT
y$ = 96
args$ = 128
p$ = 136
gettmarg PROC						; COMDAT

; 438  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 439  :     int y;
; 440  : 
; 441  :     memset((void *) p, '\0', sizeof(struct tm));

  0000e	41 b8 24 00 00
	00		 mov	 r8d, 36			; 00000024H
  00014	33 d2		 xor	 edx, edx
  00016	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0001e	e8 00 00 00 00	 call	 memset

; 442  : 
; 443  :     if (!PyTuple_Check(args)) {

  00023	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  0002b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00035	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0003a	85 c0		 test	 eax, eax
  0003c	75 1a		 jne	 SHORT $LN2@gettmarg

; 444  :         PyErr_SetString(PyExc_TypeError,
; 445  :                         "Tuple or struct_time argument required");

  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@CHMFHGAK@Tuple?5or?5struct_time?5argument?5re@
  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0004c	e8 00 00 00 00	 call	 PyErr_SetString

; 446  :         return 0;

  00051	33 c0		 xor	 eax, eax
  00053	e9 0e 01 00 00	 jmp	 $LN3@gettmarg
$LN2@gettmarg:

; 447  :     }
; 448  : 
; 449  :     if (!PyArg_ParseTuple(args, "iiiiiiiii",
; 450  :                           &y, &p->tm_mon, &p->tm_mday,
; 451  :                           &p->tm_hour, &p->tm_min, &p->tm_sec,
; 452  :                           &p->tm_wday, &p->tm_yday, &p->tm_isdst))

  00058	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00060	48 83 c0 20	 add	 rax, 32			; 00000020H
  00064	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0006c	48 83 c1 1c	 add	 rcx, 28
  00070	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00078	48 83 c2 18	 add	 rdx, 24
  0007c	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR p$[rsp]
  00084	49 83 c0 04	 add	 r8, 4
  00088	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR p$[rsp]
  00090	49 83 c1 08	 add	 r9, 8
  00094	4c 8b 94 24 88
	00 00 00	 mov	 r10, QWORD PTR p$[rsp]
  0009c	49 83 c2 0c	 add	 r10, 12
  000a0	4c 8b 9c 24 88
	00 00 00	 mov	 r11, QWORD PTR p$[rsp]
  000a8	49 83 c3 10	 add	 r11, 16
  000ac	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000b1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000b6	48 89 54 24 40	 mov	 QWORD PTR [rsp+64], rdx
  000bb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  000c3	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000c8	4c 89 44 24 30	 mov	 QWORD PTR [rsp+48], r8
  000cd	4c 89 4c 24 28	 mov	 QWORD PTR [rsp+40], r9
  000d2	4c 89 54 24 20	 mov	 QWORD PTR [rsp+32], r10
  000d7	4d 8b cb	 mov	 r9, r11
  000da	4c 8d 44 24 60	 lea	 r8, QWORD PTR y$[rsp]
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09BOADOOAM@iiiiiiiii?$AA@
  000e6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000ee	e8 00 00 00 00	 call	 PyArg_ParseTuple
  000f3	85 c0		 test	 eax, eax
  000f5	75 04		 jne	 SHORT $LN1@gettmarg

; 453  :         return 0;

  000f7	33 c0		 xor	 eax, eax
  000f9	eb 6b		 jmp	 SHORT $LN3@gettmarg
$LN1@gettmarg:

; 454  :     p->tm_year = y - 1900;

  000fb	8b 44 24 60	 mov	 eax, DWORD PTR y$[rsp]
  000ff	2d 6c 07 00 00	 sub	 eax, 1900		; 0000076cH
  00104	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0010c	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 455  :     p->tm_mon--;

  0010f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00117	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0011a	ff c8		 dec	 eax
  0011c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00124	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 456  :     p->tm_wday = (p->tm_wday + 1) % 7;

  00127	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0012f	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00132	ff c0		 inc	 eax
  00134	99		 cdq
  00135	b9 07 00 00 00	 mov	 ecx, 7
  0013a	f7 f9		 idiv	 ecx
  0013c	8b c2		 mov	 eax, edx
  0013e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00146	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 457  :     p->tm_yday--;

  00149	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00151	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  00154	ff c8		 dec	 eax
  00156	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0015e	89 41 1c	 mov	 DWORD PTR [rcx+28], eax

; 458  : #ifdef HAVE_STRUCT_TM_TM_ZONE
; 459  :     if (Py_TYPE(args) == &StructTimeType) {
; 460  :         PyObject *item;
; 461  :         item = PyTuple_GET_ITEM(args, 9);
; 462  :         p->tm_zone = item == Py_None ? NULL : _PyUnicode_AsString(item);
; 463  :         item = PyTuple_GET_ITEM(args, 10);
; 464  :         p->tm_gmtoff = item == Py_None ? 0 : PyLong_AsLong(item);
; 465  :         if (PyErr_Occurred())
; 466  :             return 0;
; 467  :     }
; 468  : #endif /* HAVE_STRUCT_TM_TM_ZONE */
; 469  :     return 1;

  00161	b8 01 00 00 00	 mov	 eax, 1
$LN3@gettmarg:

; 470  : }

  00166	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0016a	c3		 ret	 0
gettmarg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@OIPNFGCH@day?5of?5year?5out?5of?5range?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BHPBIAAJ@day?5of?5week?5out?5of?5range?$AA@ ; `string'
PUBLIC	??_C@_0BF@JHEAABND@seconds?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0BE@KHLKCEJA@minute?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0BC@LJOEHKGE@hour?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0BK@OOCFANMD@day?5of?5month?5out?5of?5range?$AA@ ; `string'
PUBLIC	??_C@_0BD@LDNNMEKK@month?5out?5of?5range?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$checktm DD imagerel checktm
	DD	imagerel checktm+411
	DD	imagerel $unwind$checktm
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$checktm DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BJ@OIPNFGCH@day?5of?5year?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BJ@OIPNFGCH@day?5of?5year?5out?5of?5range?$AA@ DB 'day of year out'
	DB	' of range', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BHPBIAAJ@day?5of?5week?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BJ@BHPBIAAJ@day?5of?5week?5out?5of?5range?$AA@ DB 'day of week out'
	DB	' of range', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JHEAABND@seconds?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BF@JHEAABND@seconds?5out?5of?5range?$AA@ DB 'seconds out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KHLKCEJA@minute?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BE@KHLKCEJA@minute?5out?5of?5range?$AA@ DB 'minute out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LJOEHKGE@hour?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BC@LJOEHKGE@hour?5out?5of?5range?$AA@ DB 'hour out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OOCFANMD@day?5of?5month?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BK@OOCFANMD@day?5of?5month?5out?5of?5range?$AA@ DB 'day of month o'
	DB	'ut of range', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LDNNMEKK@month?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BD@LDNNMEKK@month?5out?5of?5range?$AA@ DB 'month out of range', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT checktm
_TEXT	SEGMENT
buf$ = 48
checktm	PROC						; COMDAT

; 478  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 479  :     /* Checks added to make sure strftime() and asctime() does not crash Python by
; 480  :        indexing blindly into some array for a textual representation
; 481  :        by some bad index (fixes bug #897625 and #6608).
; 482  : 
; 483  :        Also support values of zero from Python code for arguments in which
; 484  :        that is out of range by forcing that value to the lowest value that
; 485  :        is valid (fixed bug #1520914).
; 486  : 
; 487  :        Valid ranges based on what is allowed in struct tm:
; 488  : 
; 489  :        - tm_year: [0, max(int)] (1)
; 490  :        - tm_mon: [0, 11] (2)
; 491  :        - tm_mday: [1, 31]
; 492  :        - tm_hour: [0, 23]
; 493  :        - tm_min: [0, 59]
; 494  :        - tm_sec: [0, 60]
; 495  :        - tm_wday: [0, 6] (1)
; 496  :        - tm_yday: [0, 365] (2)
; 497  :        - tm_isdst: [-max(int), max(int)]
; 498  : 
; 499  :        (1) gettmarg() handles bounds-checking.
; 500  :        (2) Python's acceptable range is one greater than the range in C,
; 501  :        thus need to check against automatic decrement by gettmarg().
; 502  :     */
; 503  :     if (buf->tm_mon == -1)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  0000e	83 78 10 ff	 cmp	 DWORD PTR [rax+16], -1
  00012	75 0e		 jne	 SHORT $LN19@checktm

; 504  :         buf->tm_mon = 0;

  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00019	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0
  00020	eb 30		 jmp	 SHORT $LN18@checktm
$LN19@checktm:

; 505  :     else if (buf->tm_mon < 0 || buf->tm_mon > 11) {

  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00027	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  0002b	7c 0b		 jl	 SHORT $LN16@checktm
  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00032	83 78 10 0b	 cmp	 DWORD PTR [rax+16], 11
  00036	7e 1a		 jle	 SHORT $LN17@checktm
$LN16@checktm:

; 506  :         PyErr_SetString(PyExc_ValueError, "month out of range");

  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@LDNNMEKK@month?5out?5of?5range?$AA@
  0003f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00046	e8 00 00 00 00	 call	 PyErr_SetString

; 507  :         return 0;

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 44 01 00 00	 jmp	 $LN20@checktm
$LN17@checktm:
$LN18@checktm:

; 508  :     }
; 509  :     if (buf->tm_mday == 0)

  00052	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00057	83 78 0c 00	 cmp	 DWORD PTR [rax+12], 0
  0005b	75 0e		 jne	 SHORT $LN15@checktm

; 510  :         buf->tm_mday = 1;

  0005d	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00062	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [rax+12], 1
  00069	eb 30		 jmp	 SHORT $LN14@checktm
$LN15@checktm:

; 511  :     else if (buf->tm_mday < 0 || buf->tm_mday > 31) {

  0006b	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00070	83 78 0c 00	 cmp	 DWORD PTR [rax+12], 0
  00074	7c 0b		 jl	 SHORT $LN12@checktm
  00076	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  0007b	83 78 0c 1f	 cmp	 DWORD PTR [rax+12], 31
  0007f	7e 1a		 jle	 SHORT $LN13@checktm
$LN12@checktm:

; 512  :         PyErr_SetString(PyExc_ValueError, "day of month out of range");

  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@OOCFANMD@day?5of?5month?5out?5of?5range?$AA@
  00088	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0008f	e8 00 00 00 00	 call	 PyErr_SetString

; 513  :         return 0;

  00094	33 c0		 xor	 eax, eax
  00096	e9 fb 00 00 00	 jmp	 $LN20@checktm
$LN13@checktm:
$LN14@checktm:

; 514  :     }
; 515  :     if (buf->tm_hour < 0 || buf->tm_hour > 23) {

  0009b	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  000a0	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  000a4	7c 0b		 jl	 SHORT $LN10@checktm
  000a6	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  000ab	83 78 08 17	 cmp	 DWORD PTR [rax+8], 23
  000af	7e 1a		 jle	 SHORT $LN11@checktm
$LN10@checktm:

; 516  :         PyErr_SetString(PyExc_ValueError, "hour out of range");

  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LJOEHKGE@hour?5out?5of?5range?$AA@
  000b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000bf	e8 00 00 00 00	 call	 PyErr_SetString

; 517  :         return 0;

  000c4	33 c0		 xor	 eax, eax
  000c6	e9 cb 00 00 00	 jmp	 $LN20@checktm
$LN11@checktm:

; 518  :     }
; 519  :     if (buf->tm_min < 0 || buf->tm_min > 59) {

  000cb	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  000d0	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  000d4	7c 0b		 jl	 SHORT $LN8@checktm
  000d6	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  000db	83 78 04 3b	 cmp	 DWORD PTR [rax+4], 59	; 0000003bH
  000df	7e 1a		 jle	 SHORT $LN9@checktm
$LN8@checktm:

; 520  :         PyErr_SetString(PyExc_ValueError, "minute out of range");

  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@KHLKCEJA@minute?5out?5of?5range?$AA@
  000e8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000ef	e8 00 00 00 00	 call	 PyErr_SetString

; 521  :         return 0;

  000f4	33 c0		 xor	 eax, eax
  000f6	e9 9b 00 00 00	 jmp	 $LN20@checktm
$LN9@checktm:

; 522  :     }
; 523  :     if (buf->tm_sec < 0 || buf->tm_sec > 61) {

  000fb	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00100	83 38 00	 cmp	 DWORD PTR [rax], 0
  00103	7c 0a		 jl	 SHORT $LN6@checktm
  00105	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  0010a	83 38 3d	 cmp	 DWORD PTR [rax], 61	; 0000003dH
  0010d	7e 17		 jle	 SHORT $LN7@checktm
$LN6@checktm:

; 524  :         PyErr_SetString(PyExc_ValueError, "seconds out of range");

  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@JHEAABND@seconds?5out?5of?5range?$AA@
  00116	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0011d	e8 00 00 00 00	 call	 PyErr_SetString

; 525  :         return 0;

  00122	33 c0		 xor	 eax, eax
  00124	eb 70		 jmp	 SHORT $LN20@checktm
$LN7@checktm:

; 526  :     }
; 527  :     /* tm_wday does not need checking of its upper-bound since taking
; 528  :     ``% 7`` in gettmarg() automatically restricts the range. */
; 529  :     if (buf->tm_wday < 0) {

  00126	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  0012b	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  0012f	7d 17		 jge	 SHORT $LN5@checktm

; 530  :         PyErr_SetString(PyExc_ValueError, "day of week out of range");

  00131	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@BHPBIAAJ@day?5of?5week?5out?5of?5range?$AA@
  00138	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0013f	e8 00 00 00 00	 call	 PyErr_SetString

; 531  :         return 0;

  00144	33 c0		 xor	 eax, eax
  00146	eb 4e		 jmp	 SHORT $LN20@checktm
$LN5@checktm:

; 532  :     }
; 533  :     if (buf->tm_yday == -1)

  00148	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  0014d	83 78 1c ff	 cmp	 DWORD PTR [rax+28], -1
  00151	75 0e		 jne	 SHORT $LN4@checktm

; 534  :         buf->tm_yday = 0;

  00153	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00158	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [rax+28], 0
  0015f	eb 30		 jmp	 SHORT $LN3@checktm
$LN4@checktm:

; 535  :     else if (buf->tm_yday < 0 || buf->tm_yday > 365) {

  00161	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00166	83 78 1c 00	 cmp	 DWORD PTR [rax+28], 0
  0016a	7c 0e		 jl	 SHORT $LN1@checktm
  0016c	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  00171	81 78 1c 6d 01
	00 00		 cmp	 DWORD PTR [rax+28], 365	; 0000016dH
  00178	7e 17		 jle	 SHORT $LN2@checktm
$LN1@checktm:

; 536  :         PyErr_SetString(PyExc_ValueError, "day of year out of range");

  0017a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@OIPNFGCH@day?5of?5year?5out?5of?5range?$AA@
  00181	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00188	e8 00 00 00 00	 call	 PyErr_SetString

; 537  :         return 0;

  0018d	33 c0		 xor	 eax, eax
  0018f	eb 05		 jmp	 SHORT $LN20@checktm
$LN2@checktm:
$LN3@checktm:

; 538  :     }
; 539  :     return 1;

  00191	b8 01 00 00 00	 mov	 eax, 1
$LN20@checktm:

; 540  : }

  00196	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0019a	c3		 ret	 0
checktm	ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_09NHHCNPOC@_strptime?$AA@			; `string'
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyImport_ImportModuleNoBlock:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$time_strptime DD imagerel time_strptime
	DD	imagerel time_strptime+119
	DD	imagerel $unwind$time_strptime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_strptime DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09NHHCNPOC@_strptime?$AA@
CONST	SEGMENT
??_C@_09NHHCNPOC@_strptime?$AA@ DB '_strptime', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT time_strptime
_TEXT	SEGMENT
strptime_result$ = 32
strptime_module$ = 40
self$ = 64
args$ = 72
time_strptime PROC					; COMDAT

; 708  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 709  :     PyObject *strptime_module = PyImport_ImportModuleNoBlock("_strptime");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NHHCNPOC@_strptime?$AA@
  00015	e8 00 00 00 00	 call	 PyImport_ImportModuleNoBlock
  0001a	48 89 44 24 28	 mov	 QWORD PTR strptime_module$[rsp], rax

; 710  :     PyObject *strptime_result;
; 711  :     _Py_IDENTIFIER(_strptime_time);
; 712  : 
; 713  :     if (!strptime_module)

  0001f	48 83 7c 24 28
	00		 cmp	 QWORD PTR strptime_module$[rsp], 0
  00025	75 04		 jne	 SHORT $LN1@time_strpt

; 714  :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	eb 47		 jmp	 SHORT $LN2@time_strpt
$LN1@time_strpt:

; 715  :     strptime_result = _PyObject_CallMethodId(strptime_module,
; 716  :                                              &PyId__strptime_time, "O", args);

  0002b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__strptime_time@?1??time_strptime@@9@9
  00030	8b c0		 mov	 eax, eax
  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00038	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00041	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00045	4c 8b 4c 24 48	 mov	 r9, QWORD PTR args$[rsp]
  0004a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00051	48 8b d0	 mov	 rdx, rax
  00054	48 8b 4c 24 28	 mov	 rcx, QWORD PTR strptime_module$[rsp]
  00059	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0005e	48 89 44 24 20	 mov	 QWORD PTR strptime_result$[rsp], rax

; 717  :     Py_DECREF(strptime_module);

  00063	48 8b 4c 24 28	 mov	 rcx, QWORD PTR strptime_module$[rsp]
  00068	e8 00 00 00 00	 call	 _Py_DecRef

; 718  :     return strptime_result;

  0006d	48 8b 44 24 20	 mov	 rax, QWORD PTR strptime_result$[rsp]
$LN2@time_strpt:

; 719  : }

  00072	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00076	c3		 ret	 0
time_strptime ENDP
_TEXT	ENDS
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$time_asctime DD imagerel time_asctime
	DD	imagerel time_asctime+168
	DD	imagerel $unwind$time_asctime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_asctime DD 010e01H
	DD	0e20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT time_asctime
_TEXT	SEGMENT
buf$ = 48
tup$ = 88
tt$64012 = 96
self$ = 128
args$ = 136
time_asctime PROC					; COMDAT

; 751  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 752  :     PyObject *tup = NULL;

  0000e	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tup$[rsp], 0

; 753  :     struct tm buf;
; 754  : 
; 755  :     if (!PyArg_UnpackTuple(args, "asctime", 0, 1, &tup))

  00017	48 8d 44 24 58	 lea	 rax, QWORD PTR tup$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00021	41 b9 01 00 00
	00		 mov	 r9d, 1
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07MHIFAOOG@asctime?$AA@
  00031	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00039	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003e	85 c0		 test	 eax, eax
  00040	75 04		 jne	 SHORT $LN6@time_ascti

; 756  :         return NULL;

  00042	33 c0		 xor	 eax, eax
  00044	eb 5d		 jmp	 SHORT $LN7@time_ascti
$LN6@time_ascti:

; 757  :     if (tup == NULL) {

  00046	48 83 7c 24 58
	00		 cmp	 QWORD PTR tup$[rsp], 0
  0004c	75 26		 jne	 SHORT $LN5@time_ascti

; 758  :         time_t tt = time(NULL);

  0004e	33 c9		 xor	 ecx, ecx
  00050	e8 00 00 00 00	 call	 time
  00055	48 89 44 24 60	 mov	 QWORD PTR tt$64012[rsp], rax

; 759  :         if (pylocaltime(&tt, &buf) == -1)

  0005a	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  0005f	48 8d 4c 24 60	 lea	 rcx, QWORD PTR tt$64012[rsp]
  00064	e8 00 00 00 00	 call	 pylocaltime
  00069	83 f8 ff	 cmp	 eax, -1
  0006c	75 04		 jne	 SHORT $LN4@time_ascti

; 760  :             return NULL;

  0006e	33 c0		 xor	 eax, eax
  00070	eb 31		 jmp	 SHORT $LN7@time_ascti
$LN4@time_ascti:

; 761  : 
; 762  :     } else if (!gettmarg(tup, &buf) || !checktm(&buf))

  00072	eb 25		 jmp	 SHORT $LN3@time_ascti
$LN5@time_ascti:
  00074	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  00079	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tup$[rsp]
  0007e	e8 00 00 00 00	 call	 gettmarg
  00083	85 c0		 test	 eax, eax
  00085	74 0e		 je	 SHORT $LN1@time_ascti
  00087	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  0008c	e8 00 00 00 00	 call	 checktm
  00091	85 c0		 test	 eax, eax
  00093	75 04		 jne	 SHORT $LN2@time_ascti
$LN1@time_ascti:

; 763  :         return NULL;

  00095	33 c0		 xor	 eax, eax
  00097	eb 0a		 jmp	 SHORT $LN7@time_ascti
$LN2@time_ascti:
$LN3@time_ascti:

; 764  :     return _asctime(&buf);

  00099	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  0009e	e8 00 00 00 00	 call	 _asctime
$LN7@time_ascti:

; 765  : }

  000a3	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000a7	c3		 ret	 0
time_asctime ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@HJNEELDC@?$CFs?5?$CFs?$CF3d?5?$CF?42d?3?$CF?42d?3?$CF?42d?5?$CFd?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_asctime DD imagerel _asctime
	DD	imagerel _asctime+130
	DD	imagerel $unwind$_asctime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_asctime DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BL@HJNEELDC@?$CFs?5?$CFs?$CF3d?5?$CF?42d?3?$CF?42d?3?$CF?42d?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BL@HJNEELDC@?$CFs?5?$CFs?$CF3d?5?$CF?42d?3?$CF?42d?3?$CF?42d?5?$CFd?$AA@ DB '%'
	DB	's %s%3d %.2d:%.2d:%.2d %d', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _asctime
_TEXT	SEGMENT
timeptr$ = 80
_asctime PROC						; COMDAT

; 730  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 731  :     /* Inspired by Open Group reference implementation available at
; 732  :      * http://pubs.opengroup.org/onlinepubs/009695399/functions/asctime.html */
; 733  :     static char wday_name[7][4] = {
; 734  :         "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
; 735  :     };
; 736  :     static char mon_name[12][4] = {
; 737  :         "Jan", "Feb", "Mar", "Apr", "May", "Jun",
; 738  :         "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
; 739  :     };
; 740  :     return PyUnicode_FromFormat(
; 741  :         "%s %s%3d %.2d:%.2d:%.2d %d",
; 742  :         wday_name[timeptr->tm_wday],
; 743  :         mon_name[timeptr->tm_mon],
; 744  :         timeptr->tm_mday, timeptr->tm_hour,
; 745  :         timeptr->tm_min, timeptr->tm_sec,
; 746  :         1900 + timeptr->tm_year);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR timeptr$[rsp]
  0000e	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00011	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR timeptr$[rsp]
  0001b	48 63 49 10	 movsxd	 rcx, DWORD PTR [rcx+16]
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?mon_name@?1??_asctime@@9@9
  00026	48 8d 0c 8a	 lea	 rcx, QWORD PTR [rdx+rcx*4]
  0002a	48 8b 54 24 50	 mov	 rdx, QWORD PTR timeptr$[rsp]
  0002f	48 63 52 18	 movsxd	 rdx, DWORD PTR [rdx+24]
  00033	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?wday_name@?1??_asctime@@9@9
  0003a	49 8d 14 90	 lea	 rdx, QWORD PTR [r8+rdx*4]
  0003e	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00042	48 8b 44 24 50	 mov	 rax, QWORD PTR timeptr$[rsp]
  00047	8b 00		 mov	 eax, DWORD PTR [rax]
  00049	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR timeptr$[rsp]
  00052	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00055	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00059	48 8b 44 24 50	 mov	 rax, QWORD PTR timeptr$[rsp]
  0005e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00061	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00065	48 8b 44 24 50	 mov	 rax, QWORD PTR timeptr$[rsp]
  0006a	44 8b 48 0c	 mov	 r9d, DWORD PTR [rax+12]
  0006e	4c 8b c1	 mov	 r8, rcx
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@HJNEELDC@?$CFs?5?$CFs?$CF3d?5?$CF?42d?3?$CF?42d?3?$CF?42d?5?$CFd?$AA@
  00078	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 747  : }

  0007d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00081	c3		 ret	 0
_asctime ENDP
_TEXT	ENDS
PUBLIC	??_C@_08GPFGLFCO@?$HMO?3ctime?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$time_ctime DD imagerel time_ctime
	DD	imagerel time_ctime+83
	DD	imagerel $unwind$time_ctime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_ctime DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_08GPFGLFCO@?$HMO?3ctime?$AA@
CONST	SEGMENT
??_C@_08GPFGLFCO@?$HMO?3ctime?$AA@ DB '|O:ctime', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT time_ctime
_TEXT	SEGMENT
buf$ = 32
tt$ = 72
self$ = 96
args$ = 104
time_ctime PROC						; COMDAT

; 776  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 777  :     time_t tt;
; 778  :     struct tm buf;
; 779  :     if (!parse_time_t_args(args, "|O:ctime", &tt))

  0000e	4c 8d 44 24 48	 lea	 r8, QWORD PTR tt$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08GPFGLFCO@?$HMO?3ctime?$AA@
  0001a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 parse_time_t_args
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN2@time_ctime

; 780  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 22		 jmp	 SHORT $LN3@time_ctime
$LN2@time_ctime:

; 781  :     if (pylocaltime(&tt, &buf) == -1)

  0002c	48 8d 54 24 20	 lea	 rdx, QWORD PTR buf$[rsp]
  00031	48 8d 4c 24 48	 lea	 rcx, QWORD PTR tt$[rsp]
  00036	e8 00 00 00 00	 call	 pylocaltime
  0003b	83 f8 ff	 cmp	 eax, -1
  0003e	75 04		 jne	 SHORT $LN1@time_ctime

; 782  :         return NULL;

  00040	33 c0		 xor	 eax, eax
  00042	eb 0a		 jmp	 SHORT $LN3@time_ctime
$LN1@time_ctime:

; 783  :     return _asctime(&buf);

  00044	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  00049	e8 00 00 00 00	 call	 _asctime
$LN3@time_ctime:

; 784  : }

  0004e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00052	c3		 ret	 0
time_ctime ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@HBGMICKE@mktime?5argument?5out?5of?5range?$AA@ ; `string'
EXTRN	PyExc_OverflowError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$time_mktime DD imagerel time_mktime
	DD	imagerel time_mktime+119
	DD	imagerel $unwind$time_mktime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_mktime DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0BN@HBGMICKE@mktime?5argument?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BN@HBGMICKE@mktime?5argument?5out?5of?5range?$AA@ DB 'mktime argum'
	DB	'ent out of range', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT time_mktime
_TEXT	SEGMENT
buf$ = 32
tt$ = 72
self$ = 96
tup$ = 104
time_mktime PROC					; COMDAT

; 796  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 797  :     struct tm buf;
; 798  :     time_t tt;
; 799  :     if (!gettmarg(tup, &buf))

  0000e	48 8d 54 24 20	 lea	 rdx, QWORD PTR buf$[rsp]
  00013	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tup$[rsp]
  00018	e8 00 00 00 00	 call	 gettmarg
  0001d	85 c0		 test	 eax, eax
  0001f	75 04		 jne	 SHORT $LN2@time_mktim

; 800  :         return NULL;

  00021	33 c0		 xor	 eax, eax
  00023	eb 4d		 jmp	 SHORT $LN3@time_mktim
$LN2@time_mktim:

; 801  :     buf.tm_wday = -1;  /* sentinel; original value ignored */

  00025	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR buf$[rsp+24], -1

; 802  :     tt = mktime(&buf);

  0002d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  00032	e8 00 00 00 00	 call	 mktime
  00037	48 89 44 24 48	 mov	 QWORD PTR tt$[rsp], rax

; 803  :     /* Return value of -1 does not necessarily mean an error, but tm_wday
; 804  :      * cannot remain set to -1 if mktime succeeded. */
; 805  :     if (tt == (time_t)(-1) && buf.tm_wday == -1) {

  0003c	48 83 7c 24 48
	ff		 cmp	 QWORD PTR tt$[rsp], -1
  00042	75 1e		 jne	 SHORT $LN1@time_mktim
  00044	83 7c 24 38 ff	 cmp	 DWORD PTR buf$[rsp+24], -1
  00049	75 17		 jne	 SHORT $LN1@time_mktim

; 806  :         PyErr_SetString(PyExc_OverflowError,
; 807  :                         "mktime argument out of range");

  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@HBGMICKE@mktime?5argument?5out?5of?5range?$AA@
  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00059	e8 00 00 00 00	 call	 PyErr_SetString

; 808  :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	eb 10		 jmp	 SHORT $LN3@time_mktim
$LN1@time_mktim:

; 809  :     }
; 810  :     return PyFloat_FromDouble((double)tt);

  00062	66 0f ef c0	 pxor	 xmm0, xmm0
  00066	f2 48 0f 2a 44
	24 48		 cvtsi2sd xmm0, QWORD PTR tt$[rsp]
  0006d	e8 00 00 00 00	 call	 PyFloat_FromDouble
$LN3@time_mktim:

; 811  : }

  00072	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00076	c3		 ret	 0
time_mktime ENDP
_TEXT	ENDS
EXTRN	__imp__mktime64:PROC
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
pdata	SEGMENT
$pdata$mktime DD imagerel mktime
	DD	imagerel mktime+25
	DD	imagerel $unwind$mktime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mktime DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mktime
_TEXT	SEGMENT
_Tm$ = 48
mktime	PROC						; COMDAT

; 124  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 125  :     return _mktime64(_Tm);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Tm$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mktime64

; 126  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
mktime	ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\timemodule.c
pdata	SEGMENT
$pdata$time_monotonic DD imagerel time_monotonic
	DD	imagerel time_monotonic+26
	DD	imagerel $unwind$time_monotonic
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_monotonic DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT time_monotonic
_TEXT	SEGMENT
self$ = 48
unused$ = 56
time_monotonic PROC					; COMDAT

; 979  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 980  :     return pymonotonic(NULL);

  0000e	33 c9		 xor	 ecx, ecx
  00010	e8 00 00 00 00	 call	 pymonotonic

; 981  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
time_monotonic ENDP
_TEXT	ENDS
PUBLIC	__real@3e7ad7f29abcaf48
PUBLIC	??_C@_0P@MKKDAFMJ@GetTickCount?$CI?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BB@GFOJHMDJ@GetTickCount64?$CI?$CJ?$AA@	; `string'
PUBLIC	__real@43f0000000000000
PUBLIC	??_C@_0P@CDHHOHKP@GetTickCount64?$AA@		; `string'
PUBLIC	??_C@_1BC@EKMDCNOB@?$AAK?$AAE?$AAR?$AAN?$AAE?$AAL?$AA3?$AA2?$AA?$AA@ ; `string'
EXTRN	PyErr_SetFromWindowsErr:PROC
EXTRN	__imp_GetSystemTimeAdjustment:PROC
EXTRN	__imp_ldexp:PROC
EXTRN	__imp_GetTickCount:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_GetModuleHandleW:PROC
_BSS	SEGMENT
?Py_GetTickCount64@?1??pymonotonic@@9@9 DQ 01H DUP (?)	; `pymonotonic'::`2'::Py_GetTickCount64
winver	DB	09cH DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pymonotonic DD imagerel pymonotonic
	DD	imagerel pymonotonic+484
	DD	imagerel $unwind$pymonotonic
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pymonotonic DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT __real@3e7ad7f29abcaf48
CONST	SEGMENT
__real@3e7ad7f29abcaf48 DQ 03e7ad7f29abcaf48r	; 1e-007
CONST	ENDS
;	COMDAT ??_C@_0P@MKKDAFMJ@GetTickCount?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0P@MKKDAFMJ@GetTickCount?$CI?$CJ?$AA@ DB 'GetTickCount()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GFOJHMDJ@GetTickCount64?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BB@GFOJHMDJ@GetTickCount64?$CI?$CJ?$AA@ DB 'GetTickCount64()', 00H ; `string'
CONST	ENDS
;	COMDAT __real@43f0000000000000
CONST	SEGMENT
__real@43f0000000000000 DQ 043f0000000000000r	; 1.84467e+019
CONST	ENDS
;	COMDAT ??_C@_0P@CDHHOHKP@GetTickCount64?$AA@
CONST	SEGMENT
??_C@_0P@CDHHOHKP@GetTickCount64?$AA@ DB 'GetTickCount64', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@EKMDCNOB@?$AAK?$AAE?$AAR?$AAN?$AAE?$AAL?$AA3?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@EKMDCNOB@?$AAK?$AAE?$AAR?$AAN?$AAE?$AAL?$AA3?$AA2?$AA?$AA@ DB 'K'
	DB	00H, 'E', 00H, 'R', 00H, 'N', 00H, 'E', 00H, 'L', 00H, '3', 00H
	DB	'2', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT pymonotonic
_TEXT	SEGMENT
result$ = 32
hKernel32$64068 = 40
ticks$64075 = 48
ticks$64082 = 56
timeAdjustment$64085 = 60
ok$64088 = 64
timeIncrement$64086 = 68
isTimeAdjustmentDisabled$64087 = 72
tv72 = 76
info$ = 96
pymonotonic PROC					; COMDAT

; 868  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 869  : #if defined(MS_WINDOWS)
; 870  :     static ULONGLONG (*GetTickCount64) (void) = NULL;
; 871  :     static ULONGLONG (CALLBACK *Py_GetTickCount64)(void);
; 872  :     static int has_getickcount64 = -1;
; 873  :     double result;
; 874  : 
; 875  :     if (has_getickcount64 == -1) {

  00009	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?has_getickcount64@?1??pymonotonic@@9@9, -1
  00010	75 66		 jne	 SHORT $LN10@pymonotoni

; 876  :         /* GetTickCount64() was added to Windows Vista */
; 877  :         if (winver.dwMajorVersion >= 6) {

  00012	83 3d 04 00 00
	00 06		 cmp	 DWORD PTR winver+4, 6
  00019	72 53		 jb	 SHORT $LN9@pymonotoni

; 878  :             HINSTANCE hKernel32;
; 879  :             hKernel32 = GetModuleHandleW(L"KERNEL32");

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@EKMDCNOB@?$AAK?$AAE?$AAR?$AAN?$AAE?$AAL?$AA3?$AA2?$AA?$AA@
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleW
  00028	48 89 44 24 28	 mov	 QWORD PTR hKernel32$64068[rsp], rax

; 880  :             *(FARPROC*)&Py_GetTickCount64 = GetProcAddress(hKernel32,
; 881  :                                                            "GetTickCount64");

  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@CDHHOHKP@GetTickCount64?$AA@
  00034	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hKernel32$64068[rsp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0003f	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?Py_GetTickCount64@?1??pymonotonic@@9@9, rax

; 882  :             has_getickcount64 = (Py_GetTickCount64 != NULL);

  00046	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?Py_GetTickCount64@?1??pymonotonic@@9@9, 0
  0004e	74 0a		 je	 SHORT $LN13@pymonotoni
  00050	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00058	eb 08		 jmp	 SHORT $LN14@pymonotoni
$LN13@pymonotoni:
  0005a	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN14@pymonotoni:
  00062	8b 44 24 4c	 mov	 eax, DWORD PTR tv72[rsp]
  00066	89 05 00 00 00
	00		 mov	 DWORD PTR ?has_getickcount64@?1??pymonotonic@@9@9, eax

; 883  :         }
; 884  :         else

  0006c	eb 0a		 jmp	 SHORT $LN8@pymonotoni
$LN9@pymonotoni:

; 885  :             has_getickcount64 = 0;

  0006e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?has_getickcount64@?1??pymonotonic@@9@9, 0
$LN8@pymonotoni:
$LN10@pymonotoni:

; 886  :     }
; 887  : 
; 888  :     if (has_getickcount64) {

  00078	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?has_getickcount64@?1??pymonotonic@@9@9, 0
  0007f	74 39		 je	 SHORT $LN7@pymonotoni

; 889  :         ULONGLONG ticks;
; 890  :         ticks = Py_GetTickCount64();

  00081	ff 15 00 00 00
	00		 call	 QWORD PTR ?Py_GetTickCount64@?1??pymonotonic@@9@9
  00087	48 89 44 24 30	 mov	 QWORD PTR ticks$64075[rsp], rax

; 891  :         result = (double)ticks * 1e-3;

  0008c	48 8b 44 24 30	 mov	 rax, QWORD PTR ticks$64075[rsp]
  00091	66 0f ef c0	 pxor	 xmm0, xmm0
  00095	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  0009a	48 85 c0	 test	 rax, rax
  0009d	7d 08		 jge	 SHORT $LN15@pymonotoni
  0009f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@43f0000000000000
$LN15@pymonotoni:
  000a7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  000af	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR result$[rsp], xmm0

; 892  :     }
; 893  :     else {

  000b5	e9 83 00 00 00	 jmp	 $LN6@pymonotoni
$LN7@pymonotoni:

; 894  :         static DWORD last_ticks = 0;
; 895  :         static DWORD n_overflow = 0;
; 896  :         DWORD ticks;
; 897  : 
; 898  :         ticks = GetTickCount();

  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetTickCount
  000c0	89 44 24 38	 mov	 DWORD PTR ticks$64082[rsp], eax

; 899  :         if (ticks < last_ticks)

  000c4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?last_ticks@?5??pymonotonic@@9@9
  000ca	39 44 24 38	 cmp	 DWORD PTR ticks$64082[rsp], eax
  000ce	73 0e		 jae	 SHORT $LN5@pymonotoni

; 900  :             n_overflow++;

  000d0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?n_overflow@?5??pymonotonic@@9@9
  000d6	ff c0		 inc	 eax
  000d8	89 05 00 00 00
	00		 mov	 DWORD PTR ?n_overflow@?5??pymonotonic@@9@9, eax
$LN5@pymonotoni:

; 901  :         last_ticks = ticks;

  000de	8b 44 24 38	 mov	 eax, DWORD PTR ticks$64082[rsp]
  000e2	89 05 00 00 00
	00		 mov	 DWORD PTR ?last_ticks@?5??pymonotonic@@9@9, eax

; 902  : 
; 903  :         result = ldexp(n_overflow, 32);

  000e8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?n_overflow@?5??pymonotonic@@9@9
  000ee	66 0f ef c0	 pxor	 xmm0, xmm0
  000f2	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  000f7	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ldexp
  00102	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR result$[rsp], xmm0

; 904  :         result += ticks;

  00108	8b 44 24 38	 mov	 eax, DWORD PTR ticks$64082[rsp]
  0010c	66 0f ef c0	 pxor	 xmm0, xmm0
  00110	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00115	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR result$[rsp]
  0011b	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0011f	66 0f 28 c1	 movapd	 xmm0, xmm1
  00123	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR result$[rsp], xmm0

; 905  :         result *= 1e-3;

  00129	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR result$[rsp]
  0012f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00137	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR result$[rsp], xmm0
$LN6@pymonotoni:

; 906  :     }
; 907  : 
; 908  :     if (info) {

  0013d	48 83 7c 24 60
	00		 cmp	 QWORD PTR info$[rsp], 0
  00143	0f 84 8b 00 00
	00		 je	 $LN4@pymonotoni

; 909  :         DWORD timeAdjustment, timeIncrement;
; 910  :         BOOL isTimeAdjustmentDisabled, ok;
; 911  :         if (has_getickcount64)

  00149	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?has_getickcount64@?1??pymonotonic@@9@9, 0
  00150	74 11		 je	 SHORT $LN3@pymonotoni

; 912  :             info->implementation = "GetTickCount64()";

  00152	48 8b 44 24 60	 mov	 rax, QWORD PTR info$[rsp]
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GFOJHMDJ@GetTickCount64?$CI?$CJ?$AA@
  0015e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 913  :         else

  00161	eb 0f		 jmp	 SHORT $LN2@pymonotoni
$LN3@pymonotoni:

; 914  :             info->implementation = "GetTickCount()";

  00163	48 8b 44 24 60	 mov	 rax, QWORD PTR info$[rsp]
  00168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@MKKDAFMJ@GetTickCount?$CI?$CJ?$AA@
  0016f	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN2@pymonotoni:

; 915  :         info->monotonic = 1;

  00172	48 8b 44 24 60	 mov	 rax, QWORD PTR info$[rsp]
  00177	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 916  :         ok = GetSystemTimeAdjustment(&timeAdjustment, &timeIncrement,
; 917  :                                      &isTimeAdjustmentDisabled);

  0017e	4c 8d 44 24 48	 lea	 r8, QWORD PTR isTimeAdjustmentDisabled$64087[rsp]
  00183	48 8d 54 24 44	 lea	 rdx, QWORD PTR timeIncrement$64086[rsp]
  00188	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR timeAdjustment$64085[rsp]
  0018d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTimeAdjustment
  00193	89 44 24 40	 mov	 DWORD PTR ok$64088[rsp], eax

; 918  :         if (!ok) {

  00197	83 7c 24 40 00	 cmp	 DWORD PTR ok$64088[rsp], 0
  0019c	75 0b		 jne	 SHORT $LN1@pymonotoni

; 919  :             PyErr_SetFromWindowsErr(0);

  0019e	33 c9		 xor	 ecx, ecx
  001a0	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 920  :             return NULL;

  001a5	33 c0		 xor	 eax, eax
  001a7	eb 36		 jmp	 SHORT $LN11@pymonotoni
$LN1@pymonotoni:

; 921  :         }
; 922  :         info->resolution = timeIncrement * 1e-7;

  001a9	8b 44 24 44	 mov	 eax, DWORD PTR timeIncrement$64086[rsp]
  001ad	66 0f ef c0	 pxor	 xmm0, xmm0
  001b1	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  001b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3e7ad7f29abcaf48
  001be	48 8b 44 24 60	 mov	 rax, QWORD PTR info$[rsp]
  001c3	f2 0f 11 40 10	 movsdx	 QWORD PTR [rax+16], xmm0

; 923  :         info->adjustable = 0;

  001c8	48 8b 44 24 60	 mov	 rax, QWORD PTR info$[rsp]
  001cd	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0
$LN4@pymonotoni:

; 924  :     }
; 925  :     return PyFloat_FromDouble(result);

  001d4	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR result$[rsp]
  001da	e8 00 00 00 00	 call	 PyFloat_FromDouble
$LN11@pymonotoni:

; 926  : 
; 927  : #elif defined(__APPLE__)
; 928  :     static mach_timebase_info_data_t timebase;
; 929  :     uint64_t time;
; 930  :     double secs;
; 931  : 
; 932  :     if (timebase.denom == 0) {
; 933  :         /* According to the Technical Q&A QA1398, mach_timebase_info() cannot
; 934  :            fail: https://developer.apple.com/library/mac/#qa/qa1398/ */
; 935  :         (void)mach_timebase_info(&timebase);
; 936  :     }
; 937  : 
; 938  :     time = mach_absolute_time();
; 939  :     secs = (double)time * timebase.numer / timebase.denom * 1e-9;
; 940  :     if (info) {
; 941  :         info->implementation = "mach_absolute_time()";
; 942  :         info->resolution = (double)timebase.numer / timebase.denom * 1e-9;
; 943  :         info->monotonic = 1;
; 944  :         info->adjustable = 0;
; 945  :     }
; 946  :     return PyFloat_FromDouble(secs);
; 947  : 
; 948  : #elif defined(HAVE_CLOCK_GETTIME) && (defined(CLOCK_HIGHRES) || defined(CLOCK_MONOTONIC))
; 949  :     struct timespec tp;
; 950  : #ifdef CLOCK_HIGHRES
; 951  :     const clockid_t clk_id = CLOCK_HIGHRES;
; 952  :     const char *function = "clock_gettime(CLOCK_HIGHRES)";
; 953  : #else
; 954  :     const clockid_t clk_id = CLOCK_MONOTONIC;
; 955  :     const char *function = "clock_gettime(CLOCK_MONOTONIC)";
; 956  : #endif
; 957  : 
; 958  :     if (clock_gettime(clk_id, &tp) != 0) {
; 959  :         PyErr_SetFromErrno(PyExc_OSError);
; 960  :         return NULL;
; 961  :     }
; 962  : 
; 963  :     if (info) {
; 964  :         struct timespec res;
; 965  :         info->monotonic = 1;
; 966  :         info->implementation = function;
; 967  :         info->adjustable = 0;
; 968  :         if (clock_getres(clk_id, &res) == 0)
; 969  :             info->resolution = res.tv_sec + res.tv_nsec * 1e-9;
; 970  :         else
; 971  :             info->resolution = 1e-9;
; 972  :     }
; 973  :     return PyFloat_FromDouble(tp.tv_sec + tp.tv_nsec * 1e-9);
; 974  : #endif
; 975  : }

  001df	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001e3	c3		 ret	 0
pymonotonic ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$time_perf_counter DD imagerel time_perf_counter
	DD	imagerel time_perf_counter+26
	DD	imagerel $unwind$time_perf_counter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_perf_counter DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT time_perf_counter
_TEXT	SEGMENT
self$ = 48
unused$ = 56
time_perf_counter PROC					; COMDAT

; 1025 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1026 :     return perf_counter(NULL);

  0000e	33 c9		 xor	 ecx, ecx
  00010	e8 00 00 00 00	 call	 perf_counter

; 1027 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
time_perf_counter ENDP
_TEXT	ENDS
EXTRN	PyErr_Clear:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$perf_counter DD imagerel perf_counter
	DD	imagerel perf_counter+123
	DD	imagerel $unwind$perf_counter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$perf_counter DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT perf_counter
_TEXT	SEGMENT
res$ = 32
info$ = 64
perf_counter PROC					; COMDAT

; 991  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 992  : #if defined(WIN32_PERF_COUNTER) || defined(PYMONOTONIC)
; 993  :     PyObject *res;
; 994  : #endif
; 995  : #if defined(WIN32_PERF_COUNTER)
; 996  :     static int use_perf_counter = 1;
; 997  : #endif
; 998  : #ifdef PYMONOTONIC
; 999  :     static int use_monotonic = 1;
; 1000 : #endif
; 1001 : 
; 1002 : #ifdef WIN32_PERF_COUNTER
; 1003 :     if (use_perf_counter) {

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?use_perf_counter@?1??perf_counter@@9@9, 0
  00010	74 24		 je	 SHORT $LN4@perf_count

; 1004 :         if (win_perf_counter(info, &res) == 0)

  00012	48 8d 54 24 20	 lea	 rdx, QWORD PTR res$[rsp]
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR info$[rsp]
  0001c	e8 00 00 00 00	 call	 win_perf_counter
  00021	85 c0		 test	 eax, eax
  00023	75 07		 jne	 SHORT $LN3@perf_count

; 1005 :             return res;

  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0002a	eb 4a		 jmp	 SHORT $LN5@perf_count
$LN3@perf_count:

; 1006 :         use_perf_counter = 0;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?use_perf_counter@?1??perf_counter@@9@9, 0
$LN4@perf_count:

; 1007 :     }
; 1008 : #endif
; 1009 : 
; 1010 : #ifdef PYMONOTONIC
; 1011 :     if (use_monotonic) {

  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?use_monotonic@?1??perf_counter@@9@9, 0
  0003d	74 2d		 je	 SHORT $LN2@perf_count

; 1012 :         res = pymonotonic(info);

  0003f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR info$[rsp]
  00044	e8 00 00 00 00	 call	 pymonotonic
  00049	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1013 :         if (res != NULL)

  0004e	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00054	74 07		 je	 SHORT $LN1@perf_count

; 1014 :             return res;

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0005b	eb 19		 jmp	 SHORT $LN5@perf_count
$LN1@perf_count:

; 1015 :         use_monotonic = 0;

  0005d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?use_monotonic@?1??perf_counter@@9@9, 0

; 1016 :         PyErr_Clear();

  00067	e8 00 00 00 00	 call	 PyErr_Clear
$LN2@perf_count:

; 1017 :     }
; 1018 : #endif
; 1019 : 
; 1020 :     return floattime(info);

  0006c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR info$[rsp]
  00071	e8 00 00 00 00	 call	 floattime
$LN5@perf_count:

; 1021 : }

  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
perf_counter ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$time_process_time DD imagerel time_process_time
	DD	imagerel time_process_time+26
	DD	imagerel $unwind$time_process_time
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_process_time DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT time_process_time
_TEXT	SEGMENT
self$ = 48
unused$ = 56
time_process_time PROC					; COMDAT

; 1149 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1150 :     return py_process_time(NULL);

  0000e	33 c9		 xor	 ecx, ecx
  00010	e8 00 00 00 00	 call	 py_process_time

; 1151 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
time_process_time ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@GIDHEAGA@GetProcessTimes?$CI?$CJ?$AA@	; `string'
EXTRN	__imp_GetProcessTimes:PROC
EXTRN	__imp_GetCurrentProcess:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$py_process_time DD imagerel py_process_time
	DD	imagerel py_process_time+295
	DD	imagerel $unwind$py_process_time
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$py_process_time DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_0BC@GIDHEAGA@GetProcessTimes?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@GIDHEAGA@GetProcessTimes?$CI?$CJ?$AA@ DB 'GetProcessTimes()', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT py_process_time
_TEXT	SEGMENT
large$ = 48
user_time$ = 56
ok$ = 64
creation_time$ = 72
process$ = 80
total$ = 88
exit_time$ = 96
kernel_time$ = 104
info$ = 128
py_process_time PROC					; COMDAT

; 1036 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1037 : #if defined(MS_WINDOWS)
; 1038 :     HANDLE process;
; 1039 :     FILETIME creation_time, exit_time, kernel_time, user_time;
; 1040 :     ULARGE_INTEGER large;
; 1041 :     double total;
; 1042 :     BOOL ok;
; 1043 : 
; 1044 :     process = GetCurrentProcess();

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  0000f	48 89 44 24 50	 mov	 QWORD PTR process$[rsp], rax

; 1045 :     ok = GetProcessTimes(process, &creation_time, &exit_time, &kernel_time, &user_time);

  00014	48 8d 44 24 38	 lea	 rax, QWORD PTR user_time$[rsp]
  00019	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0001e	4c 8d 4c 24 68	 lea	 r9, QWORD PTR kernel_time$[rsp]
  00023	4c 8d 44 24 60	 lea	 r8, QWORD PTR exit_time$[rsp]
  00028	48 8d 54 24 48	 lea	 rdx, QWORD PTR creation_time$[rsp]
  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR process$[rsp]
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcessTimes
  00038	89 44 24 40	 mov	 DWORD PTR ok$[rsp], eax

; 1046 :     if (!ok)

  0003c	83 7c 24 40 00	 cmp	 DWORD PTR ok$[rsp], 0
  00041	75 0c		 jne	 SHORT $LN2@py_process

; 1047 :         return PyErr_SetFromWindowsErr(0);

  00043	33 c9		 xor	 ecx, ecx
  00045	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0004a	e9 d3 00 00 00	 jmp	 $LN3@py_process
$LN2@py_process:

; 1048 : 
; 1049 :     large.u.LowPart = kernel_time.dwLowDateTime;

  0004f	8b 44 24 68	 mov	 eax, DWORD PTR kernel_time$[rsp]
  00053	89 44 24 30	 mov	 DWORD PTR large$[rsp], eax

; 1050 :     large.u.HighPart = kernel_time.dwHighDateTime;

  00057	8b 44 24 6c	 mov	 eax, DWORD PTR kernel_time$[rsp+4]
  0005b	89 44 24 34	 mov	 DWORD PTR large$[rsp+4], eax

; 1051 :     total = (double)large.QuadPart;

  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR large$[rsp]
  00064	66 0f ef c0	 pxor	 xmm0, xmm0
  00068	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  0006d	48 85 c0	 test	 rax, rax
  00070	7d 08		 jge	 SHORT $LN6@py_process
  00072	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@43f0000000000000
$LN6@py_process:
  0007a	f2 0f 11 44 24
	58		 movsdx	 QWORD PTR total$[rsp], xmm0

; 1052 :     large.u.LowPart = user_time.dwLowDateTime;

  00080	8b 44 24 38	 mov	 eax, DWORD PTR user_time$[rsp]
  00084	89 44 24 30	 mov	 DWORD PTR large$[rsp], eax

; 1053 :     large.u.HighPart = user_time.dwHighDateTime;

  00088	8b 44 24 3c	 mov	 eax, DWORD PTR user_time$[rsp+4]
  0008c	89 44 24 34	 mov	 DWORD PTR large$[rsp+4], eax

; 1054 :     total += (double)large.QuadPart;

  00090	48 8b 44 24 30	 mov	 rax, QWORD PTR large$[rsp]
  00095	66 0f ef c0	 pxor	 xmm0, xmm0
  00099	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  0009e	48 85 c0	 test	 rax, rax
  000a1	7d 08		 jge	 SHORT $LN5@py_process
  000a3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@43f0000000000000
$LN5@py_process:
  000ab	f2 0f 10 4c 24
	58		 movsdx	 xmm1, QWORD PTR total$[rsp]
  000b1	f2 0f 58 c8	 addsd	 xmm1, xmm0
  000b5	66 0f 28 c1	 movapd	 xmm0, xmm1
  000b9	f2 0f 11 44 24
	58		 movsdx	 QWORD PTR total$[rsp], xmm0

; 1055 :     if (info) {

  000bf	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR info$[rsp], 0
  000c8	74 45		 je	 SHORT $LN1@py_process

; 1056 :         info->implementation = "GetProcessTimes()";

  000ca	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR info$[rsp]
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@GIDHEAGA@GetProcessTimes?$CI?$CJ?$AA@
  000d9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1057 :         info->resolution = 1e-7;

  000dc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR info$[rsp]
  000e4	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3e7ad7f29abcaf48
  000ec	f2 0f 11 40 10	 movsdx	 QWORD PTR [rax+16], xmm0

; 1058 :         info->monotonic = 1;

  000f1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR info$[rsp]
  000f9	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 1059 :         info->adjustable = 0;

  00100	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00108	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0
$LN1@py_process:

; 1060 :     }
; 1061 :     return PyFloat_FromDouble(total * 1e-7);

  0010f	f2 0f 10 44 24
	58		 movsdx	 xmm0, QWORD PTR total$[rsp]
  00115	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3e7ad7f29abcaf48
  0011d	e8 00 00 00 00	 call	 PyFloat_FromDouble
$LN3@py_process:

; 1062 : #else
; 1063 : 
; 1064 : #if defined(HAVE_SYS_RESOURCE_H)
; 1065 :     struct rusage ru;
; 1066 : #endif
; 1067 : #ifdef HAVE_TIMES
; 1068 :     struct tms t;
; 1069 :     static long ticks_per_second = -1;
; 1070 : #endif
; 1071 : 
; 1072 : #if defined(HAVE_CLOCK_GETTIME) \
; 1073 :     && (defined(CLOCK_PROCESS_CPUTIME_ID) || defined(CLOCK_PROF))
; 1074 :     struct timespec tp;
; 1075 : #ifdef CLOCK_PROF
; 1076 :     const clockid_t clk_id = CLOCK_PROF;
; 1077 :     const char *function = "clock_gettime(CLOCK_PROF)";
; 1078 : #else
; 1079 :     const clockid_t clk_id = CLOCK_PROCESS_CPUTIME_ID;
; 1080 :     const char *function = "clock_gettime(CLOCK_PROCESS_CPUTIME_ID)";
; 1081 : #endif
; 1082 : 
; 1083 :     if (clock_gettime(clk_id, &tp) == 0) {
; 1084 :         if (info) {
; 1085 :             struct timespec res;
; 1086 :             info->implementation = function;
; 1087 :             info->monotonic = 1;
; 1088 :             info->adjustable = 0;
; 1089 :             if (clock_getres(clk_id, &res) == 0)
; 1090 :                 info->resolution = res.tv_sec + res.tv_nsec * 1e-9;
; 1091 :             else
; 1092 :                 info->resolution = 1e-9;
; 1093 :         }
; 1094 :         return PyFloat_FromDouble(tp.tv_sec + tp.tv_nsec * 1e-9);
; 1095 :     }
; 1096 : #endif
; 1097 : 
; 1098 : #if defined(HAVE_SYS_RESOURCE_H)
; 1099 :     if (getrusage(RUSAGE_SELF, &ru) == 0) {
; 1100 :         double total;
; 1101 :         total = ru.ru_utime.tv_sec + ru.ru_utime.tv_usec * 1e-6;
; 1102 :         total += ru.ru_stime.tv_sec + ru.ru_stime.tv_usec * 1e-6;
; 1103 :         if (info) {
; 1104 :             info->implementation = "getrusage(RUSAGE_SELF)";
; 1105 :             info->monotonic = 1;
; 1106 :             info->adjustable = 0;
; 1107 :             info->resolution = 1e-6;
; 1108 :         }
; 1109 :         return PyFloat_FromDouble(total);
; 1110 :     }
; 1111 : #endif
; 1112 : 
; 1113 : #ifdef HAVE_TIMES
; 1114 :     if (times(&t) != (clock_t)-1) {
; 1115 :         double total;
; 1116 : 
; 1117 :         if (ticks_per_second == -1) {
; 1118 : #if defined(HAVE_SYSCONF) && defined(_SC_CLK_TCK)
; 1119 :             ticks_per_second = sysconf(_SC_CLK_TCK);
; 1120 :             if (ticks_per_second < 1)
; 1121 :                 ticks_per_second = -1;
; 1122 : #elif defined(HZ)
; 1123 :             ticks_per_second = HZ;
; 1124 : #else
; 1125 :             ticks_per_second = 60; /* magic fallback value; may be bogus */
; 1126 : #endif
; 1127 :         }
; 1128 : 
; 1129 :         if (ticks_per_second != -1) {
; 1130 :             total = (double)t.tms_utime / ticks_per_second;
; 1131 :             total += (double)t.tms_stime / ticks_per_second;
; 1132 :             if (info) {
; 1133 :                 info->implementation = "times()";
; 1134 :                 info->monotonic = 1;
; 1135 :                 info->adjustable = 0;
; 1136 :                 info->resolution = 1.0 / ticks_per_second;
; 1137 :             }
; 1138 :             return PyFloat_FromDouble(total);
; 1139 :         }
; 1140 :     }
; 1141 : #endif
; 1142 : 
; 1143 :     return floatclock(info);
; 1144 : #endif
; 1145 : }

  00122	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00126	c3		 ret	 0
py_process_time ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@CAGNKJED@resolution?$AA@		; `string'
PUBLIC	??_C@_1CO@GINHKBNI@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@MNFOPGHD@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AA?$AA@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	??_C@_0L@NBNKHOJN@adjustable?$AA@		; `string'
PUBLIC	??_C@_1CM@DNFGPPPP@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAa?$AAd?$AAj?$AAu?$AAs?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@CFIBLOAC@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAm?$AAo?$AAn?$AAo?$AAt?$AAo?$AAn?$AAi?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BE@LOGPLCGG@time_get_clock_info?$AA@	; `string'
PUBLIC	??_C@_0BI@HJACFKFO@?4?4?2Modules?2timemodule?4c?$AA@ ; `string'
PUBLIC	??_C@_0P@EPOCNDEG@implementation?$AA@		; `string'
PUBLIC	??_C@_1DI@JNOOMKED@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAi?$AAm?$AAp?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_0O@CMHCEFMK@unknown?5clock?$AA@		; `string'
PUBLIC	__real@bff0000000000000
PUBLIC	??_C@_0BB@KLKIBGIJ@s?3get_clock_info?$AA@	; `string'
EXTRN	_PyNamespace_New:PROC
EXTRN	PyBool_FromLong:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyDict_New:PROC
EXTRN	strcmp:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$time_get_clock_info DD imagerel time_get_clock_info
	DD	imagerel time_get_clock_info+1225
	DD	imagerel $unwind$time_get_clock_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time_get_clock_info DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_0L@CAGNKJED@resolution?$AA@
CONST	SEGMENT
??_C@_0L@CAGNKJED@resolution?$AA@ DB 'resolution', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@GINHKBNI@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@GINHKBNI@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, '.', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	'.', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@MNFOPGHD@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@MNFOPGHD@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, '.', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, '.', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_0L@NBNKHOJN@adjustable?$AA@
CONST	SEGMENT
??_C@_0L@NBNKHOJN@adjustable?$AA@ DB 'adjustable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@DNFGPPPP@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAa?$AAd?$AAj?$AAu?$AAs?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@DNFGPPPP@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAa?$AAd?$AAj?$AAu?$AAs?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, '.', 00H, 'a', 00H, 'd', 00H
	DB	'j', 00H, 'u', 00H, 's', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '-', 00H
	DB	'1', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@CFIBLOAC@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAm?$AAo?$AAn?$AAo?$AAt?$AAo?$AAn?$AAi?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@CFIBLOAC@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAm?$AAo?$AAn?$AAo?$AAt?$AAo?$AAn?$AAi?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, '.', 00H, 'm', 00H, 'o', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 'c'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '-', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LOGPLCGG@time_get_clock_info?$AA@
CONST	SEGMENT
??_C@_0BE@LOGPLCGG@time_get_clock_info?$AA@ DB 'time_get_clock_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HJACFKFO@?4?4?2Modules?2timemodule?4c?$AA@
CONST	SEGMENT
??_C@_0BI@HJACFKFO@?4?4?2Modules?2timemodule?4c?$AA@ DB '..\Modules\timem'
	DB	'odule.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EPOCNDEG@implementation?$AA@
CONST	SEGMENT
??_C@_0P@EPOCNDEG@implementation?$AA@ DB 'implementation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@JNOOMKED@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAi?$AAm?$AAp?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@JNOOMKED@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAi?$AAm?$AAp?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, '.', 00H, 'i', 00H, 'm', 00H
	DB	'p', 00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CMHCEFMK@unknown?5clock?$AA@
CONST	SEGMENT
??_C@_0O@CMHCEFMK@unknown?5clock?$AA@ DB 'unknown clock', 00H ; `string'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT ??_C@_0BB@KLKIBGIJ@s?3get_clock_info?$AA@
CONST	SEGMENT
??_C@_0BB@KLKIBGIJ@s?3get_clock_info?$AA@ DB 's:get_clock_info', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT time_get_clock_info
_TEXT	SEGMENT
ns$ = 48
dict$ = 56
name$ = 64
obj$ = 72
info$ = 80
_py_tmp$64204 = 104
_py_tmp$64217 = 112
_py_tmp$64231 = 120
_py_tmp$64247 = 128
self$ = 160
args$ = 168
time_get_clock_info PROC				; COMDAT

; 1161 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1162 :     char *name;
; 1163 :     _Py_clock_info_t info;
; 1164 :     PyObject *obj = NULL, *dict, *ns;

  00011	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR obj$[rsp], 0

; 1165 : 
; 1166 :     if (!PyArg_ParseTuple(args, "s:get_clock_info", &name))

  0001a	4c 8d 44 24 40	 lea	 r8, QWORD PTR name$[rsp]
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@KLKIBGIJ@s?3get_clock_info?$AA@
  00026	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0002e	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN41@time_get_c

; 1167 :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	e9 83 04 00 00	 jmp	 $LN42@time_get_c
$LN41@time_get_c:

; 1168 : 
; 1169 : #ifdef Py_DEBUG
; 1170 :     info.implementation = NULL;

  0003e	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR info$[rsp], 0

; 1171 :     info.monotonic = -1;

  00047	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR info$[rsp+8], -1

; 1172 :     info.adjustable = -1;

  0004f	c7 44 24 5c ff
	ff ff ff	 mov	 DWORD PTR info$[rsp+12], -1

; 1173 :     info.resolution = -1.0;

  00057	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@bff0000000000000
  0005f	f2 0f 11 44 24
	60		 movsdx	 QWORD PTR info$[rsp+16], xmm0

; 1174 : #else
; 1175 :     info.implementation = "";
; 1176 :     info.monotonic = 0;
; 1177 :     info.adjustable = 0;
; 1178 :     info.resolution = 1.0;
; 1179 : #endif
; 1180 : 
; 1181 :     if (strcmp(name, "time") == 0)

  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04CLCEDBPF@time?$AA@
  0006c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00071	e8 00 00 00 00	 call	 strcmp
  00076	85 c0		 test	 eax, eax
  00078	75 14		 jne	 SHORT $LN40@time_get_c

; 1182 :         obj = floattime(&info);

  0007a	48 8d 4c 24 50	 lea	 rcx, QWORD PTR info$[rsp]
  0007f	e8 00 00 00 00	 call	 floattime
  00084	48 89 44 24 48	 mov	 QWORD PTR obj$[rsp], rax
  00089	e9 b5 00 00 00	 jmp	 $LN39@time_get_c
$LN40@time_get_c:

; 1183 : #ifdef PYCLOCK
; 1184 :     else if (strcmp(name, "clock") == 0)

  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05DDECJJKE@clock?$AA@
  00095	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0009a	e8 00 00 00 00	 call	 strcmp
  0009f	85 c0		 test	 eax, eax
  000a1	75 14		 jne	 SHORT $LN38@time_get_c

; 1185 :         obj = pyclock(&info);

  000a3	48 8d 4c 24 50	 lea	 rcx, QWORD PTR info$[rsp]
  000a8	e8 00 00 00 00	 call	 pyclock
  000ad	48 89 44 24 48	 mov	 QWORD PTR obj$[rsp], rax
  000b2	e9 8c 00 00 00	 jmp	 $LN37@time_get_c
$LN38@time_get_c:

; 1186 : #endif
; 1187 : #ifdef PYMONOTONIC
; 1188 :     else if (strcmp(name, "monotonic") == 0)

  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FKNHDPAJ@monotonic?$AA@
  000be	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  000c3	e8 00 00 00 00	 call	 strcmp
  000c8	85 c0		 test	 eax, eax
  000ca	75 11		 jne	 SHORT $LN36@time_get_c

; 1189 :         obj = pymonotonic(&info);

  000cc	48 8d 4c 24 50	 lea	 rcx, QWORD PTR info$[rsp]
  000d1	e8 00 00 00 00	 call	 pymonotonic
  000d6	48 89 44 24 48	 mov	 QWORD PTR obj$[rsp], rax
  000db	eb 66		 jmp	 SHORT $LN35@time_get_c
$LN36@time_get_c:

; 1190 : #endif
; 1191 :     else if (strcmp(name, "perf_counter") == 0)

  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MEONCEDN@perf_counter?$AA@
  000e4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  000e9	e8 00 00 00 00	 call	 strcmp
  000ee	85 c0		 test	 eax, eax
  000f0	75 11		 jne	 SHORT $LN34@time_get_c

; 1192 :         obj = perf_counter(&info);

  000f2	48 8d 4c 24 50	 lea	 rcx, QWORD PTR info$[rsp]
  000f7	e8 00 00 00 00	 call	 perf_counter
  000fc	48 89 44 24 48	 mov	 QWORD PTR obj$[rsp], rax
  00101	eb 40		 jmp	 SHORT $LN33@time_get_c
$LN34@time_get_c:

; 1193 :     else if (strcmp(name, "process_time") == 0)

  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@HNHIBMAE@process_time?$AA@
  0010a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0010f	e8 00 00 00 00	 call	 strcmp
  00114	85 c0		 test	 eax, eax
  00116	75 11		 jne	 SHORT $LN32@time_get_c

; 1194 :         obj = py_process_time(&info);

  00118	48 8d 4c 24 50	 lea	 rcx, QWORD PTR info$[rsp]
  0011d	e8 00 00 00 00	 call	 py_process_time
  00122	48 89 44 24 48	 mov	 QWORD PTR obj$[rsp], rax

; 1195 :     else {

  00127	eb 1a		 jmp	 SHORT $LN31@time_get_c
$LN32@time_get_c:

; 1196 :         PyErr_SetString(PyExc_ValueError, "unknown clock");

  00129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@CMHCEFMK@unknown?5clock?$AA@
  00130	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00137	e8 00 00 00 00	 call	 PyErr_SetString

; 1197 :         return NULL;

  0013c	33 c0		 xor	 eax, eax
  0013e	e9 7e 03 00 00	 jmp	 $LN42@time_get_c
$LN31@time_get_c:
$LN33@time_get_c:
$LN35@time_get_c:
$LN37@time_get_c:
$LN39@time_get_c:

; 1198 :     }
; 1199 :     if (obj == NULL)

  00143	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00149	75 07		 jne	 SHORT $LN30@time_get_c

; 1200 :         return NULL;

  0014b	33 c0		 xor	 eax, eax
  0014d	e9 6f 03 00 00	 jmp	 $LN42@time_get_c
$LN30@time_get_c:

; 1201 :     Py_DECREF(obj);

  00152	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00157	e8 00 00 00 00	 call	 _Py_DecRef

; 1202 : 
; 1203 :     dict = PyDict_New();

  0015c	e8 00 00 00 00	 call	 PyDict_New
  00161	48 89 44 24 38	 mov	 QWORD PTR dict$[rsp], rax

; 1204 :     if (dict == NULL)

  00166	48 83 7c 24 38
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0016c	75 07		 jne	 SHORT $LN29@time_get_c

; 1205 :         return NULL;

  0016e	33 c0		 xor	 eax, eax
  00170	e9 4c 03 00 00	 jmp	 $LN42@time_get_c
$LN29@time_get_c:

; 1206 : 
; 1207 :     assert(info.implementation != NULL);

  00175	48 83 7c 24 50
	00		 cmp	 QWORD PTR info$[rsp], 0
  0017b	75 1c		 jne	 SHORT $LN44@time_get_c
  0017d	41 b8 b7 04 00
	00		 mov	 r8d, 1207		; 000004b7H
  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@HKMBAFBM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAt?$AAi?$AAm?$AAe?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@JNOOMKED@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAi?$AAm?$AAp?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00191	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00197	33 c0		 xor	 eax, eax
$LN44@time_get_c:

; 1208 :     obj = PyUnicode_FromString(info.implementation);

  00199	48 8b 4c 24 50	 mov	 rcx, QWORD PTR info$[rsp]
  0019e	e8 00 00 00 00	 call	 PyUnicode_FromString
  001a3	48 89 44 24 48	 mov	 QWORD PTR obj$[rsp], rax

; 1209 :     if (obj == NULL)

  001a8	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  001ae	75 05		 jne	 SHORT $LN28@time_get_c

; 1210 :         goto error;

  001b0	e9 e8 02 00 00	 jmp	 $error$64195
$LN28@time_get_c:

; 1211 :     if (PyDict_SetItemString(dict, "implementation", obj) == -1)

  001b5	4c 8b 44 24 48	 mov	 r8, QWORD PTR obj$[rsp]
  001ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EPOCNDEG@implementation?$AA@
  001c1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dict$[rsp]
  001c6	e8 00 00 00 00	 call	 PyDict_SetItemString
  001cb	83 f8 ff	 cmp	 eax, -1
  001ce	75 05		 jne	 SHORT $LN27@time_get_c

; 1212 :         goto error;

  001d0	e9 c8 02 00 00	 jmp	 $error$64195
$LN27@time_get_c:
$LN26@time_get_c:

; 1213 :     Py_CLEAR(obj);

  001d5	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  001db	74 47		 je	 SHORT $LN23@time_get_c
  001dd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001e5	4c 8b 4c 24 48	 mov	 r9, QWORD PTR obj$[rsp]
  001ea	41 b8 bd 04 00
	00		 mov	 r8d, 1213		; 000004bdH
  001f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HJACFKFO@?4?4?2Modules?2timemodule?4c?$AA@
  001f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LOGPLCGG@time_get_clock_info?$AA@
  001fe	e8 00 00 00 00	 call	 _PyParallel_Guard
  00203	85 c0		 test	 eax, eax
  00205	75 1d		 jne	 SHORT $LN23@time_get_c
  00207	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  0020c	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$64204[rsp], rax
  00211	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR obj$[rsp], 0
  0021a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$64204[rsp]
  0021f	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@time_get_c:
  00224	33 c0		 xor	 eax, eax
  00226	85 c0		 test	 eax, eax
  00228	75 ab		 jne	 SHORT $LN26@time_get_c

; 1214 : 
; 1215 :     assert(info.monotonic != -1);

  0022a	83 7c 24 58 ff	 cmp	 DWORD PTR info$[rsp+8], -1
  0022f	75 1c		 jne	 SHORT $LN45@time_get_c
  00231	41 b8 bf 04 00
	00		 mov	 r8d, 1215		; 000004bfH
  00237	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@HKMBAFBM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAt?$AAi?$AAm?$AAe?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0023e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@CFIBLOAC@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAm?$AAo?$AAn?$AAo?$AAt?$AAo?$AAn?$AAi?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
  00245	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0024b	33 c0		 xor	 eax, eax
$LN45@time_get_c:

; 1216 :     obj = PyBool_FromLong(info.monotonic);

  0024d	8b 4c 24 58	 mov	 ecx, DWORD PTR info$[rsp+8]
  00251	e8 00 00 00 00	 call	 PyBool_FromLong
  00256	48 89 44 24 48	 mov	 QWORD PTR obj$[rsp], rax

; 1217 :     if (obj == NULL)

  0025b	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00261	75 05		 jne	 SHORT $LN22@time_get_c

; 1218 :         goto error;

  00263	e9 35 02 00 00	 jmp	 $error$64195
$LN22@time_get_c:

; 1219 :     if (PyDict_SetItemString(dict, "monotonic", obj) == -1)

  00268	4c 8b 44 24 48	 mov	 r8, QWORD PTR obj$[rsp]
  0026d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FKNHDPAJ@monotonic?$AA@
  00274	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dict$[rsp]
  00279	e8 00 00 00 00	 call	 PyDict_SetItemString
  0027e	83 f8 ff	 cmp	 eax, -1
  00281	75 05		 jne	 SHORT $LN21@time_get_c

; 1220 :         goto error;

  00283	e9 15 02 00 00	 jmp	 $error$64195
$LN21@time_get_c:
$LN20@time_get_c:

; 1221 :     Py_CLEAR(obj);

  00288	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  0028e	74 47		 je	 SHORT $LN17@time_get_c
  00290	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00298	4c 8b 4c 24 48	 mov	 r9, QWORD PTR obj$[rsp]
  0029d	41 b8 c5 04 00
	00		 mov	 r8d, 1221		; 000004c5H
  002a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HJACFKFO@?4?4?2Modules?2timemodule?4c?$AA@
  002aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LOGPLCGG@time_get_clock_info?$AA@
  002b1	e8 00 00 00 00	 call	 _PyParallel_Guard
  002b6	85 c0		 test	 eax, eax
  002b8	75 1d		 jne	 SHORT $LN17@time_get_c
  002ba	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  002bf	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$64217[rsp], rax
  002c4	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR obj$[rsp], 0
  002cd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$64217[rsp]
  002d2	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@time_get_c:
  002d7	33 c0		 xor	 eax, eax
  002d9	85 c0		 test	 eax, eax
  002db	75 ab		 jne	 SHORT $LN20@time_get_c

; 1222 : 
; 1223 :     assert(info.adjustable != -1);

  002dd	83 7c 24 5c ff	 cmp	 DWORD PTR info$[rsp+12], -1
  002e2	75 1c		 jne	 SHORT $LN46@time_get_c
  002e4	41 b8 c7 04 00
	00		 mov	 r8d, 1223		; 000004c7H
  002ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@HKMBAFBM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAt?$AAi?$AAm?$AAe?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  002f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@DNFGPPPP@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAa?$AAd?$AAj?$AAu?$AAs?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
  002f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002fe	33 c0		 xor	 eax, eax
$LN46@time_get_c:

; 1224 :     obj = PyBool_FromLong(info.adjustable);

  00300	8b 4c 24 5c	 mov	 ecx, DWORD PTR info$[rsp+12]
  00304	e8 00 00 00 00	 call	 PyBool_FromLong
  00309	48 89 44 24 48	 mov	 QWORD PTR obj$[rsp], rax

; 1225 :     if (obj == NULL)

  0030e	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00314	75 05		 jne	 SHORT $LN16@time_get_c

; 1226 :         goto error;

  00316	e9 82 01 00 00	 jmp	 $error$64195
$LN16@time_get_c:

; 1227 :     if (PyDict_SetItemString(dict, "adjustable", obj) == -1)

  0031b	4c 8b 44 24 48	 mov	 r8, QWORD PTR obj$[rsp]
  00320	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NBNKHOJN@adjustable?$AA@
  00327	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dict$[rsp]
  0032c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00331	83 f8 ff	 cmp	 eax, -1
  00334	75 05		 jne	 SHORT $LN15@time_get_c

; 1228 :         goto error;

  00336	e9 62 01 00 00	 jmp	 $error$64195
$LN15@time_get_c:
$LN14@time_get_c:

; 1229 :     Py_CLEAR(obj);

  0033b	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00341	74 47		 je	 SHORT $LN11@time_get_c
  00343	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0034b	4c 8b 4c 24 48	 mov	 r9, QWORD PTR obj$[rsp]
  00350	41 b8 cd 04 00
	00		 mov	 r8d, 1229		; 000004cdH
  00356	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HJACFKFO@?4?4?2Modules?2timemodule?4c?$AA@
  0035d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LOGPLCGG@time_get_clock_info?$AA@
  00364	e8 00 00 00 00	 call	 _PyParallel_Guard
  00369	85 c0		 test	 eax, eax
  0036b	75 1d		 jne	 SHORT $LN11@time_get_c
  0036d	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00372	48 89 44 24 78	 mov	 QWORD PTR _py_tmp$64231[rsp], rax
  00377	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR obj$[rsp], 0
  00380	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _py_tmp$64231[rsp]
  00385	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@time_get_c:
  0038a	33 c0		 xor	 eax, eax
  0038c	85 c0		 test	 eax, eax
  0038e	75 ab		 jne	 SHORT $LN14@time_get_c

; 1230 : 
; 1231 :     assert(info.resolution > 0.0);

  00390	f2 0f 10 44 24
	60		 movsdx	 xmm0, QWORD PTR info$[rsp+16]
  00396	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0039e	77 1c		 ja	 SHORT $LN47@time_get_c
  003a0	41 b8 cf 04 00
	00		 mov	 r8d, 1231		; 000004cfH
  003a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@HKMBAFBM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAt?$AAi?$AAm?$AAe?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  003ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@MNFOPGHD@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AA?$AA@
  003b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003ba	33 c0		 xor	 eax, eax
$LN47@time_get_c:

; 1232 :     assert(info.resolution <= 1.0);

  003bc	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  003c4	66 0f 2f 44 24
	60		 comisd	 xmm0, QWORD PTR info$[rsp+16]
  003ca	73 1c		 jae	 SHORT $LN48@time_get_c
  003cc	41 b8 d0 04 00
	00		 mov	 r8d, 1232		; 000004d0H
  003d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@HKMBAFBM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAt?$AAi?$AAm?$AAe?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  003d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GINHKBNI@?$AAi?$AAn?$AAf?$AAo?$AA?4?$AAr?$AAe?$AAs?$AAo?$AAl?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AA?$AA@
  003e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003e6	33 c0		 xor	 eax, eax
$LN48@time_get_c:

; 1233 :     obj = PyFloat_FromDouble(info.resolution);

  003e8	f2 0f 10 44 24
	60		 movsdx	 xmm0, QWORD PTR info$[rsp+16]
  003ee	e8 00 00 00 00	 call	 PyFloat_FromDouble
  003f3	48 89 44 24 48	 mov	 QWORD PTR obj$[rsp], rax

; 1234 :     if (obj == NULL)

  003f8	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  003fe	75 05		 jne	 SHORT $LN10@time_get_c

; 1235 :         goto error;

  00400	e9 98 00 00 00	 jmp	 $error$64195
$LN10@time_get_c:

; 1236 :     if (PyDict_SetItemString(dict, "resolution", obj) == -1)

  00405	4c 8b 44 24 48	 mov	 r8, QWORD PTR obj$[rsp]
  0040a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@CAGNKJED@resolution?$AA@
  00411	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dict$[rsp]
  00416	e8 00 00 00 00	 call	 PyDict_SetItemString
  0041b	83 f8 ff	 cmp	 eax, -1
  0041e	75 02		 jne	 SHORT $LN9@time_get_c

; 1237 :         goto error;

  00420	eb 7b		 jmp	 SHORT $error$64195
$LN9@time_get_c:
$LN8@time_get_c:

; 1238 :     Py_CLEAR(obj);

  00422	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00428	74 4d		 je	 SHORT $LN5@time_get_c
  0042a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00432	4c 8b 4c 24 48	 mov	 r9, QWORD PTR obj$[rsp]
  00437	41 b8 d6 04 00
	00		 mov	 r8d, 1238		; 000004d6H
  0043d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HJACFKFO@?4?4?2Modules?2timemodule?4c?$AA@
  00444	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LOGPLCGG@time_get_clock_info?$AA@
  0044b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00450	85 c0		 test	 eax, eax
  00452	75 23		 jne	 SHORT $LN5@time_get_c
  00454	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00459	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _py_tmp$64247[rsp], rax
  00461	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR obj$[rsp], 0
  0046a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$64247[rsp]
  00472	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@time_get_c:
  00477	33 c0		 xor	 eax, eax
  00479	85 c0		 test	 eax, eax
  0047b	75 a5		 jne	 SHORT $LN8@time_get_c

; 1239 : 
; 1240 :     ns = _PyNamespace_New(dict);

  0047d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dict$[rsp]
  00482	e8 00 00 00 00	 call	 _PyNamespace_New
  00487	48 89 44 24 30	 mov	 QWORD PTR ns$[rsp], rax

; 1241 :     Py_DECREF(dict);

  0048c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dict$[rsp]
  00491	e8 00 00 00 00	 call	 _Py_DecRef

; 1242 :     return ns;

  00496	48 8b 44 24 30	 mov	 rax, QWORD PTR ns$[rsp]
  0049b	eb 24		 jmp	 SHORT $LN42@time_get_c
$error$64195:

; 1243 : 
; 1244 : error:
; 1245 :     Py_DECREF(dict);

  0049d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dict$[rsp]
  004a2	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@time_get_c:

; 1246 :     Py_XDECREF(obj);

  004a7	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  004ad	74 0a		 je	 SHORT $LN1@time_get_c
  004af	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  004b4	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@time_get_c:
  004b9	33 c0		 xor	 eax, eax
  004bb	85 c0		 test	 eax, eax
  004bd	75 e8		 jne	 SHORT $LN4@time_get_c

; 1247 :     return NULL;

  004bf	33 c0		 xor	 eax, eax
$LN42@time_get_c:

; 1248 : }

  004c1	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  004c8	c3		 ret	 0
time_get_clock_info ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@HIOPEIIP@struct_time?$AA@		; `string'
PUBLIC	??_C@_0BB@KCNFHFFE@_STRUCT_TM_ITEMS?$AA@	; `string'
PUBLIC	PyInit_time
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	__imp_GetVersionExA:PROC
EXTRN	PyStructSequence_InitType:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
_BSS	SEGMENT
initialized DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_time DD imagerel $LN6
	DD	imagerel $LN6+206
	DD	imagerel $unwind$PyInit_time
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_time DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0M@HIOPEIIP@struct_time?$AA@
CONST	SEGMENT
??_C@_0M@HIOPEIIP@struct_time?$AA@ DB 'struct_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KCNFHFFE@_STRUCT_TM_ITEMS?$AA@
CONST	SEGMENT
??_C@_0BB@KCNFHFFE@_STRUCT_TM_ITEMS?$AA@ DB '_STRUCT_TM_ITEMS', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit_time
_TEXT	SEGMENT
m$ = 32
PyInit_time PROC					; COMDAT

; 1461 : {

$LN6:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1462 :     PyObject *m;
; 1463 :     m = PyModule_Create(&timemodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:timemodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 20	 mov	 QWORD PTR m$[rsp], rax

; 1464 :     if (m == NULL)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR m$[rsp], 0
  00020	75 07		 jne	 SHORT $LN3@PyInit_tim

; 1465 :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 a0 00 00 00	 jmp	 $LN4@PyInit_tim
$LN3@PyInit_tim:

; 1466 : 
; 1467 :     /* Set, or reset, module variables like time.timezone */
; 1468 :     PyInit_timezone(m);

  00029	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0002e	e8 00 00 00 00	 call	 PyInit_timezone

; 1469 : 
; 1470 :     if (!initialized) {

  00033	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR initialized, 0
  0003a	75 43		 jne	 SHORT $LN2@PyInit_tim

; 1471 :         PyStructSequence_InitType(&StructTimeType,
; 1472 :                                   &struct_time_type_desc);

  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:struct_time_type_desc
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StructTimeType
  0004a	e8 00 00 00 00	 call	 PyStructSequence_InitType

; 1473 : 
; 1474 : #ifdef MS_WINDOWS
; 1475 :         winver.dwOSVersionInfoSize = sizeof(winver);

  0004f	c7 05 00 00 00
	00 9c 00 00 00	 mov	 DWORD PTR winver, 156	; 0000009cH

; 1476 :         if (!GetVersionEx((OSVERSIONINFO*)&winver)) {

  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:winver
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetVersionExA
  00066	85 c0		 test	 eax, eax
  00068	75 15		 jne	 SHORT $LN1@PyInit_tim

; 1477 :             Py_DECREF(m);

  0006a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0006f	e8 00 00 00 00	 call	 _Py_DecRef

; 1478 :             PyErr_SetFromWindowsErr(0);

  00074	33 c9		 xor	 ecx, ecx
  00076	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1479 :             return NULL;

  0007b	33 c0		 xor	 eax, eax
  0007d	eb 4a		 jmp	 SHORT $LN4@PyInit_tim
$LN1@PyInit_tim:
$LN2@PyInit_tim:

; 1480 :         }
; 1481 : #endif
; 1482 :     }
; 1483 :     Py_INCREF(&StructTimeType);

  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StructTimeType
  00086	e8 00 00 00 00	 call	 _Py_IncRef

; 1484 : #ifdef HAVE_STRUCT_TM_TM_ZONE
; 1485 :     PyModule_AddIntConstant(m, "_STRUCT_TM_ITEMS", 11);
; 1486 : #else
; 1487 :     PyModule_AddIntConstant(m, "_STRUCT_TM_ITEMS", 9);

  0008b	41 b8 09 00 00
	00		 mov	 r8d, 9
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@KCNFHFFE@_STRUCT_TM_ITEMS?$AA@
  00098	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0009d	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1488 : #endif
; 1489 :     PyModule_AddObject(m, "struct_time", (PyObject*) &StructTimeType);

  000a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:StructTimeType
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@HIOPEIIP@struct_time?$AA@
  000b0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000b5	e8 00 00 00 00	 call	 PyModule_AddObject

; 1490 :     initialized = 1;

  000ba	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR initialized, 1

; 1491 :     return m;

  000c4	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
$LN4@PyInit_tim:

; 1492 : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
PyInit_time ENDP
_TEXT	ENDS
PUBLIC	??_C@_06CNBAGEMF@tzname?$AA@			; `string'
PUBLIC	??_C@_04INOFHMAI@?$CINN?$CJ?$AA@		; `string'
PUBLIC	??_C@_08DNLKDNOJ@daylight?$AA@			; `string'
PUBLIC	??_C@_07NANNIPAG@altzone?$AA@			; `string'
PUBLIC	??_C@_08EDKBBHCH@timezone?$AA@			; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	PyUnicode_DecodeLocale:PROC
EXTRN	__imp_tzname:BYTE
EXTRN	__imp_daylight:DWORD
EXTRN	__imp_timezone:DWORD
EXTRN	__imp_tzset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_timezone DD imagerel PyInit_timezone
	DD	imagerel PyInit_timezone+205
	DD	imagerel $unwind$PyInit_timezone
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_timezone DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_06CNBAGEMF@tzname?$AA@
CONST	SEGMENT
??_C@_06CNBAGEMF@tzname?$AA@ DB 'tzname', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04INOFHMAI@?$CINN?$CJ?$AA@
CONST	SEGMENT
??_C@_04INOFHMAI@?$CINN?$CJ?$AA@ DB '(NN)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DNLKDNOJ@daylight?$AA@
CONST	SEGMENT
??_C@_08DNLKDNOJ@daylight?$AA@ DB 'daylight', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NANNIPAG@altzone?$AA@
CONST	SEGMENT
??_C@_07NANNIPAG@altzone?$AA@ DB 'altzone', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EDKBBHCH@timezone?$AA@
CONST	SEGMENT
??_C@_08EDKBBHCH@timezone?$AA@ DB 'timezone', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit_timezone
_TEXT	SEGMENT
otz0$ = 32
otz1$ = 40
m$ = 64
PyInit_timezone PROC					; COMDAT

; 1256 : PyInit_timezone(PyObject *m) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1257 :     /* This code moved from PyInit_time wholesale to allow calling it from
; 1258 :     time_tzset. In the future, some parts of it can be moved back
; 1259 :     (for platforms that don't HAVE_WORKING_TZSET, when we know what they
; 1260 :     are), and the extraneous calls to tzset(3) should be removed.
; 1261 :     I haven't done this yet, as I don't want to change this code as
; 1262 :     little as possible when introducing the time.tzset and time.tzsetwall
; 1263 :     methods. This should simply be a method of doing the following once,
; 1264 :     at the top of this function and removing the call to tzset() from
; 1265 :     time_tzset():
; 1266 : 
; 1267 :         #ifdef HAVE_TZSET
; 1268 :         tzset()
; 1269 :         #endif
; 1270 : 
; 1271 :     And I'm lazy and hate C so nyer.
; 1272 :      */
; 1273 : #if defined(HAVE_TZNAME) && !defined(__GLIBC__) && !defined(__CYGWIN__)
; 1274 :     PyObject *otz0, *otz1;
; 1275 :     tzset();

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tzset

; 1276 : #ifdef PYOS_OS2
; 1277 :     PyModule_AddIntConstant(m, "timezone", _timezone);
; 1278 : #else /* !PYOS_OS2 */
; 1279 :     PyModule_AddIntConstant(m, "timezone", timezone);

  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_timezone
  00016	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EDKBBHCH@timezone?$AA@
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  00025	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1280 : #endif /* PYOS_OS2 */
; 1281 : #ifdef HAVE_ALTZONE
; 1282 :     PyModule_AddIntConstant(m, "altzone", altzone);
; 1283 : #else
; 1284 : #ifdef PYOS_OS2
; 1285 :     PyModule_AddIntConstant(m, "altzone", _timezone-3600);
; 1286 : #else /* !PYOS_OS2 */
; 1287 :     PyModule_AddIntConstant(m, "altzone", timezone-3600);

  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_timezone
  00031	8b 00		 mov	 eax, DWORD PTR [rax]
  00033	2d 10 0e 00 00	 sub	 eax, 3600		; 00000e10H
  00038	44 8b c0	 mov	 r8d, eax
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NANNIPAG@altzone?$AA@
  00042	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  00047	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1288 : #endif /* PYOS_OS2 */
; 1289 : #endif
; 1290 :     PyModule_AddIntConstant(m, "daylight", daylight);

  0004c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_daylight
  00053	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DNLKDNOJ@daylight?$AA@
  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  00062	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1291 :     otz0 = PyUnicode_DecodeLocale(tzname[0], "surrogateescape");

  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@GMJLDMKP@surrogateescape?$AA@
  0006e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_tzname
  00075	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00078	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  0007d	48 89 44 24 20	 mov	 QWORD PTR otz0$[rsp], rax

; 1292 :     otz1 = PyUnicode_DecodeLocale(tzname[1], "surrogateescape");

  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@GMJLDMKP@surrogateescape?$AA@
  00089	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_tzname
  00090	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00094	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  00099	48 89 44 24 28	 mov	 QWORD PTR otz1$[rsp], rax

; 1293 :     PyModule_AddObject(m, "tzname", Py_BuildValue("(NN)", otz0, otz1));

  0009e	4c 8b 44 24 28	 mov	 r8, QWORD PTR otz1$[rsp]
  000a3	48 8b 54 24 20	 mov	 rdx, QWORD PTR otz0$[rsp]
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04INOFHMAI@?$CINN?$CJ?$AA@
  000af	e8 00 00 00 00	 call	 Py_BuildValue
  000b4	4c 8b c0	 mov	 r8, rax
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06CNBAGEMF@tzname?$AA@
  000be	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  000c3	e8 00 00 00 00	 call	 PyModule_AddObject

; 1294 : #else /* !HAVE_TZNAME || __GLIBC__ || __CYGWIN__*/
; 1295 : #ifdef HAVE_STRUCT_TM_TM_ZONE
; 1296 :     {
; 1297 : #define YEAR ((time_t)((365 * 24 + 6) * 3600))
; 1298 :         time_t t;
; 1299 :         struct tm *p;
; 1300 :         long janzone, julyzone;
; 1301 :         char janname[10], julyname[10];
; 1302 :         t = (time((time_t *)0) / YEAR) * YEAR;
; 1303 :         p = localtime(&t);
; 1304 :         janzone = -p->tm_gmtoff;
; 1305 :         strncpy(janname, p->tm_zone ? p->tm_zone : "   ", 9);
; 1306 :         janname[9] = '\0';
; 1307 :         t += YEAR/2;
; 1308 :         p = localtime(&t);
; 1309 :         julyzone = -p->tm_gmtoff;
; 1310 :         strncpy(julyname, p->tm_zone ? p->tm_zone : "   ", 9);
; 1311 :         julyname[9] = '\0';
; 1312 : 
; 1313 :         if( janzone < julyzone ) {
; 1314 :             /* DST is reversed in the southern hemisphere */
; 1315 :             PyModule_AddIntConstant(m, "timezone", julyzone);
; 1316 :             PyModule_AddIntConstant(m, "altzone", janzone);
; 1317 :             PyModule_AddIntConstant(m, "daylight",
; 1318 :                                     janzone != julyzone);
; 1319 :             PyModule_AddObject(m, "tzname",
; 1320 :                                Py_BuildValue("(zz)",
; 1321 :                                              julyname, janname));
; 1322 :         } else {
; 1323 :             PyModule_AddIntConstant(m, "timezone", janzone);
; 1324 :             PyModule_AddIntConstant(m, "altzone", julyzone);
; 1325 :             PyModule_AddIntConstant(m, "daylight",
; 1326 :                                     janzone != julyzone);
; 1327 :             PyModule_AddObject(m, "tzname",
; 1328 :                                Py_BuildValue("(zz)",
; 1329 :                                              janname, julyname));
; 1330 :         }
; 1331 :     }
; 1332 : #else
; 1333 : #endif /* HAVE_STRUCT_TM_TM_ZONE */
; 1334 : #ifdef __CYGWIN__
; 1335 :     tzset();
; 1336 :     PyModule_AddIntConstant(m, "timezone", _timezone);
; 1337 :     PyModule_AddIntConstant(m, "altzone", _timezone-3600);
; 1338 :     PyModule_AddIntConstant(m, "daylight", _daylight);
; 1339 :     PyModule_AddObject(m, "tzname",
; 1340 :                        Py_BuildValue("(zz)", _tzname[0], _tzname[1]));
; 1341 : #endif /* __CYGWIN__ */
; 1342 : #endif /* !HAVE_TZNAME || __GLIBC__ || __CYGWIN__*/
; 1343 : 
; 1344 : #if defined(HAVE_CLOCK_GETTIME)
; 1345 :     PyModule_AddIntMacro(m, CLOCK_REALTIME);
; 1346 : #ifdef CLOCK_MONOTONIC
; 1347 :     PyModule_AddIntMacro(m, CLOCK_MONOTONIC);
; 1348 : #endif
; 1349 : #ifdef CLOCK_MONOTONIC_RAW
; 1350 :     PyModule_AddIntMacro(m, CLOCK_MONOTONIC_RAW);
; 1351 : #endif
; 1352 : #ifdef CLOCK_HIGHRES
; 1353 :     PyModule_AddIntMacro(m, CLOCK_HIGHRES);
; 1354 : #endif
; 1355 : #ifdef CLOCK_PROCESS_CPUTIME_ID
; 1356 :     PyModule_AddIntMacro(m, CLOCK_PROCESS_CPUTIME_ID);
; 1357 : #endif
; 1358 : #ifdef CLOCK_THREAD_CPUTIME_ID
; 1359 :     PyModule_AddIntMacro(m, CLOCK_THREAD_CPUTIME_ID);
; 1360 : #endif
; 1361 : #endif /* HAVE_CLOCK_GETTIME */
; 1362 : }

  000c8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cc	c3		 ret	 0
PyInit_timezone ENDP
_TEXT	ENDS
PUBLIC	__real@3eb0c6f7a0b5ed8d
EXTRN	_PyTime_gettimeofday_info:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$floattime DD imagerel floattime
	DD	imagerel floattime+67
	DD	imagerel $unwind$floattime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$floattime DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-006
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT floattime
_TEXT	SEGMENT
t$ = 32
info$ = 64
floattime PROC						; COMDAT

; 1496 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1497 :     _PyTime_timeval t;
; 1498 : #ifdef HAVE_CLOCK_GETTIME
; 1499 :     struct timespec tp;
; 1500 :     int ret;
; 1501 : 
; 1502 :     /* _PyTime_gettimeofday() does not use clock_gettime()
; 1503 :        because it would require to link Python to the rt (real-time)
; 1504 :        library, at least on Linux */
; 1505 :     ret = clock_gettime(CLOCK_REALTIME, &tp);
; 1506 :     if (ret == 0) {
; 1507 :         if (info) {
; 1508 :             struct timespec res;
; 1509 :             info->implementation = "clock_gettime(CLOCK_REALTIME)";
; 1510 :             info->monotonic = 0;
; 1511 :             info->adjustable = 1;
; 1512 :             if (clock_getres(CLOCK_REALTIME, &res) == 0)
; 1513 :                 info->resolution = res.tv_sec + res.tv_nsec * 1e-9;
; 1514 :             else
; 1515 :                 info->resolution = 1e-9;
; 1516 :         }
; 1517 :         return PyFloat_FromDouble(tp.tv_sec + tp.tv_nsec * 1e-9);
; 1518 :     }
; 1519 : #endif
; 1520 :     _PyTime_gettimeofday_info(&t, info);

  00009	48 8b 54 24 40	 mov	 rdx, QWORD PTR info$[rsp]
  0000e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR t$[rsp]
  00013	e8 00 00 00 00	 call	 _PyTime_gettimeofday_info

; 1521 :     return PyFloat_FromDouble((double)t.tv_sec + t.tv_usec * 1e-6);

  00018	66 0f ef c0	 pxor	 xmm0, xmm0
  0001c	f2 48 0f 2a 44
	24 20		 cvtsi2sd xmm0, QWORD PTR t$[rsp]
  00023	66 0f 6e 4c 24
	28		 movd	 xmm1, DWORD PTR t$[rsp+8]
  00029	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0002d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3eb0c6f7a0b5ed8d
  00035	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00039	e8 00 00 00 00	 call	 PyFloat_FromDouble

; 1522 : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
floattime ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@KJCKCBEI@sleep?5length?5is?5too?5large?$AA@ ; `string'
PUBLIC	__real@41efffffffe00000
EXTRN	PyExc_IOError:QWORD
EXTRN	PyEval_RestoreThread:PROC
EXTRN	__imp_WaitForSingleObject:PROC
EXTRN	__imp_ResetEvent:PROC
EXTRN	_PyOS_SigintEvent:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	_PyOS_IsMainThread:PROC
EXTRN	PyEval_SaveThread:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$floatsleep DD imagerel floatsleep
	DD	imagerel floatsleep+229
	DD	imagerel $unwind$floatsleep
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$floatsleep DD 010a01H
	DD	0a20aH
xdata	ENDS
;	COMDAT ??_C@_0BK@KJCKCBEI@sleep?5length?5is?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BK@KJCKCBEI@sleep?5length?5is?5too?5large?$AA@ DB 'sleep length is'
	DB	' too large', 00H				; `string'
CONST	ENDS
;	COMDAT __real@41efffffffe00000
CONST	SEGMENT
__real@41efffffffe00000 DQ 041efffffffe00000r	; 4.29497e+009
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT floatsleep
_TEXT	SEGMENT
ul_millis$64328 = 32
millisecs$64327 = 40
_save$64332 = 48
rc$64337 = 56
hInterruptEvent$64338 = 64
secs$ = 96
floatsleep PROC						; COMDAT

; 1531 : {

  00000	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR [rsp+8], xmm0
  00006	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1532 : /* XXX Should test for MS_WINDOWS first! */
; 1533 : #if defined(HAVE_SELECT) && !defined(__EMX__)
; 1534 :     struct timeval t;
; 1535 :     double frac;
; 1536 :     int err;
; 1537 : 
; 1538 :     frac = fmod(secs, 1.0);
; 1539 :     secs = floor(secs);
; 1540 :     t.tv_sec = (long)secs;
; 1541 :     t.tv_usec = (long)(frac*1000000.0);
; 1542 :     Py_BEGIN_ALLOW_THREADS
; 1543 :     err = select(0, (fd_set *)0, (fd_set *)0, (fd_set *)0, &t);
; 1544 :     Py_END_ALLOW_THREADS
; 1545 :     if (err != 0) {
; 1546 : #ifdef EINTR
; 1547 :         if (errno == EINTR) {
; 1548 :             if (PyErr_CheckSignals())
; 1549 :                 return -1;
; 1550 :         }
; 1551 :         else
; 1552 : #endif
; 1553 :         {
; 1554 :             PyErr_SetFromErrno(PyExc_IOError);
; 1555 :             return -1;
; 1556 :         }
; 1557 :     }
; 1558 : #elif defined(__WATCOMC__) && !defined(__QNX__)
; 1559 :     /* XXX Can't interrupt this sleep */
; 1560 :     Py_BEGIN_ALLOW_THREADS
; 1561 :     delay((int)(secs * 1000 + 0.5));  /* delay() uses milliseconds */
; 1562 :     Py_END_ALLOW_THREADS
; 1563 : #elif defined(MS_WINDOWS)
; 1564 :     {
; 1565 :         double millisecs = secs * 1000.0;

  0000a	f2 0f 10 44 24
	60		 movsdx	 xmm0, QWORD PTR secs$[rsp]
  00010	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@408f400000000000
  00018	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR millisecs$64327[rsp], xmm0

; 1566 :         unsigned long ul_millis;
; 1567 : 
; 1568 :         if (millisecs > (double)ULONG_MAX) {

  0001e	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR millisecs$64327[rsp]
  00024	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  0002c	76 1d		 jbe	 SHORT $LN5@floatsleep

; 1569 :             PyErr_SetString(PyExc_OverflowError,
; 1570 :                             "sleep length is too large");

  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@KJCKCBEI@sleep?5length?5is?5too?5large?$AA@
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0003c	e8 00 00 00 00	 call	 PyErr_SetString

; 1571 :             return -1;

  00041	b8 ff ff ff ff	 mov	 eax, -1
  00046	e9 95 00 00 00	 jmp	 $LN6@floatsleep
$LN5@floatsleep:

; 1572 :         }
; 1573 :         Py_BEGIN_ALLOW_THREADS

  0004b	e8 00 00 00 00	 call	 PyEval_SaveThread
  00050	48 89 44 24 30	 mov	 QWORD PTR _save$64332[rsp], rax

; 1574 :         /* Allow sleep(0) to maintain win32 semantics, and as decreed
; 1575 :          * by Guido, only the main thread can be interrupted.
; 1576 :          */
; 1577 :         ul_millis = (unsigned long)millisecs;

  00055	f2 48 0f 2c 44
	24 28		 cvttsd2si rax, QWORD PTR millisecs$64327[rsp]
  0005c	89 44 24 20	 mov	 DWORD PTR ul_millis$64328[rsp], eax

; 1578 :         if (ul_millis == 0 || !_PyOS_IsMainThread())

  00060	83 7c 24 20 00	 cmp	 DWORD PTR ul_millis$64328[rsp], 0
  00065	74 09		 je	 SHORT $LN3@floatsleep
  00067	e8 00 00 00 00	 call	 _PyOS_IsMainThread
  0006c	85 c0		 test	 eax, eax
  0006e	75 0c		 jne	 SHORT $LN4@floatsleep
$LN3@floatsleep:

; 1579 :             Sleep(ul_millis);

  00070	8b 4c 24 20	 mov	 ecx, DWORD PTR ul_millis$64328[rsp]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 1580 :         else {

  0007a	eb 58		 jmp	 SHORT $LN2@floatsleep
$LN4@floatsleep:

; 1581 :             DWORD rc;
; 1582 :             HANDLE hInterruptEvent = _PyOS_SigintEvent();

  0007c	e8 00 00 00 00	 call	 _PyOS_SigintEvent
  00081	48 89 44 24 40	 mov	 QWORD PTR hInterruptEvent$64338[rsp], rax

; 1583 :             ResetEvent(hInterruptEvent);

  00086	48 8b 4c 24 40	 mov	 rcx, QWORD PTR hInterruptEvent$64338[rsp]
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ResetEvent

; 1584 :             rc = WaitForSingleObject(hInterruptEvent, ul_millis);

  00091	8b 54 24 20	 mov	 edx, DWORD PTR ul_millis$64328[rsp]
  00095	48 8b 4c 24 40	 mov	 rcx, QWORD PTR hInterruptEvent$64338[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject
  000a0	89 44 24 38	 mov	 DWORD PTR rc$64337[rsp], eax

; 1585 :             if (rc == WAIT_OBJECT_0) {

  000a4	83 7c 24 38 00	 cmp	 DWORD PTR rc$64337[rsp], 0
  000a9	75 29		 jne	 SHORT $LN1@floatsleep

; 1586 :                 Py_BLOCK_THREADS

  000ab	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _save$64332[rsp]
  000b0	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1587 :                 errno = EINTR;

  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000bb	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 1588 :                 PyErr_SetFromErrno(PyExc_IOError);

  000c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000c8	e8 00 00 00 00	 call	 PyErr_SetFromErrno

; 1589 :                 return -1;

  000cd	b8 ff ff ff ff	 mov	 eax, -1
  000d2	eb 0c		 jmp	 SHORT $LN6@floatsleep
$LN1@floatsleep:
$LN2@floatsleep:

; 1590 :             }
; 1591 :         }
; 1592 :         Py_END_ALLOW_THREADS

  000d4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _save$64332[rsp]
  000d9	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1593 :     }
; 1594 : #elif defined(PYOS_OS2)
; 1595 :     /* This Sleep *IS* Interruptable by Exceptions */
; 1596 :     Py_BEGIN_ALLOW_THREADS
; 1597 :     if (DosSleep(secs * 1000) != NO_ERROR) {
; 1598 :         Py_BLOCK_THREADS
; 1599 :         PyErr_SetFromErrno(PyExc_IOError);
; 1600 :         return -1;
; 1601 :     }
; 1602 :     Py_END_ALLOW_THREADS
; 1603 : #else
; 1604 :     /* XXX Can't interrupt this sleep */
; 1605 :     Py_BEGIN_ALLOW_THREADS
; 1606 :     sleep((int)secs);
; 1607 :     Py_END_ALLOW_THREADS
; 1608 : #endif
; 1609 : 
; 1610 :     return 0;

  000de	33 c0		 xor	 eax, eax
$LN6@floatsleep:

; 1611 : }

  000e0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e4	c3		 ret	 0
floatsleep ENDP
_TEXT	ENDS
END
