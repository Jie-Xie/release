; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08PFHPBGLK@__file__?$AA@			; `string'
PUBLIC	??_C@_0DI@FKDNMCHP@initialization?5of?5?$CFs?5did?5not?5ret@ ; `string'
PUBLIC	??_C@_0DB@EMJADMNK@initialization?5of?5?$CFs?5raised?5unre@ ; `string'
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0DJ@KFOAKLBA@dynamic?5module?5does?5not?5define?5i@ ; `string'
PUBLIC	??_C@_1DC@EOOKGLFI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAa?$AAs?$AAc?$AAi?$AAi?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@FFIOGGPP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AAd?$AAl?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_05OJENGABA@ascii?$AA@			; `string'
PUBLIC	_Py_IncRef
PUBLIC	_PyImport_LoadDynamicModule
EXTRN	_PyImport_FixupExtensionObject:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_GetDef:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	_Py_PackageContext:QWORD
EXTRN	PyErr_SetImportError:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	_PyImport_GetDynLoadWindows:PROC
EXTRN	__imp_strrchr:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyUnicode_AsEncodedString:PROC
EXTRN	_PyImport_FindExtensionObject:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\importdl.c
pdata	SEGMENT
$pdata$_PyImport_LoadDynamicModule DD imagerel $LN21
	DD	imagerel $LN21+709
	DD	imagerel $unwind$_PyImport_LoadDynamicModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_LoadDynamicModule DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_08PFHPBGLK@__file__?$AA@
CONST	SEGMENT
??_C@_08PFHPBGLK@__file__?$AA@ DB '__file__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@FKDNMCHP@initialization?5of?5?$CFs?5did?5not?5ret@
CONST	SEGMENT
??_C@_0DI@FKDNMCHP@initialization?5of?5?$CFs?5did?5not?5ret@ DB 'initiali'
	DB	'zation of %s did not return an extension module', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@EMJADMNK@initialization?5of?5?$CFs?5raised?5unre@
CONST	SEGMENT
??_C@_0DB@EMJADMNK@initialization?5of?5?$CFs?5raised?5unre@ DB 'initializ'
	DB	'ation of %s raised unreported exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@KFOAKLBA@dynamic?5module?5does?5not?5define?5i@
CONST	SEGMENT
??_C@_0DJ@KFOAKLBA@dynamic?5module?5does?5not?5define?5i@ DB 'dynamic mod'
	DB	'ule does not define init function (PyInit_%s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@EOOKGLFI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAa?$AAs?$AAc?$AAi?$AAi?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@EOOKGLFI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAa?$AAs?$AAc?$AAi?$AAi?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'c', 00H, 'i', 00H, 'i', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@FFIOGGPP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AAd?$AAl?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@FFIOGGPP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AAd?$AAl?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, 'd', 00H, 'l', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJENGABA@ascii?$AA@
CONST	SEGMENT
??_C@_05OJENGABA@ascii?$AA@ DB 'ascii', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyImport_LoadDynamicModule
_TEXT	SEGMENT
p$ = 32
shortname$ = 40
p0$ = 48
lastdot$ = 56
packagecontext$ = 64
nameascii$ = 72
oldcontext$ = 80
def$ = 88
namestr$ = 96
m$ = 104
msg$120459 = 112
name$ = 144
path$ = 152
fp$ = 160
_PyImport_LoadDynamicModule PROC			; COMDAT

; 25   : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 26   :     PyObject *m = NULL;

  00016	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR m$[rsp], 0

; 27   : #ifndef MS_WINDOWS
; 28   :     PyObject *pathbytes;
; 29   : #endif
; 30   :     PyObject *nameascii;
; 31   :     char *namestr, *lastdot, *shortname, *packagecontext, *oldcontext;
; 32   :     dl_funcptr p0;
; 33   :     PyObject* (*p)(void);
; 34   :     struct PyModuleDef *def;
; 35   : 
; 36   :     m = _PyImport_FindExtensionObject(name, path);

  0001f	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR path$[rsp]
  00027	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  0002f	e8 00 00 00 00	 call	 _PyImport_FindExtensionObject
  00034	48 89 44 24 68	 mov	 QWORD PTR m$[rsp], rax

; 37   :     if (m != NULL) {

  00039	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$[rsp], 0
  0003f	74 14		 je	 SHORT $LN17@PyImport_L

; 38   :         Py_INCREF(m);

  00041	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  00046	e8 00 00 00 00	 call	 _Py_IncRef

; 39   :         return m;

  0004b	48 8b 44 24 68	 mov	 rax, QWORD PTR m$[rsp]
  00050	e9 68 02 00 00	 jmp	 $LN18@PyImport_L
$LN17@PyImport_L:

; 40   :     }
; 41   : 
; 42   :     /* name must be encodable to ASCII because dynamic module must have a
; 43   :        function called "PyInit_NAME", they are written in C, and the C language
; 44   :        doesn't accept non-ASCII identifiers. */
; 45   :     nameascii = PyUnicode_AsEncodedString(name, "ascii", NULL);

  00055	45 33 c0	 xor	 r8d, r8d
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OJENGABA@ascii?$AA@
  0005f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00067	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString
  0006c	48 89 44 24 48	 mov	 QWORD PTR nameascii$[rsp], rax

; 46   :     if (nameascii == NULL)

  00071	48 83 7c 24 48
	00		 cmp	 QWORD PTR nameascii$[rsp], 0
  00077	75 07		 jne	 SHORT $LN16@PyImport_L

; 47   :         return NULL;

  00079	33 c0		 xor	 eax, eax
  0007b	e9 3d 02 00 00	 jmp	 $LN18@PyImport_L
$LN16@PyImport_L:

; 48   : 
; 49   :     namestr = PyBytes_AS_STRING(nameascii);

  00080	48 8b 44 24 48	 mov	 rax, QWORD PTR nameascii$[rsp]
  00085	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00089	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008f	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00094	85 c0		 test	 eax, eax
  00096	75 1c		 jne	 SHORT $LN20@PyImport_L
  00098	41 b8 31 00 00
	00		 mov	 r8d, 49			; 00000031H
  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@FFIOGGPP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AAd?$AAl?$AA?4?$AAc?$AA?$AA@
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@EOOKGLFI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAa?$AAs?$AAc?$AAi?$AAi?$AA?$CJ?$AA?$AA@
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b2	33 c0		 xor	 eax, eax
$LN20@PyImport_L:
  000b4	48 8b 44 24 48	 mov	 rax, QWORD PTR nameascii$[rsp]
  000b9	48 83 c0 78	 add	 rax, 120		; 00000078H
  000bd	48 89 44 24 60	 mov	 QWORD PTR namestr$[rsp], rax

; 50   :     if (namestr == NULL)

  000c2	48 83 7c 24 60
	00		 cmp	 QWORD PTR namestr$[rsp], 0
  000c8	75 05		 jne	 SHORT $LN15@PyImport_L

; 51   :         goto error;

  000ca	e9 ca 01 00 00	 jmp	 $error$120449
$LN15@PyImport_L:

; 52   : 
; 53   :     lastdot = strrchr(namestr, '.');

  000cf	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  000d4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR namestr$[rsp]
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  000df	48 89 44 24 38	 mov	 QWORD PTR lastdot$[rsp], rax

; 54   :     if (lastdot == NULL) {

  000e4	48 83 7c 24 38
	00		 cmp	 QWORD PTR lastdot$[rsp], 0
  000ea	75 15		 jne	 SHORT $LN14@PyImport_L

; 55   :         packagecontext = NULL;

  000ec	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR packagecontext$[rsp], 0

; 56   :         shortname = namestr;

  000f5	48 8b 44 24 60	 mov	 rax, QWORD PTR namestr$[rsp]
  000fa	48 89 44 24 28	 mov	 QWORD PTR shortname$[rsp], rax

; 57   :     }
; 58   :     else {

  000ff	eb 17		 jmp	 SHORT $LN13@PyImport_L
$LN14@PyImport_L:

; 59   :         packagecontext = namestr;

  00101	48 8b 44 24 60	 mov	 rax, QWORD PTR namestr$[rsp]
  00106	48 89 44 24 40	 mov	 QWORD PTR packagecontext$[rsp], rax

; 60   :         shortname = lastdot+1;

  0010b	48 8b 44 24 38	 mov	 rax, QWORD PTR lastdot$[rsp]
  00110	48 ff c0	 inc	 rax
  00113	48 89 44 24 28	 mov	 QWORD PTR shortname$[rsp], rax
$LN13@PyImport_L:

; 61   :     }
; 62   : 
; 63   : #ifdef MS_WINDOWS
; 64   :     p0 = _PyImport_GetDynLoadWindows(shortname, path, fp);

  00118	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR fp$[rsp]
  00120	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR path$[rsp]
  00128	48 8b 4c 24 28	 mov	 rcx, QWORD PTR shortname$[rsp]
  0012d	e8 00 00 00 00	 call	 _PyImport_GetDynLoadWindows
  00132	48 89 44 24 30	 mov	 QWORD PTR p0$[rsp], rax

; 65   : #else
; 66   :     pathbytes = PyUnicode_EncodeFSDefault(path);
; 67   :     if (pathbytes == NULL)
; 68   :         goto error;
; 69   :     p0 = _PyImport_GetDynLoadFunc(shortname,
; 70   :                                   PyBytes_AS_STRING(pathbytes), fp);
; 71   :     Py_DECREF(pathbytes);
; 72   : #endif
; 73   :     p = (PyObject*(*)(void))p0;

  00137	48 8b 44 24 30	 mov	 rax, QWORD PTR p0$[rsp]
  0013c	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 74   :     if (PyErr_Occurred())

  00141	e8 00 00 00 00	 call	 PyErr_Occurred
  00146	48 85 c0	 test	 rax, rax
  00149	74 05		 je	 SHORT $LN12@PyImport_L

; 75   :         goto error;

  0014b	e9 49 01 00 00	 jmp	 $error$120449
$LN12@PyImport_L:

; 76   :     if (p == NULL) {

  00150	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00156	75 3f		 jne	 SHORT $LN11@PyImport_L

; 77   :         PyObject *msg = PyUnicode_FromFormat("dynamic module does not define "
; 78   :                                              "init function (PyInit_%s)",
; 79   :                                              shortname);

  00158	48 8b 54 24 28	 mov	 rdx, QWORD PTR shortname$[rsp]
  0015d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DJ@KFOAKLBA@dynamic?5module?5does?5not?5define?5i@
  00164	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00169	48 89 44 24 70	 mov	 QWORD PTR msg$120459[rsp], rax

; 80   :         PyErr_SetImportError(msg, name, path);

  0016e	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR path$[rsp]
  00176	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  0017e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR msg$120459[rsp]
  00183	e8 00 00 00 00	 call	 PyErr_SetImportError

; 81   :         Py_DECREF(msg);

  00188	48 8b 4c 24 70	 mov	 rcx, QWORD PTR msg$120459[rsp]
  0018d	e8 00 00 00 00	 call	 _Py_DecRef

; 82   :         goto error;

  00192	e9 02 01 00 00	 jmp	 $error$120449
$LN11@PyImport_L:

; 83   :     }
; 84   :     oldcontext = _Py_PackageContext;

  00197	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_PackageContext
  0019e	48 89 44 24 50	 mov	 QWORD PTR oldcontext$[rsp], rax

; 85   :     _Py_PackageContext = packagecontext;

  001a3	48 8b 44 24 40	 mov	 rax, QWORD PTR packagecontext$[rsp]
  001a8	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_PackageContext, rax

; 86   :     m = (*p)();

  001af	ff 54 24 20	 call	 QWORD PTR p$[rsp]
  001b3	48 89 44 24 68	 mov	 QWORD PTR m$[rsp], rax

; 87   :     _Py_PackageContext = oldcontext;

  001b8	48 8b 44 24 50	 mov	 rax, QWORD PTR oldcontext$[rsp]
  001bd	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_PackageContext, rax

; 88   :     if (m == NULL)

  001c4	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$[rsp], 0
  001ca	75 05		 jne	 SHORT $LN10@PyImport_L

; 89   :         goto error;

  001cc	e9 c8 00 00 00	 jmp	 $error$120449
$LN10@PyImport_L:

; 90   : 
; 91   :     if (PyErr_Occurred()) {

  001d1	e8 00 00 00 00	 call	 PyErr_Occurred
  001d6	48 85 c0	 test	 rax, rax
  001d9	74 1d		 je	 SHORT $LN9@PyImport_L

; 92   :         PyErr_Format(PyExc_SystemError,
; 93   :                      "initialization of %s raised unreported exception",
; 94   :                      shortname);

  001db	4c 8b 44 24 28	 mov	 r8, QWORD PTR shortname$[rsp]
  001e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@EMJADMNK@initialization?5of?5?$CFs?5raised?5unre@
  001e7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  001ee	e8 00 00 00 00	 call	 PyErr_Format

; 95   :         goto error;

  001f3	e9 a1 00 00 00	 jmp	 $error$120449
$LN9@PyImport_L:

; 96   :     }
; 97   : 
; 98   :     /* Remember pointer to module init function. */
; 99   :     def = PyModule_GetDef(m);

  001f8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  001fd	e8 00 00 00 00	 call	 PyModule_GetDef
  00202	48 89 44 24 58	 mov	 QWORD PTR def$[rsp], rax

; 100  :     if (def == NULL) {

  00207	48 83 7c 24 58
	00		 cmp	 QWORD PTR def$[rsp], 0
  0020d	75 1a		 jne	 SHORT $LN8@PyImport_L

; 101  :         PyErr_Format(PyExc_SystemError,
; 102  :                      "initialization of %s did not return an extension "
; 103  :                      "module", shortname);

  0020f	4c 8b 44 24 28	 mov	 r8, QWORD PTR shortname$[rsp]
  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@FKDNMCHP@initialization?5of?5?$CFs?5did?5not?5ret@
  0021b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00222	e8 00 00 00 00	 call	 PyErr_Format

; 104  :         goto error;

  00227	eb 70		 jmp	 SHORT $error$120449
$LN8@PyImport_L:

; 105  :     }
; 106  :     def->m_base.m_init = p;

  00229	48 8b 44 24 58	 mov	 rax, QWORD PTR def$[rsp]
  0022e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00233	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 107  : 
; 108  :     /* Remember the filename as the __file__ attribute */
; 109  :     if (PyModule_AddObject(m, "__file__", path) < 0)

  00237	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR path$[rsp]
  0023f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  00246	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  0024b	e8 00 00 00 00	 call	 PyModule_AddObject
  00250	85 c0		 test	 eax, eax
  00252	7d 07		 jge	 SHORT $LN7@PyImport_L

; 110  :         PyErr_Clear(); /* Not important enough to report */

  00254	e8 00 00 00 00	 call	 PyErr_Clear

; 111  :     else

  00259	eb 0d		 jmp	 SHORT $LN6@PyImport_L
$LN7@PyImport_L:

; 112  :         Py_INCREF(path);

  0025b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  00263	e8 00 00 00 00	 call	 _Py_IncRef
$LN6@PyImport_L:

; 113  : 
; 114  :     if (_PyImport_FixupExtensionObject(m, name, path) < 0)

  00268	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR path$[rsp]
  00270	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  00278	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  0027d	e8 00 00 00 00	 call	 _PyImport_FixupExtensionObject
  00282	85 c0		 test	 eax, eax
  00284	7d 02		 jge	 SHORT $LN5@PyImport_L

; 115  :         goto error;

  00286	eb 11		 jmp	 SHORT $error$120449
$LN5@PyImport_L:

; 116  :     Py_DECREF(nameascii);

  00288	48 8b 4c 24 48	 mov	 rcx, QWORD PTR nameascii$[rsp]
  0028d	e8 00 00 00 00	 call	 _Py_DecRef

; 117  :     return m;

  00292	48 8b 44 24 68	 mov	 rax, QWORD PTR m$[rsp]
  00297	eb 24		 jmp	 SHORT $LN18@PyImport_L
$error$120449:

; 118  : 
; 119  : error:
; 120  :     Py_DECREF(nameascii);

  00299	48 8b 4c 24 48	 mov	 rcx, QWORD PTR nameascii$[rsp]
  0029e	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyImport_L:

; 121  :     Py_XDECREF(m);

  002a3	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$[rsp], 0
  002a9	74 0a		 je	 SHORT $LN1@PyImport_L
  002ab	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  002b0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyImport_L:
  002b5	33 c0		 xor	 eax, eax
  002b7	85 c0		 test	 eax, eax
  002b9	75 e8		 jne	 SHORT $LN4@PyImport_L

; 122  :     return NULL;

  002bb	33 c0		 xor	 eax, eax
$LN18@PyImport_L:

; 123  : }

  002bd	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002c4	c3		 ret	 0
_PyImport_LoadDynamicModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
END
