; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07CMPFPFAH@complex?$AA@			; `string'
PUBLIC	??_C@_0CH@FCKKLBGM@the?5imaginary?5part?5of?5a?5complex?5@ ; `string'
PUBLIC	??_C@_04HBKGOHH@imag?$AA@			; `string'
PUBLIC	??_C@_0CC@GEFHKKP@the?5real?5part?5of?5a?5complex?5numbe@ ; `string'
PUBLIC	??_C@_04DGGKDJMA@real?$AA@			; `string'
PUBLIC	??_C@_0L@MEMCGMKL@__format__?$AA@		; `string'
PUBLIC	??_C@_0P@BCBHENLA@__getnewargs__?$AA@		; `string'
PUBLIC	??_C@_09PHMNDPIK@conjugate?$AA@			; `string'
PUBLIC	??_C@_0M@OFKDNGDB@__complex__?$AA@		; `string'
PUBLIC	PyComplex_Type
EXTRN	_PyObject_DebugFree:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_07CMPFPFAH@complex?$AA@
CONST	SEGMENT
??_C@_07CMPFPFAH@complex?$AA@ DB 'complex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FCKKLBGM@the?5imaginary?5part?5of?5a?5complex?5@
CONST	SEGMENT
??_C@_0CH@FCKKLBGM@the?5imaginary?5part?5of?5a?5complex?5@ DB 'the imagin'
	DB	'ary part of a complex number', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HBKGOHH@imag?$AA@
CONST	SEGMENT
??_C@_04HBKGOHH@imag?$AA@ DB 'imag', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GEFHKKP@the?5real?5part?5of?5a?5complex?5numbe@
CONST	SEGMENT
??_C@_0CC@GEFHKKP@the?5real?5part?5of?5a?5complex?5numbe@ DB 'the real pa'
	DB	'rt of a complex number', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DGGKDJMA@real?$AA@
CONST	SEGMENT
??_C@_04DGGKDJMA@real?$AA@ DB 'real', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MEMCGMKL@__format__?$AA@
CONST	SEGMENT
??_C@_0L@MEMCGMKL@__format__?$AA@ DB '__format__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BCBHENLA@__getnewargs__?$AA@
CONST	SEGMENT
??_C@_0P@BCBHENLA@__getnewargs__?$AA@ DB '__getnewargs__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHMNDPIK@conjugate?$AA@
CONST	SEGMENT
??_C@_09PHMNDPIK@conjugate?$AA@ DB 'conjugate', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___complex__@?1??try_complex_special_method@@9@9 DQ 0000000000000000H ; `try_complex_special_method'::`2'::PyId___complex__
	DQ	FLAT:??_C@_0M@OFKDNGDB@__complex__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0M@OFKDNGDB@__complex__?$AA@
CONST	SEGMENT
??_C@_0M@OFKDNGDB@__complex__?$AA@ DB '__complex__', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
c_1	DQ	03ff0000000000000r		; 1
	DQ	00000000000000000r		; 0
complex_conjugate_doc DB 'complex.conjugate() -> complex', 0aH, 0aH, 'Ret'
	DB	'urn the complex conjugate of its argument. (3-4j).conjugate()'
	DB	' == 3+4j.', 00H
	ORG $+6
complex__format__doc DB 'complex.__format__() -> str', 0aH, 0aH, 'Convert'
	DB	' to a string according to format_spec.', 00H
	ORG $+5
complex_methods DQ FLAT:??_C@_09PHMNDPIK@conjugate?$AA@
	DQ	FLAT:complex_conjugate
	DD	04H
	ORG $+4
	DQ	FLAT:complex_conjugate_doc
	DQ	FLAT:??_C@_0P@BCBHENLA@__getnewargs__?$AA@
	DQ	FLAT:complex_getnewargs
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@MEMCGMKL@__format__?$AA@
	DQ	FLAT:complex__format__
	DD	01H
	ORG $+4
	DQ	FLAT:complex__format__doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
complex_members DQ FLAT:??_C@_04DGGKDJMA@real?$AA@
	DD	04H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@GEFHKKP@the?5real?5part?5of?5a?5complex?5numbe@
	DQ	FLAT:??_C@_04HBKGOHH@imag?$AA@
	DD	04H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CH@FCKKLBGM@the?5imaginary?5part?5of?5a?5complex?5@
	DQ	0000000000000000H
	ORG $+32
?kwlist@?1??complex_new@@9@9 DQ FLAT:??_C@_04DGGKDJMA@real?$AA@ ; `complex_new'::`2'::kwlist
	DQ	FLAT:??_C@_04HBKGOHH@imag?$AA@
	DQ	0000000000000000H
complex_doc DB	'complex(real[, imag]) -> complex number', 0aH, 0aH, 'Cre'
	DB	'ate a complex number from a real part and an optional imagina'
	DB	'ry part.', 0aH, 'This is equivalent to (real + imag*1j) where'
	DB	' imag defaults to 0.', 00H
	ORG $+13
complex_as_number DQ FLAT:complex_add
	DQ	FLAT:complex_sub
	DQ	FLAT:complex_mul
	DQ	FLAT:complex_remainder
	DQ	FLAT:complex_divmod
	DQ	FLAT:complex_pow
	DQ	FLAT:complex_neg
	DQ	FLAT:complex_pos
	DQ	FLAT:complex_abs
	DQ	FLAT:complex_bool
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:complex_int
	DQ	0000000000000000H
	DQ	FLAT:complex_float
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:complex_int_div
	DQ	FLAT:complex_div
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
PyComplex_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07CMPFPFAH@complex?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:complex_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:complex_repr
	DQ	FLAT:complex_as_number
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:complex_hash
	DQ	0000000000000000H
	DQ	FLAT:complex_repr
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	FLAT:complex_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:complex_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:complex_methods
	DQ	FLAT:complex_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:complex_new
	DQ	FLAT:_PyObject_DebugFree
	ORG $+64
_DATA	ENDS
PUBLIC	_Py_c_sum
EXTRN	_fltused:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\objects\complexobject.c
pdata	SEGMENT
$pdata$_Py_c_sum DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$_Py_c_sum
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_c_sum DD 031501H
	DD	070112215H
	DD	06010H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_c_sum
_TEXT	SEGMENT
r$ = 0
$T21327 = 48
a$ = 56
b$ = 64
_Py_c_sum PROC						; COMDAT

; 17   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 18	 sub	 rsp, 24

; 18   :     Py_complex r;
; 19   :     r.real = a.real + b.real;

  00015	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp]
  0001f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00023	f2 0f 58 01	 addsd	 xmm0, QWORD PTR [rcx]
  00027	f2 0f 11 04 24	 movsdx	 QWORD PTR r$[rsp], xmm0

; 20   :     r.imag = a.imag + b.imag;

  0002c	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp]
  00036	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  0003b	f2 0f 58 41 08	 addsd	 xmm0, QWORD PTR [rcx+8]
  00040	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR r$[rsp+8], xmm0

; 21   :     return r;

  00046	48 8d 04 24	 lea	 rax, QWORD PTR r$[rsp]
  0004a	48 8b 7c 24 30	 mov	 rdi, QWORD PTR $T21327[rsp]
  0004f	48 8b f0	 mov	 rsi, rax
  00052	b9 10 00 00 00	 mov	 ecx, 16
  00057	f3 a4		 rep movsb
  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR $T21327[rsp]

; 22   : }

  0005e	48 83 c4 18	 add	 rsp, 24
  00062	5f		 pop	 rdi
  00063	5e		 pop	 rsi
  00064	c3		 ret	 0
_Py_c_sum ENDP
_TEXT	ENDS
PUBLIC	_Py_c_diff
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_c_diff DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$_Py_c_diff
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_c_diff DD 031501H
	DD	070112215H
	DD	06010H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_c_diff
_TEXT	SEGMENT
r$ = 0
$T21336 = 48
a$ = 56
b$ = 64
_Py_c_diff PROC						; COMDAT

; 26   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 18	 sub	 rsp, 24

; 27   :     Py_complex r;
; 28   :     r.real = a.real - b.real;

  00015	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp]
  0001f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00023	f2 0f 5c 01	 subsd	 xmm0, QWORD PTR [rcx]
  00027	f2 0f 11 04 24	 movsdx	 QWORD PTR r$[rsp], xmm0

; 29   :     r.imag = a.imag - b.imag;

  0002c	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp]
  00036	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  0003b	f2 0f 5c 41 08	 subsd	 xmm0, QWORD PTR [rcx+8]
  00040	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR r$[rsp+8], xmm0

; 30   :     return r;

  00046	48 8d 04 24	 lea	 rax, QWORD PTR r$[rsp]
  0004a	48 8b 7c 24 30	 mov	 rdi, QWORD PTR $T21336[rsp]
  0004f	48 8b f0	 mov	 rsi, rax
  00052	b9 10 00 00 00	 mov	 ecx, 16
  00057	f3 a4		 rep movsb
  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR $T21336[rsp]

; 31   : }

  0005e	48 83 c4 18	 add	 rsp, 24
  00062	5f		 pop	 rdi
  00063	5e		 pop	 rsi
  00064	c3		 ret	 0
_Py_c_diff ENDP
_TEXT	ENDS
PUBLIC	__mask@@NegDouble@
PUBLIC	_Py_c_neg
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_c_neg DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$_Py_c_neg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_c_neg DD 031001H
	DD	0700c2210H
	DD	0600bH
xdata	ENDS
;	COMDAT __mask@@NegDouble@
CONST	SEGMENT
__mask@@NegDouble@ DB 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 080H
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_c_neg
_TEXT	SEGMENT
r$ = 0
$T21344 = 48
a$ = 56
_Py_c_neg PROC						; COMDAT

; 35   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 18	 sub	 rsp, 24

; 36   :     Py_complex r;
; 37   :     r.real = -a.real;

  00010	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  00015	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00019	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  00021	f2 0f 11 04 24	 movsdx	 QWORD PTR r$[rsp], xmm0

; 38   :     r.imag = -a.imag;

  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  0002b	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  00030	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  00038	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR r$[rsp+8], xmm0

; 39   :     return r;

  0003e	48 8d 04 24	 lea	 rax, QWORD PTR r$[rsp]
  00042	48 8b 7c 24 30	 mov	 rdi, QWORD PTR $T21344[rsp]
  00047	48 8b f0	 mov	 rsi, rax
  0004a	b9 10 00 00 00	 mov	 ecx, 16
  0004f	f3 a4		 rep movsb
  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR $T21344[rsp]

; 40   : }

  00056	48 83 c4 18	 add	 rsp, 24
  0005a	5f		 pop	 rdi
  0005b	5e		 pop	 rsi
  0005c	c3		 ret	 0
_Py_c_neg ENDP
_TEXT	ENDS
PUBLIC	_Py_c_prod
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_c_prod DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$_Py_c_prod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_c_prod DD 031501H
	DD	070112215H
	DD	06010H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_c_prod
_TEXT	SEGMENT
r$ = 0
$T21355 = 48
a$ = 56
b$ = 64
_Py_c_prod PROC						; COMDAT

; 44   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 18	 sub	 rsp, 24

; 45   :     Py_complex r;
; 46   :     r.real = a.real*b.real - a.imag*b.imag;

  00015	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp]
  0001f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00023	f2 0f 59 01	 mulsd	 xmm0, QWORD PTR [rcx]
  00027	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp]
  00031	f2 0f 10 48 08	 movsdx	 xmm1, QWORD PTR [rax+8]
  00036	f2 0f 59 49 08	 mulsd	 xmm1, QWORD PTR [rcx+8]
  0003b	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0003f	f2 0f 11 04 24	 movsdx	 QWORD PTR r$[rsp], xmm0

; 47   :     r.imag = a.real*b.imag + a.imag*b.real;

  00044	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp]
  0004e	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00052	f2 0f 59 41 08	 mulsd	 xmm0, QWORD PTR [rcx+8]
  00057	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  0005c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp]
  00061	f2 0f 10 48 08	 movsdx	 xmm1, QWORD PTR [rax+8]
  00066	f2 0f 59 09	 mulsd	 xmm1, QWORD PTR [rcx]
  0006a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0006e	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR r$[rsp+8], xmm0

; 48   :     return r;

  00074	48 8d 04 24	 lea	 rax, QWORD PTR r$[rsp]
  00078	48 8b 7c 24 30	 mov	 rdi, QWORD PTR $T21355[rsp]
  0007d	48 8b f0	 mov	 rsi, rax
  00080	b9 10 00 00 00	 mov	 ecx, 16
  00085	f3 a4		 rep movsb
  00087	48 8b 44 24 30	 mov	 rax, QWORD PTR $T21355[rsp]

; 49   : }

  0008c	48 83 c4 18	 add	 rsp, 24
  00090	5f		 pop	 rdi
  00091	5e		 pop	 rsi
  00092	c3		 ret	 0
_Py_c_prod ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BM@HPHGPLPO@?$AAb?$AA?4?$AAi?$AAm?$AAa?$AAg?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?4?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@MHMPLIPM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	_Py_c_quot
EXTRN	__imp__wassert:PROC
EXTRN	__imp__errno:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_c_quot DD imagerel $LN12
	DD	imagerel $LN12+679
	DD	imagerel $unwind$_Py_c_quot
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_c_quot DD 031501H
	DD	07011e215H
	DD	06010H
xdata	ENDS
;	COMDAT ??_C@_1BM@HPHGPLPO@?$AAb?$AA?4?$AAi?$AAm?$AAa?$AAg?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?4?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@HPHGPLPO@?$AAb?$AA?4?$AAi?$AAm?$AAa?$AAg?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?4?$AA0?$AA?$AA@ DB 'b'
	DB	00H, '.', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@MHMPLIPM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@MHMPLIPM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'm'
	DB	00H, 'p', 00H, 'l', 00H, 'e', 00H, 'x', 00H, 'o', 00H, 'b', 00H
	DB	'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_c_quot
_TEXT	SEGMENT
abs_breal$ = 32
abs_bimag$ = 40
r$ = 48
denom$20361 = 64
ratio$20360 = 72
denom$20364 = 80
ratio$20363 = 88
tv66 = 96
tv72 = 104
$T21363 = 144
a$ = 152
b$ = 160
_Py_c_quot PROC						; COMDAT

; 53   : {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 54   :     /******************************************************************
; 55   :     This was the original algorithm.  It's grossly prone to spurious
; 56   :     overflow and underflow errors.  It also merrily divides by 0 despite
; 57   :     checking for that(!).  The code still serves a doc purpose here, as
; 58   :     the algorithm following is a simple by-cases transformation of this
; 59   :     one:
; 60   : 
; 61   :     Py_complex r;
; 62   :     double d = b.real*b.real + b.imag*b.imag;
; 63   :     if (d == 0.)
; 64   :         errno = EDOM;
; 65   :     r.real = (a.real*b.real + a.imag*b.imag)/d;
; 66   :     r.imag = (a.imag*b.real - a.real*b.imag)/d;
; 67   :     return r;
; 68   :     ******************************************************************/
; 69   : 
; 70   :     /* This algorithm is better, and is pretty obvious:  first divide the
; 71   :      * numerators and denominator by whichever of {b.real, b.imag} has
; 72   :      * larger magnitude.  The earliest reference I found was to CACM
; 73   :      * Algorithm 116 (Complex Division, Robert L. Smith, Stanford
; 74   :      * University).  As usual, though, we're still ignoring all IEEE
; 75   :      * endcases.
; 76   :      */
; 77   :      Py_complex r;      /* the result */
; 78   :      const double abs_breal = b.real < 0 ? -b.real : b.real;

  00015	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  0001d	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00021	66 0f 2f 00	 comisd	 xmm0, QWORD PTR [rax]
  00025	76 1c		 jbe	 SHORT $LN7@Py_c_quot
  00027	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  0002f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00033	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  0003b	f2 0f 11 44 24
	60		 movsdx	 QWORD PTR tv66[rsp], xmm0
  00041	eb 12		 jmp	 SHORT $LN8@Py_c_quot
$LN7@Py_c_quot:
  00043	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  0004b	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0004f	f2 0f 11 44 24
	60		 movsdx	 QWORD PTR tv66[rsp], xmm0
$LN8@Py_c_quot:
  00055	f2 0f 10 44 24
	60		 movsdx	 xmm0, QWORD PTR tv66[rsp]
  0005b	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR abs_breal$[rsp], xmm0

; 79   :      const double abs_bimag = b.imag < 0 ? -b.imag : b.imag;

  00061	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00069	66 0f 57 c0	 xorpd	 xmm0, xmm0
  0006d	66 0f 2f 40 08	 comisd	 xmm0, QWORD PTR [rax+8]
  00072	76 1d		 jbe	 SHORT $LN9@Py_c_quot
  00074	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  0007c	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  00081	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  00089	f2 0f 11 44 24
	68		 movsdx	 QWORD PTR tv72[rsp], xmm0
  0008f	eb 13		 jmp	 SHORT $LN10@Py_c_quot
$LN9@Py_c_quot:
  00091	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00099	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  0009e	f2 0f 11 44 24
	68		 movsdx	 QWORD PTR tv72[rsp], xmm0
$LN10@Py_c_quot:
  000a4	f2 0f 10 44 24
	68		 movsdx	 xmm0, QWORD PTR tv72[rsp]
  000aa	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR abs_bimag$[rsp], xmm0

; 80   : 
; 81   :      if (abs_breal >= abs_bimag) {

  000b0	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR abs_breal$[rsp]
  000b6	66 0f 2f 44 24
	28		 comisd	 xmm0, QWORD PTR abs_bimag$[rsp]
  000bc	0f 82 f0 00 00
	00		 jb	 $LN4@Py_c_quot

; 82   :         /* divide tops and bottom by b.real */
; 83   :         if (abs_breal == 0.0) {

  000c2	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR abs_breal$[rsp]
  000c8	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  000d0	7a 29		 jp	 SHORT $LN3@Py_c_quot
  000d2	75 27		 jne	 SHORT $LN3@Py_c_quot

; 84   :             errno = EDOM;

  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000da	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 85   :             r.real = r.imag = 0.0;

  000e0	66 0f 57 c0	 xorpd	 xmm0, xmm0
  000e4	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR r$[rsp+8], xmm0
  000ea	f2 0f 10 44 24
	38		 movsdx	 xmm0, QWORD PTR r$[rsp+8]
  000f0	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR r$[rsp], xmm0

; 86   :         }
; 87   :         else {

  000f6	e9 b2 00 00 00	 jmp	 $LN2@Py_c_quot
$LN3@Py_c_quot:

; 88   :             const double ratio = b.imag / b.real;

  000fb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00103	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR b$[rsp]
  0010b	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  00110	f2 0f 5e 01	 divsd	 xmm0, QWORD PTR [rcx]
  00114	f2 0f 11 44 24
	48		 movsdx	 QWORD PTR ratio$20360[rsp], xmm0

; 89   :             const double denom = b.real + b.imag * ratio;

  0011a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00122	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  00127	f2 0f 59 44 24
	48		 mulsd	 xmm0, QWORD PTR ratio$20360[rsp]
  0012d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00135	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00139	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0013d	66 0f 28 c1	 movapd	 xmm0, xmm1
  00141	f2 0f 11 44 24
	40		 movsdx	 QWORD PTR denom$20361[rsp], xmm0

; 90   :             r.real = (a.real + a.imag * ratio) / denom;

  00147	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  0014f	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  00154	f2 0f 59 44 24
	48		 mulsd	 xmm0, QWORD PTR ratio$20360[rsp]
  0015a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00162	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00166	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0016a	66 0f 28 c1	 movapd	 xmm0, xmm1
  0016e	f2 0f 5e 44 24
	40		 divsd	 xmm0, QWORD PTR denom$20361[rsp]
  00174	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR r$[rsp], xmm0

; 91   :             r.imag = (a.imag - a.real * ratio) / denom;

  0017a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00182	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00186	f2 0f 59 44 24
	48		 mulsd	 xmm0, QWORD PTR ratio$20360[rsp]
  0018c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00194	f2 0f 10 48 08	 movsdx	 xmm1, QWORD PTR [rax+8]
  00199	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0019d	66 0f 28 c1	 movapd	 xmm0, xmm1
  001a1	f2 0f 5e 44 24
	40		 divsd	 xmm0, QWORD PTR denom$20361[rsp]
  001a7	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR r$[rsp+8], xmm0
$LN2@Py_c_quot:

; 92   :         }
; 93   :     }
; 94   :     else {

  001ad	e9 cf 00 00 00	 jmp	 $LN1@Py_c_quot
$LN4@Py_c_quot:

; 95   :         /* divide tops and bottom by b.imag */
; 96   :         const double ratio = b.real / b.imag;

  001b2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  001ba	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR b$[rsp]
  001c2	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  001c6	f2 0f 5e 41 08	 divsd	 xmm0, QWORD PTR [rcx+8]
  001cb	f2 0f 11 44 24
	58		 movsdx	 QWORD PTR ratio$20363[rsp], xmm0

; 97   :         const double denom = b.real * ratio + b.imag;

  001d1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  001d9	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  001dd	f2 0f 59 44 24
	58		 mulsd	 xmm0, QWORD PTR ratio$20363[rsp]
  001e3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  001eb	f2 0f 58 40 08	 addsd	 xmm0, QWORD PTR [rax+8]
  001f0	f2 0f 11 44 24
	50		 movsdx	 QWORD PTR denom$20364[rsp], xmm0

; 98   :         assert(b.imag != 0.0);

  001f6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  001fe	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  00203	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0020b	7a 1e		 jp	 SHORT $LN11@Py_c_quot
  0020d	75 1c		 jne	 SHORT $LN11@Py_c_quot
  0020f	41 b8 62 00 00
	00		 mov	 r8d, 98			; 00000062H
  00215	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@MHMPLIPM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0021c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@HPHGPLPO@?$AAb?$AA?4?$AAi?$AAm?$AAa?$AAg?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?4?$AA0?$AA?$AA@
  00223	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00229	33 c0		 xor	 eax, eax
$LN11@Py_c_quot:

; 99   :         r.real = (a.real * ratio + a.imag) / denom;

  0022b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00233	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00237	f2 0f 59 44 24
	58		 mulsd	 xmm0, QWORD PTR ratio$20363[rsp]
  0023d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00245	f2 0f 58 40 08	 addsd	 xmm0, QWORD PTR [rax+8]
  0024a	f2 0f 5e 44 24
	50		 divsd	 xmm0, QWORD PTR denom$20364[rsp]
  00250	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR r$[rsp], xmm0

; 100  :         r.imag = (a.imag * ratio - a.real) / denom;

  00256	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  0025e	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  00263	f2 0f 59 44 24
	58		 mulsd	 xmm0, QWORD PTR ratio$20363[rsp]
  00269	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00271	f2 0f 5c 00	 subsd	 xmm0, QWORD PTR [rax]
  00275	f2 0f 5e 44 24
	50		 divsd	 xmm0, QWORD PTR denom$20364[rsp]
  0027b	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR r$[rsp+8], xmm0
$LN1@Py_c_quot:

; 101  :     }
; 102  :     return r;

  00281	48 8d 44 24 30	 lea	 rax, QWORD PTR r$[rsp]
  00286	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR $T21363[rsp]
  0028e	48 8b f0	 mov	 rsi, rax
  00291	b9 10 00 00 00	 mov	 ecx, 16
  00296	f3 a4		 rep movsb
  00298	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T21363[rsp]

; 103  : }

  002a0	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002a4	5f		 pop	 rdi
  002a5	5e		 pop	 rsi
  002a6	c3		 ret	 0
_Py_c_quot ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	_Py_c_pow
EXTRN	sin:PROC
EXTRN	cos:PROC
EXTRN	log:PROC
EXTRN	exp:PROC
EXTRN	atan2:PROC
EXTRN	pow:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_c_pow DD imagerel $LN11
	DD	imagerel $LN11+550
	DD	imagerel $unwind$_Py_c_pow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_c_pow DD 031501H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_c_pow
_TEXT	SEGMENT
phase$ = 32
len$ = 40
vabs$ = 48
r$ = 56
at$ = 72
$T21378 = 112
a$ = 120
b$ = 128
_Py_c_pow PROC						; COMDAT

; 107  : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 108  :     Py_complex r;
; 109  :     double vabs,len,at,phase;
; 110  :     if (b.real == 0. && b.imag == 0.) {

  00015	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  0001d	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00021	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00029	7a 38		 jp	 SHORT $LN7@Py_c_pow
  0002b	75 36		 jne	 SHORT $LN7@Py_c_pow
  0002d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00035	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  0003a	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00042	7a 1f		 jp	 SHORT $LN7@Py_c_pow
  00044	75 1d		 jne	 SHORT $LN7@Py_c_pow

; 111  :         r.real = 1.;

  00046	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  0004e	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR r$[rsp], xmm0

; 112  :         r.imag = 0.;

  00054	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00058	f2 0f 11 44 24
	40		 movsdx	 QWORD PTR r$[rsp+8], xmm0
  0005e	e9 a3 01 00 00	 jmp	 $LN6@Py_c_pow
$LN7@Py_c_pow:

; 113  :     }
; 114  :     else if (a.real == 0. && a.imag == 0.) {

  00063	48 8b 44 24 78	 mov	 rax, QWORD PTR a$[rsp]
  00068	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0006c	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00074	7a 68		 jp	 SHORT $LN5@Py_c_pow
  00076	75 66		 jne	 SHORT $LN5@Py_c_pow
  00078	48 8b 44 24 78	 mov	 rax, QWORD PTR a$[rsp]
  0007d	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  00082	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0008a	7a 52		 jp	 SHORT $LN5@Py_c_pow
  0008c	75 50		 jne	 SHORT $LN5@Py_c_pow

; 115  :         if (b.imag != 0. || b.real < 0.)

  0008e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00096	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  0009b	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  000a3	7a 14		 jp	 SHORT $LN3@Py_c_pow
  000a5	75 12		 jne	 SHORT $LN3@Py_c_pow
  000a7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  000af	66 0f 57 c0	 xorpd	 xmm0, xmm0
  000b3	66 0f 2f 00	 comisd	 xmm0, QWORD PTR [rax]
  000b7	76 0c		 jbe	 SHORT $LN4@Py_c_pow
$LN3@Py_c_pow:

; 116  :             errno = EDOM;

  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000bf	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H
$LN4@Py_c_pow:

; 117  :         r.real = 0.;

  000c5	66 0f 57 c0	 xorpd	 xmm0, xmm0
  000c9	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR r$[rsp], xmm0

; 118  :         r.imag = 0.;

  000cf	66 0f 57 c0	 xorpd	 xmm0, xmm0
  000d3	f2 0f 11 44 24
	40		 movsdx	 QWORD PTR r$[rsp+8], xmm0

; 119  :     }
; 120  :     else {

  000d9	e9 28 01 00 00	 jmp	 $LN2@Py_c_pow
$LN5@Py_c_pow:

; 121  :         vabs = hypot(a.real,a.imag);

  000de	48 8b 44 24 78	 mov	 rax, QWORD PTR a$[rsp]
  000e3	f2 0f 10 48 08	 movsdx	 xmm1, QWORD PTR [rax+8]
  000e8	48 8b 44 24 78	 mov	 rax, QWORD PTR a$[rsp]
  000ed	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  000f1	e8 00 00 00 00	 call	 hypot
  000f6	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR vabs$[rsp], xmm0

; 122  :         len = pow(vabs,b.real);

  000fc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00104	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00108	f2 0f 10 44 24
	30		 movsdx	 xmm0, QWORD PTR vabs$[rsp]
  0010e	e8 00 00 00 00	 call	 pow
  00113	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR len$[rsp], xmm0

; 123  :         at = atan2(a.imag, a.real);

  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR a$[rsp]
  0011e	f2 0f 10 08	 movsdx	 xmm1, QWORD PTR [rax]
  00122	48 8b 44 24 78	 mov	 rax, QWORD PTR a$[rsp]
  00127	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  0012c	e8 00 00 00 00	 call	 atan2
  00131	f2 0f 11 44 24
	48		 movsdx	 QWORD PTR at$[rsp], xmm0

; 124  :         phase = at*b.real;

  00137	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  0013f	f2 0f 10 44 24
	48		 movsdx	 xmm0, QWORD PTR at$[rsp]
  00145	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [rax]
  00149	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR phase$[rsp], xmm0

; 125  :         if (b.imag != 0.0) {

  0014f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00157	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  0015c	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00164	7a 02		 jp	 SHORT $LN10@Py_c_pow
  00166	74 60		 je	 SHORT $LN1@Py_c_pow
$LN10@Py_c_pow:

; 126  :             len /= exp(at*b.imag);

  00168	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00170	f2 0f 10 44 24
	48		 movsdx	 xmm0, QWORD PTR at$[rsp]
  00176	f2 0f 59 40 08	 mulsd	 xmm0, QWORD PTR [rax+8]
  0017b	e8 00 00 00 00	 call	 exp
  00180	f2 0f 10 4c 24
	28		 movsdx	 xmm1, QWORD PTR len$[rsp]
  00186	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0018a	66 0f 28 c1	 movapd	 xmm0, xmm1
  0018e	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR len$[rsp], xmm0

; 127  :             phase += b.imag*log(vabs);

  00194	f2 0f 10 44 24
	30		 movsdx	 xmm0, QWORD PTR vabs$[rsp]
  0019a	e8 00 00 00 00	 call	 log
  0019f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  001a7	f2 0f 10 48 08	 movsdx	 xmm1, QWORD PTR [rax+8]
  001ac	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001b0	66 0f 28 c1	 movapd	 xmm0, xmm1
  001b4	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR phase$[rsp]
  001ba	f2 0f 58 c8	 addsd	 xmm1, xmm0
  001be	66 0f 28 c1	 movapd	 xmm0, xmm1
  001c2	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR phase$[rsp], xmm0
$LN1@Py_c_pow:

; 128  :         }
; 129  :         r.real = len*cos(phase);

  001c8	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR phase$[rsp]
  001ce	e8 00 00 00 00	 call	 cos
  001d3	f2 0f 10 4c 24
	28		 movsdx	 xmm1, QWORD PTR len$[rsp]
  001d9	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001dd	66 0f 28 c1	 movapd	 xmm0, xmm1
  001e1	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR r$[rsp], xmm0

; 130  :         r.imag = len*sin(phase);

  001e7	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR phase$[rsp]
  001ed	e8 00 00 00 00	 call	 sin
  001f2	f2 0f 10 4c 24
	28		 movsdx	 xmm1, QWORD PTR len$[rsp]
  001f8	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001fc	66 0f 28 c1	 movapd	 xmm0, xmm1
  00200	f2 0f 11 44 24
	40		 movsdx	 QWORD PTR r$[rsp+8], xmm0
$LN2@Py_c_pow:
$LN6@Py_c_pow:

; 131  :     }
; 132  :     return r;

  00206	48 8d 44 24 38	 lea	 rax, QWORD PTR r$[rsp]
  0020b	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T21378[rsp]
  00210	48 8b f0	 mov	 rsi, rax
  00213	b9 10 00 00 00	 mov	 ecx, 16
  00218	f3 a4		 rep movsb
  0021a	48 8b 44 24 70	 mov	 rax, QWORD PTR $T21378[rsp]

; 133  : }

  0021f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00223	5f		 pop	 rdi
  00224	5e		 pop	 rsi
  00225	c3		 ret	 0
_Py_c_pow ENDP
_TEXT	ENDS
EXTRN	__imp__hypot:PROC
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
pdata	SEGMENT
$pdata$hypot DD	imagerel hypot
	DD	imagerel hypot+39
	DD	imagerel $unwind$hypot
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$hypot DD 011001H
	DD	04210H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT hypot
_TEXT	SEGMENT
_X$ = 48
_Y$ = 56
hypot	PROC						; COMDAT

; 162  : {

  00000	f2 0f 11 4c 24
	10		 movsdx	 QWORD PTR [rsp+16], xmm1
  00006	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR [rsp+8], xmm0
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 163  :     return _hypot(_X, _Y);

  00010	f2 0f 10 4c 24
	38		 movsdx	 xmm1, QWORD PTR _Y$[rsp]
  00016	f2 0f 10 44 24
	30		 movsdx	 xmm0, QWORD PTR _X$[rsp]
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__hypot

; 164  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
hypot	ENDP
_TEXT	ENDS
PUBLIC	_Py_c_abs
EXTRN	__imp__HUGE:QWORD
EXTRN	fabs:PROC
EXTRN	__imp__isnan:PROC
EXTRN	__imp__finite:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\complexobject.c
pdata	SEGMENT
$pdata$_Py_c_abs DD imagerel $LN9
	DD	imagerel $LN9+318
	DD	imagerel $unwind$_Py_c_abs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_c_abs DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_c_abs
_TEXT	SEGMENT
result$ = 32
z$ = 64
_Py_c_abs PROC						; COMDAT

; 170  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 171  :     /* sets errno = ERANGE on overflow;  otherwise errno = 0 */
; 172  :     double result;
; 173  : 
; 174  :     if (!Py_IS_FINITE(z.real) || !Py_IS_FINITE(z.imag)) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR z$[rsp]
  0000e	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00018	85 c0		 test	 eax, eax
  0001a	74 18		 je	 SHORT $LN5@Py_c_abs
  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR z$[rsp]
  00021	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0002c	85 c0		 test	 eax, eax
  0002e	0f 85 b7 00 00
	00		 jne	 $LN6@Py_c_abs
$LN5@Py_c_abs:

; 175  :         /* C99 rules: if either the real or the imaginary part is an
; 176  :            infinity, return infinity, even if the other part is a
; 177  :            NaN. */
; 178  :         if (Py_IS_INFINITY(z.real)) {

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR z$[rsp]
  00039	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00043	85 c0		 test	 eax, eax
  00045	75 3e		 jne	 SHORT $LN4@Py_c_abs
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR z$[rsp]
  0004c	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00056	85 c0		 test	 eax, eax
  00058	75 2b		 jne	 SHORT $LN4@Py_c_abs

; 179  :             result = fabs(z.real);

  0005a	48 8b 44 24 40	 mov	 rax, QWORD PTR z$[rsp]
  0005f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00063	e8 00 00 00 00	 call	 fabs
  00068	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR result$[rsp], xmm0

; 180  :             errno = 0;

  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00074	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 181  :             return result;

  0007a	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR result$[rsp]
  00080	e9 b4 00 00 00	 jmp	 $LN7@Py_c_abs
$LN4@Py_c_abs:

; 182  :         }
; 183  :         if (Py_IS_INFINITY(z.imag)) {

  00085	48 8b 44 24 40	 mov	 rax, QWORD PTR z$[rsp]
  0008a	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00095	85 c0		 test	 eax, eax
  00097	75 3d		 jne	 SHORT $LN3@Py_c_abs
  00099	48 8b 44 24 40	 mov	 rax, QWORD PTR z$[rsp]
  0009e	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  000a9	85 c0		 test	 eax, eax
  000ab	75 29		 jne	 SHORT $LN3@Py_c_abs

; 184  :             result = fabs(z.imag);

  000ad	48 8b 44 24 40	 mov	 rax, QWORD PTR z$[rsp]
  000b2	f2 0f 10 40 08	 movsdx	 xmm0, QWORD PTR [rax+8]
  000b7	e8 00 00 00 00	 call	 fabs
  000bc	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR result$[rsp], xmm0

; 185  :             errno = 0;

  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000c8	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 186  :             return result;

  000ce	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR result$[rsp]
  000d4	eb 63		 jmp	 SHORT $LN7@Py_c_abs
$LN3@Py_c_abs:

; 187  :         }
; 188  :         /* either the real or imaginary part is a NaN,
; 189  :            and neither is infinite. Result should be NaN. */
; 190  :         return Py_NAN;

  000d6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  000dd	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  000e1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@0000000000000000
  000e9	eb 4e		 jmp	 SHORT $LN7@Py_c_abs
$LN6@Py_c_abs:

; 191  :     }
; 192  :     result = hypot(z.real, z.imag);

  000eb	48 8b 44 24 40	 mov	 rax, QWORD PTR z$[rsp]
  000f0	f2 0f 10 48 08	 movsdx	 xmm1, QWORD PTR [rax+8]
  000f5	48 8b 44 24 40	 mov	 rax, QWORD PTR z$[rsp]
  000fa	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  000fe	e8 00 00 00 00	 call	 hypot
  00103	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR result$[rsp], xmm0

; 193  :     if (!Py_IS_FINITE(result))

  00109	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR result$[rsp]
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00115	85 c0		 test	 eax, eax
  00117	75 0e		 jne	 SHORT $LN2@Py_c_abs

; 194  :         errno = ERANGE;

  00119	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0011f	c7 00 22 00 00
	00		 mov	 DWORD PTR [rax], 34	; 00000022H

; 195  :     else

  00125	eb 0c		 jmp	 SHORT $LN1@Py_c_abs
$LN2@Py_c_abs:

; 196  :         errno = 0;

  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0012d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN1@Py_c_abs:

; 197  :     return result;

  00133	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR result$[rsp]
$LN7@Py_c_abs:

; 198  : }

  00139	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0013d	c3		 ret	 0
_Py_c_abs ENDP
_TEXT	ENDS
PUBLIC	$T21402
PUBLIC	PyComplex_FromCComplex
EXTRN	PyErr_NoMemory:PROC
EXTRN	_PyObject_DebugMalloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyComplex_FromCComplex DD imagerel $LN4
	DD	imagerel $LN4+114
	DD	imagerel $unwind$PyComplex_FromCComplex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyComplex_FromCComplex DD 030b01H
	DD	07007820bH
	DD	06006H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyComplex_FromCComplex
_TEXT	SEGMENT
op$ = 32
$T21402 = 40
cval$ = 96
PyComplex_FromCComplex PROC				; COMDAT

; 213  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 214  :     register PyComplexObject *op;
; 215  : 
; 216  :     /* Inline PyObject_New */
; 217  :     op = (PyComplexObject *) PyObject_MALLOC(sizeof(PyComplexObject));

  0000b	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  00010	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  00015	48 89 44 24 20	 mov	 QWORD PTR op$[rsp], rax

; 218  :     if (op == NULL)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR op$[rsp], 0
  00020	75 07		 jne	 SHORT $LN1@PyComplex_

; 219  :         return PyErr_NoMemory();

  00022	e8 00 00 00 00	 call	 PyErr_NoMemory
  00027	eb 42		 jmp	 SHORT $LN2@PyComplex_
$LN1@PyComplex_:

; 220  :     PyObject_INIT(op, &PyComplex_Type);

  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  00030	48 8b 4c 24 20	 mov	 rcx, QWORD PTR op$[rsp]
  00035	e8 00 00 00 00	 call	 PyObject_INIT

; 221  :     op->cval = cval;

  0003a	48 8d 44 24 28	 lea	 rax, QWORD PTR $T21402[rsp]
  0003f	48 8b f8	 mov	 rdi, rax
  00042	48 8b 74 24 60	 mov	 rsi, QWORD PTR cval$[rsp]
  00047	b9 10 00 00 00	 mov	 ecx, 16
  0004c	f3 a4		 rep movsb
  0004e	48 8b 44 24 20	 mov	 rax, QWORD PTR op$[rsp]
  00053	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T21402[rsp]
  00058	48 8d 78 60	 lea	 rdi, QWORD PTR [rax+96]
  0005c	48 8b f1	 mov	 rsi, rcx
  0005f	b9 10 00 00 00	 mov	 ecx, 16
  00064	f3 a4		 rep movsb

; 222  :     return (PyObject *) op;

  00066	48 8b 44 24 20	 mov	 rax, QWORD PTR op$[rsp]
$LN2@PyComplex_:

; 223  : }

  0006b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006f	5f		 pop	 rdi
  00070	5e		 pop	 rsi
  00071	c3		 ret	 0
PyComplex_FromCComplex ENDP
_TEXT	ENDS
EXTRN	_Py_NewReference:PROC
EXTRN	_PxObject_Init:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyObject_INIT DD imagerel PyObject_INIT
	DD	imagerel PyObject_INIT+84
	DD	imagerel $unwind$PyObject_INIT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_INIT
_TEXT	SEGMENT
op$ = 48
tp$ = 56
PyObject_INIT PROC					; COMDAT

; 236  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 237  :     Px_RETURN(_PxObject_Init(op, tp))

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 11		 je	 SHORT $LN1@PyObject_I
  00017	48 8b 54 24 38	 mov	 rdx, QWORD PTR tp$[rsp]
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00021	e8 00 00 00 00	 call	 _PxObject_Init
  00026	eb 27		 jmp	 SHORT $LN2@PyObject_I
$LN1@PyObject_I:

; 238  :     Py_TYPE(op) = tp;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  00032	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 239  :     _PyObject_InitHead(op);

  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0003b	e8 00 00 00 00	 call	 _PyObject_InitHead

; 240  :     _Py_NewReference(op);

  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00045	e8 00 00 00 00	 call	 _Py_NewReference

; 241  :     return op;

  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN2@PyObject_I:

; 242  : }

  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00053	c3		 ret	 0
PyObject_INIT ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_InitHead DD imagerel _PyObject_InitHead
	DD	imagerel _PyObject_InitHead+182
	DD	imagerel $unwind$_PyObject_InitHead
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_InitHead DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
CONST	SEGMENT
??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H
	DB	'p', 00H, 'y', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'e', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'o'
	DB	00H, 'b', 00H, 'j', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 48
_PyObject_InitHead PROC					; COMDAT

; 215  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 216  :     assert(Py_TYPE(op));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  00013	75 1c		 jne	 SHORT $LN3@PyObject_I@2
  00015	41 b8 d8 00 00
	00		 mov	 r8d, 216		; 000000d8H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002f	33 c0		 xor	 eax, eax
$LN3@PyObject_I@2:

; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00036	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 218  :     op->px    = _Py_NOT_PARALLEL;

  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00048	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00052	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 219  :     op->slist_entry.Next = NULL;

  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0005b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00068	48 c7 40 20 01
	00 00 00	 mov	 QWORD PTR [rax+32], 1

; 221  :     op->srw_lock  = NULL;

  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00075	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 222  :     op->event     = NULL;

  0007d	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 223  :     op->orig_type = NULL;

  0008a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0008f	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;

  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0009c	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 226  :     op->_ob_prev = NULL;

  000a4	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000a9	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;
; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;
; 230  : #endif
; 231  : }

  000b1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b5	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
PUBLIC	$T21423
PUBLIC	PyComplex_FromDoubles
;	COMDAT pdata
; File c:\src\pyparallel\objects\complexobject.c
pdata	SEGMENT
$pdata$PyComplex_FromDoubles DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$PyComplex_FromDoubles
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyComplex_FromDoubles DD 031201H
	DD	0700e8212H
	DD	0600dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyComplex_FromDoubles
_TEXT	SEGMENT
c$ = 32
$T21423 = 48
real$ = 96
imag$ = 104
PyComplex_FromDoubles PROC				; COMDAT

; 236  : {

$LN3:
  00000	f2 0f 11 4c 24
	10		 movsdx	 QWORD PTR [rsp+16], xmm1
  00006	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR [rsp+8], xmm0
  0000c	56		 push	 rsi
  0000d	57		 push	 rdi
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 237  :     Py_complex c;
; 238  :     c.real = real;

  00012	f2 0f 10 44 24
	60		 movsdx	 xmm0, QWORD PTR real$[rsp]
  00018	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR c$[rsp], xmm0

; 239  :     c.imag = imag;

  0001e	f2 0f 10 44 24
	68		 movsdx	 xmm0, QWORD PTR imag$[rsp]
  00024	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR c$[rsp+8], xmm0

; 240  :     return PyComplex_FromCComplex(c);

  0002a	48 8d 44 24 30	 lea	 rax, QWORD PTR $T21423[rsp]
  0002f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR c$[rsp]
  00034	48 8b f8	 mov	 rdi, rax
  00037	48 8b f1	 mov	 rsi, rcx
  0003a	b9 10 00 00 00	 mov	 ecx, 16
  0003f	f3 a4		 rep movsb
  00041	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21423[rsp]
  00046	e8 00 00 00 00	 call	 PyComplex_FromCComplex

; 241  : }

  0004b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004f	5f		 pop	 rdi
  00050	5e		 pop	 rsi
  00051	c3		 ret	 0
PyComplex_FromDoubles ENDP
_TEXT	ENDS
PUBLIC	PyComplex_RealAsDouble
EXTRN	PyFloat_AsDouble:PROC
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyComplex_RealAsDouble DD imagerel $LN6
	DD	imagerel $LN6+81
	DD	imagerel $unwind$PyComplex_RealAsDouble
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyComplex_RealAsDouble DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyComplex_RealAsDouble
_TEXT	SEGMENT
op$ = 48
PyComplex_RealAsDouble PROC				; COMDAT

; 245  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 246  :     if (PyComplex_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 19		 je	 SHORT $LN2@PyComplex_@2
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00027	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0002b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00030	85 c0		 test	 eax, eax
  00032	74 0e		 je	 SHORT $LN3@PyComplex_@2
$LN2@PyComplex_@2:

; 247  :         return ((PyComplexObject *)op)->cval.real;

  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00039	f2 0f 10 40 60	 movsdx	 xmm0, QWORD PTR [rax+96]
  0003e	eb 0c		 jmp	 SHORT $LN4@PyComplex_@2

; 248  :     }
; 249  :     else {

  00040	eb 0a		 jmp	 SHORT $LN1@PyComplex_@2
$LN3@PyComplex_@2:

; 250  :         return PyFloat_AsDouble(op);

  00042	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00047	e8 00 00 00 00	 call	 PyFloat_AsDouble
$LN1@PyComplex_@2:
$LN4@PyComplex_@2:

; 251  :     }
; 252  : }

  0004c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00050	c3		 ret	 0
PyComplex_RealAsDouble ENDP
_TEXT	ENDS
PUBLIC	PyComplex_ImagAsDouble
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyComplex_ImagAsDouble DD imagerel $LN6
	DD	imagerel $LN6+75
	DD	imagerel $unwind$PyComplex_ImagAsDouble
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyComplex_ImagAsDouble DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyComplex_ImagAsDouble
_TEXT	SEGMENT
op$ = 48
PyComplex_ImagAsDouble PROC				; COMDAT

; 256  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 257  :     if (PyComplex_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 19		 je	 SHORT $LN2@PyComplex_@3
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00027	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0002b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00030	85 c0		 test	 eax, eax
  00032	74 0e		 je	 SHORT $LN3@PyComplex_@3
$LN2@PyComplex_@3:

; 258  :         return ((PyComplexObject *)op)->cval.imag;

  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00039	f2 0f 10 40 68	 movsdx	 xmm0, QWORD PTR [rax+104]
  0003e	eb 06		 jmp	 SHORT $LN4@PyComplex_@3

; 259  :     }
; 260  :     else {

  00040	eb 04		 jmp	 SHORT $LN1@PyComplex_@3
$LN3@PyComplex_@3:

; 261  :         return 0.0;

  00042	66 0f 57 c0	 xorpd	 xmm0, xmm0
$LN1@PyComplex_@3:
$LN4@PyComplex_@3:

; 262  :     }
; 263  : }

  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	c3		 ret	 0
PyComplex_ImagAsDouble ENDP
_TEXT	ENDS
PUBLIC	$T21447
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0CL@JPAGGKMO@__complex__?5should?5return?5a?5comp@ ; `string'
PUBLIC	__real@bff0000000000000
PUBLIC	??_C@_15NMKAEDEP@?$AAo?$AAp?$AA?$AA@		; `string'
PUBLIC	PyComplex_AsCComplex
EXTRN	PyErr_Occurred:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyComplex_AsCComplex DD imagerel $LN11
	DD	imagerel $LN11+461
	DD	imagerel $unwind$PyComplex_AsCComplex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyComplex_AsCComplex DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT ??_C@_0CL@JPAGGKMO@__complex__?5should?5return?5a?5comp@
CONST	SEGMENT
??_C@_0CL@JPAGGKMO@__complex__?5should?5return?5a?5comp@ DB '__complex__ '
	DB	'should return a complex object', 00H	; `string'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT ??_C@_15NMKAEDEP@?$AAo?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_15NMKAEDEP@?$AAo?$AAp?$AA?$AA@ DB 'o', 00H, 'p', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyComplex_AsCComplex
_TEXT	SEGMENT
newop$ = 32
cv$ = 40
$T21447 = 56
$T21445 = 112
op$ = 120
PyComplex_AsCComplex PROC				; COMDAT

; 281  : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 282  :     Py_complex cv;
; 283  :     PyObject *newop = NULL;

  00010	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR newop$[rsp], 0

; 284  : 
; 285  :     assert(op);

  00019	48 83 7c 24 78
	00		 cmp	 QWORD PTR op$[rsp], 0
  0001f	75 1c		 jne	 SHORT $LN10@PyComplex_@4
  00021	41 b8 1d 01 00
	00		 mov	 r8d, 285		; 0000011dH
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@MHMPLIPM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15NMKAEDEP@?$AAo?$AAp?$AA?$AA@
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003b	33 c0		 xor	 eax, eax
$LN10@PyComplex_@4:

; 286  :     /* If op is already of type PyComplex_Type, return its value */
; 287  :     if (PyComplex_Check(op)) {

  0003d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  00044	48 8b 4c 24 78	 mov	 rcx, QWORD PTR op$[rsp]
  00049	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0004d	74 19		 je	 SHORT $LN6@PyComplex_@4
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  00056	48 8b 44 24 78	 mov	 rax, QWORD PTR op$[rsp]
  0005b	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0005f	e8 00 00 00 00	 call	 PyType_IsSubtype
  00064	85 c0		 test	 eax, eax
  00066	74 1f		 je	 SHORT $LN7@PyComplex_@4
$LN6@PyComplex_@4:

; 288  :         return ((PyComplexObject *)op)->cval;

  00068	48 8b 44 24 78	 mov	 rax, QWORD PTR op$[rsp]
  0006d	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T21445[rsp]
  00072	48 8d 70 60	 lea	 rsi, QWORD PTR [rax+96]
  00076	b9 10 00 00 00	 mov	 ecx, 16
  0007b	f3 a4		 rep movsb
  0007d	48 8b 44 24 70	 mov	 rax, QWORD PTR $T21445[rsp]
  00082	e9 3f 01 00 00	 jmp	 $LN8@PyComplex_@4
$LN7@PyComplex_@4:

; 289  :     }
; 290  :     /* If not, use op's __complex__  method, if it exists */
; 291  : 
; 292  :     /* return -1 on failure */
; 293  :     cv.real = -1.;

  00087	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@bff0000000000000
  0008f	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR cv$[rsp], xmm0

; 294  :     cv.imag = 0.;

  00095	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00099	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR cv$[rsp+8], xmm0

; 295  : 
; 296  :     newop = try_complex_special_method(op);

  0009f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR op$[rsp]
  000a4	e8 00 00 00 00	 call	 try_complex_special_method
  000a9	48 89 44 24 20	 mov	 QWORD PTR newop$[rsp], rax

; 297  : 
; 298  :     if (newop) {

  000ae	48 83 7c 24 20
	00		 cmp	 QWORD PTR newop$[rsp], 0
  000b4	0f 84 bc 00 00
	00		 je	 $LN5@PyComplex_@4

; 299  :         if (!PyComplex_Check(newop)) {

  000ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  000c1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newop$[rsp]
  000c6	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000ca	74 54		 je	 SHORT $LN4@PyComplex_@4
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  000d3	48 8b 44 24 20	 mov	 rax, QWORD PTR newop$[rsp]
  000d8	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000dc	e8 00 00 00 00	 call	 PyType_IsSubtype
  000e1	85 c0		 test	 eax, eax
  000e3	75 3b		 jne	 SHORT $LN4@PyComplex_@4

; 300  :             PyErr_SetString(PyExc_TypeError,
; 301  :                 "__complex__ should return a complex object");

  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@JPAGGKMO@__complex__?5should?5return?5a?5comp@
  000ec	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000f3	e8 00 00 00 00	 call	 PyErr_SetString

; 302  :             Py_DECREF(newop);

  000f8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newop$[rsp]
  000fd	e8 00 00 00 00	 call	 _Py_DecRef

; 303  :             return cv;

  00102	48 8d 44 24 28	 lea	 rax, QWORD PTR cv$[rsp]
  00107	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T21445[rsp]
  0010c	48 8b f0	 mov	 rsi, rax
  0010f	b9 10 00 00 00	 mov	 ecx, 16
  00114	f3 a4		 rep movsb
  00116	48 8b 44 24 70	 mov	 rax, QWORD PTR $T21445[rsp]
  0011b	e9 a6 00 00 00	 jmp	 $LN8@PyComplex_@4
$LN4@PyComplex_@4:

; 304  :         }
; 305  :         cv = ((PyComplexObject *)newop)->cval;

  00120	48 8d 44 24 38	 lea	 rax, QWORD PTR $T21447[rsp]
  00125	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newop$[rsp]
  0012a	48 8b f8	 mov	 rdi, rax
  0012d	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  00131	b9 10 00 00 00	 mov	 ecx, 16
  00136	f3 a4		 rep movsb
  00138	48 8d 44 24 28	 lea	 rax, QWORD PTR cv$[rsp]
  0013d	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T21447[rsp]
  00142	48 8b f8	 mov	 rdi, rax
  00145	48 8b f1	 mov	 rsi, rcx
  00148	b9 10 00 00 00	 mov	 ecx, 16
  0014d	f3 a4		 rep movsb

; 306  :         Py_DECREF(newop);

  0014f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newop$[rsp]
  00154	e8 00 00 00 00	 call	 _Py_DecRef

; 307  :         return cv;

  00159	48 8d 44 24 28	 lea	 rax, QWORD PTR cv$[rsp]
  0015e	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T21445[rsp]
  00163	48 8b f0	 mov	 rsi, rax
  00166	b9 10 00 00 00	 mov	 ecx, 16
  0016b	f3 a4		 rep movsb
  0016d	48 8b 44 24 70	 mov	 rax, QWORD PTR $T21445[rsp]
  00172	eb 52		 jmp	 SHORT $LN8@PyComplex_@4
  00174	eb 50		 jmp	 SHORT $LN3@PyComplex_@4
$LN5@PyComplex_@4:

; 308  :     }
; 309  :     else if (PyErr_Occurred()) {

  00176	e8 00 00 00 00	 call	 PyErr_Occurred
  0017b	48 85 c0	 test	 rax, rax
  0017e	74 1d		 je	 SHORT $LN2@PyComplex_@4

; 310  :         return cv;

  00180	48 8d 44 24 28	 lea	 rax, QWORD PTR cv$[rsp]
  00185	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T21445[rsp]
  0018a	48 8b f0	 mov	 rsi, rax
  0018d	b9 10 00 00 00	 mov	 ecx, 16
  00192	f3 a4		 rep movsb
  00194	48 8b 44 24 70	 mov	 rax, QWORD PTR $T21445[rsp]
  00199	eb 2b		 jmp	 SHORT $LN8@PyComplex_@4

; 311  :     }
; 312  :     /* If neither of the above works, interpret op as a float giving the
; 313  :        real part of the result, and fill in the imaginary part as 0. */
; 314  :     else {

  0019b	eb 29		 jmp	 SHORT $LN1@PyComplex_@4
$LN2@PyComplex_@4:

; 315  :         /* PyFloat_AsDouble will return -1 on failure */
; 316  :         cv.real = PyFloat_AsDouble(op);

  0019d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR op$[rsp]
  001a2	e8 00 00 00 00	 call	 PyFloat_AsDouble
  001a7	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR cv$[rsp], xmm0

; 317  :         return cv;

  001ad	48 8d 44 24 28	 lea	 rax, QWORD PTR cv$[rsp]
  001b2	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T21445[rsp]
  001b7	48 8b f0	 mov	 rsi, rax
  001ba	b9 10 00 00 00	 mov	 ecx, 16
  001bf	f3 a4		 rep movsb
  001c1	48 8b 44 24 70	 mov	 rax, QWORD PTR $T21445[rsp]
$LN1@PyComplex_@4:
$LN3@PyComplex_@4:
$LN8@PyComplex_@4:

; 318  :     }
; 319  : }

  001c6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ca	5f		 pop	 rdi
  001cb	5e		 pop	 rsi
  001cc	c3		 ret	 0
PyComplex_AsCComplex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_LookupSpecial:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\objects\complexobject.c
pdata	SEGMENT
$pdata$try_complex_special_method DD imagerel try_complex_special_method
	DD	imagerel try_complex_special_method+102
	DD	imagerel $unwind$try_complex_special_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$try_complex_special_method DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT try_complex_special_method
_TEXT	SEGMENT
f$ = 32
res$20482 = 40
op$ = 64
try_complex_special_method PROC				; COMDAT

; 266  : try_complex_special_method(PyObject *op) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 267  :     PyObject *f;
; 268  :     _Py_IDENTIFIER(__complex__);
; 269  : 
; 270  :     f = _PyObject_LookupSpecial(op, &PyId___complex__);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___complex__@?1??try_complex_special_method@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0002b	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  00030	48 89 44 24 20	 mov	 QWORD PTR f$[rsp], rax

; 271  :     if (f) {

  00035	48 83 7c 24 20
	00		 cmp	 QWORD PTR f$[rsp], 0
  0003b	74 22		 je	 SHORT $LN1@try_comple

; 272  :         PyObject *res = PyObject_CallFunctionObjArgs(f, NULL);

  0003d	33 d2		 xor	 edx, edx
  0003f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR f$[rsp]
  00044	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00049	48 89 44 24 28	 mov	 QWORD PTR res$20482[rsp], rax

; 273  :         Py_DECREF(f);

  0004e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR f$[rsp]
  00053	e8 00 00 00 00	 call	 _Py_DecRef

; 274  :         return res;

  00058	48 8b 44 24 28	 mov	 rax, QWORD PTR res$20482[rsp]
  0005d	eb 02		 jmp	 SHORT $LN2@try_comple
$LN1@try_comple:

; 275  :     }
; 276  :     return NULL;

  0005f	33 c0		 xor	 eax, eax
$LN2@try_comple:

; 277  : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
try_complex_special_method ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_dealloc DD imagerel complex_dealloc
	DD	imagerel complex_dealloc+34
	DD	imagerel $unwind$complex_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT complex_dealloc
_TEXT	SEGMENT
op$ = 48
complex_dealloc PROC					; COMDAT

; 323  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 324  :     op->ob_type->tp_free(op);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00017	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 325  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
complex_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_09JHCFLBEK@?$CFs?$CFs?$CFsj?$CFs?$AA@	; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyMem_Free:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyOS_double_to_string:PROC
EXTRN	__imp__copysign:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_repr DD imagerel complex_repr
	DD	imagerel complex_repr+458
	DD	imagerel $unwind$complex_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_repr DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_09JHCFLBEK@?$CFs?$CFs?$CFsj?$CFs?$AA@
CONST	SEGMENT
??_C@_09JHCFLBEK@?$CFs?$CFs?$CFsj?$CFs?$AA@ DB '%s%s%sj%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI?$AA@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI?$AA@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_repr
_TEXT	SEGMENT
im$ = 48
tail$ = 56
re$ = 64
result$ = 72
precision$ = 80
pre$ = 88
lead$ = 96
format_code$ = 104
v$ = 128
complex_repr PROC					; COMDAT

; 329  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 330  :     int precision = 0;

  00009	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR precision$[rsp], 0

; 331  :     char format_code = 'r';

  00011	c6 44 24 68 72	 mov	 BYTE PTR format_code$[rsp], 114 ; 00000072H

; 332  :     PyObject *result = NULL;

  00016	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 333  : 
; 334  :     /* If these are non-NULL, they'll need to be freed. */
; 335  :     char *pre = NULL;

  0001f	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR pre$[rsp], 0

; 336  :     char *im = NULL;

  00028	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR im$[rsp], 0

; 337  : 
; 338  :     /* These do not need to be freed. re is either an alias
; 339  :        for pre or a pointer to a constant.  lead and tail
; 340  :        are pointers to constants. */
; 341  :     char *re = NULL;

  00031	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR re$[rsp], 0

; 342  :     char *lead = "";

  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00041	48 89 44 24 60	 mov	 QWORD PTR lead$[rsp], rax

; 343  :     char *tail = "";

  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0004d	48 89 44 24 38	 mov	 QWORD PTR tail$[rsp], rax

; 344  : 
; 345  :     if (v->cval.real == 0. && copysign(1.0, v->cval.real)==1.0) {

  00052	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0005a	f2 0f 10 40 60	 movsdx	 xmm0, QWORD PTR [rax+96]
  0005f	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00067	7a 79		 jp	 SHORT $LN5@complex_re
  00069	75 77		 jne	 SHORT $LN5@complex_re
  0006b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00073	f2 0f 10 48 60	 movsdx	 xmm1, QWORD PTR [rax+96]
  00078	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00086	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  0008e	7a 52		 jp	 SHORT $LN5@complex_re
  00090	75 50		 jne	 SHORT $LN5@complex_re

; 346  :         /* Real part is +0: just output the imaginary part and do not
; 347  :            include parens. */
; 348  :         re = "";

  00092	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00099	48 89 44 24 40	 mov	 QWORD PTR re$[rsp], rax

; 349  :         im = PyOS_double_to_string(v->cval.imag, format_code,
; 350  :                                    precision, 0, NULL);

  0009e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000a7	45 33 c9	 xor	 r9d, r9d
  000aa	44 8b 44 24 50	 mov	 r8d, DWORD PTR precision$[rsp]
  000af	0f b6 54 24 68	 movzx	 edx, BYTE PTR format_code$[rsp]
  000b4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  000bc	f2 0f 10 40 68	 movsdx	 xmm0, QWORD PTR [rax+104]
  000c1	e8 00 00 00 00	 call	 PyOS_double_to_string
  000c6	48 89 44 24 30	 mov	 QWORD PTR im$[rsp], rax

; 351  :         if (!im) {

  000cb	48 83 7c 24 30
	00		 cmp	 QWORD PTR im$[rsp], 0
  000d1	75 0a		 jne	 SHORT $LN4@complex_re

; 352  :             PyErr_NoMemory();

  000d3	e8 00 00 00 00	 call	 PyErr_NoMemory

; 353  :             goto done;

  000d8	e9 cf 00 00 00	 jmp	 $done$20534
$LN4@complex_re:

; 354  :         }
; 355  :     } else {

  000dd	e9 a0 00 00 00	 jmp	 $LN3@complex_re
$LN5@complex_re:

; 356  :         /* Format imaginary part with sign, real part without. Include
; 357  :            parens in the result. */
; 358  :         pre = PyOS_double_to_string(v->cval.real, format_code,
; 359  :                                     precision, 0, NULL);

  000e2	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000eb	45 33 c9	 xor	 r9d, r9d
  000ee	44 8b 44 24 50	 mov	 r8d, DWORD PTR precision$[rsp]
  000f3	0f b6 54 24 68	 movzx	 edx, BYTE PTR format_code$[rsp]
  000f8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00100	f2 0f 10 40 60	 movsdx	 xmm0, QWORD PTR [rax+96]
  00105	e8 00 00 00 00	 call	 PyOS_double_to_string
  0010a	48 89 44 24 58	 mov	 QWORD PTR pre$[rsp], rax

; 360  :         if (!pre) {

  0010f	48 83 7c 24 58
	00		 cmp	 QWORD PTR pre$[rsp], 0
  00115	75 0a		 jne	 SHORT $LN2@complex_re

; 361  :             PyErr_NoMemory();

  00117	e8 00 00 00 00	 call	 PyErr_NoMemory

; 362  :             goto done;

  0011c	e9 8b 00 00 00	 jmp	 $done$20534
$LN2@complex_re:

; 363  :         }
; 364  :         re = pre;

  00121	48 8b 44 24 58	 mov	 rax, QWORD PTR pre$[rsp]
  00126	48 89 44 24 40	 mov	 QWORD PTR re$[rsp], rax

; 365  : 
; 366  :         im = PyOS_double_to_string(v->cval.imag, format_code,
; 367  :                                    precision, Py_DTSF_SIGN, NULL);

  0012b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00134	41 b9 01 00 00
	00		 mov	 r9d, 1
  0013a	44 8b 44 24 50	 mov	 r8d, DWORD PTR precision$[rsp]
  0013f	0f b6 54 24 68	 movzx	 edx, BYTE PTR format_code$[rsp]
  00144	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0014c	f2 0f 10 40 68	 movsdx	 xmm0, QWORD PTR [rax+104]
  00151	e8 00 00 00 00	 call	 PyOS_double_to_string
  00156	48 89 44 24 30	 mov	 QWORD PTR im$[rsp], rax

; 368  :         if (!im) {

  0015b	48 83 7c 24 30
	00		 cmp	 QWORD PTR im$[rsp], 0
  00161	75 07		 jne	 SHORT $LN1@complex_re

; 369  :             PyErr_NoMemory();

  00163	e8 00 00 00 00	 call	 PyErr_NoMemory

; 370  :             goto done;

  00168	eb 42		 jmp	 SHORT $done$20534
$LN1@complex_re:

; 371  :         }
; 372  :         lead = "(";

  0016a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  00171	48 89 44 24 60	 mov	 QWORD PTR lead$[rsp], rax

; 373  :         tail = ")";

  00176	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  0017d	48 89 44 24 38	 mov	 QWORD PTR tail$[rsp], rax
$LN3@complex_re:

; 374  :     }
; 375  :     result = PyUnicode_FromFormat("%s%s%sj%s", lead, re, im, tail);

  00182	48 8b 44 24 38	 mov	 rax, QWORD PTR tail$[rsp]
  00187	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018c	4c 8b 4c 24 30	 mov	 r9, QWORD PTR im$[rsp]
  00191	4c 8b 44 24 40	 mov	 r8, QWORD PTR re$[rsp]
  00196	48 8b 54 24 60	 mov	 rdx, QWORD PTR lead$[rsp]
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09JHCFLBEK@?$CFs?$CFs?$CFsj?$CFs?$AA@
  001a2	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  001a7	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax
$done$20534:

; 376  :   done:
; 377  :     PyMem_Free(im);

  001ac	48 8b 4c 24 30	 mov	 rcx, QWORD PTR im$[rsp]
  001b1	e8 00 00 00 00	 call	 PyMem_Free

; 378  :     PyMem_Free(pre);

  001b6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pre$[rsp]
  001bb	e8 00 00 00 00	 call	 PyMem_Free

; 379  : 
; 380  :     return result;

  001c0	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]

; 381  : }

  001c5	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001c9	c3		 ret	 0
complex_repr ENDP
_TEXT	ENDS
EXTRN	_Py_HashDouble:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_hash DD imagerel complex_hash
	DD	imagerel complex_hash+138
	DD	imagerel $unwind$complex_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_hash DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT complex_hash
_TEXT	SEGMENT
hashimag$ = 32
hashreal$ = 40
combined$ = 48
v$ = 80
complex_hash PROC					; COMDAT

; 385  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 386  :     Py_uhash_t hashreal, hashimag, combined;
; 387  :     hashreal = (Py_uhash_t)_Py_HashDouble(v->cval.real);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR v$[rsp]
  0000e	f2 0f 10 40 60	 movsdx	 xmm0, QWORD PTR [rax+96]
  00013	e8 00 00 00 00	 call	 _Py_HashDouble
  00018	48 89 44 24 28	 mov	 QWORD PTR hashreal$[rsp], rax

; 388  :     if (hashreal == (Py_uhash_t)-1)

  0001d	48 83 7c 24 28
	ff		 cmp	 QWORD PTR hashreal$[rsp], -1
  00023	75 09		 jne	 SHORT $LN3@complex_ha

; 389  :         return -1;

  00025	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0002c	eb 57		 jmp	 SHORT $LN4@complex_ha
$LN3@complex_ha:

; 390  :     hashimag = (Py_uhash_t)_Py_HashDouble(v->cval.imag);

  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR v$[rsp]
  00033	f2 0f 10 40 68	 movsdx	 xmm0, QWORD PTR [rax+104]
  00038	e8 00 00 00 00	 call	 _Py_HashDouble
  0003d	48 89 44 24 20	 mov	 QWORD PTR hashimag$[rsp], rax

; 391  :     if (hashimag == (Py_uhash_t)-1)

  00042	48 83 7c 24 20
	ff		 cmp	 QWORD PTR hashimag$[rsp], -1
  00048	75 09		 jne	 SHORT $LN2@complex_ha

; 392  :         return -1;

  0004a	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00051	eb 32		 jmp	 SHORT $LN4@complex_ha
$LN2@complex_ha:

; 393  :     /* Note:  if the imaginary part is 0, hashimag is 0 now,
; 394  :      * so the following returns hashreal unchanged.  This is
; 395  :      * important because numbers of different types that
; 396  :      * compare equal must have the same hash value, so that
; 397  :      * hash(x + 0*j) must equal hash(x).
; 398  :      */
; 399  :     combined = hashreal + _PyHASH_IMAG * hashimag;

  00053	48 8b 44 24 20	 mov	 rax, QWORD PTR hashimag$[rsp]
  00058	48 69 c0 43 42
	0f 00		 imul	 rax, 1000003		; 000f4243H
  0005f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hashreal$[rsp]
  00064	48 03 c8	 add	 rcx, rax
  00067	48 8b c1	 mov	 rax, rcx
  0006a	48 89 44 24 30	 mov	 QWORD PTR combined$[rsp], rax

; 400  :     if (combined == (Py_uhash_t)-1)

  0006f	48 83 7c 24 30
	ff		 cmp	 QWORD PTR combined$[rsp], -1
  00075	75 09		 jne	 SHORT $LN1@complex_ha

; 401  :         combined = (Py_uhash_t)-2;

  00077	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR combined$[rsp], -2
$LN1@complex_ha:

; 402  :     return (Py_hash_t)combined;

  00080	48 8b 44 24 30	 mov	 rax, QWORD PTR combined$[rsp]
$LN4@complex_ha:

; 403  : }

  00085	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00089	c3		 ret	 0
complex_hash ENDP
_TEXT	ENDS
PUBLIC	$T21494
PUBLIC	$T21495
PUBLIC	$T21492
PUBLIC	$T21493
PUBLIC	$T21496
PUBLIC	$T21497
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_add DD imagerel complex_add
	DD	imagerel complex_add+465
	DD	imagerel $unwind$complex_add
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_add DD 041301H
	DD	0190113H
	DD	0600b700cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT complex_add
_TEXT	SEGMENT
a$ = 32
b$ = 48
result$ = 64
$T21491 = 80
$T21492 = 96
$T21493 = 112
$T21494 = 128
$T21495 = 144
$T21496 = 160
$T21497 = 176
v$ = 224
w$ = 232
complex_add PROC					; COMDAT

; 438  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 439  :     Py_complex result;
; 440  :     Py_complex a, b;
; 441  :     TO_COMPLEX(v, a);

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  0001a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00022	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00026	74 1c		 je	 SHORT $LN7@complex_ad
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  0002f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00037	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0003b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00040	85 c0		 test	 eax, eax
  00042	74 3a		 je	 SHORT $LN8@complex_ad
$LN7@complex_ad:
  00044	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T21497[rsp]
  0004c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00054	48 8b f8	 mov	 rdi, rax
  00057	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  0005b	b9 10 00 00 00	 mov	 ecx, 16
  00060	f3 a4		 rep movsb
  00062	48 8d 44 24 20	 lea	 rax, QWORD PTR a$[rsp]
  00067	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T21497[rsp]
  0006f	48 8b f8	 mov	 rdi, rax
  00072	48 8b f1	 mov	 rsi, rcx
  00075	b9 10 00 00 00	 mov	 ecx, 16
  0007a	f3 a4		 rep movsb
  0007c	eb 23		 jmp	 SHORT $LN6@complex_ad
$LN8@complex_ad:
  0007e	48 8d 54 24 20	 lea	 rdx, QWORD PTR a$[rsp]
  00083	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR v$[rsp]
  0008b	e8 00 00 00 00	 call	 to_complex
  00090	85 c0		 test	 eax, eax
  00092	7d 0d		 jge	 SHORT $LN5@complex_ad
  00094	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0009c	e9 26 01 00 00	 jmp	 $LN9@complex_ad
$LN5@complex_ad:
$LN6@complex_ad:

; 442  :     TO_COMPLEX(w, b);

  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  000a8	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  000b0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000b4	74 1c		 je	 SHORT $LN3@complex_ad
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  000bd	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  000c5	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c9	e8 00 00 00 00	 call	 PyType_IsSubtype
  000ce	85 c0		 test	 eax, eax
  000d0	74 3a		 je	 SHORT $LN4@complex_ad
$LN3@complex_ad:
  000d2	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR $T21496[rsp]
  000da	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  000e2	48 8b f8	 mov	 rdi, rax
  000e5	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  000e9	b9 10 00 00 00	 mov	 ecx, 16
  000ee	f3 a4		 rep movsb
  000f0	48 8d 44 24 30	 lea	 rax, QWORD PTR b$[rsp]
  000f5	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T21496[rsp]
  000fd	48 8b f8	 mov	 rdi, rax
  00100	48 8b f1	 mov	 rsi, rcx
  00103	b9 10 00 00 00	 mov	 ecx, 16
  00108	f3 a4		 rep movsb
  0010a	eb 23		 jmp	 SHORT $LN2@complex_ad
$LN4@complex_ad:
  0010c	48 8d 54 24 30	 lea	 rdx, QWORD PTR b$[rsp]
  00111	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR w$[rsp]
  00119	e8 00 00 00 00	 call	 to_complex
  0011e	85 c0		 test	 eax, eax
  00120	7d 0d		 jge	 SHORT $LN1@complex_ad
  00122	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  0012a	e9 98 00 00 00	 jmp	 $LN9@complex_ad
$LN1@complex_ad:
$LN2@complex_ad:

; 443  :     PyFPE_START_PROTECT("complex_add", return 0)
; 444  :     result = c_sum(a, b);

  0012f	48 8d 44 24 70	 lea	 rax, QWORD PTR $T21493[rsp]
  00134	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$[rsp]
  00139	48 8b f8	 mov	 rdi, rax
  0013c	48 8b f1	 mov	 rsi, rcx
  0013f	b9 10 00 00 00	 mov	 ecx, 16
  00144	f3 a4		 rep movsb
  00146	48 8d 44 24 60	 lea	 rax, QWORD PTR $T21492[rsp]
  0014b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR a$[rsp]
  00150	48 8b f8	 mov	 rdi, rax
  00153	48 8b f1	 mov	 rsi, rcx
  00156	b9 10 00 00 00	 mov	 ecx, 16
  0015b	f3 a4		 rep movsb
  0015d	4c 8d 44 24 70	 lea	 r8, QWORD PTR $T21493[rsp]
  00162	48 8d 54 24 60	 lea	 rdx, QWORD PTR $T21492[rsp]
  00167	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T21491[rsp]
  0016c	e8 00 00 00 00	 call	 _Py_c_sum
  00171	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T21495[rsp]
  00179	48 8b f9	 mov	 rdi, rcx
  0017c	48 8b f0	 mov	 rsi, rax
  0017f	b9 10 00 00 00	 mov	 ecx, 16
  00184	f3 a4		 rep movsb
  00186	48 8d 44 24 40	 lea	 rax, QWORD PTR result$[rsp]
  0018b	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T21495[rsp]
  00193	48 8b f8	 mov	 rdi, rax
  00196	48 8b f1	 mov	 rsi, rcx
  00199	b9 10 00 00 00	 mov	 ecx, 16
  0019e	f3 a4		 rep movsb

; 445  :     PyFPE_END_PROTECT(result)
; 446  :     return PyComplex_FromCComplex(result);

  001a0	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T21494[rsp]
  001a8	48 8d 4c 24 40	 lea	 rcx, QWORD PTR result$[rsp]
  001ad	48 8b f8	 mov	 rdi, rax
  001b0	48 8b f1	 mov	 rsi, rcx
  001b3	b9 10 00 00 00	 mov	 ecx, 16
  001b8	f3 a4		 rep movsb
  001ba	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T21494[rsp]
  001c2	e8 00 00 00 00	 call	 PyComplex_FromCComplex
$LN9@complex_ad:

; 447  : }

  001c7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  001ce	5f		 pop	 rdi
  001cf	5e		 pop	 rsi
  001d0	c3		 ret	 0
complex_add ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	PyFloat_Type:BYTE
EXTRN	PyLong_AsDouble:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$to_complex DD imagerel to_complex
	DD	imagerel to_complex+254
	DD	imagerel $unwind$to_complex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$to_complex DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT to_complex
_TEXT	SEGMENT
obj$ = 32
pobj$ = 64
pc$ = 72
to_complex PROC						; COMDAT

; 414  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 415  :     PyObject *obj = *pobj;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR pobj$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 44 24 20	 mov	 QWORD PTR obj$[rsp], rax

; 416  : 
; 417  :     pc->real = pc->imag = 0.0;

  0001b	48 8b 44 24 48	 mov	 rax, QWORD PTR pc$[rsp]
  00020	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00024	f2 0f 11 40 08	 movsdx	 QWORD PTR [rax+8], xmm0
  00029	48 8b 44 24 48	 mov	 rax, QWORD PTR pc$[rsp]
  0002e	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00032	f2 0f 11 00	 movsdx	 QWORD PTR [rax], xmm0

; 418  :     if (PyLong_Check(obj)) {

  00036	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
  0003b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00045	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0004a	85 c0		 test	 eax, eax
  0004c	74 49		 je	 SHORT $LN4@to_complex

; 419  :         pc->real = PyLong_AsDouble(obj);

  0004e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR obj$[rsp]
  00053	e8 00 00 00 00	 call	 PyLong_AsDouble
  00058	48 8b 44 24 48	 mov	 rax, QWORD PTR pc$[rsp]
  0005d	f2 0f 11 00	 movsdx	 QWORD PTR [rax], xmm0

; 420  :         if (pc->real == -1.0 && PyErr_Occurred()) {

  00061	48 8b 44 24 48	 mov	 rax, QWORD PTR pc$[rsp]
  00066	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0006a	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  00072	7a 1f		 jp	 SHORT $LN3@to_complex
  00074	75 1d		 jne	 SHORT $LN3@to_complex
  00076	e8 00 00 00 00	 call	 PyErr_Occurred
  0007b	48 85 c0	 test	 rax, rax
  0007e	74 13		 je	 SHORT $LN3@to_complex

; 421  :             *pobj = NULL;

  00080	48 8b 44 24 40	 mov	 rax, QWORD PTR pobj$[rsp]
  00085	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 422  :             return -1;

  0008c	b8 ff ff ff ff	 mov	 eax, -1
  00091	eb 66		 jmp	 SHORT $LN5@to_complex
$LN3@to_complex:

; 423  :         }
; 424  :         return 0;

  00093	33 c0		 xor	 eax, eax
  00095	eb 62		 jmp	 SHORT $LN5@to_complex
$LN4@to_complex:

; 425  :     }
; 426  :     if (PyFloat_Check(obj)) {

  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  0009e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR obj$[rsp]
  000a3	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a7	74 19		 je	 SHORT $LN1@to_complex
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFloat_Type
  000b0	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
  000b5	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000b9	e8 00 00 00 00	 call	 PyType_IsSubtype
  000be	85 c0		 test	 eax, eax
  000c0	74 17		 je	 SHORT $LN2@to_complex
$LN1@to_complex:

; 427  :         pc->real = PyFloat_AsDouble(obj);

  000c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR obj$[rsp]
  000c7	e8 00 00 00 00	 call	 PyFloat_AsDouble
  000cc	48 8b 44 24 48	 mov	 rax, QWORD PTR pc$[rsp]
  000d1	f2 0f 11 00	 movsdx	 QWORD PTR [rax], xmm0

; 428  :         return 0;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb 20		 jmp	 SHORT $LN5@to_complex
$LN2@to_complex:

; 429  :     }
; 430  :     Py_INCREF(Py_NotImplemented);

  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  000e0	e8 00 00 00 00	 call	 _Py_IncRef

; 431  :     *pobj = Py_NotImplemented;

  000e5	48 8b 44 24 40	 mov	 rax, QWORD PTR pobj$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  000f1	48 89 08	 mov	 QWORD PTR [rax], rcx

; 432  :     return -1;

  000f4	b8 ff ff ff ff	 mov	 eax, -1
$LN5@to_complex:

; 433  : }

  000f9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fd	c3		 ret	 0
to_complex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	$T21522
PUBLIC	$T21523
PUBLIC	$T21520
PUBLIC	$T21521
PUBLIC	$T21524
PUBLIC	$T21525
;	COMDAT pdata
; File c:\src\pyparallel\objects\complexobject.c
pdata	SEGMENT
$pdata$complex_sub DD imagerel complex_sub
	DD	imagerel complex_sub+465
	DD	imagerel $unwind$complex_sub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_sub DD 041301H
	DD	0190113H
	DD	0600b700cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT complex_sub
_TEXT	SEGMENT
a$ = 32
b$ = 48
result$ = 64
$T21519 = 80
$T21520 = 96
$T21521 = 112
$T21522 = 128
$T21523 = 144
$T21524 = 160
$T21525 = 176
v$ = 224
w$ = 232
complex_sub PROC					; COMDAT

; 451  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 452  :     Py_complex result;
; 453  :     Py_complex a, b;
; 454  :     TO_COMPLEX(v, a);

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  0001a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00022	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00026	74 1c		 je	 SHORT $LN7@complex_su
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  0002f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00037	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0003b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00040	85 c0		 test	 eax, eax
  00042	74 3a		 je	 SHORT $LN8@complex_su
$LN7@complex_su:
  00044	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T21525[rsp]
  0004c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00054	48 8b f8	 mov	 rdi, rax
  00057	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  0005b	b9 10 00 00 00	 mov	 ecx, 16
  00060	f3 a4		 rep movsb
  00062	48 8d 44 24 20	 lea	 rax, QWORD PTR a$[rsp]
  00067	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T21525[rsp]
  0006f	48 8b f8	 mov	 rdi, rax
  00072	48 8b f1	 mov	 rsi, rcx
  00075	b9 10 00 00 00	 mov	 ecx, 16
  0007a	f3 a4		 rep movsb
  0007c	eb 23		 jmp	 SHORT $LN6@complex_su
$LN8@complex_su:
  0007e	48 8d 54 24 20	 lea	 rdx, QWORD PTR a$[rsp]
  00083	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR v$[rsp]
  0008b	e8 00 00 00 00	 call	 to_complex
  00090	85 c0		 test	 eax, eax
  00092	7d 0d		 jge	 SHORT $LN5@complex_su
  00094	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0009c	e9 26 01 00 00	 jmp	 $LN9@complex_su
$LN5@complex_su:
$LN6@complex_su:

; 455  :     TO_COMPLEX(w, b);

  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  000a8	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  000b0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000b4	74 1c		 je	 SHORT $LN3@complex_su
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  000bd	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  000c5	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c9	e8 00 00 00 00	 call	 PyType_IsSubtype
  000ce	85 c0		 test	 eax, eax
  000d0	74 3a		 je	 SHORT $LN4@complex_su
$LN3@complex_su:
  000d2	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR $T21524[rsp]
  000da	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  000e2	48 8b f8	 mov	 rdi, rax
  000e5	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  000e9	b9 10 00 00 00	 mov	 ecx, 16
  000ee	f3 a4		 rep movsb
  000f0	48 8d 44 24 30	 lea	 rax, QWORD PTR b$[rsp]
  000f5	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T21524[rsp]
  000fd	48 8b f8	 mov	 rdi, rax
  00100	48 8b f1	 mov	 rsi, rcx
  00103	b9 10 00 00 00	 mov	 ecx, 16
  00108	f3 a4		 rep movsb
  0010a	eb 23		 jmp	 SHORT $LN2@complex_su
$LN4@complex_su:
  0010c	48 8d 54 24 30	 lea	 rdx, QWORD PTR b$[rsp]
  00111	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR w$[rsp]
  00119	e8 00 00 00 00	 call	 to_complex
  0011e	85 c0		 test	 eax, eax
  00120	7d 0d		 jge	 SHORT $LN1@complex_su
  00122	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  0012a	e9 98 00 00 00	 jmp	 $LN9@complex_su
$LN1@complex_su:
$LN2@complex_su:

; 456  :     PyFPE_START_PROTECT("complex_sub", return 0)
; 457  :     result = c_diff(a, b);

  0012f	48 8d 44 24 70	 lea	 rax, QWORD PTR $T21521[rsp]
  00134	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$[rsp]
  00139	48 8b f8	 mov	 rdi, rax
  0013c	48 8b f1	 mov	 rsi, rcx
  0013f	b9 10 00 00 00	 mov	 ecx, 16
  00144	f3 a4		 rep movsb
  00146	48 8d 44 24 60	 lea	 rax, QWORD PTR $T21520[rsp]
  0014b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR a$[rsp]
  00150	48 8b f8	 mov	 rdi, rax
  00153	48 8b f1	 mov	 rsi, rcx
  00156	b9 10 00 00 00	 mov	 ecx, 16
  0015b	f3 a4		 rep movsb
  0015d	4c 8d 44 24 70	 lea	 r8, QWORD PTR $T21521[rsp]
  00162	48 8d 54 24 60	 lea	 rdx, QWORD PTR $T21520[rsp]
  00167	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T21519[rsp]
  0016c	e8 00 00 00 00	 call	 _Py_c_diff
  00171	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T21523[rsp]
  00179	48 8b f9	 mov	 rdi, rcx
  0017c	48 8b f0	 mov	 rsi, rax
  0017f	b9 10 00 00 00	 mov	 ecx, 16
  00184	f3 a4		 rep movsb
  00186	48 8d 44 24 40	 lea	 rax, QWORD PTR result$[rsp]
  0018b	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T21523[rsp]
  00193	48 8b f8	 mov	 rdi, rax
  00196	48 8b f1	 mov	 rsi, rcx
  00199	b9 10 00 00 00	 mov	 ecx, 16
  0019e	f3 a4		 rep movsb

; 458  :     PyFPE_END_PROTECT(result)
; 459  :     return PyComplex_FromCComplex(result);

  001a0	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T21522[rsp]
  001a8	48 8d 4c 24 40	 lea	 rcx, QWORD PTR result$[rsp]
  001ad	48 8b f8	 mov	 rdi, rax
  001b0	48 8b f1	 mov	 rsi, rcx
  001b3	b9 10 00 00 00	 mov	 ecx, 16
  001b8	f3 a4		 rep movsb
  001ba	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T21522[rsp]
  001c2	e8 00 00 00 00	 call	 PyComplex_FromCComplex
$LN9@complex_su:

; 460  : }

  001c7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  001ce	5f		 pop	 rdi
  001cf	5e		 pop	 rsi
  001d0	c3		 ret	 0
complex_sub ENDP
_TEXT	ENDS
PUBLIC	$T21535
PUBLIC	$T21536
PUBLIC	$T21533
PUBLIC	$T21534
PUBLIC	$T21537
PUBLIC	$T21538
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_mul DD imagerel complex_mul
	DD	imagerel complex_mul+465
	DD	imagerel $unwind$complex_mul
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_mul DD 041301H
	DD	0190113H
	DD	0600b700cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT complex_mul
_TEXT	SEGMENT
a$ = 32
b$ = 48
result$ = 64
$T21532 = 80
$T21533 = 96
$T21534 = 112
$T21535 = 128
$T21536 = 144
$T21537 = 160
$T21538 = 176
v$ = 224
w$ = 232
complex_mul PROC					; COMDAT

; 464  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 465  :     Py_complex result;
; 466  :     Py_complex a, b;
; 467  :     TO_COMPLEX(v, a);

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  0001a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00022	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00026	74 1c		 je	 SHORT $LN7@complex_mu
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  0002f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00037	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0003b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00040	85 c0		 test	 eax, eax
  00042	74 3a		 je	 SHORT $LN8@complex_mu
$LN7@complex_mu:
  00044	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T21538[rsp]
  0004c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00054	48 8b f8	 mov	 rdi, rax
  00057	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  0005b	b9 10 00 00 00	 mov	 ecx, 16
  00060	f3 a4		 rep movsb
  00062	48 8d 44 24 20	 lea	 rax, QWORD PTR a$[rsp]
  00067	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T21538[rsp]
  0006f	48 8b f8	 mov	 rdi, rax
  00072	48 8b f1	 mov	 rsi, rcx
  00075	b9 10 00 00 00	 mov	 ecx, 16
  0007a	f3 a4		 rep movsb
  0007c	eb 23		 jmp	 SHORT $LN6@complex_mu
$LN8@complex_mu:
  0007e	48 8d 54 24 20	 lea	 rdx, QWORD PTR a$[rsp]
  00083	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR v$[rsp]
  0008b	e8 00 00 00 00	 call	 to_complex
  00090	85 c0		 test	 eax, eax
  00092	7d 0d		 jge	 SHORT $LN5@complex_mu
  00094	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0009c	e9 26 01 00 00	 jmp	 $LN9@complex_mu
$LN5@complex_mu:
$LN6@complex_mu:

; 468  :     TO_COMPLEX(w, b);

  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  000a8	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  000b0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000b4	74 1c		 je	 SHORT $LN3@complex_mu
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  000bd	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  000c5	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c9	e8 00 00 00 00	 call	 PyType_IsSubtype
  000ce	85 c0		 test	 eax, eax
  000d0	74 3a		 je	 SHORT $LN4@complex_mu
$LN3@complex_mu:
  000d2	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR $T21537[rsp]
  000da	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  000e2	48 8b f8	 mov	 rdi, rax
  000e5	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  000e9	b9 10 00 00 00	 mov	 ecx, 16
  000ee	f3 a4		 rep movsb
  000f0	48 8d 44 24 30	 lea	 rax, QWORD PTR b$[rsp]
  000f5	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T21537[rsp]
  000fd	48 8b f8	 mov	 rdi, rax
  00100	48 8b f1	 mov	 rsi, rcx
  00103	b9 10 00 00 00	 mov	 ecx, 16
  00108	f3 a4		 rep movsb
  0010a	eb 23		 jmp	 SHORT $LN2@complex_mu
$LN4@complex_mu:
  0010c	48 8d 54 24 30	 lea	 rdx, QWORD PTR b$[rsp]
  00111	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR w$[rsp]
  00119	e8 00 00 00 00	 call	 to_complex
  0011e	85 c0		 test	 eax, eax
  00120	7d 0d		 jge	 SHORT $LN1@complex_mu
  00122	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  0012a	e9 98 00 00 00	 jmp	 $LN9@complex_mu
$LN1@complex_mu:
$LN2@complex_mu:

; 469  :     PyFPE_START_PROTECT("complex_mul", return 0)
; 470  :     result = c_prod(a, b);

  0012f	48 8d 44 24 70	 lea	 rax, QWORD PTR $T21534[rsp]
  00134	48 8d 4c 24 30	 lea	 rcx, QWORD PTR b$[rsp]
  00139	48 8b f8	 mov	 rdi, rax
  0013c	48 8b f1	 mov	 rsi, rcx
  0013f	b9 10 00 00 00	 mov	 ecx, 16
  00144	f3 a4		 rep movsb
  00146	48 8d 44 24 60	 lea	 rax, QWORD PTR $T21533[rsp]
  0014b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR a$[rsp]
  00150	48 8b f8	 mov	 rdi, rax
  00153	48 8b f1	 mov	 rsi, rcx
  00156	b9 10 00 00 00	 mov	 ecx, 16
  0015b	f3 a4		 rep movsb
  0015d	4c 8d 44 24 70	 lea	 r8, QWORD PTR $T21534[rsp]
  00162	48 8d 54 24 60	 lea	 rdx, QWORD PTR $T21533[rsp]
  00167	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T21532[rsp]
  0016c	e8 00 00 00 00	 call	 _Py_c_prod
  00171	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T21536[rsp]
  00179	48 8b f9	 mov	 rdi, rcx
  0017c	48 8b f0	 mov	 rsi, rax
  0017f	b9 10 00 00 00	 mov	 ecx, 16
  00184	f3 a4		 rep movsb
  00186	48 8d 44 24 40	 lea	 rax, QWORD PTR result$[rsp]
  0018b	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T21536[rsp]
  00193	48 8b f8	 mov	 rdi, rax
  00196	48 8b f1	 mov	 rsi, rcx
  00199	b9 10 00 00 00	 mov	 ecx, 16
  0019e	f3 a4		 rep movsb

; 471  :     PyFPE_END_PROTECT(result)
; 472  :     return PyComplex_FromCComplex(result);

  001a0	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T21535[rsp]
  001a8	48 8d 4c 24 40	 lea	 rcx, QWORD PTR result$[rsp]
  001ad	48 8b f8	 mov	 rdi, rax
  001b0	48 8b f1	 mov	 rsi, rcx
  001b3	b9 10 00 00 00	 mov	 ecx, 16
  001b8	f3 a4		 rep movsb
  001ba	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T21535[rsp]
  001c2	e8 00 00 00 00	 call	 PyComplex_FromCComplex
$LN9@complex_mu:

; 473  : }

  001c7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  001ce	5f		 pop	 rdi
  001cf	5e		 pop	 rsi
  001d0	c3		 ret	 0
complex_mul ENDP
_TEXT	ENDS
PUBLIC	$T21548
PUBLIC	??_C@_0BJ@CAAPCGAK@complex?5division?5by?5zero?$AA@ ; `string'
PUBLIC	$T21549
PUBLIC	$T21546
PUBLIC	$T21547
PUBLIC	$T21550
PUBLIC	$T21551
EXTRN	PyExc_ZeroDivisionError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_div DD imagerel complex_div
	DD	imagerel complex_div+511
	DD	imagerel $unwind$complex_div
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_div DD 041301H
	DD	0190113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0BJ@CAAPCGAK@complex?5division?5by?5zero?$AA@
CONST	SEGMENT
??_C@_0BJ@CAAPCGAK@complex?5division?5by?5zero?$AA@ DB 'complex division '
	DB	'by zero', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_div
_TEXT	SEGMENT
a$ = 32
quot$ = 48
b$ = 64
$T21545 = 80
$T21546 = 96
$T21547 = 112
$T21548 = 128
$T21549 = 144
$T21550 = 160
$T21551 = 176
v$ = 224
w$ = 232
complex_div PROC					; COMDAT

; 477  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 478  :     Py_complex quot;
; 479  :     Py_complex a, b;
; 480  :     TO_COMPLEX(v, a);

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  0001a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00022	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00026	74 1c		 je	 SHORT $LN8@complex_di
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  0002f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00037	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0003b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00040	85 c0		 test	 eax, eax
  00042	74 3a		 je	 SHORT $LN9@complex_di
$LN8@complex_di:
  00044	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T21551[rsp]
  0004c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00054	48 8b f8	 mov	 rdi, rax
  00057	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  0005b	b9 10 00 00 00	 mov	 ecx, 16
  00060	f3 a4		 rep movsb
  00062	48 8d 44 24 20	 lea	 rax, QWORD PTR a$[rsp]
  00067	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T21551[rsp]
  0006f	48 8b f8	 mov	 rdi, rax
  00072	48 8b f1	 mov	 rsi, rcx
  00075	b9 10 00 00 00	 mov	 ecx, 16
  0007a	f3 a4		 rep movsb
  0007c	eb 23		 jmp	 SHORT $LN7@complex_di
$LN9@complex_di:
  0007e	48 8d 54 24 20	 lea	 rdx, QWORD PTR a$[rsp]
  00083	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR v$[rsp]
  0008b	e8 00 00 00 00	 call	 to_complex
  00090	85 c0		 test	 eax, eax
  00092	7d 0d		 jge	 SHORT $LN6@complex_di
  00094	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0009c	e9 54 01 00 00	 jmp	 $LN10@complex_di
$LN6@complex_di:
$LN7@complex_di:

; 481  :     TO_COMPLEX(w, b);

  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  000a8	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  000b0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000b4	74 1c		 je	 SHORT $LN4@complex_di
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  000bd	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  000c5	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c9	e8 00 00 00 00	 call	 PyType_IsSubtype
  000ce	85 c0		 test	 eax, eax
  000d0	74 3a		 je	 SHORT $LN5@complex_di
$LN4@complex_di:
  000d2	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR $T21550[rsp]
  000da	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  000e2	48 8b f8	 mov	 rdi, rax
  000e5	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  000e9	b9 10 00 00 00	 mov	 ecx, 16
  000ee	f3 a4		 rep movsb
  000f0	48 8d 44 24 40	 lea	 rax, QWORD PTR b$[rsp]
  000f5	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T21550[rsp]
  000fd	48 8b f8	 mov	 rdi, rax
  00100	48 8b f1	 mov	 rsi, rcx
  00103	b9 10 00 00 00	 mov	 ecx, 16
  00108	f3 a4		 rep movsb
  0010a	eb 23		 jmp	 SHORT $LN3@complex_di
$LN5@complex_di:
  0010c	48 8d 54 24 40	 lea	 rdx, QWORD PTR b$[rsp]
  00111	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR w$[rsp]
  00119	e8 00 00 00 00	 call	 to_complex
  0011e	85 c0		 test	 eax, eax
  00120	7d 0d		 jge	 SHORT $LN2@complex_di
  00122	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  0012a	e9 c6 00 00 00	 jmp	 $LN10@complex_di
$LN2@complex_di:
$LN3@complex_di:

; 482  :     PyFPE_START_PROTECT("complex_div", return 0)
; 483  :     errno = 0;

  0012f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00135	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 484  :     quot = c_quot(a, b);

  0013b	48 8d 44 24 70	 lea	 rax, QWORD PTR $T21547[rsp]
  00140	48 8d 4c 24 40	 lea	 rcx, QWORD PTR b$[rsp]
  00145	48 8b f8	 mov	 rdi, rax
  00148	48 8b f1	 mov	 rsi, rcx
  0014b	b9 10 00 00 00	 mov	 ecx, 16
  00150	f3 a4		 rep movsb
  00152	48 8d 44 24 60	 lea	 rax, QWORD PTR $T21546[rsp]
  00157	48 8d 4c 24 20	 lea	 rcx, QWORD PTR a$[rsp]
  0015c	48 8b f8	 mov	 rdi, rax
  0015f	48 8b f1	 mov	 rsi, rcx
  00162	b9 10 00 00 00	 mov	 ecx, 16
  00167	f3 a4		 rep movsb
  00169	4c 8d 44 24 70	 lea	 r8, QWORD PTR $T21547[rsp]
  0016e	48 8d 54 24 60	 lea	 rdx, QWORD PTR $T21546[rsp]
  00173	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T21545[rsp]
  00178	e8 00 00 00 00	 call	 _Py_c_quot
  0017d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T21549[rsp]
  00185	48 8b f9	 mov	 rdi, rcx
  00188	48 8b f0	 mov	 rsi, rax
  0018b	b9 10 00 00 00	 mov	 ecx, 16
  00190	f3 a4		 rep movsb
  00192	48 8d 44 24 30	 lea	 rax, QWORD PTR quot$[rsp]
  00197	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T21549[rsp]
  0019f	48 8b f8	 mov	 rdi, rax
  001a2	48 8b f1	 mov	 rsi, rcx
  001a5	b9 10 00 00 00	 mov	 ecx, 16
  001aa	f3 a4		 rep movsb

; 485  :     PyFPE_END_PROTECT(quot)
; 486  :     if (errno == EDOM) {

  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001b2	83 38 21	 cmp	 DWORD PTR [rax], 33	; 00000021H
  001b5	75 17		 jne	 SHORT $LN1@complex_di

; 487  :         PyErr_SetString(PyExc_ZeroDivisionError, "complex division by zero");

  001b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CAAPCGAK@complex?5division?5by?5zero?$AA@
  001be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ZeroDivisionError
  001c5	e8 00 00 00 00	 call	 PyErr_SetString

; 488  :         return NULL;

  001ca	33 c0		 xor	 eax, eax
  001cc	eb 27		 jmp	 SHORT $LN10@complex_di
$LN1@complex_di:

; 489  :     }
; 490  :     return PyComplex_FromCComplex(quot);

  001ce	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T21548[rsp]
  001d6	48 8d 4c 24 30	 lea	 rcx, QWORD PTR quot$[rsp]
  001db	48 8b f8	 mov	 rdi, rax
  001de	48 8b f1	 mov	 rsi, rcx
  001e1	b9 10 00 00 00	 mov	 ecx, 16
  001e6	f3 a4		 rep movsb
  001e8	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T21548[rsp]
  001f0	e8 00 00 00 00	 call	 PyComplex_FromCComplex
$LN10@complex_di:

; 491  : }

  001f5	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  001fc	5f		 pop	 rdi
  001fd	5e		 pop	 rsi
  001fe	c3		 ret	 0
complex_div ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@FAJMKFOP@can?8t?5mod?5complex?5numbers?4?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_remainder DD imagerel complex_remainder
	DD	imagerel complex_remainder+40
	DD	imagerel $unwind$complex_remainder
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_remainder DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BL@FAJMKFOP@can?8t?5mod?5complex?5numbers?4?$AA@
CONST	SEGMENT
??_C@_0BL@FAJMKFOP@can?8t?5mod?5complex?5numbers?4?$AA@ DB 'can''t mod co'
	DB	'mplex numbers.', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_remainder
_TEXT	SEGMENT
v$ = 48
w$ = 56
complex_remainder PROC					; COMDAT

; 495  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 496  :     PyErr_SetString(PyExc_TypeError,
; 497  :                     "can't mod complex numbers.");

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@FAJMKFOP@can?8t?5mod?5complex?5numbers?4?$AA@
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0001c	e8 00 00 00 00	 call	 PyErr_SetString

; 498  :     return NULL;

  00021	33 c0		 xor	 eax, eax

; 499  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
complex_remainder ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@LMFBJNLG@can?8t?5take?5floor?5or?5mod?5of?5compl@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_divmod DD imagerel complex_divmod
	DD	imagerel complex_divmod+40
	DD	imagerel $unwind$complex_divmod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_divmod DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0CL@LMFBJNLG@can?8t?5take?5floor?5or?5mod?5of?5compl@
CONST	SEGMENT
??_C@_0CL@LMFBJNLG@can?8t?5take?5floor?5or?5mod?5of?5compl@ DB 'can''t ta'
	DB	'ke floor or mod of complex number.', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_divmod
_TEXT	SEGMENT
v$ = 48
w$ = 56
complex_divmod PROC					; COMDAT

; 504  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 505  :     PyErr_SetString(PyExc_TypeError,
; 506  :                     "can't take floor or mod of complex number.");

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@LMFBJNLG@can?8t?5take?5floor?5or?5mod?5of?5compl@
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0001c	e8 00 00 00 00	 call	 PyErr_SetString

; 507  :     return NULL;

  00021	33 c0		 xor	 eax, eax

; 508  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
complex_divmod ENDP
_TEXT	ENDS
PUBLIC	$T21575
PUBLIC	??_C@_0BH@JFGOLFJP@complex?5exponentiation?$AA@	; `string'
PUBLIC	??_C@_0CD@FLGLCEEA@0?40?5to?5a?5negative?5or?5complex?5pow@ ; `string'
PUBLIC	$T21579
PUBLIC	$T21573
PUBLIC	$T21574
PUBLIC	$T21580
PUBLIC	$T21572
PUBLIC	??_C@_0P@JDIGEPHM@complex?5modulo?$AA@		; `string'
PUBLIC	$T21581
PUBLIC	$T21582
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyExc_ValueError:QWORD
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_pow DD imagerel complex_pow
	DD	imagerel complex_pow+946
	DD	imagerel $unwind$complex_pow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_pow DD 041801H
	DD	0230118H
	DD	060107011H
xdata	ENDS
;	COMDAT ??_C@_0BH@JFGOLFJP@complex?5exponentiation?$AA@
CONST	SEGMENT
??_C@_0BH@JFGOLFJP@complex?5exponentiation?$AA@ DB 'complex exponentiatio'
	DB	'n', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FLGLCEEA@0?40?5to?5a?5negative?5or?5complex?5pow@
CONST	SEGMENT
??_C@_0CD@FLGLCEEA@0?40?5to?5a?5negative?5or?5complex?5pow@ DB '0.0 to a '
	DB	'negative or complex power', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JDIGEPHM@complex?5modulo?$AA@
CONST	SEGMENT
??_C@_0P@JDIGEPHM@complex?5modulo?$AA@ DB 'complex modulo', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_pow
_TEXT	SEGMENT
p$ = 32
a$ = 48
int_exponent$ = 64
exponent$ = 72
b$ = 88
$T21570 = 104
$T21571 = 120
$T21572 = 144
$T21573 = 160
$T21574 = 176
$T21575 = 192
$T21579 = 208
$T21580 = 224
$T21581 = 240
$T21582 = 256
v$ = 304
w$ = 312
z$ = 320
complex_pow PROC					; COMDAT

; 512  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 513  :     Py_complex p;
; 514  :     Py_complex exponent;
; 515  :     long int_exponent;
; 516  :     Py_complex a, b;
; 517  :     TO_COMPLEX(v, a);

  00018	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  0001f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00027	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002b	74 1c		 je	 SHORT $LN21@complex_po
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  00034	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0003c	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00040	e8 00 00 00 00	 call	 PyType_IsSubtype
  00045	85 c0		 test	 eax, eax
  00047	74 3a		 je	 SHORT $LN22@complex_po
$LN21@complex_po:
  00049	48 8d 84 24 00
	01 00 00	 lea	 rax, QWORD PTR $T21582[rsp]
  00051	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00059	48 8b f8	 mov	 rdi, rax
  0005c	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  00060	b9 10 00 00 00	 mov	 ecx, 16
  00065	f3 a4		 rep movsb
  00067	48 8d 44 24 30	 lea	 rax, QWORD PTR a$[rsp]
  0006c	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR $T21582[rsp]
  00074	48 8b f8	 mov	 rdi, rax
  00077	48 8b f1	 mov	 rsi, rcx
  0007a	b9 10 00 00 00	 mov	 ecx, 16
  0007f	f3 a4		 rep movsb
  00081	eb 23		 jmp	 SHORT $LN20@complex_po
$LN22@complex_po:
  00083	48 8d 54 24 30	 lea	 rdx, QWORD PTR a$[rsp]
  00088	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR v$[rsp]
  00090	e8 00 00 00 00	 call	 to_complex
  00095	85 c0		 test	 eax, eax
  00097	7d 0d		 jge	 SHORT $LN19@complex_po
  00099	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  000a1	e9 02 03 00 00	 jmp	 $LN23@complex_po
$LN19@complex_po:
$LN20@complex_po:

; 518  :     TO_COMPLEX(w, b);

  000a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  000ad	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  000b5	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000b9	74 1c		 je	 SHORT $LN17@complex_po
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  000c2	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR w$[rsp]
  000ca	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000ce	e8 00 00 00 00	 call	 PyType_IsSubtype
  000d3	85 c0		 test	 eax, eax
  000d5	74 3a		 je	 SHORT $LN18@complex_po
$LN17@complex_po:
  000d7	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR $T21581[rsp]
  000df	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  000e7	48 8b f8	 mov	 rdi, rax
  000ea	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  000ee	b9 10 00 00 00	 mov	 ecx, 16
  000f3	f3 a4		 rep movsb
  000f5	48 8d 44 24 58	 lea	 rax, QWORD PTR b$[rsp]
  000fa	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR $T21581[rsp]
  00102	48 8b f8	 mov	 rdi, rax
  00105	48 8b f1	 mov	 rsi, rcx
  00108	b9 10 00 00 00	 mov	 ecx, 16
  0010d	f3 a4		 rep movsb
  0010f	eb 23		 jmp	 SHORT $LN16@complex_po
$LN18@complex_po:
  00111	48 8d 54 24 58	 lea	 rdx, QWORD PTR b$[rsp]
  00116	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR w$[rsp]
  0011e	e8 00 00 00 00	 call	 to_complex
  00123	85 c0		 test	 eax, eax
  00125	7d 0d		 jge	 SHORT $LN15@complex_po
  00127	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR w$[rsp]
  0012f	e9 74 02 00 00	 jmp	 $LN23@complex_po
$LN15@complex_po:
$LN16@complex_po:

; 519  : 
; 520  :     if (z != Py_None) {

  00134	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0013b	48 39 84 24 40
	01 00 00	 cmp	 QWORD PTR z$[rsp], rax
  00143	74 1a		 je	 SHORT $LN14@complex_po

; 521  :         PyErr_SetString(PyExc_ValueError, "complex modulo");

  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@JDIGEPHM@complex?5modulo?$AA@
  0014c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00153	e8 00 00 00 00	 call	 PyErr_SetString

; 522  :         return NULL;

  00158	33 c0		 xor	 eax, eax
  0015a	e9 49 02 00 00	 jmp	 $LN23@complex_po
$LN14@complex_po:

; 523  :     }
; 524  :     PyFPE_START_PROTECT("complex_pow", return 0)
; 525  :     errno = 0;

  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00165	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 526  :     exponent = b;

  0016b	48 8d 44 24 48	 lea	 rax, QWORD PTR exponent$[rsp]
  00170	48 8d 4c 24 58	 lea	 rcx, QWORD PTR b$[rsp]
  00175	48 8b f8	 mov	 rdi, rax
  00178	48 8b f1	 mov	 rsi, rcx
  0017b	b9 10 00 00 00	 mov	 ecx, 16
  00180	f3 a4		 rep movsb

; 527  :     int_exponent = (long)exponent.real;

  00182	f2 0f 2c 44 24
	48		 cvttsd2si eax, QWORD PTR exponent$[rsp]
  00188	89 44 24 40	 mov	 DWORD PTR int_exponent$[rsp], eax

; 528  :     if (exponent.imag == 0. && exponent.real == int_exponent)

  0018c	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR exponent$[rsp+8]
  00192	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0019a	7a 7c		 jp	 SHORT $LN13@complex_po
  0019c	75 7a		 jne	 SHORT $LN13@complex_po
  0019e	66 0f 6e 44 24
	40		 movd	 xmm0, DWORD PTR int_exponent$[rsp]
  001a4	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001a8	f2 0f 10 4c 24
	48		 movsdx	 xmm1, QWORD PTR exponent$[rsp]
  001ae	66 0f 2e c8	 ucomisd xmm1, xmm0
  001b2	7a 64		 jp	 SHORT $LN13@complex_po
  001b4	75 62		 jne	 SHORT $LN13@complex_po

; 529  :         p = c_powi(a, int_exponent);

  001b6	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR $T21572[rsp]
  001be	48 8d 4c 24 30	 lea	 rcx, QWORD PTR a$[rsp]
  001c3	48 8b f8	 mov	 rdi, rax
  001c6	48 8b f1	 mov	 rsi, rcx
  001c9	b9 10 00 00 00	 mov	 ecx, 16
  001ce	f3 a4		 rep movsb
  001d0	44 8b 44 24 40	 mov	 r8d, DWORD PTR int_exponent$[rsp]
  001d5	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR $T21572[rsp]
  001dd	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T21570[rsp]
  001e2	e8 00 00 00 00	 call	 c_powi
  001e7	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR $T21580[rsp]
  001ef	48 8b f9	 mov	 rdi, rcx
  001f2	48 8b f0	 mov	 rsi, rax
  001f5	b9 10 00 00 00	 mov	 ecx, 16
  001fa	f3 a4		 rep movsb
  001fc	48 8d 44 24 20	 lea	 rax, QWORD PTR p$[rsp]
  00201	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR $T21580[rsp]
  00209	48 8b f8	 mov	 rdi, rax
  0020c	48 8b f1	 mov	 rsi, rcx
  0020f	b9 10 00 00 00	 mov	 ecx, 16
  00214	f3 a4		 rep movsb

; 530  :     else

  00216	eb 7d		 jmp	 SHORT $LN12@complex_po
$LN13@complex_po:

; 531  :         p = c_pow(a, exponent);

  00218	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T21574[rsp]
  00220	48 8d 4c 24 48	 lea	 rcx, QWORD PTR exponent$[rsp]
  00225	48 8b f8	 mov	 rdi, rax
  00228	48 8b f1	 mov	 rsi, rcx
  0022b	b9 10 00 00 00	 mov	 ecx, 16
  00230	f3 a4		 rep movsb
  00232	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR $T21573[rsp]
  0023a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR a$[rsp]
  0023f	48 8b f8	 mov	 rdi, rax
  00242	48 8b f1	 mov	 rsi, rcx
  00245	b9 10 00 00 00	 mov	 ecx, 16
  0024a	f3 a4		 rep movsb
  0024c	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR $T21574[rsp]
  00254	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T21573[rsp]
  0025c	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T21571[rsp]
  00261	e8 00 00 00 00	 call	 _Py_c_pow
  00266	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T21579[rsp]
  0026e	48 8b f9	 mov	 rdi, rcx
  00271	48 8b f0	 mov	 rsi, rax
  00274	b9 10 00 00 00	 mov	 ecx, 16
  00279	f3 a4		 rep movsb
  0027b	48 8d 44 24 20	 lea	 rax, QWORD PTR p$[rsp]
  00280	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T21579[rsp]
  00288	48 8b f8	 mov	 rdi, rax
  0028b	48 8b f1	 mov	 rsi, rcx
  0028e	b9 10 00 00 00	 mov	 ecx, 16
  00293	f3 a4		 rep movsb
$LN12@complex_po:
$LN11@complex_po:

; 532  : 
; 533  :     PyFPE_END_PROTECT(p)
; 534  :     Py_ADJUST_ERANGE2(p.real, p.imag);

  00295	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  0029c	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR p$[rsp]
  002a2	66 0f 2e 00	 ucomisd xmm0, QWORD PTR [rax]
  002a6	7a 02		 jp	 SHORT $LN27@complex_po
  002a8	74 57		 je	 SHORT $LN7@complex_po
$LN27@complex_po:
  002aa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  002b1	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  002b5	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  002bd	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR p$[rsp]
  002c3	66 0f 2e c8	 ucomisd xmm1, xmm0
  002c7	7a 02		 jp	 SHORT $LN26@complex_po
  002c9	74 36		 je	 SHORT $LN7@complex_po
$LN26@complex_po:
  002cb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  002d2	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR p$[rsp+8]
  002d8	66 0f 2e 00	 ucomisd xmm0, QWORD PTR [rax]
  002dc	7a 02		 jp	 SHORT $LN25@complex_po
  002de	74 21		 je	 SHORT $LN7@complex_po
$LN25@complex_po:
  002e0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  002e7	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  002eb	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  002f3	f2 0f 10 4c 24
	28		 movsdx	 xmm1, QWORD PTR p$[rsp+8]
  002f9	66 0f 2e c8	 ucomisd xmm1, xmm0
  002fd	7a 1b		 jp	 SHORT $LN8@complex_po
  002ff	75 19		 jne	 SHORT $LN8@complex_po
$LN7@complex_po:
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00307	83 38 00	 cmp	 DWORD PTR [rax], 0
  0030a	75 0c		 jne	 SHORT $LN6@complex_po
  0030c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00312	c7 00 22 00 00
	00		 mov	 DWORD PTR [rax], 34	; 00000022H
$LN6@complex_po:
  00318	eb 17		 jmp	 SHORT $LN5@complex_po
$LN8@complex_po:
  0031a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00320	83 38 22	 cmp	 DWORD PTR [rax], 34	; 00000022H
  00323	75 0c		 jne	 SHORT $LN4@complex_po
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0032b	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN4@complex_po:
$LN5@complex_po:
  00331	33 c0		 xor	 eax, eax
  00333	85 c0		 test	 eax, eax
  00335	0f 85 5a ff ff
	ff		 jne	 $LN11@complex_po

; 535  :     if (errno == EDOM) {

  0033b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00341	83 38 21	 cmp	 DWORD PTR [rax], 33	; 00000021H
  00344	75 19		 jne	 SHORT $LN3@complex_po

; 536  :         PyErr_SetString(PyExc_ZeroDivisionError,
; 537  :                         "0.0 to a negative or complex power");

  00346	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@FLGLCEEA@0?40?5to?5a?5negative?5or?5complex?5pow@
  0034d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ZeroDivisionError
  00354	e8 00 00 00 00	 call	 PyErr_SetString

; 538  :         return NULL;

  00359	33 c0		 xor	 eax, eax
  0035b	eb 4b		 jmp	 SHORT $LN23@complex_po
  0035d	eb 22		 jmp	 SHORT $LN2@complex_po
$LN3@complex_po:

; 539  :     }
; 540  :     else if (errno == ERANGE) {

  0035f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00365	83 38 22	 cmp	 DWORD PTR [rax], 34	; 00000022H
  00368	75 17		 jne	 SHORT $LN1@complex_po

; 541  :         PyErr_SetString(PyExc_OverflowError,
; 542  :                         "complex exponentiation");

  0036a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@JFGOLFJP@complex?5exponentiation?$AA@
  00371	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00378	e8 00 00 00 00	 call	 PyErr_SetString

; 543  :         return NULL;

  0037d	33 c0		 xor	 eax, eax
  0037f	eb 27		 jmp	 SHORT $LN23@complex_po
$LN1@complex_po:
$LN2@complex_po:

; 544  :     }
; 545  :     return PyComplex_FromCComplex(p);

  00381	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T21575[rsp]
  00389	48 8d 4c 24 20	 lea	 rcx, QWORD PTR p$[rsp]
  0038e	48 8b f8	 mov	 rdi, rax
  00391	48 8b f1	 mov	 rsi, rcx
  00394	b9 10 00 00 00	 mov	 ecx, 16
  00399	f3 a4		 rep movsb
  0039b	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR $T21575[rsp]
  003a3	e8 00 00 00 00	 call	 PyComplex_FromCComplex
$LN23@complex_po:

; 546  : }

  003a8	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  003af	5f		 pop	 rdi
  003b0	5e		 pop	 rsi
  003b1	c3		 ret	 0
complex_pow ENDP
_TEXT	ENDS
PUBLIC	$T21598
PUBLIC	$T21599
PUBLIC	$T21597
PUBLIC	$T21596
PUBLIC	$T21594
PUBLIC	$T21595
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_powi DD imagerel c_powi
	DD	imagerel c_powi+450
	DD	imagerel $unwind$c_powi
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_powi DD 041801H
	DD	01b0118H
	DD	060107011H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT c_powi
_TEXT	SEGMENT
cn$ = 32
$T21590 = 48
$T21591 = 64
$T21592 = 80
$T21593 = 96
$T21594 = 112
$T21595 = 128
$T21596 = 144
$T21597 = 160
$T21598 = 176
$T21599 = 192
$T21589 = 240
x$ = 248
n$ = 256
c_powi	PROC						; COMDAT

; 153  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 154  :     Py_complex cn;
; 155  : 
; 156  :     if (n > 100 || n < -100) {

  00018	83 bc 24 00 01
	00 00 64	 cmp	 DWORD PTR n$[rsp], 100	; 00000064H
  00020	7f 0e		 jg	 SHORT $LN4@c_powi
  00022	83 bc 24 00 01
	00 00 9c	 cmp	 DWORD PTR n$[rsp], -100	; ffffffffffffff9cH
  0002a	0f 8d 89 00 00
	00		 jge	 $LN5@c_powi
$LN4@c_powi:

; 157  :         cn.real = (double) n;

  00030	66 0f 6e 84 24
	00 01 00 00	 movd	 xmm0, DWORD PTR n$[rsp]
  00039	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0003d	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR cn$[rsp], xmm0

; 158  :         cn.imag = 0.;

  00043	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00047	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR cn$[rsp+8], xmm0

; 159  :         return c_pow(x,cn);

  0004d	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T21595[rsp]
  00055	48 8d 4c 24 20	 lea	 rcx, QWORD PTR cn$[rsp]
  0005a	48 8b f8	 mov	 rdi, rax
  0005d	48 8b f1	 mov	 rsi, rcx
  00060	b9 10 00 00 00	 mov	 ecx, 16
  00065	f3 a4		 rep movsb
  00067	48 8d 44 24 70	 lea	 rax, QWORD PTR $T21594[rsp]
  0006c	48 8b f8	 mov	 rdi, rax
  0006f	48 8b b4 24 f8
	00 00 00	 mov	 rsi, QWORD PTR x$[rsp]
  00077	b9 10 00 00 00	 mov	 ecx, 16
  0007c	f3 a4		 rep movsb
  0007e	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR $T21595[rsp]
  00086	48 8d 54 24 70	 lea	 rdx, QWORD PTR $T21594[rsp]
  0008b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21590[rsp]
  00090	e8 00 00 00 00	 call	 _Py_c_pow
  00095	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR $T21589[rsp]
  0009d	48 8b f0	 mov	 rsi, rax
  000a0	b9 10 00 00 00	 mov	 ecx, 16
  000a5	f3 a4		 rep movsb
  000a7	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR $T21589[rsp]
  000af	e9 04 01 00 00	 jmp	 $LN6@c_powi
  000b4	e9 ff 00 00 00	 jmp	 $LN3@c_powi
$LN5@c_powi:

; 160  :     }
; 161  :     else if (n > 0)

  000b9	83 bc 24 00 01
	00 00 00	 cmp	 DWORD PTR n$[rsp], 0
  000c1	7e 58		 jle	 SHORT $LN2@c_powi

; 162  :         return c_powu(x,n);

  000c3	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR $T21596[rsp]
  000cb	48 8b f8	 mov	 rdi, rax
  000ce	48 8b b4 24 f8
	00 00 00	 mov	 rsi, QWORD PTR x$[rsp]
  000d6	b9 10 00 00 00	 mov	 ecx, 16
  000db	f3 a4		 rep movsb
  000dd	44 8b 84 24 00
	01 00 00	 mov	 r8d, DWORD PTR n$[rsp]
  000e5	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR $T21596[rsp]
  000ed	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T21591[rsp]
  000f2	e8 00 00 00 00	 call	 c_powu
  000f7	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR $T21589[rsp]
  000ff	48 8b f0	 mov	 rsi, rax
  00102	b9 10 00 00 00	 mov	 ecx, 16
  00107	f3 a4		 rep movsb
  00109	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR $T21589[rsp]
  00111	e9 a2 00 00 00	 jmp	 $LN6@c_powi

; 163  :     else

  00116	e9 9d 00 00 00	 jmp	 $LN1@c_powi
$LN2@c_powi:

; 164  :         return c_quot(c_1,c_powu(x,-n));

  0011b	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  00122	f7 d8		 neg	 eax
  00124	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T21597[rsp]
  0012c	48 8b f9	 mov	 rdi, rcx
  0012f	48 8b b4 24 f8
	00 00 00	 mov	 rsi, QWORD PTR x$[rsp]
  00137	b9 10 00 00 00	 mov	 ecx, 16
  0013c	f3 a4		 rep movsb
  0013e	44 8b c0	 mov	 r8d, eax
  00141	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T21597[rsp]
  00149	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T21592[rsp]
  0014e	e8 00 00 00 00	 call	 c_powu
  00153	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR $T21599[rsp]
  0015b	48 8b f9	 mov	 rdi, rcx
  0015e	48 8b f0	 mov	 rsi, rax
  00161	b9 10 00 00 00	 mov	 ecx, 16
  00166	f3 a4		 rep movsb
  00168	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T21598[rsp]
  00170	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:c_1
  00177	48 8b f8	 mov	 rdi, rax
  0017a	48 8b f1	 mov	 rsi, rcx
  0017d	b9 10 00 00 00	 mov	 ecx, 16
  00182	f3 a4		 rep movsb
  00184	4c 8d 84 24 c0
	00 00 00	 lea	 r8, QWORD PTR $T21599[rsp]
  0018c	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR $T21598[rsp]
  00194	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T21593[rsp]
  00199	e8 00 00 00 00	 call	 _Py_c_quot
  0019e	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR $T21589[rsp]
  001a6	48 8b f0	 mov	 rsi, rax
  001a9	b9 10 00 00 00	 mov	 ecx, 16
  001ae	f3 a4		 rep movsb
  001b0	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR $T21589[rsp]
$LN1@c_powi:
$LN3@c_powi:
$LN6@c_powi:

; 165  : 
; 166  : }

  001b8	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  001bf	5f		 pop	 rdi
  001c0	5e		 pop	 rsi
  001c1	c3		 ret	 0
c_powi	ENDP
_TEXT	ENDS
PUBLIC	$T21613
PUBLIC	$T21611
PUBLIC	$T21612
PUBLIC	$T21614
PUBLIC	$T21609
PUBLIC	$T21610
PUBLIC	$T21615
;	COMDAT pdata
pdata	SEGMENT
$pdata$c_powu DD imagerel c_powu
	DD	imagerel c_powu+456
	DD	imagerel $unwind$c_powu
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$c_powu DD 041801H
	DD	01d0118H
	DD	060107011H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT c_powu
_TEXT	SEGMENT
p$ = 32
mask$ = 48
r$ = 56
$T21607 = 72
$T21608 = 88
$T21609 = 112
$T21610 = 128
$T21611 = 144
$T21612 = 160
$T21613 = 176
$T21614 = 192
$T21615 = 208
$T21606 = 256
x$ = 264
n$ = 272
c_powu	PROC						; COMDAT

; 137  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H

; 138  :     Py_complex r, p;
; 139  :     long mask = 1;

  00018	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR mask$[rsp], 1

; 140  :     r = c_1;

  00020	48 8d 44 24 38	 lea	 rax, QWORD PTR r$[rsp]
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:c_1
  0002c	48 8b f8	 mov	 rdi, rax
  0002f	48 8b f1	 mov	 rsi, rcx
  00032	b9 10 00 00 00	 mov	 ecx, 16
  00037	f3 a4		 rep movsb

; 141  :     p = x;

  00039	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T21615[rsp]
  00041	48 8b f8	 mov	 rdi, rax
  00044	48 8b b4 24 08
	01 00 00	 mov	 rsi, QWORD PTR x$[rsp]
  0004c	b9 10 00 00 00	 mov	 ecx, 16
  00051	f3 a4		 rep movsb
  00053	48 8d 44 24 20	 lea	 rax, QWORD PTR p$[rsp]
  00058	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T21615[rsp]
  00060	48 8b f8	 mov	 rdi, rax
  00063	48 8b f1	 mov	 rsi, rcx
  00066	b9 10 00 00 00	 mov	 ecx, 16
  0006b	f3 a4		 rep movsb
$LN3@c_powu:

; 142  :     while (mask > 0 && n >= mask) {

  0006d	83 7c 24 30 00	 cmp	 DWORD PTR mask$[rsp], 0
  00072	0f 8e 27 01 00
	00		 jle	 $LN2@c_powu
  00078	8b 44 24 30	 mov	 eax, DWORD PTR mask$[rsp]
  0007c	39 84 24 10 01
	00 00		 cmp	 DWORD PTR n$[rsp], eax
  00083	0f 8c 16 01 00
	00		 jl	 $LN2@c_powu

; 143  :         if (n & mask)

  00089	8b 44 24 30	 mov	 eax, DWORD PTR mask$[rsp]
  0008d	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR n$[rsp]
  00094	23 c8		 and	 ecx, eax
  00096	8b c1		 mov	 eax, ecx
  00098	85 c0		 test	 eax, eax
  0009a	74 77		 je	 SHORT $LN1@c_powu

; 144  :             r = c_prod(r,p);

  0009c	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T21610[rsp]
  000a4	48 8d 4c 24 20	 lea	 rcx, QWORD PTR p$[rsp]
  000a9	48 8b f8	 mov	 rdi, rax
  000ac	48 8b f1	 mov	 rsi, rcx
  000af	b9 10 00 00 00	 mov	 ecx, 16
  000b4	f3 a4		 rep movsb
  000b6	48 8d 44 24 70	 lea	 rax, QWORD PTR $T21609[rsp]
  000bb	48 8d 4c 24 38	 lea	 rcx, QWORD PTR r$[rsp]
  000c0	48 8b f8	 mov	 rdi, rax
  000c3	48 8b f1	 mov	 rsi, rcx
  000c6	b9 10 00 00 00	 mov	 ecx, 16
  000cb	f3 a4		 rep movsb
  000cd	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR $T21610[rsp]
  000d5	48 8d 54 24 70	 lea	 rdx, QWORD PTR $T21609[rsp]
  000da	48 8d 4c 24 48	 lea	 rcx, QWORD PTR $T21607[rsp]
  000df	e8 00 00 00 00	 call	 _Py_c_prod
  000e4	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR $T21614[rsp]
  000ec	48 8b f9	 mov	 rdi, rcx
  000ef	48 8b f0	 mov	 rsi, rax
  000f2	b9 10 00 00 00	 mov	 ecx, 16
  000f7	f3 a4		 rep movsb
  000f9	48 8d 44 24 38	 lea	 rax, QWORD PTR r$[rsp]
  000fe	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR $T21614[rsp]
  00106	48 8b f8	 mov	 rdi, rax
  00109	48 8b f1	 mov	 rsi, rcx
  0010c	b9 10 00 00 00	 mov	 ecx, 16
  00111	f3 a4		 rep movsb
$LN1@c_powu:

; 145  :         mask <<= 1;

  00113	8b 44 24 30	 mov	 eax, DWORD PTR mask$[rsp]
  00117	d1 e0		 shl	 eax, 1
  00119	89 44 24 30	 mov	 DWORD PTR mask$[rsp], eax

; 146  :         p = c_prod(p,p);

  0011d	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR $T21612[rsp]
  00125	48 8d 4c 24 20	 lea	 rcx, QWORD PTR p$[rsp]
  0012a	48 8b f8	 mov	 rdi, rax
  0012d	48 8b f1	 mov	 rsi, rcx
  00130	b9 10 00 00 00	 mov	 ecx, 16
  00135	f3 a4		 rep movsb
  00137	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR $T21611[rsp]
  0013f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR p$[rsp]
  00144	48 8b f8	 mov	 rdi, rax
  00147	48 8b f1	 mov	 rsi, rcx
  0014a	b9 10 00 00 00	 mov	 ecx, 16
  0014f	f3 a4		 rep movsb
  00151	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR $T21612[rsp]
  00159	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR $T21611[rsp]
  00161	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T21608[rsp]
  00166	e8 00 00 00 00	 call	 _Py_c_prod
  0016b	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T21613[rsp]
  00173	48 8b f9	 mov	 rdi, rcx
  00176	48 8b f0	 mov	 rsi, rax
  00179	b9 10 00 00 00	 mov	 ecx, 16
  0017e	f3 a4		 rep movsb
  00180	48 8d 44 24 20	 lea	 rax, QWORD PTR p$[rsp]
  00185	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T21613[rsp]
  0018d	48 8b f8	 mov	 rdi, rax
  00190	48 8b f1	 mov	 rsi, rcx
  00193	b9 10 00 00 00	 mov	 ecx, 16
  00198	f3 a4		 rep movsb

; 147  :     }

  0019a	e9 ce fe ff ff	 jmp	 $LN3@c_powu
$LN2@c_powu:

; 148  :     return r;

  0019f	48 8d 44 24 38	 lea	 rax, QWORD PTR r$[rsp]
  001a4	48 8b bc 24 00
	01 00 00	 mov	 rdi, QWORD PTR $T21606[rsp]
  001ac	48 8b f0	 mov	 rsi, rax
  001af	b9 10 00 00 00	 mov	 ecx, 16
  001b4	f3 a4		 rep movsb
  001b6	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR $T21606[rsp]

; 149  : }

  001be	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  001c5	5f		 pop	 rdi
  001c6	5e		 pop	 rsi
  001c7	c3		 ret	 0
c_powu	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@GONAHFFA@can?8t?5take?5floor?5of?5complex?5numb@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_int_div DD imagerel complex_int_div
	DD	imagerel complex_int_div+40
	DD	imagerel $unwind$complex_int_div
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_int_div DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0CE@GONAHFFA@can?8t?5take?5floor?5of?5complex?5numb@
CONST	SEGMENT
??_C@_0CE@GONAHFFA@can?8t?5take?5floor?5of?5complex?5numb@ DB 'can''t tak'
	DB	'e floor of complex number.', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_int_div
_TEXT	SEGMENT
v$ = 48
w$ = 56
complex_int_div PROC					; COMDAT

; 550  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 551  :     PyErr_SetString(PyExc_TypeError,
; 552  :                     "can't take floor of complex number.");

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@GONAHFFA@can?8t?5take?5floor?5of?5complex?5numb@
  00015	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0001c	e8 00 00 00 00	 call	 PyErr_SetString

; 553  :     return NULL;

  00021	33 c0		 xor	 eax, eax

; 554  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
complex_int_div ENDP
_TEXT	ENDS
PUBLIC	$T21628
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_neg DD imagerel complex_neg
	DD	imagerel complex_neg+99
	DD	imagerel $unwind$complex_neg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_neg DD 030b01H
	DD	07007820bH
	DD	06006H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT complex_neg
_TEXT	SEGMENT
neg$ = 32
$T21628 = 48
v$ = 96
complex_neg PROC					; COMDAT

; 558  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 559  :     Py_complex neg;
; 560  :     neg.real = -v->cval.real;

  0000b	48 8b 44 24 60	 mov	 rax, QWORD PTR v$[rsp]
  00010	f2 0f 10 40 60	 movsdx	 xmm0, QWORD PTR [rax+96]
  00015	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  0001d	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR neg$[rsp], xmm0

; 561  :     neg.imag = -v->cval.imag;

  00023	48 8b 44 24 60	 mov	 rax, QWORD PTR v$[rsp]
  00028	f2 0f 10 40 68	 movsdx	 xmm0, QWORD PTR [rax+104]
  0002d	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  00035	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR neg$[rsp+8], xmm0

; 562  :     return PyComplex_FromCComplex(neg);

  0003b	48 8d 44 24 30	 lea	 rax, QWORD PTR $T21628[rsp]
  00040	48 8d 4c 24 20	 lea	 rcx, QWORD PTR neg$[rsp]
  00045	48 8b f8	 mov	 rdi, rax
  00048	48 8b f1	 mov	 rsi, rcx
  0004b	b9 10 00 00 00	 mov	 ecx, 16
  00050	f3 a4		 rep movsb
  00052	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21628[rsp]
  00057	e8 00 00 00 00	 call	 PyComplex_FromCComplex

; 563  : }

  0005c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00060	5f		 pop	 rdi
  00061	5e		 pop	 rsi
  00062	c3		 ret	 0
complex_neg ENDP
_TEXT	ENDS
PUBLIC	$T21635
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_pos DD imagerel complex_pos
	DD	imagerel complex_pos+89
	DD	imagerel $unwind$complex_pos
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_pos DD 030b01H
	DD	07007620bH
	DD	06006H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT complex_pos
_TEXT	SEGMENT
$T21635 = 32
v$ = 80
complex_pos PROC					; COMDAT

; 567  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 568  :     if (PyComplex_CheckExact(v)) {

  0000b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  00012	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  00017	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001b	75 13		 jne	 SHORT $LN2@complex_po@2

; 569  :         Py_INCREF(v);

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  00022	e8 00 00 00 00	 call	 _Py_IncRef

; 570  :         return (PyObject *)v;

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR v$[rsp]
  0002c	eb 24		 jmp	 SHORT $LN3@complex_po@2

; 571  :     }
; 572  :     else

  0002e	eb 22		 jmp	 SHORT $LN1@complex_po@2
$LN2@complex_po@2:

; 573  :         return PyComplex_FromCComplex(v->cval);

  00030	48 8d 44 24 20	 lea	 rax, QWORD PTR $T21635[rsp]
  00035	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  0003a	48 8b f8	 mov	 rdi, rax
  0003d	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  00041	b9 10 00 00 00	 mov	 ecx, 16
  00046	f3 a4		 rep movsb
  00048	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T21635[rsp]
  0004d	e8 00 00 00 00	 call	 PyComplex_FromCComplex
$LN1@complex_po@2:
$LN3@complex_po@2:

; 574  : }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	5f		 pop	 rdi
  00057	5e		 pop	 rsi
  00058	c3		 ret	 0
complex_pos ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@OOMGPMGG@absolute?5value?5too?5large?$AA@ ; `string'
PUBLIC	$T21642
EXTRN	PyFloat_FromDouble:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_abs DD imagerel complex_abs
	DD	imagerel complex_abs+103
	DD	imagerel $unwind$complex_abs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_abs DD 030b01H
	DD	07007820bH
	DD	06006H
xdata	ENDS
;	COMDAT ??_C@_0BJ@OOMGPMGG@absolute?5value?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BJ@OOMGPMGG@absolute?5value?5too?5large?$AA@ DB 'absolute value to'
	DB	'o large', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_abs
_TEXT	SEGMENT
result$ = 32
$T21642 = 48
v$ = 96
complex_abs PROC					; COMDAT

; 578  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 579  :     double result;
; 580  : 
; 581  :     PyFPE_START_PROTECT("complex_abs", return 0)
; 582  :     result = c_abs(v->cval);

  0000b	48 8d 44 24 30	 lea	 rax, QWORD PTR $T21642[rsp]
  00010	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  00015	48 8b f8	 mov	 rdi, rax
  00018	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  0001c	b9 10 00 00 00	 mov	 ecx, 16
  00021	f3 a4		 rep movsb
  00023	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21642[rsp]
  00028	e8 00 00 00 00	 call	 _Py_c_abs
  0002d	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR result$[rsp], xmm0

; 583  :     PyFPE_END_PROTECT(result)
; 584  : 
; 585  :     if (errno == ERANGE) {

  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00039	83 38 22	 cmp	 DWORD PTR [rax], 34	; 00000022H
  0003c	75 17		 jne	 SHORT $LN1@complex_ab

; 586  :         PyErr_SetString(PyExc_OverflowError,
; 587  :                         "absolute value too large");

  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@OOMGPMGG@absolute?5value?5too?5large?$AA@
  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0004c	e8 00 00 00 00	 call	 PyErr_SetString

; 588  :         return NULL;

  00051	33 c0		 xor	 eax, eax
  00053	eb 0b		 jmp	 SHORT $LN2@complex_ab
$LN1@complex_ab:

; 589  :     }
; 590  :     return PyFloat_FromDouble(result);

  00055	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR result$[rsp]
  0005b	e8 00 00 00 00	 call	 PyFloat_FromDouble
$LN2@complex_ab:

; 591  : }

  00060	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00064	5f		 pop	 rdi
  00065	5e		 pop	 rsi
  00066	c3		 ret	 0
complex_abs ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_bool DD imagerel complex_bool
	DD	imagerel complex_bool+77
	DD	imagerel $unwind$complex_bool
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_bool DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT complex_bool
_TEXT	SEGMENT
tv68 = 0
v$ = 32
complex_bool PROC					; COMDAT

; 595  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 596  :     return v->cval.real != 0.0 || v->cval.imag != 0.0;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  0000e	f2 0f 10 40 60	 movsdx	 xmm0, QWORD PTR [rax+96]
  00013	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0001b	7a 21		 jp	 SHORT $LN3@complex_bo
  0001d	75 1f		 jne	 SHORT $LN3@complex_bo
  0001f	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  00024	f2 0f 10 40 68	 movsdx	 xmm0, QWORD PTR [rax+104]
  00029	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00031	7a 0b		 jp	 SHORT $LN3@complex_bo
  00033	75 09		 jne	 SHORT $LN3@complex_bo
  00035	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv68[rsp], 0
  0003c	eb 07		 jmp	 SHORT $LN4@complex_bo
$LN3@complex_bo:
  0003e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv68[rsp], 1
$LN4@complex_bo:
  00045	8b 04 24	 mov	 eax, DWORD PTR tv68[rsp]

; 597  : }

  00048	48 83 c4 18	 add	 rsp, 24
  0004c	c3		 ret	 0
complex_bool ENDP
_TEXT	ENDS
PUBLIC	$T21664
PUBLIC	$T21665
PUBLIC	??_C@_1CG@FFBDFCOF@?$AAP?$AAy?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyObject_RichCompare:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_richcompare DD imagerel complex_richcompare
	DD	imagerel complex_richcompare+917
	DD	imagerel $unwind$complex_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_richcompare DD 041801H
	DD	0130118H
	DD	060107011H
xdata	ENDS
;	COMDAT ??_C@_1CG@FFBDFCOF@?$AAP?$AAy?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@FFBDFCOF@?$AAP?$AAy?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	'e', 00H, 'x', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'v', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_richcompare
_TEXT	SEGMENT
res$ = 32
i$ = 40
equal$ = 56
sub_res$20798 = 64
j$20797 = 72
j$20814 = 80
$T21664 = 96
$T21665 = 112
tv146 = 128
tv169 = 132
tv171 = 136
v$ = 176
w$ = 184
op$ = 192
complex_richcompare PROC				; COMDAT

; 601  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 602  :     PyObject *res;
; 603  :     Py_complex i;
; 604  :     int equal;
; 605  : 
; 606  :     if (op != Py_EQ && op != Py_NE) {

  00018	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR op$[rsp], 2
  00020	74 0f		 je	 SHORT $LN22@complex_ri
  00022	83 bc 24 c0 00
	00 00 03	 cmp	 DWORD PTR op$[rsp], 3
  0002a	74 05		 je	 SHORT $LN22@complex_ri

; 607  :         goto Unimplemented;

  0002c	e9 47 03 00 00	 jmp	 $Unimplemented$20782
$LN22@complex_ri:

; 608  :     }
; 609  : 
; 610  :     assert(PyComplex_Check(v));

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  00038	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00040	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00044	74 38		 je	 SHORT $LN25@complex_ri
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  0004d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00055	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00059	e8 00 00 00 00	 call	 PyType_IsSubtype
  0005e	85 c0		 test	 eax, eax
  00060	75 1c		 jne	 SHORT $LN25@complex_ri
  00062	41 b8 62 02 00
	00		 mov	 r8d, 610		; 00000262H
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@MHMPLIPM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@FFBDFCOF@?$AAP?$AAy?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007c	33 c0		 xor	 eax, eax
$LN25@complex_ri:

; 611  :     TO_COMPLEX(v, i);

  0007e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  00085	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0008d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00091	74 1c		 je	 SHORT $LN20@complex_ri
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  0009a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  000a2	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000a6	e8 00 00 00 00	 call	 PyType_IsSubtype
  000ab	85 c0		 test	 eax, eax
  000ad	74 34		 je	 SHORT $LN21@complex_ri
$LN20@complex_ri:
  000af	48 8d 44 24 70	 lea	 rax, QWORD PTR $T21665[rsp]
  000b4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  000bc	48 8b f8	 mov	 rdi, rax
  000bf	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  000c3	b9 10 00 00 00	 mov	 ecx, 16
  000c8	f3 a4		 rep movsb
  000ca	48 8d 44 24 28	 lea	 rax, QWORD PTR i$[rsp]
  000cf	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T21665[rsp]
  000d4	48 8b f8	 mov	 rdi, rax
  000d7	48 8b f1	 mov	 rsi, rcx
  000da	b9 10 00 00 00	 mov	 ecx, 16
  000df	f3 a4		 rep movsb
  000e1	eb 23		 jmp	 SHORT $LN19@complex_ri
$LN21@complex_ri:
  000e3	48 8d 54 24 28	 lea	 rdx, QWORD PTR i$[rsp]
  000e8	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR v$[rsp]
  000f0	e8 00 00 00 00	 call	 to_complex
  000f5	85 c0		 test	 eax, eax
  000f7	7d 0d		 jge	 SHORT $LN18@complex_ri
  000f9	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00101	e9 85 02 00 00	 jmp	 $LN23@complex_ri
$LN18@complex_ri:
$LN19@complex_ri:

; 612  : 
; 613  :     if (PyLong_Check(w)) {

  00106	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  0010e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00112	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00118	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0011d	85 c0		 test	 eax, eax
  0011f	74 73		 je	 SHORT $LN17@complex_ri

; 614  :         /* Check for 0.0 imaginary part first to avoid the rich
; 615  :          * comparison when possible.
; 616  :          */
; 617  :         if (i.imag == 0.0) {

  00121	f2 0f 10 44 24
	30		 movsdx	 xmm0, QWORD PTR i$[rsp+8]
  00127	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0012f	7a 56		 jp	 SHORT $LN16@complex_ri
  00131	75 54		 jne	 SHORT $LN16@complex_ri

; 618  :             PyObject *j, *sub_res;
; 619  :             j = PyFloat_FromDouble(i.real);

  00133	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR i$[rsp]
  00139	e8 00 00 00 00	 call	 PyFloat_FromDouble
  0013e	48 89 44 24 48	 mov	 QWORD PTR j$20797[rsp], rax

; 620  :             if (j == NULL)

  00143	48 83 7c 24 48
	00		 cmp	 QWORD PTR j$20797[rsp], 0
  00149	75 07		 jne	 SHORT $LN15@complex_ri

; 621  :                 return NULL;

  0014b	33 c0		 xor	 eax, eax
  0014d	e9 39 02 00 00	 jmp	 $LN23@complex_ri
$LN15@complex_ri:

; 622  : 
; 623  :             sub_res = PyObject_RichCompare(j, w, op);

  00152	44 8b 84 24 c0
	00 00 00	 mov	 r8d, DWORD PTR op$[rsp]
  0015a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR w$[rsp]
  00162	48 8b 4c 24 48	 mov	 rcx, QWORD PTR j$20797[rsp]
  00167	e8 00 00 00 00	 call	 PyObject_RichCompare
  0016c	48 89 44 24 40	 mov	 QWORD PTR sub_res$20798[rsp], rax

; 624  :             Py_DECREF(j);

  00171	48 8b 4c 24 48	 mov	 rcx, QWORD PTR j$20797[rsp]
  00176	e8 00 00 00 00	 call	 _Py_DecRef

; 625  :             return sub_res;

  0017b	48 8b 44 24 40	 mov	 rax, QWORD PTR sub_res$20798[rsp]
  00180	e9 06 02 00 00	 jmp	 $LN23@complex_ri

; 626  :         }
; 627  :         else {

  00185	eb 08		 jmp	 SHORT $LN14@complex_ri
$LN16@complex_ri:

; 628  :             equal = 0;

  00187	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR equal$[rsp], 0
$LN14@complex_ri:

; 629  :         }

  0018f	e9 8a 01 00 00	 jmp	 $LN13@complex_ri
$LN17@complex_ri:

; 630  :     }
; 631  :     else if (PyFloat_Check(w)) {

  00194	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  0019b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  001a3	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  001a7	74 1c		 je	 SHORT $LN11@complex_ri
  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFloat_Type
  001b0	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  001b8	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  001bc	e8 00 00 00 00	 call	 PyType_IsSubtype
  001c1	85 c0		 test	 eax, eax
  001c3	74 55		 je	 SHORT $LN12@complex_ri
$LN11@complex_ri:

; 632  :         equal = (i.real == PyFloat_AsDouble(w) && i.imag == 0.0);

  001c5	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  001cd	e8 00 00 00 00	 call	 PyFloat_AsDouble
  001d2	f2 0f 10 4c 24
	28		 movsdx	 xmm1, QWORD PTR i$[rsp]
  001d8	66 0f 2e c8	 ucomisd xmm1, xmm0
  001dc	7a 21		 jp	 SHORT $LN26@complex_ri
  001de	75 1f		 jne	 SHORT $LN26@complex_ri
  001e0	f2 0f 10 44 24
	30		 movsdx	 xmm0, QWORD PTR i$[rsp+8]
  001e6	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  001ee	7a 0f		 jp	 SHORT $LN26@complex_ri
  001f0	75 0d		 jne	 SHORT $LN26@complex_ri
  001f2	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv146[rsp], 1
  001fd	eb 0b		 jmp	 SHORT $LN27@complex_ri
$LN26@complex_ri:
  001ff	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv146[rsp], 0
$LN27@complex_ri:
  0020a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv146[rsp]
  00211	89 44 24 38	 mov	 DWORD PTR equal$[rsp], eax
  00215	e9 04 01 00 00	 jmp	 $LN10@complex_ri
$LN12@complex_ri:

; 633  :     }
; 634  :     else if (PyComplex_Check(w)) {

  0021a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  00221	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  00229	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0022d	74 20		 je	 SHORT $LN8@complex_ri
  0022f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  00236	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  0023e	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00242	e8 00 00 00 00	 call	 PyType_IsSubtype
  00247	85 c0		 test	 eax, eax
  00249	0f 84 cd 00 00
	00		 je	 $LN9@complex_ri
$LN8@complex_ri:

; 635  :         Py_complex j;
; 636  : 
; 637  :         TO_COMPLEX(w, j);

  0024f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  00256	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  0025e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00262	74 1c		 je	 SHORT $LN6@complex_ri
  00264	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  0026b	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  00273	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00277	e8 00 00 00 00	 call	 PyType_IsSubtype
  0027c	85 c0		 test	 eax, eax
  0027e	74 34		 je	 SHORT $LN7@complex_ri
$LN6@complex_ri:
  00280	48 8d 44 24 60	 lea	 rax, QWORD PTR $T21664[rsp]
  00285	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  0028d	48 8b f8	 mov	 rdi, rax
  00290	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  00294	b9 10 00 00 00	 mov	 ecx, 16
  00299	f3 a4		 rep movsb
  0029b	48 8d 44 24 50	 lea	 rax, QWORD PTR j$20814[rsp]
  002a0	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T21664[rsp]
  002a5	48 8b f8	 mov	 rdi, rax
  002a8	48 8b f1	 mov	 rsi, rcx
  002ab	b9 10 00 00 00	 mov	 ecx, 16
  002b0	f3 a4		 rep movsb
  002b2	eb 23		 jmp	 SHORT $LN5@complex_ri
$LN7@complex_ri:
  002b4	48 8d 54 24 50	 lea	 rdx, QWORD PTR j$20814[rsp]
  002b9	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR w$[rsp]
  002c1	e8 00 00 00 00	 call	 to_complex
  002c6	85 c0		 test	 eax, eax
  002c8	7d 0d		 jge	 SHORT $LN4@complex_ri
  002ca	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  002d2	e9 b4 00 00 00	 jmp	 $LN23@complex_ri
$LN4@complex_ri:
$LN5@complex_ri:

; 638  :         equal = (i.real == j.real && i.imag == j.imag);

  002d7	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR i$[rsp]
  002dd	66 0f 2e 44 24
	50		 ucomisd xmm0, QWORD PTR j$20814[rsp]
  002e3	7a 1f		 jp	 SHORT $LN28@complex_ri
  002e5	75 1d		 jne	 SHORT $LN28@complex_ri
  002e7	f2 0f 10 44 24
	30		 movsdx	 xmm0, QWORD PTR i$[rsp+8]
  002ed	66 0f 2e 44 24
	58		 ucomisd xmm0, QWORD PTR j$20814[rsp+8]
  002f3	7a 0f		 jp	 SHORT $LN28@complex_ri
  002f5	75 0d		 jne	 SHORT $LN28@complex_ri
  002f7	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv169[rsp], 1
  00302	eb 0b		 jmp	 SHORT $LN29@complex_ri
$LN28@complex_ri:
  00304	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv169[rsp], 0
$LN29@complex_ri:
  0030f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv169[rsp]
  00316	89 44 24 38	 mov	 DWORD PTR equal$[rsp], eax

; 639  :     }
; 640  :     else {

  0031a	eb 02		 jmp	 SHORT $LN3@complex_ri
$LN9@complex_ri:

; 641  :         goto Unimplemented;

  0031c	eb 5a		 jmp	 SHORT $Unimplemented$20782
$LN3@complex_ri:
$LN10@complex_ri:
$LN13@complex_ri:

; 642  :     }
; 643  : 
; 644  :     if (equal == (op == Py_EQ))

  0031e	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR op$[rsp], 2
  00326	75 0d		 jne	 SHORT $LN30@complex_ri
  00328	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv171[rsp], 1
  00333	eb 0b		 jmp	 SHORT $LN31@complex_ri
$LN30@complex_ri:
  00335	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv171[rsp], 0
$LN31@complex_ri:
  00340	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv171[rsp]
  00347	39 44 24 38	 cmp	 DWORD PTR equal$[rsp], eax
  0034b	75 0e		 jne	 SHORT $LN2@complex_ri

; 645  :          res = Py_True;

  0034d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00354	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 646  :     else

  00359	eb 0c		 jmp	 SHORT $LN1@complex_ri
$LN2@complex_ri:

; 647  :          res = Py_False;

  0035b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00362	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@complex_ri:

; 648  : 
; 649  :     Py_INCREF(res);

  00367	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0036c	e8 00 00 00 00	 call	 _Py_IncRef

; 650  :     return res;

  00371	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00376	eb 13		 jmp	 SHORT $LN23@complex_ri
$Unimplemented$20782:

; 651  : 
; 652  : Unimplemented:
; 653  :     Py_RETURN_NOTIMPLEMENTED;

  00378	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0037f	e8 00 00 00 00	 call	 _Py_IncRef
  00384	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN23@complex_ri:

; 654  : }

  0038b	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00392	5f		 pop	 rdi
  00393	5e		 pop	 rsi
  00394	c3		 ret	 0
complex_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@BDCCKPHB@can?8t?5convert?5complex?5to?5int?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_int DD imagerel complex_int
	DD	imagerel complex_int+35
	DD	imagerel $unwind$complex_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_int DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BN@BDCCKPHB@can?8t?5convert?5complex?5to?5int?$AA@
CONST	SEGMENT
??_C@_0BN@BDCCKPHB@can?8t?5convert?5complex?5to?5int?$AA@ DB 'can''t conv'
	DB	'ert complex to int', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_int
_TEXT	SEGMENT
v$ = 48
complex_int PROC					; COMDAT

; 658  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 659  :     PyErr_SetString(PyExc_TypeError,
; 660  :                "can't convert complex to int");

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@BDCCKPHB@can?8t?5convert?5complex?5to?5int?$AA@
  00010	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00017	e8 00 00 00 00	 call	 PyErr_SetString

; 661  :     return NULL;

  0001c	33 c0		 xor	 eax, eax

; 662  : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
complex_int ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@HOIFMJCC@can?8t?5convert?5complex?5to?5float?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_float DD imagerel complex_float
	DD	imagerel complex_float+35
	DD	imagerel $unwind$complex_float
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_float DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BP@HOIFMJCC@can?8t?5convert?5complex?5to?5float?$AA@
CONST	SEGMENT
??_C@_0BP@HOIFMJCC@can?8t?5convert?5complex?5to?5float?$AA@ DB 'can''t co'
	DB	'nvert complex to float', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_float
_TEXT	SEGMENT
v$ = 48
complex_float PROC					; COMDAT

; 666  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 667  :     PyErr_SetString(PyExc_TypeError,
; 668  :                "can't convert complex to float");

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@HOIFMJCC@can?8t?5convert?5complex?5to?5float?$AA@
  00010	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00017	e8 00 00 00 00	 call	 PyErr_SetString

; 669  :     return NULL;

  0001c	33 c0		 xor	 eax, eax

; 670  : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
complex_float ENDP
_TEXT	ENDS
PUBLIC	$T21684
PUBLIC	$T21685
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_conjugate DD imagerel complex_conjugate
	DD	imagerel complex_conjugate+118
	DD	imagerel $unwind$complex_conjugate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_conjugate DD 030b01H
	DD	07007a20bH
	DD	06006H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT complex_conjugate
_TEXT	SEGMENT
c$ = 32
$T21684 = 48
$T21685 = 64
self$ = 112
complex_conjugate PROC					; COMDAT

; 674  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 675  :     Py_complex c;
; 676  :     c = ((PyComplexObject *)self)->cval;

  0000b	48 8d 44 24 40	 lea	 rax, QWORD PTR $T21685[rsp]
  00010	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00015	48 8b f8	 mov	 rdi, rax
  00018	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  0001c	b9 10 00 00 00	 mov	 ecx, 16
  00021	f3 a4		 rep movsb
  00023	48 8d 44 24 20	 lea	 rax, QWORD PTR c$[rsp]
  00028	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T21685[rsp]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	48 8b f1	 mov	 rsi, rcx
  00033	b9 10 00 00 00	 mov	 ecx, 16
  00038	f3 a4		 rep movsb

; 677  :     c.imag = -c.imag;

  0003a	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR c$[rsp+8]
  00040	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  00048	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR c$[rsp+8], xmm0

; 678  :     return PyComplex_FromCComplex(c);

  0004e	48 8d 44 24 30	 lea	 rax, QWORD PTR $T21684[rsp]
  00053	48 8d 4c 24 20	 lea	 rcx, QWORD PTR c$[rsp]
  00058	48 8b f8	 mov	 rdi, rax
  0005b	48 8b f1	 mov	 rsi, rcx
  0005e	b9 10 00 00 00	 mov	 ecx, 16
  00063	f3 a4		 rep movsb
  00065	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21684[rsp]
  0006a	e8 00 00 00 00	 call	 PyComplex_FromCComplex

; 679  : }

  0006f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00073	5f		 pop	 rdi
  00074	5e		 pop	 rsi
  00075	c3		 ret	 0
complex_conjugate ENDP
_TEXT	ENDS
PUBLIC	??_C@_04HHLAPAGE@?$CIdd?$CJ?$AA@		; `string'
PUBLIC	$T21692
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_getnewargs DD imagerel complex_getnewargs
	DD	imagerel complex_getnewargs+99
	DD	imagerel $unwind$complex_getnewargs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_getnewargs DD 030b01H
	DD	07007820bH
	DD	06006H
xdata	ENDS
;	COMDAT ??_C@_04HHLAPAGE@?$CIdd?$CJ?$AA@
CONST	SEGMENT
??_C@_04HHLAPAGE@?$CIdd?$CJ?$AA@ DB '(dd)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_getnewargs
_TEXT	SEGMENT
c$ = 32
$T21692 = 48
v$ = 96
complex_getnewargs PROC					; COMDAT

; 688  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 689  :     Py_complex c = v->cval;

  0000b	48 8d 44 24 30	 lea	 rax, QWORD PTR $T21692[rsp]
  00010	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  00015	48 8b f8	 mov	 rdi, rax
  00018	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  0001c	b9 10 00 00 00	 mov	 ecx, 16
  00021	f3 a4		 rep movsb
  00023	48 8d 44 24 20	 lea	 rax, QWORD PTR c$[rsp]
  00028	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T21692[rsp]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	48 8b f1	 mov	 rsi, rcx
  00033	b9 10 00 00 00	 mov	 ecx, 16
  00038	f3 a4		 rep movsb

; 690  :     return Py_BuildValue("(dd)", c.real, c.imag);

  0003a	f2 0f 10 54 24
	28		 movsdx	 xmm2, QWORD PTR c$[rsp+8]
  00040	66 49 0f 7e d0	 movd	 r8, xmm2
  00045	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR c$[rsp]
  0004b	66 48 0f 7e ca	 movd	 rdx, xmm1
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04HHLAPAGE@?$CIdd?$CJ?$AA@
  00057	e8 00 00 00 00	 call	 Py_BuildValue

; 691  : }

  0005c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00060	5f		 pop	 rdi
  00061	5e		 pop	 rsi
  00062	c3		 ret	 0
complex_getnewargs ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@EKIKMBMC@U?3__format__?$AA@		; `string'
EXTRN	_PyUnicodeWriter_Finish:PROC
EXTRN	_PyUnicodeWriter_Dealloc:PROC
EXTRN	_PyComplex_FormatAdvancedWriter:PROC
EXTRN	_PyUnicodeWriter_Init:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex__format__ DD imagerel complex__format__
	DD	imagerel complex__format__+246
	DD	imagerel $unwind$complex__format__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex__format__ DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'f', 00H
	DB	'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'p', 00H, 'e', 00H, 'c', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, '_', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EKIKMBMC@U?3__format__?$AA@
CONST	SEGMENT
??_C@_0N@EKIKMBMC@U?3__format__?$AA@ DB 'U:__format__', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex__format__
_TEXT	SEGMENT
writer$ = 48
format_spec$ = 104
ret$ = 112
self$ = 144
args$ = 152
complex__format__ PROC					; COMDAT

; 700  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 701  :     PyObject *format_spec;
; 702  :     _PyUnicodeWriter writer;
; 703  :     int ret;
; 704  : 
; 705  :     if (!PyArg_ParseTuple(args, "U:__format__", &format_spec))

  00011	4c 8d 44 24 68	 lea	 r8, QWORD PTR format_spec$[rsp]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@EKIKMBMC@U?3__format__?$AA@
  0001d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00025	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002a	85 c0		 test	 eax, eax
  0002c	75 07		 jne	 SHORT $LN2@complex__f

; 706  :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	e9 b9 00 00 00	 jmp	 $LN3@complex__f
$LN2@complex__f:

; 707  : 
; 708  :     _PyUnicodeWriter_Init(&writer, 0);

  00035	33 d2		 xor	 edx, edx
  00037	48 8d 4c 24 30	 lea	 rcx, QWORD PTR writer$[rsp]
  0003c	e8 00 00 00 00	 call	 _PyUnicodeWriter_Init

; 709  :     ret = _PyComplex_FormatAdvancedWriter(
; 710  :         &writer,
; 711  :         self,
; 712  :         format_spec, 0, PyUnicode_GET_LENGTH(format_spec));

  00041	48 8b 44 24 68	 mov	 rax, QWORD PTR format_spec$[rsp]
  00046	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00050	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00055	85 c0		 test	 eax, eax
  00057	75 1c		 jne	 SHORT $LN5@complex__f
  00059	41 b8 c8 02 00
	00		 mov	 r8d, 712		; 000002c8H
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@MHMPLIPM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00073	33 c0		 xor	 eax, eax
$LN5@complex__f:
  00075	48 8b 44 24 68	 mov	 rax, QWORD PTR format_spec$[rsp]
  0007a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0007d	c1 e8 07	 shr	 eax, 7
  00080	83 e0 01	 and	 eax, 1
  00083	85 c0		 test	 eax, eax
  00085	75 1c		 jne	 SHORT $LN6@complex__f
  00087	41 b8 c8 02 00
	00		 mov	 r8d, 712		; 000002c8H
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@MHMPLIPM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAx?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a1	33 c0		 xor	 eax, eax
$LN6@complex__f:
  000a3	48 8b 44 24 68	 mov	 rax, QWORD PTR format_spec$[rsp]
  000a8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b1	45 33 c9	 xor	 r9d, r9d
  000b4	4c 8b 44 24 68	 mov	 r8, QWORD PTR format_spec$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  000c1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR writer$[rsp]
  000c6	e8 00 00 00 00	 call	 _PyComplex_FormatAdvancedWriter
  000cb	89 44 24 70	 mov	 DWORD PTR ret$[rsp], eax

; 713  :     if (ret == -1) {

  000cf	83 7c 24 70 ff	 cmp	 DWORD PTR ret$[rsp], -1
  000d4	75 0e		 jne	 SHORT $LN1@complex__f

; 714  :         _PyUnicodeWriter_Dealloc(&writer);

  000d6	48 8d 4c 24 30	 lea	 rcx, QWORD PTR writer$[rsp]
  000db	e8 00 00 00 00	 call	 _PyUnicodeWriter_Dealloc

; 715  :         return NULL;

  000e0	33 c0		 xor	 eax, eax
  000e2	eb 0a		 jmp	 SHORT $LN3@complex__f
$LN1@complex__f:

; 716  :     }
; 717  :     return _PyUnicodeWriter_Finish(&writer);

  000e4	48 8d 4c 24 30	 lea	 rcx, QWORD PTR writer$[rsp]
  000e9	e8 00 00 00 00	 call	 _PyUnicodeWriter_Finish
$LN3@complex__f:

; 718  : }

  000ee	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000f5	c3		 ret	 0
complex__format__ ENDP
_TEXT	ENDS
PUBLIC	$T21707
PUBLIC	??_C@_0BP@OHCJGELG@float?$CIr?$CJ?5didn?8t?5return?5a?5float?$AA@ ; `string'
PUBLIC	$T21708
PUBLIC	??_C@_0DA@LGCEOOP@complex?$CI?$CJ?5argument?5must?5be?5a?5str@ ; `string'
PUBLIC	??_C@_0CH@KIMMAJKJ@complex?$CI?$CJ?5second?5arg?5can?8t?5be?5a?5@ ; `string'
PUBLIC	??_C@_0DF@DPNOAEGF@complex?$CI?$CJ?5can?8t?5take?5second?5arg?5@ ; `string'
PUBLIC	??_C@_0M@ICFMNLDM@?$HMOO?3complex?$AA@		; `string'
EXTRN	PyNumber_Float:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_new DD imagerel complex_new
	DD	imagerel complex_new+1123
	DD	imagerel $unwind$complex_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_new DD 041801H
	DD	0170118H
	DD	060107011H
xdata	ENDS
;	COMDAT ??_C@_0BP@OHCJGELG@float?$CIr?$CJ?5didn?8t?5return?5a?5float?$AA@
CONST	SEGMENT
??_C@_0BP@OHCJGELG@float?$CIr?$CJ?5didn?8t?5return?5a?5float?$AA@ DB 'flo'
	DB	'at(r) didn''t return a float', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LGCEOOP@complex?$CI?$CJ?5argument?5must?5be?5a?5str@
CONST	SEGMENT
??_C@_0DA@LGCEOOP@complex?$CI?$CJ?5argument?5must?5be?5a?5str@ DB 'comple'
	DB	'x() argument must be a string or a number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KIMMAJKJ@complex?$CI?$CJ?5second?5arg?5can?8t?5be?5a?5@
CONST	SEGMENT
??_C@_0CH@KIMMAJKJ@complex?$CI?$CJ?5second?5arg?5can?8t?5be?5a?5@ DB 'com'
	DB	'plex() second arg can''t be a string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@DPNOAEGF@complex?$CI?$CJ?5can?8t?5take?5second?5arg?5@
CONST	SEGMENT
??_C@_0DF@DPNOAEGF@complex?$CI?$CJ?5can?8t?5take?5second?5arg?5@ DB 'comp'
	DB	'lex() can''t take second arg if first is a string', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ICFMNLDM@?$HMOO?3complex?$AA@
CONST	SEGMENT
??_C@_0M@ICFMNLDM@?$HMOO?3complex?$AA@ DB '|OO:complex', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_new
_TEXT	SEGMENT
nbi$ = 48
cr$ = 56
i$ = 72
own_r$ = 80
ci$ = 88
tmp$ = 104
cr_is_complex$ = 112
ci_is_complex$ = 116
r$ = 120
nbr$ = 128
$T21707 = 136
$T21708 = 152
type$ = 208
args$ = 216
kwds$ = 224
complex_new PROC					; COMDAT

; 901  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 902  :     PyObject *r, *i, *tmp;
; 903  :     PyNumberMethods *nbr, *nbi = NULL;

  00018	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR nbi$[rsp], 0

; 904  :     Py_complex cr, ci;
; 905  :     int own_r = 0;

  00021	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR own_r$[rsp], 0

; 906  :     int cr_is_complex = 0;

  00029	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR cr_is_complex$[rsp], 0

; 907  :     int ci_is_complex = 0;

  00031	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR ci_is_complex$[rsp], 0

; 908  :     static char *kwlist[] = {"real", "imag", 0};
; 909  : 
; 910  :     r = Py_False;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00040	48 89 44 24 78	 mov	 QWORD PTR r$[rsp], rax

; 911  :     i = NULL;

  00045	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0

; 912  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OO:complex", kwlist,
; 913  :                                      &r, &i))

  0004e	48 8d 44 24 48	 lea	 rax, QWORD PTR i$[rsp]
  00053	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00058	48 8d 44 24 78	 lea	 rax, QWORD PTR r$[rsp]
  0005d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00062	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??complex_new@@9@9
  00069	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@ICFMNLDM@?$HMOO?3complex?$AA@
  00070	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00078	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00080	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00085	85 c0		 test	 eax, eax
  00087	75 07		 jne	 SHORT $LN28@complex_ne

; 914  :         return NULL;

  00089	33 c0		 xor	 eax, eax
  0008b	e9 c9 03 00 00	 jmp	 $LN29@complex_ne
$LN28@complex_ne:

; 915  : 
; 916  :     /* Special-case for a single argument when type(arg) is complex. */
; 917  :     if (PyComplex_CheckExact(r) && i == NULL &&
; 918  :         type == &PyComplex_Type) {

  00090	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  00097	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  0009c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a0	75 2d		 jne	 SHORT $LN27@complex_ne
  000a2	48 83 7c 24 48
	00		 cmp	 QWORD PTR i$[rsp], 0
  000a8	75 25		 jne	 SHORT $LN27@complex_ne
  000aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  000b1	48 39 84 24 d0
	00 00 00	 cmp	 QWORD PTR type$[rsp], rax
  000b9	75 14		 jne	 SHORT $LN27@complex_ne

; 919  :         /* Note that we can't know whether it's safe to return
; 920  :            a complex *subclass* instance as-is, hence the restriction
; 921  :            to exact complexes here.  If either the input or the
; 922  :            output is a complex subclass, it will be handled below
; 923  :            as a non-orthogonal vector.  */
; 924  :         Py_INCREF(r);

  000bb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  000c0	e8 00 00 00 00	 call	 _Py_IncRef

; 925  :         return r;

  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR r$[rsp]
  000ca	e9 8a 03 00 00	 jmp	 $LN29@complex_ne
$LN27@complex_ne:

; 926  :     }
; 927  :     if (PyUnicode_Check(r)) {

  000cf	48 8b 44 24 78	 mov	 rax, QWORD PTR r$[rsp]
  000d4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000de	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000e3	85 c0		 test	 eax, eax
  000e5	74 39		 je	 SHORT $LN26@complex_ne

; 928  :         if (i != NULL) {

  000e7	48 83 7c 24 48
	00		 cmp	 QWORD PTR i$[rsp], 0
  000ed	74 1a		 je	 SHORT $LN25@complex_ne

; 929  :             PyErr_SetString(PyExc_TypeError,
; 930  :                             "complex() can't take second arg"
; 931  :                             " if first is a string");

  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@DPNOAEGF@complex?$CI?$CJ?5can?8t?5take?5second?5arg?5@
  000f6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000fd	e8 00 00 00 00	 call	 PyErr_SetString

; 932  :             return NULL;

  00102	33 c0		 xor	 eax, eax
  00104	e9 50 03 00 00	 jmp	 $LN29@complex_ne
$LN25@complex_ne:

; 933  :         }
; 934  :         return complex_subtype_from_string(type, r);

  00109	48 8b 54 24 78	 mov	 rdx, QWORD PTR r$[rsp]
  0010e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00116	e8 00 00 00 00	 call	 complex_subtype_from_string
  0011b	e9 39 03 00 00	 jmp	 $LN29@complex_ne
$LN26@complex_ne:

; 935  :     }
; 936  :     if (i != NULL && PyUnicode_Check(i)) {

  00120	48 83 7c 24 48
	00		 cmp	 QWORD PTR i$[rsp], 0
  00126	74 32		 je	 SHORT $LN24@complex_ne
  00128	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  0012d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00131	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00137	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0013c	85 c0		 test	 eax, eax
  0013e	74 1a		 je	 SHORT $LN24@complex_ne

; 937  :         PyErr_SetString(PyExc_TypeError,
; 938  :                         "complex() second arg can't be a string");

  00140	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@KIMMAJKJ@complex?$CI?$CJ?5second?5arg?5can?8t?5be?5a?5@
  00147	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0014e	e8 00 00 00 00	 call	 PyErr_SetString

; 939  :         return NULL;

  00153	33 c0		 xor	 eax, eax
  00155	e9 ff 02 00 00	 jmp	 $LN29@complex_ne
$LN24@complex_ne:

; 940  :     }
; 941  : 
; 942  :     tmp = try_complex_special_method(r);

  0015a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  0015f	e8 00 00 00 00	 call	 try_complex_special_method
  00164	48 89 44 24 68	 mov	 QWORD PTR tmp$[rsp], rax

; 943  :     if (tmp) {

  00169	48 83 7c 24 68
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0016f	74 14		 je	 SHORT $LN23@complex_ne

; 944  :         r = tmp;

  00171	48 8b 44 24 68	 mov	 rax, QWORD PTR tmp$[rsp]
  00176	48 89 44 24 78	 mov	 QWORD PTR r$[rsp], rax

; 945  :         own_r = 1;

  0017b	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR own_r$[rsp], 1
  00183	eb 11		 jmp	 SHORT $LN22@complex_ne
$LN23@complex_ne:

; 946  :     }
; 947  :     else if (PyErr_Occurred()) {

  00185	e8 00 00 00 00	 call	 PyErr_Occurred
  0018a	48 85 c0	 test	 rax, rax
  0018d	74 07		 je	 SHORT $LN21@complex_ne

; 948  :         return NULL;

  0018f	33 c0		 xor	 eax, eax
  00191	e9 c3 02 00 00	 jmp	 $LN29@complex_ne
$LN21@complex_ne:
$LN22@complex_ne:

; 949  :     }
; 950  : 
; 951  :     nbr = r->ob_type->tp_as_number;

  00196	48 8b 44 24 78	 mov	 rax, QWORD PTR r$[rsp]
  0019b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0019f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  001a6	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR nbr$[rsp], rax

; 952  :     if (i != NULL)

  001ae	48 83 7c 24 48
	00		 cmp	 QWORD PTR i$[rsp], 0
  001b4	74 15		 je	 SHORT $LN20@complex_ne

; 953  :         nbi = i->ob_type->tp_as_number;

  001b6	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  001bb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001bf	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  001c6	48 89 44 24 30	 mov	 QWORD PTR nbi$[rsp], rax
$LN20@complex_ne:

; 954  :     if (nbr == NULL || nbr->nb_float == NULL ||
; 955  :         ((i != NULL) && (nbi == NULL || nbi->nb_float == NULL))) {

  001cb	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR nbr$[rsp], 0
  001d4	74 31		 je	 SHORT $LN18@complex_ne
  001d6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR nbr$[rsp]
  001de	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  001e6	74 1f		 je	 SHORT $LN18@complex_ne
  001e8	48 83 7c 24 48
	00		 cmp	 QWORD PTR i$[rsp], 0
  001ee	74 42		 je	 SHORT $LN19@complex_ne
  001f0	48 83 7c 24 30
	00		 cmp	 QWORD PTR nbi$[rsp], 0
  001f6	74 0f		 je	 SHORT $LN17@complex_ne
  001f8	48 8b 44 24 30	 mov	 rax, QWORD PTR nbi$[rsp]
  001fd	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00205	75 2b		 jne	 SHORT $LN19@complex_ne
$LN17@complex_ne:
$LN18@complex_ne:

; 956  :         PyErr_SetString(PyExc_TypeError,
; 957  :                    "complex() argument must be a string or a number");

  00207	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@LGCEOOP@complex?$CI?$CJ?5argument?5must?5be?5a?5str@
  0020e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00215	e8 00 00 00 00	 call	 PyErr_SetString

; 958  :         if (own_r) {

  0021a	83 7c 24 50 00	 cmp	 DWORD PTR own_r$[rsp], 0
  0021f	74 0a		 je	 SHORT $LN16@complex_ne

; 959  :             Py_DECREF(r);

  00221	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  00226	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@complex_ne:

; 960  :         }
; 961  :         return NULL;

  0022b	33 c0		 xor	 eax, eax
  0022d	e9 27 02 00 00	 jmp	 $LN29@complex_ne
$LN19@complex_ne:

; 962  :     }
; 963  : 
; 964  :     /* If we get this far, then the "real" and "imag" parts should
; 965  :        both be treated as numbers, and the constructor should return a
; 966  :        complex number equal to (real + imag*1j).
; 967  : 
; 968  :        Note that we do NOT assume the input to already be in canonical
; 969  :        form; the "real" and "imag" parts might themselves be complex
; 970  :        numbers, which slightly complicates the code below. */
; 971  :     if (PyComplex_Check(r)) {

  00232	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  00239	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  0023e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00242	74 19		 je	 SHORT $LN14@complex_ne
  00244	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  0024b	48 8b 44 24 78	 mov	 rax, QWORD PTR r$[rsp]
  00250	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00254	e8 00 00 00 00	 call	 PyType_IsSubtype
  00259	85 c0		 test	 eax, eax
  0025b	74 53		 je	 SHORT $LN15@complex_ne
$LN14@complex_ne:

; 972  :         /* Note that if r is of a complex subtype, we're only
; 973  :            retaining its real & imag parts here, and the return
; 974  :            value is (properly) of the builtin complex type. */
; 975  :         cr = ((PyComplexObject*)r)->cval;

  0025d	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR $T21708[rsp]
  00265	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  0026a	48 8b f8	 mov	 rdi, rax
  0026d	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  00271	b9 10 00 00 00	 mov	 ecx, 16
  00276	f3 a4		 rep movsb
  00278	48 8d 44 24 38	 lea	 rax, QWORD PTR cr$[rsp]
  0027d	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR $T21708[rsp]
  00285	48 8b f8	 mov	 rdi, rax
  00288	48 8b f1	 mov	 rsi, rcx
  0028b	b9 10 00 00 00	 mov	 ecx, 16
  00290	f3 a4		 rep movsb

; 976  :         cr_is_complex = 1;

  00292	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR cr_is_complex$[rsp], 1

; 977  :         if (own_r) {

  0029a	83 7c 24 50 00	 cmp	 DWORD PTR own_r$[rsp], 0
  0029f	74 0a		 je	 SHORT $LN13@complex_ne

; 978  :             Py_DECREF(r);

  002a1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  002a6	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@complex_ne:

; 979  :         }
; 980  :     }
; 981  :     else {

  002ab	e9 a2 00 00 00	 jmp	 $LN12@complex_ne
$LN15@complex_ne:

; 982  :         /* The "real" part really is entirely real, and contributes
; 983  :            nothing in the imaginary direction.
; 984  :            Just treat it as a double. */
; 985  :         tmp = PyNumber_Float(r);

  002b0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  002b5	e8 00 00 00 00	 call	 PyNumber_Float
  002ba	48 89 44 24 68	 mov	 QWORD PTR tmp$[rsp], rax

; 986  :         if (own_r) {

  002bf	83 7c 24 50 00	 cmp	 DWORD PTR own_r$[rsp], 0
  002c4	74 0a		 je	 SHORT $LN11@complex_ne

; 987  :             /* r was a newly created complex number, rather
; 988  :                than the original "real" argument. */
; 989  :             Py_DECREF(r);

  002c6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  002cb	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@complex_ne:

; 990  :         }
; 991  :         if (tmp == NULL)

  002d0	48 83 7c 24 68
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  002d6	75 07		 jne	 SHORT $LN10@complex_ne

; 992  :             return NULL;

  002d8	33 c0		 xor	 eax, eax
  002da	e9 7a 01 00 00	 jmp	 $LN29@complex_ne
$LN10@complex_ne:

; 993  :         if (!PyFloat_Check(tmp)) {

  002df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  002e6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tmp$[rsp]
  002eb	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  002ef	74 3d		 je	 SHORT $LN9@complex_ne
  002f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFloat_Type
  002f8	48 8b 44 24 68	 mov	 rax, QWORD PTR tmp$[rsp]
  002fd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00301	e8 00 00 00 00	 call	 PyType_IsSubtype
  00306	85 c0		 test	 eax, eax
  00308	75 24		 jne	 SHORT $LN9@complex_ne

; 994  :             PyErr_SetString(PyExc_TypeError,
; 995  :                             "float(r) didn't return a float");

  0030a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@OHCJGELG@float?$CIr?$CJ?5didn?8t?5return?5a?5float?$AA@
  00311	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00318	e8 00 00 00 00	 call	 PyErr_SetString

; 996  :             Py_DECREF(tmp);

  0031d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tmp$[rsp]
  00322	e8 00 00 00 00	 call	 _Py_DecRef

; 997  :             return NULL;

  00327	33 c0		 xor	 eax, eax
  00329	e9 2b 01 00 00	 jmp	 $LN29@complex_ne
$LN9@complex_ne:

; 998  :         }
; 999  :         cr.real = PyFloat_AsDouble(tmp);

  0032e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tmp$[rsp]
  00333	e8 00 00 00 00	 call	 PyFloat_AsDouble
  00338	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR cr$[rsp], xmm0

; 1000 :         cr.imag = 0.0; /* Shut up compiler warning */

  0033e	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00342	f2 0f 11 44 24
	40		 movsdx	 QWORD PTR cr$[rsp+8], xmm0

; 1001 :         Py_DECREF(tmp);

  00348	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tmp$[rsp]
  0034d	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@complex_ne:

; 1002 :     }
; 1003 :     if (i == NULL) {

  00352	48 83 7c 24 48
	00		 cmp	 QWORD PTR i$[rsp], 0
  00358	75 0f		 jne	 SHORT $LN8@complex_ne

; 1004 :         ci.real = 0.0;

  0035a	66 0f 57 c0	 xorpd	 xmm0, xmm0
  0035e	f2 0f 11 44 24
	58		 movsdx	 QWORD PTR ci$[rsp], xmm0
  00364	e9 a5 00 00 00	 jmp	 $LN7@complex_ne
$LN8@complex_ne:

; 1005 :     }
; 1006 :     else if (PyComplex_Check(i)) {

  00369	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  00370	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00375	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00379	74 19		 je	 SHORT $LN5@complex_ne
  0037b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyComplex_Type
  00382	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00387	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0038b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00390	85 c0		 test	 eax, eax
  00392	74 3f		 je	 SHORT $LN6@complex_ne
$LN5@complex_ne:

; 1007 :         ci = ((PyComplexObject*)i)->cval;

  00394	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR $T21707[rsp]
  0039c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  003a1	48 8b f8	 mov	 rdi, rax
  003a4	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  003a8	b9 10 00 00 00	 mov	 ecx, 16
  003ad	f3 a4		 rep movsb
  003af	48 8d 44 24 58	 lea	 rax, QWORD PTR ci$[rsp]
  003b4	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR $T21707[rsp]
  003bc	48 8b f8	 mov	 rdi, rax
  003bf	48 8b f1	 mov	 rsi, rcx
  003c2	b9 10 00 00 00	 mov	 ecx, 16
  003c7	f3 a4		 rep movsb

; 1008 :         ci_is_complex = 1;

  003c9	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR ci_is_complex$[rsp], 1

; 1009 :     } else {

  003d1	eb 3b		 jmp	 SHORT $LN4@complex_ne
$LN6@complex_ne:

; 1010 :         /* The "imag" part really is entirely imaginary, and
; 1011 :            contributes nothing in the real direction.
; 1012 :            Just treat it as a double. */
; 1013 :         tmp = (*nbi->nb_float)(i);

  003d3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  003d8	48 8b 44 24 30	 mov	 rax, QWORD PTR nbi$[rsp]
  003dd	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]
  003e3	48 89 44 24 68	 mov	 QWORD PTR tmp$[rsp], rax

; 1014 :         if (tmp == NULL)

  003e8	48 83 7c 24 68
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  003ee	75 04		 jne	 SHORT $LN3@complex_ne

; 1015 :             return NULL;

  003f0	33 c0		 xor	 eax, eax
  003f2	eb 65		 jmp	 SHORT $LN29@complex_ne
$LN3@complex_ne:

; 1016 :         ci.real = PyFloat_AsDouble(tmp);

  003f4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tmp$[rsp]
  003f9	e8 00 00 00 00	 call	 PyFloat_AsDouble
  003fe	f2 0f 11 44 24
	58		 movsdx	 QWORD PTR ci$[rsp], xmm0

; 1017 :         Py_DECREF(tmp);

  00404	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tmp$[rsp]
  00409	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@complex_ne:
$LN7@complex_ne:

; 1018 :     }
; 1019 :     /*  If the input was in canonical form, then the "real" and "imag"
; 1020 :         parts are real numbers, so that ci.imag and cr.imag are zero.
; 1021 :         We need this correction in case they were not real numbers. */
; 1022 : 
; 1023 :     if (ci_is_complex) {

  0040e	83 7c 24 74 00	 cmp	 DWORD PTR ci_is_complex$[rsp], 0
  00413	74 12		 je	 SHORT $LN2@complex_ne

; 1024 :         cr.real -= ci.imag;

  00415	f2 0f 10 44 24
	38		 movsdx	 xmm0, QWORD PTR cr$[rsp]
  0041b	f2 0f 5c 44 24
	60		 subsd	 xmm0, QWORD PTR ci$[rsp+8]
  00421	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR cr$[rsp], xmm0
$LN2@complex_ne:

; 1025 :     }
; 1026 :     if (cr_is_complex) {

  00427	83 7c 24 70 00	 cmp	 DWORD PTR cr_is_complex$[rsp], 0
  0042c	74 12		 je	 SHORT $LN1@complex_ne

; 1027 :         ci.real += cr.imag;

  0042e	f2 0f 10 44 24
	58		 movsdx	 xmm0, QWORD PTR ci$[rsp]
  00434	f2 0f 58 44 24
	40		 addsd	 xmm0, QWORD PTR cr$[rsp+8]
  0043a	f2 0f 11 44 24
	58		 movsdx	 QWORD PTR ci$[rsp], xmm0
$LN1@complex_ne:

; 1028 :     }
; 1029 :     return complex_subtype_from_doubles(type, cr.real, ci.real);

  00440	f2 0f 10 54 24
	58		 movsdx	 xmm2, QWORD PTR ci$[rsp]
  00446	f2 0f 10 4c 24
	38		 movsdx	 xmm1, QWORD PTR cr$[rsp]
  0044c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00454	e8 00 00 00 00	 call	 complex_subtype_from_doubles
$LN29@complex_ne:

; 1030 : }

  00459	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00460	5f		 pop	 rdi
  00461	5e		 pop	 rsi
  00462	c3		 ret	 0
complex_new ENDP
_TEXT	ENDS
PUBLIC	$T21715
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_subtype_from_doubles DD imagerel complex_subtype_from_doubles
	DD	imagerel complex_subtype_from_doubles+92
	DD	imagerel $unwind$complex_subtype_from_doubles
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_subtype_from_doubles DD 031701H
	DD	070138217H
	DD	06012H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT complex_subtype_from_doubles
_TEXT	SEGMENT
c$ = 32
$T21715 = 48
type$ = 96
real$ = 104
imag$ = 112
complex_subtype_from_doubles PROC			; COMDAT

; 227  : {

  00000	f2 0f 11 54 24
	18		 movsdx	 QWORD PTR [rsp+24], xmm2
  00006	f2 0f 11 4c 24
	10		 movsdx	 QWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	56		 push	 rsi
  00012	57		 push	 rdi
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 228  :     Py_complex c;
; 229  :     c.real = real;

  00017	f2 0f 10 44 24
	68		 movsdx	 xmm0, QWORD PTR real$[rsp]
  0001d	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR c$[rsp], xmm0

; 230  :     c.imag = imag;

  00023	f2 0f 10 44 24
	70		 movsdx	 xmm0, QWORD PTR imag$[rsp]
  00029	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR c$[rsp+8], xmm0

; 231  :     return complex_subtype_from_c_complex(type, c);

  0002f	48 8d 44 24 30	 lea	 rax, QWORD PTR $T21715[rsp]
  00034	48 8d 4c 24 20	 lea	 rcx, QWORD PTR c$[rsp]
  00039	48 8b f8	 mov	 rdi, rax
  0003c	48 8b f1	 mov	 rsi, rcx
  0003f	b9 10 00 00 00	 mov	 ecx, 16
  00044	f3 a4		 rep movsb
  00046	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T21715[rsp]
  0004b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  00050	e8 00 00 00 00	 call	 complex_subtype_from_c_complex

; 232  : }

  00055	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00059	5f		 pop	 rdi
  0005a	5e		 pop	 rsi
  0005b	c3		 ret	 0
complex_subtype_from_doubles ENDP
_TEXT	ENDS
PUBLIC	$T21722
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_subtype_from_c_complex DD imagerel complex_subtype_from_c_complex
	DD	imagerel complex_subtype_from_c_complex+103
	DD	imagerel $unwind$complex_subtype_from_c_complex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_subtype_from_c_complex DD 031001H
	DD	0700c8210H
	DD	0600bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT complex_subtype_from_c_complex
_TEXT	SEGMENT
op$ = 32
$T21722 = 40
type$ = 96
cval$ = 104
complex_subtype_from_c_complex PROC			; COMDAT

; 202  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 203  :     PyObject *op;
; 204  : 
; 205  :     op = type->tp_alloc(type, 0);

  00010	33 d2		 xor	 edx, edx
  00012	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0001c	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00022	48 89 44 24 20	 mov	 QWORD PTR op$[rsp], rax

; 206  :     if (op != NULL)

  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR op$[rsp], 0
  0002d	74 2c		 je	 SHORT $LN1@complex_su@2

; 207  :         ((PyComplexObject *)op)->cval = cval;

  0002f	48 8d 44 24 28	 lea	 rax, QWORD PTR $T21722[rsp]
  00034	48 8b f8	 mov	 rdi, rax
  00037	48 8b 74 24 68	 mov	 rsi, QWORD PTR cval$[rsp]
  0003c	b9 10 00 00 00	 mov	 ecx, 16
  00041	f3 a4		 rep movsb
  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR op$[rsp]
  00048	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T21722[rsp]
  0004d	48 8d 78 60	 lea	 rdi, QWORD PTR [rax+96]
  00051	48 8b f1	 mov	 rsi, rcx
  00054	b9 10 00 00 00	 mov	 ecx, 16
  00059	f3 a4		 rep movsb
$LN1@complex_su@2:

; 208  :     return op;

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR op$[rsp]

; 209  : }

  00060	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00064	5f		 pop	 rdi
  00065	5e		 pop	 rsi
  00066	c3		 ret	 0
complex_subtype_from_c_complex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@CCMGNPBA@complex?$CI?$CJ?5arg?5is?5a?5malformed?5str@ ; `string'
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyOS_string_to_double:PROC
EXTRN	_Py_ctype_table:BYTE
EXTRN	PyObject_AsCharBuffer:PROC
EXTRN	PyUnicode_AsUTF8AndSize:PROC
EXTRN	_PyUnicode_TransformDecimalAndSpaceToASCII:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$complex_subtype_from_string DD imagerel complex_subtype_from_string
	DD	imagerel complex_subtype_from_string+1195
	DD	imagerel $unwind$complex_subtype_from_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$complex_subtype_from_string DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0CE@CCMGNPBA@complex?$CI?$CJ?5arg?5is?5a?5malformed?5str@
CONST	SEGMENT
??_C@_0CE@CCMGNPBA@complex?$CI?$CJ?5arg?5is?5a?5malformed?5str@ DB 'compl'
	DB	'ex() arg is a malformed string', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT complex_subtype_from_string
_TEXT	SEGMENT
y$ = 32
x$ = 40
s$ = 48
got_bracket$ = 56
len$ = 64
end$ = 72
start$ = 80
z$ = 88
s_buffer$ = 96
tv163 = 104
tv181 = 112
type$ = 144
v$ = 152
complex_subtype_from_string PROC			; COMDAT

; 759  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 760  :     const char *s, *start;
; 761  :     char *end;
; 762  :     double x=0.0, y=0.0, z;

  00011	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00015	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR x$[rsp], xmm0
  0001b	66 0f 57 c0	 xorpd	 xmm0, xmm0
  0001f	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR y$[rsp], xmm0

; 763  :     int got_bracket=0;

  00025	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR got_bracket$[rsp], 0

; 764  :     PyObject *s_buffer = NULL;

  0002d	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR s_buffer$[rsp], 0

; 765  :     Py_ssize_t len;
; 766  : 
; 767  :     if (PyUnicode_Check(v)) {

  00036	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0003e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00042	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00048	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0004d	85 c0		 test	 eax, eax
  0004f	74 44		 je	 SHORT $LN46@complex_su@3

; 768  :         s_buffer = _PyUnicode_TransformDecimalAndSpaceToASCII(v);

  00051	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00059	e8 00 00 00 00	 call	 _PyUnicode_TransformDecimalAndSpaceToASCII
  0005e	48 89 44 24 60	 mov	 QWORD PTR s_buffer$[rsp], rax

; 769  :         if (s_buffer == NULL)

  00063	48 83 7c 24 60
	00		 cmp	 QWORD PTR s_buffer$[rsp], 0
  00069	75 07		 jne	 SHORT $LN45@complex_su@3

; 770  :             return NULL;

  0006b	33 c0		 xor	 eax, eax
  0006d	e9 31 04 00 00	 jmp	 $LN47@complex_su@3
$LN45@complex_su@3:

; 771  :         s = PyUnicode_AsUTF8AndSize(s_buffer, &len);

  00072	48 8d 54 24 40	 lea	 rdx, QWORD PTR len$[rsp]
  00077	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s_buffer$[rsp]
  0007c	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize
  00081	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 772  :         if (s == NULL)

  00086	48 83 7c 24 30
	00		 cmp	 QWORD PTR s$[rsp], 0
  0008c	75 05		 jne	 SHORT $LN44@complex_su@3

; 773  :             goto error;

  0008e	e9 f6 03 00 00	 jmp	 $error$20919
$LN44@complex_su@3:

; 774  :     }
; 775  :     else if (PyObject_AsCharBuffer(v, &s, &len)) {

  00093	eb 35		 jmp	 SHORT $LN43@complex_su@3
$LN46@complex_su@3:
  00095	4c 8d 44 24 40	 lea	 r8, QWORD PTR len$[rsp]
  0009a	48 8d 54 24 30	 lea	 rdx, QWORD PTR s$[rsp]
  0009f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  000a7	e8 00 00 00 00	 call	 PyObject_AsCharBuffer
  000ac	85 c0		 test	 eax, eax
  000ae	74 1a		 je	 SHORT $LN42@complex_su@3

; 776  :         PyErr_SetString(PyExc_TypeError,
; 777  :                         "complex() argument must be a string or a number");

  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@LGCEOOP@complex?$CI?$CJ?5argument?5must?5be?5a?5str@
  000b7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000be	e8 00 00 00 00	 call	 PyErr_SetString

; 778  :         return NULL;

  000c3	33 c0		 xor	 eax, eax
  000c5	e9 d9 03 00 00	 jmp	 $LN47@complex_su@3
$LN42@complex_su@3:
$LN43@complex_su@3:

; 779  :     }
; 780  : 
; 781  :     /* position on first nonblank */
; 782  :     start = s;

  000ca	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000cf	48 89 44 24 50	 mov	 QWORD PTR start$[rsp], rax
$LN41@complex_su@3:

; 783  :     while (Py_ISSPACE(*s))

  000d4	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000d9	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000dc	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000e1	0f b6 c0	 movzx	 eax, al
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_table
  000eb	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  000ee	83 e0 08	 and	 eax, 8
  000f1	85 c0		 test	 eax, eax
  000f3	74 0f		 je	 SHORT $LN40@complex_su@3

; 784  :         s++;

  000f5	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000fa	48 ff c0	 inc	 rax
  000fd	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax
  00102	eb d0		 jmp	 SHORT $LN41@complex_su@3
$LN40@complex_su@3:

; 785  :     if (*s == '(') {

  00104	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00109	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0010c	83 f8 28	 cmp	 eax, 40			; 00000028H
  0010f	75 45		 jne	 SHORT $LN39@complex_su@3

; 786  :         /* Skip over possible bracket from repr(). */
; 787  :         got_bracket = 1;

  00111	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR got_bracket$[rsp], 1

; 788  :         s++;

  00119	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0011e	48 ff c0	 inc	 rax
  00121	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax
$LN38@complex_su@3:

; 789  :         while (Py_ISSPACE(*s))

  00126	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0012b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0012e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00133	0f b6 c0	 movzx	 eax, al
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_table
  0013d	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00140	83 e0 08	 and	 eax, 8
  00143	85 c0		 test	 eax, eax
  00145	74 0f		 je	 SHORT $LN37@complex_su@3

; 790  :             s++;

  00147	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0014c	48 ff c0	 inc	 rax
  0014f	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax
  00154	eb d0		 jmp	 SHORT $LN38@complex_su@3
$LN37@complex_su@3:
$LN39@complex_su@3:

; 791  :     }
; 792  : 
; 793  :     /* a valid complex string usually takes one of the three forms:
; 794  : 
; 795  :          <float>                  - real part only
; 796  :          <float>j                 - imaginary part only
; 797  :          <float><signed-float>j   - real and imaginary parts
; 798  : 
; 799  :        where <float> represents any numeric string that's accepted by the
; 800  :        float constructor (including 'nan', 'inf', 'infinity', etc.), and
; 801  :        <signed-float> is any string of the form <float> whose first
; 802  :        character is '+' or '-'.
; 803  : 
; 804  :        For backwards compatibility, the extra forms
; 805  : 
; 806  :          <float><sign>j
; 807  :          <sign>j
; 808  :          j
; 809  : 
; 810  :        are also accepted, though support for these forms may be removed from
; 811  :        a future version of Python.
; 812  :     */
; 813  : 
; 814  :     /* first look for forms starting with <float> */
; 815  :     z = PyOS_string_to_double(s, &end, NULL);

  00156	45 33 c0	 xor	 r8d, r8d
  00159	48 8d 54 24 48	 lea	 rdx, QWORD PTR end$[rsp]
  0015e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00163	e8 00 00 00 00	 call	 PyOS_string_to_double
  00168	f2 0f 11 44 24
	58		 movsdx	 QWORD PTR z$[rsp], xmm0

; 816  :     if (z == -1.0 && PyErr_Occurred()) {

  0016e	f2 0f 10 44 24
	58		 movsdx	 xmm0, QWORD PTR z$[rsp]
  00174	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  0017c	7a 28		 jp	 SHORT $LN36@complex_su@3
  0017e	75 26		 jne	 SHORT $LN36@complex_su@3
  00180	e8 00 00 00 00	 call	 PyErr_Occurred
  00185	48 85 c0	 test	 rax, rax
  00188	74 1c		 je	 SHORT $LN36@complex_su@3

; 817  :         if (PyErr_ExceptionMatches(PyExc_ValueError))

  0018a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00191	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00196	85 c0		 test	 eax, eax
  00198	74 07		 je	 SHORT $LN35@complex_su@3

; 818  :             PyErr_Clear();

  0019a	e8 00 00 00 00	 call	 PyErr_Clear

; 819  :         else

  0019f	eb 05		 jmp	 SHORT $LN34@complex_su@3
$LN35@complex_su@3:

; 820  :             goto error;

  001a1	e9 e3 02 00 00	 jmp	 $error$20919
$LN34@complex_su@3:
$LN36@complex_su@3:

; 821  :     }
; 822  :     if (end != s) {

  001a6	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001ab	48 39 44 24 48	 cmp	 QWORD PTR end$[rsp], rax
  001b0	0f 84 54 01 00
	00		 je	 $LN33@complex_su@3

; 823  :         /* all 4 forms starting with <float> land here */
; 824  :         s = end;

  001b6	48 8b 44 24 48	 mov	 rax, QWORD PTR end$[rsp]
  001bb	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 825  :         if (*s == '+' || *s == '-') {

  001c0	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001c5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001c8	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  001cb	74 11		 je	 SHORT $LN31@complex_su@3
  001cd	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001d2	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001d5	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  001d8	0f 85 e6 00 00
	00		 jne	 $LN32@complex_su@3
$LN31@complex_su@3:

; 826  :             /* <float><signed-float>j | <float><sign>j */
; 827  :             x = z;

  001de	f2 0f 10 44 24
	58		 movsdx	 xmm0, QWORD PTR z$[rsp]
  001e4	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR x$[rsp], xmm0

; 828  :             y = PyOS_string_to_double(s, &end, NULL);

  001ea	45 33 c0	 xor	 r8d, r8d
  001ed	48 8d 54 24 48	 lea	 rdx, QWORD PTR end$[rsp]
  001f2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  001f7	e8 00 00 00 00	 call	 PyOS_string_to_double
  001fc	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR y$[rsp], xmm0

; 829  :             if (y == -1.0 && PyErr_Occurred()) {

  00202	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR y$[rsp]
  00208	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  00210	7a 28		 jp	 SHORT $LN30@complex_su@3
  00212	75 26		 jne	 SHORT $LN30@complex_su@3
  00214	e8 00 00 00 00	 call	 PyErr_Occurred
  00219	48 85 c0	 test	 rax, rax
  0021c	74 1c		 je	 SHORT $LN30@complex_su@3

; 830  :                 if (PyErr_ExceptionMatches(PyExc_ValueError))

  0021e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00225	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0022a	85 c0		 test	 eax, eax
  0022c	74 07		 je	 SHORT $LN29@complex_su@3

; 831  :                     PyErr_Clear();

  0022e	e8 00 00 00 00	 call	 PyErr_Clear

; 832  :                 else

  00233	eb 05		 jmp	 SHORT $LN28@complex_su@3
$LN29@complex_su@3:

; 833  :                     goto error;

  00235	e9 4f 02 00 00	 jmp	 $error$20919
$LN28@complex_su@3:
$LN30@complex_su@3:

; 834  :             }
; 835  :             if (end != s)

  0023a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0023f	48 39 44 24 48	 cmp	 QWORD PTR end$[rsp], rax
  00244	74 0c		 je	 SHORT $LN27@complex_su@3

; 836  :                 /* <float><signed-float>j */
; 837  :                 s = end;

  00246	48 8b 44 24 48	 mov	 rax, QWORD PTR end$[rsp]
  0024b	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 838  :             else {

  00250	eb 44		 jmp	 SHORT $LN26@complex_su@3
$LN27@complex_su@3:

; 839  :                 /* <float><sign>j */
; 840  :                 y = *s == '+' ? 1.0 : -1.0;

  00252	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00257	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0025a	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  0025d	75 10		 jne	 SHORT $LN49@complex_su@3
  0025f	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00267	f2 0f 11 44 24
	68		 movsdx	 QWORD PTR tv163[rsp], xmm0
  0026d	eb 0e		 jmp	 SHORT $LN50@complex_su@3
$LN49@complex_su@3:
  0026f	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@bff0000000000000
  00277	f2 0f 11 44 24
	68		 movsdx	 QWORD PTR tv163[rsp], xmm0
$LN50@complex_su@3:
  0027d	f2 0f 10 44 24
	68		 movsdx	 xmm0, QWORD PTR tv163[rsp]
  00283	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR y$[rsp], xmm0

; 841  :                 s++;

  00289	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0028e	48 ff c0	 inc	 rax
  00291	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax
$LN26@complex_su@3:

; 842  :             }
; 843  :             if (!(*s == 'j' || *s == 'J'))

  00296	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0029b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0029e	83 f8 6a	 cmp	 eax, 106		; 0000006aH
  002a1	74 12		 je	 SHORT $LN25@complex_su@3
  002a3	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002a8	0f be 00	 movsx	 eax, BYTE PTR [rax]
  002ab	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  002ae	74 05		 je	 SHORT $LN25@complex_su@3

; 844  :                 goto parse_error;

  002b0	e9 c1 01 00 00	 jmp	 $parse_error$20947
$LN25@complex_su@3:

; 845  :             s++;

  002b5	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002ba	48 ff c0	 inc	 rax
  002bd	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax
  002c2	eb 41		 jmp	 SHORT $LN24@complex_su@3
$LN32@complex_su@3:

; 846  :         }
; 847  :         else if (*s == 'j' || *s == 'J') {

  002c4	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002c9	0f be 00	 movsx	 eax, BYTE PTR [rax]
  002cc	83 f8 6a	 cmp	 eax, 106		; 0000006aH
  002cf	74 0d		 je	 SHORT $LN22@complex_su@3
  002d1	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002d6	0f be 00	 movsx	 eax, BYTE PTR [rax]
  002d9	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  002dc	75 1b		 jne	 SHORT $LN23@complex_su@3
$LN22@complex_su@3:

; 848  :             /* <float>j */
; 849  :             s++;

  002de	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002e3	48 ff c0	 inc	 rax
  002e6	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 850  :             y = z;

  002eb	f2 0f 10 44 24
	58		 movsdx	 xmm0, QWORD PTR z$[rsp]
  002f1	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR y$[rsp], xmm0

; 851  :         }
; 852  :         else

  002f7	eb 0c		 jmp	 SHORT $LN21@complex_su@3
$LN23@complex_su@3:

; 853  :             /* <float> */
; 854  :             x = z;

  002f9	f2 0f 10 44 24
	58		 movsdx	 xmm0, QWORD PTR z$[rsp]
  002ff	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR x$[rsp], xmm0
$LN21@complex_su@3:
$LN24@complex_su@3:

; 855  :     }
; 856  :     else {

  00305	e9 9a 00 00 00	 jmp	 $LN20@complex_su@3
$LN33@complex_su@3:

; 857  :         /* not starting with <float>; must be <sign>j or j */
; 858  :         if (*s == '+' || *s == '-') {

  0030a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0030f	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00312	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00315	74 0d		 je	 SHORT $LN18@complex_su@3
  00317	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0031c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0031f	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00322	75 46		 jne	 SHORT $LN19@complex_su@3
$LN18@complex_su@3:

; 859  :             /* <sign>j */
; 860  :             y = *s == '+' ? 1.0 : -1.0;

  00324	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00329	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0032c	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  0032f	75 10		 jne	 SHORT $LN51@complex_su@3
  00331	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00339	f2 0f 11 44 24
	70		 movsdx	 QWORD PTR tv181[rsp], xmm0
  0033f	eb 0e		 jmp	 SHORT $LN52@complex_su@3
$LN51@complex_su@3:
  00341	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@bff0000000000000
  00349	f2 0f 11 44 24
	70		 movsdx	 QWORD PTR tv181[rsp], xmm0
$LN52@complex_su@3:
  0034f	f2 0f 10 44 24
	70		 movsdx	 xmm0, QWORD PTR tv181[rsp]
  00355	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR y$[rsp], xmm0

; 861  :             s++;

  0035b	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00360	48 ff c0	 inc	 rax
  00363	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 862  :         }
; 863  :         else

  00368	eb 0e		 jmp	 SHORT $LN17@complex_su@3
$LN19@complex_su@3:

; 864  :             /* j */
; 865  :             y = 1.0;

  0036a	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00372	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR y$[rsp], xmm0
$LN17@complex_su@3:

; 866  :         if (!(*s == 'j' || *s == 'J'))

  00378	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0037d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00380	83 f8 6a	 cmp	 eax, 106		; 0000006aH
  00383	74 12		 je	 SHORT $LN16@complex_su@3
  00385	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0038a	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0038d	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  00390	74 05		 je	 SHORT $LN16@complex_su@3

; 867  :             goto parse_error;

  00392	e9 df 00 00 00	 jmp	 $parse_error$20947
$LN16@complex_su@3:

; 868  :         s++;

  00397	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0039c	48 ff c0	 inc	 rax
  0039f	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax
$LN20@complex_su@3:
$LN15@complex_su@3:

; 869  :     }
; 870  : 
; 871  :     /* trailing whitespace and closing bracket */
; 872  :     while (Py_ISSPACE(*s))

  003a4	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  003a9	0f be 00	 movsx	 eax, BYTE PTR [rax]
  003ac	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003b1	0f b6 c0	 movzx	 eax, al
  003b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_table
  003bb	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  003be	83 e0 08	 and	 eax, 8
  003c1	85 c0		 test	 eax, eax
  003c3	74 0f		 je	 SHORT $LN14@complex_su@3

; 873  :         s++;

  003c5	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  003ca	48 ff c0	 inc	 rax
  003cd	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax
  003d2	eb d0		 jmp	 SHORT $LN15@complex_su@3
$LN14@complex_su@3:

; 874  :     if (got_bracket) {

  003d4	83 7c 24 38 00	 cmp	 DWORD PTR got_bracket$[rsp], 0
  003d9	74 4f		 je	 SHORT $LN13@complex_su@3

; 875  :         /* if there was an opening parenthesis, then the corresponding
; 876  :            closing parenthesis should be right here */
; 877  :         if (*s != ')')

  003db	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  003e0	0f be 00	 movsx	 eax, BYTE PTR [rax]
  003e3	83 f8 29	 cmp	 eax, 41			; 00000029H
  003e6	74 05		 je	 SHORT $LN12@complex_su@3

; 878  :             goto parse_error;

  003e8	e9 89 00 00 00	 jmp	 $parse_error$20947
$LN12@complex_su@3:

; 879  :         s++;

  003ed	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  003f2	48 ff c0	 inc	 rax
  003f5	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax
$LN11@complex_su@3:

; 880  :         while (Py_ISSPACE(*s))

  003fa	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  003ff	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00402	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00407	0f b6 c0	 movzx	 eax, al
  0040a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_table
  00411	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00414	83 e0 08	 and	 eax, 8
  00417	85 c0		 test	 eax, eax
  00419	74 0f		 je	 SHORT $LN10@complex_su@3

; 881  :             s++;

  0041b	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00420	48 ff c0	 inc	 rax
  00423	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax
  00428	eb d0		 jmp	 SHORT $LN11@complex_su@3
$LN10@complex_su@3:
$LN13@complex_su@3:

; 882  :     }
; 883  : 
; 884  :     /* we should now be at the end of the string */
; 885  :     if (s-start != len)

  0042a	48 8b 44 24 50	 mov	 rax, QWORD PTR start$[rsp]
  0042f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00434	48 2b c8	 sub	 rcx, rax
  00437	48 8b c1	 mov	 rax, rcx
  0043a	48 3b 44 24 40	 cmp	 rax, QWORD PTR len$[rsp]
  0043f	74 02		 je	 SHORT $LN9@complex_su@3

; 886  :         goto parse_error;

  00441	eb 33		 jmp	 SHORT $parse_error$20947
$LN9@complex_su@3:
$LN8@complex_su@3:

; 887  : 
; 888  :     Py_XDECREF(s_buffer);

  00443	48 83 7c 24 60
	00		 cmp	 QWORD PTR s_buffer$[rsp], 0
  00449	74 0a		 je	 SHORT $LN5@complex_su@3
  0044b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s_buffer$[rsp]
  00450	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@complex_su@3:
  00455	33 c0		 xor	 eax, eax
  00457	85 c0		 test	 eax, eax
  00459	75 e8		 jne	 SHORT $LN8@complex_su@3

; 889  :     return complex_subtype_from_doubles(type, x, y);

  0045b	f2 0f 10 54 24
	20		 movsdx	 xmm2, QWORD PTR y$[rsp]
  00461	f2 0f 10 4c 24
	28		 movsdx	 xmm1, QWORD PTR x$[rsp]
  00467	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  0046f	e8 00 00 00 00	 call	 complex_subtype_from_doubles
  00474	eb 2d		 jmp	 SHORT $LN47@complex_su@3
$parse_error$20947:

; 890  : 
; 891  :   parse_error:
; 892  :     PyErr_SetString(PyExc_ValueError,
; 893  :                     "complex() arg is a malformed string");

  00476	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@CCMGNPBA@complex?$CI?$CJ?5arg?5is?5a?5malformed?5str@
  0047d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00484	e8 00 00 00 00	 call	 PyErr_SetString
$error$20919:
$LN4@complex_su@3:

; 894  :   error:
; 895  :     Py_XDECREF(s_buffer);

  00489	48 83 7c 24 60
	00		 cmp	 QWORD PTR s_buffer$[rsp], 0
  0048f	74 0a		 je	 SHORT $LN1@complex_su@3
  00491	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s_buffer$[rsp]
  00496	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@complex_su@3:
  0049b	33 c0		 xor	 eax, eax
  0049d	85 c0		 test	 eax, eax
  0049f	75 e8		 jne	 SHORT $LN4@complex_su@3

; 896  :     return NULL;

  004a1	33 c0		 xor	 eax, eax
$LN47@complex_su@3:

; 897  : }

  004a3	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  004aa	c3		 ret	 0
complex_subtype_from_string ENDP
_TEXT	ENDS
END
