; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
ln2	DQ	03fe62e42fefa39efr		; 0.693147
two_pow_m28 DQ	03e30000000000000r		; 3.72529e-009
two_pow_p28 DQ	041b0000000000000r		; 2.68435e+008
zero	DQ	00000000000000000r		; 0
CONST	ENDS
PUBLIC	_Py_log1p
PUBLIC	__real@4000000000000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	_Py_acosh
EXTRN	sqrt:PROC
EXTRN	log:PROC
EXTRN	__imp__finite:PROC
EXTRN	__imp__HUGE:QWORD
EXTRN	__imp__errno:PROC
EXTRN	__imp__isnan:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_math.c
pdata	SEGMENT
$pdata$_Py_acosh DD imagerel $LN14
	DD	imagerel $LN14+437
	DD	imagerel $unwind$_Py_acosh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_acosh DD 010a01H
	DD	0820aH
xdata	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_acosh
_TEXT	SEGMENT
t$20325 = 32
t$20327 = 40
tv87 = 48
x$ = 80
_Py_acosh PROC						; COMDAT

; 43   : {

$LN14:
  00000	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR [rsp+8], xmm0
  00006	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 44   :     if (Py_IS_NAN(x)) {

  0000a	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00010	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00016	85 c0		 test	 eax, eax
  00018	74 11		 je	 SHORT $LN11@Py_acosh

; 45   :         return x+x;

  0001a	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00020	f2 0f 58 44 24
	50		 addsd	 xmm0, QWORD PTR x$[rsp]
  00026	e9 85 01 00 00	 jmp	 $LN12@Py_acosh
$LN11@Py_acosh:

; 46   :     }
; 47   :     if (x < 1.) {                       /* x < 1;  return a signaling NaN */

  0002b	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00033	66 0f 2f 44 24
	50		 comisd	 xmm0, QWORD PTR x$[rsp]
  00039	76 29		 jbe	 SHORT $LN10@Py_acosh

; 48   :         errno = EDOM;

  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00041	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 49   : #ifdef Py_NAN
; 50   :         return Py_NAN;

  00047	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  0004e	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00052	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@0000000000000000
  0005a	e9 51 01 00 00	 jmp	 $LN12@Py_acosh
  0005f	e9 4c 01 00 00	 jmp	 $LN9@Py_acosh
$LN10@Py_acosh:

; 51   : #else
; 52   :         return (x-x)/(x-x);
; 53   : #endif
; 54   :     }
; 55   :     else if (x >= two_pow_p28) {        /* x > 2**28 */

  00064	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  0006a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR two_pow_p28
  00072	72 50		 jb	 SHORT $LN8@Py_acosh

; 56   :         if (Py_IS_INFINITY(x)) {

  00074	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00080	85 c0		 test	 eax, eax
  00082	75 23		 jne	 SHORT $LN7@Py_acosh
  00084	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00090	85 c0		 test	 eax, eax
  00092	75 13		 jne	 SHORT $LN7@Py_acosh

; 57   :             return x+x;

  00094	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  0009a	f2 0f 58 44 24
	50		 addsd	 xmm0, QWORD PTR x$[rsp]
  000a0	e9 0b 01 00 00	 jmp	 $LN12@Py_acosh

; 58   :         }
; 59   :         else {

  000a5	eb 18		 jmp	 SHORT $LN6@Py_acosh
$LN7@Py_acosh:

; 60   :             return log(x)+ln2;          /* acosh(huge)=log(2x) */

  000a7	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  000ad	e8 00 00 00 00	 call	 log
  000b2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ln2
  000ba	e9 f1 00 00 00	 jmp	 $LN12@Py_acosh
$LN6@Py_acosh:

; 61   :         }

  000bf	e9 ec 00 00 00	 jmp	 $LN5@Py_acosh
$LN8@Py_acosh:

; 62   :     }
; 63   :     else if (x == 1.) {

  000c4	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  000ca	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  000d2	7a 10		 jp	 SHORT $LN4@Py_acosh
  000d4	75 0e		 jne	 SHORT $LN4@Py_acosh

; 64   :         return 0.0;                     /* acosh(1) = 0 */

  000d6	66 0f 57 c0	 xorpd	 xmm0, xmm0
  000da	e9 d1 00 00 00	 jmp	 $LN12@Py_acosh
  000df	e9 cc 00 00 00	 jmp	 $LN3@Py_acosh
$LN4@Py_acosh:

; 65   :     }
; 66   :     else if (x > 2.) {                  /* 2 < x < 2**28 */

  000e4	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  000ea	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4000000000000000
  000f2	76 72		 jbe	 SHORT $LN2@Py_acosh

; 67   :         double t = x*x;

  000f4	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  000fa	f2 0f 59 44 24
	50		 mulsd	 xmm0, QWORD PTR x$[rsp]
  00100	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR t$20325[rsp], xmm0

; 68   :         return log(2.0*x - 1.0 / (x + sqrt(t - 1.0)));

  00106	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@4000000000000000
  0010e	f2 0f 59 44 24
	50		 mulsd	 xmm0, QWORD PTR x$[rsp]
  00114	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR tv87[rsp], xmm0
  0011a	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR t$20325[rsp]
  00120	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00128	66 0f 28 c1	 movapd	 xmm0, xmm1
  0012c	e8 00 00 00 00	 call	 sqrt
  00131	f2 0f 10 4c 24
	50		 movsdx	 xmm1, QWORD PTR x$[rsp]
  00137	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0013b	66 0f 28 c1	 movapd	 xmm0, xmm1
  0013f	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ff0000000000000
  00147	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0014b	66 0f 28 c1	 movapd	 xmm0, xmm1
  0014f	f2 0f 10 4c 24
	30		 movsdx	 xmm1, QWORD PTR tv87[rsp]
  00155	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00159	66 0f 28 c1	 movapd	 xmm0, xmm1
  0015d	e8 00 00 00 00	 call	 log
  00162	eb 4c		 jmp	 SHORT $LN12@Py_acosh

; 69   :     }
; 70   :     else {                              /* 1 < x <= 2 */

  00164	eb 4a		 jmp	 SHORT $LN1@Py_acosh
$LN2@Py_acosh:

; 71   :         double t = x - 1.0;

  00166	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  0016c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00174	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR t$20327[rsp], xmm0

; 72   :         return m_log1p(t + sqrt(2.0*t + t*t));

  0017a	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@4000000000000000
  00182	f2 0f 59 44 24
	28		 mulsd	 xmm0, QWORD PTR t$20327[rsp]
  00188	f2 0f 10 4c 24
	28		 movsdx	 xmm1, QWORD PTR t$20327[rsp]
  0018e	f2 0f 59 4c 24
	28		 mulsd	 xmm1, QWORD PTR t$20327[rsp]
  00194	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00198	e8 00 00 00 00	 call	 sqrt
  0019d	f2 0f 10 4c 24
	28		 movsdx	 xmm1, QWORD PTR t$20327[rsp]
  001a3	f2 0f 58 c8	 addsd	 xmm1, xmm0
  001a7	66 0f 28 c1	 movapd	 xmm0, xmm1
  001ab	e8 00 00 00 00	 call	 _Py_log1p
$LN1@Py_acosh:
$LN3@Py_acosh:
$LN5@Py_acosh:
$LN9@Py_acosh:
$LN12@Py_acosh:

; 73   :     }
; 74   : }

  001b0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001b4	c3		 ret	 0
_Py_acosh ENDP
_TEXT	ENDS
PUBLIC	_Py_asinh
EXTRN	__imp__copysign:PROC
EXTRN	fabs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_asinh DD imagerel $LN10
	DD	imagerel $LN10+394
	DD	imagerel $unwind$_Py_asinh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_asinh DD 010a01H
	DD	0820aH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_asinh
_TEXT	SEGMENT
w$ = 32
absx$ = 40
t$20340 = 48
tv83 = 56
x$ = 80
_Py_asinh PROC						; COMDAT

; 90   : {

$LN10:
  00000	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR [rsp+8], xmm0
  00006	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 91   :     double w;
; 92   :     double absx = fabs(x);

  0000a	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00010	e8 00 00 00 00	 call	 fabs
  00015	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR absx$[rsp], xmm0

; 93   : 
; 94   :     if (Py_IS_NAN(x) || Py_IS_INFINITY(x)) {

  0001b	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00027	85 c0		 test	 eax, eax
  00029	75 20		 jne	 SHORT $LN6@Py_asinh
  0002b	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00037	85 c0		 test	 eax, eax
  00039	75 21		 jne	 SHORT $LN7@Py_asinh
  0003b	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00047	85 c0		 test	 eax, eax
  00049	75 11		 jne	 SHORT $LN7@Py_asinh
$LN6@Py_asinh:

; 95   :         return x+x;

  0004b	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00051	f2 0f 58 44 24
	50		 addsd	 xmm0, QWORD PTR x$[rsp]
  00057	e9 29 01 00 00	 jmp	 $LN8@Py_asinh
$LN7@Py_asinh:

; 96   :     }
; 97   :     if (absx < two_pow_m28) {           /* |x| < 2**-28 */

  0005c	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR two_pow_m28
  00064	66 0f 2f 44 24
	28		 comisd	 xmm0, QWORD PTR absx$[rsp]
  0006a	76 0b		 jbe	 SHORT $LN5@Py_asinh

; 98   :         return x;                       /* return x inexact except 0 */

  0006c	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00072	e9 0e 01 00 00	 jmp	 $LN8@Py_asinh
$LN5@Py_asinh:

; 99   :     }
; 100  :     if (absx > two_pow_p28) {           /* |x| > 2**28 */

  00077	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR absx$[rsp]
  0007d	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR two_pow_p28
  00085	76 1e		 jbe	 SHORT $LN4@Py_asinh

; 101  :         w = log(absx)+ln2;

  00087	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR absx$[rsp]
  0008d	e8 00 00 00 00	 call	 log
  00092	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR ln2
  0009a	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR w$[rsp], xmm0
  000a0	e9 ce 00 00 00	 jmp	 $LN3@Py_asinh
$LN4@Py_asinh:

; 102  :     }
; 103  :     else if (absx > 2.0) {              /* 2 < |x| < 2**28 */

  000a5	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR absx$[rsp]
  000ab	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4000000000000000
  000b3	76 62		 jbe	 SHORT $LN2@Py_asinh

; 104  :         w = log(2.0*absx + 1.0 / (sqrt(x*x + 1.0) + absx));

  000b5	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@4000000000000000
  000bd	f2 0f 59 44 24
	28		 mulsd	 xmm0, QWORD PTR absx$[rsp]
  000c3	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR tv83[rsp], xmm0
  000c9	f2 0f 10 4c 24
	50		 movsdx	 xmm1, QWORD PTR x$[rsp]
  000cf	f2 0f 59 4c 24
	50		 mulsd	 xmm1, QWORD PTR x$[rsp]
  000d5	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000dd	66 0f 28 c1	 movapd	 xmm0, xmm1
  000e1	e8 00 00 00 00	 call	 sqrt
  000e6	f2 0f 58 44 24
	28		 addsd	 xmm0, QWORD PTR absx$[rsp]
  000ec	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ff0000000000000
  000f4	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000f8	66 0f 28 c1	 movapd	 xmm0, xmm1
  000fc	f2 0f 10 4c 24
	38		 movsdx	 xmm1, QWORD PTR tv83[rsp]
  00102	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00106	66 0f 28 c1	 movapd	 xmm0, xmm1
  0010a	e8 00 00 00 00	 call	 log
  0010f	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR w$[rsp], xmm0

; 105  :     }
; 106  :     else {                              /* 2**-28 <= |x| < 2= */

  00115	eb 5c		 jmp	 SHORT $LN1@Py_asinh
$LN2@Py_asinh:

; 107  :         double t = x*x;

  00117	f2 0f 10 44 24
	50		 movsdx	 xmm0, QWORD PTR x$[rsp]
  0011d	f2 0f 59 44 24
	50		 mulsd	 xmm0, QWORD PTR x$[rsp]
  00123	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR t$20340[rsp], xmm0

; 108  :         w = m_log1p(absx + t / (1.0 + sqrt(1.0 + t)));

  00129	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00131	f2 0f 58 44 24
	30		 addsd	 xmm0, QWORD PTR t$20340[rsp]
  00137	e8 00 00 00 00	 call	 sqrt
  0013c	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ff0000000000000
  00144	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00148	66 0f 28 c1	 movapd	 xmm0, xmm1
  0014c	f2 0f 10 4c 24
	30		 movsdx	 xmm1, QWORD PTR t$20340[rsp]
  00152	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00156	66 0f 28 c1	 movapd	 xmm0, xmm1
  0015a	f2 0f 10 4c 24
	28		 movsdx	 xmm1, QWORD PTR absx$[rsp]
  00160	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00164	66 0f 28 c1	 movapd	 xmm0, xmm1
  00168	e8 00 00 00 00	 call	 _Py_log1p
  0016d	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR w$[rsp], xmm0
$LN1@Py_asinh:
$LN3@Py_asinh:

; 109  :     }
; 110  :     return copysign(w, x);

  00173	f2 0f 10 4c 24
	50		 movsdx	 xmm1, QWORD PTR x$[rsp]
  00179	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR w$[rsp]
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
$LN8@Py_asinh:

; 111  : 
; 112  : }

  00185	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00189	c3		 ret	 0
_Py_asinh ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	_Py_atanh
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_atanh DD imagerel $LN8
	DD	imagerel $LN8+326
	DD	imagerel $unwind$_Py_atanh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_atanh DD 010a01H
	DD	0620aH
xdata	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_atanh
_TEXT	SEGMENT
t$ = 32
absx$ = 40
x$ = 64
_Py_atanh PROC						; COMDAT

; 133  : {

$LN8:
  00000	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR [rsp+8], xmm0
  00006	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 134  :     double absx;
; 135  :     double t;
; 136  : 
; 137  :     if (Py_IS_NAN(x)) {

  0000a	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00010	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00016	85 c0		 test	 eax, eax
  00018	74 11		 je	 SHORT $LN5@Py_atanh

; 138  :         return x+x;

  0001a	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00020	f2 0f 58 44 24
	40		 addsd	 xmm0, QWORD PTR x$[rsp]
  00026	e9 16 01 00 00	 jmp	 $LN6@Py_atanh
$LN5@Py_atanh:

; 139  :     }
; 140  :     absx = fabs(x);

  0002b	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00031	e8 00 00 00 00	 call	 fabs
  00036	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR absx$[rsp], xmm0

; 141  :     if (absx >= 1.) {                   /* |x| >= 1 */

  0003c	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR absx$[rsp]
  00042	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  0004a	72 24		 jb	 SHORT $LN4@Py_atanh

; 142  :         errno = EDOM;

  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00052	c7 00 21 00 00
	00		 mov	 DWORD PTR [rax], 33	; 00000021H

; 143  : #ifdef Py_NAN
; 144  :         return Py_NAN;

  00058	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  0005f	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00063	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@0000000000000000
  0006b	e9 d1 00 00 00	 jmp	 $LN6@Py_atanh
$LN4@Py_atanh:

; 145  : #else
; 146  :         return x/zero;
; 147  : #endif
; 148  :     }
; 149  :     if (absx < two_pow_m28) {           /* |x| < 2**-28 */

  00070	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR two_pow_m28
  00078	66 0f 2f 44 24
	28		 comisd	 xmm0, QWORD PTR absx$[rsp]
  0007e	76 0b		 jbe	 SHORT $LN3@Py_atanh

; 150  :         return x;

  00080	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00086	e9 b6 00 00 00	 jmp	 $LN6@Py_atanh
$LN3@Py_atanh:

; 151  :     }
; 152  :     if (absx < 0.5) {                   /* |x| < 0.5 */

  0008b	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3fe0000000000000
  00093	66 0f 2f 44 24
	28		 comisd	 xmm0, QWORD PTR absx$[rsp]
  00099	76 5b		 jbe	 SHORT $LN2@Py_atanh

; 153  :         t = absx+absx;

  0009b	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR absx$[rsp]
  000a1	f2 0f 58 44 24
	28		 addsd	 xmm0, QWORD PTR absx$[rsp]
  000a7	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR t$[rsp], xmm0

; 154  :         t = 0.5 * m_log1p(t + t*absx / (1.0 - absx));

  000ad	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR t$[rsp]
  000b3	f2 0f 59 44 24
	28		 mulsd	 xmm0, QWORD PTR absx$[rsp]
  000b9	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ff0000000000000
  000c1	f2 0f 5c 4c 24
	28		 subsd	 xmm1, QWORD PTR absx$[rsp]
  000c7	f2 0f 5e c1	 divsd	 xmm0, xmm1
  000cb	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR t$[rsp]
  000d1	f2 0f 58 c8	 addsd	 xmm1, xmm0
  000d5	66 0f 28 c1	 movapd	 xmm0, xmm1
  000d9	e8 00 00 00 00	 call	 _Py_log1p
  000de	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3fe0000000000000
  000e6	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000ea	66 0f 28 c1	 movapd	 xmm0, xmm1
  000ee	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR t$[rsp], xmm0

; 155  :     }
; 156  :     else {                              /* 0.5 <= |x| <= 1.0 */

  000f4	eb 39		 jmp	 SHORT $LN1@Py_atanh
$LN2@Py_atanh:

; 157  :         t = 0.5 * m_log1p((absx + absx) / (1.0 - absx));

  000f6	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR absx$[rsp]
  000fc	f2 0f 58 44 24
	28		 addsd	 xmm0, QWORD PTR absx$[rsp]
  00102	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ff0000000000000
  0010a	f2 0f 5c 4c 24
	28		 subsd	 xmm1, QWORD PTR absx$[rsp]
  00110	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00114	e8 00 00 00 00	 call	 _Py_log1p
  00119	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3fe0000000000000
  00121	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00125	66 0f 28 c1	 movapd	 xmm0, xmm1
  00129	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR t$[rsp], xmm0
$LN1@Py_atanh:

; 158  :     }
; 159  :     return copysign(t, x);

  0012f	f2 0f 10 4c 24
	40		 movsdx	 xmm1, QWORD PTR x$[rsp]
  00135	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR t$[rsp]
  0013b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
$LN6@Py_atanh:

; 160  : }

  00141	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00145	c3		 ret	 0
_Py_atanh ENDP
_TEXT	ENDS
PUBLIC	__real@3fe6666666666666
PUBLIC	_Py_expm1
EXTRN	exp:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_expm1 DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$_Py_expm1
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_expm1 DD 010a01H
	DD	0620aH
xdata	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_expm1
_TEXT	SEGMENT
u$20355 = 32
tv72 = 40
x$ = 64
_Py_expm1 PROC						; COMDAT

; 168  : {

$LN7:
  00000	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR [rsp+8], xmm0
  00006	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 169  :     /* For abs(x) >= log(2), it's safe to evaluate exp(x) - 1 directly; this
; 170  :        also works fine for infinities and nans.
; 171  : 
; 172  :        For smaller x, we can use a method due to Kahan that achieves close to
; 173  :        full accuracy.
; 174  :     */
; 175  : 
; 176  :     if (fabs(x) < 0.7) {

  0000a	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00010	e8 00 00 00 00	 call	 fabs
  00015	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3fe6666666666666
  0001d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00021	76 64		 jbe	 SHORT $LN4@Py_expm1

; 177  :         double u;
; 178  :         u = exp(x);

  00023	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00029	e8 00 00 00 00	 call	 exp
  0002e	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR u$20355[rsp], xmm0

; 179  :         if (u == 1.0)

  00034	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR u$20355[rsp]
  0003a	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  00042	7a 0c		 jp	 SHORT $LN3@Py_expm1
  00044	75 0a		 jne	 SHORT $LN3@Py_expm1

; 180  :             return x;

  00046	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR x$[rsp]
  0004c	eb 4c		 jmp	 SHORT $LN5@Py_expm1

; 181  :         else

  0004e	eb 35		 jmp	 SHORT $LN2@Py_expm1
$LN3@Py_expm1:

; 182  :             return (u - 1.0) * x / log(u);

  00050	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR u$20355[rsp]
  00056	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0005e	f2 0f 59 44 24
	40		 mulsd	 xmm0, QWORD PTR x$[rsp]
  00064	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR tv72[rsp], xmm0
  0006a	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR u$20355[rsp]
  00070	e8 00 00 00 00	 call	 log
  00075	f2 0f 10 4c 24
	28		 movsdx	 xmm1, QWORD PTR tv72[rsp]
  0007b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0007f	66 0f 28 c1	 movapd	 xmm0, xmm1
  00083	eb 15		 jmp	 SHORT $LN5@Py_expm1
$LN2@Py_expm1:

; 183  :     }
; 184  :     else

  00085	eb 13		 jmp	 SHORT $LN1@Py_expm1
$LN4@Py_expm1:

; 185  :         return exp(x) - 1.0;

  00087	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR x$[rsp]
  0008d	e8 00 00 00 00	 call	 exp
  00092	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
$LN1@Py_expm1:
$LN5@Py_expm1:

; 186  : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
_Py_expm1 ENDP
_TEXT	ENDS
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@3ca0000000000000
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_log1p DD imagerel $LN7
	DD	imagerel $LN7+166
	DD	imagerel $unwind$_Py_log1p
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_log1p DD 010a01H
	DD	0620aH
xdata	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@3ca0000000000000
CONST	SEGMENT
__real@3ca0000000000000 DQ 03ca0000000000000r	; 1.11022e-016
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_log1p
_TEXT	SEGMENT
y$ = 32
x$ = 64
_Py_log1p PROC						; COMDAT

; 215  : {

$LN7:
  00000	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR [rsp+8], xmm0
  00006	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 216  :     /* For x small, we use the following approach.  Let y be the nearest float
; 217  :        to 1+x, then
; 218  : 
; 219  :          1+x = y * (1 - (y-1-x)/y)
; 220  : 
; 221  :        so log(1+x) = log(y) + log(1-(y-1-x)/y).  Since (y-1-x)/y is tiny, the
; 222  :        second term is well approximated by (y-1-x)/y.  If abs(x) >=
; 223  :        DBL_EPSILON/2 or the rounding-mode is some form of round-to-nearest
; 224  :        then y-1-x will be exactly representable, and is computed exactly by
; 225  :        (y-1)-x.
; 226  : 
; 227  :        If abs(x) < DBL_EPSILON/2 and the rounding mode is not known to be
; 228  :        round-to-nearest then this method is slightly dangerous: 1+x could be
; 229  :        rounded up to 1+DBL_EPSILON instead of down to 1, and in that case
; 230  :        y-1-x will not be exactly representable any more and the result can be
; 231  :        off by many ulps.  But this is easily fixed: for a floating-point
; 232  :        number |x| < DBL_EPSILON/2., the closest floating-point number to
; 233  :        log(1+x) is exactly x.
; 234  :     */
; 235  : 
; 236  :     double y;
; 237  :     if (fabs(x) < DBL_EPSILON/2.) {

  0000a	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00010	e8 00 00 00 00	 call	 fabs
  00015	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ca0000000000000
  0001d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00021	76 0a		 jbe	 SHORT $LN4@Py_log1p

; 238  :         return x;

  00023	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00029	eb 76		 jmp	 SHORT $LN5@Py_log1p
  0002b	eb 74		 jmp	 SHORT $LN3@Py_log1p
$LN4@Py_log1p:

; 239  :     }
; 240  :     else if (-0.5 <= x && x <= 1.) {

  0002d	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR x$[rsp]
  00033	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bfe0000000000000
  0003b	72 51		 jb	 SHORT $LN2@Py_log1p
  0003d	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00045	66 0f 2f 44 24
	40		 comisd	 xmm0, QWORD PTR x$[rsp]
  0004b	72 41		 jb	 SHORT $LN2@Py_log1p

; 241  :         /* WARNING: it's possible than an overeager compiler
; 242  :            will incorrectly optimize the following two lines
; 243  :            to the equivalent of "return log(1.+x)". If this
; 244  :            happens, then results from log1p will be inaccurate
; 245  :            for small x. */
; 246  :         y = 1.+x;

  0004d	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00055	f2 0f 58 44 24
	40		 addsd	 xmm0, QWORD PTR x$[rsp]
  0005b	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR y$[rsp], xmm0

; 247  :         return log(y)-((y-1.)-x)/y;

  00061	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR y$[rsp]
  00067	e8 00 00 00 00	 call	 log
  0006c	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR y$[rsp]
  00072	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0007a	f2 0f 5c 4c 24
	40		 subsd	 xmm1, QWORD PTR x$[rsp]
  00080	f2 0f 5e 4c 24
	20		 divsd	 xmm1, QWORD PTR y$[rsp]
  00086	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0008a	eb 15		 jmp	 SHORT $LN5@Py_log1p

; 248  :     }
; 249  :     else {

  0008c	eb 13		 jmp	 SHORT $LN1@Py_log1p
$LN2@Py_log1p:

; 250  :         /* NaNs and infinities should end up here */
; 251  :         return log(1.+x);

  0008e	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00096	f2 0f 58 44 24
	40		 addsd	 xmm0, QWORD PTR x$[rsp]
  0009c	e8 00 00 00 00	 call	 log
$LN1@Py_log1p:
$LN3@Py_log1p:
$LN5@Py_log1p:

; 252  :     }
; 253  : }

  000a1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a5	c3		 ret	 0
_Py_log1p ENDP
_TEXT	ENDS
END
