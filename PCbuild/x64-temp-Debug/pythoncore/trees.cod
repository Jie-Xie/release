; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_dist_code
PUBLIC	_length_code
_DATA	SEGMENT
static_l_desc DQ FLAT:static_ltree
	DQ	FLAT:extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
	ORG $+4
static_d_desc DQ FLAT:static_dtree
	DQ	FLAT:extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
	ORG $+4
static_bl_desc DQ 0000000000000000H
	DQ	FLAT:extra_blbits
	DD	00H
	DD	013H
	DD	07H
	ORG $+4
_DATA	ENDS
CONST	SEGMENT
extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+12
extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
	ORG $+8
extra_blbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+13
static_ltree DW	0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
static_dtree DW	00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
	ORG $+8
_dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
_length_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
	ORG $+12
base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
CONST	ENDS
PUBLIC	_tr_init
;	COMDAT pdata
; File c:\src\pyparallel\modules\zlib\trees.c
pdata	SEGMENT
$pdata$_tr_init DD imagerel $LN3
	DD	imagerel $LN3+199
	DD	imagerel $unwind$_tr_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_init DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_init
_TEXT	SEGMENT
s$ = 48
_tr_init PROC						; COMDAT

; 388  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 389  :     tr_static_init();

  00009	e8 00 00 00 00	 call	 tr_static_init

; 390  : 
; 391  :     s->l_desc.dyn_tree = s->dyn_ltree;

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00013	48 05 bc 00 00
	00		 add	 rax, 188		; 000000bcH
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0001e	48 89 81 40 0b
	00 00		 mov	 QWORD PTR [rcx+2880], rax

; 392  :     s->l_desc.stat_desc = &static_l_desc;

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:static_l_desc
  00031	48 89 88 50 0b
	00 00		 mov	 QWORD PTR [rax+2896], rcx

; 393  : 
; 394  :     s->d_desc.dyn_tree = s->dyn_dtree;

  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0003d	48 05 b0 09 00
	00		 add	 rax, 2480		; 000009b0H
  00043	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00048	48 89 81 58 0b
	00 00		 mov	 QWORD PTR [rcx+2904], rax

; 395  :     s->d_desc.stat_desc = &static_d_desc;

  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:static_d_desc
  0005b	48 89 88 68 0b
	00 00		 mov	 QWORD PTR [rax+2920], rcx

; 396  : 
; 397  :     s->bl_desc.dyn_tree = s->bl_tree;

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00067	48 05 a4 0a 00
	00		 add	 rax, 2724		; 00000aa4H
  0006d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00072	48 89 81 70 0b
	00 00		 mov	 QWORD PTR [rcx+2928], rax

; 398  :     s->bl_desc.stat_desc = &static_bl_desc;

  00079	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:static_bl_desc
  00085	48 89 88 80 0b
	00 00		 mov	 QWORD PTR [rax+2944], rcx

; 399  : 
; 400  :     s->bi_buf = 0;

  0008c	33 c0		 xor	 eax, eax
  0008e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00093	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax

; 401  :     s->bi_valid = 0;

  0009a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0009f	c7 80 14 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5908], 0

; 402  :     s->last_eob_len = 8; /* enough lookahead for inflate */

  000a9	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000ae	c7 80 0c 17 00
	00 08 00 00 00	 mov	 DWORD PTR [rax+5900], 8

; 403  : #ifdef DEBUG
; 404  :     s->compressed_len = 0L;
; 405  :     s->bits_sent = 0L;
; 406  : #endif
; 407  : 
; 408  :     /* Initialize the first block of the first file: */
; 409  :     init_block(s);

  000b8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000bd	e8 00 00 00 00	 call	 init_block

; 410  : }

  000c2	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c6	c3		 ret	 0
_tr_init ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT tr_static_init
_TEXT	SEGMENT
tr_static_init PROC					; COMDAT

; 241  : #if defined(GEN_TREES_H) || !defined(STDC)
; 242  :     static int static_init_done = 0;
; 243  :     int n;        /* iterates over tree elements */
; 244  :     int bits;     /* bit counter */
; 245  :     int length;   /* length value */
; 246  :     int code;     /* code value */
; 247  :     int dist;     /* distance index */
; 248  :     ush bl_count[MAX_BITS+1];
; 249  :     /* number of codes at each bit length for an optimal tree */
; 250  : 
; 251  :     if (static_init_done) return;
; 252  : 
; 253  :     /* For some embedded targets, global variables are not initialized: */
; 254  : #ifdef NO_INIT_GLOBAL_POINTERS
; 255  :     static_l_desc.static_tree = static_ltree;
; 256  :     static_l_desc.extra_bits = extra_lbits;
; 257  :     static_d_desc.static_tree = static_dtree;
; 258  :     static_d_desc.extra_bits = extra_dbits;
; 259  :     static_bl_desc.extra_bits = extra_blbits;
; 260  : #endif
; 261  : 
; 262  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 263  :     length = 0;
; 264  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 265  :         base_length[code] = length;
; 266  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 267  :             _length_code[length++] = (uch)code;
; 268  :         }
; 269  :     }
; 270  :     Assert (length == 256, "tr_static_init: length != 256");
; 271  :     /* Note that the length 255 (match length 258) can be represented
; 272  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 273  :      * overwrite length_code[255] to use the best encoding:
; 274  :      */
; 275  :     _length_code[length-1] = (uch)code;
; 276  : 
; 277  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 278  :     dist = 0;
; 279  :     for (code = 0 ; code < 16; code++) {
; 280  :         base_dist[code] = dist;
; 281  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 282  :             _dist_code[dist++] = (uch)code;
; 283  :         }
; 284  :     }
; 285  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 286  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 287  :     for ( ; code < D_CODES; code++) {
; 288  :         base_dist[code] = dist << 7;
; 289  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 290  :             _dist_code[256 + dist++] = (uch)code;
; 291  :         }
; 292  :     }
; 293  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 294  : 
; 295  :     /* Construct the codes of the static literal tree */
; 296  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 297  :     n = 0;
; 298  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 299  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 300  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 301  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 302  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 303  :      * tree construction to get a canonical Huffman tree (longest code
; 304  :      * all ones)
; 305  :      */
; 306  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 307  : 
; 308  :     /* The static distance tree is trivial: */
; 309  :     for (n = 0; n < D_CODES; n++) {
; 310  :         static_dtree[n].Len = 5;
; 311  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 312  :     }
; 313  :     static_init_done = 1;
; 314  : 
; 315  : #  ifdef GEN_TREES_H
; 316  :     gen_trees_header();
; 317  : #  endif
; 318  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 319  : }

  00000	c3		 ret	 0
tr_static_init ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_block DD imagerel init_block
	DD	imagerel init_block+226
	DD	imagerel $unwind$init_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_block DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT init_block
_TEXT	SEGMENT
n$ = 0
s$ = 32
init_block PROC						; COMDAT

; 417  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 418  :     int n; /* iterates over tree elements */
; 419  : 
; 420  :     /* Initialize the trees. */
; 421  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00009	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  00010	eb 08		 jmp	 SHORT $LN9@init_block
$LN8@init_block:
  00012	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00015	ff c0		 inc	 eax
  00017	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN9@init_block:
  0001a	81 3c 24 1e 01
	00 00		 cmp	 DWORD PTR n$[rsp], 286	; 0000011eH
  00021	7d 15		 jge	 SHORT $LN7@init_block
  00023	48 63 04 24	 movsxd	 rax, DWORD PTR n$[rsp]
  00027	33 c9		 xor	 ecx, ecx
  00029	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0002e	66 89 8c 82 bc
	00 00 00	 mov	 WORD PTR [rdx+rax*4+188], cx
  00036	eb da		 jmp	 SHORT $LN8@init_block
$LN7@init_block:

; 422  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  00038	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  0003f	eb 08		 jmp	 SHORT $LN6@init_block
$LN5@init_block:
  00041	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00044	ff c0		 inc	 eax
  00046	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN6@init_block:
  00049	83 3c 24 1e	 cmp	 DWORD PTR n$[rsp], 30
  0004d	7d 15		 jge	 SHORT $LN4@init_block
  0004f	48 63 04 24	 movsxd	 rax, DWORD PTR n$[rsp]
  00053	33 c9		 xor	 ecx, ecx
  00055	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0005a	66 89 8c 82 b0
	09 00 00	 mov	 WORD PTR [rdx+rax*4+2480], cx
  00062	eb dd		 jmp	 SHORT $LN5@init_block
$LN4@init_block:

; 423  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  00064	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  0006b	eb 08		 jmp	 SHORT $LN3@init_block
$LN2@init_block:
  0006d	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00070	ff c0		 inc	 eax
  00072	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN3@init_block:
  00075	83 3c 24 13	 cmp	 DWORD PTR n$[rsp], 19
  00079	7d 15		 jge	 SHORT $LN1@init_block
  0007b	48 63 04 24	 movsxd	 rax, DWORD PTR n$[rsp]
  0007f	33 c9		 xor	 ecx, ecx
  00081	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00086	66 89 8c 82 a4
	0a 00 00	 mov	 WORD PTR [rdx+rax*4+2724], cx
  0008e	eb dd		 jmp	 SHORT $LN2@init_block
$LN1@init_block:

; 424  : 
; 425  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0009a	66 89 81 bc 04
	00 00		 mov	 WORD PTR [rcx+1212], ax

; 426  :     s->opt_len = s->static_len = 0L;

  000a1	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000a6	c7 80 04 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5892], 0
  000b0	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000b5	c7 80 00 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5888], 0

; 427  :     s->last_lit = s->matches = 0;

  000bf	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000c4	c7 80 08 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5896], 0
  000ce	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000d3	c7 80 f4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5876], 0

; 428  : }

  000dd	48 83 c4 18	 add	 rsp, 24
  000e1	c3		 ret	 0
init_block ENDP
_TEXT	ENDS
PUBLIC	_tr_stored_block
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_stored_block DD imagerel $LN5
	DD	imagerel $LN5+400
	DD	imagerel $unwind$_tr_stored_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_stored_block DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_stored_block
_TEXT	SEGMENT
len$5357 = 32
val$5361 = 36
s$ = 64
buf$ = 72
stored_len$ = 80
last$ = 88
_tr_stored_block PROC					; COMDAT

; 876  : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 877  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  00018	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR len$5357[rsp], 3
  00020	b8 10 00 00 00	 mov	 eax, 16
  00025	2b 44 24 20	 sub	 eax, DWORD PTR len$5357[rsp]
  00029	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0002e	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  00034	0f 8e ef 00 00
	00		 jle	 $LN2@tr_stored_
  0003a	8b 44 24 58	 mov	 eax, DWORD PTR last$[rsp]
  0003e	89 44 24 24	 mov	 DWORD PTR val$5361[rsp], eax
  00042	0f b7 44 24 24	 movzx	 eax, WORD PTR val$5361[rsp]
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0004c	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00052	d3 e0		 shl	 eax, cl
  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00059	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00060	0b c8		 or	 ecx, eax
  00062	8b c1		 mov	 eax, ecx
  00064	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00069	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00075	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  0007c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00081	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00086	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00089	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$[rsp]
  0008e	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00092	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0009a	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0009d	ff c0		 inc	 eax
  0009f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  000a4	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  000a7	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000ac	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  000b3	c1 f8 08	 sar	 eax, 8
  000b6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  000bb	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  000be	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$[rsp]
  000c3	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  000c7	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  000ca	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000cf	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  000d2	ff c0		 inc	 eax
  000d4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  000d9	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  000dc	0f b7 44 24 24	 movzx	 eax, WORD PTR val$5361[rsp]
  000e1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  000e6	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  000ed	ba 10 00 00 00	 mov	 edx, 16
  000f2	48 2b d1	 sub	 rdx, rcx
  000f5	48 8b ca	 mov	 rcx, rdx
  000f8	d3 f8		 sar	 eax, cl
  000fa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  000ff	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00106	48 63 44 24 20	 movsxd	 rax, DWORD PTR len$5357[rsp]
  0010b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00110	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00117	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  0011c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00121	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00127	eb 48		 jmp	 SHORT $LN1@tr_stored_
$LN2@tr_stored_:
  00129	0f b7 44 24 58	 movzx	 eax, WORD PTR last$[rsp]
  0012e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00133	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00139	d3 e0		 shl	 eax, cl
  0013b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00140	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00147	0b c8		 or	 ecx, eax
  00149	8b c1		 mov	 eax, ecx
  0014b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00150	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00157	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0015c	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00162	03 44 24 20	 add	 eax, DWORD PTR len$5357[rsp]
  00166	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0016b	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN1@tr_stored_:

; 878  : #ifdef DEBUG
; 879  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 880  :     s->compressed_len += (stored_len + 4) << 3;
; 881  : #endif
; 882  :     copy_block(s, buf, (unsigned)stored_len, 1); /* with header */

  00171	41 b9 01 00 00
	00		 mov	 r9d, 1
  00177	44 8b 44 24 50	 mov	 r8d, DWORD PTR stored_len$[rsp]
  0017c	48 8b 54 24 48	 mov	 rdx, QWORD PTR buf$[rsp]
  00181	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00186	e8 00 00 00 00	 call	 copy_block

; 883  : }

  0018b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0018f	c3		 ret	 0
_tr_stored_block ENDP
_TEXT	ENDS
PUBLIC	_tr_align
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_align DD imagerel $LN12
	DD	imagerel $LN12+1501
	DD	imagerel $unwind$_tr_align
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_align DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_align
_TEXT	SEGMENT
len$5375 = 32
val$5379 = 36
len$5389 = 40
val$5393 = 44
len$5404 = 48
val$5408 = 52
len$5418 = 56
val$5422 = 60
tv428 = 64
tv513 = 68
s$ = 96
_tr_align PROC						; COMDAT

; 898  : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 899  :     send_bits(s, STATIC_TREES<<1, 3);

  00009	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR len$5375[rsp], 3
  00011	b8 10 00 00 00	 mov	 eax, 16
  00016	2b 44 24 20	 sub	 eax, DWORD PTR len$5375[rsp]
  0001a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0001f	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  00025	0f 8e ef 00 00
	00		 jle	 $LN9@tr_align
  0002b	c7 44 24 24 02
	00 00 00	 mov	 DWORD PTR val$5379[rsp], 2
  00033	0f b7 44 24 24	 movzx	 eax, WORD PTR val$5379[rsp]
  00038	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0003d	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00043	d3 e0		 shl	 eax, cl
  00045	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0004a	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00051	0b c8		 or	 ecx, eax
  00053	8b c1		 mov	 eax, ecx
  00055	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0005a	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00061	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00066	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  0006d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00072	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00077	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0007a	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  0007f	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00083	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00086	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0008b	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0008e	ff c0		 inc	 eax
  00090	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00095	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00098	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0009d	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  000a4	c1 f8 08	 sar	 eax, 8
  000a7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000ac	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  000af	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  000b4	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  000b8	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  000bb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000c0	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  000c3	ff c0		 inc	 eax
  000c5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000ca	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  000cd	0f b7 44 24 24	 movzx	 eax, WORD PTR val$5379[rsp]
  000d2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000d7	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  000de	ba 10 00 00 00	 mov	 edx, 16
  000e3	48 2b d1	 sub	 rdx, rcx
  000e6	48 8b ca	 mov	 rcx, rdx
  000e9	d3 f8		 sar	 eax, cl
  000eb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000f0	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  000f7	48 63 44 24 20	 movsxd	 rax, DWORD PTR len$5375[rsp]
  000fc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00101	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00108	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  0010d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00112	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00118	eb 53		 jmp	 SHORT $LN8@tr_align
$LN9@tr_align:
  0011a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0011f	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00125	b9 02 00 00 00	 mov	 ecx, 2
  0012a	89 4c 24 40	 mov	 DWORD PTR tv428[rsp], ecx
  0012e	0f b6 c8	 movzx	 ecx, al
  00131	8b 44 24 40	 mov	 eax, DWORD PTR tv428[rsp]
  00135	d3 e0		 shl	 eax, cl
  00137	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0013c	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00143	0b c8		 or	 ecx, eax
  00145	8b c1		 mov	 eax, ecx
  00147	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0014c	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00153	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00158	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0015e	03 44 24 20	 add	 eax, DWORD PTR len$5375[rsp]
  00162	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00167	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN8@tr_align:

; 900  :     send_code(s, END_BLOCK, static_ltree);

  0016d	0f b7 05 02 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1026
  00174	89 44 24 28	 mov	 DWORD PTR len$5389[rsp], eax
  00178	b8 10 00 00 00	 mov	 eax, 16
  0017d	2b 44 24 28	 sub	 eax, DWORD PTR len$5389[rsp]
  00181	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00186	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  0018c	0f 8e f2 00 00
	00		 jle	 $LN7@tr_align
  00192	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1024
  00199	89 44 24 2c	 mov	 DWORD PTR val$5393[rsp], eax
  0019d	0f b7 44 24 2c	 movzx	 eax, WORD PTR val$5393[rsp]
  001a2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001a7	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  001ad	d3 e0		 shl	 eax, cl
  001af	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001b4	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  001bb	0b c8		 or	 ecx, eax
  001bd	8b c1		 mov	 eax, ecx
  001bf	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001c4	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  001cb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001d0	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  001d7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001dc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001e1	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  001e4	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  001e9	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  001ed	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  001f0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001f5	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  001f8	ff c0		 inc	 eax
  001fa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001ff	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00202	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00207	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  0020e	c1 f8 08	 sar	 eax, 8
  00211	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00216	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00219	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  0021e	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00222	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00225	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0022a	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0022d	ff c0		 inc	 eax
  0022f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00234	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00237	0f b7 44 24 2c	 movzx	 eax, WORD PTR val$5393[rsp]
  0023c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00241	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00248	ba 10 00 00 00	 mov	 edx, 16
  0024d	48 2b d1	 sub	 rdx, rcx
  00250	48 8b ca	 mov	 rcx, rdx
  00253	d3 f8		 sar	 eax, cl
  00255	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0025a	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00261	48 63 44 24 28	 movsxd	 rax, DWORD PTR len$5389[rsp]
  00266	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0026b	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00272	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  00277	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0027c	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00282	eb 4a		 jmp	 SHORT $LN6@tr_align
$LN7@tr_align:
  00284	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1024
  0028b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00290	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00296	d3 e0		 shl	 eax, cl
  00298	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0029d	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  002a4	0b c8		 or	 ecx, eax
  002a6	8b c1		 mov	 eax, ecx
  002a8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002ad	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  002b4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002b9	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  002bf	03 44 24 28	 add	 eax, DWORD PTR len$5389[rsp]
  002c3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002c8	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN6@tr_align:

; 901  : #ifdef DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

  002ce	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002d3	e8 00 00 00 00	 call	 bi_flush

; 905  :     /* Of the 10 bits for the empty block, we have already sent
; 906  :      * (10 - bi_valid) bits. The lookahead for the last real code (before
; 907  :      * the EOB of the previous block) was thus at least one plus the length
; 908  :      * of the EOB plus what we have just sent of the empty static block.
; 909  :      */
; 910  :     if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {

  002d8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002dd	8b 80 0c 17 00
	00		 mov	 eax, DWORD PTR [rax+5900]
  002e3	83 c0 0b	 add	 eax, 11
  002e6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002eb	2b 81 14 17 00
	00		 sub	 eax, DWORD PTR [rcx+5908]
  002f1	83 f8 09	 cmp	 eax, 9
  002f4	0f 8d cf 02 00
	00		 jge	 $LN5@tr_align

; 911  :         send_bits(s, STATIC_TREES<<1, 3);

  002fa	c7 44 24 30 03
	00 00 00	 mov	 DWORD PTR len$5404[rsp], 3
  00302	b8 10 00 00 00	 mov	 eax, 16
  00307	2b 44 24 30	 sub	 eax, DWORD PTR len$5404[rsp]
  0030b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00310	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  00316	0f 8e ef 00 00
	00		 jle	 $LN4@tr_align
  0031c	c7 44 24 34 02
	00 00 00	 mov	 DWORD PTR val$5408[rsp], 2
  00324	0f b7 44 24 34	 movzx	 eax, WORD PTR val$5408[rsp]
  00329	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0032e	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00334	d3 e0		 shl	 eax, cl
  00336	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0033b	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00342	0b c8		 or	 ecx, eax
  00344	8b c1		 mov	 eax, ecx
  00346	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0034b	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00352	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00357	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  0035e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00363	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00368	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0036b	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00370	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00374	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00377	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0037c	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0037f	ff c0		 inc	 eax
  00381	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00386	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00389	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0038e	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00395	c1 f8 08	 sar	 eax, 8
  00398	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0039d	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  003a0	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  003a5	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  003a9	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  003ac	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003b1	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  003b4	ff c0		 inc	 eax
  003b6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003bb	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  003be	0f b7 44 24 34	 movzx	 eax, WORD PTR val$5408[rsp]
  003c3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003c8	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  003cf	ba 10 00 00 00	 mov	 edx, 16
  003d4	48 2b d1	 sub	 rdx, rcx
  003d7	48 8b ca	 mov	 rcx, rdx
  003da	d3 f8		 sar	 eax, cl
  003dc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003e1	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  003e8	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$5404[rsp]
  003ed	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003f2	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  003f9	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  003fe	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00403	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00409	eb 53		 jmp	 SHORT $LN3@tr_align
$LN4@tr_align:
  0040b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00410	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00416	b9 02 00 00 00	 mov	 ecx, 2
  0041b	89 4c 24 44	 mov	 DWORD PTR tv513[rsp], ecx
  0041f	0f b6 c8	 movzx	 ecx, al
  00422	8b 44 24 44	 mov	 eax, DWORD PTR tv513[rsp]
  00426	d3 e0		 shl	 eax, cl
  00428	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0042d	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00434	0b c8		 or	 ecx, eax
  00436	8b c1		 mov	 eax, ecx
  00438	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0043d	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00444	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00449	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0044f	03 44 24 30	 add	 eax, DWORD PTR len$5404[rsp]
  00453	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00458	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN3@tr_align:

; 912  :         send_code(s, END_BLOCK, static_ltree);

  0045e	0f b7 05 02 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1026
  00465	89 44 24 38	 mov	 DWORD PTR len$5418[rsp], eax
  00469	b8 10 00 00 00	 mov	 eax, 16
  0046e	2b 44 24 38	 sub	 eax, DWORD PTR len$5418[rsp]
  00472	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00477	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  0047d	0f 8e f2 00 00
	00		 jle	 $LN2@tr_align
  00483	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1024
  0048a	89 44 24 3c	 mov	 DWORD PTR val$5422[rsp], eax
  0048e	0f b7 44 24 3c	 movzx	 eax, WORD PTR val$5422[rsp]
  00493	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00498	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  0049e	d3 e0		 shl	 eax, cl
  004a0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004a5	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  004ac	0b c8		 or	 ecx, eax
  004ae	8b c1		 mov	 eax, ecx
  004b0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004b5	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  004bc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004c1	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  004c8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004cd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004d2	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  004d5	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  004da	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  004de	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  004e1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004e6	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  004e9	ff c0		 inc	 eax
  004eb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004f0	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  004f3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004f8	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  004ff	c1 f8 08	 sar	 eax, 8
  00502	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00507	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0050a	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  0050f	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00513	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00516	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0051b	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0051e	ff c0		 inc	 eax
  00520	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00525	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00528	0f b7 44 24 3c	 movzx	 eax, WORD PTR val$5422[rsp]
  0052d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00532	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00539	ba 10 00 00 00	 mov	 edx, 16
  0053e	48 2b d1	 sub	 rdx, rcx
  00541	48 8b ca	 mov	 rcx, rdx
  00544	d3 f8		 sar	 eax, cl
  00546	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0054b	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00552	48 63 44 24 38	 movsxd	 rax, DWORD PTR len$5418[rsp]
  00557	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0055c	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00563	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  00568	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0056d	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00573	eb 4a		 jmp	 SHORT $LN1@tr_align
$LN2@tr_align:
  00575	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1024
  0057c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00581	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00587	d3 e0		 shl	 eax, cl
  00589	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0058e	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00595	0b c8		 or	 ecx, eax
  00597	8b c1		 mov	 eax, ecx
  00599	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0059e	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  005a5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005aa	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  005b0	03 44 24 38	 add	 eax, DWORD PTR len$5418[rsp]
  005b4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  005b9	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN1@tr_align:

; 913  : #ifdef DEBUG
; 914  :         s->compressed_len += 10L;
; 915  : #endif
; 916  :         bi_flush(s);

  005bf	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  005c4	e8 00 00 00 00	 call	 bi_flush
$LN5@tr_align:

; 917  :     }
; 918  :     s->last_eob_len = 7;

  005c9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005ce	c7 80 0c 17 00
	00 07 00 00 00	 mov	 DWORD PTR [rax+5900], 7

; 919  : }

  005d8	48 83 c4 58	 add	 rsp, 88			; 00000058H
  005dc	c3		 ret	 0
_tr_align ENDP
_TEXT	ENDS
PUBLIC	_tr_flush_block
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_flush_block DD imagerel $LN17
	DD	imagerel $LN17+1161
	DD	imagerel $unwind$_tr_flush_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_flush_block DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_flush_block
_TEXT	SEGMENT
static_lenb$ = 32
max_blindex$ = 36
opt_lenb$ = 40
len$5452 = 44
val$5456 = 48
len$5469 = 52
val$5473 = 56
s$ = 80
buf$ = 88
stored_len$ = 96
last$ = 104
_tr_flush_block PROC					; COMDAT

; 930  : {

$LN17:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 931  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 932  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

  00018	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR max_blindex$[rsp], 0

; 933  : 
; 934  :     /* Build the Huffman trees unless a stored block is forced */
; 935  :     if (s->level > 0) {

  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00025	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [rax+172], 0
  0002c	0f 8e 9f 00 00
	00		 jle	 $LN14@tr_flush_b

; 936  : 
; 937  :         /* Check if the file is binary or text */
; 938  :         if (s->strm->data_type == Z_UNKNOWN)

  00032	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00037	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003a	83 78 48 02	 cmp	 DWORD PTR [rax+72], 2
  0003e	75 15		 jne	 SHORT $LN13@tr_flush_b

; 939  :             s->strm->data_type = detect_data_type(s);

  00040	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00045	e8 00 00 00 00	 call	 detect_data_type
  0004a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0004f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00052	89 41 48	 mov	 DWORD PTR [rcx+72], eax
$LN13@tr_flush_b:

; 940  : 
; 941  :         /* Construct the literal and distance trees */
; 942  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  00055	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0005a	48 05 40 0b 00
	00		 add	 rax, 2880		; 00000b40H
  00060	48 8b d0	 mov	 rdx, rax
  00063	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00068	e8 00 00 00 00	 call	 build_tree

; 943  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 944  :                 s->static_len));
; 945  : 
; 946  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  0006d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00072	48 05 58 0b 00
	00		 add	 rax, 2904		; 00000b58H
  00078	48 8b d0	 mov	 rdx, rax
  0007b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00080	e8 00 00 00 00	 call	 build_tree

; 947  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 948  :                 s->static_len));
; 949  :         /* At this point, opt_len and static_len are the total bit lengths of
; 950  :          * the compressed block data, excluding the tree representations.
; 951  :          */
; 952  : 
; 953  :         /* Build the bit length tree for the above two trees, and get the index
; 954  :          * in bl_order of the last bit length code to send.
; 955  :          */
; 956  :         max_blindex = build_bl_tree(s);

  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0008a	e8 00 00 00 00	 call	 build_bl_tree
  0008f	89 44 24 24	 mov	 DWORD PTR max_blindex$[rsp], eax

; 957  : 
; 958  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 959  :         opt_lenb = (s->opt_len+3+7)>>3;

  00093	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00098	8b 80 00 17 00
	00		 mov	 eax, DWORD PTR [rax+5888]
  0009e	83 c0 0a	 add	 eax, 10
  000a1	c1 e8 03	 shr	 eax, 3
  000a4	89 44 24 28	 mov	 DWORD PTR opt_lenb$[rsp], eax

; 960  :         static_lenb = (s->static_len+3+7)>>3;

  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000ad	8b 80 04 17 00
	00		 mov	 eax, DWORD PTR [rax+5892]
  000b3	83 c0 0a	 add	 eax, 10
  000b6	c1 e8 03	 shr	 eax, 3
  000b9	89 44 24 20	 mov	 DWORD PTR static_lenb$[rsp], eax

; 961  : 
; 962  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 963  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 964  :                 s->last_lit));
; 965  : 
; 966  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;

  000bd	8b 44 24 28	 mov	 eax, DWORD PTR opt_lenb$[rsp]
  000c1	39 44 24 20	 cmp	 DWORD PTR static_lenb$[rsp], eax
  000c5	77 08		 ja	 SHORT $LN12@tr_flush_b
  000c7	8b 44 24 20	 mov	 eax, DWORD PTR static_lenb$[rsp]
  000cb	89 44 24 28	 mov	 DWORD PTR opt_lenb$[rsp], eax
$LN12@tr_flush_b:

; 967  : 
; 968  :     } else {

  000cf	eb 13		 jmp	 SHORT $LN11@tr_flush_b
$LN14@tr_flush_b:

; 969  :         Assert(buf != (char*)0, "lost buf");
; 970  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  000d1	8b 44 24 60	 mov	 eax, DWORD PTR stored_len$[rsp]
  000d5	83 c0 05	 add	 eax, 5
  000d8	89 44 24 20	 mov	 DWORD PTR static_lenb$[rsp], eax
  000dc	8b 44 24 20	 mov	 eax, DWORD PTR static_lenb$[rsp]
  000e0	89 44 24 28	 mov	 DWORD PTR opt_lenb$[rsp], eax
$LN11@tr_flush_b:

; 971  :     }
; 972  : 
; 973  : #ifdef FORCE_STORED
; 974  :     if (buf != (char*)0) { /* force stored block */
; 975  : #else
; 976  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  000e4	8b 44 24 60	 mov	 eax, DWORD PTR stored_len$[rsp]
  000e8	83 c0 04	 add	 eax, 4
  000eb	3b 44 24 28	 cmp	 eax, DWORD PTR opt_lenb$[rsp]
  000ef	77 26		 ja	 SHORT $LN10@tr_flush_b
  000f1	48 83 7c 24 58
	00		 cmp	 QWORD PTR buf$[rsp], 0
  000f7	74 1e		 je	 SHORT $LN10@tr_flush_b

; 977  :                        /* 4: two words for the lengths */
; 978  : #endif
; 979  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 980  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 981  :          * the last block flush, because compression would have been
; 982  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 983  :          * transform a block into a stored block.
; 984  :          */
; 985  :         _tr_stored_block(s, buf, stored_len, last);

  000f9	44 8b 4c 24 68	 mov	 r9d, DWORD PTR last$[rsp]
  000fe	44 8b 44 24 60	 mov	 r8d, DWORD PTR stored_len$[rsp]
  00103	48 8b 54 24 58	 mov	 rdx, QWORD PTR buf$[rsp]
  00108	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0010d	e8 00 00 00 00	 call	 _tr_stored_block
  00112	e9 52 03 00 00	 jmp	 $LN9@tr_flush_b
$LN10@tr_flush_b:

; 986  : 
; 987  : #ifdef FORCE_STATIC
; 988  :     } else if (static_lenb >= 0) { /* force static trees */
; 989  : #else
; 990  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  00117	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0011c	83 b8 b0 00 00
	00 04		 cmp	 DWORD PTR [rax+176], 4
  00123	74 0e		 je	 SHORT $LN7@tr_flush_b
  00125	8b 44 24 28	 mov	 eax, DWORD PTR opt_lenb$[rsp]
  00129	39 44 24 20	 cmp	 DWORD PTR static_lenb$[rsp], eax
  0012d	0f 85 7e 01 00
	00		 jne	 $LN8@tr_flush_b
$LN7@tr_flush_b:

; 991  : #endif
; 992  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

  00133	c7 44 24 2c 03
	00 00 00	 mov	 DWORD PTR len$5452[rsp], 3
  0013b	b8 10 00 00 00	 mov	 eax, 16
  00140	2b 44 24 2c	 sub	 eax, DWORD PTR len$5452[rsp]
  00144	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00149	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  0014f	0f 8e f2 00 00
	00		 jle	 $LN6@tr_flush_b
  00155	8b 44 24 68	 mov	 eax, DWORD PTR last$[rsp]
  00159	83 c0 02	 add	 eax, 2
  0015c	89 44 24 30	 mov	 DWORD PTR val$5456[rsp], eax
  00160	0f b7 44 24 30	 movzx	 eax, WORD PTR val$5456[rsp]
  00165	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0016a	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00170	d3 e0		 shl	 eax, cl
  00172	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00177	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  0017e	0b c8		 or	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00187	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0018e	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00193	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  0019a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0019f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  001a4	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  001a7	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  001ac	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  001b0	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  001b3	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001b8	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  001bb	ff c0		 inc	 eax
  001bd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  001c2	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  001c5	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001ca	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  001d1	c1 f8 08	 sar	 eax, 8
  001d4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  001d9	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  001dc	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  001e1	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  001e5	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  001e8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001ed	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  001f0	ff c0		 inc	 eax
  001f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  001f7	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  001fa	0f b7 44 24 30	 movzx	 eax, WORD PTR val$5456[rsp]
  001ff	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00204	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  0020b	ba 10 00 00 00	 mov	 edx, 16
  00210	48 2b d1	 sub	 rdx, rcx
  00213	48 8b ca	 mov	 rcx, rdx
  00216	d3 f8		 sar	 eax, cl
  00218	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0021d	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00224	48 63 44 24 2c	 movsxd	 rax, DWORD PTR len$5452[rsp]
  00229	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0022e	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00235	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  0023a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0023f	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00245	eb 4d		 jmp	 SHORT $LN5@tr_flush_b
$LN6@tr_flush_b:
  00247	8b 44 24 68	 mov	 eax, DWORD PTR last$[rsp]
  0024b	83 c0 02	 add	 eax, 2
  0024e	0f b7 c0	 movzx	 eax, ax
  00251	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00256	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  0025c	d3 e0		 shl	 eax, cl
  0025e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00263	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  0026a	0b c8		 or	 ecx, eax
  0026c	8b c1		 mov	 eax, ecx
  0026e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00273	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0027a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0027f	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00285	03 44 24 2c	 add	 eax, DWORD PTR len$5452[rsp]
  00289	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0028e	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN5@tr_flush_b:

; 993  :         compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);

  00294	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:static_dtree
  0029b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:static_ltree
  002a2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002a7	e8 00 00 00 00	 call	 compress_block

; 994  : #ifdef DEBUG
; 995  :         s->compressed_len += 3 + s->static_len;
; 996  : #endif
; 997  :     } else {

  002ac	e9 b8 01 00 00	 jmp	 $LN4@tr_flush_b
$LN8@tr_flush_b:

; 998  :         send_bits(s, (DYN_TREES<<1)+last, 3);

  002b1	c7 44 24 34 03
	00 00 00	 mov	 DWORD PTR len$5469[rsp], 3
  002b9	b8 10 00 00 00	 mov	 eax, 16
  002be	2b 44 24 34	 sub	 eax, DWORD PTR len$5469[rsp]
  002c2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002c7	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  002cd	0f 8e f2 00 00
	00		 jle	 $LN3@tr_flush_b
  002d3	8b 44 24 68	 mov	 eax, DWORD PTR last$[rsp]
  002d7	83 c0 04	 add	 eax, 4
  002da	89 44 24 38	 mov	 DWORD PTR val$5473[rsp], eax
  002de	0f b7 44 24 38	 movzx	 eax, WORD PTR val$5473[rsp]
  002e3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002e8	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  002ee	d3 e0		 shl	 eax, cl
  002f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002f5	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  002fc	0b c8		 or	 ecx, eax
  002fe	8b c1		 mov	 eax, ecx
  00300	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00305	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0030c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00311	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00318	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0031d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00322	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00325	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  0032a	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0032e	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00331	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00336	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00339	ff c0		 inc	 eax
  0033b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00340	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00343	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00348	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  0034f	c1 f8 08	 sar	 eax, 8
  00352	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00357	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0035a	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  0035f	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00363	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00366	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0036b	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0036e	ff c0		 inc	 eax
  00370	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00375	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00378	0f b7 44 24 38	 movzx	 eax, WORD PTR val$5473[rsp]
  0037d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00382	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00389	ba 10 00 00 00	 mov	 edx, 16
  0038e	48 2b d1	 sub	 rdx, rcx
  00391	48 8b ca	 mov	 rcx, rdx
  00394	d3 f8		 sar	 eax, cl
  00396	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0039b	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  003a2	48 63 44 24 34	 movsxd	 rax, DWORD PTR len$5469[rsp]
  003a7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  003ac	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  003b3	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  003b8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  003bd	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  003c3	eb 4d		 jmp	 SHORT $LN2@tr_flush_b
$LN3@tr_flush_b:
  003c5	8b 44 24 68	 mov	 eax, DWORD PTR last$[rsp]
  003c9	83 c0 04	 add	 eax, 4
  003cc	0f b7 c0	 movzx	 eax, ax
  003cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  003d4	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  003da	d3 e0		 shl	 eax, cl
  003dc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  003e1	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  003e8	0b c8		 or	 ecx, eax
  003ea	8b c1		 mov	 eax, ecx
  003ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  003f1	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  003f8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003fd	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00403	03 44 24 34	 add	 eax, DWORD PTR len$5469[rsp]
  00407	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0040c	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN2@tr_flush_b:

; 999  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
; 1000 :                        max_blindex+1);

  00412	8b 44 24 24	 mov	 eax, DWORD PTR max_blindex$[rsp]
  00416	ff c0		 inc	 eax
  00418	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0041d	8b 89 60 0b 00
	00		 mov	 ecx, DWORD PTR [rcx+2912]
  00423	ff c1		 inc	 ecx
  00425	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  0042a	8b 92 48 0b 00
	00		 mov	 edx, DWORD PTR [rdx+2888]
  00430	ff c2		 inc	 edx
  00432	44 8b c8	 mov	 r9d, eax
  00435	44 8b c1	 mov	 r8d, ecx
  00438	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0043d	e8 00 00 00 00	 call	 send_all_trees

; 1001 :         compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);

  00442	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00447	48 05 b0 09 00
	00		 add	 rax, 2480		; 000009b0H
  0044d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00452	48 81 c1 bc 00
	00 00		 add	 rcx, 188		; 000000bcH
  00459	4c 8b c0	 mov	 r8, rax
  0045c	48 8b d1	 mov	 rdx, rcx
  0045f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00464	e8 00 00 00 00	 call	 compress_block
$LN4@tr_flush_b:
$LN9@tr_flush_b:

; 1002 : #ifdef DEBUG
; 1003 :         s->compressed_len += 3 + s->opt_len;
; 1004 : #endif
; 1005 :     }
; 1006 :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 1007 :     /* The above check is made mod 2^32, for files larger than 512 MB
; 1008 :      * and uLong implemented on 32 bits.
; 1009 :      */
; 1010 :     init_block(s);

  00469	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0046e	e8 00 00 00 00	 call	 init_block

; 1011 : 
; 1012 :     if (last) {

  00473	83 7c 24 68 00	 cmp	 DWORD PTR last$[rsp], 0
  00478	74 0a		 je	 SHORT $LN1@tr_flush_b

; 1013 :         bi_windup(s);

  0047a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0047f	e8 00 00 00 00	 call	 bi_windup
$LN1@tr_flush_b:

; 1014 : #ifdef DEBUG
; 1015 :         s->compressed_len += 7;  /* align on byte boundary */
; 1016 : #endif
; 1017 :     }
; 1018 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1019 :            s->compressed_len-7*last));
; 1020 : }

  00484	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00488	c3		 ret	 0
_tr_flush_block ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_tree DD imagerel build_tree
	DD	imagerel build_tree+1294
	DD	imagerel $unwind$build_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_tree DD 010e01H
	DD	0e20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT build_tree
_TEXT	SEGMENT
elems$ = 32
n$ = 36
tree$ = 40
max_code$ = 48
node$ = 52
m$ = 56
stree$ = 64
tv80 = 72
tv134 = 76
tv128 = 80
tv182 = 84
tv189 = 88
tv226 = 92
tv248 = 96
s$ = 128
desc$ = 136
build_tree PROC						; COMDAT

; 626  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 627  :     ct_data *tree         = desc->dyn_tree;

  0000e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR desc$[rsp]
  00016	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00019	48 89 44 24 28	 mov	 QWORD PTR tree$[rsp], rax

; 628  :     const ct_data *stree  = desc->stat_desc->static_tree;

  0001e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR desc$[rsp]
  00026	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0002a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002d	48 89 44 24 40	 mov	 QWORD PTR stree$[rsp], rax

; 629  :     int elems             = desc->stat_desc->elems;

  00032	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR desc$[rsp]
  0003a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0003e	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00041	89 44 24 20	 mov	 DWORD PTR elems$[rsp], eax

; 630  :     int n, m;          /* iterate over heap elements */
; 631  :     int max_code = -1; /* largest code with non zero frequency */

  00045	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR max_code$[rsp], -1

; 632  :     int node;          /* new node being created */
; 633  : 
; 634  :     /* Construct the initial heap, with least frequent element in
; 635  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 636  :      * heap[0] is not used.
; 637  :      */
; 638  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  0004d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00055	c7 80 9c 14 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5276], 0
  0005f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00067	c7 80 a0 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [rax+5280], 573 ; 0000023dH

; 639  : 
; 640  :     for (n = 0; n < elems; n++) {

  00071	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00079	eb 0a		 jmp	 SHORT $LN14@build_tree
$LN13@build_tree:
  0007b	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  0007f	ff c0		 inc	 eax
  00081	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
$LN14@build_tree:
  00085	8b 44 24 20	 mov	 eax, DWORD PTR elems$[rsp]
  00089	39 44 24 24	 cmp	 DWORD PTR n$[rsp], eax
  0008d	0f 8d 85 00 00
	00		 jge	 $LN12@build_tree

; 641  :         if (tree[n].Freq != 0) {

  00093	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  00098	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  0009d	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  000a1	85 c0		 test	 eax, eax
  000a3	74 5d		 je	 SHORT $LN11@build_tree

; 642  :             s->heap[++(s->heap_len)] = max_code = n;

  000a5	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  000a9	89 44 24 30	 mov	 DWORD PTR max_code$[rsp], eax
  000ad	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000b5	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  000bb	ff c0		 inc	 eax
  000bd	89 44 24 48	 mov	 DWORD PTR tv80[rsp], eax
  000c1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000c9	8b 4c 24 48	 mov	 ecx, DWORD PTR tv80[rsp]
  000cd	89 88 9c 14 00
	00		 mov	 DWORD PTR [rax+5276], ecx
  000d3	48 63 44 24 48	 movsxd	 rax, DWORD PTR tv80[rsp]
  000d8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  000e0	8b 54 24 30	 mov	 edx, DWORD PTR max_code$[rsp]
  000e4	89 94 81 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rax*4+2984], edx

; 643  :             s->depth[n] = 0;

  000eb	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  000f0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  000f8	c6 84 01 a4 14
	00 00 00	 mov	 BYTE PTR [rcx+rax+5284], 0

; 644  :         } else {

  00100	eb 11		 jmp	 SHORT $LN10@build_tree
$LN11@build_tree:

; 645  :             tree[n].Len = 0;

  00102	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  00107	33 c9		 xor	 ecx, ecx
  00109	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  0010e	66 89 4c 82 02	 mov	 WORD PTR [rdx+rax*4+2], cx
$LN10@build_tree:

; 646  :         }
; 647  :     }

  00113	e9 63 ff ff ff	 jmp	 $LN13@build_tree
$LN12@build_tree:
$LN9@build_tree:

; 648  : 
; 649  :     /* The pkzip format requires that at least one distance code exists,
; 650  :      * and that at least one bit should be sent even if there is only one
; 651  :      * possible code. So to avoid special checks later on we force at least
; 652  :      * two codes of non zero frequency.
; 653  :      */
; 654  :     while (s->heap_len < 2) {

  00118	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00120	83 b8 9c 14 00
	00 02		 cmp	 DWORD PTR [rax+5276], 2
  00127	0f 8d eb 00 00
	00		 jge	 $LN8@build_tree

; 655  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  0012d	83 7c 24 30 02	 cmp	 DWORD PTR max_code$[rsp], 2
  00132	7d 14		 jge	 SHORT $LN17@build_tree
  00134	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  00138	ff c0		 inc	 eax
  0013a	89 44 24 30	 mov	 DWORD PTR max_code$[rsp], eax
  0013e	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  00142	89 44 24 4c	 mov	 DWORD PTR tv134[rsp], eax
  00146	eb 08		 jmp	 SHORT $LN18@build_tree
$LN17@build_tree:
  00148	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv134[rsp], 0
$LN18@build_tree:
  00150	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00158	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  0015e	ff c0		 inc	 eax
  00160	89 44 24 50	 mov	 DWORD PTR tv128[rsp], eax
  00164	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0016c	8b 4c 24 50	 mov	 ecx, DWORD PTR tv128[rsp]
  00170	89 88 9c 14 00
	00		 mov	 DWORD PTR [rax+5276], ecx
  00176	48 63 44 24 50	 movsxd	 rax, DWORD PTR tv128[rsp]
  0017b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00183	8b 54 24 4c	 mov	 edx, DWORD PTR tv134[rsp]
  00187	89 94 81 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rax*4+2984], edx
  0018e	8b 44 24 4c	 mov	 eax, DWORD PTR tv134[rsp]
  00192	89 44 24 34	 mov	 DWORD PTR node$[rsp], eax

; 656  :         tree[node].Freq = 1;

  00196	48 63 44 24 34	 movsxd	 rax, DWORD PTR node$[rsp]
  0019b	b9 01 00 00 00	 mov	 ecx, 1
  001a0	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  001a5	66 89 0c 82	 mov	 WORD PTR [rdx+rax*4], cx

; 657  :         s->depth[node] = 0;

  001a9	48 63 44 24 34	 movsxd	 rax, DWORD PTR node$[rsp]
  001ae	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  001b6	c6 84 01 a4 14
	00 00 00	 mov	 BYTE PTR [rcx+rax+5284], 0

; 658  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  001be	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001c6	8b 80 00 17 00
	00		 mov	 eax, DWORD PTR [rax+5888]
  001cc	ff c8		 dec	 eax
  001ce	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  001d6	89 81 00 17 00
	00		 mov	 DWORD PTR [rcx+5888], eax
  001dc	48 83 7c 24 40
	00		 cmp	 QWORD PTR stree$[rsp], 0
  001e2	74 2f		 je	 SHORT $LN7@build_tree
  001e4	48 63 44 24 34	 movsxd	 rax, DWORD PTR node$[rsp]
  001e9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR stree$[rsp]
  001ee	0f b7 44 81 02	 movzx	 eax, WORD PTR [rcx+rax*4+2]
  001f3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  001fb	8b 89 04 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5892]
  00201	2b c8		 sub	 ecx, eax
  00203	8b c1		 mov	 eax, ecx
  00205	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0020d	89 81 04 17 00
	00		 mov	 DWORD PTR [rcx+5892], eax
$LN7@build_tree:

; 659  :         /* node is 0 or 1 so it does not have extra bits */
; 660  :     }

  00213	e9 00 ff ff ff	 jmp	 $LN9@build_tree
$LN8@build_tree:

; 661  :     desc->max_code = max_code;

  00218	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR desc$[rsp]
  00220	8b 4c 24 30	 mov	 ecx, DWORD PTR max_code$[rsp]
  00224	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 662  : 
; 663  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 664  :      * establish sub-heaps of increasing lengths:
; 665  :      */
; 666  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  00227	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0022f	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  00235	99		 cdq
  00236	2b c2		 sub	 eax, edx
  00238	d1 f8		 sar	 eax, 1
  0023a	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
  0023e	eb 0a		 jmp	 SHORT $LN6@build_tree
$LN5@build_tree:
  00240	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  00244	ff c8		 dec	 eax
  00246	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
$LN6@build_tree:
  0024a	83 7c 24 24 01	 cmp	 DWORD PTR n$[rsp], 1
  0024f	7c 19		 jl	 SHORT $LN4@build_tree
  00251	44 8b 44 24 24	 mov	 r8d, DWORD PTR n$[rsp]
  00256	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  0025b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00263	e8 00 00 00 00	 call	 pqdownheap
  00268	eb d6		 jmp	 SHORT $LN5@build_tree
$LN4@build_tree:

; 667  : 
; 668  :     /* Construct the Huffman tree by repeatedly combining the least two
; 669  :      * frequent nodes.
; 670  :      */
; 671  :     node = elems;              /* next internal node of the tree */

  0026a	8b 44 24 20	 mov	 eax, DWORD PTR elems$[rsp]
  0026e	89 44 24 34	 mov	 DWORD PTR node$[rsp], eax
$LN3@build_tree:

; 672  :     do {
; 673  :         pqremove(s, tree, n);  /* n = node of least frequency */

  00272	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0027a	8b 80 ac 0b 00
	00		 mov	 eax, DWORD PTR [rax+2988]
  00280	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
  00284	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0028c	48 63 80 9c 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5276]
  00293	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0029b	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  002a3	8b 84 82 a8 0b
	00 00		 mov	 eax, DWORD PTR [rdx+rax*4+2984]
  002aa	89 81 ac 0b 00
	00		 mov	 DWORD PTR [rcx+2988], eax
  002b0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002b8	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  002be	ff c8		 dec	 eax
  002c0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  002c8	89 81 9c 14 00
	00		 mov	 DWORD PTR [rcx+5276], eax
  002ce	41 b8 01 00 00
	00		 mov	 r8d, 1
  002d4	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  002d9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  002e1	e8 00 00 00 00	 call	 pqdownheap

; 674  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */

  002e6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002ee	8b 80 ac 0b 00
	00		 mov	 eax, DWORD PTR [rax+2988]
  002f4	89 44 24 38	 mov	 DWORD PTR m$[rsp], eax

; 675  : 
; 676  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  002f8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00300	8b 80 a0 14 00
	00		 mov	 eax, DWORD PTR [rax+5280]
  00306	ff c8		 dec	 eax
  00308	89 44 24 54	 mov	 DWORD PTR tv182[rsp], eax
  0030c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00314	8b 4c 24 54	 mov	 ecx, DWORD PTR tv182[rsp]
  00318	89 88 a0 14 00
	00		 mov	 DWORD PTR [rax+5280], ecx
  0031e	48 63 44 24 54	 movsxd	 rax, DWORD PTR tv182[rsp]
  00323	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0032b	8b 54 24 24	 mov	 edx, DWORD PTR n$[rsp]
  0032f	89 94 81 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rax*4+2984], edx

; 677  :         s->heap[--(s->heap_max)] = m;

  00336	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0033e	8b 80 a0 14 00
	00		 mov	 eax, DWORD PTR [rax+5280]
  00344	ff c8		 dec	 eax
  00346	89 44 24 58	 mov	 DWORD PTR tv189[rsp], eax
  0034a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00352	8b 4c 24 58	 mov	 ecx, DWORD PTR tv189[rsp]
  00356	89 88 a0 14 00
	00		 mov	 DWORD PTR [rax+5280], ecx
  0035c	48 63 44 24 58	 movsxd	 rax, DWORD PTR tv189[rsp]
  00361	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00369	8b 54 24 38	 mov	 edx, DWORD PTR m$[rsp]
  0036d	89 94 81 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rax*4+2984], edx

; 678  : 
; 679  :         /* Create a new node father of n and m */
; 680  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  00374	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  00379	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  0037e	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  00382	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR m$[rsp]
  00387	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  0038c	0f b7 0c 8a	 movzx	 ecx, WORD PTR [rdx+rcx*4]
  00390	03 c1		 add	 eax, ecx
  00392	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR node$[rsp]
  00397	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  0039c	66 89 04 8a	 mov	 WORD PTR [rdx+rcx*4], ax

; 681  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 682  :                                 s->depth[n] : s->depth[m]) + 1);

  003a0	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  003a5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  003ad	0f b6 84 01 a4
	14 00 00	 movzx	 eax, BYTE PTR [rcx+rax+5284]
  003b5	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR m$[rsp]
  003ba	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  003c2	0f b6 8c 0a a4
	14 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+5284]
  003ca	3b c1		 cmp	 eax, ecx
  003cc	7c 1b		 jl	 SHORT $LN19@build_tree
  003ce	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  003d3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  003db	0f b6 84 01 a4
	14 00 00	 movzx	 eax, BYTE PTR [rcx+rax+5284]
  003e3	89 44 24 5c	 mov	 DWORD PTR tv226[rsp], eax
  003e7	eb 19		 jmp	 SHORT $LN20@build_tree
$LN19@build_tree:
  003e9	48 63 44 24 38	 movsxd	 rax, DWORD PTR m$[rsp]
  003ee	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  003f6	0f b6 84 01 a4
	14 00 00	 movzx	 eax, BYTE PTR [rcx+rax+5284]
  003fe	89 44 24 5c	 mov	 DWORD PTR tv226[rsp], eax
$LN20@build_tree:
  00402	8b 44 24 5c	 mov	 eax, DWORD PTR tv226[rsp]
  00406	ff c0		 inc	 eax
  00408	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR node$[rsp]
  0040d	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  00415	88 84 0a a4 14
	00 00		 mov	 BYTE PTR [rdx+rcx+5284], al

; 683  :         tree[n].Dad = tree[m].Dad = (ush)node;

  0041c	48 63 44 24 38	 movsxd	 rax, DWORD PTR m$[rsp]
  00421	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  00426	0f b7 54 24 34	 movzx	 edx, WORD PTR node$[rsp]
  0042b	66 89 54 81 02	 mov	 WORD PTR [rcx+rax*4+2], dx
  00430	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  00435	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  0043a	0f b7 54 24 34	 movzx	 edx, WORD PTR node$[rsp]
  0043f	66 89 54 81 02	 mov	 WORD PTR [rcx+rax*4+2], dx

; 684  : #ifdef DUMP_BL_TREE
; 685  :         if (tree == s->bl_tree) {
; 686  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 687  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 688  :         }
; 689  : #endif
; 690  :         /* and insert the new node in the heap */
; 691  :         s->heap[SMALLEST] = node++;

  00444	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0044c	8b 4c 24 34	 mov	 ecx, DWORD PTR node$[rsp]
  00450	89 88 ac 0b 00
	00		 mov	 DWORD PTR [rax+2988], ecx
  00456	8b 44 24 34	 mov	 eax, DWORD PTR node$[rsp]
  0045a	ff c0		 inc	 eax
  0045c	89 44 24 34	 mov	 DWORD PTR node$[rsp], eax

; 692  :         pqdownheap(s, tree, SMALLEST);

  00460	41 b8 01 00 00
	00		 mov	 r8d, 1
  00466	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  0046b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00473	e8 00 00 00 00	 call	 pqdownheap

; 693  : 
; 694  :     } while (s->heap_len >= 2);

  00478	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00480	83 b8 9c 14 00
	00 02		 cmp	 DWORD PTR [rax+5276], 2
  00487	0f 8d e5 fd ff
	ff		 jge	 $LN3@build_tree

; 695  : 
; 696  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  0048d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00495	8b 80 a0 14 00
	00		 mov	 eax, DWORD PTR [rax+5280]
  0049b	ff c8		 dec	 eax
  0049d	89 44 24 60	 mov	 DWORD PTR tv248[rsp], eax
  004a1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  004a9	8b 4c 24 60	 mov	 ecx, DWORD PTR tv248[rsp]
  004ad	89 88 a0 14 00
	00		 mov	 DWORD PTR [rax+5280], ecx
  004b3	48 63 44 24 60	 movsxd	 rax, DWORD PTR tv248[rsp]
  004b8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  004c0	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  004c8	8b 92 ac 0b 00
	00		 mov	 edx, DWORD PTR [rdx+2988]
  004ce	89 94 81 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rax*4+2984], edx

; 697  : 
; 698  :     /* At this point, the fields freq and dad are set. We can now
; 699  :      * generate the bit lengths.
; 700  :      */
; 701  :     gen_bitlen(s, (tree_desc *)desc);

  004d5	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR desc$[rsp]
  004dd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  004e5	e8 00 00 00 00	 call	 gen_bitlen

; 702  : 
; 703  :     /* The field len is now set, we can generate the bit codes */
; 704  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  004ea	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  004f2	48 05 88 0b 00
	00		 add	 rax, 2952		; 00000b88H
  004f8	4c 8b c0	 mov	 r8, rax
  004fb	8b 54 24 30	 mov	 edx, DWORD PTR max_code$[rsp]
  004ff	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  00504	e8 00 00 00 00	 call	 gen_codes

; 705  : }

  00509	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0050d	c3		 ret	 0
build_tree ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pqdownheap DD imagerel pqdownheap
	DD	imagerel pqdownheap+521
	DD	imagerel $unwind$pqdownheap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pqdownheap DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT pqdownheap
_TEXT	SEGMENT
v$ = 0
j$ = 4
s$ = 32
tree$ = 40
k$ = 48
pqdownheap PROC						; COMDAT

; 463  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 464  :     int v = s->heap[k];

  00013	48 63 44 24 30	 movsxd	 rax, DWORD PTR k$[rsp]
  00018	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0001d	8b 84 81 a8 0b
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2984]
  00024	89 04 24	 mov	 DWORD PTR v$[rsp], eax

; 465  :     int j = k << 1;  /* left son of k */

  00027	8b 44 24 30	 mov	 eax, DWORD PTR k$[rsp]
  0002b	d1 e0		 shl	 eax, 1
  0002d	89 44 24 04	 mov	 DWORD PTR j$[rsp], eax
$LN6@pqdownheap:

; 466  :     while (j <= s->heap_len) {

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00036	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  0003c	39 44 24 04	 cmp	 DWORD PTR j$[rsp], eax
  00040	0f 8f aa 01 00
	00		 jg	 $LN5@pqdownheap

; 467  :         /* Set j to the smallest of the two sons: */
; 468  :         if (j < s->heap_len &&
; 469  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {

  00046	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004b	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  00051	39 44 24 04	 cmp	 DWORD PTR j$[rsp], eax
  00055	0f 8d cd 00 00
	00		 jge	 $LN4@pqdownheap
  0005b	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  0005f	ff c0		 inc	 eax
  00061	48 98		 cdqe
  00063	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00068	48 63 84 81 a8
	0b 00 00	 movsxd	 rax, DWORD PTR [rcx+rax*4+2984]
  00070	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  00075	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  00079	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  0007e	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00083	48 63 8c 8a a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rdx+rcx*4+2984]
  0008b	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  00090	0f b7 0c 8a	 movzx	 ecx, WORD PTR [rdx+rcx*4]
  00094	3b c1		 cmp	 eax, ecx
  00096	0f 8c 82 00 00
	00		 jl	 $LN3@pqdownheap
  0009c	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  000a0	ff c0		 inc	 eax
  000a2	48 98		 cdqe
  000a4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000a9	48 63 84 81 a8
	0b 00 00	 movsxd	 rax, DWORD PTR [rcx+rax*4+2984]
  000b1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  000b6	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  000ba	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  000bf	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  000c4	48 63 8c 8a a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rdx+rcx*4+2984]
  000cc	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  000d1	0f b7 0c 8a	 movzx	 ecx, WORD PTR [rdx+rcx*4]
  000d5	3b c1		 cmp	 eax, ecx
  000d7	75 4f		 jne	 SHORT $LN4@pqdownheap
  000d9	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  000dd	ff c0		 inc	 eax
  000df	48 98		 cdqe
  000e1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000e6	48 63 84 81 a8
	0b 00 00	 movsxd	 rax, DWORD PTR [rcx+rax*4+2984]
  000ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000f3	0f b6 84 01 a4
	14 00 00	 movzx	 eax, BYTE PTR [rcx+rax+5284]
  000fb	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  00100	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00105	48 63 8c 8a a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rdx+rcx*4+2984]
  0010d	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  00112	0f b6 8c 0a a4
	14 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+5284]
  0011a	3b c1		 cmp	 eax, ecx
  0011c	7f 0a		 jg	 SHORT $LN4@pqdownheap
$LN3@pqdownheap:

; 470  :             j++;

  0011e	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  00122	ff c0		 inc	 eax
  00124	89 44 24 04	 mov	 DWORD PTR j$[rsp], eax
$LN4@pqdownheap:

; 471  :         }
; 472  :         /* Exit if v is smaller than both sons */
; 473  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  00128	48 63 04 24	 movsxd	 rax, DWORD PTR v$[rsp]
  0012c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  00131	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  00135	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  0013a	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0013f	48 63 8c 8a a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rdx+rcx*4+2984]
  00147	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  0014c	0f b7 0c 8a	 movzx	 ecx, WORD PTR [rdx+rcx*4]
  00150	3b c1		 cmp	 eax, ecx
  00152	7c 60		 jl	 SHORT $LN1@pqdownheap
  00154	48 63 04 24	 movsxd	 rax, DWORD PTR v$[rsp]
  00158	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  0015d	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  00161	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  00166	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0016b	48 63 8c 8a a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rdx+rcx*4+2984]
  00173	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  00178	0f b7 0c 8a	 movzx	 ecx, WORD PTR [rdx+rcx*4]
  0017c	3b c1		 cmp	 eax, ecx
  0017e	75 36		 jne	 SHORT $LN2@pqdownheap
  00180	48 63 04 24	 movsxd	 rax, DWORD PTR v$[rsp]
  00184	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00189	0f b6 84 01 a4
	14 00 00	 movzx	 eax, BYTE PTR [rcx+rax+5284]
  00191	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  00196	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0019b	48 63 8c 8a a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rdx+rcx*4+2984]
  001a3	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  001a8	0f b6 8c 0a a4
	14 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+5284]
  001b0	3b c1		 cmp	 eax, ecx
  001b2	7f 02		 jg	 SHORT $LN2@pqdownheap
$LN1@pqdownheap:
  001b4	eb 3a		 jmp	 SHORT $LN5@pqdownheap
$LN2@pqdownheap:

; 474  : 
; 475  :         /* Exchange v with the smallest son */
; 476  :         s->heap[k] = s->heap[j];  k = j;

  001b6	48 63 44 24 04	 movsxd	 rax, DWORD PTR j$[rsp]
  001bb	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR k$[rsp]
  001c0	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  001c5	4c 8b 44 24 20	 mov	 r8, QWORD PTR s$[rsp]
  001ca	41 8b 84 80 a8
	0b 00 00	 mov	 eax, DWORD PTR [r8+rax*4+2984]
  001d2	89 84 8a a8 0b
	00 00		 mov	 DWORD PTR [rdx+rcx*4+2984], eax
  001d9	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  001dd	89 44 24 30	 mov	 DWORD PTR k$[rsp], eax

; 477  : 
; 478  :         /* And continue down the tree, setting j to the left son of k */
; 479  :         j <<= 1;

  001e1	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  001e5	d1 e0		 shl	 eax, 1
  001e7	89 44 24 04	 mov	 DWORD PTR j$[rsp], eax

; 480  :     }

  001eb	e9 41 fe ff ff	 jmp	 $LN6@pqdownheap
$LN5@pqdownheap:

; 481  :     s->heap[k] = v;

  001f0	48 63 44 24 30	 movsxd	 rax, DWORD PTR k$[rsp]
  001f5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  001fa	8b 14 24	 mov	 edx, DWORD PTR v$[rsp]
  001fd	89 94 81 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rax*4+2984], edx

; 482  : }

  00204	48 83 c4 18	 add	 rsp, 24
  00208	c3		 ret	 0
pqdownheap ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_bitlen DD imagerel gen_bitlen
	DD	imagerel gen_bitlen+993
	DD	imagerel $unwind$gen_bitlen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_bitlen DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gen_bitlen
_TEXT	SEGMENT
h$ = 0
n$ = 4
extra$ = 8
overflow$ = 16
base$ = 20
f$ = 24
max_length$ = 28
bits$ = 32
xbits$ = 36
tree$ = 40
max_code$ = 48
m$ = 52
stree$ = 56
s$ = 80
desc$ = 88
gen_bitlen PROC						; COMDAT

; 497  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 498  :     ct_data *tree        = desc->dyn_tree;

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 44 24 28	 mov	 QWORD PTR tree$[rsp], rax

; 499  :     int max_code         = desc->max_code;

  0001b	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  00020	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00023	89 44 24 30	 mov	 DWORD PTR max_code$[rsp], eax

; 500  :     const ct_data *stree = desc->stat_desc->static_tree;

  00027	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0002c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00030	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00033	48 89 44 24 38	 mov	 QWORD PTR stree$[rsp], rax

; 501  :     const intf *extra    = desc->stat_desc->extra_bits;

  00038	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0003d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00041	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00045	48 89 44 24 08	 mov	 QWORD PTR extra$[rsp], rax

; 502  :     int base             = desc->stat_desc->extra_base;

  0004a	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0004f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00053	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00056	89 44 24 14	 mov	 DWORD PTR base$[rsp], eax

; 503  :     int max_length       = desc->stat_desc->max_length;

  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0005f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00063	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00066	89 44 24 1c	 mov	 DWORD PTR max_length$[rsp], eax

; 504  :     int h;              /* heap index */
; 505  :     int n, m;           /* iterate over the tree elements */
; 506  :     int bits;           /* bit length */
; 507  :     int xbits;          /* extra bits */
; 508  :     ush f;              /* frequency */
; 509  :     int overflow = 0;   /* number of elements with bit length too large */

  0006a	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR overflow$[rsp], 0

; 510  : 
; 511  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

  00072	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR bits$[rsp], 0
  0007a	eb 0a		 jmp	 SHORT $LN23@gen_bitlen
$LN22@gen_bitlen:
  0007c	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  00080	ff c0		 inc	 eax
  00082	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
$LN23@gen_bitlen:
  00086	83 7c 24 20 0f	 cmp	 DWORD PTR bits$[rsp], 15
  0008b	7f 16		 jg	 SHORT $LN21@gen_bitlen
  0008d	48 63 44 24 20	 movsxd	 rax, DWORD PTR bits$[rsp]
  00092	33 c9		 xor	 ecx, ecx
  00094	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00099	66 89 8c 42 88
	0b 00 00	 mov	 WORD PTR [rdx+rax*2+2952], cx
  000a1	eb d9		 jmp	 SHORT $LN22@gen_bitlen
$LN21@gen_bitlen:

; 512  : 
; 513  :     /* In a first pass, compute the optimal bit lengths (which may
; 514  :      * overflow in the case of the bit length tree).
; 515  :      */
; 516  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  000a3	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000a8	48 63 80 a0 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5280]
  000af	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000b4	48 63 84 81 a8
	0b 00 00	 movsxd	 rax, DWORD PTR [rcx+rax*4+2984]
  000bc	33 c9		 xor	 ecx, ecx
  000be	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  000c3	66 89 4c 82 02	 mov	 WORD PTR [rdx+rax*4+2], cx

; 517  : 
; 518  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  000c8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000cd	8b 80 a0 14 00
	00		 mov	 eax, DWORD PTR [rax+5280]
  000d3	ff c0		 inc	 eax
  000d5	89 04 24	 mov	 DWORD PTR h$[rsp], eax
  000d8	eb 08		 jmp	 SHORT $LN20@gen_bitlen
$LN19@gen_bitlen:
  000da	8b 04 24	 mov	 eax, DWORD PTR h$[rsp]
  000dd	ff c0		 inc	 eax
  000df	89 04 24	 mov	 DWORD PTR h$[rsp], eax
$LN20@gen_bitlen:
  000e2	81 3c 24 3d 02
	00 00		 cmp	 DWORD PTR h$[rsp], 573	; 0000023dH
  000e9	0f 8d 40 01 00
	00		 jge	 $LN18@gen_bitlen

; 519  :         n = s->heap[h];

  000ef	48 63 04 24	 movsxd	 rax, DWORD PTR h$[rsp]
  000f3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000f8	8b 84 81 a8 0b
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2984]
  000ff	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax

; 520  :         bits = tree[tree[n].Dad].Len + 1;

  00103	48 63 44 24 04	 movsxd	 rax, DWORD PTR n$[rsp]
  00108	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  0010d	0f b7 44 81 02	 movzx	 eax, WORD PTR [rcx+rax*4+2]
  00112	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  00117	0f b7 44 81 02	 movzx	 eax, WORD PTR [rcx+rax*4+2]
  0011c	ff c0		 inc	 eax
  0011e	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax

; 521  :         if (bits > max_length) bits = max_length, overflow++;

  00122	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  00126	39 44 24 20	 cmp	 DWORD PTR bits$[rsp], eax
  0012a	7e 12		 jle	 SHORT $LN17@gen_bitlen
  0012c	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  00130	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
  00134	8b 44 24 10	 mov	 eax, DWORD PTR overflow$[rsp]
  00138	ff c0		 inc	 eax
  0013a	89 44 24 10	 mov	 DWORD PTR overflow$[rsp], eax
$LN17@gen_bitlen:

; 522  :         tree[n].Len = (ush)bits;

  0013e	48 63 44 24 04	 movsxd	 rax, DWORD PTR n$[rsp]
  00143	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  00148	0f b7 54 24 20	 movzx	 edx, WORD PTR bits$[rsp]
  0014d	66 89 54 81 02	 mov	 WORD PTR [rcx+rax*4+2], dx

; 523  :         /* We overwrite tree[n].Dad which is no longer needed */
; 524  : 
; 525  :         if (n > max_code) continue; /* not a leaf node */

  00152	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  00156	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  0015a	7e 05		 jle	 SHORT $LN16@gen_bitlen
  0015c	e9 79 ff ff ff	 jmp	 $LN19@gen_bitlen
$LN16@gen_bitlen:

; 526  : 
; 527  :         s->bl_count[bits]++;

  00161	48 63 44 24 20	 movsxd	 rax, DWORD PTR bits$[rsp]
  00166	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0016b	0f b7 84 41 88
	0b 00 00	 movzx	 eax, WORD PTR [rcx+rax*2+2952]
  00173	66 ff c0	 inc	 ax
  00176	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  0017b	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00180	66 89 84 4a 88
	0b 00 00	 mov	 WORD PTR [rdx+rcx*2+2952], ax

; 528  :         xbits = 0;

  00188	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR xbits$[rsp], 0

; 529  :         if (n >= base) xbits = extra[n-base];

  00190	8b 44 24 14	 mov	 eax, DWORD PTR base$[rsp]
  00194	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  00198	7c 1a		 jl	 SHORT $LN15@gen_bitlen
  0019a	8b 44 24 14	 mov	 eax, DWORD PTR base$[rsp]
  0019e	8b 4c 24 04	 mov	 ecx, DWORD PTR n$[rsp]
  001a2	2b c8		 sub	 ecx, eax
  001a4	8b c1		 mov	 eax, ecx
  001a6	48 98		 cdqe
  001a8	48 8b 4c 24 08	 mov	 rcx, QWORD PTR extra$[rsp]
  001ad	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  001b0	89 44 24 24	 mov	 DWORD PTR xbits$[rsp], eax
$LN15@gen_bitlen:

; 530  :         f = tree[n].Freq;

  001b4	48 63 44 24 04	 movsxd	 rax, DWORD PTR n$[rsp]
  001b9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  001be	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  001c2	66 89 44 24 18	 mov	 WORD PTR f$[rsp], ax

; 531  :         s->opt_len += (ulg)f * (bits + xbits);

  001c7	0f b7 44 24 18	 movzx	 eax, WORD PTR f$[rsp]
  001cc	8b 4c 24 24	 mov	 ecx, DWORD PTR xbits$[rsp]
  001d0	8b 54 24 20	 mov	 edx, DWORD PTR bits$[rsp]
  001d4	03 d1		 add	 edx, ecx
  001d6	8b ca		 mov	 ecx, edx
  001d8	0f af c1	 imul	 eax, ecx
  001db	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  001e0	03 81 00 17 00
	00		 add	 eax, DWORD PTR [rcx+5888]
  001e6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  001eb	89 81 00 17 00
	00		 mov	 DWORD PTR [rcx+5888], eax

; 532  :         if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);

  001f1	48 83 7c 24 38
	00		 cmp	 QWORD PTR stree$[rsp], 0
  001f7	74 31		 je	 SHORT $LN14@gen_bitlen
  001f9	0f b7 44 24 18	 movzx	 eax, WORD PTR f$[rsp]
  001fe	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR n$[rsp]
  00203	48 8b 54 24 38	 mov	 rdx, QWORD PTR stree$[rsp]
  00208	0f b7 4c 8a 02	 movzx	 ecx, WORD PTR [rdx+rcx*4+2]
  0020d	03 4c 24 24	 add	 ecx, DWORD PTR xbits$[rsp]
  00211	0f af c1	 imul	 eax, ecx
  00214	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00219	03 81 04 17 00
	00		 add	 eax, DWORD PTR [rcx+5892]
  0021f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00224	89 81 04 17 00
	00		 mov	 DWORD PTR [rcx+5892], eax
$LN14@gen_bitlen:

; 533  :     }

  0022a	e9 ab fe ff ff	 jmp	 $LN19@gen_bitlen
$LN18@gen_bitlen:

; 534  :     if (overflow == 0) return;

  0022f	83 7c 24 10 00	 cmp	 DWORD PTR overflow$[rsp], 0
  00234	75 05		 jne	 SHORT $LN13@gen_bitlen
  00236	e9 a1 01 00 00	 jmp	 $LN24@gen_bitlen
$LN13@gen_bitlen:
$LN12@gen_bitlen:

; 535  : 
; 536  :     Trace((stderr,"\nbit length overflow\n"));
; 537  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 538  : 
; 539  :     /* Find the first bit length which could increase: */
; 540  :     do {
; 541  :         bits = max_length-1;

  0023b	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  0023f	ff c8		 dec	 eax
  00241	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
$LN9@gen_bitlen:

; 542  :         while (s->bl_count[bits] == 0) bits--;

  00245	48 63 44 24 20	 movsxd	 rax, DWORD PTR bits$[rsp]
  0024a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0024f	0f b7 84 41 88
	0b 00 00	 movzx	 eax, WORD PTR [rcx+rax*2+2952]
  00257	85 c0		 test	 eax, eax
  00259	75 0c		 jne	 SHORT $LN8@gen_bitlen
  0025b	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  0025f	ff c8		 dec	 eax
  00261	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
  00265	eb de		 jmp	 SHORT $LN9@gen_bitlen
$LN8@gen_bitlen:

; 543  :         s->bl_count[bits]--;      /* move one leaf down the tree */

  00267	48 63 44 24 20	 movsxd	 rax, DWORD PTR bits$[rsp]
  0026c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00271	0f b7 84 41 88
	0b 00 00	 movzx	 eax, WORD PTR [rcx+rax*2+2952]
  00279	66 ff c8	 dec	 ax
  0027c	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  00281	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00286	66 89 84 4a 88
	0b 00 00	 mov	 WORD PTR [rdx+rcx*2+2952], ax

; 544  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

  0028e	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  00292	ff c0		 inc	 eax
  00294	48 98		 cdqe
  00296	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0029b	0f b7 84 41 88
	0b 00 00	 movzx	 eax, WORD PTR [rcx+rax*2+2952]
  002a3	83 c0 02	 add	 eax, 2
  002a6	8b 4c 24 20	 mov	 ecx, DWORD PTR bits$[rsp]
  002aa	ff c1		 inc	 ecx
  002ac	48 63 c9	 movsxd	 rcx, ecx
  002af	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  002b4	66 89 84 4a 88
	0b 00 00	 mov	 WORD PTR [rdx+rcx*2+2952], ax

; 545  :         s->bl_count[max_length]--;

  002bc	48 63 44 24 1c	 movsxd	 rax, DWORD PTR max_length$[rsp]
  002c1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002c6	0f b7 84 41 88
	0b 00 00	 movzx	 eax, WORD PTR [rcx+rax*2+2952]
  002ce	66 ff c8	 dec	 ax
  002d1	48 63 4c 24 1c	 movsxd	 rcx, DWORD PTR max_length$[rsp]
  002d6	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  002db	66 89 84 4a 88
	0b 00 00	 mov	 WORD PTR [rdx+rcx*2+2952], ax

; 546  :         /* The brother of the overflow item also moves one step up,
; 547  :          * but this does not affect bl_count[max_length]
; 548  :          */
; 549  :         overflow -= 2;

  002e3	8b 44 24 10	 mov	 eax, DWORD PTR overflow$[rsp]
  002e7	83 e8 02	 sub	 eax, 2
  002ea	89 44 24 10	 mov	 DWORD PTR overflow$[rsp], eax

; 550  :     } while (overflow > 0);

  002ee	83 7c 24 10 00	 cmp	 DWORD PTR overflow$[rsp], 0
  002f3	0f 8f 42 ff ff
	ff		 jg	 $LN12@gen_bitlen

; 551  : 
; 552  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 553  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 554  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 555  :      * from 'ar' written by Haruhiko Okumura.)
; 556  :      */
; 557  :     for (bits = max_length; bits != 0; bits--) {

  002f9	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  002fd	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
  00301	eb 0a		 jmp	 SHORT $LN7@gen_bitlen
$LN6@gen_bitlen:
  00303	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  00307	ff c8		 dec	 eax
  00309	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
$LN7@gen_bitlen:
  0030d	83 7c 24 20 00	 cmp	 DWORD PTR bits$[rsp], 0
  00312	0f 84 c4 00 00
	00		 je	 $LN5@gen_bitlen

; 558  :         n = s->bl_count[bits];

  00318	48 63 44 24 20	 movsxd	 rax, DWORD PTR bits$[rsp]
  0031d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00322	0f b7 84 41 88
	0b 00 00	 movzx	 eax, WORD PTR [rcx+rax*2+2952]
  0032a	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax
$LN26@gen_bitlen:
$LN4@gen_bitlen:

; 559  :         while (n != 0) {

  0032e	83 7c 24 04 00	 cmp	 DWORD PTR n$[rsp], 0
  00333	0f 84 9e 00 00
	00		 je	 $LN3@gen_bitlen

; 560  :             m = s->heap[--h];

  00339	8b 04 24	 mov	 eax, DWORD PTR h$[rsp]
  0033c	ff c8		 dec	 eax
  0033e	89 04 24	 mov	 DWORD PTR h$[rsp], eax
  00341	48 63 04 24	 movsxd	 rax, DWORD PTR h$[rsp]
  00345	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0034a	8b 84 81 a8 0b
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2984]
  00351	89 44 24 34	 mov	 DWORD PTR m$[rsp], eax

; 561  :             if (m > max_code) continue;

  00355	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  00359	39 44 24 34	 cmp	 DWORD PTR m$[rsp], eax
  0035d	7e 02		 jle	 SHORT $LN2@gen_bitlen
  0035f	eb cd		 jmp	 SHORT $LN4@gen_bitlen
$LN2@gen_bitlen:

; 562  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  00361	48 63 44 24 34	 movsxd	 rax, DWORD PTR m$[rsp]
  00366	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  0036b	0f b7 44 81 02	 movzx	 eax, WORD PTR [rcx+rax*4+2]
  00370	3b 44 24 20	 cmp	 eax, DWORD PTR bits$[rsp]
  00374	74 52		 je	 SHORT $LN1@gen_bitlen

; 563  :                 Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 564  :                 s->opt_len += ((long)bits - (long)tree[m].Len)
; 565  :                               *(long)tree[m].Freq;

  00376	48 63 44 24 34	 movsxd	 rax, DWORD PTR m$[rsp]
  0037b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  00380	0f b7 44 81 02	 movzx	 eax, WORD PTR [rcx+rax*4+2]
  00385	8b 4c 24 20	 mov	 ecx, DWORD PTR bits$[rsp]
  00389	2b c8		 sub	 ecx, eax
  0038b	8b c1		 mov	 eax, ecx
  0038d	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR m$[rsp]
  00392	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  00397	0f b7 0c 8a	 movzx	 ecx, WORD PTR [rdx+rcx*4]
  0039b	0f af c1	 imul	 eax, ecx
  0039e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  003a3	03 81 00 17 00
	00		 add	 eax, DWORD PTR [rcx+5888]
  003a9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  003ae	89 81 00 17 00
	00		 mov	 DWORD PTR [rcx+5888], eax

; 566  :                 tree[m].Len = (ush)bits;

  003b4	48 63 44 24 34	 movsxd	 rax, DWORD PTR m$[rsp]
  003b9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  003be	0f b7 54 24 20	 movzx	 edx, WORD PTR bits$[rsp]
  003c3	66 89 54 81 02	 mov	 WORD PTR [rcx+rax*4+2], dx
$LN1@gen_bitlen:

; 567  :             }
; 568  :             n--;

  003c8	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  003cc	ff c8		 dec	 eax
  003ce	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax

; 569  :         }

  003d2	e9 57 ff ff ff	 jmp	 $LN26@gen_bitlen
$LN3@gen_bitlen:

; 570  :     }

  003d7	e9 27 ff ff ff	 jmp	 $LN6@gen_bitlen
$LN5@gen_bitlen:
$LN24@gen_bitlen:

; 571  : }

  003dc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  003e0	c3		 ret	 0
gen_bitlen ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_codes DD imagerel gen_codes
	DD	imagerel gen_codes+243
	DD	imagerel $unwind$gen_codes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_codes DD 011201H
	DD	0c212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gen_codes
_TEXT	SEGMENT
n$ = 32
code$ = 36
bits$ = 40
next_code$ = 48
len$5066 = 80
tv134 = 84
tv86 = 88
tree$ = 112
max_code$ = 120
bl_count$ = 128
gen_codes PROC						; COMDAT

; 585  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 586  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 587  :     ush code = 0;              /* running code value */

  00012	33 c0		 xor	 eax, eax
  00014	66 89 44 24 24	 mov	 WORD PTR code$[rsp], ax

; 588  :     int bits;                  /* bit index */
; 589  :     int n;                     /* code index */
; 590  : 
; 591  :     /* The distribution counts are first used to generate the code values
; 592  :      * without bit reversal.
; 593  :      */
; 594  :     for (bits = 1; bits <= MAX_BITS; bits++) {

  00019	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR bits$[rsp], 1
  00021	eb 0a		 jmp	 SHORT $LN7@gen_codes
$LN6@gen_codes:
  00023	8b 44 24 28	 mov	 eax, DWORD PTR bits$[rsp]
  00027	ff c0		 inc	 eax
  00029	89 44 24 28	 mov	 DWORD PTR bits$[rsp], eax
$LN7@gen_codes:
  0002d	83 7c 24 28 0f	 cmp	 DWORD PTR bits$[rsp], 15
  00032	7f 34		 jg	 SHORT $LN5@gen_codes

; 595  :         next_code[bits] = code = (code + bl_count[bits-1]) << 1;

  00034	0f b7 44 24 24	 movzx	 eax, WORD PTR code$[rsp]
  00039	8b 4c 24 28	 mov	 ecx, DWORD PTR bits$[rsp]
  0003d	ff c9		 dec	 ecx
  0003f	48 63 c9	 movsxd	 rcx, ecx
  00042	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR bl_count$[rsp]
  0004a	0f b7 0c 4a	 movzx	 ecx, WORD PTR [rdx+rcx*2]
  0004e	03 c1		 add	 eax, ecx
  00050	d1 e0		 shl	 eax, 1
  00052	66 89 44 24 24	 mov	 WORD PTR code$[rsp], ax
  00057	48 63 44 24 28	 movsxd	 rax, DWORD PTR bits$[rsp]
  0005c	0f b7 4c 24 24	 movzx	 ecx, WORD PTR code$[rsp]
  00061	66 89 4c 44 30	 mov	 WORD PTR next_code$[rsp+rax*2], cx

; 596  :     }

  00066	eb bb		 jmp	 SHORT $LN6@gen_codes
$LN5@gen_codes:

; 597  :     /* Check that the bit counts in bl_count are consistent. The last code
; 598  :      * must be all ones.
; 599  :      */
; 600  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 601  :             "inconsistent bit counts");
; 602  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 603  : 
; 604  :     for (n = 0;  n <= max_code; n++) {

  00068	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00070	eb 0a		 jmp	 SHORT $LN4@gen_codes
$LN3@gen_codes:
  00072	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00076	ff c0		 inc	 eax
  00078	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN4@gen_codes:
  0007c	8b 44 24 78	 mov	 eax, DWORD PTR max_code$[rsp]
  00080	39 44 24 20	 cmp	 DWORD PTR n$[rsp], eax
  00084	7f 68		 jg	 SHORT $LN2@gen_codes

; 605  :         int len = tree[n].Len;

  00086	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  0008b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tree$[rsp]
  00090	0f b7 44 81 02	 movzx	 eax, WORD PTR [rcx+rax*4+2]
  00095	89 44 24 50	 mov	 DWORD PTR len$5066[rsp], eax

; 606  :         if (len == 0) continue;

  00099	83 7c 24 50 00	 cmp	 DWORD PTR len$5066[rsp], 0
  0009e	75 02		 jne	 SHORT $LN1@gen_codes
  000a0	eb d0		 jmp	 SHORT $LN3@gen_codes
$LN1@gen_codes:

; 607  :         /* Now reverse the bits */
; 608  :         tree[n].Code = bi_reverse(next_code[len]++, len);

  000a2	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$5066[rsp]
  000a7	0f b7 44 44 30	 movzx	 eax, WORD PTR next_code$[rsp+rax*2]
  000ac	89 44 24 54	 mov	 DWORD PTR tv134[rsp], eax
  000b0	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$5066[rsp]
  000b5	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR len$5066[rsp]
  000ba	0f b7 4c 4c 30	 movzx	 ecx, WORD PTR next_code$[rsp+rcx*2]
  000bf	66 ff c1	 inc	 cx
  000c2	66 89 4c 44 30	 mov	 WORD PTR next_code$[rsp+rax*2], cx
  000c7	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  000cc	48 89 44 24 58	 mov	 QWORD PTR tv86[rsp], rax
  000d1	8b 54 24 50	 mov	 edx, DWORD PTR len$5066[rsp]
  000d5	8b 4c 24 54	 mov	 ecx, DWORD PTR tv134[rsp]
  000d9	e8 00 00 00 00	 call	 bi_reverse
  000de	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tree$[rsp]
  000e3	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv86[rsp]
  000e8	66 89 04 91	 mov	 WORD PTR [rcx+rdx*4], ax

; 609  : 
; 610  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 611  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 612  :     }

  000ec	eb 84		 jmp	 SHORT $LN3@gen_codes
$LN2@gen_codes:

; 613  : }

  000ee	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000f2	c3		 ret	 0
gen_codes ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_bl_tree DD imagerel build_bl_tree
	DD	imagerel build_bl_tree+213
	DD	imagerel $unwind$build_bl_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_bl_tree DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT build_bl_tree
_TEXT	SEGMENT
max_blindex$ = 32
s$ = 64
build_bl_tree PROC					; COMDAT

; 809  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 810  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 811  : 
; 812  :     /* Determine the bit length frequencies for literal and distance trees */
; 813  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0000e	48 05 bc 00 00
	00		 add	 rax, 188		; 000000bcH
  00014	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00019	44 8b 81 48 0b
	00 00		 mov	 r8d, DWORD PTR [rcx+2888]
  00020	48 8b d0	 mov	 rdx, rax
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00028	e8 00 00 00 00	 call	 scan_tree

; 814  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00032	48 05 b0 09 00
	00		 add	 rax, 2480		; 000009b0H
  00038	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0003d	44 8b 81 60 0b
	00 00		 mov	 r8d, DWORD PTR [rcx+2912]
  00044	48 8b d0	 mov	 rdx, rax
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0004c	e8 00 00 00 00	 call	 scan_tree

; 815  : 
; 816  :     /* Build the bit length tree: */
; 817  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  00051	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00056	48 05 70 0b 00
	00		 add	 rax, 2928		; 00000b70H
  0005c	48 8b d0	 mov	 rdx, rax
  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00064	e8 00 00 00 00	 call	 build_tree

; 818  :     /* opt_len now includes the length of the tree representations, except
; 819  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 820  :      */
; 821  : 
; 822  :     /* Determine the number of bit length codes to send. The pkzip format
; 823  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 824  :      * 3 but the actual value used is 4.)
; 825  :      */
; 826  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00069	c7 44 24 20 12
	00 00 00	 mov	 DWORD PTR max_blindex$[rsp], 18
  00071	eb 0a		 jmp	 SHORT $LN4@build_bl_t
$LN3@build_bl_t:
  00073	8b 44 24 20	 mov	 eax, DWORD PTR max_blindex$[rsp]
  00077	ff c8		 dec	 eax
  00079	89 44 24 20	 mov	 DWORD PTR max_blindex$[rsp], eax
$LN4@build_bl_t:
  0007d	83 7c 24 20 03	 cmp	 DWORD PTR max_blindex$[rsp], 3
  00082	7c 25		 jl	 SHORT $LN2@build_bl_t

; 827  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  00084	48 63 44 24 20	 movsxd	 rax, DWORD PTR max_blindex$[rsp]
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bl_order
  00090	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00094	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00099	0f b7 84 81 a6
	0a 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2726]
  000a1	85 c0		 test	 eax, eax
  000a3	74 02		 je	 SHORT $LN1@build_bl_t
  000a5	eb 02		 jmp	 SHORT $LN2@build_bl_t
$LN1@build_bl_t:

; 828  :     }

  000a7	eb ca		 jmp	 SHORT $LN3@build_bl_t
$LN2@build_bl_t:

; 829  :     /* Update opt_len to include the bit length tree and counts */
; 830  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  000a9	8b 44 24 20	 mov	 eax, DWORD PTR max_blindex$[rsp]
  000ad	ff c0		 inc	 eax
  000af	6b c0 03	 imul	 eax, 3
  000b2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  000b7	8b 89 00 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5888]
  000bd	8d 44 08 0e	 lea	 eax, DWORD PTR [rax+rcx+14]
  000c1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  000c6	89 81 00 17 00
	00		 mov	 DWORD PTR [rcx+5888], eax

; 831  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 832  :             s->opt_len, s->static_len));
; 833  : 
; 834  :     return max_blindex;

  000cc	8b 44 24 20	 mov	 eax, DWORD PTR max_blindex$[rsp]

; 835  : }

  000d0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d4	c3		 ret	 0
build_bl_tree ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$scan_tree DD imagerel scan_tree
	DD	imagerel scan_tree+501
	DD	imagerel $unwind$scan_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scan_tree DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT scan_tree
_TEXT	SEGMENT
count$ = 0
n$ = 4
curlen$ = 8
nextlen$ = 12
prevlen$ = 16
min_count$ = 20
max_count$ = 24
s$ = 48
tree$ = 56
max_code$ = 64
scan_tree PROC						; COMDAT

; 715  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 716  :     int n;                     /* iterates over all tree elements */
; 717  :     int prevlen = -1;          /* last emitted length */

  00013	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR prevlen$[rsp], -1

; 718  :     int curlen;                /* length of current code */
; 719  :     int nextlen = tree[0].Len; /* length of next code */

  0001b	48 8b 44 24 38	 mov	 rax, QWORD PTR tree$[rsp]
  00020	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00024	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 720  :     int count = 0;             /* repeat count of the current code */

  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0

; 721  :     int max_count = 7;         /* max repeat count */

  0002f	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7

; 722  :     int min_count = 4;         /* min repeat count */

  00037	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4

; 723  : 
; 724  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0003f	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  00044	75 10		 jne	 SHORT $LN17@scan_tree
  00046	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  0004e	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
$LN17@scan_tree:

; 725  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00056	8b 44 24 40	 mov	 eax, DWORD PTR max_code$[rsp]
  0005a	ff c0		 inc	 eax
  0005c	48 98		 cdqe
  0005e	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00063	48 8b 54 24 38	 mov	 rdx, QWORD PTR tree$[rsp]
  00068	66 89 4c 82 02	 mov	 WORD PTR [rdx+rax*4+2], cx

; 726  : 
; 727  :     for (n = 0; n <= max_code; n++) {

  0006d	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00075	eb 0a		 jmp	 SHORT $LN16@scan_tree
$LN15@scan_tree:
  00077	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  0007b	ff c0		 inc	 eax
  0007d	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax
$LN16@scan_tree:
  00081	8b 44 24 40	 mov	 eax, DWORD PTR max_code$[rsp]
  00085	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  00089	0f 8f 61 01 00
	00		 jg	 $LN14@scan_tree

; 728  :         curlen = nextlen; nextlen = tree[n+1].Len;

  0008f	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  00093	89 44 24 08	 mov	 DWORD PTR curlen$[rsp], eax
  00097	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  0009b	ff c0		 inc	 eax
  0009d	48 98		 cdqe
  0009f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tree$[rsp]
  000a4	0f b7 44 81 02	 movzx	 eax, WORD PTR [rcx+rax*4+2]
  000a9	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 729  :         if (++count < max_count && curlen == nextlen) {

  000ad	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  000b0	ff c0		 inc	 eax
  000b2	89 04 24	 mov	 DWORD PTR count$[rsp], eax
  000b5	8b 44 24 18	 mov	 eax, DWORD PTR max_count$[rsp]
  000b9	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000bc	7d 11		 jge	 SHORT $LN13@scan_tree
  000be	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  000c2	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  000c6	75 07		 jne	 SHORT $LN13@scan_tree

; 730  :             continue;

  000c8	eb ad		 jmp	 SHORT $LN15@scan_tree
  000ca	e9 c8 00 00 00	 jmp	 $LN12@scan_tree
$LN13@scan_tree:

; 731  :         } else if (count < min_count) {

  000cf	8b 44 24 14	 mov	 eax, DWORD PTR min_count$[rsp]
  000d3	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000d6	7d 2c		 jge	 SHORT $LN11@scan_tree

; 732  :             s->bl_tree[curlen].Freq += count;

  000d8	48 63 44 24 08	 movsxd	 rax, DWORD PTR curlen$[rsp]
  000dd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000e2	0f b7 84 81 a4
	0a 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2724]
  000ea	03 04 24	 add	 eax, DWORD PTR count$[rsp]
  000ed	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  000f2	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  000f7	66 89 84 8a a4
	0a 00 00	 mov	 WORD PTR [rdx+rcx*4+2724], ax
  000ff	e9 93 00 00 00	 jmp	 $LN10@scan_tree
$LN11@scan_tree:

; 733  :         } else if (curlen != 0) {

  00104	83 7c 24 08 00	 cmp	 DWORD PTR curlen$[rsp], 0
  00109	74 4e		 je	 SHORT $LN9@scan_tree

; 734  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  0010b	8b 44 24 10	 mov	 eax, DWORD PTR prevlen$[rsp]
  0010f	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  00113	74 27		 je	 SHORT $LN8@scan_tree
  00115	48 63 44 24 08	 movsxd	 rax, DWORD PTR curlen$[rsp]
  0011a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0011f	0f b7 84 81 a4
	0a 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2724]
  00127	66 ff c0	 inc	 ax
  0012a	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  0012f	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  00134	66 89 84 8a a4
	0a 00 00	 mov	 WORD PTR [rdx+rcx*4+2724], ax
$LN8@scan_tree:

; 735  :             s->bl_tree[REP_3_6].Freq++;

  0013c	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00141	0f b7 80 e4 0a
	00 00		 movzx	 eax, WORD PTR [rax+2788]
  00148	66 ff c0	 inc	 ax
  0014b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00150	66 89 81 e4 0a
	00 00		 mov	 WORD PTR [rcx+2788], ax
  00157	eb 3e		 jmp	 SHORT $LN7@scan_tree
$LN9@scan_tree:

; 736  :         } else if (count <= 10) {

  00159	83 3c 24 0a	 cmp	 DWORD PTR count$[rsp], 10
  0015d	7f 1d		 jg	 SHORT $LN6@scan_tree

; 737  :             s->bl_tree[REPZ_3_10].Freq++;

  0015f	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00164	0f b7 80 e8 0a
	00 00		 movzx	 eax, WORD PTR [rax+2792]
  0016b	66 ff c0	 inc	 ax
  0016e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00173	66 89 81 e8 0a
	00 00		 mov	 WORD PTR [rcx+2792], ax

; 738  :         } else {

  0017a	eb 1b		 jmp	 SHORT $LN5@scan_tree
$LN6@scan_tree:

; 739  :             s->bl_tree[REPZ_11_138].Freq++;

  0017c	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00181	0f b7 80 ec 0a
	00 00		 movzx	 eax, WORD PTR [rax+2796]
  00188	66 ff c0	 inc	 ax
  0018b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00190	66 89 81 ec 0a
	00 00		 mov	 WORD PTR [rcx+2796], ax
$LN5@scan_tree:
$LN7@scan_tree:
$LN10@scan_tree:
$LN12@scan_tree:

; 740  :         }
; 741  :         count = 0; prevlen = curlen;

  00197	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0
  0019e	8b 44 24 08	 mov	 eax, DWORD PTR curlen$[rsp]
  001a2	89 44 24 10	 mov	 DWORD PTR prevlen$[rsp], eax

; 742  :         if (nextlen == 0) {

  001a6	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  001ab	75 12		 jne	 SHORT $LN4@scan_tree

; 743  :             max_count = 138, min_count = 3;

  001ad	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  001b5	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
  001bd	eb 2c		 jmp	 SHORT $LN3@scan_tree
$LN4@scan_tree:

; 744  :         } else if (curlen == nextlen) {

  001bf	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  001c3	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  001c7	75 12		 jne	 SHORT $LN2@scan_tree

; 745  :             max_count = 6, min_count = 3;

  001c9	c7 44 24 18 06
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 6
  001d1	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3

; 746  :         } else {

  001d9	eb 10		 jmp	 SHORT $LN1@scan_tree
$LN2@scan_tree:

; 747  :             max_count = 7, min_count = 4;

  001db	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7
  001e3	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4
$LN1@scan_tree:
$LN3@scan_tree:

; 748  :         }
; 749  :     }

  001eb	e9 87 fe ff ff	 jmp	 $LN15@scan_tree
$LN14@scan_tree:

; 750  : }

  001f0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001f4	c3		 ret	 0
scan_tree ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_all_trees DD imagerel send_all_trees
	DD	imagerel send_all_trees+1590
	DD	imagerel $unwind$send_all_trees
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_all_trees DD 011701H
	DD	0a217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT send_all_trees
_TEXT	SEGMENT
rank$ = 32
len$5290 = 36
val$5294 = 40
len$5304 = 44
val$5308 = 48
len$5318 = 52
val$5322 = 56
len$5335 = 60
val$5339 = 64
s$ = 96
lcodes$ = 104
dcodes$ = 112
blcodes$ = 120
send_all_trees PROC					; COMDAT

; 845  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 846  :     int rank;                    /* index in bl_order */
; 847  : 
; 848  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 849  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 850  :             "too many codes");
; 851  :     Tracev((stderr, "\nbl counts: "));
; 852  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  00017	c7 44 24 24 05
	00 00 00	 mov	 DWORD PTR len$5290[rsp], 5
  0001f	b8 10 00 00 00	 mov	 eax, 16
  00024	2b 44 24 24	 sub	 eax, DWORD PTR len$5290[rsp]
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0002d	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  00033	0f 8e f4 00 00
	00		 jle	 $LN11@send_all_t
  00039	8b 44 24 68	 mov	 eax, DWORD PTR lcodes$[rsp]
  0003d	2d 01 01 00 00	 sub	 eax, 257		; 00000101H
  00042	89 44 24 28	 mov	 DWORD PTR val$5294[rsp], eax
  00046	0f b7 44 24 28	 movzx	 eax, WORD PTR val$5294[rsp]
  0004b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00050	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00056	d3 e0		 shl	 eax, cl
  00058	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0005d	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00064	0b c8		 or	 ecx, eax
  00066	8b c1		 mov	 eax, ecx
  00068	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0006d	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00074	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00079	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00080	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00085	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0008a	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0008d	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00092	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00096	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00099	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0009e	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  000a1	ff c0		 inc	 eax
  000a3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000a8	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  000ab	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000b0	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  000b7	c1 f8 08	 sar	 eax, 8
  000ba	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000bf	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  000c2	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  000c7	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  000cb	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  000ce	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000d3	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  000d6	ff c0		 inc	 eax
  000d8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000dd	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  000e0	0f b7 44 24 28	 movzx	 eax, WORD PTR val$5294[rsp]
  000e5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000ea	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  000f1	ba 10 00 00 00	 mov	 edx, 16
  000f6	48 2b d1	 sub	 rdx, rcx
  000f9	48 8b ca	 mov	 rcx, rdx
  000fc	d3 f8		 sar	 eax, cl
  000fe	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00103	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0010a	48 63 44 24 24	 movsxd	 rax, DWORD PTR len$5290[rsp]
  0010f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00114	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  0011b	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  00120	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00125	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  0012b	eb 4f		 jmp	 SHORT $LN10@send_all_t
$LN11@send_all_t:
  0012d	8b 44 24 68	 mov	 eax, DWORD PTR lcodes$[rsp]
  00131	2d 01 01 00 00	 sub	 eax, 257		; 00000101H
  00136	0f b7 c0	 movzx	 eax, ax
  00139	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0013e	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00144	d3 e0		 shl	 eax, cl
  00146	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0014b	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00152	0b c8		 or	 ecx, eax
  00154	8b c1		 mov	 eax, ecx
  00156	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0015b	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00162	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00167	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0016d	03 44 24 24	 add	 eax, DWORD PTR len$5290[rsp]
  00171	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00176	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN10@send_all_t:

; 853  :     send_bits(s, dcodes-1,   5);

  0017c	c7 44 24 2c 05
	00 00 00	 mov	 DWORD PTR len$5304[rsp], 5
  00184	b8 10 00 00 00	 mov	 eax, 16
  00189	2b 44 24 2c	 sub	 eax, DWORD PTR len$5304[rsp]
  0018d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00192	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  00198	0f 8e f1 00 00
	00		 jle	 $LN9@send_all_t
  0019e	8b 44 24 70	 mov	 eax, DWORD PTR dcodes$[rsp]
  001a2	ff c8		 dec	 eax
  001a4	89 44 24 30	 mov	 DWORD PTR val$5308[rsp], eax
  001a8	0f b7 44 24 30	 movzx	 eax, WORD PTR val$5308[rsp]
  001ad	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001b2	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  001b8	d3 e0		 shl	 eax, cl
  001ba	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001bf	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  001c6	0b c8		 or	 ecx, eax
  001c8	8b c1		 mov	 eax, ecx
  001ca	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001cf	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  001d6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001db	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  001e2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001e7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001ec	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  001ef	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  001f4	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  001f8	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  001fb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00200	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00203	ff c0		 inc	 eax
  00205	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0020a	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0020d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00212	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00219	c1 f8 08	 sar	 eax, 8
  0021c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00221	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00224	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00229	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0022d	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00230	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00235	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00238	ff c0		 inc	 eax
  0023a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0023f	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00242	0f b7 44 24 30	 movzx	 eax, WORD PTR val$5308[rsp]
  00247	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0024c	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00253	ba 10 00 00 00	 mov	 edx, 16
  00258	48 2b d1	 sub	 rdx, rcx
  0025b	48 8b ca	 mov	 rcx, rdx
  0025e	d3 f8		 sar	 eax, cl
  00260	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00265	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0026c	48 63 44 24 2c	 movsxd	 rax, DWORD PTR len$5304[rsp]
  00271	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00276	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  0027d	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  00282	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00287	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  0028d	eb 4c		 jmp	 SHORT $LN8@send_all_t
$LN9@send_all_t:
  0028f	8b 44 24 70	 mov	 eax, DWORD PTR dcodes$[rsp]
  00293	ff c8		 dec	 eax
  00295	0f b7 c0	 movzx	 eax, ax
  00298	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0029d	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  002a3	d3 e0		 shl	 eax, cl
  002a5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002aa	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  002b1	0b c8		 or	 ecx, eax
  002b3	8b c1		 mov	 eax, ecx
  002b5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002ba	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  002c1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002c6	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  002cc	03 44 24 2c	 add	 eax, DWORD PTR len$5304[rsp]
  002d0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002d5	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN8@send_all_t:

; 854  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  002db	c7 44 24 34 04
	00 00 00	 mov	 DWORD PTR len$5318[rsp], 4
  002e3	b8 10 00 00 00	 mov	 eax, 16
  002e8	2b 44 24 34	 sub	 eax, DWORD PTR len$5318[rsp]
  002ec	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002f1	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  002f7	0f 8e f2 00 00
	00		 jle	 $LN7@send_all_t
  002fd	8b 44 24 78	 mov	 eax, DWORD PTR blcodes$[rsp]
  00301	83 e8 04	 sub	 eax, 4
  00304	89 44 24 38	 mov	 DWORD PTR val$5322[rsp], eax
  00308	0f b7 44 24 38	 movzx	 eax, WORD PTR val$5322[rsp]
  0030d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00312	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00318	d3 e0		 shl	 eax, cl
  0031a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0031f	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00326	0b c8		 or	 ecx, eax
  00328	8b c1		 mov	 eax, ecx
  0032a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0032f	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00336	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0033b	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00342	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00347	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0034c	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0034f	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00354	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00358	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  0035b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00360	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00363	ff c0		 inc	 eax
  00365	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0036a	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0036d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00372	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00379	c1 f8 08	 sar	 eax, 8
  0037c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00381	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00384	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00389	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0038d	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00390	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00395	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00398	ff c0		 inc	 eax
  0039a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0039f	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  003a2	0f b7 44 24 38	 movzx	 eax, WORD PTR val$5322[rsp]
  003a7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003ac	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  003b3	ba 10 00 00 00	 mov	 edx, 16
  003b8	48 2b d1	 sub	 rdx, rcx
  003bb	48 8b ca	 mov	 rcx, rdx
  003be	d3 f8		 sar	 eax, cl
  003c0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003c5	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  003cc	48 63 44 24 34	 movsxd	 rax, DWORD PTR len$5318[rsp]
  003d1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003d6	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  003dd	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  003e2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003e7	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  003ed	eb 4d		 jmp	 SHORT $LN6@send_all_t
$LN7@send_all_t:
  003ef	8b 44 24 78	 mov	 eax, DWORD PTR blcodes$[rsp]
  003f3	83 e8 04	 sub	 eax, 4
  003f6	0f b7 c0	 movzx	 eax, ax
  003f9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003fe	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00404	d3 e0		 shl	 eax, cl
  00406	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0040b	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00412	0b c8		 or	 ecx, eax
  00414	8b c1		 mov	 eax, ecx
  00416	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0041b	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00422	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00427	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0042d	03 44 24 34	 add	 eax, DWORD PTR len$5318[rsp]
  00431	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00436	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN6@send_all_t:

; 855  :     for (rank = 0; rank < blcodes; rank++) {

  0043c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR rank$[rsp], 0
  00444	eb 0a		 jmp	 SHORT $LN5@send_all_t
$LN4@send_all_t:
  00446	8b 44 24 20	 mov	 eax, DWORD PTR rank$[rsp]
  0044a	ff c0		 inc	 eax
  0044c	89 44 24 20	 mov	 DWORD PTR rank$[rsp], eax
$LN5@send_all_t:
  00450	8b 44 24 78	 mov	 eax, DWORD PTR blcodes$[rsp]
  00454	39 44 24 20	 cmp	 DWORD PTR rank$[rsp], eax
  00458	0f 8d 8f 01 00
	00		 jge	 $LN3@send_all_t

; 856  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 857  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  0045e	c7 44 24 3c 03
	00 00 00	 mov	 DWORD PTR len$5335[rsp], 3
  00466	b8 10 00 00 00	 mov	 eax, 16
  0046b	2b 44 24 3c	 sub	 eax, DWORD PTR len$5335[rsp]
  0046f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00474	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  0047a	0f 8e 08 01 00
	00		 jle	 $LN2@send_all_t
  00480	48 63 44 24 20	 movsxd	 rax, DWORD PTR rank$[rsp]
  00485	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bl_order
  0048c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00490	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00495	0f b7 84 81 a6
	0a 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2726]
  0049d	89 44 24 40	 mov	 DWORD PTR val$5339[rsp], eax
  004a1	0f b7 44 24 40	 movzx	 eax, WORD PTR val$5339[rsp]
  004a6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004ab	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  004b1	d3 e0		 shl	 eax, cl
  004b3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004b8	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  004bf	0b c8		 or	 ecx, eax
  004c1	8b c1		 mov	 eax, ecx
  004c3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004c8	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  004cf	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004d4	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  004db	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004e0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004e5	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  004e8	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  004ed	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  004f1	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  004f4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004f9	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  004fc	ff c0		 inc	 eax
  004fe	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00503	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00506	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0050b	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00512	c1 f8 08	 sar	 eax, 8
  00515	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0051a	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0051d	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00522	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00526	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00529	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0052e	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00531	ff c0		 inc	 eax
  00533	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00538	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0053b	0f b7 44 24 40	 movzx	 eax, WORD PTR val$5339[rsp]
  00540	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00545	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  0054c	ba 10 00 00 00	 mov	 edx, 16
  00551	48 2b d1	 sub	 rdx, rcx
  00554	48 8b ca	 mov	 rcx, rdx
  00557	d3 f8		 sar	 eax, cl
  00559	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0055e	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00565	48 63 44 24 3c	 movsxd	 rax, DWORD PTR len$5335[rsp]
  0056a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0056f	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00576	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  0057b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00580	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00586	eb 60		 jmp	 SHORT $LN1@send_all_t
$LN2@send_all_t:
  00588	48 63 44 24 20	 movsxd	 rax, DWORD PTR rank$[rsp]
  0058d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bl_order
  00594	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00598	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0059d	0f b7 84 81 a6
	0a 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2726]
  005a5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  005aa	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  005b0	d3 e0		 shl	 eax, cl
  005b2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  005b7	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  005be	0b c8		 or	 ecx, eax
  005c0	8b c1		 mov	 eax, ecx
  005c2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  005c7	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  005ce	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005d3	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  005d9	03 44 24 3c	 add	 eax, DWORD PTR len$5335[rsp]
  005dd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  005e2	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN1@send_all_t:

; 858  :     }

  005e8	e9 59 fe ff ff	 jmp	 $LN4@send_all_t
$LN3@send_all_t:

; 859  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 860  : 
; 861  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  005ed	8b 44 24 68	 mov	 eax, DWORD PTR lcodes$[rsp]
  005f1	ff c8		 dec	 eax
  005f3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  005f8	48 81 c1 bc 00
	00 00		 add	 rcx, 188		; 000000bcH
  005ff	44 8b c0	 mov	 r8d, eax
  00602	48 8b d1	 mov	 rdx, rcx
  00605	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0060a	e8 00 00 00 00	 call	 send_tree

; 862  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 863  : 
; 864  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  0060f	8b 44 24 70	 mov	 eax, DWORD PTR dcodes$[rsp]
  00613	ff c8		 dec	 eax
  00615	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0061a	48 81 c1 b0 09
	00 00		 add	 rcx, 2480		; 000009b0H
  00621	44 8b c0	 mov	 r8d, eax
  00624	48 8b d1	 mov	 rdx, rcx
  00627	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0062c	e8 00 00 00 00	 call	 send_tree

; 865  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 866  : }

  00631	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00635	c3		 ret	 0
send_all_trees ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_tree DD imagerel send_tree
	DD	imagerel send_tree+3299
	DD	imagerel $unwind$send_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_tree DD 011301H
	DD	0c213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT send_tree
_TEXT	SEGMENT
count$ = 0
n$ = 4
curlen$ = 8
nextlen$ = 12
prevlen$ = 16
min_count$ = 20
max_count$ = 24
len$5150 = 28
val$5154 = 32
len$5167 = 36
val$5171 = 40
len$5181 = 44
val$5185 = 48
len$5195 = 52
val$5199 = 56
len$5211 = 60
val$5215 = 64
len$5225 = 68
val$5229 = 72
len$5240 = 76
val$5244 = 80
len$5254 = 84
val$5258 = 88
s$ = 112
tree$ = 120
max_code$ = 128
send_tree PROC						; COMDAT

; 760  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 761  :     int n;                     /* iterates over all tree elements */
; 762  :     int prevlen = -1;          /* last emitted length */

  00013	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR prevlen$[rsp], -1

; 763  :     int curlen;                /* length of current code */
; 764  :     int nextlen = tree[0].Len; /* length of next code */

  0001b	48 8b 44 24 78	 mov	 rax, QWORD PTR tree$[rsp]
  00020	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00024	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 765  :     int count = 0;             /* repeat count of the current code */

  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0

; 766  :     int max_count = 7;         /* max repeat count */

  0002f	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7

; 767  :     int min_count = 4;         /* min repeat count */

  00037	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4

; 768  : 
; 769  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 770  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0003f	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  00044	75 10		 jne	 SHORT $LN36@send_tree
  00046	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  0004e	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
$LN36@send_tree:

; 771  : 
; 772  :     for (n = 0; n <= max_code; n++) {

  00056	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  0005e	eb 0a		 jmp	 SHORT $LN35@send_tree
$LN34@send_tree:
  00060	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  00064	ff c0		 inc	 eax
  00066	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax
$LN35@send_tree:
  0006a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR max_code$[rsp]
  00071	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  00075	0f 8f 63 0c 00
	00		 jg	 $LN33@send_tree

; 773  :         curlen = nextlen; nextlen = tree[n+1].Len;

  0007b	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  0007f	89 44 24 08	 mov	 DWORD PTR curlen$[rsp], eax
  00083	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  00087	ff c0		 inc	 eax
  00089	48 98		 cdqe
  0008b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tree$[rsp]
  00090	0f b7 44 81 02	 movzx	 eax, WORD PTR [rcx+rax*4+2]
  00095	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 774  :         if (++count < max_count && curlen == nextlen) {

  00099	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  0009c	ff c0		 inc	 eax
  0009e	89 04 24	 mov	 DWORD PTR count$[rsp], eax
  000a1	8b 44 24 18	 mov	 eax, DWORD PTR max_count$[rsp]
  000a5	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000a8	7d 11		 jge	 SHORT $LN32@send_tree
  000aa	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  000ae	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  000b2	75 07		 jne	 SHORT $LN32@send_tree

; 775  :             continue;

  000b4	eb aa		 jmp	 SHORT $LN34@send_tree
  000b6	e9 ca 0b 00 00	 jmp	 $LN31@send_tree
$LN32@send_tree:

; 776  :         } else if (count < min_count) {

  000bb	8b 44 24 14	 mov	 eax, DWORD PTR min_count$[rsp]
  000bf	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000c2	0f 8d 99 01 00
	00		 jge	 $LN30@send_tree
$LN29@send_tree:

; 777  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  000c8	48 63 44 24 08	 movsxd	 rax, DWORD PTR curlen$[rsp]
  000cd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  000d2	0f b7 84 81 a6
	0a 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2726]
  000da	89 44 24 1c	 mov	 DWORD PTR len$5150[rsp], eax
  000de	b8 10 00 00 00	 mov	 eax, 16
  000e3	2b 44 24 1c	 sub	 eax, DWORD PTR len$5150[rsp]
  000e7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  000ec	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  000f2	0f 8e fd 00 00
	00		 jle	 $LN26@send_tree
  000f8	48 63 44 24 08	 movsxd	 rax, DWORD PTR curlen$[rsp]
  000fd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00102	0f b7 84 81 a4
	0a 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2724]
  0010a	89 44 24 20	 mov	 DWORD PTR val$5154[rsp], eax
  0010e	0f b7 44 24 20	 movzx	 eax, WORD PTR val$5154[rsp]
  00113	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00118	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  0011e	d3 e0		 shl	 eax, cl
  00120	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00125	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  0012c	0b c8		 or	 ecx, eax
  0012e	8b c1		 mov	 eax, ecx
  00130	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00135	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0013c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00141	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00148	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0014d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00152	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00155	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  0015a	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0015e	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00161	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00166	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00169	ff c0		 inc	 eax
  0016b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00170	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00173	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00178	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  0017f	c1 f8 08	 sar	 eax, 8
  00182	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00187	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0018a	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  0018f	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00193	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00196	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0019b	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0019e	ff c0		 inc	 eax
  001a0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  001a5	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  001a8	0f b7 44 24 20	 movzx	 eax, WORD PTR val$5154[rsp]
  001ad	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  001b2	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  001b9	ba 10 00 00 00	 mov	 edx, 16
  001be	48 2b d1	 sub	 rdx, rcx
  001c1	48 8b ca	 mov	 rcx, rdx
  001c4	d3 f8		 sar	 eax, cl
  001c6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  001cb	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  001d2	48 63 44 24 1c	 movsxd	 rax, DWORD PTR len$5150[rsp]
  001d7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  001dc	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  001e3	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  001e8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  001ed	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  001f3	eb 55		 jmp	 SHORT $LN25@send_tree
$LN26@send_tree:
  001f5	48 63 44 24 08	 movsxd	 rax, DWORD PTR curlen$[rsp]
  001fa	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  001ff	0f b7 84 81 a4
	0a 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2724]
  00207	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0020c	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00212	d3 e0		 shl	 eax, cl
  00214	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00219	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00220	0b c8		 or	 ecx, eax
  00222	8b c1		 mov	 eax, ecx
  00224	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00229	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00230	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00235	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0023b	03 44 24 1c	 add	 eax, DWORD PTR len$5150[rsp]
  0023f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00244	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN25@send_tree:
  0024a	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  0024d	ff c8		 dec	 eax
  0024f	89 04 24	 mov	 DWORD PTR count$[rsp], eax
  00252	83 3c 24 00	 cmp	 DWORD PTR count$[rsp], 0
  00256	0f 85 6c fe ff
	ff		 jne	 $LN29@send_tree

; 778  : 
; 779  :         } else if (curlen != 0) {

  0025c	e9 24 0a 00 00	 jmp	 $LN24@send_tree
$LN30@send_tree:
  00261	83 7c 24 08 00	 cmp	 DWORD PTR curlen$[rsp], 0
  00266	0f 84 6c 04 00
	00		 je	 $LN23@send_tree

; 780  :             if (curlen != prevlen) {

  0026c	8b 44 24 10	 mov	 eax, DWORD PTR prevlen$[rsp]
  00270	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  00274	0f 84 8a 01 00
	00		 je	 $LN22@send_tree

; 781  :                 send_code(s, curlen, s->bl_tree); count--;

  0027a	48 63 44 24 08	 movsxd	 rax, DWORD PTR curlen$[rsp]
  0027f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00284	0f b7 84 81 a6
	0a 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2726]
  0028c	89 44 24 24	 mov	 DWORD PTR len$5167[rsp], eax
  00290	b8 10 00 00 00	 mov	 eax, 16
  00295	2b 44 24 24	 sub	 eax, DWORD PTR len$5167[rsp]
  00299	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0029e	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  002a4	0f 8e fd 00 00
	00		 jle	 $LN21@send_tree
  002aa	48 63 44 24 08	 movsxd	 rax, DWORD PTR curlen$[rsp]
  002af	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  002b4	0f b7 84 81 a4
	0a 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2724]
  002bc	89 44 24 28	 mov	 DWORD PTR val$5171[rsp], eax
  002c0	0f b7 44 24 28	 movzx	 eax, WORD PTR val$5171[rsp]
  002c5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  002ca	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  002d0	d3 e0		 shl	 eax, cl
  002d2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  002d7	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  002de	0b c8		 or	 ecx, eax
  002e0	8b c1		 mov	 eax, ecx
  002e2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  002e7	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  002ee	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  002f3	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  002fa	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002ff	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00304	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00307	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  0030c	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00310	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00313	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00318	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0031b	ff c0		 inc	 eax
  0031d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00322	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00325	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0032a	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00331	c1 f8 08	 sar	 eax, 8
  00334	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00339	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0033c	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  00341	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00345	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00348	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0034d	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00350	ff c0		 inc	 eax
  00352	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00357	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0035a	0f b7 44 24 28	 movzx	 eax, WORD PTR val$5171[rsp]
  0035f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00364	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  0036b	ba 10 00 00 00	 mov	 edx, 16
  00370	48 2b d1	 sub	 rdx, rcx
  00373	48 8b ca	 mov	 rcx, rdx
  00376	d3 f8		 sar	 eax, cl
  00378	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0037d	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00384	48 63 44 24 24	 movsxd	 rax, DWORD PTR len$5167[rsp]
  00389	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0038e	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00395	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  0039a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0039f	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  003a5	eb 55		 jmp	 SHORT $LN20@send_tree
$LN21@send_tree:
  003a7	48 63 44 24 08	 movsxd	 rax, DWORD PTR curlen$[rsp]
  003ac	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  003b1	0f b7 84 81 a4
	0a 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2724]
  003b9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  003be	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  003c4	d3 e0		 shl	 eax, cl
  003c6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  003cb	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  003d2	0b c8		 or	 ecx, eax
  003d4	8b c1		 mov	 eax, ecx
  003d6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  003db	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  003e2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003e7	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  003ed	03 44 24 24	 add	 eax, DWORD PTR len$5167[rsp]
  003f1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  003f6	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN20@send_tree:
  003fc	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  003ff	ff c8		 dec	 eax
  00401	89 04 24	 mov	 DWORD PTR count$[rsp], eax
$LN22@send_tree:

; 782  :             }
; 783  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 784  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  00404	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00409	0f b7 80 e6 0a
	00 00		 movzx	 eax, WORD PTR [rax+2790]
  00410	89 44 24 2c	 mov	 DWORD PTR len$5181[rsp], eax
  00414	b8 10 00 00 00	 mov	 eax, 16
  00419	2b 44 24 2c	 sub	 eax, DWORD PTR len$5181[rsp]
  0041d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00422	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  00428	0f 8e f7 00 00
	00		 jle	 $LN19@send_tree
  0042e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00433	0f b7 80 e4 0a
	00 00		 movzx	 eax, WORD PTR [rax+2788]
  0043a	89 44 24 30	 mov	 DWORD PTR val$5185[rsp], eax
  0043e	0f b7 44 24 30	 movzx	 eax, WORD PTR val$5185[rsp]
  00443	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00448	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  0044e	d3 e0		 shl	 eax, cl
  00450	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00455	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  0045c	0b c8		 or	 ecx, eax
  0045e	8b c1		 mov	 eax, ecx
  00460	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00465	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0046c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00471	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00478	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0047d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00482	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00485	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  0048a	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0048e	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00491	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00496	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00499	ff c0		 inc	 eax
  0049b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  004a0	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  004a3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004a8	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  004af	c1 f8 08	 sar	 eax, 8
  004b2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  004b7	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  004ba	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  004bf	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  004c3	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  004c6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004cb	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  004ce	ff c0		 inc	 eax
  004d0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  004d5	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  004d8	0f b7 44 24 30	 movzx	 eax, WORD PTR val$5185[rsp]
  004dd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  004e2	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  004e9	ba 10 00 00 00	 mov	 edx, 16
  004ee	48 2b d1	 sub	 rdx, rcx
  004f1	48 8b ca	 mov	 rcx, rdx
  004f4	d3 f8		 sar	 eax, cl
  004f6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  004fb	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00502	48 63 44 24 2c	 movsxd	 rax, DWORD PTR len$5181[rsp]
  00507	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0050c	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00513	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  00518	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0051d	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00523	eb 4f		 jmp	 SHORT $LN18@send_tree
$LN19@send_tree:
  00525	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0052a	0f b7 80 e4 0a
	00 00		 movzx	 eax, WORD PTR [rax+2788]
  00531	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00536	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  0053c	d3 e0		 shl	 eax, cl
  0053e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00543	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  0054a	0b c8		 or	 ecx, eax
  0054c	8b c1		 mov	 eax, ecx
  0054e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00553	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0055a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0055f	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00565	03 44 24 2c	 add	 eax, DWORD PTR len$5181[rsp]
  00569	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0056e	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN18@send_tree:
  00574	c7 44 24 34 02
	00 00 00	 mov	 DWORD PTR len$5195[rsp], 2
  0057c	b8 10 00 00 00	 mov	 eax, 16
  00581	2b 44 24 34	 sub	 eax, DWORD PTR len$5195[rsp]
  00585	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0058a	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  00590	0f 8e f1 00 00
	00		 jle	 $LN17@send_tree
  00596	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00599	83 e8 03	 sub	 eax, 3
  0059c	89 44 24 38	 mov	 DWORD PTR val$5199[rsp], eax
  005a0	0f b7 44 24 38	 movzx	 eax, WORD PTR val$5199[rsp]
  005a5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  005aa	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  005b0	d3 e0		 shl	 eax, cl
  005b2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  005b7	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  005be	0b c8		 or	 ecx, eax
  005c0	8b c1		 mov	 eax, ecx
  005c2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  005c7	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  005ce	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005d3	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  005da	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005df	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  005e4	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  005e7	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  005ec	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  005f0	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  005f3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005f8	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  005fb	ff c0		 inc	 eax
  005fd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00602	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00605	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0060a	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00611	c1 f8 08	 sar	 eax, 8
  00614	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00619	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0061c	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  00621	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00625	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00628	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0062d	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00630	ff c0		 inc	 eax
  00632	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00637	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0063a	0f b7 44 24 38	 movzx	 eax, WORD PTR val$5199[rsp]
  0063f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00644	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  0064b	ba 10 00 00 00	 mov	 edx, 16
  00650	48 2b d1	 sub	 rdx, rcx
  00653	48 8b ca	 mov	 rcx, rdx
  00656	d3 f8		 sar	 eax, cl
  00658	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0065d	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00664	48 63 44 24 34	 movsxd	 rax, DWORD PTR len$5195[rsp]
  00669	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0066e	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00675	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  0067a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0067f	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00685	eb 4c		 jmp	 SHORT $LN16@send_tree
$LN17@send_tree:
  00687	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  0068a	83 e8 03	 sub	 eax, 3
  0068d	0f b7 c0	 movzx	 eax, ax
  00690	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00695	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  0069b	d3 e0		 shl	 eax, cl
  0069d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  006a2	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  006a9	0b c8		 or	 ecx, eax
  006ab	8b c1		 mov	 eax, ecx
  006ad	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  006b2	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  006b9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006be	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  006c4	03 44 24 34	 add	 eax, DWORD PTR len$5195[rsp]
  006c8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  006cd	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN16@send_tree:
  006d3	e9 ad 05 00 00	 jmp	 $LN15@send_tree
$LN23@send_tree:

; 785  : 
; 786  :         } else if (count <= 10) {

  006d8	83 3c 24 0a	 cmp	 DWORD PTR count$[rsp], 10
  006dc	0f 8f d4 02 00
	00		 jg	 $LN14@send_tree

; 787  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  006e2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006e7	0f b7 80 ea 0a
	00 00		 movzx	 eax, WORD PTR [rax+2794]
  006ee	89 44 24 3c	 mov	 DWORD PTR len$5211[rsp], eax
  006f2	b8 10 00 00 00	 mov	 eax, 16
  006f7	2b 44 24 3c	 sub	 eax, DWORD PTR len$5211[rsp]
  006fb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00700	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  00706	0f 8e f7 00 00
	00		 jle	 $LN13@send_tree
  0070c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00711	0f b7 80 e8 0a
	00 00		 movzx	 eax, WORD PTR [rax+2792]
  00718	89 44 24 40	 mov	 DWORD PTR val$5215[rsp], eax
  0071c	0f b7 44 24 40	 movzx	 eax, WORD PTR val$5215[rsp]
  00721	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00726	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  0072c	d3 e0		 shl	 eax, cl
  0072e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00733	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  0073a	0b c8		 or	 ecx, eax
  0073c	8b c1		 mov	 eax, ecx
  0073e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00743	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0074a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0074f	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00756	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0075b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00760	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00763	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  00768	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0076c	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  0076f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00774	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00777	ff c0		 inc	 eax
  00779	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0077e	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00781	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00786	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  0078d	c1 f8 08	 sar	 eax, 8
  00790	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00795	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00798	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  0079d	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  007a1	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  007a4	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007a9	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  007ac	ff c0		 inc	 eax
  007ae	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  007b3	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  007b6	0f b7 44 24 40	 movzx	 eax, WORD PTR val$5215[rsp]
  007bb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  007c0	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  007c7	ba 10 00 00 00	 mov	 edx, 16
  007cc	48 2b d1	 sub	 rdx, rcx
  007cf	48 8b ca	 mov	 rcx, rdx
  007d2	d3 f8		 sar	 eax, cl
  007d4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  007d9	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  007e0	48 63 44 24 3c	 movsxd	 rax, DWORD PTR len$5211[rsp]
  007e5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  007ea	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  007f1	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  007f6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  007fb	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00801	eb 4f		 jmp	 SHORT $LN12@send_tree
$LN13@send_tree:
  00803	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00808	0f b7 80 e8 0a
	00 00		 movzx	 eax, WORD PTR [rax+2792]
  0080f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00814	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  0081a	d3 e0		 shl	 eax, cl
  0081c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00821	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00828	0b c8		 or	 ecx, eax
  0082a	8b c1		 mov	 eax, ecx
  0082c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00831	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00838	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0083d	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00843	03 44 24 3c	 add	 eax, DWORD PTR len$5211[rsp]
  00847	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0084c	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN12@send_tree:
  00852	c7 44 24 44 03
	00 00 00	 mov	 DWORD PTR len$5225[rsp], 3
  0085a	b8 10 00 00 00	 mov	 eax, 16
  0085f	2b 44 24 44	 sub	 eax, DWORD PTR len$5225[rsp]
  00863	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00868	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  0086e	0f 8e f1 00 00
	00		 jle	 $LN11@send_tree
  00874	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00877	83 e8 03	 sub	 eax, 3
  0087a	89 44 24 48	 mov	 DWORD PTR val$5229[rsp], eax
  0087e	0f b7 44 24 48	 movzx	 eax, WORD PTR val$5229[rsp]
  00883	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00888	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  0088e	d3 e0		 shl	 eax, cl
  00890	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00895	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  0089c	0b c8		 or	 ecx, eax
  0089e	8b c1		 mov	 eax, ecx
  008a0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  008a5	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  008ac	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008b1	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  008b8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  008bd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  008c2	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  008c5	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  008ca	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  008ce	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  008d1	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008d6	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  008d9	ff c0		 inc	 eax
  008db	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  008e0	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  008e3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008e8	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  008ef	c1 f8 08	 sar	 eax, 8
  008f2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  008f7	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  008fa	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  008ff	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00903	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00906	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0090b	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0090e	ff c0		 inc	 eax
  00910	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00915	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00918	0f b7 44 24 48	 movzx	 eax, WORD PTR val$5229[rsp]
  0091d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00922	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00929	ba 10 00 00 00	 mov	 edx, 16
  0092e	48 2b d1	 sub	 rdx, rcx
  00931	48 8b ca	 mov	 rcx, rdx
  00934	d3 f8		 sar	 eax, cl
  00936	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0093b	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00942	48 63 44 24 44	 movsxd	 rax, DWORD PTR len$5225[rsp]
  00947	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0094c	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00953	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  00958	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  0095d	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00963	eb 4c		 jmp	 SHORT $LN10@send_tree
$LN11@send_tree:
  00965	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00968	83 e8 03	 sub	 eax, 3
  0096b	0f b7 c0	 movzx	 eax, ax
  0096e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00973	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00979	d3 e0		 shl	 eax, cl
  0097b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00980	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00987	0b c8		 or	 ecx, eax
  00989	8b c1		 mov	 eax, ecx
  0098b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00990	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00997	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0099c	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  009a2	03 44 24 44	 add	 eax, DWORD PTR len$5225[rsp]
  009a6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  009ab	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN10@send_tree:

; 788  : 
; 789  :         } else {

  009b1	e9 cf 02 00 00	 jmp	 $LN9@send_tree
$LN14@send_tree:

; 790  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  009b6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009bb	0f b7 80 ee 0a
	00 00		 movzx	 eax, WORD PTR [rax+2798]
  009c2	89 44 24 4c	 mov	 DWORD PTR len$5240[rsp], eax
  009c6	b8 10 00 00 00	 mov	 eax, 16
  009cb	2b 44 24 4c	 sub	 eax, DWORD PTR len$5240[rsp]
  009cf	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  009d4	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  009da	0f 8e f7 00 00
	00		 jle	 $LN8@send_tree
  009e0	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009e5	0f b7 80 ec 0a
	00 00		 movzx	 eax, WORD PTR [rax+2796]
  009ec	89 44 24 50	 mov	 DWORD PTR val$5244[rsp], eax
  009f0	0f b7 44 24 50	 movzx	 eax, WORD PTR val$5244[rsp]
  009f5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  009fa	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00a00	d3 e0		 shl	 eax, cl
  00a02	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00a07	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00a0e	0b c8		 or	 ecx, eax
  00a10	8b c1		 mov	 eax, ecx
  00a12	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00a17	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00a1e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a23	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00a2a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a2f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00a34	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00a37	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  00a3c	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00a40	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00a43	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a48	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00a4b	ff c0		 inc	 eax
  00a4d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00a52	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00a55	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a5a	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00a61	c1 f8 08	 sar	 eax, 8
  00a64	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00a69	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00a6c	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  00a71	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00a75	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00a78	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a7d	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00a80	ff c0		 inc	 eax
  00a82	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00a87	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00a8a	0f b7 44 24 50	 movzx	 eax, WORD PTR val$5244[rsp]
  00a8f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00a94	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00a9b	ba 10 00 00 00	 mov	 edx, 16
  00aa0	48 2b d1	 sub	 rdx, rcx
  00aa3	48 8b ca	 mov	 rcx, rdx
  00aa6	d3 f8		 sar	 eax, cl
  00aa8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00aad	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00ab4	48 63 44 24 4c	 movsxd	 rax, DWORD PTR len$5240[rsp]
  00ab9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00abe	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00ac5	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  00aca	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00acf	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00ad5	eb 4f		 jmp	 SHORT $LN7@send_tree
$LN8@send_tree:
  00ad7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00adc	0f b7 80 ec 0a
	00 00		 movzx	 eax, WORD PTR [rax+2796]
  00ae3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00ae8	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00aee	d3 e0		 shl	 eax, cl
  00af0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00af5	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00afc	0b c8		 or	 ecx, eax
  00afe	8b c1		 mov	 eax, ecx
  00b00	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00b05	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00b0c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b11	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00b17	03 44 24 4c	 add	 eax, DWORD PTR len$5240[rsp]
  00b1b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00b20	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN7@send_tree:
  00b26	c7 44 24 54 07
	00 00 00	 mov	 DWORD PTR len$5254[rsp], 7
  00b2e	b8 10 00 00 00	 mov	 eax, 16
  00b33	2b 44 24 54	 sub	 eax, DWORD PTR len$5254[rsp]
  00b37	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00b3c	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  00b42	0f 8e f1 00 00
	00		 jle	 $LN6@send_tree
  00b48	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00b4b	83 e8 0b	 sub	 eax, 11
  00b4e	89 44 24 58	 mov	 DWORD PTR val$5258[rsp], eax
  00b52	0f b7 44 24 58	 movzx	 eax, WORD PTR val$5258[rsp]
  00b57	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00b5c	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00b62	d3 e0		 shl	 eax, cl
  00b64	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00b69	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00b70	0b c8		 or	 ecx, eax
  00b72	8b c1		 mov	 eax, ecx
  00b74	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00b79	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00b80	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b85	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00b8c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b91	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00b96	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00b99	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  00b9e	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00ba2	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00ba5	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00baa	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00bad	ff c0		 inc	 eax
  00baf	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00bb4	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00bb7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bbc	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00bc3	c1 f8 08	 sar	 eax, 8
  00bc6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00bcb	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00bce	48 8b 54 24 70	 mov	 rdx, QWORD PTR s$[rsp]
  00bd3	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00bd7	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00bda	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bdf	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00be2	ff c0		 inc	 eax
  00be4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00be9	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00bec	0f b7 44 24 58	 movzx	 eax, WORD PTR val$5258[rsp]
  00bf1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00bf6	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00bfd	ba 10 00 00 00	 mov	 edx, 16
  00c02	48 2b d1	 sub	 rdx, rcx
  00c05	48 8b ca	 mov	 rcx, rdx
  00c08	d3 f8		 sar	 eax, cl
  00c0a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00c0f	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00c16	48 63 44 24 54	 movsxd	 rax, DWORD PTR len$5254[rsp]
  00c1b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00c20	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00c27	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  00c2c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00c31	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00c37	eb 4c		 jmp	 SHORT $LN5@send_tree
$LN6@send_tree:
  00c39	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00c3c	83 e8 0b	 sub	 eax, 11
  00c3f	0f b7 c0	 movzx	 eax, ax
  00c42	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00c47	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00c4d	d3 e0		 shl	 eax, cl
  00c4f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00c54	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00c5b	0b c8		 or	 ecx, eax
  00c5d	8b c1		 mov	 eax, ecx
  00c5f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00c64	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00c6b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c70	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00c76	03 44 24 54	 add	 eax, DWORD PTR len$5254[rsp]
  00c7a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  00c7f	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN5@send_tree:
$LN9@send_tree:
$LN15@send_tree:
$LN24@send_tree:
$LN31@send_tree:

; 791  :         }
; 792  :         count = 0; prevlen = curlen;

  00c85	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0
  00c8c	8b 44 24 08	 mov	 eax, DWORD PTR curlen$[rsp]
  00c90	89 44 24 10	 mov	 DWORD PTR prevlen$[rsp], eax

; 793  :         if (nextlen == 0) {

  00c94	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  00c99	75 12		 jne	 SHORT $LN4@send_tree

; 794  :             max_count = 138, min_count = 3;

  00c9b	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  00ca3	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
  00cab	eb 2c		 jmp	 SHORT $LN3@send_tree
$LN4@send_tree:

; 795  :         } else if (curlen == nextlen) {

  00cad	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  00cb1	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  00cb5	75 12		 jne	 SHORT $LN2@send_tree

; 796  :             max_count = 6, min_count = 3;

  00cb7	c7 44 24 18 06
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 6
  00cbf	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3

; 797  :         } else {

  00cc7	eb 10		 jmp	 SHORT $LN1@send_tree
$LN2@send_tree:

; 798  :             max_count = 7, min_count = 4;

  00cc9	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7
  00cd1	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4
$LN1@send_tree:
$LN3@send_tree:

; 799  :         }
; 800  :     }

  00cd9	e9 82 f3 ff ff	 jmp	 $LN34@send_tree
$LN33@send_tree:

; 801  : }

  00cde	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00ce2	c3		 ret	 0
send_tree ENDP
_TEXT	ENDS
PUBLIC	_tr_tally
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_tally DD imagerel $LN9
	DD	imagerel $LN9+411
	DD	imagerel $unwind$_tr_tally
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_tally DD 011201H
	DD	02212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_tally
_TEXT	SEGMENT
tv163 = 0
tv180 = 4
s$ = 32
dist$ = 40
lc$ = 48
_tr_tally PROC						; COMDAT

; 1030 : {

$LN9:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 1031 :     s->d_buf[s->last_lit] = (ush)dist;

  00012	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00017	8b 80 f4 16 00
	00		 mov	 eax, DWORD PTR [rax+5876]
  0001d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00022	48 8b 89 f8 16
	00 00		 mov	 rcx, QWORD PTR [rcx+5880]
  00029	0f b7 54 24 28	 movzx	 edx, WORD PTR dist$[rsp]
  0002e	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 1032 :     s->l_buf[s->last_lit++] = (uch)lc;

  00032	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00037	8b 80 f4 16 00
	00		 mov	 eax, DWORD PTR [rax+5876]
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00042	48 8b 89 e8 16
	00 00		 mov	 rcx, QWORD PTR [rcx+5864]
  00049	0f b6 54 24 30	 movzx	 edx, BYTE PTR lc$[rsp]
  0004e	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00056	8b 80 f4 16 00
	00		 mov	 eax, DWORD PTR [rax+5876]
  0005c	ff c0		 inc	 eax
  0005e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00063	89 81 f4 16 00
	00		 mov	 DWORD PTR [rcx+5876], eax

; 1033 :     if (dist == 0) {

  00069	83 7c 24 28 00	 cmp	 DWORD PTR dist$[rsp], 0
  0006e	75 2a		 jne	 SHORT $LN2@tr_tally

; 1034 :         /* lc is the unmatched char */
; 1035 :         s->dyn_ltree[lc].Freq++;

  00070	8b 44 24 30	 mov	 eax, DWORD PTR lc$[rsp]
  00074	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00079	0f b7 84 81 bc
	00 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+188]
  00081	66 ff c0	 inc	 ax
  00084	8b 4c 24 30	 mov	 ecx, DWORD PTR lc$[rsp]
  00088	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0008d	66 89 84 8a bc
	00 00 00	 mov	 WORD PTR [rdx+rcx*4+188], ax

; 1036 :     } else {

  00095	e9 cc 00 00 00	 jmp	 $LN1@tr_tally
$LN2@tr_tally:

; 1037 :         s->matches++;

  0009a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0009f	8b 80 08 17 00
	00		 mov	 eax, DWORD PTR [rax+5896]
  000a5	ff c0		 inc	 eax
  000a7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000ac	89 81 08 17 00
	00		 mov	 DWORD PTR [rcx+5896], eax

; 1038 :         /* Here, lc is the match length - MIN_MATCH */
; 1039 :         dist--;             /* dist = match distance - 1 */

  000b2	8b 44 24 28	 mov	 eax, DWORD PTR dist$[rsp]
  000b6	ff c8		 dec	 eax
  000b8	89 44 24 28	 mov	 DWORD PTR dist$[rsp], eax

; 1040 :         Assert((ush)dist < (ush)MAX_DIST(s) &&
; 1041 :                (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
; 1042 :                (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
; 1043 : 
; 1044 :         s->dyn_ltree[_length_code[lc]+LITERALS+1].Freq++;

  000bc	8b 44 24 30	 mov	 eax, DWORD PTR lc$[rsp]
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_length_code
  000c7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000cb	05 01 01 00 00	 add	 eax, 257		; 00000101H
  000d0	48 98		 cdqe
  000d2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000d7	0f b7 84 81 bc
	00 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+188]
  000df	66 ff c0	 inc	 ax
  000e2	8b 4c 24 30	 mov	 ecx, DWORD PTR lc$[rsp]
  000e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_length_code
  000ed	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000f1	81 c1 01 01 00
	00		 add	 ecx, 257		; 00000101H
  000f7	48 63 c9	 movsxd	 rcx, ecx
  000fa	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  000ff	66 89 84 8a bc
	00 00 00	 mov	 WORD PTR [rdx+rcx*4+188], ax

; 1045 :         s->dyn_dtree[d_code(dist)].Freq++;

  00107	81 7c 24 28 00
	01 00 00	 cmp	 DWORD PTR dist$[rsp], 256 ; 00000100H
  0010f	73 14		 jae	 SHORT $LN5@tr_tally
  00111	8b 44 24 28	 mov	 eax, DWORD PTR dist$[rsp]
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dist_code
  0011c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00120	89 04 24	 mov	 DWORD PTR tv163[rsp], eax
  00123	eb 1c		 jmp	 SHORT $LN6@tr_tally
$LN5@tr_tally:
  00125	8b 44 24 28	 mov	 eax, DWORD PTR dist$[rsp]
  00129	c1 e8 07	 shr	 eax, 7
  0012c	05 00 01 00 00	 add	 eax, 256		; 00000100H
  00131	8b c0		 mov	 eax, eax
  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dist_code
  0013a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0013e	89 04 24	 mov	 DWORD PTR tv163[rsp], eax
$LN6@tr_tally:
  00141	48 63 04 24	 movsxd	 rax, DWORD PTR tv163[rsp]
  00145	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0014a	0f b7 84 81 b0
	09 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+2480]
  00152	66 ff c0	 inc	 ax
  00155	48 63 0c 24	 movsxd	 rcx, DWORD PTR tv163[rsp]
  00159	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0015e	66 89 84 8a b0
	09 00 00	 mov	 WORD PTR [rdx+rcx*4+2480], ax
$LN1@tr_tally:

; 1046 :     }
; 1047 : 
; 1048 : #ifdef TRUNCATE_BLOCK
; 1049 :     /* Try to guess if it is profitable to stop the current block here */
; 1050 :     if ((s->last_lit & 0x1fff) == 0 && s->level > 2) {
; 1051 :         /* Compute an upper bound for the compressed length */
; 1052 :         ulg out_length = (ulg)s->last_lit*8L;
; 1053 :         ulg in_length = (ulg)((long)s->strstart - s->block_start);
; 1054 :         int dcode;
; 1055 :         for (dcode = 0; dcode < D_CODES; dcode++) {
; 1056 :             out_length += (ulg)s->dyn_dtree[dcode].Freq *
; 1057 :                 (5L+extra_dbits[dcode]);
; 1058 :         }
; 1059 :         out_length >>= 3;
; 1060 :         Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
; 1061 :                s->last_lit, in_length, out_length,
; 1062 :                100L - out_length*100L/in_length));
; 1063 :         if (s->matches < s->last_lit/2 && out_length < in_length/2) return 1;
; 1064 :     }
; 1065 : #endif
; 1066 :     return (s->last_lit == s->lit_bufsize-1);

  00166	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0016b	8b 80 f0 16 00
	00		 mov	 eax, DWORD PTR [rax+5872]
  00171	ff c8		 dec	 eax
  00173	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00178	39 81 f4 16 00
	00		 cmp	 DWORD PTR [rcx+5876], eax
  0017e	75 0a		 jne	 SHORT $LN7@tr_tally
  00180	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv180[rsp], 1
  00188	eb 08		 jmp	 SHORT $LN8@tr_tally
$LN7@tr_tally:
  0018a	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv180[rsp], 0
$LN8@tr_tally:
  00192	8b 44 24 04	 mov	 eax, DWORD PTR tv180[rsp]

; 1067 :     /* We avoid equality with lit_bufsize because of wraparound at 64K
; 1068 :      * on 16 bit machines and because stored blocks are restricted to
; 1069 :      * 64K-1 bytes.
; 1070 :      */
; 1071 : }

  00196	48 83 c4 18	 add	 rsp, 24
  0019a	c3		 ret	 0
_tr_tally ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$compress_block DD imagerel compress_block
	DD	imagerel compress_block+2568
	DD	imagerel $unwind$compress_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress_block DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT compress_block
_TEXT	SEGMENT
extra$ = 0
code$ = 4
lx$ = 8
lc$ = 12
dist$ = 16
len$5510 = 20
val$5514 = 24
len$5525 = 28
val$5529 = 32
len$5540 = 36
val$5544 = 40
len$5554 = 44
val$5558 = 48
len$5569 = 52
val$5573 = 56
len$5583 = 60
val$5587 = 64
tv334 = 68
s$ = 96
ltree$ = 104
dtree$ = 112
compress_block PROC					; COMDAT

; 1080 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1081 :     unsigned dist;      /* distance of matched string */
; 1082 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1083 :     unsigned lx = 0;    /* running index in l_buf */

  00013	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR lx$[rsp], 0

; 1084 :     unsigned code;      /* the code to send */
; 1085 :     int extra;          /* number of extra bits to send */
; 1086 : 
; 1087 :     if (s->last_lit != 0) do {

  0001b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00020	83 b8 f4 16 00
	00 00		 cmp	 DWORD PTR [rax+5876], 0
  00027	0f 84 4f 08 00
	00		 je	 $LN20@compress_b
$LN19@compress_b:

; 1088 :         dist = s->d_buf[lx];

  0002d	8b 44 24 08	 mov	 eax, DWORD PTR lx$[rsp]
  00031	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00036	48 8b 89 f8 16
	00 00		 mov	 rcx, QWORD PTR [rcx+5880]
  0003d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00041	89 44 24 10	 mov	 DWORD PTR dist$[rsp], eax

; 1089 :         lc = s->l_buf[lx++];

  00045	8b 44 24 08	 mov	 eax, DWORD PTR lx$[rsp]
  00049	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0004e	48 8b 89 e8 16
	00 00		 mov	 rcx, QWORD PTR [rcx+5864]
  00055	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00059	89 44 24 0c	 mov	 DWORD PTR lc$[rsp], eax
  0005d	8b 44 24 08	 mov	 eax, DWORD PTR lx$[rsp]
  00061	ff c0		 inc	 eax
  00063	89 44 24 08	 mov	 DWORD PTR lx$[rsp], eax

; 1090 :         if (dist == 0) {

  00067	83 7c 24 10 00	 cmp	 DWORD PTR dist$[rsp], 0
  0006c	0f 85 7c 01 00
	00		 jne	 $LN16@compress_b

; 1091 :             send_code(s, lc, ltree); /* send a literal byte */

  00072	48 63 44 24 0c	 movsxd	 rax, DWORD PTR lc$[rsp]
  00077	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ltree$[rsp]
  0007c	0f b7 44 81 02	 movzx	 eax, WORD PTR [rcx+rax*4+2]
  00081	89 44 24 14	 mov	 DWORD PTR len$5510[rsp], eax
  00085	b8 10 00 00 00	 mov	 eax, 16
  0008a	2b 44 24 14	 sub	 eax, DWORD PTR len$5510[rsp]
  0008e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00093	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  00099	0f 8e f9 00 00
	00		 jle	 $LN15@compress_b
  0009f	48 63 44 24 0c	 movsxd	 rax, DWORD PTR lc$[rsp]
  000a4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ltree$[rsp]
  000a9	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  000ad	89 44 24 18	 mov	 DWORD PTR val$5514[rsp], eax
  000b1	0f b7 44 24 18	 movzx	 eax, WORD PTR val$5514[rsp]
  000b6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000bb	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  000c1	d3 e0		 shl	 eax, cl
  000c3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000c8	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  000cf	0b c8		 or	 ecx, eax
  000d1	8b c1		 mov	 eax, ecx
  000d3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000d8	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  000df	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000e4	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  000eb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000f0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000f5	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  000f8	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  000fd	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00101	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00104	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00109	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0010c	ff c0		 inc	 eax
  0010e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00113	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00116	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0011b	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00122	c1 f8 08	 sar	 eax, 8
  00125	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0012a	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0012d	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00132	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00136	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00139	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0013e	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00141	ff c0		 inc	 eax
  00143	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00148	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0014b	0f b7 44 24 18	 movzx	 eax, WORD PTR val$5514[rsp]
  00150	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00155	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  0015c	ba 10 00 00 00	 mov	 edx, 16
  00161	48 2b d1	 sub	 rdx, rcx
  00164	48 8b ca	 mov	 rcx, rdx
  00167	d3 f8		 sar	 eax, cl
  00169	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0016e	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00175	48 63 44 24 14	 movsxd	 rax, DWORD PTR len$5510[rsp]
  0017a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0017f	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00186	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  0018b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00190	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00196	eb 51		 jmp	 SHORT $LN14@compress_b
$LN15@compress_b:
  00198	48 63 44 24 0c	 movsxd	 rax, DWORD PTR lc$[rsp]
  0019d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ltree$[rsp]
  001a2	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  001a6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001ab	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  001b1	d3 e0		 shl	 eax, cl
  001b3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001b8	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  001bf	0b c8		 or	 ecx, eax
  001c1	8b c1		 mov	 eax, ecx
  001c3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001c8	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  001cf	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001d4	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  001da	03 44 24 14	 add	 eax, DWORD PTR len$5510[rsp]
  001de	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  001e3	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN14@compress_b:

; 1092 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1093 :         } else {

  001e9	e9 79 06 00 00	 jmp	 $LN13@compress_b
$LN16@compress_b:

; 1094 :             /* Here, lc is the match length - MIN_MATCH */
; 1095 :             code = _length_code[lc];

  001ee	48 63 44 24 0c	 movsxd	 rax, DWORD PTR lc$[rsp]
  001f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_length_code
  001fa	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001fe	89 44 24 04	 mov	 DWORD PTR code$[rsp], eax

; 1096 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  00202	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  00206	05 01 01 00 00	 add	 eax, 257		; 00000101H
  0020b	8b c0		 mov	 eax, eax
  0020d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ltree$[rsp]
  00212	0f b7 44 81 02	 movzx	 eax, WORD PTR [rcx+rax*4+2]
  00217	89 44 24 1c	 mov	 DWORD PTR len$5525[rsp], eax
  0021b	b8 10 00 00 00	 mov	 eax, 16
  00220	2b 44 24 1c	 sub	 eax, DWORD PTR len$5525[rsp]
  00224	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00229	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  0022f	0f 8e ff 00 00
	00		 jle	 $LN12@compress_b
  00235	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  00239	05 01 01 00 00	 add	 eax, 257		; 00000101H
  0023e	8b c0		 mov	 eax, eax
  00240	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ltree$[rsp]
  00245	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  00249	89 44 24 20	 mov	 DWORD PTR val$5529[rsp], eax
  0024d	0f b7 44 24 20	 movzx	 eax, WORD PTR val$5529[rsp]
  00252	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00257	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  0025d	d3 e0		 shl	 eax, cl
  0025f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00264	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  0026b	0b c8		 or	 ecx, eax
  0026d	8b c1		 mov	 eax, ecx
  0026f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00274	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0027b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00280	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00287	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0028c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00291	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00294	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00299	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0029d	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  002a0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002a5	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  002a8	ff c0		 inc	 eax
  002aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002af	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  002b2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002b7	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  002be	c1 f8 08	 sar	 eax, 8
  002c1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002c6	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  002c9	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  002ce	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  002d2	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  002d5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002da	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  002dd	ff c0		 inc	 eax
  002df	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002e4	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  002e7	0f b7 44 24 20	 movzx	 eax, WORD PTR val$5529[rsp]
  002ec	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002f1	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  002f8	ba 10 00 00 00	 mov	 edx, 16
  002fd	48 2b d1	 sub	 rdx, rcx
  00300	48 8b ca	 mov	 rcx, rdx
  00303	d3 f8		 sar	 eax, cl
  00305	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0030a	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00311	48 63 44 24 1c	 movsxd	 rax, DWORD PTR len$5525[rsp]
  00316	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0031b	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00322	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  00327	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0032c	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00332	eb 57		 jmp	 SHORT $LN11@compress_b
$LN12@compress_b:
  00334	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  00338	05 01 01 00 00	 add	 eax, 257		; 00000101H
  0033d	8b c0		 mov	 eax, eax
  0033f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ltree$[rsp]
  00344	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  00348	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0034d	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00353	d3 e0		 shl	 eax, cl
  00355	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0035a	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00361	0b c8		 or	 ecx, eax
  00363	8b c1		 mov	 eax, ecx
  00365	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0036a	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00371	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00376	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0037c	03 44 24 1c	 add	 eax, DWORD PTR len$5525[rsp]
  00380	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00385	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN11@compress_b:

; 1097 :             extra = extra_lbits[code];

  0038b	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  0038f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:extra_lbits
  00396	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00399	89 04 24	 mov	 DWORD PTR extra$[rsp], eax

; 1098 :             if (extra != 0) {

  0039c	83 3c 24 00	 cmp	 DWORD PTR extra$[rsp], 0
  003a0	0f 84 72 01 00
	00		 je	 $LN10@compress_b

; 1099 :                 lc -= base_length[code];

  003a6	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  003aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:base_length
  003b1	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  003b4	8b 4c 24 0c	 mov	 ecx, DWORD PTR lc$[rsp]
  003b8	2b c8		 sub	 ecx, eax
  003ba	8b c1		 mov	 eax, ecx
  003bc	89 44 24 0c	 mov	 DWORD PTR lc$[rsp], eax

; 1100 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  003c0	8b 04 24	 mov	 eax, DWORD PTR extra$[rsp]
  003c3	89 44 24 24	 mov	 DWORD PTR len$5540[rsp], eax
  003c7	b8 10 00 00 00	 mov	 eax, 16
  003cc	2b 44 24 24	 sub	 eax, DWORD PTR len$5540[rsp]
  003d0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003d5	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  003db	0f 8e ef 00 00
	00		 jle	 $LN9@compress_b
  003e1	8b 44 24 0c	 mov	 eax, DWORD PTR lc$[rsp]
  003e5	89 44 24 28	 mov	 DWORD PTR val$5544[rsp], eax
  003e9	0f b7 44 24 28	 movzx	 eax, WORD PTR val$5544[rsp]
  003ee	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003f3	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  003f9	d3 e0		 shl	 eax, cl
  003fb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00400	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00407	0b c8		 or	 ecx, eax
  00409	8b c1		 mov	 eax, ecx
  0040b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00410	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00417	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0041c	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00423	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00428	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0042d	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00430	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00435	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00439	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  0043c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00441	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00444	ff c0		 inc	 eax
  00446	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0044b	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0044e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00453	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  0045a	c1 f8 08	 sar	 eax, 8
  0045d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00462	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00465	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  0046a	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0046e	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00471	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00476	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00479	ff c0		 inc	 eax
  0047b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00480	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00483	0f b7 44 24 28	 movzx	 eax, WORD PTR val$5544[rsp]
  00488	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0048d	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00494	ba 10 00 00 00	 mov	 edx, 16
  00499	48 2b d1	 sub	 rdx, rcx
  0049c	48 8b ca	 mov	 rcx, rdx
  0049f	d3 f8		 sar	 eax, cl
  004a1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004a6	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  004ad	48 63 44 24 24	 movsxd	 rax, DWORD PTR len$5540[rsp]
  004b2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004b7	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  004be	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  004c3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004c8	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  004ce	eb 48		 jmp	 SHORT $LN8@compress_b
$LN9@compress_b:
  004d0	0f b7 44 24 0c	 movzx	 eax, WORD PTR lc$[rsp]
  004d5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004da	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  004e0	d3 e0		 shl	 eax, cl
  004e2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004e7	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  004ee	0b c8		 or	 ecx, eax
  004f0	8b c1		 mov	 eax, ecx
  004f2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  004f7	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  004fe	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00503	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00509	03 44 24 24	 add	 eax, DWORD PTR len$5540[rsp]
  0050d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00512	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN8@compress_b:
$LN10@compress_b:

; 1101 :             }
; 1102 :             dist--; /* dist is now the match distance - 1 */

  00518	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  0051c	ff c8		 dec	 eax
  0051e	89 44 24 10	 mov	 DWORD PTR dist$[rsp], eax

; 1103 :             code = d_code(dist);

  00522	81 7c 24 10 00
	01 00 00	 cmp	 DWORD PTR dist$[rsp], 256 ; 00000100H
  0052a	73 15		 jae	 SHORT $LN23@compress_b
  0052c	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  00530	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dist_code
  00537	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0053b	89 44 24 44	 mov	 DWORD PTR tv334[rsp], eax
  0053f	eb 1d		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  00541	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  00545	c1 e8 07	 shr	 eax, 7
  00548	05 00 01 00 00	 add	 eax, 256		; 00000100H
  0054d	8b c0		 mov	 eax, eax
  0054f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dist_code
  00556	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0055a	89 44 24 44	 mov	 DWORD PTR tv334[rsp], eax
$LN24@compress_b:
  0055e	8b 44 24 44	 mov	 eax, DWORD PTR tv334[rsp]
  00562	89 44 24 04	 mov	 DWORD PTR code$[rsp], eax

; 1104 :             Assert (code < D_CODES, "bad d_code");
; 1105 : 
; 1106 :             send_code(s, code, dtree);       /* send the distance code */

  00566	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  0056a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dtree$[rsp]
  0056f	0f b7 44 81 02	 movzx	 eax, WORD PTR [rcx+rax*4+2]
  00574	89 44 24 2c	 mov	 DWORD PTR len$5554[rsp], eax
  00578	b8 10 00 00 00	 mov	 eax, 16
  0057d	2b 44 24 2c	 sub	 eax, DWORD PTR len$5554[rsp]
  00581	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00586	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  0058c	0f 8e f8 00 00
	00		 jle	 $LN7@compress_b
  00592	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  00596	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dtree$[rsp]
  0059b	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  0059f	89 44 24 30	 mov	 DWORD PTR val$5558[rsp], eax
  005a3	0f b7 44 24 30	 movzx	 eax, WORD PTR val$5558[rsp]
  005a8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  005ad	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  005b3	d3 e0		 shl	 eax, cl
  005b5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  005ba	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  005c1	0b c8		 or	 ecx, eax
  005c3	8b c1		 mov	 eax, ecx
  005c5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  005ca	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  005d1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005d6	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  005dd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005e2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  005e7	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  005ea	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  005ef	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  005f3	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  005f6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005fb	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  005fe	ff c0		 inc	 eax
  00600	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00605	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00608	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0060d	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00614	c1 f8 08	 sar	 eax, 8
  00617	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0061c	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0061f	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00624	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00628	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  0062b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00630	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00633	ff c0		 inc	 eax
  00635	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0063a	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0063d	0f b7 44 24 30	 movzx	 eax, WORD PTR val$5558[rsp]
  00642	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00647	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  0064e	ba 10 00 00 00	 mov	 edx, 16
  00653	48 2b d1	 sub	 rdx, rcx
  00656	48 8b ca	 mov	 rcx, rdx
  00659	d3 f8		 sar	 eax, cl
  0065b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00660	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00667	48 63 44 24 2c	 movsxd	 rax, DWORD PTR len$5554[rsp]
  0066c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00671	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00678	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  0067d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00682	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  00688	eb 50		 jmp	 SHORT $LN6@compress_b
$LN7@compress_b:
  0068a	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  0068e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dtree$[rsp]
  00693	0f b7 04 81	 movzx	 eax, WORD PTR [rcx+rax*4]
  00697	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0069c	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  006a2	d3 e0		 shl	 eax, cl
  006a4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  006a9	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  006b0	0b c8		 or	 ecx, eax
  006b2	8b c1		 mov	 eax, ecx
  006b4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  006b9	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  006c0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006c5	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  006cb	03 44 24 2c	 add	 eax, DWORD PTR len$5554[rsp]
  006cf	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  006d4	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN6@compress_b:

; 1107 :             extra = extra_dbits[code];

  006da	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  006de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:extra_dbits
  006e5	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  006e8	89 04 24	 mov	 DWORD PTR extra$[rsp], eax

; 1108 :             if (extra != 0) {

  006eb	83 3c 24 00	 cmp	 DWORD PTR extra$[rsp], 0
  006ef	0f 84 72 01 00
	00		 je	 $LN5@compress_b

; 1109 :                 dist -= base_dist[code];

  006f5	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  006f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:base_dist
  00700	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00703	8b 4c 24 10	 mov	 ecx, DWORD PTR dist$[rsp]
  00707	2b c8		 sub	 ecx, eax
  00709	8b c1		 mov	 eax, ecx
  0070b	89 44 24 10	 mov	 DWORD PTR dist$[rsp], eax

; 1110 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  0070f	8b 04 24	 mov	 eax, DWORD PTR extra$[rsp]
  00712	89 44 24 34	 mov	 DWORD PTR len$5569[rsp], eax
  00716	b8 10 00 00 00	 mov	 eax, 16
  0071b	2b 44 24 34	 sub	 eax, DWORD PTR len$5569[rsp]
  0071f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00724	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  0072a	0f 8e ef 00 00
	00		 jle	 $LN4@compress_b
  00730	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  00734	89 44 24 38	 mov	 DWORD PTR val$5573[rsp], eax
  00738	0f b7 44 24 38	 movzx	 eax, WORD PTR val$5573[rsp]
  0073d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00742	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00748	d3 e0		 shl	 eax, cl
  0074a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0074f	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  00756	0b c8		 or	 ecx, eax
  00758	8b c1		 mov	 eax, ecx
  0075a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0075f	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  00766	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0076b	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00772	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00777	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0077c	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0077f	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00784	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00788	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  0078b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00790	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00793	ff c0		 inc	 eax
  00795	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0079a	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0079d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007a2	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  007a9	c1 f8 08	 sar	 eax, 8
  007ac	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  007b1	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  007b4	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  007b9	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  007bd	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  007c0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007c5	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  007c8	ff c0		 inc	 eax
  007ca	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  007cf	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  007d2	0f b7 44 24 38	 movzx	 eax, WORD PTR val$5573[rsp]
  007d7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  007dc	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  007e3	ba 10 00 00 00	 mov	 edx, 16
  007e8	48 2b d1	 sub	 rdx, rcx
  007eb	48 8b ca	 mov	 rcx, rdx
  007ee	d3 f8		 sar	 eax, cl
  007f0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  007f5	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  007fc	48 63 44 24 34	 movsxd	 rax, DWORD PTR len$5569[rsp]
  00801	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00806	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  0080d	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  00812	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00817	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  0081d	eb 48		 jmp	 SHORT $LN3@compress_b
$LN4@compress_b:
  0081f	0f b7 44 24 10	 movzx	 eax, WORD PTR dist$[rsp]
  00824	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00829	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  0082f	d3 e0		 shl	 eax, cl
  00831	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00836	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  0083d	0b c8		 or	 ecx, eax
  0083f	8b c1		 mov	 eax, ecx
  00841	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00846	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0084d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00852	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00858	03 44 24 34	 add	 eax, DWORD PTR len$5569[rsp]
  0085c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00861	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN3@compress_b:
$LN5@compress_b:
$LN13@compress_b:

; 1111 :             }
; 1112 :         } /* literal or match pair ? */
; 1113 : 
; 1114 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1115 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1116 :                "pendingBuf overflow");
; 1117 : 
; 1118 :     } while (lx < s->last_lit);

  00867	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0086c	8b 80 f4 16 00
	00		 mov	 eax, DWORD PTR [rax+5876]
  00872	39 44 24 08	 cmp	 DWORD PTR lx$[rsp], eax
  00876	0f 82 b1 f7 ff
	ff		 jb	 $LN19@compress_b
$LN20@compress_b:

; 1119 : 
; 1120 :     send_code(s, END_BLOCK, ltree);

  0087c	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  00881	0f b7 80 02 04
	00 00		 movzx	 eax, WORD PTR [rax+1026]
  00888	89 44 24 3c	 mov	 DWORD PTR len$5583[rsp], eax
  0088c	b8 10 00 00 00	 mov	 eax, 16
  00891	2b 44 24 3c	 sub	 eax, DWORD PTR len$5583[rsp]
  00895	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0089a	39 81 14 17 00
	00		 cmp	 DWORD PTR [rcx+5908], eax
  008a0	0f 8e f7 00 00
	00		 jle	 $LN2@compress_b
  008a6	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  008ab	0f b7 80 00 04
	00 00		 movzx	 eax, WORD PTR [rax+1024]
  008b2	89 44 24 40	 mov	 DWORD PTR val$5587[rsp], eax
  008b6	0f b7 44 24 40	 movzx	 eax, WORD PTR val$5587[rsp]
  008bb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  008c0	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  008c6	d3 e0		 shl	 eax, cl
  008c8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  008cd	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  008d4	0b c8		 or	 ecx, eax
  008d6	8b c1		 mov	 eax, ecx
  008d8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  008dd	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  008e4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  008e9	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  008f0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  008f5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  008fa	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  008fd	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00902	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00906	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00909	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0090e	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00911	ff c0		 inc	 eax
  00913	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00918	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0091b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00920	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00927	c1 f8 08	 sar	 eax, 8
  0092a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0092f	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00932	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00937	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0093b	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  0093e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00943	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00946	ff c0		 inc	 eax
  00948	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0094d	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00950	0f b7 44 24 40	 movzx	 eax, WORD PTR val$5587[rsp]
  00955	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0095a	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  00961	ba 10 00 00 00	 mov	 edx, 16
  00966	48 2b d1	 sub	 rdx, rcx
  00969	48 8b ca	 mov	 rcx, rdx
  0096c	d3 f8		 sar	 eax, cl
  0096e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00973	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  0097a	48 63 44 24 3c	 movsxd	 rax, DWORD PTR len$5583[rsp]
  0097f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00984	48 63 89 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rcx+5908]
  0098b	48 8d 44 01 f0	 lea	 rax, QWORD PTR [rcx+rax-16]
  00990	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00995	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
  0099b	eb 4f		 jmp	 SHORT $LN1@compress_b
$LN2@compress_b:
  0099d	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  009a2	0f b7 80 00 04
	00 00		 movzx	 eax, WORD PTR [rax+1024]
  009a9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  009ae	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  009b4	d3 e0		 shl	 eax, cl
  009b6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  009bb	0f b7 89 10 17
	00 00		 movzx	 ecx, WORD PTR [rcx+5904]
  009c2	0b c8		 or	 ecx, eax
  009c4	8b c1		 mov	 eax, ecx
  009c6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  009cb	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax
  009d2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009d7	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  009dd	03 44 24 3c	 add	 eax, DWORD PTR len$5583[rsp]
  009e1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  009e6	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN1@compress_b:

; 1121 :     s->last_eob_len = ltree[END_BLOCK].Len;

  009ec	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  009f1	0f b7 80 02 04
	00 00		 movzx	 eax, WORD PTR [rax+1026]
  009f8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  009fd	89 81 0c 17 00
	00		 mov	 DWORD PTR [rcx+5900], eax

; 1122 : }

  00a03	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00a07	c3		 ret	 0
compress_block ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$detect_data_type DD imagerel detect_data_type
	DD	imagerel detect_data_type+206
	DD	imagerel $unwind$detect_data_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$detect_data_type DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT detect_data_type
_TEXT	SEGMENT
n$ = 0
black_mask$ = 4
s$ = 32
detect_data_type PROC					; COMDAT

; 1139 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 1140 :     /* black_mask is the bit mask of black-listed bytes
; 1141 :      * set bits 0..6, 14..25, and 28..31
; 1142 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1143 :      */
; 1144 :     unsigned long black_mask = 0xf3ffc07fUL;

  00009	c7 44 24 04 7f
	c0 ff f3	 mov	 DWORD PTR black_mask$[rsp], -201342849 ; f3ffc07fH

; 1145 :     int n;
; 1146 : 
; 1147 :     /* Check for non-textual ("black-listed") bytes. */
; 1148 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  00011	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  00018	eb 12		 jmp	 SHORT $LN10@detect_dat
$LN9@detect_dat:
  0001a	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  0001d	ff c0		 inc	 eax
  0001f	89 04 24	 mov	 DWORD PTR n$[rsp], eax
  00022	8b 44 24 04	 mov	 eax, DWORD PTR black_mask$[rsp]
  00026	d1 e8		 shr	 eax, 1
  00028	89 44 24 04	 mov	 DWORD PTR black_mask$[rsp], eax
$LN10@detect_dat:
  0002c	83 3c 24 1f	 cmp	 DWORD PTR n$[rsp], 31
  00030	7f 26		 jg	 SHORT $LN8@detect_dat

; 1149 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  00032	8b 44 24 04	 mov	 eax, DWORD PTR black_mask$[rsp]
  00036	83 e0 01	 and	 eax, 1
  00039	85 c0		 test	 eax, eax
  0003b	74 19		 je	 SHORT $LN7@detect_dat
  0003d	48 63 04 24	 movsxd	 rax, DWORD PTR n$[rsp]
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00046	0f b7 84 81 bc
	00 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+188]
  0004e	85 c0		 test	 eax, eax
  00050	74 04		 je	 SHORT $LN7@detect_dat

; 1150 :             return Z_BINARY;

  00052	33 c0		 xor	 eax, eax
  00054	eb 73		 jmp	 SHORT $LN11@detect_dat
$LN7@detect_dat:

; 1151 : 
; 1152 :     /* Check for textual ("white-listed") bytes. */
; 1153 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0

  00056	eb c2		 jmp	 SHORT $LN9@detect_dat
$LN8@detect_dat:

; 1154 :             || s->dyn_ltree[13].Freq != 0)

  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0005d	0f b7 80 e0 00
	00 00		 movzx	 eax, WORD PTR [rax+224]
  00064	85 c0		 test	 eax, eax
  00066	75 20		 jne	 SHORT $LN5@detect_dat
  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0006d	0f b7 80 e4 00
	00 00		 movzx	 eax, WORD PTR [rax+228]
  00074	85 c0		 test	 eax, eax
  00076	75 10		 jne	 SHORT $LN5@detect_dat
  00078	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0007d	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  00084	85 c0		 test	 eax, eax
  00086	74 07		 je	 SHORT $LN6@detect_dat
$LN5@detect_dat:

; 1155 :         return Z_TEXT;

  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	eb 3a		 jmp	 SHORT $LN11@detect_dat
$LN6@detect_dat:

; 1156 :     for (n = 32; n < LITERALS; n++)

  0008f	c7 04 24 20 00
	00 00		 mov	 DWORD PTR n$[rsp], 32	; 00000020H
  00096	eb 08		 jmp	 SHORT $LN4@detect_dat
$LN3@detect_dat:
  00098	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  0009b	ff c0		 inc	 eax
  0009d	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN4@detect_dat:
  000a0	81 3c 24 00 01
	00 00		 cmp	 DWORD PTR n$[rsp], 256	; 00000100H
  000a7	7d 1e		 jge	 SHORT $LN2@detect_dat

; 1157 :         if (s->dyn_ltree[n].Freq != 0)

  000a9	48 63 04 24	 movsxd	 rax, DWORD PTR n$[rsp]
  000ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000b2	0f b7 84 81 bc
	00 00 00	 movzx	 eax, WORD PTR [rcx+rax*4+188]
  000ba	85 c0		 test	 eax, eax
  000bc	74 07		 je	 SHORT $LN1@detect_dat

; 1158 :             return Z_TEXT;

  000be	b8 01 00 00 00	 mov	 eax, 1
  000c3	eb 04		 jmp	 SHORT $LN11@detect_dat
$LN1@detect_dat:

; 1159 : 
; 1160 :     /* There are no "black-listed" or "white-listed" bytes:
; 1161 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1162 :      */
; 1163 :     return Z_BINARY;

  000c5	eb d1		 jmp	 SHORT $LN3@detect_dat
$LN2@detect_dat:
  000c7	33 c0		 xor	 eax, eax
$LN11@detect_dat:

; 1164 : }

  000c9	48 83 c4 18	 add	 rsp, 24
  000cd	c3		 ret	 0
detect_data_type ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bi_reverse DD imagerel bi_reverse
	DD	imagerel bi_reverse+81
	DD	imagerel $unwind$bi_reverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bi_reverse DD 010c01H
	DD	0220cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bi_reverse
_TEXT	SEGMENT
res$ = 0
code$ = 32
len$ = 40
bi_reverse PROC						; COMDAT

; 1174 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 18	 sub	 rsp, 24

; 1175 :     register unsigned res = 0;

  0000c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR res$[rsp], 0
$LN3@bi_reverse:

; 1176 :     do {
; 1177 :         res |= code & 1;

  00013	8b 44 24 20	 mov	 eax, DWORD PTR code$[rsp]
  00017	83 e0 01	 and	 eax, 1
  0001a	8b 0c 24	 mov	 ecx, DWORD PTR res$[rsp]
  0001d	0b c8		 or	 ecx, eax
  0001f	8b c1		 mov	 eax, ecx
  00021	89 04 24	 mov	 DWORD PTR res$[rsp], eax

; 1178 :         code >>= 1, res <<= 1;

  00024	8b 44 24 20	 mov	 eax, DWORD PTR code$[rsp]
  00028	d1 e8		 shr	 eax, 1
  0002a	89 44 24 20	 mov	 DWORD PTR code$[rsp], eax
  0002e	8b 04 24	 mov	 eax, DWORD PTR res$[rsp]
  00031	d1 e0		 shl	 eax, 1
  00033	89 04 24	 mov	 DWORD PTR res$[rsp], eax

; 1179 :     } while (--len > 0);

  00036	8b 44 24 28	 mov	 eax, DWORD PTR len$[rsp]
  0003a	ff c8		 dec	 eax
  0003c	89 44 24 28	 mov	 DWORD PTR len$[rsp], eax
  00040	83 7c 24 28 00	 cmp	 DWORD PTR len$[rsp], 0
  00045	7f cc		 jg	 SHORT $LN3@bi_reverse

; 1180 :     return res >> 1;

  00047	8b 04 24	 mov	 eax, DWORD PTR res$[rsp]
  0004a	d1 e8		 shr	 eax, 1

; 1181 : }

  0004c	48 83 c4 18	 add	 rsp, 24
  00050	c3		 ret	 0
bi_reverse ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT bi_flush
_TEXT	SEGMENT
s$ = 8
bi_flush PROC						; COMDAT

; 1188 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1189 :     if (s->bi_valid == 16) {

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0000a	83 b8 14 17 00
	00 10		 cmp	 DWORD PTR [rax+5908], 16
  00011	0f 85 8b 00 00
	00		 jne	 $LN3@bi_flush

; 1190 :         put_short(s, s->bi_buf);

  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0001c	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00023	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00028	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  0002d	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00030	48 8b 54 24 08	 mov	 rdx, QWORD PTR s$[rsp]
  00035	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00039	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  0003c	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00041	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00044	ff c0		 inc	 eax
  00046	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  0004b	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0004e	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00053	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  0005a	c1 f8 08	 sar	 eax, 8
  0005d	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  00062	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00065	48 8b 54 24 08	 mov	 rdx, QWORD PTR s$[rsp]
  0006a	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0006e	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00071	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00076	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00079	ff c0		 inc	 eax
  0007b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  00080	89 41 28	 mov	 DWORD PTR [rcx+40], eax

; 1191 :         s->bi_buf = 0;

  00083	33 c0		 xor	 eax, eax
  00085	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  0008a	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax

; 1192 :         s->bi_valid = 0;

  00091	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00096	c7 80 14 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5908], 0
  000a0	eb 75		 jmp	 SHORT $LN2@bi_flush
$LN3@bi_flush:

; 1193 :     } else if (s->bi_valid >= 8) {

  000a2	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000a7	83 b8 14 17 00
	00 08		 cmp	 DWORD PTR [rax+5908], 8
  000ae	7c 67		 jl	 SHORT $LN1@bi_flush

; 1194 :         put_byte(s, (Byte)s->bi_buf);

  000b0	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000b5	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  000b8	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  000bd	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000c1	48 8b 54 24 08	 mov	 rdx, QWORD PTR s$[rsp]
  000c6	0f b6 92 10 17
	00 00		 movzx	 edx, BYTE PTR [rdx+5904]
  000cd	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
  000d0	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000d5	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  000d8	ff c0		 inc	 eax
  000da	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  000df	89 41 28	 mov	 DWORD PTR [rcx+40], eax

; 1195 :         s->bi_buf >>= 8;

  000e2	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000e7	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  000ee	66 c1 e8 08	 shr	 ax, 8
  000f2	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  000f7	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax

; 1196 :         s->bi_valid -= 8;

  000fe	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00103	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00109	83 e8 08	 sub	 eax, 8
  0010c	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  00111	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax
$LN1@bi_flush:
$LN2@bi_flush:

; 1197 :     }
; 1198 : }

  00117	f3 c3		 fatret	 0
bi_flush ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT bi_windup
_TEXT	SEGMENT
s$ = 8
bi_windup PROC						; COMDAT

; 1205 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1206 :     if (s->bi_valid > 8) {

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0000a	83 b8 14 17 00
	00 08		 cmp	 DWORD PTR [rax+5908], 8
  00011	7e 6e		 jle	 SHORT $LN3@bi_windup

; 1207 :         put_short(s, s->bi_buf);

  00013	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00018	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  0001f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00024	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  00029	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0002c	48 8b 54 24 08	 mov	 rdx, QWORD PTR s$[rsp]
  00031	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00035	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00038	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0003d	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00040	ff c0		 inc	 eax
  00042	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  00047	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0004a	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0004f	0f b7 80 10 17
	00 00		 movzx	 eax, WORD PTR [rax+5904]
  00056	c1 f8 08	 sar	 eax, 8
  00059	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  0005e	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00061	48 8b 54 24 08	 mov	 rdx, QWORD PTR s$[rsp]
  00066	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  0006a	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  0006d	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00072	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00075	ff c0		 inc	 eax
  00077	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  0007c	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0007f	eb 40		 jmp	 SHORT $LN2@bi_windup
$LN3@bi_windup:

; 1208 :     } else if (s->bi_valid > 0) {

  00081	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00086	83 b8 14 17 00
	00 00		 cmp	 DWORD PTR [rax+5908], 0
  0008d	7e 32		 jle	 SHORT $LN1@bi_windup

; 1209 :         put_byte(s, (Byte)s->bi_buf);

  0008f	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00094	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00097	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  0009c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000a0	48 8b 54 24 08	 mov	 rdx, QWORD PTR s$[rsp]
  000a5	0f b6 92 10 17
	00 00		 movzx	 edx, BYTE PTR [rdx+5904]
  000ac	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
  000af	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000b4	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  000b7	ff c0		 inc	 eax
  000b9	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  000be	89 41 28	 mov	 DWORD PTR [rcx+40], eax
$LN1@bi_windup:
$LN2@bi_windup:

; 1210 :     }
; 1211 :     s->bi_buf = 0;

  000c1	33 c0		 xor	 eax, eax
  000c3	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  000c8	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax

; 1212 :     s->bi_valid = 0;

  000cf	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000d4	c7 80 14 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5908], 0

; 1213 : #ifdef DEBUG
; 1214 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1215 : #endif
; 1216 : }

  000de	c3		 ret	 0
bi_windup ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$copy_block DD imagerel copy_block
	DD	imagerel copy_block+340
	DD	imagerel $unwind$copy_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$copy_block DD 011801H
	DD	04218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT copy_block
_TEXT	SEGMENT
s$ = 48
buf$ = 56
len$ = 64
header$ = 72
copy_block PROC						; COMDAT

; 1227 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1228 :     bi_windup(s);        /* align on byte boundary */

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0001d	e8 00 00 00 00	 call	 bi_windup

; 1229 :     s->last_eob_len = 8; /* enough lookahead for inflate */

  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00027	c7 80 0c 17 00
	00 08 00 00 00	 mov	 DWORD PTR [rax+5900], 8

; 1230 : 
; 1231 :     if (header) {

  00031	83 7c 24 48 00	 cmp	 DWORD PTR header$[rsp], 0
  00036	0f 84 c4 00 00
	00		 je	 $LN3@copy_block

; 1232 :         put_short(s, (ush)len);

  0003c	0f b7 44 24 40	 movzx	 eax, WORD PTR len$[rsp]
  00041	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00046	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0004b	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0004e	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  00053	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00057	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0005f	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00062	ff c0		 inc	 eax
  00064	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00069	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0006c	0f b7 44 24 40	 movzx	 eax, WORD PTR len$[rsp]
  00071	c1 f8 08	 sar	 eax, 8
  00074	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00079	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  0007c	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  00081	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00085	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0008d	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00090	ff c0		 inc	 eax
  00092	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00097	89 41 28	 mov	 DWORD PTR [rcx+40], eax

; 1233 :         put_short(s, (ush)~len);

  0009a	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  0009e	f7 d0		 not	 eax
  000a0	0f b7 c0	 movzx	 eax, ax
  000a3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000a8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000ad	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  000b0	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  000b5	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  000b9	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  000bc	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000c1	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  000c4	ff c0		 inc	 eax
  000c6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000cb	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  000ce	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  000d2	f7 d0		 not	 eax
  000d4	0f b7 c0	 movzx	 eax, ax
  000d7	c1 f8 08	 sar	 eax, 8
  000da	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000df	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  000e2	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  000e7	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  000eb	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  000ee	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000f3	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  000f6	ff c0		 inc	 eax
  000f8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000fd	89 41 28	 mov	 DWORD PTR [rcx+40], eax
$LN3@copy_block:
$LN2@copy_block:

; 1234 : #ifdef DEBUG
; 1235 :         s->bits_sent += 2*16;
; 1236 : #endif
; 1237 :     }
; 1238 : #ifdef DEBUG
; 1239 :     s->bits_sent += (ulg)len<<3;
; 1240 : #endif
; 1241 :     while (len--) {

  00100	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00104	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  00108	ff c9		 dec	 ecx
  0010a	89 4c 24 40	 mov	 DWORD PTR len$[rsp], ecx
  0010e	85 c0		 test	 eax, eax
  00110	74 3d		 je	 SHORT $LN1@copy_block

; 1242 :         put_byte(s, *buf++);

  00112	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00117	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0011a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0011f	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00123	48 8b 54 24 38	 mov	 rdx, QWORD PTR buf$[rsp]
  00128	0f b6 12	 movzx	 edx, BYTE PTR [rdx]
  0012b	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
  0012e	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00133	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00136	ff c0		 inc	 eax
  00138	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0013d	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  00140	48 8b 44 24 38	 mov	 rax, QWORD PTR buf$[rsp]
  00145	48 ff c0	 inc	 rax
  00148	48 89 44 24 38	 mov	 QWORD PTR buf$[rsp], rax

; 1243 :     }

  0014d	eb b1		 jmp	 SHORT $LN2@copy_block
$LN1@copy_block:

; 1244 : }

  0014f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00153	c3		 ret	 0
copy_block ENDP
_TEXT	ENDS
END
