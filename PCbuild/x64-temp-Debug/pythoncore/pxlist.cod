; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	PxList_Next
; Function compile flags: /Odtp
; File c:\src\pyparallel\python\pxlist.c
;	COMDAT PxList_Next
_TEXT	SEGMENT
item$ = 8
PxList_Next PROC					; COMDAT

; 34   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 35   :     return E2I(item->slist_entry.Next);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR item$[rsp]
  0000a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 36   : }

  0000d	c3		 ret	 0
PxList_Next ENDP
_TEXT	ENDS
PUBLIC	PxList_Malloc
EXTRN	memset:PROC
EXTRN	__imp__aligned_malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Malloc DD imagerel $LN4
	DD	imagerel $LN4+65
	DD	imagerel $unwind$PxList_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Malloc DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_Malloc
_TEXT	SEGMENT
p$ = 32
size$ = 64
PxList_Malloc PROC					; COMDAT

; 40   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 41   :     register void *p;
; 42   :     p = _aligned_malloc(size, MEMORY_ALLOCATION_ALIGNMENT);

  00009	ba 10 00 00 00	 mov	 edx, 16
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR size$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__aligned_malloc
  00019	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 43   :     if (p)

  0001e	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00024	74 11		 je	 SHORT $LN1@PxList_Mal

; 44   :         memset(p, 0, size);

  00026	4c 8b 44 24 40	 mov	 r8, QWORD PTR size$[rsp]
  0002b	33 d2		 xor	 edx, edx
  0002d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00032	e8 00 00 00 00	 call	 memset
$LN1@PxList_Mal:

; 45   :     return p;

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]

; 46   : }

  0003c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00040	c3		 ret	 0
PxList_Malloc ENDP
_TEXT	ENDS
PUBLIC	PxList_MallocFromHeap
EXTRN	PyErr_SetFromWindowsErr:PROC
EXTRN	__imp_HeapAlloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_MallocFromHeap DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$PxList_MallocFromHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_MallocFromHeap DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_MallocFromHeap
_TEXT	SEGMENT
p$ = 32
aligned$ = 40
heap_handle$ = 64
size$ = 72
PxList_MallocFromHeap PROC				; COMDAT

; 50   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 51   :     register void *p;
; 52   :     Py_ssize_t aligned = _Py_SIZE_ROUND_UP(size, MEMORY_ALLOCATION_ALIGNMENT);

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR size$[rsp]
  00013	48 83 c0 0f	 add	 rax, 15
  00017	48 83 e0 f0	 and	 rax, -16
  0001b	48 89 44 24 28	 mov	 QWORD PTR aligned$[rsp], rax

; 53   :     p = HeapAlloc(heap_handle, HEAP_ZERO_MEMORY, aligned);

  00020	4c 8b 44 24 28	 mov	 r8, QWORD PTR aligned$[rsp]
  00025	ba 08 00 00 00	 mov	 edx, 8
  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR heap_handle$[rsp]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapAlloc
  00035	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 54   :     if (!p)

  0003a	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00040	75 07		 jne	 SHORT $LN1@PxList_Mal@2

; 55   :         PyErr_SetFromWindowsErr(0);

  00042	33 c9		 xor	 ecx, ecx
  00044	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN1@PxList_Mal@2:

; 56   :     return p;

  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]

; 57   : }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
PxList_MallocFromHeap ENDP
_TEXT	ENDS
PUBLIC	PxList_Free
EXTRN	__imp__aligned_free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Free DD imagerel $LN4
	DD	imagerel $LN4+35
	DD	imagerel $unwind$PxList_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Free DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_Free
_TEXT	SEGMENT
p$ = 48
PxList_Free PROC					; COMDAT

; 61   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 62   :     if (!p)

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR p$[rsp], 0
  0000f	75 02		 jne	 SHORT $LN1@PxList_Fre

; 63   :         return;

  00011	eb 0b		 jmp	 SHORT $LN2@PxList_Fre
$LN1@PxList_Fre:

; 64   :     _aligned_free(p);

  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__aligned_free
$LN2@PxList_Fre:

; 65   : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
PxList_Free ENDP
_TEXT	ENDS
PUBLIC	PxList_New
EXTRN	__imp_InitializeSListHead:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_New DD imagerel $LN4
	DD	imagerel $LN4+52
	DD	imagerel $unwind$PxList_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_New DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_New
_TEXT	SEGMENT
l$ = 32
PxList_New PROC						; COMDAT

; 69   : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 70   :     PxListHead *l = (PxListHead *)PxList_Malloc(sizeof(PxListHead));

  00004	b9 10 00 00 00	 mov	 ecx, 16
  00009	e8 00 00 00 00	 call	 PxList_Malloc
  0000e	48 89 44 24 20	 mov	 QWORD PTR l$[rsp], rax

; 71   :     if (!l)

  00013	48 83 7c 24 20
	00		 cmp	 QWORD PTR l$[rsp], 0
  00019	75 04		 jne	 SHORT $LN1@PxList_New

; 72   :         return NULL;

  0001b	33 c0		 xor	 eax, eax
  0001d	eb 10		 jmp	 SHORT $LN2@PxList_New
$LN1@PxList_New:

; 73   : 
; 74   :     InitializeSListHead(l);

  0001f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR l$[rsp]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeSListHead

; 75   :     return l;

  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR l$[rsp]
$LN2@PxList_New:

; 76   : }

  0002f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00033	c3		 ret	 0
PxList_New ENDP
_TEXT	ENDS
PUBLIC	PxList_NewFromHeap
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_NewFromHeap DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$PxList_NewFromHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_NewFromHeap DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_NewFromHeap
_TEXT	SEGMENT
l$ = 32
heap_handle$ = 64
PxList_NewFromHeap PROC					; COMDAT

; 80   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 81   :     PxListHead *l = (PxListHead *)PxList_MallocFromHeap(heap_handle,
; 82   :                                                         sizeof(PxListHead));

  00009	ba 10 00 00 00	 mov	 edx, 16
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR heap_handle$[rsp]
  00013	e8 00 00 00 00	 call	 PxList_MallocFromHeap
  00018	48 89 44 24 20	 mov	 QWORD PTR l$[rsp], rax

; 83   :     if (!l)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR l$[rsp], 0
  00023	75 04		 jne	 SHORT $LN1@PxList_New@2

; 84   :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 10		 jmp	 SHORT $LN2@PxList_New@2
$LN1@PxList_New@2:

; 85   : 
; 86   :     InitializeSListHead(l);

  00029	48 8b 4c 24 20	 mov	 rcx, QWORD PTR l$[rsp]
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeSListHead

; 87   :     return l;

  00034	48 8b 44 24 20	 mov	 rax, QWORD PTR l$[rsp]
$LN2@PxList_New@2:

; 88   : }

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
PxList_NewFromHeap ENDP
_TEXT	ENDS
PUBLIC	PxList_TimestampItem
; Function compile flags: /Odtp
;	COMDAT PxList_TimestampItem
_TEXT	SEGMENT
item$ = 8
PxList_TimestampItem PROC				; COMDAT

; 92   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 93   :     item->when = _Py_rdtsc();

  00005	0f 31		 rdtsc
  00007	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  0000b	48 0b c2	 or	 rax, rdx
  0000e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR item$[rsp]
  00013	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 94   : }

  00017	c3		 ret	 0
PxList_TimestampItem ENDP
_TEXT	ENDS
PUBLIC	PxList_NewItem
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_NewItem DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$PxList_NewItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_NewItem DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_NewItem
_TEXT	SEGMENT
PxList_NewItem PROC					; COMDAT

; 98   : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 99   :     return E2I(PxList_Malloc(sizeof(PxListItem)));

  00004	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00009	e8 00 00 00 00	 call	 PxList_Malloc

; 100  : }

  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	c3		 ret	 0
PxList_NewItem ENDP
_TEXT	ENDS
PUBLIC	PxList_FreeListHead
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_FreeListHead DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$PxList_FreeListHead
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_FreeListHead DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_FreeListHead
_TEXT	SEGMENT
head$ = 48
PxList_FreeListHead PROC				; COMDAT

; 104  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 105  :     /* xxx todo: manage a list of free item lists */
; 106  :     PxList_Free(head);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR head$[rsp]
  0000e	e8 00 00 00 00	 call	 PxList_Free

; 107  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
PxList_FreeListHead ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DE@LDPFGNLE@?$AAP?$AAx?$AAL?$AAi?$AAs?$AAt?$AA_?$AAN?$AAe?$AAx?$AAt?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@NLGOHGEA@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAx?$AAl?$AAi?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	PxList_FreeListItem
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_FreeListItem DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$PxList_FreeListItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_FreeListItem DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_1DE@LDPFGNLE@?$AAP?$AAx?$AAL?$AAi?$AAs?$AAt?$AA_?$AAN?$AAe?$AAx?$AAt?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@LDPFGNLE@?$AAP?$AAx?$AAL?$AAi?$AAs?$AAt?$AA_?$AAN?$AAe?$AAx?$AAt?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'P'
	DB	00H, 'x', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'N', 00H, 'e', 00H, 'x', 00H, 't', 00H, '(', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, 'm', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@NLGOHGEA@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAx?$AAl?$AAi?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@NLGOHGEA@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAx?$AAl?$AAi?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'p', 00H, 'x', 00H, 'l', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxList_FreeListItem
_TEXT	SEGMENT
item$ = 48
PxList_FreeListItem PROC				; COMDAT

; 111  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 112  :     /* xxx todo: manage a list of free item lists */
; 113  :     assert(PxList_Next(item) == NULL);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR item$[rsp]
  0000e	e8 00 00 00 00	 call	 PxList_Next
  00013	48 85 c0	 test	 rax, rax
  00016	74 1c		 je	 SHORT $LN3@PxList_Fre@2
  00018	41 b8 71 00 00
	00		 mov	 r8d, 113		; 00000071H
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NLGOHGEA@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAx?$AAl?$AAi?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@LDPFGNLE@?$AAP?$AAx?$AAL?$AAi?$AAs?$AAt?$AA_?$AAN?$AAe?$AAx?$AAt?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00032	33 c0		 xor	 eax, eax
$LN3@PxList_Fre@2:

; 114  :     PxList_Free(item);

  00034	48 8b 4c 24 30	 mov	 rcx, QWORD PTR item$[rsp]
  00039	e8 00 00 00 00	 call	 PxList_Free

; 115  : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
PxList_FreeListItem ENDP
_TEXT	ENDS
PUBLIC	PxList_FreeListItemAfterNext
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_FreeListItemAfterNext DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$PxList_FreeListItemAfterNext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_FreeListItemAfterNext DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_FreeListItemAfterNext
_TEXT	SEGMENT
next$ = 32
item$ = 64
PxList_FreeListItemAfterNext PROC			; COMDAT

; 119  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 120  :     PxListItem *next = PxList_Next(item);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR item$[rsp]
  0000e	e8 00 00 00 00	 call	 PxList_Next
  00013	48 89 44 24 20	 mov	 QWORD PTR next$[rsp], rax

; 121  :     PxList_FreeListItem(item);

  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR item$[rsp]
  0001d	e8 00 00 00 00	 call	 PxList_FreeListItem

; 122  :     return next;

  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR next$[rsp]

; 123  : }

  00027	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002b	c3		 ret	 0
PxList_FreeListItemAfterNext ENDP
_TEXT	ENDS
PUBLIC	PxList_SeverFromNext
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_SeverFromNext DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$PxList_SeverFromNext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_SeverFromNext DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_SeverFromNext
_TEXT	SEGMENT
next$ = 0
item$ = 32
PxList_SeverFromNext PROC				; COMDAT

; 127  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 128  :     PxListItem *next = E2I(item->slist_entry.Next);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR item$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 04 24	 mov	 QWORD PTR next$[rsp], rax

; 129  :     item->slist_entry.Next = NULL;

  00015	48 8b 44 24 20	 mov	 rax, QWORD PTR item$[rsp]
  0001a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 130  :     return next;

  00021	48 8b 04 24	 mov	 rax, QWORD PTR next$[rsp]

; 131  : }

  00025	48 83 c4 18	 add	 rsp, 24
  00029	c3		 ret	 0
PxList_SeverFromNext ENDP
_TEXT	ENDS
PUBLIC	PxList_QueryDepth
EXTRN	__imp_QueryDepthSList:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_QueryDepth DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$PxList_QueryDepth
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_QueryDepth DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_QueryDepth
_TEXT	SEGMENT
head$ = 48
PxList_QueryDepth PROC					; COMDAT

; 135  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 136  :     return QueryDepthSList(head);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR head$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryDepthSList

; 137  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
PxList_QueryDepth ENDP
_TEXT	ENDS
PUBLIC	PxList_FlushWithDepthHint
EXTRN	__imp_InterlockedFlushSList:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_FlushWithDepthHint DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$PxList_FlushWithDepthHint
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_FlushWithDepthHint DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_FlushWithDepthHint
_TEXT	SEGMENT
head$ = 48
depth_hint$ = 56
PxList_FlushWithDepthHint PROC				; COMDAT

; 142  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 143  :     if (depth_hint)

  0000e	48 83 7c 24 38
	00		 cmp	 QWORD PTR depth_hint$[rsp], 0
  00014	74 13		 je	 SHORT $LN1@PxList_Flu

; 144  :         *depth_hint = QueryDepthSList(head);

  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR head$[rsp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryDepthSList
  00021	48 8b 4c 24 38	 mov	 rcx, QWORD PTR depth_hint$[rsp]
  00026	66 89 01	 mov	 WORD PTR [rcx], ax
$LN1@PxList_Flu:

; 145  :     return E2I(InterlockedFlushSList(head));

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR head$[rsp]
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InterlockedFlushSList

; 146  : }

  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
PxList_FlushWithDepthHint ENDP
_TEXT	ENDS
PUBLIC	PxList_Flush
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Flush DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$PxList_Flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Flush DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_Flush
_TEXT	SEGMENT
head$ = 48
PxList_Flush PROC					; COMDAT

; 150  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 151  :     return E2I(InterlockedFlushSList(head));

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR head$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InterlockedFlushSList

; 152  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
PxList_Flush ENDP
_TEXT	ENDS
PUBLIC	PxList_Clear
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Clear DD imagerel $LN8
	DD	imagerel $LN8+93
	DD	imagerel $unwind$PxList_Clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Clear DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_Clear
_TEXT	SEGMENT
item$ = 32
head$ = 64
PxList_Clear PROC					; COMDAT

; 156  : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 157  :     register PxListItem *item;
; 158  : 
; 159  :     if (!head)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR head$[rsp], 0
  0000f	75 02		 jne	 SHORT $LN5@PxList_Cle

; 160  :         return;

  00011	eb 45		 jmp	 SHORT $LN6@PxList_Cle
$LN5@PxList_Cle:

; 161  : 
; 162  :     if (QueryDepthSList(head) == 0)

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR head$[rsp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryDepthSList
  0001e	0f b7 c0	 movzx	 eax, ax
  00021	85 c0		 test	 eax, eax
  00023	75 02		 jne	 SHORT $LN4@PxList_Cle

; 163  :         return;

  00025	eb 31		 jmp	 SHORT $LN6@PxList_Cle
$LN4@PxList_Cle:

; 164  : 
; 165  :     item = E2I(InterlockedFlushSList(head));

  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR head$[rsp]
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InterlockedFlushSList
  00032	48 89 44 24 20	 mov	 QWORD PTR item$[rsp], rax
$LN3@PxList_Cle:

; 166  : 
; 167  :     do {
; 168  :         PxList_FreeListItem(item);

  00037	48 8b 4c 24 20	 mov	 rcx, QWORD PTR item$[rsp]
  0003c	e8 00 00 00 00	 call	 PxList_FreeListItem

; 169  :     } while (item = PxList_Next(item));

  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR item$[rsp]
  00046	e8 00 00 00 00	 call	 PxList_Next
  0004b	48 89 44 24 20	 mov	 QWORD PTR item$[rsp], rax
  00050	48 83 7c 24 20
	00		 cmp	 QWORD PTR item$[rsp], 0
  00056	75 df		 jne	 SHORT $LN3@PxList_Cle
$LN6@PxList_Cle:

; 170  : 
; 171  :     return;
; 172  : }

  00058	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005c	c3		 ret	 0
PxList_Clear ENDP
_TEXT	ENDS
PUBLIC	PxList_FreeAllListItems
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_FreeAllListItems DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$PxList_FreeAllListItems
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_FreeAllListItems DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_FreeAllListItems
_TEXT	SEGMENT
item$ = 32
start$ = 64
PxList_FreeAllListItems PROC				; COMDAT

; 176  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 177  :     register PxListItem *item = start;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR start$[rsp]
  0000e	48 89 44 24 20	 mov	 QWORD PTR item$[rsp], rax
$LN3@PxList_Fre@3:

; 178  :     do {
; 179  :         PxList_FreeListItem(item);

  00013	48 8b 4c 24 20	 mov	 rcx, QWORD PTR item$[rsp]
  00018	e8 00 00 00 00	 call	 PxList_FreeListItem

; 180  :     } while (item = PxList_Next(item));

  0001d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR item$[rsp]
  00022	e8 00 00 00 00	 call	 PxList_Next
  00027	48 89 44 24 20	 mov	 QWORD PTR item$[rsp], rax
  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR item$[rsp], 0
  00032	75 df		 jne	 SHORT $LN3@PxList_Fre@3

; 181  : }

  00034	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00038	c3		 ret	 0
PxList_FreeAllListItems ENDP
_TEXT	ENDS
PUBLIC	PxList_Delete
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Delete DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$PxList_Delete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Delete DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_Delete
_TEXT	SEGMENT
head$ = 48
PxList_Delete PROC					; COMDAT

; 202  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 203  :     PxList_Free(head);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR head$[rsp]
  0000e	e8 00 00 00 00	 call	 PxList_Free

; 204  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
PxList_Delete ENDP
_TEXT	ENDS
PUBLIC	PxList_FreeList
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_FreeList DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$PxList_FreeList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_FreeList DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_FreeList
_TEXT	SEGMENT
head$ = 48
PxList_FreeList PROC					; COMDAT

; 208  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 209  :     PxList_Free(head);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR head$[rsp]
  0000e	e8 00 00 00 00	 call	 PxList_Free

; 210  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
PxList_FreeList ENDP
_TEXT	ENDS
PUBLIC	PxList_Push
EXTRN	__imp_InterlockedPushEntrySList:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Push DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$PxList_Push
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Push DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_Push
_TEXT	SEGMENT
head$ = 48
item$ = 56
PxList_Push PROC					; COMDAT

; 214  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 215  :     return E2I(InterlockedPushEntrySList(head, I2E(&item->slist_entry)));

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR item$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR head$[rsp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InterlockedPushEntrySList

; 216  : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
PxList_Push ENDP
_TEXT	ENDS
PUBLIC	PxList_PushObject
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_PushObject DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$PxList_PushObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_PushObject DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_PushObject
_TEXT	SEGMENT
head$ = 48
op$ = 56
PxList_PushObject PROC					; COMDAT

; 220  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 221  :     InterlockedPushEntrySList(head, O2E(op));

  0000e	48 8b 44 24 38	 mov	 rax, QWORD PTR op$[rsp]
  00013	48 83 c0 10	 add	 rax, 16
  00017	48 8b d0	 mov	 rdx, rax
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR head$[rsp]
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InterlockedPushEntrySList

; 222  : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
PxList_PushObject ENDP
_TEXT	ENDS
PUBLIC	PxList_Transfer
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Transfer DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$PxList_Transfer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Transfer DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_Transfer
_TEXT	SEGMENT
next$ = 32
head$ = 64
item$ = 72
PxList_Transfer PROC					; COMDAT

; 226  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 227  :     PxListItem *next = E2I(item->slist_entry.Next);

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR item$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 44 24 20	 mov	 QWORD PTR next$[rsp], rax

; 228  :     item->slist_entry.Next = NULL;

  0001b	48 8b 44 24 48	 mov	 rax, QWORD PTR item$[rsp]
  00020	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 229  :     PxList_Push(head, item);

  00027	48 8b 54 24 48	 mov	 rdx, QWORD PTR item$[rsp]
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR head$[rsp]
  00031	e8 00 00 00 00	 call	 PxList_Push

; 230  :     return next;

  00036	48 8b 44 24 20	 mov	 rax, QWORD PTR next$[rsp]

; 231  : }

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
PxList_Transfer ENDP
_TEXT	ENDS
PUBLIC	PxList_Pop
EXTRN	__imp_InterlockedPopEntrySList:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxList_Pop DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$PxList_Pop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxList_Pop DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxList_Pop
_TEXT	SEGMENT
head$ = 48
PxList_Pop PROC						; COMDAT

; 246  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 247  :     return E2I(InterlockedPopEntrySList(head));

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR head$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InterlockedPopEntrySList

; 248  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
PxList_Pop ENDP
_TEXT	ENDS
END
