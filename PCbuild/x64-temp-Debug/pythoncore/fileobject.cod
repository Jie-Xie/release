; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@INCPDHBH@stderrprinter?$AA@		; `string'
PUBLIC	??_C@_0BM@PHALLEFK@String?5giving?5the?5file?5mode?$AA@ ; `string'
PUBLIC	??_C@_04GMGOKAFF@mode?$AA@			; `string'
PUBLIC	??_C@_0BF@ONNNIPNG@Encoding?5of?5the?5file?$AA@	; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_0BL@DEDMGLDL@True?5if?5the?5file?5is?5closed?$AA@ ; `string'
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
PUBLIC	??_C@_06BMABDNNN@isatty?$AA@			; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	??_C@_06FFBIALPD@fileno?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	PyStdPrinter_Type
EXTRN	_PyObject_DebugFree:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_0O@INCPDHBH@stderrprinter?$AA@
CONST	SEGMENT
??_C@_0O@INCPDHBH@stderrprinter?$AA@ DB 'stderrprinter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PHALLEFK@String?5giving?5the?5file?5mode?$AA@
CONST	SEGMENT
??_C@_0BM@PHALLEFK@String?5giving?5the?5file?5mode?$AA@ DB 'String giving'
	DB	' the file mode', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMGOKAFF@mode?$AA@
CONST	SEGMENT
??_C@_04GMGOKAFF@mode?$AA@ DB 'mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ONNNIPNG@Encoding?5of?5the?5file?$AA@
CONST	SEGMENT
??_C@_0BF@ONNNIPNG@Encoding?5of?5the?5file?$AA@ DB 'Encoding of the file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DEDMGLDL@True?5if?5the?5file?5is?5closed?$AA@
CONST	SEGMENT
??_C@_0BL@DEDMGLDL@True?5if?5the?5file?5is?5closed?$AA@ DB 'True if the f'
	DB	'ile is closed', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
stdprinter_methods DQ FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:stdprinter_noop
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:stdprinter_noop
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	FLAT:stdprinter_fileno
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:stdprinter_isatty
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:stdprinter_write
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
stdprinter_getsetlist DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:get_closed
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BL@DEDMGLDL@True?5if?5the?5file?5is?5closed?$AA@
	ORG $+8
	DQ	FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DQ	FLAT:get_encoding
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BF@ONNNIPNG@Encoding?5of?5the?5file?$AA@
	ORG $+8
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	FLAT:get_mode
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0BM@PHALLEFK@String?5giving?5the?5file?5mode?$AA@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyStdPrinter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0O@INCPDHBH@stderrprinter?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:stdprinter_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:stdprinter_methods
	DQ	0000000000000000H
	DQ	FLAT:stdprinter_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:stdprinter_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:stdprinter_new
	DQ	FLAT:_PyObject_DebugFree
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_06BMABDNNN@isatty?$AA@
CONST	SEGMENT
??_C@_06BMABDNNN@isatty?$AA@ DB 'isatty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFBIALPD@fileno?$AA@
CONST	SEGMENT
??_C@_06FFBIALPD@fileno?$AA@ DB 'fileno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_fileno@?1??PyObject_AsFileDescriptor@@9@9 DQ 0000000000000000H ; `PyObject_AsFileDescriptor'::`2'::PyId_fileno
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	0000000000000000H
?PyId_write@?1??PyFile_WriteObject@@9@9 DQ 0000000000000000H ; `PyFile_WriteObject'::`2'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
?PyId_readline@?3??PyFile_GetLine@@9@9 DQ 0000000000000000H ; `PyFile_GetLine'::`4'::PyId_readline
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	0000000000000000H
?PyId_open@?1??PyFile_FromFd@@9@9 DQ 0000000000000000H	; `PyFile_FromFd'::`2'::PyId_open
	DQ	FLAT:??_C@_04PMOCAHAA@open?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_07ICHCJMKI@isisssi?$AA@			; `string'
PUBLIC	??_C@_02KFNNKBCK@io?$AA@			; `string'
PUBLIC	PyFile_FromFd
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	PyImport_ImportModule:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\objects\fileobject.c
pdata	SEGMENT
$pdata$PyFile_FromFd DD imagerel $LN5
	DD	imagerel $LN5+217
	DD	imagerel $unwind$PyFile_FromFd
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFile_FromFd DD 011701H
	DD	0c217H
xdata	ENDS
;	COMDAT ??_C@_07ICHCJMKI@isisssi?$AA@
CONST	SEGMENT
??_C@_07ICHCJMKI@isisssi?$AA@ DB 'isisssi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KFNNKBCK@io?$AA@
CONST	SEGMENT
??_C@_02KFNNKBCK@io?$AA@ DB 'io', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFile_FromFd
_TEXT	SEGMENT
io$ = 80
stream$ = 88
fd$ = 112
name$ = 120
mode$ = 128
buffering$ = 136
encoding$ = 144
errors$ = 152
newline$ = 160
closefd$ = 168
PyFile_FromFd PROC					; COMDAT

; 31   : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 32   :     PyObject *io, *stream;
; 33   :     _Py_IDENTIFIER(open);
; 34   : 
; 35   :     io = PyImport_ImportModule("io");

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KFNNKBCK@io?$AA@
  0001e	e8 00 00 00 00	 call	 PyImport_ImportModule
  00023	48 89 44 24 50	 mov	 QWORD PTR io$[rsp], rax

; 36   :     if (io == NULL)

  00028	48 83 7c 24 50
	00		 cmp	 QWORD PTR io$[rsp], 0
  0002e	75 07		 jne	 SHORT $LN2@PyFile_Fro

; 37   :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	e9 9d 00 00 00	 jmp	 $LN3@PyFile_Fro
$LN2@PyFile_Fro:

; 38   :     stream = _PyObject_CallMethodId(io, &PyId_open, "isisssi", fd, mode,
; 39   :                                  buffering, encoding, errors,
; 40   :                                  newline, closefd);

  00037	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_open@?1??PyFile_FromFd@@9@9
  0003c	8b c0		 mov	 eax, eax
  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00044	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00051	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR closefd$[rsp]
  00058	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0005c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR newline$[rsp]
  00064	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00069	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR errors$[rsp]
  00071	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00076	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR encoding$[rsp]
  0007e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00083	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR buffering$[rsp]
  0008a	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  0008e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR mode$[rsp]
  00096	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0009b	44 8b 4c 24 70	 mov	 r9d, DWORD PTR fd$[rsp]
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07ICHCJMKI@isisssi?$AA@
  000a7	48 8b d0	 mov	 rdx, rax
  000aa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR io$[rsp]
  000af	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  000b4	48 89 44 24 58	 mov	 QWORD PTR stream$[rsp], rax

; 41   :     Py_DECREF(io);

  000b9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR io$[rsp]
  000be	e8 00 00 00 00	 call	 _Py_DecRef

; 42   :     if (stream == NULL)

  000c3	48 83 7c 24 58
	00		 cmp	 QWORD PTR stream$[rsp], 0
  000c9	75 04		 jne	 SHORT $LN1@PyFile_Fro

; 43   :         return NULL;

  000cb	33 c0		 xor	 eax, eax
  000cd	eb 05		 jmp	 SHORT $LN3@PyFile_Fro
$LN1@PyFile_Fro:

; 44   :     /* ignore name attribute because the name attribute of _BufferedIOMixin
; 45   :        and TextIOWrapper is read only */
; 46   :     return stream;

  000cf	48 8b 44 24 58	 mov	 rax, QWORD PTR stream$[rsp]
$LN3@PyFile_Fro:

; 47   : }

  000d4	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000d8	c3		 ret	 0
PyFile_FromFd ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FC@MJBNDFJN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_1DK@OPLJJHJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@MFOFADBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@CHIDEPLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BI@LFAMHIIP@EOF?5when?5reading?5a?5line?$AA@ ; `string'
PUBLIC	??_C@_1CM@NOKOGCDJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CG@EJCLHJFO@object?4readline?$CI?$CJ?5returned?5non?9s@ ; `string'
PUBLIC	??_C@_03LIHNMIHG@?$CIi?$CJ?$AA@			; `string'
PUBLIC	??_C@_0BI@IGLOKEDB@?4?4?2Objects?2fileobject?4c?$AA@ ; `string'
PUBLIC	PyFile_GetLine
EXTRN	PyUnicode_Substring:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	_PyBytes_Resize:PROC
EXTRN	PyExc_EOFError:QWORD
EXTRN	__imp__wassert:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	_Py_BuildValue_SizeT:PROC
EXTRN	PyTuple_New:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\fileobject.c
pdata	SEGMENT
$pdata$PyFile_GetLine DD imagerel $LN57
	DD	imagerel $LN57+2291
	DD	imagerel $unwind$PyFile_GetLine
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFile_GetLine DD 021001H
	DD	0150110H
xdata	ENDS
;	COMDAT ??_C@_1FC@MJBNDFJN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1FC@MJBNDFJN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@OPLJJHJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@OPLJJHJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ')'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@MFOFADBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@MFOFADBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'u', 00H, 'l', 00H, 't', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@CHIDEPLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@CHIDEPLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H
	DB	'l', 00H, 't', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LFAMHIIP@EOF?5when?5reading?5a?5line?$AA@
CONST	SEGMENT
??_C@_0BI@LFAMHIIP@EOF?5when?5reading?5a?5line?$AA@ DB 'EOF when reading '
	DB	'a line', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NOKOGCDJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@NOKOGCDJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EJCLHJFO@object?4readline?$CI?$CJ?5returned?5non?9s@
CONST	SEGMENT
??_C@_0CG@EJCLHJFO@object?4readline?$CI?$CJ?5returned?5non?9s@ DB 'object'
	DB	'.readline() returned non-string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LIHNMIHG@?$CIi?$CJ?$AA@
CONST	SEGMENT
??_C@_03LIHNMIHG@?$CIi?$CJ?$AA@ DB '(i)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IGLOKEDB@?4?4?2Objects?2fileobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@IGLOKEDB@?4?4?2Objects?2fileobject?4c?$AA@ DB '..\Objects\fileo'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFile_GetLine
_TEXT	SEGMENT
result$ = 32
args$20340 = 40
reader$20339 = 48
s$20368 = 56
len$20374 = 64
v$20386 = 72
len$20391 = 80
v$20470 = 88
tv273 = 96
tv282 = 104
tv400 = 112
tv339 = 120
tv348 = 128
tv399 = 136
tv386 = 144
tv395 = 152
f$ = 176
n$ = 184
PyFile_GetLine PROC					; COMDAT

; 51   : {

$LN57:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 52   :     PyObject *result;
; 53   : 
; 54   :     if (f == NULL) {

  00010	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR f$[rsp], 0
  00019	75 18		 jne	 SHORT $LN16@PyFile_Get

; 55   :         PyErr_BadInternalCall();

  0001b	ba 37 00 00 00	 mov	 edx, 55			; 00000037H
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@IGLOKEDB@?4?4?2Objects?2fileobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 56   :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	e9 b8 08 00 00	 jmp	 $LN17@PyFile_Get
$LN16@PyFile_Get:

; 57   :     }
; 58   : 
; 59   :     {
; 60   :         PyObject *reader;
; 61   :         PyObject *args;
; 62   :         _Py_IDENTIFIER(readline);
; 63   : 
; 64   :         reader = _PyObject_GetAttrId(f, &PyId_readline);

  00033	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_readline@?3??PyFile_GetLine@@9@9
  00038	8b c0		 mov	 eax, eax
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00040	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00049	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0004d	48 8b d0	 mov	 rdx, rax
  00050	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  00058	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0005d	48 89 44 24 30	 mov	 QWORD PTR reader$20339[rsp], rax

; 65   :         if (reader == NULL)

  00062	48 83 7c 24 30
	00		 cmp	 QWORD PTR reader$20339[rsp], 0
  00068	75 07		 jne	 SHORT $LN15@PyFile_Get

; 66   :             return NULL;

  0006a	33 c0		 xor	 eax, eax
  0006c	e9 7a 08 00 00	 jmp	 $LN17@PyFile_Get
$LN15@PyFile_Get:

; 67   :         if (n <= 0)

  00071	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR n$[rsp], 0
  00079	7f 0e		 jg	 SHORT $LN14@PyFile_Get

; 68   :             args = PyTuple_New(0);

  0007b	33 c9		 xor	 ecx, ecx
  0007d	e8 00 00 00 00	 call	 PyTuple_New
  00082	48 89 44 24 28	 mov	 QWORD PTR args$20340[rsp], rax

; 69   :         else

  00087	eb 18		 jmp	 SHORT $LN13@PyFile_Get
$LN14@PyFile_Get:

; 70   :             args = Py_BuildValue("(i)", n);

  00089	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR n$[rsp]
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03LIHNMIHG@?$CIi?$CJ?$AA@
  00097	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  0009c	48 89 44 24 28	 mov	 QWORD PTR args$20340[rsp], rax
$LN13@PyFile_Get:

; 71   :         if (args == NULL) {

  000a1	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$20340[rsp], 0
  000a7	75 11		 jne	 SHORT $LN12@PyFile_Get

; 72   :             Py_DECREF(reader);

  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR reader$20339[rsp]
  000ae	e8 00 00 00 00	 call	 _Py_DecRef

; 73   :             return NULL;

  000b3	33 c0		 xor	 eax, eax
  000b5	e9 31 08 00 00	 jmp	 $LN17@PyFile_Get
$LN12@PyFile_Get:

; 74   :         }
; 75   :         result = PyEval_CallObject(reader, args);

  000ba	45 33 c0	 xor	 r8d, r8d
  000bd	48 8b 54 24 28	 mov	 rdx, QWORD PTR args$20340[rsp]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR reader$20339[rsp]
  000c7	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  000cc	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 76   :         Py_DECREF(reader);

  000d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR reader$20339[rsp]
  000d6	e8 00 00 00 00	 call	 _Py_DecRef

; 77   :         Py_DECREF(args);

  000db	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$20340[rsp]
  000e0	e8 00 00 00 00	 call	 _Py_DecRef

; 78   :         if (result != NULL && !PyBytes_Check(result) &&
; 79   :             !PyUnicode_Check(result)) {

  000e5	48 83 7c 24 20
	00		 cmp	 QWORD PTR result$[rsp], 0
  000eb	74 56		 je	 SHORT $LN11@PyFile_Get
  000ed	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  000f2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000fc	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00101	85 c0		 test	 eax, eax
  00103	75 3e		 jne	 SHORT $LN11@PyFile_Get
  00105	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0010a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00114	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00119	85 c0		 test	 eax, eax
  0011b	75 26		 jne	 SHORT $LN11@PyFile_Get

; 80   :             Py_DECREF(result);

  0011d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  00122	e8 00 00 00 00	 call	 _Py_DecRef

; 81   :             result = NULL;

  00127	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 82   :             PyErr_SetString(PyExc_TypeError,
; 83   :                        "object.readline() returned non-string");

  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@EJCLHJFO@object?4readline?$CI?$CJ?5returned?5non?9s@
  00137	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0013e	e8 00 00 00 00	 call	 PyErr_SetString
$LN11@PyFile_Get:

; 84   :         }
; 85   :     }
; 86   : 
; 87   :     if (n < 0 && result != NULL && PyBytes_Check(result)) {

  00143	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR n$[rsp], 0
  0014b	0f 8d 46 01 00
	00		 jge	 $LN10@PyFile_Get
  00151	48 83 7c 24 20
	00		 cmp	 QWORD PTR result$[rsp], 0
  00157	0f 84 3a 01 00
	00		 je	 $LN10@PyFile_Get
  0015d	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00162	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00166	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0016c	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00171	85 c0		 test	 eax, eax
  00173	0f 84 1e 01 00
	00		 je	 $LN10@PyFile_Get

; 88   :         char *s = PyBytes_AS_STRING(result);

  00179	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0017e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00182	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00188	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0018d	85 c0		 test	 eax, eax
  0018f	75 1c		 jne	 SHORT $LN19@PyFile_Get
  00191	41 b8 58 00 00
	00		 mov	 r8d, 88			; 00000058H
  00197	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NOKOGCDJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ab	33 c0		 xor	 eax, eax
$LN19@PyFile_Get:
  001ad	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  001b2	48 83 c0 78	 add	 rax, 120		; 00000078H
  001b6	48 89 44 24 38	 mov	 QWORD PTR s$20368[rsp], rax

; 89   :         Py_ssize_t len = PyBytes_GET_SIZE(result);

  001bb	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  001c0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001c4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001ca	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001cf	85 c0		 test	 eax, eax
  001d1	75 1c		 jne	 SHORT $LN20@PyFile_Get
  001d3	41 b8 59 00 00
	00		 mov	 r8d, 89			; 00000059H
  001d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NOKOGCDJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  001e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ed	33 c0		 xor	 eax, eax
$LN20@PyFile_Get:
  001ef	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  001f4	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001f8	48 89 44 24 40	 mov	 QWORD PTR len$20374[rsp], rax

; 90   :         if (len == 0) {

  001fd	48 83 7c 24 40
	00		 cmp	 QWORD PTR len$20374[rsp], 0
  00203	75 28		 jne	 SHORT $LN9@PyFile_Get

; 91   :             Py_DECREF(result);

  00205	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  0020a	e8 00 00 00 00	 call	 _Py_DecRef

; 92   :             result = NULL;

  0020f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 93   :             PyErr_SetString(PyExc_EOFError,
; 94   :                             "EOF when reading a line");

  00218	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LFAMHIIP@EOF?5when?5reading?5a?5line?$AA@
  0021f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  00226	e8 00 00 00 00	 call	 PyErr_SetString
  0022b	eb 6a		 jmp	 SHORT $LN8@PyFile_Get
$LN9@PyFile_Get:

; 95   :         }
; 96   :         else if (s[len-1] == '\n') {

  0022d	48 8b 44 24 40	 mov	 rax, QWORD PTR len$20374[rsp]
  00232	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$20368[rsp]
  00237	48 03 c8	 add	 rcx, rax
  0023a	48 8b c1	 mov	 rax, rcx
  0023d	0f be 40 ff	 movsx	 eax, BYTE PTR [rax-1]
  00241	83 f8 0a	 cmp	 eax, 10
  00244	75 51		 jne	 SHORT $LN7@PyFile_Get

; 97   :             if (result->ob_refcnt == 1)

  00246	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0024b	48 83 78 50 01	 cmp	 QWORD PTR [rax+80], 1
  00250	75 17		 jne	 SHORT $LN6@PyFile_Get

; 98   :                 _PyBytes_Resize(&result, len-1);

  00252	48 8b 44 24 40	 mov	 rax, QWORD PTR len$20374[rsp]
  00257	48 ff c8	 dec	 rax
  0025a	48 8b d0	 mov	 rdx, rax
  0025d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00262	e8 00 00 00 00	 call	 _PyBytes_Resize

; 99   :             else {

  00267	eb 2e		 jmp	 SHORT $LN5@PyFile_Get
$LN6@PyFile_Get:

; 100  :                 PyObject *v;
; 101  :                 v = PyBytes_FromStringAndSize(s, len-1);

  00269	48 8b 44 24 40	 mov	 rax, QWORD PTR len$20374[rsp]
  0026e	48 ff c8	 dec	 rax
  00271	48 8b d0	 mov	 rdx, rax
  00274	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$20368[rsp]
  00279	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0027e	48 89 44 24 48	 mov	 QWORD PTR v$20386[rsp], rax

; 102  :                 Py_DECREF(result);

  00283	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  00288	e8 00 00 00 00	 call	 _Py_DecRef

; 103  :                 result = v;

  0028d	48 8b 44 24 48	 mov	 rax, QWORD PTR v$20386[rsp]
  00292	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax
$LN5@PyFile_Get:
$LN7@PyFile_Get:
$LN8@PyFile_Get:
$LN10@PyFile_Get:

; 104  :             }
; 105  :         }
; 106  :     }
; 107  :     if (n < 0 && result != NULL && PyUnicode_Check(result)) {

  00297	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR n$[rsp], 0
  0029f	0f 8d 41 06 00
	00		 jge	 $LN4@PyFile_Get
  002a5	48 83 7c 24 20
	00		 cmp	 QWORD PTR result$[rsp], 0
  002ab	0f 84 35 06 00
	00		 je	 $LN4@PyFile_Get
  002b1	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  002b6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002ba	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002c0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002c5	85 c0		 test	 eax, eax
  002c7	0f 84 19 06 00
	00		 je	 $LN4@PyFile_Get

; 108  :         Py_ssize_t len = PyUnicode_GET_LENGTH(result);

  002cd	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  002d2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002d6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002dc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002e1	85 c0		 test	 eax, eax
  002e3	75 1c		 jne	 SHORT $LN21@PyFile_Get
  002e5	41 b8 6c 00 00
	00		 mov	 r8d, 108		; 0000006cH
  002eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  002f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  002f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002ff	33 c0		 xor	 eax, eax
$LN21@PyFile_Get:
  00301	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00306	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00309	c1 e8 07	 shr	 eax, 7
  0030c	83 e0 01	 and	 eax, 1
  0030f	85 c0		 test	 eax, eax
  00311	75 1c		 jne	 SHORT $LN22@PyFile_Get
  00313	41 b8 6c 00 00
	00		 mov	 r8d, 108		; 0000006cH
  00319	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00320	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@CHIDEPLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  00327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0032d	33 c0		 xor	 eax, eax
$LN22@PyFile_Get:
  0032f	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00334	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00338	48 89 44 24 50	 mov	 QWORD PTR len$20391[rsp], rax

; 109  :         if (len == 0) {

  0033d	48 83 7c 24 50
	00		 cmp	 QWORD PTR len$20391[rsp], 0
  00343	75 2b		 jne	 SHORT $LN3@PyFile_Get

; 110  :             Py_DECREF(result);

  00345	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  0034a	e8 00 00 00 00	 call	 _Py_DecRef

; 111  :             result = NULL;

  0034f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 112  :             PyErr_SetString(PyExc_EOFError,
; 113  :                             "EOF when reading a line");

  00358	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LFAMHIIP@EOF?5when?5reading?5a?5line?$AA@
  0035f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  00366	e8 00 00 00 00	 call	 PyErr_SetString
  0036b	e9 76 05 00 00	 jmp	 $LN2@PyFile_Get
$LN3@PyFile_Get:

; 114  :         }
; 115  :         else if (PyUnicode_READ_CHAR(result, len-1) == '\n') {

  00370	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00375	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00379	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0037f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00384	85 c0		 test	 eax, eax
  00386	75 1c		 jne	 SHORT $LN23@PyFile_Get
  00388	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  0038e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00395	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  0039c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003a2	33 c0		 xor	 eax, eax
$LN23@PyFile_Get:
  003a4	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  003a9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003ac	c1 e8 07	 shr	 eax, 7
  003af	83 e0 01	 and	 eax, 1
  003b2	85 c0		 test	 eax, eax
  003b4	75 1c		 jne	 SHORT $LN24@PyFile_Get
  003b6	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  003bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  003c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@CHIDEPLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  003ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003d0	33 c0		 xor	 eax, eax
$LN24@PyFile_Get:
  003d2	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  003d7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003db	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003e1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003e6	85 c0		 test	 eax, eax
  003e8	75 1c		 jne	 SHORT $LN25@PyFile_Get
  003ea	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  003f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  003f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@MFOFADBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00404	33 c0		 xor	 eax, eax
$LN25@PyFile_Get:
  00406	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0040b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0040e	c1 e8 07	 shr	 eax, 7
  00411	83 e0 01	 and	 eax, 1
  00414	85 c0		 test	 eax, eax
  00416	75 1c		 jne	 SHORT $LN26@PyFile_Get
  00418	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  0041e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00425	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@OPLJJHJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0042c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00432	33 c0		 xor	 eax, eax
$LN26@PyFile_Get:
  00434	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00439	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0043c	c1 e8 02	 shr	 eax, 2
  0043f	83 e0 07	 and	 eax, 7
  00442	83 f8 01	 cmp	 eax, 1
  00445	0f 85 45 01 00
	00		 jne	 $LN55@PyFile_Get
  0044b	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00450	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00454	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0045a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0045f	85 c0		 test	 eax, eax
  00461	75 1c		 jne	 SHORT $LN27@PyFile_Get
  00463	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  00469	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00470	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@MFOFADBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00477	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0047d	33 c0		 xor	 eax, eax
$LN27@PyFile_Get:
  0047f	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00484	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00487	c1 e8 05	 shr	 eax, 5
  0048a	83 e0 01	 and	 eax, 1
  0048d	85 c0		 test	 eax, eax
  0048f	0f 84 a2 00 00
	00		 je	 $LN33@PyFile_Get
  00495	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0049a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0049e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004a4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004a9	85 c0		 test	 eax, eax
  004ab	75 1c		 jne	 SHORT $LN28@PyFile_Get
  004ad	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  004b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  004ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@MFOFADBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c7	33 c0		 xor	 eax, eax
$LN28@PyFile_Get:
  004c9	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  004ce	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004d1	c1 e8 07	 shr	 eax, 7
  004d4	83 e0 01	 and	 eax, 1
  004d7	85 c0		 test	 eax, eax
  004d9	75 1c		 jne	 SHORT $LN29@PyFile_Get
  004db	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  004e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  004e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@OPLJJHJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004f5	33 c0		 xor	 eax, eax
$LN29@PyFile_Get:
  004f7	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  004fc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004ff	c1 e8 06	 shr	 eax, 6
  00502	83 e0 01	 and	 eax, 1
  00505	85 c0		 test	 eax, eax
  00507	74 12		 je	 SHORT $LN30@PyFile_Get
  00509	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0050e	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00514	48 89 44 24 60	 mov	 QWORD PTR tv273[rsp], rax
  00519	eb 10		 jmp	 SHORT $LN31@PyFile_Get
$LN30@PyFile_Get:
  0051b	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00520	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00526	48 89 44 24 60	 mov	 QWORD PTR tv273[rsp], rax
$LN31@PyFile_Get:
  0052b	48 8b 44 24 60	 mov	 rax, QWORD PTR tv273[rsp]
  00530	48 89 44 24 68	 mov	 QWORD PTR tv282[rsp], rax
  00535	eb 3c		 jmp	 SHORT $LN34@PyFile_Get
$LN33@PyFile_Get:
  00537	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0053c	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00544	75 1c		 jne	 SHORT $LN32@PyFile_Get
  00546	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  0054c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00553	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@MJBNDFJN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  0055a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00560	33 c0		 xor	 eax, eax
$LN32@PyFile_Get:
  00562	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00567	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0056e	48 89 44 24 68	 mov	 QWORD PTR tv282[rsp], rax
$LN34@PyFile_Get:
  00573	48 8b 44 24 50	 mov	 rax, QWORD PTR len$20391[rsp]
  00578	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv282[rsp]
  0057d	48 03 c8	 add	 rcx, rax
  00580	48 8b c1	 mov	 rax, rcx
  00583	0f b6 40 ff	 movzx	 eax, BYTE PTR [rax-1]
  00587	89 44 24 70	 mov	 DWORD PTR tv400[rsp], eax
  0058b	e9 1f 03 00 00	 jmp	 $LN56@PyFile_Get
$LN55@PyFile_Get:
  00590	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00595	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00599	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0059f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  005a4	85 c0		 test	 eax, eax
  005a6	75 1c		 jne	 SHORT $LN35@PyFile_Get
  005a8	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  005ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  005b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@MFOFADBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  005bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005c2	33 c0		 xor	 eax, eax
$LN35@PyFile_Get:
  005c4	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  005c9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005cc	c1 e8 07	 shr	 eax, 7
  005cf	83 e0 01	 and	 eax, 1
  005d2	85 c0		 test	 eax, eax
  005d4	75 1c		 jne	 SHORT $LN36@PyFile_Get
  005d6	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  005dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  005e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@OPLJJHJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  005ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005f0	33 c0		 xor	 eax, eax
$LN36@PyFile_Get:
  005f2	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  005f7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005fa	c1 e8 02	 shr	 eax, 2
  005fd	83 e0 07	 and	 eax, 7
  00600	83 f8 02	 cmp	 eax, 2
  00603	0f 85 4c 01 00
	00		 jne	 $LN53@PyFile_Get
  00609	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0060e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00612	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00618	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0061d	85 c0		 test	 eax, eax
  0061f	75 1c		 jne	 SHORT $LN37@PyFile_Get
  00621	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  00627	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0062e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@MFOFADBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00635	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0063b	33 c0		 xor	 eax, eax
$LN37@PyFile_Get:
  0063d	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00642	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00645	c1 e8 05	 shr	 eax, 5
  00648	83 e0 01	 and	 eax, 1
  0064b	85 c0		 test	 eax, eax
  0064d	0f 84 a5 00 00
	00		 je	 $LN43@PyFile_Get
  00653	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00658	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0065c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00662	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00667	85 c0		 test	 eax, eax
  00669	75 1c		 jne	 SHORT $LN38@PyFile_Get
  0066b	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  00671	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00678	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@MFOFADBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0067f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00685	33 c0		 xor	 eax, eax
$LN38@PyFile_Get:
  00687	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0068c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0068f	c1 e8 07	 shr	 eax, 7
  00692	83 e0 01	 and	 eax, 1
  00695	85 c0		 test	 eax, eax
  00697	75 1c		 jne	 SHORT $LN39@PyFile_Get
  00699	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  0069f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  006a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@OPLJJHJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  006ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006b3	33 c0		 xor	 eax, eax
$LN39@PyFile_Get:
  006b5	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  006ba	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006bd	c1 e8 06	 shr	 eax, 6
  006c0	83 e0 01	 and	 eax, 1
  006c3	85 c0		 test	 eax, eax
  006c5	74 12		 je	 SHORT $LN40@PyFile_Get
  006c7	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  006cc	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  006d2	48 89 44 24 78	 mov	 QWORD PTR tv339[rsp], rax
  006d7	eb 10		 jmp	 SHORT $LN41@PyFile_Get
$LN40@PyFile_Get:
  006d9	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  006de	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  006e4	48 89 44 24 78	 mov	 QWORD PTR tv339[rsp], rax
$LN41@PyFile_Get:
  006e9	48 8b 44 24 78	 mov	 rax, QWORD PTR tv339[rsp]
  006ee	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv348[rsp], rax
  006f6	eb 3f		 jmp	 SHORT $LN44@PyFile_Get
$LN43@PyFile_Get:
  006f8	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  006fd	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00705	75 1c		 jne	 SHORT $LN42@PyFile_Get
  00707	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  0070d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00714	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@MJBNDFJN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  0071b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00721	33 c0		 xor	 eax, eax
$LN42@PyFile_Get:
  00723	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00728	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0072f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv348[rsp], rax
$LN44@PyFile_Get:
  00737	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv348[rsp]
  0073f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR len$20391[rsp]
  00744	0f b7 44 48 fe	 movzx	 eax, WORD PTR [rax+rcx*2-2]
  00749	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv399[rsp], eax
  00750	e9 4f 01 00 00	 jmp	 $LN54@PyFile_Get
$LN53@PyFile_Get:
  00755	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0075a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0075e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00764	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00769	85 c0		 test	 eax, eax
  0076b	75 1c		 jne	 SHORT $LN45@PyFile_Get
  0076d	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  00773	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0077a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@MFOFADBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00781	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00787	33 c0		 xor	 eax, eax
$LN45@PyFile_Get:
  00789	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0078e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00791	c1 e8 05	 shr	 eax, 5
  00794	83 e0 01	 and	 eax, 1
  00797	85 c0		 test	 eax, eax
  00799	0f 84 ae 00 00
	00		 je	 $LN51@PyFile_Get
  0079f	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  007a4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007a8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  007ae	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  007b3	85 c0		 test	 eax, eax
  007b5	75 1c		 jne	 SHORT $LN46@PyFile_Get
  007b7	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  007bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  007c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@MFOFADBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  007cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007d1	33 c0		 xor	 eax, eax
$LN46@PyFile_Get:
  007d3	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  007d8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  007db	c1 e8 07	 shr	 eax, 7
  007de	83 e0 01	 and	 eax, 1
  007e1	85 c0		 test	 eax, eax
  007e3	75 1c		 jne	 SHORT $LN47@PyFile_Get
  007e5	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  007eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  007f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@OPLJJHJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  007f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007ff	33 c0		 xor	 eax, eax
$LN47@PyFile_Get:
  00801	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00806	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00809	c1 e8 06	 shr	 eax, 6
  0080c	83 e0 01	 and	 eax, 1
  0080f	85 c0		 test	 eax, eax
  00811	74 15		 je	 SHORT $LN48@PyFile_Get
  00813	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00818	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0081e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv386[rsp], rax
  00826	eb 13		 jmp	 SHORT $LN49@PyFile_Get
$LN48@PyFile_Get:
  00828	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0082d	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00833	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv386[rsp], rax
$LN49@PyFile_Get:
  0083b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv386[rsp]
  00843	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv395[rsp], rax
  0084b	eb 3f		 jmp	 SHORT $LN52@PyFile_Get
$LN51@PyFile_Get:
  0084d	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00852	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0085a	75 1c		 jne	 SHORT $LN50@PyFile_Get
  0085c	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  00862	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00869	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@MJBNDFJN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  00870	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00876	33 c0		 xor	 eax, eax
$LN50@PyFile_Get:
  00878	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0087d	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00884	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv395[rsp], rax
$LN52@PyFile_Get:
  0088c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv395[rsp]
  00894	48 8b 4c 24 50	 mov	 rcx, QWORD PTR len$20391[rsp]
  00899	8b 44 88 fc	 mov	 eax, DWORD PTR [rax+rcx*4-4]
  0089d	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv399[rsp], eax
$LN54@PyFile_Get:
  008a4	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv399[rsp]
  008ab	89 44 24 70	 mov	 DWORD PTR tv400[rsp], eax
$LN56@PyFile_Get:
  008af	83 7c 24 70 0a	 cmp	 DWORD PTR tv400[rsp], 10
  008b4	75 30		 jne	 SHORT $LN1@PyFile_Get

; 116  :             PyObject *v;
; 117  :             v = PyUnicode_Substring(result, 0, len-1);

  008b6	48 8b 44 24 50	 mov	 rax, QWORD PTR len$20391[rsp]
  008bb	48 ff c8	 dec	 rax
  008be	4c 8b c0	 mov	 r8, rax
  008c1	33 d2		 xor	 edx, edx
  008c3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  008c8	e8 00 00 00 00	 call	 PyUnicode_Substring
  008cd	48 89 44 24 58	 mov	 QWORD PTR v$20470[rsp], rax

; 118  :             Py_DECREF(result);

  008d2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  008d7	e8 00 00 00 00	 call	 _Py_DecRef

; 119  :             result = v;

  008dc	48 8b 44 24 58	 mov	 rax, QWORD PTR v$20470[rsp]
  008e1	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax
$LN1@PyFile_Get:
$LN2@PyFile_Get:
$LN4@PyFile_Get:

; 120  :         }
; 121  :     }
; 122  :     return result;

  008e6	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
$LN17@PyFile_Get:

; 123  : }

  008eb	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  008f2	c3		 ret	 0
PyFile_GetLine ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@EMCDFIKA@writeobject?5with?5NULL?5file?$AA@ ; `string'
PUBLIC	PyFile_WriteObject
EXTRN	PyTuple_Pack:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	PyObject_Str:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFile_WriteObject DD imagerel $LN10
	DD	imagerel $LN10+329
	DD	imagerel $unwind$PyFile_WriteObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFile_WriteObject DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0BL@EMCDFIKA@writeobject?5with?5NULL?5file?$AA@
CONST	SEGMENT
??_C@_0BL@EMCDFIKA@writeobject?5with?5NULL?5file?$AA@ DB 'writeobject wit'
	DB	'h NULL file', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFile_WriteObject
_TEXT	SEGMENT
writer$ = 32
args$ = 40
value$ = 48
result$ = 56
v$ = 80
f$ = 88
flags$ = 96
PyFile_WriteObject PROC					; COMDAT

; 129  : {

$LN10:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 130  :     PyObject *writer, *value, *args, *result;
; 131  :     _Py_IDENTIFIER(write);
; 132  : 
; 133  :     if (f == NULL) {

  00013	48 83 7c 24 58
	00		 cmp	 QWORD PTR f$[rsp], 0
  00019	75 1d		 jne	 SHORT $LN7@PyFile_Wri

; 134  :         PyErr_SetString(PyExc_TypeError, "writeobject with NULL file");

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@EMCDFIKA@writeobject?5with?5NULL?5file?$AA@
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00029	e8 00 00 00 00	 call	 PyErr_SetString

; 135  :         return -1;

  0002e	b8 ff ff ff ff	 mov	 eax, -1
  00033	e9 0c 01 00 00	 jmp	 $LN8@PyFile_Wri
$LN7@PyFile_Wri:

; 136  :     }
; 137  :     writer = _PyObject_GetAttrId(f, &PyId_write);

  00038	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_write@?1??PyFile_WriteObject@@9@9
  0003d	8b c0		 mov	 eax, eax
  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00045	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00052	48 8b d0	 mov	 rdx, rax
  00055	48 8b 4c 24 58	 mov	 rcx, QWORD PTR f$[rsp]
  0005a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0005f	48 89 44 24 20	 mov	 QWORD PTR writer$[rsp], rax

; 138  :     if (writer == NULL)

  00064	48 83 7c 24 20
	00		 cmp	 QWORD PTR writer$[rsp], 0
  0006a	75 0a		 jne	 SHORT $LN6@PyFile_Wri

; 139  :         return -1;

  0006c	b8 ff ff ff ff	 mov	 eax, -1
  00071	e9 ce 00 00 00	 jmp	 $LN8@PyFile_Wri
$LN6@PyFile_Wri:

; 140  :     if (flags & Py_PRINT_RAW) {

  00076	8b 44 24 60	 mov	 eax, DWORD PTR flags$[rsp]
  0007a	83 e0 01	 and	 eax, 1
  0007d	85 c0		 test	 eax, eax
  0007f	74 11		 je	 SHORT $LN5@PyFile_Wri

; 141  :         value = PyObject_Str(v);

  00081	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  00086	e8 00 00 00 00	 call	 PyObject_Str
  0008b	48 89 44 24 30	 mov	 QWORD PTR value$[rsp], rax

; 142  :     }
; 143  :     else

  00090	eb 0f		 jmp	 SHORT $LN4@PyFile_Wri
$LN5@PyFile_Wri:

; 144  :         value = PyObject_Repr(v);

  00092	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  00097	e8 00 00 00 00	 call	 PyObject_Repr
  0009c	48 89 44 24 30	 mov	 QWORD PTR value$[rsp], rax
$LN4@PyFile_Wri:

; 145  :     if (value == NULL) {

  000a1	48 83 7c 24 30
	00		 cmp	 QWORD PTR value$[rsp], 0
  000a7	75 14		 jne	 SHORT $LN3@PyFile_Wri

; 146  :         Py_DECREF(writer);

  000a9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR writer$[rsp]
  000ae	e8 00 00 00 00	 call	 _Py_DecRef

; 147  :         return -1;

  000b3	b8 ff ff ff ff	 mov	 eax, -1
  000b8	e9 87 00 00 00	 jmp	 $LN8@PyFile_Wri
$LN3@PyFile_Wri:

; 148  :     }
; 149  :     args = PyTuple_Pack(1, value);

  000bd	48 8b 54 24 30	 mov	 rdx, QWORD PTR value$[rsp]
  000c2	b9 01 00 00 00	 mov	 ecx, 1
  000c7	e8 00 00 00 00	 call	 PyTuple_Pack
  000cc	48 89 44 24 28	 mov	 QWORD PTR args$[rsp], rax

; 150  :     if (args == NULL) {

  000d1	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  000d7	75 1b		 jne	 SHORT $LN2@PyFile_Wri

; 151  :         Py_DECREF(value);

  000d9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR value$[rsp]
  000de	e8 00 00 00 00	 call	 _Py_DecRef

; 152  :         Py_DECREF(writer);

  000e3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR writer$[rsp]
  000e8	e8 00 00 00 00	 call	 _Py_DecRef

; 153  :         return -1;

  000ed	b8 ff ff ff ff	 mov	 eax, -1
  000f2	eb 50		 jmp	 SHORT $LN8@PyFile_Wri
$LN2@PyFile_Wri:

; 154  :     }
; 155  :     result = PyEval_CallObject(writer, args);

  000f4	45 33 c0	 xor	 r8d, r8d
  000f7	48 8b 54 24 28	 mov	 rdx, QWORD PTR args$[rsp]
  000fc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR writer$[rsp]
  00101	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00106	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 156  :     Py_DECREF(args);

  0010b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  00110	e8 00 00 00 00	 call	 _Py_DecRef

; 157  :     Py_DECREF(value);

  00115	48 8b 4c 24 30	 mov	 rcx, QWORD PTR value$[rsp]
  0011a	e8 00 00 00 00	 call	 _Py_DecRef

; 158  :     Py_DECREF(writer);

  0011f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR writer$[rsp]
  00124	e8 00 00 00 00	 call	 _Py_DecRef

; 159  :     if (result == NULL)

  00129	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  0012f	75 07		 jne	 SHORT $LN1@PyFile_Wri

; 160  :         return -1;

  00131	b8 ff ff ff ff	 mov	 eax, -1
  00136	eb 0c		 jmp	 SHORT $LN8@PyFile_Wri
$LN1@PyFile_Wri:

; 161  :     Py_DECREF(result);

  00138	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  0013d	e8 00 00 00 00	 call	 _Py_DecRef

; 162  :     return 0;

  00142	33 c0		 xor	 eax, eax
$LN8@PyFile_Wri:

; 163  : }

  00144	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00148	c3		 ret	 0
PyFile_WriteObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@MOMOFDKF@null?5file?5for?5PyFile_WriteString@ ; `string'
PUBLIC	PyFile_WriteString
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFile_WriteString DD imagerel $LN9
	DD	imagerel $LN9+153
	DD	imagerel $unwind$PyFile_WriteString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFile_WriteString DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CB@MOMOFDKF@null?5file?5for?5PyFile_WriteString@
CONST	SEGMENT
??_C@_0CB@MOMOFDKF@null?5file?5for?5PyFile_WriteString@ DB 'null file for'
	DB	' PyFile_WriteString', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFile_WriteString
_TEXT	SEGMENT
v$20519 = 32
err$20520 = 40
s$ = 64
f$ = 72
PyFile_WriteString PROC					; COMDAT

; 167  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 168  :     if (f == NULL) {

  0000e	48 83 7c 24 48
	00		 cmp	 QWORD PTR f$[rsp], 0
  00014	75 26		 jne	 SHORT $LN6@PyFile_Wri@2

; 169  :         /* Should be caused by a pre-existing error */
; 170  :         if (!PyErr_Occurred())

  00016	e8 00 00 00 00	 call	 PyErr_Occurred
  0001b	48 85 c0	 test	 rax, rax
  0001e	75 13		 jne	 SHORT $LN5@PyFile_Wri@2

; 171  :             PyErr_SetString(PyExc_SystemError,
; 172  :                             "null file for PyFile_WriteString");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@MOMOFDKF@null?5file?5for?5PyFile_WriteString@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@PyFile_Wri@2:

; 173  :         return -1;

  00033	b8 ff ff ff ff	 mov	 eax, -1
  00038	eb 5a		 jmp	 SHORT $LN7@PyFile_Wri@2
  0003a	eb 58		 jmp	 SHORT $LN4@PyFile_Wri@2
$LN6@PyFile_Wri@2:

; 174  :     }
; 175  :     else if (!PyErr_Occurred()) {

  0003c	e8 00 00 00 00	 call	 PyErr_Occurred
  00041	48 85 c0	 test	 rax, rax
  00044	75 49		 jne	 SHORT $LN3@PyFile_Wri@2

; 176  :         PyObject *v = PyUnicode_FromString(s);

  00046	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0004b	e8 00 00 00 00	 call	 PyUnicode_FromString
  00050	48 89 44 24 20	 mov	 QWORD PTR v$20519[rsp], rax

; 177  :         int err;
; 178  :         if (v == NULL)

  00055	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$20519[rsp], 0
  0005b	75 07		 jne	 SHORT $LN2@PyFile_Wri@2

; 179  :             return -1;

  0005d	b8 ff ff ff ff	 mov	 eax, -1
  00062	eb 30		 jmp	 SHORT $LN7@PyFile_Wri@2
$LN2@PyFile_Wri@2:

; 180  :         err = PyFile_WriteObject(v, f, Py_PRINT_RAW);

  00064	41 b8 01 00 00
	00		 mov	 r8d, 1
  0006a	48 8b 54 24 48	 mov	 rdx, QWORD PTR f$[rsp]
  0006f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$20519[rsp]
  00074	e8 00 00 00 00	 call	 PyFile_WriteObject
  00079	89 44 24 28	 mov	 DWORD PTR err$20520[rsp], eax

; 181  :         Py_DECREF(v);

  0007d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$20519[rsp]
  00082	e8 00 00 00 00	 call	 _Py_DecRef

; 182  :         return err;

  00087	8b 44 24 28	 mov	 eax, DWORD PTR err$20520[rsp]
  0008b	eb 07		 jmp	 SHORT $LN7@PyFile_Wri@2

; 183  :     }
; 184  :     else

  0008d	eb 05		 jmp	 SHORT $LN1@PyFile_Wri@2
$LN3@PyFile_Wri@2:

; 185  :         return -1;

  0008f	b8 ff ff ff ff	 mov	 eax, -1
$LN1@PyFile_Wri@2:
$LN4@PyFile_Wri@2:
$LN7@PyFile_Wri@2:

; 186  : }

  00094	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00098	c3		 ret	 0
PyFile_WriteString ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@GPILBMJA@file?5descriptor?5cannot?5be?5a?5nega@ ; `string'
PUBLIC	??_C@_0DE@JCAJMKKB@argument?5must?5be?5an?5int?0?5or?5have@ ; `string'
PUBLIC	??_C@_0CA@GFOJBACD@fileno?$CI?$CJ?5returned?5a?5non?9integer?$AA@ ; `string'
PUBLIC	PyObject_AsFileDescriptor
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	_PyLong_AsInt:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_AsFileDescriptor DD imagerel $LN12
	DD	imagerel $LN12+341
	DD	imagerel $unwind$PyObject_AsFileDescriptor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_AsFileDescriptor DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0DC@GPILBMJA@file?5descriptor?5cannot?5be?5a?5nega@
CONST	SEGMENT
??_C@_0DC@GPILBMJA@file?5descriptor?5cannot?5be?5a?5nega@ DB 'file descri'
	DB	'ptor cannot be a negative integer (%i)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JCAJMKKB@argument?5must?5be?5an?5int?0?5or?5have@
CONST	SEGMENT
??_C@_0DE@JCAJMKKB@argument?5must?5be?5an?5int?0?5or?5have@ DB 'argument '
	DB	'must be an int, or have a fileno() method.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GFOJBACD@fileno?$CI?$CJ?5returned?5a?5non?9integer?$AA@
CONST	SEGMENT
??_C@_0CA@GFOJBACD@fileno?$CI?$CJ?5returned?5a?5non?9integer?$AA@ DB 'fil'
	DB	'eno() returned a non-integer', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_AsFileDescriptor
_TEXT	SEGMENT
meth$ = 32
fd$ = 40
fno$20538 = 48
o$ = 80
PyObject_AsFileDescriptor PROC				; COMDAT

; 197  : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 198  :     int fd;
; 199  :     PyObject *meth;
; 200  :     _Py_IDENTIFIER(fileno);
; 201  : 
; 202  :     if (PyLong_Check(o)) {

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00018	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0001d	85 c0		 test	 eax, eax
  0001f	74 13		 je	 SHORT $LN9@PyObject_A

; 203  :         fd = _PyLong_AsInt(o);

  00021	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00026	e8 00 00 00 00	 call	 _PyLong_AsInt
  0002b	89 44 24 28	 mov	 DWORD PTR fd$[rsp], eax
  0002f	e9 da 00 00 00	 jmp	 $LN8@PyObject_A
$LN9@PyObject_A:

; 204  :     }
; 205  :     else if ((meth = _PyObject_GetAttrId(o, &PyId_fileno)) != NULL)

  00034	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_fileno@?1??PyObject_AsFileDescriptor@@9@9
  00039	8b c0		 mov	 eax, eax
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00041	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0004e	48 8b d0	 mov	 rdx, rax
  00051	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00056	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0005b	48 89 44 24 20	 mov	 QWORD PTR meth$[rsp], rax
  00060	48 83 7c 24 20
	00		 cmp	 QWORD PTR meth$[rsp], 0
  00066	0f 84 88 00 00
	00		 je	 $LN7@PyObject_A

; 206  :     {
; 207  :         PyObject *fno = PyEval_CallObject(meth, NULL);

  0006c	45 33 c0	 xor	 r8d, r8d
  0006f	33 d2		 xor	 edx, edx
  00071	48 8b 4c 24 20	 mov	 rcx, QWORD PTR meth$[rsp]
  00076	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  0007b	48 89 44 24 30	 mov	 QWORD PTR fno$20538[rsp], rax

; 208  :         Py_DECREF(meth);

  00080	48 8b 4c 24 20	 mov	 rcx, QWORD PTR meth$[rsp]
  00085	e8 00 00 00 00	 call	 _Py_DecRef

; 209  :         if (fno == NULL)

  0008a	48 83 7c 24 30
	00		 cmp	 QWORD PTR fno$20538[rsp], 0
  00090	75 0a		 jne	 SHORT $LN6@PyObject_A

; 210  :             return -1;

  00092	b8 ff ff ff ff	 mov	 eax, -1
  00097	e9 b4 00 00 00	 jmp	 $LN10@PyObject_A
$LN6@PyObject_A:

; 211  : 
; 212  :         if (PyLong_Check(fno)) {

  0009c	48 8b 44 24 30	 mov	 rax, QWORD PTR fno$20538[rsp]
  000a1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ab	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  000b0	85 c0		 test	 eax, eax
  000b2	74 1a		 je	 SHORT $LN5@PyObject_A

; 213  :             fd = _PyLong_AsInt(fno);

  000b4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fno$20538[rsp]
  000b9	e8 00 00 00 00	 call	 _PyLong_AsInt
  000be	89 44 24 28	 mov	 DWORD PTR fd$[rsp], eax

; 214  :             Py_DECREF(fno);

  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fno$20538[rsp]
  000c7	e8 00 00 00 00	 call	 _Py_DecRef

; 215  :         }
; 216  :         else {

  000cc	eb 24		 jmp	 SHORT $LN4@PyObject_A
$LN5@PyObject_A:

; 217  :             PyErr_SetString(PyExc_TypeError,
; 218  :                             "fileno() returned a non-integer");

  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@GFOJBACD@fileno?$CI?$CJ?5returned?5a?5non?9integer?$AA@
  000d5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000dc	e8 00 00 00 00	 call	 PyErr_SetString

; 219  :             Py_DECREF(fno);

  000e1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fno$20538[rsp]
  000e6	e8 00 00 00 00	 call	 _Py_DecRef

; 220  :             return -1;

  000eb	b8 ff ff ff ff	 mov	 eax, -1
  000f0	eb 5e		 jmp	 SHORT $LN10@PyObject_A
$LN4@PyObject_A:

; 221  :         }
; 222  :     }
; 223  :     else {

  000f2	eb 1a		 jmp	 SHORT $LN3@PyObject_A
$LN7@PyObject_A:

; 224  :         PyErr_SetString(PyExc_TypeError,
; 225  :                         "argument must be an int, or have a fileno() method.");

  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@JCAJMKKB@argument?5must?5be?5an?5int?0?5or?5have@
  000fb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00102	e8 00 00 00 00	 call	 PyErr_SetString

; 226  :         return -1;

  00107	b8 ff ff ff ff	 mov	 eax, -1
  0010c	eb 42		 jmp	 SHORT $LN10@PyObject_A
$LN3@PyObject_A:
$LN8@PyObject_A:

; 227  :     }
; 228  : 
; 229  :     if (fd == -1 && PyErr_Occurred())

  0010e	83 7c 24 28 ff	 cmp	 DWORD PTR fd$[rsp], -1
  00113	75 11		 jne	 SHORT $LN2@PyObject_A
  00115	e8 00 00 00 00	 call	 PyErr_Occurred
  0011a	48 85 c0	 test	 rax, rax
  0011d	74 07		 je	 SHORT $LN2@PyObject_A

; 230  :         return -1;

  0011f	b8 ff ff ff ff	 mov	 eax, -1
  00124	eb 2a		 jmp	 SHORT $LN10@PyObject_A
$LN2@PyObject_A:

; 231  :     if (fd < 0) {

  00126	83 7c 24 28 00	 cmp	 DWORD PTR fd$[rsp], 0
  0012b	7d 1f		 jge	 SHORT $LN1@PyObject_A

; 232  :         PyErr_Format(PyExc_ValueError,
; 233  :                      "file descriptor cannot be a negative integer (%i)",
; 234  :                      fd);

  0012d	44 8b 44 24 28	 mov	 r8d, DWORD PTR fd$[rsp]
  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@GPILBMJA@file?5descriptor?5cannot?5be?5a?5nega@
  00139	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00140	e8 00 00 00 00	 call	 PyErr_Format

; 235  :         return -1;

  00145	b8 ff ff ff ff	 mov	 eax, -1
  0014a	eb 04		 jmp	 SHORT $LN10@PyObject_A
$LN1@PyObject_A:

; 236  :     }
; 237  :     return fd;

  0014c	8b 44 24 28	 mov	 eax, DWORD PTR fd$[rsp]
$LN10@PyObject_A:

; 238  : }

  00150	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00154	c3		 ret	 0
PyObject_AsFileDescriptor ENDP
_TEXT	ENDS
PUBLIC	Py_UniversalNewlineFgets
EXTRN	__imp_ungetc:PROC
EXTRN	__imp_getc:PROC
EXTRN	__imp__errno:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_UniversalNewlineFgets DD imagerel $LN17
	DD	imagerel $LN17+361
	DD	imagerel $unwind$Py_UniversalNewlineFgets
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_UniversalNewlineFgets DD 011701H
	DD	08217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Py_UniversalNewlineFgets
_TEXT	SEGMENT
p$ = 32
newlinetypes$ = 40
c$ = 44
skipnextlf$ = 48
buf$ = 80
n$ = 88
stream$ = 96
fobj$ = 104
Py_UniversalNewlineFgets PROC				; COMDAT

; 256  : {

$LN17:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 257  :     char *p = buf;

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 258  :     int c;
; 259  :     int newlinetypes = 0;

  00021	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR newlinetypes$[rsp], 0

; 260  :     int skipnextlf = 0;

  00029	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR skipnextlf$[rsp], 0

; 261  : 
; 262  :     if (fobj) {

  00031	48 83 7c 24 68
	00		 cmp	 QWORD PTR fobj$[rsp], 0
  00037	74 13		 je	 SHORT $LN14@Py_Univers

; 263  :         errno = ENXIO;          /* What can you do... */

  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0003f	c7 00 06 00 00
	00		 mov	 DWORD PTR [rax], 6

; 264  :         return NULL;

  00045	33 c0		 xor	 eax, eax
  00047	e9 18 01 00 00	 jmp	 $LN15@Py_Univers
$LN14@Py_Univers:

; 265  :     }
; 266  :     FLOCKFILE(stream);
; 267  :     c = 'x'; /* Shut up gcc warning */

  0004c	c7 44 24 2c 78
	00 00 00	 mov	 DWORD PTR c$[rsp], 120	; 00000078H
$LN13@Py_Univers:

; 268  :     while (--n > 0 && (c = GETC(stream)) != EOF ) {

  00054	8b 44 24 58	 mov	 eax, DWORD PTR n$[rsp]
  00058	ff c8		 dec	 eax
  0005a	89 44 24 58	 mov	 DWORD PTR n$[rsp], eax
  0005e	83 7c 24 58 00	 cmp	 DWORD PTR n$[rsp], 0
  00063	0f 8e b2 00 00
	00		 jle	 $LN12@Py_Univers
  00069	48 8b 4c 24 60	 mov	 rcx, QWORD PTR stream$[rsp]
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  00074	89 44 24 2c	 mov	 DWORD PTR c$[rsp], eax
  00078	83 7c 24 2c ff	 cmp	 DWORD PTR c$[rsp], -1
  0007d	0f 84 98 00 00
	00		 je	 $LN12@Py_Univers

; 269  :         if (skipnextlf ) {

  00083	83 7c 24 30 00	 cmp	 DWORD PTR skipnextlf$[rsp], 0
  00088	74 3f		 je	 SHORT $LN11@Py_Univers

; 270  :             skipnextlf = 0;

  0008a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR skipnextlf$[rsp], 0

; 271  :             if (c == '\n') {

  00092	83 7c 24 2c 0a	 cmp	 DWORD PTR c$[rsp], 10
  00097	75 25		 jne	 SHORT $LN10@Py_Univers

; 272  :                 /* Seeing a \n here with skipnextlf true
; 273  :                 ** means we saw a \r before.
; 274  :                 */
; 275  :                 newlinetypes |= NEWLINE_CRLF;

  00099	8b 44 24 28	 mov	 eax, DWORD PTR newlinetypes$[rsp]
  0009d	83 c8 04	 or	 eax, 4
  000a0	89 44 24 28	 mov	 DWORD PTR newlinetypes$[rsp], eax

; 276  :                 c = GETC(stream);

  000a4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR stream$[rsp]
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  000af	89 44 24 2c	 mov	 DWORD PTR c$[rsp], eax

; 277  :                 if (c == EOF) break;

  000b3	83 7c 24 2c ff	 cmp	 DWORD PTR c$[rsp], -1
  000b8	75 02		 jne	 SHORT $LN9@Py_Univers
  000ba	eb 5f		 jmp	 SHORT $LN12@Py_Univers
$LN9@Py_Univers:

; 278  :             } else {

  000bc	eb 0b		 jmp	 SHORT $LN8@Py_Univers
$LN10@Py_Univers:

; 279  :                 /*
; 280  :                 ** Note that c == EOF also brings us here,
; 281  :                 ** so we're okay if the last char in the file
; 282  :                 ** is a CR.
; 283  :                 */
; 284  :                 newlinetypes |= NEWLINE_CR;

  000be	8b 44 24 28	 mov	 eax, DWORD PTR newlinetypes$[rsp]
  000c2	83 c8 01	 or	 eax, 1
  000c5	89 44 24 28	 mov	 DWORD PTR newlinetypes$[rsp], eax
$LN8@Py_Univers:
$LN11@Py_Univers:

; 285  :             }
; 286  :         }
; 287  :         if (c == '\r') {

  000c9	83 7c 24 2c 0d	 cmp	 DWORD PTR c$[rsp], 13
  000ce	75 12		 jne	 SHORT $LN7@Py_Univers

; 288  :             /* A \r is translated into a \n, and we skip
; 289  :             ** an adjacent \n, if any. We don't set the
; 290  :             ** newlinetypes flag until we've seen the next char.
; 291  :             */
; 292  :             skipnextlf = 1;

  000d0	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR skipnextlf$[rsp], 1

; 293  :             c = '\n';

  000d8	c7 44 24 2c 0a
	00 00 00	 mov	 DWORD PTR c$[rsp], 10
  000e0	eb 12		 jmp	 SHORT $LN6@Py_Univers
$LN7@Py_Univers:

; 294  :         } else if ( c == '\n') {

  000e2	83 7c 24 2c 0a	 cmp	 DWORD PTR c$[rsp], 10
  000e7	75 0b		 jne	 SHORT $LN5@Py_Univers

; 295  :             newlinetypes |= NEWLINE_LF;

  000e9	8b 44 24 28	 mov	 eax, DWORD PTR newlinetypes$[rsp]
  000ed	83 c8 02	 or	 eax, 2
  000f0	89 44 24 28	 mov	 DWORD PTR newlinetypes$[rsp], eax
$LN5@Py_Univers:
$LN6@Py_Univers:

; 296  :         }
; 297  :         *p++ = c;

  000f4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000f9	0f b6 4c 24 2c	 movzx	 ecx, BYTE PTR c$[rsp]
  000fe	88 08		 mov	 BYTE PTR [rax], cl
  00100	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00105	48 ff c0	 inc	 rax
  00108	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 298  :         if (c == '\n') break;

  0010d	83 7c 24 2c 0a	 cmp	 DWORD PTR c$[rsp], 10
  00112	75 02		 jne	 SHORT $LN4@Py_Univers
  00114	eb 05		 jmp	 SHORT $LN12@Py_Univers
$LN4@Py_Univers:

; 299  :     }

  00116	e9 39 ff ff ff	 jmp	 $LN13@Py_Univers
$LN12@Py_Univers:

; 300  :     /* if ( c == EOF && skipnextlf )
; 301  :         newlinetypes |= NEWLINE_CR; */
; 302  :     FUNLOCKFILE(stream);
; 303  :     *p = '\0';

  0011b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00120	c6 00 00	 mov	 BYTE PTR [rax], 0

; 304  :     if ( skipnextlf ) {

  00123	83 7c 24 30 00	 cmp	 DWORD PTR skipnextlf$[rsp], 0
  00128	74 25		 je	 SHORT $LN3@Py_Univers

; 305  :         /* If we have no file object we cannot save the
; 306  :         ** skipnextlf flag. We have to readahead, which
; 307  :         ** will cause a pause if we're reading from an
; 308  :         ** interactive stream, but that is very unlikely
; 309  :         ** unless we're doing something silly like
; 310  :         ** exec(open("/dev/tty").read()).
; 311  :         */
; 312  :         c = GETC(stream);

  0012a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR stream$[rsp]
  0012f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  00135	89 44 24 2c	 mov	 DWORD PTR c$[rsp], eax

; 313  :         if ( c != '\n' )

  00139	83 7c 24 2c 0a	 cmp	 DWORD PTR c$[rsp], 10
  0013e	74 0f		 je	 SHORT $LN2@Py_Univers

; 314  :             ungetc(c, stream);

  00140	48 8b 54 24 60	 mov	 rdx, QWORD PTR stream$[rsp]
  00145	8b 4c 24 2c	 mov	 ecx, DWORD PTR c$[rsp]
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ungetc
$LN2@Py_Univers:
$LN3@Py_Univers:

; 315  :     }
; 316  :     if (p == buf)

  0014f	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00154	48 39 44 24 20	 cmp	 QWORD PTR p$[rsp], rax
  00159	75 04		 jne	 SHORT $LN1@Py_Univers

; 317  :         return NULL;

  0015b	33 c0		 xor	 eax, eax
  0015d	eb 05		 jmp	 SHORT $LN15@Py_Univers
$LN1@Py_Univers:

; 318  :     return buf;

  0015f	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
$LN15@Py_Univers:

; 319  : }

  00164	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00168	c3		 ret	 0
Py_UniversalNewlineFgets ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stdprinter_new DD imagerel stdprinter_new
	DD	imagerel stdprinter_new+123
	DD	imagerel $unwind$stdprinter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_new DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@
CONST	SEGMENT
??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@ DB 't'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 't', 00H, 'p', 00H, '_', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stdprinter_new
_TEXT	SEGMENT
self$ = 32
type$ = 64
args$ = 72
kews$ = 80
stdprinter_new PROC					; COMDAT

; 333  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 334  :     PyStdPrinter_Object *self;
; 335  : 
; 336  :     assert(type != NULL && type->tp_alloc != NULL);

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR type$[rsp], 0
  00019	74 0f		 je	 SHORT $LN4@stdprinter
  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00020	48 83 b8 88 01
	00 00 00	 cmp	 QWORD PTR [rax+392], 0
  00028	75 1c		 jne	 SHORT $LN5@stdprinter
$LN4@stdprinter:
  0002a	41 b8 50 01 00
	00		 mov	 r8d, 336		; 00000150H
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@OFNNBOJL@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAi?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00044	33 c0		 xor	 eax, eax
$LN5@stdprinter:

; 337  : 
; 338  :     self = (PyStdPrinter_Object *) type->tp_alloc(type, 0);

  00046	33 d2		 xor	 edx, edx
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00052	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00058	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 339  :     if (self != NULL) {

  0005d	48 83 7c 24 20
	00		 cmp	 QWORD PTR self$[rsp], 0
  00063	74 0c		 je	 SHORT $LN1@stdprinter

; 340  :         self->fd = -1;

  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  0006a	c7 40 60 ff ff
	ff ff		 mov	 DWORD PTR [rax+96], -1
$LN1@stdprinter:

; 341  :     }
; 342  : 
; 343  :     return (PyObject *) self;

  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]

; 344  : }

  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
stdprinter_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@HCBCJMNJ@cannot?5create?5?8stderrprinter?8?5in@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stdprinter_init DD imagerel stdprinter_init
	DD	imagerel stdprinter_init+48
	DD	imagerel $unwind$stdprinter_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_init DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_0CI@HCBCJMNJ@cannot?5create?5?8stderrprinter?8?5in@
CONST	SEGMENT
??_C@_0CI@HCBCJMNJ@cannot?5create?5?8stderrprinter?8?5in@ DB 'cannot crea'
	DB	'te ''stderrprinter'' instances', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stdprinter_init
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
stdprinter_init PROC					; COMDAT

; 348  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 349  :     PyErr_SetString(PyExc_TypeError,
; 350  :                     "cannot create 'stderrprinter' instances");

  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@HCBCJMNJ@cannot?5create?5?8stderrprinter?8?5in@
  0001a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00021	e8 00 00 00 00	 call	 PyErr_SetString

; 351  :     return -1;

  00026	b8 ff ff ff ff	 mov	 eax, -1

; 352  : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
stdprinter_init ENDP
_TEXT	ENDS
PUBLIC	PyFile_NewStdPrinter
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	__imp_fileno:PROC
EXTRN	__imp___iob_func:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFile_NewStdPrinter DD imagerel $LN7
	DD	imagerel $LN7+147
	DD	imagerel $unwind$PyFile_NewStdPrinter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFile_NewStdPrinter DD 010801H
	DD	06208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFile_NewStdPrinter
_TEXT	SEGMENT
self$ = 32
tv80 = 40
fd$ = 64
PyFile_NewStdPrinter PROC				; COMDAT

; 356  : {

$LN7:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 357  :     PyStdPrinter_Object *self;
; 358  : 
; 359  :     if (fd != fileno(stdout) && fd != fileno(stderr)) {

  00008	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0000e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00012	48 8b c8	 mov	 rcx, rax
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0001b	39 44 24 40	 cmp	 DWORD PTR fd$[rsp], eax
  0001f	74 1d		 je	 SHORT $LN2@PyFile_New
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00027	48 83 c0 60	 add	 rax, 96			; 00000060H
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00034	39 44 24 40	 cmp	 DWORD PTR fd$[rsp], eax
  00038	74 04		 je	 SHORT $LN2@PyFile_New

; 360  :         /* not enough infrastructure for PyErr_BadInternalCall() */
; 361  :         return NULL;

  0003a	33 c0		 xor	 eax, eax
  0003c	eb 50		 jmp	 SHORT $LN3@PyFile_New
$LN2@PyFile_New:

; 362  :     }
; 363  : 
; 364  :     self = PyObject_New(PyStdPrinter_Object,
; 365  :                         &PyStdPrinter_Type);

  0003e	e8 00 00 00 00	 call	 _Py_PXCTX
  00043	85 c0		 test	 eax, eax
  00045	74 13		 je	 SHORT $LN5@PyFile_New
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStdPrinter_Type
  0004e	e8 00 00 00 00	 call	 _PxObject_New
  00053	48 89 44 24 28	 mov	 QWORD PTR tv80[rsp], rax
  00058	eb 11		 jmp	 SHORT $LN6@PyFile_New
$LN5@PyFile_New:
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStdPrinter_Type
  00061	e8 00 00 00 00	 call	 _PyObject_New
  00066	48 89 44 24 28	 mov	 QWORD PTR tv80[rsp], rax
$LN6@PyFile_New:
  0006b	48 8b 44 24 28	 mov	 rax, QWORD PTR tv80[rsp]
  00070	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 366  :     if (self != NULL) {

  00075	48 83 7c 24 20
	00		 cmp	 QWORD PTR self$[rsp], 0
  0007b	74 0c		 je	 SHORT $LN1@PyFile_New

; 367  :         self->fd = fd;

  0007d	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00082	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00086	89 48 60	 mov	 DWORD PTR [rax+96], ecx
$LN1@PyFile_New:

; 368  :     }
; 369  :     return (PyObject*)self;

  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
$LN3@PyFile_New:

; 370  : }

  0008e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00092	c3		 ret	 0
PyFile_NewStdPrinter ENDP
_TEXT	ENDS
PUBLIC	??_C@_01LKDEMHDF@s?$AA@				; `string'
PUBLIC	_Py_IncRef
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyErr_SetFromErrno:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	PyEval_RestoreThread:PROC
EXTRN	__imp_write:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	strlen:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$stdprinter_write DD imagerel stdprinter_write
	DD	imagerel stdprinter_write+251
	DD	imagerel $unwind$stdprinter_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_write DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
CONST	SEGMENT
??_C@_01LKDEMHDF@s?$AA@ DB 's', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stdprinter_write
_TEXT	SEGMENT
n$ = 32
c$ = 40
_save$20640 = 48
self$ = 80
args$ = 88
stdprinter_write PROC					; COMDAT

; 374  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 375  :     char *c;
; 376  :     Py_ssize_t n;
; 377  : 
; 378  :     if (self->fd < 0) {

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7d 18		 jge	 SHORT $LN5@stdprinter@2

; 379  :         /* fd might be invalid on Windows
; 380  :          * I can't raise an exception here. It may lead to an
; 381  :          * unlimited recursion in the case stderr is invalid.
; 382  :          */
; 383  :         Py_RETURN_NONE;

  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00020	e8 00 00 00 00	 call	 _Py_IncRef
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0002c	e9 c5 00 00 00	 jmp	 $LN6@stdprinter@2
$LN5@stdprinter@2:

; 384  :     }
; 385  : 
; 386  :     if (!PyArg_ParseTuple(args, "s", &c)) {

  00031	4c 8d 44 24 28	 lea	 r8, QWORD PTR c$[rsp]
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
  0003d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00042	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00047	85 c0		 test	 eax, eax
  00049	75 07		 jne	 SHORT $LN4@stdprinter@2

; 387  :         return NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 a4 00 00 00	 jmp	 $LN6@stdprinter@2
$LN4@stdprinter@2:

; 388  :     }
; 389  :     n = strlen(c);

  00052	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  00057	e8 00 00 00 00	 call	 strlen
  0005c	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 390  : 
; 391  :     Py_BEGIN_ALLOW_THREADS

  00061	e8 00 00 00 00	 call	 PyEval_SaveThread
  00066	48 89 44 24 30	 mov	 QWORD PTR _save$20640[rsp], rax

; 392  :     errno = 0;

  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00071	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 393  : #if defined(MS_WIN64) || defined(MS_WINDOWS)
; 394  :     if (n > INT_MAX)

  00077	48 81 7c 24 20
	ff ff ff 7f	 cmp	 QWORD PTR n$[rsp], 2147483647 ; 7fffffffH
  00080	7e 09		 jle	 SHORT $LN3@stdprinter@2

; 395  :         n = INT_MAX;

  00082	48 c7 44 24 20
	ff ff ff 7f	 mov	 QWORD PTR n$[rsp], 2147483647 ; 7fffffffH
$LN3@stdprinter@2:

; 396  :     n = write(self->fd, c, (int)n);

  0008b	44 8b 44 24 20	 mov	 r8d, DWORD PTR n$[rsp]
  00090	48 8b 54 24 28	 mov	 rdx, QWORD PTR c$[rsp]
  00095	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0009a	8b 48 60	 mov	 ecx, DWORD PTR [rax+96]
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  000a3	48 98		 cdqe
  000a5	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 397  : #else
; 398  :     n = write(self->fd, c, n);
; 399  : #endif
; 400  :     Py_END_ALLOW_THREADS

  000aa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _save$20640[rsp]
  000af	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 401  : 
; 402  :     if (n < 0) {

  000b4	48 83 7c 24 20
	00		 cmp	 QWORD PTR n$[rsp], 0
  000ba	7d 30		 jge	 SHORT $LN2@stdprinter@2

; 403  :         if (errno == EAGAIN)

  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000c2	83 38 0b	 cmp	 DWORD PTR [rax], 11
  000c5	75 15		 jne	 SHORT $LN1@stdprinter@2

; 404  :             Py_RETURN_NONE;

  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000ce	e8 00 00 00 00	 call	 _Py_IncRef
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000da	eb 1a		 jmp	 SHORT $LN6@stdprinter@2
$LN1@stdprinter@2:

; 405  :         PyErr_SetFromErrno(PyExc_IOError);

  000dc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000e3	e8 00 00 00 00	 call	 PyErr_SetFromErrno

; 406  :         return NULL;

  000e8	33 c0		 xor	 eax, eax
  000ea	eb 0a		 jmp	 SHORT $LN6@stdprinter@2
$LN2@stdprinter@2:

; 407  :     }
; 408  : 
; 409  :     return PyLong_FromSsize_t(n);

  000ec	48 8b 4c 24 20	 mov	 rcx, QWORD PTR n$[rsp]
  000f1	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN6@stdprinter@2:

; 410  : }

  000f6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000fa	c3		 ret	 0
stdprinter_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\fileobject.c
pdata	SEGMENT
$pdata$stdprinter_fileno DD imagerel stdprinter_fileno
	DD	imagerel stdprinter_fileno+27
	DD	imagerel $unwind$stdprinter_fileno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_fileno DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT stdprinter_fileno
_TEXT	SEGMENT
self$ = 48
stdprinter_fileno PROC					; COMDAT

; 414  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 415  :     return PyLong_FromLong((long) self->fd);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	8b 48 60	 mov	 ecx, DWORD PTR [rax+96]
  00011	e8 00 00 00 00	 call	 PyLong_FromLong

; 416  : }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
stdprinter_fileno ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@OAPBOME@?$DMstdprinter?$CIfd?$DN?$CFd?$CJ?5object?5at?50x?$CF@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stdprinter_repr DD imagerel stdprinter_repr
	DD	imagerel stdprinter_repr+39
	DD	imagerel $unwind$stdprinter_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CD@OAPBOME@?$DMstdprinter?$CIfd?$DN?$CFd?$CJ?5object?5at?50x?$CF@
CONST	SEGMENT
??_C@_0CD@OAPBOME@?$DMstdprinter?$CIfd?$DN?$CFd?$CJ?5object?5at?50x?$CF@ DB '<'
	DB	'stdprinter(fd=%d) object at 0x%x>', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stdprinter_repr
_TEXT	SEGMENT
self$ = 48
stdprinter_repr PROC					; COMDAT

; 420  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 421  :     return PyUnicode_FromFormat("<stdprinter(fd=%d) object at 0x%x>",
; 422  :                                 self->fd, self);

  00009	4c 8b 44 24 30	 mov	 r8, QWORD PTR self$[rsp]
  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	8b 50 60	 mov	 edx, DWORD PTR [rax+96]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@OAPBOME@?$DMstdprinter?$CIfd?$DN?$CFd?$CJ?5object?5at?50x?$CF@
  0001d	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 423  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
stdprinter_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stdprinter_noop DD imagerel stdprinter_noop
	DD	imagerel stdprinter_noop+33
	DD	imagerel $unwind$stdprinter_noop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_noop DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT stdprinter_noop
_TEXT	SEGMENT
self$ = 48
stdprinter_noop PROC					; COMDAT

; 427  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 428  :     Py_RETURN_NONE;

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00010	e8 00 00 00 00	 call	 _Py_IncRef
  00015	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 429  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
stdprinter_noop ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
EXTRN	__imp_isatty:PROC
EXTRN	_Py_FalseStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$stdprinter_isatty DD imagerel stdprinter_isatty
	DD	imagerel stdprinter_isatty+93
	DD	imagerel $unwind$stdprinter_isatty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stdprinter_isatty DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT stdprinter_isatty
_TEXT	SEGMENT
res$ = 32
_save$20671 = 40
self$ = 64
stdprinter_isatty PROC					; COMDAT

; 433  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 434  :     long res;
; 435  :     if (self->fd < 0) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00012	7d 15		 jge	 SHORT $LN1@stdprinter@3

; 436  :         Py_RETURN_FALSE;

  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0001b	e8 00 00 00 00	 call	 _Py_IncRef
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00027	eb 2f		 jmp	 SHORT $LN2@stdprinter@3
$LN1@stdprinter@3:

; 437  :     }
; 438  : 
; 439  :     Py_BEGIN_ALLOW_THREADS

  00029	e8 00 00 00 00	 call	 PyEval_SaveThread
  0002e	48 89 44 24 28	 mov	 QWORD PTR _save$20671[rsp], rax

; 440  :     res = isatty(self->fd);

  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00038	8b 48 60	 mov	 ecx, DWORD PTR [rax+96]
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isatty
  00041	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 441  :     Py_END_ALLOW_THREADS

  00045	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _save$20671[rsp]
  0004a	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 442  : 
; 443  :     return PyBool_FromLong(res);

  0004f	8b 4c 24 20	 mov	 ecx, DWORD PTR res$[rsp]
  00053	e8 00 00 00 00	 call	 PyBool_FromLong
$LN2@stdprinter@3:

; 444  : }

  00058	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005c	c3		 ret	 0
stdprinter_isatty ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_closed DD imagerel get_closed
	DD	imagerel get_closed+38
	DD	imagerel $unwind$get_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_closed DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT get_closed
_TEXT	SEGMENT
self$ = 48
closure$ = 56
get_closed PROC						; COMDAT

; 457  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 458  :     Py_INCREF(Py_False);

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00015	e8 00 00 00 00	 call	 _Py_IncRef

; 459  :     return Py_False;

  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 460  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
get_closed ENDP
_TEXT	ENDS
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_mode DD imagerel get_mode
	DD	imagerel get_mode+31
	DD	imagerel $unwind$get_mode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_mode DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_mode
_TEXT	SEGMENT
self$ = 48
closure$ = 56
get_mode PROC						; COMDAT

; 464  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 465  :     return PyUnicode_FromString("w");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01NOFIACDB@w?$AA@
  00015	e8 00 00 00 00	 call	 PyUnicode_FromString

; 466  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
get_mode ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_encoding DD imagerel get_encoding
	DD	imagerel get_encoding+38
	DD	imagerel $unwind$get_encoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_encoding DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT get_encoding
_TEXT	SEGMENT
self$ = 48
closure$ = 56
get_encoding PROC					; COMDAT

; 470  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 471  :     Py_RETURN_NONE;

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00015	e8 00 00 00 00	 call	 _Py_IncRef
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 472  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
get_encoding ENDP
_TEXT	ENDS
END
