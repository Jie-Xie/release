; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BF@OMHGPBAM@bad?5memberdescr?5type?$AA@	; `string'
PUBLIC	_Py_IncRef
PUBLIC	PyMember_GetOne
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyLong_FromUnsignedLongLong:PROC
EXTRN	PyLong_FromLongLong:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	PyUnicode_FromStringAndSize:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyLong_FromUnsignedLong:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyBool_FromLong:PROC
EXTRN	__ImageBase:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\structmember.c
pdata	SEGMENT
$pdata$PyMember_GetOne DD imagerel $LN35
	DD	imagerel $LN35+780
	DD	imagerel $unwind$PyMember_GetOne
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMember_GetOne DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BF@OMHGPBAM@bad?5memberdescr?5type?$AA@
CONST	SEGMENT
??_C@_0BF@OMHGPBAM@bad?5memberdescr?5type?$AA@ DB 'bad memberdescr type', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyMember_GetOne
_TEXT	SEGMENT
v$ = 32
tv67 = 40
addr$ = 64
l$ = 72
PyMember_GetOne PROC					; COMDAT

; 10   : {

$LN35:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 11   :     PyObject *v;
; 12   : 
; 13   :     addr += l->offset;

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR l$[rsp]
  00013	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR addr$[rsp]
  0001c	48 03 c8	 add	 rcx, rax
  0001f	48 8b c1	 mov	 rax, rcx
  00022	48 89 44 24 40	 mov	 QWORD PTR addr$[rsp], rax

; 14   :     switch (l->type) {

  00027	48 8b 44 24 48	 mov	 rax, QWORD PTR l$[rsp]
  0002c	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0002f	89 44 24 28	 mov	 DWORD PTR tv67[rsp], eax
  00033	83 7c 24 28 14	 cmp	 DWORD PTR tv67[rsp], 20
  00038	0f 87 53 02 00
	00		 ja	 $LN1@PyMember_G
  0003e	48 63 44 24 28	 movsxd	 rax, DWORD PTR tv67[rsp]
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0004a	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN34@PyMember_G[rcx+rax*4]
  00051	48 03 c1	 add	 rax, rcx
  00054	ff e0		 jmp	 rax
$LN29@PyMember_G:

; 15   :     case T_BOOL:
; 16   :         v = PyBool_FromLong(*(char*)addr);

  00056	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  0005b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0005e	8b c8		 mov	 ecx, eax
  00060	e8 00 00 00 00	 call	 PyBool_FromLong
  00065	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 17   :         break;

  0006a	e9 3e 02 00 00	 jmp	 $LN30@PyMember_G
$LN28@PyMember_G:

; 18   :     case T_BYTE:
; 19   :         v = PyLong_FromLong(*(char*)addr);

  0006f	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  00074	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00077	8b c8		 mov	 ecx, eax
  00079	e8 00 00 00 00	 call	 PyLong_FromLong
  0007e	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 20   :         break;

  00083	e9 25 02 00 00	 jmp	 $LN30@PyMember_G
$LN27@PyMember_G:

; 21   :     case T_UBYTE:
; 22   :         v = PyLong_FromUnsignedLong(*(unsigned char*)addr);

  00088	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  0008d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00090	8b c8		 mov	 ecx, eax
  00092	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  00097	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 23   :         break;

  0009c	e9 0c 02 00 00	 jmp	 $LN30@PyMember_G
$LN26@PyMember_G:

; 24   :     case T_SHORT:
; 25   :         v = PyLong_FromLong(*(short*)addr);

  000a1	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  000a6	0f bf 00	 movsx	 eax, WORD PTR [rax]
  000a9	8b c8		 mov	 ecx, eax
  000ab	e8 00 00 00 00	 call	 PyLong_FromLong
  000b0	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 26   :         break;

  000b5	e9 f3 01 00 00	 jmp	 $LN30@PyMember_G
$LN25@PyMember_G:

; 27   :     case T_USHORT:
; 28   :         v = PyLong_FromUnsignedLong(*(unsigned short*)addr);

  000ba	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  000bf	0f b7 00	 movzx	 eax, WORD PTR [rax]
  000c2	8b c8		 mov	 ecx, eax
  000c4	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  000c9	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 29   :         break;

  000ce	e9 da 01 00 00	 jmp	 $LN30@PyMember_G
$LN24@PyMember_G:

; 30   :     case T_INT:
; 31   :         v = PyLong_FromLong(*(int*)addr);

  000d3	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  000d8	8b 08		 mov	 ecx, DWORD PTR [rax]
  000da	e8 00 00 00 00	 call	 PyLong_FromLong
  000df	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 32   :         break;

  000e4	e9 c4 01 00 00	 jmp	 $LN30@PyMember_G
$LN23@PyMember_G:

; 33   :     case T_UINT:
; 34   :         v = PyLong_FromUnsignedLong(*(unsigned int*)addr);

  000e9	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  000ee	8b 08		 mov	 ecx, DWORD PTR [rax]
  000f0	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  000f5	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 35   :         break;

  000fa	e9 ae 01 00 00	 jmp	 $LN30@PyMember_G
$LN22@PyMember_G:

; 36   :     case T_LONG:
; 37   :         v = PyLong_FromLong(*(long*)addr);

  000ff	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  00104	8b 08		 mov	 ecx, DWORD PTR [rax]
  00106	e8 00 00 00 00	 call	 PyLong_FromLong
  0010b	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 38   :         break;

  00110	e9 98 01 00 00	 jmp	 $LN30@PyMember_G
$LN21@PyMember_G:

; 39   :     case T_ULONG:
; 40   :         v = PyLong_FromUnsignedLong(*(unsigned long*)addr);

  00115	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  0011a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0011c	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  00121	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 41   :         break;

  00126	e9 82 01 00 00	 jmp	 $LN30@PyMember_G
$LN20@PyMember_G:

; 42   :     case T_PYSSIZET:
; 43   :         v = PyLong_FromSsize_t(*(Py_ssize_t*)addr);

  0012b	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  00130	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00133	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00138	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 44   :         break;

  0013d	e9 6b 01 00 00	 jmp	 $LN30@PyMember_G
$LN19@PyMember_G:

; 45   :     case T_FLOAT:
; 46   :         v = PyFloat_FromDouble((double)*(float*)addr);

  00142	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  00147	66 0f 6e 00	 movd	 xmm0, DWORD PTR [rax]
  0014b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0014e	e8 00 00 00 00	 call	 PyFloat_FromDouble
  00153	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 47   :         break;

  00158	e9 50 01 00 00	 jmp	 $LN30@PyMember_G
$LN18@PyMember_G:

; 48   :     case T_DOUBLE:
; 49   :         v = PyFloat_FromDouble(*(double*)addr);

  0015d	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  00162	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  00166	e8 00 00 00 00	 call	 PyFloat_FromDouble
  0016b	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 50   :         break;

  00170	e9 38 01 00 00	 jmp	 $LN30@PyMember_G
$LN17@PyMember_G:

; 51   :     case T_STRING:
; 52   :         if (*(char**)addr == NULL) {

  00175	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  0017a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0017e	75 1a		 jne	 SHORT $LN16@PyMember_G

; 53   :             Py_INCREF(Py_None);

  00180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00187	e8 00 00 00 00	 call	 _Py_IncRef

; 54   :             v = Py_None;

  0018c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00193	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 55   :         }
; 56   :         else

  00198	eb 12		 jmp	 SHORT $LN15@PyMember_G
$LN16@PyMember_G:

; 57   :             v = PyUnicode_FromString(*(char**)addr);

  0019a	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  0019f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001a2	e8 00 00 00 00	 call	 PyUnicode_FromString
  001a7	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
$LN15@PyMember_G:

; 58   :         break;

  001ac	e9 fc 00 00 00	 jmp	 $LN30@PyMember_G
$LN14@PyMember_G:

; 59   :     case T_STRING_INPLACE:
; 60   :         v = PyUnicode_FromString((char*)addr);

  001b1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR addr$[rsp]
  001b6	e8 00 00 00 00	 call	 PyUnicode_FromString
  001bb	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 61   :         break;

  001c0	e9 e8 00 00 00	 jmp	 $LN30@PyMember_G
$LN13@PyMember_G:

; 62   :     case T_CHAR:
; 63   :         v = PyUnicode_FromStringAndSize((char*)addr, 1);

  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 40	 mov	 rcx, QWORD PTR addr$[rsp]
  001cf	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  001d4	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 64   :         break;

  001d9	e9 cf 00 00 00	 jmp	 $LN30@PyMember_G
$LN12@PyMember_G:

; 65   :     case T_OBJECT:
; 66   :         v = *(PyObject **)addr;

  001de	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  001e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e6	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 67   :         if (v == NULL)

  001eb	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  001f1	75 0c		 jne	 SHORT $LN11@PyMember_G

; 68   :             v = Py_None;

  001f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001fa	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
$LN11@PyMember_G:

; 69   :         Py_INCREF(v);

  001ff	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00204	e8 00 00 00 00	 call	 _Py_IncRef

; 70   :         break;

  00209	e9 9f 00 00 00	 jmp	 $LN30@PyMember_G
$LN10@PyMember_G:

; 71   :     case T_OBJECT_EX:
; 72   :         v = *(PyObject **)addr;

  0020e	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  00213	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00216	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 73   :         if (v == NULL)

  0021b	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00221	75 14		 jne	 SHORT $LN9@PyMember_G

; 74   :             PyErr_SetString(PyExc_AttributeError, l->name);

  00223	48 8b 44 24 48	 mov	 rax, QWORD PTR l$[rsp]
  00228	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0022b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00232	e8 00 00 00 00	 call	 PyErr_SetString
$LN9@PyMember_G:
$LN8@PyMember_G:

; 75   :         Py_XINCREF(v);

  00237	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0023d	74 0a		 je	 SHORT $LN5@PyMember_G
  0023f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00244	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@PyMember_G:
  00249	33 c0		 xor	 eax, eax
  0024b	85 c0		 test	 eax, eax
  0024d	75 e8		 jne	 SHORT $LN8@PyMember_G

; 76   :         break;

  0024f	eb 5c		 jmp	 SHORT $LN30@PyMember_G
$LN4@PyMember_G:

; 77   : #ifdef HAVE_LONG_LONG
; 78   :     case T_LONGLONG:
; 79   :         v = PyLong_FromLongLong(*(PY_LONG_LONG *)addr);

  00251	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  00256	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00259	e8 00 00 00 00	 call	 PyLong_FromLongLong
  0025e	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 80   :         break;

  00263	eb 48		 jmp	 SHORT $LN30@PyMember_G
$LN3@PyMember_G:

; 81   :     case T_ULONGLONG:
; 82   :         v = PyLong_FromUnsignedLongLong(*(unsigned PY_LONG_LONG *)addr);

  00265	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$[rsp]
  0026a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0026d	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  00272	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 83   :         break;

  00277	eb 34		 jmp	 SHORT $LN30@PyMember_G
$LN2@PyMember_G:

; 84   : #endif /* HAVE_LONG_LONG */
; 85   :     case T_NONE:
; 86   :         v = Py_None;

  00279	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00280	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 87   :         Py_INCREF(v);

  00285	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0028a	e8 00 00 00 00	 call	 _Py_IncRef

; 88   :         break;

  0028f	eb 1c		 jmp	 SHORT $LN30@PyMember_G
$LN1@PyMember_G:

; 89   :     default:
; 90   :         PyErr_SetString(PyExc_SystemError, "bad memberdescr type");

  00291	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@OMHGPBAM@bad?5memberdescr?5type?$AA@
  00298	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0029f	e8 00 00 00 00	 call	 PyErr_SetString

; 91   :         v = NULL;

  002a4	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR v$[rsp], 0
$LN30@PyMember_G:

; 92   :     }
; 93   :     return v;

  002ad	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]

; 94   : }

  002b2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002b6	c3		 ret	 0
  002b7	90		 npad	 1
$LN34@PyMember_G:
  002b8	00 00 00 00	 DD	 $LN26@PyMember_G
  002bc	00 00 00 00	 DD	 $LN24@PyMember_G
  002c0	00 00 00 00	 DD	 $LN22@PyMember_G
  002c4	00 00 00 00	 DD	 $LN19@PyMember_G
  002c8	00 00 00 00	 DD	 $LN18@PyMember_G
  002cc	00 00 00 00	 DD	 $LN17@PyMember_G
  002d0	00 00 00 00	 DD	 $LN12@PyMember_G
  002d4	00 00 00 00	 DD	 $LN13@PyMember_G
  002d8	00 00 00 00	 DD	 $LN28@PyMember_G
  002dc	00 00 00 00	 DD	 $LN27@PyMember_G
  002e0	00 00 00 00	 DD	 $LN25@PyMember_G
  002e4	00 00 00 00	 DD	 $LN23@PyMember_G
  002e8	00 00 00 00	 DD	 $LN21@PyMember_G
  002ec	00 00 00 00	 DD	 $LN14@PyMember_G
  002f0	00 00 00 00	 DD	 $LN29@PyMember_G
  002f4	00 00 00 00	 DD	 $LN1@PyMember_G
  002f8	00 00 00 00	 DD	 $LN10@PyMember_G
  002fc	00 00 00 00	 DD	 $LN4@PyMember_G
  00300	00 00 00 00	 DD	 $LN3@PyMember_G
  00304	00 00 00 00	 DD	 $LN20@PyMember_G
  00308	00 00 00 00	 DD	 $LN2@PyMember_G
PyMember_GetOne ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@CFDFPIO@bad?5memberdescr?5type?5for?5?$CFs?$AA@ ; `string'
PUBLIC	_Py_DecRef
PUBLIC	__real@bff0000000000000
PUBLIC	??_C@_0CE@LOFDCFIJ@Truncation?5of?5value?5to?5unsigned?5@ ; `string'
PUBLIC	??_C@_0CL@BFDOFHCC@Writing?5negative?5value?5into?5unsi@ ; `string'
PUBLIC	??_C@_0BL@HDEENFHC@Truncation?5of?5value?5to?5int?$AA@ ; `string'
PUBLIC	??_C@_0CG@BHHGENBJ@Truncation?5of?5value?5to?5unsigned?5@ ; `string'
PUBLIC	??_C@_0BN@FNIDEKGE@Truncation?5of?5value?5to?5short?$AA@ ; `string'
PUBLIC	??_C@_0CF@PMOFFFDD@Truncation?5of?5value?5to?5unsigned?5@ ; `string'
PUBLIC	??_C@_0BM@NGEHGJFH@Truncation?5of?5value?5to?5char?$AA@ ; `string'
PUBLIC	??_C@_0CC@EJFJMAJD@attribute?5value?5type?5must?5be?5boo@ ; `string'
PUBLIC	??_C@_0CE@KCFPEPMK@can?8t?5delete?5numeric?1char?5attrib@ ; `string'
PUBLIC	??_C@_0BD@NCFELION@readonly?5attribute?$AA@	; `string'
PUBLIC	PyMember_SetOne
EXTRN	PyErr_Format:PROC
EXTRN	PyLong_AsUnsignedLongLong:PROC
EXTRN	PyLong_AsLongLong:PROC
EXTRN	PyErr_BadArgument:PROC
EXTRN	PyUnicode_AsUTF8AndSize:PROC
EXTRN	PyFloat_AsDouble:PROC
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyLong_AsUnsignedLong:PROC
EXTRN	PyErr_WarnEx:PROC
EXTRN	PyExc_RuntimeWarning:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyBool_Type:BYTE
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\structmember.c
pdata	SEGMENT
$pdata$PyMember_SetOne DD imagerel $LN104
	DD	imagerel $LN104+2164
	DD	imagerel $unwind$PyMember_SetOne
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMember_SetOne DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0BM@CFDFPIO@bad?5memberdescr?5type?5for?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BM@CFDFPIO@bad?5memberdescr?5type?5for?5?$CFs?$AA@ DB 'bad memberd'
	DB	'escr type for %s', 00H			; `string'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT ??_C@_0CE@LOFDCFIJ@Truncation?5of?5value?5to?5unsigned?5@
CONST	SEGMENT
??_C@_0CE@LOFDCFIJ@Truncation?5of?5value?5to?5unsigned?5@ DB 'Truncation '
	DB	'of value to unsigned int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BFDOFHCC@Writing?5negative?5value?5into?5unsi@
CONST	SEGMENT
??_C@_0CL@BFDOFHCC@Writing?5negative?5value?5into?5unsi@ DB 'Writing nega'
	DB	'tive value into unsigned field', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HDEENFHC@Truncation?5of?5value?5to?5int?$AA@
CONST	SEGMENT
??_C@_0BL@HDEENFHC@Truncation?5of?5value?5to?5int?$AA@ DB 'Truncation of '
	DB	'value to int', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BHHGENBJ@Truncation?5of?5value?5to?5unsigned?5@
CONST	SEGMENT
??_C@_0CG@BHHGENBJ@Truncation?5of?5value?5to?5unsigned?5@ DB 'Truncation '
	DB	'of value to unsigned short', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FNIDEKGE@Truncation?5of?5value?5to?5short?$AA@
CONST	SEGMENT
??_C@_0BN@FNIDEKGE@Truncation?5of?5value?5to?5short?$AA@ DB 'Truncation o'
	DB	'f value to short', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PMOFFFDD@Truncation?5of?5value?5to?5unsigned?5@
CONST	SEGMENT
??_C@_0CF@PMOFFFDD@Truncation?5of?5value?5to?5unsigned?5@ DB 'Truncation '
	DB	'of value to unsigned char', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NGEHGJFH@Truncation?5of?5value?5to?5char?$AA@
CONST	SEGMENT
??_C@_0BM@NGEHGJFH@Truncation?5of?5value?5to?5char?$AA@ DB 'Truncation of'
	DB	' value to char', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EJFJMAJD@attribute?5value?5type?5must?5be?5boo@
CONST	SEGMENT
??_C@_0CC@EJFJMAJD@attribute?5value?5type?5must?5be?5boo@ DB 'attribute v'
	DB	'alue type must be bool', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KCFPEPMK@can?8t?5delete?5numeric?1char?5attrib@
CONST	SEGMENT
??_C@_0CE@KCFPEPMK@can?8t?5delete?5numeric?1char?5attrib@ DB 'can''t dele'
	DB	'te numeric/char attribute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NCFELION@readonly?5attribute?$AA@
CONST	SEGMENT
??_C@_0BD@NCFELION@readonly?5attribute?$AA@ DB 'readonly attribute', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyMember_SetOne
_TEXT	SEGMENT
oldv$ = 32
long_val$20431 = 40
long_val$20443 = 44
long_val$20455 = 48
long_val$20467 = 52
long_val$20479 = 56
ulong_val$20491 = 60
double_val$20535 = 64
len$20558 = 72
string$20557 = 80
value$20565 = 88
value$20569 = 96
tv82 = 104
addr$ = 128
l$ = 136
v$ = 144
PyMember_SetOne PROC					; COMDAT

; 104  : {

$LN104:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 105  :     PyObject *oldv;
; 106  : 
; 107  :     addr += l->offset;

  00013	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  0001b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  00027	48 03 c8	 add	 rcx, rax
  0002a	48 8b c1	 mov	 rax, rcx
  0002d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR addr$[rsp], rax

; 108  : 
; 109  :     if ((l->flags & READONLY))

  00035	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  0003d	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 1d		 je	 SHORT $LN100@PyMember_S

; 110  :     {
; 111  :         PyErr_SetString(PyExc_AttributeError, "readonly attribute");

  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@NCFELION@readonly?5attribute?$AA@
  0004e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00055	e8 00 00 00 00	 call	 PyErr_SetString

; 112  :         return -1;

  0005a	b8 ff ff ff ff	 mov	 eax, -1
  0005f	e9 bb 07 00 00	 jmp	 $LN101@PyMember_S
$LN100@PyMember_S:

; 113  :     }
; 114  :     if (v == NULL) {

  00064	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR v$[rsp], 0
  0006d	75 6a		 jne	 SHORT $LN99@PyMember_S

; 115  :         if (l->type == T_OBJECT_EX) {

  0006f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  00077	83 78 08 10	 cmp	 DWORD PTR [rax+8], 16
  0007b	75 31		 jne	 SHORT $LN98@PyMember_S

; 116  :             /* Check if the attribute is set. */
; 117  :             if (*(PyObject **)addr == NULL) {

  0007d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00085	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00089	75 21		 jne	 SHORT $LN97@PyMember_S

; 118  :                 PyErr_SetString(PyExc_AttributeError, l->name);

  0008b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  00093	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00096	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0009d	e8 00 00 00 00	 call	 PyErr_SetString

; 119  :                 return -1;

  000a2	b8 ff ff ff ff	 mov	 eax, -1
  000a7	e9 73 07 00 00	 jmp	 $LN101@PyMember_S
$LN97@PyMember_S:

; 120  :             }

  000ac	eb 2b		 jmp	 SHORT $LN96@PyMember_S
$LN98@PyMember_S:

; 121  :         }
; 122  :         else if (l->type != T_OBJECT) {

  000ae	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  000b6	83 78 08 06	 cmp	 DWORD PTR [rax+8], 6
  000ba	74 1d		 je	 SHORT $LN95@PyMember_S

; 123  :             PyErr_SetString(PyExc_TypeError,
; 124  :                             "can't delete numeric/char attribute");

  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@KCFPEPMK@can?8t?5delete?5numeric?1char?5attrib@
  000c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ca	e8 00 00 00 00	 call	 PyErr_SetString

; 125  :             return -1;

  000cf	b8 ff ff ff ff	 mov	 eax, -1
  000d4	e9 46 07 00 00	 jmp	 $LN101@PyMember_S
$LN95@PyMember_S:
$LN96@PyMember_S:
$LN99@PyMember_S:

; 126  :         }
; 127  :     }
; 128  :     switch (l->type) {

  000d9	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  000e1	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000e4	89 44 24 68	 mov	 DWORD PTR tv82[rsp], eax
  000e8	83 7c 24 68 13	 cmp	 DWORD PTR tv82[rsp], 19
  000ed	0f 87 05 07 00
	00		 ja	 $LN1@PyMember_S
  000f3	48 63 44 24 68	 movsxd	 rax, DWORD PTR tv82[rsp]
  000f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000ff	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN103@PyMember_S[rcx+rax*4]
  00106	48 03 c1	 add	 rax, rcx
  00109	ff e0		 jmp	 rax
$LN92@PyMember_S:

; 129  :     case T_BOOL:{
; 130  :         if (!PyBool_Check(v)) {

  0010b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  00112	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0011a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0011e	74 1d		 je	 SHORT $LN91@PyMember_S

; 131  :             PyErr_SetString(PyExc_TypeError,
; 132  :                             "attribute value type must be bool");

  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@EJFJMAJD@attribute?5value?5type?5must?5be?5boo@
  00127	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0012e	e8 00 00 00 00	 call	 PyErr_SetString

; 133  :             return -1;

  00133	b8 ff ff ff ff	 mov	 eax, -1
  00138	e9 e2 06 00 00	 jmp	 $LN101@PyMember_S
$LN91@PyMember_S:

; 134  :         }
; 135  :         if (v == Py_True)

  0013d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00144	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR v$[rsp], rax
  0014c	75 0d		 jne	 SHORT $LN90@PyMember_S

; 136  :             *(char*)addr = (char) 1;

  0014e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00156	c6 00 01	 mov	 BYTE PTR [rax], 1

; 137  :         else

  00159	eb 0b		 jmp	 SHORT $LN89@PyMember_S
$LN90@PyMember_S:

; 138  :             *(char*)addr = (char) 0;

  0015b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00163	c6 00 00	 mov	 BYTE PTR [rax], 0
$LN89@PyMember_S:

; 139  :         break;

  00166	e9 b2 06 00 00	 jmp	 $LN93@PyMember_S
$LN88@PyMember_S:

; 140  :         }
; 141  :     case T_BYTE:{
; 142  :         long long_val = PyLong_AsLong(v);

  0016b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00173	e8 00 00 00 00	 call	 PyLong_AsLong
  00178	89 44 24 28	 mov	 DWORD PTR long_val$20431[rsp], eax

; 143  :         if ((long_val == -1) && PyErr_Occurred())

  0017c	83 7c 24 28 ff	 cmp	 DWORD PTR long_val$20431[rsp], -1
  00181	75 14		 jne	 SHORT $LN87@PyMember_S
  00183	e8 00 00 00 00	 call	 PyErr_Occurred
  00188	48 85 c0	 test	 rax, rax
  0018b	74 0a		 je	 SHORT $LN87@PyMember_S

; 144  :             return -1;

  0018d	b8 ff ff ff ff	 mov	 eax, -1
  00192	e9 88 06 00 00	 jmp	 $LN101@PyMember_S
$LN87@PyMember_S:

; 145  :         *(char*)addr = (char)long_val;

  00197	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0019f	0f b6 4c 24 28	 movzx	 ecx, BYTE PTR long_val$20431[rsp]
  001a4	88 08		 mov	 BYTE PTR [rax], cl

; 146  :         /* XXX: For compatibility, only warn about truncations
; 147  :            for now. */
; 148  :         if ((long_val > CHAR_MAX) || (long_val < CHAR_MIN))

  001a6	83 7c 24 28 7f	 cmp	 DWORD PTR long_val$20431[rsp], 127 ; 0000007fH
  001ab	7f 07		 jg	 SHORT $LN85@PyMember_S
  001ad	83 7c 24 28 80	 cmp	 DWORD PTR long_val$20431[rsp], -128 ; ffffffffffffff80H
  001b2	7d 2d		 jge	 SHORT $LN86@PyMember_S
$LN85@PyMember_S:
$LN84@PyMember_S:

; 149  :             WARN("Truncation of value to char");

  001b4	41 b8 01 00 00
	00		 mov	 r8d, 1
  001ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@NGEHGJFH@Truncation?5of?5value?5to?5char?$AA@
  001c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  001c8	e8 00 00 00 00	 call	 PyErr_WarnEx
  001cd	85 c0		 test	 eax, eax
  001cf	7d 0a		 jge	 SHORT $LN81@PyMember_S
  001d1	b8 ff ff ff ff	 mov	 eax, -1
  001d6	e9 44 06 00 00	 jmp	 $LN101@PyMember_S
$LN81@PyMember_S:
  001db	33 c0		 xor	 eax, eax
  001dd	85 c0		 test	 eax, eax
  001df	75 d3		 jne	 SHORT $LN84@PyMember_S
$LN86@PyMember_S:

; 150  :         break;

  001e1	e9 37 06 00 00	 jmp	 $LN93@PyMember_S
$LN80@PyMember_S:

; 151  :         }
; 152  :     case T_UBYTE:{
; 153  :         long long_val = PyLong_AsLong(v);

  001e6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  001ee	e8 00 00 00 00	 call	 PyLong_AsLong
  001f3	89 44 24 2c	 mov	 DWORD PTR long_val$20443[rsp], eax

; 154  :         if ((long_val == -1) && PyErr_Occurred())

  001f7	83 7c 24 2c ff	 cmp	 DWORD PTR long_val$20443[rsp], -1
  001fc	75 14		 jne	 SHORT $LN79@PyMember_S
  001fe	e8 00 00 00 00	 call	 PyErr_Occurred
  00203	48 85 c0	 test	 rax, rax
  00206	74 0a		 je	 SHORT $LN79@PyMember_S

; 155  :             return -1;

  00208	b8 ff ff ff ff	 mov	 eax, -1
  0020d	e9 0d 06 00 00	 jmp	 $LN101@PyMember_S
$LN79@PyMember_S:

; 156  :         *(unsigned char*)addr = (unsigned char)long_val;

  00212	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0021a	0f b6 4c 24 2c	 movzx	 ecx, BYTE PTR long_val$20443[rsp]
  0021f	88 08		 mov	 BYTE PTR [rax], cl

; 157  :         if ((long_val > UCHAR_MAX) || (long_val < 0))

  00221	81 7c 24 2c ff
	00 00 00	 cmp	 DWORD PTR long_val$20443[rsp], 255 ; 000000ffH
  00229	7f 07		 jg	 SHORT $LN77@PyMember_S
  0022b	83 7c 24 2c 00	 cmp	 DWORD PTR long_val$20443[rsp], 0
  00230	7d 2d		 jge	 SHORT $LN78@PyMember_S
$LN77@PyMember_S:
$LN76@PyMember_S:

; 158  :             WARN("Truncation of value to unsigned char");

  00232	41 b8 01 00 00
	00		 mov	 r8d, 1
  00238	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@PMOFFFDD@Truncation?5of?5value?5to?5unsigned?5@
  0023f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  00246	e8 00 00 00 00	 call	 PyErr_WarnEx
  0024b	85 c0		 test	 eax, eax
  0024d	7d 0a		 jge	 SHORT $LN73@PyMember_S
  0024f	b8 ff ff ff ff	 mov	 eax, -1
  00254	e9 c6 05 00 00	 jmp	 $LN101@PyMember_S
$LN73@PyMember_S:
  00259	33 c0		 xor	 eax, eax
  0025b	85 c0		 test	 eax, eax
  0025d	75 d3		 jne	 SHORT $LN76@PyMember_S
$LN78@PyMember_S:

; 159  :         break;

  0025f	e9 b9 05 00 00	 jmp	 $LN93@PyMember_S
$LN72@PyMember_S:

; 160  :         }
; 161  :     case T_SHORT:{
; 162  :         long long_val = PyLong_AsLong(v);

  00264	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0026c	e8 00 00 00 00	 call	 PyLong_AsLong
  00271	89 44 24 30	 mov	 DWORD PTR long_val$20455[rsp], eax

; 163  :         if ((long_val == -1) && PyErr_Occurred())

  00275	83 7c 24 30 ff	 cmp	 DWORD PTR long_val$20455[rsp], -1
  0027a	75 14		 jne	 SHORT $LN71@PyMember_S
  0027c	e8 00 00 00 00	 call	 PyErr_Occurred
  00281	48 85 c0	 test	 rax, rax
  00284	74 0a		 je	 SHORT $LN71@PyMember_S

; 164  :             return -1;

  00286	b8 ff ff ff ff	 mov	 eax, -1
  0028b	e9 8f 05 00 00	 jmp	 $LN101@PyMember_S
$LN71@PyMember_S:

; 165  :         *(short*)addr = (short)long_val;

  00290	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00298	0f b7 4c 24 30	 movzx	 ecx, WORD PTR long_val$20455[rsp]
  0029d	66 89 08	 mov	 WORD PTR [rax], cx

; 166  :         if ((long_val > SHRT_MAX) || (long_val < SHRT_MIN))

  002a0	81 7c 24 30 ff
	7f 00 00	 cmp	 DWORD PTR long_val$20455[rsp], 32767 ; 00007fffH
  002a8	7f 0a		 jg	 SHORT $LN69@PyMember_S
  002aa	81 7c 24 30 00
	80 ff ff	 cmp	 DWORD PTR long_val$20455[rsp], -32768 ; ffffffffffff8000H
  002b2	7d 2d		 jge	 SHORT $LN70@PyMember_S
$LN69@PyMember_S:
$LN68@PyMember_S:

; 167  :             WARN("Truncation of value to short");

  002b4	41 b8 01 00 00
	00		 mov	 r8d, 1
  002ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@FNIDEKGE@Truncation?5of?5value?5to?5short?$AA@
  002c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  002c8	e8 00 00 00 00	 call	 PyErr_WarnEx
  002cd	85 c0		 test	 eax, eax
  002cf	7d 0a		 jge	 SHORT $LN65@PyMember_S
  002d1	b8 ff ff ff ff	 mov	 eax, -1
  002d6	e9 44 05 00 00	 jmp	 $LN101@PyMember_S
$LN65@PyMember_S:
  002db	33 c0		 xor	 eax, eax
  002dd	85 c0		 test	 eax, eax
  002df	75 d3		 jne	 SHORT $LN68@PyMember_S
$LN70@PyMember_S:

; 168  :         break;

  002e1	e9 37 05 00 00	 jmp	 $LN93@PyMember_S
$LN64@PyMember_S:

; 169  :         }
; 170  :     case T_USHORT:{
; 171  :         long long_val = PyLong_AsLong(v);

  002e6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  002ee	e8 00 00 00 00	 call	 PyLong_AsLong
  002f3	89 44 24 34	 mov	 DWORD PTR long_val$20467[rsp], eax

; 172  :         if ((long_val == -1) && PyErr_Occurred())

  002f7	83 7c 24 34 ff	 cmp	 DWORD PTR long_val$20467[rsp], -1
  002fc	75 14		 jne	 SHORT $LN63@PyMember_S
  002fe	e8 00 00 00 00	 call	 PyErr_Occurred
  00303	48 85 c0	 test	 rax, rax
  00306	74 0a		 je	 SHORT $LN63@PyMember_S

; 173  :             return -1;

  00308	b8 ff ff ff ff	 mov	 eax, -1
  0030d	e9 0d 05 00 00	 jmp	 $LN101@PyMember_S
$LN63@PyMember_S:

; 174  :         *(unsigned short*)addr = (unsigned short)long_val;

  00312	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0031a	0f b7 4c 24 34	 movzx	 ecx, WORD PTR long_val$20467[rsp]
  0031f	66 89 08	 mov	 WORD PTR [rax], cx

; 175  :         if ((long_val > USHRT_MAX) || (long_val < 0))

  00322	81 7c 24 34 ff
	ff 00 00	 cmp	 DWORD PTR long_val$20467[rsp], 65535 ; 0000ffffH
  0032a	7f 07		 jg	 SHORT $LN61@PyMember_S
  0032c	83 7c 24 34 00	 cmp	 DWORD PTR long_val$20467[rsp], 0
  00331	7d 2d		 jge	 SHORT $LN62@PyMember_S
$LN61@PyMember_S:
$LN60@PyMember_S:

; 176  :             WARN("Truncation of value to unsigned short");

  00333	41 b8 01 00 00
	00		 mov	 r8d, 1
  00339	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BHHGENBJ@Truncation?5of?5value?5to?5unsigned?5@
  00340	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  00347	e8 00 00 00 00	 call	 PyErr_WarnEx
  0034c	85 c0		 test	 eax, eax
  0034e	7d 0a		 jge	 SHORT $LN57@PyMember_S
  00350	b8 ff ff ff ff	 mov	 eax, -1
  00355	e9 c5 04 00 00	 jmp	 $LN101@PyMember_S
$LN57@PyMember_S:
  0035a	33 c0		 xor	 eax, eax
  0035c	85 c0		 test	 eax, eax
  0035e	75 d3		 jne	 SHORT $LN60@PyMember_S
$LN62@PyMember_S:

; 177  :         break;

  00360	e9 b8 04 00 00	 jmp	 $LN93@PyMember_S
$LN56@PyMember_S:

; 178  :         }
; 179  :     case T_INT:{
; 180  :         long long_val = PyLong_AsLong(v);

  00365	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0036d	e8 00 00 00 00	 call	 PyLong_AsLong
  00372	89 44 24 38	 mov	 DWORD PTR long_val$20479[rsp], eax

; 181  :         if ((long_val == -1) && PyErr_Occurred())

  00376	83 7c 24 38 ff	 cmp	 DWORD PTR long_val$20479[rsp], -1
  0037b	75 14		 jne	 SHORT $LN55@PyMember_S
  0037d	e8 00 00 00 00	 call	 PyErr_Occurred
  00382	48 85 c0	 test	 rax, rax
  00385	74 0a		 je	 SHORT $LN55@PyMember_S

; 182  :             return -1;

  00387	b8 ff ff ff ff	 mov	 eax, -1
  0038c	e9 8e 04 00 00	 jmp	 $LN101@PyMember_S
$LN55@PyMember_S:

; 183  :         *(int *)addr = (int)long_val;

  00391	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00399	8b 4c 24 38	 mov	 ecx, DWORD PTR long_val$20479[rsp]
  0039d	89 08		 mov	 DWORD PTR [rax], ecx

; 184  :         if ((long_val > INT_MAX) || (long_val < INT_MIN))

  0039f	81 7c 24 38 ff
	ff ff 7f	 cmp	 DWORD PTR long_val$20479[rsp], 2147483647 ; 7fffffffH
  003a7	7f 0a		 jg	 SHORT $LN53@PyMember_S
  003a9	81 7c 24 38 00
	00 00 80	 cmp	 DWORD PTR long_val$20479[rsp], -2147483648 ; ffffffff80000000H
  003b1	7d 2d		 jge	 SHORT $LN54@PyMember_S
$LN53@PyMember_S:
$LN52@PyMember_S:

; 185  :             WARN("Truncation of value to int");

  003b3	41 b8 01 00 00
	00		 mov	 r8d, 1
  003b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@HDEENFHC@Truncation?5of?5value?5to?5int?$AA@
  003c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  003c7	e8 00 00 00 00	 call	 PyErr_WarnEx
  003cc	85 c0		 test	 eax, eax
  003ce	7d 0a		 jge	 SHORT $LN49@PyMember_S
  003d0	b8 ff ff ff ff	 mov	 eax, -1
  003d5	e9 45 04 00 00	 jmp	 $LN101@PyMember_S
$LN49@PyMember_S:
  003da	33 c0		 xor	 eax, eax
  003dc	85 c0		 test	 eax, eax
  003de	75 d3		 jne	 SHORT $LN52@PyMember_S
$LN54@PyMember_S:

; 186  :         break;

  003e0	e9 38 04 00 00	 jmp	 $LN93@PyMember_S
$LN48@PyMember_S:

; 187  :         }
; 188  :     case T_UINT:{
; 189  :         unsigned long ulong_val = PyLong_AsUnsignedLong(v);

  003e5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  003ed	e8 00 00 00 00	 call	 PyLong_AsUnsignedLong
  003f2	89 44 24 3c	 mov	 DWORD PTR ulong_val$20491[rsp], eax

; 190  :         if ((ulong_val == (unsigned long)-1) && PyErr_Occurred()) {

  003f6	83 7c 24 3c ff	 cmp	 DWORD PTR ulong_val$20491[rsp], -1 ; ffffffffH
  003fb	75 78		 jne	 SHORT $LN47@PyMember_S
  003fd	e8 00 00 00 00	 call	 PyErr_Occurred
  00402	48 85 c0	 test	 rax, rax
  00405	74 6e		 je	 SHORT $LN47@PyMember_S

; 191  :             /* XXX: For compatibility, accept negative int values
; 192  :                as well. */
; 193  :             PyErr_Clear();

  00407	e8 00 00 00 00	 call	 PyErr_Clear

; 194  :             ulong_val = PyLong_AsLong(v);

  0040c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00414	e8 00 00 00 00	 call	 PyLong_AsLong
  00419	89 44 24 3c	 mov	 DWORD PTR ulong_val$20491[rsp], eax

; 195  :             if ((ulong_val == (unsigned long)-1) &&
; 196  :                 PyErr_Occurred())

  0041d	83 7c 24 3c ff	 cmp	 DWORD PTR ulong_val$20491[rsp], -1 ; ffffffffH
  00422	75 14		 jne	 SHORT $LN46@PyMember_S
  00424	e8 00 00 00 00	 call	 PyErr_Occurred
  00429	48 85 c0	 test	 rax, rax
  0042c	74 0a		 je	 SHORT $LN46@PyMember_S

; 197  :                 return -1;

  0042e	b8 ff ff ff ff	 mov	 eax, -1
  00433	e9 e7 03 00 00	 jmp	 $LN101@PyMember_S
$LN46@PyMember_S:

; 198  :             *(unsigned int *)addr = (unsigned int)ulong_val;

  00438	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00440	8b 4c 24 3c	 mov	 ecx, DWORD PTR ulong_val$20491[rsp]
  00444	89 08		 mov	 DWORD PTR [rax], ecx
$LN45@PyMember_S:

; 199  :             WARN("Writing negative value into unsigned field");

  00446	41 b8 01 00 00
	00		 mov	 r8d, 1
  0044c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@BFDOFHCC@Writing?5negative?5value?5into?5unsi@
  00453	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  0045a	e8 00 00 00 00	 call	 PyErr_WarnEx
  0045f	85 c0		 test	 eax, eax
  00461	7d 0a		 jge	 SHORT $LN42@PyMember_S
  00463	b8 ff ff ff ff	 mov	 eax, -1
  00468	e9 b2 03 00 00	 jmp	 $LN101@PyMember_S
$LN42@PyMember_S:
  0046d	33 c0		 xor	 eax, eax
  0046f	85 c0		 test	 eax, eax
  00471	75 d3		 jne	 SHORT $LN45@PyMember_S

; 200  :         } else

  00473	eb 0e		 jmp	 SHORT $LN41@PyMember_S
$LN47@PyMember_S:

; 201  :             *(unsigned int *)addr = (unsigned int)ulong_val;

  00475	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0047d	8b 4c 24 3c	 mov	 ecx, DWORD PTR ulong_val$20491[rsp]
  00481	89 08		 mov	 DWORD PTR [rax], ecx
$LN41@PyMember_S:

; 202  :         if (ulong_val > UINT_MAX)

  00483	83 7c 24 3c ff	 cmp	 DWORD PTR ulong_val$20491[rsp], -1 ; ffffffffH
  00488	76 2d		 jbe	 SHORT $LN40@PyMember_S
$LN39@PyMember_S:

; 203  :             WARN("Truncation of value to unsigned int");

  0048a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00490	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@LOFDCFIJ@Truncation?5of?5value?5to?5unsigned?5@
  00497	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  0049e	e8 00 00 00 00	 call	 PyErr_WarnEx
  004a3	85 c0		 test	 eax, eax
  004a5	7d 0a		 jge	 SHORT $LN36@PyMember_S
  004a7	b8 ff ff ff ff	 mov	 eax, -1
  004ac	e9 6e 03 00 00	 jmp	 $LN101@PyMember_S
$LN36@PyMember_S:
  004b1	33 c0		 xor	 eax, eax
  004b3	85 c0		 test	 eax, eax
  004b5	75 d3		 jne	 SHORT $LN39@PyMember_S
$LN40@PyMember_S:

; 204  :         break;

  004b7	e9 61 03 00 00	 jmp	 $LN93@PyMember_S
$LN35@PyMember_S:

; 205  :         }
; 206  :     case T_LONG:{
; 207  :         *(long*)addr = PyLong_AsLong(v);

  004bc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  004c4	e8 00 00 00 00	 call	 PyLong_AsLong
  004c9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  004d1	89 01		 mov	 DWORD PTR [rcx], eax

; 208  :         if ((*(long*)addr == -1) && PyErr_Occurred())

  004d3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  004db	83 38 ff	 cmp	 DWORD PTR [rax], -1
  004de	75 14		 jne	 SHORT $LN34@PyMember_S
  004e0	e8 00 00 00 00	 call	 PyErr_Occurred
  004e5	48 85 c0	 test	 rax, rax
  004e8	74 0a		 je	 SHORT $LN34@PyMember_S

; 209  :             return -1;

  004ea	b8 ff ff ff ff	 mov	 eax, -1
  004ef	e9 2b 03 00 00	 jmp	 $LN101@PyMember_S
$LN34@PyMember_S:

; 210  :         break;

  004f4	e9 24 03 00 00	 jmp	 $LN93@PyMember_S
$LN33@PyMember_S:

; 211  :         }
; 212  :     case T_ULONG:{
; 213  :         *(unsigned long*)addr = PyLong_AsUnsignedLong(v);

  004f9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00501	e8 00 00 00 00	 call	 PyLong_AsUnsignedLong
  00506	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  0050e	89 01		 mov	 DWORD PTR [rcx], eax

; 214  :         if ((*(unsigned long*)addr == (unsigned long)-1)
; 215  :             && PyErr_Occurred()) {

  00510	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00518	83 38 ff	 cmp	 DWORD PTR [rax], -1	; ffffffffH
  0051b	75 74		 jne	 SHORT $LN32@PyMember_S
  0051d	e8 00 00 00 00	 call	 PyErr_Occurred
  00522	48 85 c0	 test	 rax, rax
  00525	74 6a		 je	 SHORT $LN32@PyMember_S

; 216  :             /* XXX: For compatibility, accept negative int values
; 217  :                as well. */
; 218  :             PyErr_Clear();

  00527	e8 00 00 00 00	 call	 PyErr_Clear

; 219  :             *(unsigned long*)addr = PyLong_AsLong(v);

  0052c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00534	e8 00 00 00 00	 call	 PyLong_AsLong
  00539	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  00541	89 01		 mov	 DWORD PTR [rcx], eax

; 220  :             if ((*(unsigned long*)addr == (unsigned long)-1)
; 221  :                 && PyErr_Occurred())

  00543	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0054b	83 38 ff	 cmp	 DWORD PTR [rax], -1	; ffffffffH
  0054e	75 14		 jne	 SHORT $LN31@PyMember_S
  00550	e8 00 00 00 00	 call	 PyErr_Occurred
  00555	48 85 c0	 test	 rax, rax
  00558	74 0a		 je	 SHORT $LN31@PyMember_S

; 222  :                 return -1;

  0055a	b8 ff ff ff ff	 mov	 eax, -1
  0055f	e9 bb 02 00 00	 jmp	 $LN101@PyMember_S
$LN31@PyMember_S:
$LN30@PyMember_S:

; 223  :             WARN("Writing negative value into unsigned field");

  00564	41 b8 01 00 00
	00		 mov	 r8d, 1
  0056a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@BFDOFHCC@Writing?5negative?5value?5into?5unsi@
  00571	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  00578	e8 00 00 00 00	 call	 PyErr_WarnEx
  0057d	85 c0		 test	 eax, eax
  0057f	7d 0a		 jge	 SHORT $LN27@PyMember_S
  00581	b8 ff ff ff ff	 mov	 eax, -1
  00586	e9 94 02 00 00	 jmp	 $LN101@PyMember_S
$LN27@PyMember_S:
  0058b	33 c0		 xor	 eax, eax
  0058d	85 c0		 test	 eax, eax
  0058f	75 d3		 jne	 SHORT $LN30@PyMember_S
$LN32@PyMember_S:

; 224  :         }
; 225  :         break;

  00591	e9 87 02 00 00	 jmp	 $LN93@PyMember_S
$LN26@PyMember_S:

; 226  :         }
; 227  :     case T_PYSSIZET:{
; 228  :         *(Py_ssize_t*)addr = PyLong_AsSsize_t(v);

  00596	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0059e	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  005a3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  005ab	48 89 01	 mov	 QWORD PTR [rcx], rax

; 229  :         if ((*(Py_ssize_t*)addr == (Py_ssize_t)-1)
; 230  :             && PyErr_Occurred())

  005ae	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  005b6	48 83 38 ff	 cmp	 QWORD PTR [rax], -1
  005ba	75 14		 jne	 SHORT $LN25@PyMember_S
  005bc	e8 00 00 00 00	 call	 PyErr_Occurred
  005c1	48 85 c0	 test	 rax, rax
  005c4	74 0a		 je	 SHORT $LN25@PyMember_S

; 231  :                         return -1;

  005c6	b8 ff ff ff ff	 mov	 eax, -1
  005cb	e9 4f 02 00 00	 jmp	 $LN101@PyMember_S
$LN25@PyMember_S:

; 232  :         break;

  005d0	e9 48 02 00 00	 jmp	 $LN93@PyMember_S
$LN24@PyMember_S:

; 233  :         }
; 234  :     case T_FLOAT:{
; 235  :         double double_val = PyFloat_AsDouble(v);

  005d5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  005dd	e8 00 00 00 00	 call	 PyFloat_AsDouble
  005e2	f2 0f 11 44 24
	40		 movsdx	 QWORD PTR double_val$20535[rsp], xmm0

; 236  :         if ((double_val == -1) && PyErr_Occurred())

  005e8	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR double_val$20535[rsp]
  005ee	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  005f6	7a 16		 jp	 SHORT $LN23@PyMember_S
  005f8	75 14		 jne	 SHORT $LN23@PyMember_S
  005fa	e8 00 00 00 00	 call	 PyErr_Occurred
  005ff	48 85 c0	 test	 rax, rax
  00602	74 0a		 je	 SHORT $LN23@PyMember_S

; 237  :             return -1;

  00604	b8 ff ff ff ff	 mov	 eax, -1
  00609	e9 11 02 00 00	 jmp	 $LN101@PyMember_S
$LN23@PyMember_S:

; 238  :         *(float*)addr = (float)double_val;

  0060e	f2 0f 5a 44 24
	40		 cvtsd2ss xmm0, QWORD PTR double_val$20535[rsp]
  00614	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0061c	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 239  :         break;

  00620	e9 f8 01 00 00	 jmp	 $LN93@PyMember_S
$LN22@PyMember_S:

; 240  :         }
; 241  :     case T_DOUBLE:
; 242  :         *(double*)addr = PyFloat_AsDouble(v);

  00625	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0062d	e8 00 00 00 00	 call	 PyFloat_AsDouble
  00632	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0063a	f2 0f 11 00	 movsdx	 QWORD PTR [rax], xmm0

; 243  :         if ((*(double*)addr == -1) && PyErr_Occurred())

  0063e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00646	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
  0064a	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  00652	7a 16		 jp	 SHORT $LN21@PyMember_S
  00654	75 14		 jne	 SHORT $LN21@PyMember_S
  00656	e8 00 00 00 00	 call	 PyErr_Occurred
  0065b	48 85 c0	 test	 rax, rax
  0065e	74 0a		 je	 SHORT $LN21@PyMember_S

; 244  :             return -1;

  00660	b8 ff ff ff ff	 mov	 eax, -1
  00665	e9 b5 01 00 00	 jmp	 $LN101@PyMember_S
$LN21@PyMember_S:

; 245  :         break;

  0066a	e9 ae 01 00 00	 jmp	 $LN93@PyMember_S
$LN20@PyMember_S:
$LN19@PyMember_S:

; 246  :     case T_OBJECT:
; 247  :     case T_OBJECT_EX:
; 248  :         Py_XINCREF(v);

  0066f	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR v$[rsp], 0
  00678	74 0d		 je	 SHORT $LN16@PyMember_S
  0067a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00682	e8 00 00 00 00	 call	 _Py_IncRef
$LN16@PyMember_S:
  00687	33 c0		 xor	 eax, eax
  00689	85 c0		 test	 eax, eax
  0068b	75 e2		 jne	 SHORT $LN19@PyMember_S

; 249  :         oldv = *(PyObject **)addr;

  0068d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00695	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00698	48 89 44 24 20	 mov	 QWORD PTR oldv$[rsp], rax

; 250  :         *(PyObject **)addr = v;

  0069d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  006a5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  006ad	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN15@PyMember_S:

; 251  :         Py_XDECREF(oldv);

  006b0	48 83 7c 24 20
	00		 cmp	 QWORD PTR oldv$[rsp], 0
  006b6	74 0a		 je	 SHORT $LN12@PyMember_S
  006b8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR oldv$[rsp]
  006bd	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@PyMember_S:
  006c2	33 c0		 xor	 eax, eax
  006c4	85 c0		 test	 eax, eax
  006c6	75 e8		 jne	 SHORT $LN15@PyMember_S

; 252  :         break;

  006c8	e9 50 01 00 00	 jmp	 $LN93@PyMember_S
$LN11@PyMember_S:

; 253  :     case T_CHAR: {
; 254  :         char *string;
; 255  :         Py_ssize_t len;
; 256  : 
; 257  :         string = _PyUnicode_AsStringAndSize(v, &len);

  006cd	48 8d 54 24 48	 lea	 rdx, QWORD PTR len$20558[rsp]
  006d2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  006da	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize
  006df	48 89 44 24 50	 mov	 QWORD PTR string$20557[rsp], rax

; 258  :         if (string == NULL || len != 1) {

  006e4	48 83 7c 24 50
	00		 cmp	 QWORD PTR string$20557[rsp], 0
  006ea	74 08		 je	 SHORT $LN9@PyMember_S
  006ec	48 83 7c 24 48
	01		 cmp	 QWORD PTR len$20558[rsp], 1
  006f2	74 0f		 je	 SHORT $LN10@PyMember_S
$LN9@PyMember_S:

; 259  :             PyErr_BadArgument();

  006f4	e8 00 00 00 00	 call	 PyErr_BadArgument

; 260  :             return -1;

  006f9	b8 ff ff ff ff	 mov	 eax, -1
  006fe	e9 1c 01 00 00	 jmp	 $LN101@PyMember_S
$LN10@PyMember_S:

; 261  :         }
; 262  :         *(char*)addr = string[0];

  00703	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0070b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR string$20557[rsp]
  00710	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00713	88 08		 mov	 BYTE PTR [rax], cl

; 263  :         break;

  00715	e9 03 01 00 00	 jmp	 $LN93@PyMember_S
$LN8@PyMember_S:

; 264  :         }
; 265  :     case T_STRING:
; 266  :     case T_STRING_INPLACE:
; 267  :         PyErr_SetString(PyExc_TypeError, "readonly attribute");

  0071a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@NCFELION@readonly?5attribute?$AA@
  00721	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00728	e8 00 00 00 00	 call	 PyErr_SetString

; 268  :         return -1;

  0072d	b8 ff ff ff ff	 mov	 eax, -1
  00732	e9 e8 00 00 00	 jmp	 $LN101@PyMember_S
$LN7@PyMember_S:

; 269  : #ifdef HAVE_LONG_LONG
; 270  :     case T_LONGLONG:{
; 271  :         PY_LONG_LONG value;
; 272  :         *(PY_LONG_LONG*)addr = value = PyLong_AsLongLong(v);

  00737	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0073f	e8 00 00 00 00	 call	 PyLong_AsLongLong
  00744	48 89 44 24 58	 mov	 QWORD PTR value$20565[rsp], rax
  00749	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00751	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$20565[rsp]
  00756	48 89 08	 mov	 QWORD PTR [rax], rcx

; 273  :         if ((value == -1) && PyErr_Occurred())

  00759	48 83 7c 24 58
	ff		 cmp	 QWORD PTR value$20565[rsp], -1
  0075f	75 14		 jne	 SHORT $LN6@PyMember_S
  00761	e8 00 00 00 00	 call	 PyErr_Occurred
  00766	48 85 c0	 test	 rax, rax
  00769	74 0a		 je	 SHORT $LN6@PyMember_S

; 274  :             return -1;

  0076b	b8 ff ff ff ff	 mov	 eax, -1
  00770	e9 aa 00 00 00	 jmp	 $LN101@PyMember_S
$LN6@PyMember_S:

; 275  :         break;

  00775	e9 a3 00 00 00	 jmp	 $LN93@PyMember_S
$LN5@PyMember_S:

; 276  :         }
; 277  :     case T_ULONGLONG:{
; 278  :         unsigned PY_LONG_LONG value;
; 279  :         /* ??? PyLong_AsLongLong accepts an int, but PyLong_AsUnsignedLongLong
; 280  :             doesn't ??? */
; 281  :         if (PyLong_Check(v))

  0077a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00782	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00786	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0078c	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00791	85 c0		 test	 eax, eax
  00793	74 24		 je	 SHORT $LN4@PyMember_S

; 282  :             *(unsigned PY_LONG_LONG*)addr = value = PyLong_AsUnsignedLongLong(v);

  00795	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0079d	e8 00 00 00 00	 call	 PyLong_AsUnsignedLongLong
  007a2	48 89 44 24 60	 mov	 QWORD PTR value$20569[rsp], rax
  007a7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  007af	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$20569[rsp]
  007b4	48 89 08	 mov	 QWORD PTR [rax], rcx

; 283  :         else

  007b7	eb 24		 jmp	 SHORT $LN3@PyMember_S
$LN4@PyMember_S:

; 284  :             *(unsigned PY_LONG_LONG*)addr = value = PyLong_AsLong(v);

  007b9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  007c1	e8 00 00 00 00	 call	 PyLong_AsLong
  007c6	48 98		 cdqe
  007c8	48 89 44 24 60	 mov	 QWORD PTR value$20569[rsp], rax
  007cd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  007d5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$20569[rsp]
  007da	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN3@PyMember_S:

; 285  :         if ((value == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())

  007dd	48 83 7c 24 60
	ff		 cmp	 QWORD PTR value$20569[rsp], -1
  007e3	75 11		 jne	 SHORT $LN2@PyMember_S
  007e5	e8 00 00 00 00	 call	 PyErr_Occurred
  007ea	48 85 c0	 test	 rax, rax
  007ed	74 07		 je	 SHORT $LN2@PyMember_S

; 286  :             return -1;

  007ef	b8 ff ff ff ff	 mov	 eax, -1
  007f4	eb 29		 jmp	 SHORT $LN101@PyMember_S
$LN2@PyMember_S:

; 287  :         break;

  007f6	eb 25		 jmp	 SHORT $LN93@PyMember_S
$LN1@PyMember_S:

; 288  :         }
; 289  : #endif /* HAVE_LONG_LONG */
; 290  :     default:
; 291  :         PyErr_Format(PyExc_SystemError,
; 292  :                      "bad memberdescr type for %s", l->name);

  007f8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  00800	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00803	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@CFDFPIO@bad?5memberdescr?5type?5for?5?$CFs?$AA@
  0080a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00811	e8 00 00 00 00	 call	 PyErr_Format

; 293  :         return -1;

  00816	b8 ff ff ff ff	 mov	 eax, -1
  0081b	eb 02		 jmp	 SHORT $LN101@PyMember_S
$LN93@PyMember_S:

; 294  :     }
; 295  :     return 0;

  0081d	33 c0		 xor	 eax, eax
$LN101@PyMember_S:

; 296  : }

  0081f	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00823	c3		 ret	 0
$LN103@PyMember_S:
  00824	00 00 00 00	 DD	 $LN72@PyMember_S
  00828	00 00 00 00	 DD	 $LN56@PyMember_S
  0082c	00 00 00 00	 DD	 $LN35@PyMember_S
  00830	00 00 00 00	 DD	 $LN24@PyMember_S
  00834	00 00 00 00	 DD	 $LN22@PyMember_S
  00838	00 00 00 00	 DD	 $LN8@PyMember_S
  0083c	00 00 00 00	 DD	 $LN20@PyMember_S
  00840	00 00 00 00	 DD	 $LN11@PyMember_S
  00844	00 00 00 00	 DD	 $LN88@PyMember_S
  00848	00 00 00 00	 DD	 $LN80@PyMember_S
  0084c	00 00 00 00	 DD	 $LN64@PyMember_S
  00850	00 00 00 00	 DD	 $LN48@PyMember_S
  00854	00 00 00 00	 DD	 $LN33@PyMember_S
  00858	00 00 00 00	 DD	 $LN8@PyMember_S
  0085c	00 00 00 00	 DD	 $LN92@PyMember_S
  00860	00 00 00 00	 DD	 $LN1@PyMember_S
  00864	00 00 00 00	 DD	 $LN20@PyMember_S
  00868	00 00 00 00	 DD	 $LN7@PyMember_S
  0086c	00 00 00 00	 DD	 $LN5@PyMember_S
  00870	00 00 00 00	 DD	 $LN26@PyMember_S
PyMember_SetOne ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
END
