; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@BNGKICEK@Fast?5profiler?$AA@		; `string'
PUBLIC	??_C@_07JPLDFAOG@_lsprof?$AA@			; `string'
PUBLIC	??_C@_0BB@DJIAIBIH@_lsprof?4Profiler?$AA@	; `string'
PUBLIC	??_C@_05MEHLAELG@clear?$AA@			; `string'
PUBLIC	??_C@_07DBNODEFN@disable?$AA@			; `string'
PUBLIC	??_C@_06OFNJOBDK@enable?$AA@			; `string'
PUBLIC	??_C@_08PEEMBOGE@getstats?$AA@			; `string'
PUBLIC	??_C@_08CPNLNCAG@timeunit?$AA@			; `string'
PUBLIC	??_C@_05NAPFDJNG@timer?$AA@			; `string'
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	??_C@_08DGFMKFLK@subcalls?$AA@			; `string'
PUBLIC	??_C@_0BK@CBMGBCAH@_lsprof?4profiler_subentry?$AA@ ; `string'
PUBLIC	??_C@_0BH@CHGGGMCJ@_lsprof?4profiler_entry?$AA@	; `string'
PUBLIC	??_C@_0CG@OFIFMHH@inline?5time?5?$CInot?5in?5further?5subc@ ; `string'
PUBLIC	??_C@_0BO@EKCDPEH@total?5time?5spent?5in?5this?5call?$AA@ ; `string'
PUBLIC	??_C@_0CK@JIJAPDGD@how?5many?5times?5this?5is?5called?5re@ ; `string'
PUBLIC	??_C@_0BO@BDHHCDAM@how?5many?5times?5this?5is?5called?$AA@ ; `string'
PUBLIC	??_C@_0CN@DNFNLNPK@called?5code?5object?5or?5built?9in?5f@ ; `string'
PUBLIC	??_C@_0BF@DNCNEKJK@details?5of?5the?5calls?$AA@	; `string'
PUBLIC	??_C@_05FACACNJP@calls?$AA@			; `string'
PUBLIC	??_C@_0CM@DADAJHKJ@inline?5time?5in?5this?5entry?5?$CInot?5i@ ; `string'
PUBLIC	??_C@_0L@JEHFILAL@inlinetime?$AA@		; `string'
PUBLIC	??_C@_0BJ@NAGAOMPF@total?5time?5in?5this?5entry?$AA@ ; `string'
PUBLIC	??_C@_09IBJNCBD@totaltime?$AA@			; `string'
PUBLIC	??_C@_0CC@HLFPELCJ@how?5many?5times?5called?5recursivel@ ; `string'
PUBLIC	??_C@_0N@CJIHLFHM@reccallcount?$AA@		; `string'
PUBLIC	??_C@_0BP@GMOJLEEE@how?5many?5times?5this?5was?5called?$AA@ ; `string'
PUBLIC	??_C@_09GGBGLJGG@callcount?$AA@			; `string'
PUBLIC	??_C@_0CG@GEJBGBJN@code?5object?5or?5built?9in?5function@ ; `string'
PUBLIC	??_C@_04NDFOBODE@code?$AA@			; `string'
EXTRN	_PyObject_DebugFree:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyType_GenericAlloc:PROC
_BSS	SEGMENT
moduleMethods DB 020H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0O@BNGKICEK@Fast?5profiler?$AA@
CONST	SEGMENT
??_C@_0O@BNGKICEK@Fast?5profiler?$AA@ DB 'Fast profiler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JPLDFAOG@_lsprof?$AA@
CONST	SEGMENT
??_C@_07JPLDFAOG@_lsprof?$AA@ DB '_lsprof', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DJIAIBIH@_lsprof?4Profiler?$AA@
CONST	SEGMENT
??_C@_0BB@DJIAIBIH@_lsprof?4Profiler?$AA@ DB '_lsprof.Profiler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHLAELG@clear?$AA@
CONST	SEGMENT
??_C@_05MEHLAELG@clear?$AA@ DB 'clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBNODEFN@disable?$AA@
CONST	SEGMENT
??_C@_07DBNODEFN@disable?$AA@ DB 'disable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFNJOBDK@enable?$AA@
CONST	SEGMENT
??_C@_06OFNJOBDK@enable?$AA@ DB 'enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PEEMBOGE@getstats?$AA@
CONST	SEGMENT
??_C@_08PEEMBOGE@getstats?$AA@ DB 'getstats', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPNLNCAG@timeunit?$AA@
CONST	SEGMENT
??_C@_08CPNLNCAG@timeunit?$AA@ DB 'timeunit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAPFDJNG@timer?$AA@
CONST	SEGMENT
??_C@_05NAPFDJNG@timer?$AA@ DB 'timer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DGFMKFLK@subcalls?$AA@
CONST	SEGMENT
??_C@_08DGFMKFLK@subcalls?$AA@ DB 'subcalls', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CBMGBCAH@_lsprof?4profiler_subentry?$AA@
CONST	SEGMENT
??_C@_0BK@CBMGBCAH@_lsprof?4profiler_subentry?$AA@ DB '_lsprof.profiler_s'
	DB	'ubentry', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CHGGGMCJ@_lsprof?4profiler_entry?$AA@
CONST	SEGMENT
??_C@_0BH@CHGGGMCJ@_lsprof?4profiler_entry?$AA@ DB '_lsprof.profiler_entr'
	DB	'y', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OFIFMHH@inline?5time?5?$CInot?5in?5further?5subc@
CONST	SEGMENT
??_C@_0CG@OFIFMHH@inline?5time?5?$CInot?5in?5further?5subc@ DB 'inline ti'
	DB	'me (not in further subcalls)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EKCDPEH@total?5time?5spent?5in?5this?5call?$AA@
CONST	SEGMENT
??_C@_0BO@EKCDPEH@total?5time?5spent?5in?5this?5call?$AA@ DB 'total time '
	DB	'spent in this call', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JIJAPDGD@how?5many?5times?5this?5is?5called?5re@
CONST	SEGMENT
??_C@_0CK@JIJAPDGD@how?5many?5times?5this?5is?5called?5re@ DB 'how many t'
	DB	'imes this is called recursively', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BDHHCDAM@how?5many?5times?5this?5is?5called?$AA@
CONST	SEGMENT
??_C@_0BO@BDHHCDAM@how?5many?5times?5this?5is?5called?$AA@ DB 'how many t'
	DB	'imes this is called', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DNFNLNPK@called?5code?5object?5or?5built?9in?5f@
CONST	SEGMENT
??_C@_0CN@DNFNLNPK@called?5code?5object?5or?5built?9in?5f@ DB 'called cod'
	DB	'e object or built-in function name', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
profiler_entry_fields DQ FLAT:??_C@_04NDFOBODE@code?$AA@
	DQ	FLAT:??_C@_0CG@GEJBGBJN@code?5object?5or?5built?9in?5function@
	DQ	FLAT:??_C@_09GGBGLJGG@callcount?$AA@
	DQ	FLAT:??_C@_0BP@GMOJLEEE@how?5many?5times?5this?5was?5called?$AA@
	DQ	FLAT:??_C@_0N@CJIHLFHM@reccallcount?$AA@
	DQ	FLAT:??_C@_0CC@HLFPELCJ@how?5many?5times?5called?5recursivel@
	DQ	FLAT:??_C@_09IBJNCBD@totaltime?$AA@
	DQ	FLAT:??_C@_0BJ@NAGAOMPF@total?5time?5in?5this?5entry?$AA@
	DQ	FLAT:??_C@_0L@JEHFILAL@inlinetime?$AA@
	DQ	FLAT:??_C@_0CM@DADAJHKJ@inline?5time?5in?5this?5entry?5?$CInot?5i@
	DQ	FLAT:??_C@_05FACACNJP@calls?$AA@
	DQ	FLAT:??_C@_0BF@DNCNEKJK@details?5of?5the?5calls?$AA@
	DQ	0000000000000000H
	ORG $+8
profiler_subentry_fields DQ FLAT:??_C@_04NDFOBODE@code?$AA@
	DQ	FLAT:??_C@_0CN@DNFNLNPK@called?5code?5object?5or?5built?9in?5f@
	DQ	FLAT:??_C@_09GGBGLJGG@callcount?$AA@
	DQ	FLAT:??_C@_0BO@BDHHCDAM@how?5many?5times?5this?5is?5called?$AA@
	DQ	FLAT:??_C@_0N@CJIHLFHM@reccallcount?$AA@
	DQ	FLAT:??_C@_0CK@JIJAPDGD@how?5many?5times?5this?5is?5called?5re@
	DQ	FLAT:??_C@_09IBJNCBD@totaltime?$AA@
	DQ	FLAT:??_C@_0BO@EKCDPEH@total?5time?5spent?5in?5this?5call?$AA@
	DQ	FLAT:??_C@_0L@JEHFILAL@inlinetime?$AA@
	DQ	FLAT:??_C@_0CG@OFIFMHH@inline?5time?5?$CInot?5in?5further?5subc@
	DQ	0000000000000000H
	ORG $+8
profiler_entry_desc DQ FLAT:??_C@_0BH@CHGGGMCJ@_lsprof?4profiler_entry?$AA@
	DQ	0000000000000000H
	DQ	FLAT:profiler_entry_fields
	DD	06H
	ORG $+4
profiler_subentry_desc DQ FLAT:??_C@_0BK@CBMGBCAH@_lsprof?4profiler_subentry?$AA@
	DQ	0000000000000000H
	DQ	FLAT:profiler_subentry_fields
	DD	05H
	ORG $+4
getstats_doc DB	'getstats() -> list of profiler_entry objects', 0aH, 0aH, 'R'
	DB	'eturn all information collected by the profiler.', 0aH, 'Each'
	DB	' profiler_entry is a tuple-like object with the', 0aH, 'follo'
	DB	'wing attributes:', 0aH, 0aH, '    code          code object', 0aH
	DB	'    callcount     how many times this was called', 0aH, '    '
	DB	'reccallcount  how many times called recursively', 0aH, '    t'
	DB	'otaltime     total time in this entry', 0aH, '    inlinetime '
	DB	'   inline time in this entry (not in subcalls)', 0aH, '    ca'
	DB	'lls         details of the calls', 0aH, 0aH, 'The calls attri'
	DB	'bute is either None or a list of', 0aH, 'profiler_subentry ob'
	DB	'jects:', 0aH, 0aH, '    code          called code object', 0aH
	DB	'    callcount     how many times this is called', 0aH, '    r'
	DB	'eccallcount  how many times this is called recursively', 0aH, ' '
	DB	'   totaltime     total time spent in this call', 0aH, '    in'
	DB	'linetime    inline time (not in further subcalls)', 0aH, 00H
	ORG $+11
enable_doc DB	'enable(subcalls=True, builtins=True)', 0aH, 0aH, 'Start '
	DB	'collecting profiling information.', 0aH, 'If ''subcalls'' is '
	DB	'True, also records for each function', 0aH, 'statistics separ'
	DB	'ated according to its current caller.', 0aH, 'If ''builtins'''
	DB	' is True, records the time spent in', 0aH, 'built-in function'
	DB	's separately from their caller.', 0aH, 00H
	ORG $+3
?kwlist@?1??profiler_enable@@9@9 DQ FLAT:??_C@_08DGFMKFLK@subcalls?$AA@ ; `profiler_enable'::`2'::kwlist
	DQ	FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
	DQ	0000000000000000H
disable_doc DB	'disable()', 0aH, 0aH, 'Stop collecting profiling informa'
	DB	'tion.', 0aH, 00H
	ORG $+5
clear_doc DB	'clear()', 0aH, 0aH, 'Clear all profiling information col'
	DB	'lected so far.', 0aH, 00H
	ORG $+4
?kwlist@?1??profiler_init@@9@9 DQ FLAT:??_C@_05NAPFDJNG@timer?$AA@ ; `profiler_init'::`2'::kwlist
	DQ	FLAT:??_C@_08CPNLNCAG@timeunit?$AA@
	DQ	FLAT:??_C@_08DGFMKFLK@subcalls?$AA@
	DQ	FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
	DQ	0000000000000000H
	ORG $+8
profiler_methods DQ FLAT:??_C@_08PEEMBOGE@getstats?$AA@
	DQ	FLAT:profiler_getstats
	DD	04H
	ORG $+4
	DQ	FLAT:getstats_doc
	DQ	FLAT:??_C@_06OFNJOBDK@enable?$AA@
	DQ	FLAT:profiler_enable
	DD	03H
	ORG $+4
	DQ	FLAT:enable_doc
	DQ	FLAT:??_C@_07DBNODEFN@disable?$AA@
	DQ	FLAT:profiler_disable
	DD	04H
	ORG $+4
	DQ	FLAT:disable_doc
	DQ	FLAT:??_C@_05MEHLAELG@clear?$AA@
	DQ	FLAT:profiler_clear
	DD	04H
	ORG $+4
	DQ	FLAT:clear_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
profiler_doc DB	'Profiler(custom_timer=None, time_unit=None, subcalls=Tru'
	DB	'e, builtins=True)', 0aH, 0aH, '    Builds a profiler object u'
	DB	'sing the specified timer function.', 0aH, '    The default ti'
	DB	'mer is a fast built-in one based on real time.', 0aH, '    Fo'
	DB	'r custom timer functions returning integers, time_unit can', 0aH
	DB	'    be a float specifying a scale (i.e. how long each integer'
	DB	' unit', 0aH, '    is, in seconds).', 0aH, 00H
	ORG $+9
PyProfiler_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BB@DJIAIBIH@_lsprof?4Profiler?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:profiler_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	FLAT:profiler_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:profiler_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:profiler_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:_PyObject_DebugFree
	ORG $+64
_lsprofmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07JPLDFAOG@_lsprof?$AA@
	DQ	FLAT:??_C@_0O@BNGKICEK@Fast?5profiler?$AA@
	DQ	ffffffffffffffffH
	DQ	FLAT:moduleMethods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_0BF@DNCNEKJK@details?5of?5the?5calls?$AA@
CONST	SEGMENT
??_C@_0BF@DNCNEKJK@details?5of?5the?5calls?$AA@ DB 'details of the calls', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FACACNJP@calls?$AA@
CONST	SEGMENT
??_C@_05FACACNJP@calls?$AA@ DB 'calls', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DADAJHKJ@inline?5time?5in?5this?5entry?5?$CInot?5i@
CONST	SEGMENT
??_C@_0CM@DADAJHKJ@inline?5time?5in?5this?5entry?5?$CInot?5i@ DB 'inline '
	DB	'time in this entry (not in subcalls)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JEHFILAL@inlinetime?$AA@
CONST	SEGMENT
??_C@_0L@JEHFILAL@inlinetime?$AA@ DB 'inlinetime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NAGAOMPF@total?5time?5in?5this?5entry?$AA@
CONST	SEGMENT
??_C@_0BJ@NAGAOMPF@total?5time?5in?5this?5entry?$AA@ DB 'total time in th'
	DB	'is entry', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09IBJNCBD@totaltime?$AA@
CONST	SEGMENT
??_C@_09IBJNCBD@totaltime?$AA@ DB 'totaltime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HLFPELCJ@how?5many?5times?5called?5recursivel@
CONST	SEGMENT
??_C@_0CC@HLFPELCJ@how?5many?5times?5called?5recursivel@ DB 'how many tim'
	DB	'es called recursively', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CJIHLFHM@reccallcount?$AA@
CONST	SEGMENT
??_C@_0N@CJIHLFHM@reccallcount?$AA@ DB 'reccallcount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GMOJLEEE@how?5many?5times?5this?5was?5called?$AA@
CONST	SEGMENT
??_C@_0BP@GMOJLEEE@how?5many?5times?5this?5was?5called?$AA@ DB 'how many '
	DB	'times this was called', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGBGLJGG@callcount?$AA@
CONST	SEGMENT
??_C@_09GGBGLJGG@callcount?$AA@ DB 'callcount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GEJBGBJN@code?5object?5or?5built?9in?5function@
CONST	SEGMENT
??_C@_0CG@GEJBGBJN@code?5object?5or?5built?9in?5function@ DB 'code object'
	DB	' or built-in function name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDFOBODE@code?$AA@
CONST	SEGMENT
??_C@_04NDFOBODE@code?$AA@ DB 'code', 00H		; `string'
CONST	ENDS
PUBLIC	_Py_DecRef
PUBLIC	__real@3df0000000000000
PUBLIC	__real@0000000000000000
EXTRN	RotatingTree_Enum:PROC
EXTRN	PyList_New:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_lsprof.c
pdata	SEGMENT
$pdata$profiler_getstats DD imagerel profiler_getstats
	DD	imagerel profiler_getstats+199
	DD	imagerel $unwind$profiler_getstats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_getstats DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT __real@3df0000000000000
CONST	SEGMENT
__real@3df0000000000000 DQ 03df0000000000000r	; 2.32831e-010
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT profiler_getstats
_TEXT	SEGMENT
collect$ = 32
pObj$ = 80
noarg$ = 88
profiler_getstats PROC					; COMDAT

; 631  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 632  :     statscollector_t collect;
; 633  :     if (pending_exception(pObj))

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pObj$[rsp]
  00013	e8 00 00 00 00	 call	 pending_exception
  00018	85 c0		 test	 eax, eax
  0001a	74 07		 je	 SHORT $LN7@profiler_g

; 634  :         return NULL;

  0001c	33 c0		 xor	 eax, eax
  0001e	e9 9f 00 00 00	 jmp	 $LN8@profiler_g
$LN7@profiler_g:

; 635  :     if (!pObj->externalTimer)

  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR pObj$[rsp]
  00028	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00030	75 0d		 jne	 SHORT $LN6@profiler_g

; 636  :         collect.factor = hpTimerUnit();

  00032	e8 00 00 00 00	 call	 hpTimerUnit
  00037	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR collect$[rsp+16], xmm0
  0003d	eb 3a		 jmp	 SHORT $LN5@profiler_g
$LN6@profiler_g:

; 637  :     else if (pObj->externalTimerUnit > 0.0)

  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR pObj$[rsp]
  00044	f2 0f 10 80 88
	00 00 00	 movsdx	 xmm0, QWORD PTR [rax+136]
  0004c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00054	76 15		 jbe	 SHORT $LN4@profiler_g

; 638  :         collect.factor = pObj->externalTimerUnit;

  00056	48 8b 44 24 50	 mov	 rax, QWORD PTR pObj$[rsp]
  0005b	f2 0f 10 80 88
	00 00 00	 movsdx	 xmm0, QWORD PTR [rax+136]
  00063	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR collect$[rsp+16], xmm0

; 639  :     else

  00069	eb 0e		 jmp	 SHORT $LN3@profiler_g
$LN4@profiler_g:

; 640  :         collect.factor = 1.0 / DOUBLE_TIMER_PRECISION;

  0006b	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3df0000000000000
  00073	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR collect$[rsp+16], xmm0
$LN3@profiler_g:
$LN5@profiler_g:

; 641  :     collect.list = PyList_New(0);

  00079	33 c9		 xor	 ecx, ecx
  0007b	e8 00 00 00 00	 call	 PyList_New
  00080	48 89 44 24 20	 mov	 QWORD PTR collect$[rsp], rax

; 642  :     if (collect.list == NULL)

  00085	48 83 7c 24 20
	00		 cmp	 QWORD PTR collect$[rsp], 0
  0008b	75 04		 jne	 SHORT $LN2@profiler_g

; 643  :         return NULL;

  0008d	33 c0		 xor	 eax, eax
  0008f	eb 31		 jmp	 SHORT $LN8@profiler_g
$LN2@profiler_g:

; 644  :     if (RotatingTree_Enum(pObj->profilerEntries, statsForEntry, &collect)
; 645  :         != 0) {

  00091	4c 8d 44 24 20	 lea	 r8, QWORD PTR collect$[rsp]
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:statsForEntry
  0009d	48 8b 44 24 50	 mov	 rax, QWORD PTR pObj$[rsp]
  000a2	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000a6	e8 00 00 00 00	 call	 RotatingTree_Enum
  000ab	85 c0		 test	 eax, eax
  000ad	74 0e		 je	 SHORT $LN1@profiler_g

; 646  :         Py_DECREF(collect.list);

  000af	48 8b 4c 24 20	 mov	 rcx, QWORD PTR collect$[rsp]
  000b4	e8 00 00 00 00	 call	 _Py_DecRef

; 647  :         return NULL;

  000b9	33 c0		 xor	 eax, eax
  000bb	eb 05		 jmp	 SHORT $LN8@profiler_g
$LN1@profiler_g:

; 648  :     }
; 649  :     return collect.list;

  000bd	48 8b 44 24 20	 mov	 rax, QWORD PTR collect$[rsp]
$LN8@profiler_g:

; 650  : }

  000c2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c6	c3		 ret	 0
profiler_getstats ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	__real@3eb0c6f7a0b5ed8d
PUBLIC	__real@3ff0000000000000
EXTRN	__imp_QueryPerformanceFrequency:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_lsprof.c
pdata	SEGMENT
$pdata$hpTimerUnit DD imagerel hpTimerUnit
	DD	imagerel hpTimerUnit+63
	DD	imagerel $unwind$hpTimerUnit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$hpTimerUnit DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-006
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT hpTimerUnit
_TEXT	SEGMENT
li$ = 32
hpTimerUnit PROC					; COMDAT

; 25   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 26   :     LARGE_INTEGER li;
; 27   :     if (QueryPerformanceFrequency(&li))

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR li$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency
  0000f	85 c0		 test	 eax, eax
  00011	74 1f		 je	 SHORT $LN2@hpTimerUni

; 28   :         return 1.0 / li.QuadPart;

  00013	66 0f ef c0	 pxor	 xmm0, xmm0
  00017	f2 48 0f 2a 44
	24 20		 cvtsi2sd xmm0, QWORD PTR li$[rsp]
  0001e	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ff0000000000000
  00026	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002a	66 0f 28 c1	 movapd	 xmm0, xmm1
  0002e	eb 0a		 jmp	 SHORT $LN3@hpTimerUni

; 29   :     else

  00030	eb 08		 jmp	 SHORT $LN1@hpTimerUni
$LN2@hpTimerUni:

; 30   :         return 0.000001;  /* unlikely */

  00032	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
$LN1@hpTimerUni:
$LN3@hpTimerUni:

; 31   : }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
hpTimerUnit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@KIPDEFDA@memory?5was?5exhausted?5while?5profi@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_MemoryError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$pending_exception DD imagerel pending_exception
	DD	imagerel pending_exception+80
	DD	imagerel $unwind$pending_exception
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pending_exception DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CF@KIPDEFDA@memory?5was?5exhausted?5while?5profi@
CONST	SEGMENT
??_C@_0CF@KIPDEFDA@memory?5was?5exhausted?5while?5profi@ DB 'memory was e'
	DB	'xhausted while profiling', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT pending_exception
_TEXT	SEGMENT
pObj$ = 48
pending_exception PROC					; COMDAT

; 488  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 489  :     if (pObj->flags & POF_NOMEMORY) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR pObj$[rsp]
  0000e	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00011	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00016	85 c0		 test	 eax, eax
  00018	74 2f		 je	 SHORT $LN1@pending_ex

; 490  :         pObj->flags -= POF_NOMEMORY;

  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR pObj$[rsp]
  0001f	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00022	2d 00 01 00 00	 sub	 eax, 256		; 00000100H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pObj$[rsp]
  0002c	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 491  :         PyErr_SetString(PyExc_MemoryError,
; 492  :                         "memory was exhausted while profiling");

  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@KIPDEFDA@memory?5was?5exhausted?5while?5profi@
  00036	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  0003d	e8 00 00 00 00	 call	 PyErr_SetString

; 493  :         return -1;

  00042	b8 ff ff ff ff	 mov	 eax, -1
  00047	eb 02		 jmp	 SHORT $LN2@pending_ex
$LN1@pending_ex:

; 494  :     }
; 495  :     return 0;

  00049	33 c0		 xor	 eax, eax
$LN2@pending_ex:

; 496  : }

  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	c3		 ret	 0
pending_exception ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@HBKOAKDI@?$CI?$CIOllddO?$CJ?$CJ?$AA@	; `string'
PUBLIC	_Py_IncRef
EXTRN	PyList_Append:PROC
EXTRN	PyObject_CallFunction:PROC
EXTRN	_Py_NoneStruct:BYTE
_BSS	SEGMENT
StatsEntryType DB 01e0H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$statsForEntry DD imagerel statsForEntry
	DD	imagerel statsForEntry+402
	DD	imagerel $unwind$statsForEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$statsForEntry DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0L@HBKOAKDI@?$CI?$CIOllddO?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@HBKOAKDI@?$CI?$CIOllddO?$CJ?$CJ?$AA@ DB '((OllddO))', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT statsForEntry
_TEXT	SEGMENT
err$ = 64
info$ = 72
entry$ = 80
collect$ = 88
node$ = 112
arg$ = 120
statsForEntry PROC					; COMDAT

; 566  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 567  :     ProfilerEntry *entry = (ProfilerEntry*) node;

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR node$[rsp]
  00013	48 89 44 24 50	 mov	 QWORD PTR entry$[rsp], rax

; 568  :     statscollector_t *collect = (statscollector_t*) arg;

  00018	48 8b 44 24 78	 mov	 rax, QWORD PTR arg$[rsp]
  0001d	48 89 44 24 58	 mov	 QWORD PTR collect$[rsp], rax

; 569  :     PyObject *info;
; 570  :     int err;
; 571  :     if (entry->callcount == 0)

  00022	48 8b 44 24 50	 mov	 rax, QWORD PTR entry$[rsp]
  00027	83 78 30 00	 cmp	 DWORD PTR [rax+48], 0
  0002b	75 07		 jne	 SHORT $LN6@statsForEn

; 572  :         return 0;   /* skip */

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 59 01 00 00	 jmp	 $LN7@statsForEn
$LN6@statsForEn:

; 573  : 
; 574  :     if (entry->calls != EMPTY_ROTATING_TREE) {

  00034	48 8b 44 24 50	 mov	 rax, QWORD PTR entry$[rsp]
  00039	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  0003e	74 5e		 je	 SHORT $LN5@statsForEn

; 575  :         collect->sublist = PyList_New(0);

  00040	33 c9		 xor	 ecx, ecx
  00042	e8 00 00 00 00	 call	 PyList_New
  00047	48 8b 4c 24 58	 mov	 rcx, QWORD PTR collect$[rsp]
  0004c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 576  :         if (collect->sublist == NULL)

  00050	48 8b 44 24 58	 mov	 rax, QWORD PTR collect$[rsp]
  00055	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0005a	75 0a		 jne	 SHORT $LN4@statsForEn

; 577  :             return -1;

  0005c	b8 ff ff ff ff	 mov	 eax, -1
  00061	e9 27 01 00 00	 jmp	 $LN7@statsForEn
$LN4@statsForEn:

; 578  :         if (RotatingTree_Enum(entry->calls,
; 579  :                               statsForSubEntry, collect) != 0) {

  00066	4c 8b 44 24 58	 mov	 r8, QWORD PTR collect$[rsp]
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:statsForSubEntry
  00072	48 8b 44 24 50	 mov	 rax, QWORD PTR entry$[rsp]
  00077	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  0007b	e8 00 00 00 00	 call	 RotatingTree_Enum
  00080	85 c0		 test	 eax, eax
  00082	74 18		 je	 SHORT $LN3@statsForEn

; 580  :             Py_DECREF(collect->sublist);

  00084	48 8b 44 24 58	 mov	 rax, QWORD PTR collect$[rsp]
  00089	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0008d	e8 00 00 00 00	 call	 _Py_DecRef

; 581  :             return -1;

  00092	b8 ff ff ff ff	 mov	 eax, -1
  00097	e9 f1 00 00 00	 jmp	 $LN7@statsForEn
$LN3@statsForEn:

; 582  :         }
; 583  :     }
; 584  :     else {

  0009c	eb 1c		 jmp	 SHORT $LN2@statsForEn
$LN5@statsForEn:

; 585  :         Py_INCREF(Py_None);

  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000a5	e8 00 00 00 00	 call	 _Py_IncRef

; 586  :         collect->sublist = Py_None;

  000aa	48 8b 44 24 58	 mov	 rax, QWORD PTR collect$[rsp]
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000b6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
$LN2@statsForEn:

; 587  :     }
; 588  : 
; 589  :     info = PyObject_CallFunction((PyObject*) &StatsEntryType,
; 590  :                                  "((OllddO))",
; 591  :                                  entry->userObj,
; 592  :                                  entry->callcount,
; 593  :                                  entry->recursivecallcount,
; 594  :                                  collect->factor * entry->tt,
; 595  :                                  collect->factor * entry->it,
; 596  :                                  collect->sublist);

  000ba	48 8b 44 24 50	 mov	 rax, QWORD PTR entry$[rsp]
  000bf	66 0f ef c0	 pxor	 xmm0, xmm0
  000c3	f2 48 0f 2a 40
	28		 cvtsi2sd xmm0, QWORD PTR [rax+40]
  000c9	48 8b 44 24 58	 mov	 rax, QWORD PTR collect$[rsp]
  000ce	f2 0f 10 48 10	 movsdx	 xmm1, QWORD PTR [rax+16]
  000d3	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000d7	66 0f 28 c1	 movapd	 xmm0, xmm1
  000db	48 8b 44 24 50	 mov	 rax, QWORD PTR entry$[rsp]
  000e0	66 0f ef c9	 pxor	 xmm1, xmm1
  000e4	f2 48 0f 2a 48
	20		 cvtsi2sd xmm1, QWORD PTR [rax+32]
  000ea	48 8b 44 24 58	 mov	 rax, QWORD PTR collect$[rsp]
  000ef	f2 0f 10 50 10	 movsdx	 xmm2, QWORD PTR [rax+16]
  000f4	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  000f8	66 0f 28 ca	 movapd	 xmm1, xmm2
  000fc	48 8b 44 24 58	 mov	 rax, QWORD PTR collect$[rsp]
  00101	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00105	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0010a	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR [rsp+48], xmm0
  00110	f2 0f 11 4c 24
	28		 movsdx	 QWORD PTR [rsp+40], xmm1
  00116	48 8b 44 24 50	 mov	 rax, QWORD PTR entry$[rsp]
  0011b	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  0011e	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00122	48 8b 44 24 50	 mov	 rax, QWORD PTR entry$[rsp]
  00127	44 8b 48 30	 mov	 r9d, DWORD PTR [rax+48]
  0012b	48 8b 44 24 50	 mov	 rax, QWORD PTR entry$[rsp]
  00130	4c 8b 40 18	 mov	 r8, QWORD PTR [rax+24]
  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HBKOAKDI@?$CI?$CIOllddO?$CJ?$CJ?$AA@
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StatsEntryType
  00142	e8 00 00 00 00	 call	 PyObject_CallFunction
  00147	48 89 44 24 48	 mov	 QWORD PTR info$[rsp], rax

; 597  :     Py_DECREF(collect->sublist);

  0014c	48 8b 44 24 58	 mov	 rax, QWORD PTR collect$[rsp]
  00151	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00155	e8 00 00 00 00	 call	 _Py_DecRef

; 598  :     if (info == NULL)

  0015a	48 83 7c 24 48
	00		 cmp	 QWORD PTR info$[rsp], 0
  00160	75 07		 jne	 SHORT $LN1@statsForEn

; 599  :         return -1;

  00162	b8 ff ff ff ff	 mov	 eax, -1
  00167	eb 24		 jmp	 SHORT $LN7@statsForEn
$LN1@statsForEn:

; 600  :     err = PyList_Append(collect->list, info);

  00169	48 8b 54 24 48	 mov	 rdx, QWORD PTR info$[rsp]
  0016e	48 8b 44 24 58	 mov	 rax, QWORD PTR collect$[rsp]
  00173	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00176	e8 00 00 00 00	 call	 PyList_Append
  0017b	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax

; 601  :     Py_DECREF(info);

  0017f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR info$[rsp]
  00184	e8 00 00 00 00	 call	 _Py_DecRef

; 602  :     return err;

  00189	8b 44 24 40	 mov	 eax, DWORD PTR err$[rsp]
$LN7@statsForEn:

; 603  : }

  0018d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00191	c3		 ret	 0
statsForEntry ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_09BBGHJOLK@?$CI?$CIOlldd?$CJ?$CJ?$AA@	; `string'
_BSS	SEGMENT
StatsSubEntryType DB 01e0H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\_lsprof.c
pdata	SEGMENT
$pdata$statsForSubEntry DD imagerel statsForSubEntry
	DD	imagerel statsForSubEntry+242
	DD	imagerel $unwind$statsForSubEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$statsForSubEntry DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_09BBGHJOLK@?$CI?$CIOlldd?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_09BBGHJOLK@?$CI?$CIOlldd?$CJ?$CJ?$AA@ DB '((Olldd))', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT statsForSubEntry
_TEXT	SEGMENT
sentry$ = 64
sinfo$ = 72
err$ = 80
entry$ = 88
collect$ = 96
node$ = 128
arg$ = 136
statsForSubEntry PROC					; COMDAT

; 545  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 546  :     ProfilerSubEntry *sentry = (ProfilerSubEntry*) node;

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR node$[rsp]
  00016	48 89 44 24 40	 mov	 QWORD PTR sentry$[rsp], rax

; 547  :     statscollector_t *collect = (statscollector_t*) arg;

  0001b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR arg$[rsp]
  00023	48 89 44 24 60	 mov	 QWORD PTR collect$[rsp], rax

; 548  :     ProfilerEntry *entry = (ProfilerEntry*) sentry->header.key;

  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR sentry$[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	48 89 44 24 58	 mov	 QWORD PTR entry$[rsp], rax

; 549  :     int err;
; 550  :     PyObject *sinfo;
; 551  :     sinfo = PyObject_CallFunction((PyObject*) &StatsSubEntryType,
; 552  :                                   "((Olldd))",
; 553  :                                   entry->userObj,
; 554  :                                   sentry->callcount,
; 555  :                                   sentry->recursivecallcount,
; 556  :                                   collect->factor * sentry->tt,
; 557  :                                   collect->factor * sentry->it);

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR sentry$[rsp]
  0003a	66 0f ef c0	 pxor	 xmm0, xmm0
  0003e	f2 48 0f 2a 40
	20		 cvtsi2sd xmm0, QWORD PTR [rax+32]
  00044	48 8b 44 24 60	 mov	 rax, QWORD PTR collect$[rsp]
  00049	f2 0f 10 48 10	 movsdx	 xmm1, QWORD PTR [rax+16]
  0004e	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00052	66 0f 28 c1	 movapd	 xmm0, xmm1
  00056	48 8b 44 24 40	 mov	 rax, QWORD PTR sentry$[rsp]
  0005b	66 0f ef c9	 pxor	 xmm1, xmm1
  0005f	f2 48 0f 2a 48
	18		 cvtsi2sd xmm1, QWORD PTR [rax+24]
  00065	48 8b 44 24 60	 mov	 rax, QWORD PTR collect$[rsp]
  0006a	f2 0f 10 50 10	 movsdx	 xmm2, QWORD PTR [rax+16]
  0006f	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  00073	66 0f 28 ca	 movapd	 xmm1, xmm2
  00077	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR [rsp+48], xmm0
  0007d	f2 0f 11 4c 24
	28		 movsdx	 QWORD PTR [rsp+40], xmm1
  00083	48 8b 44 24 40	 mov	 rax, QWORD PTR sentry$[rsp]
  00088	8b 40 2c	 mov	 eax, DWORD PTR [rax+44]
  0008b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0008f	48 8b 44 24 40	 mov	 rax, QWORD PTR sentry$[rsp]
  00094	44 8b 48 28	 mov	 r9d, DWORD PTR [rax+40]
  00098	48 8b 44 24 58	 mov	 rax, QWORD PTR entry$[rsp]
  0009d	4c 8b 40 18	 mov	 r8, QWORD PTR [rax+24]
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09BBGHJOLK@?$CI?$CIOlldd?$CJ?$CJ?$AA@
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StatsSubEntryType
  000af	e8 00 00 00 00	 call	 PyObject_CallFunction
  000b4	48 89 44 24 48	 mov	 QWORD PTR sinfo$[rsp], rax

; 558  :     if (sinfo == NULL)

  000b9	48 83 7c 24 48
	00		 cmp	 QWORD PTR sinfo$[rsp], 0
  000bf	75 07		 jne	 SHORT $LN1@statsForSu

; 559  :         return -1;

  000c1	b8 ff ff ff ff	 mov	 eax, -1
  000c6	eb 25		 jmp	 SHORT $LN2@statsForSu
$LN1@statsForSu:

; 560  :     err = PyList_Append(collect->sublist, sinfo);

  000c8	48 8b 54 24 48	 mov	 rdx, QWORD PTR sinfo$[rsp]
  000cd	48 8b 44 24 60	 mov	 rax, QWORD PTR collect$[rsp]
  000d2	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000d6	e8 00 00 00 00	 call	 PyList_Append
  000db	89 44 24 50	 mov	 DWORD PTR err$[rsp], eax

; 561  :     Py_DECREF(sinfo);

  000df	48 8b 4c 24 48	 mov	 rcx, QWORD PTR sinfo$[rsp]
  000e4	e8 00 00 00 00	 call	 _Py_DecRef

; 562  :     return err;

  000e9	8b 44 24 50	 mov	 eax, DWORD PTR err$[rsp]
$LN2@statsForSu:

; 563  : }

  000ed	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000f1	c3		 ret	 0
statsForSubEntry ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@CODFBIGM@?$HMii?3enable?$AA@		; `string'
EXTRN	PyEval_SetProfile:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$profiler_enable DD imagerel profiler_enable
	DD	imagerel profiler_enable+192
	DD	imagerel $unwind$profiler_enable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_enable DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0L@CODFBIGM@?$HMii?3enable?$AA@
CONST	SEGMENT
??_C@_0L@CODFBIGM@?$HMii?3enable?$AA@ DB '|ii:enable', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT profiler_enable
_TEXT	SEGMENT
subcalls$ = 48
builtins$ = 52
self$ = 80
args$ = 88
kwds$ = 96
profiler_enable PROC					; COMDAT

; 685  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 686  :     int subcalls = -1;

  00013	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR subcalls$[rsp], -1

; 687  :     int builtins = -1;

  0001b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR builtins$[rsp], -1

; 688  :     static char *kwlist[] = {"subcalls", "builtins", 0};
; 689  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|ii:enable",
; 690  :                                      kwlist, &subcalls, &builtins))

  00023	48 8d 44 24 34	 lea	 rax, QWORD PTR builtins$[rsp]
  00028	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002d	48 8d 44 24 30	 lea	 rax, QWORD PTR subcalls$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00037	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??profiler_enable@@9@9
  0003e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@CODFBIGM@?$HMii?3enable?$AA@
  00045	48 8b 54 24 60	 mov	 rdx, QWORD PTR kwds$[rsp]
  0004a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0004f	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00054	85 c0		 test	 eax, eax
  00056	75 04		 jne	 SHORT $LN3@profiler_e

; 691  :         return NULL;

  00058	33 c0		 xor	 eax, eax
  0005a	eb 5f		 jmp	 SHORT $LN4@profiler_e
$LN3@profiler_e:

; 692  :     if (setSubcalls(self, subcalls) < 0 || setBuiltins(self, builtins) < 0)

  0005c	8b 54 24 30	 mov	 edx, DWORD PTR subcalls$[rsp]
  00060	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00065	e8 00 00 00 00	 call	 setSubcalls
  0006a	85 c0		 test	 eax, eax
  0006c	7c 12		 jl	 SHORT $LN1@profiler_e
  0006e	8b 54 24 34	 mov	 edx, DWORD PTR builtins$[rsp]
  00072	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00077	e8 00 00 00 00	 call	 setBuiltins
  0007c	85 c0		 test	 eax, eax
  0007e	7d 04		 jge	 SHORT $LN2@profiler_e
$LN1@profiler_e:

; 693  :         return NULL;

  00080	33 c0		 xor	 eax, eax
  00082	eb 37		 jmp	 SHORT $LN4@profiler_e
$LN2@profiler_e:

; 694  :     PyEval_SetProfile(profiler_callback, (PyObject*)self);

  00084	48 8b 54 24 50	 mov	 rdx, QWORD PTR self$[rsp]
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:profiler_callback
  00090	e8 00 00 00 00	 call	 PyEval_SetProfile

; 695  :     self->flags |= POF_ENABLED;

  00095	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0009a	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  0009d	83 c8 01	 or	 eax, 1
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000a5	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 696  :     Py_INCREF(Py_None);

  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000af	e8 00 00 00 00	 call	 _Py_IncRef

; 697  :     return Py_None;

  000b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@profiler_e:

; 698  : }

  000bb	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000bf	c3		 ret	 0
profiler_enable ENDP
_TEXT	ENDS
EXTRN	PyCFunction_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$profiler_callback DD imagerel profiler_callback
	DD	imagerel profiler_callback+248
	DD	imagerel $unwind$profiler_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_callback DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT profiler_callback
_TEXT	SEGMENT
tv64 = 32
self$ = 64
frame$ = 72
what$ = 80
arg$ = 88
profiler_callback PROC					; COMDAT

; 438  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 439  :     switch (what) {

  00018	8b 44 24 50	 mov	 eax, DWORD PTR what$[rsp]
  0001c	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00020	83 7c 24 20 00	 cmp	 DWORD PTR tv64[rsp], 0
  00025	74 25		 je	 SHORT $LN7@profiler_c
  00027	83 7c 24 20 03	 cmp	 DWORD PTR tv64[rsp], 3
  0002c	74 3f		 je	 SHORT $LN6@profiler_c
  0002e	83 7c 24 20 04	 cmp	 DWORD PTR tv64[rsp], 4
  00033	74 4d		 je	 SHORT $LN5@profiler_c
  00035	83 7c 24 20 04	 cmp	 DWORD PTR tv64[rsp], 4
  0003a	0f 8e b1 00 00
	00		 jle	 $LN1@profiler_c
  00040	83 7c 24 20 06	 cmp	 DWORD PTR tv64[rsp], 6
  00045	7e 76		 jle	 SHORT $LN3@profiler_c
  00047	e9 a5 00 00 00	 jmp	 $LN1@profiler_c
$LN7@profiler_c:

; 440  : 
; 441  :     /* the 'frame' of a called function is about to start its execution */
; 442  :     case PyTrace_CALL:
; 443  :         ptrace_enter_call(self, (void *)frame->f_code,
; 444  :                                 (PyObject *)frame->f_code);

  0004c	48 8b 44 24 48	 mov	 rax, QWORD PTR frame$[rsp]
  00051	4c 8b 40 78	 mov	 r8, QWORD PTR [rax+120]
  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR frame$[rsp]
  0005a	48 8b 50 78	 mov	 rdx, QWORD PTR [rax+120]
  0005e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00063	e8 00 00 00 00	 call	 ptrace_enter_call

; 445  :         break;

  00068	e9 84 00 00 00	 jmp	 $LN8@profiler_c
$LN6@profiler_c:

; 446  : 
; 447  :     /* the 'frame' of a called function is about to finish
; 448  :        (either normally or with an exception) */
; 449  :     case PyTrace_RETURN:
; 450  :         ptrace_leave_call(self, (void *)frame->f_code);

  0006d	48 8b 44 24 48	 mov	 rax, QWORD PTR frame$[rsp]
  00072	48 8b 50 78	 mov	 rdx, QWORD PTR [rax+120]
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0007b	e8 00 00 00 00	 call	 ptrace_leave_call

; 451  :         break;

  00080	eb 6f		 jmp	 SHORT $LN8@profiler_c
$LN5@profiler_c:

; 452  : 
; 453  :     /* case PyTrace_EXCEPTION:
; 454  :         If the exception results in the function exiting, a
; 455  :         PyTrace_RETURN event will be generated, so we don't need to
; 456  :         handle it. */
; 457  : 
; 458  :     /* the Python function 'frame' is issuing a call to the built-in
; 459  :        function 'arg' */
; 460  :     case PyTrace_C_CALL:
; 461  :         if ((((ProfilerObject *)self)->flags & POF_BUILTINS)
; 462  :             && PyCFunction_Check(arg)) {

  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00087	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  0008a	83 e0 04	 and	 eax, 4
  0008d	85 c0		 test	 eax, eax
  0008f	74 2a		 je	 SHORT $LN4@profiler_c
  00091	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  00098	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arg$[rsp]
  0009d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a1	75 18		 jne	 SHORT $LN4@profiler_c

; 463  :             ptrace_enter_call(self,
; 464  :                               ((PyCFunctionObject *)arg)->m_ml,
; 465  :                               arg);

  000a3	4c 8b 44 24 58	 mov	 r8, QWORD PTR arg$[rsp]
  000a8	48 8b 44 24 58	 mov	 rax, QWORD PTR arg$[rsp]
  000ad	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000b1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000b6	e8 00 00 00 00	 call	 ptrace_enter_call
$LN4@profiler_c:

; 466  :         }
; 467  :         break;

  000bb	eb 34		 jmp	 SHORT $LN8@profiler_c
$LN3@profiler_c:

; 468  : 
; 469  :     /* the call to the built-in function 'arg' is returning into its
; 470  :        caller 'frame' */
; 471  :     case PyTrace_C_RETURN:              /* ...normally */
; 472  :     case PyTrace_C_EXCEPTION:           /* ...with an exception set */
; 473  :         if ((((ProfilerObject *)self)->flags & POF_BUILTINS)
; 474  :             && PyCFunction_Check(arg)) {

  000bd	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000c2	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  000c5	83 e0 04	 and	 eax, 4
  000c8	85 c0		 test	 eax, eax
  000ca	74 25		 je	 SHORT $LN2@profiler_c
  000cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  000d3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arg$[rsp]
  000d8	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000dc	75 13		 jne	 SHORT $LN2@profiler_c

; 475  :             ptrace_leave_call(self,
; 476  :                               ((PyCFunctionObject *)arg)->m_ml);

  000de	48 8b 44 24 58	 mov	 rax, QWORD PTR arg$[rsp]
  000e3	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000e7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000ec	e8 00 00 00 00	 call	 ptrace_leave_call
$LN2@profiler_c:
$LN1@profiler_c:
$LN8@profiler_c:

; 477  :         }
; 478  :         break;
; 479  : 
; 480  :     default:
; 481  :         break;
; 482  :     }
; 483  :     return 0;

  000f1	33 c0		 xor	 eax, eax

; 484  : }

  000f3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f7	c3		 ret	 0
profiler_callback ENDP
_TEXT	ENDS
EXTRN	PyErr_Restore:PROC
EXTRN	__imp_malloc:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ptrace_enter_call DD imagerel ptrace_enter_call
	DD	imagerel ptrace_enter_call+245
	DD	imagerel $unwind$ptrace_enter_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ptrace_enter_call DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ptrace_enter_call
_TEXT	SEGMENT
last_tb$ = 32
last_value$ = 40
profEntry$ = 48
last_type$ = 56
pContext$ = 64
pObj$ = 72
self$ = 96
key$ = 104
userObj$ = 112
ptrace_enter_call PROC					; COMDAT

; 370  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 371  :     /* entering a call to the function identified by 'key'
; 372  :        (which can be a PyCodeObject or a PyMethodDef pointer) */
; 373  :     ProfilerObject *pObj = (ProfilerObject*)self;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 48	 mov	 QWORD PTR pObj$[rsp], rax

; 374  :     ProfilerEntry *profEntry;
; 375  :     ProfilerContext *pContext;
; 376  : 
; 377  :     /* In the case of entering a generator expression frame via a
; 378  :      * throw (gen_send_ex(.., 1)), we may already have an
; 379  :      * Exception set here. We must not mess around with this
; 380  :      * exception, and some of the code under here assumes that
; 381  :      * PyErr_* is its own to mess around with, so we have to
; 382  :      * save and restore any current exception. */
; 383  :     PyObject *last_type, *last_value, *last_tb;
; 384  :     PyErr_Fetch(&last_type, &last_value, &last_tb);

  0001d	4c 8d 44 24 20	 lea	 r8, QWORD PTR last_tb$[rsp]
  00022	48 8d 54 24 28	 lea	 rdx, QWORD PTR last_value$[rsp]
  00027	48 8d 4c 24 38	 lea	 rcx, QWORD PTR last_type$[rsp]
  0002c	e8 00 00 00 00	 call	 PyErr_Fetch

; 385  : 
; 386  :     profEntry = getEntry(pObj, key);

  00031	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  00036	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pObj$[rsp]
  0003b	e8 00 00 00 00	 call	 getEntry
  00040	48 89 44 24 30	 mov	 QWORD PTR profEntry$[rsp], rax

; 387  :     if (profEntry == NULL) {

  00045	48 83 7c 24 30
	00		 cmp	 QWORD PTR profEntry$[rsp], 0
  0004b	75 23		 jne	 SHORT $LN5@ptrace_ent

; 388  :         profEntry = newProfilerEntry(pObj, key, userObj);

  0004d	4c 8b 44 24 70	 mov	 r8, QWORD PTR userObj$[rsp]
  00052	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  00057	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pObj$[rsp]
  0005c	e8 00 00 00 00	 call	 newProfilerEntry
  00061	48 89 44 24 30	 mov	 QWORD PTR profEntry$[rsp], rax

; 389  :         if (profEntry == NULL)

  00066	48 83 7c 24 30
	00		 cmp	 QWORD PTR profEntry$[rsp], 0
  0006c	75 02		 jne	 SHORT $LN4@ptrace_ent

; 390  :             goto restorePyerr;

  0006e	eb 6c		 jmp	 SHORT $restorePyerr$120740
$LN4@ptrace_ent:
$LN5@ptrace_ent:

; 391  :     }
; 392  :     /* grab a ProfilerContext out of the free list */
; 393  :     pContext = pObj->freelistProfilerContext;

  00070	48 8b 44 24 48	 mov	 rax, QWORD PTR pObj$[rsp]
  00075	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00079	48 89 44 24 40	 mov	 QWORD PTR pContext$[rsp], rax

; 394  :     if (pContext) {

  0007e	48 83 7c 24 40
	00		 cmp	 QWORD PTR pContext$[rsp], 0
  00084	74 14		 je	 SHORT $LN3@ptrace_ent

; 395  :         pObj->freelistProfilerContext = pContext->previous;

  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR pObj$[rsp]
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pContext$[rsp]
  00090	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00094	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 396  :     }
; 397  :     else {

  00098	eb 2e		 jmp	 SHORT $LN2@ptrace_ent
$LN3@ptrace_ent:

; 398  :         /* free list exhausted, allocate a new one */
; 399  :         pContext = (ProfilerContext*)
; 400  :             malloc(sizeof(ProfilerContext));

  0009a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000a5	48 89 44 24 40	 mov	 QWORD PTR pContext$[rsp], rax

; 401  :         if (pContext == NULL) {

  000aa	48 83 7c 24 40
	00		 cmp	 QWORD PTR pContext$[rsp], 0
  000b0	75 16		 jne	 SHORT $LN1@ptrace_ent

; 402  :             pObj->flags |= POF_NOMEMORY;

  000b2	48 8b 44 24 48	 mov	 rax, QWORD PTR pObj$[rsp]
  000b7	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  000ba	0f ba e8 08	 bts	 eax, 8
  000be	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pObj$[rsp]
  000c3	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 403  :             goto restorePyerr;

  000c6	eb 14		 jmp	 SHORT $restorePyerr$120740
$LN1@ptrace_ent:
$LN2@ptrace_ent:

; 404  :         }
; 405  :     }
; 406  :     initContext(pObj, pContext, profEntry);

  000c8	4c 8b 44 24 30	 mov	 r8, QWORD PTR profEntry$[rsp]
  000cd	48 8b 54 24 40	 mov	 rdx, QWORD PTR pContext$[rsp]
  000d2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pObj$[rsp]
  000d7	e8 00 00 00 00	 call	 initContext
$restorePyerr$120740:

; 407  : 
; 408  : restorePyerr:
; 409  :     PyErr_Restore(last_type, last_value, last_tb);

  000dc	4c 8b 44 24 20	 mov	 r8, QWORD PTR last_tb$[rsp]
  000e1	48 8b 54 24 28	 mov	 rdx, QWORD PTR last_value$[rsp]
  000e6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR last_type$[rsp]
  000eb	e8 00 00 00 00	 call	 PyErr_Restore

; 410  : }

  000f0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f4	c3		 ret	 0
ptrace_enter_call ENDP
_TEXT	ENDS
EXTRN	RotatingTree_Add:PROC
EXTRN	__imp_free:PROC
EXTRN	PyErr_Clear:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$newProfilerEntry DD imagerel newProfilerEntry
	DD	imagerel newProfilerEntry+270
	DD	imagerel $unwind$newProfilerEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newProfilerEntry DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT newProfilerEntry
_TEXT	SEGMENT
self$ = 32
pObj$ = 64
key$ = 72
userObj$ = 80
newProfilerEntry PROC					; COMDAT

; 228  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 229  :     ProfilerEntry *self;
; 230  :     self = (ProfilerEntry*) malloc(sizeof(ProfilerEntry));

  00013	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0001e	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 231  :     if (self == NULL) {

  00023	48 83 7c 24 20
	00		 cmp	 QWORD PTR self$[rsp], 0
  00029	75 1b		 jne	 SHORT $LN2@newProfile

; 232  :         pObj->flags |= POF_NOMEMORY;

  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  00030	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00033	0f ba e8 08	 bts	 eax, 8
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pObj$[rsp]
  0003c	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 233  :         return NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 c3 00 00 00	 jmp	 $LN3@newProfile
$LN2@newProfile:

; 234  :     }
; 235  :     userObj = normalizeUserObj(userObj);

  00046	48 8b 4c 24 50	 mov	 rcx, QWORD PTR userObj$[rsp]
  0004b	e8 00 00 00 00	 call	 normalizeUserObj
  00050	48 89 44 24 50	 mov	 QWORD PTR userObj$[rsp], rax

; 236  :     if (userObj == NULL) {

  00055	48 83 7c 24 50
	00		 cmp	 QWORD PTR userObj$[rsp], 0
  0005b	75 2b		 jne	 SHORT $LN1@newProfile

; 237  :         PyErr_Clear();

  0005d	e8 00 00 00 00	 call	 PyErr_Clear

; 238  :         free(self);

  00062	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 239  :         pObj->flags |= POF_NOMEMORY;

  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  00072	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00075	0f ba e8 08	 bts	 eax, 8
  00079	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pObj$[rsp]
  0007e	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 240  :         return NULL;

  00081	33 c0		 xor	 eax, eax
  00083	e9 81 00 00 00	 jmp	 $LN3@newProfile
$LN1@newProfile:

; 241  :     }
; 242  :     self->header.key = key;

  00088	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  0008d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00092	48 89 08	 mov	 QWORD PTR [rax], rcx

; 243  :     self->userObj = userObj;

  00095	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  0009a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR userObj$[rsp]
  0009f	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 244  :     self->tt = 0;

  000a3	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  000a8	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 245  :     self->it = 0;

  000b0	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  000b5	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 246  :     self->callcount = 0;

  000bd	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  000c2	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [rax+48], 0

; 247  :     self->recursivecallcount = 0;

  000c9	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  000ce	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [rax+52], 0

; 248  :     self->recursionLevel = 0;

  000d5	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  000da	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [rax+56], 0

; 249  :     self->calls = EMPTY_ROTATING_TREE;

  000e1	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  000e6	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 250  :     RotatingTree_Add(&pObj->profilerEntries, &self->header);

  000ee	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  000f3	48 83 c0 60	 add	 rax, 96			; 00000060H
  000f7	48 8b 54 24 20	 mov	 rdx, QWORD PTR self$[rsp]
  000fc	48 8b c8	 mov	 rcx, rax
  000ff	e8 00 00 00 00	 call	 RotatingTree_Add

; 251  :     return self;

  00104	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
$LN3@newProfile:

; 252  : }

  00109	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010d	c3		 ret	 0
newProfilerEntry ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@BDFPHKOB@?$DMbuilt?9in?5method?5?$CFs?$DO?$AA@ ; `string'
PUBLIC	??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@		; `string'
PUBLIC	??_C@_07HHBGOKMG@?$DM?$CFU?4?$CFs?$DO?$AA@	; `string'
EXTRN	PyObject_Repr:PROC
EXTRN	_PyType_Lookup:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyUnicode_CompareWithASCIIString:PROC
EXTRN	PyModule_GetNameObject:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$normalizeUserObj DD imagerel normalizeUserObj
	DD	imagerel normalizeUserObj+532
	DD	imagerel $unwind$normalizeUserObj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$normalizeUserObj DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0BF@BDFPHKOB@?$DMbuilt?9in?5method?5?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_0BF@BDFPHKOB@?$DMbuilt?9in?5method?5?$CFs?$DO?$AA@ DB '<built-in me'
	DB	'thod %s>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@ DB '<%s>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HHBGOKMG@?$DM?$CFU?4?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_07HHBGOKMG@?$DM?$CFU?4?$CFs?$DO?$AA@ DB '<%U.%s>', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT normalizeUserObj
_TEXT	SEGMENT
fn$ = 32
modname$120562 = 40
mod$120561 = 48
result$120580 = 56
self$120586 = 64
name$120587 = 72
mo$120590 = 80
res$120600 = 88
obj$ = 112
normalizeUserObj PROC					; COMDAT

; 165  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 166  :     PyCFunctionObject *fn;
; 167  :     if (!PyCFunction_Check(obj)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  00010	48 8b 4c 24 70	 mov	 rcx, QWORD PTR obj$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 14		 je	 SHORT $LN18@normalizeU

; 168  :         Py_INCREF(obj);

  0001b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR obj$[rsp]
  00020	e8 00 00 00 00	 call	 _Py_IncRef

; 169  :         return obj;

  00025	48 8b 44 24 70	 mov	 rax, QWORD PTR obj$[rsp]
  0002a	e9 e0 01 00 00	 jmp	 $LN19@normalizeU
$LN18@normalizeU:

; 170  :     }
; 171  :     /* Replace built-in function objects with a descriptive string
; 172  :        because of built-in methods -- keeping a reference to
; 173  :        __self__ is probably not a good idea. */
; 174  :     fn = (PyCFunctionObject *)obj;

  0002f	48 8b 44 24 70	 mov	 rax, QWORD PTR obj$[rsp]
  00034	48 89 44 24 20	 mov	 QWORD PTR fn$[rsp], rax

; 175  : 
; 176  :     if (fn->m_self == NULL) {

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR fn$[rsp]
  0003e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00043	0f 85 13 01 00
	00		 jne	 $LN17@normalizeU

; 177  :         /* built-in function: look up the module name */
; 178  :         PyObject *mod = fn->m_module;

  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR fn$[rsp]
  0004e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00052	48 89 44 24 30	 mov	 QWORD PTR mod$120561[rsp], rax

; 179  :         PyObject *modname = NULL;

  00057	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR modname$120562[rsp], 0

; 180  :         if (mod != NULL) {

  00060	48 83 7c 24 30
	00		 cmp	 QWORD PTR mod$120561[rsp], 0
  00066	74 75		 je	 SHORT $LN16@normalizeU

; 181  :             if (PyUnicode_Check(mod)) {

  00068	48 8b 44 24 30	 mov	 rax, QWORD PTR mod$120561[rsp]
  0006d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00071	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00077	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0007c	85 c0		 test	 eax, eax
  0007e	74 16		 je	 SHORT $LN15@normalizeU

; 182  :                 modname = mod;

  00080	48 8b 44 24 30	 mov	 rax, QWORD PTR mod$120561[rsp]
  00085	48 89 44 24 28	 mov	 QWORD PTR modname$120562[rsp], rax

; 183  :                 Py_INCREF(modname);

  0008a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR modname$120562[rsp]
  0008f	e8 00 00 00 00	 call	 _Py_IncRef
  00094	eb 47		 jmp	 SHORT $LN14@normalizeU
$LN15@normalizeU:

; 184  :             }
; 185  :             else if (PyModule_Check(mod)) {

  00096	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  0009d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$120561[rsp]
  000a2	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a6	74 19		 je	 SHORT $LN12@normalizeU
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  000af	48 8b 44 24 30	 mov	 rax, QWORD PTR mod$120561[rsp]
  000b4	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000b8	e8 00 00 00 00	 call	 PyType_IsSubtype
  000bd	85 c0		 test	 eax, eax
  000bf	74 1c		 je	 SHORT $LN13@normalizeU
$LN12@normalizeU:

; 186  :                 modname = PyModule_GetNameObject(mod);

  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$120561[rsp]
  000c6	e8 00 00 00 00	 call	 PyModule_GetNameObject
  000cb	48 89 44 24 28	 mov	 QWORD PTR modname$120562[rsp], rax

; 187  :                 if (modname == NULL)

  000d0	48 83 7c 24 28
	00		 cmp	 QWORD PTR modname$120562[rsp], 0
  000d6	75 05		 jne	 SHORT $LN11@normalizeU

; 188  :                     PyErr_Clear();

  000d8	e8 00 00 00 00	 call	 PyErr_Clear
$LN11@normalizeU:
$LN13@normalizeU:
$LN14@normalizeU:
$LN16@normalizeU:

; 189  :             }
; 190  :         }
; 191  :         if (modname != NULL) {

  000dd	48 83 7c 24 28
	00		 cmp	 QWORD PTR modname$120562[rsp], 0
  000e3	74 55		 je	 SHORT $LN10@normalizeU

; 192  :             if (PyUnicode_CompareWithASCIIString(modname, "builtins") != 0) {

  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  000ec	48 8b 4c 24 28	 mov	 rcx, QWORD PTR modname$120562[rsp]
  000f1	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  000f6	85 c0		 test	 eax, eax
  000f8	74 36		 je	 SHORT $LN9@normalizeU

; 193  :                 PyObject *result;
; 194  :                 result = PyUnicode_FromFormat("<%U.%s>", modname,
; 195  :                                               fn->m_ml->ml_name);

  000fa	48 8b 44 24 20	 mov	 rax, QWORD PTR fn$[rsp]
  000ff	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00103	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00106	48 8b 54 24 28	 mov	 rdx, QWORD PTR modname$120562[rsp]
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07HHBGOKMG@?$DM?$CFU?4?$CFs?$DO?$AA@
  00112	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00117	48 89 44 24 38	 mov	 QWORD PTR result$120580[rsp], rax

; 196  :                 Py_DECREF(modname);

  0011c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR modname$120562[rsp]
  00121	e8 00 00 00 00	 call	 _Py_DecRef

; 197  :                 return result;

  00126	48 8b 44 24 38	 mov	 rax, QWORD PTR result$120580[rsp]
  0012b	e9 df 00 00 00	 jmp	 $LN19@normalizeU
$LN9@normalizeU:

; 198  :             }
; 199  :             Py_DECREF(modname);

  00130	48 8b 4c 24 28	 mov	 rcx, QWORD PTR modname$120562[rsp]
  00135	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@normalizeU:

; 200  :         }
; 201  :         return PyUnicode_FromFormat("<%s>", fn->m_ml->ml_name);

  0013a	48 8b 44 24 20	 mov	 rax, QWORD PTR fn$[rsp]
  0013f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00143	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@
  0014d	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00152	e9 b8 00 00 00	 jmp	 $LN19@normalizeU

; 202  :     }
; 203  :     else {

  00157	e9 b3 00 00 00	 jmp	 $LN8@normalizeU
$LN17@normalizeU:

; 204  :         /* built-in method: try to return
; 205  :             repr(getattr(type(__self__), __name__))
; 206  :         */
; 207  :         PyObject *self = fn->m_self;

  0015c	48 8b 44 24 20	 mov	 rax, QWORD PTR fn$[rsp]
  00161	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00165	48 89 44 24 40	 mov	 QWORD PTR self$120586[rsp], rax

; 208  :         PyObject *name = PyUnicode_FromString(fn->m_ml->ml_name);

  0016a	48 8b 44 24 20	 mov	 rax, QWORD PTR fn$[rsp]
  0016f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00173	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00176	e8 00 00 00 00	 call	 PyUnicode_FromString
  0017b	48 89 44 24 48	 mov	 QWORD PTR name$120587[rsp], rax

; 209  :         if (name != NULL) {

  00180	48 83 7c 24 48
	00		 cmp	 QWORD PTR name$120587[rsp], 0
  00186	74 6a		 je	 SHORT $LN7@normalizeU

; 210  :             PyObject *mo = _PyType_Lookup(Py_TYPE(self), name);

  00188	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$120587[rsp]
  0018d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$120586[rsp]
  00192	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00196	e8 00 00 00 00	 call	 _PyType_Lookup
  0019b	48 89 44 24 50	 mov	 QWORD PTR mo$120590[rsp], rax
$LN6@normalizeU:

; 211  :             Py_XINCREF(mo);

  001a0	48 83 7c 24 50
	00		 cmp	 QWORD PTR mo$120590[rsp], 0
  001a6	74 0a		 je	 SHORT $LN3@normalizeU
  001a8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mo$120590[rsp]
  001ad	e8 00 00 00 00	 call	 _Py_IncRef
$LN3@normalizeU:
  001b2	33 c0		 xor	 eax, eax
  001b4	85 c0		 test	 eax, eax
  001b6	75 e8		 jne	 SHORT $LN6@normalizeU

; 212  :             Py_DECREF(name);

  001b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$120587[rsp]
  001bd	e8 00 00 00 00	 call	 _Py_DecRef

; 213  :             if (mo != NULL) {

  001c2	48 83 7c 24 50
	00		 cmp	 QWORD PTR mo$120590[rsp], 0
  001c8	74 28		 je	 SHORT $LN2@normalizeU

; 214  :                 PyObject *res = PyObject_Repr(mo);

  001ca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mo$120590[rsp]
  001cf	e8 00 00 00 00	 call	 PyObject_Repr
  001d4	48 89 44 24 58	 mov	 QWORD PTR res$120600[rsp], rax

; 215  :                 Py_DECREF(mo);

  001d9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mo$120590[rsp]
  001de	e8 00 00 00 00	 call	 _Py_DecRef

; 216  :                 if (res != NULL)

  001e3	48 83 7c 24 58
	00		 cmp	 QWORD PTR res$120600[rsp], 0
  001e9	74 07		 je	 SHORT $LN1@normalizeU

; 217  :                     return res;

  001eb	48 8b 44 24 58	 mov	 rax, QWORD PTR res$120600[rsp]
  001f0	eb 1d		 jmp	 SHORT $LN19@normalizeU
$LN1@normalizeU:
$LN2@normalizeU:
$LN7@normalizeU:

; 218  :             }
; 219  :         }
; 220  :         PyErr_Clear();

  001f2	e8 00 00 00 00	 call	 PyErr_Clear

; 221  :         return PyUnicode_FromFormat("<built-in method %s>",
; 222  :                                     fn->m_ml->ml_name);

  001f7	48 8b 44 24 20	 mov	 rax, QWORD PTR fn$[rsp]
  001fc	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00200	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@BDFPHKOB@?$DMbuilt?9in?5method?5?$CFs?$DO?$AA@
  0020a	e8 00 00 00 00	 call	 PyUnicode_FromFormat
$LN8@normalizeU:
$LN19@normalizeU:

; 223  :     }
; 224  : }

  0020f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00213	c3		 ret	 0
normalizeUserObj ENDP
_TEXT	ENDS
EXTRN	RotatingTree_Get:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$getEntry DD imagerel getEntry
	DD	imagerel getEntry+41
	DD	imagerel $unwind$getEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getEntry DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT getEntry
_TEXT	SEGMENT
pObj$ = 48
key$ = 56
getEntry PROC						; COMDAT

; 256  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 257  :     return (ProfilerEntry*) RotatingTree_Get(&pObj->profilerEntries, key);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR pObj$[rsp]
  00013	48 83 c0 60	 add	 rax, 96			; 00000060H
  00017	48 8b 54 24 38	 mov	 rdx, QWORD PTR key$[rsp]
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 RotatingTree_Get

; 258  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
getEntry ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$initContext DD imagerel initContext
	DD	imagerel initContext+285
	DD	imagerel $unwind$initContext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initContext DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT initContext
_TEXT	SEGMENT
subentry$120698 = 32
caller$120697 = 40
tv129 = 48
pObj$ = 80
self$ = 88
entry$ = 96
initContext PROC					; COMDAT

; 321  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 322  :     self->ctxEntry = entry;

  00013	48 8b 44 24 58	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 8b 4c 24 60	 mov	 rcx, QWORD PTR entry$[rsp]
  0001d	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 323  :     self->subt = 0;

  00021	48 8b 44 24 58	 mov	 rax, QWORD PTR self$[rsp]
  00026	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 324  :     self->previous = pObj->currentProfilerContext;

  0002e	48 8b 44 24 58	 mov	 rax, QWORD PTR self$[rsp]
  00033	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pObj$[rsp]
  00038	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0003c	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 325  :     pObj->currentProfilerContext = self;

  00040	48 8b 44 24 50	 mov	 rax, QWORD PTR pObj$[rsp]
  00045	48 8b 4c 24 58	 mov	 rcx, QWORD PTR self$[rsp]
  0004a	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 326  :     ++entry->recursionLevel;

  0004e	48 8b 44 24 60	 mov	 rax, QWORD PTR entry$[rsp]
  00053	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00056	ff c0		 inc	 eax
  00058	48 8b 4c 24 60	 mov	 rcx, QWORD PTR entry$[rsp]
  0005d	89 41 38	 mov	 DWORD PTR [rcx+56], eax

; 327  :     if ((pObj->flags & POF_SUBCALLS) && self->previous) {

  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR pObj$[rsp]
  00065	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00068	83 e0 02	 and	 eax, 2
  0006b	85 c0		 test	 eax, eax
  0006d	74 72		 je	 SHORT $LN3@initContex
  0006f	48 8b 44 24 58	 mov	 rax, QWORD PTR self$[rsp]
  00074	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00079	74 66		 je	 SHORT $LN3@initContex

; 328  :         /* find or create an entry for me in my caller's entry */
; 329  :         ProfilerEntry *caller = self->previous->ctxEntry;

  0007b	48 8b 44 24 58	 mov	 rax, QWORD PTR self$[rsp]
  00080	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00084	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00088	48 89 44 24 28	 mov	 QWORD PTR caller$120697[rsp], rax

; 330  :         ProfilerSubEntry *subentry = getSubEntry(pObj, caller, entry);

  0008d	4c 8b 44 24 60	 mov	 r8, QWORD PTR entry$[rsp]
  00092	48 8b 54 24 28	 mov	 rdx, QWORD PTR caller$120697[rsp]
  00097	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pObj$[rsp]
  0009c	e8 00 00 00 00	 call	 getSubEntry
  000a1	48 89 44 24 20	 mov	 QWORD PTR subentry$120698[rsp], rax

; 331  :         if (subentry == NULL)

  000a6	48 83 7c 24 20
	00		 cmp	 QWORD PTR subentry$120698[rsp], 0
  000ac	75 19		 jne	 SHORT $LN2@initContex

; 332  :             subentry = newSubEntry(pObj, caller, entry);

  000ae	4c 8b 44 24 60	 mov	 r8, QWORD PTR entry$[rsp]
  000b3	48 8b 54 24 28	 mov	 rdx, QWORD PTR caller$120697[rsp]
  000b8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pObj$[rsp]
  000bd	e8 00 00 00 00	 call	 newSubEntry
  000c2	48 89 44 24 20	 mov	 QWORD PTR subentry$120698[rsp], rax
$LN2@initContex:

; 333  :         if (subentry)

  000c7	48 83 7c 24 20
	00		 cmp	 QWORD PTR subentry$120698[rsp], 0
  000cd	74 12		 je	 SHORT $LN1@initContex

; 334  :             ++subentry->recursionLevel;

  000cf	48 8b 44 24 20	 mov	 rax, QWORD PTR subentry$120698[rsp]
  000d4	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  000d7	ff c0		 inc	 eax
  000d9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR subentry$120698[rsp]
  000de	89 41 30	 mov	 DWORD PTR [rcx+48], eax
$LN1@initContex:
$LN3@initContex:

; 335  :     }
; 336  :     self->t0 = CALL_TIMER(pObj);

  000e1	48 8b 44 24 50	 mov	 rax, QWORD PTR pObj$[rsp]
  000e6	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000ee	74 11		 je	 SHORT $LN6@initContex
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pObj$[rsp]
  000f5	e8 00 00 00 00	 call	 CallExternalTimer
  000fa	48 89 44 24 30	 mov	 QWORD PTR tv129[rsp], rax
  000ff	eb 0a		 jmp	 SHORT $LN7@initContex
$LN6@initContex:
  00101	e8 00 00 00 00	 call	 hpTimer
  00106	48 89 44 24 30	 mov	 QWORD PTR tv129[rsp], rax
$LN7@initContex:
  0010b	48 8b 44 24 58	 mov	 rax, QWORD PTR self$[rsp]
  00110	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv129[rsp]
  00115	48 89 08	 mov	 QWORD PTR [rax], rcx

; 337  : }

  00118	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011c	c3		 ret	 0
initContext ENDP
_TEXT	ENDS
EXTRN	__imp_QueryPerformanceCounter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$hpTimer DD imagerel hpTimer
	DD	imagerel hpTimer+25
	DD	imagerel $unwind$hpTimer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$hpTimer DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT hpTimer
_TEXT	SEGMENT
li$ = 32
hpTimer	PROC						; COMDAT

; 17   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 18   :     LARGE_INTEGER li;
; 19   :     QueryPerformanceCounter(&li);

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR li$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 20   :     return li.QuadPart;

  0000f	48 8b 44 24 20	 mov	 rax, QWORD PTR li$[rsp]

; 21   : }

  00014	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00018	c3		 ret	 0
hpTimer	ENDP
_TEXT	ENDS
PUBLIC	__real@41f0000000000000
EXTRN	PyErr_Occurred:PROC
EXTRN	PyFloat_AsDouble:PROC
EXTRN	PyLong_AsLongLong:PROC
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyObject_Call:PROC
_BSS	SEGMENT
empty_tuple DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CallExternalTimer DD imagerel CallExternalTimer
	DD	imagerel CallExternalTimer+201
	DD	imagerel $unwind$CallExternalTimer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CallExternalTimer DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT CallExternalTimer
_TEXT	SEGMENT
result$ = 32
o$ = 40
val$120545 = 48
pObj$ = 80
CallExternalTimer PROC					; COMDAT

; 129  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 130  :     PY_LONG_LONG result;
; 131  :     PyObject *o = PyObject_Call(pObj->externalTimer, empty_tuple, NULL);

  00009	45 33 c0	 xor	 r8d, r8d
  0000c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR empty_tuple
  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR pObj$[rsp]
  00018	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0001f	e8 00 00 00 00	 call	 PyObject_Call
  00024	48 89 44 24 28	 mov	 QWORD PTR o$[rsp], rax

; 132  :     if (o == NULL) {

  00029	48 83 7c 24 28
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002f	75 15		 jne	 SHORT $LN4@CallExtern

; 133  :         PyErr_WriteUnraisable(pObj->externalTimer);

  00031	48 8b 44 24 50	 mov	 rax, QWORD PTR pObj$[rsp]
  00036	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0003d	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 134  :         return 0;

  00042	33 c0		 xor	 eax, eax
  00044	eb 7e		 jmp	 SHORT $LN5@CallExtern
$LN4@CallExtern:

; 135  :     }
; 136  :     if (pObj->externalTimerUnit > 0.0) {

  00046	48 8b 44 24 50	 mov	 rax, QWORD PTR pObj$[rsp]
  0004b	f2 0f 10 80 88
	00 00 00	 movsdx	 xmm0, QWORD PTR [rax+136]
  00053	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0005b	76 11		 jbe	 SHORT $LN3@CallExtern

; 137  :         /* interpret the result as an integer that will be scaled
; 138  :            in profiler_getstats() */
; 139  :         result = PyLong_AsLongLong(o);

  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$[rsp]
  00062	e8 00 00 00 00	 call	 PyLong_AsLongLong
  00067	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 140  :     }
; 141  :     else {

  0006c	eb 28		 jmp	 SHORT $LN2@CallExtern
$LN3@CallExtern:

; 142  :         /* interpret the result as a double measured in seconds.
; 143  :            As the profiler works with PY_LONG_LONG internally
; 144  :            we convert it to a large integer */
; 145  :         double val = PyFloat_AsDouble(o);

  0006e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$[rsp]
  00073	e8 00 00 00 00	 call	 PyFloat_AsDouble
  00078	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR val$120545[rsp], xmm0

; 146  :         /* error handling delayed to the code below */
; 147  :         result = (PY_LONG_LONG) (val * DOUBLE_TIMER_PRECISION);

  0007e	f2 0f 10 44 24
	30		 movsdx	 xmm0, QWORD PTR val$120545[rsp]
  00084	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@41f0000000000000
  0008c	f2 48 0f 2c c0	 cvttsd2si rax, xmm0
  00091	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax
$LN2@CallExtern:

; 148  :     }
; 149  :     Py_DECREF(o);

  00096	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$[rsp]
  0009b	e8 00 00 00 00	 call	 _Py_DecRef

; 150  :     if (PyErr_Occurred()) {

  000a0	e8 00 00 00 00	 call	 PyErr_Occurred
  000a5	48 85 c0	 test	 rax, rax
  000a8	74 15		 je	 SHORT $LN1@CallExtern

; 151  :         PyErr_WriteUnraisable(pObj->externalTimer);

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pObj$[rsp]
  000af	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000b6	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 152  :         return 0;

  000bb	33 c0		 xor	 eax, eax
  000bd	eb 05		 jmp	 SHORT $LN5@CallExtern
$LN1@CallExtern:

; 153  :     }
; 154  :     return result;

  000bf	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
$LN5@CallExtern:

; 155  : }

  000c4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c8	c3		 ret	 0
CallExternalTimer ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getSubEntry DD imagerel getSubEntry
	DD	imagerel getSubEntry+46
	DD	imagerel $unwind$getSubEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getSubEntry DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT getSubEntry
_TEXT	SEGMENT
pObj$ = 48
caller$ = 56
entry$ = 64
getSubEntry PROC					; COMDAT

; 262  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 263  :     return (ProfilerSubEntry*) RotatingTree_Get(&caller->calls,
; 264  :                                                 (void *)entry);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR caller$[rsp]
  00018	48 83 c0 40	 add	 rax, 64			; 00000040H
  0001c	48 8b 54 24 40	 mov	 rdx, QWORD PTR entry$[rsp]
  00021	48 8b c8	 mov	 rcx, rax
  00024	e8 00 00 00 00	 call	 RotatingTree_Get

; 265  : }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
getSubEntry ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newSubEntry DD imagerel newSubEntry
	DD	imagerel newSubEntry+174
	DD	imagerel $unwind$newSubEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newSubEntry DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT newSubEntry
_TEXT	SEGMENT
self$ = 32
pObj$ = 64
caller$ = 72
entry$ = 80
newSubEntry PROC					; COMDAT

; 269  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 270  :     ProfilerSubEntry *self;
; 271  :     self = (ProfilerSubEntry*) malloc(sizeof(ProfilerSubEntry));

  00013	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0001e	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 272  :     if (self == NULL) {

  00023	48 83 7c 24 20
	00		 cmp	 QWORD PTR self$[rsp], 0
  00029	75 18		 jne	 SHORT $LN1@newSubEntr

; 273  :         pObj->flags |= POF_NOMEMORY;

  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  00030	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00033	0f ba e8 08	 bts	 eax, 8
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pObj$[rsp]
  0003c	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 274  :         return NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	eb 66		 jmp	 SHORT $LN2@newSubEntr
$LN1@newSubEntr:

; 275  :     }
; 276  :     self->header.key = (void *)entry;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR entry$[rsp]
  0004d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 277  :     self->tt = 0;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00055	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 278  :     self->it = 0;

  0005d	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00062	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 279  :     self->callcount = 0;

  0006a	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  0006f	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [rax+40], 0

; 280  :     self->recursivecallcount = 0;

  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  0007b	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [rax+44], 0

; 281  :     self->recursionLevel = 0;

  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00087	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [rax+48], 0

; 282  :     RotatingTree_Add(&caller->calls, &self->header);

  0008e	48 8b 44 24 48	 mov	 rax, QWORD PTR caller$[rsp]
  00093	48 83 c0 40	 add	 rax, 64			; 00000040H
  00097	48 8b 54 24 20	 mov	 rdx, QWORD PTR self$[rsp]
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	e8 00 00 00 00	 call	 RotatingTree_Add

; 283  :     return self;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
$LN2@newSubEntr:

; 284  : }

  000a9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ad	c3		 ret	 0
newSubEntry ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ptrace_leave_call DD imagerel ptrace_leave_call
	DD	imagerel ptrace_leave_call+153
	DD	imagerel $unwind$ptrace_leave_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ptrace_leave_call DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ptrace_leave_call
_TEXT	SEGMENT
profEntry$ = 32
pContext$ = 40
pObj$ = 48
self$ = 80
key$ = 88
ptrace_leave_call PROC					; COMDAT

; 414  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 415  :     /* leaving a call to the function identified by 'key' */
; 416  :     ProfilerObject *pObj = (ProfilerObject*)self;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 89 44 24 30	 mov	 QWORD PTR pObj$[rsp], rax

; 417  :     ProfilerEntry *profEntry;
; 418  :     ProfilerContext *pContext;
; 419  : 
; 420  :     pContext = pObj->currentProfilerContext;

  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR pObj$[rsp]
  0001d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00021	48 89 44 24 28	 mov	 QWORD PTR pContext$[rsp], rax

; 421  :     if (pContext == NULL)

  00026	48 83 7c 24 28
	00		 cmp	 QWORD PTR pContext$[rsp], 0
  0002c	75 02		 jne	 SHORT $LN3@ptrace_lea

; 422  :         return;

  0002e	eb 64		 jmp	 SHORT $LN4@ptrace_lea
$LN3@ptrace_lea:

; 423  :     profEntry = getEntry(pObj, key);

  00030	48 8b 54 24 58	 mov	 rdx, QWORD PTR key$[rsp]
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pObj$[rsp]
  0003a	e8 00 00 00 00	 call	 getEntry
  0003f	48 89 44 24 20	 mov	 QWORD PTR profEntry$[rsp], rax

; 424  :     if (profEntry) {

  00044	48 83 7c 24 20
	00		 cmp	 QWORD PTR profEntry$[rsp], 0
  0004a	74 16		 je	 SHORT $LN2@ptrace_lea

; 425  :         Stop(pObj, pContext, profEntry);

  0004c	4c 8b 44 24 20	 mov	 r8, QWORD PTR profEntry$[rsp]
  00051	48 8b 54 24 28	 mov	 rdx, QWORD PTR pContext$[rsp]
  00056	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pObj$[rsp]
  0005b	e8 00 00 00 00	 call	 Stop

; 426  :     }
; 427  :     else {

  00060	eb 12		 jmp	 SHORT $LN1@ptrace_lea
$LN2@ptrace_lea:

; 428  :         pObj->currentProfilerContext = pContext->previous;

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR pObj$[rsp]
  00067	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pContext$[rsp]
  0006c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00070	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx
$LN1@ptrace_lea:

; 429  :     }
; 430  :     /* put pContext into the free list */
; 431  :     pContext->previous = pObj->freelistProfilerContext;

  00074	48 8b 44 24 28	 mov	 rax, QWORD PTR pContext$[rsp]
  00079	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pObj$[rsp]
  0007e	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00082	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 432  :     pObj->freelistProfilerContext = pContext;

  00086	48 8b 44 24 30	 mov	 rax, QWORD PTR pObj$[rsp]
  0008b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pContext$[rsp]
  00090	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx
$LN4@ptrace_lea:

; 433  : }

  00094	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00098	c3		 ret	 0
ptrace_leave_call ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Stop DD	imagerel Stop
	DD	imagerel Stop+496
	DD	imagerel $unwind$Stop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Stop DD	011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Stop
_TEXT	SEGMENT
it$ = 32
tt$ = 40
subentry$120717 = 48
caller$120716 = 56
tv69 = 64
tv84 = 72
tv145 = 76
pObj$ = 96
self$ = 104
entry$ = 112
Stop	PROC						; COMDAT

; 341  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 342  :     PY_LONG_LONG tt = CALL_TIMER(pObj) - self->t0;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR pObj$[rsp]
  00018	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00020	74 11		 je	 SHORT $LN10@Stop
  00022	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pObj$[rsp]
  00027	e8 00 00 00 00	 call	 CallExternalTimer
  0002c	48 89 44 24 40	 mov	 QWORD PTR tv69[rsp], rax
  00031	eb 0a		 jmp	 SHORT $LN11@Stop
$LN10@Stop:
  00033	e8 00 00 00 00	 call	 hpTimer
  00038	48 89 44 24 40	 mov	 QWORD PTR tv69[rsp], rax
$LN11@Stop:
  0003d	48 8b 44 24 68	 mov	 rax, QWORD PTR self$[rsp]
  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv69[rsp]
  0004a	48 2b c8	 sub	 rcx, rax
  0004d	48 8b c1	 mov	 rax, rcx
  00050	48 89 44 24 28	 mov	 QWORD PTR tt$[rsp], rax

; 343  :     PY_LONG_LONG it = tt - self->subt;

  00055	48 8b 44 24 68	 mov	 rax, QWORD PTR self$[rsp]
  0005a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tt$[rsp]
  00063	48 2b c8	 sub	 rcx, rax
  00066	48 8b c1	 mov	 rax, rcx
  00069	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 344  :     if (self->previous)

  0006e	48 8b 44 24 68	 mov	 rax, QWORD PTR self$[rsp]
  00073	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00078	74 1f		 je	 SHORT $LN7@Stop

; 345  :         self->previous->subt += tt;

  0007a	48 8b 44 24 68	 mov	 rax, QWORD PTR self$[rsp]
  0007f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00083	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00087	48 03 44 24 28	 add	 rax, QWORD PTR tt$[rsp]
  0008c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR self$[rsp]
  00091	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00095	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN7@Stop:

; 346  :     pObj->currentProfilerContext = self->previous;

  00099	48 8b 44 24 60	 mov	 rax, QWORD PTR pObj$[rsp]
  0009e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR self$[rsp]
  000a3	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000a7	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 347  :     if (--entry->recursionLevel == 0)

  000ab	48 8b 44 24 70	 mov	 rax, QWORD PTR entry$[rsp]
  000b0	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000b3	ff c8		 dec	 eax
  000b5	89 44 24 48	 mov	 DWORD PTR tv84[rsp], eax
  000b9	48 8b 44 24 70	 mov	 rax, QWORD PTR entry$[rsp]
  000be	8b 4c 24 48	 mov	 ecx, DWORD PTR tv84[rsp]
  000c2	89 48 38	 mov	 DWORD PTR [rax+56], ecx
  000c5	83 7c 24 48 00	 cmp	 DWORD PTR tv84[rsp], 0
  000ca	75 19		 jne	 SHORT $LN6@Stop

; 348  :         entry->tt += tt;

  000cc	48 8b 44 24 70	 mov	 rax, QWORD PTR entry$[rsp]
  000d1	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000d5	48 03 44 24 28	 add	 rax, QWORD PTR tt$[rsp]
  000da	48 8b 4c 24 70	 mov	 rcx, QWORD PTR entry$[rsp]
  000df	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 349  :     else

  000e3	eb 12		 jmp	 SHORT $LN5@Stop
$LN6@Stop:

; 350  :         ++entry->recursivecallcount;

  000e5	48 8b 44 24 70	 mov	 rax, QWORD PTR entry$[rsp]
  000ea	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  000ed	ff c0		 inc	 eax
  000ef	48 8b 4c 24 70	 mov	 rcx, QWORD PTR entry$[rsp]
  000f4	89 41 34	 mov	 DWORD PTR [rcx+52], eax
$LN5@Stop:

; 351  :     entry->it += it;

  000f7	48 8b 44 24 70	 mov	 rax, QWORD PTR entry$[rsp]
  000fc	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00100	48 03 44 24 20	 add	 rax, QWORD PTR it$[rsp]
  00105	48 8b 4c 24 70	 mov	 rcx, QWORD PTR entry$[rsp]
  0010a	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 352  :     entry->callcount++;

  0010e	48 8b 44 24 70	 mov	 rax, QWORD PTR entry$[rsp]
  00113	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  00116	ff c0		 inc	 eax
  00118	48 8b 4c 24 70	 mov	 rcx, QWORD PTR entry$[rsp]
  0011d	89 41 30	 mov	 DWORD PTR [rcx+48], eax

; 353  :     if ((pObj->flags & POF_SUBCALLS) && self->previous) {

  00120	48 8b 44 24 60	 mov	 rax, QWORD PTR pObj$[rsp]
  00125	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00128	83 e0 02	 and	 eax, 2
  0012b	85 c0		 test	 eax, eax
  0012d	0f 84 b8 00 00
	00		 je	 $LN4@Stop
  00133	48 8b 44 24 68	 mov	 rax, QWORD PTR self$[rsp]
  00138	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0013d	0f 84 a8 00 00
	00		 je	 $LN4@Stop

; 354  :         /* find or create an entry for me in my caller's entry */
; 355  :         ProfilerEntry *caller = self->previous->ctxEntry;

  00143	48 8b 44 24 68	 mov	 rax, QWORD PTR self$[rsp]
  00148	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0014c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00150	48 89 44 24 38	 mov	 QWORD PTR caller$120716[rsp], rax

; 356  :         ProfilerSubEntry *subentry = getSubEntry(pObj, caller, entry);

  00155	4c 8b 44 24 70	 mov	 r8, QWORD PTR entry$[rsp]
  0015a	48 8b 54 24 38	 mov	 rdx, QWORD PTR caller$120716[rsp]
  0015f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pObj$[rsp]
  00164	e8 00 00 00 00	 call	 getSubEntry
  00169	48 89 44 24 30	 mov	 QWORD PTR subentry$120717[rsp], rax

; 357  :         if (subentry) {

  0016e	48 83 7c 24 30
	00		 cmp	 QWORD PTR subentry$120717[rsp], 0
  00174	74 75		 je	 SHORT $LN3@Stop

; 358  :             if (--subentry->recursionLevel == 0)

  00176	48 8b 44 24 30	 mov	 rax, QWORD PTR subentry$120717[rsp]
  0017b	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  0017e	ff c8		 dec	 eax
  00180	89 44 24 4c	 mov	 DWORD PTR tv145[rsp], eax
  00184	48 8b 44 24 30	 mov	 rax, QWORD PTR subentry$120717[rsp]
  00189	8b 4c 24 4c	 mov	 ecx, DWORD PTR tv145[rsp]
  0018d	89 48 30	 mov	 DWORD PTR [rax+48], ecx
  00190	83 7c 24 4c 00	 cmp	 DWORD PTR tv145[rsp], 0
  00195	75 19		 jne	 SHORT $LN2@Stop

; 359  :                 subentry->tt += tt;

  00197	48 8b 44 24 30	 mov	 rax, QWORD PTR subentry$120717[rsp]
  0019c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  001a0	48 03 44 24 28	 add	 rax, QWORD PTR tt$[rsp]
  001a5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR subentry$120717[rsp]
  001aa	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 360  :             else

  001ae	eb 12		 jmp	 SHORT $LN1@Stop
$LN2@Stop:

; 361  :                 ++subentry->recursivecallcount;

  001b0	48 8b 44 24 30	 mov	 rax, QWORD PTR subentry$120717[rsp]
  001b5	8b 40 2c	 mov	 eax, DWORD PTR [rax+44]
  001b8	ff c0		 inc	 eax
  001ba	48 8b 4c 24 30	 mov	 rcx, QWORD PTR subentry$120717[rsp]
  001bf	89 41 2c	 mov	 DWORD PTR [rcx+44], eax
$LN1@Stop:

; 362  :             subentry->it += it;

  001c2	48 8b 44 24 30	 mov	 rax, QWORD PTR subentry$120717[rsp]
  001c7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001cb	48 03 44 24 20	 add	 rax, QWORD PTR it$[rsp]
  001d0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR subentry$120717[rsp]
  001d5	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 363  :             ++subentry->callcount;

  001d9	48 8b 44 24 30	 mov	 rax, QWORD PTR subentry$120717[rsp]
  001de	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  001e1	ff c0		 inc	 eax
  001e3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR subentry$120717[rsp]
  001e8	89 41 28	 mov	 DWORD PTR [rcx+40], eax
$LN3@Stop:
$LN4@Stop:

; 364  :         }
; 365  :     }
; 366  : }

  001eb	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ef	c3		 ret	 0
Stop	ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT setSubcalls
_TEXT	SEGMENT
pObj$ = 8
nvalue$ = 16
setSubcalls PROC					; COMDAT

; 654  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 655  :     if (nvalue == 0)

  00009	83 7c 24 10 00	 cmp	 DWORD PTR nvalue$[rsp], 0
  0000e	75 15		 jne	 SHORT $LN3@setSubcall

; 656  :         pObj->flags &= ~POF_SUBCALLS;

  00010	48 8b 44 24 08	 mov	 rax, QWORD PTR pObj$[rsp]
  00015	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00018	83 e0 fd	 and	 eax, -3
  0001b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pObj$[rsp]
  00020	89 41 78	 mov	 DWORD PTR [rcx+120], eax
  00023	eb 1a		 jmp	 SHORT $LN2@setSubcall
$LN3@setSubcall:

; 657  :     else if (nvalue > 0)

  00025	83 7c 24 10 00	 cmp	 DWORD PTR nvalue$[rsp], 0
  0002a	7e 13		 jle	 SHORT $LN1@setSubcall

; 658  :         pObj->flags |=  POF_SUBCALLS;

  0002c	48 8b 44 24 08	 mov	 rax, QWORD PTR pObj$[rsp]
  00031	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00034	83 c8 02	 or	 eax, 2
  00037	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pObj$[rsp]
  0003c	89 41 78	 mov	 DWORD PTR [rcx+120], eax
$LN1@setSubcall:
$LN2@setSubcall:

; 659  :     return 0;

  0003f	33 c0		 xor	 eax, eax

; 660  : }

  00041	c3		 ret	 0
setSubcalls ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT setBuiltins
_TEXT	SEGMENT
pObj$ = 8
nvalue$ = 16
setBuiltins PROC					; COMDAT

; 664  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 665  :     if (nvalue == 0)

  00009	83 7c 24 10 00	 cmp	 DWORD PTR nvalue$[rsp], 0
  0000e	75 15		 jne	 SHORT $LN3@setBuiltin

; 666  :         pObj->flags &= ~POF_BUILTINS;

  00010	48 8b 44 24 08	 mov	 rax, QWORD PTR pObj$[rsp]
  00015	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00018	83 e0 fb	 and	 eax, -5
  0001b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pObj$[rsp]
  00020	89 41 78	 mov	 DWORD PTR [rcx+120], eax
  00023	eb 1a		 jmp	 SHORT $LN2@setBuiltin
$LN3@setBuiltin:

; 667  :     else if (nvalue > 0) {

  00025	83 7c 24 10 00	 cmp	 DWORD PTR nvalue$[rsp], 0
  0002a	7e 13		 jle	 SHORT $LN1@setBuiltin

; 668  :         pObj->flags |=  POF_BUILTINS;

  0002c	48 8b 44 24 08	 mov	 rax, QWORD PTR pObj$[rsp]
  00031	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00034	83 c8 04	 or	 eax, 4
  00037	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pObj$[rsp]
  0003c	89 41 78	 mov	 DWORD PTR [rcx+120], eax
$LN1@setBuiltin:
$LN2@setBuiltin:

; 669  :     }
; 670  :     return 0;

  0003f	33 c0		 xor	 eax, eax

; 671  : }

  00041	c3		 ret	 0
setBuiltins ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$profiler_disable DD imagerel profiler_disable
	DD	imagerel profiler_disable+94
	DD	imagerel $unwind$profiler_disable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_disable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT profiler_disable
_TEXT	SEGMENT
self$ = 48
noarg$ = 56
profiler_disable PROC					; COMDAT

; 724  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 725  :     self->flags &= ~POF_ENABLED;

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00016	83 e0 fe	 and	 eax, -2
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0001e	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 726  :     PyEval_SetProfile(NULL, NULL);

  00021	33 d2		 xor	 edx, edx
  00023	33 c9		 xor	 ecx, ecx
  00025	e8 00 00 00 00	 call	 PyEval_SetProfile

; 727  :     flush_unmatched(self);

  0002a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0002f	e8 00 00 00 00	 call	 flush_unmatched

; 728  :     if (pending_exception(self))

  00034	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00039	e8 00 00 00 00	 call	 pending_exception
  0003e	85 c0		 test	 eax, eax
  00040	74 04		 je	 SHORT $LN1@profiler_d

; 729  :         return NULL;

  00042	33 c0		 xor	 eax, eax
  00044	eb 13		 jmp	 SHORT $LN2@profiler_d
$LN1@profiler_d:

; 730  :     Py_INCREF(Py_None);

  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0004d	e8 00 00 00 00	 call	 _Py_IncRef

; 731  :     return Py_None;

  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@profiler_d:

; 732  : }

  00059	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005d	c3		 ret	 0
profiler_disable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$flush_unmatched DD imagerel flush_unmatched
	DD	imagerel flush_unmatched+123
	DD	imagerel $unwind$flush_unmatched
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$flush_unmatched DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT flush_unmatched
_TEXT	SEGMENT
profEntry$120945 = 32
pContext$120944 = 40
pObj$ = 64
flush_unmatched PROC					; COMDAT

; 702  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN5@flush_unma:

; 703  :     while (pObj->currentProfilerContext) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	74 61		 je	 SHORT $LN4@flush_unma

; 704  :         ProfilerContext *pContext = pObj->currentProfilerContext;

  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  0001a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001e	48 89 44 24 28	 mov	 QWORD PTR pContext$120944[rsp], rax

; 705  :         ProfilerEntry *profEntry= pContext->ctxEntry;

  00023	48 8b 44 24 28	 mov	 rax, QWORD PTR pContext$120944[rsp]
  00028	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0002c	48 89 44 24 20	 mov	 QWORD PTR profEntry$120945[rsp], rax

; 706  :         if (profEntry)

  00031	48 83 7c 24 20
	00		 cmp	 QWORD PTR profEntry$120945[rsp], 0
  00037	74 16		 je	 SHORT $LN3@flush_unma

; 707  :             Stop(pObj, pContext, profEntry);

  00039	4c 8b 44 24 20	 mov	 r8, QWORD PTR profEntry$120945[rsp]
  0003e	48 8b 54 24 28	 mov	 rdx, QWORD PTR pContext$120944[rsp]
  00043	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pObj$[rsp]
  00048	e8 00 00 00 00	 call	 Stop

; 708  :         else

  0004d	eb 12		 jmp	 SHORT $LN2@flush_unma
$LN3@flush_unma:

; 709  :             pObj->currentProfilerContext = pContext->previous;

  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  00054	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pContext$120944[rsp]
  00059	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0005d	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx
$LN2@flush_unma:

; 710  :         if (pContext)

  00061	48 83 7c 24 28
	00		 cmp	 QWORD PTR pContext$120944[rsp], 0
  00067	74 0b		 je	 SHORT $LN1@flush_unma

; 711  :             free(pContext);

  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pContext$120944[rsp]
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@flush_unma:

; 712  :     }

  00074	eb 93		 jmp	 SHORT $LN5@flush_unma
$LN4@flush_unma:

; 713  : 
; 714  : }

  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
flush_unmatched ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$profiler_clear DD imagerel profiler_clear
	DD	imagerel profiler_clear+48
	DD	imagerel $unwind$profiler_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_clear DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT profiler_clear
_TEXT	SEGMENT
pObj$ = 48
noarg$ = 56
profiler_clear PROC					; COMDAT

; 742  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 743  :     clearEntries(pObj);

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pObj$[rsp]
  00013	e8 00 00 00 00	 call	 clearEntries

; 744  :     Py_INCREF(Py_None);

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001f	e8 00 00 00 00	 call	 _Py_IncRef

; 745  :     return Py_None;

  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 746  : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
profiler_clear ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$clearEntries DD imagerel clearEntries
	DD	imagerel clearEntries+161
	DD	imagerel $unwind$clearEntries
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clearEntries DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT clearEntries
_TEXT	SEGMENT
c$120686 = 32
pObj$ = 64
clearEntries PROC					; COMDAT

; 303  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 304  :     RotatingTree_Enum(pObj->profilerEntries, freeEntry, NULL);

  00009	45 33 c0	 xor	 r8d, r8d
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:freeEntry
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  00018	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0001c	e8 00 00 00 00	 call	 RotatingTree_Enum

; 305  :     pObj->profilerEntries = EMPTY_ROTATING_TREE;

  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  00026	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 306  :     /* release the memory hold by the ProfilerContexts */
; 307  :     if (pObj->currentProfilerContext) {

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  00033	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00038	74 1c		 je	 SHORT $LN3@clearEntri

; 308  :         free(pObj->currentProfilerContext);

  0003a	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  0003f	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 309  :         pObj->currentProfilerContext = NULL;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  0004e	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
$LN3@clearEntri:
$LN2@clearEntri:

; 310  :     }
; 311  :     while (pObj->freelistProfilerContext) {

  00056	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  0005b	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00060	74 2d		 je	 SHORT $LN1@clearEntri

; 312  :         ProfilerContext *c = pObj->freelistProfilerContext;

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  00067	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0006b	48 89 44 24 20	 mov	 QWORD PTR c$120686[rsp], rax

; 313  :         pObj->freelistProfilerContext = c->previous;

  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  00075	48 8b 4c 24 20	 mov	 rcx, QWORD PTR c$120686[rsp]
  0007a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0007e	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 314  :         free(c);

  00082	48 8b 4c 24 20	 mov	 rcx, QWORD PTR c$120686[rsp]
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 315  :     }

  0008d	eb c7		 jmp	 SHORT $LN2@clearEntri
$LN1@clearEntri:

; 316  :     pObj->freelistProfilerContext = NULL;

  0008f	48 8b 44 24 40	 mov	 rax, QWORD PTR pObj$[rsp]
  00094	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 317  : }

  0009c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a0	c3		 ret	 0
clearEntries ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$freeEntry DD imagerel freeEntry
	DD	imagerel freeEntry+80
	DD	imagerel $unwind$freeEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$freeEntry DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT freeEntry
_TEXT	SEGMENT
entry$ = 32
header$ = 64
arg$ = 72
freeEntry PROC						; COMDAT

; 294  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 295  :     ProfilerEntry *entry = (ProfilerEntry*) header;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR header$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR entry$[rsp], rax

; 296  :     RotatingTree_Enum(entry->calls, freeSubEntry, NULL);

  00018	45 33 c0	 xor	 r8d, r8d
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:freeSubEntry
  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR entry$[rsp]
  00027	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  0002b	e8 00 00 00 00	 call	 RotatingTree_Enum

; 297  :     Py_DECREF(entry->userObj);

  00030	48 8b 44 24 20	 mov	 rax, QWORD PTR entry$[rsp]
  00035	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00039	e8 00 00 00 00	 call	 _Py_DecRef

; 298  :     free(entry);

  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR entry$[rsp]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 299  :     return 0;

  00049	33 c0		 xor	 eax, eax

; 300  : }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
freeEntry ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$freeSubEntry DD imagerel freeSubEntry
	DD	imagerel freeSubEntry+42
	DD	imagerel $unwind$freeSubEntry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$freeSubEntry DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT freeSubEntry
_TEXT	SEGMENT
subentry$ = 32
header$ = 64
arg$ = 72
freeSubEntry PROC					; COMDAT

; 287  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 288  :     ProfilerSubEntry *subentry = (ProfilerSubEntry*) header;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR header$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR subentry$[rsp], rax

; 289  :     free(subentry);

  00018	48 8b 4c 24 20	 mov	 rcx, QWORD PTR subentry$[rsp]
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 290  :     return 0;

  00023	33 c0		 xor	 eax, eax

; 291  : }

  00025	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00029	c3		 ret	 0
freeSubEntry ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$profiler_dealloc DD imagerel profiler_dealloc
	DD	imagerel profiler_dealloc+116
	DD	imagerel $unwind$profiler_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT profiler_dealloc
_TEXT	SEGMENT
op$ = 48
profiler_dealloc PROC					; COMDAT

; 750  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 751  :     if (op->flags & POF_ENABLED)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00011	83 e0 01	 and	 eax, 1
  00014	85 c0		 test	 eax, eax
  00016	74 09		 je	 SHORT $LN5@profiler_d@2

; 752  :         PyEval_SetProfile(NULL, NULL);

  00018	33 d2		 xor	 edx, edx
  0001a	33 c9		 xor	 ecx, ecx
  0001c	e8 00 00 00 00	 call	 PyEval_SetProfile
$LN5@profiler_d@2:

; 753  :     flush_unmatched(op);

  00021	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00026	e8 00 00 00 00	 call	 flush_unmatched

; 754  :     clearEntries(op);

  0002b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00030	e8 00 00 00 00	 call	 clearEntries
$LN4@profiler_d@2:

; 755  :     Py_XDECREF(op->externalTimer);

  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0003a	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00042	74 11		 je	 SHORT $LN1@profiler_d@2
  00044	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00049	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00050	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@profiler_d@2:
  00055	33 c0		 xor	 eax, eax
  00057	85 c0		 test	 eax, eax
  00059	75 da		 jne	 SHORT $LN4@profiler_d@2

; 756  :     Py_TYPE(op)->tp_free(op);

  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00060	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00064	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00069	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 757  : }

  0006f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00073	c3		 ret	 0
profiler_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@NKOCNIKC@?$HMOdii?3Profiler?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$profiler_init DD imagerel profiler_init
	DD	imagerel profiler_init+309
	DD	imagerel $unwind$profiler_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profiler_init DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0P@NKOCNIKC@?$HMOdii?3Profiler?$AA@
CONST	SEGMENT
??_C@_0P@NKOCNIKC@?$HMOdii?3Profiler?$AA@ DB '|Odii:Profiler', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT profiler_init
_TEXT	SEGMENT
timeunit$ = 64
subcalls$ = 72
timer$ = 80
builtins$ = 88
o$ = 96
pObj$ = 128
args$ = 136
kw$ = 144
profiler_init PROC					; COMDAT

; 761  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 762  :     PyObject *o;
; 763  :     PyObject *timer = NULL;

  00013	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR timer$[rsp], 0

; 764  :     double timeunit = 0.0;

  0001c	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00020	f2 0f 11 44 24
	40		 movsdx	 QWORD PTR timeunit$[rsp], xmm0

; 765  :     int subcalls = 1;

  00026	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR subcalls$[rsp], 1

; 766  :     int builtins = 1;

  0002e	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR builtins$[rsp], 1

; 767  :     static char *kwlist[] = {"timer", "timeunit",
; 768  :                                    "subcalls", "builtins", 0};
; 769  : 
; 770  :     if (!PyArg_ParseTupleAndKeywords(args, kw, "|Odii:Profiler", kwlist,
; 771  :                                      &timer, &timeunit,
; 772  :                                      &subcalls, &builtins))

  00036	48 8d 44 24 58	 lea	 rax, QWORD PTR builtins$[rsp]
  0003b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00040	48 8d 44 24 48	 lea	 rax, QWORD PTR subcalls$[rsp]
  00045	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0004a	48 8d 44 24 40	 lea	 rax, QWORD PTR timeunit$[rsp]
  0004f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00054	48 8d 44 24 50	 lea	 rax, QWORD PTR timer$[rsp]
  00059	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??profiler_init@@9@9
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@NKOCNIKC@?$HMOdii?3Profiler?$AA@
  0006c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR kw$[rsp]
  00074	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0007c	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00081	85 c0		 test	 eax, eax
  00083	75 0a		 jne	 SHORT $LN11@profiler_i

; 773  :         return -1;

  00085	b8 ff ff ff ff	 mov	 eax, -1
  0008a	e9 a1 00 00 00	 jmp	 $LN12@profiler_i
$LN11@profiler_i:

; 774  : 
; 775  :     if (setSubcalls(pObj, subcalls) < 0 || setBuiltins(pObj, builtins) < 0)

  0008f	8b 54 24 48	 mov	 edx, DWORD PTR subcalls$[rsp]
  00093	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pObj$[rsp]
  0009b	e8 00 00 00 00	 call	 setSubcalls
  000a0	85 c0		 test	 eax, eax
  000a2	7c 15		 jl	 SHORT $LN9@profiler_i
  000a4	8b 54 24 58	 mov	 edx, DWORD PTR builtins$[rsp]
  000a8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pObj$[rsp]
  000b0	e8 00 00 00 00	 call	 setBuiltins
  000b5	85 c0		 test	 eax, eax
  000b7	7d 07		 jge	 SHORT $LN10@profiler_i
$LN9@profiler_i:

; 776  :         return -1;

  000b9	b8 ff ff ff ff	 mov	 eax, -1
  000be	eb 70		 jmp	 SHORT $LN12@profiler_i
$LN10@profiler_i:

; 777  :     o = pObj->externalTimer;

  000c0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pObj$[rsp]
  000c8	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000cf	48 89 44 24 60	 mov	 QWORD PTR o$[rsp], rax

; 778  :     pObj->externalTimer = timer;

  000d4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pObj$[rsp]
  000dc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR timer$[rsp]
  000e1	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN8@profiler_i:

; 779  :     Py_XINCREF(timer);

  000e8	48 83 7c 24 50
	00		 cmp	 QWORD PTR timer$[rsp], 0
  000ee	74 0a		 je	 SHORT $LN5@profiler_i
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR timer$[rsp]
  000f5	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@profiler_i:
  000fa	33 c0		 xor	 eax, eax
  000fc	85 c0		 test	 eax, eax
  000fe	75 e8		 jne	 SHORT $LN8@profiler_i
$LN4@profiler_i:

; 780  :     Py_XDECREF(o);

  00100	48 83 7c 24 60
	00		 cmp	 QWORD PTR o$[rsp], 0
  00106	74 0a		 je	 SHORT $LN1@profiler_i
  00108	48 8b 4c 24 60	 mov	 rcx, QWORD PTR o$[rsp]
  0010d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@profiler_i:
  00112	33 c0		 xor	 eax, eax
  00114	85 c0		 test	 eax, eax
  00116	75 e8		 jne	 SHORT $LN4@profiler_i

; 781  :     pObj->externalTimerUnit = timeunit;

  00118	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pObj$[rsp]
  00120	f2 0f 10 44 24
	40		 movsdx	 xmm0, QWORD PTR timeunit$[rsp]
  00126	f2 0f 11 80 88
	00 00 00	 movsdx	 QWORD PTR [rax+136], xmm0

; 782  :     return 0;

  0012e	33 c0		 xor	 eax, eax
$LN12@profiler_i:

; 783  : }

  00130	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00134	c3		 ret	 0
profiler_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@NMFAJMGG@profiler_subentry?$AA@	; `string'
PUBLIC	??_C@_0P@DFCNAOEL@profiler_entry?$AA@		; `string'
PUBLIC	??_C@_08JAEFKDLJ@Profiler?$AA@			; `string'
PUBLIC	PyInit__lsprof
EXTRN	PyTuple_New:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyStructSequence_InitType:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
_BSS	SEGMENT
initialized DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__lsprof DD imagerel $LN6
	DD	imagerel $LN6+256
	DD	imagerel $unwind$PyInit__lsprof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__lsprof DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BC@NMFAJMGG@profiler_subentry?$AA@
CONST	SEGMENT
??_C@_0BC@NMFAJMGG@profiler_subentry?$AA@ DB 'profiler_subentry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DFCNAOEL@profiler_entry?$AA@
CONST	SEGMENT
??_C@_0P@DFCNAOEL@profiler_entry?$AA@ DB 'profiler_entry', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JAEFKDLJ@Profiler?$AA@
CONST	SEGMENT
??_C@_08JAEFKDLJ@Profiler?$AA@ DB 'Profiler', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit__lsprof
_TEXT	SEGMENT
module$ = 32
d$ = 40
PyInit__lsprof PROC					; COMDAT

; 868  : {

$LN6:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 869  :     PyObject *module, *d;
; 870  :     module = PyModule_Create(&_lsprofmodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_lsprofmodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 20	 mov	 QWORD PTR module$[rsp], rax

; 871  :     if (module == NULL)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR module$[rsp], 0
  00020	75 07		 jne	 SHORT $LN3@PyInit__ls

; 872  :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 d2 00 00 00	 jmp	 $LN4@PyInit__ls
$LN3@PyInit__ls:

; 873  :     d = PyModule_GetDict(module);

  00029	48 8b 4c 24 20	 mov	 rcx, QWORD PTR module$[rsp]
  0002e	e8 00 00 00 00	 call	 PyModule_GetDict
  00033	48 89 44 24 28	 mov	 QWORD PTR d$[rsp], rax

; 874  :     if (PyType_Ready(&PyProfiler_Type) < 0)

  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyProfiler_Type
  0003f	e8 00 00 00 00	 call	 PyType_Ready
  00044	85 c0		 test	 eax, eax
  00046	7d 07		 jge	 SHORT $LN2@PyInit__ls

; 875  :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 ac 00 00 00	 jmp	 $LN4@PyInit__ls
$LN2@PyInit__ls:

; 876  :     PyDict_SetItemString(d, "Profiler", (PyObject *)&PyProfiler_Type);

  0004f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyProfiler_Type
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08JAEFKDLJ@Profiler?$AA@
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00062	e8 00 00 00 00	 call	 PyDict_SetItemString

; 877  : 
; 878  :     if (!initialized) {

  00067	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR initialized, 0
  0006e	75 26		 jne	 SHORT $LN1@PyInit__ls

; 879  :         PyStructSequence_InitType(&StatsEntryType,
; 880  :                                   &profiler_entry_desc);

  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:profiler_entry_desc
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StatsEntryType
  0007e	e8 00 00 00 00	 call	 PyStructSequence_InitType

; 881  :         PyStructSequence_InitType(&StatsSubEntryType,
; 882  :                                   &profiler_subentry_desc);

  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:profiler_subentry_desc
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StatsSubEntryType
  00091	e8 00 00 00 00	 call	 PyStructSequence_InitType
$LN1@PyInit__ls:

; 883  :     }
; 884  :     Py_INCREF((PyObject*) &StatsEntryType);

  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StatsEntryType
  0009d	e8 00 00 00 00	 call	 _Py_IncRef

; 885  :     Py_INCREF((PyObject*) &StatsSubEntryType);

  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:StatsSubEntryType
  000a9	e8 00 00 00 00	 call	 _Py_IncRef

; 886  :     PyModule_AddObject(module, "profiler_entry",
; 887  :                        (PyObject*) &StatsEntryType);

  000ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:StatsEntryType
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@DFCNAOEL@profiler_entry?$AA@
  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR module$[rsp]
  000c1	e8 00 00 00 00	 call	 PyModule_AddObject

; 888  :     PyModule_AddObject(module, "profiler_subentry",
; 889  :                        (PyObject*) &StatsSubEntryType);

  000c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:StatsSubEntryType
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@NMFAJMGG@profiler_subentry?$AA@
  000d4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR module$[rsp]
  000d9	e8 00 00 00 00	 call	 PyModule_AddObject

; 890  :     empty_tuple = PyTuple_New(0);

  000de	33 c9		 xor	 ecx, ecx
  000e0	e8 00 00 00 00	 call	 PyTuple_New
  000e5	48 89 05 00 00
	00 00		 mov	 QWORD PTR empty_tuple, rax

; 891  :     initialized = 1;

  000ec	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR initialized, 1

; 892  :     return module;

  000f6	48 8b 44 24 20	 mov	 rax, QWORD PTR module$[rsp]
$LN4@PyInit__ls:

; 893  : }

  000fb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ff	c3		 ret	 0
PyInit__lsprof ENDP
_TEXT	ENDS
END
