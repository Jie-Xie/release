; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
random_stream DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
random_value DD	01H
_DATA	ENDS
PUBLIC	RotatingTree_Add
; Function compile flags: /Odtp
; File c:\src\pyparallel\modules\rotatingtree.c
;	COMDAT RotatingTree_Add
_TEXT	SEGMENT
root$ = 8
node$ = 16
RotatingTree_Add PROC					; COMDAT

; 32   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@RotatingTr:

; 33   :     while (*root != NULL) {

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR root$[rsp]
  0000f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00013	74 3b		 je	 SHORT $LN3@RotatingTr

; 34   :         if (KEY_LOWER_THAN(node->key, (*root)->key))

  00015	48 8b 44 24 08	 mov	 rax, QWORD PTR root$[rsp]
  0001a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR node$[rsp]
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00028	73 13		 jae	 SHORT $LN2@RotatingTr

; 35   :             root = &((*root)->left);

  0002a	48 8b 44 24 08	 mov	 rax, QWORD PTR root$[rsp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 83 c0 08	 add	 rax, 8
  00036	48 89 44 24 08	 mov	 QWORD PTR root$[rsp], rax

; 36   :         else

  0003b	eb 11		 jmp	 SHORT $LN1@RotatingTr
$LN2@RotatingTr:

; 37   :             root = &((*root)->right);

  0003d	48 8b 44 24 08	 mov	 rax, QWORD PTR root$[rsp]
  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 83 c0 10	 add	 rax, 16
  00049	48 89 44 24 08	 mov	 QWORD PTR root$[rsp], rax
$LN1@RotatingTr:

; 38   :     }

  0004e	eb ba		 jmp	 SHORT $LN4@RotatingTr
$LN3@RotatingTr:

; 39   :     node->left = NULL;

  00050	48 8b 44 24 10	 mov	 rax, QWORD PTR node$[rsp]
  00055	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 40   :     node->right = NULL;

  0005d	48 8b 44 24 10	 mov	 rax, QWORD PTR node$[rsp]
  00062	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 41   :     *root = node;

  0006a	48 8b 44 24 08	 mov	 rax, QWORD PTR root$[rsp]
  0006f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR node$[rsp]
  00074	48 89 08	 mov	 QWORD PTR [rax], rcx

; 42   : }

  00077	c3		 ret	 0
RotatingTree_Add ENDP
_TEXT	ENDS
PUBLIC	RotatingTree_Get
;	COMDAT pdata
pdata	SEGMENT
$pdata$RotatingTree_Get DD imagerel $LN24
	DD	imagerel $LN24+476
	DD	imagerel $unwind$RotatingTree_Get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RotatingTree_Get DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT RotatingTree_Get
_TEXT	SEGMENT
node$3404 = 32
rotate$3419 = 40
pnode$3416 = 48
next$3418 = 56
node$3417 = 64
tv78 = 72
root$ = 96
key$ = 104
RotatingTree_Get PROC					; COMDAT

; 49   : {

$LN24:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 50   :     if (randombits(3) != 4) {

  0000e	b9 03 00 00 00	 mov	 ecx, 3
  00013	e8 00 00 00 00	 call	 randombits
  00018	83 f8 04	 cmp	 eax, 4
  0001b	74 69		 je	 SHORT $LN19@RotatingTr@2

; 51   :         /* Fast path, no rebalancing */
; 52   :         rotating_node_t *node = *root;

  0001d	48 8b 44 24 60	 mov	 rax, QWORD PTR root$[rsp]
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 89 44 24 20	 mov	 QWORD PTR node$3404[rsp], rax
$LN18@RotatingTr@2:

; 53   :         while (node != NULL) {

  0002a	48 83 7c 24 20
	00		 cmp	 QWORD PTR node$3404[rsp], 0
  00030	74 48		 je	 SHORT $LN17@RotatingTr@2

; 54   :             if (node->key == key)

  00032	48 8b 44 24 20	 mov	 rax, QWORD PTR node$3404[rsp]
  00037	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  0003c	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0003f	75 0a		 jne	 SHORT $LN16@RotatingTr@2

; 55   :                 return node;

  00041	48 8b 44 24 20	 mov	 rax, QWORD PTR node$3404[rsp]
  00046	e9 8c 01 00 00	 jmp	 $LN20@RotatingTr@2
$LN16@RotatingTr@2:

; 56   :             if (KEY_LOWER_THAN(key, node->key))

  0004b	48 8b 44 24 20	 mov	 rax, QWORD PTR node$3404[rsp]
  00050	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00053	48 39 44 24 68	 cmp	 QWORD PTR key$[rsp], rax
  00058	73 10		 jae	 SHORT $LN15@RotatingTr@2

; 57   :                 node = node->left;

  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR node$3404[rsp]
  0005f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00063	48 89 44 24 20	 mov	 QWORD PTR node$3404[rsp], rax

; 58   :             else

  00068	eb 0e		 jmp	 SHORT $LN14@RotatingTr@2
$LN15@RotatingTr@2:

; 59   :                 node = node->right;

  0006a	48 8b 44 24 20	 mov	 rax, QWORD PTR node$3404[rsp]
  0006f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00073	48 89 44 24 20	 mov	 QWORD PTR node$3404[rsp], rax
$LN14@RotatingTr@2:

; 60   :         }

  00078	eb b0		 jmp	 SHORT $LN18@RotatingTr@2
$LN17@RotatingTr@2:

; 61   :         return NULL;

  0007a	33 c0		 xor	 eax, eax
  0007c	e9 56 01 00 00	 jmp	 $LN20@RotatingTr@2

; 62   :     }
; 63   :     else {

  00081	e9 51 01 00 00	 jmp	 $LN13@RotatingTr@2
$LN19@RotatingTr@2:

; 64   :         rotating_node_t **pnode = root;

  00086	48 8b 44 24 60	 mov	 rax, QWORD PTR root$[rsp]
  0008b	48 89 44 24 30	 mov	 QWORD PTR pnode$3416[rsp], rax

; 65   :         rotating_node_t *node = *pnode;

  00090	48 8b 44 24 30	 mov	 rax, QWORD PTR pnode$3416[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 89 44 24 40	 mov	 QWORD PTR node$3417[rsp], rax

; 66   :         rotating_node_t *next;
; 67   :         int rotate;
; 68   :         if (node == NULL)

  0009d	48 83 7c 24 40
	00		 cmp	 QWORD PTR node$3417[rsp], 0
  000a3	75 07		 jne	 SHORT $LN12@RotatingTr@2

; 69   :             return NULL;

  000a5	33 c0		 xor	 eax, eax
  000a7	e9 2b 01 00 00	 jmp	 $LN20@RotatingTr@2
$LN12@RotatingTr@2:
$LN11@RotatingTr@2:

; 70   :         while (1) {

  000ac	33 c0		 xor	 eax, eax
  000ae	83 f8 01	 cmp	 eax, 1
  000b1	0f 84 20 01 00
	00		 je	 $LN10@RotatingTr@2

; 71   :             if (node->key == key)

  000b7	48 8b 44 24 40	 mov	 rax, QWORD PTR node$3417[rsp]
  000bc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  000c1	48 39 08	 cmp	 QWORD PTR [rax], rcx
  000c4	75 0a		 jne	 SHORT $LN9@RotatingTr@2

; 72   :                 return node;

  000c6	48 8b 44 24 40	 mov	 rax, QWORD PTR node$3417[rsp]
  000cb	e9 07 01 00 00	 jmp	 $LN20@RotatingTr@2
$LN9@RotatingTr@2:

; 73   :             rotate = !randombits(1);

  000d0	b9 01 00 00 00	 mov	 ecx, 1
  000d5	e8 00 00 00 00	 call	 randombits
  000da	85 c0		 test	 eax, eax
  000dc	75 0a		 jne	 SHORT $LN22@RotatingTr@2
  000de	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  000e6	eb 08		 jmp	 SHORT $LN23@RotatingTr@2
$LN22@RotatingTr@2:
  000e8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN23@RotatingTr@2:
  000f0	8b 44 24 48	 mov	 eax, DWORD PTR tv78[rsp]
  000f4	89 44 24 28	 mov	 DWORD PTR rotate$3419[rsp], eax

; 74   :             if (KEY_LOWER_THAN(key, node->key)) {

  000f8	48 8b 44 24 40	 mov	 rax, QWORD PTR node$3417[rsp]
  000fd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00100	48 39 44 24 68	 cmp	 QWORD PTR key$[rsp], rax
  00105	73 63		 jae	 SHORT $LN8@RotatingTr@2

; 75   :                 next = node->left;

  00107	48 8b 44 24 40	 mov	 rax, QWORD PTR node$3417[rsp]
  0010c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00110	48 89 44 24 38	 mov	 QWORD PTR next$3418[rsp], rax

; 76   :                 if (next == NULL)

  00115	48 83 7c 24 38
	00		 cmp	 QWORD PTR next$3418[rsp], 0
  0011b	75 07		 jne	 SHORT $LN7@RotatingTr@2

; 77   :                     return NULL;

  0011d	33 c0		 xor	 eax, eax
  0011f	e9 b3 00 00 00	 jmp	 $LN20@RotatingTr@2
$LN7@RotatingTr@2:

; 78   :                 if (rotate) {

  00124	83 7c 24 28 00	 cmp	 DWORD PTR rotate$3419[rsp], 0
  00129	74 2f		 je	 SHORT $LN6@RotatingTr@2

; 79   :                     node->left = next->right;

  0012b	48 8b 44 24 40	 mov	 rax, QWORD PTR node$3417[rsp]
  00130	48 8b 4c 24 38	 mov	 rcx, QWORD PTR next$3418[rsp]
  00135	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00139	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 80   :                     next->right = node;

  0013d	48 8b 44 24 38	 mov	 rax, QWORD PTR next$3418[rsp]
  00142	48 8b 4c 24 40	 mov	 rcx, QWORD PTR node$3417[rsp]
  00147	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 81   :                     *pnode = next;

  0014b	48 8b 44 24 30	 mov	 rax, QWORD PTR pnode$3416[rsp]
  00150	48 8b 4c 24 38	 mov	 rcx, QWORD PTR next$3418[rsp]
  00155	48 89 08	 mov	 QWORD PTR [rax], rcx

; 82   :                 }
; 83   :                 else

  00158	eb 0e		 jmp	 SHORT $LN5@RotatingTr@2
$LN6@RotatingTr@2:

; 84   :                     pnode = &(node->left);

  0015a	48 8b 44 24 40	 mov	 rax, QWORD PTR node$3417[rsp]
  0015f	48 83 c0 08	 add	 rax, 8
  00163	48 89 44 24 30	 mov	 QWORD PTR pnode$3416[rsp], rax
$LN5@RotatingTr@2:

; 85   :             }
; 86   :             else {

  00168	eb 5e		 jmp	 SHORT $LN4@RotatingTr@2
$LN8@RotatingTr@2:

; 87   :                 next = node->right;

  0016a	48 8b 44 24 40	 mov	 rax, QWORD PTR node$3417[rsp]
  0016f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00173	48 89 44 24 38	 mov	 QWORD PTR next$3418[rsp], rax

; 88   :                 if (next == NULL)

  00178	48 83 7c 24 38
	00		 cmp	 QWORD PTR next$3418[rsp], 0
  0017e	75 04		 jne	 SHORT $LN3@RotatingTr@2

; 89   :                     return NULL;

  00180	33 c0		 xor	 eax, eax
  00182	eb 53		 jmp	 SHORT $LN20@RotatingTr@2
$LN3@RotatingTr@2:

; 90   :                 if (rotate) {

  00184	83 7c 24 28 00	 cmp	 DWORD PTR rotate$3419[rsp], 0
  00189	74 2f		 je	 SHORT $LN2@RotatingTr@2

; 91   :                     node->right = next->left;

  0018b	48 8b 44 24 40	 mov	 rax, QWORD PTR node$3417[rsp]
  00190	48 8b 4c 24 38	 mov	 rcx, QWORD PTR next$3418[rsp]
  00195	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00199	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 92   :                     next->left = node;

  0019d	48 8b 44 24 38	 mov	 rax, QWORD PTR next$3418[rsp]
  001a2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR node$3417[rsp]
  001a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 93   :                     *pnode = next;

  001ab	48 8b 44 24 30	 mov	 rax, QWORD PTR pnode$3416[rsp]
  001b0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR next$3418[rsp]
  001b5	48 89 08	 mov	 QWORD PTR [rax], rcx

; 94   :                 }
; 95   :                 else

  001b8	eb 0e		 jmp	 SHORT $LN1@RotatingTr@2
$LN2@RotatingTr@2:

; 96   :                     pnode = &(node->right);

  001ba	48 8b 44 24 40	 mov	 rax, QWORD PTR node$3417[rsp]
  001bf	48 83 c0 10	 add	 rax, 16
  001c3	48 89 44 24 30	 mov	 QWORD PTR pnode$3416[rsp], rax
$LN1@RotatingTr@2:
$LN4@RotatingTr@2:

; 97   :             }
; 98   :             node = next;

  001c8	48 8b 44 24 38	 mov	 rax, QWORD PTR next$3418[rsp]
  001cd	48 89 44 24 40	 mov	 QWORD PTR node$3417[rsp], rax

; 99   :         }

  001d2	e9 d5 fe ff ff	 jmp	 $LN11@RotatingTr@2
$LN10@RotatingTr@2:
$LN13@RotatingTr@2:
$LN20@RotatingTr@2:

; 100  :     }
; 101  : }

  001d7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001db	c3		 ret	 0
RotatingTree_Get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$randombits DD imagerel randombits
	DD	imagerel randombits+134
	DD	imagerel $unwind$randombits
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$randombits DD 010801H
	DD	02208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT randombits
_TEXT	SEGMENT
result$ = 0
tv77 = 4
tv83 = 8
bits$ = 32
randombits PROC						; COMDAT

; 16   : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 17   :     int result;
; 18   :     if (random_stream < (1U << bits)) {

  00008	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  0000c	b9 01 00 00 00	 mov	 ecx, 1
  00011	89 4c 24 04	 mov	 DWORD PTR tv77[rsp], ecx
  00015	0f b6 c8	 movzx	 ecx, al
  00018	8b 44 24 04	 mov	 eax, DWORD PTR tv77[rsp]
  0001c	d3 e0		 shl	 eax, cl
  0001e	39 05 00 00 00
	00		 cmp	 DWORD PTR random_stream, eax
  00024	73 1e		 jae	 SHORT $LN1@randombits

; 19   :         random_value *= 1082527;

  00026	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR random_value
  0002c	69 c0 9f 84 10
	00		 imul	 eax, 1082527		; 0010849fH
  00032	89 05 00 00 00
	00		 mov	 DWORD PTR random_value, eax

; 20   :         random_stream = random_value;

  00038	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR random_value
  0003e	89 05 00 00 00
	00		 mov	 DWORD PTR random_stream, eax
$LN1@randombits:

; 21   :     }
; 22   :     result = random_stream & ((1<<bits)-1);

  00044	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	89 4c 24 08	 mov	 DWORD PTR tv83[rsp], ecx
  00051	0f b6 c8	 movzx	 ecx, al
  00054	8b 44 24 08	 mov	 eax, DWORD PTR tv83[rsp]
  00058	d3 e0		 shl	 eax, cl
  0005a	ff c8		 dec	 eax
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR random_stream
  00062	23 c8		 and	 ecx, eax
  00064	8b c1		 mov	 eax, ecx
  00066	89 04 24	 mov	 DWORD PTR result$[rsp], eax

; 23   :     random_stream >>= bits;

  00069	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  0006d	0f b6 c8	 movzx	 ecx, al
  00070	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR random_stream
  00076	d3 e8		 shr	 eax, cl
  00078	89 05 00 00 00
	00		 mov	 DWORD PTR random_stream, eax

; 24   :     return result;

  0007e	8b 04 24	 mov	 eax, DWORD PTR result$[rsp]

; 25   : }

  00081	48 83 c4 18	 add	 rsp, 24
  00085	c3		 ret	 0
randombits ENDP
_TEXT	ENDS
PUBLIC	RotatingTree_Enum
;	COMDAT pdata
pdata	SEGMENT
$pdata$RotatingTree_Enum DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$RotatingTree_Enum
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RotatingTree_Enum DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT RotatingTree_Enum
_TEXT	SEGMENT
result$ = 32
node$ = 40
root$ = 64
enumfn$ = 72
arg$ = 80
RotatingTree_Enum PROC					; COMDAT

; 109  : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@RotatingTr@3:

; 110  :     int result;
; 111  :     rotating_node_t *node;
; 112  :     while (root != NULL) {

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR root$[rsp], 0
  00019	74 62		 je	 SHORT $LN3@RotatingTr@3

; 113  :         result = RotatingTree_Enum(root->left, enumfn, arg);

  0001b	4c 8b 44 24 50	 mov	 r8, QWORD PTR arg$[rsp]
  00020	48 8b 54 24 48	 mov	 rdx, QWORD PTR enumfn$[rsp]
  00025	48 8b 44 24 40	 mov	 rax, QWORD PTR root$[rsp]
  0002a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0002e	e8 00 00 00 00	 call	 RotatingTree_Enum
  00033	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 114  :         if (result != 0) return result;

  00037	83 7c 24 20 00	 cmp	 DWORD PTR result$[rsp], 0
  0003c	74 06		 je	 SHORT $LN2@RotatingTr@3
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]
  00042	eb 3b		 jmp	 SHORT $LN5@RotatingTr@3
$LN2@RotatingTr@3:

; 115  :         node = root->right;

  00044	48 8b 44 24 40	 mov	 rax, QWORD PTR root$[rsp]
  00049	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0004d	48 89 44 24 28	 mov	 QWORD PTR node$[rsp], rax

; 116  :         result = enumfn(root, arg);

  00052	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR root$[rsp]
  0005c	ff 54 24 48	 call	 QWORD PTR enumfn$[rsp]
  00060	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 117  :         if (result != 0) return result;

  00064	83 7c 24 20 00	 cmp	 DWORD PTR result$[rsp], 0
  00069	74 06		 je	 SHORT $LN1@RotatingTr@3
  0006b	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]
  0006f	eb 0e		 jmp	 SHORT $LN5@RotatingTr@3
$LN1@RotatingTr@3:

; 118  :         root = node;

  00071	48 8b 44 24 28	 mov	 rax, QWORD PTR node$[rsp]
  00076	48 89 44 24 40	 mov	 QWORD PTR root$[rsp], rax

; 119  :     }

  0007b	eb 96		 jmp	 SHORT $LN4@RotatingTr@3
$LN3@RotatingTr@3:

; 120  :     return 0;

  0007d	33 c0		 xor	 eax, eax
$LN5@RotatingTr@3:

; 121  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
RotatingTree_Enum ENDP
_TEXT	ENDS
END
