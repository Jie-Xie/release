; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	PyNode_ListTree
EXTRN	__imp___iob_func:PROC
;	COMDAT pdata
; File c:\src\pyparallel\parser\listnode.c
pdata	SEGMENT
$pdata$PyNode_ListTree DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$PyNode_ListTree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyNode_ListTree DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyNode_ListTree
_TEXT	SEGMENT
n$ = 48
PyNode_ListTree PROC					; COMDAT

; 14   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 15   :     listnode(stdout, n);

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0000f	48 83 c0 30	 add	 rax, 48			; 00000030H
  00013	48 8b 54 24 30	 mov	 rdx, QWORD PTR n$[rsp]
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 listnode

; 16   : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
PyNode_ListTree ENDP
_TEXT	ENDS
_BSS	SEGMENT
atbol	DD	01H DUP (?)
level	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$listnode DD imagerel listnode
	DD	imagerel listnode+54
	DD	imagerel $unwind$listnode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$listnode DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT listnode
_TEXT	SEGMENT
fp$ = 48
n$ = 56
listnode PROC						; COMDAT

; 22   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 23   :     level = 0;

  0000e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR level, 0

; 24   :     atbol = 1;

  00018	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR atbol, 1

; 25   :     list1node(fp, n);

  00022	48 8b 54 24 38	 mov	 rdx, QWORD PTR n$[rsp]
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fp$[rsp]
  0002c	e8 00 00 00 00	 call	 list1node

; 26   : }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
listnode ENDP
_TEXT	ENDS
PUBLIC	??_C@_02LKANKAOC@?$DP?5?$AA@			; `string'
PUBLIC	??_C@_03IKGEINEE@?$CFs?5?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_01GPOEFGEJ@?7?$AA@			; `string'
EXTRN	__imp_fprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$list1node DD imagerel list1node
	DD	imagerel list1node+404
	DD	imagerel $unwind$list1node
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$list1node DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_02LKANKAOC@?$DP?5?$AA@
CONST	SEGMENT
??_C@_02LKANKAOC@?$DP?5?$AA@ DB '? ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKGEINEE@?$CFs?5?$AA@
CONST	SEGMENT
??_C@_03IKGEINEE@?$CFs?5?$AA@ DB '%s ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GPOEFGEJ@?7?$AA@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7?$AA@ DB 09H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT list1node
_TEXT	SEGMENT
i$20446 = 32
i$20460 = 36
tv79 = 40
fp$ = 64
n$ = 72
list1node PROC						; COMDAT

; 30   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 31   :     if (n == 0)

  0000e	48 83 7c 24 48
	00		 cmp	 QWORD PTR n$[rsp], 0
  00014	75 05		 jne	 SHORT $LN20@list1node

; 32   :         return;

  00016	e9 74 01 00 00	 jmp	 $LN21@list1node
$LN20@list1node:

; 33   :     if (ISNONTERMINAL(TYPE(n))) {

  0001b	48 8b 44 24 48	 mov	 rax, QWORD PTR n$[rsp]
  00020	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00023	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00028	7c 48		 jl	 SHORT $LN19@list1node

; 34   :         int i;
; 35   :         for (i = 0; i < NCH(n); i++)

  0002a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$20446[rsp], 0
  00032	eb 0a		 jmp	 SHORT $LN18@list1node
$LN17@list1node:
  00034	8b 44 24 20	 mov	 eax, DWORD PTR i$20446[rsp]
  00038	ff c0		 inc	 eax
  0003a	89 44 24 20	 mov	 DWORD PTR i$20446[rsp], eax
$LN18@list1node:
  0003e	48 8b 44 24 48	 mov	 rax, QWORD PTR n$[rsp]
  00043	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00046	39 44 24 20	 cmp	 DWORD PTR i$20446[rsp], eax
  0004a	7d 21		 jge	 SHORT $LN16@list1node

; 36   :             list1node(fp, CHILD(n, i));

  0004c	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$20446[rsp]
  00051	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00055	48 8b 4c 24 48	 mov	 rcx, QWORD PTR n$[rsp]
  0005a	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0005e	48 8b d0	 mov	 rdx, rax
  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  00066	e8 00 00 00 00	 call	 list1node
  0006b	eb c7		 jmp	 SHORT $LN17@list1node
$LN16@list1node:

; 37   :     }
; 38   :     else if (ISTERMINAL(TYPE(n))) {

  0006d	e9 1d 01 00 00	 jmp	 $LN15@list1node
$LN19@list1node:
  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR n$[rsp]
  00077	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0007a	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0007f	0f 8d f8 00 00
	00		 jge	 $LN14@list1node

; 39   :         switch (TYPE(n)) {

  00085	48 8b 44 24 48	 mov	 rax, QWORD PTR n$[rsp]
  0008a	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0008d	89 44 24 28	 mov	 DWORD PTR tv79[rsp], eax
  00091	83 7c 24 28 05	 cmp	 DWORD PTR tv79[rsp], 5
  00096	74 09		 je	 SHORT $LN11@list1node
  00098	83 7c 24 28 06	 cmp	 DWORD PTR tv79[rsp], 6
  0009d	74 15		 je	 SHORT $LN10@list1node
  0009f	eb 26		 jmp	 SHORT $LN9@list1node
$LN11@list1node:

; 40   :         case INDENT:
; 41   :             ++level;

  000a1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR level
  000a7	ff c0		 inc	 eax
  000a9	89 05 00 00 00
	00		 mov	 DWORD PTR level, eax

; 42   :             break;

  000af	e9 c7 00 00 00	 jmp	 $LN12@list1node
$LN10@list1node:

; 43   :         case DEDENT:
; 44   :             --level;

  000b4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR level
  000ba	ff c8		 dec	 eax
  000bc	89 05 00 00 00
	00		 mov	 DWORD PTR level, eax

; 45   :             break;

  000c2	e9 b4 00 00 00	 jmp	 $LN12@list1node
$LN9@list1node:

; 46   :         default:
; 47   :             if (atbol) {

  000c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR atbol, 0
  000ce	74 3e		 je	 SHORT $LN8@list1node

; 48   :                 int i;
; 49   :                 for (i = 0; i < level; ++i)

  000d0	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$20460[rsp], 0
  000d8	eb 0a		 jmp	 SHORT $LN7@list1node
$LN6@list1node:
  000da	8b 44 24 24	 mov	 eax, DWORD PTR i$20460[rsp]
  000de	ff c0		 inc	 eax
  000e0	89 44 24 24	 mov	 DWORD PTR i$20460[rsp], eax
$LN7@list1node:
  000e4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR level
  000ea	39 44 24 24	 cmp	 DWORD PTR i$20460[rsp], eax
  000ee	7d 14		 jge	 SHORT $LN5@list1node

; 50   :                     fprintf(fp, "\t");

  000f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01GPOEFGEJ@?7?$AA@
  000f7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  00102	eb d6		 jmp	 SHORT $LN6@list1node
$LN5@list1node:

; 51   :                 atbol = 0;

  00104	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR atbol, 0
$LN8@list1node:

; 52   :             }
; 53   :             if (TYPE(n) == NEWLINE) {

  0010e	48 8b 44 24 48	 mov	 rax, QWORD PTR n$[rsp]
  00113	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00116	83 f8 04	 cmp	 eax, 4
  00119	75 45		 jne	 SHORT $LN4@list1node

; 54   :                 if (STR(n) != NULL)

  0011b	48 8b 44 24 48	 mov	 rax, QWORD PTR n$[rsp]
  00120	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00125	74 1b		 je	 SHORT $LN3@list1node

; 55   :                     fprintf(fp, "%s", STR(n));

  00127	48 8b 44 24 48	 mov	 rax, QWORD PTR n$[rsp]
  0012c	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
  00137	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  0013c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
$LN3@list1node:

; 56   :                 fprintf(fp, "\n");

  00142	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00149	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 57   :                 atbol = 1;

  00154	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR atbol, 1

; 58   :             }
; 59   :             else

  0015e	eb 1b		 jmp	 SHORT $LN2@list1node
$LN4@list1node:

; 60   :                 fprintf(fp, "%s ", STR(n));

  00160	48 8b 44 24 48	 mov	 rax, QWORD PTR n$[rsp]
  00165	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00169	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03IKGEINEE@?$CFs?5?$AA@
  00170	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
$LN2@list1node:
$LN12@list1node:

; 61   :             break;
; 62   :         }
; 63   :     }
; 64   :     else

  0017b	eb 12		 jmp	 SHORT $LN1@list1node
$LN14@list1node:

; 65   :         fprintf(fp, "? ");

  0017d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02LKANKAOC@?$DP?5?$AA@
  00184	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
$LN1@list1node:
$LN15@list1node:
$LN21@list1node:

; 66   : }

  0018f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00193	c3		 ret	 0
list1node ENDP
_TEXT	ENDS
END
