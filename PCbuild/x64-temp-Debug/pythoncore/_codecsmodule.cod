; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07HLOOKDPL@_codecs?$AA@			; `string'
PUBLIC	??_C@_0N@FDEJOILE@lookup_error?$AA@		; `string'
PUBLIC	??_C@_0P@LJBCPEIO@register_error?$AA@		; `string'
PUBLIC	??_C@_0BB@JOJINJLI@code_page_decode?$AA@	; `string'
PUBLIC	??_C@_0BB@FCCICCMP@code_page_encode?$AA@	; `string'
PUBLIC	??_C@_0M@IINEDKEP@mbcs_decode?$AA@		; `string'
PUBLIC	??_C@_0M@EEGEMBDI@mbcs_encode?$AA@		; `string'
PUBLIC	??_C@_0BC@FNHAIHFO@readbuffer_encode?$AA@	; `string'
PUBLIC	??_C@_0O@PLABBJMF@charmap_build?$AA@		; `string'
PUBLIC	??_C@_0P@MLHMCICK@charmap_decode?$AA@		; `string'
PUBLIC	??_C@_0P@HMMNDFN@charmap_encode?$AA@		; `string'
PUBLIC	??_C@_0N@CFHLAAHN@ascii_decode?$AA@		; `string'
PUBLIC	??_C@_0N@OJMLPLAK@ascii_encode?$AA@		; `string'
PUBLIC	??_C@_0P@MDDBILAC@latin_1_decode?$AA@		; `string'
PUBLIC	??_C@_0P@PIBHAHF@latin_1_encode?$AA@		; `string'
PUBLIC	??_C@_0BK@JBIIPGL@raw_unicode_escape_decode?$AA@ ; `string'
PUBLIC	??_C@_0BK@MFKIHEBM@raw_unicode_escape_encode?$AA@ ; `string'
PUBLIC	??_C@_0BI@PHPKMMHC@unicode_internal_decode?$AA@	; `string'
PUBLIC	??_C@_0BI@DLEKDHAF@unicode_internal_encode?$AA@	; `string'
PUBLIC	??_C@_0BG@LAIDAKGG@unicode_escape_decode?$AA@	; `string'
PUBLIC	??_C@_0BG@HMDDPBBB@unicode_escape_encode?$AA@	; `string'
PUBLIC	??_C@_0BB@CIBBJCJL@utf_32_ex_decode?$AA@	; `string'
PUBLIC	??_C@_0BB@JHECCMME@utf_32_be_decode?$AA@	; `string'
PUBLIC	??_C@_0BB@IJILBMHH@utf_32_le_decode?$AA@	; `string'
PUBLIC	??_C@_0O@NEKKHNME@utf_32_decode?$AA@		; `string'
PUBLIC	??_C@_0BB@FLPCNHLD@utf_32_be_encode?$AA@	; `string'
PUBLIC	??_C@_0BB@EFDLOHAA@utf_32_le_encode?$AA@	; `string'
PUBLIC	??_C@_0O@BIBKIGLD@utf_32_encode?$AA@		; `string'
PUBLIC	??_C@_0BB@ELELBMKP@utf_16_ex_decode?$AA@	; `string'
PUBLIC	??_C@_0BB@PEBIKCPA@utf_16_be_decode?$AA@	; `string'
PUBLIC	??_C@_0BB@OKNBJCED@utf_16_le_decode?$AA@	; `string'
PUBLIC	??_C@_0O@INLDPMPF@utf_16_decode?$AA@		; `string'
PUBLIC	??_C@_0BB@DIKIFJIH@utf_16_be_encode?$AA@	; `string'
PUBLIC	??_C@_0BB@CGGBGJDE@utf_16_le_encode?$AA@	; `string'
PUBLIC	??_C@_0O@EBADAHIC@utf_16_encode?$AA@		; `string'
PUBLIC	??_C@_0N@ILHHOBGH@utf_7_decode?$AA@		; `string'
PUBLIC	??_C@_0N@EHMHBKBA@utf_7_encode?$AA@		; `string'
PUBLIC	??_C@_0N@FEMOCOLG@utf_8_decode?$AA@		; `string'
PUBLIC	??_C@_0N@JIHONFMB@utf_8_encode?$AA@		; `string'
PUBLIC	??_C@_0O@EOGKMAOG@escape_decode?$AA@		; `string'
PUBLIC	??_C@_0O@ICNKDLJB@escape_encode?$AA@		; `string'
PUBLIC	??_C@_06KPNAMAEI@decode?$AA@			; `string'
PUBLIC	??_C@_06GDGADLDP@encode?$AA@			; `string'
PUBLIC	??_C@_06FNGHPIEM@lookup?$AA@			; `string'
PUBLIC	??_C@_08DHHIDNEP@register?$AA@			; `string'
;	COMDAT ??_C@_07HLOOKDPL@_codecs?$AA@
CONST	SEGMENT
??_C@_07HLOOKDPL@_codecs?$AA@ DB '_codecs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FDEJOILE@lookup_error?$AA@
CONST	SEGMENT
??_C@_0N@FDEJOILE@lookup_error?$AA@ DB 'lookup_error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LJBCPEIO@register_error?$AA@
CONST	SEGMENT
??_C@_0P@LJBCPEIO@register_error?$AA@ DB 'register_error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JOJINJLI@code_page_decode?$AA@
CONST	SEGMENT
??_C@_0BB@JOJINJLI@code_page_decode?$AA@ DB 'code_page_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCCICCMP@code_page_encode?$AA@
CONST	SEGMENT
??_C@_0BB@FCCICCMP@code_page_encode?$AA@ DB 'code_page_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IINEDKEP@mbcs_decode?$AA@
CONST	SEGMENT
??_C@_0M@IINEDKEP@mbcs_decode?$AA@ DB 'mbcs_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EEGEMBDI@mbcs_encode?$AA@
CONST	SEGMENT
??_C@_0M@EEGEMBDI@mbcs_encode?$AA@ DB 'mbcs_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FNHAIHFO@readbuffer_encode?$AA@
CONST	SEGMENT
??_C@_0BC@FNHAIHFO@readbuffer_encode?$AA@ DB 'readbuffer_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PLABBJMF@charmap_build?$AA@
CONST	SEGMENT
??_C@_0O@PLABBJMF@charmap_build?$AA@ DB 'charmap_build', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MLHMCICK@charmap_decode?$AA@
CONST	SEGMENT
??_C@_0P@MLHMCICK@charmap_decode?$AA@ DB 'charmap_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HMMNDFN@charmap_encode?$AA@
CONST	SEGMENT
??_C@_0P@HMMNDFN@charmap_encode?$AA@ DB 'charmap_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CFHLAAHN@ascii_decode?$AA@
CONST	SEGMENT
??_C@_0N@CFHLAAHN@ascii_decode?$AA@ DB 'ascii_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OJMLPLAK@ascii_encode?$AA@
CONST	SEGMENT
??_C@_0N@OJMLPLAK@ascii_encode?$AA@ DB 'ascii_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MDDBILAC@latin_1_decode?$AA@
CONST	SEGMENT
??_C@_0P@MDDBILAC@latin_1_decode?$AA@ DB 'latin_1_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PIBHAHF@latin_1_encode?$AA@
CONST	SEGMENT
??_C@_0P@PIBHAHF@latin_1_encode?$AA@ DB 'latin_1_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JBIIPGL@raw_unicode_escape_decode?$AA@
CONST	SEGMENT
??_C@_0BK@JBIIPGL@raw_unicode_escape_decode?$AA@ DB 'raw_unicode_escape_d'
	DB	'ecode', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MFKIHEBM@raw_unicode_escape_encode?$AA@
CONST	SEGMENT
??_C@_0BK@MFKIHEBM@raw_unicode_escape_encode?$AA@ DB 'raw_unicode_escape_'
	DB	'encode', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PHPKMMHC@unicode_internal_decode?$AA@
CONST	SEGMENT
??_C@_0BI@PHPKMMHC@unicode_internal_decode?$AA@ DB 'unicode_internal_deco'
	DB	'de', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DLEKDHAF@unicode_internal_encode?$AA@
CONST	SEGMENT
??_C@_0BI@DLEKDHAF@unicode_internal_encode?$AA@ DB 'unicode_internal_enco'
	DB	'de', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LAIDAKGG@unicode_escape_decode?$AA@
CONST	SEGMENT
??_C@_0BG@LAIDAKGG@unicode_escape_decode?$AA@ DB 'unicode_escape_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HMDDPBBB@unicode_escape_encode?$AA@
CONST	SEGMENT
??_C@_0BG@HMDDPBBB@unicode_escape_encode?$AA@ DB 'unicode_escape_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CIBBJCJL@utf_32_ex_decode?$AA@
CONST	SEGMENT
??_C@_0BB@CIBBJCJL@utf_32_ex_decode?$AA@ DB 'utf_32_ex_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JHECCMME@utf_32_be_decode?$AA@
CONST	SEGMENT
??_C@_0BB@JHECCMME@utf_32_be_decode?$AA@ DB 'utf_32_be_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IJILBMHH@utf_32_le_decode?$AA@
CONST	SEGMENT
??_C@_0BB@IJILBMHH@utf_32_le_decode?$AA@ DB 'utf_32_le_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NEKKHNME@utf_32_decode?$AA@
CONST	SEGMENT
??_C@_0O@NEKKHNME@utf_32_decode?$AA@ DB 'utf_32_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FLPCNHLD@utf_32_be_encode?$AA@
CONST	SEGMENT
??_C@_0BB@FLPCNHLD@utf_32_be_encode?$AA@ DB 'utf_32_be_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EFDLOHAA@utf_32_le_encode?$AA@
CONST	SEGMENT
??_C@_0BB@EFDLOHAA@utf_32_le_encode?$AA@ DB 'utf_32_le_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BIBKIGLD@utf_32_encode?$AA@
CONST	SEGMENT
??_C@_0O@BIBKIGLD@utf_32_encode?$AA@ DB 'utf_32_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ELELBMKP@utf_16_ex_decode?$AA@
CONST	SEGMENT
??_C@_0BB@ELELBMKP@utf_16_ex_decode?$AA@ DB 'utf_16_ex_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PEBIKCPA@utf_16_be_decode?$AA@
CONST	SEGMENT
??_C@_0BB@PEBIKCPA@utf_16_be_decode?$AA@ DB 'utf_16_be_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OKNBJCED@utf_16_le_decode?$AA@
CONST	SEGMENT
??_C@_0BB@OKNBJCED@utf_16_le_decode?$AA@ DB 'utf_16_le_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@INLDPMPF@utf_16_decode?$AA@
CONST	SEGMENT
??_C@_0O@INLDPMPF@utf_16_decode?$AA@ DB 'utf_16_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DIKIFJIH@utf_16_be_encode?$AA@
CONST	SEGMENT
??_C@_0BB@DIKIFJIH@utf_16_be_encode?$AA@ DB 'utf_16_be_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CGGBGJDE@utf_16_le_encode?$AA@
CONST	SEGMENT
??_C@_0BB@CGGBGJDE@utf_16_le_encode?$AA@ DB 'utf_16_le_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EBADAHIC@utf_16_encode?$AA@
CONST	SEGMENT
??_C@_0O@EBADAHIC@utf_16_encode?$AA@ DB 'utf_16_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ILHHOBGH@utf_7_decode?$AA@
CONST	SEGMENT
??_C@_0N@ILHHOBGH@utf_7_decode?$AA@ DB 'utf_7_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EHMHBKBA@utf_7_encode?$AA@
CONST	SEGMENT
??_C@_0N@EHMHBKBA@utf_7_encode?$AA@ DB 'utf_7_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FEMOCOLG@utf_8_decode?$AA@
CONST	SEGMENT
??_C@_0N@FEMOCOLG@utf_8_decode?$AA@ DB 'utf_8_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JIHONFMB@utf_8_encode?$AA@
CONST	SEGMENT
??_C@_0N@JIHONFMB@utf_8_encode?$AA@ DB 'utf_8_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EOGKMAOG@escape_decode?$AA@
CONST	SEGMENT
??_C@_0O@EOGKMAOG@escape_decode?$AA@ DB 'escape_decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ICNKDLJB@escape_encode?$AA@
CONST	SEGMENT
??_C@_0O@ICNKDLJB@escape_encode?$AA@ DB 'escape_encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPNAMAEI@decode?$AA@
CONST	SEGMENT
??_C@_06KPNAMAEI@decode?$AA@ DB 'decode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDGADLDP@encode?$AA@
CONST	SEGMENT
??_C@_06GDGADLDP@encode?$AA@ DB 'encode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNGHPIEM@lookup?$AA@
CONST	SEGMENT
??_C@_06FNGHPIEM@lookup?$AA@ DB 'lookup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHHIDNEP@register?$AA@
CONST	SEGMENT
??_C@_08DHHIDNEP@register?$AA@ DB 'register', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
register__doc__ DB 'register(search_function)', 0aH, 0aH, 'Register a cod'
	DB	'ec search function. Search functions are expected to take', 0aH
	DB	'one argument, the encoding name in all lower case letters, an'
	DB	'd return', 0aH, 'a tuple of functions (encoder, decoder, stre'
	DB	'am_reader, stream_writer)', 0aH, '(or a CodecInfo object).', 00H
	ORG $+8
lookup__doc__ DB 'lookup(encoding) -> CodecInfo', 0aH, 0aH, 'Looks up a c'
	DB	'odec tuple in the Python codec registry and returns', 0aH, 'a'
	DB	' CodecInfo object.', 00H
	ORG $+13
encode__doc__ DB 'encode(obj, [encoding[,errors]]) -> object', 0aH, 0aH, 'E'
	DB	'ncodes obj using the codec registered for encoding. encoding '
	DB	'defaults', 0aH, 'to the default encoding. errors may be given'
	DB	' to set a different error', 0aH, 'handling scheme. Default is'
	DB	' ''strict'' meaning that encoding errors raise', 0aH, 'a Valu'
	DB	'eError. Other possible values are ''ignore'', ''replace'' and'
	DB	0aH, '''xmlcharrefreplace'' as well as any other name register'
	DB	'ed with', 0aH, 'codecs.register_error that can handle ValueEr'
	DB	'rors.', 00H
	ORG $+14
decode__doc__ DB 'decode(obj, [encoding[,errors]]) -> object', 0aH, 0aH, 'D'
	DB	'ecodes obj using the codec registered for encoding. encoding '
	DB	'defaults', 0aH, 'to the default encoding. errors may be given'
	DB	' to set a different error', 0aH, 'handling scheme. Default is'
	DB	' ''strict'' meaning that encoding errors raise', 0aH, 'a Valu'
	DB	'eError. Other possible values are ''ignore'' and ''replace''', 0aH
	DB	'as well as any other name registered with codecs.register_err'
	DB	'or that is', 0aH, 'able to handle ValueErrors.', 00H
	ORG $+12
register_error__doc__ DB 'register_error(errors, handler)', 0aH, 0aH, 'Re'
	DB	'gister the specified error handler under the name', 0aH, 'err'
	DB	'ors. handler must be a callable object, that', 0aH, 'will be '
	DB	'called with an exception instance containing', 0aH, 'informat'
	DB	'ion about the location of the encoding/decoding', 0aH, 'error'
	DB	' and must return a (replacement, new position) tuple.', 00H
	ORG $+3
lookup_error__doc__ DB 'lookup_error(errors) -> handler', 0aH, 0aH, 'Retu'
	DB	'rn the error handler for the specified error handling name', 0aH
	DB	'or raise a LookupError, if no handler exists under this name.'
	DB	00H
	ORG $+2
_codecs_functions DQ FLAT:??_C@_08DHHIDNEP@register?$AA@
	DQ	FLAT:codec_register
	DD	08H
	ORG $+4
	DQ	FLAT:register__doc__
	DQ	FLAT:??_C@_06FNGHPIEM@lookup?$AA@
	DQ	FLAT:codec_lookup
	DD	01H
	ORG $+4
	DQ	FLAT:lookup__doc__
	DQ	FLAT:??_C@_06GDGADLDP@encode?$AA@
	DQ	FLAT:codec_encode
	DD	01H
	ORG $+4
	DQ	FLAT:encode__doc__
	DQ	FLAT:??_C@_06KPNAMAEI@decode?$AA@
	DQ	FLAT:codec_decode
	DD	01H
	ORG $+4
	DQ	FLAT:decode__doc__
	DQ	FLAT:??_C@_0O@ICNKDLJB@escape_encode?$AA@
	DQ	FLAT:escape_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@EOGKMAOG@escape_decode?$AA@
	DQ	FLAT:escape_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@JIHONFMB@utf_8_encode?$AA@
	DQ	FLAT:utf_8_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@FEMOCOLG@utf_8_decode?$AA@
	DQ	FLAT:utf_8_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@EHMHBKBA@utf_7_encode?$AA@
	DQ	FLAT:utf_7_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@ILHHOBGH@utf_7_decode?$AA@
	DQ	FLAT:utf_7_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@EBADAHIC@utf_16_encode?$AA@
	DQ	FLAT:utf_16_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@CGGBGJDE@utf_16_le_encode?$AA@
	DQ	FLAT:utf_16_le_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@DIKIFJIH@utf_16_be_encode?$AA@
	DQ	FLAT:utf_16_be_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@INLDPMPF@utf_16_decode?$AA@
	DQ	FLAT:utf_16_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@OKNBJCED@utf_16_le_decode?$AA@
	DQ	FLAT:utf_16_le_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@PEBIKCPA@utf_16_be_decode?$AA@
	DQ	FLAT:utf_16_be_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@ELELBMKP@utf_16_ex_decode?$AA@
	DQ	FLAT:utf_16_ex_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@BIBKIGLD@utf_32_encode?$AA@
	DQ	FLAT:utf_32_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@EFDLOHAA@utf_32_le_encode?$AA@
	DQ	FLAT:utf_32_le_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@FLPCNHLD@utf_32_be_encode?$AA@
	DQ	FLAT:utf_32_be_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@NEKKHNME@utf_32_decode?$AA@
	DQ	FLAT:utf_32_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@IJILBMHH@utf_32_le_decode?$AA@
	DQ	FLAT:utf_32_le_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@JHECCMME@utf_32_be_decode?$AA@
	DQ	FLAT:utf_32_be_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@CIBBJCJL@utf_32_ex_decode?$AA@
	DQ	FLAT:utf_32_ex_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BG@HMDDPBBB@unicode_escape_encode?$AA@
	DQ	FLAT:unicode_escape_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BG@LAIDAKGG@unicode_escape_decode?$AA@
	DQ	FLAT:unicode_escape_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BI@DLEKDHAF@unicode_internal_encode?$AA@
	DQ	FLAT:unicode_internal_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BI@PHPKMMHC@unicode_internal_decode?$AA@
	DQ	FLAT:unicode_internal_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BK@MFKIHEBM@raw_unicode_escape_encode?$AA@
	DQ	FLAT:raw_unicode_escape_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BK@JBIIPGL@raw_unicode_escape_decode?$AA@
	DQ	FLAT:raw_unicode_escape_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@PIBHAHF@latin_1_encode?$AA@
	DQ	FLAT:latin_1_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@MDDBILAC@latin_1_decode?$AA@
	DQ	FLAT:latin_1_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@OJMLPLAK@ascii_encode?$AA@
	DQ	FLAT:ascii_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@CFHLAAHN@ascii_decode?$AA@
	DQ	FLAT:ascii_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@HMMNDFN@charmap_encode?$AA@
	DQ	FLAT:charmap_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@MLHMCICK@charmap_decode?$AA@
	DQ	FLAT:charmap_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@PLABBJMF@charmap_build?$AA@
	DQ	FLAT:charmap_build
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BC@FNHAIHFO@readbuffer_encode?$AA@
	DQ	FLAT:readbuffer_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@EEGEMBDI@mbcs_encode?$AA@
	DQ	FLAT:mbcs_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@IINEDKEP@mbcs_decode?$AA@
	DQ	FLAT:mbcs_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@FCCICCMP@code_page_encode?$AA@
	DQ	FLAT:code_page_encode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@JOJINJLI@code_page_decode?$AA@
	DQ	FLAT:code_page_decode
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@LJBCPEIO@register_error?$AA@
	DQ	FLAT:register_error
	DD	01H
	ORG $+4
	DQ	FLAT:register_error__doc__
	DQ	FLAT:??_C@_0N@FDEJOILE@lookup_error?$AA@
	DQ	FLAT:lookup_error
	DD	01H
	ORG $+4
	DQ	FLAT:lookup_error__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
codecsmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07HLOOKDPL@_codecs?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:_codecs_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	_Py_IncRef
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyCodec_Register:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_codecsmodule.c
pdata	SEGMENT
$pdata$codec_register DD imagerel codec_register
	DD	imagerel codec_register+56
	DD	imagerel $unwind$codec_register
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_register DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT codec_register
_TEXT	SEGMENT
self$ = 48
search_function$ = 56
codec_register PROC					; COMDAT

; 57   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 58   :     if (PyCodec_Register(search_function))

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR search_function$[rsp]
  00013	e8 00 00 00 00	 call	 PyCodec_Register
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN1@codec_regi

; 59   :         return NULL;

  0001c	33 c0		 xor	 eax, eax
  0001e	eb 13		 jmp	 SHORT $LN2@codec_regi
$LN1@codec_regi:

; 60   : 
; 61   :     Py_RETURN_NONE;

  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00027	e8 00 00 00 00	 call	 _Py_IncRef
  0002c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@codec_regi:

; 62   : }

  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00037	c3		 ret	 0
codec_register ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_08PLCBIDDJ@s?3lookup?$AA@			; `string'
EXTRN	_PyCodec_Lookup:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_codecsmodule.c
pdata	SEGMENT
$pdata$codec_lookup DD imagerel codec_lookup
	DD	imagerel codec_lookup+59
	DD	imagerel $unwind$codec_lookup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_lookup DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_08PLCBIDDJ@s?3lookup?$AA@
CONST	SEGMENT
??_C@_08PLCBIDDJ@s?3lookup?$AA@ DB 's:lookup', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT codec_lookup
_TEXT	SEGMENT
encoding$ = 32
self$ = 64
args$ = 72
codec_lookup PROC					; COMDAT

; 72   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 73   :     char *encoding;
; 74   : 
; 75   :     if (!PyArg_ParseTuple(args, "s:lookup", &encoding))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR encoding$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PLCBIDDJ@s?3lookup?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN1@codec_look

; 76   :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 0a		 jmp	 SHORT $LN2@codec_look
$LN1@codec_look:

; 77   : 
; 78   :     return _PyCodec_Lookup(encoding);

  0002c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR encoding$[rsp]
  00031	e8 00 00 00 00	 call	 _PyCodec_Lookup
$LN2@codec_look:

; 79   : }

  00036	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003a	c3		 ret	 0
codec_lookup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@PDELEEKF@O?$HMss?3encode?$AA@		; `string'
EXTRN	PyCodec_Encode:PROC
EXTRN	PyUnicode_GetDefaultEncoding:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_encode DD imagerel codec_encode
	DD	imagerel codec_encode+120
	DD	imagerel $unwind$codec_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_encode DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0M@PDELEEKF@O?$HMss?3encode?$AA@
CONST	SEGMENT
??_C@_0M@PDELEEKF@O?$HMss?3encode?$AA@ DB 'O|ss:encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT codec_encode
_TEXT	SEGMENT
v$ = 48
errors$ = 56
encoding$ = 64
self$ = 96
args$ = 104
codec_encode PROC					; COMDAT

; 93   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 94   :     const char *encoding = NULL;

  0000e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR encoding$[rsp], 0

; 95   :     const char *errors = NULL;

  00017	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 96   :     PyObject *v;
; 97   : 
; 98   :     if (!PyArg_ParseTuple(args, "O|ss:encode", &v, &encoding, &errors))

  00020	48 8d 44 24 38	 lea	 rax, QWORD PTR errors$[rsp]
  00025	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002a	4c 8d 4c 24 40	 lea	 r9, QWORD PTR encoding$[rsp]
  0002f	4c 8d 44 24 30	 lea	 r8, QWORD PTR v$[rsp]
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@PDELEEKF@O?$HMss?3encode?$AA@
  0003b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00040	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00045	85 c0		 test	 eax, eax
  00047	75 04		 jne	 SHORT $LN2@codec_enco

; 99   :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 26		 jmp	 SHORT $LN3@codec_enco
$LN2@codec_enco:

; 100  : 
; 101  :     if (encoding == NULL)

  0004d	48 83 7c 24 40
	00		 cmp	 QWORD PTR encoding$[rsp], 0
  00053	75 0a		 jne	 SHORT $LN1@codec_enco

; 102  :         encoding = PyUnicode_GetDefaultEncoding();

  00055	e8 00 00 00 00	 call	 PyUnicode_GetDefaultEncoding
  0005a	48 89 44 24 40	 mov	 QWORD PTR encoding$[rsp], rax
$LN1@codec_enco:

; 103  : 
; 104  :     /* Encode via the codec registry */
; 105  :     return PyCodec_Encode(v, encoding, errors);

  0005f	4c 8b 44 24 38	 mov	 r8, QWORD PTR errors$[rsp]
  00064	48 8b 54 24 40	 mov	 rdx, QWORD PTR encoding$[rsp]
  00069	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  0006e	e8 00 00 00 00	 call	 PyCodec_Encode
$LN3@codec_enco:

; 106  : }

  00073	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00077	c3		 ret	 0
codec_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@DPPLLPNC@O?$HMss?3decode?$AA@		; `string'
EXTRN	PyCodec_Decode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_decode DD imagerel codec_decode
	DD	imagerel codec_decode+120
	DD	imagerel $unwind$codec_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_decode DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0M@DPPLLPNC@O?$HMss?3decode?$AA@
CONST	SEGMENT
??_C@_0M@DPPLLPNC@O?$HMss?3decode?$AA@ DB 'O|ss:decode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT codec_decode
_TEXT	SEGMENT
v$ = 48
errors$ = 56
encoding$ = 64
self$ = 96
args$ = 104
codec_decode PROC					; COMDAT

; 120  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 121  :     const char *encoding = NULL;

  0000e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR encoding$[rsp], 0

; 122  :     const char *errors = NULL;

  00017	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 123  :     PyObject *v;
; 124  : 
; 125  :     if (!PyArg_ParseTuple(args, "O|ss:decode", &v, &encoding, &errors))

  00020	48 8d 44 24 38	 lea	 rax, QWORD PTR errors$[rsp]
  00025	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002a	4c 8d 4c 24 40	 lea	 r9, QWORD PTR encoding$[rsp]
  0002f	4c 8d 44 24 30	 lea	 r8, QWORD PTR v$[rsp]
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@DPPLLPNC@O?$HMss?3decode?$AA@
  0003b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00040	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00045	85 c0		 test	 eax, eax
  00047	75 04		 jne	 SHORT $LN2@codec_deco

; 126  :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 26		 jmp	 SHORT $LN3@codec_deco
$LN2@codec_deco:

; 127  : 
; 128  :     if (encoding == NULL)

  0004d	48 83 7c 24 40
	00		 cmp	 QWORD PTR encoding$[rsp], 0
  00053	75 0a		 jne	 SHORT $LN1@codec_deco

; 129  :         encoding = PyUnicode_GetDefaultEncoding();

  00055	e8 00 00 00 00	 call	 PyUnicode_GetDefaultEncoding
  0005a	48 89 44 24 40	 mov	 QWORD PTR encoding$[rsp], rax
$LN1@codec_deco:

; 130  : 
; 131  :     /* Decode via the codec registry */
; 132  :     return PyCodec_Decode(v, encoding, errors);

  0005f	4c 8b 44 24 38	 mov	 r8, QWORD PTR errors$[rsp]
  00064	48 8b 54 24 40	 mov	 rdx, QWORD PTR encoding$[rsp]
  00069	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  0006e	e8 00 00 00 00	 call	 PyCodec_Decode
$LN3@codec_deco:

; 133  : }

  00073	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00077	c3		 ret	 0
codec_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@FIFAEBFD@s?$CD?$HMz?3escape_decode?$AA@ ; `string'
EXTRN	PyBytes_DecodeEscape:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$escape_decode DD imagerel escape_decode
	DD	imagerel escape_decode+118
	DD	imagerel $unwind$escape_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$escape_decode DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0BD@FIFAEBFD@s?$CD?$HMz?3escape_decode?$AA@
CONST	SEGMENT
??_C@_0BD@FIFAEBFD@s?$CD?$HMz?3escape_decode?$AA@ DB 's#|z:escape_decode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT escape_decode
_TEXT	SEGMENT
errors$ = 48
size$ = 56
data$ = 64
self$ = 96
args$ = 104
escape_decode PROC					; COMDAT

; 153  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 154  :     const char *errors = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 155  :     const char *data;
; 156  :     Py_ssize_t size;
; 157  : 
; 158  :     if (!PyArg_ParseTuple(args, "s#|z:escape_decode",
; 159  :                           &data, &size, &errors))

  00017	48 8d 44 24 30	 lea	 rax, QWORD PTR errors$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00021	4c 8d 4c 24 38	 lea	 r9, QWORD PTR size$[rsp]
  00026	4c 8d 44 24 40	 lea	 r8, QWORD PTR data$[rsp]
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@FIFAEBFD@s?$CD?$HMz?3escape_decode?$AA@
  00032	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00037	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003c	85 c0		 test	 eax, eax
  0003e	75 04		 jne	 SHORT $LN1@escape_dec

; 160  :         return NULL;

  00040	33 c0		 xor	 eax, eax
  00042	eb 2d		 jmp	 SHORT $LN2@escape_dec
$LN1@escape_dec:

; 161  :     return codec_tuple(PyBytes_DecodeEscape(data, size, errors, 0, NULL),
; 162  :                        size);

  00044	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0004d	45 33 c9	 xor	 r9d, r9d
  00050	4c 8b 44 24 30	 mov	 r8, QWORD PTR errors$[rsp]
  00055	48 8b 54 24 38	 mov	 rdx, QWORD PTR size$[rsp]
  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR data$[rsp]
  0005f	e8 00 00 00 00	 call	 PyBytes_DecodeEscape
  00064	48 8b 54 24 38	 mov	 rdx, QWORD PTR size$[rsp]
  00069	48 8b c8	 mov	 rcx, rax
  0006c	e8 00 00 00 00	 call	 codec_tuple
$LN2@escape_dec:

; 163  : }

  00071	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00075	c3		 ret	 0
escape_decode ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_02IAAGKKDJ@On?$AA@			; `string'
EXTRN	_Py_BuildValue_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_tuple DD imagerel codec_tuple
	DD	imagerel codec_tuple+73
	DD	imagerel $unwind$codec_tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_tuple DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On?$AA@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On?$AA@ DB 'On', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT codec_tuple
_TEXT	SEGMENT
v$ = 32
unicode$ = 64
len$ = 72
codec_tuple PROC					; COMDAT

; 140  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 141  :     PyObject *v;
; 142  :     if (unicode == NULL)

  0000e	48 83 7c 24 40
	00		 cmp	 QWORD PTR unicode$[rsp], 0
  00014	75 04		 jne	 SHORT $LN1@codec_tupl

; 143  :         return NULL;

  00016	33 c0		 xor	 eax, eax
  00018	eb 2a		 jmp	 SHORT $LN2@codec_tupl
$LN1@codec_tupl:

; 144  :     v = Py_BuildValue("On", unicode, len);

  0001a	4c 8b 44 24 48	 mov	 r8, QWORD PTR len$[rsp]
  0001f	48 8b 54 24 40	 mov	 rdx, QWORD PTR unicode$[rsp]
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02IAAGKKDJ@On?$AA@
  0002b	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  00030	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 145  :     Py_DECREF(unicode);

  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR unicode$[rsp]
  0003a	e8 00 00 00 00	 call	 _Py_DecRef

; 146  :     return v;

  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN2@codec_tupl:

; 147  : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
codec_tuple ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FE@JPNODPHH@?$AAn?$AAe?$AAw?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CI?$AAp?$AA?5?$AA?9?$AA?5?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAA?$AAS?$AA_?$AAS?$AAT?$AAR?$AAI?$AAN?$AAG@ ; `string'
PUBLIC	??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BO@EIHKFEIP@string?5is?5too?5large?5to?5encode?$AA@ ; `string'
PUBLIC	??_C@_1CG@HELEBNCJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BD@EEDLIMNO@O?$CB?$HMz?3escape_encode?$AA@ ; `string'
EXTRN	_PyBytes_Resize:PROC
EXTRN	Py_hexdigits:QWORD
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	__imp__wassert:PROC
EXTRN	PyBytes_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\modules\_codecsmodule.c
pdata	SEGMENT
$pdata$escape_encode DD imagerel escape_encode
	DD	imagerel escape_encode+1083
	DD	imagerel $unwind$escape_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$escape_encode DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_1FE@JPNODPHH@?$AAn?$AAe?$AAw?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CI?$AAp?$AA?5?$AA?9?$AA?5?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAA?$AAS?$AA_?$AAS?$AAT?$AAR?$AAI?$AAN?$AAG@
CONST	SEGMENT
??_C@_1FE@JPNODPHH@?$AAn?$AAe?$AAw?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CI?$AAp?$AA?5?$AA?9?$AA?5?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAA?$AAS?$AA_?$AAS?$AAT?$AAR?$AAI?$AAN?$AAG@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	' ', 00H, '-', 00H, ' ', 00H, '(', 00H, 'p', 00H, ' ', 00H, '-'
	DB	00H, ' ', 00H, 'P', 00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H
	DB	'e', 00H, 's', 00H, '_', 00H, 'A', 00H, 'S', 00H, '_', 00H, 'S'
	DB	00H, 'T', 00H, 'R', 00H, 'I', 00H, 'N', 00H, 'G', 00H, '(', 00H
	DB	'v', 00H, ')', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '4', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'v', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EIHKFEIP@string?5is?5too?5large?5to?5encode?$AA@
CONST	SEGMENT
??_C@_0BO@EIHKFEIP@string?5is?5too?5large?5to?5encode?$AA@ DB 'string is '
	DB	'too large to encode', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@HELEBNCJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@HELEBNCJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, '_', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'e', 00H, 'c', 00H, 's', 00H, 'm', 00H, 'o', 00H
	DB	'd', 00H, 'u', 00H, 'l', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EEDLIMNO@O?$CB?$HMz?3escape_encode?$AA@
CONST	SEGMENT
??_C@_0BD@EEDLIMNO@O?$CB?$HMz?3escape_encode?$AA@ DB 'O!|z:escape_encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT escape_encode
_TEXT	SEGMENT
v$ = 48
errors$ = 56
newsize$ = 64
size$ = 72
str$ = 80
p$120514 = 88
i$120512 = 96
c$120513 = 104
self$ = 128
args$ = 136
escape_encode PROC					; COMDAT

; 168  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 169  :     PyObject *str;
; 170  :     Py_ssize_t size;
; 171  :     Py_ssize_t newsize;
; 172  :     const char *errors = NULL;

  0000e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 173  :     PyObject *v;
; 174  : 
; 175  :     if (!PyArg_ParseTuple(args, "O!|z:escape_encode",
; 176  :                           &PyBytes_Type, &str, &errors))

  00017	48 8d 44 24 38	 lea	 rax, QWORD PTR errors$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00021	4c 8d 4c 24 50	 lea	 r9, QWORD PTR str$[rsp]
  00026	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBytes_Type
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@EEDLIMNO@O?$CB?$HMz?3escape_encode?$AA@
  00034	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0003c	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00041	85 c0		 test	 eax, eax
  00043	75 07		 jne	 SHORT $LN20@escape_enc

; 177  :         return NULL;

  00045	33 c0		 xor	 eax, eax
  00047	e9 ea 03 00 00	 jmp	 $LN21@escape_enc
$LN20@escape_enc:

; 178  : 
; 179  :     size = PyBytes_GET_SIZE(str);

  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00051	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00055	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0005b	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00060	85 c0		 test	 eax, eax
  00062	75 1c		 jne	 SHORT $LN23@escape_enc
  00064	41 b8 b3 00 00
	00		 mov	 r8d, 179		; 000000b3H
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@HELEBNCJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007e	33 c0		 xor	 eax, eax
$LN23@escape_enc:
  00080	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00085	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00089	48 89 44 24 48	 mov	 QWORD PTR size$[rsp], rax

; 180  :     if (size > PY_SSIZE_T_MAX / 4) {

  0008e	48 b8 ff ff ff
	ff ff ff ff 1f	 mov	 rax, 2305843009213693951 ; 1fffffffffffffffH
  00098	48 39 44 24 48	 cmp	 QWORD PTR size$[rsp], rax
  0009d	7e 1a		 jle	 SHORT $LN19@escape_enc

; 181  :         PyErr_SetString(PyExc_OverflowError,
; 182  :             "string is too large to encode");

  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@EIHKFEIP@string?5is?5too?5large?5to?5encode?$AA@
  000a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000ad	e8 00 00 00 00	 call	 PyErr_SetString

; 183  :             return NULL;

  000b2	33 c0		 xor	 eax, eax
  000b4	e9 7d 03 00 00	 jmp	 $LN21@escape_enc
$LN19@escape_enc:

; 184  :     }
; 185  :     newsize = 4*size;

  000b9	48 8b 44 24 48	 mov	 rax, QWORD PTR size$[rsp]
  000be	48 c1 e0 02	 shl	 rax, 2
  000c2	48 89 44 24 40	 mov	 QWORD PTR newsize$[rsp], rax

; 186  :     v = PyBytes_FromStringAndSize(NULL, newsize);

  000c7	48 8b 54 24 40	 mov	 rdx, QWORD PTR newsize$[rsp]
  000cc	33 c9		 xor	 ecx, ecx
  000ce	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000d3	48 89 44 24 30	 mov	 QWORD PTR v$[rsp], rax

; 187  : 
; 188  :     if (v == NULL) {

  000d8	48 83 7c 24 30
	00		 cmp	 QWORD PTR v$[rsp], 0
  000de	75 0c		 jne	 SHORT $LN18@escape_enc

; 189  :         return NULL;

  000e0	33 c0		 xor	 eax, eax
  000e2	e9 4f 03 00 00	 jmp	 $LN21@escape_enc

; 190  :     }
; 191  :     else {

  000e7	e9 3b 03 00 00	 jmp	 $LN17@escape_enc
$LN18@escape_enc:

; 192  :         register Py_ssize_t i;
; 193  :         register char c;
; 194  :         register char *p = PyBytes_AS_STRING(v);

  000ec	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  000f1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000fb	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00100	85 c0		 test	 eax, eax
  00102	75 1c		 jne	 SHORT $LN24@escape_enc
  00104	41 b8 c2 00 00
	00		 mov	 r8d, 194		; 000000c2H
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011e	33 c0		 xor	 eax, eax
$LN24@escape_enc:
  00120	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  00125	48 83 c0 78	 add	 rax, 120		; 00000078H
  00129	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax

; 195  : 
; 196  :         for (i = 0; i < size; i++) {

  0012e	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR i$120512[rsp], 0
  00137	eb 0d		 jmp	 SHORT $LN16@escape_enc
$LN15@escape_enc:
  00139	48 8b 44 24 60	 mov	 rax, QWORD PTR i$120512[rsp]
  0013e	48 ff c0	 inc	 rax
  00141	48 89 44 24 60	 mov	 QWORD PTR i$120512[rsp], rax
$LN16@escape_enc:
  00146	48 8b 44 24 48	 mov	 rax, QWORD PTR size$[rsp]
  0014b	48 39 44 24 60	 cmp	 QWORD PTR i$120512[rsp], rax
  00150	0f 8d 6c 02 00
	00		 jge	 $LN14@escape_enc

; 197  :             /* There's at least enough room for a hex escape */
; 198  :             assert(newsize - (p - PyBytes_AS_STRING(v)) >= 4);

  00156	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  0015b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0015f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00165	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0016a	85 c0		 test	 eax, eax
  0016c	75 1c		 jne	 SHORT $LN25@escape_enc
  0016e	41 b8 c6 00 00
	00		 mov	 r8d, 198		; 000000c6H
  00174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0017b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00188	33 c0		 xor	 eax, eax
$LN25@escape_enc:
  0018a	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  0018f	48 83 c0 78	 add	 rax, 120		; 00000078H
  00193	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$120514[rsp]
  00198	48 2b c8	 sub	 rcx, rax
  0019b	48 8b c1	 mov	 rax, rcx
  0019e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR newsize$[rsp]
  001a3	48 2b c8	 sub	 rcx, rax
  001a6	48 8b c1	 mov	 rax, rcx
  001a9	48 83 f8 04	 cmp	 rax, 4
  001ad	7d 1c		 jge	 SHORT $LN26@escape_enc
  001af	41 b8 c6 00 00
	00		 mov	 r8d, 198		; 000000c6H
  001b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  001bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@JPNODPHH@?$AAn?$AAe?$AAw?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CI?$AAp?$AA?5?$AA?9?$AA?5?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAA?$AAS?$AA_?$AAS?$AAT?$AAR?$AAI?$AAN?$AAG@
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c9	33 c0		 xor	 eax, eax
$LN26@escape_enc:

; 199  :             c = PyBytes_AS_STRING(str)[i];

  001cb	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  001d0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001d4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001da	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001df	85 c0		 test	 eax, eax
  001e1	75 1c		 jne	 SHORT $LN27@escape_enc
  001e3	41 b8 c7 00 00
	00		 mov	 r8d, 199		; 000000c7H
  001e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  001f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@HELEBNCJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  001f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001fd	33 c0		 xor	 eax, eax
$LN27@escape_enc:
  001ff	48 8b 44 24 60	 mov	 rax, QWORD PTR i$120512[rsp]
  00204	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00209	48 03 c8	 add	 rcx, rax
  0020c	48 8b c1	 mov	 rax, rcx
  0020f	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  00213	88 44 24 68	 mov	 BYTE PTR c$120513[rsp], al

; 200  :             if (c == '\'' || c == '\\')

  00217	0f be 44 24 68	 movsx	 eax, BYTE PTR c$120513[rsp]
  0021c	83 f8 27	 cmp	 eax, 39			; 00000027H
  0021f	74 0a		 je	 SHORT $LN12@escape_enc
  00221	0f be 44 24 68	 movsx	 eax, BYTE PTR c$120513[rsp]
  00226	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00229	75 33		 jne	 SHORT $LN13@escape_enc
$LN12@escape_enc:

; 201  :                 *p++ = '\\', *p++ = c;

  0022b	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  00230	c6 00 5c	 mov	 BYTE PTR [rax], 92	; 0000005cH
  00233	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  00238	48 ff c0	 inc	 rax
  0023b	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax
  00240	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  00245	0f b6 4c 24 68	 movzx	 ecx, BYTE PTR c$120513[rsp]
  0024a	88 08		 mov	 BYTE PTR [rax], cl
  0024c	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  00251	48 ff c0	 inc	 rax
  00254	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax
  00259	e9 5f 01 00 00	 jmp	 $LN11@escape_enc
$LN13@escape_enc:

; 202  :             else if (c == '\t')

  0025e	0f be 44 24 68	 movsx	 eax, BYTE PTR c$120513[rsp]
  00263	83 f8 09	 cmp	 eax, 9
  00266	75 2f		 jne	 SHORT $LN10@escape_enc

; 203  :                 *p++ = '\\', *p++ = 't';

  00268	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  0026d	c6 00 5c	 mov	 BYTE PTR [rax], 92	; 0000005cH
  00270	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  00275	48 ff c0	 inc	 rax
  00278	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax
  0027d	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  00282	c6 00 74	 mov	 BYTE PTR [rax], 116	; 00000074H
  00285	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  0028a	48 ff c0	 inc	 rax
  0028d	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax
  00292	e9 26 01 00 00	 jmp	 $LN9@escape_enc
$LN10@escape_enc:

; 204  :             else if (c == '\n')

  00297	0f be 44 24 68	 movsx	 eax, BYTE PTR c$120513[rsp]
  0029c	83 f8 0a	 cmp	 eax, 10
  0029f	75 2f		 jne	 SHORT $LN8@escape_enc

; 205  :                 *p++ = '\\', *p++ = 'n';

  002a1	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  002a6	c6 00 5c	 mov	 BYTE PTR [rax], 92	; 0000005cH
  002a9	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  002ae	48 ff c0	 inc	 rax
  002b1	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax
  002b6	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  002bb	c6 00 6e	 mov	 BYTE PTR [rax], 110	; 0000006eH
  002be	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  002c3	48 ff c0	 inc	 rax
  002c6	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax
  002cb	e9 ed 00 00 00	 jmp	 $LN7@escape_enc
$LN8@escape_enc:

; 206  :             else if (c == '\r')

  002d0	0f be 44 24 68	 movsx	 eax, BYTE PTR c$120513[rsp]
  002d5	83 f8 0d	 cmp	 eax, 13
  002d8	75 2f		 jne	 SHORT $LN6@escape_enc

; 207  :                 *p++ = '\\', *p++ = 'r';

  002da	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  002df	c6 00 5c	 mov	 BYTE PTR [rax], 92	; 0000005cH
  002e2	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  002e7	48 ff c0	 inc	 rax
  002ea	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax
  002ef	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  002f4	c6 00 72	 mov	 BYTE PTR [rax], 114	; 00000072H
  002f7	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  002fc	48 ff c0	 inc	 rax
  002ff	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax
  00304	e9 b4 00 00 00	 jmp	 $LN5@escape_enc
$LN6@escape_enc:

; 208  :             else if (c < ' ' || c >= 0x7f) {

  00309	0f be 44 24 68	 movsx	 eax, BYTE PTR c$120513[rsp]
  0030e	83 f8 20	 cmp	 eax, 32			; 00000020H
  00311	7c 0e		 jl	 SHORT $LN3@escape_enc
  00313	0f be 44 24 68	 movsx	 eax, BYTE PTR c$120513[rsp]
  00318	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  0031b	0f 8c 83 00 00
	00		 jl	 $LN4@escape_enc
$LN3@escape_enc:

; 209  :                 *p++ = '\\';

  00321	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  00326	c6 00 5c	 mov	 BYTE PTR [rax], 92	; 0000005cH
  00329	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  0032e	48 ff c0	 inc	 rax
  00331	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax

; 210  :                 *p++ = 'x';

  00336	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  0033b	c6 00 78	 mov	 BYTE PTR [rax], 120	; 00000078H
  0033e	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  00343	48 ff c0	 inc	 rax
  00346	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax

; 211  :                 *p++ = Py_hexdigits[(c & 0xf0) >> 4];

  0034b	0f be 44 24 68	 movsx	 eax, BYTE PTR c$120513[rsp]
  00350	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  00355	c1 f8 04	 sar	 eax, 4
  00358	48 98		 cdqe
  0035a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$120514[rsp]
  0035f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00366	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0036a	88 01		 mov	 BYTE PTR [rcx], al
  0036c	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  00371	48 ff c0	 inc	 rax
  00374	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax

; 212  :                 *p++ = Py_hexdigits[c & 0xf];

  00379	0f be 44 24 68	 movsx	 eax, BYTE PTR c$120513[rsp]
  0037e	83 e0 0f	 and	 eax, 15
  00381	48 98		 cdqe
  00383	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$120514[rsp]
  00388	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  0038f	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00393	88 01		 mov	 BYTE PTR [rcx], al
  00395	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  0039a	48 ff c0	 inc	 rax
  0039d	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax

; 213  :             }
; 214  :             else

  003a2	eb 19		 jmp	 SHORT $LN2@escape_enc
$LN4@escape_enc:

; 215  :                 *p++ = c;

  003a4	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  003a9	0f b6 4c 24 68	 movzx	 ecx, BYTE PTR c$120513[rsp]
  003ae	88 08		 mov	 BYTE PTR [rax], cl
  003b0	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  003b5	48 ff c0	 inc	 rax
  003b8	48 89 44 24 58	 mov	 QWORD PTR p$120514[rsp], rax
$LN2@escape_enc:
$LN5@escape_enc:
$LN7@escape_enc:
$LN9@escape_enc:
$LN11@escape_enc:

; 216  :         }

  003bd	e9 77 fd ff ff	 jmp	 $LN15@escape_enc
$LN14@escape_enc:

; 217  :         *p = '\0';

  003c2	48 8b 44 24 58	 mov	 rax, QWORD PTR p$120514[rsp]
  003c7	c6 00 00	 mov	 BYTE PTR [rax], 0

; 218  :         if (_PyBytes_Resize(&v, (p - PyBytes_AS_STRING(v)))) {

  003ca	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  003cf	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003d3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003d9	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  003de	85 c0		 test	 eax, eax
  003e0	75 1c		 jne	 SHORT $LN28@escape_enc
  003e2	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  003e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  003ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  003f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003fc	33 c0		 xor	 eax, eax
$LN28@escape_enc:
  003fe	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  00403	48 83 c0 78	 add	 rax, 120		; 00000078H
  00407	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$120514[rsp]
  0040c	48 2b c8	 sub	 rcx, rax
  0040f	48 8b c1	 mov	 rax, rcx
  00412	48 8b d0	 mov	 rdx, rax
  00415	48 8d 4c 24 30	 lea	 rcx, QWORD PTR v$[rsp]
  0041a	e8 00 00 00 00	 call	 _PyBytes_Resize
  0041f	85 c0		 test	 eax, eax
  00421	74 04		 je	 SHORT $LN1@escape_enc

; 219  :             return NULL;

  00423	33 c0		 xor	 eax, eax
  00425	eb 0f		 jmp	 SHORT $LN21@escape_enc
$LN1@escape_enc:
$LN17@escape_enc:

; 220  :         }
; 221  :     }
; 222  : 
; 223  :     return codec_tuple(v, size);

  00427	48 8b 54 24 48	 mov	 rdx, QWORD PTR size$[rsp]
  0042c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  00431	e8 00 00 00 00	 call	 codec_tuple
$LN21@escape_enc:

; 224  : }

  00436	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0043a	c3		 ret	 0
escape_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BM@KGAFPAAE@O?$HMz?3unicode_internal_decode?$AA@ ; `string'
EXTRN	_PyUnicode_DecodeUnicodeInternal:PROC
EXTRN	PyObject_AsReadBuffer:PROC
EXTRN	_PyUnicode_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$unicode_internal_decode DD imagerel unicode_internal_decode
	DD	imagerel unicode_internal_decode+394
	DD	imagerel $unwind$unicode_internal_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unicode_internal_decode DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'o', 00H
	DB	'b', 00H, 'j', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KGAFPAAE@O?$HMz?3unicode_internal_decode?$AA@
CONST	SEGMENT
??_C@_0BM@KGAFPAAE@O?$HMz?3unicode_internal_decode?$AA@ DB 'O|z:unicode_i'
	DB	'nternal_decode', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT unicode_internal_decode
_TEXT	SEGMENT
errors$ = 32
size$ = 40
data$ = 48
obj$ = 56
tv88 = 64
self$ = 96
args$ = 104
unicode_internal_decode PROC				; COMDAT

; 231  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 232  :     PyObject *obj;
; 233  :     const char *errors = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 234  :     const char *data;
; 235  :     Py_ssize_t size;
; 236  : 
; 237  :     if (!PyArg_ParseTuple(args, "O|z:unicode_internal_decode",
; 238  :                           &obj, &errors))

  00017	4c 8d 4c 24 20	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 38	 lea	 r8, QWORD PTR obj$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@KGAFPAAE@O?$HMz?3unicode_internal_decode?$AA@
  00028	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN5@unicode_in

; 239  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 48 01 00 00	 jmp	 $LN6@unicode_in
$LN5@unicode_in:

; 240  : 
; 241  :     if (PyUnicode_Check(obj)) {

  0003d	48 8b 44 24 38	 mov	 rax, QWORD PTR obj$[rsp]
  00042	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00046	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0004c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00051	85 c0		 test	 eax, eax
  00053	0f 84 ef 00 00
	00		 je	 $LN4@unicode_in

; 242  :         if (PyUnicode_READY(obj) < 0)

  00059	48 8b 44 24 38	 mov	 rax, QWORD PTR obj$[rsp]
  0005e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00062	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00068	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0006d	85 c0		 test	 eax, eax
  0006f	75 1c		 jne	 SHORT $LN8@unicode_in
  00071	41 b8 f2 00 00
	00		 mov	 r8d, 242		; 000000f2H
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008b	33 c0		 xor	 eax, eax
$LN8@unicode_in:
  0008d	48 8b 44 24 38	 mov	 rax, QWORD PTR obj$[rsp]
  00092	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00095	c1 e8 07	 shr	 eax, 7
  00098	83 e0 01	 and	 eax, 1
  0009b	85 c0		 test	 eax, eax
  0009d	74 0a		 je	 SHORT $LN9@unicode_in
  0009f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
  000a7	eb 0e		 jmp	 SHORT $LN10@unicode_in
$LN9@unicode_in:
  000a9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  000ae	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000b3	89 44 24 40	 mov	 DWORD PTR tv88[rsp], eax
$LN10@unicode_in:
  000b7	83 7c 24 40 00	 cmp	 DWORD PTR tv88[rsp], 0
  000bc	7d 07		 jge	 SHORT $LN3@unicode_in

; 243  :             return NULL;

  000be	33 c0		 xor	 eax, eax
  000c0	e9 c0 00 00 00	 jmp	 $LN6@unicode_in
$LN3@unicode_in:

; 244  :         Py_INCREF(obj);

  000c5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  000ca	e8 00 00 00 00	 call	 _Py_IncRef

; 245  :         return codec_tuple(obj, PyUnicode_GET_LENGTH(obj));

  000cf	48 8b 44 24 38	 mov	 rax, QWORD PTR obj$[rsp]
  000d4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000de	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000e3	85 c0		 test	 eax, eax
  000e5	75 1c		 jne	 SHORT $LN11@unicode_in
  000e7	41 b8 f5 00 00
	00		 mov	 r8d, 245		; 000000f5H
  000ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00101	33 c0		 xor	 eax, eax
$LN11@unicode_in:
  00103	48 8b 44 24 38	 mov	 rax, QWORD PTR obj$[rsp]
  00108	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0010b	c1 e8 07	 shr	 eax, 7
  0010e	83 e0 01	 and	 eax, 1
  00111	85 c0		 test	 eax, eax
  00113	75 1c		 jne	 SHORT $LN12@unicode_in
  00115	41 b8 f5 00 00
	00		 mov	 r8d, 245		; 000000f5H
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012f	33 c0		 xor	 eax, eax
$LN12@unicode_in:
  00131	48 8b 44 24 38	 mov	 rax, QWORD PTR obj$[rsp]
  00136	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0013a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  0013f	e8 00 00 00 00	 call	 codec_tuple
  00144	eb 3f		 jmp	 SHORT $LN6@unicode_in

; 246  :     }
; 247  :     else {

  00146	eb 3d		 jmp	 SHORT $LN2@unicode_in
$LN4@unicode_in:

; 248  :         if (PyObject_AsReadBuffer(obj, (const void **)&data, &size))

  00148	4c 8d 44 24 28	 lea	 r8, QWORD PTR size$[rsp]
  0014d	48 8d 54 24 30	 lea	 rdx, QWORD PTR data$[rsp]
  00152	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  00157	e8 00 00 00 00	 call	 PyObject_AsReadBuffer
  0015c	85 c0		 test	 eax, eax
  0015e	74 04		 je	 SHORT $LN1@unicode_in

; 249  :             return NULL;

  00160	33 c0		 xor	 eax, eax
  00162	eb 21		 jmp	 SHORT $LN6@unicode_in
$LN1@unicode_in:

; 250  : 
; 251  :         return codec_tuple(_PyUnicode_DecodeUnicodeInternal(data, size, errors),
; 252  :                            size);

  00164	4c 8b 44 24 20	 mov	 r8, QWORD PTR errors$[rsp]
  00169	48 8b 54 24 28	 mov	 rdx, QWORD PTR size$[rsp]
  0016e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR data$[rsp]
  00173	e8 00 00 00 00	 call	 _PyUnicode_DecodeUnicodeInternal
  00178	48 8b 54 24 28	 mov	 rdx, QWORD PTR size$[rsp]
  0017d	48 8b c8	 mov	 rcx, rax
  00180	e8 00 00 00 00	 call	 codec_tuple
$LN2@unicode_in:
$LN6@unicode_in:

; 253  :     }
; 254  : }

  00185	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00189	c3		 ret	 0
unicode_internal_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@CAJBEMGK@y?$CK?$HMzi?3utf_7_decode?$AA@ ; `string'
EXTRN	PyBuffer_Release:PROC
EXTRN	PyUnicode_DecodeUTF7Stateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_7_decode DD imagerel utf_7_decode
	DD	imagerel utf_7_decode+231
	DD	imagerel $unwind$utf_7_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_7_decode DD 021101H
	DD	0170111H
xdata	ENDS
;	COMDAT ??_C@_0BD@CAJBEMGK@y?$CK?$HMzi?3utf_7_decode?$AA@
CONST	SEGMENT
??_C@_0BD@CAJBEMGK@y?$CK?$HMzi?3utf_7_decode?$AA@ DB 'y*|zi:utf_7_decode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_7_decode
_TEXT	SEGMENT
final$ = 48
decoded$ = 56
pbuf$ = 64
errors$ = 144
consumed$ = 152
tv73 = 160
self$ = 192
args$ = 200
utf_7_decode PROC					; COMDAT

; 259  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 260  :     Py_buffer pbuf;
; 261  :     const char *errors = NULL;

  00011	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 262  :     int final = 0;

  0001d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 263  :     Py_ssize_t consumed;
; 264  :     PyObject *decoded = NULL;

  00025	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR decoded$[rsp], 0

; 265  : 
; 266  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_7_decode",
; 267  :                           &pbuf, &errors, &final))

  0002e	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  00033	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00038	4c 8d 8c 24 90
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  00040	4c 8d 44 24 40	 lea	 r8, QWORD PTR pbuf$[rsp]
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@CAJBEMGK@y?$CK?$HMzi?3utf_7_decode?$AA@
  0004c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00054	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00059	85 c0		 test	 eax, eax
  0005b	75 04		 jne	 SHORT $LN2@utf_7_deco

; 268  :         return NULL;

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 7e		 jmp	 SHORT $LN3@utf_7_deco
$LN2@utf_7_deco:

; 269  :     consumed = pbuf.len;

  00061	48 8b 44 24 50	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00066	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 270  : 
; 271  :     decoded = PyUnicode_DecodeUTF7Stateful(pbuf.buf, pbuf.len, errors,
; 272  :                                            final ? NULL : &consumed);

  0006e	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  00073	74 0e		 je	 SHORT $LN5@utf_7_deco
  00075	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv73[rsp], 0
  00081	eb 10		 jmp	 SHORT $LN6@utf_7_deco
$LN5@utf_7_deco:
  00083	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  0008b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN6@utf_7_deco:
  00093	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR tv73[rsp]
  0009b	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  000a3	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000ad	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF7Stateful
  000b2	48 89 44 24 38	 mov	 QWORD PTR decoded$[rsp], rax

; 273  :     PyBuffer_Release(&pbuf);

  000b7	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000bc	e8 00 00 00 00	 call	 PyBuffer_Release

; 274  :     if (decoded == NULL)

  000c1	48 83 7c 24 38
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  000c7	75 04		 jne	 SHORT $LN1@utf_7_deco

; 275  :         return NULL;

  000c9	33 c0		 xor	 eax, eax
  000cb	eb 12		 jmp	 SHORT $LN3@utf_7_deco
$LN1@utf_7_deco:

; 276  :     return codec_tuple(decoded, consumed);

  000cd	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR consumed$[rsp]
  000d5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoded$[rsp]
  000da	e8 00 00 00 00	 call	 codec_tuple
$LN3@utf_7_deco:

; 277  : }

  000df	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000e6	c3		 ret	 0
utf_7_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@PPCIIDLL@y?$CK?$HMzi?3utf_8_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeUTF8Stateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_8_decode DD imagerel utf_8_decode
	DD	imagerel utf_8_decode+231
	DD	imagerel $unwind$utf_8_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_8_decode DD 021101H
	DD	0170111H
xdata	ENDS
;	COMDAT ??_C@_0BD@PPCIIDLL@y?$CK?$HMzi?3utf_8_decode?$AA@
CONST	SEGMENT
??_C@_0BD@PPCIIDLL@y?$CK?$HMzi?3utf_8_decode?$AA@ DB 'y*|zi:utf_8_decode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_8_decode
_TEXT	SEGMENT
final$ = 48
decoded$ = 56
pbuf$ = 64
errors$ = 144
consumed$ = 152
tv73 = 160
self$ = 192
args$ = 200
utf_8_decode PROC					; COMDAT

; 282  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 283  :     Py_buffer pbuf;
; 284  :     const char *errors = NULL;

  00011	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 285  :     int final = 0;

  0001d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 286  :     Py_ssize_t consumed;
; 287  :     PyObject *decoded = NULL;

  00025	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR decoded$[rsp], 0

; 288  : 
; 289  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_8_decode",
; 290  :                           &pbuf, &errors, &final))

  0002e	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  00033	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00038	4c 8d 8c 24 90
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  00040	4c 8d 44 24 40	 lea	 r8, QWORD PTR pbuf$[rsp]
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@PPCIIDLL@y?$CK?$HMzi?3utf_8_decode?$AA@
  0004c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00054	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00059	85 c0		 test	 eax, eax
  0005b	75 04		 jne	 SHORT $LN2@utf_8_deco

; 291  :         return NULL;

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 7e		 jmp	 SHORT $LN3@utf_8_deco
$LN2@utf_8_deco:

; 292  :     consumed = pbuf.len;

  00061	48 8b 44 24 50	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00066	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 293  : 
; 294  :     decoded = PyUnicode_DecodeUTF8Stateful(pbuf.buf, pbuf.len, errors,
; 295  :                                            final ? NULL : &consumed);

  0006e	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  00073	74 0e		 je	 SHORT $LN5@utf_8_deco
  00075	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv73[rsp], 0
  00081	eb 10		 jmp	 SHORT $LN6@utf_8_deco
$LN5@utf_8_deco:
  00083	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  0008b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN6@utf_8_deco:
  00093	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR tv73[rsp]
  0009b	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  000a3	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000ad	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF8Stateful
  000b2	48 89 44 24 38	 mov	 QWORD PTR decoded$[rsp], rax

; 296  :     PyBuffer_Release(&pbuf);

  000b7	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000bc	e8 00 00 00 00	 call	 PyBuffer_Release

; 297  :     if (decoded == NULL)

  000c1	48 83 7c 24 38
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  000c7	75 04		 jne	 SHORT $LN1@utf_8_deco

; 298  :         return NULL;

  000c9	33 c0		 xor	 eax, eax
  000cb	eb 12		 jmp	 SHORT $LN3@utf_8_deco
$LN1@utf_8_deco:

; 299  :     return codec_tuple(decoded, consumed);

  000cd	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR consumed$[rsp]
  000d5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoded$[rsp]
  000da	e8 00 00 00 00	 call	 codec_tuple
$LN3@utf_8_deco:

; 300  : }

  000df	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000e6	c3		 ret	 0
utf_8_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@PDKJGGOF@y?$CK?$HMzi?3utf_16_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeUTF16Stateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_16_decode DD imagerel utf_16_decode
	DD	imagerel utf_16_decode+243
	DD	imagerel $unwind$utf_16_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_decode DD 021101H
	DD	0190111H
xdata	ENDS
;	COMDAT ??_C@_0BE@PDKJGGOF@y?$CK?$HMzi?3utf_16_decode?$AA@
CONST	SEGMENT
??_C@_0BE@PDKJGGOF@y?$CK?$HMzi?3utf_16_decode?$AA@ DB 'y*|zi:utf_16_decod'
	DB	'e', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_16_decode
_TEXT	SEGMENT
final$ = 48
decoded$ = 56
byteorder$ = 64
pbuf$ = 80
errors$ = 160
consumed$ = 168
tv73 = 176
self$ = 208
args$ = 216
utf_16_decode PROC					; COMDAT

; 305  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 306  :     Py_buffer pbuf;
; 307  :     const char *errors = NULL;

  00011	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 308  :     int byteorder = 0;

  0001d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR byteorder$[rsp], 0

; 309  :     int final = 0;

  00025	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 310  :     Py_ssize_t consumed;
; 311  :     PyObject *decoded;
; 312  : 
; 313  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_16_decode",
; 314  :                           &pbuf, &errors, &final))

  0002d	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00037	4c 8d 8c 24 a0
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  0003f	4c 8d 44 24 50	 lea	 r8, QWORD PTR pbuf$[rsp]
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@PDKJGGOF@y?$CK?$HMzi?3utf_16_decode?$AA@
  0004b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00053	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00058	85 c0		 test	 eax, eax
  0005a	75 07		 jne	 SHORT $LN2@utf_16_dec

; 315  :         return NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	e9 88 00 00 00	 jmp	 $LN3@utf_16_dec
$LN2@utf_16_dec:

; 316  :     consumed = pbuf.len; /* This is overwritten unless final is true. */

  00063	48 8b 44 24 60	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00068	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 317  :     decoded = PyUnicode_DecodeUTF16Stateful(pbuf.buf, pbuf.len, errors,
; 318  :                                         &byteorder, final ? NULL : &consumed);

  00070	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  00075	74 0e		 je	 SHORT $LN5@utf_16_dec
  00077	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv73[rsp], 0
  00083	eb 10		 jmp	 SHORT $LN6@utf_16_dec
$LN5@utf_16_dec:
  00085	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  0008d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN6@utf_16_dec:
  00095	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv73[rsp]
  0009d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a2	4c 8d 4c 24 40	 lea	 r9, QWORD PTR byteorder$[rsp]
  000a7	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  000af	48 8b 54 24 60	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000b9	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF16Stateful
  000be	48 89 44 24 38	 mov	 QWORD PTR decoded$[rsp], rax

; 319  :     PyBuffer_Release(&pbuf);

  000c3	48 8d 4c 24 50	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000c8	e8 00 00 00 00	 call	 PyBuffer_Release

; 320  :     if (decoded == NULL)

  000cd	48 83 7c 24 38
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  000d3	75 04		 jne	 SHORT $LN1@utf_16_dec

; 321  :         return NULL;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb 12		 jmp	 SHORT $LN3@utf_16_dec
$LN1@utf_16_dec:

; 322  :     return codec_tuple(decoded, consumed);

  000d9	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR consumed$[rsp]
  000e1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoded$[rsp]
  000e6	e8 00 00 00 00	 call	 codec_tuple
$LN3@utf_16_dec:

; 323  : }

  000eb	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000f2	c3		 ret	 0
utf_16_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@IADLKKKH@y?$CK?$HMzi?3utf_16_le_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_16_le_decode DD imagerel utf_16_le_decode
	DD	imagerel utf_16_le_decode+252
	DD	imagerel $unwind$utf_16_le_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_le_decode DD 021101H
	DD	0190111H
xdata	ENDS
;	COMDAT ??_C@_0BH@IADLKKKH@y?$CK?$HMzi?3utf_16_le_decode?$AA@
CONST	SEGMENT
??_C@_0BH@IADLKKKH@y?$CK?$HMzi?3utf_16_le_decode?$AA@ DB 'y*|zi:utf_16_le'
	DB	'_decode', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_16_le_decode
_TEXT	SEGMENT
final$ = 48
decoded$ = 56
byteorder$ = 64
pbuf$ = 80
errors$ = 160
consumed$ = 168
tv73 = 176
self$ = 208
args$ = 216
utf_16_le_decode PROC					; COMDAT

; 328  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 329  :     Py_buffer pbuf;
; 330  :     const char *errors = NULL;

  00011	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 331  :     int byteorder = -1;

  0001d	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR byteorder$[rsp], -1

; 332  :     int final = 0;

  00025	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 333  :     Py_ssize_t consumed;
; 334  :     PyObject *decoded = NULL;

  0002d	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR decoded$[rsp], 0

; 335  : 
; 336  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_16_le_decode",
; 337  :                           &pbuf, &errors, &final))

  00036	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  0003b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00040	4c 8d 8c 24 a0
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  00048	4c 8d 44 24 50	 lea	 r8, QWORD PTR pbuf$[rsp]
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IADLKKKH@y?$CK?$HMzi?3utf_16_le_decode?$AA@
  00054	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005c	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00061	85 c0		 test	 eax, eax
  00063	75 07		 jne	 SHORT $LN2@utf_16_le_

; 338  :         return NULL;

  00065	33 c0		 xor	 eax, eax
  00067	e9 88 00 00 00	 jmp	 $LN3@utf_16_le_
$LN2@utf_16_le_:

; 339  : 
; 340  :     consumed = pbuf.len; /* This is overwritten unless final is true. */

  0006c	48 8b 44 24 60	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00071	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 341  :     decoded = PyUnicode_DecodeUTF16Stateful(pbuf.buf, pbuf.len, errors,
; 342  :         &byteorder, final ? NULL : &consumed);

  00079	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  0007e	74 0e		 je	 SHORT $LN5@utf_16_le_
  00080	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv73[rsp], 0
  0008c	eb 10		 jmp	 SHORT $LN6@utf_16_le_
$LN5@utf_16_le_:
  0008e	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  00096	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN6@utf_16_le_:
  0009e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv73[rsp]
  000a6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ab	4c 8d 4c 24 40	 lea	 r9, QWORD PTR byteorder$[rsp]
  000b0	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  000b8	48 8b 54 24 60	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000bd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000c2	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF16Stateful
  000c7	48 89 44 24 38	 mov	 QWORD PTR decoded$[rsp], rax

; 343  :     PyBuffer_Release(&pbuf);

  000cc	48 8d 4c 24 50	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000d1	e8 00 00 00 00	 call	 PyBuffer_Release

; 344  :     if (decoded == NULL)

  000d6	48 83 7c 24 38
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  000dc	75 04		 jne	 SHORT $LN1@utf_16_le_

; 345  :         return NULL;

  000de	33 c0		 xor	 eax, eax
  000e0	eb 12		 jmp	 SHORT $LN3@utf_16_le_
$LN1@utf_16_le_:

; 346  :     return codec_tuple(decoded, consumed);

  000e2	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR consumed$[rsp]
  000ea	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoded$[rsp]
  000ef	e8 00 00 00 00	 call	 codec_tuple
$LN3@utf_16_le_:

; 347  : }

  000f4	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000fb	c3		 ret	 0
utf_16_le_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@JOPCJKBE@y?$CK?$HMzi?3utf_16_be_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_16_be_decode DD imagerel utf_16_be_decode
	DD	imagerel utf_16_be_decode+252
	DD	imagerel $unwind$utf_16_be_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_be_decode DD 021101H
	DD	0190111H
xdata	ENDS
;	COMDAT ??_C@_0BH@JOPCJKBE@y?$CK?$HMzi?3utf_16_be_decode?$AA@
CONST	SEGMENT
??_C@_0BH@JOPCJKBE@y?$CK?$HMzi?3utf_16_be_decode?$AA@ DB 'y*|zi:utf_16_be'
	DB	'_decode', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_16_be_decode
_TEXT	SEGMENT
final$ = 48
decoded$ = 56
byteorder$ = 64
pbuf$ = 80
errors$ = 160
consumed$ = 168
tv73 = 176
self$ = 208
args$ = 216
utf_16_be_decode PROC					; COMDAT

; 352  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 353  :     Py_buffer pbuf;
; 354  :     const char *errors = NULL;

  00011	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 355  :     int byteorder = 1;

  0001d	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR byteorder$[rsp], 1

; 356  :     int final = 0;

  00025	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 357  :     Py_ssize_t consumed;
; 358  :     PyObject *decoded = NULL;

  0002d	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR decoded$[rsp], 0

; 359  : 
; 360  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_16_be_decode",
; 361  :                           &pbuf, &errors, &final))

  00036	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  0003b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00040	4c 8d 8c 24 a0
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  00048	4c 8d 44 24 50	 lea	 r8, QWORD PTR pbuf$[rsp]
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@JOPCJKBE@y?$CK?$HMzi?3utf_16_be_decode?$AA@
  00054	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005c	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00061	85 c0		 test	 eax, eax
  00063	75 07		 jne	 SHORT $LN2@utf_16_be_

; 362  :         return NULL;

  00065	33 c0		 xor	 eax, eax
  00067	e9 88 00 00 00	 jmp	 $LN3@utf_16_be_
$LN2@utf_16_be_:

; 363  : 
; 364  :     consumed = pbuf.len; /* This is overwritten unless final is true. */

  0006c	48 8b 44 24 60	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00071	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 365  :     decoded = PyUnicode_DecodeUTF16Stateful(pbuf.buf, pbuf.len, errors,
; 366  :         &byteorder, final ? NULL : &consumed);

  00079	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  0007e	74 0e		 je	 SHORT $LN5@utf_16_be_
  00080	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv73[rsp], 0
  0008c	eb 10		 jmp	 SHORT $LN6@utf_16_be_
$LN5@utf_16_be_:
  0008e	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  00096	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN6@utf_16_be_:
  0009e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv73[rsp]
  000a6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ab	4c 8d 4c 24 40	 lea	 r9, QWORD PTR byteorder$[rsp]
  000b0	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  000b8	48 8b 54 24 60	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000bd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000c2	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF16Stateful
  000c7	48 89 44 24 38	 mov	 QWORD PTR decoded$[rsp], rax

; 367  :     PyBuffer_Release(&pbuf);

  000cc	48 8d 4c 24 50	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000d1	e8 00 00 00 00	 call	 PyBuffer_Release

; 368  :     if (decoded == NULL)

  000d6	48 83 7c 24 38
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  000dc	75 04		 jne	 SHORT $LN1@utf_16_be_

; 369  :         return NULL;

  000de	33 c0		 xor	 eax, eax
  000e0	eb 12		 jmp	 SHORT $LN3@utf_16_be_
$LN1@utf_16_be_:

; 370  :     return codec_tuple(decoded, consumed);

  000e2	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR consumed$[rsp]
  000ea	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoded$[rsp]
  000ef	e8 00 00 00 00	 call	 codec_tuple
$LN3@utf_16_be_:

; 371  : }

  000f4	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000fb	c3		 ret	 0
utf_16_be_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_03OLLKFOEM@Oni?$AA@			; `string'
PUBLIC	??_C@_0BI@NOMOJOCK@y?$CK?$HMzii?3utf_16_ex_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_16_ex_decode DD imagerel utf_16_ex_decode
	DD	imagerel utf_16_ex_decode+303
	DD	imagerel $unwind$utf_16_ex_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_ex_decode DD 021101H
	DD	0190111H
xdata	ENDS
;	COMDAT ??_C@_03OLLKFOEM@Oni?$AA@
CONST	SEGMENT
??_C@_03OLLKFOEM@Oni?$AA@ DB 'Oni', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NOMOJOCK@y?$CK?$HMzii?3utf_16_ex_decode?$AA@
CONST	SEGMENT
??_C@_0BI@NOMOJOCK@y?$CK?$HMzii?3utf_16_ex_decode?$AA@ DB 'y*|zii:utf_16_'
	DB	'ex_decode', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_16_ex_decode
_TEXT	SEGMENT
final$ = 48
byteorder$ = 52
pbuf$ = 64
errors$ = 144
tuple$ = 152
consumed$ = 160
unicode$ = 168
tv74 = 176
self$ = 208
args$ = 216
utf_16_ex_decode PROC					; COMDAT

; 384  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 385  :     Py_buffer pbuf;
; 386  :     const char *errors = NULL;

  00011	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 387  :     int byteorder = 0;

  0001d	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR byteorder$[rsp], 0

; 388  :     PyObject *unicode, *tuple;
; 389  :     int final = 0;

  00025	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 390  :     Py_ssize_t consumed;
; 391  : 
; 392  :     if (!PyArg_ParseTuple(args, "y*|zii:utf_16_ex_decode",
; 393  :                           &pbuf, &errors, &byteorder, &final))

  0002d	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  00032	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00037	48 8d 44 24 34	 lea	 rax, QWORD PTR byteorder$[rsp]
  0003c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00041	4c 8d 8c 24 90
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  00049	4c 8d 44 24 40	 lea	 r8, QWORD PTR pbuf$[rsp]
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NOMOJOCK@y?$CK?$HMzii?3utf_16_ex_decode?$AA@
  00055	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00062	85 c0		 test	 eax, eax
  00064	75 07		 jne	 SHORT $LN2@utf_16_ex_

; 394  :         return NULL;

  00066	33 c0		 xor	 eax, eax
  00068	e9 ba 00 00 00	 jmp	 $LN3@utf_16_ex_
$LN2@utf_16_ex_:

; 395  :     consumed = pbuf.len; /* This is overwritten unless final is true. */

  0006d	48 8b 44 24 50	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00072	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 396  :     unicode = PyUnicode_DecodeUTF16Stateful(pbuf.buf, pbuf.len, errors,
; 397  :                                         &byteorder, final ? NULL : &consumed);

  0007a	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  0007f	74 0e		 je	 SHORT $LN5@utf_16_ex_
  00081	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv74[rsp], 0
  0008d	eb 10		 jmp	 SHORT $LN6@utf_16_ex_
$LN5@utf_16_ex_:
  0008f	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  00097	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv74[rsp], rax
$LN6@utf_16_ex_:
  0009f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv74[rsp]
  000a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ac	4c 8d 4c 24 34	 lea	 r9, QWORD PTR byteorder$[rsp]
  000b1	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  000b9	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000be	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000c3	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF16Stateful
  000c8	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR unicode$[rsp], rax

; 398  :     PyBuffer_Release(&pbuf);

  000d0	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000d5	e8 00 00 00 00	 call	 PyBuffer_Release

; 399  :     if (unicode == NULL)

  000da	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR unicode$[rsp], 0
  000e3	75 04		 jne	 SHORT $LN1@utf_16_ex_

; 400  :         return NULL;

  000e5	33 c0		 xor	 eax, eax
  000e7	eb 3e		 jmp	 SHORT $LN3@utf_16_ex_
$LN1@utf_16_ex_:

; 401  :     tuple = Py_BuildValue("Oni", unicode, consumed, byteorder);

  000e9	44 8b 4c 24 34	 mov	 r9d, DWORD PTR byteorder$[rsp]
  000ee	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR consumed$[rsp]
  000f6	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR unicode$[rsp]
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OLLKFOEM@Oni?$AA@
  00105	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  0010a	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tuple$[rsp], rax

; 402  :     Py_DECREF(unicode);

  00112	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR unicode$[rsp]
  0011a	e8 00 00 00 00	 call	 _Py_DecRef

; 403  :     return tuple;

  0011f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tuple$[rsp]
$LN3@utf_16_ex_:

; 404  : }

  00127	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0012e	c3		 ret	 0
utf_16_ex_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@KKLAOHNE@y?$CK?$HMzi?3utf_32_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeUTF32Stateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_32_decode DD imagerel utf_32_decode
	DD	imagerel utf_32_decode+243
	DD	imagerel $unwind$utf_32_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_decode DD 021101H
	DD	0190111H
xdata	ENDS
;	COMDAT ??_C@_0BE@KKLAOHNE@y?$CK?$HMzi?3utf_32_decode?$AA@
CONST	SEGMENT
??_C@_0BE@KKLAOHNE@y?$CK?$HMzi?3utf_32_decode?$AA@ DB 'y*|zi:utf_32_decod'
	DB	'e', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_32_decode
_TEXT	SEGMENT
final$ = 48
decoded$ = 56
byteorder$ = 64
pbuf$ = 80
errors$ = 160
consumed$ = 168
tv73 = 176
self$ = 208
args$ = 216
utf_32_decode PROC					; COMDAT

; 409  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 410  :     Py_buffer pbuf;
; 411  :     const char *errors = NULL;

  00011	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 412  :     int byteorder = 0;

  0001d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR byteorder$[rsp], 0

; 413  :     int final = 0;

  00025	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 414  :     Py_ssize_t consumed;
; 415  :     PyObject *decoded;
; 416  : 
; 417  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_32_decode",
; 418  :                           &pbuf, &errors, &final))

  0002d	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00037	4c 8d 8c 24 a0
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  0003f	4c 8d 44 24 50	 lea	 r8, QWORD PTR pbuf$[rsp]
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@KKLAOHNE@y?$CK?$HMzi?3utf_32_decode?$AA@
  0004b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00053	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00058	85 c0		 test	 eax, eax
  0005a	75 07		 jne	 SHORT $LN2@utf_32_dec

; 419  :         return NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	e9 88 00 00 00	 jmp	 $LN3@utf_32_dec
$LN2@utf_32_dec:

; 420  :     consumed = pbuf.len; /* This is overwritten unless final is true. */

  00063	48 8b 44 24 60	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00068	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 421  :     decoded = PyUnicode_DecodeUTF32Stateful(pbuf.buf, pbuf.len, errors,
; 422  :                                         &byteorder, final ? NULL : &consumed);

  00070	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  00075	74 0e		 je	 SHORT $LN5@utf_32_dec
  00077	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv73[rsp], 0
  00083	eb 10		 jmp	 SHORT $LN6@utf_32_dec
$LN5@utf_32_dec:
  00085	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  0008d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN6@utf_32_dec:
  00095	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv73[rsp]
  0009d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a2	4c 8d 4c 24 40	 lea	 r9, QWORD PTR byteorder$[rsp]
  000a7	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  000af	48 8b 54 24 60	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000b9	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF32Stateful
  000be	48 89 44 24 38	 mov	 QWORD PTR decoded$[rsp], rax

; 423  :     PyBuffer_Release(&pbuf);

  000c3	48 8d 4c 24 50	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000c8	e8 00 00 00 00	 call	 PyBuffer_Release

; 424  :     if (decoded == NULL)

  000cd	48 83 7c 24 38
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  000d3	75 04		 jne	 SHORT $LN1@utf_32_dec

; 425  :         return NULL;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb 12		 jmp	 SHORT $LN3@utf_32_dec
$LN1@utf_32_dec:

; 426  :     return codec_tuple(decoded, consumed);

  000d9	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR consumed$[rsp]
  000e1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoded$[rsp]
  000e6	e8 00 00 00 00	 call	 codec_tuple
$LN3@utf_32_dec:

; 427  : }

  000eb	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000f2	c3		 ret	 0
utf_32_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@ODGBCEJD@y?$CK?$HMzi?3utf_32_le_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_32_le_decode DD imagerel utf_32_le_decode
	DD	imagerel utf_32_le_decode+243
	DD	imagerel $unwind$utf_32_le_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_le_decode DD 021101H
	DD	0190111H
xdata	ENDS
;	COMDAT ??_C@_0BH@ODGBCEJD@y?$CK?$HMzi?3utf_32_le_decode?$AA@
CONST	SEGMENT
??_C@_0BH@ODGBCEJD@y?$CK?$HMzi?3utf_32_le_decode?$AA@ DB 'y*|zi:utf_32_le'
	DB	'_decode', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_32_le_decode
_TEXT	SEGMENT
final$ = 48
decoded$ = 56
byteorder$ = 64
pbuf$ = 80
errors$ = 160
consumed$ = 168
tv73 = 176
self$ = 208
args$ = 216
utf_32_le_decode PROC					; COMDAT

; 432  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 433  :     Py_buffer pbuf;
; 434  :     const char *errors = NULL;

  00011	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 435  :     int byteorder = -1;

  0001d	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR byteorder$[rsp], -1

; 436  :     int final = 0;

  00025	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 437  :     Py_ssize_t consumed;
; 438  :     PyObject *decoded;
; 439  : 
; 440  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_32_le_decode",
; 441  :                           &pbuf, &errors, &final))

  0002d	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00037	4c 8d 8c 24 a0
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  0003f	4c 8d 44 24 50	 lea	 r8, QWORD PTR pbuf$[rsp]
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@ODGBCEJD@y?$CK?$HMzi?3utf_32_le_decode?$AA@
  0004b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00053	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00058	85 c0		 test	 eax, eax
  0005a	75 07		 jne	 SHORT $LN2@utf_32_le_

; 442  :         return NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	e9 88 00 00 00	 jmp	 $LN3@utf_32_le_
$LN2@utf_32_le_:

; 443  :     consumed = pbuf.len; /* This is overwritten unless final is true. */

  00063	48 8b 44 24 60	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00068	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 444  :     decoded = PyUnicode_DecodeUTF32Stateful(pbuf.buf, pbuf.len, errors,
; 445  :                                         &byteorder, final ? NULL : &consumed);

  00070	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  00075	74 0e		 je	 SHORT $LN5@utf_32_le_
  00077	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv73[rsp], 0
  00083	eb 10		 jmp	 SHORT $LN6@utf_32_le_
$LN5@utf_32_le_:
  00085	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  0008d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN6@utf_32_le_:
  00095	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv73[rsp]
  0009d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a2	4c 8d 4c 24 40	 lea	 r9, QWORD PTR byteorder$[rsp]
  000a7	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  000af	48 8b 54 24 60	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000b9	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF32Stateful
  000be	48 89 44 24 38	 mov	 QWORD PTR decoded$[rsp], rax

; 446  :     PyBuffer_Release(&pbuf);

  000c3	48 8d 4c 24 50	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000c8	e8 00 00 00 00	 call	 PyBuffer_Release

; 447  :     if (decoded == NULL)

  000cd	48 83 7c 24 38
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  000d3	75 04		 jne	 SHORT $LN1@utf_32_le_

; 448  :         return NULL;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb 12		 jmp	 SHORT $LN3@utf_32_le_
$LN1@utf_32_le_:

; 449  :     return codec_tuple(decoded, consumed);

  000d9	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR consumed$[rsp]
  000e1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoded$[rsp]
  000e6	e8 00 00 00 00	 call	 codec_tuple
$LN3@utf_32_le_:

; 450  : }

  000eb	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000f2	c3		 ret	 0
utf_32_le_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@PNKIBECA@y?$CK?$HMzi?3utf_32_be_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_32_be_decode DD imagerel utf_32_be_decode
	DD	imagerel utf_32_be_decode+243
	DD	imagerel $unwind$utf_32_be_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_be_decode DD 021101H
	DD	0190111H
xdata	ENDS
;	COMDAT ??_C@_0BH@PNKIBECA@y?$CK?$HMzi?3utf_32_be_decode?$AA@
CONST	SEGMENT
??_C@_0BH@PNKIBECA@y?$CK?$HMzi?3utf_32_be_decode?$AA@ DB 'y*|zi:utf_32_be'
	DB	'_decode', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_32_be_decode
_TEXT	SEGMENT
final$ = 48
decoded$ = 56
byteorder$ = 64
pbuf$ = 80
errors$ = 160
consumed$ = 168
tv73 = 176
self$ = 208
args$ = 216
utf_32_be_decode PROC					; COMDAT

; 455  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 456  :     Py_buffer pbuf;
; 457  :     const char *errors = NULL;

  00011	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 458  :     int byteorder = 1;

  0001d	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR byteorder$[rsp], 1

; 459  :     int final = 0;

  00025	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 460  :     Py_ssize_t consumed;
; 461  :     PyObject *decoded;
; 462  : 
; 463  :     if (!PyArg_ParseTuple(args, "y*|zi:utf_32_be_decode",
; 464  :                           &pbuf, &errors, &final))

  0002d	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00037	4c 8d 8c 24 a0
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  0003f	4c 8d 44 24 50	 lea	 r8, QWORD PTR pbuf$[rsp]
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PNKIBECA@y?$CK?$HMzi?3utf_32_be_decode?$AA@
  0004b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00053	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00058	85 c0		 test	 eax, eax
  0005a	75 07		 jne	 SHORT $LN2@utf_32_be_

; 465  :         return NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	e9 88 00 00 00	 jmp	 $LN3@utf_32_be_
$LN2@utf_32_be_:

; 466  :     consumed = pbuf.len; /* This is overwritten unless final is true. */

  00063	48 8b 44 24 60	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00068	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 467  :     decoded = PyUnicode_DecodeUTF32Stateful(pbuf.buf, pbuf.len, errors,
; 468  :                                         &byteorder, final ? NULL : &consumed);

  00070	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  00075	74 0e		 je	 SHORT $LN5@utf_32_be_
  00077	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv73[rsp], 0
  00083	eb 10		 jmp	 SHORT $LN6@utf_32_be_
$LN5@utf_32_be_:
  00085	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  0008d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN6@utf_32_be_:
  00095	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv73[rsp]
  0009d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a2	4c 8d 4c 24 40	 lea	 r9, QWORD PTR byteorder$[rsp]
  000a7	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  000af	48 8b 54 24 60	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000b9	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF32Stateful
  000be	48 89 44 24 38	 mov	 QWORD PTR decoded$[rsp], rax

; 469  :     PyBuffer_Release(&pbuf);

  000c3	48 8d 4c 24 50	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000c8	e8 00 00 00 00	 call	 PyBuffer_Release

; 470  :     if (decoded == NULL)

  000cd	48 83 7c 24 38
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  000d3	75 04		 jne	 SHORT $LN1@utf_32_be_

; 471  :         return NULL;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb 12		 jmp	 SHORT $LN3@utf_32_be_
$LN1@utf_32_be_:

; 472  :     return codec_tuple(decoded, consumed);

  000d9	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR consumed$[rsp]
  000e1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoded$[rsp]
  000e6	e8 00 00 00 00	 call	 codec_tuple
$LN3@utf_32_be_:

; 473  : }

  000eb	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000f2	c3		 ret	 0
utf_32_be_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@LNJEBABO@y?$CK?$HMzii?3utf_32_ex_decode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_32_ex_decode DD imagerel utf_32_ex_decode
	DD	imagerel utf_32_ex_decode+303
	DD	imagerel $unwind$utf_32_ex_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_ex_decode DD 021101H
	DD	0190111H
xdata	ENDS
;	COMDAT ??_C@_0BI@LNJEBABO@y?$CK?$HMzii?3utf_32_ex_decode?$AA@
CONST	SEGMENT
??_C@_0BI@LNJEBABO@y?$CK?$HMzii?3utf_32_ex_decode?$AA@ DB 'y*|zii:utf_32_'
	DB	'ex_decode', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_32_ex_decode
_TEXT	SEGMENT
final$ = 48
byteorder$ = 52
pbuf$ = 64
errors$ = 144
tuple$ = 152
consumed$ = 160
unicode$ = 168
tv74 = 176
self$ = 208
args$ = 216
utf_32_ex_decode PROC					; COMDAT

; 486  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 487  :     Py_buffer pbuf;
; 488  :     const char *errors = NULL;

  00011	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 489  :     int byteorder = 0;

  0001d	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR byteorder$[rsp], 0

; 490  :     PyObject *unicode, *tuple;
; 491  :     int final = 0;

  00025	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 492  :     Py_ssize_t consumed;
; 493  : 
; 494  :     if (!PyArg_ParseTuple(args, "y*|zii:utf_32_ex_decode",
; 495  :                           &pbuf, &errors, &byteorder, &final))

  0002d	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  00032	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00037	48 8d 44 24 34	 lea	 rax, QWORD PTR byteorder$[rsp]
  0003c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00041	4c 8d 8c 24 90
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  00049	4c 8d 44 24 40	 lea	 r8, QWORD PTR pbuf$[rsp]
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNJEBABO@y?$CK?$HMzii?3utf_32_ex_decode?$AA@
  00055	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00062	85 c0		 test	 eax, eax
  00064	75 07		 jne	 SHORT $LN2@utf_32_ex_

; 496  :         return NULL;

  00066	33 c0		 xor	 eax, eax
  00068	e9 ba 00 00 00	 jmp	 $LN3@utf_32_ex_
$LN2@utf_32_ex_:

; 497  :     consumed = pbuf.len; /* This is overwritten unless final is true. */

  0006d	48 8b 44 24 50	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00072	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 498  :     unicode = PyUnicode_DecodeUTF32Stateful(pbuf.buf, pbuf.len, errors,
; 499  :                                         &byteorder, final ? NULL : &consumed);

  0007a	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  0007f	74 0e		 je	 SHORT $LN5@utf_32_ex_
  00081	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv74[rsp], 0
  0008d	eb 10		 jmp	 SHORT $LN6@utf_32_ex_
$LN5@utf_32_ex_:
  0008f	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  00097	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv74[rsp], rax
$LN6@utf_32_ex_:
  0009f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv74[rsp]
  000a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ac	4c 8d 4c 24 34	 lea	 r9, QWORD PTR byteorder$[rsp]
  000b1	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  000b9	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000be	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000c3	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF32Stateful
  000c8	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR unicode$[rsp], rax

; 500  :     PyBuffer_Release(&pbuf);

  000d0	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000d5	e8 00 00 00 00	 call	 PyBuffer_Release

; 501  :     if (unicode == NULL)

  000da	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR unicode$[rsp], 0
  000e3	75 04		 jne	 SHORT $LN1@utf_32_ex_

; 502  :         return NULL;

  000e5	33 c0		 xor	 eax, eax
  000e7	eb 3e		 jmp	 SHORT $LN3@utf_32_ex_
$LN1@utf_32_ex_:

; 503  :     tuple = Py_BuildValue("Oni", unicode, consumed, byteorder);

  000e9	44 8b 4c 24 34	 mov	 r9d, DWORD PTR byteorder$[rsp]
  000ee	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR consumed$[rsp]
  000f6	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR unicode$[rsp]
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OLLKFOEM@Oni?$AA@
  00105	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  0010a	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tuple$[rsp], rax

; 504  :     Py_DECREF(unicode);

  00112	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR unicode$[rsp]
  0011a	e8 00 00 00 00	 call	 _Py_DecRef

; 505  :     return tuple;

  0011f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tuple$[rsp]
$LN3@utf_32_ex_:

; 506  : }

  00127	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0012e	c3		 ret	 0
utf_32_ex_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@PIIBPOCB@s?$CK?$HMz?3unicode_escape_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeUnicodeEscape:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$unicode_escape_decode DD imagerel unicode_escape_decode
	DD	imagerel unicode_escape_decode+122
	DD	imagerel $unwind$unicode_escape_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unicode_escape_decode DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0BL@PIIBPOCB@s?$CK?$HMz?3unicode_escape_decode?$AA@
CONST	SEGMENT
??_C@_0BL@PIIBPOCB@s?$CK?$HMz?3unicode_escape_decode?$AA@ DB 's*|z:unicod'
	DB	'e_escape_decode', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT unicode_escape_decode
_TEXT	SEGMENT
pbuf$ = 32
errors$ = 112
unicode$ = 120
self$ = 144
args$ = 152
unicode_escape_decode PROC				; COMDAT

; 511  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 512  :     Py_buffer pbuf;
; 513  :     const char *errors = NULL;

  00011	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 514  :         PyObject *unicode;
; 515  : 
; 516  :     if (!PyArg_ParseTuple(args, "s*|z:unicode_escape_decode",
; 517  :                           &pbuf, &errors))

  0001a	4c 8d 4c 24 70	 lea	 r9, QWORD PTR errors$[rsp]
  0001f	4c 8d 44 24 20	 lea	 r8, QWORD PTR pbuf$[rsp]
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@PIIBPOCB@s?$CK?$HMz?3unicode_escape_decode?$AA@
  0002b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00033	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00038	85 c0		 test	 eax, eax
  0003a	75 04		 jne	 SHORT $LN1@unicode_es

; 518  :         return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 32		 jmp	 SHORT $LN2@unicode_es
$LN1@unicode_es:

; 519  : 
; 520  :     unicode = PyUnicode_DecodeUnicodeEscape(pbuf.buf, pbuf.len, errors);

  00040	4c 8b 44 24 70	 mov	 r8, QWORD PTR errors$[rsp]
  00045	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0004a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  0004f	e8 00 00 00 00	 call	 PyUnicode_DecodeUnicodeEscape
  00054	48 89 44 24 78	 mov	 QWORD PTR unicode$[rsp], rax

; 521  :     PyBuffer_Release(&pbuf);

  00059	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  0005e	e8 00 00 00 00	 call	 PyBuffer_Release

; 522  :     return codec_tuple(unicode, pbuf.len);

  00063	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  00068	48 8b 4c 24 78	 mov	 rcx, QWORD PTR unicode$[rsp]
  0006d	e8 00 00 00 00	 call	 codec_tuple
$LN2@unicode_es:

; 523  : }

  00072	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00079	c3		 ret	 0
unicode_escape_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@PHCHJPMD@s?$CK?$HMz?3raw_unicode_escape_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeRawUnicodeEscape:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$raw_unicode_escape_decode DD imagerel raw_unicode_escape_decode
	DD	imagerel raw_unicode_escape_decode+122
	DD	imagerel $unwind$raw_unicode_escape_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$raw_unicode_escape_decode DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0BP@PHCHJPMD@s?$CK?$HMz?3raw_unicode_escape_decode?$AA@
CONST	SEGMENT
??_C@_0BP@PHCHJPMD@s?$CK?$HMz?3raw_unicode_escape_decode?$AA@ DB 's*|z:ra'
	DB	'w_unicode_escape_decode', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT raw_unicode_escape_decode
_TEXT	SEGMENT
pbuf$ = 32
errors$ = 112
unicode$ = 120
self$ = 144
args$ = 152
raw_unicode_escape_decode PROC				; COMDAT

; 528  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 529  :     Py_buffer pbuf;
; 530  :     const char *errors = NULL;

  00011	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 531  :     PyObject *unicode;
; 532  : 
; 533  :     if (!PyArg_ParseTuple(args, "s*|z:raw_unicode_escape_decode",
; 534  :                           &pbuf, &errors))

  0001a	4c 8d 4c 24 70	 lea	 r9, QWORD PTR errors$[rsp]
  0001f	4c 8d 44 24 20	 lea	 r8, QWORD PTR pbuf$[rsp]
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@PHCHJPMD@s?$CK?$HMz?3raw_unicode_escape_decode?$AA@
  0002b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00033	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00038	85 c0		 test	 eax, eax
  0003a	75 04		 jne	 SHORT $LN1@raw_unicod

; 535  :         return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 32		 jmp	 SHORT $LN2@raw_unicod
$LN1@raw_unicod:

; 536  : 
; 537  :     unicode = PyUnicode_DecodeRawUnicodeEscape(pbuf.buf, pbuf.len, errors);

  00040	4c 8b 44 24 70	 mov	 r8, QWORD PTR errors$[rsp]
  00045	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0004a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  0004f	e8 00 00 00 00	 call	 PyUnicode_DecodeRawUnicodeEscape
  00054	48 89 44 24 78	 mov	 QWORD PTR unicode$[rsp], rax

; 538  :     PyBuffer_Release(&pbuf);

  00059	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  0005e	e8 00 00 00 00	 call	 PyBuffer_Release

; 539  :     return codec_tuple(unicode, pbuf.len);

  00063	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  00068	48 8b 4c 24 78	 mov	 rcx, QWORD PTR unicode$[rsp]
  0006d	e8 00 00 00 00	 call	 codec_tuple
$LN2@raw_unicod:

; 540  : }

  00072	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00079	c3		 ret	 0
raw_unicode_escape_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@PBHKMLGD@y?$CK?$HMz?3latin_1_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeLatin1:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$latin_1_decode DD imagerel latin_1_decode
	DD	imagerel latin_1_decode+122
	DD	imagerel $unwind$latin_1_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$latin_1_decode DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0BE@PBHKMLGD@y?$CK?$HMz?3latin_1_decode?$AA@
CONST	SEGMENT
??_C@_0BE@PBHKMLGD@y?$CK?$HMz?3latin_1_decode?$AA@ DB 'y*|z:latin_1_decod'
	DB	'e', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT latin_1_decode
_TEXT	SEGMENT
pbuf$ = 32
errors$ = 112
unicode$ = 120
self$ = 144
args$ = 152
latin_1_decode PROC					; COMDAT

; 545  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 546  :     Py_buffer pbuf;
; 547  :     PyObject *unicode;
; 548  :     const char *errors = NULL;

  00011	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 549  : 
; 550  :     if (!PyArg_ParseTuple(args, "y*|z:latin_1_decode",
; 551  :                           &pbuf, &errors))

  0001a	4c 8d 4c 24 70	 lea	 r9, QWORD PTR errors$[rsp]
  0001f	4c 8d 44 24 20	 lea	 r8, QWORD PTR pbuf$[rsp]
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@PBHKMLGD@y?$CK?$HMz?3latin_1_decode?$AA@
  0002b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00033	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00038	85 c0		 test	 eax, eax
  0003a	75 04		 jne	 SHORT $LN1@latin_1_de

; 552  :         return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 32		 jmp	 SHORT $LN2@latin_1_de
$LN1@latin_1_de:

; 553  : 
; 554  :     unicode = PyUnicode_DecodeLatin1(pbuf.buf, pbuf.len, errors);

  00040	4c 8b 44 24 70	 mov	 r8, QWORD PTR errors$[rsp]
  00045	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0004a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  0004f	e8 00 00 00 00	 call	 PyUnicode_DecodeLatin1
  00054	48 89 44 24 78	 mov	 QWORD PTR unicode$[rsp], rax

; 555  :     PyBuffer_Release(&pbuf);

  00059	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  0005e	e8 00 00 00 00	 call	 PyBuffer_Release

; 556  :     return codec_tuple(unicode, pbuf.len);

  00063	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  00068	48 8b 4c 24 78	 mov	 rcx, QWORD PTR unicode$[rsp]
  0006d	e8 00 00 00 00	 call	 codec_tuple
$LN2@latin_1_de:

; 557  : }

  00072	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00079	c3		 ret	 0
latin_1_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@GLBPA@y?$CK?$HMz?3ascii_decode?$AA@	; `string'
EXTRN	PyUnicode_DecodeASCII:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ascii_decode DD imagerel ascii_decode
	DD	imagerel ascii_decode+122
	DD	imagerel $unwind$ascii_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ascii_decode DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0BC@GLBPA@y?$CK?$HMz?3ascii_decode?$AA@
CONST	SEGMENT
??_C@_0BC@GLBPA@y?$CK?$HMz?3ascii_decode?$AA@ DB 'y*|z:ascii_decode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ascii_decode
_TEXT	SEGMENT
pbuf$ = 32
errors$ = 112
unicode$ = 120
self$ = 144
args$ = 152
ascii_decode PROC					; COMDAT

; 562  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 563  :     Py_buffer pbuf;
; 564  :     PyObject *unicode;
; 565  :     const char *errors = NULL;

  00011	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 566  : 
; 567  :     if (!PyArg_ParseTuple(args, "y*|z:ascii_decode",
; 568  :                           &pbuf, &errors))

  0001a	4c 8d 4c 24 70	 lea	 r9, QWORD PTR errors$[rsp]
  0001f	4c 8d 44 24 20	 lea	 r8, QWORD PTR pbuf$[rsp]
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@GLBPA@y?$CK?$HMz?3ascii_decode?$AA@
  0002b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00033	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00038	85 c0		 test	 eax, eax
  0003a	75 04		 jne	 SHORT $LN1@ascii_deco

; 569  :         return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 32		 jmp	 SHORT $LN2@ascii_deco
$LN1@ascii_deco:

; 570  : 
; 571  :     unicode = PyUnicode_DecodeASCII(pbuf.buf, pbuf.len, errors);

  00040	4c 8b 44 24 70	 mov	 r8, QWORD PTR errors$[rsp]
  00045	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  0004a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  0004f	e8 00 00 00 00	 call	 PyUnicode_DecodeASCII
  00054	48 89 44 24 78	 mov	 QWORD PTR unicode$[rsp], rax

; 572  :     PyBuffer_Release(&pbuf);

  00059	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  0005e	e8 00 00 00 00	 call	 PyBuffer_Release

; 573  :     return codec_tuple(unicode, pbuf.len);

  00063	48 8b 54 24 30	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  00068	48 8b 4c 24 78	 mov	 rcx, QWORD PTR unicode$[rsp]
  0006d	e8 00 00 00 00	 call	 codec_tuple
$LN2@ascii_deco:

; 574  : }

  00072	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00079	c3		 ret	 0
ascii_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@FPCCKHCG@y?$CK?$HMzO?3charmap_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeCharmap:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$charmap_decode DD imagerel charmap_decode
	DD	imagerel charmap_decode+199
	DD	imagerel $unwind$charmap_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$charmap_decode DD 021101H
	DD	0150111H
xdata	ENDS
;	COMDAT ??_C@_0BF@FPCCKHCG@y?$CK?$HMzO?3charmap_decode?$AA@
CONST	SEGMENT
??_C@_0BF@FPCCKHCG@y?$CK?$HMzO?3charmap_decode?$AA@ DB 'y*|zO:charmap_dec'
	DB	'ode', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT charmap_decode
_TEXT	SEGMENT
pbuf$ = 48
errors$ = 128
mapping$ = 136
unicode$ = 144
self$ = 176
args$ = 184
charmap_decode PROC					; COMDAT

; 579  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 580  :     Py_buffer pbuf;
; 581  :     PyObject *unicode;
; 582  :     const char *errors = NULL;

  00011	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 583  :     PyObject *mapping = NULL;

  0001d	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR mapping$[rsp], 0

; 584  : 
; 585  :     if (!PyArg_ParseTuple(args, "y*|zO:charmap_decode",
; 586  :                           &pbuf, &errors, &mapping))

  00029	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR mapping$[rsp]
  00031	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00036	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  0003e	4c 8d 44 24 30	 lea	 r8, QWORD PTR pbuf$[rsp]
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@FPCCKHCG@y?$CK?$HMzO?3charmap_decode?$AA@
  0004a	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00052	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00057	85 c0		 test	 eax, eax
  00059	75 04		 jne	 SHORT $LN2@charmap_de

; 587  :         return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	eb 60		 jmp	 SHORT $LN3@charmap_de
$LN2@charmap_de:

; 588  :     if (mapping == Py_None)

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR mapping$[rsp], rax
  0006e	75 0c		 jne	 SHORT $LN1@charmap_de

; 589  :         mapping = NULL;

  00070	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR mapping$[rsp], 0
$LN1@charmap_de:

; 590  : 
; 591  :     unicode = PyUnicode_DecodeCharmap(pbuf.buf, pbuf.len, mapping, errors);

  0007c	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR errors$[rsp]
  00084	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR mapping$[rsp]
  0008c	48 8b 54 24 40	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  00091	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00096	e8 00 00 00 00	 call	 PyUnicode_DecodeCharmap
  0009b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR unicode$[rsp], rax

; 592  :     PyBuffer_Release(&pbuf);

  000a3	48 8d 4c 24 30	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000a8	e8 00 00 00 00	 call	 PyBuffer_Release

; 593  :     return codec_tuple(unicode, pbuf.len);

  000ad	48 8b 54 24 40	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000b2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR unicode$[rsp]
  000ba	e8 00 00 00 00	 call	 codec_tuple
$LN3@charmap_de:

; 594  : }

  000bf	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000c6	c3		 ret	 0
charmap_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@LPEEGOGA@y?$CK?$HMzi?3mbcs_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeMBCSStateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbcs_decode DD imagerel mbcs_decode
	DD	imagerel mbcs_decode+231
	DD	imagerel $unwind$mbcs_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbcs_decode DD 021101H
	DD	0170111H
xdata	ENDS
;	COMDAT ??_C@_0BC@LPEEGOGA@y?$CK?$HMzi?3mbcs_decode?$AA@
CONST	SEGMENT
??_C@_0BC@LPEEGOGA@y?$CK?$HMzi?3mbcs_decode?$AA@ DB 'y*|zi:mbcs_decode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbcs_decode
_TEXT	SEGMENT
final$ = 48
decoded$ = 56
pbuf$ = 64
errors$ = 144
consumed$ = 152
tv73 = 160
self$ = 192
args$ = 200
mbcs_decode PROC					; COMDAT

; 601  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 602  :     Py_buffer pbuf;
; 603  :     const char *errors = NULL;

  00011	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 604  :     int final = 0;

  0001d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 605  :     Py_ssize_t consumed;
; 606  :     PyObject *decoded = NULL;

  00025	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR decoded$[rsp], 0

; 607  : 
; 608  :     if (!PyArg_ParseTuple(args, "y*|zi:mbcs_decode",
; 609  :                           &pbuf, &errors, &final))

  0002e	48 8d 44 24 30	 lea	 rax, QWORD PTR final$[rsp]
  00033	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00038	4c 8d 8c 24 90
	00 00 00	 lea	 r9, QWORD PTR errors$[rsp]
  00040	4c 8d 44 24 40	 lea	 r8, QWORD PTR pbuf$[rsp]
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LPEEGOGA@y?$CK?$HMzi?3mbcs_decode?$AA@
  0004c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00054	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00059	85 c0		 test	 eax, eax
  0005b	75 04		 jne	 SHORT $LN2@mbcs_decod

; 610  :         return NULL;

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 7e		 jmp	 SHORT $LN3@mbcs_decod
$LN2@mbcs_decod:

; 611  :     consumed = pbuf.len;

  00061	48 8b 44 24 50	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00066	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 612  : 
; 613  :     decoded = PyUnicode_DecodeMBCSStateful(pbuf.buf, pbuf.len, errors,
; 614  :                                            final ? NULL : &consumed);

  0006e	83 7c 24 30 00	 cmp	 DWORD PTR final$[rsp], 0
  00073	74 0e		 je	 SHORT $LN5@mbcs_decod
  00075	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv73[rsp], 0
  00081	eb 10		 jmp	 SHORT $LN6@mbcs_decod
$LN5@mbcs_decod:
  00083	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  0008b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN6@mbcs_decod:
  00093	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR tv73[rsp]
  0009b	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR errors$[rsp]
  000a3	48 8b 54 24 50	 mov	 rdx, QWORD PTR pbuf$[rsp+16]
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000ad	e8 00 00 00 00	 call	 PyUnicode_DecodeMBCSStateful
  000b2	48 89 44 24 38	 mov	 QWORD PTR decoded$[rsp], rax

; 615  :     PyBuffer_Release(&pbuf);

  000b7	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000bc	e8 00 00 00 00	 call	 PyBuffer_Release

; 616  :     if (decoded == NULL)

  000c1	48 83 7c 24 38
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  000c7	75 04		 jne	 SHORT $LN1@mbcs_decod

; 617  :         return NULL;

  000c9	33 c0		 xor	 eax, eax
  000cb	eb 12		 jmp	 SHORT $LN3@mbcs_decod
$LN1@mbcs_decod:

; 618  :     return codec_tuple(decoded, consumed);

  000cd	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR consumed$[rsp]
  000d5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoded$[rsp]
  000da	e8 00 00 00 00	 call	 codec_tuple
$LN3@mbcs_decod:

; 619  : }

  000df	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000e6	c3		 ret	 0
mbcs_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@KODBFCGO@iy?$CK?$HMzi?3code_page_decode?$AA@ ; `string'
EXTRN	PyUnicode_DecodeCodePageStateful:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$code_page_decode DD imagerel code_page_decode
	DD	imagerel code_page_decode+253
	DD	imagerel $unwind$code_page_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_page_decode DD 021101H
	DD	0170111H
xdata	ENDS
;	COMDAT ??_C@_0BI@KODBFCGO@iy?$CK?$HMzi?3code_page_decode?$AA@
CONST	SEGMENT
??_C@_0BI@KODBFCGO@iy?$CK?$HMzi?3code_page_decode?$AA@ DB 'iy*|zi:code_pa'
	DB	'ge_decode', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT code_page_decode
_TEXT	SEGMENT
code_page$ = 48
final$ = 52
decoded$ = 56
pbuf$ = 64
errors$ = 144
consumed$ = 152
tv74 = 160
self$ = 192
args$ = 200
code_page_decode PROC					; COMDAT

; 624  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 625  :     Py_buffer pbuf;
; 626  :     const char *errors = NULL;

  00011	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 627  :     int final = 0;

  0001d	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 628  :     Py_ssize_t consumed;
; 629  :     PyObject *decoded = NULL;

  00025	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR decoded$[rsp], 0

; 630  :     int code_page;
; 631  : 
; 632  :     if (!PyArg_ParseTuple(args, "iy*|zi:code_page_decode",
; 633  :                           &code_page, &pbuf, &errors, &final))

  0002e	48 8d 44 24 34	 lea	 rax, QWORD PTR final$[rsp]
  00033	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00038	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR errors$[rsp]
  00040	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00045	4c 8d 4c 24 40	 lea	 r9, QWORD PTR pbuf$[rsp]
  0004a	4c 8d 44 24 30	 lea	 r8, QWORD PTR code_page$[rsp]
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KODBFCGO@iy?$CK?$HMzi?3code_page_decode?$AA@
  00056	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005e	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00063	85 c0		 test	 eax, eax
  00065	75 07		 jne	 SHORT $LN2@code_page_

; 634  :         return NULL;

  00067	33 c0		 xor	 eax, eax
  00069	e9 87 00 00 00	 jmp	 $LN3@code_page_
$LN2@code_page_:

; 635  :     consumed = pbuf.len;

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00073	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR consumed$[rsp], rax

; 636  : 
; 637  :     decoded = PyUnicode_DecodeCodePageStateful(code_page,
; 638  :                                                pbuf.buf, pbuf.len, errors,
; 639  :                                                final ? NULL : &consumed);

  0007b	83 7c 24 34 00	 cmp	 DWORD PTR final$[rsp], 0
  00080	74 0e		 je	 SHORT $LN5@code_page_
  00082	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv74[rsp], 0
  0008e	eb 10		 jmp	 SHORT $LN6@code_page_
$LN5@code_page_:
  00090	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR consumed$[rsp]
  00098	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv74[rsp], rax
$LN6@code_page_:
  000a0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv74[rsp]
  000a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ad	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR errors$[rsp]
  000b5	4c 8b 44 24 50	 mov	 r8, QWORD PTR pbuf$[rsp+16]
  000ba	48 8b 54 24 40	 mov	 rdx, QWORD PTR pbuf$[rsp]
  000bf	8b 4c 24 30	 mov	 ecx, DWORD PTR code_page$[rsp]
  000c3	e8 00 00 00 00	 call	 PyUnicode_DecodeCodePageStateful
  000c8	48 89 44 24 38	 mov	 QWORD PTR decoded$[rsp], rax

; 640  :     PyBuffer_Release(&pbuf);

  000cd	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pbuf$[rsp]
  000d2	e8 00 00 00 00	 call	 PyBuffer_Release

; 641  :     if (decoded == NULL)

  000d7	48 83 7c 24 38
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  000dd	75 04		 jne	 SHORT $LN1@code_page_

; 642  :         return NULL;

  000df	33 c0		 xor	 eax, eax
  000e1	eb 12		 jmp	 SHORT $LN3@code_page_
$LN1@code_page_:

; 643  :     return codec_tuple(decoded, consumed);

  000e3	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR consumed$[rsp]
  000eb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoded$[rsp]
  000f0	e8 00 00 00 00	 call	 codec_tuple
$LN3@code_page_:

; 644  : }

  000f5	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000fc	c3		 ret	 0
code_page_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@OIDNGBKJ@s?$CK?$HMz?3readbuffer_encode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$readbuffer_encode DD imagerel readbuffer_encode
	DD	imagerel readbuffer_encode+158
	DD	imagerel $unwind$readbuffer_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$readbuffer_encode DD 021101H
	DD	0150111H
xdata	ENDS
;	COMDAT ??_C@_0BH@OIDNGBKJ@s?$CK?$HMz?3readbuffer_encode?$AA@
CONST	SEGMENT
??_C@_0BH@OIDNGBKJ@s?$CK?$HMz?3readbuffer_encode?$AA@ DB 's*|z:readbuffer'
	DB	'_encode', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT readbuffer_encode
_TEXT	SEGMENT
errors$ = 32
pdata$ = 48
size$ = 128
data$ = 136
result$ = 144
self$ = 176
args$ = 184
readbuffer_encode PROC					; COMDAT

; 653  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 654  :     Py_buffer pdata;
; 655  :     const char *data;
; 656  :     Py_ssize_t size;
; 657  :     const char *errors = NULL;

  00011	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 658  :     PyObject *result;
; 659  : 
; 660  :     if (!PyArg_ParseTuple(args, "s*|z:readbuffer_encode",
; 661  :                           &pdata, &errors))

  0001a	4c 8d 4c 24 20	 lea	 r9, QWORD PTR errors$[rsp]
  0001f	4c 8d 44 24 30	 lea	 r8, QWORD PTR pdata$[rsp]
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@OIDNGBKJ@s?$CK?$HMz?3readbuffer_encode?$AA@
  0002b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00033	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00038	85 c0		 test	 eax, eax
  0003a	75 04		 jne	 SHORT $LN1@readbuffer

; 662  :         return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 56		 jmp	 SHORT $LN2@readbuffer
$LN1@readbuffer:

; 663  :     data = pdata.buf;

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR pdata$[rsp]
  00045	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR data$[rsp], rax

; 664  :     size = pdata.len;

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR pdata$[rsp+16]
  00052	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR size$[rsp], rax

; 665  : 
; 666  :     result = PyBytes_FromStringAndSize(data, size);

  0005a	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR size$[rsp]
  00062	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR data$[rsp]
  0006a	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0006f	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR result$[rsp], rax

; 667  :     PyBuffer_Release(&pdata);

  00077	48 8d 4c 24 30	 lea	 rcx, QWORD PTR pdata$[rsp]
  0007c	e8 00 00 00 00	 call	 PyBuffer_Release

; 668  :     return codec_tuple(result, size);

  00081	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR size$[rsp]
  00089	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR result$[rsp]
  00091	e8 00 00 00 00	 call	 codec_tuple
$LN2@readbuffer:

; 669  : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	c3		 ret	 0
readbuffer_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@GKLFALHD@O?$HMz?3unicode_internal_encode?$AA@ ; `string'
PUBLIC	??_C@_0CL@NLHPDIOL@unicode_internal?5codec?5has?5been?5@ ; `string'
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyUnicode_AsUnicodeAndSize:PROC
EXTRN	PyErr_WarnEx:PROC
EXTRN	PyExc_DeprecationWarning:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$unicode_internal_encode DD imagerel unicode_internal_encode
	DD	imagerel unicode_internal_encode+503
	DD	imagerel $unwind$unicode_internal_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unicode_internal_encode DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0BM@GKLFALHD@O?$HMz?3unicode_internal_encode?$AA@
CONST	SEGMENT
??_C@_0BM@GKLFALHD@O?$HMz?3unicode_internal_encode?$AA@ DB 'O|z:unicode_i'
	DB	'nternal_encode', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NLHPDIOL@unicode_internal?5codec?5has?5been?5@
CONST	SEGMENT
??_C@_0CL@NLHPDIOL@unicode_internal?5codec?5has?5been?5@ DB 'unicode_inte'
	DB	'rnal codec has been deprecated', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT unicode_internal_encode
_TEXT	SEGMENT
errors$ = 32
size$ = 40
len$ = 48
data$ = 56
obj$ = 64
u$120933 = 72
tv93 = 80
self$ = 112
args$ = 120
unicode_internal_encode PROC				; COMDAT

; 674  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 675  :     PyObject *obj;
; 676  :     const char *errors = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 677  :     const char *data;
; 678  :     Py_ssize_t len, size;
; 679  : 
; 680  :     if (PyErr_WarnEx(PyExc_DeprecationWarning,
; 681  :                      "unicode_internal codec has been deprecated",
; 682  :                      1))

  00017	41 b8 01 00 00
	00		 mov	 r8d, 1
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@NLHPDIOL@unicode_internal?5codec?5has?5been?5@
  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_DeprecationWarning
  0002b	e8 00 00 00 00	 call	 PyErr_WarnEx
  00030	85 c0		 test	 eax, eax
  00032	74 07		 je	 SHORT $LN8@unicode_in@2

; 683  :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	e9 b7 01 00 00	 jmp	 $LN9@unicode_in@2
$LN8@unicode_in@2:

; 684  : 
; 685  :     if (!PyArg_ParseTuple(args, "O|z:unicode_internal_encode",
; 686  :                           &obj, &errors))

  0003b	4c 8d 4c 24 20	 lea	 r9, QWORD PTR errors$[rsp]
  00040	4c 8d 44 24 40	 lea	 r8, QWORD PTR obj$[rsp]
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@GKLFALHD@O?$HMz?3unicode_internal_encode?$AA@
  0004c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00051	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00056	85 c0		 test	 eax, eax
  00058	75 07		 jne	 SHORT $LN7@unicode_in@2

; 687  :         return NULL;

  0005a	33 c0		 xor	 eax, eax
  0005c	e9 91 01 00 00	 jmp	 $LN9@unicode_in@2
$LN7@unicode_in@2:

; 688  : 
; 689  :     if (PyUnicode_Check(obj)) {

  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00066	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00070	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00075	85 c0		 test	 eax, eax
  00077	0f 84 3d 01 00
	00		 je	 $LN6@unicode_in@2

; 690  :         Py_UNICODE *u;
; 691  : 
; 692  :         if (PyUnicode_READY(obj) < 0)

  0007d	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00082	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00086	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00091	85 c0		 test	 eax, eax
  00093	75 1c		 jne	 SHORT $LN11@unicode_in@2
  00095	41 b8 b4 02 00
	00		 mov	 r8d, 692		; 000002b4H
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000af	33 c0		 xor	 eax, eax
$LN11@unicode_in@2:
  000b1	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  000b6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000b9	c1 e8 07	 shr	 eax, 7
  000bc	83 e0 01	 and	 eax, 1
  000bf	85 c0		 test	 eax, eax
  000c1	74 0a		 je	 SHORT $LN12@unicode_in@2
  000c3	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
  000cb	eb 0e		 jmp	 SHORT $LN13@unicode_in@2
$LN12@unicode_in@2:
  000cd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  000d2	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000d7	89 44 24 50	 mov	 DWORD PTR tv93[rsp], eax
$LN13@unicode_in@2:
  000db	83 7c 24 50 00	 cmp	 DWORD PTR tv93[rsp], 0
  000e0	7d 07		 jge	 SHORT $LN5@unicode_in@2

; 693  :             return NULL;

  000e2	33 c0		 xor	 eax, eax
  000e4	e9 09 01 00 00	 jmp	 $LN9@unicode_in@2
$LN5@unicode_in@2:

; 694  : 
; 695  :         u = PyUnicode_AsUnicodeAndSize(obj, &len);

  000e9	48 8d 54 24 30	 lea	 rdx, QWORD PTR len$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  000f3	e8 00 00 00 00	 call	 PyUnicode_AsUnicodeAndSize
  000f8	48 89 44 24 48	 mov	 QWORD PTR u$120933[rsp], rax

; 696  :         if (u == NULL)

  000fd	48 83 7c 24 48
	00		 cmp	 QWORD PTR u$120933[rsp], 0
  00103	75 07		 jne	 SHORT $LN4@unicode_in@2

; 697  :             return NULL;

  00105	33 c0		 xor	 eax, eax
  00107	e9 e6 00 00 00	 jmp	 $LN9@unicode_in@2
$LN4@unicode_in@2:

; 698  :         if (len > PY_SSIZE_T_MAX / sizeof(Py_UNICODE))

  0010c	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH
  00116	48 39 44 24 30	 cmp	 QWORD PTR len$[rsp], rax
  0011b	76 0a		 jbe	 SHORT $LN3@unicode_in@2

; 699  :             return PyErr_NoMemory();

  0011d	e8 00 00 00 00	 call	 PyErr_NoMemory
  00122	e9 cb 00 00 00	 jmp	 $LN9@unicode_in@2
$LN3@unicode_in@2:

; 700  :         size = len * sizeof(Py_UNICODE);

  00127	48 8b 44 24 30	 mov	 rax, QWORD PTR len$[rsp]
  0012c	48 d1 e0	 shl	 rax, 1
  0012f	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax

; 701  :         return codec_tuple(PyBytes_FromStringAndSize((const char*)u, size),
; 702  :                            PyUnicode_GET_LENGTH(obj));

  00134	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00139	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0013d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00143	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00148	85 c0		 test	 eax, eax
  0014a	75 1c		 jne	 SHORT $LN14@unicode_in@2
  0014c	41 b8 be 02 00
	00		 mov	 r8d, 702		; 000002beH
  00152	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00166	33 c0		 xor	 eax, eax
$LN14@unicode_in@2:
  00168	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  0016d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00170	c1 e8 07	 shr	 eax, 7
  00173	83 e0 01	 and	 eax, 1
  00176	85 c0		 test	 eax, eax
  00178	75 1c		 jne	 SHORT $LN15@unicode_in@2
  0017a	41 b8 be 02 00
	00		 mov	 r8d, 702		; 000002beH
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0018e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00194	33 c0		 xor	 eax, eax
$LN15@unicode_in@2:
  00196	48 8b 54 24 28	 mov	 rdx, QWORD PTR size$[rsp]
  0019b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR u$120933[rsp]
  001a0	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  001a5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  001aa	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  001ae	48 8b c8	 mov	 rcx, rax
  001b1	e8 00 00 00 00	 call	 codec_tuple
  001b6	eb 3a		 jmp	 SHORT $LN9@unicode_in@2

; 703  :     }
; 704  :     else {

  001b8	eb 38		 jmp	 SHORT $LN2@unicode_in@2
$LN6@unicode_in@2:

; 705  :         if (PyObject_AsReadBuffer(obj, (const void **)&data, &size))

  001ba	4c 8d 44 24 28	 lea	 r8, QWORD PTR size$[rsp]
  001bf	48 8d 54 24 38	 lea	 rdx, QWORD PTR data$[rsp]
  001c4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  001c9	e8 00 00 00 00	 call	 PyObject_AsReadBuffer
  001ce	85 c0		 test	 eax, eax
  001d0	74 04		 je	 SHORT $LN1@unicode_in@2

; 706  :             return NULL;

  001d2	33 c0		 xor	 eax, eax
  001d4	eb 1c		 jmp	 SHORT $LN9@unicode_in@2
$LN1@unicode_in@2:

; 707  :         return codec_tuple(PyBytes_FromStringAndSize(data, size), size);

  001d6	48 8b 54 24 28	 mov	 rdx, QWORD PTR size$[rsp]
  001db	48 8b 4c 24 38	 mov	 rcx, QWORD PTR data$[rsp]
  001e0	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  001e5	48 8b 54 24 28	 mov	 rdx, QWORD PTR size$[rsp]
  001ea	48 8b c8	 mov	 rcx, rax
  001ed	e8 00 00 00 00	 call	 codec_tuple
$LN2@unicode_in@2:
$LN9@unicode_in@2:

; 708  :     }
; 709  : }

  001f2	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001f6	c3		 ret	 0
unicode_internal_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BB@HKGOKCEK@O?$HMz?3utf_7_encode?$AA@	; `string'
EXTRN	_PyUnicode_EncodeUTF7:PROC
EXTRN	PyUnicode_FromObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_7_encode DD imagerel utf_7_encode
	DD	imagerel utf_7_encode+376
	DD	imagerel $unwind$utf_7_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_7_encode DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, 't', 00H, 'r', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HKGOKCEK@O?$HMz?3utf_7_encode?$AA@
CONST	SEGMENT
??_C@_0BB@HKGOKCEK@O?$HMz?3utf_7_encode?$AA@ DB 'O|z:utf_7_encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_7_encode
_TEXT	SEGMENT
v$ = 32
errors$ = 40
str$ = 48
tv87 = 56
self$ = 80
args$ = 88
utf_7_encode PROC					; COMDAT

; 714  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 715  :     PyObject *str, *v;
; 716  :     const char *errors = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 717  : 
; 718  :     if (!PyArg_ParseTuple(args, "O|z:utf_7_encode",
; 719  :                           &str, &errors))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR str$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@HKGOKCEK@O?$HMz?3utf_7_encode?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@utf_7_enco

; 720  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 36 01 00 00	 jmp	 $LN8@utf_7_enco
$LN7@utf_7_enco:

; 721  : 
; 722  :     str = PyUnicode_FromObject(str);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00042	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00047	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 723  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00052	74 65		 je	 SHORT $LN5@utf_7_enco
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN10@utf_7_enco
  0006c	41 b8 d3 02 00
	00		 mov	 r8d, 723		; 000002d3H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN10@utf_7_enco:
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN11@utf_7_enco
  0009a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  000a2	eb 0e		 jmp	 SHORT $LN12@utf_7_enco
$LN11@utf_7_enco:
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ae	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
$LN12@utf_7_enco:
  000b2	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000b7	7d 1f		 jge	 SHORT $LN6@utf_7_enco
$LN5@utf_7_enco:
$LN4@utf_7_enco:

; 724  :         Py_XDECREF(str);

  000b9	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  000bf	74 0a		 je	 SHORT $LN1@utf_7_enco
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@utf_7_enco:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 e8		 jne	 SHORT $LN4@utf_7_enco

; 725  :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 9b 00 00 00	 jmp	 $LN8@utf_7_enco
$LN6@utf_7_enco:

; 726  :     }
; 727  :     v = codec_tuple(_PyUnicode_EncodeUTF7(str, 0, 0, errors),
; 728  :                     PyUnicode_GET_LENGTH(str));

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ec	85 c0		 test	 eax, eax
  000ee	75 1c		 jne	 SHORT $LN13@utf_7_enco
  000f0	41 b8 d8 02 00
	00		 mov	 r8d, 728		; 000002d8H
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN13@utf_7_enco:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	c1 e8 07	 shr	 eax, 7
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	75 1c		 jne	 SHORT $LN14@utf_7_enco
  0011e	41 b8 d8 02 00
	00		 mov	 r8d, 728		; 000002d8H
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00138	33 c0		 xor	 eax, eax
$LN14@utf_7_enco:
  0013a	4c 8b 4c 24 28	 mov	 r9, QWORD PTR errors$[rsp]
  0013f	45 33 c0	 xor	 r8d, r8d
  00142	33 d2		 xor	 edx, edx
  00144	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00149	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF7
  0014e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00153	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00157	48 8b c8	 mov	 rcx, rax
  0015a	e8 00 00 00 00	 call	 codec_tuple
  0015f	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 729  :     Py_DECREF(str);

  00164	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00169	e8 00 00 00 00	 call	 _Py_DecRef

; 730  :     return v;

  0016e	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN8@utf_7_enco:

; 731  : }

  00173	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00177	c3		 ret	 0
utf_7_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_05CAMHEFLG@utf?98?$AA@			; `string'
PUBLIC	??_C@_0BB@KFNHGNJL@O?$HMz?3utf_8_encode?$AA@	; `string'
EXTRN	PyUnicode_AsEncodedString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_8_encode DD imagerel utf_8_encode
	DD	imagerel utf_8_encode+378
	DD	imagerel $unwind$utf_8_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_8_encode DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_05CAMHEFLG@utf?98?$AA@
CONST	SEGMENT
??_C@_05CAMHEFLG@utf?98?$AA@ DB 'utf-8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KFNHGNJL@O?$HMz?3utf_8_encode?$AA@
CONST	SEGMENT
??_C@_0BB@KFNHGNJL@O?$HMz?3utf_8_encode?$AA@ DB 'O|z:utf_8_encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_8_encode
_TEXT	SEGMENT
v$ = 32
errors$ = 40
str$ = 48
tv87 = 56
self$ = 80
args$ = 88
utf_8_encode PROC					; COMDAT

; 736  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 737  :     PyObject *str, *v;
; 738  :     const char *errors = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 739  : 
; 740  :     if (!PyArg_ParseTuple(args, "O|z:utf_8_encode",
; 741  :                           &str, &errors))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR str$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@KFNHGNJL@O?$HMz?3utf_8_encode?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@utf_8_enco

; 742  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 38 01 00 00	 jmp	 $LN8@utf_8_enco
$LN7@utf_8_enco:

; 743  : 
; 744  :     str = PyUnicode_FromObject(str);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00042	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00047	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 745  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00052	74 65		 je	 SHORT $LN5@utf_8_enco
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN10@utf_8_enco
  0006c	41 b8 e9 02 00
	00		 mov	 r8d, 745		; 000002e9H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN10@utf_8_enco:
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN11@utf_8_enco
  0009a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  000a2	eb 0e		 jmp	 SHORT $LN12@utf_8_enco
$LN11@utf_8_enco:
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ae	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
$LN12@utf_8_enco:
  000b2	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000b7	7d 1f		 jge	 SHORT $LN6@utf_8_enco
$LN5@utf_8_enco:
$LN4@utf_8_enco:

; 746  :         Py_XDECREF(str);

  000b9	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  000bf	74 0a		 je	 SHORT $LN1@utf_8_enco
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@utf_8_enco:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 e8		 jne	 SHORT $LN4@utf_8_enco

; 747  :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 9d 00 00 00	 jmp	 $LN8@utf_8_enco
$LN6@utf_8_enco:

; 748  :     }
; 749  :     v = codec_tuple(PyUnicode_AsEncodedString(str, "utf-8", errors),
; 750  :                     PyUnicode_GET_LENGTH(str));

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ec	85 c0		 test	 eax, eax
  000ee	75 1c		 jne	 SHORT $LN13@utf_8_enco
  000f0	41 b8 ee 02 00
	00		 mov	 r8d, 750		; 000002eeH
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN13@utf_8_enco:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	c1 e8 07	 shr	 eax, 7
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	75 1c		 jne	 SHORT $LN14@utf_8_enco
  0011e	41 b8 ee 02 00
	00		 mov	 r8d, 750		; 000002eeH
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00138	33 c0		 xor	 eax, eax
$LN14@utf_8_enco:
  0013a	4c 8b 44 24 28	 mov	 r8, QWORD PTR errors$[rsp]
  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CAMHEFLG@utf?98?$AA@
  00146	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0014b	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString
  00150	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00155	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00159	48 8b c8	 mov	 rcx, rax
  0015c	e8 00 00 00 00	 call	 codec_tuple
  00161	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 751  :     Py_DECREF(str);

  00166	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0016b	e8 00 00 00 00	 call	 _Py_DecRef

; 752  :     return v;

  00170	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN8@utf_8_enco:

; 753  : }

  00175	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00179	c3		 ret	 0
utf_8_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@IILMGODK@O?$HMzi?3utf_16_encode?$AA@	; `string'
EXTRN	_PyUnicode_EncodeUTF16:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_16_encode DD imagerel utf_16_encode
	DD	imagerel utf_16_encode+394
	DD	imagerel $unwind$utf_16_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_encode DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0BD@IILMGODK@O?$HMzi?3utf_16_encode?$AA@
CONST	SEGMENT
??_C@_0BD@IILMGODK@O?$HMzi?3utf_16_encode?$AA@ DB 'O|zi:utf_16_encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_16_encode
_TEXT	SEGMENT
v$ = 48
byteorder$ = 56
errors$ = 64
str$ = 72
tv88 = 80
self$ = 112
args$ = 120
utf_16_encode PROC					; COMDAT

; 765  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 766  :     PyObject *str, *v;
; 767  :     const char *errors = NULL;

  0000e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 768  :     int byteorder = 0;

  00017	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR byteorder$[rsp], 0

; 769  : 
; 770  :     if (!PyArg_ParseTuple(args, "O|zi:utf_16_encode",
; 771  :                           &str, &errors, &byteorder))

  0001f	48 8d 44 24 38	 lea	 rax, QWORD PTR byteorder$[rsp]
  00024	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00029	4c 8d 4c 24 40	 lea	 r9, QWORD PTR errors$[rsp]
  0002e	4c 8d 44 24 48	 lea	 r8, QWORD PTR str$[rsp]
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@IILMGODK@O?$HMzi?3utf_16_encode?$AA@
  0003a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0003f	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00044	85 c0		 test	 eax, eax
  00046	75 07		 jne	 SHORT $LN7@utf_16_enc

; 772  :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 36 01 00 00	 jmp	 $LN8@utf_16_enc
$LN7@utf_16_enc:

; 773  : 
; 774  :     str = PyUnicode_FromObject(str);

  0004f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00054	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00059	48 89 44 24 48	 mov	 QWORD PTR str$[rsp], rax

; 775  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0005e	48 83 7c 24 48
	00		 cmp	 QWORD PTR str$[rsp], 0
  00064	74 65		 je	 SHORT $LN5@utf_16_enc
  00066	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  0006b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00075	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0007a	85 c0		 test	 eax, eax
  0007c	75 1c		 jne	 SHORT $LN10@utf_16_enc
  0007e	41 b8 07 03 00
	00		 mov	 r8d, 775		; 00000307H
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00098	33 c0		 xor	 eax, eax
$LN10@utf_16_enc:
  0009a	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  0009f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000a2	c1 e8 07	 shr	 eax, 7
  000a5	83 e0 01	 and	 eax, 1
  000a8	85 c0		 test	 eax, eax
  000aa	74 0a		 je	 SHORT $LN11@utf_16_enc
  000ac	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
  000b4	eb 0e		 jmp	 SHORT $LN12@utf_16_enc
$LN11@utf_16_enc:
  000b6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  000bb	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000c0	89 44 24 50	 mov	 DWORD PTR tv88[rsp], eax
$LN12@utf_16_enc:
  000c4	83 7c 24 50 00	 cmp	 DWORD PTR tv88[rsp], 0
  000c9	7d 1f		 jge	 SHORT $LN6@utf_16_enc
$LN5@utf_16_enc:
$LN4@utf_16_enc:

; 776  :         Py_XDECREF(str);

  000cb	48 83 7c 24 48
	00		 cmp	 QWORD PTR str$[rsp], 0
  000d1	74 0a		 je	 SHORT $LN1@utf_16_enc
  000d3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  000d8	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@utf_16_enc:
  000dd	33 c0		 xor	 eax, eax
  000df	85 c0		 test	 eax, eax
  000e1	75 e8		 jne	 SHORT $LN4@utf_16_enc

; 777  :         return NULL;

  000e3	33 c0		 xor	 eax, eax
  000e5	e9 9b 00 00 00	 jmp	 $LN8@utf_16_enc
$LN6@utf_16_enc:

; 778  :     }
; 779  :     v = codec_tuple(_PyUnicode_EncodeUTF16(str, errors, byteorder),
; 780  :                     PyUnicode_GET_LENGTH(str));

  000ea	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  000ef	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000fe	85 c0		 test	 eax, eax
  00100	75 1c		 jne	 SHORT $LN13@utf_16_enc
  00102	41 b8 0c 03 00
	00		 mov	 r8d, 780		; 0000030cH
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011c	33 c0		 xor	 eax, eax
$LN13@utf_16_enc:
  0011e	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00123	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00126	c1 e8 07	 shr	 eax, 7
  00129	83 e0 01	 and	 eax, 1
  0012c	85 c0		 test	 eax, eax
  0012e	75 1c		 jne	 SHORT $LN14@utf_16_enc
  00130	41 b8 0c 03 00
	00		 mov	 r8d, 780		; 0000030cH
  00136	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00144	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014a	33 c0		 xor	 eax, eax
$LN14@utf_16_enc:
  0014c	44 8b 44 24 38	 mov	 r8d, DWORD PTR byteorder$[rsp]
  00151	48 8b 54 24 40	 mov	 rdx, QWORD PTR errors$[rsp]
  00156	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  0015b	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF16
  00160	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00165	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00169	48 8b c8	 mov	 rcx, rax
  0016c	e8 00 00 00 00	 call	 codec_tuple
  00171	48 89 44 24 30	 mov	 QWORD PTR v$[rsp], rax

; 781  :     Py_DECREF(str);

  00176	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  0017b	e8 00 00 00 00	 call	 _Py_DecRef

; 782  :     return v;

  00180	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
$LN8@utf_16_enc:

; 783  : }

  00185	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00189	c3		 ret	 0
utf_16_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@GODBGCOL@O?$HMz?3utf_16_le_encode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_16_le_encode DD imagerel utf_16_le_encode
	DD	imagerel utf_16_le_encode+377
	DD	imagerel $unwind$utf_16_le_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_le_encode DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BF@GODBGCOL@O?$HMz?3utf_16_le_encode?$AA@
CONST	SEGMENT
??_C@_0BF@GODBGCOL@O?$HMz?3utf_16_le_encode?$AA@ DB 'O|z:utf_16_le_encode'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_16_le_encode
_TEXT	SEGMENT
v$ = 32
errors$ = 40
str$ = 48
tv87 = 56
self$ = 80
args$ = 88
utf_16_le_encode PROC					; COMDAT

; 788  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 789  :     PyObject *str, *v;
; 790  :     const char *errors = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 791  : 
; 792  :     if (!PyArg_ParseTuple(args, "O|z:utf_16_le_encode",
; 793  :                           &str, &errors))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR str$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@GODBGCOL@O?$HMz?3utf_16_le_encode?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@utf_16_le_@2

; 794  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 37 01 00 00	 jmp	 $LN8@utf_16_le_@2
$LN7@utf_16_le_@2:

; 795  : 
; 796  :     str = PyUnicode_FromObject(str);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00042	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00047	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 797  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00052	74 65		 je	 SHORT $LN5@utf_16_le_@2
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN10@utf_16_le_@2
  0006c	41 b8 1d 03 00
	00		 mov	 r8d, 797		; 0000031dH
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN10@utf_16_le_@2:
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN11@utf_16_le_@2
  0009a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  000a2	eb 0e		 jmp	 SHORT $LN12@utf_16_le_@2
$LN11@utf_16_le_@2:
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ae	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
$LN12@utf_16_le_@2:
  000b2	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000b7	7d 1f		 jge	 SHORT $LN6@utf_16_le_@2
$LN5@utf_16_le_@2:
$LN4@utf_16_le_@2:

; 798  :         Py_XDECREF(str);

  000b9	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  000bf	74 0a		 je	 SHORT $LN1@utf_16_le_@2
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@utf_16_le_@2:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 e8		 jne	 SHORT $LN4@utf_16_le_@2

; 799  :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 9c 00 00 00	 jmp	 $LN8@utf_16_le_@2
$LN6@utf_16_le_@2:

; 800  :     }
; 801  :     v = codec_tuple(_PyUnicode_EncodeUTF16(str, errors, -1),
; 802  :                     PyUnicode_GET_LENGTH(str));

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ec	85 c0		 test	 eax, eax
  000ee	75 1c		 jne	 SHORT $LN13@utf_16_le_@2
  000f0	41 b8 22 03 00
	00		 mov	 r8d, 802		; 00000322H
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN13@utf_16_le_@2:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	c1 e8 07	 shr	 eax, 7
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	75 1c		 jne	 SHORT $LN14@utf_16_le_@2
  0011e	41 b8 22 03 00
	00		 mov	 r8d, 802		; 00000322H
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00138	33 c0		 xor	 eax, eax
$LN14@utf_16_le_@2:
  0013a	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00140	48 8b 54 24 28	 mov	 rdx, QWORD PTR errors$[rsp]
  00145	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0014a	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF16
  0014f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00154	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00158	48 8b c8	 mov	 rcx, rax
  0015b	e8 00 00 00 00	 call	 codec_tuple
  00160	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 803  :     Py_DECREF(str);

  00165	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0016a	e8 00 00 00 00	 call	 _Py_DecRef

; 804  :     return v;

  0016f	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN8@utf_16_le_@2:

; 805  : }

  00174	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00178	c3		 ret	 0
utf_16_le_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@HAPIFCFI@O?$HMz?3utf_16_be_encode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_16_be_encode DD imagerel utf_16_be_encode
	DD	imagerel utf_16_be_encode+377
	DD	imagerel $unwind$utf_16_be_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_16_be_encode DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BF@HAPIFCFI@O?$HMz?3utf_16_be_encode?$AA@
CONST	SEGMENT
??_C@_0BF@HAPIFCFI@O?$HMz?3utf_16_be_encode?$AA@ DB 'O|z:utf_16_be_encode'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_16_be_encode
_TEXT	SEGMENT
v$ = 32
errors$ = 40
str$ = 48
tv87 = 56
self$ = 80
args$ = 88
utf_16_be_encode PROC					; COMDAT

; 810  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 811  :     PyObject *str, *v;
; 812  :     const char *errors = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 813  : 
; 814  :     if (!PyArg_ParseTuple(args, "O|z:utf_16_be_encode",
; 815  :                           &str, &errors))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR str$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@HAPIFCFI@O?$HMz?3utf_16_be_encode?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@utf_16_be_@2

; 816  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 37 01 00 00	 jmp	 $LN8@utf_16_be_@2
$LN7@utf_16_be_@2:

; 817  : 
; 818  :     str = PyUnicode_FromObject(str);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00042	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00047	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 819  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00052	74 65		 je	 SHORT $LN5@utf_16_be_@2
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN10@utf_16_be_@2
  0006c	41 b8 33 03 00
	00		 mov	 r8d, 819		; 00000333H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN10@utf_16_be_@2:
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN11@utf_16_be_@2
  0009a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  000a2	eb 0e		 jmp	 SHORT $LN12@utf_16_be_@2
$LN11@utf_16_be_@2:
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ae	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
$LN12@utf_16_be_@2:
  000b2	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000b7	7d 1f		 jge	 SHORT $LN6@utf_16_be_@2
$LN5@utf_16_be_@2:
$LN4@utf_16_be_@2:

; 820  :         Py_XDECREF(str);

  000b9	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  000bf	74 0a		 je	 SHORT $LN1@utf_16_be_@2
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@utf_16_be_@2:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 e8		 jne	 SHORT $LN4@utf_16_be_@2

; 821  :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 9c 00 00 00	 jmp	 $LN8@utf_16_be_@2
$LN6@utf_16_be_@2:

; 822  :     }
; 823  :     v = codec_tuple(_PyUnicode_EncodeUTF16(str, errors, +1),
; 824  :                     PyUnicode_GET_LENGTH(str));

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ec	85 c0		 test	 eax, eax
  000ee	75 1c		 jne	 SHORT $LN13@utf_16_be_@2
  000f0	41 b8 38 03 00
	00		 mov	 r8d, 824		; 00000338H
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN13@utf_16_be_@2:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	c1 e8 07	 shr	 eax, 7
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	75 1c		 jne	 SHORT $LN14@utf_16_be_@2
  0011e	41 b8 38 03 00
	00		 mov	 r8d, 824		; 00000338H
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00138	33 c0		 xor	 eax, eax
$LN14@utf_16_be_@2:
  0013a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00140	48 8b 54 24 28	 mov	 rdx, QWORD PTR errors$[rsp]
  00145	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0014a	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF16
  0014f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00154	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00158	48 8b c8	 mov	 rcx, rax
  0015b	e8 00 00 00 00	 call	 codec_tuple
  00160	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 825  :     Py_DECREF(str);

  00165	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0016a	e8 00 00 00 00	 call	 _Py_DecRef

; 826  :     return v;

  0016f	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN8@utf_16_be_@2:

; 827  : }

  00174	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00178	c3		 ret	 0
utf_16_be_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@NBKFOPAL@O?$HMzi?3utf_32_encode?$AA@	; `string'
EXTRN	_PyUnicode_EncodeUTF32:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_32_encode DD imagerel utf_32_encode
	DD	imagerel utf_32_encode+394
	DD	imagerel $unwind$utf_32_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_encode DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0BD@NBKFOPAL@O?$HMzi?3utf_32_encode?$AA@
CONST	SEGMENT
??_C@_0BD@NBKFOPAL@O?$HMzi?3utf_32_encode?$AA@ DB 'O|zi:utf_32_encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_32_encode
_TEXT	SEGMENT
v$ = 48
byteorder$ = 56
errors$ = 64
str$ = 72
tv88 = 80
self$ = 112
args$ = 120
utf_32_encode PROC					; COMDAT

; 839  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 840  :     PyObject *str, *v;
; 841  :     const char *errors = NULL;

  0000e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 842  :     int byteorder = 0;

  00017	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR byteorder$[rsp], 0

; 843  : 
; 844  :     if (!PyArg_ParseTuple(args, "O|zi:utf_32_encode",
; 845  :                           &str, &errors, &byteorder))

  0001f	48 8d 44 24 38	 lea	 rax, QWORD PTR byteorder$[rsp]
  00024	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00029	4c 8d 4c 24 40	 lea	 r9, QWORD PTR errors$[rsp]
  0002e	4c 8d 44 24 48	 lea	 r8, QWORD PTR str$[rsp]
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@NBKFOPAL@O?$HMzi?3utf_32_encode?$AA@
  0003a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0003f	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00044	85 c0		 test	 eax, eax
  00046	75 07		 jne	 SHORT $LN7@utf_32_enc

; 846  :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 36 01 00 00	 jmp	 $LN8@utf_32_enc
$LN7@utf_32_enc:

; 847  : 
; 848  :     str = PyUnicode_FromObject(str);

  0004f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00054	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00059	48 89 44 24 48	 mov	 QWORD PTR str$[rsp], rax

; 849  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0005e	48 83 7c 24 48
	00		 cmp	 QWORD PTR str$[rsp], 0
  00064	74 65		 je	 SHORT $LN5@utf_32_enc
  00066	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  0006b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00075	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0007a	85 c0		 test	 eax, eax
  0007c	75 1c		 jne	 SHORT $LN10@utf_32_enc
  0007e	41 b8 51 03 00
	00		 mov	 r8d, 849		; 00000351H
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00098	33 c0		 xor	 eax, eax
$LN10@utf_32_enc:
  0009a	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  0009f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000a2	c1 e8 07	 shr	 eax, 7
  000a5	83 e0 01	 and	 eax, 1
  000a8	85 c0		 test	 eax, eax
  000aa	74 0a		 je	 SHORT $LN11@utf_32_enc
  000ac	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
  000b4	eb 0e		 jmp	 SHORT $LN12@utf_32_enc
$LN11@utf_32_enc:
  000b6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  000bb	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000c0	89 44 24 50	 mov	 DWORD PTR tv88[rsp], eax
$LN12@utf_32_enc:
  000c4	83 7c 24 50 00	 cmp	 DWORD PTR tv88[rsp], 0
  000c9	7d 1f		 jge	 SHORT $LN6@utf_32_enc
$LN5@utf_32_enc:
$LN4@utf_32_enc:

; 850  :         Py_XDECREF(str);

  000cb	48 83 7c 24 48
	00		 cmp	 QWORD PTR str$[rsp], 0
  000d1	74 0a		 je	 SHORT $LN1@utf_32_enc
  000d3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  000d8	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@utf_32_enc:
  000dd	33 c0		 xor	 eax, eax
  000df	85 c0		 test	 eax, eax
  000e1	75 e8		 jne	 SHORT $LN4@utf_32_enc

; 851  :         return NULL;

  000e3	33 c0		 xor	 eax, eax
  000e5	e9 9b 00 00 00	 jmp	 $LN8@utf_32_enc
$LN6@utf_32_enc:

; 852  :     }
; 853  :     v = codec_tuple(_PyUnicode_EncodeUTF32(str, errors, byteorder),
; 854  :                     PyUnicode_GET_LENGTH(str));

  000ea	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  000ef	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000fe	85 c0		 test	 eax, eax
  00100	75 1c		 jne	 SHORT $LN13@utf_32_enc
  00102	41 b8 56 03 00
	00		 mov	 r8d, 854		; 00000356H
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011c	33 c0		 xor	 eax, eax
$LN13@utf_32_enc:
  0011e	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00123	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00126	c1 e8 07	 shr	 eax, 7
  00129	83 e0 01	 and	 eax, 1
  0012c	85 c0		 test	 eax, eax
  0012e	75 1c		 jne	 SHORT $LN14@utf_32_enc
  00130	41 b8 56 03 00
	00		 mov	 r8d, 854		; 00000356H
  00136	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00144	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014a	33 c0		 xor	 eax, eax
$LN14@utf_32_enc:
  0014c	44 8b 44 24 38	 mov	 r8d, DWORD PTR byteorder$[rsp]
  00151	48 8b 54 24 40	 mov	 rdx, QWORD PTR errors$[rsp]
  00156	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  0015b	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF32
  00160	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00165	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00169	48 8b c8	 mov	 rcx, rax
  0016c	e8 00 00 00 00	 call	 codec_tuple
  00171	48 89 44 24 30	 mov	 QWORD PTR v$[rsp], rax

; 855  :     Py_DECREF(str);

  00176	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  0017b	e8 00 00 00 00	 call	 _Py_DecRef

; 856  :     return v;

  00180	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
$LN8@utf_32_enc:

; 857  : }

  00185	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00189	c3		 ret	 0
utf_32_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@NGLOMNP@O?$HMz?3utf_32_le_encode?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_32_le_encode DD imagerel utf_32_le_encode
	DD	imagerel utf_32_le_encode+377
	DD	imagerel $unwind$utf_32_le_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_le_encode DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BF@NGLOMNP@O?$HMz?3utf_32_le_encode?$AA@
CONST	SEGMENT
??_C@_0BF@NGLOMNP@O?$HMz?3utf_32_le_encode?$AA@ DB 'O|z:utf_32_le_encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_32_le_encode
_TEXT	SEGMENT
v$ = 32
errors$ = 40
str$ = 48
tv87 = 56
self$ = 80
args$ = 88
utf_32_le_encode PROC					; COMDAT

; 862  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 863  :     PyObject *str, *v;
; 864  :     const char *errors = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 865  : 
; 866  :     if (!PyArg_ParseTuple(args, "O|z:utf_32_le_encode",
; 867  :                           &str, &errors))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR str$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@NGLOMNP@O?$HMz?3utf_32_le_encode?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@utf_32_le_@2

; 868  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 37 01 00 00	 jmp	 $LN8@utf_32_le_@2
$LN7@utf_32_le_@2:

; 869  : 
; 870  :     str = PyUnicode_FromObject(str);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00042	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00047	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 871  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00052	74 65		 je	 SHORT $LN5@utf_32_le_@2
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN10@utf_32_le_@2
  0006c	41 b8 67 03 00
	00		 mov	 r8d, 871		; 00000367H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN10@utf_32_le_@2:
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN11@utf_32_le_@2
  0009a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  000a2	eb 0e		 jmp	 SHORT $LN12@utf_32_le_@2
$LN11@utf_32_le_@2:
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ae	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
$LN12@utf_32_le_@2:
  000b2	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000b7	7d 1f		 jge	 SHORT $LN6@utf_32_le_@2
$LN5@utf_32_le_@2:
$LN4@utf_32_le_@2:

; 872  :         Py_XDECREF(str);

  000b9	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  000bf	74 0a		 je	 SHORT $LN1@utf_32_le_@2
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@utf_32_le_@2:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 e8		 jne	 SHORT $LN4@utf_32_le_@2

; 873  :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 9c 00 00 00	 jmp	 $LN8@utf_32_le_@2
$LN6@utf_32_le_@2:

; 874  :     }
; 875  :     v = codec_tuple(_PyUnicode_EncodeUTF32(str, errors, -1),
; 876  :                     PyUnicode_GET_LENGTH(str));

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ec	85 c0		 test	 eax, eax
  000ee	75 1c		 jne	 SHORT $LN13@utf_32_le_@2
  000f0	41 b8 6c 03 00
	00		 mov	 r8d, 876		; 0000036cH
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN13@utf_32_le_@2:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	c1 e8 07	 shr	 eax, 7
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	75 1c		 jne	 SHORT $LN14@utf_32_le_@2
  0011e	41 b8 6c 03 00
	00		 mov	 r8d, 876		; 0000036cH
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00138	33 c0		 xor	 eax, eax
$LN14@utf_32_le_@2:
  0013a	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00140	48 8b 54 24 28	 mov	 rdx, QWORD PTR errors$[rsp]
  00145	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0014a	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF32
  0014f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00154	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00158	48 8b c8	 mov	 rcx, rax
  0015b	e8 00 00 00 00	 call	 codec_tuple
  00160	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 877  :     Py_DECREF(str);

  00165	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0016a	e8 00 00 00 00	 call	 _Py_DecRef

; 878  :     return v;

  0016f	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN8@utf_32_le_@2:

; 879  : }

  00174	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00178	c3		 ret	 0
utf_32_le_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@BDKCNMGM@O?$HMz?3utf_32_be_encode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf_32_be_encode DD imagerel utf_32_be_encode
	DD	imagerel utf_32_be_encode+377
	DD	imagerel $unwind$utf_32_be_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf_32_be_encode DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BF@BDKCNMGM@O?$HMz?3utf_32_be_encode?$AA@
CONST	SEGMENT
??_C@_0BF@BDKCNMGM@O?$HMz?3utf_32_be_encode?$AA@ DB 'O|z:utf_32_be_encode'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT utf_32_be_encode
_TEXT	SEGMENT
v$ = 32
errors$ = 40
str$ = 48
tv87 = 56
self$ = 80
args$ = 88
utf_32_be_encode PROC					; COMDAT

; 884  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 885  :     PyObject *str, *v;
; 886  :     const char *errors = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 887  : 
; 888  :     if (!PyArg_ParseTuple(args, "O|z:utf_32_be_encode",
; 889  :                           &str, &errors))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR str$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@BDKCNMGM@O?$HMz?3utf_32_be_encode?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@utf_32_be_@2

; 890  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 37 01 00 00	 jmp	 $LN8@utf_32_be_@2
$LN7@utf_32_be_@2:

; 891  : 
; 892  :     str = PyUnicode_FromObject(str);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00042	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00047	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 893  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00052	74 65		 je	 SHORT $LN5@utf_32_be_@2
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN10@utf_32_be_@2
  0006c	41 b8 7d 03 00
	00		 mov	 r8d, 893		; 0000037dH
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN10@utf_32_be_@2:
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN11@utf_32_be_@2
  0009a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  000a2	eb 0e		 jmp	 SHORT $LN12@utf_32_be_@2
$LN11@utf_32_be_@2:
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ae	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
$LN12@utf_32_be_@2:
  000b2	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000b7	7d 1f		 jge	 SHORT $LN6@utf_32_be_@2
$LN5@utf_32_be_@2:
$LN4@utf_32_be_@2:

; 894  :         Py_XDECREF(str);

  000b9	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  000bf	74 0a		 je	 SHORT $LN1@utf_32_be_@2
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@utf_32_be_@2:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 e8		 jne	 SHORT $LN4@utf_32_be_@2

; 895  :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 9c 00 00 00	 jmp	 $LN8@utf_32_be_@2
$LN6@utf_32_be_@2:

; 896  :     }
; 897  :     v = codec_tuple(_PyUnicode_EncodeUTF32(str, errors, +1),
; 898  :                     PyUnicode_GET_LENGTH(str));

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ec	85 c0		 test	 eax, eax
  000ee	75 1c		 jne	 SHORT $LN13@utf_32_be_@2
  000f0	41 b8 82 03 00
	00		 mov	 r8d, 898		; 00000382H
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN13@utf_32_be_@2:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	c1 e8 07	 shr	 eax, 7
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	75 1c		 jne	 SHORT $LN14@utf_32_be_@2
  0011e	41 b8 82 03 00
	00		 mov	 r8d, 898		; 00000382H
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00138	33 c0		 xor	 eax, eax
$LN14@utf_32_be_@2:
  0013a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00140	48 8b 54 24 28	 mov	 rdx, QWORD PTR errors$[rsp]
  00145	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0014a	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF32
  0014f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00154	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00158	48 8b c8	 mov	 rcx, rax
  0015b	e8 00 00 00 00	 call	 codec_tuple
  00160	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 899  :     Py_DECREF(str);

  00165	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0016a	e8 00 00 00 00	 call	 _Py_DecRef

; 900  :     return v;

  0016f	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN8@utf_32_be_@2:

; 901  : }

  00174	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00178	c3		 ret	 0
utf_32_be_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@PEILHFCF@O?$HMz?3unicode_escape_encode?$AA@ ; `string'
EXTRN	PyUnicode_AsUnicodeEscapeString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$unicode_escape_encode DD imagerel unicode_escape_encode
	DD	imagerel unicode_escape_encode+366
	DD	imagerel $unwind$unicode_escape_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unicode_escape_encode DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BK@PEILHFCF@O?$HMz?3unicode_escape_encode?$AA@
CONST	SEGMENT
??_C@_0BK@PEILHFCF@O?$HMz?3unicode_escape_encode?$AA@ DB 'O|z:unicode_esc'
	DB	'ape_encode', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT unicode_escape_encode
_TEXT	SEGMENT
v$ = 32
errors$ = 40
str$ = 48
tv87 = 56
self$ = 80
args$ = 88
unicode_escape_encode PROC				; COMDAT

; 906  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 907  :     PyObject *str, *v;
; 908  :     const char *errors = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 909  : 
; 910  :     if (!PyArg_ParseTuple(args, "O|z:unicode_escape_encode",
; 911  :                           &str, &errors))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR str$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PEILHFCF@O?$HMz?3unicode_escape_encode?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@unicode_es@2

; 912  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 2c 01 00 00	 jmp	 $LN8@unicode_es@2
$LN7@unicode_es@2:

; 913  : 
; 914  :     str = PyUnicode_FromObject(str);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00042	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00047	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 915  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00052	74 65		 je	 SHORT $LN5@unicode_es@2
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN10@unicode_es@2
  0006c	41 b8 93 03 00
	00		 mov	 r8d, 915		; 00000393H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN10@unicode_es@2:
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN11@unicode_es@2
  0009a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  000a2	eb 0e		 jmp	 SHORT $LN12@unicode_es@2
$LN11@unicode_es@2:
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ae	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
$LN12@unicode_es@2:
  000b2	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000b7	7d 1f		 jge	 SHORT $LN6@unicode_es@2
$LN5@unicode_es@2:
$LN4@unicode_es@2:

; 916  :         Py_XDECREF(str);

  000b9	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  000bf	74 0a		 je	 SHORT $LN1@unicode_es@2
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@unicode_es@2:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 e8		 jne	 SHORT $LN4@unicode_es@2

; 917  :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 91 00 00 00	 jmp	 $LN8@unicode_es@2
$LN6@unicode_es@2:

; 918  :     }
; 919  :     v = codec_tuple(PyUnicode_AsUnicodeEscapeString(str),
; 920  :                     PyUnicode_GET_LENGTH(str));

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ec	85 c0		 test	 eax, eax
  000ee	75 1c		 jne	 SHORT $LN13@unicode_es@2
  000f0	41 b8 98 03 00
	00		 mov	 r8d, 920		; 00000398H
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN13@unicode_es@2:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	c1 e8 07	 shr	 eax, 7
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	75 1c		 jne	 SHORT $LN14@unicode_es@2
  0011e	41 b8 98 03 00
	00		 mov	 r8d, 920		; 00000398H
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00138	33 c0		 xor	 eax, eax
$LN14@unicode_es@2:
  0013a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0013f	e8 00 00 00 00	 call	 PyUnicode_AsUnicodeEscapeString
  00144	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00149	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0014d	48 8b c8	 mov	 rcx, rax
  00150	e8 00 00 00 00	 call	 codec_tuple
  00155	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 921  :     Py_DECREF(str);

  0015a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0015f	e8 00 00 00 00	 call	 _Py_DecRef

; 922  :     return v;

  00164	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN8@unicode_es@2:

; 923  : }

  00169	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0016d	c3		 ret	 0
unicode_escape_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@JDKCIHBE@O?$HMz?3raw_unicode_escape_encode?$AA@ ; `string'
EXTRN	PyUnicode_AsRawUnicodeEscapeString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$raw_unicode_escape_encode DD imagerel raw_unicode_escape_encode
	DD	imagerel raw_unicode_escape_encode+366
	DD	imagerel $unwind$raw_unicode_escape_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$raw_unicode_escape_encode DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BO@JDKCIHBE@O?$HMz?3raw_unicode_escape_encode?$AA@
CONST	SEGMENT
??_C@_0BO@JDKCIHBE@O?$HMz?3raw_unicode_escape_encode?$AA@ DB 'O|z:raw_uni'
	DB	'code_escape_encode', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT raw_unicode_escape_encode
_TEXT	SEGMENT
v$ = 32
errors$ = 40
str$ = 48
tv87 = 56
self$ = 80
args$ = 88
raw_unicode_escape_encode PROC				; COMDAT

; 928  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 929  :     PyObject *str, *v;
; 930  :     const char *errors = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 931  : 
; 932  :     if (!PyArg_ParseTuple(args, "O|z:raw_unicode_escape_encode",
; 933  :                           &str, &errors))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR str$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@JDKCIHBE@O?$HMz?3raw_unicode_escape_encode?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@raw_unicod@2

; 934  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 2c 01 00 00	 jmp	 $LN8@raw_unicod@2
$LN7@raw_unicod@2:

; 935  : 
; 936  :     str = PyUnicode_FromObject(str);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00042	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00047	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 937  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00052	74 65		 je	 SHORT $LN5@raw_unicod@2
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN10@raw_unicod@2
  0006c	41 b8 a9 03 00
	00		 mov	 r8d, 937		; 000003a9H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN10@raw_unicod@2:
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN11@raw_unicod@2
  0009a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  000a2	eb 0e		 jmp	 SHORT $LN12@raw_unicod@2
$LN11@raw_unicod@2:
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ae	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
$LN12@raw_unicod@2:
  000b2	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000b7	7d 1f		 jge	 SHORT $LN6@raw_unicod@2
$LN5@raw_unicod@2:
$LN4@raw_unicod@2:

; 938  :         Py_XDECREF(str);

  000b9	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  000bf	74 0a		 je	 SHORT $LN1@raw_unicod@2
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@raw_unicod@2:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 e8		 jne	 SHORT $LN4@raw_unicod@2

; 939  :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 91 00 00 00	 jmp	 $LN8@raw_unicod@2
$LN6@raw_unicod@2:

; 940  :     }
; 941  :     v = codec_tuple(PyUnicode_AsRawUnicodeEscapeString(str),
; 942  :                     PyUnicode_GET_LENGTH(str));

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ec	85 c0		 test	 eax, eax
  000ee	75 1c		 jne	 SHORT $LN13@raw_unicod@2
  000f0	41 b8 ae 03 00
	00		 mov	 r8d, 942		; 000003aeH
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN13@raw_unicod@2:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	c1 e8 07	 shr	 eax, 7
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	75 1c		 jne	 SHORT $LN14@raw_unicod@2
  0011e	41 b8 ae 03 00
	00		 mov	 r8d, 942		; 000003aeH
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00138	33 c0		 xor	 eax, eax
$LN14@raw_unicod@2:
  0013a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0013f	e8 00 00 00 00	 call	 PyUnicode_AsRawUnicodeEscapeString
  00144	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00149	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  0014d	48 8b c8	 mov	 rcx, rax
  00150	e8 00 00 00 00	 call	 codec_tuple
  00155	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 943  :     Py_DECREF(str);

  0015a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0015f	e8 00 00 00 00	 call	 _Py_DecRef

; 944  :     return v;

  00164	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN8@raw_unicod@2:

; 945  : }

  00169	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0016d	c3		 ret	 0
raw_unicode_escape_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@IKGPMDLM@O?$HMz?3latin_1_encode?$AA@	; `string'
EXTRN	_PyUnicode_AsLatin1String:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$latin_1_encode DD imagerel latin_1_encode
	DD	imagerel latin_1_encode+371
	DD	imagerel $unwind$latin_1_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$latin_1_encode DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BD@IKGPMDLM@O?$HMz?3latin_1_encode?$AA@
CONST	SEGMENT
??_C@_0BD@IKGPMDLM@O?$HMz?3latin_1_encode?$AA@ DB 'O|z:latin_1_encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT latin_1_encode
_TEXT	SEGMENT
v$ = 32
errors$ = 40
str$ = 48
tv87 = 56
self$ = 80
args$ = 88
latin_1_encode PROC					; COMDAT

; 950  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 951  :     PyObject *str, *v;
; 952  :     const char *errors = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 953  : 
; 954  :     if (!PyArg_ParseTuple(args, "O|z:latin_1_encode",
; 955  :                           &str, &errors))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR str$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@IKGPMDLM@O?$HMz?3latin_1_encode?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@latin_1_en

; 956  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 31 01 00 00	 jmp	 $LN8@latin_1_en
$LN7@latin_1_en:

; 957  : 
; 958  :     str = PyUnicode_FromObject(str);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00042	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00047	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 959  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00052	74 65		 je	 SHORT $LN5@latin_1_en
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN10@latin_1_en
  0006c	41 b8 bf 03 00
	00		 mov	 r8d, 959		; 000003bfH
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN10@latin_1_en:
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN11@latin_1_en
  0009a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  000a2	eb 0e		 jmp	 SHORT $LN12@latin_1_en
$LN11@latin_1_en:
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ae	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
$LN12@latin_1_en:
  000b2	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000b7	7d 1f		 jge	 SHORT $LN6@latin_1_en
$LN5@latin_1_en:
$LN4@latin_1_en:

; 960  :         Py_XDECREF(str);

  000b9	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  000bf	74 0a		 je	 SHORT $LN1@latin_1_en
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@latin_1_en:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 e8		 jne	 SHORT $LN4@latin_1_en

; 961  :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 96 00 00 00	 jmp	 $LN8@latin_1_en
$LN6@latin_1_en:

; 962  :     }
; 963  :     v = codec_tuple(_PyUnicode_AsLatin1String(str, errors),
; 964  :                     PyUnicode_GET_LENGTH(str));

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ec	85 c0		 test	 eax, eax
  000ee	75 1c		 jne	 SHORT $LN13@latin_1_en
  000f0	41 b8 c4 03 00
	00		 mov	 r8d, 964		; 000003c4H
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN13@latin_1_en:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	c1 e8 07	 shr	 eax, 7
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	75 1c		 jne	 SHORT $LN14@latin_1_en
  0011e	41 b8 c4 03 00
	00		 mov	 r8d, 964		; 000003c4H
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00138	33 c0		 xor	 eax, eax
$LN14@latin_1_en:
  0013a	48 8b 54 24 28	 mov	 rdx, QWORD PTR errors$[rsp]
  0013f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00144	e8 00 00 00 00	 call	 _PyUnicode_AsLatin1String
  00149	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0014e	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00152	48 8b c8	 mov	 rcx, rax
  00155	e8 00 00 00 00	 call	 codec_tuple
  0015a	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 965  :     Py_DECREF(str);

  0015f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00164	e8 00 00 00 00	 call	 _Py_DecRef

; 966  :     return v;

  00169	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN8@latin_1_en:

; 967  : }

  0016e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00172	c3		 ret	 0
latin_1_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@NEGCEDFA@O?$HMz?3ascii_encode?$AA@	; `string'
EXTRN	_PyUnicode_AsASCIIString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ascii_encode DD imagerel ascii_encode
	DD	imagerel ascii_encode+371
	DD	imagerel $unwind$ascii_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ascii_encode DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BB@NEGCEDFA@O?$HMz?3ascii_encode?$AA@
CONST	SEGMENT
??_C@_0BB@NEGCEDFA@O?$HMz?3ascii_encode?$AA@ DB 'O|z:ascii_encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ascii_encode
_TEXT	SEGMENT
v$ = 32
errors$ = 40
str$ = 48
tv87 = 56
self$ = 80
args$ = 88
ascii_encode PROC					; COMDAT

; 972  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 973  :     PyObject *str, *v;
; 974  :     const char *errors = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 975  : 
; 976  :     if (!PyArg_ParseTuple(args, "O|z:ascii_encode",
; 977  :                           &str, &errors))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR str$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@NEGCEDFA@O?$HMz?3ascii_encode?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@ascii_enco

; 978  :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 31 01 00 00	 jmp	 $LN8@ascii_enco
$LN7@ascii_enco:

; 979  : 
; 980  :     str = PyUnicode_FromObject(str);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00042	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00047	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 981  :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00052	74 65		 je	 SHORT $LN5@ascii_enco
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN10@ascii_enco
  0006c	41 b8 d5 03 00
	00		 mov	 r8d, 981		; 000003d5H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN10@ascii_enco:
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN11@ascii_enco
  0009a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  000a2	eb 0e		 jmp	 SHORT $LN12@ascii_enco
$LN11@ascii_enco:
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ae	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
$LN12@ascii_enco:
  000b2	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000b7	7d 1f		 jge	 SHORT $LN6@ascii_enco
$LN5@ascii_enco:
$LN4@ascii_enco:

; 982  :         Py_XDECREF(str);

  000b9	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  000bf	74 0a		 je	 SHORT $LN1@ascii_enco
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ascii_enco:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 e8		 jne	 SHORT $LN4@ascii_enco

; 983  :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 96 00 00 00	 jmp	 $LN8@ascii_enco
$LN6@ascii_enco:

; 984  :     }
; 985  :     v = codec_tuple(_PyUnicode_AsASCIIString(str, errors),
; 986  :                     PyUnicode_GET_LENGTH(str));

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ec	85 c0		 test	 eax, eax
  000ee	75 1c		 jne	 SHORT $LN13@ascii_enco
  000f0	41 b8 da 03 00
	00		 mov	 r8d, 986		; 000003daH
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN13@ascii_enco:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	c1 e8 07	 shr	 eax, 7
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	75 1c		 jne	 SHORT $LN14@ascii_enco
  0011e	41 b8 da 03 00
	00		 mov	 r8d, 986		; 000003daH
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00138	33 c0		 xor	 eax, eax
$LN14@ascii_enco:
  0013a	48 8b 54 24 28	 mov	 rdx, QWORD PTR errors$[rsp]
  0013f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00144	e8 00 00 00 00	 call	 _PyUnicode_AsASCIIString
  00149	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  0014e	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00152	48 8b c8	 mov	 rcx, rax
  00155	e8 00 00 00 00	 call	 codec_tuple
  0015a	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 987  :     Py_DECREF(str);

  0015f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00164	e8 00 00 00 00	 call	 _Py_DecRef

; 988  :     return v;

  00169	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN8@ascii_enco:

; 989  : }

  0016e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00172	c3		 ret	 0
ascii_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@ELCINCHI@O?$HMzO?3charmap_encode?$AA@	; `string'
EXTRN	_PyUnicode_EncodeCharmap:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$charmap_encode DD imagerel charmap_encode
	DD	imagerel charmap_encode+418
	DD	imagerel $unwind$charmap_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$charmap_encode DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0BE@ELCINCHI@O?$HMzO?3charmap_encode?$AA@
CONST	SEGMENT
??_C@_0BE@ELCINCHI@O?$HMzO?3charmap_encode?$AA@ DB 'O|zO:charmap_encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT charmap_encode
_TEXT	SEGMENT
v$ = 48
errors$ = 56
mapping$ = 64
str$ = 72
tv89 = 80
self$ = 112
args$ = 120
charmap_encode PROC					; COMDAT

; 994  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 995  :     PyObject *str, *v;
; 996  :     const char *errors = NULL;

  0000e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 997  :     PyObject *mapping = NULL;

  00017	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR mapping$[rsp], 0

; 998  : 
; 999  :     if (!PyArg_ParseTuple(args, "O|zO:charmap_encode",
; 1000 :                           &str, &errors, &mapping))

  00020	48 8d 44 24 40	 lea	 rax, QWORD PTR mapping$[rsp]
  00025	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002a	4c 8d 4c 24 38	 lea	 r9, QWORD PTR errors$[rsp]
  0002f	4c 8d 44 24 48	 lea	 r8, QWORD PTR str$[rsp]
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@ELCINCHI@O?$HMzO?3charmap_encode?$AA@
  0003b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00040	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00045	85 c0		 test	 eax, eax
  00047	75 07		 jne	 SHORT $LN8@charmap_en

; 1001 :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	e9 4d 01 00 00	 jmp	 $LN9@charmap_en
$LN8@charmap_en:

; 1002 :     if (mapping == Py_None)

  00050	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00057	48 39 44 24 40	 cmp	 QWORD PTR mapping$[rsp], rax
  0005c	75 09		 jne	 SHORT $LN7@charmap_en

; 1003 :         mapping = NULL;

  0005e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR mapping$[rsp], 0
$LN7@charmap_en:

; 1004 : 
; 1005 :     str = PyUnicode_FromObject(str);

  00067	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  0006c	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00071	48 89 44 24 48	 mov	 QWORD PTR str$[rsp], rax

; 1006 :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00076	48 83 7c 24 48
	00		 cmp	 QWORD PTR str$[rsp], 0
  0007c	74 65		 je	 SHORT $LN5@charmap_en
  0007e	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00083	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00087	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00092	85 c0		 test	 eax, eax
  00094	75 1c		 jne	 SHORT $LN11@charmap_en
  00096	41 b8 ee 03 00
	00		 mov	 r8d, 1006		; 000003eeH
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b0	33 c0		 xor	 eax, eax
$LN11@charmap_en:
  000b2	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  000b7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000ba	c1 e8 07	 shr	 eax, 7
  000bd	83 e0 01	 and	 eax, 1
  000c0	85 c0		 test	 eax, eax
  000c2	74 0a		 je	 SHORT $LN12@charmap_en
  000c4	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  000cc	eb 0e		 jmp	 SHORT $LN13@charmap_en
$LN12@charmap_en:
  000ce	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  000d3	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000d8	89 44 24 50	 mov	 DWORD PTR tv89[rsp], eax
$LN13@charmap_en:
  000dc	83 7c 24 50 00	 cmp	 DWORD PTR tv89[rsp], 0
  000e1	7d 1f		 jge	 SHORT $LN6@charmap_en
$LN5@charmap_en:
$LN4@charmap_en:

; 1007 :         Py_XDECREF(str);

  000e3	48 83 7c 24 48
	00		 cmp	 QWORD PTR str$[rsp], 0
  000e9	74 0a		 je	 SHORT $LN1@charmap_en
  000eb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  000f0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@charmap_en:
  000f5	33 c0		 xor	 eax, eax
  000f7	85 c0		 test	 eax, eax
  000f9	75 e8		 jne	 SHORT $LN4@charmap_en

; 1008 :         return NULL;

  000fb	33 c0		 xor	 eax, eax
  000fd	e9 9b 00 00 00	 jmp	 $LN9@charmap_en
$LN6@charmap_en:

; 1009 :     }
; 1010 :     v = codec_tuple(_PyUnicode_EncodeCharmap(str, mapping, errors),
; 1011 :                     PyUnicode_GET_LENGTH(str));

  00102	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00107	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00111	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00116	85 c0		 test	 eax, eax
  00118	75 1c		 jne	 SHORT $LN14@charmap_en
  0011a	41 b8 f3 03 00
	00		 mov	 r8d, 1011		; 000003f3H
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00134	33 c0		 xor	 eax, eax
$LN14@charmap_en:
  00136	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  0013b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0013e	c1 e8 07	 shr	 eax, 7
  00141	83 e0 01	 and	 eax, 1
  00144	85 c0		 test	 eax, eax
  00146	75 1c		 jne	 SHORT $LN15@charmap_en
  00148	41 b8 f3 03 00
	00		 mov	 r8d, 1011		; 000003f3H
  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00162	33 c0		 xor	 eax, eax
$LN15@charmap_en:
  00164	4c 8b 44 24 38	 mov	 r8, QWORD PTR errors$[rsp]
  00169	48 8b 54 24 40	 mov	 rdx, QWORD PTR mapping$[rsp]
  0016e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00173	e8 00 00 00 00	 call	 _PyUnicode_EncodeCharmap
  00178	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  0017d	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00181	48 8b c8	 mov	 rcx, rax
  00184	e8 00 00 00 00	 call	 codec_tuple
  00189	48 89 44 24 30	 mov	 QWORD PTR v$[rsp], rax

; 1012 :     Py_DECREF(str);

  0018e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00193	e8 00 00 00 00	 call	 _Py_DecRef

; 1013 :     return v;

  00198	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
$LN9@charmap_en:

; 1014 : }

  0019d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001a1	c3		 ret	 0
charmap_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@NPKJOCOC@U?3charmap_build?$AA@	; `string'
EXTRN	PyUnicode_BuildEncodingMap:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$charmap_build DD imagerel charmap_build
	DD	imagerel charmap_build+59
	DD	imagerel $unwind$charmap_build
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$charmap_build DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BA@NPKJOCOC@U?3charmap_build?$AA@
CONST	SEGMENT
??_C@_0BA@NPKJOCOC@U?3charmap_build?$AA@ DB 'U:charmap_build', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT charmap_build
_TEXT	SEGMENT
map$ = 32
self$ = 64
args$ = 72
charmap_build PROC					; COMDAT

; 1018 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1019 :     PyObject *map;
; 1020 :     if (!PyArg_ParseTuple(args, "U:charmap_build", &map))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR map$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@NPKJOCOC@U?3charmap_build?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN1@charmap_bu

; 1021 :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 0a		 jmp	 SHORT $LN2@charmap_bu
$LN1@charmap_bu:

; 1022 :     return PyUnicode_BuildEncodingMap(map);

  0002c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR map$[rsp]
  00031	e8 00 00 00 00	 call	 PyUnicode_BuildEncodingMap
$LN2@charmap_bu:

; 1023 : }

  00036	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003a	c3		 ret	 0
charmap_build ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@DFEJEMFN@O?$HMz?3mbcs_encode?$AA@	; `string'
EXTRN	PyUnicode_EncodeCodePage:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mbcs_encode DD imagerel mbcs_encode
	DD	imagerel mbcs_encode+373
	DD	imagerel $unwind$mbcs_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mbcs_encode DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BA@DFEJEMFN@O?$HMz?3mbcs_encode?$AA@
CONST	SEGMENT
??_C@_0BA@DFEJEMFN@O?$HMz?3mbcs_encode?$AA@ DB 'O|z:mbcs_encode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mbcs_encode
_TEXT	SEGMENT
v$ = 32
errors$ = 40
str$ = 48
tv87 = 56
self$ = 80
args$ = 88
mbcs_encode PROC					; COMDAT

; 1030 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1031 :     PyObject *str, *v;
; 1032 :     const char *errors = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 1033 : 
; 1034 :     if (!PyArg_ParseTuple(args, "O|z:mbcs_encode",
; 1035 :                           &str, &errors))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR errors$[rsp]
  0001c	4c 8d 44 24 30	 lea	 r8, QWORD PTR str$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DFEJEMFN@O?$HMz?3mbcs_encode?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN7@mbcs_encod

; 1036 :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 33 01 00 00	 jmp	 $LN8@mbcs_encod
$LN7@mbcs_encod:

; 1037 : 
; 1038 :     str = PyUnicode_FromObject(str);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00042	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00047	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax

; 1039 :     if (str == NULL || PyUnicode_READY(str) < 0) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  00052	74 65		 je	 SHORT $LN5@mbcs_encod
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN10@mbcs_encod
  0006c	41 b8 0f 04 00
	00		 mov	 r8d, 1039		; 0000040fH
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN10@mbcs_encod:
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN11@mbcs_encod
  0009a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  000a2	eb 0e		 jmp	 SHORT $LN12@mbcs_encod
$LN11@mbcs_encod:
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ae	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
$LN12@mbcs_encod:
  000b2	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000b7	7d 1f		 jge	 SHORT $LN6@mbcs_encod
$LN5@mbcs_encod:
$LN4@mbcs_encod:

; 1040 :         Py_XDECREF(str);

  000b9	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  000bf	74 0a		 je	 SHORT $LN1@mbcs_encod
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@mbcs_encod:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 e8		 jne	 SHORT $LN4@mbcs_encod

; 1041 :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 98 00 00 00	 jmp	 $LN8@mbcs_encod
$LN6@mbcs_encod:

; 1042 :     }
; 1043 :     v = codec_tuple(PyUnicode_EncodeCodePage(CP_ACP, str, errors),
; 1044 :                     PyUnicode_GET_LENGTH(str));

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ec	85 c0		 test	 eax, eax
  000ee	75 1c		 jne	 SHORT $LN13@mbcs_encod
  000f0	41 b8 14 04 00
	00		 mov	 r8d, 1044		; 00000414H
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN13@mbcs_encod:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	c1 e8 07	 shr	 eax, 7
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	75 1c		 jne	 SHORT $LN14@mbcs_encod
  0011e	41 b8 14 04 00
	00		 mov	 r8d, 1044		; 00000414H
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00138	33 c0		 xor	 eax, eax
$LN14@mbcs_encod:
  0013a	4c 8b 44 24 28	 mov	 r8, QWORD PTR errors$[rsp]
  0013f	48 8b 54 24 30	 mov	 rdx, QWORD PTR str$[rsp]
  00144	33 c9		 xor	 ecx, ecx
  00146	e8 00 00 00 00	 call	 PyUnicode_EncodeCodePage
  0014b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00150	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00154	48 8b c8	 mov	 rcx, rax
  00157	e8 00 00 00 00	 call	 codec_tuple
  0015c	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1045 :     Py_DECREF(str);

  00161	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00166	e8 00 00 00 00	 call	 _Py_DecRef

; 1046 :     return v;

  0016b	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN8@mbcs_encod:

; 1047 : }

  00170	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00174	c3		 ret	 0
mbcs_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@BPOPKOLP@iO?$HMz?3code_page_encode?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$code_page_encode DD imagerel code_page_encode
	DD	imagerel code_page_encode+385
	DD	imagerel $unwind$code_page_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_page_encode DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0BG@BPOPKOLP@iO?$HMz?3code_page_encode?$AA@
CONST	SEGMENT
??_C@_0BG@BPOPKOLP@iO?$HMz?3code_page_encode?$AA@ DB 'iO|z:code_page_enco'
	DB	'de', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT code_page_encode
_TEXT	SEGMENT
code_page$ = 48
v$ = 56
errors$ = 64
str$ = 72
tv88 = 80
self$ = 112
args$ = 120
code_page_encode PROC					; COMDAT

; 1052 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1053 :     PyObject *str, *v;
; 1054 :     const char *errors = NULL;

  0000e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 1055 :     int code_page;
; 1056 : 
; 1057 :     if (!PyArg_ParseTuple(args, "iO|z:code_page_encode",
; 1058 :                           &code_page, &str, &errors))

  00017	48 8d 44 24 40	 lea	 rax, QWORD PTR errors$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00021	4c 8d 4c 24 48	 lea	 r9, QWORD PTR str$[rsp]
  00026	4c 8d 44 24 30	 lea	 r8, QWORD PTR code_page$[rsp]
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BPOPKOLP@iO?$HMz?3code_page_encode?$AA@
  00032	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00037	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN7@code_page_@2

; 1059 :         return NULL;

  00040	33 c0		 xor	 eax, eax
  00042	e9 35 01 00 00	 jmp	 $LN8@code_page_@2
$LN7@code_page_@2:

; 1060 : 
; 1061 :     str = PyUnicode_FromObject(str);

  00047	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  0004c	e8 00 00 00 00	 call	 PyUnicode_FromObject
  00051	48 89 44 24 48	 mov	 QWORD PTR str$[rsp], rax

; 1062 :     if (str == NULL || PyUnicode_READY(str) < 0) {

  00056	48 83 7c 24 48
	00		 cmp	 QWORD PTR str$[rsp], 0
  0005c	74 65		 je	 SHORT $LN5@code_page_@2
  0005e	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00063	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00067	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0006d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00072	85 c0		 test	 eax, eax
  00074	75 1c		 jne	 SHORT $LN10@code_page_@2
  00076	41 b8 26 04 00
	00		 mov	 r8d, 1062		; 00000426H
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00090	33 c0		 xor	 eax, eax
$LN10@code_page_@2:
  00092	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00097	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0009a	c1 e8 07	 shr	 eax, 7
  0009d	83 e0 01	 and	 eax, 1
  000a0	85 c0		 test	 eax, eax
  000a2	74 0a		 je	 SHORT $LN11@code_page_@2
  000a4	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
  000ac	eb 0e		 jmp	 SHORT $LN12@code_page_@2
$LN11@code_page_@2:
  000ae	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  000b3	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000b8	89 44 24 50	 mov	 DWORD PTR tv88[rsp], eax
$LN12@code_page_@2:
  000bc	83 7c 24 50 00	 cmp	 DWORD PTR tv88[rsp], 0
  000c1	7d 1f		 jge	 SHORT $LN6@code_page_@2
$LN5@code_page_@2:
$LN4@code_page_@2:

; 1063 :         Py_XDECREF(str);

  000c3	48 83 7c 24 48
	00		 cmp	 QWORD PTR str$[rsp], 0
  000c9	74 0a		 je	 SHORT $LN1@code_page_@2
  000cb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  000d0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@code_page_@2:
  000d5	33 c0		 xor	 eax, eax
  000d7	85 c0		 test	 eax, eax
  000d9	75 e8		 jne	 SHORT $LN4@code_page_@2

; 1064 :         return NULL;

  000db	33 c0		 xor	 eax, eax
  000dd	e9 9a 00 00 00	 jmp	 $LN8@code_page_@2
$LN6@code_page_@2:

; 1065 :     }
; 1066 :     v = codec_tuple(PyUnicode_EncodeCodePage(code_page,
; 1067 :                                              str,
; 1068 :                                              errors),
; 1069 :                     PyUnicode_GET_LENGTH(str));

  000e2	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  000e7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000eb	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000f6	85 c0		 test	 eax, eax
  000f8	75 1c		 jne	 SHORT $LN13@code_page_@2
  000fa	41 b8 2d 04 00
	00		 mov	 r8d, 1069		; 0000042dH
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00114	33 c0		 xor	 eax, eax
$LN13@code_page_@2:
  00116	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  0011b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0011e	c1 e8 07	 shr	 eax, 7
  00121	83 e0 01	 and	 eax, 1
  00124	85 c0		 test	 eax, eax
  00126	75 1c		 jne	 SHORT $LN14@code_page_@2
  00128	41 b8 2d 04 00
	00		 mov	 r8d, 1069		; 0000042dH
  0012e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DG@BEJPFIJD@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00135	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0013c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00142	33 c0		 xor	 eax, eax
$LN14@code_page_@2:
  00144	4c 8b 44 24 40	 mov	 r8, QWORD PTR errors$[rsp]
  00149	48 8b 54 24 48	 mov	 rdx, QWORD PTR str$[rsp]
  0014e	8b 4c 24 30	 mov	 ecx, DWORD PTR code_page$[rsp]
  00152	e8 00 00 00 00	 call	 PyUnicode_EncodeCodePage
  00157	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  0015c	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00160	48 8b c8	 mov	 rcx, rax
  00163	e8 00 00 00 00	 call	 codec_tuple
  00168	48 89 44 24 38	 mov	 QWORD PTR v$[rsp], rax

; 1070 :     Py_DECREF(str);

  0016d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00172	e8 00 00 00 00	 call	 _Py_DecRef

; 1071 :     return v;

  00177	48 8b 44 24 38	 mov	 rax, QWORD PTR v$[rsp]
$LN8@code_page_@2:

; 1072 : }

  0017c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00180	c3		 ret	 0
code_page_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@LEFLNIOA@sO?3register_error?$AA@	; `string'
EXTRN	PyCodec_RegisterError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$register_error DD imagerel register_error
	DD	imagerel register_error+96
	DD	imagerel $unwind$register_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$register_error DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BC@LEFLNIOA@sO?3register_error?$AA@
CONST	SEGMENT
??_C@_0BC@LEFLNIOA@sO?3register_error?$AA@ DB 'sO:register_error', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT register_error
_TEXT	SEGMENT
handler$ = 32
name$ = 40
self$ = 64
args$ = 72
register_error PROC					; COMDAT

; 1088 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1089 :     const char *name;
; 1090 :     PyObject *handler;
; 1091 : 
; 1092 :     if (!PyArg_ParseTuple(args, "sO:register_error",
; 1093 :                           &name, &handler))

  0000e	4c 8d 4c 24 20	 lea	 r9, QWORD PTR handler$[rsp]
  00013	4c 8d 44 24 28	 lea	 r8, QWORD PTR name$[rsp]
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LEFLNIOA@sO?3register_error?$AA@
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00024	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN2@register_e

; 1094 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 2a		 jmp	 SHORT $LN3@register_e
$LN2@register_e:

; 1095 :     if (PyCodec_RegisterError(name, handler))

  00031	48 8b 54 24 20	 mov	 rdx, QWORD PTR handler$[rsp]
  00036	48 8b 4c 24 28	 mov	 rcx, QWORD PTR name$[rsp]
  0003b	e8 00 00 00 00	 call	 PyCodec_RegisterError
  00040	85 c0		 test	 eax, eax
  00042	74 04		 je	 SHORT $LN1@register_e

; 1096 :         return NULL;

  00044	33 c0		 xor	 eax, eax
  00046	eb 13		 jmp	 SHORT $LN3@register_e
$LN1@register_e:

; 1097 :     Py_RETURN_NONE;

  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0004f	e8 00 00 00 00	 call	 _Py_IncRef
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@register_e:

; 1098 : }

  0005b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005f	c3		 ret	 0
register_error ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@OFCOIDCL@s?3lookup_error?$AA@		; `string'
EXTRN	PyCodec_LookupError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$lookup_error DD imagerel lookup_error
	DD	imagerel lookup_error+59
	DD	imagerel $unwind$lookup_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookup_error DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0P@OFCOIDCL@s?3lookup_error?$AA@
CONST	SEGMENT
??_C@_0P@OFCOIDCL@s?3lookup_error?$AA@ DB 's:lookup_error', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT lookup_error
_TEXT	SEGMENT
name$ = 32
self$ = 64
args$ = 72
lookup_error PROC					; COMDAT

; 1107 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1108 :     const char *name;
; 1109 : 
; 1110 :     if (!PyArg_ParseTuple(args, "s:lookup_error",
; 1111 :                           &name))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR name$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@OFCOIDCL@s?3lookup_error?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN1@lookup_err

; 1112 :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 0a		 jmp	 SHORT $LN2@lookup_err
$LN1@lookup_err:

; 1113 :     return PyCodec_LookupError(name);

  0002c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00031	e8 00 00 00 00	 call	 PyCodec_LookupError
$LN2@lookup_err:

; 1114 : }

  00036	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003a	c3		 ret	 0
lookup_error ENDP
_TEXT	ENDS
PUBLIC	PyInit__codecs
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__codecs DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$PyInit__codecs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__codecs DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyInit__codecs
_TEXT	SEGMENT
PyInit__codecs PROC					; COMDAT

; 1188 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1189 :         return PyModule_Create(&codecsmodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:codecsmodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs

; 1190 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
PyInit__codecs ENDP
_TEXT	ENDS
END
