; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09DNDNKKCN@xxsubtype?$AA@			; `string'
PUBLIC	??_C@_05GGJPBMNG@bench?$AA@			; `string'
PUBLIC	??_C@_0BD@LPHMOIOI@xxsubtype?4spamdict?$AA@	; `string'
PUBLIC	??_C@_0BD@JDCKAAFJ@xxsubtype?4spamlist?$AA@	; `string'
PUBLIC	??_C@_0CL@JIOEMMEE@an?5int?5variable?5for?5demonstratio@ ; `string'
PUBLIC	??_C@_05HDBKIDE@state?$AA@			; `string'
PUBLIC	??_C@_0BI@ONGJBLEK@staticmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0L@GMNALEKC@staticmeth?$AA@		; `string'
PUBLIC	??_C@_0BH@CECAENAO@classmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@ ; `string'
PUBLIC	??_C@_09EDADNKFI@classmeth?$AA@			; `string'
PUBLIC	??_C@_0BA@BCBLHFND@setstate?$CIstate?$CJ?$AA@	; `string'
PUBLIC	??_C@_08BJPILIMO@setstate?$AA@			; `string'
PUBLIC	??_C@_0BE@EHPGDDIO@getstate?$CI?$CJ?5?9?$DO?5state?$AA@ ; `string'
PUBLIC	??_C@_08OINEKLLD@getstate?$AA@			; `string'
;	COMDAT ??_C@_09DNDNKKCN@xxsubtype?$AA@
CONST	SEGMENT
??_C@_09DNDNKKCN@xxsubtype?$AA@ DB 'xxsubtype', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGJPBMNG@bench?$AA@
CONST	SEGMENT
??_C@_05GGJPBMNG@bench?$AA@ DB 'bench', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LPHMOIOI@xxsubtype?4spamdict?$AA@
CONST	SEGMENT
??_C@_0BD@LPHMOIOI@xxsubtype?4spamdict?$AA@ DB 'xxsubtype.spamdict', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JDCKAAFJ@xxsubtype?4spamlist?$AA@
CONST	SEGMENT
??_C@_0BD@JDCKAAFJ@xxsubtype?4spamlist?$AA@ DB 'xxsubtype.spamlist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@JIOEMMEE@an?5int?5variable?5for?5demonstratio@
CONST	SEGMENT
??_C@_0CL@JIOEMMEE@an?5int?5variable?5for?5demonstratio@ DB 'an int varia'
	DB	'ble for demonstration purposes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HDBKIDE@state?$AA@
CONST	SEGMENT
??_C@_05HDBKIDE@state?$AA@ DB 'state', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ONGJBLEK@staticmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@
CONST	SEGMENT
??_C@_0BI@ONGJBLEK@staticmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@ DB 'stat'
	DB	'icmeth(*args, **kw)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GMNALEKC@staticmeth?$AA@
CONST	SEGMENT
??_C@_0L@GMNALEKC@staticmeth?$AA@ DB 'staticmeth', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CECAENAO@classmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@
CONST	SEGMENT
??_C@_0BH@CECAENAO@classmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@ DB 'class'
	DB	'meth(*args, **kw)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09EDADNKFI@classmeth?$AA@
CONST	SEGMENT
??_C@_09EDADNKFI@classmeth?$AA@ DB 'classmeth', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BCBLHFND@setstate?$CIstate?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@BCBLHFND@setstate?$CIstate?$CJ?$AA@ DB 'setstate(state)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJPILIMO@setstate?$AA@
CONST	SEGMENT
??_C@_08BJPILIMO@setstate?$AA@ DB 'setstate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EHPGDDIO@getstate?$CI?$CJ?5?9?$DO?5state?$AA@
CONST	SEGMENT
??_C@_0BE@EHPGDDIO@getstate?$CI?$CJ?5?9?$DO?5state?$AA@ DB 'getstate() ->'
	DB	' state', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08OINEKLLD@getstate?$AA@
CONST	SEGMENT
??_C@_08OINEKLLD@getstate?$AA@ DB 'getstate', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
xxsubtype__doc__ DB 'xxsubtype is an example module showing how to subtyp'
	DB	'e builtin types from C.', 0aH, 'test_descr.py in the standard'
	DB	' test suite requires it in order to complete.', 0aH, 'If you '
	DB	'don''t care about the examples, and don''t intend to run the '
	DB	'Python', 0aH, 'test suite, you can recompile Python without M'
	DB	'odules/xxsubtype.c.', 00H
	ORG $+14
spamlist_methods DQ FLAT:??_C@_08OINEKLLD@getstate?$AA@
	DQ	FLAT:spamlist_getstate
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BE@EHPGDDIO@getstate?$CI?$CJ?5?9?$DO?5state?$AA@
	DQ	FLAT:??_C@_08BJPILIMO@setstate?$AA@
	DQ	FLAT:spamlist_setstate
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BA@BCBLHFND@setstate?$CIstate?$CJ?$AA@
	DQ	FLAT:??_C@_09EDADNKFI@classmeth?$AA@
	DQ	FLAT:spamlist_specialmeth
	DD	013H
	ORG $+4
	DQ	FLAT:??_C@_0BH@CECAENAO@classmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@
	DQ	FLAT:??_C@_0L@GMNALEKC@staticmeth?$AA@
	DQ	FLAT:spamlist_specialmeth
	DD	023H
	ORG $+4
	DQ	FLAT:??_C@_0BI@ONGJBLEK@staticmeth?$CI?$CKargs?0?5?$CK?$CKkw?$CJ?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
spamlist_getsets DQ FLAT:??_C@_05HDBKIDE@state?$AA@
	DQ	FLAT:spamlist_state_get
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0CL@JIOEMMEE@an?5int?5variable?5for?5demonstratio@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
spamlist_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@JDCKAAFJ@xxsubtype?4spamlist?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:spamlist_methods
	DQ	0000000000000000H
	DQ	FLAT:spamlist_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:spamlist_init
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
spamdict_methods DQ FLAT:??_C@_08OINEKLLD@getstate?$AA@
	DQ	FLAT:spamdict_getstate
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BE@EHPGDDIO@getstate?$CI?$CJ?5?9?$DO?5state?$AA@
	DQ	FLAT:??_C@_08BJPILIMO@setstate?$AA@
	DQ	FLAT:spamdict_setstate
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BA@BCBLHFND@setstate?$CIstate?$CJ?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
spamdict_members DQ FLAT:??_C@_05HDBKIDE@state?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CL@JIOEMMEE@an?5int?5variable?5for?5demonstratio@
	DQ	0000000000000000H
	ORG $+32
spamdict_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@LPHMOIOI@xxsubtype?4spamdict?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:spamdict_methods
	DQ	FLAT:spamdict_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:spamdict_init
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
xxsubtype_functions DQ FLAT:??_C@_05GGJPBMNG@bench?$AA@
	DQ	FLAT:spam_bench
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
xxsubtypemodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09DNDNKKCN@xxsubtype?$AA@
	DQ	FLAT:xxsubtype__doc__
	DQ	ffffffffffffffffH
	DQ	FLAT:xxsubtype_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_09JCIGMFJK@?3getstate?$AA@		; `string'
EXTRN	PyLong_FromLong:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\xxsubtype.c
pdata	SEGMENT
$pdata$spamlist_getstate DD imagerel spamlist_getstate
	DD	imagerel spamlist_getstate+60
	DD	imagerel $unwind$spamlist_getstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamlist_getstate DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_09JCIGMFJK@?3getstate?$AA@
CONST	SEGMENT
??_C@_09JCIGMFJK@?3getstate?$AA@ DB ':getstate', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT spamlist_getstate
_TEXT	SEGMENT
self$ = 48
args$ = 56
spamlist_getstate PROC					; COMDAT

; 28   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 29   :     if (!PyArg_ParseTuple(args, ":getstate"))

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09JCIGMFJK@?3getstate?$AA@
  00015	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  0001a	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001f	85 c0		 test	 eax, eax
  00021	75 04		 jne	 SHORT $LN1@spamlist_g

; 30   :         return NULL;

  00023	33 c0		 xor	 eax, eax
  00025	eb 10		 jmp	 SHORT $LN2@spamlist_g
$LN1@spamlist_g:

; 31   :     return PyLong_FromLong(self->state);

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0002c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [rax+128]
  00032	e8 00 00 00 00	 call	 PyLong_FromLong
$LN2@spamlist_g:

; 32   : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
spamlist_getstate ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0L@MADOKHMA@i?3setstate?$AA@		; `string'
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$spamlist_setstate DD imagerel spamlist_setstate
	DD	imagerel spamlist_setstate+83
	DD	imagerel $unwind$spamlist_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamlist_setstate DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0L@MADOKHMA@i?3setstate?$AA@
CONST	SEGMENT
??_C@_0L@MADOKHMA@i?3setstate?$AA@ DB 'i:setstate', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT spamlist_setstate
_TEXT	SEGMENT
state$ = 32
self$ = 64
args$ = 72
spamlist_setstate PROC					; COMDAT

; 36   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 37   :     int state;
; 38   : 
; 39   :     if (!PyArg_ParseTuple(args, "i:setstate", &state))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR state$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@MADOKHMA@i?3setstate?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN1@spamlist_s

; 40   :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 22		 jmp	 SHORT $LN2@spamlist_s
$LN1@spamlist_s:

; 41   :     self->state = state;

  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00031	8b 4c 24 20	 mov	 ecx, DWORD PTR state$[rsp]
  00035	89 88 80 00 00
	00		 mov	 DWORD PTR [rax+128], ecx

; 42   :     Py_INCREF(Py_None);

  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00042	e8 00 00 00 00	 call	 _Py_IncRef

; 43   :     return Py_None;

  00047	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@spamlist_s:

; 44   : }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
spamlist_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\xxsubtype.c
pdata	SEGMENT
$pdata$spamlist_specialmeth DD imagerel spamlist_specialmeth
	DD	imagerel spamlist_specialmeth+167
	DD	imagerel $unwind$spamlist_specialmeth
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamlist_specialmeth DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT spamlist_specialmeth
_TEXT	SEGMENT
result$ = 32
self$ = 64
args$ = 72
kw$ = 80
spamlist_specialmeth PROC				; COMDAT

; 48   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 49   :     PyObject *result = PyTuple_New(3);

  00013	b9 03 00 00 00	 mov	 ecx, 3
  00018	e8 00 00 00 00	 call	 PyTuple_New
  0001d	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 50   : 
; 51   :     if (result != NULL) {

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR result$[rsp], 0
  00028	74 73		 je	 SHORT $LN3@spamlist_s@2

; 52   :         if (self == NULL)

  0002a	48 83 7c 24 40
	00		 cmp	 QWORD PTR self$[rsp], 0
  00030	75 0c		 jne	 SHORT $LN2@spamlist_s@2

; 53   :             self = Py_None;

  00032	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00039	48 89 44 24 40	 mov	 QWORD PTR self$[rsp], rax
$LN2@spamlist_s@2:

; 54   :         if (kw == NULL)

  0003e	48 83 7c 24 50
	00		 cmp	 QWORD PTR kw$[rsp], 0
  00044	75 0c		 jne	 SHORT $LN1@spamlist_s@2

; 55   :             kw = Py_None;

  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004d	48 89 44 24 50	 mov	 QWORD PTR kw$[rsp], rax
$LN1@spamlist_s@2:

; 56   :         Py_INCREF(self);

  00052	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00057	e8 00 00 00 00	 call	 _Py_IncRef

; 57   :         PyTuple_SET_ITEM(result, 0, self);

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00066	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 58   :         Py_INCREF(args);

  0006a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0006f	e8 00 00 00 00	 call	 _Py_IncRef

; 59   :         PyTuple_SET_ITEM(result, 1, args);

  00074	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00079	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0007e	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 60   :         Py_INCREF(kw);

  00082	48 8b 4c 24 50	 mov	 rcx, QWORD PTR kw$[rsp]
  00087	e8 00 00 00 00	 call	 _Py_IncRef

; 61   :         PyTuple_SET_ITEM(result, 2, kw);

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00091	48 8b 4c 24 50	 mov	 rcx, QWORD PTR kw$[rsp]
  00096	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN3@spamlist_s@2:

; 62   :     }
; 63   :     return result;

  0009d	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]

; 64   : }

  000a2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a6	c3		 ret	 0
spamlist_specialmeth ENDP
_TEXT	ENDS
EXTRN	PyList_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$spamlist_init DD imagerel spamlist_init
	DD	imagerel spamlist_init+73
	DD	imagerel $unwind$spamlist_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamlist_init DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT spamlist_init
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
spamlist_init PROC					; COMDAT

; 84   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 85   :     if (PyList_Type.tp_init((PyObject *)self, args, kwds) < 0)

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR kwds$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00022	ff 15 80 01 00
	00		 call	 QWORD PTR PyList_Type+384
  00028	85 c0		 test	 eax, eax
  0002a	7d 07		 jge	 SHORT $LN1@spamlist_i

; 86   :         return -1;

  0002c	b8 ff ff ff ff	 mov	 eax, -1
  00031	eb 11		 jmp	 SHORT $LN2@spamlist_i
$LN1@spamlist_i:

; 87   :     self->state = 0;

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00038	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+128], 0

; 88   :     return 0;

  00042	33 c0		 xor	 eax, eax
$LN2@spamlist_i:

; 89   : }

  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	c3		 ret	 0
spamlist_init ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$spamlist_state_get DD imagerel spamlist_state_get
	DD	imagerel spamlist_state_get+30
	DD	imagerel $unwind$spamlist_state_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamlist_state_get DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT spamlist_state_get
_TEXT	SEGMENT
self$ = 48
spamlist_state_get PROC					; COMDAT

; 93   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 94   :     return PyLong_FromLong(self->state);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [rax+128]
  00014	e8 00 00 00 00	 call	 PyLong_FromLong

; 95   : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
spamlist_state_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$spamdict_getstate DD imagerel spamdict_getstate
	DD	imagerel spamdict_getstate+60
	DD	imagerel $unwind$spamdict_getstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamdict_getstate DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT spamdict_getstate
_TEXT	SEGMENT
self$ = 48
args$ = 56
spamdict_getstate PROC					; COMDAT

; 153  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 154  :     if (!PyArg_ParseTuple(args, ":getstate"))

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09JCIGMFJK@?3getstate?$AA@
  00015	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  0001a	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001f	85 c0		 test	 eax, eax
  00021	75 04		 jne	 SHORT $LN1@spamdict_g

; 155  :         return NULL;

  00023	33 c0		 xor	 eax, eax
  00025	eb 10		 jmp	 SHORT $LN2@spamdict_g
$LN1@spamdict_g:

; 156  :     return PyLong_FromLong(self->state);

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0002c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [rax+128]
  00032	e8 00 00 00 00	 call	 PyLong_FromLong
$LN2@spamdict_g:

; 157  : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
spamdict_getstate ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$spamdict_setstate DD imagerel spamdict_setstate
	DD	imagerel spamdict_setstate+83
	DD	imagerel $unwind$spamdict_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamdict_setstate DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT spamdict_setstate
_TEXT	SEGMENT
state$ = 32
self$ = 64
args$ = 72
spamdict_setstate PROC					; COMDAT

; 161  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 162  :     int state;
; 163  : 
; 164  :     if (!PyArg_ParseTuple(args, "i:setstate", &state))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR state$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@MADOKHMA@i?3setstate?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN1@spamdict_s

; 165  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 22		 jmp	 SHORT $LN2@spamdict_s
$LN1@spamdict_s:

; 166  :     self->state = state;

  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00031	8b 4c 24 20	 mov	 ecx, DWORD PTR state$[rsp]
  00035	89 88 80 00 00
	00		 mov	 DWORD PTR [rax+128], ecx

; 167  :     Py_INCREF(Py_None);

  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00042	e8 00 00 00 00	 call	 _Py_IncRef

; 168  :     return Py_None;

  00047	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@spamdict_s:

; 169  : }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
spamdict_setstate ENDP
_TEXT	ENDS
EXTRN	PyDict_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$spamdict_init DD imagerel spamdict_init
	DD	imagerel spamdict_init+73
	DD	imagerel $unwind$spamdict_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spamdict_init DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT spamdict_init
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
spamdict_init PROC					; COMDAT

; 181  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 182  :     if (PyDict_Type.tp_init((PyObject *)self, args, kwds) < 0)

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR kwds$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00022	ff 15 80 01 00
	00		 call	 QWORD PTR PyDict_Type+384
  00028	85 c0		 test	 eax, eax
  0002a	7d 07		 jge	 SHORT $LN1@spamdict_i

; 183  :         return -1;

  0002c	b8 ff ff ff ff	 mov	 eax, -1
  00031	eb 11		 jmp	 SHORT $LN2@spamdict_i
$LN1@spamdict_i:

; 184  :     self->state = 0;

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00038	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+128], 0

; 185  :     return 0;

  00042	33 c0		 xor	 eax, eax
$LN2@spamdict_i:

; 186  : }

  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	c3		 ret	 0
spamdict_init ENDP
_TEXT	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	_Py_DecRef
PUBLIC	??_C@_04NDBCCGOM@OS?$HMi?$AA@			; `string'
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyObject_GetAttr:PROC
EXTRN	__imp_clock:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$spam_bench DD imagerel spam_bench
	DD	imagerel spam_bench+197
	DD	imagerel $unwind$spam_bench
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$spam_bench DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT ??_C@_04NDBCCGOM@OS?$HMi?$AA@
CONST	SEGMENT
??_C@_04NDBCCGOM@OS?$HMi?$AA@ DB 'OS|i', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT spam_bench
_TEXT	SEGMENT
res$ = 48
n$ = 56
name$ = 64
t1$ = 72
obj$ = 80
t0$ = 88
self$ = 112
args$ = 120
spam_bench PROC						; COMDAT

; 237  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 238  :     PyObject *obj, *name, *res;
; 239  :     int n = 1000;

  0000e	c7 44 24 38 e8
	03 00 00	 mov	 DWORD PTR n$[rsp], 1000	; 000003e8H

; 240  :     time_t t0, t1;
; 241  : 
; 242  :     if (!PyArg_ParseTuple(args, "OS|i", &obj, &name, &n))

  00016	48 8d 44 24 38	 lea	 rax, QWORD PTR n$[rsp]
  0001b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00020	4c 8d 4c 24 40	 lea	 r9, QWORD PTR name$[rsp]
  00025	4c 8d 44 24 50	 lea	 r8, QWORD PTR obj$[rsp]
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NDBCCGOM@OS?$HMi?$AA@
  00031	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00036	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN4@spam_bench

; 243  :         return NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	eb 7d		 jmp	 SHORT $LN5@spam_bench
$LN4@spam_bench:

; 244  :     t0 = clock();

  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clock
  00049	48 98		 cdqe
  0004b	48 89 44 24 58	 mov	 QWORD PTR t0$[rsp], rax
$LN3@spam_bench:

; 245  :     while (--n >= 0) {

  00050	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  00054	ff c8		 dec	 eax
  00056	89 44 24 38	 mov	 DWORD PTR n$[rsp], eax
  0005a	83 7c 24 38 00	 cmp	 DWORD PTR n$[rsp], 0
  0005f	7c 2c		 jl	 SHORT $LN2@spam_bench

; 246  :         res = PyObject_GetAttr(obj, name);

  00061	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  00066	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  0006b	e8 00 00 00 00	 call	 PyObject_GetAttr
  00070	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 247  :         if (res == NULL)

  00075	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0007b	75 04		 jne	 SHORT $LN1@spam_bench

; 248  :             return NULL;

  0007d	33 c0		 xor	 eax, eax
  0007f	eb 3f		 jmp	 SHORT $LN5@spam_bench
$LN1@spam_bench:

; 249  :         Py_DECREF(res);

  00081	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00086	e8 00 00 00 00	 call	 _Py_DecRef

; 250  :     }

  0008b	eb c3		 jmp	 SHORT $LN3@spam_bench
$LN2@spam_bench:

; 251  :     t1 = clock();

  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clock
  00093	48 98		 cdqe
  00095	48 89 44 24 48	 mov	 QWORD PTR t1$[rsp], rax

; 252  :     return PyFloat_FromDouble((double)(t1-t0) / CLOCKS_PER_SEC);

  0009a	48 8b 44 24 58	 mov	 rax, QWORD PTR t0$[rsp]
  0009f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR t1$[rsp]
  000a4	48 2b c8	 sub	 rcx, rax
  000a7	48 8b c1	 mov	 rax, rcx
  000aa	66 0f ef c0	 pxor	 xmm0, xmm0
  000ae	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  000b3	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  000bb	e8 00 00 00 00	 call	 PyFloat_FromDouble
$LN5@spam_bench:

; 253  : }

  000c0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000c4	c3		 ret	 0
spam_bench ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_08MOHNHOIL@spamdict?$AA@			; `string'
PUBLIC	??_C@_08OCCLJGDK@spamlist?$AA@			; `string'
PUBLIC	PyInit_xxsubtype
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\xxsubtype.c
pdata	SEGMENT
$pdata$PyInit_xxsubtype DD imagerel $LN10
	DD	imagerel $LN10+253
	DD	imagerel $unwind$PyInit_xxsubtype
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_xxsubtype DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_08MOHNHOIL@spamdict?$AA@
CONST	SEGMENT
??_C@_08MOHNHOIL@spamdict?$AA@ DB 'spamdict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCCLJGDK@spamlist?$AA@
CONST	SEGMENT
??_C@_08OCCLJGDK@spamlist?$AA@ DB 'spamlist', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit_xxsubtype
_TEXT	SEGMENT
m$ = 32
PyInit_xxsubtype PROC					; COMDAT

; 275  : {

$LN10:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 276  :     PyObject *m;
; 277  : 
; 278  :     /* Fill in deferred data addresses.  This must be done before
; 279  :        PyType_Ready() is called.  Note that PyType_Ready() automatically
; 280  :        initializes the ob.ob_type field to &PyType_Type if it's NULL,
; 281  :        so it's not necessary to fill in ob_type first. */
; 282  :     spamdict_type.tp_base = &PyDict_Type;

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  0000b	48 89 05 58 01
	00 00		 mov	 QWORD PTR spamdict_type+344, rax

; 283  :     if (PyType_Ready(&spamdict_type) < 0)

  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:spamdict_type
  00019	e8 00 00 00 00	 call	 PyType_Ready
  0001e	85 c0		 test	 eax, eax
  00020	7d 07		 jge	 SHORT $LN7@PyInit_xxs

; 284  :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 cf 00 00 00	 jmp	 $LN8@PyInit_xxs
$LN7@PyInit_xxs:

; 285  : 
; 286  :     spamlist_type.tp_base = &PyList_Type;

  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyList_Type
  00030	48 89 05 58 01
	00 00		 mov	 QWORD PTR spamlist_type+344, rax

; 287  :     if (PyType_Ready(&spamlist_type) < 0)

  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:spamlist_type
  0003e	e8 00 00 00 00	 call	 PyType_Ready
  00043	85 c0		 test	 eax, eax
  00045	7d 07		 jge	 SHORT $LN6@PyInit_xxs

; 288  :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	e9 aa 00 00 00	 jmp	 $LN8@PyInit_xxs
$LN6@PyInit_xxs:

; 289  : 
; 290  :     m = PyModule_Create(&xxsubtypemodule);

  0004e	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:xxsubtypemodule
  0005a	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  0005f	48 89 44 24 20	 mov	 QWORD PTR m$[rsp], rax

; 291  :     if (m == NULL)

  00064	48 83 7c 24 20
	00		 cmp	 QWORD PTR m$[rsp], 0
  0006a	75 07		 jne	 SHORT $LN5@PyInit_xxs

; 292  :         return NULL;

  0006c	33 c0		 xor	 eax, eax
  0006e	e9 85 00 00 00	 jmp	 $LN8@PyInit_xxs
$LN5@PyInit_xxs:

; 293  : 
; 294  :     if (PyType_Ready(&spamlist_type) < 0)

  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:spamlist_type
  0007a	e8 00 00 00 00	 call	 PyType_Ready
  0007f	85 c0		 test	 eax, eax
  00081	7d 04		 jge	 SHORT $LN4@PyInit_xxs

; 295  :         return NULL;

  00083	33 c0		 xor	 eax, eax
  00085	eb 71		 jmp	 SHORT $LN8@PyInit_xxs
$LN4@PyInit_xxs:

; 296  :     if (PyType_Ready(&spamdict_type) < 0)

  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:spamdict_type
  0008e	e8 00 00 00 00	 call	 PyType_Ready
  00093	85 c0		 test	 eax, eax
  00095	7d 04		 jge	 SHORT $LN3@PyInit_xxs

; 297  :         return NULL;

  00097	33 c0		 xor	 eax, eax
  00099	eb 5d		 jmp	 SHORT $LN8@PyInit_xxs
$LN3@PyInit_xxs:

; 298  : 
; 299  :     Py_INCREF(&spamlist_type);

  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:spamlist_type
  000a2	e8 00 00 00 00	 call	 _Py_IncRef

; 300  :     if (PyModule_AddObject(m, "spamlist",
; 301  :                            (PyObject *) &spamlist_type) < 0)

  000a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:spamlist_type
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCCLJGDK@spamlist?$AA@
  000b5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000ba	e8 00 00 00 00	 call	 PyModule_AddObject
  000bf	85 c0		 test	 eax, eax
  000c1	7d 04		 jge	 SHORT $LN2@PyInit_xxs

; 302  :         return NULL;

  000c3	33 c0		 xor	 eax, eax
  000c5	eb 31		 jmp	 SHORT $LN8@PyInit_xxs
$LN2@PyInit_xxs:

; 303  : 
; 304  :     Py_INCREF(&spamdict_type);

  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:spamdict_type
  000ce	e8 00 00 00 00	 call	 _Py_IncRef

; 305  :     if (PyModule_AddObject(m, "spamdict",
; 306  :                            (PyObject *) &spamdict_type) < 0)

  000d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:spamdict_type
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08MOHNHOIL@spamdict?$AA@
  000e1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000e6	e8 00 00 00 00	 call	 PyModule_AddObject
  000eb	85 c0		 test	 eax, eax
  000ed	7d 04		 jge	 SHORT $LN1@PyInit_xxs

; 307  :         return NULL;

  000ef	33 c0		 xor	 eax, eax
  000f1	eb 05		 jmp	 SHORT $LN8@PyInit_xxs
$LN1@PyInit_xxs:

; 308  :     return m;

  000f3	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
$LN8@PyInit_xxs:

; 309  : }

  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
PyInit_xxsubtype ENDP
_TEXT	ENDS
END
