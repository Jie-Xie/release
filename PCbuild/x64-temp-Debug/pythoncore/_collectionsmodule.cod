; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@DAMHJIHH@_collections?$AA@		; `string'
PUBLIC	??_C@_0BA@JNDEBPOJ@_count_elements?$AA@		; `string'
PUBLIC	??_C@_0M@EONDAJAB@__setitem__?$AA@		; `string'
PUBLIC	??_C@_03HNAFFKGA@get?$AA@			; `string'
PUBLIC	??_C@_0BI@LNOCHOC@collections?4defaultdict?$AA@	; `string'
PUBLIC	??_C@_0DD@GLEDBJHK@Factory?5for?5default?5value?5called@ ; `string'
PUBLIC	??_C@_0BA@OPCDFMJK@default_factory?$AA@		; `string'
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
PUBLIC	??_C@_0M@PPMOEBOH@__missing__?$AA@		; `string'
PUBLIC	??_C@_05CFHBDDLG@items?$AA@			; `string'
PUBLIC	??_C@_0CF@OBJEPFGD@_collections?4_deque_reverse_iter@ ; `string'
PUBLIC	??_C@_0BN@EFKBDOAN@_collections?4_deque_iterator?$AA@ ; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_0BC@FMGACAFJ@collections?4deque?$AA@	; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_06CEHMNFAL@rotate?$AA@			; `string'
PUBLIC	??_C@_07KOIEOCCE@reverse?$AA@			; `string'
PUBLIC	??_C@_0N@FDLIKANA@__reversed__?$AA@		; `string'
PUBLIC	??_C@_06LEMKAMD@remove?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_07BHGCBGNG@popleft?$AA@			; `string'
PUBLIC	??_C@_03NJDAHFJE@pop?$AA@			; `string'
PUBLIC	??_C@_0L@HKPOGBOK@extendleft?$AA@		; `string'
PUBLIC	??_C@_06BPBOMFNI@extend?$AA@			; `string'
PUBLIC	??_C@_05IOMEMJEC@count?$AA@			; `string'
PUBLIC	??_C@_08MOMBEIKE@__copy__?$AA@			; `string'
PUBLIC	??_C@_05MEHLAELG@clear?$AA@			; `string'
PUBLIC	??_C@_0L@IEBMADJA@appendleft?$AA@		; `string'
PUBLIC	??_C@_06PCICMFGG@append?$AA@			; `string'
PUBLIC	??_C@_0CN@PPKFDFDA@maximum?5size?5of?5a?5deque?5or?5None?5@ ; `string'
PUBLIC	??_C@_06EGGKHNAM@maxlen?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyObject_HashNotImplemented:PROC
_BSS	SEGMENT
numfreeblocks DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0N@DAMHJIHH@_collections?$AA@
CONST	SEGMENT
??_C@_0N@DAMHJIHH@_collections?$AA@ DB '_collections', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JNDEBPOJ@_count_elements?$AA@
CONST	SEGMENT
??_C@_0BA@JNDEBPOJ@_count_elements?$AA@ DB '_count_elements', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EONDAJAB@__setitem__?$AA@
CONST	SEGMENT
??_C@_0M@EONDAJAB@__setitem__?$AA@ DB '__setitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HNAFFKGA@get?$AA@
CONST	SEGMENT
??_C@_03HNAFFKGA@get?$AA@ DB 'get', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LNOCHOC@collections?4defaultdict?$AA@
CONST	SEGMENT
??_C@_0BI@LNOCHOC@collections?4defaultdict?$AA@ DB 'collections.defaultdi'
	DB	'ct', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GLEDBJHK@Factory?5for?5default?5value?5called@
CONST	SEGMENT
??_C@_0DD@GLEDBJHK@Factory?5for?5default?5value?5called@ DB 'Factory for '
	DB	'default value called by __missing__().', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OPCDFMJK@default_factory?$AA@
CONST	SEGMENT
??_C@_0BA@OPCDFMJK@default_factory?$AA@ DB 'default_factory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PPMOEBOH@__missing__?$AA@
CONST	SEGMENT
??_C@_0M@PPMOEBOH@__missing__?$AA@ DB '__missing__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFHBDDLG@items?$AA@
CONST	SEGMENT
??_C@_05CFHBDDLG@items?$AA@ DB 'items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OBJEPFGD@_collections?4_deque_reverse_iter@
CONST	SEGMENT
??_C@_0CF@OBJEPFGD@_collections?4_deque_reverse_iter@ DB '_collections._d'
	DB	'eque_reverse_iterator', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EFKBDOAN@_collections?4_deque_iterator?$AA@
CONST	SEGMENT
??_C@_0BN@EFKBDOAN@_collections?4_deque_iterator?$AA@ DB '_collections._d'
	DB	'eque_iterator', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FMGACAFJ@collections?4deque?$AA@
CONST	SEGMENT
??_C@_0BC@FMGACAFJ@collections?4deque?$AA@ DB 'collections.deque', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEHMNFAL@rotate?$AA@
CONST	SEGMENT
??_C@_06CEHMNFAL@rotate?$AA@ DB 'rotate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOIEOCCE@reverse?$AA@
CONST	SEGMENT
??_C@_07KOIEOCCE@reverse?$AA@ DB 'reverse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FDLIKANA@__reversed__?$AA@
CONST	SEGMENT
??_C@_0N@FDLIKANA@__reversed__?$AA@ DB '__reversed__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEMKAMD@remove?$AA@
CONST	SEGMENT
??_C@_06LEMKAMD@remove?$AA@ DB 'remove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BHGCBGNG@popleft?$AA@
CONST	SEGMENT
??_C@_07BHGCBGNG@popleft?$AA@ DB 'popleft', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJDAHFJE@pop?$AA@
CONST	SEGMENT
??_C@_03NJDAHFJE@pop?$AA@ DB 'pop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HKPOGBOK@extendleft?$AA@
CONST	SEGMENT
??_C@_0L@HKPOGBOK@extendleft?$AA@ DB 'extendleft', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPBOMFNI@extend?$AA@
CONST	SEGMENT
??_C@_06BPBOMFNI@extend?$AA@ DB 'extend', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count?$AA@
CONST	SEGMENT
??_C@_05IOMEMJEC@count?$AA@ DB 'count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MOMBEIKE@__copy__?$AA@
CONST	SEGMENT
??_C@_08MOMBEIKE@__copy__?$AA@ DB '__copy__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHLAELG@clear?$AA@
CONST	SEGMENT
??_C@_05MEHLAELG@clear?$AA@ DB 'clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IEBMADJA@appendleft?$AA@
CONST	SEGMENT
??_C@_0L@IEBMADJA@appendleft?$AA@ DB 'appendleft', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCICMFGG@append?$AA@
CONST	SEGMENT
??_C@_06PCICMFGG@append?$AA@ DB 'append', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@PPKFDFDA@maximum?5size?5of?5a?5deque?5or?5None?5@
CONST	SEGMENT
??_C@_0CN@PPKFDFDA@maximum?5size?5of?5a?5deque?5or?5None?5@ DB 'maximum s'
	DB	'ize of a deque or None if unbounded', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGGKHNAM@maxlen?$AA@
CONST	SEGMENT
??_C@_06EGGKHNAM@maxlen?$AA@ DB 'maxlen', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___setitem__@?1??_count_elements@@9@9 DQ 0000000000000000H ; `_count_elements'::`2'::PyId___setitem__
	DQ	FLAT:??_C@_0M@EONDAJAB@__setitem__?$AA@
	DQ	0000000000000000H
?PyId_get@?1??_count_elements@@9@9 DQ 0000000000000000H	; `_count_elements'::`2'::PyId_get
	DQ	FLAT:??_C@_03HNAFFKGA@get?$AA@
	DQ	0000000000000000H
?PyId_items@?1??defdict_reduce@@9@9 DQ 0000000000000000H ; `defdict_reduce'::`2'::PyId_items
	DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	0000000000000000H
?PyId___dict__@?1??deque_reduce@@9@9 DQ 0000000000000000H ; `deque_reduce'::`2'::PyId___dict__
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
pop_doc	DB	'Remove and return the rightmost element.', 00H
	ORG $+7
popleft_doc DB	'Remove and return the leftmost element.', 00H
append_doc DB	'Add an element to the right side of the deque.', 00H
	ORG $+1
appendleft_doc DB 'Add an element to the left side of the deque.', 00H
	ORG $+10
extend_doc DB	'Extend the right side of the deque with elements from th'
	DB	'e iterable', 00H
	ORG $+13
extendleft_doc DB 'Extend the left side of the deque with elements from t'
	DB	'he iterable', 00H
	ORG $+14
rotate_doc DB	'Rotate the deque n steps to the right (default n=1).  If'
	DB	' n is negative, rotates left.', 00H
	ORG $+2
reverse_doc DB	'D.reverse() -- reverse *IN PLACE*', 00H
	ORG $+6
count_doc DB	'D.count(value) -> integer -- return number of occurrence'
	DB	's of value', 00H
	ORG $+5
remove_doc DB	'D.remove(value) -- remove first occurrence of value.', 00H
	ORG $+3
clear_doc DB	'Remove all elements from the deque.', 00H
	ORG $+4
copy_doc DB	'Return a shallow copy of a deque.', 00H
	ORG $+6
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
sizeof_doc DB	'D.__sizeof__() -- size of D in memory, in bytes', 00H
	ORG $+8
deque_getset DQ	FLAT:??_C@_06EGGKHNAM@maxlen?$AA@
	DQ	FLAT:deque_get_maxlen
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0CN@PPKFDFDA@maximum?5size?5of?5a?5deque?5or?5None?5@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
deque_as_sequence DQ FLAT:deque_len
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:deque_item
	DQ	0000000000000000H
	DQ	FLAT:deque_ass_item
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:deque_inplace_concat
	DQ	0000000000000000H
reversed_doc DB	'D.__reversed__() -- return a reverse iterator over the d'
	DB	'eque', 00H
	ORG $+3
deque_methods DQ FLAT:??_C@_06PCICMFGG@append?$AA@
	DQ	FLAT:deque_append
	DD	08H
	ORG $+4
	DQ	FLAT:append_doc
	DQ	FLAT:??_C@_0L@IEBMADJA@appendleft?$AA@
	DQ	FLAT:deque_appendleft
	DD	08H
	ORG $+4
	DQ	FLAT:appendleft_doc
	DQ	FLAT:??_C@_05MEHLAELG@clear?$AA@
	DQ	FLAT:deque_clearmethod
	DD	04H
	ORG $+4
	DQ	FLAT:clear_doc
	DQ	FLAT:??_C@_08MOMBEIKE@__copy__?$AA@
	DQ	FLAT:deque_copy
	DD	04H
	ORG $+4
	DQ	FLAT:copy_doc
	DQ	FLAT:??_C@_05IOMEMJEC@count?$AA@
	DQ	FLAT:deque_count
	DD	08H
	ORG $+4
	DQ	FLAT:count_doc
	DQ	FLAT:??_C@_06BPBOMFNI@extend?$AA@
	DQ	FLAT:deque_extend
	DD	08H
	ORG $+4
	DQ	FLAT:extend_doc
	DQ	FLAT:??_C@_0L@HKPOGBOK@extendleft?$AA@
	DQ	FLAT:deque_extendleft
	DD	08H
	ORG $+4
	DQ	FLAT:extendleft_doc
	DQ	FLAT:??_C@_03NJDAHFJE@pop?$AA@
	DQ	FLAT:deque_pop
	DD	04H
	ORG $+4
	DQ	FLAT:pop_doc
	DQ	FLAT:??_C@_07BHGCBGNG@popleft?$AA@
	DQ	FLAT:deque_popleft
	DD	04H
	ORG $+4
	DQ	FLAT:popleft_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:deque_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_06LEMKAMD@remove?$AA@
	DQ	FLAT:deque_remove
	DD	08H
	ORG $+4
	DQ	FLAT:remove_doc
	DQ	FLAT:??_C@_0N@FDLIKANA@__reversed__?$AA@
	DQ	FLAT:deque_reviter
	DD	04H
	ORG $+4
	DQ	FLAT:reversed_doc
	DQ	FLAT:??_C@_07KOIEOCCE@reverse?$AA@
	DQ	FLAT:deque_reverse
	DD	04H
	ORG $+4
	DQ	FLAT:reverse_doc
	DQ	FLAT:??_C@_06CEHMNFAL@rotate?$AA@
	DQ	FLAT:deque_rotate
	DD	01H
	ORG $+4
	DQ	FLAT:rotate_doc
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:deque_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:sizeof_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
deque_doc DB	'deque([iterable[, maxlen]]) --> deque object', 0aH, 0aH, 'B'
	DB	'uild an ordered collection with optimized access from its end'
	DB	'points.', 00H
	ORG $+12
deque_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@FMGACAFJ@collections?4deque?$AA@
	DQ	00000000000000a0H
	DQ	0000000000000000H
	DQ	FLAT:deque_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:deque_repr
	DQ	0000000000000000H
	DQ	FLAT:deque_as_sequence
	DQ	0000000000000000H
	DQ	FLAT:PyObject_HashNotImplemented
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:deque_doc
	DQ	FLAT:deque_traverse
	DQ	FLAT:deque_clear
	DQ	FLAT:deque_richcompare
	DQ	0000000000000098H
	DQ	FLAT:deque_iter
	DQ	0000000000000000H
	DQ	FLAT:deque_methods
	DQ	0000000000000000H
	DQ	FLAT:deque_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:deque_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:deque_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+9
dequeiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:dequeiter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:dequeiter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
dequeiter_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BN@EFKBDOAN@_collections?4_deque_iterator?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:dequeiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dequeiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:dequeiter_next
	DQ	FLAT:dequeiter_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dequeiter_new
	DQ	0000000000000000H
	ORG $+64
dequereviter_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0CF@OBJEPFGD@_collections?4_deque_reverse_iter@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:dequeiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dequeiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:dequereviter_next
	DQ	FLAT:dequeiter_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dequereviter_new
	DQ	0000000000000000H
	ORG $+64
defdict_missing_doc DB '__missing__(key) # Called by __getitem__ for miss'
	DB	'ing key; pseudo-code:', 0aH, '  if self.default_factory is No'
	DB	'ne: raise KeyError((key,))', 0aH, '  self[key] = value = self'
	DB	'.default_factory()', 0aH, '  return value', 0aH, 00H
	ORG $+2
defdict_copy_doc DB 'D.copy() -> a shallow copy of D.', 00H
	ORG $+15
defdict_methods DQ FLAT:??_C@_0M@PPMOEBOH@__missing__?$AA@
	DQ	FLAT:defdict_missing
	DD	08H
	ORG $+4
	DQ	FLAT:defdict_missing_doc
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:defdict_copy
	DD	04H
	ORG $+4
	DQ	FLAT:defdict_copy_doc
	DQ	FLAT:??_C@_08MOMBEIKE@__copy__?$AA@
	DQ	FLAT:defdict_copy
	DD	04H
	ORG $+4
	DQ	FLAT:defdict_copy_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:defdict_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	ORG $+24
defdict_members DQ FLAT:??_C@_0BA@OPCDFMJK@default_factory?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	00H
	ORG $+4
	DQ	FLAT:??_C@_0DD@GLEDBJHK@Factory?5for?5default?5value?5called@
	DQ	0000000000000000H
	ORG $+32
defdict_doc DB	'defaultdict(default_factory[, ...]) --> dict with defaul'
	DB	't factory', 0aH, 0aH, 'The default factory is called without '
	DB	'arguments to produce', 0aH, 'a new value when a key is not pr'
	DB	'esent, in __getitem__ only.', 0aH, 'A defaultdict compares eq'
	DB	'ual to a dict with the same items.', 0aH, 'All remaining argu'
	DB	'ments are treated the same as if they were', 0aH, 'passed to '
	DB	'the dict constructor, including keyword arguments.', 0aH, 00H
	ORG $+15
defdict_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BI@LNOCHOC@collections?4defaultdict?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:defdict_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:defdict_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:defdict_doc
	DQ	FLAT:defdict_traverse
	DQ	FLAT:defdict_tp_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:defdict_methods
	DQ	FLAT:defdict_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:defdict_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_count_elements_doc DB '_count_elements(mapping, iterable) -> None', 0aH, 0aH
	DB	'Count elements in the iterable, updating the mappping', 00H
	ORG $+14
module_doc DB	'High performance data structures.', 0aH, '- deque:      '
	DB	'  ordered collection accessible from endpoints only', 0aH, '-'
	DB	' defaultdict:  dict subclass with a default value factory', 0aH
	DB	00H
module_functions DQ FLAT:??_C@_0BA@JNDEBPOJ@_count_elements?$AA@
	DQ	FLAT:_count_elements
	DD	01H
	ORG $+4
	DQ	FLAT:_count_elements_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_collectionsmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@DAMHJIHH@_collections?$AA@
	DQ	FLAT:module_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:module_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	_Py_DecRef
;	COMDAT pdata
; File c:\src\pyparallel\modules\_collectionsmodule.c
pdata	SEGMENT
$pdata$deque_new DD imagerel deque_new
	DD	imagerel deque_new+223
	DD	imagerel $unwind$deque_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_new DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT deque_new
_TEXT	SEGMENT
b$ = 32
deque$ = 40
type$ = 64
args$ = 72
kwds$ = 80
deque_new PROC						; COMDAT

; 131  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 132  :     dequeobject *deque;
; 133  :     block *b;
; 134  : 
; 135  :     /* create dequeobject structure */
; 136  :     deque = (dequeobject *)type->tp_alloc(type, 0);

  00013	33 d2		 xor	 edx, edx
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0001f	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00025	48 89 44 24 28	 mov	 QWORD PTR deque$[rsp], rax

; 137  :     if (deque == NULL)

  0002a	48 83 7c 24 28
	00		 cmp	 QWORD PTR deque$[rsp], 0
  00030	75 07		 jne	 SHORT $LN2@deque_new

; 138  :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	e9 a1 00 00 00	 jmp	 $LN3@deque_new
$LN2@deque_new:

; 139  : 
; 140  :     b = newblock(NULL, NULL, 0);

  00039	45 33 c0	 xor	 r8d, r8d
  0003c	33 d2		 xor	 edx, edx
  0003e	33 c9		 xor	 ecx, ecx
  00040	e8 00 00 00 00	 call	 newblock
  00045	48 89 44 24 20	 mov	 QWORD PTR b$[rsp], rax

; 141  :     if (b == NULL) {

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR b$[rsp], 0
  00050	75 0e		 jne	 SHORT $LN1@deque_new

; 142  :         Py_DECREF(deque);

  00052	48 8b 4c 24 28	 mov	 rcx, QWORD PTR deque$[rsp]
  00057	e8 00 00 00 00	 call	 _Py_DecRef

; 143  :         return NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	eb 7a		 jmp	 SHORT $LN3@deque_new
$LN1@deque_new:

; 144  :     }
; 145  : 
; 146  :     assert(BLOCKLEN >= 2);
; 147  :     deque->leftblock = b;

  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR deque$[rsp]
  00065	48 8b 4c 24 20	 mov	 rcx, QWORD PTR b$[rsp]
  0006a	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 148  :     deque->rightblock = b;

  0006e	48 8b 44 24 28	 mov	 rax, QWORD PTR deque$[rsp]
  00073	48 8b 4c 24 20	 mov	 rcx, QWORD PTR b$[rsp]
  00078	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 149  :     deque->leftindex = CENTER + 1;

  0007c	48 8b 44 24 28	 mov	 rax, QWORD PTR deque$[rsp]
  00081	48 c7 40 70 1f
	00 00 00	 mov	 QWORD PTR [rax+112], 31

; 150  :     deque->rightindex = CENTER;

  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR deque$[rsp]
  0008e	48 c7 40 78 1e
	00 00 00	 mov	 QWORD PTR [rax+120], 30

; 151  :     deque->len = 0;

  00096	48 8b 44 24 28	 mov	 rax, QWORD PTR deque$[rsp]
  0009b	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 152  :     deque->state = 0;

  000a6	48 8b 44 24 28	 mov	 rax, QWORD PTR deque$[rsp]
  000ab	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+144], 0

; 153  :     deque->weakreflist = NULL;

  000b5	48 8b 44 24 28	 mov	 rax, QWORD PTR deque$[rsp]
  000ba	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0

; 154  :     deque->maxlen = -1;

  000c5	48 8b 44 24 28	 mov	 rax, QWORD PTR deque$[rsp]
  000ca	48 c7 80 88 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+136], -1

; 155  : 
; 156  :     return (PyObject *)deque;

  000d5	48 8b 44 24 28	 mov	 rax, QWORD PTR deque$[rsp]
$LN3@deque_new:

; 157  : }

  000da	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000de	c3		 ret	 0
deque_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@NAMPNEJD@cannot?5add?5more?5blocks?5to?5the?5de@ ; `string'
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_OverflowError:QWORD
_BSS	SEGMENT
freeblocks DQ	0aH DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\_collectionsmodule.c
pdata	SEGMENT
$pdata$newblock DD imagerel newblock
	DD	imagerel newblock+180
	DD	imagerel $unwind$newblock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newblock DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CE@NAMPNEJD@cannot?5add?5more?5blocks?5to?5the?5de@
CONST	SEGMENT
??_C@_0CE@NAMPNEJD@cannot?5add?5more?5blocks?5to?5the?5de@ DB 'cannot add'
	DB	' more blocks to the deque', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT newblock
_TEXT	SEGMENT
b$ = 32
leftlink$ = 64
rightlink$ = 72
len$ = 80
newblock PROC						; COMDAT

; 59   : newblock(block *leftlink, block *rightlink, Py_ssize_t len) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 60   :     block *b;
; 61   :     /* To prevent len from overflowing PY_SSIZE_T_MAX on 64-bit machines, we
; 62   :      * refuse to allocate new blocks if the current len is dangerously
; 63   :      * close.  There is some extra margin to prevent spurious arithmetic
; 64   :      * overflows at various places.  The following check ensures that
; 65   :      * the blocks allocated to the deque, in the worst case, can only
; 66   :      * have PY_SSIZE_T_MAX-2 entries in total.
; 67   :      */
; 68   :     if (len >= PY_SSIZE_T_MAX - 2*BLOCKLEN) {

  00013	48 b8 83 ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775683 ; 7fffffffffffff83H
  0001d	48 39 44 24 50	 cmp	 QWORD PTR len$[rsp], rax
  00022	7c 17		 jl	 SHORT $LN4@newblock

; 69   :         PyErr_SetString(PyExc_OverflowError,
; 70   :                         "cannot add more blocks to the deque");

  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@NAMPNEJD@cannot?5add?5more?5blocks?5to?5the?5de@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00032	e8 00 00 00 00	 call	 PyErr_SetString

; 71   :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	eb 74		 jmp	 SHORT $LN5@newblock
$LN4@newblock:

; 72   :     }
; 73   :     if (numfreeblocks) {

  0003b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR numfreeblocks, 0
  00043	74 2a		 je	 SHORT $LN3@newblock

; 74   :         numfreeblocks -= 1;

  00045	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR numfreeblocks
  0004c	48 ff c8	 dec	 rax
  0004f	48 89 05 00 00
	00 00		 mov	 QWORD PTR numfreeblocks, rax

; 75   :         b = freeblocks[numfreeblocks];

  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:freeblocks
  0005d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR numfreeblocks
  00064	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00068	48 89 44 24 20	 mov	 QWORD PTR b$[rsp], rax

; 76   :     } else {

  0006d	eb 20		 jmp	 SHORT $LN2@newblock
$LN3@newblock:

; 77   :         b = PyMem_Malloc(sizeof(block));

  0006f	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00074	e8 00 00 00 00	 call	 PyMem_Malloc
  00079	48 89 44 24 20	 mov	 QWORD PTR b$[rsp], rax

; 78   :         if (b == NULL) {

  0007e	48 83 7c 24 20
	00		 cmp	 QWORD PTR b$[rsp], 0
  00084	75 09		 jne	 SHORT $LN1@newblock

; 79   :             PyErr_NoMemory();

  00086	e8 00 00 00 00	 call	 PyErr_NoMemory

; 80   :             return NULL;

  0008b	33 c0		 xor	 eax, eax
  0008d	eb 20		 jmp	 SHORT $LN5@newblock
$LN1@newblock:
$LN2@newblock:

; 81   :         }
; 82   :     }
; 83   :     b->leftlink = leftlink;

  0008f	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
  00094	48 8b 4c 24 40	 mov	 rcx, QWORD PTR leftlink$[rsp]
  00099	48 89 08	 mov	 QWORD PTR [rax], rcx

; 84   :     b->rightlink = rightlink;

  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR rightlink$[rsp]
  000a6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 85   :     return b;

  000aa	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
$LN5@newblock:

; 86   : }

  000af	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b3	c3		 ret	 0
newblock ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@KKNOLHOB@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@ ; `string'
PUBLIC	??_C@_1FA@GMOBHFGG@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@ ; `string'
PUBLIC	??_C@_1EM@FJAGPDED@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@ ; `string'
PUBLIC	??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BI@GOHPFLAB@pop?5from?5an?5empty?5deque?$AA@ ; `string'
EXTRN	__imp__wassert:PROC
EXTRN	PyExc_IndexError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_pop DD imagerel deque_pop
	DD	imagerel deque_pop+442
	DD	imagerel $unwind$deque_pop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_pop DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1EM@KKNOLHOB@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
CONST	SEGMENT
??_C@_1EM@KKNOLHOB@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@ DB 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'b', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@GMOBHFGG@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
CONST	SEGMENT
??_C@_1FA@GMOBHFGG@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@ DB 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'x', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '+', 00H, '1', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@FJAGPDED@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
CONST	SEGMENT
??_C@_1EM@FJAGPDED@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@ DB 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'b', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, '_', 00H, 'c', 00H, 'o'
	DB	00H, 'l', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, 's', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'u'
	DB	00H, 'l', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GOHPFLAB@pop?5from?5an?5empty?5deque?$AA@
CONST	SEGMENT
??_C@_0BI@GOHPFLAB@pop?5from?5an?5empty?5deque?$AA@ DB 'pop from an empty'
	DB	' deque', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_pop
_TEXT	SEGMENT
prevblock$ = 32
item$ = 40
deque$ = 64
unused$ = 72
deque_pop PROC						; COMDAT

; 161  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 162  :     PyObject *item;
; 163  :     block *prevblock;
; 164  : 
; 165  :     if (deque->len == 0) {

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00013	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0001b	75 1a		 jne	 SHORT $LN4@deque_pop

; 166  :         PyErr_SetString(PyExc_IndexError, "pop from an empty deque");

  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GOHPFLAB@pop?5from?5an?5empty?5deque?$AA@
  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0002b	e8 00 00 00 00	 call	 PyErr_SetString

; 167  :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	e9 7e 01 00 00	 jmp	 $LN5@deque_pop
$LN4@deque_pop:

; 168  :     }
; 169  :     item = deque->rightblock->data[deque->rightindex];

  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0003c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00045	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00049	48 8b 44 c8 10	 mov	 rax, QWORD PTR [rax+rcx*8+16]
  0004e	48 89 44 24 28	 mov	 QWORD PTR item$[rsp], rax

; 170  :     deque->rightindex--;

  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00058	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0005c	48 ff c8	 dec	 rax
  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00064	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 171  :     deque->len--;

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0006d	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00074	48 ff c8	 dec	 rax
  00077	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  0007c	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 172  :     deque->state++;

  00083	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00088	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0008e	ff c0		 inc	 eax
  00090	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00095	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax

; 173  : 
; 174  :     if (deque->rightindex == -1) {

  0009b	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000a0	48 83 78 78 ff	 cmp	 QWORD PTR [rax+120], -1
  000a5	0f 85 05 01 00
	00		 jne	 $LN3@deque_pop

; 175  :         if (deque->len == 0) {

  000ab	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000b0	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000b8	75 7f		 jne	 SHORT $LN2@deque_pop

; 176  :             assert(deque->leftblock == deque->rightblock);

  000ba	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000c4	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  000c8	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  000cc	74 1c		 je	 SHORT $LN7@deque_pop
  000ce	41 b8 b0 00 00
	00		 mov	 r8d, 176		; 000000b0H
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FJAGPDED@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e8	33 c0		 xor	 eax, eax
$LN7@deque_pop:

; 177  :             assert(deque->leftindex == deque->rightindex+1);

  000ea	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000ef	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  000f3	48 ff c0	 inc	 rax
  000f6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000fb	48 39 41 70	 cmp	 QWORD PTR [rcx+112], rax
  000ff	74 1c		 je	 SHORT $LN8@deque_pop
  00101	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0010e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FA@GMOBHFGG@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011b	33 c0		 xor	 eax, eax
$LN8@deque_pop:

; 178  :             /* re-center instead of freeing a block */
; 179  :             deque->leftindex = CENTER + 1;

  0011d	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00122	48 c7 40 70 1f
	00 00 00	 mov	 QWORD PTR [rax+112], 31

; 180  :             deque->rightindex = CENTER;

  0012a	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0012f	48 c7 40 78 1e
	00 00 00	 mov	 QWORD PTR [rax+120], 30

; 181  :         } else {

  00137	eb 77		 jmp	 SHORT $LN1@deque_pop
$LN2@deque_pop:

; 182  :             prevblock = deque->rightblock->leftlink;

  00139	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0013e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00142	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00145	48 89 44 24 20	 mov	 QWORD PTR prevblock$[rsp], rax

; 183  :             assert(deque->leftblock != deque->rightblock);

  0014a	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0014f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00154	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00158	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  0015c	75 1c		 jne	 SHORT $LN9@deque_pop
  0015e	41 b8 b7 00 00
	00		 mov	 r8d, 183		; 000000b7H
  00164	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0016b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@KKNOLHOB@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
  00172	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00178	33 c0		 xor	 eax, eax
$LN9@deque_pop:

; 184  :             freeblock(deque->rightblock);

  0017a	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0017f	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00183	e8 00 00 00 00	 call	 freeblock

; 185  :             prevblock->rightlink = NULL;

  00188	48 8b 44 24 20	 mov	 rax, QWORD PTR prevblock$[rsp]
  0018d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 186  :             deque->rightblock = prevblock;

  00195	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0019a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR prevblock$[rsp]
  0019f	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 187  :             deque->rightindex = BLOCKLEN - 1;

  001a3	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  001a8	48 c7 40 78 3d
	00 00 00	 mov	 QWORD PTR [rax+120], 61	; 0000003dH
$LN1@deque_pop:
$LN3@deque_pop:

; 188  :         }
; 189  :     }
; 190  :     return item;

  001b0	48 8b 44 24 28	 mov	 rax, QWORD PTR item$[rsp]
$LN5@deque_pop:

; 191  : }

  001b5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001b9	c3		 ret	 0
deque_pop ENDP
_TEXT	ENDS
EXTRN	PyMem_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$freeblock DD imagerel freeblock
	DD	imagerel freeblock+76
	DD	imagerel $unwind$freeblock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$freeblock DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT freeblock
_TEXT	SEGMENT
b$ = 48
freeblock PROC						; COMDAT

; 90   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 91   :     if (numfreeblocks < MAXFREEBLOCKS) {

  00009	48 83 3d 00 00
	00 00 0a	 cmp	 QWORD PTR numfreeblocks, 10
  00011	7d 2a		 jge	 SHORT $LN2@freeblock

; 92   :         freeblocks[numfreeblocks] = b;

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:freeblocks
  0001a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR numfreeblocks
  00021	48 8b 54 24 30	 mov	 rdx, QWORD PTR b$[rsp]
  00026	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 93   :         numfreeblocks++;

  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR numfreeblocks
  00031	48 ff c0	 inc	 rax
  00034	48 89 05 00 00
	00 00		 mov	 QWORD PTR numfreeblocks, rax

; 94   :     } else {

  0003b	eb 0a		 jmp	 SHORT $LN1@freeblock
$LN2@freeblock:

; 95   :         PyMem_Free(b);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  00042	e8 00 00 00 00	 call	 PyMem_Free
$LN1@freeblock:

; 96   :     }
; 97   : }

  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	c3		 ret	 0
freeblock ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CE@MFBCFHBE@?$AAp?$AAr?$AAe?$AAv?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@BGPALMIE@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_popleft DD imagerel deque_popleft
	DD	imagerel deque_popleft+525
	DD	imagerel $unwind$deque_popleft
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_popleft DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1CE@MFBCFHBE@?$AAp?$AAr?$AAe?$AAv?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@MFBCFHBE@?$AAp?$AAr?$AAe?$AAv?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'p'
	DB	00H, 'r', 00H, 'e', 00H, 'v', 00H, 'b', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@BGPALMIE@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@BGPALMIE@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'b', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_popleft
_TEXT	SEGMENT
prevblock$ = 32
item$ = 40
deque$ = 64
unused$ = 72
deque_popleft PROC					; COMDAT

; 197  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 198  :     PyObject *item;
; 199  :     block *prevblock;
; 200  : 
; 201  :     if (deque->len == 0) {

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00013	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0001b	75 1a		 jne	 SHORT $LN4@deque_popl

; 202  :         PyErr_SetString(PyExc_IndexError, "pop from an empty deque");

  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GOHPFLAB@pop?5from?5an?5empty?5deque?$AA@
  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0002b	e8 00 00 00 00	 call	 PyErr_SetString

; 203  :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	e9 d1 01 00 00	 jmp	 $LN5@deque_popl
$LN4@deque_popl:

; 204  :     }
; 205  :     assert(deque->leftblock != NULL);

  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0003c	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00041	75 1c		 jne	 SHORT $LN7@deque_popl
  00043	41 b8 cd 00 00
	00		 mov	 r8d, 205		; 000000cdH
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BGPALMIE@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005d	33 c0		 xor	 eax, eax
$LN7@deque_popl:

; 206  :     item = deque->leftblock->data[deque->leftindex];

  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00064	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00068	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  0006d	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00071	48 8b 44 c8 10	 mov	 rax, QWORD PTR [rax+rcx*8+16]
  00076	48 89 44 24 28	 mov	 QWORD PTR item$[rsp], rax

; 207  :     deque->leftindex++;

  0007b	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00080	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00084	48 ff c0	 inc	 rax
  00087	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  0008c	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 208  :     deque->len--;

  00090	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00095	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000a4	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 209  :     deque->state++;

  000ab	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000b0	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000b6	ff c0		 inc	 eax
  000b8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000bd	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax

; 210  : 
; 211  :     if (deque->leftindex == BLOCKLEN) {

  000c3	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000c8	48 83 78 70 3e	 cmp	 QWORD PTR [rax+112], 62	; 0000003eH
  000cd	0f 85 30 01 00
	00		 jne	 $LN3@deque_popl

; 212  :         if (deque->len == 0) {

  000d3	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000d8	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000e0	0f 85 82 00 00
	00		 jne	 $LN2@deque_popl

; 213  :             assert(deque->leftblock == deque->rightblock);

  000e6	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000eb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000f0	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  000f4	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  000f8	74 1c		 je	 SHORT $LN8@deque_popl
  000fa	41 b8 d5 00 00
	00		 mov	 r8d, 213		; 000000d5H
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FJAGPDED@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00114	33 c0		 xor	 eax, eax
$LN8@deque_popl:

; 214  :             assert(deque->leftindex == deque->rightindex+1);

  00116	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0011b	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0011f	48 ff c0	 inc	 rax
  00122	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00127	48 39 41 70	 cmp	 QWORD PTR [rcx+112], rax
  0012b	74 1c		 je	 SHORT $LN9@deque_popl
  0012d	41 b8 d6 00 00
	00		 mov	 r8d, 214		; 000000d6H
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FA@GMOBHFGG@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00147	33 c0		 xor	 eax, eax
$LN9@deque_popl:

; 215  :             /* re-center instead of freeing a block */
; 216  :             deque->leftindex = CENTER + 1;

  00149	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0014e	48 c7 40 70 1f
	00 00 00	 mov	 QWORD PTR [rax+112], 31

; 217  :             deque->rightindex = CENTER;

  00156	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0015b	48 c7 40 78 1e
	00 00 00	 mov	 QWORD PTR [rax+120], 30

; 218  :         } else {

  00163	e9 9b 00 00 00	 jmp	 $LN1@deque_popl
$LN2@deque_popl:

; 219  :             assert(deque->leftblock != deque->rightblock);

  00168	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0016d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00172	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00176	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  0017a	75 1c		 jne	 SHORT $LN10@deque_popl
  0017c	41 b8 db 00 00
	00		 mov	 r8d, 219		; 000000dbH
  00182	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@KKNOLHOB@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
  00190	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00196	33 c0		 xor	 eax, eax
$LN10@deque_popl:

; 220  :             prevblock = deque->leftblock->rightlink;

  00198	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0019d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001a1	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001a5	48 89 44 24 20	 mov	 QWORD PTR prevblock$[rsp], rax

; 221  :             freeblock(deque->leftblock);

  001aa	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  001af	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  001b3	e8 00 00 00 00	 call	 freeblock

; 222  :             assert(prevblock != NULL);

  001b8	48 83 7c 24 20
	00		 cmp	 QWORD PTR prevblock$[rsp], 0
  001be	75 1c		 jne	 SHORT $LN11@deque_popl
  001c0	41 b8 de 00 00
	00		 mov	 r8d, 222		; 000000deH
  001c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@MFBCFHBE@?$AAp?$AAr?$AAe?$AAv?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  001d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001da	33 c0		 xor	 eax, eax
$LN11@deque_popl:

; 223  :             prevblock->leftlink = NULL;

  001dc	48 8b 44 24 20	 mov	 rax, QWORD PTR prevblock$[rsp]
  001e1	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 224  :             deque->leftblock = prevblock;

  001e8	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  001ed	48 8b 4c 24 20	 mov	 rcx, QWORD PTR prevblock$[rsp]
  001f2	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 225  :             deque->leftindex = 0;

  001f6	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  001fb	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
$LN1@deque_popl:
$LN3@deque_popl:

; 226  :         }
; 227  :     }
; 228  :     return item;

  00203	48 8b 44 24 28	 mov	 rax, QWORD PTR item$[rsp]
$LN5@deque_popl:

; 229  : }

  00208	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0020c	c3		 ret	 0
deque_popleft ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FE@IGGICAEP@?$AAr?$AAv?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu@ ; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_1EK@DHDENINJ@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ ; `string'
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_append DD imagerel deque_append
	DD	imagerel deque_append+431
	DD	imagerel $unwind$deque_append
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_append DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1FE@IGGICAEP@?$AAr?$AAv?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu@
CONST	SEGMENT
??_C@_1FE@IGGICAEP@?$AAr?$AAv?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu@ DB 'r'
	DB	00H, 'v', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, 'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'x', 00H, 'l', 00H, 'e'
	DB	00H, 'n', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@DHDENINJ@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1EK@DHDENINJ@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ DB 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'b', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>', 00H, 'r', 00H
	DB	'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n'
	DB	00H, 'k', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_append
_TEXT	SEGMENT
b$20452 = 32
rv$20462 = 40
deque$ = 64
item$ = 72
deque_append PROC					; COMDAT

; 235  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 236  :     deque->state++;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00013	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00019	ff c0		 inc	 eax
  0001b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00020	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax

; 237  :     if (deque->rightindex == BLOCKLEN-1) {

  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0002b	48 83 78 78 3d	 cmp	 QWORD PTR [rax+120], 61	; 0000003dH
  00030	0f 85 89 00 00
	00		 jne	 $LN3@deque_appe

; 238  :         block *b = newblock(deque->rightblock, NULL, deque->len);

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0003b	4c 8b 80 80 00
	00 00		 mov	 r8, QWORD PTR [rax+128]
  00042	33 d2		 xor	 edx, edx
  00044	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00049	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0004d	e8 00 00 00 00	 call	 newblock
  00052	48 89 44 24 20	 mov	 QWORD PTR b$20452[rsp], rax

; 239  :         if (b == NULL)

  00057	48 83 7c 24 20
	00		 cmp	 QWORD PTR b$20452[rsp], 0
  0005d	75 07		 jne	 SHORT $LN2@deque_appe

; 240  :             return NULL;

  0005f	33 c0		 xor	 eax, eax
  00061	e9 44 01 00 00	 jmp	 $LN4@deque_appe
$LN2@deque_appe:

; 241  :         assert(deque->rightblock->rightlink == NULL);

  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0006b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0006f	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00074	74 1c		 je	 SHORT $LN6@deque_appe
  00076	41 b8 f1 00 00
	00		 mov	 r8d, 241		; 000000f1H
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@DHDENINJ@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00090	33 c0		 xor	 eax, eax
$LN6@deque_appe:

; 242  :         deque->rightblock->rightlink = b;

  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00097	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR b$20452[rsp]
  000a0	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 243  :         deque->rightblock = b;

  000a4	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000a9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR b$20452[rsp]
  000ae	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 244  :         deque->rightindex = -1;

  000b2	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000b7	48 c7 40 78 ff
	ff ff ff	 mov	 QWORD PTR [rax+120], -1
$LN3@deque_appe:

; 245  :     }
; 246  :     Py_INCREF(item);

  000bf	48 8b 4c 24 48	 mov	 rcx, QWORD PTR item$[rsp]
  000c4	e8 00 00 00 00	 call	 _Py_IncRef

; 247  :     deque->len++;

  000c9	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000ce	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000d5	48 ff c0	 inc	 rax
  000d8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000dd	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 248  :     deque->rightindex++;

  000e4	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000e9	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  000ed	48 ff c0	 inc	 rax
  000f0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000f5	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 249  :     deque->rightblock->data[deque->rightindex] = item;

  000f9	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000fe	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00102	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00107	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  0010b	48 8b 54 24 48	 mov	 rdx, QWORD PTR item$[rsp]
  00110	48 89 54 c8 10	 mov	 QWORD PTR [rax+rcx*8+16], rdx

; 250  :     TRIM(deque, deque_popleft);

  00115	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0011a	48 83 b8 88 00
	00 00 ff	 cmp	 QWORD PTR [rax+136], -1
  00122	74 73		 je	 SHORT $LN1@deque_appe
  00124	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00129	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  0012e	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00135	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  0013c	7e 59		 jle	 SHORT $LN1@deque_appe
  0013e	33 d2		 xor	 edx, edx
  00140	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00145	e8 00 00 00 00	 call	 deque_popleft
  0014a	48 89 44 24 28	 mov	 QWORD PTR rv$20462[rsp], rax
  0014f	48 83 7c 24 28
	00		 cmp	 QWORD PTR rv$20462[rsp], 0
  00155	74 1a		 je	 SHORT $LN7@deque_appe
  00157	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0015c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00161	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00168	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  0016f	7e 1c		 jle	 SHORT $LN8@deque_appe
$LN7@deque_appe:
  00171	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@IGGICAEP@?$AAr?$AAv?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu@
  00185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018b	33 c0		 xor	 eax, eax
$LN8@deque_appe:
  0018d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR rv$20462[rsp]
  00192	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@deque_appe:

; 251  :     Py_RETURN_NONE;

  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0019e	e8 00 00 00 00	 call	 _Py_IncRef
  001a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@deque_appe:

; 252  : }

  001aa	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001ae	c3		 ret	 0
deque_append ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EG@FMAGOKN@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\modules\_collectionsmodule.c
pdata	SEGMENT
$pdata$deque_appendleft DD imagerel deque_appendleft
	DD	imagerel deque_appendleft+429
	DD	imagerel $unwind$deque_appendleft
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_appendleft DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1EG@FMAGOKN@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU@
CONST	SEGMENT
??_C@_1EG@FMAGOKN@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU@ DB 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'b', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H
	DB	'f', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'k', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_appendleft
_TEXT	SEGMENT
b$20477 = 32
rv$20487 = 40
deque$ = 64
item$ = 72
deque_appendleft PROC					; COMDAT

; 258  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 259  :     deque->state++;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00013	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00019	ff c0		 inc	 eax
  0001b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00020	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax

; 260  :     if (deque->leftindex == 0) {

  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0002b	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00030	0f 85 87 00 00
	00		 jne	 $LN3@deque_appe@2

; 261  :         block *b = newblock(NULL, deque->leftblock, deque->len);

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0003b	4c 8b 80 80 00
	00 00		 mov	 r8, QWORD PTR [rax+128]
  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00047	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0004b	33 c9		 xor	 ecx, ecx
  0004d	e8 00 00 00 00	 call	 newblock
  00052	48 89 44 24 20	 mov	 QWORD PTR b$20477[rsp], rax

; 262  :         if (b == NULL)

  00057	48 83 7c 24 20
	00		 cmp	 QWORD PTR b$20477[rsp], 0
  0005d	75 07		 jne	 SHORT $LN2@deque_appe@2

; 263  :             return NULL;

  0005f	33 c0		 xor	 eax, eax
  00061	e9 42 01 00 00	 jmp	 $LN4@deque_appe@2
$LN2@deque_appe@2:

; 264  :         assert(deque->leftblock->leftlink == NULL);

  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0006b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00073	74 1c		 je	 SHORT $LN6@deque_appe@2
  00075	41 b8 08 01 00
	00		 mov	 r8d, 264		; 00000108H
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@FMAGOKN@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU@
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008f	33 c0		 xor	 eax, eax
$LN6@deque_appe@2:

; 265  :         deque->leftblock->leftlink = b;

  00091	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00096	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0009a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR b$20477[rsp]
  0009f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 266  :         deque->leftblock = b;

  000a2	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000a7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR b$20477[rsp]
  000ac	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 267  :         deque->leftindex = BLOCKLEN;

  000b0	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000b5	48 c7 40 70 3e
	00 00 00	 mov	 QWORD PTR [rax+112], 62	; 0000003eH
$LN3@deque_appe@2:

; 268  :     }
; 269  :     Py_INCREF(item);

  000bd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR item$[rsp]
  000c2	e8 00 00 00 00	 call	 _Py_IncRef

; 270  :     deque->len++;

  000c7	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000cc	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000d3	48 ff c0	 inc	 rax
  000d6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000db	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 271  :     deque->leftindex--;

  000e2	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000e7	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000eb	48 ff c8	 dec	 rax
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000f3	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 272  :     deque->leftblock->data[deque->leftindex] = item;

  000f7	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  000fc	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00100	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00105	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00109	48 8b 54 24 48	 mov	 rdx, QWORD PTR item$[rsp]
  0010e	48 89 54 c8 10	 mov	 QWORD PTR [rax+rcx*8+16], rdx

; 273  :     TRIM(deque, deque_pop);

  00113	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00118	48 83 b8 88 00
	00 00 ff	 cmp	 QWORD PTR [rax+136], -1
  00120	74 73		 je	 SHORT $LN1@deque_appe@2
  00122	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00127	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  0012c	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00133	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  0013a	7e 59		 jle	 SHORT $LN1@deque_appe@2
  0013c	33 d2		 xor	 edx, edx
  0013e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00143	e8 00 00 00 00	 call	 deque_pop
  00148	48 89 44 24 28	 mov	 QWORD PTR rv$20487[rsp], rax
  0014d	48 83 7c 24 28
	00		 cmp	 QWORD PTR rv$20487[rsp], 0
  00153	74 1a		 je	 SHORT $LN7@deque_appe@2
  00155	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0015a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  0015f	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00166	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  0016d	7e 1c		 jle	 SHORT $LN8@deque_appe@2
$LN7@deque_appe@2:
  0016f	41 b8 11 01 00
	00		 mov	 r8d, 273		; 00000111H
  00175	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0017c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@IGGICAEP@?$AAr?$AAv?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu@
  00183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00189	33 c0		 xor	 eax, eax
$LN8@deque_appe@2:
  0018b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR rv$20487[rsp]
  00190	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@deque_appe@2:

; 274  :     Py_RETURN_NONE;

  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0019c	e8 00 00 00 00	 call	 _Py_IncRef
  001a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@deque_appe@2:

; 275  : }

  001a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001ac	c3		 ret	 0
deque_appendleft ENDP
_TEXT	ENDS
EXTRN	PyErr_Occurred:PROC
EXTRN	PyIter_Next:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	PySequence_List:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_extend DD imagerel deque_extend
	DD	imagerel deque_extend+639
	DD	imagerel $unwind$deque_extend
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_extend DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT deque_extend
_TEXT	SEGMENT
it$ = 32
item$ = 40
s$20519 = 48
result$20518 = 56
b$20533 = 64
rv$20543 = 72
deque$ = 96
iterable$ = 104
deque_extend PROC					; COMDAT

; 298  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 299  :     PyObject *it, *item;
; 300  : 
; 301  :     /* Handle case where id(deque) == id(iterable) */
; 302  :     if ((PyObject *)deque == iterable) {

  0000e	48 8b 44 24 68	 mov	 rax, QWORD PTR iterable$[rsp]
  00013	48 39 44 24 60	 cmp	 QWORD PTR deque$[rsp], rax
  00018	75 46		 jne	 SHORT $LN10@deque_exte

; 303  :         PyObject *result;
; 304  :         PyObject *s = PySequence_List(iterable);

  0001a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR iterable$[rsp]
  0001f	e8 00 00 00 00	 call	 PySequence_List
  00024	48 89 44 24 30	 mov	 QWORD PTR s$20519[rsp], rax

; 305  :         if (s == NULL)

  00029	48 83 7c 24 30
	00		 cmp	 QWORD PTR s$20519[rsp], 0
  0002f	75 07		 jne	 SHORT $LN9@deque_exte

; 306  :             return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	e9 42 02 00 00	 jmp	 $LN11@deque_exte
$LN9@deque_exte:

; 307  :         result = deque_extend(deque, s);

  00038	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$20519[rsp]
  0003d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  00042	e8 00 00 00 00	 call	 deque_extend
  00047	48 89 44 24 38	 mov	 QWORD PTR result$20518[rsp], rax

; 308  :         Py_DECREF(s);

  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$20519[rsp]
  00051	e8 00 00 00 00	 call	 _Py_DecRef

; 309  :         return result;

  00056	48 8b 44 24 38	 mov	 rax, QWORD PTR result$20518[rsp]
  0005b	e9 1a 02 00 00	 jmp	 $LN11@deque_exte
$LN10@deque_exte:

; 310  :     }
; 311  : 
; 312  :     it = PyObject_GetIter(iterable);

  00060	48 8b 4c 24 68	 mov	 rcx, QWORD PTR iterable$[rsp]
  00065	e8 00 00 00 00	 call	 PyObject_GetIter
  0006a	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 313  :     if (it == NULL)

  0006f	48 83 7c 24 20
	00		 cmp	 QWORD PTR it$[rsp], 0
  00075	75 07		 jne	 SHORT $LN8@deque_exte

; 314  :         return NULL;

  00077	33 c0		 xor	 eax, eax
  00079	e9 fc 01 00 00	 jmp	 $LN11@deque_exte
$LN8@deque_exte:

; 315  : 
; 316  :     if (deque->maxlen == 0)

  0007e	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00083	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0008b	75 0f		 jne	 SHORT $LN7@deque_exte

; 317  :         return consume_iterator(it);

  0008d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00092	e8 00 00 00 00	 call	 consume_iterator
  00097	e9 de 01 00 00	 jmp	 $LN11@deque_exte
$LN7@deque_exte:
$LN6@deque_exte:

; 318  : 
; 319  :     while ((item = PyIter_Next(it)) != NULL) {

  0009c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  000a1	e8 00 00 00 00	 call	 PyIter_Next
  000a6	48 89 44 24 28	 mov	 QWORD PTR item$[rsp], rax
  000ab	48 83 7c 24 28
	00		 cmp	 QWORD PTR item$[rsp], 0
  000b1	0f 84 98 01 00
	00		 je	 $LN5@deque_exte

; 320  :         deque->state++;

  000b7	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000bc	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000c2	ff c0		 inc	 eax
  000c4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  000c9	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax

; 321  :         if (deque->rightindex == BLOCKLEN-1) {

  000cf	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000d4	48 83 78 78 3d	 cmp	 QWORD PTR [rax+120], 61	; 0000003dH
  000d9	0f 85 9d 00 00
	00		 jne	 $LN4@deque_exte

; 322  :             block *b = newblock(deque->rightblock, NULL,
; 323  :                                 deque->len);

  000df	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000e4	4c 8b 80 80 00
	00 00		 mov	 r8, QWORD PTR [rax+128]
  000eb	33 d2		 xor	 edx, edx
  000ed	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000f2	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000f6	e8 00 00 00 00	 call	 newblock
  000fb	48 89 44 24 40	 mov	 QWORD PTR b$20533[rsp], rax

; 324  :             if (b == NULL) {

  00100	48 83 7c 24 40
	00		 cmp	 QWORD PTR b$20533[rsp], 0
  00106	75 1b		 jne	 SHORT $LN3@deque_exte

; 325  :                 Py_DECREF(item);

  00108	48 8b 4c 24 28	 mov	 rcx, QWORD PTR item$[rsp]
  0010d	e8 00 00 00 00	 call	 _Py_DecRef

; 326  :                 Py_DECREF(it);

  00112	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 327  :                 return NULL;

  0011c	33 c0		 xor	 eax, eax
  0011e	e9 57 01 00 00	 jmp	 $LN11@deque_exte
$LN3@deque_exte:

; 328  :             }
; 329  :             assert(deque->rightblock->rightlink == NULL);

  00123	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00128	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0012c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00131	74 1c		 je	 SHORT $LN13@deque_exte
  00133	41 b8 49 01 00
	00		 mov	 r8d, 329		; 00000149H
  00139	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@DHDENINJ@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014d	33 c0		 xor	 eax, eax
$LN13@deque_exte:

; 330  :             deque->rightblock->rightlink = b;

  0014f	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00154	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00158	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$20533[rsp]
  0015d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 331  :             deque->rightblock = b;

  00161	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00166	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$20533[rsp]
  0016b	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 332  :             deque->rightindex = -1;

  0016f	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00174	48 c7 40 78 ff
	ff ff ff	 mov	 QWORD PTR [rax+120], -1
$LN4@deque_exte:

; 333  :         }
; 334  :         deque->len++;

  0017c	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00181	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00188	48 ff c0	 inc	 rax
  0018b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  00190	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 335  :         deque->rightindex++;

  00197	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  0019c	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001a0	48 ff c0	 inc	 rax
  001a3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  001a8	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 336  :         deque->rightblock->data[deque->rightindex] = item;

  001ac	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  001b1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001b5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  001ba	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  001be	48 8b 54 24 28	 mov	 rdx, QWORD PTR item$[rsp]
  001c3	48 89 54 c8 10	 mov	 QWORD PTR [rax+rcx*8+16], rdx

; 337  :         TRIM(deque, deque_popleft);

  001c8	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  001cd	48 83 b8 88 00
	00 00 ff	 cmp	 QWORD PTR [rax+136], -1
  001d5	74 73		 je	 SHORT $LN2@deque_exte
  001d7	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  001dc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  001e1	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  001e8	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  001ef	7e 59		 jle	 SHORT $LN2@deque_exte
  001f1	33 d2		 xor	 edx, edx
  001f3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  001f8	e8 00 00 00 00	 call	 deque_popleft
  001fd	48 89 44 24 48	 mov	 QWORD PTR rv$20543[rsp], rax
  00202	48 83 7c 24 48
	00		 cmp	 QWORD PTR rv$20543[rsp], 0
  00208	74 1a		 je	 SHORT $LN14@deque_exte
  0020a	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  0020f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  00214	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  0021b	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  00222	7e 1c		 jle	 SHORT $LN15@deque_exte
$LN14@deque_exte:
  00224	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  0022a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00231	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@IGGICAEP@?$AAr?$AAv?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu@
  00238	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0023e	33 c0		 xor	 eax, eax
$LN15@deque_exte:
  00240	48 8b 4c 24 48	 mov	 rcx, QWORD PTR rv$20543[rsp]
  00245	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@deque_exte:

; 338  :     }

  0024a	e9 4d fe ff ff	 jmp	 $LN6@deque_exte
$LN5@deque_exte:

; 339  :     Py_DECREF(it);

  0024f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00254	e8 00 00 00 00	 call	 _Py_DecRef

; 340  :     if (PyErr_Occurred())

  00259	e8 00 00 00 00	 call	 PyErr_Occurred
  0025e	48 85 c0	 test	 rax, rax
  00261	74 04		 je	 SHORT $LN1@deque_exte

; 341  :         return NULL;

  00263	33 c0		 xor	 eax, eax
  00265	eb 13		 jmp	 SHORT $LN11@deque_exte
$LN1@deque_exte:

; 342  :     Py_RETURN_NONE;

  00267	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0026e	e8 00 00 00 00	 call	 _Py_IncRef
  00273	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN11@deque_exte:

; 343  : }

  0027a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0027e	c3		 ret	 0
deque_extend ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$consume_iterator DD imagerel consume_iterator
	DD	imagerel consume_iterator+92
	DD	imagerel $unwind$consume_iterator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$consume_iterator DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT consume_iterator
_TEXT	SEGMENT
item$ = 32
it$ = 64
consume_iterator PROC					; COMDAT

; 284  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN3@consume_it:

; 285  :     PyObject *item;
; 286  : 
; 287  :     while ((item = PyIter_Next(it)) != NULL) {

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  0000e	e8 00 00 00 00	 call	 PyIter_Next
  00013	48 89 44 24 20	 mov	 QWORD PTR item$[rsp], rax
  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR item$[rsp], 0
  0001e	74 0c		 je	 SHORT $LN2@consume_it

; 288  :         Py_DECREF(item);

  00020	48 8b 4c 24 20	 mov	 rcx, QWORD PTR item$[rsp]
  00025	e8 00 00 00 00	 call	 _Py_DecRef

; 289  :     }

  0002a	eb dd		 jmp	 SHORT $LN3@consume_it
$LN2@consume_it:

; 290  :     Py_DECREF(it);

  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  00031	e8 00 00 00 00	 call	 _Py_DecRef

; 291  :     if (PyErr_Occurred())

  00036	e8 00 00 00 00	 call	 PyErr_Occurred
  0003b	48 85 c0	 test	 rax, rax
  0003e	74 04		 je	 SHORT $LN1@consume_it

; 292  :         return NULL;

  00040	33 c0		 xor	 eax, eax
  00042	eb 13		 jmp	 SHORT $LN4@consume_it
$LN1@consume_it:

; 293  :     Py_RETURN_NONE;

  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0004b	e8 00 00 00 00	 call	 _Py_IncRef
  00050	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@consume_it:

; 294  : }

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
consume_iterator ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_extendleft DD imagerel deque_extendleft
	DD	imagerel deque_extendleft+637
	DD	imagerel $unwind$deque_extendleft
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_extendleft DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT deque_extendleft
_TEXT	SEGMENT
it$ = 32
item$ = 40
s$20564 = 48
result$20563 = 56
b$20578 = 64
rv$20588 = 72
deque$ = 96
iterable$ = 104
deque_extendleft PROC					; COMDAT

; 350  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 351  :     PyObject *it, *item;
; 352  : 
; 353  :     /* Handle case where id(deque) == id(iterable) */
; 354  :     if ((PyObject *)deque == iterable) {

  0000e	48 8b 44 24 68	 mov	 rax, QWORD PTR iterable$[rsp]
  00013	48 39 44 24 60	 cmp	 QWORD PTR deque$[rsp], rax
  00018	75 46		 jne	 SHORT $LN10@deque_exte@2

; 355  :         PyObject *result;
; 356  :         PyObject *s = PySequence_List(iterable);

  0001a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR iterable$[rsp]
  0001f	e8 00 00 00 00	 call	 PySequence_List
  00024	48 89 44 24 30	 mov	 QWORD PTR s$20564[rsp], rax

; 357  :         if (s == NULL)

  00029	48 83 7c 24 30
	00		 cmp	 QWORD PTR s$20564[rsp], 0
  0002f	75 07		 jne	 SHORT $LN9@deque_exte@2

; 358  :             return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	e9 40 02 00 00	 jmp	 $LN11@deque_exte@2
$LN9@deque_exte@2:

; 359  :         result = deque_extendleft(deque, s);

  00038	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$20564[rsp]
  0003d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  00042	e8 00 00 00 00	 call	 deque_extendleft
  00047	48 89 44 24 38	 mov	 QWORD PTR result$20563[rsp], rax

; 360  :         Py_DECREF(s);

  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$20564[rsp]
  00051	e8 00 00 00 00	 call	 _Py_DecRef

; 361  :         return result;

  00056	48 8b 44 24 38	 mov	 rax, QWORD PTR result$20563[rsp]
  0005b	e9 18 02 00 00	 jmp	 $LN11@deque_exte@2
$LN10@deque_exte@2:

; 362  :     }
; 363  : 
; 364  :     it = PyObject_GetIter(iterable);

  00060	48 8b 4c 24 68	 mov	 rcx, QWORD PTR iterable$[rsp]
  00065	e8 00 00 00 00	 call	 PyObject_GetIter
  0006a	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 365  :     if (it == NULL)

  0006f	48 83 7c 24 20
	00		 cmp	 QWORD PTR it$[rsp], 0
  00075	75 07		 jne	 SHORT $LN8@deque_exte@2

; 366  :         return NULL;

  00077	33 c0		 xor	 eax, eax
  00079	e9 fa 01 00 00	 jmp	 $LN11@deque_exte@2
$LN8@deque_exte@2:

; 367  : 
; 368  :     if (deque->maxlen == 0)

  0007e	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00083	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0008b	75 0f		 jne	 SHORT $LN7@deque_exte@2

; 369  :         return consume_iterator(it);

  0008d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00092	e8 00 00 00 00	 call	 consume_iterator
  00097	e9 dc 01 00 00	 jmp	 $LN11@deque_exte@2
$LN7@deque_exte@2:
$LN6@deque_exte@2:

; 370  : 
; 371  :     while ((item = PyIter_Next(it)) != NULL) {

  0009c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  000a1	e8 00 00 00 00	 call	 PyIter_Next
  000a6	48 89 44 24 28	 mov	 QWORD PTR item$[rsp], rax
  000ab	48 83 7c 24 28
	00		 cmp	 QWORD PTR item$[rsp], 0
  000b1	0f 84 96 01 00
	00		 je	 $LN5@deque_exte@2

; 372  :         deque->state++;

  000b7	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000bc	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000c2	ff c0		 inc	 eax
  000c4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  000c9	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax

; 373  :         if (deque->leftindex == 0) {

  000cf	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000d4	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  000d9	0f 85 9b 00 00
	00		 jne	 $LN4@deque_exte@2

; 374  :             block *b = newblock(NULL, deque->leftblock,
; 375  :                                 deque->len);

  000df	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000e4	4c 8b 80 80 00
	00 00		 mov	 r8, QWORD PTR [rax+128]
  000eb	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000f0	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000f4	33 c9		 xor	 ecx, ecx
  000f6	e8 00 00 00 00	 call	 newblock
  000fb	48 89 44 24 40	 mov	 QWORD PTR b$20578[rsp], rax

; 376  :             if (b == NULL) {

  00100	48 83 7c 24 40
	00		 cmp	 QWORD PTR b$20578[rsp], 0
  00106	75 1b		 jne	 SHORT $LN3@deque_exte@2

; 377  :                 Py_DECREF(item);

  00108	48 8b 4c 24 28	 mov	 rcx, QWORD PTR item$[rsp]
  0010d	e8 00 00 00 00	 call	 _Py_DecRef

; 378  :                 Py_DECREF(it);

  00112	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 379  :                 return NULL;

  0011c	33 c0		 xor	 eax, eax
  0011e	e9 55 01 00 00	 jmp	 $LN11@deque_exte@2
$LN3@deque_exte@2:

; 380  :             }
; 381  :             assert(deque->leftblock->leftlink == NULL);

  00123	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00128	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0012c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00130	74 1c		 je	 SHORT $LN13@deque_exte@2
  00132	41 b8 7d 01 00
	00		 mov	 r8d, 381		; 0000017dH
  00138	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0013f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@FMAGOKN@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU@
  00146	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014c	33 c0		 xor	 eax, eax
$LN13@deque_exte@2:

; 382  :             deque->leftblock->leftlink = b;

  0014e	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00153	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00157	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$20578[rsp]
  0015c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 383  :             deque->leftblock = b;

  0015f	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00164	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$20578[rsp]
  00169	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 384  :             deque->leftindex = BLOCKLEN;

  0016d	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00172	48 c7 40 70 3e
	00 00 00	 mov	 QWORD PTR [rax+112], 62	; 0000003eH
$LN4@deque_exte@2:

; 385  :         }
; 386  :         deque->len++;

  0017a	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  0017f	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00186	48 ff c0	 inc	 rax
  00189	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  0018e	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 387  :         deque->leftindex--;

  00195	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  0019a	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0019e	48 ff c8	 dec	 rax
  001a1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  001a6	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 388  :         deque->leftblock->data[deque->leftindex] = item;

  001aa	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  001af	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001b3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  001b8	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  001bc	48 8b 54 24 28	 mov	 rdx, QWORD PTR item$[rsp]
  001c1	48 89 54 c8 10	 mov	 QWORD PTR [rax+rcx*8+16], rdx

; 389  :         TRIM(deque, deque_pop);

  001c6	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  001cb	48 83 b8 88 00
	00 00 ff	 cmp	 QWORD PTR [rax+136], -1
  001d3	74 73		 je	 SHORT $LN2@deque_exte@2
  001d5	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  001da	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  001df	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  001e6	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  001ed	7e 59		 jle	 SHORT $LN2@deque_exte@2
  001ef	33 d2		 xor	 edx, edx
  001f1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  001f6	e8 00 00 00 00	 call	 deque_pop
  001fb	48 89 44 24 48	 mov	 QWORD PTR rv$20588[rsp], rax
  00200	48 83 7c 24 48
	00		 cmp	 QWORD PTR rv$20588[rsp], 0
  00206	74 1a		 je	 SHORT $LN14@deque_exte@2
  00208	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  0020d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  00212	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00219	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  00220	7e 1c		 jle	 SHORT $LN15@deque_exte@2
$LN14@deque_exte@2:
  00222	41 b8 85 01 00
	00		 mov	 r8d, 389		; 00000185H
  00228	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@IGGICAEP@?$AAr?$AAv?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu@
  00236	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0023c	33 c0		 xor	 eax, eax
$LN15@deque_exte@2:
  0023e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR rv$20588[rsp]
  00243	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@deque_exte@2:

; 390  :     }

  00248	e9 4f fe ff ff	 jmp	 $LN6@deque_exte@2
$LN5@deque_exte@2:

; 391  :     Py_DECREF(it);

  0024d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00252	e8 00 00 00 00	 call	 _Py_DecRef

; 392  :     if (PyErr_Occurred())

  00257	e8 00 00 00 00	 call	 PyErr_Occurred
  0025c	48 85 c0	 test	 rax, rax
  0025f	74 04		 je	 SHORT $LN1@deque_exte@2

; 393  :         return NULL;

  00261	33 c0		 xor	 eax, eax
  00263	eb 13		 jmp	 SHORT $LN11@deque_exte@2
$LN1@deque_exte@2:

; 394  :     Py_RETURN_NONE;

  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0026c	e8 00 00 00 00	 call	 _Py_IncRef
  00271	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN11@deque_exte@2:

; 395  : }

  00278	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0027c	c3		 ret	 0
deque_extendleft ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_inplace_concat DD imagerel deque_inplace_concat
	DD	imagerel deque_inplace_concat+79
	DD	imagerel $unwind$deque_inplace_concat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_inplace_concat DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT deque_inplace_concat
_TEXT	SEGMENT
result$ = 32
deque$ = 64
other$ = 72
deque_inplace_concat PROC				; COMDAT

; 402  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 403  :     PyObject *result;
; 404  : 
; 405  :     result = deque_extend(deque, other);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR other$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00018	e8 00 00 00 00	 call	 deque_extend
  0001d	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 406  :     if (result == NULL)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR result$[rsp], 0
  00028	75 07		 jne	 SHORT $LN1@deque_inpl

; 407  :         return result;

  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0002f	eb 19		 jmp	 SHORT $LN2@deque_inpl
$LN1@deque_inpl:

; 408  :     Py_DECREF(result);

  00031	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  00036	e8 00 00 00 00	 call	 _Py_DecRef

; 409  :     Py_INCREF(deque);

  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00040	e8 00 00 00 00	 call	 _Py_IncRef

; 410  :     return (PyObject *)deque;

  00045	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
$LN2@deque_inpl:

; 411  : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
deque_inplace_concat ENDP
_TEXT	ENDS
PUBLIC	??_C@_09DGEDBCJG@?$HMn?3rotate?$AA@		; `string'
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_rotate DD imagerel deque_rotate
	DD	imagerel deque_rotate+100
	DD	imagerel $unwind$deque_rotate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_rotate DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_09DGEDBCJG@?$HMn?3rotate?$AA@
CONST	SEGMENT
??_C@_09DGEDBCJG@?$HMn?3rotate?$AA@ DB '|n:rotate', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_rotate
_TEXT	SEGMENT
n$ = 32
deque$ = 64
args$ = 72
deque_rotate PROC					; COMDAT

; 506  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 507  :     Py_ssize_t n=1;

  0000e	48 c7 44 24 20
	01 00 00 00	 mov	 QWORD PTR n$[rsp], 1

; 508  : 
; 509  :     if (!PyArg_ParseTuple(args, "|n:rotate", &n))

  00017	4c 8d 44 24 20	 lea	 r8, QWORD PTR n$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09DGEDBCJG@?$HMn?3rotate?$AA@
  00023	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00028	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002d	85 c0		 test	 eax, eax
  0002f	75 04		 jne	 SHORT $LN2@deque_rota

; 510  :         return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	eb 2a		 jmp	 SHORT $LN3@deque_rota
$LN2@deque_rota:

; 511  :     if (_deque_rotate(deque, n) == 0)

  00035	48 8b 54 24 20	 mov	 rdx, QWORD PTR n$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  0003f	e8 00 00 00 00	 call	 _deque_rotate
  00044	85 c0		 test	 eax, eax
  00046	75 15		 jne	 SHORT $LN1@deque_rota

; 512  :         Py_RETURN_NONE;

  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0004f	e8 00 00 00 00	 call	 _Py_IncRef
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0005b	eb 02		 jmp	 SHORT $LN3@deque_rota
$LN1@deque_rota:

; 513  :     return NULL;

  0005d	33 c0		 xor	 eax, eax
$LN3@deque_rota:

; 514  : }

  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	c3		 ret	 0
deque_rotate ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CE@EBNGFOJG@?$AAn?$AAe?$AAx?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EC@FEAKMIAI@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAB?$AAL?$AAO?$AAC?$AAK?$AAL?$AAE?$AAN?$AA?5?$AA?9?$AA?5?$AA1@ ; `string'
PUBLIC	??_C@_1DE@DCKCJINK@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@KLGCMPE@?$AAm?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@DIJLMCGM@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@FDIMEOLG@?$AA?9?$AAh?$AAa?$AAl?$AAf?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAh?$AAa?$AAl?$AAf?$AAl?$AAe?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@NEBLGMNK@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?5?$AA1?$AA?$AA@ ; `string'
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_deque_rotate DD imagerel _deque_rotate
	DD	imagerel _deque_rotate+1874
	DD	imagerel $unwind$_deque_rotate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_deque_rotate DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_1CE@EBNGFOJG@?$AAn?$AAe?$AAx?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@EBNGFOJG@?$AAn?$AAe?$AAx?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'n'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'b', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@FEAKMIAI@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAB?$AAL?$AAO?$AAC?$AAK?$AAL?$AAE?$AAN?$AA?5?$AA?9?$AA?5?$AA1@
CONST	SEGMENT
??_C@_1EC@FEAKMIAI@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAB?$AAL?$AAO?$AAC?$AAK?$AAL?$AAE?$AAN?$AA?5?$AA?9?$AA?5?$AA1@ DB 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'i', 00H, 'n'
	DB	00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'B', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, 'L', 00H, 'E'
	DB	00H, 'N', 00H, ' ', 00H, '-', 00H, ' ', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@DCKCJINK@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@DCKCJINK@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'b', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@KLGCMPE@?$AAm?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@KLGCMPE@?$AAm?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@ DB 'm'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'm', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@DIJLMCGM@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@DIJLMCGM@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'x', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@FDIMEOLG@?$AA?9?$AAh?$AAa?$AAl?$AAf?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAh?$AAa?$AAl?$AAf?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@FDIMEOLG@?$AA?9?$AAh?$AAa?$AAl?$AAf?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAh?$AAa?$AAl?$AAf?$AAl?$AAe?$AAn?$AA?$AA@ DB '-'
	DB	00H, 'h', 00H, 'a', 00H, 'l', 00H, 'f', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'n', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'n', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'h', 00H, 'a', 00H, 'l', 00H, 'f', 00H, 'l'
	DB	00H, 'e', 00H, 'n', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@NEBLGMNK@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@NEBLGMNK@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?5?$AA1?$AA?$AA@ DB 'l'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, '>', 00H, ' ', 00H, '1', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _deque_rotate
_TEXT	SEGMENT
halflen$ = 32
len$ = 40
m$ = 48
b$20633 = 56
prevblock$20647 = 64
b$20657 = 72
nextblock$20670 = 80
tv180 = 88
tv267 = 96
deque$ = 128
n$ = 136
_deque_rotate PROC					; COMDAT

; 415  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 416  :     Py_ssize_t m, len=deque->len, halflen=len>>1;

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00016	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0001d	48 89 44 24 28	 mov	 QWORD PTR len$[rsp], rax
  00022	48 8b 44 24 28	 mov	 rax, QWORD PTR len$[rsp]
  00027	48 d1 f8	 sar	 rax, 1
  0002a	48 89 44 24 20	 mov	 QWORD PTR halflen$[rsp], rax

; 417  : 
; 418  :     if (len <= 1)

  0002f	48 83 7c 24 28
	01		 cmp	 QWORD PTR len$[rsp], 1
  00035	7f 07		 jg	 SHORT $LN20@deque_rota@2

; 419  :         return 0;

  00037	33 c0		 xor	 eax, eax
  00039	e9 0f 07 00 00	 jmp	 $LN21@deque_rota@2
$LN20@deque_rota@2:

; 420  :     if (n > halflen || n < -halflen) {

  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR halflen$[rsp]
  00043	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR n$[rsp], rax
  0004b	7f 12		 jg	 SHORT $LN18@deque_rota@2
  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR halflen$[rsp]
  00052	48 f7 d8	 neg	 rax
  00055	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR n$[rsp], rax
  0005d	7d 73		 jge	 SHORT $LN19@deque_rota@2
$LN18@deque_rota@2:

; 421  :         n %= len;

  0005f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  00067	48 99		 cdq
  00069	48 f7 7c 24 28	 idiv	 QWORD PTR len$[rsp]
  0006e	48 8b c2	 mov	 rax, rdx
  00071	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 422  :         if (n > halflen)

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR halflen$[rsp]
  0007e	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR n$[rsp], rax
  00086	7e 1d		 jle	 SHORT $LN17@deque_rota@2

; 423  :             n -= len;

  00088	48 8b 44 24 28	 mov	 rax, QWORD PTR len$[rsp]
  0008d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  00095	48 2b c8	 sub	 rcx, rax
  00098	48 8b c1	 mov	 rax, rcx
  0009b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR n$[rsp], rax
  000a3	eb 2d		 jmp	 SHORT $LN16@deque_rota@2
$LN17@deque_rota@2:

; 424  :         else if (n < -halflen)

  000a5	48 8b 44 24 20	 mov	 rax, QWORD PTR halflen$[rsp]
  000aa	48 f7 d8	 neg	 rax
  000ad	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR n$[rsp], rax
  000b5	7d 1b		 jge	 SHORT $LN15@deque_rota@2

; 425  :             n += len;

  000b7	48 8b 44 24 28	 mov	 rax, QWORD PTR len$[rsp]
  000bc	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  000c4	48 03 c8	 add	 rcx, rax
  000c7	48 8b c1	 mov	 rax, rcx
  000ca	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR n$[rsp], rax
$LN15@deque_rota@2:
$LN16@deque_rota@2:
$LN19@deque_rota@2:

; 426  :     }
; 427  :     assert(len > 1);

  000d2	48 83 7c 24 28
	01		 cmp	 QWORD PTR len$[rsp], 1
  000d8	7f 1c		 jg	 SHORT $LN23@deque_rota@2
  000da	41 b8 ab 01 00
	00		 mov	 r8d, 427		; 000001abH
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@NEBLGMNK@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?5?$AA1?$AA?$AA@
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f4	33 c0		 xor	 eax, eax
$LN23@deque_rota@2:

; 428  :     assert(-halflen <= n && n <= halflen);

  000f6	48 8b 44 24 20	 mov	 rax, QWORD PTR halflen$[rsp]
  000fb	48 f7 d8	 neg	 rax
  000fe	48 3b 84 24 88
	00 00 00	 cmp	 rax, QWORD PTR n$[rsp]
  00106	7f 0f		 jg	 SHORT $LN24@deque_rota@2
  00108	48 8b 44 24 20	 mov	 rax, QWORD PTR halflen$[rsp]
  0010d	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR n$[rsp], rax
  00115	7e 1c		 jle	 SHORT $LN25@deque_rota@2
$LN24@deque_rota@2:
  00117	41 b8 ac 01 00
	00		 mov	 r8d, 428		; 000001acH
  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@FDIMEOLG@?$AA?9?$AAh?$AAa?$AAl?$AAf?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAh?$AAa?$AAl?$AAf?$AAl?$AAe?$AAn?$AA?$AA@
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00131	33 c0		 xor	 eax, eax
$LN25@deque_rota@2:

; 429  : 
; 430  :     deque->state++;

  00133	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0013b	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00141	ff c0		 inc	 eax
  00143	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR deque$[rsp]
  0014b	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax
$LN14@deque_rota@2:

; 431  :     while (n > 0) {

  00151	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR n$[rsp], 0
  0015a	0f 8e ed 02 00
	00		 jle	 $LN13@deque_rota@2

; 432  :         if (deque->leftindex == 0) {

  00160	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00168	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0016d	0f 85 92 00 00
	00		 jne	 $LN12@deque_rota@2

; 433  :             block *b = newblock(NULL, deque->leftblock, len);

  00173	4c 8b 44 24 28	 mov	 r8, QWORD PTR len$[rsp]
  00178	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00180	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00184	33 c9		 xor	 ecx, ecx
  00186	e8 00 00 00 00	 call	 newblock
  0018b	48 89 44 24 38	 mov	 QWORD PTR b$20633[rsp], rax

; 434  :             if (b == NULL)

  00190	48 83 7c 24 38
	00		 cmp	 QWORD PTR b$20633[rsp], 0
  00196	75 0a		 jne	 SHORT $LN11@deque_rota@2

; 435  :                 return -1;

  00198	b8 ff ff ff ff	 mov	 eax, -1
  0019d	e9 ab 05 00 00	 jmp	 $LN21@deque_rota@2
$LN11@deque_rota@2:

; 436  :             assert(deque->leftblock->leftlink == NULL);

  001a2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  001aa	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001ae	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001b2	74 1c		 je	 SHORT $LN26@deque_rota@2
  001b4	41 b8 b4 01 00
	00		 mov	 r8d, 436		; 000001b4H
  001ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  001c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@FMAGOKN@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU@
  001c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ce	33 c0		 xor	 eax, eax
$LN26@deque_rota@2:

; 437  :             deque->leftblock->leftlink = b;

  001d0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  001d8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001dc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR b$20633[rsp]
  001e1	48 89 08	 mov	 QWORD PTR [rax], rcx

; 438  :             deque->leftblock = b;

  001e4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  001ec	48 8b 4c 24 38	 mov	 rcx, QWORD PTR b$20633[rsp]
  001f1	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 439  :             deque->leftindex = BLOCKLEN;

  001f5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  001fd	48 c7 40 70 3e
	00 00 00	 mov	 QWORD PTR [rax+112], 62	; 0000003eH
$LN12@deque_rota@2:

; 440  :         }
; 441  :         assert(deque->leftindex > 0);

  00205	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0020d	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00212	7f 1c		 jg	 SHORT $LN27@deque_rota@2
  00214	41 b8 b9 01 00
	00		 mov	 r8d, 441		; 000001b9H
  0021a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00221	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@DIJLMCGM@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  00228	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0022e	33 c0		 xor	 eax, eax
$LN27@deque_rota@2:

; 442  : 
; 443  :         m = n;

  00230	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  00238	48 89 44 24 30	 mov	 QWORD PTR m$[rsp], rax

; 444  :         if (m > deque->rightindex + 1)

  0023d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00245	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00249	48 ff c0	 inc	 rax
  0024c	48 39 44 24 30	 cmp	 QWORD PTR m$[rsp], rax
  00251	7e 14		 jle	 SHORT $LN10@deque_rota@2

; 445  :             m = deque->rightindex + 1;

  00253	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0025b	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0025f	48 ff c0	 inc	 rax
  00262	48 89 44 24 30	 mov	 QWORD PTR m$[rsp], rax
$LN10@deque_rota@2:

; 446  :         if (m > deque->leftindex)

  00267	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0026f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00273	48 39 44 24 30	 cmp	 QWORD PTR m$[rsp], rax
  00278	7e 11		 jle	 SHORT $LN9@deque_rota@2

; 447  :             m = deque->leftindex;

  0027a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00282	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00286	48 89 44 24 30	 mov	 QWORD PTR m$[rsp], rax
$LN9@deque_rota@2:

; 448  :         assert (m > 0 && m <= len);

  0028b	48 83 7c 24 30
	00		 cmp	 QWORD PTR m$[rsp], 0
  00291	7e 0c		 jle	 SHORT $LN28@deque_rota@2
  00293	48 8b 44 24 28	 mov	 rax, QWORD PTR len$[rsp]
  00298	48 39 44 24 30	 cmp	 QWORD PTR m$[rsp], rax
  0029d	7e 1c		 jle	 SHORT $LN29@deque_rota@2
$LN28@deque_rota@2:
  0029f	41 b8 c0 01 00
	00		 mov	 r8d, 448		; 000001c0H
  002a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@KLGCMPE@?$AAm?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@
  002b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b9	33 c0		 xor	 eax, eax
$LN29@deque_rota@2:

; 449  :         memcpy(&deque->leftblock->data[deque->leftindex - m],
; 450  :                &deque->rightblock->data[deque->rightindex + 1 - m],
; 451  :                m * sizeof(PyObject *));

  002bb	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  002c0	48 c1 e0 03	 shl	 rax, 3
  002c4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR deque$[rsp]
  002cc	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  002d0	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR deque$[rsp]
  002d8	48 8b 52 78	 mov	 rdx, QWORD PTR [rdx+120]
  002dc	48 ff c2	 inc	 rdx
  002df	48 2b 54 24 30	 sub	 rdx, QWORD PTR m$[rsp]
  002e4	48 8d 4c d1 10	 lea	 rcx, QWORD PTR [rcx+rdx*8+16]
  002e9	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR deque$[rsp]
  002f1	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  002f5	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR deque$[rsp]
  002fd	4c 8b 4c 24 30	 mov	 r9, QWORD PTR m$[rsp]
  00302	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00306	4d 2b c1	 sub	 r8, r9
  00309	4a 8d 54 c2 10	 lea	 rdx, QWORD PTR [rdx+r8*8+16]
  0030e	48 89 54 24 58	 mov	 QWORD PTR tv180[rsp], rdx
  00313	4c 8b c0	 mov	 r8, rax
  00316	48 8b d1	 mov	 rdx, rcx
  00319	48 8b 44 24 58	 mov	 rax, QWORD PTR tv180[rsp]
  0031e	48 8b c8	 mov	 rcx, rax
  00321	e8 00 00 00 00	 call	 memcpy

; 452  :         deque->rightindex -= m;

  00326	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0032e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR m$[rsp]
  00333	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00337	48 2b c1	 sub	 rax, rcx
  0033a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR deque$[rsp]
  00342	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 453  :         deque->leftindex -= m;

  00346	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0034e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR m$[rsp]
  00353	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00357	48 2b c1	 sub	 rax, rcx
  0035a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR deque$[rsp]
  00362	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 454  :         n -= m;

  00366	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  0036b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  00373	48 2b c8	 sub	 rcx, rax
  00376	48 8b c1	 mov	 rax, rcx
  00379	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 455  : 
; 456  :         if (deque->rightindex == -1) {

  00381	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00389	48 83 78 78 ff	 cmp	 QWORD PTR [rax+120], -1
  0038e	0f 85 b4 00 00
	00		 jne	 $LN8@deque_rota@2

; 457  :             block *prevblock = deque->rightblock->leftlink;

  00394	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0039c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  003a0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003a3	48 89 44 24 40	 mov	 QWORD PTR prevblock$20647[rsp], rax

; 458  :             assert(deque->rightblock != NULL);

  003a8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  003b0	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  003b5	75 1c		 jne	 SHORT $LN30@deque_rota@2
  003b7	41 b8 ca 01 00
	00		 mov	 r8d, 458		; 000001caH
  003bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  003c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@DCKCJINK@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  003cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003d1	33 c0		 xor	 eax, eax
$LN30@deque_rota@2:

; 459  :             assert(deque->leftblock != deque->rightblock);

  003d3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  003db	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR deque$[rsp]
  003e3	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  003e7	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  003eb	75 1c		 jne	 SHORT $LN31@deque_rota@2
  003ed	41 b8 cb 01 00
	00		 mov	 r8d, 459		; 000001cbH
  003f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  003fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@KKNOLHOB@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
  00401	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00407	33 c0		 xor	 eax, eax
$LN31@deque_rota@2:

; 460  :             freeblock(deque->rightblock);

  00409	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00411	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00415	e8 00 00 00 00	 call	 freeblock

; 461  :             prevblock->rightlink = NULL;

  0041a	48 8b 44 24 40	 mov	 rax, QWORD PTR prevblock$20647[rsp]
  0041f	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 462  :             deque->rightblock = prevblock;

  00427	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0042f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR prevblock$20647[rsp]
  00434	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 463  :             deque->rightindex = BLOCKLEN - 1;

  00438	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00440	48 c7 40 78 3d
	00 00 00	 mov	 QWORD PTR [rax+120], 61	; 0000003dH
$LN8@deque_rota@2:

; 464  :         }
; 465  :     }

  00448	e9 04 fd ff ff	 jmp	 $LN14@deque_rota@2
$LN13@deque_rota@2:
$LN7@deque_rota@2:

; 466  :     while (n < 0) {

  0044d	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR n$[rsp], 0
  00456	0f 8d ef 02 00
	00		 jge	 $LN6@deque_rota@2

; 467  :         if (deque->rightindex == BLOCKLEN - 1) {

  0045c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00464	48 83 78 78 3d	 cmp	 QWORD PTR [rax+120], 61	; 0000003dH
  00469	0f 85 94 00 00
	00		 jne	 $LN5@deque_rota@2

; 468  :             block *b = newblock(deque->rightblock, NULL, len);

  0046f	4c 8b 44 24 28	 mov	 r8, QWORD PTR len$[rsp]
  00474	33 d2		 xor	 edx, edx
  00476	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0047e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00482	e8 00 00 00 00	 call	 newblock
  00487	48 89 44 24 48	 mov	 QWORD PTR b$20657[rsp], rax

; 469  :             if (b == NULL)

  0048c	48 83 7c 24 48
	00		 cmp	 QWORD PTR b$20657[rsp], 0
  00492	75 0a		 jne	 SHORT $LN4@deque_rota@2

; 470  :                 return -1;

  00494	b8 ff ff ff ff	 mov	 eax, -1
  00499	e9 af 02 00 00	 jmp	 $LN21@deque_rota@2
$LN4@deque_rota@2:

; 471  :             assert(deque->rightblock->rightlink == NULL);

  0049e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  004a6	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  004aa	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  004af	74 1c		 je	 SHORT $LN32@deque_rota@2
  004b1	41 b8 d7 01 00
	00		 mov	 r8d, 471		; 000001d7H
  004b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  004be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@DHDENINJ@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
  004c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004cb	33 c0		 xor	 eax, eax
$LN32@deque_rota@2:

; 472  :             deque->rightblock->rightlink = b;

  004cd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  004d5	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  004d9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR b$20657[rsp]
  004de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 473  :             deque->rightblock = b;

  004e2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  004ea	48 8b 4c 24 48	 mov	 rcx, QWORD PTR b$20657[rsp]
  004ef	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 474  :             deque->rightindex = -1;

  004f3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  004fb	48 c7 40 78 ff
	ff ff ff	 mov	 QWORD PTR [rax+120], -1
$LN5@deque_rota@2:

; 475  :         }
; 476  :         assert (deque->rightindex < BLOCKLEN - 1);

  00503	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0050b	48 83 78 78 3d	 cmp	 QWORD PTR [rax+120], 61	; 0000003dH
  00510	7c 1c		 jl	 SHORT $LN33@deque_rota@2
  00512	41 b8 dc 01 00
	00		 mov	 r8d, 476		; 000001dcH
  00518	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0051f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@FEAKMIAI@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAB?$AAL?$AAO?$AAC?$AAK?$AAL?$AAE?$AAN?$AA?5?$AA?9?$AA?5?$AA1@
  00526	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0052c	33 c0		 xor	 eax, eax
$LN33@deque_rota@2:

; 477  : 
; 478  :         m = -n;

  0052e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  00536	48 f7 d8	 neg	 rax
  00539	48 89 44 24 30	 mov	 QWORD PTR m$[rsp], rax

; 479  :         if (m > BLOCKLEN - deque->leftindex)

  0053e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00546	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0054b	48 2b 48 70	 sub	 rcx, QWORD PTR [rax+112]
  0054f	48 8b c1	 mov	 rax, rcx
  00552	48 39 44 24 30	 cmp	 QWORD PTR m$[rsp], rax
  00557	7e 19		 jle	 SHORT $LN3@deque_rota@2

; 480  :             m = BLOCKLEN - deque->leftindex;

  00559	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00561	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00566	48 2b 48 70	 sub	 rcx, QWORD PTR [rax+112]
  0056a	48 8b c1	 mov	 rax, rcx
  0056d	48 89 44 24 30	 mov	 QWORD PTR m$[rsp], rax
$LN3@deque_rota@2:

; 481  :         if (m > BLOCKLEN - 1 - deque->rightindex)

  00572	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0057a	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  0057f	48 2b 48 78	 sub	 rcx, QWORD PTR [rax+120]
  00583	48 8b c1	 mov	 rax, rcx
  00586	48 39 44 24 30	 cmp	 QWORD PTR m$[rsp], rax
  0058b	7e 19		 jle	 SHORT $LN2@deque_rota@2

; 482  :             m = BLOCKLEN - 1 - deque->rightindex;

  0058d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00595	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  0059a	48 2b 48 78	 sub	 rcx, QWORD PTR [rax+120]
  0059e	48 8b c1	 mov	 rax, rcx
  005a1	48 89 44 24 30	 mov	 QWORD PTR m$[rsp], rax
$LN2@deque_rota@2:

; 483  :         assert (m > 0 && m <= len);

  005a6	48 83 7c 24 30
	00		 cmp	 QWORD PTR m$[rsp], 0
  005ac	7e 0c		 jle	 SHORT $LN34@deque_rota@2
  005ae	48 8b 44 24 28	 mov	 rax, QWORD PTR len$[rsp]
  005b3	48 39 44 24 30	 cmp	 QWORD PTR m$[rsp], rax
  005b8	7e 1c		 jle	 SHORT $LN35@deque_rota@2
$LN34@deque_rota@2:
  005ba	41 b8 e3 01 00
	00		 mov	 r8d, 483		; 000001e3H
  005c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  005c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@KLGCMPE@?$AAm?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@
  005ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005d4	33 c0		 xor	 eax, eax
$LN35@deque_rota@2:

; 484  :         memcpy(&deque->rightblock->data[deque->rightindex + 1],
; 485  :                &deque->leftblock->data[deque->leftindex],
; 486  :                m * sizeof(PyObject *));

  005d6	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  005db	48 c1 e0 03	 shl	 rax, 3
  005df	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR deque$[rsp]
  005e7	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  005eb	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR deque$[rsp]
  005f3	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  005f7	48 8d 4c d1 10	 lea	 rcx, QWORD PTR [rcx+rdx*8+16]
  005fc	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR deque$[rsp]
  00604	48 8b 52 68	 mov	 rdx, QWORD PTR [rdx+104]
  00608	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR deque$[rsp]
  00610	4d 8b 40 78	 mov	 r8, QWORD PTR [r8+120]
  00614	4a 8d 54 c2 18	 lea	 rdx, QWORD PTR [rdx+r8*8+24]
  00619	48 89 54 24 60	 mov	 QWORD PTR tv267[rsp], rdx
  0061e	4c 8b c0	 mov	 r8, rax
  00621	48 8b d1	 mov	 rdx, rcx
  00624	48 8b 44 24 60	 mov	 rax, QWORD PTR tv267[rsp]
  00629	48 8b c8	 mov	 rcx, rax
  0062c	e8 00 00 00 00	 call	 memcpy

; 487  :         deque->leftindex += m;

  00631	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00639	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0063d	48 03 44 24 30	 add	 rax, QWORD PTR m$[rsp]
  00642	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR deque$[rsp]
  0064a	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 488  :         deque->rightindex += m;

  0064e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  00656	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0065a	48 03 44 24 30	 add	 rax, QWORD PTR m$[rsp]
  0065f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR deque$[rsp]
  00667	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 489  :         n += m;

  0066b	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  00670	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  00678	48 03 c8	 add	 rcx, rax
  0067b	48 8b c1	 mov	 rax, rcx
  0067e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 490  : 
; 491  :         if (deque->leftindex == BLOCKLEN) {

  00686	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0068e	48 83 78 70 3e	 cmp	 QWORD PTR [rax+112], 62	; 0000003eH
  00693	0f 85 ad 00 00
	00		 jne	 $LN1@deque_rota@2

; 492  :             block *nextblock = deque->leftblock->rightlink;

  00699	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  006a1	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  006a5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  006a9	48 89 44 24 50	 mov	 QWORD PTR nextblock$20670[rsp], rax

; 493  :             assert(deque->leftblock != deque->rightblock);

  006ae	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  006b6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR deque$[rsp]
  006be	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  006c2	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  006c6	75 1c		 jne	 SHORT $LN36@deque_rota@2
  006c8	41 b8 ed 01 00
	00		 mov	 r8d, 493		; 000001edH
  006ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  006d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@KKNOLHOB@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
  006dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006e2	33 c0		 xor	 eax, eax
$LN36@deque_rota@2:

; 494  :             freeblock(deque->leftblock);

  006e4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  006ec	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  006f0	e8 00 00 00 00	 call	 freeblock

; 495  :             assert(nextblock != NULL);

  006f5	48 83 7c 24 50
	00		 cmp	 QWORD PTR nextblock$20670[rsp], 0
  006fb	75 1c		 jne	 SHORT $LN37@deque_rota@2
  006fd	41 b8 ef 01 00
	00		 mov	 r8d, 495		; 000001efH
  00703	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0070a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@EBNGFOJG@?$AAn?$AAe?$AAx?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00711	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00717	33 c0		 xor	 eax, eax
$LN37@deque_rota@2:

; 496  :             nextblock->leftlink = NULL;

  00719	48 8b 44 24 50	 mov	 rax, QWORD PTR nextblock$20670[rsp]
  0071e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 497  :             deque->leftblock = nextblock;

  00725	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0072d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR nextblock$20670[rsp]
  00732	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 498  :             deque->leftindex = 0;

  00736	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  0073e	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
$LN1@deque_rota@2:

; 499  :         }
; 500  :     }

  00746	e9 02 fd ff ff	 jmp	 $LN7@deque_rota@2
$LN6@deque_rota@2:

; 501  :     return 0;

  0074b	33 c0		 xor	 eax, eax
$LN21@deque_rota@2:

; 502  : }

  0074d	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00751	c3		 ret	 0
_deque_rotate ENDP
_TEXT	ENDS
PUBLIC	??_C@_1GE@DNGAEHCE@?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAl?$AAe?$AAf?$AAt?$AAi@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_reverse DD imagerel deque_reverse
	DD	imagerel deque_reverse+400
	DD	imagerel $unwind$deque_reverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_reverse DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_1GE@DNGAEHCE@?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAl?$AAe?$AAf?$AAt?$AAi@
CONST	SEGMENT
??_C@_1GE@DNGAEHCE@?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAl?$AAe?$AAf?$AAt?$AAi@ DB 'l'
	DB	00H, 'e', 00H, 'f', 00H, 't', 00H, 'b', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'r'
	DB	00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'b', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'r'
	DB	00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'x', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_reverse
_TEXT	SEGMENT
leftblock$ = 32
i$ = 40
n$ = 48
rightindex$ = 56
tmp$ = 64
leftindex$ = 72
rightblock$ = 80
deque$ = 112
unused$ = 120
deque_reverse PROC					; COMDAT

; 521  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 522  :     block *leftblock = deque->leftblock;

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  00013	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00017	48 89 44 24 20	 mov	 QWORD PTR leftblock$[rsp], rax

; 523  :     block *rightblock = deque->rightblock;

  0001c	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  00021	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00025	48 89 44 24 50	 mov	 QWORD PTR rightblock$[rsp], rax

; 524  :     Py_ssize_t leftindex = deque->leftindex;

  0002a	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  0002f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00033	48 89 44 24 48	 mov	 QWORD PTR leftindex$[rsp], rax

; 525  :     Py_ssize_t rightindex = deque->rightindex;

  00038	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  0003d	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00041	48 89 44 24 38	 mov	 QWORD PTR rightindex$[rsp], rax

; 526  :     Py_ssize_t n = (deque->len)/2;

  00046	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  0004b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00052	48 99		 cdq
  00054	48 2b c2	 sub	 rax, rdx
  00057	48 d1 f8	 sar	 rax, 1
  0005a	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 527  :     Py_ssize_t i;
; 528  :     PyObject *tmp;
; 529  : 
; 530  :     for (i=0 ; i<n ; i++) {

  0005f	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00068	eb 0d		 jmp	 SHORT $LN7@deque_reve
$LN6@deque_reve:
  0006a	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0006f	48 ff c0	 inc	 rax
  00072	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN7@deque_reve:
  00077	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  0007c	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00081	0f 8d f1 00 00
	00		 jge	 $LN5@deque_reve

; 531  :         /* Validate that pointers haven't met in the middle */
; 532  :         assert(leftblock != rightblock || leftindex < rightindex);

  00087	48 8b 44 24 50	 mov	 rax, QWORD PTR rightblock$[rsp]
  0008c	48 39 44 24 20	 cmp	 QWORD PTR leftblock$[rsp], rax
  00091	75 28		 jne	 SHORT $LN10@deque_reve
  00093	48 8b 44 24 38	 mov	 rax, QWORD PTR rightindex$[rsp]
  00098	48 39 44 24 48	 cmp	 QWORD PTR leftindex$[rsp], rax
  0009d	7c 1c		 jl	 SHORT $LN10@deque_reve
  0009f	41 b8 14 02 00
	00		 mov	 r8d, 532		; 00000214H
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GE@DNGAEHCE@?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAl?$AAe?$AAf?$AAt?$AAi@
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b9	33 c0		 xor	 eax, eax
$LN10@deque_reve:

; 533  : 
; 534  :         /* Swap */
; 535  :         tmp = leftblock->data[leftindex];

  000bb	48 8b 44 24 20	 mov	 rax, QWORD PTR leftblock$[rsp]
  000c0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR leftindex$[rsp]
  000c5	48 8b 44 c8 10	 mov	 rax, QWORD PTR [rax+rcx*8+16]
  000ca	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 536  :         leftblock->data[leftindex] = rightblock->data[rightindex];

  000cf	48 8b 44 24 20	 mov	 rax, QWORD PTR leftblock$[rsp]
  000d4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR leftindex$[rsp]
  000d9	48 8b 54 24 50	 mov	 rdx, QWORD PTR rightblock$[rsp]
  000de	4c 8b 44 24 38	 mov	 r8, QWORD PTR rightindex$[rsp]
  000e3	4a 8b 54 c2 10	 mov	 rdx, QWORD PTR [rdx+r8*8+16]
  000e8	48 89 54 c8 10	 mov	 QWORD PTR [rax+rcx*8+16], rdx

; 537  :         rightblock->data[rightindex] = tmp;

  000ed	48 8b 44 24 50	 mov	 rax, QWORD PTR rightblock$[rsp]
  000f2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR rightindex$[rsp]
  000f7	48 8b 54 24 40	 mov	 rdx, QWORD PTR tmp$[rsp]
  000fc	48 89 54 c8 10	 mov	 QWORD PTR [rax+rcx*8+16], rdx

; 538  : 
; 539  :         /* Advance left block/index pair */
; 540  :         leftindex++;

  00101	48 8b 44 24 48	 mov	 rax, QWORD PTR leftindex$[rsp]
  00106	48 ff c0	 inc	 rax
  00109	48 89 44 24 48	 mov	 QWORD PTR leftindex$[rsp], rax

; 541  :         if (leftindex == BLOCKLEN) {

  0010e	48 83 7c 24 48
	3e		 cmp	 QWORD PTR leftindex$[rsp], 62 ; 0000003eH
  00114	75 25		 jne	 SHORT $LN4@deque_reve

; 542  :             if (leftblock->rightlink == NULL)

  00116	48 8b 44 24 20	 mov	 rax, QWORD PTR leftblock$[rsp]
  0011b	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00120	75 02		 jne	 SHORT $LN3@deque_reve

; 543  :                 break;

  00122	eb 54		 jmp	 SHORT $LN5@deque_reve
$LN3@deque_reve:

; 544  :             leftblock = leftblock->rightlink;

  00124	48 8b 44 24 20	 mov	 rax, QWORD PTR leftblock$[rsp]
  00129	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0012d	48 89 44 24 20	 mov	 QWORD PTR leftblock$[rsp], rax

; 545  :             leftindex = 0;

  00132	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR leftindex$[rsp], 0
$LN4@deque_reve:

; 546  :         }
; 547  : 
; 548  :         /* Step backwards with the right block/index pair */
; 549  :         rightindex--;

  0013b	48 8b 44 24 38	 mov	 rax, QWORD PTR rightindex$[rsp]
  00140	48 ff c8	 dec	 rax
  00143	48 89 44 24 38	 mov	 QWORD PTR rightindex$[rsp], rax

; 550  :         if (rightindex == -1) {

  00148	48 83 7c 24 38
	ff		 cmp	 QWORD PTR rightindex$[rsp], -1
  0014e	75 23		 jne	 SHORT $LN2@deque_reve

; 551  :             if (rightblock->leftlink == NULL)

  00150	48 8b 44 24 50	 mov	 rax, QWORD PTR rightblock$[rsp]
  00155	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00159	75 02		 jne	 SHORT $LN1@deque_reve

; 552  :                 break;

  0015b	eb 1b		 jmp	 SHORT $LN5@deque_reve
$LN1@deque_reve:

; 553  :             rightblock = rightblock->leftlink;

  0015d	48 8b 44 24 50	 mov	 rax, QWORD PTR rightblock$[rsp]
  00162	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00165	48 89 44 24 50	 mov	 QWORD PTR rightblock$[rsp], rax

; 554  :             rightindex = BLOCKLEN - 1;

  0016a	48 c7 44 24 38
	3d 00 00 00	 mov	 QWORD PTR rightindex$[rsp], 61 ; 0000003dH
$LN2@deque_reve:

; 555  :         }
; 556  :     }

  00173	e9 f2 fe ff ff	 jmp	 $LN6@deque_reve
$LN5@deque_reve:

; 557  :     Py_RETURN_NONE;

  00178	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0017f	e8 00 00 00 00	 call	 _Py_IncRef
  00184	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 558  : }

  0018b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0018f	c3		 ret	 0
deque_reverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@ ; `string'
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_count DD imagerel deque_count
	DD	imagerel deque_count+319
	DD	imagerel $unwind$deque_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_count DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@
CONST	SEGMENT
??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@ DB 'deque mutat'
	DB	'ed during iteration', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_count
_TEXT	SEGMENT
count$ = 32
leftblock$ = 40
i$ = 48
n$ = 56
leftindex$ = 64
start_state$ = 72
item$ = 80
cmp$ = 88
deque$ = 112
v$ = 120
deque_count PROC					; COMDAT

; 565  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 566  :     block *leftblock = deque->leftblock;

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  00013	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00017	48 89 44 24 28	 mov	 QWORD PTR leftblock$[rsp], rax

; 567  :     Py_ssize_t leftindex = deque->leftindex;

  0001c	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  00021	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00025	48 89 44 24 40	 mov	 QWORD PTR leftindex$[rsp], rax

; 568  :     Py_ssize_t n = deque->len;

  0002a	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  0002f	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00036	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 569  :     Py_ssize_t i;
; 570  :     Py_ssize_t count = 0;

  0003b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR count$[rsp], 0

; 571  :     PyObject *item;
; 572  :     long start_state = deque->state;

  00044	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  00049	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0004f	89 44 24 48	 mov	 DWORD PTR start_state$[rsp], eax

; 573  :     int cmp;
; 574  : 
; 575  :     for (i=0 ; i<n ; i++) {

  00053	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0005c	eb 0d		 jmp	 SHORT $LN9@deque_coun
$LN8@deque_coun:
  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00063	48 ff c0	 inc	 rax
  00066	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN9@deque_coun:
  0006b	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  00070	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  00075	0f 8d b5 00 00
	00		 jge	 $LN7@deque_coun

; 576  :         item = leftblock->data[leftindex];

  0007b	48 8b 44 24 28	 mov	 rax, QWORD PTR leftblock$[rsp]
  00080	48 8b 4c 24 40	 mov	 rcx, QWORD PTR leftindex$[rsp]
  00085	48 8b 44 c8 10	 mov	 rax, QWORD PTR [rax+rcx*8+16]
  0008a	48 89 44 24 50	 mov	 QWORD PTR item$[rsp], rax

; 577  :         cmp = PyObject_RichCompareBool(item, v, Py_EQ);

  0008f	41 b8 02 00 00
	00		 mov	 r8d, 2
  00095	48 8b 54 24 78	 mov	 rdx, QWORD PTR v$[rsp]
  0009a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$[rsp]
  0009f	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000a4	89 44 24 58	 mov	 DWORD PTR cmp$[rsp], eax

; 578  :         if (cmp > 0)

  000a8	83 7c 24 58 00	 cmp	 DWORD PTR cmp$[rsp], 0
  000ad	7e 0f		 jle	 SHORT $LN6@deque_coun

; 579  :             count++;

  000af	48 8b 44 24 20	 mov	 rax, QWORD PTR count$[rsp]
  000b4	48 ff c0	 inc	 rax
  000b7	48 89 44 24 20	 mov	 QWORD PTR count$[rsp], rax
  000bc	eb 0b		 jmp	 SHORT $LN5@deque_coun
$LN6@deque_coun:

; 580  :         else if (cmp < 0)

  000be	83 7c 24 58 00	 cmp	 DWORD PTR cmp$[rsp], 0
  000c3	7d 04		 jge	 SHORT $LN4@deque_coun

; 581  :             return NULL;

  000c5	33 c0		 xor	 eax, eax
  000c7	eb 71		 jmp	 SHORT $LN10@deque_coun
$LN4@deque_coun:
$LN5@deque_coun:

; 582  : 
; 583  :         if (start_state != deque->state) {

  000c9	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  000ce	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000d4	39 44 24 48	 cmp	 DWORD PTR start_state$[rsp], eax
  000d8	74 17		 je	 SHORT $LN3@deque_coun

; 584  :             PyErr_SetString(PyExc_RuntimeError,
; 585  :                             "deque mutated during iteration");

  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@
  000e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000e8	e8 00 00 00 00	 call	 PyErr_SetString

; 586  :             return NULL;

  000ed	33 c0		 xor	 eax, eax
  000ef	eb 49		 jmp	 SHORT $LN10@deque_coun
$LN3@deque_coun:

; 587  :         }
; 588  : 
; 589  :         /* Advance left block/index pair */
; 590  :         leftindex++;

  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR leftindex$[rsp]
  000f6	48 ff c0	 inc	 rax
  000f9	48 89 44 24 40	 mov	 QWORD PTR leftindex$[rsp], rax

; 591  :         if (leftindex == BLOCKLEN) {

  000fe	48 83 7c 24 40
	3e		 cmp	 QWORD PTR leftindex$[rsp], 62 ; 0000003eH
  00104	75 25		 jne	 SHORT $LN2@deque_coun

; 592  :             if (leftblock->rightlink == NULL)  /* can occur when i==n-1 */

  00106	48 8b 44 24 28	 mov	 rax, QWORD PTR leftblock$[rsp]
  0010b	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00110	75 02		 jne	 SHORT $LN1@deque_coun

; 593  :                 break;

  00112	eb 1c		 jmp	 SHORT $LN7@deque_coun
$LN1@deque_coun:

; 594  :             leftblock = leftblock->rightlink;

  00114	48 8b 44 24 28	 mov	 rax, QWORD PTR leftblock$[rsp]
  00119	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0011d	48 89 44 24 28	 mov	 QWORD PTR leftblock$[rsp], rax

; 595  :             leftindex = 0;

  00122	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR leftindex$[rsp], 0
$LN2@deque_coun:

; 596  :         }
; 597  :     }

  0012b	e9 2e ff ff ff	 jmp	 $LN8@deque_coun
$LN7@deque_coun:

; 598  :     return PyLong_FromSsize_t(count);

  00130	48 8b 4c 24 20	 mov	 rcx, QWORD PTR count$[rsp]
  00135	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN10@deque_coun:

; 599  : }

  0013a	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0013e	c3		 ret	 0
deque_count ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT deque_len
_TEXT	SEGMENT
deque$ = 8
deque_len PROC						; COMDAT

; 606  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 607  :     return deque->len;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR deque$[rsp]
  0000a	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]

; 608  : }

  00011	c3		 ret	 0
deque_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@NMPFEAEC@deque?4remove?$CIx?$CJ?3?5x?5not?5in?5deque?$AA@ ; `string'
PUBLIC	??_C@_1BI@OAJPLFLP@?$AAt?$AAg?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BP@IJIGOMJA@deque?5mutated?5during?5remove?$CI?$CJ?4?$AA@ ; `string'
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_remove DD imagerel deque_remove
	DD	imagerel deque_remove+360
	DD	imagerel $unwind$deque_remove
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_remove DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0CA@NMPFEAEC@deque?4remove?$CIx?$CJ?3?5x?5not?5in?5deque?$AA@
CONST	SEGMENT
??_C@_0CA@NMPFEAEC@deque?4remove?$CIx?$CJ?3?5x?5not?5in?5deque?$AA@ DB 'd'
	DB	'eque.remove(x): x not in deque', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@OAJPLFLP@?$AAt?$AAg?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@OAJPLFLP@?$AAt?$AAg?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 't'
	DB	00H, 'g', 00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IJIGOMJA@deque?5mutated?5during?5remove?$CI?$CJ?4?$AA@
CONST	SEGMENT
??_C@_0BP@IJIGOMJA@deque?5mutated?5during?5remove?$CI?$CJ?4?$AA@ DB 'dequ'
	DB	'e mutated during remove().', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_remove
_TEXT	SEGMENT
n$ = 32
i$ = 40
item$20759 = 48
cmp$20760 = 56
tgt$20765 = 64
deque$ = 96
value$ = 104
deque_remove PROC					; COMDAT

; 612  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 613  :     Py_ssize_t i, n=deque->len;

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00013	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0001a	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 614  : 
; 615  :     for (i=0 ; i<n ; i++) {

  0001f	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00028	eb 0d		 jmp	 SHORT $LN8@deque_remo
$LN7@deque_remo:
  0002a	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0002f	48 ff c0	 inc	 rax
  00032	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN8@deque_remo:
  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0003c	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00041	0f 8d 07 01 00
	00		 jge	 $LN6@deque_remo

; 616  :         PyObject *item = deque->leftblock->data[deque->leftindex];

  00047	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  00055	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00059	48 8b 44 c8 10	 mov	 rax, QWORD PTR [rax+rcx*8+16]
  0005e	48 89 44 24 30	 mov	 QWORD PTR item$20759[rsp], rax

; 617  :         int cmp = PyObject_RichCompareBool(item, value, Py_EQ);

  00063	41 b8 02 00 00
	00		 mov	 r8d, 2
  00069	48 8b 54 24 68	 mov	 rdx, QWORD PTR value$[rsp]
  0006e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR item$20759[rsp]
  00073	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00078	89 44 24 38	 mov	 DWORD PTR cmp$20760[rsp], eax

; 618  : 
; 619  :         if (deque->len != n) {

  0007c	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00081	48 8b 4c 24 20	 mov	 rcx, QWORD PTR n$[rsp]
  00086	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  0008d	74 1a		 je	 SHORT $LN5@deque_remo

; 620  :             PyErr_SetString(PyExc_IndexError,
; 621  :                 "deque mutated during remove().");

  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@IJIGOMJA@deque?5mutated?5during?5remove?$CI?$CJ?4?$AA@
  00096	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0009d	e8 00 00 00 00	 call	 PyErr_SetString

; 622  :             return NULL;

  000a2	33 c0		 xor	 eax, eax
  000a4	e9 ba 00 00 00	 jmp	 $LN9@deque_remo
$LN5@deque_remo:

; 623  :         }
; 624  :         if (cmp > 0) {

  000a9	83 7c 24 38 00	 cmp	 DWORD PTR cmp$20760[rsp], 0
  000ae	7e 6e		 jle	 SHORT $LN4@deque_remo

; 625  :             PyObject *tgt = deque_popleft(deque, NULL);

  000b0	33 d2		 xor	 edx, edx
  000b2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  000b7	e8 00 00 00 00	 call	 deque_popleft
  000bc	48 89 44 24 40	 mov	 QWORD PTR tgt$20765[rsp], rax

; 626  :             assert (tgt != NULL);

  000c1	48 83 7c 24 40
	00		 cmp	 QWORD PTR tgt$20765[rsp], 0
  000c7	75 1c		 jne	 SHORT $LN11@deque_remo
  000c9	41 b8 72 02 00
	00		 mov	 r8d, 626		; 00000272H
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@OAJPLFLP@?$AAt?$AAg?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e3	33 c0		 xor	 eax, eax
$LN11@deque_remo:

; 627  :             Py_DECREF(tgt);

  000e5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tgt$20765[rsp]
  000ea	e8 00 00 00 00	 call	 _Py_DecRef

; 628  :             if (_deque_rotate(deque, i) == -1)

  000ef	48 8b 54 24 28	 mov	 rdx, QWORD PTR i$[rsp]
  000f4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  000f9	e8 00 00 00 00	 call	 _deque_rotate
  000fe	83 f8 ff	 cmp	 eax, -1
  00101	75 04		 jne	 SHORT $LN3@deque_remo

; 629  :                 return NULL;

  00103	33 c0		 xor	 eax, eax
  00105	eb 5c		 jmp	 SHORT $LN9@deque_remo
$LN3@deque_remo:

; 630  :             Py_RETURN_NONE;

  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0010e	e8 00 00 00 00	 call	 _Py_IncRef
  00113	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0011a	eb 47		 jmp	 SHORT $LN9@deque_remo
  0011c	eb 1a		 jmp	 SHORT $LN2@deque_remo
$LN4@deque_remo:

; 631  :         }
; 632  :         else if (cmp < 0) {

  0011e	83 7c 24 38 00	 cmp	 DWORD PTR cmp$20760[rsp], 0
  00123	7d 13		 jge	 SHORT $LN1@deque_remo

; 633  :             _deque_rotate(deque, i);

  00125	48 8b 54 24 28	 mov	 rdx, QWORD PTR i$[rsp]
  0012a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  0012f	e8 00 00 00 00	 call	 _deque_rotate

; 634  :             return NULL;

  00134	33 c0		 xor	 eax, eax
  00136	eb 2b		 jmp	 SHORT $LN9@deque_remo
$LN1@deque_remo:
$LN2@deque_remo:

; 635  :         }
; 636  :         _deque_rotate(deque, -1);

  00138	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0013f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  00144	e8 00 00 00 00	 call	 _deque_rotate

; 637  :     }

  00149	e9 dc fe ff ff	 jmp	 $LN7@deque_remo
$LN6@deque_remo:

; 638  :     PyErr_SetString(PyExc_ValueError, "deque.remove(x): x not in deque");

  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@NMPFEAEC@deque?4remove?$CIx?$CJ?3?5x?5not?5in?5deque?$AA@
  00155	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0015c	e8 00 00 00 00	 call	 PyErr_SetString

; 639  :     return NULL;

  00161	33 c0		 xor	 eax, eax
$LN9@deque_remo:

; 640  : }

  00163	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00167	c3		 ret	 0
deque_remove ENDP
_TEXT	ENDS
PUBLIC	??_C@_1MM@OKEEFLLI@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@ ; `string'
PUBLIC	??_C@_1BK@CDKDBCEF@?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_clear DD imagerel deque_clear
	DD	imagerel deque_clear+180
	DD	imagerel $unwind$deque_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_clear DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1MM@OKEEFLLI@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
CONST	SEGMENT
??_C@_1MM@OKEEFLLI@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@ DB 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'b', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '-', 00H
	DB	' ', 00H, '1', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'i', 00H, 'n'
	DB	00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@CDKDBCEF@?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@CDKDBCEF@?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_clear
_TEXT	SEGMENT
item$ = 32
deque$ = 64
deque_clear PROC					; COMDAT

; 647  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@deque_clea:

; 648  :     PyObject *item;
; 649  : 
; 650  :     while (deque->len) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0000e	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00016	74 41		 je	 SHORT $LN1@deque_clea

; 651  :         item = deque_pop(deque, NULL);

  00018	33 d2		 xor	 edx, edx
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  0001f	e8 00 00 00 00	 call	 deque_pop
  00024	48 89 44 24 20	 mov	 QWORD PTR item$[rsp], rax

; 652  :         assert (item != NULL);

  00029	48 83 7c 24 20
	00		 cmp	 QWORD PTR item$[rsp], 0
  0002f	75 1c		 jne	 SHORT $LN5@deque_clea
  00031	41 b8 8c 02 00
	00		 mov	 r8d, 652		; 0000028cH
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@CDKDBCEF@?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004b	33 c0		 xor	 eax, eax
$LN5@deque_clea:

; 653  :         Py_DECREF(item);

  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR item$[rsp]
  00052	e8 00 00 00 00	 call	 _Py_DecRef

; 654  :     }

  00057	eb b0		 jmp	 SHORT $LN2@deque_clea
$LN1@deque_clea:

; 655  :     assert(deque->leftblock == deque->rightblock &&
; 656  :            deque->leftindex - 1 == deque->rightindex &&
; 657  :            deque->len == 0);

  00059	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0005e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00063	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00067	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  0006b	75 26		 jne	 SHORT $LN6@deque_clea
  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00072	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00076	48 ff c8	 dec	 rax
  00079	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  0007e	48 3b 41 78	 cmp	 rax, QWORD PTR [rcx+120]
  00082	75 0f		 jne	 SHORT $LN6@deque_clea
  00084	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00089	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00091	74 1c		 je	 SHORT $LN7@deque_clea
$LN6@deque_clea:
  00093	41 b8 91 02 00
	00		 mov	 r8d, 657		; 00000291H
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1MM@OKEEFLLI@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt@
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ad	33 c0		 xor	 eax, eax
$LN7@deque_clea:

; 658  : }

  000af	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b3	c3		 ret	 0
deque_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@LBMBPNIL@deque?5index?5out?5of?5range?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_item DD imagerel deque_item
	DD	imagerel deque_item+456
	DD	imagerel $unwind$deque_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_item DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BJ@LBMBPNIL@deque?5index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BJ@LBMBPNIL@deque?5index?5out?5of?5range?$AA@ DB 'deque index out '
	DB	'of range', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_item
_TEXT	SEGMENT
n$ = 32
index$ = 40
b$ = 48
item$ = 56
deque$ = 80
i$ = 88
deque_item PROC						; COMDAT

; 662  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 663  :     block *b;
; 664  :     PyObject *item;
; 665  :     Py_ssize_t n, index=i;

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR i$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR index$[rsp], rax

; 666  : 
; 667  :     if (i < 0 || i >= deque->len) {

  00018	48 83 7c 24 58
	00		 cmp	 QWORD PTR i$[rsp], 0
  0001e	7c 13		 jl	 SHORT $LN11@deque_item
  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  00025	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0002c	48 39 44 24 58	 cmp	 QWORD PTR i$[rsp], rax
  00031	7c 1a		 jl	 SHORT $LN12@deque_item
$LN11@deque_item:

; 668  :         PyErr_SetString(PyExc_IndexError,
; 669  :                         "deque index out of range");

  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@LBMBPNIL@deque?5index?5out?5of?5range?$AA@
  0003a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00041	e8 00 00 00 00	 call	 PyErr_SetString

; 670  :         return NULL;

  00046	33 c0		 xor	 eax, eax
  00048	e9 76 01 00 00	 jmp	 $LN13@deque_item
$LN12@deque_item:

; 671  :     }
; 672  : 
; 673  :     if (i == 0) {

  0004d	48 83 7c 24 58
	00		 cmp	 QWORD PTR i$[rsp], 0
  00053	75 21		 jne	 SHORT $LN10@deque_item

; 674  :         i = deque->leftindex;

  00055	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  0005a	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0005e	48 89 44 24 58	 mov	 QWORD PTR i$[rsp], rax

; 675  :         b = deque->leftblock;

  00063	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  00068	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006c	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax
  00071	e9 2a 01 00 00	 jmp	 $LN9@deque_item
$LN10@deque_item:

; 676  :     } else if (i == deque->len - 1) {

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  0007b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00082	48 ff c8	 dec	 rax
  00085	48 39 44 24 58	 cmp	 QWORD PTR i$[rsp], rax
  0008a	75 21		 jne	 SHORT $LN8@deque_item

; 677  :         i = deque->rightindex;

  0008c	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  00091	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00095	48 89 44 24 58	 mov	 QWORD PTR i$[rsp], rax

; 678  :         b = deque->rightblock;

  0009a	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  0009f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a3	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax

; 679  :     } else {

  000a8	e9 f3 00 00 00	 jmp	 $LN7@deque_item
$LN8@deque_item:

; 680  :         i += deque->leftindex;

  000ad	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  000b2	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000b6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR i$[rsp]
  000bb	48 03 c8	 add	 rcx, rax
  000be	48 8b c1	 mov	 rax, rcx
  000c1	48 89 44 24 58	 mov	 QWORD PTR i$[rsp], rax

; 681  :         n = i / BLOCKLEN;

  000c6	48 8b 44 24 58	 mov	 rax, QWORD PTR i$[rsp]
  000cb	48 99		 cdq
  000cd	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  000d2	48 f7 f9	 idiv	 rcx
  000d5	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 682  :         i %= BLOCKLEN;

  000da	48 8b 44 24 58	 mov	 rax, QWORD PTR i$[rsp]
  000df	48 99		 cdq
  000e1	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  000e6	48 f7 f9	 idiv	 rcx
  000e9	48 8b c2	 mov	 rax, rdx
  000ec	48 89 44 24 58	 mov	 QWORD PTR i$[rsp], rax

; 683  :         if (index < (deque->len >> 1)) {

  000f1	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  000f6	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000fd	48 d1 f8	 sar	 rax, 1
  00100	48 39 44 24 28	 cmp	 QWORD PTR index$[rsp], rax
  00105	7d 37		 jge	 SHORT $LN6@deque_item

; 684  :             b = deque->leftblock;

  00107	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  0010c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00110	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax
$LN5@deque_item:

; 685  :             while (n--)

  00115	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0011a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR n$[rsp]
  0011f	48 ff c9	 dec	 rcx
  00122	48 89 4c 24 20	 mov	 QWORD PTR n$[rsp], rcx
  00127	48 85 c0	 test	 rax, rax
  0012a	74 10		 je	 SHORT $LN4@deque_item

; 686  :                 b = b->rightlink;

  0012c	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00131	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00135	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax
  0013a	eb d9		 jmp	 SHORT $LN5@deque_item
$LN4@deque_item:

; 687  :         } else {

  0013c	eb 62		 jmp	 SHORT $LN3@deque_item
$LN6@deque_item:

; 688  :             n = (deque->leftindex + deque->len - 1) / BLOCKLEN - n;

  0013e	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  00143	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00147	48 8b 4c 24 50	 mov	 rcx, QWORD PTR deque$[rsp]
  0014c	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00153	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  00158	48 99		 cdq
  0015a	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0015f	48 f7 f9	 idiv	 rcx
  00162	48 2b 44 24 20	 sub	 rax, QWORD PTR n$[rsp]
  00167	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 689  :             b = deque->rightblock;

  0016c	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  00171	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00175	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax
$LN2@deque_item:

; 690  :             while (n--)

  0017a	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0017f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR n$[rsp]
  00184	48 ff c9	 dec	 rcx
  00187	48 89 4c 24 20	 mov	 QWORD PTR n$[rsp], rcx
  0018c	48 85 c0	 test	 rax, rax
  0018f	74 0f		 je	 SHORT $LN1@deque_item

; 691  :                 b = b->leftlink;

  00191	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00196	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00199	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax
  0019e	eb da		 jmp	 SHORT $LN2@deque_item
$LN1@deque_item:
$LN3@deque_item:
$LN7@deque_item:
$LN9@deque_item:

; 692  :         }
; 693  :     }
; 694  :     item = b->data[i];

  001a0	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  001a5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR i$[rsp]
  001aa	48 8b 44 c8 10	 mov	 rax, QWORD PTR [rax+rcx*8+16]
  001af	48 89 44 24 38	 mov	 QWORD PTR item$[rsp], rax

; 695  :     Py_INCREF(item);

  001b4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  001b9	e8 00 00 00 00	 call	 _Py_IncRef

; 696  :     return item;

  001be	48 8b 44 24 38	 mov	 rax, QWORD PTR item$[rsp]
$LN13@deque_item:

; 697  : }

  001c3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001c7	c3		 ret	 0
deque_item ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_ass_item DD imagerel deque_ass_item
	DD	imagerel deque_ass_item+432
	DD	imagerel $unwind$deque_ass_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_ass_item DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT deque_ass_item
_TEXT	SEGMENT
halflen$ = 32
n$ = 40
index$ = 48
len$ = 56
b$ = 64
old_value$ = 72
deque$ = 96
i$ = 104
v$ = 112
deque_ass_item PROC					; COMDAT

; 724  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 725  :     PyObject *old_value;
; 726  :     block *b;
; 727  :     Py_ssize_t n, len=deque->len, halflen=(len+1)>>1, index=i;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00018	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0001f	48 89 44 24 38	 mov	 QWORD PTR len$[rsp], rax
  00024	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  00029	48 ff c0	 inc	 rax
  0002c	48 d1 f8	 sar	 rax, 1
  0002f	48 89 44 24 20	 mov	 QWORD PTR halflen$[rsp], rax
  00034	48 8b 44 24 68	 mov	 rax, QWORD PTR i$[rsp]
  00039	48 89 44 24 30	 mov	 QWORD PTR index$[rsp], rax

; 728  : 
; 729  :     if (i < 0 || i >= len) {

  0003e	48 83 7c 24 68
	00		 cmp	 QWORD PTR i$[rsp], 0
  00044	7c 0c		 jl	 SHORT $LN8@deque_ass_
  00046	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  0004b	48 39 44 24 68	 cmp	 QWORD PTR i$[rsp], rax
  00050	7c 1d		 jl	 SHORT $LN9@deque_ass_
$LN8@deque_ass_:

; 730  :         PyErr_SetString(PyExc_IndexError,
; 731  :                         "deque index out of range");

  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@LBMBPNIL@deque?5index?5out?5of?5range?$AA@
  00059	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00060	e8 00 00 00 00	 call	 PyErr_SetString

; 732  :         return -1;

  00065	b8 ff ff ff ff	 mov	 eax, -1
  0006a	e9 3c 01 00 00	 jmp	 $LN10@deque_ass_
$LN9@deque_ass_:

; 733  :     }
; 734  :     if (v == NULL)

  0006f	48 83 7c 24 70
	00		 cmp	 QWORD PTR v$[rsp], 0
  00075	75 14		 jne	 SHORT $LN7@deque_ass_

; 735  :         return deque_del_item(deque, i);

  00077	48 8b 54 24 68	 mov	 rdx, QWORD PTR i$[rsp]
  0007c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  00081	e8 00 00 00 00	 call	 deque_del_item
  00086	e9 20 01 00 00	 jmp	 $LN10@deque_ass_
$LN7@deque_ass_:

; 736  : 
; 737  :     i += deque->leftindex;

  0008b	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00090	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00094	48 8b 4c 24 68	 mov	 rcx, QWORD PTR i$[rsp]
  00099	48 03 c8	 add	 rcx, rax
  0009c	48 8b c1	 mov	 rax, rcx
  0009f	48 89 44 24 68	 mov	 QWORD PTR i$[rsp], rax

; 738  :     n = i / BLOCKLEN;

  000a4	48 8b 44 24 68	 mov	 rax, QWORD PTR i$[rsp]
  000a9	48 99		 cdq
  000ab	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  000b0	48 f7 f9	 idiv	 rcx
  000b3	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 739  :     i %= BLOCKLEN;

  000b8	48 8b 44 24 68	 mov	 rax, QWORD PTR i$[rsp]
  000bd	48 99		 cdq
  000bf	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  000c4	48 f7 f9	 idiv	 rcx
  000c7	48 8b c2	 mov	 rax, rdx
  000ca	48 89 44 24 68	 mov	 QWORD PTR i$[rsp], rax

; 740  :     if (index <= halflen) {

  000cf	48 8b 44 24 20	 mov	 rax, QWORD PTR halflen$[rsp]
  000d4	48 39 44 24 30	 cmp	 QWORD PTR index$[rsp], rax
  000d9	7f 37		 jg	 SHORT $LN6@deque_ass_

; 741  :         b = deque->leftblock;

  000db	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000e0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000e4	48 89 44 24 40	 mov	 QWORD PTR b$[rsp], rax
$LN5@deque_ass_:

; 742  :         while (n--)

  000e9	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  000ee	48 8b 4c 24 28	 mov	 rcx, QWORD PTR n$[rsp]
  000f3	48 ff c9	 dec	 rcx
  000f6	48 89 4c 24 28	 mov	 QWORD PTR n$[rsp], rcx
  000fb	48 85 c0	 test	 rax, rax
  000fe	74 10		 je	 SHORT $LN4@deque_ass_

; 743  :             b = b->rightlink;

  00100	48 8b 44 24 40	 mov	 rax, QWORD PTR b$[rsp]
  00105	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00109	48 89 44 24 40	 mov	 QWORD PTR b$[rsp], rax
  0010e	eb d9		 jmp	 SHORT $LN5@deque_ass_
$LN4@deque_ass_:

; 744  :     } else {

  00110	eb 5b		 jmp	 SHORT $LN3@deque_ass_
$LN6@deque_ass_:

; 745  :         n = (deque->leftindex + len - 1) / BLOCKLEN - n;

  00112	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00117	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0011b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$[rsp]
  00120	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  00125	48 99		 cdq
  00127	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0012c	48 f7 f9	 idiv	 rcx
  0012f	48 2b 44 24 28	 sub	 rax, QWORD PTR n$[rsp]
  00134	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 746  :         b = deque->rightblock;

  00139	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  0013e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00142	48 89 44 24 40	 mov	 QWORD PTR b$[rsp], rax
$LN2@deque_ass_:

; 747  :         while (n--)

  00147	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  0014c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR n$[rsp]
  00151	48 ff c9	 dec	 rcx
  00154	48 89 4c 24 28	 mov	 QWORD PTR n$[rsp], rcx
  00159	48 85 c0	 test	 rax, rax
  0015c	74 0f		 je	 SHORT $LN1@deque_ass_

; 748  :             b = b->leftlink;

  0015e	48 8b 44 24 40	 mov	 rax, QWORD PTR b$[rsp]
  00163	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00166	48 89 44 24 40	 mov	 QWORD PTR b$[rsp], rax
  0016b	eb da		 jmp	 SHORT $LN2@deque_ass_
$LN1@deque_ass_:
$LN3@deque_ass_:

; 749  :     }
; 750  :     Py_INCREF(v);

  0016d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR v$[rsp]
  00172	e8 00 00 00 00	 call	 _Py_IncRef

; 751  :     old_value = b->data[i];

  00177	48 8b 44 24 40	 mov	 rax, QWORD PTR b$[rsp]
  0017c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR i$[rsp]
  00181	48 8b 44 c8 10	 mov	 rax, QWORD PTR [rax+rcx*8+16]
  00186	48 89 44 24 48	 mov	 QWORD PTR old_value$[rsp], rax

; 752  :     b->data[i] = v;

  0018b	48 8b 44 24 40	 mov	 rax, QWORD PTR b$[rsp]
  00190	48 8b 4c 24 68	 mov	 rcx, QWORD PTR i$[rsp]
  00195	48 8b 54 24 70	 mov	 rdx, QWORD PTR v$[rsp]
  0019a	48 89 54 c8 10	 mov	 QWORD PTR [rax+rcx*8+16], rdx

; 753  :     Py_DECREF(old_value);

  0019f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR old_value$[rsp]
  001a4	e8 00 00 00 00	 call	 _Py_DecRef

; 754  :     return 0;

  001a9	33 c0		 xor	 eax, eax
$LN10@deque_ass_:

; 755  : }

  001ab	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001af	c3		 ret	 0
deque_ass_item ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DC@PIMJJGOH@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_del_item DD imagerel deque_del_item
	DD	imagerel deque_del_item+185
	DD	imagerel $unwind$deque_del_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_del_item DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1DC@PIMJJGOH@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@PIMJJGOH@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?$AA@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_del_item
_TEXT	SEGMENT
item$ = 32
deque$ = 64
i$ = 72
deque_del_item PROC					; COMDAT

; 708  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 709  :     PyObject *item;
; 710  : 
; 711  :     assert (i >= 0 && i < deque->len);

  0000e	48 83 7c 24 48
	00		 cmp	 QWORD PTR i$[rsp], 0
  00014	7c 13		 jl	 SHORT $LN4@deque_del_
  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0001b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00022	48 39 44 24 48	 cmp	 QWORD PTR i$[rsp], rax
  00027	7c 1c		 jl	 SHORT $LN5@deque_del_
$LN4@deque_del_:
  00029	41 b8 c7 02 00
	00		 mov	 r8d, 711		; 000002c7H
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@PIMJJGOH@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?$AA@
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00043	33 c0		 xor	 eax, eax
$LN5@deque_del_:

; 712  :     if (_deque_rotate(deque, -i) == -1)

  00045	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  0004a	48 f7 d8	 neg	 rax
  0004d	48 8b d0	 mov	 rdx, rax
  00050	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00055	e8 00 00 00 00	 call	 _deque_rotate
  0005a	83 f8 ff	 cmp	 eax, -1
  0005d	75 07		 jne	 SHORT $LN1@deque_del_

; 713  :         return -1;

  0005f	b8 ff ff ff ff	 mov	 eax, -1
  00064	eb 4e		 jmp	 SHORT $LN2@deque_del_
$LN1@deque_del_:

; 714  : 
; 715  :     item = deque_popleft(deque, NULL);

  00066	33 d2		 xor	 edx, edx
  00068	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  0006d	e8 00 00 00 00	 call	 deque_popleft
  00072	48 89 44 24 20	 mov	 QWORD PTR item$[rsp], rax

; 716  :     assert (item != NULL);

  00077	48 83 7c 24 20
	00		 cmp	 QWORD PTR item$[rsp], 0
  0007d	75 1c		 jne	 SHORT $LN6@deque_del_
  0007f	41 b8 cc 02 00
	00		 mov	 r8d, 716		; 000002ccH
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@CDKDBCEF@?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00099	33 c0		 xor	 eax, eax
$LN6@deque_del_:

; 717  :     Py_DECREF(item);

  0009b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR item$[rsp]
  000a0	e8 00 00 00 00	 call	 _Py_DecRef

; 718  : 
; 719  :     return _deque_rotate(deque, i);

  000a5	48 8b 54 24 48	 mov	 rdx, QWORD PTR i$[rsp]
  000aa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000af	e8 00 00 00 00	 call	 _deque_rotate
$LN2@deque_del_:

; 720  : }

  000b4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b8	c3		 ret	 0
deque_del_item ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_clearmethod DD imagerel deque_clearmethod
	DD	imagerel deque_clearmethod+43
	DD	imagerel $unwind$deque_clearmethod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_clearmethod DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT deque_clearmethod
_TEXT	SEGMENT
deque$ = 48
deque_clearmethod PROC					; COMDAT

; 759  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 760  :     deque_clear(deque);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR deque$[rsp]
  0000e	e8 00 00 00 00	 call	 deque_clear

; 761  :     Py_RETURN_NONE;

  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001a	e8 00 00 00 00	 call	 _Py_IncRef
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 762  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
deque_clearmethod ENDP
_TEXT	ENDS
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_dealloc DD imagerel deque_dealloc
	DD	imagerel deque_dealloc+171
	DD	imagerel $unwind$deque_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT deque_dealloc
_TEXT	SEGMENT
deque$ = 48
deque_dealloc PROC					; COMDAT

; 768  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 769  :     PyObject_GC_UnTrack(deque);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR deque$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 770  :     if (deque->weakreflist != NULL)

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR deque$[rsp]
  00018	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00020	74 0a		 je	 SHORT $LN2@deque_deal

; 771  :         PyObject_ClearWeakRefs((PyObject *) deque);

  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR deque$[rsp]
  00027	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN2@deque_deal:

; 772  :     if (deque->leftblock != NULL) {

  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR deque$[rsp]
  00031	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00036	74 40		 je	 SHORT $LN1@deque_deal

; 773  :         deque_clear(deque);

  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR deque$[rsp]
  0003d	e8 00 00 00 00	 call	 deque_clear

; 774  :         assert(deque->leftblock != NULL);

  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR deque$[rsp]
  00047	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0004c	75 1c		 jne	 SHORT $LN5@deque_deal
  0004e	41 b8 06 03 00
	00		 mov	 r8d, 774		; 00000306H
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BGPALMIE@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00068	33 c0		 xor	 eax, eax
$LN5@deque_deal:

; 775  :         freeblock(deque->leftblock);

  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR deque$[rsp]
  0006f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00073	e8 00 00 00 00	 call	 freeblock
$LN1@deque_deal:

; 776  :     }
; 777  :     deque->leftblock = NULL;

  00078	48 8b 44 24 30	 mov	 rax, QWORD PTR deque$[rsp]
  0007d	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 778  :     deque->rightblock = NULL;

  00085	48 8b 44 24 30	 mov	 rax, QWORD PTR deque$[rsp]
  0008a	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 779  :     Py_TYPE(deque)->tp_free(deque);

  00092	48 8b 44 24 30	 mov	 rax, QWORD PTR deque$[rsp]
  00097	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0009b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR deque$[rsp]
  000a0	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 780  : }

  000a6	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000aa	c3		 ret	 0
deque_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DHFOPNPO@deque_traverse?$AA@		; `string'
PUBLIC	??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_traverse DD imagerel deque_traverse
	DD	imagerel deque_traverse+294
	DD	imagerel $unwind$deque_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_traverse DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0P@DHFOPNPO@deque_traverse?$AA@
CONST	SEGMENT
??_C@_0P@DHFOPNPO@deque_traverse?$AA@ DB 'deque_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
CONST	SEGMENT
??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@ DB '..\Modul'
	DB	'es\_collectionsmodule.c', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_traverse
_TEXT	SEGMENT
index$ = 32
indexlo$ = 40
b$ = 48
item$ = 56
indexhi$20900 = 64
vret$20911 = 72
tv71 = 80
deque$ = 112
visit$ = 120
arg$ = 128
deque_traverse PROC					; COMDAT

; 784  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 785  :     block *b;
; 786  :     PyObject *item;
; 787  :     Py_ssize_t index;
; 788  :     Py_ssize_t indexlo = deque->leftindex;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  00018	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0001c	48 89 44 24 28	 mov	 QWORD PTR indexlo$[rsp], rax

; 789  : 
; 790  :     for (b = deque->leftblock; b != NULL; b = b->rightlink) {

  00021	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  00026	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0002a	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax
  0002f	eb 0e		 jmp	 SHORT $LN12@deque_trav
$LN11@deque_trav:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00036	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003a	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax
$LN12@deque_trav:
  0003f	48 83 7c 24 30
	00		 cmp	 QWORD PTR b$[rsp], 0
  00045	0f 84 d4 00 00
	00		 je	 $LN10@deque_trav

; 791  :         const Py_ssize_t indexhi = b == deque->rightblock ?
; 792  :                                  deque->rightindex :
; 793  :                      BLOCKLEN - 1;

  0004b	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  00050	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00054	48 39 44 24 30	 cmp	 QWORD PTR b$[rsp], rax
  00059	75 10		 jne	 SHORT $LN15@deque_trav
  0005b	48 8b 44 24 70	 mov	 rax, QWORD PTR deque$[rsp]
  00060	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00064	48 89 44 24 50	 mov	 QWORD PTR tv71[rsp], rax
  00069	eb 09		 jmp	 SHORT $LN16@deque_trav
$LN15@deque_trav:
  0006b	48 c7 44 24 50
	3d 00 00 00	 mov	 QWORD PTR tv71[rsp], 61	; 0000003dH
$LN16@deque_trav:
  00074	48 8b 44 24 50	 mov	 rax, QWORD PTR tv71[rsp]
  00079	48 89 44 24 40	 mov	 QWORD PTR indexhi$20900[rsp], rax

; 794  : 
; 795  :         for (index = indexlo; index <= indexhi; ++index) {

  0007e	48 8b 44 24 28	 mov	 rax, QWORD PTR indexlo$[rsp]
  00083	48 89 44 24 20	 mov	 QWORD PTR index$[rsp], rax
  00088	eb 0d		 jmp	 SHORT $LN9@deque_trav
$LN8@deque_trav:
  0008a	48 8b 44 24 20	 mov	 rax, QWORD PTR index$[rsp]
  0008f	48 ff c0	 inc	 rax
  00092	48 89 44 24 20	 mov	 QWORD PTR index$[rsp], rax
$LN9@deque_trav:
  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR indexhi$20900[rsp]
  0009c	48 39 44 24 20	 cmp	 QWORD PTR index$[rsp], rax
  000a1	7f 6e		 jg	 SHORT $LN7@deque_trav

; 796  :             item = b->data[index];

  000a3	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  000a8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR index$[rsp]
  000ad	48 8b 44 c8 10	 mov	 rax, QWORD PTR [rax+rcx*8+16]
  000b2	48 89 44 24 38	 mov	 QWORD PTR item$[rsp], rax
$LN6@deque_trav:

; 797  :             Py_VISIT(item);

  000b7	e8 00 00 00 00	 call	 _Py_PXCTX
  000bc	85 c0		 test	 eax, eax
  000be	74 1c		 je	 SHORT $LN3@deque_trav
  000c0	45 33 c9	 xor	 r9d, r9d
  000c3	41 b8 1d 03 00
	00		 mov	 r8d, 797		; 0000031dH
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@DHFOPNPO@deque_traverse?$AA@
  000d7	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@deque_trav:
  000dc	48 83 7c 24 38
	00		 cmp	 QWORD PTR item$[rsp], 0
  000e2	74 22		 je	 SHORT $LN2@deque_trav
  000e4	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  000ec	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  000f1	ff 54 24 78	 call	 QWORD PTR visit$[rsp]
  000f5	89 44 24 48	 mov	 DWORD PTR vret$20911[rsp], eax
  000f9	83 7c 24 48 00	 cmp	 DWORD PTR vret$20911[rsp], 0
  000fe	74 06		 je	 SHORT $LN1@deque_trav
  00100	8b 44 24 48	 mov	 eax, DWORD PTR vret$20911[rsp]
  00104	eb 1b		 jmp	 SHORT $LN13@deque_trav
$LN1@deque_trav:
$LN2@deque_trav:
  00106	33 c0		 xor	 eax, eax
  00108	85 c0		 test	 eax, eax
  0010a	75 ab		 jne	 SHORT $LN6@deque_trav

; 798  :         }

  0010c	e9 79 ff ff ff	 jmp	 $LN8@deque_trav
$LN7@deque_trav:

; 799  :         indexlo = 0;

  00111	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR indexlo$[rsp], 0

; 800  :     }

  0011a	e9 12 ff ff ff	 jmp	 $LN11@deque_trav
$LN10@deque_trav:

; 801  :     return 0;

  0011f	33 c0		 xor	 eax, eax
$LN13@deque_trav:

; 802  : }

  00121	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00125	c3		 ret	 0
deque_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MPEHDMPO@Oi?$AA@			; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
EXTRN	PyObject_CallFunction:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_copy DD imagerel deque_copy
	DD	imagerel deque_copy+109
	DD	imagerel $unwind$deque_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_copy DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_02MPEHDMPO@Oi?$AA@
CONST	SEGMENT
??_C@_02MPEHDMPO@Oi?$AA@ DB 'Oi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_copy
_TEXT	SEGMENT
deque$ = 64
deque_copy PROC						; COMDAT

; 806  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 807  :     if (((dequeobject *)deque)->maxlen == -1)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0000e	48 83 b8 88 00
	00 00 ff	 cmp	 QWORD PTR [rax+136], -1
  00016	75 21		 jne	 SHORT $LN2@deque_copy

; 808  :         return PyObject_CallFunction((PyObject *)(Py_TYPE(deque)), "O", deque, NULL);

  00018	45 33 c9	 xor	 r9d, r9d
  0001b	4c 8b 44 24 40	 mov	 r8, QWORD PTR deque$[rsp]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00027	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0002c	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00030	e8 00 00 00 00	 call	 PyObject_CallFunction
  00035	eb 31		 jmp	 SHORT $LN3@deque_copy

; 809  :     else

  00037	eb 2f		 jmp	 SHORT $LN1@deque_copy
$LN2@deque_copy:

; 810  :         return PyObject_CallFunction((PyObject *)(Py_TYPE(deque)), "Oi",
; 811  :             deque, ((dequeobject *)deque)->maxlen, NULL);

  00039	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00047	4c 8b 88 88 00
	00 00		 mov	 r9, QWORD PTR [rax+136]
  0004e	4c 8b 44 24 40	 mov	 r8, QWORD PTR deque$[rsp]
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  0005a	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0005f	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00063	e8 00 00 00 00	 call	 PyObject_CallFunction
$LN1@deque_copy:
$LN3@deque_copy:

; 812  : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
deque_copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_06HKAIMDEH@O?$CIOn?$CJO?$AA@		; `string'
PUBLIC	??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@		; `string'
PUBLIC	??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@		; `string'
PUBLIC	??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_reduce DD imagerel deque_reduce
	DD	imagerel deque_reduce+383
	DD	imagerel $unwind$deque_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_reduce DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_06HKAIMDEH@O?$CIOn?$CJO?$AA@
CONST	SEGMENT
??_C@_06HKAIMDEH@O?$CIOn?$CJO?$AA@ DB 'O(On)O', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@
CONST	SEGMENT
??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@ DB 'O(OO)O', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@
CONST	SEGMENT
??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@ DB 'O(On)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@ DB 'O(O)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_reduce
_TEXT	SEGMENT
dict$ = 48
result$ = 56
aslist$ = 64
deque$ = 96
deque_reduce PROC					; COMDAT

; 818  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 819  :     PyObject *dict, *result, *aslist;
; 820  :     _Py_IDENTIFIER(__dict__);
; 821  : 
; 822  :     dict = _PyObject_GetAttrId((PyObject *)deque, &PyId___dict__);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___dict__@?1??deque_reduce@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  0002b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00030	48 89 44 24 30	 mov	 QWORD PTR dict$[rsp], rax

; 823  :     if (dict == NULL)

  00035	48 83 7c 24 30
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0003b	75 05		 jne	 SHORT $LN16@deque_redu

; 824  :         PyErr_Clear();

  0003d	e8 00 00 00 00	 call	 PyErr_Clear
$LN16@deque_redu:

; 825  :     aslist = PySequence_List((PyObject *)deque);

  00042	48 8b 4c 24 60	 mov	 rcx, QWORD PTR deque$[rsp]
  00047	e8 00 00 00 00	 call	 PySequence_List
  0004c	48 89 44 24 40	 mov	 QWORD PTR aslist$[rsp], rax

; 826  :     if (aslist == NULL) {

  00051	48 83 7c 24 40
	00		 cmp	 QWORD PTR aslist$[rsp], 0
  00057	75 1f		 jne	 SHORT $LN15@deque_redu
$LN14@deque_redu:

; 827  :         Py_XDECREF(dict);

  00059	48 83 7c 24 30
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0005f	74 0a		 je	 SHORT $LN11@deque_redu
  00061	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  00066	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@deque_redu:
  0006b	33 c0		 xor	 eax, eax
  0006d	85 c0		 test	 eax, eax
  0006f	75 e8		 jne	 SHORT $LN14@deque_redu

; 828  :         return NULL;

  00071	33 c0		 xor	 eax, eax
  00073	e9 02 01 00 00	 jmp	 $LN17@deque_redu
$LN15@deque_redu:

; 829  :     }
; 830  :     if (dict == NULL) {

  00078	48 83 7c 24 30
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0007e	75 5d		 jne	 SHORT $LN10@deque_redu

; 831  :         if (deque->maxlen == -1)

  00080	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00085	48 83 b8 88 00
	00 00 ff	 cmp	 QWORD PTR [rax+136], -1
  0008d	75 21		 jne	 SHORT $LN9@deque_redu

; 832  :             result = Py_BuildValue("O(O)", Py_TYPE(deque), aslist);

  0008f	4c 8b 44 24 40	 mov	 r8, QWORD PTR aslist$[rsp]
  00094	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00099	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@
  000a4	e8 00 00 00 00	 call	 Py_BuildValue
  000a9	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 833  :         else

  000ae	eb 2b		 jmp	 SHORT $LN8@deque_redu
$LN9@deque_redu:

; 834  :             result = Py_BuildValue("O(On)", Py_TYPE(deque), aslist, deque->maxlen);

  000b0	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000b5	4c 8b 88 88 00
	00 00		 mov	 r9, QWORD PTR [rax+136]
  000bc	4c 8b 44 24 40	 mov	 r8, QWORD PTR aslist$[rsp]
  000c1	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000c6	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@
  000d1	e8 00 00 00 00	 call	 Py_BuildValue
  000d6	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax
$LN8@deque_redu:

; 835  :     } else {

  000db	eb 76		 jmp	 SHORT $LN7@deque_redu
$LN10@deque_redu:

; 836  :         if (deque->maxlen == -1)

  000dd	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  000e2	48 83 b8 88 00
	00 00 ff	 cmp	 QWORD PTR [rax+136], -1
  000ea	75 32		 jne	 SHORT $LN6@deque_redu

; 837  :             result = Py_BuildValue("O(OO)O", Py_TYPE(deque), aslist, Py_None, dict);

  000ec	48 8b 44 24 30	 mov	 rax, QWORD PTR dict$[rsp]
  000f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000fd	4c 8b 44 24 40	 mov	 r8, QWORD PTR aslist$[rsp]
  00102	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  00107	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GCIGALBM@O?$CIOO?$CJO?$AA@
  00112	e8 00 00 00 00	 call	 Py_BuildValue
  00117	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 838  :         else

  0011c	eb 35		 jmp	 SHORT $LN5@deque_redu
$LN6@deque_redu:

; 839  :             result = Py_BuildValue("O(On)O", Py_TYPE(deque), aslist, deque->maxlen, dict);

  0011e	48 8b 44 24 30	 mov	 rax, QWORD PTR dict$[rsp]
  00123	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00128	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  0012d	4c 8b 88 88 00
	00 00		 mov	 r9, QWORD PTR [rax+136]
  00134	4c 8b 44 24 40	 mov	 r8, QWORD PTR aslist$[rsp]
  00139	48 8b 44 24 60	 mov	 rax, QWORD PTR deque$[rsp]
  0013e	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HKAIMDEH@O?$CIOn?$CJO?$AA@
  00149	e8 00 00 00 00	 call	 Py_BuildValue
  0014e	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax
$LN5@deque_redu:
$LN7@deque_redu:
$LN4@deque_redu:

; 840  :     }
; 841  :     Py_XDECREF(dict);

  00153	48 83 7c 24 30
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00159	74 0a		 je	 SHORT $LN1@deque_redu
  0015b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  00160	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@deque_redu:
  00165	33 c0		 xor	 eax, eax
  00167	85 c0		 test	 eax, eax
  00169	75 e8		 jne	 SHORT $LN4@deque_redu

; 842  :     Py_DECREF(aslist);

  0016b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR aslist$[rsp]
  00170	e8 00 00 00 00	 call	 _Py_DecRef

; 843  :     return result;

  00175	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN17@deque_redu:

; 844  : }

  0017a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0017e	c3		 ret	 0
deque_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_09BJDNFJPP@deque?$CI?$CFR?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BG@BKGKEILD@deque?$CI?$CFR?0?5maxlen?$DN?$CFzd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_05CLKOKHPD@?$FL?4?4?4?$FN?$AA@		; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	Py_ReprLeave:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	Py_ReprEnter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_repr DD imagerel deque_repr
	DD	imagerel deque_repr+201
	DD	imagerel $unwind$deque_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_repr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_09BJDNFJPP@deque?$CI?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_09BJDNFJPP@deque?$CI?$CFR?$CJ?$AA@ DB 'deque(%R)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BKGKEILD@deque?$CI?$CFR?0?5maxlen?$DN?$CFzd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@BKGKEILD@deque?$CI?$CFR?0?5maxlen?$DN?$CFzd?$CJ?$AA@ DB 'deque('
	DB	'%R, maxlen=%zd)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CLKOKHPD@?$FL?4?4?4?$FN?$AA@
CONST	SEGMENT
??_C@_05CLKOKHPD@?$FL?4?4?4?$FN?$AA@ DB '[...]', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_repr
_TEXT	SEGMENT
i$ = 32
result$ = 40
aslist$ = 48
deque$ = 80
deque_repr PROC						; COMDAT

; 850  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 851  :     PyObject *aslist, *result;
; 852  :     int i;
; 853  : 
; 854  :     i = Py_ReprEnter(deque);

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR deque$[rsp]
  0000e	e8 00 00 00 00	 call	 Py_ReprEnter
  00013	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax

; 855  :     if (i != 0) {

  00017	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  0001c	74 1f		 je	 SHORT $LN5@deque_repr

; 856  :         if (i < 0)

  0001e	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  00023	7d 07		 jge	 SHORT $LN4@deque_repr

; 857  :             return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	e9 98 00 00 00	 jmp	 $LN6@deque_repr
$LN4@deque_repr:

; 858  :         return PyUnicode_FromString("[...]");

  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05CLKOKHPD@?$FL?4?4?4?$FN?$AA@
  00033	e8 00 00 00 00	 call	 PyUnicode_FromString
  00038	e9 87 00 00 00	 jmp	 $LN6@deque_repr
$LN5@deque_repr:

; 859  :     }
; 860  : 
; 861  :     aslist = PySequence_List(deque);

  0003d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR deque$[rsp]
  00042	e8 00 00 00 00	 call	 PySequence_List
  00047	48 89 44 24 30	 mov	 QWORD PTR aslist$[rsp], rax

; 862  :     if (aslist == NULL) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR aslist$[rsp], 0
  00052	75 0e		 jne	 SHORT $LN3@deque_repr

; 863  :         Py_ReprLeave(deque);

  00054	48 8b 4c 24 50	 mov	 rcx, QWORD PTR deque$[rsp]
  00059	e8 00 00 00 00	 call	 Py_ReprLeave

; 864  :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	eb 62		 jmp	 SHORT $LN6@deque_repr
$LN3@deque_repr:

; 865  :     }
; 866  :     if (((dequeobject *)deque)->maxlen != -1)

  00062	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  00067	48 83 b8 88 00
	00 00 ff	 cmp	 QWORD PTR [rax+136], -1
  0006f	74 24		 je	 SHORT $LN2@deque_repr

; 867  : 
; 868  :         result = PyUnicode_FromFormat("deque(%R, maxlen=%zd)",
; 869  :                                       aslist, ((dequeobject *)deque)->maxlen);

  00071	48 8b 44 24 50	 mov	 rax, QWORD PTR deque$[rsp]
  00076	4c 8b 80 88 00
	00 00		 mov	 r8, QWORD PTR [rax+136]
  0007d	48 8b 54 24 30	 mov	 rdx, QWORD PTR aslist$[rsp]
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@BKGKEILD@deque?$CI?$CFR?0?5maxlen?$DN?$CFzd?$CJ?$AA@
  00089	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0008e	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 870  :     else

  00093	eb 16		 jmp	 SHORT $LN1@deque_repr
$LN2@deque_repr:

; 871  :         result = PyUnicode_FromFormat("deque(%R)", aslist);

  00095	48 8b 54 24 30	 mov	 rdx, QWORD PTR aslist$[rsp]
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09BJDNFJPP@deque?$CI?$CFR?$CJ?$AA@
  000a1	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000a6	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$LN1@deque_repr:

; 872  :     Py_DECREF(aslist);

  000ab	48 8b 4c 24 30	 mov	 rcx, QWORD PTR aslist$[rsp]
  000b0	e8 00 00 00 00	 call	 _Py_DecRef

; 873  :     Py_ReprLeave(deque);

  000b5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR deque$[rsp]
  000ba	e8 00 00 00 00	 call	 Py_ReprLeave

; 874  :     return result;

  000bf	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN6@deque_repr:

; 875  : }

  000c4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c8	c3		 ret	 0
deque_repr ENDP
_TEXT	ENDS
EXTRN	__ImageBase:BYTE
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_richcompare DD imagerel deque_richcompare
	DD	imagerel deque_richcompare+1116
	DD	imagerel $unwind$deque_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_richcompare DD 021601H
	DD	0110116H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT deque_richcompare
_TEXT	SEGMENT
y$ = 32
x$ = 40
it1$ = 48
vs$ = 56
it2$ = 64
b$ = 72
ws$ = 80
cmp$ = 88
tv160 = 92
tv162 = 96
tv164 = 100
tv166 = 104
tv168 = 108
tv170 = 112
tv172 = 116
v$ = 144
w$ = 152
op$ = 160
deque_richcompare PROC					; COMDAT

; 879  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 880  :     PyObject *it1=NULL, *it2=NULL, *x, *y;

  00016	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR it1$[rsp], 0
  0001f	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR it2$[rsp], 0

; 881  :     Py_ssize_t vs, ws;
; 882  :     int b, cmp=-1;

  00028	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR cmp$[rsp], -1

; 883  : 
; 884  :     if (!PyObject_TypeCheck(v, &deque_type) ||
; 885  :         !PyObject_TypeCheck(w, &deque_type)) {

  00030	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:deque_type
  00037	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0003f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00043	74 1c		 je	 SHORT $LN43@deque_rich
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:deque_type
  0004c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00054	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00058	e8 00 00 00 00	 call	 PyType_IsSubtype
  0005d	85 c0		 test	 eax, eax
  0005f	74 31		 je	 SHORT $LN44@deque_rich
$LN43@deque_rich:
  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:deque_type
  00068	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  00070	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00074	74 34		 je	 SHORT $LN45@deque_rich
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:deque_type
  0007d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  00085	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00089	e8 00 00 00 00	 call	 PyType_IsSubtype
  0008e	85 c0		 test	 eax, eax
  00090	75 18		 jne	 SHORT $LN45@deque_rich
$LN44@deque_rich:

; 886  :         Py_RETURN_NOTIMPLEMENTED;

  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  00099	e8 00 00 00 00	 call	 _Py_IncRef
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  000a5	e9 91 03 00 00	 jmp	 $LN46@deque_rich
$LN45@deque_rich:

; 887  :     }
; 888  : 
; 889  :     /* Shortcuts */
; 890  :     vs = ((dequeobject *)v)->len;

  000aa	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  000b2	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000b9	48 89 44 24 38	 mov	 QWORD PTR vs$[rsp], rax

; 891  :     ws = ((dequeobject *)w)->len;

  000be	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  000c6	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000cd	48 89 44 24 50	 mov	 QWORD PTR ws$[rsp], rax

; 892  :     if (op == Py_EQ) {

  000d2	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR op$[rsp], 2
  000da	75 4e		 jne	 SHORT $LN42@deque_rich

; 893  :         if (v == w)

  000dc	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  000e4	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR v$[rsp], rax
  000ec	75 18		 jne	 SHORT $LN41@deque_rich

; 894  :             Py_RETURN_TRUE;

  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  000f5	e8 00 00 00 00	 call	 _Py_IncRef
  000fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00101	e9 35 03 00 00	 jmp	 $LN46@deque_rich
$LN41@deque_rich:

; 895  :         if (vs != ws)

  00106	48 8b 44 24 50	 mov	 rax, QWORD PTR ws$[rsp]
  0010b	48 39 44 24 38	 cmp	 QWORD PTR vs$[rsp], rax
  00110	74 18		 je	 SHORT $LN40@deque_rich

; 896  :             Py_RETURN_FALSE;

  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00119	e8 00 00 00 00	 call	 _Py_IncRef
  0011e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00125	e9 11 03 00 00	 jmp	 $LN46@deque_rich
$LN40@deque_rich:
$LN42@deque_rich:

; 897  :     }
; 898  :     if (op == Py_NE) {

  0012a	83 bc 24 a0 00
	00 00 03	 cmp	 DWORD PTR op$[rsp], 3
  00132	75 4e		 jne	 SHORT $LN39@deque_rich

; 899  :         if (v == w)

  00134	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  0013c	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR v$[rsp], rax
  00144	75 18		 jne	 SHORT $LN38@deque_rich

; 900  :             Py_RETURN_FALSE;

  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0014d	e8 00 00 00 00	 call	 _Py_IncRef
  00152	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00159	e9 dd 02 00 00	 jmp	 $LN46@deque_rich
$LN38@deque_rich:

; 901  :         if (vs != ws)

  0015e	48 8b 44 24 50	 mov	 rax, QWORD PTR ws$[rsp]
  00163	48 39 44 24 38	 cmp	 QWORD PTR vs$[rsp], rax
  00168	74 18		 je	 SHORT $LN37@deque_rich

; 902  :             Py_RETURN_TRUE;

  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00171	e8 00 00 00 00	 call	 _Py_IncRef
  00176	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0017d	e9 b9 02 00 00	 jmp	 $LN46@deque_rich
$LN37@deque_rich:
$LN39@deque_rich:

; 903  :     }
; 904  : 
; 905  :     /* Search for the first index where items are different */
; 906  :     it1 = PyObject_GetIter(v);

  00182	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0018a	e8 00 00 00 00	 call	 PyObject_GetIter
  0018f	48 89 44 24 30	 mov	 QWORD PTR it1$[rsp], rax

; 907  :     if (it1 == NULL)

  00194	48 83 7c 24 30
	00		 cmp	 QWORD PTR it1$[rsp], 0
  0019a	75 05		 jne	 SHORT $LN36@deque_rich

; 908  :         goto done;

  0019c	e9 30 02 00 00	 jmp	 $done$21044
$LN36@deque_rich:

; 909  :     it2 = PyObject_GetIter(w);

  001a1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR w$[rsp]
  001a9	e8 00 00 00 00	 call	 PyObject_GetIter
  001ae	48 89 44 24 40	 mov	 QWORD PTR it2$[rsp], rax

; 910  :     if (it2 == NULL)

  001b3	48 83 7c 24 40
	00		 cmp	 QWORD PTR it2$[rsp], 0
  001b9	75 05		 jne	 SHORT $LN35@deque_rich

; 911  :         goto done;

  001bb	e9 11 02 00 00	 jmp	 $done$21044
$LN35@deque_rich:
$LN34@deque_rich:

; 912  :     for (;;) {
; 913  :         x = PyIter_Next(it1);

  001c0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it1$[rsp]
  001c5	e8 00 00 00 00	 call	 PyIter_Next
  001ca	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 914  :         if (x == NULL && PyErr_Occurred())

  001cf	48 83 7c 24 28
	00		 cmp	 QWORD PTR x$[rsp], 0
  001d5	75 0f		 jne	 SHORT $LN32@deque_rich
  001d7	e8 00 00 00 00	 call	 PyErr_Occurred
  001dc	48 85 c0	 test	 rax, rax
  001df	74 05		 je	 SHORT $LN32@deque_rich

; 915  :             goto done;

  001e1	e9 eb 01 00 00	 jmp	 $done$21044
$LN32@deque_rich:

; 916  :         y = PyIter_Next(it2);

  001e6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it2$[rsp]
  001eb	e8 00 00 00 00	 call	 PyIter_Next
  001f0	48 89 44 24 20	 mov	 QWORD PTR y$[rsp], rax

; 917  :         if (x == NULL || y == NULL)

  001f5	48 83 7c 24 28
	00		 cmp	 QWORD PTR x$[rsp], 0
  001fb	74 08		 je	 SHORT $LN30@deque_rich
  001fd	48 83 7c 24 20
	00		 cmp	 QWORD PTR y$[rsp], 0
  00203	75 02		 jne	 SHORT $LN31@deque_rich
$LN30@deque_rich:

; 918  :             break;

  00205	eb 79		 jmp	 SHORT $LN33@deque_rich
$LN31@deque_rich:

; 919  :         b = PyObject_RichCompareBool(x, y, Py_EQ);

  00207	41 b8 02 00 00
	00		 mov	 r8d, 2
  0020d	48 8b 54 24 20	 mov	 rdx, QWORD PTR y$[rsp]
  00212	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  00217	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0021c	89 44 24 48	 mov	 DWORD PTR b$[rsp], eax

; 920  :         if (b == 0) {

  00220	83 7c 24 48 00	 cmp	 DWORD PTR b$[rsp], 0
  00225	75 34		 jne	 SHORT $LN29@deque_rich

; 921  :             cmp = PyObject_RichCompareBool(x, y, op);

  00227	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR op$[rsp]
  0022f	48 8b 54 24 20	 mov	 rdx, QWORD PTR y$[rsp]
  00234	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  00239	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0023e	89 44 24 58	 mov	 DWORD PTR cmp$[rsp], eax

; 922  :             Py_DECREF(x);

  00242	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  00247	e8 00 00 00 00	 call	 _Py_DecRef

; 923  :             Py_DECREF(y);

  0024c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR y$[rsp]
  00251	e8 00 00 00 00	 call	 _Py_DecRef

; 924  :             goto done;

  00256	e9 76 01 00 00	 jmp	 $done$21044
$LN29@deque_rich:

; 925  :         }
; 926  :         Py_DECREF(x);

  0025b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  00260	e8 00 00 00 00	 call	 _Py_DecRef

; 927  :         Py_DECREF(y);

  00265	48 8b 4c 24 20	 mov	 rcx, QWORD PTR y$[rsp]
  0026a	e8 00 00 00 00	 call	 _Py_DecRef

; 928  :         if (b == -1)

  0026f	83 7c 24 48 ff	 cmp	 DWORD PTR b$[rsp], -1
  00274	75 05		 jne	 SHORT $LN28@deque_rich

; 929  :             goto done;

  00276	e9 56 01 00 00	 jmp	 $done$21044
$LN28@deque_rich:

; 930  :     }

  0027b	e9 40 ff ff ff	 jmp	 $LN34@deque_rich
$LN33@deque_rich:
$LN27@deque_rich:

; 931  :     /* We reached the end of one deque or both */
; 932  :     Py_XDECREF(x);

  00280	48 83 7c 24 28
	00		 cmp	 QWORD PTR x$[rsp], 0
  00286	74 0a		 je	 SHORT $LN24@deque_rich
  00288	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  0028d	e8 00 00 00 00	 call	 _Py_DecRef
$LN24@deque_rich:
  00292	33 c0		 xor	 eax, eax
  00294	85 c0		 test	 eax, eax
  00296	75 e8		 jne	 SHORT $LN27@deque_rich
$LN23@deque_rich:

; 933  :     Py_XDECREF(y);

  00298	48 83 7c 24 20
	00		 cmp	 QWORD PTR y$[rsp], 0
  0029e	74 0a		 je	 SHORT $LN20@deque_rich
  002a0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR y$[rsp]
  002a5	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@deque_rich:
  002aa	33 c0		 xor	 eax, eax
  002ac	85 c0		 test	 eax, eax
  002ae	75 e8		 jne	 SHORT $LN23@deque_rich

; 934  :     if (PyErr_Occurred())

  002b0	e8 00 00 00 00	 call	 PyErr_Occurred
  002b5	48 85 c0	 test	 rax, rax
  002b8	74 05		 je	 SHORT $LN19@deque_rich

; 935  :         goto done;

  002ba	e9 12 01 00 00	 jmp	 $done$21044
$LN19@deque_rich:

; 936  :     switch (op) {

  002bf	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR op$[rsp]
  002c6	89 44 24 5c	 mov	 DWORD PTR tv160[rsp], eax
  002ca	83 7c 24 5c 05	 cmp	 DWORD PTR tv160[rsp], 5
  002cf	0f 87 fc 00 00
	00		 ja	 $LN17@deque_rich
  002d5	48 63 44 24 5c	 movsxd	 rax, DWORD PTR tv160[rsp]
  002da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  002e1	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN60@deque_rich[rcx+rax*4]
  002e8	48 03 c1	 add	 rax, rcx
  002eb	ff e0		 jmp	 rax
$LN16@deque_rich:

; 937  :     case Py_LT: cmp = y != NULL; break;  /* if w was longer */

  002ed	48 83 7c 24 20
	00		 cmp	 QWORD PTR y$[rsp], 0
  002f3	74 0a		 je	 SHORT $LN48@deque_rich
  002f5	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv162[rsp], 1
  002fd	eb 08		 jmp	 SHORT $LN49@deque_rich
$LN48@deque_rich:
  002ff	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv162[rsp], 0
$LN49@deque_rich:
  00307	8b 44 24 60	 mov	 eax, DWORD PTR tv162[rsp]
  0030b	89 44 24 58	 mov	 DWORD PTR cmp$[rsp], eax
  0030f	e9 bd 00 00 00	 jmp	 $LN17@deque_rich
$LN15@deque_rich:

; 938  :     case Py_LE: cmp = x == NULL; break;  /* if v was not longer */

  00314	48 83 7c 24 28
	00		 cmp	 QWORD PTR x$[rsp], 0
  0031a	75 0a		 jne	 SHORT $LN50@deque_rich
  0031c	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv164[rsp], 1
  00324	eb 08		 jmp	 SHORT $LN51@deque_rich
$LN50@deque_rich:
  00326	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv164[rsp], 0
$LN51@deque_rich:
  0032e	8b 44 24 64	 mov	 eax, DWORD PTR tv164[rsp]
  00332	89 44 24 58	 mov	 DWORD PTR cmp$[rsp], eax
  00336	e9 96 00 00 00	 jmp	 $LN17@deque_rich
$LN14@deque_rich:

; 939  :     case Py_EQ: cmp = x == y;    break;  /* if we reached the end of both */

  0033b	48 8b 44 24 20	 mov	 rax, QWORD PTR y$[rsp]
  00340	48 39 44 24 28	 cmp	 QWORD PTR x$[rsp], rax
  00345	75 0a		 jne	 SHORT $LN52@deque_rich
  00347	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv166[rsp], 1
  0034f	eb 08		 jmp	 SHORT $LN53@deque_rich
$LN52@deque_rich:
  00351	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv166[rsp], 0
$LN53@deque_rich:
  00359	8b 44 24 68	 mov	 eax, DWORD PTR tv166[rsp]
  0035d	89 44 24 58	 mov	 DWORD PTR cmp$[rsp], eax
  00361	eb 6e		 jmp	 SHORT $LN17@deque_rich
$LN13@deque_rich:

; 940  :     case Py_NE: cmp = x != y;    break;  /* if one deque continues */

  00363	48 8b 44 24 20	 mov	 rax, QWORD PTR y$[rsp]
  00368	48 39 44 24 28	 cmp	 QWORD PTR x$[rsp], rax
  0036d	74 0a		 je	 SHORT $LN54@deque_rich
  0036f	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv168[rsp], 1
  00377	eb 08		 jmp	 SHORT $LN55@deque_rich
$LN54@deque_rich:
  00379	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv168[rsp], 0
$LN55@deque_rich:
  00381	8b 44 24 6c	 mov	 eax, DWORD PTR tv168[rsp]
  00385	89 44 24 58	 mov	 DWORD PTR cmp$[rsp], eax
  00389	eb 46		 jmp	 SHORT $LN17@deque_rich
$LN12@deque_rich:

; 941  :     case Py_GT: cmp = x != NULL; break;  /* if v was longer */

  0038b	48 83 7c 24 28
	00		 cmp	 QWORD PTR x$[rsp], 0
  00391	74 0a		 je	 SHORT $LN56@deque_rich
  00393	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv170[rsp], 1
  0039b	eb 08		 jmp	 SHORT $LN57@deque_rich
$LN56@deque_rich:
  0039d	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv170[rsp], 0
$LN57@deque_rich:
  003a5	8b 44 24 70	 mov	 eax, DWORD PTR tv170[rsp]
  003a9	89 44 24 58	 mov	 DWORD PTR cmp$[rsp], eax
  003ad	eb 22		 jmp	 SHORT $LN17@deque_rich
$LN11@deque_rich:

; 942  :     case Py_GE: cmp = y == NULL; break;  /* if w was not longer */

  003af	48 83 7c 24 20
	00		 cmp	 QWORD PTR y$[rsp], 0
  003b5	75 0a		 jne	 SHORT $LN58@deque_rich
  003b7	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv172[rsp], 1
  003bf	eb 08		 jmp	 SHORT $LN59@deque_rich
$LN58@deque_rich:
  003c1	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv172[rsp], 0
$LN59@deque_rich:
  003c9	8b 44 24 74	 mov	 eax, DWORD PTR tv172[rsp]
  003cd	89 44 24 58	 mov	 DWORD PTR cmp$[rsp], eax
$LN17@deque_rich:
$done$21044:
$LN10@deque_rich:

; 943  :     }
; 944  : 
; 945  : done:
; 946  :     Py_XDECREF(it1);

  003d1	48 83 7c 24 30
	00		 cmp	 QWORD PTR it1$[rsp], 0
  003d7	74 0a		 je	 SHORT $LN7@deque_rich
  003d9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it1$[rsp]
  003de	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@deque_rich:
  003e3	33 c0		 xor	 eax, eax
  003e5	85 c0		 test	 eax, eax
  003e7	75 e8		 jne	 SHORT $LN10@deque_rich
$LN6@deque_rich:

; 947  :     Py_XDECREF(it2);

  003e9	48 83 7c 24 40
	00		 cmp	 QWORD PTR it2$[rsp], 0
  003ef	74 0a		 je	 SHORT $LN3@deque_rich
  003f1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it2$[rsp]
  003f6	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@deque_rich:
  003fb	33 c0		 xor	 eax, eax
  003fd	85 c0		 test	 eax, eax
  003ff	75 e8		 jne	 SHORT $LN6@deque_rich

; 948  :     if (cmp == 1)

  00401	83 7c 24 58 01	 cmp	 DWORD PTR cmp$[rsp], 1
  00406	75 15		 jne	 SHORT $LN2@deque_rich

; 949  :         Py_RETURN_TRUE;

  00408	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  0040f	e8 00 00 00 00	 call	 _Py_IncRef
  00414	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0041b	eb 1e		 jmp	 SHORT $LN46@deque_rich
$LN2@deque_rich:

; 950  :     if (cmp == 0)

  0041d	83 7c 24 58 00	 cmp	 DWORD PTR cmp$[rsp], 0
  00422	75 15		 jne	 SHORT $LN1@deque_rich

; 951  :         Py_RETURN_FALSE;

  00424	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0042b	e8 00 00 00 00	 call	 _Py_IncRef
  00430	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00437	eb 02		 jmp	 SHORT $LN46@deque_rich
$LN1@deque_rich:

; 952  :     return NULL;

  00439	33 c0		 xor	 eax, eax
$LN46@deque_rich:

; 953  : }

  0043b	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00442	c3		 ret	 0
  00443	90		 npad	 1
$LN60@deque_rich:
  00444	00 00 00 00	 DD	 $LN16@deque_rich
  00448	00 00 00 00	 DD	 $LN15@deque_rich
  0044c	00 00 00 00	 DD	 $LN14@deque_rich
  00450	00 00 00 00	 DD	 $LN13@deque_rich
  00454	00 00 00 00	 DD	 $LN12@deque_rich
  00458	00 00 00 00	 DD	 $LN11@deque_rich
deque_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@OLFDKACG@maxlen?5must?5be?5non?9negative?$AA@ ; `string'
PUBLIC	??_C@_09FGABFDMF@?$HMOO?3deque?$AA@		; `string'
PUBLIC	??_C@_08DCHCEAJP@iterable?$AA@			; `string'
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_init DD imagerel deque_init
	DD	imagerel deque_init+338
	DD	imagerel $unwind$deque_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_init DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0BM@OLFDKACG@maxlen?5must?5be?5non?9negative?$AA@
CONST	SEGMENT
??_C@_0BM@OLFDKACG@maxlen?5must?5be?5non?9negative?$AA@ DB 'maxlen must b'
	DB	'e non-negative', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09FGABFDMF@?$HMOO?3deque?$AA@
CONST	SEGMENT
??_C@_09FGABFDMF@?$HMOO?3deque?$AA@ DB '|OO:deque', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCHCEAJP@iterable?$AA@
CONST	SEGMENT
??_C@_08DCHCEAJP@iterable?$AA@ DB 'iterable', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_init
_TEXT	SEGMENT
kwlist$ = 48
maxlenobj$ = 72
maxlen$ = 80
iterable$ = 88
rv$21131 = 96
deque$ = 128
args$ = 136
kwdargs$ = 144
deque_init PROC						; COMDAT

; 957  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 958  :     PyObject *iterable = NULL;

  00013	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR iterable$[rsp], 0

; 959  :     PyObject *maxlenobj = NULL;

  0001c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR maxlenobj$[rsp], 0

; 960  :     Py_ssize_t maxlen = -1;

  00025	48 c7 44 24 50
	ff ff ff ff	 mov	 QWORD PTR maxlen$[rsp], -1

; 961  :     char *kwlist[] = {"iterable", "maxlen", 0};

  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08DCHCEAJP@iterable?$AA@
  00035	48 89 44 24 30	 mov	 QWORD PTR kwlist$[rsp], rax
  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06EGGKHNAM@maxlen?$AA@
  00041	48 89 44 24 38	 mov	 QWORD PTR kwlist$[rsp+8], rax
  00046	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR kwlist$[rsp+16], 0

; 962  : 
; 963  :     if (!PyArg_ParseTupleAndKeywords(args, kwdargs, "|OO:deque", kwlist, &iterable, &maxlenobj))

  0004f	48 8d 44 24 48	 lea	 rax, QWORD PTR maxlenobj$[rsp]
  00054	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00059	48 8d 44 24 58	 lea	 rax, QWORD PTR iterable$[rsp]
  0005e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00063	4c 8d 4c 24 30	 lea	 r9, QWORD PTR kwlist$[rsp]
  00068	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09FGABFDMF@?$HMOO?3deque?$AA@
  0006f	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR kwdargs$[rsp]
  00077	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0007f	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00084	85 c0		 test	 eax, eax
  00086	75 0a		 jne	 SHORT $LN6@deque_init

; 964  :         return -1;

  00088	b8 ff ff ff ff	 mov	 eax, -1
  0008d	e9 bb 00 00 00	 jmp	 $LN7@deque_init
$LN6@deque_init:

; 965  :     if (maxlenobj != NULL && maxlenobj != Py_None) {

  00092	48 83 7c 24 48
	00		 cmp	 QWORD PTR maxlenobj$[rsp], 0
  00098	74 58		 je	 SHORT $LN5@deque_init
  0009a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000a1	48 39 44 24 48	 cmp	 QWORD PTR maxlenobj$[rsp], rax
  000a6	74 4a		 je	 SHORT $LN5@deque_init

; 966  :         maxlen = PyLong_AsSsize_t(maxlenobj);

  000a8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR maxlenobj$[rsp]
  000ad	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  000b2	48 89 44 24 50	 mov	 QWORD PTR maxlen$[rsp], rax

; 967  :         if (maxlen == -1 && PyErr_Occurred())

  000b7	48 83 7c 24 50
	ff		 cmp	 QWORD PTR maxlen$[rsp], -1
  000bd	75 11		 jne	 SHORT $LN4@deque_init
  000bf	e8 00 00 00 00	 call	 PyErr_Occurred
  000c4	48 85 c0	 test	 rax, rax
  000c7	74 07		 je	 SHORT $LN4@deque_init

; 968  :             return -1;

  000c9	b8 ff ff ff ff	 mov	 eax, -1
  000ce	eb 7d		 jmp	 SHORT $LN7@deque_init
$LN4@deque_init:

; 969  :         if (maxlen < 0) {

  000d0	48 83 7c 24 50
	00		 cmp	 QWORD PTR maxlen$[rsp], 0
  000d6	7d 1a		 jge	 SHORT $LN3@deque_init

; 970  :             PyErr_SetString(PyExc_ValueError, "maxlen must be non-negative");

  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@OLFDKACG@maxlen?5must?5be?5non?9negative?$AA@
  000df	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000e6	e8 00 00 00 00	 call	 PyErr_SetString

; 971  :             return -1;

  000eb	b8 ff ff ff ff	 mov	 eax, -1
  000f0	eb 5b		 jmp	 SHORT $LN7@deque_init
$LN3@deque_init:
$LN5@deque_init:

; 972  :         }
; 973  :     }
; 974  :     deque->maxlen = maxlen;

  000f2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR deque$[rsp]
  000fa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR maxlen$[rsp]
  000ff	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 975  :     deque_clear(deque);

  00106	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR deque$[rsp]
  0010e	e8 00 00 00 00	 call	 deque_clear

; 976  :     if (iterable != NULL) {

  00113	48 83 7c 24 58
	00		 cmp	 QWORD PTR iterable$[rsp], 0
  00119	74 30		 je	 SHORT $LN2@deque_init

; 977  :         PyObject *rv = deque_extend(deque, iterable);

  0011b	48 8b 54 24 58	 mov	 rdx, QWORD PTR iterable$[rsp]
  00120	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR deque$[rsp]
  00128	e8 00 00 00 00	 call	 deque_extend
  0012d	48 89 44 24 60	 mov	 QWORD PTR rv$21131[rsp], rax

; 978  :         if (rv == NULL)

  00132	48 83 7c 24 60
	00		 cmp	 QWORD PTR rv$21131[rsp], 0
  00138	75 07		 jne	 SHORT $LN1@deque_init

; 979  :             return -1;

  0013a	b8 ff ff ff ff	 mov	 eax, -1
  0013f	eb 0c		 jmp	 SHORT $LN7@deque_init
$LN1@deque_init:

; 980  :         Py_DECREF(rv);

  00141	48 8b 4c 24 60	 mov	 rcx, QWORD PTR rv$21131[rsp]
  00146	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@deque_init:

; 981  :     }
; 982  :     return 0;

  0014b	33 c0		 xor	 eax, eax
$LN7@deque_init:

; 983  : }

  0014d	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00151	c3		 ret	 0
deque_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_1KC@CILHPKIB@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?9?$AA?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_sizeof DD imagerel deque_sizeof
	DD	imagerel deque_sizeof+187
	DD	imagerel $unwind$deque_sizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_sizeof DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1KC@CILHPKIB@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1KC@CILHPKIB@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?9?$AA?5@ DB 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'x', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'd', 00H
	DB	'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H, 'l'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, '-', 00H, ' ', 00H, '1', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '(', 00H, 'b', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, 's', 00H, ' ', 00H, '-', 00H
	DB	' ', 00H, '1', 00H, ')', 00H, ' ', 00H, '*', 00H, ' ', 00H, 'B'
	DB	00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, 'L', 00H, 'E', 00H
	DB	'N', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'q'
	DB	00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H, 'r', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'x', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT deque_sizeof
_TEXT	SEGMENT
res$ = 32
blocks$ = 40
deque$ = 64
unused$ = 72
deque_sizeof PROC					; COMDAT

; 987  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 988  :     Py_ssize_t res;
; 989  :     Py_ssize_t blocks;
; 990  : 
; 991  :     res = sizeof(dequeobject);

  0000e	48 c7 44 24 20
	a0 00 00 00	 mov	 QWORD PTR res$[rsp], 160 ; 000000a0H

; 992  :     blocks = (deque->leftindex + deque->len + BLOCKLEN - 1) / BLOCKLEN;

  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  0001c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00025	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0002c	48 8d 44 08 3d	 lea	 rax, QWORD PTR [rax+rcx+61]
  00031	48 99		 cdq
  00033	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00038	48 f7 f9	 idiv	 rcx
  0003b	48 89 44 24 28	 mov	 QWORD PTR blocks$[rsp], rax

; 993  :     assert(deque->leftindex + deque->len - 1 ==
; 994  :            (blocks - 1) * BLOCKLEN + deque->rightindex);

  00040	48 8b 44 24 40	 mov	 rax, QWORD PTR deque$[rsp]
  00045	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  0004e	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00055	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR blocks$[rsp]
  0005f	48 ff c9	 dec	 rcx
  00062	48 6b c9 3e	 imul	 rcx, 62			; 0000003eH
  00066	48 8b 54 24 40	 mov	 rdx, QWORD PTR deque$[rsp]
  0006b	48 03 4a 78	 add	 rcx, QWORD PTR [rdx+120]
  0006f	48 3b c1	 cmp	 rax, rcx
  00072	74 1c		 je	 SHORT $LN3@deque_size
  00074	41 b8 e2 03 00
	00		 mov	 r8d, 994		; 000003e2H
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KC@CILHPKIB@?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AA?5?$AA?9?$AA?5@
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008e	33 c0		 xor	 eax, eax
$LN3@deque_size:

; 995  :     res += blocks * sizeof(block);

  00090	48 8b 44 24 28	 mov	 rax, QWORD PTR blocks$[rsp]
  00095	48 69 c0 00 02
	00 00		 imul	 rax, 512		; 00000200H
  0009c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000a1	48 03 c8	 add	 rcx, rax
  000a4	48 8b c1	 mov	 rax, rcx
  000a7	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 996  :     return PyLong_FromSsize_t(res);

  000ac	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000b1	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 997  : }

  000b6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ba	c3		 ret	 0
deque_sizeof ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_get_maxlen DD imagerel deque_get_maxlen
	DD	imagerel deque_get_maxlen+67
	DD	imagerel $unwind$deque_get_maxlen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_get_maxlen DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT deque_get_maxlen
_TEXT	SEGMENT
deque$ = 48
deque_get_maxlen PROC					; COMDAT

; 1004 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1005 :     if (deque->maxlen == -1)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR deque$[rsp]
  0000e	48 83 b8 88 00
	00 00 ff	 cmp	 QWORD PTR [rax+136], -1
  00016	75 15		 jne	 SHORT $LN1@deque_get_

; 1006 :         Py_RETURN_NONE;

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001f	e8 00 00 00 00	 call	 _Py_IncRef
  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0002b	eb 11		 jmp	 SHORT $LN2@deque_get_
$LN1@deque_get_:

; 1007 :     return PyLong_FromSsize_t(deque->maxlen);

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR deque$[rsp]
  00032	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00039	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN2@deque_get_:

; 1008 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
deque_get_maxlen ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_Track:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_iter DD imagerel deque_iter
	DD	imagerel deque_iter+199
	DD	imagerel $unwind$deque_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_iter DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT deque_iter
_TEXT	SEGMENT
it$ = 32
tv70 = 40
deque$ = 64
deque_iter PROC						; COMDAT

; 1135 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1136 :     dequeiterobject *it;
; 1137 : 
; 1138 :     it = PyObject_GC_New(dequeiterobject, &dequeiter_type);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 13		 je	 SHORT $LN4@deque_iter
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequeiter_type
  00019	e8 00 00 00 00	 call	 _PxObject_New
  0001e	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00023	eb 11		 jmp	 SHORT $LN5@deque_iter
$LN4@deque_iter:
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequeiter_type
  0002c	e8 00 00 00 00	 call	 _PyObject_GC_New
  00031	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
$LN5@deque_iter:
  00036	48 8b 44 24 28	 mov	 rax, QWORD PTR tv70[rsp]
  0003b	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 1139 :     if (it == NULL)

  00040	48 83 7c 24 20
	00		 cmp	 QWORD PTR it$[rsp], 0
  00046	75 04		 jne	 SHORT $LN1@deque_iter

; 1140 :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	eb 76		 jmp	 SHORT $LN2@deque_iter
$LN1@deque_iter:

; 1141 :     it->b = deque->leftblock;

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00051	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00056	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0005a	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 1142 :     it->index = deque->leftindex;

  0005e	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00063	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00068	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0006c	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1143 :     Py_INCREF(deque);

  00070	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00075	e8 00 00 00 00	 call	 _Py_IncRef

; 1144 :     it->deque = deque;

  0007a	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00084	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1145 :     it->state = deque->state;

  00088	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  0008d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00092	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [rcx+144]
  00098	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 1146 :     it->counter = deque->len;

  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  000a0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000a5	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  000ac	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 1147 :     PyObject_GC_Track(it);

  000b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  000b8	e8 00 00 00 00	 call	 PyObject_GC_Track

; 1148 :     return (PyObject *)it;

  000bd	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
$LN2@deque_iter:

; 1149 : }

  000c2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c6	c3		 ret	 0
deque_iter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@PIIJKHEC@dequeiter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dequeiter_traverse DD imagerel dequeiter_traverse
	DD	imagerel dequeiter_traverse+116
	DD	imagerel $unwind$dequeiter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequeiter_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BD@PIIJKHEC@dequeiter_traverse?$AA@
CONST	SEGMENT
??_C@_0BD@PIIJKHEC@dequeiter_traverse?$AA@ DB 'dequeiter_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dequeiter_traverse
_TEXT	SEGMENT
vret$21263 = 32
dio$ = 64
visit$ = 72
arg$ = 80
dequeiter_traverse PROC					; COMDAT

; 1153 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@dequeiter_:

; 1154 :     Py_VISIT(dio->deque);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@dequeiter_
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 82 04 00
	00		 mov	 r8d, 1154		; 00000482H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@PIIJKHEC@dequeiter_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@dequeiter_:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR dio$[rsp]
  0003d	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00042	74 23		 je	 SHORT $LN2@dequeiter_
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR dio$[rsp]
  0004e	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21263[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21263[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@dequeiter_
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21263[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@dequeiter_
$LN1@dequeiter_:
$LN2@dequeiter_:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@dequeiter_

; 1155 :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@dequeiter_:

; 1156 : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
dequeiter_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dequeiter_dealloc DD imagerel dequeiter_dealloc
	DD	imagerel dequeiter_dealloc+56
	DD	imagerel $unwind$dequeiter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequeiter_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dequeiter_dealloc
_TEXT	SEGMENT
dio$ = 48
dequeiter_dealloc PROC					; COMDAT

; 1160 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@dequeiter_@2:

; 1161 :     Py_XDECREF(dio->deque);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR dio$[rsp]
  0000e	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00013	74 0e		 je	 SHORT $LN1@dequeiter_@2
  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR dio$[rsp]
  0001a	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0001e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@dequeiter_@2:
  00023	33 c0		 xor	 eax, eax
  00025	85 c0		 test	 eax, eax
  00027	75 e0		 jne	 SHORT $LN4@dequeiter_@2

; 1162 :     PyObject_GC_Del(dio);

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dio$[rsp]
  0002e	e8 00 00 00 00	 call	 PyObject_GC_Del

; 1163 : }

  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00037	c3		 ret	 0
dequeiter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DC@BOAOJFAD@?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IO@LGECNGNM@?$AA?$CB?$AA?$CI?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AAt?$AA?9?$AA?$DO?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dequeiter_next DD imagerel dequeiter_next
	DD	imagerel dequeiter_next+376
	DD	imagerel $unwind$dequeiter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequeiter_next DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1DC@BOAOJFAD@?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@BOAOJFAD@?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, '-', 00H, '>', 00H, 'b', 00H, '-', 00H, '>', 00H
	DB	'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'l', 00H, 'i'
	DB	00H, 'n', 00H, 'k', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IO@LGECNGNM@?$AA?$CB?$AA?$CI?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AAt?$AA?9?$AA?$DO?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk@
CONST	SEGMENT
??_C@_1IO@LGECNGNM@?$AA?$CB?$AA?$CI?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AAt?$AA?9?$AA?$DO?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk@ DB '!'
	DB	00H, '(', 00H, 'i', 00H, 't', 00H, '-', 00H, '>', 00H, 'b', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'i', 00H, 't', 00H, '-'
	DB	00H, '>', 00H, 'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't'
	DB	00H, 'b', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, 't', 00H, '-', 00H, '>'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, 'i', 00H, 't', 00H, '-', 00H, '>', 00H, 'd'
	DB	00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'i', 00H, 'n'
	DB	00H, 'd', 00H, 'e', 00H, 'x', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dequeiter_next
_TEXT	SEGMENT
item$ = 32
it$ = 64
dequeiter_next PROC					; COMDAT

; 1167 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1168 :     PyObject *item;
; 1169 : 
; 1170 :     if (it->deque->state != it->state) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0000e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  00017	8b 49 78	 mov	 ecx, DWORD PTR [rcx+120]
  0001a	39 88 90 00 00
	00		 cmp	 DWORD PTR [rax+144], ecx
  00020	74 2a		 je	 SHORT $LN3@dequeiter_@3

; 1171 :         it->counter = 0;

  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00027	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1172 :         PyErr_SetString(PyExc_RuntimeError,
; 1173 :                         "deque mutated during iteration");

  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@
  00039	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00040	e8 00 00 00 00	 call	 PyErr_SetString

; 1174 :         return NULL;

  00045	33 c0		 xor	 eax, eax
  00047	e9 27 01 00 00	 jmp	 $LN4@dequeiter_@3
$LN3@dequeiter_@3:

; 1175 :     }
; 1176 :     if (it->counter == 0)

  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00051	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00059	75 07		 jne	 SHORT $LN2@dequeiter_@3

; 1177 :         return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 11 01 00 00	 jmp	 $LN4@dequeiter_@3
$LN2@dequeiter_@3:

; 1178 :     assert (!(it->b == it->deque->rightblock &&
; 1179 :               it->index > it->deque->rightindex));

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00067	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  00070	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00074	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00078	75 34		 jne	 SHORT $LN6@dequeiter_@3
  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0007f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00083	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  00088	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0008c	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00090	7e 1c		 jle	 SHORT $LN6@dequeiter_@3
  00092	41 b8 9b 04 00
	00		 mov	 r8d, 1179		; 0000049bH
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1IO@LGECNGNM@?$AA?$CB?$AA?$CI?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AAt?$AA?9?$AA?$DO?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk@
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ac	33 c0		 xor	 eax, eax
$LN6@dequeiter_@3:

; 1180 : 
; 1181 :     item = it->b->data[it->index];

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  000b3	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  000bc	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000c0	48 8b 44 c8 10	 mov	 rax, QWORD PTR [rax+rcx*8+16]
  000c5	48 89 44 24 20	 mov	 QWORD PTR item$[rsp], rax

; 1182 :     it->index++;

  000ca	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  000cf	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000d3	48 ff c0	 inc	 rax
  000d6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  000db	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 1183 :     it->counter--;

  000df	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  000e4	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000eb	48 ff c8	 dec	 rax
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  000f3	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 1184 :     if (it->index == BLOCKLEN && it->counter > 0) {

  000fa	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  000ff	48 83 78 60 3e	 cmp	 QWORD PTR [rax+96], 62	; 0000003eH
  00104	75 5e		 jne	 SHORT $LN1@dequeiter_@3
  00106	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0010b	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00113	7e 4f		 jle	 SHORT $LN1@dequeiter_@3

; 1185 :         assert (it->b->rightlink != NULL);

  00115	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0011a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0011e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00123	75 1c		 jne	 SHORT $LN7@dequeiter_@3
  00125	41 b8 a1 04 00
	00		 mov	 r8d, 1185		; 000004a1H
  0012b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BOAOJFAD@?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?9?$AA?$DO?$AAr?$AAi?$AAg?$AAh?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00139	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0013f	33 c0		 xor	 eax, eax
$LN7@dequeiter_@3:

; 1186 :         it->b = it->b->rightlink;

  00141	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00146	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0014a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  0014f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00153	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 1187 :         it->index = 0;

  00157	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0015c	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
$LN1@dequeiter_@3:

; 1188 :     }
; 1189 :     Py_INCREF(item);

  00164	48 8b 4c 24 20	 mov	 rcx, QWORD PTR item$[rsp]
  00169	e8 00 00 00 00	 call	 _Py_IncRef

; 1190 :     return item;

  0016e	48 8b 44 24 20	 mov	 rax, QWORD PTR item$[rsp]
$LN4@dequeiter_@3:

; 1191 : }

  00173	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00177	c3		 ret	 0
dequeiter_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@HDFDEIAC@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAd?$AAe?$AAq?$AAu?$AAe?$AAi?$AAt?$AAe?$AAr?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_04FNGFNIDM@O?$CB?$HMn?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dequeiter_new DD imagerel dequeiter_new
	DD	imagerel dequeiter_new+263
	DD	imagerel $unwind$dequeiter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequeiter_new DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_1DA@HDFDEIAC@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAd?$AAe?$AAq?$AAu?$AAe?$AAi?$AAt?$AAe?$AAr?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@HDFDEIAC@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAd?$AAe?$AAq?$AAu?$AAe?$AAi?$AAt?$AAe?$AAr?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ DB 't'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '&', 00H, 'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNGFNIDM@O?$CB?$HMn?$AA@
CONST	SEGMENT
??_C@_04FNGFNIDM@O?$CB?$HMn?$AA@ DB 'O!|n', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dequeiter_new
_TEXT	SEGMENT
it$ = 48
i$ = 56
index$ = 64
deque$ = 72
item$21315 = 80
type$ = 112
args$ = 120
kwds$ = 128
dequeiter_new PROC					; COMDAT

; 1195 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1196 :     Py_ssize_t i, index=0;

  00013	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR index$[rsp], 0

; 1197 :     PyObject *deque;
; 1198 :     dequeiterobject *it;
; 1199 :     if (!PyArg_ParseTuple(args, "O!|n", &deque_type, &deque, &index))

  0001c	48 8d 44 24 40	 lea	 rax, QWORD PTR index$[rsp]
  00021	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00026	4c 8d 4c 24 48	 lea	 r9, QWORD PTR deque$[rsp]
  0002b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:deque_type
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FNGFNIDM@O?$CB?$HMn?$AA@
  00039	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0003e	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00043	85 c0		 test	 eax, eax
  00045	75 07		 jne	 SHORT $LN9@dequeiter_@4

; 1200 :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	e9 b4 00 00 00	 jmp	 $LN10@dequeiter_@4
$LN9@dequeiter_@4:

; 1201 :     assert(type == &dequeiter_type);

  0004e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:dequeiter_type
  00055	48 39 44 24 70	 cmp	 QWORD PTR type$[rsp], rax
  0005a	74 1c		 je	 SHORT $LN12@dequeiter_@4
  0005c	41 b8 b1 04 00
	00		 mov	 r8d, 1201		; 000004b1H
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@HDFDEIAC@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAd?$AAe?$AAq?$AAu?$AAe?$AAi?$AAt?$AAe?$AAr?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00076	33 c0		 xor	 eax, eax
$LN12@dequeiter_@4:

; 1202 : 
; 1203 :     it = (dequeiterobject*)deque_iter((dequeobject *)deque);

  00078	48 8b 4c 24 48	 mov	 rcx, QWORD PTR deque$[rsp]
  0007d	e8 00 00 00 00	 call	 deque_iter
  00082	48 89 44 24 30	 mov	 QWORD PTR it$[rsp], rax

; 1204 :     if (!it)

  00087	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  0008d	75 04		 jne	 SHORT $LN8@dequeiter_@4

; 1205 :         return NULL;

  0008f	33 c0		 xor	 eax, eax
  00091	eb 6f		 jmp	 SHORT $LN10@dequeiter_@4
$LN8@dequeiter_@4:

; 1206 :     /* consume items from the queue */
; 1207 :     for(i=0; i<index; i++) {

  00093	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0009c	eb 0d		 jmp	 SHORT $LN7@dequeiter_@4
$LN6@dequeiter_@4:
  0009e	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  000a3	48 ff c0	 inc	 rax
  000a6	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN7@dequeiter_@4:
  000ab	48 8b 44 24 40	 mov	 rax, QWORD PTR index$[rsp]
  000b0	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  000b5	7d 46		 jge	 SHORT $LN5@dequeiter_@4

; 1208 :         PyObject *item = dequeiter_next(it);

  000b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  000bc	e8 00 00 00 00	 call	 dequeiter_next
  000c1	48 89 44 24 50	 mov	 QWORD PTR item$21315[rsp], rax

; 1209 :         if (item) {

  000c6	48 83 7c 24 50
	00		 cmp	 QWORD PTR item$21315[rsp], 0
  000cc	74 0c		 je	 SHORT $LN4@dequeiter_@4

; 1210 :             Py_DECREF(item);

  000ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$21315[rsp]
  000d3	e8 00 00 00 00	 call	 _Py_DecRef

; 1211 :         } else {

  000d8	eb 21		 jmp	 SHORT $LN3@dequeiter_@4
$LN4@dequeiter_@4:

; 1212 :             if (it->counter) {

  000da	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  000df	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000e7	74 10		 je	 SHORT $LN2@dequeiter_@4

; 1213 :                 Py_DECREF(it);

  000e9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  000ee	e8 00 00 00 00	 call	 _Py_DecRef

; 1214 :                 return NULL;

  000f3	33 c0		 xor	 eax, eax
  000f5	eb 0b		 jmp	 SHORT $LN10@dequeiter_@4

; 1215 :             } else

  000f7	eb 02		 jmp	 SHORT $LN1@dequeiter_@4
$LN2@dequeiter_@4:

; 1216 :                 break;

  000f9	eb 02		 jmp	 SHORT $LN5@dequeiter_@4
$LN1@dequeiter_@4:
$LN3@dequeiter_@4:

; 1217 :         }
; 1218 :     }

  000fb	eb a1		 jmp	 SHORT $LN6@dequeiter_@4
$LN5@dequeiter_@4:

; 1219 :     return (PyObject*)it;

  000fd	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
$LN10@dequeiter_@4:

; 1220 : }

  00102	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00106	c3		 ret	 0
dequeiter_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dequeiter_len DD imagerel dequeiter_len
	DD	imagerel dequeiter_len+31
	DD	imagerel $unwind$dequeiter_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequeiter_len DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dequeiter_len
_TEXT	SEGMENT
it$ = 48
dequeiter_len PROC					; COMDAT

; 1224 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1225 :     return PyLong_FromSsize_t(it->counter);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0000e	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00015	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 1226 : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
dequeiter_len ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dequeiter_reduce DD imagerel dequeiter_reduce
	DD	imagerel dequeiter_reduce+78
	DD	imagerel $unwind$dequeiter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequeiter_reduce DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dequeiter_reduce
_TEXT	SEGMENT
it$ = 48
dequeiter_reduce PROC					; COMDAT

; 1232 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1233 :     return Py_BuildValue("O(On)", Py_TYPE(it), it->deque, it->deque->len - it->counter);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0000e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  00017	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0001e	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00025	48 2b c1	 sub	 rax, rcx
  00028	4c 8b c8	 mov	 r9, rax
  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  00030	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  00039	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@
  00044	e8 00 00 00 00	 call	 Py_BuildValue

; 1234 : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
dequeiter_reduce ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deque_reviter DD imagerel deque_reviter
	DD	imagerel deque_reviter+199
	DD	imagerel $unwind$deque_reviter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deque_reviter DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT deque_reviter
_TEXT	SEGMENT
it$ = 32
tv70 = 40
deque$ = 64
deque_reviter PROC					; COMDAT

; 1291 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1292 :     dequeiterobject *it;
; 1293 : 
; 1294 :     it = PyObject_GC_New(dequeiterobject, &dequereviter_type);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 13		 je	 SHORT $LN4@deque_revi
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequereviter_type
  00019	e8 00 00 00 00	 call	 _PxObject_New
  0001e	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00023	eb 11		 jmp	 SHORT $LN5@deque_revi
$LN4@deque_revi:
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequereviter_type
  0002c	e8 00 00 00 00	 call	 _PyObject_GC_New
  00031	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
$LN5@deque_revi:
  00036	48 8b 44 24 28	 mov	 rax, QWORD PTR tv70[rsp]
  0003b	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 1295 :     if (it == NULL)

  00040	48 83 7c 24 20
	00		 cmp	 QWORD PTR it$[rsp], 0
  00046	75 04		 jne	 SHORT $LN1@deque_revi

; 1296 :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	eb 76		 jmp	 SHORT $LN2@deque_revi
$LN1@deque_revi:

; 1297 :     it->b = deque->rightblock;

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00051	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00056	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0005a	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 1298 :     it->index = deque->rightindex;

  0005e	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00063	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00068	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  0006c	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1299 :     Py_INCREF(deque);

  00070	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00075	e8 00 00 00 00	 call	 _Py_IncRef

; 1300 :     it->deque = deque;

  0007a	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00084	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1301 :     it->state = deque->state;

  00088	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  0008d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  00092	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [rcx+144]
  00098	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 1302 :     it->counter = deque->len;

  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  000a0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR deque$[rsp]
  000a5	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  000ac	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 1303 :     PyObject_GC_Track(it);

  000b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  000b8	e8 00 00 00 00	 call	 PyObject_GC_Track

; 1304 :     return (PyObject *)it;

  000bd	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
$LN2@deque_revi:

; 1305 : }

  000c2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c6	c3		 ret	 0
deque_reviter ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@CALACMFO@?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IK@PHCOPKGI@?$AA?$CB?$AA?$CI?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AAt?$AA?9?$AA?$DO?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dequereviter_next DD imagerel dequereviter_next
	DD	imagerel dequereviter_next+374
	DD	imagerel $unwind$dequereviter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequereviter_next DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1DA@CALACMFO@?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@CALACMFO@?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, '-', 00H, '>', 00H, 'b', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n'
	DB	00H, 'k', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1IK@PHCOPKGI@?$AA?$CB?$AA?$CI?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AAt?$AA?9?$AA?$DO?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5@
CONST	SEGMENT
??_C@_1IK@PHCOPKGI@?$AA?$CB?$AA?$CI?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AAt?$AA?9?$AA?$DO?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5@ DB '!'
	DB	00H, '(', 00H, 'i', 00H, 't', 00H, '-', 00H, '>', 00H, 'b', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'i', 00H, 't', 00H, '-'
	DB	00H, '>', 00H, 'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'b'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'i', 00H, 't', 00H, '-', 00H, '>', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, '-', 00H, '>', 00H, 'd', 00H, 'e'
	DB	00H, 'q', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H, 'l', 00H
	DB	'e', 00H, 'f', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'x', 00H, ')', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dequereviter_next
_TEXT	SEGMENT
item$ = 32
it$ = 64
dequereviter_next PROC					; COMDAT

; 1309 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1310 :     PyObject *item;
; 1311 :     if (it->counter == 0)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0000e	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00016	75 07		 jne	 SHORT $LN3@dequerevit

; 1312 :         return NULL;

  00018	33 c0		 xor	 eax, eax
  0001a	e9 52 01 00 00	 jmp	 $LN4@dequerevit
$LN3@dequerevit:

; 1313 : 
; 1314 :     if (it->deque->state != it->state) {

  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00024	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  0002d	8b 49 78	 mov	 ecx, DWORD PTR [rcx+120]
  00030	39 88 90 00 00
	00		 cmp	 DWORD PTR [rax+144], ecx
  00036	74 2a		 je	 SHORT $LN2@dequerevit

; 1315 :         it->counter = 0;

  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0003d	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1316 :         PyErr_SetString(PyExc_RuntimeError,
; 1317 :                         "deque mutated during iteration");

  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@NMAKCLDI@deque?5mutated?5during?5iteration?$AA@
  0004f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00056	e8 00 00 00 00	 call	 PyErr_SetString

; 1318 :         return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 0f 01 00 00	 jmp	 $LN4@dequerevit
$LN2@dequerevit:

; 1319 :     }
; 1320 :     assert (!(it->b == it->deque->leftblock &&
; 1321 :               it->index < it->deque->leftindex));

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00067	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  00070	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00074	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00078	75 34		 jne	 SHORT $LN6@dequerevit
  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0007f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00083	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  00088	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0008c	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00090	7d 1c		 jge	 SHORT $LN6@dequerevit
  00092	41 b8 29 05 00
	00		 mov	 r8d, 1321		; 00000529H
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1IK@PHCOPKGI@?$AA?$CB?$AA?$CI?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AAt?$AA?9?$AA?$DO?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5@
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ac	33 c0		 xor	 eax, eax
$LN6@dequerevit:

; 1322 : 
; 1323 :     item = it->b->data[it->index];

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  000b3	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  000bc	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000c0	48 8b 44 c8 10	 mov	 rax, QWORD PTR [rax+rcx*8+16]
  000c5	48 89 44 24 20	 mov	 QWORD PTR item$[rsp], rax

; 1324 :     it->index--;

  000ca	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  000cf	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000d3	48 ff c8	 dec	 rax
  000d6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  000db	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 1325 :     it->counter--;

  000df	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  000e4	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000eb	48 ff c8	 dec	 rax
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  000f3	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 1326 :     if (it->index == -1 && it->counter > 0) {

  000fa	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  000ff	48 83 78 60 ff	 cmp	 QWORD PTR [rax+96], -1
  00104	75 5c		 jne	 SHORT $LN1@dequerevit
  00106	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0010b	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00113	7e 4d		 jle	 SHORT $LN1@dequerevit

; 1327 :         assert (it->b->leftlink != NULL);

  00115	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0011a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0011e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00122	75 1c		 jne	 SHORT $LN7@dequerevit
  00124	41 b8 2f 05 00
	00		 mov	 r8d, 1327		; 0000052fH
  0012a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@CALACMFO@?$AAi?$AAt?$AA?9?$AA?$DO?$AAb?$AA?9?$AA?$DO?$AAl?$AAe?$AAf?$AAt?$AAl?$AAi?$AAn?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00138	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0013e	33 c0		 xor	 eax, eax
$LN7@dequerevit:

; 1328 :         it->b = it->b->leftlink;

  00140	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00145	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00149	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  0014e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00151	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 1329 :         it->index = BLOCKLEN - 1;

  00155	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0015a	48 c7 40 60 3d
	00 00 00	 mov	 QWORD PTR [rax+96], 61	; 0000003dH
$LN1@dequerevit:

; 1330 :     }
; 1331 :     Py_INCREF(item);

  00162	48 8b 4c 24 20	 mov	 rcx, QWORD PTR item$[rsp]
  00167	e8 00 00 00 00	 call	 _Py_IncRef

; 1332 :     return item;

  0016c	48 8b 44 24 20	 mov	 rax, QWORD PTR item$[rsp]
$LN4@dequerevit:

; 1333 : }

  00171	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00175	c3		 ret	 0
dequereviter_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DG@KKPHODBE@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAd?$AAe?$AAq?$AAu?$AAe?$AAr?$AAe?$AAv?$AAi?$AAt?$AAe?$AAr?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dequereviter_new DD imagerel dequereviter_new
	DD	imagerel dequereviter_new+263
	DD	imagerel $unwind$dequereviter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dequereviter_new DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_1DG@KKPHODBE@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAd?$AAe?$AAq?$AAu?$AAe?$AAr?$AAe?$AAv?$AAi?$AAt?$AAe?$AAr?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@KKPHODBE@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAd?$AAe?$AAq?$AAu?$AAe?$AAr?$AAe?$AAv?$AAi?$AAt?$AAe?$AAr?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ DB 't'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '&', 00H, 'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dequereviter_new
_TEXT	SEGMENT
it$ = 48
i$ = 56
index$ = 64
deque$ = 72
item$21409 = 80
type$ = 112
args$ = 120
kwds$ = 128
dequereviter_new PROC					; COMDAT

; 1337 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1338 :     Py_ssize_t i, index=0;

  00013	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR index$[rsp], 0

; 1339 :     PyObject *deque;
; 1340 :     dequeiterobject *it;
; 1341 :     if (!PyArg_ParseTuple(args, "O!|n", &deque_type, &deque, &index))

  0001c	48 8d 44 24 40	 lea	 rax, QWORD PTR index$[rsp]
  00021	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00026	4c 8d 4c 24 48	 lea	 r9, QWORD PTR deque$[rsp]
  0002b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:deque_type
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FNGFNIDM@O?$CB?$HMn?$AA@
  00039	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0003e	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00043	85 c0		 test	 eax, eax
  00045	75 07		 jne	 SHORT $LN9@dequerevit@2

; 1342 :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	e9 b4 00 00 00	 jmp	 $LN10@dequerevit@2
$LN9@dequerevit@2:

; 1343 :     assert(type == &dequereviter_type);

  0004e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:dequereviter_type
  00055	48 39 44 24 70	 cmp	 QWORD PTR type$[rsp], rax
  0005a	74 1c		 je	 SHORT $LN12@dequerevit@2
  0005c	41 b8 3f 05 00
	00		 mov	 r8d, 1343		; 0000053fH
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EA@KFOPPBO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAo?$AAl?$AAl?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@KKPHODBE@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAd?$AAe?$AAq?$AAu?$AAe?$AAr?$AAe?$AAv?$AAi?$AAt?$AAe?$AAr?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00076	33 c0		 xor	 eax, eax
$LN12@dequerevit@2:

; 1344 : 
; 1345 :     it = (dequeiterobject*)deque_reviter((dequeobject *)deque);

  00078	48 8b 4c 24 48	 mov	 rcx, QWORD PTR deque$[rsp]
  0007d	e8 00 00 00 00	 call	 deque_reviter
  00082	48 89 44 24 30	 mov	 QWORD PTR it$[rsp], rax

; 1346 :     if (!it)

  00087	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  0008d	75 04		 jne	 SHORT $LN8@dequerevit@2

; 1347 :         return NULL;

  0008f	33 c0		 xor	 eax, eax
  00091	eb 6f		 jmp	 SHORT $LN10@dequerevit@2
$LN8@dequerevit@2:

; 1348 :     /* consume items from the queue */
; 1349 :     for(i=0; i<index; i++) {

  00093	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0009c	eb 0d		 jmp	 SHORT $LN7@dequerevit@2
$LN6@dequerevit@2:
  0009e	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  000a3	48 ff c0	 inc	 rax
  000a6	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN7@dequerevit@2:
  000ab	48 8b 44 24 40	 mov	 rax, QWORD PTR index$[rsp]
  000b0	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  000b5	7d 46		 jge	 SHORT $LN5@dequerevit@2

; 1350 :         PyObject *item = dequereviter_next(it);

  000b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  000bc	e8 00 00 00 00	 call	 dequereviter_next
  000c1	48 89 44 24 50	 mov	 QWORD PTR item$21409[rsp], rax

; 1351 :         if (item) {

  000c6	48 83 7c 24 50
	00		 cmp	 QWORD PTR item$21409[rsp], 0
  000cc	74 0c		 je	 SHORT $LN4@dequerevit@2

; 1352 :             Py_DECREF(item);

  000ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$21409[rsp]
  000d3	e8 00 00 00 00	 call	 _Py_DecRef

; 1353 :         } else {

  000d8	eb 21		 jmp	 SHORT $LN3@dequerevit@2
$LN4@dequerevit@2:

; 1354 :             if (it->counter) {

  000da	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  000df	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000e7	74 10		 je	 SHORT $LN2@dequerevit@2

; 1355 :                 Py_DECREF(it);

  000e9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  000ee	e8 00 00 00 00	 call	 _Py_DecRef

; 1356 :                 return NULL;

  000f3	33 c0		 xor	 eax, eax
  000f5	eb 0b		 jmp	 SHORT $LN10@dequerevit@2

; 1357 :             } else

  000f7	eb 02		 jmp	 SHORT $LN1@dequerevit@2
$LN2@dequerevit@2:

; 1358 :                 break;

  000f9	eb 02		 jmp	 SHORT $LN5@dequerevit@2
$LN1@dequerevit@2:
$LN3@dequerevit@2:

; 1359 :         }
; 1360 :     }

  000fb	eb a1		 jmp	 SHORT $LN6@dequerevit@2
$LN5@dequerevit@2:

; 1361 :     return (PyObject*)it;

  000fd	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
$LN10@dequerevit@2:

; 1362 : }

  00102	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00106	c3		 ret	 0
dequereviter_new ENDP
_TEXT	ENDS
EXTRN	PyObject_SetItem:PROC
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyErr_SetObject:PROC
EXTRN	PyExc_KeyError:QWORD
EXTRN	PyTuple_Pack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_missing DD imagerel defdict_missing
	DD	imagerel defdict_missing+199
	DD	imagerel $unwind$defdict_missing
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_missing DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT defdict_missing
_TEXT	SEGMENT
value$ = 32
factory$ = 40
tup$21453 = 48
dd$ = 80
key$ = 88
defdict_missing PROC					; COMDAT

; 1425 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1426 :     PyObject *factory = dd->default_factory;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  00013	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0001a	48 89 44 24 28	 mov	 QWORD PTR factory$[rsp], rax

; 1427 :     PyObject *value;
; 1428 :     if (factory == NULL || factory == Py_None) {

  0001f	48 83 7c 24 28
	00		 cmp	 QWORD PTR factory$[rsp], 0
  00025	74 0e		 je	 SHORT $LN4@defdict_mi
  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0002e	48 39 44 24 28	 cmp	 QWORD PTR factory$[rsp], rax
  00033	75 3f		 jne	 SHORT $LN5@defdict_mi
$LN4@defdict_mi:

; 1429 :         /* XXX Call dict.__missing__(key) */
; 1430 :         PyObject *tup;
; 1431 :         tup = PyTuple_Pack(1, key);

  00035	48 8b 54 24 58	 mov	 rdx, QWORD PTR key$[rsp]
  0003a	b9 01 00 00 00	 mov	 ecx, 1
  0003f	e8 00 00 00 00	 call	 PyTuple_Pack
  00044	48 89 44 24 30	 mov	 QWORD PTR tup$21453[rsp], rax

; 1432 :         if (!tup) return NULL;

  00049	48 83 7c 24 30
	00		 cmp	 QWORD PTR tup$21453[rsp], 0
  0004f	75 04		 jne	 SHORT $LN3@defdict_mi
  00051	33 c0		 xor	 eax, eax
  00053	eb 6d		 jmp	 SHORT $LN6@defdict_mi
$LN3@defdict_mi:

; 1433 :         PyErr_SetObject(PyExc_KeyError, tup);

  00055	48 8b 54 24 30	 mov	 rdx, QWORD PTR tup$21453[rsp]
  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  00061	e8 00 00 00 00	 call	 PyErr_SetObject

; 1434 :         Py_DECREF(tup);

  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tup$21453[rsp]
  0006b	e8 00 00 00 00	 call	 _Py_DecRef

; 1435 :         return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	eb 4e		 jmp	 SHORT $LN6@defdict_mi
$LN5@defdict_mi:

; 1436 :     }
; 1437 :     value = PyEval_CallObject(factory, NULL);

  00074	45 33 c0	 xor	 r8d, r8d
  00077	33 d2		 xor	 edx, edx
  00079	48 8b 4c 24 28	 mov	 rcx, QWORD PTR factory$[rsp]
  0007e	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00083	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 1438 :     if (value == NULL)

  00088	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0008e	75 07		 jne	 SHORT $LN2@defdict_mi

; 1439 :         return value;

  00090	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  00095	eb 2b		 jmp	 SHORT $LN6@defdict_mi
$LN2@defdict_mi:

; 1440 :     if (PyObject_SetItem((PyObject *)dd, key, value) < 0) {

  00097	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0009c	48 8b 54 24 58	 mov	 rdx, QWORD PTR key$[rsp]
  000a1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dd$[rsp]
  000a6	e8 00 00 00 00	 call	 PyObject_SetItem
  000ab	85 c0		 test	 eax, eax
  000ad	7d 0e		 jge	 SHORT $LN1@defdict_mi

; 1441 :         Py_DECREF(value);

  000af	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000b4	e8 00 00 00 00	 call	 _Py_DecRef

; 1442 :         return NULL;

  000b9	33 c0		 xor	 eax, eax
  000bb	eb 05		 jmp	 SHORT $LN6@defdict_mi
$LN1@defdict_mi:

; 1443 :     }
; 1444 :     return value;

  000bd	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
$LN6@defdict_mi:

; 1445 : }

  000c2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c6	c3		 ret	 0
defdict_missing ENDP
_TEXT	ENDS
EXTRN	PyObject_CallFunctionObjArgs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_copy DD imagerel defdict_copy
	DD	imagerel defdict_copy+94
	DD	imagerel $unwind$defdict_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_copy DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT defdict_copy
_TEXT	SEGMENT
dd$ = 48
defdict_copy PROC					; COMDAT

; 1451 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1452 :     /* This calls the object's class.  That only works for subclasses
; 1453 :        whose class constructor has the same signature.  Subclasses that
; 1454 :        define a different constructor signature must override copy().
; 1455 :     */
; 1456 : 
; 1457 :     if (dd->default_factory == NULL)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR dd$[rsp]
  0000e	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00016	75 1f		 jne	 SHORT $LN1@defdict_co

; 1458 :         return PyObject_CallFunctionObjArgs((PyObject*)Py_TYPE(dd), Py_None, dd, NULL);

  00018	45 33 c9	 xor	 r9d, r9d
  0001b	4c 8b 44 24 30	 mov	 r8, QWORD PTR dd$[rsp]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR dd$[rsp]
  0002c	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00030	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00035	eb 22		 jmp	 SHORT $LN2@defdict_co
$LN1@defdict_co:

; 1459 :     return PyObject_CallFunctionObjArgs((PyObject*)Py_TYPE(dd),
; 1460 :                                         dd->default_factory, dd, NULL);

  00037	45 33 c9	 xor	 r9d, r9d
  0003a	4c 8b 44 24 30	 mov	 r8, QWORD PTR dd$[rsp]
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR dd$[rsp]
  00044	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR dd$[rsp]
  00050	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00054	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
$LN2@defdict_co:

; 1461 : }

  00059	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005d	c3		 ret	 0
defdict_copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ?$AA@			; `string'
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_reduce DD imagerel defdict_reduce
	DD	imagerel defdict_reduce+322
	DD	imagerel $unwind$defdict_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_reduce DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ?$AA@ DB '()', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT defdict_reduce
_TEXT	SEGMENT
args$ = 48
iter$ = 56
result$ = 64
items$ = 72
dd$ = 96
defdict_reduce PROC					; COMDAT

; 1465 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1466 :     /* __reduce__ must return a 5-tuple as follows:
; 1467 : 
; 1468 :        - factory function
; 1469 :        - tuple of args for the factory function
; 1470 :        - additional state (here None)
; 1471 :        - sequence iterator (here None)
; 1472 :        - dictionary iterator (yielding successive (key, value) pairs
; 1473 : 
; 1474 :        This API is used by pickle.py and copy.py.
; 1475 : 
; 1476 :        For this to be useful with pickle.py, the default_factory
; 1477 :        must be picklable; e.g., None, a built-in, or a global
; 1478 :        function in a module or package.
; 1479 : 
; 1480 :        Both shallow and deep copying are supported, but for deep
; 1481 :        copying, the default_factory must be deep-copyable; e.g. None,
; 1482 :        or a built-in (functions are not copyable at this time).
; 1483 : 
; 1484 :        This only works for subclasses as long as their constructor
; 1485 :        signature is compatible; the first argument must be the
; 1486 :        optional default_factory, defaulting to None.
; 1487 :     */
; 1488 :     PyObject *args;
; 1489 :     PyObject *items;
; 1490 :     PyObject *iter;
; 1491 :     PyObject *result;
; 1492 :     _Py_IDENTIFIER(items);
; 1493 : 
; 1494 :     if (dd->default_factory == NULL || dd->default_factory == Py_None)

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR dd$[rsp]
  0000e	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00016	74 15		 je	 SHORT $LN5@defdict_re
  00018	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0001f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dd$[rsp]
  00024	48 39 81 80 00
	00 00		 cmp	 QWORD PTR [rcx+128], rax
  0002b	75 0e		 jne	 SHORT $LN6@defdict_re
$LN5@defdict_re:

; 1495 :         args = PyTuple_New(0);

  0002d	33 c9		 xor	 ecx, ecx
  0002f	e8 00 00 00 00	 call	 PyTuple_New
  00034	48 89 44 24 30	 mov	 QWORD PTR args$[rsp], rax

; 1496 :     else

  00039	eb 1b		 jmp	 SHORT $LN4@defdict_re
$LN6@defdict_re:

; 1497 :         args = PyTuple_Pack(1, dd->default_factory);

  0003b	48 8b 44 24 60	 mov	 rax, QWORD PTR dd$[rsp]
  00040	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  00047	b9 01 00 00 00	 mov	 ecx, 1
  0004c	e8 00 00 00 00	 call	 PyTuple_Pack
  00051	48 89 44 24 30	 mov	 QWORD PTR args$[rsp], rax
$LN4@defdict_re:

; 1498 :     if (args == NULL)

  00056	48 83 7c 24 30
	00		 cmp	 QWORD PTR args$[rsp], 0
  0005c	75 07		 jne	 SHORT $LN3@defdict_re

; 1499 :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	e9 d8 00 00 00	 jmp	 $LN7@defdict_re
$LN3@defdict_re:

; 1500 :     items = _PyObject_CallMethodId((PyObject *)dd, &PyId_items, "()");

  00065	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_items@?1??defdict_reduce@@9@9
  0006a	8b c0		 mov	 eax, eax
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00072	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0007b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0007f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  00086	48 8b d0	 mov	 rdx, rax
  00089	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dd$[rsp]
  0008e	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00093	48 89 44 24 48	 mov	 QWORD PTR items$[rsp], rax

; 1501 :     if (items == NULL) {

  00098	48 83 7c 24 48
	00		 cmp	 QWORD PTR items$[rsp], 0
  0009e	75 11		 jne	 SHORT $LN2@defdict_re

; 1502 :         Py_DECREF(args);

  000a0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR args$[rsp]
  000a5	e8 00 00 00 00	 call	 _Py_DecRef

; 1503 :         return NULL;

  000aa	33 c0		 xor	 eax, eax
  000ac	e9 8c 00 00 00	 jmp	 $LN7@defdict_re
$LN2@defdict_re:

; 1504 :     }
; 1505 :     iter = PyObject_GetIter(items);

  000b1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR items$[rsp]
  000b6	e8 00 00 00 00	 call	 PyObject_GetIter
  000bb	48 89 44 24 38	 mov	 QWORD PTR iter$[rsp], rax

; 1506 :     if (iter == NULL) {

  000c0	48 83 7c 24 38
	00		 cmp	 QWORD PTR iter$[rsp], 0
  000c6	75 18		 jne	 SHORT $LN1@defdict_re

; 1507 :         Py_DECREF(items);

  000c8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR items$[rsp]
  000cd	e8 00 00 00 00	 call	 _Py_DecRef

; 1508 :         Py_DECREF(args);

  000d2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR args$[rsp]
  000d7	e8 00 00 00 00	 call	 _Py_DecRef

; 1509 :         return NULL;

  000dc	33 c0		 xor	 eax, eax
  000de	eb 5d		 jmp	 SHORT $LN7@defdict_re
$LN1@defdict_re:

; 1510 :     }
; 1511 :     result = PyTuple_Pack(5, Py_TYPE(dd), args,
; 1512 :                           Py_None, Py_None, iter);

  000e0	48 8b 44 24 38	 mov	 rax, QWORD PTR iter$[rsp]
  000e5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ea	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_NoneStruct
  000fd	4c 8b 44 24 30	 mov	 r8, QWORD PTR args$[rsp]
  00102	48 8b 44 24 60	 mov	 rax, QWORD PTR dd$[rsp]
  00107	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0010b	b9 05 00 00 00	 mov	 ecx, 5
  00110	e8 00 00 00 00	 call	 PyTuple_Pack
  00115	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 1513 :     Py_DECREF(iter);

  0011a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR iter$[rsp]
  0011f	e8 00 00 00 00	 call	 _Py_DecRef

; 1514 :     Py_DECREF(items);

  00124	48 8b 4c 24 48	 mov	 rcx, QWORD PTR items$[rsp]
  00129	e8 00 00 00 00	 call	 _Py_DecRef

; 1515 :     Py_DECREF(args);

  0012e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR args$[rsp]
  00133	e8 00 00 00 00	 call	 _Py_DecRef

; 1516 :     return result;

  00138	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
$LN7@defdict_re:

; 1517 : }

  0013d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00141	c3		 ret	 0
defdict_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@HFLCIAAC@defdict_dealloc?$AA@		; `string'
EXTRN	PyDict_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_dealloc DD imagerel defdict_dealloc
	DD	imagerel defdict_dealloc+138
	DD	imagerel $unwind$defdict_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BA@HFLCIAAC@defdict_dealloc?$AA@
CONST	SEGMENT
??_C@_0BA@HFLCIAAC@defdict_dealloc?$AA@ DB 'defdict_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT defdict_dealloc
_TEXT	SEGMENT
_py_tmp$21537 = 48
dd$ = 80
defdict_dealloc PROC					; COMDAT

; 1540 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@defdict_de:

; 1541 :     Py_CLEAR(dd->default_factory);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  0000e	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00016	74 5c		 je	 SHORT $LN1@defdict_de
  00018	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  00025	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  0002c	41 b8 05 06 00
	00		 mov	 r8d, 1541		; 00000605H
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@HFLCIAAC@defdict_dealloc?$AA@
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 2b		 jne	 SHORT $LN1@defdict_de
  00049	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  0004e	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00055	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21537[rsp], rax
  0005a	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  0005f	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0
  0006a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21537[rsp]
  0006f	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@defdict_de:
  00074	33 c0		 xor	 eax, eax
  00076	85 c0		 test	 eax, eax
  00078	75 8f		 jne	 SHORT $LN4@defdict_de

; 1542 :     PyDict_Type.tp_dealloc((PyObject *)dd);

  0007a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dd$[rsp]
  0007f	ff 15 88 00 00
	00		 call	 QWORD PTR PyDict_Type+136

; 1543 : }

  00085	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00089	c3		 ret	 0
defdict_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@DEADEBJI@defaultdict?$CI?$CFU?0?5?$CFU?$CJ?$AA@ ; `string'
PUBLIC	??_C@_03KHICJKCI@?4?4?4?$AA@			; `string'
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
EXTRN	PyObject_Repr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_repr DD imagerel defdict_repr
	DD	imagerel defdict_repr+263
	DD	imagerel $unwind$defdict_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_repr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BE@DEADEBJI@defaultdict?$CI?$CFU?0?5?$CFU?$CJ?$AA@
CONST	SEGMENT
??_C@_0BE@DEADEBJI@defaultdict?$CI?$CFU?0?5?$CFU?$CJ?$AA@ DB 'defaultdict'
	DB	'(%U, %U)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHICJKCI@?4?4?4?$AA@
CONST	SEGMENT
??_C@_03KHICJKCI@?4?4?4?$AA@ DB '...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT defdict_repr
_TEXT	SEGMENT
baserepr$ = 32
defrepr$ = 40
result$ = 48
status$21557 = 56
dd$ = 80
defdict_repr PROC					; COMDAT

; 1547 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1548 :     PyObject *baserepr;
; 1549 :     PyObject *defrepr;
; 1550 :     PyObject *result;
; 1551 :     baserepr = PyDict_Type.tp_repr((PyObject *)dd);

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dd$[rsp]
  0000e	ff 15 b0 00 00
	00		 call	 QWORD PTR PyDict_Type+176
  00014	48 89 44 24 20	 mov	 QWORD PTR baserepr$[rsp], rax

; 1552 :     if (baserepr == NULL)

  00019	48 83 7c 24 20
	00		 cmp	 QWORD PTR baserepr$[rsp], 0
  0001f	75 07		 jne	 SHORT $LN7@defdict_re@2

; 1553 :         return NULL;

  00021	33 c0		 xor	 eax, eax
  00023	e9 da 00 00 00	 jmp	 $LN8@defdict_re@2
$LN7@defdict_re@2:

; 1554 :     if (dd->default_factory == NULL)

  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  0002d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00035	75 13		 jne	 SHORT $LN6@defdict_re@2

; 1555 :         defrepr = PyUnicode_FromString("None");

  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@
  0003e	e8 00 00 00 00	 call	 PyUnicode_FromString
  00043	48 89 44 24 28	 mov	 QWORD PTR defrepr$[rsp], rax

; 1556 :     else

  00048	eb 6e		 jmp	 SHORT $LN5@defdict_re@2
$LN6@defdict_re@2:

; 1557 :     {
; 1558 :         int status = Py_ReprEnter(dd->default_factory);

  0004a	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  0004f	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00056	e8 00 00 00 00	 call	 Py_ReprEnter
  0005b	89 44 24 38	 mov	 DWORD PTR status$21557[rsp], eax

; 1559 :         if (status != 0) {

  0005f	83 7c 24 38 00	 cmp	 DWORD PTR status$21557[rsp], 0
  00064	74 2b		 je	 SHORT $LN4@defdict_re@2

; 1560 :             if (status < 0) {

  00066	83 7c 24 38 00	 cmp	 DWORD PTR status$21557[rsp], 0
  0006b	7d 11		 jge	 SHORT $LN3@defdict_re@2

; 1561 :                 Py_DECREF(baserepr);

  0006d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR baserepr$[rsp]
  00072	e8 00 00 00 00	 call	 _Py_DecRef

; 1562 :                 return NULL;

  00077	33 c0		 xor	 eax, eax
  00079	e9 84 00 00 00	 jmp	 $LN8@defdict_re@2
$LN3@defdict_re@2:

; 1563 :             }
; 1564 :             defrepr = PyUnicode_FromString("...");

  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03KHICJKCI@?4?4?4?$AA@
  00085	e8 00 00 00 00	 call	 PyUnicode_FromString
  0008a	48 89 44 24 28	 mov	 QWORD PTR defrepr$[rsp], rax

; 1565 :         }
; 1566 :         else

  0008f	eb 16		 jmp	 SHORT $LN2@defdict_re@2
$LN4@defdict_re@2:

; 1567 :             defrepr = PyObject_Repr(dd->default_factory);

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  00096	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0009d	e8 00 00 00 00	 call	 PyObject_Repr
  000a2	48 89 44 24 28	 mov	 QWORD PTR defrepr$[rsp], rax
$LN2@defdict_re@2:

; 1568 :         Py_ReprLeave(dd->default_factory);

  000a7	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  000ac	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000b3	e8 00 00 00 00	 call	 Py_ReprLeave
$LN5@defdict_re@2:

; 1569 :     }
; 1570 :     if (defrepr == NULL) {

  000b8	48 83 7c 24 28
	00		 cmp	 QWORD PTR defrepr$[rsp], 0
  000be	75 0e		 jne	 SHORT $LN1@defdict_re@2

; 1571 :         Py_DECREF(baserepr);

  000c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR baserepr$[rsp]
  000c5	e8 00 00 00 00	 call	 _Py_DecRef

; 1572 :         return NULL;

  000ca	33 c0		 xor	 eax, eax
  000cc	eb 34		 jmp	 SHORT $LN8@defdict_re@2
$LN1@defdict_re@2:

; 1573 :     }
; 1574 :     result = PyUnicode_FromFormat("defaultdict(%U, %U)",
; 1575 :                                   defrepr, baserepr);

  000ce	4c 8b 44 24 20	 mov	 r8, QWORD PTR baserepr$[rsp]
  000d3	48 8b 54 24 28	 mov	 rdx, QWORD PTR defrepr$[rsp]
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DEADEBJI@defaultdict?$CI?$CFU?0?5?$CFU?$CJ?$AA@
  000df	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000e4	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 1576 :     Py_DECREF(defrepr);

  000e9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR defrepr$[rsp]
  000ee	e8 00 00 00 00	 call	 _Py_DecRef

; 1577 :     Py_DECREF(baserepr);

  000f3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR baserepr$[rsp]
  000f8	e8 00 00 00 00	 call	 _Py_DecRef

; 1578 :     return result;

  000fd	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
$LN8@defdict_re@2:

; 1579 : }

  00102	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00106	c3		 ret	 0
defdict_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@DNEHFJLD@defdict_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_traverse DD imagerel defdict_traverse
	DD	imagerel defdict_traverse+141
	DD	imagerel $unwind$defdict_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BB@DNEHFJLD@defdict_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@DNEHFJLD@defdict_traverse?$AA@ DB 'defdict_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT defdict_traverse
_TEXT	SEGMENT
vret$21586 = 32
self$ = 64
visit$ = 72
arg$ = 80
defdict_traverse PROC					; COMDAT

; 1583 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@defdict_tr:

; 1584 :     Py_VISIT(((defdictobject *)self)->default_factory);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@defdict_tr
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 30 06 00
	00		 mov	 r8d, 1584		; 00000630H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@DNEHFJLD@defdict_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@defdict_tr:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00045	74 26		 je	 SHORT $LN2@defdict_tr
  00047	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00051	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00058	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  0005c	89 44 24 20	 mov	 DWORD PTR vret$21586[rsp], eax
  00060	83 7c 24 20 00	 cmp	 DWORD PTR vret$21586[rsp], 0
  00065	74 06		 je	 SHORT $LN1@defdict_tr
  00067	8b 44 24 20	 mov	 eax, DWORD PTR vret$21586[rsp]
  0006b	eb 1b		 jmp	 SHORT $LN7@defdict_tr
$LN1@defdict_tr:
$LN2@defdict_tr:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a0		 jne	 SHORT $LN6@defdict_tr

; 1585 :     return PyDict_Type.tp_traverse(self, visit, arg);

  00073	4c 8b 44 24 50	 mov	 r8, QWORD PTR arg$[rsp]
  00078	48 8b 54 24 48	 mov	 rdx, QWORD PTR visit$[rsp]
  0007d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00082	ff 15 10 01 00
	00		 call	 QWORD PTR PyDict_Type+272
$LN7@defdict_tr:

; 1586 : }

  00088	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008c	c3		 ret	 0
defdict_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@ONKONDG@defdict_tp_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_tp_clear DD imagerel defdict_tp_clear
	DD	imagerel defdict_tp_clear+138
	DD	imagerel $unwind$defdict_tp_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_tp_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BB@ONKONDG@defdict_tp_clear?$AA@
CONST	SEGMENT
??_C@_0BB@ONKONDG@defdict_tp_clear?$AA@ DB 'defdict_tp_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT defdict_tp_clear
_TEXT	SEGMENT
_py_tmp$21599 = 48
dd$ = 80
defdict_tp_clear PROC					; COMDAT

; 1590 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@defdict_tp:

; 1591 :     Py_CLEAR(dd->default_factory);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  0000e	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00016	74 5c		 je	 SHORT $LN1@defdict_tp
  00018	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  00025	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  0002c	41 b8 37 06 00
	00		 mov	 r8d, 1591		; 00000637H
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@ONKONDG@defdict_tp_clear?$AA@
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 2b		 jne	 SHORT $LN1@defdict_tp
  00049	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  0004e	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00055	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21599[rsp], rax
  0005a	48 8b 44 24 50	 mov	 rax, QWORD PTR dd$[rsp]
  0005f	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0
  0006a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21599[rsp]
  0006f	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@defdict_tp:
  00074	33 c0		 xor	 eax, eax
  00076	85 c0		 test	 eax, eax
  00078	75 8f		 jne	 SHORT $LN4@defdict_tp

; 1592 :     return PyDict_Type.tp_clear((PyObject *)dd);

  0007a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dd$[rsp]
  0007f	ff 15 18 01 00
	00		 call	 QWORD PTR PyDict_Type+280

; 1593 : }

  00085	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00089	c3		 ret	 0
defdict_tp_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@ ; `string'
EXTRN	PySequence_GetSlice:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyCallable_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$defdict_init DD imagerel defdict_init
	DD	imagerel defdict_init+343
	DD	imagerel $unwind$defdict_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$defdict_init DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@
CONST	SEGMENT
??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@ DB 'first arg'
	DB	'ument must be callable', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT defdict_init
_TEXT	SEGMENT
newargs$ = 32
newdefault$ = 40
dd$ = 48
result$ = 56
olddefault$ = 64
n$21624 = 72
self$ = 96
args$ = 104
kwds$ = 112
defdict_init PROC					; COMDAT

; 1597 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1598 :     defdictobject *dd = (defdictobject *)self;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 30	 mov	 QWORD PTR dd$[rsp], rax

; 1599 :     PyObject *olddefault = dd->default_factory;

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR dd$[rsp]
  00022	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00029	48 89 44 24 40	 mov	 QWORD PTR olddefault$[rsp], rax

; 1600 :     PyObject *newdefault = NULL;

  0002e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR newdefault$[rsp], 0

; 1601 :     PyObject *newargs;
; 1602 :     int result;
; 1603 :     if (args == NULL || !PyTuple_Check(args))

  00037	48 83 7c 24 68
	00		 cmp	 QWORD PTR args$[rsp], 0
  0003d	74 18		 je	 SHORT $LN13@defdict_in
  0003f	48 8b 44 24 68	 mov	 rax, QWORD PTR args$[rsp]
  00044	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00048	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0004e	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00053	85 c0		 test	 eax, eax
  00055	75 0e		 jne	 SHORT $LN14@defdict_in
$LN13@defdict_in:

; 1604 :         newargs = PyTuple_New(0);

  00057	33 c9		 xor	 ecx, ecx
  00059	e8 00 00 00 00	 call	 PyTuple_New
  0005e	48 89 44 24 20	 mov	 QWORD PTR newargs$[rsp], rax

; 1605 :     else {

  00063	eb 76		 jmp	 SHORT $LN12@defdict_in
$LN14@defdict_in:

; 1606 :         Py_ssize_t n = PyTuple_GET_SIZE(args);

  00065	48 8b 44 24 68	 mov	 rax, QWORD PTR args$[rsp]
  0006a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006e	48 89 44 24 48	 mov	 QWORD PTR n$21624[rsp], rax

; 1607 :         if (n > 0) {

  00073	48 83 7c 24 48
	00		 cmp	 QWORD PTR n$21624[rsp], 0
  00079	7e 47		 jle	 SHORT $LN11@defdict_in

; 1608 :             newdefault = PyTuple_GET_ITEM(args, 0);

  0007b	48 8b 44 24 68	 mov	 rax, QWORD PTR args$[rsp]
  00080	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00084	48 89 44 24 28	 mov	 QWORD PTR newdefault$[rsp], rax

; 1609 :             if (!PyCallable_Check(newdefault) && newdefault != Py_None) {

  00089	48 8b 4c 24 28	 mov	 rcx, QWORD PTR newdefault$[rsp]
  0008e	e8 00 00 00 00	 call	 PyCallable_Check
  00093	85 c0		 test	 eax, eax
  00095	75 2b		 jne	 SHORT $LN10@defdict_in
  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0009e	48 39 44 24 28	 cmp	 QWORD PTR newdefault$[rsp], rax
  000a3	74 1d		 je	 SHORT $LN10@defdict_in

; 1610 :                 PyErr_SetString(PyExc_TypeError,
; 1611 :                     "first argument must be callable");

  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@
  000ac	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000b3	e8 00 00 00 00	 call	 PyErr_SetString

; 1612 :                 return -1;

  000b8	b8 ff ff ff ff	 mov	 eax, -1
  000bd	e9 90 00 00 00	 jmp	 $LN15@defdict_in
$LN10@defdict_in:
$LN11@defdict_in:

; 1613 :             }
; 1614 :         }
; 1615 :         newargs = PySequence_GetSlice(args, 1, n);

  000c2	4c 8b 44 24 48	 mov	 r8, QWORD PTR n$21624[rsp]
  000c7	ba 01 00 00 00	 mov	 edx, 1
  000cc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  000d1	e8 00 00 00 00	 call	 PySequence_GetSlice
  000d6	48 89 44 24 20	 mov	 QWORD PTR newargs$[rsp], rax
$LN12@defdict_in:

; 1616 :     }
; 1617 :     if (newargs == NULL)

  000db	48 83 7c 24 20
	00		 cmp	 QWORD PTR newargs$[rsp], 0
  000e1	75 07		 jne	 SHORT $LN9@defdict_in

; 1618 :         return -1;

  000e3	b8 ff ff ff ff	 mov	 eax, -1
  000e8	eb 68		 jmp	 SHORT $LN15@defdict_in
$LN9@defdict_in:
$LN8@defdict_in:

; 1619 :     Py_XINCREF(newdefault);

  000ea	48 83 7c 24 28
	00		 cmp	 QWORD PTR newdefault$[rsp], 0
  000f0	74 0a		 je	 SHORT $LN5@defdict_in
  000f2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR newdefault$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@defdict_in:
  000fc	33 c0		 xor	 eax, eax
  000fe	85 c0		 test	 eax, eax
  00100	75 e8		 jne	 SHORT $LN8@defdict_in

; 1620 :     dd->default_factory = newdefault;

  00102	48 8b 44 24 30	 mov	 rax, QWORD PTR dd$[rsp]
  00107	48 8b 4c 24 28	 mov	 rcx, QWORD PTR newdefault$[rsp]
  0010c	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 1621 :     result = PyDict_Type.tp_init(self, newargs, kwds);

  00113	4c 8b 44 24 70	 mov	 r8, QWORD PTR kwds$[rsp]
  00118	48 8b 54 24 20	 mov	 rdx, QWORD PTR newargs$[rsp]
  0011d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00122	ff 15 80 01 00
	00		 call	 QWORD PTR PyDict_Type+384
  00128	89 44 24 38	 mov	 DWORD PTR result$[rsp], eax

; 1622 :     Py_DECREF(newargs);

  0012c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newargs$[rsp]
  00131	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@defdict_in:

; 1623 :     Py_XDECREF(olddefault);

  00136	48 83 7c 24 40
	00		 cmp	 QWORD PTR olddefault$[rsp], 0
  0013c	74 0a		 je	 SHORT $LN1@defdict_in
  0013e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR olddefault$[rsp]
  00143	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@defdict_in:
  00148	33 c0		 xor	 eax, eax
  0014a	85 c0		 test	 eax, eax
  0014c	75 e8		 jne	 SHORT $LN4@defdict_in

; 1624 :     return result;

  0014e	8b 44 24 38	 mov	 eax, DWORD PTR result$[rsp]
$LN15@defdict_in:

; 1625 : }

  00152	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00156	c3		 ret	 0
defdict_init ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttrString:PROC
EXTRN	PyNumber_Add:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	_PyType_LookupId:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_count_elements DD imagerel _count_elements
	DD	imagerel _count_elements+1265
	DD	imagerel $unwind$_count_elements
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_count_elements DD 021101H
	DD	0170111H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _count_elements
_TEXT	SEGMENT
it$ = 48
mapping$ = 56
key$ = 64
mapping_setitem$ = 72
bound_get$ = 80
dict_setitem$ = 88
one$ = 96
zero$ = 104
dict_get$ = 112
mapping_get$ = 120
newval$ = 128
iterable$ = 136
oldval$ = 144
_py_tmp$21723 = 152
_py_tmp$21749 = 160
self$ = 192
args$ = 200
_count_elements PROC					; COMDAT

; 1693 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1694 :     _Py_IDENTIFIER(get);
; 1695 :     _Py_IDENTIFIER(__setitem__);
; 1696 :     PyObject *it, *iterable, *mapping, *oldval;
; 1697 :     PyObject *newval = NULL;

  00011	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newval$[rsp], 0

; 1698 :     PyObject *key = NULL;

  0001d	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR key$[rsp], 0

; 1699 :     PyObject *zero = NULL;

  00026	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR zero$[rsp], 0

; 1700 :     PyObject *one = NULL;

  0002f	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR one$[rsp], 0

; 1701 :     PyObject *bound_get = NULL;

  00038	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR bound_get$[rsp], 0

; 1702 :     PyObject *mapping_get;
; 1703 :     PyObject *dict_get;
; 1704 :     PyObject *mapping_setitem;
; 1705 :     PyObject *dict_setitem;
; 1706 : 
; 1707 :     if (!PyArg_UnpackTuple(args, "_count_elements", 2, 2, &mapping, &iterable))

  00041	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR iterable$[rsp]
  00049	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0004e	48 8d 44 24 38	 lea	 rax, QWORD PTR mapping$[rsp]
  00053	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00058	41 b9 02 00 00
	00		 mov	 r9d, 2
  0005e	41 b8 02 00 00
	00		 mov	 r8d, 2
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@JNDEBPOJ@_count_elements?$AA@
  0006b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00073	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00078	85 c0		 test	 eax, eax
  0007a	75 07		 jne	 SHORT $LN50@count_elem

; 1708 :         return NULL;

  0007c	33 c0		 xor	 eax, eax
  0007e	e9 66 04 00 00	 jmp	 $LN51@count_elem
$LN50@count_elem:

; 1709 : 
; 1710 :     it = PyObject_GetIter(iterable);

  00083	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR iterable$[rsp]
  0008b	e8 00 00 00 00	 call	 PyObject_GetIter
  00090	48 89 44 24 30	 mov	 QWORD PTR it$[rsp], rax

; 1711 :     if (it == NULL)

  00095	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  0009b	75 07		 jne	 SHORT $LN49@count_elem

; 1712 :         return NULL;

  0009d	33 c0		 xor	 eax, eax
  0009f	e9 45 04 00 00	 jmp	 $LN51@count_elem
$LN49@count_elem:

; 1713 : 
; 1714 :     one = PyLong_FromLong(1);

  000a4	b9 01 00 00 00	 mov	 ecx, 1
  000a9	e8 00 00 00 00	 call	 PyLong_FromLong
  000ae	48 89 44 24 60	 mov	 QWORD PTR one$[rsp], rax

; 1715 :     if (one == NULL)

  000b3	48 83 7c 24 60
	00		 cmp	 QWORD PTR one$[rsp], 0
  000b9	75 05		 jne	 SHORT $LN48@count_elem

; 1716 :         goto done;

  000bb	e9 80 03 00 00	 jmp	 $done$21701
$LN48@count_elem:

; 1717 : 
; 1718 :     /* Only take the fast path when get() and __setitem__()
; 1719 :      * have not been overridden.
; 1720 :      */
; 1721 :     mapping_get = _PyType_LookupId(Py_TYPE(mapping), &PyId_get);

  000c0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_get@?1??_count_elements@@9@9
  000c5	8b c0		 mov	 eax, eax
  000c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000cd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000d6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000da	48 8b d0	 mov	 rdx, rax
  000dd	48 8b 44 24 38	 mov	 rax, QWORD PTR mapping$[rsp]
  000e2	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000e6	e8 00 00 00 00	 call	 _PyType_LookupId
  000eb	48 89 44 24 78	 mov	 QWORD PTR mapping_get$[rsp], rax

; 1722 :     dict_get = _PyType_LookupId(&PyDict_Type, &PyId_get);

  000f0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_get@?1??_count_elements@@9@9
  000f5	8b c0		 mov	 eax, eax
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000fd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00106	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0010a	48 8b d0	 mov	 rdx, rax
  0010d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  00114	e8 00 00 00 00	 call	 _PyType_LookupId
  00119	48 89 44 24 70	 mov	 QWORD PTR dict_get$[rsp], rax

; 1723 :     mapping_setitem = _PyType_LookupId(Py_TYPE(mapping), &PyId___setitem__);

  0011e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___setitem__@?1??_count_elements@@9@9
  00123	8b c0		 mov	 eax, eax
  00125	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0012b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00134	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00138	48 8b d0	 mov	 rdx, rax
  0013b	48 8b 44 24 38	 mov	 rax, QWORD PTR mapping$[rsp]
  00140	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00144	e8 00 00 00 00	 call	 _PyType_LookupId
  00149	48 89 44 24 48	 mov	 QWORD PTR mapping_setitem$[rsp], rax

; 1724 :     dict_setitem = _PyType_LookupId(&PyDict_Type, &PyId___setitem__);

  0014e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___setitem__@?1??_count_elements@@9@9
  00153	8b c0		 mov	 eax, eax
  00155	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0015b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00164	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00168	48 8b d0	 mov	 rdx, rax
  0016b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  00172	e8 00 00 00 00	 call	 _PyType_LookupId
  00177	48 89 44 24 58	 mov	 QWORD PTR dict_setitem$[rsp], rax

; 1725 : 
; 1726 :     if (mapping_get != NULL && mapping_get == dict_get &&
; 1727 :         mapping_setitem != NULL && mapping_setitem == dict_setitem) {

  0017c	48 83 7c 24 78
	00		 cmp	 QWORD PTR mapping_get$[rsp], 0
  00182	0f 84 5b 01 00
	00		 je	 $LN47@count_elem
  00188	48 8b 44 24 70	 mov	 rax, QWORD PTR dict_get$[rsp]
  0018d	48 39 44 24 78	 cmp	 QWORD PTR mapping_get$[rsp], rax
  00192	0f 85 4b 01 00
	00		 jne	 $LN47@count_elem
  00198	48 83 7c 24 48
	00		 cmp	 QWORD PTR mapping_setitem$[rsp], 0
  0019e	0f 84 3f 01 00
	00		 je	 $LN47@count_elem
  001a4	48 8b 44 24 58	 mov	 rax, QWORD PTR dict_setitem$[rsp]
  001a9	48 39 44 24 48	 cmp	 QWORD PTR mapping_setitem$[rsp], rax
  001ae	0f 85 2f 01 00
	00		 jne	 $LN47@count_elem
$LN46@count_elem:

; 1728 :         while (1) {

  001b4	33 c0		 xor	 eax, eax
  001b6	83 f8 01	 cmp	 eax, 1
  001b9	0f 84 1f 01 00
	00		 je	 $LN45@count_elem

; 1729 :             key = PyIter_Next(it);

  001bf	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  001c4	e8 00 00 00 00	 call	 PyIter_Next
  001c9	48 89 44 24 40	 mov	 QWORD PTR key$[rsp], rax

; 1730 :             if (key == NULL)

  001ce	48 83 7c 24 40
	00		 cmp	 QWORD PTR key$[rsp], 0
  001d4	75 05		 jne	 SHORT $LN44@count_elem

; 1731 :                 break;

  001d6	e9 03 01 00 00	 jmp	 $LN45@count_elem
$LN44@count_elem:

; 1732 :             oldval = PyDict_GetItem(mapping, key);

  001db	48 8b 54 24 40	 mov	 rdx, QWORD PTR key$[rsp]
  001e0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mapping$[rsp]
  001e5	e8 00 00 00 00	 call	 PyDict_GetItem
  001ea	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR oldval$[rsp], rax

; 1733 :             if (oldval == NULL) {

  001f2	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR oldval$[rsp], 0
  001fb	75 23		 jne	 SHORT $LN43@count_elem

; 1734 :                 if (PyDict_SetItem(mapping, key, one) == -1)

  001fd	4c 8b 44 24 60	 mov	 r8, QWORD PTR one$[rsp]
  00202	48 8b 54 24 40	 mov	 rdx, QWORD PTR key$[rsp]
  00207	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mapping$[rsp]
  0020c	e8 00 00 00 00	 call	 PyDict_SetItem
  00211	83 f8 ff	 cmp	 eax, -1
  00214	75 05		 jne	 SHORT $LN42@count_elem

; 1735 :                     break;

  00216	e9 c3 00 00 00	 jmp	 $LN45@count_elem
$LN42@count_elem:

; 1736 :             } else {

  0021b	e9 af 00 00 00	 jmp	 $LN41@count_elem
$LN43@count_elem:

; 1737 :                 newval = PyNumber_Add(oldval, one);

  00220	48 8b 54 24 60	 mov	 rdx, QWORD PTR one$[rsp]
  00225	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR oldval$[rsp]
  0022d	e8 00 00 00 00	 call	 PyNumber_Add
  00232	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR newval$[rsp], rax

; 1738 :                 if (newval == NULL)

  0023a	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR newval$[rsp], 0
  00243	75 05		 jne	 SHORT $LN40@count_elem

; 1739 :                     break;

  00245	e9 94 00 00 00	 jmp	 $LN45@count_elem
$LN40@count_elem:

; 1740 :                 if (PyDict_SetItem(mapping, key, newval) == -1)

  0024a	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR newval$[rsp]
  00252	48 8b 54 24 40	 mov	 rdx, QWORD PTR key$[rsp]
  00257	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mapping$[rsp]
  0025c	e8 00 00 00 00	 call	 PyDict_SetItem
  00261	83 f8 ff	 cmp	 eax, -1
  00264	75 02		 jne	 SHORT $LN39@count_elem

; 1741 :                     break;

  00266	eb 76		 jmp	 SHORT $LN45@count_elem
$LN39@count_elem:
$LN38@count_elem:

; 1742 :                 Py_CLEAR(newval);

  00268	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR newval$[rsp], 0
  00271	74 56		 je	 SHORT $LN35@count_elem
  00273	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0027b	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR newval$[rsp]
  00283	41 b8 ce 06 00
	00		 mov	 r8d, 1742		; 000006ceH
  00289	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  00290	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JNDEBPOJ@_count_elements?$AA@
  00297	e8 00 00 00 00	 call	 _PyParallel_Guard
  0029c	85 c0		 test	 eax, eax
  0029e	75 29		 jne	 SHORT $LN35@count_elem
  002a0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newval$[rsp]
  002a8	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR _py_tmp$21723[rsp], rax
  002b0	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newval$[rsp], 0
  002bc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21723[rsp]
  002c4	e8 00 00 00 00	 call	 _Py_DecRef
$LN35@count_elem:
  002c9	33 c0		 xor	 eax, eax
  002cb	85 c0		 test	 eax, eax
  002cd	75 99		 jne	 SHORT $LN38@count_elem
$LN41@count_elem:

; 1743 :             }
; 1744 :             Py_DECREF(key);

  002cf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR key$[rsp]
  002d4	e8 00 00 00 00	 call	 _Py_DecRef

; 1745 :         }

  002d9	e9 d6 fe ff ff	 jmp	 $LN46@count_elem
$LN45@count_elem:

; 1746 :     } else {

  002de	e9 5d 01 00 00	 jmp	 $LN34@count_elem
$LN47@count_elem:

; 1747 :         bound_get = PyObject_GetAttrString(mapping, "get");

  002e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HNAFFKGA@get?$AA@
  002ea	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mapping$[rsp]
  002ef	e8 00 00 00 00	 call	 PyObject_GetAttrString
  002f4	48 89 44 24 50	 mov	 QWORD PTR bound_get$[rsp], rax

; 1748 :         if (bound_get == NULL)

  002f9	48 83 7c 24 50
	00		 cmp	 QWORD PTR bound_get$[rsp], 0
  002ff	75 05		 jne	 SHORT $LN33@count_elem

; 1749 :             goto done;

  00301	e9 3a 01 00 00	 jmp	 $done$21701
$LN33@count_elem:

; 1750 : 
; 1751 :         zero = PyLong_FromLong(0);

  00306	33 c9		 xor	 ecx, ecx
  00308	e8 00 00 00 00	 call	 PyLong_FromLong
  0030d	48 89 44 24 68	 mov	 QWORD PTR zero$[rsp], rax

; 1752 :         if (zero == NULL)

  00312	48 83 7c 24 68
	00		 cmp	 QWORD PTR zero$[rsp], 0
  00318	75 05		 jne	 SHORT $LN32@count_elem

; 1753 :             goto done;

  0031a	e9 21 01 00 00	 jmp	 $done$21701
$LN32@count_elem:
$LN31@count_elem:

; 1754 : 
; 1755 :         while (1) {

  0031f	33 c0		 xor	 eax, eax
  00321	83 f8 01	 cmp	 eax, 1
  00324	0f 84 16 01 00
	00		 je	 $LN30@count_elem

; 1756 :             key = PyIter_Next(it);

  0032a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  0032f	e8 00 00 00 00	 call	 PyIter_Next
  00334	48 89 44 24 40	 mov	 QWORD PTR key$[rsp], rax

; 1757 :             if (key == NULL)

  00339	48 83 7c 24 40
	00		 cmp	 QWORD PTR key$[rsp], 0
  0033f	75 05		 jne	 SHORT $LN29@count_elem

; 1758 :                 break;

  00341	e9 fa 00 00 00	 jmp	 $LN30@count_elem
$LN29@count_elem:

; 1759 :             oldval = PyObject_CallFunctionObjArgs(bound_get, key, zero, NULL);

  00346	45 33 c9	 xor	 r9d, r9d
  00349	4c 8b 44 24 68	 mov	 r8, QWORD PTR zero$[rsp]
  0034e	48 8b 54 24 40	 mov	 rdx, QWORD PTR key$[rsp]
  00353	48 8b 4c 24 50	 mov	 rcx, QWORD PTR bound_get$[rsp]
  00358	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  0035d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR oldval$[rsp], rax

; 1760 :             if (oldval == NULL)

  00365	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR oldval$[rsp], 0
  0036e	75 05		 jne	 SHORT $LN28@count_elem

; 1761 :                 break;

  00370	e9 cb 00 00 00	 jmp	 $LN30@count_elem
$LN28@count_elem:

; 1762 :             newval = PyNumber_Add(oldval, one);

  00375	48 8b 54 24 60	 mov	 rdx, QWORD PTR one$[rsp]
  0037a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR oldval$[rsp]
  00382	e8 00 00 00 00	 call	 PyNumber_Add
  00387	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR newval$[rsp], rax

; 1763 :             Py_DECREF(oldval);

  0038f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR oldval$[rsp]
  00397	e8 00 00 00 00	 call	 _Py_DecRef

; 1764 :             if (newval == NULL)

  0039c	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR newval$[rsp], 0
  003a5	75 05		 jne	 SHORT $LN27@count_elem

; 1765 :                 break;

  003a7	e9 94 00 00 00	 jmp	 $LN30@count_elem
$LN27@count_elem:

; 1766 :             if (PyObject_SetItem(mapping, key, newval) == -1)

  003ac	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR newval$[rsp]
  003b4	48 8b 54 24 40	 mov	 rdx, QWORD PTR key$[rsp]
  003b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mapping$[rsp]
  003be	e8 00 00 00 00	 call	 PyObject_SetItem
  003c3	83 f8 ff	 cmp	 eax, -1
  003c6	75 02		 jne	 SHORT $LN26@count_elem

; 1767 :                 break;

  003c8	eb 76		 jmp	 SHORT $LN30@count_elem
$LN26@count_elem:
$LN25@count_elem:

; 1768 :             Py_CLEAR(newval);

  003ca	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR newval$[rsp], 0
  003d3	74 56		 je	 SHORT $LN22@count_elem
  003d5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003dd	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR newval$[rsp]
  003e5	41 b8 e8 06 00
	00		 mov	 r8d, 1768		; 000006e8H
  003eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LDKINGDC@?4?4?2Modules?2_collectionsmodule?4c?$AA@
  003f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JNDEBPOJ@_count_elements?$AA@
  003f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  003fe	85 c0		 test	 eax, eax
  00400	75 29		 jne	 SHORT $LN22@count_elem
  00402	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newval$[rsp]
  0040a	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _py_tmp$21749[rsp], rax
  00412	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newval$[rsp], 0
  0041e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21749[rsp]
  00426	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@count_elem:
  0042b	33 c0		 xor	 eax, eax
  0042d	85 c0		 test	 eax, eax
  0042f	75 99		 jne	 SHORT $LN25@count_elem

; 1769 :             Py_DECREF(key);

  00431	48 8b 4c 24 40	 mov	 rcx, QWORD PTR key$[rsp]
  00436	e8 00 00 00 00	 call	 _Py_DecRef

; 1770 :         }

  0043b	e9 df fe ff ff	 jmp	 $LN31@count_elem
$LN30@count_elem:
$LN34@count_elem:
$done$21701:

; 1771 :     }
; 1772 : 
; 1773 : done:
; 1774 :     Py_DECREF(it);

  00440	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  00445	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@count_elem:

; 1775 :     Py_XDECREF(key);

  0044a	48 83 7c 24 40
	00		 cmp	 QWORD PTR key$[rsp], 0
  00450	74 0a		 je	 SHORT $LN18@count_elem
  00452	48 8b 4c 24 40	 mov	 rcx, QWORD PTR key$[rsp]
  00457	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@count_elem:
  0045c	33 c0		 xor	 eax, eax
  0045e	85 c0		 test	 eax, eax
  00460	75 e8		 jne	 SHORT $LN21@count_elem
$LN17@count_elem:

; 1776 :     Py_XDECREF(newval);

  00462	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR newval$[rsp], 0
  0046b	74 0d		 je	 SHORT $LN14@count_elem
  0046d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR newval$[rsp]
  00475	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@count_elem:
  0047a	33 c0		 xor	 eax, eax
  0047c	85 c0		 test	 eax, eax
  0047e	75 e2		 jne	 SHORT $LN17@count_elem
$LN13@count_elem:

; 1777 :     Py_XDECREF(bound_get);

  00480	48 83 7c 24 50
	00		 cmp	 QWORD PTR bound_get$[rsp], 0
  00486	74 0a		 je	 SHORT $LN10@count_elem
  00488	48 8b 4c 24 50	 mov	 rcx, QWORD PTR bound_get$[rsp]
  0048d	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@count_elem:
  00492	33 c0		 xor	 eax, eax
  00494	85 c0		 test	 eax, eax
  00496	75 e8		 jne	 SHORT $LN13@count_elem
$LN9@count_elem:

; 1778 :     Py_XDECREF(zero);

  00498	48 83 7c 24 68
	00		 cmp	 QWORD PTR zero$[rsp], 0
  0049e	74 0a		 je	 SHORT $LN6@count_elem
  004a0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR zero$[rsp]
  004a5	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@count_elem:
  004aa	33 c0		 xor	 eax, eax
  004ac	85 c0		 test	 eax, eax
  004ae	75 e8		 jne	 SHORT $LN9@count_elem
$LN5@count_elem:

; 1779 :     Py_XDECREF(one);

  004b0	48 83 7c 24 60
	00		 cmp	 QWORD PTR one$[rsp], 0
  004b6	74 0a		 je	 SHORT $LN2@count_elem
  004b8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR one$[rsp]
  004bd	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@count_elem:
  004c2	33 c0		 xor	 eax, eax
  004c4	85 c0		 test	 eax, eax
  004c6	75 e8		 jne	 SHORT $LN5@count_elem

; 1780 :     if (PyErr_Occurred())

  004c8	e8 00 00 00 00	 call	 PyErr_Occurred
  004cd	48 85 c0	 test	 rax, rax
  004d0	74 04		 je	 SHORT $LN1@count_elem

; 1781 :         return NULL;

  004d2	33 c0		 xor	 eax, eax
  004d4	eb 13		 jmp	 SHORT $LN51@count_elem
$LN1@count_elem:

; 1782 :     Py_RETURN_NONE;

  004d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  004dd	e8 00 00 00 00	 call	 _Py_IncRef
  004e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN51@count_elem:

; 1783 : }

  004e9	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  004f0	c3		 ret	 0
_count_elements ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@OKCEKBIC@_deque_reverse_iterator?$AA@	; `string'
PUBLIC	??_C@_0BA@HOOPPHCI@_deque_iterator?$AA@		; `string'
PUBLIC	??_C@_0M@KFHODHA@defaultdict?$AA@		; `string'
PUBLIC	??_C@_05BFLJBJIN@deque?$AA@			; `string'
PUBLIC	PyInit__collections
EXTRN	PyModule_AddObject:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__collections DD imagerel $LN8
	DD	imagerel $LN8+295
	DD	imagerel $unwind$PyInit__collections
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__collections DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BI@OKCEKBIC@_deque_reverse_iterator?$AA@
CONST	SEGMENT
??_C@_0BI@OKCEKBIC@_deque_reverse_iterator?$AA@ DB '_deque_reverse_iterat'
	DB	'or', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HOOPPHCI@_deque_iterator?$AA@
CONST	SEGMENT
??_C@_0BA@HOOPPHCI@_deque_iterator?$AA@ DB '_deque_iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KFHODHA@defaultdict?$AA@
CONST	SEGMENT
??_C@_0M@KFHODHA@defaultdict?$AA@ DB 'defaultdict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFLJBJIN@deque?$AA@
CONST	SEGMENT
??_C@_05BFLJBJIN@deque?$AA@ DB 'deque', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit__collections
_TEXT	SEGMENT
m$ = 32
PyInit__collections PROC				; COMDAT

; 1812 : {

$LN8:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1813 :     PyObject *m;
; 1814 : 
; 1815 :     m = PyModule_Create(&_collectionsmodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_collectionsmodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 20	 mov	 QWORD PTR m$[rsp], rax

; 1816 :     if (m == NULL)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR m$[rsp], 0
  00020	75 07		 jne	 SHORT $LN5@PyInit__co

; 1817 :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 f9 00 00 00	 jmp	 $LN6@PyInit__co
$LN5@PyInit__co:

; 1818 : 
; 1819 :     if (PyType_Ready(&deque_type) < 0)

  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deque_type
  00030	e8 00 00 00 00	 call	 PyType_Ready
  00035	85 c0		 test	 eax, eax
  00037	7d 07		 jge	 SHORT $LN4@PyInit__co

; 1820 :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 e2 00 00 00	 jmp	 $LN6@PyInit__co
$LN4@PyInit__co:

; 1821 :     Py_INCREF(&deque_type);

  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deque_type
  00047	e8 00 00 00 00	 call	 _Py_IncRef

; 1822 :     PyModule_AddObject(m, "deque", (PyObject *)&deque_type);

  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:deque_type
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05BFLJBJIN@deque?$AA@
  0005a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0005f	e8 00 00 00 00	 call	 PyModule_AddObject

; 1823 : 
; 1824 :     defdict_type.tp_base = &PyDict_Type;

  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  0006b	48 89 05 58 01
	00 00		 mov	 QWORD PTR defdict_type+344, rax

; 1825 :     if (PyType_Ready(&defdict_type) < 0)

  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:defdict_type
  00079	e8 00 00 00 00	 call	 PyType_Ready
  0007e	85 c0		 test	 eax, eax
  00080	7d 07		 jge	 SHORT $LN3@PyInit__co

; 1826 :         return NULL;

  00082	33 c0		 xor	 eax, eax
  00084	e9 99 00 00 00	 jmp	 $LN6@PyInit__co
$LN3@PyInit__co:

; 1827 :     Py_INCREF(&defdict_type);

  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:defdict_type
  00090	e8 00 00 00 00	 call	 _Py_IncRef

; 1828 :     PyModule_AddObject(m, "defaultdict", (PyObject *)&defdict_type);

  00095	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:defdict_type
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@KFHODHA@defaultdict?$AA@
  000a3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000a8	e8 00 00 00 00	 call	 PyModule_AddObject

; 1829 : 
; 1830 :     if (PyType_Ready(&dequeiter_type) < 0)

  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequeiter_type
  000b4	e8 00 00 00 00	 call	 PyType_Ready
  000b9	85 c0		 test	 eax, eax
  000bb	7d 04		 jge	 SHORT $LN2@PyInit__co

; 1831 :         return NULL;

  000bd	33 c0		 xor	 eax, eax
  000bf	eb 61		 jmp	 SHORT $LN6@PyInit__co
$LN2@PyInit__co:

; 1832 :     Py_INCREF(&dequeiter_type);

  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequeiter_type
  000c8	e8 00 00 00 00	 call	 _Py_IncRef

; 1833 :     PyModule_AddObject(m, "_deque_iterator", (PyObject *)&dequeiter_type);

  000cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:dequeiter_type
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@HOOPPHCI@_deque_iterator?$AA@
  000db	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000e0	e8 00 00 00 00	 call	 PyModule_AddObject

; 1834 : 
; 1835 :     if (PyType_Ready(&dequereviter_type) < 0)

  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequereviter_type
  000ec	e8 00 00 00 00	 call	 PyType_Ready
  000f1	85 c0		 test	 eax, eax
  000f3	7d 04		 jge	 SHORT $LN1@PyInit__co

; 1836 :         return NULL;

  000f5	33 c0		 xor	 eax, eax
  000f7	eb 29		 jmp	 SHORT $LN6@PyInit__co
$LN1@PyInit__co:

; 1837 :     Py_INCREF(&dequereviter_type);

  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dequereviter_type
  00100	e8 00 00 00 00	 call	 _Py_IncRef

; 1838 :     PyModule_AddObject(m, "_deque_reverse_iterator", (PyObject *)&dequereviter_type);

  00105	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:dequereviter_type
  0010c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@OKCEKBIC@_deque_reverse_iterator?$AA@
  00113	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00118	e8 00 00 00 00	 call	 PyModule_AddObject

; 1839 : 
; 1840 :     return m;

  0011d	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
$LN6@PyInit__co:

; 1841 : }

  00122	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00126	c3		 ret	 0
PyInit__collections ENDP
_TEXT	ENDS
END
