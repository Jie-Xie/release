; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_PyAccu_Init
EXTRN	PyList_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\accu.c
pdata	SEGMENT
$pdata$_PyAccu_Init DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$_PyAccu_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAccu_Init DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyAccu_Init
_TEXT	SEGMENT
acc$ = 48
_PyAccu_Init PROC					; COMDAT

; 19   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 20   :     /* Lazily allocated */
; 21   :     acc->large = NULL;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR acc$[rsp]
  0000e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 22   :     acc->small = PyList_New(0);

  00015	33 c9		 xor	 ecx, ecx
  00017	e8 00 00 00 00	 call	 PyList_New
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR acc$[rsp]
  00021	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 23   :     if (acc->small == NULL)

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR acc$[rsp]
  0002a	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002f	75 07		 jne	 SHORT $LN1@PyAccu_Ini

; 24   :         return -1;

  00031	b8 ff ff ff ff	 mov	 eax, -1
  00036	eb 02		 jmp	 SHORT $LN2@PyAccu_Ini
$LN1@PyAccu_Ini:

; 25   :     return 0;

  00038	33 c0		 xor	 eax, eax
$LN2@PyAccu_Ini:

; 26   : }

  0003a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003e	c3		 ret	 0
_PyAccu_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DC@FCOJIGGM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@GEFJELEF@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAa?$AAc?$AAc?$AAu?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	_PyAccu_Accumulate
EXTRN	PyList_Append:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyAccu_Accumulate DD imagerel $LN6
	DD	imagerel $LN6+144
	DD	imagerel $unwind$_PyAccu_Accumulate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAccu_Accumulate DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1DC@FCOJIGGM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@FCOJIGGM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@GEFJELEF@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAa?$AAc?$AAc?$AAu?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@GEFJELEF@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAa?$AAc?$AAc?$AAu?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'a', 00H, 'c', 00H, 'c'
	DB	00H, 'u', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyAccu_Accumulate
_TEXT	SEGMENT
nsmall$ = 32
acc$ = 64
unicode$ = 72
_PyAccu_Accumulate PROC					; COMDAT

; 56   : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 57   :     Py_ssize_t nsmall;
; 58   :     assert(PyUnicode_Check(unicode));

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR unicode$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00022	85 c0		 test	 eax, eax
  00024	75 1c		 jne	 SHORT $LN5@PyAccu_Acc
  00026	41 b8 3a 00 00
	00		 mov	 r8d, 58			; 0000003aH
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@GEFJELEF@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAa?$AAc?$AAc?$AAu?$AA?4?$AAc?$AA?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@FCOJIGGM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00040	33 c0		 xor	 eax, eax
$LN5@PyAccu_Acc:

; 59   : 
; 60   :     if (PyList_Append(acc->small, unicode))

  00042	48 8b 54 24 48	 mov	 rdx, QWORD PTR unicode$[rsp]
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR acc$[rsp]
  0004c	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00050	e8 00 00 00 00	 call	 PyList_Append
  00055	85 c0		 test	 eax, eax
  00057	74 07		 je	 SHORT $LN2@PyAccu_Acc

; 61   :         return -1;

  00059	b8 ff ff ff ff	 mov	 eax, -1
  0005e	eb 2b		 jmp	 SHORT $LN3@PyAccu_Acc
$LN2@PyAccu_Acc:

; 62   :     nsmall = PyList_GET_SIZE(acc->small);

  00060	48 8b 44 24 40	 mov	 rax, QWORD PTR acc$[rsp]
  00065	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00069	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006d	48 89 44 24 20	 mov	 QWORD PTR nsmall$[rsp], rax

; 63   :     /* Each item in a list of unicode objects has an overhead (in 64-bit
; 64   :      * builds) of:
; 65   :      *   - 8 bytes for the list slot
; 66   :      *   - 56 bytes for the header of the unicode object
; 67   :      * that is, 64 bytes.  100000 such objects waste more than 6MB
; 68   :      * compared to a single concatenated string.
; 69   :      */
; 70   :     if (nsmall < 100000)

  00072	48 81 7c 24 20
	a0 86 01 00	 cmp	 QWORD PTR nsmall$[rsp], 100000 ; 000186a0H
  0007b	7d 04		 jge	 SHORT $LN1@PyAccu_Acc

; 71   :         return 0;

  0007d	33 c0		 xor	 eax, eax
  0007f	eb 0a		 jmp	 SHORT $LN3@PyAccu_Acc
$LN1@PyAccu_Acc:

; 72   :     return flush_accumulator(acc);

  00081	48 8b 4c 24 40	 mov	 rcx, QWORD PTR acc$[rsp]
  00086	e8 00 00 00 00	 call	 flush_accumulator
$LN3@PyAccu_Acc:

; 73   : }

  0008b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008f	c3		 ret	 0
_PyAccu_Accumulate ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
EXTRN	PyList_SetSlice:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$flush_accumulator DD imagerel flush_accumulator
	DD	imagerel flush_accumulator+207
	DD	imagerel $unwind$flush_accumulator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$flush_accumulator DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT flush_accumulator
_TEXT	SEGMENT
nsmall$ = 32
joined$20332 = 40
ret$20331 = 48
acc$ = 80
flush_accumulator PROC					; COMDAT

; 30   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 31   :     Py_ssize_t nsmall = PyList_GET_SIZE(acc->small);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  0000e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00012	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00016	48 89 44 24 20	 mov	 QWORD PTR nsmall$[rsp], rax

; 32   :     if (nsmall) {

  0001b	48 83 7c 24 20
	00		 cmp	 QWORD PTR nsmall$[rsp], 0
  00021	0f 84 a1 00 00
	00		 je	 $LN5@flush_accu

; 33   :         int ret;
; 34   :         PyObject *joined;
; 35   :         if (acc->large == NULL) {

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  0002c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00030	75 21		 jne	 SHORT $LN4@flush_accu

; 36   :             acc->large = PyList_New(0);

  00032	33 c9		 xor	 ecx, ecx
  00034	e8 00 00 00 00	 call	 PyList_New
  00039	48 8b 4c 24 50	 mov	 rcx, QWORD PTR acc$[rsp]
  0003e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 37   :             if (acc->large == NULL)

  00041	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  00046	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0004a	75 07		 jne	 SHORT $LN3@flush_accu

; 38   :                 return -1;

  0004c	b8 ff ff ff ff	 mov	 eax, -1
  00051	eb 77		 jmp	 SHORT $LN6@flush_accu
$LN3@flush_accu:
$LN4@flush_accu:

; 39   :         }
; 40   :         joined = join_list_unicode(acc->small);

  00053	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  00058	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005c	e8 00 00 00 00	 call	 join_list_unicode
  00061	48 89 44 24 28	 mov	 QWORD PTR joined$20332[rsp], rax

; 41   :         if (joined == NULL)

  00066	48 83 7c 24 28
	00		 cmp	 QWORD PTR joined$20332[rsp], 0
  0006c	75 07		 jne	 SHORT $LN2@flush_accu

; 42   :             return -1;

  0006e	b8 ff ff ff ff	 mov	 eax, -1
  00073	eb 55		 jmp	 SHORT $LN6@flush_accu
$LN2@flush_accu:

; 43   :         if (PyList_SetSlice(acc->small, 0, nsmall, NULL)) {

  00075	45 33 c9	 xor	 r9d, r9d
  00078	4c 8b 44 24 20	 mov	 r8, QWORD PTR nsmall$[rsp]
  0007d	33 d2		 xor	 edx, edx
  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  00084	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00088	e8 00 00 00 00	 call	 PyList_SetSlice
  0008d	85 c0		 test	 eax, eax
  0008f	74 11		 je	 SHORT $LN1@flush_accu

; 44   :             Py_DECREF(joined);

  00091	48 8b 4c 24 28	 mov	 rcx, QWORD PTR joined$20332[rsp]
  00096	e8 00 00 00 00	 call	 _Py_DecRef

; 45   :             return -1;

  0009b	b8 ff ff ff ff	 mov	 eax, -1
  000a0	eb 28		 jmp	 SHORT $LN6@flush_accu
$LN1@flush_accu:

; 46   :         }
; 47   :         ret = PyList_Append(acc->large, joined);

  000a2	48 8b 54 24 28	 mov	 rdx, QWORD PTR joined$20332[rsp]
  000a7	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  000ac	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000af	e8 00 00 00 00	 call	 PyList_Append
  000b4	89 44 24 30	 mov	 DWORD PTR ret$20331[rsp], eax

; 48   :         Py_DECREF(joined);

  000b8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR joined$20332[rsp]
  000bd	e8 00 00 00 00	 call	 _Py_DecRef

; 49   :         return ret;

  000c2	8b 44 24 30	 mov	 eax, DWORD PTR ret$20331[rsp]
  000c6	eb 02		 jmp	 SHORT $LN6@flush_accu
$LN5@flush_accu:

; 50   :     }
; 51   :     return 0;

  000c8	33 c0		 xor	 eax, eax
$LN6@flush_accu:

; 52   : }

  000ca	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ce	c3		 ret	 0
flush_accumulator ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyUnicode_Join:PROC
EXTRN	PyUnicode_FromStringAndSize:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\accu.c
pdata	SEGMENT
$pdata$join_list_unicode DD imagerel join_list_unicode
	DD	imagerel join_list_unicode+68
	DD	imagerel $unwind$join_list_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$join_list_unicode DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT join_list_unicode
_TEXT	SEGMENT
ret$ = 32
sep$ = 40
lst$ = 64
join_list_unicode PROC					; COMDAT

; 8    : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 9    :     /* return ''.join(lst) */
; 10   :     PyObject *sep, *ret;
; 11   :     sep = PyUnicode_FromStringAndSize("", 0);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00012	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  00017	48 89 44 24 28	 mov	 QWORD PTR sep$[rsp], rax

; 12   :     ret = PyUnicode_Join(sep, lst);

  0001c	48 8b 54 24 40	 mov	 rdx, QWORD PTR lst$[rsp]
  00021	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sep$[rsp]
  00026	e8 00 00 00 00	 call	 PyUnicode_Join
  0002b	48 89 44 24 20	 mov	 QWORD PTR ret$[rsp], rax

; 13   :     Py_DECREF(sep);

  00030	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sep$[rsp]
  00035	e8 00 00 00 00	 call	 _Py_DecRef

; 14   :     return ret;

  0003a	48 8b 44 24 20	 mov	 rax, QWORD PTR ret$[rsp]

; 15   : }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
join_list_unicode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@PLNFJNEA@_PyAccu_FinishAsList?$AA@	; `string'
PUBLIC	??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@	; `string'
PUBLIC	_PyAccu_FinishAsList
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyAccu_FinishAsList DD imagerel $LN12
	DD	imagerel $LN12+267
	DD	imagerel $unwind$_PyAccu_FinishAsList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAccu_FinishAsList DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BF@PLNFJNEA@_PyAccu_FinishAsList?$AA@
CONST	SEGMENT
??_C@_0BF@PLNFJNEA@_PyAccu_FinishAsList?$AA@ DB '_PyAccu_FinishAsList', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@
CONST	SEGMENT
??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@ DB '..\Objects\accu.c', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyAccu_FinishAsList
_TEXT	SEGMENT
res$ = 48
ret$ = 56
_py_tmp$20367 = 64
_py_tmp$20376 = 72
acc$ = 96
_PyAccu_FinishAsList PROC				; COMDAT

; 77   : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 78   :     int ret;
; 79   :     PyObject *res;
; 80   : 
; 81   :     ret = flush_accumulator(acc);

  00009	48 8b 4c 24 60	 mov	 rcx, QWORD PTR acc$[rsp]
  0000e	e8 00 00 00 00	 call	 flush_accumulator
  00013	89 44 24 38	 mov	 DWORD PTR ret$[rsp], eax
$LN9@PyAccu_Fin:

; 82   :     Py_CLEAR(acc->small);

  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR acc$[rsp]
  0001c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00021	74 53		 je	 SHORT $LN6@PyAccu_Fin
  00023	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002b	48 8b 44 24 60	 mov	 rax, QWORD PTR acc$[rsp]
  00030	4c 8b 48 08	 mov	 r9, QWORD PTR [rax+8]
  00034	41 b8 52 00 00
	00		 mov	 r8d, 82			; 00000052H
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@PLNFJNEA@_PyAccu_FinishAsList?$AA@
  00048	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004d	85 c0		 test	 eax, eax
  0004f	75 25		 jne	 SHORT $LN6@PyAccu_Fin
  00051	48 8b 44 24 60	 mov	 rax, QWORD PTR acc$[rsp]
  00056	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005a	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$20367[rsp], rax
  0005f	48 8b 44 24 60	 mov	 rax, QWORD PTR acc$[rsp]
  00064	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  0006c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$20367[rsp]
  00071	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyAccu_Fin:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 9b		 jne	 SHORT $LN9@PyAccu_Fin

; 83   :     if (ret) {

  0007c	83 7c 24 38 00	 cmp	 DWORD PTR ret$[rsp], 0
  00081	74 65		 je	 SHORT $LN5@PyAccu_Fin
$LN4@PyAccu_Fin:

; 84   :         Py_CLEAR(acc->large);

  00083	48 8b 44 24 60	 mov	 rax, QWORD PTR acc$[rsp]
  00088	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0008c	74 50		 je	 SHORT $LN1@PyAccu_Fin
  0008e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00096	48 8b 44 24 60	 mov	 rax, QWORD PTR acc$[rsp]
  0009b	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  0009e	41 b8 54 00 00
	00		 mov	 r8d, 84			; 00000054H
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@PLNFJNEA@_PyAccu_FinishAsList?$AA@
  000b2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b7	85 c0		 test	 eax, eax
  000b9	75 23		 jne	 SHORT $LN1@PyAccu_Fin
  000bb	48 8b 44 24 60	 mov	 rax, QWORD PTR acc$[rsp]
  000c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c3	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$20376[rsp], rax
  000c8	48 8b 44 24 60	 mov	 rax, QWORD PTR acc$[rsp]
  000cd	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000d4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$20376[rsp]
  000d9	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyAccu_Fin:
  000de	33 c0		 xor	 eax, eax
  000e0	85 c0		 test	 eax, eax
  000e2	75 9f		 jne	 SHORT $LN4@PyAccu_Fin

; 85   :         return NULL;

  000e4	33 c0		 xor	 eax, eax
  000e6	eb 1e		 jmp	 SHORT $LN10@PyAccu_Fin
$LN5@PyAccu_Fin:

; 86   :     }
; 87   :     res = acc->large;

  000e8	48 8b 44 24 60	 mov	 rax, QWORD PTR acc$[rsp]
  000ed	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f0	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 88   :     acc->large = NULL;

  000f5	48 8b 44 24 60	 mov	 rax, QWORD PTR acc$[rsp]
  000fa	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 89   :     return res;

  00101	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN10@PyAccu_Fin:

; 90   : }

  00106	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0010a	c3		 ret	 0
_PyAccu_FinishAsList ENDP
_TEXT	ENDS
PUBLIC	_PyAccu_Finish
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyAccu_Finish DD imagerel $LN6
	DD	imagerel $LN6+111
	DD	imagerel $unwind$_PyAccu_Finish
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAccu_Finish DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyAccu_Finish
_TEXT	SEGMENT
res$ = 32
list$ = 40
acc$ = 64
_PyAccu_Finish PROC					; COMDAT

; 94   : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 95   :     PyObject *list, *res;
; 96   :     if (acc->large == NULL) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR acc$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	75 1d		 jne	 SHORT $LN3@PyAccu_Fin@2

; 97   :         list = acc->small;

  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR acc$[rsp]
  00019	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR list$[rsp], rax

; 98   :         acc->small = NULL;

  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR acc$[rsp]
  00027	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 99   :     }
; 100  :     else {

  0002f	eb 1b		 jmp	 SHORT $LN2@PyAccu_Fin@2
$LN3@PyAccu_Fin@2:

; 101  :         list = _PyAccu_FinishAsList(acc);

  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR acc$[rsp]
  00036	e8 00 00 00 00	 call	 _PyAccu_FinishAsList
  0003b	48 89 44 24 28	 mov	 QWORD PTR list$[rsp], rax

; 102  :         if (!list)

  00040	48 83 7c 24 28
	00		 cmp	 QWORD PTR list$[rsp], 0
  00046	75 04		 jne	 SHORT $LN1@PyAccu_Fin@2

; 103  :             return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	eb 1e		 jmp	 SHORT $LN4@PyAccu_Fin@2
$LN1@PyAccu_Fin@2:
$LN2@PyAccu_Fin@2:

; 104  :     }
; 105  :     res = join_list_unicode(list);

  0004c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR list$[rsp]
  00051	e8 00 00 00 00	 call	 join_list_unicode
  00056	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 106  :     Py_DECREF(list);

  0005b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR list$[rsp]
  00060	e8 00 00 00 00	 call	 _Py_DecRef

; 107  :     return res;

  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN4@PyAccu_Fin@2:

; 108  : }

  0006a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006e	c3		 ret	 0
_PyAccu_Finish ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@FNMAMFNH@_PyAccu_Destroy?$AA@		; `string'
PUBLIC	_PyAccu_Destroy
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyAccu_Destroy DD imagerel $LN11
	DD	imagerel $LN11+212
	DD	imagerel $unwind$_PyAccu_Destroy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAccu_Destroy DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BA@FNMAMFNH@_PyAccu_Destroy?$AA@
CONST	SEGMENT
??_C@_0BA@FNMAMFNH@_PyAccu_Destroy?$AA@ DB '_PyAccu_Destroy', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyAccu_Destroy
_TEXT	SEGMENT
_py_tmp$20402 = 48
_py_tmp$20410 = 56
acc$ = 80
_PyAccu_Destroy PROC					; COMDAT

; 112  : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN8@PyAccu_Des:

; 113  :     Py_CLEAR(acc->small);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  0000e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00013	74 53		 je	 SHORT $LN5@PyAccu_Des
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  00022	4c 8b 48 08	 mov	 r9, QWORD PTR [rax+8]
  00026	41 b8 71 00 00
	00		 mov	 r8d, 113		; 00000071H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FNMAMFNH@_PyAccu_Destroy?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN5@PyAccu_Des
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  00048	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20402[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  00056	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20402[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyAccu_Des:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN8@PyAccu_Des
$LN4@PyAccu_Des:

; 114  :     Py_CLEAR(acc->large);

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  00073	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00077	74 50		 je	 SHORT $LN1@PyAccu_Des
  00079	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00081	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  00086	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  00089	41 b8 72 00 00
	00		 mov	 r8d, 114		; 00000072H
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAMOHJF@?4?4?2Objects?2accu?4c?$AA@
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FNMAMFNH@_PyAccu_Destroy?$AA@
  0009d	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a2	85 c0		 test	 eax, eax
  000a4	75 23		 jne	 SHORT $LN1@PyAccu_Des
  000a6	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  000ab	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ae	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20410[rsp], rax
  000b3	48 8b 44 24 50	 mov	 rax, QWORD PTR acc$[rsp]
  000b8	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000bf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20410[rsp]
  000c4	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyAccu_Des:
  000c9	33 c0		 xor	 eax, eax
  000cb	85 c0		 test	 eax, eax
  000cd	75 9f		 jne	 SHORT $LN4@PyAccu_Des

; 115  : }

  000cf	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d3	c3		 ret	 0
_PyAccu_Destroy ENDP
_TEXT	ENDS
END
