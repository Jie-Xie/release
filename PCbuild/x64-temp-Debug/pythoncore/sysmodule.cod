; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_03PIADFGHL@sys?$AA@			; `string'
PUBLIC	??_C@_0L@DIPKOOGN@cpython?933?$AA@		; `string'
PUBLIC	??_C@_07EOMJFIDL@cpython?$AA@			; `string'
PUBLIC	??_C@_0BB@DNJDILJD@sys?4version_info?$AA@	; `string'
PUBLIC	??_C@_0BG@GIMBGDAI@Serial?5release?5number?$AA@	; `string'
PUBLIC	??_C@_06KCELPKEE@serial?$AA@			; `string'
PUBLIC	??_C@_0CL@HEOEKGNF@?8alpha?8?0?5?8beta?8?0?5?8candidate?8?0?5or@ ; `string'
PUBLIC	??_C@_0N@KAHPCFIL@releaselevel?$AA@		; `string'
PUBLIC	??_C@_0BF@JHPIGCCC@Patch?5release?5number?$AA@	; `string'
PUBLIC	??_C@_05PCPGMEFP@micro?$AA@			; `string'
PUBLIC	??_C@_0BF@LOMFDHHP@Minor?5release?5number?$AA@	; `string'
PUBLIC	??_C@_0BF@MKHGOMCP@Major?5release?5number?$AA@	; `string'
PUBLIC	??_C@_09KICJBJND@sys?4flags?$AA@		; `string'
PUBLIC	??_C@_02LIKGMMII@?9R?$AA@			; `string'
PUBLIC	??_C@_0BD@CKHJKECB@hash_randomization?$AA@	; `string'
PUBLIC	??_C@_02GAPLLOJ@?9q?$AA@			; `string'
PUBLIC	??_C@_05PMBAOCDH@quiet?$AA@			; `string'
PUBLIC	??_C@_02GHOAPKHL@?9b?$AA@			; `string'
PUBLIC	??_C@_0O@NKLJCOA@bytes_warning?$AA@		; `string'
PUBLIC	??_C@_02EJEOCNCO@?9v?$AA@			; `string'
PUBLIC	??_C@_07KBAMPNJK@verbose?$AA@			; `string'
PUBLIC	??_C@_02LNCFEIBO@?9E?$AA@			; `string'
PUBLIC	??_C@_0BD@OHBIJAIF@ignore_environment?$AA@	; `string'
PUBLIC	??_C@_02KBLNPNMJ@?9S?$AA@			; `string'
PUBLIC	??_C@_07GMLEGJMJ@no_site?$AA@			; `string'
PUBLIC	??_C@_02DEDJNJGL@?9s?$AA@			; `string'
PUBLIC	??_C@_0N@MBFKKMMD@no_user_site?$AA@		; `string'
PUBLIC	??_C@_02PCGENONJ@?9B?$AA@			; `string'
PUBLIC	??_C@_0BE@CMMEJPLN@dont_write_bytecode?$AA@	; `string'
PUBLIC	??_C@_09PKCBOAHP@?9O?5or?5?9OO?$AA@		; `string'
PUBLIC	??_C@_08GHMAOHAP@optimize?$AA@			; `string'
PUBLIC	??_C@_0M@JFHLOKPA@interactive?$AA@		; `string'
PUBLIC	??_C@_02IEBECDLA@?9i?$AA@			; `string'
PUBLIC	??_C@_07PHKOPNKE@inspect?$AA@			; `string'
PUBLIC	??_C@_02DBLKFNPN@?9d?$AA@			; `string'
PUBLIC	??_C@_05GFCDIDHO@debug?$AA@			; `string'
PUBLIC	??_C@_0BC@POJOHICO@_debugmallocstats?$AA@	; `string'
PUBLIC	??_C@_0N@KMLHGNOF@call_tracing?$AA@		; `string'
PUBLIC	??_C@_08GDPINLFO@gettrace?$AA@			; `string'
PUBLIC	??_C@_08JCNEMICD@settrace?$AA@			; `string'
PUBLIC	??_C@_0BC@CJNNCJOO@setrecursionlimit?$AA@	; `string'
PUBLIC	??_C@_0L@FAAIOKJK@getprofile?$AA@		; `string'
PUBLIC	??_C@_0L@EOCHFNND@setprofile?$AA@		; `string'
PUBLIC	??_C@_0BC@BHBGOHLO@getswitchinterval?$AA@	; `string'
PUBLIC	??_C@_0BC@DCBNGMKA@setswitchinterval?$AA@	; `string'
PUBLIC	??_C@_0BB@GGHHFLMK@getcheckinterval?$AA@	; `string'
PUBLIC	??_C@_0BB@CCOOFHI@setcheckinterval?$AA@		; `string'
PUBLIC	??_C@_06OCOCPMLE@intern?$AA@			; `string'
PUBLIC	??_C@_0BC@NJOPCOOO@getwindowsversion?$AA@	; `string'
PUBLIC	??_C@_09GKOEPENJ@_getframe?$AA@			; `string'
PUBLIC	??_C@_09CMGNPIEG@getsizeof?$AA@			; `string'
PUBLIC	??_C@_0BC@MNGKCPA@getrecursionlimit?$AA@	; `string'
PUBLIC	??_C@_0M@GIAAAIMC@getrefcount?$AA@		; `string'
PUBLIC	??_C@_0BB@GDBDEFKM@gettotalrefcount?$AA@	; `string'
PUBLIC	??_C@_0L@OEDABJML@getobjects?$AA@		; `string'
PUBLIC	??_C@_0BG@PHHGLMBK@getfilesystemencoding?$AA@	; `string'
PUBLIC	??_C@_0BD@OAPOKCOC@getdefaultencoding?$AA@	; `string'
PUBLIC	??_C@_04MKNBDEPB@exit?$AA@			; `string'
PUBLIC	??_C@_0L@NONONIOP@excepthook?$AA@		; `string'
PUBLIC	??_C@_08NGNFBMDD@exc_info?$AA@			; `string'
PUBLIC	??_C@_0M@OABHHABA@displayhook?$AA@		; `string'
PUBLIC	??_C@_0BA@DMNJMFCA@_current_frames?$AA@		; `string'
PUBLIC	??_C@_0BC@BEPIHGAL@_clear_type_cache?$AA@	; `string'
PUBLIC	??_C@_09PDHLGNMH@callstats?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_07DLHCIBDH@default?$AA@			; `string'
PUBLIC	??_C@_06IEOJBDIK@object?$AA@			; `string'
PUBLIC	??_C@_0BG@IEPEIABL@sys?4getwindowsversion?$AA@	; `string'
PUBLIC	??_C@_0BE@OMEOIKCM@System?5product?5type?$AA@	; `string'
PUBLIC	??_C@_0N@MOJPCNBF@product_type?$AA@		; `string'
PUBLIC	??_C@_0CO@GOCNOCCF@Bit?5mask?5identifying?5available?5p@ ; `string'
PUBLIC	??_C@_0L@CNNCACDH@suite_mask?$AA@		; `string'
PUBLIC	??_C@_0CC@IKCJAIGH@Service?5Pack?5minor?5version?5numbe@ ; `string'
PUBLIC	??_C@_0BD@CENDDB@service_pack_minor?$AA@	; `string'
PUBLIC	??_C@_0CC@POJKNDDH@Service?5Pack?5major?5version?5numbe@ ; `string'
PUBLIC	??_C@_0BD@LPDGAPKH@service_pack_major?$AA@	; `string'
PUBLIC	??_C@_0CM@JMPIOEPN@Latest?5Service?5Pack?5installed?5on@ ; `string'
PUBLIC	??_C@_0N@CGHPFCLJ@service_pack?$AA@		; `string'
PUBLIC	??_C@_0BK@MILMMMCK@Operating?5system?5platform?$AA@ ; `string'
PUBLIC	??_C@_08CBHCFJJK@platform?$AA@			; `string'
PUBLIC	??_C@_0N@KKPGKAMF@Build?5number?$AA@		; `string'
PUBLIC	??_C@_05DMEBLLNM@build?$AA@			; `string'
PUBLIC	??_C@_0BF@JMHJKOJE@Minor?5version?5number?$AA@	; `string'
PUBLIC	??_C@_05OLAOEALN@minor?$AA@			; `string'
PUBLIC	??_C@_0BF@OIMKHFME@Major?5version?5number?$AA@	; `string'
PUBLIC	??_C@_05FEBMJMCL@major?$AA@			; `string'
PUBLIC	??_C@_0O@NIHDLFJ@sys?4hash_info?$AA@		; `string'
PUBLIC	??_C@_0DL@GNKDLGEF@multiplier?5used?5for?5the?5imaginar@ ; `string'
PUBLIC	??_C@_04HBKGOHH@imag?$AA@			; `string'
PUBLIC	??_C@_0CD@FMLNIOBD@value?5to?5be?5used?5for?5hash?5of?5a?5n@ ; `string'
PUBLIC	??_C@_03LHCJEHON@nan?$AA@			; `string'
PUBLIC	??_C@_0DB@JFCIJPEO@value?5to?5be?5used?5for?5hash?5of?5a?5p@ ; `string'
PUBLIC	??_C@_03OJHLLCGB@inf?$AA@			; `string'
PUBLIC	??_C@_0EE@JNKOINOJ@prime?5number?5giving?5the?5modulus?5@ ; `string'
PUBLIC	??_C@_07CJECEDDG@modulus?$AA@			; `string'
PUBLIC	??_C@_0CM@ELCDEPAM@width?5of?5the?5type?5used?5for?5hashi@ ; `string'
PUBLIC	??_C@_05IGKADHGO@width?$AA@			; `string'
PUBLIC	??_C@_08CPGIAEAH@c_return?$AA@			; `string'
PUBLIC	??_C@_0M@DCFEPNBK@c_exception?$AA@		; `string'
PUBLIC	??_C@_06PAJIEHMP@c_call?$AA@			; `string'
PUBLIC	??_C@_06LNOFJDNM@return?$AA@			; `string'
PUBLIC	??_C@_04HJPCFDOP@line?$AA@			; `string'
PUBLIC	??_C@_09BOIBMEBJ@exception?$AA@			; `string'
PUBLIC	??_C@_04OMFAIDPG@call?$AA@			; `string'
PUBLIC	??_C@_01IDAFKMJL@_?$AA@				; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_06HOHPNJLC@buffer?$AA@			; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	_PySys_ImplName
PUBLIC	_PySys_ImplCacheTag
EXTRN	_Py_GetObjects:PROC
EXTRN	PyEval_GetCallStats:PROC
_BSS	SEGMENT
whatstrings DQ	07H DUP (?)
WindowsVersionType DB 01e0H DUP (?)
?gc_head_size@?1??sys_getsizeof@@9@9 DQ 01H DUP (?)	; `sys_getsizeof'::`2'::gc_head_size
warnoptions DQ	01H DUP (?)
xoptions DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PIADFGHL@sys?$AA@
CONST	SEGMENT
??_C@_03PIADFGHL@sys?$AA@ DB 'sys', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DIPKOOGN@cpython?933?$AA@
CONST	SEGMENT
??_C@_0L@DIPKOOGN@cpython?933?$AA@ DB 'cpython-33', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EOMJFIDL@cpython?$AA@
CONST	SEGMENT
??_C@_07EOMJFIDL@cpython?$AA@ DB 'cpython', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DNJDILJD@sys?4version_info?$AA@
CONST	SEGMENT
??_C@_0BB@DNJDILJD@sys?4version_info?$AA@ DB 'sys.version_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GIMBGDAI@Serial?5release?5number?$AA@
CONST	SEGMENT
??_C@_0BG@GIMBGDAI@Serial?5release?5number?$AA@ DB 'Serial release number'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06KCELPKEE@serial?$AA@
CONST	SEGMENT
??_C@_06KCELPKEE@serial?$AA@ DB 'serial', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HEOEKGNF@?8alpha?8?0?5?8beta?8?0?5?8candidate?8?0?5or@
CONST	SEGMENT
??_C@_0CL@HEOEKGNF@?8alpha?8?0?5?8beta?8?0?5?8candidate?8?0?5or@ DB '''al'
	DB	'pha'', ''beta'', ''candidate'', or ''release''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KAHPCFIL@releaselevel?$AA@
CONST	SEGMENT
??_C@_0N@KAHPCFIL@releaselevel?$AA@ DB 'releaselevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JHPIGCCC@Patch?5release?5number?$AA@
CONST	SEGMENT
??_C@_0BF@JHPIGCCC@Patch?5release?5number?$AA@ DB 'Patch release number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PCPGMEFP@micro?$AA@
CONST	SEGMENT
??_C@_05PCPGMEFP@micro?$AA@ DB 'micro', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LOMFDHHP@Minor?5release?5number?$AA@
CONST	SEGMENT
??_C@_0BF@LOMFDHHP@Minor?5release?5number?$AA@ DB 'Minor release number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MKHGOMCP@Major?5release?5number?$AA@
CONST	SEGMENT
??_C@_0BF@MKHGOMCP@Major?5release?5number?$AA@ DB 'Major release number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KICJBJND@sys?4flags?$AA@
CONST	SEGMENT
??_C@_09KICJBJND@sys?4flags?$AA@ DB 'sys.flags', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LIKGMMII@?9R?$AA@
CONST	SEGMENT
??_C@_02LIKGMMII@?9R?$AA@ DB '-R', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKHJKECB@hash_randomization?$AA@
CONST	SEGMENT
??_C@_0BD@CKHJKECB@hash_randomization?$AA@ DB 'hash_randomization', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GAPLLOJ@?9q?$AA@
CONST	SEGMENT
??_C@_02GAPLLOJ@?9q?$AA@ DB '-q', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PMBAOCDH@quiet?$AA@
CONST	SEGMENT
??_C@_05PMBAOCDH@quiet?$AA@ DB 'quiet', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GHOAPKHL@?9b?$AA@
CONST	SEGMENT
??_C@_02GHOAPKHL@?9b?$AA@ DB '-b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NKLJCOA@bytes_warning?$AA@
CONST	SEGMENT
??_C@_0O@NKLJCOA@bytes_warning?$AA@ DB 'bytes_warning', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02EJEOCNCO@?9v?$AA@
CONST	SEGMENT
??_C@_02EJEOCNCO@?9v?$AA@ DB '-v', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBAMPNJK@verbose?$AA@
CONST	SEGMENT
??_C@_07KBAMPNJK@verbose?$AA@ DB 'verbose', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LNCFEIBO@?9E?$AA@
CONST	SEGMENT
??_C@_02LNCFEIBO@?9E?$AA@ DB '-E', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OHBIJAIF@ignore_environment?$AA@
CONST	SEGMENT
??_C@_0BD@OHBIJAIF@ignore_environment?$AA@ DB 'ignore_environment', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KBLNPNMJ@?9S?$AA@
CONST	SEGMENT
??_C@_02KBLNPNMJ@?9S?$AA@ DB '-S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMLEGJMJ@no_site?$AA@
CONST	SEGMENT
??_C@_07GMLEGJMJ@no_site?$AA@ DB 'no_site', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DEDJNJGL@?9s?$AA@
CONST	SEGMENT
??_C@_02DEDJNJGL@?9s?$AA@ DB '-s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MBFKKMMD@no_user_site?$AA@
CONST	SEGMENT
??_C@_0N@MBFKKMMD@no_user_site?$AA@ DB 'no_user_site', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCGENONJ@?9B?$AA@
CONST	SEGMENT
??_C@_02PCGENONJ@?9B?$AA@ DB '-B', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CMMEJPLN@dont_write_bytecode?$AA@
CONST	SEGMENT
??_C@_0BE@CMMEJPLN@dont_write_bytecode?$AA@ DB 'dont_write_bytecode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PKCBOAHP@?9O?5or?5?9OO?$AA@
CONST	SEGMENT
??_C@_09PKCBOAHP@?9O?5or?5?9OO?$AA@ DB '-O or -OO', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHMAOHAP@optimize?$AA@
CONST	SEGMENT
??_C@_08GHMAOHAP@optimize?$AA@ DB 'optimize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JFHLOKPA@interactive?$AA@
CONST	SEGMENT
??_C@_0M@JFHLOKPA@interactive?$AA@ DB 'interactive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02IEBECDLA@?9i?$AA@
CONST	SEGMENT
??_C@_02IEBECDLA@?9i?$AA@ DB '-i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PHKOPNKE@inspect?$AA@
CONST	SEGMENT
??_C@_07PHKOPNKE@inspect?$AA@ DB 'inspect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DBLKFNPN@?9d?$AA@
CONST	SEGMENT
??_C@_02DBLKFNPN@?9d?$AA@ DB '-d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFCDIDHO@debug?$AA@
CONST	SEGMENT
??_C@_05GFCDIDHO@debug?$AA@ DB 'debug', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@POJOHICO@_debugmallocstats?$AA@
CONST	SEGMENT
??_C@_0BC@POJOHICO@_debugmallocstats?$AA@ DB '_debugmallocstats', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KMLHGNOF@call_tracing?$AA@
CONST	SEGMENT
??_C@_0N@KMLHGNOF@call_tracing?$AA@ DB 'call_tracing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDPINLFO@gettrace?$AA@
CONST	SEGMENT
??_C@_08GDPINLFO@gettrace?$AA@ DB 'gettrace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JCNEMICD@settrace?$AA@
CONST	SEGMENT
??_C@_08JCNEMICD@settrace?$AA@ DB 'settrace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CJNNCJOO@setrecursionlimit?$AA@
CONST	SEGMENT
??_C@_0BC@CJNNCJOO@setrecursionlimit?$AA@ DB 'setrecursionlimit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FAAIOKJK@getprofile?$AA@
CONST	SEGMENT
??_C@_0L@FAAIOKJK@getprofile?$AA@ DB 'getprofile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EOCHFNND@setprofile?$AA@
CONST	SEGMENT
??_C@_0L@EOCHFNND@setprofile?$AA@ DB 'setprofile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BHBGOHLO@getswitchinterval?$AA@
CONST	SEGMENT
??_C@_0BC@BHBGOHLO@getswitchinterval?$AA@ DB 'getswitchinterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DCBNGMKA@setswitchinterval?$AA@
CONST	SEGMENT
??_C@_0BC@DCBNGMKA@setswitchinterval?$AA@ DB 'setswitchinterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGHHFLMK@getcheckinterval?$AA@
CONST	SEGMENT
??_C@_0BB@GGHHFLMK@getcheckinterval?$AA@ DB 'getcheckinterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CCOOFHI@setcheckinterval?$AA@
CONST	SEGMENT
??_C@_0BB@CCOOFHI@setcheckinterval?$AA@ DB 'setcheckinterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OCOCPMLE@intern?$AA@
CONST	SEGMENT
??_C@_06OCOCPMLE@intern?$AA@ DB 'intern', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NJOPCOOO@getwindowsversion?$AA@
CONST	SEGMENT
??_C@_0BC@NJOPCOOO@getwindowsversion?$AA@ DB 'getwindowsversion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GKOEPENJ@_getframe?$AA@
CONST	SEGMENT
??_C@_09GKOEPENJ@_getframe?$AA@ DB '_getframe', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CMGNPIEG@getsizeof?$AA@
CONST	SEGMENT
??_C@_09CMGNPIEG@getsizeof?$AA@ DB 'getsizeof', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MNGKCPA@getrecursionlimit?$AA@
CONST	SEGMENT
??_C@_0BC@MNGKCPA@getrecursionlimit?$AA@ DB 'getrecursionlimit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GIAAAIMC@getrefcount?$AA@
CONST	SEGMENT
??_C@_0M@GIAAAIMC@getrefcount?$AA@ DB 'getrefcount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GDBDEFKM@gettotalrefcount?$AA@
CONST	SEGMENT
??_C@_0BB@GDBDEFKM@gettotalrefcount?$AA@ DB 'gettotalrefcount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OEDABJML@getobjects?$AA@
CONST	SEGMENT
??_C@_0L@OEDABJML@getobjects?$AA@ DB 'getobjects', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PHHGLMBK@getfilesystemencoding?$AA@
CONST	SEGMENT
??_C@_0BG@PHHGLMBK@getfilesystemencoding?$AA@ DB 'getfilesystemencoding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OAPOKCOC@getdefaultencoding?$AA@
CONST	SEGMENT
??_C@_0BD@OAPOKCOC@getdefaultencoding?$AA@ DB 'getdefaultencoding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKNBDEPB@exit?$AA@
CONST	SEGMENT
??_C@_04MKNBDEPB@exit?$AA@ DB 'exit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NONONIOP@excepthook?$AA@
CONST	SEGMENT
??_C@_0L@NONONIOP@excepthook?$AA@ DB 'excepthook', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NGNFBMDD@exc_info?$AA@
CONST	SEGMENT
??_C@_08NGNFBMDD@exc_info?$AA@ DB 'exc_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OABHHABA@displayhook?$AA@
CONST	SEGMENT
??_C@_0M@OABHHABA@displayhook?$AA@ DB 'displayhook', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DMNJMFCA@_current_frames?$AA@
CONST	SEGMENT
??_C@_0BA@DMNJMFCA@_current_frames?$AA@ DB '_current_frames', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BEPIHGAL@_clear_type_cache?$AA@
CONST	SEGMENT
??_C@_0BC@BEPIHGAL@_clear_type_cache?$AA@ DB '_clear_type_cache', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PDHLGNMH@callstats?$AA@
CONST	SEGMENT
??_C@_09PDHLGNMH@callstats?$AA@ DB 'callstats', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default?$AA@
CONST	SEGMENT
??_C@_07DLHCIBDH@default?$AA@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEOJBDIK@object?$AA@
CONST	SEGMENT
??_C@_06IEOJBDIK@object?$AA@ DB 'object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IEPEIABL@sys?4getwindowsversion?$AA@
CONST	SEGMENT
??_C@_0BG@IEPEIABL@sys?4getwindowsversion?$AA@ DB 'sys.getwindowsversion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OMEOIKCM@System?5product?5type?$AA@
CONST	SEGMENT
??_C@_0BE@OMEOIKCM@System?5product?5type?$AA@ DB 'System product type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOJPCNBF@product_type?$AA@
CONST	SEGMENT
??_C@_0N@MOJPCNBF@product_type?$AA@ DB 'product_type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GOCNOCCF@Bit?5mask?5identifying?5available?5p@
CONST	SEGMENT
??_C@_0CO@GOCNOCCF@Bit?5mask?5identifying?5available?5p@ DB 'Bit mask ide'
	DB	'ntifying available product suites', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNNCACDH@suite_mask?$AA@
CONST	SEGMENT
??_C@_0L@CNNCACDH@suite_mask?$AA@ DB 'suite_mask', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IKCJAIGH@Service?5Pack?5minor?5version?5numbe@
CONST	SEGMENT
??_C@_0CC@IKCJAIGH@Service?5Pack?5minor?5version?5numbe@ DB 'Service Pack'
	DB	' minor version number', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CENDDB@service_pack_minor?$AA@
CONST	SEGMENT
??_C@_0BD@CENDDB@service_pack_minor?$AA@ DB 'service_pack_minor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@POJKNDDH@Service?5Pack?5major?5version?5numbe@
CONST	SEGMENT
??_C@_0CC@POJKNDDH@Service?5Pack?5major?5version?5numbe@ DB 'Service Pack'
	DB	' major version number', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LPDGAPKH@service_pack_major?$AA@
CONST	SEGMENT
??_C@_0BD@LPDGAPKH@service_pack_major?$AA@ DB 'service_pack_major', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JMPIOEPN@Latest?5Service?5Pack?5installed?5on@
CONST	SEGMENT
??_C@_0CM@JMPIOEPN@Latest?5Service?5Pack?5installed?5on@ DB 'Latest Servi'
	DB	'ce Pack installed on the system', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CGHPFCLJ@service_pack?$AA@
CONST	SEGMENT
??_C@_0N@CGHPFCLJ@service_pack?$AA@ DB 'service_pack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MILMMMCK@Operating?5system?5platform?$AA@
CONST	SEGMENT
??_C@_0BK@MILMMMCK@Operating?5system?5platform?$AA@ DB 'Operating system '
	DB	'platform', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08CBHCFJJK@platform?$AA@
CONST	SEGMENT
??_C@_08CBHCFJJK@platform?$AA@ DB 'platform', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KKPGKAMF@Build?5number?$AA@
CONST	SEGMENT
??_C@_0N@KKPGKAMF@Build?5number?$AA@ DB 'Build number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DMEBLLNM@build?$AA@
CONST	SEGMENT
??_C@_05DMEBLLNM@build?$AA@ DB 'build', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JMHJKOJE@Minor?5version?5number?$AA@
CONST	SEGMENT
??_C@_0BF@JMHJKOJE@Minor?5version?5number?$AA@ DB 'Minor version number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLAOEALN@minor?$AA@
CONST	SEGMENT
??_C@_05OLAOEALN@minor?$AA@ DB 'minor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OIMKHFME@Major?5version?5number?$AA@
CONST	SEGMENT
??_C@_0BF@OIMKHFME@Major?5version?5number?$AA@ DB 'Major version number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FEBMJMCL@major?$AA@
CONST	SEGMENT
??_C@_05FEBMJMCL@major?$AA@ DB 'major', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHDLFJ@sys?4hash_info?$AA@
CONST	SEGMENT
??_C@_0O@NIHDLFJ@sys?4hash_info?$AA@ DB 'sys.hash_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GNKDLGEF@multiplier?5used?5for?5the?5imaginar@
CONST	SEGMENT
??_C@_0DL@GNKDLGEF@multiplier?5used?5for?5the?5imaginar@ DB 'multiplier u'
	DB	'sed for the imaginary part of a complex number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HBKGOHH@imag?$AA@
CONST	SEGMENT
??_C@_04HBKGOHH@imag?$AA@ DB 'imag', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FMLNIOBD@value?5to?5be?5used?5for?5hash?5of?5a?5n@
CONST	SEGMENT
??_C@_0CD@FMLNIOBD@value?5to?5be?5used?5for?5hash?5of?5a?5n@ DB 'value to'
	DB	' be used for hash of a nan', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LHCJEHON@nan?$AA@
CONST	SEGMENT
??_C@_03LHCJEHON@nan?$AA@ DB 'nan', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@JFCIJPEO@value?5to?5be?5used?5for?5hash?5of?5a?5p@
CONST	SEGMENT
??_C@_0DB@JFCIJPEO@value?5to?5be?5used?5for?5hash?5of?5a?5p@ DB 'value to'
	DB	' be used for hash of a positive infinity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJHLLCGB@inf?$AA@
CONST	SEGMENT
??_C@_03OJHLLCGB@inf?$AA@ DB 'inf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@JNKOINOJ@prime?5number?5giving?5the?5modulus?5@
CONST	SEGMENT
??_C@_0EE@JNKOINOJ@prime?5number?5giving?5the?5modulus?5@ DB 'prime numbe'
	DB	'r giving the modulus on which the hash function is based', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJECEDDG@modulus?$AA@
CONST	SEGMENT
??_C@_07CJECEDDG@modulus?$AA@ DB 'modulus', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@ELCDEPAM@width?5of?5the?5type?5used?5for?5hashi@
CONST	SEGMENT
??_C@_0CM@ELCDEPAM@width?5of?5the?5type?5used?5for?5hashi@ DB 'width of t'
	DB	'he type used for hashing, in bits', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IGKADHGO@width?$AA@
CONST	SEGMENT
??_C@_05IGKADHGO@width?$AA@ DB 'width', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPGIAEAH@c_return?$AA@
CONST	SEGMENT
??_C@_08CPGIAEAH@c_return?$AA@ DB 'c_return', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DCFEPNBK@c_exception?$AA@
CONST	SEGMENT
??_C@_0M@DCFEPNBK@c_exception?$AA@ DB 'c_exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PAJIEHMP@c_call?$AA@
CONST	SEGMENT
??_C@_06PAJIEHMP@c_call?$AA@ DB 'c_call', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNOFJDNM@return?$AA@
CONST	SEGMENT
??_C@_06LNOFJDNM@return?$AA@ DB 'return', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HJPCFDOP@line?$AA@
CONST	SEGMENT
??_C@_04HJPCFDOP@line?$AA@ DB 'line', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BOIBMEBJ@exception?$AA@
CONST	SEGMENT
??_C@_09BOIBMEBJ@exception?$AA@ DB 'exception', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OMFAIDPG@call?$AA@
CONST	SEGMENT
??_C@_04OMFAIDPG@call?$AA@ DB 'call', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
displayhook_doc DB 'displayhook(object) -> None', 0aH, 0aH, 'Print an obj'
	DB	'ect to sys.stdout and also save it in builtins._', 0aH, 00H
	ORG $+5
excepthook_doc DB 'excepthook(exctype, value, traceback) -> None', 0aH, 0aH
	DB	'Handle an exception by displaying it with a traceback on sys.'
	DB	'stderr.', 0aH, 00H
	ORG $+3
?whatnames@?1??trace_init@@9@9 DQ FLAT:??_C@_04OMFAIDPG@call?$AA@ ; `trace_init'::`2'::whatnames
	DQ	FLAT:??_C@_09BOIBMEBJ@exception?$AA@
	DQ	FLAT:??_C@_04HJPCFDOP@line?$AA@
	DQ	FLAT:??_C@_06LNOFJDNM@return?$AA@
	DQ	FLAT:??_C@_06PAJIEHMP@c_call?$AA@
	DQ	FLAT:??_C@_0M@DCFEPNBK@c_exception?$AA@
	DQ	FLAT:??_C@_08CPGIAEAH@c_return?$AA@
exc_info_doc DB	'exc_info() -> (type, value, traceback)', 0aH, 0aH, 'Retu'
	DB	'rn information about the most recent exception caught by an e'
	DB	'xcept', 0aH, 'clause in the current stack frame or in an olde'
	DB	'r stack frame.', 00H
	ORG $+3
exit_doc DB	'exit([status])', 0aH, 0aH, 'Exit the interpreter by rais'
	DB	'ing SystemExit(status).', 0aH, 'If the status is omitted or N'
	DB	'one, it defaults to zero (i.e., success).', 0aH, 'If the stat'
	DB	'us is an integer, it will be used as the system exit status.', 0aH
	DB	'If it is another kind of object, it will be printed and the s'
	DB	'ystem', 0aH, 'exit status will be one (i.e., failure).', 00H
	ORG $+1
getdefaultencoding_doc DB 'getdefaultencoding() -> string', 0aH, 0aH, 'Re'
	DB	'turn the current default string encoding used by the Unicode '
	DB	0aH, 'implementation.', 00H
getfilesystemencoding_doc DB 'getfilesystemencoding() -> string', 0aH, 0aH
	DB	'Return the encoding used to convert Unicode filenames in', 0aH
	DB	'operating system filenames.', 00H
_check_interval DD 064H
	ORG $+4
intern_doc DB	'intern(string) -> string', 0aH, 0aH, '``Intern'''' the g'
	DB	'iven string.  This enters the string in the (global)', 0aH, 't'
	DB	'able of interned strings whose purpose is to speed up diction'
	DB	'ary lookups.', 0aH, 'Return the string itself or the previous'
	DB	'ly interned string object with the', 0aH, 'same value.', 00H
	ORG $+7
hash_info_desc DQ FLAT:??_C@_0O@NIHDLFJ@sys?4hash_info?$AA@
	DQ	FLAT:hash_info_doc
	DQ	FLAT:hash_info_fields
	DD	05H
	ORG $+4
?kwlist@?1??sys_getsizeof@@9@9 DQ FLAT:??_C@_06IEOJBDIK@object?$AA@ ; `sys_getsizeof'::`2'::kwlist
	DQ	FLAT:??_C@_07DLHCIBDH@default?$AA@
	DQ	0000000000000000H
settrace_doc DB	'settrace(function)', 0aH, 0aH, 'Set the global debug tra'
	DB	'cing function.  It will be called on each', 0aH, 'function ca'
	DB	'll.  See the debugger chapter in the library manual.', 00H
	ORG $+2
windows_version_desc DQ FLAT:??_C@_0BG@IEPEIABL@sys?4getwindowsversion?$AA@
	DQ	FLAT:getwindowsversion_doc
	DQ	FLAT:windows_version_fields
	DD	05H
	ORG $+4
version_info__doc__ DB 'sys.version_info', 0aH, 0aH, 'Version information'
	DB	' as a named tuple.', 00H
gettrace_doc DB	'gettrace()', 0aH, 0aH, 'Return the global debug tracing '
	DB	'function set with sys.settrace.', 0aH, 'See the debugger chap'
	DB	'ter in the library manual.', 00H
	ORG $+4
setprofile_doc DB 'setprofile(function)', 0aH, 0aH, 'Set the profiling fu'
	DB	'nction.  It will be called on each function call', 0aH, 'and '
	DB	'return.  See the profiler chapter in the library manual.', 00H
_PySys_ImplName DQ FLAT:??_C@_07EOMJFIDL@cpython?$AA@
getprofile_doc DB 'getprofile()', 0aH, 0aH, 'Return the profiling functio'
	DB	'n set with sys.setprofile.', 0aH, 'See the profiler chapter i'
	DB	'n the library manual.', 00H
	ORG $+3
flags_desc DQ	FLAT:??_C@_09KICJBJND@sys?4flags?$AA@
	DQ	FLAT:flags__doc__
	DQ	FLAT:flags_fields
	DD	0cH
	ORG $+4
_PySys_ImplCacheTag DQ FLAT:??_C@_0L@DIPKOOGN@cpython?933?$AA@
setcheckinterval_doc DB 'setcheckinterval(n)', 0aH, 0aH, 'Tell the Python'
	DB	' interpreter to check for asynchronous events every', 0aH, 'n'
	DB	' instructions.  This also affects how often thread switches o'
	DB	'ccur.', 00H
	ORG $+4
getcheckinterval_doc DB 'getcheckinterval() -> current check interval; se'
	DB	'e setcheckinterval().', 00H
	ORG $+2
version_info_desc DQ FLAT:??_C@_0BB@DNJDILJD@sys?4version_info?$AA@
	DQ	FLAT:version_info__doc__
	DQ	FLAT:version_info_fields
	DD	05H
	ORG $+4
?empty_argv@?2??makeargvobject@@9@9 DQ FLAT:??_C@_11LOCGONAA@?$AA?$AA@ ; `makeargvobject'::`3'::empty_argv
setswitchinterval_doc DB 'setswitchinterval(n)', 0aH, 0aH, 'Set the ideal'
	DB	' thread switching delay inside the Python interpreter', 0aH, 'T'
	DB	'he actual frequency of switching threads can be lower if the', 0aH
	DB	'interpreter executes long sequences of uninterruptible code', 0aH
	DB	'(this is implementation-specific and workload-dependent).', 0aH
	DB	0aH, 'The parameter must represent the desired switching delay'
	DB	' in seconds', 0aH, 'A typical value is 0.005 (5 milliseconds)'
	DB	'.', 00H
	ORG $+3
getswitchinterval_doc DB 'getswitchinterval() -> current thread switch in'
	DB	'terval; see setswitchinterval().', 00H
hash_info_doc DB 'hash_info', 0aH, 0aH, 'A struct sequence providing para'
	DB	'meters used for computing', 0aH, 'numeric hashes.  The attrib'
	DB	'utes are read only.', 00H
	ORG $+12
hash_info_fields DQ FLAT:??_C@_05IGKADHGO@width?$AA@
	DQ	FLAT:??_C@_0CM@ELCDEPAM@width?5of?5the?5type?5used?5for?5hashi@
	DQ	FLAT:??_C@_07CJECEDDG@modulus?$AA@
	DQ	FLAT:??_C@_0EE@JNKOINOJ@prime?5number?5giving?5the?5modulus?5@
	DQ	FLAT:??_C@_03OJHLLCGB@inf?$AA@
	DQ	FLAT:??_C@_0DB@JFCIJPEO@value?5to?5be?5used?5for?5hash?5of?5a?5p@
	DQ	FLAT:??_C@_03LHCJEHON@nan?$AA@
	DQ	FLAT:??_C@_0CD@FMLNIOBD@value?5to?5be?5used?5for?5hash?5of?5a?5n@
	DQ	FLAT:??_C@_04HBKGOHH@imag?$AA@
	DQ	FLAT:??_C@_0DL@GNKDLGEF@multiplier?5used?5for?5the?5imaginar@
	DQ	0000000000000000H
	DQ	0000000000000000H
setrecursionlimit_doc DB 'setrecursionlimit(n)', 0aH, 0aH, 'Set the maxim'
	DB	'um depth of the Python interpreter stack to n.  This', 0aH, 'l'
	DB	'imit prevents infinite recursion from causing an overflow of '
	DB	'the C', 0aH, 'stack and crashing Python.  The highest possibl'
	DB	'e limit is platform-', 0aH, 'dependent.', 00H
	ORG $+5
getrecursionlimit_doc DB 'getrecursionlimit()', 0aH, 0aH, 'Return the cur'
	DB	'rent value of the recursion limit, the maximum depth', 0aH, 'o'
	DB	'f the Python interpreter stack.  This limit prevents infinite'
	DB	0aH, 'recursion from causing an overflow of the C stack and cr'
	DB	'ashing Python.', 00H
	ORG $+2
getwindowsversion_doc DB 'getwindowsversion()', 0aH, 0aH, 'Return informa'
	DB	'tion about the running version of Windows as a named tuple.', 0aH
	DB	'The members are named: major, minor, build, platform, service'
	DB	'_pack,', 0aH, 'service_pack_major, service_pack_minor, suite_'
	DB	'mask, and product_type. For', 0aH, 'backward compatibility, o'
	DB	'nly the first 5 items are available by indexing.', 0aH, 'All '
	DB	'elements are numbers, except service_pack which is a string. '
	DB	'Platform', 0aH, 'may be 0 for win32s, 1 for Windows 9x/ME, 2 '
	DB	'for Windows NT/2000/XP/Vista/7,', 0aH, '3 for Windows CE. Pro'
	DB	'duct_type may be 1 for a workstation, 2 for a domain', 0aH, 'c'
	DB	'ontroller, 3 for a server.', 00H
	ORG $+13
windows_version_fields DQ FLAT:??_C@_05FEBMJMCL@major?$AA@
	DQ	FLAT:??_C@_0BF@OIMKHFME@Major?5version?5number?$AA@
	DQ	FLAT:??_C@_05OLAOEALN@minor?$AA@
	DQ	FLAT:??_C@_0BF@JMHJKOJE@Minor?5version?5number?$AA@
	DQ	FLAT:??_C@_05DMEBLLNM@build?$AA@
	DQ	FLAT:??_C@_0N@KKPGKAMF@Build?5number?$AA@
	DQ	FLAT:??_C@_08CBHCFJJK@platform?$AA@
	DQ	FLAT:??_C@_0BK@MILMMMCK@Operating?5system?5platform?$AA@
	DQ	FLAT:??_C@_0N@CGHPFCLJ@service_pack?$AA@
	DQ	FLAT:??_C@_0CM@JMPIOEPN@Latest?5Service?5Pack?5installed?5on@
	DQ	FLAT:??_C@_0BD@LPDGAPKH@service_pack_major?$AA@
	DQ	FLAT:??_C@_0CC@POJKNDDH@Service?5Pack?5major?5version?5numbe@
	DQ	FLAT:??_C@_0BD@CENDDB@service_pack_minor?$AA@
	DQ	FLAT:??_C@_0CC@IKCJAIGH@Service?5Pack?5minor?5version?5numbe@
	DQ	FLAT:??_C@_0L@CNNCACDH@suite_mask?$AA@
	DQ	FLAT:??_C@_0CO@GOCNOCCF@Bit?5mask?5identifying?5available?5p@
	DQ	FLAT:??_C@_0N@MOJPCNBF@product_type?$AA@
	DQ	FLAT:??_C@_0BE@OMEOIKCM@System?5product?5type?$AA@
	DQ	0000000000000000H
	ORG $+8
getsizeof_doc DB 'getsizeof(object, default) -> int', 0aH, 0aH, 'Return t'
	DB	'he size of object in bytes.', 00H
	ORG $+9
getrefcount_doc DB 'getrefcount(object) -> integer', 0aH, 0aH, 'Return th'
	DB	'e reference count of object.  The count returned is generally'
	DB	0aH, 'one higher than you might expect, because it includes th'
	DB	'e (temporary)', 0aH, 'reference as an argument to getrefcount'
	DB	'().', 00H
	ORG $+8
getframe_doc DB	'_getframe([depth]) -> frameobject', 0aH, 0aH, 'Return a '
	DB	'frame object from the call stack.  If optional integer depth '
	DB	'is', 0aH, 'given, return the frame object that many calls bel'
	DB	'ow the top of the stack.', 0aH, 'If that is deeper than the c'
	DB	'all stack, ValueError is raised.  The default', 0aH, 'for dep'
	DB	'th is zero, returning the frame at the top of the call stack.'
	DB	0aH, 0aH, 'This function should be used for internal and speci'
	DB	'alized', 0aH, 'purposes only.', 00H
current_frames_doc DB '_current_frames() -> dictionary', 0aH, 0aH, 'Retur'
	DB	'n a dictionary mapping each current thread T''s thread id to '
	DB	'T''s', 0aH, 'current stack frame.', 0aH, 0aH, 'This function '
	DB	'should be used for specialized purposes only.', 00H
	ORG $+8
call_tracing_doc DB 'call_tracing(func, args) -> object', 0aH, 0aH, 'Call'
	DB	' func(*args), while tracing is enabled.  The tracing state is'
	DB	0aH, 'saved, and restored afterwards.  This is intended to be '
	DB	'called from', 0aH, 'a debugger from a checkpoint, to recursiv'
	DB	'ely debug some other code.', 00H
	ORG $+2
callstats_doc DB 'callstats() -> tuple of integers', 0aH, 0aH, 'Return a '
	DB	'tuple of function call statistics, if CALL_PROFILE was define'
	DB	'd', 0aH, 'when Python was built.  Otherwise, return None.', 0aH
	DB	0aH, 'When enabled, this function returns detailed, implementa'
	DB	'tion-specific', 0aH, 'details about the number of function ca'
	DB	'lls executed. The return value is', 0aH, 'a 11-tuple where th'
	DB	'e entries in the tuple are counts of:', 0aH, '0. all function'
	DB	' calls', 0aH, '1. calls to PyFunction_Type objects', 0aH, '2.'
	DB	' PyFunction calls that do not create an argument tuple', 0aH, '3'
	DB	'. PyFunction calls that do not create an argument tuple', 0aH
	DB	'   and bypass PyEval_EvalCodeEx()', 0aH, '4. PyMethod calls', 0aH
	DB	'5. PyMethod calls on bound methods', 0aH, '6. PyType calls', 0aH
	DB	'7. PyCFunction calls', 0aH, '8. generator calls', 0aH, '9. Al'
	DB	'l other calls', 0aH, '10. Number of stack pops performed by c'
	DB	'all_function()', 00H
	ORG $+9
debugmallocstats_doc DB '_debugmallocstats()', 0aH, 0aH, 'Print summary i'
	DB	'nfo to stderr about the state of', 0aH, 'pymalloc''s structur'
	DB	'es.', 0aH, 0aH, 'In Py_DEBUG mode, also perform some expensiv'
	DB	'e internal consistency', 0aH, 'checks.', 0aH, 00H
	ORG $+7
sys_clear_type_cache__doc__ DB '_clear_type_cache() -> None', 0aH, 'Clear'
	DB	' the internal type lookup cache.', 00H
	ORG $+14
sys_methods DQ	FLAT:??_C@_09PDHLGNMH@callstats?$AA@
	DQ	FLAT:PyEval_GetCallStats
	DD	04H
	ORG $+4
	DQ	FLAT:callstats_doc
	DQ	FLAT:??_C@_0BC@BEPIHGAL@_clear_type_cache?$AA@
	DQ	FLAT:sys_clear_type_cache
	DD	04H
	ORG $+4
	DQ	FLAT:sys_clear_type_cache__doc__
	DQ	FLAT:??_C@_0BA@DMNJMFCA@_current_frames?$AA@
	DQ	FLAT:sys_current_frames
	DD	04H
	ORG $+4
	DQ	FLAT:current_frames_doc
	DQ	FLAT:??_C@_0M@OABHHABA@displayhook?$AA@
	DQ	FLAT:sys_displayhook
	DD	08H
	ORG $+4
	DQ	FLAT:displayhook_doc
	DQ	FLAT:??_C@_08NGNFBMDD@exc_info?$AA@
	DQ	FLAT:sys_exc_info
	DD	04H
	ORG $+4
	DQ	FLAT:exc_info_doc
	DQ	FLAT:??_C@_0L@NONONIOP@excepthook?$AA@
	DQ	FLAT:sys_excepthook
	DD	01H
	ORG $+4
	DQ	FLAT:excepthook_doc
	DQ	FLAT:??_C@_04MKNBDEPB@exit?$AA@
	DQ	FLAT:sys_exit
	DD	01H
	ORG $+4
	DQ	FLAT:exit_doc
	DQ	FLAT:??_C@_0BD@OAPOKCOC@getdefaultencoding?$AA@
	DQ	FLAT:sys_getdefaultencoding
	DD	04H
	ORG $+4
	DQ	FLAT:getdefaultencoding_doc
	DQ	FLAT:??_C@_0BG@PHHGLMBK@getfilesystemencoding?$AA@
	DQ	FLAT:sys_getfilesystemencoding
	DD	04H
	ORG $+4
	DQ	FLAT:getfilesystemencoding_doc
	DQ	FLAT:??_C@_0L@OEDABJML@getobjects?$AA@
	DQ	FLAT:_Py_GetObjects
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@GDBDEFKM@gettotalrefcount?$AA@
	DQ	FLAT:sys_gettotalrefcount
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@GIAAAIMC@getrefcount?$AA@
	DQ	FLAT:sys_getrefcount
	DD	08H
	ORG $+4
	DQ	FLAT:getrefcount_doc
	DQ	FLAT:??_C@_0BC@MNGKCPA@getrecursionlimit?$AA@
	DQ	FLAT:sys_getrecursionlimit
	DD	04H
	ORG $+4
	DQ	FLAT:getrecursionlimit_doc
	DQ	FLAT:??_C@_09CMGNPIEG@getsizeof?$AA@
	DQ	FLAT:sys_getsizeof
	DD	03H
	ORG $+4
	DQ	FLAT:getsizeof_doc
	DQ	FLAT:??_C@_09GKOEPENJ@_getframe?$AA@
	DQ	FLAT:sys_getframe
	DD	01H
	ORG $+4
	DQ	FLAT:getframe_doc
	DQ	FLAT:??_C@_0BC@NJOPCOOO@getwindowsversion?$AA@
	DQ	FLAT:sys_getwindowsversion
	DD	04H
	ORG $+4
	DQ	FLAT:getwindowsversion_doc
	DQ	FLAT:??_C@_06OCOCPMLE@intern?$AA@
	DQ	FLAT:sys_intern
	DD	01H
	ORG $+4
	DQ	FLAT:intern_doc
	DQ	FLAT:??_C@_0BB@CCOOFHI@setcheckinterval?$AA@
	DQ	FLAT:sys_setcheckinterval
	DD	01H
	ORG $+4
	DQ	FLAT:setcheckinterval_doc
	DQ	FLAT:??_C@_0BB@GGHHFLMK@getcheckinterval?$AA@
	DQ	FLAT:sys_getcheckinterval
	DD	04H
	ORG $+4
	DQ	FLAT:getcheckinterval_doc
	DQ	FLAT:??_C@_0BC@DCBNGMKA@setswitchinterval?$AA@
	DQ	FLAT:sys_setswitchinterval
	DD	01H
	ORG $+4
	DQ	FLAT:setswitchinterval_doc
	DQ	FLAT:??_C@_0BC@BHBGOHLO@getswitchinterval?$AA@
	DQ	FLAT:sys_getswitchinterval
	DD	04H
	ORG $+4
	DQ	FLAT:getswitchinterval_doc
	DQ	FLAT:??_C@_0L@EOCHFNND@setprofile?$AA@
	DQ	FLAT:sys_setprofile
	DD	08H
	ORG $+4
	DQ	FLAT:setprofile_doc
	DQ	FLAT:??_C@_0L@FAAIOKJK@getprofile?$AA@
	DQ	FLAT:sys_getprofile
	DD	04H
	ORG $+4
	DQ	FLAT:getprofile_doc
	DQ	FLAT:??_C@_0BC@CJNNCJOO@setrecursionlimit?$AA@
	DQ	FLAT:sys_setrecursionlimit
	DD	01H
	ORG $+4
	DQ	FLAT:setrecursionlimit_doc
	DQ	FLAT:??_C@_08JCNEMICD@settrace?$AA@
	DQ	FLAT:sys_settrace
	DD	08H
	ORG $+4
	DQ	FLAT:settrace_doc
	DQ	FLAT:??_C@_08GDPINLFO@gettrace?$AA@
	DQ	FLAT:sys_gettrace
	DD	04H
	ORG $+4
	DQ	FLAT:gettrace_doc
	DQ	FLAT:??_C@_0N@KMLHGNOF@call_tracing?$AA@
	DQ	FLAT:sys_call_tracing
	DD	01H
	ORG $+4
	DQ	FLAT:call_tracing_doc
	DQ	FLAT:??_C@_0BC@POJOHICO@_debugmallocstats?$AA@
	DQ	FLAT:sys_debugmallocstats
	DD	01H
	ORG $+4
	DQ	FLAT:debugmallocstats_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
sys_doc	DB	'This module provides access to some objects used or main'
	DB	'tained by the', 0aH, 'interpreter and to functions that inter'
	DB	'act strongly with the interpreter.', 0aH, 0aH, 'Dynamic objec'
	DB	'ts:', 0aH, 0aH, 'argv -- command line arguments; argv[0] is t'
	DB	'he script pathname if known', 0aH, 'path -- module search pat'
	DB	'h; path[0] is the script directory, else ''''', 0aH, 'modules'
	DB	' -- dictionary of loaded modules', 0aH, 0aH, 'displayhook -- '
	DB	'called to show results in an interactive session', 0aH, 'exce'
	DB	'pthook -- called to handle any uncaught exception other than '
	DB	'SystemExit', 0aH, '  To customize printing in an interactive '
	DB	'session or to install a custom', 0aH, '  top-level exception '
	DB	'handler, assign other functions to replace these.', 0aH, 0aH, 's'
	DB	'tdin -- standard input file object; used by input()', 0aH, 's'
	DB	'tdout -- standard output file object; used by print()', 0aH, 's'
	DB	'tderr -- standard error object; used for error messages', 0aH
	DB	'  By assigning other file objects (or objects that behave lik'
	DB	'e files)', 0aH, '  to these, it is possible to redirect all o'
	DB	'f the interpreter''s I/O.', 0aH, 0aH, 'last_type -- type of l'
	DB	'ast uncaught exception', 0aH, 'last_value -- value of last un'
	DB	'caught exception', 0aH, 'last_traceback -- traceback of last '
	DB	'uncaught exception', 0aH, '  These three are only available i'
	DB	'n an interactive session after a', 0aH, '  traceback has been'
	DB	' printed.', 0aH, 0aH, 'Static objects:', 0aH, 0aH, 'builtin_m'
	DB	'odule_names -- tuple of module names built into this interpre'
	DB	'ter', 0aH, 'copyright -- copyright notice pertaining to this '
	DB	'interpreter', 0aH, 'exec_prefix -- prefix used to find the ma'
	DB	'chine-specific Python library', 0aH, 'executable -- absolute '
	DB	'path of the executable binary of the Python interpreter', 0aH
	DB	'float_info -- a struct sequence with information about the fl'
	DB	'oat implementation.', 0aH, 'float_repr_style -- string indica'
	DB	'ting the style of repr() output for floats', 0aH, 'hexversion'
	DB	' -- version information encoded as a single integer', 0aH, 'i'
	DB	'mplementation -- Python implementation information.', 0aH, 'i'
	DB	'nt_info -- a struct sequence with information about the int i'
	DB	'mplementation.', 0aH, 'maxsize -- the largest supported lengt'
	DB	'h of containers.', 0aH, 'maxunicode -- the value of the large'
	DB	'st Unicode codepoint', 0aH, 'platform -- platform identifier', 0aH
	DB	'prefix -- prefix used to find the Python library', 0aH, 'thre'
	DB	'ad_info -- a struct sequence with information about the threa'
	DB	'd implementation.', 0aH, 'version -- the version of this inte'
	DB	'rpreter as a string', 0aH, 'version_info -- version informati'
	DB	'on as a named tuple', 0aH, 'dllhandle -- [Windows only] integ'
	DB	'er handle of the Python DLL', 0aH, 'winver -- [Windows only] '
	DB	'version number of the Python DLL', 0aH, '__stdin__ -- the ori'
	DB	'ginal stdin; don''t touch!', 0aH, '__stdout__ -- the original'
	DB	' stdout; don''t touch!', 0aH, '__stderr__ -- the original std'
	DB	'err; don''t touch!', 0aH, '__displayhook__ -- the original di'
	DB	'splayhook; don''t touch!', 0aH, '__excepthook__ -- the origin'
	DB	'al excepthook; don''t touch!', 0aH, 0aH, 'Functions:', 0aH, 0aH
	DB	'displayhook() -- print an object to the screen, and save it i'
	DB	'n builtins._', 0aH, 'excepthook() -- print an exception and i'
	DB	'ts traceback to sys.stderr', 0aH, 'exc_info() -- return threa'
	DB	'd-safe information about the current exception', 0aH, 'exit()'
	DB	' -- exit the interpreter by raising SystemExit', 0aH, 'getdlo'
	DB	'penflags() -- returns flags to be used for dlopen() calls', 0aH
	DB	'getprofile() -- get the global profiling function', 0aH, 'get'
	DB	'refcount() -- return the reference count for an object (plus '
	DB	'one :-)', 0aH, 'getrecursionlimit() -- return the max recursi'
	DB	'on depth for the interpreter', 0aH, 'getsizeof() -- return th'
	DB	'e size of an object in bytes', 0aH, 'gettrace() -- get the gl'
	DB	'obal debug tracing function', 0aH, 'setcheckinterval() -- con'
	DB	'trol how often the interpreter checks for events', 0aH, 'setd'
	DB	'lopenflags() -- set the flags to be used for dlopen() calls', 0aH
	DB	'setprofile() -- set the global profiling function', 0aH, 'set'
	DB	'recursionlimit() -- set the max recursion depth for the inter'
	DB	'preter', 0aH, 'settrace() -- set the global debug tracing fun'
	DB	'ction', 0aH, 00H
	ORG $+4
flags__doc__ DB	'sys.flags', 0aH, 0aH, 'Flags provided through command li'
	DB	'ne arguments or environment vars.', 00H
	ORG $+2
flags_fields DQ	FLAT:??_C@_05GFCDIDHO@debug?$AA@
	DQ	FLAT:??_C@_02DBLKFNPN@?9d?$AA@
	DQ	FLAT:??_C@_07PHKOPNKE@inspect?$AA@
	DQ	FLAT:??_C@_02IEBECDLA@?9i?$AA@
	DQ	FLAT:??_C@_0M@JFHLOKPA@interactive?$AA@
	DQ	FLAT:??_C@_02IEBECDLA@?9i?$AA@
	DQ	FLAT:??_C@_08GHMAOHAP@optimize?$AA@
	DQ	FLAT:??_C@_09PKCBOAHP@?9O?5or?5?9OO?$AA@
	DQ	FLAT:??_C@_0BE@CMMEJPLN@dont_write_bytecode?$AA@
	DQ	FLAT:??_C@_02PCGENONJ@?9B?$AA@
	DQ	FLAT:??_C@_0N@MBFKKMMD@no_user_site?$AA@
	DQ	FLAT:??_C@_02DEDJNJGL@?9s?$AA@
	DQ	FLAT:??_C@_07GMLEGJMJ@no_site?$AA@
	DQ	FLAT:??_C@_02KBLNPNMJ@?9S?$AA@
	DQ	FLAT:??_C@_0BD@OHBIJAIF@ignore_environment?$AA@
	DQ	FLAT:??_C@_02LNCFEIBO@?9E?$AA@
	DQ	FLAT:??_C@_07KBAMPNJK@verbose?$AA@
	DQ	FLAT:??_C@_02EJEOCNCO@?9v?$AA@
	DQ	FLAT:??_C@_0O@NKLJCOA@bytes_warning?$AA@
	DQ	FLAT:??_C@_02GHOAPKHL@?9b?$AA@
	DQ	FLAT:??_C@_05PMBAOCDH@quiet?$AA@
	DQ	FLAT:??_C@_02GAPLLOJ@?9q?$AA@
	DQ	FLAT:??_C@_0BD@CKHJKECB@hash_randomization?$AA@
	DQ	FLAT:??_C@_02LIKGMMII@?9R?$AA@
	DQ	0000000000000000H
	ORG $+8
version_info_fields DQ FLAT:??_C@_05FEBMJMCL@major?$AA@
	DQ	FLAT:??_C@_0BF@MKHGOMCP@Major?5release?5number?$AA@
	DQ	FLAT:??_C@_05OLAOEALN@minor?$AA@
	DQ	FLAT:??_C@_0BF@LOMFDHHP@Minor?5release?5number?$AA@
	DQ	FLAT:??_C@_05PCPGMEFP@micro?$AA@
	DQ	FLAT:??_C@_0BF@JHPIGCCC@Patch?5release?5number?$AA@
	DQ	FLAT:??_C@_0N@KAHPCFIL@releaselevel?$AA@
	DQ	FLAT:??_C@_0CL@HEOEKGNF@?8alpha?8?0?5?8beta?8?0?5?8candidate?8?0?5or@
	DQ	FLAT:??_C@_06KCELPKEE@serial?$AA@
	DQ	FLAT:??_C@_0BG@GIMBGDAI@Serial?5release?5number?$AA@
	DQ	0000000000000000H
	ORG $+8
sysmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_03PIADFGHL@sys?$AA@
	DQ	FLAT:sys_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:sys_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT
??_C@_01IDAFKMJL@_?$AA@ DB '_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer?$AA@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer?$AA@ DB 'buffer', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_write@?1??sys_pyfile_write_unicode@@9@9 DQ 0000000000000000H ; `sys_pyfile_write_unicode'::`2'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
?PyId___sizeof__@?1??sys_getsizeof@@9@9 DQ 0000000000000000H ; `sys_getsizeof'::`2'::PyId___sizeof__
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	0000000000000000H
?PyId__@?1??sys_displayhook@@9@9 DQ 0000000000000000H	; `sys_displayhook'::`2'::PyId__
	DQ	FLAT:??_C@_01IDAFKMJL@_?$AA@
	DQ	0000000000000000H
?PyId_write@?2??sys_displayhook_unencodable@@9@9 DQ 0000000000000000H ; `sys_displayhook_unencodable'::`3'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
?PyId_buffer@?1??sys_displayhook_unencodable@@9@9 DQ 0000000000000000H ; `sys_displayhook_unencodable'::`2'::PyId_buffer
	DQ	FLAT:??_C@_06HOHPNJLC@buffer?$AA@
	DQ	0000000000000000H
?PyId_encoding@?1??sys_displayhook_unencodable@@9@9 DQ 0000000000000000H ; `sys_displayhook_unencodable'::`2'::PyId_encoding
	DQ	FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
PUBLIC	PySys_GetObject
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyThreadState_Get:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\sysmodule.c
pdata	SEGMENT
$pdata$PySys_GetObject DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$PySys_GetObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_GetObject DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_GetObject
_TEXT	SEGMENT
sd$ = 32
tstate$ = 40
name$ = 64
PySys_GetObject PROC					; COMDAT

; 46   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 47   :     PyThreadState *tstate = PyThreadState_GET();

  00009	e8 00 00 00 00	 call	 PyThreadState_Get
  0000e	48 89 44 24 28	 mov	 QWORD PTR tstate$[rsp], rax

; 48   :     PyObject *sd = tstate->interp->sysdict;

  00013	48 8b 44 24 28	 mov	 rax, QWORD PTR tstate$[rsp]
  00018	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0001c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00020	48 89 44 24 20	 mov	 QWORD PTR sd$[rsp], rax

; 49   :     if (sd == NULL)

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR sd$[rsp], 0
  0002b	75 04		 jne	 SHORT $LN1@PySys_GetO

; 50   :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 0f		 jmp	 SHORT $LN2@PySys_GetO
$LN1@PySys_GetO:

; 51   :     return PyDict_GetItemString(sd, name);

  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  00036	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sd$[rsp]
  0003b	e8 00 00 00 00	 call	 PyDict_GetItemString
$LN2@PySys_GetO:

; 52   : }

  00040	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00044	c3		 ret	 0
PySys_GetObject ENDP
_TEXT	ENDS
PUBLIC	PySys_SetObject
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_DelItemString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_SetObject DD imagerel $LN7
	DD	imagerel $LN7+120
	DD	imagerel $unwind$PySys_SetObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_SetObject DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_SetObject
_TEXT	SEGMENT
sd$ = 32
tstate$ = 40
name$ = 64
v$ = 72
PySys_SetObject PROC					; COMDAT

; 56   : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 57   :     PyThreadState *tstate = PyThreadState_GET();

  0000e	e8 00 00 00 00	 call	 PyThreadState_Get
  00013	48 89 44 24 28	 mov	 QWORD PTR tstate$[rsp], rax

; 58   :     PyObject *sd = tstate->interp->sysdict;

  00018	48 8b 44 24 28	 mov	 rax, QWORD PTR tstate$[rsp]
  0001d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00021	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00025	48 89 44 24 20	 mov	 QWORD PTR sd$[rsp], rax

; 59   :     if (v == NULL) {

  0002a	48 83 7c 24 48
	00		 cmp	 QWORD PTR v$[rsp], 0
  00030	75 2d		 jne	 SHORT $LN4@PySys_SetO

; 60   :         if (PyDict_GetItemString(sd, name) == NULL)

  00032	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  00037	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sd$[rsp]
  0003c	e8 00 00 00 00	 call	 PyDict_GetItemString
  00041	48 85 c0	 test	 rax, rax
  00044	75 06		 jne	 SHORT $LN3@PySys_SetO

; 61   :             return 0;

  00046	33 c0		 xor	 eax, eax
  00048	eb 29		 jmp	 SHORT $LN5@PySys_SetO

; 62   :         else

  0004a	eb 11		 jmp	 SHORT $LN2@PySys_SetO
$LN3@PySys_SetO:

; 63   :             return PyDict_DelItemString(sd, name);

  0004c	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  00051	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sd$[rsp]
  00056	e8 00 00 00 00	 call	 PyDict_DelItemString
  0005b	eb 16		 jmp	 SHORT $LN5@PySys_SetO
$LN2@PySys_SetO:

; 64   :     }
; 65   :     else

  0005d	eb 14		 jmp	 SHORT $LN1@PySys_SetO
$LN4@PySys_SetO:

; 66   :         return PyDict_SetItemString(sd, name, v);

  0005f	4c 8b 44 24 48	 mov	 r8, QWORD PTR v$[rsp]
  00064	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  00069	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sd$[rsp]
  0006e	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN1@PySys_SetO:
$LN5@PySys_SetO:

; 67   : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
PySys_SetObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0BA@HMAAIHML@lost?5sys?4stdout?$AA@	; `string'
PUBLIC	??_C@_06DJDOIFHB@stdout?$AA@			; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0BF@DKDFFBBE@lost?5builtins?5module?$AA@	; `string'
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
EXTRN	PyFile_WriteString:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_UnicodeEncodeError:QWORD
EXTRN	PyFile_WriteObject:PROC
EXTRN	_PyObject_SetAttrId:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_displayhook DD imagerel sys_displayhook
	DD	imagerel sys_displayhook+438
	DD	imagerel $unwind$sys_displayhook
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_displayhook DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMAAIHML@lost?5sys?4stdout?$AA@
CONST	SEGMENT
??_C@_0BA@HMAAIHML@lost?5sys?4stdout?$AA@ DB 'lost sys.stdout', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJDOIFHB@stdout?$AA@
CONST	SEGMENT
??_C@_06DJDOIFHB@stdout?$AA@ DB 'stdout', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DKDFFBBE@lost?5builtins?5module?$AA@
CONST	SEGMENT
??_C@_0BF@DKDFFBBE@lost?5builtins?5module?$AA@ DB 'lost builtins module', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_displayhook
_TEXT	SEGMENT
builtins$ = 32
interp$ = 40
outf$ = 48
modules$ = 56
err$ = 64
self$ = 96
o$ = 104
sys_displayhook PROC					; COMDAT

; 136  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 137  :     PyObject *outf;
; 138  :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  0000e	e8 00 00 00 00	 call	 PyThreadState_Get
  00013	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00017	48 89 44 24 28	 mov	 QWORD PTR interp$[rsp], rax

; 139  :     PyObject *modules = interp->modules;

  0001c	48 8b 44 24 28	 mov	 rax, QWORD PTR interp$[rsp]
  00021	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00025	48 89 44 24 38	 mov	 QWORD PTR modules$[rsp], rax

; 140  :     PyObject *builtins = PyDict_GetItemString(modules, "builtins");

  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00031	48 8b 4c 24 38	 mov	 rcx, QWORD PTR modules$[rsp]
  00036	e8 00 00 00 00	 call	 PyDict_GetItemString
  0003b	48 89 44 24 20	 mov	 QWORD PTR builtins$[rsp], rax

; 141  :     int err;
; 142  :     _Py_IDENTIFIER(_);
; 143  : 
; 144  :     if (builtins == NULL) {

  00040	48 83 7c 24 20
	00		 cmp	 QWORD PTR builtins$[rsp], 0
  00046	75 1a		 jne	 SHORT $LN11@sys_displa

; 145  :         PyErr_SetString(PyExc_RuntimeError, "lost builtins module");

  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@DKDFFBBE@lost?5builtins?5module?$AA@
  0004f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00056	e8 00 00 00 00	 call	 PyErr_SetString

; 146  :         return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 4f 01 00 00	 jmp	 $LN12@sys_displa
$LN11@sys_displa:

; 147  :     }
; 148  : 
; 149  :     /* Print value except if None */
; 150  :     /* After printing, also assign to '_' */
; 151  :     /* Before, set '_' to None to avoid recursion */
; 152  :     if (o == Py_None) {

  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00069	48 39 44 24 68	 cmp	 QWORD PTR o$[rsp], rax
  0006e	75 18		 jne	 SHORT $LN10@sys_displa

; 153  :         Py_INCREF(Py_None);

  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00077	e8 00 00 00 00	 call	 _Py_IncRef

; 154  :         return Py_None;

  0007c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00083	e9 29 01 00 00	 jmp	 $LN12@sys_displa
$LN10@sys_displa:

; 155  :     }
; 156  :     if (_PyObject_SetAttrId(builtins, &PyId__, Py_None) != 0)

  00088	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__@?1??sys_displayhook@@9@9
  0008d	8b c0		 mov	 eax, eax
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00095	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0009e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000a9	48 8b d0	 mov	 rdx, rax
  000ac	48 8b 4c 24 20	 mov	 rcx, QWORD PTR builtins$[rsp]
  000b1	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000b6	85 c0		 test	 eax, eax
  000b8	74 07		 je	 SHORT $LN9@sys_displa

; 157  :         return NULL;

  000ba	33 c0		 xor	 eax, eax
  000bc	e9 f0 00 00 00	 jmp	 $LN12@sys_displa
$LN9@sys_displa:

; 158  :     outf = PySys_GetObject("stdout");

  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  000c8	e8 00 00 00 00	 call	 PySys_GetObject
  000cd	48 89 44 24 30	 mov	 QWORD PTR outf$[rsp], rax

; 159  :     if (outf == NULL || outf == Py_None) {

  000d2	48 83 7c 24 30
	00		 cmp	 QWORD PTR outf$[rsp], 0
  000d8	74 0e		 je	 SHORT $LN7@sys_displa
  000da	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000e1	48 39 44 24 30	 cmp	 QWORD PTR outf$[rsp], rax
  000e6	75 1a		 jne	 SHORT $LN8@sys_displa
$LN7@sys_displa:

; 160  :         PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");

  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@HMAAIHML@lost?5sys?4stdout?$AA@
  000ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000f6	e8 00 00 00 00	 call	 PyErr_SetString

; 161  :         return NULL;

  000fb	33 c0		 xor	 eax, eax
  000fd	e9 af 00 00 00	 jmp	 $LN12@sys_displa
$LN8@sys_displa:

; 162  :     }
; 163  :     if (PyFile_WriteObject(o, outf, 0) != 0) {

  00102	45 33 c0	 xor	 r8d, r8d
  00105	48 8b 54 24 30	 mov	 rdx, QWORD PTR outf$[rsp]
  0010a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR o$[rsp]
  0010f	e8 00 00 00 00	 call	 PyFile_WriteObject
  00114	85 c0		 test	 eax, eax
  00116	74 39		 je	 SHORT $LN6@sys_displa

; 164  :         if (PyErr_ExceptionMatches(PyExc_UnicodeEncodeError)) {

  00118	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_UnicodeEncodeError
  0011f	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00124	85 c0		 test	 eax, eax
  00126	74 25		 je	 SHORT $LN5@sys_displa

; 165  :             /* repr(o) is not encodable to sys.stdout.encoding with
; 166  :              * sys.stdout.errors error handler (which is probably 'strict') */
; 167  :             PyErr_Clear();

  00128	e8 00 00 00 00	 call	 PyErr_Clear

; 168  :             err = sys_displayhook_unencodable(outf, o);

  0012d	48 8b 54 24 68	 mov	 rdx, QWORD PTR o$[rsp]
  00132	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outf$[rsp]
  00137	e8 00 00 00 00	 call	 sys_displayhook_unencodable
  0013c	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax

; 169  :             if (err)

  00140	83 7c 24 40 00	 cmp	 DWORD PTR err$[rsp], 0
  00145	74 04		 je	 SHORT $LN4@sys_displa

; 170  :                 return NULL;

  00147	33 c0		 xor	 eax, eax
  00149	eb 66		 jmp	 SHORT $LN12@sys_displa
$LN4@sys_displa:

; 171  :         }
; 172  :         else {

  0014b	eb 04		 jmp	 SHORT $LN3@sys_displa
$LN5@sys_displa:

; 173  :             return NULL;

  0014d	33 c0		 xor	 eax, eax
  0014f	eb 60		 jmp	 SHORT $LN12@sys_displa
$LN3@sys_displa:
$LN6@sys_displa:

; 174  :         }
; 175  :     }
; 176  :     if (PyFile_WriteString("\n", outf) != 0)

  00151	48 8b 54 24 30	 mov	 rdx, QWORD PTR outf$[rsp]
  00156	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  0015d	e8 00 00 00 00	 call	 PyFile_WriteString
  00162	85 c0		 test	 eax, eax
  00164	74 04		 je	 SHORT $LN2@sys_displa

; 177  :         return NULL;

  00166	33 c0		 xor	 eax, eax
  00168	eb 47		 jmp	 SHORT $LN12@sys_displa
$LN2@sys_displa:

; 178  :     if (_PyObject_SetAttrId(builtins, &PyId__, o) != 0)

  0016a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__@?1??sys_displayhook@@9@9
  0016f	8b c0		 mov	 eax, eax
  00171	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00177	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00180	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00184	4c 8b 44 24 68	 mov	 r8, QWORD PTR o$[rsp]
  00189	48 8b d0	 mov	 rdx, rax
  0018c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR builtins$[rsp]
  00191	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00196	85 c0		 test	 eax, eax
  00198	74 04		 je	 SHORT $LN1@sys_displa

; 179  :         return NULL;

  0019a	33 c0		 xor	 eax, eax
  0019c	eb 13		 jmp	 SHORT $LN12@sys_displa
$LN1@sys_displa:

; 180  :     Py_INCREF(Py_None);

  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  001a5	e8 00 00 00 00	 call	 _Py_IncRef

; 181  :     return Py_None;

  001aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN12@sys_displa:

; 182  : }

  001b1	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001b5	c3		 ret	 0
sys_displayhook ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_06OLFOGHEN@strict?$AA@			; `string'
PUBLIC	??_C@_03IELNPCCE@?$CIO?$CJ?$AA@			; `string'
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0BB@GGCFDDAA@backslashreplace?$AA@	; `string'
EXTRN	PyUnicode_FromEncodedObject:PROC
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyUnicode_AsEncodedString:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	_PyObject_GetAttrId:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\sysmodule.c
pdata	SEGMENT
$pdata$sys_displayhook_unencodable DD imagerel sys_displayhook_unencodable
	DD	imagerel sys_displayhook_unencodable+476
	DD	imagerel $unwind$sys_displayhook_unencodable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_displayhook_unencodable DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_06OLFOGHEN@strict?$AA@
CONST	SEGMENT
??_C@_06OLFOGHEN@strict?$AA@ DB 'strict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_03IELNPCCE@?$CIO?$CJ?$AA@ DB '(O)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
CONST	SEGMENT
??_C@_0BB@GGCFDDAA@backslashreplace?$AA@ DB 'backslashreplace', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_displayhook_unencodable
_TEXT	SEGMENT
encoded$ = 32
escaped_str$ = 40
stdout_encoding_str$ = 48
ret$ = 56
repr_str$ = 64
stdout_encoding$ = 72
result$ = 80
buffer$ = 88
outf$ = 112
o$ = 120
sys_displayhook_unencodable PROC			; COMDAT

; 77   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 78   :     PyObject *stdout_encoding = NULL;

  0000e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR stdout_encoding$[rsp], 0

; 79   :     PyObject *encoded, *escaped_str, *repr_str, *buffer, *result;
; 80   :     char *stdout_encoding_str;
; 81   :     int ret;
; 82   :     _Py_IDENTIFIER(encoding);
; 83   :     _Py_IDENTIFIER(buffer);
; 84   : 
; 85   :     stdout_encoding = _PyObject_GetAttrId(outf, &PyId_encoding);

  00017	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_encoding@?1??sys_displayhook_unencodable@@9@9
  0001c	8b c0		 mov	 eax, eax
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00024	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0002d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00031	48 8b d0	 mov	 rdx, rax
  00034	48 8b 4c 24 70	 mov	 rcx, QWORD PTR outf$[rsp]
  00039	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0003e	48 89 44 24 48	 mov	 QWORD PTR stdout_encoding$[rsp], rax

; 86   :     if (stdout_encoding == NULL)

  00043	48 83 7c 24 48
	00		 cmp	 QWORD PTR stdout_encoding$[rsp], 0
  00049	75 05		 jne	 SHORT $LN12@sys_displa@2

; 87   :         goto error;

  0004b	e9 63 01 00 00	 jmp	 $error$63755
$LN12@sys_displa@2:

; 88   :     stdout_encoding_str = _PyUnicode_AsString(stdout_encoding);

  00050	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stdout_encoding$[rsp]
  00055	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0005a	48 89 44 24 30	 mov	 QWORD PTR stdout_encoding_str$[rsp], rax

; 89   :     if (stdout_encoding_str == NULL)

  0005f	48 83 7c 24 30
	00		 cmp	 QWORD PTR stdout_encoding_str$[rsp], 0
  00065	75 05		 jne	 SHORT $LN11@sys_displa@2

; 90   :         goto error;

  00067	e9 47 01 00 00	 jmp	 $error$63755
$LN11@sys_displa@2:

; 91   : 
; 92   :     repr_str = PyObject_Repr(o);

  0006c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR o$[rsp]
  00071	e8 00 00 00 00	 call	 PyObject_Repr
  00076	48 89 44 24 40	 mov	 QWORD PTR repr_str$[rsp], rax

; 93   :     if (repr_str == NULL)

  0007b	48 83 7c 24 40
	00		 cmp	 QWORD PTR repr_str$[rsp], 0
  00081	75 05		 jne	 SHORT $LN10@sys_displa@2

; 94   :         goto error;

  00083	e9 2b 01 00 00	 jmp	 $error$63755
$LN10@sys_displa@2:

; 95   :     encoded = PyUnicode_AsEncodedString(repr_str,
; 96   :                                         stdout_encoding_str,
; 97   :                                         "backslashreplace");

  00088	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
  0008f	48 8b 54 24 30	 mov	 rdx, QWORD PTR stdout_encoding_str$[rsp]
  00094	48 8b 4c 24 40	 mov	 rcx, QWORD PTR repr_str$[rsp]
  00099	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString
  0009e	48 89 44 24 20	 mov	 QWORD PTR encoded$[rsp], rax

; 98   :     Py_DECREF(repr_str);

  000a3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR repr_str$[rsp]
  000a8	e8 00 00 00 00	 call	 _Py_DecRef

; 99   :     if (encoded == NULL)

  000ad	48 83 7c 24 20
	00		 cmp	 QWORD PTR encoded$[rsp], 0
  000b3	75 05		 jne	 SHORT $LN9@sys_displa@2

; 100  :         goto error;

  000b5	e9 f9 00 00 00	 jmp	 $error$63755
$LN9@sys_displa@2:

; 101  : 
; 102  :     buffer = _PyObject_GetAttrId(outf, &PyId_buffer);

  000ba	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_buffer@?1??sys_displayhook_unencodable@@9@9
  000bf	8b c0		 mov	 eax, eax
  000c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000c7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000d0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000d4	48 8b d0	 mov	 rdx, rax
  000d7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR outf$[rsp]
  000dc	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000e1	48 89 44 24 58	 mov	 QWORD PTR buffer$[rsp], rax

; 103  :     if (buffer) {

  000e6	48 83 7c 24 58
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000ec	74 62		 je	 SHORT $LN8@sys_displa@2

; 104  :         _Py_IDENTIFIER(write);
; 105  :         result = _PyObject_CallMethodId(buffer, &PyId_write, "(O)", encoded);

  000ee	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_write@?2??sys_displayhook_unencodable@@9@9
  000f3	8b c0		 mov	 eax, eax
  000f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000fb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00104	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00108	4c 8b 4c 24 20	 mov	 r9, QWORD PTR encoded$[rsp]
  0010d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00114	48 8b d0	 mov	 rdx, rax
  00117	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  0011c	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00121	48 89 44 24 50	 mov	 QWORD PTR result$[rsp], rax

; 106  :         Py_DECREF(buffer);

  00126	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  0012b	e8 00 00 00 00	 call	 _Py_DecRef

; 107  :         Py_DECREF(encoded);

  00130	48 8b 4c 24 20	 mov	 rcx, QWORD PTR encoded$[rsp]
  00135	e8 00 00 00 00	 call	 _Py_DecRef

; 108  :         if (result == NULL)

  0013a	48 83 7c 24 50
	00		 cmp	 QWORD PTR result$[rsp], 0
  00140	75 02		 jne	 SHORT $LN7@sys_displa@2

; 109  :             goto error;

  00142	eb 6f		 jmp	 SHORT $error$63755
$LN7@sys_displa@2:

; 110  :         Py_DECREF(result);

  00144	48 8b 4c 24 50	 mov	 rcx, QWORD PTR result$[rsp]
  00149	e8 00 00 00 00	 call	 _Py_DecRef

; 111  :     }
; 112  :     else {

  0014e	eb 59		 jmp	 SHORT $LN6@sys_displa@2
$LN8@sys_displa@2:

; 113  :         PyErr_Clear();

  00150	e8 00 00 00 00	 call	 PyErr_Clear

; 114  :         escaped_str = PyUnicode_FromEncodedObject(encoded,
; 115  :                                                   stdout_encoding_str,
; 116  :                                                   "strict");

  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  0015c	48 8b 54 24 30	 mov	 rdx, QWORD PTR stdout_encoding_str$[rsp]
  00161	48 8b 4c 24 20	 mov	 rcx, QWORD PTR encoded$[rsp]
  00166	e8 00 00 00 00	 call	 PyUnicode_FromEncodedObject
  0016b	48 89 44 24 28	 mov	 QWORD PTR escaped_str$[rsp], rax

; 117  :         Py_DECREF(encoded);

  00170	48 8b 4c 24 20	 mov	 rcx, QWORD PTR encoded$[rsp]
  00175	e8 00 00 00 00	 call	 _Py_DecRef

; 118  :         if (PyFile_WriteObject(escaped_str, outf, Py_PRINT_RAW) != 0) {

  0017a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00180	48 8b 54 24 70	 mov	 rdx, QWORD PTR outf$[rsp]
  00185	48 8b 4c 24 28	 mov	 rcx, QWORD PTR escaped_str$[rsp]
  0018a	e8 00 00 00 00	 call	 PyFile_WriteObject
  0018f	85 c0		 test	 eax, eax
  00191	74 0c		 je	 SHORT $LN5@sys_displa@2

; 119  :             Py_DECREF(escaped_str);

  00193	48 8b 4c 24 28	 mov	 rcx, QWORD PTR escaped_str$[rsp]
  00198	e8 00 00 00 00	 call	 _Py_DecRef

; 120  :             goto error;

  0019d	eb 14		 jmp	 SHORT $error$63755
$LN5@sys_displa@2:

; 121  :         }
; 122  :         Py_DECREF(escaped_str);

  0019f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR escaped_str$[rsp]
  001a4	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@sys_displa@2:

; 123  :     }
; 124  :     ret = 0;

  001a9	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 125  :     goto finally;

  001b1	eb 08		 jmp	 SHORT $finally$63780
$error$63755:

; 126  : 
; 127  : error:
; 128  :     ret = -1;

  001b3	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1
$finally$63780:
$LN4@sys_displa@2:

; 129  : finally:
; 130  :     Py_XDECREF(stdout_encoding);

  001bb	48 83 7c 24 48
	00		 cmp	 QWORD PTR stdout_encoding$[rsp], 0
  001c1	74 0a		 je	 SHORT $LN1@sys_displa@2
  001c3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stdout_encoding$[rsp]
  001c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@sys_displa@2:
  001cd	33 c0		 xor	 eax, eax
  001cf	85 c0		 test	 eax, eax
  001d1	75 e8		 jne	 SHORT $LN4@sys_displa@2

; 131  :     return ret;

  001d3	8b 44 24 38	 mov	 eax, DWORD PTR ret$[rsp]

; 132  : }

  001d7	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001db	c3		 ret	 0
sys_displayhook_unencodable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyErr_Display:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\sysmodule.c
pdata	SEGMENT
$pdata$sys_excepthook DD imagerel sys_excepthook
	DD	imagerel sys_excepthook+125
	DD	imagerel $unwind$sys_excepthook
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_excepthook DD 010e01H
	DD	0c20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_excepthook
_TEXT	SEGMENT
value$ = 64
tb$ = 72
exc$ = 80
self$ = 112
args$ = 120
sys_excepthook PROC					; COMDAT

; 192  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 193  :     PyObject *exc, *value, *tb;
; 194  :     if (!PyArg_UnpackTuple(args, "excepthook", 3, 3, &exc, &value, &tb))

  0000e	48 8d 44 24 48	 lea	 rax, QWORD PTR tb$[rsp]
  00013	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00018	48 8d 44 24 40	 lea	 rax, QWORD PTR value$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 8d 44 24 50	 lea	 rax, QWORD PTR exc$[rsp]
  00027	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00032	41 b8 03 00 00
	00		 mov	 r8d, 3
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NONONIOP@excepthook?$AA@
  0003f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00044	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00049	85 c0		 test	 eax, eax
  0004b	75 04		 jne	 SHORT $LN1@sys_except

; 195  :         return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	eb 27		 jmp	 SHORT $LN2@sys_except
$LN1@sys_except:

; 196  :     PyErr_Display(exc, value, tb);

  00051	4c 8b 44 24 48	 mov	 r8, QWORD PTR tb$[rsp]
  00056	48 8b 54 24 40	 mov	 rdx, QWORD PTR value$[rsp]
  0005b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$[rsp]
  00060	e8 00 00 00 00	 call	 PyErr_Display

; 197  :     Py_INCREF(Py_None);

  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0006c	e8 00 00 00 00	 call	 _Py_IncRef

; 198  :     return Py_None;

  00071	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@sys_except:

; 199  : }

  00078	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0007c	c3		 ret	 0
sys_excepthook ENDP
_TEXT	ENDS
PUBLIC	??_C@_05IDJGALOC@?$CIOOO?$CJ?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_exc_info DD imagerel sys_exc_info
	DD	imagerel sys_exc_info+176
	DD	imagerel $unwind$sys_exc_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_exc_info DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_05IDJGALOC@?$CIOOO?$CJ?$AA@
CONST	SEGMENT
??_C@_05IDJGALOC@?$CIOOO?$CJ?$AA@ DB '(OOO)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_exc_info
_TEXT	SEGMENT
tstate$ = 32
tv69 = 40
tv74 = 48
tv79 = 56
self$ = 80
noargs$ = 88
sys_exc_info PROC					; COMDAT

; 209  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 210  :     PyThreadState *tstate;
; 211  :     tstate = PyThreadState_GET();

  0000e	e8 00 00 00 00	 call	 PyThreadState_Get
  00013	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 212  :     return Py_BuildValue(
; 213  :         "(OOO)",
; 214  :         tstate->exc_type != NULL ? tstate->exc_type : Py_None,
; 215  :         tstate->exc_value != NULL ? tstate->exc_value : Py_None,
; 216  :         tstate->exc_traceback != NULL ?
; 217  :             tstate->exc_traceback : Py_None);

  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0001d	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00022	74 10		 je	 SHORT $LN3@sys_exc_in
  00024	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00029	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0002d	48 89 44 24 28	 mov	 QWORD PTR tv69[rsp], rax
  00032	eb 0c		 jmp	 SHORT $LN4@sys_exc_in
$LN3@sys_exc_in:
  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0003b	48 89 44 24 28	 mov	 QWORD PTR tv69[rsp], rax
$LN4@sys_exc_in:
  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00045	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0004a	74 10		 je	 SHORT $LN5@sys_exc_in
  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00051	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00055	48 89 44 24 30	 mov	 QWORD PTR tv74[rsp], rax
  0005a	eb 0c		 jmp	 SHORT $LN6@sys_exc_in
$LN5@sys_exc_in:
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00063	48 89 44 24 30	 mov	 QWORD PTR tv74[rsp], rax
$LN6@sys_exc_in:
  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0006d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00072	74 10		 je	 SHORT $LN7@sys_exc_in
  00074	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00079	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0007d	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
  00082	eb 0c		 jmp	 SHORT $LN8@sys_exc_in
$LN7@sys_exc_in:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0008b	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN8@sys_exc_in:
  00090	4c 8b 4c 24 28	 mov	 r9, QWORD PTR tv69[rsp]
  00095	4c 8b 44 24 30	 mov	 r8, QWORD PTR tv74[rsp]
  0009a	48 8b 54 24 38	 mov	 rdx, QWORD PTR tv79[rsp]
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IDJGALOC@?$CIOOO?$CJ?$AA@
  000a6	e8 00 00 00 00	 call	 Py_BuildValue

; 218  : }

  000ab	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000af	c3		 ret	 0
sys_exc_info ENDP
_TEXT	ENDS
EXTRN	PyErr_SetObject:PROC
EXTRN	PyExc_SystemExit:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_exit DD imagerel sys_exit
	DD	imagerel sys_exit+91
	DD	imagerel $unwind$sys_exit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_exit DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_exit
_TEXT	SEGMENT
exit_code$ = 48
self$ = 80
args$ = 88
sys_exit PROC						; COMDAT

; 229  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 230  :     PyObject *exit_code = 0;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR exit_code$[rsp], 0

; 231  :     if (!PyArg_UnpackTuple(args, "exit", 0, 1, &exit_code))

  00017	48 8d 44 24 30	 lea	 rax, QWORD PTR exit_code$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00021	41 b9 01 00 00
	00		 mov	 r9d, 1
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MKNBDEPB@exit?$AA@
  00031	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00036	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN1@sys_exit

; 232  :         return NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	eb 13		 jmp	 SHORT $LN2@sys_exit
$LN1@sys_exit:

; 233  :     /* Raise SystemExit so callers may catch it or clean up. */
; 234  :     PyErr_SetObject(PyExc_SystemExit, exit_code);

  00043	48 8b 54 24 30	 mov	 rdx, QWORD PTR exit_code$[rsp]
  00048	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemExit
  0004f	e8 00 00 00 00	 call	 PyErr_SetObject

; 235  :     return NULL;

  00054	33 c0		 xor	 eax, eax
$LN2@sys_exit:

; 236  : }

  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
sys_exit ENDP
_TEXT	ENDS
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyUnicode_GetDefaultEncoding:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getdefaultencoding DD imagerel sys_getdefaultencoding
	DD	imagerel sys_getdefaultencoding+27
	DD	imagerel $unwind$sys_getdefaultencoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getdefaultencoding DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_getdefaultencoding
_TEXT	SEGMENT
self$ = 48
sys_getdefaultencoding PROC				; COMDAT

; 251  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 252  :     return PyUnicode_FromString(PyUnicode_GetDefaultEncoding());

  00009	e8 00 00 00 00	 call	 PyUnicode_GetDefaultEncoding
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 PyUnicode_FromString

; 253  : }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
sys_getdefaultencoding ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@ONHMLP@filesystem?5encoding?5is?5not?5initi@ ; `string'
EXTRN	Py_FileSystemDefaultEncoding:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getfilesystemencoding DD imagerel sys_getfilesystemencoding
	DD	imagerel sys_getfilesystemencoding+59
	DD	imagerel $unwind$sys_getfilesystemencoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getfilesystemencoding DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CH@ONHMLP@filesystem?5encoding?5is?5not?5initi@
CONST	SEGMENT
??_C@_0CH@ONHMLP@filesystem?5encoding?5is?5not?5initi@ DB 'filesystem enc'
	DB	'oding is not initialized', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_getfilesystemencoding
_TEXT	SEGMENT
self$ = 48
sys_getfilesystemencoding PROC				; COMDAT

; 264  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 265  :     if (Py_FileSystemDefaultEncoding)

  00009	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Py_FileSystemDefaultEncoding, 0
  00011	74 0e		 je	 SHORT $LN1@sys_getfil

; 266  :         return PyUnicode_FromString(Py_FileSystemDefaultEncoding);

  00013	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Py_FileSystemDefaultEncoding
  0001a	e8 00 00 00 00	 call	 PyUnicode_FromString
  0001f	eb 15		 jmp	 SHORT $LN2@sys_getfil
$LN1@sys_getfil:

; 267  :     PyErr_SetString(PyExc_RuntimeError,
; 268  :                     "filesystem encoding is not initialized");

  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@ONHMLP@filesystem?5encoding?5is?5not?5initi@
  00028	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0002f	e8 00 00 00 00	 call	 PyErr_SetString

; 269  :     return NULL;

  00034	33 c0		 xor	 eax, eax
$LN2@sys_getfil:

; 270  : }

  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
sys_getfilesystemencoding ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NEEGIGCF@can?8t?5intern?5?$CF?4400s?$AA@ ; `string'
PUBLIC	??_C@_08LFEPHMOI@U?3intern?$AA@			; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyUnicode_InternInPlace:PROC
EXTRN	PyUnicode_Type:BYTE
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_intern DD imagerel sys_intern
	DD	imagerel sys_intern+130
	DD	imagerel $unwind$sys_intern
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_intern DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BE@NEEGIGCF@can?8t?5intern?5?$CF?4400s?$AA@
CONST	SEGMENT
??_C@_0BE@NEEGIGCF@can?8t?5intern?5?$CF?4400s?$AA@ DB 'can''t intern %.40'
	DB	'0s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08LFEPHMOI@U?3intern?$AA@
CONST	SEGMENT
??_C@_08LFEPHMOI@U?3intern?$AA@ DB 'U:intern', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_intern
_TEXT	SEGMENT
s$ = 32
self$ = 64
args$ = 72
sys_intern PROC						; COMDAT

; 281  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 282  :     PyObject *s;
; 283  :     if (!PyArg_ParseTuple(args, "U:intern", &s))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR s$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LFEPHMOI@U?3intern?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN3@sys_intern

; 284  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 51		 jmp	 SHORT $LN4@sys_intern
$LN3@sys_intern:

; 285  :     if (PyUnicode_CheckExact(s)) {

  0002c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00038	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0003c	75 1d		 jne	 SHORT $LN2@sys_intern

; 286  :         Py_INCREF(s);

  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00043	e8 00 00 00 00	 call	 _Py_IncRef

; 287  :         PyUnicode_InternInPlace(&s);

  00048	48 8d 4c 24 20	 lea	 rcx, QWORD PTR s$[rsp]
  0004d	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 288  :         return s;

  00052	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00057	eb 24		 jmp	 SHORT $LN4@sys_intern

; 289  :     }
; 290  :     else {

  00059	eb 22		 jmp	 SHORT $LN1@sys_intern
$LN2@sys_intern:

; 291  :         PyErr_Format(PyExc_TypeError,
; 292  :                         "can't intern %.400s", s->ob_type->tp_name);

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00060	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00064	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NEEGIGCF@can?8t?5intern?5?$CF?4400s?$AA@
  0006f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00076	e8 00 00 00 00	 call	 PyErr_Format

; 293  :         return NULL;

  0007b	33 c0		 xor	 eax, eax
$LN1@sys_intern:
$LN4@sys_intern:

; 294  :     }
; 295  : }

  0007d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00081	c3		 ret	 0
sys_intern ENDP
_TEXT	ENDS
EXTRN	PyEval_SetTrace:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_settrace DD imagerel sys_settrace
	DD	imagerel sys_settrace+94
	DD	imagerel $unwind$sys_settrace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_settrace DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_settrace
_TEXT	SEGMENT
self$ = 48
args$ = 56
sys_settrace PROC					; COMDAT

; 415  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 416  :     if (trace_init() == -1)

  0000e	e8 00 00 00 00	 call	 trace_init
  00013	83 f8 ff	 cmp	 eax, -1
  00016	75 04		 jne	 SHORT $LN3@sys_settra

; 417  :         return NULL;

  00018	33 c0		 xor	 eax, eax
  0001a	eb 3d		 jmp	 SHORT $LN4@sys_settra
$LN3@sys_settra:

; 418  :     if (args == Py_None)

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00023	48 39 44 24 38	 cmp	 QWORD PTR args$[rsp], rax
  00028	75 0b		 jne	 SHORT $LN2@sys_settra

; 419  :         PyEval_SetTrace(NULL, NULL);

  0002a	33 d2		 xor	 edx, edx
  0002c	33 c9		 xor	 ecx, ecx
  0002e	e8 00 00 00 00	 call	 PyEval_SetTrace

; 420  :     else

  00033	eb 11		 jmp	 SHORT $LN1@sys_settra
$LN2@sys_settra:

; 421  :         PyEval_SetTrace(trace_trampoline, args);

  00035	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:trace_trampoline
  00041	e8 00 00 00 00	 call	 PyEval_SetTrace
$LN1@sys_settra:

; 422  :     Py_INCREF(Py_None);

  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0004d	e8 00 00 00 00	 call	 _Py_IncRef

; 423  :     return Py_None;

  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@sys_settra:

; 424  : }

  00059	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005d	c3		 ret	 0
sys_settrace ENDP
_TEXT	ENDS
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$trace_init DD imagerel trace_init
	DD	imagerel trace_init+121
	DD	imagerel $unwind$trace_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$trace_init DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT trace_init
_TEXT	SEGMENT
i$ = 32
name$ = 40
trace_init PROC						; COMDAT

; 314  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 315  :     static char *whatnames[7] = {"call", "exception", "line", "return",
; 316  :                                     "c_call", "c_exception", "c_return"};
; 317  :     PyObject *name;
; 318  :     int i;
; 319  :     for (i = 0; i < 7; ++i) {

  00004	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0000c	eb 0a		 jmp	 SHORT $LN5@trace_init
$LN4@trace_init:
  0000e	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00012	ff c0		 inc	 eax
  00014	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN5@trace_init:
  00018	83 7c 24 20 07	 cmp	 DWORD PTR i$[rsp], 7
  0001d	7d 53		 jge	 SHORT $LN3@trace_init

; 320  :         if (whatstrings[i] == NULL) {

  0001f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:whatstrings
  0002b	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00030	75 3e		 jne	 SHORT $LN2@trace_init

; 321  :             name = PyUnicode_InternFromString(whatnames[i]);

  00032	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?whatnames@?1??trace_init@@9@9
  0003e	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00042	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00047	48 89 44 24 28	 mov	 QWORD PTR name$[rsp], rax

; 322  :             if (name == NULL)

  0004c	48 83 7c 24 28
	00		 cmp	 QWORD PTR name$[rsp], 0
  00052	75 07		 jne	 SHORT $LN1@trace_init

; 323  :                 return -1;

  00054	b8 ff ff ff ff	 mov	 eax, -1
  00059	eb 19		 jmp	 SHORT $LN6@trace_init
$LN1@trace_init:

; 324  :             whatstrings[i] = name;

  0005b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:whatstrings
  00067	48 8b 54 24 28	 mov	 rdx, QWORD PTR name$[rsp]
  0006c	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
$LN2@trace_init:

; 325  :         }
; 326  :     }

  00070	eb 9c		 jmp	 SHORT $LN4@trace_init
$LN3@trace_init:

; 327  :     return 0;

  00072	33 c0		 xor	 eax, eax
$LN6@trace_init:

; 328  : }

  00074	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00078	c3		 ret	 0
trace_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@MGHEILLN@trace_trampoline?$AA@	; `string'
PUBLIC	??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$trace_trampoline DD imagerel trace_trampoline
	DD	imagerel trace_trampoline+389
	DD	imagerel $unwind$trace_trampoline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$trace_trampoline DD 011801H
	DD	0c218H
xdata	ENDS
;	COMDAT ??_C@_0BB@MGHEILLN@trace_trampoline?$AA@
CONST	SEGMENT
??_C@_0BB@MGHEILLN@trace_trampoline?$AA@ DB 'trace_trampoline', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@ DB '..\Python\sysmodul'
	DB	'e.c', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT trace_trampoline
_TEXT	SEGMENT
tstate$ = 48
result$ = 56
callback$ = 64
_py_tmp$64003 = 72
temp$64008 = 80
self$ = 112
frame$ = 120
what$ = 128
arg$ = 136
trace_trampoline PROC					; COMDAT

; 384  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 385  :     PyThreadState *tstate = frame->f_tstate;

  00018	48 8b 44 24 78	 mov	 rax, QWORD PTR frame$[rsp]
  0001d	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00024	48 89 44 24 30	 mov	 QWORD PTR tstate$[rsp], rax

; 386  :     PyObject *callback;
; 387  :     PyObject *result;
; 388  : 
; 389  :     if (what == PyTrace_CALL)

  00029	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR what$[rsp], 0
  00031	75 0c		 jne	 SHORT $LN14@trace_tram

; 390  :         callback = self;

  00033	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00038	48 89 44 24 40	 mov	 QWORD PTR callback$[rsp], rax

; 391  :     else

  0003d	eb 11		 jmp	 SHORT $LN13@trace_tram
$LN14@trace_tram:

; 392  :         callback = frame->f_trace;

  0003f	48 8b 44 24 78	 mov	 rax, QWORD PTR frame$[rsp]
  00044	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  0004b	48 89 44 24 40	 mov	 QWORD PTR callback$[rsp], rax
$LN13@trace_tram:

; 393  :     if (callback == NULL)

  00050	48 83 7c 24 40
	00		 cmp	 QWORD PTR callback$[rsp], 0
  00056	75 07		 jne	 SHORT $LN12@trace_tram

; 394  :         return 0;

  00058	33 c0		 xor	 eax, eax
  0005a	e9 21 01 00 00	 jmp	 $LN15@trace_tram
$LN12@trace_tram:

; 395  :     result = call_trampoline(tstate, callback, frame, what, arg);

  0005f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR arg$[rsp]
  00067	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006c	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR what$[rsp]
  00074	4c 8b 44 24 78	 mov	 r8, QWORD PTR frame$[rsp]
  00079	48 8b 54 24 40	 mov	 rdx, QWORD PTR callback$[rsp]
  0007e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tstate$[rsp]
  00083	e8 00 00 00 00	 call	 call_trampoline
  00088	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 396  :     if (result == NULL) {

  0008d	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  00093	0f 85 81 00 00
	00		 jne	 $LN11@trace_tram

; 397  :         PyEval_SetTrace(NULL, NULL);

  00099	33 d2		 xor	 edx, edx
  0009b	33 c9		 xor	 ecx, ecx
  0009d	e8 00 00 00 00	 call	 PyEval_SetTrace
$LN10@trace_tram:

; 398  :         Py_CLEAR(frame->f_trace);

  000a2	48 8b 44 24 78	 mov	 rax, QWORD PTR frame$[rsp]
  000a7	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  000af	74 5c		 je	 SHORT $LN7@trace_tram
  000b1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b9	48 8b 44 24 78	 mov	 rax, QWORD PTR frame$[rsp]
  000be	4c 8b 88 a8 00
	00 00		 mov	 r9, QWORD PTR [rax+168]
  000c5	41 b8 8e 01 00
	00		 mov	 r8d, 398		; 0000018eH
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MGHEILLN@trace_trampoline?$AA@
  000d9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000de	85 c0		 test	 eax, eax
  000e0	75 2b		 jne	 SHORT $LN7@trace_tram
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR frame$[rsp]
  000e7	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  000ee	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$64003[rsp], rax
  000f3	48 8b 44 24 78	 mov	 rax, QWORD PTR frame$[rsp]
  000f8	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0
  00103	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$64003[rsp]
  00108	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@trace_tram:
  0010d	33 c0		 xor	 eax, eax
  0010f	85 c0		 test	 eax, eax
  00111	75 8f		 jne	 SHORT $LN10@trace_tram

; 399  :         return -1;

  00113	b8 ff ff ff ff	 mov	 eax, -1
  00118	eb 66		 jmp	 SHORT $LN15@trace_tram
$LN11@trace_tram:

; 400  :     }
; 401  :     if (result != Py_None) {

  0011a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00121	48 39 44 24 38	 cmp	 QWORD PTR result$[rsp], rax
  00126	74 4c		 je	 SHORT $LN6@trace_tram

; 402  :         PyObject *temp = frame->f_trace;

  00128	48 8b 44 24 78	 mov	 rax, QWORD PTR frame$[rsp]
  0012d	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  00134	48 89 44 24 50	 mov	 QWORD PTR temp$64008[rsp], rax

; 403  :         frame->f_trace = NULL;

  00139	48 8b 44 24 78	 mov	 rax, QWORD PTR frame$[rsp]
  0013e	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0
$LN5@trace_tram:

; 404  :         Py_XDECREF(temp);

  00149	48 83 7c 24 50
	00		 cmp	 QWORD PTR temp$64008[rsp], 0
  0014f	74 0a		 je	 SHORT $LN2@trace_tram
  00151	48 8b 4c 24 50	 mov	 rcx, QWORD PTR temp$64008[rsp]
  00156	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@trace_tram:
  0015b	33 c0		 xor	 eax, eax
  0015d	85 c0		 test	 eax, eax
  0015f	75 e8		 jne	 SHORT $LN5@trace_tram

; 405  :         frame->f_trace = result;

  00161	48 8b 44 24 78	 mov	 rax, QWORD PTR frame$[rsp]
  00166	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  0016b	48 89 88 a8 00
	00 00		 mov	 QWORD PTR [rax+168], rcx

; 406  :     }
; 407  :     else {

  00172	eb 0a		 jmp	 SHORT $LN1@trace_tram
$LN6@trace_tram:

; 408  :         Py_DECREF(result);

  00174	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  00179	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@trace_tram:

; 409  :     }
; 410  :     return 0;

  0017e	33 c0		 xor	 eax, eax
$LN15@trace_tram:

; 411  : }

  00180	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00184	c3		 ret	 0
trace_trampoline ENDP
_TEXT	ENDS
EXTRN	PyTraceBack_Here:PROC
EXTRN	PyFrame_LocalsToFast:PROC
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyFrame_FastToLocals:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_trampoline DD imagerel call_trampoline
	DD	imagerel call_trampoline+256
	DD	imagerel $unwind$call_trampoline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_trampoline DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT call_trampoline
_TEXT	SEGMENT
args$ = 32
whatstr$ = 40
result$ = 48
tstate$ = 80
callback$ = 88
frame$ = 96
what$ = 104
arg$ = 112
call_trampoline PROC					; COMDAT

; 334  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 335  :     PyObject *args = PyTuple_New(3);

  00018	b9 03 00 00 00	 mov	 ecx, 3
  0001d	e8 00 00 00 00	 call	 PyTuple_New
  00022	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 336  :     PyObject *whatstr;
; 337  :     PyObject *result;
; 338  : 
; 339  :     if (args == NULL)

  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  0002d	75 07		 jne	 SHORT $LN3@call_tramp

; 340  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	e9 c5 00 00 00	 jmp	 $LN4@call_tramp
$LN3@call_tramp:

; 341  :     Py_INCREF(frame);

  00036	48 8b 4c 24 60	 mov	 rcx, QWORD PTR frame$[rsp]
  0003b	e8 00 00 00 00	 call	 _Py_IncRef

; 342  :     whatstr = whatstrings[what];

  00040	48 63 44 24 68	 movsxd	 rax, DWORD PTR what$[rsp]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:whatstrings
  0004c	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00050	48 89 44 24 28	 mov	 QWORD PTR whatstr$[rsp], rax

; 343  :     Py_INCREF(whatstr);

  00055	48 8b 4c 24 28	 mov	 rcx, QWORD PTR whatstr$[rsp]
  0005a	e8 00 00 00 00	 call	 _Py_IncRef

; 344  :     if (arg == NULL)

  0005f	48 83 7c 24 70
	00		 cmp	 QWORD PTR arg$[rsp], 0
  00065	75 0c		 jne	 SHORT $LN2@call_tramp

; 345  :         arg = Py_None;

  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006e	48 89 44 24 70	 mov	 QWORD PTR arg$[rsp], rax
$LN2@call_tramp:

; 346  :     Py_INCREF(arg);

  00073	48 8b 4c 24 70	 mov	 rcx, QWORD PTR arg$[rsp]
  00078	e8 00 00 00 00	 call	 _Py_IncRef

; 347  :     PyTuple_SET_ITEM(args, 0, (PyObject *)frame);

  0007d	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  00082	48 8b 4c 24 60	 mov	 rcx, QWORD PTR frame$[rsp]
  00087	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 348  :     PyTuple_SET_ITEM(args, 1, whatstr);

  0008b	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  00090	48 8b 4c 24 28	 mov	 rcx, QWORD PTR whatstr$[rsp]
  00095	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 349  :     PyTuple_SET_ITEM(args, 2, arg);

  00099	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  0009e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR arg$[rsp]
  000a3	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 350  : 
; 351  :     /* call the Python-level function */
; 352  :     PyFrame_FastToLocals(frame);

  000aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR frame$[rsp]
  000af	e8 00 00 00 00	 call	 PyFrame_FastToLocals

; 353  :     result = PyEval_CallObject(callback, args);

  000b4	45 33 c0	 xor	 r8d, r8d
  000b7	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  000bc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR callback$[rsp]
  000c1	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  000c6	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 354  :     PyFrame_LocalsToFast(frame, 1);

  000cb	ba 01 00 00 00	 mov	 edx, 1
  000d0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR frame$[rsp]
  000d5	e8 00 00 00 00	 call	 PyFrame_LocalsToFast

; 355  :     if (result == NULL)

  000da	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  000e0	75 0a		 jne	 SHORT $LN1@call_tramp

; 356  :         PyTraceBack_Here(frame);

  000e2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR frame$[rsp]
  000e7	e8 00 00 00 00	 call	 PyTraceBack_Here
$LN1@call_tramp:

; 357  : 
; 358  :     /* cleanup */
; 359  :     Py_DECREF(args);

  000ec	48 8b 4c 24 20	 mov	 rcx, QWORD PTR args$[rsp]
  000f1	e8 00 00 00 00	 call	 _Py_DecRef

; 360  :     return result;

  000f6	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
$LN4@call_tramp:

; 361  : }

  000fb	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ff	c3		 ret	 0
call_trampoline ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_gettrace DD imagerel sys_gettrace
	DD	imagerel sys_gettrace+78
	DD	imagerel $unwind$sys_gettrace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_gettrace DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_gettrace
_TEXT	SEGMENT
temp$ = 32
tstate$ = 40
self$ = 64
args$ = 72
sys_gettrace PROC					; COMDAT

; 435  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 436  :     PyThreadState *tstate = PyThreadState_GET();

  0000e	e8 00 00 00 00	 call	 PyThreadState_Get
  00013	48 89 44 24 28	 mov	 QWORD PTR tstate$[rsp], rax

; 437  :     PyObject *temp = tstate->c_traceobj;

  00018	48 8b 44 24 28	 mov	 rax, QWORD PTR tstate$[rsp]
  0001d	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00021	48 89 44 24 20	 mov	 QWORD PTR temp$[rsp], rax

; 438  : 
; 439  :     if (temp == NULL)

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR temp$[rsp], 0
  0002c	75 0c		 jne	 SHORT $LN1@sys_gettra

; 440  :         temp = Py_None;

  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00035	48 89 44 24 20	 mov	 QWORD PTR temp$[rsp], rax
$LN1@sys_gettra:

; 441  :     Py_INCREF(temp);

  0003a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR temp$[rsp]
  0003f	e8 00 00 00 00	 call	 _Py_IncRef

; 442  :     return temp;

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR temp$[rsp]

; 443  : }

  00049	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004d	c3		 ret	 0
sys_gettrace ENDP
_TEXT	ENDS
EXTRN	PyEval_SetProfile:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_setprofile DD imagerel sys_setprofile
	DD	imagerel sys_setprofile+94
	DD	imagerel $unwind$sys_setprofile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_setprofile DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_setprofile
_TEXT	SEGMENT
self$ = 48
args$ = 56
sys_setprofile PROC					; COMDAT

; 454  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 455  :     if (trace_init() == -1)

  0000e	e8 00 00 00 00	 call	 trace_init
  00013	83 f8 ff	 cmp	 eax, -1
  00016	75 04		 jne	 SHORT $LN3@sys_setpro

; 456  :         return NULL;

  00018	33 c0		 xor	 eax, eax
  0001a	eb 3d		 jmp	 SHORT $LN4@sys_setpro
$LN3@sys_setpro:

; 457  :     if (args == Py_None)

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00023	48 39 44 24 38	 cmp	 QWORD PTR args$[rsp], rax
  00028	75 0b		 jne	 SHORT $LN2@sys_setpro

; 458  :         PyEval_SetProfile(NULL, NULL);

  0002a	33 d2		 xor	 edx, edx
  0002c	33 c9		 xor	 ecx, ecx
  0002e	e8 00 00 00 00	 call	 PyEval_SetProfile

; 459  :     else

  00033	eb 11		 jmp	 SHORT $LN1@sys_setpro
$LN2@sys_setpro:

; 460  :         PyEval_SetProfile(profile_trampoline, args);

  00035	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:profile_trampoline
  00041	e8 00 00 00 00	 call	 PyEval_SetProfile
$LN1@sys_setpro:

; 461  :     Py_INCREF(Py_None);

  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0004d	e8 00 00 00 00	 call	 _Py_IncRef

; 462  :     return Py_None;

  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@sys_setpro:

; 463  : }

  00059	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005d	c3		 ret	 0
sys_setprofile ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$profile_trampoline DD imagerel profile_trampoline
	DD	imagerel profile_trampoline+142
	DD	imagerel $unwind$profile_trampoline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$profile_trampoline DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT profile_trampoline
_TEXT	SEGMENT
tstate$ = 48
result$ = 56
self$ = 80
frame$ = 88
what$ = 96
arg$ = 104
profile_trampoline PROC					; COMDAT

; 366  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 367  :     PyThreadState *tstate = frame->f_tstate;

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR frame$[rsp]
  0001d	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00024	48 89 44 24 30	 mov	 QWORD PTR tstate$[rsp], rax

; 368  :     PyObject *result;
; 369  : 
; 370  :     if (arg == NULL)

  00029	48 83 7c 24 68
	00		 cmp	 QWORD PTR arg$[rsp], 0
  0002f	75 0c		 jne	 SHORT $LN2@profile_tr

; 371  :         arg = Py_None;

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00038	48 89 44 24 68	 mov	 QWORD PTR arg$[rsp], rax
$LN2@profile_tr:

; 372  :     result = call_trampoline(tstate, self, frame, what, arg);

  0003d	48 8b 44 24 68	 mov	 rax, QWORD PTR arg$[rsp]
  00042	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00047	44 8b 4c 24 60	 mov	 r9d, DWORD PTR what$[rsp]
  0004c	4c 8b 44 24 58	 mov	 r8, QWORD PTR frame$[rsp]
  00051	48 8b 54 24 50	 mov	 rdx, QWORD PTR self$[rsp]
  00056	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tstate$[rsp]
  0005b	e8 00 00 00 00	 call	 call_trampoline
  00060	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 373  :     if (result == NULL) {

  00065	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  0006b	75 10		 jne	 SHORT $LN1@profile_tr

; 374  :         PyEval_SetProfile(NULL, NULL);

  0006d	33 d2		 xor	 edx, edx
  0006f	33 c9		 xor	 ecx, ecx
  00071	e8 00 00 00 00	 call	 PyEval_SetProfile

; 375  :         return -1;

  00076	b8 ff ff ff ff	 mov	 eax, -1
  0007b	eb 0c		 jmp	 SHORT $LN3@profile_tr
$LN1@profile_tr:

; 376  :     }
; 377  :     Py_DECREF(result);

  0007d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  00082	e8 00 00 00 00	 call	 _Py_DecRef

; 378  :     return 0;

  00087	33 c0		 xor	 eax, eax
$LN3@profile_tr:

; 379  : }

  00089	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0008d	c3		 ret	 0
profile_trampoline ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getprofile DD imagerel sys_getprofile
	DD	imagerel sys_getprofile+78
	DD	imagerel $unwind$sys_getprofile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getprofile DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_getprofile
_TEXT	SEGMENT
temp$ = 32
tstate$ = 40
self$ = 64
args$ = 72
sys_getprofile PROC					; COMDAT

; 474  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 475  :     PyThreadState *tstate = PyThreadState_GET();

  0000e	e8 00 00 00 00	 call	 PyThreadState_Get
  00013	48 89 44 24 28	 mov	 QWORD PTR tstate$[rsp], rax

; 476  :     PyObject *temp = tstate->c_profileobj;

  00018	48 8b 44 24 28	 mov	 rax, QWORD PTR tstate$[rsp]
  0001d	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00021	48 89 44 24 20	 mov	 QWORD PTR temp$[rsp], rax

; 477  : 
; 478  :     if (temp == NULL)

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR temp$[rsp], 0
  0002c	75 0c		 jne	 SHORT $LN1@sys_getpro

; 479  :         temp = Py_None;

  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00035	48 89 44 24 20	 mov	 QWORD PTR temp$[rsp], rax
$LN1@sys_getpro:

; 480  :     Py_INCREF(temp);

  0003a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR temp$[rsp]
  0003f	e8 00 00 00 00	 call	 _Py_IncRef

; 481  :     return temp;

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR temp$[rsp]

; 482  : }

  00049	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004d	c3		 ret	 0
sys_getprofile ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@MFGGPLOM@i?3setcheckinterval?$AA@	; `string'
PUBLIC	??_C@_0GI@BOFGDJIC@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@ ; `string'
EXTRN	PyErr_WarnEx:PROC
EXTRN	PyExc_DeprecationWarning:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_setcheckinterval DD imagerel sys_setcheckinterval
	DD	imagerel sys_setcheckinterval+103
	DD	imagerel $unwind$sys_setcheckinterval
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_setcheckinterval DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BD@MFGGPLOM@i?3setcheckinterval?$AA@
CONST	SEGMENT
??_C@_0BD@MFGGPLOM@i?3setcheckinterval?$AA@ DB 'i:setcheckinterval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@BOFGDJIC@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@
CONST	SEGMENT
??_C@_0GI@BOFGDJIC@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@ DB 'sys.ge'
	DB	'tcheckinterval() and sys.setcheckinterval() are deprecated.  '
	DB	'Use sys.setswitchinterval() instead.', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_setcheckinterval
_TEXT	SEGMENT
self$ = 48
args$ = 56
sys_setcheckinterval PROC				; COMDAT

; 495  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 496  :     if (PyErr_WarnEx(PyExc_DeprecationWarning,
; 497  :                      "sys.getcheckinterval() and sys.setcheckinterval() "
; 498  :                      "are deprecated.  Use sys.setswitchinterval() "
; 499  :                      "instead.", 1) < 0)

  0000e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@BOFGDJIC@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@
  0001b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_DeprecationWarning
  00022	e8 00 00 00 00	 call	 PyErr_WarnEx
  00027	85 c0		 test	 eax, eax
  00029	7d 04		 jge	 SHORT $LN2@sys_setche

; 500  :         return NULL;

  0002b	33 c0		 xor	 eax, eax
  0002d	eb 33		 jmp	 SHORT $LN3@sys_setche
$LN2@sys_setche:

; 501  :     if (!PyArg_ParseTuple(args, "i:setcheckinterval", &_check_interval))

  0002f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_check_interval
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@MFGGPLOM@i?3setcheckinterval?$AA@
  0003d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  00042	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00047	85 c0		 test	 eax, eax
  00049	75 04		 jne	 SHORT $LN1@sys_setche

; 502  :         return NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	eb 13		 jmp	 SHORT $LN3@sys_setche
$LN1@sys_setche:

; 503  :     Py_INCREF(Py_None);

  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00056	e8 00 00 00 00	 call	 _Py_IncRef

; 504  :     return Py_None;

  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@sys_setche:

; 505  : }

  00062	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00066	c3		 ret	 0
sys_setcheckinterval ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GI@MPPANGFG@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@ ; `string'
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getcheckinterval DD imagerel sys_getcheckinterval
	DD	imagerel sys_getcheckinterval+63
	DD	imagerel $unwind$sys_getcheckinterval
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getcheckinterval DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0GI@MPPANGFG@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@
CONST	SEGMENT
??_C@_0GI@MPPANGFG@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@ DB 'sys.ge'
	DB	'tcheckinterval() and sys.setcheckinterval() are deprecated.  '
	DB	'Use sys.getswitchinterval() instead.', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_getcheckinterval
_TEXT	SEGMENT
self$ = 48
args$ = 56
sys_getcheckinterval PROC				; COMDAT

; 516  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 517  :     if (PyErr_WarnEx(PyExc_DeprecationWarning,
; 518  :                      "sys.getcheckinterval() and sys.setcheckinterval() "
; 519  :                      "are deprecated.  Use sys.getswitchinterval() "
; 520  :                      "instead.", 1) < 0)

  0000e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@MPPANGFG@sys?4getcheckinterval?$CI?$CJ?5and?5sys?4s@
  0001b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_DeprecationWarning
  00022	e8 00 00 00 00	 call	 PyErr_WarnEx
  00027	85 c0		 test	 eax, eax
  00029	7d 04		 jge	 SHORT $LN1@sys_getche

; 521  :         return NULL;

  0002b	33 c0		 xor	 eax, eax
  0002d	eb 0b		 jmp	 SHORT $LN2@sys_getche
$LN1@sys_getche:

; 522  :     return PyLong_FromLong(_check_interval);

  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _check_interval
  00035	e8 00 00 00 00	 call	 PyLong_FromLong
$LN2@sys_getche:

; 523  : }

  0003a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003e	c3		 ret	 0
sys_getcheckinterval ENDP
_TEXT	ENDS
PUBLIC	__real@412e848000000000
PUBLIC	??_C@_0CK@MNGLHIP@switch?5interval?5must?5be?5strictly@ ; `string'
PUBLIC	??_C@_0BE@HDOJHFEO@d?3setswitchinterval?$AA@	; `string'
EXTRN	_PyEval_SetSwitchInterval:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_setswitchinterval DD imagerel sys_setswitchinterval
	DD	imagerel sys_setswitchinterval+129
	DD	imagerel $unwind$sys_setswitchinterval
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_setswitchinterval DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+006
CONST	ENDS
;	COMDAT ??_C@_0CK@MNGLHIP@switch?5interval?5must?5be?5strictly@
CONST	SEGMENT
??_C@_0CK@MNGLHIP@switch?5interval?5must?5be?5strictly@ DB 'switch interv'
	DB	'al must be strictly positive', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HDOJHFEO@d?3setswitchinterval?$AA@
CONST	SEGMENT
??_C@_0BE@HDOJHFEO@d?3setswitchinterval?$AA@ DB 'd:setswitchinterval', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_setswitchinterval
_TEXT	SEGMENT
d$ = 32
self$ = 64
args$ = 72
sys_setswitchinterval PROC				; COMDAT

; 532  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 533  :     double d;
; 534  :     if (!PyArg_ParseTuple(args, "d:setswitchinterval", &d))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR d$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HDOJHFEO@d?3setswitchinterval?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN2@sys_setswi

; 535  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 50		 jmp	 SHORT $LN3@sys_setswi
$LN2@sys_setswi:

; 536  :     if (d <= 0.0) {

  0002c	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00030	66 0f 2f 44 24
	20		 comisd	 xmm0, QWORD PTR d$[rsp]
  00036	72 17		 jb	 SHORT $LN1@sys_setswi

; 537  :         PyErr_SetString(PyExc_ValueError,
; 538  :                         "switch interval must be strictly positive");

  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@MNGLHIP@switch?5interval?5must?5be?5strictly@
  0003f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00046	e8 00 00 00 00	 call	 PyErr_SetString

; 539  :         return NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	eb 2d		 jmp	 SHORT $LN3@sys_setswi
$LN1@sys_setswi:

; 540  :     }
; 541  :     _PyEval_SetSwitchInterval((unsigned long) (1e6 * d));

  0004f	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@412e848000000000
  00057	f2 0f 59 44 24
	20		 mulsd	 xmm0, QWORD PTR d$[rsp]
  0005d	f2 48 0f 2c c0	 cvttsd2si rax, xmm0
  00062	8b c8		 mov	 ecx, eax
  00064	e8 00 00 00 00	 call	 _PyEval_SetSwitchInterval

; 542  :     Py_INCREF(Py_None);

  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00070	e8 00 00 00 00	 call	 _Py_IncRef

; 543  :     return Py_None;

  00075	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@sys_setswi:

; 544  : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
sys_setswitchinterval ENDP
_TEXT	ENDS
PUBLIC	__real@3eb0c6f7a0b5ed8d
EXTRN	PyFloat_FromDouble:PROC
EXTRN	_PyEval_GetSwitchInterval:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getswitchinterval DD imagerel sys_getswitchinterval
	DD	imagerel sys_getswitchinterval+56
	DD	imagerel $unwind$sys_getswitchinterval
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getswitchinterval DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-006
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_getswitchinterval
_TEXT	SEGMENT
self$ = 48
args$ = 56
sys_getswitchinterval PROC				; COMDAT

; 560  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 561  :     return PyFloat_FromDouble(1e-6 * _PyEval_GetSwitchInterval());

  0000e	e8 00 00 00 00	 call	 _PyEval_GetSwitchInterval
  00013	8b c0		 mov	 eax, eax
  00015	66 0f ef c0	 pxor	 xmm0, xmm0
  00019	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  0001e	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3eb0c6f7a0b5ed8d
  00026	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0002a	66 0f 28 c1	 movapd	 xmm0, xmm1
  0002e	e8 00 00 00 00	 call	 PyFloat_FromDouble

; 562  : }

  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00037	c3		 ret	 0
sys_getswitchinterval ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@HHNMPKGC@recursion?5limit?5must?5be?5positive@ ; `string'
PUBLIC	??_C@_0BE@NOHIDGKN@i?3setrecursionlimit?$AA@	; `string'
EXTRN	Py_SetRecursionLimit:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_setrecursionlimit DD imagerel sys_setrecursionlimit
	DD	imagerel sys_setrecursionlimit+107
	DD	imagerel $unwind$sys_setrecursionlimit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_setrecursionlimit DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CB@HHNMPKGC@recursion?5limit?5must?5be?5positive@
CONST	SEGMENT
??_C@_0CB@HHNMPKGC@recursion?5limit?5must?5be?5positive@ DB 'recursion li'
	DB	'mit must be positive', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NOHIDGKN@i?3setrecursionlimit?$AA@
CONST	SEGMENT
??_C@_0BE@NOHIDGKN@i?3setrecursionlimit?$AA@ DB 'i:setrecursionlimit', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_setrecursionlimit
_TEXT	SEGMENT
new_limit$ = 32
self$ = 64
args$ = 72
sys_setrecursionlimit PROC				; COMDAT

; 599  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 600  :     int new_limit;
; 601  :     if (!PyArg_ParseTuple(args, "i:setrecursionlimit", &new_limit))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR new_limit$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NOHIDGKN@i?3setrecursionlimit?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN2@sys_setrec

; 602  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 3a		 jmp	 SHORT $LN3@sys_setrec
$LN2@sys_setrec:

; 603  :     if (new_limit <= 0) {

  0002c	83 7c 24 20 00	 cmp	 DWORD PTR new_limit$[rsp], 0
  00031	7f 17		 jg	 SHORT $LN1@sys_setrec

; 604  :         PyErr_SetString(PyExc_ValueError,
; 605  :                         "recursion limit must be positive");

  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@HHNMPKGC@recursion?5limit?5must?5be?5positive@
  0003a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00041	e8 00 00 00 00	 call	 PyErr_SetString

; 606  :         return NULL;

  00046	33 c0		 xor	 eax, eax
  00048	eb 1c		 jmp	 SHORT $LN3@sys_setrec
$LN1@sys_setrec:

; 607  :     }
; 608  :     Py_SetRecursionLimit(new_limit);

  0004a	8b 4c 24 20	 mov	 ecx, DWORD PTR new_limit$[rsp]
  0004e	e8 00 00 00 00	 call	 Py_SetRecursionLimit

; 609  :     Py_INCREF(Py_None);

  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0005a	e8 00 00 00 00	 call	 _Py_IncRef

; 610  :     return Py_None;

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@sys_setrec:

; 611  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
sys_setrecursionlimit ENDP
_TEXT	ENDS
EXTRN	Py_GetRecursionLimit:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getrecursionlimit DD imagerel sys_getrecursionlimit
	DD	imagerel sys_getrecursionlimit+26
	DD	imagerel $unwind$sys_getrecursionlimit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getrecursionlimit DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_getrecursionlimit
_TEXT	SEGMENT
self$ = 48
sys_getrecursionlimit PROC				; COMDAT

; 675  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 676  :     return PyLong_FromLong(Py_GetRecursionLimit());

  00009	e8 00 00 00 00	 call	 Py_GetRecursionLimit
  0000e	8b c8		 mov	 ecx, eax
  00010	e8 00 00 00 00	 call	 PyLong_FromLong

; 677  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
sys_getrecursionlimit ENDP
_TEXT	ENDS
EXTRN	PyErr_Occurred:PROC
EXTRN	PyStructSequence_New:PROC
EXTRN	PyErr_SetFromWindowsErr:PROC
EXTRN	__imp_GetVersionExA:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getwindowsversion DD imagerel sys_getwindowsversion
	DD	imagerel sys_getwindowsversion+578
	DD	imagerel $unwind$sys_getwindowsversion
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getwindowsversion DD 020c01H
	DD	01b010cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_getwindowsversion
_TEXT	SEGMENT
ver$ = 32
version$ = 192
pos$ = 200
self$ = 224
sys_getwindowsversion PROC				; COMDAT

; 727  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 728  :     PyObject *version;
; 729  :     int pos = 0;

  0000c	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$[rsp], 0

; 730  :     OSVERSIONINFOEX ver;
; 731  :     ver.dwOSVersionInfoSize = sizeof(ver);

  00017	c7 44 24 20 9c
	00 00 00	 mov	 DWORD PTR ver$[rsp], 156 ; 0000009cH

; 732  :     if (!GetVersionEx((OSVERSIONINFO*) &ver))

  0001f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ver$[rsp]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetVersionExA
  0002a	85 c0		 test	 eax, eax
  0002c	75 0c		 jne	 SHORT $LN3@sys_getwin

; 733  :         return PyErr_SetFromWindowsErr(0);

  0002e	33 c9		 xor	 ecx, ecx
  00030	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00035	e9 00 02 00 00	 jmp	 $LN4@sys_getwin
$LN3@sys_getwin:

; 734  : 
; 735  :     version = PyStructSequence_New(&WindowsVersionType);

  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:WindowsVersionType
  00041	e8 00 00 00 00	 call	 PyStructSequence_New
  00046	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR version$[rsp], rax

; 736  :     if (version == NULL)

  0004e	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR version$[rsp], 0
  00057	75 07		 jne	 SHORT $LN2@sys_getwin

; 737  :         return NULL;

  00059	33 c0		 xor	 eax, eax
  0005b	e9 da 01 00 00	 jmp	 $LN4@sys_getwin
$LN2@sys_getwin:

; 738  : 
; 739  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwMajorVersion));

  00060	8b 4c 24 24	 mov	 ecx, DWORD PTR ver$[rsp+4]
  00064	e8 00 00 00 00	 call	 PyLong_FromLong
  00069	48 63 8c 24 c8
	00 00 00	 movsxd	 rcx, DWORD PTR pos$[rsp]
  00071	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR version$[rsp]
  00079	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  0007e	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR pos$[rsp]
  00085	ff c0		 inc	 eax
  00087	89 84 24 c8 00
	00 00		 mov	 DWORD PTR pos$[rsp], eax

; 740  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwMinorVersion));

  0008e	8b 4c 24 28	 mov	 ecx, DWORD PTR ver$[rsp+8]
  00092	e8 00 00 00 00	 call	 PyLong_FromLong
  00097	48 63 8c 24 c8
	00 00 00	 movsxd	 rcx, DWORD PTR pos$[rsp]
  0009f	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR version$[rsp]
  000a7	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  000ac	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR pos$[rsp]
  000b3	ff c0		 inc	 eax
  000b5	89 84 24 c8 00
	00 00		 mov	 DWORD PTR pos$[rsp], eax

; 741  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwBuildNumber));

  000bc	8b 4c 24 2c	 mov	 ecx, DWORD PTR ver$[rsp+12]
  000c0	e8 00 00 00 00	 call	 PyLong_FromLong
  000c5	48 63 8c 24 c8
	00 00 00	 movsxd	 rcx, DWORD PTR pos$[rsp]
  000cd	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR version$[rsp]
  000d5	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  000da	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR pos$[rsp]
  000e1	ff c0		 inc	 eax
  000e3	89 84 24 c8 00
	00 00		 mov	 DWORD PTR pos$[rsp], eax

; 742  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwPlatformId));

  000ea	8b 4c 24 30	 mov	 ecx, DWORD PTR ver$[rsp+16]
  000ee	e8 00 00 00 00	 call	 PyLong_FromLong
  000f3	48 63 8c 24 c8
	00 00 00	 movsxd	 rcx, DWORD PTR pos$[rsp]
  000fb	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR version$[rsp]
  00103	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  00108	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR pos$[rsp]
  0010f	ff c0		 inc	 eax
  00111	89 84 24 c8 00
	00 00		 mov	 DWORD PTR pos$[rsp], eax

; 743  :     PyStructSequence_SET_ITEM(version, pos++, PyUnicode_FromString(ver.szCSDVersion));

  00118	48 8d 4c 24 34	 lea	 rcx, QWORD PTR ver$[rsp+20]
  0011d	e8 00 00 00 00	 call	 PyUnicode_FromString
  00122	48 63 8c 24 c8
	00 00 00	 movsxd	 rcx, DWORD PTR pos$[rsp]
  0012a	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR version$[rsp]
  00132	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  00137	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR pos$[rsp]
  0013e	ff c0		 inc	 eax
  00140	89 84 24 c8 00
	00 00		 mov	 DWORD PTR pos$[rsp], eax

; 744  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wServicePackMajor));

  00147	0f b7 84 24 b4
	00 00 00	 movzx	 eax, WORD PTR ver$[rsp+148]
  0014f	8b c8		 mov	 ecx, eax
  00151	e8 00 00 00 00	 call	 PyLong_FromLong
  00156	48 63 8c 24 c8
	00 00 00	 movsxd	 rcx, DWORD PTR pos$[rsp]
  0015e	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR version$[rsp]
  00166	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  0016b	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR pos$[rsp]
  00172	ff c0		 inc	 eax
  00174	89 84 24 c8 00
	00 00		 mov	 DWORD PTR pos$[rsp], eax

; 745  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wServicePackMinor));

  0017b	0f b7 84 24 b6
	00 00 00	 movzx	 eax, WORD PTR ver$[rsp+150]
  00183	8b c8		 mov	 ecx, eax
  00185	e8 00 00 00 00	 call	 PyLong_FromLong
  0018a	48 63 8c 24 c8
	00 00 00	 movsxd	 rcx, DWORD PTR pos$[rsp]
  00192	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR version$[rsp]
  0019a	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  0019f	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR pos$[rsp]
  001a6	ff c0		 inc	 eax
  001a8	89 84 24 c8 00
	00 00		 mov	 DWORD PTR pos$[rsp], eax

; 746  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wSuiteMask));

  001af	0f b7 84 24 b8
	00 00 00	 movzx	 eax, WORD PTR ver$[rsp+152]
  001b7	8b c8		 mov	 ecx, eax
  001b9	e8 00 00 00 00	 call	 PyLong_FromLong
  001be	48 63 8c 24 c8
	00 00 00	 movsxd	 rcx, DWORD PTR pos$[rsp]
  001c6	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR version$[rsp]
  001ce	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  001d3	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR pos$[rsp]
  001da	ff c0		 inc	 eax
  001dc	89 84 24 c8 00
	00 00		 mov	 DWORD PTR pos$[rsp], eax

; 747  :     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wProductType));

  001e3	0f b6 84 24 ba
	00 00 00	 movzx	 eax, BYTE PTR ver$[rsp+154]
  001eb	8b c8		 mov	 ecx, eax
  001ed	e8 00 00 00 00	 call	 PyLong_FromLong
  001f2	48 63 8c 24 c8
	00 00 00	 movsxd	 rcx, DWORD PTR pos$[rsp]
  001fa	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR version$[rsp]
  00202	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  00207	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR pos$[rsp]
  0020e	ff c0		 inc	 eax
  00210	89 84 24 c8 00
	00 00		 mov	 DWORD PTR pos$[rsp], eax

; 748  : 
; 749  :     if (PyErr_Occurred()) {

  00217	e8 00 00 00 00	 call	 PyErr_Occurred
  0021c	48 85 c0	 test	 rax, rax
  0021f	74 11		 je	 SHORT $LN1@sys_getwin

; 750  :         Py_DECREF(version);

  00221	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR version$[rsp]
  00229	e8 00 00 00 00	 call	 _Py_DecRef

; 751  :         return NULL;

  0022e	33 c0		 xor	 eax, eax
  00230	eb 08		 jmp	 SHORT $LN4@sys_getwin
$LN1@sys_getwin:

; 752  :     }
; 753  :     return version;

  00232	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR version$[rsp]
$LN4@sys_getwin:

; 754  : }

  0023a	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00241	c3		 ret	 0
sys_getwindowsversion ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@NKBHDOD@sys_getsizeof?$AA@		; `string'
PUBLIC	??_C@_0CG@GBLMBCEI@Type?5?$CF?4100s?5doesn?8t?5define?5__siz@ ; `string'
PUBLIC	??_C@_0O@KBANFEJG@O?$HMO?3getsizeof?$AA@	; `string'
EXTRN	PyNumber_Add:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_LookupSpecial:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getsizeof DD imagerel sys_getsizeof
	DD	imagerel sys_getsizeof+631
	DD	imagerel $unwind$sys_getsizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getsizeof DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0O@NKBHDOD@sys_getsizeof?$AA@
CONST	SEGMENT
??_C@_0O@NKBHDOD@sys_getsizeof?$AA@ DB 'sys_getsizeof', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GBLMBCEI@Type?5?$CF?4100s?5doesn?8t?5define?5__siz@
CONST	SEGMENT
??_C@_0CG@GBLMBCEI@Type?5?$CF?4100s?5doesn?8t?5define?5__siz@ DB 'Type %.'
	DB	'100s doesn''t define __sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KBANFEJG@O?$HMO?3getsizeof?$AA@
CONST	SEGMENT
??_C@_0O@KBANFEJG@O?$HMO?3getsizeof?$AA@ DB 'O|O:getsizeof', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_getsizeof
_TEXT	SEGMENT
method$ = 48
res$ = 56
dflt$ = 64
o$ = 72
tmp$64284 = 80
tv165 = 88
tv153 = 92
tv151 = 96
tv163 = 100
self$ = 128
args$ = 136
kwds$ = 144
sys_getsizeof PROC					; COMDAT

; 818  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 819  :     PyObject *res = NULL;

  00013	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 820  :     static PyObject *gc_head_size = NULL;
; 821  :     static char *kwlist[] = {"object", "default", 0};
; 822  :     PyObject *o, *dflt = NULL;

  0001c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR dflt$[rsp], 0

; 823  :     PyObject *method;
; 824  :     _Py_IDENTIFIER(__sizeof__);
; 825  : 
; 826  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O:getsizeof",
; 827  :                                      kwlist, &o, &dflt))

  00025	48 8d 44 24 40	 lea	 rax, QWORD PTR dflt$[rsp]
  0002a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002f	48 8d 44 24 48	 lea	 rax, QWORD PTR o$[rsp]
  00034	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00039	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??sys_getsizeof@@9@9
  00040	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@KBANFEJG@O?$HMO?3getsizeof?$AA@
  00047	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0004f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00057	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0005c	85 c0		 test	 eax, eax
  0005e	75 07		 jne	 SHORT $LN11@sys_getsiz

; 828  :         return NULL;

  00060	33 c0		 xor	 eax, eax
  00062	e9 0b 02 00 00	 jmp	 $LN12@sys_getsiz
$LN11@sys_getsiz:

; 829  : 
; 830  :     /* Initialize static variable for GC head size */
; 831  :     if (gc_head_size == NULL) {

  00067	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?gc_head_size@?1??sys_getsizeof@@9@9, 0
  0006f	75 22		 jne	 SHORT $LN10@sys_getsiz

; 832  :         gc_head_size = PyLong_FromSsize_t(sizeof(PyGC_Head));

  00071	b9 18 00 00 00	 mov	 ecx, 24
  00076	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0007b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?gc_head_size@?1??sys_getsizeof@@9@9, rax

; 833  :         if (gc_head_size == NULL)

  00082	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?gc_head_size@?1??sys_getsizeof@@9@9, 0
  0008a	75 07		 jne	 SHORT $LN9@sys_getsiz

; 834  :             return NULL;

  0008c	33 c0		 xor	 eax, eax
  0008e	e9 df 01 00 00	 jmp	 $LN12@sys_getsiz
$LN9@sys_getsiz:
$LN10@sys_getsiz:

; 835  :     }
; 836  : 
; 837  :     /* Make sure the type is initialized. float gets initialized late */
; 838  :     if (PyType_Ready(Py_TYPE(o)) < 0)

  00093	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  00098	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0009c	e8 00 00 00 00	 call	 PyType_Ready
  000a1	85 c0		 test	 eax, eax
  000a3	7d 07		 jge	 SHORT $LN8@sys_getsiz

; 839  :         return NULL;

  000a5	33 c0		 xor	 eax, eax
  000a7	e9 c6 01 00 00	 jmp	 $LN12@sys_getsiz
$LN8@sys_getsiz:

; 840  : 
; 841  :     method = _PyObject_LookupSpecial(o, &PyId___sizeof__);

  000ac	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___sizeof__@?1??sys_getsizeof@@9@9
  000b1	8b c0		 mov	 eax, eax
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000b9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000c2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000c6	48 8b d0	 mov	 rdx, rax
  000c9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$[rsp]
  000ce	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  000d3	48 89 44 24 30	 mov	 QWORD PTR method$[rsp], rax

; 842  :     if (method == NULL) {

  000d8	48 83 7c 24 30
	00		 cmp	 QWORD PTR method$[rsp], 0
  000de	75 2c		 jne	 SHORT $LN7@sys_getsiz

; 843  :         if (!PyErr_Occurred())

  000e0	e8 00 00 00 00	 call	 PyErr_Occurred
  000e5	48 85 c0	 test	 rax, rax
  000e8	75 20		 jne	 SHORT $LN6@sys_getsiz

; 844  :             PyErr_Format(PyExc_TypeError,
; 845  :                          "Type %.100s doesn't define __sizeof__",
; 846  :                          Py_TYPE(o)->tp_name);

  000ea	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  000ef	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f3	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@GBLMBCEI@Type?5?$CF?4100s?5doesn?8t?5define?5__siz@
  000fe	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00105	e8 00 00 00 00	 call	 PyErr_Format
$LN6@sys_getsiz:

; 847  :     }
; 848  :     else {

  0010a	eb 1b		 jmp	 SHORT $LN5@sys_getsiz
$LN7@sys_getsiz:

; 849  :         res = PyObject_CallFunctionObjArgs(method, NULL);

  0010c	33 d2		 xor	 edx, edx
  0010e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR method$[rsp]
  00113	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00118	48 89 44 24 38	 mov	 QWORD PTR res$[rsp], rax

; 850  :         Py_DECREF(method);

  0011d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR method$[rsp]
  00122	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@sys_getsiz:

; 851  :     }
; 852  : 
; 853  :     /* Has a default value been given */
; 854  :     if ((res == NULL) && (dflt != NULL) &&
; 855  :         PyErr_ExceptionMatches(PyExc_TypeError))

  00127	48 83 7c 24 38
	00		 cmp	 QWORD PTR res$[rsp], 0
  0012d	75 33		 jne	 SHORT $LN4@sys_getsiz
  0012f	48 83 7c 24 40
	00		 cmp	 QWORD PTR dflt$[rsp], 0
  00135	74 2b		 je	 SHORT $LN4@sys_getsiz
  00137	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0013e	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00143	85 c0		 test	 eax, eax
  00145	74 1b		 je	 SHORT $LN4@sys_getsiz

; 856  :     {
; 857  :         PyErr_Clear();

  00147	e8 00 00 00 00	 call	 PyErr_Clear

; 858  :         Py_INCREF(dflt);

  0014c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dflt$[rsp]
  00151	e8 00 00 00 00	 call	 _Py_IncRef

; 859  :         return dflt;

  00156	48 8b 44 24 40	 mov	 rax, QWORD PTR dflt$[rsp]
  0015b	e9 12 01 00 00	 jmp	 $LN12@sys_getsiz
  00160	eb 12		 jmp	 SHORT $LN3@sys_getsiz
$LN4@sys_getsiz:

; 860  :     }
; 861  :     else if (res == NULL)

  00162	48 83 7c 24 38
	00		 cmp	 QWORD PTR res$[rsp], 0
  00168	75 0a		 jne	 SHORT $LN2@sys_getsiz

; 862  :         return res;

  0016a	48 8b 44 24 38	 mov	 rax, QWORD PTR res$[rsp]
  0016f	e9 fe 00 00 00	 jmp	 $LN12@sys_getsiz
$LN2@sys_getsiz:
$LN3@sys_getsiz:

; 863  : 
; 864  :     /* add gc_head size */
; 865  :     if (PyObject_IS_GC(o)) {

  00174	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0017c	4c 8b 4c 24 48	 mov	 r9, QWORD PTR o$[rsp]
  00181	41 b8 61 03 00
	00		 mov	 r8d, 865		; 00000361H
  00187	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NKBHDOD@sys_getsizeof?$AA@
  00195	e8 00 00 00 00	 call	 _PyParallel_Guard
  0019a	85 c0		 test	 eax, eax
  0019c	74 0d		 je	 SHORT $LN21@sys_getsiz
  0019e	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv165[rsp], 0
  001a6	e9 91 00 00 00	 jmp	 $LN22@sys_getsiz
$LN21@sys_getsiz:
  001ab	e8 00 00 00 00	 call	 _Py_PXCTX
  001b0	85 c0		 test	 eax, eax
  001b2	74 0a		 je	 SHORT $LN16@sys_getsiz
  001b4	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
  001bc	eb 32		 jmp	 SHORT $LN17@sys_getsiz
$LN16@sys_getsiz:
  001be	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  001c3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001c7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001cd	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  001d2	85 c0		 test	 eax, eax
  001d4	74 0a		 je	 SHORT $LN14@sys_getsiz
  001d6	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv151[rsp], 1
  001de	eb 08		 jmp	 SHORT $LN15@sys_getsiz
$LN14@sys_getsiz:
  001e0	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv151[rsp], 0
$LN15@sys_getsiz:
  001e8	8b 44 24 60	 mov	 eax, DWORD PTR tv151[rsp]
  001ec	89 44 24 5c	 mov	 DWORD PTR tv153[rsp], eax
$LN17@sys_getsiz:
  001f0	83 7c 24 5c 00	 cmp	 DWORD PTR tv153[rsp], 0
  001f5	74 35		 je	 SHORT $LN19@sys_getsiz
  001f7	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  001fc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00200	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  00208	74 18		 je	 SHORT $LN18@sys_getsiz
  0020a	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  0020f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00213	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$[rsp]
  00218	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  0021e	85 c0		 test	 eax, eax
  00220	74 0a		 je	 SHORT $LN19@sys_getsiz
$LN18@sys_getsiz:
  00222	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv163[rsp], 1
  0022a	eb 08		 jmp	 SHORT $LN20@sys_getsiz
$LN19@sys_getsiz:
  0022c	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv163[rsp], 0
$LN20@sys_getsiz:
  00234	8b 44 24 64	 mov	 eax, DWORD PTR tv163[rsp]
  00238	89 44 24 58	 mov	 DWORD PTR tv165[rsp], eax
$LN22@sys_getsiz:
  0023c	83 7c 24 58 00	 cmp	 DWORD PTR tv165[rsp], 0
  00241	74 2a		 je	 SHORT $LN1@sys_getsiz

; 866  :         PyObject *tmp = res;

  00243	48 8b 44 24 38	 mov	 rax, QWORD PTR res$[rsp]
  00248	48 89 44 24 50	 mov	 QWORD PTR tmp$64284[rsp], rax

; 867  :         res = PyNumber_Add(tmp, gc_head_size);

  0024d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?gc_head_size@?1??sys_getsizeof@@9@9
  00254	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tmp$64284[rsp]
  00259	e8 00 00 00 00	 call	 PyNumber_Add
  0025e	48 89 44 24 38	 mov	 QWORD PTR res$[rsp], rax

; 868  :         Py_DECREF(tmp);

  00263	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tmp$64284[rsp]
  00268	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@sys_getsiz:

; 869  :     }
; 870  :     return res;

  0026d	48 8b 44 24 38	 mov	 rax, QWORD PTR res$[rsp]
$LN12@sys_getsiz:

; 871  : }

  00272	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00276	c3		 ret	 0
sys_getsizeof ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getrefcount DD imagerel sys_getrefcount
	DD	imagerel sys_getrefcount+33
	DD	imagerel $unwind$sys_getrefcount
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getrefcount DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_getrefcount
_TEXT	SEGMENT
self$ = 48
arg$ = 56
sys_getrefcount PROC					; COMDAT

; 880  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 881  :     return PyLong_FromSsize_t(arg->ob_refcnt);

  0000e	48 8b 44 24 38	 mov	 rax, QWORD PTR arg$[rsp]
  00013	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00017	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 882  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
sys_getrefcount ENDP
_TEXT	ENDS
EXTRN	_Py_GetRefTotal:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_gettotalrefcount DD imagerel sys_gettotalrefcount
	DD	imagerel sys_gettotalrefcount+27
	DD	imagerel $unwind$sys_gettotalrefcount
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_gettotalrefcount DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_gettotalrefcount
_TEXT	SEGMENT
self$ = 48
sys_gettotalrefcount PROC				; COMDAT

; 887  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 888  :     return PyLong_FromSsize_t(_Py_GetRefTotal());

  00009	e8 00 00 00 00	 call	 _Py_GetRefTotal
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 889  : }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
sys_gettotalrefcount ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@EGKBMAC@call?5stack?5is?5not?5deep?5enough?$AA@ ; `string'
PUBLIC	??_C@_0N@NJGKFKFD@?$HMi?3_getframe?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_getframe DD imagerel sys_getframe
	DD	imagerel sys_getframe+158
	DD	imagerel $unwind$sys_getframe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_getframe DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BO@EGKBMAC@call?5stack?5is?5not?5deep?5enough?$AA@
CONST	SEGMENT
??_C@_0BO@EGKBMAC@call?5stack?5is?5not?5deep?5enough?$AA@ DB 'call stack '
	DB	'is not deep enough', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NJGKFKFD@?$HMi?3_getframe?$AA@
CONST	SEGMENT
??_C@_0N@NJGKFKFD@?$HMi?3_getframe?$AA@ DB '|i:_getframe', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_getframe
_TEXT	SEGMENT
f$ = 32
depth$ = 40
self$ = 64
args$ = 72
sys_getframe PROC					; COMDAT

; 924  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 925  :     PyFrameObject *f = PyThreadState_GET()->frame;

  0000e	e8 00 00 00 00	 call	 PyThreadState_Get
  00013	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00017	48 89 44 24 20	 mov	 QWORD PTR f$[rsp], rax

; 926  :     int depth = -1;

  0001c	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR depth$[rsp], -1

; 927  : 
; 928  :     if (!PyArg_ParseTuple(args, "|i:_getframe", &depth))

  00024	4c 8d 44 24 28	 lea	 r8, QWORD PTR depth$[rsp]
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@NJGKFKFD@?$HMi?3_getframe?$AA@
  00030	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00035	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0003a	85 c0		 test	 eax, eax
  0003c	75 04		 jne	 SHORT $LN4@sys_getfra

; 929  :         return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 57		 jmp	 SHORT $LN5@sys_getfra
$LN4@sys_getfra:
$LN3@sys_getfra:

; 930  : 
; 931  :     while (depth > 0 && f != NULL) {

  00042	83 7c 24 28 00	 cmp	 DWORD PTR depth$[rsp], 0
  00047	7e 22		 jle	 SHORT $LN2@sys_getfra
  00049	48 83 7c 24 20
	00		 cmp	 QWORD PTR f$[rsp], 0
  0004f	74 1a		 je	 SHORT $LN2@sys_getfra

; 932  :         f = f->f_back;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR f$[rsp]
  00056	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0005a	48 89 44 24 20	 mov	 QWORD PTR f$[rsp], rax

; 933  :         --depth;

  0005f	8b 44 24 28	 mov	 eax, DWORD PTR depth$[rsp]
  00063	ff c8		 dec	 eax
  00065	89 44 24 28	 mov	 DWORD PTR depth$[rsp], eax

; 934  :     }

  00069	eb d7		 jmp	 SHORT $LN3@sys_getfra
$LN2@sys_getfra:

; 935  :     if (f == NULL) {

  0006b	48 83 7c 24 20
	00		 cmp	 QWORD PTR f$[rsp], 0
  00071	75 17		 jne	 SHORT $LN1@sys_getfra

; 936  :         PyErr_SetString(PyExc_ValueError,
; 937  :                         "call stack is not deep enough");

  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@EGKBMAC@call?5stack?5is?5not?5deep?5enough?$AA@
  0007a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00081	e8 00 00 00 00	 call	 PyErr_SetString

; 938  :         return NULL;

  00086	33 c0		 xor	 eax, eax
  00088	eb 0f		 jmp	 SHORT $LN5@sys_getfra
$LN1@sys_getfra:

; 939  :     }
; 940  :     Py_INCREF(f);

  0008a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR f$[rsp]
  0008f	e8 00 00 00 00	 call	 _Py_IncRef

; 941  :     return (PyObject*)f;

  00094	48 8b 44 24 20	 mov	 rax, QWORD PTR f$[rsp]
$LN5@sys_getfra:

; 942  : }

  00099	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009d	c3		 ret	 0
sys_getframe ENDP
_TEXT	ENDS
EXTRN	_PyThread_CurrentFrames:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_current_frames DD imagerel sys_current_frames
	DD	imagerel sys_current_frames+24
	DD	imagerel $unwind$sys_current_frames
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_current_frames DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_current_frames
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
sys_current_frames PROC					; COMDAT

; 955  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 956  :     return _PyThread_CurrentFrames();

  0000e	e8 00 00 00 00	 call	 _PyThread_CurrentFrames

; 957  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
sys_current_frames ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@BJKDGGGC@OO?$CB?3call_tracing?$AA@	; `string'
EXTRN	_PyEval_CallTracing:PROC
EXTRN	PyTuple_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_call_tracing DD imagerel sys_call_tracing
	DD	imagerel sys_call_tracing+81
	DD	imagerel $unwind$sys_call_tracing
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_call_tracing DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BB@BJKDGGGC@OO?$CB?3call_tracing?$AA@
CONST	SEGMENT
??_C@_0BB@BJKDGGGC@OO?$CB?3call_tracing?$AA@ DB 'OO!:call_tracing', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_call_tracing
_TEXT	SEGMENT
funcargs$ = 48
func$ = 56
self$ = 80
args$ = 88
sys_call_tracing PROC					; COMDAT

; 969  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 970  :     PyObject *func, *funcargs;
; 971  :     if (!PyArg_ParseTuple(args, "OO!:call_tracing", &func, &PyTuple_Type, &funcargs))

  0000e	48 8d 44 24 30	 lea	 rax, QWORD PTR funcargs$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:PyTuple_Type
  0001f	4c 8d 44 24 38	 lea	 r8, QWORD PTR func$[rsp]
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@BJKDGGGC@OO?$CB?3call_tracing?$AA@
  0002b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00030	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00035	85 c0		 test	 eax, eax
  00037	75 04		 jne	 SHORT $LN1@sys_call_t

; 972  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	eb 0f		 jmp	 SHORT $LN2@sys_call_t
$LN1@sys_call_t:

; 973  :     return _PyEval_CallTracing(func, funcargs);

  0003d	48 8b 54 24 30	 mov	 rdx, QWORD PTR funcargs$[rsp]
  00042	48 8b 4c 24 38	 mov	 rcx, QWORD PTR func$[rsp]
  00047	e8 00 00 00 00	 call	 _PyEval_CallTracing
$LN2@sys_call_t:

; 974  : }

  0004c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00050	c3		 ret	 0
sys_call_tracing ENDP
_TEXT	ENDS
EXTRN	_PyObject_DebugTypeStats:PROC
EXTRN	__imp_fputc:PROC
EXTRN	_PyObject_DebugMallocStats:PROC
EXTRN	__imp___iob_func:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_debugmallocstats DD imagerel sys_debugmallocstats
	DD	imagerel sys_debugmallocstats+98
	DD	imagerel $unwind$sys_debugmallocstats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_debugmallocstats DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_debugmallocstats
_TEXT	SEGMENT
self$ = 48
args$ = 56
sys_debugmallocstats PROC				; COMDAT

; 1005 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1006 : #ifdef WITH_PYMALLOC
; 1007 :     _PyObject_DebugMallocStats(stderr);

  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00014	48 83 c0 60	 add	 rax, 96			; 00000060H
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 _PyObject_DebugMallocStats

; 1008 :     fputc('\n', stderr);

  00020	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00026	48 83 c0 60	 add	 rax, 96			; 00000060H
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	b9 0a 00 00 00	 mov	 ecx, 10
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputc

; 1009 : #endif
; 1010 :     _PyObject_DebugTypeStats(stderr);

  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0003e	48 83 c0 60	 add	 rax, 96			; 00000060H
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 _PyObject_DebugTypeStats

; 1011 : 
; 1012 :     Py_RETURN_NONE;

  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00051	e8 00 00 00 00	 call	 _Py_IncRef
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1013 : }

  0005d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00061	c3		 ret	 0
sys_debugmallocstats ENDP
_TEXT	ENDS
EXTRN	PyType_ClearCache:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_clear_type_cache DD imagerel sys_clear_type_cache
	DD	imagerel sys_clear_type_cache+43
	DD	imagerel $unwind$sys_clear_type_cache
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_clear_type_cache DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_clear_type_cache
_TEXT	SEGMENT
self$ = 48
args$ = 56
sys_clear_type_cache PROC				; COMDAT

; 1040 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1041 :     PyType_ClearCache();

  0000e	e8 00 00 00 00	 call	 PyType_ClearCache

; 1042 :     Py_RETURN_NONE;

  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001a	e8 00 00 00 00	 call	 _Py_IncRef
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1043 : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
sys_clear_type_cache ENDP
_TEXT	ENDS
PUBLIC	PySys_ResetWarnOptions
EXTRN	PyList_SetSlice:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_ResetWarnOptions DD imagerel $LN5
	DD	imagerel $LN5+75
	DD	imagerel $unwind$PySys_ResetWarnOptions
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_ResetWarnOptions DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_ResetWarnOptions
_TEXT	SEGMENT
PySys_ResetWarnOptions PROC				; COMDAT

; 1156 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1157 :     if (warnoptions == NULL || !PyList_Check(warnoptions))

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR warnoptions, 0
  0000c	74 1a		 je	 SHORT $LN1@PySys_Rese
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR warnoptions
  00015	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00019	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001f	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00024	85 c0		 test	 eax, eax
  00026	75 02		 jne	 SHORT $LN2@PySys_Rese
$LN1@PySys_Rese:

; 1158 :         return;

  00028	eb 1c		 jmp	 SHORT $LN3@PySys_Rese
$LN2@PySys_Rese:

; 1159 :     PyList_SetSlice(warnoptions, 0, PyList_GET_SIZE(warnoptions), NULL);

  0002a	45 33 c9	 xor	 r9d, r9d
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR warnoptions
  00034	4c 8b 40 60	 mov	 r8, QWORD PTR [rax+96]
  00038	33 d2		 xor	 edx, edx
  0003a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR warnoptions
  00041	e8 00 00 00 00	 call	 PyList_SetSlice
$LN3@PySys_Rese:

; 1160 : }

  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	c3		 ret	 0
PySys_ResetWarnOptions ENDP
_TEXT	ENDS
PUBLIC	PySys_AddWarnOptionUnicode
EXTRN	PyList_Append:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_AddWarnOptionUnicode DD imagerel $LN10
	DD	imagerel $LN10+121
	DD	imagerel $unwind$PySys_AddWarnOptionUnicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_AddWarnOptionUnicode DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_AddWarnOptionUnicode
_TEXT	SEGMENT
unicode$ = 48
PySys_AddWarnOptionUnicode PROC				; COMDAT

; 1164 : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1165 :     if (warnoptions == NULL || !PyList_Check(warnoptions)) {

  00009	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR warnoptions, 0
  00011	74 1a		 je	 SHORT $LN6@PySys_AddW
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR warnoptions
  0001a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00024	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00029	85 c0		 test	 eax, eax
  0002b	75 36		 jne	 SHORT $LN7@PySys_AddW
$LN6@PySys_AddW:
$LN5@PySys_AddW:

; 1166 :         Py_XDECREF(warnoptions);

  0002d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR warnoptions, 0
  00035	74 0c		 je	 SHORT $LN2@PySys_AddW
  00037	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR warnoptions
  0003e	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PySys_AddW:
  00043	33 c0		 xor	 eax, eax
  00045	85 c0		 test	 eax, eax
  00047	75 e4		 jne	 SHORT $LN5@PySys_AddW

; 1167 :         warnoptions = PyList_New(0);

  00049	33 c9		 xor	 ecx, ecx
  0004b	e8 00 00 00 00	 call	 PyList_New
  00050	48 89 05 00 00
	00 00		 mov	 QWORD PTR warnoptions, rax

; 1168 :         if (warnoptions == NULL)

  00057	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR warnoptions, 0
  0005f	75 02		 jne	 SHORT $LN1@PySys_AddW

; 1169 :             return;

  00061	eb 11		 jmp	 SHORT $LN8@PySys_AddW
$LN1@PySys_AddW:
$LN7@PySys_AddW:

; 1170 :     }
; 1171 :     PyList_Append(warnoptions, unicode);

  00063	48 8b 54 24 30	 mov	 rdx, QWORD PTR unicode$[rsp]
  00068	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR warnoptions
  0006f	e8 00 00 00 00	 call	 PyList_Append
$LN8@PySys_AddW:

; 1172 : }

  00074	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00078	c3		 ret	 0
PySys_AddWarnOptionUnicode ENDP
_TEXT	ENDS
PUBLIC	PySys_AddWarnOption
EXTRN	PyUnicode_FromWideChar:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_AddWarnOption DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$PySys_AddWarnOption
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_AddWarnOption DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_AddWarnOption
_TEXT	SEGMENT
unicode$ = 32
s$ = 64
PySys_AddWarnOption PROC				; COMDAT

; 1176 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1177 :     PyObject *unicode;
; 1178 :     unicode = PyUnicode_FromWideChar(s, -1);

  00009	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00015	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  0001a	48 89 44 24 20	 mov	 QWORD PTR unicode$[rsp], rax

; 1179 :     if (unicode == NULL)

  0001f	48 83 7c 24 20
	00		 cmp	 QWORD PTR unicode$[rsp], 0
  00025	75 02		 jne	 SHORT $LN1@PySys_AddW@2

; 1180 :         return;

  00027	eb 14		 jmp	 SHORT $LN2@PySys_AddW@2
$LN1@PySys_AddW@2:

; 1181 :     PySys_AddWarnOptionUnicode(unicode);

  00029	48 8b 4c 24 20	 mov	 rcx, QWORD PTR unicode$[rsp]
  0002e	e8 00 00 00 00	 call	 PySys_AddWarnOptionUnicode

; 1182 :     Py_DECREF(unicode);

  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR unicode$[rsp]
  00038	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PySys_AddW@2:

; 1183 : }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
PySys_AddWarnOption ENDP
_TEXT	ENDS
PUBLIC	PySys_HasWarnOptions
EXTRN	PyList_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_HasWarnOptions DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$PySys_HasWarnOptions
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_HasWarnOptions DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_HasWarnOptions
_TEXT	SEGMENT
tv68 = 32
PySys_HasWarnOptions PROC				; COMDAT

; 1187 : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1188 :     return (warnoptions != NULL && (PyList_Size(warnoptions) > 0)) ? 1 : 0;

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR warnoptions, 0
  0000c	74 1b		 je	 SHORT $LN3@PySys_HasW
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR warnoptions
  00015	e8 00 00 00 00	 call	 PyList_Size
  0001a	48 85 c0	 test	 rax, rax
  0001d	7e 0a		 jle	 SHORT $LN3@PySys_HasW
  0001f	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00027	eb 08		 jmp	 SHORT $LN4@PySys_HasW
$LN3@PySys_HasW:
  00029	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN4@PySys_HasW:
  00031	8b 44 24 20	 mov	 eax, DWORD PTR tv68[rsp]

; 1189 : }

  00035	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00039	c3		 ret	 0
PySys_HasWarnOptions ENDP
_TEXT	ENDS
PUBLIC	PySys_AddXOption
EXTRN	_PyThreadState_Current:QWORD
EXTRN	PyDict_SetItem:PROC
EXTRN	_Py_TrueStruct:BYTE
EXTRN	__imp_wcschr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_AddXOption DD imagerel $LN17
	DD	imagerel $LN17+318
	DD	imagerel $unwind$PySys_AddXOption
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_AddXOption DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_AddXOption
_TEXT	SEGMENT
value$ = 32
name$ = 40
name_end$ = 48
opts$ = 56
s$ = 80
PySys_AddXOption PROC					; COMDAT

; 1205 : {

$LN17:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1206 :     PyObject *opts;
; 1207 :     PyObject *name = NULL, *value = NULL;

  00009	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR name$[rsp], 0
  00012	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 1208 :     const wchar_t *name_end;
; 1209 : 
; 1210 :     opts = get_xoptions();

  0001b	e8 00 00 00 00	 call	 get_xoptions
  00020	48 89 44 24 38	 mov	 QWORD PTR opts$[rsp], rax

; 1211 :     if (opts == NULL)

  00025	48 83 7c 24 38
	00		 cmp	 QWORD PTR opts$[rsp], 0
  0002b	75 05		 jne	 SHORT $LN14@PySys_AddX

; 1212 :         goto error;

  0002d	e9 c8 00 00 00	 jmp	 $error$64477
$LN14@PySys_AddX:

; 1213 : 
; 1214 :     name_end = wcschr(s, L'=');

  00032	66 ba 3d 00	 mov	 dx, 61			; 0000003dH
  00036	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcschr
  00041	48 89 44 24 30	 mov	 QWORD PTR name_end$[rsp], rax

; 1215 :     if (!name_end) {

  00046	48 83 7c 24 30
	00		 cmp	 QWORD PTR name_end$[rsp], 0
  0004c	75 2e		 jne	 SHORT $LN13@PySys_AddX

; 1216 :         name = PyUnicode_FromWideChar(s, -1);

  0004e	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0005a	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  0005f	48 89 44 24 28	 mov	 QWORD PTR name$[rsp], rax

; 1217 :         value = Py_True;

  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0006b	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 1218 :         Py_INCREF(value);

  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00075	e8 00 00 00 00	 call	 _Py_IncRef

; 1219 :     }
; 1220 :     else {

  0007a	eb 42		 jmp	 SHORT $LN12@PySys_AddX
$LN13@PySys_AddX:

; 1221 :         name = PyUnicode_FromWideChar(s, name_end - s);

  0007c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00081	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name_end$[rsp]
  00086	48 2b c8	 sub	 rcx, rax
  00089	48 8b c1	 mov	 rax, rcx
  0008c	48 d1 f8	 sar	 rax, 1
  0008f	48 8b d0	 mov	 rdx, rax
  00092	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00097	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  0009c	48 89 44 24 28	 mov	 QWORD PTR name$[rsp], rax

; 1222 :         value = PyUnicode_FromWideChar(name_end + 1, -1);

  000a1	48 8b 44 24 30	 mov	 rax, QWORD PTR name_end$[rsp]
  000a6	48 83 c0 02	 add	 rax, 2
  000aa	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  000b1	48 8b c8	 mov	 rcx, rax
  000b4	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  000b9	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax
$LN12@PySys_AddX:

; 1223 :     }
; 1224 :     if (name == NULL || value == NULL)

  000be	48 83 7c 24 28
	00		 cmp	 QWORD PTR name$[rsp], 0
  000c4	74 08		 je	 SHORT $LN10@PySys_AddX
  000c6	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000cc	75 02		 jne	 SHORT $LN11@PySys_AddX
$LN10@PySys_AddX:

; 1225 :         goto error;

  000ce	eb 2a		 jmp	 SHORT $error$64477
$LN11@PySys_AddX:

; 1226 :     PyDict_SetItem(opts, name, value);

  000d0	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000d5	48 8b 54 24 28	 mov	 rdx, QWORD PTR name$[rsp]
  000da	48 8b 4c 24 38	 mov	 rcx, QWORD PTR opts$[rsp]
  000df	e8 00 00 00 00	 call	 PyDict_SetItem

; 1227 :     Py_DECREF(name);

  000e4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR name$[rsp]
  000e9	e8 00 00 00 00	 call	 _Py_DecRef

; 1228 :     Py_DECREF(value);

  000ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000f3	e8 00 00 00 00	 call	 _Py_DecRef

; 1229 :     return;

  000f8	eb 3f		 jmp	 SHORT $LN15@PySys_AddX
$error$64477:
$LN9@PySys_AddX:

; 1230 : 
; 1231 : error:
; 1232 :     Py_XDECREF(name);

  000fa	48 83 7c 24 28
	00		 cmp	 QWORD PTR name$[rsp], 0
  00100	74 0a		 je	 SHORT $LN6@PySys_AddX
  00102	48 8b 4c 24 28	 mov	 rcx, QWORD PTR name$[rsp]
  00107	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PySys_AddX:
  0010c	33 c0		 xor	 eax, eax
  0010e	85 c0		 test	 eax, eax
  00110	75 e8		 jne	 SHORT $LN9@PySys_AddX
$LN5@PySys_AddX:

; 1233 :     Py_XDECREF(value);

  00112	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00118	74 0a		 je	 SHORT $LN2@PySys_AddX
  0011a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0011f	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PySys_AddX:
  00124	33 c0		 xor	 eax, eax
  00126	85 c0		 test	 eax, eax
  00128	75 e8		 jne	 SHORT $LN5@PySys_AddX

; 1234 :     /* No return value, therefore clear error state if possible */
; 1235 :     if (_Py_atomic_load_relaxed(&_PyThreadState_Current))

  0012a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyThreadState_Current, 0
  00132	74 05		 je	 SHORT $LN1@PySys_AddX

; 1236 :         PyErr_Clear();

  00134	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@PySys_AddX:
$LN15@PySys_AddX:

; 1237 : }

  00139	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013d	c3		 ret	 0
PySys_AddXOption ENDP
_TEXT	ENDS
EXTRN	PyDict_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_xoptions DD imagerel get_xoptions
	DD	imagerel get_xoptions+92
	DD	imagerel $unwind$get_xoptions
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_xoptions DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT get_xoptions
_TEXT	SEGMENT
get_xoptions PROC					; COMDAT

; 1195 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1196 :     if (xoptions == NULL || !PyDict_Check(xoptions)) {

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR xoptions, 0
  0000c	74 1a		 je	 SHORT $LN5@get_xoptio
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR xoptions
  00015	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00019	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001f	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00024	85 c0		 test	 eax, eax
  00026	75 28		 jne	 SHORT $LN6@get_xoptio
$LN5@get_xoptio:
$LN4@get_xoptio:

; 1197 :         Py_XDECREF(xoptions);

  00028	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR xoptions, 0
  00030	74 0c		 je	 SHORT $LN1@get_xoptio
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR xoptions
  00039	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@get_xoptio:
  0003e	33 c0		 xor	 eax, eax
  00040	85 c0		 test	 eax, eax
  00042	75 e4		 jne	 SHORT $LN4@get_xoptio

; 1198 :         xoptions = PyDict_New();

  00044	e8 00 00 00 00	 call	 PyDict_New
  00049	48 89 05 00 00
	00 00		 mov	 QWORD PTR xoptions, rax
$LN6@get_xoptio:

; 1199 :     }
; 1200 :     return xoptions;

  00050	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR xoptions

; 1201 : }

  00057	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005b	c3		 ret	 0
get_xoptions ENDP
_TEXT	ENDS
PUBLIC	PySys_GetXOptions
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_GetXOptions DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$PySys_GetXOptions
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_GetXOptions DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_GetXOptions
_TEXT	SEGMENT
PySys_GetXOptions PROC					; COMDAT

; 1241 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1242 :     return get_xoptions();

  00004	e8 00 00 00 00	 call	 get_xoptions

; 1243 : }

  00009	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000d	c3		 ret	 0
PySys_GetXOptions ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@NCLNECCP@thread_info?$AA@		; `string'
PUBLIC	??_C@_0BB@NLDLBIPF@float_repr_style?$AA@	; `string'
PUBLIC	??_C@_05BFKKPKCG@short?$AA@			; `string'
PUBLIC	??_C@_05GECEPKB@flags?$AA@			; `string'
PUBLIC	??_C@_0P@EPOCNDEG@implementation?$AA@		; `string'
PUBLIC	??_C@_0N@NPOFIJBB@version_info?$AA@		; `string'
PUBLIC	??_C@_09NLDNDIBM@_xoptions?$AA@			; `string'
PUBLIC	??_C@_0M@OHJDAEBN@warnoptions?$AA@		; `string'
PUBLIC	??_C@_06FPOELEGF@winver?$AA@			; `string'
PUBLIC	??_C@_09EJJKCOGE@dllhandle?$AA@			; `string'
PUBLIC	??_C@_09PJBCLGKJ@byteorder?$AA@			; `string'
PUBLIC	??_C@_06LADGIEOA@little?$AA@			; `string'
PUBLIC	??_C@_03CCCOBCKE@big?$AA@			; `string'
PUBLIC	??_C@_0BF@LPKMLNFN@builtin_module_names?$AA@	; `string'
PUBLIC	??_C@_0L@IACHHLKH@maxunicode?$AA@		; `string'
PUBLIC	??_C@_09BDOHDNMP@hash_info?$AA@			; `string'
PUBLIC	??_C@_08CIEMHFML@int_info?$AA@			; `string'
PUBLIC	??_C@_0L@HMECADCK@float_info?$AA@		; `string'
PUBLIC	??_C@_07KCDDANPD@maxsize?$AA@			; `string'
PUBLIC	??_C@_0BB@FIIOHCIL@base_exec_prefix?$AA@	; `string'
PUBLIC	??_C@_0M@BDGILGLH@base_prefix?$AA@		; `string'
PUBLIC	??_C@_0M@OLOBCNFD@exec_prefix?$AA@		; `string'
PUBLIC	??_C@_06CHGOAPND@prefix?$AA@			; `string'
PUBLIC	??_C@_0L@FKCMKODO@executable?$AA@		; `string'
PUBLIC	??_C@_09JHBDCMB@copyright?$AA@			; `string'
PUBLIC	??_C@_0M@PMBEFFCE@api_version?$AA@		; `string'
PUBLIC	??_C@_0L@HHGPOKH@_mercurial?$AA@		; `string'
PUBLIC	??_C@_05CBCHBIN@?$CIszz?$CJ?$AA@		; `string'
PUBLIC	??_C@_07HIACADPB@CPython?$AA@			; `string'
PUBLIC	??_C@_0L@LHCICIKK@hexversion?$AA@		; `string'
PUBLIC	??_C@_07CPCPJPKL@version?$AA@			; `string'
PUBLIC	??_C@_0P@HIAEFOKM@__excepthook__?$AA@		; `string'
PUBLIC	??_C@_0BA@OBKGBBAP@__displayhook__?$AA@		; `string'
PUBLIC	_PySys_Init
EXTRN	PyThread_GetInfo:PROC
EXTRN	PyWin_DLLVersionString:QWORD
EXTRN	PyLong_FromVoidPtr:PROC
EXTRN	PyWin_DLLhModule:QWORD
EXTRN	PyStructSequence_InitType:PROC
EXTRN	PyLong_GetInfo:PROC
EXTRN	PyFloat_GetInfo:PROC
EXTRN	Py_GetExecPrefix:PROC
EXTRN	Py_GetPrefix:PROC
EXTRN	Py_GetProgramFullPath:PROC
EXTRN	Py_GetPlatform:PROC
EXTRN	Py_GetCopyright:PROC
EXTRN	PyBool_FromLong:PROC
EXTRN	Py_DontWriteBytecodeFlag:DWORD
EXTRN	_Py_hgidentifier:PROC
EXTRN	_Py_hgversion:PROC
EXTRN	Py_GetVersion:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
_BSS	SEGMENT
FlagsType DB	01e0H DUP (?)
VersionInfoType DB 01e0H DUP (?)
Hash_InfoType DB 01e0H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PySys_Init DD imagerel $LN145
	DD	imagerel $LN145+2379
	DD	imagerel $unwind$_PySys_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PySys_Init DD 010401H
	DD	0c204H
xdata	ENDS
;	COMDAT ??_C@_0M@NCLNECCP@thread_info?$AA@
CONST	SEGMENT
??_C@_0M@NCLNECCP@thread_info?$AA@ DB 'thread_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NLDLBIPF@float_repr_style?$AA@
CONST	SEGMENT
??_C@_0BB@NLDLBIPF@float_repr_style?$AA@ DB 'float_repr_style', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFKKPKCG@short?$AA@
CONST	SEGMENT
??_C@_05BFKKPKCG@short?$AA@ DB 'short', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GECEPKB@flags?$AA@
CONST	SEGMENT
??_C@_05GECEPKB@flags?$AA@ DB 'flags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EPOCNDEG@implementation?$AA@
CONST	SEGMENT
??_C@_0P@EPOCNDEG@implementation?$AA@ DB 'implementation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NPOFIJBB@version_info?$AA@
CONST	SEGMENT
??_C@_0N@NPOFIJBB@version_info?$AA@ DB 'version_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLDNDIBM@_xoptions?$AA@
CONST	SEGMENT
??_C@_09NLDNDIBM@_xoptions?$AA@ DB '_xoptions', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHJDAEBN@warnoptions?$AA@
CONST	SEGMENT
??_C@_0M@OHJDAEBN@warnoptions?$AA@ DB 'warnoptions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FPOELEGF@winver?$AA@
CONST	SEGMENT
??_C@_06FPOELEGF@winver?$AA@ DB 'winver', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EJJKCOGE@dllhandle?$AA@
CONST	SEGMENT
??_C@_09EJJKCOGE@dllhandle?$AA@ DB 'dllhandle', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PJBCLGKJ@byteorder?$AA@
CONST	SEGMENT
??_C@_09PJBCLGKJ@byteorder?$AA@ DB 'byteorder', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LADGIEOA@little?$AA@
CONST	SEGMENT
??_C@_06LADGIEOA@little?$AA@ DB 'little', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CCCOBCKE@big?$AA@
CONST	SEGMENT
??_C@_03CCCOBCKE@big?$AA@ DB 'big', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPKMLNFN@builtin_module_names?$AA@
CONST	SEGMENT
??_C@_0BF@LPKMLNFN@builtin_module_names?$AA@ DB 'builtin_module_names', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IACHHLKH@maxunicode?$AA@
CONST	SEGMENT
??_C@_0L@IACHHLKH@maxunicode?$AA@ DB 'maxunicode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BDOHDNMP@hash_info?$AA@
CONST	SEGMENT
??_C@_09BDOHDNMP@hash_info?$AA@ DB 'hash_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CIEMHFML@int_info?$AA@
CONST	SEGMENT
??_C@_08CIEMHFML@int_info?$AA@ DB 'int_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HMECADCK@float_info?$AA@
CONST	SEGMENT
??_C@_0L@HMECADCK@float_info?$AA@ DB 'float_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KCDDANPD@maxsize?$AA@
CONST	SEGMENT
??_C@_07KCDDANPD@maxsize?$AA@ DB 'maxsize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FIIOHCIL@base_exec_prefix?$AA@
CONST	SEGMENT
??_C@_0BB@FIIOHCIL@base_exec_prefix?$AA@ DB 'base_exec_prefix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BDGILGLH@base_prefix?$AA@
CONST	SEGMENT
??_C@_0M@BDGILGLH@base_prefix?$AA@ DB 'base_prefix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OLOBCNFD@exec_prefix?$AA@
CONST	SEGMENT
??_C@_0M@OLOBCNFD@exec_prefix?$AA@ DB 'exec_prefix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHGOAPND@prefix?$AA@
CONST	SEGMENT
??_C@_06CHGOAPND@prefix?$AA@ DB 'prefix', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FKCMKODO@executable?$AA@
CONST	SEGMENT
??_C@_0L@FKCMKODO@executable?$AA@ DB 'executable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JHBDCMB@copyright?$AA@
CONST	SEGMENT
??_C@_09JHBDCMB@copyright?$AA@ DB 'copyright', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PMBEFFCE@api_version?$AA@
CONST	SEGMENT
??_C@_0M@PMBEFFCE@api_version?$AA@ DB 'api_version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HHGPOKH@_mercurial?$AA@
CONST	SEGMENT
??_C@_0L@HHGPOKH@_mercurial?$AA@ DB '_mercurial', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CBCHBIN@?$CIszz?$CJ?$AA@
CONST	SEGMENT
??_C@_05CBCHBIN@?$CIszz?$CJ?$AA@ DB '(szz)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HIACADPB@CPython?$AA@
CONST	SEGMENT
??_C@_07HIACADPB@CPython?$AA@ DB 'CPython', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LHCICIKK@hexversion?$AA@
CONST	SEGMENT
??_C@_0L@LHCICIKK@hexversion?$AA@ DB 'hexversion', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version?$AA@
CONST	SEGMENT
??_C@_07CPCPJPKL@version?$AA@ DB 'version', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HIAEFOKM@__excepthook__?$AA@
CONST	SEGMENT
??_C@_0P@HIAEFOKM@__excepthook__?$AA@ DB '__excepthook__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OBKGBBAP@__displayhook__?$AA@
CONST	SEGMENT
??_C@_0BA@OBKGBBAP@__displayhook__?$AA@ DB '__displayhook__', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PySys_Init
_TEXT	SEGMENT
v$ = 32
sysdict$ = 40
s$ = 48
version_info$ = 56
m$ = 64
value$64825 = 72
number$64824 = 80
tv134 = 88
_PySys_Init PROC					; COMDAT

; 1566 : {

$LN145:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1567 :     PyObject *m, *v, *sysdict, *version_info;
; 1568 :     char *s;
; 1569 : 
; 1570 :     m = PyModule_Create(&sysmodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:sysmodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 40	 mov	 QWORD PTR m$[rsp], rax

; 1571 :     if (m == NULL)

  0001a	48 83 7c 24 40
	00		 cmp	 QWORD PTR m$[rsp], 0
  00020	75 07		 jne	 SHORT $LN142@PySys_Init

; 1572 :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 1d 09 00 00	 jmp	 $LN143@PySys_Init
$LN142@PySys_Init:

; 1573 :     sysdict = PyModule_GetDict(m);

  00029	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0002e	e8 00 00 00 00	 call	 PyModule_GetDict
  00033	48 89 44 24 28	 mov	 QWORD PTR sysdict$[rsp], rax

; 1574 : #define SET_SYS_FROM_STRING(key, value)                 \
; 1575 :     v = value;                                          \
; 1576 :     if (v != NULL)                                      \
; 1577 :         PyDict_SetItemString(sysdict, key, v);          \
; 1578 :     Py_XDECREF(v)
; 1579 : 
; 1580 :     /* Check that stdin is not a directory
; 1581 :     Using shell redirection, you can redirect stdin to a directory,
; 1582 :     crashing the Python interpreter. Catch this common mistake here
; 1583 :     and output a useful error message. Note that under MS Windows,
; 1584 :     the shell already prevents that. */
; 1585 : #if !defined(MS_WINDOWS)
; 1586 :     {
; 1587 :         struct stat sb;
; 1588 :         if (fstat(fileno(stdin), &sb) == 0 &&
; 1589 :             S_ISDIR(sb.st_mode)) {
; 1590 :             /* There's nothing more we can do. */
; 1591 :             /* Py_FatalError() will core dump, so just exit. */
; 1592 :             PySys_WriteStderr("Python error: <stdin> is a directory, cannot continue\n");
; 1593 :             exit(EXIT_FAILURE);
; 1594 :         }
; 1595 :     }
; 1596 : #endif
; 1597 : 
; 1598 :     /* stdin/stdout/stderr are now set by pythonrun.c */
; 1599 : 
; 1600 :     PyDict_SetItemString(sysdict, "__displayhook__",
; 1601 :                          PyDict_GetItemString(sysdict, "displayhook"));

  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OABHHABA@displayhook?$AA@
  0003f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00044	e8 00 00 00 00	 call	 PyDict_GetItemString
  00049	4c 8b c0	 mov	 r8, rax
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@OBKGBBAP@__displayhook__?$AA@
  00053	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00058	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1602 :     PyDict_SetItemString(sysdict, "__excepthook__",
; 1603 :                          PyDict_GetItemString(sysdict, "excepthook"));

  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NONONIOP@excepthook?$AA@
  00064	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00069	e8 00 00 00 00	 call	 PyDict_GetItemString
  0006e	4c 8b c0	 mov	 r8, rax
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@HIAEFOKM@__excepthook__?$AA@
  00078	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  0007d	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1604 :     SET_SYS_FROM_STRING("version",
; 1605 :                          PyUnicode_FromString(Py_GetVersion()));

  00082	e8 00 00 00 00	 call	 Py_GetVersion
  00087	48 8b c8	 mov	 rcx, rax
  0008a	e8 00 00 00 00	 call	 PyUnicode_FromString
  0008f	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00094	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0009a	74 16		 je	 SHORT $LN141@PySys_Init
  0009c	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CPCPJPKL@version?$AA@
  000a8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  000ad	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN141@PySys_Init:
$LN140@PySys_Init:
  000b2	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  000b8	74 0a		 je	 SHORT $LN137@PySys_Init
  000ba	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000bf	e8 00 00 00 00	 call	 _Py_DecRef
$LN137@PySys_Init:
  000c4	33 c0		 xor	 eax, eax
  000c6	85 c0		 test	 eax, eax
  000c8	75 e8		 jne	 SHORT $LN140@PySys_Init

; 1606 :     SET_SYS_FROM_STRING("hexversion",
; 1607 :                          PyLong_FromLong(PY_VERSION_HEX));

  000ca	b9 f0 05 03 03	 mov	 ecx, 50529776		; 030305f0H
  000cf	e8 00 00 00 00	 call	 PyLong_FromLong
  000d4	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  000d9	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  000df	74 16		 je	 SHORT $LN136@PySys_Init
  000e1	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  000e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LHCICIKK@hexversion?$AA@
  000ed	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  000f2	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN136@PySys_Init:
$LN135@PySys_Init:
  000f7	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  000fd	74 0a		 je	 SHORT $LN132@PySys_Init
  000ff	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00104	e8 00 00 00 00	 call	 _Py_DecRef
$LN132@PySys_Init:
  00109	33 c0		 xor	 eax, eax
  0010b	85 c0		 test	 eax, eax
  0010d	75 e8		 jne	 SHORT $LN135@PySys_Init

; 1608 :     SET_SYS_FROM_STRING("_mercurial",
; 1609 :                         Py_BuildValue("(szz)", "CPython", _Py_hgidentifier(),
; 1610 :                                       _Py_hgversion()));

  0010f	e8 00 00 00 00	 call	 _Py_hgversion
  00114	48 89 44 24 58	 mov	 QWORD PTR tv134[rsp], rax
  00119	e8 00 00 00 00	 call	 _Py_hgidentifier
  0011e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv134[rsp]
  00123	4c 8b c9	 mov	 r9, rcx
  00126	4c 8b c0	 mov	 r8, rax
  00129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07HIACADPB@CPython?$AA@
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05CBCHBIN@?$CIszz?$CJ?$AA@
  00137	e8 00 00 00 00	 call	 Py_BuildValue
  0013c	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00141	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00147	74 16		 je	 SHORT $LN131@PySys_Init
  00149	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HHGPOKH@_mercurial?$AA@
  00155	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  0015a	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN131@PySys_Init:
$LN130@PySys_Init:
  0015f	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00165	74 0a		 je	 SHORT $LN127@PySys_Init
  00167	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0016c	e8 00 00 00 00	 call	 _Py_DecRef
$LN127@PySys_Init:
  00171	33 c0		 xor	 eax, eax
  00173	85 c0		 test	 eax, eax
  00175	75 e8		 jne	 SHORT $LN130@PySys_Init

; 1611 :     SET_SYS_FROM_STRING("dont_write_bytecode",
; 1612 :                          PyBool_FromLong(Py_DontWriteBytecodeFlag));

  00177	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_DontWriteBytecodeFlag
  0017d	e8 00 00 00 00	 call	 PyBool_FromLong
  00182	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00187	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0018d	74 16		 je	 SHORT $LN126@PySys_Init
  0018f	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  00194	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@CMMEJPLN@dont_write_bytecode?$AA@
  0019b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  001a0	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN126@PySys_Init:
$LN125@PySys_Init:
  001a5	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  001ab	74 0a		 je	 SHORT $LN122@PySys_Init
  001ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  001b2	e8 00 00 00 00	 call	 _Py_DecRef
$LN122@PySys_Init:
  001b7	33 c0		 xor	 eax, eax
  001b9	85 c0		 test	 eax, eax
  001bb	75 e8		 jne	 SHORT $LN125@PySys_Init

; 1613 :     SET_SYS_FROM_STRING("api_version",
; 1614 :                         PyLong_FromLong(PYTHON_API_VERSION));

  001bd	b9 f5 03 00 00	 mov	 ecx, 1013		; 000003f5H
  001c2	e8 00 00 00 00	 call	 PyLong_FromLong
  001c7	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  001cc	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  001d2	74 16		 je	 SHORT $LN121@PySys_Init
  001d4	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  001d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@PMBEFFCE@api_version?$AA@
  001e0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  001e5	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN121@PySys_Init:
$LN120@PySys_Init:
  001ea	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  001f0	74 0a		 je	 SHORT $LN117@PySys_Init
  001f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  001f7	e8 00 00 00 00	 call	 _Py_DecRef
$LN117@PySys_Init:
  001fc	33 c0		 xor	 eax, eax
  001fe	85 c0		 test	 eax, eax
  00200	75 e8		 jne	 SHORT $LN120@PySys_Init

; 1615 :     SET_SYS_FROM_STRING("copyright",
; 1616 :                         PyUnicode_FromString(Py_GetCopyright()));

  00202	e8 00 00 00 00	 call	 Py_GetCopyright
  00207	48 8b c8	 mov	 rcx, rax
  0020a	e8 00 00 00 00	 call	 PyUnicode_FromString
  0020f	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00214	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0021a	74 16		 je	 SHORT $LN116@PySys_Init
  0021c	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09JHBDCMB@copyright?$AA@
  00228	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  0022d	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN116@PySys_Init:
$LN115@PySys_Init:
  00232	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00238	74 0a		 je	 SHORT $LN112@PySys_Init
  0023a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0023f	e8 00 00 00 00	 call	 _Py_DecRef
$LN112@PySys_Init:
  00244	33 c0		 xor	 eax, eax
  00246	85 c0		 test	 eax, eax
  00248	75 e8		 jne	 SHORT $LN115@PySys_Init

; 1617 :     SET_SYS_FROM_STRING("platform",
; 1618 :                         PyUnicode_FromString(Py_GetPlatform()));

  0024a	e8 00 00 00 00	 call	 Py_GetPlatform
  0024f	48 8b c8	 mov	 rcx, rax
  00252	e8 00 00 00 00	 call	 PyUnicode_FromString
  00257	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  0025c	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00262	74 16		 je	 SHORT $LN111@PySys_Init
  00264	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  00269	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CBHCFJJK@platform?$AA@
  00270	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00275	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN111@PySys_Init:
$LN110@PySys_Init:
  0027a	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00280	74 0a		 je	 SHORT $LN107@PySys_Init
  00282	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00287	e8 00 00 00 00	 call	 _Py_DecRef
$LN107@PySys_Init:
  0028c	33 c0		 xor	 eax, eax
  0028e	85 c0		 test	 eax, eax
  00290	75 e8		 jne	 SHORT $LN110@PySys_Init

; 1619 :     SET_SYS_FROM_STRING("executable",
; 1620 :                         PyUnicode_FromWideChar(
; 1621 :                                Py_GetProgramFullPath(), -1));

  00292	e8 00 00 00 00	 call	 Py_GetProgramFullPath
  00297	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0029e	48 8b c8	 mov	 rcx, rax
  002a1	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  002a6	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  002ab	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  002b1	74 16		 je	 SHORT $LN106@PySys_Init
  002b3	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  002b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@FKCMKODO@executable?$AA@
  002bf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  002c4	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN106@PySys_Init:
$LN105@PySys_Init:
  002c9	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  002cf	74 0a		 je	 SHORT $LN102@PySys_Init
  002d1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  002d6	e8 00 00 00 00	 call	 _Py_DecRef
$LN102@PySys_Init:
  002db	33 c0		 xor	 eax, eax
  002dd	85 c0		 test	 eax, eax
  002df	75 e8		 jne	 SHORT $LN105@PySys_Init

; 1622 :     SET_SYS_FROM_STRING("prefix",
; 1623 :                         PyUnicode_FromWideChar(Py_GetPrefix(), -1));

  002e1	e8 00 00 00 00	 call	 Py_GetPrefix
  002e6	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  002ed	48 8b c8	 mov	 rcx, rax
  002f0	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  002f5	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  002fa	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00300	74 16		 je	 SHORT $LN101@PySys_Init
  00302	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  00307	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06CHGOAPND@prefix?$AA@
  0030e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00313	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN101@PySys_Init:
$LN100@PySys_Init:
  00318	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0031e	74 0a		 je	 SHORT $LN97@PySys_Init
  00320	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00325	e8 00 00 00 00	 call	 _Py_DecRef
$LN97@PySys_Init:
  0032a	33 c0		 xor	 eax, eax
  0032c	85 c0		 test	 eax, eax
  0032e	75 e8		 jne	 SHORT $LN100@PySys_Init

; 1624 :     SET_SYS_FROM_STRING("exec_prefix",
; 1625 :                         PyUnicode_FromWideChar(Py_GetExecPrefix(), -1));

  00330	e8 00 00 00 00	 call	 Py_GetExecPrefix
  00335	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0033c	48 8b c8	 mov	 rcx, rax
  0033f	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  00344	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00349	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0034f	74 16		 je	 SHORT $LN96@PySys_Init
  00351	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  00356	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OLOBCNFD@exec_prefix?$AA@
  0035d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00362	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN96@PySys_Init:
$LN95@PySys_Init:
  00367	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0036d	74 0a		 je	 SHORT $LN92@PySys_Init
  0036f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00374	e8 00 00 00 00	 call	 _Py_DecRef
$LN92@PySys_Init:
  00379	33 c0		 xor	 eax, eax
  0037b	85 c0		 test	 eax, eax
  0037d	75 e8		 jne	 SHORT $LN95@PySys_Init

; 1626 :     SET_SYS_FROM_STRING("base_prefix",
; 1627 :                         PyUnicode_FromWideChar(Py_GetPrefix(), -1));

  0037f	e8 00 00 00 00	 call	 Py_GetPrefix
  00384	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0038b	48 8b c8	 mov	 rcx, rax
  0038e	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  00393	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00398	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0039e	74 16		 je	 SHORT $LN91@PySys_Init
  003a0	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  003a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@BDGILGLH@base_prefix?$AA@
  003ac	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  003b1	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN91@PySys_Init:
$LN90@PySys_Init:
  003b6	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  003bc	74 0a		 je	 SHORT $LN87@PySys_Init
  003be	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  003c3	e8 00 00 00 00	 call	 _Py_DecRef
$LN87@PySys_Init:
  003c8	33 c0		 xor	 eax, eax
  003ca	85 c0		 test	 eax, eax
  003cc	75 e8		 jne	 SHORT $LN90@PySys_Init

; 1628 :     SET_SYS_FROM_STRING("base_exec_prefix",
; 1629 :                         PyUnicode_FromWideChar(Py_GetExecPrefix(), -1));

  003ce	e8 00 00 00 00	 call	 Py_GetExecPrefix
  003d3	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  003da	48 8b c8	 mov	 rcx, rax
  003dd	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  003e2	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  003e7	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  003ed	74 16		 je	 SHORT $LN86@PySys_Init
  003ef	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  003f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@FIIOHCIL@base_exec_prefix?$AA@
  003fb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00400	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN86@PySys_Init:
$LN85@PySys_Init:
  00405	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0040b	74 0a		 je	 SHORT $LN82@PySys_Init
  0040d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00412	e8 00 00 00 00	 call	 _Py_DecRef
$LN82@PySys_Init:
  00417	33 c0		 xor	 eax, eax
  00419	85 c0		 test	 eax, eax
  0041b	75 e8		 jne	 SHORT $LN85@PySys_Init

; 1630 :     SET_SYS_FROM_STRING("maxsize",
; 1631 :                         PyLong_FromSsize_t(PY_SSIZE_T_MAX));

  0041d	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  00427	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0042c	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00431	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00437	74 16		 je	 SHORT $LN81@PySys_Init
  00439	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  0043e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07KCDDANPD@maxsize?$AA@
  00445	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  0044a	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN81@PySys_Init:
$LN80@PySys_Init:
  0044f	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00455	74 0a		 je	 SHORT $LN77@PySys_Init
  00457	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0045c	e8 00 00 00 00	 call	 _Py_DecRef
$LN77@PySys_Init:
  00461	33 c0		 xor	 eax, eax
  00463	85 c0		 test	 eax, eax
  00465	75 e8		 jne	 SHORT $LN80@PySys_Init

; 1632 :     SET_SYS_FROM_STRING("float_info",
; 1633 :                         PyFloat_GetInfo());

  00467	e8 00 00 00 00	 call	 PyFloat_GetInfo
  0046c	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00471	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00477	74 16		 je	 SHORT $LN76@PySys_Init
  00479	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  0047e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HMECADCK@float_info?$AA@
  00485	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  0048a	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN76@PySys_Init:
$LN75@PySys_Init:
  0048f	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00495	74 0a		 je	 SHORT $LN72@PySys_Init
  00497	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0049c	e8 00 00 00 00	 call	 _Py_DecRef
$LN72@PySys_Init:
  004a1	33 c0		 xor	 eax, eax
  004a3	85 c0		 test	 eax, eax
  004a5	75 e8		 jne	 SHORT $LN75@PySys_Init

; 1634 :     SET_SYS_FROM_STRING("int_info",
; 1635 :                         PyLong_GetInfo());

  004a7	e8 00 00 00 00	 call	 PyLong_GetInfo
  004ac	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  004b1	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  004b7	74 16		 je	 SHORT $LN71@PySys_Init
  004b9	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  004be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CIEMHFML@int_info?$AA@
  004c5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  004ca	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN71@PySys_Init:
$LN70@PySys_Init:
  004cf	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  004d5	74 0a		 je	 SHORT $LN67@PySys_Init
  004d7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  004dc	e8 00 00 00 00	 call	 _Py_DecRef
$LN67@PySys_Init:
  004e1	33 c0		 xor	 eax, eax
  004e3	85 c0		 test	 eax, eax
  004e5	75 e8		 jne	 SHORT $LN70@PySys_Init

; 1636 :     /* initialize hash_info */
; 1637 :     if (Hash_InfoType.tp_name == 0)

  004e7	48 83 3d 70 00
	00 00 00	 cmp	 QWORD PTR Hash_InfoType+112, 0
  004ef	75 13		 jne	 SHORT $LN66@PySys_Init

; 1638 :         PyStructSequence_InitType(&Hash_InfoType, &hash_info_desc);

  004f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hash_info_desc
  004f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Hash_InfoType
  004ff	e8 00 00 00 00	 call	 PyStructSequence_InitType
$LN66@PySys_Init:

; 1639 :     SET_SYS_FROM_STRING("hash_info",
; 1640 :                         get_hash_info());

  00504	e8 00 00 00 00	 call	 get_hash_info
  00509	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  0050e	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00514	74 16		 je	 SHORT $LN65@PySys_Init
  00516	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  0051b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09BDOHDNMP@hash_info?$AA@
  00522	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00527	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN65@PySys_Init:
$LN64@PySys_Init:
  0052c	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00532	74 0a		 je	 SHORT $LN61@PySys_Init
  00534	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00539	e8 00 00 00 00	 call	 _Py_DecRef
$LN61@PySys_Init:
  0053e	33 c0		 xor	 eax, eax
  00540	85 c0		 test	 eax, eax
  00542	75 e8		 jne	 SHORT $LN64@PySys_Init

; 1641 :     SET_SYS_FROM_STRING("maxunicode",
; 1642 :                         PyLong_FromLong(0x10FFFF));

  00544	b9 ff ff 10 00	 mov	 ecx, 1114111		; 0010ffffH
  00549	e8 00 00 00 00	 call	 PyLong_FromLong
  0054e	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00553	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00559	74 16		 je	 SHORT $LN60@PySys_Init
  0055b	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  00560	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@IACHHLKH@maxunicode?$AA@
  00567	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  0056c	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN60@PySys_Init:
$LN59@PySys_Init:
  00571	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00577	74 0a		 je	 SHORT $LN56@PySys_Init
  00579	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0057e	e8 00 00 00 00	 call	 _Py_DecRef
$LN56@PySys_Init:
  00583	33 c0		 xor	 eax, eax
  00585	85 c0		 test	 eax, eax
  00587	75 e8		 jne	 SHORT $LN59@PySys_Init

; 1643 :     SET_SYS_FROM_STRING("builtin_module_names",
; 1644 :                         list_builtin_module_names());

  00589	e8 00 00 00 00	 call	 list_builtin_module_names
  0058e	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00593	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00599	74 16		 je	 SHORT $LN55@PySys_Init
  0059b	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  005a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@LPKMLNFN@builtin_module_names?$AA@
  005a7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  005ac	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN55@PySys_Init:
$LN54@PySys_Init:
  005b1	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  005b7	74 0a		 je	 SHORT $LN51@PySys_Init
  005b9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  005be	e8 00 00 00 00	 call	 _Py_DecRef
$LN51@PySys_Init:
  005c3	33 c0		 xor	 eax, eax
  005c5	85 c0		 test	 eax, eax
  005c7	75 e8		 jne	 SHORT $LN54@PySys_Init

; 1645 :     {
; 1646 :         /* Assumes that longs are at least 2 bytes long.
; 1647 :            Should be safe! */
; 1648 :         unsigned long number = 1;

  005c9	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR number$64824[rsp], 1

; 1649 :         char *value;
; 1650 : 
; 1651 :         s = (char *) &number;

  005d1	48 8d 44 24 50	 lea	 rax, QWORD PTR number$64824[rsp]
  005d6	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 1652 :         if (s[0] == 0)

  005db	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  005e0	0f be 00	 movsx	 eax, BYTE PTR [rax]
  005e3	85 c0		 test	 eax, eax
  005e5	75 0e		 jne	 SHORT $LN50@PySys_Init

; 1653 :             value = "big";

  005e7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03CCCOBCKE@big?$AA@
  005ee	48 89 44 24 48	 mov	 QWORD PTR value$64825[rsp], rax

; 1654 :         else

  005f3	eb 0c		 jmp	 SHORT $LN49@PySys_Init
$LN50@PySys_Init:

; 1655 :             value = "little";

  005f5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06LADGIEOA@little?$AA@
  005fc	48 89 44 24 48	 mov	 QWORD PTR value$64825[rsp], rax
$LN49@PySys_Init:

; 1656 :         SET_SYS_FROM_STRING("byteorder",
; 1657 :                             PyUnicode_FromString(value));

  00601	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$64825[rsp]
  00606	e8 00 00 00 00	 call	 PyUnicode_FromString
  0060b	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00610	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00616	74 16		 je	 SHORT $LN48@PySys_Init
  00618	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  0061d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09PJBCLGKJ@byteorder?$AA@
  00624	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00629	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN48@PySys_Init:
$LN47@PySys_Init:
  0062e	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00634	74 0a		 je	 SHORT $LN44@PySys_Init
  00636	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0063b	e8 00 00 00 00	 call	 _Py_DecRef
$LN44@PySys_Init:
  00640	33 c0		 xor	 eax, eax
  00642	85 c0		 test	 eax, eax
  00644	75 e8		 jne	 SHORT $LN47@PySys_Init

; 1658 :     }
; 1659 : #ifdef MS_COREDLL
; 1660 :     SET_SYS_FROM_STRING("dllhandle",
; 1661 :                         PyLong_FromVoidPtr(PyWin_DLLhModule));

  00646	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyWin_DLLhModule
  0064d	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  00652	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00657	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0065d	74 16		 je	 SHORT $LN43@PySys_Init
  0065f	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  00664	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09EJJKCOGE@dllhandle?$AA@
  0066b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00670	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN43@PySys_Init:
$LN42@PySys_Init:
  00675	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0067b	74 0a		 je	 SHORT $LN39@PySys_Init
  0067d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00682	e8 00 00 00 00	 call	 _Py_DecRef
$LN39@PySys_Init:
  00687	33 c0		 xor	 eax, eax
  00689	85 c0		 test	 eax, eax
  0068b	75 e8		 jne	 SHORT $LN42@PySys_Init

; 1662 :     SET_SYS_FROM_STRING("winver",
; 1663 :                         PyUnicode_FromString(PyWin_DLLVersionString));

  0068d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyWin_DLLVersionString
  00694	e8 00 00 00 00	 call	 PyUnicode_FromString
  00699	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  0069e	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  006a4	74 16		 je	 SHORT $LN38@PySys_Init
  006a6	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  006ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06FPOELEGF@winver?$AA@
  006b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  006b7	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN38@PySys_Init:
$LN37@PySys_Init:
  006bc	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  006c2	74 0a		 je	 SHORT $LN34@PySys_Init
  006c4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  006c9	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@PySys_Init:
  006ce	33 c0		 xor	 eax, eax
  006d0	85 c0		 test	 eax, eax
  006d2	75 e8		 jne	 SHORT $LN37@PySys_Init

; 1664 : #endif
; 1665 : #ifdef ABIFLAGS
; 1666 :     SET_SYS_FROM_STRING("abiflags",
; 1667 :                         PyUnicode_FromString(ABIFLAGS));
; 1668 : #endif
; 1669 :     if (warnoptions == NULL) {

  006d4	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR warnoptions, 0
  006dc	75 10		 jne	 SHORT $LN33@PySys_Init

; 1670 :         warnoptions = PyList_New(0);

  006de	33 c9		 xor	 ecx, ecx
  006e0	e8 00 00 00 00	 call	 PyList_New
  006e5	48 89 05 00 00
	00 00		 mov	 QWORD PTR warnoptions, rax

; 1671 :     }
; 1672 :     else {

  006ec	eb 0c		 jmp	 SHORT $LN32@PySys_Init
$LN33@PySys_Init:

; 1673 :         Py_INCREF(warnoptions);

  006ee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR warnoptions
  006f5	e8 00 00 00 00	 call	 _Py_IncRef
$LN32@PySys_Init:

; 1674 :     }
; 1675 :     if (warnoptions != NULL) {

  006fa	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR warnoptions, 0
  00702	74 18		 je	 SHORT $LN31@PySys_Init

; 1676 :         PyDict_SetItemString(sysdict, "warnoptions", warnoptions);

  00704	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR warnoptions
  0070b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OHJDAEBN@warnoptions?$AA@
  00712	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00717	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN31@PySys_Init:

; 1677 :     }
; 1678 : 
; 1679 :     v = get_xoptions();

  0071c	e8 00 00 00 00	 call	 get_xoptions
  00721	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1680 :     if (v != NULL) {

  00726	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0072c	74 16		 je	 SHORT $LN30@PySys_Init

; 1681 :         PyDict_SetItemString(sysdict, "_xoptions", v);

  0072e	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  00733	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09NLDNDIBM@_xoptions?$AA@
  0073a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  0073f	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN30@PySys_Init:

; 1682 :     }
; 1683 : 
; 1684 :     /* version_info */
; 1685 :     if (VersionInfoType.tp_name == 0)

  00744	48 83 3d 70 00
	00 00 00	 cmp	 QWORD PTR VersionInfoType+112, 0
  0074c	75 13		 jne	 SHORT $LN29@PySys_Init

; 1686 :         PyStructSequence_InitType(&VersionInfoType, &version_info_desc);

  0074e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:version_info_desc
  00755	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:VersionInfoType
  0075c	e8 00 00 00 00	 call	 PyStructSequence_InitType
$LN29@PySys_Init:

; 1687 :     version_info = make_version_info();

  00761	e8 00 00 00 00	 call	 make_version_info
  00766	48 89 44 24 38	 mov	 QWORD PTR version_info$[rsp], rax

; 1688 :     SET_SYS_FROM_STRING("version_info", version_info);

  0076b	48 8b 44 24 38	 mov	 rax, QWORD PTR version_info$[rsp]
  00770	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00775	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0077b	74 16		 je	 SHORT $LN28@PySys_Init
  0077d	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  00782	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@NPOFIJBB@version_info?$AA@
  00789	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  0078e	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN28@PySys_Init:
$LN27@PySys_Init:
  00793	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00799	74 0a		 je	 SHORT $LN24@PySys_Init
  0079b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  007a0	e8 00 00 00 00	 call	 _Py_DecRef
$LN24@PySys_Init:
  007a5	33 c0		 xor	 eax, eax
  007a7	85 c0		 test	 eax, eax
  007a9	75 e8		 jne	 SHORT $LN27@PySys_Init

; 1689 :     /* prevent user from creating new instances */
; 1690 :     VersionInfoType.tp_init = NULL;

  007ab	48 c7 05 80 01
	00 00 00 00 00
	00		 mov	 QWORD PTR VersionInfoType+384, 0

; 1691 :     VersionInfoType.tp_new = NULL;

  007b6	48 c7 05 90 01
	00 00 00 00 00
	00		 mov	 QWORD PTR VersionInfoType+400, 0

; 1692 : 
; 1693 :     /* implementation */
; 1694 :     SET_SYS_FROM_STRING("implementation", make_impl_info(version_info));

  007c1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR version_info$[rsp]
  007c6	e8 00 00 00 00	 call	 make_impl_info
  007cb	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  007d0	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  007d6	74 16		 je	 SHORT $LN23@PySys_Init
  007d8	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  007dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EPOCNDEG@implementation?$AA@
  007e4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  007e9	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN23@PySys_Init:
$LN22@PySys_Init:
  007ee	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  007f4	74 0a		 je	 SHORT $LN19@PySys_Init
  007f6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  007fb	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@PySys_Init:
  00800	33 c0		 xor	 eax, eax
  00802	85 c0		 test	 eax, eax
  00804	75 e8		 jne	 SHORT $LN22@PySys_Init

; 1695 : 
; 1696 :     /* flags */
; 1697 :     if (FlagsType.tp_name == 0)

  00806	48 83 3d 70 00
	00 00 00	 cmp	 QWORD PTR FlagsType+112, 0
  0080e	75 13		 jne	 SHORT $LN18@PySys_Init

; 1698 :         PyStructSequence_InitType(&FlagsType, &flags_desc);

  00810	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:flags_desc
  00817	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:FlagsType
  0081e	e8 00 00 00 00	 call	 PyStructSequence_InitType
$LN18@PySys_Init:

; 1699 :     SET_SYS_FROM_STRING("flags", make_flags());

  00823	e8 00 00 00 00	 call	 make_flags
  00828	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  0082d	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00833	74 16		 je	 SHORT $LN17@PySys_Init
  00835	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  0083a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GECEPKB@flags?$AA@
  00841	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00846	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN17@PySys_Init:
$LN16@PySys_Init:
  0084b	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00851	74 0a		 je	 SHORT $LN13@PySys_Init
  00853	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00858	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PySys_Init:
  0085d	33 c0		 xor	 eax, eax
  0085f	85 c0		 test	 eax, eax
  00861	75 e8		 jne	 SHORT $LN16@PySys_Init

; 1700 :     /* prevent user from creating new instances */
; 1701 :     FlagsType.tp_init = NULL;

  00863	48 c7 05 80 01
	00 00 00 00 00
	00		 mov	 QWORD PTR FlagsType+384, 0

; 1702 :     FlagsType.tp_new = NULL;

  0086e	48 c7 05 90 01
	00 00 00 00 00
	00		 mov	 QWORD PTR FlagsType+400, 0

; 1703 : 
; 1704 : 
; 1705 : #if defined(MS_WINDOWS)
; 1706 :     /* getwindowsversion */
; 1707 :     if (WindowsVersionType.tp_name == 0)

  00879	48 83 3d 70 00
	00 00 00	 cmp	 QWORD PTR WindowsVersionType+112, 0
  00881	75 13		 jne	 SHORT $LN12@PySys_Init

; 1708 :         PyStructSequence_InitType(&WindowsVersionType, &windows_version_desc);

  00883	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:windows_version_desc
  0088a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:WindowsVersionType
  00891	e8 00 00 00 00	 call	 PyStructSequence_InitType
$LN12@PySys_Init:

; 1709 :     /* prevent user from creating new instances */
; 1710 :     WindowsVersionType.tp_init = NULL;

  00896	48 c7 05 80 01
	00 00 00 00 00
	00		 mov	 QWORD PTR WindowsVersionType+384, 0

; 1711 :     WindowsVersionType.tp_new = NULL;

  008a1	48 c7 05 90 01
	00 00 00 00 00
	00		 mov	 QWORD PTR WindowsVersionType+400, 0

; 1712 : #endif
; 1713 : 
; 1714 :     /* float repr style: 0.03 (short) vs 0.029999999999999999 (legacy) */
; 1715 : #ifndef PY_NO_SHORT_FLOAT_REPR
; 1716 :     SET_SYS_FROM_STRING("float_repr_style",
; 1717 :                         PyUnicode_FromString("short"));

  008ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BFKKPKCG@short?$AA@
  008b3	e8 00 00 00 00	 call	 PyUnicode_FromString
  008b8	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  008bd	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  008c3	74 16		 je	 SHORT $LN11@PySys_Init
  008c5	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  008ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@NLDLBIPF@float_repr_style?$AA@
  008d1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  008d6	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN11@PySys_Init:
$LN10@PySys_Init:
  008db	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  008e1	74 0a		 je	 SHORT $LN7@PySys_Init
  008e3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  008e8	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PySys_Init:
  008ed	33 c0		 xor	 eax, eax
  008ef	85 c0		 test	 eax, eax
  008f1	75 e8		 jne	 SHORT $LN10@PySys_Init

; 1718 : #else
; 1719 :     SET_SYS_FROM_STRING("float_repr_style",
; 1720 :                         PyUnicode_FromString("legacy"));
; 1721 : #endif
; 1722 : 
; 1723 : #ifdef WITH_THREAD
; 1724 :     SET_SYS_FROM_STRING("thread_info", PyThread_GetInfo());

  008f3	e8 00 00 00 00	 call	 PyThread_GetInfo
  008f8	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  008fd	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00903	74 16		 je	 SHORT $LN6@PySys_Init
  00905	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  0090a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@NCLNECCP@thread_info?$AA@
  00911	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysdict$[rsp]
  00916	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN6@PySys_Init:
$LN5@PySys_Init:
  0091b	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00921	74 0a		 je	 SHORT $LN2@PySys_Init
  00923	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00928	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PySys_Init:
  0092d	33 c0		 xor	 eax, eax
  0092f	85 c0		 test	 eax, eax
  00931	75 e8		 jne	 SHORT $LN5@PySys_Init

; 1725 : #endif
; 1726 : 
; 1727 : #undef SET_SYS_FROM_STRING
; 1728 :     if (PyErr_Occurred())

  00933	e8 00 00 00 00	 call	 PyErr_Occurred
  00938	48 85 c0	 test	 rax, rax
  0093b	74 04		 je	 SHORT $LN1@PySys_Init

; 1729 :         return NULL;

  0093d	33 c0		 xor	 eax, eax
  0093f	eb 05		 jmp	 SHORT $LN143@PySys_Init
$LN1@PySys_Init:

; 1730 :     return m;

  00941	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
$LN143@PySys_Init:

; 1731 : }

  00946	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0094a	c3		 ret	 0
_PySys_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@BHBAPDLD@get_hash_info?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_hash_info DD imagerel get_hash_info
	DD	imagerel get_hash_info+330
	DD	imagerel $unwind$get_hash_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_hash_info DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_0O@BHBAPDLD@get_hash_info?$AA@
CONST	SEGMENT
??_C@_0O@BHBAPDLD@get_hash_info?$AA@ DB 'get_hash_info', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_hash_info
_TEXT	SEGMENT
hash_info$ = 48
field$ = 56
_py_tmp$64169 = 64
get_hash_info PROC					; COMDAT

; 640  : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 641  :     PyObject *hash_info;
; 642  :     int field = 0;

  00004	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR field$[rsp], 0

; 643  :     hash_info = PyStructSequence_New(&Hash_InfoType);

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Hash_InfoType
  00013	e8 00 00 00 00	 call	 PyStructSequence_New
  00018	48 89 44 24 30	 mov	 QWORD PTR hash_info$[rsp], rax

; 644  :     if (hash_info == NULL)

  0001d	48 83 7c 24 30
	00		 cmp	 QWORD PTR hash_info$[rsp], 0
  00023	75 07		 jne	 SHORT $LN6@get_hash_i

; 645  :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	e9 19 01 00 00	 jmp	 $LN7@get_hash_i
$LN6@get_hash_i:

; 646  :     PyStructSequence_SET_ITEM(hash_info, field++,
; 647  :                               PyLong_FromLong(8*sizeof(Py_hash_t)));

  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	e8 00 00 00 00	 call	 PyLong_FromLong
  00036	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR field$[rsp]
  0003b	48 8b 54 24 30	 mov	 rdx, QWORD PTR hash_info$[rsp]
  00040	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  00045	8b 44 24 38	 mov	 eax, DWORD PTR field$[rsp]
  00049	ff c0		 inc	 eax
  0004b	89 44 24 38	 mov	 DWORD PTR field$[rsp], eax

; 648  :     PyStructSequence_SET_ITEM(hash_info, field++,
; 649  :                               PyLong_FromSsize_t(_PyHASH_MODULUS));

  0004f	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  00059	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0005e	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR field$[rsp]
  00063	48 8b 54 24 30	 mov	 rdx, QWORD PTR hash_info$[rsp]
  00068	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  0006d	8b 44 24 38	 mov	 eax, DWORD PTR field$[rsp]
  00071	ff c0		 inc	 eax
  00073	89 44 24 38	 mov	 DWORD PTR field$[rsp], eax

; 650  :     PyStructSequence_SET_ITEM(hash_info, field++,
; 651  :                               PyLong_FromLong(_PyHASH_INF));

  00077	b9 2f cb 04 00	 mov	 ecx, 314159		; 0004cb2fH
  0007c	e8 00 00 00 00	 call	 PyLong_FromLong
  00081	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR field$[rsp]
  00086	48 8b 54 24 30	 mov	 rdx, QWORD PTR hash_info$[rsp]
  0008b	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  00090	8b 44 24 38	 mov	 eax, DWORD PTR field$[rsp]
  00094	ff c0		 inc	 eax
  00096	89 44 24 38	 mov	 DWORD PTR field$[rsp], eax

; 652  :     PyStructSequence_SET_ITEM(hash_info, field++,
; 653  :                               PyLong_FromLong(_PyHASH_NAN));

  0009a	33 c9		 xor	 ecx, ecx
  0009c	e8 00 00 00 00	 call	 PyLong_FromLong
  000a1	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR field$[rsp]
  000a6	48 8b 54 24 30	 mov	 rdx, QWORD PTR hash_info$[rsp]
  000ab	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  000b0	8b 44 24 38	 mov	 eax, DWORD PTR field$[rsp]
  000b4	ff c0		 inc	 eax
  000b6	89 44 24 38	 mov	 DWORD PTR field$[rsp], eax

; 654  :     PyStructSequence_SET_ITEM(hash_info, field++,
; 655  :                               PyLong_FromLong(_PyHASH_IMAG));

  000ba	b9 43 42 0f 00	 mov	 ecx, 1000003		; 000f4243H
  000bf	e8 00 00 00 00	 call	 PyLong_FromLong
  000c4	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR field$[rsp]
  000c9	48 8b 54 24 30	 mov	 rdx, QWORD PTR hash_info$[rsp]
  000ce	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  000d3	8b 44 24 38	 mov	 eax, DWORD PTR field$[rsp]
  000d7	ff c0		 inc	 eax
  000d9	89 44 24 38	 mov	 DWORD PTR field$[rsp], eax

; 656  :     if (PyErr_Occurred()) {

  000dd	e8 00 00 00 00	 call	 PyErr_Occurred
  000e2	48 85 c0	 test	 rax, rax
  000e5	74 59		 je	 SHORT $LN5@get_hash_i
$LN4@get_hash_i:

; 657  :         Py_CLEAR(hash_info);

  000e7	48 83 7c 24 30
	00		 cmp	 QWORD PTR hash_info$[rsp], 0
  000ed	74 47		 je	 SHORT $LN1@get_hash_i
  000ef	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f7	4c 8b 4c 24 30	 mov	 r9, QWORD PTR hash_info$[rsp]
  000fc	41 b8 91 02 00
	00		 mov	 r8d, 657		; 00000291H
  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@BHBAPDLD@get_hash_info?$AA@
  00110	e8 00 00 00 00	 call	 _PyParallel_Guard
  00115	85 c0		 test	 eax, eax
  00117	75 1d		 jne	 SHORT $LN1@get_hash_i
  00119	48 8b 44 24 30	 mov	 rax, QWORD PTR hash_info$[rsp]
  0011e	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$64169[rsp], rax
  00123	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR hash_info$[rsp], 0
  0012c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$64169[rsp]
  00131	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@get_hash_i:
  00136	33 c0		 xor	 eax, eax
  00138	85 c0		 test	 eax, eax
  0013a	75 ab		 jne	 SHORT $LN4@get_hash_i

; 658  :         return NULL;

  0013c	33 c0		 xor	 eax, eax
  0013e	eb 05		 jmp	 SHORT $LN7@get_hash_i
$LN5@get_hash_i:

; 659  :     }
; 660  :     return hash_info;

  00140	48 8b 44 24 30	 mov	 rax, QWORD PTR hash_info$[rsp]
$LN7@get_hash_i:

; 661  : }

  00145	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00149	c3		 ret	 0
get_hash_info ENDP
_TEXT	ENDS
EXTRN	PyList_AsTuple:PROC
EXTRN	PyList_Sort:PROC
EXTRN	PyImport_Inittab:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$list_builtin_module_names DD imagerel list_builtin_module_names
	DD	imagerel list_builtin_module_names+227
	DD	imagerel $unwind$list_builtin_module_names
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$list_builtin_module_names DD 010401H
	DD	08204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT list_builtin_module_names
_TEXT	SEGMENT
i$ = 32
list$ = 40
name$64408 = 48
v$64416 = 56
list_builtin_module_names PROC				; COMDAT

; 1127 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1128 :     PyObject *list = PyList_New(0);

  00004	33 c9		 xor	 ecx, ecx
  00006	e8 00 00 00 00	 call	 PyList_New
  0000b	48 89 44 24 28	 mov	 QWORD PTR list$[rsp], rax

; 1129 :     int i;
; 1130 :     if (list == NULL)

  00010	48 83 7c 24 28
	00		 cmp	 QWORD PTR list$[rsp], 0
  00016	75 07		 jne	 SHORT $LN7@list_built

; 1131 :         return NULL;

  00018	33 c0		 xor	 eax, eax
  0001a	e9 bf 00 00 00	 jmp	 $LN8@list_built
$LN7@list_built:

; 1132 :     for (i = 0; PyImport_Inittab[i].name != NULL; i++) {

  0001f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00027	eb 0a		 jmp	 SHORT $LN6@list_built
$LN5@list_built:
  00029	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002d	ff c0		 inc	 eax
  0002f	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN6@list_built:
  00033	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00038	48 6b c0 10	 imul	 rax, 16
  0003c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyImport_Inittab
  00043	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00048	74 43		 je	 SHORT $LN4@list_built

; 1133 :         PyObject *name = PyUnicode_FromString(
; 1134 :             PyImport_Inittab[i].name);

  0004a	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0004f	48 6b c0 10	 imul	 rax, 16
  00053	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyImport_Inittab
  0005a	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0005e	e8 00 00 00 00	 call	 PyUnicode_FromString
  00063	48 89 44 24 30	 mov	 QWORD PTR name$64408[rsp], rax

; 1135 :         if (name == NULL)

  00068	48 83 7c 24 30
	00		 cmp	 QWORD PTR name$64408[rsp], 0
  0006e	75 02		 jne	 SHORT $LN3@list_built

; 1136 :             break;

  00070	eb 1b		 jmp	 SHORT $LN4@list_built
$LN3@list_built:

; 1137 :         PyList_Append(list, name);

  00072	48 8b 54 24 30	 mov	 rdx, QWORD PTR name$64408[rsp]
  00077	48 8b 4c 24 28	 mov	 rcx, QWORD PTR list$[rsp]
  0007c	e8 00 00 00 00	 call	 PyList_Append

; 1138 :         Py_DECREF(name);

  00081	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$64408[rsp]
  00086	e8 00 00 00 00	 call	 _Py_DecRef

; 1139 :     }

  0008b	eb 9c		 jmp	 SHORT $LN5@list_built
$LN4@list_built:

; 1140 :     if (PyList_Sort(list) != 0) {

  0008d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR list$[rsp]
  00092	e8 00 00 00 00	 call	 PyList_Sort
  00097	85 c0		 test	 eax, eax
  00099	74 13		 je	 SHORT $LN2@list_built

; 1141 :         Py_DECREF(list);

  0009b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR list$[rsp]
  000a0	e8 00 00 00 00	 call	 _Py_DecRef

; 1142 :         list = NULL;

  000a5	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR list$[rsp], 0
$LN2@list_built:

; 1143 :     }
; 1144 :     if (list) {

  000ae	48 83 7c 24 28
	00		 cmp	 QWORD PTR list$[rsp], 0
  000b4	74 23		 je	 SHORT $LN1@list_built

; 1145 :         PyObject *v = PyList_AsTuple(list);

  000b6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR list$[rsp]
  000bb	e8 00 00 00 00	 call	 PyList_AsTuple
  000c0	48 89 44 24 38	 mov	 QWORD PTR v$64416[rsp], rax

; 1146 :         Py_DECREF(list);

  000c5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR list$[rsp]
  000ca	e8 00 00 00 00	 call	 _Py_DecRef

; 1147 :         list = v;

  000cf	48 8b 44 24 38	 mov	 rax, QWORD PTR v$64416[rsp]
  000d4	48 89 44 24 28	 mov	 QWORD PTR list$[rsp], rax
$LN1@list_built:

; 1148 :     }
; 1149 :     return list;

  000d9	48 8b 44 24 28	 mov	 rax, QWORD PTR list$[rsp]
$LN8@list_built:

; 1150 : }

  000de	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e2	c3		 ret	 0
list_builtin_module_names ENDP
_TEXT	ENDS
EXTRN	Py_HashRandomizationFlag:DWORD
EXTRN	Py_QuietFlag:DWORD
EXTRN	Py_BytesWarningFlag:DWORD
EXTRN	Py_VerboseFlag:DWORD
EXTRN	Py_IgnoreEnvironmentFlag:DWORD
EXTRN	Py_NoSiteFlag:DWORD
EXTRN	Py_NoUserSiteDirectory:DWORD
EXTRN	Py_OptimizeFlag:DWORD
EXTRN	Py_InteractiveFlag:DWORD
EXTRN	Py_InspectFlag:DWORD
EXTRN	Py_DebugFlag:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_flags DD imagerel make_flags
	DD	imagerel make_flags+510
	DD	imagerel $unwind$make_flags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_flags DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT make_flags
_TEXT	SEGMENT
seq$ = 32
pos$ = 40
make_flags PROC						; COMDAT

; 1379 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1380 :     int pos = 0;

  00004	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR pos$[rsp], 0

; 1381 :     PyObject *seq;
; 1382 : 
; 1383 :     seq = PyStructSequence_New(&FlagsType);

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:FlagsType
  00013	e8 00 00 00 00	 call	 PyStructSequence_New
  00018	48 89 44 24 20	 mov	 QWORD PTR seq$[rsp], rax

; 1384 :     if (seq == NULL)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR seq$[rsp], 0
  00023	75 07		 jne	 SHORT $LN2@make_flags

; 1385 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	e9 cd 01 00 00	 jmp	 $LN3@make_flags
$LN2@make_flags:

; 1386 : 
; 1387 : #define SetFlag(flag) \
; 1388 :     PyStructSequence_SET_ITEM(seq, pos++, PyLong_FromLong(flag))
; 1389 : 
; 1390 :     SetFlag(Py_DebugFlag);

  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_DebugFlag
  00032	e8 00 00 00 00	 call	 PyLong_FromLong
  00037	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  0003c	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  00041	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  00046	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  0004a	ff c0		 inc	 eax
  0004c	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1391 :     SetFlag(Py_InspectFlag);

  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_InspectFlag
  00056	e8 00 00 00 00	 call	 PyLong_FromLong
  0005b	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  00060	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  00065	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  0006a	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  0006e	ff c0		 inc	 eax
  00070	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1392 :     SetFlag(Py_InteractiveFlag);

  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_InteractiveFlag
  0007a	e8 00 00 00 00	 call	 PyLong_FromLong
  0007f	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  00084	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  00089	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  0008e	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  00092	ff c0		 inc	 eax
  00094	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1393 :     SetFlag(Py_OptimizeFlag);

  00098	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_OptimizeFlag
  0009e	e8 00 00 00 00	 call	 PyLong_FromLong
  000a3	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  000a8	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  000ad	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  000b2	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  000b6	ff c0		 inc	 eax
  000b8	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1394 :     SetFlag(Py_DontWriteBytecodeFlag);

  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_DontWriteBytecodeFlag
  000c2	e8 00 00 00 00	 call	 PyLong_FromLong
  000c7	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  000cc	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  000d1	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  000d6	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  000da	ff c0		 inc	 eax
  000dc	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1395 :     SetFlag(Py_NoUserSiteDirectory);

  000e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_NoUserSiteDirectory
  000e6	e8 00 00 00 00	 call	 PyLong_FromLong
  000eb	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  000f0	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  000f5	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  000fa	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  000fe	ff c0		 inc	 eax
  00100	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1396 :     SetFlag(Py_NoSiteFlag);

  00104	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_NoSiteFlag
  0010a	e8 00 00 00 00	 call	 PyLong_FromLong
  0010f	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  00114	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  00119	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  0011e	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  00122	ff c0		 inc	 eax
  00124	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1397 :     SetFlag(Py_IgnoreEnvironmentFlag);

  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_IgnoreEnvironmentFlag
  0012e	e8 00 00 00 00	 call	 PyLong_FromLong
  00133	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  00138	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  0013d	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  00142	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  00146	ff c0		 inc	 eax
  00148	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1398 :     SetFlag(Py_VerboseFlag);

  0014c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_VerboseFlag
  00152	e8 00 00 00 00	 call	 PyLong_FromLong
  00157	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  0015c	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  00161	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  00166	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  0016a	ff c0		 inc	 eax
  0016c	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1399 : #ifdef RISCOS
; 1400 :     SetFlag(Py_RISCOSWimpFlag);
; 1401 : #endif
; 1402 :     /* SetFlag(saw_unbuffered_flag); */
; 1403 :     /* SetFlag(skipfirstline); */
; 1404 :     SetFlag(Py_BytesWarningFlag);

  00170	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_BytesWarningFlag
  00176	e8 00 00 00 00	 call	 PyLong_FromLong
  0017b	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  00180	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  00185	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  0018a	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  0018e	ff c0		 inc	 eax
  00190	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1405 :     SetFlag(Py_QuietFlag);

  00194	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_QuietFlag
  0019a	e8 00 00 00 00	 call	 PyLong_FromLong
  0019f	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  001a4	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  001a9	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  001ae	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  001b2	ff c0		 inc	 eax
  001b4	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1406 :     SetFlag(Py_HashRandomizationFlag);

  001b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_HashRandomizationFlag
  001be	e8 00 00 00 00	 call	 PyLong_FromLong
  001c3	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR pos$[rsp]
  001c8	48 8b 54 24 20	 mov	 rdx, QWORD PTR seq$[rsp]
  001cd	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  001d2	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  001d6	ff c0		 inc	 eax
  001d8	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax

; 1407 : #undef SetFlag
; 1408 : 
; 1409 :     if (PyErr_Occurred()) {

  001dc	e8 00 00 00 00	 call	 PyErr_Occurred
  001e1	48 85 c0	 test	 rax, rax
  001e4	74 0e		 je	 SHORT $LN1@make_flags

; 1410 :         Py_DECREF(seq);

  001e6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR seq$[rsp]
  001eb	e8 00 00 00 00	 call	 _Py_DecRef

; 1411 :         return NULL;

  001f0	33 c0		 xor	 eax, eax
  001f2	eb 05		 jmp	 SHORT $LN3@make_flags
$LN1@make_flags:

; 1412 :     }
; 1413 :     return seq;

  001f4	48 8b 44 24 20	 mov	 rax, QWORD PTR seq$[rsp]
$LN3@make_flags:

; 1414 : }

  001f9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001fd	c3		 ret	 0
make_flags ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@DEBFLJBB@make_version_info?$AA@	; `string'
PUBLIC	??_C@_05FPBGKCKL@final?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_version_info DD imagerel make_version_info
	DD	imagerel make_version_info+337
	DD	imagerel $unwind$make_version_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_version_info DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_0BC@DEBFLJBB@make_version_info?$AA@
CONST	SEGMENT
??_C@_0BC@DEBFLJBB@make_version_info?$AA@ DB 'make_version_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FPBGKCKL@final?$AA@
CONST	SEGMENT
??_C@_05FPBGKCKL@final?$AA@ DB 'final', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT make_version_info
_TEXT	SEGMENT
s$ = 48
pos$ = 56
version_info$ = 64
_py_tmp$64590 = 72
make_version_info PROC					; COMDAT

; 1441 : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1442 :     PyObject *version_info;
; 1443 :     char *s;
; 1444 :     int pos = 0;

  00004	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR pos$[rsp], 0

; 1445 : 
; 1446 :     version_info = PyStructSequence_New(&VersionInfoType);

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:VersionInfoType
  00013	e8 00 00 00 00	 call	 PyStructSequence_New
  00018	48 89 44 24 40	 mov	 QWORD PTR version_info$[rsp], rax

; 1447 :     if (version_info == NULL) {

  0001d	48 83 7c 24 40
	00		 cmp	 QWORD PTR version_info$[rsp], 0
  00023	75 07		 jne	 SHORT $LN6@make_versi

; 1448 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	e9 20 01 00 00	 jmp	 $LN7@make_versi
$LN6@make_versi:

; 1449 :     }
; 1450 : 
; 1451 :     /*
; 1452 :      * These release level checks are mutually exclusive and cover
; 1453 :      * the field, so don't get too fancy with the pre-processor!
; 1454 :      */
; 1455 : #if PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_ALPHA
; 1456 :     s = "alpha";
; 1457 : #elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_BETA
; 1458 :     s = "beta";
; 1459 : #elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_GAMMA
; 1460 :     s = "candidate";
; 1461 : #elif PY_RELEASE_LEVEL == PY_RELEASE_LEVEL_FINAL
; 1462 :     s = "final";

  0002c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05FPBGKCKL@final?$AA@
  00033	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 1463 : #endif
; 1464 : 
; 1465 : #define SetIntItem(flag) \
; 1466 :     PyStructSequence_SET_ITEM(version_info, pos++, PyLong_FromLong(flag))
; 1467 : #define SetStrItem(flag) \
; 1468 :     PyStructSequence_SET_ITEM(version_info, pos++, PyUnicode_FromString(flag))
; 1469 : 
; 1470 :     SetIntItem(PY_MAJOR_VERSION);

  00038	b9 03 00 00 00	 mov	 ecx, 3
  0003d	e8 00 00 00 00	 call	 PyLong_FromLong
  00042	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR pos$[rsp]
  00047	48 8b 54 24 40	 mov	 rdx, QWORD PTR version_info$[rsp]
  0004c	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  00051	8b 44 24 38	 mov	 eax, DWORD PTR pos$[rsp]
  00055	ff c0		 inc	 eax
  00057	89 44 24 38	 mov	 DWORD PTR pos$[rsp], eax

; 1471 :     SetIntItem(PY_MINOR_VERSION);

  0005b	b9 03 00 00 00	 mov	 ecx, 3
  00060	e8 00 00 00 00	 call	 PyLong_FromLong
  00065	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR pos$[rsp]
  0006a	48 8b 54 24 40	 mov	 rdx, QWORD PTR version_info$[rsp]
  0006f	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  00074	8b 44 24 38	 mov	 eax, DWORD PTR pos$[rsp]
  00078	ff c0		 inc	 eax
  0007a	89 44 24 38	 mov	 DWORD PTR pos$[rsp], eax

; 1472 :     SetIntItem(PY_MICRO_VERSION);

  0007e	b9 05 00 00 00	 mov	 ecx, 5
  00083	e8 00 00 00 00	 call	 PyLong_FromLong
  00088	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR pos$[rsp]
  0008d	48 8b 54 24 40	 mov	 rdx, QWORD PTR version_info$[rsp]
  00092	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  00097	8b 44 24 38	 mov	 eax, DWORD PTR pos$[rsp]
  0009b	ff c0		 inc	 eax
  0009d	89 44 24 38	 mov	 DWORD PTR pos$[rsp], eax

; 1473 :     SetStrItem(s);

  000a1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000a6	e8 00 00 00 00	 call	 PyUnicode_FromString
  000ab	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR pos$[rsp]
  000b0	48 8b 54 24 40	 mov	 rdx, QWORD PTR version_info$[rsp]
  000b5	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  000ba	8b 44 24 38	 mov	 eax, DWORD PTR pos$[rsp]
  000be	ff c0		 inc	 eax
  000c0	89 44 24 38	 mov	 DWORD PTR pos$[rsp], eax

; 1474 :     SetIntItem(PY_RELEASE_SERIAL);

  000c4	33 c9		 xor	 ecx, ecx
  000c6	e8 00 00 00 00	 call	 PyLong_FromLong
  000cb	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR pos$[rsp]
  000d0	48 8b 54 24 40	 mov	 rdx, QWORD PTR version_info$[rsp]
  000d5	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax
  000da	8b 44 24 38	 mov	 eax, DWORD PTR pos$[rsp]
  000de	ff c0		 inc	 eax
  000e0	89 44 24 38	 mov	 DWORD PTR pos$[rsp], eax

; 1475 : #undef SetIntItem
; 1476 : #undef SetStrItem
; 1477 : 
; 1478 :     if (PyErr_Occurred()) {

  000e4	e8 00 00 00 00	 call	 PyErr_Occurred
  000e9	48 85 c0	 test	 rax, rax
  000ec	74 59		 je	 SHORT $LN5@make_versi
$LN4@make_versi:

; 1479 :         Py_CLEAR(version_info);

  000ee	48 83 7c 24 40
	00		 cmp	 QWORD PTR version_info$[rsp], 0
  000f4	74 47		 je	 SHORT $LN1@make_versi
  000f6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000fe	4c 8b 4c 24 40	 mov	 r9, QWORD PTR version_info$[rsp]
  00103	41 b8 c7 05 00
	00		 mov	 r8d, 1479		; 000005c7H
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@DEBFLJBB@make_version_info?$AA@
  00117	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011c	85 c0		 test	 eax, eax
  0011e	75 1d		 jne	 SHORT $LN1@make_versi
  00120	48 8b 44 24 40	 mov	 rax, QWORD PTR version_info$[rsp]
  00125	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$64590[rsp], rax
  0012a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR version_info$[rsp], 0
  00133	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$64590[rsp]
  00138	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@make_versi:
  0013d	33 c0		 xor	 eax, eax
  0013f	85 c0		 test	 eax, eax
  00141	75 ab		 jne	 SHORT $LN4@make_versi

; 1480 :         return NULL;

  00143	33 c0		 xor	 eax, eax
  00145	eb 05		 jmp	 SHORT $LN7@make_versi
$LN5@make_versi:

; 1481 :     }
; 1482 :     return version_info;

  00147	48 8b 44 24 40	 mov	 rax, QWORD PTR version_info$[rsp]
$LN7@make_versi:

; 1483 : }

  0014c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00150	c3		 ret	 0
make_version_info ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@EJOHODDD@make_impl_info?$AA@		; `string'
PUBLIC	??_C@_09OOAOLFII@cache_tag?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
EXTRN	_PyNamespace_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_impl_info DD imagerel make_impl_info
	DD	imagerel make_impl_info+419
	DD	imagerel $unwind$make_impl_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_impl_info DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0P@EJOHODDD@make_impl_info?$AA@
CONST	SEGMENT
??_C@_0P@EJOHODDD@make_impl_info?$AA@ DB 'make_impl_info', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OOAOLFII@cache_tag?$AA@
CONST	SEGMENT
??_C@_09OOAOLFII@cache_tag?$AA@ DB 'cache_tag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT make_impl_info
_TEXT	SEGMENT
ns$ = 48
value$ = 56
res$ = 64
impl_info$ = 72
_py_tmp$64640 = 80
version_info$ = 112
make_impl_info PROC					; COMDAT

; 1503 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1504 :     int res;
; 1505 :     PyObject *impl_info, *value, *ns;
; 1506 : 
; 1507 :     impl_info = PyDict_New();

  00009	e8 00 00 00 00	 call	 PyDict_New
  0000e	48 89 44 24 48	 mov	 QWORD PTR impl_info$[rsp], rax

; 1508 :     if (impl_info == NULL)

  00013	48 83 7c 24 48
	00		 cmp	 QWORD PTR impl_info$[rsp], 0
  00019	75 07		 jne	 SHORT $LN12@make_impl_

; 1509 :         return NULL;

  0001b	33 c0		 xor	 eax, eax
  0001d	e9 7c 01 00 00	 jmp	 $LN13@make_impl_
$LN12@make_impl_:

; 1510 : 
; 1511 :     /* populate the dict */
; 1512 : 
; 1513 :     value = PyUnicode_FromString(_PySys_ImplName);

  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PySys_ImplName
  00029	e8 00 00 00 00	 call	 PyUnicode_FromString
  0002e	48 89 44 24 38	 mov	 QWORD PTR value$[rsp], rax

; 1514 :     if (value == NULL)

  00033	48 83 7c 24 38
	00		 cmp	 QWORD PTR value$[rsp], 0
  00039	75 05		 jne	 SHORT $LN11@make_impl_

; 1515 :         goto error;

  0003b	e9 07 01 00 00	 jmp	 $error$64618
$LN11@make_impl_:

; 1516 :     res = PyDict_SetItemString(impl_info, "name", value);

  00040	4c 8b 44 24 38	 mov	 r8, QWORD PTR value$[rsp]
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MEMAJGDJ@name?$AA@
  0004c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR impl_info$[rsp]
  00051	e8 00 00 00 00	 call	 PyDict_SetItemString
  00056	89 44 24 40	 mov	 DWORD PTR res$[rsp], eax

; 1517 :     Py_DECREF(value);

  0005a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR value$[rsp]
  0005f	e8 00 00 00 00	 call	 _Py_DecRef

; 1518 :     if (res < 0)

  00064	83 7c 24 40 00	 cmp	 DWORD PTR res$[rsp], 0
  00069	7d 05		 jge	 SHORT $LN10@make_impl_

; 1519 :         goto error;

  0006b	e9 d7 00 00 00	 jmp	 $error$64618
$LN10@make_impl_:

; 1520 : 
; 1521 :     value = PyUnicode_FromString(_PySys_ImplCacheTag);

  00070	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PySys_ImplCacheTag
  00077	e8 00 00 00 00	 call	 PyUnicode_FromString
  0007c	48 89 44 24 38	 mov	 QWORD PTR value$[rsp], rax

; 1522 :     if (value == NULL)

  00081	48 83 7c 24 38
	00		 cmp	 QWORD PTR value$[rsp], 0
  00087	75 05		 jne	 SHORT $LN9@make_impl_

; 1523 :         goto error;

  00089	e9 b9 00 00 00	 jmp	 $error$64618
$LN9@make_impl_:

; 1524 :     res = PyDict_SetItemString(impl_info, "cache_tag", value);

  0008e	4c 8b 44 24 38	 mov	 r8, QWORD PTR value$[rsp]
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09OOAOLFII@cache_tag?$AA@
  0009a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR impl_info$[rsp]
  0009f	e8 00 00 00 00	 call	 PyDict_SetItemString
  000a4	89 44 24 40	 mov	 DWORD PTR res$[rsp], eax

; 1525 :     Py_DECREF(value);

  000a8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR value$[rsp]
  000ad	e8 00 00 00 00	 call	 _Py_DecRef

; 1526 :     if (res < 0)

  000b2	83 7c 24 40 00	 cmp	 DWORD PTR res$[rsp], 0
  000b7	7d 05		 jge	 SHORT $LN8@make_impl_

; 1527 :         goto error;

  000b9	e9 89 00 00 00	 jmp	 $error$64618
$LN8@make_impl_:

; 1528 : 
; 1529 :     res = PyDict_SetItemString(impl_info, "version", version_info);

  000be	4c 8b 44 24 70	 mov	 r8, QWORD PTR version_info$[rsp]
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CPCPJPKL@version?$AA@
  000ca	48 8b 4c 24 48	 mov	 rcx, QWORD PTR impl_info$[rsp]
  000cf	e8 00 00 00 00	 call	 PyDict_SetItemString
  000d4	89 44 24 40	 mov	 DWORD PTR res$[rsp], eax

; 1530 :     if (res < 0)

  000d8	83 7c 24 40 00	 cmp	 DWORD PTR res$[rsp], 0
  000dd	7d 02		 jge	 SHORT $LN7@make_impl_

; 1531 :         goto error;

  000df	eb 66		 jmp	 SHORT $error$64618
$LN7@make_impl_:

; 1532 : 
; 1533 :     value = PyLong_FromLong(PY_VERSION_HEX);

  000e1	b9 f0 05 03 03	 mov	 ecx, 50529776		; 030305f0H
  000e6	e8 00 00 00 00	 call	 PyLong_FromLong
  000eb	48 89 44 24 38	 mov	 QWORD PTR value$[rsp], rax

; 1534 :     if (value == NULL)

  000f0	48 83 7c 24 38
	00		 cmp	 QWORD PTR value$[rsp], 0
  000f6	75 02		 jne	 SHORT $LN6@make_impl_

; 1535 :         goto error;

  000f8	eb 4d		 jmp	 SHORT $error$64618
$LN6@make_impl_:

; 1536 :     res = PyDict_SetItemString(impl_info, "hexversion", value);

  000fa	4c 8b 44 24 38	 mov	 r8, QWORD PTR value$[rsp]
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LHCICIKK@hexversion?$AA@
  00106	48 8b 4c 24 48	 mov	 rcx, QWORD PTR impl_info$[rsp]
  0010b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00110	89 44 24 40	 mov	 DWORD PTR res$[rsp], eax

; 1537 :     Py_DECREF(value);

  00114	48 8b 4c 24 38	 mov	 rcx, QWORD PTR value$[rsp]
  00119	e8 00 00 00 00	 call	 _Py_DecRef

; 1538 :     if (res < 0)

  0011e	83 7c 24 40 00	 cmp	 DWORD PTR res$[rsp], 0
  00123	7d 02		 jge	 SHORT $LN5@make_impl_

; 1539 :         goto error;

  00125	eb 20		 jmp	 SHORT $error$64618
$LN5@make_impl_:

; 1540 : 
; 1541 :     /* dict ready */
; 1542 : 
; 1543 :     ns = _PyNamespace_New(impl_info);

  00127	48 8b 4c 24 48	 mov	 rcx, QWORD PTR impl_info$[rsp]
  0012c	e8 00 00 00 00	 call	 _PyNamespace_New
  00131	48 89 44 24 30	 mov	 QWORD PTR ns$[rsp], rax

; 1544 :     Py_DECREF(impl_info);

  00136	48 8b 4c 24 48	 mov	 rcx, QWORD PTR impl_info$[rsp]
  0013b	e8 00 00 00 00	 call	 _Py_DecRef

; 1545 :     return ns;

  00140	48 8b 44 24 30	 mov	 rax, QWORD PTR ns$[rsp]
  00145	eb 57		 jmp	 SHORT $LN13@make_impl_
$error$64618:
$LN4@make_impl_:

; 1546 : 
; 1547 : error:
; 1548 :     Py_CLEAR(impl_info);

  00147	48 83 7c 24 48
	00		 cmp	 QWORD PTR impl_info$[rsp], 0
  0014d	74 47		 je	 SHORT $LN1@make_impl_
  0014f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00157	4c 8b 4c 24 48	 mov	 r9, QWORD PTR impl_info$[rsp]
  0015c	41 b8 0c 06 00
	00		 mov	 r8d, 1548		; 0000060cH
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@MBPGCCDI@?4?4?2Python?2sysmodule?4c?$AA@
  00169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EJOHODDD@make_impl_info?$AA@
  00170	e8 00 00 00 00	 call	 _PyParallel_Guard
  00175	85 c0		 test	 eax, eax
  00177	75 1d		 jne	 SHORT $LN1@make_impl_
  00179	48 8b 44 24 48	 mov	 rax, QWORD PTR impl_info$[rsp]
  0017e	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$64640[rsp], rax
  00183	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR impl_info$[rsp], 0
  0018c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$64640[rsp]
  00191	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@make_impl_:
  00196	33 c0		 xor	 eax, eax
  00198	85 c0		 test	 eax, eax
  0019a	75 ab		 jne	 SHORT $LN4@make_impl_

; 1549 :     return NULL;

  0019c	33 c0		 xor	 eax, eax
$LN13@make_impl_:

; 1550 : }

  0019e	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001a2	c3		 ret	 0
make_impl_info ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@PGHPNFCO@can?8t?5assign?5sys?4path?$AA@ ; `string'
PUBLIC	??_C@_04LNEJFJGI@path?$AA@			; `string'
PUBLIC	??_C@_0BG@FEPADHFK@can?8t?5create?5sys?4path?$AA@ ; `string'
PUBLIC	PySys_SetPath
EXTRN	Py_FatalError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_SetPath DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$PySys_SetPath
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_SetPath DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BG@PGHPNFCO@can?8t?5assign?5sys?4path?$AA@
CONST	SEGMENT
??_C@_0BG@PGHPNFCO@can?8t?5assign?5sys?4path?$AA@ DB 'can''t assign sys.p'
	DB	'ath', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNEJFJGI@path?$AA@
CONST	SEGMENT
??_C@_04LNEJFJGI@path?$AA@ DB 'path', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FEPADHFK@can?8t?5create?5sys?4path?$AA@
CONST	SEGMENT
??_C@_0BG@FEPADHFK@can?8t?5create?5sys?4path?$AA@ DB 'can''t create sys.p'
	DB	'ath', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PySys_SetPath
_TEXT	SEGMENT
v$ = 32
path$ = 64
PySys_SetPath PROC					; COMDAT

; 1768 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1769 :     PyObject *v;
; 1770 :     if ((v = makepathobject(path, DELIM)) == NULL)

  00009	66 ba 3b 00	 mov	 dx, 59			; 0000003bH
  0000d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR path$[rsp]
  00012	e8 00 00 00 00	 call	 makepathobject
  00017	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  0001c	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00022	75 0c		 jne	 SHORT $LN2@PySys_SetP

; 1771 :         Py_FatalError("can't create sys.path");

  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@FEPADHFK@can?8t?5create?5sys?4path?$AA@
  0002b	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PySys_SetP:

; 1772 :     if (PySys_SetObject("path", v) != 0)

  00030	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LNEJFJGI@path?$AA@
  0003c	e8 00 00 00 00	 call	 PySys_SetObject
  00041	85 c0		 test	 eax, eax
  00043	74 0c		 je	 SHORT $LN1@PySys_SetP

; 1773 :         Py_FatalError("can't assign sys.path");

  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@PGHPNFCO@can?8t?5assign?5sys?4path?$AA@
  0004c	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PySys_SetP:

; 1774 :     Py_DECREF(v);

  00051	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00056	e8 00 00 00 00	 call	 _Py_DecRef

; 1775 : }

  0005b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005f	c3		 ret	 0
PySys_SetPath ENDP
_TEXT	ENDS
EXTRN	PyList_SetItem:PROC
EXTRN	__imp_wcslen:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$makepathobject DD imagerel makepathobject
	DD	imagerel makepathobject+319
	DD	imagerel $unwind$makepathobject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$makepathobject DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT makepathobject
_TEXT	SEGMENT
w$ = 32
p$ = 40
v$ = 48
n$ = 56
i$ = 60
path$ = 80
delim$ = 88
makepathobject PROC					; COMDAT

; 1735 : {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1736 :     int i, n;
; 1737 :     const wchar_t *p;
; 1738 :     PyObject *v, *w;
; 1739 : 
; 1740 :     n = 1;

  0000e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR n$[rsp], 1

; 1741 :     p = path;

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR path$[rsp]
  0001b	48 89 44 24 28	 mov	 QWORD PTR p$[rsp], rax
$LN9@makepathob:

; 1742 :     while ((p = wcschr(p, delim)) != NULL) {

  00020	0f b7 54 24 58	 movzx	 edx, WORD PTR delim$[rsp]
  00025	48 8b 4c 24 28	 mov	 rcx, QWORD PTR p$[rsp]
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcschr
  00030	48 89 44 24 28	 mov	 QWORD PTR p$[rsp], rax
  00035	48 83 7c 24 28
	00		 cmp	 QWORD PTR p$[rsp], 0
  0003b	74 1a		 je	 SHORT $LN8@makepathob

; 1743 :         n++;

  0003d	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  00041	ff c0		 inc	 eax
  00043	89 44 24 38	 mov	 DWORD PTR n$[rsp], eax

; 1744 :         p++;

  00047	48 8b 44 24 28	 mov	 rax, QWORD PTR p$[rsp]
  0004c	48 83 c0 02	 add	 rax, 2
  00050	48 89 44 24 28	 mov	 QWORD PTR p$[rsp], rax

; 1745 :     }

  00055	eb c9		 jmp	 SHORT $LN9@makepathob
$LN8@makepathob:

; 1746 :     v = PyList_New(n);

  00057	48 63 44 24 38	 movsxd	 rax, DWORD PTR n$[rsp]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 PyList_New
  00064	48 89 44 24 30	 mov	 QWORD PTR v$[rsp], rax

; 1747 :     if (v == NULL)

  00069	48 83 7c 24 30
	00		 cmp	 QWORD PTR v$[rsp], 0
  0006f	75 07		 jne	 SHORT $LN7@makepathob

; 1748 :         return NULL;

  00071	33 c0		 xor	 eax, eax
  00073	e9 c2 00 00 00	 jmp	 $LN10@makepathob
$LN7@makepathob:

; 1749 :     for (i = 0; ; i++) {

  00078	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00080	eb 0a		 jmp	 SHORT $LN6@makepathob
$LN5@makepathob:
  00082	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  00086	ff c0		 inc	 eax
  00088	89 44 24 3c	 mov	 DWORD PTR i$[rsp], eax
$LN6@makepathob:

; 1750 :         p = wcschr(path, delim);

  0008c	0f b7 54 24 58	 movzx	 edx, WORD PTR delim$[rsp]
  00091	48 8b 4c 24 50	 mov	 rcx, QWORD PTR path$[rsp]
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcschr
  0009c	48 89 44 24 28	 mov	 QWORD PTR p$[rsp], rax

; 1751 :         if (p == NULL)

  000a1	48 83 7c 24 28
	00		 cmp	 QWORD PTR p$[rsp], 0
  000a7	75 19		 jne	 SHORT $LN3@makepathob

; 1752 :             p = path + wcslen(path); /* End of string */

  000a9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR path$[rsp]
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR path$[rsp]
  000b9	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  000bd	48 89 44 24 28	 mov	 QWORD PTR p$[rsp], rax
$LN3@makepathob:

; 1753 :         w = PyUnicode_FromWideChar(path, (Py_ssize_t)(p - path));

  000c2	48 8b 44 24 50	 mov	 rax, QWORD PTR path$[rsp]
  000c7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR p$[rsp]
  000cc	48 2b c8	 sub	 rcx, rax
  000cf	48 8b c1	 mov	 rax, rcx
  000d2	48 d1 f8	 sar	 rax, 1
  000d5	48 8b d0	 mov	 rdx, rax
  000d8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR path$[rsp]
  000dd	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  000e2	48 89 44 24 20	 mov	 QWORD PTR w$[rsp], rax

; 1754 :         if (w == NULL) {

  000e7	48 83 7c 24 20
	00		 cmp	 QWORD PTR w$[rsp], 0
  000ed	75 0e		 jne	 SHORT $LN2@makepathob

; 1755 :             Py_DECREF(v);

  000ef	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  000f4	e8 00 00 00 00	 call	 _Py_DecRef

; 1756 :             return NULL;

  000f9	33 c0		 xor	 eax, eax
  000fb	eb 3d		 jmp	 SHORT $LN10@makepathob
$LN2@makepathob:

; 1757 :         }
; 1758 :         PyList_SetItem(v, i, w);

  000fd	48 63 44 24 3c	 movsxd	 rax, DWORD PTR i$[rsp]
  00102	4c 8b 44 24 20	 mov	 r8, QWORD PTR w$[rsp]
  00107	48 8b d0	 mov	 rdx, rax
  0010a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  0010f	e8 00 00 00 00	 call	 PyList_SetItem

; 1759 :         if (*p == '\0')

  00114	48 8b 44 24 28	 mov	 rax, QWORD PTR p$[rsp]
  00119	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0011c	85 c0		 test	 eax, eax
  0011e	75 02		 jne	 SHORT $LN1@makepathob

; 1760 :             break;

  00120	eb 13		 jmp	 SHORT $LN4@makepathob
$LN1@makepathob:

; 1761 :         path = p+1;

  00122	48 8b 44 24 28	 mov	 rax, QWORD PTR p$[rsp]
  00127	48 83 c0 02	 add	 rax, 2
  0012b	48 89 44 24 50	 mov	 QWORD PTR path$[rsp], rax

; 1762 :     }

  00130	e9 4d ff ff ff	 jmp	 $LN5@makepathob
$LN4@makepathob:

; 1763 :     return v;

  00135	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
$LN10@makepathob:

; 1764 : }

  0013a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013e	c3		 ret	 0
makepathobject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@CDHCLBJL@can?8t?5assign?5sys?4argv?$AA@ ; `string'
PUBLIC	??_C@_04GIEEDNNN@argv?$AA@			; `string'
PUBLIC	??_C@_0BE@DENJHAAM@no?5mem?5for?5sys?4argv?$AA@	; `string'
PUBLIC	PySys_SetArgvEx
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_SetArgvEx DD imagerel $LN6
	DD	imagerel $LN6+126
	DD	imagerel $unwind$PySys_SetArgvEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_SetArgvEx DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT ??_C@_0BG@CDHCLBJL@can?8t?5assign?5sys?4argv?$AA@
CONST	SEGMENT
??_C@_0BG@CDHCLBJL@can?8t?5assign?5sys?4argv?$AA@ DB 'can''t assign sys.a'
	DB	'rgv', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIEEDNNN@argv?$AA@
CONST	SEGMENT
??_C@_04GIEEDNNN@argv?$AA@ DB 'argv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DENJHAAM@no?5mem?5for?5sys?4argv?$AA@
CONST	SEGMENT
??_C@_0BE@DENJHAAM@no?5mem?5for?5sys?4argv?$AA@ DB 'no mem for sys.argv', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PySys_SetArgvEx
_TEXT	SEGMENT
av$ = 32
argc$ = 64
argv$ = 72
updatepath$ = 80
PySys_SetArgvEx PROC					; COMDAT

; 1926 : {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1927 :     PyObject *av = makeargvobject(argc, argv);

  00012	48 8b 54 24 48	 mov	 rdx, QWORD PTR argv$[rsp]
  00017	8b 4c 24 40	 mov	 ecx, DWORD PTR argc$[rsp]
  0001b	e8 00 00 00 00	 call	 makeargvobject
  00020	48 89 44 24 20	 mov	 QWORD PTR av$[rsp], rax

; 1928 :     if (av == NULL)

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR av$[rsp], 0
  0002b	75 0c		 jne	 SHORT $LN3@PySys_SetA

; 1929 :         Py_FatalError("no mem for sys.argv");

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DENJHAAM@no?5mem?5for?5sys?4argv?$AA@
  00034	e8 00 00 00 00	 call	 Py_FatalError
$LN3@PySys_SetA:

; 1930 :     if (PySys_SetObject("argv", av) != 0)

  00039	48 8b 54 24 20	 mov	 rdx, QWORD PTR av$[rsp]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GIEEDNNN@argv?$AA@
  00045	e8 00 00 00 00	 call	 PySys_SetObject
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN2@PySys_SetA

; 1931 :         Py_FatalError("can't assign sys.argv");

  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@CDHCLBJL@can?8t?5assign?5sys?4argv?$AA@
  00055	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PySys_SetA:

; 1932 :     Py_DECREF(av);

  0005a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR av$[rsp]
  0005f	e8 00 00 00 00	 call	 _Py_DecRef

; 1933 :     if (updatepath)

  00064	83 7c 24 50 00	 cmp	 DWORD PTR updatepath$[rsp], 0
  00069	74 0e		 je	 SHORT $LN1@PySys_SetA

; 1934 :         sys_update_path(argc, argv);

  0006b	48 8b 54 24 48	 mov	 rdx, QWORD PTR argv$[rsp]
  00070	8b 4c 24 40	 mov	 ecx, DWORD PTR argc$[rsp]
  00074	e8 00 00 00 00	 call	 sys_update_path
$LN1@PySys_SetA:

; 1935 : }

  00079	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007d	c3		 ret	 0
PySys_SetArgvEx ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$makeargvobject DD imagerel makeargvobject
	DD	imagerel makeargvobject+199
	DD	imagerel $unwind$makeargvobject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$makeargvobject DD 010d01H
	DD	0820dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT makeargvobject
_TEXT	SEGMENT
av$ = 32
i$64972 = 40
v$64976 = 48
argc$ = 80
argv$ = 88
makeargvobject PROC					; COMDAT

; 1779 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1780 :     PyObject *av;
; 1781 :     if (argc <= 0 || argv == NULL) {

  0000d	83 7c 24 50 00	 cmp	 DWORD PTR argc$[rsp], 0
  00012	7e 08		 jle	 SHORT $LN6@makeargvob
  00014	48 83 7c 24 58
	00		 cmp	 QWORD PTR argv$[rsp], 0
  0001a	75 14		 jne	 SHORT $LN7@makeargvob
$LN6@makeargvob:

; 1782 :         /* Ensure at least one (empty) argument is seen */
; 1783 :         static wchar_t *empty_argv[1] = {L""};
; 1784 :         argv = empty_argv;

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?empty_argv@?2??makeargvobject@@9@9
  00023	48 89 44 24 58	 mov	 QWORD PTR argv$[rsp], rax

; 1785 :         argc = 1;

  00028	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR argc$[rsp], 1
$LN7@makeargvob:

; 1786 :     }
; 1787 :     av = PyList_New(argc);

  00030	48 63 44 24 50	 movsxd	 rax, DWORD PTR argc$[rsp]
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 PyList_New
  0003d	48 89 44 24 20	 mov	 QWORD PTR av$[rsp], rax

; 1788 :     if (av != NULL) {

  00042	48 83 7c 24 20
	00		 cmp	 QWORD PTR av$[rsp], 0
  00048	74 73		 je	 SHORT $LN5@makeargvob

; 1789 :         int i;
; 1790 :         for (i = 0; i < argc; i++) {

  0004a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$64972[rsp], 0
  00052	eb 0a		 jmp	 SHORT $LN4@makeargvob
$LN3@makeargvob:
  00054	8b 44 24 28	 mov	 eax, DWORD PTR i$64972[rsp]
  00058	ff c0		 inc	 eax
  0005a	89 44 24 28	 mov	 DWORD PTR i$64972[rsp], eax
$LN4@makeargvob:
  0005e	8b 44 24 50	 mov	 eax, DWORD PTR argc$[rsp]
  00062	39 44 24 28	 cmp	 DWORD PTR i$64972[rsp], eax
  00066	7d 55		 jge	 SHORT $LN2@makeargvob

; 1791 : #ifdef __VMS
; 1792 :             PyObject *v;
; 1793 : 
; 1794 :             /* argv[0] is the script pathname if known */
; 1795 :             if (i == 0) {
; 1796 :                 char* fn = decc$translate_vms(argv[0]);
; 1797 :                 if ((fn == (char *)0) || fn == (char *)-1)
; 1798 :                     v = PyUnicode_FromString(argv[0]);
; 1799 :                 else
; 1800 :                     v = PyUnicode_FromString(
; 1801 :                         decc$translate_vms(argv[0]));
; 1802 :             } else
; 1803 :                 v = PyUnicode_FromString(argv[i]);
; 1804 : #else
; 1805 :             PyObject *v = PyUnicode_FromWideChar(argv[i], -1);

  00068	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$64972[rsp]
  0006d	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00074	48 8b 4c 24 58	 mov	 rcx, QWORD PTR argv$[rsp]
  00079	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0007d	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  00082	48 89 44 24 30	 mov	 QWORD PTR v$64976[rsp], rax

; 1806 : #endif
; 1807 :             if (v == NULL) {

  00087	48 83 7c 24 30
	00		 cmp	 QWORD PTR v$64976[rsp], 0
  0008d	75 15		 jne	 SHORT $LN1@makeargvob

; 1808 :                 Py_DECREF(av);

  0008f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR av$[rsp]
  00094	e8 00 00 00 00	 call	 _Py_DecRef

; 1809 :                 av = NULL;

  00099	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR av$[rsp], 0

; 1810 :                 break;

  000a2	eb 19		 jmp	 SHORT $LN2@makeargvob
$LN1@makeargvob:

; 1811 :             }
; 1812 :             PyList_SetItem(av, i, v);

  000a4	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$64972[rsp]
  000a9	4c 8b 44 24 30	 mov	 r8, QWORD PTR v$64976[rsp]
  000ae	48 8b d0	 mov	 rdx, rax
  000b1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR av$[rsp]
  000b6	e8 00 00 00 00	 call	 PyList_SetItem

; 1813 :         }

  000bb	eb 97		 jmp	 SHORT $LN3@makeargvob
$LN2@makeargvob:
$LN5@makeargvob:

; 1814 :     }
; 1815 :     return av;

  000bd	48 8b 44 24 20	 mov	 rax, QWORD PTR av$[rsp]

; 1816 : }

  000c2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c6	c3		 ret	 0
makeargvobject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@NCOKNMEB@sys?4path?4insert?$CI0?$CJ?5failed?$AA@ ; `string'
PUBLIC	??_C@_0BO@NELCPBNJ@no?5mem?5for?5sys?4path?5insertion?$AA@ ; `string'
PUBLIC	??_C@_15DMEDGHGK@?$AA?9?$AAm?$AA?$AA@		; `string'
PUBLIC	??_C@_15NMJMBAFJ@?$AA?9?$AAc?$AA?$AA@		; `string'
EXTRN	PyList_Insert:PROC
EXTRN	__imp_wcsrchr:PROC
EXTRN	__imp_GetFullPathNameW:PROC
EXTRN	__imp_wcscmp:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_update_path DD imagerel sys_update_path
	DD	imagerel sys_update_path+472
	DD	imagerel $unwind$sys_update_path
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_update_path DD 021001H
	DD	04f0110H
xdata	ENDS
;	COMDAT ??_C@_0BK@NCOKNMEB@sys?4path?4insert?$CI0?$CJ?5failed?$AA@
CONST	SEGMENT
??_C@_0BK@NCOKNMEB@sys?4path?4insert?$CI0?$CJ?5failed?$AA@ DB 'sys.path.i'
	DB	'nsert(0) failed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NELCPBNJ@no?5mem?5for?5sys?4path?5insertion?$AA@
CONST	SEGMENT
??_C@_0BO@NELCPBNJ@no?5mem?5for?5sys?4path?5insertion?$AA@ DB 'no mem for'
	DB	' sys.path insertion', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_15DMEDGHGK@?$AA?9?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_15DMEDGHGK@?$AA?9?$AAm?$AA?$AA@ DB '-', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15NMJMBAFJ@?$AA?9?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_15NMJMBAFJ@?$AA?9?$AAc?$AA?$AA@ DB '-', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_update_path
_TEXT	SEGMENT
p$ = 32
a$ = 40
n$ = 48
argv0$ = 56
fullpath$ = 64
path$ = 592
ptemp$65002 = 600
q$65001 = 608
tv89 = 616
argc$ = 640
argv$ = 648
sys_update_path PROC					; COMDAT

; 1824 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H

; 1825 :     wchar_t *argv0;
; 1826 :     wchar_t *p = NULL;

  00010	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR p$[rsp], 0

; 1827 :     Py_ssize_t n = 0;

  00019	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR n$[rsp], 0

; 1828 :     PyObject *a;
; 1829 :     PyObject *path;
; 1830 : #ifdef HAVE_READLINK
; 1831 :     wchar_t link[MAXPATHLEN+1];
; 1832 :     wchar_t argv0copy[2*MAXPATHLEN+1];
; 1833 :     int nr = 0;
; 1834 : #endif
; 1835 : #if defined(HAVE_REALPATH)
; 1836 :     wchar_t fullpath[MAXPATHLEN];
; 1837 : #elif defined(MS_WINDOWS) && !defined(MS_WINCE)
; 1838 :     wchar_t fullpath[MAX_PATH];
; 1839 : #endif
; 1840 : 
; 1841 :     path = PySys_GetObject("path");

  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LNEJFJGI@path?$AA@
  00029	e8 00 00 00 00	 call	 PySys_GetObject
  0002e	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR path$[rsp], rax

; 1842 :     if (path == NULL)

  00036	48 83 bc 24 50
	02 00 00 00	 cmp	 QWORD PTR path$[rsp], 0
  0003f	75 05		 jne	 SHORT $LN8@sys_update

; 1843 :         return;

  00041	e9 8a 01 00 00	 jmp	 $LN9@sys_update
$LN8@sys_update:

; 1844 : 
; 1845 :     argv0 = argv[0];

  00046	48 8b 84 24 88
	02 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 89 44 24 38	 mov	 QWORD PTR argv0$[rsp], rax

; 1846 : 
; 1847 : #ifdef HAVE_READLINK
; 1848 :     if (_HAVE_SCRIPT_ARGUMENT(argc, argv))
; 1849 :         nr = _Py_wreadlink(argv0, link, MAXPATHLEN);
; 1850 :     if (nr > 0) {
; 1851 :         /* It's a symlink */
; 1852 :         link[nr] = '\0';
; 1853 :         if (link[0] == SEP)
; 1854 :             argv0 = link; /* Link to absolute path */
; 1855 :         else if (wcschr(link, SEP) == NULL)
; 1856 :             ; /* Link without path */
; 1857 :         else {
; 1858 :             /* Must join(dirname(argv0), link) */
; 1859 :             wchar_t *q = wcsrchr(argv0, SEP);
; 1860 :             if (q == NULL)
; 1861 :                 argv0 = link; /* argv0 without path */
; 1862 :             else {
; 1863 :                 /* Must make a copy, argv0copy has room for 2 * MAXPATHLEN */
; 1864 :                 wcsncpy(argv0copy, argv0, MAXPATHLEN);
; 1865 :                 q = wcsrchr(argv0copy, SEP);
; 1866 :                 wcsncpy(q+1, link, MAXPATHLEN);
; 1867 :                 q[MAXPATHLEN + 1] = L'\0';
; 1868 :                 argv0 = argv0copy;
; 1869 :             }
; 1870 :         }
; 1871 :     }
; 1872 : #endif /* HAVE_READLINK */
; 1873 : #if SEP == '\\' /* Special case for MS filename syntax */
; 1874 :     if (_HAVE_SCRIPT_ARGUMENT(argc, argv)) {

  00056	83 bc 24 80 02
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  0005e	0f 8e 16 01 00
	00		 jle	 $LN7@sys_update
  00064	48 83 7c 24 38
	00		 cmp	 QWORD PTR argv0$[rsp], 0
  0006a	0f 84 0a 01 00
	00		 je	 $LN7@sys_update
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_15NMJMBAFJ@?$AA?9?$AAc?$AA?$AA@
  00077	48 8b 4c 24 38	 mov	 rcx, QWORD PTR argv0$[rsp]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcscmp
  00082	85 c0		 test	 eax, eax
  00084	0f 84 f0 00 00
	00		 je	 $LN7@sys_update
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_15DMEDGHGK@?$AA?9?$AAm?$AA?$AA@
  00091	48 8b 4c 24 38	 mov	 rcx, QWORD PTR argv0$[rsp]
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcscmp
  0009c	85 c0		 test	 eax, eax
  0009e	0f 84 d6 00 00
	00		 je	 $LN7@sys_update

; 1875 :         wchar_t *q;
; 1876 : #if defined(MS_WINDOWS) && !defined(MS_WINCE)
; 1877 :         /* This code here replaces the first element in argv with the full
; 1878 :         path that it represents. Under CE, there are no relative paths so
; 1879 :         the argument must be the full path anyway. */
; 1880 :         wchar_t *ptemp;
; 1881 :         if (GetFullPathNameW(argv0,
; 1882 :                            Py_ARRAY_LENGTH(fullpath),
; 1883 :                            fullpath,
; 1884 :                            &ptemp)) {

  000a4	4c 8d 8c 24 58
	02 00 00	 lea	 r9, QWORD PTR ptemp$65002[rsp]
  000ac	4c 8d 44 24 40	 lea	 r8, QWORD PTR fullpath$[rsp]
  000b1	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  000b6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR argv0$[rsp]
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFullPathNameW
  000c1	85 c0		 test	 eax, eax
  000c3	74 0a		 je	 SHORT $LN6@sys_update

; 1885 :             argv0 = fullpath;

  000c5	48 8d 44 24 40	 lea	 rax, QWORD PTR fullpath$[rsp]
  000ca	48 89 44 24 38	 mov	 QWORD PTR argv0$[rsp], rax
$LN6@sys_update:

; 1886 :         }
; 1887 : #endif
; 1888 :         p = wcsrchr(argv0, SEP);

  000cf	66 ba 5c 00	 mov	 dx, 92			; 0000005cH
  000d3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR argv0$[rsp]
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcsrchr
  000de	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1889 :         /* Test for alternate separator */
; 1890 :         q = wcsrchr(p ? p : argv0, '/');

  000e3	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  000e9	74 0f		 je	 SHORT $LN11@sys_update
  000eb	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000f0	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv89[rsp], rax
  000f8	eb 0d		 jmp	 SHORT $LN12@sys_update
$LN11@sys_update:
  000fa	48 8b 44 24 38	 mov	 rax, QWORD PTR argv0$[rsp]
  000ff	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv89[rsp], rax
$LN12@sys_update:
  00107	66 ba 2f 00	 mov	 dx, 47			; 0000002fH
  0010b	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR tv89[rsp]
  00113	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcsrchr
  00119	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR q$65001[rsp], rax

; 1891 :         if (q != NULL)

  00121	48 83 bc 24 60
	02 00 00 00	 cmp	 QWORD PTR q$65001[rsp], 0
  0012a	74 0d		 je	 SHORT $LN5@sys_update

; 1892 :             p = q;

  0012c	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR q$65001[rsp]
  00134	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN5@sys_update:

; 1893 :         if (p != NULL) {

  00139	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0013f	74 39		 je	 SHORT $LN4@sys_update

; 1894 :             n = p + 1 - argv0;

  00141	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00146	48 83 c0 02	 add	 rax, 2
  0014a	48 2b 44 24 38	 sub	 rax, QWORD PTR argv0$[rsp]
  0014f	48 d1 f8	 sar	 rax, 1
  00152	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 1895 :             if (n > 1 && p[-1] != ':')

  00157	48 83 7c 24 30
	01		 cmp	 QWORD PTR n$[rsp], 1
  0015d	7e 1b		 jle	 SHORT $LN3@sys_update
  0015f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00164	0f b7 40 fe	 movzx	 eax, WORD PTR [rax-2]
  00168	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  0016b	74 0d		 je	 SHORT $LN3@sys_update

; 1896 :                 n--; /* Drop trailing separator */

  0016d	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00172	48 ff c8	 dec	 rax
  00175	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax
$LN3@sys_update:
$LN4@sys_update:
$LN7@sys_update:

; 1897 :         }
; 1898 :     }
; 1899 : #else /* All other filename syntaxes */
; 1900 :     if (_HAVE_SCRIPT_ARGUMENT(argc, argv)) {
; 1901 : #if defined(HAVE_REALPATH)
; 1902 :         if (_Py_wrealpath(argv0, fullpath, Py_ARRAY_LENGTH(fullpath))) {
; 1903 :             argv0 = fullpath;
; 1904 :         }
; 1905 : #endif
; 1906 :         p = wcsrchr(argv0, SEP);
; 1907 :     }
; 1908 :     if (p != NULL) {
; 1909 :         n = p + 1 - argv0;
; 1910 : #if SEP == '/' /* Special case for Unix filename syntax */
; 1911 :         if (n > 1)
; 1912 :             n--; /* Drop trailing separator */
; 1913 : #endif /* Unix */
; 1914 :     }
; 1915 : #endif /* All others */
; 1916 :     a = PyUnicode_FromWideChar(argv0, n);

  0017a	48 8b 54 24 30	 mov	 rdx, QWORD PTR n$[rsp]
  0017f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR argv0$[rsp]
  00184	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  00189	48 89 44 24 28	 mov	 QWORD PTR a$[rsp], rax

; 1917 :     if (a == NULL)

  0018e	48 83 7c 24 28
	00		 cmp	 QWORD PTR a$[rsp], 0
  00194	75 0c		 jne	 SHORT $LN2@sys_update

; 1918 :         Py_FatalError("no mem for sys.path insertion");

  00196	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@NELCPBNJ@no?5mem?5for?5sys?4path?5insertion?$AA@
  0019d	e8 00 00 00 00	 call	 Py_FatalError
$LN2@sys_update:

; 1919 :     if (PyList_Insert(path, 0, a) < 0)

  001a2	4c 8b 44 24 28	 mov	 r8, QWORD PTR a$[rsp]
  001a7	33 d2		 xor	 edx, edx
  001a9	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  001b1	e8 00 00 00 00	 call	 PyList_Insert
  001b6	85 c0		 test	 eax, eax
  001b8	7d 0c		 jge	 SHORT $LN1@sys_update

; 1920 :         Py_FatalError("sys.path.insert(0) failed");

  001ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@NCOKNMEB@sys?4path?4insert?$CI0?$CJ?5failed?$AA@
  001c1	e8 00 00 00 00	 call	 Py_FatalError
$LN1@sys_update:

; 1921 :     Py_DECREF(a);

  001c6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR a$[rsp]
  001cb	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@sys_update:

; 1922 : }

  001d0	48 81 c4 78 02
	00 00		 add	 rsp, 632		; 00000278H
  001d7	c3		 ret	 0
sys_update_path ENDP
_TEXT	ENDS
PUBLIC	PySys_SetArgv
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_SetArgv DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$PySys_SetArgv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_SetArgv DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_SetArgv
_TEXT	SEGMENT
argc$ = 48
argv$ = 56
PySys_SetArgv PROC					; COMDAT

; 1939 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1940 :     PySys_SetArgvEx(argc, argv, 1);

  0000d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00013	48 8b 54 24 38	 mov	 rdx, QWORD PTR argv$[rsp]
  00018	8b 4c 24 30	 mov	 ecx, DWORD PTR argc$[rsp]
  0001c	e8 00 00 00 00	 call	 PySys_SetArgvEx

; 1941 : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
PySys_SetArgv ENDP
_TEXT	ENDS
PUBLIC	PySys_WriteStdout
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_WriteStdout DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$PySys_WriteStdout
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_WriteStdout DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_WriteStdout
_TEXT	SEGMENT
va$ = 32
format$ = 64
PySys_WriteStdout PROC					; COMDAT

; 2052 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2053 :     va_list va;
; 2054 : 
; 2055 :     va_start(va, format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR format$[rsp+8]
  0001d	48 89 44 24 20	 mov	 QWORD PTR va$[rsp], rax

; 2056 :     sys_write("stdout", stdout, format, va);

  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00028	48 83 c0 30	 add	 rax, 48			; 00000030H
  0002c	4c 8b 4c 24 20	 mov	 r9, QWORD PTR va$[rsp]
  00031	4c 8b 44 24 40	 mov	 r8, QWORD PTR format$[rsp]
  00036	48 8b d0	 mov	 rdx, rax
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  00040	e8 00 00 00 00	 call	 sys_write

; 2057 :     va_end(va);

  00045	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR va$[rsp], 0

; 2058 : }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
PySys_WriteStdout ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@IJJDLOED@?4?4?4?5truncated?$AA@	; `string'
EXTRN	PyErr_Restore:PROC
EXTRN	__imp_fputs:PROC
EXTRN	PyOS_vsnprintf:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_write DD imagerel sys_write
	DD	imagerel sys_write+250
	DD	imagerel $unwind$sys_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_write DD 021b01H
	DD	08b011bH
xdata	ENDS
;	COMDAT ??_C@_0O@IJJDLOED@?4?4?4?5truncated?$AA@
CONST	SEGMENT
??_C@_0O@IJJDLOED@?4?4?4?5truncated?$AA@ DB '... truncated', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sys_write
_TEXT	SEGMENT
error_type$ = 32
error_value$ = 40
written$ = 48
file$ = 56
error_traceback$ = 64
buffer$ = 80
truncated$65113 = 1088
name$ = 1120
fp$ = 1128
format$ = 1136
va$ = 1144
sys_write PROC						; COMDAT

; 2029 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 58 04
	00 00		 sub	 rsp, 1112		; 00000458H

; 2030 :     PyObject *file;
; 2031 :     PyObject *error_type, *error_value, *error_traceback;
; 2032 :     char buffer[1001];
; 2033 :     int written;
; 2034 : 
; 2035 :     PyErr_Fetch(&error_type, &error_value, &error_traceback);

  0001b	4c 8d 44 24 40	 lea	 r8, QWORD PTR error_traceback$[rsp]
  00020	48 8d 54 24 28	 lea	 rdx, QWORD PTR error_value$[rsp]
  00025	48 8d 4c 24 20	 lea	 rcx, QWORD PTR error_type$[rsp]
  0002a	e8 00 00 00 00	 call	 PyErr_Fetch

; 2036 :     file = PySys_GetObject(name);

  0002f	48 8b 8c 24 60
	04 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00037	e8 00 00 00 00	 call	 PySys_GetObject
  0003c	48 89 44 24 38	 mov	 QWORD PTR file$[rsp], rax

; 2037 :     written = PyOS_vsnprintf(buffer, sizeof(buffer), format, va);

  00041	4c 8b 8c 24 78
	04 00 00	 mov	 r9, QWORD PTR va$[rsp]
  00049	4c 8b 84 24 70
	04 00 00	 mov	 r8, QWORD PTR format$[rsp]
  00051	ba e9 03 00 00	 mov	 edx, 1001		; 000003e9H
  00056	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buffer$[rsp]
  0005b	e8 00 00 00 00	 call	 PyOS_vsnprintf
  00060	89 44 24 30	 mov	 DWORD PTR written$[rsp], eax

; 2038 :     if (sys_pyfile_write(buffer, file) != 0) {

  00064	48 8b 54 24 38	 mov	 rdx, QWORD PTR file$[rsp]
  00069	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buffer$[rsp]
  0006e	e8 00 00 00 00	 call	 sys_pyfile_write
  00073	85 c0		 test	 eax, eax
  00075	74 18		 je	 SHORT $LN4@sys_write

; 2039 :         PyErr_Clear();

  00077	e8 00 00 00 00	 call	 PyErr_Clear

; 2040 :         fputs(buffer, fp);

  0007c	48 8b 94 24 68
	04 00 00	 mov	 rdx, QWORD PTR fp$[rsp]
  00084	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buffer$[rsp]
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputs
$LN4@sys_write:

; 2041 :     }
; 2042 :     if (written < 0 || (size_t)written >= sizeof(buffer)) {

  0008f	83 7c 24 30 00	 cmp	 DWORD PTR written$[rsp], 0
  00094	7c 0d		 jl	 SHORT $LN2@sys_write
  00096	48 63 44 24 30	 movsxd	 rax, DWORD PTR written$[rsp]
  0009b	48 3d e9 03 00
	00		 cmp	 rax, 1001		; 000003e9H
  000a1	72 3b		 jb	 SHORT $LN3@sys_write
$LN2@sys_write:

; 2043 :         const char *truncated = "... truncated";

  000a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@IJJDLOED@?4?4?4?5truncated?$AA@
  000aa	48 89 84 24 40
	04 00 00	 mov	 QWORD PTR truncated$65113[rsp], rax

; 2044 :         if (sys_pyfile_write(truncated, file) != 0)

  000b2	48 8b 54 24 38	 mov	 rdx, QWORD PTR file$[rsp]
  000b7	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR truncated$65113[rsp]
  000bf	e8 00 00 00 00	 call	 sys_pyfile_write
  000c4	85 c0		 test	 eax, eax
  000c6	74 16		 je	 SHORT $LN1@sys_write

; 2045 :             fputs(truncated, fp);

  000c8	48 8b 94 24 68
	04 00 00	 mov	 rdx, QWORD PTR fp$[rsp]
  000d0	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR truncated$65113[rsp]
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputs
$LN1@sys_write:
$LN3@sys_write:

; 2046 :     }
; 2047 :     PyErr_Restore(error_type, error_value, error_traceback);

  000de	4c 8b 44 24 40	 mov	 r8, QWORD PTR error_traceback$[rsp]
  000e3	48 8b 54 24 28	 mov	 rdx, QWORD PTR error_value$[rsp]
  000e8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR error_type$[rsp]
  000ed	e8 00 00 00 00	 call	 PyErr_Restore

; 2048 : }

  000f2	48 81 c4 58 04
	00 00		 add	 rsp, 1112		; 00000458H
  000f9	c3		 ret	 0
sys_write ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_pyfile_write DD imagerel sys_pyfile_write
	DD	imagerel sys_pyfile_write+106
	DD	imagerel $unwind$sys_pyfile_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_pyfile_write DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_pyfile_write
_TEXT	SEGMENT
err$ = 32
unicode$ = 40
text$ = 64
file$ = 72
sys_pyfile_write PROC					; COMDAT

; 1983 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1984 :     PyObject *unicode = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR unicode$[rsp], 0

; 1985 :     int err;
; 1986 : 
; 1987 :     if (file == NULL)

  00017	48 83 7c 24 48
	00		 cmp	 QWORD PTR file$[rsp], 0
  0001d	75 07		 jne	 SHORT $LN2@sys_pyfile

; 1988 :         return -1;

  0001f	b8 ff ff ff ff	 mov	 eax, -1
  00024	eb 3f		 jmp	 SHORT $LN3@sys_pyfile
$LN2@sys_pyfile:

; 1989 : 
; 1990 :     unicode = PyUnicode_FromString(text);

  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR text$[rsp]
  0002b	e8 00 00 00 00	 call	 PyUnicode_FromString
  00030	48 89 44 24 28	 mov	 QWORD PTR unicode$[rsp], rax

; 1991 :     if (unicode == NULL)

  00035	48 83 7c 24 28
	00		 cmp	 QWORD PTR unicode$[rsp], 0
  0003b	75 07		 jne	 SHORT $LN1@sys_pyfile

; 1992 :         return -1;

  0003d	b8 ff ff ff ff	 mov	 eax, -1
  00042	eb 21		 jmp	 SHORT $LN3@sys_pyfile
$LN1@sys_pyfile:

; 1993 : 
; 1994 :     err = sys_pyfile_write_unicode(unicode, file);

  00044	48 8b 54 24 48	 mov	 rdx, QWORD PTR file$[rsp]
  00049	48 8b 4c 24 28	 mov	 rcx, QWORD PTR unicode$[rsp]
  0004e	e8 00 00 00 00	 call	 sys_pyfile_write_unicode
  00053	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1995 :     Py_DECREF(unicode);

  00057	48 8b 4c 24 28	 mov	 rcx, QWORD PTR unicode$[rsp]
  0005c	e8 00 00 00 00	 call	 _Py_DecRef

; 1996 :     return err;

  00061	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]
$LN3@sys_pyfile:

; 1997 : }

  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	c3		 ret	 0
sys_pyfile_write ENDP
_TEXT	ENDS
EXTRN	PyTuple_Pack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_pyfile_write_unicode DD imagerel sys_pyfile_write_unicode
	DD	imagerel sys_pyfile_write_unicode+277
	DD	imagerel $unwind$sys_pyfile_write_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_pyfile_write_unicode DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_pyfile_write_unicode
_TEXT	SEGMENT
writer$ = 32
args$ = 40
err$ = 48
result$ = 56
unicode$ = 80
file$ = 88
sys_pyfile_write_unicode PROC				; COMDAT

; 1948 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1949 :     PyObject *writer = NULL, *args = NULL, *result = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR writer$[rsp], 0
  00017	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0
  00020	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 1950 :     int err;
; 1951 :     _Py_IDENTIFIER(write);
; 1952 : 
; 1953 :     if (file == NULL)

  00029	48 83 7c 24 58
	00		 cmp	 QWORD PTR file$[rsp], 0
  0002f	75 0a		 jne	 SHORT $LN17@sys_pyfile@2

; 1954 :         return -1;

  00031	b8 ff ff ff ff	 mov	 eax, -1
  00036	e9 d5 00 00 00	 jmp	 $LN18@sys_pyfile@2
$LN17@sys_pyfile@2:

; 1955 : 
; 1956 :     writer = _PyObject_GetAttrId(file, &PyId_write);

  0003b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_write@?1??sys_pyfile_write_unicode@@9@9
  00040	8b c0		 mov	 eax, eax
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00048	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00051	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00055	48 8b d0	 mov	 rdx, rax
  00058	48 8b 4c 24 58	 mov	 rcx, QWORD PTR file$[rsp]
  0005d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00062	48 89 44 24 20	 mov	 QWORD PTR writer$[rsp], rax

; 1957 :     if (writer == NULL)

  00067	48 83 7c 24 20
	00		 cmp	 QWORD PTR writer$[rsp], 0
  0006d	75 02		 jne	 SHORT $LN16@sys_pyfile@2

; 1958 :         goto error;

  0006f	eb 4b		 jmp	 SHORT $error$65055
$LN16@sys_pyfile@2:

; 1959 : 
; 1960 :     args = PyTuple_Pack(1, unicode);

  00071	48 8b 54 24 50	 mov	 rdx, QWORD PTR unicode$[rsp]
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	e8 00 00 00 00	 call	 PyTuple_Pack
  00080	48 89 44 24 28	 mov	 QWORD PTR args$[rsp], rax

; 1961 :     if (args == NULL)

  00085	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  0008b	75 02		 jne	 SHORT $LN15@sys_pyfile@2

; 1962 :         goto error;

  0008d	eb 2d		 jmp	 SHORT $error$65055
$LN15@sys_pyfile@2:

; 1963 : 
; 1964 :     result = PyEval_CallObject(writer, args);

  0008f	45 33 c0	 xor	 r8d, r8d
  00092	48 8b 54 24 28	 mov	 rdx, QWORD PTR args$[rsp]
  00097	48 8b 4c 24 20	 mov	 rcx, QWORD PTR writer$[rsp]
  0009c	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  000a1	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 1965 :     if (result == NULL) {

  000a6	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  000ac	75 04		 jne	 SHORT $LN14@sys_pyfile@2

; 1966 :         goto error;

  000ae	eb 0c		 jmp	 SHORT $error$65055

; 1967 :     } else {

  000b0	eb 0a		 jmp	 SHORT $LN13@sys_pyfile@2
$LN14@sys_pyfile@2:

; 1968 :         err = 0;

  000b2	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1969 :         goto finally;

  000ba	eb 08		 jmp	 SHORT $finally$65063
$LN13@sys_pyfile@2:
$error$65055:

; 1970 :     }
; 1971 : 
; 1972 : error:
; 1973 :     err = -1;

  000bc	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$finally$65063:
$LN12@sys_pyfile@2:

; 1974 : finally:
; 1975 :     Py_XDECREF(writer);

  000c4	48 83 7c 24 20
	00		 cmp	 QWORD PTR writer$[rsp], 0
  000ca	74 0a		 je	 SHORT $LN9@sys_pyfile@2
  000cc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR writer$[rsp]
  000d1	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@sys_pyfile@2:
  000d6	33 c0		 xor	 eax, eax
  000d8	85 c0		 test	 eax, eax
  000da	75 e8		 jne	 SHORT $LN12@sys_pyfile@2
$LN8@sys_pyfile@2:

; 1976 :     Py_XDECREF(args);

  000dc	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  000e2	74 0a		 je	 SHORT $LN5@sys_pyfile@2
  000e4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  000e9	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@sys_pyfile@2:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 e8		 jne	 SHORT $LN8@sys_pyfile@2
$LN4@sys_pyfile@2:

; 1977 :     Py_XDECREF(result);

  000f4	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  000fa	74 0a		 je	 SHORT $LN1@sys_pyfile@2
  000fc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  00101	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@sys_pyfile@2:
  00106	33 c0		 xor	 eax, eax
  00108	85 c0		 test	 eax, eax
  0010a	75 e8		 jne	 SHORT $LN4@sys_pyfile@2

; 1978 :     return err;

  0010c	8b 44 24 30	 mov	 eax, DWORD PTR err$[rsp]
$LN18@sys_pyfile@2:

; 1979 : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
sys_pyfile_write_unicode ENDP
_TEXT	ENDS
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	PySys_WriteStderr
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_WriteStderr DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$PySys_WriteStderr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_WriteStderr DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PySys_WriteStderr
_TEXT	SEGMENT
va$ = 32
format$ = 64
PySys_WriteStderr PROC					; COMDAT

; 2062 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2063 :     va_list va;
; 2064 : 
; 2065 :     va_start(va, format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR format$[rsp+8]
  0001d	48 89 44 24 20	 mov	 QWORD PTR va$[rsp], rax

; 2066 :     sys_write("stderr", stderr, format, va);

  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00028	48 83 c0 60	 add	 rax, 96			; 00000060H
  0002c	4c 8b 4c 24 20	 mov	 r9, QWORD PTR va$[rsp]
  00031	4c 8b 44 24 40	 mov	 r8, QWORD PTR format$[rsp]
  00036	48 8b d0	 mov	 rdx, rax
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00040	e8 00 00 00 00	 call	 sys_write

; 2067 :     va_end(va);

  00045	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR va$[rsp], 0

; 2068 : }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
PySys_WriteStderr ENDP
_TEXT	ENDS
PUBLIC	PySys_FormatStdout
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_FormatStdout DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$PySys_FormatStdout
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_FormatStdout DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_FormatStdout
_TEXT	SEGMENT
va$ = 32
format$ = 64
PySys_FormatStdout PROC					; COMDAT

; 2094 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2095 :     va_list va;
; 2096 : 
; 2097 :     va_start(va, format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR format$[rsp+8]
  0001d	48 89 44 24 20	 mov	 QWORD PTR va$[rsp], rax

; 2098 :     sys_format("stdout", stdout, format, va);

  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00028	48 83 c0 30	 add	 rax, 48			; 00000030H
  0002c	4c 8b 4c 24 20	 mov	 r9, QWORD PTR va$[rsp]
  00031	4c 8b 44 24 40	 mov	 r8, QWORD PTR format$[rsp]
  00036	48 8b d0	 mov	 rdx, rax
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  00040	e8 00 00 00 00	 call	 sys_format

; 2099 :     va_end(va);

  00045	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR va$[rsp], 0

; 2100 : }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
PySys_FormatStdout ENDP
_TEXT	ENDS
EXTRN	PyUnicode_FromFormatV:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$sys_format DD imagerel sys_format
	DD	imagerel sys_format+185
	DD	imagerel $unwind$sys_format
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sys_format DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sys_format
_TEXT	SEGMENT
error_type$ = 32
error_value$ = 40
file$ = 48
message$ = 56
error_traceback$ = 64
utf8$ = 72
name$ = 96
fp$ = 104
format$ = 112
va$ = 120
sys_format PROC						; COMDAT

; 2072 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2073 :     PyObject *file, *message;
; 2074 :     PyObject *error_type, *error_value, *error_traceback;
; 2075 :     char *utf8;
; 2076 : 
; 2077 :     PyErr_Fetch(&error_type, &error_value, &error_traceback);

  00018	4c 8d 44 24 40	 lea	 r8, QWORD PTR error_traceback$[rsp]
  0001d	48 8d 54 24 28	 lea	 rdx, QWORD PTR error_value$[rsp]
  00022	48 8d 4c 24 20	 lea	 rcx, QWORD PTR error_type$[rsp]
  00027	e8 00 00 00 00	 call	 PyErr_Fetch

; 2078 :     file = PySys_GetObject(name);

  0002c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR name$[rsp]
  00031	e8 00 00 00 00	 call	 PySys_GetObject
  00036	48 89 44 24 30	 mov	 QWORD PTR file$[rsp], rax

; 2079 :     message = PyUnicode_FromFormatV(format, va);

  0003b	48 8b 54 24 78	 mov	 rdx, QWORD PTR va$[rsp]
  00040	48 8b 4c 24 70	 mov	 rcx, QWORD PTR format$[rsp]
  00045	e8 00 00 00 00	 call	 PyUnicode_FromFormatV
  0004a	48 89 44 24 38	 mov	 QWORD PTR message$[rsp], rax

; 2080 :     if (message != NULL) {

  0004f	48 83 7c 24 38
	00		 cmp	 QWORD PTR message$[rsp], 0
  00055	74 49		 je	 SHORT $LN3@sys_format

; 2081 :         if (sys_pyfile_write_unicode(message, file) != 0) {

  00057	48 8b 54 24 30	 mov	 rdx, QWORD PTR file$[rsp]
  0005c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR message$[rsp]
  00061	e8 00 00 00 00	 call	 sys_pyfile_write_unicode
  00066	85 c0		 test	 eax, eax
  00068	74 2c		 je	 SHORT $LN2@sys_format

; 2082 :             PyErr_Clear();

  0006a	e8 00 00 00 00	 call	 PyErr_Clear

; 2083 :             utf8 = _PyUnicode_AsString(message);

  0006f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR message$[rsp]
  00074	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00079	48 89 44 24 48	 mov	 QWORD PTR utf8$[rsp], rax

; 2084 :             if (utf8 != NULL)

  0007e	48 83 7c 24 48
	00		 cmp	 QWORD PTR utf8$[rsp], 0
  00084	74 10		 je	 SHORT $LN1@sys_format

; 2085 :                 fputs(utf8, fp);

  00086	48 8b 54 24 68	 mov	 rdx, QWORD PTR fp$[rsp]
  0008b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR utf8$[rsp]
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputs
$LN1@sys_format:
$LN2@sys_format:

; 2086 :         }
; 2087 :         Py_DECREF(message);

  00096	48 8b 4c 24 38	 mov	 rcx, QWORD PTR message$[rsp]
  0009b	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@sys_format:

; 2088 :     }
; 2089 :     PyErr_Restore(error_type, error_value, error_traceback);

  000a0	4c 8b 44 24 40	 mov	 r8, QWORD PTR error_traceback$[rsp]
  000a5	48 8b 54 24 28	 mov	 rdx, QWORD PTR error_value$[rsp]
  000aa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR error_type$[rsp]
  000af	e8 00 00 00 00	 call	 PyErr_Restore

; 2090 : }

  000b4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000b8	c3		 ret	 0
sys_format ENDP
_TEXT	ENDS
PUBLIC	PySys_FormatStderr
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySys_FormatStderr DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$PySys_FormatStderr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySys_FormatStderr DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySys_FormatStderr
_TEXT	SEGMENT
va$ = 32
format$ = 64
PySys_FormatStderr PROC					; COMDAT

; 2104 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2105 :     va_list va;
; 2106 : 
; 2107 :     va_start(va, format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR format$[rsp+8]
  0001d	48 89 44 24 20	 mov	 QWORD PTR va$[rsp], rax

; 2108 :     sys_format("stderr", stderr, format, va);

  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00028	48 83 c0 60	 add	 rax, 96			; 00000060H
  0002c	4c 8b 4c 24 20	 mov	 r9, QWORD PTR va$[rsp]
  00031	4c 8b 44 24 40	 mov	 r8, QWORD PTR format$[rsp]
  00036	48 8b d0	 mov	 rdx, rax
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00040	e8 00 00 00 00	 call	 sys_format

; 2109 :     va_end(va);

  00045	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR va$[rsp], 0

; 2110 : }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
PySys_FormatStderr ENDP
_TEXT	ENDS
END
