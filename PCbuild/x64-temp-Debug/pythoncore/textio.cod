; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@DOPNAJOF@_io?4TextIOWrapper?$AA@	; `string'
PUBLIC	??_C@_0M@MCIODJJK@_CHUNK_SIZE?$AA@		; `string'
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
PUBLIC	??_C@_0P@MGPKIIND@line_buffering?$AA@		; `string'
PUBLIC	??_C@_06HOHPNJLC@buffer?$AA@			; `string'
PUBLIC	??_C@_08MABILMFG@truncate?$AA@			; `string'
PUBLIC	??_C@_0N@NAMJJHIO@__getstate__?$AA@		; `string'
PUBLIC	??_C@_06MDAHGKGM@utf?932?$AA@			; `string'
PUBLIC	??_C@_09ELKEPOEM@utf?932?9le?$AA@		; `string'
PUBLIC	??_C@_09EBDKNDEG@utf?932?9be?$AA@		; `string'
PUBLIC	??_C@_06KEOPHLAG@utf?916?$AA@			; `string'
PUBLIC	??_C@_09PDOMPJIH@utf?916?9le?$AA@		; `string'
PUBLIC	??_C@_09PJHCNEIN@utf?916?9be?$AA@		; `string'
PUBLIC	??_C@_05CAMHEFLG@utf?98?$AA@			; `string'
PUBLIC	??_C@_09JAONMJBN@iso8859?91?$AA@		; `string'
PUBLIC	??_C@_05OJENGABA@ascii?$AA@			; `string'
PUBLIC	??_C@_0BO@BGOBMHEI@_io?4IncrementalNewlineDecoder?$AA@ ; `string'
PUBLIC	??_C@_08OINEKLLD@getstate?$AA@			; `string'
PUBLIC	??_C@_0BA@OAEEDFBN@_io?4_TextIOBase?$AA@	; `string'
PUBLIC	??_C@_06EOMHCNPI@errors?$AA@			; `string'
PUBLIC	??_C@_08EGHAIIMO@newlines?$AA@			; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_06CNCOJECB@detach?$AA@			; `string'
PUBLIC	??_C@_08IBOGFJJC@writable?$AA@			; `string'
PUBLIC	??_C@_04LBPCFPDD@tell?$AA@			; `string'
PUBLIC	??_C@_08BJPILIMO@setstate?$AA@			; `string'
PUBLIC	??_C@_08JPFEOKJG@seekable?$AA@			; `string'
PUBLIC	??_C@_04EDECCOGL@seek?$AA@			; `string'
PUBLIC	??_C@_05CFMALAOA@reset?$AA@			; `string'
PUBLIC	??_C@_07CLEHDIEJ@replace?$AA@			; `string'
PUBLIC	??_C@_08INDGGIBD@readable?$AA@			; `string'
PUBLIC	??_C@_05FDBMPOID@read1?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_03DGOGAGNC@raw?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_04GMGOKAFF@mode?$AA@			; `string'
PUBLIC	??_C@_06BMABDNNN@isatty?$AA@			; `string'
PUBLIC	??_C@_0BF@EKAJBFOE@getpreferredencoding?$AA@	; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_06FFBIALPD@fileno?$AA@			; `string'
PUBLIC	??_C@_06KPNAMAEI@decode?$AA@			; `string'
PUBLIC	??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@		; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	PyTextIOBase_Type
PUBLIC	PyIncrementalNewlineDecoder_Type
PUBLIC	PyTextIOWrapper_Type
EXTRN	PyType_GenericNew:PROC
EXTRN	PyIOBase_Type:BYTE
;	COMDAT ??_C@_0BC@DOPNAJOF@_io?4TextIOWrapper?$AA@
CONST	SEGMENT
??_C@_0BC@DOPNAJOF@_io?4TextIOWrapper?$AA@ DB '_io.TextIOWrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MCIODJJK@_CHUNK_SIZE?$AA@
CONST	SEGMENT
??_C@_0M@MCIODJJK@_CHUNK_SIZE?$AA@ DB '_CHUNK_SIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MGPKIIND@line_buffering?$AA@
CONST	SEGMENT
??_C@_0P@MGPKIIND@line_buffering?$AA@ DB 'line_buffering', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer?$AA@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer?$AA@ DB 'buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MABILMFG@truncate?$AA@
CONST	SEGMENT
??_C@_08MABILMFG@truncate?$AA@ DB 'truncate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAMJJHIO@__getstate__?$AA@
CONST	SEGMENT
??_C@_0N@NAMJJHIO@__getstate__?$AA@ DB '__getstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MDAHGKGM@utf?932?$AA@
CONST	SEGMENT
??_C@_06MDAHGKGM@utf?932?$AA@ DB 'utf-32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09ELKEPOEM@utf?932?9le?$AA@
CONST	SEGMENT
??_C@_09ELKEPOEM@utf?932?9le?$AA@ DB 'utf-32-le', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EBDKNDEG@utf?932?9be?$AA@
CONST	SEGMENT
??_C@_09EBDKNDEG@utf?932?9be?$AA@ DB 'utf-32-be', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KEOPHLAG@utf?916?$AA@
CONST	SEGMENT
??_C@_06KEOPHLAG@utf?916?$AA@ DB 'utf-16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PDOMPJIH@utf?916?9le?$AA@
CONST	SEGMENT
??_C@_09PDOMPJIH@utf?916?9le?$AA@ DB 'utf-16-le', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PJHCNEIN@utf?916?9be?$AA@
CONST	SEGMENT
??_C@_09PJHCNEIN@utf?916?9be?$AA@ DB 'utf-16-be', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CAMHEFLG@utf?98?$AA@
CONST	SEGMENT
??_C@_05CAMHEFLG@utf?98?$AA@ DB 'utf-8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JAONMJBN@iso8859?91?$AA@
CONST	SEGMENT
??_C@_09JAONMJBN@iso8859?91?$AA@ DB 'iso8859-1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJENGABA@ascii?$AA@
CONST	SEGMENT
??_C@_05OJENGABA@ascii?$AA@ DB 'ascii', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BGOBMHEI@_io?4IncrementalNewlineDecoder?$AA@
CONST	SEGMENT
??_C@_0BO@BGOBMHEI@_io?4IncrementalNewlineDecoder?$AA@ DB '_io.Incrementa'
	DB	'lNewlineDecoder', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OINEKLLD@getstate?$AA@
CONST	SEGMENT
??_C@_08OINEKLLD@getstate?$AA@ DB 'getstate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OAEEDFBN@_io?4_TextIOBase?$AA@
CONST	SEGMENT
??_C@_0BA@OAEEDFBN@_io?4_TextIOBase?$AA@ DB '_io._TextIOBase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOMHCNPI@errors?$AA@
CONST	SEGMENT
??_C@_06EOMHCNPI@errors?$AA@ DB 'errors', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGHAIIMO@newlines?$AA@
CONST	SEGMENT
??_C@_08EGHAIIMO@newlines?$AA@ DB 'newlines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNCOJECB@detach?$AA@
CONST	SEGMENT
??_C@_06CNCOJECB@detach?$AA@ DB 'detach', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
textiobase_doc DB 'Base class for text I/O.', 0aH, 0aH, 'This class provi'
	DB	'des a character and line based interface to stream', 0aH, 'I/'
	DB	'O. There is no readinto method because Python''s character st'
	DB	'rings', 0aH, 'are immutable. There is no public constructor.', 0aH
	DB	00H
	ORG $+15
textiobase_detach_doc DB 'Separate the underlying buffer from the TextIOB'
	DB	'ase and return it.', 0aH, 0aH, 'After the underlying buffer h'
	DB	'as been detached, the TextIO is in an', 0aH, 'unusable state.'
	DB	0aH, 00H
	ORG $+9
textiobase_read_doc DB 'Read at most n characters from stream.', 0aH, 0aH
	DB	'Read from underlying buffer until we have n characters or we '
	DB	'hit EOF.', 0aH, 'If n is negative or omitted, read until EOF.'
	DB	0aH, 00H
	ORG $+4
textiobase_readline_doc DB 'Read until newline or EOF.', 0aH, 0aH, 'Retur'
	DB	'ns an empty string if EOF is hit immediately.', 0aH, 00H
textiobase_write_doc DB 'Write string to stream.', 0aH, 'Returns the numb'
	DB	'er of characters written (which is always equal to', 0aH, 'th'
	DB	'e length of the string).', 0aH, 00H
	ORG $+1
textiobase_encoding_doc DB 'Encoding of the text stream.', 0aH, 0aH, 'Sub'
	DB	'classes should override.', 0aH, 00H
	ORG $+13
textiobase_newlines_doc DB 'Line endings translated so far.', 0aH, 0aH, 'O'
	DB	'nly line endings translated during reading are considered.', 0aH
	DB	0aH, 'Subclasses should override.', 0aH, 00H
	ORG $+5
textiobase_errors_doc DB 'The error setting of the decoder or encoder.', 0aH
	DB	0aH, 'Subclasses should override.', 0aH, 00H
	ORG $+5
textiobase_methods DQ FLAT:??_C@_06CNCOJECB@detach?$AA@
	DQ	FLAT:textiobase_detach
	DD	04H
	ORG $+4
	DQ	FLAT:textiobase_detach_doc
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:textiobase_read
	DD	01H
	ORG $+4
	DQ	FLAT:textiobase_read_doc
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:textiobase_readline
	DD	01H
	ORG $+4
	DQ	FLAT:textiobase_readline_doc
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:textiobase_write
	DD	01H
	ORG $+4
	DQ	FLAT:textiobase_write_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
textiobase_getset DQ FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DQ	FLAT:textiobase_encoding_get
	DQ	0000000000000000H
	DQ	FLAT:textiobase_encoding_doc
	ORG $+8
	DQ	FLAT:??_C@_08EGHAIIMO@newlines?$AA@
	DQ	FLAT:textiobase_newlines_get
	DQ	0000000000000000H
	DQ	FLAT:textiobase_newlines_doc
	ORG $+8
	DQ	FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	FLAT:textiobase_errors_get
	DQ	0000000000000000H
	DQ	FLAT:textiobase_errors_doc
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyTextIOBase_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BA@OAEEDFBN@_io?4_TextIOBase?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	FLAT:textiobase_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:textiobase_methods
	DQ	0000000000000000H
	DQ	FLAT:textiobase_getset
	DQ	FLAT:PyIOBase_Type
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
incrementalnewlinedecoder_doc DB 'Codec used when reading a file in unive'
	DB	'rsal newlines mode.  It wraps', 0aH, 'another incremental dec'
	DB	'oder, translating \r\n and \r into \n.  It also', 0aH, 'recor'
	DB	'ds the types of newlines encountered.  When used with', 0aH, 't'
	DB	'ranslate=False, it ensures that the newline sequence is retur'
	DB	'ned in', 0aH, 'one piece. When used with decoder=None, it exp'
	DB	'ects unicode strings as', 0aH, 'decode input and translates n'
	DB	'ewlines without first invoking an external', 0aH, 'decoder.', 0aH
	DB	00H
	ORG $+12
incrementalnewlinedecoder_methods DQ FLAT:??_C@_06KPNAMAEI@decode?$AA@
	DQ	FLAT:incrementalnewlinedecoder_decode
	DD	03H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08OINEKLLD@getstate?$AA@
	DQ	FLAT:incrementalnewlinedecoder_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08BJPILIMO@setstate?$AA@
	DQ	FLAT:incrementalnewlinedecoder_setstate
	DD	08H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05CFMALAOA@reset?$AA@
	DQ	FLAT:incrementalnewlinedecoder_reset
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+24
incrementalnewlinedecoder_getset DQ FLAT:??_C@_08EGHAIIMO@newlines?$AA@
	DQ	FLAT:incrementalnewlinedecoder_newlines_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyIncrementalNewlineDecoder_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BO@BGOBMHEI@_io?4IncrementalNewlineDecoder?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:incrementalnewlinedecoder_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	FLAT:incrementalnewlinedecoder_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:incrementalnewlinedecoder_methods
	DQ	0000000000000000H
	DQ	FLAT:incrementalnewlinedecoder_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:incrementalnewlinedecoder_init
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
textiowrapper_doc DB 'Character and line based layer over a BufferedIOBas'
	DB	'e object, buffer.', 0aH, 0aH, 'encoding gives the name of the'
	DB	' encoding that the stream will be', 0aH, 'decoded or encoded '
	DB	'with. It defaults to locale.getpreferredencoding(False).', 0aH
	DB	0aH, 'errors determines the strictness of encoding and decodin'
	DB	'g (see', 0aH, 'help(codecs.Codec) or the documentation for co'
	DB	'decs.register) and', 0aH, 'defaults to "strict".', 0aH, 0aH, 'n'
	DB	'ewline controls how line endings are handled. It can be None,'
	DB	' '''',', 0aH, '''\n'', ''\r'', and ''\r\n''.  It works as fol'
	DB	'lows:', 0aH, 0aH, '* On input, if newline is None, universal '
	DB	'newlines mode is', 0aH, '  enabled. Lines in the input can en'
	DB	'd in ''\n'', ''\r'', or ''\r\n'', and', 0aH, '  these are tra'
	DB	'nslated into ''\n'' before being returned to the', 0aH, '  ca'
	DB	'ller. If it is '''', universal newline mode is enabled, but l'
	DB	'ine', 0aH, '  endings are returned to the caller untranslated'
	DB	'. If it has any of', 0aH, '  the other legal values, input li'
	DB	'nes are only terminated by the given', 0aH, '  string, and th'
	DB	'e line ending is returned to the caller untranslated.', 0aH, 0aH
	DB	'* On output, if newline is None, any ''\n'' characters writte'
	DB	'n are', 0aH, '  translated to the system default line separat'
	DB	'or, os.linesep. If', 0aH, '  newline is '''' or ''\n'', no tr'
	DB	'anslation takes place. If newline is any', 0aH, '  of the oth'
	DB	'er legal values, any ''\n'' characters written are translated'
	DB	0aH, '  to the given string.', 0aH, 0aH, 'If line_buffering is'
	DB	' True, a call to flush is implied when a call to', 0aH, 'writ'
	DB	'e contains a newline character.', 00H
	ORG $+15
encodefuncs DQ	FLAT:??_C@_05OJENGABA@ascii?$AA@
	DQ	FLAT:ascii_encode
	DQ	FLAT:??_C@_09JAONMJBN@iso8859?91?$AA@
	DQ	FLAT:latin1_encode
	DQ	FLAT:??_C@_05CAMHEFLG@utf?98?$AA@
	DQ	FLAT:utf8_encode
	DQ	FLAT:??_C@_09PJHCNEIN@utf?916?9be?$AA@
	DQ	FLAT:utf16be_encode
	DQ	FLAT:??_C@_09PDOMPJIH@utf?916?9le?$AA@
	DQ	FLAT:utf16le_encode
	DQ	FLAT:??_C@_06KEOPHLAG@utf?916?$AA@
	DQ	FLAT:utf16_encode
	DQ	FLAT:??_C@_09EBDKNDEG@utf?932?9be?$AA@
	DQ	FLAT:utf32be_encode
	DQ	FLAT:??_C@_09ELKEPOEM@utf?932?9le?$AA@
	DQ	FLAT:utf32le_encode
	DQ	FLAT:??_C@_06MDAHGKGM@utf?932?$AA@
	DQ	FLAT:utf32_encode
	DQ	0000000000000000H
	DQ	0000000000000000H
textiowrapper_methods DQ FLAT:??_C@_06CNCOJECB@detach?$AA@
	DQ	FLAT:textiowrapper_detach
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:textiowrapper_write
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:textiowrapper_read
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:textiowrapper_readline
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:textiowrapper_flush
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:textiowrapper_close
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	FLAT:textiowrapper_fileno
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	FLAT:textiowrapper_seekable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:textiowrapper_readable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:textiowrapper_writable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:textiowrapper_isatty
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	FLAT:textiowrapper_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:textiowrapper_seek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:textiowrapper_tell
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08MABILMFG@truncate?$AA@
	DQ	FLAT:textiowrapper_truncate
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
textiowrapper_members DQ FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06HOHPNJLC@buffer?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@MGPKIIND@line_buffering?$AA@
	DD	0eH
	ORG $+4
	DQ	00000000000000a8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
textiowrapper_getset DQ FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:textiowrapper_name_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:textiowrapper_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08EGHAIIMO@newlines?$AA@
	DQ	FLAT:textiowrapper_newlines_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06EOMHCNPI@errors?$AA@
	DQ	FLAT:textiowrapper_errors_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0M@MCIODJJK@_CHUNK_SIZE?$AA@
	DQ	FLAT:textiowrapper_chunk_size_get
	DQ	FLAT:textiowrapper_chunk_size_set
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyTextIOWrapper_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@DOPNAJOF@_io?4TextIOWrapper?$AA@
	DQ	0000000000000110H
	DQ	0000000000000000H
	DQ	FLAT:textiowrapper_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:textiowrapper_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:textiowrapper_doc
	DQ	FLAT:textiowrapper_traverse
	DQ	FLAT:textiowrapper_clear
	DQ	0000000000000000H
	DQ	0000000000000100H
	DQ	0000000000000000H
	DQ	FLAT:textiowrapper_iternext
	DQ	FLAT:textiowrapper_methods
	DQ	FLAT:textiowrapper_members
	DQ	FLAT:textiowrapper_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000108H
	DQ	FLAT:textiowrapper_init
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
_DATA	ENDS
;	COMDAT ??_C@_08IBOGFJJC@writable?$AA@
CONST	SEGMENT
??_C@_08IBOGFJJC@writable?$AA@ DB 'writable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBPCFPDD@tell?$AA@
CONST	SEGMENT
??_C@_04LBPCFPDD@tell?$AA@ DB 'tell', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJPILIMO@setstate?$AA@
CONST	SEGMENT
??_C@_08BJPILIMO@setstate?$AA@ DB 'setstate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPFEOKJG@seekable?$AA@
CONST	SEGMENT
??_C@_08JPFEOKJG@seekable?$AA@ DB 'seekable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDECCOGL@seek?$AA@
CONST	SEGMENT
??_C@_04EDECCOGL@seek?$AA@ DB 'seek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFMALAOA@reset?$AA@
CONST	SEGMENT
??_C@_05CFMALAOA@reset?$AA@ DB 'reset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLEHDIEJ@replace?$AA@
CONST	SEGMENT
??_C@_07CLEHDIEJ@replace?$AA@ DB 'replace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08INDGGIBD@readable?$AA@
CONST	SEGMENT
??_C@_08INDGGIBD@readable?$AA@ DB 'readable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FDBMPOID@read1?$AA@
CONST	SEGMENT
??_C@_05FDBMPOID@read1?$AA@ DB 'read1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw?$AA@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw?$AA@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMGOKAFF@mode?$AA@
CONST	SEGMENT
??_C@_04GMGOKAFF@mode?$AA@ DB 'mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMABDNNN@isatty?$AA@
CONST	SEGMENT
??_C@_06BMABDNNN@isatty?$AA@ DB 'isatty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKAJBFOE@getpreferredencoding?$AA@
CONST	SEGMENT
??_C@_0BF@EKAJBFOE@getpreferredencoding?$AA@ DB 'getpreferredencoding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFBIALPD@fileno?$AA@
CONST	SEGMENT
??_C@_06FFBIALPD@fileno?$AA@ DB 'fileno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPNAMAEI@decode?$AA@
CONST	SEGMENT
??_C@_06KPNAMAEI@decode?$AA@ DB 'decode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
CONST	SEGMENT
??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@ DB '_dealloc_warn', 00H ; `string'
CONST	ENDS
_TLS	SEGMENT
PyId_writable DQ 0000000000000000H
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	0000000000000000H
PyId_tell DQ	0000000000000000H
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	0000000000000000H
PyId_setstate DQ 0000000000000000H
	DQ	FLAT:??_C@_08BJPILIMO@setstate?$AA@
	DQ	0000000000000000H
PyId_seekable DQ 0000000000000000H
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	0000000000000000H
PyId_seek DQ	0000000000000000H
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	0000000000000000H
PyId_reset DQ	0000000000000000H
	DQ	FLAT:??_C@_05CFMALAOA@reset?$AA@
	DQ	0000000000000000H
PyId_replace DQ	0000000000000000H
	DQ	FLAT:??_C@_07CLEHDIEJ@replace?$AA@
	DQ	0000000000000000H
PyId_readable DQ 0000000000000000H
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	0000000000000000H
PyId_read1 DQ	0000000000000000H
	DQ	FLAT:??_C@_05FDBMPOID@read1?$AA@
	DQ	0000000000000000H
PyId_read DQ	0000000000000000H
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
PyId_raw DQ	0000000000000000H
	DQ	FLAT:??_C@_03DGOGAGNC@raw?$AA@
	DQ	0000000000000000H
PyId_name DQ	0000000000000000H
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	0000000000000000H
PyId_mode DQ	0000000000000000H
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	0000000000000000H
PyId_isatty DQ	0000000000000000H
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	0000000000000000H
PyId_getpreferredencoding DQ 0000000000000000H
	DQ	FLAT:??_C@_0BF@EKAJBFOE@getpreferredencoding?$AA@
	DQ	0000000000000000H
PyId_flush DQ	0000000000000000H
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	0000000000000000H
PyId_fileno DQ	0000000000000000H
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	0000000000000000H
PyId_decode DQ	0000000000000000H
	DQ	FLAT:??_C@_06KPNAMAEI@decode?$AA@
	DQ	0000000000000000H
PyId__dealloc_warn DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
	DQ	0000000000000000H
PyId_close DQ	0000000000000000H
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\textio.c
pdata	SEGMENT
$pdata$textiobase_detach DD imagerel textiobase_detach
	DD	imagerel textiobase_detach+26
	DD	imagerel $unwind$textiobase_detach
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiobase_detach DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiobase_detach
_TEXT	SEGMENT
self$ = 48
textiobase_detach PROC					; COMDAT

; 61   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 62   :     return _unsupported("detach");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CNCOJECB@detach?$AA@
  00010	e8 00 00 00 00	 call	 _unsupported

; 63   : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
textiobase_detach ENDP
_TEXT	ENDS
EXTRN	PyErr_SetString:PROC
EXTRN	PyModule_GetState:PROC
EXTRN	PyState_FindModule:PROC
EXTRN	_PyIO_Module:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_unsupported DD imagerel _unsupported
	DD	imagerel _unsupported+50
	DD	imagerel $unwind$_unsupported
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_unsupported DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _unsupported
_TEXT	SEGMENT
message$ = 48
_unsupported PROC					; COMDAT

; 47   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 48   :     PyErr_SetString(IO_STATE->unsupported_operation, message);

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyIO_Module
  00010	e8 00 00 00 00	 call	 PyState_FindModule
  00015	48 8b c8	 mov	 rcx, rax
  00018	e8 00 00 00 00	 call	 PyModule_GetState
  0001d	48 8b 54 24 30	 mov	 rdx, QWORD PTR message$[rsp]
  00022	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00026	e8 00 00 00 00	 call	 PyErr_SetString

; 49   :     return NULL;

  0002b	33 c0		 xor	 eax, eax

; 50   : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
_unsupported ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiobase_read DD imagerel textiobase_read
	DD	imagerel textiobase_read+31
	DD	imagerel $unwind$textiobase_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiobase_read DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiobase_read
_TEXT	SEGMENT
self$ = 48
args$ = 56
textiobase_read PROC					; COMDAT

; 74   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 75   :     return _unsupported("read");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@
  00015	e8 00 00 00 00	 call	 _unsupported

; 76   : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
textiobase_read ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiobase_readline DD imagerel textiobase_readline
	DD	imagerel textiobase_readline+31
	DD	imagerel $unwind$textiobase_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiobase_readline DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiobase_readline
_TEXT	SEGMENT
self$ = 48
args$ = 56
textiobase_readline PROC				; COMDAT

; 86   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 87   :     return _unsupported("readline");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KBCDPPMN@readline?$AA@
  00015	e8 00 00 00 00	 call	 _unsupported

; 88   : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
textiobase_readline ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiobase_write DD imagerel textiobase_write
	DD	imagerel textiobase_write+31
	DD	imagerel $unwind$textiobase_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiobase_write DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiobase_write
_TEXT	SEGMENT
self$ = 48
args$ = 56
textiobase_write PROC					; COMDAT

; 98   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 99   :     return _unsupported("write");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NGFEDHGN@write?$AA@
  00015	e8 00 00 00 00	 call	 _unsupported

; 100  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
textiobase_write ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiobase_encoding_get DD imagerel textiobase_encoding_get
	DD	imagerel textiobase_encoding_get+38
	DD	imagerel $unwind$textiobase_encoding_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiobase_encoding_get DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiobase_encoding_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
textiobase_encoding_get PROC				; COMDAT

; 110  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 111  :     Py_RETURN_NONE;

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00015	e8 00 00 00 00	 call	 _Py_IncRef
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 112  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
textiobase_encoding_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\textio.c
pdata	SEGMENT
$pdata$textiobase_newlines_get DD imagerel textiobase_newlines_get
	DD	imagerel textiobase_newlines_get+38
	DD	imagerel $unwind$textiobase_newlines_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiobase_newlines_get DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiobase_newlines_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
textiobase_newlines_get PROC				; COMDAT

; 124  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 125  :     Py_RETURN_NONE;

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00015	e8 00 00 00 00	 call	 _Py_IncRef
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 126  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
textiobase_newlines_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiobase_errors_get DD imagerel textiobase_errors_get
	DD	imagerel textiobase_errors_get+38
	DD	imagerel $unwind$textiobase_errors_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiobase_errors_get DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiobase_errors_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
textiobase_errors_get PROC				; COMDAT

; 136  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 137  :     Py_RETURN_NONE;

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00015	e8 00 00 00 00	 call	 _Py_IncRef
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 138  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
textiobase_errors_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_06OLFOGHEN@strict?$AA@			; `string'
PUBLIC	??_C@_0BP@IMCBOKEG@Oi?$HMO?3IncrementalNewlineDecoder?$AA@ ; `string'
PUBLIC	??_C@_09ODNGOEIO@translate?$AA@			; `string'
PUBLIC	??_C@_07GFKBACBG@decoder?$AA@			; `string'
EXTRN	PyUnicode_FromString:PROC
EXTRN	_PyArg_ParseTupleAndKeywords_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$incrementalnewlinedecoder_init DD imagerel incrementalnewlinedecoder_init
	DD	imagerel incrementalnewlinedecoder_init+361
	DD	imagerel $unwind$incrementalnewlinedecoder_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$incrementalnewlinedecoder_init DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_06OLFOGHEN@strict?$AA@
CONST	SEGMENT
??_C@_06OLFOGHEN@strict?$AA@ DB 'strict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IMCBOKEG@Oi?$HMO?3IncrementalNewlineDecoder?$AA@
CONST	SEGMENT
??_C@_0BP@IMCBOKEG@Oi?$HMO?3IncrementalNewlineDecoder?$AA@ DB 'Oi|O:Incre'
	DB	'mentalNewlineDecoder', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09ODNGOEIO@translate?$AA@
CONST	SEGMENT
??_C@_09ODNGOEIO@translate?$AA@ DB 'translate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GFKBACBG@decoder?$AA@
CONST	SEGMENT
??_C@_07GFKBACBG@decoder?$AA@ DB 'decoder', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT incrementalnewlinedecoder_init
_TEXT	SEGMENT
kwlist$ = 64
decoder$ = 96
errors$ = 104
translate$ = 112
self$ = 144
args$ = 152
kwds$ = 160
incrementalnewlinedecoder_init PROC			; COMDAT

; 222  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 223  :     PyObject *decoder;
; 224  :     int translate;
; 225  :     PyObject *errors = NULL;

  00016	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 226  :     char *kwlist[] = {"decoder", "translate", "errors", NULL};

  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07GFKBACBG@decoder?$AA@
  00026	48 89 44 24 40	 mov	 QWORD PTR kwlist$[rsp], rax
  0002b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09ODNGOEIO@translate?$AA@
  00032	48 89 44 24 48	 mov	 QWORD PTR kwlist$[rsp+8], rax
  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06EOMHCNPI@errors?$AA@
  0003e	48 89 44 24 50	 mov	 QWORD PTR kwlist$[rsp+16], rax
  00043	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR kwlist$[rsp+24], 0

; 227  : 
; 228  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "Oi|O:IncrementalNewlineDecoder",
; 229  :                                      kwlist, &decoder, &translate, &errors))

  0004c	48 8d 44 24 68	 lea	 rax, QWORD PTR errors$[rsp]
  00051	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00056	48 8d 44 24 70	 lea	 rax, QWORD PTR translate$[rsp]
  0005b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00060	48 8d 44 24 60	 lea	 rax, QWORD PTR decoder$[rsp]
  00065	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006a	4c 8d 4c 24 40	 lea	 r9, QWORD PTR kwlist$[rsp]
  0006f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BP@IMCBOKEG@Oi?$HMO?3IncrementalNewlineDecoder?$AA@
  00076	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0007e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00086	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0008b	85 c0		 test	 eax, eax
  0008d	75 0a		 jne	 SHORT $LN4@incrementa

; 230  :         return -1;

  0008f	b8 ff ff ff ff	 mov	 eax, -1
  00094	e9 c8 00 00 00	 jmp	 $LN5@incrementa
$LN4@incrementa:

; 231  : 
; 232  :     self->decoder = decoder;

  00099	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000a1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR decoder$[rsp]
  000a6	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 233  :     Py_INCREF(decoder);

  000aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR decoder$[rsp]
  000af	e8 00 00 00 00	 call	 _Py_IncRef

; 234  : 
; 235  :     if (errors == NULL) {

  000b4	48 83 7c 24 68
	00		 cmp	 QWORD PTR errors$[rsp], 0
  000ba	75 30		 jne	 SHORT $LN3@incrementa

; 236  :         self->errors = PyUnicode_FromString("strict");

  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  000c3	e8 00 00 00 00	 call	 PyUnicode_FromString
  000c8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000d0	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 237  :         if (self->errors == NULL)

  000d4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000dc	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000e1	75 07		 jne	 SHORT $LN2@incrementa

; 238  :             return -1;

  000e3	b8 ff ff ff ff	 mov	 eax, -1
  000e8	eb 77		 jmp	 SHORT $LN5@incrementa
$LN2@incrementa:

; 239  :     }
; 240  :     else {

  000ea	eb 1b		 jmp	 SHORT $LN1@incrementa
$LN3@incrementa:

; 241  :         Py_INCREF(errors);

  000ec	48 8b 4c 24 68	 mov	 rcx, QWORD PTR errors$[rsp]
  000f1	e8 00 00 00 00	 call	 _Py_IncRef

; 242  :         self->errors = errors;

  000f6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000fe	48 8b 4c 24 68	 mov	 rcx, QWORD PTR errors$[rsp]
  00103	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx
$LN1@incrementa:

; 243  :     }
; 244  : 
; 245  :     self->translate = translate;

  00107	8b 44 24 70	 mov	 eax, DWORD PTR translate$[rsp]
  0010b	83 e0 01	 and	 eax, 1
  0010e	d1 e0		 shl	 eax, 1
  00110	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00118	8b 49 70	 mov	 ecx, DWORD PTR [rcx+112]
  0011b	83 e1 fd	 and	 ecx, -3
  0011e	0b c8		 or	 ecx, eax
  00120	8b c1		 mov	 eax, ecx
  00122	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0012a	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 246  :     self->seennl = 0;

  0012d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00135	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00138	83 e0 e3	 and	 eax, -29		; ffffffe3H
  0013b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00143	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 247  :     self->pendingcr = 0;

  00146	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0014e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00151	83 e0 fe	 and	 eax, -2
  00154	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0015c	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 248  : 
; 249  :     return 0;

  0015f	33 c0		 xor	 eax, eax
$LN5@incrementa:

; 250  : }

  00161	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00168	c3		 ret	 0
incrementalnewlinedecoder_init ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0CC@HOFOFKBF@incrementalnewlinedecoder_deallo@ ; `string'
PUBLIC	??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$incrementalnewlinedecoder_dealloc DD imagerel incrementalnewlinedecoder_dealloc
	DD	imagerel incrementalnewlinedecoder_dealloc+236
	DD	imagerel $unwind$incrementalnewlinedecoder_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$incrementalnewlinedecoder_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0CC@HOFOFKBF@incrementalnewlinedecoder_deallo@
CONST	SEGMENT
??_C@_0CC@HOFOFKBF@incrementalnewlinedecoder_deallo@ DB 'incrementalnewli'
	DB	'nedecoder_dealloc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
CONST	SEGMENT
??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@ DB '..\Modules\_io\'
	DB	'textio.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT incrementalnewlinedecoder_dealloc
_TEXT	SEGMENT
_py_tmp$20620 = 48
_py_tmp$20628 = 56
self$ = 80
incrementalnewlinedecoder_dealloc PROC			; COMDAT

; 254  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN8@incrementa@2:

; 255  :     Py_CLEAR(self->decoder);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 53		 je	 SHORT $LN5@incrementa@2
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00022	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00026	41 b8 ff 00 00
	00		 mov	 r8d, 255		; 000000ffH
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@HOFOFKBF@incrementalnewlinedecoder_deallo@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN5@incrementa@2
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20620[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00056	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20620[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@incrementa@2:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN8@incrementa@2
$LN4@incrementa@2:

; 256  :     Py_CLEAR(self->errors);

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00073	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00078	74 53		 je	 SHORT $LN1@incrementa@2
  0007a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00087	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  0008b	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@HOFOFKBF@incrementalnewlinedecoder_deallo@
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 25		 jne	 SHORT $LN1@incrementa@2
  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000ad	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b1	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20628[rsp], rax
  000b6	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000bb	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  000c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20628[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@incrementa@2:
  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 9b		 jne	 SHORT $LN4@incrementa@2

; 257  :     Py_TYPE(self)->tp_free((PyObject *)self);

  000d3	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000d8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000dc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000e1	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 258  : }

  000e7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000eb	c3		 ret	 0
incrementalnewlinedecoder_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FC@GIFCPMPJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_1DK@PCEDENAB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@NIBPNJII@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EO@FLMNEBJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@ ; `string'
PUBLIC	??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FC@DCHOFDGA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_1DK@KIFGNPEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CO@PGPMIJF@IncrementalNewlineDecoder?4__init@ ; `string'
PUBLIC	_PyIncrementalNewlineDecoder_decode
EXTRN	PyMem_Free:PROC
EXTRN	PyUnicode_FromKindAndData:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
EXTRN	__imp_memchr:PROC
EXTRN	PyUnicode_Substring:PROC
EXTRN	memcpy:PROC
EXTRN	PyUnicode_New:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyObject_CallMethodObjArgs:PROC
EXTRN	_PyIO_str_decode:QWORD
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\textio.c
pdata	SEGMENT
$pdata$_PyIncrementalNewlineDecoder_decode DD imagerel $LN244
	DD	imagerel $LN244+8193
	DD	imagerel $unwind$_PyIncrementalNewlineDecoder_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIncrementalNewlineDecoder_decode DD 021601H
	DD	03f0116H
xdata	ENDS
;	COMDAT ??_C@_1FC@GIFCPMPJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1FC@GIFCPMPJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 'o', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't'
	DB	00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@PCEDENAB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@PCEDENAB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, ')'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@NIBPNJII@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@NIBPNJII@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@FLMNEBJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
CONST	SEGMENT
??_C@_1EO@FLMNEBJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, ')'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@ DB '('
	DB	00H, 'k', 00H, 'i', 00H, 'n', 00H, 'd', 00H, ')', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n'
	DB	00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H
	DB	'4', 00H, 'B', 00H, 'Y', 00H, 'T', 00H, 'E', 00H, '_', 00H, 'K'
	DB	00H, 'I', 00H, 'N', 00H, 'D', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@DCHOFDGA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1FC@DCHOFDGA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'm', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'f', 00H, 'i', 00H, 'e'
	DB	00H, 'd', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@KIFGNPEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@KIFGNPEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'm', 00H
	DB	'o', 00H, 'd', 00H, 'i', 00H, 'f', 00H, 'i', 00H, 'e', 00H, 'd'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'i', 00H
	DB	'f', 00H, 'i', 00H, 'e', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'o', 00H, 'u', 00H, 't', 00H, 'p', 00H
	DB	'u', 00H, 't', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, '_', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PGPMIJF@IncrementalNewlineDecoder?4__init@
CONST	SEGMENT
??_C@_0CO@PGPMIJF@IncrementalNewlineDecoder?4__init@ DB 'IncrementalNewli'
	DB	'neDecoder.__init__ not called', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyIncrementalNewlineDecoder_decode
_TEXT	SEGMENT
output$ = 48
self$ = 56
output_len$ = 64
kind$20689 = 72
modified$20690 = 80
out$20691 = 88
modified$20883 = 96
kind$20891 = 104
in_str$20887 = 112
len$20888 = 120
seennl$20889 = 128
only_lf$20890 = 132
i$20926 = 136
c$20930 = 144
i$20946 = 152
c$20952 = 160
kind$20977 = 164
in_str$20983 = 168
translated$20976 = 176
in$20999 = 184
out$21000 = 192
c$21006 = 200
tv73 = 208
tv209 = 216
tv207 = 220
tv206 = 224
tv266 = 232
tv275 = 240
tv276 = 248
tv310 = 256
tv319 = 264
tv353 = 272
tv362 = 280
tv401 = 288
tv410 = 296
tv451 = 304
tv460 = 312
tv540 = 320
tv549 = 328
tv667 = 336
tv606 = 344
tv615 = 352
tv666 = 360
tv653 = 368
tv662 = 376
tv715 = 384
tv724 = 392
tv771 = 400
tv793 = 404
tv792 = 408
tv809 = 412
tv808 = 416
tv828 = 420
tv827 = 424
tv844 = 428
tv843 = 432
tv858 = 436
tv857 = 440
tv917 = 448
tv926 = 456
tv945 = 464
tv944 = 468
tv947 = 472
tv965 = 476
tv994 = 480
tv993 = 484
tv999 = 488
tv1017 = 492
myself$ = 512
input$ = 520
final$ = 528
_PyIncrementalNewlineDecoder_decode PROC		; COMDAT

; 287  : {

$LN244:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H

; 288  :     PyObject *output;
; 289  :     Py_ssize_t output_len;
; 290  :     nldecoder_object *self = (nldecoder_object *) myself;

  00016	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR myself$[rsp]
  0001e	48 89 44 24 38	 mov	 QWORD PTR self$[rsp], rax

; 291  : 
; 292  :     if (self->decoder == NULL) {

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  00028	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0002d	75 1a		 jne	 SHORT $LN89@PyIncremen

; 293  :         PyErr_SetString(PyExc_ValueError,
; 294  :                         "IncrementalNewlineDecoder.__init__ not called");

  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@PGPMIJF@IncrementalNewlineDecoder?4__init@
  00036	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0003d	e8 00 00 00 00	 call	 PyErr_SetString

; 295  :         return NULL;

  00042	33 c0		 xor	 eax, eax
  00044	e9 b0 1f 00 00	 jmp	 $LN90@PyIncremen
$LN89@PyIncremen:

; 296  :     }
; 297  : 
; 298  :     /* decode input (with the eventual \r from a previous pass) */
; 299  :     if (self->decoder != Py_None) {

  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00050	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  00055	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00059	74 5f		 je	 SHORT $LN88@PyIncremen

; 300  :         output = PyObject_CallMethodObjArgs(self->decoder,
; 301  :             _PyIO_str_decode, input, final ? Py_True : Py_False, NULL);

  0005b	83 bc 24 10 02
	00 00 00	 cmp	 DWORD PTR final$[rsp], 0
  00063	74 11		 je	 SHORT $LN92@PyIncremen
  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0006c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
  00074	eb 0f		 jmp	 SHORT $LN93@PyIncremen
$LN92@PyIncremen:
  00076	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0007d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN93@PyIncremen:
  00085	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008e	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR tv73[rsp]
  00096	4c 8b 84 24 08
	02 00 00	 mov	 r8, QWORD PTR input$[rsp]
  0009e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_decode
  000a5	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  000aa	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000ae	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  000b3	48 89 44 24 30	 mov	 QWORD PTR output$[rsp], rax

; 302  :     }
; 303  :     else {

  000b8	eb 17		 jmp	 SHORT $LN87@PyIncremen
$LN88@PyIncremen:

; 304  :         output = input;

  000ba	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR input$[rsp]
  000c2	48 89 44 24 30	 mov	 QWORD PTR output$[rsp], rax

; 305  :         Py_INCREF(output);

  000c7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR output$[rsp]
  000cc	e8 00 00 00 00	 call	 _Py_IncRef
$LN87@PyIncremen:

; 306  :     }
; 307  : 
; 308  :     if (check_decoded(output) < 0)

  000d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR output$[rsp]
  000d6	e8 00 00 00 00	 call	 check_decoded
  000db	85 c0		 test	 eax, eax
  000dd	7d 07		 jge	 SHORT $LN86@PyIncremen

; 309  :         return NULL;

  000df	33 c0		 xor	 eax, eax
  000e1	e9 13 1f 00 00	 jmp	 $LN90@PyIncremen
$LN86@PyIncremen:

; 310  : 
; 311  :     output_len = PyUnicode_GET_LENGTH(output);

  000e6	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  000eb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ef	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000fa	85 c0		 test	 eax, eax
  000fc	75 1c		 jne	 SHORT $LN94@PyIncremen
  000fe	41 b8 37 01 00
	00		 mov	 r8d, 311		; 00000137H
  00104	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  00112	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00118	33 c0		 xor	 eax, eax
$LN94@PyIncremen:
  0011a	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  0011f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00122	c1 e8 07	 shr	 eax, 7
  00125	83 e0 01	 and	 eax, 1
  00128	85 c0		 test	 eax, eax
  0012a	75 1c		 jne	 SHORT $LN95@PyIncremen
  0012c	41 b8 37 01 00
	00		 mov	 r8d, 311		; 00000137H
  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00146	33 c0		 xor	 eax, eax
$LN95@PyIncremen:
  00148	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  0014d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00151	48 89 44 24 40	 mov	 QWORD PTR output_len$[rsp], rax

; 312  :     if (self->pendingcr && (final || output_len > 0)) {

  00156	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  0015b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0015e	c1 e0 1f	 shl	 eax, 31
  00161	c1 f8 1f	 sar	 eax, 31
  00164	85 c0		 test	 eax, eax
  00166	0f 84 9a 09 00
	00		 je	 $LN85@PyIncremen
  0016c	83 bc 24 10 02
	00 00 00	 cmp	 DWORD PTR final$[rsp], 0
  00174	75 0c		 jne	 SHORT $LN84@PyIncremen
  00176	48 83 7c 24 40
	00		 cmp	 QWORD PTR output_len$[rsp], 0
  0017c	0f 8e 84 09 00
	00		 jle	 $LN85@PyIncremen
$LN84@PyIncremen:

; 313  :         /* Prefix output with CR */
; 314  :         int kind;
; 315  :         PyObject *modified;
; 316  :         char *out;
; 317  : 
; 318  :         modified = PyUnicode_New(output_len + 1,
; 319  :                                  PyUnicode_MAX_CHAR_VALUE(output));

  00182	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00187	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0018a	c1 e8 07	 shr	 eax, 7
  0018d	83 e0 01	 and	 eax, 1
  00190	85 c0		 test	 eax, eax
  00192	75 1c		 jne	 SHORT $LN96@PyIncremen
  00194	41 b8 3f 01 00
	00		 mov	 r8d, 319		; 0000013fH
  0019a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  001a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  001a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ae	33 c0		 xor	 eax, eax
$LN96@PyIncremen:
  001b0	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  001b5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001b9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001bf	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001c4	85 c0		 test	 eax, eax
  001c6	75 1c		 jne	 SHORT $LN97@PyIncremen
  001c8	41 b8 3f 01 00
	00		 mov	 r8d, 319		; 0000013fH
  001ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  001d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  001dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001e2	33 c0		 xor	 eax, eax
$LN97@PyIncremen:
  001e4	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  001e9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001ec	c1 e8 07	 shr	 eax, 7
  001ef	83 e0 01	 and	 eax, 1
  001f2	85 c0		 test	 eax, eax
  001f4	75 1c		 jne	 SHORT $LN98@PyIncremen
  001f6	41 b8 3f 01 00
	00		 mov	 r8d, 319		; 0000013fH
  001fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00210	33 c0		 xor	 eax, eax
$LN98@PyIncremen:
  00212	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00217	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0021a	c1 e8 06	 shr	 eax, 6
  0021d	83 e0 01	 and	 eax, 1
  00220	85 c0		 test	 eax, eax
  00222	74 10		 je	 SHORT $LN107@PyIncremen
  00224	c7 84 24 d8 00
	00 00 7f 00 00
	00		 mov	 DWORD PTR tv209[rsp], 127 ; 0000007fH
  0022f	e9 2e 01 00 00	 jmp	 $LN108@PyIncremen
$LN107@PyIncremen:
  00234	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00239	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0023d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00243	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00248	85 c0		 test	 eax, eax
  0024a	75 1c		 jne	 SHORT $LN99@PyIncremen
  0024c	41 b8 3f 01 00
	00		 mov	 r8d, 319		; 0000013fH
  00252	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  00260	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00266	33 c0		 xor	 eax, eax
$LN99@PyIncremen:
  00268	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  0026d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00270	c1 e8 07	 shr	 eax, 7
  00273	83 e0 01	 and	 eax, 1
  00276	85 c0		 test	 eax, eax
  00278	75 1c		 jne	 SHORT $LN100@PyIncremen
  0027a	41 b8 3f 01 00
	00		 mov	 r8d, 319		; 0000013fH
  00280	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00287	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  0028e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00294	33 c0		 xor	 eax, eax
$LN100@PyIncremen:
  00296	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  0029b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0029e	c1 e8 02	 shr	 eax, 2
  002a1	83 e0 07	 and	 eax, 7
  002a4	83 f8 01	 cmp	 eax, 1
  002a7	75 10		 jne	 SHORT $LN105@PyIncremen
  002a9	c7 84 24 dc 00
	00 00 ff 00 00
	00		 mov	 DWORD PTR tv207[rsp], 255 ; 000000ffH
  002b4	e9 9b 00 00 00	 jmp	 $LN106@PyIncremen
$LN105@PyIncremen:
  002b9	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  002be	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002c2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002c8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002cd	85 c0		 test	 eax, eax
  002cf	75 1c		 jne	 SHORT $LN101@PyIncremen
  002d1	41 b8 3f 01 00
	00		 mov	 r8d, 319		; 0000013fH
  002d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  002e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002eb	33 c0		 xor	 eax, eax
$LN101@PyIncremen:
  002ed	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  002f2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002f5	c1 e8 07	 shr	 eax, 7
  002f8	83 e0 01	 and	 eax, 1
  002fb	85 c0		 test	 eax, eax
  002fd	75 1c		 jne	 SHORT $LN102@PyIncremen
  002ff	41 b8 3f 01 00
	00		 mov	 r8d, 319		; 0000013fH
  00305	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0030c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  00313	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00319	33 c0		 xor	 eax, eax
$LN102@PyIncremen:
  0031b	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00320	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00323	c1 e8 02	 shr	 eax, 2
  00326	83 e0 07	 and	 eax, 7
  00329	83 f8 02	 cmp	 eax, 2
  0032c	75 0d		 jne	 SHORT $LN103@PyIncremen
  0032e	c7 84 24 e0 00
	00 00 ff ff 00
	00		 mov	 DWORD PTR tv206[rsp], 65535 ; 0000ffffH
  00339	eb 0b		 jmp	 SHORT $LN104@PyIncremen
$LN103@PyIncremen:
  0033b	c7 84 24 e0 00
	00 00 ff ff 10
	00		 mov	 DWORD PTR tv206[rsp], 1114111 ; 0010ffffH
$LN104@PyIncremen:
  00346	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR tv206[rsp]
  0034d	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv207[rsp], eax
$LN106@PyIncremen:
  00354	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tv207[rsp]
  0035b	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv209[rsp], eax
$LN108@PyIncremen:
  00362	48 8b 44 24 40	 mov	 rax, QWORD PTR output_len$[rsp]
  00367	48 ff c0	 inc	 rax
  0036a	8b 94 24 d8 00
	00 00		 mov	 edx, DWORD PTR tv209[rsp]
  00371	48 8b c8	 mov	 rcx, rax
  00374	e8 00 00 00 00	 call	 PyUnicode_New
  00379	48 89 44 24 50	 mov	 QWORD PTR modified$20690[rsp], rax

; 320  :         if (modified == NULL)

  0037e	48 83 7c 24 50
	00		 cmp	 QWORD PTR modified$20690[rsp], 0
  00384	75 05		 jne	 SHORT $LN83@PyIncremen

; 321  :             goto error;

  00386	e9 62 1c 00 00	 jmp	 $error$20711
$LN83@PyIncremen:

; 322  :         kind = PyUnicode_KIND(modified);

  0038b	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00390	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00394	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0039a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0039f	85 c0		 test	 eax, eax
  003a1	75 1c		 jne	 SHORT $LN109@PyIncremen
  003a3	41 b8 42 01 00
	00		 mov	 r8d, 322		; 00000142H
  003a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  003b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  003b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003bd	33 c0		 xor	 eax, eax
$LN109@PyIncremen:
  003bf	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  003c4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003c7	c1 e8 07	 shr	 eax, 7
  003ca	83 e0 01	 and	 eax, 1
  003cd	85 c0		 test	 eax, eax
  003cf	75 1c		 jne	 SHORT $LN110@PyIncremen
  003d1	41 b8 42 01 00
	00		 mov	 r8d, 322		; 00000142H
  003d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  003de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@KIFGNPEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  003e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003eb	33 c0		 xor	 eax, eax
$LN110@PyIncremen:
  003ed	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  003f2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003f5	c1 e8 02	 shr	 eax, 2
  003f8	83 e0 07	 and	 eax, 7
  003fb	89 44 24 48	 mov	 DWORD PTR kind$20689[rsp], eax

; 323  :         out = PyUnicode_DATA(modified);

  003ff	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00404	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00408	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0040e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00413	85 c0		 test	 eax, eax
  00415	75 1c		 jne	 SHORT $LN111@PyIncremen
  00417	41 b8 43 01 00
	00		 mov	 r8d, 323		; 00000143H
  0041d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00424	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  0042b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00431	33 c0		 xor	 eax, eax
$LN111@PyIncremen:
  00433	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00438	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0043b	c1 e8 05	 shr	 eax, 5
  0043e	83 e0 01	 and	 eax, 1
  00441	85 c0		 test	 eax, eax
  00443	0f 84 ae 00 00
	00		 je	 $LN117@PyIncremen
  00449	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  0044e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00452	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00458	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0045d	85 c0		 test	 eax, eax
  0045f	75 1c		 jne	 SHORT $LN112@PyIncremen
  00461	41 b8 43 01 00
	00		 mov	 r8d, 323		; 00000143H
  00467	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0046e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00475	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0047b	33 c0		 xor	 eax, eax
$LN112@PyIncremen:
  0047d	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00482	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00485	c1 e8 07	 shr	 eax, 7
  00488	83 e0 01	 and	 eax, 1
  0048b	85 c0		 test	 eax, eax
  0048d	75 1c		 jne	 SHORT $LN113@PyIncremen
  0048f	41 b8 43 01 00
	00		 mov	 r8d, 323		; 00000143H
  00495	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0049c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@KIFGNPEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  004a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004a9	33 c0		 xor	 eax, eax
$LN113@PyIncremen:
  004ab	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  004b0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004b3	c1 e8 06	 shr	 eax, 6
  004b6	83 e0 01	 and	 eax, 1
  004b9	85 c0		 test	 eax, eax
  004bb	74 15		 je	 SHORT $LN114@PyIncremen
  004bd	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  004c2	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  004c8	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv266[rsp], rax
  004d0	eb 13		 jmp	 SHORT $LN115@PyIncremen
$LN114@PyIncremen:
  004d2	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  004d7	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  004dd	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv266[rsp], rax
$LN115@PyIncremen:
  004e5	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv266[rsp]
  004ed	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv275[rsp], rax
  004f5	eb 3f		 jmp	 SHORT $LN118@PyIncremen
$LN117@PyIncremen:
  004f7	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  004fc	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00504	75 1c		 jne	 SHORT $LN116@PyIncremen
  00506	41 b8 43 01 00
	00		 mov	 r8d, 323		; 00000143H
  0050c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00513	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@DCHOFDGA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  0051a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00520	33 c0		 xor	 eax, eax
$LN116@PyIncremen:
  00522	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00527	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0052e	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv275[rsp], rax
$LN118@PyIncremen:
  00536	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv275[rsp]
  0053e	48 89 44 24 58	 mov	 QWORD PTR out$20691[rsp], rax
$LN82@PyIncremen:

; 324  :         PyUnicode_WRITE(kind, PyUnicode_DATA(modified), 0, '\r');

  00543	8b 44 24 48	 mov	 eax, DWORD PTR kind$20689[rsp]
  00547	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv276[rsp], eax
  0054e	83 bc 24 f8 00
	00 00 01	 cmp	 DWORD PTR tv276[rsp], 1
  00556	74 13		 je	 SHORT $LN77@PyIncremen
  00558	83 bc 24 f8 00
	00 00 02	 cmp	 DWORD PTR tv276[rsp], 2
  00560	0f 84 4c 01 00
	00		 je	 $LN76@PyIncremen
  00566	e9 93 02 00 00	 jmp	 $LN75@PyIncremen
$LN77@PyIncremen:
  0056b	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00570	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00574	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0057a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0057f	85 c0		 test	 eax, eax
  00581	75 1c		 jne	 SHORT $LN119@PyIncremen
  00583	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  00589	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00590	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00597	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0059d	33 c0		 xor	 eax, eax
$LN119@PyIncremen:
  0059f	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  005a4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005a7	c1 e8 05	 shr	 eax, 5
  005aa	83 e0 01	 and	 eax, 1
  005ad	85 c0		 test	 eax, eax
  005af	0f 84 ae 00 00
	00		 je	 $LN125@PyIncremen
  005b5	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  005ba	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  005be	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  005c4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  005c9	85 c0		 test	 eax, eax
  005cb	75 1c		 jne	 SHORT $LN120@PyIncremen
  005cd	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  005d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  005da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  005e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005e7	33 c0		 xor	 eax, eax
$LN120@PyIncremen:
  005e9	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  005ee	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005f1	c1 e8 07	 shr	 eax, 7
  005f4	83 e0 01	 and	 eax, 1
  005f7	85 c0		 test	 eax, eax
  005f9	75 1c		 jne	 SHORT $LN121@PyIncremen
  005fb	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  00601	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00608	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@KIFGNPEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  0060f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00615	33 c0		 xor	 eax, eax
$LN121@PyIncremen:
  00617	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  0061c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0061f	c1 e8 06	 shr	 eax, 6
  00622	83 e0 01	 and	 eax, 1
  00625	85 c0		 test	 eax, eax
  00627	74 15		 je	 SHORT $LN122@PyIncremen
  00629	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  0062e	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00634	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv310[rsp], rax
  0063c	eb 13		 jmp	 SHORT $LN123@PyIncremen
$LN122@PyIncremen:
  0063e	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00643	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00649	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv310[rsp], rax
$LN123@PyIncremen:
  00651	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv310[rsp]
  00659	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv319[rsp], rax
  00661	eb 3f		 jmp	 SHORT $LN126@PyIncremen
$LN125@PyIncremen:
  00663	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00668	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00670	75 1c		 jne	 SHORT $LN124@PyIncremen
  00672	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  00678	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0067f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@DCHOFDGA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  00686	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0068c	33 c0		 xor	 eax, eax
$LN124@PyIncremen:
  0068e	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00693	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0069a	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv319[rsp], rax
$LN126@PyIncremen:
  006a2	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv319[rsp]
  006aa	c6 00 0d	 mov	 BYTE PTR [rax], 13
  006ad	e9 b4 02 00 00	 jmp	 $LN78@PyIncremen
$LN76@PyIncremen:
  006b2	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  006b7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  006bb	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  006c1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  006c6	85 c0		 test	 eax, eax
  006c8	75 1c		 jne	 SHORT $LN127@PyIncremen
  006ca	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  006d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  006d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  006de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006e4	33 c0		 xor	 eax, eax
$LN127@PyIncremen:
  006e6	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  006eb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006ee	c1 e8 05	 shr	 eax, 5
  006f1	83 e0 01	 and	 eax, 1
  006f4	85 c0		 test	 eax, eax
  006f6	0f 84 ae 00 00
	00		 je	 $LN133@PyIncremen
  006fc	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00701	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00705	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0070b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00710	85 c0		 test	 eax, eax
  00712	75 1c		 jne	 SHORT $LN128@PyIncremen
  00714	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  0071a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00721	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00728	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0072e	33 c0		 xor	 eax, eax
$LN128@PyIncremen:
  00730	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00735	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00738	c1 e8 07	 shr	 eax, 7
  0073b	83 e0 01	 and	 eax, 1
  0073e	85 c0		 test	 eax, eax
  00740	75 1c		 jne	 SHORT $LN129@PyIncremen
  00742	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  00748	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0074f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@KIFGNPEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00756	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0075c	33 c0		 xor	 eax, eax
$LN129@PyIncremen:
  0075e	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00763	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00766	c1 e8 06	 shr	 eax, 6
  00769	83 e0 01	 and	 eax, 1
  0076c	85 c0		 test	 eax, eax
  0076e	74 15		 je	 SHORT $LN130@PyIncremen
  00770	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00775	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0077b	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv353[rsp], rax
  00783	eb 13		 jmp	 SHORT $LN131@PyIncremen
$LN130@PyIncremen:
  00785	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  0078a	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00790	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv353[rsp], rax
$LN131@PyIncremen:
  00798	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv353[rsp]
  007a0	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv362[rsp], rax
  007a8	eb 3f		 jmp	 SHORT $LN134@PyIncremen
$LN133@PyIncremen:
  007aa	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  007af	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  007b7	75 1c		 jne	 SHORT $LN132@PyIncremen
  007b9	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  007bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  007c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@DCHOFDGA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  007cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007d3	33 c0		 xor	 eax, eax
$LN132@PyIncremen:
  007d5	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  007da	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  007e1	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv362[rsp], rax
$LN134@PyIncremen:
  007e9	b8 0d 00 00 00	 mov	 eax, 13
  007ee	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv362[rsp]
  007f6	66 89 01	 mov	 WORD PTR [rcx], ax
  007f9	e9 68 01 00 00	 jmp	 $LN78@PyIncremen
$LN75@PyIncremen:
  007fe	83 7c 24 48 04	 cmp	 DWORD PTR kind$20689[rsp], 4
  00803	74 1c		 je	 SHORT $LN135@PyIncremen
  00805	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  0080b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00812	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  00819	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0081f	33 c0		 xor	 eax, eax
$LN135@PyIncremen:
  00821	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00826	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0082a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00830	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00835	85 c0		 test	 eax, eax
  00837	75 1c		 jne	 SHORT $LN136@PyIncremen
  00839	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  0083f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00846	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  0084d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00853	33 c0		 xor	 eax, eax
$LN136@PyIncremen:
  00855	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  0085a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0085d	c1 e8 05	 shr	 eax, 5
  00860	83 e0 01	 and	 eax, 1
  00863	85 c0		 test	 eax, eax
  00865	0f 84 ae 00 00
	00		 je	 $LN142@PyIncremen
  0086b	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00870	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00874	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0087a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0087f	85 c0		 test	 eax, eax
  00881	75 1c		 jne	 SHORT $LN137@PyIncremen
  00883	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  00889	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00890	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@ICAKELME@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00897	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0089d	33 c0		 xor	 eax, eax
$LN137@PyIncremen:
  0089f	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  008a4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  008a7	c1 e8 07	 shr	 eax, 7
  008aa	83 e0 01	 and	 eax, 1
  008ad	85 c0		 test	 eax, eax
  008af	75 1c		 jne	 SHORT $LN138@PyIncremen
  008b1	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  008b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  008be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@KIFGNPEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  008c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008cb	33 c0		 xor	 eax, eax
$LN138@PyIncremen:
  008cd	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  008d2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  008d5	c1 e8 06	 shr	 eax, 6
  008d8	83 e0 01	 and	 eax, 1
  008db	85 c0		 test	 eax, eax
  008dd	74 15		 je	 SHORT $LN139@PyIncremen
  008df	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  008e4	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  008ea	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv401[rsp], rax
  008f2	eb 13		 jmp	 SHORT $LN140@PyIncremen
$LN139@PyIncremen:
  008f4	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  008f9	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  008ff	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv401[rsp], rax
$LN140@PyIncremen:
  00907	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR tv401[rsp]
  0090f	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv410[rsp], rax
  00917	eb 3f		 jmp	 SHORT $LN143@PyIncremen
$LN142@PyIncremen:
  00919	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  0091e	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00926	75 1c		 jne	 SHORT $LN141@PyIncremen
  00928	41 b8 44 01 00
	00		 mov	 r8d, 324		; 00000144H
  0092e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00935	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@DCHOFDGA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAm?$AAo?$AAd?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  0093c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00942	33 c0		 xor	 eax, eax
$LN141@PyIncremen:
  00944	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00949	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00950	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv410[rsp], rax
$LN143@PyIncremen:
  00958	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR tv410[rsp]
  00960	c7 00 0d 00 00
	00		 mov	 DWORD PTR [rax], 13
$LN78@PyIncremen:
  00966	33 c0		 xor	 eax, eax
  00968	85 c0		 test	 eax, eax
  0096a	0f 85 d3 fb ff
	ff		 jne	 $LN82@PyIncremen

; 325  :         memcpy(out + kind, PyUnicode_DATA(output), kind * output_len);

  00970	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00975	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00979	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0097f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00984	85 c0		 test	 eax, eax
  00986	75 1c		 jne	 SHORT $LN144@PyIncremen
  00988	41 b8 45 01 00
	00		 mov	 r8d, 325		; 00000145H
  0098e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00995	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  0099c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009a2	33 c0		 xor	 eax, eax
$LN144@PyIncremen:
  009a4	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  009a9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  009ac	c1 e8 05	 shr	 eax, 5
  009af	83 e0 01	 and	 eax, 1
  009b2	85 c0		 test	 eax, eax
  009b4	0f 84 ae 00 00
	00		 je	 $LN150@PyIncremen
  009ba	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  009bf	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  009c3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  009c9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  009ce	85 c0		 test	 eax, eax
  009d0	75 1c		 jne	 SHORT $LN145@PyIncremen
  009d2	41 b8 45 01 00
	00		 mov	 r8d, 325		; 00000145H
  009d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  009df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  009e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009ec	33 c0		 xor	 eax, eax
$LN145@PyIncremen:
  009ee	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  009f3	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  009f6	c1 e8 07	 shr	 eax, 7
  009f9	83 e0 01	 and	 eax, 1
  009fc	85 c0		 test	 eax, eax
  009fe	75 1c		 jne	 SHORT $LN146@PyIncremen
  00a00	41 b8 45 01 00
	00		 mov	 r8d, 325		; 00000145H
  00a06	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00a0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  00a14	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a1a	33 c0		 xor	 eax, eax
$LN146@PyIncremen:
  00a1c	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00a21	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00a24	c1 e8 06	 shr	 eax, 6
  00a27	83 e0 01	 and	 eax, 1
  00a2a	85 c0		 test	 eax, eax
  00a2c	74 15		 je	 SHORT $LN147@PyIncremen
  00a2e	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00a33	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00a39	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv451[rsp], rax
  00a41	eb 13		 jmp	 SHORT $LN148@PyIncremen
$LN147@PyIncremen:
  00a43	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00a48	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00a4e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv451[rsp], rax
$LN148@PyIncremen:
  00a56	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR tv451[rsp]
  00a5e	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv460[rsp], rax
  00a66	eb 3f		 jmp	 SHORT $LN151@PyIncremen
$LN150@PyIncremen:
  00a68	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00a6d	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00a75	75 1c		 jne	 SHORT $LN149@PyIncremen
  00a77	41 b8 45 01 00
	00		 mov	 r8d, 325		; 00000145H
  00a7d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00a84	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@FLMNEBJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  00a8b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a91	33 c0		 xor	 eax, eax
$LN149@PyIncremen:
  00a93	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00a98	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00a9f	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv460[rsp], rax
$LN151@PyIncremen:
  00aa7	48 63 44 24 48	 movsxd	 rax, DWORD PTR kind$20689[rsp]
  00aac	48 0f af 44 24
	40		 imul	 rax, QWORD PTR output_len$[rsp]
  00ab2	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR kind$20689[rsp]
  00ab7	48 8b 54 24 58	 mov	 rdx, QWORD PTR out$20691[rsp]
  00abc	48 03 d1	 add	 rdx, rcx
  00abf	48 8b ca	 mov	 rcx, rdx
  00ac2	4c 8b c0	 mov	 r8, rax
  00ac5	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR tv460[rsp]
  00acd	e8 00 00 00 00	 call	 memcpy

; 326  :         Py_DECREF(output);

  00ad2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR output$[rsp]
  00ad7	e8 00 00 00 00	 call	 _Py_DecRef

; 327  :         output = modified; /* output remains ready */

  00adc	48 8b 44 24 50	 mov	 rax, QWORD PTR modified$20690[rsp]
  00ae1	48 89 44 24 30	 mov	 QWORD PTR output$[rsp], rax

; 328  :         self->pendingcr = 0;

  00ae6	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  00aeb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00aee	83 e0 fe	 and	 eax, -2
  00af1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  00af6	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 329  :         output_len++;

  00af9	48 8b 44 24 40	 mov	 rax, QWORD PTR output_len$[rsp]
  00afe	48 ff c0	 inc	 rax
  00b01	48 89 44 24 40	 mov	 QWORD PTR output_len$[rsp], rax
$LN85@PyIncremen:

; 330  :     }
; 331  : 
; 332  :     /* retain last \r even when not translating data:
; 333  :      * then readline() is sure to get \r\n in one pass
; 334  :      */
; 335  :     if (!final) {

  00b06	83 bc 24 10 02
	00 00 00	 cmp	 DWORD PTR final$[rsp], 0
  00b0e	0f 85 c6 05 00
	00		 jne	 $LN74@PyIncremen

; 336  :         if (output_len > 0
; 337  :             && PyUnicode_READ_CHAR(output, output_len - 1) == '\r')

  00b14	48 83 7c 24 40
	00		 cmp	 QWORD PTR output_len$[rsp], 0
  00b1a	0f 8e ba 05 00
	00		 jle	 $LN73@PyIncremen
  00b20	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00b25	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00b29	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b2f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00b34	85 c0		 test	 eax, eax
  00b36	75 1c		 jne	 SHORT $LN152@PyIncremen
  00b38	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00b3e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00b45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  00b4c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b52	33 c0		 xor	 eax, eax
$LN152@PyIncremen:
  00b54	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00b59	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b5c	c1 e8 07	 shr	 eax, 7
  00b5f	83 e0 01	 and	 eax, 1
  00b62	85 c0		 test	 eax, eax
  00b64	75 1c		 jne	 SHORT $LN153@PyIncremen
  00b66	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00b6c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00b73	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  00b7a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b80	33 c0		 xor	 eax, eax
$LN153@PyIncremen:
  00b82	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00b87	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00b8b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b91	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00b96	85 c0		 test	 eax, eax
  00b98	75 1c		 jne	 SHORT $LN154@PyIncremen
  00b9a	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00ba0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00ba7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NIBPNJII@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00bae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00bb4	33 c0		 xor	 eax, eax
$LN154@PyIncremen:
  00bb6	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00bbb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00bbe	c1 e8 07	 shr	 eax, 7
  00bc1	83 e0 01	 and	 eax, 1
  00bc4	85 c0		 test	 eax, eax
  00bc6	75 1c		 jne	 SHORT $LN155@PyIncremen
  00bc8	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00bce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00bd5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PCEDENAB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00bdc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00be2	33 c0		 xor	 eax, eax
$LN155@PyIncremen:
  00be4	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00be9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00bec	c1 e8 02	 shr	 eax, 2
  00bef	83 e0 07	 and	 eax, 7
  00bf2	83 f8 01	 cmp	 eax, 1
  00bf5	0f 85 5a 01 00
	00		 jne	 $LN184@PyIncremen
  00bfb	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00c00	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c04	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c0a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00c0f	85 c0		 test	 eax, eax
  00c11	75 1c		 jne	 SHORT $LN156@PyIncremen
  00c13	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00c19	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00c20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NIBPNJII@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00c27	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c2d	33 c0		 xor	 eax, eax
$LN156@PyIncremen:
  00c2f	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00c34	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00c37	c1 e8 05	 shr	 eax, 5
  00c3a	83 e0 01	 and	 eax, 1
  00c3d	85 c0		 test	 eax, eax
  00c3f	0f 84 ae 00 00
	00		 je	 $LN162@PyIncremen
  00c45	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00c4a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c4e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c54	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00c59	85 c0		 test	 eax, eax
  00c5b	75 1c		 jne	 SHORT $LN157@PyIncremen
  00c5d	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00c63	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00c6a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NIBPNJII@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00c71	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c77	33 c0		 xor	 eax, eax
$LN157@PyIncremen:
  00c79	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00c7e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00c81	c1 e8 07	 shr	 eax, 7
  00c84	83 e0 01	 and	 eax, 1
  00c87	85 c0		 test	 eax, eax
  00c89	75 1c		 jne	 SHORT $LN158@PyIncremen
  00c8b	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00c91	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00c98	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PCEDENAB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00c9f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ca5	33 c0		 xor	 eax, eax
$LN158@PyIncremen:
  00ca7	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00cac	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00caf	c1 e8 06	 shr	 eax, 6
  00cb2	83 e0 01	 and	 eax, 1
  00cb5	85 c0		 test	 eax, eax
  00cb7	74 15		 je	 SHORT $LN159@PyIncremen
  00cb9	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00cbe	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00cc4	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv540[rsp], rax
  00ccc	eb 13		 jmp	 SHORT $LN160@PyIncremen
$LN159@PyIncremen:
  00cce	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00cd3	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00cd9	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv540[rsp], rax
$LN160@PyIncremen:
  00ce1	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR tv540[rsp]
  00ce9	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv549[rsp], rax
  00cf1	eb 3f		 jmp	 SHORT $LN163@PyIncremen
$LN162@PyIncremen:
  00cf3	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00cf8	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00d00	75 1c		 jne	 SHORT $LN161@PyIncremen
  00d02	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00d08	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00d0f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@GIFCPMPJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  00d16	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d1c	33 c0		 xor	 eax, eax
$LN161@PyIncremen:
  00d1e	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00d23	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00d2a	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv549[rsp], rax
$LN163@PyIncremen:
  00d32	48 8b 44 24 40	 mov	 rax, QWORD PTR output_len$[rsp]
  00d37	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR tv549[rsp]
  00d3f	48 03 c8	 add	 rcx, rax
  00d42	48 8b c1	 mov	 rax, rcx
  00d45	0f b6 40 ff	 movzx	 eax, BYTE PTR [rax-1]
  00d49	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv667[rsp], eax
  00d50	e9 2b 03 00 00	 jmp	 $LN185@PyIncremen
$LN184@PyIncremen:
  00d55	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00d5a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00d5e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00d64	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00d69	85 c0		 test	 eax, eax
  00d6b	75 1c		 jne	 SHORT $LN164@PyIncremen
  00d6d	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00d73	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00d7a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NIBPNJII@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00d81	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d87	33 c0		 xor	 eax, eax
$LN164@PyIncremen:
  00d89	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00d8e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00d91	c1 e8 07	 shr	 eax, 7
  00d94	83 e0 01	 and	 eax, 1
  00d97	85 c0		 test	 eax, eax
  00d99	75 1c		 jne	 SHORT $LN165@PyIncremen
  00d9b	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00da1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00da8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PCEDENAB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00daf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00db5	33 c0		 xor	 eax, eax
$LN165@PyIncremen:
  00db7	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00dbc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00dbf	c1 e8 02	 shr	 eax, 2
  00dc2	83 e0 07	 and	 eax, 7
  00dc5	83 f8 02	 cmp	 eax, 2
  00dc8	0f 85 55 01 00
	00		 jne	 $LN182@PyIncremen
  00dce	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00dd3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00dd7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00ddd	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00de2	85 c0		 test	 eax, eax
  00de4	75 1c		 jne	 SHORT $LN166@PyIncremen
  00de6	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00dec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00df3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NIBPNJII@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00dfa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00e00	33 c0		 xor	 eax, eax
$LN166@PyIncremen:
  00e02	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00e07	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00e0a	c1 e8 05	 shr	 eax, 5
  00e0d	83 e0 01	 and	 eax, 1
  00e10	85 c0		 test	 eax, eax
  00e12	0f 84 ae 00 00
	00		 je	 $LN172@PyIncremen
  00e18	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00e1d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00e21	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00e27	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00e2c	85 c0		 test	 eax, eax
  00e2e	75 1c		 jne	 SHORT $LN167@PyIncremen
  00e30	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00e36	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00e3d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NIBPNJII@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00e44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00e4a	33 c0		 xor	 eax, eax
$LN167@PyIncremen:
  00e4c	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00e51	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00e54	c1 e8 07	 shr	 eax, 7
  00e57	83 e0 01	 and	 eax, 1
  00e5a	85 c0		 test	 eax, eax
  00e5c	75 1c		 jne	 SHORT $LN168@PyIncremen
  00e5e	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00e64	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00e6b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PCEDENAB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00e72	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00e78	33 c0		 xor	 eax, eax
$LN168@PyIncremen:
  00e7a	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00e7f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00e82	c1 e8 06	 shr	 eax, 6
  00e85	83 e0 01	 and	 eax, 1
  00e88	85 c0		 test	 eax, eax
  00e8a	74 15		 je	 SHORT $LN169@PyIncremen
  00e8c	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00e91	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00e97	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv606[rsp], rax
  00e9f	eb 13		 jmp	 SHORT $LN170@PyIncremen
$LN169@PyIncremen:
  00ea1	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00ea6	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00eac	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv606[rsp], rax
$LN170@PyIncremen:
  00eb4	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tv606[rsp]
  00ebc	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv615[rsp], rax
  00ec4	eb 3f		 jmp	 SHORT $LN173@PyIncremen
$LN172@PyIncremen:
  00ec6	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00ecb	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00ed3	75 1c		 jne	 SHORT $LN171@PyIncremen
  00ed5	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00edb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00ee2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@GIFCPMPJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  00ee9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00eef	33 c0		 xor	 eax, eax
$LN171@PyIncremen:
  00ef1	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00ef6	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00efd	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv615[rsp], rax
$LN173@PyIncremen:
  00f05	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR tv615[rsp]
  00f0d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR output_len$[rsp]
  00f12	0f b7 44 48 fe	 movzx	 eax, WORD PTR [rax+rcx*2-2]
  00f17	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv666[rsp], eax
  00f1e	e9 4f 01 00 00	 jmp	 $LN183@PyIncremen
$LN182@PyIncremen:
  00f23	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00f28	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00f2c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00f32	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00f37	85 c0		 test	 eax, eax
  00f39	75 1c		 jne	 SHORT $LN174@PyIncremen
  00f3b	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00f41	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00f48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NIBPNJII@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00f4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00f55	33 c0		 xor	 eax, eax
$LN174@PyIncremen:
  00f57	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00f5c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00f5f	c1 e8 05	 shr	 eax, 5
  00f62	83 e0 01	 and	 eax, 1
  00f65	85 c0		 test	 eax, eax
  00f67	0f 84 ae 00 00
	00		 je	 $LN180@PyIncremen
  00f6d	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00f72	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00f76	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00f7c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00f81	85 c0		 test	 eax, eax
  00f83	75 1c		 jne	 SHORT $LN175@PyIncremen
  00f85	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00f8b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00f92	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NIBPNJII@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00f99	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00f9f	33 c0		 xor	 eax, eax
$LN175@PyIncremen:
  00fa1	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00fa6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00fa9	c1 e8 07	 shr	 eax, 7
  00fac	83 e0 01	 and	 eax, 1
  00faf	85 c0		 test	 eax, eax
  00fb1	75 1c		 jne	 SHORT $LN176@PyIncremen
  00fb3	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  00fb9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00fc0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PCEDENAB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00fc7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00fcd	33 c0		 xor	 eax, eax
$LN176@PyIncremen:
  00fcf	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00fd4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00fd7	c1 e8 06	 shr	 eax, 6
  00fda	83 e0 01	 and	 eax, 1
  00fdd	85 c0		 test	 eax, eax
  00fdf	74 15		 je	 SHORT $LN177@PyIncremen
  00fe1	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00fe6	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00fec	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv653[rsp], rax
  00ff4	eb 13		 jmp	 SHORT $LN178@PyIncremen
$LN177@PyIncremen:
  00ff6	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  00ffb	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  01001	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv653[rsp], rax
$LN178@PyIncremen:
  01009	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR tv653[rsp]
  01011	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv662[rsp], rax
  01019	eb 3f		 jmp	 SHORT $LN181@PyIncremen
$LN180@PyIncremen:
  0101b	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01020	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  01028	75 1c		 jne	 SHORT $LN179@PyIncremen
  0102a	41 b8 51 01 00
	00		 mov	 r8d, 337		; 00000151H
  01030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@GIFCPMPJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  0103e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01044	33 c0		 xor	 eax, eax
$LN179@PyIncremen:
  01046	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  0104b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  01052	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv662[rsp], rax
$LN181@PyIncremen:
  0105a	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR tv662[rsp]
  01062	48 8b 4c 24 40	 mov	 rcx, QWORD PTR output_len$[rsp]
  01067	8b 44 88 fc	 mov	 eax, DWORD PTR [rax+rcx*4-4]
  0106b	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv666[rsp], eax
$LN183@PyIncremen:
  01072	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR tv666[rsp]
  01079	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv667[rsp], eax
$LN185@PyIncremen:
  01080	83 bc 24 50 01
	00 00 0d	 cmp	 DWORD PTR tv667[rsp], 13
  01088	75 50		 jne	 SHORT $LN73@PyIncremen

; 338  :         {
; 339  :             PyObject *modified = PyUnicode_Substring(output, 0, output_len -1);

  0108a	48 8b 44 24 40	 mov	 rax, QWORD PTR output_len$[rsp]
  0108f	48 ff c8	 dec	 rax
  01092	4c 8b c0	 mov	 r8, rax
  01095	33 d2		 xor	 edx, edx
  01097	48 8b 4c 24 30	 mov	 rcx, QWORD PTR output$[rsp]
  0109c	e8 00 00 00 00	 call	 PyUnicode_Substring
  010a1	48 89 44 24 60	 mov	 QWORD PTR modified$20883[rsp], rax

; 340  :             if (modified == NULL)

  010a6	48 83 7c 24 60
	00		 cmp	 QWORD PTR modified$20883[rsp], 0
  010ac	75 05		 jne	 SHORT $LN72@PyIncremen

; 341  :                 goto error;

  010ae	e9 3a 0f 00 00	 jmp	 $error$20711
$LN72@PyIncremen:

; 342  :             Py_DECREF(output);

  010b3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR output$[rsp]
  010b8	e8 00 00 00 00	 call	 _Py_DecRef

; 343  :             output = modified;

  010bd	48 8b 44 24 60	 mov	 rax, QWORD PTR modified$20883[rsp]
  010c2	48 89 44 24 30	 mov	 QWORD PTR output$[rsp], rax

; 344  :             self->pendingcr = 1;

  010c7	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  010cc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  010cf	83 c8 01	 or	 eax, 1
  010d2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  010d7	89 41 70	 mov	 DWORD PTR [rcx+112], eax
$LN73@PyIncremen:
$LN74@PyIncremen:

; 345  :         }
; 346  :     }
; 347  : 
; 348  :     /* Record which newlines are read and do newline translation if desired,
; 349  :        all in one pass. */
; 350  :     {
; 351  :         void *in_str;
; 352  :         Py_ssize_t len;
; 353  :         int seennl = self->seennl;

  010da	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  010df	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  010e2	c1 e8 02	 shr	 eax, 2
  010e5	83 e0 07	 and	 eax, 7
  010e8	89 84 24 80 00
	00 00		 mov	 DWORD PTR seennl$20889[rsp], eax

; 354  :         int only_lf = 0;

  010ef	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR only_lf$20890[rsp], 0

; 355  :         int kind;
; 356  : 
; 357  :         in_str = PyUnicode_DATA(output);

  010fa	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  010ff	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01103	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01109	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0110e	85 c0		 test	 eax, eax
  01110	75 1c		 jne	 SHORT $LN186@PyIncremen
  01112	41 b8 65 01 00
	00		 mov	 r8d, 357		; 00000165H
  01118	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0111f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  01126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0112c	33 c0		 xor	 eax, eax
$LN186@PyIncremen:
  0112e	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01133	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01136	c1 e8 05	 shr	 eax, 5
  01139	83 e0 01	 and	 eax, 1
  0113c	85 c0		 test	 eax, eax
  0113e	0f 84 ae 00 00
	00		 je	 $LN192@PyIncremen
  01144	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01149	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0114d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01153	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01158	85 c0		 test	 eax, eax
  0115a	75 1c		 jne	 SHORT $LN187@PyIncremen
  0115c	41 b8 65 01 00
	00		 mov	 r8d, 357		; 00000165H
  01162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  01170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01176	33 c0		 xor	 eax, eax
$LN187@PyIncremen:
  01178	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  0117d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01180	c1 e8 07	 shr	 eax, 7
  01183	83 e0 01	 and	 eax, 1
  01186	85 c0		 test	 eax, eax
  01188	75 1c		 jne	 SHORT $LN188@PyIncremen
  0118a	41 b8 65 01 00
	00		 mov	 r8d, 357		; 00000165H
  01190	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  0119e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  011a4	33 c0		 xor	 eax, eax
$LN188@PyIncremen:
  011a6	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  011ab	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  011ae	c1 e8 06	 shr	 eax, 6
  011b1	83 e0 01	 and	 eax, 1
  011b4	85 c0		 test	 eax, eax
  011b6	74 15		 je	 SHORT $LN189@PyIncremen
  011b8	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  011bd	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  011c3	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv715[rsp], rax
  011cb	eb 13		 jmp	 SHORT $LN190@PyIncremen
$LN189@PyIncremen:
  011cd	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  011d2	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  011d8	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv715[rsp], rax
$LN190@PyIncremen:
  011e0	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR tv715[rsp]
  011e8	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv724[rsp], rax
  011f0	eb 3f		 jmp	 SHORT $LN193@PyIncremen
$LN192@PyIncremen:
  011f2	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  011f7	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  011ff	75 1c		 jne	 SHORT $LN191@PyIncremen
  01201	41 b8 65 01 00
	00		 mov	 r8d, 357		; 00000165H
  01207	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0120e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@FLMNEBJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  01215	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0121b	33 c0		 xor	 eax, eax
$LN191@PyIncremen:
  0121d	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01222	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  01229	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv724[rsp], rax
$LN193@PyIncremen:
  01231	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR tv724[rsp]
  01239	48 89 44 24 70	 mov	 QWORD PTR in_str$20887[rsp], rax

; 358  :         len = PyUnicode_GET_LENGTH(output);

  0123e	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01243	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01247	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0124d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01252	85 c0		 test	 eax, eax
  01254	75 1c		 jne	 SHORT $LN194@PyIncremen
  01256	41 b8 66 01 00
	00		 mov	 r8d, 358		; 00000166H
  0125c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01263	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  0126a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01270	33 c0		 xor	 eax, eax
$LN194@PyIncremen:
  01272	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01277	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0127a	c1 e8 07	 shr	 eax, 7
  0127d	83 e0 01	 and	 eax, 1
  01280	85 c0		 test	 eax, eax
  01282	75 1c		 jne	 SHORT $LN195@PyIncremen
  01284	41 b8 66 01 00
	00		 mov	 r8d, 358		; 00000166H
  0128a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  01298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0129e	33 c0		 xor	 eax, eax
$LN195@PyIncremen:
  012a0	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  012a5	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  012a9	48 89 44 24 78	 mov	 QWORD PTR len$20888[rsp], rax

; 359  :         kind = PyUnicode_KIND(output);

  012ae	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  012b3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  012b7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  012bd	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  012c2	85 c0		 test	 eax, eax
  012c4	75 1c		 jne	 SHORT $LN196@PyIncremen
  012c6	41 b8 67 01 00
	00		 mov	 r8d, 359		; 00000167H
  012cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  012d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  012da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  012e0	33 c0		 xor	 eax, eax
$LN196@PyIncremen:
  012e2	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  012e7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  012ea	c1 e8 07	 shr	 eax, 7
  012ed	83 e0 01	 and	 eax, 1
  012f0	85 c0		 test	 eax, eax
  012f2	75 1c		 jne	 SHORT $LN197@PyIncremen
  012f4	41 b8 67 01 00
	00		 mov	 r8d, 359		; 00000167H
  012fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01301	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  01308	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0130e	33 c0		 xor	 eax, eax
$LN197@PyIncremen:
  01310	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01315	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01318	c1 e8 02	 shr	 eax, 2
  0131b	83 e0 07	 and	 eax, 7
  0131e	89 44 24 68	 mov	 DWORD PTR kind$20891[rsp], eax

; 360  : 
; 361  :         if (len == 0)

  01322	48 83 7c 24 78
	00		 cmp	 QWORD PTR len$20888[rsp], 0
  01328	75 0a		 jne	 SHORT $LN71@PyIncremen

; 362  :             return output;

  0132a	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  0132f	e9 c5 0c 00 00	 jmp	 $LN90@PyIncremen
$LN71@PyIncremen:

; 363  : 
; 364  :         /* If, up to now, newlines are consistently \n, do a quick check
; 365  :            for the \r *byte* with the libc's optimized memchr.
; 366  :            */
; 367  :         if (seennl == SEEN_LF || seennl == 0) {

  01334	83 bc 24 80 00
	00 00 02	 cmp	 DWORD PTR seennl$20889[rsp], 2
  0133c	74 0a		 je	 SHORT $LN69@PyIncremen
  0133e	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR seennl$20889[rsp], 0
  01346	75 49		 jne	 SHORT $LN70@PyIncremen
$LN69@PyIncremen:

; 368  :             only_lf = (memchr(in_str, '\r', kind * len) == NULL);

  01348	48 63 44 24 68	 movsxd	 rax, DWORD PTR kind$20891[rsp]
  0134d	48 0f af 44 24
	78		 imul	 rax, QWORD PTR len$20888[rsp]
  01353	4c 8b c0	 mov	 r8, rax
  01356	ba 0d 00 00 00	 mov	 edx, 13
  0135b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR in_str$20887[rsp]
  01360	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  01366	48 85 c0	 test	 rax, rax
  01369	75 0d		 jne	 SHORT $LN198@PyIncremen
  0136b	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv771[rsp], 1
  01376	eb 0b		 jmp	 SHORT $LN199@PyIncremen
$LN198@PyIncremen:
  01378	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv771[rsp], 0
$LN199@PyIncremen:
  01383	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv771[rsp]
  0138a	89 84 24 84 00
	00 00		 mov	 DWORD PTR only_lf$20890[rsp], eax
$LN70@PyIncremen:

; 369  :         }
; 370  : 
; 371  :         if (only_lf) {

  01391	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR only_lf$20890[rsp], 0
  01399	0f 84 d7 01 00
	00		 je	 $LN68@PyIncremen

; 372  :             /* If not already seen, quick scan for a possible "\n" character.
; 373  :                (there's nothing else to be done, even when in translation mode)
; 374  :             */
; 375  :             if (seennl == 0 &&
; 376  :                 memchr(in_str, '\n', kind * len) != NULL) {

  0139f	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR seennl$20889[rsp], 0
  013a7	0f 85 c4 01 00
	00		 jne	 $LN67@PyIncremen
  013ad	48 63 44 24 68	 movsxd	 rax, DWORD PTR kind$20891[rsp]
  013b2	48 0f af 44 24
	78		 imul	 rax, QWORD PTR len$20888[rsp]
  013b8	4c 8b c0	 mov	 r8, rax
  013bb	ba 0a 00 00 00	 mov	 edx, 10
  013c0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR in_str$20887[rsp]
  013c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  013cb	48 85 c0	 test	 rax, rax
  013ce	0f 84 9d 01 00
	00		 je	 $LN67@PyIncremen

; 377  :                 if (kind == PyUnicode_1BYTE_KIND)

  013d4	83 7c 24 68 01	 cmp	 DWORD PTR kind$20891[rsp], 1
  013d9	75 16		 jne	 SHORT $LN66@PyIncremen

; 378  :                     seennl |= SEEN_LF;

  013db	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR seennl$20889[rsp]
  013e2	83 c8 02	 or	 eax, 2
  013e5	89 84 24 80 00
	00 00		 mov	 DWORD PTR seennl$20889[rsp], eax

; 379  :                 else {

  013ec	e9 80 01 00 00	 jmp	 $LN65@PyIncremen
$LN66@PyIncremen:

; 380  :                     Py_ssize_t i = 0;

  013f1	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$20926[rsp], 0
$LN64@PyIncremen:
$LN62@PyIncremen:

; 381  :                     for (;;) {
; 382  :                         Py_UCS4 c;
; 383  :                         /* Fast loop for non-control characters */
; 384  :                         while (PyUnicode_READ(kind, in_str, i) > '\n')

  013fd	83 7c 24 68 01	 cmp	 DWORD PTR kind$20891[rsp], 1
  01402	75 1f		 jne	 SHORT $LN202@PyIncremen
  01404	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR i$20926[rsp]
  0140c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR in_str$20887[rsp]
  01411	48 03 c8	 add	 rcx, rax
  01414	48 8b c1	 mov	 rax, rcx
  01417	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0141a	89 84 24 94 01
	00 00		 mov	 DWORD PTR tv793[rsp], eax
  01421	eb 46		 jmp	 SHORT $LN203@PyIncremen
$LN202@PyIncremen:
  01423	83 7c 24 68 02	 cmp	 DWORD PTR kind$20891[rsp], 2
  01428	75 1a		 jne	 SHORT $LN200@PyIncremen
  0142a	48 8b 44 24 70	 mov	 rax, QWORD PTR in_str$20887[rsp]
  0142f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR i$20926[rsp]
  01437	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0143b	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv792[rsp], eax
  01442	eb 17		 jmp	 SHORT $LN201@PyIncremen
$LN200@PyIncremen:
  01444	48 8b 44 24 70	 mov	 rax, QWORD PTR in_str$20887[rsp]
  01449	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR i$20926[rsp]
  01451	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  01454	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv792[rsp], eax
$LN201@PyIncremen:
  0145b	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv792[rsp]
  01462	89 84 24 94 01
	00 00		 mov	 DWORD PTR tv793[rsp], eax
$LN203@PyIncremen:
  01469	83 bc 24 94 01
	00 00 0a	 cmp	 DWORD PTR tv793[rsp], 10
  01471	76 18		 jbe	 SHORT $LN61@PyIncremen

; 385  :                             i++;

  01473	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR i$20926[rsp]
  0147b	48 ff c0	 inc	 rax
  0147e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR i$20926[rsp], rax
  01486	e9 72 ff ff ff	 jmp	 $LN62@PyIncremen
$LN61@PyIncremen:

; 386  :                         c = PyUnicode_READ(kind, in_str, i++);

  0148b	83 7c 24 68 01	 cmp	 DWORD PTR kind$20891[rsp], 1
  01490	75 32		 jne	 SHORT $LN206@PyIncremen
  01492	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR i$20926[rsp]
  0149a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR in_str$20887[rsp]
  0149f	48 03 c8	 add	 rcx, rax
  014a2	48 8b c1	 mov	 rax, rcx
  014a5	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  014a8	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv809[rsp], eax
  014af	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR i$20926[rsp]
  014b7	48 ff c0	 inc	 rax
  014ba	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR i$20926[rsp], rax
  014c2	eb 6c		 jmp	 SHORT $LN207@PyIncremen
$LN206@PyIncremen:
  014c4	83 7c 24 68 02	 cmp	 DWORD PTR kind$20891[rsp], 2
  014c9	75 2d		 jne	 SHORT $LN204@PyIncremen
  014cb	48 8b 44 24 70	 mov	 rax, QWORD PTR in_str$20887[rsp]
  014d0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR i$20926[rsp]
  014d8	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  014dc	89 84 24 a0 01
	00 00		 mov	 DWORD PTR tv808[rsp], eax
  014e3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR i$20926[rsp]
  014eb	48 ff c0	 inc	 rax
  014ee	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR i$20926[rsp], rax
  014f6	eb 2a		 jmp	 SHORT $LN205@PyIncremen
$LN204@PyIncremen:
  014f8	48 8b 44 24 70	 mov	 rax, QWORD PTR in_str$20887[rsp]
  014fd	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR i$20926[rsp]
  01505	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  01508	89 84 24 a0 01
	00 00		 mov	 DWORD PTR tv808[rsp], eax
  0150f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR i$20926[rsp]
  01517	48 ff c0	 inc	 rax
  0151a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR i$20926[rsp], rax
$LN205@PyIncremen:
  01522	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv808[rsp]
  01529	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv809[rsp], eax
$LN207@PyIncremen:
  01530	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv809[rsp]
  01537	89 84 24 90 00
	00 00		 mov	 DWORD PTR c$20930[rsp], eax

; 387  :                         if (c == '\n') {

  0153e	83 bc 24 90 00
	00 00 0a	 cmp	 DWORD PTR c$20930[rsp], 10
  01546	75 13		 jne	 SHORT $LN60@PyIncremen

; 388  :                             seennl |= SEEN_LF;

  01548	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR seennl$20889[rsp]
  0154f	83 c8 02	 or	 eax, 2
  01552	89 84 24 80 00
	00 00		 mov	 DWORD PTR seennl$20889[rsp], eax

; 389  :                             break;

  01559	eb 16		 jmp	 SHORT $LN63@PyIncremen
$LN60@PyIncremen:

; 390  :                         }
; 391  :                         if (i >= len)

  0155b	48 8b 44 24 78	 mov	 rax, QWORD PTR len$20888[rsp]
  01560	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR i$20926[rsp], rax
  01568	7c 02		 jl	 SHORT $LN59@PyIncremen

; 392  :                             break;

  0156a	eb 05		 jmp	 SHORT $LN63@PyIncremen
$LN59@PyIncremen:

; 393  :                     }

  0156c	e9 8c fe ff ff	 jmp	 $LN64@PyIncremen
$LN63@PyIncremen:
$LN65@PyIncremen:
$LN67@PyIncremen:

; 394  :                 }
; 395  :             }

  01571	e9 3e 0a 00 00	 jmp	 $LN58@PyIncremen
$LN68@PyIncremen:

; 396  :             /* Finished: we have scanned for newlines, and none of them
; 397  :                need translating */
; 398  :         }
; 399  :         else if (!self->translate) {

  01576	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  0157b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0157e	c1 e0 1e	 shl	 eax, 30
  01581	c1 f8 1f	 sar	 eax, 31
  01584	85 c0		 test	 eax, eax
  01586	0f 85 5e 02 00
	00		 jne	 $LN57@PyIncremen

; 400  :             Py_ssize_t i = 0;

  0158c	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$20946[rsp], 0

; 401  :             /* We have already seen all newline types, no need to scan again */
; 402  :             if (seennl == SEEN_ALL)

  01598	83 bc 24 80 00
	00 00 07	 cmp	 DWORD PTR seennl$20889[rsp], 7
  015a0	75 05		 jne	 SHORT $LN56@PyIncremen

; 403  :                 goto endscan;

  015a2	e9 3e 02 00 00	 jmp	 $endscan$20948
$LN56@PyIncremen:
$LN55@PyIncremen:
$LN53@PyIncremen:

; 404  :             for (;;) {
; 405  :                 Py_UCS4 c;
; 406  :                 /* Fast loop for non-control characters */
; 407  :                 while (PyUnicode_READ(kind, in_str, i) > '\r')

  015a7	83 7c 24 68 01	 cmp	 DWORD PTR kind$20891[rsp], 1
  015ac	75 1f		 jne	 SHORT $LN210@PyIncremen
  015ae	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$20946[rsp]
  015b6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR in_str$20887[rsp]
  015bb	48 03 c8	 add	 rcx, rax
  015be	48 8b c1	 mov	 rax, rcx
  015c1	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  015c4	89 84 24 a4 01
	00 00		 mov	 DWORD PTR tv828[rsp], eax
  015cb	eb 46		 jmp	 SHORT $LN211@PyIncremen
$LN210@PyIncremen:
  015cd	83 7c 24 68 02	 cmp	 DWORD PTR kind$20891[rsp], 2
  015d2	75 1a		 jne	 SHORT $LN208@PyIncremen
  015d4	48 8b 44 24 70	 mov	 rax, QWORD PTR in_str$20887[rsp]
  015d9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i$20946[rsp]
  015e1	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  015e5	89 84 24 a8 01
	00 00		 mov	 DWORD PTR tv827[rsp], eax
  015ec	eb 17		 jmp	 SHORT $LN209@PyIncremen
$LN208@PyIncremen:
  015ee	48 8b 44 24 70	 mov	 rax, QWORD PTR in_str$20887[rsp]
  015f3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i$20946[rsp]
  015fb	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  015fe	89 84 24 a8 01
	00 00		 mov	 DWORD PTR tv827[rsp], eax
$LN209@PyIncremen:
  01605	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv827[rsp]
  0160c	89 84 24 a4 01
	00 00		 mov	 DWORD PTR tv828[rsp], eax
$LN211@PyIncremen:
  01613	83 bc 24 a4 01
	00 00 0d	 cmp	 DWORD PTR tv828[rsp], 13
  0161b	76 18		 jbe	 SHORT $LN52@PyIncremen

; 408  :                     i++;

  0161d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$20946[rsp]
  01625	48 ff c0	 inc	 rax
  01628	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR i$20946[rsp], rax
  01630	e9 72 ff ff ff	 jmp	 $LN53@PyIncremen
$LN52@PyIncremen:

; 409  :                 c = PyUnicode_READ(kind, in_str, i++);

  01635	83 7c 24 68 01	 cmp	 DWORD PTR kind$20891[rsp], 1
  0163a	75 32		 jne	 SHORT $LN214@PyIncremen
  0163c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$20946[rsp]
  01644	48 8b 4c 24 70	 mov	 rcx, QWORD PTR in_str$20887[rsp]
  01649	48 03 c8	 add	 rcx, rax
  0164c	48 8b c1	 mov	 rax, rcx
  0164f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01652	89 84 24 ac 01
	00 00		 mov	 DWORD PTR tv844[rsp], eax
  01659	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$20946[rsp]
  01661	48 ff c0	 inc	 rax
  01664	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR i$20946[rsp], rax
  0166c	eb 6c		 jmp	 SHORT $LN215@PyIncremen
$LN214@PyIncremen:
  0166e	83 7c 24 68 02	 cmp	 DWORD PTR kind$20891[rsp], 2
  01673	75 2d		 jne	 SHORT $LN212@PyIncremen
  01675	48 8b 44 24 70	 mov	 rax, QWORD PTR in_str$20887[rsp]
  0167a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i$20946[rsp]
  01682	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01686	89 84 24 b0 01
	00 00		 mov	 DWORD PTR tv843[rsp], eax
  0168d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$20946[rsp]
  01695	48 ff c0	 inc	 rax
  01698	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR i$20946[rsp], rax
  016a0	eb 2a		 jmp	 SHORT $LN213@PyIncremen
$LN212@PyIncremen:
  016a2	48 8b 44 24 70	 mov	 rax, QWORD PTR in_str$20887[rsp]
  016a7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i$20946[rsp]
  016af	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  016b2	89 84 24 b0 01
	00 00		 mov	 DWORD PTR tv843[rsp], eax
  016b9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$20946[rsp]
  016c1	48 ff c0	 inc	 rax
  016c4	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR i$20946[rsp], rax
$LN213@PyIncremen:
  016cc	8b 84 24 b0 01
	00 00		 mov	 eax, DWORD PTR tv843[rsp]
  016d3	89 84 24 ac 01
	00 00		 mov	 DWORD PTR tv844[rsp], eax
$LN215@PyIncremen:
  016da	8b 84 24 ac 01
	00 00		 mov	 eax, DWORD PTR tv844[rsp]
  016e1	89 84 24 a0 00
	00 00		 mov	 DWORD PTR c$20952[rsp], eax

; 410  :                 if (c == '\n')

  016e8	83 bc 24 a0 00
	00 00 0a	 cmp	 DWORD PTR c$20952[rsp], 10
  016f0	75 16		 jne	 SHORT $LN51@PyIncremen

; 411  :                     seennl |= SEEN_LF;

  016f2	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR seennl$20889[rsp]
  016f9	83 c8 02	 or	 eax, 2
  016fc	89 84 24 80 00
	00 00		 mov	 DWORD PTR seennl$20889[rsp], eax
  01703	e9 bb 00 00 00	 jmp	 $LN50@PyIncremen
$LN51@PyIncremen:

; 412  :                 else if (c == '\r') {

  01708	83 bc 24 a0 00
	00 00 0d	 cmp	 DWORD PTR c$20952[rsp], 13
  01710	0f 85 ad 00 00
	00		 jne	 $LN49@PyIncremen

; 413  :                     if (PyUnicode_READ(kind, in_str, i) == '\n') {

  01716	83 7c 24 68 01	 cmp	 DWORD PTR kind$20891[rsp], 1
  0171b	75 1f		 jne	 SHORT $LN218@PyIncremen
  0171d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$20946[rsp]
  01725	48 8b 4c 24 70	 mov	 rcx, QWORD PTR in_str$20887[rsp]
  0172a	48 03 c8	 add	 rcx, rax
  0172d	48 8b c1	 mov	 rax, rcx
  01730	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01733	89 84 24 b4 01
	00 00		 mov	 DWORD PTR tv858[rsp], eax
  0173a	eb 46		 jmp	 SHORT $LN219@PyIncremen
$LN218@PyIncremen:
  0173c	83 7c 24 68 02	 cmp	 DWORD PTR kind$20891[rsp], 2
  01741	75 1a		 jne	 SHORT $LN216@PyIncremen
  01743	48 8b 44 24 70	 mov	 rax, QWORD PTR in_str$20887[rsp]
  01748	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i$20946[rsp]
  01750	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01754	89 84 24 b8 01
	00 00		 mov	 DWORD PTR tv857[rsp], eax
  0175b	eb 17		 jmp	 SHORT $LN217@PyIncremen
$LN216@PyIncremen:
  0175d	48 8b 44 24 70	 mov	 rax, QWORD PTR in_str$20887[rsp]
  01762	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i$20946[rsp]
  0176a	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0176d	89 84 24 b8 01
	00 00		 mov	 DWORD PTR tv857[rsp], eax
$LN217@PyIncremen:
  01774	8b 84 24 b8 01
	00 00		 mov	 eax, DWORD PTR tv857[rsp]
  0177b	89 84 24 b4 01
	00 00		 mov	 DWORD PTR tv858[rsp], eax
$LN219@PyIncremen:
  01782	83 bc 24 b4 01
	00 00 0a	 cmp	 DWORD PTR tv858[rsp], 10
  0178a	75 26		 jne	 SHORT $LN48@PyIncremen

; 414  :                         seennl |= SEEN_CRLF;

  0178c	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR seennl$20889[rsp]
  01793	83 c8 04	 or	 eax, 4
  01796	89 84 24 80 00
	00 00		 mov	 DWORD PTR seennl$20889[rsp], eax

; 415  :                         i++;

  0179d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$20946[rsp]
  017a5	48 ff c0	 inc	 rax
  017a8	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR i$20946[rsp], rax

; 416  :                     }
; 417  :                     else

  017b0	eb 11		 jmp	 SHORT $LN47@PyIncremen
$LN48@PyIncremen:

; 418  :                         seennl |= SEEN_CR;

  017b2	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR seennl$20889[rsp]
  017b9	83 c8 01	 or	 eax, 1
  017bc	89 84 24 80 00
	00 00		 mov	 DWORD PTR seennl$20889[rsp], eax
$LN47@PyIncremen:
$LN49@PyIncremen:
$LN50@PyIncremen:

; 419  :                 }
; 420  :                 if (i >= len)

  017c3	48 8b 44 24 78	 mov	 rax, QWORD PTR len$20888[rsp]
  017c8	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR i$20946[rsp], rax
  017d0	7c 02		 jl	 SHORT $LN46@PyIncremen

; 421  :                     break;

  017d2	eb 11		 jmp	 SHORT $LN54@PyIncremen
$LN46@PyIncremen:

; 422  :                 if (seennl == SEEN_ALL)

  017d4	83 bc 24 80 00
	00 00 07	 cmp	 DWORD PTR seennl$20889[rsp], 7
  017dc	75 02		 jne	 SHORT $LN45@PyIncremen

; 423  :                     break;

  017de	eb 05		 jmp	 SHORT $LN54@PyIncremen
$LN45@PyIncremen:

; 424  :             }

  017e0	e9 c2 fd ff ff	 jmp	 $LN55@PyIncremen
$LN54@PyIncremen:
$endscan$20948:

; 425  :         endscan:
; 426  :             ;
; 427  :         }
; 428  :         else {

  017e5	e9 ca 07 00 00	 jmp	 $LN44@PyIncremen
$LN57@PyIncremen:

; 429  :             void *translated;
; 430  :             int kind = PyUnicode_KIND(output);

  017ea	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  017ef	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  017f3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  017f9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  017fe	85 c0		 test	 eax, eax
  01800	75 1c		 jne	 SHORT $LN220@PyIncremen
  01802	41 b8 ae 01 00
	00		 mov	 r8d, 430		; 000001aeH
  01808	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0180f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  01816	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0181c	33 c0		 xor	 eax, eax
$LN220@PyIncremen:
  0181e	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01823	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01826	c1 e8 07	 shr	 eax, 7
  01829	83 e0 01	 and	 eax, 1
  0182c	85 c0		 test	 eax, eax
  0182e	75 1c		 jne	 SHORT $LN221@PyIncremen
  01830	41 b8 ae 01 00
	00		 mov	 r8d, 430		; 000001aeH
  01836	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0183d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  01844	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0184a	33 c0		 xor	 eax, eax
$LN221@PyIncremen:
  0184c	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01851	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01854	c1 e8 02	 shr	 eax, 2
  01857	83 e0 07	 and	 eax, 7
  0185a	89 84 24 a4 00
	00 00		 mov	 DWORD PTR kind$20977[rsp], eax

; 431  :             void *in_str = PyUnicode_DATA(output);

  01861	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01866	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0186a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01870	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01875	85 c0		 test	 eax, eax
  01877	75 1c		 jne	 SHORT $LN222@PyIncremen
  01879	41 b8 af 01 00
	00		 mov	 r8d, 431		; 000001afH
  0187f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01886	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  0188d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01893	33 c0		 xor	 eax, eax
$LN222@PyIncremen:
  01895	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  0189a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0189d	c1 e8 05	 shr	 eax, 5
  018a0	83 e0 01	 and	 eax, 1
  018a3	85 c0		 test	 eax, eax
  018a5	0f 84 ae 00 00
	00		 je	 $LN228@PyIncremen
  018ab	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  018b0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  018b4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  018ba	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  018bf	85 c0		 test	 eax, eax
  018c1	75 1c		 jne	 SHORT $LN223@PyIncremen
  018c3	41 b8 af 01 00
	00		 mov	 r8d, 431		; 000001afH
  018c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  018d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@MEFFHMAI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  018d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  018dd	33 c0		 xor	 eax, eax
$LN223@PyIncremen:
  018df	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  018e4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  018e7	c1 e8 07	 shr	 eax, 7
  018ea	83 e0 01	 and	 eax, 1
  018ed	85 c0		 test	 eax, eax
  018ef	75 1c		 jne	 SHORT $LN224@PyIncremen
  018f1	41 b8 af 01 00
	00		 mov	 r8d, 431		; 000001afH
  018f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  018fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FPBJAHNC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  01905	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0190b	33 c0		 xor	 eax, eax
$LN224@PyIncremen:
  0190d	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01912	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01915	c1 e8 06	 shr	 eax, 6
  01918	83 e0 01	 and	 eax, 1
  0191b	85 c0		 test	 eax, eax
  0191d	74 15		 je	 SHORT $LN225@PyIncremen
  0191f	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01924	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0192a	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv917[rsp], rax
  01932	eb 13		 jmp	 SHORT $LN226@PyIncremen
$LN225@PyIncremen:
  01934	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01939	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0193f	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv917[rsp], rax
$LN226@PyIncremen:
  01947	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR tv917[rsp]
  0194f	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv926[rsp], rax
  01957	eb 3f		 jmp	 SHORT $LN229@PyIncremen
$LN228@PyIncremen:
  01959	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  0195e	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  01966	75 1c		 jne	 SHORT $LN227@PyIncremen
  01968	41 b8 af 01 00
	00		 mov	 r8d, 431		; 000001afH
  0196e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01975	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@FLMNEBJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  0197c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01982	33 c0		 xor	 eax, eax
$LN227@PyIncremen:
  01984	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01989	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  01990	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv926[rsp], rax
$LN229@PyIncremen:
  01998	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR tv926[rsp]
  019a0	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR in_str$20983[rsp], rax

; 432  :             Py_ssize_t in, out;
; 433  :             /* XXX: Previous in-place translation here is disabled as
; 434  :                resizing is not possible anymore */
; 435  :             /* We could try to optimize this so that we only do a copy
; 436  :                when there is something to translate. On the other hand,
; 437  :                we already know there is a \r byte, so chances are high
; 438  :                that something needs to be done. */
; 439  :             translated = PyMem_Malloc(kind * len);

  019a8	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR kind$20977[rsp]
  019b0	48 0f af 44 24
	78		 imul	 rax, QWORD PTR len$20888[rsp]
  019b6	48 8b c8	 mov	 rcx, rax
  019b9	e8 00 00 00 00	 call	 PyMem_Malloc
  019be	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR translated$20976[rsp], rax

; 440  :             if (translated == NULL) {

  019c6	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR translated$20976[rsp], 0
  019cf	75 0a		 jne	 SHORT $LN43@PyIncremen

; 441  :                 PyErr_NoMemory();

  019d1	e8 00 00 00 00	 call	 PyErr_NoMemory

; 442  :                 goto error;

  019d6	e9 12 06 00 00	 jmp	 $error$20711
$LN43@PyIncremen:

; 443  :             }
; 444  :             in = out = 0;

  019db	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR out$21000[rsp], 0
  019e7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  019ef	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR in$20999[rsp], rax
$LN243@PyIncremen:
$LN242@PyIncremen:
$LN42@PyIncremen:
$LN40@PyIncremen:

; 445  :             for (;;) {
; 446  :                 Py_UCS4 c;
; 447  :                 /* Fast loop for non-control characters */
; 448  :                 while ((c = PyUnicode_READ(kind, in_str, in++)) > '\r')

  019f7	83 bc 24 a4 00
	00 00 01	 cmp	 DWORD PTR kind$20977[rsp], 1
  019ff	75 35		 jne	 SHORT $LN232@PyIncremen
  01a01	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR in$20999[rsp]
  01a09	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR in_str$20983[rsp]
  01a11	48 03 c8	 add	 rcx, rax
  01a14	48 8b c1	 mov	 rax, rcx
  01a17	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01a1a	89 84 24 d0 01
	00 00		 mov	 DWORD PTR tv945[rsp], eax
  01a21	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR in$20999[rsp]
  01a29	48 ff c0	 inc	 rax
  01a2c	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR in$20999[rsp], rax
  01a34	eb 75		 jmp	 SHORT $LN233@PyIncremen
$LN232@PyIncremen:
  01a36	83 bc 24 a4 00
	00 00 02	 cmp	 DWORD PTR kind$20977[rsp], 2
  01a3e	75 30		 jne	 SHORT $LN230@PyIncremen
  01a40	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR in_str$20983[rsp]
  01a48	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR in$20999[rsp]
  01a50	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01a54	89 84 24 d4 01
	00 00		 mov	 DWORD PTR tv944[rsp], eax
  01a5b	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR in$20999[rsp]
  01a63	48 ff c0	 inc	 rax
  01a66	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR in$20999[rsp], rax
  01a6e	eb 2d		 jmp	 SHORT $LN231@PyIncremen
$LN230@PyIncremen:
  01a70	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR in_str$20983[rsp]
  01a78	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR in$20999[rsp]
  01a80	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  01a83	89 84 24 d4 01
	00 00		 mov	 DWORD PTR tv944[rsp], eax
  01a8a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR in$20999[rsp]
  01a92	48 ff c0	 inc	 rax
  01a95	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR in$20999[rsp], rax
$LN231@PyIncremen:
  01a9d	8b 84 24 d4 01
	00 00		 mov	 eax, DWORD PTR tv944[rsp]
  01aa4	89 84 24 d0 01
	00 00		 mov	 DWORD PTR tv945[rsp], eax
$LN233@PyIncremen:
  01aab	8b 84 24 d0 01
	00 00		 mov	 eax, DWORD PTR tv945[rsp]
  01ab2	89 84 24 c8 00
	00 00		 mov	 DWORD PTR c$21006[rsp], eax
  01ab9	83 bc 24 c8 00
	00 00 0d	 cmp	 DWORD PTR c$21006[rsp], 13
  01ac1	0f 86 ef 00 00
	00		 jbe	 $LN39@PyIncremen
$LN38@PyIncremen:

; 449  :                     PyUnicode_WRITE(kind, translated, out++, c);

  01ac7	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR kind$20977[rsp]
  01ace	89 84 24 d8 01
	00 00		 mov	 DWORD PTR tv947[rsp], eax
  01ad5	83 bc 24 d8 01
	00 00 01	 cmp	 DWORD PTR tv947[rsp], 1
  01add	74 0c		 je	 SHORT $LN33@PyIncremen
  01adf	83 bc 24 d8 01
	00 00 02	 cmp	 DWORD PTR tv947[rsp], 2
  01ae7	74 3a		 je	 SHORT $LN32@PyIncremen
  01ae9	eb 69		 jmp	 SHORT $LN31@PyIncremen
$LN33@PyIncremen:
  01aeb	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01af3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR translated$20976[rsp]
  01afb	48 03 c8	 add	 rcx, rax
  01afe	48 8b c1	 mov	 rax, rcx
  01b01	0f b6 8c 24 c8
	00 00 00	 movzx	 ecx, BYTE PTR c$21006[rsp]
  01b09	88 08		 mov	 BYTE PTR [rax], cl
  01b0b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01b13	48 ff c0	 inc	 rax
  01b16	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
  01b1e	e9 84 00 00 00	 jmp	 $LN34@PyIncremen
$LN32@PyIncremen:
  01b23	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR translated$20976[rsp]
  01b2b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR out$21000[rsp]
  01b33	0f b7 94 24 c8
	00 00 00	 movzx	 edx, WORD PTR c$21006[rsp]
  01b3b	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01b3f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01b47	48 ff c0	 inc	 rax
  01b4a	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
  01b52	eb 53		 jmp	 SHORT $LN34@PyIncremen
$LN31@PyIncremen:
  01b54	83 bc 24 a4 00
	00 00 04	 cmp	 DWORD PTR kind$20977[rsp], 4
  01b5c	74 1c		 je	 SHORT $LN234@PyIncremen
  01b5e	41 b8 c1 01 00
	00		 mov	 r8d, 449		; 000001c1H
  01b64	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01b6b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  01b72	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01b78	33 c0		 xor	 eax, eax
$LN234@PyIncremen:
  01b7a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR translated$20976[rsp]
  01b82	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR out$21000[rsp]
  01b8a	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR c$21006[rsp]
  01b91	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
  01b94	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01b9c	48 ff c0	 inc	 rax
  01b9f	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
$LN34@PyIncremen:
  01ba7	33 c0		 xor	 eax, eax
  01ba9	85 c0		 test	 eax, eax
  01bab	0f 85 16 ff ff
	ff		 jne	 $LN38@PyIncremen
  01bb1	e9 41 fe ff ff	 jmp	 $LN40@PyIncremen
$LN39@PyIncremen:

; 450  :                 if (c == '\n') {

  01bb6	83 bc 24 c8 00
	00 00 0a	 cmp	 DWORD PTR c$21006[rsp], 10
  01bbe	0f 85 00 01 00
	00		 jne	 $LN30@PyIncremen
$LN29@PyIncremen:

; 451  :                     PyUnicode_WRITE(kind, translated, out++, c);

  01bc4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR kind$20977[rsp]
  01bcb	89 84 24 dc 01
	00 00		 mov	 DWORD PTR tv965[rsp], eax
  01bd2	83 bc 24 dc 01
	00 00 01	 cmp	 DWORD PTR tv965[rsp], 1
  01bda	74 0c		 je	 SHORT $LN24@PyIncremen
  01bdc	83 bc 24 dc 01
	00 00 02	 cmp	 DWORD PTR tv965[rsp], 2
  01be4	74 3a		 je	 SHORT $LN23@PyIncremen
  01be6	eb 69		 jmp	 SHORT $LN22@PyIncremen
$LN24@PyIncremen:
  01be8	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01bf0	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR translated$20976[rsp]
  01bf8	48 03 c8	 add	 rcx, rax
  01bfb	48 8b c1	 mov	 rax, rcx
  01bfe	0f b6 8c 24 c8
	00 00 00	 movzx	 ecx, BYTE PTR c$21006[rsp]
  01c06	88 08		 mov	 BYTE PTR [rax], cl
  01c08	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01c10	48 ff c0	 inc	 rax
  01c13	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
  01c1b	e9 84 00 00 00	 jmp	 $LN25@PyIncremen
$LN23@PyIncremen:
  01c20	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR translated$20976[rsp]
  01c28	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR out$21000[rsp]
  01c30	0f b7 94 24 c8
	00 00 00	 movzx	 edx, WORD PTR c$21006[rsp]
  01c38	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01c3c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01c44	48 ff c0	 inc	 rax
  01c47	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
  01c4f	eb 53		 jmp	 SHORT $LN25@PyIncremen
$LN22@PyIncremen:
  01c51	83 bc 24 a4 00
	00 00 04	 cmp	 DWORD PTR kind$20977[rsp], 4
  01c59	74 1c		 je	 SHORT $LN235@PyIncremen
  01c5b	41 b8 c3 01 00
	00		 mov	 r8d, 451		; 000001c3H
  01c61	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01c68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  01c6f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01c75	33 c0		 xor	 eax, eax
$LN235@PyIncremen:
  01c77	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR translated$20976[rsp]
  01c7f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR out$21000[rsp]
  01c87	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR c$21006[rsp]
  01c8e	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
  01c91	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01c99	48 ff c0	 inc	 rax
  01c9c	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
$LN25@PyIncremen:
  01ca4	33 c0		 xor	 eax, eax
  01ca6	85 c0		 test	 eax, eax
  01ca8	0f 85 16 ff ff
	ff		 jne	 $LN29@PyIncremen

; 452  :                     seennl |= SEEN_LF;

  01cae	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR seennl$20889[rsp]
  01cb5	83 c8 02	 or	 eax, 2
  01cb8	89 84 24 80 00
	00 00		 mov	 DWORD PTR seennl$20889[rsp], eax

; 453  :                     continue;

  01cbf	e9 33 fd ff ff	 jmp	 $LN42@PyIncremen
$LN30@PyIncremen:

; 454  :                 }
; 455  :                 if (c == '\r') {

  01cc4	83 bc 24 c8 00
	00 00 0d	 cmp	 DWORD PTR c$21006[rsp], 13
  01ccc	0f 85 9b 01 00
	00		 jne	 $LN21@PyIncremen

; 456  :                     if (PyUnicode_READ(kind, in_str, in) == '\n') {

  01cd2	83 bc 24 a4 00
	00 00 01	 cmp	 DWORD PTR kind$20977[rsp], 1
  01cda	75 22		 jne	 SHORT $LN238@PyIncremen
  01cdc	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR in$20999[rsp]
  01ce4	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR in_str$20983[rsp]
  01cec	48 03 c8	 add	 rcx, rax
  01cef	48 8b c1	 mov	 rax, rcx
  01cf2	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01cf5	89 84 24 e0 01
	00 00		 mov	 DWORD PTR tv994[rsp], eax
  01cfc	eb 4f		 jmp	 SHORT $LN239@PyIncremen
$LN238@PyIncremen:
  01cfe	83 bc 24 a4 00
	00 00 02	 cmp	 DWORD PTR kind$20977[rsp], 2
  01d06	75 1d		 jne	 SHORT $LN236@PyIncremen
  01d08	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR in_str$20983[rsp]
  01d10	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR in$20999[rsp]
  01d18	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01d1c	89 84 24 e4 01
	00 00		 mov	 DWORD PTR tv993[rsp], eax
  01d23	eb 1a		 jmp	 SHORT $LN237@PyIncremen
$LN236@PyIncremen:
  01d25	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR in_str$20983[rsp]
  01d2d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR in$20999[rsp]
  01d35	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  01d38	89 84 24 e4 01
	00 00		 mov	 DWORD PTR tv993[rsp], eax
$LN237@PyIncremen:
  01d3f	8b 84 24 e4 01
	00 00		 mov	 eax, DWORD PTR tv993[rsp]
  01d46	89 84 24 e0 01
	00 00		 mov	 DWORD PTR tv994[rsp], eax
$LN239@PyIncremen:
  01d4d	83 bc 24 e0 01
	00 00 0a	 cmp	 DWORD PTR tv994[rsp], 10
  01d55	75 26		 jne	 SHORT $LN20@PyIncremen

; 457  :                         in++;

  01d57	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR in$20999[rsp]
  01d5f	48 ff c0	 inc	 rax
  01d62	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR in$20999[rsp], rax

; 458  :                         seennl |= SEEN_CRLF;

  01d6a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR seennl$20889[rsp]
  01d71	83 c8 04	 or	 eax, 4
  01d74	89 84 24 80 00
	00 00		 mov	 DWORD PTR seennl$20889[rsp], eax

; 459  :                     }
; 460  :                     else

  01d7b	eb 11		 jmp	 SHORT $LN19@PyIncremen
$LN20@PyIncremen:

; 461  :                         seennl |= SEEN_CR;

  01d7d	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR seennl$20889[rsp]
  01d84	83 c8 01	 or	 eax, 1
  01d87	89 84 24 80 00
	00 00		 mov	 DWORD PTR seennl$20889[rsp], eax
$LN19@PyIncremen:
$LN18@PyIncremen:

; 462  :                     PyUnicode_WRITE(kind, translated, out++, '\n');

  01d8e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR kind$20977[rsp]
  01d95	89 84 24 e8 01
	00 00		 mov	 DWORD PTR tv999[rsp], eax
  01d9c	83 bc 24 e8 01
	00 00 01	 cmp	 DWORD PTR tv999[rsp], 1
  01da4	74 0c		 je	 SHORT $LN13@PyIncremen
  01da6	83 bc 24 e8 01
	00 00 02	 cmp	 DWORD PTR tv999[rsp], 2
  01dae	74 30		 je	 SHORT $LN12@PyIncremen
  01db0	eb 5c		 jmp	 SHORT $LN11@PyIncremen
$LN13@PyIncremen:
  01db2	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01dba	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR translated$20976[rsp]
  01dc2	48 03 c8	 add	 rcx, rax
  01dc5	48 8b c1	 mov	 rax, rcx
  01dc8	c6 00 0a	 mov	 BYTE PTR [rax], 10
  01dcb	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01dd3	48 ff c0	 inc	 rax
  01dd6	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
  01dde	eb 7e		 jmp	 SHORT $LN14@PyIncremen
$LN12@PyIncremen:
  01de0	b8 0a 00 00 00	 mov	 eax, 10
  01de5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR translated$20976[rsp]
  01ded	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR out$21000[rsp]
  01df5	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax
  01df9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01e01	48 ff c0	 inc	 rax
  01e04	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
  01e0c	eb 50		 jmp	 SHORT $LN14@PyIncremen
$LN11@PyIncremen:
  01e0e	83 bc 24 a4 00
	00 00 04	 cmp	 DWORD PTR kind$20977[rsp], 4
  01e16	74 1c		 je	 SHORT $LN240@PyIncremen
  01e18	41 b8 ce 01 00
	00		 mov	 r8d, 462		; 000001ceH
  01e1e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01e25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  01e2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01e32	33 c0		 xor	 eax, eax
$LN240@PyIncremen:
  01e34	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR translated$20976[rsp]
  01e3c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR out$21000[rsp]
  01e44	c7 04 88 0a 00
	00 00		 mov	 DWORD PTR [rax+rcx*4], 10
  01e4b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01e53	48 ff c0	 inc	 rax
  01e56	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
$LN14@PyIncremen:
  01e5e	33 c0		 xor	 eax, eax
  01e60	85 c0		 test	 eax, eax
  01e62	0f 85 26 ff ff
	ff		 jne	 $LN18@PyIncremen

; 463  :                     continue;

  01e68	e9 8a fb ff ff	 jmp	 $LN242@PyIncremen
$LN21@PyIncremen:

; 464  :                 }
; 465  :                 if (in > len)

  01e6d	48 8b 44 24 78	 mov	 rax, QWORD PTR len$20888[rsp]
  01e72	48 39 84 24 b8
	00 00 00	 cmp	 QWORD PTR in$20999[rsp], rax
  01e7a	7e 05		 jle	 SHORT $LN10@PyIncremen

; 466  :                     break;

  01e7c	e9 ef 00 00 00	 jmp	 $LN41@PyIncremen
$LN10@PyIncremen:
$LN9@PyIncremen:

; 467  :                 PyUnicode_WRITE(kind, translated, out++, c);

  01e81	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR kind$20977[rsp]
  01e88	89 84 24 ec 01
	00 00		 mov	 DWORD PTR tv1017[rsp], eax
  01e8f	83 bc 24 ec 01
	00 00 01	 cmp	 DWORD PTR tv1017[rsp], 1
  01e97	74 0c		 je	 SHORT $LN4@PyIncremen
  01e99	83 bc 24 ec 01
	00 00 02	 cmp	 DWORD PTR tv1017[rsp], 2
  01ea1	74 3a		 je	 SHORT $LN3@PyIncremen
  01ea3	eb 69		 jmp	 SHORT $LN2@PyIncremen
$LN4@PyIncremen:
  01ea5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01ead	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR translated$20976[rsp]
  01eb5	48 03 c8	 add	 rcx, rax
  01eb8	48 8b c1	 mov	 rax, rcx
  01ebb	0f b6 8c 24 c8
	00 00 00	 movzx	 ecx, BYTE PTR c$21006[rsp]
  01ec3	88 08		 mov	 BYTE PTR [rax], cl
  01ec5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01ecd	48 ff c0	 inc	 rax
  01ed0	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
  01ed8	e9 84 00 00 00	 jmp	 $LN5@PyIncremen
$LN3@PyIncremen:
  01edd	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR translated$20976[rsp]
  01ee5	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR out$21000[rsp]
  01eed	0f b7 94 24 c8
	00 00 00	 movzx	 edx, WORD PTR c$21006[rsp]
  01ef5	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01ef9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01f01	48 ff c0	 inc	 rax
  01f04	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
  01f0c	eb 53		 jmp	 SHORT $LN5@PyIncremen
$LN2@PyIncremen:
  01f0e	83 bc 24 a4 00
	00 00 04	 cmp	 DWORD PTR kind$20977[rsp], 4
  01f16	74 1c		 je	 SHORT $LN241@PyIncremen
  01f18	41 b8 d3 01 00
	00		 mov	 r8d, 467		; 000001d3H
  01f1e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  01f25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  01f2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01f32	33 c0		 xor	 eax, eax
$LN241@PyIncremen:
  01f34	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR translated$20976[rsp]
  01f3c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR out$21000[rsp]
  01f44	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR c$21006[rsp]
  01f4b	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
  01f4e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR out$21000[rsp]
  01f56	48 ff c0	 inc	 rax
  01f59	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR out$21000[rsp], rax
$LN5@PyIncremen:
  01f61	33 c0		 xor	 eax, eax
  01f63	85 c0		 test	 eax, eax
  01f65	0f 85 16 ff ff
	ff		 jne	 $LN9@PyIncremen

; 468  :             }

  01f6b	e9 87 fa ff ff	 jmp	 $LN243@PyIncremen
$LN41@PyIncremen:

; 469  :             Py_DECREF(output);

  01f70	48 8b 4c 24 30	 mov	 rcx, QWORD PTR output$[rsp]
  01f75	e8 00 00 00 00	 call	 _Py_DecRef

; 470  :             output = PyUnicode_FromKindAndData(kind, translated, out);

  01f7a	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR out$21000[rsp]
  01f82	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR translated$20976[rsp]
  01f8a	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR kind$20977[rsp]
  01f91	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
  01f96	48 89 44 24 30	 mov	 QWORD PTR output$[rsp], rax

; 471  :             PyMem_Free(translated);

  01f9b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR translated$20976[rsp]
  01fa3	e8 00 00 00 00	 call	 PyMem_Free

; 472  :             if (!output)

  01fa8	48 83 7c 24 30
	00		 cmp	 QWORD PTR output$[rsp], 0
  01fae	75 04		 jne	 SHORT $LN1@PyIncremen

; 473  :                 return NULL;

  01fb0	33 c0		 xor	 eax, eax
  01fb2	eb 45		 jmp	 SHORT $LN90@PyIncremen
$LN1@PyIncremen:
$LN44@PyIncremen:
$LN58@PyIncremen:

; 474  :         }
; 475  :         self->seennl |= seennl;

  01fb4	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  01fb9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01fbc	c1 e8 02	 shr	 eax, 2
  01fbf	83 e0 07	 and	 eax, 7
  01fc2	0b 84 24 80 00
	00 00		 or	 eax, DWORD PTR seennl$20889[rsp]
  01fc9	83 e0 07	 and	 eax, 7
  01fcc	c1 e0 02	 shl	 eax, 2
  01fcf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  01fd4	8b 49 70	 mov	 ecx, DWORD PTR [rcx+112]
  01fd7	83 e1 e3	 and	 ecx, -29		; ffffffe3H
  01fda	0b c8		 or	 ecx, eax
  01fdc	8b c1		 mov	 eax, ecx
  01fde	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  01fe3	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 476  :     }
; 477  : 
; 478  :     return output;

  01fe6	48 8b 44 24 30	 mov	 rax, QWORD PTR output$[rsp]
  01feb	eb 0c		 jmp	 SHORT $LN90@PyIncremen
$error$20711:

; 479  : 
; 480  :   error:
; 481  :     Py_DECREF(output);

  01fed	48 8b 4c 24 30	 mov	 rcx, QWORD PTR output$[rsp]
  01ff2	e8 00 00 00 00	 call	 _Py_DecRef

; 482  :     return NULL;

  01ff7	33 c0		 xor	 eax, eax
$LN90@PyIncremen:

; 483  : }

  01ff9	48 81 c4 f8 01
	00 00		 add	 rsp, 504		; 000001f8H
  02000	c3		 ret	 0
_PyIncrementalNewlineDecoder_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DC@OBOIPIPO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DE@IMGGMCHO@decoder?5should?5return?5a?5string?5r@ ; `string'
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_decoded DD imagerel check_decoded
	DD	imagerel check_decoded+225
	DD	imagerel $unwind$check_decoded
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_decoded DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1DC@OBOIPIPO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@OBOIPIPO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@IMGGMCHO@decoder?5should?5return?5a?5string?5r@
CONST	SEGMENT
??_C@_0DE@IMGGMCHO@decoder?5should?5return?5a?5string?5r@ DB 'decoder sho'
	DB	'uld return a string result, not ''%.200s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT check_decoded
_TEXT	SEGMENT
tv89 = 32
decoded$ = 64
check_decoded PROC					; COMDAT

; 262  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 263  :     if (decoded == NULL)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  0000f	75 0a		 jne	 SHORT $LN3@check_deco

; 264  :         return -1;

  00011	b8 ff ff ff ff	 mov	 eax, -1
  00016	e9 c1 00 00 00	 jmp	 $LN4@check_deco
$LN3@check_deco:

; 265  :     if (!PyUnicode_Check(decoded)) {

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR decoded$[rsp]
  00020	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00024	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0002a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0002f	85 c0		 test	 eax, eax
  00031	75 31		 jne	 SHORT $LN2@check_deco

; 266  :         PyErr_Format(PyExc_TypeError,
; 267  :                      "decoder should return a string result, not '%.200s'",
; 268  :                      Py_TYPE(decoded)->tp_name);

  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR decoded$[rsp]
  00038	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003c	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@IMGGMCHO@decoder?5should?5return?5a?5string?5r@
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0004e	e8 00 00 00 00	 call	 PyErr_Format

; 269  :         Py_DECREF(decoded);

  00053	48 8b 4c 24 40	 mov	 rcx, QWORD PTR decoded$[rsp]
  00058	e8 00 00 00 00	 call	 _Py_DecRef

; 270  :         return -1;

  0005d	b8 ff ff ff ff	 mov	 eax, -1
  00062	eb 78		 jmp	 SHORT $LN4@check_deco
$LN2@check_deco:

; 271  :     }
; 272  :     if (PyUnicode_READY(decoded) < 0) {

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR decoded$[rsp]
  00069	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00073	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00078	85 c0		 test	 eax, eax
  0007a	75 1c		 jne	 SHORT $LN6@check_deco
  0007c	41 b8 10 01 00
	00		 mov	 r8d, 272		; 00000110H
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@OBOIPIPO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00096	33 c0		 xor	 eax, eax
$LN6@check_deco:
  00098	48 8b 44 24 40	 mov	 rax, QWORD PTR decoded$[rsp]
  0009d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000a0	c1 e8 07	 shr	 eax, 7
  000a3	83 e0 01	 and	 eax, 1
  000a6	85 c0		 test	 eax, eax
  000a8	74 0a		 je	 SHORT $LN7@check_deco
  000aa	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  000b2	eb 0e		 jmp	 SHORT $LN8@check_deco
$LN7@check_deco:
  000b4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR decoded$[rsp]
  000b9	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000be	89 44 24 20	 mov	 DWORD PTR tv89[rsp], eax
$LN8@check_deco:
  000c2	83 7c 24 20 00	 cmp	 DWORD PTR tv89[rsp], 0
  000c7	7d 11		 jge	 SHORT $LN1@check_deco

; 273  :         Py_DECREF(decoded);

  000c9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR decoded$[rsp]
  000ce	e8 00 00 00 00	 call	 _Py_DecRef

; 274  :         return -1;

  000d3	b8 ff ff ff ff	 mov	 eax, -1
  000d8	eb 02		 jmp	 SHORT $LN4@check_deco
$LN1@check_deco:

; 275  :     }
; 276  :     return 0;

  000da	33 c0		 xor	 eax, eax
$LN4@check_deco:

; 277  : }

  000dc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e0	c3		 ret	 0
check_decoded ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@OOCFADOE@O?$HMi?3IncrementalNewlineDecoder?$AA@ ; `string'
PUBLIC	??_C@_05FPBGKCKL@final?$AA@			; `string'
PUBLIC	??_C@_05DFJCHPDH@input?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$incrementalnewlinedecoder_decode DD imagerel incrementalnewlinedecoder_decode
	DD	imagerel incrementalnewlinedecoder_decode+143
	DD	imagerel $unwind$incrementalnewlinedecoder_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$incrementalnewlinedecoder_decode DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0BO@OOCFADOE@O?$HMi?3IncrementalNewlineDecoder?$AA@
CONST	SEGMENT
??_C@_0BO@OOCFADOE@O?$HMi?3IncrementalNewlineDecoder?$AA@ DB 'O|i:Increme'
	DB	'ntalNewlineDecoder', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FPBGKCKL@final?$AA@
CONST	SEGMENT
??_C@_05FPBGKCKL@final?$AA@ DB 'final', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFJCHPDH@input?$AA@
CONST	SEGMENT
??_C@_05DFJCHPDH@input?$AA@ DB 'input', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT incrementalnewlinedecoder_decode
_TEXT	SEGMENT
kwlist$ = 48
final$ = 72
input$ = 80
self$ = 112
args$ = 120
kwds$ = 128
incrementalnewlinedecoder_decode PROC			; COMDAT

; 488  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 489  :     char *kwlist[] = {"input", "final", NULL};

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05DFJCHPDH@input?$AA@
  0001a	48 89 44 24 30	 mov	 QWORD PTR kwlist$[rsp], rax
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05FPBGKCKL@final?$AA@
  00026	48 89 44 24 38	 mov	 QWORD PTR kwlist$[rsp+8], rax
  0002b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR kwlist$[rsp+16], 0

; 490  :     PyObject *input;
; 491  :     int final = 0;

  00034	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR final$[rsp], 0

; 492  : 
; 493  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|i:IncrementalNewlineDecoder",
; 494  :                                      kwlist, &input, &final))

  0003c	48 8d 44 24 48	 lea	 rax, QWORD PTR final$[rsp]
  00041	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00046	48 8d 44 24 50	 lea	 rax, QWORD PTR input$[rsp]
  0004b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00050	4c 8d 4c 24 30	 lea	 r9, QWORD PTR kwlist$[rsp]
  00055	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BO@OOCFADOE@O?$HMi?3IncrementalNewlineDecoder?$AA@
  0005c	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00064	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00069	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0006e	85 c0		 test	 eax, eax
  00070	75 04		 jne	 SHORT $LN1@incrementa@3

; 495  :         return NULL;

  00072	33 c0		 xor	 eax, eax
  00074	eb 14		 jmp	 SHORT $LN2@incrementa@3
$LN1@incrementa@3:

; 496  :     return _PyIncrementalNewlineDecoder_decode((PyObject *) self, input, final);

  00076	44 8b 44 24 48	 mov	 r8d, DWORD PTR final$[rsp]
  0007b	48 8b 54 24 50	 mov	 rdx, QWORD PTR input$[rsp]
  00080	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00085	e8 00 00 00 00	 call	 _PyIncrementalNewlineDecoder_decode
$LN2@incrementa@3:

; 497  : }

  0008a	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0008e	c3		 ret	 0
incrementalnewlinedecoder_decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_02GJDHBAOJ@NK?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_04DDJCNJIG@?$CIOK?$CJ?$AA@		; `string'
EXTRN	_Py_BuildValue_SizeT:PROC
EXTRN	PyBytes_FromString:PROC
EXTRN	_PyArg_Parse_SizeT:PROC
EXTRN	_PyIO_str_getstate:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$incrementalnewlinedecoder_getstate DD imagerel incrementalnewlinedecoder_getstate
	DD	imagerel incrementalnewlinedecoder_getstate+241
	DD	imagerel $unwind$incrementalnewlinedecoder_getstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$incrementalnewlinedecoder_getstate DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_02GJDHBAOJ@NK?$AA@
CONST	SEGMENT
??_C@_02GJDHBAOJ@NK?$AA@ DB 'NK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDJCNJIG@?$CIOK?$CJ?$AA@
CONST	SEGMENT
??_C@_04DDJCNJIG@?$CIOK?$CJ?$AA@ DB '(OK)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT incrementalnewlinedecoder_getstate
_TEXT	SEGMENT
flag$ = 32
buffer$ = 40
state$21123 = 48
self$ = 80
args$ = 88
incrementalnewlinedecoder_getstate PROC			; COMDAT

; 501  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 502  :     PyObject *buffer;
; 503  :     unsigned PY_LONG_LONG flag;
; 504  : 
; 505  :     if (self->decoder != Py_None) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0001a	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  0001e	74 6f		 je	 SHORT $LN5@incrementa@4

; 506  :         PyObject *state = PyObject_CallMethodObjArgs(self->decoder,
; 507  :            _PyIO_str_getstate, NULL);

  00020	45 33 c0	 xor	 r8d, r8d
  00023	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_getstate
  0002a	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0002f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00033	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00038	48 89 44 24 30	 mov	 QWORD PTR state$21123[rsp], rax

; 508  :         if (state == NULL)

  0003d	48 83 7c 24 30
	00		 cmp	 QWORD PTR state$21123[rsp], 0
  00043	75 07		 jne	 SHORT $LN4@incrementa@4

; 509  :             return NULL;

  00045	33 c0		 xor	 eax, eax
  00047	e9 a0 00 00 00	 jmp	 $LN6@incrementa@4
$LN4@incrementa@4:

; 510  :         if (!PyArg_Parse(state, "(OK)", &buffer, &flag)) {

  0004c	4c 8d 4c 24 20	 lea	 r9, QWORD PTR flag$[rsp]
  00051	4c 8d 44 24 28	 lea	 r8, QWORD PTR buffer$[rsp]
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DDJCNJIG@?$CIOK?$CJ?$AA@
  0005d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR state$21123[rsp]
  00062	e8 00 00 00 00	 call	 _PyArg_Parse_SizeT
  00067	85 c0		 test	 eax, eax
  00069	75 0e		 jne	 SHORT $LN3@incrementa@4

; 511  :             Py_DECREF(state);

  0006b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR state$21123[rsp]
  00070	e8 00 00 00 00	 call	 _Py_DecRef

; 512  :             return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	eb 73		 jmp	 SHORT $LN6@incrementa@4
$LN3@incrementa@4:

; 513  :         }
; 514  :         Py_INCREF(buffer);

  00079	48 8b 4c 24 28	 mov	 rcx, QWORD PTR buffer$[rsp]
  0007e	e8 00 00 00 00	 call	 _Py_IncRef

; 515  :         Py_DECREF(state);

  00083	48 8b 4c 24 30	 mov	 rcx, QWORD PTR state$21123[rsp]
  00088	e8 00 00 00 00	 call	 _Py_DecRef

; 516  :     }
; 517  :     else {

  0008d	eb 1a		 jmp	 SHORT $LN2@incrementa@4
$LN5@incrementa@4:

; 518  :         buffer = PyBytes_FromString("");

  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00096	e8 00 00 00 00	 call	 PyBytes_FromString
  0009b	48 89 44 24 28	 mov	 QWORD PTR buffer$[rsp], rax

; 519  :         flag = 0;

  000a0	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR flag$[rsp], 0
$LN2@incrementa@4:

; 520  :     }
; 521  :     flag <<= 1;

  000a9	48 8b 44 24 20	 mov	 rax, QWORD PTR flag$[rsp]
  000ae	48 d1 e0	 shl	 rax, 1
  000b1	48 89 44 24 20	 mov	 QWORD PTR flag$[rsp], rax

; 522  :     if (self->pendingcr)

  000b6	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000bb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000be	c1 e0 1f	 shl	 eax, 31
  000c1	c1 f8 1f	 sar	 eax, 31
  000c4	85 c0		 test	 eax, eax
  000c6	74 0e		 je	 SHORT $LN1@incrementa@4

; 523  :         flag |= 1;

  000c8	48 8b 44 24 20	 mov	 rax, QWORD PTR flag$[rsp]
  000cd	48 83 c8 01	 or	 rax, 1
  000d1	48 89 44 24 20	 mov	 QWORD PTR flag$[rsp], rax
$LN1@incrementa@4:

; 524  :     return Py_BuildValue("NK", buffer, flag);

  000d6	4c 8b 44 24 20	 mov	 r8, QWORD PTR flag$[rsp]
  000db	48 8b 54 24 28	 mov	 rdx, QWORD PTR buffer$[rsp]
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02GJDHBAOJ@NK?$AA@
  000e7	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
$LN6@incrementa@4:

; 525  : }

  000ec	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f0	c3		 ret	 0
incrementalnewlinedecoder_getstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_06JAFCCCAB@?$CI?$CIOK?$CJ?$CJ?$AA@	; `string'
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$incrementalnewlinedecoder_setstate DD imagerel incrementalnewlinedecoder_setstate
	DD	imagerel incrementalnewlinedecoder_setstate+209
	DD	imagerel $unwind$incrementalnewlinedecoder_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$incrementalnewlinedecoder_setstate DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_06JAFCCCAB@?$CI?$CIOK?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_06JAFCCCAB@?$CI?$CIOK?$CJ?$CJ?$AA@ DB '((OK))', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT incrementalnewlinedecoder_setstate
_TEXT	SEGMENT
flag$ = 48
buffer$ = 56
self$ = 80
state$ = 88
incrementalnewlinedecoder_setstate PROC			; COMDAT

; 529  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 530  :     PyObject *buffer;
; 531  :     unsigned PY_LONG_LONG flag;
; 532  : 
; 533  :     if (!PyArg_Parse(state, "(OK)", &buffer, &flag))

  0000e	4c 8d 4c 24 30	 lea	 r9, QWORD PTR flag$[rsp]
  00013	4c 8d 44 24 38	 lea	 r8, QWORD PTR buffer$[rsp]
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DDJCNJIG@?$CIOK?$CJ?$AA@
  0001f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR state$[rsp]
  00024	e8 00 00 00 00	 call	 _PyArg_Parse_SizeT
  00029	85 c0		 test	 eax, eax
  0002b	75 07		 jne	 SHORT $LN3@incrementa@5

; 534  :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 98 00 00 00	 jmp	 $LN4@incrementa@5
$LN3@incrementa@5:

; 535  : 
; 536  :     self->pendingcr = (int) flag & 1;

  00034	8b 44 24 30	 mov	 eax, DWORD PTR flag$[rsp]
  00038	83 e0 01	 and	 eax, 1
  0003b	83 e0 01	 and	 eax, 1
  0003e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00043	8b 49 70	 mov	 ecx, DWORD PTR [rcx+112]
  00046	83 e1 fe	 and	 ecx, -2
  00049	0b c8		 or	 ecx, eax
  0004b	8b c1		 mov	 eax, ecx
  0004d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00052	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 537  :     flag >>= 1;

  00055	48 8b 44 24 30	 mov	 rax, QWORD PTR flag$[rsp]
  0005a	48 d1 e8	 shr	 rax, 1
  0005d	48 89 44 24 30	 mov	 QWORD PTR flag$[rsp], rax

; 538  : 
; 539  :     if (self->decoder != Py_None)

  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00069	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0006e	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00072	74 45		 je	 SHORT $LN2@incrementa@5

; 540  :         return _PyObject_CallMethodId(self->decoder,
; 541  :                                       &PyId_setstate, "((OK))", buffer, flag);

  00074	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_setstate
  00079	8b c0		 mov	 eax, eax
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00081	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0008a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0008e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR flag$[rsp]
  00093	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00098	4c 8b 4c 24 38	 mov	 r9, QWORD PTR buffer$[rsp]
  0009d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06JAFCCCAB@?$CI?$CIOK?$CJ?$CJ?$AA@
  000a4	48 8b d0	 mov	 rdx, rax
  000a7	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000ac	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000b0	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  000b5	eb 15		 jmp	 SHORT $LN4@incrementa@5

; 542  :     else

  000b7	eb 13		 jmp	 SHORT $LN1@incrementa@5
$LN2@incrementa@5:

; 543  :         Py_RETURN_NONE;

  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000c0	e8 00 00 00 00	 call	 _Py_IncRef
  000c5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN1@incrementa@5:
$LN4@incrementa@5:

; 544  : }

  000cc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d0	c3		 ret	 0
incrementalnewlinedecoder_setstate ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_reset:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$incrementalnewlinedecoder_reset DD imagerel incrementalnewlinedecoder_reset
	DD	imagerel incrementalnewlinedecoder_reset+122
	DD	imagerel $unwind$incrementalnewlinedecoder_reset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$incrementalnewlinedecoder_reset DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT incrementalnewlinedecoder_reset
_TEXT	SEGMENT
self$ = 48
args$ = 56
incrementalnewlinedecoder_reset PROC			; COMDAT

; 548  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 549  :     self->seennl = 0;

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00016	83 e0 e3	 and	 eax, -29		; ffffffe3H
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0001e	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 550  :     self->pendingcr = 0;

  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00026	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00029	83 e0 fe	 and	 eax, -2
  0002c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00031	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 551  :     if (self->decoder != Py_None)

  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00040	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00044	74 1c		 je	 SHORT $LN2@incrementa@6

; 552  :         return PyObject_CallMethodObjArgs(self->decoder, _PyIO_str_reset, NULL);

  00046	45 33 c0	 xor	 r8d, r8d
  00049	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_reset
  00050	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00055	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00059	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0005e	eb 15		 jmp	 SHORT $LN3@incrementa@6

; 553  :     else

  00060	eb 13		 jmp	 SHORT $LN1@incrementa@6
$LN2@incrementa@6:

; 554  :         Py_RETURN_NONE;

  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00069	e8 00 00 00 00	 call	 _Py_IncRef
  0006e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN1@incrementa@6:
$LN3@incrementa@6:

; 555  : }

  00075	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00079	c3		 ret	 0
incrementalnewlinedecoder_reset ENDP
_TEXT	ENDS
PUBLIC	??_C@_03PFJENDKN@sss?$AA@			; `string'
PUBLIC	??_C@_02FCBLNKNB@ss?$AA@			; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_01LIIJDEN@?$AN?$AA@			; `string'
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$incrementalnewlinedecoder_newlines_get DD imagerel incrementalnewlinedecoder_newlines_get
	DD	imagerel incrementalnewlinedecoder_newlines_get+300
	DD	imagerel $unwind$incrementalnewlinedecoder_newlines_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$incrementalnewlinedecoder_newlines_get DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_03PFJENDKN@sss?$AA@
CONST	SEGMENT
??_C@_03PFJENDKN@sss?$AA@ DB 'sss', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FCBLNKNB@ss?$AA@
CONST	SEGMENT
??_C@_02FCBLNKNB@ss?$AA@ DB 'ss', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6?$AA@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LIIJDEN@?$AN?$AA@
CONST	SEGMENT
??_C@_01LIIJDEN@?$AN?$AA@ DB 0dH, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT incrementalnewlinedecoder_newlines_get
_TEXT	SEGMENT
tv67 = 32
self$ = 64
context$ = 72
incrementalnewlinedecoder_newlines_get PROC		; COMDAT

; 559  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 560  :     switch (self->seennl) {

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00013	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00016	c1 e8 02	 shr	 eax, 2
  00019	83 e0 07	 and	 eax, 7
  0001c	89 44 24 20	 mov	 DWORD PTR tv67[rsp], eax
  00020	8b 44 24 20	 mov	 eax, DWORD PTR tv67[rsp]
  00024	ff c8		 dec	 eax
  00026	89 44 24 20	 mov	 DWORD PTR tv67[rsp], eax
  0002a	83 7c 24 20 06	 cmp	 DWORD PTR tv67[rsp], 6
  0002f	0f 87 c1 00 00
	00		 ja	 $LN1@incrementa@7
  00035	8b 44 24 20	 mov	 eax, DWORD PTR tv67[rsp]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00040	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN13@incrementa@7[rcx+rax*4]
  00047	48 03 c1	 add	 rax, rcx
  0004a	ff e0		 jmp	 rax
$LN8@incrementa@7:

; 561  :     case SEEN_CR:
; 562  :         return PyUnicode_FromString("\r");

  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01LIIJDEN@?$AN?$AA@
  00053	e8 00 00 00 00	 call	 PyUnicode_FromString
  00058	e9 ac 00 00 00	 jmp	 $LN11@incrementa@7
$LN7@incrementa@7:

; 563  :     case SEEN_LF:
; 564  :         return PyUnicode_FromString("\n");

  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00064	e8 00 00 00 00	 call	 PyUnicode_FromString
  00069	e9 9b 00 00 00	 jmp	 $LN11@incrementa@7
$LN6@incrementa@7:

; 565  :     case SEEN_CRLF:
; 566  :         return PyUnicode_FromString("\r\n");

  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6?$AA@
  00075	e8 00 00 00 00	 call	 PyUnicode_FromString
  0007a	e9 8a 00 00 00	 jmp	 $LN11@incrementa@7
$LN5@incrementa@7:

; 567  :     case SEEN_CR | SEEN_LF:
; 568  :         return Py_BuildValue("ss", "\r", "\n");

  0007f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LIIJDEN@?$AN?$AA@
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FCBLNKNB@ss?$AA@
  00094	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  00099	eb 6e		 jmp	 SHORT $LN11@incrementa@7
$LN4@incrementa@7:

; 569  :     case SEEN_CR | SEEN_CRLF:
; 570  :         return Py_BuildValue("ss", "\r", "\r\n");

  0009b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6?$AA@
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LIIJDEN@?$AN?$AA@
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FCBLNKNB@ss?$AA@
  000b0	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  000b5	eb 52		 jmp	 SHORT $LN11@incrementa@7
$LN3@incrementa@7:

; 571  :     case SEEN_LF | SEEN_CRLF:
; 572  :         return Py_BuildValue("ss", "\n", "\r\n");

  000b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6?$AA@
  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FCBLNKNB@ss?$AA@
  000cc	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  000d1	eb 36		 jmp	 SHORT $LN11@incrementa@7
$LN2@incrementa@7:

; 573  :     case SEEN_CR | SEEN_LF | SEEN_CRLF:
; 574  :         return Py_BuildValue("sss", "\r", "\n", "\r\n");

  000d3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6?$AA@
  000da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LIIJDEN@?$AN?$AA@
  000e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03PFJENDKN@sss?$AA@
  000ef	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  000f4	eb 13		 jmp	 SHORT $LN11@incrementa@7
$LN1@incrementa@7:

; 575  :     default:
; 576  :         Py_RETURN_NONE;

  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000fd	e8 00 00 00 00	 call	 _Py_IncRef
  00102	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN11@incrementa@7:

; 577  :    }
; 578  : 
; 579  : }

  00109	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010d	c3		 ret	 0
  0010e	66 90		 npad	 2
$LN13@incrementa@7:
  00110	00 00 00 00	 DD	 $LN8@incrementa@7
  00114	00 00 00 00	 DD	 $LN7@incrementa@7
  00118	00 00 00 00	 DD	 $LN5@incrementa@7
  0011c	00 00 00 00	 DD	 $LN6@incrementa@7
  00120	00 00 00 00	 DD	 $LN4@incrementa@7
  00124	00 00 00 00	 DD	 $LN3@incrementa@7
  00128	00 00 00 00	 DD	 $LN2@incrementa@7
incrementalnewlinedecoder_newlines_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	_PyUnicode_AsASCIIString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ascii_encode DD imagerel ascii_encode
	DD	imagerel ascii_encode+107
	DD	imagerel $unwind$ascii_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ascii_encode DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H
	DB	'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 's', 00H, ')'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ascii_encode
_TEXT	SEGMENT
self$ = 48
text$ = 56
ascii_encode PROC					; COMDAT

; 738  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 739  :     return _PyUnicode_AsASCIIString(text, PyBytes_AS_STRING(self->errors));

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0001a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00024	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00029	85 c0		 test	 eax, eax
  0002b	75 1c		 jne	 SHORT $LN3@ascii_enco
  0002d	41 b8 e3 02 00
	00		 mov	 r8d, 739		; 000002e3H
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00047	33 c0		 xor	 eax, eax
$LN3@ascii_enco:
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00055	48 83 c0 78	 add	 rax, 120		; 00000078H
  00059	48 8b d0	 mov	 rdx, rax
  0005c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR text$[rsp]
  00061	e8 00 00 00 00	 call	 _PyUnicode_AsASCIIString

; 740  : }

  00066	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006a	c3		 ret	 0
ascii_encode ENDP
_TEXT	ENDS
EXTRN	_PyUnicode_EncodeUTF16:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf16be_encode DD imagerel utf16be_encode
	DD	imagerel utf16be_encode+113
	DD	imagerel $unwind$utf16be_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf16be_encode DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT utf16be_encode
_TEXT	SEGMENT
self$ = 48
text$ = 56
utf16be_encode PROC					; COMDAT

; 744  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 745  :     return _PyUnicode_EncodeUTF16(text,
; 746  :                                   PyBytes_AS_STRING(self->errors), 1);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0001a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00024	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00029	85 c0		 test	 eax, eax
  0002b	75 1c		 jne	 SHORT $LN3@utf16be_en
  0002d	41 b8 ea 02 00
	00		 mov	 r8d, 746		; 000002eaH
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00047	33 c0		 xor	 eax, eax
$LN3@utf16be_en:
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00055	48 83 c0 78	 add	 rax, 120		; 00000078H
  00059	41 b8 01 00 00
	00		 mov	 r8d, 1
  0005f	48 8b d0	 mov	 rdx, rax
  00062	48 8b 4c 24 38	 mov	 rcx, QWORD PTR text$[rsp]
  00067	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF16

; 747  : }

  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	c3		 ret	 0
utf16be_encode ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf16le_encode DD imagerel utf16le_encode
	DD	imagerel utf16le_encode+113
	DD	imagerel $unwind$utf16le_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf16le_encode DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT utf16le_encode
_TEXT	SEGMENT
self$ = 48
text$ = 56
utf16le_encode PROC					; COMDAT

; 751  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 752  :     return _PyUnicode_EncodeUTF16(text,
; 753  :                                   PyBytes_AS_STRING(self->errors), -1);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0001a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00024	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00029	85 c0		 test	 eax, eax
  0002b	75 1c		 jne	 SHORT $LN3@utf16le_en
  0002d	41 b8 f1 02 00
	00		 mov	 r8d, 753		; 000002f1H
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00047	33 c0		 xor	 eax, eax
$LN3@utf16le_en:
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00055	48 83 c0 78	 add	 rax, 120		; 00000078H
  00059	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  0005f	48 8b d0	 mov	 rdx, rax
  00062	48 8b 4c 24 38	 mov	 rcx, QWORD PTR text$[rsp]
  00067	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF16

; 754  : }

  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	c3		 ret	 0
utf16le_encode ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf16_encode DD imagerel utf16_encode
	DD	imagerel utf16_encode+143
	DD	imagerel $unwind$utf16_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf16_encode DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT utf16_encode
_TEXT	SEGMENT
self$ = 48
text$ = 56
utf16_encode PROC					; COMDAT

; 758  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 759  :     if (!self->encoding_start_of_stream) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	0f be 80 c0 00
	00 00		 movsx	 eax, BYTE PTR [rax+192]
  0001a	85 c0		 test	 eax, eax
  0001c	75 11		 jne	 SHORT $LN1@utf16_enco

; 760  :         /* Skip the BOM and use native byte ordering */
; 761  : #if defined(WORDS_BIGENDIAN)
; 762  :         return utf16be_encode(self, text);
; 763  : #else
; 764  :         return utf16le_encode(self, text);

  0001e	48 8b 54 24 38	 mov	 rdx, QWORD PTR text$[rsp]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00028	e8 00 00 00 00	 call	 utf16le_encode
  0002d	eb 5b		 jmp	 SHORT $LN2@utf16_enco
$LN1@utf16_enco:

; 765  : #endif
; 766  :     }
; 767  :     return _PyUnicode_EncodeUTF16(text,
; 768  :                                   PyBytes_AS_STRING(self->errors), 0);

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00034	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0003b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00045	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0004a	85 c0		 test	 eax, eax
  0004c	75 1c		 jne	 SHORT $LN4@utf16_enco
  0004e	41 b8 00 03 00
	00		 mov	 r8d, 768		; 00000300H
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00068	33 c0		 xor	 eax, eax
$LN4@utf16_enco:
  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0006f	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00076	48 83 c0 78	 add	 rax, 120		; 00000078H
  0007a	45 33 c0	 xor	 r8d, r8d
  0007d	48 8b d0	 mov	 rdx, rax
  00080	48 8b 4c 24 38	 mov	 rcx, QWORD PTR text$[rsp]
  00085	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF16
$LN2@utf16_enco:

; 769  : }

  0008a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008e	c3		 ret	 0
utf16_encode ENDP
_TEXT	ENDS
EXTRN	_PyUnicode_EncodeUTF32:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf32be_encode DD imagerel utf32be_encode
	DD	imagerel utf32be_encode+113
	DD	imagerel $unwind$utf32be_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf32be_encode DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT utf32be_encode
_TEXT	SEGMENT
self$ = 48
text$ = 56
utf32be_encode PROC					; COMDAT

; 773  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 774  :     return _PyUnicode_EncodeUTF32(text,
; 775  :                                   PyBytes_AS_STRING(self->errors), 1);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0001a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00024	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00029	85 c0		 test	 eax, eax
  0002b	75 1c		 jne	 SHORT $LN3@utf32be_en
  0002d	41 b8 07 03 00
	00		 mov	 r8d, 775		; 00000307H
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00047	33 c0		 xor	 eax, eax
$LN3@utf32be_en:
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00055	48 83 c0 78	 add	 rax, 120		; 00000078H
  00059	41 b8 01 00 00
	00		 mov	 r8d, 1
  0005f	48 8b d0	 mov	 rdx, rax
  00062	48 8b 4c 24 38	 mov	 rcx, QWORD PTR text$[rsp]
  00067	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF32

; 776  : }

  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	c3		 ret	 0
utf32be_encode ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf32le_encode DD imagerel utf32le_encode
	DD	imagerel utf32le_encode+113
	DD	imagerel $unwind$utf32le_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf32le_encode DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT utf32le_encode
_TEXT	SEGMENT
self$ = 48
text$ = 56
utf32le_encode PROC					; COMDAT

; 780  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 781  :     return _PyUnicode_EncodeUTF32(text,
; 782  :                                   PyBytes_AS_STRING(self->errors), -1);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0001a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00024	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00029	85 c0		 test	 eax, eax
  0002b	75 1c		 jne	 SHORT $LN3@utf32le_en
  0002d	41 b8 0e 03 00
	00		 mov	 r8d, 782		; 0000030eH
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00047	33 c0		 xor	 eax, eax
$LN3@utf32le_en:
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00055	48 83 c0 78	 add	 rax, 120		; 00000078H
  00059	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  0005f	48 8b d0	 mov	 rdx, rax
  00062	48 8b 4c 24 38	 mov	 rcx, QWORD PTR text$[rsp]
  00067	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF32

; 783  : }

  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	c3		 ret	 0
utf32le_encode ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf32_encode DD imagerel utf32_encode
	DD	imagerel utf32_encode+143
	DD	imagerel $unwind$utf32_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf32_encode DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT utf32_encode
_TEXT	SEGMENT
self$ = 48
text$ = 56
utf32_encode PROC					; COMDAT

; 787  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 788  :     if (!self->encoding_start_of_stream) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	0f be 80 c0 00
	00 00		 movsx	 eax, BYTE PTR [rax+192]
  0001a	85 c0		 test	 eax, eax
  0001c	75 11		 jne	 SHORT $LN1@utf32_enco

; 789  :         /* Skip the BOM and use native byte ordering */
; 790  : #if defined(WORDS_BIGENDIAN)
; 791  :         return utf32be_encode(self, text);
; 792  : #else
; 793  :         return utf32le_encode(self, text);

  0001e	48 8b 54 24 38	 mov	 rdx, QWORD PTR text$[rsp]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00028	e8 00 00 00 00	 call	 utf32le_encode
  0002d	eb 5b		 jmp	 SHORT $LN2@utf32_enco
$LN1@utf32_enco:

; 794  : #endif
; 795  :     }
; 796  :     return _PyUnicode_EncodeUTF32(text,
; 797  :                                   PyBytes_AS_STRING(self->errors), 0);

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00034	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0003b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00045	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0004a	85 c0		 test	 eax, eax
  0004c	75 1c		 jne	 SHORT $LN4@utf32_enco
  0004e	41 b8 1d 03 00
	00		 mov	 r8d, 797		; 0000031dH
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00068	33 c0		 xor	 eax, eax
$LN4@utf32_enco:
  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0006f	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00076	48 83 c0 78	 add	 rax, 120		; 00000078H
  0007a	45 33 c0	 xor	 r8d, r8d
  0007d	48 8b d0	 mov	 rdx, rax
  00080	48 8b 4c 24 38	 mov	 rcx, QWORD PTR text$[rsp]
  00085	e8 00 00 00 00	 call	 _PyUnicode_EncodeUTF32
$LN2@utf32_enco:

; 798  : }

  0008a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008e	c3		 ret	 0
utf32_encode ENDP
_TEXT	ENDS
EXTRN	_PyUnicode_AsUTF8String:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$utf8_encode DD imagerel utf8_encode
	DD	imagerel utf8_encode+107
	DD	imagerel $unwind$utf8_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$utf8_encode DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT utf8_encode
_TEXT	SEGMENT
self$ = 48
text$ = 56
utf8_encode PROC					; COMDAT

; 802  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 803  :     return _PyUnicode_AsUTF8String(text, PyBytes_AS_STRING(self->errors));

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0001a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00024	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00029	85 c0		 test	 eax, eax
  0002b	75 1c		 jne	 SHORT $LN3@utf8_encod
  0002d	41 b8 23 03 00
	00		 mov	 r8d, 803		; 00000323H
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00047	33 c0		 xor	 eax, eax
$LN3@utf8_encod:
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00055	48 83 c0 78	 add	 rax, 120		; 00000078H
  00059	48 8b d0	 mov	 rdx, rax
  0005c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR text$[rsp]
  00061	e8 00 00 00 00	 call	 _PyUnicode_AsUTF8String

; 804  : }

  00066	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006a	c3		 ret	 0
utf8_encode ENDP
_TEXT	ENDS
EXTRN	_PyUnicode_AsLatin1String:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$latin1_encode DD imagerel latin1_encode
	DD	imagerel latin1_encode+107
	DD	imagerel $unwind$latin1_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$latin1_encode DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT latin1_encode
_TEXT	SEGMENT
self$ = 48
text$ = 56
latin1_encode PROC					; COMDAT

; 808  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 809  :     return _PyUnicode_AsLatin1String(text, PyBytes_AS_STRING(self->errors));

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0001a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00024	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00029	85 c0		 test	 eax, eax
  0002b	75 1c		 jne	 SHORT $LN3@latin1_enc
  0002d	41 b8 29 03 00
	00		 mov	 r8d, 809		; 00000329H
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00047	33 c0		 xor	 eax, eax
$LN3@latin1_enc:
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00055	48 83 c0 78	 add	 rax, 120		; 00000078H
  00059	48 8b d0	 mov	 rdx, rax
  0005c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR text$[rsp]
  00061	e8 00 00 00 00	 call	 _PyUnicode_AsLatin1String

; 810  : }

  00066	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006a	c3		 ret	 0
latin1_encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MPEHDMPO@Oi?$AA@			; `string'
PUBLIC	??_C@_0O@GMEBLPNI@codecs?4open?$CI?$CJ?$AA@	; `string'
PUBLIC	??_C@_0CF@FHPGGAPJ@could?5not?5determine?5default?5enco@ ; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_06NDGIILMC@locale?$AA@			; `string'
PUBLIC	??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@	; `string'
PUBLIC	??_C@_0BK@JHIONHDL@illegal?5newline?5value?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0P@NPGFHFNH@O?$HMzzzii?3fileio?$AA@	; `string'
PUBLIC	??_C@_0O@GLPNNNBD@write_through?$AA@		; `string'
PUBLIC	??_C@_07NADKJHCJ@newline?$AA@			; `string'
EXTRN	_PyIO_str_setstate:QWORD
EXTRN	PyObject_RichCompareBool:PROC
EXTRN	_PyIO_zero:QWORD
EXTRN	_PyIO_str_tell:QWORD
EXTRN	_PyObject_HasAttrId:PROC
EXTRN	PyFileIO_Type:BYTE
EXTRN	PyBufferedRandom_Type:BYTE
EXTRN	PyBufferedWriter_Type:BYTE
EXTRN	PyBufferedReader_Type:BYTE
EXTRN	PyUnicode_CompareWithASCIIString:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_PyCodecInfo_GetIncrementalEncoder:PROC
EXTRN	_PyObject_CallFunction_SizeT:PROC
EXTRN	_PyCodecInfo_GetIncrementalDecoder:PROC
EXTRN	PyObject_IsTrue:PROC
EXTRN	strcmp:PROC
EXTRN	_PyCodec_LookupTextEncoding:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	PyExc_ImportError:QWORD
EXTRN	PyImport_ImportModule:PROC
EXTRN	_Py_device_encoding:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	_PyLong_AsInt:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_init DD imagerel textiowrapper_init
	DD	imagerel textiowrapper_init+5306
	DD	imagerel $unwind$textiowrapper_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_init DD 021601H
	DD	0330116H
xdata	ENDS
;	COMDAT ??_C@_02MPEHDMPO@Oi?$AA@
CONST	SEGMENT
??_C@_02MPEHDMPO@Oi?$AA@ DB 'Oi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GMEBLPNI@codecs?4open?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0O@GMEBLPNI@codecs?4open?$CI?$CJ?$AA@ DB 'codecs.open()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FHPGGAPJ@could?5not?5determine?5default?5enco@
CONST	SEGMENT
??_C@_0CF@FHPGGAPJ@could?5not?5determine?5default?5enco@ DB 'could not de'
	DB	'termine default encoding', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NDGIILMC@locale?$AA@
CONST	SEGMENT
??_C@_06NDGIILMC@locale?$AA@ DB 'locale', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
CONST	SEGMENT
??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@ DB 'textiowrapper_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JHIONHDL@illegal?5newline?5value?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BK@JHIONHDL@illegal?5newline?5value?3?5?$CFs?$AA@ DB 'illegal newl'
	DB	'ine value: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NPGFHFNH@O?$HMzzzii?3fileio?$AA@
CONST	SEGMENT
??_C@_0P@NPGFHFNH@O?$HMzzzii?3fileio?$AA@ DB 'O|zzzii:fileio', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GLPNNNBD@write_through?$AA@
CONST	SEGMENT
??_C@_0O@GLPNNNBD@write_through?$AA@ DB 'write_through', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NADKJHCJ@newline?$AA@
CONST	SEGMENT
??_C@_07NADKJHCJ@newline?$AA@ DB 'newline', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_init
_TEXT	SEGMENT
kwlist$ = 80
res$ = 136
line_buffering$ = 144
newline$ = 152
raw$ = 160
errors$ = 168
write_through$ = 176
encoding$ = 184
codec_info$ = 192
r$ = 200
buffer$ = 208
state$ = 216
_py_tmp$21404 = 224
_py_tmp$21412 = 232
_py_tmp$21420 = 240
_py_tmp$21428 = 248
_py_tmp$21436 = 256
_py_tmp$21444 = 264
_py_tmp$21452 = 272
_py_tmp$21460 = 280
_py_tmp$21468 = 288
_py_tmp$21476 = 296
fileno$21483 = 304
fd$21492 = 312
_py_tmp$21504 = 320
_py_tmp$21533 = 328
_py_tmp$21555 = 336
incrementalDecoder$21584 = 344
_py_tmp$21594 = 352
e$21613 = 360
cookieObj$21646 = 368
cmp$21647 = 376
tv456 = 380
tv462 = 384
tv474 = 388
self$ = 416
args$ = 424
kwds$ = 432
textiowrapper_init PROC					; COMDAT

; 835  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H

; 836  :     char *kwlist[] = {"buffer", "encoding", "errors",

  00016	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06HOHPNJLC@buffer?$AA@
  0001d	48 89 44 24 50	 mov	 QWORD PTR kwlist$[rsp], rax
  00022	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08MLPGAEIK@encoding?$AA@
  00029	48 89 44 24 58	 mov	 QWORD PTR kwlist$[rsp+8], rax
  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06EOMHCNPI@errors?$AA@
  00035	48 89 44 24 60	 mov	 QWORD PTR kwlist$[rsp+16], rax

; 837  :                       "newline", "line_buffering", "write_through",

  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07NADKJHCJ@newline?$AA@
  00041	48 89 44 24 68	 mov	 QWORD PTR kwlist$[rsp+24], rax
  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0P@MGPKIIND@line_buffering?$AA@
  0004d	48 89 44 24 70	 mov	 QWORD PTR kwlist$[rsp+32], rax
  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@GLPNNNBD@write_through?$AA@
  00059	48 89 44 24 78	 mov	 QWORD PTR kwlist$[rsp+40], rax

; 838  :                       NULL};

  0005e	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR kwlist$[rsp+48], 0

; 839  :     PyObject *buffer, *raw, *codec_info = NULL;

  0006a	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR codec_info$[rsp], 0

; 840  :     char *encoding = NULL;

  00076	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR encoding$[rsp], 0

; 841  :     char *errors = NULL;

  00082	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR errors$[rsp], 0

; 842  :     char *newline = NULL;

  0008e	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newline$[rsp], 0

; 843  :     int line_buffering = 0, write_through = 0;

  0009a	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR line_buffering$[rsp], 0
  000a5	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR write_through$[rsp], 0

; 844  :     _PyIO_State *state = IO_STATE;

  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyIO_Module
  000b7	e8 00 00 00 00	 call	 PyState_FindModule
  000bc	48 8b c8	 mov	 rcx, rax
  000bf	e8 00 00 00 00	 call	 PyModule_GetState
  000c4	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR state$[rsp], rax

; 845  : 
; 846  :     PyObject *res;
; 847  :     int r;
; 848  : 
; 849  :     self->ok = 0;

  000cc	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000d4	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [rax+96], 0

; 850  :     self->detached = 0;

  000db	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000e3	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [rax+100], 0

; 851  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|zzzii:fileio",
; 852  :                                      kwlist, &buffer, &encoding, &errors,
; 853  :                                      &newline, &line_buffering, &write_through))

  000ea	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR write_through$[rsp]
  000f2	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  000f7	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR line_buffering$[rsp]
  000ff	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00104	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR newline$[rsp]
  0010c	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00111	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR errors$[rsp]
  00119	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0011e	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR encoding$[rsp]
  00126	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0012b	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR buffer$[rsp]
  00133	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00138	4c 8d 4c 24 50	 lea	 r9, QWORD PTR kwlist$[rsp]
  0013d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@NPGFHFNH@O?$HMzzzii?3fileio?$AA@
  00144	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0014c	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00154	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00159	85 c0		 test	 eax, eax
  0015b	75 0a		 jne	 SHORT $LN137@textiowrap

; 854  :         return -1;

  0015d	b8 ff ff ff ff	 mov	 eax, -1
  00162	e9 4b 13 00 00	 jmp	 $LN138@textiowrap
$LN137@textiowrap:

; 855  : 
; 856  :     if (newline && newline[0] != '\0'
; 857  :         && !(newline[0] == '\n' && newline[1] == '\0')
; 858  :         && !(newline[0] == '\r' && newline[1] == '\0')
; 859  :         && !(newline[0] == '\r' && newline[1] == '\n' && newline[2] == '\0')) {

  00167	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR newline$[rsp], 0
  00170	0f 84 a9 00 00
	00		 je	 $LN136@textiowrap
  00176	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR newline$[rsp]
  0017e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00181	85 c0		 test	 eax, eax
  00183	0f 84 96 00 00
	00		 je	 $LN136@textiowrap
  00189	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR newline$[rsp]
  00191	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00194	83 f8 0a	 cmp	 eax, 10
  00197	75 10		 jne	 SHORT $LN135@textiowrap
  00199	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR newline$[rsp]
  001a1	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  001a5	85 c0		 test	 eax, eax
  001a7	74 76		 je	 SHORT $LN136@textiowrap
$LN135@textiowrap:
  001a9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR newline$[rsp]
  001b1	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001b4	83 f8 0d	 cmp	 eax, 13
  001b7	75 10		 jne	 SHORT $LN134@textiowrap
  001b9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR newline$[rsp]
  001c1	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  001c5	85 c0		 test	 eax, eax
  001c7	74 56		 je	 SHORT $LN136@textiowrap
$LN134@textiowrap:
  001c9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR newline$[rsp]
  001d1	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001d4	83 f8 0d	 cmp	 eax, 13
  001d7	75 21		 jne	 SHORT $LN133@textiowrap
  001d9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR newline$[rsp]
  001e1	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  001e5	83 f8 0a	 cmp	 eax, 10
  001e8	75 10		 jne	 SHORT $LN133@textiowrap
  001ea	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR newline$[rsp]
  001f2	0f be 40 02	 movsx	 eax, BYTE PTR [rax+2]
  001f6	85 c0		 test	 eax, eax
  001f8	74 25		 je	 SHORT $LN136@textiowrap
$LN133@textiowrap:

; 860  :         PyErr_Format(PyExc_ValueError,
; 861  :                      "illegal newline value: %s", newline);

  001fa	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR newline$[rsp]
  00202	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JHIONHDL@illegal?5newline?5value?3?5?$CFs?$AA@
  00209	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00210	e8 00 00 00 00	 call	 PyErr_Format

; 862  :         return -1;

  00215	b8 ff ff ff ff	 mov	 eax, -1
  0021a	e9 93 12 00 00	 jmp	 $LN138@textiowrap
$LN136@textiowrap:
$LN132@textiowrap:

; 863  :     }
; 864  : 
; 865  :     Py_CLEAR(self->buffer);

  0021f	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00227	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0022c	74 62		 je	 SHORT $LN129@textiowrap
  0022e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00236	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0023e	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00242	41 b8 61 03 00
	00		 mov	 r8d, 865		; 00000361H
  00248	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0024f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  00256	e8 00 00 00 00	 call	 _PyParallel_Guard
  0025b	85 c0		 test	 eax, eax
  0025d	75 31		 jne	 SHORT $LN129@textiowrap
  0025f	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00267	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0026b	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR _py_tmp$21404[rsp], rax
  00273	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0027b	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  00283	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21404[rsp]
  0028b	e8 00 00 00 00	 call	 _Py_DecRef
$LN129@textiowrap:
  00290	33 c0		 xor	 eax, eax
  00292	85 c0		 test	 eax, eax
  00294	75 89		 jne	 SHORT $LN132@textiowrap
$LN128@textiowrap:

; 866  :     Py_CLEAR(self->encoding);

  00296	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0029e	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  002a3	74 62		 je	 SHORT $LN125@textiowrap
  002a5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002ad	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002b5	4c 8b 48 78	 mov	 r9, QWORD PTR [rax+120]
  002b9	41 b8 62 03 00
	00		 mov	 r8d, 866		; 00000362H
  002bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  002c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  002cd	e8 00 00 00 00	 call	 _PyParallel_Guard
  002d2	85 c0		 test	 eax, eax
  002d4	75 31		 jne	 SHORT $LN125@textiowrap
  002d6	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002de	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  002e2	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR _py_tmp$21412[rsp], rax
  002ea	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002f2	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
  002fa	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21412[rsp]
  00302	e8 00 00 00 00	 call	 _Py_DecRef
$LN125@textiowrap:
  00307	33 c0		 xor	 eax, eax
  00309	85 c0		 test	 eax, eax
  0030b	75 89		 jne	 SHORT $LN128@textiowrap
$LN124@textiowrap:

; 867  :     Py_CLEAR(self->encoder);

  0030d	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00315	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0031d	74 6b		 je	 SHORT $LN121@textiowrap
  0031f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00327	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0032f	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  00336	41 b8 63 03 00
	00		 mov	 r8d, 867		; 00000363H
  0033c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00343	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  0034a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0034f	85 c0		 test	 eax, eax
  00351	75 37		 jne	 SHORT $LN121@textiowrap
  00353	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0035b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00362	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR _py_tmp$21420[rsp], rax
  0036a	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00372	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0
  0037d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21420[rsp]
  00385	e8 00 00 00 00	 call	 _Py_DecRef
$LN121@textiowrap:
  0038a	33 c0		 xor	 eax, eax
  0038c	85 c0		 test	 eax, eax
  0038e	0f 85 79 ff ff
	ff		 jne	 $LN124@textiowrap
$LN120@textiowrap:

; 868  :     Py_CLEAR(self->decoder);

  00394	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0039c	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  003a4	74 6b		 je	 SHORT $LN117@textiowrap
  003a6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003ae	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003b6	4c 8b 88 88 00
	00 00		 mov	 r9, QWORD PTR [rax+136]
  003bd	41 b8 64 03 00
	00		 mov	 r8d, 868		; 00000364H
  003c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  003ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  003d1	e8 00 00 00 00	 call	 _PyParallel_Guard
  003d6	85 c0		 test	 eax, eax
  003d8	75 37		 jne	 SHORT $LN117@textiowrap
  003da	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003e2	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  003e9	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR _py_tmp$21428[rsp], rax
  003f1	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003f9	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0
  00404	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21428[rsp]
  0040c	e8 00 00 00 00	 call	 _Py_DecRef
$LN117@textiowrap:
  00411	33 c0		 xor	 eax, eax
  00413	85 c0		 test	 eax, eax
  00415	0f 85 79 ff ff
	ff		 jne	 $LN120@textiowrap
$LN116@textiowrap:

; 869  :     Py_CLEAR(self->readnl);

  0041b	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00423	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  0042b	74 6b		 je	 SHORT $LN113@textiowrap
  0042d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00435	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0043d	4c 8b 88 90 00
	00 00		 mov	 r9, QWORD PTR [rax+144]
  00444	41 b8 65 03 00
	00		 mov	 r8d, 869		; 00000365H
  0044a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00451	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  00458	e8 00 00 00 00	 call	 _PyParallel_Guard
  0045d	85 c0		 test	 eax, eax
  0045f	75 37		 jne	 SHORT $LN113@textiowrap
  00461	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00469	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00470	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR _py_tmp$21436[rsp], rax
  00478	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00480	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0
  0048b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$21436[rsp]
  00493	e8 00 00 00 00	 call	 _Py_DecRef
$LN113@textiowrap:
  00498	33 c0		 xor	 eax, eax
  0049a	85 c0		 test	 eax, eax
  0049c	0f 85 79 ff ff
	ff		 jne	 $LN116@textiowrap
$LN112@textiowrap:

; 870  :     Py_CLEAR(self->decoded_chars);

  004a2	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004aa	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  004b2	74 6b		 je	 SHORT $LN109@textiowrap
  004b4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004bc	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004c4	4c 8b 88 c8 00
	00 00		 mov	 r9, QWORD PTR [rax+200]
  004cb	41 b8 66 03 00
	00		 mov	 r8d, 870		; 00000366H
  004d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  004d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  004df	e8 00 00 00 00	 call	 _PyParallel_Guard
  004e4	85 c0		 test	 eax, eax
  004e6	75 37		 jne	 SHORT $LN109@textiowrap
  004e8	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004f0	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  004f7	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR _py_tmp$21444[rsp], rax
  004ff	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00507	48 c7 80 c8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+200], 0
  00512	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$21444[rsp]
  0051a	e8 00 00 00 00	 call	 _Py_DecRef
$LN109@textiowrap:
  0051f	33 c0		 xor	 eax, eax
  00521	85 c0		 test	 eax, eax
  00523	0f 85 79 ff ff
	ff		 jne	 $LN112@textiowrap
$LN108@textiowrap:

; 871  :     Py_CLEAR(self->pending_bytes);

  00529	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00531	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  00539	74 6b		 je	 SHORT $LN105@textiowrap
  0053b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00543	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0054b	4c 8b 88 d8 00
	00 00		 mov	 r9, QWORD PTR [rax+216]
  00552	41 b8 67 03 00
	00		 mov	 r8d, 871		; 00000367H
  00558	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0055f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  00566	e8 00 00 00 00	 call	 _PyParallel_Guard
  0056b	85 c0		 test	 eax, eax
  0056d	75 37		 jne	 SHORT $LN105@textiowrap
  0056f	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00577	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  0057e	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR _py_tmp$21452[rsp], rax
  00586	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0058e	48 c7 80 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+216], 0
  00599	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$21452[rsp]
  005a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN105@textiowrap:
  005a6	33 c0		 xor	 eax, eax
  005a8	85 c0		 test	 eax, eax
  005aa	0f 85 79 ff ff
	ff		 jne	 $LN108@textiowrap
$LN104@textiowrap:

; 872  :     Py_CLEAR(self->snapshot);

  005b0	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005b8	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  005c0	74 6b		 je	 SHORT $LN101@textiowrap
  005c2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005ca	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005d2	4c 8b 88 e8 00
	00 00		 mov	 r9, QWORD PTR [rax+232]
  005d9	41 b8 68 03 00
	00		 mov	 r8d, 872		; 00000368H
  005df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  005e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  005ed	e8 00 00 00 00	 call	 _PyParallel_Guard
  005f2	85 c0		 test	 eax, eax
  005f4	75 37		 jne	 SHORT $LN101@textiowrap
  005f6	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005fe	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  00605	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR _py_tmp$21460[rsp], rax
  0060d	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00615	48 c7 80 e8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+232], 0
  00620	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$21460[rsp]
  00628	e8 00 00 00 00	 call	 _Py_DecRef
$LN101@textiowrap:
  0062d	33 c0		 xor	 eax, eax
  0062f	85 c0		 test	 eax, eax
  00631	0f 85 79 ff ff
	ff		 jne	 $LN104@textiowrap
$LN100@textiowrap:

; 873  :     Py_CLEAR(self->errors);

  00637	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0063f	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00647	74 6b		 je	 SHORT $LN97@textiowrap
  00649	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00651	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00659	4c 8b 88 98 00
	00 00		 mov	 r9, QWORD PTR [rax+152]
  00660	41 b8 69 03 00
	00		 mov	 r8d, 873		; 00000369H
  00666	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0066d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  00674	e8 00 00 00 00	 call	 _PyParallel_Guard
  00679	85 c0		 test	 eax, eax
  0067b	75 37		 jne	 SHORT $LN97@textiowrap
  0067d	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00685	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0068c	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR _py_tmp$21468[rsp], rax
  00694	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0069c	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0
  006a7	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$21468[rsp]
  006af	e8 00 00 00 00	 call	 _Py_DecRef
$LN97@textiowrap:
  006b4	33 c0		 xor	 eax, eax
  006b6	85 c0		 test	 eax, eax
  006b8	0f 85 79 ff ff
	ff		 jne	 $LN100@textiowrap
$LN96@textiowrap:

; 874  :     Py_CLEAR(self->raw);

  006be	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  006c6	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  006ce	74 6b		 je	 SHORT $LN93@textiowrap
  006d0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006d8	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  006e0	4c 8b 88 f8 00
	00 00		 mov	 r9, QWORD PTR [rax+248]
  006e7	41 b8 6a 03 00
	00		 mov	 r8d, 874		; 0000036aH
  006ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  006f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  006fb	e8 00 00 00 00	 call	 _PyParallel_Guard
  00700	85 c0		 test	 eax, eax
  00702	75 37		 jne	 SHORT $LN93@textiowrap
  00704	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0070c	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  00713	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR _py_tmp$21476[rsp], rax
  0071b	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00723	48 c7 80 f8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+248], 0
  0072e	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$21476[rsp]
  00736	e8 00 00 00 00	 call	 _Py_DecRef
$LN93@textiowrap:
  0073b	33 c0		 xor	 eax, eax
  0073d	85 c0		 test	 eax, eax
  0073f	0f 85 79 ff ff
	ff		 jne	 $LN96@textiowrap

; 875  :     self->decoded_chars_used = 0;

  00745	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0074d	48 c7 80 d0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+208], 0

; 876  :     self->pending_bytes_count = 0;

  00758	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00760	48 c7 80 e0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+224], 0

; 877  :     self->encodefunc = NULL;

  0076b	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00773	48 c7 80 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+184], 0

; 878  :     self->b2cratio = 0.0;

  0077e	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00786	66 0f 57 c0	 xorpd	 xmm0, xmm0
  0078a	f2 0f 11 80 f0
	00 00 00	 movsdx	 QWORD PTR [rax+240], xmm0

; 879  : 
; 880  :     if (encoding == NULL) {

  00792	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR encoding$[rsp], 0
  0079b	0f 85 77 01 00
	00		 jne	 $LN92@textiowrap

; 881  :         /* Try os.device_encoding(fileno) */
; 882  :         PyObject *fileno;
; 883  :         fileno = _PyObject_CallMethodId(buffer, &PyId_fileno, NULL);

  007a1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_fileno
  007a6	8b c0		 mov	 eax, eax
  007a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  007ae	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  007b7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  007bb	45 33 c0	 xor	 r8d, r8d
  007be	48 8b d0	 mov	 rdx, rax
  007c1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  007c9	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  007ce	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR fileno$21483[rsp], rax

; 884  :         /* Ignore only AttributeError and UnsupportedOperation */
; 885  :         if (fileno == NULL) {

  007d6	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR fileno$21483[rsp], 0
  007df	75 36		 jne	 SHORT $LN91@textiowrap

; 886  :             if (PyErr_ExceptionMatches(PyExc_AttributeError) ||
; 887  :                 PyErr_ExceptionMatches(state->unsupported_operation)) {

  007e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  007e8	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  007ed	85 c0		 test	 eax, eax
  007ef	75 15		 jne	 SHORT $LN89@textiowrap
  007f1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  007f9	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  007fd	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00802	85 c0		 test	 eax, eax
  00804	74 07		 je	 SHORT $LN90@textiowrap
$LN89@textiowrap:

; 888  :                 PyErr_Clear();

  00806	e8 00 00 00 00	 call	 PyErr_Clear

; 889  :             }
; 890  :             else {

  0080b	eb 05		 jmp	 SHORT $LN88@textiowrap
$LN90@textiowrap:

; 891  :                 goto error;

  0080d	e9 7d 0c 00 00	 jmp	 $error$21490
$LN88@textiowrap:

; 892  :             }
; 893  :         }
; 894  :         else {

  00812	e9 01 01 00 00	 jmp	 $LN87@textiowrap
$LN91@textiowrap:

; 895  :             int fd = _PyLong_AsInt(fileno);

  00817	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR fileno$21483[rsp]
  0081f	e8 00 00 00 00	 call	 _PyLong_AsInt
  00824	89 84 24 38 01
	00 00		 mov	 DWORD PTR fd$21492[rsp], eax

; 896  :             Py_DECREF(fileno);

  0082b	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR fileno$21483[rsp]
  00833	e8 00 00 00 00	 call	 _Py_DecRef

; 897  :             if (fd == -1 && PyErr_Occurred()) {

  00838	83 bc 24 38 01
	00 00 ff	 cmp	 DWORD PTR fd$21492[rsp], -1
  00840	75 0f		 jne	 SHORT $LN86@textiowrap
  00842	e8 00 00 00 00	 call	 PyErr_Occurred
  00847	48 85 c0	 test	 rax, rax
  0084a	74 05		 je	 SHORT $LN86@textiowrap

; 898  :                 goto error;

  0084c	e9 3e 0c 00 00	 jmp	 $error$21490
$LN86@textiowrap:

; 899  :             }
; 900  : 
; 901  :             self->encoding = _Py_device_encoding(fd);

  00851	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR fd$21492[rsp]
  00858	e8 00 00 00 00	 call	 _Py_device_encoding
  0085d	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00865	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 902  :             if (self->encoding == NULL)

  00869	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00871	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00876	75 0a		 jne	 SHORT $LN85@textiowrap

; 903  :                 goto error;

  00878	e9 12 0c 00 00	 jmp	 $error$21490
  0087d	e9 96 00 00 00	 jmp	 $LN84@textiowrap
$LN85@textiowrap:

; 904  :             else if (!PyUnicode_Check(self->encoding))

  00882	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0088a	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0088e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00892	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00898	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0089d	85 c0		 test	 eax, eax
  0089f	75 77		 jne	 SHORT $LN83@textiowrap
$LN82@textiowrap:

; 905  :                 Py_CLEAR(self->encoding);

  008a1	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  008a9	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  008ae	74 62		 je	 SHORT $LN79@textiowrap
  008b0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  008b8	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  008c0	4c 8b 48 78	 mov	 r9, QWORD PTR [rax+120]
  008c4	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  008ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  008d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  008d8	e8 00 00 00 00	 call	 _PyParallel_Guard
  008dd	85 c0		 test	 eax, eax
  008df	75 31		 jne	 SHORT $LN79@textiowrap
  008e1	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  008e9	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  008ed	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR _py_tmp$21504[rsp], rax
  008f5	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  008fd	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
  00905	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$21504[rsp]
  0090d	e8 00 00 00 00	 call	 _Py_DecRef
$LN79@textiowrap:
  00912	33 c0		 xor	 eax, eax
  00914	85 c0		 test	 eax, eax
  00916	75 89		 jne	 SHORT $LN82@textiowrap
$LN83@textiowrap:
$LN84@textiowrap:
$LN87@textiowrap:
$LN92@textiowrap:

; 906  :         }
; 907  :     }
; 908  :     if (encoding == NULL && self->encoding == NULL) {

  00918	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR encoding$[rsp], 0
  00921	0f 85 7a 01 00
	00		 jne	 $LN78@textiowrap
  00927	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0092f	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00934	0f 85 67 01 00
	00		 jne	 $LN78@textiowrap

; 909  :         if (state->locale_module == NULL) {

  0093a	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00942	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00947	75 32		 jne	 SHORT $LN77@textiowrap

; 910  :             state->locale_module = PyImport_ImportModule("locale");

  00949	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06NDGIILMC@locale?$AA@
  00950	e8 00 00 00 00	 call	 PyImport_ImportModule
  00955	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR state$[rsp]
  0095d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 911  :             if (state->locale_module == NULL)

  00961	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00969	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0096e	75 04		 jne	 SHORT $LN76@textiowrap

; 912  :                 goto catch_ImportError;

  00970	eb 60		 jmp	 SHORT $catch_ImportError$21516

; 913  :             else

  00972	eb 02		 jmp	 SHORT $LN75@textiowrap
$LN76@textiowrap:

; 914  :                 goto use_locale;

  00974	eb 05		 jmp	 SHORT $use_locale$21518
$LN75@textiowrap:

; 915  :         }
; 916  :         else {

  00976	e9 26 01 00 00	 jmp	 $LN74@textiowrap
$LN77@textiowrap:
$use_locale$21518:

; 917  :           use_locale:
; 918  :             self->encoding = _PyObject_CallMethodId(
; 919  :                 state->locale_module, &PyId_getpreferredencoding, "O", Py_False);

  0097b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_getpreferredencoding
  00980	8b c0		 mov	 eax, eax
  00982	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00988	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00991	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00995	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_FalseStruct
  0099c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  009a3	48 8b d0	 mov	 rdx, rax
  009a6	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  009ae	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  009b2	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  009b7	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  009bf	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 920  :             if (self->encoding == NULL) {

  009c3	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  009cb	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  009d0	75 39		 jne	 SHORT $LN73@textiowrap
$catch_ImportError$21516:

; 921  :               catch_ImportError:
; 922  :                 /*
; 923  :                  Importing locale can raise a ImportError because of
; 924  :                  _functools, and locale.getpreferredencoding can raise a
; 925  :                  ImportError if _locale is not available.  These will happen
; 926  :                  during module building.
; 927  :                 */
; 928  :                 if (PyErr_ExceptionMatches(PyExc_ImportError)) {

  009d2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  009d9	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  009de	85 c0		 test	 eax, eax
  009e0	74 1f		 je	 SHORT $LN72@textiowrap

; 929  :                     PyErr_Clear();

  009e2	e8 00 00 00 00	 call	 PyErr_Clear

; 930  :                     self->encoding = PyUnicode_FromString("ascii");

  009e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OJENGABA@ascii?$AA@
  009ee	e8 00 00 00 00	 call	 PyUnicode_FromString
  009f3	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  009fb	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 931  :                 }
; 932  :                 else

  009ff	eb 05		 jmp	 SHORT $LN71@textiowrap
$LN72@textiowrap:

; 933  :                     goto error;

  00a01	e9 89 0a 00 00	 jmp	 $error$21490
$LN71@textiowrap:

; 934  :             }
; 935  :             else if (!PyUnicode_Check(self->encoding))

  00a06	e9 96 00 00 00	 jmp	 $LN70@textiowrap
$LN73@textiowrap:
  00a0b	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00a13	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00a17	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00a1b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00a21	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00a26	85 c0		 test	 eax, eax
  00a28	75 77		 jne	 SHORT $LN69@textiowrap
$LN68@textiowrap:

; 936  :                 Py_CLEAR(self->encoding);

  00a2a	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00a32	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00a37	74 62		 je	 SHORT $LN65@textiowrap
  00a39	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00a41	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00a49	4c 8b 48 78	 mov	 r9, QWORD PTR [rax+120]
  00a4d	41 b8 a8 03 00
	00		 mov	 r8d, 936		; 000003a8H
  00a53	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00a5a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  00a61	e8 00 00 00 00	 call	 _PyParallel_Guard
  00a66	85 c0		 test	 eax, eax
  00a68	75 31		 jne	 SHORT $LN65@textiowrap
  00a6a	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00a72	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00a76	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR _py_tmp$21533[rsp], rax
  00a7e	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00a86	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
  00a8e	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$21533[rsp]
  00a96	e8 00 00 00 00	 call	 _Py_DecRef
$LN65@textiowrap:
  00a9b	33 c0		 xor	 eax, eax
  00a9d	85 c0		 test	 eax, eax
  00a9f	75 89		 jne	 SHORT $LN68@textiowrap
$LN69@textiowrap:
$LN70@textiowrap:
$LN74@textiowrap:
$LN78@textiowrap:

; 937  :         }
; 938  :     }
; 939  :     if (self->encoding != NULL) {

  00aa1	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00aa9	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00aae	74 2b		 je	 SHORT $LN64@textiowrap

; 940  :         encoding = _PyUnicode_AsString(self->encoding);

  00ab0	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00ab8	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00abc	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00ac1	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR encoding$[rsp], rax

; 941  :         if (encoding == NULL)

  00ac9	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR encoding$[rsp], 0
  00ad2	75 05		 jne	 SHORT $LN63@textiowrap

; 942  :             goto error;

  00ad4	e9 b6 09 00 00	 jmp	 $error$21490
$LN63@textiowrap:

; 943  :     }
; 944  :     else if (encoding != NULL) {

  00ad9	eb 4d		 jmp	 SHORT $LN62@textiowrap
$LN64@textiowrap:
  00adb	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR encoding$[rsp], 0
  00ae4	74 2f		 je	 SHORT $LN61@textiowrap

; 945  :         self->encoding = PyUnicode_FromString(encoding);

  00ae6	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR encoding$[rsp]
  00aee	e8 00 00 00 00	 call	 PyUnicode_FromString
  00af3	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00afb	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 946  :         if (self->encoding == NULL)

  00aff	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00b07	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00b0c	75 05		 jne	 SHORT $LN60@textiowrap

; 947  :             goto error;

  00b0e	e9 7c 09 00 00	 jmp	 $error$21490
$LN60@textiowrap:

; 948  :     }
; 949  :     else {

  00b13	eb 13		 jmp	 SHORT $LN59@textiowrap
$LN61@textiowrap:

; 950  :         PyErr_SetString(PyExc_IOError,
; 951  :                         "could not determine default encoding");

  00b15	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@FHPGGAPJ@could?5not?5determine?5default?5enco@
  00b1c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00b23	e8 00 00 00 00	 call	 PyErr_SetString
$LN59@textiowrap:
$LN62@textiowrap:

; 952  :     }
; 953  : 
; 954  :     /* Check we have been asked for a real text encoding */
; 955  :     codec_info = _PyCodec_LookupTextEncoding(encoding, "codecs.open()");

  00b28	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@GMEBLPNI@codecs?4open?$CI?$CJ?$AA@
  00b2f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR encoding$[rsp]
  00b37	e8 00 00 00 00	 call	 _PyCodec_LookupTextEncoding
  00b3c	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR codec_info$[rsp], rax

; 956  :     if (codec_info == NULL) {

  00b44	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR codec_info$[rsp], 0
  00b4d	75 7c		 jne	 SHORT $LN58@textiowrap
$LN57@textiowrap:

; 957  :         Py_CLEAR(self->encoding);

  00b4f	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00b57	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00b5c	74 62		 je	 SHORT $LN54@textiowrap
  00b5e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00b66	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00b6e	4c 8b 48 78	 mov	 r9, QWORD PTR [rax+120]
  00b72	41 b8 bd 03 00
	00		 mov	 r8d, 957		; 000003bdH
  00b78	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00b7f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  00b86	e8 00 00 00 00	 call	 _PyParallel_Guard
  00b8b	85 c0		 test	 eax, eax
  00b8d	75 31		 jne	 SHORT $LN54@textiowrap
  00b8f	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00b97	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00b9b	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR _py_tmp$21555[rsp], rax
  00ba3	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00bab	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
  00bb3	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$21555[rsp]
  00bbb	e8 00 00 00 00	 call	 _Py_DecRef
$LN54@textiowrap:
  00bc0	33 c0		 xor	 eax, eax
  00bc2	85 c0		 test	 eax, eax
  00bc4	75 89		 jne	 SHORT $LN57@textiowrap

; 958  :         goto error;

  00bc6	e9 c4 08 00 00	 jmp	 $error$21490
$LN58@textiowrap:

; 959  :     }
; 960  : 
; 961  :     /* XXX: Failures beyond this point have the potential to leak elements
; 962  :      * of the partially constructed object (like self->encoding)
; 963  :      */
; 964  : 
; 965  :     if (errors == NULL)

  00bcb	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR errors$[rsp], 0
  00bd4	75 0f		 jne	 SHORT $LN53@textiowrap

; 966  :         errors = "strict";

  00bd6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  00bdd	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR errors$[rsp], rax
$LN53@textiowrap:

; 967  :     self->errors = PyBytes_FromString(errors);

  00be5	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR errors$[rsp]
  00bed	e8 00 00 00 00	 call	 PyBytes_FromString
  00bf2	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00bfa	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax

; 968  :     if (self->errors == NULL)

  00c01	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00c09	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00c11	75 05		 jne	 SHORT $LN52@textiowrap

; 969  :         goto error;

  00c13	e9 77 08 00 00	 jmp	 $error$21490
$LN52@textiowrap:

; 970  : 
; 971  :     self->chunk_size = 8192;

  00c18	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00c20	48 c7 40 68 00
	20 00 00	 mov	 QWORD PTR [rax+104], 8192 ; 00002000H

; 972  :     self->readuniversal = (newline == NULL || newline[0] == '\0');

  00c28	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR newline$[rsp], 0
  00c31	74 1c		 je	 SHORT $LN140@textiowrap
  00c33	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR newline$[rsp]
  00c3b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00c3e	85 c0		 test	 eax, eax
  00c40	74 0d		 je	 SHORT $LN140@textiowrap
  00c42	c7 84 24 7c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv456[rsp], 0
  00c4d	eb 0b		 jmp	 SHORT $LN141@textiowrap
$LN140@textiowrap:
  00c4f	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv456[rsp], 1
$LN141@textiowrap:
  00c5a	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00c62	0f b6 8c 24 7c
	01 00 00	 movzx	 ecx, BYTE PTR tv456[rsp]
  00c6a	88 88 aa 00 00
	00		 mov	 BYTE PTR [rax+170], cl

; 973  :     self->line_buffering = line_buffering;

  00c70	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00c78	0f b6 8c 24 90
	00 00 00	 movzx	 ecx, BYTE PTR line_buffering$[rsp]
  00c80	88 88 a8 00 00
	00		 mov	 BYTE PTR [rax+168], cl

; 974  :     self->write_through = write_through;

  00c86	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00c8e	0f b6 8c 24 b0
	00 00 00	 movzx	 ecx, BYTE PTR write_through$[rsp]
  00c96	88 88 a9 00 00
	00		 mov	 BYTE PTR [rax+169], cl

; 975  :     self->readtranslate = (newline == NULL);

  00c9c	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR newline$[rsp], 0
  00ca5	75 0d		 jne	 SHORT $LN142@textiowrap
  00ca7	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv462[rsp], 1
  00cb2	eb 0b		 jmp	 SHORT $LN143@textiowrap
$LN142@textiowrap:
  00cb4	c7 84 24 80 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv462[rsp], 0
$LN143@textiowrap:
  00cbf	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00cc7	0f b6 8c 24 80
	01 00 00	 movzx	 ecx, BYTE PTR tv462[rsp]
  00ccf	88 88 ab 00 00
	00		 mov	 BYTE PTR [rax+171], cl

; 976  :     if (newline) {

  00cd5	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR newline$[rsp], 0
  00cde	74 33		 je	 SHORT $LN51@textiowrap

; 977  :         self->readnl = PyUnicode_FromString(newline);

  00ce0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR newline$[rsp]
  00ce8	e8 00 00 00 00	 call	 PyUnicode_FromString
  00ced	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00cf5	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 978  :         if (self->readnl == NULL)

  00cfc	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00d04	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00d0c	75 05		 jne	 SHORT $LN50@textiowrap

; 979  :             goto error;

  00d0e	e9 7c 07 00 00	 jmp	 $error$21490
$LN50@textiowrap:
$LN51@textiowrap:

; 980  :     }
; 981  :     self->writetranslate = (newline == NULL || newline[0] != '\0');

  00d13	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR newline$[rsp], 0
  00d1c	74 1c		 je	 SHORT $LN144@textiowrap
  00d1e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR newline$[rsp]
  00d26	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00d29	85 c0		 test	 eax, eax
  00d2b	75 0d		 jne	 SHORT $LN144@textiowrap
  00d2d	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv474[rsp], 0
  00d38	eb 0b		 jmp	 SHORT $LN145@textiowrap
$LN144@textiowrap:
  00d3a	c7 84 24 84 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv474[rsp], 1
$LN145@textiowrap:
  00d45	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00d4d	0f b6 8c 24 84
	01 00 00	 movzx	 ecx, BYTE PTR tv474[rsp]
  00d55	88 88 ac 00 00
	00		 mov	 BYTE PTR [rax+172], cl

; 982  :     if (!self->readuniversal && self->readnl) {

  00d5b	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00d63	0f be 80 aa 00
	00 00		 movsx	 eax, BYTE PTR [rax+170]
  00d6a	85 c0		 test	 eax, eax
  00d6c	0f 85 80 00 00
	00		 jne	 $LN49@textiowrap
  00d72	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00d7a	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00d82	74 6e		 je	 SHORT $LN49@textiowrap

; 983  :         self->writenl = _PyUnicode_AsString(self->readnl);

  00d84	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00d8c	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  00d93	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00d98	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00da0	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 984  :         if (self->writenl == NULL)

  00da7	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00daf	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00db7	75 05		 jne	 SHORT $LN48@textiowrap

; 985  :             goto error;

  00db9	e9 d1 06 00 00	 jmp	 $error$21490
$LN48@textiowrap:

; 986  :         if (!strcmp(self->writenl, "\n"))

  00dbe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00dc5	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00dcd	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  00dd4	e8 00 00 00 00	 call	 strcmp
  00dd9	85 c0		 test	 eax, eax
  00ddb	75 13		 jne	 SHORT $LN47@textiowrap

; 987  :             self->writenl = NULL;

  00ddd	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00de5	48 c7 80 a0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+160], 0
$LN47@textiowrap:

; 988  :     }
; 989  : #ifdef MS_WINDOWS
; 990  :     else

  00df0	eb 16		 jmp	 SHORT $LN46@textiowrap
$LN49@textiowrap:

; 991  :         self->writenl = "\r\n";

  00df2	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00dfa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6?$AA@
  00e01	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx
$LN46@textiowrap:

; 992  : #endif
; 993  : 
; 994  :     /* Build the decoder object */
; 995  :     res = _PyObject_CallMethodId(buffer, &PyId_readable, NULL);

  00e08	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_readable
  00e0d	8b c0		 mov	 eax, eax
  00e0f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00e15	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00e1e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00e22	45 33 c0	 xor	 r8d, r8d
  00e25	48 8b d0	 mov	 rdx, rax
  00e28	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00e30	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00e35	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR res$[rsp], rax

; 996  :     if (res == NULL)

  00e3d	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR res$[rsp], 0
  00e46	75 05		 jne	 SHORT $LN45@textiowrap

; 997  :         goto error;

  00e48	e9 42 06 00 00	 jmp	 $error$21490
$LN45@textiowrap:

; 998  :     r = PyObject_IsTrue(res);

  00e4d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR res$[rsp]
  00e55	e8 00 00 00 00	 call	 PyObject_IsTrue
  00e5a	89 84 24 c8 00
	00 00		 mov	 DWORD PTR r$[rsp], eax

; 999  :     Py_DECREF(res);

  00e61	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR res$[rsp]
  00e69	e8 00 00 00 00	 call	 _Py_DecRef

; 1000 :     if (r == -1)

  00e6e	83 bc 24 c8 00
	00 00 ff	 cmp	 DWORD PTR r$[rsp], -1
  00e76	75 05		 jne	 SHORT $LN44@textiowrap

; 1001 :         goto error;

  00e78	e9 12 06 00 00	 jmp	 $error$21490
$LN44@textiowrap:

; 1002 :     if (r == 1) {

  00e7d	83 bc 24 c8 00
	00 00 01	 cmp	 DWORD PTR r$[rsp], 1
  00e85	0f 85 3c 01 00
	00		 jne	 $LN43@textiowrap

; 1003 :         self->decoder = _PyCodecInfo_GetIncrementalDecoder(codec_info,
; 1004 :                                                            errors);

  00e8b	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR errors$[rsp]
  00e93	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR codec_info$[rsp]
  00e9b	e8 00 00 00 00	 call	 _PyCodecInfo_GetIncrementalDecoder
  00ea0	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00ea8	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 1005 :         if (self->decoder == NULL)

  00eaf	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00eb7	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00ebf	75 05		 jne	 SHORT $LN42@textiowrap

; 1006 :             goto error;

  00ec1	e9 c9 05 00 00	 jmp	 $error$21490
$LN42@textiowrap:

; 1007 : 
; 1008 :         if (self->readuniversal) {

  00ec6	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00ece	0f be 80 aa 00
	00 00		 movsx	 eax, BYTE PTR [rax+170]
  00ed5	85 c0		 test	 eax, eax
  00ed7	0f 84 ea 00 00
	00		 je	 $LN41@textiowrap

; 1009 :             PyObject *incrementalDecoder = PyObject_CallFunction(
; 1010 :                 (PyObject *)&PyIncrementalNewlineDecoder_Type,
; 1011 :                 "Oi", self->decoder, (int)self->readtranslate);

  00edd	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00ee5	0f be 80 ab 00
	00 00		 movsx	 eax, BYTE PTR [rax+171]
  00eec	44 8b c8	 mov	 r9d, eax
  00eef	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00ef7	4c 8b 80 88 00
	00 00		 mov	 r8, QWORD PTR [rax+136]
  00efe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  00f05	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyIncrementalNewlineDecoder_Type
  00f0c	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT
  00f11	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR incrementalDecoder$21584[rsp], rax

; 1012 :             if (incrementalDecoder == NULL)

  00f19	48 83 bc 24 58
	01 00 00 00	 cmp	 QWORD PTR incrementalDecoder$21584[rsp], 0
  00f22	75 05		 jne	 SHORT $LN40@textiowrap

; 1013 :                 goto error;

  00f24	e9 66 05 00 00	 jmp	 $error$21490
$LN40@textiowrap:
$LN39@textiowrap:

; 1014 :             Py_CLEAR(self->decoder);

  00f29	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00f31	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00f39	74 6b		 je	 SHORT $LN36@textiowrap
  00f3b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00f43	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00f4b	4c 8b 88 88 00
	00 00		 mov	 r9, QWORD PTR [rax+136]
  00f52	41 b8 f6 03 00
	00		 mov	 r8d, 1014		; 000003f6H
  00f58	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00f5f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BFHKECHP@textiowrapper_init?$AA@
  00f66	e8 00 00 00 00	 call	 _PyParallel_Guard
  00f6b	85 c0		 test	 eax, eax
  00f6d	75 37		 jne	 SHORT $LN36@textiowrap
  00f6f	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00f77	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00f7e	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR _py_tmp$21594[rsp], rax
  00f86	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00f8e	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0
  00f99	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$21594[rsp]
  00fa1	e8 00 00 00 00	 call	 _Py_DecRef
$LN36@textiowrap:
  00fa6	33 c0		 xor	 eax, eax
  00fa8	85 c0		 test	 eax, eax
  00faa	0f 85 79 ff ff
	ff		 jne	 $LN39@textiowrap

; 1015 :             self->decoder = incrementalDecoder;

  00fb0	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00fb8	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR incrementalDecoder$21584[rsp]
  00fc0	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx
$LN41@textiowrap:
$LN43@textiowrap:

; 1016 :         }
; 1017 :     }
; 1018 : 
; 1019 :     /* Build the encoder object */
; 1020 :     res = _PyObject_CallMethodId(buffer, &PyId_writable, NULL);

  00fc7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_writable
  00fcc	8b c0		 mov	 eax, eax
  00fce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00fd4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00fdd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00fe1	45 33 c0	 xor	 r8d, r8d
  00fe4	48 8b d0	 mov	 rdx, rax
  00fe7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00fef	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00ff4	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR res$[rsp], rax

; 1021 :     if (res == NULL)

  00ffc	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR res$[rsp], 0
  01005	75 05		 jne	 SHORT $LN35@textiowrap

; 1022 :         goto error;

  01007	e9 83 04 00 00	 jmp	 $error$21490
$LN35@textiowrap:

; 1023 :     r = PyObject_IsTrue(res);

  0100c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR res$[rsp]
  01014	e8 00 00 00 00	 call	 PyObject_IsTrue
  01019	89 84 24 c8 00
	00 00		 mov	 DWORD PTR r$[rsp], eax

; 1024 :     Py_DECREF(res);

  01020	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR res$[rsp]
  01028	e8 00 00 00 00	 call	 _Py_DecRef

; 1025 :     if (r == -1)

  0102d	83 bc 24 c8 00
	00 00 ff	 cmp	 DWORD PTR r$[rsp], -1
  01035	75 05		 jne	 SHORT $LN34@textiowrap

; 1026 :         goto error;

  01037	e9 53 04 00 00	 jmp	 $error$21490
$LN34@textiowrap:

; 1027 :     if (r == 1) {

  0103c	83 bc 24 c8 00
	00 00 01	 cmp	 DWORD PTR r$[rsp], 1
  01044	0f 85 3e 01 00
	00		 jne	 $LN33@textiowrap

; 1028 :         self->encoder = _PyCodecInfo_GetIncrementalEncoder(codec_info,
; 1029 :                                                            errors);

  0104a	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR errors$[rsp]
  01052	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR codec_info$[rsp]
  0105a	e8 00 00 00 00	 call	 _PyCodecInfo_GetIncrementalEncoder
  0105f	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  01067	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 1030 :         if (self->encoder == NULL)

  0106e	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  01076	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0107e	75 05		 jne	 SHORT $LN32@textiowrap

; 1031 :             goto error;

  01080	e9 0a 04 00 00	 jmp	 $error$21490
$LN32@textiowrap:

; 1032 :         /* Get the normalized named of the codec */
; 1033 :         res = _PyObject_GetAttrId(codec_info, &PyId_name);

  01085	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  0108a	8b c0		 mov	 eax, eax
  0108c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01092	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0109b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0109f	48 8b d0	 mov	 rdx, rax
  010a2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR codec_info$[rsp]
  010aa	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  010af	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR res$[rsp], rax

; 1034 :         if (res == NULL) {

  010b7	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR res$[rsp], 0
  010c0	75 21		 jne	 SHORT $LN31@textiowrap

; 1035 :             if (PyErr_ExceptionMatches(PyExc_AttributeError))

  010c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  010c9	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  010ce	85 c0		 test	 eax, eax
  010d0	74 07		 je	 SHORT $LN30@textiowrap

; 1036 :                 PyErr_Clear();

  010d2	e8 00 00 00 00	 call	 PyErr_Clear

; 1037 :             else

  010d7	eb 05		 jmp	 SHORT $LN29@textiowrap
$LN30@textiowrap:

; 1038 :                 goto error;

  010d9	e9 b1 03 00 00	 jmp	 $error$21490
$LN29@textiowrap:

; 1039 :         }
; 1040 :         else if (PyUnicode_Check(res)) {

  010de	e9 87 00 00 00	 jmp	 $LN28@textiowrap
$LN31@textiowrap:
  010e3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR res$[rsp]
  010eb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  010ef	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  010f5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  010fa	85 c0		 test	 eax, eax
  010fc	74 6c		 je	 SHORT $LN27@textiowrap

; 1041 :             encodefuncentry *e = encodefuncs;

  010fe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:encodefuncs
  01105	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR e$21613[rsp], rax
$LN26@textiowrap:

; 1042 :             while (e->name != NULL) {

  0110d	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR e$21613[rsp]
  01115	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01119	74 4f		 je	 SHORT $LN25@textiowrap

; 1043 :                 if (!PyUnicode_CompareWithASCIIString(res, e->name)) {

  0111b	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR e$21613[rsp]
  01123	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  01126	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR res$[rsp]
  0112e	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  01133	85 c0		 test	 eax, eax
  01135	75 1d		 jne	 SHORT $LN24@textiowrap

; 1044 :                     self->encodefunc = e->encodefunc;

  01137	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0113f	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR e$21613[rsp]
  01147	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0114b	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx

; 1045 :                     break;

  01152	eb 16		 jmp	 SHORT $LN25@textiowrap
$LN24@textiowrap:

; 1046 :                 }
; 1047 :                 e++;

  01154	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR e$21613[rsp]
  0115c	48 83 c0 10	 add	 rax, 16
  01160	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR e$21613[rsp], rax

; 1048 :             }

  01168	eb a3		 jmp	 SHORT $LN26@textiowrap
$LN25@textiowrap:
$LN27@textiowrap:
$LN28@textiowrap:
$LN23@textiowrap:

; 1049 :         }
; 1050 :         Py_XDECREF(res);

  0116a	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR res$[rsp], 0
  01173	74 0d		 je	 SHORT $LN20@textiowrap
  01175	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR res$[rsp]
  0117d	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@textiowrap:
  01182	33 c0		 xor	 eax, eax
  01184	85 c0		 test	 eax, eax
  01186	75 e2		 jne	 SHORT $LN23@textiowrap
$LN33@textiowrap:

; 1051 :     }
; 1052 : 
; 1053 :     /* Finished sorting out the codec details */
; 1054 :     Py_DECREF(codec_info);

  01188	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR codec_info$[rsp]
  01190	e8 00 00 00 00	 call	 _Py_DecRef

; 1055 : 
; 1056 :     self->buffer = buffer;

  01195	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0119d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  011a5	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1057 :     Py_INCREF(buffer);

  011a9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  011b1	e8 00 00 00 00	 call	 _Py_IncRef

; 1058 : 
; 1059 :     if (Py_TYPE(buffer) == &PyBufferedReader_Type ||
; 1060 :         Py_TYPE(buffer) == &PyBufferedWriter_Type ||
; 1061 :         Py_TYPE(buffer) == &PyBufferedRandom_Type) {

  011b6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBufferedReader_Type
  011bd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  011c5	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  011c9	74 2e		 je	 SHORT $LN18@textiowrap
  011cb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBufferedWriter_Type
  011d2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  011da	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  011de	74 19		 je	 SHORT $LN18@textiowrap
  011e0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBufferedRandom_Type
  011e7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  011ef	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  011f3	0f 85 96 00 00
	00		 jne	 $LN19@textiowrap
$LN18@textiowrap:

; 1062 :         raw = _PyObject_GetAttrId(buffer, &PyId_raw);

  011f9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_raw
  011fe	8b c0		 mov	 eax, eax
  01200	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01206	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0120f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01213	48 8b d0	 mov	 rdx, rax
  01216	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0121e	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01223	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR raw$[rsp], rax

; 1063 :         /* Cache the raw FileIO object to speed up 'closed' checks */
; 1064 :         if (raw == NULL) {

  0122b	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR raw$[rsp], 0
  01234	75 1e		 jne	 SHORT $LN17@textiowrap

; 1065 :             if (PyErr_ExceptionMatches(PyExc_AttributeError))

  01236	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0123d	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  01242	85 c0		 test	 eax, eax
  01244	74 07		 je	 SHORT $LN16@textiowrap

; 1066 :                 PyErr_Clear();

  01246	e8 00 00 00 00	 call	 PyErr_Clear

; 1067 :             else

  0124b	eb 05		 jmp	 SHORT $LN15@textiowrap
$LN16@textiowrap:

; 1068 :                 goto error;

  0124d	e9 3d 02 00 00	 jmp	 $error$21490
$LN15@textiowrap:

; 1069 :         }
; 1070 :         else if (Py_TYPE(raw) == &PyFileIO_Type)

  01252	eb 3b		 jmp	 SHORT $LN14@textiowrap
$LN17@textiowrap:
  01254	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFileIO_Type
  0125b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR raw$[rsp]
  01263	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  01267	75 19		 jne	 SHORT $LN13@textiowrap

; 1071 :             self->raw = raw;

  01269	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  01271	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR raw$[rsp]
  01279	48 89 88 f8 00
	00 00		 mov	 QWORD PTR [rax+248], rcx

; 1072 :         else

  01280	eb 0d		 jmp	 SHORT $LN12@textiowrap
$LN13@textiowrap:

; 1073 :             Py_DECREF(raw);

  01282	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR raw$[rsp]
  0128a	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@textiowrap:
$LN14@textiowrap:
$LN19@textiowrap:

; 1074 :     }
; 1075 : 
; 1076 :     res = _PyObject_CallMethodId(buffer, &PyId_seekable, NULL);

  0128f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_seekable
  01294	8b c0		 mov	 eax, eax
  01296	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0129c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  012a5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  012a9	45 33 c0	 xor	 r8d, r8d
  012ac	48 8b d0	 mov	 rdx, rax
  012af	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  012b7	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  012bc	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR res$[rsp], rax

; 1077 :     if (res == NULL)

  012c4	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR res$[rsp], 0
  012cd	75 05		 jne	 SHORT $LN11@textiowrap

; 1078 :         goto error;

  012cf	e9 bb 01 00 00	 jmp	 $error$21490
$LN11@textiowrap:

; 1079 :     r = PyObject_IsTrue(res);

  012d4	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR res$[rsp]
  012dc	e8 00 00 00 00	 call	 PyObject_IsTrue
  012e1	89 84 24 c8 00
	00 00		 mov	 DWORD PTR r$[rsp], eax

; 1080 :     Py_DECREF(res);

  012e8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR res$[rsp]
  012f0	e8 00 00 00 00	 call	 _Py_DecRef

; 1081 :     if (r < 0)

  012f5	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR r$[rsp], 0
  012fd	7d 05		 jge	 SHORT $LN10@textiowrap

; 1082 :         goto error;

  012ff	e9 8b 01 00 00	 jmp	 $error$21490
$LN10@textiowrap:

; 1083 :     self->seekable = self->telling = r;

  01304	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0130c	0f b6 8c 24 c8
	00 00 00	 movzx	 ecx, BYTE PTR r$[rsp]
  01314	88 88 af 00 00
	00		 mov	 BYTE PTR [rax+175], cl
  0131a	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  01322	0f b6 8c 24 c8
	00 00 00	 movzx	 ecx, BYTE PTR r$[rsp]
  0132a	88 88 ad 00 00
	00		 mov	 BYTE PTR [rax+173], cl

; 1084 : 
; 1085 :     self->has_read1 = _PyObject_HasAttrId(buffer, &PyId_read1);

  01330	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_read1
  01335	8b c0		 mov	 eax, eax
  01337	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0133d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01346	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0134a	48 8b d0	 mov	 rdx, rax
  0134d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  01355	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0135a	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  01362	88 81 ae 00 00
	00		 mov	 BYTE PTR [rcx+174], al

; 1086 : 
; 1087 :     self->encoding_start_of_stream = 0;

  01368	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  01370	c6 80 c0 00 00
	00 00		 mov	 BYTE PTR [rax+192], 0

; 1088 :     if (self->seekable && self->encoder) {

  01377	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0137f	0f be 80 ad 00
	00 00		 movsx	 eax, BYTE PTR [rax+173]
  01386	85 c0		 test	 eax, eax
  01388	0f 84 ee 00 00
	00		 je	 $LN9@textiowrap
  0138e	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  01396	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0139e	0f 84 d8 00 00
	00		 je	 $LN9@textiowrap

; 1089 :         PyObject *cookieObj;
; 1090 :         int cmp;
; 1091 : 
; 1092 :         self->encoding_start_of_stream = 1;

  013a4	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  013ac	c6 80 c0 00 00
	00 01		 mov	 BYTE PTR [rax+192], 1

; 1093 : 
; 1094 :         cookieObj = PyObject_CallMethodObjArgs(buffer, _PyIO_str_tell, NULL);

  013b3	45 33 c0	 xor	 r8d, r8d
  013b6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_tell
  013bd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  013c5	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  013ca	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR cookieObj$21646[rsp], rax

; 1095 :         if (cookieObj == NULL)

  013d2	48 83 bc 24 70
	01 00 00 00	 cmp	 QWORD PTR cookieObj$21646[rsp], 0
  013db	75 05		 jne	 SHORT $LN8@textiowrap

; 1096 :             goto error;

  013dd	e9 ad 00 00 00	 jmp	 $error$21490
$LN8@textiowrap:

; 1097 : 
; 1098 :         cmp = PyObject_RichCompareBool(cookieObj, _PyIO_zero, Py_EQ);

  013e2	41 b8 02 00 00
	00		 mov	 r8d, 2
  013e8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_zero
  013ef	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR cookieObj$21646[rsp]
  013f7	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  013fc	89 84 24 78 01
	00 00		 mov	 DWORD PTR cmp$21647[rsp], eax

; 1099 :         Py_DECREF(cookieObj);

  01403	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR cookieObj$21646[rsp]
  0140b	e8 00 00 00 00	 call	 _Py_DecRef

; 1100 :         if (cmp < 0) {

  01410	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR cmp$21647[rsp], 0
  01418	7d 02		 jge	 SHORT $LN7@textiowrap

; 1101 :             goto error;

  0141a	eb 73		 jmp	 SHORT $error$21490
$LN7@textiowrap:

; 1102 :         }
; 1103 : 
; 1104 :         if (cmp == 0) {

  0141c	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR cmp$21647[rsp], 0
  01424	75 56		 jne	 SHORT $LN6@textiowrap

; 1105 :             self->encoding_start_of_stream = 0;

  01426	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0142e	c6 80 c0 00 00
	00 00		 mov	 BYTE PTR [rax+192], 0

; 1106 :             res = PyObject_CallMethodObjArgs(self->encoder, _PyIO_str_setstate,
; 1107 :                                              _PyIO_zero, NULL);

  01435	45 33 c9	 xor	 r9d, r9d
  01438	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR _PyIO_zero
  0143f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_setstate
  01446	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0144e	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  01455	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0145a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR res$[rsp], rax

; 1108 :             if (res == NULL)

  01462	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR res$[rsp], 0
  0146b	75 02		 jne	 SHORT $LN5@textiowrap

; 1109 :                 goto error;

  0146d	eb 20		 jmp	 SHORT $error$21490
$LN5@textiowrap:

; 1110 :             Py_DECREF(res);

  0146f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR res$[rsp]
  01477	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@textiowrap:
$LN9@textiowrap:

; 1111 :         }
; 1112 :     }
; 1113 : 
; 1114 :     self->ok = 1;

  0147c	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  01484	c7 40 60 01 00
	00 00		 mov	 DWORD PTR [rax+96], 1

; 1115 :     return 0;

  0148b	33 c0		 xor	 eax, eax
  0148d	eb 23		 jmp	 SHORT $LN138@textiowrap
$error$21490:
$LN4@textiowrap:

; 1116 : 
; 1117 :   error:
; 1118 :     Py_XDECREF(codec_info);

  0148f	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR codec_info$[rsp], 0
  01498	74 0d		 je	 SHORT $LN1@textiowrap
  0149a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR codec_info$[rsp]
  014a2	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap:
  014a7	33 c0		 xor	 eax, eax
  014a9	85 c0		 test	 eax, eax
  014ab	75 e2		 jne	 SHORT $LN4@textiowrap

; 1119 :     return -1;

  014ad	b8 ff ff ff ff	 mov	 eax, -1
$LN138@textiowrap:

; 1120 : }

  014b2	48 81 c4 98 01
	00 00		 add	 rsp, 408		; 00000198H
  014b9	c3		 ret	 0
textiowrapper_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_0BG@HEFIHJBK@textiowrapper_dealloc?$AA@	; `string'
EXTRN	PyObject_ClearWeakRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_dealloc DD imagerel textiowrapper_dealloc
	DD	imagerel textiowrapper_dealloc+442
	DD	imagerel $unwind$textiowrapper_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_dealloc DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HEFIHJBK@textiowrapper_dealloc?$AA@
CONST	SEGMENT
??_C@_0BG@HEFIHJBK@textiowrapper_dealloc?$AA@ DB 'textiowrapper_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_dealloc
_TEXT	SEGMENT
g$21760 = 48
_py_tmp$21773 = 56
tv83 = 64
self$ = 96
textiowrapper_dealloc PROC				; COMDAT

; 1143 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1144 :     self->deallocating = 1;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0000e	c6 80 b0 00 00
	00 01		 mov	 BYTE PTR [rax+176], 1

; 1145 :     if (_textiowrapper_clear(self) < 0)

  00015	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0001a	e8 00 00 00 00	 call	 _textiowrapper_clear
  0001f	85 c0		 test	 eax, eax
  00021	7d 05		 jge	 SHORT $LN10@textiowrap@2

; 1146 :         return;

  00023	e9 8d 01 00 00	 jmp	 $LN11@textiowrap@2
$LN10@textiowrap@2:

; 1147 :     _PyObject_GC_UNTRACK(self);

  00028	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00030	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  00035	41 b8 7b 04 00
	00		 mov	 r8d, 1147		; 0000047bH
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@HEFIHJBK@textiowrapper_dealloc?$AA@
  00049	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004e	85 c0		 test	 eax, eax
  00050	0f 85 c1 00 00
	00		 jne	 $LN9@textiowrap@2
$LN8@textiowrap@2:
  00056	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005e	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  00063	41 b8 7b 04 00
	00		 mov	 r8d, 1147		; 0000047bH
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@HEFIHJBK@textiowrapper_dealloc?$AA@
  00077	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007c	85 c0		 test	 eax, eax
  0007e	74 0b		 je	 SHORT $LN13@textiowrap@2
  00080	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
  00089	eb 0e		 jmp	 SHORT $LN14@textiowrap@2
$LN13@textiowrap@2:
  0008b	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00090	48 83 e8 18	 sub	 rax, 24
  00094	48 89 44 24 40	 mov	 QWORD PTR tv83[rsp], rax
$LN14@textiowrap@2:
  00099	48 8b 44 24 40	 mov	 rax, QWORD PTR tv83[rsp]
  0009e	48 89 44 24 30	 mov	 QWORD PTR g$21760[rsp], rax
  000a3	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21760[rsp]
  000a8	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000ad	75 1c		 jne	 SHORT $LN15@textiowrap@2
  000af	41 b8 7b 04 00
	00		 mov	 r8d, 1147		; 0000047bH
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c9	33 c0		 xor	 eax, eax
$LN15@textiowrap@2:
  000cb	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21760[rsp]
  000d0	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21760[rsp]
  000dd	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21760[rsp]
  000e6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000e9	48 89 08	 mov	 QWORD PTR [rax], rcx
  000ec	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21760[rsp]
  000f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21760[rsp]
  000f9	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000fd	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00101	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21760[rsp]
  00106	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0010d	33 c0		 xor	 eax, eax
  0010f	85 c0		 test	 eax, eax
  00111	0f 85 3f ff ff
	ff		 jne	 $LN8@textiowrap@2
$LN9@textiowrap@2:

; 1148 :     if (self->weakreflist != NULL)

  00117	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0011c	48 83 b8 00 01
	00 00 00	 cmp	 QWORD PTR [rax+256], 0
  00124	74 0a		 je	 SHORT $LN5@textiowrap@2

; 1149 :         PyObject_ClearWeakRefs((PyObject *)self);

  00126	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0012b	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN5@textiowrap@2:
$LN4@textiowrap@2:

; 1150 :     Py_CLEAR(self->dict);

  00130	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00135	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  0013d	74 5c		 je	 SHORT $LN1@textiowrap@2
  0013f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00147	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0014c	4c 8b 88 08 01
	00 00		 mov	 r9, QWORD PTR [rax+264]
  00153	41 b8 7e 04 00
	00		 mov	 r8d, 1150		; 0000047eH
  00159	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@HEFIHJBK@textiowrapper_dealloc?$AA@
  00167	e8 00 00 00 00	 call	 _PyParallel_Guard
  0016c	85 c0		 test	 eax, eax
  0016e	75 2b		 jne	 SHORT $LN1@textiowrap@2
  00170	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00175	48 8b 80 08 01
	00 00		 mov	 rax, QWORD PTR [rax+264]
  0017c	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$21773[rsp], rax
  00181	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00186	48 c7 80 08 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+264], 0
  00191	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$21773[rsp]
  00196	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap@2:
  0019b	33 c0		 xor	 eax, eax
  0019d	85 c0		 test	 eax, eax
  0019f	75 8f		 jne	 SHORT $LN4@textiowrap@2

; 1151 :     Py_TYPE(self)->tp_free((PyObject *)self);

  001a1	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001a6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  001af	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]
$LN11@textiowrap@2:

; 1152 : }

  001b5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001b9	c3		 ret	 0
textiowrapper_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@	; `string'
EXTRN	_PyIOBase_finalize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_textiowrapper_clear DD imagerel _textiowrapper_clear
	DD	imagerel _textiowrapper_clear+1304
	DD	imagerel $unwind$_textiowrapper_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_textiowrapper_clear DD 020c01H
	DD	011010cH
xdata	ENDS
;	COMDAT ??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@
CONST	SEGMENT
??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@ DB '_textiowrapper_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _textiowrapper_clear
_TEXT	SEGMENT
_py_tmp$21674 = 48
_py_tmp$21682 = 56
_py_tmp$21690 = 64
_py_tmp$21698 = 72
_py_tmp$21706 = 80
_py_tmp$21714 = 88
_py_tmp$21722 = 96
_py_tmp$21730 = 104
_py_tmp$21738 = 112
_py_tmp$21746 = 120
self$ = 144
_textiowrapper_clear PROC				; COMDAT

; 1124 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1125 :     if (self->ok && _PyIOBase_finalize((PyObject *) self) < 0)

  0000c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00014	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00018	74 1b		 je	 SHORT $LN41@textiowrap@3
  0001a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00022	e8 00 00 00 00	 call	 _PyIOBase_finalize
  00027	85 c0		 test	 eax, eax
  00029	7d 0a		 jge	 SHORT $LN41@textiowrap@3

; 1126 :         return -1;

  0002b	b8 ff ff ff ff	 mov	 eax, -1
  00030	e9 db 04 00 00	 jmp	 $LN42@textiowrap@3
$LN41@textiowrap@3:

; 1127 :     self->ok = 0;

  00035	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0003d	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [rax+96], 0
$LN40@textiowrap@3:

; 1128 :     Py_CLEAR(self->buffer);

  00044	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0004c	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00051	74 5c		 je	 SHORT $LN37@textiowrap@3
  00053	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00063	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00067	41 b8 68 04 00
	00		 mov	 r8d, 1128		; 00000468H
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@
  0007b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00080	85 c0		 test	 eax, eax
  00082	75 2b		 jne	 SHORT $LN37@textiowrap@3
  00084	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0008c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00090	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21674[rsp], rax
  00095	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0009d	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  000a5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21674[rsp]
  000aa	e8 00 00 00 00	 call	 _Py_DecRef
$LN37@textiowrap@3:
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 8f		 jne	 SHORT $LN40@textiowrap@3
$LN36@textiowrap@3:

; 1129 :     Py_CLEAR(self->encoding);

  000b5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000bd	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  000c2	74 5c		 je	 SHORT $LN33@textiowrap@3
  000c4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000cc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000d4	4c 8b 48 78	 mov	 r9, QWORD PTR [rax+120]
  000d8	41 b8 69 04 00
	00		 mov	 r8d, 1129		; 00000469H
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@
  000ec	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f1	85 c0		 test	 eax, eax
  000f3	75 2b		 jne	 SHORT $LN33@textiowrap@3
  000f5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000fd	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00101	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$21682[rsp], rax
  00106	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0010e	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
  00116	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$21682[rsp]
  0011b	e8 00 00 00 00	 call	 _Py_DecRef
$LN33@textiowrap@3:
  00120	33 c0		 xor	 eax, eax
  00122	85 c0		 test	 eax, eax
  00124	75 8f		 jne	 SHORT $LN36@textiowrap@3
$LN32@textiowrap@3:

; 1130 :     Py_CLEAR(self->encoder);

  00126	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0012e	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00136	74 65		 je	 SHORT $LN29@textiowrap@3
  00138	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00140	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00148	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  0014f	41 b8 6a 04 00
	00		 mov	 r8d, 1130		; 0000046aH
  00155	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@
  00163	e8 00 00 00 00	 call	 _PyParallel_Guard
  00168	85 c0		 test	 eax, eax
  0016a	75 31		 jne	 SHORT $LN29@textiowrap@3
  0016c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00174	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0017b	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$21690[rsp], rax
  00180	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00188	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0
  00193	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$21690[rsp]
  00198	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@textiowrap@3:
  0019d	33 c0		 xor	 eax, eax
  0019f	85 c0		 test	 eax, eax
  001a1	75 83		 jne	 SHORT $LN32@textiowrap@3
$LN28@textiowrap@3:

; 1131 :     Py_CLEAR(self->decoder);

  001a3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ab	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  001b3	74 65		 je	 SHORT $LN25@textiowrap@3
  001b5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001bd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001c5	4c 8b 88 88 00
	00 00		 mov	 r9, QWORD PTR [rax+136]
  001cc	41 b8 6b 04 00
	00		 mov	 r8d, 1131		; 0000046bH
  001d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@
  001e0	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e5	85 c0		 test	 eax, eax
  001e7	75 31		 jne	 SHORT $LN25@textiowrap@3
  001e9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001f1	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  001f8	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$21698[rsp], rax
  001fd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00205	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0
  00210	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$21698[rsp]
  00215	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@textiowrap@3:
  0021a	33 c0		 xor	 eax, eax
  0021c	85 c0		 test	 eax, eax
  0021e	75 83		 jne	 SHORT $LN28@textiowrap@3
$LN24@textiowrap@3:

; 1132 :     Py_CLEAR(self->readnl);

  00220	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00228	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00230	74 65		 je	 SHORT $LN21@textiowrap@3
  00232	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0023a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00242	4c 8b 88 90 00
	00 00		 mov	 r9, QWORD PTR [rax+144]
  00249	41 b8 6c 04 00
	00		 mov	 r8d, 1132		; 0000046cH
  0024f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00256	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@
  0025d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00262	85 c0		 test	 eax, eax
  00264	75 31		 jne	 SHORT $LN21@textiowrap@3
  00266	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0026e	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00275	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$21706[rsp], rax
  0027a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00282	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0
  0028d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$21706[rsp]
  00292	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@textiowrap@3:
  00297	33 c0		 xor	 eax, eax
  00299	85 c0		 test	 eax, eax
  0029b	75 83		 jne	 SHORT $LN24@textiowrap@3
$LN20@textiowrap@3:

; 1133 :     Py_CLEAR(self->decoded_chars);

  0029d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002a5	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  002ad	74 65		 je	 SHORT $LN17@textiowrap@3
  002af	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002b7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002bf	4c 8b 88 c8 00
	00 00		 mov	 r9, QWORD PTR [rax+200]
  002c6	41 b8 6d 04 00
	00		 mov	 r8d, 1133		; 0000046dH
  002cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  002d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@
  002da	e8 00 00 00 00	 call	 _PyParallel_Guard
  002df	85 c0		 test	 eax, eax
  002e1	75 31		 jne	 SHORT $LN17@textiowrap@3
  002e3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002eb	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  002f2	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$21714[rsp], rax
  002f7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002ff	48 c7 80 c8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+200], 0
  0030a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$21714[rsp]
  0030f	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@textiowrap@3:
  00314	33 c0		 xor	 eax, eax
  00316	85 c0		 test	 eax, eax
  00318	75 83		 jne	 SHORT $LN20@textiowrap@3
$LN16@textiowrap@3:

; 1134 :     Py_CLEAR(self->pending_bytes);

  0031a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00322	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  0032a	74 65		 je	 SHORT $LN13@textiowrap@3
  0032c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00334	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0033c	4c 8b 88 d8 00
	00 00		 mov	 r9, QWORD PTR [rax+216]
  00343	41 b8 6e 04 00
	00		 mov	 r8d, 1134		; 0000046eH
  00349	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00350	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@
  00357	e8 00 00 00 00	 call	 _PyParallel_Guard
  0035c	85 c0		 test	 eax, eax
  0035e	75 31		 jne	 SHORT $LN13@textiowrap@3
  00360	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00368	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  0036f	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$21722[rsp], rax
  00374	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0037c	48 c7 80 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+216], 0
  00387	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$21722[rsp]
  0038c	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@textiowrap@3:
  00391	33 c0		 xor	 eax, eax
  00393	85 c0		 test	 eax, eax
  00395	75 83		 jne	 SHORT $LN16@textiowrap@3
$LN12@textiowrap@3:

; 1135 :     Py_CLEAR(self->snapshot);

  00397	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0039f	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  003a7	74 65		 je	 SHORT $LN9@textiowrap@3
  003a9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003b1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003b9	4c 8b 88 e8 00
	00 00		 mov	 r9, QWORD PTR [rax+232]
  003c0	41 b8 6f 04 00
	00		 mov	 r8d, 1135		; 0000046fH
  003c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  003cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@
  003d4	e8 00 00 00 00	 call	 _PyParallel_Guard
  003d9	85 c0		 test	 eax, eax
  003db	75 31		 jne	 SHORT $LN9@textiowrap@3
  003dd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003e5	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  003ec	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$21730[rsp], rax
  003f1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003f9	48 c7 80 e8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+232], 0
  00404	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$21730[rsp]
  00409	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@textiowrap@3:
  0040e	33 c0		 xor	 eax, eax
  00410	85 c0		 test	 eax, eax
  00412	75 83		 jne	 SHORT $LN12@textiowrap@3
$LN8@textiowrap@3:

; 1136 :     Py_CLEAR(self->errors);

  00414	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0041c	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00424	74 65		 je	 SHORT $LN5@textiowrap@3
  00426	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0042e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00436	4c 8b 88 98 00
	00 00		 mov	 r9, QWORD PTR [rax+152]
  0043d	41 b8 70 04 00
	00		 mov	 r8d, 1136		; 00000470H
  00443	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0044a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@
  00451	e8 00 00 00 00	 call	 _PyParallel_Guard
  00456	85 c0		 test	 eax, eax
  00458	75 31		 jne	 SHORT $LN5@textiowrap@3
  0045a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00462	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00469	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$21738[rsp], rax
  0046e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00476	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0
  00481	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$21738[rsp]
  00486	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@textiowrap@3:
  0048b	33 c0		 xor	 eax, eax
  0048d	85 c0		 test	 eax, eax
  0048f	75 83		 jne	 SHORT $LN8@textiowrap@3
$LN4@textiowrap@3:

; 1137 :     Py_CLEAR(self->raw);

  00491	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00499	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  004a1	74 65		 je	 SHORT $LN1@textiowrap@3
  004a3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004ab	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004b3	4c 8b 88 f8 00
	00 00		 mov	 r9, QWORD PTR [rax+248]
  004ba	41 b8 71 04 00
	00		 mov	 r8d, 1137		; 00000471H
  004c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  004c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OLAHCNIL@_textiowrapper_clear?$AA@
  004ce	e8 00 00 00 00	 call	 _PyParallel_Guard
  004d3	85 c0		 test	 eax, eax
  004d5	75 31		 jne	 SHORT $LN1@textiowrap@3
  004d7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004df	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  004e6	48 89 44 24 78	 mov	 QWORD PTR _py_tmp$21746[rsp], rax
  004eb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004f3	48 c7 80 f8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+248], 0
  004fe	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _py_tmp$21746[rsp]
  00503	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap@3:
  00508	33 c0		 xor	 eax, eax
  0050a	85 c0		 test	 eax, eax
  0050c	75 83		 jne	 SHORT $LN4@textiowrap@3

; 1138 :     return 0;

  0050e	33 c0		 xor	 eax, eax
$LN42@textiowrap@3:

; 1139 : }

  00510	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00517	c3		 ret	 0
_textiowrapper_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@	; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_traverse DD imagerel textiowrapper_traverse
	DD	imagerel textiowrapper_traverse+1097
	DD	imagerel $unwind$textiowrapper_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_traverse DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
CONST	SEGMENT
??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@ DB 'textiowrapper_traverse'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_traverse
_TEXT	SEGMENT
vret$21793 = 32
vret$21801 = 36
vret$21809 = 40
vret$21817 = 44
vret$21825 = 48
vret$21833 = 52
vret$21841 = 56
vret$21849 = 60
vret$21857 = 64
vret$21865 = 68
vret$21873 = 72
self$ = 96
visit$ = 104
arg$ = 112
textiowrapper_traverse PROC				; COMDAT

; 1156 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN66@textiowrap@4:

; 1157 :     Py_VISIT(self->buffer);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN63@textiowrap@4
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 85 04 00
	00		 mov	 r8d, 1157		; 00000485H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN63@textiowrap@4:
  00038	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00042	74 26		 je	 SHORT $LN62@textiowrap@4
  00044	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00052	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21793[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21793[rsp], 0
  0005f	74 09		 je	 SHORT $LN61@textiowrap@4
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21793[rsp]
  00065	e9 da 03 00 00	 jmp	 $LN67@textiowrap@4
$LN61@textiowrap@4:
$LN62@textiowrap@4:
  0006a	33 c0		 xor	 eax, eax
  0006c	85 c0		 test	 eax, eax
  0006e	75 a3		 jne	 SHORT $LN66@textiowrap@4
$LN60@textiowrap@4:

; 1158 :     Py_VISIT(self->encoding);

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	74 1c		 je	 SHORT $LN57@textiowrap@4
  00079	45 33 c9	 xor	 r9d, r9d
  0007c	41 b8 86 04 00
	00		 mov	 r8d, 1158		; 00000486H
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
  00090	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN57@textiowrap@4:
  00095	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0009a	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0009f	74 26		 je	 SHORT $LN56@textiowrap@4
  000a1	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  000a6	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000ab	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  000af	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  000b3	89 44 24 24	 mov	 DWORD PTR vret$21801[rsp], eax
  000b7	83 7c 24 24 00	 cmp	 DWORD PTR vret$21801[rsp], 0
  000bc	74 09		 je	 SHORT $LN55@textiowrap@4
  000be	8b 44 24 24	 mov	 eax, DWORD PTR vret$21801[rsp]
  000c2	e9 7d 03 00 00	 jmp	 $LN67@textiowrap@4
$LN55@textiowrap@4:
$LN56@textiowrap@4:
  000c7	33 c0		 xor	 eax, eax
  000c9	85 c0		 test	 eax, eax
  000cb	75 a3		 jne	 SHORT $LN60@textiowrap@4
$LN54@textiowrap@4:

; 1159 :     Py_VISIT(self->encoder);

  000cd	e8 00 00 00 00	 call	 _Py_PXCTX
  000d2	85 c0		 test	 eax, eax
  000d4	74 1c		 je	 SHORT $LN51@textiowrap@4
  000d6	45 33 c9	 xor	 r9d, r9d
  000d9	41 b8 87 04 00
	00		 mov	 r8d, 1159		; 00000487H
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
  000ed	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN51@textiowrap@4:
  000f2	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000f7	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000ff	74 29		 je	 SHORT $LN50@textiowrap@4
  00101	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00106	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0010b	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00112	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00116	89 44 24 28	 mov	 DWORD PTR vret$21809[rsp], eax
  0011a	83 7c 24 28 00	 cmp	 DWORD PTR vret$21809[rsp], 0
  0011f	74 09		 je	 SHORT $LN49@textiowrap@4
  00121	8b 44 24 28	 mov	 eax, DWORD PTR vret$21809[rsp]
  00125	e9 1a 03 00 00	 jmp	 $LN67@textiowrap@4
$LN49@textiowrap@4:
$LN50@textiowrap@4:
  0012a	33 c0		 xor	 eax, eax
  0012c	85 c0		 test	 eax, eax
  0012e	75 9d		 jne	 SHORT $LN54@textiowrap@4
$LN48@textiowrap@4:

; 1160 :     Py_VISIT(self->decoder);

  00130	e8 00 00 00 00	 call	 _Py_PXCTX
  00135	85 c0		 test	 eax, eax
  00137	74 1c		 je	 SHORT $LN45@textiowrap@4
  00139	45 33 c9	 xor	 r9d, r9d
  0013c	41 b8 88 04 00
	00		 mov	 r8d, 1160		; 00000488H
  00142	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00149	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
  00150	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN45@textiowrap@4:
  00155	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0015a	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00162	74 29		 je	 SHORT $LN44@textiowrap@4
  00164	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00169	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0016e	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00175	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00179	89 44 24 2c	 mov	 DWORD PTR vret$21817[rsp], eax
  0017d	83 7c 24 2c 00	 cmp	 DWORD PTR vret$21817[rsp], 0
  00182	74 09		 je	 SHORT $LN43@textiowrap@4
  00184	8b 44 24 2c	 mov	 eax, DWORD PTR vret$21817[rsp]
  00188	e9 b7 02 00 00	 jmp	 $LN67@textiowrap@4
$LN43@textiowrap@4:
$LN44@textiowrap@4:
  0018d	33 c0		 xor	 eax, eax
  0018f	85 c0		 test	 eax, eax
  00191	75 9d		 jne	 SHORT $LN48@textiowrap@4
$LN42@textiowrap@4:

; 1161 :     Py_VISIT(self->readnl);

  00193	e8 00 00 00 00	 call	 _Py_PXCTX
  00198	85 c0		 test	 eax, eax
  0019a	74 1c		 je	 SHORT $LN39@textiowrap@4
  0019c	45 33 c9	 xor	 r9d, r9d
  0019f	41 b8 89 04 00
	00		 mov	 r8d, 1161		; 00000489H
  001a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  001ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
  001b3	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN39@textiowrap@4:
  001b8	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001bd	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  001c5	74 29		 je	 SHORT $LN38@textiowrap@4
  001c7	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  001cc	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001d1	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  001d8	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  001dc	89 44 24 30	 mov	 DWORD PTR vret$21825[rsp], eax
  001e0	83 7c 24 30 00	 cmp	 DWORD PTR vret$21825[rsp], 0
  001e5	74 09		 je	 SHORT $LN37@textiowrap@4
  001e7	8b 44 24 30	 mov	 eax, DWORD PTR vret$21825[rsp]
  001eb	e9 54 02 00 00	 jmp	 $LN67@textiowrap@4
$LN37@textiowrap@4:
$LN38@textiowrap@4:
  001f0	33 c0		 xor	 eax, eax
  001f2	85 c0		 test	 eax, eax
  001f4	75 9d		 jne	 SHORT $LN42@textiowrap@4
$LN36@textiowrap@4:

; 1162 :     Py_VISIT(self->decoded_chars);

  001f6	e8 00 00 00 00	 call	 _Py_PXCTX
  001fb	85 c0		 test	 eax, eax
  001fd	74 1c		 je	 SHORT $LN33@textiowrap@4
  001ff	45 33 c9	 xor	 r9d, r9d
  00202	41 b8 8a 04 00
	00		 mov	 r8d, 1162		; 0000048aH
  00208	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0020f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
  00216	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN33@textiowrap@4:
  0021b	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00220	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  00228	74 29		 je	 SHORT $LN32@textiowrap@4
  0022a	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  0022f	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00234	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  0023b	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  0023f	89 44 24 34	 mov	 DWORD PTR vret$21833[rsp], eax
  00243	83 7c 24 34 00	 cmp	 DWORD PTR vret$21833[rsp], 0
  00248	74 09		 je	 SHORT $LN31@textiowrap@4
  0024a	8b 44 24 34	 mov	 eax, DWORD PTR vret$21833[rsp]
  0024e	e9 f1 01 00 00	 jmp	 $LN67@textiowrap@4
$LN31@textiowrap@4:
$LN32@textiowrap@4:
  00253	33 c0		 xor	 eax, eax
  00255	85 c0		 test	 eax, eax
  00257	75 9d		 jne	 SHORT $LN36@textiowrap@4
$LN30@textiowrap@4:

; 1163 :     Py_VISIT(self->pending_bytes);

  00259	e8 00 00 00 00	 call	 _Py_PXCTX
  0025e	85 c0		 test	 eax, eax
  00260	74 1c		 je	 SHORT $LN27@textiowrap@4
  00262	45 33 c9	 xor	 r9d, r9d
  00265	41 b8 8b 04 00
	00		 mov	 r8d, 1163		; 0000048bH
  0026b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00272	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
  00279	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN27@textiowrap@4:
  0027e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00283	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  0028b	74 29		 je	 SHORT $LN26@textiowrap@4
  0028d	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00292	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00297	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  0029e	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  002a2	89 44 24 38	 mov	 DWORD PTR vret$21841[rsp], eax
  002a6	83 7c 24 38 00	 cmp	 DWORD PTR vret$21841[rsp], 0
  002ab	74 09		 je	 SHORT $LN25@textiowrap@4
  002ad	8b 44 24 38	 mov	 eax, DWORD PTR vret$21841[rsp]
  002b1	e9 8e 01 00 00	 jmp	 $LN67@textiowrap@4
$LN25@textiowrap@4:
$LN26@textiowrap@4:
  002b6	33 c0		 xor	 eax, eax
  002b8	85 c0		 test	 eax, eax
  002ba	75 9d		 jne	 SHORT $LN30@textiowrap@4
$LN24@textiowrap@4:

; 1164 :     Py_VISIT(self->snapshot);

  002bc	e8 00 00 00 00	 call	 _Py_PXCTX
  002c1	85 c0		 test	 eax, eax
  002c3	74 1c		 je	 SHORT $LN21@textiowrap@4
  002c5	45 33 c9	 xor	 r9d, r9d
  002c8	41 b8 8c 04 00
	00		 mov	 r8d, 1164		; 0000048cH
  002ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  002d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
  002dc	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@textiowrap@4:
  002e1	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  002e6	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  002ee	74 29		 je	 SHORT $LN20@textiowrap@4
  002f0	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  002f5	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  002fa	48 8b 88 e8 00
	00 00		 mov	 rcx, QWORD PTR [rax+232]
  00301	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00305	89 44 24 3c	 mov	 DWORD PTR vret$21849[rsp], eax
  00309	83 7c 24 3c 00	 cmp	 DWORD PTR vret$21849[rsp], 0
  0030e	74 09		 je	 SHORT $LN19@textiowrap@4
  00310	8b 44 24 3c	 mov	 eax, DWORD PTR vret$21849[rsp]
  00314	e9 2b 01 00 00	 jmp	 $LN67@textiowrap@4
$LN19@textiowrap@4:
$LN20@textiowrap@4:
  00319	33 c0		 xor	 eax, eax
  0031b	85 c0		 test	 eax, eax
  0031d	75 9d		 jne	 SHORT $LN24@textiowrap@4
$LN18@textiowrap@4:

; 1165 :     Py_VISIT(self->errors);

  0031f	e8 00 00 00 00	 call	 _Py_PXCTX
  00324	85 c0		 test	 eax, eax
  00326	74 1c		 je	 SHORT $LN15@textiowrap@4
  00328	45 33 c9	 xor	 r9d, r9d
  0032b	41 b8 8d 04 00
	00		 mov	 r8d, 1165		; 0000048dH
  00331	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00338	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
  0033f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@textiowrap@4:
  00344	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00349	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00351	74 29		 je	 SHORT $LN14@textiowrap@4
  00353	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00358	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0035d	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  00364	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00368	89 44 24 40	 mov	 DWORD PTR vret$21857[rsp], eax
  0036c	83 7c 24 40 00	 cmp	 DWORD PTR vret$21857[rsp], 0
  00371	74 09		 je	 SHORT $LN13@textiowrap@4
  00373	8b 44 24 40	 mov	 eax, DWORD PTR vret$21857[rsp]
  00377	e9 c8 00 00 00	 jmp	 $LN67@textiowrap@4
$LN13@textiowrap@4:
$LN14@textiowrap@4:
  0037c	33 c0		 xor	 eax, eax
  0037e	85 c0		 test	 eax, eax
  00380	75 9d		 jne	 SHORT $LN18@textiowrap@4
$LN12@textiowrap@4:

; 1166 :     Py_VISIT(self->raw);

  00382	e8 00 00 00 00	 call	 _Py_PXCTX
  00387	85 c0		 test	 eax, eax
  00389	74 1c		 je	 SHORT $LN9@textiowrap@4
  0038b	45 33 c9	 xor	 r9d, r9d
  0038e	41 b8 8e 04 00
	00		 mov	 r8d, 1166		; 0000048eH
  00394	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0039b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
  003a2	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@textiowrap@4:
  003a7	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  003ac	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  003b4	74 26		 je	 SHORT $LN8@textiowrap@4
  003b6	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  003bb	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  003c0	48 8b 88 f8 00
	00 00		 mov	 rcx, QWORD PTR [rax+248]
  003c7	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  003cb	89 44 24 44	 mov	 DWORD PTR vret$21865[rsp], eax
  003cf	83 7c 24 44 00	 cmp	 DWORD PTR vret$21865[rsp], 0
  003d4	74 06		 je	 SHORT $LN7@textiowrap@4
  003d6	8b 44 24 44	 mov	 eax, DWORD PTR vret$21865[rsp]
  003da	eb 68		 jmp	 SHORT $LN67@textiowrap@4
$LN7@textiowrap@4:
$LN8@textiowrap@4:
  003dc	33 c0		 xor	 eax, eax
  003de	85 c0		 test	 eax, eax
  003e0	75 a0		 jne	 SHORT $LN12@textiowrap@4
$LN6@textiowrap@4:

; 1167 : 
; 1168 :     Py_VISIT(self->dict);

  003e2	e8 00 00 00 00	 call	 _Py_PXCTX
  003e7	85 c0		 test	 eax, eax
  003e9	74 1c		 je	 SHORT $LN3@textiowrap@4
  003eb	45 33 c9	 xor	 r9d, r9d
  003ee	41 b8 90 04 00
	00		 mov	 r8d, 1168		; 00000490H
  003f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  003fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@COCKCLBM@textiowrapper_traverse?$AA@
  00402	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@textiowrap@4:
  00407	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0040c	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  00414	74 26		 je	 SHORT $LN2@textiowrap@4
  00416	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  0041b	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00420	48 8b 88 08 01
	00 00		 mov	 rcx, QWORD PTR [rax+264]
  00427	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  0042b	89 44 24 48	 mov	 DWORD PTR vret$21873[rsp], eax
  0042f	83 7c 24 48 00	 cmp	 DWORD PTR vret$21873[rsp], 0
  00434	74 06		 je	 SHORT $LN1@textiowrap@4
  00436	8b 44 24 48	 mov	 eax, DWORD PTR vret$21873[rsp]
  0043a	eb 08		 jmp	 SHORT $LN67@textiowrap@4
$LN1@textiowrap@4:
$LN2@textiowrap@4:
  0043c	33 c0		 xor	 eax, eax
  0043e	85 c0		 test	 eax, eax
  00440	75 a0		 jne	 SHORT $LN6@textiowrap@4

; 1169 :     return 0;

  00442	33 c0		 xor	 eax, eax
$LN67@textiowrap@4:

; 1170 : }

  00444	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00448	c3		 ret	 0
textiowrapper_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@FGMGKDLO@textiowrapper_clear?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_clear DD imagerel textiowrapper_clear
	DD	imagerel textiowrapper_clear+150
	DD	imagerel $unwind$textiowrapper_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BE@FGMGKDLO@textiowrapper_clear?$AA@
CONST	SEGMENT
??_C@_0BE@FGMGKDLO@textiowrapper_clear?$AA@ DB 'textiowrapper_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_clear
_TEXT	SEGMENT
_py_tmp$21886 = 48
self$ = 80
textiowrapper_clear PROC				; COMDAT

; 1174 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1175 :     if (_textiowrapper_clear(self) < 0)

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 _textiowrapper_clear
  00013	85 c0		 test	 eax, eax
  00015	7d 07		 jge	 SHORT $LN5@textiowrap@5

; 1176 :         return -1;

  00017	b8 ff ff ff ff	 mov	 eax, -1
  0001c	eb 73		 jmp	 SHORT $LN6@textiowrap@5
$LN5@textiowrap@5:
$LN4@textiowrap@5:

; 1177 :     Py_CLEAR(self->dict);

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00023	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  0002b	74 5c		 je	 SHORT $LN1@textiowrap@5
  0002d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00035	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0003a	4c 8b 88 08 01
	00 00		 mov	 r9, QWORD PTR [rax+264]
  00041	41 b8 99 04 00
	00		 mov	 r8d, 1177		; 00000499H
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FGMGKDLO@textiowrapper_clear?$AA@
  00055	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005a	85 c0		 test	 eax, eax
  0005c	75 2b		 jne	 SHORT $LN1@textiowrap@5
  0005e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00063	48 8b 80 08 01
	00 00		 mov	 rax, QWORD PTR [rax+264]
  0006a	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21886[rsp], rax
  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00074	48 c7 80 08 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+264], 0
  0007f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21886[rsp]
  00084	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap@5:
  00089	33 c0		 xor	 eax, eax
  0008b	85 c0		 test	 eax, eax
  0008d	75 8f		 jne	 SHORT $LN4@textiowrap@5

; 1178 :     return 0;

  0008f	33 c0		 xor	 eax, eax
$LN6@textiowrap@5:

; 1179 : }

  00091	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00095	c3		 ret	 0
textiowrapper_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@ ; `string'
PUBLIC	??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@ ; `string'
EXTRN	_PyIO_str_flush:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_detach DD imagerel textiowrapper_detach
	DD	imagerel textiowrapper_detach+183
	DD	imagerel $unwind$textiowrapper_detach
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_detach DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
CONST	SEGMENT
??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@ DB 'I/O operati'
	DB	'on on uninitialized object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
CONST	SEGMENT
??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@ DB 'underlying b'
	DB	'uffer has been detached', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_detach
_TEXT	SEGMENT
res$ = 32
buffer$ = 40
self$ = 64
textiowrapper_detach PROC				; COMDAT

; 1238 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1239 :     PyObject *buffer, *res;
; 1240 :     CHECK_INITIALIZED(self);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00012	7f 37		 jg	 SHORT $LN4@textiowrap@6
  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00019	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  0001d	74 15		 je	 SHORT $LN3@textiowrap@6
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString
  00032	eb 13		 jmp	 SHORT $LN2@textiowrap@6
$LN3@textiowrap@6:
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00042	e8 00 00 00 00	 call	 PyErr_SetString
$LN2@textiowrap@6:
  00047	33 c0		 xor	 eax, eax
  00049	eb 67		 jmp	 SHORT $LN5@textiowrap@6
$LN4@textiowrap@6:

; 1241 :     res = PyObject_CallMethodObjArgs((PyObject *)self, _PyIO_str_flush, NULL);

  0004b	45 33 c0	 xor	 r8d, r8d
  0004e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  00055	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0005a	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0005f	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1242 :     if (res == NULL)

  00064	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0006a	75 04		 jne	 SHORT $LN1@textiowrap@6

; 1243 :         return NULL;

  0006c	33 c0		 xor	 eax, eax
  0006e	eb 42		 jmp	 SHORT $LN5@textiowrap@6
$LN1@textiowrap@6:

; 1244 :     Py_DECREF(res);

  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00075	e8 00 00 00 00	 call	 _Py_DecRef

; 1245 :     buffer = self->buffer;

  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0007f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00083	48 89 44 24 28	 mov	 QWORD PTR buffer$[rsp], rax

; 1246 :     self->buffer = NULL;

  00088	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0008d	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 1247 :     self->detached = 1;

  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0009a	c7 40 64 01 00
	00 00		 mov	 DWORD PTR [rax+100], 1

; 1248 :     self->ok = 0;

  000a1	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000a6	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [rax+96], 0

; 1249 :     return buffer;

  000ad	48 8b 44 24 28	 mov	 rax, QWORD PTR buffer$[rsp]
$LN5@textiowrap@6:

; 1250 : }

  000b2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b6	c3		 ret	 0
textiowrapper_detach ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@EEOJJAGF@textiowrapper_write?$AA@	; `string'
PUBLIC	??_C@_1CC@DHEDCFGE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@BPKMBCK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@MHOOAMII@not?5writable?$AA@		; `string'
PUBLIC	??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@ ; `string'
PUBLIC	??_C@_1CM@MOJLKIMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_07BDGBEOBJ@U?3write?$AA@			; `string'
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyList_Append:PROC
EXTRN	PyList_New:PROC
EXTRN	_PyIO_str_encode:QWORD
EXTRN	PyUnicode_FindChar:PROC
EXTRN	_PyIOBase_check_closed:PROC
EXTRN	_PyFileIO_closed:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_write DD imagerel textiowrapper_write
	DD	imagerel textiowrapper_write+1950
	DD	imagerel $unwind$textiowrapper_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_write DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0BE@EEOJJAGF@textiowrapper_write?$AA@
CONST	SEGMENT
??_C@_0BE@EEOJJAGF@textiowrapper_write?$AA@ DB 'textiowrapper_write', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@DHEDCFGE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@DHEDCFGE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'b', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@BPKMBCK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@BPKMBCK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MHOOAMII@not?5writable?$AA@
CONST	SEGMENT
??_C@_0N@MHOOAMII@not?5writable?$AA@ DB 'not writable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
CONST	SEGMENT
??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@ DB 'I/O opera'
	DB	'tion on closed file.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@MOJLKIMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@MOJLKIMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07BDGBEOBJ@U?3write?$AA@
CONST	SEGMENT
??_C@_07BDGBEOBJ@U?3write?$AA@ DB 'U:write', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_write
_TEXT	SEGMENT
text$ = 48
needflush$ = 56
haslf$ = 60
textlen$ = 64
b$ = 72
ret$ = 80
_res$21980 = 88
r$21979 = 96
newtext$22024 = 104
_py_tmp$22076 = 112
tv91 = 120
self$ = 144
args$ = 152
textiowrapper_write PROC				; COMDAT

; 1285 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1286 :     PyObject *ret;
; 1287 :     PyObject *text; /* owned reference */
; 1288 :     PyObject *b;
; 1289 :     Py_ssize_t textlen;
; 1290 :     int haslf = 0;

  00011	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR haslf$[rsp], 0

; 1291 :     int needflush = 0;

  00019	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR needflush$[rsp], 0

; 1292 : 
; 1293 :     CHECK_INITIALIZED(self);

  00021	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00029	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  0002d	7f 3d		 jg	 SHORT $LN44@textiowrap@7
  0002f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00037	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  0003b	74 15		 je	 SHORT $LN43@textiowrap@7
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  00044	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004b	e8 00 00 00 00	 call	 PyErr_SetString
  00050	eb 13		 jmp	 SHORT $LN42@textiowrap@7
$LN43@textiowrap@7:
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00059	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00060	e8 00 00 00 00	 call	 PyErr_SetString
$LN42@textiowrap@7:
  00065	33 c0		 xor	 eax, eax
  00067	e9 2a 07 00 00	 jmp	 $LN45@textiowrap@7
$LN44@textiowrap@7:

; 1294 : 
; 1295 :     if (!PyArg_ParseTuple(args, "U:write", &text)) {

  0006c	4c 8d 44 24 30	 lea	 r8, QWORD PTR text$[rsp]
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BDGBEOBJ@U?3write?$AA@
  00078	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00080	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00085	85 c0		 test	 eax, eax
  00087	75 07		 jne	 SHORT $LN41@textiowrap@7

; 1296 :         return NULL;

  00089	33 c0		 xor	 eax, eax
  0008b	e9 06 07 00 00	 jmp	 $LN45@textiowrap@7
$LN41@textiowrap@7:

; 1297 :     }
; 1298 : 
; 1299 :     if (PyUnicode_READY(text) == -1)

  00090	48 8b 44 24 30	 mov	 rax, QWORD PTR text$[rsp]
  00095	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00099	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0009f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000a4	85 c0		 test	 eax, eax
  000a6	75 1c		 jne	 SHORT $LN47@textiowrap@7
  000a8	41 b8 13 05 00
	00		 mov	 r8d, 1299		; 00000513H
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@MOJLKIMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c2	33 c0		 xor	 eax, eax
$LN47@textiowrap@7:
  000c4	48 8b 44 24 30	 mov	 rax, QWORD PTR text$[rsp]
  000c9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000cc	c1 e8 07	 shr	 eax, 7
  000cf	83 e0 01	 and	 eax, 1
  000d2	85 c0		 test	 eax, eax
  000d4	74 0a		 je	 SHORT $LN48@textiowrap@7
  000d6	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000de	eb 0e		 jmp	 SHORT $LN49@textiowrap@7
$LN48@textiowrap@7:
  000e0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR text$[rsp]
  000e5	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ea	89 44 24 78	 mov	 DWORD PTR tv91[rsp], eax
$LN49@textiowrap@7:
  000ee	83 7c 24 78 ff	 cmp	 DWORD PTR tv91[rsp], -1
  000f3	75 07		 jne	 SHORT $LN40@textiowrap@7

; 1300 :         return NULL;

  000f5	33 c0		 xor	 eax, eax
  000f7	e9 9a 06 00 00	 jmp	 $LN45@textiowrap@7
$LN40@textiowrap@7:
$LN39@textiowrap@7:

; 1301 : 
; 1302 :     CHECK_CLOSED(self);

  000fc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTextIOWrapper_Type
  00103	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0010b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0010f	0f 85 98 00 00
	00		 jne	 $LN36@textiowrap@7
  00115	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0011d	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  00125	74 1a		 je	 SHORT $LN35@textiowrap@7
  00127	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0012f	48 8b 88 f8 00
	00 00		 mov	 rcx, QWORD PTR [rax+248]
  00136	e8 00 00 00 00	 call	 _PyFileIO_closed
  0013b	89 44 24 60	 mov	 DWORD PTR r$21979[rsp], eax
  0013f	eb 49		 jmp	 SHORT $LN34@textiowrap@7
$LN35@textiowrap@7:
  00141	33 d2		 xor	 edx, edx
  00143	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0014b	e8 00 00 00 00	 call	 textiowrapper_closed_get
  00150	48 89 44 24 58	 mov	 QWORD PTR _res$21980[rsp], rax
  00155	48 83 7c 24 58
	00		 cmp	 QWORD PTR _res$21980[rsp], 0
  0015b	75 07		 jne	 SHORT $LN33@textiowrap@7
  0015d	33 c0		 xor	 eax, eax
  0015f	e9 32 06 00 00	 jmp	 $LN45@textiowrap@7
$LN33@textiowrap@7:
  00164	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _res$21980[rsp]
  00169	e8 00 00 00 00	 call	 PyObject_IsTrue
  0016e	89 44 24 60	 mov	 DWORD PTR r$21979[rsp], eax
  00172	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _res$21980[rsp]
  00177	e8 00 00 00 00	 call	 _Py_DecRef
  0017c	83 7c 24 60 00	 cmp	 DWORD PTR r$21979[rsp], 0
  00181	7d 07		 jge	 SHORT $LN32@textiowrap@7
  00183	33 c0		 xor	 eax, eax
  00185	e9 0c 06 00 00	 jmp	 $LN45@textiowrap@7
$LN32@textiowrap@7:
$LN34@textiowrap@7:
  0018a	83 7c 24 60 00	 cmp	 DWORD PTR r$21979[rsp], 0
  0018f	7e 1a		 jle	 SHORT $LN31@textiowrap@7
  00191	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
  00198	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0019f	e8 00 00 00 00	 call	 PyErr_SetString
  001a4	33 c0		 xor	 eax, eax
  001a6	e9 eb 05 00 00	 jmp	 $LN45@textiowrap@7
$LN31@textiowrap@7:
  001ab	eb 20		 jmp	 SHORT $LN30@textiowrap@7
$LN36@textiowrap@7:
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  001b4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001bc	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  001c1	48 85 c0	 test	 rax, rax
  001c4	75 07		 jne	 SHORT $LN29@textiowrap@7
  001c6	33 c0		 xor	 eax, eax
  001c8	e9 c9 05 00 00	 jmp	 $LN45@textiowrap@7
$LN29@textiowrap@7:
$LN30@textiowrap@7:
  001cd	33 c0		 xor	 eax, eax
  001cf	85 c0		 test	 eax, eax
  001d1	0f 85 25 ff ff
	ff		 jne	 $LN39@textiowrap@7

; 1303 : 
; 1304 :     if (self->encoder == NULL)

  001d7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001df	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  001e7	75 11		 jne	 SHORT $LN28@textiowrap@7

; 1305 :         return _unsupported("not writable");

  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MHOOAMII@not?5writable?$AA@
  001f0	e8 00 00 00 00	 call	 _unsupported
  001f5	e9 9c 05 00 00	 jmp	 $LN45@textiowrap@7
$LN28@textiowrap@7:

; 1306 : 
; 1307 :     Py_INCREF(text);

  001fa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR text$[rsp]
  001ff	e8 00 00 00 00	 call	 _Py_IncRef

; 1308 : 
; 1309 :     textlen = PyUnicode_GET_LENGTH(text);

  00204	48 8b 44 24 30	 mov	 rax, QWORD PTR text$[rsp]
  00209	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0020d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00213	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00218	85 c0		 test	 eax, eax
  0021a	75 1c		 jne	 SHORT $LN50@textiowrap@7
  0021c	41 b8 1d 05 00
	00		 mov	 r8d, 1309		; 0000051dH
  00222	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00229	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@MOJLKIMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
  00230	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00236	33 c0		 xor	 eax, eax
$LN50@textiowrap@7:
  00238	48 8b 44 24 30	 mov	 rax, QWORD PTR text$[rsp]
  0023d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00240	c1 e8 07	 shr	 eax, 7
  00243	83 e0 01	 and	 eax, 1
  00246	85 c0		 test	 eax, eax
  00248	75 1c		 jne	 SHORT $LN51@textiowrap@7
  0024a	41 b8 1d 05 00
	00		 mov	 r8d, 1309		; 0000051dH
  00250	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00257	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BPKMBCK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
  0025e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00264	33 c0		 xor	 eax, eax
$LN51@textiowrap@7:
  00266	48 8b 44 24 30	 mov	 rax, QWORD PTR text$[rsp]
  0026b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0026f	48 89 44 24 40	 mov	 QWORD PTR textlen$[rsp], rax

; 1310 : 
; 1311 :     if ((self->writetranslate && self->writenl != NULL) || self->line_buffering)

  00274	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0027c	0f be 80 ac 00
	00 00		 movsx	 eax, BYTE PTR [rax+172]
  00283	85 c0		 test	 eax, eax
  00285	74 12		 je	 SHORT $LN25@textiowrap@7
  00287	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0028f	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00297	75 17		 jne	 SHORT $LN26@textiowrap@7
$LN25@textiowrap@7:
  00299	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002a1	0f be 80 a8 00
	00 00		 movsx	 eax, BYTE PTR [rax+168]
  002a8	85 c0		 test	 eax, eax
  002aa	0f 84 93 00 00
	00		 je	 $LN27@textiowrap@7
$LN26@textiowrap@7:

; 1312 :         if (PyUnicode_FindChar(text, '\n', 0, PyUnicode_GET_LENGTH(text), 1) != -1)

  002b0	48 8b 44 24 30	 mov	 rax, QWORD PTR text$[rsp]
  002b5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002b9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002bf	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002c4	85 c0		 test	 eax, eax
  002c6	75 1c		 jne	 SHORT $LN52@textiowrap@7
  002c8	41 b8 20 05 00
	00		 mov	 r8d, 1312		; 00000520H
  002ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  002d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@MOJLKIMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
  002dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e2	33 c0		 xor	 eax, eax
$LN52@textiowrap@7:
  002e4	48 8b 44 24 30	 mov	 rax, QWORD PTR text$[rsp]
  002e9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002ec	c1 e8 07	 shr	 eax, 7
  002ef	83 e0 01	 and	 eax, 1
  002f2	85 c0		 test	 eax, eax
  002f4	75 1c		 jne	 SHORT $LN53@textiowrap@7
  002f6	41 b8 20 05 00
	00		 mov	 r8d, 1312		; 00000520H
  002fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BPKMBCK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
  0030a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00310	33 c0		 xor	 eax, eax
$LN53@textiowrap@7:
  00312	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0031a	48 8b 44 24 30	 mov	 rax, QWORD PTR text$[rsp]
  0031f	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00323	45 33 c0	 xor	 r8d, r8d
  00326	ba 0a 00 00 00	 mov	 edx, 10
  0032b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR text$[rsp]
  00330	e8 00 00 00 00	 call	 PyUnicode_FindChar
  00335	48 83 f8 ff	 cmp	 rax, -1
  00339	74 08		 je	 SHORT $LN24@textiowrap@7

; 1313 :             haslf = 1;

  0033b	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR haslf$[rsp], 1
$LN24@textiowrap@7:
$LN27@textiowrap@7:

; 1314 : 
; 1315 :     if (haslf && self->writetranslate && self->writenl != NULL) {

  00343	83 7c 24 3c 00	 cmp	 DWORD PTR haslf$[rsp], 0
  00348	0f 84 9a 00 00
	00		 je	 $LN23@textiowrap@7
  0034e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00356	0f be 80 ac 00
	00 00		 movsx	 eax, BYTE PTR [rax+172]
  0035d	85 c0		 test	 eax, eax
  0035f	0f 84 83 00 00
	00		 je	 $LN23@textiowrap@7
  00365	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0036d	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00375	74 71		 je	 SHORT $LN23@textiowrap@7

; 1316 :         PyObject *newtext = _PyObject_CallMethodId(
; 1317 :             text, &PyId_replace, "ss", "\n", self->writenl);

  00377	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_replace
  0037c	8b c0		 mov	 eax, eax
  0037e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00384	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0038d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00391	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00399	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  003a0	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  003a5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  003ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FCBLNKNB@ss?$AA@
  003b3	48 8b d0	 mov	 rdx, rax
  003b6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR text$[rsp]
  003bb	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  003c0	48 89 44 24 68	 mov	 QWORD PTR newtext$22024[rsp], rax

; 1318 :         Py_DECREF(text);

  003c5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR text$[rsp]
  003ca	e8 00 00 00 00	 call	 _Py_DecRef

; 1319 :         if (newtext == NULL)

  003cf	48 83 7c 24 68
	00		 cmp	 QWORD PTR newtext$22024[rsp], 0
  003d5	75 07		 jne	 SHORT $LN22@textiowrap@7

; 1320 :             return NULL;

  003d7	33 c0		 xor	 eax, eax
  003d9	e9 b8 03 00 00	 jmp	 $LN45@textiowrap@7
$LN22@textiowrap@7:

; 1321 :         text = newtext;

  003de	48 8b 44 24 68	 mov	 rax, QWORD PTR newtext$22024[rsp]
  003e3	48 89 44 24 30	 mov	 QWORD PTR text$[rsp], rax
$LN23@textiowrap@7:

; 1322 :     }
; 1323 : 
; 1324 :     if (self->write_through)

  003e8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003f0	0f be 80 a9 00
	00 00		 movsx	 eax, BYTE PTR [rax+169]
  003f7	85 c0		 test	 eax, eax
  003f9	74 0d		 je	 SHORT $LN21@textiowrap@7

; 1325 :         needflush = 1;

  003fb	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR needflush$[rsp], 1

; 1326 :     else if (self->line_buffering &&

  00403	e9 b5 00 00 00	 jmp	 $LN20@textiowrap@7
$LN21@textiowrap@7:

; 1327 :         (haslf ||
; 1328 :          PyUnicode_FindChar(text, '\r', 0, PyUnicode_GET_LENGTH(text), 1) != -1))

  00408	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00410	0f be 80 a8 00
	00 00		 movsx	 eax, BYTE PTR [rax+168]
  00417	85 c0		 test	 eax, eax
  00419	0f 84 9e 00 00
	00		 je	 $LN19@textiowrap@7
  0041f	83 7c 24 3c 00	 cmp	 DWORD PTR haslf$[rsp], 0
  00424	0f 85 8b 00 00
	00		 jne	 $LN18@textiowrap@7
  0042a	48 8b 44 24 30	 mov	 rax, QWORD PTR text$[rsp]
  0042f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00433	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00439	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0043e	85 c0		 test	 eax, eax
  00440	75 1c		 jne	 SHORT $LN54@textiowrap@7
  00442	41 b8 30 05 00
	00		 mov	 r8d, 1328		; 00000530H
  00448	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0044f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@MOJLKIMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
  00456	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0045c	33 c0		 xor	 eax, eax
$LN54@textiowrap@7:
  0045e	48 8b 44 24 30	 mov	 rax, QWORD PTR text$[rsp]
  00463	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00466	c1 e8 07	 shr	 eax, 7
  00469	83 e0 01	 and	 eax, 1
  0046c	85 c0		 test	 eax, eax
  0046e	75 1c		 jne	 SHORT $LN55@textiowrap@7
  00470	41 b8 30 05 00
	00		 mov	 r8d, 1328		; 00000530H
  00476	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0047d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BPKMBCK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
  00484	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0048a	33 c0		 xor	 eax, eax
$LN55@textiowrap@7:
  0048c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00494	48 8b 44 24 30	 mov	 rax, QWORD PTR text$[rsp]
  00499	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  0049d	45 33 c0	 xor	 r8d, r8d
  004a0	ba 0d 00 00 00	 mov	 edx, 13
  004a5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR text$[rsp]
  004aa	e8 00 00 00 00	 call	 PyUnicode_FindChar
  004af	48 83 f8 ff	 cmp	 rax, -1
  004b3	74 08		 je	 SHORT $LN19@textiowrap@7
$LN18@textiowrap@7:

; 1329 :         needflush = 1;

  004b5	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR needflush$[rsp], 1
$LN19@textiowrap@7:
$LN20@textiowrap@7:

; 1330 : 
; 1331 :     /* XXX What if we were just reading? */
; 1332 :     if (self->encodefunc != NULL) {

  004bd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004c5	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  004cd	74 31		 je	 SHORT $LN17@textiowrap@7

; 1333 :         b = (*self->encodefunc)((PyObject *) self, text);

  004cf	48 8b 54 24 30	 mov	 rdx, QWORD PTR text$[rsp]
  004d4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004dc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004e4	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]
  004ea	48 89 44 24 48	 mov	 QWORD PTR b$[rsp], rax

; 1334 :         self->encoding_start_of_stream = 0;

  004ef	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004f7	c6 80 c0 00 00
	00 00		 mov	 BYTE PTR [rax+192], 0

; 1335 :     }
; 1336 :     else

  004fe	eb 28		 jmp	 SHORT $LN16@textiowrap@7
$LN17@textiowrap@7:

; 1337 :         b = PyObject_CallMethodObjArgs(self->encoder,
; 1338 :                                        _PyIO_str_encode, text, NULL);

  00500	45 33 c9	 xor	 r9d, r9d
  00503	4c 8b 44 24 30	 mov	 r8, QWORD PTR text$[rsp]
  00508	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_encode
  0050f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00517	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0051e	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00523	48 89 44 24 48	 mov	 QWORD PTR b$[rsp], rax
$LN16@textiowrap@7:

; 1339 :     Py_DECREF(text);

  00528	48 8b 4c 24 30	 mov	 rcx, QWORD PTR text$[rsp]
  0052d	e8 00 00 00 00	 call	 _Py_DecRef

; 1340 :     if (b == NULL)

  00532	48 83 7c 24 48
	00		 cmp	 QWORD PTR b$[rsp], 0
  00538	75 07		 jne	 SHORT $LN15@textiowrap@7

; 1341 :         return NULL;

  0053a	33 c0		 xor	 eax, eax
  0053c	e9 55 02 00 00	 jmp	 $LN45@textiowrap@7
$LN15@textiowrap@7:

; 1342 : 
; 1343 :     if (self->pending_bytes == NULL) {

  00541	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00549	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  00551	75 4c		 jne	 SHORT $LN14@textiowrap@7

; 1344 :         self->pending_bytes = PyList_New(0);

  00553	33 c9		 xor	 ecx, ecx
  00555	e8 00 00 00 00	 call	 PyList_New
  0055a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00562	48 89 81 d8 00
	00 00		 mov	 QWORD PTR [rcx+216], rax

; 1345 :         if (self->pending_bytes == NULL) {

  00569	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00571	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  00579	75 11		 jne	 SHORT $LN13@textiowrap@7

; 1346 :             Py_DECREF(b);

  0057b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR b$[rsp]
  00580	e8 00 00 00 00	 call	 _Py_DecRef

; 1347 :             return NULL;

  00585	33 c0		 xor	 eax, eax
  00587	e9 0a 02 00 00	 jmp	 $LN45@textiowrap@7
$LN13@textiowrap@7:

; 1348 :         }
; 1349 :         self->pending_bytes_count = 0;

  0058c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00594	48 c7 80 e0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+224], 0
$LN14@textiowrap@7:

; 1350 :     }
; 1351 :     if (PyList_Append(self->pending_bytes, b) < 0) {

  0059f	48 8b 54 24 48	 mov	 rdx, QWORD PTR b$[rsp]
  005a4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005ac	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  005b3	e8 00 00 00 00	 call	 PyList_Append
  005b8	85 c0		 test	 eax, eax
  005ba	7d 11		 jge	 SHORT $LN12@textiowrap@7

; 1352 :         Py_DECREF(b);

  005bc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR b$[rsp]
  005c1	e8 00 00 00 00	 call	 _Py_DecRef

; 1353 :         return NULL;

  005c6	33 c0		 xor	 eax, eax
  005c8	e9 c9 01 00 00	 jmp	 $LN45@textiowrap@7
$LN12@textiowrap@7:

; 1354 :     }
; 1355 :     self->pending_bytes_count += PyBytes_GET_SIZE(b);

  005cd	48 8b 44 24 48	 mov	 rax, QWORD PTR b$[rsp]
  005d2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  005d6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  005dc	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  005e1	85 c0		 test	 eax, eax
  005e3	75 1c		 jne	 SHORT $LN56@textiowrap@7
  005e5	41 b8 4b 05 00
	00		 mov	 r8d, 1355		; 0000054bH
  005eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  005f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DHEDCFGE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  005f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005ff	33 c0		 xor	 eax, eax
$LN56@textiowrap@7:
  00601	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00609	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  00610	48 8b 4c 24 48	 mov	 rcx, QWORD PTR b$[rsp]
  00615	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]
  00619	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00621	48 89 81 e0 00
	00 00		 mov	 QWORD PTR [rcx+224], rax

; 1356 :     Py_DECREF(b);

  00628	48 8b 4c 24 48	 mov	 rcx, QWORD PTR b$[rsp]
  0062d	e8 00 00 00 00	 call	 _Py_DecRef

; 1357 :     if (self->pending_bytes_count > self->chunk_size || needflush) {

  00632	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0063a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00642	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00646	48 39 88 e0 00
	00 00		 cmp	 QWORD PTR [rax+224], rcx
  0064d	7f 07		 jg	 SHORT $LN10@textiowrap@7
  0064f	83 7c 24 38 00	 cmp	 DWORD PTR needflush$[rsp], 0
  00654	74 18		 je	 SHORT $LN11@textiowrap@7
$LN10@textiowrap@7:

; 1358 :         if (_textiowrapper_writeflush(self) < 0)

  00656	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0065e	e8 00 00 00 00	 call	 _textiowrapper_writeflush
  00663	85 c0		 test	 eax, eax
  00665	7d 07		 jge	 SHORT $LN9@textiowrap@7

; 1359 :             return NULL;

  00667	33 c0		 xor	 eax, eax
  00669	e9 28 01 00 00	 jmp	 $LN45@textiowrap@7
$LN9@textiowrap@7:
$LN11@textiowrap@7:

; 1360 :     }
; 1361 : 
; 1362 :     if (needflush) {

  0066e	83 7c 24 38 00	 cmp	 DWORD PTR needflush$[rsp], 0
  00673	74 39		 je	 SHORT $LN8@textiowrap@7

; 1363 :         ret = PyObject_CallMethodObjArgs(self->buffer, _PyIO_str_flush, NULL);

  00675	45 33 c0	 xor	 r8d, r8d
  00678	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  0067f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00687	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0068b	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00690	48 89 44 24 50	 mov	 QWORD PTR ret$[rsp], rax

; 1364 :         if (ret == NULL)

  00695	48 83 7c 24 50
	00		 cmp	 QWORD PTR ret$[rsp], 0
  0069b	75 07		 jne	 SHORT $LN7@textiowrap@7

; 1365 :             return NULL;

  0069d	33 c0		 xor	 eax, eax
  0069f	e9 f2 00 00 00	 jmp	 $LN45@textiowrap@7
$LN7@textiowrap@7:

; 1366 :         Py_DECREF(ret);

  006a4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ret$[rsp]
  006a9	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@textiowrap@7:
$LN6@textiowrap@7:

; 1367 :     }
; 1368 : 
; 1369 :     Py_CLEAR(self->snapshot);

  006ae	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  006b6	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  006be	74 65		 je	 SHORT $LN3@textiowrap@7
  006c0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006c8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  006d0	4c 8b 88 e8 00
	00 00		 mov	 r9, QWORD PTR [rax+232]
  006d7	41 b8 59 05 00
	00		 mov	 r8d, 1369		; 00000559H
  006dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  006e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@EEOJJAGF@textiowrapper_write?$AA@
  006eb	e8 00 00 00 00	 call	 _PyParallel_Guard
  006f0	85 c0		 test	 eax, eax
  006f2	75 31		 jne	 SHORT $LN3@textiowrap@7
  006f4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  006fc	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  00703	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$22076[rsp], rax
  00708	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00710	48 c7 80 e8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+232], 0
  0071b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$22076[rsp]
  00720	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@textiowrap@7:
  00725	33 c0		 xor	 eax, eax
  00727	85 c0		 test	 eax, eax
  00729	75 83		 jne	 SHORT $LN6@textiowrap@7

; 1370 : 
; 1371 :     if (self->decoder) {

  0072b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00733	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0073b	74 4f		 je	 SHORT $LN2@textiowrap@7

; 1372 :         ret = _PyObject_CallMethodId(self->decoder, &PyId_reset, NULL);

  0073d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_reset
  00742	8b c0		 mov	 eax, eax
  00744	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0074a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00753	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00757	45 33 c0	 xor	 r8d, r8d
  0075a	48 8b d0	 mov	 rdx, rax
  0075d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00765	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0076c	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00771	48 89 44 24 50	 mov	 QWORD PTR ret$[rsp], rax

; 1373 :         if (ret == NULL)

  00776	48 83 7c 24 50
	00		 cmp	 QWORD PTR ret$[rsp], 0
  0077c	75 04		 jne	 SHORT $LN1@textiowrap@7

; 1374 :             return NULL;

  0077e	33 c0		 xor	 eax, eax
  00780	eb 14		 jmp	 SHORT $LN45@textiowrap@7
$LN1@textiowrap@7:

; 1375 :         Py_DECREF(ret);

  00782	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ret$[rsp]
  00787	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@textiowrap@7:

; 1376 :     }
; 1377 : 
; 1378 :     return PyLong_FromSsize_t(textlen);

  0078c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR textlen$[rsp]
  00791	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN45@textiowrap@7:

; 1379 : }

  00796	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0079d	c3		 ret	 0
textiowrapper_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@FOOILDMI@_textiowrapper_writeflush?$AA@ ; `string'
EXTRN	_PyIO_trap_eintr:PROC
EXTRN	_PyIO_str_write:QWORD
EXTRN	_PyBytes_Join:PROC
EXTRN	_PyIO_empty_bytes:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_textiowrapper_writeflush DD imagerel _textiowrapper_writeflush
	DD	imagerel _textiowrapper_writeflush+336
	DD	imagerel $unwind$_textiowrapper_writeflush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_textiowrapper_writeflush DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BK@FOOILDMI@_textiowrapper_writeflush?$AA@
CONST	SEGMENT
??_C@_0BK@FOOILDMI@_textiowrapper_writeflush?$AA@ DB '_textiowrapper_writ'
	DB	'eflush', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _textiowrapper_writeflush
_TEXT	SEGMENT
pending$ = 48
b$ = 56
ret$ = 64
_py_tmp$21932 = 72
self$ = 96
_textiowrapper_writeflush PROC				; COMDAT

; 1256 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1257 :     PyObject *pending, *b, *ret;
; 1258 : 
; 1259 :     if (self->pending_bytes == NULL)

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  00016	75 07		 jne	 SHORT $LN11@textiowrap@8

; 1260 :         return 0;

  00018	33 c0		 xor	 eax, eax
  0001a	e9 2c 01 00 00	 jmp	 $LN12@textiowrap@8
$LN11@textiowrap@8:

; 1261 : 
; 1262 :     pending = self->pending_bytes;

  0001f	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  0002b	48 89 44 24 30	 mov	 QWORD PTR pending$[rsp], rax

; 1263 :     Py_INCREF(pending);

  00030	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pending$[rsp]
  00035	e8 00 00 00 00	 call	 _Py_IncRef

; 1264 :     self->pending_bytes_count = 0;

  0003a	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0003f	48 c7 80 e0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+224], 0
$LN10@textiowrap@8:

; 1265 :     Py_CLEAR(self->pending_bytes);

  0004a	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0004f	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  00057	74 5c		 je	 SHORT $LN7@textiowrap@8
  00059	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00061	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00066	4c 8b 88 d8 00
	00 00		 mov	 r9, QWORD PTR [rax+216]
  0006d	41 b8 f1 04 00
	00		 mov	 r8d, 1265		; 000004f1H
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@FOOILDMI@_textiowrapper_writeflush?$AA@
  00081	e8 00 00 00 00	 call	 _PyParallel_Guard
  00086	85 c0		 test	 eax, eax
  00088	75 2b		 jne	 SHORT $LN7@textiowrap@8
  0008a	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0008f	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00096	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$21932[rsp], rax
  0009b	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000a0	48 c7 80 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+216], 0
  000ab	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$21932[rsp]
  000b0	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@textiowrap@8:
  000b5	33 c0		 xor	 eax, eax
  000b7	85 c0		 test	 eax, eax
  000b9	75 8f		 jne	 SHORT $LN10@textiowrap@8

; 1266 : 
; 1267 :     b = _PyBytes_Join(_PyIO_empty_bytes, pending);

  000bb	48 8b 54 24 30	 mov	 rdx, QWORD PTR pending$[rsp]
  000c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyIO_empty_bytes
  000c7	e8 00 00 00 00	 call	 _PyBytes_Join
  000cc	48 89 44 24 38	 mov	 QWORD PTR b$[rsp], rax

; 1268 :     Py_DECREF(pending);

  000d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pending$[rsp]
  000d6	e8 00 00 00 00	 call	 _Py_DecRef

; 1269 :     if (b == NULL)

  000db	48 83 7c 24 38
	00		 cmp	 QWORD PTR b$[rsp], 0
  000e1	75 07		 jne	 SHORT $LN6@textiowrap@8

; 1270 :         return -1;

  000e3	b8 ff ff ff ff	 mov	 eax, -1
  000e8	eb 61		 jmp	 SHORT $LN12@textiowrap@8
$LN6@textiowrap@8:

; 1271 :     ret = NULL;

  000ea	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR ret$[rsp], 0
$LN5@textiowrap@8:

; 1272 :     do {
; 1273 :         ret = PyObject_CallMethodObjArgs(self->buffer,
; 1274 :                                          _PyIO_str_write, b, NULL);

  000f3	45 33 c9	 xor	 r9d, r9d
  000f6	4c 8b 44 24 38	 mov	 r8, QWORD PTR b$[rsp]
  000fb	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_write
  00102	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00107	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0010b	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00110	48 89 44 24 40	 mov	 QWORD PTR ret$[rsp], rax

; 1275 :     } while (ret == NULL && _PyIO_trap_eintr());

  00115	48 83 7c 24 40
	00		 cmp	 QWORD PTR ret$[rsp], 0
  0011b	75 09		 jne	 SHORT $LN2@textiowrap@8
  0011d	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  00122	85 c0		 test	 eax, eax
  00124	75 cd		 jne	 SHORT $LN5@textiowrap@8
$LN2@textiowrap@8:

; 1276 :     Py_DECREF(b);

  00126	48 8b 4c 24 38	 mov	 rcx, QWORD PTR b$[rsp]
  0012b	e8 00 00 00 00	 call	 _Py_DecRef

; 1277 :     if (ret == NULL)

  00130	48 83 7c 24 40
	00		 cmp	 QWORD PTR ret$[rsp], 0
  00136	75 07		 jne	 SHORT $LN1@textiowrap@8

; 1278 :         return -1;

  00138	b8 ff ff ff ff	 mov	 eax, -1
  0013d	eb 0c		 jmp	 SHORT $LN12@textiowrap@8
$LN1@textiowrap@8:

; 1279 :     Py_DECREF(ret);

  0013f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ret$[rsp]
  00144	e8 00 00 00 00	 call	 _Py_DecRef

; 1280 :     return 0;

  00149	33 c0		 xor	 eax, eax
$LN12@textiowrap@8:

; 1281 : }

  0014b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0014f	c3		 ret	 0
_textiowrapper_writeflush ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DG@CHIDEPLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BD@JBJKCAAE@textiowrapper_read?$AA@	; `string'
PUBLIC	??_C@_0N@MLDODNAJ@not?5readable?$AA@		; `string'
PUBLIC	??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@		; `string'
EXTRN	PyUnicode_Join:PROC
EXTRN	_PyIO_empty_str:QWORD
EXTRN	PyUnicode_AppendAndDel:PROC
EXTRN	_PyIO_ConvertSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_read DD imagerel textiowrapper_read
	DD	imagerel textiowrapper_read+1910
	DD	imagerel $unwind$textiowrapper_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_read DD 021101H
	DD	0150111H
xdata	ENDS
;	COMDAT ??_C@_1DG@CHIDEPLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@CHIDEPLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H
	DB	'l', 00H, 't', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JBJKCAAE@textiowrapper_read?$AA@
CONST	SEGMENT
??_C@_0BD@JBJKCAAE@textiowrapper_read?$AA@ DB 'textiowrapper_read', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MLDODNAJ@not?5readable?$AA@
CONST	SEGMENT
??_C@_0N@MLDODNAJ@not?5readable?$AA@ DB 'not readable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@
CONST	SEGMENT
??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@ DB '|O&:read', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_read
_TEXT	SEGMENT
n$ = 48
chunks$ = 56
result$ = 64
_res$22250 = 72
r$22249 = 80
decoded$22278 = 88
bytes$22276 = 96
_py_tmp$22300 = 104
res$22305 = 112
remaining$22306 = 120
_py_tmp$22353 = 128
_py_tmp$22363 = 136
tv212 = 144
self$ = 176
args$ = 184
textiowrapper_read PROC					; COMDAT

; 1545 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1546 :     Py_ssize_t n = -1;

  00011	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR n$[rsp], -1

; 1547 :     PyObject *result = NULL, *chunks = NULL;

  0001a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  00023	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR chunks$[rsp], 0

; 1548 : 
; 1549 :     CHECK_INITIALIZED(self);

  0002c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00034	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00038	7f 3d		 jg	 SHORT $LN59@textiowrap@9
  0003a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00042	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00046	74 15		 je	 SHORT $LN58@textiowrap@9
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0004f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00056	e8 00 00 00 00	 call	 PyErr_SetString
  0005b	eb 13		 jmp	 SHORT $LN57@textiowrap@9
$LN58@textiowrap@9:
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0006b	e8 00 00 00 00	 call	 PyErr_SetString
$LN57@textiowrap@9:
  00070	33 c0		 xor	 eax, eax
  00072	e9 f7 06 00 00	 jmp	 $LN60@textiowrap@9
$LN59@textiowrap@9:

; 1550 : 
; 1551 :     if (!PyArg_ParseTuple(args, "|O&:read", &_PyIO_ConvertSsize_t, &n))

  00077	4c 8d 4c 24 30	 lea	 r9, QWORD PTR n$[rsp]
  0007c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyIO_ConvertSsize_t
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@
  0008a	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00092	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00097	85 c0		 test	 eax, eax
  00099	75 07		 jne	 SHORT $LN56@textiowrap@9

; 1552 :         return NULL;

  0009b	33 c0		 xor	 eax, eax
  0009d	e9 cc 06 00 00	 jmp	 $LN60@textiowrap@9
$LN56@textiowrap@9:
$LN55@textiowrap@9:

; 1553 : 
; 1554 :     CHECK_CLOSED(self);

  000a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTextIOWrapper_Type
  000a9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000b1	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000b5	0f 85 98 00 00
	00		 jne	 $LN52@textiowrap@9
  000bb	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000c3	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  000cb	74 1a		 je	 SHORT $LN51@textiowrap@9
  000cd	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000d5	48 8b 88 f8 00
	00 00		 mov	 rcx, QWORD PTR [rax+248]
  000dc	e8 00 00 00 00	 call	 _PyFileIO_closed
  000e1	89 44 24 50	 mov	 DWORD PTR r$22249[rsp], eax
  000e5	eb 49		 jmp	 SHORT $LN50@textiowrap@9
$LN51@textiowrap@9:
  000e7	33 d2		 xor	 edx, edx
  000e9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000f1	e8 00 00 00 00	 call	 textiowrapper_closed_get
  000f6	48 89 44 24 48	 mov	 QWORD PTR _res$22250[rsp], rax
  000fb	48 83 7c 24 48
	00		 cmp	 QWORD PTR _res$22250[rsp], 0
  00101	75 07		 jne	 SHORT $LN49@textiowrap@9
  00103	33 c0		 xor	 eax, eax
  00105	e9 64 06 00 00	 jmp	 $LN60@textiowrap@9
$LN49@textiowrap@9:
  0010a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _res$22250[rsp]
  0010f	e8 00 00 00 00	 call	 PyObject_IsTrue
  00114	89 44 24 50	 mov	 DWORD PTR r$22249[rsp], eax
  00118	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _res$22250[rsp]
  0011d	e8 00 00 00 00	 call	 _Py_DecRef
  00122	83 7c 24 50 00	 cmp	 DWORD PTR r$22249[rsp], 0
  00127	7d 07		 jge	 SHORT $LN48@textiowrap@9
  00129	33 c0		 xor	 eax, eax
  0012b	e9 3e 06 00 00	 jmp	 $LN60@textiowrap@9
$LN48@textiowrap@9:
$LN50@textiowrap@9:
  00130	83 7c 24 50 00	 cmp	 DWORD PTR r$22249[rsp], 0
  00135	7e 1a		 jle	 SHORT $LN47@textiowrap@9
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
  0013e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00145	e8 00 00 00 00	 call	 PyErr_SetString
  0014a	33 c0		 xor	 eax, eax
  0014c	e9 1d 06 00 00	 jmp	 $LN60@textiowrap@9
$LN47@textiowrap@9:
  00151	eb 20		 jmp	 SHORT $LN46@textiowrap@9
$LN52@textiowrap@9:
  00153	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  0015a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00162	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  00167	48 85 c0	 test	 rax, rax
  0016a	75 07		 jne	 SHORT $LN45@textiowrap@9
  0016c	33 c0		 xor	 eax, eax
  0016e	e9 fb 05 00 00	 jmp	 $LN60@textiowrap@9
$LN45@textiowrap@9:
$LN46@textiowrap@9:
  00173	33 c0		 xor	 eax, eax
  00175	85 c0		 test	 eax, eax
  00177	0f 85 25 ff ff
	ff		 jne	 $LN55@textiowrap@9

; 1555 : 
; 1556 :     if (self->decoder == NULL)

  0017d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00185	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0018d	75 11		 jne	 SHORT $LN44@textiowrap@9

; 1557 :         return _unsupported("not readable");

  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MLDODNAJ@not?5readable?$AA@
  00196	e8 00 00 00 00	 call	 _unsupported
  0019b	e9 ce 05 00 00	 jmp	 $LN60@textiowrap@9
$LN44@textiowrap@9:

; 1558 : 
; 1559 :     if (_textiowrapper_writeflush(self) < 0)

  001a0	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001a8	e8 00 00 00 00	 call	 _textiowrapper_writeflush
  001ad	85 c0		 test	 eax, eax
  001af	7d 07		 jge	 SHORT $LN43@textiowrap@9

; 1560 :         return NULL;

  001b1	33 c0		 xor	 eax, eax
  001b3	e9 b6 05 00 00	 jmp	 $LN60@textiowrap@9
$LN43@textiowrap@9:

; 1561 : 
; 1562 :     if (n < 0) {

  001b8	48 83 7c 24 30
	00		 cmp	 QWORD PTR n$[rsp], 0
  001be	0f 8d b1 01 00
	00		 jge	 $LN42@textiowrap@9

; 1563 :         /* Read everything */
; 1564 :         PyObject *bytes = _PyObject_CallMethodId(self->buffer, &PyId_read, NULL);

  001c4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_read
  001c9	8b c0		 mov	 eax, eax
  001cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001d1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001da	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001de	45 33 c0	 xor	 r8d, r8d
  001e1	48 8b d0	 mov	 rdx, rax
  001e4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ec	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  001f0	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  001f5	48 89 44 24 60	 mov	 QWORD PTR bytes$22276[rsp], rax

; 1565 :         PyObject *decoded;
; 1566 :         if (bytes == NULL)

  001fa	48 83 7c 24 60
	00		 cmp	 QWORD PTR bytes$22276[rsp], 0
  00200	75 05		 jne	 SHORT $LN41@textiowrap@9

; 1567 :             goto fail;

  00202	e9 35 05 00 00	 jmp	 $fail$22281
$LN41@textiowrap@9:

; 1568 : 
; 1569 :         if (Py_TYPE(self->decoder) == &PyIncrementalNewlineDecoder_Type)

  00207	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0020f	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyIncrementalNewlineDecoder_Type
  0021d	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00221	75 26		 jne	 SHORT $LN40@textiowrap@9

; 1570 :             decoded = _PyIncrementalNewlineDecoder_decode(self->decoder,
; 1571 :                                                           bytes, 1);

  00223	41 b8 01 00 00
	00		 mov	 r8d, 1
  00229	48 8b 54 24 60	 mov	 rdx, QWORD PTR bytes$22276[rsp]
  0022e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00236	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0023d	e8 00 00 00 00	 call	 _PyIncrementalNewlineDecoder_decode
  00242	48 89 44 24 58	 mov	 QWORD PTR decoded$22278[rsp], rax

; 1572 :         else

  00247	eb 35		 jmp	 SHORT $LN39@textiowrap@9
$LN40@textiowrap@9:

; 1573 :             decoded = PyObject_CallMethodObjArgs(
; 1574 :                 self->decoder, _PyIO_str_decode, bytes, Py_True, NULL);

  00249	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00252	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_Py_TrueStruct
  00259	4c 8b 44 24 60	 mov	 r8, QWORD PTR bytes$22276[rsp]
  0025e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_decode
  00265	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0026d	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00274	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00279	48 89 44 24 58	 mov	 QWORD PTR decoded$22278[rsp], rax
$LN39@textiowrap@9:

; 1575 :         Py_DECREF(bytes);

  0027e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR bytes$22276[rsp]
  00283	e8 00 00 00 00	 call	 _Py_DecRef

; 1576 :         if (check_decoded(decoded) < 0)

  00288	48 8b 4c 24 58	 mov	 rcx, QWORD PTR decoded$22278[rsp]
  0028d	e8 00 00 00 00	 call	 check_decoded
  00292	85 c0		 test	 eax, eax
  00294	7d 05		 jge	 SHORT $LN38@textiowrap@9

; 1577 :             goto fail;

  00296	e9 a1 04 00 00	 jmp	 $fail$22281
$LN38@textiowrap@9:

; 1578 : 
; 1579 :         result = textiowrapper_get_decoded_chars(self, -1);

  0029b	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  002a2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002aa	e8 00 00 00 00	 call	 textiowrapper_get_decoded_chars
  002af	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 1580 : 
; 1581 :         if (result == NULL) {

  002b4	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  002ba	75 11		 jne	 SHORT $LN37@textiowrap@9

; 1582 :             Py_DECREF(decoded);

  002bc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR decoded$22278[rsp]
  002c1	e8 00 00 00 00	 call	 _Py_DecRef

; 1583 :             return NULL;

  002c6	33 c0		 xor	 eax, eax
  002c8	e9 a1 04 00 00	 jmp	 $LN60@textiowrap@9
$LN37@textiowrap@9:

; 1584 :         }
; 1585 : 
; 1586 :         PyUnicode_AppendAndDel(&result, decoded);

  002cd	48 8b 54 24 58	 mov	 rdx, QWORD PTR decoded$22278[rsp]
  002d2	48 8d 4c 24 40	 lea	 rcx, QWORD PTR result$[rsp]
  002d7	e8 00 00 00 00	 call	 PyUnicode_AppendAndDel

; 1587 :         if (result == NULL)

  002dc	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  002e2	75 05		 jne	 SHORT $LN36@textiowrap@9

; 1588 :             goto fail;

  002e4	e9 53 04 00 00	 jmp	 $fail$22281
$LN36@textiowrap@9:
$LN35@textiowrap@9:

; 1589 : 
; 1590 :         Py_CLEAR(self->snapshot);

  002e9	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002f1	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  002f9	74 65		 je	 SHORT $LN32@textiowrap@9
  002fb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00303	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0030b	4c 8b 88 e8 00
	00 00		 mov	 r9, QWORD PTR [rax+232]
  00312	41 b8 36 06 00
	00		 mov	 r8d, 1590		; 00000636H
  00318	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0031f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@JBJKCAAE@textiowrapper_read?$AA@
  00326	e8 00 00 00 00	 call	 _PyParallel_Guard
  0032b	85 c0		 test	 eax, eax
  0032d	75 31		 jne	 SHORT $LN32@textiowrap@9
  0032f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00337	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  0033e	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$22300[rsp], rax
  00343	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0034b	48 c7 80 e8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+232], 0
  00356	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$22300[rsp]
  0035b	e8 00 00 00 00	 call	 _Py_DecRef
$LN32@textiowrap@9:
  00360	33 c0		 xor	 eax, eax
  00362	85 c0		 test	 eax, eax
  00364	75 83		 jne	 SHORT $LN35@textiowrap@9

; 1591 :         return result;

  00366	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  0036b	e9 fe 03 00 00	 jmp	 $LN60@textiowrap@9

; 1592 :     }
; 1593 :     else {

  00370	e9 c7 03 00 00	 jmp	 $LN31@textiowrap@9
$LN42@textiowrap@9:

; 1594 :         int res = 1;

  00375	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR res$22305[rsp], 1

; 1595 :         Py_ssize_t remaining = n;

  0037d	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00382	48 89 44 24 78	 mov	 QWORD PTR remaining$22306[rsp], rax

; 1596 : 
; 1597 :         result = textiowrapper_get_decoded_chars(self, n);

  00387	48 8b 54 24 30	 mov	 rdx, QWORD PTR n$[rsp]
  0038c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00394	e8 00 00 00 00	 call	 textiowrapper_get_decoded_chars
  00399	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 1598 :         if (result == NULL)

  0039e	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  003a4	75 05		 jne	 SHORT $LN30@textiowrap@9

; 1599 :             goto fail;

  003a6	e9 91 03 00 00	 jmp	 $fail$22281
$LN30@textiowrap@9:

; 1600 :         if (PyUnicode_READY(result) == -1)

  003ab	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  003b0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003b4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003ba	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003bf	85 c0		 test	 eax, eax
  003c1	75 1c		 jne	 SHORT $LN62@textiowrap@9
  003c3	41 b8 40 06 00
	00		 mov	 r8d, 1600		; 00000640H
  003c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  003d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  003d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003dd	33 c0		 xor	 eax, eax
$LN62@textiowrap@9:
  003df	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  003e4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003e7	c1 e8 07	 shr	 eax, 7
  003ea	83 e0 01	 and	 eax, 1
  003ed	85 c0		 test	 eax, eax
  003ef	74 0d		 je	 SHORT $LN63@textiowrap@9
  003f1	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv212[rsp], 0
  003fc	eb 11		 jmp	 SHORT $LN64@textiowrap@9
$LN63@textiowrap@9:
  003fe	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  00403	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00408	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv212[rsp], eax
$LN64@textiowrap@9:
  0040f	83 bc 24 90 00
	00 00 ff	 cmp	 DWORD PTR tv212[rsp], -1
  00417	75 05		 jne	 SHORT $LN29@textiowrap@9

; 1601 :             goto fail;

  00419	e9 1e 03 00 00	 jmp	 $fail$22281
$LN29@textiowrap@9:

; 1602 :         remaining -= PyUnicode_GET_LENGTH(result);

  0041e	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00423	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00427	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0042d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00432	85 c0		 test	 eax, eax
  00434	75 1c		 jne	 SHORT $LN65@textiowrap@9
  00436	41 b8 42 06 00
	00		 mov	 r8d, 1602		; 00000642H
  0043c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00443	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  0044a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00450	33 c0		 xor	 eax, eax
$LN65@textiowrap@9:
  00452	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00457	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0045a	c1 e8 07	 shr	 eax, 7
  0045d	83 e0 01	 and	 eax, 1
  00460	85 c0		 test	 eax, eax
  00462	75 1c		 jne	 SHORT $LN66@textiowrap@9
  00464	41 b8 42 06 00
	00		 mov	 r8d, 1602		; 00000642H
  0046a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00471	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@CHIDEPLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  00478	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0047e	33 c0		 xor	 eax, eax
$LN66@textiowrap@9:
  00480	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00485	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00489	48 8b 4c 24 78	 mov	 rcx, QWORD PTR remaining$22306[rsp]
  0048e	48 2b c8	 sub	 rcx, rax
  00491	48 8b c1	 mov	 rax, rcx
  00494	48 89 44 24 78	 mov	 QWORD PTR remaining$22306[rsp], rax
$LN71@textiowrap@9:
$LN28@textiowrap@9:

; 1603 : 
; 1604 :         /* Keep reading chunks until we have n characters to return */
; 1605 :         while (remaining > 0) {

  00499	48 83 7c 24 78
	00		 cmp	 QWORD PTR remaining$22306[rsp], 0
  0049f	0f 8e 8e 01 00
	00		 jle	 $LN27@textiowrap@9

; 1606 :             res = textiowrapper_read_chunk(self, remaining);

  004a5	48 8b 54 24 78	 mov	 rdx, QWORD PTR remaining$22306[rsp]
  004aa	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004b2	e8 00 00 00 00	 call	 textiowrapper_read_chunk
  004b7	89 44 24 70	 mov	 DWORD PTR res$22305[rsp], eax

; 1607 :             if (res < 0) {

  004bb	83 7c 24 70 00	 cmp	 DWORD PTR res$22305[rsp], 0
  004c0	7d 10		 jge	 SHORT $LN26@textiowrap@9

; 1608 :                 /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals()
; 1609 :                    when EINTR occurs so we needn't do it ourselves. */
; 1610 :                 if (_PyIO_trap_eintr()) {

  004c2	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  004c7	85 c0		 test	 eax, eax
  004c9	74 02		 je	 SHORT $LN25@textiowrap@9

; 1611 :                     continue;

  004cb	eb cc		 jmp	 SHORT $LN28@textiowrap@9
$LN25@textiowrap@9:

; 1612 :                 }
; 1613 :                 goto fail;

  004cd	e9 6a 02 00 00	 jmp	 $fail$22281
$LN26@textiowrap@9:

; 1614 :             }
; 1615 :             if (res == 0)  /* EOF */

  004d2	83 7c 24 70 00	 cmp	 DWORD PTR res$22305[rsp], 0
  004d7	75 05		 jne	 SHORT $LN24@textiowrap@9

; 1616 :                 break;

  004d9	e9 55 01 00 00	 jmp	 $LN27@textiowrap@9
$LN24@textiowrap@9:

; 1617 :             if (chunks == NULL) {

  004de	48 83 7c 24 38
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  004e4	75 19		 jne	 SHORT $LN23@textiowrap@9

; 1618 :                 chunks = PyList_New(0);

  004e6	33 c9		 xor	 ecx, ecx
  004e8	e8 00 00 00 00	 call	 PyList_New
  004ed	48 89 44 24 38	 mov	 QWORD PTR chunks$[rsp], rax

; 1619 :                 if (chunks == NULL)

  004f2	48 83 7c 24 38
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  004f8	75 05		 jne	 SHORT $LN22@textiowrap@9

; 1620 :                     goto fail;

  004fa	e9 3d 02 00 00	 jmp	 $fail$22281
$LN22@textiowrap@9:
$LN23@textiowrap@9:

; 1621 :             }
; 1622 :             if (PyUnicode_GET_LENGTH(result) > 0 &&
; 1623 :                 PyList_Append(chunks, result) < 0)

  004ff	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00504	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00508	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0050e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00513	85 c0		 test	 eax, eax
  00515	75 1c		 jne	 SHORT $LN67@textiowrap@9
  00517	41 b8 56 06 00
	00		 mov	 r8d, 1622		; 00000656H
  0051d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00524	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  0052b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00531	33 c0		 xor	 eax, eax
$LN67@textiowrap@9:
  00533	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00538	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0053b	c1 e8 07	 shr	 eax, 7
  0053e	83 e0 01	 and	 eax, 1
  00541	85 c0		 test	 eax, eax
  00543	75 1c		 jne	 SHORT $LN68@textiowrap@9
  00545	41 b8 56 06 00
	00		 mov	 r8d, 1622		; 00000656H
  0054b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00552	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@CHIDEPLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  00559	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0055f	33 c0		 xor	 eax, eax
$LN68@textiowrap@9:
  00561	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00566	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0056b	7e 18		 jle	 SHORT $LN21@textiowrap@9
  0056d	48 8b 54 24 40	 mov	 rdx, QWORD PTR result$[rsp]
  00572	48 8b 4c 24 38	 mov	 rcx, QWORD PTR chunks$[rsp]
  00577	e8 00 00 00 00	 call	 PyList_Append
  0057c	85 c0		 test	 eax, eax
  0057e	7d 05		 jge	 SHORT $LN21@textiowrap@9

; 1624 :                 goto fail;

  00580	e9 b7 01 00 00	 jmp	 $fail$22281
$LN21@textiowrap@9:

; 1625 :             Py_DECREF(result);

  00585	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  0058a	e8 00 00 00 00	 call	 _Py_DecRef

; 1626 :             result = textiowrapper_get_decoded_chars(self, remaining);

  0058f	48 8b 54 24 78	 mov	 rdx, QWORD PTR remaining$22306[rsp]
  00594	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0059c	e8 00 00 00 00	 call	 textiowrapper_get_decoded_chars
  005a1	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 1627 :             if (result == NULL)

  005a6	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  005ac	75 05		 jne	 SHORT $LN20@textiowrap@9

; 1628 :                 goto fail;

  005ae	e9 89 01 00 00	 jmp	 $fail$22281
$LN20@textiowrap@9:

; 1629 :             remaining -= PyUnicode_GET_LENGTH(result);

  005b3	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  005b8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  005bc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  005c2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  005c7	85 c0		 test	 eax, eax
  005c9	75 1c		 jne	 SHORT $LN69@textiowrap@9
  005cb	41 b8 5d 06 00
	00		 mov	 r8d, 1629		; 0000065dH
  005d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  005d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@LMMPDEGI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  005df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005e5	33 c0		 xor	 eax, eax
$LN69@textiowrap@9:
  005e7	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  005ec	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005ef	c1 e8 07	 shr	 eax, 7
  005f2	83 e0 01	 and	 eax, 1
  005f5	85 c0		 test	 eax, eax
  005f7	75 1c		 jne	 SHORT $LN70@textiowrap@9
  005f9	41 b8 5d 06 00
	00		 mov	 r8d, 1629		; 0000065dH
  005ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00606	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@CHIDEPLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  0060d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00613	33 c0		 xor	 eax, eax
$LN70@textiowrap@9:
  00615	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  0061a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0061e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR remaining$22306[rsp]
  00623	48 2b c8	 sub	 rcx, rax
  00626	48 8b c1	 mov	 rax, rcx
  00629	48 89 44 24 78	 mov	 QWORD PTR remaining$22306[rsp], rax

; 1630 :         }

  0062e	e9 66 fe ff ff	 jmp	 $LN71@textiowrap@9
$LN27@textiowrap@9:

; 1631 :         if (chunks != NULL) {

  00633	48 83 7c 24 38
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00639	0f 84 f6 00 00
	00		 je	 $LN19@textiowrap@9

; 1632 :             if (result != NULL && PyList_Append(chunks, result) < 0)

  0063f	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  00645	74 18		 je	 SHORT $LN18@textiowrap@9
  00647	48 8b 54 24 40	 mov	 rdx, QWORD PTR result$[rsp]
  0064c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR chunks$[rsp]
  00651	e8 00 00 00 00	 call	 PyList_Append
  00656	85 c0		 test	 eax, eax
  00658	7d 05		 jge	 SHORT $LN18@textiowrap@9

; 1633 :                 goto fail;

  0065a	e9 dd 00 00 00	 jmp	 $fail$22281
$LN18@textiowrap@9:
$LN17@textiowrap@9:

; 1634 :             Py_CLEAR(result);

  0065f	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  00665	74 4d		 je	 SHORT $LN14@textiowrap@9
  00667	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0066f	4c 8b 4c 24 40	 mov	 r9, QWORD PTR result$[rsp]
  00674	41 b8 62 06 00
	00		 mov	 r8d, 1634		; 00000662H
  0067a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00681	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@JBJKCAAE@textiowrapper_read?$AA@
  00688	e8 00 00 00 00	 call	 _PyParallel_Guard
  0068d	85 c0		 test	 eax, eax
  0068f	75 23		 jne	 SHORT $LN14@textiowrap@9
  00691	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00696	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _py_tmp$22353[rsp], rax
  0069e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  006a7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22353[rsp]
  006af	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@textiowrap@9:
  006b4	33 c0		 xor	 eax, eax
  006b6	85 c0		 test	 eax, eax
  006b8	75 a5		 jne	 SHORT $LN17@textiowrap@9

; 1635 :             result = PyUnicode_Join(_PyIO_empty_str, chunks);

  006ba	48 8b 54 24 38	 mov	 rdx, QWORD PTR chunks$[rsp]
  006bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyIO_empty_str
  006c6	e8 00 00 00 00	 call	 PyUnicode_Join
  006cb	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 1636 :             if (result == NULL)

  006d0	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  006d6	75 02		 jne	 SHORT $LN13@textiowrap@9

; 1637 :                 goto fail;

  006d8	eb 62		 jmp	 SHORT $fail$22281
$LN13@textiowrap@9:
$LN12@textiowrap@9:

; 1638 :             Py_CLEAR(chunks);

  006da	48 83 7c 24 38
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  006e0	74 4d		 je	 SHORT $LN9@textiowrap@9
  006e2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006ea	4c 8b 4c 24 38	 mov	 r9, QWORD PTR chunks$[rsp]
  006ef	41 b8 66 06 00
	00		 mov	 r8d, 1638		; 00000666H
  006f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  006fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@JBJKCAAE@textiowrapper_read?$AA@
  00703	e8 00 00 00 00	 call	 _PyParallel_Guard
  00708	85 c0		 test	 eax, eax
  0070a	75 23		 jne	 SHORT $LN9@textiowrap@9
  0070c	48 8b 44 24 38	 mov	 rax, QWORD PTR chunks$[rsp]
  00711	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _py_tmp$22363[rsp], rax
  00719	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR chunks$[rsp], 0
  00722	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22363[rsp]
  0072a	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@textiowrap@9:
  0072f	33 c0		 xor	 eax, eax
  00731	85 c0		 test	 eax, eax
  00733	75 a5		 jne	 SHORT $LN12@textiowrap@9
$LN19@textiowrap@9:

; 1639 :         }
; 1640 :         return result;

  00735	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  0073a	eb 32		 jmp	 SHORT $LN60@textiowrap@9
$LN31@textiowrap@9:
$fail$22281:
$LN8@textiowrap@9:

; 1641 :     }
; 1642 :   fail:
; 1643 :     Py_XDECREF(result);

  0073c	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  00742	74 0a		 je	 SHORT $LN5@textiowrap@9
  00744	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  00749	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@textiowrap@9:
  0074e	33 c0		 xor	 eax, eax
  00750	85 c0		 test	 eax, eax
  00752	75 e8		 jne	 SHORT $LN8@textiowrap@9
$LN4@textiowrap@9:

; 1644 :     Py_XDECREF(chunks);

  00754	48 83 7c 24 38
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  0075a	74 0a		 je	 SHORT $LN1@textiowrap@9
  0075c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR chunks$[rsp]
  00761	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap@9:
  00766	33 c0		 xor	 eax, eax
  00768	85 c0		 test	 eax, eax
  0076a	75 e8		 jne	 SHORT $LN4@textiowrap@9

; 1645 :     return NULL;

  0076c	33 c0		 xor	 eax, eax
$LN60@textiowrap@9:

; 1646 : }

  0076e	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00775	c3		 ret	 0
textiowrapper_read ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BG@IEABGMJC@?$AAa?$AAv?$AAa?$AAi?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FA@KLNJLDAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd@ ; `string'
PUBLIC	??_C@_1EK@HMGIGAED@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh@ ; `string'
EXTRN	PyUnicode_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_get_decoded_chars DD imagerel textiowrapper_get_decoded_chars
	DD	imagerel textiowrapper_get_decoded_chars+418
	DD	imagerel $unwind$textiowrapper_get_decoded_chars
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_get_decoded_chars DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1BG@IEABGMJC@?$AAa?$AAv?$AAa?$AAi?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@IEABGMJC@?$AAa?$AAv?$AAa?$AAi?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'a'
	DB	00H, 'v', 00H, 'a', 00H, 'i', 00H, 'l', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@KLNJLDAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd@
CONST	SEGMENT
??_C@_1FA@KLNJLDAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 's', 00H
	DB	'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'd', 00H, 'e'
	DB	00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'd', 00H, '_', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 's', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@HMGIGAED@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh@
CONST	SEGMENT
??_C@_1EK@HMGIGAED@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H
	DB	'-', 00H, '>', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, 'd', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, 's', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_get_decoded_chars
_TEXT	SEGMENT
chars$ = 32
avail$ = 40
self$ = 64
n$ = 72
textiowrapper_get_decoded_chars PROC			; COMDAT

; 1393 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1394 :     PyObject *chars;
; 1395 :     Py_ssize_t avail;
; 1396 : 
; 1397 :     if (self->decoded_chars == NULL)

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  0001b	75 0e		 jne	 SHORT $LN7@textiowrap@10

; 1398 :         return PyUnicode_FromStringAndSize(NULL, 0);

  0001d	33 d2		 xor	 edx, edx
  0001f	33 c9		 xor	 ecx, ecx
  00021	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  00026	e9 72 01 00 00	 jmp	 $LN8@textiowrap@10
$LN7@textiowrap@10:

; 1399 : 
; 1400 :     /* decoded_chars is guaranteed to be "ready". */
; 1401 :     avail = (PyUnicode_GET_LENGTH(self->decoded_chars)
; 1402 :              - self->decoded_chars_used);

  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00030	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00037	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00041	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00046	85 c0		 test	 eax, eax
  00048	75 1c		 jne	 SHORT $LN10@textiowrap@10
  0004a	41 b8 79 05 00
	00		 mov	 r8d, 1401		; 00000579H
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@HMGIGAED@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00064	33 c0		 xor	 eax, eax
$LN10@textiowrap@10:
  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0006b	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00072	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00075	c1 e8 07	 shr	 eax, 7
  00078	83 e0 01	 and	 eax, 1
  0007b	85 c0		 test	 eax, eax
  0007d	75 1c		 jne	 SHORT $LN11@textiowrap@10
  0007f	41 b8 79 05 00
	00		 mov	 r8d, 1401		; 00000579H
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FA@KLNJLDAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd@
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00099	33 c0		 xor	 eax, eax
$LN11@textiowrap@10:
  0009b	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000a0	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  000a7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000ac	48 8b 89 d0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+208]
  000b3	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000b7	48 2b c1	 sub	 rax, rcx
  000ba	48 89 44 24 28	 mov	 QWORD PTR avail$[rsp], rax

; 1403 : 
; 1404 :     assert(avail >= 0);

  000bf	48 83 7c 24 28
	00		 cmp	 QWORD PTR avail$[rsp], 0
  000c5	7d 1c		 jge	 SHORT $LN12@textiowrap@10
  000c7	41 b8 7c 05 00
	00		 mov	 r8d, 1404		; 0000057cH
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BG@IEABGMJC@?$AAa?$AAv?$AAa?$AAi?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e1	33 c0		 xor	 eax, eax
$LN12@textiowrap@10:

; 1405 : 
; 1406 :     if (n < 0 || n > avail)

  000e3	48 83 7c 24 48
	00		 cmp	 QWORD PTR n$[rsp], 0
  000e9	7c 0c		 jl	 SHORT $LN5@textiowrap@10
  000eb	48 8b 44 24 28	 mov	 rax, QWORD PTR avail$[rsp]
  000f0	48 39 44 24 48	 cmp	 QWORD PTR n$[rsp], rax
  000f5	7e 0a		 jle	 SHORT $LN6@textiowrap@10
$LN5@textiowrap@10:

; 1407 :         n = avail;

  000f7	48 8b 44 24 28	 mov	 rax, QWORD PTR avail$[rsp]
  000fc	48 89 44 24 48	 mov	 QWORD PTR n$[rsp], rax
$LN6@textiowrap@10:

; 1408 : 
; 1409 :     if (self->decoded_chars_used > 0 || n < avail) {

  00101	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00106	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  0010e	7f 0c		 jg	 SHORT $LN3@textiowrap@10
  00110	48 8b 44 24 28	 mov	 rax, QWORD PTR avail$[rsp]
  00115	48 39 44 24 48	 cmp	 QWORD PTR n$[rsp], rax
  0011a	7d 44		 jge	 SHORT $LN4@textiowrap@10
$LN3@textiowrap@10:

; 1410 :         chars = PyUnicode_Substring(self->decoded_chars,
; 1411 :                                     self->decoded_chars_used,
; 1412 :                                     self->decoded_chars_used + n);

  0011c	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00121	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00128	48 03 44 24 48	 add	 rax, QWORD PTR n$[rsp]
  0012d	4c 8b c0	 mov	 r8, rax
  00130	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00135	48 8b 90 d0 00
	00 00		 mov	 rdx, QWORD PTR [rax+208]
  0013c	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00141	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  00148	e8 00 00 00 00	 call	 PyUnicode_Substring
  0014d	48 89 44 24 20	 mov	 QWORD PTR chars$[rsp], rax

; 1413 :         if (chars == NULL)

  00152	48 83 7c 24 20
	00		 cmp	 QWORD PTR chars$[rsp], 0
  00158	75 04		 jne	 SHORT $LN2@textiowrap@10

; 1414 :             return NULL;

  0015a	33 c0		 xor	 eax, eax
  0015c	eb 3f		 jmp	 SHORT $LN8@textiowrap@10
$LN2@textiowrap@10:

; 1415 :     }
; 1416 :     else {

  0015e	eb 1b		 jmp	 SHORT $LN1@textiowrap@10
$LN4@textiowrap@10:

; 1417 :         chars = self->decoded_chars;

  00160	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00165	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0016c	48 89 44 24 20	 mov	 QWORD PTR chars$[rsp], rax

; 1418 :         Py_INCREF(chars);

  00171	48 8b 4c 24 20	 mov	 rcx, QWORD PTR chars$[rsp]
  00176	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@textiowrap@10:

; 1419 :     }
; 1420 : 
; 1421 :     self->decoded_chars_used += n;

  0017b	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00180	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00187	48 03 44 24 48	 add	 rax, QWORD PTR n$[rsp]
  0018c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00191	48 89 81 d0 00
	00 00		 mov	 QWORD PTR [rcx+208], rax

; 1422 :     return chars;

  00198	48 8b 44 24 20	 mov	 rax, QWORD PTR chars$[rsp]
$LN8@textiowrap@10:

; 1423 : }

  0019d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001a1	c3		 ret	 0
textiowrapper_get_decoded_chars ENDP
_TEXT	ENDS
PUBLIC	??_C@_02BEEAOEKM@NN?$AA@			; `string'
PUBLIC	??_C@_0BJ@BOGCGCNL@textiowrapper_read_chunk?$AA@ ; `string'
PUBLIC	??_C@_0EF@NDBFALAO@decoder?5getstate?$CI?$CJ?5should?5have?5r@ ; `string'
PUBLIC	??_C@_1EE@KBCANOCN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs@ ; `string'
PUBLIC	??_C@_1DO@EFANGPIP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0EC@ENMPEBFB@underlying?5?$CFs?$CI?$CJ?5should?5have?5retu@ ; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@		; `string'
EXTRN	PyNumber_Add:PROC
EXTRN	PyBytes_Size:PROC
EXTRN	_PyIO_str_read:QWORD
EXTRN	_PyIO_str_read1:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_read_chunk DD imagerel textiowrapper_read_chunk
	DD	imagerel textiowrapper_read_chunk+1586
	DD	imagerel $unwind$textiowrapper_read_chunk
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_read_chunk DD 021101H
	DD	0190111H
xdata	ENDS
;	COMDAT ??_C@_02BEEAOEKM@NN?$AA@
CONST	SEGMENT
??_C@_02BEEAOEKM@NN?$AA@ DB 'NN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BOGCGCNL@textiowrapper_read_chunk?$AA@
CONST	SEGMENT
??_C@_0BJ@BOGCGCNL@textiowrapper_read_chunk?$AA@ DB 'textiowrapper_read_c'
	DB	'hunk', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@NDBFALAO@decoder?5getstate?$CI?$CJ?5should?5have?5r@
CONST	SEGMENT
??_C@_0EF@NDBFALAO@decoder?5getstate?$CI?$CJ?5should?5have?5r@ DB 'decode'
	DB	'r getstate() should have returned a bytes object, not ''%.200'
	DB	's''', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KBCANOCN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs@
CONST	SEGMENT
??_C@_1EE@KBCANOCN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'd', 00H
	DB	'e', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'd', 00H, '_'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 's', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@EFANGPIP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@EFANGPIP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, 'd', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, 's', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@ENMPEBFB@underlying?5?$CFs?$CI?$CJ?5should?5have?5retu@
CONST	SEGMENT
??_C@_0EC@ENMPEBFB@underlying?5?$CFs?$CI?$CJ?5should?5have?5retu@ DB 'und'
	DB	'erlying %s() should have returned a bytes object, not ''%.200'
	DB	's''', 00H					; `string'
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@ DB '(OO)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_read_chunk
_TEXT	SEGMENT
input_chunk$ = 48
dec_flags$ = 56
decoded_chars$ = 64
nbytes$ = 72
eof$ = 80
nchars$ = 88
chunk_size$ = 96
dec_buffer$ = 104
state$22151 = 112
next_input$22193 = 120
_py_tmp$22207 = 128
tv92 = 136
tv133 = 144
tv142 = 152
tv159 = 160
tv165 = 168
tv177 = 176
tv251 = 184
self$ = 208
size_hint$ = 216
textiowrapper_read_chunk PROC				; COMDAT

; 1429 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 1430 :     PyObject *dec_buffer = NULL;

  00011	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR dec_buffer$[rsp], 0

; 1431 :     PyObject *dec_flags = NULL;

  0001a	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR dec_flags$[rsp], 0

; 1432 :     PyObject *input_chunk = NULL;

  00023	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR input_chunk$[rsp], 0

; 1433 :     PyObject *decoded_chars, *chunk_size;
; 1434 :     Py_ssize_t nbytes, nchars;
; 1435 :     int eof;
; 1436 : 
; 1437 :     /* The return value is True unless EOF was reached.  The decoded string is
; 1438 :      * placed in self._decoded_chars (replacing its previous value).  The
; 1439 :      * entire input chunk is sent to the decoder, though some of it may remain
; 1440 :      * buffered in the decoder, yet to be converted.
; 1441 :      */
; 1442 : 
; 1443 :     if (self->decoder == NULL) {

  0002c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00034	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0003c	75 16		 jne	 SHORT $LN33@textiowrap@11

; 1444 :         _unsupported("not readable");

  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MLDODNAJ@not?5readable?$AA@
  00045	e8 00 00 00 00	 call	 _unsupported

; 1445 :         return -1;

  0004a	b8 ff ff ff ff	 mov	 eax, -1
  0004f	e9 d6 05 00 00	 jmp	 $LN34@textiowrap@11
$LN33@textiowrap@11:

; 1446 :     }
; 1447 : 
; 1448 :     if (self->telling) {

  00054	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0005c	0f be 80 af 00
	00 00		 movsx	 eax, BYTE PTR [rax+175]
  00063	85 c0		 test	 eax, eax
  00065	0f 84 86 00 00
	00		 je	 $LN32@textiowrap@11

; 1449 :         /* To prepare for tell(), we need to snapshot a point in the file
; 1450 :          * where the decoder's input buffer is empty.
; 1451 :          */
; 1452 : 
; 1453 :         PyObject *state = PyObject_CallMethodObjArgs(self->decoder,
; 1454 :                                                      _PyIO_str_getstate, NULL);

  0006b	45 33 c0	 xor	 r8d, r8d
  0006e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_getstate
  00075	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0007d	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00084	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00089	48 89 44 24 70	 mov	 QWORD PTR state$22151[rsp], rax

; 1455 :         if (state == NULL)

  0008e	48 83 7c 24 70
	00		 cmp	 QWORD PTR state$22151[rsp], 0
  00094	75 0a		 jne	 SHORT $LN31@textiowrap@11

; 1456 :             return -1;

  00096	b8 ff ff ff ff	 mov	 eax, -1
  0009b	e9 8a 05 00 00	 jmp	 $LN34@textiowrap@11
$LN31@textiowrap@11:

; 1457 :         /* Given this, we know there was a valid snapshot point
; 1458 :          * len(dec_buffer) bytes ago with decoder state (b'', dec_flags).
; 1459 :          */
; 1460 :         if (PyArg_Parse(state, "(OO)", &dec_buffer, &dec_flags) < 0) {

  000a0	4c 8d 4c 24 38	 lea	 r9, QWORD PTR dec_flags$[rsp]
  000a5	4c 8d 44 24 68	 lea	 r8, QWORD PTR dec_buffer$[rsp]
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
  000b1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR state$22151[rsp]
  000b6	e8 00 00 00 00	 call	 _PyArg_Parse_SizeT
  000bb	85 c0		 test	 eax, eax
  000bd	7d 14		 jge	 SHORT $LN30@textiowrap@11

; 1461 :             Py_DECREF(state);

  000bf	48 8b 4c 24 70	 mov	 rcx, QWORD PTR state$22151[rsp]
  000c4	e8 00 00 00 00	 call	 _Py_DecRef

; 1462 :             return -1;

  000c9	b8 ff ff ff ff	 mov	 eax, -1
  000ce	e9 57 05 00 00	 jmp	 $LN34@textiowrap@11
$LN30@textiowrap@11:

; 1463 :         }
; 1464 :         Py_INCREF(dec_buffer);

  000d3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dec_buffer$[rsp]
  000d8	e8 00 00 00 00	 call	 _Py_IncRef

; 1465 :         Py_INCREF(dec_flags);

  000dd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dec_flags$[rsp]
  000e2	e8 00 00 00 00	 call	 _Py_IncRef

; 1466 :         Py_DECREF(state);

  000e7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR state$22151[rsp]
  000ec	e8 00 00 00 00	 call	 _Py_DecRef
$LN32@textiowrap@11:

; 1467 :     }
; 1468 : 
; 1469 :     /* Read a chunk, decode it, and put the result in self._decoded_chars. */
; 1470 :     if (size_hint > 0) {

  000f1	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR size_hint$[rsp], 0
  000fa	7e 72		 jle	 SHORT $LN29@textiowrap@11

; 1471 :         size_hint = (Py_ssize_t)(Py_MAX(self->b2cratio, 1.0) * size_hint);

  000fc	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00104	f2 0f 10 80 f0
	00 00 00	 movsdx	 xmm0, QWORD PTR [rax+240]
  0010c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00114	76 1b		 jbe	 SHORT $LN36@textiowrap@11
  00116	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0011e	f2 0f 10 80 f0
	00 00 00	 movsdx	 xmm0, QWORD PTR [rax+240]
  00126	f2 0f 11 84 24
	88 00 00 00	 movsdx	 QWORD PTR tv92[rsp], xmm0
  0012f	eb 11		 jmp	 SHORT $LN37@textiowrap@11
$LN36@textiowrap@11:
  00131	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00139	f2 0f 11 84 24
	88 00 00 00	 movsdx	 QWORD PTR tv92[rsp], xmm0
$LN37@textiowrap@11:
  00142	66 0f ef c0	 pxor	 xmm0, xmm0
  00146	f2 48 0f 2a 84
	24 d8 00 00 00	 cvtsi2sd xmm0, QWORD PTR size_hint$[rsp]
  00150	f2 0f 10 8c 24
	88 00 00 00	 movsdx	 xmm1, QWORD PTR tv92[rsp]
  00159	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0015d	66 0f 28 c1	 movapd	 xmm0, xmm1
  00161	f2 48 0f 2c c0	 cvttsd2si rax, xmm0
  00166	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR size_hint$[rsp], rax
$LN29@textiowrap@11:

; 1472 :     }
; 1473 :     chunk_size = PyLong_FromSsize_t(Py_MAX(self->chunk_size, size_hint));

  0016e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00176	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR size_hint$[rsp]
  0017e	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  00182	7e 16		 jle	 SHORT $LN38@textiowrap@11
  00184	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0018c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00190	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv133[rsp], rax
  00198	eb 10		 jmp	 SHORT $LN39@textiowrap@11
$LN38@textiowrap@11:
  0019a	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR size_hint$[rsp]
  001a2	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv133[rsp], rax
$LN39@textiowrap@11:
  001aa	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv133[rsp]
  001b2	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  001b7	48 89 44 24 60	 mov	 QWORD PTR chunk_size$[rsp], rax

; 1474 :     if (chunk_size == NULL)

  001bc	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunk_size$[rsp], 0
  001c2	75 05		 jne	 SHORT $LN28@textiowrap@11

; 1475 :         goto fail;

  001c4	e9 14 04 00 00	 jmp	 $fail$22165
$LN28@textiowrap@11:

; 1476 :     input_chunk = PyObject_CallMethodObjArgs(self->buffer,
; 1477 :         (self->has_read1 ? _PyIO_str_read1: _PyIO_str_read),
; 1478 :         chunk_size, NULL);

  001c9	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001d1	0f be 80 ae 00
	00 00		 movsx	 eax, BYTE PTR [rax+174]
  001d8	85 c0		 test	 eax, eax
  001da	74 11		 je	 SHORT $LN40@textiowrap@11
  001dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyIO_str_read1
  001e3	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv142[rsp], rax
  001eb	eb 0f		 jmp	 SHORT $LN41@textiowrap@11
$LN40@textiowrap@11:
  001ed	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyIO_str_read
  001f4	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv142[rsp], rax
$LN41@textiowrap@11:
  001fc	45 33 c9	 xor	 r9d, r9d
  001ff	4c 8b 44 24 60	 mov	 r8, QWORD PTR chunk_size$[rsp]
  00204	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv142[rsp]
  0020c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00214	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00218	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0021d	48 89 44 24 30	 mov	 QWORD PTR input_chunk$[rsp], rax

; 1479 :     Py_DECREF(chunk_size);

  00222	48 8b 4c 24 60	 mov	 rcx, QWORD PTR chunk_size$[rsp]
  00227	e8 00 00 00 00	 call	 _Py_DecRef

; 1480 :     if (input_chunk == NULL)

  0022c	48 83 7c 24 30
	00		 cmp	 QWORD PTR input_chunk$[rsp], 0
  00232	75 05		 jne	 SHORT $LN27@textiowrap@11

; 1481 :         goto fail;

  00234	e9 a4 03 00 00	 jmp	 $fail$22165
$LN27@textiowrap@11:

; 1482 :     if (!PyBytes_Check(input_chunk)) {

  00239	48 8b 44 24 30	 mov	 rax, QWORD PTR input_chunk$[rsp]
  0023e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00242	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00248	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0024d	85 c0		 test	 eax, eax
  0024f	75 60		 jne	 SHORT $LN26@textiowrap@11

; 1483 :         PyErr_Format(PyExc_TypeError,
; 1484 :                      "underlying %s() should have returned a bytes object, "
; 1485 :                      "not '%.200s'", (self->has_read1 ? "read1": "read"),
; 1486 :                      Py_TYPE(input_chunk)->tp_name);

  00251	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00259	0f be 80 ae 00
	00 00		 movsx	 eax, BYTE PTR [rax+174]
  00260	85 c0		 test	 eax, eax
  00262	74 11		 je	 SHORT $LN42@textiowrap@11
  00264	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05FDBMPOID@read1?$AA@
  0026b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv159[rsp], rax
  00273	eb 0f		 jmp	 SHORT $LN43@textiowrap@11
$LN42@textiowrap@11:
  00275	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@
  0027c	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv159[rsp], rax
$LN43@textiowrap@11:
  00284	48 8b 44 24 30	 mov	 rax, QWORD PTR input_chunk$[rsp]
  00289	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0028d	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00291	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR tv159[rsp]
  00299	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EC@ENMPEBFB@underlying?5?$CFs?$CI?$CJ?5should?5have?5retu@
  002a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  002a7	e8 00 00 00 00	 call	 PyErr_Format

; 1487 :         goto fail;

  002ac	e9 2c 03 00 00	 jmp	 $fail$22165
$LN26@textiowrap@11:

; 1488 :     }
; 1489 : 
; 1490 :     nbytes = PyBytes_Size(input_chunk);

  002b1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR input_chunk$[rsp]
  002b6	e8 00 00 00 00	 call	 PyBytes_Size
  002bb	48 89 44 24 48	 mov	 QWORD PTR nbytes$[rsp], rax

; 1491 :     eof = (nbytes == 0);

  002c0	48 83 7c 24 48
	00		 cmp	 QWORD PTR nbytes$[rsp], 0
  002c6	75 0d		 jne	 SHORT $LN44@textiowrap@11
  002c8	c7 84 24 a8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv165[rsp], 1
  002d3	eb 0b		 jmp	 SHORT $LN45@textiowrap@11
$LN44@textiowrap@11:
  002d5	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv165[rsp], 0
$LN45@textiowrap@11:
  002e0	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv165[rsp]
  002e7	89 44 24 50	 mov	 DWORD PTR eof$[rsp], eax

; 1492 : 
; 1493 :     if (Py_TYPE(self->decoder) == &PyIncrementalNewlineDecoder_Type) {

  002eb	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002f3	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  002fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyIncrementalNewlineDecoder_Type
  00301	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00305	75 25		 jne	 SHORT $LN25@textiowrap@11

; 1494 :         decoded_chars = _PyIncrementalNewlineDecoder_decode(
; 1495 :             self->decoder, input_chunk, eof);

  00307	44 8b 44 24 50	 mov	 r8d, DWORD PTR eof$[rsp]
  0030c	48 8b 54 24 30	 mov	 rdx, QWORD PTR input_chunk$[rsp]
  00311	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00319	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00320	e8 00 00 00 00	 call	 _PyIncrementalNewlineDecoder_decode
  00325	48 89 44 24 40	 mov	 QWORD PTR decoded_chars$[rsp], rax

; 1496 :     }
; 1497 :     else {

  0032a	eb 5d		 jmp	 SHORT $LN24@textiowrap@11
$LN25@textiowrap@11:

; 1498 :         decoded_chars = PyObject_CallMethodObjArgs(self->decoder,
; 1499 :             _PyIO_str_decode, input_chunk, eof ? Py_True : Py_False, NULL);

  0032c	83 7c 24 50 00	 cmp	 DWORD PTR eof$[rsp], 0
  00331	74 11		 je	 SHORT $LN46@textiowrap@11
  00333	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0033a	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv177[rsp], rax
  00342	eb 0f		 jmp	 SHORT $LN47@textiowrap@11
$LN46@textiowrap@11:
  00344	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0034b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv177[rsp], rax
$LN47@textiowrap@11:
  00353	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0035c	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR tv177[rsp]
  00364	4c 8b 44 24 30	 mov	 r8, QWORD PTR input_chunk$[rsp]
  00369	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_decode
  00370	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00378	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0037f	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00384	48 89 44 24 40	 mov	 QWORD PTR decoded_chars$[rsp], rax
$LN24@textiowrap@11:

; 1500 :     }
; 1501 : 
; 1502 :     if (check_decoded(decoded_chars) < 0)

  00389	48 8b 4c 24 40	 mov	 rcx, QWORD PTR decoded_chars$[rsp]
  0038e	e8 00 00 00 00	 call	 check_decoded
  00393	85 c0		 test	 eax, eax
  00395	7d 05		 jge	 SHORT $LN23@textiowrap@11

; 1503 :         goto fail;

  00397	e9 41 02 00 00	 jmp	 $fail$22165
$LN23@textiowrap@11:

; 1504 :     textiowrapper_set_decoded_chars(self, decoded_chars);

  0039c	48 8b 54 24 40	 mov	 rdx, QWORD PTR decoded_chars$[rsp]
  003a1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  003a9	e8 00 00 00 00	 call	 textiowrapper_set_decoded_chars

; 1505 :     nchars = PyUnicode_GET_LENGTH(decoded_chars);

  003ae	48 8b 44 24 40	 mov	 rax, QWORD PTR decoded_chars$[rsp]
  003b3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003b7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003bd	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003c2	85 c0		 test	 eax, eax
  003c4	75 1c		 jne	 SHORT $LN48@textiowrap@11
  003c6	41 b8 e1 05 00
	00		 mov	 r8d, 1505		; 000005e1H
  003cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  003d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@EFANGPIP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  003da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003e0	33 c0		 xor	 eax, eax
$LN48@textiowrap@11:
  003e2	48 8b 44 24 40	 mov	 rax, QWORD PTR decoded_chars$[rsp]
  003e7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003ea	c1 e8 07	 shr	 eax, 7
  003ed	83 e0 01	 and	 eax, 1
  003f0	85 c0		 test	 eax, eax
  003f2	75 1c		 jne	 SHORT $LN49@textiowrap@11
  003f4	41 b8 e1 05 00
	00		 mov	 r8d, 1505		; 000005e1H
  003fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00401	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@KBCANOCN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs@
  00408	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0040e	33 c0		 xor	 eax, eax
$LN49@textiowrap@11:
  00410	48 8b 44 24 40	 mov	 rax, QWORD PTR decoded_chars$[rsp]
  00415	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00419	48 89 44 24 58	 mov	 QWORD PTR nchars$[rsp], rax

; 1506 :     if (nchars > 0)

  0041e	48 83 7c 24 58
	00		 cmp	 QWORD PTR nchars$[rsp], 0
  00424	7e 2c		 jle	 SHORT $LN22@textiowrap@11

; 1507 :         self->b2cratio = (double) nbytes / nchars;

  00426	66 0f ef c0	 pxor	 xmm0, xmm0
  0042a	f2 48 0f 2a 44
	24 48		 cvtsi2sd xmm0, QWORD PTR nbytes$[rsp]
  00431	66 0f ef c9	 pxor	 xmm1, xmm1
  00435	f2 48 0f 2a 4c
	24 58		 cvtsi2sd xmm1, QWORD PTR nchars$[rsp]
  0043c	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00440	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00448	f2 0f 11 80 f0
	00 00 00	 movsdx	 QWORD PTR [rax+240], xmm0

; 1508 :     else

  00450	eb 14		 jmp	 SHORT $LN21@textiowrap@11
$LN22@textiowrap@11:

; 1509 :         self->b2cratio = 0.0;

  00452	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0045a	66 0f 57 c0	 xorpd	 xmm0, xmm0
  0045e	f2 0f 11 80 f0
	00 00 00	 movsdx	 QWORD PTR [rax+240], xmm0
$LN21@textiowrap@11:

; 1510 :     if (nchars > 0)

  00466	48 83 7c 24 58
	00		 cmp	 QWORD PTR nchars$[rsp], 0
  0046c	7e 08		 jle	 SHORT $LN20@textiowrap@11

; 1511 :         eof = 0;

  0046e	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR eof$[rsp], 0
$LN20@textiowrap@11:

; 1512 : 
; 1513 :     if (self->telling) {

  00476	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0047e	0f be 80 af 00
	00 00		 movsx	 eax, BYTE PTR [rax+175]
  00485	85 c0		 test	 eax, eax
  00487	0f 84 1e 01 00
	00		 je	 $LN19@textiowrap@11

; 1514 :         /* At the snapshot point, len(dec_buffer) bytes before the read, the
; 1515 :          * next input to be decoded is dec_buffer + input_chunk.
; 1516 :          */
; 1517 :         PyObject *next_input = PyNumber_Add(dec_buffer, input_chunk);

  0048d	48 8b 54 24 30	 mov	 rdx, QWORD PTR input_chunk$[rsp]
  00492	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dec_buffer$[rsp]
  00497	e8 00 00 00 00	 call	 PyNumber_Add
  0049c	48 89 44 24 78	 mov	 QWORD PTR next_input$22193[rsp], rax

; 1518 :         if (next_input == NULL)

  004a1	48 83 7c 24 78
	00		 cmp	 QWORD PTR next_input$22193[rsp], 0
  004a7	75 05		 jne	 SHORT $LN18@textiowrap@11

; 1519 :             goto fail;

  004a9	e9 2f 01 00 00	 jmp	 $fail$22165
$LN18@textiowrap@11:

; 1520 :         if (!PyBytes_Check(next_input)) {

  004ae	48 8b 44 24 78	 mov	 rax, QWORD PTR next_input$22193[rsp]
  004b3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004b7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004bd	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  004c2	85 c0		 test	 eax, eax
  004c4	75 2f		 jne	 SHORT $LN17@textiowrap@11

; 1521 :             PyErr_Format(PyExc_TypeError,
; 1522 :                          "decoder getstate() should have returned a bytes "
; 1523 :                          "object, not '%.200s'",
; 1524 :                          Py_TYPE(next_input)->tp_name);

  004c6	48 8b 44 24 78	 mov	 rax, QWORD PTR next_input$22193[rsp]
  004cb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004cf	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  004d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EF@NDBFALAO@decoder?5getstate?$CI?$CJ?5should?5have?5r@
  004da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  004e1	e8 00 00 00 00	 call	 PyErr_Format

; 1525 :             Py_DECREF(next_input);

  004e6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR next_input$22193[rsp]
  004eb	e8 00 00 00 00	 call	 _Py_DecRef

; 1526 :             goto fail;

  004f0	e9 e8 00 00 00	 jmp	 $fail$22165
$LN17@textiowrap@11:

; 1527 :         }
; 1528 :         Py_DECREF(dec_buffer);

  004f5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dec_buffer$[rsp]
  004fa	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@textiowrap@11:

; 1529 :         Py_CLEAR(self->snapshot);

  004ff	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00507	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  0050f	74 6b		 je	 SHORT $LN13@textiowrap@11
  00511	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00519	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00521	4c 8b 88 e8 00
	00 00		 mov	 r9, QWORD PTR [rax+232]
  00528	41 b8 f9 05 00
	00		 mov	 r8d, 1529		; 000005f9H
  0052e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00535	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BOGCGCNL@textiowrapper_read_chunk?$AA@
  0053c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00541	85 c0		 test	 eax, eax
  00543	75 37		 jne	 SHORT $LN13@textiowrap@11
  00545	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0054d	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  00554	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _py_tmp$22207[rsp], rax
  0055c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00564	48 c7 80 e8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+232], 0
  0056f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22207[rsp]
  00577	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@textiowrap@11:
  0057c	33 c0		 xor	 eax, eax
  0057e	85 c0		 test	 eax, eax
  00580	0f 85 79 ff ff
	ff		 jne	 $LN16@textiowrap@11

; 1530 :         self->snapshot = Py_BuildValue("NN", dec_flags, next_input);

  00586	4c 8b 44 24 78	 mov	 r8, QWORD PTR next_input$22193[rsp]
  0058b	48 8b 54 24 38	 mov	 rdx, QWORD PTR dec_flags$[rsp]
  00590	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02BEEAOEKM@NN?$AA@
  00597	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  0059c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  005a4	48 89 81 e8 00
	00 00		 mov	 QWORD PTR [rcx+232], rax
$LN19@textiowrap@11:

; 1531 :     }
; 1532 :     Py_DECREF(input_chunk);

  005ab	48 8b 4c 24 30	 mov	 rcx, QWORD PTR input_chunk$[rsp]
  005b0	e8 00 00 00 00	 call	 _Py_DecRef

; 1533 : 
; 1534 :     return (eof == 0);

  005b5	83 7c 24 50 00	 cmp	 DWORD PTR eof$[rsp], 0
  005ba	75 0d		 jne	 SHORT $LN50@textiowrap@11
  005bc	c7 84 24 b8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv251[rsp], 1
  005c7	eb 0b		 jmp	 SHORT $LN51@textiowrap@11
$LN50@textiowrap@11:
  005c9	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv251[rsp], 0
$LN51@textiowrap@11:
  005d4	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv251[rsp]
  005db	eb 4d		 jmp	 SHORT $LN34@textiowrap@11
$fail$22165:
$LN12@textiowrap@11:

; 1535 : 
; 1536 :   fail:
; 1537 :     Py_XDECREF(dec_buffer);

  005dd	48 83 7c 24 68
	00		 cmp	 QWORD PTR dec_buffer$[rsp], 0
  005e3	74 0a		 je	 SHORT $LN9@textiowrap@11
  005e5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dec_buffer$[rsp]
  005ea	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@textiowrap@11:
  005ef	33 c0		 xor	 eax, eax
  005f1	85 c0		 test	 eax, eax
  005f3	75 e8		 jne	 SHORT $LN12@textiowrap@11
$LN8@textiowrap@11:

; 1538 :     Py_XDECREF(dec_flags);

  005f5	48 83 7c 24 38
	00		 cmp	 QWORD PTR dec_flags$[rsp], 0
  005fb	74 0a		 je	 SHORT $LN5@textiowrap@11
  005fd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dec_flags$[rsp]
  00602	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@textiowrap@11:
  00607	33 c0		 xor	 eax, eax
  00609	85 c0		 test	 eax, eax
  0060b	75 e8		 jne	 SHORT $LN8@textiowrap@11
$LN4@textiowrap@11:

; 1539 :     Py_XDECREF(input_chunk);

  0060d	48 83 7c 24 30
	00		 cmp	 QWORD PTR input_chunk$[rsp], 0
  00613	74 0a		 je	 SHORT $LN1@textiowrap@11
  00615	48 8b 4c 24 30	 mov	 rcx, QWORD PTR input_chunk$[rsp]
  0061a	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap@11:
  0061f	33 c0		 xor	 eax, eax
  00621	85 c0		 test	 eax, eax
  00623	75 e8		 jne	 SHORT $LN4@textiowrap@11

; 1540 :     return -1;

  00625	b8 ff ff ff ff	 mov	 eax, -1
$LN34@textiowrap@11:

; 1541 : }

  0062a	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00631	c3		 ret	 0
textiowrapper_read_chunk ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@OHAAMLN@textiowrapper_set_decoded_chars?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_set_decoded_chars DD imagerel textiowrapper_set_decoded_chars
	DD	imagerel textiowrapper_set_decoded_chars+165
	DD	imagerel $unwind$textiowrapper_set_decoded_chars
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_set_decoded_chars DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CA@OHAAMLN@textiowrapper_set_decoded_chars?$AA@
CONST	SEGMENT
??_C@_0CA@OHAAMLN@textiowrapper_set_decoded_chars?$AA@ DB 'textiowrapper_'
	DB	'set_decoded_chars', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_set_decoded_chars
_TEXT	SEGMENT
_py_tmp$22097 = 48
self$ = 80
chars$ = 88
textiowrapper_set_decoded_chars PROC			; COMDAT

; 1385 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@textiowrap@12:

; 1386 :     Py_CLEAR(self->decoded_chars);

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  0001b	74 5c		 je	 SHORT $LN1@textiowrap@12
  0001d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00025	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0002a	4c 8b 88 c8 00
	00 00		 mov	 r9, QWORD PTR [rax+200]
  00031	41 b8 6a 05 00
	00		 mov	 r8d, 1386		; 0000056aH
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@OHAAMLN@textiowrapper_set_decoded_chars?$AA@
  00045	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004a	85 c0		 test	 eax, eax
  0004c	75 2b		 jne	 SHORT $LN1@textiowrap@12
  0004e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00053	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0005a	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$22097[rsp], rax
  0005f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00064	48 c7 80 c8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+200], 0
  0006f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$22097[rsp]
  00074	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap@12:
  00079	33 c0		 xor	 eax, eax
  0007b	85 c0		 test	 eax, eax
  0007d	75 8f		 jne	 SHORT $LN4@textiowrap@12

; 1387 :     self->decoded_chars = chars;

  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00084	48 8b 4c 24 58	 mov	 rcx, QWORD PTR chars$[rsp]
  00089	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx

; 1388 :     self->decoded_chars_used = 0;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00095	48 c7 80 d0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+208], 0

; 1389 : }

  000a0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a4	c3		 ret	 0
textiowrapper_set_decoded_chars ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FO@EOPEBOJH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc@ ; `string'
PUBLIC	??_C@_1EO@ILECGMDC@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@ ; `string'
PUBLIC	??_C@_1DG@KCGMFBIM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@DJCACKFG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	_PyIO_find_line_ending
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIO_find_line_ending DD imagerel $LN62
	DD	imagerel $LN62+2041
	DD	imagerel $unwind$_PyIO_find_line_ending
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIO_find_line_ending DD 021901H
	DD	0170119H
xdata	ENDS
;	COMDAT ??_C@_1FO@EOPEBOJH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc@
CONST	SEGMENT
??_C@_1FO@EOPEBOJH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'K', 00H, 'I', 00H, 'N', 00H, 'D'
	DB	00H, '(', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'n', 00H
	DB	'l', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, '1', 00H, 'B', 00H, 'Y', 00H, 'T'
	DB	00H, 'E', 00H, '_', 00H, 'K', 00H, 'I', 00H, 'N', 00H, 'D', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@ILECGMDC@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
CONST	SEGMENT
??_C@_1EO@ILECGMDC@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'n', 00H, 'l', 00H, ')'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@KCGMFBIM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@KCGMFBIM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 'd', 00H, 'n', 00H, 'l', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@DJCACKFG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@DJCACKFG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'n', 00H, 'l', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyIO_find_line_ending
_TEXT	SEGMENT
len$ = 32
pos$22430 = 40
s$22436 = 48
ch$22440 = 56
readnl_len$22462 = 64
nl$22470 = 72
pos$22495 = 80
s$22499 = 88
e$22500 = 96
pos$22501 = 104
i$22506 = 112
pos$22507 = 120
tv84 = 128
tv83 = 132
tv94 = 136
tv93 = 140
tv139 = 144
tv138 = 148
tv198 = 152
tv207 = 160
tv270 = 168
tv269 = 172
translated$ = 192
universal$ = 200
readnl$ = 208
kind$ = 216
start$ = 224
end$ = 232
consumed$ = 240
_PyIO_find_line_ending PROC				; COMDAT

; 1674 : {

$LN62:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1675 :     Py_ssize_t len = ((char*)end - (char*)start)/kind;

  00019	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00021	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  00029	48 2b c8	 sub	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR kind$[rsp]
  00037	48 99		 cdq
  00039	48 f7 f9	 idiv	 rcx
  0003c	48 89 44 24 20	 mov	 QWORD PTR len$[rsp], rax

; 1676 : 
; 1677 :     if (translated) {

  00041	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR translated$[rsp], 0
  00049	74 7a		 je	 SHORT $LN30@PyIO_find_

; 1678 :         /* Newlines are already translated, only search for \n */
; 1679 :         char *pos = find_control_char(kind, start, end, '\n');

  0004b	41 b9 0a 00 00
	00		 mov	 r9d, 10
  00051	4c 8b 84 24 e8
	00 00 00	 mov	 r8, QWORD PTR end$[rsp]
  00059	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR start$[rsp]
  00061	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR kind$[rsp]
  00068	e8 00 00 00 00	 call	 find_control_char
  0006d	48 89 44 24 28	 mov	 QWORD PTR pos$22430[rsp], rax

; 1680 :         if (pos != NULL)

  00072	48 83 7c 24 28
	00		 cmp	 QWORD PTR pos$22430[rsp], 0
  00078	74 2a		 je	 SHORT $LN29@PyIO_find_

; 1681 :             return (pos - start)/kind + 1;

  0007a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00082	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pos$22430[rsp]
  00087	48 2b c8	 sub	 rcx, rax
  0008a	48 8b c1	 mov	 rax, rcx
  0008d	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR kind$[rsp]
  00095	48 99		 cdq
  00097	48 f7 f9	 idiv	 rcx
  0009a	48 ff c0	 inc	 rax
  0009d	e9 4f 07 00 00	 jmp	 $LN31@PyIO_find_

; 1682 :         else {

  000a2	eb 1c		 jmp	 SHORT $LN28@PyIO_find_
$LN29@PyIO_find_:

; 1683 :             *consumed = len;

  000a4	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR consumed$[rsp]
  000ac	48 8b 4c 24 20	 mov	 rcx, QWORD PTR len$[rsp]
  000b1	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1684 :             return -1;

  000b4	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  000bb	e9 31 07 00 00	 jmp	 $LN31@PyIO_find_
$LN28@PyIO_find_:

; 1685 :         }

  000c0	e9 2c 07 00 00	 jmp	 $LN27@PyIO_find_
$LN30@PyIO_find_:

; 1686 :     }
; 1687 :     else if (universal) {

  000c5	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR universal$[rsp], 0
  000cd	0f 84 0f 02 00
	00		 je	 $LN26@PyIO_find_

; 1688 :         /* Universal newline search. Find any of \r, \r\n, \n
; 1689 :          * The decoder ensures that \r\n are not split in two pieces
; 1690 :          */
; 1691 :         char *s = start;

  000d3	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  000db	48 89 44 24 30	 mov	 QWORD PTR s$22436[rsp], rax
$LN25@PyIO_find_:
$LN23@PyIO_find_:

; 1692 :         for (;;) {
; 1693 :             Py_UCS4 ch;
; 1694 :             /* Fast path for non-control chars. The loop always ends
; 1695 :                since the Unicode string is NUL-terminated. */
; 1696 :             while (PyUnicode_READ(kind, s, 0) > '\r')

  000e0	83 bc 24 d8 00
	00 00 01	 cmp	 DWORD PTR kind$[rsp], 1
  000e8	75 11		 jne	 SHORT $LN35@PyIO_find_
  000ea	48 8b 44 24 30	 mov	 rax, QWORD PTR s$22436[rsp]
  000ef	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000f2	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv84[rsp], eax
  000f9	eb 37		 jmp	 SHORT $LN36@PyIO_find_
$LN35@PyIO_find_:
  000fb	83 bc 24 d8 00
	00 00 02	 cmp	 DWORD PTR kind$[rsp], 2
  00103	75 11		 jne	 SHORT $LN33@PyIO_find_
  00105	48 8b 44 24 30	 mov	 rax, QWORD PTR s$22436[rsp]
  0010a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0010d	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv83[rsp], eax
  00114	eb 0e		 jmp	 SHORT $LN34@PyIO_find_
$LN33@PyIO_find_:
  00116	48 8b 44 24 30	 mov	 rax, QWORD PTR s$22436[rsp]
  0011b	8b 00		 mov	 eax, DWORD PTR [rax]
  0011d	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv83[rsp], eax
$LN34@PyIO_find_:
  00124	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv83[rsp]
  0012b	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv84[rsp], eax
$LN36@PyIO_find_:
  00132	83 bc 24 80 00
	00 00 0d	 cmp	 DWORD PTR tv84[rsp], 13
  0013a	76 1a		 jbe	 SHORT $LN22@PyIO_find_

; 1697 :                 s += kind;

  0013c	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR kind$[rsp]
  00144	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22436[rsp]
  00149	48 03 c8	 add	 rcx, rax
  0014c	48 8b c1	 mov	 rax, rcx
  0014f	48 89 44 24 30	 mov	 QWORD PTR s$22436[rsp], rax
  00154	eb 8a		 jmp	 SHORT $LN23@PyIO_find_
$LN22@PyIO_find_:

; 1698 :             if (s >= end) {

  00156	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR end$[rsp]
  0015e	48 39 44 24 30	 cmp	 QWORD PTR s$22436[rsp], rax
  00163	72 1c		 jb	 SHORT $LN21@PyIO_find_

; 1699 :                 *consumed = len;

  00165	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR consumed$[rsp]
  0016d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR len$[rsp]
  00172	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1700 :                 return -1;

  00175	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0017c	e9 70 06 00 00	 jmp	 $LN31@PyIO_find_
$LN21@PyIO_find_:

; 1701 :             }
; 1702 :             ch = PyUnicode_READ(kind, s, 0);

  00181	83 bc 24 d8 00
	00 00 01	 cmp	 DWORD PTR kind$[rsp], 1
  00189	75 11		 jne	 SHORT $LN39@PyIO_find_
  0018b	48 8b 44 24 30	 mov	 rax, QWORD PTR s$22436[rsp]
  00190	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00193	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv94[rsp], eax
  0019a	eb 37		 jmp	 SHORT $LN40@PyIO_find_
$LN39@PyIO_find_:
  0019c	83 bc 24 d8 00
	00 00 02	 cmp	 DWORD PTR kind$[rsp], 2
  001a4	75 11		 jne	 SHORT $LN37@PyIO_find_
  001a6	48 8b 44 24 30	 mov	 rax, QWORD PTR s$22436[rsp]
  001ab	0f b7 00	 movzx	 eax, WORD PTR [rax]
  001ae	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv93[rsp], eax
  001b5	eb 0e		 jmp	 SHORT $LN38@PyIO_find_
$LN37@PyIO_find_:
  001b7	48 8b 44 24 30	 mov	 rax, QWORD PTR s$22436[rsp]
  001bc	8b 00		 mov	 eax, DWORD PTR [rax]
  001be	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv93[rsp], eax
$LN38@PyIO_find_:
  001c5	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv93[rsp]
  001cc	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv94[rsp], eax
$LN40@PyIO_find_:
  001d3	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv94[rsp]
  001da	89 44 24 38	 mov	 DWORD PTR ch$22440[rsp], eax

; 1703 :             s += kind;

  001de	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR kind$[rsp]
  001e6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22436[rsp]
  001eb	48 03 c8	 add	 rcx, rax
  001ee	48 8b c1	 mov	 rax, rcx
  001f1	48 89 44 24 30	 mov	 QWORD PTR s$22436[rsp], rax

; 1704 :             if (ch == '\n')

  001f6	83 7c 24 38 0a	 cmp	 DWORD PTR ch$22440[rsp], 10
  001fb	75 25		 jne	 SHORT $LN20@PyIO_find_

; 1705 :                 return (s - start)/kind;

  001fd	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00205	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22436[rsp]
  0020a	48 2b c8	 sub	 rcx, rax
  0020d	48 8b c1	 mov	 rax, rcx
  00210	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR kind$[rsp]
  00218	48 99		 cdq
  0021a	48 f7 f9	 idiv	 rcx
  0021d	e9 cf 05 00 00	 jmp	 $LN31@PyIO_find_
$LN20@PyIO_find_:

; 1706 :             if (ch == '\r') {

  00222	83 7c 24 38 0d	 cmp	 DWORD PTR ch$22440[rsp], 13
  00227	0f 85 ab 00 00
	00		 jne	 $LN19@PyIO_find_

; 1707 :                 if (PyUnicode_READ(kind, s, 0) == '\n')

  0022d	83 bc 24 d8 00
	00 00 01	 cmp	 DWORD PTR kind$[rsp], 1
  00235	75 11		 jne	 SHORT $LN43@PyIO_find_
  00237	48 8b 44 24 30	 mov	 rax, QWORD PTR s$22436[rsp]
  0023c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0023f	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv139[rsp], eax
  00246	eb 37		 jmp	 SHORT $LN44@PyIO_find_
$LN43@PyIO_find_:
  00248	83 bc 24 d8 00
	00 00 02	 cmp	 DWORD PTR kind$[rsp], 2
  00250	75 11		 jne	 SHORT $LN41@PyIO_find_
  00252	48 8b 44 24 30	 mov	 rax, QWORD PTR s$22436[rsp]
  00257	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0025a	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv138[rsp], eax
  00261	eb 0e		 jmp	 SHORT $LN42@PyIO_find_
$LN41@PyIO_find_:
  00263	48 8b 44 24 30	 mov	 rax, QWORD PTR s$22436[rsp]
  00268	8b 00		 mov	 eax, DWORD PTR [rax]
  0026a	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv138[rsp], eax
$LN42@PyIO_find_:
  00271	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv138[rsp]
  00278	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv139[rsp], eax
$LN44@PyIO_find_:
  0027f	83 bc 24 90 00
	00 00 0a	 cmp	 DWORD PTR tv139[rsp], 10
  00287	75 2a		 jne	 SHORT $LN18@PyIO_find_

; 1708 :                     return (s - start)/kind + 1;

  00289	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00291	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22436[rsp]
  00296	48 2b c8	 sub	 rcx, rax
  00299	48 8b c1	 mov	 rax, rcx
  0029c	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR kind$[rsp]
  002a4	48 99		 cdq
  002a6	48 f7 f9	 idiv	 rcx
  002a9	48 ff c0	 inc	 rax
  002ac	e9 40 05 00 00	 jmp	 $LN31@PyIO_find_

; 1709 :                 else

  002b1	eb 25		 jmp	 SHORT $LN17@PyIO_find_
$LN18@PyIO_find_:

; 1710 :                     return (s - start)/kind;

  002b3	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  002bb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22436[rsp]
  002c0	48 2b c8	 sub	 rcx, rax
  002c3	48 8b c1	 mov	 rax, rcx
  002c6	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR kind$[rsp]
  002ce	48 99		 cdq
  002d0	48 f7 f9	 idiv	 rcx
  002d3	e9 19 05 00 00	 jmp	 $LN31@PyIO_find_
$LN17@PyIO_find_:
$LN19@PyIO_find_:

; 1711 :             }
; 1712 :         }

  002d8	e9 03 fe ff ff	 jmp	 $LN25@PyIO_find_

; 1713 :     }
; 1714 :     else {

  002dd	e9 0f 05 00 00	 jmp	 $LN16@PyIO_find_
$LN26@PyIO_find_:

; 1715 :         /* Non-universal mode. */
; 1716 :         Py_ssize_t readnl_len = PyUnicode_GET_LENGTH(readnl);

  002e2	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  002ea	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002ee	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002f4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002f9	85 c0		 test	 eax, eax
  002fb	75 1c		 jne	 SHORT $LN45@PyIO_find_
  002fd	41 b8 b4 06 00
	00		 mov	 r8d, 1716		; 000006b4H
  00303	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0030a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@DJCACKFG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@
  00311	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00317	33 c0		 xor	 eax, eax
$LN45@PyIO_find_:
  00319	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  00321	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00324	c1 e8 07	 shr	 eax, 7
  00327	83 e0 01	 and	 eax, 1
  0032a	85 c0		 test	 eax, eax
  0032c	75 1c		 jne	 SHORT $LN46@PyIO_find_
  0032e	41 b8 b4 06 00
	00		 mov	 r8d, 1716		; 000006b4H
  00334	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0033b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@KCGMFBIM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@
  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00348	33 c0		 xor	 eax, eax
$LN46@PyIO_find_:
  0034a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  00352	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00356	48 89 44 24 40	 mov	 QWORD PTR readnl_len$22462[rsp], rax

; 1717 :         char *nl = PyUnicode_DATA(readnl);

  0035b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  00363	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00367	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0036d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00372	85 c0		 test	 eax, eax
  00374	75 1c		 jne	 SHORT $LN47@PyIO_find_
  00376	41 b8 b5 06 00
	00		 mov	 r8d, 1717		; 000006b5H
  0037c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00383	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@DJCACKFG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@
  0038a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00390	33 c0		 xor	 eax, eax
$LN47@PyIO_find_:
  00392	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  0039a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0039d	c1 e8 05	 shr	 eax, 5
  003a0	83 e0 01	 and	 eax, 1
  003a3	85 c0		 test	 eax, eax
  003a5	0f 84 bd 00 00
	00		 je	 $LN53@PyIO_find_
  003ab	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  003b3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003b7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003bd	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003c2	85 c0		 test	 eax, eax
  003c4	75 1c		 jne	 SHORT $LN48@PyIO_find_
  003c6	41 b8 b5 06 00
	00		 mov	 r8d, 1717		; 000006b5H
  003cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  003d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@DJCACKFG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@
  003da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003e0	33 c0		 xor	 eax, eax
$LN48@PyIO_find_:
  003e2	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  003ea	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003ed	c1 e8 07	 shr	 eax, 7
  003f0	83 e0 01	 and	 eax, 1
  003f3	85 c0		 test	 eax, eax
  003f5	75 1c		 jne	 SHORT $LN49@PyIO_find_
  003f7	41 b8 b5 06 00
	00		 mov	 r8d, 1717		; 000006b5H
  003fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00404	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@KCGMFBIM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@
  0040b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00411	33 c0		 xor	 eax, eax
$LN49@PyIO_find_:
  00413	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  0041b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0041e	c1 e8 06	 shr	 eax, 6
  00421	83 e0 01	 and	 eax, 1
  00424	85 c0		 test	 eax, eax
  00426	74 18		 je	 SHORT $LN50@PyIO_find_
  00428	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  00430	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00436	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv198[rsp], rax
  0043e	eb 16		 jmp	 SHORT $LN51@PyIO_find_
$LN50@PyIO_find_:
  00440	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  00448	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0044e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv198[rsp], rax
$LN51@PyIO_find_:
  00456	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv198[rsp]
  0045e	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv207[rsp], rax
  00466	eb 45		 jmp	 SHORT $LN54@PyIO_find_
$LN53@PyIO_find_:
  00468	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  00470	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00478	75 1c		 jne	 SHORT $LN52@PyIO_find_
  0047a	41 b8 b5 06 00
	00		 mov	 r8d, 1717		; 000006b5H
  00480	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00487	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@ILECGMDC@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  0048e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00494	33 c0		 xor	 eax, eax
$LN52@PyIO_find_:
  00496	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  0049e	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  004a5	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv207[rsp], rax
$LN54@PyIO_find_:
  004ad	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv207[rsp]
  004b5	48 89 44 24 48	 mov	 QWORD PTR nl$22470[rsp], rax

; 1718 :         /* Assume that readnl is an ASCII character. */
; 1719 :         assert(PyUnicode_KIND(readnl) == PyUnicode_1BYTE_KIND);

  004ba	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  004c2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004c6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004cc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004d1	85 c0		 test	 eax, eax
  004d3	75 1c		 jne	 SHORT $LN55@PyIO_find_
  004d5	41 b8 b7 06 00
	00		 mov	 r8d, 1719		; 000006b7H
  004db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  004e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@DJCACKFG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@
  004e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004ef	33 c0		 xor	 eax, eax
$LN55@PyIO_find_:
  004f1	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  004f9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004fc	c1 e8 07	 shr	 eax, 7
  004ff	83 e0 01	 and	 eax, 1
  00502	85 c0		 test	 eax, eax
  00504	75 1c		 jne	 SHORT $LN56@PyIO_find_
  00506	41 b8 b7 06 00
	00		 mov	 r8d, 1719		; 000006b7H
  0050c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00513	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@KCGMFBIM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?$AA@
  0051a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00520	33 c0		 xor	 eax, eax
$LN56@PyIO_find_:
  00522	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR readnl$[rsp]
  0052a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0052d	c1 e8 02	 shr	 eax, 2
  00530	83 e0 07	 and	 eax, 7
  00533	83 f8 01	 cmp	 eax, 1
  00536	74 1c		 je	 SHORT $LN57@PyIO_find_
  00538	41 b8 b7 06 00
	00		 mov	 r8d, 1719		; 000006b7H
  0053e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00545	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FO@EOPEBOJH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAn?$AAl?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc@
  0054c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00552	33 c0		 xor	 eax, eax
$LN57@PyIO_find_:

; 1720 :         if (readnl_len == 1) {

  00554	48 83 7c 24 40
	01		 cmp	 QWORD PTR readnl_len$22462[rsp], 1
  0055a	75 7d		 jne	 SHORT $LN15@PyIO_find_

; 1721 :             char *pos = find_control_char(kind, start, end, nl[0]);

  0055c	48 8b 44 24 48	 mov	 rax, QWORD PTR nl$22470[rsp]
  00561	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00564	44 8b c8	 mov	 r9d, eax
  00567	4c 8b 84 24 e8
	00 00 00	 mov	 r8, QWORD PTR end$[rsp]
  0056f	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR start$[rsp]
  00577	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR kind$[rsp]
  0057e	e8 00 00 00 00	 call	 find_control_char
  00583	48 89 44 24 50	 mov	 QWORD PTR pos$22495[rsp], rax

; 1722 :             if (pos != NULL)

  00588	48 83 7c 24 50
	00		 cmp	 QWORD PTR pos$22495[rsp], 0
  0058e	74 28		 je	 SHORT $LN14@PyIO_find_

; 1723 :                 return (pos - start)/kind + 1;

  00590	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00598	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pos$22495[rsp]
  0059d	48 2b c8	 sub	 rcx, rax
  005a0	48 8b c1	 mov	 rax, rcx
  005a3	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR kind$[rsp]
  005ab	48 99		 cdq
  005ad	48 f7 f9	 idiv	 rcx
  005b0	48 ff c0	 inc	 rax
  005b3	e9 39 02 00 00	 jmp	 $LN31@PyIO_find_
$LN14@PyIO_find_:

; 1724 :             *consumed = len;

  005b8	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR consumed$[rsp]
  005c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR len$[rsp]
  005c5	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1725 :             return -1;

  005c8	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  005cf	e9 1d 02 00 00	 jmp	 $LN31@PyIO_find_

; 1726 :         }
; 1727 :         else {

  005d4	e9 18 02 00 00	 jmp	 $LN13@PyIO_find_
$LN15@PyIO_find_:

; 1728 :             char *s = start;

  005d9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  005e1	48 89 44 24 58	 mov	 QWORD PTR s$22499[rsp], rax

; 1729 :             char *e = end - (readnl_len - 1)*kind;

  005e6	48 8b 44 24 40	 mov	 rax, QWORD PTR readnl_len$22462[rsp]
  005eb	48 ff c8	 dec	 rax
  005ee	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR kind$[rsp]
  005f6	48 0f af c1	 imul	 rax, rcx
  005fa	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  00602	48 2b c8	 sub	 rcx, rax
  00605	48 8b c1	 mov	 rax, rcx
  00608	48 89 44 24 60	 mov	 QWORD PTR e$22500[rsp], rax

; 1730 :             char *pos;
; 1731 :             if (e < s)

  0060d	48 8b 44 24 58	 mov	 rax, QWORD PTR s$22499[rsp]
  00612	48 39 44 24 60	 cmp	 QWORD PTR e$22500[rsp], rax
  00617	73 0a		 jae	 SHORT $LN12@PyIO_find_

; 1732 :                 e = s;

  00619	48 8b 44 24 58	 mov	 rax, QWORD PTR s$22499[rsp]
  0061e	48 89 44 24 60	 mov	 QWORD PTR e$22500[rsp], rax
$LN12@PyIO_find_:
$LN11@PyIO_find_:

; 1733 :             while (s < e) {

  00623	48 8b 44 24 60	 mov	 rax, QWORD PTR e$22500[rsp]
  00628	48 39 44 24 58	 cmp	 QWORD PTR s$22499[rsp], rax
  0062d	0f 83 49 01 00
	00		 jae	 $LN10@PyIO_find_

; 1734 :                 Py_ssize_t i;
; 1735 :                 char *pos = find_control_char(kind, s, end, nl[0]);

  00633	48 8b 44 24 48	 mov	 rax, QWORD PTR nl$22470[rsp]
  00638	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0063b	44 8b c8	 mov	 r9d, eax
  0063e	4c 8b 84 24 e8
	00 00 00	 mov	 r8, QWORD PTR end$[rsp]
  00646	48 8b 54 24 58	 mov	 rdx, QWORD PTR s$22499[rsp]
  0064b	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR kind$[rsp]
  00652	e8 00 00 00 00	 call	 find_control_char
  00657	48 89 44 24 78	 mov	 QWORD PTR pos$22507[rsp], rax

; 1736 :                 if (pos == NULL || pos >= e)

  0065c	48 83 7c 24 78
	00		 cmp	 QWORD PTR pos$22507[rsp], 0
  00662	74 0c		 je	 SHORT $LN8@PyIO_find_
  00664	48 8b 44 24 60	 mov	 rax, QWORD PTR e$22500[rsp]
  00669	48 39 44 24 78	 cmp	 QWORD PTR pos$22507[rsp], rax
  0066e	72 05		 jb	 SHORT $LN9@PyIO_find_
$LN8@PyIO_find_:

; 1737 :                     break;

  00670	e9 07 01 00 00	 jmp	 $LN10@PyIO_find_
$LN9@PyIO_find_:

; 1738 :                 for (i = 1; i < readnl_len; i++) {

  00675	48 c7 44 24 70
	01 00 00 00	 mov	 QWORD PTR i$22506[rsp], 1
  0067e	eb 0d		 jmp	 SHORT $LN7@PyIO_find_
$LN6@PyIO_find_:
  00680	48 8b 44 24 70	 mov	 rax, QWORD PTR i$22506[rsp]
  00685	48 ff c0	 inc	 rax
  00688	48 89 44 24 70	 mov	 QWORD PTR i$22506[rsp], rax
$LN7@PyIO_find_:
  0068d	48 8b 44 24 40	 mov	 rax, QWORD PTR readnl_len$22462[rsp]
  00692	48 39 44 24 70	 cmp	 QWORD PTR i$22506[rsp], rax
  00697	0f 8d 8c 00 00
	00		 jge	 $LN5@PyIO_find_

; 1739 :                     if (PyUnicode_READ(kind, pos, i) != nl[i])

  0069d	83 bc 24 d8 00
	00 00 01	 cmp	 DWORD PTR kind$[rsp], 1
  006a5	75 1c		 jne	 SHORT $LN60@PyIO_find_
  006a7	48 8b 44 24 70	 mov	 rax, QWORD PTR i$22506[rsp]
  006ac	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pos$22507[rsp]
  006b1	48 03 c8	 add	 rcx, rax
  006b4	48 8b c1	 mov	 rax, rcx
  006b7	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  006ba	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv270[rsp], eax
  006c1	eb 43		 jmp	 SHORT $LN61@PyIO_find_
$LN60@PyIO_find_:
  006c3	83 bc 24 d8 00
	00 00 02	 cmp	 DWORD PTR kind$[rsp], 2
  006cb	75 17		 jne	 SHORT $LN58@PyIO_find_
  006cd	48 8b 44 24 78	 mov	 rax, QWORD PTR pos$22507[rsp]
  006d2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR i$22506[rsp]
  006d7	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  006db	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv269[rsp], eax
  006e2	eb 14		 jmp	 SHORT $LN59@PyIO_find_
$LN58@PyIO_find_:
  006e4	48 8b 44 24 78	 mov	 rax, QWORD PTR pos$22507[rsp]
  006e9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR i$22506[rsp]
  006ee	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  006f1	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv269[rsp], eax
$LN59@PyIO_find_:
  006f8	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv269[rsp]
  006ff	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv270[rsp], eax
$LN61@PyIO_find_:
  00706	48 8b 44 24 70	 mov	 rax, QWORD PTR i$22506[rsp]
  0070b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR nl$22470[rsp]
  00710	48 03 c8	 add	 rcx, rax
  00713	48 8b c1	 mov	 rax, rcx
  00716	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00719	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR tv270[rsp], eax
  00720	74 02		 je	 SHORT $LN4@PyIO_find_

; 1740 :                         break;

  00722	eb 05		 jmp	 SHORT $LN5@PyIO_find_
$LN4@PyIO_find_:

; 1741 :                 }

  00724	e9 57 ff ff ff	 jmp	 $LN6@PyIO_find_
$LN5@PyIO_find_:

; 1742 :                 if (i == readnl_len)

  00729	48 8b 44 24 40	 mov	 rax, QWORD PTR readnl_len$22462[rsp]
  0072e	48 39 44 24 70	 cmp	 QWORD PTR i$22506[rsp], rax
  00733	75 2a		 jne	 SHORT $LN3@PyIO_find_

; 1743 :                     return (pos - start)/kind + readnl_len;

  00735	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  0073d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pos$22507[rsp]
  00742	48 2b c8	 sub	 rcx, rax
  00745	48 8b c1	 mov	 rax, rcx
  00748	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR kind$[rsp]
  00750	48 99		 cdq
  00752	48 f7 f9	 idiv	 rcx
  00755	48 03 44 24 40	 add	 rax, QWORD PTR readnl_len$22462[rsp]
  0075a	e9 92 00 00 00	 jmp	 $LN31@PyIO_find_
$LN3@PyIO_find_:

; 1744 :                 s = pos + kind;

  0075f	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR kind$[rsp]
  00767	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pos$22507[rsp]
  0076c	48 03 c8	 add	 rcx, rax
  0076f	48 8b c1	 mov	 rax, rcx
  00772	48 89 44 24 58	 mov	 QWORD PTR s$22499[rsp], rax

; 1745 :             }

  00777	e9 a7 fe ff ff	 jmp	 $LN11@PyIO_find_
$LN10@PyIO_find_:

; 1746 :             pos = find_control_char(kind, e, end, nl[0]);

  0077c	48 8b 44 24 48	 mov	 rax, QWORD PTR nl$22470[rsp]
  00781	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00784	44 8b c8	 mov	 r9d, eax
  00787	4c 8b 84 24 e8
	00 00 00	 mov	 r8, QWORD PTR end$[rsp]
  0078f	48 8b 54 24 60	 mov	 rdx, QWORD PTR e$22500[rsp]
  00794	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR kind$[rsp]
  0079b	e8 00 00 00 00	 call	 find_control_char
  007a0	48 89 44 24 68	 mov	 QWORD PTR pos$22501[rsp], rax

; 1747 :             if (pos == NULL)

  007a5	48 83 7c 24 68
	00		 cmp	 QWORD PTR pos$22501[rsp], 0
  007ab	75 12		 jne	 SHORT $LN2@PyIO_find_

; 1748 :                 *consumed = len;

  007ad	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR consumed$[rsp]
  007b5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR len$[rsp]
  007ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1749 :             else

  007bd	eb 2b		 jmp	 SHORT $LN1@PyIO_find_
$LN2@PyIO_find_:

; 1750 :                 *consumed = (pos - start)/kind;

  007bf	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  007c7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pos$22501[rsp]
  007cc	48 2b c8	 sub	 rcx, rax
  007cf	48 8b c1	 mov	 rax, rcx
  007d2	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR kind$[rsp]
  007da	48 99		 cdq
  007dc	48 f7 f9	 idiv	 rcx
  007df	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR consumed$[rsp]
  007e7	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN1@PyIO_find_:

; 1751 :             return -1;

  007ea	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
$LN13@PyIO_find_:
$LN16@PyIO_find_:
$LN27@PyIO_find_:
$LN31@PyIO_find_:

; 1752 :         }
; 1753 :     }
; 1754 : }

  007f1	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  007f8	c3		 ret	 0
_PyIO_find_line_ending ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BC@KPOFCKG@?$AAc?$AAh?$AA?5?$AA?$DM?$AA?5?$AA2?$AA5?$AA6?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$find_control_char DD imagerel find_control_char
	DD	imagerel find_control_char+329
	DD	imagerel $unwind$find_control_char
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$find_control_char DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_1BC@KPOFCKG@?$AAc?$AAh?$AA?5?$AA?$DM?$AA?5?$AA2?$AA5?$AA6?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@KPOFCKG@?$AAc?$AAh?$AA?5?$AA?$DM?$AA?5?$AA2?$AA5?$AA6?$AA?$AA@ DB 'c'
	DB	00H, 'h', 00H, ' ', 00H, '<', 00H, ' ', 00H, '2', 00H, '5', 00H
	DB	'6', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT find_control_char
_TEXT	SEGMENT
tv81 = 32
tv80 = 36
tv90 = 40
tv89 = 44
kind$ = 64
s$ = 72
end$ = 80
ch$ = 88
find_control_char PROC					; COMDAT

; 1654 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1655 :     if (kind == PyUnicode_1BYTE_KIND) {

  00017	83 7c 24 40 01	 cmp	 DWORD PTR kind$[rsp], 1
  0001c	75 50		 jne	 SHORT $LN7@find_contr

; 1656 :         assert(ch < 256);

  0001e	81 7c 24 58 00
	01 00 00	 cmp	 DWORD PTR ch$[rsp], 256	; 00000100H
  00026	72 1c		 jb	 SHORT $LN10@find_contr
  00028	41 b8 78 06 00
	00		 mov	 r8d, 1656		; 00000678H
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KPOFCKG@?$AAc?$AAh?$AA?5?$AA?$DM?$AA?5?$AA2?$AA5?$AA6?$AA?$AA@
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00042	33 c0		 xor	 eax, eax
$LN10@find_contr:

; 1657 :         return (char *) memchr((void *) s, (char) ch, end - s);

  00044	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00049	48 8b 4c 24 50	 mov	 rcx, QWORD PTR end$[rsp]
  0004e	48 2b c8	 sub	 rcx, rax
  00051	48 8b c1	 mov	 rax, rcx
  00054	0f be 4c 24 58	 movsx	 ecx, BYTE PTR ch$[rsp]
  00059	4c 8b c0	 mov	 r8, rax
  0005c	8b d1		 mov	 edx, ecx
  0005e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  00069	e9 d6 00 00 00	 jmp	 $LN8@find_contr
$LN7@find_contr:
$LN6@find_contr:
$LN4@find_contr:

; 1658 :     }
; 1659 :     for (;;) {
; 1660 :         while (PyUnicode_READ(kind, s, 0) > ch)

  0006e	83 7c 24 40 01	 cmp	 DWORD PTR kind$[rsp], 1
  00073	75 0e		 jne	 SHORT $LN13@find_contr
  00075	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0007a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0007d	89 44 24 20	 mov	 DWORD PTR tv81[rsp], eax
  00081	eb 28		 jmp	 SHORT $LN14@find_contr
$LN13@find_contr:
  00083	83 7c 24 40 02	 cmp	 DWORD PTR kind$[rsp], 2
  00088	75 0e		 jne	 SHORT $LN11@find_contr
  0008a	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0008f	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00092	89 44 24 24	 mov	 DWORD PTR tv80[rsp], eax
  00096	eb 0b		 jmp	 SHORT $LN12@find_contr
$LN11@find_contr:
  00098	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0009d	8b 00		 mov	 eax, DWORD PTR [rax]
  0009f	89 44 24 24	 mov	 DWORD PTR tv80[rsp], eax
$LN12@find_contr:
  000a3	8b 44 24 24	 mov	 eax, DWORD PTR tv80[rsp]
  000a7	89 44 24 20	 mov	 DWORD PTR tv81[rsp], eax
$LN14@find_contr:
  000ab	8b 44 24 58	 mov	 eax, DWORD PTR ch$[rsp]
  000af	39 44 24 20	 cmp	 DWORD PTR tv81[rsp], eax
  000b3	76 17		 jbe	 SHORT $LN3@find_contr

; 1661 :             s += kind;

  000b5	48 63 44 24 40	 movsxd	 rax, DWORD PTR kind$[rsp]
  000ba	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  000bf	48 03 c8	 add	 rcx, rax
  000c2	48 8b c1	 mov	 rax, rcx
  000c5	48 89 44 24 48	 mov	 QWORD PTR s$[rsp], rax
  000ca	eb a2		 jmp	 SHORT $LN4@find_contr
$LN3@find_contr:

; 1662 :         if (PyUnicode_READ(kind, s, 0) == ch)

  000cc	83 7c 24 40 01	 cmp	 DWORD PTR kind$[rsp], 1
  000d1	75 0e		 jne	 SHORT $LN17@find_contr
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  000d8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000db	89 44 24 28	 mov	 DWORD PTR tv90[rsp], eax
  000df	eb 28		 jmp	 SHORT $LN18@find_contr
$LN17@find_contr:
  000e1	83 7c 24 40 02	 cmp	 DWORD PTR kind$[rsp], 2
  000e6	75 0e		 jne	 SHORT $LN15@find_contr
  000e8	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  000ed	0f b7 00	 movzx	 eax, WORD PTR [rax]
  000f0	89 44 24 2c	 mov	 DWORD PTR tv89[rsp], eax
  000f4	eb 0b		 jmp	 SHORT $LN16@find_contr
$LN15@find_contr:
  000f6	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  000fb	8b 00		 mov	 eax, DWORD PTR [rax]
  000fd	89 44 24 2c	 mov	 DWORD PTR tv89[rsp], eax
$LN16@find_contr:
  00101	8b 44 24 2c	 mov	 eax, DWORD PTR tv89[rsp]
  00105	89 44 24 28	 mov	 DWORD PTR tv90[rsp], eax
$LN18@find_contr:
  00109	8b 44 24 58	 mov	 eax, DWORD PTR ch$[rsp]
  0010d	39 44 24 28	 cmp	 DWORD PTR tv90[rsp], eax
  00111	75 07		 jne	 SHORT $LN2@find_contr

; 1663 :             return s;

  00113	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00118	eb 2a		 jmp	 SHORT $LN8@find_contr
$LN2@find_contr:

; 1664 :         if (s == end)

  0011a	48 8b 44 24 50	 mov	 rax, QWORD PTR end$[rsp]
  0011f	48 39 44 24 48	 cmp	 QWORD PTR s$[rsp], rax
  00124	75 04		 jne	 SHORT $LN1@find_contr

; 1665 :             return NULL;

  00126	33 c0		 xor	 eax, eax
  00128	eb 1a		 jmp	 SHORT $LN8@find_contr
$LN1@find_contr:

; 1666 :         s += kind;

  0012a	48 63 44 24 40	 movsxd	 rax, DWORD PTR kind$[rsp]
  0012f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  00134	48 03 c8	 add	 rcx, rax
  00137	48 8b c1	 mov	 rax, rcx
  0013a	48 89 44 24 48	 mov	 QWORD PTR s$[rsp], rax

; 1667 :     }

  0013f	e9 2a ff ff ff	 jmp	 $LN6@find_contr
$LN8@find_contr:

; 1668 : }

  00144	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00148	c3		 ret	 0
find_control_char ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@GAMMEOLG@?$HMn?3readline?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_readline DD imagerel textiowrapper_readline
	DD	imagerel textiowrapper_readline+139
	DD	imagerel $unwind$textiowrapper_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_readline DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0M@GAMMEOLG@?$HMn?3readline?$AA@
CONST	SEGMENT
??_C@_0M@GAMMEOLG@?$HMn?3readline?$AA@ DB '|n:readline', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_readline
_TEXT	SEGMENT
limit$ = 32
self$ = 64
args$ = 72
textiowrapper_readline PROC				; COMDAT

; 1921 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1922 :     Py_ssize_t limit = -1;

  0000e	48 c7 44 24 20
	ff ff ff ff	 mov	 QWORD PTR limit$[rsp], -1

; 1923 : 
; 1924 :     CHECK_INITIALIZED(self);

  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001c	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00020	7f 37		 jg	 SHORT $LN4@textiowrap@13
  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00027	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  0002b	74 15		 je	 SHORT $LN3@textiowrap@13
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0003b	e8 00 00 00 00	 call	 PyErr_SetString
  00040	eb 13		 jmp	 SHORT $LN2@textiowrap@13
$LN3@textiowrap@13:
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00050	e8 00 00 00 00	 call	 PyErr_SetString
$LN2@textiowrap@13:
  00055	33 c0		 xor	 eax, eax
  00057	eb 2d		 jmp	 SHORT $LN5@textiowrap@13
$LN4@textiowrap@13:

; 1925 :     if (!PyArg_ParseTuple(args, "|n:readline", &limit)) {

  00059	4c 8d 44 24 20	 lea	 r8, QWORD PTR limit$[rsp]
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GAMMEOLG@?$HMn?3readline?$AA@
  00065	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0006a	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0006f	85 c0		 test	 eax, eax
  00071	75 04		 jne	 SHORT $LN1@textiowrap@13

; 1926 :         return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	eb 0f		 jmp	 SHORT $LN5@textiowrap@13
$LN1@textiowrap@13:

; 1927 :     }
; 1928 :     return _textiowrapper_readline(self, limit);

  00077	48 8b 54 24 20	 mov	 rdx, QWORD PTR limit$[rsp]
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00081	e8 00 00 00 00	 call	 _textiowrapper_readline
$LN5@textiowrap@13:

; 1929 : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
textiowrapper_readline ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CM@GOJFGIBK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@MKPCHAGC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EK@PHONKJKP@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@ ; `string'
PUBLIC	??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@LLELAJFB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@KGGIFHFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@NKEDJDNK@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA_?$AAu?$AAs?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BI@JAGFCLNN@_textiowrapper_readline?$AA@	; `string'
EXTRN	PyUnicode_Concat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_textiowrapper_readline DD imagerel _textiowrapper_readline
	DD	imagerel _textiowrapper_readline+3407
	DD	imagerel $unwind$_textiowrapper_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_textiowrapper_readline DD 021101H
	DD	0230111H
xdata	ENDS
;	COMDAT ??_C@_1CM@GOJFGIBK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@GOJFGIBK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 's', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@MKPCHAGC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@MKPCHAGC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@PHONKJKP@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@
CONST	SEGMENT
??_C@_1EK@PHONKJKP@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ')', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H
	DB	'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LLELAJFB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LLELAJFB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'r', 00H
	DB	'e', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@KGGIFHFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@KGGIFHFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'a', 00H
	DB	'i', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@NKEDJDNK@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA_?$AAu?$AAs?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@NKEDJDNK@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA_?$AAu?$AAs?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'd', 00H
	DB	'e', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'd', 00H, '_'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 's', 00H, '_', 00H
	DB	'u', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JAGFCLNN@_textiowrapper_readline?$AA@
CONST	SEGMENT
??_C@_0BI@JAGFCLNN@_textiowrapper_readline?$AA@ DB '_textiowrapper_readli'
	DB	'ne', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _textiowrapper_readline
_TEXT	SEGMENT
res$ = 64
offset_to_buffer$ = 72
line$ = 80
endpos$ = 88
start$ = 96
remaining$ = 104
chunks$ = 112
chunked$ = 120
_res$22544 = 128
r$22543 = 136
kind$22572 = 140
ptr$22570 = 144
line_len$22571 = 152
consumed$22573 = 160
_py_tmp$22594 = 168
_py_tmp$22615 = 176
s$22658 = 184
_py_tmp$22682 = 192
s$22696 = 200
_py_tmp$22701 = 208
_py_tmp$22718 = 216
_py_tmp$22734 = 224
tv226 = 232
tv261 = 240
tv270 = 248
tv324 = 256
self$ = 288
limit$ = 296
_textiowrapper_readline PROC				; COMDAT

; 1758 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 1759 :     PyObject *line = NULL, *chunks = NULL, *remaining = NULL;

  00011	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR line$[rsp], 0
  0001a	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR chunks$[rsp], 0
  00023	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR remaining$[rsp], 0
$LN84@textiowrap@14:

; 1760 :     Py_ssize_t start, endpos, chunked, offset_to_buffer;
; 1761 :     int res;
; 1762 : 
; 1763 :     CHECK_CLOSED(self);

  0002c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTextIOWrapper_Type
  00033	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0003b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0003f	0f 85 b0 00 00
	00		 jne	 $LN81@textiowrap@14
  00045	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0004d	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  00055	74 1d		 je	 SHORT $LN80@textiowrap@14
  00057	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 8b 88 f8 00
	00 00		 mov	 rcx, QWORD PTR [rax+248]
  00066	e8 00 00 00 00	 call	 _PyFileIO_closed
  0006b	89 84 24 88 00
	00 00		 mov	 DWORD PTR r$22543[rsp], eax
  00072	eb 5b		 jmp	 SHORT $LN79@textiowrap@14
$LN80@textiowrap@14:
  00074	33 d2		 xor	 edx, edx
  00076	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0007e	e8 00 00 00 00	 call	 textiowrapper_closed_get
  00083	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _res$22544[rsp], rax
  0008b	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR _res$22544[rsp], 0
  00094	75 07		 jne	 SHORT $LN78@textiowrap@14
  00096	33 c0		 xor	 eax, eax
  00098	e9 aa 0c 00 00	 jmp	 $LN85@textiowrap@14
$LN78@textiowrap@14:
  0009d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _res$22544[rsp]
  000a5	e8 00 00 00 00	 call	 PyObject_IsTrue
  000aa	89 84 24 88 00
	00 00		 mov	 DWORD PTR r$22543[rsp], eax
  000b1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _res$22544[rsp]
  000b9	e8 00 00 00 00	 call	 _Py_DecRef
  000be	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR r$22543[rsp], 0
  000c6	7d 07		 jge	 SHORT $LN77@textiowrap@14
  000c8	33 c0		 xor	 eax, eax
  000ca	e9 78 0c 00 00	 jmp	 $LN85@textiowrap@14
$LN77@textiowrap@14:
$LN79@textiowrap@14:
  000cf	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR r$22543[rsp], 0
  000d7	7e 1a		 jle	 SHORT $LN76@textiowrap@14
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
  000e0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000e7	e8 00 00 00 00	 call	 PyErr_SetString
  000ec	33 c0		 xor	 eax, eax
  000ee	e9 54 0c 00 00	 jmp	 $LN85@textiowrap@14
$LN76@textiowrap@14:
  000f3	eb 20		 jmp	 SHORT $LN75@textiowrap@14
$LN81@textiowrap@14:
  000f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  000fc	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00104	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  00109	48 85 c0	 test	 rax, rax
  0010c	75 07		 jne	 SHORT $LN74@textiowrap@14
  0010e	33 c0		 xor	 eax, eax
  00110	e9 32 0c 00 00	 jmp	 $LN85@textiowrap@14
$LN74@textiowrap@14:
$LN75@textiowrap@14:
  00115	33 c0		 xor	 eax, eax
  00117	85 c0		 test	 eax, eax
  00119	0f 85 0d ff ff
	ff		 jne	 $LN84@textiowrap@14

; 1764 : 
; 1765 :     if (_textiowrapper_writeflush(self) < 0)

  0011f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00127	e8 00 00 00 00	 call	 _textiowrapper_writeflush
  0012c	85 c0		 test	 eax, eax
  0012e	7d 07		 jge	 SHORT $LN73@textiowrap@14

; 1766 :         return NULL;

  00130	33 c0		 xor	 eax, eax
  00132	e9 10 0c 00 00	 jmp	 $LN85@textiowrap@14
$LN73@textiowrap@14:

; 1767 : 
; 1768 :     chunked = 0;

  00137	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR chunked$[rsp], 0
$LN72@textiowrap@14:

; 1769 : 
; 1770 :     while (1) {

  00140	33 c0		 xor	 eax, eax
  00142	83 f8 01	 cmp	 eax, 1
  00145	0f 84 fa 08 00
	00		 je	 $LN71@textiowrap@14

; 1771 :         char *ptr;
; 1772 :         Py_ssize_t line_len;
; 1773 :         int kind;
; 1774 :         Py_ssize_t consumed = 0;

  0014b	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR consumed$22573[rsp], 0

; 1775 : 
; 1776 :         /* First, get some data if necessary */
; 1777 :         res = 1;

  00157	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR res$[rsp], 1
$LN111@textiowrap@14:
$LN70@textiowrap@14:

; 1778 :         while (!self->decoded_chars ||
; 1779 :                !PyUnicode_GET_LENGTH(self->decoded_chars)) {

  0015f	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00167	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  0016f	0f 84 8c 00 00
	00		 je	 $LN68@textiowrap@14
  00175	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0017d	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00184	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00188	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0018e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00193	85 c0		 test	 eax, eax
  00195	75 1c		 jne	 SHORT $LN87@textiowrap@14
  00197	41 b8 f3 06 00
	00		 mov	 r8d, 1779		; 000006f3H
  0019d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@HMGIGAED@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh@
  001ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b1	33 c0		 xor	 eax, eax
$LN87@textiowrap@14:
  001b3	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001bb	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  001c2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001c5	c1 e8 07	 shr	 eax, 7
  001c8	83 e0 01	 and	 eax, 1
  001cb	85 c0		 test	 eax, eax
  001cd	75 1c		 jne	 SHORT $LN88@textiowrap@14
  001cf	41 b8 f3 06 00
	00		 mov	 r8d, 1779		; 000006f3H
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FA@KLNJLDAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd@
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001e9	33 c0		 xor	 eax, eax
$LN88@textiowrap@14:
  001eb	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001f3	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  001fa	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  001ff	75 3b		 jne	 SHORT $LN69@textiowrap@14
$LN68@textiowrap@14:

; 1780 :             res = textiowrapper_read_chunk(self, 0);

  00201	33 d2		 xor	 edx, edx
  00203	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0020b	e8 00 00 00 00	 call	 textiowrapper_read_chunk
  00210	89 44 24 40	 mov	 DWORD PTR res$[rsp], eax

; 1781 :             if (res < 0) {

  00214	83 7c 24 40 00	 cmp	 DWORD PTR res$[rsp], 0
  00219	7d 13		 jge	 SHORT $LN67@textiowrap@14

; 1782 :                 /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals()
; 1783 :                    when EINTR occurs so we needn't do it ourselves. */
; 1784 :                 if (_PyIO_trap_eintr()) {

  0021b	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  00220	85 c0		 test	 eax, eax
  00222	74 05		 je	 SHORT $LN66@textiowrap@14

; 1785 :                     continue;

  00224	e9 36 ff ff ff	 jmp	 $LN70@textiowrap@14
$LN66@textiowrap@14:

; 1786 :                 }
; 1787 :                 goto error;

  00229	e9 cf 0a 00 00	 jmp	 $error$22585
$LN67@textiowrap@14:

; 1788 :             }
; 1789 :             if (res == 0)

  0022e	83 7c 24 40 00	 cmp	 DWORD PTR res$[rsp], 0
  00233	75 02		 jne	 SHORT $LN65@textiowrap@14

; 1790 :                 break;

  00235	eb 05		 jmp	 SHORT $LN69@textiowrap@14
$LN65@textiowrap@14:

; 1791 :         }

  00237	e9 23 ff ff ff	 jmp	 $LN111@textiowrap@14
$LN69@textiowrap@14:

; 1792 :         if (res == 0) {

  0023c	83 7c 24 40 00	 cmp	 DWORD PTR res$[rsp], 0
  00241	0f 85 b8 00 00
	00		 jne	 $LN64@textiowrap@14

; 1793 :             /* end of file */
; 1794 :             textiowrapper_set_decoded_chars(self, NULL);

  00247	33 d2		 xor	 edx, edx
  00249	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00251	e8 00 00 00 00	 call	 textiowrapper_set_decoded_chars
$LN63@textiowrap@14:

; 1795 :             Py_CLEAR(self->snapshot);

  00256	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0025e	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  00266	74 6b		 je	 SHORT $LN60@textiowrap@14
  00268	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00270	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00278	4c 8b 88 e8 00
	00 00		 mov	 r9, QWORD PTR [rax+232]
  0027f	41 b8 03 07 00
	00		 mov	 r8d, 1795		; 00000703H
  00285	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0028c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@JAGFCLNN@_textiowrapper_readline?$AA@
  00293	e8 00 00 00 00	 call	 _PyParallel_Guard
  00298	85 c0		 test	 eax, eax
  0029a	75 37		 jne	 SHORT $LN60@textiowrap@14
  0029c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002a4	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  002ab	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR _py_tmp$22594[rsp], rax
  002b3	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002bb	48 c7 80 e8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+232], 0
  002c6	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22594[rsp]
  002ce	e8 00 00 00 00	 call	 _Py_DecRef
$LN60@textiowrap@14:
  002d3	33 c0		 xor	 eax, eax
  002d5	85 c0		 test	 eax, eax
  002d7	0f 85 79 ff ff
	ff		 jne	 $LN63@textiowrap@14

; 1796 :             start = endpos = offset_to_buffer = 0;

  002dd	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR offset_to_buffer$[rsp], 0
  002e6	48 8b 44 24 48	 mov	 rax, QWORD PTR offset_to_buffer$[rsp]
  002eb	48 89 44 24 58	 mov	 QWORD PTR endpos$[rsp], rax
  002f0	48 8b 44 24 58	 mov	 rax, QWORD PTR endpos$[rsp]
  002f5	48 89 44 24 60	 mov	 QWORD PTR start$[rsp], rax

; 1797 :             break;

  002fa	e9 46 07 00 00	 jmp	 $LN71@textiowrap@14
$LN64@textiowrap@14:

; 1798 :         }
; 1799 : 
; 1800 :         if (remaining == NULL) {

  002ff	48 83 7c 24 68
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  00305	75 40		 jne	 SHORT $LN59@textiowrap@14

; 1801 :             line = self->decoded_chars;

  00307	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0030f	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00316	48 89 44 24 50	 mov	 QWORD PTR line$[rsp], rax

; 1802 :             start = self->decoded_chars_used;

  0031b	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00323	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  0032a	48 89 44 24 60	 mov	 QWORD PTR start$[rsp], rax

; 1803 :             offset_to_buffer = 0;

  0032f	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR offset_to_buffer$[rsp], 0

; 1804 :             Py_INCREF(line);

  00338	48 8b 4c 24 50	 mov	 rcx, QWORD PTR line$[rsp]
  0033d	e8 00 00 00 00	 call	 _Py_IncRef

; 1805 :         }
; 1806 :         else {

  00342	e9 a0 01 00 00	 jmp	 $LN58@textiowrap@14
$LN59@textiowrap@14:

; 1807 :             assert(self->decoded_chars_used == 0);

  00347	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0034f	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  00357	74 1c		 je	 SHORT $LN89@textiowrap@14
  00359	41 b8 0f 07 00
	00		 mov	 r8d, 1807		; 0000070fH
  0035f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00366	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@NKEDJDNK@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA_?$AAu?$AAs?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0036d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00373	33 c0		 xor	 eax, eax
$LN89@textiowrap@14:

; 1808 :             line = PyUnicode_Concat(remaining, self->decoded_chars);

  00375	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0037d	48 8b 90 c8 00
	00 00		 mov	 rdx, QWORD PTR [rax+200]
  00384	48 8b 4c 24 68	 mov	 rcx, QWORD PTR remaining$[rsp]
  00389	e8 00 00 00 00	 call	 PyUnicode_Concat
  0038e	48 89 44 24 50	 mov	 QWORD PTR line$[rsp], rax

; 1809 :             start = 0;

  00393	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR start$[rsp], 0

; 1810 :             offset_to_buffer = PyUnicode_GET_LENGTH(remaining);

  0039c	48 8b 44 24 68	 mov	 rax, QWORD PTR remaining$[rsp]
  003a1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003a5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003ab	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003b0	85 c0		 test	 eax, eax
  003b2	75 1c		 jne	 SHORT $LN90@textiowrap@14
  003b4	41 b8 12 07 00
	00		 mov	 r8d, 1810		; 00000712H
  003ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  003c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@KGGIFHFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?$CJ?$AA?$AA@
  003c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003ce	33 c0		 xor	 eax, eax
$LN90@textiowrap@14:
  003d0	48 8b 44 24 68	 mov	 rax, QWORD PTR remaining$[rsp]
  003d5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003d8	c1 e8 07	 shr	 eax, 7
  003db	83 e0 01	 and	 eax, 1
  003de	85 c0		 test	 eax, eax
  003e0	75 1c		 jne	 SHORT $LN91@textiowrap@14
  003e2	41 b8 12 07 00
	00		 mov	 r8d, 1810		; 00000712H
  003e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  003ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@LLELAJFB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?$CJ?$AA?$AA@
  003f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003fc	33 c0		 xor	 eax, eax
$LN91@textiowrap@14:
  003fe	48 8b 44 24 68	 mov	 rax, QWORD PTR remaining$[rsp]
  00403	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00407	48 89 44 24 48	 mov	 QWORD PTR offset_to_buffer$[rsp], rax
$LN57@textiowrap@14:

; 1811 :             Py_CLEAR(remaining);

  0040c	48 83 7c 24 68
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  00412	74 4d		 je	 SHORT $LN54@textiowrap@14
  00414	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0041c	4c 8b 4c 24 68	 mov	 r9, QWORD PTR remaining$[rsp]
  00421	41 b8 13 07 00
	00		 mov	 r8d, 1811		; 00000713H
  00427	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0042e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@JAGFCLNN@_textiowrapper_readline?$AA@
  00435	e8 00 00 00 00	 call	 _PyParallel_Guard
  0043a	85 c0		 test	 eax, eax
  0043c	75 23		 jne	 SHORT $LN54@textiowrap@14
  0043e	48 8b 44 24 68	 mov	 rax, QWORD PTR remaining$[rsp]
  00443	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR _py_tmp$22615[rsp], rax
  0044b	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR remaining$[rsp], 0
  00454	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22615[rsp]
  0045c	e8 00 00 00 00	 call	 _Py_DecRef
$LN54@textiowrap@14:
  00461	33 c0		 xor	 eax, eax
  00463	85 c0		 test	 eax, eax
  00465	75 a5		 jne	 SHORT $LN57@textiowrap@14

; 1812 :             if (line == NULL)

  00467	48 83 7c 24 50
	00		 cmp	 QWORD PTR line$[rsp], 0
  0046d	75 05		 jne	 SHORT $LN53@textiowrap@14

; 1813 :                 goto error;

  0046f	e9 89 08 00 00	 jmp	 $error$22585
$LN53@textiowrap@14:

; 1814 :             if (PyUnicode_READY(line) == -1)

  00474	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00479	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0047d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00483	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00488	85 c0		 test	 eax, eax
  0048a	75 1c		 jne	 SHORT $LN92@textiowrap@14
  0048c	41 b8 16 07 00
	00		 mov	 r8d, 1814		; 00000716H
  00492	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  004a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004a6	33 c0		 xor	 eax, eax
$LN92@textiowrap@14:
  004a8	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  004ad	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004b0	c1 e8 07	 shr	 eax, 7
  004b3	83 e0 01	 and	 eax, 1
  004b6	85 c0		 test	 eax, eax
  004b8	74 0d		 je	 SHORT $LN93@textiowrap@14
  004ba	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv226[rsp], 0
  004c5	eb 11		 jmp	 SHORT $LN94@textiowrap@14
$LN93@textiowrap@14:
  004c7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR line$[rsp]
  004cc	e8 00 00 00 00	 call	 _PyUnicode_Ready
  004d1	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv226[rsp], eax
$LN94@textiowrap@14:
  004d8	83 bc 24 e8 00
	00 00 ff	 cmp	 DWORD PTR tv226[rsp], -1
  004e0	75 05		 jne	 SHORT $LN52@textiowrap@14

; 1815 :                 goto error;

  004e2	e9 16 08 00 00	 jmp	 $error$22585
$LN52@textiowrap@14:
$LN58@textiowrap@14:

; 1816 :         }
; 1817 : 
; 1818 :         ptr = PyUnicode_DATA(line);

  004e7	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  004ec	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004f0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004f6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004fb	85 c0		 test	 eax, eax
  004fd	75 1c		 jne	 SHORT $LN95@textiowrap@14
  004ff	41 b8 1a 07 00
	00		 mov	 r8d, 1818		; 0000071aH
  00505	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0050c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  00513	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00519	33 c0		 xor	 eax, eax
$LN95@textiowrap@14:
  0051b	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00520	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00523	c1 e8 05	 shr	 eax, 5
  00526	83 e0 01	 and	 eax, 1
  00529	85 c0		 test	 eax, eax
  0052b	0f 84 ae 00 00
	00		 je	 $LN101@textiowrap@14
  00531	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00536	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0053a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00540	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00545	85 c0		 test	 eax, eax
  00547	75 1c		 jne	 SHORT $LN96@textiowrap@14
  00549	41 b8 1a 07 00
	00		 mov	 r8d, 1818		; 0000071aH
  0054f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00556	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  0055d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00563	33 c0		 xor	 eax, eax
$LN96@textiowrap@14:
  00565	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  0056a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0056d	c1 e8 07	 shr	 eax, 7
  00570	83 e0 01	 and	 eax, 1
  00573	85 c0		 test	 eax, eax
  00575	75 1c		 jne	 SHORT $LN97@textiowrap@14
  00577	41 b8 1a 07 00
	00		 mov	 r8d, 1818		; 0000071aH
  0057d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00584	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  0058b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00591	33 c0		 xor	 eax, eax
$LN97@textiowrap@14:
  00593	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00598	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0059b	c1 e8 06	 shr	 eax, 6
  0059e	83 e0 01	 and	 eax, 1
  005a1	85 c0		 test	 eax, eax
  005a3	74 15		 je	 SHORT $LN98@textiowrap@14
  005a5	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  005aa	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  005b0	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv261[rsp], rax
  005b8	eb 13		 jmp	 SHORT $LN99@textiowrap@14
$LN98@textiowrap@14:
  005ba	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  005bf	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  005c5	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv261[rsp], rax
$LN99@textiowrap@14:
  005cd	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv261[rsp]
  005d5	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv270[rsp], rax
  005dd	eb 3f		 jmp	 SHORT $LN102@textiowrap@14
$LN101@textiowrap@14:
  005df	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  005e4	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  005ec	75 1c		 jne	 SHORT $LN100@textiowrap@14
  005ee	41 b8 1a 07 00
	00		 mov	 r8d, 1818		; 0000071aH
  005f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  005fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@PHONKJKP@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@
  00602	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00608	33 c0		 xor	 eax, eax
$LN100@textiowrap@14:
  0060a	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  0060f	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00616	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv270[rsp], rax
$LN102@textiowrap@14:
  0061e	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv270[rsp]
  00626	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR ptr$22570[rsp], rax

; 1819 :         line_len = PyUnicode_GET_LENGTH(line);

  0062e	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00633	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00637	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0063d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00642	85 c0		 test	 eax, eax
  00644	75 1c		 jne	 SHORT $LN103@textiowrap@14
  00646	41 b8 1b 07 00
	00		 mov	 r8d, 1819		; 0000071bH
  0064c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00653	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  0065a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00660	33 c0		 xor	 eax, eax
$LN103@textiowrap@14:
  00662	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00667	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0066a	c1 e8 07	 shr	 eax, 7
  0066d	83 e0 01	 and	 eax, 1
  00670	85 c0		 test	 eax, eax
  00672	75 1c		 jne	 SHORT $LN104@textiowrap@14
  00674	41 b8 1b 07 00
	00		 mov	 r8d, 1819		; 0000071bH
  0067a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00681	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  00688	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0068e	33 c0		 xor	 eax, eax
$LN104@textiowrap@14:
  00690	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00695	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00699	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR line_len$22571[rsp], rax

; 1820 :         kind = PyUnicode_KIND(line);

  006a1	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  006a6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  006aa	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  006b0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  006b5	85 c0		 test	 eax, eax
  006b7	75 1c		 jne	 SHORT $LN105@textiowrap@14
  006b9	41 b8 1c 07 00
	00		 mov	 r8d, 1820		; 0000071cH
  006bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  006c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  006cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006d3	33 c0		 xor	 eax, eax
$LN105@textiowrap@14:
  006d5	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  006da	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006dd	c1 e8 07	 shr	 eax, 7
  006e0	83 e0 01	 and	 eax, 1
  006e3	85 c0		 test	 eax, eax
  006e5	75 1c		 jne	 SHORT $LN106@textiowrap@14
  006e7	41 b8 1c 07 00
	00		 mov	 r8d, 1820		; 0000071cH
  006ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  006f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  006fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00701	33 c0		 xor	 eax, eax
$LN106@textiowrap@14:
  00703	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00708	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0070b	c1 e8 02	 shr	 eax, 2
  0070e	83 e0 07	 and	 eax, 7
  00711	89 84 24 8c 00
	00 00		 mov	 DWORD PTR kind$22572[rsp], eax

; 1821 : 
; 1822 :         endpos = _PyIO_find_line_ending(
; 1823 :             self->readtranslate, self->readuniversal, self->readnl,
; 1824 :             kind,
; 1825 :             ptr + kind * start,
; 1826 :             ptr + kind * line_len,
; 1827 :             &consumed);

  00718	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR kind$22572[rsp]
  00720	48 0f af 84 24
	98 00 00 00	 imul	 rax, QWORD PTR line_len$22571[rsp]
  00729	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ptr$22570[rsp]
  00731	48 03 c8	 add	 rcx, rax
  00734	48 8b c1	 mov	 rax, rcx
  00737	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR kind$22572[rsp]
  0073f	48 0f af 4c 24
	60		 imul	 rcx, QWORD PTR start$[rsp]
  00745	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR ptr$22570[rsp]
  0074d	48 03 d1	 add	 rdx, rcx
  00750	48 8b ca	 mov	 rcx, rdx
  00753	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  0075b	0f be 92 aa 00
	00 00		 movsx	 edx, BYTE PTR [rdx+170]
  00762	4c 8b 84 24 20
	01 00 00	 mov	 r8, QWORD PTR self$[rsp]
  0076a	45 0f be 80 ab
	00 00 00	 movsx	 r8d, BYTE PTR [r8+171]
  00772	44 89 84 24 00
	01 00 00	 mov	 DWORD PTR tv324[rsp], r8d
  0077a	4c 8d 8c 24 a0
	00 00 00	 lea	 r9, QWORD PTR consumed$22573[rsp]
  00782	4c 89 4c 24 30	 mov	 QWORD PTR [rsp+48], r9
  00787	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0078c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00791	44 8b 8c 24 8c
	00 00 00	 mov	 r9d, DWORD PTR kind$22572[rsp]
  00799	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  007a1	4c 8b 80 90 00
	00 00		 mov	 r8, QWORD PTR [rax+144]
  007a8	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR tv324[rsp]
  007af	8b c8		 mov	 ecx, eax
  007b1	e8 00 00 00 00	 call	 _PyIO_find_line_ending
  007b6	48 89 44 24 58	 mov	 QWORD PTR endpos$[rsp], rax

; 1828 :         if (endpos >= 0) {

  007bb	48 83 7c 24 58
	00		 cmp	 QWORD PTR endpos$[rsp], 0
  007c1	7c 61		 jl	 SHORT $LN51@textiowrap@14

; 1829 :             endpos += start;

  007c3	48 8b 44 24 60	 mov	 rax, QWORD PTR start$[rsp]
  007c8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR endpos$[rsp]
  007cd	48 03 c8	 add	 rcx, rax
  007d0	48 8b c1	 mov	 rax, rcx
  007d3	48 89 44 24 58	 mov	 QWORD PTR endpos$[rsp], rax

; 1830 :             if (limit >= 0 && (endpos - start) + chunked >= limit)

  007d8	48 83 bc 24 28
	01 00 00 00	 cmp	 QWORD PTR limit$[rsp], 0
  007e1	7c 3c		 jl	 SHORT $LN50@textiowrap@14
  007e3	48 8b 44 24 60	 mov	 rax, QWORD PTR start$[rsp]
  007e8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR endpos$[rsp]
  007ed	48 2b c8	 sub	 rcx, rax
  007f0	48 8b c1	 mov	 rax, rcx
  007f3	48 03 44 24 78	 add	 rax, QWORD PTR chunked$[rsp]
  007f8	48 3b 84 24 28
	01 00 00	 cmp	 rax, QWORD PTR limit$[rsp]
  00800	7c 1d		 jl	 SHORT $LN50@textiowrap@14

; 1831 :                 endpos = start + limit - chunked;

  00802	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR limit$[rsp]
  0080a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR start$[rsp]
  0080f	48 03 c8	 add	 rcx, rax
  00812	48 8b c1	 mov	 rax, rcx
  00815	48 2b 44 24 78	 sub	 rax, QWORD PTR chunked$[rsp]
  0081a	48 89 44 24 58	 mov	 QWORD PTR endpos$[rsp], rax
$LN50@textiowrap@14:

; 1832 :             break;

  0081f	e9 21 02 00 00	 jmp	 $LN71@textiowrap@14
$LN51@textiowrap@14:

; 1833 :         }
; 1834 : 
; 1835 :         /* We can put aside up to `endpos` */
; 1836 :         endpos = consumed + start;

  00824	48 8b 44 24 60	 mov	 rax, QWORD PTR start$[rsp]
  00829	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR consumed$22573[rsp]
  00831	48 03 c8	 add	 rcx, rax
  00834	48 8b c1	 mov	 rax, rcx
  00837	48 89 44 24 58	 mov	 QWORD PTR endpos$[rsp], rax

; 1837 :         if (limit >= 0 && (endpos - start) + chunked >= limit) {

  0083c	48 83 bc 24 28
	01 00 00 00	 cmp	 QWORD PTR limit$[rsp], 0
  00845	7c 41		 jl	 SHORT $LN49@textiowrap@14
  00847	48 8b 44 24 60	 mov	 rax, QWORD PTR start$[rsp]
  0084c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR endpos$[rsp]
  00851	48 2b c8	 sub	 rcx, rax
  00854	48 8b c1	 mov	 rax, rcx
  00857	48 03 44 24 78	 add	 rax, QWORD PTR chunked$[rsp]
  0085c	48 3b 84 24 28
	01 00 00	 cmp	 rax, QWORD PTR limit$[rsp]
  00864	7c 22		 jl	 SHORT $LN49@textiowrap@14

; 1838 :             /* Didn't find line ending, but reached length limit */
; 1839 :             endpos = start + limit - chunked;

  00866	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR limit$[rsp]
  0086e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR start$[rsp]
  00873	48 03 c8	 add	 rcx, rax
  00876	48 8b c1	 mov	 rax, rcx
  00879	48 2b 44 24 78	 sub	 rax, QWORD PTR chunked$[rsp]
  0087e	48 89 44 24 58	 mov	 QWORD PTR endpos$[rsp], rax

; 1840 :             break;

  00883	e9 bd 01 00 00	 jmp	 $LN71@textiowrap@14
$LN49@textiowrap@14:

; 1841 :         }
; 1842 : 
; 1843 :         if (endpos > start) {

  00888	48 8b 44 24 60	 mov	 rax, QWORD PTR start$[rsp]
  0088d	48 39 44 24 58	 cmp	 QWORD PTR endpos$[rsp], rax
  00892	0f 8e 06 01 00
	00		 jle	 $LN48@textiowrap@14

; 1844 :             /* No line ending seen yet - put aside current data */
; 1845 :             PyObject *s;
; 1846 :             if (chunks == NULL) {

  00898	48 83 7c 24 70
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  0089e	75 19		 jne	 SHORT $LN47@textiowrap@14

; 1847 :                 chunks = PyList_New(0);

  008a0	33 c9		 xor	 ecx, ecx
  008a2	e8 00 00 00 00	 call	 PyList_New
  008a7	48 89 44 24 70	 mov	 QWORD PTR chunks$[rsp], rax

; 1848 :                 if (chunks == NULL)

  008ac	48 83 7c 24 70
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  008b2	75 05		 jne	 SHORT $LN46@textiowrap@14

; 1849 :                     goto error;

  008b4	e9 44 04 00 00	 jmp	 $error$22585
$LN46@textiowrap@14:
$LN47@textiowrap@14:

; 1850 :             }
; 1851 :             s = PyUnicode_Substring(line, start, endpos);

  008b9	4c 8b 44 24 58	 mov	 r8, QWORD PTR endpos$[rsp]
  008be	48 8b 54 24 60	 mov	 rdx, QWORD PTR start$[rsp]
  008c3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR line$[rsp]
  008c8	e8 00 00 00 00	 call	 PyUnicode_Substring
  008cd	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR s$22658[rsp], rax

; 1852 :             if (s == NULL)

  008d5	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR s$22658[rsp], 0
  008de	75 05		 jne	 SHORT $LN45@textiowrap@14

; 1853 :                 goto error;

  008e0	e9 18 04 00 00	 jmp	 $error$22585
$LN45@textiowrap@14:

; 1854 :             if (PyList_Append(chunks, s) < 0) {

  008e5	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR s$22658[rsp]
  008ed	48 8b 4c 24 70	 mov	 rcx, QWORD PTR chunks$[rsp]
  008f2	e8 00 00 00 00	 call	 PyList_Append
  008f7	85 c0		 test	 eax, eax
  008f9	7d 12		 jge	 SHORT $LN44@textiowrap@14

; 1855 :                 Py_DECREF(s);

  008fb	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR s$22658[rsp]
  00903	e8 00 00 00 00	 call	 _Py_DecRef

; 1856 :                 goto error;

  00908	e9 f0 03 00 00	 jmp	 $error$22585
$LN44@textiowrap@14:

; 1857 :             }
; 1858 :             chunked += PyUnicode_GET_LENGTH(s);

  0090d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR s$22658[rsp]
  00915	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00919	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0091f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00924	85 c0		 test	 eax, eax
  00926	75 1c		 jne	 SHORT $LN107@textiowrap@14
  00928	41 b8 42 07 00
	00		 mov	 r8d, 1858		; 00000742H
  0092e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00935	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@MKPCHAGC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  0093c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00942	33 c0		 xor	 eax, eax
$LN107@textiowrap@14:
  00944	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR s$22658[rsp]
  0094c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0094f	c1 e8 07	 shr	 eax, 7
  00952	83 e0 01	 and	 eax, 1
  00955	85 c0		 test	 eax, eax
  00957	75 1c		 jne	 SHORT $LN108@textiowrap@14
  00959	41 b8 42 07 00
	00		 mov	 r8d, 1858		; 00000742H
  0095f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00966	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GOJFGIBK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  0096d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00973	33 c0		 xor	 eax, eax
$LN108@textiowrap@14:
  00975	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR s$22658[rsp]
  0097d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00981	48 8b 4c 24 78	 mov	 rcx, QWORD PTR chunked$[rsp]
  00986	48 03 c8	 add	 rcx, rax
  00989	48 8b c1	 mov	 rax, rcx
  0098c	48 89 44 24 78	 mov	 QWORD PTR chunked$[rsp], rax

; 1859 :             Py_DECREF(s);

  00991	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR s$22658[rsp]
  00999	e8 00 00 00 00	 call	 _Py_DecRef
$LN48@textiowrap@14:

; 1860 :         }
; 1861 :         /* There may be some remaining bytes we'll have to prepend to the
; 1862 :            next chunk of data */
; 1863 :         if (endpos < line_len) {

  0099e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR line_len$22571[rsp]
  009a6	48 39 44 24 58	 cmp	 QWORD PTR endpos$[rsp], rax
  009ab	7d 29		 jge	 SHORT $LN43@textiowrap@14

; 1864 :             remaining = PyUnicode_Substring(line, endpos, line_len);

  009ad	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR line_len$22571[rsp]
  009b5	48 8b 54 24 58	 mov	 rdx, QWORD PTR endpos$[rsp]
  009ba	48 8b 4c 24 50	 mov	 rcx, QWORD PTR line$[rsp]
  009bf	e8 00 00 00 00	 call	 PyUnicode_Substring
  009c4	48 89 44 24 68	 mov	 QWORD PTR remaining$[rsp], rax

; 1865 :             if (remaining == NULL)

  009c9	48 83 7c 24 68
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  009cf	75 05		 jne	 SHORT $LN42@textiowrap@14

; 1866 :                 goto error;

  009d1	e9 27 03 00 00	 jmp	 $error$22585
$LN42@textiowrap@14:
$LN43@textiowrap@14:
$LN41@textiowrap@14:

; 1867 :         }
; 1868 :         Py_CLEAR(line);

  009d6	48 83 7c 24 50
	00		 cmp	 QWORD PTR line$[rsp], 0
  009dc	74 4d		 je	 SHORT $LN38@textiowrap@14
  009de	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  009e6	4c 8b 4c 24 50	 mov	 r9, QWORD PTR line$[rsp]
  009eb	41 b8 4c 07 00
	00		 mov	 r8d, 1868		; 0000074cH
  009f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  009f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@JAGFCLNN@_textiowrapper_readline?$AA@
  009ff	e8 00 00 00 00	 call	 _PyParallel_Guard
  00a04	85 c0		 test	 eax, eax
  00a06	75 23		 jne	 SHORT $LN38@textiowrap@14
  00a08	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00a0d	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR _py_tmp$22682[rsp], rax
  00a15	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR line$[rsp], 0
  00a1e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22682[rsp]
  00a26	e8 00 00 00 00	 call	 _Py_DecRef
$LN38@textiowrap@14:
  00a2b	33 c0		 xor	 eax, eax
  00a2d	85 c0		 test	 eax, eax
  00a2f	75 a5		 jne	 SHORT $LN41@textiowrap@14

; 1869 :         /* We have consumed the buffer */
; 1870 :         textiowrapper_set_decoded_chars(self, NULL);

  00a31	33 d2		 xor	 edx, edx
  00a33	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00a3b	e8 00 00 00 00	 call	 textiowrapper_set_decoded_chars

; 1871 :     }

  00a40	e9 fb f6 ff ff	 jmp	 $LN72@textiowrap@14
$LN71@textiowrap@14:

; 1872 : 
; 1873 :     if (line != NULL) {

  00a45	48 83 7c 24 50
	00		 cmp	 QWORD PTR line$[rsp], 0
  00a4b	0f 84 31 01 00
	00		 je	 $LN37@textiowrap@14

; 1874 :         /* Our line ends in the current buffer */
; 1875 :         self->decoded_chars_used = endpos - offset_to_buffer;

  00a51	48 8b 44 24 48	 mov	 rax, QWORD PTR offset_to_buffer$[rsp]
  00a56	48 8b 4c 24 58	 mov	 rcx, QWORD PTR endpos$[rsp]
  00a5b	48 2b c8	 sub	 rcx, rax
  00a5e	48 8b c1	 mov	 rax, rcx
  00a61	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00a69	48 89 81 d0 00
	00 00		 mov	 QWORD PTR [rcx+208], rax

; 1876 :         if (start > 0 || endpos < PyUnicode_GET_LENGTH(line)) {

  00a70	48 83 7c 24 60
	00		 cmp	 QWORD PTR start$[rsp], 0
  00a76	7f 76		 jg	 SHORT $LN35@textiowrap@14
  00a78	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00a7d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00a81	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00a87	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00a8c	85 c0		 test	 eax, eax
  00a8e	75 1c		 jne	 SHORT $LN109@textiowrap@14
  00a90	41 b8 54 07 00
	00		 mov	 r8d, 1876		; 00000754H
  00a96	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00a9d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  00aa4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00aaa	33 c0		 xor	 eax, eax
$LN109@textiowrap@14:
  00aac	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00ab1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00ab4	c1 e8 07	 shr	 eax, 7
  00ab7	83 e0 01	 and	 eax, 1
  00aba	85 c0		 test	 eax, eax
  00abc	75 1c		 jne	 SHORT $LN110@textiowrap@14
  00abe	41 b8 54 07 00
	00		 mov	 r8d, 1876		; 00000754H
  00ac4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00acb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  00ad2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ad8	33 c0		 xor	 eax, eax
$LN110@textiowrap@14:
  00ada	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00adf	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00ae3	48 39 44 24 58	 cmp	 QWORD PTR endpos$[rsp], rax
  00ae8	0f 8d 94 00 00
	00		 jge	 $LN36@textiowrap@14
$LN35@textiowrap@14:

; 1877 :             PyObject *s = PyUnicode_Substring(line, start, endpos);

  00aee	4c 8b 44 24 58	 mov	 r8, QWORD PTR endpos$[rsp]
  00af3	48 8b 54 24 60	 mov	 rdx, QWORD PTR start$[rsp]
  00af8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR line$[rsp]
  00afd	e8 00 00 00 00	 call	 PyUnicode_Substring
  00b02	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR s$22696[rsp], rax
$LN34@textiowrap@14:

; 1878 :             Py_CLEAR(line);

  00b0a	48 83 7c 24 50
	00		 cmp	 QWORD PTR line$[rsp], 0
  00b10	74 4d		 je	 SHORT $LN31@textiowrap@14
  00b12	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00b1a	4c 8b 4c 24 50	 mov	 r9, QWORD PTR line$[rsp]
  00b1f	41 b8 56 07 00
	00		 mov	 r8d, 1878		; 00000756H
  00b25	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00b2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@JAGFCLNN@_textiowrapper_readline?$AA@
  00b33	e8 00 00 00 00	 call	 _PyParallel_Guard
  00b38	85 c0		 test	 eax, eax
  00b3a	75 23		 jne	 SHORT $LN31@textiowrap@14
  00b3c	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00b41	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR _py_tmp$22701[rsp], rax
  00b49	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR line$[rsp], 0
  00b52	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22701[rsp]
  00b5a	e8 00 00 00 00	 call	 _Py_DecRef
$LN31@textiowrap@14:
  00b5f	33 c0		 xor	 eax, eax
  00b61	85 c0		 test	 eax, eax
  00b63	75 a5		 jne	 SHORT $LN34@textiowrap@14

; 1879 :             if (s == NULL)

  00b65	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR s$22696[rsp], 0
  00b6e	75 05		 jne	 SHORT $LN30@textiowrap@14

; 1880 :                 goto error;

  00b70	e9 88 01 00 00	 jmp	 $error$22585
$LN30@textiowrap@14:

; 1881 :             line = s;

  00b75	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR s$22696[rsp]
  00b7d	48 89 44 24 50	 mov	 QWORD PTR line$[rsp], rax
$LN36@textiowrap@14:
$LN37@textiowrap@14:

; 1882 :         }
; 1883 :     }
; 1884 :     if (remaining != NULL) {

  00b82	48 83 7c 24 68
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  00b88	0f 84 94 00 00
	00		 je	 $LN29@textiowrap@14

; 1885 :         if (chunks == NULL) {

  00b8e	48 83 7c 24 70
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00b94	75 19		 jne	 SHORT $LN28@textiowrap@14

; 1886 :             chunks = PyList_New(0);

  00b96	33 c9		 xor	 ecx, ecx
  00b98	e8 00 00 00 00	 call	 PyList_New
  00b9d	48 89 44 24 70	 mov	 QWORD PTR chunks$[rsp], rax

; 1887 :             if (chunks == NULL)

  00ba2	48 83 7c 24 70
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00ba8	75 05		 jne	 SHORT $LN27@textiowrap@14

; 1888 :                 goto error;

  00baa	e9 4e 01 00 00	 jmp	 $error$22585
$LN27@textiowrap@14:
$LN28@textiowrap@14:

; 1889 :         }
; 1890 :         if (PyList_Append(chunks, remaining) < 0)

  00baf	48 8b 54 24 68	 mov	 rdx, QWORD PTR remaining$[rsp]
  00bb4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR chunks$[rsp]
  00bb9	e8 00 00 00 00	 call	 PyList_Append
  00bbe	85 c0		 test	 eax, eax
  00bc0	7d 05		 jge	 SHORT $LN26@textiowrap@14

; 1891 :             goto error;

  00bc2	e9 36 01 00 00	 jmp	 $error$22585
$LN26@textiowrap@14:
$LN25@textiowrap@14:

; 1892 :         Py_CLEAR(remaining);

  00bc7	48 83 7c 24 68
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  00bcd	74 4d		 je	 SHORT $LN22@textiowrap@14
  00bcf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00bd7	4c 8b 4c 24 68	 mov	 r9, QWORD PTR remaining$[rsp]
  00bdc	41 b8 64 07 00
	00		 mov	 r8d, 1892		; 00000764H
  00be2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00be9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@JAGFCLNN@_textiowrapper_readline?$AA@
  00bf0	e8 00 00 00 00	 call	 _PyParallel_Guard
  00bf5	85 c0		 test	 eax, eax
  00bf7	75 23		 jne	 SHORT $LN22@textiowrap@14
  00bf9	48 8b 44 24 68	 mov	 rax, QWORD PTR remaining$[rsp]
  00bfe	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR _py_tmp$22718[rsp], rax
  00c06	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR remaining$[rsp], 0
  00c0f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22718[rsp]
  00c17	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@textiowrap@14:
  00c1c	33 c0		 xor	 eax, eax
  00c1e	85 c0		 test	 eax, eax
  00c20	75 a5		 jne	 SHORT $LN25@textiowrap@14
$LN29@textiowrap@14:

; 1893 :     }
; 1894 :     if (chunks != NULL) {

  00c22	48 83 7c 24 70
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00c28	0f 84 a8 00 00
	00		 je	 $LN21@textiowrap@14

; 1895 :         if (line != NULL) {

  00c2e	48 83 7c 24 50
	00		 cmp	 QWORD PTR line$[rsp], 0
  00c34	74 22		 je	 SHORT $LN20@textiowrap@14

; 1896 :             if (PyList_Append(chunks, line) < 0)

  00c36	48 8b 54 24 50	 mov	 rdx, QWORD PTR line$[rsp]
  00c3b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR chunks$[rsp]
  00c40	e8 00 00 00 00	 call	 PyList_Append
  00c45	85 c0		 test	 eax, eax
  00c47	7d 05		 jge	 SHORT $LN19@textiowrap@14

; 1897 :                 goto error;

  00c49	e9 af 00 00 00	 jmp	 $error$22585
$LN19@textiowrap@14:

; 1898 :             Py_DECREF(line);

  00c4e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR line$[rsp]
  00c53	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@textiowrap@14:

; 1899 :         }
; 1900 :         line = PyUnicode_Join(_PyIO_empty_str, chunks);

  00c58	48 8b 54 24 70	 mov	 rdx, QWORD PTR chunks$[rsp]
  00c5d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyIO_empty_str
  00c64	e8 00 00 00 00	 call	 PyUnicode_Join
  00c69	48 89 44 24 50	 mov	 QWORD PTR line$[rsp], rax

; 1901 :         if (line == NULL)

  00c6e	48 83 7c 24 50
	00		 cmp	 QWORD PTR line$[rsp], 0
  00c74	75 05		 jne	 SHORT $LN18@textiowrap@14

; 1902 :             goto error;

  00c76	e9 82 00 00 00	 jmp	 $error$22585
$LN18@textiowrap@14:
$LN17@textiowrap@14:

; 1903 :         Py_CLEAR(chunks);

  00c7b	48 83 7c 24 70
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00c81	74 4d		 je	 SHORT $LN14@textiowrap@14
  00c83	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00c8b	4c 8b 4c 24 70	 mov	 r9, QWORD PTR chunks$[rsp]
  00c90	41 b8 6f 07 00
	00		 mov	 r8d, 1903		; 0000076fH
  00c96	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00c9d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@JAGFCLNN@_textiowrapper_readline?$AA@
  00ca4	e8 00 00 00 00	 call	 _PyParallel_Guard
  00ca9	85 c0		 test	 eax, eax
  00cab	75 23		 jne	 SHORT $LN14@textiowrap@14
  00cad	48 8b 44 24 70	 mov	 rax, QWORD PTR chunks$[rsp]
  00cb2	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR _py_tmp$22734[rsp], rax
  00cba	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR chunks$[rsp], 0
  00cc3	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22734[rsp]
  00ccb	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@textiowrap@14:
  00cd0	33 c0		 xor	 eax, eax
  00cd2	85 c0		 test	 eax, eax
  00cd4	75 a5		 jne	 SHORT $LN17@textiowrap@14
$LN21@textiowrap@14:

; 1904 :     }
; 1905 :     if (line == NULL) {

  00cd6	48 83 7c 24 50
	00		 cmp	 QWORD PTR line$[rsp], 0
  00cdc	75 18		 jne	 SHORT $LN13@textiowrap@14

; 1906 :         Py_INCREF(_PyIO_empty_str);

  00cde	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyIO_empty_str
  00ce5	e8 00 00 00 00	 call	 _Py_IncRef

; 1907 :         line = _PyIO_empty_str;

  00cea	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyIO_empty_str
  00cf1	48 89 44 24 50	 mov	 QWORD PTR line$[rsp], rax
$LN13@textiowrap@14:

; 1908 :     }
; 1909 : 
; 1910 :     return line;

  00cf6	48 8b 44 24 50	 mov	 rax, QWORD PTR line$[rsp]
  00cfb	eb 4a		 jmp	 SHORT $LN85@textiowrap@14
$error$22585:
$LN12@textiowrap@14:

; 1911 : 
; 1912 :   error:
; 1913 :     Py_XDECREF(chunks);

  00cfd	48 83 7c 24 70
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00d03	74 0a		 je	 SHORT $LN9@textiowrap@14
  00d05	48 8b 4c 24 70	 mov	 rcx, QWORD PTR chunks$[rsp]
  00d0a	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@textiowrap@14:
  00d0f	33 c0		 xor	 eax, eax
  00d11	85 c0		 test	 eax, eax
  00d13	75 e8		 jne	 SHORT $LN12@textiowrap@14
$LN8@textiowrap@14:

; 1914 :     Py_XDECREF(remaining);

  00d15	48 83 7c 24 68
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  00d1b	74 0a		 je	 SHORT $LN5@textiowrap@14
  00d1d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR remaining$[rsp]
  00d22	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@textiowrap@14:
  00d27	33 c0		 xor	 eax, eax
  00d29	85 c0		 test	 eax, eax
  00d2b	75 e8		 jne	 SHORT $LN8@textiowrap@14
$LN4@textiowrap@14:

; 1915 :     Py_XDECREF(line);

  00d2d	48 83 7c 24 50
	00		 cmp	 QWORD PTR line$[rsp], 0
  00d33	74 0a		 je	 SHORT $LN1@textiowrap@14
  00d35	48 8b 4c 24 50	 mov	 rcx, QWORD PTR line$[rsp]
  00d3a	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap@14:
  00d3f	33 c0		 xor	 eax, eax
  00d41	85 c0		 test	 eax, eax
  00d43	75 e8		 jne	 SHORT $LN4@textiowrap@14

; 1916 :     return NULL;

  00d45	33 c0		 xor	 eax, eax
$LN85@textiowrap@14:

; 1917 : }

  00d47	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  00d4e	c3		 ret	 0
_textiowrapper_readline ENDP
_TEXT	ENDS
PUBLIC	??_C@_02LJEFBEPN@iy?$AA@			; `string'
PUBLIC	??_C@_0CE@DAADPKGI@can?8t?5restore?5logical?5file?5posit@ ; `string'
PUBLIC	??_C@_02CJECLEMJ@iN?$AA@			; `string'
PUBLIC	??_C@_0EE@FFEGOFII@underlying?5read?$CI?$CJ?5should?5have?5re@ ; `string'
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
PUBLIC	??_C@_0BK@PMNGJLNE@negative?5seek?5position?5?$CFR?$AA@ ; `string'
PUBLIC	??_C@_0CJ@JJIBNOP@invalid?5whence?5?$CI?$CFd?0?5should?5be?50?0@ ; `string'
PUBLIC	??_C@_02PDIHAGKM@ii?$AA@			; `string'
PUBLIC	??_C@_0BD@CMGLLNKH@textiowrapper_seek?$AA@	; `string'
PUBLIC	??_C@_0CE@KBMHBKOP@can?8t?5do?5nonzero?5end?9relative?5se@ ; `string'
PUBLIC	??_C@_0CE@FPAKBAPP@can?8t?5do?5nonzero?5cur?9relative?5se@ ; `string'
PUBLIC	??_C@_0CC@ECIDNDGL@underlying?5stream?5is?5not?5seekabl@ ; `string'
PUBLIC	??_C@_08CCHCKICM@O?$HMi?3seek?$AA@		; `string'
EXTRN	PyUnicode_GetLength:PROC
EXTRN	_PyIO_str_seek:QWORD
EXTRN	PyLong_FromLongLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_seek DD imagerel textiowrapper_seek
	DD	imagerel textiowrapper_seek+2123
	DD	imagerel $unwind$textiowrapper_seek
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_seek DD 021101H
	DD	0150111H
xdata	ENDS
;	COMDAT ??_C@_02LJEFBEPN@iy?$AA@
CONST	SEGMENT
??_C@_02LJEFBEPN@iy?$AA@ DB 'iy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DAADPKGI@can?8t?5restore?5logical?5file?5posit@
CONST	SEGMENT
??_C@_0CE@DAADPKGI@can?8t?5restore?5logical?5file?5posit@ DB 'can''t rest'
	DB	'ore logical file position', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CJECLEMJ@iN?$AA@
CONST	SEGMENT
??_C@_02CJECLEMJ@iN?$AA@ DB 'iN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@FFEGOFII@underlying?5read?$CI?$CJ?5should?5have?5re@
CONST	SEGMENT
??_C@_0EE@FFEGOFII@underlying?5read?$CI?$CJ?5should?5have?5re@ DB 'underl'
	DB	'ying read() should have returned a bytes object, not ''%.200s'
	DB	'''', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PMNGJLNE@negative?5seek?5position?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BK@PMNGJLNE@negative?5seek?5position?5?$CFR?$AA@ DB 'negative seek'
	DB	' position %R', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JJIBNOP@invalid?5whence?5?$CI?$CFd?0?5should?5be?50?0@
CONST	SEGMENT
??_C@_0CJ@JJIBNOP@invalid?5whence?5?$CI?$CFd?0?5should?5be?50?0@ DB 'inva'
	DB	'lid whence (%d, should be 0, 1 or 2)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PDIHAGKM@ii?$AA@
CONST	SEGMENT
??_C@_02PDIHAGKM@ii?$AA@ DB 'ii', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CMGLLNKH@textiowrapper_seek?$AA@
CONST	SEGMENT
??_C@_0BD@CMGLLNKH@textiowrapper_seek?$AA@ DB 'textiowrapper_seek', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KBMHBKOP@can?8t?5do?5nonzero?5end?9relative?5se@
CONST	SEGMENT
??_C@_0CE@KBMHBKOP@can?8t?5do?5nonzero?5end?9relative?5se@ DB 'can''t do '
	DB	'nonzero end-relative seeks', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FPAKBAPP@can?8t?5do?5nonzero?5cur?9relative?5se@
CONST	SEGMENT
??_C@_0CE@FPAKBAPP@can?8t?5do?5nonzero?5cur?9relative?5se@ DB 'can''t do '
	DB	'nonzero cur-relative seeks', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ECIDNDGL@underlying?5stream?5is?5not?5seekabl@
CONST	SEGMENT
??_C@_0CC@ECIDNDGL@underlying?5stream?5is?5not?5seekabl@ DB 'underlying s'
	DB	'tream is not seekable', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08CCHCKICM@O?$HMi?3seek?$AA@
CONST	SEGMENT
??_C@_08CCHCKICM@O?$HMi?3seek?$AA@ DB 'O|i:seek', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_seek
_TEXT	SEGMENT
res$ = 48
posobj$ = 56
whence$ = 64
cookie$ = 72
cookieObj$ = 96
cmp$ = 104
_res$22875 = 112
r$22874 = 120
_py_tmp$22925 = 128
_py_tmp$22964 = 136
decoded$22973 = 144
input_chunk$22971 = 152
self$ = 176
args$ = 184
textiowrapper_seek PROC					; COMDAT

; 2061 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 2062 :     PyObject *cookieObj, *posobj;
; 2063 :     cookie_type cookie;
; 2064 :     int whence = 0;

  00011	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR whence$[rsp], 0

; 2065 :     PyObject *res;
; 2066 :     int cmp;
; 2067 : 
; 2068 :     CHECK_INITIALIZED(self);

  00019	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00021	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00025	7f 3d		 jg	 SHORT $LN63@textiowrap@15
  00027	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0002f	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00033	74 15		 je	 SHORT $LN62@textiowrap@15
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0003c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00043	e8 00 00 00 00	 call	 PyErr_SetString
  00048	eb 13		 jmp	 SHORT $LN61@textiowrap@15
$LN62@textiowrap@15:
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00051	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00058	e8 00 00 00 00	 call	 PyErr_SetString
$LN61@textiowrap@15:
  0005d	33 c0		 xor	 eax, eax
  0005f	e9 df 07 00 00	 jmp	 $LN64@textiowrap@15
$LN63@textiowrap@15:

; 2069 : 
; 2070 :     if (!PyArg_ParseTuple(args, "O|i:seek", &cookieObj, &whence))

  00064	4c 8d 4c 24 40	 lea	 r9, QWORD PTR whence$[rsp]
  00069	4c 8d 44 24 60	 lea	 r8, QWORD PTR cookieObj$[rsp]
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CCHCKICM@O?$HMi?3seek?$AA@
  00075	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0007d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00082	85 c0		 test	 eax, eax
  00084	75 07		 jne	 SHORT $LN60@textiowrap@15

; 2071 :         return NULL;

  00086	33 c0		 xor	 eax, eax
  00088	e9 b6 07 00 00	 jmp	 $LN64@textiowrap@15
$LN60@textiowrap@15:
$LN59@textiowrap@15:

; 2072 :     CHECK_CLOSED(self);

  0008d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTextIOWrapper_Type
  00094	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0009c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a0	0f 85 98 00 00
	00		 jne	 $LN56@textiowrap@15
  000a6	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000ae	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  000b6	74 1a		 je	 SHORT $LN55@textiowrap@15
  000b8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000c0	48 8b 88 f8 00
	00 00		 mov	 rcx, QWORD PTR [rax+248]
  000c7	e8 00 00 00 00	 call	 _PyFileIO_closed
  000cc	89 44 24 78	 mov	 DWORD PTR r$22874[rsp], eax
  000d0	eb 49		 jmp	 SHORT $LN54@textiowrap@15
$LN55@textiowrap@15:
  000d2	33 d2		 xor	 edx, edx
  000d4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000dc	e8 00 00 00 00	 call	 textiowrapper_closed_get
  000e1	48 89 44 24 70	 mov	 QWORD PTR _res$22875[rsp], rax
  000e6	48 83 7c 24 70
	00		 cmp	 QWORD PTR _res$22875[rsp], 0
  000ec	75 07		 jne	 SHORT $LN53@textiowrap@15
  000ee	33 c0		 xor	 eax, eax
  000f0	e9 4e 07 00 00	 jmp	 $LN64@textiowrap@15
$LN53@textiowrap@15:
  000f5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _res$22875[rsp]
  000fa	e8 00 00 00 00	 call	 PyObject_IsTrue
  000ff	89 44 24 78	 mov	 DWORD PTR r$22874[rsp], eax
  00103	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _res$22875[rsp]
  00108	e8 00 00 00 00	 call	 _Py_DecRef
  0010d	83 7c 24 78 00	 cmp	 DWORD PTR r$22874[rsp], 0
  00112	7d 07		 jge	 SHORT $LN52@textiowrap@15
  00114	33 c0		 xor	 eax, eax
  00116	e9 28 07 00 00	 jmp	 $LN64@textiowrap@15
$LN52@textiowrap@15:
$LN54@textiowrap@15:
  0011b	83 7c 24 78 00	 cmp	 DWORD PTR r$22874[rsp], 0
  00120	7e 1a		 jle	 SHORT $LN51@textiowrap@15
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
  00129	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00130	e8 00 00 00 00	 call	 PyErr_SetString
  00135	33 c0		 xor	 eax, eax
  00137	e9 07 07 00 00	 jmp	 $LN64@textiowrap@15
$LN51@textiowrap@15:
  0013c	eb 20		 jmp	 SHORT $LN50@textiowrap@15
$LN56@textiowrap@15:
  0013e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00145	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0014d	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  00152	48 85 c0	 test	 rax, rax
  00155	75 07		 jne	 SHORT $LN49@textiowrap@15
  00157	33 c0		 xor	 eax, eax
  00159	e9 e5 06 00 00	 jmp	 $LN64@textiowrap@15
$LN49@textiowrap@15:
$LN50@textiowrap@15:
  0015e	33 c0		 xor	 eax, eax
  00160	85 c0		 test	 eax, eax
  00162	0f 85 25 ff ff
	ff		 jne	 $LN59@textiowrap@15

; 2073 : 
; 2074 :     Py_INCREF(cookieObj);

  00168	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookieObj$[rsp]
  0016d	e8 00 00 00 00	 call	 _Py_IncRef

; 2075 : 
; 2076 :     if (!self->seekable) {

  00172	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0017a	0f be 80 ad 00
	00 00		 movsx	 eax, BYTE PTR [rax+173]
  00181	85 c0		 test	 eax, eax
  00183	75 11		 jne	 SHORT $LN48@textiowrap@15

; 2077 :         _unsupported("underlying stream is not seekable");

  00185	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@ECIDNDGL@underlying?5stream?5is?5not?5seekabl@
  0018c	e8 00 00 00 00	 call	 _unsupported

; 2078 :         goto fail;

  00191	e9 93 06 00 00	 jmp	 $fail$22899
$LN48@textiowrap@15:

; 2079 :     }
; 2080 : 
; 2081 :     if (whence == 1) {

  00196	83 7c 24 40 01	 cmp	 DWORD PTR whence$[rsp], 1
  0019b	0f 85 8d 00 00
	00		 jne	 $LN47@textiowrap@15

; 2082 :         /* seek relative to current position */
; 2083 :         cmp = PyObject_RichCompareBool(cookieObj, _PyIO_zero, Py_EQ);

  001a1	41 b8 02 00 00
	00		 mov	 r8d, 2
  001a7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_zero
  001ae	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookieObj$[rsp]
  001b3	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  001b8	89 44 24 68	 mov	 DWORD PTR cmp$[rsp], eax

; 2084 :         if (cmp < 0)

  001bc	83 7c 24 68 00	 cmp	 DWORD PTR cmp$[rsp], 0
  001c1	7d 05		 jge	 SHORT $LN46@textiowrap@15

; 2085 :             goto fail;

  001c3	e9 61 06 00 00	 jmp	 $fail$22899
$LN46@textiowrap@15:

; 2086 : 
; 2087 :         if (cmp == 0) {

  001c8	83 7c 24 68 00	 cmp	 DWORD PTR cmp$[rsp], 0
  001cd	75 11		 jne	 SHORT $LN45@textiowrap@15

; 2088 :             _unsupported("can't do nonzero cur-relative seeks");

  001cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@FPAKBAPP@can?8t?5do?5nonzero?5cur?9relative?5se@
  001d6	e8 00 00 00 00	 call	 _unsupported

; 2089 :             goto fail;

  001db	e9 49 06 00 00	 jmp	 $fail$22899
$LN45@textiowrap@15:

; 2090 :         }
; 2091 : 
; 2092 :         /* Seeking to the current position should attempt to
; 2093 :          * sync the underlying buffer with the current position.
; 2094 :          */
; 2095 :         Py_DECREF(cookieObj);

  001e0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookieObj$[rsp]
  001e5	e8 00 00 00 00	 call	 _Py_DecRef

; 2096 :         cookieObj = _PyObject_CallMethodId((PyObject *)self, &PyId_tell, NULL);

  001ea	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_tell
  001ef	8b c0		 mov	 eax, eax
  001f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001f7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00200	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00204	45 33 c0	 xor	 r8d, r8d
  00207	48 8b d0	 mov	 rdx, rax
  0020a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00212	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00217	48 89 44 24 60	 mov	 QWORD PTR cookieObj$[rsp], rax

; 2097 :         if (cookieObj == NULL)

  0021c	48 83 7c 24 60
	00		 cmp	 QWORD PTR cookieObj$[rsp], 0
  00222	75 05		 jne	 SHORT $LN44@textiowrap@15

; 2098 :             goto fail;

  00224	e9 00 06 00 00	 jmp	 $fail$22899
$LN44@textiowrap@15:

; 2099 :     }
; 2100 :     else if (whence == 2) {

  00229	e9 18 02 00 00	 jmp	 $LN43@textiowrap@15
$LN47@textiowrap@15:
  0022e	83 7c 24 40 02	 cmp	 DWORD PTR whence$[rsp], 2
  00233	0f 85 e9 01 00
	00		 jne	 $LN42@textiowrap@15

; 2101 :         /* seek relative to end of file */
; 2102 :         cmp = PyObject_RichCompareBool(cookieObj, _PyIO_zero, Py_EQ);

  00239	41 b8 02 00 00
	00		 mov	 r8d, 2
  0023f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_zero
  00246	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookieObj$[rsp]
  0024b	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00250	89 44 24 68	 mov	 DWORD PTR cmp$[rsp], eax

; 2103 :         if (cmp < 0)

  00254	83 7c 24 68 00	 cmp	 DWORD PTR cmp$[rsp], 0
  00259	7d 05		 jge	 SHORT $LN41@textiowrap@15

; 2104 :             goto fail;

  0025b	e9 c9 05 00 00	 jmp	 $fail$22899
$LN41@textiowrap@15:

; 2105 : 
; 2106 :         if (cmp == 0) {

  00260	83 7c 24 68 00	 cmp	 DWORD PTR cmp$[rsp], 0
  00265	75 11		 jne	 SHORT $LN40@textiowrap@15

; 2107 :             _unsupported("can't do nonzero end-relative seeks");

  00267	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@KBMHBKOP@can?8t?5do?5nonzero?5end?9relative?5se@
  0026e	e8 00 00 00 00	 call	 _unsupported

; 2108 :             goto fail;

  00273	e9 b1 05 00 00	 jmp	 $fail$22899
$LN40@textiowrap@15:

; 2109 :         }
; 2110 : 
; 2111 :         res = _PyObject_CallMethodId((PyObject *)self, &PyId_flush, NULL);

  00278	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_flush
  0027d	8b c0		 mov	 eax, eax
  0027f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00285	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0028e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00292	45 33 c0	 xor	 r8d, r8d
  00295	48 8b d0	 mov	 rdx, rax
  00298	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002a0	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  002a5	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 2112 :         if (res == NULL)

  002aa	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  002b0	75 05		 jne	 SHORT $LN39@textiowrap@15

; 2113 :             goto fail;

  002b2	e9 72 05 00 00	 jmp	 $fail$22899
$LN39@textiowrap@15:

; 2114 :         Py_DECREF(res);

  002b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  002bc	e8 00 00 00 00	 call	 _Py_DecRef

; 2115 : 
; 2116 :         textiowrapper_set_decoded_chars(self, NULL);

  002c1	33 d2		 xor	 edx, edx
  002c3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002cb	e8 00 00 00 00	 call	 textiowrapper_set_decoded_chars
$LN38@textiowrap@15:

; 2117 :         Py_CLEAR(self->snapshot);

  002d0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002d8	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  002e0	74 6b		 je	 SHORT $LN35@textiowrap@15
  002e2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002ea	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002f2	4c 8b 88 e8 00
	00 00		 mov	 r9, QWORD PTR [rax+232]
  002f9	41 b8 45 08 00
	00		 mov	 r8d, 2117		; 00000845H
  002ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00306	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@CMGLLNKH@textiowrapper_seek?$AA@
  0030d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00312	85 c0		 test	 eax, eax
  00314	75 37		 jne	 SHORT $LN35@textiowrap@15
  00316	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0031e	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  00325	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _py_tmp$22925[rsp], rax
  0032d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00335	48 c7 80 e8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+232], 0
  00340	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22925[rsp]
  00348	e8 00 00 00 00	 call	 _Py_DecRef
$LN35@textiowrap@15:
  0034d	33 c0		 xor	 eax, eax
  0034f	85 c0		 test	 eax, eax
  00351	0f 85 79 ff ff
	ff		 jne	 $LN38@textiowrap@15

; 2118 :         if (self->decoder) {

  00357	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0035f	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00367	74 50		 je	 SHORT $LN34@textiowrap@15

; 2119 :             res = _PyObject_CallMethodId(self->decoder, &PyId_reset, NULL);

  00369	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_reset
  0036e	8b c0		 mov	 eax, eax
  00370	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00376	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0037f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00383	45 33 c0	 xor	 r8d, r8d
  00386	48 8b d0	 mov	 rdx, rax
  00389	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00391	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00398	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0039d	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 2120 :             if (res == NULL)

  003a2	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  003a8	75 05		 jne	 SHORT $LN33@textiowrap@15

; 2121 :                 goto fail;

  003aa	e9 7a 04 00 00	 jmp	 $fail$22899
$LN33@textiowrap@15:

; 2122 :             Py_DECREF(res);

  003af	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  003b4	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@textiowrap@15:

; 2123 :         }
; 2124 : 
; 2125 :         res = _PyObject_CallMethodId(self->buffer, &PyId_seek, "ii", 0, 2);

  003b9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_seek
  003be	8b c0		 mov	 eax, eax
  003c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003c6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003cf	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003d3	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  003db	45 33 c9	 xor	 r9d, r9d
  003de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02PDIHAGKM@ii?$AA@
  003e5	48 8b d0	 mov	 rdx, rax
  003e8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003f0	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  003f4	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  003f9	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax
$LN32@textiowrap@15:

; 2126 :         Py_XDECREF(cookieObj);

  003fe	48 83 7c 24 60
	00		 cmp	 QWORD PTR cookieObj$[rsp], 0
  00404	74 0a		 je	 SHORT $LN29@textiowrap@15
  00406	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookieObj$[rsp]
  0040b	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@textiowrap@15:
  00410	33 c0		 xor	 eax, eax
  00412	85 c0		 test	 eax, eax
  00414	75 e8		 jne	 SHORT $LN32@textiowrap@15

; 2127 :         return res;

  00416	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  0041b	e9 23 04 00 00	 jmp	 $LN64@textiowrap@15
  00420	eb 24		 jmp	 SHORT $LN28@textiowrap@15
$LN42@textiowrap@15:

; 2128 :     }
; 2129 :     else if (whence != 0) {

  00422	83 7c 24 40 00	 cmp	 DWORD PTR whence$[rsp], 0
  00427	74 1d		 je	 SHORT $LN27@textiowrap@15

; 2130 :         PyErr_Format(PyExc_ValueError,
; 2131 :                      "invalid whence (%d, should be 0, 1 or 2)", whence);

  00429	44 8b 44 24 40	 mov	 r8d, DWORD PTR whence$[rsp]
  0042e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@JJIBNOP@invalid?5whence?5?$CI?$CFd?0?5should?5be?50?0@
  00435	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0043c	e8 00 00 00 00	 call	 PyErr_Format

; 2132 :         goto fail;

  00441	e9 e3 03 00 00	 jmp	 $fail$22899
$LN27@textiowrap@15:
$LN28@textiowrap@15:
$LN43@textiowrap@15:

; 2133 :     }
; 2134 : 
; 2135 :     cmp = PyObject_RichCompareBool(cookieObj, _PyIO_zero, Py_LT);

  00446	45 33 c0	 xor	 r8d, r8d
  00449	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_zero
  00450	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookieObj$[rsp]
  00455	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0045a	89 44 24 68	 mov	 DWORD PTR cmp$[rsp], eax

; 2136 :     if (cmp < 0)

  0045e	83 7c 24 68 00	 cmp	 DWORD PTR cmp$[rsp], 0
  00463	7d 05		 jge	 SHORT $LN26@textiowrap@15

; 2137 :         goto fail;

  00465	e9 bf 03 00 00	 jmp	 $fail$22899
$LN26@textiowrap@15:

; 2138 : 
; 2139 :     if (cmp == 1) {

  0046a	83 7c 24 68 01	 cmp	 DWORD PTR cmp$[rsp], 1
  0046f	75 1d		 jne	 SHORT $LN25@textiowrap@15

; 2140 :         PyErr_Format(PyExc_ValueError,
; 2141 :                      "negative seek position %R", cookieObj);

  00471	4c 8b 44 24 60	 mov	 r8, QWORD PTR cookieObj$[rsp]
  00476	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PMNGJLNE@negative?5seek?5position?5?$CFR?$AA@
  0047d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00484	e8 00 00 00 00	 call	 PyErr_Format

; 2142 :         goto fail;

  00489	e9 9b 03 00 00	 jmp	 $fail$22899
$LN25@textiowrap@15:

; 2143 :     }
; 2144 : 
; 2145 :     res = PyObject_CallMethodObjArgs((PyObject *)self, _PyIO_str_flush, NULL);

  0048e	45 33 c0	 xor	 r8d, r8d
  00491	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  00498	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004a0	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  004a5	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 2146 :     if (res == NULL)

  004aa	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  004b0	75 05		 jne	 SHORT $LN24@textiowrap@15

; 2147 :         goto fail;

  004b2	e9 72 03 00 00	 jmp	 $fail$22899
$LN24@textiowrap@15:

; 2148 :     Py_DECREF(res);

  004b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  004bc	e8 00 00 00 00	 call	 _Py_DecRef

; 2149 : 
; 2150 :     /* The strategy of seek() is to go back to the safe start point
; 2151 :      * and replay the effect of read(chars_to_skip) from there.
; 2152 :      */
; 2153 :     if (textiowrapper_parse_cookie(&cookie, cookieObj) < 0)

  004c1	48 8b 54 24 60	 mov	 rdx, QWORD PTR cookieObj$[rsp]
  004c6	48 8d 4c 24 48	 lea	 rcx, QWORD PTR cookie$[rsp]
  004cb	e8 00 00 00 00	 call	 textiowrapper_parse_cookie
  004d0	85 c0		 test	 eax, eax
  004d2	7d 05		 jge	 SHORT $LN23@textiowrap@15

; 2154 :         goto fail;

  004d4	e9 50 03 00 00	 jmp	 $fail$22899
$LN23@textiowrap@15:

; 2155 : 
; 2156 :     /* Seek back to the safe start point. */
; 2157 :     posobj = PyLong_FromOff_t(cookie.start_pos);

  004d9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR cookie$[rsp]
  004de	e8 00 00 00 00	 call	 PyLong_FromLongLong
  004e3	48 89 44 24 38	 mov	 QWORD PTR posobj$[rsp], rax

; 2158 :     if (posobj == NULL)

  004e8	48 83 7c 24 38
	00		 cmp	 QWORD PTR posobj$[rsp], 0
  004ee	75 05		 jne	 SHORT $LN22@textiowrap@15

; 2159 :         goto fail;

  004f0	e9 34 03 00 00	 jmp	 $fail$22899
$LN22@textiowrap@15:

; 2160 :     res = PyObject_CallMethodObjArgs(self->buffer,
; 2161 :                                      _PyIO_str_seek, posobj, NULL);

  004f5	45 33 c9	 xor	 r9d, r9d
  004f8	4c 8b 44 24 38	 mov	 r8, QWORD PTR posobj$[rsp]
  004fd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_seek
  00504	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0050c	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00510	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00515	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 2162 :     Py_DECREF(posobj);

  0051a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR posobj$[rsp]
  0051f	e8 00 00 00 00	 call	 _Py_DecRef

; 2163 :     if (res == NULL)

  00524	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0052a	75 05		 jne	 SHORT $LN21@textiowrap@15

; 2164 :         goto fail;

  0052c	e9 f8 02 00 00	 jmp	 $fail$22899
$LN21@textiowrap@15:

; 2165 :     Py_DECREF(res);

  00531	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00536	e8 00 00 00 00	 call	 _Py_DecRef

; 2166 : 
; 2167 :     textiowrapper_set_decoded_chars(self, NULL);

  0053b	33 d2		 xor	 edx, edx
  0053d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00545	e8 00 00 00 00	 call	 textiowrapper_set_decoded_chars
$LN20@textiowrap@15:

; 2168 :     Py_CLEAR(self->snapshot);

  0054a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00552	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  0055a	74 6b		 je	 SHORT $LN17@textiowrap@15
  0055c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00564	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0056c	4c 8b 88 e8 00
	00 00		 mov	 r9, QWORD PTR [rax+232]
  00573	41 b8 78 08 00
	00		 mov	 r8d, 2168		; 00000878H
  00579	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00580	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@CMGLLNKH@textiowrapper_seek?$AA@
  00587	e8 00 00 00 00	 call	 _PyParallel_Guard
  0058c	85 c0		 test	 eax, eax
  0058e	75 37		 jne	 SHORT $LN17@textiowrap@15
  00590	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00598	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  0059f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _py_tmp$22964[rsp], rax
  005a7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005af	48 c7 80 e8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+232], 0
  005ba	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22964[rsp]
  005c2	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@textiowrap@15:
  005c7	33 c0		 xor	 eax, eax
  005c9	85 c0		 test	 eax, eax
  005cb	0f 85 79 ff ff
	ff		 jne	 $LN20@textiowrap@15

; 2169 : 
; 2170 :     /* Restore the decoder to its state from the safe start point. */
; 2171 :     if (self->decoder) {

  005d1	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005d9	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  005e1	74 1b		 je	 SHORT $LN16@textiowrap@15

; 2172 :         if (_textiowrapper_decoder_setstate(self, &cookie) < 0)

  005e3	48 8d 54 24 48	 lea	 rdx, QWORD PTR cookie$[rsp]
  005e8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  005f0	e8 00 00 00 00	 call	 _textiowrapper_decoder_setstate
  005f5	85 c0		 test	 eax, eax
  005f7	7d 05		 jge	 SHORT $LN15@textiowrap@15

; 2173 :             goto fail;

  005f9	e9 2b 02 00 00	 jmp	 $fail$22899
$LN15@textiowrap@15:
$LN16@textiowrap@15:

; 2174 :     }
; 2175 : 
; 2176 :     if (cookie.chars_to_skip) {

  005fe	83 7c 24 58 00	 cmp	 DWORD PTR cookie$[rsp+16], 0
  00603	0f 84 b5 01 00
	00		 je	 $LN14@textiowrap@15

; 2177 :         /* Just like _read_chunk, feed the decoder and save a snapshot. */
; 2178 :         PyObject *input_chunk = _PyObject_CallMethodId(
; 2179 :             self->buffer, &PyId_read, "i", cookie.bytes_to_feed);

  00609	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_read
  0060e	8b c0		 mov	 eax, eax
  00610	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00616	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0061f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00623	44 8b 4c 24 54	 mov	 r9d, DWORD PTR cookie$[rsp+12]
  00628	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  0062f	48 8b d0	 mov	 rdx, rax
  00632	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0063a	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0063e	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00643	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR input_chunk$22971[rsp], rax

; 2180 :         PyObject *decoded;
; 2181 : 
; 2182 :         if (input_chunk == NULL)

  0064b	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR input_chunk$22971[rsp], 0
  00654	75 05		 jne	 SHORT $LN13@textiowrap@15

; 2183 :             goto fail;

  00656	e9 ce 01 00 00	 jmp	 $fail$22899
$LN13@textiowrap@15:

; 2184 : 
; 2185 :         if (!PyBytes_Check(input_chunk)) {

  0065b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR input_chunk$22971[rsp]
  00663	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00667	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0066d	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00672	85 c0		 test	 eax, eax
  00674	75 35		 jne	 SHORT $LN12@textiowrap@15

; 2186 :             PyErr_Format(PyExc_TypeError,
; 2187 :                          "underlying read() should have returned a bytes "
; 2188 :                          "object, not '%.200s'",
; 2189 :                          Py_TYPE(input_chunk)->tp_name);

  00676	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR input_chunk$22971[rsp]
  0067e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00682	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00686	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EE@FFEGOFII@underlying?5read?$CI?$CJ?5should?5have?5re@
  0068d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00694	e8 00 00 00 00	 call	 PyErr_Format

; 2190 :             Py_DECREF(input_chunk);

  00699	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR input_chunk$22971[rsp]
  006a1	e8 00 00 00 00	 call	 _Py_DecRef

; 2191 :             goto fail;

  006a6	e9 7e 01 00 00	 jmp	 $fail$22899
$LN12@textiowrap@15:

; 2192 :         }
; 2193 : 
; 2194 :         self->snapshot = Py_BuildValue("iN", cookie.dec_flags, input_chunk);

  006ab	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR input_chunk$22971[rsp]
  006b3	8b 54 24 50	 mov	 edx, DWORD PTR cookie$[rsp+8]
  006b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02CJECLEMJ@iN?$AA@
  006be	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  006c3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  006cb	48 89 81 e8 00
	00 00		 mov	 QWORD PTR [rcx+232], rax

; 2195 :         if (self->snapshot == NULL) {

  006d2	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  006da	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  006e2	75 12		 jne	 SHORT $LN11@textiowrap@15

; 2196 :             Py_DECREF(input_chunk);

  006e4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR input_chunk$22971[rsp]
  006ec	e8 00 00 00 00	 call	 _Py_DecRef

; 2197 :             goto fail;

  006f1	e9 33 01 00 00	 jmp	 $fail$22899
$LN11@textiowrap@15:

; 2198 :         }
; 2199 : 
; 2200 :         decoded = _PyObject_CallMethodId(self->decoder, &PyId_decode,
; 2201 :             "Oi", input_chunk, (int)cookie.need_eof);

  006f6	0f be 44 24 5c	 movsx	 eax, BYTE PTR cookie$[rsp+20]
  006fb	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId_decode
  00700	8b c9		 mov	 ecx, ecx
  00702	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  00708	65 4c 8b 04 25
	58 00 00 00	 mov	 r8, QWORD PTR gs:88
  00711	49 03 0c d0	 add	 rcx, QWORD PTR [r8+rdx*8]
  00715	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00719	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR input_chunk$22971[rsp]
  00721	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  00728	48 8b d1	 mov	 rdx, rcx
  0072b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00733	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0073a	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0073f	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR decoded$22973[rsp], rax

; 2202 : 
; 2203 :         if (check_decoded(decoded) < 0)

  00747	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR decoded$22973[rsp]
  0074f	e8 00 00 00 00	 call	 check_decoded
  00754	85 c0		 test	 eax, eax
  00756	7d 05		 jge	 SHORT $LN10@textiowrap@15

; 2204 :             goto fail;

  00758	e9 cc 00 00 00	 jmp	 $fail$22899
$LN10@textiowrap@15:

; 2205 : 
; 2206 :         textiowrapper_set_decoded_chars(self, decoded);

  0075d	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR decoded$22973[rsp]
  00765	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0076d	e8 00 00 00 00	 call	 textiowrapper_set_decoded_chars

; 2207 : 
; 2208 :         /* Skip chars_to_skip of the decoded characters. */
; 2209 :         if (PyUnicode_GetLength(self->decoded_chars) < cookie.chars_to_skip) {

  00772	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0077a	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  00781	e8 00 00 00 00	 call	 PyUnicode_GetLength
  00786	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR cookie$[rsp+16]
  0078b	48 3b c1	 cmp	 rax, rcx
  0078e	7d 18		 jge	 SHORT $LN9@textiowrap@15

; 2210 :             PyErr_SetString(PyExc_IOError, "can't restore logical file position");

  00790	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@DAADPKGI@can?8t?5restore?5logical?5file?5posit@
  00797	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  0079e	e8 00 00 00 00	 call	 PyErr_SetString

; 2211 :             goto fail;

  007a3	e9 81 00 00 00	 jmp	 $fail$22899
$LN9@textiowrap@15:

; 2212 :         }
; 2213 :         self->decoded_chars_used = cookie.chars_to_skip;

  007a8	48 63 44 24 58	 movsxd	 rax, DWORD PTR cookie$[rsp+16]
  007ad	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  007b5	48 89 81 d0 00
	00 00		 mov	 QWORD PTR [rcx+208], rax

; 2214 :     }
; 2215 :     else {

  007bc	eb 3a		 jmp	 SHORT $LN8@textiowrap@15
$LN14@textiowrap@15:

; 2216 :         self->snapshot = Py_BuildValue("iy", cookie.dec_flags, "");

  007be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  007c5	8b 54 24 50	 mov	 edx, DWORD PTR cookie$[rsp+8]
  007c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02LJEFBEPN@iy?$AA@
  007d0	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  007d5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  007dd	48 89 81 e8 00
	00 00		 mov	 QWORD PTR [rcx+232], rax

; 2217 :         if (self->snapshot == NULL)

  007e4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  007ec	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  007f4	75 02		 jne	 SHORT $LN7@textiowrap@15

; 2218 :             goto fail;

  007f6	eb 31		 jmp	 SHORT $fail$22899
$LN7@textiowrap@15:
$LN8@textiowrap@15:

; 2219 :     }
; 2220 : 
; 2221 :     /* Finally, reset the encoder (merely useful for proper BOM handling) */
; 2222 :     if (self->encoder) {

  007f8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00800	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00808	74 18		 je	 SHORT $LN6@textiowrap@15

; 2223 :         if (_textiowrapper_encoder_setstate(self, &cookie) < 0)

  0080a	48 8d 54 24 48	 lea	 rdx, QWORD PTR cookie$[rsp]
  0080f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00817	e8 00 00 00 00	 call	 _textiowrapper_encoder_setstate
  0081c	85 c0		 test	 eax, eax
  0081e	7d 02		 jge	 SHORT $LN5@textiowrap@15

; 2224 :             goto fail;

  00820	eb 07		 jmp	 SHORT $fail$22899
$LN5@textiowrap@15:
$LN6@textiowrap@15:

; 2225 :     }
; 2226 :     return cookieObj;

  00822	48 8b 44 24 60	 mov	 rax, QWORD PTR cookieObj$[rsp]
  00827	eb 1a		 jmp	 SHORT $LN64@textiowrap@15
$fail$22899:
$LN4@textiowrap@15:

; 2227 :   fail:
; 2228 :     Py_XDECREF(cookieObj);

  00829	48 83 7c 24 60
	00		 cmp	 QWORD PTR cookieObj$[rsp], 0
  0082f	74 0a		 je	 SHORT $LN1@textiowrap@15
  00831	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookieObj$[rsp]
  00836	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap@15:
  0083b	33 c0		 xor	 eax, eax
  0083d	85 c0		 test	 eax, eax
  0083f	75 e8		 jne	 SHORT $LN4@textiowrap@15

; 2229 :     return NULL;

  00841	33 c0		 xor	 eax, eax
$LN64@textiowrap@15:

; 2230 : 
; 2231 : }

  00843	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0084a	c3		 ret	 0
textiowrapper_seek ENDP
_TEXT	ENDS
EXTRN	_PyLong_AsByteArray:PROC
EXTRN	PyNumber_Long:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_parse_cookie DD imagerel textiowrapper_parse_cookie
	DD	imagerel textiowrapper_parse_cookie+256
	DD	imagerel $unwind$textiowrapper_parse_cookie
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_parse_cookie DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_parse_cookie
_TEXT	SEGMENT
cookieLong$ = 48
buffer$ = 56
cookie$ = 96
cookieObj$ = 104
textiowrapper_parse_cookie PROC				; COMDAT

; 1981 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1982 :     unsigned char buffer[COOKIE_BUF_LEN];
; 1983 :     PyLongObject *cookieLong = (PyLongObject *)PyNumber_Long(cookieObj);

  0000e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR cookieObj$[rsp]
  00013	e8 00 00 00 00	 call	 PyNumber_Long
  00018	48 89 44 24 30	 mov	 QWORD PTR cookieLong$[rsp], rax

; 1984 :     if (cookieLong == NULL)

  0001d	48 83 7c 24 30
	00		 cmp	 QWORD PTR cookieLong$[rsp], 0
  00023	75 0a		 jne	 SHORT $LN2@textiowrap@16

; 1985 :         return -1;

  00025	b8 ff ff ff ff	 mov	 eax, -1
  0002a	e9 cc 00 00 00	 jmp	 $LN3@textiowrap@16
$LN2@textiowrap@16:

; 1986 : 
; 1987 :     if (_PyLong_AsByteArray(cookieLong, buffer, sizeof(buffer),
; 1988 :                             IS_LITTLE_ENDIAN, 0) < 0) {

  0002f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00037	41 b9 01 00 00
	00		 mov	 r9d, 1
  0003d	41 b8 15 00 00
	00		 mov	 r8d, 21
  00043	48 8d 54 24 38	 lea	 rdx, QWORD PTR buffer$[rsp]
  00048	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cookieLong$[rsp]
  0004d	e8 00 00 00 00	 call	 _PyLong_AsByteArray
  00052	85 c0		 test	 eax, eax
  00054	7d 14		 jge	 SHORT $LN1@textiowrap@16

; 1989 :         Py_DECREF(cookieLong);

  00056	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cookieLong$[rsp]
  0005b	e8 00 00 00 00	 call	 _Py_DecRef

; 1990 :         return -1;

  00060	b8 ff ff ff ff	 mov	 eax, -1
  00065	e9 91 00 00 00	 jmp	 $LN3@textiowrap@16
$LN1@textiowrap@16:

; 1991 :     }
; 1992 :     Py_DECREF(cookieLong);

  0006a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cookieLong$[rsp]
  0006f	e8 00 00 00 00	 call	 _Py_DecRef

; 1993 : 
; 1994 :     memcpy(&cookie->start_pos, buffer + OFF_START_POS, sizeof(cookie->start_pos));

  00074	41 b8 08 00 00
	00		 mov	 r8d, 8
  0007a	48 8d 54 24 38	 lea	 rdx, QWORD PTR buffer$[rsp]
  0007f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookie$[rsp]
  00084	e8 00 00 00 00	 call	 memcpy

; 1995 :     memcpy(&cookie->dec_flags, buffer + OFF_DEC_FLAGS, sizeof(cookie->dec_flags));

  00089	48 8d 44 24 40	 lea	 rax, QWORD PTR buffer$[rsp+8]
  0008e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookie$[rsp]
  00093	48 83 c1 08	 add	 rcx, 8
  00097	41 b8 04 00 00
	00		 mov	 r8d, 4
  0009d	48 8b d0	 mov	 rdx, rax
  000a0	e8 00 00 00 00	 call	 memcpy

; 1996 :     memcpy(&cookie->bytes_to_feed, buffer + OFF_BYTES_TO_FEED, sizeof(cookie->bytes_to_feed));

  000a5	48 8d 44 24 44	 lea	 rax, QWORD PTR buffer$[rsp+12]
  000aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookie$[rsp]
  000af	48 83 c1 0c	 add	 rcx, 12
  000b3	41 b8 04 00 00
	00		 mov	 r8d, 4
  000b9	48 8b d0	 mov	 rdx, rax
  000bc	e8 00 00 00 00	 call	 memcpy

; 1997 :     memcpy(&cookie->chars_to_skip, buffer + OFF_CHARS_TO_SKIP, sizeof(cookie->chars_to_skip));

  000c1	48 8d 44 24 48	 lea	 rax, QWORD PTR buffer$[rsp+16]
  000c6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookie$[rsp]
  000cb	48 83 c1 10	 add	 rcx, 16
  000cf	41 b8 04 00 00
	00		 mov	 r8d, 4
  000d5	48 8b d0	 mov	 rdx, rax
  000d8	e8 00 00 00 00	 call	 memcpy

; 1998 :     memcpy(&cookie->need_eof, buffer + OFF_NEED_EOF, sizeof(cookie->need_eof));

  000dd	48 8d 44 24 4c	 lea	 rax, QWORD PTR buffer$[rsp+20]
  000e2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cookie$[rsp]
  000e7	48 83 c1 14	 add	 rcx, 20
  000eb	41 b8 01 00 00
	00		 mov	 r8d, 1
  000f1	48 8b d0	 mov	 rdx, rax
  000f4	e8 00 00 00 00	 call	 memcpy

; 1999 : 
; 2000 :     return 0;

  000f9	33 c0		 xor	 eax, eax
$LN3@textiowrap@16:

; 2001 : }

  000fb	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ff	c3		 ret	 0
textiowrapper_parse_cookie ENDP
_TEXT	ENDS
PUBLIC	??_C@_06LEAIAIJC@?$CI?$CIyi?$CJ?$CJ?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_textiowrapper_decoder_setstate DD imagerel _textiowrapper_decoder_setstate
	DD	imagerel _textiowrapper_decoder_setstate+179
	DD	imagerel $unwind$_textiowrapper_decoder_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_textiowrapper_decoder_setstate DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_06LEAIAIJC@?$CI?$CIyi?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_06LEAIAIJC@?$CI?$CIyi?$CJ?$CJ?$AA@ DB '((yi))', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _textiowrapper_decoder_setstate
_TEXT	SEGMENT
res$ = 48
self$ = 80
cookie$ = 88
_textiowrapper_decoder_setstate PROC			; COMDAT

; 2020 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2021 :     PyObject *res;
; 2022 :     /* When seeking to the start of the stream, we call decoder.reset()
; 2023 :        rather than decoder.getstate().
; 2024 :        This is for a few decoders such as utf-16 for which the state value
; 2025 :        at start is not (b"", 0) but e.g. (b"", 2) (meaning, in the case of
; 2026 :        utf-16, that we are expecting a BOM).
; 2027 :     */
; 2028 :     if (cookie->start_pos == 0 && cookie->dec_flags == 0)

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR cookie$[rsp]
  00013	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00017	75 2d		 jne	 SHORT $LN3@textiowrap@17
  00019	48 8b 44 24 58	 mov	 rax, QWORD PTR cookie$[rsp]
  0001e	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00022	75 22		 jne	 SHORT $LN3@textiowrap@17

; 2029 :         res = PyObject_CallMethodObjArgs(self->decoder, _PyIO_str_reset, NULL);

  00024	45 33 c0	 xor	 r8d, r8d
  00027	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_reset
  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00033	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0003a	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0003f	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 2030 :     else

  00044	eb 4d		 jmp	 SHORT $LN2@textiowrap@17
$LN3@textiowrap@17:

; 2031 :         res = _PyObject_CallMethodId(self->decoder, &PyId_setstate,
; 2032 :                                      "((yi))", "", cookie->dec_flags);

  00046	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_setstate
  0004b	8b c0		 mov	 eax, eax
  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00053	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0005c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00060	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cookie$[rsp]
  00065	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00068	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0006c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00073	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06LEAIAIJC@?$CI?$CIyi?$CJ?$CJ?$AA@
  0007a	48 8b d0	 mov	 rdx, rax
  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00082	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00089	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0008e	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax
$LN2@textiowrap@17:

; 2033 :     if (res == NULL)

  00093	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00099	75 07		 jne	 SHORT $LN1@textiowrap@17

; 2034 :         return -1;

  0009b	b8 ff ff ff ff	 mov	 eax, -1
  000a0	eb 0c		 jmp	 SHORT $LN4@textiowrap@17
$LN1@textiowrap@17:

; 2035 :     Py_DECREF(res);

  000a2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000a7	e8 00 00 00 00	 call	 _Py_DecRef

; 2036 :     return 0;

  000ac	33 c0		 xor	 eax, eax
$LN4@textiowrap@17:

; 2037 : }

  000ae	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b2	c3		 ret	 0
_textiowrapper_decoder_setstate ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_textiowrapper_encoder_setstate DD imagerel _textiowrapper_encoder_setstate
	DD	imagerel _textiowrapper_encoder_setstate+165
	DD	imagerel $unwind$_textiowrapper_encoder_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_textiowrapper_encoder_setstate DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _textiowrapper_encoder_setstate
_TEXT	SEGMENT
res$ = 32
self$ = 64
cookie$ = 72
_textiowrapper_encoder_setstate PROC			; COMDAT

; 2041 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2042 :     PyObject *res;
; 2043 :     /* Same as _textiowrapper_decoder_setstate() above. */
; 2044 :     if (cookie->start_pos == 0 && cookie->dec_flags == 0) {

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR cookie$[rsp]
  00013	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00017	75 39		 jne	 SHORT $LN3@textiowrap@18
  00019	48 8b 44 24 48	 mov	 rax, QWORD PTR cookie$[rsp]
  0001e	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00022	75 2e		 jne	 SHORT $LN3@textiowrap@18

; 2045 :         res = PyObject_CallMethodObjArgs(self->encoder, _PyIO_str_reset, NULL);

  00024	45 33 c0	 xor	 r8d, r8d
  00027	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_reset
  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00033	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0003a	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0003f	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 2046 :         self->encoding_start_of_stream = 1;

  00044	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00049	c6 80 c0 00 00
	00 01		 mov	 BYTE PTR [rax+192], 1

; 2047 :     }
; 2048 :     else {

  00050	eb 33		 jmp	 SHORT $LN2@textiowrap@18
$LN3@textiowrap@18:

; 2049 :         res = PyObject_CallMethodObjArgs(self->encoder, _PyIO_str_setstate,
; 2050 :                                          _PyIO_zero, NULL);

  00052	45 33 c9	 xor	 r9d, r9d
  00055	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR _PyIO_zero
  0005c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_setstate
  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00068	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0006f	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00074	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 2051 :         self->encoding_start_of_stream = 0;

  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0007e	c6 80 c0 00 00
	00 00		 mov	 BYTE PTR [rax+192], 0
$LN2@textiowrap@18:

; 2052 :     }
; 2053 :     if (res == NULL)

  00085	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0008b	75 07		 jne	 SHORT $LN1@textiowrap@18

; 2054 :         return -1;

  0008d	b8 ff ff ff ff	 mov	 eax, -1
  00092	eb 0c		 jmp	 SHORT $LN4@textiowrap@18
$LN1@textiowrap@18:

; 2055 :     Py_DECREF(res);

  00094	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00099	e8 00 00 00 00	 call	 _Py_DecRef

; 2056 :     return 0;

  0009e	33 c0		 xor	 eax, eax
$LN4@textiowrap@18:

; 2057 : }

  000a0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a4	c3		 ret	 0
_textiowrapper_encoder_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_1GI@FDDAJOEG@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AAs?$AA_?$AAt?$AAo?$AA_?$AAs?$AAk?$AAi?$AAp?$AA?$CJ@ ; `string'
PUBLIC	??_C@_03IELNPCCE@?$CIO?$CJ?$AA@			; `string'
PUBLIC	??_C@_0CI@JGPCMGMC@can?8t?5reconstruct?5logical?5file?5p@ ; `string'
PUBLIC	??_C@_1DI@FNOIOGJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_02OPKBKFNM@yi?$AA@			; `string'
PUBLIC	??_C@_05OAMHDECN@?$CIy?$CDi?$CJ?$AA@		; `string'
PUBLIC	??_C@_1DK@HBHNNLKK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA_?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@FLCBEPCD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA_?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_02OFDHACFD@y?$CD?$AA@			; `string'
PUBLIC	??_C@_1FE@KELJHHOJ@?$AAs?$AAk?$AAi?$AAp?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAn?$AAe@ ; `string'
PUBLIC	??_C@_1DE@JICLACCP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@		; `string'
PUBLIC	??_C@_1JK@FGEPIFBH@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP@ ; `string'
PUBLIC	??_C@_0CJ@IGLFECHA@telling?5position?5disabled?5by?5nex@ ; `string'
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_Fetch:PROC
EXTRN	PyLong_AsLongLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_tell DD imagerel textiowrapper_tell
	DD	imagerel textiowrapper_tell+3444
	DD	imagerel $unwind$textiowrapper_tell
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_tell DD 021101H
	DD	0230111H
xdata	ENDS
;	COMDAT ??_C@_1GI@FDDAJOEG@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AAs?$AA_?$AAt?$AAo?$AA_?$AAs?$AAk?$AAi?$AAp?$AA?$CJ@
CONST	SEGMENT
??_C@_1GI@FDDAJOEG@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AAs?$AA_?$AAt?$AAo?$AA_?$AAs?$AAk?$AAi?$AAp?$AA?$CJ@ DB '('
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 's', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, '_', 00H, 't', 00H, ')', 00H, '(', 00H, 'i'
	DB	00H, 'n', 00H, 't', 00H, ')', 00H, '(', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, 's', 00H, '_', 00H, 't', 00H, 'o', 00H, '_'
	DB	00H, 's', 00H, 'k', 00H, 'i', 00H, 'p', 00H, ')', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '(', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, 's', 00H, '_', 00H, 't', 00H, 'o', 00H, '_', 00H
	DB	's', 00H, 'k', 00H, 'i', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_03IELNPCCE@?$CIO?$CJ?$AA@ DB '(O)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JGPCMGMC@can?8t?5reconstruct?5logical?5file?5p@
CONST	SEGMENT
??_C@_0CI@JGPCMGMC@can?8t?5reconstruct?5logical?5file?5p@ DB 'can''t reco'
	DB	'nstruct logical file position', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@FNOIOGJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@FNOIOGJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'd', 00H
	DB	'e', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02OPKBKFNM@yi?$AA@
CONST	SEGMENT
??_C@_02OPKBKFNM@yi?$AA@ DB 'yi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OAMHDECN@?$CIy?$CDi?$CJ?$AA@
CONST	SEGMENT
??_C@_05OAMHDECN@?$CIy?$CDi?$CJ?$AA@ DB '(y#i)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@HBHNNLKK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA_?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@HBHNNLKK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA_?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '_', 00H
	DB	'd', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'd'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@FLCBEPCD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA_?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@FLCBEPCD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA_?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '_', 00H, 'd', 00H, 'e', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02OFDHACFD@y?$CD?$AA@
CONST	SEGMENT
??_C@_02OFDHACFD@y?$CD?$AA@ DB 'y#', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@KELJHHOJ@?$AAs?$AAk?$AAi?$AAp?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAn?$AAe@
CONST	SEGMENT
??_C@_1FE@KELJHHOJ@?$AAs?$AAk?$AAi?$AAp?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAn?$AAe@ DB 's'
	DB	00H, 'k', 00H, 'i', 00H, 'p', 00H, '_', 00H, 'b', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'G', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'S', 00H, 'I'
	DB	00H, 'Z', 00H, 'E', 00H, '(', 00H, 'n', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@JICLACCP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@JICLACCP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@
CONST	SEGMENT
??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@ DB '(iO)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1JK@FGEPIFBH@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP@
CONST	SEGMENT
??_C@_1JK@FGEPIFBH@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'd', 00H
	DB	'e', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'd', 00H, '_'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 's', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'P', 00H, 'y', 00H
	DB	'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '_', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'L', 00H, 'e', 00H
	DB	'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '(', 00H, 's', 00H, 'e'
	DB	00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'd', 00H, 'e', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'd', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 's', 00H, ')', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IGLFECHA@telling?5position?5disabled?5by?5nex@
CONST	SEGMENT
??_C@_0CJ@IGLFECHA@telling?5position?5disabled?5by?5nex@ DB 'telling posi'
	DB	'tion disabled by next() call', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_tell
_TEXT	SEGMENT
posobj$ = 48
res$ = 56
dec_flags$ = 64
dec_buffer_len$ = 72
input$ = 80
chars_decoded$ = 88
input_end$ = 96
skip_back$ = 104
next_input$ = 112
skip_bytes$ = 120
cookie$ = 128
saved_state$ = 152
dec_buffer$ = 160
chars_to_skip$ = 168
_res$23031 = 176
r$23030 = 184
_decoded$23105 = 192
_state$23120 = 200
n$23143 = 208
_decoded$23147 = 216
_state$23159 = 224
decoded$23169 = 232
value$23194 = 240
type$23193 = 248
traceback$23195 = 256
self$ = 288
args$ = 296
textiowrapper_tell PROC					; COMDAT

; 2235 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 2236 :     PyObject *res;
; 2237 :     PyObject *posobj = NULL;

  00011	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR posobj$[rsp], 0

; 2238 :     cookie_type cookie = {0,0,0,0,0};

  0001a	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR cookie$[rsp], 0
  00026	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR cookie$[rsp+8], 0
  00031	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR cookie$[rsp+12], 0
  0003c	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR cookie$[rsp+16], 0
  00047	c6 84 24 94 00
	00 00 00	 mov	 BYTE PTR cookie$[rsp+20], 0

; 2239 :     PyObject *next_input;
; 2240 :     Py_ssize_t chars_to_skip, chars_decoded;
; 2241 :     Py_ssize_t skip_bytes, skip_back;
; 2242 :     PyObject *saved_state = NULL;

  0004f	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR saved_state$[rsp], 0

; 2243 :     char *input, *input_end;
; 2244 :     char *dec_buffer;
; 2245 :     Py_ssize_t dec_buffer_len;
; 2246 :     int dec_flags;
; 2247 : 
; 2248 :     CHECK_INITIALIZED(self);

  0005b	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00063	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00067	7f 3d		 jg	 SHORT $LN62@textiowrap@19
  00069	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00071	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00075	74 15		 je	 SHORT $LN61@textiowrap@19
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0007e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00085	e8 00 00 00 00	 call	 PyErr_SetString
  0008a	eb 13		 jmp	 SHORT $LN60@textiowrap@19
$LN61@textiowrap@19:
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00093	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0009a	e8 00 00 00 00	 call	 PyErr_SetString
$LN60@textiowrap@19:
  0009f	33 c0		 xor	 eax, eax
  000a1	e9 c6 0c 00 00	 jmp	 $LN63@textiowrap@19
$LN62@textiowrap@19:
$LN59@textiowrap@19:

; 2249 :     CHECK_CLOSED(self);

  000a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTextIOWrapper_Type
  000ad	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000b5	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000b9	0f 85 b0 00 00
	00		 jne	 $LN56@textiowrap@19
  000bf	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000c7	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  000cf	74 1d		 je	 SHORT $LN55@textiowrap@19
  000d1	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000d9	48 8b 88 f8 00
	00 00		 mov	 rcx, QWORD PTR [rax+248]
  000e0	e8 00 00 00 00	 call	 _PyFileIO_closed
  000e5	89 84 24 b8 00
	00 00		 mov	 DWORD PTR r$23030[rsp], eax
  000ec	eb 5b		 jmp	 SHORT $LN54@textiowrap@19
$LN55@textiowrap@19:
  000ee	33 d2		 xor	 edx, edx
  000f0	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000f8	e8 00 00 00 00	 call	 textiowrapper_closed_get
  000fd	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR _res$23031[rsp], rax
  00105	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR _res$23031[rsp], 0
  0010e	75 07		 jne	 SHORT $LN53@textiowrap@19
  00110	33 c0		 xor	 eax, eax
  00112	e9 55 0c 00 00	 jmp	 $LN63@textiowrap@19
$LN53@textiowrap@19:
  00117	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _res$23031[rsp]
  0011f	e8 00 00 00 00	 call	 PyObject_IsTrue
  00124	89 84 24 b8 00
	00 00		 mov	 DWORD PTR r$23030[rsp], eax
  0012b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _res$23031[rsp]
  00133	e8 00 00 00 00	 call	 _Py_DecRef
  00138	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR r$23030[rsp], 0
  00140	7d 07		 jge	 SHORT $LN52@textiowrap@19
  00142	33 c0		 xor	 eax, eax
  00144	e9 23 0c 00 00	 jmp	 $LN63@textiowrap@19
$LN52@textiowrap@19:
$LN54@textiowrap@19:
  00149	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR r$23030[rsp], 0
  00151	7e 1a		 jle	 SHORT $LN51@textiowrap@19
  00153	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
  0015a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00161	e8 00 00 00 00	 call	 PyErr_SetString
  00166	33 c0		 xor	 eax, eax
  00168	e9 ff 0b 00 00	 jmp	 $LN63@textiowrap@19
$LN51@textiowrap@19:
  0016d	eb 20		 jmp	 SHORT $LN50@textiowrap@19
$LN56@textiowrap@19:
  0016f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00176	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0017e	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  00183	48 85 c0	 test	 rax, rax
  00186	75 07		 jne	 SHORT $LN49@textiowrap@19
  00188	33 c0		 xor	 eax, eax
  0018a	e9 dd 0b 00 00	 jmp	 $LN63@textiowrap@19
$LN49@textiowrap@19:
$LN50@textiowrap@19:
  0018f	33 c0		 xor	 eax, eax
  00191	85 c0		 test	 eax, eax
  00193	0f 85 0d ff ff
	ff		 jne	 $LN59@textiowrap@19

; 2250 : 
; 2251 :     if (!self->seekable) {

  00199	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001a1	0f be 80 ad 00
	00 00		 movsx	 eax, BYTE PTR [rax+173]
  001a8	85 c0		 test	 eax, eax
  001aa	75 11		 jne	 SHORT $LN48@textiowrap@19

; 2252 :         _unsupported("underlying stream is not seekable");

  001ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@ECIDNDGL@underlying?5stream?5is?5not?5seekabl@
  001b3	e8 00 00 00 00	 call	 _unsupported

; 2253 :         goto fail;

  001b8	e9 fc 0a 00 00	 jmp	 $fail$23053
$LN48@textiowrap@19:

; 2254 :     }
; 2255 :     if (!self->telling) {

  001bd	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001c5	0f be 80 af 00
	00 00		 movsx	 eax, BYTE PTR [rax+175]
  001cc	85 c0		 test	 eax, eax
  001ce	75 18		 jne	 SHORT $LN47@textiowrap@19

; 2256 :         PyErr_SetString(PyExc_IOError,
; 2257 :                         "telling position disabled by next() call");

  001d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@IGLFECHA@telling?5position?5disabled?5by?5nex@
  001d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  001de	e8 00 00 00 00	 call	 PyErr_SetString

; 2258 :         goto fail;

  001e3	e9 d1 0a 00 00	 jmp	 $fail$23053
$LN47@textiowrap@19:

; 2259 :     }
; 2260 : 
; 2261 :     if (_textiowrapper_writeflush(self) < 0)

  001e8	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001f0	e8 00 00 00 00	 call	 _textiowrapper_writeflush
  001f5	85 c0		 test	 eax, eax
  001f7	7d 07		 jge	 SHORT $LN46@textiowrap@19

; 2262 :         return NULL;

  001f9	33 c0		 xor	 eax, eax
  001fb	e9 6c 0b 00 00	 jmp	 $LN63@textiowrap@19
$LN46@textiowrap@19:

; 2263 :     res = _PyObject_CallMethodId((PyObject *)self, &PyId_flush, NULL);

  00200	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_flush
  00205	8b c0		 mov	 eax, eax
  00207	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0020d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00216	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0021a	45 33 c0	 xor	 r8d, r8d
  0021d	48 8b d0	 mov	 rdx, rax
  00220	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00228	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0022d	48 89 44 24 38	 mov	 QWORD PTR res$[rsp], rax

; 2264 :     if (res == NULL)

  00232	48 83 7c 24 38
	00		 cmp	 QWORD PTR res$[rsp], 0
  00238	75 05		 jne	 SHORT $LN45@textiowrap@19

; 2265 :         goto fail;

  0023a	e9 7a 0a 00 00	 jmp	 $fail$23053
$LN45@textiowrap@19:

; 2266 :     Py_DECREF(res);

  0023f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR res$[rsp]
  00244	e8 00 00 00 00	 call	 _Py_DecRef

; 2267 : 
; 2268 :     posobj = _PyObject_CallMethodId(self->buffer, &PyId_tell, NULL);

  00249	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_tell
  0024e	8b c0		 mov	 eax, eax
  00250	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00256	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0025f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00263	45 33 c0	 xor	 r8d, r8d
  00266	48 8b d0	 mov	 rdx, rax
  00269	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00271	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00275	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0027a	48 89 44 24 30	 mov	 QWORD PTR posobj$[rsp], rax

; 2269 :     if (posobj == NULL)

  0027f	48 83 7c 24 30
	00		 cmp	 QWORD PTR posobj$[rsp], 0
  00285	75 05		 jne	 SHORT $LN44@textiowrap@19

; 2270 :         goto fail;

  00287	e9 2d 0a 00 00	 jmp	 $fail$23053
$LN44@textiowrap@19:

; 2271 : 
; 2272 :     if (self->decoder == NULL || self->snapshot == NULL) {

  0028c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00294	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0029c	74 12		 je	 SHORT $LN42@textiowrap@19
  0029e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002a6	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  002ae	75 51		 jne	 SHORT $LN43@textiowrap@19
$LN42@textiowrap@19:

; 2273 :         assert (self->decoded_chars == NULL || PyUnicode_GetLength(self->decoded_chars) == 0);

  002b0	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002b8	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  002c0	74 35		 je	 SHORT $LN65@textiowrap@19
  002c2	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002ca	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  002d1	e8 00 00 00 00	 call	 PyUnicode_GetLength
  002d6	48 85 c0	 test	 rax, rax
  002d9	74 1c		 je	 SHORT $LN65@textiowrap@19
  002db	41 b8 e1 08 00
	00		 mov	 r8d, 2273		; 000008e1H
  002e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  002e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1JK@FGEPIFBH@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA_?$AAc?$AAh?$AAa?$AAr?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP@
  002ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002f5	33 c0		 xor	 eax, eax
$LN65@textiowrap@19:

; 2274 :         return posobj;

  002f7	48 8b 44 24 30	 mov	 rax, QWORD PTR posobj$[rsp]
  002fc	e9 6b 0a 00 00	 jmp	 $LN63@textiowrap@19
$LN43@textiowrap@19:

; 2275 :     }
; 2276 : 
; 2277 : #if defined(HAVE_LARGEFILE_SUPPORT)
; 2278 :     cookie.start_pos = PyLong_AsLongLong(posobj);

  00301	48 8b 4c 24 30	 mov	 rcx, QWORD PTR posobj$[rsp]
  00306	e8 00 00 00 00	 call	 PyLong_AsLongLong
  0030b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR cookie$[rsp], rax

; 2279 : #else
; 2280 :     cookie.start_pos = PyLong_AsLong(posobj);
; 2281 : #endif
; 2282 :     Py_DECREF(posobj);

  00313	48 8b 4c 24 30	 mov	 rcx, QWORD PTR posobj$[rsp]
  00318	e8 00 00 00 00	 call	 _Py_DecRef

; 2283 :     if (PyErr_Occurred())

  0031d	e8 00 00 00 00	 call	 PyErr_Occurred
  00322	48 85 c0	 test	 rax, rax
  00325	74 05		 je	 SHORT $LN41@textiowrap@19

; 2284 :         goto fail;

  00327	e9 8d 09 00 00	 jmp	 $fail$23053
$LN41@textiowrap@19:

; 2285 : 
; 2286 :     /* Skip backward to the snapshot point (see _read_chunk). */
; 2287 :     if (!PyArg_Parse(self->snapshot, "(iO)", &cookie.dec_flags, &next_input))

  0032c	4c 8d 4c 24 70	 lea	 r9, QWORD PTR next_input$[rsp]
  00331	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR cookie$[rsp+8]
  00339	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@
  00340	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00348	48 8b 88 e8 00
	00 00		 mov	 rcx, QWORD PTR [rax+232]
  0034f	e8 00 00 00 00	 call	 _PyArg_Parse_SizeT
  00354	85 c0		 test	 eax, eax
  00356	75 05		 jne	 SHORT $LN40@textiowrap@19

; 2288 :         goto fail;

  00358	e9 5c 09 00 00	 jmp	 $fail$23053
$LN40@textiowrap@19:

; 2289 : 
; 2290 :     assert (PyBytes_Check(next_input));

  0035d	48 8b 44 24 70	 mov	 rax, QWORD PTR next_input$[rsp]
  00362	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00366	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0036c	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00371	85 c0		 test	 eax, eax
  00373	75 1c		 jne	 SHORT $LN66@textiowrap@19
  00375	41 b8 f2 08 00
	00		 mov	 r8d, 2290		; 000008f2H
  0037b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00382	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JICLACCP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  00389	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0038f	33 c0		 xor	 eax, eax
$LN66@textiowrap@19:

; 2291 : 
; 2292 :     cookie.start_pos -= PyBytes_GET_SIZE(next_input);

  00391	48 8b 44 24 70	 mov	 rax, QWORD PTR next_input$[rsp]
  00396	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0039a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003a0	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  003a5	85 c0		 test	 eax, eax
  003a7	75 1c		 jne	 SHORT $LN67@textiowrap@19
  003a9	41 b8 f4 08 00
	00		 mov	 r8d, 2292		; 000008f4H
  003af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  003b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JICLACCP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  003bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003c3	33 c0		 xor	 eax, eax
$LN67@textiowrap@19:
  003c5	48 8b 44 24 70	 mov	 rax, QWORD PTR next_input$[rsp]
  003ca	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  003ce	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cookie$[rsp]
  003d6	48 2b c8	 sub	 rcx, rax
  003d9	48 8b c1	 mov	 rax, rcx
  003dc	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR cookie$[rsp], rax

; 2293 : 
; 2294 :     /* How many decoded characters have been used up since the snapshot? */
; 2295 :     if (self->decoded_chars_used == 0)  {

  003e4	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003ec	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  003f4	75 12		 jne	 SHORT $LN39@textiowrap@19

; 2296 :         /* We haven't moved from the snapshot point. */
; 2297 :         return textiowrapper_build_cookie(&cookie);

  003f6	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR cookie$[rsp]
  003fe	e8 00 00 00 00	 call	 textiowrapper_build_cookie
  00403	e9 64 09 00 00	 jmp	 $LN63@textiowrap@19
$LN39@textiowrap@19:

; 2298 :     }
; 2299 : 
; 2300 :     chars_to_skip = self->decoded_chars_used;

  00408	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00410	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00417	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR chars_to_skip$[rsp], rax

; 2301 : 
; 2302 :     /* Decoder state will be restored at the end */
; 2303 :     saved_state = PyObject_CallMethodObjArgs(self->decoder,
; 2304 :                                              _PyIO_str_getstate, NULL);

  0041f	45 33 c0	 xor	 r8d, r8d
  00422	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_getstate
  00429	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00431	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00438	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0043d	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR saved_state$[rsp], rax

; 2305 :     if (saved_state == NULL)

  00445	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR saved_state$[rsp], 0
  0044e	75 05		 jne	 SHORT $LN38@textiowrap@19

; 2306 :         goto fail;

  00450	e9 64 08 00 00	 jmp	 $fail$23053
$LN38@textiowrap@19:

; 2307 : 
; 2308 : #define DECODER_GETSTATE() do { \
; 2309 :         PyObject *_state = PyObject_CallMethodObjArgs(self->decoder, \
; 2310 :             _PyIO_str_getstate, NULL); \
; 2311 :         if (_state == NULL) \
; 2312 :             goto fail; \
; 2313 :         if (!PyArg_Parse(_state, "(y#i)", &dec_buffer, &dec_buffer_len, &dec_flags)) { \
; 2314 :             Py_DECREF(_state); \
; 2315 :             goto fail; \
; 2316 :         } \
; 2317 :         Py_DECREF(_state); \
; 2318 :     } while (0)
; 2319 : 
; 2320 : #define DECODER_DECODE(start, len, res) do { \
; 2321 :         PyObject *_decoded = _PyObject_CallMethodId( \
; 2322 :             self->decoder, &PyId_decode, "y#", start, len); \
; 2323 :         if (check_decoded(_decoded) < 0) \
; 2324 :             goto fail; \
; 2325 :         res = PyUnicode_GET_LENGTH(_decoded); \
; 2326 :         Py_DECREF(_decoded); \
; 2327 :     } while (0)
; 2328 : 
; 2329 :     /* Fast search for an acceptable start point, close to our
; 2330 :        current pos */
; 2331 :     skip_bytes = (Py_ssize_t) (self->b2cratio * chars_to_skip);

  00455	66 0f ef c0	 pxor	 xmm0, xmm0
  00459	f2 48 0f 2a 84
	24 a8 00 00 00	 cvtsi2sd xmm0, QWORD PTR chars_to_skip$[rsp]
  00463	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0046b	f2 0f 10 88 f0
	00 00 00	 movsdx	 xmm1, QWORD PTR [rax+240]
  00473	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00477	66 0f 28 c1	 movapd	 xmm0, xmm1
  0047b	f2 48 0f 2c c0	 cvttsd2si rax, xmm0
  00480	48 89 44 24 78	 mov	 QWORD PTR skip_bytes$[rsp], rax

; 2332 :     skip_back = 1;

  00485	48 c7 44 24 68
	01 00 00 00	 mov	 QWORD PTR skip_back$[rsp], 1

; 2333 :     assert(skip_back <= PyBytes_GET_SIZE(next_input));

  0048e	48 8b 44 24 70	 mov	 rax, QWORD PTR next_input$[rsp]
  00493	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00497	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0049d	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  004a2	85 c0		 test	 eax, eax
  004a4	75 1c		 jne	 SHORT $LN68@textiowrap@19
  004a6	41 b8 1d 09 00
	00		 mov	 r8d, 2333		; 0000091dH
  004ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  004b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JICLACCP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  004ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c0	33 c0		 xor	 eax, eax
$LN68@textiowrap@19:
  004c2	48 8b 44 24 70	 mov	 rax, QWORD PTR next_input$[rsp]
  004c7	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  004cb	48 39 44 24 68	 cmp	 QWORD PTR skip_back$[rsp], rax
  004d0	7e 1c		 jle	 SHORT $LN69@textiowrap@19
  004d2	41 b8 1d 09 00
	00		 mov	 r8d, 2333		; 0000091dH
  004d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  004df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@KELJHHOJ@?$AAs?$AAk?$AAi?$AAp?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAn?$AAe@
  004e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004ec	33 c0		 xor	 eax, eax
$LN69@textiowrap@19:

; 2334 :     input = PyBytes_AS_STRING(next_input);

  004ee	48 8b 44 24 70	 mov	 rax, QWORD PTR next_input$[rsp]
  004f3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004f7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004fd	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00502	85 c0		 test	 eax, eax
  00504	75 1c		 jne	 SHORT $LN70@textiowrap@19
  00506	41 b8 1e 09 00
	00		 mov	 r8d, 2334		; 0000091eH
  0050c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00513	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JICLACCP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  0051a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00520	33 c0		 xor	 eax, eax
$LN70@textiowrap@19:
  00522	48 8b 44 24 70	 mov	 rax, QWORD PTR next_input$[rsp]
  00527	48 83 c0 78	 add	 rax, 120		; 00000078H
  0052b	48 89 44 24 50	 mov	 QWORD PTR input$[rsp], rax
$LN37@textiowrap@19:

; 2335 :     while (skip_bytes > 0) {

  00530	48 83 7c 24 78
	00		 cmp	 QWORD PTR skip_bytes$[rsp], 0
  00536	0f 8e 2b 02 00
	00		 jle	 $LN36@textiowrap@19

; 2336 :         /* Decode up to temptative start point */
; 2337 :         if (_textiowrapper_decoder_setstate(self, &cookie) < 0)

  0053c	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR cookie$[rsp]
  00544	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0054c	e8 00 00 00 00	 call	 _textiowrapper_decoder_setstate
  00551	85 c0		 test	 eax, eax
  00553	7d 05		 jge	 SHORT $LN35@textiowrap@19

; 2338 :             goto fail;

  00555	e9 5f 07 00 00	 jmp	 $fail$23053
$LN35@textiowrap@19:
$LN34@textiowrap@19:

; 2339 :         DECODER_DECODE(input, skip_bytes, chars_decoded);

  0055a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_decode
  0055f	8b c0		 mov	 eax, eax
  00561	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00567	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00570	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00574	48 8b 4c 24 78	 mov	 rcx, QWORD PTR skip_bytes$[rsp]
  00579	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0057e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR input$[rsp]
  00583	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02OFDHACFD@y?$CD?$AA@
  0058a	48 8b d0	 mov	 rdx, rax
  0058d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00595	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0059c	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  005a1	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR _decoded$23105[rsp], rax
  005a9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _decoded$23105[rsp]
  005b1	e8 00 00 00 00	 call	 check_decoded
  005b6	85 c0		 test	 eax, eax
  005b8	7d 05		 jge	 SHORT $LN31@textiowrap@19
  005ba	e9 fa 06 00 00	 jmp	 $fail$23053
$LN31@textiowrap@19:
  005bf	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _decoded$23105[rsp]
  005c7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  005cb	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  005d1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  005d6	85 c0		 test	 eax, eax
  005d8	75 1c		 jne	 SHORT $LN71@textiowrap@19
  005da	41 b8 23 09 00
	00		 mov	 r8d, 2339		; 00000923H
  005e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  005e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@FLCBEPCD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA_?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  005ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005f4	33 c0		 xor	 eax, eax
$LN71@textiowrap@19:
  005f6	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _decoded$23105[rsp]
  005fe	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00601	c1 e8 07	 shr	 eax, 7
  00604	83 e0 01	 and	 eax, 1
  00607	85 c0		 test	 eax, eax
  00609	75 1c		 jne	 SHORT $LN72@textiowrap@19
  0060b	41 b8 23 09 00
	00		 mov	 r8d, 2339		; 00000923H
  00611	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00618	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@HBHNNLKK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA_?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  0061f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00625	33 c0		 xor	 eax, eax
$LN72@textiowrap@19:
  00627	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _decoded$23105[rsp]
  0062f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00633	48 89 44 24 58	 mov	 QWORD PTR chars_decoded$[rsp], rax
  00638	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _decoded$23105[rsp]
  00640	e8 00 00 00 00	 call	 _Py_DecRef
  00645	33 c0		 xor	 eax, eax
  00647	85 c0		 test	 eax, eax
  00649	0f 85 0b ff ff
	ff		 jne	 $LN34@textiowrap@19

; 2340 :         if (chars_decoded <= chars_to_skip) {

  0064f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR chars_to_skip$[rsp]
  00657	48 39 44 24 58	 cmp	 QWORD PTR chars_decoded$[rsp], rax
  0065c	0f 8f de 00 00
	00		 jg	 $LN30@textiowrap@19
$LN29@textiowrap@19:

; 2341 :             DECODER_GETSTATE();

  00662	45 33 c0	 xor	 r8d, r8d
  00665	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_getstate
  0066c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00674	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0067b	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00680	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR _state$23120[rsp], rax
  00688	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR _state$23120[rsp], 0
  00691	75 05		 jne	 SHORT $LN26@textiowrap@19
  00693	e9 21 06 00 00	 jmp	 $fail$23053
$LN26@textiowrap@19:
  00698	48 8d 44 24 40	 lea	 rax, QWORD PTR dec_flags$[rsp]
  0069d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006a2	4c 8d 4c 24 48	 lea	 r9, QWORD PTR dec_buffer_len$[rsp]
  006a7	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR dec_buffer$[rsp]
  006af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OAMHDECN@?$CIy?$CDi?$CJ?$AA@
  006b6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _state$23120[rsp]
  006be	e8 00 00 00 00	 call	 _PyArg_Parse_SizeT
  006c3	85 c0		 test	 eax, eax
  006c5	75 12		 jne	 SHORT $LN25@textiowrap@19
  006c7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _state$23120[rsp]
  006cf	e8 00 00 00 00	 call	 _Py_DecRef
  006d4	e9 e0 05 00 00	 jmp	 $fail$23053
$LN25@textiowrap@19:
  006d9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _state$23120[rsp]
  006e1	e8 00 00 00 00	 call	 _Py_DecRef
  006e6	33 c0		 xor	 eax, eax
  006e8	85 c0		 test	 eax, eax
  006ea	0f 85 72 ff ff
	ff		 jne	 $LN29@textiowrap@19

; 2342 :             if (dec_buffer_len == 0) {

  006f0	48 83 7c 24 48
	00		 cmp	 QWORD PTR dec_buffer_len$[rsp], 0
  006f6	75 28		 jne	 SHORT $LN24@textiowrap@19

; 2343 :                 /* Before pos and no bytes buffered in decoder => OK */
; 2344 :                 cookie.dec_flags = dec_flags;

  006f8	8b 44 24 40	 mov	 eax, DWORD PTR dec_flags$[rsp]
  006fc	89 84 24 88 00
	00 00		 mov	 DWORD PTR cookie$[rsp+8], eax

; 2345 :                 chars_to_skip -= chars_decoded;

  00703	48 8b 44 24 58	 mov	 rax, QWORD PTR chars_decoded$[rsp]
  00708	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR chars_to_skip$[rsp]
  00710	48 2b c8	 sub	 rcx, rax
  00713	48 8b c1	 mov	 rax, rcx
  00716	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR chars_to_skip$[rsp], rax

; 2346 :                 break;

  0071e	eb 47		 jmp	 SHORT $LN36@textiowrap@19
$LN24@textiowrap@19:

; 2347 :             }
; 2348 :             /* Skip back by buffered amount and reset heuristic */
; 2349 :             skip_bytes -= dec_buffer_len;

  00720	48 8b 44 24 48	 mov	 rax, QWORD PTR dec_buffer_len$[rsp]
  00725	48 8b 4c 24 78	 mov	 rcx, QWORD PTR skip_bytes$[rsp]
  0072a	48 2b c8	 sub	 rcx, rax
  0072d	48 8b c1	 mov	 rax, rcx
  00730	48 89 44 24 78	 mov	 QWORD PTR skip_bytes$[rsp], rax

; 2350 :             skip_back = 1;

  00735	48 c7 44 24 68
	01 00 00 00	 mov	 QWORD PTR skip_back$[rsp], 1

; 2351 :         }
; 2352 :         else {

  0073e	eb 22		 jmp	 SHORT $LN23@textiowrap@19
$LN30@textiowrap@19:

; 2353 :             /* We're too far ahead, skip back a bit */
; 2354 :             skip_bytes -= skip_back;

  00740	48 8b 44 24 68	 mov	 rax, QWORD PTR skip_back$[rsp]
  00745	48 8b 4c 24 78	 mov	 rcx, QWORD PTR skip_bytes$[rsp]
  0074a	48 2b c8	 sub	 rcx, rax
  0074d	48 8b c1	 mov	 rax, rcx
  00750	48 89 44 24 78	 mov	 QWORD PTR skip_bytes$[rsp], rax

; 2355 :             skip_back *= 2;

  00755	48 8b 44 24 68	 mov	 rax, QWORD PTR skip_back$[rsp]
  0075a	48 d1 e0	 shl	 rax, 1
  0075d	48 89 44 24 68	 mov	 QWORD PTR skip_back$[rsp], rax
$LN23@textiowrap@19:

; 2356 :         }
; 2357 :     }

  00762	e9 c9 fd ff ff	 jmp	 $LN37@textiowrap@19
$LN36@textiowrap@19:

; 2358 :     if (skip_bytes <= 0) {

  00767	48 83 7c 24 78
	00		 cmp	 QWORD PTR skip_bytes$[rsp], 0
  0076d	7f 27		 jg	 SHORT $LN22@textiowrap@19

; 2359 :         skip_bytes = 0;

  0076f	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR skip_bytes$[rsp], 0

; 2360 :         if (_textiowrapper_decoder_setstate(self, &cookie) < 0)

  00778	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR cookie$[rsp]
  00780	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00788	e8 00 00 00 00	 call	 _textiowrapper_decoder_setstate
  0078d	85 c0		 test	 eax, eax
  0078f	7d 05		 jge	 SHORT $LN21@textiowrap@19

; 2361 :             goto fail;

  00791	e9 23 05 00 00	 jmp	 $fail$23053
$LN21@textiowrap@19:
$LN22@textiowrap@19:

; 2362 :     }
; 2363 : 
; 2364 :     /* Note our initial start point. */
; 2365 :     cookie.start_pos += skip_bytes;

  00796	48 8b 44 24 78	 mov	 rax, QWORD PTR skip_bytes$[rsp]
  0079b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cookie$[rsp]
  007a3	48 03 c8	 add	 rcx, rax
  007a6	48 8b c1	 mov	 rax, rcx
  007a9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR cookie$[rsp], rax

; 2366 :     cookie.chars_to_skip = chars_to_skip;

  007b1	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR chars_to_skip$[rsp]
  007b8	89 84 24 90 00
	00 00		 mov	 DWORD PTR cookie$[rsp+16], eax

; 2367 :     if (chars_to_skip == 0)

  007bf	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR chars_to_skip$[rsp], 0
  007c8	75 05		 jne	 SHORT $LN20@textiowrap@19

; 2368 :         goto finally;

  007ca	e9 31 04 00 00	 jmp	 $finally$23133
$LN20@textiowrap@19:

; 2369 : 
; 2370 :     /* We should be close to the desired position.  Now feed the decoder one
; 2371 :      * byte at a time until we reach the `chars_to_skip` target.
; 2372 :      * As we go, note the nearest "safe start point" before the current
; 2373 :      * location (a point where the decoder has nothing buffered, so seek()
; 2374 :      * can safely start from there and advance to this location).
; 2375 :      */
; 2376 :     chars_decoded = 0;

  007cf	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR chars_decoded$[rsp], 0

; 2377 :     input = PyBytes_AS_STRING(next_input);

  007d8	48 8b 44 24 70	 mov	 rax, QWORD PTR next_input$[rsp]
  007dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  007e7	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  007ec	85 c0		 test	 eax, eax
  007ee	75 1c		 jne	 SHORT $LN73@textiowrap@19
  007f0	41 b8 49 09 00
	00		 mov	 r8d, 2377		; 00000949H
  007f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  007fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JICLACCP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  00804	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0080a	33 c0		 xor	 eax, eax
$LN73@textiowrap@19:
  0080c	48 8b 44 24 70	 mov	 rax, QWORD PTR next_input$[rsp]
  00811	48 83 c0 78	 add	 rax, 120		; 00000078H
  00815	48 89 44 24 50	 mov	 QWORD PTR input$[rsp], rax

; 2378 :     input_end = input + PyBytes_GET_SIZE(next_input);

  0081a	48 8b 44 24 70	 mov	 rax, QWORD PTR next_input$[rsp]
  0081f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00823	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00829	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0082e	85 c0		 test	 eax, eax
  00830	75 1c		 jne	 SHORT $LN74@textiowrap@19
  00832	41 b8 4a 09 00
	00		 mov	 r8d, 2378		; 0000094aH
  00838	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0083f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JICLACCP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAp?$AAu?$AAt?$AA?$CJ?$AA?$AA@
  00846	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0084c	33 c0		 xor	 eax, eax
$LN74@textiowrap@19:
  0084e	48 8b 44 24 70	 mov	 rax, QWORD PTR next_input$[rsp]
  00853	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00857	48 8b 4c 24 50	 mov	 rcx, QWORD PTR input$[rsp]
  0085c	48 03 c8	 add	 rcx, rax
  0085f	48 8b c1	 mov	 rax, rcx
  00862	48 89 44 24 60	 mov	 QWORD PTR input_end$[rsp], rax

; 2379 :     input += skip_bytes;

  00867	48 8b 44 24 78	 mov	 rax, QWORD PTR skip_bytes$[rsp]
  0086c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR input$[rsp]
  00871	48 03 c8	 add	 rcx, rax
  00874	48 8b c1	 mov	 rax, rcx
  00877	48 89 44 24 50	 mov	 QWORD PTR input$[rsp], rax
$LN19@textiowrap@19:

; 2380 :     while (input < input_end) {

  0087c	48 8b 44 24 60	 mov	 rax, QWORD PTR input_end$[rsp]
  00881	48 39 44 24 50	 cmp	 QWORD PTR input$[rsp], rax
  00886	0f 83 3f 02 00
	00		 jae	 $LN18@textiowrap@19
$LN17@textiowrap@19:

; 2381 :         Py_ssize_t n;
; 2382 : 
; 2383 :         DECODER_DECODE(input, (Py_ssize_t)1, n);

  0088c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_decode
  00891	8b c0		 mov	 eax, eax
  00893	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00899	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  008a2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  008a6	48 c7 44 24 20
	01 00 00 00	 mov	 QWORD PTR [rsp+32], 1
  008af	4c 8b 4c 24 50	 mov	 r9, QWORD PTR input$[rsp]
  008b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02OFDHACFD@y?$CD?$AA@
  008bb	48 8b d0	 mov	 rdx, rax
  008be	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  008c6	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  008cd	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  008d2	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR _decoded$23147[rsp], rax
  008da	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR _decoded$23147[rsp]
  008e2	e8 00 00 00 00	 call	 check_decoded
  008e7	85 c0		 test	 eax, eax
  008e9	7d 05		 jge	 SHORT $LN14@textiowrap@19
  008eb	e9 c9 03 00 00	 jmp	 $fail$23053
$LN14@textiowrap@19:
  008f0	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR _decoded$23147[rsp]
  008f8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  008fc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00902	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00907	85 c0		 test	 eax, eax
  00909	75 1c		 jne	 SHORT $LN75@textiowrap@19
  0090b	41 b8 4f 09 00
	00		 mov	 r8d, 2383		; 0000094fH
  00911	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00918	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@FLCBEPCD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA_?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  0091f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00925	33 c0		 xor	 eax, eax
$LN75@textiowrap@19:
  00927	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR _decoded$23147[rsp]
  0092f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00932	c1 e8 07	 shr	 eax, 7
  00935	83 e0 01	 and	 eax, 1
  00938	85 c0		 test	 eax, eax
  0093a	75 1c		 jne	 SHORT $LN76@textiowrap@19
  0093c	41 b8 4f 09 00
	00		 mov	 r8d, 2383		; 0000094fH
  00942	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00949	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@HBHNNLKK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA_?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00950	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00956	33 c0		 xor	 eax, eax
$LN76@textiowrap@19:
  00958	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR _decoded$23147[rsp]
  00960	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00964	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR n$23143[rsp], rax
  0096c	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR _decoded$23147[rsp]
  00974	e8 00 00 00 00	 call	 _Py_DecRef
  00979	33 c0		 xor	 eax, eax
  0097b	85 c0		 test	 eax, eax
  0097d	0f 85 09 ff ff
	ff		 jne	 $LN17@textiowrap@19

; 2384 :         /* We got n chars for 1 byte */
; 2385 :         chars_decoded += n;

  00983	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR n$23143[rsp]
  0098b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR chars_decoded$[rsp]
  00990	48 03 c8	 add	 rcx, rax
  00993	48 8b c1	 mov	 rax, rcx
  00996	48 89 44 24 58	 mov	 QWORD PTR chars_decoded$[rsp], rax

; 2386 :         cookie.bytes_to_feed += 1;

  0099b	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR cookie$[rsp+12]
  009a2	ff c0		 inc	 eax
  009a4	89 84 24 8c 00
	00 00		 mov	 DWORD PTR cookie$[rsp+12], eax
$LN13@textiowrap@19:

; 2387 :         DECODER_GETSTATE();

  009ab	45 33 c0	 xor	 r8d, r8d
  009ae	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_getstate
  009b5	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  009bd	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  009c4	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  009c9	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR _state$23159[rsp], rax
  009d1	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR _state$23159[rsp], 0
  009da	75 05		 jne	 SHORT $LN10@textiowrap@19
  009dc	e9 d8 02 00 00	 jmp	 $fail$23053
$LN10@textiowrap@19:
  009e1	48 8d 44 24 40	 lea	 rax, QWORD PTR dec_flags$[rsp]
  009e6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009eb	4c 8d 4c 24 48	 lea	 r9, QWORD PTR dec_buffer_len$[rsp]
  009f0	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR dec_buffer$[rsp]
  009f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OAMHDECN@?$CIy?$CDi?$CJ?$AA@
  009ff	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _state$23159[rsp]
  00a07	e8 00 00 00 00	 call	 _PyArg_Parse_SizeT
  00a0c	85 c0		 test	 eax, eax
  00a0e	75 12		 jne	 SHORT $LN9@textiowrap@19
  00a10	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _state$23159[rsp]
  00a18	e8 00 00 00 00	 call	 _Py_DecRef
  00a1d	e9 97 02 00 00	 jmp	 $fail$23053
$LN9@textiowrap@19:
  00a22	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _state$23159[rsp]
  00a2a	e8 00 00 00 00	 call	 _Py_DecRef
  00a2f	33 c0		 xor	 eax, eax
  00a31	85 c0		 test	 eax, eax
  00a33	0f 85 72 ff ff
	ff		 jne	 $LN13@textiowrap@19

; 2388 : 
; 2389 :         if (dec_buffer_len == 0 && chars_decoded <= chars_to_skip) {

  00a39	48 83 7c 24 48
	00		 cmp	 QWORD PTR dec_buffer_len$[rsp], 0
  00a3f	75 67		 jne	 SHORT $LN8@textiowrap@19
  00a41	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR chars_to_skip$[rsp]
  00a49	48 39 44 24 58	 cmp	 QWORD PTR chars_decoded$[rsp], rax
  00a4e	7f 58		 jg	 SHORT $LN8@textiowrap@19

; 2390 :             /* Decoder buffer is empty, so this is a safe start point. */
; 2391 :             cookie.start_pos += cookie.bytes_to_feed;

  00a50	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR cookie$[rsp+12]
  00a58	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cookie$[rsp]
  00a60	48 03 c8	 add	 rcx, rax
  00a63	48 8b c1	 mov	 rax, rcx
  00a66	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR cookie$[rsp], rax

; 2392 :             chars_to_skip -= chars_decoded;

  00a6e	48 8b 44 24 58	 mov	 rax, QWORD PTR chars_decoded$[rsp]
  00a73	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR chars_to_skip$[rsp]
  00a7b	48 2b c8	 sub	 rcx, rax
  00a7e	48 8b c1	 mov	 rax, rcx
  00a81	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR chars_to_skip$[rsp], rax

; 2393 :             cookie.dec_flags = dec_flags;

  00a89	8b 44 24 40	 mov	 eax, DWORD PTR dec_flags$[rsp]
  00a8d	89 84 24 88 00
	00 00		 mov	 DWORD PTR cookie$[rsp+8], eax

; 2394 :             cookie.bytes_to_feed = 0;

  00a94	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR cookie$[rsp+12], 0

; 2395 :             chars_decoded = 0;

  00a9f	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR chars_decoded$[rsp], 0
$LN8@textiowrap@19:

; 2396 :         }
; 2397 :         if (chars_decoded >= chars_to_skip)

  00aa8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR chars_to_skip$[rsp]
  00ab0	48 39 44 24 58	 cmp	 QWORD PTR chars_decoded$[rsp], rax
  00ab5	7c 02		 jl	 SHORT $LN7@textiowrap@19

; 2398 :             break;

  00ab7	eb 12		 jmp	 SHORT $LN18@textiowrap@19
$LN7@textiowrap@19:

; 2399 :         input++;

  00ab9	48 8b 44 24 50	 mov	 rax, QWORD PTR input$[rsp]
  00abe	48 ff c0	 inc	 rax
  00ac1	48 89 44 24 50	 mov	 QWORD PTR input$[rsp], rax

; 2400 :     }

  00ac6	e9 b1 fd ff ff	 jmp	 $LN19@textiowrap@19
$LN18@textiowrap@19:

; 2401 :     if (input == input_end) {

  00acb	48 8b 44 24 60	 mov	 rax, QWORD PTR input_end$[rsp]
  00ad0	48 39 44 24 50	 cmp	 QWORD PTR input$[rsp], rax
  00ad5	0f 85 25 01 00
	00		 jne	 $LN6@textiowrap@19

; 2402 :         /* We didn't get enough decoded data; signal EOF to get more. */
; 2403 :         PyObject *decoded = _PyObject_CallMethodId(
; 2404 :             self->decoder, &PyId_decode, "yi", "", /* final = */ 1);

  00adb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_decode
  00ae0	8b c0		 mov	 eax, eax
  00ae2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00ae8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00af1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00af5	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00afd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00b04	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02OPKBKFNM@yi?$AA@
  00b0b	48 8b d0	 mov	 rdx, rax
  00b0e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00b16	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00b1d	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00b22	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR decoded$23169[rsp], rax

; 2405 :         if (check_decoded(decoded) < 0)

  00b2a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR decoded$23169[rsp]
  00b32	e8 00 00 00 00	 call	 check_decoded
  00b37	85 c0		 test	 eax, eax
  00b39	7d 05		 jge	 SHORT $LN5@textiowrap@19

; 2406 :             goto fail;

  00b3b	e9 79 01 00 00	 jmp	 $fail$23053
$LN5@textiowrap@19:

; 2407 :         chars_decoded += PyUnicode_GET_LENGTH(decoded);

  00b40	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR decoded$23169[rsp]
  00b48	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00b4c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b52	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00b57	85 c0		 test	 eax, eax
  00b59	75 1c		 jne	 SHORT $LN77@textiowrap@19
  00b5b	41 b8 67 09 00
	00		 mov	 r8d, 2407		; 00000967H
  00b61	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00b68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@OBOIPIPO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00b6f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b75	33 c0		 xor	 eax, eax
$LN77@textiowrap@19:
  00b77	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR decoded$23169[rsp]
  00b7f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b82	c1 e8 07	 shr	 eax, 7
  00b85	83 e0 01	 and	 eax, 1
  00b88	85 c0		 test	 eax, eax
  00b8a	75 1c		 jne	 SHORT $LN78@textiowrap@19
  00b8c	41 b8 67 09 00
	00		 mov	 r8d, 2407		; 00000967H
  00b92	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00b99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@FNOIOGJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00ba0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ba6	33 c0		 xor	 eax, eax
$LN78@textiowrap@19:
  00ba8	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR decoded$23169[rsp]
  00bb0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00bb4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR chars_decoded$[rsp]
  00bb9	48 03 c8	 add	 rcx, rax
  00bbc	48 8b c1	 mov	 rax, rcx
  00bbf	48 89 44 24 58	 mov	 QWORD PTR chars_decoded$[rsp], rax

; 2408 :         Py_DECREF(decoded);

  00bc4	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR decoded$23169[rsp]
  00bcc	e8 00 00 00 00	 call	 _Py_DecRef

; 2409 :         cookie.need_eof = 1;

  00bd1	c6 84 24 94 00
	00 00 01	 mov	 BYTE PTR cookie$[rsp+20], 1

; 2410 : 
; 2411 :         if (chars_decoded < chars_to_skip) {

  00bd9	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR chars_to_skip$[rsp]
  00be1	48 39 44 24 58	 cmp	 QWORD PTR chars_decoded$[rsp], rax
  00be6	7d 18		 jge	 SHORT $LN4@textiowrap@19

; 2412 :             PyErr_SetString(PyExc_IOError,
; 2413 :                             "can't reconstruct logical file position");

  00be8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@JGPCMGMC@can?8t?5reconstruct?5logical?5file?5p@
  00bef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00bf6	e8 00 00 00 00	 call	 PyErr_SetString

; 2414 :             goto fail;

  00bfb	e9 b9 00 00 00	 jmp	 $fail$23053
$LN4@textiowrap@19:
$LN6@textiowrap@19:
$finally$23133:

; 2415 :         }
; 2416 :     }
; 2417 : 
; 2418 : finally:
; 2419 :     res = _PyObject_CallMethodId(self->decoder, &PyId_setstate, "(O)", saved_state);

  00c00	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_setstate
  00c05	8b c0		 mov	 eax, eax
  00c07	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00c0d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00c16	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00c1a	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR saved_state$[rsp]
  00c22	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00c29	48 8b d0	 mov	 rdx, rax
  00c2c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00c34	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00c3b	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00c40	48 89 44 24 38	 mov	 QWORD PTR res$[rsp], rax

; 2420 :     Py_DECREF(saved_state);

  00c45	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR saved_state$[rsp]
  00c4d	e8 00 00 00 00	 call	 _Py_DecRef

; 2421 :     if (res == NULL)

  00c52	48 83 7c 24 38
	00		 cmp	 QWORD PTR res$[rsp], 0
  00c58	75 07		 jne	 SHORT $LN3@textiowrap@19

; 2422 :         return NULL;

  00c5a	33 c0		 xor	 eax, eax
  00c5c	e9 0b 01 00 00	 jmp	 $LN63@textiowrap@19
$LN3@textiowrap@19:

; 2423 :     Py_DECREF(res);

  00c61	48 8b 4c 24 38	 mov	 rcx, QWORD PTR res$[rsp]
  00c66	e8 00 00 00 00	 call	 _Py_DecRef

; 2424 : 
; 2425 :     /* The returned cookie corresponds to the last safe start point. */
; 2426 :     cookie.chars_to_skip = Py_SAFE_DOWNCAST(chars_to_skip, Py_ssize_t, int);

  00c6b	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR chars_to_skip$[rsp]
  00c73	48 3b 84 24 a8
	00 00 00	 cmp	 rax, QWORD PTR chars_to_skip$[rsp]
  00c7b	74 1c		 je	 SHORT $LN79@textiowrap@19
  00c7d	41 b8 7a 09 00
	00		 mov	 r8d, 2426		; 0000097aH
  00c83	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00c8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GI@FDDAJOEG@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AAs?$AA_?$AAt?$AAo?$AA_?$AAs?$AAk?$AAi?$AAp?$AA?$CJ@
  00c91	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c97	33 c0		 xor	 eax, eax
$LN79@textiowrap@19:
  00c99	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR chars_to_skip$[rsp]
  00ca0	89 84 24 90 00
	00 00		 mov	 DWORD PTR cookie$[rsp+16], eax

; 2427 :     return textiowrapper_build_cookie(&cookie);

  00ca7	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR cookie$[rsp]
  00caf	e8 00 00 00 00	 call	 textiowrapper_build_cookie
  00cb4	e9 b3 00 00 00	 jmp	 $LN63@textiowrap@19
$fail$23053:

; 2428 : 
; 2429 : fail:
; 2430 :     if (saved_state) {

  00cb9	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR saved_state$[rsp], 0
  00cc2	0f 84 a2 00 00
	00		 je	 $LN2@textiowrap@19

; 2431 :         PyObject *type, *value, *traceback;
; 2432 :         PyErr_Fetch(&type, &value, &traceback);

  00cc8	4c 8d 84 24 00
	01 00 00	 lea	 r8, QWORD PTR traceback$23195[rsp]
  00cd0	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR value$23194[rsp]
  00cd8	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR type$23193[rsp]
  00ce0	e8 00 00 00 00	 call	 PyErr_Fetch

; 2433 : 
; 2434 :         res = _PyObject_CallMethodId(self->decoder, &PyId_setstate, "(O)", saved_state);

  00ce5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_setstate
  00cea	8b c0		 mov	 eax, eax
  00cec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00cf2	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00cfb	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00cff	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR saved_state$[rsp]
  00d07	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00d0e	48 8b d0	 mov	 rdx, rax
  00d11	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00d19	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00d20	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00d25	48 89 44 24 38	 mov	 QWORD PTR res$[rsp], rax

; 2435 :         Py_DECREF(saved_state);

  00d2a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR saved_state$[rsp]
  00d32	e8 00 00 00 00	 call	 _Py_DecRef

; 2436 :         if (res == NULL)

  00d37	48 83 7c 24 38
	00		 cmp	 QWORD PTR res$[rsp], 0
  00d3d	75 04		 jne	 SHORT $LN1@textiowrap@19

; 2437 :             return NULL;

  00d3f	33 c0		 xor	 eax, eax
  00d41	eb 29		 jmp	 SHORT $LN63@textiowrap@19
$LN1@textiowrap@19:

; 2438 :         Py_DECREF(res);

  00d43	48 8b 4c 24 38	 mov	 rcx, QWORD PTR res$[rsp]
  00d48	e8 00 00 00 00	 call	 _Py_DecRef

; 2439 : 
; 2440 :         PyErr_Restore(type, value, traceback);

  00d4d	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR traceback$23195[rsp]
  00d55	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR value$23194[rsp]
  00d5d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR type$23193[rsp]
  00d65	e8 00 00 00 00	 call	 PyErr_Restore
$LN2@textiowrap@19:

; 2441 :     }
; 2442 :     return NULL;

  00d6a	33 c0		 xor	 eax, eax
$LN63@textiowrap@19:

; 2443 : }

  00d6c	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  00d73	c3		 ret	 0
textiowrapper_tell ENDP
_TEXT	ENDS
EXTRN	_PyLong_FromByteArray:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_build_cookie DD imagerel textiowrapper_build_cookie
	DD	imagerel textiowrapper_build_cookie+171
	DD	imagerel $unwind$textiowrapper_build_cookie
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_build_cookie DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_build_cookie
_TEXT	SEGMENT
buffer$ = 32
cookie$ = 80
textiowrapper_build_cookie PROC				; COMDAT

; 2005 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2006 :     unsigned char buffer[COOKIE_BUF_LEN];
; 2007 : 
; 2008 :     memcpy(buffer + OFF_START_POS, &cookie->start_pos, sizeof(cookie->start_pos));

  00009	41 b8 08 00 00
	00		 mov	 r8d, 8
  0000f	48 8b 54 24 50	 mov	 rdx, QWORD PTR cookie$[rsp]
  00014	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buffer$[rsp]
  00019	e8 00 00 00 00	 call	 memcpy

; 2009 :     memcpy(buffer + OFF_DEC_FLAGS, &cookie->dec_flags, sizeof(cookie->dec_flags));

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR cookie$[rsp]
  00023	48 83 c0 08	 add	 rax, 8
  00027	48 8d 4c 24 28	 lea	 rcx, QWORD PTR buffer$[rsp+8]
  0002c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00032	48 8b d0	 mov	 rdx, rax
  00035	e8 00 00 00 00	 call	 memcpy

; 2010 :     memcpy(buffer + OFF_BYTES_TO_FEED, &cookie->bytes_to_feed, sizeof(cookie->bytes_to_feed));

  0003a	48 8b 44 24 50	 mov	 rax, QWORD PTR cookie$[rsp]
  0003f	48 83 c0 0c	 add	 rax, 12
  00043	48 8d 4c 24 2c	 lea	 rcx, QWORD PTR buffer$[rsp+12]
  00048	41 b8 04 00 00
	00		 mov	 r8d, 4
  0004e	48 8b d0	 mov	 rdx, rax
  00051	e8 00 00 00 00	 call	 memcpy

; 2011 :     memcpy(buffer + OFF_CHARS_TO_SKIP, &cookie->chars_to_skip, sizeof(cookie->chars_to_skip));

  00056	48 8b 44 24 50	 mov	 rax, QWORD PTR cookie$[rsp]
  0005b	48 83 c0 10	 add	 rax, 16
  0005f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buffer$[rsp+16]
  00064	41 b8 04 00 00
	00		 mov	 r8d, 4
  0006a	48 8b d0	 mov	 rdx, rax
  0006d	e8 00 00 00 00	 call	 memcpy

; 2012 :     memcpy(buffer + OFF_NEED_EOF, &cookie->need_eof, sizeof(cookie->need_eof));

  00072	48 8b 44 24 50	 mov	 rax, QWORD PTR cookie$[rsp]
  00077	48 83 c0 14	 add	 rax, 20
  0007b	48 8d 4c 24 34	 lea	 rcx, QWORD PTR buffer$[rsp+20]
  00080	41 b8 01 00 00
	00		 mov	 r8d, 1
  00086	48 8b d0	 mov	 rdx, rax
  00089	e8 00 00 00 00	 call	 memcpy

; 2013 : 
; 2014 :     return _PyLong_FromByteArray(buffer, sizeof(buffer), IS_LITTLE_ENDIAN, 0);

  0008e	45 33 c9	 xor	 r9d, r9d
  00091	41 b8 01 00 00
	00		 mov	 r8d, 1
  00097	ba 15 00 00 00	 mov	 edx, 21
  0009c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buffer$[rsp]
  000a1	e8 00 00 00 00	 call	 _PyLong_FromByteArray

; 2015 : }

  000a6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000aa	c3		 ret	 0
textiowrapper_build_cookie ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@		; `string'
EXTRN	_PyIO_str_truncate:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_truncate DD imagerel textiowrapper_truncate
	DD	imagerel textiowrapper_truncate+203
	DD	imagerel $unwind$textiowrapper_truncate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_truncate DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@
CONST	SEGMENT
??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@ DB '|O:truncate', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_truncate
_TEXT	SEGMENT
res$ = 32
pos$ = 40
self$ = 64
args$ = 72
textiowrapper_truncate PROC				; COMDAT

; 2447 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2448 :     PyObject *pos = Py_None;

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 89 44 24 28	 mov	 QWORD PTR pos$[rsp], rax

; 2449 :     PyObject *res;
; 2450 : 
; 2451 :     CHECK_INITIALIZED(self)

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001f	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00023	7f 37		 jg	 SHORT $LN5@textiowrap@20
  00025	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0002a	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  0002e	74 15		 je	 SHORT $LN4@textiowrap@20
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  00037	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0003e	e8 00 00 00 00	 call	 PyErr_SetString
  00043	eb 13		 jmp	 SHORT $LN3@textiowrap@20
$LN4@textiowrap@20:
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00053	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@textiowrap@20:
  00058	33 c0		 xor	 eax, eax
  0005a	eb 6a		 jmp	 SHORT $LN6@textiowrap@20
$LN5@textiowrap@20:

; 2452 :     if (!PyArg_ParseTuple(args, "|O:truncate", &pos)) {

  0005c	4c 8d 44 24 28	 lea	 r8, QWORD PTR pos$[rsp]
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@
  00068	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0006d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00072	85 c0		 test	 eax, eax
  00074	75 04		 jne	 SHORT $LN2@textiowrap@20

; 2453 :         return NULL;

  00076	33 c0		 xor	 eax, eax
  00078	eb 4c		 jmp	 SHORT $LN6@textiowrap@20
$LN2@textiowrap@20:

; 2454 :     }
; 2455 : 
; 2456 :     res = PyObject_CallMethodObjArgs((PyObject *) self, _PyIO_str_flush, NULL);

  0007a	45 33 c0	 xor	 r8d, r8d
  0007d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  00084	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00089	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0008e	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 2457 :     if (res == NULL)

  00093	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00099	75 04		 jne	 SHORT $LN1@textiowrap@20

; 2458 :         return NULL;

  0009b	33 c0		 xor	 eax, eax
  0009d	eb 27		 jmp	 SHORT $LN6@textiowrap@20
$LN1@textiowrap@20:

; 2459 :     Py_DECREF(res);

  0009f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000a4	e8 00 00 00 00	 call	 _Py_DecRef

; 2460 : 
; 2461 :     return PyObject_CallMethodObjArgs(self->buffer, _PyIO_str_truncate, pos, NULL);

  000a9	45 33 c9	 xor	 r9d, r9d
  000ac	4c 8b 44 24 28	 mov	 r8, QWORD PTR pos$[rsp]
  000b1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_truncate
  000b8	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000bd	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000c1	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
$LN6@textiowrap@20:

; 2462 : }

  000c6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ca	c3		 ret	 0
textiowrapper_truncate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@NFMOOIMF@?$CFU?5encoding?$DN?$CFR?$DO?$AA@ ; `string'
PUBLIC	??_C@_08NLOKMOEE@?5mode?$DN?$CFR?$AA@		; `string'
PUBLIC	??_C@_08CCFFODDC@?5name?$DN?$CFR?$AA@		; `string'
PUBLIC	??_C@_0BD@FGOBFCLO@?$DM_io?4TextIOWrapper?$AA@	; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_repr DD imagerel textiowrapper_repr
	DD	imagerel textiowrapper_repr+494
	DD	imagerel $unwind$textiowrapper_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_repr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BA@NFMOOIMF@?$CFU?5encoding?$DN?$CFR?$DO?$AA@
CONST	SEGMENT
??_C@_0BA@NFMOOIMF@?$CFU?5encoding?$DN?$CFR?$DO?$AA@ DB '%U encoding=%R>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLOKMOEE@?5mode?$DN?$CFR?$AA@
CONST	SEGMENT
??_C@_08NLOKMOEE@?5mode?$DN?$CFR?$AA@ DB ' mode=%R', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CCFFODDC@?5name?$DN?$CFR?$AA@
CONST	SEGMENT
??_C@_08CCFFODDC@?5name?$DN?$CFR?$AA@ DB ' name=%R', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FGOBFCLO@?$DM_io?4TextIOWrapper?$AA@
CONST	SEGMENT
??_C@_0BD@FGOBFCLO@?$DM_io?4TextIOWrapper?$AA@ DB '<_io.TextIOWrapper', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_repr
_TEXT	SEGMENT
res$ = 32
s$ = 40
nameobj$ = 48
modeobj$ = 56
self$ = 80
textiowrapper_repr PROC					; COMDAT

; 2466 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2467 :     PyObject *nameobj, *modeobj, *res, *s;
; 2468 : 
; 2469 :     CHECK_INITIALIZED(self);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00012	7f 3a		 jg	 SHORT $LN20@textiowrap@21
  00014	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00019	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  0001d	74 15		 je	 SHORT $LN19@textiowrap@21
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString
  00032	eb 13		 jmp	 SHORT $LN18@textiowrap@21
$LN19@textiowrap@21:
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00042	e8 00 00 00 00	 call	 PyErr_SetString
$LN18@textiowrap@21:
  00047	33 c0		 xor	 eax, eax
  00049	e9 9b 01 00 00	 jmp	 $LN21@textiowrap@21
$LN20@textiowrap@21:

; 2470 : 
; 2471 :     res = PyUnicode_FromString("<_io.TextIOWrapper");

  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@FGOBFCLO@?$DM_io?4TextIOWrapper?$AA@
  00055	e8 00 00 00 00	 call	 PyUnicode_FromString
  0005a	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 2472 :     if (res == NULL)

  0005f	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00065	75 07		 jne	 SHORT $LN17@textiowrap@21

; 2473 :         return NULL;

  00067	33 c0		 xor	 eax, eax
  00069	e9 7b 01 00 00	 jmp	 $LN21@textiowrap@21
$LN17@textiowrap@21:

; 2474 :     nameobj = _PyObject_GetAttrId((PyObject *) self, &PyId_name);

  0006e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  00073	8b c0		 mov	 eax, eax
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0007b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00084	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00088	48 8b d0	 mov	 rdx, rax
  0008b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00090	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00095	48 89 44 24 30	 mov	 QWORD PTR nameobj$[rsp], rax

; 2475 :     if (nameobj == NULL) {

  0009a	48 83 7c 24 30
	00		 cmp	 QWORD PTR nameobj$[rsp], 0
  000a0	75 1e		 jne	 SHORT $LN16@textiowrap@21

; 2476 :         if (PyErr_ExceptionMatches(PyExc_AttributeError))

  000a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000a9	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000ae	85 c0		 test	 eax, eax
  000b0	74 07		 je	 SHORT $LN15@textiowrap@21

; 2477 :             PyErr_Clear();

  000b2	e8 00 00 00 00	 call	 PyErr_Clear

; 2478 :         else

  000b7	eb 05		 jmp	 SHORT $LN14@textiowrap@21
$LN15@textiowrap@21:

; 2479 :             goto error;

  000b9	e9 11 01 00 00	 jmp	 $error$23245
$LN14@textiowrap@21:

; 2480 :     }
; 2481 :     else {

  000be	eb 4b		 jmp	 SHORT $LN13@textiowrap@21
$LN16@textiowrap@21:

; 2482 :         s = PyUnicode_FromFormat(" name=%R", nameobj);

  000c0	48 8b 54 24 30	 mov	 rdx, QWORD PTR nameobj$[rsp]
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CCFFODDC@?5name?$DN?$CFR?$AA@
  000cc	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000d1	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 2483 :         Py_DECREF(nameobj);

  000d6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR nameobj$[rsp]
  000db	e8 00 00 00 00	 call	 _Py_DecRef

; 2484 :         if (s == NULL)

  000e0	48 83 7c 24 28
	00		 cmp	 QWORD PTR s$[rsp], 0
  000e6	75 05		 jne	 SHORT $LN12@textiowrap@21

; 2485 :             goto error;

  000e8	e9 e2 00 00 00	 jmp	 $error$23245
$LN12@textiowrap@21:

; 2486 :         PyUnicode_AppendAndDel(&res, s);

  000ed	48 8b 54 24 28	 mov	 rdx, QWORD PTR s$[rsp]
  000f2	48 8d 4c 24 20	 lea	 rcx, QWORD PTR res$[rsp]
  000f7	e8 00 00 00 00	 call	 PyUnicode_AppendAndDel

; 2487 :         if (res == NULL)

  000fc	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00102	75 07		 jne	 SHORT $LN11@textiowrap@21

; 2488 :             return NULL;

  00104	33 c0		 xor	 eax, eax
  00106	e9 de 00 00 00	 jmp	 $LN21@textiowrap@21
$LN11@textiowrap@21:
$LN13@textiowrap@21:

; 2489 :     }
; 2490 :     modeobj = _PyObject_GetAttrId((PyObject *) self, &PyId_mode);

  0010b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_mode
  00110	8b c0		 mov	 eax, eax
  00112	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00118	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00121	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00125	48 8b d0	 mov	 rdx, rax
  00128	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0012d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00132	48 89 44 24 38	 mov	 QWORD PTR modeobj$[rsp], rax

; 2491 :     if (modeobj == NULL) {

  00137	48 83 7c 24 38
	00		 cmp	 QWORD PTR modeobj$[rsp], 0
  0013d	75 1b		 jne	 SHORT $LN10@textiowrap@21

; 2492 :         if (PyErr_ExceptionMatches(PyExc_AttributeError))

  0013f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00146	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0014b	85 c0		 test	 eax, eax
  0014d	74 07		 je	 SHORT $LN9@textiowrap@21

; 2493 :             PyErr_Clear();

  0014f	e8 00 00 00 00	 call	 PyErr_Clear

; 2494 :         else

  00154	eb 02		 jmp	 SHORT $LN8@textiowrap@21
$LN9@textiowrap@21:

; 2495 :             goto error;

  00156	eb 77		 jmp	 SHORT $error$23245
$LN8@textiowrap@21:

; 2496 :     }
; 2497 :     else {

  00158	eb 45		 jmp	 SHORT $LN7@textiowrap@21
$LN10@textiowrap@21:

; 2498 :         s = PyUnicode_FromFormat(" mode=%R", modeobj);

  0015a	48 8b 54 24 38	 mov	 rdx, QWORD PTR modeobj$[rsp]
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NLOKMOEE@?5mode?$DN?$CFR?$AA@
  00166	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0016b	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 2499 :         Py_DECREF(modeobj);

  00170	48 8b 4c 24 38	 mov	 rcx, QWORD PTR modeobj$[rsp]
  00175	e8 00 00 00 00	 call	 _Py_DecRef

; 2500 :         if (s == NULL)

  0017a	48 83 7c 24 28
	00		 cmp	 QWORD PTR s$[rsp], 0
  00180	75 02		 jne	 SHORT $LN6@textiowrap@21

; 2501 :             goto error;

  00182	eb 4b		 jmp	 SHORT $error$23245
$LN6@textiowrap@21:

; 2502 :         PyUnicode_AppendAndDel(&res, s);

  00184	48 8b 54 24 28	 mov	 rdx, QWORD PTR s$[rsp]
  00189	48 8d 4c 24 20	 lea	 rcx, QWORD PTR res$[rsp]
  0018e	e8 00 00 00 00	 call	 PyUnicode_AppendAndDel

; 2503 :         if (res == NULL)

  00193	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00199	75 04		 jne	 SHORT $LN5@textiowrap@21

; 2504 :             return NULL;

  0019b	33 c0		 xor	 eax, eax
  0019d	eb 4a		 jmp	 SHORT $LN21@textiowrap@21
$LN5@textiowrap@21:
$LN7@textiowrap@21:

; 2505 :     }
; 2506 :     s = PyUnicode_FromFormat("%U encoding=%R>",
; 2507 :                              res, self->encoding);

  0019f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  001a4	4c 8b 40 78	 mov	 r8, QWORD PTR [rax+120]
  001a8	48 8b 54 24 20	 mov	 rdx, QWORD PTR res$[rsp]
  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@NFMOOIMF@?$CFU?5encoding?$DN?$CFR?$DO?$AA@
  001b4	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  001b9	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 2508 :     Py_DECREF(res);

  001be	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  001c3	e8 00 00 00 00	 call	 _Py_DecRef

; 2509 :     return s;

  001c8	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  001cd	eb 1a		 jmp	 SHORT $LN21@textiowrap@21
$error$23245:
$LN4@textiowrap@21:

; 2510 : error:
; 2511 :     Py_XDECREF(res);

  001cf	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  001d5	74 0a		 je	 SHORT $LN1@textiowrap@21
  001d7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  001dc	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap@21:
  001e1	33 c0		 xor	 eax, eax
  001e3	85 c0		 test	 eax, eax
  001e5	75 e8		 jne	 SHORT $LN4@textiowrap@21

; 2512 :     return NULL;

  001e7	33 c0		 xor	 eax, eax
$LN21@textiowrap@21:

; 2513 : }

  001e9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001ed	c3		 ret	 0
textiowrapper_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_fileno DD imagerel textiowrapper_fileno
	DD	imagerel textiowrapper_fileno+131
	DD	imagerel $unwind$textiowrapper_fileno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_fileno DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_fileno
_TEXT	SEGMENT
self$ = 48
args$ = 56
textiowrapper_fileno PROC				; COMDAT

; 2520 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2521 :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7f 37		 jg	 SHORT $LN3@textiowrap@22
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00022	74 15		 je	 SHORT $LN2@textiowrap@22
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@textiowrap@22
$LN2@textiowrap@22:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@textiowrap@22:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 2e		 jmp	 SHORT $LN4@textiowrap@22
$LN3@textiowrap@22:

; 2522 :     return _PyObject_CallMethodId(self->buffer, &PyId_fileno, NULL);

  00050	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_fileno
  00055	8b c0		 mov	 eax, eax
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00066	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006a	45 33 c0	 xor	 r8d, r8d
  0006d	48 8b d0	 mov	 rdx, rax
  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00075	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00079	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
$LN4@textiowrap@22:

; 2523 : }

  0007e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00082	c3		 ret	 0
textiowrapper_fileno ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_seekable DD imagerel textiowrapper_seekable
	DD	imagerel textiowrapper_seekable+131
	DD	imagerel $unwind$textiowrapper_seekable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_seekable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_seekable
_TEXT	SEGMENT
self$ = 48
args$ = 56
textiowrapper_seekable PROC				; COMDAT

; 2527 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2528 :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7f 37		 jg	 SHORT $LN3@textiowrap@23
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00022	74 15		 je	 SHORT $LN2@textiowrap@23
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@textiowrap@23
$LN2@textiowrap@23:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@textiowrap@23:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 2e		 jmp	 SHORT $LN4@textiowrap@23
$LN3@textiowrap@23:

; 2529 :     return _PyObject_CallMethodId(self->buffer, &PyId_seekable, NULL);

  00050	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_seekable
  00055	8b c0		 mov	 eax, eax
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00066	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006a	45 33 c0	 xor	 r8d, r8d
  0006d	48 8b d0	 mov	 rdx, rax
  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00075	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00079	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
$LN4@textiowrap@23:

; 2530 : }

  0007e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00082	c3		 ret	 0
textiowrapper_seekable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_readable DD imagerel textiowrapper_readable
	DD	imagerel textiowrapper_readable+131
	DD	imagerel $unwind$textiowrapper_readable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_readable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_readable
_TEXT	SEGMENT
self$ = 48
args$ = 56
textiowrapper_readable PROC				; COMDAT

; 2534 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2535 :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7f 37		 jg	 SHORT $LN3@textiowrap@24
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00022	74 15		 je	 SHORT $LN2@textiowrap@24
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@textiowrap@24
$LN2@textiowrap@24:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@textiowrap@24:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 2e		 jmp	 SHORT $LN4@textiowrap@24
$LN3@textiowrap@24:

; 2536 :     return _PyObject_CallMethodId(self->buffer, &PyId_readable, NULL);

  00050	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_readable
  00055	8b c0		 mov	 eax, eax
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00066	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006a	45 33 c0	 xor	 r8d, r8d
  0006d	48 8b d0	 mov	 rdx, rax
  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00075	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00079	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
$LN4@textiowrap@24:

; 2537 : }

  0007e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00082	c3		 ret	 0
textiowrapper_readable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_writable DD imagerel textiowrapper_writable
	DD	imagerel textiowrapper_writable+131
	DD	imagerel $unwind$textiowrapper_writable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_writable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_writable
_TEXT	SEGMENT
self$ = 48
args$ = 56
textiowrapper_writable PROC				; COMDAT

; 2541 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2542 :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7f 37		 jg	 SHORT $LN3@textiowrap@25
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00022	74 15		 je	 SHORT $LN2@textiowrap@25
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@textiowrap@25
$LN2@textiowrap@25:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@textiowrap@25:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 2e		 jmp	 SHORT $LN4@textiowrap@25
$LN3@textiowrap@25:

; 2543 :     return _PyObject_CallMethodId(self->buffer, &PyId_writable, NULL);

  00050	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_writable
  00055	8b c0		 mov	 eax, eax
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00066	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006a	45 33 c0	 xor	 r8d, r8d
  0006d	48 8b d0	 mov	 rdx, rax
  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00075	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00079	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
$LN4@textiowrap@25:

; 2544 : }

  0007e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00082	c3		 ret	 0
textiowrapper_writable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_isatty DD imagerel textiowrapper_isatty
	DD	imagerel textiowrapper_isatty+131
	DD	imagerel $unwind$textiowrapper_isatty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_isatty DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_isatty
_TEXT	SEGMENT
self$ = 48
args$ = 56
textiowrapper_isatty PROC				; COMDAT

; 2548 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2549 :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7f 37		 jg	 SHORT $LN3@textiowrap@26
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00022	74 15		 je	 SHORT $LN2@textiowrap@26
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@textiowrap@26
$LN2@textiowrap@26:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@textiowrap@26:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 2e		 jmp	 SHORT $LN4@textiowrap@26
$LN3@textiowrap@26:

; 2550 :     return _PyObject_CallMethodId(self->buffer, &PyId_isatty, NULL);

  00050	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_isatty
  00055	8b c0		 mov	 eax, eax
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00066	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006a	45 33 c0	 xor	 r8d, r8d
  0006d	48 8b d0	 mov	 rdx, rax
  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00075	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00079	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
$LN4@textiowrap@26:

; 2551 : }

  0007e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00082	c3		 ret	 0
textiowrapper_isatty ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_getstate DD imagerel textiowrapper_getstate
	DD	imagerel textiowrapper_getstate+53
	DD	imagerel $unwind$textiowrapper_getstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_getstate DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@
CONST	SEGMENT
??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@ DB 'cannot s'
	DB	'erialize ''%s'' object', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_getstate
_TEXT	SEGMENT
self$ = 48
args$ = 56
textiowrapper_getstate PROC				; COMDAT

; 2555 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2556 :     PyErr_Format(PyExc_TypeError,
; 2557 :                  "cannot serialize '%s' object", Py_TYPE(self)->tp_name);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00029	e8 00 00 00 00	 call	 PyErr_Format

; 2558 :     return NULL;

  0002e	33 c0		 xor	 eax, eax

; 2559 : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
textiowrapper_getstate ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_flush DD imagerel textiowrapper_flush
	DD	imagerel textiowrapper_flush+373
	DD	imagerel $unwind$textiowrapper_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_flush DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_flush
_TEXT	SEGMENT
_res$23353 = 32
r$23352 = 40
self$ = 64
args$ = 72
textiowrapper_flush PROC				; COMDAT

; 2563 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2564 :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7f 3a		 jg	 SHORT $LN15@textiowrap@27
  00019	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00022	74 15		 je	 SHORT $LN14@textiowrap@27
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN13@textiowrap@27
$LN14@textiowrap@27:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN13@textiowrap@27:
  0004c	33 c0		 xor	 eax, eax
  0004e	e9 1d 01 00 00	 jmp	 $LN16@textiowrap@27
$LN15@textiowrap@27:
$LN12@textiowrap@27:

; 2565 :     CHECK_CLOSED(self);

  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTextIOWrapper_Type
  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0005f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00063	0f 85 8c 00 00
	00		 jne	 $LN9@textiowrap@27
  00069	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0006e	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  00076	74 17		 je	 SHORT $LN8@textiowrap@27
  00078	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0007d	48 8b 88 f8 00
	00 00		 mov	 rcx, QWORD PTR [rax+248]
  00084	e8 00 00 00 00	 call	 _PyFileIO_closed
  00089	89 44 24 28	 mov	 DWORD PTR r$23352[rsp], eax
  0008d	eb 46		 jmp	 SHORT $LN7@textiowrap@27
$LN8@textiowrap@27:
  0008f	33 d2		 xor	 edx, edx
  00091	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00096	e8 00 00 00 00	 call	 textiowrapper_closed_get
  0009b	48 89 44 24 20	 mov	 QWORD PTR _res$23353[rsp], rax
  000a0	48 83 7c 24 20
	00		 cmp	 QWORD PTR _res$23353[rsp], 0
  000a6	75 07		 jne	 SHORT $LN6@textiowrap@27
  000a8	33 c0		 xor	 eax, eax
  000aa	e9 c1 00 00 00	 jmp	 $LN16@textiowrap@27
$LN6@textiowrap@27:
  000af	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _res$23353[rsp]
  000b4	e8 00 00 00 00	 call	 PyObject_IsTrue
  000b9	89 44 24 28	 mov	 DWORD PTR r$23352[rsp], eax
  000bd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _res$23353[rsp]
  000c2	e8 00 00 00 00	 call	 _Py_DecRef
  000c7	83 7c 24 28 00	 cmp	 DWORD PTR r$23352[rsp], 0
  000cc	7d 07		 jge	 SHORT $LN5@textiowrap@27
  000ce	33 c0		 xor	 eax, eax
  000d0	e9 9b 00 00 00	 jmp	 $LN16@textiowrap@27
$LN5@textiowrap@27:
$LN7@textiowrap@27:
  000d5	83 7c 24 28 00	 cmp	 DWORD PTR r$23352[rsp], 0
  000da	7e 17		 jle	 SHORT $LN4@textiowrap@27
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
  000e3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000ea	e8 00 00 00 00	 call	 PyErr_SetString
  000ef	33 c0		 xor	 eax, eax
  000f1	eb 7d		 jmp	 SHORT $LN16@textiowrap@27
$LN4@textiowrap@27:
  000f3	eb 1a		 jmp	 SHORT $LN3@textiowrap@27
$LN9@textiowrap@27:
  000f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  000fc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00101	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  00106	48 85 c0	 test	 rax, rax
  00109	75 04		 jne	 SHORT $LN2@textiowrap@27
  0010b	33 c0		 xor	 eax, eax
  0010d	eb 61		 jmp	 SHORT $LN16@textiowrap@27
$LN2@textiowrap@27:
$LN3@textiowrap@27:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	0f 85 3a ff ff
	ff		 jne	 $LN12@textiowrap@27

; 2566 :     self->telling = self->seekable;

  00119	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0011e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00123	0f b6 89 ad 00
	00 00		 movzx	 ecx, BYTE PTR [rcx+173]
  0012a	88 88 af 00 00
	00		 mov	 BYTE PTR [rax+175], cl

; 2567 :     if (_textiowrapper_writeflush(self) < 0)

  00130	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00135	e8 00 00 00 00	 call	 _textiowrapper_writeflush
  0013a	85 c0		 test	 eax, eax
  0013c	7d 04		 jge	 SHORT $LN1@textiowrap@27

; 2568 :         return NULL;

  0013e	33 c0		 xor	 eax, eax
  00140	eb 2e		 jmp	 SHORT $LN16@textiowrap@27
$LN1@textiowrap@27:

; 2569 :     return _PyObject_CallMethodId(self->buffer, &PyId_flush, NULL);

  00142	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_flush
  00147	8b c0		 mov	 eax, eax
  00149	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0014f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00158	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0015c	45 33 c0	 xor	 r8d, r8d
  0015f	48 8b d0	 mov	 rdx, rax
  00162	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00167	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0016b	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
$LN16@textiowrap@27:

; 2570 : }

  00170	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00174	c3		 ret	 0
textiowrapper_flush ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@CDFKLAFC@textiowrapper_close?$AA@	; `string'
EXTRN	PyException_SetContext:PROC
EXTRN	PyErr_NormalizeException:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_close DD imagerel textiowrapper_close
	DD	imagerel textiowrapper_close+707
	DD	imagerel $unwind$textiowrapper_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_close DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_0BE@CDFKLAFC@textiowrapper_close?$AA@
CONST	SEGMENT
??_C@_0BE@CDFKLAFC@textiowrapper_close?$AA@ DB 'textiowrapper_close', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_close
_TEXT	SEGMENT
res$ = 48
r$ = 56
val$23401 = 64
tb$23402 = 72
exc$23399 = 80
_py_tmp$23423 = 88
val2$23428 = 96
self$ = 128
args$ = 136
textiowrapper_close PROC				; COMDAT

; 2574 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2575 :     PyObject *res;
; 2576 :     int r;
; 2577 :     CHECK_INITIALIZED(self);

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00016	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  0001a	7f 3d		 jg	 SHORT $LN23@textiowrap@28
  0001c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00024	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00028	74 15		 je	 SHORT $LN22@textiowrap@28
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  00031	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00038	e8 00 00 00 00	 call	 PyErr_SetString
  0003d	eb 13		 jmp	 SHORT $LN21@textiowrap@28
$LN22@textiowrap@28:
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00046	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004d	e8 00 00 00 00	 call	 PyErr_SetString
$LN21@textiowrap@28:
  00052	33 c0		 xor	 eax, eax
  00054	e9 65 02 00 00	 jmp	 $LN24@textiowrap@28
$LN23@textiowrap@28:

; 2578 : 
; 2579 :     res = textiowrapper_closed_get(self, NULL);

  00059	33 d2		 xor	 edx, edx
  0005b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00063	e8 00 00 00 00	 call	 textiowrapper_closed_get
  00068	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 2580 :     if (res == NULL)

  0006d	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00073	75 07		 jne	 SHORT $LN20@textiowrap@28

; 2581 :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	e9 42 02 00 00	 jmp	 $LN24@textiowrap@28
$LN20@textiowrap@28:

; 2582 :     r = PyObject_IsTrue(res);

  0007c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00081	e8 00 00 00 00	 call	 PyObject_IsTrue
  00086	89 44 24 38	 mov	 DWORD PTR r$[rsp], eax

; 2583 :     Py_DECREF(res);

  0008a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  0008f	e8 00 00 00 00	 call	 _Py_DecRef

; 2584 :     if (r < 0)

  00094	83 7c 24 38 00	 cmp	 DWORD PTR r$[rsp], 0
  00099	7d 07		 jge	 SHORT $LN19@textiowrap@28

; 2585 :         return NULL;

  0009b	33 c0		 xor	 eax, eax
  0009d	e9 1c 02 00 00	 jmp	 $LN24@textiowrap@28
$LN19@textiowrap@28:

; 2586 : 
; 2587 :     if (r > 0) {

  000a2	83 7c 24 38 00	 cmp	 DWORD PTR r$[rsp], 0
  000a7	7e 1d		 jle	 SHORT $LN18@textiowrap@28

; 2588 :         Py_RETURN_NONE; /* stream already closed */

  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000b0	e8 00 00 00 00	 call	 _Py_IncRef
  000b5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000bc	e9 fd 01 00 00	 jmp	 $LN24@textiowrap@28

; 2589 :     }
; 2590 :     else {

  000c1	e9 f8 01 00 00	 jmp	 $LN17@textiowrap@28
$LN18@textiowrap@28:

; 2591 :         PyObject *exc = NULL, *val, *tb;

  000c6	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR exc$23399[rsp], 0

; 2592 :         if (self->deallocating) {

  000cf	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000d7	0f be 80 b0 00
	00 00		 movsx	 eax, BYTE PTR [rax+176]
  000de	85 c0		 test	 eax, eax
  000e0	74 5b		 je	 SHORT $LN16@textiowrap@28

; 2593 :             res = _PyObject_CallMethodId(self->buffer, &PyId__dealloc_warn, "O", self);

  000e2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId__dealloc_warn
  000e7	8b c0		 mov	 eax, eax
  000e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000ef	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000f8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000fc	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR self$[rsp]
  00104	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0010b	48 8b d0	 mov	 rdx, rax
  0010e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00116	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0011a	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0011f	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 2594 :             if (res)

  00124	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0012a	74 0c		 je	 SHORT $LN15@textiowrap@28

; 2595 :                 Py_DECREF(res);

  0012c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00131	e8 00 00 00 00	 call	 _Py_DecRef

; 2596 :             else

  00136	eb 05		 jmp	 SHORT $LN14@textiowrap@28
$LN15@textiowrap@28:

; 2597 :                 PyErr_Clear();

  00138	e8 00 00 00 00	 call	 PyErr_Clear
$LN14@textiowrap@28:
$LN16@textiowrap@28:

; 2598 :         }
; 2599 :         res = _PyObject_CallMethodId((PyObject *)self, &PyId_flush, NULL);

  0013d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_flush
  00142	8b c0		 mov	 eax, eax
  00144	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0014a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00153	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00157	45 33 c0	 xor	 r8d, r8d
  0015a	48 8b d0	 mov	 rdx, rax
  0015d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00165	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0016a	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 2600 :         if (res == NULL)

  0016f	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00175	75 16		 jne	 SHORT $LN13@textiowrap@28

; 2601 :             PyErr_Fetch(&exc, &val, &tb);

  00177	4c 8d 44 24 48	 lea	 r8, QWORD PTR tb$23402[rsp]
  0017c	48 8d 54 24 40	 lea	 rdx, QWORD PTR val$23401[rsp]
  00181	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc$23399[rsp]
  00186	e8 00 00 00 00	 call	 PyErr_Fetch

; 2602 :         else

  0018b	eb 0a		 jmp	 SHORT $LN12@textiowrap@28
$LN13@textiowrap@28:

; 2603 :             Py_DECREF(res);

  0018d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00192	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@textiowrap@28:

; 2604 : 
; 2605 :         res = _PyObject_CallMethodId(self->buffer, &PyId_close, NULL);

  00197	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_close
  0019c	8b c0		 mov	 eax, eax
  0019e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001a4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001ad	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001b1	45 33 c0	 xor	 r8d, r8d
  001b4	48 8b d0	 mov	 rdx, rax
  001b7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001bf	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  001c3	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  001c8	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 2606 :         if (exc != NULL) {

  001cd	48 83 7c 24 50
	00		 cmp	 QWORD PTR exc$23399[rsp], 0
  001d3	0f 84 e0 00 00
	00		 je	 $LN11@textiowrap@28

; 2607 :             if (res != NULL) {

  001d9	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  001df	74 6b		 je	 SHORT $LN10@textiowrap@28
$LN9@textiowrap@28:

; 2608 :                 Py_CLEAR(res);

  001e1	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  001e7	74 47		 je	 SHORT $LN6@textiowrap@28
  001e9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001f1	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  001f6	41 b8 30 0a 00
	00		 mov	 r8d, 2608		; 00000a30H
  001fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CDFKLAFC@textiowrapper_close?$AA@
  0020a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0020f	85 c0		 test	 eax, eax
  00211	75 1d		 jne	 SHORT $LN6@textiowrap@28
  00213	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  00218	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$23423[rsp], rax
  0021d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  00226	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$23423[rsp]
  0022b	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@textiowrap@28:
  00230	33 c0		 xor	 eax, eax
  00232	85 c0		 test	 eax, eax
  00234	75 ab		 jne	 SHORT $LN9@textiowrap@28

; 2609 :                 PyErr_Restore(exc, val, tb);

  00236	4c 8b 44 24 48	 mov	 r8, QWORD PTR tb$23402[rsp]
  0023b	48 8b 54 24 40	 mov	 rdx, QWORD PTR val$23401[rsp]
  00240	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$23399[rsp]
  00245	e8 00 00 00 00	 call	 PyErr_Restore

; 2610 :             }
; 2611 :             else {

  0024a	eb 6d		 jmp	 SHORT $LN5@textiowrap@28
$LN10@textiowrap@28:

; 2612 :                 PyObject *val2;
; 2613 :                 Py_DECREF(exc);

  0024c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$23399[rsp]
  00251	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@textiowrap@28:

; 2614 :                 Py_XDECREF(tb);

  00256	48 83 7c 24 48
	00		 cmp	 QWORD PTR tb$23402[rsp], 0
  0025c	74 0a		 je	 SHORT $LN1@textiowrap@28
  0025e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tb$23402[rsp]
  00263	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap@28:
  00268	33 c0		 xor	 eax, eax
  0026a	85 c0		 test	 eax, eax
  0026c	75 e8		 jne	 SHORT $LN4@textiowrap@28

; 2615 :                 PyErr_Fetch(&exc, &val2, &tb);

  0026e	4c 8d 44 24 48	 lea	 r8, QWORD PTR tb$23402[rsp]
  00273	48 8d 54 24 60	 lea	 rdx, QWORD PTR val2$23428[rsp]
  00278	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc$23399[rsp]
  0027d	e8 00 00 00 00	 call	 PyErr_Fetch

; 2616 :                 PyErr_NormalizeException(&exc, &val2, &tb);

  00282	4c 8d 44 24 48	 lea	 r8, QWORD PTR tb$23402[rsp]
  00287	48 8d 54 24 60	 lea	 rdx, QWORD PTR val2$23428[rsp]
  0028c	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc$23399[rsp]
  00291	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 2617 :                 PyException_SetContext(val2, val);

  00296	48 8b 54 24 40	 mov	 rdx, QWORD PTR val$23401[rsp]
  0029b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR val2$23428[rsp]
  002a0	e8 00 00 00 00	 call	 PyException_SetContext

; 2618 :                 PyErr_Restore(exc, val2, tb);

  002a5	4c 8b 44 24 48	 mov	 r8, QWORD PTR tb$23402[rsp]
  002aa	48 8b 54 24 60	 mov	 rdx, QWORD PTR val2$23428[rsp]
  002af	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$23399[rsp]
  002b4	e8 00 00 00 00	 call	 PyErr_Restore
$LN5@textiowrap@28:
$LN11@textiowrap@28:

; 2619 :             }
; 2620 :         }
; 2621 :         return res;

  002b9	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN17@textiowrap@28:
$LN24@textiowrap@28:

; 2622 :     }
; 2623 : }

  002be	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002c2	c3		 ret	 0
textiowrapper_close ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@DPIGHDHO@textiowrapper_iternext?$AA@	; `string'
PUBLIC	??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@ ; `string'
EXTRN	_PyIO_str_readline:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_iternext DD imagerel textiowrapper_iternext
	DD	imagerel textiowrapper_iternext+628
	DD	imagerel $unwind$textiowrapper_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_iternext DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BH@DPIGHDHO@textiowrapper_iternext?$AA@
CONST	SEGMENT
??_C@_0BH@DPIGHDHO@textiowrapper_iternext?$AA@ DB 'textiowrapper_iternext'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@
CONST	SEGMENT
??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@ DB 'readli'
	DB	'ne() should have returned an str object, not ''%.200s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_iternext
_TEXT	SEGMENT
line$ = 48
_py_tmp$23475 = 56
tv140 = 64
self$ = 96
textiowrapper_iternext PROC				; COMDAT

; 2627 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2628 :     PyObject *line;
; 2629 : 
; 2630 :     CHECK_INITIALIZED(self);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00012	7f 3a		 jg	 SHORT $LN13@textiowrap@29
  00014	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00019	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  0001d	74 15		 je	 SHORT $LN12@textiowrap@29
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString
  00032	eb 13		 jmp	 SHORT $LN11@textiowrap@29
$LN12@textiowrap@29:
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00042	e8 00 00 00 00	 call	 PyErr_SetString
$LN11@textiowrap@29:
  00047	33 c0		 xor	 eax, eax
  00049	e9 21 02 00 00	 jmp	 $LN14@textiowrap@29
$LN13@textiowrap@29:

; 2631 : 
; 2632 :     self->telling = 0;

  0004e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00053	c6 80 af 00 00
	00 00		 mov	 BYTE PTR [rax+175], 0

; 2633 :     if (Py_TYPE(self) == &PyTextIOWrapper_Type) {

  0005a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTextIOWrapper_Type
  00061	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00066	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0006a	75 18		 jne	 SHORT $LN10@textiowrap@29

; 2634 :         /* Skip method call overhead for speed */
; 2635 :         line = _textiowrapper_readline(self, -1);

  0006c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00073	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00078	e8 00 00 00 00	 call	 _textiowrapper_readline
  0007d	48 89 44 24 30	 mov	 QWORD PTR line$[rsp], rax

; 2636 :     }
; 2637 :     else {

  00082	eb 6a		 jmp	 SHORT $LN9@textiowrap@29
$LN10@textiowrap@29:

; 2638 :         line = PyObject_CallMethodObjArgs((PyObject *)self,
; 2639 :                                            _PyIO_str_readline, NULL);

  00084	45 33 c0	 xor	 r8d, r8d
  00087	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readline
  0008e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00093	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00098	48 89 44 24 30	 mov	 QWORD PTR line$[rsp], rax

; 2640 :         if (line && !PyUnicode_Check(line)) {

  0009d	48 83 7c 24 30
	00		 cmp	 QWORD PTR line$[rsp], 0
  000a3	74 49		 je	 SHORT $LN8@textiowrap@29
  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR line$[rsp]
  000aa	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ae	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000b9	85 c0		 test	 eax, eax
  000bb	75 31		 jne	 SHORT $LN8@textiowrap@29

; 2641 :             PyErr_Format(PyExc_IOError,
; 2642 :                          "readline() should have returned an str object, "
; 2643 :                          "not '%.200s'", Py_TYPE(line)->tp_name);

  000bd	48 8b 44 24 30	 mov	 rax, QWORD PTR line$[rsp]
  000c2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c6	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@
  000d1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000d8	e8 00 00 00 00	 call	 PyErr_Format

; 2644 :             Py_DECREF(line);

  000dd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR line$[rsp]
  000e2	e8 00 00 00 00	 call	 _Py_DecRef

; 2645 :             return NULL;

  000e7	33 c0		 xor	 eax, eax
  000e9	e9 81 01 00 00	 jmp	 $LN14@textiowrap@29
$LN8@textiowrap@29:
$LN9@textiowrap@29:

; 2646 :         }
; 2647 :     }
; 2648 : 
; 2649 :     if (line == NULL || PyUnicode_READY(line) == -1)

  000ee	48 83 7c 24 30
	00		 cmp	 QWORD PTR line$[rsp], 0
  000f4	74 65		 je	 SHORT $LN6@textiowrap@29
  000f6	48 8b 44 24 30	 mov	 rax, QWORD PTR line$[rsp]
  000fb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ff	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00105	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0010a	85 c0		 test	 eax, eax
  0010c	75 1c		 jne	 SHORT $LN16@textiowrap@29
  0010e	41 b8 59 0a 00
	00		 mov	 r8d, 2649		; 00000a59H
  00114	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0011b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  00122	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00128	33 c0		 xor	 eax, eax
$LN16@textiowrap@29:
  0012a	48 8b 44 24 30	 mov	 rax, QWORD PTR line$[rsp]
  0012f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00132	c1 e8 07	 shr	 eax, 7
  00135	83 e0 01	 and	 eax, 1
  00138	85 c0		 test	 eax, eax
  0013a	74 0a		 je	 SHORT $LN17@textiowrap@29
  0013c	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
  00144	eb 0e		 jmp	 SHORT $LN18@textiowrap@29
$LN17@textiowrap@29:
  00146	48 8b 4c 24 30	 mov	 rcx, QWORD PTR line$[rsp]
  0014b	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00150	89 44 24 40	 mov	 DWORD PTR tv140[rsp], eax
$LN18@textiowrap@29:
  00154	83 7c 24 40 ff	 cmp	 DWORD PTR tv140[rsp], -1
  00159	75 07		 jne	 SHORT $LN7@textiowrap@29
$LN6@textiowrap@29:

; 2650 :         return NULL;

  0015b	33 c0		 xor	 eax, eax
  0015d	e9 0d 01 00 00	 jmp	 $LN14@textiowrap@29
$LN7@textiowrap@29:

; 2651 : 
; 2652 :     if (PyUnicode_GET_LENGTH(line) == 0) {

  00162	48 8b 44 24 30	 mov	 rax, QWORD PTR line$[rsp]
  00167	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0016b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00171	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00176	85 c0		 test	 eax, eax
  00178	75 1c		 jne	 SHORT $LN19@textiowrap@29
  0017a	41 b8 5c 0a 00
	00		 mov	 r8d, 2652		; 00000a5cH
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  0018e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00194	33 c0		 xor	 eax, eax
$LN19@textiowrap@29:
  00196	48 8b 44 24 30	 mov	 rax, QWORD PTR line$[rsp]
  0019b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0019e	c1 e8 07	 shr	 eax, 7
  001a1	83 e0 01	 and	 eax, 1
  001a4	85 c0		 test	 eax, eax
  001a6	75 1c		 jne	 SHORT $LN20@textiowrap@29
  001a8	41 b8 5c 0a 00
	00		 mov	 r8d, 2652		; 00000a5cH
  001ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  001bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c2	33 c0		 xor	 eax, eax
$LN20@textiowrap@29:
  001c4	48 8b 44 24 30	 mov	 rax, QWORD PTR line$[rsp]
  001c9	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  001ce	0f 85 96 00 00
	00		 jne	 $LN5@textiowrap@29

; 2653 :         /* Reached EOF or would have blocked */
; 2654 :         Py_DECREF(line);

  001d4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR line$[rsp]
  001d9	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@textiowrap@29:

; 2655 :         Py_CLEAR(self->snapshot);

  001de	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001e3	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  001eb	74 5c		 je	 SHORT $LN1@textiowrap@29
  001ed	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001f5	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001fa	4c 8b 88 e8 00
	00 00		 mov	 r9, QWORD PTR [rax+232]
  00201	41 b8 5f 0a 00
	00		 mov	 r8d, 2655		; 00000a5fH
  00207	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LMODBMNC@?4?4?2Modules?2_io?2textio?4c?$AA@
  0020e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DPIGHDHO@textiowrapper_iternext?$AA@
  00215	e8 00 00 00 00	 call	 _PyParallel_Guard
  0021a	85 c0		 test	 eax, eax
  0021c	75 2b		 jne	 SHORT $LN1@textiowrap@29
  0021e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00223	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  0022a	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$23475[rsp], rax
  0022f	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00234	48 c7 80 e8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+232], 0
  0023f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$23475[rsp]
  00244	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@textiowrap@29:
  00249	33 c0		 xor	 eax, eax
  0024b	85 c0		 test	 eax, eax
  0024d	75 8f		 jne	 SHORT $LN4@textiowrap@29

; 2656 :         self->telling = self->seekable;

  0024f	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00254	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00259	0f b6 89 ad 00
	00 00		 movzx	 ecx, BYTE PTR [rcx+173]
  00260	88 88 af 00 00
	00		 mov	 BYTE PTR [rax+175], cl

; 2657 :         return NULL;

  00266	33 c0		 xor	 eax, eax
  00268	eb 05		 jmp	 SHORT $LN14@textiowrap@29
$LN5@textiowrap@29:

; 2658 :     }
; 2659 : 
; 2660 :     return line;

  0026a	48 8b 44 24 30	 mov	 rax, QWORD PTR line$[rsp]
$LN14@textiowrap@29:

; 2661 : }

  0026f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00273	c3		 ret	 0
textiowrapper_iternext ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_name_get DD imagerel textiowrapper_name_get
	DD	imagerel textiowrapper_name_get+128
	DD	imagerel $unwind$textiowrapper_name_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_name_get DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_name_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
textiowrapper_name_get PROC				; COMDAT

; 2665 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2666 :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7f 37		 jg	 SHORT $LN3@textiowrap@30
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00022	74 15		 je	 SHORT $LN2@textiowrap@30
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@textiowrap@30
$LN2@textiowrap@30:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@textiowrap@30:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 2b		 jmp	 SHORT $LN4@textiowrap@30
$LN3@textiowrap@30:

; 2667 :     return _PyObject_GetAttrId(self->buffer, &PyId_name);

  00050	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  00055	8b c0		 mov	 eax, eax
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00066	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006a	48 8b d0	 mov	 rdx, rax
  0006d	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00072	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00076	e8 00 00 00 00	 call	 _PyObject_GetAttrId
$LN4@textiowrap@30:

; 2668 : }

  0007b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007f	c3		 ret	 0
textiowrapper_name_get ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttr:PROC
EXTRN	_PyIO_str_closed:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_closed_get DD imagerel textiowrapper_closed_get
	DD	imagerel textiowrapper_closed_get+106
	DD	imagerel $unwind$textiowrapper_closed_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_closed_get DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_closed_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
textiowrapper_closed_get PROC				; COMDAT

; 2672 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2673 :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7f 37		 jg	 SHORT $LN3@textiowrap@31
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00022	74 15		 je	 SHORT $LN2@textiowrap@31
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@textiowrap@31
$LN2@textiowrap@31:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@textiowrap@31:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 15		 jmp	 SHORT $LN4@textiowrap@31
$LN3@textiowrap@31:

; 2674 :     return PyObject_GetAttr(self->buffer, _PyIO_str_closed);

  00050	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_closed
  00057	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005c	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00060	e8 00 00 00 00	 call	 PyObject_GetAttr
$LN4@textiowrap@31:

; 2675 : }

  00065	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00069	c3		 ret	 0
textiowrapper_closed_get ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_newlines:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_newlines_get DD imagerel textiowrapper_newlines_get
	DD	imagerel textiowrapper_newlines_get+211
	DD	imagerel $unwind$textiowrapper_newlines_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_newlines_get DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_newlines_get
_TEXT	SEGMENT
res$ = 32
self$ = 64
context$ = 72
textiowrapper_newlines_get PROC				; COMDAT

; 2679 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2680 :     PyObject *res;
; 2681 :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7f 37		 jg	 SHORT $LN7@textiowrap@32
  00019	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00022	74 15		 je	 SHORT $LN6@textiowrap@32
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN5@textiowrap@32
$LN6@textiowrap@32:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN5@textiowrap@32:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 7e		 jmp	 SHORT $LN8@textiowrap@32
$LN7@textiowrap@32:

; 2682 :     if (self->decoder == NULL)

  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00055	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0005d	75 15		 jne	 SHORT $LN4@textiowrap@32

; 2683 :         Py_RETURN_NONE;

  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00066	e8 00 00 00 00	 call	 _Py_IncRef
  0006b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00072	eb 5a		 jmp	 SHORT $LN8@textiowrap@32
$LN4@textiowrap@32:

; 2684 :     res = PyObject_GetAttr(self->decoder, _PyIO_str_newlines);

  00074	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_newlines
  0007b	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00080	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00087	e8 00 00 00 00	 call	 PyObject_GetAttr
  0008c	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 2685 :     if (res == NULL) {

  00091	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00097	75 30		 jne	 SHORT $LN3@textiowrap@32

; 2686 :         if (PyErr_ExceptionMatches(PyExc_AttributeError)) {

  00099	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000a0	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000a5	85 c0		 test	 eax, eax
  000a7	74 1c		 je	 SHORT $LN2@textiowrap@32

; 2687 :             PyErr_Clear();

  000a9	e8 00 00 00 00	 call	 PyErr_Clear

; 2688 :             Py_RETURN_NONE;

  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000b5	e8 00 00 00 00	 call	 _Py_IncRef
  000ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000c1	eb 0b		 jmp	 SHORT $LN8@textiowrap@32

; 2689 :         }
; 2690 :         else {

  000c3	eb 04		 jmp	 SHORT $LN1@textiowrap@32
$LN2@textiowrap@32:

; 2691 :             return NULL;

  000c5	33 c0		 xor	 eax, eax
  000c7	eb 05		 jmp	 SHORT $LN8@textiowrap@32
$LN1@textiowrap@32:
$LN3@textiowrap@32:

; 2692 :         }
; 2693 :     }
; 2694 :     return res;

  000c9	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN8@textiowrap@32:

; 2695 : }

  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
textiowrapper_newlines_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_errors_get DD imagerel textiowrapper_errors_get
	DD	imagerel textiowrapper_errors_get+168
	DD	imagerel $unwind$textiowrapper_errors_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_errors_get DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_errors_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
textiowrapper_errors_get PROC				; COMDAT

; 2699 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2700 :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7f 37		 jg	 SHORT $LN3@textiowrap@33
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00022	74 15		 je	 SHORT $LN2@textiowrap@33
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@textiowrap@33
$LN2@textiowrap@33:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@textiowrap@33:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 53		 jmp	 SHORT $LN4@textiowrap@33
$LN3@textiowrap@33:

; 2701 :     return PyUnicode_FromString(PyBytes_AS_STRING(self->errors));

  00050	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00055	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0005c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00060	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00066	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0006b	85 c0		 test	 eax, eax
  0006d	75 1c		 jne	 SHORT $LN6@textiowrap@33
  0006f	41 b8 8d 0a 00
	00		 mov	 r8d, 2701		; 00000a8dH
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@PMKEGCMI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAt?$AAe?$AAx?$AAt?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MLIGNIII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00089	33 c0		 xor	 eax, eax
$LN6@textiowrap@33:
  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00090	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00097	48 83 c0 78	 add	 rax, 120		; 00000078H
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN4@textiowrap@33:

; 2702 : }

  000a3	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a7	c3		 ret	 0
textiowrapper_errors_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_chunk_size_get DD imagerel textiowrapper_chunk_size_get
	DD	imagerel textiowrapper_chunk_size_get+99
	DD	imagerel $unwind$textiowrapper_chunk_size_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_chunk_size_get DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT textiowrapper_chunk_size_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
textiowrapper_chunk_size_get PROC			; COMDAT

; 2706 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2707 :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00017	7f 37		 jg	 SHORT $LN3@textiowrap@34
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00022	74 15		 je	 SHORT $LN2@textiowrap@34
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@textiowrap@34
$LN2@textiowrap@34:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@textiowrap@34:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 0e		 jmp	 SHORT $LN4@textiowrap@34
$LN3@textiowrap@34:

; 2708 :     return PyLong_FromSsize_t(self->chunk_size);

  00050	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00055	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00059	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN4@textiowrap@34:

; 2709 : }

  0005e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00062	c3		 ret	 0
textiowrapper_chunk_size_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@JFLOBMAD@a?5strictly?5positive?5integer?5is?5r@ ; `string'
EXTRN	PyNumber_AsSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$textiowrapper_chunk_size_set DD imagerel textiowrapper_chunk_size_set
	DD	imagerel textiowrapper_chunk_size_set+190
	DD	imagerel $unwind$textiowrapper_chunk_size_set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$textiowrapper_chunk_size_set DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CI@JFLOBMAD@a?5strictly?5positive?5integer?5is?5r@
CONST	SEGMENT
??_C@_0CI@JFLOBMAD@a?5strictly?5positive?5integer?5is?5r@ DB 'a strictly '
	DB	'positive integer is required', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT textiowrapper_chunk_size_set
_TEXT	SEGMENT
n$ = 32
self$ = 64
arg$ = 72
context$ = 80
textiowrapper_chunk_size_set PROC			; COMDAT

; 2713 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2714 :     Py_ssize_t n;
; 2715 :     CHECK_INITIALIZED_INT(self);

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  0001c	7f 3a		 jg	 SHORT $LN5@textiowrap@35
  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00023	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00027	74 15		 je	 SHORT $LN4@textiowrap@35
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FMNEPBDN@underlying?5buffer?5has?5been?5detac@
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00037	e8 00 00 00 00	 call	 PyErr_SetString
  0003c	eb 13		 jmp	 SHORT $LN3@textiowrap@35
$LN4@textiowrap@35:
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004c	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@textiowrap@35:
  00051	b8 ff ff ff ff	 mov	 eax, -1
  00056	eb 61		 jmp	 SHORT $LN6@textiowrap@35
$LN5@textiowrap@35:

; 2716 :     n = PyNumber_AsSsize_t(arg, PyExc_ValueError);

  00058	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  0005f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arg$[rsp]
  00064	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  00069	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 2717 :     if (n == -1 && PyErr_Occurred())

  0006e	48 83 7c 24 20
	ff		 cmp	 QWORD PTR n$[rsp], -1
  00074	75 11		 jne	 SHORT $LN2@textiowrap@35
  00076	e8 00 00 00 00	 call	 PyErr_Occurred
  0007b	48 85 c0	 test	 rax, rax
  0007e	74 07		 je	 SHORT $LN2@textiowrap@35

; 2718 :         return -1;

  00080	b8 ff ff ff ff	 mov	 eax, -1
  00085	eb 32		 jmp	 SHORT $LN6@textiowrap@35
$LN2@textiowrap@35:

; 2719 :     if (n <= 0) {

  00087	48 83 7c 24 20
	00		 cmp	 QWORD PTR n$[rsp], 0
  0008d	7f 1a		 jg	 SHORT $LN1@textiowrap@35

; 2720 :         PyErr_SetString(PyExc_ValueError,
; 2721 :                         "a strictly positive integer is required");

  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@JFLOBMAD@a?5strictly?5positive?5integer?5is?5r@
  00096	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0009d	e8 00 00 00 00	 call	 PyErr_SetString

; 2722 :         return -1;

  000a2	b8 ff ff ff ff	 mov	 eax, -1
  000a7	eb 10		 jmp	 SHORT $LN6@textiowrap@35
$LN1@textiowrap@35:

; 2723 :     }
; 2724 :     self->chunk_size = n;

  000a9	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000ae	48 8b 4c 24 20	 mov	 rcx, QWORD PTR n$[rsp]
  000b3	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 2725 :     return 0;

  000b7	33 c0		 xor	 eax, eax
$LN6@textiowrap@35:

; 2726 : }

  000b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bd	c3		 ret	 0
textiowrapper_chunk_size_set ENDP
_TEXT	ENDS
END
