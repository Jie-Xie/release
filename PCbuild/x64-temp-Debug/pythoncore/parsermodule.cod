; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06MKPCHOAB@pickle?$AA@			; `string'
PUBLIC	??_C@_06OENOICDH@parser?$AA@			; `string'
PUBLIC	??_C@_0DM@NBLABHOM@Returns?5the?5pickle?5magic?5to?5allo@ ; `string'
PUBLIC	??_C@_08EEAEJMPM@_pickler?$AA@			; `string'
PUBLIC	??_C@_08NFEDFLJK@tuple2st?$AA@			; `string'
PUBLIC	??_C@_0CN@NOCBOFNF@Creates?5a?5list?9tree?5representati@ ; `string'
PUBLIC	??_C@_07OOJPKMEF@st2list?$AA@			; `string'
PUBLIC	??_C@_0CO@IAPBJAMO@Creates?5a?5tuple?9tree?5representat@ ; `string'
PUBLIC	??_C@_08FEMHBCAC@st2tuple?$AA@			; `string'
PUBLIC	??_C@_0DB@LOLPPNBK@Creates?5an?5ST?5object?5from?5a?5tree@ ; `string'
PUBLIC	??_C@_0M@IODEHOKN@sequence2st?$AA@		; `string'
PUBLIC	??_C@_0CD@KPIPHOID@Creates?5an?5ST?5object?5from?5a?5suit@ ; `string'
PUBLIC	??_C@_05PPOFKJGL@suite?$AA@			; `string'
PUBLIC	??_C@_0DF@LCMHLDAF@Determines?5if?5an?5ST?5object?5was?5c@ ; `string'
PUBLIC	??_C@_0DL@CMEKOJEA@Determines?5if?5an?5ST?5object?5was?5c@ ; `string'
PUBLIC	??_C@_0CJ@LPHIHCBO@Creates?5an?5ST?5object?5from?5an?5exp@ ; `string'
PUBLIC	??_C@_04IPHMALII@expr?$AA@			; `string'
PUBLIC	??_C@_0CK@BFIACKMB@Compiles?5an?5ST?5object?5into?5a?5cod@ ; `string'
PUBLIC	??_C@_09GANMKKNK@compilest?$AA@			; `string'
PUBLIC	??_C@_08IBBDGPOF@sequence?$AA@			; `string'
PUBLIC	??_C@_06OEKOLKIL@source?$AA@			; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	??_C@_08CFPJCNGC@col_info?$AA@			; `string'
PUBLIC	??_C@_09CHLNHKJH@line_info?$AA@			; `string'
PUBLIC	??_C@_02BNFKEMBG@st?$AA@			; `string'
PUBLIC	??_C@_0DE@MHDFBGFO@Intermediate?5representation?5of?5a@ ; `string'
PUBLIC	??_C@_09BEPDEEBN@parser?4st?$AA@		; `string'
PUBLIC	??_C@_0CC@KFEBPDOJ@Returns?5size?5in?5memory?0?5in?5bytes@ ; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_0DA@KGMEGDFO@Creates?5a?5tuple?9tree?5representat@ ; `string'
PUBLIC	??_C@_07FMMAKOKC@totuple?$AA@			; `string'
PUBLIC	??_C@_0CP@CPJNHDKH@Creates?5a?5list?9tree?5representati@ ; `string'
PUBLIC	??_C@_06IEBOCBAI@tolist?$AA@			; `string'
PUBLIC	??_C@_0DH@JMKDJABI@Determines?5if?5this?5ST?5object?5was@ ; `string'
PUBLIC	??_C@_07DJCBKGIH@issuite?$AA@			; `string'
PUBLIC	??_C@_0DN@JDPEKGGP@Determines?5if?5this?5ST?5object?5was@ ; `string'
PUBLIC	??_C@_06EHKKFFLC@isexpr?$AA@			; `string'
PUBLIC	??_C@_0CL@DBGONLLJ@Compile?5this?5ST?5object?5into?5a?5co@ ; `string'
PUBLIC	??_C@_07OLJGFCKG@compile?$AA@			; `string'
_BSS	SEGMENT
parser_error DQ	01H DUP (?)
pickle_constructor DQ 01H DUP (?)
_BSS	ENDS
_TLS	SEGMENT
?PyId__pickler@?2??PyInit_parser@@9@9 DQ 0000000000000000H ; `PyInit_parser'::`3'::PyId__pickler
	DQ	FLAT:??_C@_08EEAEJMPM@_pickler?$AA@
	DQ	0000000000000000H
?PyId_sequence2st@?2??PyInit_parser@@9@9 DQ 0000000000000000H ; `PyInit_parser'::`3'::PyId_sequence2st
	DQ	FLAT:??_C@_0M@IODEHOKN@sequence2st?$AA@
	DQ	0000000000000000H
?PyId_pickle@?2??PyInit_parser@@9@9 DQ 0000000000000000H ; `PyInit_parser'::`3'::PyId_pickle
	DQ	FLAT:??_C@_06MKPCHOAB@pickle?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_06MKPCHOAB@pickle?$AA@
CONST	SEGMENT
??_C@_06MKPCHOAB@pickle?$AA@ DB 'pickle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OENOICDH@parser?$AA@
CONST	SEGMENT
??_C@_06OENOICDH@parser?$AA@ DB 'parser', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@NBLABHOM@Returns?5the?5pickle?5magic?5to?5allo@
CONST	SEGMENT
??_C@_0DM@NBLABHOM@Returns?5the?5pickle?5magic?5to?5allo@ DB 'Returns the'
	DB	' pickle magic to allow ST objects to be pickled.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EEAEJMPM@_pickler?$AA@
CONST	SEGMENT
??_C@_08EEAEJMPM@_pickler?$AA@ DB '_pickler', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NFEDFLJK@tuple2st?$AA@
CONST	SEGMENT
??_C@_08NFEDFLJK@tuple2st?$AA@ DB 'tuple2st', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NOCBOFNF@Creates?5a?5list?9tree?5representati@
CONST	SEGMENT
??_C@_0CN@NOCBOFNF@Creates?5a?5list?9tree?5representati@ DB 'Creates a li'
	DB	'st-tree representation of an ST.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OOJPKMEF@st2list?$AA@
CONST	SEGMENT
??_C@_07OOJPKMEF@st2list?$AA@ DB 'st2list', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IAPBJAMO@Creates?5a?5tuple?9tree?5representat@
CONST	SEGMENT
??_C@_0CO@IAPBJAMO@Creates?5a?5tuple?9tree?5representat@ DB 'Creates a tu'
	DB	'ple-tree representation of an ST.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FEMHBCAC@st2tuple?$AA@
CONST	SEGMENT
??_C@_08FEMHBCAC@st2tuple?$AA@ DB 'st2tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LOLPPNBK@Creates?5an?5ST?5object?5from?5a?5tree@
CONST	SEGMENT
??_C@_0DB@LOLPPNBK@Creates?5an?5ST?5object?5from?5a?5tree@ DB 'Creates an'
	DB	' ST object from a tree representation.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IODEHOKN@sequence2st?$AA@
CONST	SEGMENT
??_C@_0M@IODEHOKN@sequence2st?$AA@ DB 'sequence2st', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KPIPHOID@Creates?5an?5ST?5object?5from?5a?5suit@
CONST	SEGMENT
??_C@_0CD@KPIPHOID@Creates?5an?5ST?5object?5from?5a?5suit@ DB 'Creates an'
	DB	' ST object from a suite.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPOFKJGL@suite?$AA@
CONST	SEGMENT
??_C@_05PPOFKJGL@suite?$AA@ DB 'suite', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LCMHLDAF@Determines?5if?5an?5ST?5object?5was?5c@
CONST	SEGMENT
??_C@_0DF@LCMHLDAF@Determines?5if?5an?5ST?5object?5was?5c@ DB 'Determines'
	DB	' if an ST object was created from a suite.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@CMEKOJEA@Determines?5if?5an?5ST?5object?5was?5c@
CONST	SEGMENT
??_C@_0DL@CMEKOJEA@Determines?5if?5an?5ST?5object?5was?5c@ DB 'Determines'
	DB	' if an ST object was created from an expression.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LPHIHCBO@Creates?5an?5ST?5object?5from?5an?5exp@
CONST	SEGMENT
??_C@_0CJ@LPHIHCBO@Creates?5an?5ST?5object?5from?5an?5exp@ DB 'Creates an'
	DB	' ST object from an expression.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IPHMALII@expr?$AA@
CONST	SEGMENT
??_C@_04IPHMALII@expr?$AA@ DB 'expr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BFIACKMB@Compiles?5an?5ST?5object?5into?5a?5cod@
CONST	SEGMENT
??_C@_0CK@BFIACKMB@Compiles?5an?5ST?5object?5into?5a?5cod@ DB 'Compiles a'
	DB	'n ST object into a code object.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GANMKKNK@compilest?$AA@
CONST	SEGMENT
??_C@_09GANMKKNK@compilest?$AA@ DB 'compilest', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBBDGPOF@sequence?$AA@
CONST	SEGMENT
??_C@_08IBBDGPOF@sequence?$AA@ DB 'sequence', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source?$AA@
CONST	SEGMENT
??_C@_06OEKOLKIL@source?$AA@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CFPJCNGC@col_info?$AA@
CONST	SEGMENT
??_C@_08CFPJCNGC@col_info?$AA@ DB 'col_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CHLNHKJH@line_info?$AA@
CONST	SEGMENT
??_C@_09CHLNHKJH@line_info?$AA@ DB 'line_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02BNFKEMBG@st?$AA@
CONST	SEGMENT
??_C@_02BNFKEMBG@st?$AA@ DB 'st', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MHDFBGFO@Intermediate?5representation?5of?5a@
CONST	SEGMENT
??_C@_0DE@MHDFBGFO@Intermediate?5representation?5of?5a@ DB 'Intermediate '
	DB	'representation of a Python parse tree.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BEPDEEBN@parser?4st?$AA@
CONST	SEGMENT
??_C@_09BEPDEEBN@parser?4st?$AA@ DB 'parser.st', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KFEBPDOJ@Returns?5size?5in?5memory?0?5in?5bytes@
CONST	SEGMENT
??_C@_0CC@KFEBPDOJ@Returns?5size?5in?5memory?0?5in?5bytes@ DB 'Returns si'
	DB	'ze in memory, in bytes.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KGMEGDFO@Creates?5a?5tuple?9tree?5representat@
CONST	SEGMENT
??_C@_0DA@KGMEGDFO@Creates?5a?5tuple?9tree?5representat@ DB 'Creates a tu'
	DB	'ple-tree representation of this ST.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FMMAKOKC@totuple?$AA@
CONST	SEGMENT
??_C@_07FMMAKOKC@totuple?$AA@ DB 'totuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@CPJNHDKH@Creates?5a?5list?9tree?5representati@
CONST	SEGMENT
??_C@_0CP@CPJNHDKH@Creates?5a?5list?9tree?5representati@ DB 'Creates a li'
	DB	'st-tree representation of this ST.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEBOCBAI@tolist?$AA@
CONST	SEGMENT
??_C@_06IEBOCBAI@tolist?$AA@ DB 'tolist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@JMKDJABI@Determines?5if?5this?5ST?5object?5was@
CONST	SEGMENT
??_C@_0DH@JMKDJABI@Determines?5if?5this?5ST?5object?5was@ DB 'Determines '
	DB	'if this ST object was created from a suite.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DJCBKGIH@issuite?$AA@
CONST	SEGMENT
??_C@_07DJCBKGIH@issuite?$AA@ DB 'issuite', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@JDPEKGGP@Determines?5if?5this?5ST?5object?5was@
CONST	SEGMENT
??_C@_0DN@JDPEKGGP@Determines?5if?5this?5ST?5object?5was@ DB 'Determines '
	DB	'if this ST object was created from an expression.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EHKKFFLC@isexpr?$AA@
CONST	SEGMENT
??_C@_06EHKKFFLC@isexpr?$AA@ DB 'isexpr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DBGONLLJ@Compile?5this?5ST?5object?5into?5a?5co@
CONST	SEGMENT
??_C@_0CL@DBGONLLJ@Compile?5this?5ST?5object?5into?5a?5co@ DB 'Compile th'
	DB	'is ST object into a code object.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OLJGFCKG@compile?$AA@
CONST	SEGMENT
??_C@_07OLJGFCKG@compile?$AA@ DB 'compile', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
parser_copyright_string DB 'Copyright 1995-1996 by Virginia Polytechnic I'
	DB	'nstitute & State', 0aH, 'University, Blacksburg, Virginia, US'
	DB	'A, and Fred L. Drake, Jr., Reston,', 0aH, 'Virginia, USA.  Po'
	DB	'rtions copyright 1991-1995 by Stichting Mathematisch', 0aH, 'C'
	DB	'entrum, Amsterdam, The Netherlands.', 00H
	ORG $+7
parser_doc_string DB 'This is an interface to Python''s internal parser.', 00H
	ORG $+2
parser_version_string DB '0.5', 00H
parser_methods DQ FLAT:??_C@_07OLJGFCKG@compile?$AA@
	DQ	FLAT:parser_compilest
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CL@DBGONLLJ@Compile?5this?5ST?5object?5into?5a?5co@
	DQ	FLAT:??_C@_06EHKKFFLC@isexpr?$AA@
	DQ	FLAT:parser_isexpr
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DN@JDPEKGGP@Determines?5if?5this?5ST?5object?5was@
	DQ	FLAT:??_C@_07DJCBKGIH@issuite?$AA@
	DQ	FLAT:parser_issuite
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DH@JMKDJABI@Determines?5if?5this?5ST?5object?5was@
	DQ	FLAT:??_C@_06IEBOCBAI@tolist?$AA@
	DQ	FLAT:parser_st2list
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CP@CPJNHDKH@Creates?5a?5list?9tree?5representati@
	DQ	FLAT:??_C@_07FMMAKOKC@totuple?$AA@
	DQ	FLAT:parser_st2tuple
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DA@KGMEGDFO@Creates?5a?5tuple?9tree?5representat@
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:parser_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0CC@KFEBPDOJ@Returns?5size?5in?5memory?0?5in?5bytes@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
PyST_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09BEPDEEBN@parser?4st?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:parser_free
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:??_C@_0DE@MHDFBGFO@Intermediate?5representation?5of?5a@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:parser_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:parser_methods
	ORG $+152
?keywords@?1??parser_st2tuple@@9@9 DQ FLAT:??_C@_02BNFKEMBG@st?$AA@ ; `parser_st2tuple'::`2'::keywords
	DQ	FLAT:??_C@_09CHLNHKJH@line_info?$AA@
	DQ	FLAT:??_C@_08CFPJCNGC@col_info?$AA@
	DQ	0000000000000000H
?keywords@?1??parser_st2list@@9@9 DQ FLAT:??_C@_02BNFKEMBG@st?$AA@ ; `parser_st2list'::`2'::keywords
	DQ	FLAT:??_C@_09CHLNHKJH@line_info?$AA@
	DQ	FLAT:??_C@_08CFPJCNGC@col_info?$AA@
	DQ	0000000000000000H
?keywords@?1??parser_compilest@@9@9 DQ FLAT:??_C@_02BNFKEMBG@st?$AA@ ; `parser_compilest'::`2'::keywords
	DQ	FLAT:??_C@_08BABJIOEM@filename?$AA@
	DQ	0000000000000000H
?keywords@?1??parser_isexpr@@9@9 DQ FLAT:??_C@_02BNFKEMBG@st?$AA@ ; `parser_isexpr'::`2'::keywords
	DQ	0000000000000000H
?keywords@?1??parser_issuite@@9@9 DQ FLAT:??_C@_02BNFKEMBG@st?$AA@ ; `parser_issuite'::`2'::keywords
	DQ	0000000000000000H
?keywords@?1??parser_do_parse@@9@9 DQ FLAT:??_C@_06OEKOLKIL@source?$AA@ ; `parser_do_parse'::`2'::keywords
	DQ	0000000000000000H
?keywords@?1??parser_tuple2st@@9@9 DQ FLAT:??_C@_08IBBDGPOF@sequence?$AA@ ; `parser_tuple2st'::`2'::keywords
	DQ	0000000000000000H
	ORG $+8
parser_functions DQ FLAT:??_C@_09GANMKKNK@compilest?$AA@
	DQ	FLAT:parser_compilest
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CK@BFIACKMB@Compiles?5an?5ST?5object?5into?5a?5cod@
	DQ	FLAT:??_C@_04IPHMALII@expr?$AA@
	DQ	FLAT:parser_expr
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CJ@LPHIHCBO@Creates?5an?5ST?5object?5from?5an?5exp@
	DQ	FLAT:??_C@_06EHKKFFLC@isexpr?$AA@
	DQ	FLAT:parser_isexpr
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DL@CMEKOJEA@Determines?5if?5an?5ST?5object?5was?5c@
	DQ	FLAT:??_C@_07DJCBKGIH@issuite?$AA@
	DQ	FLAT:parser_issuite
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DF@LCMHLDAF@Determines?5if?5an?5ST?5object?5was?5c@
	DQ	FLAT:??_C@_05PPOFKJGL@suite?$AA@
	DQ	FLAT:parser_suite
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CD@KPIPHOID@Creates?5an?5ST?5object?5from?5a?5suit@
	DQ	FLAT:??_C@_0M@IODEHOKN@sequence2st?$AA@
	DQ	FLAT:parser_tuple2st
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DB@LOLPPNBK@Creates?5an?5ST?5object?5from?5a?5tree@
	DQ	FLAT:??_C@_08FEMHBCAC@st2tuple?$AA@
	DQ	FLAT:parser_st2tuple
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CO@IAPBJAMO@Creates?5a?5tuple?9tree?5representat@
	DQ	FLAT:??_C@_07OOJPKMEF@st2list?$AA@
	DQ	FLAT:parser_st2list
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0CN@NOCBOFNF@Creates?5a?5list?9tree?5representati@
	DQ	FLAT:??_C@_08NFEDFLJK@tuple2st?$AA@
	DQ	FLAT:parser_tuple2st
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DB@LOLPPNBK@Creates?5an?5ST?5object?5from?5a?5tree@
	DQ	FLAT:??_C@_08EEAEJMPM@_pickler?$AA@
	DQ	FLAT:parser__pickler
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DM@NBLABHOM@Returns?5the?5pickle?5magic?5to?5allo@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
parsermodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06OENOICDH@parser?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:parser_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0BK@ENIMKLG@?4?4?2Modules?2parsermodule?4c?$AA@ ; `string'
EXTRN	PyErr_BadArgument:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\parsermodule.c
pdata	SEGMENT
$pdata$parser_richcompare DD imagerel parser_richcompare
	DD	imagerel parser_richcompare+540
	DD	imagerel $unwind$parser_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_richcompare DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0BK@ENIMKLG@?4?4?2Modules?2parsermodule?4c?$AA@
CONST	SEGMENT
??_C@_0BK@ENIMKLG@?4?4?2Modules?2parsermodule?4c?$AA@ DB '..\Modules\pars'
	DB	'ermodule.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parser_richcompare
_TEXT	SEGMENT
v$ = 32
result$ = 40
tv78 = 44
tv80 = 48
tv82 = 56
tv84 = 64
tv86 = 72
tv88 = 80
tv90 = 88
left$ = 112
right$ = 120
op$ = 128
parser_richcompare PROC					; COMDAT

; 278  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 279  :     int result;
; 280  :     PyObject *v;
; 281  : 
; 282  :     /* neither argument should be NULL, unless something's gone wrong */
; 283  :     if (left == NULL || right == NULL) {

  00013	48 83 7c 24 70
	00		 cmp	 QWORD PTR left$[rsp], 0
  00019	74 08		 je	 SHORT $LN14@parser_ric
  0001b	48 83 7c 24 78
	00		 cmp	 QWORD PTR right$[rsp], 0
  00021	75 18		 jne	 SHORT $LN15@parser_ric
$LN14@parser_ric:

; 284  :         PyErr_BadInternalCall();

  00023	ba 1c 01 00 00	 mov	 edx, 284		; 0000011cH
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@ENIMKLG@?4?4?2Modules?2parsermodule?4c?$AA@
  0002f	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 285  :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	e9 c3 01 00 00	 jmp	 $LN16@parser_ric
$LN15@parser_ric:

; 286  :     }
; 287  : 
; 288  :     /* both arguments should be instances of PyST_Object */
; 289  :     if (!PyST_Object_Check(left) || !PyST_Object_Check(right)) {

  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  00042	48 8b 4c 24 70	 mov	 rcx, QWORD PTR left$[rsp]
  00047	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0004b	75 12		 jne	 SHORT $LN12@parser_ric
  0004d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  00054	48 8b 4c 24 78	 mov	 rcx, QWORD PTR right$[rsp]
  00059	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0005d	74 11		 je	 SHORT $LN13@parser_ric
$LN12@parser_ric:

; 290  :         v = Py_NotImplemented;

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00066	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 291  :         goto finished;

  0006b	e9 7f 01 00 00	 jmp	 $finished$22023
$LN13@parser_ric:

; 292  :     }
; 293  : 
; 294  :     if (left == right)

  00070	48 8b 44 24 78	 mov	 rax, QWORD PTR right$[rsp]
  00075	48 39 44 24 70	 cmp	 QWORD PTR left$[rsp], rax
  0007a	75 0a		 jne	 SHORT $LN11@parser_ric

; 295  :         /* if arguments are identical, they're equal */
; 296  :         result = 0;

  0007c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 297  :     else

  00084	eb 1b		 jmp	 SHORT $LN10@parser_ric
$LN11@parser_ric:

; 298  :         result = parser_compare_nodes(((PyST_Object *)left)->st_node,
; 299  :                                       ((PyST_Object *)right)->st_node);

  00086	48 8b 44 24 78	 mov	 rax, QWORD PTR right$[rsp]
  0008b	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0008f	48 8b 44 24 70	 mov	 rax, QWORD PTR left$[rsp]
  00094	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00098	e8 00 00 00 00	 call	 parser_compare_nodes
  0009d	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax
$LN10@parser_ric:

; 300  : 
; 301  :     /* Convert return value to a Boolean */
; 302  :     switch (op) {

  000a1	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR op$[rsp]
  000a8	89 44 24 2c	 mov	 DWORD PTR tv78[rsp], eax
  000ac	83 7c 24 2c 05	 cmp	 DWORD PTR tv78[rsp], 5
  000b1	0f 87 2f 01 00
	00		 ja	 $LN1@parser_ric
  000b7	48 63 44 24 2c	 movsxd	 rax, DWORD PTR tv78[rsp]
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000c3	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN30@parser_ric[rcx+rax*4]
  000ca	48 03 c1	 add	 rax, rcx
  000cd	ff e0		 jmp	 rax
$LN7@parser_ric:

; 303  :       case Py_EQ:
; 304  :         v = TEST_COND(result == 0);

  000cf	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  000d4	75 0e		 jne	 SHORT $LN18@parser_ric
  000d6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000dd	48 89 44 24 30	 mov	 QWORD PTR tv80[rsp], rax
  000e2	eb 0c		 jmp	 SHORT $LN19@parser_ric
$LN18@parser_ric:
  000e4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  000eb	48 89 44 24 30	 mov	 QWORD PTR tv80[rsp], rax
$LN19@parser_ric:
  000f0	48 8b 44 24 30	 mov	 rax, QWORD PTR tv80[rsp]
  000f5	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 305  :         break;

  000fa	e9 f0 00 00 00	 jmp	 $LN8@parser_ric
$LN6@parser_ric:

; 306  :       case Py_NE:
; 307  :         v = TEST_COND(result != 0);

  000ff	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  00104	74 0e		 je	 SHORT $LN20@parser_ric
  00106	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0010d	48 89 44 24 38	 mov	 QWORD PTR tv82[rsp], rax
  00112	eb 0c		 jmp	 SHORT $LN21@parser_ric
$LN20@parser_ric:
  00114	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0011b	48 89 44 24 38	 mov	 QWORD PTR tv82[rsp], rax
$LN21@parser_ric:
  00120	48 8b 44 24 38	 mov	 rax, QWORD PTR tv82[rsp]
  00125	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 308  :         break;

  0012a	e9 c0 00 00 00	 jmp	 $LN8@parser_ric
$LN5@parser_ric:

; 309  :       case Py_LE:
; 310  :         v = TEST_COND(result <= 0);

  0012f	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  00134	7f 0e		 jg	 SHORT $LN22@parser_ric
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0013d	48 89 44 24 40	 mov	 QWORD PTR tv84[rsp], rax
  00142	eb 0c		 jmp	 SHORT $LN23@parser_ric
$LN22@parser_ric:
  00144	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0014b	48 89 44 24 40	 mov	 QWORD PTR tv84[rsp], rax
$LN23@parser_ric:
  00150	48 8b 44 24 40	 mov	 rax, QWORD PTR tv84[rsp]
  00155	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 311  :         break;

  0015a	e9 90 00 00 00	 jmp	 $LN8@parser_ric
$LN4@parser_ric:

; 312  :       case Py_GE:
; 313  :         v = TEST_COND(result >= 0);

  0015f	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  00164	7c 0e		 jl	 SHORT $LN24@parser_ric
  00166	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0016d	48 89 44 24 48	 mov	 QWORD PTR tv86[rsp], rax
  00172	eb 0c		 jmp	 SHORT $LN25@parser_ric
$LN24@parser_ric:
  00174	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0017b	48 89 44 24 48	 mov	 QWORD PTR tv86[rsp], rax
$LN25@parser_ric:
  00180	48 8b 44 24 48	 mov	 rax, QWORD PTR tv86[rsp]
  00185	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 314  :         break;

  0018a	eb 63		 jmp	 SHORT $LN8@parser_ric
$LN3@parser_ric:

; 315  :       case Py_LT:
; 316  :         v = TEST_COND(result < 0);

  0018c	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  00191	7d 0e		 jge	 SHORT $LN26@parser_ric
  00193	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0019a	48 89 44 24 50	 mov	 QWORD PTR tv88[rsp], rax
  0019f	eb 0c		 jmp	 SHORT $LN27@parser_ric
$LN26@parser_ric:
  001a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001a8	48 89 44 24 50	 mov	 QWORD PTR tv88[rsp], rax
$LN27@parser_ric:
  001ad	48 8b 44 24 50	 mov	 rax, QWORD PTR tv88[rsp]
  001b2	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 317  :         break;

  001b7	eb 36		 jmp	 SHORT $LN8@parser_ric
$LN2@parser_ric:

; 318  :       case Py_GT:
; 319  :         v = TEST_COND(result > 0);

  001b9	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  001be	7e 0e		 jle	 SHORT $LN28@parser_ric
  001c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001c7	48 89 44 24 58	 mov	 QWORD PTR tv90[rsp], rax
  001cc	eb 0c		 jmp	 SHORT $LN29@parser_ric
$LN28@parser_ric:
  001ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001d5	48 89 44 24 58	 mov	 QWORD PTR tv90[rsp], rax
$LN29@parser_ric:
  001da	48 8b 44 24 58	 mov	 rax, QWORD PTR tv90[rsp]
  001df	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 320  :         break;

  001e4	eb 09		 jmp	 SHORT $LN8@parser_ric
$LN1@parser_ric:

; 321  :       default:
; 322  :         PyErr_BadArgument();

  001e6	e8 00 00 00 00	 call	 PyErr_BadArgument

; 323  :         return NULL;

  001eb	33 c0		 xor	 eax, eax
  001ed	eb 0f		 jmp	 SHORT $LN16@parser_ric
$LN8@parser_ric:
$finished$22023:

; 324  :     }
; 325  :   finished:
; 326  :     Py_INCREF(v);

  001ef	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  001f4	e8 00 00 00 00	 call	 _Py_IncRef

; 327  :     return v;

  001f9	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN16@parser_ric:

; 328  : }

  001fe	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00202	c3		 ret	 0
  00203	90		 npad	 1
$LN30@parser_ric:
  00204	00 00 00 00	 DD	 $LN3@parser_ric
  00208	00 00 00 00	 DD	 $LN5@parser_ric
  0020c	00 00 00 00	 DD	 $LN7@parser_ric
  00210	00 00 00 00	 DD	 $LN6@parser_ric
  00214	00 00 00 00	 DD	 $LN2@parser_ric
  00218	00 00 00 00	 DD	 $LN4@parser_ric
parser_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	strcmp:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\parsermodule.c
pdata	SEGMENT
$pdata$parser_compare_nodes DD imagerel parser_compare_nodes
	DD	imagerel parser_compare_nodes+271
	DD	imagerel $unwind$parser_compare_nodes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_compare_nodes DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parser_compare_nodes
_TEXT	SEGMENT
j$ = 32
v$22003 = 36
left$ = 64
right$ = 72
parser_compare_nodes PROC				; COMDAT

; 239  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 240  :     int j;
; 241  : 
; 242  :     if (TYPE(left) < TYPE(right))

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR left$[rsp]
  00013	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00016	48 8b 4c 24 48	 mov	 rcx, QWORD PTR right$[rsp]
  0001b	0f bf 09	 movsx	 ecx, WORD PTR [rcx]
  0001e	3b c1		 cmp	 eax, ecx
  00020	7d 0a		 jge	 SHORT $LN9@parser_com

; 243  :         return (-1);

  00022	b8 ff ff ff ff	 mov	 eax, -1
  00027	e9 de 00 00 00	 jmp	 $LN10@parser_com
$LN9@parser_com:

; 244  : 
; 245  :     if (TYPE(right) < TYPE(left))

  0002c	48 8b 44 24 48	 mov	 rax, QWORD PTR right$[rsp]
  00031	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR left$[rsp]
  00039	0f bf 09	 movsx	 ecx, WORD PTR [rcx]
  0003c	3b c1		 cmp	 eax, ecx
  0003e	7d 0a		 jge	 SHORT $LN8@parser_com

; 246  :         return (1);

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	e9 c0 00 00 00	 jmp	 $LN10@parser_com
$LN8@parser_com:

; 247  : 
; 248  :     if (ISTERMINAL(TYPE(left)))

  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR left$[rsp]
  0004f	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00052	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00057	7d 1c		 jge	 SHORT $LN7@parser_com

; 249  :         return (strcmp(STR(left), STR(right)));

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR right$[rsp]
  0005e	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR left$[rsp]
  00067	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0006b	e8 00 00 00 00	 call	 strcmp
  00070	e9 95 00 00 00	 jmp	 $LN10@parser_com
$LN7@parser_com:

; 250  : 
; 251  :     if (NCH(left) < NCH(right))

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR left$[rsp]
  0007a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR right$[rsp]
  0007f	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00082	39 48 18	 cmp	 DWORD PTR [rax+24], ecx
  00085	7d 07		 jge	 SHORT $LN6@parser_com

; 252  :         return (-1);

  00087	b8 ff ff ff ff	 mov	 eax, -1
  0008c	eb 7c		 jmp	 SHORT $LN10@parser_com
$LN6@parser_com:

; 253  : 
; 254  :     if (NCH(right) < NCH(left))

  0008e	48 8b 44 24 48	 mov	 rax, QWORD PTR right$[rsp]
  00093	48 8b 4c 24 40	 mov	 rcx, QWORD PTR left$[rsp]
  00098	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  0009b	39 48 18	 cmp	 DWORD PTR [rax+24], ecx
  0009e	7d 07		 jge	 SHORT $LN5@parser_com

; 255  :         return (1);

  000a0	b8 01 00 00 00	 mov	 eax, 1
  000a5	eb 63		 jmp	 SHORT $LN10@parser_com
$LN5@parser_com:

; 256  : 
; 257  :     for (j = 0; j < NCH(left); ++j) {

  000a7	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  000af	eb 0a		 jmp	 SHORT $LN4@parser_com
$LN3@parser_com:
  000b1	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  000b5	ff c0		 inc	 eax
  000b7	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN4@parser_com:
  000bb	48 8b 44 24 40	 mov	 rax, QWORD PTR left$[rsp]
  000c0	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000c3	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  000c7	7d 3f		 jge	 SHORT $LN2@parser_com

; 258  :         int v = parser_compare_nodes(CHILD(left, j), CHILD(right, j));

  000c9	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  000ce	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000d2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR right$[rsp]
  000d7	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000db	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  000e0	48 6b c9 28	 imul	 rcx, 40			; 00000028H
  000e4	48 8b 54 24 40	 mov	 rdx, QWORD PTR left$[rsp]
  000e9	48 03 4a 20	 add	 rcx, QWORD PTR [rdx+32]
  000ed	48 8b d0	 mov	 rdx, rax
  000f0	e8 00 00 00 00	 call	 parser_compare_nodes
  000f5	89 44 24 24	 mov	 DWORD PTR v$22003[rsp], eax

; 259  : 
; 260  :         if (v != 0)

  000f9	83 7c 24 24 00	 cmp	 DWORD PTR v$22003[rsp], 0
  000fe	74 06		 je	 SHORT $LN1@parser_com

; 261  :             return (v);

  00100	8b 44 24 24	 mov	 eax, DWORD PTR v$22003[rsp]
  00104	eb 04		 jmp	 SHORT $LN10@parser_com
$LN1@parser_com:

; 262  :     }

  00106	eb a9		 jmp	 SHORT $LN3@parser_com
$LN2@parser_com:

; 263  :     return (0);

  00108	33 c0		 xor	 eax, eax
$LN10@parser_com:

; 264  : }

  0010a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010e	c3		 ret	 0
parser_compare_nodes ENDP
_TEXT	ENDS
EXTRN	_PyObject_DebugFree:PROC
EXTRN	PyNode_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_free DD imagerel parser_free
	DD	imagerel parser_free+38
	DD	imagerel $unwind$parser_free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_free DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parser_free
_TEXT	SEGMENT
st$ = 48
parser_free PROC					; COMDAT

; 361  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 362  :     PyNode_Free(st->st_node);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  0000e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00012	e8 00 00 00 00	 call	 PyNode_Free

; 363  :     PyObject_Del(st);

  00017	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  0001c	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 364  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
parser_free ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	_PyNode_SizeOf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_sizeof DD imagerel parser_sizeof
	DD	imagerel parser_sizeof+52
	DD	imagerel $unwind$parser_sizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_sizeof DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parser_sizeof
_TEXT	SEGMENT
res$ = 32
st$ = 64
unused$ = 72
parser_sizeof PROC					; COMDAT

; 368  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 369  :     Py_ssize_t res;
; 370  : 
; 371  :     res = sizeof(PyST_Object) + _PyNode_SizeOf(st->st_node);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00013	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00017	e8 00 00 00 00	 call	 _PyNode_SizeOf
  0001c	48 83 c0 70	 add	 rax, 112		; 00000070H
  00020	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 372  :     return PyLong_FromSsize_t(res);

  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0002a	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 373  : }

  0002f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00033	c3		 ret	 0
parser_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@NAADOGPG@?$HMpp?3totuple?$AA@		; `string'
PUBLIC	??_C@_0P@COPCCAIM@O?$CB?$HMpp?3st2tuple?$AA@	; `string'
EXTRN	PyTuple_New:PROC
EXTRN	PyTuple_SetItem:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_st2tuple DD imagerel parser_st2tuple
	DD	imagerel parser_st2tuple+301
	DD	imagerel $unwind$parser_st2tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_st2tuple DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0M@NAADOGPG@?$HMpp?3totuple?$AA@
CONST	SEGMENT
??_C@_0M@NAADOGPG@?$HMpp?3totuple?$AA@ DB '|pp:totuple', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@COPCCAIM@O?$CB?$HMpp?3st2tuple?$AA@
CONST	SEGMENT
??_C@_0P@COPCCAIM@O?$CB?$HMpp?3st2tuple?$AA@ DB 'O!|pp:st2tuple', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parser_st2tuple
_TEXT	SEGMENT
res$ = 64
ok$ = 72
col_info$ = 76
line_info$ = 80
self$ = 112
args$ = 120
kw$ = 128
parser_st2tuple PROC					; COMDAT

; 384  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 385  :     int line_info = 0;

  00013	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR line_info$[rsp], 0

; 386  :     int col_info = 0;

  0001b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR col_info$[rsp], 0

; 387  :     PyObject *res = 0;

  00023	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 388  :     int ok;
; 389  : 
; 390  :     static char *keywords[] = {"st", "line_info", "col_info", NULL};
; 391  : 
; 392  :     if (self == NULL || PyModule_Check(self)) {

  0002c	48 83 7c 24 70
	00		 cmp	 QWORD PTR self$[rsp], 0
  00032	74 2b		 je	 SHORT $LN4@parser_st2
  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  0003b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00040	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00044	74 19		 je	 SHORT $LN3@parser_st2
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  0004d	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00052	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00056	e8 00 00 00 00	 call	 PyType_IsSubtype
  0005b	85 c0		 test	 eax, eax
  0005d	74 50		 je	 SHORT $LN5@parser_st2
$LN3@parser_st2:
$LN4@parser_st2:

; 393  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "O!|pp:st2tuple", keywords,
; 394  :                                          &PyST_Type, &self, &line_info,
; 395  :                                          &col_info);

  0005f	48 8d 44 24 4c	 lea	 rax, QWORD PTR col_info$[rsp]
  00064	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00069	48 8d 44 24 50	 lea	 rax, QWORD PTR line_info$[rsp]
  0006e	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00073	48 8d 44 24 70	 lea	 rax, QWORD PTR self$[rsp]
  00078	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  00084	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00089	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_st2tuple@@9@9
  00090	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@COPCCAIM@O?$CB?$HMpp?3st2tuple?$AA@
  00097	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kw$[rsp]
  0009f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  000a4	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000a9	89 44 24 48	 mov	 DWORD PTR ok$[rsp], eax

; 396  :     }
; 397  :     else

  000ad	eb 3f		 jmp	 SHORT $LN2@parser_st2
$LN5@parser_st2:

; 398  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "|pp:totuple", &keywords[1],
; 399  :                                          &line_info, &col_info);

  000af	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?keywords@?1??parser_st2tuple@@9@9
  000b6	48 83 c0 08	 add	 rax, 8
  000ba	48 8d 4c 24 4c	 lea	 rcx, QWORD PTR col_info$[rsp]
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 8d 4c 24 50	 lea	 rcx, QWORD PTR line_info$[rsp]
  000c9	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000ce	4c 8b c8	 mov	 r9, rax
  000d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@NAADOGPG@?$HMpp?3totuple?$AA@
  000d8	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kw$[rsp]
  000e0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  000e5	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000ea	89 44 24 48	 mov	 DWORD PTR ok$[rsp], eax
$LN2@parser_st2:

; 400  :     if (ok != 0) {

  000ee	83 7c 24 48 00	 cmp	 DWORD PTR ok$[rsp], 0
  000f3	74 2e		 je	 SHORT $LN1@parser_st2

; 401  :         /*
; 402  :          *  Convert ST into a tuple representation.  Use Guido's function,
; 403  :          *  since it's known to work already.
; 404  :          */
; 405  :         res = node2tuple(((PyST_Object*)self)->st_node,
; 406  :                          PyTuple_New, PyTuple_SetItem, line_info, col_info);

  000f5	8b 44 24 4c	 mov	 eax, DWORD PTR col_info$[rsp]
  000f9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000fd	44 8b 4c 24 50	 mov	 r9d, DWORD PTR line_info$[rsp]
  00102	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyTuple_SetItem
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyTuple_New
  00110	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00115	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00119	e8 00 00 00 00	 call	 node2tuple
  0011e	48 89 44 24 40	 mov	 QWORD PTR res$[rsp], rax
$LN1@parser_st2:

; 407  :     }
; 408  :     return (res);

  00123	48 8b 44 24 40	 mov	 rax, QWORD PTR res$[rsp]

; 409  : }

  00128	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0012c	c3		 ret	 0
parser_st2tuple ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@PMHIOALD@unrecognized?5parse?5tree?5node?5typ@ ; `string'
PUBLIC	_Py_DecRef
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$node2tuple DD imagerel node2tuple
	DD	imagerel node2tuple+696
	DD	imagerel $unwind$node2tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$node2tuple DD 011801H
	DD	0c218H
xdata	ENDS
;	COMDAT ??_C@_0CC@PMHIOALD@unrecognized?5parse?5tree?5node?5typ@
CONST	SEGMENT
??_C@_0CC@PMHIOALD@unrecognized?5parse?5tree?5node?5typ@ DB 'unrecognized'
	DB	' parse tree node type', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT node2tuple
_TEXT	SEGMENT
w$21868 = 48
v$21867 = 56
i$21866 = 64
result$21890 = 72
tv73 = 80
n$ = 112
mkseq$ = 120
addelem$ = 128
lineno$ = 136
col_offset$ = 144
node2tuple PROC						; COMDAT

; 85   : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 86   :     if (n == NULL) {

  00018	48 83 7c 24 70
	00		 cmp	 QWORD PTR n$[rsp], 0
  0001e	75 18		 jne	 SHORT $LN15@node2tuple

; 87   :         Py_INCREF(Py_None);

  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00027	e8 00 00 00 00	 call	 _Py_IncRef

; 88   :         return (Py_None);

  0002c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00033	e9 7b 02 00 00	 jmp	 $LN16@node2tuple
$LN15@node2tuple:

; 89   :     }
; 90   :     if (ISNONTERMINAL(TYPE(n))) {

  00038	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  0003d	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00040	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00045	0f 8c 73 01 00
	00		 jl	 $LN14@node2tuple

; 91   :         int i;
; 92   :         PyObject *v;
; 93   :         PyObject *w;
; 94   : 
; 95   :         v = mkseq(1 + NCH(n) + (TYPE(n) == encoding_decl));

  0004b	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  00050	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00053	3d 4f 01 00 00	 cmp	 eax, 335		; 0000014fH
  00058	75 0a		 jne	 SHORT $LN18@node2tuple
  0005a	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  00062	eb 08		 jmp	 SHORT $LN19@node2tuple
$LN18@node2tuple:
  00064	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN19@node2tuple:
  0006c	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  00071	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00074	8b 4c 24 50	 mov	 ecx, DWORD PTR tv73[rsp]
  00078	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0007c	48 98		 cdqe
  0007e	48 8b c8	 mov	 rcx, rax
  00081	ff 54 24 78	 call	 QWORD PTR mkseq$[rsp]
  00085	48 89 44 24 38	 mov	 QWORD PTR v$21867[rsp], rax

; 96   :         if (v == NULL)

  0008a	48 83 7c 24 38
	00		 cmp	 QWORD PTR v$21867[rsp], 0
  00090	75 0a		 jne	 SHORT $LN13@node2tuple

; 97   :             return (v);

  00092	48 8b 44 24 38	 mov	 rax, QWORD PTR v$21867[rsp]
  00097	e9 17 02 00 00	 jmp	 $LN16@node2tuple
$LN13@node2tuple:

; 98   :         w = PyLong_FromLong(TYPE(n));

  0009c	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  000a1	0f bf 00	 movsx	 eax, WORD PTR [rax]
  000a4	8b c8		 mov	 ecx, eax
  000a6	e8 00 00 00 00	 call	 PyLong_FromLong
  000ab	48 89 44 24 30	 mov	 QWORD PTR w$21868[rsp], rax

; 99   :         if (w == NULL) {

  000b0	48 83 7c 24 30
	00		 cmp	 QWORD PTR w$21868[rsp], 0
  000b6	75 11		 jne	 SHORT $LN12@node2tuple

; 100  :             Py_DECREF(v);

  000b8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$21867[rsp]
  000bd	e8 00 00 00 00	 call	 _Py_DecRef

; 101  :             return ((PyObject*) NULL);

  000c2	33 c0		 xor	 eax, eax
  000c4	e9 ea 01 00 00	 jmp	 $LN16@node2tuple
$LN12@node2tuple:

; 102  :         }
; 103  :         (void) addelem(v, 0, w);

  000c9	4c 8b 44 24 30	 mov	 r8, QWORD PTR w$21868[rsp]
  000ce	33 d2		 xor	 edx, edx
  000d0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$21867[rsp]
  000d5	ff 94 24 80 00
	00 00		 call	 QWORD PTR addelem$[rsp]

; 104  :         for (i = 0; i < NCH(n); i++) {

  000dc	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$21866[rsp], 0
  000e4	eb 0a		 jmp	 SHORT $LN11@node2tuple
$LN10@node2tuple:
  000e6	8b 44 24 40	 mov	 eax, DWORD PTR i$21866[rsp]
  000ea	ff c0		 inc	 eax
  000ec	89 44 24 40	 mov	 DWORD PTR i$21866[rsp], eax
$LN11@node2tuple:
  000f0	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  000f5	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000f8	39 44 24 40	 cmp	 DWORD PTR i$21866[rsp], eax
  000fc	7d 79		 jge	 SHORT $LN9@node2tuple

; 105  :             w = node2tuple(CHILD(n, i), mkseq, addelem, lineno, col_offset);

  000fe	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$21866[rsp]
  00103	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00107	48 8b 4c 24 70	 mov	 rcx, QWORD PTR n$[rsp]
  0010c	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00110	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR col_offset$[rsp]
  00117	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0011b	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR lineno$[rsp]
  00123	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR addelem$[rsp]
  0012b	48 8b 54 24 78	 mov	 rdx, QWORD PTR mkseq$[rsp]
  00130	48 8b c8	 mov	 rcx, rax
  00133	e8 00 00 00 00	 call	 node2tuple
  00138	48 89 44 24 30	 mov	 QWORD PTR w$21868[rsp], rax

; 106  :             if (w == NULL) {

  0013d	48 83 7c 24 30
	00		 cmp	 QWORD PTR w$21868[rsp], 0
  00143	75 11		 jne	 SHORT $LN8@node2tuple

; 107  :                 Py_DECREF(v);

  00145	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$21867[rsp]
  0014a	e8 00 00 00 00	 call	 _Py_DecRef

; 108  :                 return ((PyObject*) NULL);

  0014f	33 c0		 xor	 eax, eax
  00151	e9 5d 01 00 00	 jmp	 $LN16@node2tuple
$LN8@node2tuple:

; 109  :             }
; 110  :             (void) addelem(v, i+1, w);

  00156	8b 44 24 40	 mov	 eax, DWORD PTR i$21866[rsp]
  0015a	ff c0		 inc	 eax
  0015c	48 98		 cdqe
  0015e	4c 8b 44 24 30	 mov	 r8, QWORD PTR w$21868[rsp]
  00163	48 8b d0	 mov	 rdx, rax
  00166	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$21867[rsp]
  0016b	ff 94 24 80 00
	00 00		 call	 QWORD PTR addelem$[rsp]

; 111  :         }

  00172	e9 6f ff ff ff	 jmp	 $LN10@node2tuple
$LN9@node2tuple:

; 112  : 
; 113  :         if (TYPE(n) == encoding_decl)

  00177	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  0017c	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0017f	3d 4f 01 00 00	 cmp	 eax, 335		; 0000014fH
  00184	75 29		 jne	 SHORT $LN7@node2tuple

; 114  :             (void) addelem(v, i+1, PyUnicode_FromString(STR(n)));

  00186	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  0018b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0018f	e8 00 00 00 00	 call	 PyUnicode_FromString
  00194	8b 4c 24 40	 mov	 ecx, DWORD PTR i$21866[rsp]
  00198	ff c1		 inc	 ecx
  0019a	48 63 c9	 movsxd	 rcx, ecx
  0019d	4c 8b c0	 mov	 r8, rax
  001a0	48 8b d1	 mov	 rdx, rcx
  001a3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$21867[rsp]
  001a8	ff 94 24 80 00
	00 00		 call	 QWORD PTR addelem$[rsp]
$LN7@node2tuple:

; 115  :         return (v);

  001af	48 8b 44 24 38	 mov	 rax, QWORD PTR v$21867[rsp]
  001b4	e9 fa 00 00 00	 jmp	 $LN16@node2tuple
  001b9	e9 f5 00 00 00	 jmp	 $LN6@node2tuple
$LN14@node2tuple:

; 116  :     }
; 117  :     else if (ISTERMINAL(TYPE(n))) {

  001be	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  001c3	0f bf 00	 movsx	 eax, WORD PTR [rax]
  001c6	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  001cb	0f 8d cd 00 00
	00		 jge	 $LN5@node2tuple

; 118  :         PyObject *result = mkseq(2 + lineno + col_offset);

  001d1	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR lineno$[rsp]
  001d8	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR col_offset$[rsp]
  001df	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  001e3	48 98		 cdqe
  001e5	48 8b c8	 mov	 rcx, rax
  001e8	ff 54 24 78	 call	 QWORD PTR mkseq$[rsp]
  001ec	48 89 44 24 48	 mov	 QWORD PTR result$21890[rsp], rax

; 119  :         if (result != NULL) {

  001f1	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$21890[rsp], 0
  001f7	0f 84 98 00 00
	00		 je	 $LN4@node2tuple

; 120  :             (void) addelem(result, 0, PyLong_FromLong(TYPE(n)));

  001fd	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  00202	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00205	8b c8		 mov	 ecx, eax
  00207	e8 00 00 00 00	 call	 PyLong_FromLong
  0020c	4c 8b c0	 mov	 r8, rax
  0020f	33 d2		 xor	 edx, edx
  00211	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$21890[rsp]
  00216	ff 94 24 80 00
	00 00		 call	 QWORD PTR addelem$[rsp]

; 121  :             (void) addelem(result, 1, PyUnicode_FromString(STR(n)));

  0021d	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  00222	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00226	e8 00 00 00 00	 call	 PyUnicode_FromString
  0022b	4c 8b c0	 mov	 r8, rax
  0022e	ba 01 00 00 00	 mov	 edx, 1
  00233	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$21890[rsp]
  00238	ff 94 24 80 00
	00 00		 call	 QWORD PTR addelem$[rsp]

; 122  :             if (lineno == 1)

  0023f	83 bc 24 88 00
	00 00 01	 cmp	 DWORD PTR lineno$[rsp], 1
  00247	75 21		 jne	 SHORT $LN3@node2tuple

; 123  :                 (void) addelem(result, 2, PyLong_FromLong(n->n_lineno));

  00249	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  0024e	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  00251	e8 00 00 00 00	 call	 PyLong_FromLong
  00256	4c 8b c0	 mov	 r8, rax
  00259	ba 02 00 00 00	 mov	 edx, 2
  0025e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$21890[rsp]
  00263	ff 94 24 80 00
	00 00		 call	 QWORD PTR addelem$[rsp]
$LN3@node2tuple:

; 124  :             if (col_offset == 1)

  0026a	83 bc 24 90 00
	00 00 01	 cmp	 DWORD PTR col_offset$[rsp], 1
  00272	75 21		 jne	 SHORT $LN2@node2tuple

; 125  :                 (void) addelem(result, 3, PyLong_FromLong(n->n_col_offset));

  00274	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  00279	8b 48 14	 mov	 ecx, DWORD PTR [rax+20]
  0027c	e8 00 00 00 00	 call	 PyLong_FromLong
  00281	4c 8b c0	 mov	 r8, rax
  00284	ba 03 00 00 00	 mov	 edx, 3
  00289	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$21890[rsp]
  0028e	ff 94 24 80 00
	00 00		 call	 QWORD PTR addelem$[rsp]
$LN2@node2tuple:
$LN4@node2tuple:

; 126  :         }
; 127  :         return (result);

  00295	48 8b 44 24 48	 mov	 rax, QWORD PTR result$21890[rsp]
  0029a	eb 17		 jmp	 SHORT $LN16@node2tuple

; 128  :     }
; 129  :     else {

  0029c	eb 15		 jmp	 SHORT $LN1@node2tuple
$LN5@node2tuple:

; 130  :         PyErr_SetString(PyExc_SystemError,
; 131  :                         "unrecognized parse tree node type");

  0029e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@PMHIOALD@unrecognized?5parse?5tree?5node?5typ@
  002a5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  002ac	e8 00 00 00 00	 call	 PyErr_SetString

; 132  :         return ((PyObject*) NULL);

  002b1	33 c0		 xor	 eax, eax
$LN1@node2tuple:
$LN6@node2tuple:
$LN16@node2tuple:

; 133  :     }
; 134  : }

  002b3	48 83 c4 68	 add	 rsp, 104		; 00000068H
  002b7	c3		 ret	 0
node2tuple ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@JECKIGFG@?$HMpp?3tolist?$AA@		; `string'
PUBLIC	??_C@_0O@LBPHIKMO@O?$CB?$HMpp?3st2list?$AA@	; `string'
EXTRN	PyList_New:PROC
EXTRN	PyList_SetItem:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\parsermodule.c
pdata	SEGMENT
$pdata$parser_st2list DD imagerel parser_st2list
	DD	imagerel parser_st2list+301
	DD	imagerel $unwind$parser_st2list
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_st2list DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0L@JECKIGFG@?$HMpp?3tolist?$AA@
CONST	SEGMENT
??_C@_0L@JECKIGFG@?$HMpp?3tolist?$AA@ DB '|pp:tolist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LBPHIKMO@O?$CB?$HMpp?3st2list?$AA@
CONST	SEGMENT
??_C@_0O@LBPHIKMO@O?$CB?$HMpp?3st2list?$AA@ DB 'O!|pp:st2list', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parser_st2list
_TEXT	SEGMENT
res$ = 64
ok$ = 72
col_info$ = 76
line_info$ = 80
self$ = 112
args$ = 120
kw$ = 128
parser_st2list PROC					; COMDAT

; 420  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 421  :     int line_info = 0;

  00013	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR line_info$[rsp], 0

; 422  :     int col_info = 0;

  0001b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR col_info$[rsp], 0

; 423  :     PyObject *res = 0;

  00023	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 424  :     int ok;
; 425  : 
; 426  :     static char *keywords[] = {"st", "line_info", "col_info", NULL};
; 427  : 
; 428  :     if (self == NULL || PyModule_Check(self))

  0002c	48 83 7c 24 70
	00		 cmp	 QWORD PTR self$[rsp], 0
  00032	74 2b		 je	 SHORT $LN4@parser_st2@2
  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  0003b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00040	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00044	74 19		 je	 SHORT $LN3@parser_st2@2
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  0004d	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00052	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00056	e8 00 00 00 00	 call	 PyType_IsSubtype
  0005b	85 c0		 test	 eax, eax
  0005d	74 50		 je	 SHORT $LN5@parser_st2@2
$LN3@parser_st2@2:
$LN4@parser_st2@2:

; 429  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "O!|pp:st2list", keywords,
; 430  :                                          &PyST_Type, &self, &line_info,
; 431  :                                          &col_info);

  0005f	48 8d 44 24 4c	 lea	 rax, QWORD PTR col_info$[rsp]
  00064	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00069	48 8d 44 24 50	 lea	 rax, QWORD PTR line_info$[rsp]
  0006e	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00073	48 8d 44 24 70	 lea	 rax, QWORD PTR self$[rsp]
  00078	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  00084	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00089	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_st2list@@9@9
  00090	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@LBPHIKMO@O?$CB?$HMpp?3st2list?$AA@
  00097	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kw$[rsp]
  0009f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  000a4	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000a9	89 44 24 48	 mov	 DWORD PTR ok$[rsp], eax

; 432  :     else

  000ad	eb 3f		 jmp	 SHORT $LN2@parser_st2@2
$LN5@parser_st2@2:

; 433  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "|pp:tolist", &keywords[1],
; 434  :                                          &line_info, &col_info);

  000af	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?keywords@?1??parser_st2list@@9@9
  000b6	48 83 c0 08	 add	 rax, 8
  000ba	48 8d 4c 24 4c	 lea	 rcx, QWORD PTR col_info$[rsp]
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 8d 4c 24 50	 lea	 rcx, QWORD PTR line_info$[rsp]
  000c9	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000ce	4c 8b c8	 mov	 r9, rax
  000d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@JECKIGFG@?$HMpp?3tolist?$AA@
  000d8	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kw$[rsp]
  000e0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  000e5	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000ea	89 44 24 48	 mov	 DWORD PTR ok$[rsp], eax
$LN2@parser_st2@2:

; 435  :     if (ok) {

  000ee	83 7c 24 48 00	 cmp	 DWORD PTR ok$[rsp], 0
  000f3	74 2e		 je	 SHORT $LN1@parser_st2@2

; 436  :         /*
; 437  :          *  Convert ST into a tuple representation.  Use Guido's function,
; 438  :          *  since it's known to work already.
; 439  :          */
; 440  :         res = node2tuple(self->st_node,
; 441  :                          PyList_New, PyList_SetItem, line_info, col_info);

  000f5	8b 44 24 4c	 mov	 eax, DWORD PTR col_info$[rsp]
  000f9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000fd	44 8b 4c 24 50	 mov	 r9d, DWORD PTR line_info$[rsp]
  00102	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyList_SetItem
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyList_New
  00110	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00115	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00119	e8 00 00 00 00	 call	 node2tuple
  0011e	48 89 44 24 40	 mov	 QWORD PTR res$[rsp], rax
$LN1@parser_st2@2:

; 442  :     }
; 443  :     return (res);

  00123	48 8b 44 24 40	 mov	 rax, QWORD PTR res$[rsp]

; 444  : }

  00128	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0012c	c3		 ret	 0
parser_st2list ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LHGKIIMA@?$HMs?3compile?$AA@		; `string'
PUBLIC	??_C@_0P@CDMCGFOG@O?$CB?$HMs?3compilest?$AA@	; `string'
PUBLIC	??_C@_0O@GGPNMODD@?$DMsyntax?9tree?$DO?$AA@	; `string'
EXTRN	PyArena_Free:PROC
EXTRN	PyAST_CompileEx:PROC
EXTRN	PyAST_FromNode:PROC
EXTRN	PyArena_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_compilest DD imagerel parser_compilest
	DD	imagerel parser_compilest+387
	DD	imagerel $unwind$parser_compilest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_compilest DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0L@LHGKIIMA@?$HMs?3compile?$AA@
CONST	SEGMENT
??_C@_0L@LHGKIIMA@?$HMs?3compile?$AA@ DB '|s:compile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CDMCGFOG@O?$CB?$HMs?3compilest?$AA@
CONST	SEGMENT
??_C@_0P@CDMCGFOG@O?$CB?$HMs?3compilest?$AA@ DB 'O!|s:compilest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GGPNMODD@?$DMsyntax?9tree?$DO?$AA@
CONST	SEGMENT
??_C@_0O@GGPNMODD@?$DMsyntax?9tree?$DO?$AA@ DB '<syntax-tree>', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parser_compilest
_TEXT	SEGMENT
res$ = 64
ok$ = 72
arena$ = 80
str$ = 88
mod$ = 96
self$ = 128
args$ = 136
kw$ = 144
parser_compilest PROC					; COMDAT

; 455  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 456  :     PyObject*     res = 0;

  00013	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 457  :     PyArena*      arena;
; 458  :     mod_ty        mod;
; 459  :     char*         str = "<syntax-tree>";

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@GGPNMODD@?$DMsyntax?9tree?$DO?$AA@
  00023	48 89 44 24 58	 mov	 QWORD PTR str$[rsp], rax

; 460  :     int ok;
; 461  : 
; 462  :     static char *keywords[] = {"st", "filename", NULL};
; 463  : 
; 464  :     if (self == NULL || PyModule_Check(self))

  00028	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR self$[rsp], 0
  00031	74 31		 je	 SHORT $LN6@parser_com@2
  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  0003a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00042	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00046	74 1c		 je	 SHORT $LN5@parser_com@2
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  0004f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00057	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0005b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00060	85 c0		 test	 eax, eax
  00062	74 4c		 je	 SHORT $LN7@parser_com@2
$LN5@parser_com@2:
$LN6@parser_com@2:

; 465  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "O!|s:compilest", keywords,
; 466  :                                          &PyST_Type, &self, &str);

  00064	48 8d 44 24 58	 lea	 rax, QWORD PTR str$[rsp]
  00069	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0006e	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR self$[rsp]
  00076	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0007b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  00082	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00087	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_compilest@@9@9
  0008e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@CDMCGFOG@O?$CB?$HMs?3compilest?$AA@
  00095	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR kw$[rsp]
  0009d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000a5	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000aa	89 44 24 48	 mov	 DWORD PTR ok$[rsp], eax

; 467  :     else

  000ae	eb 38		 jmp	 SHORT $LN4@parser_com@2
$LN7@parser_com@2:

; 468  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "|s:compile", &keywords[1],
; 469  :                                          &str);

  000b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?keywords@?1??parser_compilest@@9@9
  000b7	48 83 c0 08	 add	 rax, 8
  000bb	48 8d 4c 24 58	 lea	 rcx, QWORD PTR str$[rsp]
  000c0	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000c5	4c 8b c8	 mov	 r9, rax
  000c8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@LHGKIIMA@?$HMs?3compile?$AA@
  000cf	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR kw$[rsp]
  000d7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000df	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000e4	89 44 24 48	 mov	 DWORD PTR ok$[rsp], eax
$LN4@parser_com@2:

; 470  : 
; 471  :     if (ok) {

  000e8	83 7c 24 48 00	 cmp	 DWORD PTR ok$[rsp], 0
  000ed	0f 84 86 00 00
	00		 je	 $LN3@parser_com@2

; 472  :         arena = PyArena_New();

  000f3	e8 00 00 00 00	 call	 PyArena_New
  000f8	48 89 44 24 50	 mov	 QWORD PTR arena$[rsp], rax

; 473  :         if (arena) {

  000fd	48 83 7c 24 50
	00		 cmp	 QWORD PTR arena$[rsp], 0
  00103	74 74		 je	 SHORT $LN2@parser_com@2

; 474  :            mod = PyAST_FromNode(self->st_node, &(self->st_flags), str, arena);

  00105	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0010d	48 83 c0 6c	 add	 rax, 108		; 0000006cH
  00111	4c 8b 4c 24 50	 mov	 r9, QWORD PTR arena$[rsp]
  00116	4c 8b 44 24 58	 mov	 r8, QWORD PTR str$[rsp]
  0011b	48 8b d0	 mov	 rdx, rax
  0011e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00126	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0012a	e8 00 00 00 00	 call	 PyAST_FromNode
  0012f	48 89 44 24 60	 mov	 QWORD PTR mod$[rsp], rax

; 475  :            if (mod) {

  00134	48 83 7c 24 60
	00		 cmp	 QWORD PTR mod$[rsp], 0
  0013a	74 33		 je	 SHORT $LN1@parser_com@2

; 476  :                res = (PyObject *)PyAST_Compile(mod, str, &(self->st_flags), arena);

  0013c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00144	48 83 c0 6c	 add	 rax, 108		; 0000006cH
  00148	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0014d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00152	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00158	4c 8b c0	 mov	 r8, rax
  0015b	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$[rsp]
  00160	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mod$[rsp]
  00165	e8 00 00 00 00	 call	 PyAST_CompileEx
  0016a	48 89 44 24 40	 mov	 QWORD PTR res$[rsp], rax
$LN1@parser_com@2:

; 477  :            }
; 478  :            PyArena_Free(arena);

  0016f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  00174	e8 00 00 00 00	 call	 PyArena_Free
$LN2@parser_com@2:
$LN3@parser_com@2:

; 479  :         }
; 480  :     }
; 481  : 
; 482  :     return (res);

  00179	48 8b 44 24 40	 mov	 rax, QWORD PTR res$[rsp]

; 483  : }

  0017e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00182	c3		 ret	 0
parser_compilest ENDP
_TEXT	ENDS
PUBLIC	??_C@_07KLOJBKBA@?3isexpr?$AA@			; `string'
PUBLIC	??_C@_09NHHKGHMC@O?$CB?3isexpr?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_isexpr DD imagerel parser_isexpr
	DD	imagerel parser_isexpr+250
	DD	imagerel $unwind$parser_isexpr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_isexpr DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_07KLOJBKBA@?3isexpr?$AA@
CONST	SEGMENT
??_C@_07KLOJBKBA@?3isexpr?$AA@ DB ':isexpr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NHHKGHMC@O?$CB?3isexpr?$AA@
CONST	SEGMENT
??_C@_09NHHKGHMC@O?$CB?3isexpr?$AA@ DB 'O!:isexpr', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parser_isexpr
_TEXT	SEGMENT
res$ = 48
ok$ = 56
tv88 = 64
self$ = 96
args$ = 104
kw$ = 112
parser_isexpr PROC					; COMDAT

; 495  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 496  :     PyObject* res = 0;

  00013	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 497  :     int ok;
; 498  : 
; 499  :     static char *keywords[] = {"st", NULL};
; 500  : 
; 501  :     if (self == NULL || PyModule_Check(self))

  0001c	48 83 7c 24 60
	00		 cmp	 QWORD PTR self$[rsp], 0
  00022	74 2b		 je	 SHORT $LN4@parser_ise
  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  0002b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00030	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00034	74 19		 je	 SHORT $LN3@parser_ise
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  0003d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00042	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00046	e8 00 00 00 00	 call	 PyType_IsSubtype
  0004b	85 c0		 test	 eax, eax
  0004d	74 39		 je	 SHORT $LN5@parser_ise
$LN3@parser_ise:
$LN4@parser_ise:

; 502  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "O!:isexpr", keywords,
; 503  :                                          &PyST_Type, &self);

  0004f	48 8d 44 24 60	 lea	 rax, QWORD PTR self$[rsp]
  00054	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  00060	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00065	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_isexpr@@9@9
  0006c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09NHHKGHMC@O?$CB?3isexpr?$AA@
  00073	48 8b 54 24 70	 mov	 rdx, QWORD PTR kw$[rsp]
  00078	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0007d	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00082	89 44 24 38	 mov	 DWORD PTR ok$[rsp], eax

; 504  :     else

  00086	eb 28		 jmp	 SHORT $LN2@parser_ise
$LN5@parser_ise:

; 505  :         ok = PyArg_ParseTupleAndKeywords(args, kw, ":isexpr", &keywords[1]);

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?keywords@?1??parser_isexpr@@9@9
  0008f	48 83 c0 08	 add	 rax, 8
  00093	4c 8b c8	 mov	 r9, rax
  00096	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07KLOJBKBA@?3isexpr?$AA@
  0009d	48 8b 54 24 70	 mov	 rdx, QWORD PTR kw$[rsp]
  000a2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  000a7	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000ac	89 44 24 38	 mov	 DWORD PTR ok$[rsp], eax
$LN2@parser_ise:

; 506  : 
; 507  :     if (ok) {

  000b0	83 7c 24 38 00	 cmp	 DWORD PTR ok$[rsp], 0
  000b5	74 39		 je	 SHORT $LN1@parser_ise

; 508  :         /* Check to see if the ST represents an expression or not. */
; 509  :         res = (self->st_type == PyST_EXPR) ? Py_True : Py_False;

  000b7	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000bc	83 78 68 01	 cmp	 DWORD PTR [rax+104], 1
  000c0	75 0e		 jne	 SHORT $LN8@parser_ise
  000c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000c9	48 89 44 24 40	 mov	 QWORD PTR tv88[rsp], rax
  000ce	eb 0c		 jmp	 SHORT $LN9@parser_ise
$LN8@parser_ise:
  000d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  000d7	48 89 44 24 40	 mov	 QWORD PTR tv88[rsp], rax
$LN9@parser_ise:
  000dc	48 8b 44 24 40	 mov	 rax, QWORD PTR tv88[rsp]
  000e1	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 510  :         Py_INCREF(res);

  000e6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000eb	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@parser_ise:

; 511  :     }
; 512  :     return (res);

  000f0	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]

; 513  : }

  000f5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f9	c3		 ret	 0
parser_isexpr ENDP
_TEXT	ENDS
PUBLIC	??_C@_08BBFCHAM@?3issuite?$AA@			; `string'
PUBLIC	??_C@_0L@GJLEAHIJ@O?$CB?3issuite?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_issuite DD imagerel parser_issuite
	DD	imagerel parser_issuite+250
	DD	imagerel $unwind$parser_issuite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_issuite DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_08BBFCHAM@?3issuite?$AA@
CONST	SEGMENT
??_C@_08BBFCHAM@?3issuite?$AA@ DB ':issuite', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GJLEAHIJ@O?$CB?3issuite?$AA@
CONST	SEGMENT
??_C@_0L@GJLEAHIJ@O?$CB?3issuite?$AA@ DB 'O!:issuite', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parser_issuite
_TEXT	SEGMENT
res$ = 48
ok$ = 56
tv88 = 64
self$ = 96
args$ = 104
kw$ = 112
parser_issuite PROC					; COMDAT

; 518  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 519  :     PyObject* res = 0;

  00013	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 520  :     int ok;
; 521  : 
; 522  :     static char *keywords[] = {"st", NULL};
; 523  : 
; 524  :     if (self == NULL || PyModule_Check(self))

  0001c	48 83 7c 24 60
	00		 cmp	 QWORD PTR self$[rsp], 0
  00022	74 2b		 je	 SHORT $LN4@parser_iss
  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  0002b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00030	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00034	74 19		 je	 SHORT $LN3@parser_iss
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  0003d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00042	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00046	e8 00 00 00 00	 call	 PyType_IsSubtype
  0004b	85 c0		 test	 eax, eax
  0004d	74 39		 je	 SHORT $LN5@parser_iss
$LN3@parser_iss:
$LN4@parser_iss:

; 525  :         ok = PyArg_ParseTupleAndKeywords(args, kw, "O!:issuite", keywords,
; 526  :                                          &PyST_Type, &self);

  0004f	48 8d 44 24 60	 lea	 rax, QWORD PTR self$[rsp]
  00054	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyST_Type
  00060	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00065	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_issuite@@9@9
  0006c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@GJLEAHIJ@O?$CB?3issuite?$AA@
  00073	48 8b 54 24 70	 mov	 rdx, QWORD PTR kw$[rsp]
  00078	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0007d	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00082	89 44 24 38	 mov	 DWORD PTR ok$[rsp], eax

; 527  :     else

  00086	eb 28		 jmp	 SHORT $LN2@parser_iss
$LN5@parser_iss:

; 528  :         ok = PyArg_ParseTupleAndKeywords(args, kw, ":issuite", &keywords[1]);

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?keywords@?1??parser_issuite@@9@9
  0008f	48 83 c0 08	 add	 rax, 8
  00093	4c 8b c8	 mov	 r9, rax
  00096	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08BBFCHAM@?3issuite?$AA@
  0009d	48 8b 54 24 70	 mov	 rdx, QWORD PTR kw$[rsp]
  000a2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  000a7	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000ac	89 44 24 38	 mov	 DWORD PTR ok$[rsp], eax
$LN2@parser_iss:

; 529  : 
; 530  :     if (ok) {

  000b0	83 7c 24 38 00	 cmp	 DWORD PTR ok$[rsp], 0
  000b5	74 39		 je	 SHORT $LN1@parser_iss

; 531  :         /* Check to see if the ST represents an expression or not. */
; 532  :         res = (self->st_type == PyST_EXPR) ? Py_False : Py_True;

  000b7	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000bc	83 78 68 01	 cmp	 DWORD PTR [rax+104], 1
  000c0	75 0e		 jne	 SHORT $LN8@parser_iss
  000c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  000c9	48 89 44 24 40	 mov	 QWORD PTR tv88[rsp], rax
  000ce	eb 0c		 jmp	 SHORT $LN9@parser_iss
$LN8@parser_iss:
  000d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000d7	48 89 44 24 40	 mov	 QWORD PTR tv88[rsp], rax
$LN9@parser_iss:
  000dc	48 8b 44 24 40	 mov	 rax, QWORD PTR tv88[rsp]
  000e1	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 533  :         Py_INCREF(res);

  000e6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000eb	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@parser_iss:

; 534  :     }
; 535  :     return (res);

  000f0	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]

; 536  : }

  000f5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f9	c3		 ret	 0
parser_issuite ENDP
_TEXT	ENDS
PUBLIC	??_C@_06KMFDMNJG@s?3expr?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_expr DD imagerel parser_expr
	DD	imagerel parser_expr+52
	DD	imagerel $unwind$parser_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_expr DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_06KMFDMNJG@s?3expr?$AA@
CONST	SEGMENT
??_C@_06KMFDMNJG@s?3expr?$AA@ DB 's:expr', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parser_expr
_TEXT	SEGMENT
self$ = 48
args$ = 56
kw$ = 64
parser_expr PROC					; COMDAT

; 598  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 599  :     NOTE(ARGUNUSED(self))
; 600  :     return (parser_do_parse(args, kw, "s:expr", PyST_EXPR));

  00013	41 b9 01 00 00
	00		 mov	 r9d, 1
  00019	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KMFDMNJG@s?3expr?$AA@
  00020	48 8b 54 24 40	 mov	 rdx, QWORD PTR kw$[rsp]
  00025	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  0002a	e8 00 00 00 00	 call	 parser_do_parse

; 601  : }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
parser_expr ENDP
_TEXT	ENDS
EXTRN	PyParser_ClearError:PROC
EXTRN	PyParser_SetError:PROC
EXTRN	PyParser_ParseStringFlagsFilenameEx:PROC
EXTRN	_PyParser_Grammar:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_do_parse DD imagerel parser_do_parse
	DD	imagerel parser_do_parse+274
	DD	imagerel $unwind$parser_do_parse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_do_parse DD 021b01H
	DD	011011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parser_do_parse
_TEXT	SEGMENT
res$ = 48
flags$ = 56
string$ = 64
err$ = 72
n$22230 = 112
tv75 = 120
args$ = 144
kw$ = 152
argspec$ = 160
type$ = 168
parser_do_parse PROC					; COMDAT

; 559  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 560  :     char*     string = 0;

  0001b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR string$[rsp], 0

; 561  :     PyObject* res    = 0;

  00024	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 562  :     int flags        = 0;

  0002d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR flags$[rsp], 0

; 563  :     perrdetail err;
; 564  : 
; 565  :     static char *keywords[] = {"source", NULL};
; 566  : 
; 567  :     if (PyArg_ParseTupleAndKeywords(args, kw, argspec, keywords, &string)) {

  00035	48 8d 44 24 40	 lea	 rax, QWORD PTR string$[rsp]
  0003a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_do_parse@@9@9
  00046	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR argspec$[rsp]
  0004e	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR kw$[rsp]
  00056	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005e	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00063	85 c0		 test	 eax, eax
  00065	0f 84 9a 00 00
	00		 je	 $LN4@parser_do_

; 568  :         node* n = PyParser_ParseStringFlagsFilenameEx(string, NULL,
; 569  :                                                        &_PyParser_Grammar,
; 570  :                                                       (type == PyST_EXPR)
; 571  :                                                       ? eval_input : file_input,
; 572  :                                                       &err, &flags);

  0006b	83 bc 24 a8 00
	00 00 01	 cmp	 DWORD PTR type$[rsp], 1
  00073	75 0a		 jne	 SHORT $LN7@parser_do_
  00075	c7 44 24 78 02
	01 00 00	 mov	 DWORD PTR tv75[rsp], 258 ; 00000102H
  0007d	eb 08		 jmp	 SHORT $LN8@parser_do_
$LN7@parser_do_:
  0007f	c7 44 24 78 01
	01 00 00	 mov	 DWORD PTR tv75[rsp], 257 ; 00000101H
$LN8@parser_do_:
  00087	48 8d 44 24 38	 lea	 rax, QWORD PTR flags$[rsp]
  0008c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00091	48 8d 44 24 48	 lea	 rax, QWORD PTR err$[rsp]
  00096	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009b	44 8b 4c 24 78	 mov	 r9d, DWORD PTR tv75[rsp]
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyParser_Grammar
  000a7	33 d2		 xor	 edx, edx
  000a9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR string$[rsp]
  000ae	e8 00 00 00 00	 call	 PyParser_ParseStringFlagsFilenameEx
  000b3	48 89 44 24 70	 mov	 QWORD PTR n$22230[rsp], rax

; 573  : 
; 574  :         if (n) {

  000b8	48 83 7c 24 70
	00		 cmp	 QWORD PTR n$22230[rsp], 0
  000be	74 31		 je	 SHORT $LN3@parser_do_

; 575  :             res = parser_newstobject(n, type);

  000c0	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR type$[rsp]
  000c7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR n$22230[rsp]
  000cc	e8 00 00 00 00	 call	 parser_newstobject
  000d1	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 576  :             if (res)

  000d6	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  000dc	74 11		 je	 SHORT $LN2@parser_do_

; 577  :                 ((PyST_Object *)res)->st_flags.cf_flags = flags & PyCF_MASK;

  000de	8b 44 24 38	 mov	 eax, DWORD PTR flags$[rsp]
  000e2	25 00 e0 07 00	 and	 eax, 516096		; 0007e000H
  000e7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000ec	89 41 6c	 mov	 DWORD PTR [rcx+108], eax
$LN2@parser_do_:

; 578  :         }
; 579  :         else {

  000ef	eb 0a		 jmp	 SHORT $LN1@parser_do_
$LN3@parser_do_:

; 580  :             PyParser_SetError(&err);

  000f1	48 8d 4c 24 48	 lea	 rcx, QWORD PTR err$[rsp]
  000f6	e8 00 00 00 00	 call	 PyParser_SetError
$LN1@parser_do_:

; 581  :         }
; 582  :         PyParser_ClearError(&err);

  000fb	48 8d 4c 24 48	 lea	 rcx, QWORD PTR err$[rsp]
  00100	e8 00 00 00 00	 call	 PyParser_ClearError
$LN4@parser_do_:

; 583  :     }
; 584  :     return (res);

  00105	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]

; 585  : }

  0010a	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00111	c3		 ret	 0
parser_do_parse ENDP
_TEXT	ENDS
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_newstobject DD imagerel parser_newstobject
	DD	imagerel parser_newstobject+136
	DD	imagerel $unwind$parser_newstobject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_newstobject DD 010d01H
	DD	0620dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parser_newstobject
_TEXT	SEGMENT
o$ = 32
tv70 = 40
st$ = 64
type$ = 72
parser_newstobject PROC					; COMDAT

; 339  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 340  :     PyST_Object* o = PyObject_New(PyST_Object, &PyST_Type);

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 13		 je	 SHORT $LN5@parser_new
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyST_Type
  0001d	e8 00 00 00 00	 call	 _PxObject_New
  00022	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00027	eb 11		 jmp	 SHORT $LN6@parser_new
$LN5@parser_new:
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyST_Type
  00030	e8 00 00 00 00	 call	 _PyObject_New
  00035	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
$LN6@parser_new:
  0003a	48 8b 44 24 28	 mov	 rax, QWORD PTR tv70[rsp]
  0003f	48 89 44 24 20	 mov	 QWORD PTR o$[rsp], rax

; 341  : 
; 342  :     if (o != 0) {

  00044	48 83 7c 24 20
	00		 cmp	 QWORD PTR o$[rsp], 0
  0004a	74 28		 je	 SHORT $LN2@parser_new

; 343  :         o->st_node = st;

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR o$[rsp]
  00051	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00056	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 344  :         o->st_type = type;

  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR o$[rsp]
  0005f	8b 4c 24 48	 mov	 ecx, DWORD PTR type$[rsp]
  00063	89 48 68	 mov	 DWORD PTR [rax+104], ecx

; 345  :         o->st_flags.cf_flags = 0;

  00066	48 8b 44 24 20	 mov	 rax, QWORD PTR o$[rsp]
  0006b	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [rax+108], 0

; 346  :     }
; 347  :     else {

  00072	eb 0a		 jmp	 SHORT $LN1@parser_new
$LN2@parser_new:

; 348  :         PyNode_Free(st);

  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00079	e8 00 00 00 00	 call	 PyNode_Free
$LN1@parser_new:

; 349  :     }
; 350  :     return ((PyObject*)o);

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR o$[rsp]

; 351  : }

  00083	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00087	c3		 ret	 0
parser_newstobject ENDP
_TEXT	ENDS
PUBLIC	??_C@_07FMJLLMO@s?3suite?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_suite DD imagerel parser_suite
	DD	imagerel parser_suite+52
	DD	imagerel $unwind$parser_suite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_suite DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_07FMJLLMO@s?3suite?$AA@
CONST	SEGMENT
??_C@_07FMJLLMO@s?3suite?$AA@ DB 's:suite', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parser_suite
_TEXT	SEGMENT
self$ = 48
args$ = 56
kw$ = 64
parser_suite PROC					; COMDAT

; 606  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 607  :     NOTE(ARGUNUSED(self))
; 608  :     return (parser_do_parse(args, kw, "s:suite", PyST_SUITE));

  00013	41 b9 02 00 00
	00		 mov	 r9d, 2
  00019	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07FMJLLMO@s?3suite?$AA@
  00020	48 8b 54 24 40	 mov	 rdx, QWORD PTR kw$[rsp]
  00025	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  0002a	e8 00 00 00 00	 call	 parser_do_parse

; 609  : }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
parser_suite ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@MIOHNAME@unspecified?5ST?5error?5occurred?$AA@ ; `string'
PUBLIC	??_C@_0CN@CHBJDMFA@parse?5tree?5does?5not?5use?5a?5valid?5@ ; `string'
PUBLIC	??_C@_0DC@CFFOGKCJ@sequence2st?$CI?$CJ?5requires?5a?5single?5@ ; `string'
PUBLIC	??_C@_0O@OFBAJAL@O?3sequence2st?$AA@		; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PySequence_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser_tuple2st DD imagerel parser_tuple2st
	DD	imagerel parser_tuple2st+396
	DD	imagerel $unwind$parser_tuple2st
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser_tuple2st DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BO@MIOHNAME@unspecified?5ST?5error?5occurred?$AA@
CONST	SEGMENT
??_C@_0BO@MIOHNAME@unspecified?5ST?5error?5occurred?$AA@ DB 'unspecified '
	DB	'ST error occurred', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CHBJDMFA@parse?5tree?5does?5not?5use?5a?5valid?5@
CONST	SEGMENT
??_C@_0CN@CHBJDMFA@parse?5tree?5does?5not?5use?5a?5valid?5@ DB 'parse tre'
	DB	'e does not use a valid start symbol', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CFFOGKCJ@sequence2st?$CI?$CJ?5requires?5a?5single?5@
CONST	SEGMENT
??_C@_0DC@CFFOGKCJ@sequence2st?$CI?$CJ?5requires?5a?5single?5@ DB 'sequen'
	DB	'ce2st() requires a single sequence argument', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OFBAJAL@O?3sequence2st?$AA@
CONST	SEGMENT
??_C@_0O@OFBAJAL@O?3sequence2st?$AA@ DB 'O:sequence2st', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parser_tuple2st
_TEXT	SEGMENT
st$ = 48
tuple$ = 56
tree$ = 64
start_sym$22286 = 72
self$ = 96
args$ = 104
kw$ = 112
parser_tuple2st PROC					; COMDAT

; 650  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 651  :     NOTE(ARGUNUSED(self))
; 652  :     PyObject *st = 0;

  00013	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR st$[rsp], 0

; 653  :     PyObject *tuple;
; 654  :     node *tree;
; 655  : 
; 656  :     static char *keywords[] = {"sequence", NULL};
; 657  : 
; 658  :     if (!PyArg_ParseTupleAndKeywords(args, kw, "O:sequence2st", keywords,
; 659  :                                      &tuple))

  0001c	48 8d 44 24 38	 lea	 rax, QWORD PTR tuple$[rsp]
  00021	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00026	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??parser_tuple2st@@9@9
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@OFBAJAL@O?3sequence2st?$AA@
  00034	48 8b 54 24 70	 mov	 rdx, QWORD PTR kw$[rsp]
  00039	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0003e	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00043	85 c0		 test	 eax, eax
  00045	75 07		 jne	 SHORT $LN16@parser_tup

; 660  :         return (0);

  00047	33 c0		 xor	 eax, eax
  00049	e9 39 01 00 00	 jmp	 $LN17@parser_tup
$LN16@parser_tup:

; 661  :     if (!PySequence_Check(tuple)) {

  0004e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tuple$[rsp]
  00053	e8 00 00 00 00	 call	 PySequence_Check
  00058	85 c0		 test	 eax, eax
  0005a	75 1a		 jne	 SHORT $LN15@parser_tup

; 662  :         PyErr_SetString(PyExc_ValueError,
; 663  :                         "sequence2st() requires a single sequence argument");

  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@CFFOGKCJ@sequence2st?$CI?$CJ?5requires?5a?5single?5@
  00063	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0006a	e8 00 00 00 00	 call	 PyErr_SetString

; 664  :         return (0);

  0006f	33 c0		 xor	 eax, eax
  00071	e9 11 01 00 00	 jmp	 $LN17@parser_tup
$LN15@parser_tup:

; 665  :     }
; 666  :     /*
; 667  :      *  Convert the tree to the internal form before checking it.
; 668  :      */
; 669  :     tree = build_node_tree(tuple);

  00076	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tuple$[rsp]
  0007b	e8 00 00 00 00	 call	 build_node_tree
  00080	48 89 44 24 40	 mov	 QWORD PTR tree$[rsp], rax

; 670  :     if (tree != 0) {

  00085	48 83 7c 24 40
	00		 cmp	 QWORD PTR tree$[rsp], 0
  0008b	0f 84 d3 00 00
	00		 je	 $LN14@parser_tup

; 671  :         int start_sym = TYPE(tree);

  00091	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00096	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00099	89 44 24 48	 mov	 DWORD PTR start_sym$22286[rsp], eax

; 672  :         if (start_sym == eval_input) {

  0009d	81 7c 24 48 02
	01 00 00	 cmp	 DWORD PTR start_sym$22286[rsp], 258 ; 00000102H
  000a5	75 33		 jne	 SHORT $LN13@parser_tup

; 673  :             /*  Might be an eval form.  */
; 674  :             if (validate_expr_tree(tree))

  000a7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000ac	e8 00 00 00 00	 call	 validate_expr_tree
  000b1	85 c0		 test	 eax, eax
  000b3	74 16		 je	 SHORT $LN12@parser_tup

; 675  :                 st = parser_newstobject(tree, PyST_EXPR);

  000b5	ba 01 00 00 00	 mov	 edx, 1
  000ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000bf	e8 00 00 00 00	 call	 parser_newstobject
  000c4	48 89 44 24 30	 mov	 QWORD PTR st$[rsp], rax

; 676  :             else

  000c9	eb 0a		 jmp	 SHORT $LN11@parser_tup
$LN12@parser_tup:

; 677  :                 PyNode_Free(tree);

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000d0	e8 00 00 00 00	 call	 PyNode_Free
$LN11@parser_tup:

; 678  :         }
; 679  :         else if (start_sym == file_input) {

  000d5	e9 8a 00 00 00	 jmp	 $LN10@parser_tup
$LN13@parser_tup:
  000da	81 7c 24 48 01
	01 00 00	 cmp	 DWORD PTR start_sym$22286[rsp], 257 ; 00000101H
  000e2	75 30		 jne	 SHORT $LN9@parser_tup

; 680  :             /*  This looks like an exec form so far.  */
; 681  :             if (validate_file_input(tree))

  000e4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000e9	e8 00 00 00 00	 call	 validate_file_input
  000ee	85 c0		 test	 eax, eax
  000f0	74 16		 je	 SHORT $LN8@parser_tup

; 682  :                 st = parser_newstobject(tree, PyST_SUITE);

  000f2	ba 02 00 00 00	 mov	 edx, 2
  000f7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000fc	e8 00 00 00 00	 call	 parser_newstobject
  00101	48 89 44 24 30	 mov	 QWORD PTR st$[rsp], rax

; 683  :             else

  00106	eb 0a		 jmp	 SHORT $LN7@parser_tup
$LN8@parser_tup:

; 684  :                 PyNode_Free(tree);

  00108	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0010d	e8 00 00 00 00	 call	 PyNode_Free
$LN7@parser_tup:

; 685  :         }
; 686  :         else if (start_sym == encoding_decl) {

  00112	eb 50		 jmp	 SHORT $LN6@parser_tup
$LN9@parser_tup:
  00114	81 7c 24 48 4f
	01 00 00	 cmp	 DWORD PTR start_sym$22286[rsp], 335 ; 0000014fH
  0011c	75 30		 jne	 SHORT $LN5@parser_tup

; 687  :             /* This looks like an encoding_decl so far. */
; 688  :             if (validate_encoding_decl(tree))

  0011e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00123	e8 00 00 00 00	 call	 validate_encoding_decl
  00128	85 c0		 test	 eax, eax
  0012a	74 16		 je	 SHORT $LN4@parser_tup

; 689  :                 st = parser_newstobject(tree, PyST_SUITE);

  0012c	ba 02 00 00 00	 mov	 edx, 2
  00131	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00136	e8 00 00 00 00	 call	 parser_newstobject
  0013b	48 89 44 24 30	 mov	 QWORD PTR st$[rsp], rax

; 690  :             else

  00140	eb 0a		 jmp	 SHORT $LN3@parser_tup
$LN4@parser_tup:

; 691  :                 PyNode_Free(tree);

  00142	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00147	e8 00 00 00 00	 call	 PyNode_Free
$LN3@parser_tup:

; 692  :         }
; 693  :         else {

  0014c	eb 16		 jmp	 SHORT $LN2@parser_tup
$LN5@parser_tup:

; 694  :             /*  This is a fragment, at best. */
; 695  :             PyNode_Free(tree);

  0014e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00153	e8 00 00 00 00	 call	 PyNode_Free

; 696  :             err_string("parse tree does not use a valid start symbol");

  00158	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@CHBJDMFA@parse?5tree?5does?5not?5use?5a?5valid?5@
  0015f	e8 00 00 00 00	 call	 err_string
$LN2@parser_tup:
$LN6@parser_tup:
$LN10@parser_tup:
$LN14@parser_tup:

; 697  :         }
; 698  :     }
; 699  :     /*  Make sure we raise an exception on all errors.  We should never
; 700  :      *  get this, but we'd do well to be sure something is done.
; 701  :      */
; 702  :     if (st == NULL && !PyErr_Occurred())

  00164	48 83 7c 24 30
	00		 cmp	 QWORD PTR st$[rsp], 0
  0016a	75 16		 jne	 SHORT $LN1@parser_tup
  0016c	e8 00 00 00 00	 call	 PyErr_Occurred
  00171	48 85 c0	 test	 rax, rax
  00174	75 0c		 jne	 SHORT $LN1@parser_tup

; 703  :         err_string("unspecified ST error occurred");

  00176	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@MIOHNAME@unspecified?5ST?5error?5occurred?$AA@
  0017d	e8 00 00 00 00	 call	 err_string
$LN1@parser_tup:

; 704  : 
; 705  :     return st;

  00182	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
$LN17@parser_tup:

; 706  : }

  00187	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0018b	c3		 ret	 0
parser_tuple2st ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$err_string DD imagerel err_string
	DD	imagerel err_string+31
	DD	imagerel $unwind$err_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$err_string DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT err_string
_TEXT	SEGMENT
message$ = 48
err_string PROC						; COMDAT

; 546  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 547  :     PyErr_SetString(parser_error, message);

  00009	48 8b 54 24 30	 mov	 rdx, QWORD PTR message$[rsp]
  0000e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  00015	e8 00 00 00 00	 call	 PyErr_SetString

; 548  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
err_string ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@MAKOIFIJ@Illegal?5component?5tuple?4?$AA@ ; `string'
PUBLIC	??_C@_02EHCHIAMF@os?$AA@			; `string'
PUBLIC	??_C@_0DI@CJPEHLPC@Illegal?5syntax?9tree?$DL?5cannot?5star@ ; `string'
EXTRN	memcpy:PROC
EXTRN	_PyObject_DebugMalloc:PROC
EXTRN	PyUnicode_AsUTF8AndSize:PROC
EXTRN	PyNode_New:PROC
EXTRN	PySequence_GetSlice:PROC
EXTRN	PyErr_SetObject:PROC
EXTRN	Py_BuildValue:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	PySequence_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_node_tree DD imagerel build_node_tree
	DD	imagerel build_node_tree+611
	DD	imagerel $unwind$build_node_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_node_tree DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0BJ@MAKOIFIJ@Illegal?5component?5tuple?4?$AA@
CONST	SEGMENT
??_C@_0BJ@MAKOIFIJ@Illegal?5component?5tuple?4?$AA@ DB 'Illegal component'
	DB	' tuple.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02EHCHIAMF@os?$AA@
CONST	SEGMENT
??_C@_02EHCHIAMF@os?$AA@ DB 'os', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@CJPEHLPC@Illegal?5syntax?9tree?$DL?5cannot?5star@
CONST	SEGMENT
??_C@_0DI@CJPEHLPC@Illegal?5syntax?9tree?$DL?5cannot?5star@ DB 'Illegal s'
	DB	'yntax-tree; cannot start with terminal symbol.', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT build_node_tree
_TEXT	SEGMENT
res$ = 32
num$ = 40
temp$ = 48
line_num$22460 = 56
encoding$22461 = 64
temp$22473 = 72
len$22472 = 80
err$22488 = 88
tuple$ = 112
build_node_tree PROC					; COMDAT

; 860  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 861  :     node* res = 0;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 862  :     PyObject *temp = PySequence_GetItem(tuple, 0);

  00012	33 d2		 xor	 edx, edx
  00014	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tuple$[rsp]
  00019	e8 00 00 00 00	 call	 PySequence_GetItem
  0001e	48 89 44 24 30	 mov	 QWORD PTR temp$[rsp], rax

; 863  :     long num = -1;

  00023	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR num$[rsp], -1

; 864  : 
; 865  :     if (temp != NULL)

  0002b	48 83 7c 24 30
	00		 cmp	 QWORD PTR temp$[rsp], 0
  00031	74 0e		 je	 SHORT $LN24@build_node

; 866  :         num = PyLong_AsLong(temp);

  00033	48 8b 4c 24 30	 mov	 rcx, QWORD PTR temp$[rsp]
  00038	e8 00 00 00 00	 call	 PyLong_AsLong
  0003d	89 44 24 28	 mov	 DWORD PTR num$[rsp], eax
$LN24@build_node:
$LN23@build_node:

; 867  :     Py_XDECREF(temp);

  00041	48 83 7c 24 30
	00		 cmp	 QWORD PTR temp$[rsp], 0
  00047	74 0a		 je	 SHORT $LN20@build_node
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR temp$[rsp]
  0004e	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@build_node:
  00053	33 c0		 xor	 eax, eax
  00055	85 c0		 test	 eax, eax
  00057	75 e8		 jne	 SHORT $LN23@build_node

; 868  :     if (ISTERMINAL(num)) {

  00059	81 7c 24 28 00
	01 00 00	 cmp	 DWORD PTR num$[rsp], 256 ; 00000100H
  00061	7d 4b		 jge	 SHORT $LN19@build_node

; 869  :         /*
; 870  :          *  The tuple is simple, but it doesn't start with a start symbol.
; 871  :          *  Raise an exception now and be done with it.
; 872  :          */
; 873  :         tuple = Py_BuildValue("os", tuple,
; 874  :                     "Illegal syntax-tree; cannot start with terminal symbol.");

  00063	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DI@CJPEHLPC@Illegal?5syntax?9tree?$DL?5cannot?5star@
  0006a	48 8b 54 24 70	 mov	 rdx, QWORD PTR tuple$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02EHCHIAMF@os?$AA@
  00076	e8 00 00 00 00	 call	 Py_BuildValue
  0007b	48 89 44 24 70	 mov	 QWORD PTR tuple$[rsp], rax

; 875  :         PyErr_SetObject(parser_error, tuple);

  00080	48 8b 54 24 70	 mov	 rdx, QWORD PTR tuple$[rsp]
  00085	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  0008c	e8 00 00 00 00	 call	 PyErr_SetObject
$LN18@build_node:

; 876  :         Py_XDECREF(tuple);

  00091	48 83 7c 24 70
	00		 cmp	 QWORD PTR tuple$[rsp], 0
  00097	74 0a		 je	 SHORT $LN15@build_node
  00099	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tuple$[rsp]
  0009e	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@build_node:
  000a3	33 c0		 xor	 eax, eax
  000a5	85 c0		 test	 eax, eax
  000a7	75 e8		 jne	 SHORT $LN18@build_node

; 877  :     }
; 878  :     else if (ISNONTERMINAL(num)) {

  000a9	e9 ab 01 00 00	 jmp	 $LN14@build_node
$LN19@build_node:
  000ae	81 7c 24 28 00
	01 00 00	 cmp	 DWORD PTR num$[rsp], 256 ; 00000100H
  000b6	0f 8c 57 01 00
	00		 jl	 $LN13@build_node

; 879  :         /*
; 880  :          *  Not efficient, but that can be handled later.
; 881  :          */
; 882  :         int line_num = 0;

  000bc	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR line_num$22460[rsp], 0

; 883  :         PyObject *encoding = NULL;

  000c4	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR encoding$22461[rsp], 0

; 884  : 
; 885  :         if (num == encoding_decl) {

  000cd	81 7c 24 28 4f
	01 00 00	 cmp	 DWORD PTR num$[rsp], 335 ; 0000014fH
  000d5	75 3a		 jne	 SHORT $LN12@build_node

; 886  :             encoding = PySequence_GetItem(tuple, 2);

  000d7	ba 02 00 00 00	 mov	 edx, 2
  000dc	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tuple$[rsp]
  000e1	e8 00 00 00 00	 call	 PySequence_GetItem
  000e6	48 89 44 24 40	 mov	 QWORD PTR encoding$22461[rsp], rax

; 887  :             /* tuple isn't borrowed anymore here, need to DECREF */
; 888  :             tuple = PySequence_GetSlice(tuple, 0, 2);

  000eb	41 b8 02 00 00
	00		 mov	 r8d, 2
  000f1	33 d2		 xor	 edx, edx
  000f3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tuple$[rsp]
  000f8	e8 00 00 00 00	 call	 PySequence_GetSlice
  000fd	48 89 44 24 70	 mov	 QWORD PTR tuple$[rsp], rax

; 889  :             if (tuple == NULL)

  00102	48 83 7c 24 70
	00		 cmp	 QWORD PTR tuple$[rsp], 0
  00108	75 07		 jne	 SHORT $LN11@build_node

; 890  :                 return NULL;

  0010a	33 c0		 xor	 eax, eax
  0010c	e9 4d 01 00 00	 jmp	 $LN25@build_node
$LN11@build_node:
$LN12@build_node:

; 891  :         }
; 892  :         res = PyNode_New(num);

  00111	8b 4c 24 28	 mov	 ecx, DWORD PTR num$[rsp]
  00115	e8 00 00 00 00	 call	 PyNode_New
  0011a	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 893  :         if (res != NULL) {

  0011f	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00125	0f 84 e6 00 00
	00		 je	 $LN10@build_node

; 894  :             if (res != build_node_children(tuple, res, &line_num)) {

  0012b	4c 8d 44 24 38	 lea	 r8, QWORD PTR line_num$22460[rsp]
  00130	48 8b 54 24 20	 mov	 rdx, QWORD PTR res$[rsp]
  00135	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tuple$[rsp]
  0013a	e8 00 00 00 00	 call	 build_node_children
  0013f	48 39 44 24 20	 cmp	 QWORD PTR res$[rsp], rax
  00144	74 13		 je	 SHORT $LN9@build_node

; 895  :                 PyNode_Free(res);

  00146	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0014b	e8 00 00 00 00	 call	 PyNode_Free

; 896  :                 res = NULL;

  00150	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
$LN9@build_node:

; 897  :             }
; 898  :             if (res && encoding) {

  00159	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0015f	0f 84 ac 00 00
	00		 je	 $LN8@build_node
  00165	48 83 7c 24 40
	00		 cmp	 QWORD PTR encoding$22461[rsp], 0
  0016b	0f 84 a0 00 00
	00		 je	 $LN8@build_node

; 899  :                 Py_ssize_t len;
; 900  :                 const char *temp;
; 901  :                 temp = _PyUnicode_AsStringAndSize(encoding, &len);

  00171	48 8d 54 24 50	 lea	 rdx, QWORD PTR len$22472[rsp]
  00176	48 8b 4c 24 40	 mov	 rcx, QWORD PTR encoding$22461[rsp]
  0017b	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize
  00180	48 89 44 24 48	 mov	 QWORD PTR temp$22473[rsp], rax

; 902  :                 if (temp == NULL) {

  00185	48 83 7c 24 48
	00		 cmp	 QWORD PTR temp$22473[rsp], 0
  0018b	75 25		 jne	 SHORT $LN7@build_node

; 903  :                     Py_DECREF(res);

  0018d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00192	e8 00 00 00 00	 call	 _Py_DecRef

; 904  :                     Py_DECREF(encoding);

  00197	48 8b 4c 24 40	 mov	 rcx, QWORD PTR encoding$22461[rsp]
  0019c	e8 00 00 00 00	 call	 _Py_DecRef

; 905  :                     Py_DECREF(tuple);

  001a1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tuple$[rsp]
  001a6	e8 00 00 00 00	 call	 _Py_DecRef

; 906  :                     return NULL;

  001ab	33 c0		 xor	 eax, eax
  001ad	e9 ac 00 00 00	 jmp	 $LN25@build_node
$LN7@build_node:

; 907  :                 }
; 908  :                 res->n_str = (char *)PyObject_MALLOC(len + 1);

  001b2	48 8b 44 24 50	 mov	 rax, QWORD PTR len$22472[rsp]
  001b7	48 ff c0	 inc	 rax
  001ba	48 8b c8	 mov	 rcx, rax
  001bd	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  001c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  001c7	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 909  :                 if (res->n_str != NULL && temp != NULL)

  001cb	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  001d0	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  001d5	74 26		 je	 SHORT $LN6@build_node
  001d7	48 83 7c 24 48
	00		 cmp	 QWORD PTR temp$22473[rsp], 0
  001dd	74 1e		 je	 SHORT $LN6@build_node

; 910  :                     (void) memcpy(res->n_str, temp, len + 1);

  001df	48 8b 44 24 50	 mov	 rax, QWORD PTR len$22472[rsp]
  001e4	48 ff c0	 inc	 rax
  001e7	4c 8b c0	 mov	 r8, rax
  001ea	48 8b 54 24 48	 mov	 rdx, QWORD PTR temp$22473[rsp]
  001ef	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  001f4	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  001f8	e8 00 00 00 00	 call	 memcpy
$LN6@build_node:

; 911  :                 Py_DECREF(encoding);

  001fd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR encoding$22461[rsp]
  00202	e8 00 00 00 00	 call	 _Py_DecRef

; 912  :                 Py_DECREF(tuple);

  00207	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tuple$[rsp]
  0020c	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@build_node:
$LN10@build_node:

; 913  :             }
; 914  :         }
; 915  :     }
; 916  :     else {

  00211	eb 46		 jmp	 SHORT $LN5@build_node
$LN13@build_node:

; 917  :         /*  The tuple is illegal -- if the number is neither TERMINAL nor
; 918  :          *  NONTERMINAL, we can't use it.  Not sure the implementation
; 919  :          *  allows this condition, but the API doesn't preclude it.
; 920  :          */
; 921  :         PyObject *err = Py_BuildValue("os", tuple,
; 922  :                                       "Illegal component tuple.");

  00213	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@MAKOIFIJ@Illegal?5component?5tuple?4?$AA@
  0021a	48 8b 54 24 70	 mov	 rdx, QWORD PTR tuple$[rsp]
  0021f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02EHCHIAMF@os?$AA@
  00226	e8 00 00 00 00	 call	 Py_BuildValue
  0022b	48 89 44 24 58	 mov	 QWORD PTR err$22488[rsp], rax

; 923  :         PyErr_SetObject(parser_error, err);

  00230	48 8b 54 24 58	 mov	 rdx, QWORD PTR err$22488[rsp]
  00235	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  0023c	e8 00 00 00 00	 call	 PyErr_SetObject
$LN4@build_node:

; 924  :         Py_XDECREF(err);

  00241	48 83 7c 24 58
	00		 cmp	 QWORD PTR err$22488[rsp], 0
  00247	74 0a		 je	 SHORT $LN1@build_node
  00249	48 8b 4c 24 58	 mov	 rcx, QWORD PTR err$22488[rsp]
  0024e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@build_node:
  00253	33 c0		 xor	 eax, eax
  00255	85 c0		 test	 eax, eax
  00257	75 e8		 jne	 SHORT $LN4@build_node
$LN5@build_node:
$LN14@build_node:

; 925  :     }
; 926  : 
; 927  :     return (res);

  00259	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN25@build_node:

; 928  : }

  0025e	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00262	c3		 ret	 0
build_node_tree ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@CHNLNIPM@unsupported?5number?5of?5child?5node@ ; `string'
PUBLIC	??_C@_0BD@JOLKCCK@unknown?5node?5type?4?$AA@	; `string'
PUBLIC	??_C@_0DJ@NONGLHAJ@third?5item?5in?5terminal?5node?5must@ ; `string'
PUBLIC	??_C@_0DI@NEKLAEMC@second?5item?5in?5terminal?5node?5mus@ ; `string'
PUBLIC	??_C@_0CI@JBBHOFOG@terminal?5nodes?5must?5have?52?5or?53?5@ ; `string'
PUBLIC	??_C@_02HPGKMGCF@Os?$AA@			; `string'
PUBLIC	??_C@_0BI@BAFIMPPI@Illegal?5node?5construct?4?$AA@ ; `string'
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyNode_AddChild:PROC
EXTRN	PyErr_Format:PROC
EXTRN	_PyLong_AsInt:PROC
EXTRN	PyObject_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_node_children DD imagerel build_node_children
	DD	imagerel build_node_children+1543
	DD	imagerel $unwind$build_node_children
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_node_children DD 021601H
	DD	0170116H
xdata	ENDS
;	COMDAT ??_C@_0CC@CHNLNIPM@unsupported?5number?5of?5child?5node@
CONST	SEGMENT
??_C@_0CC@CHNLNIPM@unsupported?5number?5of?5child?5node@ DB 'unsupported '
	DB	'number of child nodes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JOLKCCK@unknown?5node?5type?4?$AA@
CONST	SEGMENT
??_C@_0BD@JOLKCCK@unknown?5node?5type?4?$AA@ DB 'unknown node type.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NONGLHAJ@third?5item?5in?5terminal?5node?5must@
CONST	SEGMENT
??_C@_0DJ@NONGLHAJ@third?5item?5in?5terminal?5node?5must@ DB 'third item '
	DB	'in terminal node must be an integer, found %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@NEKLAEMC@second?5item?5in?5terminal?5node?5mus@
CONST	SEGMENT
??_C@_0DI@NEKLAEMC@second?5item?5in?5terminal?5node?5mus@ DB 'second item'
	DB	' in terminal node must be a string, found %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JBBHOFOG@terminal?5nodes?5must?5have?52?5or?53?5@
CONST	SEGMENT
??_C@_0CI@JBBHOFOG@terminal?5nodes?5must?5have?52?5or?53?5@ DB 'terminal '
	DB	'nodes must have 2 or 3 entries', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HPGKMGCF@Os?$AA@
CONST	SEGMENT
??_C@_02HPGKMGCF@Os?$AA@ DB 'Os', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BAFIMPPI@Illegal?5node?5construct?4?$AA@
CONST	SEGMENT
??_C@_0BI@BAFIMPPI@Illegal?5node?5construct?4?$AA@ DB 'Illegal node const'
	DB	'ruct.', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT build_node_children
_TEXT	SEGMENT
i$ = 48
len$ = 56
err$ = 64
elem$22317 = 72
ok$22318 = 80
type$22320 = 84
strn$22321 = 88
temp$22324 = 96
err$22335 = 104
temp_str$22351 = 112
temp$22350 = 120
len$22349 = 128
o$22363 = 136
num$22368 = 144
err$22395 = 152
new_child$22424 = 160
tv72 = 168
tv85 = 172
tuple$ = 192
root$ = 200
line_num$ = 208
build_node_children PROC				; COMDAT

; 719  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 720  :     Py_ssize_t len = PyObject_Size(tuple);

  00016	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tuple$[rsp]
  0001e	e8 00 00 00 00	 call	 PyObject_Size
  00023	48 89 44 24 38	 mov	 QWORD PTR len$[rsp], rax

; 721  :     Py_ssize_t i;
; 722  :     int  err;
; 723  : 
; 724  :     for (i = 1; i < len; ++i) {

  00028	48 c7 44 24 30
	01 00 00 00	 mov	 QWORD PTR i$[rsp], 1
  00031	eb 0d		 jmp	 SHORT $LN65@build_node@2
$LN64@build_node@2:
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00038	48 ff c0	 inc	 rax
  0003b	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN65@build_node@2:
  00040	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  00045	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  0004a	0f 8d a7 05 00
	00		 jge	 $LN63@build_node@2

; 725  :         /* elem must always be a sequence, however simple */
; 726  :         PyObject* elem = PySequence_GetItem(tuple, i);

  00050	48 8b 54 24 30	 mov	 rdx, QWORD PTR i$[rsp]
  00055	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tuple$[rsp]
  0005d	e8 00 00 00 00	 call	 PySequence_GetItem
  00062	48 89 44 24 48	 mov	 QWORD PTR elem$22317[rsp], rax

; 727  :         int ok = elem != NULL;

  00067	48 83 7c 24 48
	00		 cmp	 QWORD PTR elem$22317[rsp], 0
  0006d	74 0d		 je	 SHORT $LN68@build_node@2
  0006f	c7 84 24 a8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv72[rsp], 1
  0007a	eb 0b		 jmp	 SHORT $LN69@build_node@2
$LN68@build_node@2:
  0007c	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv72[rsp], 0
$LN69@build_node@2:
  00087	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv72[rsp]
  0008e	89 44 24 50	 mov	 DWORD PTR ok$22318[rsp], eax

; 728  :         int type = 0;

  00092	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR type$22320[rsp], 0

; 729  :         char *strn = 0;

  0009a	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR strn$22321[rsp], 0

; 730  : 
; 731  :         if (ok)

  000a3	83 7c 24 50 00	 cmp	 DWORD PTR ok$22318[rsp], 0
  000a8	74 0e		 je	 SHORT $LN62@build_node@2

; 732  :             ok = PySequence_Check(elem);

  000aa	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  000af	e8 00 00 00 00	 call	 PySequence_Check
  000b4	89 44 24 50	 mov	 DWORD PTR ok$22318[rsp], eax
$LN62@build_node@2:

; 733  :         if (ok) {

  000b8	83 7c 24 50 00	 cmp	 DWORD PTR ok$22318[rsp], 0
  000bd	0f 84 ac 00 00
	00		 je	 $LN61@build_node@2

; 734  :             PyObject *temp = PySequence_GetItem(elem, 0);

  000c3	33 d2		 xor	 edx, edx
  000c5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  000ca	e8 00 00 00 00	 call	 PySequence_GetItem
  000cf	48 89 44 24 60	 mov	 QWORD PTR temp$22324[rsp], rax

; 735  :             if (temp == NULL)

  000d4	48 83 7c 24 60
	00		 cmp	 QWORD PTR temp$22324[rsp], 0
  000da	75 0d		 jne	 SHORT $LN60@build_node@2

; 736  :                 ok = 0;

  000dc	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR ok$22318[rsp], 0

; 737  :             else {

  000e4	e9 86 00 00 00	 jmp	 $LN59@build_node@2
$LN60@build_node@2:

; 738  :                 ok = PyLong_Check(temp);

  000e9	48 8b 44 24 60	 mov	 rax, QWORD PTR temp$22324[rsp]
  000ee	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f8	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  000fd	85 c0		 test	 eax, eax
  000ff	74 0d		 je	 SHORT $LN70@build_node@2
  00101	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv85[rsp], 1
  0010c	eb 0b		 jmp	 SHORT $LN71@build_node@2
$LN70@build_node@2:
  0010e	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv85[rsp], 0
$LN71@build_node@2:
  00119	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv85[rsp]
  00120	89 44 24 50	 mov	 DWORD PTR ok$22318[rsp], eax

; 739  :                 if (ok) {

  00124	83 7c 24 50 00	 cmp	 DWORD PTR ok$22318[rsp], 0
  00129	74 3a		 je	 SHORT $LN58@build_node@2

; 740  :                     type = _PyLong_AsInt(temp);

  0012b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR temp$22324[rsp]
  00130	e8 00 00 00 00	 call	 _PyLong_AsInt
  00135	89 44 24 54	 mov	 DWORD PTR type$22320[rsp], eax

; 741  :                     if (type == -1 && PyErr_Occurred()) {

  00139	83 7c 24 54 ff	 cmp	 DWORD PTR type$22320[rsp], -1
  0013e	75 25		 jne	 SHORT $LN57@build_node@2
  00140	e8 00 00 00 00	 call	 PyErr_Occurred
  00145	48 85 c0	 test	 rax, rax
  00148	74 1b		 je	 SHORT $LN57@build_node@2

; 742  :                         Py_DECREF(temp);

  0014a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR temp$22324[rsp]
  0014f	e8 00 00 00 00	 call	 _Py_DecRef

; 743  :                         Py_DECREF(elem);

  00154	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  00159	e8 00 00 00 00	 call	 _Py_DecRef

; 744  :                         return 0;

  0015e	33 c0		 xor	 eax, eax
  00160	e9 9a 04 00 00	 jmp	 $LN66@build_node@2
$LN57@build_node@2:
$LN58@build_node@2:

; 745  :                     }
; 746  :                 }
; 747  :                 Py_DECREF(temp);

  00165	48 8b 4c 24 60	 mov	 rcx, QWORD PTR temp$22324[rsp]
  0016a	e8 00 00 00 00	 call	 _Py_DecRef
$LN59@build_node@2:
$LN61@build_node@2:

; 748  :             }
; 749  :         }
; 750  :         if (!ok) {

  0016f	83 7c 24 50 00	 cmp	 DWORD PTR ok$22318[rsp], 0
  00174	75 65		 jne	 SHORT $LN56@build_node@2

; 751  :             PyObject *err = Py_BuildValue("Os", elem,
; 752  :                                           "Illegal node construct.");

  00176	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@BAFIMPPI@Illegal?5node?5construct?4?$AA@
  0017d	48 8b 54 24 48	 mov	 rdx, QWORD PTR elem$22317[rsp]
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HPGKMGCF@Os?$AA@
  00189	e8 00 00 00 00	 call	 Py_BuildValue
  0018e	48 89 44 24 68	 mov	 QWORD PTR err$22335[rsp], rax

; 753  :             PyErr_SetObject(parser_error, err);

  00193	48 8b 54 24 68	 mov	 rdx, QWORD PTR err$22335[rsp]
  00198	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  0019f	e8 00 00 00 00	 call	 PyErr_SetObject
$LN55@build_node@2:

; 754  :             Py_XDECREF(err);

  001a4	48 83 7c 24 68
	00		 cmp	 QWORD PTR err$22335[rsp], 0
  001aa	74 0a		 je	 SHORT $LN52@build_node@2
  001ac	48 8b 4c 24 68	 mov	 rcx, QWORD PTR err$22335[rsp]
  001b1	e8 00 00 00 00	 call	 _Py_DecRef
$LN52@build_node@2:
  001b6	33 c0		 xor	 eax, eax
  001b8	85 c0		 test	 eax, eax
  001ba	75 e8		 jne	 SHORT $LN55@build_node@2
$LN51@build_node@2:

; 755  :             Py_XDECREF(elem);

  001bc	48 83 7c 24 48
	00		 cmp	 QWORD PTR elem$22317[rsp], 0
  001c2	74 0a		 je	 SHORT $LN48@build_node@2
  001c4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  001c9	e8 00 00 00 00	 call	 _Py_DecRef
$LN48@build_node@2:
  001ce	33 c0		 xor	 eax, eax
  001d0	85 c0		 test	 eax, eax
  001d2	75 e8		 jne	 SHORT $LN51@build_node@2

; 756  :             return (0);

  001d4	33 c0		 xor	 eax, eax
  001d6	e9 24 04 00 00	 jmp	 $LN66@build_node@2
$LN56@build_node@2:

; 757  :         }
; 758  :         if (ISTERMINAL(type)) {

  001db	81 7c 24 54 00
	01 00 00	 cmp	 DWORD PTR type$22320[rsp], 256 ; 00000100H
  001e3	0f 8d 4a 02 00
	00		 jge	 $LN47@build_node@2

; 759  :             Py_ssize_t len = PyObject_Size(elem);

  001e9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  001ee	e8 00 00 00 00	 call	 PyObject_Size
  001f3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR len$22349[rsp], rax

; 760  :             PyObject *temp;
; 761  :             const char *temp_str;
; 762  : 
; 763  :             if ((len != 2) && (len != 3)) {

  001fb	48 83 bc 24 80
	00 00 00 02	 cmp	 QWORD PTR len$22349[rsp], 2
  00204	74 1e		 je	 SHORT $LN46@build_node@2
  00206	48 83 bc 24 80
	00 00 00 03	 cmp	 QWORD PTR len$22349[rsp], 3
  0020f	74 13		 je	 SHORT $LN46@build_node@2

; 764  :                 err_string("terminal nodes must have 2 or 3 entries");

  00211	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@JBBHOFOG@terminal?5nodes?5must?5have?52?5or?53?5@
  00218	e8 00 00 00 00	 call	 err_string

; 765  :                 return 0;

  0021d	33 c0		 xor	 eax, eax
  0021f	e9 db 03 00 00	 jmp	 $LN66@build_node@2
$LN46@build_node@2:

; 766  :             }
; 767  :             temp = PySequence_GetItem(elem, 1);

  00224	ba 01 00 00 00	 mov	 edx, 1
  00229	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  0022e	e8 00 00 00 00	 call	 PySequence_GetItem
  00233	48 89 44 24 78	 mov	 QWORD PTR temp$22350[rsp], rax

; 768  :             if (temp == NULL)

  00238	48 83 7c 24 78
	00		 cmp	 QWORD PTR temp$22350[rsp], 0
  0023e	75 07		 jne	 SHORT $LN45@build_node@2

; 769  :                 return 0;

  00240	33 c0		 xor	 eax, eax
  00242	e9 b8 03 00 00	 jmp	 $LN66@build_node@2
$LN45@build_node@2:

; 770  :             if (!PyUnicode_Check(temp)) {

  00247	48 8b 44 24 78	 mov	 rax, QWORD PTR temp$22350[rsp]
  0024c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00250	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00256	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0025b	85 c0		 test	 eax, eax
  0025d	75 3b		 jne	 SHORT $LN44@build_node@2

; 771  :                 PyErr_Format(parser_error,
; 772  :                              "second item in terminal node must be a string,"
; 773  :                              " found %s",
; 774  :                              Py_TYPE(temp)->tp_name);

  0025f	48 8b 44 24 78	 mov	 rax, QWORD PTR temp$22350[rsp]
  00264	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00268	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0026c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@NEKLAEMC@second?5item?5in?5terminal?5node?5mus@
  00273	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  0027a	e8 00 00 00 00	 call	 PyErr_Format

; 775  :                 Py_DECREF(temp);

  0027f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR temp$22350[rsp]
  00284	e8 00 00 00 00	 call	 _Py_DecRef

; 776  :                 Py_DECREF(elem);

  00289	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  0028e	e8 00 00 00 00	 call	 _Py_DecRef

; 777  :                 return 0;

  00293	33 c0		 xor	 eax, eax
  00295	e9 65 03 00 00	 jmp	 $LN66@build_node@2
$LN44@build_node@2:

; 778  :             }
; 779  :             if (len == 3) {

  0029a	48 83 bc 24 80
	00 00 00 03	 cmp	 QWORD PTR len$22349[rsp], 3
  002a3	0f 85 f9 00 00
	00		 jne	 $LN43@build_node@2

; 780  :                 PyObject *o = PySequence_GetItem(elem, 2);

  002a9	ba 02 00 00 00	 mov	 edx, 2
  002ae	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  002b3	e8 00 00 00 00	 call	 PySequence_GetItem
  002b8	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR o$22363[rsp], rax

; 781  :                 if (o != NULL) {

  002c0	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR o$22363[rsp], 0
  002c9	0f 84 d3 00 00
	00		 je	 $LN42@build_node@2

; 782  :                     if (PyLong_Check(o)) {

  002cf	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR o$22363[rsp]
  002d7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002db	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002e1	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  002e6	85 c0		 test	 eax, eax
  002e8	74 63		 je	 SHORT $LN41@build_node@2

; 783  :                         int num = _PyLong_AsInt(o);

  002ea	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR o$22363[rsp]
  002f2	e8 00 00 00 00	 call	 _PyLong_AsInt
  002f7	89 84 24 90 00
	00 00		 mov	 DWORD PTR num$22368[rsp], eax

; 784  :                         if (num == -1 && PyErr_Occurred()) {

  002fe	83 bc 24 90 00
	00 00 ff	 cmp	 DWORD PTR num$22368[rsp], -1
  00306	75 32		 jne	 SHORT $LN40@build_node@2
  00308	e8 00 00 00 00	 call	 PyErr_Occurred
  0030d	48 85 c0	 test	 rax, rax
  00310	74 28		 je	 SHORT $LN40@build_node@2

; 785  :                             Py_DECREF(o);

  00312	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR o$22363[rsp]
  0031a	e8 00 00 00 00	 call	 _Py_DecRef

; 786  :                             Py_DECREF(temp);

  0031f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR temp$22350[rsp]
  00324	e8 00 00 00 00	 call	 _Py_DecRef

; 787  :                             Py_DECREF(elem);

  00329	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  0032e	e8 00 00 00 00	 call	 _Py_DecRef

; 788  :                             return 0;

  00333	33 c0		 xor	 eax, eax
  00335	e9 c5 02 00 00	 jmp	 $LN66@build_node@2
$LN40@build_node@2:

; 789  :                         }
; 790  :                         *line_num = num;

  0033a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR line_num$[rsp]
  00342	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR num$22368[rsp]
  00349	89 08		 mov	 DWORD PTR [rax], ecx

; 791  :                     }
; 792  :                     else {

  0034b	eb 48		 jmp	 SHORT $LN39@build_node@2
$LN41@build_node@2:

; 793  :                         PyErr_Format(parser_error,
; 794  :                                      "third item in terminal node must be an"
; 795  :                                      " integer, found %s",
; 796  :                                      Py_TYPE(temp)->tp_name);

  0034d	48 8b 44 24 78	 mov	 rax, QWORD PTR temp$22350[rsp]
  00352	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00356	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0035a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@NONGLHAJ@third?5item?5in?5terminal?5node?5must@
  00361	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  00368	e8 00 00 00 00	 call	 PyErr_Format

; 797  :                         Py_DECREF(o);

  0036d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR o$22363[rsp]
  00375	e8 00 00 00 00	 call	 _Py_DecRef

; 798  :                         Py_DECREF(temp);

  0037a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR temp$22350[rsp]
  0037f	e8 00 00 00 00	 call	 _Py_DecRef

; 799  :                         Py_DECREF(elem);

  00384	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  00389	e8 00 00 00 00	 call	 _Py_DecRef

; 800  :                         return 0;

  0038e	33 c0		 xor	 eax, eax
  00390	e9 6a 02 00 00	 jmp	 $LN66@build_node@2
$LN39@build_node@2:

; 801  :                     }
; 802  :                     Py_DECREF(o);

  00395	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR o$22363[rsp]
  0039d	e8 00 00 00 00	 call	 _Py_DecRef
$LN42@build_node@2:
$LN43@build_node@2:

; 803  :                 }
; 804  :             }
; 805  :             temp_str = _PyUnicode_AsStringAndSize(temp, &len);

  003a2	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR len$22349[rsp]
  003aa	48 8b 4c 24 78	 mov	 rcx, QWORD PTR temp$22350[rsp]
  003af	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize
  003b4	48 89 44 24 70	 mov	 QWORD PTR temp_str$22351[rsp], rax

; 806  :             if (temp_str == NULL) {

  003b9	48 83 7c 24 70
	00		 cmp	 QWORD PTR temp_str$22351[rsp], 0
  003bf	75 29		 jne	 SHORT $LN38@build_node@2

; 807  :                 Py_DECREF(temp);

  003c1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR temp$22350[rsp]
  003c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN37@build_node@2:

; 808  :                 Py_XDECREF(elem);

  003cb	48 83 7c 24 48
	00		 cmp	 QWORD PTR elem$22317[rsp], 0
  003d1	74 0a		 je	 SHORT $LN34@build_node@2
  003d3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  003d8	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@build_node@2:
  003dd	33 c0		 xor	 eax, eax
  003df	85 c0		 test	 eax, eax
  003e1	75 e8		 jne	 SHORT $LN37@build_node@2

; 809  :                 return 0;

  003e3	33 c0		 xor	 eax, eax
  003e5	e9 15 02 00 00	 jmp	 $LN66@build_node@2
$LN38@build_node@2:

; 810  :             }
; 811  :             strn = (char *)PyObject_MALLOC(len + 1);

  003ea	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR len$22349[rsp]
  003f2	48 ff c0	 inc	 rax
  003f5	48 8b c8	 mov	 rcx, rax
  003f8	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  003fd	48 89 44 24 58	 mov	 QWORD PTR strn$22321[rsp], rax

; 812  :             if (strn != NULL)

  00402	48 83 7c 24 58
	00		 cmp	 QWORD PTR strn$22321[rsp], 0
  00408	74 1d		 je	 SHORT $LN33@build_node@2

; 813  :                 (void) memcpy(strn, temp_str, len + 1);

  0040a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR len$22349[rsp]
  00412	48 ff c0	 inc	 rax
  00415	4c 8b c0	 mov	 r8, rax
  00418	48 8b 54 24 70	 mov	 rdx, QWORD PTR temp_str$22351[rsp]
  0041d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR strn$22321[rsp]
  00422	e8 00 00 00 00	 call	 memcpy
$LN33@build_node@2:

; 814  :             Py_DECREF(temp);

  00427	48 8b 4c 24 78	 mov	 rcx, QWORD PTR temp$22350[rsp]
  0042c	e8 00 00 00 00	 call	 _Py_DecRef
  00431	eb 7b		 jmp	 SHORT $LN32@build_node@2
$LN47@build_node@2:

; 815  :         }
; 816  :         else if (!ISNONTERMINAL(type)) {

  00433	81 7c 24 54 00
	01 00 00	 cmp	 DWORD PTR type$22320[rsp], 256 ; 00000100H
  0043b	7d 71		 jge	 SHORT $LN31@build_node@2

; 817  :             /*
; 818  :              *  It has to be one or the other; this is an error.
; 819  :              *  Raise an exception.
; 820  :              */
; 821  :             PyObject *err = Py_BuildValue("os", elem, "unknown node type.");

  0043d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@JOLKCCK@unknown?5node?5type?4?$AA@
  00444	48 8b 54 24 48	 mov	 rdx, QWORD PTR elem$22317[rsp]
  00449	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02EHCHIAMF@os?$AA@
  00450	e8 00 00 00 00	 call	 Py_BuildValue
  00455	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR err$22395[rsp], rax

; 822  :             PyErr_SetObject(parser_error, err);

  0045d	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR err$22395[rsp]
  00465	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  0046c	e8 00 00 00 00	 call	 PyErr_SetObject
$LN30@build_node@2:

; 823  :             Py_XDECREF(err);

  00471	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR err$22395[rsp], 0
  0047a	74 0d		 je	 SHORT $LN27@build_node@2
  0047c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR err$22395[rsp]
  00484	e8 00 00 00 00	 call	 _Py_DecRef
$LN27@build_node@2:
  00489	33 c0		 xor	 eax, eax
  0048b	85 c0		 test	 eax, eax
  0048d	75 e2		 jne	 SHORT $LN30@build_node@2
$LN26@build_node@2:

; 824  :             Py_XDECREF(elem);

  0048f	48 83 7c 24 48
	00		 cmp	 QWORD PTR elem$22317[rsp], 0
  00495	74 0a		 je	 SHORT $LN23@build_node@2
  00497	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  0049c	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@build_node@2:
  004a1	33 c0		 xor	 eax, eax
  004a3	85 c0		 test	 eax, eax
  004a5	75 e8		 jne	 SHORT $LN26@build_node@2

; 825  :             return (0);

  004a7	33 c0		 xor	 eax, eax
  004a9	e9 51 01 00 00	 jmp	 $LN66@build_node@2
$LN31@build_node@2:
$LN32@build_node@2:

; 826  :         }
; 827  :         err = PyNode_AddChild(root, type, strn, *line_num, 0);

  004ae	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  004b6	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR line_num$[rsp]
  004be	44 8b 08	 mov	 r9d, DWORD PTR [rax]
  004c1	4c 8b 44 24 58	 mov	 r8, QWORD PTR strn$22321[rsp]
  004c6	8b 54 24 54	 mov	 edx, DWORD PTR type$22320[rsp]
  004ca	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR root$[rsp]
  004d2	e8 00 00 00 00	 call	 PyNode_AddChild
  004d7	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax

; 828  :         if (err == E_NOMEM) {

  004db	83 7c 24 40 0f	 cmp	 DWORD PTR err$[rsp], 15
  004e0	75 2c		 jne	 SHORT $LN22@build_node@2
$LN21@build_node@2:

; 829  :             Py_XDECREF(elem);

  004e2	48 83 7c 24 48
	00		 cmp	 QWORD PTR elem$22317[rsp], 0
  004e8	74 0a		 je	 SHORT $LN18@build_node@2
  004ea	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  004ef	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@build_node@2:
  004f4	33 c0		 xor	 eax, eax
  004f6	85 c0		 test	 eax, eax
  004f8	75 e8		 jne	 SHORT $LN21@build_node@2

; 830  :             PyObject_FREE(strn);

  004fa	48 8b 4c 24 58	 mov	 rcx, QWORD PTR strn$22321[rsp]
  004ff	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 831  :             return (node *) PyErr_NoMemory();

  00504	e8 00 00 00 00	 call	 PyErr_NoMemory
  00509	e9 f1 00 00 00	 jmp	 $LN66@build_node@2
$LN22@build_node@2:

; 832  :         }
; 833  :         if (err == E_OVERFLOW) {

  0050e	83 7c 24 40 13	 cmp	 DWORD PTR err$[rsp], 19
  00513	75 3c		 jne	 SHORT $LN17@build_node@2
$LN16@build_node@2:

; 834  :             Py_XDECREF(elem);

  00515	48 83 7c 24 48
	00		 cmp	 QWORD PTR elem$22317[rsp], 0
  0051b	74 0a		 je	 SHORT $LN13@build_node@2
  0051d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  00522	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@build_node@2:
  00527	33 c0		 xor	 eax, eax
  00529	85 c0		 test	 eax, eax
  0052b	75 e8		 jne	 SHORT $LN16@build_node@2

; 835  :             PyObject_FREE(strn);

  0052d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR strn$22321[rsp]
  00532	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 836  :             PyErr_SetString(PyExc_ValueError,
; 837  :                             "unsupported number of child nodes");

  00537	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@CHNLNIPM@unsupported?5number?5of?5child?5node@
  0053e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00545	e8 00 00 00 00	 call	 PyErr_SetString

; 838  :             return NULL;

  0054a	33 c0		 xor	 eax, eax
  0054c	e9 ae 00 00 00	 jmp	 $LN66@build_node@2
$LN17@build_node@2:

; 839  :         }
; 840  : 
; 841  :         if (ISNONTERMINAL(type)) {

  00551	81 7c 24 54 00
	01 00 00	 cmp	 DWORD PTR type$22320[rsp], 256 ; 00000100H
  00559	7c 62		 jl	 SHORT $LN12@build_node@2

; 842  :             node* new_child = CHILD(root, i - 1);

  0055b	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00560	48 ff c8	 dec	 rax
  00563	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00567	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR root$[rsp]
  0056f	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00573	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR new_child$22424[rsp], rax

; 843  : 
; 844  :             if (new_child != build_node_children(elem, new_child, line_num)) {

  0057b	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR line_num$[rsp]
  00583	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR new_child$22424[rsp]
  0058b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  00590	e8 00 00 00 00	 call	 build_node_children
  00595	48 39 84 24 a0
	00 00 00	 cmp	 QWORD PTR new_child$22424[rsp], rax
  0059d	74 1c		 je	 SHORT $LN11@build_node@2
$LN10@build_node@2:

; 845  :                 Py_XDECREF(elem);

  0059f	48 83 7c 24 48
	00		 cmp	 QWORD PTR elem$22317[rsp], 0
  005a5	74 0a		 je	 SHORT $LN7@build_node@2
  005a7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  005ac	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@build_node@2:
  005b1	33 c0		 xor	 eax, eax
  005b3	85 c0		 test	 eax, eax
  005b5	75 e8		 jne	 SHORT $LN10@build_node@2

; 846  :                 return (0);

  005b7	33 c0		 xor	 eax, eax
  005b9	eb 44		 jmp	 SHORT $LN66@build_node@2
$LN11@build_node@2:

; 847  :             }

  005bb	eb 1d		 jmp	 SHORT $LN6@build_node@2
$LN12@build_node@2:

; 848  :         }
; 849  :         else if (type == NEWLINE) {     /* It's true:  we increment the     */

  005bd	83 7c 24 54 04	 cmp	 DWORD PTR type$22320[rsp], 4
  005c2	75 16		 jne	 SHORT $LN5@build_node@2

; 850  :             ++(*line_num);              /* line number *after* the newline! */

  005c4	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR line_num$[rsp]
  005cc	8b 00		 mov	 eax, DWORD PTR [rax]
  005ce	ff c0		 inc	 eax
  005d0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR line_num$[rsp]
  005d8	89 01		 mov	 DWORD PTR [rcx], eax
$LN5@build_node@2:
$LN6@build_node@2:
$LN4@build_node@2:

; 851  :         }
; 852  :         Py_XDECREF(elem);

  005da	48 83 7c 24 48
	00		 cmp	 QWORD PTR elem$22317[rsp], 0
  005e0	74 0a		 je	 SHORT $LN1@build_node@2
  005e2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elem$22317[rsp]
  005e7	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@build_node@2:
  005ec	33 c0		 xor	 eax, eax
  005ee	85 c0		 test	 eax, eax
  005f0	75 e8		 jne	 SHORT $LN4@build_node@2

; 853  :     }

  005f2	e9 3c fa ff ff	 jmp	 $LN64@build_node@2
$LN63@build_node@2:

; 854  :     return root;

  005f7	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR root$[rsp]
$LN66@build_node@2:

; 855  : }

  005ff	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00606	c3		 ret	 0
build_node_children ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@IMEBFCII@could?5not?5validate?5expression?5tu@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_expr_tree DD imagerel validate_expr_tree
	DD	imagerel validate_expr_tree+61
	DD	imagerel $unwind$validate_expr_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_expr_tree DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CE@IMEBFCII@could?5not?5validate?5expression?5tu@
CONST	SEGMENT
??_C@_0CE@IMEBFCII@could?5not?5validate?5expression?5tu@ DB 'could not va'
	DB	'lidate expression tuple', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_expr_tree
_TEXT	SEGMENT
res$ = 32
tree$ = 64
validate_expr_tree PROC					; COMDAT

; 3202 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3203 :     int res = validate_eval_input(tree);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0000e	e8 00 00 00 00	 call	 validate_eval_input
  00013	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3204 : 
; 3205 :     if (!res && !PyErr_Occurred())

  00017	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0001c	75 16		 jne	 SHORT $LN1@validate_e
  0001e	e8 00 00 00 00	 call	 PyErr_Occurred
  00023	48 85 c0	 test	 rax, rax
  00026	75 0c		 jne	 SHORT $LN1@validate_e

; 3206 :         err_string("could not validate expression tuple");

  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@IMEBFCII@could?5not?5validate?5expression?5tu@
  0002f	e8 00 00 00 00	 call	 err_string
$LN1@validate_e:

; 3207 : 
; 3208 :     return (res);

  00034	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 3209 : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
validate_expr_tree ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_eval_input DD imagerel validate_eval_input
	DD	imagerel validate_eval_input+211
	DD	imagerel $unwind$validate_eval_input
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_eval_input DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_eval_input
_TEXT	SEGMENT
res$ = 32
nch$ = 36
pos$ = 40
tv83 = 44
tree$ = 64
validate_eval_input PROC				; COMDAT

; 2994 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2995 :     int pos;
; 2996 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2997 :     int res = (validate_ntype(tree, eval_input)
; 2998 :                && (nch >= 2)
; 2999 :                && validate_testlist(CHILD(tree, 0))
; 3000 :                && validate_ntype(CHILD(tree, nch - 1), ENDMARKER));

  00015	ba 02 01 00 00	 mov	 edx, 258		; 00000102H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 46		 je	 SHORT $LN6@validate_e@2
  00028	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  0002d	7c 3f		 jl	 SHORT $LN6@validate_e@2
  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00034	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00038	e8 00 00 00 00	 call	 validate_testlist
  0003d	85 c0		 test	 eax, eax
  0003f	74 2d		 je	 SHORT $LN6@validate_e@2
  00041	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00045	ff c8		 dec	 eax
  00047	48 98		 cdqe
  00049	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00052	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00056	33 d2		 xor	 edx, edx
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 validate_ntype
  00060	85 c0		 test	 eax, eax
  00062	74 0a		 je	 SHORT $LN6@validate_e@2
  00064	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
  0006c	eb 08		 jmp	 SHORT $LN7@validate_e@2
$LN6@validate_e@2:
  0006e	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN7@validate_e@2:
  00076	8b 44 24 2c	 mov	 eax, DWORD PTR tv83[rsp]
  0007a	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3001 : 
; 3002 :     for (pos = 1; res && (pos < (nch - 1)); ++pos)

  0007e	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR pos$[rsp], 1
  00086	eb 0a		 jmp	 SHORT $LN3@validate_e@2
$LN2@validate_e@2:
  00088	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  0008c	ff c0		 inc	 eax
  0008e	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax
$LN3@validate_e@2:
  00092	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00097	74 31		 je	 SHORT $LN1@validate_e@2
  00099	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0009d	ff c8		 dec	 eax
  0009f	39 44 24 28	 cmp	 DWORD PTR pos$[rsp], eax
  000a3	7d 25		 jge	 SHORT $LN1@validate_e@2

; 3003 :         res = validate_ntype(CHILD(tree, pos), NEWLINE);

  000a5	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  000aa	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000ae	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000b3	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000b7	ba 04 00 00 00	 mov	 edx, 4
  000bc	48 8b c8	 mov	 rcx, rax
  000bf	e8 00 00 00 00	 call	 validate_ntype
  000c4	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000c8	eb be		 jmp	 SHORT $LN2@validate_e@2
$LN1@validate_e@2:

; 3004 : 
; 3005 :     return (res);

  000ca	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 3006 : }

  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
validate_eval_input ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@BCHGMPMP@Expected?5node?5type?5?$CFd?0?5got?5?$CFd?4?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_ntype DD imagerel validate_ntype
	DD	imagerel validate_ntype+76
	DD	imagerel $unwind$validate_ntype
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_ntype DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT ??_C@_0BP@BCHGMPMP@Expected?5node?5type?5?$CFd?0?5got?5?$CFd?4?$AA@
CONST	SEGMENT
??_C@_0BP@BCHGMPMP@Expected?5node?5type?5?$CFd?0?5got?5?$CFd?4?$AA@ DB 'E'
	DB	'xpected node type %d, got %d.', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_ntype
_TEXT	SEGMENT
n$ = 48
t$ = 56
validate_ntype PROC					; COMDAT

; 1000 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1001 :     if (TYPE(n) != t) {

  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00012	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00015	3b 44 24 38	 cmp	 eax, DWORD PTR t$[rsp]
  00019	74 27		 je	 SHORT $LN1@validate_n

; 1002 :         PyErr_Format(parser_error, "Expected node type %d, got %d.",
; 1003 :                      t, TYPE(n));

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00020	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00023	44 8b c8	 mov	 r9d, eax
  00026	44 8b 44 24 38	 mov	 r8d, DWORD PTR t$[rsp]
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@BCHGMPMP@Expected?5node?5type?5?$CFd?0?5got?5?$CFd?4?$AA@
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  00039	e8 00 00 00 00	 call	 PyErr_Format

; 1004 :         return 0;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 05		 jmp	 SHORT $LN2@validate_n
$LN1@validate_n:

; 1005 :     }
; 1006 :     return 1;

  00042	b8 01 00 00 00	 mov	 eax, 1
$LN2@validate_n:

; 1007 : }

  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	c3		 ret	 0
validate_ntype ENDP
_TEXT	ENDS
PUBLIC	??_C@_08GGIJBKAI@testlist?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_testlist DD imagerel validate_testlist
	DD	imagerel validate_testlist+43
	DD	imagerel $unwind$validate_testlist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_testlist DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_08GGIJBKAI@testlist?$AA@
CONST	SEGMENT
??_C@_08GGIJBKAI@testlist?$AA@ DB 'testlist', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_testlist
_TEXT	SEGMENT
tree$ = 48
validate_testlist PROC					; COMDAT

; 1206 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1207 :     return (validate_repeating_list(tree, testlist,
; 1208 :                                     validate_test, "testlist"));

  00009	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08GGIJBKAI@testlist?$AA@
  00010	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:validate_test
  00017	ba 47 01 00 00	 mov	 edx, 327		; 00000147H
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tree$[rsp]
  00021	e8 00 00 00 00	 call	 validate_repeating_list

; 1209 : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
validate_testlist ENDP
_TEXT	ENDS
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_repeating_list DD imagerel validate_repeating_list
	DD	imagerel validate_repeating_list+382
	DD	imagerel $unwind$validate_repeating_list
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_repeating_list DD 011701H
	DD	08217H
xdata	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_repeating_list
_TEXT	SEGMENT
res$ = 32
nch$ = 36
pos$22751 = 40
tv74 = 44
tv146 = 48
tree$ = 80
ntype$ = 88
vfunc$ = 96
name$ = 104
validate_repeating_list PROC				; COMDAT

; 1048 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1049 :     int nch = NCH(tree);

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0001c	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0001f	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1050 :     int res = (nch && validate_ntype(tree, ntype)
; 1051 :                && vfunc(CHILD(tree, 0)));

  00023	83 7c 24 24 00	 cmp	 DWORD PTR nch$[rsp], 0
  00028	74 2d		 je	 SHORT $LN10@validate_r
  0002a	8b 54 24 58	 mov	 edx, DWORD PTR ntype$[rsp]
  0002e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00033	e8 00 00 00 00	 call	 validate_ntype
  00038	85 c0		 test	 eax, eax
  0003a	74 1b		 je	 SHORT $LN10@validate_r
  0003c	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00041	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00045	ff 54 24 60	 call	 QWORD PTR vfunc$[rsp]
  00049	85 c0		 test	 eax, eax
  0004b	74 0a		 je	 SHORT $LN10@validate_r
  0004d	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00055	eb 08		 jmp	 SHORT $LN11@validate_r
$LN10@validate_r:
  00057	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN11@validate_r:
  0005f	8b 44 24 2c	 mov	 eax, DWORD PTR tv74[rsp]
  00063	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1052 : 
; 1053 :     if (!res && !PyErr_Occurred())

  00067	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0006c	75 23		 jne	 SHORT $LN7@validate_r
  0006e	e8 00 00 00 00	 call	 PyErr_Occurred
  00073	48 85 c0	 test	 rax, rax
  00076	75 19		 jne	 SHORT $LN7@validate_r

; 1054 :         (void) validate_numnodes(tree, 1, name);

  00078	4c 8b 44 24 68	 mov	 r8, QWORD PTR name$[rsp]
  0007d	ba 01 00 00 00	 mov	 edx, 1
  00082	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00087	e8 00 00 00 00	 call	 validate_numnodes

; 1055 :     else {

  0008c	e9 e4 00 00 00	 jmp	 $LN6@validate_r
$LN7@validate_r:

; 1056 :         if (is_even(nch))

  00091	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00095	83 e0 01	 and	 eax, 1
  00098	85 c0		 test	 eax, eax
  0009a	75 34		 jne	 SHORT $LN5@validate_r

; 1057 :             res = validate_comma(CHILD(tree, --nch));

  0009c	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000a0	ff c8		 dec	 eax
  000a2	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax
  000a6	48 63 44 24 24	 movsxd	 rax, DWORD PTR nch$[rsp]
  000ab	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000af	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000b4	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  000bf	ba 0c 00 00 00	 mov	 edx, 12
  000c4	48 8b c8	 mov	 rcx, rax
  000c7	e8 00 00 00 00	 call	 validate_terminal
  000cc	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN5@validate_r:

; 1058 :         if (res && nch > 1) {

  000d0	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000d5	0f 84 9a 00 00
	00		 je	 $LN4@validate_r
  000db	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  000e0	0f 8e 8f 00 00
	00		 jle	 $LN4@validate_r

; 1059 :             int pos = 1;

  000e6	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR pos$22751[rsp], 1

; 1060 :             for ( ; res && pos < nch; pos += 2)

  000ee	eb 0b		 jmp	 SHORT $LN3@validate_r
$LN2@validate_r:
  000f0	8b 44 24 28	 mov	 eax, DWORD PTR pos$22751[rsp]
  000f4	83 c0 02	 add	 eax, 2
  000f7	89 44 24 28	 mov	 DWORD PTR pos$22751[rsp], eax
$LN3@validate_r:
  000fb	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00100	74 73		 je	 SHORT $LN1@validate_r
  00102	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00106	39 44 24 28	 cmp	 DWORD PTR pos$22751[rsp], eax
  0010a	7d 69		 jge	 SHORT $LN1@validate_r

; 1061 :                 res = (validate_comma(CHILD(tree, pos))
; 1062 :                        && vfunc(CHILD(tree, pos + 1)));

  0010c	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$22751[rsp]
  00111	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00115	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0011a	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0011e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  00125	ba 0c 00 00 00	 mov	 edx, 12
  0012a	48 8b c8	 mov	 rcx, rax
  0012d	e8 00 00 00 00	 call	 validate_terminal
  00132	85 c0		 test	 eax, eax
  00134	74 2a		 je	 SHORT $LN12@validate_r
  00136	8b 44 24 28	 mov	 eax, DWORD PTR pos$22751[rsp]
  0013a	ff c0		 inc	 eax
  0013c	48 98		 cdqe
  0013e	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00142	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00147	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0014b	48 8b c8	 mov	 rcx, rax
  0014e	ff 54 24 60	 call	 QWORD PTR vfunc$[rsp]
  00152	85 c0		 test	 eax, eax
  00154	74 0a		 je	 SHORT $LN12@validate_r
  00156	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv146[rsp], 1
  0015e	eb 08		 jmp	 SHORT $LN13@validate_r
$LN12@validate_r:
  00160	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv146[rsp], 0
$LN13@validate_r:
  00168	8b 44 24 30	 mov	 eax, DWORD PTR tv146[rsp]
  0016c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00170	e9 7b ff ff ff	 jmp	 $LN2@validate_r
$LN1@validate_r:
$LN4@validate_r:
$LN6@validate_r:

; 1063 :         }
; 1064 :     }
; 1065 :     return (res);

  00175	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1066 : }

  00179	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0017d	c3		 ret	 0
validate_repeating_list ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@BOIMMDDD@Illegal?5number?5of?5children?5for?5?$CF@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_numnodes DD imagerel validate_numnodes
	DD	imagerel validate_numnodes+70
	DD	imagerel $unwind$validate_numnodes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_numnodes DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT ??_C@_0CI@BOIMMDDD@Illegal?5number?5of?5children?5for?5?$CF@
CONST	SEGMENT
??_C@_0CI@BOIMMDDD@Illegal?5number?5of?5children?5for?5?$CF@ DB 'Illegal '
	DB	'number of children for %s node.', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_numnodes
_TEXT	SEGMENT
n$ = 48
num$ = 56
name$ = 64
validate_numnodes PROC					; COMDAT

; 1019 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1020 :     if (NCH(n) != num) {

  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00017	8b 4c 24 38	 mov	 ecx, DWORD PTR num$[rsp]
  0001b	39 48 18	 cmp	 DWORD PTR [rax+24], ecx
  0001e	74 1c		 je	 SHORT $LN1@validate_n@2

; 1021 :         PyErr_Format(parser_error,
; 1022 :                      "Illegal number of children for %s node.", name);

  00020	4c 8b 44 24 40	 mov	 r8, QWORD PTR name$[rsp]
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@BOIMMDDD@Illegal?5number?5of?5children?5for?5?$CF@
  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  00033	e8 00 00 00 00	 call	 PyErr_Format

; 1023 :         return 0;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 05		 jmp	 SHORT $LN2@validate_n@2
$LN1@validate_n@2:

; 1024 :     }
; 1025 :     return 1;

  0003c	b8 01 00 00 00	 mov	 eax, 1
$LN2@validate_n@2:

; 1026 : }

  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
validate_numnodes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@JKOOGBNF@Illegal?5terminal?3?5expected?5?$CC?$CFs?$CC?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_terminal DD imagerel validate_terminal
	DD	imagerel validate_terminal+143
	DD	imagerel $unwind$validate_terminal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_terminal DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT ??_C@_0CA@JKOOGBNF@Illegal?5terminal?3?5expected?5?$CC?$CFs?$CC?$AA@
CONST	SEGMENT
??_C@_0CA@JKOOGBNF@Illegal?5terminal?3?5expected?5?$CC?$CFs?$CC?$AA@ DB 'I'
	DB	'llegal terminal: expected "%s"', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_terminal
_TEXT	SEGMENT
res$ = 32
tv74 = 36
terminal$ = 64
type$ = 72
string$ = 80
validate_terminal PROC					; COMDAT

; 1031 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1032 :     int res = (validate_ntype(terminal, type)
; 1033 :                && ((string == 0) || (strcmp(string, STR(terminal)) == 0)));

  00012	8b 54 24 48	 mov	 edx, DWORD PTR type$[rsp]
  00016	48 8b 4c 24 40	 mov	 rcx, QWORD PTR terminal$[rsp]
  0001b	e8 00 00 00 00	 call	 validate_ntype
  00020	85 c0		 test	 eax, eax
  00022	74 29		 je	 SHORT $LN5@validate_t
  00024	48 83 7c 24 50
	00		 cmp	 QWORD PTR string$[rsp], 0
  0002a	74 17		 je	 SHORT $LN4@validate_t
  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR terminal$[rsp]
  00031	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00035	48 8b 4c 24 50	 mov	 rcx, QWORD PTR string$[rsp]
  0003a	e8 00 00 00 00	 call	 strcmp
  0003f	85 c0		 test	 eax, eax
  00041	75 0a		 jne	 SHORT $LN5@validate_t
$LN4@validate_t:
  00043	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0004b	eb 08		 jmp	 SHORT $LN6@validate_t
$LN5@validate_t:
  0004d	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN6@validate_t:
  00055	8b 44 24 24	 mov	 eax, DWORD PTR tv74[rsp]
  00059	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1034 : 
; 1035 :     if (!res && !PyErr_Occurred()) {

  0005d	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00062	75 22		 jne	 SHORT $LN1@validate_t
  00064	e8 00 00 00 00	 call	 PyErr_Occurred
  00069	48 85 c0	 test	 rax, rax
  0006c	75 18		 jne	 SHORT $LN1@validate_t

; 1036 :         PyErr_Format(parser_error,
; 1037 :                      "Illegal terminal: expected \"%s\"", string);

  0006e	4c 8b 44 24 50	 mov	 r8, QWORD PTR string$[rsp]
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@JKOOGBNF@Illegal?5terminal?3?5expected?5?$CC?$CFs?$CC?$AA@
  0007a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  00081	e8 00 00 00 00	 call	 PyErr_Format
$LN1@validate_t:

; 1038 :     }
; 1039 :     return (res);

  00086	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1040 : }

  0008a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008e	c3		 ret	 0
validate_terminal ENDP
_TEXT	ENDS
PUBLIC	??_C@_04FHMCPBIP@else?$AA@			; `string'
PUBLIC	??_C@_02HEBPBKGD@if?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_test DD imagerel validate_test
	DD	imagerel validate_test+383
	DD	imagerel $unwind$validate_test
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_test DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_04FHMCPBIP@else?$AA@
CONST	SEGMENT
??_C@_04FHMCPBIP@else?$AA@ DB 'else', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEBPBKGD@if?$AA@
CONST	SEGMENT
??_C@_02HEBPBKGD@if?$AA@ DB 'if', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_test
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv71 = 40
tv82 = 44
tv146 = 48
tree$ = 80
validate_test PROC					; COMDAT

; 2073 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2074 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2075 :     int res = validate_ntype(tree, test) && is_odd(nch);

  00015	ba 2e 01 00 00	 mov	 edx, 302		; 0000012eH
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 16		 je	 SHORT $LN6@validate_t@2
  00028	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 0a		 jne	 SHORT $LN6@validate_t@2
  00034	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0003c	eb 08		 jmp	 SHORT $LN7@validate_t@2
$LN6@validate_t@2:
  0003e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN7@validate_t@2:
  00046	8b 44 24 28	 mov	 eax, DWORD PTR tv71[rsp]
  0004a	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2076 : 
; 2077 :     if (res && (TYPE(CHILD(tree, 0)) == lambdef))

  0004e	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00053	74 4b		 je	 SHORT $LN3@validate_t@2
  00055	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0005a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005e	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00061	3d 30 01 00 00	 cmp	 eax, 304		; 00000130H
  00066	75 38		 jne	 SHORT $LN3@validate_t@2

; 2078 :         res = ((nch == 1)
; 2079 :                && validate_lambdef(CHILD(tree, 0)));

  00068	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0006d	75 1c		 jne	 SHORT $LN8@validate_t@2
  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00074	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00078	e8 00 00 00 00	 call	 validate_lambdef
  0007d	85 c0		 test	 eax, eax
  0007f	74 0a		 je	 SHORT $LN8@validate_t@2
  00081	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
  00089	eb 08		 jmp	 SHORT $LN9@validate_t@2
$LN8@validate_t@2:
  0008b	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN9@validate_t@2:
  00093	8b 44 24 2c	 mov	 eax, DWORD PTR tv82[rsp]
  00097	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  0009b	e9 d6 00 00 00	 jmp	 $LN2@validate_t@2
$LN3@validate_t@2:

; 2080 :     else if (res) {

  000a0	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000a5	0f 84 cb 00 00
	00		 je	 $LN1@validate_t@2

; 2081 :         res = validate_or_test(CHILD(tree, 0));

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000b0	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  000b4	e8 00 00 00 00	 call	 validate_or_test
  000b9	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2082 :         res = (res && (nch == 1 || (nch == 5 &&
; 2083 :             validate_name(CHILD(tree, 1), "if") &&
; 2084 :             validate_or_test(CHILD(tree, 2)) &&
; 2085 :             validate_name(CHILD(tree, 3), "else") &&
; 2086 :             validate_test(CHILD(tree, 4)))));

  000bd	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000c2	0f 84 9e 00 00
	00		 je	 $LN12@validate_t@2
  000c8	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  000cd	0f 84 89 00 00
	00		 je	 $LN11@validate_t@2
  000d3	83 7c 24 24 05	 cmp	 DWORD PTR nch$[rsp], 5
  000d8	0f 85 88 00 00
	00		 jne	 $LN10@validate_t@2
  000de	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000e3	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000e7	48 83 c0 28	 add	 rax, 40			; 00000028H
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HEBPBKGD@if?$AA@
  000f2	ba 01 00 00 00	 mov	 edx, 1
  000f7	48 8b c8	 mov	 rcx, rax
  000fa	e8 00 00 00 00	 call	 validate_terminal
  000ff	85 c0		 test	 eax, eax
  00101	74 63		 je	 SHORT $LN10@validate_t@2
  00103	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00108	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0010c	48 83 c0 50	 add	 rax, 80			; 00000050H
  00110	48 8b c8	 mov	 rcx, rax
  00113	e8 00 00 00 00	 call	 validate_or_test
  00118	85 c0		 test	 eax, eax
  0011a	74 4a		 je	 SHORT $LN10@validate_t@2
  0011c	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00121	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00125	48 83 c0 78	 add	 rax, 120		; 00000078H
  00129	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04FHMCPBIP@else?$AA@
  00130	ba 01 00 00 00	 mov	 edx, 1
  00135	48 8b c8	 mov	 rcx, rax
  00138	e8 00 00 00 00	 call	 validate_terminal
  0013d	85 c0		 test	 eax, eax
  0013f	74 25		 je	 SHORT $LN10@validate_t@2
  00141	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00146	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0014a	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00150	48 8b c8	 mov	 rcx, rax
  00153	e8 00 00 00 00	 call	 validate_test
  00158	85 c0		 test	 eax, eax
  0015a	74 0a		 je	 SHORT $LN12@validate_t@2
$LN11@validate_t@2:
  0015c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv146[rsp], 1
  00164	eb 08		 jmp	 SHORT $LN13@validate_t@2
$LN12@validate_t@2:
$LN10@validate_t@2:
  00166	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv146[rsp], 0
$LN13@validate_t@2:
  0016e	8b 44 24 30	 mov	 eax, DWORD PTR tv146[rsp]
  00172	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_t@2:
$LN2@validate_t@2:

; 2087 :     }
; 2088 :     return (res);

  00176	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2089 : }

  0017a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0017e	c3		 ret	 0
validate_test ENDP
_TEXT	ENDS
PUBLIC	??_C@_02FODMLBIE@or?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_or_test DD imagerel validate_or_test
	DD	imagerel validate_or_test+260
	DD	imagerel $unwind$validate_or_test
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_or_test DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_02FODMLBIE@or?$AA@
CONST	SEGMENT
??_C@_02FODMLBIE@or?$AA@ DB 'or', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_or_test
_TEXT	SEGMENT
res$ = 32
nch$ = 36
pos$23270 = 40
tv71 = 44
tv128 = 48
tree$ = 80
validate_or_test PROC					; COMDAT

; 2107 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2108 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2109 :     int res = validate_ntype(tree, or_test) && is_odd(nch);

  00015	ba 32 01 00 00	 mov	 edx, 306		; 00000132H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 16		 je	 SHORT $LN7@validate_o
  00028	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 0a		 jne	 SHORT $LN7@validate_o
  00034	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0003c	eb 08		 jmp	 SHORT $LN8@validate_o
$LN7@validate_o:
  0003e	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN8@validate_o:
  00046	8b 44 24 2c	 mov	 eax, DWORD PTR tv71[rsp]
  0004a	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2110 : 
; 2111 :     if (res) {

  0004e	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00053	0f 84 a2 00 00
	00		 je	 $LN4@validate_o

; 2112 :         int pos;
; 2113 :         res = validate_and_test(CHILD(tree, 0));

  00059	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0005e	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00062	e8 00 00 00 00	 call	 validate_and_test
  00067	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2114 :         for (pos = 1; res && (pos < nch); pos += 2)

  0006b	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR pos$23270[rsp], 1
  00073	eb 0b		 jmp	 SHORT $LN3@validate_o
$LN2@validate_o:
  00075	8b 44 24 28	 mov	 eax, DWORD PTR pos$23270[rsp]
  00079	83 c0 02	 add	 eax, 2
  0007c	89 44 24 28	 mov	 DWORD PTR pos$23270[rsp], eax
$LN3@validate_o:
  00080	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00085	74 74		 je	 SHORT $LN1@validate_o
  00087	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0008b	39 44 24 28	 cmp	 DWORD PTR pos$23270[rsp], eax
  0008f	7d 6a		 jge	 SHORT $LN1@validate_o

; 2115 :             res = (validate_name(CHILD(tree, pos), "or")
; 2116 :                    && validate_and_test(CHILD(tree, pos + 1)));

  00091	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$23270[rsp]
  00096	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0009a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0009f	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000a3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FODMLBIE@or?$AA@
  000aa	ba 01 00 00 00	 mov	 edx, 1
  000af	48 8b c8	 mov	 rcx, rax
  000b2	e8 00 00 00 00	 call	 validate_terminal
  000b7	85 c0		 test	 eax, eax
  000b9	74 2b		 je	 SHORT $LN9@validate_o
  000bb	8b 44 24 28	 mov	 eax, DWORD PTR pos$23270[rsp]
  000bf	ff c0		 inc	 eax
  000c1	48 98		 cdqe
  000c3	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000c7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000cc	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000d0	48 8b c8	 mov	 rcx, rax
  000d3	e8 00 00 00 00	 call	 validate_and_test
  000d8	85 c0		 test	 eax, eax
  000da	74 0a		 je	 SHORT $LN9@validate_o
  000dc	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv128[rsp], 1
  000e4	eb 08		 jmp	 SHORT $LN10@validate_o
$LN9@validate_o:
  000e6	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN10@validate_o:
  000ee	8b 44 24 30	 mov	 eax, DWORD PTR tv128[rsp]
  000f2	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000f6	e9 7a ff ff ff	 jmp	 $LN2@validate_o
$LN1@validate_o:
$LN4@validate_o:

; 2117 :     }
; 2118 :     return (res);

  000fb	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2119 : }

  000ff	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00103	c3		 ret	 0
validate_or_test ENDP
_TEXT	ENDS
PUBLIC	??_C@_03BOPJPIAM@and?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_and_test DD imagerel validate_and_test
	DD	imagerel validate_and_test+231
	DD	imagerel $unwind$validate_and_test
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_and_test DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_03BOPJPIAM@and?$AA@
CONST	SEGMENT
??_C@_03BOPJPIAM@and?$AA@ DB 'and', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_and_test
_TEXT	SEGMENT
res$ = 32
nch$ = 36
pos$ = 40
tv75 = 44
tv92 = 48
tree$ = 80
validate_and_test PROC					; COMDAT

; 2124 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2125 :     int pos;
; 2126 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2127 :     int res = (validate_ntype(tree, and_test)
; 2128 :                && is_odd(nch)
; 2129 :                && validate_not_test(CHILD(tree, 0)));

  00015	ba 33 01 00 00	 mov	 edx, 307		; 00000133H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 28		 je	 SHORT $LN6@validate_a
  00028	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 1c		 jne	 SHORT $LN6@validate_a
  00034	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00039	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0003d	e8 00 00 00 00	 call	 validate_not_test
  00042	85 c0		 test	 eax, eax
  00044	74 0a		 je	 SHORT $LN6@validate_a
  00046	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  0004e	eb 08		 jmp	 SHORT $LN7@validate_a
$LN6@validate_a:
  00050	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN7@validate_a:
  00058	8b 44 24 2c	 mov	 eax, DWORD PTR tv75[rsp]
  0005c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2130 : 
; 2131 :     for (pos = 1; res && (pos < nch); pos += 2)

  00060	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR pos$[rsp], 1
  00068	eb 0b		 jmp	 SHORT $LN3@validate_a
$LN2@validate_a:
  0006a	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  0006e	83 c0 02	 add	 eax, 2
  00071	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax
$LN3@validate_a:
  00075	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0007a	74 62		 je	 SHORT $LN1@validate_a
  0007c	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00080	39 44 24 28	 cmp	 DWORD PTR pos$[rsp], eax
  00084	7d 58		 jge	 SHORT $LN1@validate_a

; 2132 :         res = (validate_name(CHILD(tree, pos), "and")
; 2133 :                && validate_not_test(CHILD(tree, 0)));

  00086	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  0008b	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0008f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00094	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00098	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03BOPJPIAM@and?$AA@
  0009f	ba 01 00 00 00	 mov	 edx, 1
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	e8 00 00 00 00	 call	 validate_terminal
  000ac	85 c0		 test	 eax, eax
  000ae	74 1c		 je	 SHORT $LN8@validate_a
  000b0	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000b5	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  000b9	e8 00 00 00 00	 call	 validate_not_test
  000be	85 c0		 test	 eax, eax
  000c0	74 0a		 je	 SHORT $LN8@validate_a
  000c2	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  000ca	eb 08		 jmp	 SHORT $LN9@validate_a
$LN8@validate_a:
  000cc	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN9@validate_a:
  000d4	8b 44 24 30	 mov	 eax, DWORD PTR tv92[rsp]
  000d8	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000dc	eb 8c		 jmp	 SHORT $LN2@validate_a
$LN1@validate_a:

; 2134 : 
; 2135 :     return (res);

  000de	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2136 : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
validate_and_test ENDP
_TEXT	ENDS
PUBLIC	??_C@_03NJKJADM@not?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_not_test DD imagerel validate_not_test
	DD	imagerel validate_not_test+211
	DD	imagerel $unwind$validate_not_test
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_not_test DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_03NJKJADM@not?$AA@
CONST	SEGMENT
??_C@_03NJKJADM@not?$AA@ DB 'not', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_not_test
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv71 = 40
tv85 = 44
tree$ = 64
validate_not_test PROC					; COMDAT

; 2141 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2142 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2143 :     int res = validate_ntype(tree, not_test) && ((nch == 1) || (nch == 2));

  00015	ba 34 01 00 00	 mov	 edx, 308		; 00000134H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 18		 je	 SHORT $LN8@validate_n@3
  00028	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0002d	74 07		 je	 SHORT $LN7@validate_n@3
  0002f	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  00034	75 0a		 jne	 SHORT $LN8@validate_n@3
$LN7@validate_n@3:
  00036	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0003e	eb 08		 jmp	 SHORT $LN9@validate_n@3
$LN8@validate_n@3:
  00040	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN9@validate_n@3:
  00048	8b 44 24 28	 mov	 eax, DWORD PTR tv71[rsp]
  0004c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2144 : 
; 2145 :     if (res) {

  00050	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00055	74 73		 je	 SHORT $LN4@validate_n@3

; 2146 :         if (nch == 2)

  00057	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  0005c	75 53		 jne	 SHORT $LN3@validate_n@3

; 2147 :             res = (validate_name(CHILD(tree, 0), "not")
; 2148 :                    && validate_not_test(CHILD(tree, 1)));

  0005e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03NJKJADM@not?$AA@
  00065	ba 01 00 00 00	 mov	 edx, 1
  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0006f	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00073	e8 00 00 00 00	 call	 validate_terminal
  00078	85 c0		 test	 eax, eax
  0007a	74 23		 je	 SHORT $LN10@validate_n@3
  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00081	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00085	48 83 c0 28	 add	 rax, 40			; 00000028H
  00089	48 8b c8	 mov	 rcx, rax
  0008c	e8 00 00 00 00	 call	 validate_not_test
  00091	85 c0		 test	 eax, eax
  00093	74 0a		 je	 SHORT $LN10@validate_n@3
  00095	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv85[rsp], 1
  0009d	eb 08		 jmp	 SHORT $LN11@validate_n@3
$LN10@validate_n@3:
  0009f	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
$LN11@validate_n@3:
  000a7	8b 44 24 2c	 mov	 eax, DWORD PTR tv85[rsp]
  000ab	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000af	eb 19		 jmp	 SHORT $LN2@validate_n@3
$LN3@validate_n@3:

; 2149 :         else if (nch == 1)

  000b1	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  000b6	75 12		 jne	 SHORT $LN1@validate_n@3

; 2150 :             res = validate_comparison(CHILD(tree, 0));

  000b8	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000bd	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  000c1	e8 00 00 00 00	 call	 validate_comparison
  000c6	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_n@3:
$LN2@validate_n@3:
$LN4@validate_n@3:

; 2151 :     }
; 2152 :     return (res);

  000ca	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2153 : }

  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
validate_not_test ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_comparison DD imagerel validate_comparison
	DD	imagerel validate_comparison+234
	DD	imagerel $unwind$validate_comparison
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_comparison DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_comparison
_TEXT	SEGMENT
res$ = 32
nch$ = 36
pos$ = 40
tv75 = 44
tv94 = 48
tree$ = 80
validate_comparison PROC				; COMDAT

; 2158 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2159 :     int pos;
; 2160 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2161 :     int res = (validate_ntype(tree, comparison)
; 2162 :                && is_odd(nch)
; 2163 :                && validate_expr(CHILD(tree, 0)));

  00015	ba 35 01 00 00	 mov	 edx, 309		; 00000135H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 28		 je	 SHORT $LN6@validate_c
  00028	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 1c		 jne	 SHORT $LN6@validate_c
  00034	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00039	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0003d	e8 00 00 00 00	 call	 validate_expr
  00042	85 c0		 test	 eax, eax
  00044	74 0a		 je	 SHORT $LN6@validate_c
  00046	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  0004e	eb 08		 jmp	 SHORT $LN7@validate_c
$LN6@validate_c:
  00050	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN7@validate_c:
  00058	8b 44 24 2c	 mov	 eax, DWORD PTR tv75[rsp]
  0005c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2164 : 
; 2165 :     for (pos = 1; res && (pos < nch); pos += 2)

  00060	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR pos$[rsp], 1
  00068	eb 0b		 jmp	 SHORT $LN3@validate_c
$LN2@validate_c:
  0006a	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  0006e	83 c0 02	 add	 eax, 2
  00071	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax
$LN3@validate_c:
  00075	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0007a	74 65		 je	 SHORT $LN1@validate_c
  0007c	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00080	39 44 24 28	 cmp	 DWORD PTR pos$[rsp], eax
  00084	7d 5b		 jge	 SHORT $LN1@validate_c

; 2166 :         res = (validate_comp_op(CHILD(tree, pos))
; 2167 :                && validate_expr(CHILD(tree, pos + 1)));

  00086	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  0008b	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0008f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00094	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00098	48 8b c8	 mov	 rcx, rax
  0009b	e8 00 00 00 00	 call	 validate_comp_op
  000a0	85 c0		 test	 eax, eax
  000a2	74 2b		 je	 SHORT $LN8@validate_c
  000a4	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  000a8	ff c0		 inc	 eax
  000aa	48 98		 cdqe
  000ac	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000b0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000b5	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000b9	48 8b c8	 mov	 rcx, rax
  000bc	e8 00 00 00 00	 call	 validate_expr
  000c1	85 c0		 test	 eax, eax
  000c3	74 0a		 je	 SHORT $LN8@validate_c
  000c5	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  000cd	eb 08		 jmp	 SHORT $LN9@validate_c
$LN8@validate_c:
  000cf	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN9@validate_c:
  000d7	8b 44 24 30	 mov	 eax, DWORD PTR tv94[rsp]
  000db	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000df	eb 89		 jmp	 SHORT $LN2@validate_c
$LN1@validate_c:

; 2168 : 
; 2169 :     return (res);

  000e1	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2170 : }

  000e5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e9	c3		 ret	 0
validate_comparison ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@NAGHNPAP@unknown?5comparison?5operator?$AA@ ; `string'
PUBLIC	??_C@_07LCFKNJG@comp_op?$AA@			; `string'
PUBLIC	??_C@_0CB@OBDDMBL@illegal?5comparison?5operator?5type@ ; `string'
PUBLIC	??_C@_0BG@FKPNMIFG@illegal?5operator?5?8?$CFs?8?$AA@ ; `string'
PUBLIC	??_C@_02EDKKPMHH@is?$AA@			; `string'
PUBLIC	??_C@_02LMMGJAGL@in?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_comp_op DD imagerel validate_comp_op
	DD	imagerel validate_comp_op+551
	DD	imagerel $unwind$validate_comp_op
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_comp_op DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BM@NAGHNPAP@unknown?5comparison?5operator?$AA@
CONST	SEGMENT
??_C@_0BM@NAGHNPAP@unknown?5comparison?5operator?$AA@ DB 'unknown compari'
	DB	'son operator', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07LCFKNJG@comp_op?$AA@
CONST	SEGMENT
??_C@_07LCFKNJG@comp_op?$AA@ DB 'comp_op', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OBDDMBL@illegal?5comparison?5operator?5type@
CONST	SEGMENT
??_C@_0CB@OBDDMBL@illegal?5comparison?5operator?5type@ DB 'illegal compar'
	DB	'ison operator type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FKPNMIFG@illegal?5operator?5?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_0BG@FKPNMIFG@illegal?5operator?5?8?$CFs?8?$AA@ DB 'illegal operator'
	DB	' ''%s''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02EDKKPMHH@is?$AA@
CONST	SEGMENT
??_C@_02EDKKPMHH@is?$AA@ DB 'is', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGJAGL@in?$AA@
CONST	SEGMENT
??_C@_02LMMGJAGL@in?$AA@ DB 'in', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_comp_op
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv72 = 40
tv83 = 44
tv169 = 48
tree$ = 80
validate_comp_op PROC					; COMDAT

; 2175 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2176 :     int res = 0;

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 2177 :     int nch = NCH(tree);

  00011	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00016	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00019	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2178 : 
; 2179 :     if (!validate_ntype(tree, comp_op))

  0001d	ba 36 01 00 00	 mov	 edx, 310		; 00000136H
  00022	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00027	e8 00 00 00 00	 call	 validate_ntype
  0002c	85 c0		 test	 eax, eax
  0002e	75 07		 jne	 SHORT $LN11@validate_c@2

; 2180 :         return (0);

  00030	33 c0		 xor	 eax, eax
  00032	e9 eb 01 00 00	 jmp	 $LN12@validate_c@2
$LN11@validate_c@2:

; 2181 :     if (nch == 1) {

  00037	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0003c	0f 85 d3 00 00
	00		 jne	 $LN10@validate_c@2

; 2182 :         /*
; 2183 :          *  Only child will be a terminal with a well-defined symbolic name
; 2184 :          *  or a NAME with a string of either 'is' or 'in'
; 2185 :          */
; 2186 :         tree = CHILD(tree, 0);

  00042	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00047	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0004b	48 89 44 24 50	 mov	 QWORD PTR tree$[rsp], rax

; 2187 :         switch (TYPE(tree)) {

  00050	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00055	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00058	89 44 24 28	 mov	 DWORD PTR tv72[rsp], eax
  0005c	83 7c 24 28 01	 cmp	 DWORD PTR tv72[rsp], 1
  00061	74 30		 je	 SHORT $LN6@validate_c@2
  00063	83 7c 24 28 13	 cmp	 DWORD PTR tv72[rsp], 19
  00068	0f 8e 96 00 00
	00		 jle	 $LN4@validate_c@2
  0006e	83 7c 24 28 16	 cmp	 DWORD PTR tv72[rsp], 22
  00073	7e 14		 jle	 SHORT $LN7@validate_c@2
  00075	83 7c 24 28 1a	 cmp	 DWORD PTR tv72[rsp], 26
  0007a	0f 8e 84 00 00
	00		 jle	 $LN4@validate_c@2
  00080	83 7c 24 28 1e	 cmp	 DWORD PTR tv72[rsp], 30
  00085	7e 02		 jle	 SHORT $LN7@validate_c@2
  00087	eb 7b		 jmp	 SHORT $LN4@validate_c@2
$LN7@validate_c@2:

; 2188 :           case LESS:
; 2189 :           case GREATER:
; 2190 :           case EQEQUAL:
; 2191 :           case EQUAL:
; 2192 :           case LESSEQUAL:
; 2193 :           case GREATEREQUAL:
; 2194 :           case NOTEQUAL:
; 2195 :               res = 1;

  00089	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR res$[rsp], 1

; 2196 :               break;

  00091	eb 7d		 jmp	 SHORT $LN8@validate_c@2
$LN6@validate_c@2:

; 2197 :           case NAME:
; 2198 :               res = ((strcmp(STR(tree), "in") == 0)
; 2199 :                      || (strcmp(STR(tree), "is") == 0));

  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02LMMGJAGL@in?$AA@
  0009a	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0009f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000a3	e8 00 00 00 00	 call	 strcmp
  000a8	85 c0		 test	 eax, eax
  000aa	74 23		 je	 SHORT $LN14@validate_c@2
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02EDKKPMHH@is?$AA@
  000b3	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000b8	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000bc	e8 00 00 00 00	 call	 strcmp
  000c1	85 c0		 test	 eax, eax
  000c3	74 0a		 je	 SHORT $LN14@validate_c@2
  000c5	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
  000cd	eb 08		 jmp	 SHORT $LN15@validate_c@2
$LN14@validate_c@2:
  000cf	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
$LN15@validate_c@2:
  000d7	8b 44 24 2c	 mov	 eax, DWORD PTR tv83[rsp]
  000db	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2200 :               if (!res) {

  000df	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000e4	75 1c		 jne	 SHORT $LN5@validate_c@2

; 2201 :                   PyErr_Format(parser_error,
; 2202 :                                "illegal operator '%s'", STR(tree));

  000e6	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000eb	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@FKPNMIFG@illegal?5operator?5?8?$CFs?8?$AA@
  000f6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  000fd	e8 00 00 00 00	 call	 PyErr_Format
$LN5@validate_c@2:

; 2203 :               }
; 2204 :               break;

  00102	eb 0c		 jmp	 SHORT $LN8@validate_c@2
$LN4@validate_c@2:

; 2205 :           default:
; 2206 :               err_string("illegal comparison operator type");

  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@OBDDMBL@illegal?5comparison?5operator?5type@
  0010b	e8 00 00 00 00	 call	 err_string
$LN8@validate_c@2:

; 2207 :               break;
; 2208 :         }
; 2209 :     }
; 2210 :     else if ((res = validate_numnodes(tree, 2, "comp_op")) != 0) {

  00110	e9 09 01 00 00	 jmp	 $LN3@validate_c@2
$LN10@validate_c@2:
  00115	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07LCFKNJG@comp_op?$AA@
  0011c	ba 02 00 00 00	 mov	 edx, 2
  00121	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00126	e8 00 00 00 00	 call	 validate_numnodes
  0012b	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  0012f	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00134	0f 84 e4 00 00
	00		 je	 $LN2@validate_c@2

; 2211 :         res = (validate_ntype(CHILD(tree, 0), NAME)
; 2212 :                && validate_ntype(CHILD(tree, 1), NAME)
; 2213 :                && (((strcmp(STR(CHILD(tree, 0)), "is") == 0)
; 2214 :                     && (strcmp(STR(CHILD(tree, 1)), "not") == 0))
; 2215 :                    || ((strcmp(STR(CHILD(tree, 0)), "not") == 0)
; 2216 :                        && (strcmp(STR(CHILD(tree, 1)), "in") == 0))));

  0013a	ba 01 00 00 00	 mov	 edx, 1
  0013f	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00144	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00148	e8 00 00 00 00	 call	 validate_ntype
  0014d	85 c0		 test	 eax, eax
  0014f	0f 84 9c 00 00
	00		 je	 $LN16@validate_c@2
  00155	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0015a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0015e	48 83 c0 28	 add	 rax, 40			; 00000028H
  00162	ba 01 00 00 00	 mov	 edx, 1
  00167	48 8b c8	 mov	 rcx, rax
  0016a	e8 00 00 00 00	 call	 validate_ntype
  0016f	85 c0		 test	 eax, eax
  00171	74 7e		 je	 SHORT $LN16@validate_c@2
  00173	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00178	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0017c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02EDKKPMHH@is?$AA@
  00183	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00187	e8 00 00 00 00	 call	 strcmp
  0018c	85 c0		 test	 eax, eax
  0018e	75 1d		 jne	 SHORT $LN17@validate_c@2
  00190	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00195	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00199	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03NJKJADM@not?$AA@
  001a0	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  001a4	e8 00 00 00 00	 call	 strcmp
  001a9	85 c0		 test	 eax, eax
  001ab	74 3a		 je	 SHORT $LN19@validate_c@2
$LN17@validate_c@2:
  001ad	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  001b2	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03NJKJADM@not?$AA@
  001bd	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  001c1	e8 00 00 00 00	 call	 strcmp
  001c6	85 c0		 test	 eax, eax
  001c8	75 27		 jne	 SHORT $LN18@validate_c@2
  001ca	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  001cf	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02LMMGJAGL@in?$AA@
  001da	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  001de	e8 00 00 00 00	 call	 strcmp
  001e3	85 c0		 test	 eax, eax
  001e5	75 0a		 jne	 SHORT $LN16@validate_c@2
$LN19@validate_c@2:
  001e7	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv169[rsp], 1
  001ef	eb 08		 jmp	 SHORT $LN20@validate_c@2
$LN16@validate_c@2:
$LN18@validate_c@2:
  001f1	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv169[rsp], 0
$LN20@validate_c@2:
  001f9	8b 44 24 30	 mov	 eax, DWORD PTR tv169[rsp]
  001fd	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2217 :         if (!res && !PyErr_Occurred())

  00201	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00206	75 16		 jne	 SHORT $LN1@validate_c@2
  00208	e8 00 00 00 00	 call	 PyErr_Occurred
  0020d	48 85 c0	 test	 rax, rax
  00210	75 0c		 jne	 SHORT $LN1@validate_c@2

; 2218 :             err_string("unknown comparison operator");

  00212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@NAGHNPAP@unknown?5comparison?5operator?$AA@
  00219	e8 00 00 00 00	 call	 err_string
$LN1@validate_c@2:
$LN2@validate_c@2:
$LN3@validate_c@2:

; 2219 :     }
; 2220 :     return (res);

  0021e	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN12@validate_c@2:

; 2221 : }

  00222	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00226	c3		 ret	 0
validate_comp_op ENDP
_TEXT	ENDS
PUBLIC	??_C@_01DNKMNLPK@?$HM?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_expr DD imagerel validate_expr
	DD	imagerel validate_expr+249
	DD	imagerel $unwind$validate_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_expr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_01DNKMNLPK@?$HM?$AA@
CONST	SEGMENT
??_C@_01DNKMNLPK@?$HM?$AA@ DB '|', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_expr
_TEXT	SEGMENT
res$ = 32
nch$ = 36
j$ = 40
tv75 = 44
tv128 = 48
tree$ = 80
validate_expr PROC					; COMDAT

; 2238 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2239 :     int j;
; 2240 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2241 :     int res = (validate_ntype(tree, expr)
; 2242 :                && is_odd(nch)
; 2243 :                && validate_xor_expr(CHILD(tree, 0)));

  00015	ba 38 01 00 00	 mov	 edx, 312		; 00000138H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 28		 je	 SHORT $LN6@validate_e@3
  00028	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 1c		 jne	 SHORT $LN6@validate_e@3
  00034	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00039	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0003d	e8 00 00 00 00	 call	 validate_xor_expr
  00042	85 c0		 test	 eax, eax
  00044	74 0a		 je	 SHORT $LN6@validate_e@3
  00046	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  0004e	eb 08		 jmp	 SHORT $LN7@validate_e@3
$LN6@validate_e@3:
  00050	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN7@validate_e@3:
  00058	8b 44 24 2c	 mov	 eax, DWORD PTR tv75[rsp]
  0005c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2244 : 
; 2245 :     for (j = 2; res && (j < nch); j += 2)

  00060	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR j$[rsp], 2
  00068	eb 0b		 jmp	 SHORT $LN3@validate_e@3
$LN2@validate_e@3:
  0006a	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  0006e	83 c0 02	 add	 eax, 2
  00071	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN3@validate_e@3:
  00075	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0007a	74 74		 je	 SHORT $LN1@validate_e@3
  0007c	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00080	39 44 24 28	 cmp	 DWORD PTR j$[rsp], eax
  00084	7d 6a		 jge	 SHORT $LN1@validate_e@3

; 2246 :         res = (validate_xor_expr(CHILD(tree, j))
; 2247 :                && validate_vbar(CHILD(tree, j - 1)));

  00086	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  0008b	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0008f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00094	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00098	48 8b c8	 mov	 rcx, rax
  0009b	e8 00 00 00 00	 call	 validate_xor_expr
  000a0	85 c0		 test	 eax, eax
  000a2	74 37		 je	 SHORT $LN8@validate_e@3
  000a4	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  000a8	ff c8		 dec	 eax
  000aa	48 98		 cdqe
  000ac	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000b0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000b5	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01DNKMNLPK@?$HM?$AA@
  000c0	ba 12 00 00 00	 mov	 edx, 18
  000c5	48 8b c8	 mov	 rcx, rax
  000c8	e8 00 00 00 00	 call	 validate_terminal
  000cd	85 c0		 test	 eax, eax
  000cf	74 0a		 je	 SHORT $LN8@validate_e@3
  000d1	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv128[rsp], 1
  000d9	eb 08		 jmp	 SHORT $LN9@validate_e@3
$LN8@validate_e@3:
  000db	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN9@validate_e@3:
  000e3	8b 44 24 30	 mov	 eax, DWORD PTR tv128[rsp]
  000e7	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000eb	e9 7a ff ff ff	 jmp	 $LN2@validate_e@3
$LN1@validate_e@3:

; 2248 : 
; 2249 :     return (res);

  000f0	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2250 : }

  000f4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f8	c3		 ret	 0
validate_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_01JKBOJNNK@?$FO?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_xor_expr DD imagerel validate_xor_expr
	DD	imagerel validate_xor_expr+249
	DD	imagerel $unwind$validate_xor_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_xor_expr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_01JKBOJNNK@?$FO?$AA@
CONST	SEGMENT
??_C@_01JKBOJNNK@?$FO?$AA@ DB '^', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_xor_expr
_TEXT	SEGMENT
res$ = 32
nch$ = 36
j$ = 40
tv75 = 44
tv128 = 48
tree$ = 80
validate_xor_expr PROC					; COMDAT

; 2255 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2256 :     int j;
; 2257 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2258 :     int res = (validate_ntype(tree, xor_expr)
; 2259 :                && is_odd(nch)
; 2260 :                && validate_and_expr(CHILD(tree, 0)));

  00015	ba 39 01 00 00	 mov	 edx, 313		; 00000139H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 28		 je	 SHORT $LN6@validate_x
  00028	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 1c		 jne	 SHORT $LN6@validate_x
  00034	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00039	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0003d	e8 00 00 00 00	 call	 validate_and_expr
  00042	85 c0		 test	 eax, eax
  00044	74 0a		 je	 SHORT $LN6@validate_x
  00046	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  0004e	eb 08		 jmp	 SHORT $LN7@validate_x
$LN6@validate_x:
  00050	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN7@validate_x:
  00058	8b 44 24 2c	 mov	 eax, DWORD PTR tv75[rsp]
  0005c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2261 : 
; 2262 :     for (j = 2; res && (j < nch); j += 2)

  00060	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR j$[rsp], 2
  00068	eb 0b		 jmp	 SHORT $LN3@validate_x
$LN2@validate_x:
  0006a	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  0006e	83 c0 02	 add	 eax, 2
  00071	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN3@validate_x:
  00075	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0007a	74 74		 je	 SHORT $LN1@validate_x
  0007c	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00080	39 44 24 28	 cmp	 DWORD PTR j$[rsp], eax
  00084	7d 6a		 jge	 SHORT $LN1@validate_x

; 2263 :         res = (validate_circumflex(CHILD(tree, j - 1))
; 2264 :                && validate_and_expr(CHILD(tree, j)));

  00086	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  0008a	ff c8		 dec	 eax
  0008c	48 98		 cdqe
  0008e	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00092	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00097	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0009b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JKBOJNNK@?$FO?$AA@
  000a2	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000a7	48 8b c8	 mov	 rcx, rax
  000aa	e8 00 00 00 00	 call	 validate_terminal
  000af	85 c0		 test	 eax, eax
  000b1	74 28		 je	 SHORT $LN8@validate_x
  000b3	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  000b8	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000bc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000c1	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000c5	48 8b c8	 mov	 rcx, rax
  000c8	e8 00 00 00 00	 call	 validate_and_expr
  000cd	85 c0		 test	 eax, eax
  000cf	74 0a		 je	 SHORT $LN8@validate_x
  000d1	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv128[rsp], 1
  000d9	eb 08		 jmp	 SHORT $LN9@validate_x
$LN8@validate_x:
  000db	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN9@validate_x:
  000e3	8b 44 24 30	 mov	 eax, DWORD PTR tv128[rsp]
  000e7	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000eb	e9 7a ff ff ff	 jmp	 $LN2@validate_x
$LN1@validate_x:

; 2265 : 
; 2266 :     return (res);

  000f0	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2267 : }

  000f4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f8	c3		 ret	 0
validate_xor_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_01HNPIGOCE@?$CG?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_and_expr DD imagerel validate_and_expr
	DD	imagerel validate_and_expr+249
	DD	imagerel $unwind$validate_and_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_and_expr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_01HNPIGOCE@?$CG?$AA@
CONST	SEGMENT
??_C@_01HNPIGOCE@?$CG?$AA@ DB '&', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_and_expr
_TEXT	SEGMENT
res$ = 32
nch$ = 36
pos$ = 40
tv75 = 44
tv128 = 48
tree$ = 80
validate_and_expr PROC					; COMDAT

; 2272 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2273 :     int pos;
; 2274 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2275 :     int res = (validate_ntype(tree, and_expr)
; 2276 :                && is_odd(nch)
; 2277 :                && validate_shift_expr(CHILD(tree, 0)));

  00015	ba 3a 01 00 00	 mov	 edx, 314		; 0000013aH
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 28		 je	 SHORT $LN6@validate_a@2
  00028	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 1c		 jne	 SHORT $LN6@validate_a@2
  00034	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00039	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0003d	e8 00 00 00 00	 call	 validate_shift_expr
  00042	85 c0		 test	 eax, eax
  00044	74 0a		 je	 SHORT $LN6@validate_a@2
  00046	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  0004e	eb 08		 jmp	 SHORT $LN7@validate_a@2
$LN6@validate_a@2:
  00050	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN7@validate_a@2:
  00058	8b 44 24 2c	 mov	 eax, DWORD PTR tv75[rsp]
  0005c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2278 : 
; 2279 :     for (pos = 1; res && (pos < nch); pos += 2)

  00060	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR pos$[rsp], 1
  00068	eb 0b		 jmp	 SHORT $LN3@validate_a@2
$LN2@validate_a@2:
  0006a	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  0006e	83 c0 02	 add	 eax, 2
  00071	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax
$LN3@validate_a@2:
  00075	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0007a	74 74		 je	 SHORT $LN1@validate_a@2
  0007c	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00080	39 44 24 28	 cmp	 DWORD PTR pos$[rsp], eax
  00084	7d 6a		 jge	 SHORT $LN1@validate_a@2

; 2280 :         res = (validate_ampersand(CHILD(tree, pos))
; 2281 :                && validate_shift_expr(CHILD(tree, pos + 1)));

  00086	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  0008b	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0008f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00094	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00098	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG?$AA@
  0009f	ba 13 00 00 00	 mov	 edx, 19
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	e8 00 00 00 00	 call	 validate_terminal
  000ac	85 c0		 test	 eax, eax
  000ae	74 2b		 je	 SHORT $LN8@validate_a@2
  000b0	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  000b4	ff c0		 inc	 eax
  000b6	48 98		 cdqe
  000b8	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000bc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000c1	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000c5	48 8b c8	 mov	 rcx, rax
  000c8	e8 00 00 00 00	 call	 validate_shift_expr
  000cd	85 c0		 test	 eax, eax
  000cf	74 0a		 je	 SHORT $LN8@validate_a@2
  000d1	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv128[rsp], 1
  000d9	eb 08		 jmp	 SHORT $LN9@validate_a@2
$LN8@validate_a@2:
  000db	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN9@validate_a@2:
  000e3	8b 44 24 30	 mov	 eax, DWORD PTR tv128[rsp]
  000e7	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000eb	e9 7a ff ff ff	 jmp	 $LN2@validate_a@2
$LN1@validate_a@2:

; 2282 : 
; 2283 :     return (res);

  000f0	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2284 : }

  000f4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f8	c3		 ret	 0
validate_and_expr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_shift_expr DD imagerel validate_shift_expr
	DD	imagerel validate_shift_expr+88
	DD	imagerel $unwind$validate_shift_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_shift_expr DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_shift_expr
_TEXT	SEGMENT
tv74 = 32
tree$ = 64
validate_shift_expr PROC				; COMDAT

; 2307 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2308 :     return (validate_ntype(tree, shift_expr)
; 2309 :             && validate_chain_two_ops(tree, validate_arith_expr,
; 2310 :                                       LEFTSHIFT, RIGHTSHIFT));

  00009	ba 3b 01 00 00	 mov	 edx, 315		; 0000013bH
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00013	e8 00 00 00 00	 call	 validate_ntype
  00018	85 c0		 test	 eax, eax
  0001a	74 2b		 je	 SHORT $LN3@validate_s
  0001c	41 b9 22 00 00
	00		 mov	 r9d, 34			; 00000022H
  00022	41 b8 21 00 00
	00		 mov	 r8d, 33			; 00000021H
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:validate_arith_expr
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00034	e8 00 00 00 00	 call	 validate_chain_two_ops
  00039	85 c0		 test	 eax, eax
  0003b	74 0a		 je	 SHORT $LN3@validate_s
  0003d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00045	eb 08		 jmp	 SHORT $LN4@validate_s
$LN3@validate_s:
  00047	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN4@validate_s:
  0004f	8b 44 24 20	 mov	 eax, DWORD PTR tv74[rsp]

; 2311 : }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
validate_shift_expr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_chain_two_ops DD imagerel validate_chain_two_ops
	DD	imagerel validate_chain_two_ops+244
	DD	imagerel $unwind$validate_chain_two_ops
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_chain_two_ops DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_chain_two_ops
_TEXT	SEGMENT
res$ = 32
nch$ = 36
pos$ = 40
tv71 = 44
tree$ = 64
termvalid$ = 72
op1$ = 80
op2$ = 88
validate_chain_two_ops PROC				; COMDAT

; 2289 :  {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2290 :     int pos = 1;

  00018	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR pos$[rsp], 1

; 2291 :     int nch = NCH(tree);

  00020	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00025	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00028	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2292 :     int res = (is_odd(nch)
; 2293 :                && (*termvalid)(CHILD(tree, 0)));

  0002c	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	83 f8 01	 cmp	 eax, 1
  00036	75 1b		 jne	 SHORT $LN8@validate_c@3
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0003d	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00041	ff 54 24 48	 call	 QWORD PTR termvalid$[rsp]
  00045	85 c0		 test	 eax, eax
  00047	74 0a		 je	 SHORT $LN8@validate_c@3
  00049	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  00051	eb 08		 jmp	 SHORT $LN9@validate_c@3
$LN8@validate_c@3:
  00053	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN9@validate_c@3:
  0005b	8b 44 24 2c	 mov	 eax, DWORD PTR tv71[rsp]
  0005f	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2294 : 
; 2295 :     for ( ; res && (pos < nch); pos += 2) {

  00063	eb 0b		 jmp	 SHORT $LN5@validate_c@3
$LN4@validate_c@3:
  00065	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  00069	83 c0 02	 add	 eax, 2
  0006c	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax
$LN5@validate_c@3:
  00070	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00075	74 74		 je	 SHORT $LN3@validate_c@3
  00077	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0007b	39 44 24 28	 cmp	 DWORD PTR pos$[rsp], eax
  0007f	7d 6a		 jge	 SHORT $LN3@validate_c@3

; 2296 :         if (TYPE(CHILD(tree, pos)) != op1)

  00081	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  00086	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0008a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0008f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00093	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00097	3b 44 24 50	 cmp	 eax, DWORD PTR op1$[rsp]
  0009b	74 22		 je	 SHORT $LN2@validate_c@3

; 2297 :             res = validate_ntype(CHILD(tree, pos), op2);

  0009d	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  000a2	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000a6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000ab	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000af	8b 54 24 58	 mov	 edx, DWORD PTR op2$[rsp]
  000b3	48 8b c8	 mov	 rcx, rax
  000b6	e8 00 00 00 00	 call	 validate_ntype
  000bb	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN2@validate_c@3:

; 2298 :         if (res)

  000bf	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000c4	74 20		 je	 SHORT $LN1@validate_c@3

; 2299 :             res = (*termvalid)(CHILD(tree, pos + 1));

  000c6	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  000ca	ff c0		 inc	 eax
  000cc	48 98		 cdqe
  000ce	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000d2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000d7	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000db	48 8b c8	 mov	 rcx, rax
  000de	ff 54 24 48	 call	 QWORD PTR termvalid$[rsp]
  000e2	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_c@3:

; 2300 :     }

  000e6	e9 7a ff ff ff	 jmp	 $LN4@validate_c@3
$LN3@validate_c@3:

; 2301 :     return (res);

  000eb	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2302 : }

  000ef	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f3	c3		 ret	 0
validate_chain_two_ops ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_arith_expr DD imagerel validate_arith_expr
	DD	imagerel validate_arith_expr+88
	DD	imagerel $unwind$validate_arith_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_arith_expr DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_arith_expr
_TEXT	SEGMENT
tv74 = 32
tree$ = 64
validate_arith_expr PROC				; COMDAT

; 2316 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2317 :     return (validate_ntype(tree, arith_expr)
; 2318 :             && validate_chain_two_ops(tree, validate_term, PLUS, MINUS));

  00009	ba 3c 01 00 00	 mov	 edx, 316		; 0000013cH
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00013	e8 00 00 00 00	 call	 validate_ntype
  00018	85 c0		 test	 eax, eax
  0001a	74 2b		 je	 SHORT $LN3@validate_a@3
  0001c	41 b9 0f 00 00
	00		 mov	 r9d, 15
  00022	41 b8 0e 00 00
	00		 mov	 r8d, 14
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:validate_term
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00034	e8 00 00 00 00	 call	 validate_chain_two_ops
  00039	85 c0		 test	 eax, eax
  0003b	74 0a		 je	 SHORT $LN3@validate_a@3
  0003d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00045	eb 08		 jmp	 SHORT $LN4@validate_a@3
$LN3@validate_a@3:
  00047	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN4@validate_a@3:
  0004f	8b 44 24 20	 mov	 eax, DWORD PTR tv74[rsp]

; 2319 : }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
validate_arith_expr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_term DD imagerel validate_term
	DD	imagerel validate_term+323
	DD	imagerel $unwind$validate_term
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_term DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_term
_TEXT	SEGMENT
res$ = 32
nch$ = 36
pos$ = 40
tv75 = 44
tv143 = 48
tree$ = 80
validate_term PROC					; COMDAT

; 2324 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2325 :     int pos = 1;

  00009	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR pos$[rsp], 1

; 2326 :     int nch = NCH(tree);

  00011	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00016	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00019	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2327 :     int res = (validate_ntype(tree, term)
; 2328 :                && is_odd(nch)
; 2329 :                && validate_factor(CHILD(tree, 0)));

  0001d	ba 3d 01 00 00	 mov	 edx, 317		; 0000013dH
  00022	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00027	e8 00 00 00 00	 call	 validate_ntype
  0002c	85 c0		 test	 eax, eax
  0002e	74 28		 je	 SHORT $LN6@validate_t@3
  00030	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00034	83 e0 01	 and	 eax, 1
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 1c		 jne	 SHORT $LN6@validate_t@3
  0003c	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00041	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00045	e8 00 00 00 00	 call	 validate_factor
  0004a	85 c0		 test	 eax, eax
  0004c	74 0a		 je	 SHORT $LN6@validate_t@3
  0004e	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  00056	eb 08		 jmp	 SHORT $LN7@validate_t@3
$LN6@validate_t@3:
  00058	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN7@validate_t@3:
  00060	8b 44 24 2c	 mov	 eax, DWORD PTR tv75[rsp]
  00064	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2330 : 
; 2331 :     for ( ; res && (pos < nch); pos += 2)

  00068	eb 0b		 jmp	 SHORT $LN3@validate_t@3
$LN2@validate_t@3:
  0006a	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  0006e	83 c0 02	 add	 eax, 2
  00071	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax
$LN3@validate_t@3:
  00075	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0007a	0f 84 ba 00 00
	00		 je	 $LN1@validate_t@3
  00080	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00084	39 44 24 28	 cmp	 DWORD PTR pos$[rsp], eax
  00088	0f 8d ac 00 00
	00		 jge	 $LN1@validate_t@3

; 2332 :         res = (((TYPE(CHILD(tree, pos)) == STAR)
; 2333 :                || (TYPE(CHILD(tree, pos)) == SLASH)
; 2334 :                || (TYPE(CHILD(tree, pos)) == DOUBLESLASH)
; 2335 :                || (TYPE(CHILD(tree, pos)) == PERCENT))
; 2336 :                && validate_factor(CHILD(tree, pos + 1)));

  0008e	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  00093	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00097	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0009c	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000a0	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  000a4	83 f8 10	 cmp	 eax, 16
  000a7	74 51		 je	 SHORT $LN8@validate_t@3
  000a9	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  000ae	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000b7	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000bb	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  000bf	83 f8 11	 cmp	 eax, 17
  000c2	74 36		 je	 SHORT $LN8@validate_t@3
  000c4	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  000c9	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000d2	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000d6	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  000da	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  000dd	74 1b		 je	 SHORT $LN8@validate_t@3
  000df	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  000e4	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000e8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000ed	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000f1	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  000f5	83 f8 18	 cmp	 eax, 24
  000f8	75 2b		 jne	 SHORT $LN9@validate_t@3
$LN8@validate_t@3:
  000fa	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  000fe	ff c0		 inc	 eax
  00100	48 98		 cdqe
  00102	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00106	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0010b	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0010f	48 8b c8	 mov	 rcx, rax
  00112	e8 00 00 00 00	 call	 validate_factor
  00117	85 c0		 test	 eax, eax
  00119	74 0a		 je	 SHORT $LN9@validate_t@3
  0011b	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00123	eb 08		 jmp	 SHORT $LN10@validate_t@3
$LN9@validate_t@3:
  00125	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN10@validate_t@3:
  0012d	8b 44 24 30	 mov	 eax, DWORD PTR tv143[rsp]
  00131	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00135	e9 30 ff ff ff	 jmp	 $LN2@validate_t@3
$LN1@validate_t@3:

; 2337 : 
; 2338 :     return (res);

  0013a	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2339 : }

  0013e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00142	c3		 ret	 0
validate_term ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_factor DD imagerel validate_factor
	DD	imagerel validate_factor+183
	DD	imagerel $unwind$validate_factor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_factor DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_factor
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv92 = 40
tree$ = 64
validate_factor PROC					; COMDAT

; 2348 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2349 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2350 :     int res = (validate_ntype(tree, factor)
; 2351 :                && (((nch == 2)
; 2352 :                     && ((TYPE(CHILD(tree, 0)) == PLUS)
; 2353 :                         || (TYPE(CHILD(tree, 0)) == MINUS)
; 2354 :                         || (TYPE(CHILD(tree, 0)) == TILDE))
; 2355 :                     && validate_factor(CHILD(tree, 1)))
; 2356 :                    || ((nch == 1)
; 2357 :                        && validate_power(CHILD(tree, 0)))));

  00015	ba 3e 01 00 00	 mov	 edx, 318		; 0000013eH
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 76		 je	 SHORT $LN7@validate_f
  00028	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  0002d	75 4c		 jne	 SHORT $LN4@validate_f
  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00034	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00038	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0003b	83 f8 0e	 cmp	 eax, 14
  0003e	74 22		 je	 SHORT $LN3@validate_f
  00040	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00045	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00049	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0004c	83 f8 0f	 cmp	 eax, 15
  0004f	74 11		 je	 SHORT $LN3@validate_f
  00051	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00056	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005a	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0005d	83 f8 1f	 cmp	 eax, 31
  00060	75 19		 jne	 SHORT $LN4@validate_f
$LN3@validate_f:
  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00067	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0006b	48 83 c0 28	 add	 rax, 40			; 00000028H
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 validate_factor
  00077	85 c0		 test	 eax, eax
  00079	75 19		 jne	 SHORT $LN6@validate_f
$LN4@validate_f:
  0007b	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  00080	75 1c		 jne	 SHORT $LN5@validate_f
  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00087	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0008b	e8 00 00 00 00	 call	 validate_power
  00090	85 c0		 test	 eax, eax
  00092	74 0a		 je	 SHORT $LN7@validate_f
$LN6@validate_f:
  00094	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  0009c	eb 08		 jmp	 SHORT $LN8@validate_f
$LN7@validate_f:
$LN5@validate_f:
  0009e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN8@validate_f:
  000a6	8b 44 24 28	 mov	 eax, DWORD PTR tv92[rsp]
  000aa	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2358 :     return (res);

  000ae	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2359 : }

  000b2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b6	c3		 ret	 0
validate_factor ENDP
_TEXT	ENDS
PUBLIC	??_C@_02FKAPCJPD@?$CK?$CK?$AA@			; `string'
PUBLIC	??_C@_0CE@JPDBCOJJ@illegal?5number?5of?5nodes?5for?5?8pow@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_power DD imagerel validate_power
	DD	imagerel validate_power+407
	DD	imagerel $unwind$validate_power
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_power DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_02FKAPCJPD@?$CK?$CK?$AA@
CONST	SEGMENT
??_C@_02FKAPCJPD@?$CK?$CK?$AA@ DB '**', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JPDBCOJJ@illegal?5number?5of?5nodes?5for?5?8pow@
CONST	SEGMENT
??_C@_0CE@JPDBCOJJ@illegal?5number?5of?5nodes?5for?5?8pow@ DB 'illegal nu'
	DB	'mber of nodes for ''power''', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_power
_TEXT	SEGMENT
res$ = 32
nch$ = 36
pos$ = 40
tv74 = 44
tv89 = 48
tv150 = 56
tree$ = 80
validate_power PROC					; COMDAT

; 2368 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2369 :     int pos = 1;

  00009	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR pos$[rsp], 1

; 2370 :     int nch = NCH(tree);

  00011	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00016	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00019	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2371 :     int res = (validate_ntype(tree, power) && (nch >= 1)
; 2372 :                && validate_atom(CHILD(tree, 0)));

  0001d	ba 3f 01 00 00	 mov	 edx, 319		; 0000013fH
  00022	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00027	e8 00 00 00 00	 call	 validate_ntype
  0002c	85 c0		 test	 eax, eax
  0002e	74 23		 je	 SHORT $LN10@validate_p
  00030	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  00035	7c 1c		 jl	 SHORT $LN10@validate_p
  00037	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0003c	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00040	e8 00 00 00 00	 call	 validate_atom
  00045	85 c0		 test	 eax, eax
  00047	74 0a		 je	 SHORT $LN10@validate_p
  00049	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00051	eb 08		 jmp	 SHORT $LN11@validate_p
$LN10@validate_p:
  00053	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN11@validate_p:
  0005b	8b 44 24 2c	 mov	 eax, DWORD PTR tv74[rsp]
  0005f	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN7@validate_p:

; 2373 : 
; 2374 :     while (res && (pos < nch) && (TYPE(CHILD(tree, pos)) == trailer))

  00063	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00068	74 5b		 je	 SHORT $LN6@validate_p
  0006a	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0006e	39 44 24 28	 cmp	 DWORD PTR pos$[rsp], eax
  00072	7d 51		 jge	 SHORT $LN6@validate_p
  00074	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  00079	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0007d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00082	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00086	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  0008a	3d 42 01 00 00	 cmp	 eax, 322		; 00000142H
  0008f	75 34		 jne	 SHORT $LN6@validate_p

; 2375 :         res = validate_trailer(CHILD(tree, pos++));

  00091	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  00096	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0009a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0009f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000a3	48 03 c8	 add	 rcx, rax
  000a6	48 89 4c 24 30	 mov	 QWORD PTR tv89[rsp], rcx
  000ab	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv89[rsp]
  000b0	e8 00 00 00 00	 call	 validate_trailer
  000b5	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000b9	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  000bd	ff c0		 inc	 eax
  000bf	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax
  000c3	eb 9e		 jmp	 SHORT $LN7@validate_p
$LN6@validate_p:

; 2376 :     if (res && (pos < nch)) {

  000c5	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000ca	0f 84 be 00 00
	00		 je	 $LN5@validate_p
  000d0	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000d4	39 44 24 28	 cmp	 DWORD PTR pos$[rsp], eax
  000d8	0f 8d b0 00 00
	00		 jge	 $LN5@validate_p

; 2377 :         if (!is_even(nch - pos)) {

  000de	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  000e2	8b 4c 24 24	 mov	 ecx, DWORD PTR nch$[rsp]
  000e6	2b c8		 sub	 ecx, eax
  000e8	8b c1		 mov	 eax, ecx
  000ea	83 e0 01	 and	 eax, 1
  000ed	85 c0		 test	 eax, eax
  000ef	74 13		 je	 SHORT $LN4@validate_p

; 2378 :             err_string("illegal number of nodes for 'power'");

  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@JPDBCOJJ@illegal?5number?5of?5nodes?5for?5?8pow@
  000f8	e8 00 00 00 00	 call	 err_string

; 2379 :             return (0);

  000fd	33 c0		 xor	 eax, eax
  000ff	e9 8e 00 00 00	 jmp	 $LN8@validate_p
$LN4@validate_p:

; 2380 :         }
; 2381 :         for ( ; res && (pos < (nch - 1)); pos += 2)

  00104	eb 0b		 jmp	 SHORT $LN3@validate_p
$LN2@validate_p:
  00106	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  0010a	83 c0 02	 add	 eax, 2
  0010d	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax
$LN3@validate_p:
  00111	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00116	74 76		 je	 SHORT $LN1@validate_p
  00118	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0011c	ff c8		 dec	 eax
  0011e	39 44 24 28	 cmp	 DWORD PTR pos$[rsp], eax
  00122	7d 6a		 jge	 SHORT $LN1@validate_p

; 2382 :             res = (validate_doublestar(CHILD(tree, pos))
; 2383 :                    && validate_factor(CHILD(tree, pos + 1)));

  00124	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  00129	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0012d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00132	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00136	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FKAPCJPD@?$CK?$CK?$AA@
  0013d	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  00142	48 8b c8	 mov	 rcx, rax
  00145	e8 00 00 00 00	 call	 validate_terminal
  0014a	85 c0		 test	 eax, eax
  0014c	74 2b		 je	 SHORT $LN12@validate_p
  0014e	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  00152	ff c0		 inc	 eax
  00154	48 98		 cdqe
  00156	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0015a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0015f	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00163	48 8b c8	 mov	 rcx, rax
  00166	e8 00 00 00 00	 call	 validate_factor
  0016b	85 c0		 test	 eax, eax
  0016d	74 0a		 je	 SHORT $LN12@validate_p
  0016f	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv150[rsp], 1
  00177	eb 08		 jmp	 SHORT $LN13@validate_p
$LN12@validate_p:
  00179	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv150[rsp], 0
$LN13@validate_p:
  00181	8b 44 24 38	 mov	 eax, DWORD PTR tv150[rsp]
  00185	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00189	e9 78 ff ff ff	 jmp	 $LN2@validate_p
$LN1@validate_p:
$LN5@validate_p:

; 2384 :     }
; 2385 :     return (res);

  0018e	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN8@validate_p:

; 2386 : }

  00192	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00196	c3		 ret	 0
validate_power ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@DEPPHBBJ@illegal?5list?5display?5atom?$AA@ ; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_04OKAKPICD@atom?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_atom DD imagerel validate_atom
	DD	imagerel validate_atom+803
	DD	imagerel $unwind$validate_atom
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_atom DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BK@DEPPHBBJ@illegal?5list?5display?5atom?$AA@
CONST	SEGMENT
??_C@_0BK@DEPPHBBJ@illegal?5list?5display?5atom?$AA@ DB 'illegal list dis'
	DB	'play atom', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKAKPICD@atom?$AA@
CONST	SEGMENT
??_C@_04OKAKPICD@atom?$AA@ DB 'atom', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_atom
_TEXT	SEGMENT
res$ = 32
nch$ = 36
pos$ = 40
tv79 = 44
tv91 = 48
tv157 = 52
tv169 = 56
tv177 = 60
tree$ = 80
validate_atom PROC					; COMDAT

; 2391 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2392 :     int pos;
; 2393 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2394 :     int res = validate_ntype(tree, atom);

  00015	ba 40 01 00 00	 mov	 edx, 320		; 00000140H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2395 : 
; 2396 :     if (res && nch < 1)

  00028	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0002d	74 24		 je	 SHORT $LN21@validate_a@4
  0002f	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  00034	7d 1d		 jge	 SHORT $LN21@validate_a@4

; 2397 :         res = validate_numnodes(tree, nch+1, "atom");

  00036	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0003a	ff c0		 inc	 eax
  0003c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04OKAKPICD@atom?$AA@
  00043	8b d0		 mov	 edx, eax
  00045	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0004a	e8 00 00 00 00	 call	 validate_numnodes
  0004f	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN21@validate_a@4:

; 2398 :     if (res) {

  00053	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00058	0f 84 6f 02 00
	00		 je	 $LN20@validate_a@4

; 2399 :         switch (TYPE(CHILD(tree, 0))) {

  0005e	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00063	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00067	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0006a	89 44 24 2c	 mov	 DWORD PTR tv79[rsp], eax
  0006e	8b 44 24 2c	 mov	 eax, DWORD PTR tv79[rsp]
  00072	ff c8		 dec	 eax
  00074	89 44 24 2c	 mov	 DWORD PTR tv79[rsp], eax
  00078	83 7c 24 2c 32	 cmp	 DWORD PTR tv79[rsp], 50	; 00000032H
  0007d	0f 87 42 02 00
	00		 ja	 $LN1@validate_a@4
  00083	48 63 44 24 2c	 movsxd	 rax, DWORD PTR tv79[rsp]
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0008f	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN32@validate_a@4[rcx+rax]
  00097	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN33@validate_a@4[rcx+rax*4]
  0009e	48 03 c1	 add	 rax, rcx
  000a1	ff e0		 jmp	 rax
$LN17@validate_a@4:

; 2400 :           case LPAR:
; 2401 :             res = ((nch <= 3)
; 2402 :                    && (validate_rparen(CHILD(tree, nch - 1))));

  000a3	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  000a8	7f 37		 jg	 SHORT $LN24@validate_a@4
  000aa	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000ae	ff c8		 dec	 eax
  000b0	48 98		 cdqe
  000b2	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000b6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000bb	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  000c6	ba 08 00 00 00	 mov	 edx, 8
  000cb	48 8b c8	 mov	 rcx, rax
  000ce	e8 00 00 00 00	 call	 validate_terminal
  000d3	85 c0		 test	 eax, eax
  000d5	74 0a		 je	 SHORT $LN24@validate_a@4
  000d7	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
  000df	eb 08		 jmp	 SHORT $LN25@validate_a@4
$LN24@validate_a@4:
  000e1	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN25@validate_a@4:
  000e9	8b 44 24 30	 mov	 eax, DWORD PTR tv91[rsp]
  000ed	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2403 : 
; 2404 :             if (res && (nch == 3)) {

  000f1	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000f6	74 4f		 je	 SHORT $LN16@validate_a@4
  000f8	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  000fd	75 48		 jne	 SHORT $LN16@validate_a@4

; 2405 :                 if (TYPE(CHILD(tree, 1))==yield_expr)

  000ff	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00104	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00108	0f bf 40 28	 movsx	 eax, WORD PTR [rax+40]
  0010c	3d 50 01 00 00	 cmp	 eax, 336		; 00000150H
  00111	75 1b		 jne	 SHORT $LN15@validate_a@4

; 2406 :                         res = validate_yield_expr(CHILD(tree, 1));

  00113	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00118	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0011c	48 83 c0 28	 add	 rax, 40			; 00000028H
  00120	48 8b c8	 mov	 rcx, rax
  00123	e8 00 00 00 00	 call	 validate_yield_expr
  00128	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2407 :                 else

  0012c	eb 19		 jmp	 SHORT $LN14@validate_a@4
$LN15@validate_a@4:

; 2408 :                         res = validate_testlist_comp(CHILD(tree, 1));

  0012e	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00133	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00137	48 83 c0 28	 add	 rax, 40			; 00000028H
  0013b	48 8b c8	 mov	 rcx, rax
  0013e	e8 00 00 00 00	 call	 validate_testlist_comp
  00143	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN14@validate_a@4:
$LN16@validate_a@4:

; 2409 :             }
; 2410 :             break;

  00147	e9 81 01 00 00	 jmp	 $LN18@validate_a@4
$LN13@validate_a@4:

; 2411 :           case LSQB:
; 2412 :             if (nch == 2)

  0014c	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  00151	75 20		 jne	 SHORT $LN12@validate_a@4

; 2413 :                 res = validate_ntype(CHILD(tree, 1), RSQB);

  00153	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00158	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0015c	48 83 c0 28	 add	 rax, 40			; 00000028H
  00160	ba 0a 00 00 00	 mov	 edx, 10
  00165	48 8b c8	 mov	 rcx, rax
  00168	e8 00 00 00 00	 call	 validate_ntype
  0016d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00171	eb 6e		 jmp	 SHORT $LN11@validate_a@4
$LN12@validate_a@4:

; 2414 :             else if (nch == 3)

  00173	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  00178	75 53		 jne	 SHORT $LN10@validate_a@4

; 2415 :                 res = (validate_testlist_comp(CHILD(tree, 1))
; 2416 :                        && validate_ntype(CHILD(tree, 2), RSQB));

  0017a	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0017f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00183	48 83 c0 28	 add	 rax, 40			; 00000028H
  00187	48 8b c8	 mov	 rcx, rax
  0018a	e8 00 00 00 00	 call	 validate_testlist_comp
  0018f	85 c0		 test	 eax, eax
  00191	74 28		 je	 SHORT $LN26@validate_a@4
  00193	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00198	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0019c	48 83 c0 50	 add	 rax, 80			; 00000050H
  001a0	ba 0a 00 00 00	 mov	 edx, 10
  001a5	48 8b c8	 mov	 rcx, rax
  001a8	e8 00 00 00 00	 call	 validate_ntype
  001ad	85 c0		 test	 eax, eax
  001af	74 0a		 je	 SHORT $LN26@validate_a@4
  001b1	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  001b9	eb 08		 jmp	 SHORT $LN27@validate_a@4
$LN26@validate_a@4:
  001bb	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN27@validate_a@4:
  001c3	8b 44 24 34	 mov	 eax, DWORD PTR tv157[rsp]
  001c7	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2417 :             else {

  001cb	eb 14		 jmp	 SHORT $LN9@validate_a@4
$LN10@validate_a@4:

; 2418 :                 res = 0;

  001cd	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 2419 :                 err_string("illegal list display atom");

  001d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@DEPPHBBJ@illegal?5list?5display?5atom?$AA@
  001dc	e8 00 00 00 00	 call	 err_string
$LN9@validate_a@4:
$LN11@validate_a@4:

; 2420 :             }
; 2421 :             break;

  001e1	e9 e7 00 00 00	 jmp	 $LN18@validate_a@4
$LN8@validate_a@4:

; 2422 :           case LBRACE:
; 2423 :             res = ((nch <= 3)
; 2424 :                    && validate_ntype(CHILD(tree, nch - 1), RBRACE));

  001e6	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  001eb	7f 30		 jg	 SHORT $LN28@validate_a@4
  001ed	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  001f1	ff c8		 dec	 eax
  001f3	48 98		 cdqe
  001f5	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001f9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  001fe	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00202	ba 1a 00 00 00	 mov	 edx, 26
  00207	48 8b c8	 mov	 rcx, rax
  0020a	e8 00 00 00 00	 call	 validate_ntype
  0020f	85 c0		 test	 eax, eax
  00211	74 0a		 je	 SHORT $LN28@validate_a@4
  00213	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv169[rsp], 1
  0021b	eb 08		 jmp	 SHORT $LN29@validate_a@4
$LN28@validate_a@4:
  0021d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv169[rsp], 0
$LN29@validate_a@4:
  00225	8b 44 24 38	 mov	 eax, DWORD PTR tv169[rsp]
  00229	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2425 : 
; 2426 :             if (res && (nch == 3))

  0022d	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00232	74 20		 je	 SHORT $LN7@validate_a@4
  00234	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  00239	75 19		 jne	 SHORT $LN7@validate_a@4

; 2427 :                 res = validate_dictorsetmaker(CHILD(tree, 1));

  0023b	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00240	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00244	48 83 c0 28	 add	 rax, 40			; 00000028H
  00248	48 8b c8	 mov	 rcx, rax
  0024b	e8 00 00 00 00	 call	 validate_dictorsetmaker
  00250	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN7@validate_a@4:

; 2428 :             break;

  00254	eb 77		 jmp	 SHORT $LN18@validate_a@4
$LN6@validate_a@4:

; 2429 :           case NAME:
; 2430 :           case NUMBER:
; 2431 :           case ELLIPSIS:
; 2432 :             res = (nch == 1);

  00256	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0025b	75 0a		 jne	 SHORT $LN30@validate_a@4
  0025d	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv177[rsp], 1
  00265	eb 08		 jmp	 SHORT $LN31@validate_a@4
$LN30@validate_a@4:
  00267	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv177[rsp], 0
$LN31@validate_a@4:
  0026f	8b 44 24 3c	 mov	 eax, DWORD PTR tv177[rsp]
  00273	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2433 :             break;

  00277	eb 54		 jmp	 SHORT $LN18@validate_a@4
$LN5@validate_a@4:

; 2434 :           case STRING:
; 2435 :             for (pos = 1; res && (pos < nch); ++pos)

  00279	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR pos$[rsp], 1
  00281	eb 0a		 jmp	 SHORT $LN4@validate_a@4
$LN3@validate_a@4:
  00283	8b 44 24 28	 mov	 eax, DWORD PTR pos$[rsp]
  00287	ff c0		 inc	 eax
  00289	89 44 24 28	 mov	 DWORD PTR pos$[rsp], eax
$LN4@validate_a@4:
  0028d	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00292	74 2f		 je	 SHORT $LN2@validate_a@4
  00294	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00298	39 44 24 28	 cmp	 DWORD PTR pos$[rsp], eax
  0029c	7d 25		 jge	 SHORT $LN2@validate_a@4

; 2436 :                 res = validate_ntype(CHILD(tree, pos), STRING);

  0029e	48 63 44 24 28	 movsxd	 rax, DWORD PTR pos$[rsp]
  002a3	48 6b c0 28	 imul	 rax, 40			; 00000028H
  002a7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  002ac	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  002b0	ba 03 00 00 00	 mov	 edx, 3
  002b5	48 8b c8	 mov	 rcx, rax
  002b8	e8 00 00 00 00	 call	 validate_ntype
  002bd	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  002c1	eb c0		 jmp	 SHORT $LN3@validate_a@4
$LN2@validate_a@4:

; 2437 :             break;

  002c3	eb 08		 jmp	 SHORT $LN18@validate_a@4
$LN1@validate_a@4:

; 2438 :           default:
; 2439 :             res = 0;

  002c5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0
$LN18@validate_a@4:
$LN20@validate_a@4:

; 2440 :             break;
; 2441 :         }
; 2442 :     }
; 2443 :     return (res);

  002cd	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2444 : }

  002d1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002d5	c3		 ret	 0
  002d6	66 90		 npad	 2
$LN33@validate_a@4:
  002d8	00 00 00 00	 DD	 $LN6@validate_a@4
  002dc	00 00 00 00	 DD	 $LN5@validate_a@4
  002e0	00 00 00 00	 DD	 $LN17@validate_a@4
  002e4	00 00 00 00	 DD	 $LN13@validate_a@4
  002e8	00 00 00 00	 DD	 $LN8@validate_a@4
  002ec	00 00 00 00	 DD	 $LN1@validate_a@4
$LN32@validate_a@4:
  002f0	00		 DB	 0
  002f1	00		 DB	 0
  002f2	01		 DB	 1
  002f3	05		 DB	 5
  002f4	05		 DB	 5
  002f5	05		 DB	 5
  002f6	02		 DB	 2
  002f7	05		 DB	 5
  002f8	03		 DB	 3
  002f9	05		 DB	 5
  002fa	05		 DB	 5
  002fb	05		 DB	 5
  002fc	05		 DB	 5
  002fd	05		 DB	 5
  002fe	05		 DB	 5
  002ff	05		 DB	 5
  00300	05		 DB	 5
  00301	05		 DB	 5
  00302	05		 DB	 5
  00303	05		 DB	 5
  00304	05		 DB	 5
  00305	05		 DB	 5
  00306	05		 DB	 5
  00307	05		 DB	 5
  00308	04		 DB	 4
  00309	05		 DB	 5
  0030a	05		 DB	 5
  0030b	05		 DB	 5
  0030c	05		 DB	 5
  0030d	05		 DB	 5
  0030e	05		 DB	 5
  0030f	05		 DB	 5
  00310	05		 DB	 5
  00311	05		 DB	 5
  00312	05		 DB	 5
  00313	05		 DB	 5
  00314	05		 DB	 5
  00315	05		 DB	 5
  00316	05		 DB	 5
  00317	05		 DB	 5
  00318	05		 DB	 5
  00319	05		 DB	 5
  0031a	05		 DB	 5
  0031b	05		 DB	 5
  0031c	05		 DB	 5
  0031d	05		 DB	 5
  0031e	05		 DB	 5
  0031f	05		 DB	 5
  00320	05		 DB	 5
  00321	05		 DB	 5
  00322	00		 DB	 0
validate_atom ENDP
_TEXT	ENDS
PUBLIC	??_C@_05LKJGIMLP@yield?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_yield_expr DD imagerel validate_yield_expr
	DD	imagerel validate_yield_expr+142
	DD	imagerel $unwind$validate_yield_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_yield_expr DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_05LKJGIMLP@yield?$AA@
CONST	SEGMENT
??_C@_05LKJGIMLP@yield?$AA@ DB 'yield', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_yield_expr
_TEXT	SEGMENT
nch$ = 32
tree$ = 64
validate_yield_expr PROC				; COMDAT

; 1655 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1656 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 20	 mov	 DWORD PTR nch$[rsp], eax

; 1657 :     if (nch < 1 || nch > 2)

  00015	83 7c 24 20 01	 cmp	 DWORD PTR nch$[rsp], 1
  0001a	7c 07		 jl	 SHORT $LN5@validate_y
  0001c	83 7c 24 20 02	 cmp	 DWORD PTR nch$[rsp], 2
  00021	7e 04		 jle	 SHORT $LN6@validate_y
$LN5@validate_y:

; 1658 :         return 0;

  00023	33 c0		 xor	 eax, eax
  00025	eb 62		 jmp	 SHORT $LN7@validate_y
$LN6@validate_y:

; 1659 :     if (!validate_ntype(tree, yield_expr))

  00027	ba 50 01 00 00	 mov	 edx, 336		; 00000150H
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00031	e8 00 00 00 00	 call	 validate_ntype
  00036	85 c0		 test	 eax, eax
  00038	75 04		 jne	 SHORT $LN4@validate_y

; 1660 :         return 0;

  0003a	33 c0		 xor	 eax, eax
  0003c	eb 4b		 jmp	 SHORT $LN7@validate_y
$LN4@validate_y:

; 1661 :     if (!validate_name(CHILD(tree, 0), "yield"))

  0003e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05LKJGIMLP@yield?$AA@
  00045	ba 01 00 00 00	 mov	 edx, 1
  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0004f	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00053	e8 00 00 00 00	 call	 validate_terminal
  00058	85 c0		 test	 eax, eax
  0005a	75 04		 jne	 SHORT $LN3@validate_y

; 1662 :         return 0;

  0005c	33 c0		 xor	 eax, eax
  0005e	eb 29		 jmp	 SHORT $LN7@validate_y
$LN3@validate_y:

; 1663 :     if (nch == 2) {

  00060	83 7c 24 20 02	 cmp	 DWORD PTR nch$[rsp], 2
  00065	75 1d		 jne	 SHORT $LN2@validate_y

; 1664 :         if (!validate_yield_arg(CHILD(tree, 1)))

  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0006c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00070	48 83 c0 28	 add	 rax, 40			; 00000028H
  00074	48 8b c8	 mov	 rcx, rax
  00077	e8 00 00 00 00	 call	 validate_yield_arg
  0007c	85 c0		 test	 eax, eax
  0007e	75 04		 jne	 SHORT $LN1@validate_y

; 1665 :             return 0;

  00080	33 c0		 xor	 eax, eax
  00082	eb 05		 jmp	 SHORT $LN7@validate_y
$LN1@validate_y:
$LN2@validate_y:

; 1666 :     }
; 1667 :     return 1;

  00084	b8 01 00 00 00	 mov	 eax, 1
$LN7@validate_y:

; 1668 : }

  00089	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008d	c3		 ret	 0
validate_yield_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_04HNEBHLOP@from?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_yield_arg DD imagerel validate_yield_arg
	DD	imagerel validate_yield_arg+189
	DD	imagerel $unwind$validate_yield_arg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_yield_arg DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_04HNEBHLOP@from?$AA@
CONST	SEGMENT
??_C@_04HNEBHLOP@from?$AA@ DB 'from', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_yield_arg
_TEXT	SEGMENT
nch$ = 32
tv69 = 36
tree$ = 64
validate_yield_arg PROC					; COMDAT

; 1674 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1675 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 20	 mov	 DWORD PTR nch$[rsp], eax

; 1676 :     if (!validate_ntype(tree, yield_arg))

  00015	ba 51 01 00 00	 mov	 edx, 337		; 00000151H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	75 07		 jne	 SHORT $LN9@validate_y@2

; 1677 :         return 0;

  00028	33 c0		 xor	 eax, eax
  0002a	e9 89 00 00 00	 jmp	 $LN10@validate_y@2
$LN9@validate_y@2:

; 1678 :     switch (nch) {

  0002f	8b 44 24 20	 mov	 eax, DWORD PTR nch$[rsp]
  00033	89 44 24 24	 mov	 DWORD PTR tv69[rsp], eax
  00037	83 7c 24 24 01	 cmp	 DWORD PTR tv69[rsp], 1
  0003c	74 09		 je	 SHORT $LN6@validate_y@2
  0003e	83 7c 24 24 02	 cmp	 DWORD PTR tv69[rsp], 2
  00043	74 29		 je	 SHORT $LN4@validate_y@2
  00045	eb 68		 jmp	 SHORT $LN1@validate_y@2
$LN6@validate_y@2:

; 1679 :       case 1:
; 1680 :         if (!validate_testlist(CHILD(tree, nch - 1)))

  00047	8b 44 24 20	 mov	 eax, DWORD PTR nch$[rsp]
  0004b	ff c8		 dec	 eax
  0004d	48 98		 cdqe
  0004f	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00053	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00058	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 validate_testlist
  00064	85 c0		 test	 eax, eax
  00066	75 04		 jne	 SHORT $LN5@validate_y@2

; 1681 :             return 0;

  00068	33 c0		 xor	 eax, eax
  0006a	eb 4c		 jmp	 SHORT $LN10@validate_y@2
$LN5@validate_y@2:

; 1682 :         break;

  0006c	eb 45		 jmp	 SHORT $LN7@validate_y@2
$LN4@validate_y@2:

; 1683 :       case 2:
; 1684 :         if (!validate_name(CHILD(tree, 0), "from"))

  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04HNEBHLOP@from?$AA@
  00075	ba 01 00 00 00	 mov	 edx, 1
  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0007f	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00083	e8 00 00 00 00	 call	 validate_terminal
  00088	85 c0		 test	 eax, eax
  0008a	75 04		 jne	 SHORT $LN3@validate_y@2

; 1685 :             return 0;

  0008c	33 c0		 xor	 eax, eax
  0008e	eb 28		 jmp	 SHORT $LN10@validate_y@2
$LN3@validate_y@2:

; 1686 :         if (!validate_test(CHILD(tree, 1)))

  00090	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00095	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00099	48 83 c0 28	 add	 rax, 40			; 00000028H
  0009d	48 8b c8	 mov	 rcx, rax
  000a0	e8 00 00 00 00	 call	 validate_test
  000a5	85 c0		 test	 eax, eax
  000a7	75 04		 jne	 SHORT $LN2@validate_y@2

; 1687 :             return 0;

  000a9	33 c0		 xor	 eax, eax
  000ab	eb 0b		 jmp	 SHORT $LN10@validate_y@2
$LN2@validate_y@2:

; 1688 :         break;

  000ad	eb 04		 jmp	 SHORT $LN7@validate_y@2
$LN1@validate_y@2:

; 1689 :       default:
; 1690 :         return 0;

  000af	33 c0		 xor	 eax, eax
  000b1	eb 05		 jmp	 SHORT $LN10@validate_y@2
$LN7@validate_y@2:

; 1691 :     }
; 1692 :     return 1;

  000b3	b8 01 00 00 00	 mov	 eax, 1
$LN10@validate_y@2:

; 1693 : }

  000b8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bc	c3		 ret	 0
validate_yield_arg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@LKPLJEO@illegal?5trailing?5nodes?5for?5testl@ ; `string'
PUBLIC	??_C@_0CF@IEDODHFK@missing?5child?5nodes?5of?5testlist_@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_testlist_comp DD imagerel validate_testlist_comp
	DD	imagerel validate_testlist_comp+380
	DD	imagerel $unwind$validate_testlist_comp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_testlist_comp DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CJ@LKPLJEO@illegal?5trailing?5nodes?5for?5testl@
CONST	SEGMENT
??_C@_0CJ@LKPLJEO@illegal?5trailing?5nodes?5for?5testl@ DB 'illegal trail'
	DB	'ing nodes for testlist_comp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IEDODHFK@missing?5child?5nodes?5of?5testlist_@
CONST	SEGMENT
??_C@_0CF@IEDODHFK@missing?5child?5nodes?5of?5testlist_@ DB 'missing chil'
	DB	'd nodes of testlist_comp', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_testlist_comp
_TEXT	SEGMENT
ok$ = 32
nch$ = 36
i$23459 = 40
tv132 = 44
tree$ = 64
validate_testlist_comp PROC				; COMDAT

; 2452 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2453 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2454 :     int ok = nch;

  00015	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00019	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2455 : 
; 2456 :     if (nch == 0)

  0001d	83 7c 24 24 00	 cmp	 DWORD PTR nch$[rsp], 0
  00022	75 0e		 jne	 SHORT $LN9@validate_t@4

; 2457 :         err_string("missing child nodes of testlist_comp");

  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@IEDODHFK@missing?5child?5nodes?5of?5testlist_@
  0002b	e8 00 00 00 00	 call	 err_string

; 2458 :     else {

  00030	eb 12		 jmp	 SHORT $LN8@validate_t@4
$LN9@validate_t@4:

; 2459 :         ok = validate_test_or_star_expr(CHILD(tree, 0));

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00037	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0003b	e8 00 00 00 00	 call	 validate_test_or_star_expr
  00040	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax
$LN8@validate_t@4:

; 2460 :     }
; 2461 : 
; 2462 :     /*
; 2463 :      *  comp_for | (',' test)* [',']
; 2464 :      */
; 2465 :     if (nch == 2 && TYPE(CHILD(tree, 1)) == comp_for)

  00044	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  00049	75 32		 jne	 SHORT $LN7@validate_t@4
  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	0f bf 40 28	 movsx	 eax, WORD PTR [rax+40]
  00058	3d 4d 01 00 00	 cmp	 eax, 333		; 0000014dH
  0005d	75 1e		 jne	 SHORT $LN7@validate_t@4

; 2466 :         ok = validate_comp_for(CHILD(tree, 1));

  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00064	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00068	48 83 c0 28	 add	 rax, 40			; 00000028H
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 validate_comp_for
  00074	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2467 :     else {

  00078	e9 f6 00 00 00	 jmp	 $LN6@validate_t@4
$LN7@validate_t@4:

; 2468 :         /*  (',' test)* [',']  */
; 2469 :         int i = 1;

  0007d	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR i$23459[rsp], 1
$LN5@validate_t@4:

; 2470 :         while (ok && nch - i >= 2) {

  00085	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  0008a	0f 84 86 00 00
	00		 je	 $LN4@validate_t@4
  00090	8b 44 24 28	 mov	 eax, DWORD PTR i$23459[rsp]
  00094	8b 4c 24 24	 mov	 ecx, DWORD PTR nch$[rsp]
  00098	2b c8		 sub	 ecx, eax
  0009a	8b c1		 mov	 eax, ecx
  0009c	83 f8 02	 cmp	 eax, 2
  0009f	7c 75		 jl	 SHORT $LN4@validate_t@4

; 2471 :             ok = (validate_comma(CHILD(tree, i))
; 2472 :                   && validate_test_or_star_expr(CHILD(tree, i+1)));

  000a1	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$23459[rsp]
  000a6	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000aa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000af	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  000ba	ba 0c 00 00 00	 mov	 edx, 12
  000bf	48 8b c8	 mov	 rcx, rax
  000c2	e8 00 00 00 00	 call	 validate_terminal
  000c7	85 c0		 test	 eax, eax
  000c9	74 2b		 je	 SHORT $LN12@validate_t@4
  000cb	8b 44 24 28	 mov	 eax, DWORD PTR i$23459[rsp]
  000cf	ff c0		 inc	 eax
  000d1	48 98		 cdqe
  000d3	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000d7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000dc	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000e0	48 8b c8	 mov	 rcx, rax
  000e3	e8 00 00 00 00	 call	 validate_test_or_star_expr
  000e8	85 c0		 test	 eax, eax
  000ea	74 0a		 je	 SHORT $LN12@validate_t@4
  000ec	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000f4	eb 08		 jmp	 SHORT $LN13@validate_t@4
$LN12@validate_t@4:
  000f6	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN13@validate_t@4:
  000fe	8b 44 24 2c	 mov	 eax, DWORD PTR tv132[rsp]
  00102	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2473 :             i += 2;

  00106	8b 44 24 28	 mov	 eax, DWORD PTR i$23459[rsp]
  0010a	83 c0 02	 add	 eax, 2
  0010d	89 44 24 28	 mov	 DWORD PTR i$23459[rsp], eax

; 2474 :         }

  00111	e9 6f ff ff ff	 jmp	 $LN5@validate_t@4
$LN4@validate_t@4:

; 2475 :         if (ok && i == nch-1)

  00116	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  0011b	74 38		 je	 SHORT $LN3@validate_t@4
  0011d	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00121	ff c8		 dec	 eax
  00123	39 44 24 28	 cmp	 DWORD PTR i$23459[rsp], eax
  00127	75 2c		 jne	 SHORT $LN3@validate_t@4

; 2476 :             ok = validate_comma(CHILD(tree, i));

  00129	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$23459[rsp]
  0012e	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00132	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00137	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0013b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  00142	ba 0c 00 00 00	 mov	 edx, 12
  00147	48 8b c8	 mov	 rcx, rax
  0014a	e8 00 00 00 00	 call	 validate_terminal
  0014f	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax
  00153	eb 1e		 jmp	 SHORT $LN2@validate_t@4
$LN3@validate_t@4:

; 2477 :         else if (i != nch) {

  00155	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00159	39 44 24 28	 cmp	 DWORD PTR i$23459[rsp], eax
  0015d	74 14		 je	 SHORT $LN1@validate_t@4

; 2478 :             ok = 0;

  0015f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ok$[rsp], 0

; 2479 :             err_string("illegal trailing nodes for testlist_comp");

  00167	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@LKPLJEO@illegal?5trailing?5nodes?5for?5testl@
  0016e	e8 00 00 00 00	 call	 err_string
$LN1@validate_t@4:
$LN2@validate_t@4:
$LN6@validate_t@4:

; 2480 :         }
; 2481 :     }
; 2482 :     return ok;

  00173	8b 44 24 20	 mov	 eax, DWORD PTR ok$[rsp]

; 2483 : }

  00177	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0017b	c3		 ret	 0
validate_testlist_comp ENDP
_TEXT	ENDS
PUBLIC	??_C@_03JOHEBPFF@for?$AA@			; `string'
PUBLIC	??_C@_08GOBMKDGP@comp_for?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_comp_for DD imagerel validate_comp_for
	DD	imagerel validate_comp_for+246
	DD	imagerel $unwind$validate_comp_for
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_comp_for DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_03JOHEBPFF@for?$AA@
CONST	SEGMENT
??_C@_03JOHEBPFF@for?$AA@ DB 'for', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GOBMKDGP@comp_for?$AA@
CONST	SEGMENT
??_C@_08GOBMKDGP@comp_for?$AA@ DB 'comp_for', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_comp_for
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv130 = 40
tree$ = 64
validate_comp_for PROC					; COMDAT

; 1390 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1391 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1392 :     int res;
; 1393 : 
; 1394 :     if (nch == 5)

  00015	83 7c 24 24 05	 cmp	 DWORD PTR nch$[rsp], 5
  0001a	75 1d		 jne	 SHORT $LN3@validate_c@4

; 1395 :         res = validate_comp_iter(CHILD(tree, 4));

  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00021	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00025	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	e8 00 00 00 00	 call	 validate_comp_iter
  00033	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1396 :     else

  00037	eb 1a		 jmp	 SHORT $LN2@validate_c@4
$LN3@validate_c@4:

; 1397 :         res = validate_numnodes(tree, 4, "comp_for");

  00039	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08GOBMKDGP@comp_for?$AA@
  00040	ba 04 00 00 00	 mov	 edx, 4
  00045	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0004a	e8 00 00 00 00	 call	 validate_numnodes
  0004f	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN2@validate_c@4:

; 1398 : 
; 1399 :     if (res)

  00053	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00058	0f 84 8f 00 00
	00		 je	 $LN1@validate_c@4

; 1400 :         res = (validate_name(CHILD(tree, 0), "for")
; 1401 :                && validate_exprlist(CHILD(tree, 1))
; 1402 :                && validate_name(CHILD(tree, 2), "in")
; 1403 :                && validate_or_test(CHILD(tree, 3)));

  0005e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03JOHEBPFF@for?$AA@
  00065	ba 01 00 00 00	 mov	 edx, 1
  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0006f	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00073	e8 00 00 00 00	 call	 validate_terminal
  00078	85 c0		 test	 eax, eax
  0007a	74 61		 je	 SHORT $LN6@validate_c@4
  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00081	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00085	48 83 c0 28	 add	 rax, 40			; 00000028H
  00089	48 8b c8	 mov	 rcx, rax
  0008c	e8 00 00 00 00	 call	 validate_exprlist
  00091	85 c0		 test	 eax, eax
  00093	74 48		 je	 SHORT $LN6@validate_c@4
  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0009a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0009e	48 83 c0 50	 add	 rax, 80			; 00000050H
  000a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02LMMGJAGL@in?$AA@
  000a9	ba 01 00 00 00	 mov	 edx, 1
  000ae	48 8b c8	 mov	 rcx, rax
  000b1	e8 00 00 00 00	 call	 validate_terminal
  000b6	85 c0		 test	 eax, eax
  000b8	74 23		 je	 SHORT $LN6@validate_c@4
  000ba	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000bf	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000c3	48 83 c0 78	 add	 rax, 120		; 00000078H
  000c7	48 8b c8	 mov	 rcx, rax
  000ca	e8 00 00 00 00	 call	 validate_or_test
  000cf	85 c0		 test	 eax, eax
  000d1	74 0a		 je	 SHORT $LN6@validate_c@4
  000d3	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000db	eb 08		 jmp	 SHORT $LN7@validate_c@4
$LN6@validate_c@4:
  000dd	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN7@validate_c@4:
  000e5	8b 44 24 28	 mov	 eax, DWORD PTR tv130[rsp]
  000e9	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_c@4:

; 1404 : 
; 1405 :     return res;

  000ed	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1406 : }

  000f1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f5	c3		 ret	 0
validate_comp_for ENDP
_TEXT	ENDS
PUBLIC	??_C@_09NMELIJKE@comp_iter?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_comp_iter DD imagerel validate_comp_iter
	DD	imagerel validate_comp_iter+153
	DD	imagerel $unwind$validate_comp_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_comp_iter DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_09NMELIJKE@comp_iter?$AA@
CONST	SEGMENT
??_C@_09NMELIJKE@comp_iter?$AA@ DB 'comp_iter', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_comp_iter
_TEXT	SEGMENT
res$ = 32
tv73 = 36
tree$ = 64
validate_comp_iter PROC					; COMDAT

; 1375 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1376 :     int res = (validate_ntype(tree, comp_iter)
; 1377 :                && validate_numnodes(tree, 1, "comp_iter"));

  00009	ba 4c 01 00 00	 mov	 edx, 332		; 0000014cH
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00013	e8 00 00 00 00	 call	 validate_ntype
  00018	85 c0		 test	 eax, eax
  0001a	74 24		 je	 SHORT $LN5@validate_c@5
  0001c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09NMELIJKE@comp_iter?$AA@
  00023	ba 01 00 00 00	 mov	 edx, 1
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0002d	e8 00 00 00 00	 call	 validate_numnodes
  00032	85 c0		 test	 eax, eax
  00034	74 0a		 je	 SHORT $LN5@validate_c@5
  00036	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  0003e	eb 08		 jmp	 SHORT $LN6@validate_c@5
$LN5@validate_c@5:
  00040	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN6@validate_c@5:
  00048	8b 44 24 24	 mov	 eax, DWORD PTR tv73[rsp]
  0004c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1378 :     if (res && TYPE(CHILD(tree, 0)) == comp_for)

  00050	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00055	74 27		 je	 SHORT $LN2@validate_c@5
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0005c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00060	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00063	3d 4d 01 00 00	 cmp	 eax, 333		; 0000014dH
  00068	75 14		 jne	 SHORT $LN2@validate_c@5

; 1379 :         res = validate_comp_for(CHILD(tree, 0));

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0006f	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00073	e8 00 00 00 00	 call	 validate_comp_for
  00078	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1380 :     else

  0007c	eb 12		 jmp	 SHORT $LN1@validate_c@5
$LN2@validate_c@5:

; 1381 :         res = validate_comp_if(CHILD(tree, 0));

  0007e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00083	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00087	e8 00 00 00 00	 call	 validate_comp_if
  0008c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_c@5:

; 1382 : 
; 1383 :     return res;

  00090	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1384 : }

  00094	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00098	c3		 ret	 0
validate_comp_iter ENDP
_TEXT	ENDS
PUBLIC	??_C@_07BDDAGEPD@comp_if?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_comp_if DD imagerel validate_comp_if
	DD	imagerel validate_comp_if+178
	DD	imagerel $unwind$validate_comp_if
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_comp_if DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_07BDDAGEPD@comp_if?$AA@
CONST	SEGMENT
??_C@_07BDDAGEPD@comp_if?$AA@ DB 'comp_if', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_comp_if
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv86 = 40
tree$ = 64
validate_comp_if PROC					; COMDAT

; 1412 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1413 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1414 :     int res;
; 1415 : 
; 1416 :     if (nch == 3)

  00015	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  0001a	75 1b		 jne	 SHORT $LN3@validate_c@6

; 1417 :         res = validate_comp_iter(CHILD(tree, 2));

  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00021	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00025	48 83 c0 50	 add	 rax, 80			; 00000050H
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 validate_comp_iter
  00031	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1418 :     else

  00035	eb 1a		 jmp	 SHORT $LN2@validate_c@6
$LN3@validate_c@6:

; 1419 :         res = validate_numnodes(tree, 2, "comp_if");

  00037	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07BDDAGEPD@comp_if?$AA@
  0003e	ba 02 00 00 00	 mov	 edx, 2
  00043	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00048	e8 00 00 00 00	 call	 validate_numnodes
  0004d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN2@validate_c@6:

; 1420 : 
; 1421 :     if (res)

  00051	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00056	74 51		 je	 SHORT $LN1@validate_c@6

; 1422 :         res = (validate_name(CHILD(tree, 0), "if")
; 1423 :                && validate_test_nocond(CHILD(tree, 1)));

  00058	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HEBPBKGD@if?$AA@
  0005f	ba 01 00 00 00	 mov	 edx, 1
  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00069	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0006d	e8 00 00 00 00	 call	 validate_terminal
  00072	85 c0		 test	 eax, eax
  00074	74 23		 je	 SHORT $LN6@validate_c@6
  00076	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 83 c0 28	 add	 rax, 40			; 00000028H
  00083	48 8b c8	 mov	 rcx, rax
  00086	e8 00 00 00 00	 call	 validate_test_nocond
  0008b	85 c0		 test	 eax, eax
  0008d	74 0a		 je	 SHORT $LN6@validate_c@6
  0008f	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv86[rsp], 1
  00097	eb 08		 jmp	 SHORT $LN7@validate_c@6
$LN6@validate_c@6:
  00099	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN7@validate_c@6:
  000a1	8b 44 24 28	 mov	 eax, DWORD PTR tv86[rsp]
  000a5	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_c@6:

; 1424 : 
; 1425 :     return res;

  000a9	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1426 : }

  000ad	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b1	c3		 ret	 0
validate_comp_if ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_test_nocond DD imagerel validate_test_nocond
	DD	imagerel validate_test_nocond+153
	DD	imagerel $unwind$validate_test_nocond
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_test_nocond DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_test_nocond
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv70 = 40
tree$ = 64
validate_test_nocond PROC				; COMDAT

; 2093 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2094 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2095 :     int res = validate_ntype(tree, test_nocond) && (nch == 1);

  00015	ba 2f 01 00 00	 mov	 edx, 303		; 0000012fH
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 11		 je	 SHORT $LN6@validate_t@5
  00028	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0002d	75 0a		 jne	 SHORT $LN6@validate_t@5
  0002f	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  00037	eb 08		 jmp	 SHORT $LN7@validate_t@5
$LN6@validate_t@5:
  00039	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN7@validate_t@5:
  00041	8b 44 24 28	 mov	 eax, DWORD PTR tv70[rsp]
  00045	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2096 : 
; 2097 :     if (res && (TYPE(CHILD(tree, 0)) == lambdef_nocond))

  00049	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0004e	74 27		 je	 SHORT $LN3@validate_t@5
  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00055	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00059	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0005c	3d 31 01 00 00	 cmp	 eax, 305		; 00000131H
  00061	75 14		 jne	 SHORT $LN3@validate_t@5

; 2098 :         res = (validate_lambdef_nocond(CHILD(tree, 0)));

  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00068	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0006c	e8 00 00 00 00	 call	 validate_lambdef_nocond
  00071	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00075	eb 19		 jmp	 SHORT $LN2@validate_t@5
$LN3@validate_t@5:

; 2099 :     else if (res) {

  00077	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0007c	74 12		 je	 SHORT $LN1@validate_t@5

; 2100 :         res = (validate_or_test(CHILD(tree, 0)));

  0007e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00083	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00087	e8 00 00 00 00	 call	 validate_or_test
  0008c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_t@5:
$LN2@validate_t@5:

; 2101 :     }
; 2102 :     return (res);

  00090	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2103 : }

  00094	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00098	c3		 ret	 0
validate_test_nocond ENDP
_TEXT	ENDS
PUBLIC	??_C@_07KODPEPCE@lambdef?$AA@			; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_06COJIGPIB@lambda?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_lambdef DD imagerel validate_lambdef
	DD	imagerel validate_lambdef+282
	DD	imagerel $unwind$validate_lambdef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_lambdef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_07KODPEPCE@lambdef?$AA@
CONST	SEGMENT
??_C@_07KODPEPCE@lambdef?$AA@ DB 'lambdef', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06COJIGPIB@lambda?$AA@
CONST	SEGMENT
??_C@_06COJIGPIB@lambda?$AA@ DB 'lambda', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_lambdef
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv95 = 40
tree$ = 64
validate_lambdef PROC					; COMDAT

; 2613 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2614 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2615 :     int res = (validate_ntype(tree, lambdef)
; 2616 :                && ((nch == 3) || (nch == 4))
; 2617 :                && validate_name(CHILD(tree, 0), "lambda")
; 2618 :                && validate_colon(CHILD(tree, nch - 2))
; 2619 :                && validate_test(CHILD(tree, nch - 1)));

  00015	ba 30 01 00 00	 mov	 edx, 304		; 00000130H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	0f 84 85 00 00
	00		 je	 $LN7@validate_l
  0002c	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  00031	74 07		 je	 SHORT $LN6@validate_l
  00033	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  00038	75 77		 jne	 SHORT $LN7@validate_l
$LN6@validate_l:
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06COJIGPIB@lambda?$AA@
  00041	ba 01 00 00 00	 mov	 edx, 1
  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0004b	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0004f	e8 00 00 00 00	 call	 validate_terminal
  00054	85 c0		 test	 eax, eax
  00056	74 59		 je	 SHORT $LN7@validate_l
  00058	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0005c	83 e8 02	 sub	 eax, 2
  0005f	48 98		 cdqe
  00061	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00065	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0006a	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00075	ba 0b 00 00 00	 mov	 edx, 11
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 validate_terminal
  00082	85 c0		 test	 eax, eax
  00084	74 2b		 je	 SHORT $LN7@validate_l
  00086	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0008a	ff c8		 dec	 eax
  0008c	48 98		 cdqe
  0008e	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00092	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00097	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 validate_test
  000a3	85 c0		 test	 eax, eax
  000a5	74 0a		 je	 SHORT $LN7@validate_l
  000a7	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv95[rsp], 1
  000af	eb 08		 jmp	 SHORT $LN8@validate_l
$LN7@validate_l:
  000b1	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
$LN8@validate_l:
  000b9	8b 44 24 28	 mov	 eax, DWORD PTR tv95[rsp]
  000bd	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2620 : 
; 2621 :     if (res && (nch == 4))

  000c1	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000c6	74 22		 je	 SHORT $LN3@validate_l
  000c8	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  000cd	75 1b		 jne	 SHORT $LN3@validate_l

; 2622 :         res = validate_varargslist(CHILD(tree, 1));

  000cf	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000d4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000d8	48 83 c0 28	 add	 rax, 40			; 00000028H
  000dc	48 8b c8	 mov	 rcx, rax
  000df	e8 00 00 00 00	 call	 validate_varargslist
  000e4	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000e8	eb 27		 jmp	 SHORT $LN2@validate_l
$LN3@validate_l:

; 2623 :     else if (!res && !PyErr_Occurred())

  000ea	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000ef	75 20		 jne	 SHORT $LN1@validate_l
  000f1	e8 00 00 00 00	 call	 PyErr_Occurred
  000f6	48 85 c0	 test	 rax, rax
  000f9	75 16		 jne	 SHORT $LN1@validate_l

; 2624 :         (void) validate_numnodes(tree, 3, "lambdef");

  000fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07KODPEPCE@lambdef?$AA@
  00102	ba 03 00 00 00	 mov	 edx, 3
  00107	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0010c	e8 00 00 00 00	 call	 validate_numnodes
$LN1@validate_l:
$LN2@validate_l:

; 2625 : 
; 2626 :     return (res);

  00111	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2627 : }

  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
validate_lambdef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@HEHOEFB@illegal?5formation?5for?5varargslis@ ; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN?$AA@			; `string'
PUBLIC	??_C@_0CA@BFNDAGCM@varargslist?5missing?5child?5nodes?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_varargslist DD imagerel validate_varargslist
	DD	imagerel validate_varargslist+544
	DD	imagerel $unwind$validate_varargslist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_varargslist DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0CC@HEHOEFB@illegal?5formation?5for?5varargslis@
CONST	SEGMENT
??_C@_0CC@HEHOEFB@illegal?5formation?5for?5varargslis@ DB 'illegal format'
	DB	'ion for varargslist', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN?$AA@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN?$AA@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BFNDAGCM@varargslist?5missing?5child?5nodes?$AA@
CONST	SEGMENT
??_C@_0CA@BFNDAGCM@varargslist?5missing?5child?5nodes?$AA@ DB 'varargslis'
	DB	't missing child nodes', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_varargslist
_TEXT	SEGMENT
res$ = 32
i$ = 36
sym$ = 40
ch$ = 48
nch$ = 56
tv70 = 60
tv143 = 64
tree$ = 96
validate_varargslist PROC				; COMDAT

; 1327 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1328 :     int nch = NCH(tree);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 38	 mov	 DWORD PTR nch$[rsp], eax

; 1329 :     int res = (TYPE(tree) == varargslist ||
; 1330 :                TYPE(tree) == typedargslist) &&
; 1331 :               (nch != 0);

  00015	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  0001a	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0001d	3d 0a 01 00 00	 cmp	 eax, 266		; 0000010aH
  00022	74 0f		 je	 SHORT $LN16@validate_v
  00024	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  00029	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0002c	3d 08 01 00 00	 cmp	 eax, 264		; 00000108H
  00031	75 11		 jne	 SHORT $LN17@validate_v
$LN16@validate_v:
  00033	83 7c 24 38 00	 cmp	 DWORD PTR nch$[rsp], 0
  00038	74 0a		 je	 SHORT $LN17@validate_v
  0003a	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  00042	eb 08		 jmp	 SHORT $LN18@validate_v
$LN17@validate_v:
  00044	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN18@validate_v:
  0004c	8b 44 24 3c	 mov	 eax, DWORD PTR tv70[rsp]
  00050	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1332 :     int sym;
; 1333 :     node *ch;
; 1334 :     int i = 0;

  00054	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 1335 : 
; 1336 :     if (!res)

  0005c	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00061	75 07		 jne	 SHORT $LN13@validate_v

; 1337 :         return 0;

  00063	33 c0		 xor	 eax, eax
  00065	e9 b1 01 00 00	 jmp	 $LN14@validate_v
$LN13@validate_v:

; 1338 :     if (nch < 1) {

  0006a	83 7c 24 38 01	 cmp	 DWORD PTR nch$[rsp], 1
  0006f	7d 13		 jge	 SHORT $LN12@validate_v

; 1339 :         err_string("varargslist missing child nodes");

  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@BFNDAGCM@varargslist?5missing?5child?5nodes?$AA@
  00078	e8 00 00 00 00	 call	 err_string

; 1340 :         return 0;

  0007d	33 c0		 xor	 eax, eax
  0007f	e9 97 01 00 00	 jmp	 $LN14@validate_v
$LN12@validate_v:
$LN11@validate_v:

; 1341 :     }
; 1342 :     while (i < nch) {

  00084	8b 44 24 38	 mov	 eax, DWORD PTR nch$[rsp]
  00088	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  0008c	0f 8d 85 01 00
	00		 jge	 $LN10@validate_v

; 1343 :         ch = CHILD(tree, i);

  00092	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00097	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0009b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  000a0	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000a4	48 89 44 24 30	 mov	 QWORD PTR ch$[rsp], rax

; 1344 :         sym = TYPE(ch);

  000a9	48 8b 44 24 30	 mov	 rax, QWORD PTR ch$[rsp]
  000ae	0f bf 00	 movsx	 eax, WORD PTR [rax]
  000b1	89 44 24 28	 mov	 DWORD PTR sym$[rsp], eax

; 1345 :         if (sym == vfpdef || sym == tfpdef) {

  000b5	81 7c 24 28 0b
	01 00 00	 cmp	 DWORD PTR sym$[rsp], 267 ; 0000010bH
  000bd	74 0e		 je	 SHORT $LN8@validate_v
  000bf	81 7c 24 28 09
	01 00 00	 cmp	 DWORD PTR sym$[rsp], 265 ; 00000109H
  000c7	0f 85 0d 01 00
	00		 jne	 $LN9@validate_v
$LN8@validate_v:

; 1346 :             /* validate (vfpdef ['=' test] ',')+ */
; 1347 :             res = validate_vfpdef(ch);

  000cd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ch$[rsp]
  000d2	e8 00 00 00 00	 call	 validate_vfpdef
  000d7	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1348 :             ++i;

  000db	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000df	ff c0		 inc	 eax
  000e1	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax

; 1349 :             if (res && (i+2 <= nch) && TYPE(CHILD(tree, i)) == EQUAL) {

  000e5	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000ea	0f 84 a3 00 00
	00		 je	 $LN7@validate_v
  000f0	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000f4	83 c0 02	 add	 eax, 2
  000f7	3b 44 24 38	 cmp	 eax, DWORD PTR nch$[rsp]
  000fb	0f 8f 92 00 00
	00		 jg	 $LN7@validate_v
  00101	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00106	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0010a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0010f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00113	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00117	83 f8 16	 cmp	 eax, 22
  0011a	75 77		 jne	 SHORT $LN7@validate_v

; 1350 :                 res = (validate_equal(CHILD(tree, i))
; 1351 :                        && validate_test(CHILD(tree, i+1)));

  0011c	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00121	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00125	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0012a	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0012e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NEMOKFLO@?$DN?$AA@
  00135	ba 16 00 00 00	 mov	 edx, 22
  0013a	48 8b c8	 mov	 rcx, rax
  0013d	e8 00 00 00 00	 call	 validate_terminal
  00142	85 c0		 test	 eax, eax
  00144	74 2b		 je	 SHORT $LN19@validate_v
  00146	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0014a	ff c0		 inc	 eax
  0014c	48 98		 cdqe
  0014e	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00152	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00157	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0015b	48 8b c8	 mov	 rcx, rax
  0015e	e8 00 00 00 00	 call	 validate_test
  00163	85 c0		 test	 eax, eax
  00165	74 0a		 je	 SHORT $LN19@validate_v
  00167	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  0016f	eb 08		 jmp	 SHORT $LN20@validate_v
$LN19@validate_v:
  00171	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN20@validate_v:
  00179	8b 44 24 40	 mov	 eax, DWORD PTR tv143[rsp]
  0017d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1352 :                 if (res)

  00181	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00186	74 0b		 je	 SHORT $LN6@validate_v

; 1353 :                   i += 2;

  00188	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0018c	83 c0 02	 add	 eax, 2
  0018f	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN6@validate_v:
$LN7@validate_v:

; 1354 :             }
; 1355 :             if (res && i < nch) {

  00193	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00198	74 3e		 je	 SHORT $LN5@validate_v
  0019a	8b 44 24 38	 mov	 eax, DWORD PTR nch$[rsp]
  0019e	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  001a2	7d 34		 jge	 SHORT $LN5@validate_v

; 1356 :                 res = validate_comma(CHILD(tree, i));

  001a4	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  001a9	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001ad	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  001b2	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  001b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  001bd	ba 0c 00 00 00	 mov	 edx, 12
  001c2	48 8b c8	 mov	 rcx, rax
  001c5	e8 00 00 00 00	 call	 validate_terminal
  001ca	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1357 :                 ++i;

  001ce	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  001d2	ff c0		 inc	 eax
  001d4	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN5@validate_v:

; 1358 :             }

  001d8	eb 38		 jmp	 SHORT $LN4@validate_v
$LN9@validate_v:

; 1359 :         } else if (sym == DOUBLESTAR || sym == STAR) {

  001da	83 7c 24 28 23	 cmp	 DWORD PTR sym$[rsp], 35	; 00000023H
  001df	74 07		 je	 SHORT $LN2@validate_v
  001e1	83 7c 24 28 10	 cmp	 DWORD PTR sym$[rsp], 16
  001e6	75 16		 jne	 SHORT $LN3@validate_v
$LN2@validate_v:

; 1360 :             res = validate_varargslist_trailer(tree, i);

  001e8	8b 54 24 24	 mov	 edx, DWORD PTR i$[rsp]
  001ec	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  001f1	e8 00 00 00 00	 call	 validate_varargslist_trailer
  001f6	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1361 :             break;

  001fa	eb 1b		 jmp	 SHORT $LN10@validate_v

; 1362 :         } else {

  001fc	eb 14		 jmp	 SHORT $LN1@validate_v
$LN3@validate_v:

; 1363 :             res = 0;

  001fe	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 1364 :             err_string("illegal formation for varargslist");

  00206	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@HEHOEFB@illegal?5formation?5for?5varargslis@
  0020d	e8 00 00 00 00	 call	 err_string
$LN1@validate_v:
$LN4@validate_v:

; 1365 :         }
; 1366 :     }

  00212	e9 6d fe ff ff	 jmp	 $LN11@validate_v
$LN10@validate_v:

; 1367 :     return res;

  00217	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN14@validate_v:

; 1368 : }

  0021b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0021f	c3		 ret	 0
validate_varargslist ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_vfpdef DD imagerel validate_vfpdef
	DD	imagerel validate_vfpdef+279
	DD	imagerel $unwind$validate_vfpdef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_vfpdef DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_vfpdef
_TEXT	SEGMENT
nch$ = 32
tv74 = 36
tv134 = 40
tree$ = 64
validate_vfpdef PROC					; COMDAT

; 1225 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1226 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 20	 mov	 DWORD PTR nch$[rsp], eax

; 1227 :     if (TYPE(tree) == vfpdef) {

  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0001a	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0001d	3d 0b 01 00 00	 cmp	 eax, 267		; 0000010bH
  00022	75 41		 jne	 SHORT $LN6@validate_v@2

; 1228 :         return nch == 1 && validate_name(CHILD(tree, 0), NULL);

  00024	83 7c 24 20 01	 cmp	 DWORD PTR nch$[rsp], 1
  00029	75 24		 jne	 SHORT $LN9@validate_v@2
  0002b	45 33 c0	 xor	 r8d, r8d
  0002e	ba 01 00 00 00	 mov	 edx, 1
  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00038	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0003c	e8 00 00 00 00	 call	 validate_terminal
  00041	85 c0		 test	 eax, eax
  00043	74 0a		 je	 SHORT $LN9@validate_v@2
  00045	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0004d	eb 08		 jmp	 SHORT $LN10@validate_v@2
$LN9@validate_v@2:
  0004f	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@validate_v@2:
  00057	8b 44 24 24	 mov	 eax, DWORD PTR tv74[rsp]
  0005b	e9 b2 00 00 00	 jmp	 $LN7@validate_v@2
  00060	e9 ab 00 00 00	 jmp	 $LN5@validate_v@2
$LN6@validate_v@2:

; 1229 :     }
; 1230 :     else if (TYPE(tree) == tfpdef) {

  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0006a	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0006d	3d 09 01 00 00	 cmp	 eax, 265		; 00000109H
  00072	0f 85 98 00 00
	00		 jne	 $LN4@validate_v@2

; 1231 :         if (nch == 1) {

  00078	83 7c 24 20 01	 cmp	 DWORD PTR nch$[rsp], 1
  0007d	75 1a		 jne	 SHORT $LN3@validate_v@2

; 1232 :             return validate_name(CHILD(tree, 0), NULL);

  0007f	45 33 c0	 xor	 r8d, r8d
  00082	ba 01 00 00 00	 mov	 edx, 1
  00087	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0008c	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00090	e8 00 00 00 00	 call	 validate_terminal
  00095	eb 7b		 jmp	 SHORT $LN7@validate_v@2
  00097	eb 77		 jmp	 SHORT $LN2@validate_v@2
$LN3@validate_v@2:

; 1233 :         }
; 1234 :         else if (nch == 3) {

  00099	83 7c 24 20 03	 cmp	 DWORD PTR nch$[rsp], 3
  0009e	75 70		 jne	 SHORT $LN1@validate_v@2

; 1235 :             return validate_name(CHILD(tree, 0), NULL) &&
; 1236 :                    validate_colon(CHILD(tree, 1)) &&
; 1237 :                    validate_test(CHILD(tree, 2));

  000a0	45 33 c0	 xor	 r8d, r8d
  000a3	ba 01 00 00 00	 mov	 edx, 1
  000a8	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000ad	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  000b1	e8 00 00 00 00	 call	 validate_terminal
  000b6	85 c0		 test	 eax, eax
  000b8	74 48		 je	 SHORT $LN11@validate_v@2
  000ba	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000bf	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000c3	48 83 c0 28	 add	 rax, 40			; 00000028H
  000c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000ce	ba 0b 00 00 00	 mov	 edx, 11
  000d3	48 8b c8	 mov	 rcx, rax
  000d6	e8 00 00 00 00	 call	 validate_terminal
  000db	85 c0		 test	 eax, eax
  000dd	74 23		 je	 SHORT $LN11@validate_v@2
  000df	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000e4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000e8	48 83 c0 50	 add	 rax, 80			; 00000050H
  000ec	48 8b c8	 mov	 rcx, rax
  000ef	e8 00 00 00 00	 call	 validate_test
  000f4	85 c0		 test	 eax, eax
  000f6	74 0a		 je	 SHORT $LN11@validate_v@2
  000f8	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv134[rsp], 1
  00100	eb 08		 jmp	 SHORT $LN12@validate_v@2
$LN11@validate_v@2:
  00102	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv134[rsp], 0
$LN12@validate_v@2:
  0010a	8b 44 24 28	 mov	 eax, DWORD PTR tv134[rsp]
  0010e	eb 02		 jmp	 SHORT $LN7@validate_v@2
$LN1@validate_v@2:
$LN2@validate_v@2:
$LN4@validate_v@2:
$LN5@validate_v@2:

; 1238 :         }
; 1239 :     }
; 1240 :     return 0;

  00110	33 c0		 xor	 eax, eax
$LN7@validate_v@2:

; 1241 : }

  00112	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00116	c3		 ret	 0
validate_vfpdef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@DKCHLGHN@unexpected?5extra?5children?5in?5var@ ; `string'
PUBLIC	??_C@_0CI@EOOFKHNC@expected?5?$CK?5or?5?$CK?$CK?5in?5varargslist?5@ ; `string'
PUBLIC	??_C@_0DA@FACEPCPA@expected?5vfpdef?5after?5?$CK?$CK?5in?5vara@ ; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
PUBLIC	??_C@_0DD@BKLPCAMF@expected?5variable?5argument?5trail@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_varargslist_trailer DD imagerel validate_varargslist_trailer
	DD	imagerel validate_varargslist_trailer+1508
	DD	imagerel $unwind$validate_varargslist_trailer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_varargslist_trailer DD 021001H
	DD	0150110H
xdata	ENDS
;	COMDAT ??_C@_0DB@DKCHLGHN@unexpected?5extra?5children?5in?5var@
CONST	SEGMENT
??_C@_0DB@DKCHLGHN@unexpected?5extra?5children?5in?5var@ DB 'unexpected e'
	DB	'xtra children in varargslist trailer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EOOFKHNC@expected?5?$CK?5or?5?$CK?$CK?5in?5varargslist?5@
CONST	SEGMENT
??_C@_0CI@EOOFKHNC@expected?5?$CK?5or?5?$CK?$CK?5in?5varargslist?5@ DB 'e'
	DB	'xpected * or ** in varargslist trailer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@FACEPCPA@expected?5vfpdef?5after?5?$CK?$CK?5in?5vara@
CONST	SEGMENT
??_C@_0DA@FACEPCPA@expected?5vfpdef?5after?5?$CK?$CK?5in?5vara@ DB 'expec'
	DB	'ted vfpdef after ** in varargslist trailer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@BKLPCAMF@expected?5variable?5argument?5trail@
CONST	SEGMENT
??_C@_0DD@BKLPCAMF@expected?5variable?5argument?5trail@ DB 'expected vari'
	DB	'able argument trailer for varargslist', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_varargslist_trailer
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv81 = 40
tv135 = 48
tv162 = 56
tv170 = 64
tv174 = 72
tv192 = 80
tv200 = 88
tv204 = 96
tv223 = 104
tv233 = 112
tv243 = 120
tv246 = 128
tv263 = 136
tv271 = 144
tv275 = 152
tree$ = 176
start$ = 184
validate_varargslist_trailer PROC			; COMDAT

; 1248 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1249 :     int nch = NCH(tree);

  00010	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tree$[rsp]
  00018	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0001b	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1250 :     int res = 0;

  0001f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 1251 : 
; 1252 :     if (nch <= start) {

  00027	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  0002e	39 44 24 24	 cmp	 DWORD PTR nch$[rsp], eax
  00032	7f 13		 jg	 SHORT $LN15@validate_v@3

; 1253 :         err_string("expected variable argument trailer for varargslist");

  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@BKLPCAMF@expected?5variable?5argument?5trail@
  0003b	e8 00 00 00 00	 call	 err_string

; 1254 :         return 0;

  00040	33 c0		 xor	 eax, eax
  00042	e9 95 05 00 00	 jmp	 $LN16@validate_v@3
$LN15@validate_v@3:

; 1255 :     }
; 1256 :     if (TYPE(CHILD(tree, start)) == STAR) {

  00047	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  0004f	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00053	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  0005b	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0005f	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00063	83 f8 10	 cmp	 eax, 16
  00066	0f 85 29 04 00
	00		 jne	 $LN14@validate_v@3

; 1257 :         /*
; 1258 :          * '*' [vfpdef]
; 1259 :          */
; 1260 :         res = validate_star(CHILD(tree, start++));

  0006c	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  00074	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00078	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00080	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00084	48 03 c8	 add	 rcx, rax
  00087	48 89 4c 24 28	 mov	 QWORD PTR tv81[rsp], rcx
  0008c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NBENCBCI@?$CK?$AA@
  00093	ba 10 00 00 00	 mov	 edx, 16
  00098	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv81[rsp]
  0009d	e8 00 00 00 00	 call	 validate_terminal
  000a2	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000a6	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  000ad	ff c0		 inc	 eax
  000af	89 84 24 b8 00
	00 00		 mov	 DWORD PTR start$[rsp], eax

; 1261 :         if (res && start < nch && (TYPE(CHILD(tree, start)) == vfpdef ||
; 1262 :                                    TYPE(CHILD(tree, start)) == tfpdef))

  000b6	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000bb	0f 84 95 00 00
	00		 je	 $LN13@validate_v@3
  000c1	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000c5	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR start$[rsp], eax
  000cc	0f 8d 84 00 00
	00		 jge	 $LN13@validate_v@3
  000d2	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  000da	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000de	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  000e6	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000ea	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  000ee	3d 0b 01 00 00	 cmp	 eax, 267		; 0000010bH
  000f3	74 23		 je	 SHORT $LN12@validate_v@3
  000f5	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  000fd	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00101	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00109	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0010d	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00111	3d 09 01 00 00	 cmp	 eax, 265		; 00000109H
  00116	75 3e		 jne	 SHORT $LN13@validate_v@3
$LN12@validate_v@3:

; 1263 :             res = validate_vfpdef(CHILD(tree, start++));

  00118	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  00120	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00124	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  0012c	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00130	48 03 c8	 add	 rcx, rax
  00133	48 89 4c 24 30	 mov	 QWORD PTR tv135[rsp], rcx
  00138	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv135[rsp]
  0013d	e8 00 00 00 00	 call	 validate_vfpdef
  00142	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00146	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  0014d	ff c0		 inc	 eax
  0014f	89 84 24 b8 00
	00 00		 mov	 DWORD PTR start$[rsp], eax
$LN13@validate_v@3:
$LN11@validate_v@3:

; 1264 :         /*
; 1265 :          * (',' vfpdef ['=' test])*
; 1266 :          */
; 1267 :         while (res && start + 1 < nch && (
; 1268 :                    TYPE(CHILD(tree, start + 1)) == vfpdef ||
; 1269 :                    TYPE(CHILD(tree, start + 1)) == tfpdef)) {

  00156	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0015b	0f 84 ef 01 00
	00		 je	 $LN10@validate_v@3
  00161	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  00168	ff c0		 inc	 eax
  0016a	3b 44 24 24	 cmp	 eax, DWORD PTR nch$[rsp]
  0016e	0f 8d dc 01 00
	00		 jge	 $LN10@validate_v@3
  00174	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  0017b	ff c0		 inc	 eax
  0017d	48 98		 cdqe
  0017f	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00183	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  0018b	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0018f	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00193	3d 0b 01 00 00	 cmp	 eax, 267		; 0000010bH
  00198	74 2a		 je	 SHORT $LN9@validate_v@3
  0019a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  001a1	ff c0		 inc	 eax
  001a3	48 98		 cdqe
  001a5	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001a9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  001b1	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  001b5	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  001b9	3d 09 01 00 00	 cmp	 eax, 265		; 00000109H
  001be	0f 85 8c 01 00
	00		 jne	 $LN10@validate_v@3
$LN9@validate_v@3:

; 1270 :             res = (validate_comma(CHILD(tree, start++))
; 1271 :                    && validate_vfpdef(CHILD(tree, start++)));

  001c4	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  001cc	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001d0	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  001d8	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  001dc	48 03 c8	 add	 rcx, rax
  001df	48 89 4c 24 38	 mov	 QWORD PTR tv162[rsp], rcx
  001e4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  001eb	ba 0c 00 00 00	 mov	 edx, 12
  001f0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv162[rsp]
  001f5	e8 00 00 00 00	 call	 validate_terminal
  001fa	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR start$[rsp]
  00201	ff c1		 inc	 ecx
  00203	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR start$[rsp], ecx
  0020a	85 c0		 test	 eax, eax
  0020c	74 48		 je	 SHORT $LN18@validate_v@3
  0020e	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  00216	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0021a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00222	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00226	48 03 c8	 add	 rcx, rax
  00229	48 89 4c 24 40	 mov	 QWORD PTR tv170[rsp], rcx
  0022e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv170[rsp]
  00233	e8 00 00 00 00	 call	 validate_vfpdef
  00238	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR start$[rsp]
  0023f	ff c1		 inc	 ecx
  00241	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR start$[rsp], ecx
  00248	85 c0		 test	 eax, eax
  0024a	74 0a		 je	 SHORT $LN18@validate_v@3
  0024c	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv174[rsp], 1
  00254	eb 08		 jmp	 SHORT $LN19@validate_v@3
$LN18@validate_v@3:
  00256	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv174[rsp], 0
$LN19@validate_v@3:
  0025e	8b 44 24 48	 mov	 eax, DWORD PTR tv174[rsp]
  00262	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1272 :             if (res && start + 1 < nch && TYPE(CHILD(tree, start)) == EQUAL)

  00266	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0026b	0f 84 da 00 00
	00		 je	 $LN8@validate_v@3
  00271	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  00278	ff c0		 inc	 eax
  0027a	3b 44 24 24	 cmp	 eax, DWORD PTR nch$[rsp]
  0027e	0f 8d c7 00 00
	00		 jge	 $LN8@validate_v@3
  00284	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  0028c	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00290	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00298	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0029c	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  002a0	83 f8 16	 cmp	 eax, 22
  002a3	0f 85 a2 00 00
	00		 jne	 $LN8@validate_v@3

; 1273 :                 res = (validate_equal(CHILD(tree, start++))
; 1274 :                        && validate_test(CHILD(tree, start++)));

  002a9	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  002b1	48 6b c0 28	 imul	 rax, 40			; 00000028H
  002b5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  002bd	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  002c1	48 03 c8	 add	 rcx, rax
  002c4	48 89 4c 24 50	 mov	 QWORD PTR tv192[rsp], rcx
  002c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NEMOKFLO@?$DN?$AA@
  002d0	ba 16 00 00 00	 mov	 edx, 22
  002d5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv192[rsp]
  002da	e8 00 00 00 00	 call	 validate_terminal
  002df	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR start$[rsp]
  002e6	ff c1		 inc	 ecx
  002e8	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR start$[rsp], ecx
  002ef	85 c0		 test	 eax, eax
  002f1	74 48		 je	 SHORT $LN20@validate_v@3
  002f3	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  002fb	48 6b c0 28	 imul	 rax, 40			; 00000028H
  002ff	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00307	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0030b	48 03 c8	 add	 rcx, rax
  0030e	48 89 4c 24 58	 mov	 QWORD PTR tv200[rsp], rcx
  00313	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv200[rsp]
  00318	e8 00 00 00 00	 call	 validate_test
  0031d	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR start$[rsp]
  00324	ff c1		 inc	 ecx
  00326	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR start$[rsp], ecx
  0032d	85 c0		 test	 eax, eax
  0032f	74 0a		 je	 SHORT $LN20@validate_v@3
  00331	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv204[rsp], 1
  00339	eb 08		 jmp	 SHORT $LN21@validate_v@3
$LN20@validate_v@3:
  0033b	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv204[rsp], 0
$LN21@validate_v@3:
  00343	8b 44 24 60	 mov	 eax, DWORD PTR tv204[rsp]
  00347	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN8@validate_v@3:

; 1275 :         }

  0034b	e9 06 fe ff ff	 jmp	 $LN11@validate_v@3
$LN10@validate_v@3:

; 1276 :         /*
; 1277 :          * [',' '**' vfpdef]
; 1278 :          */
; 1279 :         if (res && start + 2 < nch && TYPE(CHILD(tree, start+1)) == DOUBLESTAR)

  00350	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00355	0f 84 35 01 00
	00		 je	 $LN7@validate_v@3
  0035b	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  00362	83 c0 02	 add	 eax, 2
  00365	3b 44 24 24	 cmp	 eax, DWORD PTR nch$[rsp]
  00369	0f 8d 21 01 00
	00		 jge	 $LN7@validate_v@3
  0036f	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  00376	ff c0		 inc	 eax
  00378	48 98		 cdqe
  0037a	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0037e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00386	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0038a	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  0038e	83 f8 23	 cmp	 eax, 35			; 00000023H
  00391	0f 85 f9 00 00
	00		 jne	 $LN7@validate_v@3

; 1280 :             res = (validate_comma(CHILD(tree, start++))
; 1281 :                    && validate_doublestar(CHILD(tree, start++))
; 1282 :                    && validate_vfpdef(CHILD(tree, start++)));

  00397	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  0039f	48 6b c0 28	 imul	 rax, 40			; 00000028H
  003a3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  003ab	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  003af	48 03 c8	 add	 rcx, rax
  003b2	48 89 4c 24 68	 mov	 QWORD PTR tv223[rsp], rcx
  003b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  003be	ba 0c 00 00 00	 mov	 edx, 12
  003c3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv223[rsp]
  003c8	e8 00 00 00 00	 call	 validate_terminal
  003cd	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR start$[rsp]
  003d4	ff c1		 inc	 ecx
  003d6	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR start$[rsp], ecx
  003dd	85 c0		 test	 eax, eax
  003df	0f 84 95 00 00
	00		 je	 $LN22@validate_v@3
  003e5	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  003ed	48 6b c0 28	 imul	 rax, 40			; 00000028H
  003f1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  003f9	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  003fd	48 03 c8	 add	 rcx, rax
  00400	48 89 4c 24 70	 mov	 QWORD PTR tv233[rsp], rcx
  00405	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FKAPCJPD@?$CK?$CK?$AA@
  0040c	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  00411	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv233[rsp]
  00416	e8 00 00 00 00	 call	 validate_terminal
  0041b	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR start$[rsp]
  00422	ff c1		 inc	 ecx
  00424	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR start$[rsp], ecx
  0042b	85 c0		 test	 eax, eax
  0042d	74 4b		 je	 SHORT $LN22@validate_v@3
  0042f	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  00437	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0043b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00443	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00447	48 03 c8	 add	 rcx, rax
  0044a	48 89 4c 24 78	 mov	 QWORD PTR tv243[rsp], rcx
  0044f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv243[rsp]
  00454	e8 00 00 00 00	 call	 validate_vfpdef
  00459	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR start$[rsp]
  00460	ff c1		 inc	 ecx
  00462	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR start$[rsp], ecx
  00469	85 c0		 test	 eax, eax
  0046b	74 0d		 je	 SHORT $LN22@validate_v@3
  0046d	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv246[rsp], 1
  00478	eb 0b		 jmp	 SHORT $LN23@validate_v@3
$LN22@validate_v@3:
  0047a	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv246[rsp], 0
$LN23@validate_v@3:
  00485	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv246[rsp]
  0048c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN7@validate_v@3:

; 1283 :     }
; 1284 :     else if (TYPE(CHILD(tree, start)) == DOUBLESTAR) {

  00490	e9 1b 01 00 00	 jmp	 $LN6@validate_v@3
$LN14@validate_v@3:
  00495	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  0049d	48 6b c0 28	 imul	 rax, 40			; 00000028H
  004a1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  004a9	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  004ad	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  004b1	83 f8 23	 cmp	 eax, 35			; 00000023H
  004b4	0f 85 e2 00 00
	00		 jne	 $LN5@validate_v@3

; 1285 :         /*
; 1286 :          * '**' vfpdef
; 1287 :          */
; 1288 :         if (start + 1 < nch)

  004ba	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  004c1	ff c0		 inc	 eax
  004c3	3b 44 24 24	 cmp	 eax, DWORD PTR nch$[rsp]
  004c7	0f 8d b9 00 00
	00		 jge	 $LN4@validate_v@3

; 1289 :             res = (validate_doublestar(CHILD(tree, start++))
; 1290 :                    && validate_vfpdef(CHILD(tree, start++)));

  004cd	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  004d5	48 6b c0 28	 imul	 rax, 40			; 00000028H
  004d9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  004e1	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  004e5	48 03 c8	 add	 rcx, rax
  004e8	48 89 8c 24 88
	00 00 00	 mov	 QWORD PTR tv263[rsp], rcx
  004f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FKAPCJPD@?$CK?$CK?$AA@
  004f7	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  004fc	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv263[rsp]
  00504	e8 00 00 00 00	 call	 validate_terminal
  00509	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR start$[rsp]
  00510	ff c1		 inc	 ecx
  00512	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR start$[rsp], ecx
  00519	85 c0		 test	 eax, eax
  0051b	74 51		 je	 SHORT $LN24@validate_v@3
  0051d	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR start$[rsp]
  00525	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00529	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00531	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00535	48 03 c8	 add	 rcx, rax
  00538	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv271[rsp], rcx
  00540	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv271[rsp]
  00548	e8 00 00 00 00	 call	 validate_vfpdef
  0054d	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR start$[rsp]
  00554	ff c1		 inc	 ecx
  00556	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR start$[rsp], ecx
  0055d	85 c0		 test	 eax, eax
  0055f	74 0d		 je	 SHORT $LN24@validate_v@3
  00561	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv275[rsp], 1
  0056c	eb 0b		 jmp	 SHORT $LN25@validate_v@3
$LN24@validate_v@3:
  0056e	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv275[rsp], 0
$LN25@validate_v@3:
  00579	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv275[rsp]
  00580	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1291 :         else {

  00584	eb 14		 jmp	 SHORT $LN3@validate_v@3
$LN4@validate_v@3:

; 1292 :             res = 0;

  00586	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 1293 :             err_string("expected vfpdef after ** in varargslist trailer");

  0058e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@FACEPCPA@expected?5vfpdef?5after?5?$CK?$CK?5in?5vara@
  00595	e8 00 00 00 00	 call	 err_string
$LN3@validate_v@3:

; 1294 :         }
; 1295 :     }
; 1296 :     else {

  0059a	eb 14		 jmp	 SHORT $LN2@validate_v@3
$LN5@validate_v@3:

; 1297 :         res = 0;

  0059c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 1298 :         err_string("expected * or ** in varargslist trailer");

  005a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@EOOFKHNC@expected?5?$CK?5or?5?$CK?$CK?5in?5varargslist?5@
  005ab	e8 00 00 00 00	 call	 err_string
$LN2@validate_v@3:
$LN6@validate_v@3:

; 1299 :     }
; 1300 : 
; 1301 :     if (res && start != nch) {

  005b0	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  005b5	74 21		 je	 SHORT $LN1@validate_v@3
  005b7	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  005bb	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR start$[rsp], eax
  005c2	74 14		 je	 SHORT $LN1@validate_v@3

; 1302 :         res = 0;

  005c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 1303 :         err_string("unexpected extra children in varargslist trailer");

  005cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@DKCHLGHN@unexpected?5extra?5children?5in?5var@
  005d3	e8 00 00 00 00	 call	 err_string
$LN1@validate_v@3:

; 1304 :     }
; 1305 :     return res;

  005d8	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN16@validate_v@3:

; 1306 : }

  005dc	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  005e3	c3		 ret	 0
validate_varargslist_trailer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@BLBLCNEL@lambdef_nocond?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_lambdef_nocond DD imagerel validate_lambdef_nocond
	DD	imagerel validate_lambdef_nocond+282
	DD	imagerel $unwind$validate_lambdef_nocond
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_lambdef_nocond DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0P@BLBLCNEL@lambdef_nocond?$AA@
CONST	SEGMENT
??_C@_0P@BLBLCNEL@lambdef_nocond?$AA@ DB 'lambdef_nocond', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_lambdef_nocond
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv95 = 40
tree$ = 64
validate_lambdef_nocond PROC				; COMDAT

; 2632 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2633 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2634 :     int res = (validate_ntype(tree, lambdef_nocond)
; 2635 :                && ((nch == 3) || (nch == 4))
; 2636 :                && validate_name(CHILD(tree, 0), "lambda")
; 2637 :                && validate_colon(CHILD(tree, nch - 2))
; 2638 :                && validate_test(CHILD(tree, nch - 1)));

  00015	ba 31 01 00 00	 mov	 edx, 305		; 00000131H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	0f 84 85 00 00
	00		 je	 $LN7@validate_l@2
  0002c	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  00031	74 07		 je	 SHORT $LN6@validate_l@2
  00033	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  00038	75 77		 jne	 SHORT $LN7@validate_l@2
$LN6@validate_l@2:
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06COJIGPIB@lambda?$AA@
  00041	ba 01 00 00 00	 mov	 edx, 1
  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0004b	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0004f	e8 00 00 00 00	 call	 validate_terminal
  00054	85 c0		 test	 eax, eax
  00056	74 59		 je	 SHORT $LN7@validate_l@2
  00058	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0005c	83 e8 02	 sub	 eax, 2
  0005f	48 98		 cdqe
  00061	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00065	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0006a	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00075	ba 0b 00 00 00	 mov	 edx, 11
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 validate_terminal
  00082	85 c0		 test	 eax, eax
  00084	74 2b		 je	 SHORT $LN7@validate_l@2
  00086	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0008a	ff c8		 dec	 eax
  0008c	48 98		 cdqe
  0008e	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00092	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00097	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 validate_test
  000a3	85 c0		 test	 eax, eax
  000a5	74 0a		 je	 SHORT $LN7@validate_l@2
  000a7	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv95[rsp], 1
  000af	eb 08		 jmp	 SHORT $LN8@validate_l@2
$LN7@validate_l@2:
  000b1	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
$LN8@validate_l@2:
  000b9	8b 44 24 28	 mov	 eax, DWORD PTR tv95[rsp]
  000bd	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2639 : 
; 2640 :     if (res && (nch == 4))

  000c1	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000c6	74 22		 je	 SHORT $LN3@validate_l@2
  000c8	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  000cd	75 1b		 jne	 SHORT $LN3@validate_l@2

; 2641 :         res = validate_varargslist(CHILD(tree, 1));

  000cf	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000d4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000d8	48 83 c0 28	 add	 rax, 40			; 00000028H
  000dc	48 8b c8	 mov	 rcx, rax
  000df	e8 00 00 00 00	 call	 validate_varargslist
  000e4	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000e8	eb 27		 jmp	 SHORT $LN2@validate_l@2
$LN3@validate_l@2:

; 2642 :     else if (!res && !PyErr_Occurred())

  000ea	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000ef	75 20		 jne	 SHORT $LN1@validate_l@2
  000f1	e8 00 00 00 00	 call	 PyErr_Occurred
  000f6	48 85 c0	 test	 rax, rax
  000f9	75 16		 jne	 SHORT $LN1@validate_l@2

; 2643 :         (void) validate_numnodes(tree, 3, "lambdef_nocond");

  000fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@BLBLCNEL@lambdef_nocond?$AA@
  00102	ba 03 00 00 00	 mov	 edx, 3
  00107	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0010c	e8 00 00 00 00	 call	 validate_numnodes
$LN1@validate_l@2:
$LN2@validate_l@2:

; 2644 : 
; 2645 :     return (res);

  00111	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2646 : }

  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
validate_lambdef_nocond ENDP
_TEXT	ENDS
PUBLIC	??_C@_07LMFPONDJ@trailer?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_trailer DD imagerel validate_trailer
	DD	imagerel validate_trailer+460
	DD	imagerel $unwind$validate_trailer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_trailer DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_07LMFPONDJ@trailer?$AA@
CONST	SEGMENT
??_C@_07LMFPONDJ@trailer?$AA@ DB 'trailer', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_trailer
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv71 = 40
tv76 = 44
tv140 = 48
tv152 = 52
tree$ = 80
validate_trailer PROC					; COMDAT

; 2762 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2763 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2764 :     int res = validate_ntype(tree, trailer) && ((nch == 2) || (nch == 3));

  00015	ba 42 01 00 00	 mov	 edx, 322		; 00000142H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 18		 je	 SHORT $LN13@validate_t@6
  00028	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  0002d	74 07		 je	 SHORT $LN12@validate_t@6
  0002f	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  00034	75 0a		 jne	 SHORT $LN13@validate_t@6
$LN12@validate_t@6:
  00036	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0003e	eb 08		 jmp	 SHORT $LN14@validate_t@6
$LN13@validate_t@6:
  00040	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN14@validate_t@6:
  00048	8b 44 24 28	 mov	 eax, DWORD PTR tv71[rsp]
  0004c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2765 : 
; 2766 :     if (res) {

  00050	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00055	0f 84 52 01 00
	00		 je	 $LN9@validate_t@6

; 2767 :         switch (TYPE(CHILD(tree, 0))) {

  0005b	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00060	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00064	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00067	89 44 24 2c	 mov	 DWORD PTR tv76[rsp], eax
  0006b	83 7c 24 2c 07	 cmp	 DWORD PTR tv76[rsp], 7
  00070	74 17		 je	 SHORT $LN6@validate_t@6
  00072	83 7c 24 2c 09	 cmp	 DWORD PTR tv76[rsp], 9
  00077	74 69		 je	 SHORT $LN4@validate_t@6
  00079	83 7c 24 2c 17	 cmp	 DWORD PTR tv76[rsp], 23
  0007e	0f 84 cb 00 00
	00		 je	 $LN3@validate_t@6
  00084	e9 1a 01 00 00	 jmp	 $LN2@validate_t@6
$LN6@validate_t@6:

; 2768 :           case LPAR:
; 2769 :             res = validate_rparen(CHILD(tree, nch - 1));

  00089	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0008d	ff c8		 dec	 eax
  0008f	48 98		 cdqe
  00091	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00095	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0009a	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0009e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  000a5	ba 08 00 00 00	 mov	 edx, 8
  000aa	48 8b c8	 mov	 rcx, rax
  000ad	e8 00 00 00 00	 call	 validate_terminal
  000b2	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2770 :             if (res && (nch == 3))

  000b6	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000bb	74 20		 je	 SHORT $LN5@validate_t@6
  000bd	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  000c2	75 19		 jne	 SHORT $LN5@validate_t@6

; 2771 :                 res = validate_arglist(CHILD(tree, 1));

  000c4	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000c9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000cd	48 83 c0 28	 add	 rax, 40			; 00000028H
  000d1	48 8b c8	 mov	 rcx, rax
  000d4	e8 00 00 00 00	 call	 validate_arglist
  000d9	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN5@validate_t@6:

; 2772 :             break;

  000dd	e9 c9 00 00 00	 jmp	 $LN7@validate_t@6
$LN4@validate_t@6:

; 2773 :           case LSQB:
; 2774 :             res = (validate_numnodes(tree, 3, "trailer")
; 2775 :                    && validate_subscriptlist(CHILD(tree, 1))
; 2776 :                    && validate_ntype(CHILD(tree, 2), RSQB));

  000e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07LMFPONDJ@trailer?$AA@
  000e9	ba 03 00 00 00	 mov	 edx, 3
  000ee	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000f3	e8 00 00 00 00	 call	 validate_numnodes
  000f8	85 c0		 test	 eax, eax
  000fa	74 41		 je	 SHORT $LN15@validate_t@6
  000fc	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00101	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00105	48 83 c0 28	 add	 rax, 40			; 00000028H
  00109	48 8b c8	 mov	 rcx, rax
  0010c	e8 00 00 00 00	 call	 validate_subscriptlist
  00111	85 c0		 test	 eax, eax
  00113	74 28		 je	 SHORT $LN15@validate_t@6
  00115	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0011a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0011e	48 83 c0 50	 add	 rax, 80			; 00000050H
  00122	ba 0a 00 00 00	 mov	 edx, 10
  00127	48 8b c8	 mov	 rcx, rax
  0012a	e8 00 00 00 00	 call	 validate_ntype
  0012f	85 c0		 test	 eax, eax
  00131	74 0a		 je	 SHORT $LN15@validate_t@6
  00133	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv140[rsp], 1
  0013b	eb 08		 jmp	 SHORT $LN16@validate_t@6
$LN15@validate_t@6:
  0013d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
$LN16@validate_t@6:
  00145	8b 44 24 30	 mov	 eax, DWORD PTR tv140[rsp]
  00149	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2777 :             break;

  0014d	eb 5c		 jmp	 SHORT $LN7@validate_t@6
$LN3@validate_t@6:

; 2778 :           case DOT:
; 2779 :             res = (validate_numnodes(tree, 2, "trailer")
; 2780 :                    && validate_ntype(CHILD(tree, 1), NAME));

  0014f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07LMFPONDJ@trailer?$AA@
  00156	ba 02 00 00 00	 mov	 edx, 2
  0015b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00160	e8 00 00 00 00	 call	 validate_numnodes
  00165	85 c0		 test	 eax, eax
  00167	74 28		 je	 SHORT $LN17@validate_t@6
  00169	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0016e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00172	48 83 c0 28	 add	 rax, 40			; 00000028H
  00176	ba 01 00 00 00	 mov	 edx, 1
  0017b	48 8b c8	 mov	 rcx, rax
  0017e	e8 00 00 00 00	 call	 validate_ntype
  00183	85 c0		 test	 eax, eax
  00185	74 0a		 je	 SHORT $LN17@validate_t@6
  00187	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv152[rsp], 1
  0018f	eb 08		 jmp	 SHORT $LN18@validate_t@6
$LN17@validate_t@6:
  00191	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv152[rsp], 0
$LN18@validate_t@6:
  00199	8b 44 24 34	 mov	 eax, DWORD PTR tv152[rsp]
  0019d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2781 :             break;

  001a1	eb 08		 jmp	 SHORT $LN7@validate_t@6
$LN2@validate_t@6:

; 2782 :           default:
; 2783 :             res = 0;

  001a3	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0
$LN7@validate_t@6:

; 2784 :             break;
; 2785 :         }
; 2786 :     }
; 2787 :     else {

  001ab	eb 16		 jmp	 SHORT $LN1@validate_t@6
$LN9@validate_t@6:

; 2788 :         (void) validate_numnodes(tree, 2, "trailer");

  001ad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07LMFPONDJ@trailer?$AA@
  001b4	ba 02 00 00 00	 mov	 edx, 2
  001b9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  001be	e8 00 00 00 00	 call	 validate_numnodes
$LN1@validate_t@6:

; 2789 :     }
; 2790 :     return (res);

  001c3	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2791 : }

  001c7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001cb	c3		 ret	 0
validate_trailer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@CCGECEOG@illegal?5arglist?5specification?$AA@ ; `string'
PUBLIC	??_C@_0BP@BLEOBCFM@illegal?5use?5of?5?8?$CK?$CK?8?5in?5arglist?$AA@ ; `string'
PUBLIC	??_C@_0BO@IMAGFJEN@illegal?5use?5of?5?8?$CK?8?5in?5arglist?$AA@ ; `string'
PUBLIC	??_C@_0DD@OJLOMKNJ@illegal?5arglist?5specification?5?$CIe@ ; `string'
PUBLIC	??_C@_0CH@EKFJPBFO@need?5?8?$CI?8?0?5?8?$CJ?8?5for?5generator?5expr@ ; `string'
PUBLIC	??_C@_07OPJCDGGN@arglist?$AA@			; `string'
EXTRN	PyErr_Clear:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_arglist DD imagerel validate_arglist
	DD	imagerel validate_arglist+1065
	DD	imagerel $unwind$validate_arglist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_arglist DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BO@CCGECEOG@illegal?5arglist?5specification?$AA@
CONST	SEGMENT
??_C@_0BO@CCGECEOG@illegal?5arglist?5specification?$AA@ DB 'illegal argli'
	DB	'st specification', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BLEOBCFM@illegal?5use?5of?5?8?$CK?$CK?8?5in?5arglist?$AA@
CONST	SEGMENT
??_C@_0BP@BLEOBCFM@illegal?5use?5of?5?8?$CK?$CK?8?5in?5arglist?$AA@ DB 'i'
	DB	'llegal use of ''**'' in arglist', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IMAGFJEN@illegal?5use?5of?5?8?$CK?8?5in?5arglist?$AA@
CONST	SEGMENT
??_C@_0BO@IMAGFJEN@illegal?5use?5of?5?8?$CK?8?5in?5arglist?$AA@ DB 'illeg'
	DB	'al use of ''*'' in arglist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OJLOMKNJ@illegal?5arglist?5specification?5?$CIe@
CONST	SEGMENT
??_C@_0DD@OJLOMKNJ@illegal?5arglist?5specification?5?$CIe@ DB 'illegal ar'
	DB	'glist specification (extra stuff on end)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EKFJPBFO@need?5?8?$CI?8?0?5?8?$CJ?8?5for?5generator?5expr@
CONST	SEGMENT
??_C@_0CH@EKFJPBFO@need?5?8?$CI?8?0?5?8?$CJ?8?5for?5generator?5expr@ DB 'n'
	DB	'eed ''('', '')'' for generator expression', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OPJCDGGN@arglist?$AA@
CONST	SEGMENT
??_C@_07OPJCDGGN@arglist?$AA@ DB 'arglist', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_arglist
_TEXT	SEGMENT
ok$ = 32
i$ = 36
nch$ = 40
ch$23562 = 48
sym$23571 = 56
tv144 = 60
tv223 = 64
tv245 = 68
tree$ = 96
validate_arglist PROC					; COMDAT

; 2655 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2656 :     int nch = NCH(tree);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 28	 mov	 DWORD PTR nch$[rsp], eax

; 2657 :     int i = 0;

  00015	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 2658 :     int ok = 1;

  0001d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR ok$[rsp], 1

; 2659 : 
; 2660 :     if (nch <= 0)

  00025	83 7c 24 28 00	 cmp	 DWORD PTR nch$[rsp], 0
  0002a	7f 1e		 jg	 SHORT $LN25@validate_a@5

; 2661 :         /* raise the right error from having an invalid number of children */
; 2662 :         return validate_numnodes(tree, nch + 1, "arglist");

  0002c	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  00030	ff c0		 inc	 eax
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07OPJCDGGN@arglist?$AA@
  00039	8b d0		 mov	 edx, eax
  0003b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00040	e8 00 00 00 00	 call	 validate_numnodes
  00045	e9 da 03 00 00	 jmp	 $LN26@validate_a@5
$LN25@validate_a@5:

; 2663 : 
; 2664 :     if (nch > 1) {

  0004a	83 7c 24 28 01	 cmp	 DWORD PTR nch$[rsp], 1
  0004f	0f 8e 86 00 00
	00		 jle	 $LN24@validate_a@5

; 2665 :         for (i=0; i<nch; i++) {

  00055	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0005d	eb 0a		 jmp	 SHORT $LN23@validate_a@5
$LN22@validate_a@5:
  0005f	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00063	ff c0		 inc	 eax
  00065	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN23@validate_a@5:
  00069	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  0006d	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  00071	7d 68		 jge	 SHORT $LN21@validate_a@5

; 2666 :             if (TYPE(CHILD(tree, i)) == argument) {

  00073	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00078	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0007c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00081	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00085	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00089	3d 4b 01 00 00	 cmp	 eax, 331		; 0000014bH
  0008e	75 49		 jne	 SHORT $LN20@validate_a@5

; 2667 :                 node *ch = CHILD(tree, i);

  00090	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00095	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00099	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0009e	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000a2	48 89 44 24 30	 mov	 QWORD PTR ch$23562[rsp], rax

; 2668 :                 if (NCH(ch) == 2 && TYPE(CHILD(ch, 1)) == comp_for) {

  000a7	48 8b 44 24 30	 mov	 rax, QWORD PTR ch$23562[rsp]
  000ac	83 78 18 02	 cmp	 DWORD PTR [rax+24], 2
  000b0	75 27		 jne	 SHORT $LN19@validate_a@5
  000b2	48 8b 44 24 30	 mov	 rax, QWORD PTR ch$23562[rsp]
  000b7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000bb	0f bf 40 28	 movsx	 eax, WORD PTR [rax+40]
  000bf	3d 4d 01 00 00	 cmp	 eax, 333		; 0000014dH
  000c4	75 13		 jne	 SHORT $LN19@validate_a@5

; 2669 :                     err_string("need '(', ')' for generator expression");

  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@EKFJPBFO@need?5?8?$CI?8?0?5?8?$CJ?8?5for?5generator?5expr@
  000cd	e8 00 00 00 00	 call	 err_string

; 2670 :                     return 0;

  000d2	33 c0		 xor	 eax, eax
  000d4	e9 4b 03 00 00	 jmp	 $LN26@validate_a@5
$LN19@validate_a@5:
$LN20@validate_a@5:

; 2671 :                 }
; 2672 :             }
; 2673 :         }

  000d9	eb 84		 jmp	 SHORT $LN22@validate_a@5
$LN21@validate_a@5:
$LN24@validate_a@5:
$LN18@validate_a@5:

; 2674 :     }
; 2675 : 
; 2676 :     while (ok && nch-i >= 2) {

  000db	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  000e0	0f 84 98 00 00
	00		 je	 $LN17@validate_a@5
  000e6	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000ea	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  000ee	2b c8		 sub	 ecx, eax
  000f0	8b c1		 mov	 eax, ecx
  000f2	83 f8 02	 cmp	 eax, 2
  000f5	0f 8c 83 00 00
	00		 jl	 $LN17@validate_a@5

; 2677 :         /* skip leading (argument ',') */
; 2678 :         ok = (validate_argument(CHILD(tree, i))
; 2679 :               && validate_comma(CHILD(tree, i+1)));

  000fb	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00100	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00104	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00109	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0010d	48 8b c8	 mov	 rcx, rax
  00110	e8 00 00 00 00	 call	 validate_argument
  00115	85 c0		 test	 eax, eax
  00117	74 37		 je	 SHORT $LN28@validate_a@5
  00119	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0011d	ff c0		 inc	 eax
  0011f	48 98		 cdqe
  00121	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00125	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0012a	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0012e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  00135	ba 0c 00 00 00	 mov	 edx, 12
  0013a	48 8b c8	 mov	 rcx, rax
  0013d	e8 00 00 00 00	 call	 validate_terminal
  00142	85 c0		 test	 eax, eax
  00144	74 0a		 je	 SHORT $LN28@validate_a@5
  00146	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  0014e	eb 08		 jmp	 SHORT $LN29@validate_a@5
$LN28@validate_a@5:
  00150	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN29@validate_a@5:
  00158	8b 44 24 3c	 mov	 eax, DWORD PTR tv144[rsp]
  0015c	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2680 :         if (ok)

  00160	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  00165	74 0d		 je	 SHORT $LN16@validate_a@5

; 2681 :             i += 2;

  00167	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0016b	83 c0 02	 add	 eax, 2
  0016e	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax

; 2682 :         else

  00172	eb 05		 jmp	 SHORT $LN15@validate_a@5
$LN16@validate_a@5:

; 2683 :             PyErr_Clear();

  00174	e8 00 00 00 00	 call	 PyErr_Clear
$LN15@validate_a@5:

; 2684 :     }

  00179	e9 5d ff ff ff	 jmp	 $LN18@validate_a@5
$LN17@validate_a@5:

; 2685 :     ok = 1;

  0017e	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR ok$[rsp], 1

; 2686 :     if (nch-i > 0) {

  00186	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0018a	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  0018e	2b c8		 sub	 ecx, eax
  00190	8b c1		 mov	 eax, ecx
  00192	85 c0		 test	 eax, eax
  00194	0f 8e 86 02 00
	00		 jle	 $LN14@validate_a@5

; 2687 :         /*
; 2688 :          * argument | '*' test [',' '**' test] | '**' test
; 2689 :          */
; 2690 :         int sym = TYPE(CHILD(tree, i));

  0019a	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0019f	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001a3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  001a8	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  001ac	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  001b0	89 44 24 38	 mov	 DWORD PTR sym$23571[rsp], eax

; 2691 : 
; 2692 :         if (sym == argument) {

  001b4	81 7c 24 38 4b
	01 00 00	 cmp	 DWORD PTR sym$23571[rsp], 331 ; 0000014bH
  001bc	75 4a		 jne	 SHORT $LN13@validate_a@5

; 2693 :             ok = validate_argument(CHILD(tree, i));

  001be	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  001c3	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001c7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  001cc	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  001d0	48 8b c8	 mov	 rcx, rax
  001d3	e8 00 00 00 00	 call	 validate_argument
  001d8	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2694 :             if (ok && i+1 != nch) {

  001dc	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  001e1	74 20		 je	 SHORT $LN12@validate_a@5
  001e3	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  001e7	ff c0		 inc	 eax
  001e9	3b 44 24 28	 cmp	 eax, DWORD PTR nch$[rsp]
  001ed	74 14		 je	 SHORT $LN12@validate_a@5

; 2695 :                 err_string("illegal arglist specification"
; 2696 :                            " (extra stuff on end)");

  001ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@OJLOMKNJ@illegal?5arglist?5specification?5?$CIe@
  001f6	e8 00 00 00 00	 call	 err_string

; 2697 :                 ok = 0;

  001fb	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ok$[rsp], 0
$LN12@validate_a@5:

; 2698 :             }

  00203	e9 18 02 00 00	 jmp	 $LN11@validate_a@5
$LN13@validate_a@5:

; 2699 :         }
; 2700 :         else if (sym == STAR) {

  00208	83 7c 24 38 10	 cmp	 DWORD PTR sym$23571[rsp], 16
  0020d	0f 85 60 01 00
	00		 jne	 $LN10@validate_a@5

; 2701 :             ok = validate_star(CHILD(tree, i));

  00213	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00218	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0021c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00221	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00225	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NBENCBCI@?$CK?$AA@
  0022c	ba 10 00 00 00	 mov	 edx, 16
  00231	48 8b c8	 mov	 rcx, rax
  00234	e8 00 00 00 00	 call	 validate_terminal
  00239	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2702 :             if (ok && (nch-i == 2))

  0023d	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  00242	74 37		 je	 SHORT $LN9@validate_a@5
  00244	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00248	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  0024c	2b c8		 sub	 ecx, eax
  0024e	8b c1		 mov	 eax, ecx
  00250	83 f8 02	 cmp	 eax, 2
  00253	75 26		 jne	 SHORT $LN9@validate_a@5

; 2703 :                 ok = validate_test(CHILD(tree, i+1));

  00255	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00259	ff c0		 inc	 eax
  0025b	48 98		 cdqe
  0025d	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00261	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00266	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0026a	48 8b c8	 mov	 rcx, rax
  0026d	e8 00 00 00 00	 call	 validate_test
  00272	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax
  00276	e9 f3 00 00 00	 jmp	 $LN8@validate_a@5
$LN9@validate_a@5:

; 2704 :             else if (ok && (nch-i == 5))

  0027b	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  00280	0f 84 d4 00 00
	00		 je	 $LN7@validate_a@5
  00286	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0028a	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  0028e	2b c8		 sub	 ecx, eax
  00290	8b c1		 mov	 eax, ecx
  00292	83 f8 05	 cmp	 eax, 5
  00295	0f 85 bf 00 00
	00		 jne	 $LN7@validate_a@5

; 2705 :                 ok = (validate_test(CHILD(tree, i+1))
; 2706 :                       && validate_comma(CHILD(tree, i+2))
; 2707 :                       && validate_doublestar(CHILD(tree, i+3))
; 2708 :                       && validate_test(CHILD(tree, i+4)));

  0029b	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0029f	ff c0		 inc	 eax
  002a1	48 98		 cdqe
  002a3	48 6b c0 28	 imul	 rax, 40			; 00000028H
  002a7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  002ac	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  002b0	48 8b c8	 mov	 rcx, rax
  002b3	e8 00 00 00 00	 call	 validate_test
  002b8	85 c0		 test	 eax, eax
  002ba	0f 84 88 00 00
	00		 je	 $LN30@validate_a@5
  002c0	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  002c4	83 c0 02	 add	 eax, 2
  002c7	48 98		 cdqe
  002c9	48 6b c0 28	 imul	 rax, 40			; 00000028H
  002cd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  002d2	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  002d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  002dd	ba 0c 00 00 00	 mov	 edx, 12
  002e2	48 8b c8	 mov	 rcx, rax
  002e5	e8 00 00 00 00	 call	 validate_terminal
  002ea	85 c0		 test	 eax, eax
  002ec	74 5a		 je	 SHORT $LN30@validate_a@5
  002ee	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  002f2	83 c0 03	 add	 eax, 3
  002f5	48 98		 cdqe
  002f7	48 6b c0 28	 imul	 rax, 40			; 00000028H
  002fb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00300	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00304	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FKAPCJPD@?$CK?$CK?$AA@
  0030b	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  00310	48 8b c8	 mov	 rcx, rax
  00313	e8 00 00 00 00	 call	 validate_terminal
  00318	85 c0		 test	 eax, eax
  0031a	74 2c		 je	 SHORT $LN30@validate_a@5
  0031c	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00320	83 c0 04	 add	 eax, 4
  00323	48 98		 cdqe
  00325	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00329	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0032e	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00332	48 8b c8	 mov	 rcx, rax
  00335	e8 00 00 00 00	 call	 validate_test
  0033a	85 c0		 test	 eax, eax
  0033c	74 0a		 je	 SHORT $LN30@validate_a@5
  0033e	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv223[rsp], 1
  00346	eb 08		 jmp	 SHORT $LN31@validate_a@5
$LN30@validate_a@5:
  00348	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv223[rsp], 0
$LN31@validate_a@5:
  00350	8b 44 24 40	 mov	 eax, DWORD PTR tv223[rsp]
  00354	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2709 :             else {

  00358	eb 14		 jmp	 SHORT $LN6@validate_a@5
$LN7@validate_a@5:

; 2710 :                 err_string("illegal use of '*' in arglist");

  0035a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@IMAGFJEN@illegal?5use?5of?5?8?$CK?8?5in?5arglist?$AA@
  00361	e8 00 00 00 00	 call	 err_string

; 2711 :                 ok = 0;

  00366	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ok$[rsp], 0
$LN6@validate_a@5:
$LN8@validate_a@5:

; 2712 :             }

  0036e	e9 ad 00 00 00	 jmp	 $LN5@validate_a@5
$LN10@validate_a@5:

; 2713 :         }
; 2714 :         else if (sym == DOUBLESTAR) {

  00373	83 7c 24 38 23	 cmp	 DWORD PTR sym$23571[rsp], 35 ; 00000023H
  00378	0f 85 8e 00 00
	00		 jne	 $LN4@validate_a@5

; 2715 :             if (nch-i == 2)

  0037e	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00382	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  00386	2b c8		 sub	 ecx, eax
  00388	8b c1		 mov	 eax, ecx
  0038a	83 f8 02	 cmp	 eax, 2
  0038d	75 67		 jne	 SHORT $LN3@validate_a@5

; 2716 :                 ok = (validate_doublestar(CHILD(tree, i))
; 2717 :                       && validate_test(CHILD(tree, i+1)));

  0038f	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00394	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00398	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0039d	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  003a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FKAPCJPD@?$CK?$CK?$AA@
  003a8	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  003ad	48 8b c8	 mov	 rcx, rax
  003b0	e8 00 00 00 00	 call	 validate_terminal
  003b5	85 c0		 test	 eax, eax
  003b7	74 2b		 je	 SHORT $LN32@validate_a@5
  003b9	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  003bd	ff c0		 inc	 eax
  003bf	48 98		 cdqe
  003c1	48 6b c0 28	 imul	 rax, 40			; 00000028H
  003c5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  003ca	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  003ce	48 8b c8	 mov	 rcx, rax
  003d1	e8 00 00 00 00	 call	 validate_test
  003d6	85 c0		 test	 eax, eax
  003d8	74 0a		 je	 SHORT $LN32@validate_a@5
  003da	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv245[rsp], 1
  003e2	eb 08		 jmp	 SHORT $LN33@validate_a@5
$LN32@validate_a@5:
  003e4	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv245[rsp], 0
$LN33@validate_a@5:
  003ec	8b 44 24 44	 mov	 eax, DWORD PTR tv245[rsp]
  003f0	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2718 :             else {

  003f4	eb 14		 jmp	 SHORT $LN2@validate_a@5
$LN3@validate_a@5:

; 2719 :                 err_string("illegal use of '**' in arglist");

  003f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@BLEOBCFM@illegal?5use?5of?5?8?$CK?$CK?8?5in?5arglist?$AA@
  003fd	e8 00 00 00 00	 call	 err_string

; 2720 :                 ok = 0;

  00402	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ok$[rsp], 0
$LN2@validate_a@5:

; 2721 :             }
; 2722 :         }
; 2723 :         else {

  0040a	eb 14		 jmp	 SHORT $LN1@validate_a@5
$LN4@validate_a@5:

; 2724 :             err_string("illegal arglist specification");

  0040c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@CCGECEOG@illegal?5arglist?5specification?$AA@
  00413	e8 00 00 00 00	 call	 err_string

; 2725 :             ok = 0;

  00418	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ok$[rsp], 0
$LN1@validate_a@5:
$LN5@validate_a@5:
$LN11@validate_a@5:
$LN14@validate_a@5:

; 2726 :         }
; 2727 :     }
; 2728 :     return (ok);

  00420	8b 44 24 20	 mov	 eax, DWORD PTR ok$[rsp]
$LN26@validate_a@5:

; 2729 : }

  00424	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00428	c3		 ret	 0
validate_arglist ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_argument DD imagerel validate_argument
	DD	imagerel validate_argument+264
	DD	imagerel $unwind$validate_argument
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_argument DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_argument
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv72 = 40
tv129 = 44
tree$ = 64
validate_argument PROC					; COMDAT

; 2739 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2740 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2741 :     int res = (validate_ntype(tree, argument)
; 2742 :                && ((nch == 1) || (nch == 2) || (nch == 3)));

  00015	ba 4b 01 00 00	 mov	 edx, 331		; 0000014bH
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 1f		 je	 SHORT $LN8@validate_a@6
  00028	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0002d	74 0e		 je	 SHORT $LN7@validate_a@6
  0002f	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  00034	74 07		 je	 SHORT $LN7@validate_a@6
  00036	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  0003b	75 0a		 jne	 SHORT $LN8@validate_a@6
$LN7@validate_a@6:
  0003d	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00045	eb 08		 jmp	 SHORT $LN9@validate_a@6
$LN8@validate_a@6:
  00047	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN9@validate_a@6:
  0004f	8b 44 24 28	 mov	 eax, DWORD PTR tv72[rsp]
  00053	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2743 :     if (res) 

  00057	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0005c	74 12		 je	 SHORT $LN4@validate_a@6

; 2744 :         res = validate_test(CHILD(tree, 0));

  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00063	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00067	e8 00 00 00 00	 call	 validate_test
  0006c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN4@validate_a@6:

; 2745 :     if (res && (nch == 2))

  00070	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00075	74 22		 je	 SHORT $LN3@validate_a@6
  00077	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  0007c	75 1b		 jne	 SHORT $LN3@validate_a@6

; 2746 :         res = validate_comp_for(CHILD(tree, 1));

  0007e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00083	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00087	48 83 c0 28	 add	 rax, 40			; 00000028H
  0008b	48 8b c8	 mov	 rcx, rax
  0008e	e8 00 00 00 00	 call	 validate_comp_for
  00093	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00097	eb 66		 jmp	 SHORT $LN2@validate_a@6
$LN3@validate_a@6:

; 2747 :     else if (res && (nch == 3))

  00099	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0009e	74 5f		 je	 SHORT $LN1@validate_a@6
  000a0	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  000a5	75 58		 jne	 SHORT $LN1@validate_a@6

; 2748 :         res = (validate_equal(CHILD(tree, 1))
; 2749 :                && validate_test(CHILD(tree, 2)));

  000a7	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000ac	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b0	48 83 c0 28	 add	 rax, 40			; 00000028H
  000b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NEMOKFLO@?$DN?$AA@
  000bb	ba 16 00 00 00	 mov	 edx, 22
  000c0	48 8b c8	 mov	 rcx, rax
  000c3	e8 00 00 00 00	 call	 validate_terminal
  000c8	85 c0		 test	 eax, eax
  000ca	74 23		 je	 SHORT $LN10@validate_a@6
  000cc	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000d1	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000d5	48 83 c0 50	 add	 rax, 80			; 00000050H
  000d9	48 8b c8	 mov	 rcx, rax
  000dc	e8 00 00 00 00	 call	 validate_test
  000e1	85 c0		 test	 eax, eax
  000e3	74 0a		 je	 SHORT $LN10@validate_a@6
  000e5	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv129[rsp], 1
  000ed	eb 08		 jmp	 SHORT $LN11@validate_a@6
$LN10@validate_a@6:
  000ef	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv129[rsp], 0
$LN11@validate_a@6:
  000f7	8b 44 24 2c	 mov	 eax, DWORD PTR tv129[rsp]
  000fb	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_a@6:
$LN2@validate_a@6:

; 2750 : 
; 2751 :     return (res);

  000ff	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2752 : }

  00103	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00107	c3		 ret	 0
validate_argument ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@OMMKCBCG@subscriptlist?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_subscriptlist DD imagerel validate_subscriptlist
	DD	imagerel validate_subscriptlist+43
	DD	imagerel $unwind$validate_subscriptlist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_subscriptlist DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0O@OMMKCBCG@subscriptlist?$AA@
CONST	SEGMENT
??_C@_0O@OMMKCBCG@subscriptlist?$AA@ DB 'subscriptlist', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_subscriptlist
_TEXT	SEGMENT
tree$ = 48
validate_subscriptlist PROC				; COMDAT

; 2800 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2801 :     return (validate_repeating_list(tree, subscriptlist,
; 2802 :                                     validate_subscript, "subscriptlist"));

  00009	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0O@OMMKCBCG@subscriptlist?$AA@
  00010	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:validate_subscript
  00017	ba 43 01 00 00	 mov	 edx, 323		; 00000143H
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tree$[rsp]
  00021	e8 00 00 00 00	 call	 validate_repeating_list

; 2803 : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
validate_subscriptlist ENDP
_TEXT	ENDS
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_09KAIPOAII@subscript?$AA@			; `string'
PUBLIC	??_C@_0CP@LBBKIOJG@invalid?5number?5of?5arguments?5for?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_subscript DD imagerel validate_subscript
	DD	imagerel validate_subscript+662
	DD	imagerel $unwind$validate_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_subscript DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KAIPOAII@subscript?$AA@
CONST	SEGMENT
??_C@_09KAIPOAII@subscript?$AA@ DB 'subscript', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LBBKIOJG@invalid?5number?5of?5arguments?5for?5@
CONST	SEGMENT
??_C@_0CP@LBBKIOJG@invalid?5number?5of?5arguments?5for?5@ DB 'invalid num'
	DB	'ber of arguments for subscript node', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_subscript
_TEXT	SEGMENT
res$ = 32
offset$ = 36
nch$ = 40
rem$23638 = 44
tv71 = 48
tv137 = 52
tree$ = 80
validate_subscript PROC					; COMDAT

; 2812 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2813 :     int offset = 0;

  00009	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR offset$[rsp], 0

; 2814 :     int nch = NCH(tree);

  00011	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00016	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00019	89 44 24 28	 mov	 DWORD PTR nch$[rsp], eax

; 2815 :     int res = validate_ntype(tree, subscript) && (nch >= 1) && (nch <= 4);

  0001d	ba 44 01 00 00	 mov	 edx, 324		; 00000144H
  00022	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00027	e8 00 00 00 00	 call	 validate_ntype
  0002c	85 c0		 test	 eax, eax
  0002e	74 18		 je	 SHORT $LN16@validate_s@2
  00030	83 7c 24 28 01	 cmp	 DWORD PTR nch$[rsp], 1
  00035	7c 11		 jl	 SHORT $LN16@validate_s@2
  00037	83 7c 24 28 04	 cmp	 DWORD PTR nch$[rsp], 4
  0003c	7f 0a		 jg	 SHORT $LN16@validate_s@2
  0003e	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  00046	eb 08		 jmp	 SHORT $LN17@validate_s@2
$LN16@validate_s@2:
  00048	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN17@validate_s@2:
  00050	8b 44 24 30	 mov	 eax, DWORD PTR tv71[rsp]
  00054	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2816 : 
; 2817 :     if (!res) {

  00058	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0005d	75 1d		 jne	 SHORT $LN13@validate_s@2

; 2818 :         if (!PyErr_Occurred())

  0005f	e8 00 00 00 00	 call	 PyErr_Occurred
  00064	48 85 c0	 test	 rax, rax
  00067	75 0c		 jne	 SHORT $LN12@validate_s@2

; 2819 :             err_string("invalid number of arguments for subscript node");

  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CP@LBBKIOJG@invalid?5number?5of?5arguments?5for?5@
  00070	e8 00 00 00 00	 call	 err_string
$LN12@validate_s@2:

; 2820 :         return (0);

  00075	33 c0		 xor	 eax, eax
  00077	e9 15 02 00 00	 jmp	 $LN14@validate_s@2
$LN13@validate_s@2:

; 2821 :     }
; 2822 :     if (TYPE(CHILD(tree, 0)) == DOT)

  0007c	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00081	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00085	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00088	83 f8 17	 cmp	 eax, 23
  0008b	0f 85 9d 00 00
	00		 jne	 $LN11@validate_s@2

; 2823 :         /* take care of ('.' '.' '.') possibility */
; 2824 :         return (validate_numnodes(tree, 3, "subscript")
; 2825 :                 && validate_dot(CHILD(tree, 0))
; 2826 :                 && validate_dot(CHILD(tree, 1))
; 2827 :                 && validate_dot(CHILD(tree, 2)));

  00091	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09KAIPOAII@subscript?$AA@
  00098	ba 03 00 00 00	 mov	 edx, 3
  0009d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000a2	e8 00 00 00 00	 call	 validate_numnodes
  000a7	85 c0		 test	 eax, eax
  000a9	74 72		 je	 SHORT $LN18@validate_s@2
  000ab	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  000b2	ba 17 00 00 00	 mov	 edx, 23
  000b7	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000bc	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  000c0	e8 00 00 00 00	 call	 validate_terminal
  000c5	85 c0		 test	 eax, eax
  000c7	74 54		 je	 SHORT $LN18@validate_s@2
  000c9	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000ce	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000d2	48 83 c0 28	 add	 rax, 40			; 00000028H
  000d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  000dd	ba 17 00 00 00	 mov	 edx, 23
  000e2	48 8b c8	 mov	 rcx, rax
  000e5	e8 00 00 00 00	 call	 validate_terminal
  000ea	85 c0		 test	 eax, eax
  000ec	74 2f		 je	 SHORT $LN18@validate_s@2
  000ee	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000f3	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000f7	48 83 c0 50	 add	 rax, 80			; 00000050H
  000fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  00102	ba 17 00 00 00	 mov	 edx, 23
  00107	48 8b c8	 mov	 rcx, rax
  0010a	e8 00 00 00 00	 call	 validate_terminal
  0010f	85 c0		 test	 eax, eax
  00111	74 0a		 je	 SHORT $LN18@validate_s@2
  00113	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv137[rsp], 1
  0011b	eb 08		 jmp	 SHORT $LN19@validate_s@2
$LN18@validate_s@2:
  0011d	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv137[rsp], 0
$LN19@validate_s@2:
  00125	8b 44 24 34	 mov	 eax, DWORD PTR tv137[rsp]
  00129	e9 63 01 00 00	 jmp	 $LN14@validate_s@2
$LN11@validate_s@2:

; 2828 :     if (nch == 1) {

  0012e	83 7c 24 28 01	 cmp	 DWORD PTR nch$[rsp], 1
  00133	75 4e		 jne	 SHORT $LN10@validate_s@2

; 2829 :         if (TYPE(CHILD(tree, 0)) == test)

  00135	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0013a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0013e	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00141	3d 2e 01 00 00	 cmp	 eax, 302		; 0000012eH
  00146	75 14		 jne	 SHORT $LN9@validate_s@2

; 2830 :             res = validate_test(CHILD(tree, 0));

  00148	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0014d	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00151	e8 00 00 00 00	 call	 validate_test
  00156	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2831 :         else

  0015a	eb 1e		 jmp	 SHORT $LN8@validate_s@2
$LN9@validate_s@2:

; 2832 :             res = validate_colon(CHILD(tree, 0));

  0015c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00163	ba 0b 00 00 00	 mov	 edx, 11
  00168	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0016d	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00171	e8 00 00 00 00	 call	 validate_terminal
  00176	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN8@validate_s@2:

; 2833 :         return (res);

  0017a	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
  0017e	e9 0e 01 00 00	 jmp	 $LN14@validate_s@2
$LN10@validate_s@2:

; 2834 :     }
; 2835 :     /*  Must be [test] ':' [test] [sliceop],
; 2836 :      *  but at least one of the optional components will
; 2837 :      *  be present, but we don't know which yet.
; 2838 :      */
; 2839 :     if ((TYPE(CHILD(tree, 0)) != COLON) || (nch == 4)) {

  00183	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00188	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0018c	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0018f	83 f8 0b	 cmp	 eax, 11
  00192	75 07		 jne	 SHORT $LN6@validate_s@2
  00194	83 7c 24 28 04	 cmp	 DWORD PTR nch$[rsp], 4
  00199	75 1a		 jne	 SHORT $LN7@validate_s@2
$LN6@validate_s@2:

; 2840 :         res = validate_test(CHILD(tree, 0));

  0019b	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  001a0	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  001a4	e8 00 00 00 00	 call	 validate_test
  001a9	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2841 :         offset = 1;

  001ad	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR offset$[rsp], 1
$LN7@validate_s@2:

; 2842 :     }
; 2843 :     if (res)

  001b5	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  001ba	74 2a		 je	 SHORT $LN5@validate_s@2

; 2844 :         res = validate_colon(CHILD(tree, offset));

  001bc	48 63 44 24 24	 movsxd	 rax, DWORD PTR offset$[rsp]
  001c1	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001c5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  001ca	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  001ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  001d5	ba 0b 00 00 00	 mov	 edx, 11
  001da	48 8b c8	 mov	 rcx, rax
  001dd	e8 00 00 00 00	 call	 validate_terminal
  001e2	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN5@validate_s@2:

; 2845 :     if (res) {

  001e6	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  001eb	0f 84 9c 00 00
	00		 je	 $LN4@validate_s@2

; 2846 :         int rem = nch - ++offset;

  001f1	8b 44 24 24	 mov	 eax, DWORD PTR offset$[rsp]
  001f5	ff c0		 inc	 eax
  001f7	89 44 24 24	 mov	 DWORD PTR offset$[rsp], eax
  001fb	8b 44 24 24	 mov	 eax, DWORD PTR offset$[rsp]
  001ff	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  00203	2b c8		 sub	 ecx, eax
  00205	8b c1		 mov	 eax, ecx
  00207	89 44 24 2c	 mov	 DWORD PTR rem$23638[rsp], eax

; 2847 :         if (rem) {

  0020b	83 7c 24 2c 00	 cmp	 DWORD PTR rem$23638[rsp], 0
  00210	74 7b		 je	 SHORT $LN3@validate_s@2

; 2848 :             if (TYPE(CHILD(tree, offset)) == test) {

  00212	48 63 44 24 24	 movsxd	 rax, DWORD PTR offset$[rsp]
  00217	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0021b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00220	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00224	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00228	3d 2e 01 00 00	 cmp	 eax, 302		; 0000012eH
  0022d	75 32		 jne	 SHORT $LN2@validate_s@2

; 2849 :                 res = validate_test(CHILD(tree, offset));

  0022f	48 63 44 24 24	 movsxd	 rax, DWORD PTR offset$[rsp]
  00234	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00238	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0023d	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00241	48 8b c8	 mov	 rcx, rax
  00244	e8 00 00 00 00	 call	 validate_test
  00249	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2850 :                 ++offset;

  0024d	8b 44 24 24	 mov	 eax, DWORD PTR offset$[rsp]
  00251	ff c0		 inc	 eax
  00253	89 44 24 24	 mov	 DWORD PTR offset$[rsp], eax

; 2851 :                 --rem;

  00257	8b 44 24 2c	 mov	 eax, DWORD PTR rem$23638[rsp]
  0025b	ff c8		 dec	 eax
  0025d	89 44 24 2c	 mov	 DWORD PTR rem$23638[rsp], eax
$LN2@validate_s@2:

; 2852 :             }
; 2853 :             if (res && rem)

  00261	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00266	74 25		 je	 SHORT $LN1@validate_s@2
  00268	83 7c 24 2c 00	 cmp	 DWORD PTR rem$23638[rsp], 0
  0026d	74 1e		 je	 SHORT $LN1@validate_s@2

; 2854 :                 res = validate_sliceop(CHILD(tree, offset));

  0026f	48 63 44 24 24	 movsxd	 rax, DWORD PTR offset$[rsp]
  00274	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00278	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0027d	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00281	48 8b c8	 mov	 rcx, rax
  00284	e8 00 00 00 00	 call	 validate_sliceop
  00289	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_s@2:
$LN3@validate_s@2:
$LN4@validate_s@2:

; 2855 :         }
; 2856 :     }
; 2857 :     return (res);

  0028d	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN14@validate_s@2:

; 2858 : }

  00291	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00295	c3		 ret	 0
validate_subscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_07GFDBDBKB@sliceop?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_sliceop DD imagerel validate_sliceop
	DD	imagerel validate_sliceop+227
	DD	imagerel $unwind$validate_sliceop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_sliceop DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_07GFDBDBKB@sliceop?$AA@
CONST	SEGMENT
??_C@_07GFDBDBKB@sliceop?$AA@ DB 'sliceop', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_sliceop
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv75 = 40
tree$ = 64
validate_sliceop PROC					; COMDAT

; 2863 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2864 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2865 :     int res = ((nch == 1) || validate_numnodes(tree, 2, "sliceop"))
; 2866 :               && validate_ntype(tree, sliceop);

  00015	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0001a	74 1a		 je	 SHORT $LN6@validate_s@3
  0001c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07GFDBDBKB@sliceop?$AA@
  00023	ba 02 00 00 00	 mov	 edx, 2
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0002d	e8 00 00 00 00	 call	 validate_numnodes
  00032	85 c0		 test	 eax, eax
  00034	74 1d		 je	 SHORT $LN7@validate_s@3
$LN6@validate_s@3:
  00036	ba 45 01 00 00	 mov	 edx, 325		; 00000145H
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00040	e8 00 00 00 00	 call	 validate_ntype
  00045	85 c0		 test	 eax, eax
  00047	74 0a		 je	 SHORT $LN7@validate_s@3
  00049	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  00051	eb 08		 jmp	 SHORT $LN8@validate_s@3
$LN7@validate_s@3:
  00053	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN8@validate_s@3:
  0005b	8b 44 24 28	 mov	 eax, DWORD PTR tv75[rsp]
  0005f	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2867 :     if (!res && !PyErr_Occurred()) {

  00063	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00068	75 24		 jne	 SHORT $LN3@validate_s@3
  0006a	e8 00 00 00 00	 call	 PyErr_Occurred
  0006f	48 85 c0	 test	 rax, rax
  00072	75 1a		 jne	 SHORT $LN3@validate_s@3

; 2868 :         res = validate_numnodes(tree, 1, "sliceop");

  00074	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07GFDBDBKB@sliceop?$AA@
  0007b	ba 01 00 00 00	 mov	 edx, 1
  00080	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00085	e8 00 00 00 00	 call	 validate_numnodes
  0008a	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN3@validate_s@3:

; 2869 :     }
; 2870 :     if (res)

  0008e	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00093	74 1e		 je	 SHORT $LN2@validate_s@3

; 2871 :         res = validate_colon(CHILD(tree, 0));

  00095	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0009c	ba 0b 00 00 00	 mov	 edx, 11
  000a1	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000a6	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  000aa	e8 00 00 00 00	 call	 validate_terminal
  000af	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN2@validate_s@3:

; 2872 :     if (res && (nch == 2))

  000b3	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000b8	74 20		 je	 SHORT $LN1@validate_s@3
  000ba	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  000bf	75 19		 jne	 SHORT $LN1@validate_s@3

; 2873 :         res = validate_test(CHILD(tree, 1));

  000c1	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000c6	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ca	48 83 c0 28	 add	 rax, 40			; 00000028H
  000ce	48 8b c8	 mov	 rcx, rax
  000d1	e8 00 00 00 00	 call	 validate_test
  000d6	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_s@3:

; 2874 : 
; 2875 :     return (res);

  000da	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2876 : }

  000de	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e2	c3		 ret	 0
validate_sliceop ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_test_or_star_expr DD imagerel validate_test_or_star_expr
	DD	imagerel validate_test_or_star_expr+51
	DD	imagerel $unwind$validate_test_or_star_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_test_or_star_expr DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_test_or_star_expr
_TEXT	SEGMENT
n$ = 48
validate_test_or_star_expr PROC				; COMDAT

; 2881 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2882 :     if (TYPE(n) == test)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  0000e	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00011	3d 2e 01 00 00	 cmp	 eax, 302		; 0000012eH
  00016	75 0c		 jne	 SHORT $LN1@validate_t@7

; 2883 :         return validate_test(n);

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  0001d	e8 00 00 00 00	 call	 validate_test
  00022	eb 0a		 jmp	 SHORT $LN2@validate_t@7
$LN1@validate_t@7:

; 2884 :     return validate_star_expr(n);

  00024	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  00029	e8 00 00 00 00	 call	 validate_star_expr
$LN2@validate_t@7:

; 2885 : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
validate_test_or_star_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_09IAILODKE@star_expr?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_star_expr DD imagerel validate_star_expr
	DD	imagerel validate_star_expr+146
	DD	imagerel $unwind$validate_star_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_star_expr DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_09IAILODKE@star_expr?$AA@
CONST	SEGMENT
??_C@_09IAILODKE@star_expr?$AA@ DB 'star_expr', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_star_expr
_TEXT	SEGMENT
res$ = 32
tv83 = 36
tree$ = 64
validate_star_expr PROC					; COMDAT

; 2226 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2227 :     int res = validate_ntype(tree, star_expr);

  00009	ba 37 01 00 00	 mov	 edx, 311		; 00000137H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00013	e8 00 00 00 00	 call	 validate_ntype
  00018	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2228 :     if (!res) return res;

  0001c	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00021	75 06		 jne	 SHORT $LN2@validate_s@4
  00023	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
  00027	eb 64		 jmp	 SHORT $LN3@validate_s@4
$LN2@validate_s@4:

; 2229 :     if (!validate_numnodes(tree, 2, "star_expr"))

  00029	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09IAILODKE@star_expr?$AA@
  00030	ba 02 00 00 00	 mov	 edx, 2
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0003a	e8 00 00 00 00	 call	 validate_numnodes
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@validate_s@4

; 2230 :         return 0;

  00043	33 c0		 xor	 eax, eax
  00045	eb 46		 jmp	 SHORT $LN3@validate_s@4
$LN1@validate_s@4:

; 2231 :     return validate_ntype(CHILD(tree, 0), STAR) &&      \
; 2232 :         validate_expr(CHILD(tree, 1));

  00047	ba 10 00 00 00	 mov	 edx, 16
  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00051	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00055	e8 00 00 00 00	 call	 validate_ntype
  0005a	85 c0		 test	 eax, eax
  0005c	74 23		 je	 SHORT $LN5@validate_s@4
  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00063	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00067	48 83 c0 28	 add	 rax, 40			; 00000028H
  0006b	48 8b c8	 mov	 rcx, rax
  0006e	e8 00 00 00 00	 call	 validate_expr
  00073	85 c0		 test	 eax, eax
  00075	74 0a		 je	 SHORT $LN5@validate_s@4
  00077	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
  0007f	eb 08		 jmp	 SHORT $LN6@validate_s@4
$LN5@validate_s@4:
  00081	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN6@validate_s@4:
  00089	8b 44 24 24	 mov	 eax, DWORD PTR tv83[rsp]
$LN3@validate_s@4:

; 2233 : }

  0008d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00091	c3		 ret	 0
validate_star_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_08NNDNJBEA@exprlist?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_exprlist DD imagerel validate_exprlist
	DD	imagerel validate_exprlist+43
	DD	imagerel $unwind$validate_exprlist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_exprlist DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_08NNDNJBEA@exprlist?$AA@
CONST	SEGMENT
??_C@_08NNDNJBEA@exprlist?$AA@ DB 'exprlist', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_exprlist
_TEXT	SEGMENT
tree$ = 48
validate_exprlist PROC					; COMDAT

; 2898 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2899 :     return (validate_repeating_list(tree, exprlist,
; 2900 :                                     validate_expr_or_star_expr, "exprlist"));

  00009	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08NNDNJBEA@exprlist?$AA@
  00010	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:validate_expr_or_star_expr
  00017	ba 46 01 00 00	 mov	 edx, 326		; 00000146H
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tree$[rsp]
  00021	e8 00 00 00 00	 call	 validate_repeating_list

; 2901 : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
validate_exprlist ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_expr_or_star_expr DD imagerel validate_expr_or_star_expr
	DD	imagerel validate_expr_or_star_expr+51
	DD	imagerel $unwind$validate_expr_or_star_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_expr_or_star_expr DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_expr_or_star_expr
_TEXT	SEGMENT
n$ = 48
validate_expr_or_star_expr PROC				; COMDAT

; 2889 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2890 :     if (TYPE(n) == expr)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  0000e	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00011	3d 38 01 00 00	 cmp	 eax, 312		; 00000138H
  00016	75 0c		 jne	 SHORT $LN1@validate_e@4

; 2891 :         return validate_expr(n);

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  0001d	e8 00 00 00 00	 call	 validate_expr
  00022	eb 0a		 jmp	 SHORT $LN2@validate_e@4
$LN1@validate_e@4:

; 2892 :     return validate_star_expr(n);

  00024	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  00029	e8 00 00 00 00	 call	 validate_star_expr
$LN2@validate_e@4:

; 2893 : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
validate_expr_or_star_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@KNEKHPEI@Illegal?5trailing?5nodes?5for?5dicto@ ; `string'
PUBLIC	??_C@_0P@IBAIBCIC@dictorsetmaker?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_dictorsetmaker DD imagerel validate_dictorsetmaker
	DD	imagerel validate_dictorsetmaker+1414
	DD	imagerel $unwind$validate_dictorsetmaker
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_dictorsetmaker DD 020c01H
	DD	017010cH
xdata	ENDS
;	COMDAT ??_C@_0CL@KNEKHPEI@Illegal?5trailing?5nodes?5for?5dicto@
CONST	SEGMENT
??_C@_0CL@KNEKHPEI@Illegal?5trailing?5nodes?5for?5dicto@ DB 'Illegal trai'
	DB	'ling nodes for dictorsetmaker.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IBAIBCIC@dictorsetmaker?$AA@
CONST	SEGMENT
??_C@_0P@IBAIBCIC@dictorsetmaker?$AA@ DB 'dictorsetmaker', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_dictorsetmaker
_TEXT	SEGMENT
res$ = 32
i$ = 36
nch$ = 40
tv80 = 48
tv131 = 56
tv139 = 64
tv143 = 72
tv159 = 80
tv172 = 88
tv180 = 96
tv192 = 104
tv201 = 112
tv204 = 120
tv216 = 128
tv233 = 136
tv246 = 144
tv254 = 152
tv258 = 160
tv270 = 168
tree$ = 192
validate_dictorsetmaker PROC				; COMDAT

; 2911 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 2912 :     int nch = NCH(tree);

  0000c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tree$[rsp]
  00014	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00017	89 44 24 28	 mov	 DWORD PTR nch$[rsp], eax

; 2913 :     int res;
; 2914 :     int i = 0;

  0001b	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 2915 : 
; 2916 :     res = validate_ntype(tree, dictorsetmaker);

  00023	ba 48 01 00 00	 mov	 edx, 328		; 00000148H
  00028	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00030	e8 00 00 00 00	 call	 validate_ntype
  00035	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2917 :     if (!res)

  00039	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0003e	75 07		 jne	 SHORT $LN23@validate_d

; 2918 :         return 0;

  00040	33 c0		 xor	 eax, eax
  00042	e9 37 05 00 00	 jmp	 $LN24@validate_d
$LN23@validate_d:

; 2919 : 
; 2920 :     if (nch - i < 1) {

  00047	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0004b	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  0004f	2b c8		 sub	 ecx, eax
  00051	8b c1		 mov	 eax, ecx
  00053	83 f8 01	 cmp	 eax, 1
  00056	7d 20		 jge	 SHORT $LN22@validate_d

; 2921 :         (void) validate_numnodes(tree, 1, "dictorsetmaker");

  00058	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@IBAIBCIC@dictorsetmaker?$AA@
  0005f	ba 01 00 00 00	 mov	 edx, 1
  00064	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  0006c	e8 00 00 00 00	 call	 validate_numnodes

; 2922 :         return 0;

  00071	33 c0		 xor	 eax, eax
  00073	e9 06 05 00 00	 jmp	 $LN24@validate_d
$LN22@validate_d:

; 2923 :     }
; 2924 : 
; 2925 :     res = validate_test(CHILD(tree, i++));

  00078	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0007d	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00081	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00089	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0008d	48 03 c8	 add	 rcx, rax
  00090	48 89 4c 24 30	 mov	 QWORD PTR tv80[rsp], rcx
  00095	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv80[rsp]
  0009a	e8 00 00 00 00	 call	 validate_test
  0009f	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000a3	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000a7	ff c0		 inc	 eax
  000a9	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax

; 2926 :     if (!res)

  000ad	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000b2	75 07		 jne	 SHORT $LN21@validate_d

; 2927 :         return 0;

  000b4	33 c0		 xor	 eax, eax
  000b6	e9 c3 04 00 00	 jmp	 $LN24@validate_d
$LN21@validate_d:

; 2928 : 
; 2929 :     if (nch - i >= 2 && TYPE(CHILD(tree, i)) == COLON) {

  000bb	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000bf	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  000c3	2b c8		 sub	 ecx, eax
  000c5	8b c1		 mov	 eax, ecx
  000c7	83 f8 02	 cmp	 eax, 2
  000ca	0f 8c da 02 00
	00		 jl	 $LN20@validate_d
  000d0	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  000d5	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000d9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  000e1	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000e5	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  000e9	83 f8 0b	 cmp	 eax, 11
  000ec	0f 85 b8 02 00
	00		 jne	 $LN20@validate_d

; 2930 :         /* Dictionary display or dictionary comprehension. */
; 2931 :         res = (validate_colon(CHILD(tree, i++))
; 2932 :                && validate_test(CHILD(tree, i++)));

  000f2	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  000f7	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000fb	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00103	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00107	48 03 c8	 add	 rcx, rax
  0010a	48 89 4c 24 38	 mov	 QWORD PTR tv131[rsp], rcx
  0010f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00116	ba 0b 00 00 00	 mov	 edx, 11
  0011b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv131[rsp]
  00120	e8 00 00 00 00	 call	 validate_terminal
  00125	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  00129	ff c1		 inc	 ecx
  0012b	89 4c 24 24	 mov	 DWORD PTR i$[rsp], ecx
  0012f	85 c0		 test	 eax, eax
  00131	74 3f		 je	 SHORT $LN26@validate_d
  00133	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00138	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0013c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00144	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00148	48 03 c8	 add	 rcx, rax
  0014b	48 89 4c 24 40	 mov	 QWORD PTR tv139[rsp], rcx
  00150	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv139[rsp]
  00155	e8 00 00 00 00	 call	 validate_test
  0015a	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  0015e	ff c1		 inc	 ecx
  00160	89 4c 24 24	 mov	 DWORD PTR i$[rsp], ecx
  00164	85 c0		 test	 eax, eax
  00166	74 0a		 je	 SHORT $LN26@validate_d
  00168	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00170	eb 08		 jmp	 SHORT $LN27@validate_d
$LN26@validate_d:
  00172	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN27@validate_d:
  0017a	8b 44 24 48	 mov	 eax, DWORD PTR tv143[rsp]
  0017e	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2933 :         if (!res)

  00182	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00187	75 07		 jne	 SHORT $LN19@validate_d

; 2934 :             return 0;

  00189	33 c0		 xor	 eax, eax
  0018b	e9 ee 03 00 00	 jmp	 $LN24@validate_d
$LN19@validate_d:

; 2935 : 
; 2936 :         if (nch - i >= 1 && TYPE(CHILD(tree, i)) == comp_for) {

  00190	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00194	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  00198	2b c8		 sub	 ecx, eax
  0019a	8b c1		 mov	 eax, ecx
  0019c	83 f8 01	 cmp	 eax, 1
  0019f	7c 68		 jl	 SHORT $LN18@validate_d
  001a1	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  001a6	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001aa	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  001b2	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  001b6	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  001ba	3d 4d 01 00 00	 cmp	 eax, 333		; 0000014dH
  001bf	75 48		 jne	 SHORT $LN18@validate_d

; 2937 :             /* Dictionary comprehension. */
; 2938 :             res = validate_comp_for(CHILD(tree, i++));

  001c1	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  001c6	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001ca	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  001d2	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  001d6	48 03 c8	 add	 rcx, rax
  001d9	48 89 4c 24 50	 mov	 QWORD PTR tv159[rsp], rcx
  001de	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv159[rsp]
  001e3	e8 00 00 00 00	 call	 validate_comp_for
  001e8	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  001ec	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  001f0	ff c0		 inc	 eax
  001f2	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax

; 2939 :             if (!res)

  001f6	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  001fb	75 07		 jne	 SHORT $LN17@validate_d

; 2940 :                 return 0;

  001fd	33 c0		 xor	 eax, eax
  001ff	e9 7a 03 00 00	 jmp	 $LN24@validate_d
$LN17@validate_d:

; 2941 :         }
; 2942 :         else {

  00204	e9 9c 01 00 00	 jmp	 $LN16@validate_d
$LN18@validate_d:
$LN15@validate_d:

; 2943 :             /* Dictionary display. */
; 2944 :             while (nch - i >= 4) {

  00209	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0020d	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  00211	2b c8		 sub	 ecx, eax
  00213	8b c1		 mov	 eax, ecx
  00215	83 f8 04	 cmp	 eax, 4
  00218	0f 8c 21 01 00
	00		 jl	 $LN14@validate_d

; 2945 :                 res = (validate_comma(CHILD(tree, i++))
; 2946 :                        && validate_test(CHILD(tree, i++))
; 2947 :                        && validate_colon(CHILD(tree, i++))
; 2948 :                        && validate_test(CHILD(tree, i++)));

  0021e	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00223	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00227	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  0022f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00233	48 03 c8	 add	 rcx, rax
  00236	48 89 4c 24 58	 mov	 QWORD PTR tv172[rsp], rcx
  0023b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  00242	ba 0c 00 00 00	 mov	 edx, 12
  00247	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv172[rsp]
  0024c	e8 00 00 00 00	 call	 validate_terminal
  00251	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  00255	ff c1		 inc	 ecx
  00257	89 4c 24 24	 mov	 DWORD PTR i$[rsp], ecx
  0025b	85 c0		 test	 eax, eax
  0025d	0f 84 b9 00 00
	00		 je	 $LN28@validate_d
  00263	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00268	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0026c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00274	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00278	48 03 c8	 add	 rcx, rax
  0027b	48 89 4c 24 60	 mov	 QWORD PTR tv180[rsp], rcx
  00280	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv180[rsp]
  00285	e8 00 00 00 00	 call	 validate_test
  0028a	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  0028e	ff c1		 inc	 ecx
  00290	89 4c 24 24	 mov	 DWORD PTR i$[rsp], ecx
  00294	85 c0		 test	 eax, eax
  00296	0f 84 80 00 00
	00		 je	 $LN28@validate_d
  0029c	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  002a1	48 6b c0 28	 imul	 rax, 40			; 00000028H
  002a5	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  002ad	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  002b1	48 03 c8	 add	 rcx, rax
  002b4	48 89 4c 24 68	 mov	 QWORD PTR tv192[rsp], rcx
  002b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  002c0	ba 0b 00 00 00	 mov	 edx, 11
  002c5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv192[rsp]
  002ca	e8 00 00 00 00	 call	 validate_terminal
  002cf	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  002d3	ff c1		 inc	 ecx
  002d5	89 4c 24 24	 mov	 DWORD PTR i$[rsp], ecx
  002d9	85 c0		 test	 eax, eax
  002db	74 3f		 je	 SHORT $LN28@validate_d
  002dd	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  002e2	48 6b c0 28	 imul	 rax, 40			; 00000028H
  002e6	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  002ee	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  002f2	48 03 c8	 add	 rcx, rax
  002f5	48 89 4c 24 70	 mov	 QWORD PTR tv201[rsp], rcx
  002fa	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv201[rsp]
  002ff	e8 00 00 00 00	 call	 validate_test
  00304	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  00308	ff c1		 inc	 ecx
  0030a	89 4c 24 24	 mov	 DWORD PTR i$[rsp], ecx
  0030e	85 c0		 test	 eax, eax
  00310	74 0a		 je	 SHORT $LN28@validate_d
  00312	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv204[rsp], 1
  0031a	eb 08		 jmp	 SHORT $LN29@validate_d
$LN28@validate_d:
  0031c	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv204[rsp], 0
$LN29@validate_d:
  00324	8b 44 24 78	 mov	 eax, DWORD PTR tv204[rsp]
  00328	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2949 :                 if (!res)

  0032c	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00331	75 07		 jne	 SHORT $LN13@validate_d

; 2950 :                     return 0;

  00333	33 c0		 xor	 eax, eax
  00335	e9 44 02 00 00	 jmp	 $LN24@validate_d
$LN13@validate_d:

; 2951 :             }

  0033a	e9 ca fe ff ff	 jmp	 $LN15@validate_d
$LN14@validate_d:

; 2952 :             if (nch - i == 1) {

  0033f	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00343	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  00347	2b c8		 sub	 ecx, eax
  00349	8b c1		 mov	 eax, ecx
  0034b	83 f8 01	 cmp	 eax, 1
  0034e	75 55		 jne	 SHORT $LN12@validate_d

; 2953 :                 res = validate_comma(CHILD(tree, i++));

  00350	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00355	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00359	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00361	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00365	48 03 c8	 add	 rcx, rax
  00368	48 89 8c 24 80
	00 00 00	 mov	 QWORD PTR tv216[rsp], rcx
  00370	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  00377	ba 0c 00 00 00	 mov	 edx, 12
  0037c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv216[rsp]
  00384	e8 00 00 00 00	 call	 validate_terminal
  00389	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  0038d	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00391	ff c0		 inc	 eax
  00393	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax

; 2954 :                 if (!res)

  00397	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0039c	75 07		 jne	 SHORT $LN11@validate_d

; 2955 :                     return 0;

  0039e	33 c0		 xor	 eax, eax
  003a0	e9 d9 01 00 00	 jmp	 $LN24@validate_d
$LN11@validate_d:
$LN12@validate_d:
$LN16@validate_d:

; 2956 :             }
; 2957 :         }
; 2958 :     }
; 2959 :     else {

  003a5	e9 af 01 00 00	 jmp	 $LN10@validate_d
$LN20@validate_d:

; 2960 :         /* Set display or set comprehension. */
; 2961 :         if (nch - i >= 1 && TYPE(CHILD(tree, i)) == comp_for) {

  003aa	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  003ae	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  003b2	2b c8		 sub	 ecx, eax
  003b4	8b c1		 mov	 eax, ecx
  003b6	83 f8 01	 cmp	 eax, 1
  003b9	7c 6e		 jl	 SHORT $LN9@validate_d
  003bb	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  003c0	48 6b c0 28	 imul	 rax, 40			; 00000028H
  003c4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  003cc	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  003d0	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  003d4	3d 4d 01 00 00	 cmp	 eax, 333		; 0000014dH
  003d9	75 4e		 jne	 SHORT $LN9@validate_d

; 2962 :             /* Set comprehension. */
; 2963 :             res = validate_comp_for(CHILD(tree, i++));

  003db	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  003e0	48 6b c0 28	 imul	 rax, 40			; 00000028H
  003e4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  003ec	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  003f0	48 03 c8	 add	 rcx, rax
  003f3	48 89 8c 24 88
	00 00 00	 mov	 QWORD PTR tv233[rsp], rcx
  003fb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv233[rsp]
  00403	e8 00 00 00 00	 call	 validate_comp_for
  00408	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  0040c	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00410	ff c0		 inc	 eax
  00412	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax

; 2964 :             if (!res)

  00416	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0041b	75 07		 jne	 SHORT $LN8@validate_d

; 2965 :                 return 0;

  0041d	33 c0		 xor	 eax, eax
  0041f	e9 5a 01 00 00	 jmp	 $LN24@validate_d
$LN8@validate_d:

; 2966 :         }
; 2967 :         else {

  00424	e9 30 01 00 00	 jmp	 $LN7@validate_d
$LN9@validate_d:
$LN6@validate_d:

; 2968 :             /* Set display. */
; 2969 :             while (nch - i >= 2) {

  00429	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0042d	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  00431	2b c8		 sub	 ecx, eax
  00433	8b c1		 mov	 eax, ecx
  00435	83 f8 02	 cmp	 eax, 2
  00438	0f 8c b8 00 00
	00		 jl	 $LN5@validate_d

; 2970 :                 res = (validate_comma(CHILD(tree, i++))
; 2971 :                        && validate_test(CHILD(tree, i++)));

  0043e	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00443	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00447	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  0044f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00453	48 03 c8	 add	 rcx, rax
  00456	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv246[rsp], rcx
  0045e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  00465	ba 0c 00 00 00	 mov	 edx, 12
  0046a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv246[rsp]
  00472	e8 00 00 00 00	 call	 validate_terminal
  00477	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  0047b	ff c1		 inc	 ecx
  0047d	89 4c 24 24	 mov	 DWORD PTR i$[rsp], ecx
  00481	85 c0		 test	 eax, eax
  00483	74 48		 je	 SHORT $LN30@validate_d
  00485	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0048a	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0048e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00496	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0049a	48 03 c8	 add	 rcx, rax
  0049d	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv254[rsp], rcx
  004a5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv254[rsp]
  004ad	e8 00 00 00 00	 call	 validate_test
  004b2	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  004b6	ff c1		 inc	 ecx
  004b8	89 4c 24 24	 mov	 DWORD PTR i$[rsp], ecx
  004bc	85 c0		 test	 eax, eax
  004be	74 0d		 je	 SHORT $LN30@validate_d
  004c0	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv258[rsp], 1
  004cb	eb 0b		 jmp	 SHORT $LN31@validate_d
$LN30@validate_d:
  004cd	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv258[rsp], 0
$LN31@validate_d:
  004d8	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv258[rsp]
  004df	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2972 :                 if (!res)

  004e3	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  004e8	75 07		 jne	 SHORT $LN4@validate_d

; 2973 :                     return 0;

  004ea	33 c0		 xor	 eax, eax
  004ec	e9 8d 00 00 00	 jmp	 $LN24@validate_d
$LN4@validate_d:

; 2974 :             }

  004f1	e9 33 ff ff ff	 jmp	 $LN6@validate_d
$LN5@validate_d:

; 2975 :             if (nch - i == 1) {

  004f6	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  004fa	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  004fe	2b c8		 sub	 ecx, eax
  00500	8b c1		 mov	 eax, ecx
  00502	83 f8 01	 cmp	 eax, 1
  00505	75 52		 jne	 SHORT $LN3@validate_d

; 2976 :                 res = validate_comma(CHILD(tree, i++));

  00507	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0050c	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00510	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  00518	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0051c	48 03 c8	 add	 rcx, rax
  0051f	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv270[rsp], rcx
  00527	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0052e	ba 0c 00 00 00	 mov	 edx, 12
  00533	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv270[rsp]
  0053b	e8 00 00 00 00	 call	 validate_terminal
  00540	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00544	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00548	ff c0		 inc	 eax
  0054a	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax

; 2977 :                 if (!res)

  0054e	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00553	75 04		 jne	 SHORT $LN2@validate_d

; 2978 :                     return 0;

  00555	33 c0		 xor	 eax, eax
  00557	eb 25		 jmp	 SHORT $LN24@validate_d
$LN2@validate_d:
$LN3@validate_d:
$LN7@validate_d:
$LN10@validate_d:

; 2979 :             }
; 2980 :         }
; 2981 :     }
; 2982 : 
; 2983 :     if (nch - i > 0) {

  00559	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0055d	8b 4c 24 28	 mov	 ecx, DWORD PTR nch$[rsp]
  00561	2b c8		 sub	 ecx, eax
  00563	8b c1		 mov	 eax, ecx
  00565	85 c0		 test	 eax, eax
  00567	7e 10		 jle	 SHORT $LN1@validate_d

; 2984 :         err_string("Illegal trailing nodes for dictorsetmaker.");

  00569	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@KNEKHPEI@Illegal?5trailing?5nodes?5for?5dicto@
  00570	e8 00 00 00 00	 call	 err_string

; 2985 :         return 0;

  00575	33 c0		 xor	 eax, eax
  00577	eb 05		 jmp	 SHORT $LN24@validate_d
$LN1@validate_d:

; 2986 :     }
; 2987 : 
; 2988 :     return 1;

  00579	b8 01 00 00 00	 mov	 eax, 1
$LN24@validate_d:

; 2989 : }

  0057e	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00585	c3		 ret	 0
validate_dictorsetmaker ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@EIILMLPB@VALIDATION?5FAILURE?3?5report?5this?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_file_input DD imagerel validate_file_input
	DD	imagerel validate_file_input+264
	DD	imagerel $unwind$validate_file_input
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_file_input DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0DD@EIILMLPB@VALIDATION?5FAILURE?3?5report?5this?5@
CONST	SEGMENT
??_C@_0DD@EIILMLPB@VALIDATION?5FAILURE?3?5report?5this?5@ DB 'VALIDATION '
	DB	'FAILURE: report this to the maintainer!', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_file_input
_TEXT	SEGMENT
res$ = 32
nch$ = 36
j$ = 40
tv75 = 44
tree$ = 64
validate_file_input PROC				; COMDAT

; 3217 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3218 :     int j;
; 3219 :     int nch = NCH(tree) - 1;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	ff c8		 dec	 eax
  00013	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 3220 :     int res = ((nch >= 0)
; 3221 :                && validate_ntype(CHILD(tree, nch), ENDMARKER));

  00017	83 7c 24 24 00	 cmp	 DWORD PTR nch$[rsp], 0
  0001c	7c 2a		 jl	 SHORT $LN9@validate_f@2
  0001e	48 63 44 24 24	 movsxd	 rax, DWORD PTR nch$[rsp]
  00023	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0002c	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00030	33 d2		 xor	 edx, edx
  00032	48 8b c8	 mov	 rcx, rax
  00035	e8 00 00 00 00	 call	 validate_ntype
  0003a	85 c0		 test	 eax, eax
  0003c	74 0a		 je	 SHORT $LN9@validate_f@2
  0003e	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  00046	eb 08		 jmp	 SHORT $LN10@validate_f@2
$LN9@validate_f@2:
  00048	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN10@validate_f@2:
  00050	8b 44 24 2c	 mov	 eax, DWORD PTR tv75[rsp]
  00054	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3222 : 
; 3223 :     for (j = 0; res && (j < nch); ++j) {

  00058	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00060	eb 0a		 jmp	 SHORT $LN6@validate_f@2
$LN5@validate_f@2:
  00062	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00066	ff c0		 inc	 eax
  00068	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN6@validate_f@2:
  0006c	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00071	74 6f		 je	 SHORT $LN4@validate_f@2
  00073	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00077	39 44 24 28	 cmp	 DWORD PTR j$[rsp], eax
  0007b	7d 65		 jge	 SHORT $LN4@validate_f@2

; 3224 :         if (TYPE(CHILD(tree, j)) == stmt)

  0007d	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  00082	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00086	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0008b	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0008f	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00093	3d 0c 01 00 00	 cmp	 eax, 268		; 0000010cH
  00098	75 20		 jne	 SHORT $LN3@validate_f@2

; 3225 :             res = validate_stmt(CHILD(tree, j));

  0009a	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  0009f	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000a3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000a8	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000ac	48 8b c8	 mov	 rcx, rax
  000af	e8 00 00 00 00	 call	 validate_stmt
  000b4	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3226 :         else

  000b8	eb 26		 jmp	 SHORT $LN2@validate_f@2
$LN3@validate_f@2:

; 3227 :             res = validate_newline(CHILD(tree, j));

  000ba	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  000bf	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000c3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000c8	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000cc	45 33 c0	 xor	 r8d, r8d
  000cf	ba 04 00 00 00	 mov	 edx, 4
  000d4	48 8b c8	 mov	 rcx, rax
  000d7	e8 00 00 00 00	 call	 validate_terminal
  000dc	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN2@validate_f@2:

; 3228 :     }

  000e0	eb 80		 jmp	 SHORT $LN5@validate_f@2
$LN4@validate_f@2:

; 3229 :     /*  This stays in to prevent any internal failures from getting to the
; 3230 :      *  user.  Hopefully, this won't be needed.  If a user reports getting
; 3231 :      *  this, we have some debugging to do.
; 3232 :      */
; 3233 :     if (!res && !PyErr_Occurred())

  000e2	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000e7	75 16		 jne	 SHORT $LN1@validate_f@2
  000e9	e8 00 00 00 00	 call	 PyErr_Occurred
  000ee	48 85 c0	 test	 rax, rax
  000f1	75 0c		 jne	 SHORT $LN1@validate_f@2

; 3234 :         err_string("VALIDATION FAILURE: report this to the maintainer!");

  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@EIILMLPB@VALIDATION?5FAILURE?3?5report?5this?5@
  000fa	e8 00 00 00 00	 call	 err_string
$LN1@validate_f@2:

; 3235 : 
; 3236 :     return (res);

  000ff	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 3237 : }

  00103	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00107	c3		 ret	 0
validate_file_input ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GIKOEBLH@stmt?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_stmt DD imagerel validate_stmt
	DD	imagerel validate_stmt+155
	DD	imagerel $unwind$validate_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_stmt DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_04GIKOEBLH@stmt?$AA@
CONST	SEGMENT
??_C@_04GIKOEBLH@stmt?$AA@ DB 'stmt', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_stmt
_TEXT	SEGMENT
res$ = 32
tv73 = 36
tree$ = 64
validate_stmt PROC					; COMDAT

; 1434 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1435 :     int res = (validate_ntype(tree, stmt)
; 1436 :                && validate_numnodes(tree, 1, "stmt"));

  00009	ba 0c 01 00 00	 mov	 edx, 268		; 0000010cH
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00013	e8 00 00 00 00	 call	 validate_ntype
  00018	85 c0		 test	 eax, eax
  0001a	74 24		 je	 SHORT $LN6@validate_s@5
  0001c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04GIKOEBLH@stmt?$AA@
  00023	ba 01 00 00 00	 mov	 edx, 1
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0002d	e8 00 00 00 00	 call	 validate_numnodes
  00032	85 c0		 test	 eax, eax
  00034	74 0a		 je	 SHORT $LN6@validate_s@5
  00036	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  0003e	eb 08		 jmp	 SHORT $LN7@validate_s@5
$LN6@validate_s@5:
  00040	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN7@validate_s@5:
  00048	8b 44 24 24	 mov	 eax, DWORD PTR tv73[rsp]
  0004c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1437 : 
; 1438 :     if (res) {

  00050	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00055	74 3b		 je	 SHORT $LN3@validate_s@5

; 1439 :         tree = CHILD(tree, 0);

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0005c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00060	48 89 44 24 40	 mov	 QWORD PTR tree$[rsp], rax

; 1440 : 
; 1441 :         if (TYPE(tree) == simple_stmt)

  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0006a	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0006d	3d 0d 01 00 00	 cmp	 eax, 269		; 0000010dH
  00072	75 10		 jne	 SHORT $LN2@validate_s@5

; 1442 :             res = validate_simple_stmt(tree);

  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00079	e8 00 00 00 00	 call	 validate_simple_stmt
  0007e	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1443 :         else

  00082	eb 0e		 jmp	 SHORT $LN1@validate_s@5
$LN2@validate_s@5:

; 1444 :             res = validate_compound_stmt(tree);

  00084	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00089	e8 00 00 00 00	 call	 validate_compound_stmt
  0008e	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_s@5:
$LN3@validate_s@5:

; 1445 :     }
; 1446 :     return (res);

  00092	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1447 : }

  00096	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009a	c3		 ret	 0
validate_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_01ICJEACDI@?$DL?$AA@			; `string'
PUBLIC	??_C@_0M@NKLMKLPN@simple_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_simple_stmt DD imagerel validate_simple_stmt
	DD	imagerel validate_simple_stmt+420
	DD	imagerel $unwind$validate_simple_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_simple_stmt DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL?$AA@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL?$AA@ DB ';', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NKLMKLPN@simple_stmt?$AA@
CONST	SEGMENT
??_C@_0M@NKLMKLPN@simple_stmt?$AA@ DB 'simple_stmt', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_simple_stmt
_TEXT	SEGMENT
res$ = 32
nch$ = 36
i$22945 = 40
tv84 = 44
tv157 = 48
tree$ = 80
validate_simple_stmt PROC				; COMDAT

; 1455 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1456 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1457 :     int res = (validate_ntype(tree, simple_stmt)
; 1458 :                && (nch >= 2)
; 1459 :                && validate_small_stmt(CHILD(tree, 0))
; 1460 :                && validate_newline(CHILD(tree, nch - 1)));

  00015	ba 0d 01 00 00	 mov	 edx, 269		; 0000010dH
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 4c		 je	 SHORT $LN9@validate_s@6
  00028	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  0002d	7c 45		 jl	 SHORT $LN9@validate_s@6
  0002f	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00034	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00038	e8 00 00 00 00	 call	 validate_small_stmt
  0003d	85 c0		 test	 eax, eax
  0003f	74 33		 je	 SHORT $LN9@validate_s@6
  00041	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00045	ff c8		 dec	 eax
  00047	48 98		 cdqe
  00049	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0004d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00052	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00056	45 33 c0	 xor	 r8d, r8d
  00059	ba 04 00 00 00	 mov	 edx, 4
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 validate_terminal
  00066	85 c0		 test	 eax, eax
  00068	74 0a		 je	 SHORT $LN9@validate_s@6
  0006a	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  00072	eb 08		 jmp	 SHORT $LN10@validate_s@6
$LN9@validate_s@6:
  00074	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN10@validate_s@6:
  0007c	8b 44 24 2c	 mov	 eax, DWORD PTR tv84[rsp]
  00080	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1461 : 
; 1462 :     if (nch < 2)

  00084	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  00089	7d 1a		 jge	 SHORT $LN6@validate_s@6

; 1463 :         res = validate_numnodes(tree, 2, "simple_stmt");

  0008b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@NKLMKLPN@simple_stmt?$AA@
  00092	ba 02 00 00 00	 mov	 edx, 2
  00097	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0009c	e8 00 00 00 00	 call	 validate_numnodes
  000a1	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN6@validate_s@6:

; 1464 :     --nch;                              /* forget the NEWLINE    */

  000a5	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000a9	ff c8		 dec	 eax
  000ab	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1465 :     if (res && is_even(nch))

  000af	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000b4	74 3f		 je	 SHORT $LN5@validate_s@6
  000b6	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000ba	83 e0 01	 and	 eax, 1
  000bd	85 c0		 test	 eax, eax
  000bf	75 34		 jne	 SHORT $LN5@validate_s@6

; 1466 :         res = validate_semi(CHILD(tree, --nch));

  000c1	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000c5	ff c8		 dec	 eax
  000c7	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax
  000cb	48 63 44 24 24	 movsxd	 rax, DWORD PTR nch$[rsp]
  000d0	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000d4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000d9	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ICJEACDI@?$DL?$AA@
  000e4	ba 0d 00 00 00	 mov	 edx, 13
  000e9	48 8b c8	 mov	 rcx, rax
  000ec	e8 00 00 00 00	 call	 validate_terminal
  000f1	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN5@validate_s@6:

; 1467 :     if (res && (nch > 2)) {

  000f5	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000fa	0f 84 9b 00 00
	00		 je	 $LN4@validate_s@6
  00100	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  00105	0f 8e 90 00 00
	00		 jle	 $LN4@validate_s@6

; 1468 :         int i;
; 1469 : 
; 1470 :         for (i = 1; res && (i < nch); i += 2)

  0010b	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR i$22945[rsp], 1
  00113	eb 0b		 jmp	 SHORT $LN3@validate_s@6
$LN2@validate_s@6:
  00115	8b 44 24 28	 mov	 eax, DWORD PTR i$22945[rsp]
  00119	83 c0 02	 add	 eax, 2
  0011c	89 44 24 28	 mov	 DWORD PTR i$22945[rsp], eax
$LN3@validate_s@6:
  00120	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00125	74 74		 je	 SHORT $LN1@validate_s@6
  00127	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0012b	39 44 24 28	 cmp	 DWORD PTR i$22945[rsp], eax
  0012f	7d 6a		 jge	 SHORT $LN1@validate_s@6

; 1471 :             res = (validate_semi(CHILD(tree, i))
; 1472 :                    && validate_small_stmt(CHILD(tree, i + 1)));

  00131	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$22945[rsp]
  00136	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0013a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0013f	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00143	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ICJEACDI@?$DL?$AA@
  0014a	ba 0d 00 00 00	 mov	 edx, 13
  0014f	48 8b c8	 mov	 rcx, rax
  00152	e8 00 00 00 00	 call	 validate_terminal
  00157	85 c0		 test	 eax, eax
  00159	74 2b		 je	 SHORT $LN11@validate_s@6
  0015b	8b 44 24 28	 mov	 eax, DWORD PTR i$22945[rsp]
  0015f	ff c0		 inc	 eax
  00161	48 98		 cdqe
  00163	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00167	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0016c	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00170	48 8b c8	 mov	 rcx, rax
  00173	e8 00 00 00 00	 call	 validate_small_stmt
  00178	85 c0		 test	 eax, eax
  0017a	74 0a		 je	 SHORT $LN11@validate_s@6
  0017c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  00184	eb 08		 jmp	 SHORT $LN12@validate_s@6
$LN11@validate_s@6:
  00186	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN12@validate_s@6:
  0018e	8b 44 24 30	 mov	 eax, DWORD PTR tv157[rsp]
  00192	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00196	e9 7a ff ff ff	 jmp	 $LN2@validate_s@6
$LN1@validate_s@6:
$LN4@validate_s@6:

; 1473 :     }
; 1474 :     return (res);

  0019b	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1475 : }

  0019f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001a3	c3		 ret	 0
validate_simple_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@CDFFAMLN@Unrecognized?5child?5node?5of?5small@ ; `string'
PUBLIC	??_C@_0BO@JILDABBH@illegal?5small_stmt?5child?5type?$AA@ ; `string'
PUBLIC	??_C@_0L@PLEAAANE@small_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_small_stmt DD imagerel validate_small_stmt
	DD	imagerel validate_small_stmt+254
	DD	imagerel $unwind$validate_small_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_small_stmt DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CL@CDFFAMLN@Unrecognized?5child?5node?5of?5small@
CONST	SEGMENT
??_C@_0CL@CDFFAMLN@Unrecognized?5child?5node?5of?5small@ DB 'Unrecognized'
	DB	' child node of small_stmt: %d.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JILDABBH@illegal?5small_stmt?5child?5type?$AA@
CONST	SEGMENT
??_C@_0BO@JILDABBH@illegal?5small_stmt?5child?5type?$AA@ DB 'illegal smal'
	DB	'l_stmt child type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PLEAAANE@small_stmt?$AA@
CONST	SEGMENT
??_C@_0L@PLEAAANE@small_stmt?$AA@ DB 'small_stmt', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_small_stmt
_TEXT	SEGMENT
res$ = 32
nch$ = 36
ntype$22956 = 40
tree$ = 64
validate_small_stmt PROC				; COMDAT

; 1480 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1481 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1482 :     int res = validate_numnodes(tree, 1, "small_stmt");

  00015	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@PLEAAANE@small_stmt?$AA@
  0001c	ba 01 00 00 00	 mov	 edx, 1
  00021	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00026	e8 00 00 00 00	 call	 validate_numnodes
  0002b	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1483 : 
; 1484 :     if (res) {

  0002f	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00034	0f 84 8a 00 00
	00		 je	 $LN6@validate_s@7

; 1485 :         int ntype = TYPE(CHILD(tree, 0));

  0003a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0003f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00043	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00046	89 44 24 28	 mov	 DWORD PTR ntype$22956[rsp], eax

; 1486 : 
; 1487 :         if (  (ntype == expr_stmt)
; 1488 :               || (ntype == del_stmt)
; 1489 :               || (ntype == pass_stmt)
; 1490 :               || (ntype == flow_stmt)
; 1491 :               || (ntype == import_stmt)
; 1492 :               || (ntype == global_stmt)
; 1493 :               || (ntype == nonlocal_stmt)
; 1494 :               || (ntype == assert_stmt))

  0004a	81 7c 24 28 0f
	01 00 00	 cmp	 DWORD PTR ntype$22956[rsp], 271 ; 0000010fH
  00052	74 46		 je	 SHORT $LN4@validate_s@7
  00054	81 7c 24 28 12
	01 00 00	 cmp	 DWORD PTR ntype$22956[rsp], 274 ; 00000112H
  0005c	74 3c		 je	 SHORT $LN4@validate_s@7
  0005e	81 7c 24 28 13
	01 00 00	 cmp	 DWORD PTR ntype$22956[rsp], 275 ; 00000113H
  00066	74 32		 je	 SHORT $LN4@validate_s@7
  00068	81 7c 24 28 14
	01 00 00	 cmp	 DWORD PTR ntype$22956[rsp], 276 ; 00000114H
  00070	74 28		 je	 SHORT $LN4@validate_s@7
  00072	81 7c 24 28 1a
	01 00 00	 cmp	 DWORD PTR ntype$22956[rsp], 282 ; 0000011aH
  0007a	74 1e		 je	 SHORT $LN4@validate_s@7
  0007c	81 7c 24 28 22
	01 00 00	 cmp	 DWORD PTR ntype$22956[rsp], 290 ; 00000122H
  00084	74 14		 je	 SHORT $LN4@validate_s@7
  00086	81 7c 24 28 23
	01 00 00	 cmp	 DWORD PTR ntype$22956[rsp], 291 ; 00000123H
  0008e	74 0a		 je	 SHORT $LN4@validate_s@7
  00090	81 7c 24 28 24
	01 00 00	 cmp	 DWORD PTR ntype$22956[rsp], 292 ; 00000124H
  00098	75 14		 jne	 SHORT $LN5@validate_s@7
$LN4@validate_s@7:

; 1495 :             res = validate_node(CHILD(tree, 0));

  0009a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0009f	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  000a3	e8 00 00 00 00	 call	 validate_node
  000a8	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1496 :         else {

  000ac	eb 14		 jmp	 SHORT $LN3@validate_s@7
$LN5@validate_s@7:

; 1497 :             res = 0;

  000ae	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 1498 :             err_string("illegal small_stmt child type");

  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@JILDABBH@illegal?5small_stmt?5child?5type?$AA@
  000bd	e8 00 00 00 00	 call	 err_string
$LN3@validate_s@7:

; 1499 :         }

  000c2	eb 31		 jmp	 SHORT $LN2@validate_s@7
$LN6@validate_s@7:

; 1500 :     }
; 1501 :     else if (nch == 1) {

  000c4	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  000c9	75 2a		 jne	 SHORT $LN1@validate_s@7

; 1502 :         res = 0;

  000cb	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 1503 :         PyErr_Format(parser_error,
; 1504 :                      "Unrecognized child node of small_stmt: %d.",
; 1505 :                      TYPE(CHILD(tree, 0)));

  000d3	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000d8	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000dc	0f bf 00	 movsx	 eax, WORD PTR [rax]
  000df	44 8b c0	 mov	 r8d, eax
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@CDFFAMLN@Unrecognized?5child?5node?5of?5small@
  000e9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  000f0	e8 00 00 00 00	 call	 PyErr_Format
$LN1@validate_s@7:
$LN2@validate_s@7:

; 1506 :     }
; 1507 :     return (res);

  000f5	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1508 : }

  000f9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fd	c3		 ret	 0
validate_small_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@EJAOEKGC@Illegal?5compound?5statement?5type?3@ ; `string'
PUBLIC	??_C@_0O@DDEPOMNL@compound_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_compound_stmt DD imagerel validate_compound_stmt
	DD	imagerel validate_compound_stmt+263
	DD	imagerel $unwind$validate_compound_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_compound_stmt DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CF@EJAOEKGC@Illegal?5compound?5statement?5type?3@
CONST	SEGMENT
??_C@_0CF@EJAOEKGC@Illegal?5compound?5statement?5type?3@ DB 'Illegal comp'
	DB	'ound statement type: %d.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DDEPOMNL@compound_stmt?$AA@
CONST	SEGMENT
??_C@_0O@DDEPOMNL@compound_stmt?$AA@ DB 'compound_stmt', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_compound_stmt
_TEXT	SEGMENT
res$ = 32
ntype$ = 36
tv73 = 40
tree$ = 64
validate_compound_stmt PROC				; COMDAT

; 1516 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1517 :     int res = (validate_ntype(tree, compound_stmt)
; 1518 :                && validate_numnodes(tree, 1, "compound_stmt"));

  00009	ba 25 01 00 00	 mov	 edx, 293		; 00000125H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00013	e8 00 00 00 00	 call	 validate_ntype
  00018	85 c0		 test	 eax, eax
  0001a	74 24		 je	 SHORT $LN7@validate_c@7
  0001c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@DDEPOMNL@compound_stmt?$AA@
  00023	ba 01 00 00 00	 mov	 edx, 1
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0002d	e8 00 00 00 00	 call	 validate_numnodes
  00032	85 c0		 test	 eax, eax
  00034	74 0a		 je	 SHORT $LN7@validate_c@7
  00036	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  0003e	eb 08		 jmp	 SHORT $LN8@validate_c@7
$LN7@validate_c@7:
  00040	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN8@validate_c@7:
  00048	8b 44 24 28	 mov	 eax, DWORD PTR tv73[rsp]
  0004c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1519 :     int ntype;
; 1520 : 
; 1521 :     if (!res)

  00050	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00055	75 07		 jne	 SHORT $LN4@validate_c@7

; 1522 :         return (0);

  00057	33 c0		 xor	 eax, eax
  00059	e9 a4 00 00 00	 jmp	 $LN5@validate_c@7
$LN4@validate_c@7:

; 1523 : 
; 1524 :     tree = CHILD(tree, 0);

  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00063	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00067	48 89 44 24 40	 mov	 QWORD PTR tree$[rsp], rax

; 1525 :     ntype = TYPE(tree);

  0006c	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00071	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00074	89 44 24 24	 mov	 DWORD PTR ntype$[rsp], eax

; 1526 :     if (  (ntype == if_stmt)
; 1527 :           || (ntype == while_stmt)
; 1528 :           || (ntype == for_stmt)
; 1529 :           || (ntype == try_stmt)
; 1530 :           || (ntype == with_stmt)
; 1531 :           || (ntype == funcdef)
; 1532 :           || (ntype == classdef)
; 1533 :           || (ntype == decorated))

  00078	81 7c 24 24 26
	01 00 00	 cmp	 DWORD PTR ntype$[rsp], 294 ; 00000126H
  00080	74 46		 je	 SHORT $LN2@validate_c@7
  00082	81 7c 24 24 27
	01 00 00	 cmp	 DWORD PTR ntype$[rsp], 295 ; 00000127H
  0008a	74 3c		 je	 SHORT $LN2@validate_c@7
  0008c	81 7c 24 24 28
	01 00 00	 cmp	 DWORD PTR ntype$[rsp], 296 ; 00000128H
  00094	74 32		 je	 SHORT $LN2@validate_c@7
  00096	81 7c 24 24 29
	01 00 00	 cmp	 DWORD PTR ntype$[rsp], 297 ; 00000129H
  0009e	74 28		 je	 SHORT $LN2@validate_c@7
  000a0	81 7c 24 24 2a
	01 00 00	 cmp	 DWORD PTR ntype$[rsp], 298 ; 0000012aH
  000a8	74 1e		 je	 SHORT $LN2@validate_c@7
  000aa	81 7c 24 24 06
	01 00 00	 cmp	 DWORD PTR ntype$[rsp], 262 ; 00000106H
  000b2	74 14		 je	 SHORT $LN2@validate_c@7
  000b4	81 7c 24 24 49
	01 00 00	 cmp	 DWORD PTR ntype$[rsp], 329 ; 00000149H
  000bc	74 0a		 je	 SHORT $LN2@validate_c@7
  000be	81 7c 24 24 05
	01 00 00	 cmp	 DWORD PTR ntype$[rsp], 261 ; 00000105H
  000c6	75 10		 jne	 SHORT $LN3@validate_c@7
$LN2@validate_c@7:

; 1534 :         res = validate_node(tree);

  000c8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000cd	e8 00 00 00 00	 call	 validate_node
  000d2	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1535 :     else {

  000d6	eb 26		 jmp	 SHORT $LN1@validate_c@7
$LN3@validate_c@7:

; 1536 :         res = 0;

  000d8	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 1537 :         PyErr_Format(parser_error,
; 1538 :                      "Illegal compound statement type: %d.", TYPE(tree));

  000e0	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000e5	0f bf 00	 movsx	 eax, WORD PTR [rax]
  000e8	44 8b c0	 mov	 r8d, eax
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@EJAOEKGC@Illegal?5compound?5statement?5type?3@
  000f2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  000f9	e8 00 00 00 00	 call	 PyErr_Format
$LN1@validate_c@7:

; 1539 :     }
; 1540 :     return (res);

  000fe	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN5@validate_c@7:

; 1541 : }

  00102	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00106	c3		 ret	 0
validate_compound_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@OAHKNDHF@unrecognized?5node?5type?$AA@ ; `string'
PUBLIC	??_C@_08DLICDMBN@continue?$AA@			; `string'
PUBLIC	??_C@_05ELPHFHOI@break?$AA@			; `string'
PUBLIC	??_C@_04BBDAIEHH@pass?$AA@			; `string'
PUBLIC	??_C@_0BH@NIHNHKIN@illegal?5flow_stmt?5type?$AA@ ; `string'
PUBLIC	??_C@_09PGHEDOML@flow_stmt?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_node DD imagerel validate_node
	DD	imagerel validate_node+1664
	DD	imagerel $unwind$validate_node
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_node DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BH@OAHKNDHF@unrecognized?5node?5type?$AA@
CONST	SEGMENT
??_C@_0BH@OAHKNDHF@unrecognized?5node?5type?$AA@ DB 'unrecognized node ty'
	DB	'pe', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08DLICDMBN@continue?$AA@
CONST	SEGMENT
??_C@_08DLICDMBN@continue?$AA@ DB 'continue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05ELPHFHOI@break?$AA@
CONST	SEGMENT
??_C@_05ELPHFHOI@break?$AA@ DB 'break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBDAIEHH@pass?$AA@
CONST	SEGMENT
??_C@_04BBDAIEHH@pass?$AA@ DB 'pass', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NIHNHKIN@illegal?5flow_stmt?5type?$AA@
CONST	SEGMENT
??_C@_0BH@NIHNHKIN@illegal?5flow_stmt?5type?$AA@ DB 'illegal flow_stmt ty'
	DB	'pe', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09PGHEDOML@flow_stmt?$AA@
CONST	SEGMENT
??_C@_09PGHEDOML@flow_stmt?$AA@ DB 'flow_stmt', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_node
_TEXT	SEGMENT
res$ = 32
next$ = 40
nch$ = 48
tv68 = 52
tv138 = 56
tv164 = 60
tv176 = 64
tv188 = 68
tree$ = 96
validate_node PROC					; COMDAT

; 3011 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3012 :     int   nch  = 0;                     /* num. children on current node  */

  00009	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR nch$[rsp], 0

; 3013 :     int   res  = 1;                     /* result value                   */

  00011	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR res$[rsp], 1

; 3014 :     node* next = 0;                     /* node to process after this one */

  00019	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR next$[rsp], 0
$LN53@validate_n@4:

; 3015 : 
; 3016 :     while (res && (tree != 0)) {

  00022	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00027	0f 84 45 05 00
	00		 je	 $LN52@validate_n@4
  0002d	48 83 7c 24 60
	00		 cmp	 QWORD PTR tree$[rsp], 0
  00033	0f 84 39 05 00
	00		 je	 $LN52@validate_n@4

; 3017 :         nch  = NCH(tree);

  00039	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  0003e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00041	89 44 24 30	 mov	 DWORD PTR nch$[rsp], eax

; 3018 :         next = 0;

  00045	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR next$[rsp], 0

; 3019 :         switch (TYPE(tree)) {

  0004e	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  00053	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00056	89 44 24 34	 mov	 DWORD PTR tv68[rsp], eax
  0005a	8b 44 24 34	 mov	 eax, DWORD PTR tv68[rsp]
  0005e	2d 05 01 00 00	 sub	 eax, 261		; 00000105H
  00063	89 44 24 34	 mov	 DWORD PTR tv68[rsp], eax
  00067	83 7c 24 34 4b	 cmp	 DWORD PTR tv68[rsp], 75	; 0000004bH
  0006c	0f 87 dd 04 00
	00		 ja	 $LN1@validate_n@4
  00072	48 63 44 24 34	 movsxd	 rax, DWORD PTR tv68[rsp]
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0007e	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN65@validate_n@4[rcx+rax]
  00086	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN66@validate_n@4[rcx+rax*4]
  0008d	48 03 c1	 add	 rax, rcx
  00090	ff e0		 jmp	 rax
$LN49@validate_n@4:

; 3020 :             /*
; 3021 :              *  Definition nodes.
; 3022 :              */
; 3023 :           case funcdef:
; 3024 :             res = validate_funcdef(tree);

  00092	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00097	e8 00 00 00 00	 call	 validate_funcdef
  0009c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3025 :             break;

  000a0	e9 be 04 00 00	 jmp	 $LN50@validate_n@4
$LN48@validate_n@4:

; 3026 :           case with_stmt:
; 3027 :             res = validate_with_stmt(tree);

  000a5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  000aa	e8 00 00 00 00	 call	 validate_with_stmt
  000af	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3028 :             break;

  000b3	e9 ab 04 00 00	 jmp	 $LN50@validate_n@4
$LN47@validate_n@4:

; 3029 :           case classdef:
; 3030 :             res = validate_class(tree);

  000b8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  000bd	e8 00 00 00 00	 call	 validate_class
  000c2	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3031 :             break;

  000c6	e9 98 04 00 00	 jmp	 $LN50@validate_n@4
$LN46@validate_n@4:

; 3032 :           case decorated:
; 3033 :             res = validate_decorated(tree);

  000cb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  000d0	e8 00 00 00 00	 call	 validate_decorated
  000d5	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3034 :             break;

  000d9	e9 85 04 00 00	 jmp	 $LN50@validate_n@4
$LN45@validate_n@4:

; 3035 :             /*
; 3036 :              *  "Trivial" parse tree nodes.
; 3037 :              *  (Why did I call these trivial?)
; 3038 :              */
; 3039 :           case stmt:
; 3040 :             res = validate_stmt(tree);

  000de	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  000e3	e8 00 00 00 00	 call	 validate_stmt
  000e8	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3041 :             break;

  000ec	e9 72 04 00 00	 jmp	 $LN50@validate_n@4
$LN44@validate_n@4:

; 3042 :           case small_stmt:
; 3043 :             /*
; 3044 :              *  expr_stmt | del_stmt | pass_stmt | flow_stmt |
; 3045 :              *  import_stmt | global_stmt | nonlocal_stmt | assert_stmt
; 3046 :              */
; 3047 :             res = validate_small_stmt(tree);

  000f1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  000f6	e8 00 00 00 00	 call	 validate_small_stmt
  000fb	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3048 :             break;

  000ff	e9 5f 04 00 00	 jmp	 $LN50@validate_n@4
$LN43@validate_n@4:

; 3049 :           case flow_stmt:
; 3050 :             res  = (validate_numnodes(tree, 1, "flow_stmt")
; 3051 :                     && ((TYPE(CHILD(tree, 0)) == break_stmt)
; 3052 :                         || (TYPE(CHILD(tree, 0)) == continue_stmt)
; 3053 :                         || (TYPE(CHILD(tree, 0)) == yield_stmt)
; 3054 :                         || (TYPE(CHILD(tree, 0)) == return_stmt)
; 3055 :                         || (TYPE(CHILD(tree, 0)) == raise_stmt)));

  00104	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09PGHEDOML@flow_stmt?$AA@
  0010b	ba 01 00 00 00	 mov	 edx, 1
  00110	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00115	e8 00 00 00 00	 call	 validate_numnodes
  0011a	85 c0		 test	 eax, eax
  0011c	74 69		 je	 SHORT $LN57@validate_n@4
  0011e	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  00123	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00127	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0012a	3d 15 01 00 00	 cmp	 eax, 277		; 00000115H
  0012f	74 4c		 je	 SHORT $LN56@validate_n@4
  00131	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  00136	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0013a	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0013d	3d 16 01 00 00	 cmp	 eax, 278		; 00000116H
  00142	74 39		 je	 SHORT $LN56@validate_n@4
  00144	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  00149	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0014d	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00150	3d 18 01 00 00	 cmp	 eax, 280		; 00000118H
  00155	74 26		 je	 SHORT $LN56@validate_n@4
  00157	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  0015c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00160	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00163	3d 17 01 00 00	 cmp	 eax, 279		; 00000117H
  00168	74 13		 je	 SHORT $LN56@validate_n@4
  0016a	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  0016f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00173	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00176	3d 19 01 00 00	 cmp	 eax, 281		; 00000119H
  0017b	75 0a		 jne	 SHORT $LN57@validate_n@4
$LN56@validate_n@4:
  0017d	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00185	eb 08		 jmp	 SHORT $LN58@validate_n@4
$LN57@validate_n@4:
  00187	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
$LN58@validate_n@4:
  0018f	8b 44 24 38	 mov	 eax, DWORD PTR tv138[rsp]
  00193	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3056 :             if (res)

  00197	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0019c	74 10		 je	 SHORT $LN42@validate_n@4

; 3057 :                 next = CHILD(tree, 0);

  0019e	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  001a3	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001a7	48 89 44 24 28	 mov	 QWORD PTR next$[rsp], rax
  001ac	eb 13		 jmp	 SHORT $LN41@validate_n@4
$LN42@validate_n@4:

; 3058 :             else if (nch == 1)

  001ae	83 7c 24 30 01	 cmp	 DWORD PTR nch$[rsp], 1
  001b3	75 0c		 jne	 SHORT $LN40@validate_n@4

; 3059 :                 err_string("illegal flow_stmt type");

  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@NIHNHKIN@illegal?5flow_stmt?5type?$AA@
  001bc	e8 00 00 00 00	 call	 err_string
$LN40@validate_n@4:
$LN41@validate_n@4:

; 3060 :             break;

  001c1	e9 9d 03 00 00	 jmp	 $LN50@validate_n@4
$LN39@validate_n@4:

; 3061 :           case yield_stmt:
; 3062 :             res = validate_yield_stmt(tree);

  001c6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  001cb	e8 00 00 00 00	 call	 validate_yield_stmt
  001d0	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3063 :             break;

  001d4	e9 8a 03 00 00	 jmp	 $LN50@validate_n@4
$LN38@validate_n@4:

; 3064 :             /*
; 3065 :              *  Compound statements.
; 3066 :              */
; 3067 :           case simple_stmt:
; 3068 :             res = validate_simple_stmt(tree);

  001d9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  001de	e8 00 00 00 00	 call	 validate_simple_stmt
  001e3	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3069 :             break;

  001e7	e9 77 03 00 00	 jmp	 $LN50@validate_n@4
$LN37@validate_n@4:

; 3070 :           case compound_stmt:
; 3071 :             res = validate_compound_stmt(tree);

  001ec	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  001f1	e8 00 00 00 00	 call	 validate_compound_stmt
  001f6	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3072 :             break;

  001fa	e9 64 03 00 00	 jmp	 $LN50@validate_n@4
$LN36@validate_n@4:

; 3073 :             /*
; 3074 :              *  Fundamental statements.
; 3075 :              */
; 3076 :           case expr_stmt:
; 3077 :             res = validate_expr_stmt(tree);

  001ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00204	e8 00 00 00 00	 call	 validate_expr_stmt
  00209	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3078 :             break;

  0020d	e9 51 03 00 00	 jmp	 $LN50@validate_n@4
$LN35@validate_n@4:

; 3079 :           case del_stmt:
; 3080 :             res = validate_del_stmt(tree);

  00212	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00217	e8 00 00 00 00	 call	 validate_del_stmt
  0021c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3081 :             break;

  00220	e9 3e 03 00 00	 jmp	 $LN50@validate_n@4
$LN34@validate_n@4:

; 3082 :           case pass_stmt:
; 3083 :             res = (validate_numnodes(tree, 1, "pass")
; 3084 :                    && validate_name(CHILD(tree, 0), "pass"));

  00225	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04BBDAIEHH@pass?$AA@
  0022c	ba 01 00 00 00	 mov	 edx, 1
  00231	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00236	e8 00 00 00 00	 call	 validate_numnodes
  0023b	85 c0		 test	 eax, eax
  0023d	74 28		 je	 SHORT $LN59@validate_n@4
  0023f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04BBDAIEHH@pass?$AA@
  00246	ba 01 00 00 00	 mov	 edx, 1
  0024b	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  00250	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00254	e8 00 00 00 00	 call	 validate_terminal
  00259	85 c0		 test	 eax, eax
  0025b	74 0a		 je	 SHORT $LN59@validate_n@4
  0025d	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv164[rsp], 1
  00265	eb 08		 jmp	 SHORT $LN60@validate_n@4
$LN59@validate_n@4:
  00267	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv164[rsp], 0
$LN60@validate_n@4:
  0026f	8b 44 24 3c	 mov	 eax, DWORD PTR tv164[rsp]
  00273	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3085 :             break;

  00277	e9 e7 02 00 00	 jmp	 $LN50@validate_n@4
$LN33@validate_n@4:

; 3086 :           case break_stmt:
; 3087 :             res = (validate_numnodes(tree, 1, "break")
; 3088 :                    && validate_name(CHILD(tree, 0), "break"));

  0027c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05ELPHFHOI@break?$AA@
  00283	ba 01 00 00 00	 mov	 edx, 1
  00288	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0028d	e8 00 00 00 00	 call	 validate_numnodes
  00292	85 c0		 test	 eax, eax
  00294	74 28		 je	 SHORT $LN61@validate_n@4
  00296	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05ELPHFHOI@break?$AA@
  0029d	ba 01 00 00 00	 mov	 edx, 1
  002a2	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  002a7	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  002ab	e8 00 00 00 00	 call	 validate_terminal
  002b0	85 c0		 test	 eax, eax
  002b2	74 0a		 je	 SHORT $LN61@validate_n@4
  002b4	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv176[rsp], 1
  002bc	eb 08		 jmp	 SHORT $LN62@validate_n@4
$LN61@validate_n@4:
  002be	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv176[rsp], 0
$LN62@validate_n@4:
  002c6	8b 44 24 40	 mov	 eax, DWORD PTR tv176[rsp]
  002ca	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3089 :             break;

  002ce	e9 90 02 00 00	 jmp	 $LN50@validate_n@4
$LN32@validate_n@4:

; 3090 :           case continue_stmt:
; 3091 :             res = (validate_numnodes(tree, 1, "continue")
; 3092 :                    && validate_name(CHILD(tree, 0), "continue"));

  002d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08DLICDMBN@continue?$AA@
  002da	ba 01 00 00 00	 mov	 edx, 1
  002df	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  002e4	e8 00 00 00 00	 call	 validate_numnodes
  002e9	85 c0		 test	 eax, eax
  002eb	74 28		 je	 SHORT $LN63@validate_n@4
  002ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08DLICDMBN@continue?$AA@
  002f4	ba 01 00 00 00	 mov	 edx, 1
  002f9	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  002fe	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00302	e8 00 00 00 00	 call	 validate_terminal
  00307	85 c0		 test	 eax, eax
  00309	74 0a		 je	 SHORT $LN63@validate_n@4
  0030b	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv188[rsp], 1
  00313	eb 08		 jmp	 SHORT $LN64@validate_n@4
$LN63@validate_n@4:
  00315	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv188[rsp], 0
$LN64@validate_n@4:
  0031d	8b 44 24 44	 mov	 eax, DWORD PTR tv188[rsp]
  00321	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3093 :             break;

  00325	e9 39 02 00 00	 jmp	 $LN50@validate_n@4
$LN31@validate_n@4:

; 3094 :           case return_stmt:
; 3095 :             res = validate_return_stmt(tree);

  0032a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0032f	e8 00 00 00 00	 call	 validate_return_stmt
  00334	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3096 :             break;

  00338	e9 26 02 00 00	 jmp	 $LN50@validate_n@4
$LN30@validate_n@4:

; 3097 :           case raise_stmt:
; 3098 :             res = validate_raise_stmt(tree);

  0033d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00342	e8 00 00 00 00	 call	 validate_raise_stmt
  00347	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3099 :             break;

  0034b	e9 13 02 00 00	 jmp	 $LN50@validate_n@4
$LN29@validate_n@4:

; 3100 :           case import_stmt:
; 3101 :             res = validate_import_stmt(tree);

  00350	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00355	e8 00 00 00 00	 call	 validate_import_stmt
  0035a	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3102 :             break;

  0035e	e9 00 02 00 00	 jmp	 $LN50@validate_n@4
$LN28@validate_n@4:

; 3103 :           case import_name:
; 3104 :             res = validate_import_name(tree);

  00363	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00368	e8 00 00 00 00	 call	 validate_import_name
  0036d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3105 :             break;

  00371	e9 ed 01 00 00	 jmp	 $LN50@validate_n@4
$LN27@validate_n@4:

; 3106 :           case import_from:
; 3107 :             res = validate_import_from(tree);

  00376	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0037b	e8 00 00 00 00	 call	 validate_import_from
  00380	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3108 :             break;

  00384	e9 da 01 00 00	 jmp	 $LN50@validate_n@4
$LN26@validate_n@4:

; 3109 :           case global_stmt:
; 3110 :             res = validate_global_stmt(tree);

  00389	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0038e	e8 00 00 00 00	 call	 validate_global_stmt
  00393	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3111 :             break;

  00397	e9 c7 01 00 00	 jmp	 $LN50@validate_n@4
$LN25@validate_n@4:

; 3112 :           case nonlocal_stmt:
; 3113 :             res = validate_nonlocal_stmt(tree);

  0039c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  003a1	e8 00 00 00 00	 call	 validate_nonlocal_stmt
  003a6	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3114 :             break;

  003aa	e9 b4 01 00 00	 jmp	 $LN50@validate_n@4
$LN24@validate_n@4:

; 3115 :           case assert_stmt:
; 3116 :             res = validate_assert_stmt(tree);

  003af	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  003b4	e8 00 00 00 00	 call	 validate_assert_stmt
  003b9	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3117 :             break;

  003bd	e9 a1 01 00 00	 jmp	 $LN50@validate_n@4
$LN23@validate_n@4:

; 3118 :           case if_stmt:
; 3119 :             res = validate_if(tree);

  003c2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  003c7	e8 00 00 00 00	 call	 validate_if
  003cc	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3120 :             break;

  003d0	e9 8e 01 00 00	 jmp	 $LN50@validate_n@4
$LN22@validate_n@4:

; 3121 :           case while_stmt:
; 3122 :             res = validate_while(tree);

  003d5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  003da	e8 00 00 00 00	 call	 validate_while
  003df	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3123 :             break;

  003e3	e9 7b 01 00 00	 jmp	 $LN50@validate_n@4
$LN21@validate_n@4:

; 3124 :           case for_stmt:
; 3125 :             res = validate_for(tree);

  003e8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  003ed	e8 00 00 00 00	 call	 validate_for
  003f2	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3126 :             break;

  003f6	e9 68 01 00 00	 jmp	 $LN50@validate_n@4
$LN20@validate_n@4:

; 3127 :           case try_stmt:
; 3128 :             res = validate_try(tree);

  003fb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00400	e8 00 00 00 00	 call	 validate_try
  00405	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3129 :             break;

  00409	e9 55 01 00 00	 jmp	 $LN50@validate_n@4
$LN19@validate_n@4:

; 3130 :           case suite:
; 3131 :             res = validate_suite(tree);

  0040e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00413	e8 00 00 00 00	 call	 validate_suite
  00418	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3132 :             break;

  0041c	e9 42 01 00 00	 jmp	 $LN50@validate_n@4
$LN18@validate_n@4:

; 3133 :             /*
; 3134 :              *  Expression nodes.
; 3135 :              */
; 3136 :           case testlist:
; 3137 :             res = validate_testlist(tree);

  00421	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00426	e8 00 00 00 00	 call	 validate_testlist
  0042b	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3138 :             break;

  0042f	e9 2f 01 00 00	 jmp	 $LN50@validate_n@4
$LN17@validate_n@4:

; 3139 :           case yield_expr:
; 3140 :             res = validate_yield_expr(tree);

  00434	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00439	e8 00 00 00 00	 call	 validate_yield_expr
  0043e	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3141 :             break;

  00442	e9 1c 01 00 00	 jmp	 $LN50@validate_n@4
$LN16@validate_n@4:

; 3142 :           case test:
; 3143 :             res = validate_test(tree);

  00447	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0044c	e8 00 00 00 00	 call	 validate_test
  00451	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3144 :             break;

  00455	e9 09 01 00 00	 jmp	 $LN50@validate_n@4
$LN15@validate_n@4:

; 3145 :           case and_test:
; 3146 :             res = validate_and_test(tree);

  0045a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0045f	e8 00 00 00 00	 call	 validate_and_test
  00464	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3147 :             break;

  00468	e9 f6 00 00 00	 jmp	 $LN50@validate_n@4
$LN14@validate_n@4:

; 3148 :           case not_test:
; 3149 :             res = validate_not_test(tree);

  0046d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00472	e8 00 00 00 00	 call	 validate_not_test
  00477	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3150 :             break;

  0047b	e9 e3 00 00 00	 jmp	 $LN50@validate_n@4
$LN13@validate_n@4:

; 3151 :           case comparison:
; 3152 :             res = validate_comparison(tree);

  00480	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00485	e8 00 00 00 00	 call	 validate_comparison
  0048a	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3153 :             break;

  0048e	e9 d0 00 00 00	 jmp	 $LN50@validate_n@4
$LN12@validate_n@4:

; 3154 :           case exprlist:
; 3155 :             res = validate_exprlist(tree);

  00493	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00498	e8 00 00 00 00	 call	 validate_exprlist
  0049d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3156 :             break;

  004a1	e9 bd 00 00 00	 jmp	 $LN50@validate_n@4
$LN11@validate_n@4:

; 3157 :           case comp_op:
; 3158 :             res = validate_comp_op(tree);

  004a6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  004ab	e8 00 00 00 00	 call	 validate_comp_op
  004b0	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3159 :             break;

  004b4	e9 aa 00 00 00	 jmp	 $LN50@validate_n@4
$LN10@validate_n@4:

; 3160 :           case expr:
; 3161 :             res = validate_expr(tree);

  004b9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  004be	e8 00 00 00 00	 call	 validate_expr
  004c3	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3162 :             break;

  004c7	e9 97 00 00 00	 jmp	 $LN50@validate_n@4
$LN9@validate_n@4:

; 3163 :           case xor_expr:
; 3164 :             res = validate_xor_expr(tree);

  004cc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  004d1	e8 00 00 00 00	 call	 validate_xor_expr
  004d6	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3165 :             break;

  004da	e9 84 00 00 00	 jmp	 $LN50@validate_n@4
$LN8@validate_n@4:

; 3166 :           case and_expr:
; 3167 :             res = validate_and_expr(tree);

  004df	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  004e4	e8 00 00 00 00	 call	 validate_and_expr
  004e9	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3168 :             break;

  004ed	eb 74		 jmp	 SHORT $LN50@validate_n@4
$LN7@validate_n@4:

; 3169 :           case shift_expr:
; 3170 :             res = validate_shift_expr(tree);

  004ef	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  004f4	e8 00 00 00 00	 call	 validate_shift_expr
  004f9	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3171 :             break;

  004fd	eb 64		 jmp	 SHORT $LN50@validate_n@4
$LN6@validate_n@4:

; 3172 :           case arith_expr:
; 3173 :             res = validate_arith_expr(tree);

  004ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00504	e8 00 00 00 00	 call	 validate_arith_expr
  00509	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3174 :             break;

  0050d	eb 54		 jmp	 SHORT $LN50@validate_n@4
$LN5@validate_n@4:

; 3175 :           case term:
; 3176 :             res = validate_term(tree);

  0050f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00514	e8 00 00 00 00	 call	 validate_term
  00519	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3177 :             break;

  0051d	eb 44		 jmp	 SHORT $LN50@validate_n@4
$LN4@validate_n@4:

; 3178 :           case factor:
; 3179 :             res = validate_factor(tree);

  0051f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00524	e8 00 00 00 00	 call	 validate_factor
  00529	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3180 :             break;

  0052d	eb 34		 jmp	 SHORT $LN50@validate_n@4
$LN3@validate_n@4:

; 3181 :           case power:
; 3182 :             res = validate_power(tree);

  0052f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00534	e8 00 00 00 00	 call	 validate_power
  00539	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3183 :             break;

  0053d	eb 24		 jmp	 SHORT $LN50@validate_n@4
$LN2@validate_n@4:

; 3184 :           case atom:
; 3185 :             res = validate_atom(tree);

  0053f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00544	e8 00 00 00 00	 call	 validate_atom
  00549	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3186 :             break;

  0054d	eb 14		 jmp	 SHORT $LN50@validate_n@4
$LN1@validate_n@4:

; 3187 : 
; 3188 :           default:
; 3189 :             /* Hopefully never reached! */
; 3190 :             err_string("unrecognized node type");

  0054f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@OAHKNDHF@unrecognized?5node?5type?$AA@
  00556	e8 00 00 00 00	 call	 err_string

; 3191 :             res = 0;

  0055b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0
$LN50@validate_n@4:

; 3192 :             break;
; 3193 :         }
; 3194 :         tree = next;

  00563	48 8b 44 24 28	 mov	 rax, QWORD PTR next$[rsp]
  00568	48 89 44 24 60	 mov	 QWORD PTR tree$[rsp], rax

; 3195 :     }

  0056d	e9 b0 fa ff ff	 jmp	 $LN53@validate_n@4
$LN52@validate_n@4:

; 3196 :     return (res);

  00572	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 3197 : }

  00576	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0057a	c3		 ret	 0
  0057b	90		 npad	 1
$LN66@validate_n@4:
  0057c	00 00 00 00	 DD	 $LN46@validate_n@4
  00580	00 00 00 00	 DD	 $LN49@validate_n@4
  00584	00 00 00 00	 DD	 $LN45@validate_n@4
  00588	00 00 00 00	 DD	 $LN38@validate_n@4
  0058c	00 00 00 00	 DD	 $LN44@validate_n@4
  00590	00 00 00 00	 DD	 $LN36@validate_n@4
  00594	00 00 00 00	 DD	 $LN35@validate_n@4
  00598	00 00 00 00	 DD	 $LN34@validate_n@4
  0059c	00 00 00 00	 DD	 $LN43@validate_n@4
  005a0	00 00 00 00	 DD	 $LN33@validate_n@4
  005a4	00 00 00 00	 DD	 $LN32@validate_n@4
  005a8	00 00 00 00	 DD	 $LN31@validate_n@4
  005ac	00 00 00 00	 DD	 $LN39@validate_n@4
  005b0	00 00 00 00	 DD	 $LN30@validate_n@4
  005b4	00 00 00 00	 DD	 $LN29@validate_n@4
  005b8	00 00 00 00	 DD	 $LN28@validate_n@4
  005bc	00 00 00 00	 DD	 $LN27@validate_n@4
  005c0	00 00 00 00	 DD	 $LN26@validate_n@4
  005c4	00 00 00 00	 DD	 $LN25@validate_n@4
  005c8	00 00 00 00	 DD	 $LN24@validate_n@4
  005cc	00 00 00 00	 DD	 $LN37@validate_n@4
  005d0	00 00 00 00	 DD	 $LN23@validate_n@4
  005d4	00 00 00 00	 DD	 $LN22@validate_n@4
  005d8	00 00 00 00	 DD	 $LN21@validate_n@4
  005dc	00 00 00 00	 DD	 $LN20@validate_n@4
  005e0	00 00 00 00	 DD	 $LN48@validate_n@4
  005e4	00 00 00 00	 DD	 $LN19@validate_n@4
  005e8	00 00 00 00	 DD	 $LN16@validate_n@4
  005ec	00 00 00 00	 DD	 $LN15@validate_n@4
  005f0	00 00 00 00	 DD	 $LN14@validate_n@4
  005f4	00 00 00 00	 DD	 $LN13@validate_n@4
  005f8	00 00 00 00	 DD	 $LN11@validate_n@4
  005fc	00 00 00 00	 DD	 $LN10@validate_n@4
  00600	00 00 00 00	 DD	 $LN9@validate_n@4
  00604	00 00 00 00	 DD	 $LN8@validate_n@4
  00608	00 00 00 00	 DD	 $LN7@validate_n@4
  0060c	00 00 00 00	 DD	 $LN6@validate_n@4
  00610	00 00 00 00	 DD	 $LN5@validate_n@4
  00614	00 00 00 00	 DD	 $LN4@validate_n@4
  00618	00 00 00 00	 DD	 $LN3@validate_n@4
  0061c	00 00 00 00	 DD	 $LN2@validate_n@4
  00620	00 00 00 00	 DD	 $LN12@validate_n@4
  00624	00 00 00 00	 DD	 $LN18@validate_n@4
  00628	00 00 00 00	 DD	 $LN47@validate_n@4
  0062c	00 00 00 00	 DD	 $LN17@validate_n@4
  00630	00 00 00 00	 DD	 $LN1@validate_n@4
$LN65@validate_n@4:
  00634	00		 DB	 0
  00635	01		 DB	 1
  00636	2d		 DB	 45			; 0000002dH
  00637	2d		 DB	 45			; 0000002dH
  00638	2d		 DB	 45			; 0000002dH
  00639	2d		 DB	 45			; 0000002dH
  0063a	2d		 DB	 45			; 0000002dH
  0063b	02		 DB	 2
  0063c	03		 DB	 3
  0063d	04		 DB	 4
  0063e	05		 DB	 5
  0063f	2d		 DB	 45			; 0000002dH
  00640	2d		 DB	 45			; 0000002dH
  00641	06		 DB	 6
  00642	07		 DB	 7
  00643	08		 DB	 8
  00644	09		 DB	 9
  00645	0a		 DB	 10
  00646	0b		 DB	 11
  00647	0c		 DB	 12
  00648	0d		 DB	 13
  00649	0e		 DB	 14
  0064a	0f		 DB	 15
  0064b	10		 DB	 16
  0064c	2d		 DB	 45			; 0000002dH
  0064d	2d		 DB	 45			; 0000002dH
  0064e	2d		 DB	 45			; 0000002dH
  0064f	2d		 DB	 45			; 0000002dH
  00650	2d		 DB	 45			; 0000002dH
  00651	11		 DB	 17
  00652	12		 DB	 18
  00653	13		 DB	 19
  00654	14		 DB	 20
  00655	15		 DB	 21
  00656	16		 DB	 22
  00657	17		 DB	 23
  00658	18		 DB	 24
  00659	19		 DB	 25
  0065a	2d		 DB	 45			; 0000002dH
  0065b	2d		 DB	 45			; 0000002dH
  0065c	1a		 DB	 26
  0065d	1b		 DB	 27
  0065e	2d		 DB	 45			; 0000002dH
  0065f	2d		 DB	 45			; 0000002dH
  00660	2d		 DB	 45			; 0000002dH
  00661	2d		 DB	 45			; 0000002dH
  00662	1c		 DB	 28
  00663	1d		 DB	 29
  00664	1e		 DB	 30
  00665	1f		 DB	 31
  00666	2d		 DB	 45			; 0000002dH
  00667	20		 DB	 32			; 00000020H
  00668	21		 DB	 33			; 00000021H
  00669	22		 DB	 34			; 00000022H
  0066a	23		 DB	 35			; 00000023H
  0066b	24		 DB	 36			; 00000024H
  0066c	25		 DB	 37			; 00000025H
  0066d	26		 DB	 38			; 00000026H
  0066e	27		 DB	 39			; 00000027H
  0066f	28		 DB	 40			; 00000028H
  00670	2d		 DB	 45			; 0000002dH
  00671	2d		 DB	 45			; 0000002dH
  00672	2d		 DB	 45			; 0000002dH
  00673	2d		 DB	 45			; 0000002dH
  00674	2d		 DB	 45			; 0000002dH
  00675	29		 DB	 41			; 00000029H
  00676	2a		 DB	 42			; 0000002aH
  00677	2d		 DB	 45			; 0000002dH
  00678	2b		 DB	 43			; 0000002bH
  00679	2d		 DB	 45			; 0000002dH
  0067a	2d		 DB	 45			; 0000002dH
  0067b	2d		 DB	 45			; 0000002dH
  0067c	2d		 DB	 45			; 0000002dH
  0067d	2d		 DB	 45			; 0000002dH
  0067e	2d		 DB	 45			; 0000002dH
  0067f	2c		 DB	 44			; 0000002cH
validate_node ENDP
_TEXT	ENDS
PUBLIC	??_C@_01ODHLEDKK@?$CI?$AA@			; `string'
PUBLIC	??_C@_05ENKANFLO@class?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_class DD imagerel validate_class
	DD	imagerel validate_class+554
	DD	imagerel $unwind$validate_class
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_class DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI?$AA@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI?$AA@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ENKANFLO@class?$AA@
CONST	SEGMENT
??_C@_05ENKANFLO@class?$AA@ DB 'class', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_class
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv72 = 40
tv136 = 44
tv161 = 48
tv177 = 52
tree$ = 80
validate_class PROC					; COMDAT

; 1076 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1077 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1078 :     int res = (validate_ntype(tree, classdef) &&
; 1079 :                 ((nch == 4) || (nch == 6) || (nch == 7)));

  00015	ba 49 01 00 00	 mov	 edx, 329		; 00000149H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 1f		 je	 SHORT $LN10@validate_c@8
  00028	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  0002d	74 0e		 je	 SHORT $LN9@validate_c@8
  0002f	83 7c 24 24 06	 cmp	 DWORD PTR nch$[rsp], 6
  00034	74 07		 je	 SHORT $LN9@validate_c@8
  00036	83 7c 24 24 07	 cmp	 DWORD PTR nch$[rsp], 7
  0003b	75 0a		 jne	 SHORT $LN10@validate_c@8
$LN9@validate_c@8:
  0003d	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00045	eb 08		 jmp	 SHORT $LN11@validate_c@8
$LN10@validate_c@8:
  00047	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN11@validate_c@8:
  0004f	8b 44 24 28	 mov	 eax, DWORD PTR tv72[rsp]
  00053	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1080 : 
; 1081 :     if (res) {

  00057	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0005c	0f 84 a7 00 00
	00		 je	 $LN6@validate_c@8

; 1082 :         res = (validate_name(CHILD(tree, 0), "class")
; 1083 :                && validate_ntype(CHILD(tree, 1), NAME)
; 1084 :                && validate_colon(CHILD(tree, nch - 2))
; 1085 :                && validate_suite(CHILD(tree, nch - 1)));

  00062	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05ENKANFLO@class?$AA@
  00069	ba 01 00 00 00	 mov	 edx, 1
  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00073	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00077	e8 00 00 00 00	 call	 validate_terminal
  0007c	85 c0		 test	 eax, eax
  0007e	74 77		 je	 SHORT $LN12@validate_c@8
  00080	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00085	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00089	48 83 c0 28	 add	 rax, 40			; 00000028H
  0008d	ba 01 00 00 00	 mov	 edx, 1
  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 validate_ntype
  0009a	85 c0		 test	 eax, eax
  0009c	74 59		 je	 SHORT $LN12@validate_c@8
  0009e	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000a2	83 e8 02	 sub	 eax, 2
  000a5	48 98		 cdqe
  000a7	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000b0	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000bb	ba 0b 00 00 00	 mov	 edx, 11
  000c0	48 8b c8	 mov	 rcx, rax
  000c3	e8 00 00 00 00	 call	 validate_terminal
  000c8	85 c0		 test	 eax, eax
  000ca	74 2b		 je	 SHORT $LN12@validate_c@8
  000cc	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000d0	ff c8		 dec	 eax
  000d2	48 98		 cdqe
  000d4	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000d8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000dd	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	e8 00 00 00 00	 call	 validate_suite
  000e9	85 c0		 test	 eax, eax
  000eb	74 0a		 je	 SHORT $LN12@validate_c@8
  000ed	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  000f5	eb 08		 jmp	 SHORT $LN13@validate_c@8
$LN12@validate_c@8:
  000f7	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN13@validate_c@8:
  000ff	8b 44 24 2c	 mov	 eax, DWORD PTR tv136[rsp]
  00103	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1086 :     }
; 1087 :     else {

  00107	eb 16		 jmp	 SHORT $LN5@validate_c@8
$LN6@validate_c@8:

; 1088 :         (void) validate_numnodes(tree, 4, "class");

  00109	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05ENKANFLO@class?$AA@
  00110	ba 04 00 00 00	 mov	 edx, 4
  00115	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0011a	e8 00 00 00 00	 call	 validate_numnodes
$LN5@validate_c@8:

; 1089 :     }
; 1090 : 
; 1091 :     if (res) {

  0011f	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00124	0f 84 f7 00 00
	00		 je	 $LN4@validate_c@8

; 1092 :         if (nch == 7) {

  0012a	83 7c 24 24 07	 cmp	 DWORD PTR nch$[rsp], 7
  0012f	0f 85 81 00 00
	00		 jne	 $LN3@validate_c@8

; 1093 :                 res = ((validate_lparen(CHILD(tree, 2)) &&
; 1094 :                         validate_arglist(CHILD(tree, 3)) &&
; 1095 :                         validate_rparen(CHILD(tree, 4))));

  00135	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0013a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0013e	48 83 c0 50	 add	 rax, 80			; 00000050H
  00142	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  00149	ba 07 00 00 00	 mov	 edx, 7
  0014e	48 8b c8	 mov	 rcx, rax
  00151	e8 00 00 00 00	 call	 validate_terminal
  00156	85 c0		 test	 eax, eax
  00158	74 4a		 je	 SHORT $LN14@validate_c@8
  0015a	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0015f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00163	48 83 c0 78	 add	 rax, 120		; 00000078H
  00167	48 8b c8	 mov	 rcx, rax
  0016a	e8 00 00 00 00	 call	 validate_arglist
  0016f	85 c0		 test	 eax, eax
  00171	74 31		 je	 SHORT $LN14@validate_c@8
  00173	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00178	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0017c	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00182	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  00189	ba 08 00 00 00	 mov	 edx, 8
  0018e	48 8b c8	 mov	 rcx, rax
  00191	e8 00 00 00 00	 call	 validate_terminal
  00196	85 c0		 test	 eax, eax
  00198	74 0a		 je	 SHORT $LN14@validate_c@8
  0019a	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv161[rsp], 1
  001a2	eb 08		 jmp	 SHORT $LN15@validate_c@8
$LN14@validate_c@8:
  001a4	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv161[rsp], 0
$LN15@validate_c@8:
  001ac	8b 44 24 30	 mov	 eax, DWORD PTR tv161[rsp]
  001b0	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  001b4	eb 6b		 jmp	 SHORT $LN2@validate_c@8
$LN3@validate_c@8:

; 1096 :         }
; 1097 :         else if (nch == 6) {

  001b6	83 7c 24 24 06	 cmp	 DWORD PTR nch$[rsp], 6
  001bb	75 64		 jne	 SHORT $LN1@validate_c@8

; 1098 :                 res = (validate_lparen(CHILD(tree,2)) &&
; 1099 :                         validate_rparen(CHILD(tree,3)));

  001bd	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  001c2	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001c6	48 83 c0 50	 add	 rax, 80			; 00000050H
  001ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  001d1	ba 07 00 00 00	 mov	 edx, 7
  001d6	48 8b c8	 mov	 rcx, rax
  001d9	e8 00 00 00 00	 call	 validate_terminal
  001de	85 c0		 test	 eax, eax
  001e0	74 2f		 je	 SHORT $LN16@validate_c@8
  001e2	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  001e7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001eb	48 83 c0 78	 add	 rax, 120		; 00000078H
  001ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  001f6	ba 08 00 00 00	 mov	 edx, 8
  001fb	48 8b c8	 mov	 rcx, rax
  001fe	e8 00 00 00 00	 call	 validate_terminal
  00203	85 c0		 test	 eax, eax
  00205	74 0a		 je	 SHORT $LN16@validate_c@8
  00207	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv177[rsp], 1
  0020f	eb 08		 jmp	 SHORT $LN17@validate_c@8
$LN16@validate_c@8:
  00211	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv177[rsp], 0
$LN17@validate_c@8:
  00219	8b 44 24 34	 mov	 eax, DWORD PTR tv177[rsp]
  0021d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_c@8:
$LN2@validate_c@8:
$LN4@validate_c@8:

; 1100 :         }
; 1101 :     }
; 1102 :     return (res);

  00221	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1103 : }

  00225	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00229	c3		 ret	 0
validate_class ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GNFOIEOK@elif?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_if DD imagerel validate_if
	DD	imagerel validate_if+740
	DD	imagerel $unwind$validate_if
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_if DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_04GNFOIEOK@elif?$AA@
CONST	SEGMENT
??_C@_04GNFOIEOK@elif?$AA@ DB 'elif', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_if
_TEXT	SEGMENT
res$ = 32
nch$ = 36
j$22786 = 40
tv93 = 44
tv157 = 48
tv210 = 52
tree$ = 80
validate_if PROC					; COMDAT

; 1111 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1112 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1113 :     int res = (validate_ntype(tree, if_stmt)
; 1114 :                && (nch >= 4)
; 1115 :                && validate_name(CHILD(tree, 0), "if")
; 1116 :                && validate_test(CHILD(tree, 1))
; 1117 :                && validate_colon(CHILD(tree, 2))
; 1118 :                && validate_suite(CHILD(tree, 3)));

  00015	ba 26 01 00 00	 mov	 edx, 294		; 00000126H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	0f 84 86 00 00
	00		 je	 $LN11@validate_i
  0002c	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  00031	7c 7f		 jl	 SHORT $LN11@validate_i
  00033	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HEBPBKGD@if?$AA@
  0003a	ba 01 00 00 00	 mov	 edx, 1
  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00044	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00048	e8 00 00 00 00	 call	 validate_terminal
  0004d	85 c0		 test	 eax, eax
  0004f	74 61		 je	 SHORT $LN11@validate_i
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00056	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005a	48 83 c0 28	 add	 rax, 40			; 00000028H
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 validate_test
  00066	85 c0		 test	 eax, eax
  00068	74 48		 je	 SHORT $LN11@validate_i
  0006a	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0006f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00073	48 83 c0 50	 add	 rax, 80			; 00000050H
  00077	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0007e	ba 0b 00 00 00	 mov	 edx, 11
  00083	48 8b c8	 mov	 rcx, rax
  00086	e8 00 00 00 00	 call	 validate_terminal
  0008b	85 c0		 test	 eax, eax
  0008d	74 23		 je	 SHORT $LN11@validate_i
  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00094	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00098	48 83 c0 78	 add	 rax, 120		; 00000078H
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	e8 00 00 00 00	 call	 validate_suite
  000a4	85 c0		 test	 eax, eax
  000a6	74 0a		 je	 SHORT $LN11@validate_i
  000a8	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv93[rsp], 1
  000b0	eb 08		 jmp	 SHORT $LN12@validate_i
$LN11@validate_i:
  000b2	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
$LN12@validate_i:
  000ba	8b 44 24 2c	 mov	 eax, DWORD PTR tv93[rsp]
  000be	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1119 : 
; 1120 :     if (res && ((nch % 4) == 3)) {

  000c2	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000c7	0f 84 bc 00 00
	00		 je	 $LN8@validate_i
  000cd	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000d1	99		 cdq
  000d2	83 e2 03	 and	 edx, 3
  000d5	03 c2		 add	 eax, edx
  000d7	83 e0 03	 and	 eax, 3
  000da	2b c2		 sub	 eax, edx
  000dc	83 f8 03	 cmp	 eax, 3
  000df	0f 85 a4 00 00
	00		 jne	 $LN8@validate_i

; 1121 :         /*  ... 'else' ':' suite  */
; 1122 :         res = (validate_name(CHILD(tree, nch - 3), "else")
; 1123 :                && validate_colon(CHILD(tree, nch - 2))
; 1124 :                && validate_suite(CHILD(tree, nch - 1)));

  000e5	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000e9	83 e8 03	 sub	 eax, 3
  000ec	48 98		 cdqe
  000ee	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000f7	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04FHMCPBIP@else?$AA@
  00102	ba 01 00 00 00	 mov	 edx, 1
  00107	48 8b c8	 mov	 rcx, rax
  0010a	e8 00 00 00 00	 call	 validate_terminal
  0010f	85 c0		 test	 eax, eax
  00111	74 59		 je	 SHORT $LN13@validate_i
  00113	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00117	83 e8 02	 sub	 eax, 2
  0011a	48 98		 cdqe
  0011c	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00120	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00125	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00129	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00130	ba 0b 00 00 00	 mov	 edx, 11
  00135	48 8b c8	 mov	 rcx, rax
  00138	e8 00 00 00 00	 call	 validate_terminal
  0013d	85 c0		 test	 eax, eax
  0013f	74 2b		 je	 SHORT $LN13@validate_i
  00141	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00145	ff c8		 dec	 eax
  00147	48 98		 cdqe
  00149	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0014d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00152	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00156	48 8b c8	 mov	 rcx, rax
  00159	e8 00 00 00 00	 call	 validate_suite
  0015e	85 c0		 test	 eax, eax
  00160	74 0a		 je	 SHORT $LN13@validate_i
  00162	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  0016a	eb 08		 jmp	 SHORT $LN14@validate_i
$LN13@validate_i:
  0016c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN14@validate_i:
  00174	8b 44 24 30	 mov	 eax, DWORD PTR tv157[rsp]
  00178	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1125 :         nch -= 3;

  0017c	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00180	83 e8 03	 sub	 eax, 3
  00183	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax
  00187	eb 27		 jmp	 SHORT $LN7@validate_i
$LN8@validate_i:

; 1126 :     }
; 1127 :     else if (!res && !PyErr_Occurred())

  00189	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0018e	75 20		 jne	 SHORT $LN6@validate_i
  00190	e8 00 00 00 00	 call	 PyErr_Occurred
  00195	48 85 c0	 test	 rax, rax
  00198	75 16		 jne	 SHORT $LN6@validate_i

; 1128 :         (void) validate_numnodes(tree, 4, "if");

  0019a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HEBPBKGD@if?$AA@
  001a1	ba 04 00 00 00	 mov	 edx, 4
  001a6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  001ab	e8 00 00 00 00	 call	 validate_numnodes
$LN6@validate_i:
$LN7@validate_i:

; 1129 :     if ((nch % 4) != 0)

  001b0	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  001b4	99		 cdq
  001b5	83 e2 03	 and	 edx, 3
  001b8	03 c2		 add	 eax, edx
  001ba	83 e0 03	 and	 eax, 3
  001bd	2b c2		 sub	 eax, edx
  001bf	85 c0		 test	 eax, eax
  001c1	74 1c		 je	 SHORT $LN5@validate_i

; 1130 :         /* Will catch the case for nch < 4 */
; 1131 :         res = validate_numnodes(tree, 0, "if");

  001c3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HEBPBKGD@if?$AA@
  001ca	33 d2		 xor	 edx, edx
  001cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  001d1	e8 00 00 00 00	 call	 validate_numnodes
  001d6	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  001da	e9 fc 00 00 00	 jmp	 $LN4@validate_i
$LN5@validate_i:

; 1132 :     else if (res && (nch > 4)) {

  001df	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  001e4	0f 84 f1 00 00
	00		 je	 $LN3@validate_i
  001ea	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  001ef	0f 8e e6 00 00
	00		 jle	 $LN3@validate_i

; 1133 :         /*  ... ('elif' test ':' suite)+ ...  */
; 1134 :         int j = 4;

  001f5	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR j$22786[rsp], 4
$LN2@validate_i:

; 1135 :         while ((j < nch) && res) {

  001fd	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00201	39 44 24 28	 cmp	 DWORD PTR j$22786[rsp], eax
  00205	0f 8d d0 00 00
	00		 jge	 $LN1@validate_i
  0020b	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00210	0f 84 c5 00 00
	00		 je	 $LN1@validate_i

; 1136 :             res = (validate_name(CHILD(tree, j), "elif")
; 1137 :                    && validate_colon(CHILD(tree, j + 2))
; 1138 :                    && validate_test(CHILD(tree, j + 1))
; 1139 :                    && validate_suite(CHILD(tree, j + 3)));

  00216	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$22786[rsp]
  0021b	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0021f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00224	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00228	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04GNFOIEOK@elif?$AA@
  0022f	ba 01 00 00 00	 mov	 edx, 1
  00234	48 8b c8	 mov	 rcx, rax
  00237	e8 00 00 00 00	 call	 validate_terminal
  0023c	85 c0		 test	 eax, eax
  0023e	74 7b		 je	 SHORT $LN15@validate_i
  00240	8b 44 24 28	 mov	 eax, DWORD PTR j$22786[rsp]
  00244	83 c0 02	 add	 eax, 2
  00247	48 98		 cdqe
  00249	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0024d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00252	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00256	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0025d	ba 0b 00 00 00	 mov	 edx, 11
  00262	48 8b c8	 mov	 rcx, rax
  00265	e8 00 00 00 00	 call	 validate_terminal
  0026a	85 c0		 test	 eax, eax
  0026c	74 4d		 je	 SHORT $LN15@validate_i
  0026e	8b 44 24 28	 mov	 eax, DWORD PTR j$22786[rsp]
  00272	ff c0		 inc	 eax
  00274	48 98		 cdqe
  00276	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0027a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0027f	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00283	48 8b c8	 mov	 rcx, rax
  00286	e8 00 00 00 00	 call	 validate_test
  0028b	85 c0		 test	 eax, eax
  0028d	74 2c		 je	 SHORT $LN15@validate_i
  0028f	8b 44 24 28	 mov	 eax, DWORD PTR j$22786[rsp]
  00293	83 c0 03	 add	 eax, 3
  00296	48 98		 cdqe
  00298	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0029c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  002a1	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  002a5	48 8b c8	 mov	 rcx, rax
  002a8	e8 00 00 00 00	 call	 validate_suite
  002ad	85 c0		 test	 eax, eax
  002af	74 0a		 je	 SHORT $LN15@validate_i
  002b1	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv210[rsp], 1
  002b9	eb 08		 jmp	 SHORT $LN16@validate_i
$LN15@validate_i:
  002bb	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv210[rsp], 0
$LN16@validate_i:
  002c3	8b 44 24 34	 mov	 eax, DWORD PTR tv210[rsp]
  002c7	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1140 :             j += 4;

  002cb	8b 44 24 28	 mov	 eax, DWORD PTR j$22786[rsp]
  002cf	83 c0 04	 add	 eax, 4
  002d2	89 44 24 28	 mov	 DWORD PTR j$22786[rsp], eax

; 1141 :         }

  002d6	e9 22 ff ff ff	 jmp	 $LN2@validate_i
$LN1@validate_i:
$LN3@validate_i:
$LN4@validate_i:

; 1142 :     }
; 1143 :     return (res);

  002db	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1144 : }

  002df	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002e3	c3		 ret	 0
validate_if ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_suite DD imagerel validate_suite
	DD	imagerel validate_suite+420
	DD	imagerel $unwind$validate_suite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_suite DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_suite
_TEXT	SEGMENT
res$ = 32
nch$ = 36
i$22815 = 40
tv71 = 44
tv138 = 48
tree$ = 80
validate_suite PROC					; COMDAT

; 1178 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1179 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1180 :     int res = (validate_ntype(tree, suite) && ((nch == 1) || (nch >= 4)));

  00015	ba 2d 01 00 00	 mov	 edx, 301		; 0000012dH
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 18		 je	 SHORT $LN13@validate_s@8
  00028	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0002d	74 07		 je	 SHORT $LN12@validate_s@8
  0002f	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  00034	7c 0a		 jl	 SHORT $LN13@validate_s@8
$LN12@validate_s@8:
  00036	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0003e	eb 08		 jmp	 SHORT $LN14@validate_s@8
$LN13@validate_s@8:
  00040	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN14@validate_s@8:
  00048	8b 44 24 2c	 mov	 eax, DWORD PTR tv71[rsp]
  0004c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1181 : 
; 1182 :     if (res && (nch == 1))

  00050	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00055	74 1e		 je	 SHORT $LN9@validate_s@8
  00057	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0005c	75 17		 jne	 SHORT $LN9@validate_s@8

; 1183 :         res = validate_simple_stmt(CHILD(tree, 0));

  0005e	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00063	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00067	e8 00 00 00 00	 call	 validate_simple_stmt
  0006c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00070	e9 26 01 00 00	 jmp	 $LN8@validate_s@8
$LN9@validate_s@8:

; 1184 :     else if (res) {

  00075	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0007a	0f 84 1b 01 00
	00		 je	 $LN7@validate_s@8

; 1185 :         /*  NEWLINE INDENT stmt+ DEDENT  */
; 1186 :         res = (validate_newline(CHILD(tree, 0))
; 1187 :                && validate_indent(CHILD(tree, 1))
; 1188 :                && validate_stmt(CHILD(tree, 2))
; 1189 :                && validate_dedent(CHILD(tree, nch - 1)));

  00080	45 33 c0	 xor	 r8d, r8d
  00083	ba 04 00 00 00	 mov	 edx, 4
  00088	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0008d	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00091	e8 00 00 00 00	 call	 validate_terminal
  00096	85 c0		 test	 eax, eax
  00098	74 71		 je	 SHORT $LN15@validate_s@8
  0009a	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0009f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000a3	48 83 c0 28	 add	 rax, 40			; 00000028H
  000a7	45 33 c0	 xor	 r8d, r8d
  000aa	ba 05 00 00 00	 mov	 edx, 5
  000af	48 8b c8	 mov	 rcx, rax
  000b2	e8 00 00 00 00	 call	 validate_terminal
  000b7	85 c0		 test	 eax, eax
  000b9	74 50		 je	 SHORT $LN15@validate_s@8
  000bb	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000c0	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000c4	48 83 c0 50	 add	 rax, 80			; 00000050H
  000c8	48 8b c8	 mov	 rcx, rax
  000cb	e8 00 00 00 00	 call	 validate_stmt
  000d0	85 c0		 test	 eax, eax
  000d2	74 37		 je	 SHORT $LN15@validate_s@8
  000d4	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000d8	ff c8		 dec	 eax
  000da	48 98		 cdqe
  000dc	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000e0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000e5	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000f0	ba 06 00 00 00	 mov	 edx, 6
  000f5	48 8b c8	 mov	 rcx, rax
  000f8	e8 00 00 00 00	 call	 validate_terminal
  000fd	85 c0		 test	 eax, eax
  000ff	74 0a		 je	 SHORT $LN15@validate_s@8
  00101	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00109	eb 08		 jmp	 SHORT $LN16@validate_s@8
$LN15@validate_s@8:
  0010b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
$LN16@validate_s@8:
  00113	8b 44 24 30	 mov	 eax, DWORD PTR tv138[rsp]
  00117	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1190 : 
; 1191 :         if (res && (nch > 4)) {

  0011b	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00120	74 58		 je	 SHORT $LN6@validate_s@8
  00122	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  00127	7e 51		 jle	 SHORT $LN6@validate_s@8

; 1192 :             int i = 3;

  00129	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR i$22815[rsp], 3

; 1193 :             --nch;                      /* forget the DEDENT     */

  00131	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00135	ff c8		 dec	 eax
  00137	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1194 :             for ( ; res && (i < nch); ++i)

  0013b	eb 0a		 jmp	 SHORT $LN5@validate_s@8
$LN4@validate_s@8:
  0013d	8b 44 24 28	 mov	 eax, DWORD PTR i$22815[rsp]
  00141	ff c0		 inc	 eax
  00143	89 44 24 28	 mov	 DWORD PTR i$22815[rsp], eax
$LN5@validate_s@8:
  00147	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0014c	74 2a		 je	 SHORT $LN3@validate_s@8
  0014e	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  00152	39 44 24 28	 cmp	 DWORD PTR i$22815[rsp], eax
  00156	7d 20		 jge	 SHORT $LN3@validate_s@8

; 1195 :                 res = validate_stmt(CHILD(tree, i));

  00158	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$22815[rsp]
  0015d	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00161	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00166	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0016a	48 8b c8	 mov	 rcx, rax
  0016d	e8 00 00 00 00	 call	 validate_stmt
  00172	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00176	eb c5		 jmp	 SHORT $LN4@validate_s@8
$LN3@validate_s@8:

; 1196 :         }
; 1197 :         else if (nch < 4)

  00178	eb 21		 jmp	 SHORT $LN2@validate_s@8
$LN6@validate_s@8:
  0017a	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  0017f	7d 1a		 jge	 SHORT $LN1@validate_s@8

; 1198 :             res = validate_numnodes(tree, 4, "suite");

  00181	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05PPOFKJGL@suite?$AA@
  00188	ba 04 00 00 00	 mov	 edx, 4
  0018d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00192	e8 00 00 00 00	 call	 validate_numnodes
  00197	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_s@8:
$LN2@validate_s@8:
$LN7@validate_s@8:
$LN8@validate_s@8:

; 1199 :     }
; 1200 :     return (res);

  0019b	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1201 : }

  0019f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001a3	c3		 ret	 0
validate_suite ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@JNCGNNHN@illegal?5augmented?5assignment?5ope@ ; `string'
PUBLIC	??_C@_03EOAGOEDB@?$CK?$CK?$DN?$AA@		; `string'
PUBLIC	??_C@_03IKFCCPFF@?$DO?$DO?$DN?$AA@		; `string'
PUBLIC	??_C@_03CDNPDDLA@?$DM?$DM?$DN?$AA@		; `string'
PUBLIC	??_C@_02MHEGNOJ@?$FO?$DN?$AA@			; `string'
PUBLIC	??_C@_02DHLNPPGH@?$HM?$DN?$AA@			; `string'
PUBLIC	??_C@_02FGJGFEAB@?$CG?$DN?$AA@			; `string'
PUBLIC	??_C@_02FENAOKFI@?$CF?$DN?$AA@			; `string'
PUBLIC	??_C@_03HPBDNGOI@?1?1?$DN?$AA@			; `string'
PUBLIC	??_C@_02FJEHGPIO@?1?$DN?$AA@			; `string'
PUBLIC	??_C@_02FPIMKNGF@?$CK?$DN?$AA@			; `string'
PUBLIC	??_C@_02FKMDLLOA@?9?$DN?$AA@			; `string'
PUBLIC	??_C@_02FOEOMHFC@?$CL?$DN?$AA@			; `string'
PUBLIC	??_C@_09KMIHFGNL@augassign?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_expr_stmt DD imagerel validate_expr_stmt
	DD	imagerel validate_expr_stmt+749
	DD	imagerel $unwind$validate_expr_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_expr_stmt DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0CG@JNCGNNHN@illegal?5augmented?5assignment?5ope@
CONST	SEGMENT
??_C@_0CG@JNCGNNHN@illegal?5augmented?5assignment?5ope@ DB 'illegal augme'
	DB	'nted assignment operator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EOAGOEDB@?$CK?$CK?$DN?$AA@
CONST	SEGMENT
??_C@_03EOAGOEDB@?$CK?$CK?$DN?$AA@ DB '**=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKFCCPFF@?$DO?$DO?$DN?$AA@
CONST	SEGMENT
??_C@_03IKFCCPFF@?$DO?$DO?$DN?$AA@ DB '>>=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CDNPDDLA@?$DM?$DM?$DN?$AA@
CONST	SEGMENT
??_C@_03CDNPDDLA@?$DM?$DM?$DN?$AA@ DB '<<=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MHEGNOJ@?$FO?$DN?$AA@
CONST	SEGMENT
??_C@_02MHEGNOJ@?$FO?$DN?$AA@ DB '^=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DHLNPPGH@?$HM?$DN?$AA@
CONST	SEGMENT
??_C@_02DHLNPPGH@?$HM?$DN?$AA@ DB '|=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FGJGFEAB@?$CG?$DN?$AA@
CONST	SEGMENT
??_C@_02FGJGFEAB@?$CG?$DN?$AA@ DB '&=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FENAOKFI@?$CF?$DN?$AA@
CONST	SEGMENT
??_C@_02FENAOKFI@?$CF?$DN?$AA@ DB '%=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HPBDNGOI@?1?1?$DN?$AA@
CONST	SEGMENT
??_C@_03HPBDNGOI@?1?1?$DN?$AA@ DB '//=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FJEHGPIO@?1?$DN?$AA@
CONST	SEGMENT
??_C@_02FJEHGPIO@?1?$DN?$AA@ DB '/=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FPIMKNGF@?$CK?$DN?$AA@
CONST	SEGMENT
??_C@_02FPIMKNGF@?$CK?$DN?$AA@ DB '*=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FKMDLLOA@?9?$DN?$AA@
CONST	SEGMENT
??_C@_02FKMDLLOA@?9?$DN?$AA@ DB '-=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FOEOMHFC@?$CL?$DN?$AA@
CONST	SEGMENT
??_C@_02FOEOMHFC@?$CL?$DN?$AA@ DB '+=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KMIHFGNL@augassign?$AA@
CONST	SEGMENT
??_C@_09KMIHFGNL@augassign?$AA@ DB 'augassign', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_expr_stmt
_TEXT	SEGMENT
res$ = 32
nch$ = 36
j$ = 40
s$22994 = 48
tv75 = 56
tv128 = 60
tv182 = 64
tv206 = 68
tree$ = 96
validate_expr_stmt PROC					; COMDAT

; 1559 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1560 :     int j;
; 1561 :     int nch = NCH(tree);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1562 :     int res = (validate_ntype(tree, expr_stmt)
; 1563 :                && is_odd(nch)
; 1564 :                && validate_testlist_star_expr(CHILD(tree, 0)));

  00015	ba 0f 01 00 00	 mov	 edx, 271		; 0000010fH
  0001a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 28		 je	 SHORT $LN10@validate_e@5
  00028	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 1c		 jne	 SHORT $LN10@validate_e@5
  00034	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  00039	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0003d	e8 00 00 00 00	 call	 validate_testlist_star_expr
  00042	85 c0		 test	 eax, eax
  00044	74 0a		 je	 SHORT $LN10@validate_e@5
  00046	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  0004e	eb 08		 jmp	 SHORT $LN11@validate_e@5
$LN10@validate_e@5:
  00050	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN11@validate_e@5:
  00058	8b 44 24 38	 mov	 eax, DWORD PTR tv75[rsp]
  0005c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1565 : 
; 1566 :     if (res && nch == 3
; 1567 :         && TYPE(CHILD(tree, 1)) == augassign) {

  00060	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00065	0f 84 e4 01 00
	00		 je	 $LN7@validate_e@5
  0006b	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  00070	0f 85 d9 01 00
	00		 jne	 $LN7@validate_e@5
  00076	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	0f bf 40 28	 movsx	 eax, WORD PTR [rax+40]
  00083	3d 11 01 00 00	 cmp	 eax, 273		; 00000111H
  00088	0f 85 c1 01 00
	00		 jne	 $LN7@validate_e@5

; 1568 :         res = validate_numnodes(CHILD(tree, 1), 1, "augassign")
; 1569 :             && validate_yield_or_testlist(CHILD(tree, 2), 0);

  0008e	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  00093	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00097	48 83 c0 28	 add	 rax, 40			; 00000028H
  0009b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09KMIHFGNL@augassign?$AA@
  000a2	ba 01 00 00 00	 mov	 edx, 1
  000a7	48 8b c8	 mov	 rcx, rax
  000aa	e8 00 00 00 00	 call	 validate_numnodes
  000af	85 c0		 test	 eax, eax
  000b1	74 25		 je	 SHORT $LN12@validate_e@5
  000b3	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  000b8	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000bc	48 83 c0 50	 add	 rax, 80			; 00000050H
  000c0	33 d2		 xor	 edx, edx
  000c2	48 8b c8	 mov	 rcx, rax
  000c5	e8 00 00 00 00	 call	 validate_yield_or_testlist
  000ca	85 c0		 test	 eax, eax
  000cc	74 0a		 je	 SHORT $LN12@validate_e@5
  000ce	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv128[rsp], 1
  000d6	eb 08		 jmp	 SHORT $LN13@validate_e@5
$LN12@validate_e@5:
  000d8	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN13@validate_e@5:
  000e0	8b 44 24 3c	 mov	 eax, DWORD PTR tv128[rsp]
  000e4	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1570 : 
; 1571 :         if (res) {

  000e8	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000ed	0f 84 57 01 00
	00		 je	 $LN6@validate_e@5

; 1572 :             char *s = STR(CHILD(CHILD(tree, 1), 0));

  000f3	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  000f8	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000fc	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00100	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00104	48 89 44 24 30	 mov	 QWORD PTR s$22994[rsp], rax

; 1573 : 
; 1574 :             res = (strcmp(s, "+=") == 0
; 1575 :                    || strcmp(s, "-=") == 0
; 1576 :                    || strcmp(s, "*=") == 0
; 1577 :                    || strcmp(s, "/=") == 0
; 1578 :                    || strcmp(s, "//=") == 0
; 1579 :                    || strcmp(s, "%=") == 0
; 1580 :                    || strcmp(s, "&=") == 0
; 1581 :                    || strcmp(s, "|=") == 0
; 1582 :                    || strcmp(s, "^=") == 0
; 1583 :                    || strcmp(s, "<<=") == 0
; 1584 :                    || strcmp(s, ">>=") == 0
; 1585 :                    || strcmp(s, "**=") == 0);

  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02FOEOMHFC@?$CL?$DN?$AA@
  00110	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  00115	e8 00 00 00 00	 call	 strcmp
  0011a	85 c0		 test	 eax, eax
  0011c	0f 84 05 01 00
	00		 je	 $LN14@validate_e@5
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02FKMDLLOA@?9?$DN?$AA@
  00129	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  0012e	e8 00 00 00 00	 call	 strcmp
  00133	85 c0		 test	 eax, eax
  00135	0f 84 ec 00 00
	00		 je	 $LN14@validate_e@5
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02FPIMKNGF@?$CK?$DN?$AA@
  00142	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  00147	e8 00 00 00 00	 call	 strcmp
  0014c	85 c0		 test	 eax, eax
  0014e	0f 84 d3 00 00
	00		 je	 $LN14@validate_e@5
  00154	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02FJEHGPIO@?1?$DN?$AA@
  0015b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  00160	e8 00 00 00 00	 call	 strcmp
  00165	85 c0		 test	 eax, eax
  00167	0f 84 ba 00 00
	00		 je	 $LN14@validate_e@5
  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HPBDNGOI@?1?1?$DN?$AA@
  00174	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  00179	e8 00 00 00 00	 call	 strcmp
  0017e	85 c0		 test	 eax, eax
  00180	0f 84 a1 00 00
	00		 je	 $LN14@validate_e@5
  00186	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02FENAOKFI@?$CF?$DN?$AA@
  0018d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  00192	e8 00 00 00 00	 call	 strcmp
  00197	85 c0		 test	 eax, eax
  00199	0f 84 88 00 00
	00		 je	 $LN14@validate_e@5
  0019f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02FGJGFEAB@?$CG?$DN?$AA@
  001a6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  001ab	e8 00 00 00 00	 call	 strcmp
  001b0	85 c0		 test	 eax, eax
  001b2	74 73		 je	 SHORT $LN14@validate_e@5
  001b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DHLNPPGH@?$HM?$DN?$AA@
  001bb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  001c0	e8 00 00 00 00	 call	 strcmp
  001c5	85 c0		 test	 eax, eax
  001c7	74 5e		 je	 SHORT $LN14@validate_e@5
  001c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MHEGNOJ@?$FO?$DN?$AA@
  001d0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  001d5	e8 00 00 00 00	 call	 strcmp
  001da	85 c0		 test	 eax, eax
  001dc	74 49		 je	 SHORT $LN14@validate_e@5
  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CDNPDDLA@?$DM?$DM?$DN?$AA@
  001e5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  001ea	e8 00 00 00 00	 call	 strcmp
  001ef	85 c0		 test	 eax, eax
  001f1	74 34		 je	 SHORT $LN14@validate_e@5
  001f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03IKFCCPFF@?$DO?$DO?$DN?$AA@
  001fa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  001ff	e8 00 00 00 00	 call	 strcmp
  00204	85 c0		 test	 eax, eax
  00206	74 1f		 je	 SHORT $LN14@validate_e@5
  00208	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03EOAGOEDB@?$CK?$CK?$DN?$AA@
  0020f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$22994[rsp]
  00214	e8 00 00 00 00	 call	 strcmp
  00219	85 c0		 test	 eax, eax
  0021b	74 0a		 je	 SHORT $LN14@validate_e@5
  0021d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv182[rsp], 0
  00225	eb 08		 jmp	 SHORT $LN15@validate_e@5
$LN14@validate_e@5:
  00227	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv182[rsp], 1
$LN15@validate_e@5:
  0022f	8b 44 24 40	 mov	 eax, DWORD PTR tv182[rsp]
  00233	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1586 :             if (!res)

  00237	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0023c	75 0c		 jne	 SHORT $LN5@validate_e@5

; 1587 :                 err_string("illegal augmented assignment operator");

  0023e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@JNCGNNHN@illegal?5augmented?5assignment?5ope@
  00245	e8 00 00 00 00	 call	 err_string
$LN5@validate_e@5:
$LN6@validate_e@5:

; 1588 :         }
; 1589 :     }
; 1590 :     else {

  0024a	e9 95 00 00 00	 jmp	 $LN4@validate_e@5
$LN7@validate_e@5:

; 1591 :         for (j = 1; res && (j < nch); j += 2)

  0024f	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR j$[rsp], 1
  00257	eb 0b		 jmp	 SHORT $LN3@validate_e@5
$LN2@validate_e@5:
  00259	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  0025d	83 c0 02	 add	 eax, 2
  00260	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN3@validate_e@5:
  00264	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00269	74 79		 je	 SHORT $LN1@validate_e@5
  0026b	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0026f	39 44 24 28	 cmp	 DWORD PTR j$[rsp], eax
  00273	7d 6f		 jge	 SHORT $LN1@validate_e@5

; 1592 :             res = validate_equal(CHILD(tree, j))
; 1593 :                 && validate_yield_or_testlist(CHILD(tree, j + 1), 1);

  00275	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  0027a	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0027e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00283	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00287	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NEMOKFLO@?$DN?$AA@
  0028e	ba 16 00 00 00	 mov	 edx, 22
  00293	48 8b c8	 mov	 rcx, rax
  00296	e8 00 00 00 00	 call	 validate_terminal
  0029b	85 c0		 test	 eax, eax
  0029d	74 30		 je	 SHORT $LN16@validate_e@5
  0029f	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  002a3	ff c0		 inc	 eax
  002a5	48 98		 cdqe
  002a7	48 6b c0 28	 imul	 rax, 40			; 00000028H
  002ab	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  002b0	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  002b4	ba 01 00 00 00	 mov	 edx, 1
  002b9	48 8b c8	 mov	 rcx, rax
  002bc	e8 00 00 00 00	 call	 validate_yield_or_testlist
  002c1	85 c0		 test	 eax, eax
  002c3	74 0a		 je	 SHORT $LN16@validate_e@5
  002c5	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv206[rsp], 1
  002cd	eb 08		 jmp	 SHORT $LN17@validate_e@5
$LN16@validate_e@5:
  002cf	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv206[rsp], 0
$LN17@validate_e@5:
  002d7	8b 44 24 44	 mov	 eax, DWORD PTR tv206[rsp]
  002db	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  002df	e9 75 ff ff ff	 jmp	 $LN2@validate_e@5
$LN1@validate_e@5:
$LN4@validate_e@5:

; 1594 :     }
; 1595 :     return (res);

  002e4	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1596 : }

  002e8	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002ec	c3		 ret	 0
validate_expr_stmt ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_testlist_star_expr DD imagerel validate_testlist_star_expr
	DD	imagerel validate_testlist_star_expr+43
	DD	imagerel $unwind$validate_testlist_star_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_testlist_star_expr DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_testlist_star_expr
_TEXT	SEGMENT
tl$ = 48
validate_testlist_star_expr PROC			; COMDAT

; 1213 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1214 :     return (validate_repeating_list(tl, testlist_star_expr, validate_test_or_star_expr,
; 1215 :                                     "testlist"));

  00009	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08GGIJBKAI@testlist?$AA@
  00010	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:validate_test_or_star_expr
  00017	ba 10 01 00 00	 mov	 edx, 272		; 00000110H
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tl$[rsp]
  00021	e8 00 00 00 00	 call	 validate_repeating_list

; 1216 : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
validate_testlist_star_expr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_yield_or_testlist DD imagerel validate_yield_or_testlist
	DD	imagerel validate_yield_or_testlist+78
	DD	imagerel $unwind$validate_yield_or_testlist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_yield_or_testlist DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_yield_or_testlist
_TEXT	SEGMENT
tree$ = 48
tse$ = 56
validate_yield_or_testlist PROC				; COMDAT

; 1545 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1546 :     if (TYPE(tree) == yield_expr) {

  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00012	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00015	3d 50 01 00 00	 cmp	 eax, 336		; 00000150H
  0001a	75 0e		 jne	 SHORT $LN4@validate_y@3

; 1547 :         return validate_yield_expr(tree);

  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tree$[rsp]
  00021	e8 00 00 00 00	 call	 validate_yield_expr
  00026	eb 21		 jmp	 SHORT $LN5@validate_y@3

; 1548 :     }
; 1549 :     else {

  00028	eb 1f		 jmp	 SHORT $LN3@validate_y@3
$LN4@validate_y@3:

; 1550 :         if (tse)

  0002a	83 7c 24 38 00	 cmp	 DWORD PTR tse$[rsp], 0
  0002f	74 0e		 je	 SHORT $LN2@validate_y@3

; 1551 :             return validate_testlist_star_expr(tree);

  00031	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tree$[rsp]
  00036	e8 00 00 00 00	 call	 validate_testlist_star_expr
  0003b	eb 0c		 jmp	 SHORT $LN5@validate_y@3

; 1552 :         else

  0003d	eb 0a		 jmp	 SHORT $LN1@validate_y@3
$LN2@validate_y@3:

; 1553 :             return validate_testlist(tree);

  0003f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tree$[rsp]
  00044	e8 00 00 00 00	 call	 validate_testlist
$LN1@validate_y@3:
$LN3@validate_y@3:
$LN5@validate_y@3:

; 1554 :     }
; 1555 : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
validate_yield_or_testlist ENDP
_TEXT	ENDS
PUBLIC	??_C@_03ONKLGNNH@del?$AA@			; `string'
PUBLIC	??_C@_08GAMPEAMA@del_stmt?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_del_stmt DD imagerel validate_del_stmt
	DD	imagerel validate_del_stmt+117
	DD	imagerel $unwind$validate_del_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_del_stmt DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_03ONKLGNNH@del?$AA@
CONST	SEGMENT
??_C@_03ONKLGNNH@del?$AA@ DB 'del', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GAMPEAMA@del_stmt?$AA@
CONST	SEGMENT
??_C@_08GAMPEAMA@del_stmt?$AA@ DB 'del_stmt', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_del_stmt
_TEXT	SEGMENT
tv80 = 32
tree$ = 64
validate_del_stmt PROC					; COMDAT

; 1601 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1602 :     return (validate_numnodes(tree, 2, "del_stmt")
; 1603 :             && validate_name(CHILD(tree, 0), "del")
; 1604 :             && validate_exprlist(CHILD(tree, 1)));

  00009	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08GAMPEAMA@del_stmt?$AA@
  00010	ba 02 00 00 00	 mov	 edx, 2
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001a	e8 00 00 00 00	 call	 validate_numnodes
  0001f	85 c0		 test	 eax, eax
  00021	74 41		 je	 SHORT $LN3@validate_d@2
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03ONKLGNNH@del?$AA@
  0002a	ba 01 00 00 00	 mov	 edx, 1
  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00034	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00038	e8 00 00 00 00	 call	 validate_terminal
  0003d	85 c0		 test	 eax, eax
  0003f	74 23		 je	 SHORT $LN3@validate_d@2
  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00046	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0004a	48 83 c0 28	 add	 rax, 40			; 00000028H
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 validate_exprlist
  00056	85 c0		 test	 eax, eax
  00058	74 0a		 je	 SHORT $LN3@validate_d@2
  0005a	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  00062	eb 08		 jmp	 SHORT $LN4@validate_d@2
$LN3@validate_d@2:
  00064	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN4@validate_d@2:
  0006c	8b 44 24 20	 mov	 eax, DWORD PTR tv80[rsp]

; 1605 : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
validate_del_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_06LNOFJDNM@return?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_return_stmt DD imagerel validate_return_stmt
	DD	imagerel validate_return_stmt+158
	DD	imagerel $unwind$validate_return_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_return_stmt DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_06LNOFJDNM@return?$AA@
CONST	SEGMENT
??_C@_06LNOFJDNM@return?$AA@ DB 'return', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_return_stmt
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv77 = 40
tree$ = 64
validate_return_stmt PROC				; COMDAT

; 1610 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1611 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1612 :     int res = (validate_ntype(tree, return_stmt)
; 1613 :                && ((nch == 1) || (nch == 2))
; 1614 :                && validate_name(CHILD(tree, 0), "return"));

  00015	ba 17 01 00 00	 mov	 edx, 279		; 00000117H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 36		 je	 SHORT $LN5@validate_r@2
  00028	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0002d	74 07		 je	 SHORT $LN4@validate_r@2
  0002f	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  00034	75 28		 jne	 SHORT $LN5@validate_r@2
$LN4@validate_r@2:
  00036	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06LNOFJDNM@return?$AA@
  0003d	ba 01 00 00 00	 mov	 edx, 1
  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00047	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0004b	e8 00 00 00 00	 call	 validate_terminal
  00050	85 c0		 test	 eax, eax
  00052	74 0a		 je	 SHORT $LN5@validate_r@2
  00054	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0005c	eb 08		 jmp	 SHORT $LN6@validate_r@2
$LN5@validate_r@2:
  0005e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN6@validate_r@2:
  00066	8b 44 24 28	 mov	 eax, DWORD PTR tv77[rsp]
  0006a	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1615 : 
; 1616 :     if (res && (nch == 2))

  0006e	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00073	74 20		 je	 SHORT $LN1@validate_r@2
  00075	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  0007a	75 19		 jne	 SHORT $LN1@validate_r@2

; 1617 :         res = validate_testlist(CHILD(tree, 1));

  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00081	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00085	48 83 c0 28	 add	 rax, 40			; 00000028H
  00089	48 8b c8	 mov	 rcx, rax
  0008c	e8 00 00 00 00	 call	 validate_testlist
  00091	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_r@2:

; 1618 : 
; 1619 :     return (res);

  00095	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1620 : }

  00099	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009d	c3		 ret	 0
validate_return_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_05KEJGFNAJ@raise?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_raise_stmt DD imagerel validate_raise_stmt
	DD	imagerel validate_raise_stmt+317
	DD	imagerel $unwind$validate_raise_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_raise_stmt DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_05KEJGFNAJ@raise?$AA@
CONST	SEGMENT
??_C@_05KEJGFNAJ@raise?$AA@ DB 'raise', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_raise_stmt
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv72 = 40
tv137 = 44
tree$ = 64
validate_raise_stmt PROC				; COMDAT

; 1630 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1631 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1632 :     int res = (validate_ntype(tree, raise_stmt)
; 1633 :                && ((nch == 1) || (nch == 2) || (nch == 4)));

  00015	ba 19 01 00 00	 mov	 edx, 281		; 00000119H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 1f		 je	 SHORT $LN8@validate_r@3
  00028	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0002d	74 0e		 je	 SHORT $LN7@validate_r@3
  0002f	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  00034	74 07		 je	 SHORT $LN7@validate_r@3
  00036	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  0003b	75 0a		 jne	 SHORT $LN8@validate_r@3
$LN7@validate_r@3:
  0003d	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00045	eb 08		 jmp	 SHORT $LN9@validate_r@3
$LN8@validate_r@3:
  00047	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN9@validate_r@3:
  0004f	8b 44 24 28	 mov	 eax, DWORD PTR tv72[rsp]
  00053	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1634 : 
; 1635 :     if (!res && !PyErr_Occurred())

  00057	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0005c	75 20		 jne	 SHORT $LN4@validate_r@3
  0005e	e8 00 00 00 00	 call	 PyErr_Occurred
  00063	48 85 c0	 test	 rax, rax
  00066	75 16		 jne	 SHORT $LN4@validate_r@3

; 1636 :         (void) validate_numnodes(tree, 2, "raise");

  00068	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KEJGFNAJ@raise?$AA@
  0006f	ba 02 00 00 00	 mov	 edx, 2
  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00079	e8 00 00 00 00	 call	 validate_numnodes
$LN4@validate_r@3:

; 1637 : 
; 1638 :     if (res) {

  0007e	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00083	0f 84 ab 00 00
	00		 je	 $LN3@validate_r@3

; 1639 :         res = validate_name(CHILD(tree, 0), "raise");

  00089	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KEJGFNAJ@raise?$AA@
  00090	ba 01 00 00 00	 mov	 edx, 1
  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0009a	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0009e	e8 00 00 00 00	 call	 validate_terminal
  000a3	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1640 :         if (res && (nch >= 2))

  000a7	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000ac	74 20		 je	 SHORT $LN2@validate_r@3
  000ae	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  000b3	7c 19		 jl	 SHORT $LN2@validate_r@3

; 1641 :             res = validate_test(CHILD(tree, 1));

  000b5	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000ba	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000be	48 83 c0 28	 add	 rax, 40			; 00000028H
  000c2	48 8b c8	 mov	 rcx, rax
  000c5	e8 00 00 00 00	 call	 validate_test
  000ca	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN2@validate_r@3:

; 1642 :         if (res && (nch == 4)) {

  000ce	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000d3	74 5f		 je	 SHORT $LN1@validate_r@3
  000d5	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  000da	75 58		 jne	 SHORT $LN1@validate_r@3

; 1643 :             res = (validate_name(CHILD(tree, 2), "from")
; 1644 :                    && validate_test(CHILD(tree, 3)));

  000dc	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000e1	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000e5	48 83 c0 50	 add	 rax, 80			; 00000050H
  000e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04HNEBHLOP@from?$AA@
  000f0	ba 01 00 00 00	 mov	 edx, 1
  000f5	48 8b c8	 mov	 rcx, rax
  000f8	e8 00 00 00 00	 call	 validate_terminal
  000fd	85 c0		 test	 eax, eax
  000ff	74 23		 je	 SHORT $LN10@validate_r@3
  00101	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00106	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0010a	48 83 c0 78	 add	 rax, 120		; 00000078H
  0010e	48 8b c8	 mov	 rcx, rax
  00111	e8 00 00 00 00	 call	 validate_test
  00116	85 c0		 test	 eax, eax
  00118	74 0a		 je	 SHORT $LN10@validate_r@3
  0011a	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv137[rsp], 1
  00122	eb 08		 jmp	 SHORT $LN11@validate_r@3
$LN10@validate_r@3:
  00124	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv137[rsp], 0
$LN11@validate_r@3:
  0012c	8b 44 24 2c	 mov	 eax, DWORD PTR tv137[rsp]
  00130	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_r@3:
$LN3@validate_r@3:

; 1645 :         }
; 1646 :     }
; 1647 :     return (res);

  00134	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1648 : }

  00138	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0013c	c3		 ret	 0
validate_raise_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@HOAHOHEB@yield_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_yield_stmt DD imagerel validate_yield_stmt
	DD	imagerel validate_yield_stmt+99
	DD	imagerel $unwind$validate_yield_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_yield_stmt DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@HOAHOHEB@yield_stmt?$AA@
CONST	SEGMENT
??_C@_0L@HOAHOHEB@yield_stmt?$AA@ DB 'yield_stmt', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_yield_stmt
_TEXT	SEGMENT
tv77 = 32
tree$ = 64
validate_yield_stmt PROC				; COMDAT

; 1699 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1700 :     return (validate_ntype(tree, yield_stmt)
; 1701 :             && validate_numnodes(tree, 1, "yield_stmt")
; 1702 :             && validate_yield_expr(CHILD(tree, 0)));

  00009	ba 18 01 00 00	 mov	 edx, 280		; 00000118H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00013	e8 00 00 00 00	 call	 validate_ntype
  00018	85 c0		 test	 eax, eax
  0001a	74 36		 je	 SHORT $LN3@validate_y@4
  0001c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@HOAHOHEB@yield_stmt?$AA@
  00023	ba 01 00 00 00	 mov	 edx, 1
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0002d	e8 00 00 00 00	 call	 validate_numnodes
  00032	85 c0		 test	 eax, eax
  00034	74 1c		 je	 SHORT $LN3@validate_y@4
  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0003b	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0003f	e8 00 00 00 00	 call	 validate_yield_expr
  00044	85 c0		 test	 eax, eax
  00046	74 0a		 je	 SHORT $LN3@validate_y@4
  00048	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00050	eb 08		 jmp	 SHORT $LN4@validate_y@4
$LN3@validate_y@4:
  00052	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN4@validate_y@4:
  0005a	8b 44 24 20	 mov	 eax, DWORD PTR tv77[rsp]

; 1703 : }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
validate_yield_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_06EOGGDCGF@import?$AA@			; `string'
PUBLIC	??_C@_0M@CJJFDJPH@import_name?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_import_name DD imagerel validate_import_name
	DD	imagerel validate_import_name+136
	DD	imagerel $unwind$validate_import_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_import_name DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_06EOGGDCGF@import?$AA@
CONST	SEGMENT
??_C@_06EOGGDCGF@import?$AA@ DB 'import', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CJJFDJPH@import_name?$AA@
CONST	SEGMENT
??_C@_0M@CJJFDJPH@import_name?$AA@ DB 'import_name', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_import_name
_TEXT	SEGMENT
tv84 = 32
tree$ = 64
validate_import_name PROC				; COMDAT

; 1802 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1803 :         return (validate_ntype(tree, import_name)
; 1804 :                 && validate_numnodes(tree, 2, "import_name")
; 1805 :                 && validate_name(CHILD(tree, 0), "import")
; 1806 :                 && validate_dotted_as_names(CHILD(tree, 1)));

  00009	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00013	e8 00 00 00 00	 call	 validate_ntype
  00018	85 c0		 test	 eax, eax
  0001a	74 5b		 je	 SHORT $LN3@validate_i@2
  0001c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@CJJFDJPH@import_name?$AA@
  00023	ba 02 00 00 00	 mov	 edx, 2
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0002d	e8 00 00 00 00	 call	 validate_numnodes
  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN3@validate_i@2
  00036	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06EOGGDCGF@import?$AA@
  0003d	ba 01 00 00 00	 mov	 edx, 1
  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00047	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0004b	e8 00 00 00 00	 call	 validate_terminal
  00050	85 c0		 test	 eax, eax
  00052	74 23		 je	 SHORT $LN3@validate_i@2
  00054	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00059	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005d	48 83 c0 28	 add	 rax, 40			; 00000028H
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 validate_dotted_as_names
  00069	85 c0		 test	 eax, eax
  0006b	74 0a		 je	 SHORT $LN3@validate_i@2
  0006d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  00075	eb 08		 jmp	 SHORT $LN4@validate_i@2
$LN3@validate_i@2:
  00077	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN4@validate_i@2:
  0007f	8b 44 24 20	 mov	 eax, DWORD PTR tv84[rsp]

; 1807 : }

  00083	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00087	c3		 ret	 0
validate_import_name ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_dotted_as_names DD imagerel validate_dotted_as_names
	DD	imagerel validate_dotted_as_names+230
	DD	imagerel $unwind$validate_dotted_as_names
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_dotted_as_names DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_dotted_as_names
_TEXT	SEGMENT
res$ = 32
i$ = 36
nch$ = 40
tv71 = 44
tv92 = 48
tree$ = 80
validate_dotted_as_names PROC				; COMDAT

; 1772 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1773 :         int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 28	 mov	 DWORD PTR nch$[rsp], eax

; 1774 :         int res = is_odd(nch) && validate_dotted_as_name(CHILD(tree, 0));

  00015	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  00019	83 e0 01	 and	 eax, 1
  0001c	83 f8 01	 cmp	 eax, 1
  0001f	75 1c		 jne	 SHORT $LN6@validate_d@3
  00021	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00026	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0002a	e8 00 00 00 00	 call	 validate_dotted_as_name
  0002f	85 c0		 test	 eax, eax
  00031	74 0a		 je	 SHORT $LN6@validate_d@3
  00033	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0003b	eb 08		 jmp	 SHORT $LN7@validate_d@3
$LN6@validate_d@3:
  0003d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN7@validate_d@3:
  00045	8b 44 24 2c	 mov	 eax, DWORD PTR tv71[rsp]
  00049	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1775 :         int i;
; 1776 : 
; 1777 :         for (i = 1; res && (i < nch); i += 2)

  0004d	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  00055	eb 0b		 jmp	 SHORT $LN3@validate_d@3
$LN2@validate_d@3:
  00057	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0005b	83 c0 02	 add	 eax, 2
  0005e	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@validate_d@3:
  00062	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00067	74 74		 je	 SHORT $LN1@validate_d@3
  00069	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  0006d	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  00071	7d 6a		 jge	 SHORT $LN1@validate_d@3

; 1778 :             res = (validate_comma(CHILD(tree, i))
; 1779 :                    && validate_dotted_as_name(CHILD(tree, i + 1)));

  00073	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00078	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0007c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00081	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00085	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0008c	ba 0c 00 00 00	 mov	 edx, 12
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 validate_terminal
  00099	85 c0		 test	 eax, eax
  0009b	74 2b		 je	 SHORT $LN8@validate_d@3
  0009d	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000a1	ff c0		 inc	 eax
  000a3	48 98		 cdqe
  000a5	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000a9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000ae	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	e8 00 00 00 00	 call	 validate_dotted_as_name
  000ba	85 c0		 test	 eax, eax
  000bc	74 0a		 je	 SHORT $LN8@validate_d@3
  000be	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  000c6	eb 08		 jmp	 SHORT $LN9@validate_d@3
$LN8@validate_d@3:
  000c8	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN9@validate_d@3:
  000d0	8b 44 24 30	 mov	 eax, DWORD PTR tv92[rsp]
  000d4	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000d8	e9 7a ff ff ff	 jmp	 $LN2@validate_d@3
$LN1@validate_d@3:

; 1780 :         return (res);

  000dd	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1781 : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
validate_dotted_as_names ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@LFFPLA@illegal?5number?5of?5children?5for?5d@ ; `string'
PUBLIC	??_C@_02ENLJKNMP@as?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_dotted_as_name DD imagerel validate_dotted_as_name
	DD	imagerel validate_dotted_as_name+233
	DD	imagerel $unwind$validate_dotted_as_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_dotted_as_name DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CO@LFFPLA@illegal?5number?5of?5children?5for?5d@
CONST	SEGMENT
??_C@_0CO@LFFPLA@illegal?5number?5of?5children?5for?5d@ DB 'illegal numbe'
	DB	'r of children for dotted_as_name', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02ENLJKNMP@as?$AA@
CONST	SEGMENT
??_C@_02ENLJKNMP@as?$AA@ DB 'as', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_dotted_as_name
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv92 = 40
tree$ = 64
validate_dotted_as_name PROC				; COMDAT

; 1749 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1750 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1751 :     int res = validate_ntype(tree, dotted_as_name);

  00015	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1752 : 
; 1753 :     if (res) {

  00028	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0002d	0f 84 ad 00 00
	00		 je	 $LN5@validate_d@4

; 1754 :         if (nch == 1)

  00033	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  00038	75 17		 jne	 SHORT $LN4@validate_d@4

; 1755 :             res = validate_dotted_name(CHILD(tree, 0));

  0003a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0003f	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00043	e8 00 00 00 00	 call	 validate_dotted_name
  00048	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  0004c	e9 8f 00 00 00	 jmp	 $LN3@validate_d@4
$LN4@validate_d@4:

; 1756 :         else if (nch == 3)

  00051	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  00056	75 74		 jne	 SHORT $LN2@validate_d@4

; 1757 :             res = (validate_dotted_name(CHILD(tree, 0))
; 1758 :                    && validate_name(CHILD(tree, 1), "as")
; 1759 :                    && validate_name(CHILD(tree, 2), NULL));

  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0005d	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00061	e8 00 00 00 00	 call	 validate_dotted_name
  00066	85 c0		 test	 eax, eax
  00068	74 50		 je	 SHORT $LN8@validate_d@4
  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0006f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00073	48 83 c0 28	 add	 rax, 40			; 00000028H
  00077	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02ENLJKNMP@as?$AA@
  0007e	ba 01 00 00 00	 mov	 edx, 1
  00083	48 8b c8	 mov	 rcx, rax
  00086	e8 00 00 00 00	 call	 validate_terminal
  0008b	85 c0		 test	 eax, eax
  0008d	74 2b		 je	 SHORT $LN8@validate_d@4
  0008f	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00094	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00098	48 83 c0 50	 add	 rax, 80			; 00000050H
  0009c	45 33 c0	 xor	 r8d, r8d
  0009f	ba 01 00 00 00	 mov	 edx, 1
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	e8 00 00 00 00	 call	 validate_terminal
  000ac	85 c0		 test	 eax, eax
  000ae	74 0a		 je	 SHORT $LN8@validate_d@4
  000b0	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  000b8	eb 08		 jmp	 SHORT $LN9@validate_d@4
$LN8@validate_d@4:
  000ba	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN9@validate_d@4:
  000c2	8b 44 24 28	 mov	 eax, DWORD PTR tv92[rsp]
  000c6	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1760 :         else {

  000ca	eb 14		 jmp	 SHORT $LN1@validate_d@4
$LN2@validate_d@4:

; 1761 :             res = 0;

  000cc	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 1762 :             err_string("illegal number of children for dotted_as_name");

  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@LFFPLA@illegal?5number?5of?5children?5for?5d@
  000db	e8 00 00 00 00	 call	 err_string
$LN1@validate_d@4:
$LN3@validate_d@4:
$LN5@validate_d@4:

; 1763 :         }
; 1764 :     }
; 1765 :     return res;

  000e0	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1766 : }

  000e4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e8	c3		 ret	 0
validate_dotted_as_name ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_dotted_name DD imagerel validate_dotted_name
	DD	imagerel validate_dotted_name+265
	DD	imagerel $unwind$validate_dotted_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_dotted_name DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_dotted_name
_TEXT	SEGMENT
res$ = 32
i$ = 36
nch$ = 40
tv77 = 44
tv132 = 48
tree$ = 80
validate_dotted_name PROC				; COMDAT

; 1730 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1731 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 28	 mov	 DWORD PTR nch$[rsp], eax

; 1732 :     int res = (validate_ntype(tree, dotted_name)
; 1733 :                && is_odd(nch)
; 1734 :                && validate_name(CHILD(tree, 0), NULL));

  00015	ba 21 01 00 00	 mov	 edx, 289		; 00000121H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 30		 je	 SHORT $LN6@validate_d@5
  00028	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 24		 jne	 SHORT $LN6@validate_d@5
  00034	45 33 c0	 xor	 r8d, r8d
  00037	ba 01 00 00 00	 mov	 edx, 1
  0003c	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00041	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00045	e8 00 00 00 00	 call	 validate_terminal
  0004a	85 c0		 test	 eax, eax
  0004c	74 0a		 je	 SHORT $LN6@validate_d@5
  0004e	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00056	eb 08		 jmp	 SHORT $LN7@validate_d@5
$LN6@validate_d@5:
  00058	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN7@validate_d@5:
  00060	8b 44 24 2c	 mov	 eax, DWORD PTR tv77[rsp]
  00064	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1735 :     int i;
; 1736 : 
; 1737 :     for (i = 1; res && (i < nch); i += 2) {

  00068	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  00070	eb 0b		 jmp	 SHORT $LN3@validate_d@5
$LN2@validate_d@5:
  00072	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00076	83 c0 02	 add	 eax, 2
  00079	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@validate_d@5:
  0007d	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00082	74 7c		 je	 SHORT $LN1@validate_d@5
  00084	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  00088	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  0008c	7d 72		 jge	 SHORT $LN1@validate_d@5

; 1738 :         res = (validate_dot(CHILD(tree, i))
; 1739 :                && validate_name(CHILD(tree, i+1), NULL));

  0008e	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00093	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00097	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0009c	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  000a7	ba 17 00 00 00	 mov	 edx, 23
  000ac	48 8b c8	 mov	 rcx, rax
  000af	e8 00 00 00 00	 call	 validate_terminal
  000b4	85 c0		 test	 eax, eax
  000b6	74 33		 je	 SHORT $LN8@validate_d@5
  000b8	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000bc	ff c0		 inc	 eax
  000be	48 98		 cdqe
  000c0	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000c4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000c9	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000cd	45 33 c0	 xor	 r8d, r8d
  000d0	ba 01 00 00 00	 mov	 edx, 1
  000d5	48 8b c8	 mov	 rcx, rax
  000d8	e8 00 00 00 00	 call	 validate_terminal
  000dd	85 c0		 test	 eax, eax
  000df	74 0a		 je	 SHORT $LN8@validate_d@5
  000e1	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000e9	eb 08		 jmp	 SHORT $LN9@validate_d@5
$LN8@validate_d@5:
  000eb	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN9@validate_d@5:
  000f3	8b 44 24 30	 mov	 eax, DWORD PTR tv132[rsp]
  000f7	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1740 :     }

  000fb	e9 72 ff ff ff	 jmp	 $LN2@validate_d@5
$LN1@validate_d@5:

; 1741 :     return res;

  00100	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1742 : }

  00104	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00108	c3		 ret	 0
validate_dotted_name ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_import_from DD imagerel validate_import_from
	DD	imagerel validate_import_from+595
	DD	imagerel $unwind$validate_import_from
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_import_from DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_import_from
_TEXT	SEGMENT
res$ = 32
ndots$ = 36
offset$ = 40
havename$ = 44
nch$ = 48
tv74 = 52
tv140 = 56
tv179 = 60
tree$ = 80
validate_import_from PROC				; COMDAT

; 1827 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1828 :         int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 30	 mov	 DWORD PTR nch$[rsp], eax

; 1829 :         int ndots = count_from_dots(tree);

  00015	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001a	e8 00 00 00 00	 call	 count_from_dots
  0001f	89 44 24 24	 mov	 DWORD PTR ndots$[rsp], eax

; 1830 :         int havename = (TYPE(CHILD(tree, ndots + 1)) == dotted_name);

  00023	8b 44 24 24	 mov	 eax, DWORD PTR ndots$[rsp]
  00027	ff c0		 inc	 eax
  00029	48 98		 cdqe
  0002b	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00034	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00038	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  0003c	3d 21 01 00 00	 cmp	 eax, 289		; 00000121H
  00041	75 0a		 jne	 SHORT $LN6@validate_i@3
  00043	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0004b	eb 08		 jmp	 SHORT $LN7@validate_i@3
$LN6@validate_i@3:
  0004d	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN7@validate_i@3:
  00055	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]
  00059	89 44 24 2c	 mov	 DWORD PTR havename$[rsp], eax

; 1831 :         int offset = ndots + havename;

  0005d	8b 44 24 2c	 mov	 eax, DWORD PTR havename$[rsp]
  00061	8b 4c 24 24	 mov	 ecx, DWORD PTR ndots$[rsp]
  00065	03 c8		 add	 ecx, eax
  00067	8b c1		 mov	 eax, ecx
  00069	89 44 24 28	 mov	 DWORD PTR offset$[rsp], eax

; 1832 :         int res = validate_ntype(tree, import_from)
; 1833 :                 && (offset >= 1)
; 1834 :                 && (nch >= 3 + offset)
; 1835 :                 && validate_name(CHILD(tree, 0), "from")
; 1836 :                 && (!havename || validate_dotted_name(CHILD(tree, ndots + 1)))
; 1837 :                 && validate_name(CHILD(tree, offset + 1), "import");

  0006d	ba 1c 01 00 00	 mov	 edx, 284		; 0000011cH
  00072	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00077	e8 00 00 00 00	 call	 validate_ntype
  0007c	85 c0		 test	 eax, eax
  0007e	0f 84 95 00 00
	00		 je	 $LN8@validate_i@3
  00084	83 7c 24 28 01	 cmp	 DWORD PTR offset$[rsp], 1
  00089	0f 8c 8a 00 00
	00		 jl	 $LN8@validate_i@3
  0008f	8b 44 24 28	 mov	 eax, DWORD PTR offset$[rsp]
  00093	83 c0 03	 add	 eax, 3
  00096	39 44 24 30	 cmp	 DWORD PTR nch$[rsp], eax
  0009a	7c 7d		 jl	 SHORT $LN8@validate_i@3
  0009c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04HNEBHLOP@from?$AA@
  000a3	ba 01 00 00 00	 mov	 edx, 1
  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000ad	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  000b1	e8 00 00 00 00	 call	 validate_terminal
  000b6	85 c0		 test	 eax, eax
  000b8	74 5f		 je	 SHORT $LN8@validate_i@3
  000ba	83 7c 24 2c 00	 cmp	 DWORD PTR havename$[rsp], 0
  000bf	74 21		 je	 SHORT $LN9@validate_i@3
  000c1	8b 44 24 24	 mov	 eax, DWORD PTR ndots$[rsp]
  000c5	ff c0		 inc	 eax
  000c7	48 98		 cdqe
  000c9	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000d2	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000d6	48 8b c8	 mov	 rcx, rax
  000d9	e8 00 00 00 00	 call	 validate_dotted_name
  000de	85 c0		 test	 eax, eax
  000e0	74 37		 je	 SHORT $LN8@validate_i@3
$LN9@validate_i@3:
  000e2	8b 44 24 28	 mov	 eax, DWORD PTR offset$[rsp]
  000e6	ff c0		 inc	 eax
  000e8	48 98		 cdqe
  000ea	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000ee	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000f3	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06EOGGDCGF@import?$AA@
  000fe	ba 01 00 00 00	 mov	 edx, 1
  00103	48 8b c8	 mov	 rcx, rax
  00106	e8 00 00 00 00	 call	 validate_terminal
  0010b	85 c0		 test	 eax, eax
  0010d	74 0a		 je	 SHORT $LN8@validate_i@3
  0010f	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv140[rsp], 1
  00117	eb 08		 jmp	 SHORT $LN10@validate_i@3
$LN8@validate_i@3:
  00119	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
$LN10@validate_i@3:
  00121	8b 44 24 38	 mov	 eax, DWORD PTR tv140[rsp]
  00125	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1838 : 
; 1839 :         if (res && TYPE(CHILD(tree, offset + 2)) == LPAR)

  00129	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0012e	0f 84 ce 00 00
	00		 je	 $LN3@validate_i@3
  00134	8b 44 24 28	 mov	 eax, DWORD PTR offset$[rsp]
  00138	83 c0 02	 add	 eax, 2
  0013b	48 98		 cdqe
  0013d	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00141	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00146	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0014a	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  0014e	83 f8 07	 cmp	 eax, 7
  00151	0f 85 ab 00 00
	00		 jne	 $LN3@validate_i@3

; 1840 :             res = ((nch == offset + 5)
; 1841 :                    && validate_lparen(CHILD(tree, offset + 2))
; 1842 :                    && validate_import_as_names(CHILD(tree, offset + 3))
; 1843 :                    && validate_rparen(CHILD(tree, offset + 4)));

  00157	8b 44 24 28	 mov	 eax, DWORD PTR offset$[rsp]
  0015b	83 c0 05	 add	 eax, 5
  0015e	39 44 24 30	 cmp	 DWORD PTR nch$[rsp], eax
  00162	0f 85 88 00 00
	00		 jne	 $LN11@validate_i@3
  00168	8b 44 24 28	 mov	 eax, DWORD PTR offset$[rsp]
  0016c	83 c0 02	 add	 eax, 2
  0016f	48 98		 cdqe
  00171	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00175	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0017a	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0017e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  00185	ba 07 00 00 00	 mov	 edx, 7
  0018a	48 8b c8	 mov	 rcx, rax
  0018d	e8 00 00 00 00	 call	 validate_terminal
  00192	85 c0		 test	 eax, eax
  00194	74 5a		 je	 SHORT $LN11@validate_i@3
  00196	8b 44 24 28	 mov	 eax, DWORD PTR offset$[rsp]
  0019a	83 c0 03	 add	 eax, 3
  0019d	48 98		 cdqe
  0019f	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001a3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  001a8	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  001ac	48 8b c8	 mov	 rcx, rax
  001af	e8 00 00 00 00	 call	 validate_import_as_names
  001b4	85 c0		 test	 eax, eax
  001b6	74 38		 je	 SHORT $LN11@validate_i@3
  001b8	8b 44 24 28	 mov	 eax, DWORD PTR offset$[rsp]
  001bc	83 c0 04	 add	 eax, 4
  001bf	48 98		 cdqe
  001c1	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001c5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  001ca	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  001ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  001d5	ba 08 00 00 00	 mov	 edx, 8
  001da	48 8b c8	 mov	 rcx, rax
  001dd	e8 00 00 00 00	 call	 validate_terminal
  001e2	85 c0		 test	 eax, eax
  001e4	74 0a		 je	 SHORT $LN11@validate_i@3
  001e6	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv179[rsp], 1
  001ee	eb 08		 jmp	 SHORT $LN12@validate_i@3
$LN11@validate_i@3:
  001f0	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv179[rsp], 0
$LN12@validate_i@3:
  001f8	8b 44 24 3c	 mov	 eax, DWORD PTR tv179[rsp]
  001fc	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00200	eb 48		 jmp	 SHORT $LN2@validate_i@3
$LN3@validate_i@3:

; 1844 :         else if (res && TYPE(CHILD(tree, offset + 2)) != STAR)

  00202	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00207	74 41		 je	 SHORT $LN1@validate_i@3
  00209	8b 44 24 28	 mov	 eax, DWORD PTR offset$[rsp]
  0020d	83 c0 02	 add	 eax, 2
  00210	48 98		 cdqe
  00212	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00216	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0021b	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0021f	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00223	83 f8 10	 cmp	 eax, 16
  00226	74 22		 je	 SHORT $LN1@validate_i@3

; 1845 :             res = validate_import_as_names(CHILD(tree, offset + 2));

  00228	8b 44 24 28	 mov	 eax, DWORD PTR offset$[rsp]
  0022c	83 c0 02	 add	 eax, 2
  0022f	48 98		 cdqe
  00231	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00235	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0023a	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0023e	48 8b c8	 mov	 rcx, rax
  00241	e8 00 00 00 00	 call	 validate_import_as_names
  00246	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_i@3:
$LN2@validate_i@3:

; 1846 :         return (res);

  0024a	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1847 : }

  0024e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00252	c3		 ret	 0
validate_import_from ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_import_as_names DD imagerel validate_import_as_names
	DD	imagerel validate_import_as_names+194
	DD	imagerel $unwind$validate_import_as_names
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_import_as_names DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_import_as_names
_TEXT	SEGMENT
res$ = 32
i$ = 36
nch$ = 40
tv89 = 44
tree$ = 64
validate_import_as_names PROC				; COMDAT

; 1787 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1788 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 28	 mov	 DWORD PTR nch$[rsp], eax

; 1789 :     int res = validate_import_as_name(CHILD(tree, 0));

  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0001a	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0001e	e8 00 00 00 00	 call	 validate_import_as_name
  00023	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1790 :     int i;
; 1791 : 
; 1792 :     for (i = 1; res && (i + 1 < nch); i += 2)

  00027	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  0002f	eb 0b		 jmp	 SHORT $LN3@validate_i@4
$LN2@validate_i@4:
  00031	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00035	83 c0 02	 add	 eax, 2
  00038	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@validate_i@4:
  0003c	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00041	74 76		 je	 SHORT $LN1@validate_i@4
  00043	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00047	ff c0		 inc	 eax
  00049	3b 44 24 28	 cmp	 eax, DWORD PTR nch$[rsp]
  0004d	7d 6a		 jge	 SHORT $LN1@validate_i@4

; 1793 :         res = (validate_comma(CHILD(tree, i))
; 1794 :                && validate_import_as_name(CHILD(tree, i + 1)));

  0004f	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00054	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0005d	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00061	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  00068	ba 0c 00 00 00	 mov	 edx, 12
  0006d	48 8b c8	 mov	 rcx, rax
  00070	e8 00 00 00 00	 call	 validate_terminal
  00075	85 c0		 test	 eax, eax
  00077	74 2b		 je	 SHORT $LN6@validate_i@4
  00079	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0007d	ff c0		 inc	 eax
  0007f	48 98		 cdqe
  00081	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00085	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0008a	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 validate_import_as_name
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN6@validate_i@4
  0009a	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  000a2	eb 08		 jmp	 SHORT $LN7@validate_i@4
$LN6@validate_i@4:
  000a4	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN7@validate_i@4:
  000ac	8b 44 24 2c	 mov	 eax, DWORD PTR tv89[rsp]
  000b0	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000b4	e9 78 ff ff ff	 jmp	 $LN2@validate_i@4
$LN1@validate_i@4:

; 1795 :     return (res);

  000b9	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1796 : }

  000bd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c1	c3		 ret	 0
validate_import_as_names ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@PCHGNAAG@import_as_name?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_import_as_name DD imagerel validate_import_as_name
	DD	imagerel validate_import_as_name+255
	DD	imagerel $unwind$validate_import_as_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_import_as_name DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0P@PCHGNAAG@import_as_name?$AA@
CONST	SEGMENT
??_C@_0P@PCHGNAAG@import_as_name?$AA@ DB 'import_as_name', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_import_as_name
_TEXT	SEGMENT
ok$ = 32
nch$ = 36
tv128 = 40
tree$ = 64
validate_import_as_name PROC				; COMDAT

; 1708 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1709 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1710 :     int ok = validate_ntype(tree, import_as_name);

  00015	ba 1d 01 00 00	 mov	 edx, 285		; 0000011dH
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 1711 : 
; 1712 :     if (ok) {

  00028	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  0002d	0f 84 c3 00 00
	00		 je	 $LN5@validate_i@5

; 1713 :         if (nch == 1)

  00033	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  00038	75 1f		 jne	 SHORT $LN4@validate_i@5

; 1714 :             ok = validate_name(CHILD(tree, 0), NULL);

  0003a	45 33 c0	 xor	 r8d, r8d
  0003d	ba 01 00 00 00	 mov	 edx, 1
  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00047	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0004b	e8 00 00 00 00	 call	 validate_terminal
  00050	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax
  00054	e9 9d 00 00 00	 jmp	 $LN3@validate_i@5
$LN4@validate_i@5:

; 1715 :         else if (nch == 3)

  00059	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  0005e	75 7c		 jne	 SHORT $LN2@validate_i@5

; 1716 :             ok = (validate_name(CHILD(tree, 0), NULL)
; 1717 :                   && validate_name(CHILD(tree, 1), "as")
; 1718 :                   && validate_name(CHILD(tree, 2), NULL));

  00060	45 33 c0	 xor	 r8d, r8d
  00063	ba 01 00 00 00	 mov	 edx, 1
  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0006d	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00071	e8 00 00 00 00	 call	 validate_terminal
  00076	85 c0		 test	 eax, eax
  00078	74 50		 je	 SHORT $LN8@validate_i@5
  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 83 c0 28	 add	 rax, 40			; 00000028H
  00087	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02ENLJKNMP@as?$AA@
  0008e	ba 01 00 00 00	 mov	 edx, 1
  00093	48 8b c8	 mov	 rcx, rax
  00096	e8 00 00 00 00	 call	 validate_terminal
  0009b	85 c0		 test	 eax, eax
  0009d	74 2b		 je	 SHORT $LN8@validate_i@5
  0009f	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000a4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000a8	48 83 c0 50	 add	 rax, 80			; 00000050H
  000ac	45 33 c0	 xor	 r8d, r8d
  000af	ba 01 00 00 00	 mov	 edx, 1
  000b4	48 8b c8	 mov	 rcx, rax
  000b7	e8 00 00 00 00	 call	 validate_terminal
  000bc	85 c0		 test	 eax, eax
  000be	74 0a		 je	 SHORT $LN8@validate_i@5
  000c0	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv128[rsp], 1
  000c8	eb 08		 jmp	 SHORT $LN9@validate_i@5
$LN8@validate_i@5:
  000ca	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN9@validate_i@5:
  000d2	8b 44 24 28	 mov	 eax, DWORD PTR tv128[rsp]
  000d6	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 1719 :         else

  000da	eb 1a		 jmp	 SHORT $LN1@validate_i@5
$LN2@validate_i@5:

; 1720 :             ok = validate_numnodes(tree, 3, "import_as_name");

  000dc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@PCHGNAAG@import_as_name?$AA@
  000e3	ba 03 00 00 00	 mov	 edx, 3
  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000ed	e8 00 00 00 00	 call	 validate_numnodes
  000f2	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax
$LN1@validate_i@5:
$LN3@validate_i@5:
$LN5@validate_i@5:

; 1721 :     }
; 1722 :     return ok;

  000f6	8b 44 24 20	 mov	 eax, DWORD PTR ok$[rsp]

; 1723 : }

  000fa	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fe	c3		 ret	 0
validate_import_as_name ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$count_from_dots DD imagerel count_from_dots
	DD	imagerel count_from_dots+105
	DD	imagerel $unwind$count_from_dots
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$count_from_dots DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT count_from_dots
_TEXT	SEGMENT
i$ = 0
tree$ = 32
count_from_dots PROC					; COMDAT

; 1814 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 1815 :     int i;
; 1816 :     for (i = 1; i < NCH(tree); i++)

  00009	c7 04 24 01 00
	00 00		 mov	 DWORD PTR i$[rsp], 1
  00010	eb 08		 jmp	 SHORT $LN4@count_from
$LN3@count_from:
  00012	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00015	ff c0		 inc	 eax
  00017	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@count_from:
  0001a	48 8b 44 24 20	 mov	 rax, QWORD PTR tree$[rsp]
  0001f	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00022	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  00025	7d 38		 jge	 SHORT $LN2@count_from

; 1817 :         if (TYPE(CHILD(tree, i)) != DOT && TYPE(CHILD(tree, i)) != ELLIPSIS)

  00027	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0002b	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0002f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tree$[rsp]
  00034	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00038	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  0003c	83 f8 17	 cmp	 eax, 23
  0003f	74 1c		 je	 SHORT $LN1@count_from
  00041	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00045	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00049	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tree$[rsp]
  0004e	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00052	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00056	83 f8 33	 cmp	 eax, 51			; 00000033H
  00059	74 02		 je	 SHORT $LN1@count_from

; 1818 :             break;

  0005b	eb 02		 jmp	 SHORT $LN2@count_from
$LN1@count_from:

; 1819 :     return i - 1;

  0005d	eb b3		 jmp	 SHORT $LN3@count_from
$LN2@count_from:
  0005f	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00062	ff c8		 dec	 eax

; 1820 : }

  00064	48 83 c4 18	 add	 rsp, 24
  00068	c3		 ret	 0
count_from_dots ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@BAMCCOHB@Unrecognized?5child?5node?5of?5impor@ ; `string'
PUBLIC	??_C@_0BP@PEGCBHED@illegal?5import_stmt?5child?5type?$AA@ ; `string'
PUBLIC	??_C@_0M@IFPLOOHJ@import_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_import_stmt DD imagerel validate_import_stmt
	DD	imagerel validate_import_stmt+190
	DD	imagerel $unwind$validate_import_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_import_stmt DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CM@BAMCCOHB@Unrecognized?5child?5node?5of?5impor@
CONST	SEGMENT
??_C@_0CM@BAMCCOHB@Unrecognized?5child?5node?5of?5impor@ DB 'Unrecognized'
	DB	' child node of import_stmt: %d.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PEGCBHED@illegal?5import_stmt?5child?5type?$AA@
CONST	SEGMENT
??_C@_0BP@PEGCBHED@illegal?5import_stmt?5child?5type?$AA@ DB 'illegal imp'
	DB	'ort_stmt child type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IFPLOOHJ@import_stmt?$AA@
CONST	SEGMENT
??_C@_0M@IFPLOOHJ@import_stmt?$AA@ DB 'import_stmt', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_import_stmt
_TEXT	SEGMENT
res$ = 32
nch$ = 36
ntype$23162 = 40
tree$ = 64
validate_import_stmt PROC				; COMDAT

; 1853 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1854 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1855 :     int res = validate_numnodes(tree, 1, "import_stmt");

  00015	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@IFPLOOHJ@import_stmt?$AA@
  0001c	ba 01 00 00 00	 mov	 edx, 1
  00021	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00026	e8 00 00 00 00	 call	 validate_numnodes
  0002b	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1856 : 
; 1857 :     if (res) {

  0002f	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00034	74 4e		 je	 SHORT $LN6@validate_i@6

; 1858 :         int ntype = TYPE(CHILD(tree, 0));

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0003b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003f	0f bf 00	 movsx	 eax, WORD PTR [rax]
  00042	89 44 24 28	 mov	 DWORD PTR ntype$23162[rsp], eax

; 1859 : 
; 1860 :         if (ntype == import_name || ntype == import_from)

  00046	81 7c 24 28 1b
	01 00 00	 cmp	 DWORD PTR ntype$23162[rsp], 283 ; 0000011bH
  0004e	74 0a		 je	 SHORT $LN4@validate_i@6
  00050	81 7c 24 28 1c
	01 00 00	 cmp	 DWORD PTR ntype$23162[rsp], 284 ; 0000011cH
  00058	75 14		 jne	 SHORT $LN5@validate_i@6
$LN4@validate_i@6:

; 1861 :             res = validate_node(CHILD(tree, 0));

  0005a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0005f	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00063	e8 00 00 00 00	 call	 validate_node
  00068	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1862 :         else {

  0006c	eb 14		 jmp	 SHORT $LN3@validate_i@6
$LN5@validate_i@6:

; 1863 :             res = 0;

  0006e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 1864 :             err_string("illegal import_stmt child type");

  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@PEGCBHED@illegal?5import_stmt?5child?5type?$AA@
  0007d	e8 00 00 00 00	 call	 err_string
$LN3@validate_i@6:

; 1865 :         }

  00082	eb 31		 jmp	 SHORT $LN2@validate_i@6
$LN6@validate_i@6:

; 1866 :     }
; 1867 :     else if (nch == 1) {

  00084	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  00089	75 2a		 jne	 SHORT $LN1@validate_i@6

; 1868 :         res = 0;

  0008b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 1869 :         PyErr_Format(parser_error,
; 1870 :                      "Unrecognized child node of import_stmt: %d.",
; 1871 :                      TYPE(CHILD(tree, 0)));

  00093	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00098	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0009c	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0009f	44 8b c0	 mov	 r8d, eax
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@BAMCCOHB@Unrecognized?5child?5node?5of?5impor@
  000a9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  000b0	e8 00 00 00 00	 call	 PyErr_Format
$LN1@validate_i@6:
$LN2@validate_i@6:

; 1872 :     }
; 1873 :     return (res);

  000b5	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1874 : }

  000b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bd	c3		 ret	 0
validate_import_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_06FJKEMHGD@global?$AA@			; `string'
PUBLIC	??_C@_0BJ@CJBALKIM@illegal?5global?5statement?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_global_stmt DD imagerel validate_global_stmt
	DD	imagerel validate_global_stmt+364
	DD	imagerel $unwind$validate_global_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_global_stmt DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_06FJKEMHGD@global?$AA@
CONST	SEGMENT
??_C@_06FJKEMHGD@global?$AA@ DB 'global', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CJBALKIM@illegal?5global?5statement?$AA@
CONST	SEGMENT
??_C@_0BJ@CJBALKIM@illegal?5global?5statement?$AA@ DB 'illegal global sta'
	DB	'tement', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_global_stmt
_TEXT	SEGMENT
res$ = 32
nch$ = 36
j$ = 40
tv72 = 44
tv90 = 48
tv144 = 52
tree$ = 80
validate_global_stmt PROC				; COMDAT

; 1883 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1884 :     int j;
; 1885 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1886 :     int res = (validate_ntype(tree, global_stmt)
; 1887 :                && is_even(nch) && (nch >= 2));

  00015	ba 22 01 00 00	 mov	 edx, 290		; 00000122H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 1c		 je	 SHORT $LN8@validate_g
  00028	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	85 c0		 test	 eax, eax
  00031	75 11		 jne	 SHORT $LN8@validate_g
  00033	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  00038	7c 0a		 jl	 SHORT $LN8@validate_g
  0003a	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00042	eb 08		 jmp	 SHORT $LN9@validate_g
$LN8@validate_g:
  00044	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN9@validate_g:
  0004c	8b 44 24 2c	 mov	 eax, DWORD PTR tv72[rsp]
  00050	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1888 : 
; 1889 :     if (!res && !PyErr_Occurred())

  00054	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00059	75 16		 jne	 SHORT $LN5@validate_g
  0005b	e8 00 00 00 00	 call	 PyErr_Occurred
  00060	48 85 c0	 test	 rax, rax
  00063	75 0c		 jne	 SHORT $LN5@validate_g

; 1890 :         err_string("illegal global statement");

  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@CJBALKIM@illegal?5global?5statement?$AA@
  0006c	e8 00 00 00 00	 call	 err_string
$LN5@validate_g:

; 1891 : 
; 1892 :     if (res)

  00071	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00076	74 56		 je	 SHORT $LN4@validate_g

; 1893 :         res = (validate_name(CHILD(tree, 0), "global")
; 1894 :                && validate_ntype(CHILD(tree, 1), NAME));

  00078	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06FJKEMHGD@global?$AA@
  0007f	ba 01 00 00 00	 mov	 edx, 1
  00084	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00089	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0008d	e8 00 00 00 00	 call	 validate_terminal
  00092	85 c0		 test	 eax, eax
  00094	74 28		 je	 SHORT $LN10@validate_g
  00096	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0009b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0009f	48 83 c0 28	 add	 rax, 40			; 00000028H
  000a3	ba 01 00 00 00	 mov	 edx, 1
  000a8	48 8b c8	 mov	 rcx, rax
  000ab	e8 00 00 00 00	 call	 validate_ntype
  000b0	85 c0		 test	 eax, eax
  000b2	74 0a		 je	 SHORT $LN10@validate_g
  000b4	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv90[rsp], 1
  000bc	eb 08		 jmp	 SHORT $LN11@validate_g
$LN10@validate_g:
  000be	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
$LN11@validate_g:
  000c6	8b 44 24 30	 mov	 eax, DWORD PTR tv90[rsp]
  000ca	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN4@validate_g:

; 1895 :     for (j = 2; res && (j < nch); j += 2)

  000ce	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR j$[rsp], 2
  000d6	eb 0b		 jmp	 SHORT $LN3@validate_g
$LN2@validate_g:
  000d8	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  000dc	83 c0 02	 add	 eax, 2
  000df	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN3@validate_g:
  000e3	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000e8	74 79		 je	 SHORT $LN1@validate_g
  000ea	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000ee	39 44 24 28	 cmp	 DWORD PTR j$[rsp], eax
  000f2	7d 6f		 jge	 SHORT $LN1@validate_g

; 1896 :         res = (validate_comma(CHILD(tree, j))
; 1897 :                && validate_ntype(CHILD(tree, j + 1), NAME));

  000f4	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  000f9	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000fd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00102	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00106	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0010d	ba 0c 00 00 00	 mov	 edx, 12
  00112	48 8b c8	 mov	 rcx, rax
  00115	e8 00 00 00 00	 call	 validate_terminal
  0011a	85 c0		 test	 eax, eax
  0011c	74 30		 je	 SHORT $LN12@validate_g
  0011e	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00122	ff c0		 inc	 eax
  00124	48 98		 cdqe
  00126	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0012a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0012f	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00133	ba 01 00 00 00	 mov	 edx, 1
  00138	48 8b c8	 mov	 rcx, rax
  0013b	e8 00 00 00 00	 call	 validate_ntype
  00140	85 c0		 test	 eax, eax
  00142	74 0a		 je	 SHORT $LN12@validate_g
  00144	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  0014c	eb 08		 jmp	 SHORT $LN13@validate_g
$LN12@validate_g:
  0014e	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN13@validate_g:
  00156	8b 44 24 34	 mov	 eax, DWORD PTR tv144[rsp]
  0015a	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  0015e	e9 75 ff ff ff	 jmp	 $LN2@validate_g
$LN1@validate_g:

; 1898 : 
; 1899 :     return (res);

  00163	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1900 : }

  00167	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0016b	c3		 ret	 0
validate_global_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_08JCIPMGCE@nonlocal?$AA@			; `string'
PUBLIC	??_C@_0BL@LBDMHHNE@illegal?5nonlocal?5statement?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_nonlocal_stmt DD imagerel validate_nonlocal_stmt
	DD	imagerel validate_nonlocal_stmt+364
	DD	imagerel $unwind$validate_nonlocal_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_nonlocal_stmt DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_08JCIPMGCE@nonlocal?$AA@
CONST	SEGMENT
??_C@_08JCIPMGCE@nonlocal?$AA@ DB 'nonlocal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LBDMHHNE@illegal?5nonlocal?5statement?$AA@
CONST	SEGMENT
??_C@_0BL@LBDMHHNE@illegal?5nonlocal?5statement?$AA@ DB 'illegal nonlocal'
	DB	' statement', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_nonlocal_stmt
_TEXT	SEGMENT
res$ = 32
nch$ = 36
j$ = 40
tv72 = 44
tv90 = 48
tv144 = 52
tree$ = 80
validate_nonlocal_stmt PROC				; COMDAT

; 1908 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1909 :     int j;
; 1910 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1911 :     int res = (validate_ntype(tree, nonlocal_stmt)
; 1912 :                && is_even(nch) && (nch >= 2));

  00015	ba 23 01 00 00	 mov	 edx, 291		; 00000123H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 1c		 je	 SHORT $LN8@validate_n@5
  00028	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	85 c0		 test	 eax, eax
  00031	75 11		 jne	 SHORT $LN8@validate_n@5
  00033	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  00038	7c 0a		 jl	 SHORT $LN8@validate_n@5
  0003a	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00042	eb 08		 jmp	 SHORT $LN9@validate_n@5
$LN8@validate_n@5:
  00044	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN9@validate_n@5:
  0004c	8b 44 24 2c	 mov	 eax, DWORD PTR tv72[rsp]
  00050	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1913 : 
; 1914 :     if (!res && !PyErr_Occurred())

  00054	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00059	75 16		 jne	 SHORT $LN5@validate_n@5
  0005b	e8 00 00 00 00	 call	 PyErr_Occurred
  00060	48 85 c0	 test	 rax, rax
  00063	75 0c		 jne	 SHORT $LN5@validate_n@5

; 1915 :         err_string("illegal nonlocal statement");

  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@LBDMHHNE@illegal?5nonlocal?5statement?$AA@
  0006c	e8 00 00 00 00	 call	 err_string
$LN5@validate_n@5:

; 1916 : 
; 1917 :     if (res)

  00071	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00076	74 56		 je	 SHORT $LN4@validate_n@5

; 1918 :         res = (validate_name(CHILD(tree, 0), "nonlocal")
; 1919 :                && validate_ntype(CHILD(tree, 1), NAME));

  00078	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08JCIPMGCE@nonlocal?$AA@
  0007f	ba 01 00 00 00	 mov	 edx, 1
  00084	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00089	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0008d	e8 00 00 00 00	 call	 validate_terminal
  00092	85 c0		 test	 eax, eax
  00094	74 28		 je	 SHORT $LN10@validate_n@5
  00096	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0009b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0009f	48 83 c0 28	 add	 rax, 40			; 00000028H
  000a3	ba 01 00 00 00	 mov	 edx, 1
  000a8	48 8b c8	 mov	 rcx, rax
  000ab	e8 00 00 00 00	 call	 validate_ntype
  000b0	85 c0		 test	 eax, eax
  000b2	74 0a		 je	 SHORT $LN10@validate_n@5
  000b4	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv90[rsp], 1
  000bc	eb 08		 jmp	 SHORT $LN11@validate_n@5
$LN10@validate_n@5:
  000be	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
$LN11@validate_n@5:
  000c6	8b 44 24 30	 mov	 eax, DWORD PTR tv90[rsp]
  000ca	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN4@validate_n@5:

; 1920 :     for (j = 2; res && (j < nch); j += 2)

  000ce	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR j$[rsp], 2
  000d6	eb 0b		 jmp	 SHORT $LN3@validate_n@5
$LN2@validate_n@5:
  000d8	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  000dc	83 c0 02	 add	 eax, 2
  000df	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN3@validate_n@5:
  000e3	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000e8	74 79		 je	 SHORT $LN1@validate_n@5
  000ea	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  000ee	39 44 24 28	 cmp	 DWORD PTR j$[rsp], eax
  000f2	7d 6f		 jge	 SHORT $LN1@validate_n@5

; 1921 :         res = (validate_comma(CHILD(tree, j))
; 1922 :                && validate_ntype(CHILD(tree, j + 1), NAME));

  000f4	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$[rsp]
  000f9	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000fd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00102	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00106	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  0010d	ba 0c 00 00 00	 mov	 edx, 12
  00112	48 8b c8	 mov	 rcx, rax
  00115	e8 00 00 00 00	 call	 validate_terminal
  0011a	85 c0		 test	 eax, eax
  0011c	74 30		 je	 SHORT $LN12@validate_n@5
  0011e	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00122	ff c0		 inc	 eax
  00124	48 98		 cdqe
  00126	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0012a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0012f	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00133	ba 01 00 00 00	 mov	 edx, 1
  00138	48 8b c8	 mov	 rcx, rax
  0013b	e8 00 00 00 00	 call	 validate_ntype
  00140	85 c0		 test	 eax, eax
  00142	74 0a		 je	 SHORT $LN12@validate_n@5
  00144	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  0014c	eb 08		 jmp	 SHORT $LN13@validate_n@5
$LN12@validate_n@5:
  0014e	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN13@validate_n@5:
  00156	8b 44 24 34	 mov	 eax, DWORD PTR tv144[rsp]
  0015a	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  0015e	e9 75 ff ff ff	 jmp	 $LN2@validate_n@5
$LN1@validate_n@5:

; 1923 : 
; 1924 :     return res;

  00163	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1925 : }

  00167	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0016b	c3		 ret	 0
validate_nonlocal_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@IBGKJJFN@illegal?5assert?5statement?$AA@ ; `string'
PUBLIC	??_C@_06GMEIIFFN@assert?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_assert_stmt DD imagerel validate_assert_stmt
	DD	imagerel validate_assert_stmt+275
	DD	imagerel $unwind$validate_assert_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_assert_stmt DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BJ@IBGKJJFN@illegal?5assert?5statement?$AA@
CONST	SEGMENT
??_C@_0BJ@IBGKJJFN@illegal?5assert?5statement?$AA@ DB 'illegal assert sta'
	DB	'tement', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMEIIFFN@assert?$AA@
CONST	SEGMENT
??_C@_06GMEIIFFN@assert?$AA@ DB 'assert', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_assert_stmt
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv82 = 40
tv133 = 44
tree$ = 64
validate_assert_stmt PROC				; COMDAT

; 1933 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1934 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1935 :     int res = (validate_ntype(tree, assert_stmt)
; 1936 :                && ((nch == 2) || (nch == 4))
; 1937 :                && (validate_name(CHILD(tree, 0), "assert"))
; 1938 :                && validate_test(CHILD(tree, 1)));

  00015	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 4f		 je	 SHORT $LN6@validate_a@7
  00028	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  0002d	74 07		 je	 SHORT $LN5@validate_a@7
  0002f	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  00034	75 41		 jne	 SHORT $LN6@validate_a@7
$LN5@validate_a@7:
  00036	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06GMEIIFFN@assert?$AA@
  0003d	ba 01 00 00 00	 mov	 edx, 1
  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00047	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0004b	e8 00 00 00 00	 call	 validate_terminal
  00050	85 c0		 test	 eax, eax
  00052	74 23		 je	 SHORT $LN6@validate_a@7
  00054	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00059	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005d	48 83 c0 28	 add	 rax, 40			; 00000028H
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 validate_test
  00069	85 c0		 test	 eax, eax
  0006b	74 0a		 je	 SHORT $LN6@validate_a@7
  0006d	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
  00075	eb 08		 jmp	 SHORT $LN7@validate_a@7
$LN6@validate_a@7:
  00077	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN7@validate_a@7:
  0007f	8b 44 24 28	 mov	 eax, DWORD PTR tv82[rsp]
  00083	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1939 : 
; 1940 :     if (!res && !PyErr_Occurred())

  00087	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0008c	75 16		 jne	 SHORT $LN2@validate_a@7
  0008e	e8 00 00 00 00	 call	 PyErr_Occurred
  00093	48 85 c0	 test	 rax, rax
  00096	75 0c		 jne	 SHORT $LN2@validate_a@7

; 1941 :         err_string("illegal assert statement");

  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@IBGKJJFN@illegal?5assert?5statement?$AA@
  0009f	e8 00 00 00 00	 call	 err_string
$LN2@validate_a@7:

; 1942 :     if (res && (nch > 2))

  000a4	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000a9	74 5f		 je	 SHORT $LN1@validate_a@7
  000ab	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  000b0	7e 58		 jle	 SHORT $LN1@validate_a@7

; 1943 :         res = (validate_comma(CHILD(tree, 2))
; 1944 :                && validate_test(CHILD(tree, 3)));

  000b2	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000b7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000bb	48 83 c0 50	 add	 rax, 80			; 00000050H
  000bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01IHBHIGKO@?0?$AA@
  000c6	ba 0c 00 00 00	 mov	 edx, 12
  000cb	48 8b c8	 mov	 rcx, rax
  000ce	e8 00 00 00 00	 call	 validate_terminal
  000d3	85 c0		 test	 eax, eax
  000d5	74 23		 je	 SHORT $LN8@validate_a@7
  000d7	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000dc	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000e0	48 83 c0 78	 add	 rax, 120		; 00000078H
  000e4	48 8b c8	 mov	 rcx, rax
  000e7	e8 00 00 00 00	 call	 validate_test
  000ec	85 c0		 test	 eax, eax
  000ee	74 0a		 je	 SHORT $LN8@validate_a@7
  000f0	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv133[rsp], 1
  000f8	eb 08		 jmp	 SHORT $LN9@validate_a@7
$LN8@validate_a@7:
  000fa	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv133[rsp], 0
$LN9@validate_a@7:
  00102	8b 44 24 2c	 mov	 eax, DWORD PTR tv133[rsp]
  00106	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_a@7:

; 1945 : 
; 1946 :     return (res);

  0010a	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1947 : }

  0010e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00112	c3		 ret	 0
validate_assert_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_05OODBEKIG@while?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_while DD imagerel validate_while
	DD	imagerel validate_while+363
	DD	imagerel $unwind$validate_while
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_while DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_05OODBEKIG@while?$AA@
CONST	SEGMENT
??_C@_05OODBEKIG@while?$AA@ DB 'while', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_while
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv94 = 40
tv148 = 44
tree$ = 64
validate_while PROC					; COMDAT

; 1952 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1953 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1954 :     int res = (validate_ntype(tree, while_stmt)
; 1955 :                && ((nch == 4) || (nch == 7))
; 1956 :                && validate_name(CHILD(tree, 0), "while")
; 1957 :                && validate_test(CHILD(tree, 1))
; 1958 :                && validate_colon(CHILD(tree, 2))
; 1959 :                && validate_suite(CHILD(tree, 3)));

  00015	ba 27 01 00 00	 mov	 edx, 295		; 00000127H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	0f 84 8d 00 00
	00		 je	 $LN5@validate_w
  0002c	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  00031	74 07		 je	 SHORT $LN4@validate_w
  00033	83 7c 24 24 07	 cmp	 DWORD PTR nch$[rsp], 7
  00038	75 7f		 jne	 SHORT $LN5@validate_w
$LN4@validate_w:
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05OODBEKIG@while?$AA@
  00041	ba 01 00 00 00	 mov	 edx, 1
  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0004b	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0004f	e8 00 00 00 00	 call	 validate_terminal
  00054	85 c0		 test	 eax, eax
  00056	74 61		 je	 SHORT $LN5@validate_w
  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0005d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00061	48 83 c0 28	 add	 rax, 40			; 00000028H
  00065	48 8b c8	 mov	 rcx, rax
  00068	e8 00 00 00 00	 call	 validate_test
  0006d	85 c0		 test	 eax, eax
  0006f	74 48		 je	 SHORT $LN5@validate_w
  00071	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00076	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007a	48 83 c0 50	 add	 rax, 80			; 00000050H
  0007e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00085	ba 0b 00 00 00	 mov	 edx, 11
  0008a	48 8b c8	 mov	 rcx, rax
  0008d	e8 00 00 00 00	 call	 validate_terminal
  00092	85 c0		 test	 eax, eax
  00094	74 23		 je	 SHORT $LN5@validate_w
  00096	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0009b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0009f	48 83 c0 78	 add	 rax, 120		; 00000078H
  000a3	48 8b c8	 mov	 rcx, rax
  000a6	e8 00 00 00 00	 call	 validate_suite
  000ab	85 c0		 test	 eax, eax
  000ad	74 0a		 je	 SHORT $LN5@validate_w
  000af	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  000b7	eb 08		 jmp	 SHORT $LN6@validate_w
$LN5@validate_w:
  000b9	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN6@validate_w:
  000c1	8b 44 24 28	 mov	 eax, DWORD PTR tv94[rsp]
  000c5	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1960 : 
; 1961 :     if (res && (nch == 7))

  000c9	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000ce	0f 84 8e 00 00
	00		 je	 $LN1@validate_w
  000d4	83 7c 24 24 07	 cmp	 DWORD PTR nch$[rsp], 7
  000d9	0f 85 83 00 00
	00		 jne	 $LN1@validate_w

; 1962 :         res = (validate_name(CHILD(tree, 4), "else")
; 1963 :                && validate_colon(CHILD(tree, 5))
; 1964 :                && validate_suite(CHILD(tree, 6)));

  000df	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000e4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000e8	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  000ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04FHMCPBIP@else?$AA@
  000f5	ba 01 00 00 00	 mov	 edx, 1
  000fa	48 8b c8	 mov	 rcx, rax
  000fd	e8 00 00 00 00	 call	 validate_terminal
  00102	85 c0		 test	 eax, eax
  00104	74 4c		 je	 SHORT $LN7@validate_w
  00106	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0010b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0010f	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  00115	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0011c	ba 0b 00 00 00	 mov	 edx, 11
  00121	48 8b c8	 mov	 rcx, rax
  00124	e8 00 00 00 00	 call	 validate_terminal
  00129	85 c0		 test	 eax, eax
  0012b	74 25		 je	 SHORT $LN7@validate_w
  0012d	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00132	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00136	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0013c	48 8b c8	 mov	 rcx, rax
  0013f	e8 00 00 00 00	 call	 validate_suite
  00144	85 c0		 test	 eax, eax
  00146	74 0a		 je	 SHORT $LN7@validate_w
  00148	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv148[rsp], 1
  00150	eb 08		 jmp	 SHORT $LN8@validate_w
$LN7@validate_w:
  00152	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
$LN8@validate_w:
  0015a	8b 44 24 2c	 mov	 eax, DWORD PTR tv148[rsp]
  0015e	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_w:

; 1965 : 
; 1966 :     return (res);

  00162	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1967 : }

  00166	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0016a	c3		 ret	 0
validate_while ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_for DD imagerel validate_for
	DD	imagerel validate_for+441
	DD	imagerel $unwind$validate_for
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_for DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_for
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv138 = 40
tv160 = 44
tree$ = 64
validate_for PROC					; COMDAT

; 1972 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1973 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1974 :     int res = (validate_ntype(tree, for_stmt)
; 1975 :                && ((nch == 6) || (nch == 9))
; 1976 :                && validate_name(CHILD(tree, 0), "for")
; 1977 :                && validate_exprlist(CHILD(tree, 1))
; 1978 :                && validate_name(CHILD(tree, 2), "in")
; 1979 :                && validate_testlist(CHILD(tree, 3))
; 1980 :                && validate_colon(CHILD(tree, 4))
; 1981 :                && validate_suite(CHILD(tree, 5)));

  00015	ba 28 01 00 00	 mov	 edx, 296		; 00000128H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	0f 84 db 00 00
	00		 je	 $LN5@validate_f@3
  0002c	83 7c 24 24 06	 cmp	 DWORD PTR nch$[rsp], 6
  00031	74 0b		 je	 SHORT $LN4@validate_f@3
  00033	83 7c 24 24 09	 cmp	 DWORD PTR nch$[rsp], 9
  00038	0f 85 c9 00 00
	00		 jne	 $LN5@validate_f@3
$LN4@validate_f@3:
  0003e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03JOHEBPFF@for?$AA@
  00045	ba 01 00 00 00	 mov	 edx, 1
  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0004f	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00053	e8 00 00 00 00	 call	 validate_terminal
  00058	85 c0		 test	 eax, eax
  0005a	0f 84 a7 00 00
	00		 je	 $LN5@validate_f@3
  00060	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00065	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00069	48 83 c0 28	 add	 rax, 40			; 00000028H
  0006d	48 8b c8	 mov	 rcx, rax
  00070	e8 00 00 00 00	 call	 validate_exprlist
  00075	85 c0		 test	 eax, eax
  00077	0f 84 8a 00 00
	00		 je	 $LN5@validate_f@3
  0007d	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00082	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00086	48 83 c0 50	 add	 rax, 80			; 00000050H
  0008a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02LMMGJAGL@in?$AA@
  00091	ba 01 00 00 00	 mov	 edx, 1
  00096	48 8b c8	 mov	 rcx, rax
  00099	e8 00 00 00 00	 call	 validate_terminal
  0009e	85 c0		 test	 eax, eax
  000a0	74 65		 je	 SHORT $LN5@validate_f@3
  000a2	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000a7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ab	48 83 c0 78	 add	 rax, 120		; 00000078H
  000af	48 8b c8	 mov	 rcx, rax
  000b2	e8 00 00 00 00	 call	 validate_testlist
  000b7	85 c0		 test	 eax, eax
  000b9	74 4c		 je	 SHORT $LN5@validate_f@3
  000bb	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000c0	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000c4	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  000ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000d1	ba 0b 00 00 00	 mov	 edx, 11
  000d6	48 8b c8	 mov	 rcx, rax
  000d9	e8 00 00 00 00	 call	 validate_terminal
  000de	85 c0		 test	 eax, eax
  000e0	74 25		 je	 SHORT $LN5@validate_f@3
  000e2	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000e7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000eb	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  000f1	48 8b c8	 mov	 rcx, rax
  000f4	e8 00 00 00 00	 call	 validate_suite
  000f9	85 c0		 test	 eax, eax
  000fb	74 0a		 je	 SHORT $LN5@validate_f@3
  000fd	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00105	eb 08		 jmp	 SHORT $LN6@validate_f@3
$LN5@validate_f@3:
  00107	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
$LN6@validate_f@3:
  0010f	8b 44 24 28	 mov	 eax, DWORD PTR tv138[rsp]
  00113	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1982 : 
; 1983 :     if (res && (nch == 9))

  00117	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0011c	0f 84 8e 00 00
	00		 je	 $LN1@validate_f@3
  00122	83 7c 24 24 09	 cmp	 DWORD PTR nch$[rsp], 9
  00127	0f 85 83 00 00
	00		 jne	 $LN1@validate_f@3

; 1984 :         res = (validate_name(CHILD(tree, 6), "else")
; 1985 :                && validate_colon(CHILD(tree, 7))
; 1986 :                && validate_suite(CHILD(tree, 8)));

  0012d	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00132	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00136	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0013c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04FHMCPBIP@else?$AA@
  00143	ba 01 00 00 00	 mov	 edx, 1
  00148	48 8b c8	 mov	 rcx, rax
  0014b	e8 00 00 00 00	 call	 validate_terminal
  00150	85 c0		 test	 eax, eax
  00152	74 4c		 je	 SHORT $LN7@validate_f@3
  00154	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00159	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0015d	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  00163	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0016a	ba 0b 00 00 00	 mov	 edx, 11
  0016f	48 8b c8	 mov	 rcx, rax
  00172	e8 00 00 00 00	 call	 validate_terminal
  00177	85 c0		 test	 eax, eax
  00179	74 25		 je	 SHORT $LN7@validate_f@3
  0017b	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00180	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00184	48 05 40 01 00
	00		 add	 rax, 320		; 00000140H
  0018a	48 8b c8	 mov	 rcx, rax
  0018d	e8 00 00 00 00	 call	 validate_suite
  00192	85 c0		 test	 eax, eax
  00194	74 0a		 je	 SHORT $LN7@validate_f@3
  00196	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv160[rsp], 1
  0019e	eb 08		 jmp	 SHORT $LN8@validate_f@3
$LN7@validate_f@3:
  001a0	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv160[rsp], 0
$LN8@validate_f@3:
  001a8	8b 44 24 2c	 mov	 eax, DWORD PTR tv160[rsp]
  001ac	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_f@3:

; 1987 : 
; 1988 :     return (res);

  001b0	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1989 : }

  001b4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001b8	c3		 ret	 0
validate_for ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@EDHDNKAL@try?1except?1finally?$AA@	; `string'
PUBLIC	??_C@_0M@CPKKDJE@try?1finally?$AA@		; `string'
PUBLIC	??_C@_07MKBLAIAL@finally?$AA@			; `string'
PUBLIC	??_C@_0CM@OPOINJOA@Illegal?5number?5of?5children?5for?5t@ ; `string'
PUBLIC	??_C@_06JBKEBCGB@except?$AA@			; `string'
PUBLIC	??_C@_03JDGOGJKJ@try?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_try DD imagerel validate_try
	DD	imagerel validate_try+1263
	DD	imagerel $unwind$validate_try
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_try DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BD@EDHDNKAL@try?1except?1finally?$AA@
CONST	SEGMENT
??_C@_0BD@EDHDNKAL@try?1except?1finally?$AA@ DB 'try/except/finally', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CPKKDJE@try?1finally?$AA@
CONST	SEGMENT
??_C@_0M@CPKKDJE@try?1finally?$AA@ DB 'try/finally', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MKBLAIAL@finally?$AA@
CONST	SEGMENT
??_C@_07MKBLAIAL@finally?$AA@ DB 'finally', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OPOINJOA@Illegal?5number?5of?5children?5for?5t@
CONST	SEGMENT
??_C@_0CM@OPOINJOA@Illegal?5number?5of?5children?5for?5t@ DB 'Illegal num'
	DB	'ber of children for try/%s node.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBKEBCGB@except?$AA@
CONST	SEGMENT
??_C@_06JBKEBCGB@except?$AA@ DB 'except', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDGOGJKJ@try?$AA@
CONST	SEGMENT
??_C@_03JDGOGJKJ@try?$AA@ DB 'try', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_try
_TEXT	SEGMENT
res$ = 32
pos$ = 36
nch$ = 40
name$23228 = 48
tv72 = 56
tv142 = 60
tv194 = 64
tv228 = 68
tv265 = 72
tv302 = 76
tree$ = 96
validate_try PROC					; COMDAT

; 2000 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2001 :     int nch = NCH(tree);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 28	 mov	 DWORD PTR nch$[rsp], eax

; 2002 :     int pos = 3;

  00015	c7 44 24 24 03
	00 00 00	 mov	 DWORD PTR pos$[rsp], 3

; 2003 :     int res = (validate_ntype(tree, try_stmt)
; 2004 :                && (nch >= 6) && ((nch % 3) == 0));

  0001d	ba 29 01 00 00	 mov	 edx, 297		; 00000129H
  00022	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00027	e8 00 00 00 00	 call	 validate_ntype
  0002c	85 c0		 test	 eax, eax
  0002e	74 23		 je	 SHORT $LN12@validate_t@8
  00030	83 7c 24 28 06	 cmp	 DWORD PTR nch$[rsp], 6
  00035	7c 1c		 jl	 SHORT $LN12@validate_t@8
  00037	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  0003b	99		 cdq
  0003c	b9 03 00 00 00	 mov	 ecx, 3
  00041	f7 f9		 idiv	 ecx
  00043	8b c2		 mov	 eax, edx
  00045	85 c0		 test	 eax, eax
  00047	75 0a		 jne	 SHORT $LN12@validate_t@8
  00049	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00051	eb 08		 jmp	 SHORT $LN13@validate_t@8
$LN12@validate_t@8:
  00053	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN13@validate_t@8:
  0005b	8b 44 24 38	 mov	 eax, DWORD PTR tv72[rsp]
  0005f	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2005 : 
; 2006 :     if (res)

  00063	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00068	0f 84 cb 00 00
	00		 je	 $LN9@validate_t@8

; 2007 :         res = (validate_name(CHILD(tree, 0), "try")
; 2008 :                && validate_colon(CHILD(tree, 1))
; 2009 :                && validate_suite(CHILD(tree, 2))
; 2010 :                && validate_colon(CHILD(tree, nch - 2))
; 2011 :                && validate_suite(CHILD(tree, nch - 1)));

  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03JDGOGJKJ@try?$AA@
  00075	ba 01 00 00 00	 mov	 edx, 1
  0007a	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  0007f	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00083	e8 00 00 00 00	 call	 validate_terminal
  00088	85 c0		 test	 eax, eax
  0008a	0f 84 97 00 00
	00		 je	 $LN14@validate_t@8
  00090	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  00095	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00099	48 83 c0 28	 add	 rax, 40			; 00000028H
  0009d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000a4	ba 0b 00 00 00	 mov	 edx, 11
  000a9	48 8b c8	 mov	 rcx, rax
  000ac	e8 00 00 00 00	 call	 validate_terminal
  000b1	85 c0		 test	 eax, eax
  000b3	74 72		 je	 SHORT $LN14@validate_t@8
  000b5	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  000ba	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000be	48 83 c0 50	 add	 rax, 80			; 00000050H
  000c2	48 8b c8	 mov	 rcx, rax
  000c5	e8 00 00 00 00	 call	 validate_suite
  000ca	85 c0		 test	 eax, eax
  000cc	74 59		 je	 SHORT $LN14@validate_t@8
  000ce	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  000d2	83 e8 02	 sub	 eax, 2
  000d5	48 98		 cdqe
  000d7	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  000e0	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000e4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000eb	ba 0b 00 00 00	 mov	 edx, 11
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	e8 00 00 00 00	 call	 validate_terminal
  000f8	85 c0		 test	 eax, eax
  000fa	74 2b		 je	 SHORT $LN14@validate_t@8
  000fc	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  00100	ff c8		 dec	 eax
  00102	48 98		 cdqe
  00104	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00108	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0010d	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00111	48 8b c8	 mov	 rcx, rax
  00114	e8 00 00 00 00	 call	 validate_suite
  00119	85 c0		 test	 eax, eax
  0011b	74 0a		 je	 SHORT $LN14@validate_t@8
  0011d	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00125	eb 08		 jmp	 SHORT $LN15@validate_t@8
$LN14@validate_t@8:
  00127	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN15@validate_t@8:
  0012f	8b 44 24 3c	 mov	 eax, DWORD PTR tv142[rsp]
  00133	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  00137	eb 6f		 jmp	 SHORT $LN8@validate_t@8
$LN9@validate_t@8:

; 2012 :     else if (!PyErr_Occurred()) {

  00139	e8 00 00 00 00	 call	 PyErr_Occurred
  0013e	48 85 c0	 test	 rax, rax
  00141	75 65		 jne	 SHORT $LN7@validate_t@8

; 2013 :         const char* name = "except";

  00143	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06JBKEBCGB@except?$AA@
  0014a	48 89 44 24 30	 mov	 QWORD PTR name$23228[rsp], rax

; 2014 :         if (TYPE(CHILD(tree, nch - 3)) != except_clause)

  0014f	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  00153	83 e8 03	 sub	 eax, 3
  00156	48 98		 cdqe
  00158	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0015c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00161	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00165	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00169	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  0016e	74 20		 je	 SHORT $LN6@validate_t@8

; 2015 :             name = STR(CHILD(tree, nch - 3));

  00170	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  00174	83 e8 03	 sub	 eax, 3
  00177	48 98		 cdqe
  00179	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0017d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00182	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00186	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  0018b	48 89 44 24 30	 mov	 QWORD PTR name$23228[rsp], rax
$LN6@validate_t@8:

; 2016 : 
; 2017 :         PyErr_Format(parser_error,
; 2018 :                      "Illegal number of children for try/%s node.", name);

  00190	4c 8b 44 24 30	 mov	 r8, QWORD PTR name$23228[rsp]
  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@OPOINJOA@Illegal?5number?5of?5children?5for?5t@
  0019c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  001a3	e8 00 00 00 00	 call	 PyErr_Format
$LN7@validate_t@8:
$LN8@validate_t@8:

; 2019 :     }
; 2020 :     /* Handle try/finally statement */
; 2021 :     if (res && (TYPE(CHILD(tree, pos)) == NAME) &&
; 2022 :         (strcmp(STR(CHILD(tree, pos)), "finally") == 0)) {

  001a8	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  001ad	0f 84 c5 00 00
	00		 je	 $LN5@validate_t@8
  001b3	48 63 44 24 24	 movsxd	 rax, DWORD PTR pos$[rsp]
  001b8	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001bc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  001c1	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  001c5	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  001c9	83 f8 01	 cmp	 eax, 1
  001cc	0f 85 a6 00 00
	00		 jne	 $LN5@validate_t@8
  001d2	48 63 44 24 24	 movsxd	 rax, DWORD PTR pos$[rsp]
  001d7	48 6b c0 28	 imul	 rax, 40			; 00000028H
  001db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  001e0	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  001e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07MKBLAIAL@finally?$AA@
  001eb	48 8b 4c 01 08	 mov	 rcx, QWORD PTR [rcx+rax+8]
  001f0	e8 00 00 00 00	 call	 strcmp
  001f5	85 c0		 test	 eax, eax
  001f7	75 7f		 jne	 SHORT $LN5@validate_t@8

; 2023 :         res = (validate_numnodes(tree, 6, "try/finally")
; 2024 :                && validate_colon(CHILD(tree, 4))
; 2025 :                && validate_suite(CHILD(tree, 5)));

  001f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@CPKKDJE@try?1finally?$AA@
  00200	ba 06 00 00 00	 mov	 edx, 6
  00205	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0020a	e8 00 00 00 00	 call	 validate_numnodes
  0020f	85 c0		 test	 eax, eax
  00211	74 4c		 je	 SHORT $LN16@validate_t@8
  00213	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  00218	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0021c	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00222	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00229	ba 0b 00 00 00	 mov	 edx, 11
  0022e	48 8b c8	 mov	 rcx, rax
  00231	e8 00 00 00 00	 call	 validate_terminal
  00236	85 c0		 test	 eax, eax
  00238	74 25		 je	 SHORT $LN16@validate_t@8
  0023a	48 8b 44 24 60	 mov	 rax, QWORD PTR tree$[rsp]
  0023f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00243	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  00249	48 8b c8	 mov	 rcx, rax
  0024c	e8 00 00 00 00	 call	 validate_suite
  00251	85 c0		 test	 eax, eax
  00253	74 0a		 je	 SHORT $LN16@validate_t@8
  00255	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv194[rsp], 1
  0025d	eb 08		 jmp	 SHORT $LN17@validate_t@8
$LN16@validate_t@8:
  0025f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv194[rsp], 0
$LN17@validate_t@8:
  00267	8b 44 24 40	 mov	 eax, DWORD PTR tv194[rsp]
  0026b	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2026 :         return (res);

  0026f	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
  00273	e9 72 02 00 00	 jmp	 $LN10@validate_t@8
$LN5@validate_t@8:
$LN4@validate_t@8:

; 2027 :     }
; 2028 :     /* try/except statement: skip past except_clause sections */
; 2029 :     while (res && pos < nch && (TYPE(CHILD(tree, pos)) == except_clause)) {

  00278	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0027d	0f 84 c6 00 00
	00		 je	 $LN3@validate_t@8
  00283	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  00287	39 44 24 24	 cmp	 DWORD PTR pos$[rsp], eax
  0028b	0f 8d b8 00 00
	00		 jge	 $LN3@validate_t@8
  00291	48 63 44 24 24	 movsxd	 rax, DWORD PTR pos$[rsp]
  00296	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0029a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0029f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  002a3	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  002a7	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  002ac	0f 85 97 00 00
	00		 jne	 $LN3@validate_t@8

; 2030 :         res = (validate_except_clause(CHILD(tree, pos))
; 2031 :                && validate_colon(CHILD(tree, pos + 1))
; 2032 :                && validate_suite(CHILD(tree, pos + 2)));

  002b2	48 63 44 24 24	 movsxd	 rax, DWORD PTR pos$[rsp]
  002b7	48 6b c0 28	 imul	 rax, 40			; 00000028H
  002bb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  002c0	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  002c4	48 8b c8	 mov	 rcx, rax
  002c7	e8 00 00 00 00	 call	 validate_except_clause
  002cc	85 c0		 test	 eax, eax
  002ce	74 59		 je	 SHORT $LN18@validate_t@8
  002d0	8b 44 24 24	 mov	 eax, DWORD PTR pos$[rsp]
  002d4	ff c0		 inc	 eax
  002d6	48 98		 cdqe
  002d8	48 6b c0 28	 imul	 rax, 40			; 00000028H
  002dc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  002e1	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  002e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  002ec	ba 0b 00 00 00	 mov	 edx, 11
  002f1	48 8b c8	 mov	 rcx, rax
  002f4	e8 00 00 00 00	 call	 validate_terminal
  002f9	85 c0		 test	 eax, eax
  002fb	74 2c		 je	 SHORT $LN18@validate_t@8
  002fd	8b 44 24 24	 mov	 eax, DWORD PTR pos$[rsp]
  00301	83 c0 02	 add	 eax, 2
  00304	48 98		 cdqe
  00306	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0030a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0030f	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00313	48 8b c8	 mov	 rcx, rax
  00316	e8 00 00 00 00	 call	 validate_suite
  0031b	85 c0		 test	 eax, eax
  0031d	74 0a		 je	 SHORT $LN18@validate_t@8
  0031f	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv228[rsp], 1
  00327	eb 08		 jmp	 SHORT $LN19@validate_t@8
$LN18@validate_t@8:
  00329	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv228[rsp], 0
$LN19@validate_t@8:
  00331	8b 44 24 44	 mov	 eax, DWORD PTR tv228[rsp]
  00335	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2033 :         pos += 3;

  00339	8b 44 24 24	 mov	 eax, DWORD PTR pos$[rsp]
  0033d	83 c0 03	 add	 eax, 3
  00340	89 44 24 24	 mov	 DWORD PTR pos$[rsp], eax

; 2034 :     }

  00344	e9 2f ff ff ff	 jmp	 $LN4@validate_t@8
$LN3@validate_t@8:

; 2035 :     /* skip else clause */
; 2036 :     if (res && pos < nch && (TYPE(CHILD(tree, pos)) == NAME) &&
; 2037 :         (strcmp(STR(CHILD(tree, pos)), "else") == 0)) {

  00349	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0034e	0f 84 c8 00 00
	00		 je	 $LN2@validate_t@8
  00354	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  00358	39 44 24 24	 cmp	 DWORD PTR pos$[rsp], eax
  0035c	0f 8d ba 00 00
	00		 jge	 $LN2@validate_t@8
  00362	48 63 44 24 24	 movsxd	 rax, DWORD PTR pos$[rsp]
  00367	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0036b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00370	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00374	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00378	83 f8 01	 cmp	 eax, 1
  0037b	0f 85 9b 00 00
	00		 jne	 $LN2@validate_t@8
  00381	48 63 44 24 24	 movsxd	 rax, DWORD PTR pos$[rsp]
  00386	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0038a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0038f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00393	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FHMCPBIP@else?$AA@
  0039a	48 8b 4c 01 08	 mov	 rcx, QWORD PTR [rcx+rax+8]
  0039f	e8 00 00 00 00	 call	 strcmp
  003a4	85 c0		 test	 eax, eax
  003a6	75 74		 jne	 SHORT $LN2@validate_t@8

; 2038 :         res = (validate_colon(CHILD(tree, pos + 1))
; 2039 :                && validate_suite(CHILD(tree, pos + 2)));

  003a8	8b 44 24 24	 mov	 eax, DWORD PTR pos$[rsp]
  003ac	ff c0		 inc	 eax
  003ae	48 98		 cdqe
  003b0	48 6b c0 28	 imul	 rax, 40			; 00000028H
  003b4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  003b9	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  003bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  003c4	ba 0b 00 00 00	 mov	 edx, 11
  003c9	48 8b c8	 mov	 rcx, rax
  003cc	e8 00 00 00 00	 call	 validate_terminal
  003d1	85 c0		 test	 eax, eax
  003d3	74 2c		 je	 SHORT $LN20@validate_t@8
  003d5	8b 44 24 24	 mov	 eax, DWORD PTR pos$[rsp]
  003d9	83 c0 02	 add	 eax, 2
  003dc	48 98		 cdqe
  003de	48 6b c0 28	 imul	 rax, 40			; 00000028H
  003e2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  003e7	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  003eb	48 8b c8	 mov	 rcx, rax
  003ee	e8 00 00 00 00	 call	 validate_suite
  003f3	85 c0		 test	 eax, eax
  003f5	74 0a		 je	 SHORT $LN20@validate_t@8
  003f7	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv265[rsp], 1
  003ff	eb 08		 jmp	 SHORT $LN21@validate_t@8
$LN20@validate_t@8:
  00401	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv265[rsp], 0
$LN21@validate_t@8:
  00409	8b 44 24 48	 mov	 eax, DWORD PTR tv265[rsp]
  0040d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2040 :         pos += 3;

  00411	8b 44 24 24	 mov	 eax, DWORD PTR pos$[rsp]
  00415	83 c0 03	 add	 eax, 3
  00418	89 44 24 24	 mov	 DWORD PTR pos$[rsp], eax
$LN2@validate_t@8:

; 2041 :     }
; 2042 :     if (res && pos < nch) {

  0041c	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00421	0f 84 bf 00 00
	00		 je	 $LN1@validate_t@8
  00427	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  0042b	39 44 24 24	 cmp	 DWORD PTR pos$[rsp], eax
  0042f	0f 8d b1 00 00
	00		 jge	 $LN1@validate_t@8

; 2043 :         /* last clause must be a finally */
; 2044 :         res = (validate_name(CHILD(tree, pos), "finally")
; 2045 :                && validate_numnodes(tree, pos + 3, "try/except/finally")
; 2046 :                && validate_colon(CHILD(tree, pos + 1))
; 2047 :                && validate_suite(CHILD(tree, pos + 2)));

  00435	48 63 44 24 24	 movsxd	 rax, DWORD PTR pos$[rsp]
  0043a	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0043e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00443	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00447	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07MKBLAIAL@finally?$AA@
  0044e	ba 01 00 00 00	 mov	 edx, 1
  00453	48 8b c8	 mov	 rcx, rax
  00456	e8 00 00 00 00	 call	 validate_terminal
  0045b	85 c0		 test	 eax, eax
  0045d	74 77		 je	 SHORT $LN22@validate_t@8
  0045f	8b 44 24 24	 mov	 eax, DWORD PTR pos$[rsp]
  00463	83 c0 03	 add	 eax, 3
  00466	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@EDHDNKAL@try?1except?1finally?$AA@
  0046d	8b d0		 mov	 edx, eax
  0046f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  00474	e8 00 00 00 00	 call	 validate_numnodes
  00479	85 c0		 test	 eax, eax
  0047b	74 59		 je	 SHORT $LN22@validate_t@8
  0047d	8b 44 24 24	 mov	 eax, DWORD PTR pos$[rsp]
  00481	ff c0		 inc	 eax
  00483	48 98		 cdqe
  00485	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00489	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  0048e	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00492	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00499	ba 0b 00 00 00	 mov	 edx, 11
  0049e	48 8b c8	 mov	 rcx, rax
  004a1	e8 00 00 00 00	 call	 validate_terminal
  004a6	85 c0		 test	 eax, eax
  004a8	74 2c		 je	 SHORT $LN22@validate_t@8
  004aa	8b 44 24 24	 mov	 eax, DWORD PTR pos$[rsp]
  004ae	83 c0 02	 add	 eax, 2
  004b1	48 98		 cdqe
  004b3	48 6b c0 28	 imul	 rax, 40			; 00000028H
  004b7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tree$[rsp]
  004bc	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  004c0	48 8b c8	 mov	 rcx, rax
  004c3	e8 00 00 00 00	 call	 validate_suite
  004c8	85 c0		 test	 eax, eax
  004ca	74 0a		 je	 SHORT $LN22@validate_t@8
  004cc	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv302[rsp], 1
  004d4	eb 08		 jmp	 SHORT $LN23@validate_t@8
$LN22@validate_t@8:
  004d6	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv302[rsp], 0
$LN23@validate_t@8:
  004de	8b 44 24 4c	 mov	 eax, DWORD PTR tv302[rsp]
  004e2	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_t@8:

; 2048 :     }
; 2049 :     return (res);

  004e6	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN10@validate_t@8:

; 2050 : }

  004ea	48 83 c4 58	 add	 rsp, 88			; 00000058H
  004ee	c3		 ret	 0
validate_try ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_except_clause DD imagerel validate_except_clause
	DD	imagerel validate_except_clause+272
	DD	imagerel $unwind$validate_except_clause
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_except_clause DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_except_clause
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv78 = 40
tv132 = 44
tree$ = 64
validate_except_clause PROC				; COMDAT

; 2055 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2056 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2057 :     int res = (validate_ntype(tree, except_clause)
; 2058 :                && ((nch == 1) || (nch == 2) || (nch == 4))
; 2059 :                && validate_name(CHILD(tree, 0), "except"));

  00015	ba 2c 01 00 00	 mov	 edx, 300		; 0000012cH
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 3d		 je	 SHORT $LN6@validate_e@6
  00028	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0002d	74 0e		 je	 SHORT $LN5@validate_e@6
  0002f	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  00034	74 07		 je	 SHORT $LN5@validate_e@6
  00036	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  0003b	75 28		 jne	 SHORT $LN6@validate_e@6
$LN5@validate_e@6:
  0003d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06JBKEBCGB@except?$AA@
  00044	ba 01 00 00 00	 mov	 edx, 1
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0004e	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00052	e8 00 00 00 00	 call	 validate_terminal
  00057	85 c0		 test	 eax, eax
  00059	74 0a		 je	 SHORT $LN6@validate_e@6
  0005b	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  00063	eb 08		 jmp	 SHORT $LN7@validate_e@6
$LN6@validate_e@6:
  00065	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN7@validate_e@6:
  0006d	8b 44 24 28	 mov	 eax, DWORD PTR tv78[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2060 : 
; 2061 :     if (res && (nch > 1))

  00075	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0007a	74 20		 je	 SHORT $LN2@validate_e@6
  0007c	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  00081	7e 19		 jle	 SHORT $LN2@validate_e@6

; 2062 :         res = validate_test(CHILD(tree, 1));

  00083	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00088	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0008c	48 83 c0 28	 add	 rax, 40			; 00000028H
  00090	48 8b c8	 mov	 rcx, rax
  00093	e8 00 00 00 00	 call	 validate_test
  00098	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN2@validate_e@6:

; 2063 :     if (res && (nch == 4))

  0009c	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000a1	74 64		 je	 SHORT $LN1@validate_e@6
  000a3	83 7c 24 24 04	 cmp	 DWORD PTR nch$[rsp], 4
  000a8	75 5d		 jne	 SHORT $LN1@validate_e@6

; 2064 :         res = (validate_name(CHILD(tree, 2), "as")
; 2065 :                && validate_ntype(CHILD(tree, 3), NAME));

  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000af	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b3	48 83 c0 50	 add	 rax, 80			; 00000050H
  000b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02ENLJKNMP@as?$AA@
  000be	ba 01 00 00 00	 mov	 edx, 1
  000c3	48 8b c8	 mov	 rcx, rax
  000c6	e8 00 00 00 00	 call	 validate_terminal
  000cb	85 c0		 test	 eax, eax
  000cd	74 28		 je	 SHORT $LN8@validate_e@6
  000cf	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000d4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000d8	48 83 c0 78	 add	 rax, 120		; 00000078H
  000dc	ba 01 00 00 00	 mov	 edx, 1
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	e8 00 00 00 00	 call	 validate_ntype
  000e9	85 c0		 test	 eax, eax
  000eb	74 0a		 je	 SHORT $LN8@validate_e@6
  000ed	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000f5	eb 08		 jmp	 SHORT $LN9@validate_e@6
$LN8@validate_e@6:
  000f7	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN9@validate_e@6:
  000ff	8b 44 24 2c	 mov	 eax, DWORD PTR tv132[rsp]
  00103	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@validate_e@6:

; 2066 : 
; 2067 :     return (res);

  00107	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2068 : }

  0010b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010f	c3		 ret	 0
validate_except_clause ENDP
_TEXT	ENDS
PUBLIC	??_C@_04MKNNKNJH@with?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_with_stmt DD imagerel validate_with_stmt
	DD	imagerel validate_with_stmt+285
	DD	imagerel $unwind$validate_with_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_with_stmt DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_04MKNNKNJH@with?$AA@
CONST	SEGMENT
??_C@_04MKNNKNJH@with?$AA@ DB 'with', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_with_stmt
_TEXT	SEGMENT
ok$ = 32
i$ = 36
nch$ = 40
tv129 = 44
tree$ = 64
validate_with_stmt PROC					; COMDAT

; 2548 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2549 :     int i;
; 2550 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 28	 mov	 DWORD PTR nch$[rsp], eax

; 2551 :     int ok = (validate_ntype(tree, with_stmt)
; 2552 :         && (nch % 2 == 0)
; 2553 :         && validate_name(CHILD(tree, 0), "with")
; 2554 :         && validate_colon(RCHILD(tree, -2))
; 2555 :         && validate_suite(RCHILD(tree, -1)));

  00015	ba 2a 01 00 00	 mov	 edx, 298		; 0000012aH
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	0f 84 8f 00 00
	00		 je	 $LN6@validate_w@2
  0002c	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  00030	99		 cdq
  00031	83 e0 01	 and	 eax, 1
  00034	33 c2		 xor	 eax, edx
  00036	2b c2		 sub	 eax, edx
  00038	85 c0		 test	 eax, eax
  0003a	75 7f		 jne	 SHORT $LN6@validate_w@2
  0003c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04MKNNKNJH@with?$AA@
  00043	ba 01 00 00 00	 mov	 edx, 1
  00048	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0004d	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00051	e8 00 00 00 00	 call	 validate_terminal
  00056	85 c0		 test	 eax, eax
  00058	74 61		 je	 SHORT $LN6@validate_w@2
  0005a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0005f	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00062	83 e8 02	 sub	 eax, 2
  00065	48 98		 cdqe
  00067	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00070	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00074	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  0007b	ba 0b 00 00 00	 mov	 edx, 11
  00080	48 8b c8	 mov	 rcx, rax
  00083	e8 00 00 00 00	 call	 validate_terminal
  00088	85 c0		 test	 eax, eax
  0008a	74 2f		 je	 SHORT $LN6@validate_w@2
  0008c	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00091	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00094	ff c8		 dec	 eax
  00096	48 98		 cdqe
  00098	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0009c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000a1	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	e8 00 00 00 00	 call	 validate_suite
  000ad	85 c0		 test	 eax, eax
  000af	74 0a		 je	 SHORT $LN6@validate_w@2
  000b1	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv129[rsp], 1
  000b9	eb 08		 jmp	 SHORT $LN7@validate_w@2
$LN6@validate_w@2:
  000bb	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv129[rsp], 0
$LN7@validate_w@2:
  000c3	8b 44 24 2c	 mov	 eax, DWORD PTR tv129[rsp]
  000c7	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2556 :     for (i = 1; ok && i < nch - 2; i += 2)

  000cb	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  000d3	eb 0b		 jmp	 SHORT $LN3@validate_w@2
$LN2@validate_w@2:
  000d5	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000d9	83 c0 02	 add	 eax, 2
  000dc	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@validate_w@2:
  000e0	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  000e5	74 2d		 je	 SHORT $LN1@validate_w@2
  000e7	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  000eb	83 e8 02	 sub	 eax, 2
  000ee	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  000f2	7d 20		 jge	 SHORT $LN1@validate_w@2

; 2557 :         ok = validate_with_item(CHILD(tree, i));

  000f4	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  000f9	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000fd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00102	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00106	48 8b c8	 mov	 rcx, rax
  00109	e8 00 00 00 00	 call	 validate_with_item
  0010e	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax
  00112	eb c1		 jmp	 SHORT $LN2@validate_w@2
$LN1@validate_w@2:

; 2558 :     return ok;

  00114	8b 44 24 20	 mov	 eax, DWORD PTR ok$[rsp]

; 2559 : }

  00118	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011c	c3		 ret	 0
validate_with_stmt ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_with_item DD imagerel validate_with_item
	DD	imagerel validate_with_item+209
	DD	imagerel $unwind$validate_with_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_with_item DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_with_item
_TEXT	SEGMENT
ok$ = 32
nch$ = 36
tv75 = 40
tv90 = 44
tree$ = 64
validate_with_item PROC					; COMDAT

; 2531 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2532 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2533 :     int ok = (validate_ntype(tree, with_item)
; 2534 :               && (nch == 1 || nch == 3)
; 2535 :               && validate_test(CHILD(tree, 0)));

  00015	ba 2b 01 00 00	 mov	 edx, 299		; 0000012bH
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 2a		 je	 SHORT $LN5@validate_w@3
  00028	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0002d	74 07		 je	 SHORT $LN4@validate_w@3
  0002f	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  00034	75 1c		 jne	 SHORT $LN5@validate_w@3
$LN4@validate_w@3:
  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0003b	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0003f	e8 00 00 00 00	 call	 validate_test
  00044	85 c0		 test	 eax, eax
  00046	74 0a		 je	 SHORT $LN5@validate_w@3
  00048	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  00050	eb 08		 jmp	 SHORT $LN6@validate_w@3
$LN5@validate_w@3:
  00052	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN6@validate_w@3:
  0005a	8b 44 24 28	 mov	 eax, DWORD PTR tv75[rsp]
  0005e	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2536 :     if (ok && nch == 3)

  00062	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  00067	74 5f		 je	 SHORT $LN1@validate_w@3
  00069	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  0006e	75 58		 jne	 SHORT $LN1@validate_w@3

; 2537 :         ok = (validate_name(CHILD(tree, 1), "as")
; 2538 :               && validate_expr(CHILD(tree, 2)));

  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00075	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00079	48 83 c0 28	 add	 rax, 40			; 00000028H
  0007d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02ENLJKNMP@as?$AA@
  00084	ba 01 00 00 00	 mov	 edx, 1
  00089	48 8b c8	 mov	 rcx, rax
  0008c	e8 00 00 00 00	 call	 validate_terminal
  00091	85 c0		 test	 eax, eax
  00093	74 23		 je	 SHORT $LN7@validate_w@3
  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0009a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0009e	48 83 c0 50	 add	 rax, 80			; 00000050H
  000a2	48 8b c8	 mov	 rcx, rax
  000a5	e8 00 00 00 00	 call	 validate_expr
  000aa	85 c0		 test	 eax, eax
  000ac	74 0a		 je	 SHORT $LN7@validate_w@3
  000ae	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv90[rsp], 1
  000b6	eb 08		 jmp	 SHORT $LN8@validate_w@3
$LN7@validate_w@3:
  000b8	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
$LN8@validate_w@3:
  000c0	8b 44 24 2c	 mov	 eax, DWORD PTR tv90[rsp]
  000c4	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax
$LN1@validate_w@3:

; 2539 :     return ok;

  000c8	8b 44 24 20	 mov	 eax, DWORD PTR ok$[rsp]

; 2540 : }

  000cc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d0	c3		 ret	 0
validate_with_item ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@MCGEOJBN@illegal?5number?5of?5children?5for?5f@ ; `string'
PUBLIC	??_C@_02HBOOOICD@?9?$DO?$AA@			; `string'
PUBLIC	??_C@_03BHEEIFFN@def?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_funcdef DD imagerel validate_funcdef
	DD	imagerel validate_funcdef+541
	DD	imagerel $unwind$validate_funcdef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_funcdef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CH@MCGEOJBN@illegal?5number?5of?5children?5for?5f@
CONST	SEGMENT
??_C@_0CH@MCGEOJBN@illegal?5number?5of?5children?5for?5f@ DB 'illegal num'
	DB	'ber of children for funcdef', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HBOOOICD@?9?$DO?$AA@
CONST	SEGMENT
??_C@_02HBOOOICD@?9?$DO?$AA@ DB '->', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BHEEIFFN@def?$AA@
CONST	SEGMENT
??_C@_03BHEEIFFN@def?$AA@ DB 'def', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_funcdef
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv131 = 40
tv174 = 44
tree$ = 64
validate_funcdef PROC					; COMDAT

; 2565 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2566 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2567 :     int res = validate_ntype(tree, funcdef);

  00015	ba 06 01 00 00	 mov	 edx, 262		; 00000106H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2568 :     if (res) {

  00028	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0002d	0f 84 e1 01 00
	00		 je	 $LN5@validate_f@4

; 2569 :         if (nch == 5) {

  00033	83 7c 24 24 05	 cmp	 DWORD PTR nch$[rsp], 5
  00038	0f 85 b8 00 00
	00		 jne	 $LN4@validate_f@4

; 2570 :             res = (validate_name(CHILD(tree, 0), "def")
; 2571 :                    && validate_ntype(CHILD(tree, 1), NAME)
; 2572 :                    && validate_parameters(CHILD(tree, 2))
; 2573 :                    && validate_colon(CHILD(tree, 3))
; 2574 :                    && validate_suite(CHILD(tree, 4)));

  0003e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03BHEEIFFN@def?$AA@
  00045	ba 01 00 00 00	 mov	 edx, 1
  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0004f	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00053	e8 00 00 00 00	 call	 validate_terminal
  00058	85 c0		 test	 eax, eax
  0005a	0f 84 81 00 00
	00		 je	 $LN8@validate_f@4
  00060	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00065	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00069	48 83 c0 28	 add	 rax, 40			; 00000028H
  0006d	ba 01 00 00 00	 mov	 edx, 1
  00072	48 8b c8	 mov	 rcx, rax
  00075	e8 00 00 00 00	 call	 validate_ntype
  0007a	85 c0		 test	 eax, eax
  0007c	74 63		 je	 SHORT $LN8@validate_f@4
  0007e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00083	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00087	48 83 c0 50	 add	 rax, 80			; 00000050H
  0008b	48 8b c8	 mov	 rcx, rax
  0008e	e8 00 00 00 00	 call	 validate_parameters
  00093	85 c0		 test	 eax, eax
  00095	74 4a		 je	 SHORT $LN8@validate_f@4
  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0009c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000a0	48 83 c0 78	 add	 rax, 120		; 00000078H
  000a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  000ab	ba 0b 00 00 00	 mov	 edx, 11
  000b0	48 8b c8	 mov	 rcx, rax
  000b3	e8 00 00 00 00	 call	 validate_terminal
  000b8	85 c0		 test	 eax, eax
  000ba	74 25		 je	 SHORT $LN8@validate_f@4
  000bc	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000c1	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000c5	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  000cb	48 8b c8	 mov	 rcx, rax
  000ce	e8 00 00 00 00	 call	 validate_suite
  000d3	85 c0		 test	 eax, eax
  000d5	74 0a		 je	 SHORT $LN8@validate_f@4
  000d7	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000df	eb 08		 jmp	 SHORT $LN9@validate_f@4
$LN8@validate_f@4:
  000e1	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN9@validate_f@4:
  000e9	8b 44 24 28	 mov	 eax, DWORD PTR tv131[rsp]
  000ed	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
  000f1	e9 1e 01 00 00	 jmp	 $LN3@validate_f@4
$LN4@validate_f@4:

; 2575 :         }
; 2576 :         else if (nch == 7) {

  000f6	83 7c 24 24 07	 cmp	 DWORD PTR nch$[rsp], 7
  000fb	0f 85 ff 00 00
	00		 jne	 $LN2@validate_f@4

; 2577 :             res = (validate_name(CHILD(tree, 0), "def")
; 2578 :                    && validate_ntype(CHILD(tree, 1), NAME)
; 2579 :                    && validate_parameters(CHILD(tree, 2))
; 2580 :                    && validate_rarrow(CHILD(tree, 3))
; 2581 :                    && validate_test(CHILD(tree, 4))
; 2582 :                    && validate_colon(CHILD(tree, 5))
; 2583 :                    && validate_suite(CHILD(tree, 6)));

  00101	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03BHEEIFFN@def?$AA@
  00108	ba 01 00 00 00	 mov	 edx, 1
  0010d	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00112	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00116	e8 00 00 00 00	 call	 validate_terminal
  0011b	85 c0		 test	 eax, eax
  0011d	0f 84 cb 00 00
	00		 je	 $LN10@validate_f@4
  00123	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00128	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0012c	48 83 c0 28	 add	 rax, 40			; 00000028H
  00130	ba 01 00 00 00	 mov	 edx, 1
  00135	48 8b c8	 mov	 rcx, rax
  00138	e8 00 00 00 00	 call	 validate_ntype
  0013d	85 c0		 test	 eax, eax
  0013f	0f 84 a9 00 00
	00		 je	 $LN10@validate_f@4
  00145	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0014a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0014e	48 83 c0 50	 add	 rax, 80			; 00000050H
  00152	48 8b c8	 mov	 rcx, rax
  00155	e8 00 00 00 00	 call	 validate_parameters
  0015a	85 c0		 test	 eax, eax
  0015c	0f 84 8c 00 00
	00		 je	 $LN10@validate_f@4
  00162	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00167	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0016b	48 83 c0 78	 add	 rax, 120		; 00000078H
  0016f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HBOOOICD@?9?$DO?$AA@
  00176	ba 32 00 00 00	 mov	 edx, 50			; 00000032H
  0017b	48 8b c8	 mov	 rcx, rax
  0017e	e8 00 00 00 00	 call	 validate_terminal
  00183	85 c0		 test	 eax, eax
  00185	74 67		 je	 SHORT $LN10@validate_f@4
  00187	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0018c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00190	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00196	48 8b c8	 mov	 rcx, rax
  00199	e8 00 00 00 00	 call	 validate_test
  0019e	85 c0		 test	 eax, eax
  001a0	74 4c		 je	 SHORT $LN10@validate_f@4
  001a2	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  001a7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001ab	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  001b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  001b8	ba 0b 00 00 00	 mov	 edx, 11
  001bd	48 8b c8	 mov	 rcx, rax
  001c0	e8 00 00 00 00	 call	 validate_terminal
  001c5	85 c0		 test	 eax, eax
  001c7	74 25		 je	 SHORT $LN10@validate_f@4
  001c9	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  001ce	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001d2	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  001d8	48 8b c8	 mov	 rcx, rax
  001db	e8 00 00 00 00	 call	 validate_suite
  001e0	85 c0		 test	 eax, eax
  001e2	74 0a		 je	 SHORT $LN10@validate_f@4
  001e4	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv174[rsp], 1
  001ec	eb 08		 jmp	 SHORT $LN11@validate_f@4
$LN10@validate_f@4:
  001ee	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv174[rsp], 0
$LN11@validate_f@4:
  001f6	8b 44 24 2c	 mov	 eax, DWORD PTR tv174[rsp]
  001fa	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 2584 :         }
; 2585 :         else {

  001fe	eb 14		 jmp	 SHORT $LN1@validate_f@4
$LN2@validate_f@4:

; 2586 :             res = 0;

  00200	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 2587 :             err_string("illegal number of children for funcdef");

  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@MCGEOJBN@illegal?5number?5of?5children?5for?5f@
  0020f	e8 00 00 00 00	 call	 err_string
$LN1@validate_f@4:
$LN3@validate_f@4:
$LN5@validate_f@4:

; 2588 :         }
; 2589 :     }
; 2590 :     return res;

  00214	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 2591 : }

  00218	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0021c	c3		 ret	 0
validate_funcdef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@HHPOFMCB@parameters?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_parameters DD imagerel validate_parameters
	DD	imagerel validate_parameters+264
	DD	imagerel $unwind$validate_parameters
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_parameters DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@HHPOFMCB@parameters?$AA@
CONST	SEGMENT
??_C@_0L@HHPOFMCB@parameters?$AA@ DB 'parameters', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_parameters
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv71 = 40
tv89 = 44
tree$ = 64
validate_parameters PROC				; COMDAT

; 1153 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1154 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 1155 :     int res = validate_ntype(tree, parameters) && ((nch == 2) || (nch == 3));

  00015	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 18		 je	 SHORT $LN7@validate_p@2
  00028	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  0002d	74 07		 je	 SHORT $LN6@validate_p@2
  0002f	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  00034	75 0a		 jne	 SHORT $LN7@validate_p@2
$LN6@validate_p@2:
  00036	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0003e	eb 08		 jmp	 SHORT $LN8@validate_p@2
$LN7@validate_p@2:
  00040	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN8@validate_p@2:
  00048	8b 44 24 28	 mov	 eax, DWORD PTR tv71[rsp]
  0004c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1156 : 
; 1157 :     if (res) {

  00050	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00055	0f 84 8e 00 00
	00		 je	 $LN3@validate_p@2

; 1158 :         res = (validate_lparen(CHILD(tree, 0))
; 1159 :                && validate_rparen(CHILD(tree, nch - 1)));

  0005b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  00062	ba 07 00 00 00	 mov	 edx, 7
  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0006c	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00070	e8 00 00 00 00	 call	 validate_terminal
  00075	85 c0		 test	 eax, eax
  00077	74 37		 je	 SHORT $LN9@validate_p@2
  00079	8b 44 24 24	 mov	 eax, DWORD PTR nch$[rsp]
  0007d	ff c8		 dec	 eax
  0007f	48 98		 cdqe
  00081	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00085	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0008a	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0008e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  00095	ba 08 00 00 00	 mov	 edx, 8
  0009a	48 8b c8	 mov	 rcx, rax
  0009d	e8 00 00 00 00	 call	 validate_terminal
  000a2	85 c0		 test	 eax, eax
  000a4	74 0a		 je	 SHORT $LN9@validate_p@2
  000a6	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  000ae	eb 08		 jmp	 SHORT $LN10@validate_p@2
$LN9@validate_p@2:
  000b0	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN10@validate_p@2:
  000b8	8b 44 24 2c	 mov	 eax, DWORD PTR tv89[rsp]
  000bc	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1160 :         if (res && (nch == 3))

  000c0	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000c5	74 20		 je	 SHORT $LN2@validate_p@2
  000c7	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  000cc	75 19		 jne	 SHORT $LN2@validate_p@2

; 1161 :             res = validate_varargslist(CHILD(tree, 1));

  000ce	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000d3	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000d7	48 83 c0 28	 add	 rax, 40			; 00000028H
  000db	48 8b c8	 mov	 rcx, rax
  000de	e8 00 00 00 00	 call	 validate_varargslist
  000e3	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN2@validate_p@2:

; 1162 :     }
; 1163 :     else {

  000e7	eb 16		 jmp	 SHORT $LN1@validate_p@2
$LN3@validate_p@2:

; 1164 :         (void) validate_numnodes(tree, 2, "parameters");

  000e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@HHPOFMCB@parameters?$AA@
  000f0	ba 02 00 00 00	 mov	 edx, 2
  000f5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  000fa	e8 00 00 00 00	 call	 validate_numnodes
$LN1@validate_p@2:

; 1165 :     }
; 1166 :     return (res);

  000ff	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 1167 : }

  00103	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00107	c3		 ret	 0
validate_parameters ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_decorated DD imagerel validate_decorated
	DD	imagerel validate_decorated+298
	DD	imagerel $unwind$validate_decorated
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_decorated DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_decorated
_TEXT	SEGMENT
ok$ = 32
nch$ = 36
tv79 = 40
tv130 = 44
tv141 = 48
tree$ = 80
validate_decorated PROC					; COMDAT

; 2599 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2600 :     int nch = NCH(tree);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2601 :     int ok = (validate_ntype(tree, decorated)
; 2602 :               && (nch == 2)
; 2603 :               && validate_decorators(RCHILD(tree, -2)));

  00015	ba 05 01 00 00	 mov	 edx, 261		; 00000105H
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 37		 je	 SHORT $LN5@validate_d@6
  00028	83 7c 24 24 02	 cmp	 DWORD PTR nch$[rsp], 2
  0002d	75 30		 jne	 SHORT $LN5@validate_d@6
  0002f	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00034	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00037	83 e8 02	 sub	 eax, 2
  0003a	48 98		 cdqe
  0003c	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00040	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00045	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 validate_decorators
  00051	85 c0		 test	 eax, eax
  00053	74 0a		 je	 SHORT $LN5@validate_d@6
  00055	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  0005d	eb 08		 jmp	 SHORT $LN6@validate_d@6
$LN5@validate_d@6:
  0005f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
$LN6@validate_d@6:
  00067	8b 44 24 28	 mov	 eax, DWORD PTR tv79[rsp]
  0006b	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2604 :     if (TYPE(RCHILD(tree, -1)) == funcdef)

  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00074	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00077	ff c8		 dec	 eax
  00079	48 98		 cdqe
  0007b	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0007f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00084	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00088	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  0008c	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00091	75 48		 jne	 SHORT $LN2@validate_d@6

; 2605 :         ok = ok && validate_funcdef(RCHILD(tree, -1));

  00093	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  00098	74 2f		 je	 SHORT $LN7@validate_d@6
  0009a	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0009f	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000a2	ff c8		 dec	 eax
  000a4	48 98		 cdqe
  000a6	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000aa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000af	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000b3	48 8b c8	 mov	 rcx, rax
  000b6	e8 00 00 00 00	 call	 validate_funcdef
  000bb	85 c0		 test	 eax, eax
  000bd	74 0a		 je	 SHORT $LN7@validate_d@6
  000bf	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000c7	eb 08		 jmp	 SHORT $LN8@validate_d@6
$LN7@validate_d@6:
  000c9	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN8@validate_d@6:
  000d1	8b 44 24 2c	 mov	 eax, DWORD PTR tv130[rsp]
  000d5	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2606 :     else

  000d9	eb 46		 jmp	 SHORT $LN1@validate_d@6
$LN2@validate_d@6:

; 2607 :         ok = ok && validate_class(RCHILD(tree, -1));

  000db	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  000e0	74 2f		 je	 SHORT $LN9@validate_d@6
  000e2	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  000e7	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000ea	ff c8		 dec	 eax
  000ec	48 98		 cdqe
  000ee	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  000f7	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  000fb	48 8b c8	 mov	 rcx, rax
  000fe	e8 00 00 00 00	 call	 validate_class
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN9@validate_d@6
  00107	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv141[rsp], 1
  0010f	eb 08		 jmp	 SHORT $LN10@validate_d@6
$LN9@validate_d@6:
  00111	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv141[rsp], 0
$LN10@validate_d@6:
  00119	8b 44 24 30	 mov	 eax, DWORD PTR tv141[rsp]
  0011d	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax
$LN1@validate_d@6:

; 2608 :     return ok;

  00121	8b 44 24 20	 mov	 eax, DWORD PTR ok$[rsp]

; 2609 : }

  00125	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00129	c3		 ret	 0
validate_decorated ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_decorators DD imagerel validate_decorators
	DD	imagerel validate_decorators+151
	DD	imagerel $unwind$validate_decorators
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_decorators DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT validate_decorators
_TEXT	SEGMENT
ok$ = 32
i$ = 36
nch$ = 40
tv70 = 44
tree$ = 64
validate_decorators PROC				; COMDAT

; 2515 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2516 :     int i, nch, ok;
; 2517 :     nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 28	 mov	 DWORD PTR nch$[rsp], eax

; 2518 :     ok = validate_ntype(tree, decorators) && nch >= 1;

  00015	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	74 11		 je	 SHORT $LN6@validate_d@7
  00028	83 7c 24 28 01	 cmp	 DWORD PTR nch$[rsp], 1
  0002d	7c 0a		 jl	 SHORT $LN6@validate_d@7
  0002f	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  00037	eb 08		 jmp	 SHORT $LN7@validate_d@7
$LN6@validate_d@7:
  00039	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN7@validate_d@7:
  00041	8b 44 24 2c	 mov	 eax, DWORD PTR tv70[rsp]
  00045	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2519 : 
; 2520 :     for (i = 0; ok && i < nch; ++i)

  00049	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00051	eb 0a		 jmp	 SHORT $LN3@validate_d@7
$LN2@validate_d@7:
  00053	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00057	ff c0		 inc	 eax
  00059	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@validate_d@7:
  0005d	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  00062	74 2a		 je	 SHORT $LN1@validate_d@7
  00064	8b 44 24 28	 mov	 eax, DWORD PTR nch$[rsp]
  00068	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  0006c	7d 20		 jge	 SHORT $LN1@validate_d@7

; 2521 :         ok = validate_decorator(CHILD(tree, i));

  0006e	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00073	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00077	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0007c	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00080	48 8b c8	 mov	 rcx, rax
  00083	e8 00 00 00 00	 call	 validate_decorator
  00088	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax
  0008c	eb c5		 jmp	 SHORT $LN2@validate_d@7
$LN1@validate_d@7:

; 2522 : 
; 2523 :     return ok;

  0008e	8b 44 24 20	 mov	 eax, DWORD PTR ok$[rsp]

; 2524 : }

  00092	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00096	c3		 ret	 0
validate_decorators ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EOFPKCAF@?$EA?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_decorator DD imagerel validate_decorator
	DD	imagerel validate_decorator+374
	DD	imagerel $unwind$validate_decorator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_decorator DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_01EOFPKCAF@?$EA?$AA@
CONST	SEGMENT
??_C@_01EOFPKCAF@?$EA?$AA@ DB '@', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_decorator
_TEXT	SEGMENT
ok$ = 32
nch$ = 36
tv94 = 40
tv147 = 44
tree$ = 64
validate_decorator PROC					; COMDAT

; 2490 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2491 :     int ok;
; 2492 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 2493 :     ok = (validate_ntype(tree, decorator) &&
; 2494 :           (nch == 3 || nch == 5 || nch == 6) &&
; 2495 :           validate_at(CHILD(tree, 0)) &&
; 2496 :           validate_dotted_name(CHILD(tree, 1)) &&
; 2497 :           validate_newline(RCHILD(tree, -1)));

  00015	ba 03 01 00 00	 mov	 edx, 259		; 00000103H
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0001f	e8 00 00 00 00	 call	 validate_ntype
  00024	85 c0		 test	 eax, eax
  00026	0f 84 83 00 00
	00		 je	 $LN6@validate_d@8
  0002c	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  00031	74 0e		 je	 SHORT $LN5@validate_d@8
  00033	83 7c 24 24 05	 cmp	 DWORD PTR nch$[rsp], 5
  00038	74 07		 je	 SHORT $LN5@validate_d@8
  0003a	83 7c 24 24 06	 cmp	 DWORD PTR nch$[rsp], 6
  0003f	75 6e		 jne	 SHORT $LN6@validate_d@8
$LN5@validate_d@8:
  00041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01EOFPKCAF@?$EA?$AA@
  00048	ba 31 00 00 00	 mov	 edx, 49			; 00000031H
  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00052	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00056	e8 00 00 00 00	 call	 validate_terminal
  0005b	85 c0		 test	 eax, eax
  0005d	74 50		 je	 SHORT $LN6@validate_d@8
  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00064	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00068	48 83 c0 28	 add	 rax, 40			; 00000028H
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 validate_dotted_name
  00074	85 c0		 test	 eax, eax
  00076	74 37		 je	 SHORT $LN6@validate_d@8
  00078	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0007d	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00080	ff c8		 dec	 eax
  00082	48 98		 cdqe
  00084	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00088	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0008d	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00091	45 33 c0	 xor	 r8d, r8d
  00094	ba 04 00 00 00	 mov	 edx, 4
  00099	48 8b c8	 mov	 rcx, rax
  0009c	e8 00 00 00 00	 call	 validate_terminal
  000a1	85 c0		 test	 eax, eax
  000a3	74 0a		 je	 SHORT $LN6@validate_d@8
  000a5	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  000ad	eb 08		 jmp	 SHORT $LN7@validate_d@8
$LN6@validate_d@8:
  000af	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN7@validate_d@8:
  000b7	8b 44 24 28	 mov	 eax, DWORD PTR tv94[rsp]
  000bb	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2498 : 
; 2499 :     if (ok && nch != 3) {

  000bf	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  000c4	0f 84 a3 00 00
	00		 je	 $LN2@validate_d@8
  000ca	83 7c 24 24 03	 cmp	 DWORD PTR nch$[rsp], 3
  000cf	0f 84 98 00 00
	00		 je	 $LN2@validate_d@8

; 2500 :         ok = (validate_lparen(CHILD(tree, 2)) &&
; 2501 :               validate_rparen(RCHILD(tree, -2)));

  000d5	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000da	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000de	48 83 c0 50	 add	 rax, 80			; 00000050H
  000e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  000e9	ba 07 00 00 00	 mov	 edx, 7
  000ee	48 8b c8	 mov	 rcx, rax
  000f1	e8 00 00 00 00	 call	 validate_terminal
  000f6	85 c0		 test	 eax, eax
  000f8	74 3c		 je	 SHORT $LN8@validate_d@8
  000fa	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  000ff	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00102	83 e8 02	 sub	 eax, 2
  00105	48 98		 cdqe
  00107	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0010b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00110	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00114	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  0011b	ba 08 00 00 00	 mov	 edx, 8
  00120	48 8b c8	 mov	 rcx, rax
  00123	e8 00 00 00 00	 call	 validate_terminal
  00128	85 c0		 test	 eax, eax
  0012a	74 0a		 je	 SHORT $LN8@validate_d@8
  0012c	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv147[rsp], 1
  00134	eb 08		 jmp	 SHORT $LN9@validate_d@8
$LN8@validate_d@8:
  00136	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
$LN9@validate_d@8:
  0013e	8b 44 24 2c	 mov	 eax, DWORD PTR tv147[rsp]
  00142	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 2502 : 
; 2503 :         if (ok && nch == 6)

  00146	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  0014b	74 20		 je	 SHORT $LN1@validate_d@8
  0014d	83 7c 24 24 06	 cmp	 DWORD PTR nch$[rsp], 6
  00152	75 19		 jne	 SHORT $LN1@validate_d@8

; 2504 :             ok = validate_arglist(CHILD(tree, 3));

  00154	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00159	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0015d	48 83 c0 78	 add	 rax, 120		; 00000078H
  00161	48 8b c8	 mov	 rcx, rax
  00164	e8 00 00 00 00	 call	 validate_arglist
  00169	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax
$LN1@validate_d@8:
$LN2@validate_d@8:

; 2505 :     }
; 2506 : 
; 2507 :     return ok;

  0016d	8b 44 24 20	 mov	 eax, DWORD PTR ok$[rsp]

; 2508 : }

  00171	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00175	c3		 ret	 0
validate_decorator ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@BEJCFJCJ@Error?5Parsing?5encoding_decl?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_encoding_decl DD imagerel validate_encoding_decl
	DD	imagerel validate_encoding_decl+110
	DD	imagerel $unwind$validate_encoding_decl
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_encoding_decl DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BM@BEJCFJCJ@Error?5Parsing?5encoding_decl?$AA@
CONST	SEGMENT
??_C@_0BM@BEJCFJCJ@Error?5Parsing?5encoding_decl?$AA@ DB 'Error Parsing e'
	DB	'ncoding_decl', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_encoding_decl
_TEXT	SEGMENT
res$ = 32
nch$ = 36
tv70 = 40
tree$ = 64
validate_encoding_decl PROC				; COMDAT

; 3241 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3242 :     int nch = NCH(tree);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0000e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00011	89 44 24 24	 mov	 DWORD PTR nch$[rsp], eax

; 3243 :     int res = ((nch == 1)
; 3244 :         && validate_file_input(CHILD(tree, 0)));

  00015	83 7c 24 24 01	 cmp	 DWORD PTR nch$[rsp], 1
  0001a	75 1c		 jne	 SHORT $LN4@validate_e@7
  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00021	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00025	e8 00 00 00 00	 call	 validate_file_input
  0002a	85 c0		 test	 eax, eax
  0002c	74 0a		 je	 SHORT $LN4@validate_e@7
  0002e	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  00036	eb 08		 jmp	 SHORT $LN5@validate_e@7
$LN4@validate_e@7:
  00038	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN5@validate_e@7:
  00040	8b 44 24 28	 mov	 eax, DWORD PTR tv70[rsp]
  00044	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3245 : 
; 3246 :     if (!res && !PyErr_Occurred())

  00048	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0004d	75 16		 jne	 SHORT $LN1@validate_e@7
  0004f	e8 00 00 00 00	 call	 PyErr_Occurred
  00054	48 85 c0	 test	 rax, rax
  00057	75 0c		 jne	 SHORT $LN1@validate_e@7

; 3247 :         err_string("Error Parsing encoding_decl");

  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@BEJCFJCJ@Error?5Parsing?5encoding_decl?$AA@
  00060	e8 00 00 00 00	 call	 err_string
$LN1@validate_e@7:

; 3248 : 
; 3249 :     return res;

  00065	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]

; 3250 : }

  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
validate_encoding_decl ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@		; `string'
PUBLIC	??_C@_02MPEHDMPO@Oi?$AA@			; `string'
PUBLIC	??_C@_0M@KDOMCEFK@O?$CB?3_pickler?$AA@		; `string'
EXTRN	PyDict_New:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parser__pickler DD imagerel parser__pickler
	DD	imagerel parser__pickler+259
	DD	imagerel $unwind$parser__pickler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parser__pickler DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@ DB 'O(O)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MPEHDMPO@Oi?$AA@
CONST	SEGMENT
??_C@_02MPEHDMPO@Oi?$AA@ DB 'Oi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KDOMCEFK@O?$CB?3_pickler?$AA@
CONST	SEGMENT
??_C@_0M@KDOMCEFK@O?$CB?3_pickler?$AA@ DB 'O!:_pickler', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parser__pickler
_TEXT	SEGMENT
st$ = 32
result$ = 40
empty_dict$ = 48
newargs$23820 = 56
tuple$23821 = 64
self$ = 96
args$ = 104
parser__pickler PROC					; COMDAT

; 3258 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3259 :     NOTE(ARGUNUSED(self))
; 3260 :     PyObject *result = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 3261 :     PyObject *st = NULL;

  00017	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR st$[rsp], 0

; 3262 :     PyObject *empty_dict = NULL;

  00020	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR empty_dict$[rsp], 0

; 3263 : 
; 3264 :     if (PyArg_ParseTuple(args, "O!:_pickler", &PyST_Type, &st)) {

  00029	4c 8d 4c 24 20	 lea	 r9, QWORD PTR st$[rsp]
  0002e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyST_Type
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@KDOMCEFK@O?$CB?3_pickler?$AA@
  0003c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00041	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00046	85 c0		 test	 eax, eax
  00048	0f 84 93 00 00
	00		 je	 $LN8@parser__pi

; 3265 :         PyObject *newargs;
; 3266 :         PyObject *tuple;
; 3267 : 
; 3268 :         if ((empty_dict = PyDict_New()) == NULL)

  0004e	e8 00 00 00 00	 call	 PyDict_New
  00053	48 89 44 24 30	 mov	 QWORD PTR empty_dict$[rsp], rax
  00058	48 83 7c 24 30
	00		 cmp	 QWORD PTR empty_dict$[rsp], 0
  0005e	75 02		 jne	 SHORT $LN7@parser__pi

; 3269 :             goto finally;

  00060	eb 7f		 jmp	 SHORT $finally$23824
$LN7@parser__pi:

; 3270 :         if ((newargs = Py_BuildValue("Oi", st, 1)) == NULL)

  00062	41 b8 01 00 00
	00		 mov	 r8d, 1
  00068	48 8b 54 24 20	 mov	 rdx, QWORD PTR st$[rsp]
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  00074	e8 00 00 00 00	 call	 Py_BuildValue
  00079	48 89 44 24 38	 mov	 QWORD PTR newargs$23820[rsp], rax
  0007e	48 83 7c 24 38
	00		 cmp	 QWORD PTR newargs$23820[rsp], 0
  00084	75 02		 jne	 SHORT $LN6@parser__pi

; 3271 :             goto finally;

  00086	eb 59		 jmp	 SHORT $finally$23824
$LN6@parser__pi:

; 3272 :         tuple = parser_st2tuple((PyST_Object*)NULL, newargs, empty_dict);

  00088	4c 8b 44 24 30	 mov	 r8, QWORD PTR empty_dict$[rsp]
  0008d	48 8b 54 24 38	 mov	 rdx, QWORD PTR newargs$23820[rsp]
  00092	33 c9		 xor	 ecx, ecx
  00094	e8 00 00 00 00	 call	 parser_st2tuple
  00099	48 89 44 24 40	 mov	 QWORD PTR tuple$23821[rsp], rax

; 3273 :         if (tuple != NULL) {

  0009e	48 83 7c 24 40
	00		 cmp	 QWORD PTR tuple$23821[rsp], 0
  000a4	74 27		 je	 SHORT $LN5@parser__pi

; 3274 :             result = Py_BuildValue("O(O)", pickle_constructor, tuple);

  000a6	4c 8b 44 24 40	 mov	 r8, QWORD PTR tuple$23821[rsp]
  000ab	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR pickle_constructor
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LJHIBFLN@O?$CIO?$CJ?$AA@
  000b9	e8 00 00 00 00	 call	 Py_BuildValue
  000be	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3275 :             Py_DECREF(tuple);

  000c3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tuple$23821[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@parser__pi:

; 3276 :         }
; 3277 :         Py_DECREF(empty_dict);

  000cd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR empty_dict$[rsp]
  000d2	e8 00 00 00 00	 call	 _Py_DecRef

; 3278 :         Py_DECREF(newargs);

  000d7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR newargs$23820[rsp]
  000dc	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@parser__pi:
$finally$23824:
$LN4@parser__pi:

; 3279 :     }
; 3280 :   finally:
; 3281 :     Py_XDECREF(empty_dict);

  000e1	48 83 7c 24 30
	00		 cmp	 QWORD PTR empty_dict$[rsp], 0
  000e7	74 0a		 je	 SHORT $LN1@parser__pi
  000e9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR empty_dict$[rsp]
  000ee	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@parser__pi:
  000f3	33 c0		 xor	 eax, eax
  000f5	85 c0		 test	 eax, eax
  000f7	75 e8		 jne	 SHORT $LN4@parser__pi

; 3282 : 
; 3283 :     return (result);

  000f9	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]

; 3284 : }

  000fe	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00102	c3		 ret	 0
parser__pickler ENDP
_TEXT	ENDS
PUBLIC	??_C@_07ODDBKIAB@copyreg?$AA@			; `string'
PUBLIC	??_C@_0M@EKHGKOEI@__version__?$AA@		; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_0O@LFPOLEGP@__copyright__?$AA@		; `string'
PUBLIC	??_C@_06HAGOOIOF@STType?$AA@			; `string'
PUBLIC	??_C@_0M@LCFGDIAC@ParserError?$AA@		; `string'
PUBLIC	??_C@_0BD@BGNKHKBP@parser?4ParserError?$AA@	; `string'
PUBLIC	PyInit_parser
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyImport_ImportModuleNoBlock:PROC
EXTRN	PyModule_AddStringConstant:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyErr_NewException:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
EXTRN	PyType_Ready:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_parser DD imagerel $LN30
	DD	imagerel $LN30+650
	DD	imagerel $unwind$PyInit_parser
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_parser DD 010401H
	DD	0c204H
xdata	ENDS
;	COMDAT ??_C@_07ODDBKIAB@copyreg?$AA@
CONST	SEGMENT
??_C@_07ODDBKIAB@copyreg?$AA@ DB 'copyreg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EKHGKOEI@__version__?$AA@
CONST	SEGMENT
??_C@_0M@EKHGKOEI@__version__?$AA@ DB '__version__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LFPOLEGP@__copyright__?$AA@
CONST	SEGMENT
??_C@_0O@LFPOLEGP@__copyright__?$AA@ DB '__copyright__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HAGOOIOF@STType?$AA@
CONST	SEGMENT
??_C@_06HAGOOIOF@STType?$AA@ DB 'STType', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LCFGDIAC@ParserError?$AA@
CONST	SEGMENT
??_C@_0M@LCFGDIAC@ParserError?$AA@ DB 'ParserError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BGNKHKBP@parser?4ParserError?$AA@
CONST	SEGMENT
??_C@_0BD@BGNKHKBP@parser?4ParserError?$AA@ DB 'parser.ParserError', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit_parser
_TEXT	SEGMENT
copyreg$ = 48
module$ = 56
pickler$23924 = 64
func$23923 = 72
res$23941 = 80
PyInit_parser PROC					; COMDAT

; 3338 : {

$LN30:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 3339 :     PyObject *module, *copyreg;
; 3340 : 
; 3341 :     if (PyType_Ready(&PyST_Type) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyST_Type
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	7d 07		 jge	 SHORT $LN27@PyInit_par

; 3342 :         return NULL;

  00014	33 c0		 xor	 eax, eax
  00016	e9 6a 02 00 00	 jmp	 $LN28@PyInit_par
$LN27@PyInit_par:

; 3343 :     module = PyModule_Create(&parsermodule);

  0001b	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:parsermodule
  00027	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  0002c	48 89 44 24 38	 mov	 QWORD PTR module$[rsp], rax

; 3344 :     if (module == NULL)

  00031	48 83 7c 24 38
	00		 cmp	 QWORD PTR module$[rsp], 0
  00037	75 07		 jne	 SHORT $LN26@PyInit_par

; 3345 :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 45 02 00 00	 jmp	 $LN28@PyInit_par
$LN26@PyInit_par:

; 3346 : 
; 3347 :     if (parser_error == 0)

  00040	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR parser_error, 0
  00048	75 18		 jne	 SHORT $LN25@PyInit_par

; 3348 :         parser_error = PyErr_NewException("parser.ParserError", NULL, NULL);

  0004a	45 33 c0	 xor	 r8d, r8d
  0004d	33 d2		 xor	 edx, edx
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BGNKHKBP@parser?4ParserError?$AA@
  00056	e8 00 00 00 00	 call	 PyErr_NewException
  0005b	48 89 05 00 00
	00 00		 mov	 QWORD PTR parser_error, rax
$LN25@PyInit_par:

; 3349 : 
; 3350 :     if (parser_error == 0)

  00062	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR parser_error, 0
  0006a	75 07		 jne	 SHORT $LN24@PyInit_par

; 3351 :         return NULL;

  0006c	33 c0		 xor	 eax, eax
  0006e	e9 12 02 00 00	 jmp	 $LN28@PyInit_par
$LN24@PyInit_par:

; 3352 :     /* CAUTION:  The code next used to skip bumping the refcount on
; 3353 :      * parser_error.  That's a disaster if PyInit_parser() gets called more
; 3354 :      * than once.  By incref'ing, we ensure that each module dict that
; 3355 :      * gets created owns its reference to the shared parser_error object,
; 3356 :      * and the file static parser_error vrbl owns a reference too.
; 3357 :      */
; 3358 :     Py_INCREF(parser_error);

  00073	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR parser_error
  0007a	e8 00 00 00 00	 call	 _Py_IncRef

; 3359 :     if (PyModule_AddObject(module, "ParserError", parser_error) != 0)

  0007f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR parser_error
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@LCFGDIAC@ParserError?$AA@
  0008d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR module$[rsp]
  00092	e8 00 00 00 00	 call	 PyModule_AddObject
  00097	85 c0		 test	 eax, eax
  00099	74 07		 je	 SHORT $LN23@PyInit_par

; 3360 :         return NULL;

  0009b	33 c0		 xor	 eax, eax
  0009d	e9 e3 01 00 00	 jmp	 $LN28@PyInit_par
$LN23@PyInit_par:

; 3361 : 
; 3362 :     Py_INCREF(&PyST_Type);

  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyST_Type
  000a9	e8 00 00 00 00	 call	 _Py_IncRef

; 3363 :     PyModule_AddObject(module, "STType", (PyObject*)&PyST_Type);

  000ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyST_Type
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06HAGOOIOF@STType?$AA@
  000bc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR module$[rsp]
  000c1	e8 00 00 00 00	 call	 PyModule_AddObject

; 3364 : 
; 3365 :     PyModule_AddStringConstant(module, "__copyright__",
; 3366 :                                parser_copyright_string);

  000c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:parser_copyright_string
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LFPOLEGP@__copyright__?$AA@
  000d4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR module$[rsp]
  000d9	e8 00 00 00 00	 call	 PyModule_AddStringConstant

; 3367 :     PyModule_AddStringConstant(module, "__doc__",
; 3368 :                                parser_doc_string);

  000de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:parser_doc_string
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  000ec	48 8b 4c 24 38	 mov	 rcx, QWORD PTR module$[rsp]
  000f1	e8 00 00 00 00	 call	 PyModule_AddStringConstant

; 3369 :     PyModule_AddStringConstant(module, "__version__",
; 3370 :                                parser_version_string);

  000f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:parser_version_string
  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@EKHGKOEI@__version__?$AA@
  00104	48 8b 4c 24 38	 mov	 rcx, QWORD PTR module$[rsp]
  00109	e8 00 00 00 00	 call	 PyModule_AddStringConstant

; 3371 : 
; 3372 :     /* Register to support pickling.
; 3373 :      * If this fails, the import of this module will fail because an
; 3374 :      * exception will be raised here; should we clear the exception?
; 3375 :      */
; 3376 :     copyreg = PyImport_ImportModuleNoBlock("copyreg");

  0010e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07ODDBKIAB@copyreg?$AA@
  00115	e8 00 00 00 00	 call	 PyImport_ImportModuleNoBlock
  0011a	48 89 44 24 30	 mov	 QWORD PTR copyreg$[rsp], rax

; 3377 :     if (copyreg != NULL) {

  0011f	48 83 7c 24 30
	00		 cmp	 QWORD PTR copyreg$[rsp], 0
  00125	0f 84 55 01 00
	00		 je	 $LN22@PyInit_par

; 3378 :         PyObject *func, *pickler;
; 3379 :         _Py_IDENTIFIER(pickle);
; 3380 :         _Py_IDENTIFIER(sequence2st);
; 3381 :         _Py_IDENTIFIER(_pickler);
; 3382 : 
; 3383 :         func = _PyObject_GetAttrId(copyreg, &PyId_pickle);

  0012b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_pickle@?2??PyInit_parser@@9@9
  00130	8b c0		 mov	 eax, eax
  00132	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00138	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00141	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00145	48 8b d0	 mov	 rdx, rax
  00148	48 8b 4c 24 30	 mov	 rcx, QWORD PTR copyreg$[rsp]
  0014d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00152	48 89 44 24 48	 mov	 QWORD PTR func$23923[rsp], rax

; 3384 :         pickle_constructor = _PyObject_GetAttrId(module, &PyId_sequence2st);

  00157	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_sequence2st@?2??PyInit_parser@@9@9
  0015c	8b c0		 mov	 eax, eax
  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00164	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0016d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00171	48 8b d0	 mov	 rdx, rax
  00174	48 8b 4c 24 38	 mov	 rcx, QWORD PTR module$[rsp]
  00179	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0017e	48 89 05 00 00
	00 00		 mov	 QWORD PTR pickle_constructor, rax

; 3385 :         pickler = _PyObject_GetAttrId(module, &PyId__pickler);

  00185	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__pickler@?2??PyInit_parser@@9@9
  0018a	8b c0		 mov	 eax, eax
  0018c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00192	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0019b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0019f	48 8b d0	 mov	 rdx, rax
  001a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR module$[rsp]
  001a7	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001ac	48 89 44 24 40	 mov	 QWORD PTR pickler$23924[rsp], rax
$LN21@PyInit_par:

; 3386 :         Py_XINCREF(pickle_constructor);

  001b1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR pickle_constructor, 0
  001b9	74 0c		 je	 SHORT $LN18@PyInit_par
  001bb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pickle_constructor
  001c2	e8 00 00 00 00	 call	 _Py_IncRef
$LN18@PyInit_par:
  001c7	33 c0		 xor	 eax, eax
  001c9	85 c0		 test	 eax, eax
  001cb	75 e4		 jne	 SHORT $LN21@PyInit_par

; 3387 :         if ((func != NULL) && (pickle_constructor != NULL)
; 3388 :             && (pickler != NULL)) {

  001cd	48 83 7c 24 48
	00		 cmp	 QWORD PTR func$23923[rsp], 0
  001d3	74 55		 je	 SHORT $LN17@PyInit_par
  001d5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR pickle_constructor, 0
  001dd	74 4b		 je	 SHORT $LN17@PyInit_par
  001df	48 83 7c 24 40
	00		 cmp	 QWORD PTR pickler$23924[rsp], 0
  001e5	74 43		 je	 SHORT $LN17@PyInit_par

; 3389 :             PyObject *res;
; 3390 : 
; 3391 :             res = PyObject_CallFunctionObjArgs(func, &PyST_Type, pickler,
; 3392 :                                                pickle_constructor, NULL);

  001e7	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  001f0	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR pickle_constructor
  001f7	4c 8b 44 24 40	 mov	 r8, QWORD PTR pickler$23924[rsp]
  001fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyST_Type
  00203	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$23923[rsp]
  00208	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  0020d	48 89 44 24 50	 mov	 QWORD PTR res$23941[rsp], rax
$LN16@PyInit_par:

; 3393 :             Py_XDECREF(res);

  00212	48 83 7c 24 50
	00		 cmp	 QWORD PTR res$23941[rsp], 0
  00218	74 0a		 je	 SHORT $LN13@PyInit_par
  0021a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR res$23941[rsp]
  0021f	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyInit_par:
  00224	33 c0		 xor	 eax, eax
  00226	85 c0		 test	 eax, eax
  00228	75 e8		 jne	 SHORT $LN16@PyInit_par
$LN17@PyInit_par:
$LN12@PyInit_par:

; 3394 :         }
; 3395 :         Py_XDECREF(func);

  0022a	48 83 7c 24 48
	00		 cmp	 QWORD PTR func$23923[rsp], 0
  00230	74 0a		 je	 SHORT $LN9@PyInit_par
  00232	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$23923[rsp]
  00237	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyInit_par:
  0023c	33 c0		 xor	 eax, eax
  0023e	85 c0		 test	 eax, eax
  00240	75 e8		 jne	 SHORT $LN12@PyInit_par
$LN8@PyInit_par:

; 3396 :         Py_XDECREF(pickle_constructor);

  00242	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR pickle_constructor, 0
  0024a	74 0c		 je	 SHORT $LN5@PyInit_par
  0024c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pickle_constructor
  00253	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyInit_par:
  00258	33 c0		 xor	 eax, eax
  0025a	85 c0		 test	 eax, eax
  0025c	75 e4		 jne	 SHORT $LN8@PyInit_par
$LN4@PyInit_par:

; 3397 :         Py_XDECREF(pickler);

  0025e	48 83 7c 24 40
	00		 cmp	 QWORD PTR pickler$23924[rsp], 0
  00264	74 0a		 je	 SHORT $LN1@PyInit_par
  00266	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pickler$23924[rsp]
  0026b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyInit_par:
  00270	33 c0		 xor	 eax, eax
  00272	85 c0		 test	 eax, eax
  00274	75 e8		 jne	 SHORT $LN4@PyInit_par

; 3398 :         Py_DECREF(copyreg);

  00276	48 8b 4c 24 30	 mov	 rcx, QWORD PTR copyreg$[rsp]
  0027b	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@PyInit_par:

; 3399 :     }
; 3400 :     return module;

  00280	48 8b 44 24 38	 mov	 rax, QWORD PTR module$[rsp]
$LN28@PyInit_par:

; 3401 : }

  00285	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00289	c3		 ret	 0
PyInit_parser ENDP
_TEXT	ENDS
END
