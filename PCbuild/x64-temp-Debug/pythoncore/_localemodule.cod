; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07KHCAGKLP@_locale?$AA@			; `string'
PUBLIC	??_C@_0BC@IFLEJNJD@_getdefaultlocale?$AA@	; `string'
PUBLIC	??_C@_07LGAGEEBC@strxfrm?$AA@			; `string'
PUBLIC	??_C@_07NDJNBCDA@strcoll?$AA@			; `string'
PUBLIC	??_C@_0L@FCBGCLP@localeconv?$AA@		; `string'
PUBLIC	??_C@_09IOBOFJNA@setlocale?$AA@			; `string'
;	COMDAT ??_C@_07KHCAGKLP@_locale?$AA@
CONST	SEGMENT
??_C@_07KHCAGKLP@_locale?$AA@ DB '_locale', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IFLEJNJD@_getdefaultlocale?$AA@
CONST	SEGMENT
??_C@_0BC@IFLEJNJD@_getdefaultlocale?$AA@ DB '_getdefaultlocale', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LGAGEEBC@strxfrm?$AA@
CONST	SEGMENT
??_C@_07LGAGEEBC@strxfrm?$AA@ DB 'strxfrm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NDJNBCDA@strcoll?$AA@
CONST	SEGMENT
??_C@_07NDJNBCDA@strcoll?$AA@ DB 'strcoll', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCBGCLP@localeconv?$AA@
CONST	SEGMENT
??_C@_0L@FCBGCLP@localeconv?$AA@ DB 'localeconv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOBOFJNA@setlocale?$AA@
CONST	SEGMENT
??_C@_09IOBOFJNA@setlocale?$AA@ DB 'setlocale', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
locale__doc__ DB 'Support for POSIX locales.', 00H
	ORG $+5
setlocale__doc__ DB '(integer,string=None) -> string. Activates/queries l'
	DB	'ocale processing.', 00H
	ORG $+10
localeconv__doc__ DB '() -> dict. Returns numeric and monetary locale-spe'
	DB	'cific parameters.', 00H
	ORG $+11
strcoll__doc__ DB 'string,string -> int. Compares two strings according t'
	DB	'o the locale.', 00H
	ORG $+12
strxfrm__doc__ DB 'strxfrm(string) -> string.', 0aH, 0aH, 'Return a strin'
	DB	'g that can be used as a key for locale-aware comparisons.', 00H
	ORG $+12
PyLocale_Methods DQ FLAT:??_C@_09IOBOFJNA@setlocale?$AA@
	DQ	FLAT:PyLocale_setlocale
	DD	01H
	ORG $+4
	DQ	FLAT:setlocale__doc__
	DQ	FLAT:??_C@_0L@FCBGCLP@localeconv?$AA@
	DQ	FLAT:PyLocale_localeconv
	DD	04H
	ORG $+4
	DQ	FLAT:localeconv__doc__
	DQ	FLAT:??_C@_07NDJNBCDA@strcoll?$AA@
	DQ	FLAT:PyLocale_strcoll
	DD	01H
	ORG $+4
	DQ	FLAT:strcoll__doc__
	DQ	FLAT:??_C@_07LGAGEEBC@strxfrm?$AA@
	DQ	FLAT:PyLocale_strxfrm
	DD	01H
	ORG $+4
	DQ	FLAT:strxfrm__doc__
	DQ	FLAT:??_C@_0BC@IFLEJNJD@_getdefaultlocale?$AA@
	DQ	FLAT:PyLocale_getdefaultlocale
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_localemodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07KHCAGKLP@_locale?$AA@
	DQ	FLAT:locale__doc__
	DQ	ffffffffffffffffH
	DQ	FLAT:PyLocale_Methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0BE@NDOIIFNL@locale?5query?5failed?$AA@	; `string'
PUBLIC	??_C@_0BL@JLONJDAP@unsupported?5locale?5setting?$AA@ ; `string'
PUBLIC	??_C@_0BI@ODLNMNJD@invalid?5locale?5category?$AA@ ; `string'
PUBLIC	??_C@_0O@LKFCIHHK@i?$HMz?3setlocale?$AA@	; `string'
EXTRN	PyUnicode_DecodeLocale:PROC
EXTRN	__imp_setlocale:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
_BSS	SEGMENT
Error	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\_localemodule.c
pdata	SEGMENT
$pdata$PyLocale_setlocale DD imagerel PyLocale_setlocale
	DD	imagerel PyLocale_setlocale+266
	DD	imagerel $unwind$PyLocale_setlocale
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyLocale_setlocale DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BE@NDOIIFNL@locale?5query?5failed?$AA@
CONST	SEGMENT
??_C@_0BE@NDOIIFNL@locale?5query?5failed?$AA@ DB 'locale query failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JLONJDAP@unsupported?5locale?5setting?$AA@
CONST	SEGMENT
??_C@_0BL@JLONJDAP@unsupported?5locale?5setting?$AA@ DB 'unsupported loca'
	DB	'le setting', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ODLNMNJD@invalid?5locale?5category?$AA@
CONST	SEGMENT
??_C@_0BI@ODLNMNJD@invalid?5locale?5category?$AA@ DB 'invalid locale cate'
	DB	'gory', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LKFCIHHK@i?$HMz?3setlocale?$AA@
CONST	SEGMENT
??_C@_0O@LKFCIHHK@i?$HMz?3setlocale?$AA@ DB 'i|z:setlocale', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyLocale_setlocale
_TEXT	SEGMENT
category$ = 32
locale$ = 40
result_object$ = 48
result$ = 56
self$ = 80
args$ = 88
PyLocale_setlocale PROC					; COMDAT

; 91   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 92   :     int category;
; 93   :     char *locale = NULL, *result;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR locale$[rsp], 0

; 94   :     PyObject *result_object;
; 95   : 
; 96   :     if (!PyArg_ParseTuple(args, "i|z:setlocale", &category, &locale))

  00017	4c 8d 4c 24 28	 lea	 r9, QWORD PTR locale$[rsp]
  0001c	4c 8d 44 24 20	 lea	 r8, QWORD PTR category$[rsp]
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LKFCIHHK@i?$HMz?3setlocale?$AA@
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00032	85 c0		 test	 eax, eax
  00034	75 07		 jne	 SHORT $LN8@PyLocale_s

; 97   :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 c8 00 00 00	 jmp	 $LN9@PyLocale_s
$LN8@PyLocale_s:

; 98   : 
; 99   : #if defined(MS_WINDOWS)
; 100  :     if (category < LC_MIN || category > LC_MAX)

  0003d	83 7c 24 20 00	 cmp	 DWORD PTR category$[rsp], 0
  00042	7c 07		 jl	 SHORT $LN6@PyLocale_s
  00044	83 7c 24 20 05	 cmp	 DWORD PTR category$[rsp], 5
  00049	7e 1a		 jle	 SHORT $LN7@PyLocale_s
$LN6@PyLocale_s:

; 101  :     {
; 102  :         PyErr_SetString(Error, "invalid locale category");

  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@ODLNMNJD@invalid?5locale?5category?$AA@
  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Error
  00059	e8 00 00 00 00	 call	 PyErr_SetString

; 103  :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	e9 a0 00 00 00	 jmp	 $LN9@PyLocale_s
$LN7@PyLocale_s:

; 104  :     }
; 105  : #endif
; 106  : 
; 107  :     if (locale) {

  00065	48 83 7c 24 28
	00		 cmp	 QWORD PTR locale$[rsp], 0
  0006b	74 52		 je	 SHORT $LN5@PyLocale_s

; 108  :         /* set locale */
; 109  :         result = setlocale(category, locale);

  0006d	48 8b 54 24 28	 mov	 rdx, QWORD PTR locale$[rsp]
  00072	8b 4c 24 20	 mov	 ecx, DWORD PTR category$[rsp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setlocale
  0007c	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 110  :         if (!result) {

  00081	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  00087	75 17		 jne	 SHORT $LN4@PyLocale_s

; 111  :             /* operation failed, no setting was changed */
; 112  :             PyErr_SetString(Error, "unsupported locale setting");

  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JLONJDAP@unsupported?5locale?5setting?$AA@
  00090	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Error
  00097	e8 00 00 00 00	 call	 PyErr_SetString

; 113  :             return NULL;

  0009c	33 c0		 xor	 eax, eax
  0009e	eb 65		 jmp	 SHORT $LN9@PyLocale_s
$LN4@PyLocale_s:

; 114  :         }
; 115  :         result_object = PyUnicode_DecodeLocale(result, NULL);

  000a0	33 d2		 xor	 edx, edx
  000a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  000a7	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  000ac	48 89 44 24 30	 mov	 QWORD PTR result_object$[rsp], rax

; 116  :         if (!result_object)

  000b1	48 83 7c 24 30
	00		 cmp	 QWORD PTR result_object$[rsp], 0
  000b7	75 04		 jne	 SHORT $LN3@PyLocale_s

; 117  :             return NULL;

  000b9	33 c0		 xor	 eax, eax
  000bb	eb 48		 jmp	 SHORT $LN9@PyLocale_s
$LN3@PyLocale_s:

; 118  :     } else {

  000bd	eb 41		 jmp	 SHORT $LN2@PyLocale_s
$LN5@PyLocale_s:

; 119  :         /* get locale */
; 120  :         result = setlocale(category, NULL);

  000bf	33 d2		 xor	 edx, edx
  000c1	8b 4c 24 20	 mov	 ecx, DWORD PTR category$[rsp]
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setlocale
  000cb	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 121  :         if (!result) {

  000d0	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  000d6	75 17		 jne	 SHORT $LN1@PyLocale_s

; 122  :             PyErr_SetString(Error, "locale query failed");

  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NDOIIFNL@locale?5query?5failed?$AA@
  000df	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Error
  000e6	e8 00 00 00 00	 call	 PyErr_SetString

; 123  :             return NULL;

  000eb	33 c0		 xor	 eax, eax
  000ed	eb 16		 jmp	 SHORT $LN9@PyLocale_s
$LN1@PyLocale_s:

; 124  :         }
; 125  :         result_object = PyUnicode_DecodeLocale(result, NULL);

  000ef	33 d2		 xor	 edx, edx
  000f1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  000f6	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  000fb	48 89 44 24 30	 mov	 QWORD PTR result_object$[rsp], rax
$LN2@PyLocale_s:

; 126  :     }
; 127  :     return result_object;

  00100	48 8b 44 24 30	 mov	 rax, QWORD PTR result_object$[rsp]
$LN9@PyLocale_s:

; 128  : }

  00105	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00109	c3		 ret	 0
PyLocale_setlocale ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@IIJABFIC@n_sign_posn?$AA@		; `string'
PUBLIC	??_C@_0M@GNLJCLGA@p_sign_posn?$AA@		; `string'
PUBLIC	??_C@_0P@EGPOAFBL@n_sep_by_space?$AA@		; `string'
PUBLIC	??_C@_0O@NBELBJAD@n_cs_precedes?$AA@		; `string'
PUBLIC	??_C@_0P@OPOPICCB@p_sep_by_space?$AA@		; `string'
PUBLIC	??_C@_0O@HMGCHAOP@p_cs_precedes?$AA@		; `string'
PUBLIC	??_C@_0M@FIBCOHAG@frac_digits?$AA@		; `string'
PUBLIC	??_C@_0BA@FJDCGKOJ@int_frac_digits?$AA@		; `string'
PUBLIC	??_C@_0O@LIPPBDND@negative_sign?$AA@		; `string'
PUBLIC	??_C@_0O@JKFECLNP@positive_sign?$AA@		; `string'
PUBLIC	??_C@_0N@IOEAAJCN@mon_grouping?$AA@		; `string'
PUBLIC	??_C@_0BC@ELBDBOMN@mon_thousands_sep?$AA@	; `string'
PUBLIC	??_C@_0BC@GKGFEJOK@mon_decimal_point?$AA@	; `string'
PUBLIC	??_C@_0BA@DENJGIBD@currency_symbol?$AA@		; `string'
PUBLIC	??_C@_0BA@HOLPBJNH@int_curr_symbol?$AA@		; `string'
PUBLIC	??_C@_08DOJJHCKD@grouping?$AA@			; `string'
PUBLIC	??_C@_0O@JPGGJHKE@thousands_sep?$AA@		; `string'
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0O@LOBAMAID@decimal_point?$AA@		; `string'
EXTRN	PyLong_FromLong:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	__imp_localeconv:PROC
EXTRN	PyDict_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyLocale_localeconv DD imagerel PyLocale_localeconv
	DD	imagerel PyLocale_localeconv+1539
	DD	imagerel $unwind$PyLocale_localeconv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyLocale_localeconv DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0M@IIJABFIC@n_sign_posn?$AA@
CONST	SEGMENT
??_C@_0M@IIJABFIC@n_sign_posn?$AA@ DB 'n_sign_posn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GNLJCLGA@p_sign_posn?$AA@
CONST	SEGMENT
??_C@_0M@GNLJCLGA@p_sign_posn?$AA@ DB 'p_sign_posn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EGPOAFBL@n_sep_by_space?$AA@
CONST	SEGMENT
??_C@_0P@EGPOAFBL@n_sep_by_space?$AA@ DB 'n_sep_by_space', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NBELBJAD@n_cs_precedes?$AA@
CONST	SEGMENT
??_C@_0O@NBELBJAD@n_cs_precedes?$AA@ DB 'n_cs_precedes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OPOPICCB@p_sep_by_space?$AA@
CONST	SEGMENT
??_C@_0P@OPOPICCB@p_sep_by_space?$AA@ DB 'p_sep_by_space', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HMGCHAOP@p_cs_precedes?$AA@
CONST	SEGMENT
??_C@_0O@HMGCHAOP@p_cs_precedes?$AA@ DB 'p_cs_precedes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FIBCOHAG@frac_digits?$AA@
CONST	SEGMENT
??_C@_0M@FIBCOHAG@frac_digits?$AA@ DB 'frac_digits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FJDCGKOJ@int_frac_digits?$AA@
CONST	SEGMENT
??_C@_0BA@FJDCGKOJ@int_frac_digits?$AA@ DB 'int_frac_digits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LIPPBDND@negative_sign?$AA@
CONST	SEGMENT
??_C@_0O@LIPPBDND@negative_sign?$AA@ DB 'negative_sign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JKFECLNP@positive_sign?$AA@
CONST	SEGMENT
??_C@_0O@JKFECLNP@positive_sign?$AA@ DB 'positive_sign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IOEAAJCN@mon_grouping?$AA@
CONST	SEGMENT
??_C@_0N@IOEAAJCN@mon_grouping?$AA@ DB 'mon_grouping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ELBDBOMN@mon_thousands_sep?$AA@
CONST	SEGMENT
??_C@_0BC@ELBDBOMN@mon_thousands_sep?$AA@ DB 'mon_thousands_sep', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GKGFEJOK@mon_decimal_point?$AA@
CONST	SEGMENT
??_C@_0BC@GKGFEJOK@mon_decimal_point?$AA@ DB 'mon_decimal_point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DENJGIBD@currency_symbol?$AA@
CONST	SEGMENT
??_C@_0BA@DENJGIBD@currency_symbol?$AA@ DB 'currency_symbol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HOLPBJNH@int_curr_symbol?$AA@
CONST	SEGMENT
??_C@_0BA@HOLPBJNH@int_curr_symbol?$AA@ DB 'int_curr_symbol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOJJHCKD@grouping?$AA@
CONST	SEGMENT
??_C@_08DOJJHCKD@grouping?$AA@ DB 'grouping', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JPGGJHKE@thousands_sep?$AA@
CONST	SEGMENT
??_C@_0O@JPGGJHKE@thousands_sep?$AA@ DB 'thousands_sep', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LOBAMAID@decimal_point?$AA@
CONST	SEGMENT
??_C@_0O@LOBAMAID@decimal_point?$AA@ DB 'decimal_point', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyLocale_localeconv
_TEXT	SEGMENT
x$ = 32
l$ = 40
result$ = 48
self$ = 80
PyLocale_localeconv PROC				; COMDAT

; 135  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 136  :     PyObject* result;
; 137  :     struct lconv *l;
; 138  :     PyObject *x;
; 139  : 
; 140  :     result = PyDict_New();

  00009	e8 00 00 00 00	 call	 PyDict_New
  0000e	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 141  :     if (!result)

  00013	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  00019	75 07		 jne	 SHORT $LN99@PyLocale_l

; 142  :         return NULL;

  0001b	33 c0		 xor	 eax, eax
  0001d	e9 dc 05 00 00	 jmp	 $LN100@PyLocale_l
$LN99@PyLocale_l:

; 143  : 
; 144  :     /* if LC_NUMERIC is different in the C library, use saved value */
; 145  :     l = localeconv();

  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_localeconv
  00028	48 89 44 24 28	 mov	 QWORD PTR l$[rsp], rax

; 146  : 
; 147  :     /* hopefully, the localeconv result survives the C library calls
; 148  :        involved herein */
; 149  : 
; 150  : #define RESULT_STRING(s)\
; 151  :     x = PyUnicode_DecodeLocale(l->s, NULL);   \
; 152  :     if (!x) goto failed;\
; 153  :     PyDict_SetItemString(result, #s, x);\
; 154  :     Py_XDECREF(x)
; 155  : 
; 156  : #define RESULT_INT(i)\
; 157  :     x = PyLong_FromLong(l->i);\
; 158  :     if (!x) goto failed;\
; 159  :     PyDict_SetItemString(result, #i, x);\
; 160  :     Py_XDECREF(x)
; 161  : 
; 162  :     /* Numeric information */
; 163  :     RESULT_STRING(decimal_point);

  0002d	33 d2		 xor	 edx, edx
  0002f	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  00034	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00037	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  0003c	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  00041	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00047	75 05		 jne	 SHORT $LN98@PyLocale_l
  00049	e9 7e 05 00 00	 jmp	 $failed$63739
$LN98@PyLocale_l:
  0004e	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LOBAMAID@decimal_point?$AA@
  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0005f	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN97@PyLocale_l:
  00064	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  0006a	74 0a		 je	 SHORT $LN94@PyLocale_l
  0006c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00071	e8 00 00 00 00	 call	 _Py_DecRef
$LN94@PyLocale_l:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 e8		 jne	 SHORT $LN97@PyLocale_l

; 164  :     RESULT_STRING(thousands_sep);

  0007c	33 d2		 xor	 edx, edx
  0007e	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  00083	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00087	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  0008c	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  00091	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00097	75 05		 jne	 SHORT $LN93@PyLocale_l
  00099	e9 2e 05 00 00	 jmp	 $failed$63739
$LN93@PyLocale_l:
  0009e	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@JPGGJHKE@thousands_sep?$AA@
  000aa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  000af	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN92@PyLocale_l:
  000b4	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  000ba	74 0a		 je	 SHORT $LN89@PyLocale_l
  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef
$LN89@PyLocale_l:
  000c6	33 c0		 xor	 eax, eax
  000c8	85 c0		 test	 eax, eax
  000ca	75 e8		 jne	 SHORT $LN92@PyLocale_l

; 165  :     x = copy_grouping(l->grouping);

  000cc	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  000d1	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  000d5	e8 00 00 00 00	 call	 copy_grouping
  000da	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 166  :     if (!x)

  000df	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  000e5	75 05		 jne	 SHORT $LN88@PyLocale_l

; 167  :         goto failed;

  000e7	e9 e0 04 00 00	 jmp	 $failed$63739
$LN88@PyLocale_l:

; 168  :     PyDict_SetItemString(result, "grouping", x);

  000ec	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  000f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DOJJHCKD@grouping?$AA@
  000f8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  000fd	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN87@PyLocale_l:

; 169  :     Py_XDECREF(x);

  00102	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00108	74 0a		 je	 SHORT $LN84@PyLocale_l
  0010a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0010f	e8 00 00 00 00	 call	 _Py_DecRef
$LN84@PyLocale_l:
  00114	33 c0		 xor	 eax, eax
  00116	85 c0		 test	 eax, eax
  00118	75 e8		 jne	 SHORT $LN87@PyLocale_l

; 170  : 
; 171  :     /* Monetary information */
; 172  :     RESULT_STRING(int_curr_symbol);

  0011a	33 d2		 xor	 edx, edx
  0011c	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  00121	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00125	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  0012a	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  0012f	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00135	75 05		 jne	 SHORT $LN83@PyLocale_l
  00137	e9 90 04 00 00	 jmp	 $failed$63739
$LN83@PyLocale_l:
  0013c	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  00141	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@HOLPBJNH@int_curr_symbol?$AA@
  00148	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0014d	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN82@PyLocale_l:
  00152	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00158	74 0a		 je	 SHORT $LN79@PyLocale_l
  0015a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0015f	e8 00 00 00 00	 call	 _Py_DecRef
$LN79@PyLocale_l:
  00164	33 c0		 xor	 eax, eax
  00166	85 c0		 test	 eax, eax
  00168	75 e8		 jne	 SHORT $LN82@PyLocale_l

; 173  :     RESULT_STRING(currency_symbol);

  0016a	33 d2		 xor	 edx, edx
  0016c	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  00171	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00175	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  0017a	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  0017f	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00185	75 05		 jne	 SHORT $LN78@PyLocale_l
  00187	e9 40 04 00 00	 jmp	 $failed$63739
$LN78@PyLocale_l:
  0018c	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  00191	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DENJGIBD@currency_symbol?$AA@
  00198	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0019d	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN77@PyLocale_l:
  001a2	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  001a8	74 0a		 je	 SHORT $LN74@PyLocale_l
  001aa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  001af	e8 00 00 00 00	 call	 _Py_DecRef
$LN74@PyLocale_l:
  001b4	33 c0		 xor	 eax, eax
  001b6	85 c0		 test	 eax, eax
  001b8	75 e8		 jne	 SHORT $LN77@PyLocale_l

; 174  :     RESULT_STRING(mon_decimal_point);

  001ba	33 d2		 xor	 edx, edx
  001bc	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  001c1	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  001c5	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  001ca	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  001cf	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  001d5	75 05		 jne	 SHORT $LN73@PyLocale_l
  001d7	e9 f0 03 00 00	 jmp	 $failed$63739
$LN73@PyLocale_l:
  001dc	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  001e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@GKGFEJOK@mon_decimal_point?$AA@
  001e8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  001ed	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN72@PyLocale_l:
  001f2	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  001f8	74 0a		 je	 SHORT $LN69@PyLocale_l
  001fa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  001ff	e8 00 00 00 00	 call	 _Py_DecRef
$LN69@PyLocale_l:
  00204	33 c0		 xor	 eax, eax
  00206	85 c0		 test	 eax, eax
  00208	75 e8		 jne	 SHORT $LN72@PyLocale_l

; 175  :     RESULT_STRING(mon_thousands_sep);

  0020a	33 d2		 xor	 edx, edx
  0020c	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  00211	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00215	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  0021a	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  0021f	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00225	75 05		 jne	 SHORT $LN68@PyLocale_l
  00227	e9 a0 03 00 00	 jmp	 $failed$63739
$LN68@PyLocale_l:
  0022c	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  00231	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@ELBDBOMN@mon_thousands_sep?$AA@
  00238	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0023d	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN67@PyLocale_l:
  00242	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00248	74 0a		 je	 SHORT $LN64@PyLocale_l
  0024a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0024f	e8 00 00 00 00	 call	 _Py_DecRef
$LN64@PyLocale_l:
  00254	33 c0		 xor	 eax, eax
  00256	85 c0		 test	 eax, eax
  00258	75 e8		 jne	 SHORT $LN67@PyLocale_l

; 176  :     x = copy_grouping(l->mon_grouping);

  0025a	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  0025f	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00263	e8 00 00 00 00	 call	 copy_grouping
  00268	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 177  :     if (!x)

  0026d	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00273	75 05		 jne	 SHORT $LN63@PyLocale_l

; 178  :         goto failed;

  00275	e9 52 03 00 00	 jmp	 $failed$63739
$LN63@PyLocale_l:

; 179  :     PyDict_SetItemString(result, "mon_grouping", x);

  0027a	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  0027f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@IOEAAJCN@mon_grouping?$AA@
  00286	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0028b	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN62@PyLocale_l:

; 180  :     Py_XDECREF(x);

  00290	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00296	74 0a		 je	 SHORT $LN59@PyLocale_l
  00298	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0029d	e8 00 00 00 00	 call	 _Py_DecRef
$LN59@PyLocale_l:
  002a2	33 c0		 xor	 eax, eax
  002a4	85 c0		 test	 eax, eax
  002a6	75 e8		 jne	 SHORT $LN62@PyLocale_l

; 181  :     RESULT_STRING(positive_sign);

  002a8	33 d2		 xor	 edx, edx
  002aa	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  002af	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  002b3	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  002b8	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  002bd	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  002c3	75 05		 jne	 SHORT $LN58@PyLocale_l
  002c5	e9 02 03 00 00	 jmp	 $failed$63739
$LN58@PyLocale_l:
  002ca	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  002cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@JKFECLNP@positive_sign?$AA@
  002d6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  002db	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN57@PyLocale_l:
  002e0	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  002e6	74 0a		 je	 SHORT $LN54@PyLocale_l
  002e8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  002ed	e8 00 00 00 00	 call	 _Py_DecRef
$LN54@PyLocale_l:
  002f2	33 c0		 xor	 eax, eax
  002f4	85 c0		 test	 eax, eax
  002f6	75 e8		 jne	 SHORT $LN57@PyLocale_l

; 182  :     RESULT_STRING(negative_sign);

  002f8	33 d2		 xor	 edx, edx
  002fa	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  002ff	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00303	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  00308	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  0030d	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00313	75 05		 jne	 SHORT $LN53@PyLocale_l
  00315	e9 b2 02 00 00	 jmp	 $failed$63739
$LN53@PyLocale_l:
  0031a	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  0031f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LIPPBDND@negative_sign?$AA@
  00326	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0032b	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN52@PyLocale_l:
  00330	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00336	74 0a		 je	 SHORT $LN49@PyLocale_l
  00338	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0033d	e8 00 00 00 00	 call	 _Py_DecRef
$LN49@PyLocale_l:
  00342	33 c0		 xor	 eax, eax
  00344	85 c0		 test	 eax, eax
  00346	75 e8		 jne	 SHORT $LN52@PyLocale_l

; 183  :     RESULT_INT(int_frac_digits);

  00348	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  0034d	0f be 40 50	 movsx	 eax, BYTE PTR [rax+80]
  00351	8b c8		 mov	 ecx, eax
  00353	e8 00 00 00 00	 call	 PyLong_FromLong
  00358	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  0035d	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00363	75 05		 jne	 SHORT $LN48@PyLocale_l
  00365	e9 62 02 00 00	 jmp	 $failed$63739
$LN48@PyLocale_l:
  0036a	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  0036f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@FJDCGKOJ@int_frac_digits?$AA@
  00376	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0037b	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN47@PyLocale_l:
  00380	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00386	74 0a		 je	 SHORT $LN44@PyLocale_l
  00388	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0038d	e8 00 00 00 00	 call	 _Py_DecRef
$LN44@PyLocale_l:
  00392	33 c0		 xor	 eax, eax
  00394	85 c0		 test	 eax, eax
  00396	75 e8		 jne	 SHORT $LN47@PyLocale_l

; 184  :     RESULT_INT(frac_digits);

  00398	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  0039d	0f be 40 51	 movsx	 eax, BYTE PTR [rax+81]
  003a1	8b c8		 mov	 ecx, eax
  003a3	e8 00 00 00 00	 call	 PyLong_FromLong
  003a8	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  003ad	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  003b3	75 05		 jne	 SHORT $LN43@PyLocale_l
  003b5	e9 12 02 00 00	 jmp	 $failed$63739
$LN43@PyLocale_l:
  003ba	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  003bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@FIBCOHAG@frac_digits?$AA@
  003c6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  003cb	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN42@PyLocale_l:
  003d0	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  003d6	74 0a		 je	 SHORT $LN39@PyLocale_l
  003d8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  003dd	e8 00 00 00 00	 call	 _Py_DecRef
$LN39@PyLocale_l:
  003e2	33 c0		 xor	 eax, eax
  003e4	85 c0		 test	 eax, eax
  003e6	75 e8		 jne	 SHORT $LN42@PyLocale_l

; 185  :     RESULT_INT(p_cs_precedes);

  003e8	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  003ed	0f be 40 52	 movsx	 eax, BYTE PTR [rax+82]
  003f1	8b c8		 mov	 ecx, eax
  003f3	e8 00 00 00 00	 call	 PyLong_FromLong
  003f8	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  003fd	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00403	75 05		 jne	 SHORT $LN38@PyLocale_l
  00405	e9 c2 01 00 00	 jmp	 $failed$63739
$LN38@PyLocale_l:
  0040a	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  0040f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@HMGCHAOP@p_cs_precedes?$AA@
  00416	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0041b	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN37@PyLocale_l:
  00420	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00426	74 0a		 je	 SHORT $LN34@PyLocale_l
  00428	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0042d	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@PyLocale_l:
  00432	33 c0		 xor	 eax, eax
  00434	85 c0		 test	 eax, eax
  00436	75 e8		 jne	 SHORT $LN37@PyLocale_l

; 186  :     RESULT_INT(p_sep_by_space);

  00438	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  0043d	0f be 40 53	 movsx	 eax, BYTE PTR [rax+83]
  00441	8b c8		 mov	 ecx, eax
  00443	e8 00 00 00 00	 call	 PyLong_FromLong
  00448	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  0044d	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00453	75 05		 jne	 SHORT $LN33@PyLocale_l
  00455	e9 72 01 00 00	 jmp	 $failed$63739
$LN33@PyLocale_l:
  0045a	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  0045f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@OPOPICCB@p_sep_by_space?$AA@
  00466	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0046b	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN32@PyLocale_l:
  00470	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00476	74 0a		 je	 SHORT $LN29@PyLocale_l
  00478	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0047d	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@PyLocale_l:
  00482	33 c0		 xor	 eax, eax
  00484	85 c0		 test	 eax, eax
  00486	75 e8		 jne	 SHORT $LN32@PyLocale_l

; 187  :     RESULT_INT(n_cs_precedes);

  00488	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  0048d	0f be 40 54	 movsx	 eax, BYTE PTR [rax+84]
  00491	8b c8		 mov	 ecx, eax
  00493	e8 00 00 00 00	 call	 PyLong_FromLong
  00498	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  0049d	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  004a3	75 05		 jne	 SHORT $LN28@PyLocale_l
  004a5	e9 22 01 00 00	 jmp	 $failed$63739
$LN28@PyLocale_l:
  004aa	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  004af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@NBELBJAD@n_cs_precedes?$AA@
  004b6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  004bb	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN27@PyLocale_l:
  004c0	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  004c6	74 0a		 je	 SHORT $LN24@PyLocale_l
  004c8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  004cd	e8 00 00 00 00	 call	 _Py_DecRef
$LN24@PyLocale_l:
  004d2	33 c0		 xor	 eax, eax
  004d4	85 c0		 test	 eax, eax
  004d6	75 e8		 jne	 SHORT $LN27@PyLocale_l

; 188  :     RESULT_INT(n_sep_by_space);

  004d8	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  004dd	0f be 40 55	 movsx	 eax, BYTE PTR [rax+85]
  004e1	8b c8		 mov	 ecx, eax
  004e3	e8 00 00 00 00	 call	 PyLong_FromLong
  004e8	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  004ed	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  004f3	75 05		 jne	 SHORT $LN23@PyLocale_l
  004f5	e9 d2 00 00 00	 jmp	 $failed$63739
$LN23@PyLocale_l:
  004fa	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  004ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EGPOAFBL@n_sep_by_space?$AA@
  00506	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0050b	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN22@PyLocale_l:
  00510	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00516	74 0a		 je	 SHORT $LN19@PyLocale_l
  00518	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0051d	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@PyLocale_l:
  00522	33 c0		 xor	 eax, eax
  00524	85 c0		 test	 eax, eax
  00526	75 e8		 jne	 SHORT $LN22@PyLocale_l

; 189  :     RESULT_INT(p_sign_posn);

  00528	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  0052d	0f be 40 56	 movsx	 eax, BYTE PTR [rax+86]
  00531	8b c8		 mov	 ecx, eax
  00533	e8 00 00 00 00	 call	 PyLong_FromLong
  00538	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  0053d	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00543	75 05		 jne	 SHORT $LN18@PyLocale_l
  00545	e9 82 00 00 00	 jmp	 $failed$63739
$LN18@PyLocale_l:
  0054a	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  0054f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GNLJCLGA@p_sign_posn?$AA@
  00556	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0055b	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN17@PyLocale_l:
  00560	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00566	74 0a		 je	 SHORT $LN14@PyLocale_l
  00568	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0056d	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@PyLocale_l:
  00572	33 c0		 xor	 eax, eax
  00574	85 c0		 test	 eax, eax
  00576	75 e8		 jne	 SHORT $LN17@PyLocale_l

; 190  :     RESULT_INT(n_sign_posn);

  00578	48 8b 44 24 28	 mov	 rax, QWORD PTR l$[rsp]
  0057d	0f be 40 57	 movsx	 eax, BYTE PTR [rax+87]
  00581	8b c8		 mov	 ecx, eax
  00583	e8 00 00 00 00	 call	 PyLong_FromLong
  00588	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  0058d	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00593	75 02		 jne	 SHORT $LN13@PyLocale_l
  00595	eb 35		 jmp	 SHORT $failed$63739
$LN13@PyLocale_l:
  00597	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  0059c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IIJABFIC@n_sign_posn?$AA@
  005a3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  005a8	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN12@PyLocale_l:
  005ad	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  005b3	74 0a		 je	 SHORT $LN9@PyLocale_l
  005b5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  005ba	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyLocale_l:
  005bf	33 c0		 xor	 eax, eax
  005c1	85 c0		 test	 eax, eax
  005c3	75 e8		 jne	 SHORT $LN12@PyLocale_l

; 191  :     return result;

  005c5	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  005ca	eb 32		 jmp	 SHORT $LN100@PyLocale_l
$failed$63739:
$LN8@PyLocale_l:

; 192  : 
; 193  :   failed:
; 194  :     Py_XDECREF(result);

  005cc	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  005d2	74 0a		 je	 SHORT $LN5@PyLocale_l
  005d4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  005d9	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyLocale_l:
  005de	33 c0		 xor	 eax, eax
  005e0	85 c0		 test	 eax, eax
  005e2	75 e8		 jne	 SHORT $LN8@PyLocale_l
$LN4@PyLocale_l:

; 195  :     Py_XDECREF(x);

  005e4	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  005ea	74 0a		 je	 SHORT $LN1@PyLocale_l
  005ec	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  005f1	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyLocale_l:
  005f6	33 c0		 xor	 eax, eax
  005f8	85 c0		 test	 eax, eax
  005fa	75 e8		 jne	 SHORT $LN4@PyLocale_l

; 196  :     return NULL;

  005fc	33 c0		 xor	 eax, eax
$LN100@PyLocale_l:

; 197  : }

  005fe	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00602	c3		 ret	 0
PyLocale_localeconv ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyList_SetItem:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_localemodule.c
pdata	SEGMENT
$pdata$copy_grouping DD imagerel copy_grouping
	DD	imagerel copy_grouping+312
	DD	imagerel $unwind$copy_grouping
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$copy_grouping DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT copy_grouping
_TEXT	SEGMENT
i$ = 32
val$ = 40
result$ = 48
s$ = 80
copy_grouping PROC					; COMDAT

; 53   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 54   :     int i;
; 55   :     PyObject *result, *val = NULL;

  00009	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR val$[rsp], 0

; 56   : 
; 57   :     if (s[0] == '\0')

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00017	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0001a	85 c0		 test	 eax, eax
  0001c	75 0c		 jne	 SHORT $LN12@copy_group

; 58   :         /* empty string: no grouping at all */
; 59   :         return PyList_New(0);

  0001e	33 c9		 xor	 ecx, ecx
  00020	e8 00 00 00 00	 call	 PyList_New
  00025	e9 09 01 00 00	 jmp	 $LN13@copy_group
$LN12@copy_group:

; 60   : 
; 61   :     for (i = 0; s[i] != '\0' && s[i] != CHAR_MAX; i++)

  0002a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00032	eb 0a		 jmp	 SHORT $LN11@copy_group
$LN10@copy_group:
  00034	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00038	ff c0		 inc	 eax
  0003a	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN11@copy_group:
  0003e	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00048	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0004c	85 c0		 test	 eax, eax
  0004e	74 15		 je	 SHORT $LN9@copy_group
  00050	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0005a	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0005e	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00061	74 02		 je	 SHORT $LN9@copy_group

; 62   :         ; /* nothing */

  00063	eb cf		 jmp	 SHORT $LN10@copy_group
$LN9@copy_group:

; 63   : 
; 64   :     result = PyList_New(i+1);

  00065	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00069	ff c0		 inc	 eax
  0006b	48 98		 cdqe
  0006d	48 8b c8	 mov	 rcx, rax
  00070	e8 00 00 00 00	 call	 PyList_New
  00075	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 65   :     if (!result)

  0007a	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  00080	75 07		 jne	 SHORT $LN8@copy_group

; 66   :         return NULL;

  00082	33 c0		 xor	 eax, eax
  00084	e9 aa 00 00 00	 jmp	 $LN13@copy_group
$LN8@copy_group:

; 67   : 
; 68   :     i = -1;

  00089	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR i$[rsp], -1
$LN7@copy_group:

; 69   :     do {
; 70   :         i++;

  00091	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00095	ff c0		 inc	 eax
  00097	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax

; 71   :         val = PyLong_FromLong(s[i]);

  0009b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000a5	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000a9	8b c8		 mov	 ecx, eax
  000ab	e8 00 00 00 00	 call	 PyLong_FromLong
  000b0	48 89 44 24 28	 mov	 QWORD PTR val$[rsp], rax

; 72   :         if (!val)

  000b5	48 83 7c 24 28
	00		 cmp	 QWORD PTR val$[rsp], 0
  000bb	75 02		 jne	 SHORT $LN4@copy_group

; 73   :             break;

  000bd	eb 59		 jmp	 SHORT $LN5@copy_group
$LN4@copy_group:

; 74   :         if (PyList_SetItem(result, i, val)) {

  000bf	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000c4	4c 8b 44 24 28	 mov	 r8, QWORD PTR val$[rsp]
  000c9	48 8b d0	 mov	 rdx, rax
  000cc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  000d1	e8 00 00 00 00	 call	 PyList_SetItem
  000d6	85 c0		 test	 eax, eax
  000d8	74 15		 je	 SHORT $LN3@copy_group

; 75   :             Py_DECREF(val);

  000da	48 8b 4c 24 28	 mov	 rcx, QWORD PTR val$[rsp]
  000df	e8 00 00 00 00	 call	 _Py_DecRef

; 76   :             val = NULL;

  000e4	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR val$[rsp], 0

; 77   :             break;

  000ed	eb 29		 jmp	 SHORT $LN5@copy_group
$LN3@copy_group:

; 78   :         }
; 79   :     } while (s[i] != '\0' && s[i] != CHAR_MAX);

  000ef	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000f4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000f9	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000fd	85 c0		 test	 eax, eax
  000ff	74 17		 je	 SHORT $LN2@copy_group
  00101	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00106	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0010b	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0010f	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00112	0f 85 79 ff ff
	ff		 jne	 $LN7@copy_group
$LN2@copy_group:
$LN5@copy_group:

; 80   : 
; 81   :     if (!val) {

  00118	48 83 7c 24 28
	00		 cmp	 QWORD PTR val$[rsp], 0
  0011e	75 0e		 jne	 SHORT $LN1@copy_group

; 82   :         Py_DECREF(result);

  00120	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  00125	e8 00 00 00 00	 call	 _Py_DecRef

; 83   :         return NULL;

  0012a	33 c0		 xor	 eax, eax
  0012c	eb 05		 jmp	 SHORT $LN13@copy_group
$LN1@copy_group:

; 84   :     }
; 85   : 
; 86   :     return result;

  0012e	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
$LN13@copy_group:

; 87   : }

  00133	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00137	c3		 ret	 0
copy_grouping ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DAPDAKJD@UU?3strcoll?$AA@		; `string'
EXTRN	_PyMem_DebugFree:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	__imp_wcscoll:PROC
EXTRN	PyUnicode_AsWideCharString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyLocale_strcoll DD imagerel PyLocale_strcoll
	DD	imagerel PyLocale_strcoll+281
	DD	imagerel $unwind$PyLocale_strcoll
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyLocale_strcoll DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0L@DAPDAKJD@UU?3strcoll?$AA@
CONST	SEGMENT
??_C@_0L@DAPDAKJD@UU?3strcoll?$AA@ DB 'UU:strcoll', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyLocale_strcoll
_TEXT	SEGMENT
ws1$ = 32
ws2$ = 40
os2$ = 48
result$ = 56
os1$ = 64
tv88 = 72
tv94 = 76
self$ = 96
args$ = 104
PyLocale_strcoll PROC					; COMDAT

; 205  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 206  :     PyObject *os1, *os2, *result = NULL;

  0000e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 207  :     wchar_t *ws1 = NULL, *ws2 = NULL;

  00017	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR ws1$[rsp], 0
  00020	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR ws2$[rsp], 0

; 208  : 
; 209  :     if (!PyArg_ParseTuple(args, "UU:strcoll", &os1, &os2))

  00029	4c 8d 4c 24 30	 lea	 r9, QWORD PTR os2$[rsp]
  0002e	4c 8d 44 24 40	 lea	 r8, QWORD PTR os1$[rsp]
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DAPDAKJD@UU?3strcoll?$AA@
  0003a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0003f	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00044	85 c0		 test	 eax, eax
  00046	75 07		 jne	 SHORT $LN5@PyLocale_s@2

; 210  :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 c5 00 00 00	 jmp	 $LN6@PyLocale_s@2
$LN5@PyLocale_s@2:

; 211  :     /* Convert the unicode strings to wchar[]. */
; 212  :     ws1 = PyUnicode_AsWideCharString(os1, NULL);

  0004f	33 d2		 xor	 edx, edx
  00051	48 8b 4c 24 40	 mov	 rcx, QWORD PTR os1$[rsp]
  00056	e8 00 00 00 00	 call	 PyUnicode_AsWideCharString
  0005b	48 89 44 24 20	 mov	 QWORD PTR ws1$[rsp], rax

; 213  :     if (ws1 == NULL)

  00060	48 83 7c 24 20
	00		 cmp	 QWORD PTR ws1$[rsp], 0
  00066	75 02		 jne	 SHORT $LN4@PyLocale_s@2

; 214  :         goto done;

  00068	eb 37		 jmp	 SHORT $done$63904
$LN4@PyLocale_s@2:

; 215  :     ws2 = PyUnicode_AsWideCharString(os2, NULL);

  0006a	33 d2		 xor	 edx, edx
  0006c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR os2$[rsp]
  00071	e8 00 00 00 00	 call	 PyUnicode_AsWideCharString
  00076	48 89 44 24 28	 mov	 QWORD PTR ws2$[rsp], rax

; 216  :     if (ws2 == NULL)

  0007b	48 83 7c 24 28
	00		 cmp	 QWORD PTR ws2$[rsp], 0
  00081	75 02		 jne	 SHORT $LN3@PyLocale_s@2

; 217  :         goto done;

  00083	eb 1c		 jmp	 SHORT $done$63904
$LN3@PyLocale_s@2:

; 218  :     /* Collate the strings. */
; 219  :     result = PyLong_FromLong(wcscoll(ws1, ws2));

  00085	48 8b 54 24 28	 mov	 rdx, QWORD PTR ws2$[rsp]
  0008a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ws1$[rsp]
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcscoll
  00095	8b c8		 mov	 ecx, eax
  00097	e8 00 00 00 00	 call	 PyLong_FromLong
  0009c	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax
$done$63904:

; 220  :   done:
; 221  :     /* Deallocate everything. */
; 222  :     if (ws1) PyMem_FREE(ws1);

  000a1	48 83 7c 24 20
	00		 cmp	 QWORD PTR ws1$[rsp], 0
  000a7	74 2f		 je	 SHORT $LN2@PyLocale_s@2
  000a9	e8 00 00 00 00	 call	 _Py_PXCTX
  000ae	85 c0		 test	 eax, eax
  000b0	74 14		 je	 SHORT $LN8@PyLocale_s@2
  000b2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ws1$[rsp]
  000b7	e8 00 00 00 00	 call	 _PxMem_Free
  000bc	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
  000c4	eb 12		 jmp	 SHORT $LN9@PyLocale_s@2
$LN8@PyLocale_s@2:
  000c6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ws1$[rsp]
  000cb	e8 00 00 00 00	 call	 _PyMem_DebugFree
  000d0	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN9@PyLocale_s@2:
$LN2@PyLocale_s@2:

; 223  :     if (ws2) PyMem_FREE(ws2);

  000d8	48 83 7c 24 28
	00		 cmp	 QWORD PTR ws2$[rsp], 0
  000de	74 2f		 je	 SHORT $LN1@PyLocale_s@2
  000e0	e8 00 00 00 00	 call	 _Py_PXCTX
  000e5	85 c0		 test	 eax, eax
  000e7	74 14		 je	 SHORT $LN10@PyLocale_s@2
  000e9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ws2$[rsp]
  000ee	e8 00 00 00 00	 call	 _PxMem_Free
  000f3	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
  000fb	eb 12		 jmp	 SHORT $LN11@PyLocale_s@2
$LN10@PyLocale_s@2:
  000fd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ws2$[rsp]
  00102	e8 00 00 00 00	 call	 _PyMem_DebugFree
  00107	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN11@PyLocale_s@2:
$LN1@PyLocale_s@2:

; 224  :     return result;

  0010f	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN6@PyLocale_s@2:

; 225  : }

  00114	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00118	c3		 ret	 0
PyLocale_strcoll ENDP
_TEXT	ENDS
PUBLIC	??_C@_09NEIMPEEN@U?3strxfrm?$AA@		; `string'
EXTRN	PyMem_Free:PROC
EXTRN	PyUnicode_FromWideChar:PROC
EXTRN	PyMem_Realloc:PROC
EXTRN	__imp_wcsxfrm:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyLocale_strxfrm DD imagerel PyLocale_strxfrm
	DD	imagerel PyLocale_strxfrm+348
	DD	imagerel $unwind$PyLocale_strxfrm
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyLocale_strxfrm DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_09NEIMPEEN@U?3strxfrm?$AA@
CONST	SEGMENT
??_C@_09NEIMPEEN@U?3strxfrm?$AA@ DB 'U:strxfrm', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyLocale_strxfrm
_TEXT	SEGMENT
s$ = 32
n1$ = 40
buf$ = 48
result$ = 56
n2$ = 64
str$ = 72
new_buf$63936 = 80
self$ = 112
args$ = 120
PyLocale_strxfrm PROC					; COMDAT

; 236  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 237  :     PyObject *str;
; 238  :     Py_ssize_t n1;
; 239  :     wchar_t *s = NULL, *buf = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR s$[rsp], 0
  00017	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR buf$[rsp], 0

; 240  :     size_t n2;
; 241  :     PyObject *result = NULL;

  00020	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 242  : 
; 243  :     if (!PyArg_ParseTuple(args, "U:strxfrm", &str))

  00029	4c 8d 44 24 48	 lea	 r8, QWORD PTR str$[rsp]
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09NEIMPEEN@U?3strxfrm?$AA@
  00035	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0003a	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003f	85 c0		 test	 eax, eax
  00041	75 07		 jne	 SHORT $LN7@PyLocale_s@3

; 244  :         return NULL;

  00043	33 c0		 xor	 eax, eax
  00045	e9 0d 01 00 00	 jmp	 $LN8@PyLocale_s@3
$LN7@PyLocale_s@3:

; 245  : 
; 246  :     s = PyUnicode_AsWideCharString(str, &n1);

  0004a	48 8d 54 24 28	 lea	 rdx, QWORD PTR n1$[rsp]
  0004f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00054	e8 00 00 00 00	 call	 PyUnicode_AsWideCharString
  00059	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 247  :     if (s == NULL)

  0005e	48 83 7c 24 20
	00		 cmp	 QWORD PTR s$[rsp], 0
  00064	75 05		 jne	 SHORT $LN6@PyLocale_s@3

; 248  :         goto exit;

  00066	e9 c3 00 00 00	 jmp	 $exit$63931
$LN6@PyLocale_s@3:

; 249  : 
; 250  :     /* assume no change in size, first */
; 251  :     n1 = n1 + 1;

  0006b	48 8b 44 24 28	 mov	 rax, QWORD PTR n1$[rsp]
  00070	48 ff c0	 inc	 rax
  00073	48 89 44 24 28	 mov	 QWORD PTR n1$[rsp], rax

; 252  :     buf = PyMem_Malloc(n1 * sizeof(wchar_t));

  00078	48 8b 44 24 28	 mov	 rax, QWORD PTR n1$[rsp]
  0007d	48 d1 e0	 shl	 rax, 1
  00080	48 8b c8	 mov	 rcx, rax
  00083	e8 00 00 00 00	 call	 PyMem_Malloc
  00088	48 89 44 24 30	 mov	 QWORD PTR buf$[rsp], rax

; 253  :     if (!buf) {

  0008d	48 83 7c 24 30
	00		 cmp	 QWORD PTR buf$[rsp], 0
  00093	75 0a		 jne	 SHORT $LN5@PyLocale_s@3

; 254  :         PyErr_NoMemory();

  00095	e8 00 00 00 00	 call	 PyErr_NoMemory

; 255  :         goto exit;

  0009a	e9 8f 00 00 00	 jmp	 $exit$63931
$LN5@PyLocale_s@3:

; 256  :     }
; 257  :     n2 = wcsxfrm(buf, s, n1);

  0009f	4c 8b 44 24 28	 mov	 r8, QWORD PTR n1$[rsp]
  000a4	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcsxfrm
  000b4	48 89 44 24 40	 mov	 QWORD PTR n2$[rsp], rax

; 258  :     if (n2 >= (size_t)n1) {

  000b9	48 8b 44 24 28	 mov	 rax, QWORD PTR n1$[rsp]
  000be	48 39 44 24 40	 cmp	 QWORD PTR n2$[rsp], rax
  000c3	72 55		 jb	 SHORT $LN4@PyLocale_s@3

; 259  :         /* more space needed */
; 260  :         wchar_t * new_buf = PyMem_Realloc(buf, (n2+1)*sizeof(wchar_t));

  000c5	48 8b 44 24 40	 mov	 rax, QWORD PTR n2$[rsp]
  000ca	48 8d 44 00 02	 lea	 rax, QWORD PTR [rax+rax+2]
  000cf	48 8b d0	 mov	 rdx, rax
  000d2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  000d7	e8 00 00 00 00	 call	 PyMem_Realloc
  000dc	48 89 44 24 50	 mov	 QWORD PTR new_buf$63936[rsp], rax

; 261  :         if (!new_buf) {

  000e1	48 83 7c 24 50
	00		 cmp	 QWORD PTR new_buf$63936[rsp], 0
  000e7	75 07		 jne	 SHORT $LN3@PyLocale_s@3

; 262  :             PyErr_NoMemory();

  000e9	e8 00 00 00 00	 call	 PyErr_NoMemory

; 263  :             goto exit;

  000ee	eb 3e		 jmp	 SHORT $exit$63931
$LN3@PyLocale_s@3:

; 264  :         }
; 265  :         buf = new_buf;

  000f0	48 8b 44 24 50	 mov	 rax, QWORD PTR new_buf$63936[rsp]
  000f5	48 89 44 24 30	 mov	 QWORD PTR buf$[rsp], rax

; 266  :         n2 = wcsxfrm(buf, s, n2+1);

  000fa	48 8b 44 24 40	 mov	 rax, QWORD PTR n2$[rsp]
  000ff	48 ff c0	 inc	 rax
  00102	4c 8b c0	 mov	 r8, rax
  00105	48 8b 54 24 20	 mov	 rdx, QWORD PTR s$[rsp]
  0010a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcsxfrm
  00115	48 89 44 24 40	 mov	 QWORD PTR n2$[rsp], rax
$LN4@PyLocale_s@3:

; 267  :     }
; 268  :     result = PyUnicode_FromWideChar(buf, n2);

  0011a	48 8b 54 24 40	 mov	 rdx, QWORD PTR n2$[rsp]
  0011f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  00124	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  00129	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax
$exit$63931:

; 269  : exit:
; 270  :     if (buf)

  0012e	48 83 7c 24 30
	00		 cmp	 QWORD PTR buf$[rsp], 0
  00134	74 0a		 je	 SHORT $LN2@PyLocale_s@3

; 271  :         PyMem_Free(buf);

  00136	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  0013b	e8 00 00 00 00	 call	 PyMem_Free
$LN2@PyLocale_s@3:

; 272  :     if (s)

  00140	48 83 7c 24 20
	00		 cmp	 QWORD PTR s$[rsp], 0
  00146	74 0a		 je	 SHORT $LN1@PyLocale_s@3

; 273  :         PyMem_Free(s);

  00148	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0014d	e8 00 00 00 00	 call	 PyMem_Free
$LN1@PyLocale_s@3:

; 274  :     return result;

  00152	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN8@PyLocale_s@3:

; 275  : }

  00157	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0015b	c3		 ret	 0
PyLocale_strxfrm ENDP
_TEXT	ENDS
PUBLIC	??_C@_02HPGKMGCF@Os?$AA@			; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_02FCBLNKNB@ss?$AA@			; `string'
PUBLIC	??_C@_04LDGHIPEL@cp?$CFd?$AA@			; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_Py_BuildValue_SizeT:PROC
EXTRN	strlen:PROC
EXTRN	__imp_GetLocaleInfoA:PROC
EXTRN	PyOS_snprintf:PROC
EXTRN	__imp_GetACP:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyLocale_getdefaultlocale DD imagerel PyLocale_getdefaultlocale
	DD	imagerel PyLocale_getdefaultlocale+328
	DD	imagerel $unwind$PyLocale_getdefaultlocale
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyLocale_getdefaultlocale DD 020c01H
	DD	023010cH
xdata	ENDS
;	COMDAT ??_C@_02HPGKMGCF@Os?$AA@
CONST	SEGMENT
??_C@_02HPGKMGCF@Os?$AA@ DB 'Os', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FCBLNKNB@ss?$AA@
CONST	SEGMENT
??_C@_02FCBLNKNB@ss?$AA@ DB 'ss', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LDGHIPEL@cp?$CFd?$AA@
CONST	SEGMENT
??_C@_04LDGHIPEL@cp?$CFd?$AA@ DB 'cp%d', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyLocale_getdefaultlocale
_TEXT	SEGMENT
locale$ = 32
encoding$ = 144
i$63956 = 256
self$ = 288
PyLocale_getdefaultlocale PROC				; COMDAT

; 281  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 282  :     char encoding[100];
; 283  :     char locale[100];
; 284  : 
; 285  :     PyOS_snprintf(encoding, sizeof(encoding), "cp%d", GetACP());

  0000c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetACP
  00012	44 8b c8	 mov	 r9d, eax
  00015	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04LDGHIPEL@cp?$CFd?$AA@
  0001c	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  00021	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR encoding$[rsp]
  00029	e8 00 00 00 00	 call	 PyOS_snprintf

; 286  : 
; 287  :     if (GetLocaleInfo(LOCALE_USER_DEFAULT,
; 288  :                       LOCALE_SISO639LANGNAME,
; 289  :                       locale, sizeof(locale))) {

  0002e	41 b9 64 00 00
	00		 mov	 r9d, 100		; 00000064H
  00034	4c 8d 44 24 20	 lea	 r8, QWORD PTR locale$[rsp]
  00039	ba 59 00 00 00	 mov	 edx, 89			; 00000059H
  0003e	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLocaleInfoA
  00049	85 c0		 test	 eax, eax
  0004b	0f 84 81 00 00
	00		 je	 $LN3@PyLocale_g

; 290  :         Py_ssize_t i = strlen(locale);

  00051	48 8d 4c 24 20	 lea	 rcx, QWORD PTR locale$[rsp]
  00056	e8 00 00 00 00	 call	 strlen
  0005b	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR i$63956[rsp], rax

; 291  :         locale[i++] = '_';

  00063	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR i$63956[rsp]
  0006b	c6 44 04 20 5f	 mov	 BYTE PTR locale$[rsp+rax], 95 ; 0000005fH
  00070	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR i$63956[rsp]
  00078	48 ff c0	 inc	 rax
  0007b	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR i$63956[rsp], rax

; 292  :         if (GetLocaleInfo(LOCALE_USER_DEFAULT,
; 293  :                           LOCALE_SISO3166CTRYNAME,
; 294  :                           locale+i, (int)(sizeof(locale)-i)))

  00083	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00088	48 2b 84 24 00
	01 00 00	 sub	 rax, QWORD PTR i$63956[rsp]
  00090	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR i$63956[rsp]
  00098	48 8d 4c 0c 20	 lea	 rcx, QWORD PTR locale$[rsp+rcx]
  0009d	44 8b c8	 mov	 r9d, eax
  000a0	4c 8b c1	 mov	 r8, rcx
  000a3	ba 5a 00 00 00	 mov	 edx, 90			; 0000005aH
  000a8	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLocaleInfoA
  000b3	85 c0		 test	 eax, eax
  000b5	74 1b		 je	 SHORT $LN2@PyLocale_g

; 295  :             return Py_BuildValue("ss", locale, encoding);

  000b7	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR encoding$[rsp]
  000bf	48 8d 54 24 20	 lea	 rdx, QWORD PTR locale$[rsp]
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FCBLNKNB@ss?$AA@
  000cb	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  000d0	eb 6e		 jmp	 SHORT $LN4@PyLocale_g
$LN2@PyLocale_g:
$LN3@PyLocale_g:

; 296  :     }
; 297  : 
; 298  :     /* If we end up here, this windows version didn't know about
; 299  :        ISO639/ISO3166 names (it's probably Windows 95).  Return the
; 300  :        Windows language identifier instead (a hexadecimal number) */
; 301  : 
; 302  :     locale[0] = '0';

  000d2	c6 44 24 20 30	 mov	 BYTE PTR locale$[rsp], 48 ; 00000030H

; 303  :     locale[1] = 'x';

  000d7	c6 44 24 21 78	 mov	 BYTE PTR locale$[rsp+1], 120 ; 00000078H

; 304  :     if (GetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_IDEFAULTLANGUAGE,
; 305  :                       locale+2, sizeof(locale)-2)) {

  000dc	48 8d 44 24 22	 lea	 rax, QWORD PTR locale$[rsp+2]
  000e1	41 b9 62 00 00
	00		 mov	 r9d, 98			; 00000062H
  000e7	4c 8b c0	 mov	 r8, rax
  000ea	ba 09 00 00 00	 mov	 edx, 9
  000ef	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLocaleInfoA
  000fa	85 c0		 test	 eax, eax
  000fc	74 1b		 je	 SHORT $LN1@PyLocale_g

; 306  :         return Py_BuildValue("ss", locale, encoding);

  000fe	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR encoding$[rsp]
  00106	48 8d 54 24 20	 lea	 rdx, QWORD PTR locale$[rsp]
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FCBLNKNB@ss?$AA@
  00112	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  00117	eb 27		 jmp	 SHORT $LN4@PyLocale_g
$LN1@PyLocale_g:

; 307  :     }
; 308  : 
; 309  :     /* cannot determine the language code (very unlikely) */
; 310  :     Py_INCREF(Py_None);

  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00120	e8 00 00 00 00	 call	 _Py_IncRef

; 311  :     return Py_BuildValue("Os", Py_None, encoding);

  00125	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR encoding$[rsp]
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HPGKMGCF@Os?$AA@
  0013b	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
$LN4@PyLocale_g:

; 312  : }

  00140	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  00147	c3		 ret	 0
PyLocale_getdefaultlocale ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_05NAOIJFC@Error?$AA@			; `string'
PUBLIC	??_C@_0N@DHPKPPHG@locale?4Error?$AA@		; `string'
PUBLIC	??_C@_08HHKMDCKL@CHAR_MAX?$AA@			; `string'
PUBLIC	??_C@_06NEFDFEKB@LC_ALL?$AA@			; `string'
PUBLIC	??_C@_0L@DLHIECNL@LC_NUMERIC?$AA@		; `string'
PUBLIC	??_C@_0M@MIENIKLA@LC_MONETARY?$AA@		; `string'
PUBLIC	??_C@_0L@KFJHEKIK@LC_COLLATE?$AA@		; `string'
PUBLIC	??_C@_07LCBHPJJN@LC_TIME?$AA@			; `string'
PUBLIC	??_C@_08EADHIDAD@LC_CTYPE?$AA@			; `string'
PUBLIC	PyInit__locale
EXTRN	PyErr_NewException:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_localemodule.c
pdata	SEGMENT
$pdata$PyInit__locale DD imagerel $LN32
	DD	imagerel $LN32+538
	DD	imagerel $unwind$PyInit__locale
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__locale DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error?$AA@
CONST	SEGMENT
??_C@_05NAOIJFC@Error?$AA@ DB 'Error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DHPKPPHG@locale?4Error?$AA@
CONST	SEGMENT
??_C@_0N@DHPKPPHG@locale?4Error?$AA@ DB 'locale.Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HHKMDCKL@CHAR_MAX?$AA@
CONST	SEGMENT
??_C@_08HHKMDCKL@CHAR_MAX?$AA@ DB 'CHAR_MAX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NEFDFEKB@LC_ALL?$AA@
CONST	SEGMENT
??_C@_06NEFDFEKB@LC_ALL?$AA@ DB 'LC_ALL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DLHIECNL@LC_NUMERIC?$AA@
CONST	SEGMENT
??_C@_0L@DLHIECNL@LC_NUMERIC?$AA@ DB 'LC_NUMERIC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MIENIKLA@LC_MONETARY?$AA@
CONST	SEGMENT
??_C@_0M@MIENIKLA@LC_MONETARY?$AA@ DB 'LC_MONETARY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KFJHEKIK@LC_COLLATE?$AA@
CONST	SEGMENT
??_C@_0L@KFJHEKIK@LC_COLLATE?$AA@ DB 'LC_COLLATE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LCBHPJJN@LC_TIME?$AA@
CONST	SEGMENT
??_C@_07LCBHPJJN@LC_TIME?$AA@ DB 'LC_TIME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EADHIDAD@LC_CTYPE?$AA@
CONST	SEGMENT
??_C@_08EADHIDAD@LC_CTYPE?$AA@ DB 'LC_CTYPE', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit__locale
_TEXT	SEGMENT
x$ = 32
d$ = 40
m$ = 48
PyInit__locale PROC					; COMDAT

; 618  : {

$LN32:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 619  :     PyObject *m, *d, *x;
; 620  : #ifdef HAVE_LANGINFO_H
; 621  :     int i;
; 622  : #endif
; 623  : 
; 624  :     m = PyModule_Create(&_localemodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_localemodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 30	 mov	 QWORD PTR m$[rsp], rax

; 625  :     if (m == NULL)

  0001a	48 83 7c 24 30
	00		 cmp	 QWORD PTR m$[rsp], 0
  00020	75 07		 jne	 SHORT $LN29@PyInit__lo

; 626  :     return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 ec 01 00 00	 jmp	 $LN30@PyInit__lo
$LN29@PyInit__lo:

; 627  : 
; 628  :     d = PyModule_GetDict(m);

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR m$[rsp]
  0002e	e8 00 00 00 00	 call	 PyModule_GetDict
  00033	48 89 44 24 28	 mov	 QWORD PTR d$[rsp], rax

; 629  : 
; 630  :     x = PyLong_FromLong(LC_CTYPE);

  00038	b9 02 00 00 00	 mov	 ecx, 2
  0003d	e8 00 00 00 00	 call	 PyLong_FromLong
  00042	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 631  :     PyDict_SetItemString(d, "LC_CTYPE", x);

  00047	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EADHIDAD@LC_CTYPE?$AA@
  00053	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00058	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN28@PyInit__lo:

; 632  :     Py_XDECREF(x);

  0005d	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00063	74 0a		 je	 SHORT $LN25@PyInit__lo
  00065	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0006a	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@PyInit__lo:
  0006f	33 c0		 xor	 eax, eax
  00071	85 c0		 test	 eax, eax
  00073	75 e8		 jne	 SHORT $LN28@PyInit__lo

; 633  : 
; 634  :     x = PyLong_FromLong(LC_TIME);

  00075	b9 05 00 00 00	 mov	 ecx, 5
  0007a	e8 00 00 00 00	 call	 PyLong_FromLong
  0007f	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 635  :     PyDict_SetItemString(d, "LC_TIME", x);

  00084	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07LCBHPJJN@LC_TIME?$AA@
  00090	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00095	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN24@PyInit__lo:

; 636  :     Py_XDECREF(x);

  0009a	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  000a0	74 0a		 je	 SHORT $LN21@PyInit__lo
  000a2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  000a7	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@PyInit__lo:
  000ac	33 c0		 xor	 eax, eax
  000ae	85 c0		 test	 eax, eax
  000b0	75 e8		 jne	 SHORT $LN24@PyInit__lo

; 637  : 
; 638  :     x = PyLong_FromLong(LC_COLLATE);

  000b2	b9 01 00 00 00	 mov	 ecx, 1
  000b7	e8 00 00 00 00	 call	 PyLong_FromLong
  000bc	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 639  :     PyDict_SetItemString(d, "LC_COLLATE", x);

  000c1	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@KFJHEKIK@LC_COLLATE?$AA@
  000cd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  000d2	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN20@PyInit__lo:

; 640  :     Py_XDECREF(x);

  000d7	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  000dd	74 0a		 je	 SHORT $LN17@PyInit__lo
  000df	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  000e4	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@PyInit__lo:
  000e9	33 c0		 xor	 eax, eax
  000eb	85 c0		 test	 eax, eax
  000ed	75 e8		 jne	 SHORT $LN20@PyInit__lo

; 641  : 
; 642  :     x = PyLong_FromLong(LC_MONETARY);

  000ef	b9 03 00 00 00	 mov	 ecx, 3
  000f4	e8 00 00 00 00	 call	 PyLong_FromLong
  000f9	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 643  :     PyDict_SetItemString(d, "LC_MONETARY", x);

  000fe	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MIENIKLA@LC_MONETARY?$AA@
  0010a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0010f	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN16@PyInit__lo:

; 644  :     Py_XDECREF(x);

  00114	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  0011a	74 0a		 je	 SHORT $LN13@PyInit__lo
  0011c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00121	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyInit__lo:
  00126	33 c0		 xor	 eax, eax
  00128	85 c0		 test	 eax, eax
  0012a	75 e8		 jne	 SHORT $LN16@PyInit__lo

; 645  : 
; 646  : #ifdef LC_MESSAGES
; 647  :     x = PyLong_FromLong(LC_MESSAGES);
; 648  :     PyDict_SetItemString(d, "LC_MESSAGES", x);
; 649  :     Py_XDECREF(x);
; 650  : #endif /* LC_MESSAGES */
; 651  : 
; 652  :     x = PyLong_FromLong(LC_NUMERIC);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	e8 00 00 00 00	 call	 PyLong_FromLong
  00136	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 653  :     PyDict_SetItemString(d, "LC_NUMERIC", x);

  0013b	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  00140	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DLHIECNL@LC_NUMERIC?$AA@
  00147	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0014c	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN12@PyInit__lo:

; 654  :     Py_XDECREF(x);

  00151	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00157	74 0a		 je	 SHORT $LN9@PyInit__lo
  00159	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0015e	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyInit__lo:
  00163	33 c0		 xor	 eax, eax
  00165	85 c0		 test	 eax, eax
  00167	75 e8		 jne	 SHORT $LN12@PyInit__lo

; 655  : 
; 656  :     x = PyLong_FromLong(LC_ALL);

  00169	33 c9		 xor	 ecx, ecx
  0016b	e8 00 00 00 00	 call	 PyLong_FromLong
  00170	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 657  :     PyDict_SetItemString(d, "LC_ALL", x);

  00175	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  0017a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NEFDFEKB@LC_ALL?$AA@
  00181	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00186	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN8@PyInit__lo:

; 658  :     Py_XDECREF(x);

  0018b	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00191	74 0a		 je	 SHORT $LN5@PyInit__lo
  00193	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00198	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyInit__lo:
  0019d	33 c0		 xor	 eax, eax
  0019f	85 c0		 test	 eax, eax
  001a1	75 e8		 jne	 SHORT $LN8@PyInit__lo

; 659  : 
; 660  :     x = PyLong_FromLong(CHAR_MAX);

  001a3	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  001a8	e8 00 00 00 00	 call	 PyLong_FromLong
  001ad	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 661  :     PyDict_SetItemString(d, "CHAR_MAX", x);

  001b2	4c 8b 44 24 20	 mov	 r8, QWORD PTR x$[rsp]
  001b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08HHKMDCKL@CHAR_MAX?$AA@
  001be	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  001c3	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN4@PyInit__lo:

; 662  :     Py_XDECREF(x);

  001c8	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  001ce	74 0a		 je	 SHORT $LN1@PyInit__lo
  001d0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  001d5	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyInit__lo:
  001da	33 c0		 xor	 eax, eax
  001dc	85 c0		 test	 eax, eax
  001de	75 e8		 jne	 SHORT $LN4@PyInit__lo

; 663  : 
; 664  :     Error = PyErr_NewException("locale.Error", NULL, NULL);

  001e0	45 33 c0	 xor	 r8d, r8d
  001e3	33 d2		 xor	 edx, edx
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DHPKPPHG@locale?4Error?$AA@
  001ec	e8 00 00 00 00	 call	 PyErr_NewException
  001f1	48 89 05 00 00
	00 00		 mov	 QWORD PTR Error, rax

; 665  :     PyDict_SetItemString(d, "Error", Error);

  001f8	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Error
  001ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NAOIJFC@Error?$AA@
  00206	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0020b	e8 00 00 00 00	 call	 PyDict_SetItemString

; 666  : 
; 667  : #ifdef HAVE_LANGINFO_H
; 668  :     for (i = 0; langinfo_constants[i].name; i++) {
; 669  :         PyModule_AddIntConstant(m, langinfo_constants[i].name,
; 670  :                                 langinfo_constants[i].value);
; 671  :     }
; 672  : #endif
; 673  :     return m;

  00210	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
$LN30@PyInit__lo:

; 674  : }

  00215	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00219	c3		 ret	 0
PyInit__locale ENDP
_TEXT	ENDS
END
