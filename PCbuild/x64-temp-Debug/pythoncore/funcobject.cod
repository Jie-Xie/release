; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@BCCHOHJA@staticmethod?$AA@		; `string'
PUBLIC	??_C@_0M@FGHOINCL@classmethod?$AA@		; `string'
PUBLIC	??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@	; `string'
PUBLIC	??_C@_08NOMANIOG@__func__?$AA@			; `string'
PUBLIC	??_C@_08HFFPPCHF@function?$AA@			; `string'
PUBLIC	??_C@_07NMGBPFLN@closure?$AA@			; `string'
PUBLIC	??_C@_07MAJIDFEI@argdefs?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_07NAPALOBA@globals?$AA@			; `string'
PUBLIC	??_C@_04NDFOBODE@code?$AA@			; `string'
PUBLIC	??_C@_0N@FMLGAKCE@__qualname__?$AA@		; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_0BA@BGAJCMJM@__annotations__?$AA@		; `string'
PUBLIC	??_C@_0P@DAMMIKBJ@__kwdefaults__?$AA@		; `string'
PUBLIC	??_C@_0N@JKBILNAH@__defaults__?$AA@		; `string'
PUBLIC	??_C@_08EBGOJBMB@__code__?$AA@			; `string'
PUBLIC	??_C@_0L@LNCJCPDP@__module__?$AA@		; `string'
PUBLIC	??_C@_0M@BCODGLK@__globals__?$AA@		; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_0M@PLIJGAJH@__closure__?$AA@		; `string'
PUBLIC	PyFunction_Type
PUBLIC	PyClassMethod_Type
PUBLIC	PyStaticMethod_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyType_Type:BYTE
EXTRN	PyObject_GenericSetDict:PROC
EXTRN	PyObject_GenericGetDict:PROC
_BSS	SEGMENT
?__name__@?1??PyFunction_NewWithQualName@@9@9 DQ 01H DUP (?) ; `PyFunction_NewWithQualName'::`2'::__name__
_BSS	ENDS
;	COMDAT ??_C@_0N@BCCHOHJA@staticmethod?$AA@
CONST	SEGMENT
??_C@_0N@BCCHOHJA@staticmethod?$AA@ DB 'staticmethod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FGHOINCL@classmethod?$AA@
CONST	SEGMENT
??_C@_0M@FGHOINCL@classmethod?$AA@ DB 'classmethod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
CONST	SEGMENT
??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@ DB '__isabstractmethod__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NOMANIOG@__func__?$AA@
CONST	SEGMENT
??_C@_08NOMANIOG@__func__?$AA@ DB '__func__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFFPPCHF@function?$AA@
CONST	SEGMENT
??_C@_08HFFPPCHF@function?$AA@ DB 'function', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NMGBPFLN@closure?$AA@
CONST	SEGMENT
??_C@_07NMGBPFLN@closure?$AA@ DB 'closure', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAJIDFEI@argdefs?$AA@
CONST	SEGMENT
??_C@_07MAJIDFEI@argdefs?$AA@ DB 'argdefs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NAPALOBA@globals?$AA@
CONST	SEGMENT
??_C@_07NAPALOBA@globals?$AA@ DB 'globals', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDFOBODE@code?$AA@
CONST	SEGMENT
??_C@_04NDFOBODE@code?$AA@ DB 'code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FMLGAKCE@__qualname__?$AA@
CONST	SEGMENT
??_C@_0N@FMLGAKCE@__qualname__?$AA@ DB '__qualname__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BGAJCMJM@__annotations__?$AA@
CONST	SEGMENT
??_C@_0BA@BGAJCMJM@__annotations__?$AA@ DB '__annotations__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DAMMIKBJ@__kwdefaults__?$AA@
CONST	SEGMENT
??_C@_0P@DAMMIKBJ@__kwdefaults__?$AA@ DB '__kwdefaults__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JKBILNAH@__defaults__?$AA@
CONST	SEGMENT
??_C@_0N@JKBILNAH@__defaults__?$AA@ DB '__defaults__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EBGOJBMB@__code__?$AA@
CONST	SEGMENT
??_C@_08EBGOJBMB@__code__?$AA@ DB '__code__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
func_memberlist DQ FLAT:??_C@_0M@PLIJGAJH@__closure__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	07H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@BCODGLK@__globals__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	07H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000a8H
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
func_getsetlist DQ FLAT:??_C@_08EBGOJBMB@__code__?$AA@
	DQ	FLAT:func_get_code
	DQ	FLAT:func_set_code
	ORG $+16
	DQ	FLAT:??_C@_0N@JKBILNAH@__defaults__?$AA@
	DQ	FLAT:func_get_defaults
	DQ	FLAT:func_set_defaults
	ORG $+16
	DQ	FLAT:??_C@_0P@DAMMIKBJ@__kwdefaults__?$AA@
	DQ	FLAT:func_get_kwdefaults
	DQ	FLAT:func_set_kwdefaults
	ORG $+16
	DQ	FLAT:??_C@_0BA@BGAJCMJM@__annotations__?$AA@
	DQ	FLAT:func_get_annotations
	DQ	FLAT:func_set_annotations
	ORG $+16
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	FLAT:PyObject_GenericSetDict
	ORG $+16
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	FLAT:func_get_name
	DQ	FLAT:func_set_name
	ORG $+16
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:func_get_qualname
	DQ	FLAT:func_set_qualname
	ORG $+16
	DQ	0000000000000000H
	ORG $+32
func_doc DB	'function(code, globals[, name[, argdefs[, closure]]])', 0aH
	DB	0aH, 'Create a function object from a code object and a dictio'
	DB	'nary.', 0aH, 'The optional name string overrides the name fro'
	DB	'm the code object.', 0aH, 'The optional argdefs tuple specifi'
	DB	'es the default argument values.', 0aH, 'The optional closure '
	DB	'tuple supplies the bindings for free variables.', 00H
	ORG $+2
?kwlist@?1??func_new@@9@9 DQ FLAT:??_C@_04NDFOBODE@code?$AA@ ; `func_new'::`2'::kwlist
	DQ	FLAT:??_C@_07NAPALOBA@globals?$AA@
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:??_C@_07MAJIDFEI@argdefs?$AA@
	DQ	FLAT:??_C@_07NMGBPFLN@closure?$AA@
	DQ	0000000000000000H
PyFunction_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08HFFPPCHF@function?$AA@
	DQ	00000000000000c0H
	DQ	0000000000000000H
	DQ	FLAT:func_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:func_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:function_call
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:func_doc
	DQ	FLAT:func_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	00000000000000a0H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:func_memberlist
	DQ	FLAT:func_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:func_descr_get
	DQ	0000000000000000H
	DQ	0000000000000098H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:func_new
	ORG $+72
cm_memberlist DQ FLAT:??_C@_08NOMANIOG@__func__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
cm_getsetlist DQ FLAT:??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
	DQ	FLAT:cm_get___isabstractmethod__
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	FLAT:PyObject_GenericSetDict
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
classmethod_doc DB 'classmethod(function) -> method', 0aH, 0aH, 'Convert '
	DB	'a function to be a class method.', 0aH, 0aH, 'A class method '
	DB	'receives the class as implicit first argument,', 0aH, 'just l'
	DB	'ike an instance method receives the instance.', 0aH, 'To decl'
	DB	'are a class method, use this idiom:', 0aH, 0aH, '  class C:', 0aH
	DB	'      def f(cls, arg1, arg2, ...): ...', 0aH, '      f = clas'
	DB	'smethod(f)', 0aH, 0aH, 'It can be called either on the class '
	DB	'(e.g. C.f()) or on an instance', 0aH, '(e.g. C().f()).  The i'
	DB	'nstance is ignored except for its class.', 0aH, 'If a class m'
	DB	'ethod is called for a derived class, the derived class', 0aH, 'o'
	DB	'bject is passed as the implied first argument.', 0aH, 0aH, 'C'
	DB	'lass methods are different than C++ or Java static methods.', 0aH
	DB	'If you want those, see the staticmethod builtin.', 00H
	ORG $+6
PyClassMethod_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0M@FGHOINCL@classmethod?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:cm_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:classmethod_doc
	DQ	FLAT:cm_traverse
	DQ	FLAT:cm_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:cm_memberlist
	DQ	FLAT:cm_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:cm_descr_get
	DQ	0000000000000000H
	DQ	0000000000000068H
	DQ	FLAT:cm_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
sm_memberlist DQ FLAT:??_C@_08NOMANIOG@__func__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
sm_getsetlist DQ FLAT:??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
	DQ	FLAT:sm_get___isabstractmethod__
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	FLAT:PyObject_GenericSetDict
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
staticmethod_doc DB 'staticmethod(function) -> method', 0aH, 0aH, 'Conver'
	DB	't a function to be a static method.', 0aH, 0aH, 'A static met'
	DB	'hod does not receive an implicit first argument.', 0aH, 'To d'
	DB	'eclare a static method, use this idiom:', 0aH, 0aH, '     cla'
	DB	'ss C:', 0aH, '     def f(arg1, arg2, ...): ...', 0aH, '     f'
	DB	' = staticmethod(f)', 0aH, 0aH, 'It can be called either on th'
	DB	'e class (e.g. C.f()) or on an instance', 0aH, '(e.g. C().f())'
	DB	'.  The instance is ignored except for its class.', 0aH, 0aH, 'S'
	DB	'tatic methods in Python are similar to those found in Java or'
	DB	' C++.', 0aH, 'For a more advanced concept, see the classmetho'
	DB	'd builtin.', 00H
	ORG $+14
PyStaticMethod_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@BCCHOHJA@staticmethod?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:sm_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:staticmethod_doc
	DQ	FLAT:sm_traverse
	DQ	FLAT:sm_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:sm_memberlist
	DQ	FLAT:sm_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:sm_descr_get
	DQ	0000000000000000H
	DQ	0000000000000068H
	DQ	FLAT:sm_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_0L@LNCJCPDP@__module__?$AA@
CONST	SEGMENT
??_C@_0L@LNCJCPDP@__module__?$AA@ DB '__module__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BCODGLK@__globals__?$AA@
CONST	SEGMENT
??_C@_0M@BCODGLK@__globals__?$AA@ DB '__globals__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PLIJGAJH@__closure__?$AA@
CONST	SEGMENT
??_C@_0M@PLIJGAJH@__closure__?$AA@ DB '__closure__', 00H ; `string'
CONST	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0BL@KBAKIMNP@PyFunction_NewWithQualName?$AA@ ; `string'
PUBLIC	??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@ ; `string'
PUBLIC	_Py_DecRef
PUBLIC	_Py_IncRef
PUBLIC	PyFunction_NewWithQualName
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyUnicode_InternFromString:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyTuple_GetItem:PROC
EXTRN	PyTuple_Size:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\funcobject.c
pdata	SEGMENT
$pdata$PyFunction_NewWithQualName DD imagerel $LN22
	DD	imagerel $LN22+873
	DD	imagerel $unwind$PyFunction_NewWithQualName
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_NewWithQualName DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KBAKIMNP@PyFunction_NewWithQualName?$AA@
CONST	SEGMENT
??_C@_0BL@KBAKIMNP@PyFunction_NewWithQualName?$AA@ DB 'PyFunction_NewWith'
	DB	'QualName', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@ DB '..\Objects\funco'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFunction_NewWithQualName
_TEXT	SEGMENT
op$ = 48
module$20342 = 56
consts$20341 = 64
doc$20340 = 72
g$20378 = 80
tv70 = 88
tv164 = 96
code$ = 128
globals$ = 136
qualname$ = 144
PyFunction_NewWithQualName PROC				; COMDAT

; 10   : {

$LN22:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 11   :     PyFunctionObject *op = PyObject_GC_New(PyFunctionObject,
; 12   :                                         &PyFunction_Type);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 13		 je	 SHORT $LN18@PyFunction
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFunction_Type
  00023	e8 00 00 00 00	 call	 _PxObject_New
  00028	48 89 44 24 58	 mov	 QWORD PTR tv70[rsp], rax
  0002d	eb 11		 jmp	 SHORT $LN19@PyFunction
$LN18@PyFunction:
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFunction_Type
  00036	e8 00 00 00 00	 call	 _PyObject_GC_New
  0003b	48 89 44 24 58	 mov	 QWORD PTR tv70[rsp], rax
$LN19@PyFunction:
  00040	48 8b 44 24 58	 mov	 rax, QWORD PTR tv70[rsp]
  00045	48 89 44 24 30	 mov	 QWORD PTR op$[rsp], rax

; 13   :     static PyObject *__name__ = 0;
; 14   :     if (op != NULL) {

  0004a	48 83 7c 24 30
	00		 cmp	 QWORD PTR op$[rsp], 0
  00050	0f 84 14 02 00
	00		 je	 $LN15@PyFunction

; 15   :         PyObject *doc;
; 16   :         PyObject *consts;
; 17   :         PyObject *module;
; 18   :         op->func_weakreflist = NULL;

  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0005b	48 c7 80 a0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+160], 0

; 19   :         Py_INCREF(code);

  00066	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_IncRef

; 20   :         op->func_code = code;

  00073	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00078	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  00080	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 21   :         Py_INCREF(globals);

  00084	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR globals$[rsp]
  0008c	e8 00 00 00 00	 call	 _Py_IncRef

; 22   :         op->func_globals = globals;

  00091	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00096	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR globals$[rsp]
  0009e	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 23   :         op->func_name = ((PyCodeObject *)code)->co_name;

  000a2	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000a7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  000af	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  000b6	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx

; 24   :         Py_INCREF(op->func_name);

  000bd	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000c2	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  000c9	e8 00 00 00 00	 call	 _Py_IncRef

; 25   :         op->func_defaults = NULL; /* No default arguments */

  000ce	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 26   :         op->func_kwdefaults = NULL; /* No keyword only defaults */

  000db	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000e0	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 27   :         op->func_closure = NULL;

  000e8	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000ed	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 28   :         consts = ((PyCodeObject *)code)->co_consts;

  000f8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  00100	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00107	48 89 44 24 40	 mov	 QWORD PTR consts$20341[rsp], rax

; 29   :         if (PyTuple_Size(consts) >= 1) {

  0010c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR consts$20341[rsp]
  00111	e8 00 00 00 00	 call	 PyTuple_Size
  00116	48 83 f8 01	 cmp	 rax, 1
  0011a	7c 37		 jl	 SHORT $LN14@PyFunction

; 30   :             doc = PyTuple_GetItem(consts, 0);

  0011c	33 d2		 xor	 edx, edx
  0011e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR consts$20341[rsp]
  00123	e8 00 00 00 00	 call	 PyTuple_GetItem
  00128	48 89 44 24 48	 mov	 QWORD PTR doc$20340[rsp], rax

; 31   :             if (!PyUnicode_Check(doc))

  0012d	48 8b 44 24 48	 mov	 rax, QWORD PTR doc$20340[rsp]
  00132	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00136	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0013c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00141	85 c0		 test	 eax, eax
  00143	75 0c		 jne	 SHORT $LN13@PyFunction

; 32   :                 doc = Py_None;

  00145	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0014c	48 89 44 24 48	 mov	 QWORD PTR doc$20340[rsp], rax
$LN13@PyFunction:

; 33   :         }
; 34   :         else

  00151	eb 0c		 jmp	 SHORT $LN12@PyFunction
$LN14@PyFunction:

; 35   :             doc = Py_None;

  00153	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0015a	48 89 44 24 48	 mov	 QWORD PTR doc$20340[rsp], rax
$LN12@PyFunction:

; 36   :         Py_INCREF(doc);

  0015f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR doc$20340[rsp]
  00164	e8 00 00 00 00	 call	 _Py_IncRef

; 37   :         op->func_doc = doc;

  00169	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0016e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR doc$20340[rsp]
  00173	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 38   :         op->func_dict = NULL;

  0017a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0017f	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0

; 39   :         op->func_module = NULL;

  0018a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0018f	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0

; 40   :         op->func_annotations = NULL;

  0019a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0019f	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0

; 41   : 
; 42   :         /* __module__: If module name is in globals, use it.
; 43   :            Otherwise, use None.
; 44   :         */
; 45   :         if (!__name__) {

  001aa	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?__name__@?1??PyFunction_NewWithQualName@@9@9, 0
  001b2	75 2e		 jne	 SHORT $LN11@PyFunction

; 46   :             __name__ = PyUnicode_InternFromString("__name__");

  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  001bb	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  001c0	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?__name__@?1??PyFunction_NewWithQualName@@9@9, rax

; 47   :             if (!__name__) {

  001c7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?__name__@?1??PyFunction_NewWithQualName@@9@9, 0
  001cf	75 11		 jne	 SHORT $LN10@PyFunction

; 48   :                 Py_DECREF(op);

  001d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  001d6	e8 00 00 00 00	 call	 _Py_DecRef

; 49   :                 return NULL;

  001db	33 c0		 xor	 eax, eax
  001dd	e9 82 01 00 00	 jmp	 $LN16@PyFunction
$LN10@PyFunction:
$LN11@PyFunction:

; 50   :             }
; 51   :         }
; 52   :         module = PyDict_GetItem(globals, __name__);

  001e2	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?__name__@?1??PyFunction_NewWithQualName@@9@9
  001e9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR globals$[rsp]
  001f1	e8 00 00 00 00	 call	 PyDict_GetItem
  001f6	48 89 44 24 38	 mov	 QWORD PTR module$20342[rsp], rax

; 53   :         if (module) {

  001fb	48 83 7c 24 38
	00		 cmp	 QWORD PTR module$20342[rsp], 0
  00201	74 1b		 je	 SHORT $LN9@PyFunction

; 54   :             Py_INCREF(module);

  00203	48 8b 4c 24 38	 mov	 rcx, QWORD PTR module$20342[rsp]
  00208	e8 00 00 00 00	 call	 _Py_IncRef

; 55   :             op->func_module = module;

  0020d	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00212	48 8b 4c 24 38	 mov	 rcx, QWORD PTR module$20342[rsp]
  00217	48 89 88 a8 00
	00 00		 mov	 QWORD PTR [rax+168], rcx
$LN9@PyFunction:

; 56   :         }
; 57   :         if (qualname)

  0021e	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR qualname$[rsp], 0
  00227	74 16		 je	 SHORT $LN8@PyFunction

; 58   :             op->func_qualname = qualname;

  00229	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0022e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR qualname$[rsp]
  00236	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx

; 59   :         else

  0023d	eb 18		 jmp	 SHORT $LN7@PyFunction
$LN8@PyFunction:

; 60   :             op->func_qualname = op->func_name;

  0023f	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00244	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00249	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00250	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx
$LN7@PyFunction:

; 61   :         Py_INCREF(op->func_qualname);

  00257	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0025c	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00263	e8 00 00 00 00	 call	 _Py_IncRef

; 62   :     }
; 63   :     else

  00268	eb 07		 jmp	 SHORT $LN6@PyFunction
$LN15@PyFunction:

; 64   :         return NULL;

  0026a	33 c0		 xor	 eax, eax
  0026c	e9 f3 00 00 00	 jmp	 $LN16@PyFunction
$LN6@PyFunction:

; 65   :     _PyObject_GC_TRACK(op);

  00271	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00279	4c 8b 4c 24 30	 mov	 r9, QWORD PTR op$[rsp]
  0027e	41 b8 41 00 00
	00		 mov	 r8d, 65			; 00000041H
  00284	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0028b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@KBAKIMNP@PyFunction_NewWithQualName?$AA@
  00292	e8 00 00 00 00	 call	 _PyParallel_Guard
  00297	85 c0		 test	 eax, eax
  00299	0f 85 c0 00 00
	00		 jne	 $LN5@PyFunction
$LN4@PyFunction:
  0029f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002a7	4c 8b 4c 24 30	 mov	 r9, QWORD PTR op$[rsp]
  002ac	41 b8 41 00 00
	00		 mov	 r8d, 65			; 00000041H
  002b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  002b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@KBAKIMNP@PyFunction_NewWithQualName?$AA@
  002c0	e8 00 00 00 00	 call	 _PyParallel_Guard
  002c5	85 c0		 test	 eax, eax
  002c7	74 0b		 je	 SHORT $LN20@PyFunction
  002c9	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tv164[rsp], 0
  002d2	eb 0e		 jmp	 SHORT $LN21@PyFunction
$LN20@PyFunction:
  002d4	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  002d9	48 83 e8 18	 sub	 rax, 24
  002dd	48 89 44 24 60	 mov	 QWORD PTR tv164[rsp], rax
$LN21@PyFunction:
  002e2	48 8b 44 24 60	 mov	 rax, QWORD PTR tv164[rsp]
  002e7	48 89 44 24 50	 mov	 QWORD PTR g$20378[rsp], rax
  002ec	48 8b 44 24 50	 mov	 rax, QWORD PTR g$20378[rsp]
  002f1	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  002f6	74 0c		 je	 SHORT $LN1@PyFunction
  002f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  002ff	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyFunction:
  00304	48 8b 44 24 50	 mov	 rax, QWORD PTR g$20378[rsp]
  00309	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  00311	48 8b 44 24 50	 mov	 rax, QWORD PTR g$20378[rsp]
  00316	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0031d	48 89 08	 mov	 QWORD PTR [rax], rcx
  00320	48 8b 44 24 50	 mov	 rax, QWORD PTR g$20378[rsp]
  00325	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0032c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00330	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00334	48 8b 44 24 50	 mov	 rax, QWORD PTR g$20378[rsp]
  00339	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0033d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR g$20378[rsp]
  00342	48 89 08	 mov	 QWORD PTR [rax], rcx
  00345	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0034c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR g$20378[rsp]
  00351	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00355	33 c0		 xor	 eax, eax
  00357	85 c0		 test	 eax, eax
  00359	0f 85 40 ff ff
	ff		 jne	 $LN4@PyFunction
$LN5@PyFunction:

; 66   :     return (PyObject *)op;

  0035f	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN16@PyFunction:

; 67   : }

  00364	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00368	c3		 ret	 0
PyFunction_NewWithQualName ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	PyFunction_New
;	COMDAT pdata
; File c:\src\pyparallel\objects\funcobject.c
pdata	SEGMENT
$pdata$PyFunction_New DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$PyFunction_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_New DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFunction_New
_TEXT	SEGMENT
code$ = 48
globals$ = 56
PyFunction_New PROC					; COMDAT

; 71   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 72   :     return PyFunction_NewWithQualName(code, globals, NULL);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR globals$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR code$[rsp]
  0001b	e8 00 00 00 00	 call	 PyFunction_NewWithQualName

; 73   : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
PyFunction_New ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetCode
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetCode DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$PyFunction_GetCode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetCode DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFunction_GetCode
_TEXT	SEGMENT
op$ = 48
PyFunction_GetCode PROC					; COMDAT

; 77   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 78   :     if (!PyFunction_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyFunction@2

; 79   :         PyErr_BadInternalCall();

  0001b	ba 4f 00 00 00	 mov	 edx, 79			; 0000004fH
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 80   :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 09		 jmp	 SHORT $LN2@PyFunction@2
$LN1@PyFunction@2:

; 81   :     }
; 82   :     return ((PyFunctionObject *) op) -> func_code;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00035	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
$LN2@PyFunction@2:

; 83   : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
PyFunction_GetCode ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetGlobals
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetGlobals DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$PyFunction_GetGlobals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetGlobals DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFunction_GetGlobals
_TEXT	SEGMENT
op$ = 48
PyFunction_GetGlobals PROC				; COMDAT

; 87   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 88   :     if (!PyFunction_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyFunction@3

; 89   :         PyErr_BadInternalCall();

  0001b	ba 59 00 00 00	 mov	 edx, 89			; 00000059H
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 90   :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 09		 jmp	 SHORT $LN2@PyFunction@3
$LN1@PyFunction@3:

; 91   :     }
; 92   :     return ((PyFunctionObject *) op) -> func_globals;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00035	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
$LN2@PyFunction@3:

; 93   : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
PyFunction_GetGlobals ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetModule
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetModule DD imagerel $LN4
	DD	imagerel $LN4+65
	DD	imagerel $unwind$PyFunction_GetModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetModule DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFunction_GetModule
_TEXT	SEGMENT
op$ = 48
PyFunction_GetModule PROC				; COMDAT

; 97   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 98   :     if (!PyFunction_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyFunction@4

; 99   :         PyErr_BadInternalCall();

  0001b	ba 63 00 00 00	 mov	 edx, 99			; 00000063H
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 100  :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 0c		 jmp	 SHORT $LN2@PyFunction@4
$LN1@PyFunction@4:

; 101  :     }
; 102  :     return ((PyFunctionObject *) op) -> func_module;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00035	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
$LN2@PyFunction@4:

; 103  : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
PyFunction_GetModule ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetDefaults
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetDefaults DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$PyFunction_GetDefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetDefaults DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFunction_GetDefaults
_TEXT	SEGMENT
op$ = 48
PyFunction_GetDefaults PROC				; COMDAT

; 107  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 108  :     if (!PyFunction_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyFunction@5

; 109  :         PyErr_BadInternalCall();

  0001b	ba 6d 00 00 00	 mov	 edx, 109		; 0000006dH
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 110  :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 09		 jmp	 SHORT $LN2@PyFunction@5
$LN1@PyFunction@5:

; 111  :     }
; 112  :     return ((PyFunctionObject *) op) -> func_defaults;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00035	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
$LN2@PyFunction@5:

; 113  : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
PyFunction_GetDefaults ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@OJNHLFDM@non?9tuple?5default?5args?$AA@ ; `string'
PUBLIC	PyFunction_SetDefaults
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_SystemError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_SetDefaults DD imagerel $LN12
	DD	imagerel $LN12+207
	DD	imagerel $unwind$PyFunction_SetDefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_SetDefaults DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BH@OJNHLFDM@non?9tuple?5default?5args?$AA@
CONST	SEGMENT
??_C@_0BH@OJNHLFDM@non?9tuple?5default?5args?$AA@ DB 'non-tuple default a'
	DB	'rgs', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFunction_SetDefaults
_TEXT	SEGMENT
op$ = 48
defaults$ = 56
PyFunction_SetDefaults PROC				; COMDAT

; 117  : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 118  :     if (!PyFunction_Check(op)) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 1b		 je	 SHORT $LN9@PyFunction@6

; 119  :         PyErr_BadInternalCall();

  00020	ba 77 00 00 00	 mov	 edx, 119		; 00000077H
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0002c	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 120  :         return -1;

  00031	b8 ff ff ff ff	 mov	 eax, -1
  00036	e9 8f 00 00 00	 jmp	 $LN10@PyFunction@6
$LN9@PyFunction@6:

; 121  :     }
; 122  :     if (defaults == Py_None)

  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00042	48 39 44 24 38	 cmp	 QWORD PTR defaults$[rsp], rax
  00047	75 0b		 jne	 SHORT $LN8@PyFunction@6

; 123  :         defaults = NULL;

  00049	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR defaults$[rsp], 0
  00052	eb 46		 jmp	 SHORT $LN7@PyFunction@6
$LN8@PyFunction@6:

; 124  :     else if (defaults && PyTuple_Check(defaults)) {

  00054	48 83 7c 24 38
	00		 cmp	 QWORD PTR defaults$[rsp], 0
  0005a	74 24		 je	 SHORT $LN6@PyFunction@6
  0005c	48 8b 44 24 38	 mov	 rax, QWORD PTR defaults$[rsp]
  00061	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00065	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0006b	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00070	85 c0		 test	 eax, eax
  00072	74 0c		 je	 SHORT $LN6@PyFunction@6

; 125  :         Py_INCREF(defaults);

  00074	48 8b 4c 24 38	 mov	 rcx, QWORD PTR defaults$[rsp]
  00079	e8 00 00 00 00	 call	 _Py_IncRef

; 126  :     }
; 127  :     else {

  0007e	eb 1a		 jmp	 SHORT $LN5@PyFunction@6
$LN6@PyFunction@6:

; 128  :         PyErr_SetString(PyExc_SystemError, "non-tuple default args");

  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@OJNHLFDM@non?9tuple?5default?5args?$AA@
  00087	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0008e	e8 00 00 00 00	 call	 PyErr_SetString

; 129  :         return -1;

  00093	b8 ff ff ff ff	 mov	 eax, -1
  00098	eb 30		 jmp	 SHORT $LN10@PyFunction@6
$LN5@PyFunction@6:
$LN7@PyFunction@6:
$LN4@PyFunction@6:

; 130  :     }
; 131  :     Py_XDECREF(((PyFunctionObject *) op) -> func_defaults);

  0009a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0009f	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  000a4	74 0e		 je	 SHORT $LN1@PyFunction@6
  000a6	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000ab	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000af	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyFunction@6:
  000b4	33 c0		 xor	 eax, eax
  000b6	85 c0		 test	 eax, eax
  000b8	75 e0		 jne	 SHORT $LN4@PyFunction@6

; 132  :     ((PyFunctionObject *) op) -> func_defaults = defaults;

  000ba	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000bf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR defaults$[rsp]
  000c4	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 133  :     return 0;

  000c8	33 c0		 xor	 eax, eax
$LN10@PyFunction@6:

; 134  : }

  000ca	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ce	c3		 ret	 0
PyFunction_SetDefaults ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetKwDefaults
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetKwDefaults DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$PyFunction_GetKwDefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetKwDefaults DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFunction_GetKwDefaults
_TEXT	SEGMENT
op$ = 48
PyFunction_GetKwDefaults PROC				; COMDAT

; 138  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 139  :     if (!PyFunction_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyFunction@7

; 140  :         PyErr_BadInternalCall();

  0001b	ba 8c 00 00 00	 mov	 edx, 140		; 0000008cH
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 141  :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 09		 jmp	 SHORT $LN2@PyFunction@7
$LN1@PyFunction@7:

; 142  :     }
; 143  :     return ((PyFunctionObject *) op) -> func_kwdefaults;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00035	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
$LN2@PyFunction@7:

; 144  : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
PyFunction_GetKwDefaults ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@IDDIIAFL@non?9dict?5keyword?5only?5default?5ar@ ; `string'
PUBLIC	PyFunction_SetKwDefaults
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_SetKwDefaults DD imagerel $LN12
	DD	imagerel $LN12+207
	DD	imagerel $unwind$PyFunction_SetKwDefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_SetKwDefaults DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0CD@IDDIIAFL@non?9dict?5keyword?5only?5default?5ar@
CONST	SEGMENT
??_C@_0CD@IDDIIAFL@non?9dict?5keyword?5only?5default?5ar@ DB 'non-dict ke'
	DB	'yword only default args', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFunction_SetKwDefaults
_TEXT	SEGMENT
op$ = 48
defaults$ = 56
PyFunction_SetKwDefaults PROC				; COMDAT

; 148  : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 149  :     if (!PyFunction_Check(op)) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 1b		 je	 SHORT $LN9@PyFunction@8

; 150  :         PyErr_BadInternalCall();

  00020	ba 96 00 00 00	 mov	 edx, 150		; 00000096H
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0002c	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 151  :         return -1;

  00031	b8 ff ff ff ff	 mov	 eax, -1
  00036	e9 8f 00 00 00	 jmp	 $LN10@PyFunction@8
$LN9@PyFunction@8:

; 152  :     }
; 153  :     if (defaults == Py_None)

  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00042	48 39 44 24 38	 cmp	 QWORD PTR defaults$[rsp], rax
  00047	75 0b		 jne	 SHORT $LN8@PyFunction@8

; 154  :         defaults = NULL;

  00049	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR defaults$[rsp], 0
  00052	eb 46		 jmp	 SHORT $LN7@PyFunction@8
$LN8@PyFunction@8:

; 155  :     else if (defaults && PyDict_Check(defaults)) {

  00054	48 83 7c 24 38
	00		 cmp	 QWORD PTR defaults$[rsp], 0
  0005a	74 24		 je	 SHORT $LN6@PyFunction@8
  0005c	48 8b 44 24 38	 mov	 rax, QWORD PTR defaults$[rsp]
  00061	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00065	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0006b	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00070	85 c0		 test	 eax, eax
  00072	74 0c		 je	 SHORT $LN6@PyFunction@8

; 156  :         Py_INCREF(defaults);

  00074	48 8b 4c 24 38	 mov	 rcx, QWORD PTR defaults$[rsp]
  00079	e8 00 00 00 00	 call	 _Py_IncRef

; 157  :     }
; 158  :     else {

  0007e	eb 1a		 jmp	 SHORT $LN5@PyFunction@8
$LN6@PyFunction@8:

; 159  :         PyErr_SetString(PyExc_SystemError,
; 160  :                         "non-dict keyword only default args");

  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@IDDIIAFL@non?9dict?5keyword?5only?5default?5ar@
  00087	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0008e	e8 00 00 00 00	 call	 PyErr_SetString

; 161  :         return -1;

  00093	b8 ff ff ff ff	 mov	 eax, -1
  00098	eb 30		 jmp	 SHORT $LN10@PyFunction@8
$LN5@PyFunction@8:
$LN7@PyFunction@8:
$LN4@PyFunction@8:

; 162  :     }
; 163  :     Py_XDECREF(((PyFunctionObject *)op) -> func_kwdefaults);

  0009a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0009f	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  000a4	74 0e		 je	 SHORT $LN1@PyFunction@8
  000a6	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000ab	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  000af	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyFunction@8:
  000b4	33 c0		 xor	 eax, eax
  000b6	85 c0		 test	 eax, eax
  000b8	75 e0		 jne	 SHORT $LN4@PyFunction@8

; 164  :     ((PyFunctionObject *) op) -> func_kwdefaults = defaults;

  000ba	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000bf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR defaults$[rsp]
  000c4	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 165  :     return 0;

  000c8	33 c0		 xor	 eax, eax
$LN10@PyFunction@8:

; 166  : }

  000ca	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ce	c3		 ret	 0
PyFunction_SetKwDefaults ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetClosure
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetClosure DD imagerel $LN4
	DD	imagerel $LN4+65
	DD	imagerel $unwind$PyFunction_GetClosure
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetClosure DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFunction_GetClosure
_TEXT	SEGMENT
op$ = 48
PyFunction_GetClosure PROC				; COMDAT

; 170  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 171  :     if (!PyFunction_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyFunction@9

; 172  :         PyErr_BadInternalCall();

  0001b	ba ac 00 00 00	 mov	 edx, 172		; 000000acH
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 173  :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 0c		 jmp	 SHORT $LN2@PyFunction@9
$LN1@PyFunction@9:

; 174  :     }
; 175  :     return ((PyFunctionObject *) op) -> func_closure;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00035	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
$LN2@PyFunction@9:

; 176  : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
PyFunction_GetClosure ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@HLBJBIII@expected?5tuple?5for?5closure?0?5got?5@ ; `string'
PUBLIC	PyFunction_SetClosure
EXTRN	PyErr_Format:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_SetClosure DD imagerel $LN12
	DD	imagerel $LN12+221
	DD	imagerel $unwind$PyFunction_SetClosure
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_SetClosure DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0CJ@HLBJBIII@expected?5tuple?5for?5closure?0?5got?5@
CONST	SEGMENT
??_C@_0CJ@HLBJBIII@expected?5tuple?5for?5closure?0?5got?5@ DB 'expected t'
	DB	'uple for closure, got ''%.100s''', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFunction_SetClosure
_TEXT	SEGMENT
op$ = 48
closure$ = 56
PyFunction_SetClosure PROC				; COMDAT

; 180  : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 181  :     if (!PyFunction_Check(op)) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 1b		 je	 SHORT $LN9@PyFunction@10

; 182  :         PyErr_BadInternalCall();

  00020	ba b6 00 00 00	 mov	 edx, 182		; 000000b6H
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0002c	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 183  :         return -1;

  00031	b8 ff ff ff ff	 mov	 eax, -1
  00036	e9 9d 00 00 00	 jmp	 $LN10@PyFunction@10
$LN9@PyFunction@10:

; 184  :     }
; 185  :     if (closure == Py_None)

  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00042	48 39 44 24 38	 cmp	 QWORD PTR closure$[rsp], rax
  00047	75 0b		 jne	 SHORT $LN8@PyFunction@10

; 186  :         closure = NULL;

  00049	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR closure$[rsp], 0
  00052	eb 4b		 jmp	 SHORT $LN7@PyFunction@10
$LN8@PyFunction@10:

; 187  :     else if (PyTuple_Check(closure)) {

  00054	48 8b 44 24 38	 mov	 rax, QWORD PTR closure$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00068	85 c0		 test	 eax, eax
  0006a	74 0c		 je	 SHORT $LN6@PyFunction@10

; 188  :         Py_INCREF(closure);

  0006c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR closure$[rsp]
  00071	e8 00 00 00 00	 call	 _Py_IncRef

; 189  :     }
; 190  :     else {

  00076	eb 27		 jmp	 SHORT $LN5@PyFunction@10
$LN6@PyFunction@10:

; 191  :         PyErr_Format(PyExc_SystemError,
; 192  :                      "expected tuple for closure, got '%.100s'",
; 193  :                      closure->ob_type->tp_name);

  00078	48 8b 44 24 38	 mov	 rax, QWORD PTR closure$[rsp]
  0007d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00081	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HLBJBIII@expected?5tuple?5for?5closure?0?5got?5@
  0008c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00093	e8 00 00 00 00	 call	 PyErr_Format

; 194  :         return -1;

  00098	b8 ff ff ff ff	 mov	 eax, -1
  0009d	eb 39		 jmp	 SHORT $LN10@PyFunction@10
$LN5@PyFunction@10:
$LN7@PyFunction@10:
$LN4@PyFunction@10:

; 195  :     }
; 196  :     Py_XDECREF(((PyFunctionObject *) op) -> func_closure);

  0009f	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000a4	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000ac	74 11		 je	 SHORT $LN1@PyFunction@10
  000ae	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000b3	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000ba	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyFunction@10:
  000bf	33 c0		 xor	 eax, eax
  000c1	85 c0		 test	 eax, eax
  000c3	75 da		 jne	 SHORT $LN4@PyFunction@10

; 197  :     ((PyFunctionObject *) op) -> func_closure = closure;

  000c5	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000ca	48 8b 4c 24 38	 mov	 rcx, QWORD PTR closure$[rsp]
  000cf	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 198  :     return 0;

  000d6	33 c0		 xor	 eax, eax
$LN10@PyFunction@10:

; 199  : }

  000d8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000dc	c3		 ret	 0
PyFunction_SetClosure ENDP
_TEXT	ENDS
PUBLIC	PyFunction_GetAnnotations
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_GetAnnotations DD imagerel $LN4
	DD	imagerel $LN4+65
	DD	imagerel $unwind$PyFunction_GetAnnotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_GetAnnotations DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFunction_GetAnnotations
_TEXT	SEGMENT
op$ = 48
PyFunction_GetAnnotations PROC				; COMDAT

; 203  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 204  :     if (!PyFunction_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyFunction@11

; 205  :         PyErr_BadInternalCall();

  0001b	ba cd 00 00 00	 mov	 edx, 205		; 000000cdH
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 206  :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 0c		 jmp	 SHORT $LN2@PyFunction@11
$LN1@PyFunction@11:

; 207  :     }
; 208  :     return ((PyFunctionObject *) op) -> func_annotations;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00035	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
$LN2@PyFunction@11:

; 209  : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
PyFunction_GetAnnotations ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@CCEGMAHM@non?9dict?5annotations?$AA@	; `string'
PUBLIC	PyFunction_SetAnnotations
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFunction_SetAnnotations DD imagerel $LN12
	DD	imagerel $LN12+216
	DD	imagerel $unwind$PyFunction_SetAnnotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFunction_SetAnnotations DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BF@CCEGMAHM@non?9dict?5annotations?$AA@
CONST	SEGMENT
??_C@_0BF@CCEGMAHM@non?9dict?5annotations?$AA@ DB 'non-dict annotations', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFunction_SetAnnotations
_TEXT	SEGMENT
op$ = 48
annotations$ = 56
PyFunction_SetAnnotations PROC				; COMDAT

; 213  : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 214  :     if (!PyFunction_Check(op)) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 1b		 je	 SHORT $LN9@PyFunction@12

; 215  :         PyErr_BadInternalCall();

  00020	ba d7 00 00 00	 mov	 edx, 215		; 000000d7H
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0002c	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 216  :         return -1;

  00031	b8 ff ff ff ff	 mov	 eax, -1
  00036	e9 98 00 00 00	 jmp	 $LN10@PyFunction@12
$LN9@PyFunction@12:

; 217  :     }
; 218  :     if (annotations == Py_None)

  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00042	48 39 44 24 38	 cmp	 QWORD PTR annotations$[rsp], rax
  00047	75 0b		 jne	 SHORT $LN8@PyFunction@12

; 219  :         annotations = NULL;

  00049	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR annotations$[rsp], 0
  00052	eb 46		 jmp	 SHORT $LN7@PyFunction@12
$LN8@PyFunction@12:

; 220  :     else if (annotations && PyDict_Check(annotations)) {

  00054	48 83 7c 24 38
	00		 cmp	 QWORD PTR annotations$[rsp], 0
  0005a	74 24		 je	 SHORT $LN6@PyFunction@12
  0005c	48 8b 44 24 38	 mov	 rax, QWORD PTR annotations$[rsp]
  00061	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00065	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0006b	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00070	85 c0		 test	 eax, eax
  00072	74 0c		 je	 SHORT $LN6@PyFunction@12

; 221  :         Py_INCREF(annotations);

  00074	48 8b 4c 24 38	 mov	 rcx, QWORD PTR annotations$[rsp]
  00079	e8 00 00 00 00	 call	 _Py_IncRef

; 222  :     }
; 223  :     else {

  0007e	eb 1a		 jmp	 SHORT $LN5@PyFunction@12
$LN6@PyFunction@12:

; 224  :         PyErr_SetString(PyExc_SystemError,
; 225  :                         "non-dict annotations");

  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@CCEGMAHM@non?9dict?5annotations?$AA@
  00087	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0008e	e8 00 00 00 00	 call	 PyErr_SetString

; 226  :         return -1;

  00093	b8 ff ff ff ff	 mov	 eax, -1
  00098	eb 39		 jmp	 SHORT $LN10@PyFunction@12
$LN5@PyFunction@12:
$LN7@PyFunction@12:
$LN4@PyFunction@12:

; 227  :     }
; 228  :     Py_XDECREF(((PyFunctionObject *)op) -> func_annotations);

  0009a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0009f	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  000a7	74 11		 je	 SHORT $LN1@PyFunction@12
  000a9	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000ae	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  000b5	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyFunction@12:
  000ba	33 c0		 xor	 eax, eax
  000bc	85 c0		 test	 eax, eax
  000be	75 da		 jne	 SHORT $LN4@PyFunction@12

; 229  :     ((PyFunctionObject *) op) -> func_annotations = annotations;

  000c0	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000c5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR annotations$[rsp]
  000ca	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx

; 230  :     return 0;

  000d1	33 c0		 xor	 eax, eax
$LN10@PyFunction@12:

; 231  : }

  000d3	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d7	c3		 ret	 0
PyFunction_SetAnnotations ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_get_code DD imagerel func_get_code
	DD	imagerel func_get_code+37
	DD	imagerel $unwind$func_get_code
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_code DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT func_get_code
_TEXT	SEGMENT
op$ = 48
func_get_code PROC					; COMDAT

; 249  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 250  :     Py_INCREF(op->func_code);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00012	e8 00 00 00 00	 call	 _Py_IncRef

; 251  :     return op->func_code;

  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0001c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 252  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
func_get_code ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DI@HAGAGOD@?$CFU?$CI?$CJ?5requires?5a?5code?5object?5with@ ; `string'
PUBLIC	??_C@_0CG@CGGDIFKC@__code__?5must?5be?5set?5to?5a?5code?5o@ ; `string'
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyCode_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_set_code DD imagerel func_set_code
	DD	imagerel func_set_code+267
	DD	imagerel $unwind$func_set_code
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_code DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0DI@HAGAGOD@?$CFU?$CI?$CJ?5requires?5a?5code?5object?5with@
CONST	SEGMENT
??_C@_0DI@HAGAGOD@?$CFU?$CI?$CJ?5requires?5a?5code?5object?5with@ DB '%U('
	DB	') requires a code object with %zd free vars, not %zd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CGGDIFKC@__code__?5must?5be?5set?5to?5a?5code?5o@
CONST	SEGMENT
??_C@_0CG@CGGDIFKC@__code__?5must?5be?5set?5to?5a?5code?5o@ DB '__code__ '
	DB	'must be set to a code object', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT func_set_code
_TEXT	SEGMENT
nclosure$ = 48
nfree$ = 56
tmp$ = 64
tv75 = 72
op$ = 96
value$ = 104
func_set_code PROC					; COMDAT

; 256  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 257  :     PyObject *tmp;
; 258  :     Py_ssize_t nfree, nclosure;
; 259  : 
; 260  :     /* Not legal to del f.func_code or to set it to anything
; 261  :      * other than a code object. */
; 262  :     if (value == NULL || !PyCode_Check(value)) {

  0000e	48 83 7c 24 68
	00		 cmp	 QWORD PTR value$[rsp], 0
  00014	74 12		 je	 SHORT $LN2@func_set_c
  00016	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  0001d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR value$[rsp]
  00022	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00026	74 1d		 je	 SHORT $LN3@func_set_c
$LN2@func_set_c:

; 263  :         PyErr_SetString(PyExc_TypeError,
; 264  :                         "__code__ must be set to a code object");

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@CGGDIFKC@__code__?5must?5be?5set?5to?5a?5code?5o@
  0002f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00036	e8 00 00 00 00	 call	 PyErr_SetString

; 265  :         return -1;

  0003b	b8 ff ff ff ff	 mov	 eax, -1
  00040	e9 c1 00 00 00	 jmp	 $LN4@func_set_c
$LN3@func_set_c:

; 266  :     }
; 267  :     nfree = PyCode_GetNumFree((PyCodeObject *)value);

  00045	48 8b 44 24 68	 mov	 rax, QWORD PTR value$[rsp]
  0004a	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00051	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00055	48 89 44 24 38	 mov	 QWORD PTR nfree$[rsp], rax

; 268  :     nclosure = (op->func_closure == NULL ? 0 :
; 269  :             PyTuple_GET_SIZE(op->func_closure));

  0005a	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  0005f	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00067	75 0b		 jne	 SHORT $LN6@func_set_c
  00069	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv75[rsp], 0
  00072	eb 15		 jmp	 SHORT $LN7@func_set_c
$LN6@func_set_c:
  00074	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  00079	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00080	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00084	48 89 44 24 48	 mov	 QWORD PTR tv75[rsp], rax
$LN7@func_set_c:
  00089	48 8b 44 24 48	 mov	 rax, QWORD PTR tv75[rsp]
  0008e	48 89 44 24 30	 mov	 QWORD PTR nclosure$[rsp], rax

; 270  :     if (nclosure != nfree) {

  00093	48 8b 44 24 38	 mov	 rax, QWORD PTR nfree$[rsp]
  00098	48 39 44 24 30	 cmp	 QWORD PTR nclosure$[rsp], rax
  0009d	74 35		 je	 SHORT $LN1@func_set_c

; 271  :         PyErr_Format(PyExc_ValueError,
; 272  :                      "%U() requires a code object with %zd free vars,"
; 273  :                      " not %zd",
; 274  :                      op->func_name,
; 275  :                      nclosure, nfree);

  0009f	48 8b 44 24 38	 mov	 rax, QWORD PTR nfree$[rsp]
  000a4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a9	4c 8b 4c 24 30	 mov	 r9, QWORD PTR nclosure$[rsp]
  000ae	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  000b3	4c 8b 80 90 00
	00 00		 mov	 r8, QWORD PTR [rax+144]
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@HAGAGOD@?$CFU?$CI?$CJ?5requires?5a?5code?5object?5with@
  000c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000c8	e8 00 00 00 00	 call	 PyErr_Format

; 276  :         return -1;

  000cd	b8 ff ff ff ff	 mov	 eax, -1
  000d2	eb 32		 jmp	 SHORT $LN4@func_set_c
$LN1@func_set_c:

; 277  :     }
; 278  :     tmp = op->func_code;

  000d4	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  000d9	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000dd	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 279  :     Py_INCREF(value);

  000e2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR value$[rsp]
  000e7	e8 00 00 00 00	 call	 _Py_IncRef

; 280  :     op->func_code = value;

  000ec	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  000f1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR value$[rsp]
  000f6	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 281  :     Py_DECREF(tmp);

  000fa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tmp$[rsp]
  000ff	e8 00 00 00 00	 call	 _Py_DecRef

; 282  :     return 0;

  00104	33 c0		 xor	 eax, eax
$LN4@func_set_c:

; 283  : }

  00106	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0010a	c3		 ret	 0
func_set_code ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_get_name DD imagerel func_get_name
	DD	imagerel func_get_name+43
	DD	imagerel $unwind$func_get_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_name DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT func_get_name
_TEXT	SEGMENT
op$ = 48
func_get_name PROC					; COMDAT

; 287  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 288  :     Py_INCREF(op->func_name);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  00015	e8 00 00 00 00	 call	 _Py_IncRef

; 289  :     return op->func_name;

  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0001f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]

; 290  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
func_get_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@MKBEOINH@__name__?5must?5be?5set?5to?5a?5string@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_set_name DD imagerel func_set_name
	DD	imagerel func_set_name+133
	DD	imagerel $unwind$func_set_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_name DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CI@MKBEOINH@__name__?5must?5be?5set?5to?5a?5string@
CONST	SEGMENT
??_C@_0CI@MKBEOINH@__name__?5must?5be?5set?5to?5a?5string@ DB '__name__ m'
	DB	'ust be set to a string object', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT func_set_name
_TEXT	SEGMENT
tmp$ = 32
op$ = 64
value$ = 72
func_set_name PROC					; COMDAT

; 294  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 295  :     PyObject *tmp;
; 296  : 
; 297  :     /* Not legal to del f.func_name or to set it to anything
; 298  :      * other than a string object. */
; 299  :     if (value == NULL || !PyUnicode_Check(value)) {

  0000e	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00014	74 18		 je	 SHORT $LN1@func_set_n
  00016	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  0001b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00025	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0002a	85 c0		 test	 eax, eax
  0002c	75 1a		 jne	 SHORT $LN2@func_set_n
$LN1@func_set_n:

; 300  :         PyErr_SetString(PyExc_TypeError,
; 301  :                         "__name__ must be set to a string object");

  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@MKBEOINH@__name__?5must?5be?5set?5to?5a?5string@
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0003c	e8 00 00 00 00	 call	 PyErr_SetString

; 302  :         return -1;

  00041	b8 ff ff ff ff	 mov	 eax, -1
  00046	eb 38		 jmp	 SHORT $LN3@func_set_n
$LN2@func_set_n:

; 303  :     }
; 304  :     tmp = op->func_name;

  00048	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0004d	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00054	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax

; 305  :     Py_INCREF(value);

  00059	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0005e	e8 00 00 00 00	 call	 _Py_IncRef

; 306  :     op->func_name = value;

  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00068	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0006d	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx

; 307  :     Py_DECREF(tmp);

  00074	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  00079	e8 00 00 00 00	 call	 _Py_DecRef

; 308  :     return 0;

  0007e	33 c0		 xor	 eax, eax
$LN3@func_set_n:

; 309  : }

  00080	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00084	c3		 ret	 0
func_set_name ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_get_qualname DD imagerel func_get_qualname
	DD	imagerel func_get_qualname+43
	DD	imagerel $unwind$func_get_qualname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_qualname DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT func_get_qualname
_TEXT	SEGMENT
op$ = 48
func_get_qualname PROC					; COMDAT

; 313  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 314  :     Py_INCREF(op->func_qualname);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00015	e8 00 00 00 00	 call	 _Py_IncRef

; 315  :     return op->func_qualname;

  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0001f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]

; 316  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
func_get_qualname ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@JKMIGKFJ@__qualname__?5must?5be?5set?5to?5a?5st@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_set_qualname DD imagerel func_set_qualname
	DD	imagerel func_set_qualname+133
	DD	imagerel $unwind$func_set_qualname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_qualname DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CM@JKMIGKFJ@__qualname__?5must?5be?5set?5to?5a?5st@
CONST	SEGMENT
??_C@_0CM@JKMIGKFJ@__qualname__?5must?5be?5set?5to?5a?5st@ DB '__qualname'
	DB	'__ must be set to a string object', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT func_set_qualname
_TEXT	SEGMENT
tmp$ = 32
op$ = 64
value$ = 72
func_set_qualname PROC					; COMDAT

; 320  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 321  :     PyObject *tmp;
; 322  : 
; 323  :     /* Not legal to del f.__qualname__ or to set it to anything
; 324  :      * other than a string object. */
; 325  :     if (value == NULL || !PyUnicode_Check(value)) {

  0000e	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00014	74 18		 je	 SHORT $LN1@func_set_q
  00016	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  0001b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00025	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0002a	85 c0		 test	 eax, eax
  0002c	75 1a		 jne	 SHORT $LN2@func_set_q
$LN1@func_set_q:

; 326  :         PyErr_SetString(PyExc_TypeError,
; 327  :                         "__qualname__ must be set to a string object");

  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@JKMIGKFJ@__qualname__?5must?5be?5set?5to?5a?5st@
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0003c	e8 00 00 00 00	 call	 PyErr_SetString

; 328  :         return -1;

  00041	b8 ff ff ff ff	 mov	 eax, -1
  00046	eb 38		 jmp	 SHORT $LN3@func_set_q
$LN2@func_set_q:

; 329  :     }
; 330  :     tmp = op->func_qualname;

  00048	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0004d	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00054	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax

; 331  :     Py_INCREF(value);

  00059	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0005e	e8 00 00 00 00	 call	 _Py_IncRef

; 332  :     op->func_qualname = value;

  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00068	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0006d	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx

; 333  :     Py_DECREF(tmp);

  00074	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  00079	e8 00 00 00 00	 call	 _Py_DecRef

; 334  :     return 0;

  0007e	33 c0		 xor	 eax, eax
$LN3@func_set_q:

; 335  : }

  00080	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00084	c3		 ret	 0
func_set_qualname ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_get_defaults DD imagerel func_get_defaults
	DD	imagerel func_get_defaults+70
	DD	imagerel $unwind$func_get_defaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_defaults DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT func_get_defaults
_TEXT	SEGMENT
op$ = 48
func_get_defaults PROC					; COMDAT

; 339  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 340  :     if (op->func_defaults == NULL) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00013	75 15		 jne	 SHORT $LN1@func_get_d

; 341  :         Py_INCREF(Py_None);

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001c	e8 00 00 00 00	 call	 _Py_IncRef

; 342  :         return Py_None;

  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00028	eb 17		 jmp	 SHORT $LN2@func_get_d
$LN1@func_get_d:

; 343  :     }
; 344  :     Py_INCREF(op->func_defaults);

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0002f	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00033	e8 00 00 00 00	 call	 _Py_IncRef

; 345  :     return op->func_defaults;

  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0003d	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
$LN2@func_get_d:

; 346  : }

  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
func_get_defaults ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@DACEFHLM@__defaults__?5must?5be?5set?5to?5a?5tu@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_set_defaults DD imagerel func_set_defaults
	DD	imagerel func_set_defaults+178
	DD	imagerel $unwind$func_set_defaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_defaults DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CL@DACEFHLM@__defaults__?5must?5be?5set?5to?5a?5tu@
CONST	SEGMENT
??_C@_0CL@DACEFHLM@__defaults__?5must?5be?5set?5to?5a?5tu@ DB '__defaults'
	DB	'__ must be set to a tuple object', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT func_set_defaults
_TEXT	SEGMENT
tmp$ = 32
op$ = 64
value$ = 72
func_set_defaults PROC					; COMDAT

; 350  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 351  :     PyObject *tmp;
; 352  : 
; 353  :     /* Legal to del f.func_defaults.
; 354  :      * Can only set func_defaults to NULL or a tuple. */
; 355  :     if (value == Py_None)

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 39 44 24 48	 cmp	 QWORD PTR value$[rsp], rax
  0001a	75 09		 jne	 SHORT $LN10@func_set_d

; 356  :         value = NULL;

  0001c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0
$LN10@func_set_d:

; 357  :     if (value != NULL && !PyTuple_Check(value)) {

  00025	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  0002b	74 32		 je	 SHORT $LN9@func_set_d
  0002d	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  00032	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00036	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003c	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00041	85 c0		 test	 eax, eax
  00043	75 1a		 jne	 SHORT $LN9@func_set_d

; 358  :         PyErr_SetString(PyExc_TypeError,
; 359  :                         "__defaults__ must be set to a tuple object");

  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@DACEFHLM@__defaults__?5must?5be?5set?5to?5a?5tu@
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00053	e8 00 00 00 00	 call	 PyErr_SetString

; 360  :         return -1;

  00058	b8 ff ff ff ff	 mov	 eax, -1
  0005d	eb 4e		 jmp	 SHORT $LN11@func_set_d
$LN9@func_set_d:

; 361  :     }
; 362  :     tmp = op->func_defaults;

  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00064	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00068	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax
$LN8@func_set_d:

; 363  :     Py_XINCREF(value);

  0006d	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00073	74 0a		 je	 SHORT $LN5@func_set_d
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0007a	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@func_set_d:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 e8		 jne	 SHORT $LN8@func_set_d

; 364  :     op->func_defaults = value;

  00085	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0008a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0008f	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx
$LN4@func_set_d:

; 365  :     Py_XDECREF(tmp);

  00093	48 83 7c 24 20
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00099	74 0a		 je	 SHORT $LN1@func_set_d
  0009b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  000a0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@func_set_d:
  000a5	33 c0		 xor	 eax, eax
  000a7	85 c0		 test	 eax, eax
  000a9	75 e8		 jne	 SHORT $LN4@func_set_d

; 366  :     return 0;

  000ab	33 c0		 xor	 eax, eax
$LN11@func_set_d:

; 367  : }

  000ad	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b1	c3		 ret	 0
func_set_defaults ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_get_kwdefaults DD imagerel func_get_kwdefaults
	DD	imagerel func_get_kwdefaults+70
	DD	imagerel $unwind$func_get_kwdefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_kwdefaults DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT func_get_kwdefaults
_TEXT	SEGMENT
op$ = 48
func_get_kwdefaults PROC				; COMDAT

; 371  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 372  :     if (op->func_kwdefaults == NULL) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00013	75 15		 jne	 SHORT $LN1@func_get_k@2

; 373  :         Py_INCREF(Py_None);

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001c	e8 00 00 00 00	 call	 _Py_IncRef

; 374  :         return Py_None;

  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00028	eb 17		 jmp	 SHORT $LN2@func_get_k@2
$LN1@func_get_k@2:

; 375  :     }
; 376  :     Py_INCREF(op->func_kwdefaults);

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0002f	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00033	e8 00 00 00 00	 call	 _Py_IncRef

; 377  :     return op->func_kwdefaults;

  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0003d	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
$LN2@func_get_k@2:

; 378  : }

  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
func_get_kwdefaults ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@LNEHMENK@__kwdefaults__?5must?5be?5set?5to?5a?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_set_kwdefaults DD imagerel func_set_kwdefaults
	DD	imagerel func_set_kwdefaults+178
	DD	imagerel $unwind$func_set_kwdefaults
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_kwdefaults DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CM@LNEHMENK@__kwdefaults__?5must?5be?5set?5to?5a?5@
CONST	SEGMENT
??_C@_0CM@LNEHMENK@__kwdefaults__?5must?5be?5set?5to?5a?5@ DB '__kwdefaul'
	DB	'ts__ must be set to a dict object', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT func_set_kwdefaults
_TEXT	SEGMENT
tmp$ = 32
op$ = 64
value$ = 72
func_set_kwdefaults PROC				; COMDAT

; 382  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 383  :     PyObject *tmp;
; 384  : 
; 385  :     if (value == Py_None)

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 39 44 24 48	 cmp	 QWORD PTR value$[rsp], rax
  0001a	75 09		 jne	 SHORT $LN10@func_set_k

; 386  :         value = NULL;

  0001c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0
$LN10@func_set_k:

; 387  :     /* Legal to del f.func_kwdefaults.
; 388  :      * Can only set func_kwdefaults to NULL or a dict. */
; 389  :     if (value != NULL && !PyDict_Check(value)) {

  00025	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  0002b	74 32		 je	 SHORT $LN9@func_set_k
  0002d	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  00032	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00036	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003c	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00041	85 c0		 test	 eax, eax
  00043	75 1a		 jne	 SHORT $LN9@func_set_k

; 390  :         PyErr_SetString(PyExc_TypeError,
; 391  :             "__kwdefaults__ must be set to a dict object");

  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@LNEHMENK@__kwdefaults__?5must?5be?5set?5to?5a?5@
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00053	e8 00 00 00 00	 call	 PyErr_SetString

; 392  :         return -1;

  00058	b8 ff ff ff ff	 mov	 eax, -1
  0005d	eb 4e		 jmp	 SHORT $LN11@func_set_k
$LN9@func_set_k:

; 393  :     }
; 394  :     tmp = op->func_kwdefaults;

  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00064	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00068	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax
$LN8@func_set_k:

; 395  :     Py_XINCREF(value);

  0006d	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00073	74 0a		 je	 SHORT $LN5@func_set_k
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0007a	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@func_set_k:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 e8		 jne	 SHORT $LN8@func_set_k

; 396  :     op->func_kwdefaults = value;

  00085	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0008a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0008f	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx
$LN4@func_set_k:

; 397  :     Py_XDECREF(tmp);

  00093	48 83 7c 24 20
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00099	74 0a		 je	 SHORT $LN1@func_set_k
  0009b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  000a0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@func_set_k:
  000a5	33 c0		 xor	 eax, eax
  000a7	85 c0		 test	 eax, eax
  000a9	75 e8		 jne	 SHORT $LN4@func_set_k

; 398  :     return 0;

  000ab	33 c0		 xor	 eax, eax
$LN11@func_set_k:

; 399  : }

  000ad	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b1	c3		 ret	 0
func_set_kwdefaults ENDP
_TEXT	ENDS
EXTRN	PyDict_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_get_annotations DD imagerel func_get_annotations
	DD	imagerel func_get_annotations+94
	DD	imagerel $unwind$func_get_annotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_get_annotations DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT func_get_annotations
_TEXT	SEGMENT
op$ = 48
func_get_annotations PROC				; COMDAT

; 403  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 404  :     if (op->func_annotations == NULL) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  00016	75 24		 jne	 SHORT $LN2@func_get_a

; 405  :         op->func_annotations = PyDict_New();

  00018	e8 00 00 00 00	 call	 PyDict_New
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00022	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax

; 406  :         if (op->func_annotations == NULL)

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0002e	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  00036	75 04		 jne	 SHORT $LN1@func_get_a

; 407  :             return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 1d		 jmp	 SHORT $LN3@func_get_a
$LN1@func_get_a:
$LN2@func_get_a:

; 408  :     }
; 409  :     Py_INCREF(op->func_annotations);

  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  00048	e8 00 00 00 00	 call	 _Py_IncRef

; 410  :     return op->func_annotations;

  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00052	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
$LN3@func_get_a:

; 411  : }

  00059	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005d	c3		 ret	 0
func_get_annotations ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@OOCMHJF@__annotations__?5must?5be?5set?5to?5a@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_set_annotations DD imagerel func_set_annotations
	DD	imagerel func_set_annotations+184
	DD	imagerel $unwind$func_set_annotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_set_annotations DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CN@OOCMHJF@__annotations__?5must?5be?5set?5to?5a@
CONST	SEGMENT
??_C@_0CN@OOCMHJF@__annotations__?5must?5be?5set?5to?5a@ DB '__annotation'
	DB	's__ must be set to a dict object', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT func_set_annotations
_TEXT	SEGMENT
tmp$ = 32
op$ = 64
value$ = 72
func_set_annotations PROC				; COMDAT

; 415  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 416  :     PyObject *tmp;
; 417  : 
; 418  :     if (value == Py_None)

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 39 44 24 48	 cmp	 QWORD PTR value$[rsp], rax
  0001a	75 09		 jne	 SHORT $LN10@func_set_a

; 419  :         value = NULL;

  0001c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0
$LN10@func_set_a:

; 420  :     /* Legal to del f.func_annotations.
; 421  :      * Can only set func_annotations to NULL (through C api)
; 422  :      * or a dict. */
; 423  :     if (value != NULL && !PyDict_Check(value)) {

  00025	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  0002b	74 32		 je	 SHORT $LN9@func_set_a
  0002d	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  00032	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00036	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003c	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00041	85 c0		 test	 eax, eax
  00043	75 1a		 jne	 SHORT $LN9@func_set_a

; 424  :         PyErr_SetString(PyExc_TypeError,
; 425  :             "__annotations__ must be set to a dict object");

  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@OOCMHJF@__annotations__?5must?5be?5set?5to?5a@
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00053	e8 00 00 00 00	 call	 PyErr_SetString

; 426  :         return -1;

  00058	b8 ff ff ff ff	 mov	 eax, -1
  0005d	eb 54		 jmp	 SHORT $LN11@func_set_a
$LN9@func_set_a:

; 427  :     }
; 428  :     tmp = op->func_annotations;

  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00064	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  0006b	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax
$LN8@func_set_a:

; 429  :     Py_XINCREF(value);

  00070	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00076	74 0a		 je	 SHORT $LN5@func_set_a
  00078	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0007d	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@func_set_a:
  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 e8		 jne	 SHORT $LN8@func_set_a

; 430  :     op->func_annotations = value;

  00088	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0008d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  00092	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx
$LN4@func_set_a:

; 431  :     Py_XDECREF(tmp);

  00099	48 83 7c 24 20
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0009f	74 0a		 je	 SHORT $LN1@func_set_a
  000a1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  000a6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@func_set_a:
  000ab	33 c0		 xor	 eax, eax
  000ad	85 c0		 test	 eax, eax
  000af	75 e8		 jne	 SHORT $LN4@func_set_a

; 432  :     return 0;

  000b1	33 c0		 xor	 eax, eax
$LN11@func_set_a:

; 433  : }

  000b3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b7	c3		 ret	 0
func_set_annotations ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@GNAFNEHE@arg?55?5?$CIclosure?$CJ?5expected?5cell?0?5f@ ; `string'
PUBLIC	??_C@_0CL@BKMGEEEG@?$CFU?5requires?5closure?5of?5length?5?$CFz@ ; `string'
PUBLIC	??_C@_0CG@HCGKHFPP@arg?55?5?$CIclosure?$CJ?5must?5be?5None?5or?5@ ; `string'
PUBLIC	??_C@_0BO@ODAHAPLA@arg?55?5?$CIclosure?$CJ?5must?5be?5tuple?$AA@ ; `string'
PUBLIC	??_C@_0CH@OLAAPFPP@arg?54?5?$CIdefaults?$CJ?5must?5be?5None?5or@ ; `string'
PUBLIC	??_C@_0CE@BFBHDKMH@arg?53?5?$CIname?$CJ?5must?5be?5None?5or?5str@ ; `string'
PUBLIC	??_C@_0BC@KCOBMBDO@O?$CBO?$CB?$HMOOO?3function?$AA@ ; `string'
EXTRN	PyCell_Type:BYTE
EXTRN	PyArg_ParseTupleAndKeywords:PROC
EXTRN	PyDict_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_new DD imagerel func_new
	DD	imagerel func_new+971
	DD	imagerel $unwind$func_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_new DD 021601H
	DD	0190116H
xdata	ENDS
;	COMDAT ??_C@_0CI@GNAFNEHE@arg?55?5?$CIclosure?$CJ?5expected?5cell?0?5f@
CONST	SEGMENT
??_C@_0CI@GNAFNEHE@arg?55?5?$CIclosure?$CJ?5expected?5cell?0?5f@ DB 'arg '
	DB	'5 (closure) expected cell, found %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BKMGEEEG@?$CFU?5requires?5closure?5of?5length?5?$CFz@
CONST	SEGMENT
??_C@_0CL@BKMGEEEG@?$CFU?5requires?5closure?5of?5length?5?$CFz@ DB '%U re'
	DB	'quires closure of length %zd, not %zd', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HCGKHFPP@arg?55?5?$CIclosure?$CJ?5must?5be?5None?5or?5@
CONST	SEGMENT
??_C@_0CG@HCGKHFPP@arg?55?5?$CIclosure?$CJ?5must?5be?5None?5or?5@ DB 'arg'
	DB	' 5 (closure) must be None or tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ODAHAPLA@arg?55?5?$CIclosure?$CJ?5must?5be?5tuple?$AA@
CONST	SEGMENT
??_C@_0BO@ODAHAPLA@arg?55?5?$CIclosure?$CJ?5must?5be?5tuple?$AA@ DB 'arg '
	DB	'5 (closure) must be tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OLAAPFPP@arg?54?5?$CIdefaults?$CJ?5must?5be?5None?5or@
CONST	SEGMENT
??_C@_0CH@OLAAPFPP@arg?54?5?$CIdefaults?$CJ?5must?5be?5None?5or@ DB 'arg '
	DB	'4 (defaults) must be None or tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BFBHDKMH@arg?53?5?$CIname?$CJ?5must?5be?5None?5or?5str@
CONST	SEGMENT
??_C@_0CE@BFBHDKMH@arg?53?5?$CIname?$CJ?5must?5be?5None?5or?5str@ DB 'arg'
	DB	' 3 (name) must be None or string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KCOBMBDO@O?$CBO?$CB?$HMOOO?3function?$AA@
CONST	SEGMENT
??_C@_0BC@KCOBMBDO@O?$CBO?$CB?$HMOOO?3function?$AA@ DB 'O!O!|OOO:function'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT func_new
_TEXT	SEGMENT
nclosure$ = 96
globals$ = 104
closure$ = 112
code$ = 120
nfree$ = 128
name$ = 136
newfunc$ = 144
defaults$ = 152
i$20779 = 160
o$20783 = 168
tv138 = 176
type$ = 208
args$ = 216
kw$ = 224
func_new PROC						; COMDAT

; 469  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 470  :     PyCodeObject *code;
; 471  :     PyObject *globals;
; 472  :     PyObject *name = Py_None;

  00016	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0001d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR name$[rsp], rax

; 473  :     PyObject *defaults = Py_None;

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0002c	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR defaults$[rsp], rax

; 474  :     PyObject *closure = Py_None;

  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0003b	48 89 44 24 70	 mov	 QWORD PTR closure$[rsp], rax

; 475  :     PyFunctionObject *newfunc;
; 476  :     Py_ssize_t nfree, nclosure;
; 477  :     static char *kwlist[] = {"code", "globals", "name",
; 478  :                              "argdefs", "closure", 0};
; 479  : 
; 480  :     if (!PyArg_ParseTupleAndKeywords(args, kw, "O!O!|OOO:function",
; 481  :                           kwlist,
; 482  :                           &PyCode_Type, &code,
; 483  :                           &PyDict_Type, &globals,
; 484  :                           &name, &defaults, &closure))

  00040	48 8d 44 24 70	 lea	 rax, QWORD PTR closure$[rsp]
  00045	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0004a	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR defaults$[rsp]
  00052	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00057	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR name$[rsp]
  0005f	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00064	48 8d 44 24 68	 lea	 rax, QWORD PTR globals$[rsp]
  00069	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0006e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00075	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0007a	48 8d 44 24 78	 lea	 rax, QWORD PTR code$[rsp]
  0007f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  0008b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00090	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??func_new@@9@9
  00097	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@KCOBMBDO@O?$CBO?$CB?$HMOOO?3function?$AA@
  0009e	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR kw$[rsp]
  000a6	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000ae	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000b3	85 c0		 test	 eax, eax
  000b5	75 07		 jne	 SHORT $LN17@func_new

; 485  :         return NULL;

  000b7	33 c0		 xor	 eax, eax
  000b9	e9 05 03 00 00	 jmp	 $LN18@func_new
$LN17@func_new:

; 486  :     if (name != Py_None && !PyUnicode_Check(name)) {

  000be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000c5	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR name$[rsp], rax
  000cd	74 35		 je	 SHORT $LN16@func_new
  000cf	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR name$[rsp]
  000d7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000db	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000e6	85 c0		 test	 eax, eax
  000e8	75 1a		 jne	 SHORT $LN16@func_new

; 487  :         PyErr_SetString(PyExc_TypeError,
; 488  :                         "arg 3 (name) must be None or string");

  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@BFBHDKMH@arg?53?5?$CIname?$CJ?5must?5be?5None?5or?5str@
  000f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000f8	e8 00 00 00 00	 call	 PyErr_SetString

; 489  :         return NULL;

  000fd	33 c0		 xor	 eax, eax
  000ff	e9 bf 02 00 00	 jmp	 $LN18@func_new
$LN16@func_new:

; 490  :     }
; 491  :     if (defaults != Py_None && !PyTuple_Check(defaults)) {

  00104	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0010b	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR defaults$[rsp], rax
  00113	74 35		 je	 SHORT $LN15@func_new
  00115	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR defaults$[rsp]
  0011d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00121	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00127	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0012c	85 c0		 test	 eax, eax
  0012e	75 1a		 jne	 SHORT $LN15@func_new

; 492  :         PyErr_SetString(PyExc_TypeError,
; 493  :                         "arg 4 (defaults) must be None or tuple");

  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@OLAAPFPP@arg?54?5?$CIdefaults?$CJ?5must?5be?5None?5or@
  00137	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0013e	e8 00 00 00 00	 call	 PyErr_SetString

; 494  :         return NULL;

  00143	33 c0		 xor	 eax, eax
  00145	e9 79 02 00 00	 jmp	 $LN18@func_new
$LN15@func_new:

; 495  :     }
; 496  :     nfree = PyTuple_GET_SIZE(code->co_freevars);

  0014a	48 8b 44 24 78	 mov	 rax, QWORD PTR code$[rsp]
  0014f	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00156	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0015a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR nfree$[rsp], rax

; 497  :     if (!PyTuple_Check(closure)) {

  00162	48 8b 44 24 70	 mov	 rax, QWORD PTR closure$[rsp]
  00167	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0016b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00171	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00176	85 c0		 test	 eax, eax
  00178	75 5d		 jne	 SHORT $LN14@func_new

; 498  :         if (nfree && closure == Py_None) {

  0017a	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR nfree$[rsp], 0
  00183	74 2a		 je	 SHORT $LN13@func_new
  00185	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0018c	48 39 44 24 70	 cmp	 QWORD PTR closure$[rsp], rax
  00191	75 1c		 jne	 SHORT $LN13@func_new

; 499  :             PyErr_SetString(PyExc_TypeError,
; 500  :                             "arg 5 (closure) must be tuple");

  00193	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@ODAHAPLA@arg?55?5?$CIclosure?$CJ?5must?5be?5tuple?$AA@
  0019a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001a1	e8 00 00 00 00	 call	 PyErr_SetString

; 501  :             return NULL;

  001a6	33 c0		 xor	 eax, eax
  001a8	e9 16 02 00 00	 jmp	 $LN18@func_new
  001ad	eb 28		 jmp	 SHORT $LN12@func_new
$LN13@func_new:

; 502  :         }
; 503  :         else if (closure != Py_None) {

  001af	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001b6	48 39 44 24 70	 cmp	 QWORD PTR closure$[rsp], rax
  001bb	74 1a		 je	 SHORT $LN11@func_new

; 504  :             PyErr_SetString(PyExc_TypeError,
; 505  :                 "arg 5 (closure) must be None or tuple");

  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@HCGKHFPP@arg?55?5?$CIclosure?$CJ?5must?5be?5None?5or?5@
  001c4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001cb	e8 00 00 00 00	 call	 PyErr_SetString

; 506  :             return NULL;

  001d0	33 c0		 xor	 eax, eax
  001d2	e9 ec 01 00 00	 jmp	 $LN18@func_new
$LN11@func_new:
$LN12@func_new:
$LN14@func_new:

; 507  :         }
; 508  :     }
; 509  : 
; 510  :     /* check that the closure is well-formed */
; 511  :     nclosure = closure == Py_None ? 0 : PyTuple_GET_SIZE(closure);

  001d7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001de	48 39 44 24 70	 cmp	 QWORD PTR closure$[rsp], rax
  001e3	75 0e		 jne	 SHORT $LN20@func_new
  001e5	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv138[rsp], 0
  001f1	eb 11		 jmp	 SHORT $LN21@func_new
$LN20@func_new:
  001f3	48 8b 44 24 70	 mov	 rax, QWORD PTR closure$[rsp]
  001f8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001fc	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv138[rsp], rax
$LN21@func_new:
  00204	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv138[rsp]
  0020c	48 89 44 24 60	 mov	 QWORD PTR nclosure$[rsp], rax

; 512  :     if (nfree != nclosure)

  00211	48 8b 44 24 60	 mov	 rax, QWORD PTR nclosure$[rsp]
  00216	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR nfree$[rsp], rax
  0021e	74 36		 je	 SHORT $LN10@func_new

; 513  :         return PyErr_Format(PyExc_ValueError,
; 514  :                             "%U requires closure of length %zd, not %zd",
; 515  :                             code->co_name, nfree, nclosure);

  00220	48 8b 44 24 60	 mov	 rax, QWORD PTR nclosure$[rsp]
  00225	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0022a	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR nfree$[rsp]
  00232	48 8b 44 24 78	 mov	 rax, QWORD PTR code$[rsp]
  00237	4c 8b 80 b8 00
	00 00		 mov	 r8, QWORD PTR [rax+184]
  0023e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@BKMGEEEG@?$CFU?5requires?5closure?5of?5length?5?$CFz@
  00245	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0024c	e8 00 00 00 00	 call	 PyErr_Format
  00251	e9 6d 01 00 00	 jmp	 $LN18@func_new
$LN10@func_new:

; 516  :     if (nclosure) {

  00256	48 83 7c 24 60
	00		 cmp	 QWORD PTR nclosure$[rsp], 0
  0025c	0f 84 89 00 00
	00		 je	 $LN9@func_new

; 517  :         Py_ssize_t i;
; 518  :         for (i = 0; i < nclosure; i++) {

  00262	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$20779[rsp], 0
  0026e	eb 13		 jmp	 SHORT $LN8@func_new
$LN7@func_new:
  00270	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR i$20779[rsp]
  00278	48 ff c0	 inc	 rax
  0027b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR i$20779[rsp], rax
$LN8@func_new:
  00283	48 8b 44 24 60	 mov	 rax, QWORD PTR nclosure$[rsp]
  00288	48 39 84 24 a0
	00 00 00	 cmp	 QWORD PTR i$20779[rsp], rax
  00290	7d 59		 jge	 SHORT $LN6@func_new

; 519  :             PyObject *o = PyTuple_GET_ITEM(closure, i);

  00292	48 8b 44 24 70	 mov	 rax, QWORD PTR closure$[rsp]
  00297	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR i$20779[rsp]
  0029f	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  002a4	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR o$20783[rsp], rax

; 520  :             if (!PyCell_Check(o)) {

  002ac	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  002b3	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR o$20783[rsp]
  002bb	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  002bf	74 28		 je	 SHORT $LN5@func_new

; 521  :                 return PyErr_Format(PyExc_TypeError,
; 522  :                     "arg 5 (closure) expected cell, found %s",
; 523  :                                     o->ob_type->tp_name);

  002c1	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR o$20783[rsp]
  002c9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002cd	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  002d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@GNAFNEHE@arg?55?5?$CIclosure?$CJ?5expected?5cell?0?5f@
  002d8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  002df	e8 00 00 00 00	 call	 PyErr_Format
  002e4	e9 da 00 00 00	 jmp	 $LN18@func_new
$LN5@func_new:

; 524  :             }
; 525  :         }

  002e9	eb 85		 jmp	 SHORT $LN7@func_new
$LN6@func_new:
$LN9@func_new:

; 526  :     }
; 527  : 
; 528  :     newfunc = (PyFunctionObject *)PyFunction_New((PyObject *)code,
; 529  :                                                  globals);

  002eb	48 8b 54 24 68	 mov	 rdx, QWORD PTR globals$[rsp]
  002f0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR code$[rsp]
  002f5	e8 00 00 00 00	 call	 PyFunction_New
  002fa	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR newfunc$[rsp], rax

; 530  :     if (newfunc == NULL)

  00302	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR newfunc$[rsp], 0
  0030b	75 07		 jne	 SHORT $LN4@func_new

; 531  :         return NULL;

  0030d	33 c0		 xor	 eax, eax
  0030f	e9 af 00 00 00	 jmp	 $LN18@func_new
$LN4@func_new:

; 532  : 
; 533  :     if (name != Py_None) {

  00314	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0031b	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR name$[rsp], rax
  00323	74 38		 je	 SHORT $LN3@func_new

; 534  :         Py_INCREF(name);

  00325	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  0032d	e8 00 00 00 00	 call	 _Py_IncRef

; 535  :         Py_DECREF(newfunc->func_name);

  00332	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR newfunc$[rsp]
  0033a	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  00341	e8 00 00 00 00	 call	 _Py_DecRef

; 536  :         newfunc->func_name = name;

  00346	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR newfunc$[rsp]
  0034e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00356	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx
$LN3@func_new:

; 537  :     }
; 538  :     if (defaults != Py_None) {

  0035d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00364	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR defaults$[rsp], rax
  0036c	74 21		 je	 SHORT $LN2@func_new

; 539  :         Py_INCREF(defaults);

  0036e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR defaults$[rsp]
  00376	e8 00 00 00 00	 call	 _Py_IncRef

; 540  :         newfunc->func_defaults  = defaults;

  0037b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR newfunc$[rsp]
  00383	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR defaults$[rsp]
  0038b	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx
$LN2@func_new:

; 541  :     }
; 542  :     if (closure != Py_None) {

  0038f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00396	48 39 44 24 70	 cmp	 QWORD PTR closure$[rsp], rax
  0039b	74 1e		 je	 SHORT $LN1@func_new

; 543  :         Py_INCREF(closure);

  0039d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR closure$[rsp]
  003a2	e8 00 00 00 00	 call	 _Py_IncRef

; 544  :         newfunc->func_closure = closure;

  003a7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR newfunc$[rsp]
  003af	48 8b 4c 24 70	 mov	 rcx, QWORD PTR closure$[rsp]
  003b4	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN1@func_new:

; 545  :     }
; 546  : 
; 547  :     return (PyObject *)newfunc;

  003bb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR newfunc$[rsp]
$LN18@func_new:

; 548  : }

  003c3	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  003ca	c3		 ret	 0
func_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_1DA@ILMOJHBC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAu?$AAn?$AAc?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@BJADLBIC@func_dealloc?$AA@		; `string'
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_dealloc DD imagerel func_dealloc
	DD	imagerel func_dealloc+625
	DD	imagerel $unwind$func_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@ILMOJHBC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAu?$AAn?$AAc?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@ILMOJHBC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAu?$AAn?$AAc?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'f', 00H, 'u', 00H, 'n'
	DB	00H, 'c', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BJADLBIC@func_dealloc?$AA@
CONST	SEGMENT
??_C@_0N@BJADLBIC@func_dealloc?$AA@ DB 'func_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT func_dealloc
_TEXT	SEGMENT
g$20810 = 48
tv79 = 56
op$ = 80
func_dealloc PROC					; COMDAT

; 552  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 553  :     _PyObject_GC_UNTRACK(op);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  00016	41 b8 29 02 00
	00		 mov	 r8d, 553		; 00000229H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BJADLBIC@func_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN37@func_deall
$LN36@func_deall:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  00044	41 b8 29 02 00
	00		 mov	 r8d, 553		; 00000229H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BJADLBIC@func_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN40@func_deall
  00061	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN41@func_deall
$LN40@func_deall:
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN41@func_deall:
  0007a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$20810[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20810[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN42@func_deall
  00090	41 b8 29 02 00
	00		 mov	 r8d, 553		; 00000229H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@ILMOJHBC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAu?$AAn?$AAc?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN42@func_deall:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20810[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20810[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20810[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20810[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20810[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20810[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN36@func_deall
$LN37@func_deall:

; 554  :     if (op->func_weakreflist != NULL)

  000f8	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000fd	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00105	74 0a		 je	 SHORT $LN33@func_deall

; 555  :         PyObject_ClearWeakRefs((PyObject *) op);

  00107	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  0010c	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN33@func_deall:

; 556  :     Py_DECREF(op->func_code);

  00111	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00116	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0011a	e8 00 00 00 00	 call	 _Py_DecRef

; 557  :     Py_DECREF(op->func_globals);

  0011f	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00124	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00128	e8 00 00 00 00	 call	 _Py_DecRef
$LN32@func_deall:

; 558  :     Py_XDECREF(op->func_module);

  0012d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00132	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  0013a	74 11		 je	 SHORT $LN29@func_deall
  0013c	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00141	48 8b 88 a8 00
	00 00		 mov	 rcx, QWORD PTR [rax+168]
  00148	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@func_deall:
  0014d	33 c0		 xor	 eax, eax
  0014f	85 c0		 test	 eax, eax
  00151	75 da		 jne	 SHORT $LN32@func_deall

; 559  :     Py_DECREF(op->func_name);

  00153	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00158	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  0015f	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@func_deall:

; 560  :     Py_XDECREF(op->func_defaults);

  00164	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00169	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0016e	74 0e		 je	 SHORT $LN25@func_deall
  00170	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00175	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00179	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@func_deall:
  0017e	33 c0		 xor	 eax, eax
  00180	85 c0		 test	 eax, eax
  00182	75 e0		 jne	 SHORT $LN28@func_deall
$LN24@func_deall:

; 561  :     Py_XDECREF(op->func_kwdefaults);

  00184	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00189	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0018e	74 0e		 je	 SHORT $LN21@func_deall
  00190	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00195	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00199	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@func_deall:
  0019e	33 c0		 xor	 eax, eax
  001a0	85 c0		 test	 eax, eax
  001a2	75 e0		 jne	 SHORT $LN24@func_deall
$LN20@func_deall:

; 562  :     Py_XDECREF(op->func_doc);

  001a4	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  001a9	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  001b1	74 11		 je	 SHORT $LN17@func_deall
  001b3	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  001b8	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  001bf	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@func_deall:
  001c4	33 c0		 xor	 eax, eax
  001c6	85 c0		 test	 eax, eax
  001c8	75 da		 jne	 SHORT $LN20@func_deall
$LN16@func_deall:

; 563  :     Py_XDECREF(op->func_dict);

  001ca	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  001cf	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  001d7	74 11		 je	 SHORT $LN13@func_deall
  001d9	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  001de	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  001e5	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@func_deall:
  001ea	33 c0		 xor	 eax, eax
  001ec	85 c0		 test	 eax, eax
  001ee	75 da		 jne	 SHORT $LN16@func_deall
$LN12@func_deall:

; 564  :     Py_XDECREF(op->func_closure);

  001f0	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  001f5	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  001fd	74 11		 je	 SHORT $LN9@func_deall
  001ff	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00204	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0020b	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@func_deall:
  00210	33 c0		 xor	 eax, eax
  00212	85 c0		 test	 eax, eax
  00214	75 da		 jne	 SHORT $LN12@func_deall
$LN8@func_deall:

; 565  :     Py_XDECREF(op->func_annotations);

  00216	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0021b	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  00223	74 11		 je	 SHORT $LN5@func_deall
  00225	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0022a	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  00231	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@func_deall:
  00236	33 c0		 xor	 eax, eax
  00238	85 c0		 test	 eax, eax
  0023a	75 da		 jne	 SHORT $LN8@func_deall
$LN4@func_deall:

; 566  :     Py_XDECREF(op->func_qualname);

  0023c	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00241	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00249	74 11		 je	 SHORT $LN1@func_deall
  0024b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00250	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00257	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@func_deall:
  0025c	33 c0		 xor	 eax, eax
  0025e	85 c0		 test	 eax, eax
  00260	75 da		 jne	 SHORT $LN4@func_deall

; 567  :     PyObject_GC_Del(op);

  00262	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00267	e8 00 00 00 00	 call	 PyObject_GC_Del

; 568  : }

  0026c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00270	c3		 ret	 0
func_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@HGNHAFIO@?$DMfunction?5?$CFU?5at?5?$CFp?$DO?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_repr DD imagerel func_repr
	DD	imagerel func_repr+43
	DD	imagerel $unwind$func_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BE@HGNHAFIO@?$DMfunction?5?$CFU?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BE@HGNHAFIO@?$DMfunction?5?$CFU?5at?5?$CFp?$DO?$AA@ DB '<function '
	DB	'%U at %p>', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT func_repr
_TEXT	SEGMENT
op$ = 48
func_repr PROC						; COMDAT

; 572  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 573  :     return PyUnicode_FromFormat("<function %U at %p>",
; 574  :                                op->func_qualname, op);

  00009	4c 8b 44 24 30	 mov	 r8, QWORD PTR op$[rsp]
  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00013	48 8b 90 b8 00
	00 00		 mov	 rdx, QWORD PTR [rax+184]
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HGNHAFIO@?$DMfunction?5?$CFU?5at?5?$CFp?$DO?$AA@
  00021	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 575  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
func_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@NAJDGLKC@func_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_traverse DD imagerel func_traverse
	DD	imagerel func_traverse+1085
	DD	imagerel $unwind$func_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_traverse DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0O@NAJDGLKC@func_traverse?$AA@
CONST	SEGMENT
??_C@_0O@NAJDGLKC@func_traverse?$AA@ DB 'func_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT func_traverse
_TEXT	SEGMENT
vret$20882 = 32
vret$20890 = 36
vret$20898 = 40
vret$20906 = 44
vret$20914 = 48
vret$20922 = 52
vret$20930 = 56
vret$20938 = 60
vret$20946 = 64
vret$20954 = 68
vret$20962 = 72
f$ = 96
visit$ = 104
arg$ = 112
func_traverse PROC					; COMDAT

; 579  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN66@func_trave:

; 580  :     Py_VISIT(f->func_code);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN63@func_trave
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 44 02 00
	00		 mov	 r8d, 580		; 00000244H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN63@func_trave:
  00038	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 26		 je	 SHORT $LN62@func_trave
  00044	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20882[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20882[rsp], 0
  0005f	74 09		 je	 SHORT $LN61@func_trave
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20882[rsp]
  00065	e9 ce 03 00 00	 jmp	 $LN67@func_trave
$LN61@func_trave:
$LN62@func_trave:
  0006a	33 c0		 xor	 eax, eax
  0006c	85 c0		 test	 eax, eax
  0006e	75 a3		 jne	 SHORT $LN66@func_trave
$LN60@func_trave:

; 581  :     Py_VISIT(f->func_globals);

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	74 1c		 je	 SHORT $LN57@func_trave
  00079	45 33 c9	 xor	 r9d, r9d
  0007c	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  00090	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN57@func_trave:
  00095	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  0009a	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0009f	74 26		 je	 SHORT $LN56@func_trave
  000a1	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  000a6	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  000ab	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000af	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  000b3	89 44 24 24	 mov	 DWORD PTR vret$20890[rsp], eax
  000b7	83 7c 24 24 00	 cmp	 DWORD PTR vret$20890[rsp], 0
  000bc	74 09		 je	 SHORT $LN55@func_trave
  000be	8b 44 24 24	 mov	 eax, DWORD PTR vret$20890[rsp]
  000c2	e9 71 03 00 00	 jmp	 $LN67@func_trave
$LN55@func_trave:
$LN56@func_trave:
  000c7	33 c0		 xor	 eax, eax
  000c9	85 c0		 test	 eax, eax
  000cb	75 a3		 jne	 SHORT $LN60@func_trave
$LN54@func_trave:

; 582  :     Py_VISIT(f->func_module);

  000cd	e8 00 00 00 00	 call	 _Py_PXCTX
  000d2	85 c0		 test	 eax, eax
  000d4	74 1c		 je	 SHORT $LN51@func_trave
  000d6	45 33 c9	 xor	 r9d, r9d
  000d9	41 b8 46 02 00
	00		 mov	 r8d, 582		; 00000246H
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  000ed	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN51@func_trave:
  000f2	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  000f7	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  000ff	74 29		 je	 SHORT $LN50@func_trave
  00101	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00106	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  0010b	48 8b 88 a8 00
	00 00		 mov	 rcx, QWORD PTR [rax+168]
  00112	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00116	89 44 24 28	 mov	 DWORD PTR vret$20898[rsp], eax
  0011a	83 7c 24 28 00	 cmp	 DWORD PTR vret$20898[rsp], 0
  0011f	74 09		 je	 SHORT $LN49@func_trave
  00121	8b 44 24 28	 mov	 eax, DWORD PTR vret$20898[rsp]
  00125	e9 0e 03 00 00	 jmp	 $LN67@func_trave
$LN49@func_trave:
$LN50@func_trave:
  0012a	33 c0		 xor	 eax, eax
  0012c	85 c0		 test	 eax, eax
  0012e	75 9d		 jne	 SHORT $LN54@func_trave
$LN48@func_trave:

; 583  :     Py_VISIT(f->func_defaults);

  00130	e8 00 00 00 00	 call	 _Py_PXCTX
  00135	85 c0		 test	 eax, eax
  00137	74 1c		 je	 SHORT $LN45@func_trave
  00139	45 33 c9	 xor	 r9d, r9d
  0013c	41 b8 47 02 00
	00		 mov	 r8d, 583		; 00000247H
  00142	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00149	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  00150	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN45@func_trave:
  00155	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  0015a	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0015f	74 26		 je	 SHORT $LN44@func_trave
  00161	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00166	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  0016b	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0016f	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00173	89 44 24 2c	 mov	 DWORD PTR vret$20906[rsp], eax
  00177	83 7c 24 2c 00	 cmp	 DWORD PTR vret$20906[rsp], 0
  0017c	74 09		 je	 SHORT $LN43@func_trave
  0017e	8b 44 24 2c	 mov	 eax, DWORD PTR vret$20906[rsp]
  00182	e9 b1 02 00 00	 jmp	 $LN67@func_trave
$LN43@func_trave:
$LN44@func_trave:
  00187	33 c0		 xor	 eax, eax
  00189	85 c0		 test	 eax, eax
  0018b	75 a3		 jne	 SHORT $LN48@func_trave
$LN42@func_trave:

; 584  :     Py_VISIT(f->func_kwdefaults);

  0018d	e8 00 00 00 00	 call	 _Py_PXCTX
  00192	85 c0		 test	 eax, eax
  00194	74 1c		 je	 SHORT $LN39@func_trave
  00196	45 33 c9	 xor	 r9d, r9d
  00199	41 b8 48 02 00
	00		 mov	 r8d, 584		; 00000248H
  0019f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  001a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  001ad	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN39@func_trave:
  001b2	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  001b7	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  001bc	74 26		 je	 SHORT $LN38@func_trave
  001be	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  001c3	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  001c8	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  001cc	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  001d0	89 44 24 30	 mov	 DWORD PTR vret$20914[rsp], eax
  001d4	83 7c 24 30 00	 cmp	 DWORD PTR vret$20914[rsp], 0
  001d9	74 09		 je	 SHORT $LN37@func_trave
  001db	8b 44 24 30	 mov	 eax, DWORD PTR vret$20914[rsp]
  001df	e9 54 02 00 00	 jmp	 $LN67@func_trave
$LN37@func_trave:
$LN38@func_trave:
  001e4	33 c0		 xor	 eax, eax
  001e6	85 c0		 test	 eax, eax
  001e8	75 a3		 jne	 SHORT $LN42@func_trave
$LN36@func_trave:

; 585  :     Py_VISIT(f->func_doc);

  001ea	e8 00 00 00 00	 call	 _Py_PXCTX
  001ef	85 c0		 test	 eax, eax
  001f1	74 1c		 je	 SHORT $LN33@func_trave
  001f3	45 33 c9	 xor	 r9d, r9d
  001f6	41 b8 49 02 00
	00		 mov	 r8d, 585		; 00000249H
  001fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  0020a	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN33@func_trave:
  0020f	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  00214	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0021c	74 29		 je	 SHORT $LN32@func_trave
  0021e	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00223	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  00228	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0022f	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00233	89 44 24 34	 mov	 DWORD PTR vret$20922[rsp], eax
  00237	83 7c 24 34 00	 cmp	 DWORD PTR vret$20922[rsp], 0
  0023c	74 09		 je	 SHORT $LN31@func_trave
  0023e	8b 44 24 34	 mov	 eax, DWORD PTR vret$20922[rsp]
  00242	e9 f1 01 00 00	 jmp	 $LN67@func_trave
$LN31@func_trave:
$LN32@func_trave:
  00247	33 c0		 xor	 eax, eax
  00249	85 c0		 test	 eax, eax
  0024b	75 9d		 jne	 SHORT $LN36@func_trave
$LN30@func_trave:

; 586  :     Py_VISIT(f->func_name);

  0024d	e8 00 00 00 00	 call	 _Py_PXCTX
  00252	85 c0		 test	 eax, eax
  00254	74 1c		 je	 SHORT $LN27@func_trave
  00256	45 33 c9	 xor	 r9d, r9d
  00259	41 b8 4a 02 00
	00		 mov	 r8d, 586		; 0000024aH
  0025f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00266	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  0026d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN27@func_trave:
  00272	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  00277	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  0027f	74 29		 je	 SHORT $LN26@func_trave
  00281	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00286	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  0028b	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  00292	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00296	89 44 24 38	 mov	 DWORD PTR vret$20930[rsp], eax
  0029a	83 7c 24 38 00	 cmp	 DWORD PTR vret$20930[rsp], 0
  0029f	74 09		 je	 SHORT $LN25@func_trave
  002a1	8b 44 24 38	 mov	 eax, DWORD PTR vret$20930[rsp]
  002a5	e9 8e 01 00 00	 jmp	 $LN67@func_trave
$LN25@func_trave:
$LN26@func_trave:
  002aa	33 c0		 xor	 eax, eax
  002ac	85 c0		 test	 eax, eax
  002ae	75 9d		 jne	 SHORT $LN30@func_trave
$LN24@func_trave:

; 587  :     Py_VISIT(f->func_dict);

  002b0	e8 00 00 00 00	 call	 _Py_PXCTX
  002b5	85 c0		 test	 eax, eax
  002b7	74 1c		 je	 SHORT $LN21@func_trave
  002b9	45 33 c9	 xor	 r9d, r9d
  002bc	41 b8 4b 02 00
	00		 mov	 r8d, 587		; 0000024bH
  002c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  002c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  002d0	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@func_trave:
  002d5	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  002da	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  002e2	74 29		 je	 SHORT $LN20@func_trave
  002e4	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  002e9	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  002ee	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  002f5	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  002f9	89 44 24 3c	 mov	 DWORD PTR vret$20938[rsp], eax
  002fd	83 7c 24 3c 00	 cmp	 DWORD PTR vret$20938[rsp], 0
  00302	74 09		 je	 SHORT $LN19@func_trave
  00304	8b 44 24 3c	 mov	 eax, DWORD PTR vret$20938[rsp]
  00308	e9 2b 01 00 00	 jmp	 $LN67@func_trave
$LN19@func_trave:
$LN20@func_trave:
  0030d	33 c0		 xor	 eax, eax
  0030f	85 c0		 test	 eax, eax
  00311	75 9d		 jne	 SHORT $LN24@func_trave
$LN18@func_trave:

; 588  :     Py_VISIT(f->func_closure);

  00313	e8 00 00 00 00	 call	 _Py_PXCTX
  00318	85 c0		 test	 eax, eax
  0031a	74 1c		 je	 SHORT $LN15@func_trave
  0031c	45 33 c9	 xor	 r9d, r9d
  0031f	41 b8 4c 02 00
	00		 mov	 r8d, 588		; 0000024cH
  00325	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0032c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  00333	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@func_trave:
  00338	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  0033d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00345	74 29		 je	 SHORT $LN14@func_trave
  00347	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  0034c	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  00351	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00358	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  0035c	89 44 24 40	 mov	 DWORD PTR vret$20946[rsp], eax
  00360	83 7c 24 40 00	 cmp	 DWORD PTR vret$20946[rsp], 0
  00365	74 09		 je	 SHORT $LN13@func_trave
  00367	8b 44 24 40	 mov	 eax, DWORD PTR vret$20946[rsp]
  0036b	e9 c8 00 00 00	 jmp	 $LN67@func_trave
$LN13@func_trave:
$LN14@func_trave:
  00370	33 c0		 xor	 eax, eax
  00372	85 c0		 test	 eax, eax
  00374	75 9d		 jne	 SHORT $LN18@func_trave
$LN12@func_trave:

; 589  :     Py_VISIT(f->func_annotations);

  00376	e8 00 00 00 00	 call	 _Py_PXCTX
  0037b	85 c0		 test	 eax, eax
  0037d	74 1c		 je	 SHORT $LN9@func_trave
  0037f	45 33 c9	 xor	 r9d, r9d
  00382	41 b8 4d 02 00
	00		 mov	 r8d, 589		; 0000024dH
  00388	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0038f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  00396	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@func_trave:
  0039b	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  003a0	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  003a8	74 26		 je	 SHORT $LN8@func_trave
  003aa	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  003af	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  003b4	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  003bb	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  003bf	89 44 24 44	 mov	 DWORD PTR vret$20954[rsp], eax
  003c3	83 7c 24 44 00	 cmp	 DWORD PTR vret$20954[rsp], 0
  003c8	74 06		 je	 SHORT $LN7@func_trave
  003ca	8b 44 24 44	 mov	 eax, DWORD PTR vret$20954[rsp]
  003ce	eb 68		 jmp	 SHORT $LN67@func_trave
$LN7@func_trave:
$LN8@func_trave:
  003d0	33 c0		 xor	 eax, eax
  003d2	85 c0		 test	 eax, eax
  003d4	75 a0		 jne	 SHORT $LN12@func_trave
$LN6@func_trave:

; 590  :     Py_VISIT(f->func_qualname);

  003d6	e8 00 00 00 00	 call	 _Py_PXCTX
  003db	85 c0		 test	 eax, eax
  003dd	74 1c		 je	 SHORT $LN3@func_trave
  003df	45 33 c9	 xor	 r9d, r9d
  003e2	41 b8 4e 02 00
	00		 mov	 r8d, 590		; 0000024eH
  003e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  003ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJDGLKC@func_traverse?$AA@
  003f6	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@func_trave:
  003fb	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  00400	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00408	74 26		 je	 SHORT $LN2@func_trave
  0040a	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  0040f	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  00414	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0041b	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  0041f	89 44 24 48	 mov	 DWORD PTR vret$20962[rsp], eax
  00423	83 7c 24 48 00	 cmp	 DWORD PTR vret$20962[rsp], 0
  00428	74 06		 je	 SHORT $LN1@func_trave
  0042a	8b 44 24 48	 mov	 eax, DWORD PTR vret$20962[rsp]
  0042e	eb 08		 jmp	 SHORT $LN67@func_trave
$LN1@func_trave:
$LN2@func_trave:
  00430	33 c0		 xor	 eax, eax
  00432	85 c0		 test	 eax, eax
  00434	75 a0		 jne	 SHORT $LN6@func_trave

; 591  :     return 0;

  00436	33 c0		 xor	 eax, eax
$LN67@func_trave:

; 592  : }

  00438	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0043c	c3		 ret	 0
func_traverse ENDP
_TEXT	ENDS
EXTRN	PyEval_EvalCodeEx:PROC
EXTRN	PyDict_Next:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$function_call DD imagerel function_call
	DD	imagerel function_call+660
	DD	imagerel $unwind$function_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$function_call DD 021601H
	DD	0170116H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT function_call
_TEXT	SEGMENT
nd$ = 96
kwtuple$ = 104
nk$ = 112
argdefs$ = 120
k$ = 128
d$ = 136
result$ = 144
i$20994 = 152
pos$20993 = 160
func$ = 192
arg$ = 200
kw$ = 208
function_call PROC					; COMDAT

; 596  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 597  :     PyObject *result;
; 598  :     PyObject *argdefs;
; 599  :     PyObject *kwtuple = NULL;

  00016	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR kwtuple$[rsp], 0

; 600  :     PyObject **d, **k;
; 601  :     Py_ssize_t nk, nd;
; 602  : 
; 603  :     argdefs = PyFunction_GET_DEFAULTS(func);

  0001f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR func$[rsp]
  00027	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0002b	48 89 44 24 78	 mov	 QWORD PTR argdefs$[rsp], rax

; 604  :     if (argdefs != NULL && PyTuple_Check(argdefs)) {

  00030	48 83 7c 24 78
	00		 cmp	 QWORD PTR argdefs$[rsp], 0
  00036	74 39		 je	 SHORT $LN11@function_c
  00038	48 8b 44 24 78	 mov	 rax, QWORD PTR argdefs$[rsp]
  0003d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00041	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00047	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0004c	85 c0		 test	 eax, eax
  0004e	74 21		 je	 SHORT $LN11@function_c

; 605  :         d = &PyTuple_GET_ITEM((PyTupleObject *)argdefs, 0);

  00050	48 8b 44 24 78	 mov	 rax, QWORD PTR argdefs$[rsp]
  00055	48 83 c0 70	 add	 rax, 112		; 00000070H
  00059	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR d$[rsp], rax

; 606  :         nd = PyTuple_GET_SIZE(argdefs);

  00061	48 8b 44 24 78	 mov	 rax, QWORD PTR argdefs$[rsp]
  00066	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006a	48 89 44 24 60	 mov	 QWORD PTR nd$[rsp], rax

; 607  :     }
; 608  :     else {

  0006f	eb 15		 jmp	 SHORT $LN10@function_c
$LN11@function_c:

; 609  :         d = NULL;

  00071	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR d$[rsp], 0

; 610  :         nd = 0;

  0007d	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR nd$[rsp], 0
$LN10@function_c:

; 611  :     }
; 612  : 
; 613  :     if (kw != NULL && PyDict_Check(kw)) {

  00086	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR kw$[rsp], 0
  0008f	0f 84 2d 01 00
	00		 je	 $LN9@function_c
  00095	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR kw$[rsp]
  0009d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a7	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000ac	85 c0		 test	 eax, eax
  000ae	0f 84 0e 01 00
	00		 je	 $LN9@function_c

; 614  :         Py_ssize_t pos, i;
; 615  :         nk = PyDict_Size(kw);

  000b4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR kw$[rsp]
  000bc	e8 00 00 00 00	 call	 PyDict_Size
  000c1	48 89 44 24 70	 mov	 QWORD PTR nk$[rsp], rax

; 616  :         kwtuple = PyTuple_New(2*nk);

  000c6	48 8b 44 24 70	 mov	 rax, QWORD PTR nk$[rsp]
  000cb	48 d1 e0	 shl	 rax, 1
  000ce	48 8b c8	 mov	 rcx, rax
  000d1	e8 00 00 00 00	 call	 PyTuple_New
  000d6	48 89 44 24 68	 mov	 QWORD PTR kwtuple$[rsp], rax

; 617  :         if (kwtuple == NULL)

  000db	48 83 7c 24 68
	00		 cmp	 QWORD PTR kwtuple$[rsp], 0
  000e1	75 07		 jne	 SHORT $LN8@function_c

; 618  :             return NULL;

  000e3	33 c0		 xor	 eax, eax
  000e5	e9 a2 01 00 00	 jmp	 $LN12@function_c
$LN8@function_c:

; 619  :         k = &PyTuple_GET_ITEM(kwtuple, 0);

  000ea	48 8b 44 24 68	 mov	 rax, QWORD PTR kwtuple$[rsp]
  000ef	48 83 c0 70	 add	 rax, 112		; 00000070H
  000f3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR k$[rsp], rax

; 620  :         pos = i = 0;

  000fb	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$20994[rsp], 0
  00107	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$20994[rsp]
  0010f	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR pos$20993[rsp], rax
$LN7@function_c:

; 621  :         while (PyDict_Next(kw, &pos, &k[i], &k[i+1])) {

  00117	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR k$[rsp]
  0011f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i$20994[rsp]
  00127	48 8d 44 c8 08	 lea	 rax, QWORD PTR [rax+rcx*8+8]
  0012c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR k$[rsp]
  00134	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR i$20994[rsp]
  0013c	48 8d 0c d1	 lea	 rcx, QWORD PTR [rcx+rdx*8]
  00140	4c 8b c8	 mov	 r9, rax
  00143	4c 8b c1	 mov	 r8, rcx
  00146	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR pos$20993[rsp]
  0014e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR kw$[rsp]
  00156	e8 00 00 00 00	 call	 PyDict_Next
  0015b	85 c0		 test	 eax, eax
  0015d	74 4c		 je	 SHORT $LN6@function_c

; 622  :             Py_INCREF(k[i]);

  0015f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR k$[rsp]
  00167	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i$20994[rsp]
  0016f	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00173	e8 00 00 00 00	 call	 _Py_IncRef

; 623  :             Py_INCREF(k[i+1]);

  00178	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR k$[rsp]
  00180	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i$20994[rsp]
  00188	48 8b 4c c8 08	 mov	 rcx, QWORD PTR [rax+rcx*8+8]
  0018d	e8 00 00 00 00	 call	 _Py_IncRef

; 624  :             i += 2;

  00192	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$20994[rsp]
  0019a	48 83 c0 02	 add	 rax, 2
  0019e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR i$20994[rsp], rax

; 625  :         }

  001a6	e9 6c ff ff ff	 jmp	 $LN7@function_c
$LN6@function_c:

; 626  :         nk = i/2;

  001ab	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$20994[rsp]
  001b3	48 99		 cdq
  001b5	48 2b c2	 sub	 rax, rdx
  001b8	48 d1 f8	 sar	 rax, 1
  001bb	48 89 44 24 70	 mov	 QWORD PTR nk$[rsp], rax

; 627  :     }
; 628  :     else {

  001c0	eb 15		 jmp	 SHORT $LN5@function_c
$LN9@function_c:

; 629  :         k = NULL;

  001c2	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR k$[rsp], 0

; 630  :         nk = 0;

  001ce	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR nk$[rsp], 0
$LN5@function_c:

; 631  :     }
; 632  : 
; 633  :     result = PyEval_EvalCodeEx(
; 634  :         PyFunction_GET_CODE(func),
; 635  :         PyFunction_GET_GLOBALS(func), (PyObject *)NULL,
; 636  :         &PyTuple_GET_ITEM(arg, 0), PyTuple_GET_SIZE(arg),
; 637  :         k, nk, d, nd,
; 638  :         PyFunction_GET_KW_DEFAULTS(func),
; 639  :         PyFunction_GET_CLOSURE(func));

  001d7	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR arg$[rsp]
  001df	48 83 c0 70	 add	 rax, 112		; 00000070H
  001e3	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR func$[rsp]
  001eb	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  001f2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  001f7	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR func$[rsp]
  001ff	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00203	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00208	8b 4c 24 60	 mov	 ecx, DWORD PTR nd$[rsp]
  0020c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00210	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR d$[rsp]
  00218	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0021d	8b 4c 24 70	 mov	 ecx, DWORD PTR nk$[rsp]
  00221	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  00225	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR k$[rsp]
  0022d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00232	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR arg$[rsp]
  0023a	8b 49 60	 mov	 ecx, DWORD PTR [rcx+96]
  0023d	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00241	4c 8b c8	 mov	 r9, rax
  00244	45 33 c0	 xor	 r8d, r8d
  00247	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR func$[rsp]
  0024f	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  00253	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR func$[rsp]
  0025b	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0025f	e8 00 00 00 00	 call	 PyEval_EvalCodeEx
  00264	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR result$[rsp], rax
$LN4@function_c:

; 640  : 
; 641  :     Py_XDECREF(kwtuple);

  0026c	48 83 7c 24 68
	00		 cmp	 QWORD PTR kwtuple$[rsp], 0
  00272	74 0a		 je	 SHORT $LN1@function_c
  00274	48 8b 4c 24 68	 mov	 rcx, QWORD PTR kwtuple$[rsp]
  00279	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@function_c:
  0027e	33 c0		 xor	 eax, eax
  00280	85 c0		 test	 eax, eax
  00282	75 e8		 jne	 SHORT $LN4@function_c

; 642  : 
; 643  :     return result;

  00284	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR result$[rsp]
$LN12@function_c:

; 644  : }

  0028c	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00293	c3		 ret	 0
function_call ENDP
_TEXT	ENDS
EXTRN	PyMethod_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$func_descr_get DD imagerel func_descr_get
	DD	imagerel func_descr_get+78
	DD	imagerel $unwind$func_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$func_descr_get DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT func_descr_get
_TEXT	SEGMENT
func$ = 48
obj$ = 56
type$ = 64
func_descr_get PROC					; COMDAT

; 649  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 650  :     if (obj == Py_None || obj == NULL) {

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0001a	48 39 44 24 38	 cmp	 QWORD PTR obj$[rsp], rax
  0001f	74 08		 je	 SHORT $LN1@func_descr
  00021	48 83 7c 24 38
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00027	75 11		 jne	 SHORT $LN2@func_descr
$LN1@func_descr:

; 651  :         Py_INCREF(func);

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  0002e	e8 00 00 00 00	 call	 _Py_IncRef

; 652  :         return func;

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR func$[rsp]
  00038	eb 0f		 jmp	 SHORT $LN3@func_descr
$LN2@func_descr:

; 653  :     }
; 654  :     return PyMethod_New(func, obj);

  0003a	48 8b 54 24 38	 mov	 rdx, QWORD PTR obj$[rsp]
  0003f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  00044	e8 00 00 00 00	 call	 PyMethod_New
$LN3@func_descr:

; 655  : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
func_descr_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LKFCMIDP@cm_dealloc?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$cm_dealloc DD imagerel cm_dealloc
	DD	imagerel cm_dealloc+337
	DD	imagerel $unwind$cm_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@LKFCMIDP@cm_dealloc?$AA@
CONST	SEGMENT
??_C@_0L@LKFCMIDP@cm_dealloc?$AA@ DB 'cm_dealloc', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT cm_dealloc
_TEXT	SEGMENT
g$21069 = 48
tv79 = 56
cm$ = 80
cm_dealloc PROC						; COMDAT

; 726  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 727  :     _PyObject_GC_UNTRACK((PyObject *)cm);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 50	 mov	 r9, QWORD PTR cm$[rsp]
  00016	41 b8 d7 02 00
	00		 mov	 r8d, 727		; 000002d7H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LKFCMIDP@cm_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN12@cm_dealloc
$LN11@cm_dealloc:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR cm$[rsp]
  00044	41 b8 d7 02 00
	00		 mov	 r8d, 727		; 000002d7H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LKFCMIDP@cm_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN15@cm_dealloc
  00061	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN16@cm_dealloc
$LN15@cm_dealloc:
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN16@cm_dealloc:
  0007a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$21069[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21069[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN17@cm_dealloc
  00090	41 b8 d7 02 00
	00		 mov	 r8d, 727		; 000002d7H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@ILMOJHBC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAu?$AAn?$AAc?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN17@cm_dealloc:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21069[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21069[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21069[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21069[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21069[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21069[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN11@cm_dealloc
$LN12@cm_dealloc:
$LN8@cm_dealloc:

; 728  :     Py_XDECREF(cm->cm_callable);

  000f8	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  000fd	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00102	74 0e		 je	 SHORT $LN5@cm_dealloc
  00104	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  00109	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0010d	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@cm_dealloc:
  00112	33 c0		 xor	 eax, eax
  00114	85 c0		 test	 eax, eax
  00116	75 e0		 jne	 SHORT $LN8@cm_dealloc
$LN4@cm_dealloc:

; 729  :     Py_XDECREF(cm->cm_dict);

  00118	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  0011d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00122	74 0e		 je	 SHORT $LN1@cm_dealloc
  00124	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  00129	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0012d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@cm_dealloc:
  00132	33 c0		 xor	 eax, eax
  00134	85 c0		 test	 eax, eax
  00136	75 e0		 jne	 SHORT $LN4@cm_dealloc

; 730  :     Py_TYPE(cm)->tp_free((PyObject *)cm);

  00138	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  0013d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00141	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cm$[rsp]
  00146	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 731  : }

  0014c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00150	c3		 ret	 0
cm_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@GFOAPFOK@cm_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$cm_traverse DD imagerel cm_traverse
	DD	imagerel cm_traverse+206
	DD	imagerel $unwind$cm_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0M@GFOAPFOK@cm_traverse?$AA@
CONST	SEGMENT
??_C@_0M@GFOAPFOK@cm_traverse?$AA@ DB 'cm_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT cm_traverse
_TEXT	SEGMENT
vret$21102 = 32
vret$21110 = 36
cm$ = 64
visit$ = 72
arg$ = 80
cm_traverse PROC					; COMDAT

; 735  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@cm_travers:

; 736  :     Py_VISIT(cm->cm_callable);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@cm_travers
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 e0 02 00
	00		 mov	 r8d, 736		; 000002e0H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GFOAPFOK@cm_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@cm_travers:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR cm$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN8@cm_travers
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR cm$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21102[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21102[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@cm_travers
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21102[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@cm_travers
$LN7@cm_travers:
$LN8@cm_travers:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@cm_travers
$LN6@cm_travers:

; 737  :     Py_VISIT(cm->cm_dict);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@cm_travers
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 e1 02 00
	00		 mov	 r8d, 737		; 000002e1H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GFOAPFOK@cm_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@cm_travers:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR cm$[rsp]
  00097	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0009c	74 23		 je	 SHORT $LN2@cm_travers
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR cm$[rsp]
  000a8	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$21110[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$21110[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@cm_travers
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$21110[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@cm_travers
$LN1@cm_travers:
$LN2@cm_travers:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@cm_travers

; 738  :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@cm_travers:

; 739  : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
cm_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_08GICNCAOO@cm_clear?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$cm_clear DD imagerel cm_clear
	DD	imagerel cm_clear+218
	DD	imagerel $unwind$cm_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_08GICNCAOO@cm_clear?$AA@
CONST	SEGMENT
??_C@_08GICNCAOO@cm_clear?$AA@ DB 'cm_clear', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT cm_clear
_TEXT	SEGMENT
_py_tmp$21122 = 48
_py_tmp$21130 = 56
cm$ = 80
cm_clear PROC						; COMDAT

; 743  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN8@cm_clear:

; 744  :     Py_CLEAR(cm->cm_callable);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 53		 je	 SHORT $LN5@cm_clear
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  00022	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00026	41 b8 e8 02 00
	00		 mov	 r8d, 744		; 000002e8H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GICNCAOO@cm_clear?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN5@cm_clear
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21122[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  00056	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21122[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@cm_clear:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN8@cm_clear
$LN4@cm_clear:

; 745  :     Py_CLEAR(cm->cm_dict);

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  00073	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00078	74 53		 je	 SHORT $LN1@cm_clear
  0007a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  00087	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  0008b	41 b8 e9 02 00
	00		 mov	 r8d, 745		; 000002e9H
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GICNCAOO@cm_clear?$AA@
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 25		 jne	 SHORT $LN1@cm_clear
  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  000ad	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b1	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$21130[rsp], rax
  000b6	48 8b 44 24 50	 mov	 rax, QWORD PTR cm$[rsp]
  000bb	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  000c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$21130[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@cm_clear:
  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 9b		 jne	 SHORT $LN4@cm_clear

; 746  :     return 0;

  000d3	33 c0		 xor	 eax, eax

; 747  : }

  000d5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d9	c3		 ret	 0
cm_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@MCFKJGBA@uninitialized?5classmethod?5object@ ; `string'
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$cm_descr_get DD imagerel cm_descr_get
	DD	imagerel cm_descr_get+110
	DD	imagerel $unwind$cm_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_descr_get DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CB@MCFKJGBA@uninitialized?5classmethod?5object@
CONST	SEGMENT
??_C@_0CB@MCFKJGBA@uninitialized?5classmethod?5object@ DB 'uninitialized '
	DB	'classmethod object', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT cm_descr_get
_TEXT	SEGMENT
cm$ = 32
self$ = 64
obj$ = 72
type$ = 80
cm_descr_get PROC					; COMDAT

; 752  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 753  :     classmethod *cm = (classmethod *)self;

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR cm$[rsp], rax

; 754  : 
; 755  :     if (cm->cm_callable == NULL) {

  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR cm$[rsp]
  00022	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00027	75 17		 jne	 SHORT $LN2@cm_descr_g

; 756  :         PyErr_SetString(PyExc_RuntimeError,
; 757  :                         "uninitialized classmethod object");

  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@MCFKJGBA@uninitialized?5classmethod?5object@
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00037	e8 00 00 00 00	 call	 PyErr_SetString

; 758  :         return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 29		 jmp	 SHORT $LN3@cm_descr_g
$LN2@cm_descr_g:

; 759  :     }
; 760  :     if (type == NULL)

  00040	48 83 7c 24 50
	00		 cmp	 QWORD PTR type$[rsp], 0
  00046	75 0e		 jne	 SHORT $LN1@cm_descr_g

; 761  :         type = (PyObject *)(Py_TYPE(obj));

  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  0004d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00051	48 89 44 24 50	 mov	 QWORD PTR type$[rsp], rax
$LN1@cm_descr_g:

; 762  :     return PyMethod_New(cm->cm_callable, type);

  00056	48 8b 54 24 50	 mov	 rdx, QWORD PTR type$[rsp]
  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR cm$[rsp]
  00060	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00064	e8 00 00 00 00	 call	 PyMethod_New
$LN3@cm_descr_g:

; 763  : }

  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
cm_descr_get ENDP
_TEXT	ENDS
EXTRN	_PyArg_NoKeywords:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$cm_init DD imagerel cm_init
	DD	imagerel cm_init+138
	DD	imagerel $unwind$cm_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_init DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT cm_init
_TEXT	SEGMENT
callable$ = 48
cm$ = 56
self$ = 80
args$ = 88
kwds$ = 96
cm_init	PROC						; COMDAT

; 767  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 768  :     classmethod *cm = (classmethod *)self;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 38	 mov	 QWORD PTR cm$[rsp], rax

; 769  :     PyObject *callable;
; 770  : 
; 771  :     if (!PyArg_UnpackTuple(args, "classmethod", 1, 1, &callable))

  0001d	48 8d 44 24 30	 lea	 rax, QWORD PTR callable$[rsp]
  00022	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00027	41 b9 01 00 00
	00		 mov	 r9d, 1
  0002d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@FGHOINCL@classmethod?$AA@
  0003a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0003f	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00044	85 c0		 test	 eax, eax
  00046	75 07		 jne	 SHORT $LN2@cm_init

; 772  :         return -1;

  00048	b8 ff ff ff ff	 mov	 eax, -1
  0004d	eb 36		 jmp	 SHORT $LN3@cm_init
$LN2@cm_init:

; 773  :     if (!_PyArg_NoKeywords("classmethod", kwds))

  0004f	48 8b 54 24 60	 mov	 rdx, QWORD PTR kwds$[rsp]
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FGHOINCL@classmethod?$AA@
  0005b	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00060	85 c0		 test	 eax, eax
  00062	75 07		 jne	 SHORT $LN1@cm_init

; 774  :         return -1;

  00064	b8 ff ff ff ff	 mov	 eax, -1
  00069	eb 1a		 jmp	 SHORT $LN3@cm_init
$LN1@cm_init:

; 775  :     Py_INCREF(callable);

  0006b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR callable$[rsp]
  00070	e8 00 00 00 00	 call	 _Py_IncRef

; 776  :     cm->cm_callable = callable;

  00075	48 8b 44 24 38	 mov	 rax, QWORD PTR cm$[rsp]
  0007a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR callable$[rsp]
  0007f	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 777  :     return 0;

  00083	33 c0		 xor	 eax, eax
$LN3@cm_init:

; 778  : }

  00085	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00089	c3		 ret	 0
cm_init	ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_PyObject_IsAbstract:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$cm_get___isabstractmethod__ DD imagerel cm_get___isabstractmethod__
	DD	imagerel cm_get___isabstractmethod__+97
	DD	imagerel $unwind$cm_get___isabstractmethod__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cm_get___isabstractmethod__ DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT cm_get___isabstractmethod__
_TEXT	SEGMENT
res$ = 32
cm$ = 64
closure$ = 72
cm_get___isabstractmethod__ PROC			; COMDAT

; 787  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 788  :     int res = _PyObject_IsAbstract(cm->cm_callable);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR cm$[rsp]
  00013	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00017	e8 00 00 00 00	 call	 _PyObject_IsAbstract
  0001c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 789  :     if (res == -1) {

  00020	83 7c 24 20 ff	 cmp	 DWORD PTR res$[rsp], -1
  00025	75 06		 jne	 SHORT $LN3@cm_get___i

; 790  :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	eb 31		 jmp	 SHORT $LN4@cm_get___i
  0002b	eb 1c		 jmp	 SHORT $LN2@cm_get___i
$LN3@cm_get___i:

; 791  :     }
; 792  :     else if (res) {

  0002d	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00032	74 15		 je	 SHORT $LN1@cm_get___i

; 793  :         Py_RETURN_TRUE;

  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  0003b	e8 00 00 00 00	 call	 _Py_IncRef
  00040	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00047	eb 13		 jmp	 SHORT $LN4@cm_get___i
$LN1@cm_get___i:
$LN2@cm_get___i:

; 794  :     }
; 795  :     Py_RETURN_FALSE;

  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00050	e8 00 00 00 00	 call	 _Py_IncRef
  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
$LN4@cm_get___i:

; 796  : }

  0005c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00060	c3		 ret	 0
cm_get___isabstractmethod__ ENDP
_TEXT	ENDS
PUBLIC	PyClassMethod_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyClassMethod_New DD imagerel $LN4
	DD	imagerel $LN4+70
	DD	imagerel $unwind$PyClassMethod_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyClassMethod_New DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyClassMethod_New
_TEXT	SEGMENT
cm$ = 32
callable$ = 64
PyClassMethod_New PROC					; COMDAT

; 872  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 873  :     classmethod *cm = (classmethod *)
; 874  :         PyType_GenericAlloc(&PyClassMethod_Type, 0);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyClassMethod_Type
  00012	e8 00 00 00 00	 call	 PyType_GenericAlloc
  00017	48 89 44 24 20	 mov	 QWORD PTR cm$[rsp], rax

; 875  :     if (cm != NULL) {

  0001c	48 83 7c 24 20
	00		 cmp	 QWORD PTR cm$[rsp], 0
  00022	74 18		 je	 SHORT $LN1@PyClassMet

; 876  :         Py_INCREF(callable);

  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR callable$[rsp]
  00029	e8 00 00 00 00	 call	 _Py_IncRef

; 877  :         cm->cm_callable = callable;

  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR cm$[rsp]
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR callable$[rsp]
  00038	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN1@PyClassMet:

; 878  :     }
; 879  :     return (PyObject *)cm;

  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR cm$[rsp]

; 880  : }

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
PyClassMethod_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@BEKEAMPE@sm_dealloc?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$sm_dealloc DD imagerel sm_dealloc
	DD	imagerel sm_dealloc+337
	DD	imagerel $unwind$sm_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@BEKEAMPE@sm_dealloc?$AA@
CONST	SEGMENT
??_C@_0L@BEKEAMPE@sm_dealloc?$AA@ DB 'sm_dealloc', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sm_dealloc
_TEXT	SEGMENT
g$21243 = 48
tv79 = 56
sm$ = 80
sm_dealloc PROC						; COMDAT

; 907  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 908  :     _PyObject_GC_UNTRACK((PyObject *)sm);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 50	 mov	 r9, QWORD PTR sm$[rsp]
  00016	41 b8 8c 03 00
	00		 mov	 r8d, 908		; 0000038cH
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@BEKEAMPE@sm_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN12@sm_dealloc
$LN11@sm_dealloc:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR sm$[rsp]
  00044	41 b8 8c 03 00
	00		 mov	 r8d, 908		; 0000038cH
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@BEKEAMPE@sm_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN15@sm_dealloc
  00061	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN16@sm_dealloc
$LN15@sm_dealloc:
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN16@sm_dealloc:
  0007a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$21243[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21243[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN17@sm_dealloc
  00090	41 b8 8c 03 00
	00		 mov	 r8d, 908		; 0000038cH
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@ILMOJHBC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAu?$AAn?$AAc?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN17@sm_dealloc:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21243[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21243[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21243[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21243[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21243[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21243[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN11@sm_dealloc
$LN12@sm_dealloc:
$LN8@sm_dealloc:

; 909  :     Py_XDECREF(sm->sm_callable);

  000f8	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  000fd	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00102	74 0e		 je	 SHORT $LN5@sm_dealloc
  00104	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  00109	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0010d	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@sm_dealloc:
  00112	33 c0		 xor	 eax, eax
  00114	85 c0		 test	 eax, eax
  00116	75 e0		 jne	 SHORT $LN8@sm_dealloc
$LN4@sm_dealloc:

; 910  :     Py_XDECREF(sm->sm_dict);

  00118	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  0011d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00122	74 0e		 je	 SHORT $LN1@sm_dealloc
  00124	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  00129	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0012d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@sm_dealloc:
  00132	33 c0		 xor	 eax, eax
  00134	85 c0		 test	 eax, eax
  00136	75 e0		 jne	 SHORT $LN4@sm_dealloc

; 911  :     Py_TYPE(sm)->tp_free((PyObject *)sm);

  00138	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  0013d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00141	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sm$[rsp]
  00146	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 912  : }

  0014c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00150	c3		 ret	 0
sm_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@GJPIBIBG@sm_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$sm_traverse DD imagerel sm_traverse
	DD	imagerel sm_traverse+206
	DD	imagerel $unwind$sm_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0M@GJPIBIBG@sm_traverse?$AA@
CONST	SEGMENT
??_C@_0M@GJPIBIBG@sm_traverse?$AA@ DB 'sm_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sm_traverse
_TEXT	SEGMENT
vret$21276 = 32
vret$21284 = 36
sm$ = 64
visit$ = 72
arg$ = 80
sm_traverse PROC					; COMDAT

; 916  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@sm_travers:

; 917  :     Py_VISIT(sm->sm_callable);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@sm_travers
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 95 03 00
	00		 mov	 r8d, 917		; 00000395H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GJPIBIBG@sm_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@sm_travers:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR sm$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN8@sm_travers
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR sm$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21276[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21276[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@sm_travers
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21276[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@sm_travers
$LN7@sm_travers:
$LN8@sm_travers:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@sm_travers
$LN6@sm_travers:

; 918  :     Py_VISIT(sm->sm_dict);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@sm_travers
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 96 03 00
	00		 mov	 r8d, 918		; 00000396H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GJPIBIBG@sm_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@sm_travers:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR sm$[rsp]
  00097	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0009c	74 23		 je	 SHORT $LN2@sm_travers
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR sm$[rsp]
  000a8	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$21284[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$21284[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@sm_travers
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$21284[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@sm_travers
$LN1@sm_travers:
$LN2@sm_travers:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@sm_travers

; 919  :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@sm_travers:

; 920  : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
sm_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_08MEONGCJP@sm_clear?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$sm_clear DD imagerel sm_clear
	DD	imagerel sm_clear+218
	DD	imagerel $unwind$sm_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_08MEONGCJP@sm_clear?$AA@
CONST	SEGMENT
??_C@_08MEONGCJP@sm_clear?$AA@ DB 'sm_clear', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sm_clear
_TEXT	SEGMENT
_py_tmp$21296 = 48
_py_tmp$21304 = 56
sm$ = 80
sm_clear PROC						; COMDAT

; 924  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN8@sm_clear:

; 925  :     Py_CLEAR(sm->sm_callable);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 53		 je	 SHORT $LN5@sm_clear
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  00022	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00026	41 b8 9d 03 00
	00		 mov	 r8d, 925		; 0000039dH
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MEONGCJP@sm_clear?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN5@sm_clear
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21296[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  00056	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21296[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@sm_clear:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN8@sm_clear
$LN4@sm_clear:

; 926  :     Py_CLEAR(sm->sm_dict);

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  00073	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00078	74 53		 je	 SHORT $LN1@sm_clear
  0007a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  00087	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  0008b	41 b8 9e 03 00
	00		 mov	 r8d, 926		; 0000039eH
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@NKNOMNMK@?4?4?2Objects?2funcobject?4c?$AA@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MEONGCJP@sm_clear?$AA@
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 25		 jne	 SHORT $LN1@sm_clear
  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  000ad	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b1	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$21304[rsp], rax
  000b6	48 8b 44 24 50	 mov	 rax, QWORD PTR sm$[rsp]
  000bb	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  000c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$21304[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@sm_clear:
  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 9b		 jne	 SHORT $LN4@sm_clear

; 927  :     return 0;

  000d3	33 c0		 xor	 eax, eax

; 928  : }

  000d5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d9	c3		 ret	 0
sm_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@LBGCKIFJ@uninitialized?5staticmethod?5objec@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$sm_descr_get DD imagerel sm_descr_get
	DD	imagerel sm_descr_get+92
	DD	imagerel $unwind$sm_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_descr_get DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CC@LBGCKIFJ@uninitialized?5staticmethod?5objec@
CONST	SEGMENT
??_C@_0CC@LBGCKIFJ@uninitialized?5staticmethod?5objec@ DB 'uninitialized '
	DB	'staticmethod object', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT sm_descr_get
_TEXT	SEGMENT
sm$ = 32
self$ = 64
obj$ = 72
type$ = 80
sm_descr_get PROC					; COMDAT

; 932  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 933  :     staticmethod *sm = (staticmethod *)self;

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR sm$[rsp], rax

; 934  : 
; 935  :     if (sm->sm_callable == NULL) {

  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR sm$[rsp]
  00022	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00027	75 17		 jne	 SHORT $LN1@sm_descr_g

; 936  :         PyErr_SetString(PyExc_RuntimeError,
; 937  :                         "uninitialized staticmethod object");

  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@LBGCKIFJ@uninitialized?5staticmethod?5objec@
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00037	e8 00 00 00 00	 call	 PyErr_SetString

; 938  :         return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 17		 jmp	 SHORT $LN2@sm_descr_g
$LN1@sm_descr_g:

; 939  :     }
; 940  :     Py_INCREF(sm->sm_callable);

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR sm$[rsp]
  00045	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00049	e8 00 00 00 00	 call	 _Py_IncRef

; 941  :     return sm->sm_callable;

  0004e	48 8b 44 24 20	 mov	 rax, QWORD PTR sm$[rsp]
  00053	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
$LN2@sm_descr_g:

; 942  : }

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
sm_descr_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sm_init DD imagerel sm_init
	DD	imagerel sm_init+138
	DD	imagerel $unwind$sm_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_init DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sm_init
_TEXT	SEGMENT
sm$ = 48
callable$ = 56
self$ = 80
args$ = 88
kwds$ = 96
sm_init	PROC						; COMDAT

; 946  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 947  :     staticmethod *sm = (staticmethod *)self;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 30	 mov	 QWORD PTR sm$[rsp], rax

; 948  :     PyObject *callable;
; 949  : 
; 950  :     if (!PyArg_UnpackTuple(args, "staticmethod", 1, 1, &callable))

  0001d	48 8d 44 24 38	 lea	 rax, QWORD PTR callable$[rsp]
  00022	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00027	41 b9 01 00 00
	00		 mov	 r9d, 1
  0002d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@BCCHOHJA@staticmethod?$AA@
  0003a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0003f	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00044	85 c0		 test	 eax, eax
  00046	75 07		 jne	 SHORT $LN2@sm_init

; 951  :         return -1;

  00048	b8 ff ff ff ff	 mov	 eax, -1
  0004d	eb 36		 jmp	 SHORT $LN3@sm_init
$LN2@sm_init:

; 952  :     if (!_PyArg_NoKeywords("staticmethod", kwds))

  0004f	48 8b 54 24 60	 mov	 rdx, QWORD PTR kwds$[rsp]
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BCCHOHJA@staticmethod?$AA@
  0005b	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00060	85 c0		 test	 eax, eax
  00062	75 07		 jne	 SHORT $LN1@sm_init

; 953  :         return -1;

  00064	b8 ff ff ff ff	 mov	 eax, -1
  00069	eb 1a		 jmp	 SHORT $LN3@sm_init
$LN1@sm_init:

; 954  :     Py_INCREF(callable);

  0006b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR callable$[rsp]
  00070	e8 00 00 00 00	 call	 _Py_IncRef

; 955  :     sm->sm_callable = callable;

  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR sm$[rsp]
  0007a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR callable$[rsp]
  0007f	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 956  :     return 0;

  00083	33 c0		 xor	 eax, eax
$LN3@sm_init:

; 957  : }

  00085	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00089	c3		 ret	 0
sm_init	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sm_get___isabstractmethod__ DD imagerel sm_get___isabstractmethod__
	DD	imagerel sm_get___isabstractmethod__+97
	DD	imagerel $unwind$sm_get___isabstractmethod__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sm_get___isabstractmethod__ DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sm_get___isabstractmethod__
_TEXT	SEGMENT
res$ = 32
sm$ = 64
closure$ = 72
sm_get___isabstractmethod__ PROC			; COMDAT

; 966  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 967  :     int res = _PyObject_IsAbstract(sm->sm_callable);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR sm$[rsp]
  00013	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00017	e8 00 00 00 00	 call	 _PyObject_IsAbstract
  0001c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 968  :     if (res == -1) {

  00020	83 7c 24 20 ff	 cmp	 DWORD PTR res$[rsp], -1
  00025	75 06		 jne	 SHORT $LN3@sm_get___i

; 969  :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	eb 31		 jmp	 SHORT $LN4@sm_get___i
  0002b	eb 1c		 jmp	 SHORT $LN2@sm_get___i
$LN3@sm_get___i:

; 970  :     }
; 971  :     else if (res) {

  0002d	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00032	74 15		 je	 SHORT $LN1@sm_get___i

; 972  :         Py_RETURN_TRUE;

  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  0003b	e8 00 00 00 00	 call	 _Py_IncRef
  00040	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00047	eb 13		 jmp	 SHORT $LN4@sm_get___i
$LN1@sm_get___i:
$LN2@sm_get___i:

; 973  :     }
; 974  :     Py_RETURN_FALSE;

  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00050	e8 00 00 00 00	 call	 _Py_IncRef
  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
$LN4@sm_get___i:

; 975  : }

  0005c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00060	c3		 ret	 0
sm_get___isabstractmethod__ ENDP
_TEXT	ENDS
PUBLIC	PyStaticMethod_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyStaticMethod_New DD imagerel $LN4
	DD	imagerel $LN4+70
	DD	imagerel $unwind$PyStaticMethod_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyStaticMethod_New DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyStaticMethod_New
_TEXT	SEGMENT
sm$ = 32
callable$ = 64
PyStaticMethod_New PROC					; COMDAT

; 1048 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1049 :     staticmethod *sm = (staticmethod *)
; 1050 :         PyType_GenericAlloc(&PyStaticMethod_Type, 0);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStaticMethod_Type
  00012	e8 00 00 00 00	 call	 PyType_GenericAlloc
  00017	48 89 44 24 20	 mov	 QWORD PTR sm$[rsp], rax

; 1051 :     if (sm != NULL) {

  0001c	48 83 7c 24 20
	00		 cmp	 QWORD PTR sm$[rsp], 0
  00022	74 18		 je	 SHORT $LN1@PyStaticMe

; 1052 :         Py_INCREF(callable);

  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR callable$[rsp]
  00029	e8 00 00 00 00	 call	 _Py_IncRef

; 1053 :         sm->sm_callable = callable;

  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR sm$[rsp]
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR callable$[rsp]
  00038	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN1@PyStaticMe:

; 1054 :     }
; 1055 :     return (PyObject *)sm;

  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR sm$[rsp]

; 1056 : }

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
PyStaticMethod_New ENDP
_TEXT	ENDS
END
