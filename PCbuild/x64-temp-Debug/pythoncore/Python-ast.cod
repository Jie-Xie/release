; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04BNOAKKGF@_ast?$AA@			; `string'
PUBLIC	??_C@_0M@CDHEEICO@_attributes?$AA@		; `string'
PUBLIC	??_C@_08IBLOGDG@_ast?4AST?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_07LKKIBPPO@_fields?$AA@			; `string'
PUBLIC	??_C@_0O@PNIBPJAK@optional_vars?$AA@		; `string'
PUBLIC	??_C@_0N@NOGLGHPG@context_expr?$AA@		; `string'
PUBLIC	??_C@_06DPPJIGGE@asname?$AA@			; `string'
PUBLIC	??_C@_0L@HOGAMHHM@annotation?$AA@		; `string'
PUBLIC	??_C@_03CAOIPBNL@arg?$AA@			; `string'
PUBLIC	??_C@_0M@OHIOHNMJ@kw_defaults?$AA@		; `string'
PUBLIC	??_C@_08LMJEPNLL@defaults?$AA@			; `string'
PUBLIC	??_C@_0BA@JACLGMFO@kwargannotation?$AA@		; `string'
PUBLIC	??_C@_05JJKPEMCC@kwarg?$AA@			; `string'
PUBLIC	??_C@_0L@PJHGIGJA@kwonlyargs?$AA@		; `string'
PUBLIC	??_C@_0BB@LBMLKLGK@varargannotation?$AA@	; `string'
PUBLIC	??_C@_06FDMCHLPI@vararg?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_03NANNAFMN@ifs?$AA@			; `string'
PUBLIC	??_C@_04FHFMBDKA@dims?$AA@			; `string'
PUBLIC	??_C@_04CNBNFAL@step?$AA@			; `string'
PUBLIC	??_C@_05NECKJAMC@upper?$AA@			; `string'
PUBLIC	??_C@_05IPJEPLHL@lower?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_05ILHMOJGN@slice?$AA@			; `string'
PUBLIC	??_C@_03EDDGELHM@ctx?$AA@			; `string'
PUBLIC	??_C@_04DHCDLKCM@attr?$AA@			; `string'
PUBLIC	??_C@_01LKDEMHDF@s?$AA@				; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_04HPNHAEOP@func?$AA@			; `string'
PUBLIC	??_C@_0M@FEBOCDAK@comparators?$AA@		; `string'
PUBLIC	??_C@_03ONBNIFND@ops?$AA@			; `string'
PUBLIC	??_C@_03ICHNJLJF@key?$AA@			; `string'
PUBLIC	??_C@_0L@FCNMNMNJ@generators?$AA@		; `string'
PUBLIC	??_C@_03NINNKJGE@elt?$AA@			; `string'
PUBLIC	??_C@_04EOBFFCNN@elts?$AA@			; `string'
PUBLIC	??_C@_04IEPFDAGF@keys?$AA@			; `string'
PUBLIC	??_C@_07GEBHLHAD@operand?$AA@			; `string'
PUBLIC	??_C@_05DHJDAOHK@right?$AA@			; `string'
PUBLIC	??_C@_04GOOOJOPP@left?$AA@			; `string'
PUBLIC	??_C@_06GEKOPAHD@values?$AA@			; `string'
PUBLIC	??_C@_05KJNJLLGA@level?$AA@			; `string'
PUBLIC	??_C@_06BIEEJMKO@module?$AA@			; `string'
PUBLIC	??_C@_05FLNDGCKL@names?$AA@			; `string'
PUBLIC	??_C@_03GLPMCEFE@msg?$AA@			; `string'
PUBLIC	??_C@_09JGEOIMID@finalbody?$AA@			; `string'
PUBLIC	??_C@_08KJLNBJEK@handlers?$AA@			; `string'
PUBLIC	??_C@_05HGNDGEBA@cause?$AA@			; `string'
PUBLIC	??_C@_03MGHBCGFO@exc?$AA@			; `string'
PUBLIC	??_C@_05CFHBDDLG@items?$AA@			; `string'
PUBLIC	??_C@_04CEJDCDCH@test?$AA@			; `string'
PUBLIC	??_C@_06DHJIEJCK@orelse?$AA@			; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
PUBLIC	??_C@_02GMAKNDAG@op?$AA@			; `string'
PUBLIC	??_C@_06JJLAMBGK@target?$AA@			; `string'
PUBLIC	??_C@_07KJOMBCLC@targets?$AA@			; `string'
PUBLIC	??_C@_05MFEJDJP@value?$AA@			; `string'
PUBLIC	??_C@_06NBOLMEJN@kwargs?$AA@			; `string'
PUBLIC	??_C@_08LPAHKBMK@starargs?$AA@			; `string'
PUBLIC	??_C@_08KBIEDDDE@keywords?$AA@			; `string'
PUBLIC	??_C@_05JMNHICHM@bases?$AA@			; `string'
PUBLIC	??_C@_07ILMKFBFJ@returns?$AA@			; `string'
PUBLIC	??_C@_0P@LMCHOPJJ@decorator_list?$AA@		; `string'
PUBLIC	??_C@_04BFDDMJJI@args?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_0L@ICBHJKOA@col_offset?$AA@		; `string'
PUBLIC	??_C@_06ILKIAHNN@lineno?$AA@			; `string'
PUBLIC	??_C@_04IEJGKNJ@body?$AA@			; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
EXTRN	PyObject_GenericSetDict:PROC
EXTRN	PyObject_GenericGetDict:PROC
;	COMDAT ??_C@_04BNOAKKGF@_ast?$AA@
CONST	SEGMENT
??_C@_04BNOAKKGF@_ast?$AA@ DB '_ast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CDHEEICO@_attributes?$AA@
CONST	SEGMENT
??_C@_0M@CDHEEICO@_attributes?$AA@ DB '_attributes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBLOGDG@_ast?4AST?$AA@
CONST	SEGMENT
??_C@_08IBLOGDG@_ast?4AST?$AA@ DB '_ast.AST', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LKKIBPPO@_fields?$AA@
CONST	SEGMENT
??_C@_07LKKIBPPO@_fields?$AA@ DB '_fields', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PNIBPJAK@optional_vars?$AA@
CONST	SEGMENT
??_C@_0O@PNIBPJAK@optional_vars?$AA@ DB 'optional_vars', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NOGLGHPG@context_expr?$AA@
CONST	SEGMENT
??_C@_0N@NOGLGHPG@context_expr?$AA@ DB 'context_expr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPPJIGGE@asname?$AA@
CONST	SEGMENT
??_C@_06DPPJIGGE@asname?$AA@ DB 'asname', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGAMHHM@annotation?$AA@
CONST	SEGMENT
??_C@_0L@HOGAMHHM@annotation?$AA@ DB 'annotation', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CAOIPBNL@arg?$AA@
CONST	SEGMENT
??_C@_03CAOIPBNL@arg?$AA@ DB 'arg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHIOHNMJ@kw_defaults?$AA@
CONST	SEGMENT
??_C@_0M@OHIOHNMJ@kw_defaults?$AA@ DB 'kw_defaults', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LMJEPNLL@defaults?$AA@
CONST	SEGMENT
??_C@_08LMJEPNLL@defaults?$AA@ DB 'defaults', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JACLGMFO@kwargannotation?$AA@
CONST	SEGMENT
??_C@_0BA@JACLGMFO@kwargannotation?$AA@ DB 'kwargannotation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JJKPEMCC@kwarg?$AA@
CONST	SEGMENT
??_C@_05JJKPEMCC@kwarg?$AA@ DB 'kwarg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PJHGIGJA@kwonlyargs?$AA@
CONST	SEGMENT
??_C@_0L@PJHGIGJA@kwonlyargs?$AA@ DB 'kwonlyargs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LBMLKLGK@varargannotation?$AA@
CONST	SEGMENT
??_C@_0BB@LBMLKLGK@varargannotation?$AA@ DB 'varargannotation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDMCHLPI@vararg?$AA@
CONST	SEGMENT
??_C@_06FDMCHLPI@vararg?$AA@ DB 'vararg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NANNAFMN@ifs?$AA@
CONST	SEGMENT
??_C@_03NANNAFMN@ifs?$AA@ DB 'ifs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FHFMBDKA@dims?$AA@
CONST	SEGMENT
??_C@_04FHFMBDKA@dims?$AA@ DB 'dims', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNBNFAL@step?$AA@
CONST	SEGMENT
??_C@_04CNBNFAL@step?$AA@ DB 'step', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NECKJAMC@upper?$AA@
CONST	SEGMENT
??_C@_05NECKJAMC@upper?$AA@ DB 'upper', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPJEPLHL@lower?$AA@
CONST	SEGMENT
??_C@_05IPJEPLHL@lower?$AA@ DB 'lower', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ILHMOJGN@slice?$AA@
CONST	SEGMENT
??_C@_05ILHMOJGN@slice?$AA@ DB 'slice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EDDGELHM@ctx?$AA@
CONST	SEGMENT
??_C@_03EDDGELHM@ctx?$AA@ DB 'ctx', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHCDLKCM@attr?$AA@
CONST	SEGMENT
??_C@_04DHCDLKCM@attr?$AA@ DB 'attr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
CONST	SEGMENT
??_C@_01LKDEMHDF@s?$AA@ DB 's', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPNHAEOP@func?$AA@
CONST	SEGMENT
??_C@_04HPNHAEOP@func?$AA@ DB 'func', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FEBOCDAK@comparators?$AA@
CONST	SEGMENT
??_C@_0M@FEBOCDAK@comparators?$AA@ DB 'comparators', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03ONBNIFND@ops?$AA@
CONST	SEGMENT
??_C@_03ONBNIFND@ops?$AA@ DB 'ops', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICHNJLJF@key?$AA@
CONST	SEGMENT
??_C@_03ICHNJLJF@key?$AA@ DB 'key', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCNMNMNJ@generators?$AA@
CONST	SEGMENT
??_C@_0L@FCNMNMNJ@generators?$AA@ DB 'generators', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03NINNKJGE@elt?$AA@
CONST	SEGMENT
??_C@_03NINNKJGE@elt?$AA@ DB 'elt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EOBFFCNN@elts?$AA@
CONST	SEGMENT
??_C@_04EOBFFCNN@elts?$AA@ DB 'elts', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEPFDAGF@keys?$AA@
CONST	SEGMENT
??_C@_04IEPFDAGF@keys?$AA@ DB 'keys', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GEBHLHAD@operand?$AA@
CONST	SEGMENT
??_C@_07GEBHLHAD@operand?$AA@ DB 'operand', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DHJDAOHK@right?$AA@
CONST	SEGMENT
??_C@_05DHJDAOHK@right?$AA@ DB 'right', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOOOJOPP@left?$AA@
CONST	SEGMENT
??_C@_04GOOOJOPP@left?$AA@ DB 'left', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEKOPAHD@values?$AA@
CONST	SEGMENT
??_C@_06GEKOPAHD@values?$AA@ DB 'values', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNJLLGA@level?$AA@
CONST	SEGMENT
??_C@_05KJNJLLGA@level?$AA@ DB 'level', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BIEEJMKO@module?$AA@
CONST	SEGMENT
??_C@_06BIEEJMKO@module?$AA@ DB 'module', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FLNDGCKL@names?$AA@
CONST	SEGMENT
??_C@_05FLNDGCKL@names?$AA@ DB 'names', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLPMCEFE@msg?$AA@
CONST	SEGMENT
??_C@_03GLPMCEFE@msg?$AA@ DB 'msg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGEOIMID@finalbody?$AA@
CONST	SEGMENT
??_C@_09JGEOIMID@finalbody?$AA@ DB 'finalbody', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KJLNBJEK@handlers?$AA@
CONST	SEGMENT
??_C@_08KJLNBJEK@handlers?$AA@ DB 'handlers', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGNDGEBA@cause?$AA@
CONST	SEGMENT
??_C@_05HGNDGEBA@cause?$AA@ DB 'cause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGHBCGFO@exc?$AA@
CONST	SEGMENT
??_C@_03MGHBCGFO@exc?$AA@ DB 'exc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFHBDDLG@items?$AA@
CONST	SEGMENT
??_C@_05CFHBDDLG@items?$AA@ DB 'items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEJDCDCH@test?$AA@
CONST	SEGMENT
??_C@_04CEJDCDCH@test?$AA@ DB 'test', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHJIEJCK@orelse?$AA@
CONST	SEGMENT
??_C@_06DHJIEJCK@orelse?$AA@ DB 'orelse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMAKNDAG@op?$AA@
CONST	SEGMENT
??_C@_02GMAKNDAG@op?$AA@ DB 'op', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target?$AA@
CONST	SEGMENT
??_C@_06JJLAMBGK@target?$AA@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJOMBCLC@targets?$AA@
CONST	SEGMENT
??_C@_07KJOMBCLC@targets?$AA@ DB 'targets', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFEJDJP@value?$AA@
CONST	SEGMENT
??_C@_05MFEJDJP@value?$AA@ DB 'value', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBOLMEJN@kwargs?$AA@
CONST	SEGMENT
??_C@_06NBOLMEJN@kwargs?$AA@ DB 'kwargs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPAHKBMK@starargs?$AA@
CONST	SEGMENT
??_C@_08LPAHKBMK@starargs?$AA@ DB 'starargs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBIEDDDE@keywords?$AA@
CONST	SEGMENT
??_C@_08KBIEDDDE@keywords?$AA@ DB 'keywords', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JMNHICHM@bases?$AA@
CONST	SEGMENT
??_C@_05JMNHICHM@bases?$AA@ DB 'bases', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ILMKFBFJ@returns?$AA@
CONST	SEGMENT
??_C@_07ILMKFBFJ@returns?$AA@ DB 'returns', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LMCHOPJJ@decorator_list?$AA@
CONST	SEGMENT
??_C@_0P@LMCHOPJJ@decorator_list?$AA@ DB 'decorator_list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFDDMJJI@args?$AA@
CONST	SEGMENT
??_C@_04BFDDMJJI@args?$AA@ DB 'args', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ICBHJKOA@col_offset?$AA@
CONST	SEGMENT
??_C@_0L@ICBHJKOA@col_offset?$AA@ DB 'col_offset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILKIAHNN@lineno?$AA@
CONST	SEGMENT
??_C@_06ILKIAHNN@lineno?$AA@ DB 'lineno', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
Module_fields DQ FLAT:??_C@_04IEJGKNJ@body?$AA@
Interactive_fields DQ FLAT:??_C@_04IEJGKNJ@body?$AA@
Expression_fields DQ FLAT:??_C@_04IEJGKNJ@body?$AA@
Suite_fields DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
stmt_attributes DQ FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	FLAT:??_C@_0L@ICBHJKOA@col_offset?$AA@
FunctionDef_fields DQ FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:??_C@_04BFDDMJJI@args?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_0P@LMCHOPJJ@decorator_list?$AA@
	DQ	FLAT:??_C@_07ILMKFBFJ@returns?$AA@
ClassDef_fields DQ FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:??_C@_05JMNHICHM@bases?$AA@
	DQ	FLAT:??_C@_08KBIEDDDE@keywords?$AA@
	DQ	FLAT:??_C@_08LPAHKBMK@starargs?$AA@
	DQ	FLAT:??_C@_06NBOLMEJN@kwargs?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_0P@LMCHOPJJ@decorator_list?$AA@
Return_fields DQ FLAT:??_C@_05MFEJDJP@value?$AA@
Delete_fields DQ FLAT:??_C@_07KJOMBCLC@targets?$AA@
Assign_fields DQ FLAT:??_C@_07KJOMBCLC@targets?$AA@
	DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
AugAssign_fields DQ FLAT:??_C@_06JJLAMBGK@target?$AA@
	DQ	FLAT:??_C@_02GMAKNDAG@op?$AA@
	DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
For_fields DQ	FLAT:??_C@_06JJLAMBGK@target?$AA@
	DQ	FLAT:??_C@_04BKLHDIKK@iter?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
While_fields DQ	FLAT:??_C@_04CEJDCDCH@test?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
If_fields DQ	FLAT:??_C@_04CEJDCDCH@test?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
With_fields DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
Raise_fields DQ	FLAT:??_C@_03MGHBCGFO@exc?$AA@
	DQ	FLAT:??_C@_05HGNDGEBA@cause?$AA@
Try_fields DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_08KJLNBJEK@handlers?$AA@
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
	DQ	FLAT:??_C@_09JGEOIMID@finalbody?$AA@
Assert_fields DQ FLAT:??_C@_04CEJDCDCH@test?$AA@
	DQ	FLAT:??_C@_03GLPMCEFE@msg?$AA@
Import_fields DQ FLAT:??_C@_05FLNDGCKL@names?$AA@
ImportFrom_fields DQ FLAT:??_C@_06BIEEJMKO@module?$AA@
	DQ	FLAT:??_C@_05FLNDGCKL@names?$AA@
	DQ	FLAT:??_C@_05KJNJLLGA@level?$AA@
Global_fields DQ FLAT:??_C@_05FLNDGCKL@names?$AA@
Nonlocal_fields DQ FLAT:??_C@_05FLNDGCKL@names?$AA@
Expr_fields DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
expr_attributes DQ FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	FLAT:??_C@_0L@ICBHJKOA@col_offset?$AA@
BoolOp_fields DQ FLAT:??_C@_02GMAKNDAG@op?$AA@
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
BinOp_fields DQ	FLAT:??_C@_04GOOOJOPP@left?$AA@
	DQ	FLAT:??_C@_02GMAKNDAG@op?$AA@
	DQ	FLAT:??_C@_05DHJDAOHK@right?$AA@
UnaryOp_fields DQ FLAT:??_C@_02GMAKNDAG@op?$AA@
	DQ	FLAT:??_C@_07GEBHLHAD@operand?$AA@
Lambda_fields DQ FLAT:??_C@_04BFDDMJJI@args?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
IfExp_fields DQ	FLAT:??_C@_04CEJDCDCH@test?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
Dict_fields DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
Set_fields DQ	FLAT:??_C@_04EOBFFCNN@elts?$AA@
ListComp_fields DQ FLAT:??_C@_03NINNKJGE@elt?$AA@
	DQ	FLAT:??_C@_0L@FCNMNMNJ@generators?$AA@
SetComp_fields DQ FLAT:??_C@_03NINNKJGE@elt?$AA@
	DQ	FLAT:??_C@_0L@FCNMNMNJ@generators?$AA@
DictComp_fields DQ FLAT:??_C@_03ICHNJLJF@key?$AA@
	DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
	DQ	FLAT:??_C@_0L@FCNMNMNJ@generators?$AA@
GeneratorExp_fields DQ FLAT:??_C@_03NINNKJGE@elt?$AA@
	DQ	FLAT:??_C@_0L@FCNMNMNJ@generators?$AA@
Yield_fields DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
YieldFrom_fields DQ FLAT:??_C@_05MFEJDJP@value?$AA@
Compare_fields DQ FLAT:??_C@_04GOOOJOPP@left?$AA@
	DQ	FLAT:??_C@_03ONBNIFND@ops?$AA@
	DQ	FLAT:??_C@_0M@FEBOCDAK@comparators?$AA@
Call_fields DQ	FLAT:??_C@_04HPNHAEOP@func?$AA@
	DQ	FLAT:??_C@_04BFDDMJJI@args?$AA@
	DQ	FLAT:??_C@_08KBIEDDDE@keywords?$AA@
	DQ	FLAT:??_C@_08LPAHKBMK@starargs?$AA@
	DQ	FLAT:??_C@_06NBOLMEJN@kwargs?$AA@
Num_fields DQ	FLAT:??_C@_01EFFIKLCJ@n?$AA@
Str_fields DQ	FLAT:??_C@_01LKDEMHDF@s?$AA@
Bytes_fields DQ	FLAT:??_C@_01LKDEMHDF@s?$AA@
Attribute_fields DQ FLAT:??_C@_05MFEJDJP@value?$AA@
	DQ	FLAT:??_C@_04DHCDLKCM@attr?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
Subscript_fields DQ FLAT:??_C@_05MFEJDJP@value?$AA@
	DQ	FLAT:??_C@_05ILHMOJGN@slice?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
Starred_fields DQ FLAT:??_C@_05MFEJDJP@value?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
Name_fields DQ	FLAT:??_C@_02EGCJHIOB@id?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
List_fields DQ	FLAT:??_C@_04EOBFFCNN@elts?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
Tuple_fields DQ	FLAT:??_C@_04EOBFFCNN@elts?$AA@
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
Slice_fields DQ	FLAT:??_C@_05IPJEPLHL@lower?$AA@
	DQ	FLAT:??_C@_05NECKJAMC@upper?$AA@
	DQ	FLAT:??_C@_04CNBNFAL@step?$AA@
ExtSlice_fields DQ FLAT:??_C@_04FHFMBDKA@dims?$AA@
Index_fields DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
comprehension_fields DQ FLAT:??_C@_06JJLAMBGK@target?$AA@
	DQ	FLAT:??_C@_04BKLHDIKK@iter?$AA@
	DQ	FLAT:??_C@_03NANNAFMN@ifs?$AA@
excepthandler_attributes DQ FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	FLAT:??_C@_0L@ICBHJKOA@col_offset?$AA@
ExceptHandler_fields DQ FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
arguments_fields DQ FLAT:??_C@_04BFDDMJJI@args?$AA@
	DQ	FLAT:??_C@_06FDMCHLPI@vararg?$AA@
	DQ	FLAT:??_C@_0BB@LBMLKLGK@varargannotation?$AA@
	DQ	FLAT:??_C@_0L@PJHGIGJA@kwonlyargs?$AA@
	DQ	FLAT:??_C@_05JJKPEMCC@kwarg?$AA@
	DQ	FLAT:??_C@_0BA@JACLGMFO@kwargannotation?$AA@
	DQ	FLAT:??_C@_08LMJEPNLL@defaults?$AA@
	DQ	FLAT:??_C@_0M@OHIOHNMJ@kw_defaults?$AA@
arg_fields DQ	FLAT:??_C@_03CAOIPBNL@arg?$AA@
	DQ	FLAT:??_C@_0L@HOGAMHHM@annotation?$AA@
keyword_fields DQ FLAT:??_C@_03CAOIPBNL@arg?$AA@
	DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
alias_fields DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:??_C@_06DPPJIGGE@asname?$AA@
withitem_fields DQ FLAT:??_C@_0N@NOGLGHPG@context_expr?$AA@
	DQ	FLAT:??_C@_0O@PNIBPJAK@optional_vars?$AA@
ast_type_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:ast_type_reduce
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+24
ast_type_getsets DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	FLAT:PyObject_GenericSetDict
	ORG $+16
	DQ	0000000000000000H
	ORG $+32
AST_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08IBLOGDG@_ast?4AST?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:ast_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:ast_traverse
	DQ	FLAT:ast_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:ast_type_methods
	DQ	0000000000000000H
	DQ	FLAT:ast_type_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000060H
	DQ	FLAT:ast_type_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_astmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04BNOAKKGF@_ast?$AA@
	ORG $+56
_DATA	ENDS
_TLS	SEGMENT
?PyId__attributes@?1??add_attributes@@9@9 DQ 0000000000000000H ; `add_attributes'::`2'::PyId__attributes
	DQ	FLAT:??_C@_0M@CDHEEICO@_attributes?$AA@
	DQ	0000000000000000H
?PyId___dict__@?1??ast_type_reduce@@9@9 DQ 0000000000000000H ; `ast_type_reduce'::`2'::PyId___dict__
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	0000000000000000H
?PyId__fields@?1??ast_type_init@@9@9 DQ 0000000000000000H ; `ast_type_init'::`2'::PyId__fields
	DQ	FLAT:??_C@_07LKKIBPPO@_fields?$AA@
	DQ	0000000000000000H
PyId_optional_vars DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@PNIBPJAK@optional_vars?$AA@
	DQ	0000000000000000H
PyId_context_expr DQ 0000000000000000H
	DQ	FLAT:??_C@_0N@NOGLGHPG@context_expr?$AA@
	DQ	0000000000000000H
PyId_asname DQ	0000000000000000H
	DQ	FLAT:??_C@_06DPPJIGGE@asname?$AA@
	DQ	0000000000000000H
PyId_annotation DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@HOGAMHHM@annotation?$AA@
	DQ	0000000000000000H
PyId_arg DQ	0000000000000000H
	DQ	FLAT:??_C@_03CAOIPBNL@arg?$AA@
	DQ	0000000000000000H
PyId_kw_defaults DQ 0000000000000000H
	DQ	FLAT:??_C@_0M@OHIOHNMJ@kw_defaults?$AA@
	DQ	0000000000000000H
PyId_defaults DQ 0000000000000000H
	DQ	FLAT:??_C@_08LMJEPNLL@defaults?$AA@
	DQ	0000000000000000H
PyId_kwargannotation DQ 0000000000000000H
	DQ	FLAT:??_C@_0BA@JACLGMFO@kwargannotation?$AA@
	DQ	0000000000000000H
PyId_kwarg DQ	0000000000000000H
	DQ	FLAT:??_C@_05JJKPEMCC@kwarg?$AA@
	DQ	0000000000000000H
PyId_kwonlyargs DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@PJHGIGJA@kwonlyargs?$AA@
	DQ	0000000000000000H
PyId_varargannotation DQ 0000000000000000H
	DQ	FLAT:??_C@_0BB@LBMLKLGK@varargannotation?$AA@
	DQ	0000000000000000H
PyId_vararg DQ	0000000000000000H
	DQ	FLAT:??_C@_06FDMCHLPI@vararg?$AA@
	DQ	0000000000000000H
PyId_type DQ	0000000000000000H
	DQ	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DQ	0000000000000000H
PyId_ifs DQ	0000000000000000H
	DQ	FLAT:??_C@_03NANNAFMN@ifs?$AA@
	DQ	0000000000000000H
PyId_dims DQ	0000000000000000H
	DQ	FLAT:??_C@_04FHFMBDKA@dims?$AA@
	DQ	0000000000000000H
PyId_step DQ	0000000000000000H
	DQ	FLAT:??_C@_04CNBNFAL@step?$AA@
	DQ	0000000000000000H
PyId_upper DQ	0000000000000000H
	DQ	FLAT:??_C@_05NECKJAMC@upper?$AA@
	DQ	0000000000000000H
PyId_lower DQ	0000000000000000H
	DQ	FLAT:??_C@_05IPJEPLHL@lower?$AA@
	DQ	0000000000000000H
PyId_id	DQ	0000000000000000H
	DQ	FLAT:??_C@_02EGCJHIOB@id?$AA@
	DQ	0000000000000000H
PyId_slice DQ	0000000000000000H
	DQ	FLAT:??_C@_05ILHMOJGN@slice?$AA@
	DQ	0000000000000000H
PyId_ctx DQ	0000000000000000H
	DQ	FLAT:??_C@_03EDDGELHM@ctx?$AA@
	DQ	0000000000000000H
PyId_attr DQ	0000000000000000H
	DQ	FLAT:??_C@_04DHCDLKCM@attr?$AA@
	DQ	0000000000000000H
PyId_s	DQ	0000000000000000H
	DQ	FLAT:??_C@_01LKDEMHDF@s?$AA@
	DQ	0000000000000000H
PyId_n	DQ	0000000000000000H
	DQ	FLAT:??_C@_01EFFIKLCJ@n?$AA@
	DQ	0000000000000000H
PyId_func DQ	0000000000000000H
	DQ	FLAT:??_C@_04HPNHAEOP@func?$AA@
	DQ	0000000000000000H
PyId_comparators DQ 0000000000000000H
	DQ	FLAT:??_C@_0M@FEBOCDAK@comparators?$AA@
	DQ	0000000000000000H
PyId_ops DQ	0000000000000000H
	DQ	FLAT:??_C@_03ONBNIFND@ops?$AA@
	DQ	0000000000000000H
PyId_key DQ	0000000000000000H
	DQ	FLAT:??_C@_03ICHNJLJF@key?$AA@
	DQ	0000000000000000H
PyId_generators DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@FCNMNMNJ@generators?$AA@
	DQ	0000000000000000H
PyId_elt DQ	0000000000000000H
	DQ	FLAT:??_C@_03NINNKJGE@elt?$AA@
	DQ	0000000000000000H
PyId_elts DQ	0000000000000000H
	DQ	FLAT:??_C@_04EOBFFCNN@elts?$AA@
	DQ	0000000000000000H
PyId_keys DQ	0000000000000000H
	DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	0000000000000000H
PyId_operand DQ	0000000000000000H
	DQ	FLAT:??_C@_07GEBHLHAD@operand?$AA@
	DQ	0000000000000000H
PyId_right DQ	0000000000000000H
	DQ	FLAT:??_C@_05DHJDAOHK@right?$AA@
	DQ	0000000000000000H
PyId_left DQ	0000000000000000H
	DQ	FLAT:??_C@_04GOOOJOPP@left?$AA@
	DQ	0000000000000000H
PyId_values DQ	0000000000000000H
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
	DQ	0000000000000000H
PyId_level DQ	0000000000000000H
	DQ	FLAT:??_C@_05KJNJLLGA@level?$AA@
	DQ	0000000000000000H
PyId_module DQ	0000000000000000H
	DQ	FLAT:??_C@_06BIEEJMKO@module?$AA@
	DQ	0000000000000000H
PyId_names DQ	0000000000000000H
	DQ	FLAT:??_C@_05FLNDGCKL@names?$AA@
	DQ	0000000000000000H
PyId_msg DQ	0000000000000000H
	DQ	FLAT:??_C@_03GLPMCEFE@msg?$AA@
	DQ	0000000000000000H
PyId_finalbody DQ 0000000000000000H
	DQ	FLAT:??_C@_09JGEOIMID@finalbody?$AA@
	DQ	0000000000000000H
PyId_handlers DQ 0000000000000000H
	DQ	FLAT:??_C@_08KJLNBJEK@handlers?$AA@
	DQ	0000000000000000H
PyId_cause DQ	0000000000000000H
	DQ	FLAT:??_C@_05HGNDGEBA@cause?$AA@
	DQ	0000000000000000H
PyId_exc DQ	0000000000000000H
	DQ	FLAT:??_C@_03MGHBCGFO@exc?$AA@
	DQ	0000000000000000H
PyId_items DQ	0000000000000000H
	DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	0000000000000000H
PyId_test DQ	0000000000000000H
	DQ	FLAT:??_C@_04CEJDCDCH@test?$AA@
	DQ	0000000000000000H
PyId_orelse DQ	0000000000000000H
	DQ	FLAT:??_C@_06DHJIEJCK@orelse?$AA@
	DQ	0000000000000000H
PyId_iter DQ	0000000000000000H
	DQ	FLAT:??_C@_04BKLHDIKK@iter?$AA@
	DQ	0000000000000000H
PyId_op	DQ	0000000000000000H
	DQ	FLAT:??_C@_02GMAKNDAG@op?$AA@
	DQ	0000000000000000H
PyId_target DQ	0000000000000000H
	DQ	FLAT:??_C@_06JJLAMBGK@target?$AA@
	DQ	0000000000000000H
PyId_targets DQ	0000000000000000H
	DQ	FLAT:??_C@_07KJOMBCLC@targets?$AA@
	DQ	0000000000000000H
PyId_value DQ	0000000000000000H
	DQ	FLAT:??_C@_05MFEJDJP@value?$AA@
	DQ	0000000000000000H
PyId_kwargs DQ	0000000000000000H
	DQ	FLAT:??_C@_06NBOLMEJN@kwargs?$AA@
	DQ	0000000000000000H
PyId_starargs DQ 0000000000000000H
	DQ	FLAT:??_C@_08LPAHKBMK@starargs?$AA@
	DQ	0000000000000000H
PyId_keywords DQ 0000000000000000H
	DQ	FLAT:??_C@_08KBIEDDDE@keywords?$AA@
	DQ	0000000000000000H
PyId_bases DQ	0000000000000000H
	DQ	FLAT:??_C@_05JMNHICHM@bases?$AA@
	DQ	0000000000000000H
PyId_returns DQ	0000000000000000H
	DQ	FLAT:??_C@_07ILMKFBFJ@returns?$AA@
	DQ	0000000000000000H
PyId_decorator_list DQ 0000000000000000H
	DQ	FLAT:??_C@_0P@LMCHOPJJ@decorator_list?$AA@
	DQ	0000000000000000H
PyId_args DQ	0000000000000000H
	DQ	FLAT:??_C@_04BFDDMJJI@args?$AA@
	DQ	0000000000000000H
PyId_name DQ	0000000000000000H
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	0000000000000000H
PyId_col_offset DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@ICBHJKOA@col_offset?$AA@
	DQ	0000000000000000H
PyId_lineno DQ	0000000000000000H
	DQ	FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	0000000000000000H
PyId_body DQ	0000000000000000H
	DQ	FLAT:??_C@_04IEJGKNJ@body?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04IEJGKNJ@body?$AA@
CONST	SEGMENT
??_C@_04IEJGKNJ@body?$AA@ DB 'body', 00H		; `string'
CONST	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0M@GMLKPBDC@ast_dealloc?$AA@		; `string'
PUBLIC	??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@ ; `string'
EXTRN	_PyParallel_Guard:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\python-ast.c
pdata	SEGMENT
$pdata$ast_dealloc DD imagerel ast_dealloc
	DD	imagerel ast_dealloc+135
	DD	imagerel $unwind$ast_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0M@GMLKPBDC@ast_dealloc?$AA@
CONST	SEGMENT
??_C@_0M@GMLKPBDC@ast_dealloc?$AA@ DB 'ast_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
CONST	SEGMENT
??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@ DB '..\Python\Python'
	DB	'-ast.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ast_dealloc
_TEXT	SEGMENT
_py_tmp$21753 = 48
self$ = 80
ast_dealloc PROC					; COMDAT

; 465  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@ast_deallo:

; 466  :     Py_CLEAR(self->dict);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 53		 je	 SHORT $LN1@ast_deallo
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00022	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00026	41 b8 d2 01 00
	00		 mov	 r8d, 466		; 000001d2H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GMLKPBDC@ast_dealloc?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN1@ast_deallo
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21753[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00056	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21753[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast_deallo:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN4@ast_deallo

; 467  :     Py_TYPE(self)->tp_free(self);

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00073	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00077	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0007c	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 468  : }

  00082	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00086	c3		 ret	 0
ast_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BLIHGBGO@ast_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\python-ast.c
pdata	SEGMENT
$pdata$ast_traverse DD imagerel ast_traverse
	DD	imagerel ast_traverse+116
	DD	imagerel $unwind$ast_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0N@BLIHGBGO@ast_traverse?$AA@
CONST	SEGMENT
??_C@_0N@BLIHGBGO@ast_traverse?$AA@ DB 'ast_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ast_traverse
_TEXT	SEGMENT
vret$21772 = 32
self$ = 64
visit$ = 72
arg$ = 80
ast_traverse PROC					; COMDAT

; 472  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@ast_traver:

; 473  :     Py_VISIT(self->dict);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@ast_traver
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 d9 01 00
	00		 mov	 r8d, 473		; 000001d9H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BLIHGBGO@ast_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@ast_traver:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN2@ast_traver
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21772[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21772[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@ast_traver
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21772[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@ast_traver
$LN1@ast_traver:
$LN2@ast_traver:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@ast_traver

; 474  :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@ast_traver:

; 475  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
ast_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_09JMLPFLAJ@ast_clear?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast_clear DD imagerel ast_clear
	DD	imagerel ast_clear+115
	DD	imagerel $unwind$ast_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_09JMLPFLAJ@ast_clear?$AA@
CONST	SEGMENT
??_C@_09JMLPFLAJ@ast_clear?$AA@ DB 'ast_clear', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ast_clear
_TEXT	SEGMENT
_py_tmp$21784 = 48
self$ = 80
ast_clear PROC						; COMDAT

; 479  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@ast_clear:

; 480  :     Py_CLEAR(self->dict);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 53		 je	 SHORT $LN1@ast_clear
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00022	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00026	41 b8 e0 01 00
	00		 mov	 r8d, 480		; 000001e0H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09JMLPFLAJ@ast_clear?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN1@ast_clear
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21784[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00056	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21784[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast_clear:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN4@ast_clear

; 481  : }

  0006e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00072	c3		 ret	 0
ast_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@BNALLACH@?$CF?4400s?5constructor?5takes?5?$CFs?$CFzd?5p@ ; `string'
PUBLIC	??_C@_0N@IJFENPKG@either?50?5or?5?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyDict_Next:PROC
EXTRN	PyObject_SetAttr:PROC
EXTRN	PySequence_GetItem:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PySequence_Size:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast_type_init DD imagerel ast_type_init
	DD	imagerel ast_type_init+604
	DD	imagerel $unwind$ast_type_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast_type_init DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_0DF@BNALLACH@?$CF?4400s?5constructor?5takes?5?$CFs?$CFzd?5p@
CONST	SEGMENT
??_C@_0DF@BNALLACH@?$CF?4400s?5constructor?5takes?5?$CFs?$CFzd?5p@ DB '%.'
	DB	'400s constructor takes %s%zd positional argument%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IJFENPKG@either?50?5or?5?$AA@
CONST	SEGMENT
??_C@_0N@IJFENPKG@either?50?5or?5?$AA@ DB 'either 0 or ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ast_type_init
_TEXT	SEGMENT
value$ = 48
res$ = 56
i$ = 64
key$ = 72
fields$ = 80
numfields$ = 88
name$21823 = 96
tv85 = 104
tv89 = 112
self$ = 144
args$ = 152
kw$ = 160
ast_type_init PROC					; COMDAT

; 485  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 486  :     _Py_IDENTIFIER(_fields);
; 487  :     Py_ssize_t i, numfields = 0;

  00016	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR numfields$[rsp], 0

; 488  :     int res = -1;

  0001f	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR res$[rsp], -1

; 489  :     PyObject *key, *value, *fields;
; 490  :     fields = _PyObject_GetAttrId((PyObject*)Py_TYPE(self), &PyId__fields);

  00027	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__fields@?1??ast_type_init@@9@9
  0002c	8b c0		 mov	 eax, eax
  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00034	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0003d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00041	48 8b d0	 mov	 rdx, rax
  00044	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0004c	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00050	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00055	48 89 44 24 50	 mov	 QWORD PTR fields$[rsp], rax

; 491  :     if (!fields)

  0005a	48 83 7c 24 50
	00		 cmp	 QWORD PTR fields$[rsp], 0
  00060	75 05		 jne	 SHORT $LN18@ast_type_i

; 492  :         PyErr_Clear();

  00062	e8 00 00 00 00	 call	 PyErr_Clear
$LN18@ast_type_i:

; 493  :     if (fields) {

  00067	48 83 7c 24 50
	00		 cmp	 QWORD PTR fields$[rsp], 0
  0006d	74 1c		 je	 SHORT $LN17@ast_type_i

; 494  :         numfields = PySequence_Size(fields);

  0006f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fields$[rsp]
  00074	e8 00 00 00 00	 call	 PySequence_Size
  00079	48 89 44 24 58	 mov	 QWORD PTR numfields$[rsp], rax

; 495  :         if (numfields == -1)

  0007e	48 83 7c 24 58
	ff		 cmp	 QWORD PTR numfields$[rsp], -1
  00084	75 05		 jne	 SHORT $LN16@ast_type_i

; 496  :             goto cleanup;

  00086	e9 ad 01 00 00	 jmp	 $cleanup$21810
$LN16@ast_type_i:
$LN17@ast_type_i:

; 497  :     }
; 498  :     res = 0; /* if no error occurs, this stays 0 to the end */

  0008b	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR res$[rsp], 0

; 499  :     if (PyTuple_GET_SIZE(args) > 0) {

  00093	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  0009b	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000a0	0f 8e 38 01 00
	00		 jle	 $LN15@ast_type_i

; 500  :         if (numfields != PyTuple_GET_SIZE(args)) {

  000a6	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  000ae	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000b2	48 39 44 24 58	 cmp	 QWORD PTR numfields$[rsp], rax
  000b7	0f 84 8d 00 00
	00		 je	 $LN14@ast_type_i

; 501  :             PyErr_Format(PyExc_TypeError, "%.400s constructor takes %s"
; 502  :                          "%zd positional argument%s",
; 503  :                          Py_TYPE(self)->tp_name,
; 504  :                          numfields == 0 ? "" : "either 0 or ",
; 505  :                          numfields, numfields == 1 ? "" : "s");

  000bd	48 83 7c 24 58
	01		 cmp	 QWORD PTR numfields$[rsp], 1
  000c3	75 0e		 jne	 SHORT $LN21@ast_type_i
  000c5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000cc	48 89 44 24 68	 mov	 QWORD PTR tv85[rsp], rax
  000d1	eb 0c		 jmp	 SHORT $LN22@ast_type_i
$LN21@ast_type_i:
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
  000da	48 89 44 24 68	 mov	 QWORD PTR tv85[rsp], rax
$LN22@ast_type_i:
  000df	48 83 7c 24 58
	00		 cmp	 QWORD PTR numfields$[rsp], 0
  000e5	75 0e		 jne	 SHORT $LN23@ast_type_i
  000e7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000ee	48 89 44 24 70	 mov	 QWORD PTR tv89[rsp], rax
  000f3	eb 0c		 jmp	 SHORT $LN24@ast_type_i
$LN23@ast_type_i:
  000f5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@IJFENPKG@either?50?5or?5?$AA@
  000fc	48 89 44 24 70	 mov	 QWORD PTR tv89[rsp], rax
$LN24@ast_type_i:
  00101	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00109	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv85[rsp]
  00112	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00117	48 8b 4c 24 58	 mov	 rcx, QWORD PTR numfields$[rsp]
  0011c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00121	4c 8b 4c 24 70	 mov	 r9, QWORD PTR tv89[rsp]
  00126	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0012a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@BNALLACH@?$CF?4400s?5constructor?5takes?5?$CFs?$CFzd?5p@
  00131	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00138	e8 00 00 00 00	 call	 PyErr_Format

; 506  :             res = -1;

  0013d	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR res$[rsp], -1

; 507  :             goto cleanup;

  00145	e9 ee 00 00 00	 jmp	 $cleanup$21810
$LN14@ast_type_i:

; 508  :         }
; 509  :         for (i = 0; i < PyTuple_GET_SIZE(args); i++) {

  0014a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00153	eb 0d		 jmp	 SHORT $LN13@ast_type_i
$LN12@ast_type_i:
  00155	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  0015a	48 ff c0	 inc	 rax
  0015d	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN13@ast_type_i:
  00162	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  0016a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0016e	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  00173	7d 69		 jge	 SHORT $LN11@ast_type_i

; 510  :             /* cannot be reached when fields is NULL */
; 511  :             PyObject *name = PySequence_GetItem(fields, i);

  00175	48 8b 54 24 40	 mov	 rdx, QWORD PTR i$[rsp]
  0017a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fields$[rsp]
  0017f	e8 00 00 00 00	 call	 PySequence_GetItem
  00184	48 89 44 24 60	 mov	 QWORD PTR name$21823[rsp], rax

; 512  :             if (!name) {

  00189	48 83 7c 24 60
	00		 cmp	 QWORD PTR name$21823[rsp], 0
  0018f	75 0d		 jne	 SHORT $LN10@ast_type_i

; 513  :                 res = -1;

  00191	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR res$[rsp], -1

; 514  :                 goto cleanup;

  00199	e9 9a 00 00 00	 jmp	 $cleanup$21810
$LN10@ast_type_i:

; 515  :             }
; 516  :             res = PyObject_SetAttr(self, name, PyTuple_GET_ITEM(args, i));

  0019e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  001a6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  001ab	4c 8b 44 c8 70	 mov	 r8, QWORD PTR [rax+rcx*8+112]
  001b0	48 8b 54 24 60	 mov	 rdx, QWORD PTR name$21823[rsp]
  001b5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001bd	e8 00 00 00 00	 call	 PyObject_SetAttr
  001c2	89 44 24 38	 mov	 DWORD PTR res$[rsp], eax

; 517  :             Py_DECREF(name);

  001c6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR name$21823[rsp]
  001cb	e8 00 00 00 00	 call	 _Py_DecRef

; 518  :             if (res < 0)

  001d0	83 7c 24 38 00	 cmp	 DWORD PTR res$[rsp], 0
  001d5	7d 02		 jge	 SHORT $LN9@ast_type_i

; 519  :                 goto cleanup;

  001d7	eb 5f		 jmp	 SHORT $cleanup$21810
$LN9@ast_type_i:

; 520  :         }

  001d9	e9 77 ff ff ff	 jmp	 $LN12@ast_type_i
$LN11@ast_type_i:
$LN15@ast_type_i:

; 521  :     }
; 522  :     if (kw) {

  001de	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR kw$[rsp], 0
  001e7	74 4f		 je	 SHORT $LN8@ast_type_i

; 523  :         i = 0;  /* needed by PyDict_Next */

  001e9	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
$LN7@ast_type_i:

; 524  :         while (PyDict_Next(kw, &i, &key, &value)) {

  001f2	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value$[rsp]
  001f7	4c 8d 44 24 48	 lea	 r8, QWORD PTR key$[rsp]
  001fc	48 8d 54 24 40	 lea	 rdx, QWORD PTR i$[rsp]
  00201	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR kw$[rsp]
  00209	e8 00 00 00 00	 call	 PyDict_Next
  0020e	85 c0		 test	 eax, eax
  00210	74 26		 je	 SHORT $LN6@ast_type_i

; 525  :             res = PyObject_SetAttr(self, key, value);

  00212	4c 8b 44 24 30	 mov	 r8, QWORD PTR value$[rsp]
  00217	48 8b 54 24 48	 mov	 rdx, QWORD PTR key$[rsp]
  0021c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00224	e8 00 00 00 00	 call	 PyObject_SetAttr
  00229	89 44 24 38	 mov	 DWORD PTR res$[rsp], eax

; 526  :             if (res < 0)

  0022d	83 7c 24 38 00	 cmp	 DWORD PTR res$[rsp], 0
  00232	7d 02		 jge	 SHORT $LN5@ast_type_i

; 527  :                 goto cleanup;

  00234	eb 02		 jmp	 SHORT $cleanup$21810
$LN5@ast_type_i:

; 528  :         }

  00236	eb ba		 jmp	 SHORT $LN7@ast_type_i
$LN6@ast_type_i:
$LN8@ast_type_i:
$cleanup$21810:
$LN4@ast_type_i:

; 529  :     }
; 530  :   cleanup:
; 531  :     Py_XDECREF(fields);

  00238	48 83 7c 24 50
	00		 cmp	 QWORD PTR fields$[rsp], 0
  0023e	74 0a		 je	 SHORT $LN1@ast_type_i
  00240	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fields$[rsp]
  00245	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast_type_i:
  0024a	33 c0		 xor	 eax, eax
  0024c	85 c0		 test	 eax, eax
  0024e	75 e8		 jne	 SHORT $LN4@ast_type_i

; 532  :     return res;

  00250	8b 44 24 38	 mov	 eax, DWORD PTR res$[rsp]

; 533  : }

  00254	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0025b	c3		 ret	 0
ast_type_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_03GPNEOADL@O?$CI?$CJ?$AA@			; `string'
PUBLIC	??_C@_04MGIFGOAO@O?$CI?$CJO?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_AttributeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast_type_reduce DD imagerel ast_type_reduce
	DD	imagerel ast_type_reduce+175
	DD	imagerel $unwind$ast_type_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast_type_reduce DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_03GPNEOADL@O?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_03GPNEOADL@O?$CI?$CJ?$AA@ DB 'O()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MGIFGOAO@O?$CI?$CJO?$AA@
CONST	SEGMENT
??_C@_04MGIFGOAO@O?$CI?$CJO?$AA@ DB 'O()O', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ast_type_reduce
_TEXT	SEGMENT
res$ = 32
dict$ = 40
self$ = 64
unused$ = 72
ast_type_reduce PROC					; COMDAT

; 538  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 539  :     PyObject *res;
; 540  :     _Py_IDENTIFIER(__dict__);
; 541  :     PyObject *dict = _PyObject_GetAttrId(self, &PyId___dict__);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___dict__@?1??ast_type_reduce@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	48 8b d0	 mov	 rdx, rax
  0002b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00030	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00035	48 89 44 24 28	 mov	 QWORD PTR dict$[rsp], rax

; 542  :     if (dict == NULL) {

  0003a	48 83 7c 24 28
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00040	75 1b		 jne	 SHORT $LN4@ast_type_r

; 543  :         if (PyErr_ExceptionMatches(PyExc_AttributeError))

  00042	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00049	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0004e	85 c0		 test	 eax, eax
  00050	74 07		 je	 SHORT $LN3@ast_type_r

; 544  :             PyErr_Clear();

  00052	e8 00 00 00 00	 call	 PyErr_Clear

; 545  :         else

  00057	eb 04		 jmp	 SHORT $LN2@ast_type_r
$LN3@ast_type_r:

; 546  :             return NULL;

  00059	33 c0		 xor	 eax, eax
  0005b	eb 4d		 jmp	 SHORT $LN5@ast_type_r
$LN2@ast_type_r:
$LN4@ast_type_r:

; 547  :     }
; 548  :     if (dict) {

  0005d	48 83 7c 24 28
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00063	74 30		 je	 SHORT $LN1@ast_type_r

; 549  :         res = Py_BuildValue("O()O", Py_TYPE(self), dict);

  00065	4c 8b 44 24 28	 mov	 r8, QWORD PTR dict$[rsp]
  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0006f	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04MGIFGOAO@O?$CI?$CJO?$AA@
  0007a	e8 00 00 00 00	 call	 Py_BuildValue
  0007f	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 550  :         Py_DECREF(dict);

  00084	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  00089	e8 00 00 00 00	 call	 _Py_DecRef

; 551  :         return res;

  0008e	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00093	eb 15		 jmp	 SHORT $LN5@ast_type_r
$LN1@ast_type_r:

; 552  :     }
; 553  :     return Py_BuildValue("O()", Py_TYPE(self));

  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0009a	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03GPNEOADL@O?$CI?$CJ?$AA@
  000a5	e8 00 00 00 00	 call	 Py_BuildValue
$LN5@ast_type_r:

; 554  : }

  000aa	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ae	c3		 ret	 0
ast_type_reduce ENDP
_TEXT	ENDS
PUBLIC	_Py_Module
EXTRN	PyArena_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Module DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$_Py_Module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Module DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Module
_TEXT	SEGMENT
p$ = 32
body$ = 64
arena$ = 72
_Py_Module PROC						; COMDAT

; 1085 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1086 :     mod_ty p;
; 1087 :     p = (mod_ty)PyArena_Malloc(arena, sizeof(*p));

  0000e	ba 10 00 00 00	 mov	 edx, 16
  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arena$[rsp]
  00018	e8 00 00 00 00	 call	 PyArena_Malloc
  0001d	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1088 :     if (!p)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00028	75 04		 jne	 SHORT $LN1@Py_Module

; 1089 :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 1e		 jmp	 SHORT $LN2@Py_Module
$LN1@Py_Module:

; 1090 :     p->kind = Module_kind;

  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00033	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 1091 :     p->v.Module.body = body;

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR body$[rsp]
  00043	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1092 :     return p;

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Module:

; 1093 : }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
_Py_Module ENDP
_TEXT	ENDS
PUBLIC	_Py_Interactive
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Interactive DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$_Py_Interactive
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Interactive DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Interactive
_TEXT	SEGMENT
p$ = 32
body$ = 64
arena$ = 72
_Py_Interactive PROC					; COMDAT

; 1097 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1098 :     mod_ty p;
; 1099 :     p = (mod_ty)PyArena_Malloc(arena, sizeof(*p));

  0000e	ba 10 00 00 00	 mov	 edx, 16
  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arena$[rsp]
  00018	e8 00 00 00 00	 call	 PyArena_Malloc
  0001d	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1100 :     if (!p)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00028	75 04		 jne	 SHORT $LN1@Py_Interac

; 1101 :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 1e		 jmp	 SHORT $LN2@Py_Interac
$LN1@Py_Interac:

; 1102 :     p->kind = Interactive_kind;

  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00033	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 1103 :     p->v.Interactive.body = body;

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR body$[rsp]
  00043	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1104 :     return p;

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Interac:

; 1105 : }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
_Py_Interactive ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@FKJOGGI@field?5body?5is?5required?5for?5Expre@ ; `string'
PUBLIC	_Py_Expression
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Expression DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$_Py_Expression
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Expression DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CG@FKJOGGI@field?5body?5is?5required?5for?5Expre@
CONST	SEGMENT
??_C@_0CG@FKJOGGI@field?5body?5is?5required?5for?5Expre@ DB 'field body i'
	DB	's required for Expression', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Expression
_TEXT	SEGMENT
p$ = 32
body$ = 64
arena$ = 72
_Py_Expression PROC					; COMDAT

; 1109 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1110 :     mod_ty p;
; 1111 :     if (!body) {

  0000e	48 83 7c 24 40
	00		 cmp	 QWORD PTR body$[rsp], 0
  00014	75 17		 jne	 SHORT $LN2@Py_Express

; 1112 :         PyErr_SetString(PyExc_ValueError,
; 1113 :                         "field body is required for Expression");

  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@FKJOGGI@field?5body?5is?5required?5for?5Expre@
  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00024	e8 00 00 00 00	 call	 PyErr_SetString

; 1114 :         return NULL;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 3e		 jmp	 SHORT $LN3@Py_Express
$LN2@Py_Express:

; 1115 :     }
; 1116 :     p = (mod_ty)PyArena_Malloc(arena, sizeof(*p));

  0002d	ba 10 00 00 00	 mov	 edx, 16
  00032	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arena$[rsp]
  00037	e8 00 00 00 00	 call	 PyArena_Malloc
  0003c	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1117 :     if (!p)

  00041	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00047	75 04		 jne	 SHORT $LN1@Py_Express

; 1118 :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 1e		 jmp	 SHORT $LN3@Py_Express
$LN1@Py_Express:

; 1119 :     p->kind = Expression_kind;

  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00052	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 1120 :     p->v.Expression.body = body;

  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR body$[rsp]
  00062	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1121 :     return p;

  00066	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Express:

; 1122 : }

  0006b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006f	c3		 ret	 0
_Py_Expression ENDP
_TEXT	ENDS
PUBLIC	_Py_Suite
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Suite DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$_Py_Suite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Suite DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Suite
_TEXT	SEGMENT
p$ = 32
body$ = 64
arena$ = 72
_Py_Suite PROC						; COMDAT

; 1126 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1127 :     mod_ty p;
; 1128 :     p = (mod_ty)PyArena_Malloc(arena, sizeof(*p));

  0000e	ba 10 00 00 00	 mov	 edx, 16
  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arena$[rsp]
  00018	e8 00 00 00 00	 call	 PyArena_Malloc
  0001d	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1129 :     if (!p)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00028	75 04		 jne	 SHORT $LN1@Py_Suite

; 1130 :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 1e		 jmp	 SHORT $LN2@Py_Suite
$LN1@Py_Suite:

; 1131 :     p->kind = Suite_kind;

  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00033	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 1132 :     p->v.Suite.body = body;

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR body$[rsp]
  00043	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1133 :     return p;

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Suite:

; 1134 : }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
_Py_Suite ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@PGGFMKGC@field?5args?5is?5required?5for?5Funct@ ; `string'
PUBLIC	??_C@_0CH@FNEFDOCM@field?5name?5is?5required?5for?5Funct@ ; `string'
PUBLIC	_Py_FunctionDef
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_FunctionDef DD imagerel $LN6
	DD	imagerel $LN6+239
	DD	imagerel $unwind$_Py_FunctionDef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_FunctionDef DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CH@PGGFMKGC@field?5args?5is?5required?5for?5Funct@
CONST	SEGMENT
??_C@_0CH@PGGFMKGC@field?5args?5is?5required?5for?5Funct@ DB 'field args '
	DB	'is required for FunctionDef', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FNEFDOCM@field?5name?5is?5required?5for?5Funct@
CONST	SEGMENT
??_C@_0CH@FNEFDOCM@field?5name?5is?5required?5for?5Funct@ DB 'field name '
	DB	'is required for FunctionDef', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_FunctionDef
_TEXT	SEGMENT
p$ = 32
name$ = 64
args$ = 72
body$ = 80
decorator_list$ = 88
returns$ = 96
lineno$ = 104
col_offset$ = 112
arena$ = 120
_Py_FunctionDef PROC					; COMDAT

; 1140 : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1141 :     stmt_ty p;
; 1142 :     if (!name) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR name$[rsp], 0
  0001e	75 1a		 jne	 SHORT $LN3@Py_Functio

; 1143 :         PyErr_SetString(PyExc_ValueError,
; 1144 :                         "field name is required for FunctionDef");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@FNEFDOCM@field?5name?5is?5required?5for?5Funct@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1145 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 b0 00 00 00	 jmp	 $LN4@Py_Functio
$LN3@Py_Functio:

; 1146 :     }
; 1147 :     if (!args) {

  0003a	48 83 7c 24 48
	00		 cmp	 QWORD PTR args$[rsp], 0
  00040	75 1a		 jne	 SHORT $LN2@Py_Functio

; 1148 :         PyErr_SetString(PyExc_ValueError,
; 1149 :                         "field args is required for FunctionDef");

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@PGGFMKGC@field?5args?5is?5required?5for?5Funct@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00050	e8 00 00 00 00	 call	 PyErr_SetString

; 1150 :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	e9 8e 00 00 00	 jmp	 $LN4@Py_Functio
$LN2@Py_Functio:

; 1151 :     }
; 1152 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  0005c	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00061	48 8b 4c 24 78	 mov	 rcx, QWORD PTR arena$[rsp]
  00066	e8 00 00 00 00	 call	 PyArena_Malloc
  0006b	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1153 :     if (!p)

  00070	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00076	75 04		 jne	 SHORT $LN1@Py_Functio

; 1154 :         return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	eb 6e		 jmp	 SHORT $LN4@Py_Functio
$LN1@Py_Functio:

; 1155 :     p->kind = FunctionDef_kind;

  0007c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00081	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 1156 :     p->v.FunctionDef.name = name;

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00091	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1157 :     p->v.FunctionDef.args = args;

  00095	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0009f	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1158 :     p->v.FunctionDef.body = body;

  000a3	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR body$[rsp]
  000ad	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1159 :     p->v.FunctionDef.decorator_list = decorator_list;

  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR decorator_list$[rsp]
  000bb	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 1160 :     p->v.FunctionDef.returns = returns;

  000bf	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000c4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR returns$[rsp]
  000c9	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 1161 :     p->lineno = lineno;

  000cd	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000d2	8b 4c 24 68	 mov	 ecx, DWORD PTR lineno$[rsp]
  000d6	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1162 :     p->col_offset = col_offset;

  000d9	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000de	8b 4c 24 70	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000e2	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1163 :     return p;

  000e5	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN4@Py_Functio:

; 1164 : }

  000ea	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ee	c3		 ret	 0
_Py_FunctionDef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@ELEMAPIN@field?5name?5is?5required?5for?5Class@ ; `string'
PUBLIC	_Py_ClassDef
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ClassDef DD imagerel $LN5
	DD	imagerel $LN5+242
	DD	imagerel $unwind$_Py_ClassDef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ClassDef DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CE@ELEMAPIN@field?5name?5is?5required?5for?5Class@
CONST	SEGMENT
??_C@_0CE@ELEMAPIN@field?5name?5is?5required?5for?5Class@ DB 'field name '
	DB	'is required for ClassDef', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_ClassDef
_TEXT	SEGMENT
p$ = 32
name$ = 64
bases$ = 72
keywords$ = 80
starargs$ = 88
kwargs$ = 96
body$ = 104
decorator_list$ = 112
lineno$ = 120
col_offset$ = 128
arena$ = 136
_Py_ClassDef PROC					; COMDAT

; 1170 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1171 :     stmt_ty p;
; 1172 :     if (!name) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR name$[rsp], 0
  0001e	75 1a		 jne	 SHORT $LN2@Py_ClassDe

; 1173 :         PyErr_SetString(PyExc_ValueError,
; 1174 :                         "field name is required for ClassDef");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@ELEMAPIN@field?5name?5is?5required?5for?5Class@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1175 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 b3 00 00 00	 jmp	 $LN3@Py_ClassDe
$LN2@Py_ClassDe:

; 1176 :     }
; 1177 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  0003a	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0003f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR arena$[rsp]
  00047	e8 00 00 00 00	 call	 PyArena_Malloc
  0004c	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1178 :     if (!p)

  00051	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00057	75 07		 jne	 SHORT $LN1@Py_ClassDe

; 1179 :         return NULL;

  00059	33 c0		 xor	 eax, eax
  0005b	e9 8d 00 00 00	 jmp	 $LN3@Py_ClassDe
$LN1@Py_ClassDe:

; 1180 :     p->kind = ClassDef_kind;

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00065	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 1181 :     p->v.ClassDef.name = name;

  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00070	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00075	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1182 :     p->v.ClassDef.bases = bases;

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR bases$[rsp]
  00083	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1183 :     p->v.ClassDef.keywords = keywords;

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keywords$[rsp]
  00091	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1184 :     p->v.ClassDef.starargs = starargs;

  00095	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR starargs$[rsp]
  0009f	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 1185 :     p->v.ClassDef.kwargs = kwargs;

  000a3	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR kwargs$[rsp]
  000ad	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 1186 :     p->v.ClassDef.body = body;

  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR body$[rsp]
  000bb	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 1187 :     p->v.ClassDef.decorator_list = decorator_list;

  000bf	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000c4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR decorator_list$[rsp]
  000c9	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 1188 :     p->lineno = lineno;

  000cd	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000d2	8b 4c 24 78	 mov	 ecx, DWORD PTR lineno$[rsp]
  000d6	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1189 :     p->col_offset = col_offset;

  000d9	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000de	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR col_offset$[rsp]
  000e5	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1190 :     return p;

  000e8	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_ClassDe:

; 1191 : }

  000ed	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f1	c3		 ret	 0
_Py_ClassDef ENDP
_TEXT	ENDS
PUBLIC	_Py_Return
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Return DD imagerel $LN4
	DD	imagerel $LN4+114
	DD	imagerel $unwind$_Py_Return
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Return DD 011701H
	DD	06217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Return
_TEXT	SEGMENT
p$ = 32
value$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Return PROC						; COMDAT

; 1195 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1196 :     stmt_ty p;
; 1197 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0001c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00021	e8 00 00 00 00	 call	 PyArena_Malloc
  00026	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1198 :     if (!p)

  0002b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00031	75 04		 jne	 SHORT $LN1@Py_Return

; 1199 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 36		 jmp	 SHORT $LN2@Py_Return
$LN1@Py_Return:

; 1200 :     p->kind = Return_kind;

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003c	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 1201 :     p->v.Return.value = value;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  0004c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1202 :     p->lineno = lineno;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00055	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00059	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1203 :     p->col_offset = col_offset;

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00061	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00065	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1204 :     return p;

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Return:

; 1205 : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
_Py_Return ENDP
_TEXT	ENDS
PUBLIC	_Py_Delete
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Delete DD imagerel $LN4
	DD	imagerel $LN4+114
	DD	imagerel $unwind$_Py_Delete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Delete DD 011701H
	DD	06217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Delete
_TEXT	SEGMENT
p$ = 32
targets$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Delete PROC						; COMDAT

; 1209 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1210 :     stmt_ty p;
; 1211 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0001c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00021	e8 00 00 00 00	 call	 PyArena_Malloc
  00026	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1212 :     if (!p)

  0002b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00031	75 04		 jne	 SHORT $LN1@Py_Delete

; 1213 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 36		 jmp	 SHORT $LN2@Py_Delete
$LN1@Py_Delete:

; 1214 :     p->kind = Delete_kind;

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003c	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 1215 :     p->v.Delete.targets = targets;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR targets$[rsp]
  0004c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1216 :     p->lineno = lineno;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00055	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00059	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1217 :     p->col_offset = col_offset;

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00061	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00065	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1218 :     return p;

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Delete:

; 1219 : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
_Py_Delete ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@PODDGPLK@field?5value?5is?5required?5for?5Assi@ ; `string'
PUBLIC	_Py_Assign
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Assign DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_Py_Assign
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Assign DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CD@PODDGPLK@field?5value?5is?5required?5for?5Assi@
CONST	SEGMENT
??_C@_0CD@PODDGPLK@field?5value?5is?5required?5for?5Assi@ DB 'field value'
	DB	' is required for Assign', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Assign
_TEXT	SEGMENT
p$ = 32
targets$ = 64
value$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_Assign PROC						; COMDAT

; 1224 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1225 :     stmt_ty p;
; 1226 :     if (!value) {

  00018	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  0001e	75 17		 jne	 SHORT $LN2@Py_Assign

; 1227 :         PyErr_SetString(PyExc_ValueError,
; 1228 :                         "field value is required for Assign");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@PODDGPLK@field?5value?5is?5required?5for?5Assi@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1229 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 64		 jmp	 SHORT $LN3@Py_Assign
$LN2@Py_Assign:

; 1230 :     }
; 1231 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00037	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0003c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	e8 00 00 00 00	 call	 PyArena_Malloc
  00046	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1232 :     if (!p)

  0004b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00051	75 04		 jne	 SHORT $LN1@Py_Assign

; 1233 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 44		 jmp	 SHORT $LN3@Py_Assign
$LN1@Py_Assign:

; 1234 :     p->kind = Assign_kind;

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005c	c7 00 05 00 00
	00		 mov	 DWORD PTR [rax], 5

; 1235 :     p->v.Assign.targets = targets;

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR targets$[rsp]
  0006c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1236 :     p->v.Assign.value = value;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0007a	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1237 :     p->lineno = lineno;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00083	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  00087	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1238 :     p->col_offset = col_offset;

  0008a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008f	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00093	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1239 :     return p;

  00096	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Assign:

; 1240 : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
_Py_Assign ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@BCDKGMFN@field?5value?5is?5required?5for?5AugA@ ; `string'
PUBLIC	??_C@_0CD@HEMJKCOB@field?5op?5is?5required?5for?5AugAssi@ ; `string'
PUBLIC	??_C@_0CH@IMOJNEGG@field?5target?5is?5required?5for?5Aug@ ; `string'
PUBLIC	_Py_AugAssign
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_AugAssign DD imagerel $LN7
	DD	imagerel $LN7+238
	DD	imagerel $unwind$_Py_AugAssign
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_AugAssign DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0CG@BCDKGMFN@field?5value?5is?5required?5for?5AugA@
CONST	SEGMENT
??_C@_0CG@BCDKGMFN@field?5value?5is?5required?5for?5AugA@ DB 'field value'
	DB	' is required for AugAssign', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HEMJKCOB@field?5op?5is?5required?5for?5AugAssi@
CONST	SEGMENT
??_C@_0CD@HEMJKCOB@field?5op?5is?5required?5for?5AugAssi@ DB 'field op is'
	DB	' required for AugAssign', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IMOJNEGG@field?5target?5is?5required?5for?5Aug@
CONST	SEGMENT
??_C@_0CH@IMOJNEGG@field?5target?5is?5required?5for?5Aug@ DB 'field targe'
	DB	't is required for AugAssign', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_AugAssign
_TEXT	SEGMENT
p$ = 32
target$ = 64
op$ = 72
value$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_AugAssign PROC					; COMDAT

; 1245 : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1246 :     stmt_ty p;
; 1247 :     if (!target) {

  00017	48 83 7c 24 40
	00		 cmp	 QWORD PTR target$[rsp], 0
  0001d	75 1a		 jne	 SHORT $LN4@Py_AugAssi

; 1248 :         PyErr_SetString(PyExc_ValueError,
; 1249 :                         "field target is required for AugAssign");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@IMOJNEGG@field?5target?5is?5required?5for?5Aug@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 1250 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	e9 b0 00 00 00	 jmp	 $LN5@Py_AugAssi
$LN4@Py_AugAssi:

; 1251 :     }
; 1252 :     if (!op) {

  00039	83 7c 24 48 00	 cmp	 DWORD PTR op$[rsp], 0
  0003e	75 1a		 jne	 SHORT $LN3@Py_AugAssi

; 1253 :         PyErr_SetString(PyExc_ValueError,
; 1254 :                         "field op is required for AugAssign");

  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HEMJKCOB@field?5op?5is?5required?5for?5AugAssi@
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004e	e8 00 00 00 00	 call	 PyErr_SetString

; 1255 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	e9 8f 00 00 00	 jmp	 $LN5@Py_AugAssi
$LN3@Py_AugAssi:

; 1256 :     }
; 1257 :     if (!value) {

  0005a	48 83 7c 24 50
	00		 cmp	 QWORD PTR value$[rsp], 0
  00060	75 17		 jne	 SHORT $LN2@Py_AugAssi

; 1258 :         PyErr_SetString(PyExc_ValueError,
; 1259 :                         "field value is required for AugAssign");

  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BCDKGMFN@field?5value?5is?5required?5for?5AugA@
  00069	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00070	e8 00 00 00 00	 call	 PyErr_SetString

; 1260 :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	eb 70		 jmp	 SHORT $LN5@Py_AugAssi
$LN2@Py_AugAssi:

; 1261 :     }
; 1262 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00079	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0007e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00083	e8 00 00 00 00	 call	 PyArena_Malloc
  00088	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1263 :     if (!p)

  0008d	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00093	75 04		 jne	 SHORT $LN1@Py_AugAssi

; 1264 :         return NULL;

  00095	33 c0		 xor	 eax, eax
  00097	eb 50		 jmp	 SHORT $LN5@Py_AugAssi
$LN1@Py_AugAssi:

; 1265 :     p->kind = AugAssign_kind;

  00099	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009e	c7 00 06 00 00
	00		 mov	 DWORD PTR [rax], 6

; 1266 :     p->v.AugAssign.target = target;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR target$[rsp]
  000ae	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1267 :     p->v.AugAssign.op = op;

  000b2	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b7	8b 4c 24 48	 mov	 ecx, DWORD PTR op$[rsp]
  000bb	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 1268 :     p->v.AugAssign.value = value;

  000be	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000c3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR value$[rsp]
  000c8	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1269 :     p->lineno = lineno;

  000cc	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000d1	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  000d5	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1270 :     p->col_offset = col_offset;

  000d8	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000dd	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000e1	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1271 :     return p;

  000e4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN5@Py_AugAssi:

; 1272 : }

  000e9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ed	c3		 ret	 0
_Py_AugAssign ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@LGGBEOKE@field?5iter?5is?5required?5for?5For?$AA@ ; `string'
PUBLIC	??_C@_0CB@EFAGNOAJ@field?5target?5is?5required?5for?5For@ ; `string'
PUBLIC	_Py_For
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_For DD imagerel $LN6
	DD	imagerel $LN6+225
	DD	imagerel $unwind$_Py_For
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_For DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0BP@LGGBEOKE@field?5iter?5is?5required?5for?5For?$AA@
CONST	SEGMENT
??_C@_0BP@LGGBEOKE@field?5iter?5is?5required?5for?5For?$AA@ DB 'field ite'
	DB	'r is required for For', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EFAGNOAJ@field?5target?5is?5required?5for?5For@
CONST	SEGMENT
??_C@_0CB@EFAGNOAJ@field?5target?5is?5required?5for?5For@ DB 'field targe'
	DB	't is required for For', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_For
_TEXT	SEGMENT
p$ = 32
target$ = 64
iter$ = 72
body$ = 80
orelse$ = 88
lineno$ = 96
col_offset$ = 104
arena$ = 112
_Py_For	PROC						; COMDAT

; 1277 : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1278 :     stmt_ty p;
; 1279 :     if (!target) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR target$[rsp], 0
  0001e	75 1a		 jne	 SHORT $LN3@Py_For

; 1280 :         PyErr_SetString(PyExc_ValueError,
; 1281 :                         "field target is required for For");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@EFAGNOAJ@field?5target?5is?5required?5for?5For@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1282 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 a2 00 00 00	 jmp	 $LN4@Py_For
$LN3@Py_For:

; 1283 :     }
; 1284 :     if (!iter) {

  0003a	48 83 7c 24 48
	00		 cmp	 QWORD PTR iter$[rsp], 0
  00040	75 1a		 jne	 SHORT $LN2@Py_For

; 1285 :         PyErr_SetString(PyExc_ValueError,
; 1286 :                         "field iter is required for For");

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@LGGBEOKE@field?5iter?5is?5required?5for?5For?$AA@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00050	e8 00 00 00 00	 call	 PyErr_SetString

; 1287 :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	e9 80 00 00 00	 jmp	 $LN4@Py_For
$LN2@Py_For:

; 1288 :     }
; 1289 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  0005c	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00061	48 8b 4c 24 70	 mov	 rcx, QWORD PTR arena$[rsp]
  00066	e8 00 00 00 00	 call	 PyArena_Malloc
  0006b	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1290 :     if (!p)

  00070	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00076	75 04		 jne	 SHORT $LN1@Py_For

; 1291 :         return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	eb 60		 jmp	 SHORT $LN4@Py_For
$LN1@Py_For:

; 1292 :     p->kind = For_kind;

  0007c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00081	c7 00 07 00 00
	00		 mov	 DWORD PTR [rax], 7

; 1293 :     p->v.For.target = target;

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR target$[rsp]
  00091	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1294 :     p->v.For.iter = iter;

  00095	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR iter$[rsp]
  0009f	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1295 :     p->v.For.body = body;

  000a3	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR body$[rsp]
  000ad	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1296 :     p->v.For.orelse = orelse;

  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR orelse$[rsp]
  000bb	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 1297 :     p->lineno = lineno;

  000bf	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000c4	8b 4c 24 60	 mov	 ecx, DWORD PTR lineno$[rsp]
  000c8	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1298 :     p->col_offset = col_offset;

  000cb	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000d0	8b 4c 24 68	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000d4	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1299 :     return p;

  000d7	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN4@Py_For:

; 1300 : }

  000dc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e0	c3		 ret	 0
_Py_For	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@KCHPDKKB@field?5test?5is?5required?5for?5While@ ; `string'
PUBLIC	_Py_While
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_While DD imagerel $LN5
	DD	imagerel $LN5+174
	DD	imagerel $unwind$_Py_While
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_While DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CB@KCHPDKKB@field?5test?5is?5required?5for?5While@
CONST	SEGMENT
??_C@_0CB@KCHPDKKB@field?5test?5is?5required?5for?5While@ DB 'field test '
	DB	'is required for While', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_While
_TEXT	SEGMENT
p$ = 32
test$ = 64
body$ = 72
orelse$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_While PROC						; COMDAT

; 1305 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1306 :     stmt_ty p;
; 1307 :     if (!test) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR test$[rsp], 0
  0001e	75 17		 jne	 SHORT $LN2@Py_While

; 1308 :         PyErr_SetString(PyExc_ValueError,
; 1309 :                         "field test is required for While");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@KCHPDKKB@field?5test?5is?5required?5for?5While@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1310 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 72		 jmp	 SHORT $LN3@Py_While
$LN2@Py_While:

; 1311 :     }
; 1312 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00037	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0003c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	e8 00 00 00 00	 call	 PyArena_Malloc
  00046	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1313 :     if (!p)

  0004b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00051	75 04		 jne	 SHORT $LN1@Py_While

; 1314 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 52		 jmp	 SHORT $LN3@Py_While
$LN1@Py_While:

; 1315 :     p->kind = While_kind;

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005c	c7 00 08 00 00
	00		 mov	 DWORD PTR [rax], 8

; 1316 :     p->v.While.test = test;

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR test$[rsp]
  0006c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1317 :     p->v.While.body = body;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR body$[rsp]
  0007a	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1318 :     p->v.While.orelse = orelse;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR orelse$[rsp]
  00088	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1319 :     p->lineno = lineno;

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00091	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  00095	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1320 :     p->col_offset = col_offset;

  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009d	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000a1	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1321 :     return p;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_While:

; 1322 : }

  000a9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ad	c3		 ret	 0
_Py_While ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@JBIJLEDP@field?5test?5is?5required?5for?5If?$AA@ ; `string'
PUBLIC	_Py_If
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_If DD imagerel $LN5
	DD	imagerel $LN5+174
	DD	imagerel $unwind$_Py_If
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_If DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0BO@JBIJLEDP@field?5test?5is?5required?5for?5If?$AA@
CONST	SEGMENT
??_C@_0BO@JBIJLEDP@field?5test?5is?5required?5for?5If?$AA@ DB 'field test'
	DB	' is required for If', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_If
_TEXT	SEGMENT
p$ = 32
test$ = 64
body$ = 72
orelse$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_If	PROC						; COMDAT

; 1327 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1328 :     stmt_ty p;
; 1329 :     if (!test) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR test$[rsp], 0
  0001e	75 17		 jne	 SHORT $LN2@Py_If

; 1330 :         PyErr_SetString(PyExc_ValueError,
; 1331 :                         "field test is required for If");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@JBIJLEDP@field?5test?5is?5required?5for?5If?$AA@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1332 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 72		 jmp	 SHORT $LN3@Py_If
$LN2@Py_If:

; 1333 :     }
; 1334 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00037	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0003c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	e8 00 00 00 00	 call	 PyArena_Malloc
  00046	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1335 :     if (!p)

  0004b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00051	75 04		 jne	 SHORT $LN1@Py_If

; 1336 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 52		 jmp	 SHORT $LN3@Py_If
$LN1@Py_If:

; 1337 :     p->kind = If_kind;

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005c	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 1338 :     p->v.If.test = test;

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR test$[rsp]
  0006c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1339 :     p->v.If.body = body;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR body$[rsp]
  0007a	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1340 :     p->v.If.orelse = orelse;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR orelse$[rsp]
  00088	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1341 :     p->lineno = lineno;

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00091	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  00095	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1342 :     p->col_offset = col_offset;

  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009d	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000a1	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1343 :     return p;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_If:

; 1344 : }

  000a9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ad	c3		 ret	 0
_Py_If	ENDP
_TEXT	ENDS
PUBLIC	_Py_With
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_With DD imagerel $LN4
	DD	imagerel $LN4+129
	DD	imagerel $unwind$_Py_With
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_With DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_With
_TEXT	SEGMENT
p$ = 32
items$ = 64
body$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_With PROC						; COMDAT

; 1349 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1350 :     stmt_ty p;
; 1351 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00018	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0001d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00022	e8 00 00 00 00	 call	 PyArena_Malloc
  00027	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1352 :     if (!p)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00032	75 04		 jne	 SHORT $LN1@Py_With

; 1353 :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	eb 44		 jmp	 SHORT $LN2@Py_With
$LN1@Py_With:

; 1354 :     p->kind = With_kind;

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003d	c7 00 0a 00 00
	00		 mov	 DWORD PTR [rax], 10

; 1355 :     p->v.With.items = items;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR items$[rsp]
  0004d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1356 :     p->v.With.body = body;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00056	48 8b 4c 24 48	 mov	 rcx, QWORD PTR body$[rsp]
  0005b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1357 :     p->lineno = lineno;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00064	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  00068	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1358 :     p->col_offset = col_offset;

  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00070	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00074	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1359 :     return p;

  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_With:

; 1360 : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
_Py_With ENDP
_TEXT	ENDS
PUBLIC	_Py_Raise
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Raise DD imagerel $LN4
	DD	imagerel $LN4+129
	DD	imagerel $unwind$_Py_Raise
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Raise DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Raise
_TEXT	SEGMENT
p$ = 32
exc$ = 64
cause$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_Raise PROC						; COMDAT

; 1364 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1365 :     stmt_ty p;
; 1366 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00018	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0001d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00022	e8 00 00 00 00	 call	 PyArena_Malloc
  00027	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1367 :     if (!p)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00032	75 04		 jne	 SHORT $LN1@Py_Raise

; 1368 :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	eb 44		 jmp	 SHORT $LN2@Py_Raise
$LN1@Py_Raise:

; 1369 :     p->kind = Raise_kind;

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003d	c7 00 0b 00 00
	00		 mov	 DWORD PTR [rax], 11

; 1370 :     p->v.Raise.exc = exc;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc$[rsp]
  0004d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1371 :     p->v.Raise.cause = cause;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00056	48 8b 4c 24 48	 mov	 rcx, QWORD PTR cause$[rsp]
  0005b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1372 :     p->lineno = lineno;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00064	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  00068	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1373 :     p->col_offset = col_offset;

  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00070	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00074	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1374 :     return p;

  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Raise:

; 1375 : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
_Py_Raise ENDP
_TEXT	ENDS
PUBLIC	_Py_Try
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Try DD imagerel $LN4
	DD	imagerel $LN4+157
	DD	imagerel $unwind$_Py_Try
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Try DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Try
_TEXT	SEGMENT
p$ = 32
body$ = 64
handlers$ = 72
orelse$ = 80
finalbody$ = 88
lineno$ = 96
col_offset$ = 104
arena$ = 112
_Py_Try	PROC						; COMDAT

; 1380 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1381 :     stmt_ty p;
; 1382 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00018	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0001d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR arena$[rsp]
  00022	e8 00 00 00 00	 call	 PyArena_Malloc
  00027	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1383 :     if (!p)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00032	75 04		 jne	 SHORT $LN1@Py_Try

; 1384 :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	eb 60		 jmp	 SHORT $LN2@Py_Try
$LN1@Py_Try:

; 1385 :     p->kind = Try_kind;

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003d	c7 00 0c 00 00
	00		 mov	 DWORD PTR [rax], 12

; 1386 :     p->v.Try.body = body;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR body$[rsp]
  0004d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1387 :     p->v.Try.handlers = handlers;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00056	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handlers$[rsp]
  0005b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1388 :     p->v.Try.orelse = orelse;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00064	48 8b 4c 24 50	 mov	 rcx, QWORD PTR orelse$[rsp]
  00069	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1389 :     p->v.Try.finalbody = finalbody;

  0006d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00072	48 8b 4c 24 58	 mov	 rcx, QWORD PTR finalbody$[rsp]
  00077	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 1390 :     p->lineno = lineno;

  0007b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00080	8b 4c 24 60	 mov	 ecx, DWORD PTR lineno$[rsp]
  00084	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1391 :     p->col_offset = col_offset;

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008c	8b 4c 24 68	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00090	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1392 :     return p;

  00093	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Try:

; 1393 : }

  00098	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009c	c3		 ret	 0
_Py_Try	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@MJAOHOEG@field?5test?5is?5required?5for?5Asser@ ; `string'
PUBLIC	_Py_Assert
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Assert DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_Py_Assert
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Assert DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CC@MJAOHOEG@field?5test?5is?5required?5for?5Asser@
CONST	SEGMENT
??_C@_0CC@MJAOHOEG@field?5test?5is?5required?5for?5Asser@ DB 'field test '
	DB	'is required for Assert', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Assert
_TEXT	SEGMENT
p$ = 32
test$ = 64
msg$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_Assert PROC						; COMDAT

; 1397 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1398 :     stmt_ty p;
; 1399 :     if (!test) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR test$[rsp], 0
  0001e	75 17		 jne	 SHORT $LN2@Py_Assert

; 1400 :         PyErr_SetString(PyExc_ValueError,
; 1401 :                         "field test is required for Assert");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@MJAOHOEG@field?5test?5is?5required?5for?5Asser@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1402 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 64		 jmp	 SHORT $LN3@Py_Assert
$LN2@Py_Assert:

; 1403 :     }
; 1404 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00037	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0003c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	e8 00 00 00 00	 call	 PyArena_Malloc
  00046	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1405 :     if (!p)

  0004b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00051	75 04		 jne	 SHORT $LN1@Py_Assert

; 1406 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 44		 jmp	 SHORT $LN3@Py_Assert
$LN1@Py_Assert:

; 1407 :     p->kind = Assert_kind;

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005c	c7 00 0d 00 00
	00		 mov	 DWORD PTR [rax], 13

; 1408 :     p->v.Assert.test = test;

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR test$[rsp]
  0006c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1409 :     p->v.Assert.msg = msg;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR msg$[rsp]
  0007a	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1410 :     p->lineno = lineno;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00083	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  00087	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1411 :     p->col_offset = col_offset;

  0008a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008f	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00093	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1412 :     return p;

  00096	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Assert:

; 1413 : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
_Py_Assert ENDP
_TEXT	ENDS
PUBLIC	_Py_Import
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Import DD imagerel $LN4
	DD	imagerel $LN4+114
	DD	imagerel $unwind$_Py_Import
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Import DD 011701H
	DD	06217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Import
_TEXT	SEGMENT
p$ = 32
names$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Import PROC						; COMDAT

; 1417 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1418 :     stmt_ty p;
; 1419 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0001c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00021	e8 00 00 00 00	 call	 PyArena_Malloc
  00026	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1420 :     if (!p)

  0002b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00031	75 04		 jne	 SHORT $LN1@Py_Import

; 1421 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 36		 jmp	 SHORT $LN2@Py_Import
$LN1@Py_Import:

; 1422 :     p->kind = Import_kind;

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003c	c7 00 0e 00 00
	00		 mov	 DWORD PTR [rax], 14

; 1423 :     p->v.Import.names = names;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR names$[rsp]
  0004c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1424 :     p->lineno = lineno;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00055	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00059	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1425 :     p->col_offset = col_offset;

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00061	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00065	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1426 :     return p;

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Import:

; 1427 : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
_Py_Import ENDP
_TEXT	ENDS
PUBLIC	_Py_ImportFrom
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ImportFrom DD imagerel $LN4
	DD	imagerel $LN4+141
	DD	imagerel $unwind$_Py_ImportFrom
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ImportFrom DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_ImportFrom
_TEXT	SEGMENT
p$ = 32
module$ = 64
names$ = 72
level$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_ImportFrom PROC					; COMDAT

; 1432 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1433 :     stmt_ty p;
; 1434 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00018	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0001d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00022	e8 00 00 00 00	 call	 PyArena_Malloc
  00027	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1435 :     if (!p)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00032	75 04		 jne	 SHORT $LN1@Py_ImportF

; 1436 :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	eb 50		 jmp	 SHORT $LN2@Py_ImportF
$LN1@Py_ImportF:

; 1437 :     p->kind = ImportFrom_kind;

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003d	c7 00 0f 00 00
	00		 mov	 DWORD PTR [rax], 15

; 1438 :     p->v.ImportFrom.module = module;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR module$[rsp]
  0004d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1439 :     p->v.ImportFrom.names = names;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00056	48 8b 4c 24 48	 mov	 rcx, QWORD PTR names$[rsp]
  0005b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1440 :     p->v.ImportFrom.level = level;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00064	8b 4c 24 50	 mov	 ecx, DWORD PTR level$[rsp]
  00068	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 1441 :     p->lineno = lineno;

  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00070	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  00074	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1442 :     p->col_offset = col_offset;

  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007c	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00080	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1443 :     return p;

  00083	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_ImportF:

; 1444 : }

  00088	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008c	c3		 ret	 0
_Py_ImportFrom ENDP
_TEXT	ENDS
PUBLIC	_Py_Global
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Global DD imagerel $LN4
	DD	imagerel $LN4+114
	DD	imagerel $unwind$_Py_Global
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Global DD 011701H
	DD	06217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Global
_TEXT	SEGMENT
p$ = 32
names$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Global PROC						; COMDAT

; 1448 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1449 :     stmt_ty p;
; 1450 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0001c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00021	e8 00 00 00 00	 call	 PyArena_Malloc
  00026	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1451 :     if (!p)

  0002b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00031	75 04		 jne	 SHORT $LN1@Py_Global

; 1452 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 36		 jmp	 SHORT $LN2@Py_Global
$LN1@Py_Global:

; 1453 :     p->kind = Global_kind;

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003c	c7 00 10 00 00
	00		 mov	 DWORD PTR [rax], 16

; 1454 :     p->v.Global.names = names;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR names$[rsp]
  0004c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1455 :     p->lineno = lineno;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00055	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00059	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1456 :     p->col_offset = col_offset;

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00061	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00065	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1457 :     return p;

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Global:

; 1458 : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
_Py_Global ENDP
_TEXT	ENDS
PUBLIC	_Py_Nonlocal
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Nonlocal DD imagerel $LN4
	DD	imagerel $LN4+114
	DD	imagerel $unwind$_Py_Nonlocal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Nonlocal DD 011701H
	DD	06217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Nonlocal
_TEXT	SEGMENT
p$ = 32
names$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Nonlocal PROC					; COMDAT

; 1462 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1463 :     stmt_ty p;
; 1464 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0001c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00021	e8 00 00 00 00	 call	 PyArena_Malloc
  00026	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1465 :     if (!p)

  0002b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00031	75 04		 jne	 SHORT $LN1@Py_Nonloca

; 1466 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 36		 jmp	 SHORT $LN2@Py_Nonloca
$LN1@Py_Nonloca:

; 1467 :     p->kind = Nonlocal_kind;

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003c	c7 00 11 00 00
	00		 mov	 DWORD PTR [rax], 17

; 1468 :     p->v.Nonlocal.names = names;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR names$[rsp]
  0004c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1469 :     p->lineno = lineno;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00055	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00059	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1470 :     p->col_offset = col_offset;

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00061	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00065	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1471 :     return p;

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Nonloca:

; 1472 : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
_Py_Nonlocal ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@JGMGDPJJ@field?5value?5is?5required?5for?5Expr@ ; `string'
PUBLIC	_Py_Expr
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Expr DD imagerel $LN5
	DD	imagerel $LN5+145
	DD	imagerel $unwind$_Py_Expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Expr DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0CB@JGMGDPJJ@field?5value?5is?5required?5for?5Expr@
CONST	SEGMENT
??_C@_0CB@JGMGDPJJ@field?5value?5is?5required?5for?5Expr@ DB 'field value'
	DB	' is required for Expr', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Expr
_TEXT	SEGMENT
p$ = 32
value$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Expr PROC						; COMDAT

; 1476 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1477 :     stmt_ty p;
; 1478 :     if (!value) {

  00017	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  0001d	75 17		 jne	 SHORT $LN2@Py_Expr

; 1479 :         PyErr_SetString(PyExc_ValueError,
; 1480 :                         "field value is required for Expr");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@JGMGDPJJ@field?5value?5is?5required?5for?5Expr@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 1481 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 56		 jmp	 SHORT $LN3@Py_Expr
$LN2@Py_Expr:

; 1482 :     }
; 1483 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00036	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0003b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00040	e8 00 00 00 00	 call	 PyArena_Malloc
  00045	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1484 :     if (!p)

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00050	75 04		 jne	 SHORT $LN1@Py_Expr

; 1485 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 36		 jmp	 SHORT $LN3@Py_Expr
$LN1@Py_Expr:

; 1486 :     p->kind = Expr_kind;

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005b	c7 00 12 00 00
	00		 mov	 DWORD PTR [rax], 18

; 1487 :     p->v.Expr.value = value;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  0006b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1488 :     p->lineno = lineno;

  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00074	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00078	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1489 :     p->col_offset = col_offset;

  0007b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00080	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00084	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1490 :     return p;

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Expr:

; 1491 : }

  0008c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00090	c3		 ret	 0
_Py_Expr ENDP
_TEXT	ENDS
PUBLIC	_Py_Pass
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Pass DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$_Py_Pass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Pass DD 011101H
	DD	06211H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Pass
_TEXT	SEGMENT
p$ = 32
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Pass PROC						; COMDAT

; 1495 : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1496 :     stmt_ty p;
; 1497 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00011	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0001b	e8 00 00 00 00	 call	 PyArena_Malloc
  00020	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1498 :     if (!p)

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0002b	75 04		 jne	 SHORT $LN1@Py_Pass

; 1499 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 28		 jmp	 SHORT $LN2@Py_Pass
$LN1@Py_Pass:

; 1500 :     p->kind = Pass_kind;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00036	c7 00 13 00 00
	00		 mov	 DWORD PTR [rax], 19

; 1501 :     p->lineno = lineno;

  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00041	8b 4c 24 40	 mov	 ecx, DWORD PTR lineno$[rsp]
  00045	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1502 :     p->col_offset = col_offset;

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0004d	8b 4c 24 48	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00051	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1503 :     return p;

  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Pass:

; 1504 : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
_Py_Pass ENDP
_TEXT	ENDS
PUBLIC	_Py_Break
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Break DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$_Py_Break
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Break DD 011101H
	DD	06211H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Break
_TEXT	SEGMENT
p$ = 32
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Break PROC						; COMDAT

; 1508 : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1509 :     stmt_ty p;
; 1510 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00011	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0001b	e8 00 00 00 00	 call	 PyArena_Malloc
  00020	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1511 :     if (!p)

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0002b	75 04		 jne	 SHORT $LN1@Py_Break

; 1512 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 28		 jmp	 SHORT $LN2@Py_Break
$LN1@Py_Break:

; 1513 :     p->kind = Break_kind;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00036	c7 00 14 00 00
	00		 mov	 DWORD PTR [rax], 20

; 1514 :     p->lineno = lineno;

  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00041	8b 4c 24 40	 mov	 ecx, DWORD PTR lineno$[rsp]
  00045	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1515 :     p->col_offset = col_offset;

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0004d	8b 4c 24 48	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00051	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1516 :     return p;

  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Break:

; 1517 : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
_Py_Break ENDP
_TEXT	ENDS
PUBLIC	_Py_Continue
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Continue DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$_Py_Continue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Continue DD 011101H
	DD	06211H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Continue
_TEXT	SEGMENT
p$ = 32
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Continue PROC					; COMDAT

; 1521 : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1522 :     stmt_ty p;
; 1523 :     p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));

  00011	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0001b	e8 00 00 00 00	 call	 PyArena_Malloc
  00020	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1524 :     if (!p)

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0002b	75 04		 jne	 SHORT $LN1@Py_Continu

; 1525 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 28		 jmp	 SHORT $LN2@Py_Continu
$LN1@Py_Continu:

; 1526 :     p->kind = Continue_kind;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00036	c7 00 15 00 00
	00		 mov	 DWORD PTR [rax], 21

; 1527 :     p->lineno = lineno;

  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00041	8b 4c 24 40	 mov	 ecx, DWORD PTR lineno$[rsp]
  00045	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 1528 :     p->col_offset = col_offset;

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0004d	8b 4c 24 48	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00051	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 1529 :     return p;

  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Continu:

; 1530 : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
_Py_Continue ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@HGKOCBOP@field?5op?5is?5required?5for?5BoolOp?$AA@ ; `string'
PUBLIC	_Py_BoolOp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_BoolOp DD imagerel $LN5
	DD	imagerel $LN5+156
	DD	imagerel $unwind$_Py_BoolOp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_BoolOp DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0CA@HGKOCBOP@field?5op?5is?5required?5for?5BoolOp?$AA@
CONST	SEGMENT
??_C@_0CA@HGKOCBOP@field?5op?5is?5required?5for?5BoolOp?$AA@ DB 'field op'
	DB	' is required for BoolOp', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_BoolOp
_TEXT	SEGMENT
p$ = 32
op$ = 64
values$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_BoolOp PROC						; COMDAT

; 1535 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1536 :     expr_ty p;
; 1537 :     if (!op) {

  00017	83 7c 24 40 00	 cmp	 DWORD PTR op$[rsp], 0
  0001c	75 17		 jne	 SHORT $LN2@Py_BoolOp

; 1538 :         PyErr_SetString(PyExc_ValueError,
; 1539 :                         "field op is required for BoolOp");

  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@HGKOCBOP@field?5op?5is?5required?5for?5BoolOp?$AA@
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	e8 00 00 00 00	 call	 PyErr_SetString

; 1540 :         return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	eb 62		 jmp	 SHORT $LN3@Py_BoolOp
$LN2@Py_BoolOp:

; 1541 :     }
; 1542 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00035	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  0003f	e8 00 00 00 00	 call	 PyArena_Malloc
  00044	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1543 :     if (!p)

  00049	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0004f	75 04		 jne	 SHORT $LN1@Py_BoolOp

; 1544 :         return NULL;

  00051	33 c0		 xor	 eax, eax
  00053	eb 42		 jmp	 SHORT $LN3@Py_BoolOp
$LN1@Py_BoolOp:

; 1545 :     p->kind = BoolOp_kind;

  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005a	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 1546 :     p->v.BoolOp.op = op;

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00065	8b 4c 24 40	 mov	 ecx, DWORD PTR op$[rsp]
  00069	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 1547 :     p->v.BoolOp.values = values;

  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00071	48 8b 4c 24 48	 mov	 rcx, QWORD PTR values$[rsp]
  00076	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1548 :     p->lineno = lineno;

  0007a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007f	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  00083	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1549 :     p->col_offset = col_offset;

  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008b	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  0008f	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1550 :     return p;

  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_BoolOp:

; 1551 : }

  00097	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009b	c3		 ret	 0
_Py_BoolOp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@MNMFNKEA@field?5right?5is?5required?5for?5BinO@ ; `string'
PUBLIC	??_C@_0BP@HHEMEODM@field?5op?5is?5required?5for?5BinOp?$AA@ ; `string'
PUBLIC	??_C@_0CB@MGLKCGGJ@field?5left?5is?5required?5for?5BinOp@ ; `string'
PUBLIC	_Py_BinOp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_BinOp DD imagerel $LN7
	DD	imagerel $LN7+238
	DD	imagerel $unwind$_Py_BinOp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_BinOp DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0CC@MNMFNKEA@field?5right?5is?5required?5for?5BinO@
CONST	SEGMENT
??_C@_0CC@MNMFNKEA@field?5right?5is?5required?5for?5BinO@ DB 'field right'
	DB	' is required for BinOp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HHEMEODM@field?5op?5is?5required?5for?5BinOp?$AA@
CONST	SEGMENT
??_C@_0BP@HHEMEODM@field?5op?5is?5required?5for?5BinOp?$AA@ DB 'field op '
	DB	'is required for BinOp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MGLKCGGJ@field?5left?5is?5required?5for?5BinOp@
CONST	SEGMENT
??_C@_0CB@MGLKCGGJ@field?5left?5is?5required?5for?5BinOp@ DB 'field left '
	DB	'is required for BinOp', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_BinOp
_TEXT	SEGMENT
p$ = 32
left$ = 64
op$ = 72
right$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_BinOp PROC						; COMDAT

; 1556 : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1557 :     expr_ty p;
; 1558 :     if (!left) {

  00017	48 83 7c 24 40
	00		 cmp	 QWORD PTR left$[rsp], 0
  0001d	75 1a		 jne	 SHORT $LN4@Py_BinOp

; 1559 :         PyErr_SetString(PyExc_ValueError,
; 1560 :                         "field left is required for BinOp");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@MGLKCGGJ@field?5left?5is?5required?5for?5BinOp@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 1561 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	e9 b0 00 00 00	 jmp	 $LN5@Py_BinOp
$LN4@Py_BinOp:

; 1562 :     }
; 1563 :     if (!op) {

  00039	83 7c 24 48 00	 cmp	 DWORD PTR op$[rsp], 0
  0003e	75 1a		 jne	 SHORT $LN3@Py_BinOp

; 1564 :         PyErr_SetString(PyExc_ValueError,
; 1565 :                         "field op is required for BinOp");

  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@HHEMEODM@field?5op?5is?5required?5for?5BinOp?$AA@
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004e	e8 00 00 00 00	 call	 PyErr_SetString

; 1566 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	e9 8f 00 00 00	 jmp	 $LN5@Py_BinOp
$LN3@Py_BinOp:

; 1567 :     }
; 1568 :     if (!right) {

  0005a	48 83 7c 24 50
	00		 cmp	 QWORD PTR right$[rsp], 0
  00060	75 17		 jne	 SHORT $LN2@Py_BinOp

; 1569 :         PyErr_SetString(PyExc_ValueError,
; 1570 :                         "field right is required for BinOp");

  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@MNMFNKEA@field?5right?5is?5required?5for?5BinO@
  00069	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00070	e8 00 00 00 00	 call	 PyErr_SetString

; 1571 :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	eb 70		 jmp	 SHORT $LN5@Py_BinOp
$LN2@Py_BinOp:

; 1572 :     }
; 1573 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00079	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0007e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00083	e8 00 00 00 00	 call	 PyArena_Malloc
  00088	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1574 :     if (!p)

  0008d	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00093	75 04		 jne	 SHORT $LN1@Py_BinOp

; 1575 :         return NULL;

  00095	33 c0		 xor	 eax, eax
  00097	eb 50		 jmp	 SHORT $LN5@Py_BinOp
$LN1@Py_BinOp:

; 1576 :     p->kind = BinOp_kind;

  00099	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009e	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 1577 :     p->v.BinOp.left = left;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR left$[rsp]
  000ae	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1578 :     p->v.BinOp.op = op;

  000b2	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b7	8b 4c 24 48	 mov	 ecx, DWORD PTR op$[rsp]
  000bb	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 1579 :     p->v.BinOp.right = right;

  000be	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000c3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR right$[rsp]
  000c8	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1580 :     p->lineno = lineno;

  000cc	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000d1	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  000d5	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1581 :     p->col_offset = col_offset;

  000d8	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000dd	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000e1	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1582 :     return p;

  000e4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN5@Py_BinOp:

; 1583 : }

  000e9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ed	c3		 ret	 0
_Py_BinOp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@PMECGNPL@field?5operand?5is?5required?5for?5Un@ ; `string'
PUBLIC	??_C@_0CB@NAFIFGPL@field?5op?5is?5required?5for?5UnaryOp@ ; `string'
PUBLIC	_Py_UnaryOp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_UnaryOp DD imagerel $LN6
	DD	imagerel $LN6+190
	DD	imagerel $unwind$_Py_UnaryOp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_UnaryOp DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0CG@PMECGNPL@field?5operand?5is?5required?5for?5Un@
CONST	SEGMENT
??_C@_0CG@PMECGNPL@field?5operand?5is?5required?5for?5Un@ DB 'field opera'
	DB	'nd is required for UnaryOp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NAFIFGPL@field?5op?5is?5required?5for?5UnaryOp@
CONST	SEGMENT
??_C@_0CB@NAFIFGPL@field?5op?5is?5required?5for?5UnaryOp@ DB 'field op is'
	DB	' required for UnaryOp', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_UnaryOp
_TEXT	SEGMENT
p$ = 32
op$ = 64
operand$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_UnaryOp PROC					; COMDAT

; 1588 : {

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1589 :     expr_ty p;
; 1590 :     if (!op) {

  00017	83 7c 24 40 00	 cmp	 DWORD PTR op$[rsp], 0
  0001c	75 1a		 jne	 SHORT $LN3@Py_UnaryOp

; 1591 :         PyErr_SetString(PyExc_ValueError,
; 1592 :                         "field op is required for UnaryOp");

  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@NAFIFGPL@field?5op?5is?5required?5for?5UnaryOp@
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	e8 00 00 00 00	 call	 PyErr_SetString

; 1593 :         return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	e9 81 00 00 00	 jmp	 $LN4@Py_UnaryOp
$LN3@Py_UnaryOp:

; 1594 :     }
; 1595 :     if (!operand) {

  00038	48 83 7c 24 48
	00		 cmp	 QWORD PTR operand$[rsp], 0
  0003e	75 17		 jne	 SHORT $LN2@Py_UnaryOp

; 1596 :         PyErr_SetString(PyExc_ValueError,
; 1597 :                         "field operand is required for UnaryOp");

  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@PMECGNPL@field?5operand?5is?5required?5for?5Un@
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004e	e8 00 00 00 00	 call	 PyErr_SetString

; 1598 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 62		 jmp	 SHORT $LN4@Py_UnaryOp
$LN2@Py_UnaryOp:

; 1599 :     }
; 1600 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00057	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0005c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00061	e8 00 00 00 00	 call	 PyArena_Malloc
  00066	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1601 :     if (!p)

  0006b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00071	75 04		 jne	 SHORT $LN1@Py_UnaryOp

; 1602 :         return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	eb 42		 jmp	 SHORT $LN4@Py_UnaryOp
$LN1@Py_UnaryOp:

; 1603 :     p->kind = UnaryOp_kind;

  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007c	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 1604 :     p->v.UnaryOp.op = op;

  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00087	8b 4c 24 40	 mov	 ecx, DWORD PTR op$[rsp]
  0008b	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 1605 :     p->v.UnaryOp.operand = operand;

  0008e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00093	48 8b 4c 24 48	 mov	 rcx, QWORD PTR operand$[rsp]
  00098	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1606 :     p->lineno = lineno;

  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a1	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  000a5	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1607 :     p->col_offset = col_offset;

  000a8	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000ad	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000b1	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1608 :     return p;

  000b4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN4@Py_UnaryOp:

; 1609 : }

  000b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bd	c3		 ret	 0
_Py_UnaryOp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@IKALMCBA@field?5body?5is?5required?5for?5Lambd@ ; `string'
PUBLIC	??_C@_0CC@FFNEJAPO@field?5args?5is?5required?5for?5Lambd@ ; `string'
PUBLIC	_Py_Lambda
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Lambda DD imagerel $LN6
	DD	imagerel $LN6+194
	DD	imagerel $unwind$_Py_Lambda
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Lambda DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CC@IKALMCBA@field?5body?5is?5required?5for?5Lambd@
CONST	SEGMENT
??_C@_0CC@IKALMCBA@field?5body?5is?5required?5for?5Lambd@ DB 'field body '
	DB	'is required for Lambda', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FFNEJAPO@field?5args?5is?5required?5for?5Lambd@
CONST	SEGMENT
??_C@_0CC@FFNEJAPO@field?5args?5is?5required?5for?5Lambd@ DB 'field args '
	DB	'is required for Lambda', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Lambda
_TEXT	SEGMENT
p$ = 32
args$ = 64
body$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_Lambda PROC						; COMDAT

; 1614 : {

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1615 :     expr_ty p;
; 1616 :     if (!args) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR args$[rsp], 0
  0001e	75 1a		 jne	 SHORT $LN3@Py_Lambda

; 1617 :         PyErr_SetString(PyExc_ValueError,
; 1618 :                         "field args is required for Lambda");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@FFNEJAPO@field?5args?5is?5required?5for?5Lambd@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1619 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 83 00 00 00	 jmp	 $LN4@Py_Lambda
$LN3@Py_Lambda:

; 1620 :     }
; 1621 :     if (!body) {

  0003a	48 83 7c 24 48
	00		 cmp	 QWORD PTR body$[rsp], 0
  00040	75 17		 jne	 SHORT $LN2@Py_Lambda

; 1622 :         PyErr_SetString(PyExc_ValueError,
; 1623 :                         "field body is required for Lambda");

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@IKALMCBA@field?5body?5is?5required?5for?5Lambd@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00050	e8 00 00 00 00	 call	 PyErr_SetString

; 1624 :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	eb 64		 jmp	 SHORT $LN4@Py_Lambda
$LN2@Py_Lambda:

; 1625 :     }
; 1626 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00059	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0005e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00063	e8 00 00 00 00	 call	 PyArena_Malloc
  00068	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1627 :     if (!p)

  0006d	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00073	75 04		 jne	 SHORT $LN1@Py_Lambda

; 1628 :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	eb 44		 jmp	 SHORT $LN4@Py_Lambda
$LN1@Py_Lambda:

; 1629 :     p->kind = Lambda_kind;

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007e	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 1630 :     p->v.Lambda.args = args;

  00084	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00089	48 8b 4c 24 40	 mov	 rcx, QWORD PTR args$[rsp]
  0008e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1631 :     p->v.Lambda.body = body;

  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00097	48 8b 4c 24 48	 mov	 rcx, QWORD PTR body$[rsp]
  0009c	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1632 :     p->lineno = lineno;

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a5	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  000a9	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1633 :     p->col_offset = col_offset;

  000ac	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b1	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000b5	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1634 :     return p;

  000b8	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN4@Py_Lambda:

; 1635 : }

  000bd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c1	c3		 ret	 0
_Py_Lambda ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@CGAONIEH@field?5orelse?5is?5required?5for?5IfE@ ; `string'
PUBLIC	??_C@_0CB@OMMKJGFE@field?5body?5is?5required?5for?5IfExp@ ; `string'
PUBLIC	??_C@_0CB@OCONBKBF@field?5test?5is?5required?5for?5IfExp@ ; `string'
PUBLIC	_Py_IfExp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_IfExp DD imagerel $LN7
	DD	imagerel $LN7+242
	DD	imagerel $unwind$_Py_IfExp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IfExp DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CD@CGAONIEH@field?5orelse?5is?5required?5for?5IfE@
CONST	SEGMENT
??_C@_0CD@CGAONIEH@field?5orelse?5is?5required?5for?5IfE@ DB 'field orels'
	DB	'e is required for IfExp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OMMKJGFE@field?5body?5is?5required?5for?5IfExp@
CONST	SEGMENT
??_C@_0CB@OMMKJGFE@field?5body?5is?5required?5for?5IfExp@ DB 'field body '
	DB	'is required for IfExp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OCONBKBF@field?5test?5is?5required?5for?5IfExp@
CONST	SEGMENT
??_C@_0CB@OCONBKBF@field?5test?5is?5required?5for?5IfExp@ DB 'field test '
	DB	'is required for IfExp', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IfExp
_TEXT	SEGMENT
p$ = 32
test$ = 64
body$ = 72
orelse$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_IfExp PROC						; COMDAT

; 1640 : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1641 :     expr_ty p;
; 1642 :     if (!test) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR test$[rsp], 0
  0001e	75 1a		 jne	 SHORT $LN4@Py_IfExp

; 1643 :         PyErr_SetString(PyExc_ValueError,
; 1644 :                         "field test is required for IfExp");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@OCONBKBF@field?5test?5is?5required?5for?5IfExp@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1645 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 b3 00 00 00	 jmp	 $LN5@Py_IfExp
$LN4@Py_IfExp:

; 1646 :     }
; 1647 :     if (!body) {

  0003a	48 83 7c 24 48
	00		 cmp	 QWORD PTR body$[rsp], 0
  00040	75 1a		 jne	 SHORT $LN3@Py_IfExp

; 1648 :         PyErr_SetString(PyExc_ValueError,
; 1649 :                         "field body is required for IfExp");

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@OMMKJGFE@field?5body?5is?5required?5for?5IfExp@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00050	e8 00 00 00 00	 call	 PyErr_SetString

; 1650 :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	e9 91 00 00 00	 jmp	 $LN5@Py_IfExp
$LN3@Py_IfExp:

; 1651 :     }
; 1652 :     if (!orelse) {

  0005c	48 83 7c 24 50
	00		 cmp	 QWORD PTR orelse$[rsp], 0
  00062	75 17		 jne	 SHORT $LN2@Py_IfExp

; 1653 :         PyErr_SetString(PyExc_ValueError,
; 1654 :                         "field orelse is required for IfExp");

  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@CGAONIEH@field?5orelse?5is?5required?5for?5IfE@
  0006b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00072	e8 00 00 00 00	 call	 PyErr_SetString

; 1655 :         return NULL;

  00077	33 c0		 xor	 eax, eax
  00079	eb 72		 jmp	 SHORT $LN5@Py_IfExp
$LN2@Py_IfExp:

; 1656 :     }
; 1657 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0007b	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00080	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00085	e8 00 00 00 00	 call	 PyArena_Malloc
  0008a	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1658 :     if (!p)

  0008f	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00095	75 04		 jne	 SHORT $LN1@Py_IfExp

; 1659 :         return NULL;

  00097	33 c0		 xor	 eax, eax
  00099	eb 52		 jmp	 SHORT $LN5@Py_IfExp
$LN1@Py_IfExp:

; 1660 :     p->kind = IfExp_kind;

  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a0	c7 00 05 00 00
	00		 mov	 DWORD PTR [rax], 5

; 1661 :     p->v.IfExp.test = test;

  000a6	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000ab	48 8b 4c 24 40	 mov	 rcx, QWORD PTR test$[rsp]
  000b0	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1662 :     p->v.IfExp.body = body;

  000b4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR body$[rsp]
  000be	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1663 :     p->v.IfExp.orelse = orelse;

  000c2	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000c7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR orelse$[rsp]
  000cc	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1664 :     p->lineno = lineno;

  000d0	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000d5	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  000d9	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1665 :     p->col_offset = col_offset;

  000dc	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000e1	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000e5	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1666 :     return p;

  000e8	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN5@Py_IfExp:

; 1667 : }

  000ed	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f1	c3		 ret	 0
_Py_IfExp ENDP
_TEXT	ENDS
PUBLIC	_Py_Dict
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Dict DD imagerel $LN4
	DD	imagerel $LN4+129
	DD	imagerel $unwind$_Py_Dict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Dict DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Dict
_TEXT	SEGMENT
p$ = 32
keys$ = 64
values$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_Dict PROC						; COMDAT

; 1672 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1673 :     expr_ty p;
; 1674 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00018	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0001d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00022	e8 00 00 00 00	 call	 PyArena_Malloc
  00027	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1675 :     if (!p)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00032	75 04		 jne	 SHORT $LN1@Py_Dict

; 1676 :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	eb 44		 jmp	 SHORT $LN2@Py_Dict
$LN1@Py_Dict:

; 1677 :     p->kind = Dict_kind;

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003d	c7 00 06 00 00
	00		 mov	 DWORD PTR [rax], 6

; 1678 :     p->v.Dict.keys = keys;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR keys$[rsp]
  0004d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1679 :     p->v.Dict.values = values;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00056	48 8b 4c 24 48	 mov	 rcx, QWORD PTR values$[rsp]
  0005b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1680 :     p->lineno = lineno;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00064	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  00068	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1681 :     p->col_offset = col_offset;

  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00070	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00074	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1682 :     return p;

  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Dict:

; 1683 : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
_Py_Dict ENDP
_TEXT	ENDS
PUBLIC	_Py_Set
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Set DD imagerel $LN4
	DD	imagerel $LN4+114
	DD	imagerel $unwind$_Py_Set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Set DD 011701H
	DD	06217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Set
_TEXT	SEGMENT
p$ = 32
elts$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Set	PROC						; COMDAT

; 1687 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1688 :     expr_ty p;
; 1689 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0001c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00021	e8 00 00 00 00	 call	 PyArena_Malloc
  00026	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1690 :     if (!p)

  0002b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00031	75 04		 jne	 SHORT $LN1@Py_Set

; 1691 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 36		 jmp	 SHORT $LN2@Py_Set
$LN1@Py_Set:

; 1692 :     p->kind = Set_kind;

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003c	c7 00 07 00 00
	00		 mov	 DWORD PTR [rax], 7

; 1693 :     p->v.Set.elts = elts;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR elts$[rsp]
  0004c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1694 :     p->lineno = lineno;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00055	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00059	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1695 :     p->col_offset = col_offset;

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00061	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00065	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1696 :     return p;

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Set:

; 1697 : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
_Py_Set	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@JDGGGGGL@field?5elt?5is?5required?5for?5ListCo@ ; `string'
PUBLIC	_Py_ListComp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ListComp DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_Py_ListComp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ListComp DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CD@JDGGGGGL@field?5elt?5is?5required?5for?5ListCo@
CONST	SEGMENT
??_C@_0CD@JDGGGGGL@field?5elt?5is?5required?5for?5ListCo@ DB 'field elt i'
	DB	's required for ListComp', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_ListComp
_TEXT	SEGMENT
p$ = 32
elt$ = 64
generators$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_ListComp PROC					; COMDAT

; 1702 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1703 :     expr_ty p;
; 1704 :     if (!elt) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR elt$[rsp], 0
  0001e	75 17		 jne	 SHORT $LN2@Py_ListCom

; 1705 :         PyErr_SetString(PyExc_ValueError,
; 1706 :                         "field elt is required for ListComp");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@JDGGGGGL@field?5elt?5is?5required?5for?5ListCo@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1707 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 64		 jmp	 SHORT $LN3@Py_ListCom
$LN2@Py_ListCom:

; 1708 :     }
; 1709 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00037	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	e8 00 00 00 00	 call	 PyArena_Malloc
  00046	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1710 :     if (!p)

  0004b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00051	75 04		 jne	 SHORT $LN1@Py_ListCom

; 1711 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 44		 jmp	 SHORT $LN3@Py_ListCom
$LN1@Py_ListCom:

; 1712 :     p->kind = ListComp_kind;

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005c	c7 00 08 00 00
	00		 mov	 DWORD PTR [rax], 8

; 1713 :     p->v.ListComp.elt = elt;

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR elt$[rsp]
  0006c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1714 :     p->v.ListComp.generators = generators;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR generators$[rsp]
  0007a	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1715 :     p->lineno = lineno;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00083	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  00087	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1716 :     p->col_offset = col_offset;

  0008a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008f	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00093	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1717 :     return p;

  00096	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_ListCom:

; 1718 : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
_Py_ListComp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@EFKPDCJI@field?5elt?5is?5required?5for?5SetCom@ ; `string'
PUBLIC	_Py_SetComp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_SetComp DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_Py_SetComp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_SetComp DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CC@EFKPDCJI@field?5elt?5is?5required?5for?5SetCom@
CONST	SEGMENT
??_C@_0CC@EFKPDCJI@field?5elt?5is?5required?5for?5SetCom@ DB 'field elt i'
	DB	's required for SetComp', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_SetComp
_TEXT	SEGMENT
p$ = 32
elt$ = 64
generators$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_SetComp PROC					; COMDAT

; 1723 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1724 :     expr_ty p;
; 1725 :     if (!elt) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR elt$[rsp], 0
  0001e	75 17		 jne	 SHORT $LN2@Py_SetComp

; 1726 :         PyErr_SetString(PyExc_ValueError,
; 1727 :                         "field elt is required for SetComp");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@EFKPDCJI@field?5elt?5is?5required?5for?5SetCom@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1728 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 64		 jmp	 SHORT $LN3@Py_SetComp
$LN2@Py_SetComp:

; 1729 :     }
; 1730 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00037	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	e8 00 00 00 00	 call	 PyArena_Malloc
  00046	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1731 :     if (!p)

  0004b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00051	75 04		 jne	 SHORT $LN1@Py_SetComp

; 1732 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 44		 jmp	 SHORT $LN3@Py_SetComp
$LN1@Py_SetComp:

; 1733 :     p->kind = SetComp_kind;

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005c	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 1734 :     p->v.SetComp.elt = elt;

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR elt$[rsp]
  0006c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1735 :     p->v.SetComp.generators = generators;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR generators$[rsp]
  0007a	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1736 :     p->lineno = lineno;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00083	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  00087	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1737 :     p->col_offset = col_offset;

  0008a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008f	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00093	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1738 :     return p;

  00096	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_SetComp:

; 1739 : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
_Py_SetComp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@FPJAOOML@field?5value?5is?5required?5for?5Dict@ ; `string'
PUBLIC	??_C@_0CD@LBIIPOPN@field?5key?5is?5required?5for?5DictCo@ ; `string'
PUBLIC	_Py_DictComp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DictComp DD imagerel $LN6
	DD	imagerel $LN6+208
	DD	imagerel $unwind$_Py_DictComp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DictComp DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CF@FPJAOOML@field?5value?5is?5required?5for?5Dict@
CONST	SEGMENT
??_C@_0CF@FPJAOOML@field?5value?5is?5required?5for?5Dict@ DB 'field value'
	DB	' is required for DictComp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LBIIPOPN@field?5key?5is?5required?5for?5DictCo@
CONST	SEGMENT
??_C@_0CD@LBIIPOPN@field?5key?5is?5required?5for?5DictCo@ DB 'field key i'
	DB	's required for DictComp', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DictComp
_TEXT	SEGMENT
p$ = 32
key$ = 64
value$ = 72
generators$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_DictComp PROC					; COMDAT

; 1744 : {

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1745 :     expr_ty p;
; 1746 :     if (!key) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR key$[rsp], 0
  0001e	75 1a		 jne	 SHORT $LN3@Py_DictCom

; 1747 :         PyErr_SetString(PyExc_ValueError,
; 1748 :                         "field key is required for DictComp");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@LBIIPOPN@field?5key?5is?5required?5for?5DictCo@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1749 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 91 00 00 00	 jmp	 $LN4@Py_DictCom
$LN3@Py_DictCom:

; 1750 :     }
; 1751 :     if (!value) {

  0003a	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00040	75 17		 jne	 SHORT $LN2@Py_DictCom

; 1752 :         PyErr_SetString(PyExc_ValueError,
; 1753 :                         "field value is required for DictComp");

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@FPJAOOML@field?5value?5is?5required?5for?5Dict@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00050	e8 00 00 00 00	 call	 PyErr_SetString

; 1754 :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	eb 72		 jmp	 SHORT $LN4@Py_DictCom
$LN2@Py_DictCom:

; 1755 :     }
; 1756 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00059	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0005e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00063	e8 00 00 00 00	 call	 PyArena_Malloc
  00068	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1757 :     if (!p)

  0006d	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00073	75 04		 jne	 SHORT $LN1@Py_DictCom

; 1758 :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	eb 52		 jmp	 SHORT $LN4@Py_DictCom
$LN1@Py_DictCom:

; 1759 :     p->kind = DictComp_kind;

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007e	c7 00 0a 00 00
	00		 mov	 DWORD PTR [rax], 10

; 1760 :     p->v.DictComp.key = key;

  00084	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00089	48 8b 4c 24 40	 mov	 rcx, QWORD PTR key$[rsp]
  0008e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1761 :     p->v.DictComp.value = value;

  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00097	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0009c	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1762 :     p->v.DictComp.generators = generators;

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR generators$[rsp]
  000aa	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1763 :     p->lineno = lineno;

  000ae	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b3	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  000b7	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1764 :     p->col_offset = col_offset;

  000ba	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000bf	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000c3	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1765 :     return p;

  000c6	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN4@Py_DictCom:

; 1766 : }

  000cb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cf	c3		 ret	 0
_Py_DictComp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@MDBCKMDJ@field?5elt?5is?5required?5for?5Genera@ ; `string'
PUBLIC	_Py_GeneratorExp
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_GeneratorExp DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_Py_GeneratorExp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_GeneratorExp DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CH@MDBCKMDJ@field?5elt?5is?5required?5for?5Genera@
CONST	SEGMENT
??_C@_0CH@MDBCKMDJ@field?5elt?5is?5required?5for?5Genera@ DB 'field elt i'
	DB	's required for GeneratorExp', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_GeneratorExp
_TEXT	SEGMENT
p$ = 32
elt$ = 64
generators$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_GeneratorExp PROC					; COMDAT

; 1771 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1772 :     expr_ty p;
; 1773 :     if (!elt) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR elt$[rsp], 0
  0001e	75 17		 jne	 SHORT $LN2@Py_Generat

; 1774 :         PyErr_SetString(PyExc_ValueError,
; 1775 :                         "field elt is required for GeneratorExp");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@MDBCKMDJ@field?5elt?5is?5required?5for?5Genera@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1776 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 64		 jmp	 SHORT $LN3@Py_Generat
$LN2@Py_Generat:

; 1777 :     }
; 1778 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00037	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	e8 00 00 00 00	 call	 PyArena_Malloc
  00046	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1779 :     if (!p)

  0004b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00051	75 04		 jne	 SHORT $LN1@Py_Generat

; 1780 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 44		 jmp	 SHORT $LN3@Py_Generat
$LN1@Py_Generat:

; 1781 :     p->kind = GeneratorExp_kind;

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005c	c7 00 0b 00 00
	00		 mov	 DWORD PTR [rax], 11

; 1782 :     p->v.GeneratorExp.elt = elt;

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR elt$[rsp]
  0006c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1783 :     p->v.GeneratorExp.generators = generators;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR generators$[rsp]
  0007a	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1784 :     p->lineno = lineno;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00083	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  00087	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1785 :     p->col_offset = col_offset;

  0008a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008f	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00093	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1786 :     return p;

  00096	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Generat:

; 1787 : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
_Py_GeneratorExp ENDP
_TEXT	ENDS
PUBLIC	_Py_Yield
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Yield DD imagerel $LN4
	DD	imagerel $LN4+114
	DD	imagerel $unwind$_Py_Yield
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Yield DD 011701H
	DD	06217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Yield
_TEXT	SEGMENT
p$ = 32
value$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Yield PROC						; COMDAT

; 1791 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1792 :     expr_ty p;
; 1793 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00017	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0001c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00021	e8 00 00 00 00	 call	 PyArena_Malloc
  00026	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1794 :     if (!p)

  0002b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00031	75 04		 jne	 SHORT $LN1@Py_Yield

; 1795 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 36		 jmp	 SHORT $LN2@Py_Yield
$LN1@Py_Yield:

; 1796 :     p->kind = Yield_kind;

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003c	c7 00 0c 00 00
	00		 mov	 DWORD PTR [rax], 12

; 1797 :     p->v.Yield.value = value;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  0004c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1798 :     p->lineno = lineno;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00055	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00059	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1799 :     p->col_offset = col_offset;

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00061	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00065	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1800 :     return p;

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Yield:

; 1801 : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
_Py_Yield ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@FFMMJEDF@field?5value?5is?5required?5for?5Yiel@ ; `string'
PUBLIC	_Py_YieldFrom
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_YieldFrom DD imagerel $LN5
	DD	imagerel $LN5+145
	DD	imagerel $unwind$_Py_YieldFrom
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_YieldFrom DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0CG@FFMMJEDF@field?5value?5is?5required?5for?5Yiel@
CONST	SEGMENT
??_C@_0CG@FFMMJEDF@field?5value?5is?5required?5for?5Yiel@ DB 'field value'
	DB	' is required for YieldFrom', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_YieldFrom
_TEXT	SEGMENT
p$ = 32
value$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_YieldFrom PROC					; COMDAT

; 1805 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1806 :     expr_ty p;
; 1807 :     if (!value) {

  00017	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  0001d	75 17		 jne	 SHORT $LN2@Py_YieldFr

; 1808 :         PyErr_SetString(PyExc_ValueError,
; 1809 :                         "field value is required for YieldFrom");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@FFMMJEDF@field?5value?5is?5required?5for?5Yiel@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 1810 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 56		 jmp	 SHORT $LN3@Py_YieldFr
$LN2@Py_YieldFr:

; 1811 :     }
; 1812 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00036	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00040	e8 00 00 00 00	 call	 PyArena_Malloc
  00045	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1813 :     if (!p)

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00050	75 04		 jne	 SHORT $LN1@Py_YieldFr

; 1814 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 36		 jmp	 SHORT $LN3@Py_YieldFr
$LN1@Py_YieldFr:

; 1815 :     p->kind = YieldFrom_kind;

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005b	c7 00 0d 00 00
	00		 mov	 DWORD PTR [rax], 13

; 1816 :     p->v.YieldFrom.value = value;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  0006b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1817 :     p->lineno = lineno;

  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00074	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00078	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1818 :     p->col_offset = col_offset;

  0007b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00080	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00084	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1819 :     return p;

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_YieldFr:

; 1820 : }

  0008c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00090	c3		 ret	 0
_Py_YieldFrom ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@MLPHOINC@field?5left?5is?5required?5for?5Compa@ ; `string'
PUBLIC	_Py_Compare
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Compare DD imagerel $LN5
	DD	imagerel $LN5+174
	DD	imagerel $unwind$_Py_Compare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Compare DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CD@MLPHOINC@field?5left?5is?5required?5for?5Compa@
CONST	SEGMENT
??_C@_0CD@MLPHOINC@field?5left?5is?5required?5for?5Compa@ DB 'field left '
	DB	'is required for Compare', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Compare
_TEXT	SEGMENT
p$ = 32
left$ = 64
ops$ = 72
comparators$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_Compare PROC					; COMDAT

; 1825 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1826 :     expr_ty p;
; 1827 :     if (!left) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR left$[rsp], 0
  0001e	75 17		 jne	 SHORT $LN2@Py_Compare

; 1828 :         PyErr_SetString(PyExc_ValueError,
; 1829 :                         "field left is required for Compare");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@MLPHOINC@field?5left?5is?5required?5for?5Compa@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1830 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 72		 jmp	 SHORT $LN3@Py_Compare
$LN2@Py_Compare:

; 1831 :     }
; 1832 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00037	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00041	e8 00 00 00 00	 call	 PyArena_Malloc
  00046	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1833 :     if (!p)

  0004b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00051	75 04		 jne	 SHORT $LN1@Py_Compare

; 1834 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 52		 jmp	 SHORT $LN3@Py_Compare
$LN1@Py_Compare:

; 1835 :     p->kind = Compare_kind;

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005c	c7 00 0e 00 00
	00		 mov	 DWORD PTR [rax], 14

; 1836 :     p->v.Compare.left = left;

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR left$[rsp]
  0006c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1837 :     p->v.Compare.ops = ops;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ops$[rsp]
  0007a	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1838 :     p->v.Compare.comparators = comparators;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR comparators$[rsp]
  00088	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1839 :     p->lineno = lineno;

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00091	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  00095	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1840 :     p->col_offset = col_offset;

  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009d	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000a1	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1841 :     return p;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Compare:

; 1842 : }

  000a9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ad	c3		 ret	 0
_Py_Compare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@BOLBGLLH@field?5func?5is?5required?5for?5Call?$AA@ ; `string'
PUBLIC	_Py_Call
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Call DD imagerel $LN5
	DD	imagerel $LN5+205
	DD	imagerel $unwind$_Py_Call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Call DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CA@BOLBGLLH@field?5func?5is?5required?5for?5Call?$AA@
CONST	SEGMENT
??_C@_0CA@BOLBGLLH@field?5func?5is?5required?5for?5Call?$AA@ DB 'field fu'
	DB	'nc is required for Call', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Call
_TEXT	SEGMENT
p$ = 32
func$ = 64
args$ = 72
keywords$ = 80
starargs$ = 88
kwargs$ = 96
lineno$ = 104
col_offset$ = 112
arena$ = 120
_Py_Call PROC						; COMDAT

; 1847 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1848 :     expr_ty p;
; 1849 :     if (!func) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR func$[rsp], 0
  0001e	75 1a		 jne	 SHORT $LN2@Py_Call

; 1850 :         PyErr_SetString(PyExc_ValueError,
; 1851 :                         "field func is required for Call");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@BOLBGLLH@field?5func?5is?5required?5for?5Call?$AA@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1852 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 8e 00 00 00	 jmp	 $LN3@Py_Call
$LN2@Py_Call:

; 1853 :     }
; 1854 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0003a	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR arena$[rsp]
  00044	e8 00 00 00 00	 call	 PyArena_Malloc
  00049	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1855 :     if (!p)

  0004e	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00054	75 04		 jne	 SHORT $LN1@Py_Call

; 1856 :         return NULL;

  00056	33 c0		 xor	 eax, eax
  00058	eb 6e		 jmp	 SHORT $LN3@Py_Call
$LN1@Py_Call:

; 1857 :     p->kind = Call_kind;

  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005f	c7 00 0f 00 00
	00		 mov	 DWORD PTR [rax], 15

; 1858 :     p->v.Call.func = func;

  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0006a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  0006f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1859 :     p->v.Call.args = args;

  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00078	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0007d	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1860 :     p->v.Call.keywords = keywords;

  00081	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keywords$[rsp]
  0008b	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1861 :     p->v.Call.starargs = starargs;

  0008f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00094	48 8b 4c 24 58	 mov	 rcx, QWORD PTR starargs$[rsp]
  00099	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 1862 :     p->v.Call.kwargs = kwargs;

  0009d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR kwargs$[rsp]
  000a7	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 1863 :     p->lineno = lineno;

  000ab	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b0	8b 4c 24 68	 mov	 ecx, DWORD PTR lineno$[rsp]
  000b4	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1864 :     p->col_offset = col_offset;

  000b7	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000bc	8b 4c 24 70	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000c0	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1865 :     return p;

  000c3	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Call:

; 1866 : }

  000c8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cc	c3		 ret	 0
_Py_Call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@DIMBMCIK@field?5n?5is?5required?5for?5Num?$AA@ ; `string'
PUBLIC	_Py_Num
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Num DD imagerel $LN5
	DD	imagerel $LN5+145
	DD	imagerel $unwind$_Py_Num
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Num DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0BM@DIMBMCIK@field?5n?5is?5required?5for?5Num?$AA@
CONST	SEGMENT
??_C@_0BM@DIMBMCIK@field?5n?5is?5required?5for?5Num?$AA@ DB 'field n is r'
	DB	'equired for Num', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Num
_TEXT	SEGMENT
p$ = 32
n$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Num	PROC						; COMDAT

; 1870 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1871 :     expr_ty p;
; 1872 :     if (!n) {

  00017	48 83 7c 24 40
	00		 cmp	 QWORD PTR n$[rsp], 0
  0001d	75 17		 jne	 SHORT $LN2@Py_Num

; 1873 :         PyErr_SetString(PyExc_ValueError,
; 1874 :                         "field n is required for Num");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DIMBMCIK@field?5n?5is?5required?5for?5Num?$AA@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 1875 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 56		 jmp	 SHORT $LN3@Py_Num
$LN2@Py_Num:

; 1876 :     }
; 1877 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00036	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00040	e8 00 00 00 00	 call	 PyArena_Malloc
  00045	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1878 :     if (!p)

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00050	75 04		 jne	 SHORT $LN1@Py_Num

; 1879 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 36		 jmp	 SHORT $LN3@Py_Num
$LN1@Py_Num:

; 1880 :     p->kind = Num_kind;

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005b	c7 00 10 00 00
	00		 mov	 DWORD PTR [rax], 16

; 1881 :     p->v.Num.n = n;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  0006b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1882 :     p->lineno = lineno;

  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00074	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00078	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1883 :     p->col_offset = col_offset;

  0007b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00080	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00084	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1884 :     return p;

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Num:

; 1885 : }

  0008c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00090	c3		 ret	 0
_Py_Num	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@NBHLCOA@field?5s?5is?5required?5for?5Str?$AA@ ; `string'
PUBLIC	_Py_Str
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Str DD imagerel $LN5
	DD	imagerel $LN5+145
	DD	imagerel $unwind$_Py_Str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Str DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0BM@NBHLCOA@field?5s?5is?5required?5for?5Str?$AA@
CONST	SEGMENT
??_C@_0BM@NBHLCOA@field?5s?5is?5required?5for?5Str?$AA@ DB 'field s is re'
	DB	'quired for Str', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Str
_TEXT	SEGMENT
p$ = 32
s$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Str	PROC						; COMDAT

; 1889 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1890 :     expr_ty p;
; 1891 :     if (!s) {

  00017	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  0001d	75 17		 jne	 SHORT $LN2@Py_Str

; 1892 :         PyErr_SetString(PyExc_ValueError,
; 1893 :                         "field s is required for Str");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@NBHLCOA@field?5s?5is?5required?5for?5Str?$AA@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 1894 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 56		 jmp	 SHORT $LN3@Py_Str
$LN2@Py_Str:

; 1895 :     }
; 1896 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00036	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00040	e8 00 00 00 00	 call	 PyArena_Malloc
  00045	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1897 :     if (!p)

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00050	75 04		 jne	 SHORT $LN1@Py_Str

; 1898 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 36		 jmp	 SHORT $LN3@Py_Str
$LN1@Py_Str:

; 1899 :     p->kind = Str_kind;

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005b	c7 00 11 00 00
	00		 mov	 DWORD PTR [rax], 17

; 1900 :     p->v.Str.s = s;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0006b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1901 :     p->lineno = lineno;

  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00074	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00078	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1902 :     p->col_offset = col_offset;

  0007b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00080	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00084	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1903 :     return p;

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Str:

; 1904 : }

  0008c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00090	c3		 ret	 0
_Py_Str	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@CEGOEFPG@field?5s?5is?5required?5for?5Bytes?$AA@ ; `string'
PUBLIC	_Py_Bytes
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Bytes DD imagerel $LN5
	DD	imagerel $LN5+145
	DD	imagerel $unwind$_Py_Bytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Bytes DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0BO@CEGOEFPG@field?5s?5is?5required?5for?5Bytes?$AA@
CONST	SEGMENT
??_C@_0BO@CEGOEFPG@field?5s?5is?5required?5for?5Bytes?$AA@ DB 'field s is'
	DB	' required for Bytes', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Bytes
_TEXT	SEGMENT
p$ = 32
s$ = 64
lineno$ = 72
col_offset$ = 80
arena$ = 88
_Py_Bytes PROC						; COMDAT

; 1908 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1909 :     expr_ty p;
; 1910 :     if (!s) {

  00017	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  0001d	75 17		 jne	 SHORT $LN2@Py_Bytes

; 1911 :         PyErr_SetString(PyExc_ValueError,
; 1912 :                         "field s is required for Bytes");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@CEGOEFPG@field?5s?5is?5required?5for?5Bytes?$AA@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 1913 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 56		 jmp	 SHORT $LN3@Py_Bytes
$LN2@Py_Bytes:

; 1914 :     }
; 1915 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00036	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00040	e8 00 00 00 00	 call	 PyArena_Malloc
  00045	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1916 :     if (!p)

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00050	75 04		 jne	 SHORT $LN1@Py_Bytes

; 1917 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 36		 jmp	 SHORT $LN3@Py_Bytes
$LN1@Py_Bytes:

; 1918 :     p->kind = Bytes_kind;

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005b	c7 00 12 00 00
	00		 mov	 DWORD PTR [rax], 18

; 1919 :     p->v.Bytes.s = s;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0006b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1920 :     p->lineno = lineno;

  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00074	8b 4c 24 48	 mov	 ecx, DWORD PTR lineno$[rsp]
  00078	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1921 :     p->col_offset = col_offset;

  0007b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00080	8b 4c 24 50	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00084	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1922 :     return p;

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Bytes:

; 1923 : }

  0008c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00090	c3		 ret	 0
_Py_Bytes ENDP
_TEXT	ENDS
PUBLIC	_Py_Ellipsis
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Ellipsis DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$_Py_Ellipsis
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Ellipsis DD 011101H
	DD	06211H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Ellipsis
_TEXT	SEGMENT
p$ = 32
lineno$ = 64
col_offset$ = 72
arena$ = 80
_Py_Ellipsis PROC					; COMDAT

; 1927 : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1928 :     expr_ty p;
; 1929 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00011	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0001b	e8 00 00 00 00	 call	 PyArena_Malloc
  00020	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1930 :     if (!p)

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0002b	75 04		 jne	 SHORT $LN1@Py_Ellipsi

; 1931 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 28		 jmp	 SHORT $LN2@Py_Ellipsi
$LN1@Py_Ellipsi:

; 1932 :     p->kind = Ellipsis_kind;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00036	c7 00 13 00 00
	00		 mov	 DWORD PTR [rax], 19

; 1933 :     p->lineno = lineno;

  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00041	8b 4c 24 40	 mov	 ecx, DWORD PTR lineno$[rsp]
  00045	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1934 :     p->col_offset = col_offset;

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0004d	8b 4c 24 48	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00051	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1935 :     return p;

  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Ellipsi:

; 1936 : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
_Py_Ellipsis ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@GFDAHIKH@field?5ctx?5is?5required?5for?5Attrib@ ; `string'
PUBLIC	??_C@_0CF@BPLMMPJC@field?5attr?5is?5required?5for?5Attri@ ; `string'
PUBLIC	??_C@_0CG@HGGIECBD@field?5value?5is?5required?5for?5Attr@ ; `string'
PUBLIC	_Py_Attribute
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Attribute DD imagerel $LN7
	DD	imagerel $LN7+239
	DD	imagerel $unwind$_Py_Attribute
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Attribute DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CE@GFDAHIKH@field?5ctx?5is?5required?5for?5Attrib@
CONST	SEGMENT
??_C@_0CE@GFDAHIKH@field?5ctx?5is?5required?5for?5Attrib@ DB 'field ctx i'
	DB	's required for Attribute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BPLMMPJC@field?5attr?5is?5required?5for?5Attri@
CONST	SEGMENT
??_C@_0CF@BPLMMPJC@field?5attr?5is?5required?5for?5Attri@ DB 'field attr '
	DB	'is required for Attribute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HGGIECBD@field?5value?5is?5required?5for?5Attr@
CONST	SEGMENT
??_C@_0CG@HGGIECBD@field?5value?5is?5required?5for?5Attr@ DB 'field value'
	DB	' is required for Attribute', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Attribute
_TEXT	SEGMENT
p$ = 32
value$ = 64
attr$ = 72
ctx$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_Attribute PROC					; COMDAT

; 1941 : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1942 :     expr_ty p;
; 1943 :     if (!value) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  0001e	75 1a		 jne	 SHORT $LN4@Py_Attribu

; 1944 :         PyErr_SetString(PyExc_ValueError,
; 1945 :                         "field value is required for Attribute");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@HGGIECBD@field?5value?5is?5required?5for?5Attr@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1946 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 b0 00 00 00	 jmp	 $LN5@Py_Attribu
$LN4@Py_Attribu:

; 1947 :     }
; 1948 :     if (!attr) {

  0003a	48 83 7c 24 48
	00		 cmp	 QWORD PTR attr$[rsp], 0
  00040	75 1a		 jne	 SHORT $LN3@Py_Attribu

; 1949 :         PyErr_SetString(PyExc_ValueError,
; 1950 :                         "field attr is required for Attribute");

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@BPLMMPJC@field?5attr?5is?5required?5for?5Attri@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00050	e8 00 00 00 00	 call	 PyErr_SetString

; 1951 :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	e9 8e 00 00 00	 jmp	 $LN5@Py_Attribu
$LN3@Py_Attribu:

; 1952 :     }
; 1953 :     if (!ctx) {

  0005c	83 7c 24 50 00	 cmp	 DWORD PTR ctx$[rsp], 0
  00061	75 17		 jne	 SHORT $LN2@Py_Attribu

; 1954 :         PyErr_SetString(PyExc_ValueError,
; 1955 :                         "field ctx is required for Attribute");

  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@GFDAHIKH@field?5ctx?5is?5required?5for?5Attrib@
  0006a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00071	e8 00 00 00 00	 call	 PyErr_SetString

; 1956 :         return NULL;

  00076	33 c0		 xor	 eax, eax
  00078	eb 70		 jmp	 SHORT $LN5@Py_Attribu
$LN2@Py_Attribu:

; 1957 :     }
; 1958 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0007a	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0007f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00084	e8 00 00 00 00	 call	 PyArena_Malloc
  00089	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1959 :     if (!p)

  0008e	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00094	75 04		 jne	 SHORT $LN1@Py_Attribu

; 1960 :         return NULL;

  00096	33 c0		 xor	 eax, eax
  00098	eb 50		 jmp	 SHORT $LN5@Py_Attribu
$LN1@Py_Attribu:

; 1961 :     p->kind = Attribute_kind;

  0009a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009f	c7 00 14 00 00
	00		 mov	 DWORD PTR [rax], 20

; 1962 :     p->v.Attribute.value = value;

  000a5	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000aa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  000af	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1963 :     p->v.Attribute.attr = attr;

  000b3	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR attr$[rsp]
  000bd	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1964 :     p->v.Attribute.ctx = ctx;

  000c1	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000c6	8b 4c 24 50	 mov	 ecx, DWORD PTR ctx$[rsp]
  000ca	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 1965 :     p->lineno = lineno;

  000cd	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000d2	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  000d6	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1966 :     p->col_offset = col_offset;

  000d9	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000de	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000e2	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1967 :     return p;

  000e5	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN5@Py_Attribu:

; 1968 : }

  000ea	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ee	c3		 ret	 0
_Py_Attribute ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@MCNHNJCG@field?5ctx?5is?5required?5for?5Subscr@ ; `string'
PUBLIC	??_C@_0CG@MJNCMDLL@field?5slice?5is?5required?5for?5Subs@ ; `string'
PUBLIC	??_C@_0CG@NBIPODJC@field?5value?5is?5required?5for?5Subs@ ; `string'
PUBLIC	_Py_Subscript
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Subscript DD imagerel $LN7
	DD	imagerel $LN7+239
	DD	imagerel $unwind$_Py_Subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Subscript DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CE@MCNHNJCG@field?5ctx?5is?5required?5for?5Subscr@
CONST	SEGMENT
??_C@_0CE@MCNHNJCG@field?5ctx?5is?5required?5for?5Subscr@ DB 'field ctx i'
	DB	's required for Subscript', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MJNCMDLL@field?5slice?5is?5required?5for?5Subs@
CONST	SEGMENT
??_C@_0CG@MJNCMDLL@field?5slice?5is?5required?5for?5Subs@ DB 'field slice'
	DB	' is required for Subscript', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NBIPODJC@field?5value?5is?5required?5for?5Subs@
CONST	SEGMENT
??_C@_0CG@NBIPODJC@field?5value?5is?5required?5for?5Subs@ DB 'field value'
	DB	' is required for Subscript', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Subscript
_TEXT	SEGMENT
p$ = 32
value$ = 64
slice$ = 72
ctx$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_Subscript PROC					; COMDAT

; 1973 : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1974 :     expr_ty p;
; 1975 :     if (!value) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  0001e	75 1a		 jne	 SHORT $LN4@Py_Subscri

; 1976 :         PyErr_SetString(PyExc_ValueError,
; 1977 :                         "field value is required for Subscript");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@NBIPODJC@field?5value?5is?5required?5for?5Subs@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 1978 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 b0 00 00 00	 jmp	 $LN5@Py_Subscri
$LN4@Py_Subscri:

; 1979 :     }
; 1980 :     if (!slice) {

  0003a	48 83 7c 24 48
	00		 cmp	 QWORD PTR slice$[rsp], 0
  00040	75 1a		 jne	 SHORT $LN3@Py_Subscri

; 1981 :         PyErr_SetString(PyExc_ValueError,
; 1982 :                         "field slice is required for Subscript");

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@MJNCMDLL@field?5slice?5is?5required?5for?5Subs@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00050	e8 00 00 00 00	 call	 PyErr_SetString

; 1983 :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	e9 8e 00 00 00	 jmp	 $LN5@Py_Subscri
$LN3@Py_Subscri:

; 1984 :     }
; 1985 :     if (!ctx) {

  0005c	83 7c 24 50 00	 cmp	 DWORD PTR ctx$[rsp], 0
  00061	75 17		 jne	 SHORT $LN2@Py_Subscri

; 1986 :         PyErr_SetString(PyExc_ValueError,
; 1987 :                         "field ctx is required for Subscript");

  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@MCNHNJCG@field?5ctx?5is?5required?5for?5Subscr@
  0006a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00071	e8 00 00 00 00	 call	 PyErr_SetString

; 1988 :         return NULL;

  00076	33 c0		 xor	 eax, eax
  00078	eb 70		 jmp	 SHORT $LN5@Py_Subscri
$LN2@Py_Subscri:

; 1989 :     }
; 1990 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  0007a	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0007f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00084	e8 00 00 00 00	 call	 PyArena_Malloc
  00089	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1991 :     if (!p)

  0008e	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00094	75 04		 jne	 SHORT $LN1@Py_Subscri

; 1992 :         return NULL;

  00096	33 c0		 xor	 eax, eax
  00098	eb 50		 jmp	 SHORT $LN5@Py_Subscri
$LN1@Py_Subscri:

; 1993 :     p->kind = Subscript_kind;

  0009a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009f	c7 00 15 00 00
	00		 mov	 DWORD PTR [rax], 21

; 1994 :     p->v.Subscript.value = value;

  000a5	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000aa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  000af	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1995 :     p->v.Subscript.slice = slice;

  000b3	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR slice$[rsp]
  000bd	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1996 :     p->v.Subscript.ctx = ctx;

  000c1	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000c6	8b 4c 24 50	 mov	 ecx, DWORD PTR ctx$[rsp]
  000ca	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 1997 :     p->lineno = lineno;

  000cd	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000d2	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  000d6	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1998 :     p->col_offset = col_offset;

  000d9	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000de	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000e2	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1999 :     return p;

  000e5	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN5@Py_Subscri:

; 2000 : }

  000ea	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ee	c3		 ret	 0
_Py_Subscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@CPGFGGKA@field?5ctx?5is?5required?5for?5Starre@ ; `string'
PUBLIC	??_C@_0CE@ODFOICMJ@field?5value?5is?5required?5for?5Star@ ; `string'
PUBLIC	_Py_Starred
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Starred DD imagerel $LN6
	DD	imagerel $LN6+190
	DD	imagerel $unwind$_Py_Starred
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Starred DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0CC@CPGFGGKA@field?5ctx?5is?5required?5for?5Starre@
CONST	SEGMENT
??_C@_0CC@CPGFGGKA@field?5ctx?5is?5required?5for?5Starre@ DB 'field ctx i'
	DB	's required for Starred', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ODFOICMJ@field?5value?5is?5required?5for?5Star@
CONST	SEGMENT
??_C@_0CE@ODFOICMJ@field?5value?5is?5required?5for?5Star@ DB 'field value'
	DB	' is required for Starred', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Starred
_TEXT	SEGMENT
p$ = 32
value$ = 64
ctx$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_Starred PROC					; COMDAT

; 2005 : {

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2006 :     expr_ty p;
; 2007 :     if (!value) {

  00017	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  0001d	75 1a		 jne	 SHORT $LN3@Py_Starred

; 2008 :         PyErr_SetString(PyExc_ValueError,
; 2009 :                         "field value is required for Starred");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@ODFOICMJ@field?5value?5is?5required?5for?5Star@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 2010 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	e9 80 00 00 00	 jmp	 $LN4@Py_Starred
$LN3@Py_Starred:

; 2011 :     }
; 2012 :     if (!ctx) {

  00039	83 7c 24 48 00	 cmp	 DWORD PTR ctx$[rsp], 0
  0003e	75 17		 jne	 SHORT $LN2@Py_Starred

; 2013 :         PyErr_SetString(PyExc_ValueError,
; 2014 :                         "field ctx is required for Starred");

  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@CPGFGGKA@field?5ctx?5is?5required?5for?5Starre@
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004e	e8 00 00 00 00	 call	 PyErr_SetString

; 2015 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 62		 jmp	 SHORT $LN4@Py_Starred
$LN2@Py_Starred:

; 2016 :     }
; 2017 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00057	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0005c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00061	e8 00 00 00 00	 call	 PyArena_Malloc
  00066	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2018 :     if (!p)

  0006b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00071	75 04		 jne	 SHORT $LN1@Py_Starred

; 2019 :         return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	eb 42		 jmp	 SHORT $LN4@Py_Starred
$LN1@Py_Starred:

; 2020 :     p->kind = Starred_kind;

  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007c	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 2021 :     p->v.Starred.value = value;

  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00087	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  0008c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2022 :     p->v.Starred.ctx = ctx;

  00090	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00095	8b 4c 24 48	 mov	 ecx, DWORD PTR ctx$[rsp]
  00099	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 2023 :     p->lineno = lineno;

  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a1	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  000a5	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 2024 :     p->col_offset = col_offset;

  000a8	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000ad	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000b1	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 2025 :     return p;

  000b4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN4@Py_Starred:

; 2026 : }

  000b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bd	c3		 ret	 0
_Py_Starred ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@BOOKAOAN@field?5ctx?5is?5required?5for?5Name?$AA@ ; `string'
PUBLIC	??_C@_0BO@MHABBJCN@field?5id?5is?5required?5for?5Name?$AA@ ; `string'
PUBLIC	_Py_Name
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Name DD imagerel $LN6
	DD	imagerel $LN6+190
	DD	imagerel $unwind$_Py_Name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Name DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0BP@BOOKAOAN@field?5ctx?5is?5required?5for?5Name?$AA@
CONST	SEGMENT
??_C@_0BP@BOOKAOAN@field?5ctx?5is?5required?5for?5Name?$AA@ DB 'field ctx'
	DB	' is required for Name', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MHABBJCN@field?5id?5is?5required?5for?5Name?$AA@
CONST	SEGMENT
??_C@_0BO@MHABBJCN@field?5id?5is?5required?5for?5Name?$AA@ DB 'field id i'
	DB	's required for Name', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Name
_TEXT	SEGMENT
p$ = 32
id$ = 64
ctx$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_Name PROC						; COMDAT

; 2031 : {

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2032 :     expr_ty p;
; 2033 :     if (!id) {

  00017	48 83 7c 24 40
	00		 cmp	 QWORD PTR id$[rsp], 0
  0001d	75 1a		 jne	 SHORT $LN3@Py_Name

; 2034 :         PyErr_SetString(PyExc_ValueError,
; 2035 :                         "field id is required for Name");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@MHABBJCN@field?5id?5is?5required?5for?5Name?$AA@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 2036 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	e9 80 00 00 00	 jmp	 $LN4@Py_Name
$LN3@Py_Name:

; 2037 :     }
; 2038 :     if (!ctx) {

  00039	83 7c 24 48 00	 cmp	 DWORD PTR ctx$[rsp], 0
  0003e	75 17		 jne	 SHORT $LN2@Py_Name

; 2039 :         PyErr_SetString(PyExc_ValueError,
; 2040 :                         "field ctx is required for Name");

  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@BOOKAOAN@field?5ctx?5is?5required?5for?5Name?$AA@
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004e	e8 00 00 00 00	 call	 PyErr_SetString

; 2041 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 62		 jmp	 SHORT $LN4@Py_Name
$LN2@Py_Name:

; 2042 :     }
; 2043 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00057	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0005c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  00061	e8 00 00 00 00	 call	 PyArena_Malloc
  00066	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2044 :     if (!p)

  0006b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00071	75 04		 jne	 SHORT $LN1@Py_Name

; 2045 :         return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	eb 42		 jmp	 SHORT $LN4@Py_Name
$LN1@Py_Name:

; 2046 :     p->kind = Name_kind;

  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007c	c7 00 17 00 00
	00		 mov	 DWORD PTR [rax], 23

; 2047 :     p->v.Name.id = id;

  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00087	48 8b 4c 24 40	 mov	 rcx, QWORD PTR id$[rsp]
  0008c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2048 :     p->v.Name.ctx = ctx;

  00090	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00095	8b 4c 24 48	 mov	 ecx, DWORD PTR ctx$[rsp]
  00099	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 2049 :     p->lineno = lineno;

  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a1	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  000a5	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 2050 :     p->col_offset = col_offset;

  000a8	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000ad	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000b1	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 2051 :     return p;

  000b4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN4@Py_Name:

; 2052 : }

  000b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bd	c3		 ret	 0
_Py_Name ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@OEPPNIOI@field?5ctx?5is?5required?5for?5List?$AA@ ; `string'
PUBLIC	_Py_List
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_List DD imagerel $LN5
	DD	imagerel $LN5+156
	DD	imagerel $unwind$_Py_List
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_List DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0BP@OEPPNIOI@field?5ctx?5is?5required?5for?5List?$AA@
CONST	SEGMENT
??_C@_0BP@OEPPNIOI@field?5ctx?5is?5required?5for?5List?$AA@ DB 'field ctx'
	DB	' is required for List', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_List
_TEXT	SEGMENT
p$ = 32
elts$ = 64
ctx$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_List PROC						; COMDAT

; 2057 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2058 :     expr_ty p;
; 2059 :     if (!ctx) {

  00017	83 7c 24 48 00	 cmp	 DWORD PTR ctx$[rsp], 0
  0001c	75 17		 jne	 SHORT $LN2@Py_List

; 2060 :         PyErr_SetString(PyExc_ValueError,
; 2061 :                         "field ctx is required for List");

  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@OEPPNIOI@field?5ctx?5is?5required?5for?5List?$AA@
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	e8 00 00 00 00	 call	 PyErr_SetString

; 2062 :         return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	eb 62		 jmp	 SHORT $LN3@Py_List
$LN2@Py_List:

; 2063 :     }
; 2064 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00035	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  0003f	e8 00 00 00 00	 call	 PyArena_Malloc
  00044	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2065 :     if (!p)

  00049	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0004f	75 04		 jne	 SHORT $LN1@Py_List

; 2066 :         return NULL;

  00051	33 c0		 xor	 eax, eax
  00053	eb 42		 jmp	 SHORT $LN3@Py_List
$LN1@Py_List:

; 2067 :     p->kind = List_kind;

  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005a	c7 00 18 00 00
	00		 mov	 DWORD PTR [rax], 24

; 2068 :     p->v.List.elts = elts;

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00065	48 8b 4c 24 40	 mov	 rcx, QWORD PTR elts$[rsp]
  0006a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2069 :     p->v.List.ctx = ctx;

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00073	8b 4c 24 48	 mov	 ecx, DWORD PTR ctx$[rsp]
  00077	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 2070 :     p->lineno = lineno;

  0007a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007f	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  00083	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 2071 :     p->col_offset = col_offset;

  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008b	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  0008f	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 2072 :     return p;

  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_List:

; 2073 : }

  00097	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009b	c3		 ret	 0
_Py_List ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@PMKKKNCD@field?5ctx?5is?5required?5for?5Tuple?$AA@ ; `string'
PUBLIC	_Py_Tuple
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Tuple DD imagerel $LN5
	DD	imagerel $LN5+156
	DD	imagerel $unwind$_Py_Tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Tuple DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0CA@PMKKKNCD@field?5ctx?5is?5required?5for?5Tuple?$AA@
CONST	SEGMENT
??_C@_0CA@PMKKKNCD@field?5ctx?5is?5required?5for?5Tuple?$AA@ DB 'field ct'
	DB	'x is required for Tuple', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Tuple
_TEXT	SEGMENT
p$ = 32
elts$ = 64
ctx$ = 72
lineno$ = 80
col_offset$ = 88
arena$ = 96
_Py_Tuple PROC						; COMDAT

; 2078 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2079 :     expr_ty p;
; 2080 :     if (!ctx) {

  00017	83 7c 24 48 00	 cmp	 DWORD PTR ctx$[rsp], 0
  0001c	75 17		 jne	 SHORT $LN2@Py_Tuple

; 2081 :         PyErr_SetString(PyExc_ValueError,
; 2082 :                         "field ctx is required for Tuple");

  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@PMKKKNCD@field?5ctx?5is?5required?5for?5Tuple?$AA@
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	e8 00 00 00 00	 call	 PyErr_SetString

; 2083 :         return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	eb 62		 jmp	 SHORT $LN3@Py_Tuple
$LN2@Py_Tuple:

; 2084 :     }
; 2085 :     p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));

  00035	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  0003a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR arena$[rsp]
  0003f	e8 00 00 00 00	 call	 PyArena_Malloc
  00044	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2086 :     if (!p)

  00049	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0004f	75 04		 jne	 SHORT $LN1@Py_Tuple

; 2087 :         return NULL;

  00051	33 c0		 xor	 eax, eax
  00053	eb 42		 jmp	 SHORT $LN3@Py_Tuple
$LN1@Py_Tuple:

; 2088 :     p->kind = Tuple_kind;

  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005a	c7 00 19 00 00
	00		 mov	 DWORD PTR [rax], 25

; 2089 :     p->v.Tuple.elts = elts;

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00065	48 8b 4c 24 40	 mov	 rcx, QWORD PTR elts$[rsp]
  0006a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2090 :     p->v.Tuple.ctx = ctx;

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00073	8b 4c 24 48	 mov	 ecx, DWORD PTR ctx$[rsp]
  00077	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 2091 :     p->lineno = lineno;

  0007a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007f	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  00083	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 2092 :     p->col_offset = col_offset;

  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008b	8b 4c 24 58	 mov	 ecx, DWORD PTR col_offset$[rsp]
  0008f	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 2093 :     return p;

  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Tuple:

; 2094 : }

  00097	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009b	c3		 ret	 0
_Py_Tuple ENDP
_TEXT	ENDS
PUBLIC	_Py_Slice
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Slice DD imagerel $LN4
	DD	imagerel $LN4+119
	DD	imagerel $unwind$_Py_Slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Slice DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_Slice
_TEXT	SEGMENT
p$ = 32
lower$ = 64
upper$ = 72
step$ = 80
arena$ = 88
_Py_Slice PROC						; COMDAT

; 2098 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2099 :     slice_ty p;
; 2100 :     p = (slice_ty)PyArena_Malloc(arena, sizeof(*p));

  00018	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00022	e8 00 00 00 00	 call	 PyArena_Malloc
  00027	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2101 :     if (!p)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00032	75 04		 jne	 SHORT $LN1@Py_Slice

; 2102 :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	eb 3a		 jmp	 SHORT $LN2@Py_Slice
$LN1@Py_Slice:

; 2103 :     p->kind = Slice_kind;

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003d	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 2104 :     p->v.Slice.lower = lower;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lower$[rsp]
  0004d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2105 :     p->v.Slice.upper = upper;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00056	48 8b 4c 24 48	 mov	 rcx, QWORD PTR upper$[rsp]
  0005b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2106 :     p->v.Slice.step = step;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00064	48 8b 4c 24 50	 mov	 rcx, QWORD PTR step$[rsp]
  00069	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2107 :     return p;

  0006d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_Slice:

; 2108 : }

  00072	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00076	c3		 ret	 0
_Py_Slice ENDP
_TEXT	ENDS
PUBLIC	_Py_ExtSlice
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ExtSlice DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$_Py_ExtSlice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ExtSlice DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_ExtSlice
_TEXT	SEGMENT
p$ = 32
dims$ = 64
arena$ = 72
_Py_ExtSlice PROC					; COMDAT

; 2112 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2113 :     slice_ty p;
; 2114 :     p = (slice_ty)PyArena_Malloc(arena, sizeof(*p));

  0000e	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arena$[rsp]
  00018	e8 00 00 00 00	 call	 PyArena_Malloc
  0001d	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2115 :     if (!p)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00028	75 04		 jne	 SHORT $LN1@Py_ExtSlic

; 2116 :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 1e		 jmp	 SHORT $LN2@Py_ExtSlic
$LN1@Py_ExtSlic:

; 2117 :     p->kind = ExtSlice_kind;

  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00033	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 2118 :     p->v.ExtSlice.dims = dims;

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dims$[rsp]
  00043	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2119 :     return p;

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_ExtSlic:

; 2120 : }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
_Py_ExtSlice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@DANDMJEF@field?5value?5is?5required?5for?5Inde@ ; `string'
PUBLIC	_Py_Index
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Index DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$_Py_Index
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Index DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CC@DANDMJEF@field?5value?5is?5required?5for?5Inde@
CONST	SEGMENT
??_C@_0CC@DANDMJEF@field?5value?5is?5required?5for?5Inde@ DB 'field value'
	DB	' is required for Index', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Index
_TEXT	SEGMENT
p$ = 32
value$ = 64
arena$ = 72
_Py_Index PROC						; COMDAT

; 2124 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2125 :     slice_ty p;
; 2126 :     if (!value) {

  0000e	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  00014	75 17		 jne	 SHORT $LN2@Py_Index

; 2127 :         PyErr_SetString(PyExc_ValueError,
; 2128 :                         "field value is required for Index");

  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@DANDMJEF@field?5value?5is?5required?5for?5Inde@
  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00024	e8 00 00 00 00	 call	 PyErr_SetString

; 2129 :         return NULL;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 3e		 jmp	 SHORT $LN3@Py_Index
$LN2@Py_Index:

; 2130 :     }
; 2131 :     p = (slice_ty)PyArena_Malloc(arena, sizeof(*p));

  0002d	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00032	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arena$[rsp]
  00037	e8 00 00 00 00	 call	 PyArena_Malloc
  0003c	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2132 :     if (!p)

  00041	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00047	75 04		 jne	 SHORT $LN1@Py_Index

; 2133 :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 1e		 jmp	 SHORT $LN3@Py_Index
$LN1@Py_Index:

; 2134 :     p->kind = Index_kind;

  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00052	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 2135 :     p->v.Index.value = value;

  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  00062	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2136 :     return p;

  00066	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_Index:

; 2137 : }

  0006b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006f	c3		 ret	 0
_Py_Index ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@GMPBFBMA@field?5iter?5is?5required?5for?5compr@ ; `string'
PUBLIC	??_C@_0CL@HFHKBLHJ@field?5target?5is?5required?5for?5com@ ; `string'
PUBLIC	_Py_comprehension
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_comprehension DD imagerel $LN6
	DD	imagerel $LN6+169
	DD	imagerel $unwind$_Py_comprehension
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_comprehension DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0CJ@GMPBFBMA@field?5iter?5is?5required?5for?5compr@
CONST	SEGMENT
??_C@_0CJ@GMPBFBMA@field?5iter?5is?5required?5for?5compr@ DB 'field iter '
	DB	'is required for comprehension', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HFHKBLHJ@field?5target?5is?5required?5for?5com@
CONST	SEGMENT
??_C@_0CL@HFHKBLHJ@field?5target?5is?5required?5for?5com@ DB 'field targe'
	DB	't is required for comprehension', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_comprehension
_TEXT	SEGMENT
p$ = 32
target$ = 64
iter$ = 72
ifs$ = 80
arena$ = 88
_Py_comprehension PROC					; COMDAT

; 2141 : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2142 :     comprehension_ty p;
; 2143 :     if (!target) {

  00018	48 83 7c 24 40
	00		 cmp	 QWORD PTR target$[rsp], 0
  0001e	75 17		 jne	 SHORT $LN3@Py_compreh

; 2144 :         PyErr_SetString(PyExc_ValueError,
; 2145 :                         "field target is required for comprehension");

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HFHKBLHJ@field?5target?5is?5required?5for?5com@
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002e	e8 00 00 00 00	 call	 PyErr_SetString

; 2146 :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	eb 6d		 jmp	 SHORT $LN4@Py_compreh
$LN3@Py_compreh:

; 2147 :     }
; 2148 :     if (!iter) {

  00037	48 83 7c 24 48
	00		 cmp	 QWORD PTR iter$[rsp], 0
  0003d	75 17		 jne	 SHORT $LN2@Py_compreh

; 2149 :         PyErr_SetString(PyExc_ValueError,
; 2150 :                         "field iter is required for comprehension");

  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@GMPBFBMA@field?5iter?5is?5required?5for?5compr@
  00046	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004d	e8 00 00 00 00	 call	 PyErr_SetString

; 2151 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 4e		 jmp	 SHORT $LN4@Py_compreh
$LN2@Py_compreh:

; 2152 :     }
; 2153 :     p = (comprehension_ty)PyArena_Malloc(arena, sizeof(*p));

  00056	ba 18 00 00 00	 mov	 edx, 24
  0005b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  00060	e8 00 00 00 00	 call	 PyArena_Malloc
  00065	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2154 :     if (!p)

  0006a	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00070	75 04		 jne	 SHORT $LN1@Py_compreh

; 2155 :         return NULL;

  00072	33 c0		 xor	 eax, eax
  00074	eb 2e		 jmp	 SHORT $LN4@Py_compreh
$LN1@Py_compreh:

; 2156 :     p->target = target;

  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR target$[rsp]
  00080	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2157 :     p->iter = iter;

  00083	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00088	48 8b 4c 24 48	 mov	 rcx, QWORD PTR iter$[rsp]
  0008d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2158 :     p->ifs = ifs;

  00091	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00096	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ifs$[rsp]
  0009b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2159 :     return p;

  0009f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN4@Py_compreh:

; 2160 : }

  000a4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a8	c3		 ret	 0
_Py_comprehension ENDP
_TEXT	ENDS
PUBLIC	_Py_ExceptHandler
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ExceptHandler DD imagerel $LN4
	DD	imagerel $LN4+143
	DD	imagerel $unwind$_Py_ExceptHandler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ExceptHandler DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_ExceptHandler
_TEXT	SEGMENT
p$ = 32
type$ = 64
name$ = 72
body$ = 80
lineno$ = 88
col_offset$ = 96
arena$ = 104
_Py_ExceptHandler PROC					; COMDAT

; 2165 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2166 :     excepthandler_ty p;
; 2167 :     p = (excepthandler_ty)PyArena_Malloc(arena, sizeof(*p));

  00018	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  0001d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00022	e8 00 00 00 00	 call	 PyArena_Malloc
  00027	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2168 :     if (!p)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00032	75 04		 jne	 SHORT $LN1@Py_ExceptH

; 2169 :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	eb 52		 jmp	 SHORT $LN2@Py_ExceptH
$LN1@Py_ExceptH:

; 2170 :     p->kind = ExceptHandler_kind;

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003d	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 2171 :     p->v.ExceptHandler.type = type;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0004d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2172 :     p->v.ExceptHandler.name = name;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00056	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  0005b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2173 :     p->v.ExceptHandler.body = body;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00064	48 8b 4c 24 50	 mov	 rcx, QWORD PTR body$[rsp]
  00069	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2174 :     p->lineno = lineno;

  0006d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00072	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  00076	89 48 20	 mov	 DWORD PTR [rax+32], ecx

; 2175 :     p->col_offset = col_offset;

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0007e	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00082	89 48 24	 mov	 DWORD PTR [rax+36], ecx

; 2176 :     return p;

  00085	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_ExceptH:

; 2177 : }

  0008a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008e	c3		 ret	 0
_Py_ExceptHandler ENDP
_TEXT	ENDS
PUBLIC	_Py_arguments
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_arguments DD imagerel $LN4
	DD	imagerel $LN4+180
	DD	imagerel $unwind$_Py_arguments
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_arguments DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_arguments
_TEXT	SEGMENT
p$ = 32
args$ = 64
vararg$ = 72
varargannotation$ = 80
kwonlyargs$ = 88
kwarg$ = 96
kwargannotation$ = 104
defaults$ = 112
kw_defaults$ = 120
arena$ = 128
_Py_arguments PROC					; COMDAT

; 2183 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2184 :     arguments_ty p;
; 2185 :     p = (arguments_ty)PyArena_Malloc(arena, sizeof(*p));

  00018	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0001d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR arena$[rsp]
  00025	e8 00 00 00 00	 call	 PyArena_Malloc
  0002a	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2186 :     if (!p)

  0002f	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00035	75 04		 jne	 SHORT $LN1@Py_argumen

; 2187 :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	eb 74		 jmp	 SHORT $LN2@Py_argumen
$LN1@Py_argumen:

; 2188 :     p->args = args;

  0003b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR args$[rsp]
  00045	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2189 :     p->vararg = vararg;

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0004d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR vararg$[rsp]
  00052	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2190 :     p->varargannotation = varargannotation;

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR varargannotation$[rsp]
  00060	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2191 :     p->kwonlyargs = kwonlyargs;

  00064	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00069	48 8b 4c 24 58	 mov	 rcx, QWORD PTR kwonlyargs$[rsp]
  0006e	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2192 :     p->kwarg = kwarg;

  00072	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00077	48 8b 4c 24 60	 mov	 rcx, QWORD PTR kwarg$[rsp]
  0007c	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 2193 :     p->kwargannotation = kwargannotation;

  00080	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00085	48 8b 4c 24 68	 mov	 rcx, QWORD PTR kwargannotation$[rsp]
  0008a	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 2194 :     p->defaults = defaults;

  0008e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00093	48 8b 4c 24 70	 mov	 rcx, QWORD PTR defaults$[rsp]
  00098	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 2195 :     p->kw_defaults = kw_defaults;

  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR kw_defaults$[rsp]
  000a6	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 2196 :     return p;

  000aa	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN2@Py_argumen:

; 2197 : }

  000af	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b3	c3		 ret	 0
_Py_arguments ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@ILGGFGPK@field?5arg?5is?5required?5for?5arg?$AA@ ; `string'
PUBLIC	_Py_arg
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_arg DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$_Py_arg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_arg DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BO@ILGGFGPK@field?5arg?5is?5required?5for?5arg?$AA@
CONST	SEGMENT
??_C@_0BO@ILGGFGPK@field?5arg?5is?5required?5for?5arg?$AA@ DB 'field arg '
	DB	'is required for arg', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_arg
_TEXT	SEGMENT
p$ = 32
arg$ = 64
annotation$ = 72
arena$ = 80
_Py_arg	PROC						; COMDAT

; 2201 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2202 :     arg_ty p;
; 2203 :     if (!arg) {

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR arg$[rsp], 0
  00019	75 17		 jne	 SHORT $LN2@Py_arg

; 2204 :         PyErr_SetString(PyExc_ValueError,
; 2205 :                         "field arg is required for arg");

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@ILGGFGPK@field?5arg?5is?5required?5for?5arg?$AA@
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00029	e8 00 00 00 00	 call	 PyErr_SetString

; 2206 :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	eb 40		 jmp	 SHORT $LN3@Py_arg
$LN2@Py_arg:

; 2207 :     }
; 2208 :     p = (arg_ty)PyArena_Malloc(arena, sizeof(*p));

  00032	ba 10 00 00 00	 mov	 edx, 16
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0003c	e8 00 00 00 00	 call	 PyArena_Malloc
  00041	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2209 :     if (!p)

  00046	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0004c	75 04		 jne	 SHORT $LN1@Py_arg

; 2210 :         return NULL;

  0004e	33 c0		 xor	 eax, eax
  00050	eb 20		 jmp	 SHORT $LN3@Py_arg
$LN1@Py_arg:

; 2211 :     p->arg = arg;

  00052	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arg$[rsp]
  0005c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2212 :     p->annotation = annotation;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00064	48 8b 4c 24 48	 mov	 rcx, QWORD PTR annotation$[rsp]
  00069	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2213 :     return p;

  0006d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_arg:

; 2214 : }

  00072	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00076	c3		 ret	 0
_Py_arg	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@OIKAGIEK@field?5value?5is?5required?5for?5keyw@ ; `string'
PUBLIC	??_C@_0CC@LMBBCGDM@field?5arg?5is?5required?5for?5keywor@ ; `string'
PUBLIC	_Py_keyword
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_keyword DD imagerel $LN6
	DD	imagerel $LN6+150
	DD	imagerel $unwind$_Py_keyword
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_keyword DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CE@OIKAGIEK@field?5value?5is?5required?5for?5keyw@
CONST	SEGMENT
??_C@_0CE@OIKAGIEK@field?5value?5is?5required?5for?5keyw@ DB 'field value'
	DB	' is required for keyword', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LMBBCGDM@field?5arg?5is?5required?5for?5keywor@
CONST	SEGMENT
??_C@_0CC@LMBBCGDM@field?5arg?5is?5required?5for?5keywor@ DB 'field arg i'
	DB	's required for keyword', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_keyword
_TEXT	SEGMENT
p$ = 32
arg$ = 64
value$ = 72
arena$ = 80
_Py_keyword PROC					; COMDAT

; 2218 : {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2219 :     keyword_ty p;
; 2220 :     if (!arg) {

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR arg$[rsp], 0
  00019	75 17		 jne	 SHORT $LN3@Py_keyword

; 2221 :         PyErr_SetString(PyExc_ValueError,
; 2222 :                         "field arg is required for keyword");

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@LMBBCGDM@field?5arg?5is?5required?5for?5keywor@
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00029	e8 00 00 00 00	 call	 PyErr_SetString

; 2223 :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	eb 5f		 jmp	 SHORT $LN4@Py_keyword
$LN3@Py_keyword:

; 2224 :     }
; 2225 :     if (!value) {

  00032	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00038	75 17		 jne	 SHORT $LN2@Py_keyword

; 2226 :         PyErr_SetString(PyExc_ValueError,
; 2227 :                         "field value is required for keyword");

  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@OIKAGIEK@field?5value?5is?5required?5for?5keyw@
  00041	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00048	e8 00 00 00 00	 call	 PyErr_SetString

; 2228 :         return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	eb 40		 jmp	 SHORT $LN4@Py_keyword
$LN2@Py_keyword:

; 2229 :     }
; 2230 :     p = (keyword_ty)PyArena_Malloc(arena, sizeof(*p));

  00051	ba 10 00 00 00	 mov	 edx, 16
  00056	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0005b	e8 00 00 00 00	 call	 PyArena_Malloc
  00060	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2231 :     if (!p)

  00065	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0006b	75 04		 jne	 SHORT $LN1@Py_keyword

; 2232 :         return NULL;

  0006d	33 c0		 xor	 eax, eax
  0006f	eb 20		 jmp	 SHORT $LN4@Py_keyword
$LN1@Py_keyword:

; 2233 :     p->arg = arg;

  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arg$[rsp]
  0007b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2234 :     p->value = value;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00083	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  00088	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2235 :     return p;

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN4@Py_keyword:

; 2236 : }

  00091	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00095	c3		 ret	 0
_Py_keyword ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@BLGPEBLD@field?5name?5is?5required?5for?5alias@ ; `string'
PUBLIC	_Py_alias
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_alias DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$_Py_alias
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_alias DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CB@BLGPEBLD@field?5name?5is?5required?5for?5alias@
CONST	SEGMENT
??_C@_0CB@BLGPEBLD@field?5name?5is?5required?5for?5alias@ DB 'field name '
	DB	'is required for alias', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_alias
_TEXT	SEGMENT
p$ = 32
name$ = 64
asname$ = 72
arena$ = 80
_Py_alias PROC						; COMDAT

; 2240 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2241 :     alias_ty p;
; 2242 :     if (!name) {

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR name$[rsp], 0
  00019	75 17		 jne	 SHORT $LN2@Py_alias

; 2243 :         PyErr_SetString(PyExc_ValueError,
; 2244 :                         "field name is required for alias");

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@BLGPEBLD@field?5name?5is?5required?5for?5alias@
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00029	e8 00 00 00 00	 call	 PyErr_SetString

; 2245 :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	eb 40		 jmp	 SHORT $LN3@Py_alias
$LN2@Py_alias:

; 2246 :     }
; 2247 :     p = (alias_ty)PyArena_Malloc(arena, sizeof(*p));

  00032	ba 10 00 00 00	 mov	 edx, 16
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0003c	e8 00 00 00 00	 call	 PyArena_Malloc
  00041	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2248 :     if (!p)

  00046	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0004c	75 04		 jne	 SHORT $LN1@Py_alias

; 2249 :         return NULL;

  0004e	33 c0		 xor	 eax, eax
  00050	eb 20		 jmp	 SHORT $LN3@Py_alias
$LN1@Py_alias:

; 2250 :     p->name = name;

  00052	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0005c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2251 :     p->asname = asname;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00064	48 8b 4c 24 48	 mov	 rcx, QWORD PTR asname$[rsp]
  00069	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2252 :     return p;

  0006d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_alias:

; 2253 : }

  00072	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00076	c3		 ret	 0
_Py_alias ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@OMGIOCCH@field?5context_expr?5is?5required?5f@ ; `string'
PUBLIC	_Py_withitem
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_withitem DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$_Py_withitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_withitem DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CM@OMGIOCCH@field?5context_expr?5is?5required?5f@
CONST	SEGMENT
??_C@_0CM@OMGIOCCH@field?5context_expr?5is?5required?5f@ DB 'field contex'
	DB	't_expr is required for withitem', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_withitem
_TEXT	SEGMENT
p$ = 32
context_expr$ = 64
optional_vars$ = 72
arena$ = 80
_Py_withitem PROC					; COMDAT

; 2257 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2258 :     withitem_ty p;
; 2259 :     if (!context_expr) {

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR context_expr$[rsp], 0
  00019	75 17		 jne	 SHORT $LN2@Py_withite

; 2260 :         PyErr_SetString(PyExc_ValueError,
; 2261 :                         "field context_expr is required for withitem");

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@OMGIOCCH@field?5context_expr?5is?5required?5f@
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00029	e8 00 00 00 00	 call	 PyErr_SetString

; 2262 :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	eb 40		 jmp	 SHORT $LN3@Py_withite
$LN2@Py_withite:

; 2263 :     }
; 2264 :     p = (withitem_ty)PyArena_Malloc(arena, sizeof(*p));

  00032	ba 10 00 00 00	 mov	 edx, 16
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  0003c	e8 00 00 00 00	 call	 PyArena_Malloc
  00041	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2265 :     if (!p)

  00046	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0004c	75 04		 jne	 SHORT $LN1@Py_withite

; 2266 :         return NULL;

  0004e	33 c0		 xor	 eax, eax
  00050	eb 20		 jmp	 SHORT $LN3@Py_withite
$LN1@Py_withite:

; 2267 :     p->context_expr = context_expr;

  00052	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR context_expr$[rsp]
  0005c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2268 :     p->optional_vars = optional_vars;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00064	48 8b 4c 24 48	 mov	 rcx, QWORD PTR optional_vars$[rsp]
  00069	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2269 :     return p;

  0006d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@Py_withite:

; 2270 : }

  00072	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00076	c3		 ret	 0
_Py_withitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_08FACALJAE@withitem?$AA@			; `string'
PUBLIC	??_C@_05NKHOCLEE@alias?$AA@			; `string'
PUBLIC	??_C@_07JMKMGKCH@keyword?$AA@			; `string'
PUBLIC	??_C@_09PBNAMLIK@arguments?$AA@			; `string'
PUBLIC	??_C@_0O@IFPAFICE@ExceptHandler?$AA@		; `string'
PUBLIC	??_C@_0O@LBOCECKK@excepthandler?$AA@		; `string'
PUBLIC	??_C@_0O@PDDLNDDO@comprehension?$AA@		; `string'
PUBLIC	??_C@_05GFBCHB@NotIn?$AA@			; `string'
PUBLIC	??_C@_02IEILNGIL@In?$AA@			; `string'
PUBLIC	??_C@_05KLALIAAG@IsNot?$AA@			; `string'
PUBLIC	??_C@_02HLOHLKJH@Is?$AA@			; `string'
PUBLIC	??_C@_03GIODLKL@GtE?$AA@			; `string'
PUBLIC	??_C@_02DODIABFK@Gt?$AA@			; `string'
PUBLIC	??_C@_03NBIPLMKK@LtE?$AA@			; `string'
PUBLIC	??_C@_02DCGNOOLL@Lt?$AA@			; `string'
PUBLIC	??_C@_05MECFOFIL@NotEq?$AA@			; `string'
PUBLIC	??_C@_02EAMLCBHB@Eq?$AA@			; `string'
PUBLIC	??_C@_05KGHEMFCD@cmpop?$AA@			; `string'
PUBLIC	??_C@_04BFGHELIL@USub?$AA@			; `string'
PUBLIC	??_C@_04KEMJLKFO@UAdd?$AA@			; `string'
PUBLIC	??_C@_03KNKIDPAC@Not?$AA@			; `string'
PUBLIC	??_C@_06OHLCGMJD@Invert?$AA@			; `string'
PUBLIC	??_C@_07JPNNPNHH@unaryop?$AA@			; `string'
PUBLIC	??_C@_08BOGBPHLB@FloorDiv?$AA@			; `string'
PUBLIC	??_C@_06PCNOCLJN@BitAnd?$AA@			; `string'
PUBLIC	??_C@_06MCJFOMGI@BitXor?$AA@			; `string'
PUBLIC	??_C@_05BKBNAGEF@BitOr?$AA@			; `string'
PUBLIC	??_C@_06LEKGCNCD@RShift?$AA@			; `string'
PUBLIC	??_C@_06IDEHMKLA@LShift?$AA@			; `string'
PUBLIC	??_C@_03DGEDEMGN@Pow?$AA@			; `string'
PUBLIC	??_C@_03PFNPICLN@Mod?$AA@			; `string'
PUBLIC	??_C@_03PEKOMBFG@Div?$AA@			; `string'
PUBLIC	??_C@_04MPMBEKAC@Mult?$AA@			; `string'
PUBLIC	??_C@_03CPCCDDB@Sub?$AA@			; `string'
PUBLIC	??_C@_03LDFMNCOE@Add?$AA@			; `string'
PUBLIC	??_C@_08LHJFAFGD@operator?$AA@			; `string'
PUBLIC	??_C@_02GGHBPHGE@Or?$AA@			; `string'
PUBLIC	??_C@_03LOMLFHDC@And?$AA@			; `string'
PUBLIC	??_C@_06IBDOJNAO@boolop?$AA@			; `string'
PUBLIC	??_C@_05FNNGFGLF@Index?$AA@			; `string'
PUBLIC	??_C@_08CIIMGBAD@ExtSlice?$AA@			; `string'
PUBLIC	??_C@_05IMNAOMFL@Slice?$AA@			; `string'
PUBLIC	??_C@_05LOJBNELM@Param?$AA@			; `string'
PUBLIC	??_C@_08NAEMOJFF@AugStore?$AA@			; `string'
PUBLIC	??_C@_07GCIJHPCC@AugLoad?$AA@			; `string'
PUBLIC	??_C@_03ENJJMCOJ@Del?$AA@			; `string'
PUBLIC	??_C@_05OEMPKGID@Store?$AA@			; `string'
PUBLIC	??_C@_04IPBPFFEL@Load?$AA@			; `string'
PUBLIC	??_C@_0N@GABLJPJB@expr_context?$AA@		; `string'
PUBLIC	??_C@_05NKGIHGDI@Tuple?$AA@			; `string'
PUBLIC	??_C@_04PPBEGPNI@List?$AA@			; `string'
PUBLIC	??_C@_04FABLJDN@Name?$AA@			; `string'
PUBLIC	??_C@_07JHFCIAKE@Starred?$AA@			; `string'
PUBLIC	??_C@_09OPNCODFI@Subscript?$AA@			; `string'
PUBLIC	??_C@_09EIDFECNJ@Attribute?$AA@			; `string'
PUBLIC	??_C@_08KKBGFFMJ@Ellipsis?$AA@			; `string'
PUBLIC	??_C@_05FGDMGDLA@Bytes?$AA@			; `string'
PUBLIC	??_C@_03EJPCFLFH@Str?$AA@			; `string'
PUBLIC	??_C@_03CHBJLALM@Num?$AA@			; `string'
PUBLIC	??_C@_04CNJBKMPC@Call?$AA@			; `string'
PUBLIC	??_C@_07MBOMJGGF@Compare?$AA@			; `string'
PUBLIC	??_C@_09GLJBJEPP@YieldFrom?$AA@			; `string'
PUBLIC	??_C@_05LNDKIJIJ@Yield?$AA@			; `string'
PUBLIC	??_C@_0N@MMHMBOOD@GeneratorExp?$AA@		; `string'
PUBLIC	??_C@_08GMOHPPCM@DictComp?$AA@			; `string'
PUBLIC	??_C@_07BLGPBMGP@SetComp?$AA@			; `string'
PUBLIC	??_C@_08LAOBMBPK@ListComp?$AA@			; `string'
PUBLIC	??_C@_03CEMDFJG@Set?$AA@			; `string'
PUBLIC	??_C@_04NDECIHGJ@Dict?$AA@			; `string'
PUBLIC	??_C@_05KJAPGPAE@IfExp?$AA@			; `string'
PUBLIC	??_C@_06OBCFFGBN@Lambda?$AA@			; `string'
PUBLIC	??_C@_07FOOGNJMB@UnaryOp?$AA@			; `string'
PUBLIC	??_C@_05BHIPNDDM@BinOp?$AA@			; `string'
PUBLIC	??_C@_06HGMOOCHC@BoolOp?$AA@			; `string'
PUBLIC	??_C@_04IPHMALII@expr?$AA@			; `string'
PUBLIC	??_C@_08LJHDLOLO@Continue?$AA@			; `string'
PUBLIC	??_C@_05EMFLFCNO@Break?$AA@			; `string'
PUBLIC	??_C@_04NAPBKLHD@Pass?$AA@			; `string'
PUBLIC	??_C@_04EOLNCEIM@Expr?$AA@			; `string'
PUBLIC	??_C@_08BAHOEEIH@Nonlocal?$AA@			; `string'
PUBLIC	??_C@_06JGBJPOPP@Global?$AA@			; `string'
PUBLIC	??_C@_0L@IKBFEFKH@ImportFrom?$AA@		; `string'
PUBLIC	??_C@_06IBNLALPJ@Import?$AA@			; `string'
PUBLIC	??_C@_06KDPFLMMB@Assert?$AA@			; `string'
PUBLIC	??_C@_03DDFMMGJH@Try?$AA@			; `string'
PUBLIC	??_C@_05KDDKFIDP@Raise?$AA@			; `string'
PUBLIC	??_C@_04LBMICJD@With?$AA@			; `string'
PUBLIC	??_C@_02EMFCFMID@If?$AA@			; `string'
PUBLIC	??_C@_05OJJNEPLA@While?$AA@			; `string'
PUBLIC	??_C@_03DOEGLAGL@For?$AA@			; `string'
PUBLIC	??_C@_09CMGHGMJH@AugAssign?$AA@			; `string'
PUBLIC	??_C@_06EDODJIDJ@Assign?$AA@			; `string'
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	??_C@_06HCFIKKEA@Return?$AA@			; `string'
PUBLIC	??_C@_08OGFMJMG@ClassDef?$AA@			; `string'
PUBLIC	??_C@_0M@POJILEOM@FunctionDef?$AA@		; `string'
PUBLIC	??_C@_04GIKOEBLH@stmt?$AA@			; `string'
PUBLIC	??_C@_05PIEJKMFN@Suite?$AA@			; `string'
PUBLIC	??_C@_0L@NMLOJPGF@Expression?$AA@		; `string'
PUBLIC	??_C@_0M@INEKDBAI@Interactive?$AA@		; `string'
PUBLIC	??_C@_06NHPJKFDC@Module?$AA@			; `string'
PUBLIC	??_C@_03FFONCNID@mod?$AA@			; `string'
PUBLIC	??_C@_0O@LJOBGFGA@PyCF_ONLY_AST?$AA@		; `string'
PUBLIC	??_C@_03ENDOBHAC@AST?$AA@			; `string'
PUBLIC	PyInit__ast
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
_BSS	SEGMENT
withitem_type DQ 01H DUP (?)
alias_type DQ	01H DUP (?)
keyword_type DQ	01H DUP (?)
arg_type DQ	01H DUP (?)
arguments_type DQ 01H DUP (?)
ExceptHandler_type DQ 01H DUP (?)
excepthandler_type DQ 01H DUP (?)
comprehension_type DQ 01H DUP (?)
NotIn_type DQ	01H DUP (?)
In_type	DQ	01H DUP (?)
IsNot_type DQ	01H DUP (?)
Is_type	DQ	01H DUP (?)
GtE_type DQ	01H DUP (?)
Gt_type	DQ	01H DUP (?)
LtE_type DQ	01H DUP (?)
Lt_type	DQ	01H DUP (?)
NotEq_type DQ	01H DUP (?)
Eq_type	DQ	01H DUP (?)
cmpop_type DQ	01H DUP (?)
USub_type DQ	01H DUP (?)
UAdd_type DQ	01H DUP (?)
Not_type DQ	01H DUP (?)
Invert_type DQ	01H DUP (?)
unaryop_type DQ	01H DUP (?)
FloorDiv_type DQ 01H DUP (?)
BitAnd_type DQ	01H DUP (?)
BitXor_type DQ	01H DUP (?)
BitOr_type DQ	01H DUP (?)
RShift_type DQ	01H DUP (?)
LShift_type DQ	01H DUP (?)
Pow_type DQ	01H DUP (?)
Mod_type DQ	01H DUP (?)
Div_type DQ	01H DUP (?)
Mult_type DQ	01H DUP (?)
Sub_type DQ	01H DUP (?)
Add_type DQ	01H DUP (?)
operator_type DQ 01H DUP (?)
Or_type	DQ	01H DUP (?)
And_type DQ	01H DUP (?)
boolop_type DQ	01H DUP (?)
Index_type DQ	01H DUP (?)
ExtSlice_type DQ 01H DUP (?)
Slice_type DQ	01H DUP (?)
slice_type DQ	01H DUP (?)
Param_type DQ	01H DUP (?)
AugStore_type DQ 01H DUP (?)
AugLoad_type DQ	01H DUP (?)
Del_type DQ	01H DUP (?)
Store_type DQ	01H DUP (?)
Load_type DQ	01H DUP (?)
expr_context_type DQ 01H DUP (?)
Tuple_type DQ	01H DUP (?)
List_type DQ	01H DUP (?)
Name_type DQ	01H DUP (?)
Starred_type DQ	01H DUP (?)
Subscript_type DQ 01H DUP (?)
Attribute_type DQ 01H DUP (?)
Ellipsis_type DQ 01H DUP (?)
Bytes_type DQ	01H DUP (?)
Str_type DQ	01H DUP (?)
Num_type DQ	01H DUP (?)
Call_type DQ	01H DUP (?)
Compare_type DQ	01H DUP (?)
YieldFrom_type DQ 01H DUP (?)
Yield_type DQ	01H DUP (?)
GeneratorExp_type DQ 01H DUP (?)
DictComp_type DQ 01H DUP (?)
SetComp_type DQ	01H DUP (?)
ListComp_type DQ 01H DUP (?)
Set_type DQ	01H DUP (?)
Dict_type DQ	01H DUP (?)
IfExp_type DQ	01H DUP (?)
Lambda_type DQ	01H DUP (?)
UnaryOp_type DQ	01H DUP (?)
BinOp_type DQ	01H DUP (?)
BoolOp_type DQ	01H DUP (?)
expr_type DQ	01H DUP (?)
Continue_type DQ 01H DUP (?)
Break_type DQ	01H DUP (?)
Pass_type DQ	01H DUP (?)
Expr_type DQ	01H DUP (?)
Nonlocal_type DQ 01H DUP (?)
Global_type DQ	01H DUP (?)
ImportFrom_type DQ 01H DUP (?)
Import_type DQ	01H DUP (?)
Assert_type DQ	01H DUP (?)
Try_type DQ	01H DUP (?)
Raise_type DQ	01H DUP (?)
With_type DQ	01H DUP (?)
If_type	DQ	01H DUP (?)
While_type DQ	01H DUP (?)
For_type DQ	01H DUP (?)
AugAssign_type DQ 01H DUP (?)
Assign_type DQ	01H DUP (?)
Delete_type DQ	01H DUP (?)
Return_type DQ	01H DUP (?)
ClassDef_type DQ 01H DUP (?)
FunctionDef_type DQ 01H DUP (?)
stmt_type DQ	01H DUP (?)
Suite_type DQ	01H DUP (?)
Expression_type DQ 01H DUP (?)
Interactive_type DQ 01H DUP (?)
Module_type DQ	01H DUP (?)
mod_type DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__ast DD imagerel $LN111
	DD	imagerel $LN111+3779
	DD	imagerel $unwind$PyInit__ast
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__ast DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_08FACALJAE@withitem?$AA@
CONST	SEGMENT
??_C@_08FACALJAE@withitem?$AA@ DB 'withitem', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NKHOCLEE@alias?$AA@
CONST	SEGMENT
??_C@_05NKHOCLEE@alias?$AA@ DB 'alias', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JMKMGKCH@keyword?$AA@
CONST	SEGMENT
??_C@_07JMKMGKCH@keyword?$AA@ DB 'keyword', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBNAMLIK@arguments?$AA@
CONST	SEGMENT
??_C@_09PBNAMLIK@arguments?$AA@ DB 'arguments', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IFPAFICE@ExceptHandler?$AA@
CONST	SEGMENT
??_C@_0O@IFPAFICE@ExceptHandler?$AA@ DB 'ExceptHandler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LBOCECKK@excepthandler?$AA@
CONST	SEGMENT
??_C@_0O@LBOCECKK@excepthandler?$AA@ DB 'excepthandler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PDDLNDDO@comprehension?$AA@
CONST	SEGMENT
??_C@_0O@PDDLNDDO@comprehension?$AA@ DB 'comprehension', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFBCHB@NotIn?$AA@
CONST	SEGMENT
??_C@_05GFBCHB@NotIn?$AA@ DB 'NotIn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IEILNGIL@In?$AA@
CONST	SEGMENT
??_C@_02IEILNGIL@In?$AA@ DB 'In', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KLALIAAG@IsNot?$AA@
CONST	SEGMENT
??_C@_05KLALIAAG@IsNot?$AA@ DB 'IsNot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HLOHLKJH@Is?$AA@
CONST	SEGMENT
??_C@_02HLOHLKJH@Is?$AA@ DB 'Is', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GIODLKL@GtE?$AA@
CONST	SEGMENT
??_C@_03GIODLKL@GtE?$AA@ DB 'GtE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DODIABFK@Gt?$AA@
CONST	SEGMENT
??_C@_02DODIABFK@Gt?$AA@ DB 'Gt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NBIPLMKK@LtE?$AA@
CONST	SEGMENT
??_C@_03NBIPLMKK@LtE?$AA@ DB 'LtE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DCGNOOLL@Lt?$AA@
CONST	SEGMENT
??_C@_02DCGNOOLL@Lt?$AA@ DB 'Lt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MECFOFIL@NotEq?$AA@
CONST	SEGMENT
??_C@_05MECFOFIL@NotEq?$AA@ DB 'NotEq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EAMLCBHB@Eq?$AA@
CONST	SEGMENT
??_C@_02EAMLCBHB@Eq?$AA@ DB 'Eq', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KGHEMFCD@cmpop?$AA@
CONST	SEGMENT
??_C@_05KGHEMFCD@cmpop?$AA@ DB 'cmpop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFGHELIL@USub?$AA@
CONST	SEGMENT
??_C@_04BFGHELIL@USub?$AA@ DB 'USub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KEMJLKFO@UAdd?$AA@
CONST	SEGMENT
??_C@_04KEMJLKFO@UAdd?$AA@ DB 'UAdd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNKIDPAC@Not?$AA@
CONST	SEGMENT
??_C@_03KNKIDPAC@Not?$AA@ DB 'Not', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHLCGMJD@Invert?$AA@
CONST	SEGMENT
??_C@_06OHLCGMJD@Invert?$AA@ DB 'Invert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JPNNPNHH@unaryop?$AA@
CONST	SEGMENT
??_C@_07JPNNPNHH@unaryop?$AA@ DB 'unaryop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BOGBPHLB@FloorDiv?$AA@
CONST	SEGMENT
??_C@_08BOGBPHLB@FloorDiv?$AA@ DB 'FloorDiv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCNOCLJN@BitAnd?$AA@
CONST	SEGMENT
??_C@_06PCNOCLJN@BitAnd?$AA@ DB 'BitAnd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MCJFOMGI@BitXor?$AA@
CONST	SEGMENT
??_C@_06MCJFOMGI@BitXor?$AA@ DB 'BitXor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BKBNAGEF@BitOr?$AA@
CONST	SEGMENT
??_C@_05BKBNAGEF@BitOr?$AA@ DB 'BitOr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEKGCNCD@RShift?$AA@
CONST	SEGMENT
??_C@_06LEKGCNCD@RShift?$AA@ DB 'RShift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IDEHMKLA@LShift?$AA@
CONST	SEGMENT
??_C@_06IDEHMKLA@LShift?$AA@ DB 'LShift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGEDEMGN@Pow?$AA@
CONST	SEGMENT
??_C@_03DGEDEMGN@Pow?$AA@ DB 'Pow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PFNPICLN@Mod?$AA@
CONST	SEGMENT
??_C@_03PFNPICLN@Mod?$AA@ DB 'Mod', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PEKOMBFG@Div?$AA@
CONST	SEGMENT
??_C@_03PEKOMBFG@Div?$AA@ DB 'Div', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MPMBEKAC@Mult?$AA@
CONST	SEGMENT
??_C@_04MPMBEKAC@Mult?$AA@ DB 'Mult', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CPCCDDB@Sub?$AA@
CONST	SEGMENT
??_C@_03CPCCDDB@Sub?$AA@ DB 'Sub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LDFMNCOE@Add?$AA@
CONST	SEGMENT
??_C@_03LDFMNCOE@Add?$AA@ DB 'Add', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHJFAFGD@operator?$AA@
CONST	SEGMENT
??_C@_08LHJFAFGD@operator?$AA@ DB 'operator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GGHBPHGE@Or?$AA@
CONST	SEGMENT
??_C@_02GGHBPHGE@Or?$AA@ DB 'Or', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LOMLFHDC@And?$AA@
CONST	SEGMENT
??_C@_03LOMLFHDC@And?$AA@ DB 'And', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06IBDOJNAO@boolop?$AA@
CONST	SEGMENT
??_C@_06IBDOJNAO@boolop?$AA@ DB 'boolop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FNNGFGLF@Index?$AA@
CONST	SEGMENT
??_C@_05FNNGFGLF@Index?$AA@ DB 'Index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CIIMGBAD@ExtSlice?$AA@
CONST	SEGMENT
??_C@_08CIIMGBAD@ExtSlice?$AA@ DB 'ExtSlice', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IMNAOMFL@Slice?$AA@
CONST	SEGMENT
??_C@_05IMNAOMFL@Slice?$AA@ DB 'Slice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LOJBNELM@Param?$AA@
CONST	SEGMENT
??_C@_05LOJBNELM@Param?$AA@ DB 'Param', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NAEMOJFF@AugStore?$AA@
CONST	SEGMENT
??_C@_08NAEMOJFF@AugStore?$AA@ DB 'AugStore', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GCIJHPCC@AugLoad?$AA@
CONST	SEGMENT
??_C@_07GCIJHPCC@AugLoad?$AA@ DB 'AugLoad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENJJMCOJ@Del?$AA@
CONST	SEGMENT
??_C@_03ENJJMCOJ@Del?$AA@ DB 'Del', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OEMPKGID@Store?$AA@
CONST	SEGMENT
??_C@_05OEMPKGID@Store?$AA@ DB 'Store', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IPBPFFEL@Load?$AA@
CONST	SEGMENT
??_C@_04IPBPFFEL@Load?$AA@ DB 'Load', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GABLJPJB@expr_context?$AA@
CONST	SEGMENT
??_C@_0N@GABLJPJB@expr_context?$AA@ DB 'expr_context', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NKGIHGDI@Tuple?$AA@
CONST	SEGMENT
??_C@_05NKGIHGDI@Tuple?$AA@ DB 'Tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPBEGPNI@List?$AA@
CONST	SEGMENT
??_C@_04PPBEGPNI@List?$AA@ DB 'List', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FABLJDN@Name?$AA@
CONST	SEGMENT
??_C@_04FABLJDN@Name?$AA@ DB 'Name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JHFCIAKE@Starred?$AA@
CONST	SEGMENT
??_C@_07JHFCIAKE@Starred?$AA@ DB 'Starred', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPNCODFI@Subscript?$AA@
CONST	SEGMENT
??_C@_09OPNCODFI@Subscript?$AA@ DB 'Subscript', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EIDFECNJ@Attribute?$AA@
CONST	SEGMENT
??_C@_09EIDFECNJ@Attribute?$AA@ DB 'Attribute', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KKBGFFMJ@Ellipsis?$AA@
CONST	SEGMENT
??_C@_08KKBGFFMJ@Ellipsis?$AA@ DB 'Ellipsis', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FGDMGDLA@Bytes?$AA@
CONST	SEGMENT
??_C@_05FGDMGDLA@Bytes?$AA@ DB 'Bytes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EJPCFLFH@Str?$AA@
CONST	SEGMENT
??_C@_03EJPCFLFH@Str?$AA@ DB 'Str', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CHBJLALM@Num?$AA@
CONST	SEGMENT
??_C@_03CHBJLALM@Num?$AA@ DB 'Num', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNJBKMPC@Call?$AA@
CONST	SEGMENT
??_C@_04CNJBKMPC@Call?$AA@ DB 'Call', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MBOMJGGF@Compare?$AA@
CONST	SEGMENT
??_C@_07MBOMJGGF@Compare?$AA@ DB 'Compare', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GLJBJEPP@YieldFrom?$AA@
CONST	SEGMENT
??_C@_09GLJBJEPP@YieldFrom?$AA@ DB 'YieldFrom', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LNDKIJIJ@Yield?$AA@
CONST	SEGMENT
??_C@_05LNDKIJIJ@Yield?$AA@ DB 'Yield', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MMHMBOOD@GeneratorExp?$AA@
CONST	SEGMENT
??_C@_0N@MMHMBOOD@GeneratorExp?$AA@ DB 'GeneratorExp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GMOHPPCM@DictComp?$AA@
CONST	SEGMENT
??_C@_08GMOHPPCM@DictComp?$AA@ DB 'DictComp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BLGPBMGP@SetComp?$AA@
CONST	SEGMENT
??_C@_07BLGPBMGP@SetComp?$AA@ DB 'SetComp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LAOBMBPK@ListComp?$AA@
CONST	SEGMENT
??_C@_08LAOBMBPK@ListComp?$AA@ DB 'ListComp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CEMDFJG@Set?$AA@
CONST	SEGMENT
??_C@_03CEMDFJG@Set?$AA@ DB 'Set', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDECIHGJ@Dict?$AA@
CONST	SEGMENT
??_C@_04NDECIHGJ@Dict?$AA@ DB 'Dict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJAPGPAE@IfExp?$AA@
CONST	SEGMENT
??_C@_05KJAPGPAE@IfExp?$AA@ DB 'IfExp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OBCFFGBN@Lambda?$AA@
CONST	SEGMENT
??_C@_06OBCFFGBN@Lambda?$AA@ DB 'Lambda', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FOOGNJMB@UnaryOp?$AA@
CONST	SEGMENT
??_C@_07FOOGNJMB@UnaryOp?$AA@ DB 'UnaryOp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BHIPNDDM@BinOp?$AA@
CONST	SEGMENT
??_C@_05BHIPNDDM@BinOp?$AA@ DB 'BinOp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGMOOCHC@BoolOp?$AA@
CONST	SEGMENT
??_C@_06HGMOOCHC@BoolOp?$AA@ DB 'BoolOp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IPHMALII@expr?$AA@
CONST	SEGMENT
??_C@_04IPHMALII@expr?$AA@ DB 'expr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LJHDLOLO@Continue?$AA@
CONST	SEGMENT
??_C@_08LJHDLOLO@Continue?$AA@ DB 'Continue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMFLFCNO@Break?$AA@
CONST	SEGMENT
??_C@_05EMFLFCNO@Break?$AA@ DB 'Break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NAPBKLHD@Pass?$AA@
CONST	SEGMENT
??_C@_04NAPBKLHD@Pass?$AA@ DB 'Pass', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EOLNCEIM@Expr?$AA@
CONST	SEGMENT
??_C@_04EOLNCEIM@Expr?$AA@ DB 'Expr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BAHOEEIH@Nonlocal?$AA@
CONST	SEGMENT
??_C@_08BAHOEEIH@Nonlocal?$AA@ DB 'Nonlocal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JGBJPOPP@Global?$AA@
CONST	SEGMENT
??_C@_06JGBJPOPP@Global?$AA@ DB 'Global', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IKBFEFKH@ImportFrom?$AA@
CONST	SEGMENT
??_C@_0L@IKBFEFKH@ImportFrom?$AA@ DB 'ImportFrom', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IBNLALPJ@Import?$AA@
CONST	SEGMENT
??_C@_06IBNLALPJ@Import?$AA@ DB 'Import', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KDPFLMMB@Assert?$AA@
CONST	SEGMENT
??_C@_06KDPFLMMB@Assert?$AA@ DB 'Assert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDFMMGJH@Try?$AA@
CONST	SEGMENT
??_C@_03DDFMMGJH@Try?$AA@ DB 'Try', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KDDKFIDP@Raise?$AA@
CONST	SEGMENT
??_C@_05KDDKFIDP@Raise?$AA@ DB 'Raise', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBMICJD@With?$AA@
CONST	SEGMENT
??_C@_04LBMICJD@With?$AA@ DB 'With', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EMFCFMID@If?$AA@
CONST	SEGMENT
??_C@_02EMFCFMID@If?$AA@ DB 'If', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJJNEPLA@While?$AA@
CONST	SEGMENT
??_C@_05OJJNEPLA@While?$AA@ DB 'While', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DOEGLAGL@For?$AA@
CONST	SEGMENT
??_C@_03DOEGLAGL@For?$AA@ DB 'For', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09CMGHGMJH@AugAssign?$AA@
CONST	SEGMENT
??_C@_09CMGHGMJH@AugAssign?$AA@ DB 'AugAssign', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EDODJIDJ@Assign?$AA@
CONST	SEGMENT
??_C@_06EDODJIDJ@Assign?$AA@ DB 'Assign', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCFIKKEA@Return?$AA@
CONST	SEGMENT
??_C@_06HCFIKKEA@Return?$AA@ DB 'Return', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OGFMJMG@ClassDef?$AA@
CONST	SEGMENT
??_C@_08OGFMJMG@ClassDef?$AA@ DB 'ClassDef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@POJILEOM@FunctionDef?$AA@
CONST	SEGMENT
??_C@_0M@POJILEOM@FunctionDef?$AA@ DB 'FunctionDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIKOEBLH@stmt?$AA@
CONST	SEGMENT
??_C@_04GIKOEBLH@stmt?$AA@ DB 'stmt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PIEJKMFN@Suite?$AA@
CONST	SEGMENT
??_C@_05PIEJKMFN@Suite?$AA@ DB 'Suite', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NMLOJPGF@Expression?$AA@
CONST	SEGMENT
??_C@_0L@NMLOJPGF@Expression?$AA@ DB 'Expression', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@INEKDBAI@Interactive?$AA@
CONST	SEGMENT
??_C@_0M@INEKDBAI@Interactive?$AA@ DB 'Interactive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHPJKFDC@Module?$AA@
CONST	SEGMENT
??_C@_06NHPJKFDC@Module?$AA@ DB 'Module', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFONCNID@mod?$AA@
CONST	SEGMENT
??_C@_03FFONCNID@mod?$AA@ DB 'mod', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LJOBGFGA@PyCF_ONLY_AST?$AA@
CONST	SEGMENT
??_C@_0O@LJOBGFGA@PyCF_ONLY_AST?$AA@ DB 'PyCF_ONLY_AST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENDOBHAC@AST?$AA@
CONST	SEGMENT
??_C@_03ENDOBHAC@AST?$AA@ DB 'AST', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit__ast
_TEXT	SEGMENT
d$ = 32
m$ = 40
PyInit__ast PROC					; COMDAT

; 6766 : {

$LN111:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6767 :     PyObject *m, *d;
; 6768 :     if (!init_types()) return NULL;

  00004	e8 00 00 00 00	 call	 init_types
  00009	85 c0		 test	 eax, eax
  0000b	75 07		 jne	 SHORT $LN108@PyInit__as
  0000d	33 c0		 xor	 eax, eax
  0000f	e9 aa 0e 00 00	 jmp	 $LN109@PyInit__as
$LN108@PyInit__as:

; 6769 :     m = PyModule_Create(&_astmodule);

  00014	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_astmodule
  00020	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00025	48 89 44 24 28	 mov	 QWORD PTR m$[rsp], rax

; 6770 :     if (!m) return NULL;

  0002a	48 83 7c 24 28
	00		 cmp	 QWORD PTR m$[rsp], 0
  00030	75 07		 jne	 SHORT $LN107@PyInit__as
  00032	33 c0		 xor	 eax, eax
  00034	e9 85 0e 00 00	 jmp	 $LN109@PyInit__as
$LN107@PyInit__as:

; 6771 :     d = PyModule_GetDict(m);

  00039	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  0003e	e8 00 00 00 00	 call	 PyModule_GetDict
  00043	48 89 44 24 20	 mov	 QWORD PTR d$[rsp], rax

; 6772 :     if (PyDict_SetItemString(d, "AST", (PyObject*)&AST_type) < 0) return NULL;

  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:AST_type
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03ENDOBHAC@AST?$AA@
  00056	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0005b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00060	85 c0		 test	 eax, eax
  00062	7d 07		 jge	 SHORT $LN106@PyInit__as
  00064	33 c0		 xor	 eax, eax
  00066	e9 53 0e 00 00	 jmp	 $LN109@PyInit__as
$LN106@PyInit__as:

; 6773 :     if (PyModule_AddIntConstant(m, "PyCF_ONLY_AST", PyCF_ONLY_AST) < 0)

  0006b	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LJOBGFGA@PyCF_ONLY_AST?$AA@
  00078	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  0007d	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  00082	85 c0		 test	 eax, eax
  00084	7d 07		 jge	 SHORT $LN105@PyInit__as

; 6774 :         return NULL;

  00086	33 c0		 xor	 eax, eax
  00088	e9 31 0e 00 00	 jmp	 $LN109@PyInit__as
$LN105@PyInit__as:

; 6775 :     if (PyDict_SetItemString(d, "mod", (PyObject*)mod_type) < 0) return NULL;

  0008d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR mod_type
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03FFONCNID@mod?$AA@
  0009b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  000a0	e8 00 00 00 00	 call	 PyDict_SetItemString
  000a5	85 c0		 test	 eax, eax
  000a7	7d 07		 jge	 SHORT $LN104@PyInit__as
  000a9	33 c0		 xor	 eax, eax
  000ab	e9 0e 0e 00 00	 jmp	 $LN109@PyInit__as
$LN104@PyInit__as:

; 6776 :     if (PyDict_SetItemString(d, "Module", (PyObject*)Module_type) < 0) return

  000b0	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Module_type
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NHPJKFDC@Module?$AA@
  000be	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  000c3	e8 00 00 00 00	 call	 PyDict_SetItemString
  000c8	85 c0		 test	 eax, eax
  000ca	7d 07		 jge	 SHORT $LN103@PyInit__as

; 6777 :         NULL;

  000cc	33 c0		 xor	 eax, eax
  000ce	e9 eb 0d 00 00	 jmp	 $LN109@PyInit__as
$LN103@PyInit__as:

; 6778 :     if (PyDict_SetItemString(d, "Interactive", (PyObject*)Interactive_type) <
; 6779 :         0) return NULL;

  000d3	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Interactive_type
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@INEKDBAI@Interactive?$AA@
  000e1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  000e6	e8 00 00 00 00	 call	 PyDict_SetItemString
  000eb	85 c0		 test	 eax, eax
  000ed	7d 07		 jge	 SHORT $LN102@PyInit__as
  000ef	33 c0		 xor	 eax, eax
  000f1	e9 c8 0d 00 00	 jmp	 $LN109@PyInit__as
$LN102@PyInit__as:

; 6780 :     if (PyDict_SetItemString(d, "Expression", (PyObject*)Expression_type) < 0)

  000f6	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Expression_type
  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NMLOJPGF@Expression?$AA@
  00104	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00109	e8 00 00 00 00	 call	 PyDict_SetItemString
  0010e	85 c0		 test	 eax, eax
  00110	7d 07		 jge	 SHORT $LN101@PyInit__as

; 6781 :         return NULL;

  00112	33 c0		 xor	 eax, eax
  00114	e9 a5 0d 00 00	 jmp	 $LN109@PyInit__as
$LN101@PyInit__as:

; 6782 :     if (PyDict_SetItemString(d, "Suite", (PyObject*)Suite_type) < 0) return

  00119	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Suite_type
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05PIEJKMFN@Suite?$AA@
  00127	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0012c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00131	85 c0		 test	 eax, eax
  00133	7d 07		 jge	 SHORT $LN100@PyInit__as

; 6783 :         NULL;

  00135	33 c0		 xor	 eax, eax
  00137	e9 82 0d 00 00	 jmp	 $LN109@PyInit__as
$LN100@PyInit__as:

; 6784 :     if (PyDict_SetItemString(d, "stmt", (PyObject*)stmt_type) < 0) return NULL;

  0013c	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR stmt_type
  00143	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04GIKOEBLH@stmt?$AA@
  0014a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0014f	e8 00 00 00 00	 call	 PyDict_SetItemString
  00154	85 c0		 test	 eax, eax
  00156	7d 07		 jge	 SHORT $LN99@PyInit__as
  00158	33 c0		 xor	 eax, eax
  0015a	e9 5f 0d 00 00	 jmp	 $LN109@PyInit__as
$LN99@PyInit__as:

; 6785 :     if (PyDict_SetItemString(d, "FunctionDef", (PyObject*)FunctionDef_type) <
; 6786 :         0) return NULL;

  0015f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR FunctionDef_type
  00166	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@POJILEOM@FunctionDef?$AA@
  0016d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00172	e8 00 00 00 00	 call	 PyDict_SetItemString
  00177	85 c0		 test	 eax, eax
  00179	7d 07		 jge	 SHORT $LN98@PyInit__as
  0017b	33 c0		 xor	 eax, eax
  0017d	e9 3c 0d 00 00	 jmp	 $LN109@PyInit__as
$LN98@PyInit__as:

; 6787 :     if (PyDict_SetItemString(d, "ClassDef", (PyObject*)ClassDef_type) < 0)

  00182	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ClassDef_type
  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OGFMJMG@ClassDef?$AA@
  00190	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00195	e8 00 00 00 00	 call	 PyDict_SetItemString
  0019a	85 c0		 test	 eax, eax
  0019c	7d 07		 jge	 SHORT $LN97@PyInit__as

; 6788 :         return NULL;

  0019e	33 c0		 xor	 eax, eax
  001a0	e9 19 0d 00 00	 jmp	 $LN109@PyInit__as
$LN97@PyInit__as:

; 6789 :     if (PyDict_SetItemString(d, "Return", (PyObject*)Return_type) < 0) return

  001a5	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Return_type
  001ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06HCFIKKEA@Return?$AA@
  001b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  001b8	e8 00 00 00 00	 call	 PyDict_SetItemString
  001bd	85 c0		 test	 eax, eax
  001bf	7d 07		 jge	 SHORT $LN96@PyInit__as

; 6790 :         NULL;

  001c1	33 c0		 xor	 eax, eax
  001c3	e9 f6 0c 00 00	 jmp	 $LN109@PyInit__as
$LN96@PyInit__as:

; 6791 :     if (PyDict_SetItemString(d, "Delete", (PyObject*)Delete_type) < 0) return

  001c8	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Delete_type
  001cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06JBKGCNBB@Delete?$AA@
  001d6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  001db	e8 00 00 00 00	 call	 PyDict_SetItemString
  001e0	85 c0		 test	 eax, eax
  001e2	7d 07		 jge	 SHORT $LN95@PyInit__as

; 6792 :         NULL;

  001e4	33 c0		 xor	 eax, eax
  001e6	e9 d3 0c 00 00	 jmp	 $LN109@PyInit__as
$LN95@PyInit__as:

; 6793 :     if (PyDict_SetItemString(d, "Assign", (PyObject*)Assign_type) < 0) return

  001eb	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Assign_type
  001f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06EDODJIDJ@Assign?$AA@
  001f9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  001fe	e8 00 00 00 00	 call	 PyDict_SetItemString
  00203	85 c0		 test	 eax, eax
  00205	7d 07		 jge	 SHORT $LN94@PyInit__as

; 6794 :         NULL;

  00207	33 c0		 xor	 eax, eax
  00209	e9 b0 0c 00 00	 jmp	 $LN109@PyInit__as
$LN94@PyInit__as:

; 6795 :     if (PyDict_SetItemString(d, "AugAssign", (PyObject*)AugAssign_type) < 0)

  0020e	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR AugAssign_type
  00215	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09CMGHGMJH@AugAssign?$AA@
  0021c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00221	e8 00 00 00 00	 call	 PyDict_SetItemString
  00226	85 c0		 test	 eax, eax
  00228	7d 07		 jge	 SHORT $LN93@PyInit__as

; 6796 :         return NULL;

  0022a	33 c0		 xor	 eax, eax
  0022c	e9 8d 0c 00 00	 jmp	 $LN109@PyInit__as
$LN93@PyInit__as:

; 6797 :     if (PyDict_SetItemString(d, "For", (PyObject*)For_type) < 0) return NULL;

  00231	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR For_type
  00238	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DOEGLAGL@For?$AA@
  0023f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00244	e8 00 00 00 00	 call	 PyDict_SetItemString
  00249	85 c0		 test	 eax, eax
  0024b	7d 07		 jge	 SHORT $LN92@PyInit__as
  0024d	33 c0		 xor	 eax, eax
  0024f	e9 6a 0c 00 00	 jmp	 $LN109@PyInit__as
$LN92@PyInit__as:

; 6798 :     if (PyDict_SetItemString(d, "While", (PyObject*)While_type) < 0) return

  00254	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR While_type
  0025b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OJJNEPLA@While?$AA@
  00262	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00267	e8 00 00 00 00	 call	 PyDict_SetItemString
  0026c	85 c0		 test	 eax, eax
  0026e	7d 07		 jge	 SHORT $LN91@PyInit__as

; 6799 :         NULL;

  00270	33 c0		 xor	 eax, eax
  00272	e9 47 0c 00 00	 jmp	 $LN109@PyInit__as
$LN91@PyInit__as:

; 6800 :     if (PyDict_SetItemString(d, "If", (PyObject*)If_type) < 0) return NULL;

  00277	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR If_type
  0027e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02EMFCFMID@If?$AA@
  00285	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0028a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0028f	85 c0		 test	 eax, eax
  00291	7d 07		 jge	 SHORT $LN90@PyInit__as
  00293	33 c0		 xor	 eax, eax
  00295	e9 24 0c 00 00	 jmp	 $LN109@PyInit__as
$LN90@PyInit__as:

; 6801 :     if (PyDict_SetItemString(d, "With", (PyObject*)With_type) < 0) return NULL;

  0029a	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR With_type
  002a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LBMICJD@With?$AA@
  002a8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  002ad	e8 00 00 00 00	 call	 PyDict_SetItemString
  002b2	85 c0		 test	 eax, eax
  002b4	7d 07		 jge	 SHORT $LN89@PyInit__as
  002b6	33 c0		 xor	 eax, eax
  002b8	e9 01 0c 00 00	 jmp	 $LN109@PyInit__as
$LN89@PyInit__as:

; 6802 :     if (PyDict_SetItemString(d, "Raise", (PyObject*)Raise_type) < 0) return

  002bd	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Raise_type
  002c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KDDKFIDP@Raise?$AA@
  002cb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  002d0	e8 00 00 00 00	 call	 PyDict_SetItemString
  002d5	85 c0		 test	 eax, eax
  002d7	7d 07		 jge	 SHORT $LN88@PyInit__as

; 6803 :         NULL;

  002d9	33 c0		 xor	 eax, eax
  002db	e9 de 0b 00 00	 jmp	 $LN109@PyInit__as
$LN88@PyInit__as:

; 6804 :     if (PyDict_SetItemString(d, "Try", (PyObject*)Try_type) < 0) return NULL;

  002e0	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Try_type
  002e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DDFMMGJH@Try?$AA@
  002ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  002f3	e8 00 00 00 00	 call	 PyDict_SetItemString
  002f8	85 c0		 test	 eax, eax
  002fa	7d 07		 jge	 SHORT $LN87@PyInit__as
  002fc	33 c0		 xor	 eax, eax
  002fe	e9 bb 0b 00 00	 jmp	 $LN109@PyInit__as
$LN87@PyInit__as:

; 6805 :     if (PyDict_SetItemString(d, "Assert", (PyObject*)Assert_type) < 0) return

  00303	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Assert_type
  0030a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06KDPFLMMB@Assert?$AA@
  00311	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00316	e8 00 00 00 00	 call	 PyDict_SetItemString
  0031b	85 c0		 test	 eax, eax
  0031d	7d 07		 jge	 SHORT $LN86@PyInit__as

; 6806 :         NULL;

  0031f	33 c0		 xor	 eax, eax
  00321	e9 98 0b 00 00	 jmp	 $LN109@PyInit__as
$LN86@PyInit__as:

; 6807 :     if (PyDict_SetItemString(d, "Import", (PyObject*)Import_type) < 0) return

  00326	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Import_type
  0032d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IBNLALPJ@Import?$AA@
  00334	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00339	e8 00 00 00 00	 call	 PyDict_SetItemString
  0033e	85 c0		 test	 eax, eax
  00340	7d 07		 jge	 SHORT $LN85@PyInit__as

; 6808 :         NULL;

  00342	33 c0		 xor	 eax, eax
  00344	e9 75 0b 00 00	 jmp	 $LN109@PyInit__as
$LN85@PyInit__as:

; 6809 :     if (PyDict_SetItemString(d, "ImportFrom", (PyObject*)ImportFrom_type) < 0)

  00349	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ImportFrom_type
  00350	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@IKBFEFKH@ImportFrom?$AA@
  00357	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0035c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00361	85 c0		 test	 eax, eax
  00363	7d 07		 jge	 SHORT $LN84@PyInit__as

; 6810 :         return NULL;

  00365	33 c0		 xor	 eax, eax
  00367	e9 52 0b 00 00	 jmp	 $LN109@PyInit__as
$LN84@PyInit__as:

; 6811 :     if (PyDict_SetItemString(d, "Global", (PyObject*)Global_type) < 0) return

  0036c	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Global_type
  00373	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06JGBJPOPP@Global?$AA@
  0037a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0037f	e8 00 00 00 00	 call	 PyDict_SetItemString
  00384	85 c0		 test	 eax, eax
  00386	7d 07		 jge	 SHORT $LN83@PyInit__as

; 6812 :         NULL;

  00388	33 c0		 xor	 eax, eax
  0038a	e9 2f 0b 00 00	 jmp	 $LN109@PyInit__as
$LN83@PyInit__as:

; 6813 :     if (PyDict_SetItemString(d, "Nonlocal", (PyObject*)Nonlocal_type) < 0)

  0038f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Nonlocal_type
  00396	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BAHOEEIH@Nonlocal?$AA@
  0039d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  003a2	e8 00 00 00 00	 call	 PyDict_SetItemString
  003a7	85 c0		 test	 eax, eax
  003a9	7d 07		 jge	 SHORT $LN82@PyInit__as

; 6814 :         return NULL;

  003ab	33 c0		 xor	 eax, eax
  003ad	e9 0c 0b 00 00	 jmp	 $LN109@PyInit__as
$LN82@PyInit__as:

; 6815 :     if (PyDict_SetItemString(d, "Expr", (PyObject*)Expr_type) < 0) return NULL;

  003b2	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Expr_type
  003b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04EOLNCEIM@Expr?$AA@
  003c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  003c5	e8 00 00 00 00	 call	 PyDict_SetItemString
  003ca	85 c0		 test	 eax, eax
  003cc	7d 07		 jge	 SHORT $LN81@PyInit__as
  003ce	33 c0		 xor	 eax, eax
  003d0	e9 e9 0a 00 00	 jmp	 $LN109@PyInit__as
$LN81@PyInit__as:

; 6816 :     if (PyDict_SetItemString(d, "Pass", (PyObject*)Pass_type) < 0) return NULL;

  003d5	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Pass_type
  003dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NAPBKLHD@Pass?$AA@
  003e3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  003e8	e8 00 00 00 00	 call	 PyDict_SetItemString
  003ed	85 c0		 test	 eax, eax
  003ef	7d 07		 jge	 SHORT $LN80@PyInit__as
  003f1	33 c0		 xor	 eax, eax
  003f3	e9 c6 0a 00 00	 jmp	 $LN109@PyInit__as
$LN80@PyInit__as:

; 6817 :     if (PyDict_SetItemString(d, "Break", (PyObject*)Break_type) < 0) return

  003f8	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Break_type
  003ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05EMFLFCNO@Break?$AA@
  00406	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0040b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00410	85 c0		 test	 eax, eax
  00412	7d 07		 jge	 SHORT $LN79@PyInit__as

; 6818 :         NULL;

  00414	33 c0		 xor	 eax, eax
  00416	e9 a3 0a 00 00	 jmp	 $LN109@PyInit__as
$LN79@PyInit__as:

; 6819 :     if (PyDict_SetItemString(d, "Continue", (PyObject*)Continue_type) < 0)

  0041b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Continue_type
  00422	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LJHDLOLO@Continue?$AA@
  00429	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0042e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00433	85 c0		 test	 eax, eax
  00435	7d 07		 jge	 SHORT $LN78@PyInit__as

; 6820 :         return NULL;

  00437	33 c0		 xor	 eax, eax
  00439	e9 80 0a 00 00	 jmp	 $LN109@PyInit__as
$LN78@PyInit__as:

; 6821 :     if (PyDict_SetItemString(d, "expr", (PyObject*)expr_type) < 0) return NULL;

  0043e	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR expr_type
  00445	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IPHMALII@expr?$AA@
  0044c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00451	e8 00 00 00 00	 call	 PyDict_SetItemString
  00456	85 c0		 test	 eax, eax
  00458	7d 07		 jge	 SHORT $LN77@PyInit__as
  0045a	33 c0		 xor	 eax, eax
  0045c	e9 5d 0a 00 00	 jmp	 $LN109@PyInit__as
$LN77@PyInit__as:

; 6822 :     if (PyDict_SetItemString(d, "BoolOp", (PyObject*)BoolOp_type) < 0) return

  00461	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR BoolOp_type
  00468	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06HGMOOCHC@BoolOp?$AA@
  0046f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00474	e8 00 00 00 00	 call	 PyDict_SetItemString
  00479	85 c0		 test	 eax, eax
  0047b	7d 07		 jge	 SHORT $LN76@PyInit__as

; 6823 :         NULL;

  0047d	33 c0		 xor	 eax, eax
  0047f	e9 3a 0a 00 00	 jmp	 $LN109@PyInit__as
$LN76@PyInit__as:

; 6824 :     if (PyDict_SetItemString(d, "BinOp", (PyObject*)BinOp_type) < 0) return

  00484	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR BinOp_type
  0048b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05BHIPNDDM@BinOp?$AA@
  00492	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00497	e8 00 00 00 00	 call	 PyDict_SetItemString
  0049c	85 c0		 test	 eax, eax
  0049e	7d 07		 jge	 SHORT $LN75@PyInit__as

; 6825 :         NULL;

  004a0	33 c0		 xor	 eax, eax
  004a2	e9 17 0a 00 00	 jmp	 $LN109@PyInit__as
$LN75@PyInit__as:

; 6826 :     if (PyDict_SetItemString(d, "UnaryOp", (PyObject*)UnaryOp_type) < 0) return

  004a7	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR UnaryOp_type
  004ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07FOOGNJMB@UnaryOp?$AA@
  004b5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  004ba	e8 00 00 00 00	 call	 PyDict_SetItemString
  004bf	85 c0		 test	 eax, eax
  004c1	7d 07		 jge	 SHORT $LN74@PyInit__as

; 6827 :         NULL;

  004c3	33 c0		 xor	 eax, eax
  004c5	e9 f4 09 00 00	 jmp	 $LN109@PyInit__as
$LN74@PyInit__as:

; 6828 :     if (PyDict_SetItemString(d, "Lambda", (PyObject*)Lambda_type) < 0) return

  004ca	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Lambda_type
  004d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OBCFFGBN@Lambda?$AA@
  004d8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  004dd	e8 00 00 00 00	 call	 PyDict_SetItemString
  004e2	85 c0		 test	 eax, eax
  004e4	7d 07		 jge	 SHORT $LN73@PyInit__as

; 6829 :         NULL;

  004e6	33 c0		 xor	 eax, eax
  004e8	e9 d1 09 00 00	 jmp	 $LN109@PyInit__as
$LN73@PyInit__as:

; 6830 :     if (PyDict_SetItemString(d, "IfExp", (PyObject*)IfExp_type) < 0) return

  004ed	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR IfExp_type
  004f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KJAPGPAE@IfExp?$AA@
  004fb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00500	e8 00 00 00 00	 call	 PyDict_SetItemString
  00505	85 c0		 test	 eax, eax
  00507	7d 07		 jge	 SHORT $LN72@PyInit__as

; 6831 :         NULL;

  00509	33 c0		 xor	 eax, eax
  0050b	e9 ae 09 00 00	 jmp	 $LN109@PyInit__as
$LN72@PyInit__as:

; 6832 :     if (PyDict_SetItemString(d, "Dict", (PyObject*)Dict_type) < 0) return NULL;

  00510	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Dict_type
  00517	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NDECIHGJ@Dict?$AA@
  0051e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00523	e8 00 00 00 00	 call	 PyDict_SetItemString
  00528	85 c0		 test	 eax, eax
  0052a	7d 07		 jge	 SHORT $LN71@PyInit__as
  0052c	33 c0		 xor	 eax, eax
  0052e	e9 8b 09 00 00	 jmp	 $LN109@PyInit__as
$LN71@PyInit__as:

; 6833 :     if (PyDict_SetItemString(d, "Set", (PyObject*)Set_type) < 0) return NULL;

  00533	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Set_type
  0053a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CEMDFJG@Set?$AA@
  00541	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00546	e8 00 00 00 00	 call	 PyDict_SetItemString
  0054b	85 c0		 test	 eax, eax
  0054d	7d 07		 jge	 SHORT $LN70@PyInit__as
  0054f	33 c0		 xor	 eax, eax
  00551	e9 68 09 00 00	 jmp	 $LN109@PyInit__as
$LN70@PyInit__as:

; 6834 :     if (PyDict_SetItemString(d, "ListComp", (PyObject*)ListComp_type) < 0)

  00556	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ListComp_type
  0055d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LAOBMBPK@ListComp?$AA@
  00564	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00569	e8 00 00 00 00	 call	 PyDict_SetItemString
  0056e	85 c0		 test	 eax, eax
  00570	7d 07		 jge	 SHORT $LN69@PyInit__as

; 6835 :         return NULL;

  00572	33 c0		 xor	 eax, eax
  00574	e9 45 09 00 00	 jmp	 $LN109@PyInit__as
$LN69@PyInit__as:

; 6836 :     if (PyDict_SetItemString(d, "SetComp", (PyObject*)SetComp_type) < 0) return

  00579	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR SetComp_type
  00580	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BLGPBMGP@SetComp?$AA@
  00587	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0058c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00591	85 c0		 test	 eax, eax
  00593	7d 07		 jge	 SHORT $LN68@PyInit__as

; 6837 :         NULL;

  00595	33 c0		 xor	 eax, eax
  00597	e9 22 09 00 00	 jmp	 $LN109@PyInit__as
$LN68@PyInit__as:

; 6838 :     if (PyDict_SetItemString(d, "DictComp", (PyObject*)DictComp_type) < 0)

  0059c	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR DictComp_type
  005a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08GMOHPPCM@DictComp?$AA@
  005aa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  005af	e8 00 00 00 00	 call	 PyDict_SetItemString
  005b4	85 c0		 test	 eax, eax
  005b6	7d 07		 jge	 SHORT $LN67@PyInit__as

; 6839 :         return NULL;

  005b8	33 c0		 xor	 eax, eax
  005ba	e9 ff 08 00 00	 jmp	 $LN109@PyInit__as
$LN67@PyInit__as:

; 6840 :     if (PyDict_SetItemString(d, "GeneratorExp", (PyObject*)GeneratorExp_type) <
; 6841 :         0) return NULL;

  005bf	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR GeneratorExp_type
  005c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MMHMBOOD@GeneratorExp?$AA@
  005cd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  005d2	e8 00 00 00 00	 call	 PyDict_SetItemString
  005d7	85 c0		 test	 eax, eax
  005d9	7d 07		 jge	 SHORT $LN66@PyInit__as
  005db	33 c0		 xor	 eax, eax
  005dd	e9 dc 08 00 00	 jmp	 $LN109@PyInit__as
$LN66@PyInit__as:

; 6842 :     if (PyDict_SetItemString(d, "Yield", (PyObject*)Yield_type) < 0) return

  005e2	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Yield_type
  005e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05LNDKIJIJ@Yield?$AA@
  005f0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  005f5	e8 00 00 00 00	 call	 PyDict_SetItemString
  005fa	85 c0		 test	 eax, eax
  005fc	7d 07		 jge	 SHORT $LN65@PyInit__as

; 6843 :         NULL;

  005fe	33 c0		 xor	 eax, eax
  00600	e9 b9 08 00 00	 jmp	 $LN109@PyInit__as
$LN65@PyInit__as:

; 6844 :     if (PyDict_SetItemString(d, "YieldFrom", (PyObject*)YieldFrom_type) < 0)

  00605	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR YieldFrom_type
  0060c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09GLJBJEPP@YieldFrom?$AA@
  00613	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00618	e8 00 00 00 00	 call	 PyDict_SetItemString
  0061d	85 c0		 test	 eax, eax
  0061f	7d 07		 jge	 SHORT $LN64@PyInit__as

; 6845 :         return NULL;

  00621	33 c0		 xor	 eax, eax
  00623	e9 96 08 00 00	 jmp	 $LN109@PyInit__as
$LN64@PyInit__as:

; 6846 :     if (PyDict_SetItemString(d, "Compare", (PyObject*)Compare_type) < 0) return

  00628	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Compare_type
  0062f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07MBOMJGGF@Compare?$AA@
  00636	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0063b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00640	85 c0		 test	 eax, eax
  00642	7d 07		 jge	 SHORT $LN63@PyInit__as

; 6847 :         NULL;

  00644	33 c0		 xor	 eax, eax
  00646	e9 73 08 00 00	 jmp	 $LN109@PyInit__as
$LN63@PyInit__as:

; 6848 :     if (PyDict_SetItemString(d, "Call", (PyObject*)Call_type) < 0) return NULL;

  0064b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Call_type
  00652	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04CNJBKMPC@Call?$AA@
  00659	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0065e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00663	85 c0		 test	 eax, eax
  00665	7d 07		 jge	 SHORT $LN62@PyInit__as
  00667	33 c0		 xor	 eax, eax
  00669	e9 50 08 00 00	 jmp	 $LN109@PyInit__as
$LN62@PyInit__as:

; 6849 :     if (PyDict_SetItemString(d, "Num", (PyObject*)Num_type) < 0) return NULL;

  0066e	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Num_type
  00675	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CHBJLALM@Num?$AA@
  0067c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00681	e8 00 00 00 00	 call	 PyDict_SetItemString
  00686	85 c0		 test	 eax, eax
  00688	7d 07		 jge	 SHORT $LN61@PyInit__as
  0068a	33 c0		 xor	 eax, eax
  0068c	e9 2d 08 00 00	 jmp	 $LN109@PyInit__as
$LN61@PyInit__as:

; 6850 :     if (PyDict_SetItemString(d, "Str", (PyObject*)Str_type) < 0) return NULL;

  00691	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Str_type
  00698	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03EJPCFLFH@Str?$AA@
  0069f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  006a4	e8 00 00 00 00	 call	 PyDict_SetItemString
  006a9	85 c0		 test	 eax, eax
  006ab	7d 07		 jge	 SHORT $LN60@PyInit__as
  006ad	33 c0		 xor	 eax, eax
  006af	e9 0a 08 00 00	 jmp	 $LN109@PyInit__as
$LN60@PyInit__as:

; 6851 :     if (PyDict_SetItemString(d, "Bytes", (PyObject*)Bytes_type) < 0) return

  006b4	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Bytes_type
  006bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05FGDMGDLA@Bytes?$AA@
  006c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  006c7	e8 00 00 00 00	 call	 PyDict_SetItemString
  006cc	85 c0		 test	 eax, eax
  006ce	7d 07		 jge	 SHORT $LN59@PyInit__as

; 6852 :         NULL;

  006d0	33 c0		 xor	 eax, eax
  006d2	e9 e7 07 00 00	 jmp	 $LN109@PyInit__as
$LN59@PyInit__as:

; 6853 :     if (PyDict_SetItemString(d, "Ellipsis", (PyObject*)Ellipsis_type) < 0)

  006d7	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Ellipsis_type
  006de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KKBGFFMJ@Ellipsis?$AA@
  006e5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  006ea	e8 00 00 00 00	 call	 PyDict_SetItemString
  006ef	85 c0		 test	 eax, eax
  006f1	7d 07		 jge	 SHORT $LN58@PyInit__as

; 6854 :         return NULL;

  006f3	33 c0		 xor	 eax, eax
  006f5	e9 c4 07 00 00	 jmp	 $LN109@PyInit__as
$LN58@PyInit__as:

; 6855 :     if (PyDict_SetItemString(d, "Attribute", (PyObject*)Attribute_type) < 0)

  006fa	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Attribute_type
  00701	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09EIDFECNJ@Attribute?$AA@
  00708	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0070d	e8 00 00 00 00	 call	 PyDict_SetItemString
  00712	85 c0		 test	 eax, eax
  00714	7d 07		 jge	 SHORT $LN57@PyInit__as

; 6856 :         return NULL;

  00716	33 c0		 xor	 eax, eax
  00718	e9 a1 07 00 00	 jmp	 $LN109@PyInit__as
$LN57@PyInit__as:

; 6857 :     if (PyDict_SetItemString(d, "Subscript", (PyObject*)Subscript_type) < 0)

  0071d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Subscript_type
  00724	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09OPNCODFI@Subscript?$AA@
  0072b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00730	e8 00 00 00 00	 call	 PyDict_SetItemString
  00735	85 c0		 test	 eax, eax
  00737	7d 07		 jge	 SHORT $LN56@PyInit__as

; 6858 :         return NULL;

  00739	33 c0		 xor	 eax, eax
  0073b	e9 7e 07 00 00	 jmp	 $LN109@PyInit__as
$LN56@PyInit__as:

; 6859 :     if (PyDict_SetItemString(d, "Starred", (PyObject*)Starred_type) < 0) return

  00740	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Starred_type
  00747	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JHFCIAKE@Starred?$AA@
  0074e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00753	e8 00 00 00 00	 call	 PyDict_SetItemString
  00758	85 c0		 test	 eax, eax
  0075a	7d 07		 jge	 SHORT $LN55@PyInit__as

; 6860 :         NULL;

  0075c	33 c0		 xor	 eax, eax
  0075e	e9 5b 07 00 00	 jmp	 $LN109@PyInit__as
$LN55@PyInit__as:

; 6861 :     if (PyDict_SetItemString(d, "Name", (PyObject*)Name_type) < 0) return NULL;

  00763	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Name_type
  0076a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FABLJDN@Name?$AA@
  00771	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00776	e8 00 00 00 00	 call	 PyDict_SetItemString
  0077b	85 c0		 test	 eax, eax
  0077d	7d 07		 jge	 SHORT $LN54@PyInit__as
  0077f	33 c0		 xor	 eax, eax
  00781	e9 38 07 00 00	 jmp	 $LN109@PyInit__as
$LN54@PyInit__as:

; 6862 :     if (PyDict_SetItemString(d, "List", (PyObject*)List_type) < 0) return NULL;

  00786	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR List_type
  0078d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04PPBEGPNI@List?$AA@
  00794	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00799	e8 00 00 00 00	 call	 PyDict_SetItemString
  0079e	85 c0		 test	 eax, eax
  007a0	7d 07		 jge	 SHORT $LN53@PyInit__as
  007a2	33 c0		 xor	 eax, eax
  007a4	e9 15 07 00 00	 jmp	 $LN109@PyInit__as
$LN53@PyInit__as:

; 6863 :     if (PyDict_SetItemString(d, "Tuple", (PyObject*)Tuple_type) < 0) return

  007a9	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Tuple_type
  007b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NKGIHGDI@Tuple?$AA@
  007b7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  007bc	e8 00 00 00 00	 call	 PyDict_SetItemString
  007c1	85 c0		 test	 eax, eax
  007c3	7d 07		 jge	 SHORT $LN52@PyInit__as

; 6864 :         NULL;

  007c5	33 c0		 xor	 eax, eax
  007c7	e9 f2 06 00 00	 jmp	 $LN109@PyInit__as
$LN52@PyInit__as:

; 6865 :     if (PyDict_SetItemString(d, "expr_context", (PyObject*)expr_context_type) <
; 6866 :         0) return NULL;

  007cc	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR expr_context_type
  007d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@GABLJPJB@expr_context?$AA@
  007da	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  007df	e8 00 00 00 00	 call	 PyDict_SetItemString
  007e4	85 c0		 test	 eax, eax
  007e6	7d 07		 jge	 SHORT $LN51@PyInit__as
  007e8	33 c0		 xor	 eax, eax
  007ea	e9 cf 06 00 00	 jmp	 $LN109@PyInit__as
$LN51@PyInit__as:

; 6867 :     if (PyDict_SetItemString(d, "Load", (PyObject*)Load_type) < 0) return NULL;

  007ef	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Load_type
  007f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IPBPFFEL@Load?$AA@
  007fd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00802	e8 00 00 00 00	 call	 PyDict_SetItemString
  00807	85 c0		 test	 eax, eax
  00809	7d 07		 jge	 SHORT $LN50@PyInit__as
  0080b	33 c0		 xor	 eax, eax
  0080d	e9 ac 06 00 00	 jmp	 $LN109@PyInit__as
$LN50@PyInit__as:

; 6868 :     if (PyDict_SetItemString(d, "Store", (PyObject*)Store_type) < 0) return

  00812	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Store_type
  00819	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OEMPKGID@Store?$AA@
  00820	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00825	e8 00 00 00 00	 call	 PyDict_SetItemString
  0082a	85 c0		 test	 eax, eax
  0082c	7d 07		 jge	 SHORT $LN49@PyInit__as

; 6869 :         NULL;

  0082e	33 c0		 xor	 eax, eax
  00830	e9 89 06 00 00	 jmp	 $LN109@PyInit__as
$LN49@PyInit__as:

; 6870 :     if (PyDict_SetItemString(d, "Del", (PyObject*)Del_type) < 0) return NULL;

  00835	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Del_type
  0083c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03ENJJMCOJ@Del?$AA@
  00843	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00848	e8 00 00 00 00	 call	 PyDict_SetItemString
  0084d	85 c0		 test	 eax, eax
  0084f	7d 07		 jge	 SHORT $LN48@PyInit__as
  00851	33 c0		 xor	 eax, eax
  00853	e9 66 06 00 00	 jmp	 $LN109@PyInit__as
$LN48@PyInit__as:

; 6871 :     if (PyDict_SetItemString(d, "AugLoad", (PyObject*)AugLoad_type) < 0) return

  00858	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR AugLoad_type
  0085f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07GCIJHPCC@AugLoad?$AA@
  00866	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0086b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00870	85 c0		 test	 eax, eax
  00872	7d 07		 jge	 SHORT $LN47@PyInit__as

; 6872 :         NULL;

  00874	33 c0		 xor	 eax, eax
  00876	e9 43 06 00 00	 jmp	 $LN109@PyInit__as
$LN47@PyInit__as:

; 6873 :     if (PyDict_SetItemString(d, "AugStore", (PyObject*)AugStore_type) < 0)

  0087b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR AugStore_type
  00882	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08NAEMOJFF@AugStore?$AA@
  00889	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0088e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00893	85 c0		 test	 eax, eax
  00895	7d 07		 jge	 SHORT $LN46@PyInit__as

; 6874 :         return NULL;

  00897	33 c0		 xor	 eax, eax
  00899	e9 20 06 00 00	 jmp	 $LN109@PyInit__as
$LN46@PyInit__as:

; 6875 :     if (PyDict_SetItemString(d, "Param", (PyObject*)Param_type) < 0) return

  0089e	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Param_type
  008a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05LOJBNELM@Param?$AA@
  008ac	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  008b1	e8 00 00 00 00	 call	 PyDict_SetItemString
  008b6	85 c0		 test	 eax, eax
  008b8	7d 07		 jge	 SHORT $LN45@PyInit__as

; 6876 :         NULL;

  008ba	33 c0		 xor	 eax, eax
  008bc	e9 fd 05 00 00	 jmp	 $LN109@PyInit__as
$LN45@PyInit__as:

; 6877 :     if (PyDict_SetItemString(d, "slice", (PyObject*)slice_type) < 0) return

  008c1	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR slice_type
  008c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05ILHMOJGN@slice?$AA@
  008cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  008d4	e8 00 00 00 00	 call	 PyDict_SetItemString
  008d9	85 c0		 test	 eax, eax
  008db	7d 07		 jge	 SHORT $LN44@PyInit__as

; 6878 :         NULL;

  008dd	33 c0		 xor	 eax, eax
  008df	e9 da 05 00 00	 jmp	 $LN109@PyInit__as
$LN44@PyInit__as:

; 6879 :     if (PyDict_SetItemString(d, "Slice", (PyObject*)Slice_type) < 0) return

  008e4	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Slice_type
  008eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IMNAOMFL@Slice?$AA@
  008f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  008f7	e8 00 00 00 00	 call	 PyDict_SetItemString
  008fc	85 c0		 test	 eax, eax
  008fe	7d 07		 jge	 SHORT $LN43@PyInit__as

; 6880 :         NULL;

  00900	33 c0		 xor	 eax, eax
  00902	e9 b7 05 00 00	 jmp	 $LN109@PyInit__as
$LN43@PyInit__as:

; 6881 :     if (PyDict_SetItemString(d, "ExtSlice", (PyObject*)ExtSlice_type) < 0)

  00907	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ExtSlice_type
  0090e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CIIMGBAD@ExtSlice?$AA@
  00915	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0091a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0091f	85 c0		 test	 eax, eax
  00921	7d 07		 jge	 SHORT $LN42@PyInit__as

; 6882 :         return NULL;

  00923	33 c0		 xor	 eax, eax
  00925	e9 94 05 00 00	 jmp	 $LN109@PyInit__as
$LN42@PyInit__as:

; 6883 :     if (PyDict_SetItemString(d, "Index", (PyObject*)Index_type) < 0) return

  0092a	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Index_type
  00931	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05FNNGFGLF@Index?$AA@
  00938	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0093d	e8 00 00 00 00	 call	 PyDict_SetItemString
  00942	85 c0		 test	 eax, eax
  00944	7d 07		 jge	 SHORT $LN41@PyInit__as

; 6884 :         NULL;

  00946	33 c0		 xor	 eax, eax
  00948	e9 71 05 00 00	 jmp	 $LN109@PyInit__as
$LN41@PyInit__as:

; 6885 :     if (PyDict_SetItemString(d, "boolop", (PyObject*)boolop_type) < 0) return

  0094d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR boolop_type
  00954	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IBDOJNAO@boolop?$AA@
  0095b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00960	e8 00 00 00 00	 call	 PyDict_SetItemString
  00965	85 c0		 test	 eax, eax
  00967	7d 07		 jge	 SHORT $LN40@PyInit__as

; 6886 :         NULL;

  00969	33 c0		 xor	 eax, eax
  0096b	e9 4e 05 00 00	 jmp	 $LN109@PyInit__as
$LN40@PyInit__as:

; 6887 :     if (PyDict_SetItemString(d, "And", (PyObject*)And_type) < 0) return NULL;

  00970	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR And_type
  00977	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03LOMLFHDC@And?$AA@
  0097e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00983	e8 00 00 00 00	 call	 PyDict_SetItemString
  00988	85 c0		 test	 eax, eax
  0098a	7d 07		 jge	 SHORT $LN39@PyInit__as
  0098c	33 c0		 xor	 eax, eax
  0098e	e9 2b 05 00 00	 jmp	 $LN109@PyInit__as
$LN39@PyInit__as:

; 6888 :     if (PyDict_SetItemString(d, "Or", (PyObject*)Or_type) < 0) return NULL;

  00993	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Or_type
  0099a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02GGHBPHGE@Or?$AA@
  009a1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  009a6	e8 00 00 00 00	 call	 PyDict_SetItemString
  009ab	85 c0		 test	 eax, eax
  009ad	7d 07		 jge	 SHORT $LN38@PyInit__as
  009af	33 c0		 xor	 eax, eax
  009b1	e9 08 05 00 00	 jmp	 $LN109@PyInit__as
$LN38@PyInit__as:

; 6889 :     if (PyDict_SetItemString(d, "operator", (PyObject*)operator_type) < 0)

  009b6	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR operator_type
  009bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LHJFAFGD@operator?$AA@
  009c4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  009c9	e8 00 00 00 00	 call	 PyDict_SetItemString
  009ce	85 c0		 test	 eax, eax
  009d0	7d 07		 jge	 SHORT $LN37@PyInit__as

; 6890 :         return NULL;

  009d2	33 c0		 xor	 eax, eax
  009d4	e9 e5 04 00 00	 jmp	 $LN109@PyInit__as
$LN37@PyInit__as:

; 6891 :     if (PyDict_SetItemString(d, "Add", (PyObject*)Add_type) < 0) return NULL;

  009d9	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Add_type
  009e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03LDFMNCOE@Add?$AA@
  009e7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  009ec	e8 00 00 00 00	 call	 PyDict_SetItemString
  009f1	85 c0		 test	 eax, eax
  009f3	7d 07		 jge	 SHORT $LN36@PyInit__as
  009f5	33 c0		 xor	 eax, eax
  009f7	e9 c2 04 00 00	 jmp	 $LN109@PyInit__as
$LN36@PyInit__as:

; 6892 :     if (PyDict_SetItemString(d, "Sub", (PyObject*)Sub_type) < 0) return NULL;

  009fc	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Sub_type
  00a03	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CPCCDDB@Sub?$AA@
  00a0a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00a0f	e8 00 00 00 00	 call	 PyDict_SetItemString
  00a14	85 c0		 test	 eax, eax
  00a16	7d 07		 jge	 SHORT $LN35@PyInit__as
  00a18	33 c0		 xor	 eax, eax
  00a1a	e9 9f 04 00 00	 jmp	 $LN109@PyInit__as
$LN35@PyInit__as:

; 6893 :     if (PyDict_SetItemString(d, "Mult", (PyObject*)Mult_type) < 0) return NULL;

  00a1f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Mult_type
  00a26	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MPMBEKAC@Mult?$AA@
  00a2d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00a32	e8 00 00 00 00	 call	 PyDict_SetItemString
  00a37	85 c0		 test	 eax, eax
  00a39	7d 07		 jge	 SHORT $LN34@PyInit__as
  00a3b	33 c0		 xor	 eax, eax
  00a3d	e9 7c 04 00 00	 jmp	 $LN109@PyInit__as
$LN34@PyInit__as:

; 6894 :     if (PyDict_SetItemString(d, "Div", (PyObject*)Div_type) < 0) return NULL;

  00a42	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Div_type
  00a49	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PEKOMBFG@Div?$AA@
  00a50	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00a55	e8 00 00 00 00	 call	 PyDict_SetItemString
  00a5a	85 c0		 test	 eax, eax
  00a5c	7d 07		 jge	 SHORT $LN33@PyInit__as
  00a5e	33 c0		 xor	 eax, eax
  00a60	e9 59 04 00 00	 jmp	 $LN109@PyInit__as
$LN33@PyInit__as:

; 6895 :     if (PyDict_SetItemString(d, "Mod", (PyObject*)Mod_type) < 0) return NULL;

  00a65	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Mod_type
  00a6c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PFNPICLN@Mod?$AA@
  00a73	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00a78	e8 00 00 00 00	 call	 PyDict_SetItemString
  00a7d	85 c0		 test	 eax, eax
  00a7f	7d 07		 jge	 SHORT $LN32@PyInit__as
  00a81	33 c0		 xor	 eax, eax
  00a83	e9 36 04 00 00	 jmp	 $LN109@PyInit__as
$LN32@PyInit__as:

; 6896 :     if (PyDict_SetItemString(d, "Pow", (PyObject*)Pow_type) < 0) return NULL;

  00a88	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Pow_type
  00a8f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DGEDEMGN@Pow?$AA@
  00a96	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00a9b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00aa0	85 c0		 test	 eax, eax
  00aa2	7d 07		 jge	 SHORT $LN31@PyInit__as
  00aa4	33 c0		 xor	 eax, eax
  00aa6	e9 13 04 00 00	 jmp	 $LN109@PyInit__as
$LN31@PyInit__as:

; 6897 :     if (PyDict_SetItemString(d, "LShift", (PyObject*)LShift_type) < 0) return

  00aab	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR LShift_type
  00ab2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IDEHMKLA@LShift?$AA@
  00ab9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00abe	e8 00 00 00 00	 call	 PyDict_SetItemString
  00ac3	85 c0		 test	 eax, eax
  00ac5	7d 07		 jge	 SHORT $LN30@PyInit__as

; 6898 :         NULL;

  00ac7	33 c0		 xor	 eax, eax
  00ac9	e9 f0 03 00 00	 jmp	 $LN109@PyInit__as
$LN30@PyInit__as:

; 6899 :     if (PyDict_SetItemString(d, "RShift", (PyObject*)RShift_type) < 0) return

  00ace	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR RShift_type
  00ad5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06LEKGCNCD@RShift?$AA@
  00adc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00ae1	e8 00 00 00 00	 call	 PyDict_SetItemString
  00ae6	85 c0		 test	 eax, eax
  00ae8	7d 07		 jge	 SHORT $LN29@PyInit__as

; 6900 :         NULL;

  00aea	33 c0		 xor	 eax, eax
  00aec	e9 cd 03 00 00	 jmp	 $LN109@PyInit__as
$LN29@PyInit__as:

; 6901 :     if (PyDict_SetItemString(d, "BitOr", (PyObject*)BitOr_type) < 0) return

  00af1	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR BitOr_type
  00af8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05BKBNAGEF@BitOr?$AA@
  00aff	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00b04	e8 00 00 00 00	 call	 PyDict_SetItemString
  00b09	85 c0		 test	 eax, eax
  00b0b	7d 07		 jge	 SHORT $LN28@PyInit__as

; 6902 :         NULL;

  00b0d	33 c0		 xor	 eax, eax
  00b0f	e9 aa 03 00 00	 jmp	 $LN109@PyInit__as
$LN28@PyInit__as:

; 6903 :     if (PyDict_SetItemString(d, "BitXor", (PyObject*)BitXor_type) < 0) return

  00b14	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR BitXor_type
  00b1b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06MCJFOMGI@BitXor?$AA@
  00b22	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00b27	e8 00 00 00 00	 call	 PyDict_SetItemString
  00b2c	85 c0		 test	 eax, eax
  00b2e	7d 07		 jge	 SHORT $LN27@PyInit__as

; 6904 :         NULL;

  00b30	33 c0		 xor	 eax, eax
  00b32	e9 87 03 00 00	 jmp	 $LN109@PyInit__as
$LN27@PyInit__as:

; 6905 :     if (PyDict_SetItemString(d, "BitAnd", (PyObject*)BitAnd_type) < 0) return

  00b37	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR BitAnd_type
  00b3e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06PCNOCLJN@BitAnd?$AA@
  00b45	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00b4a	e8 00 00 00 00	 call	 PyDict_SetItemString
  00b4f	85 c0		 test	 eax, eax
  00b51	7d 07		 jge	 SHORT $LN26@PyInit__as

; 6906 :         NULL;

  00b53	33 c0		 xor	 eax, eax
  00b55	e9 64 03 00 00	 jmp	 $LN109@PyInit__as
$LN26@PyInit__as:

; 6907 :     if (PyDict_SetItemString(d, "FloorDiv", (PyObject*)FloorDiv_type) < 0)

  00b5a	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR FloorDiv_type
  00b61	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BOGBPHLB@FloorDiv?$AA@
  00b68	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00b6d	e8 00 00 00 00	 call	 PyDict_SetItemString
  00b72	85 c0		 test	 eax, eax
  00b74	7d 07		 jge	 SHORT $LN25@PyInit__as

; 6908 :         return NULL;

  00b76	33 c0		 xor	 eax, eax
  00b78	e9 41 03 00 00	 jmp	 $LN109@PyInit__as
$LN25@PyInit__as:

; 6909 :     if (PyDict_SetItemString(d, "unaryop", (PyObject*)unaryop_type) < 0) return

  00b7d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR unaryop_type
  00b84	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JPNNPNHH@unaryop?$AA@
  00b8b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00b90	e8 00 00 00 00	 call	 PyDict_SetItemString
  00b95	85 c0		 test	 eax, eax
  00b97	7d 07		 jge	 SHORT $LN24@PyInit__as

; 6910 :         NULL;

  00b99	33 c0		 xor	 eax, eax
  00b9b	e9 1e 03 00 00	 jmp	 $LN109@PyInit__as
$LN24@PyInit__as:

; 6911 :     if (PyDict_SetItemString(d, "Invert", (PyObject*)Invert_type) < 0) return

  00ba0	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Invert_type
  00ba7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OHLCGMJD@Invert?$AA@
  00bae	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00bb3	e8 00 00 00 00	 call	 PyDict_SetItemString
  00bb8	85 c0		 test	 eax, eax
  00bba	7d 07		 jge	 SHORT $LN23@PyInit__as

; 6912 :         NULL;

  00bbc	33 c0		 xor	 eax, eax
  00bbe	e9 fb 02 00 00	 jmp	 $LN109@PyInit__as
$LN23@PyInit__as:

; 6913 :     if (PyDict_SetItemString(d, "Not", (PyObject*)Not_type) < 0) return NULL;

  00bc3	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Not_type
  00bca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03KNKIDPAC@Not?$AA@
  00bd1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00bd6	e8 00 00 00 00	 call	 PyDict_SetItemString
  00bdb	85 c0		 test	 eax, eax
  00bdd	7d 07		 jge	 SHORT $LN22@PyInit__as
  00bdf	33 c0		 xor	 eax, eax
  00be1	e9 d8 02 00 00	 jmp	 $LN109@PyInit__as
$LN22@PyInit__as:

; 6914 :     if (PyDict_SetItemString(d, "UAdd", (PyObject*)UAdd_type) < 0) return NULL;

  00be6	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR UAdd_type
  00bed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KEMJLKFO@UAdd?$AA@
  00bf4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00bf9	e8 00 00 00 00	 call	 PyDict_SetItemString
  00bfe	85 c0		 test	 eax, eax
  00c00	7d 07		 jge	 SHORT $LN21@PyInit__as
  00c02	33 c0		 xor	 eax, eax
  00c04	e9 b5 02 00 00	 jmp	 $LN109@PyInit__as
$LN21@PyInit__as:

; 6915 :     if (PyDict_SetItemString(d, "USub", (PyObject*)USub_type) < 0) return NULL;

  00c09	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR USub_type
  00c10	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BFGHELIL@USub?$AA@
  00c17	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00c1c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00c21	85 c0		 test	 eax, eax
  00c23	7d 07		 jge	 SHORT $LN20@PyInit__as
  00c25	33 c0		 xor	 eax, eax
  00c27	e9 92 02 00 00	 jmp	 $LN109@PyInit__as
$LN20@PyInit__as:

; 6916 :     if (PyDict_SetItemString(d, "cmpop", (PyObject*)cmpop_type) < 0) return

  00c2c	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR cmpop_type
  00c33	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KGHEMFCD@cmpop?$AA@
  00c3a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00c3f	e8 00 00 00 00	 call	 PyDict_SetItemString
  00c44	85 c0		 test	 eax, eax
  00c46	7d 07		 jge	 SHORT $LN19@PyInit__as

; 6917 :         NULL;

  00c48	33 c0		 xor	 eax, eax
  00c4a	e9 6f 02 00 00	 jmp	 $LN109@PyInit__as
$LN19@PyInit__as:

; 6918 :     if (PyDict_SetItemString(d, "Eq", (PyObject*)Eq_type) < 0) return NULL;

  00c4f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Eq_type
  00c56	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02EAMLCBHB@Eq?$AA@
  00c5d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00c62	e8 00 00 00 00	 call	 PyDict_SetItemString
  00c67	85 c0		 test	 eax, eax
  00c69	7d 07		 jge	 SHORT $LN18@PyInit__as
  00c6b	33 c0		 xor	 eax, eax
  00c6d	e9 4c 02 00 00	 jmp	 $LN109@PyInit__as
$LN18@PyInit__as:

; 6919 :     if (PyDict_SetItemString(d, "NotEq", (PyObject*)NotEq_type) < 0) return

  00c72	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR NotEq_type
  00c79	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MECFOFIL@NotEq?$AA@
  00c80	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00c85	e8 00 00 00 00	 call	 PyDict_SetItemString
  00c8a	85 c0		 test	 eax, eax
  00c8c	7d 07		 jge	 SHORT $LN17@PyInit__as

; 6920 :         NULL;

  00c8e	33 c0		 xor	 eax, eax
  00c90	e9 29 02 00 00	 jmp	 $LN109@PyInit__as
$LN17@PyInit__as:

; 6921 :     if (PyDict_SetItemString(d, "Lt", (PyObject*)Lt_type) < 0) return NULL;

  00c95	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Lt_type
  00c9c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DCGNOOLL@Lt?$AA@
  00ca3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00ca8	e8 00 00 00 00	 call	 PyDict_SetItemString
  00cad	85 c0		 test	 eax, eax
  00caf	7d 07		 jge	 SHORT $LN16@PyInit__as
  00cb1	33 c0		 xor	 eax, eax
  00cb3	e9 06 02 00 00	 jmp	 $LN109@PyInit__as
$LN16@PyInit__as:

; 6922 :     if (PyDict_SetItemString(d, "LtE", (PyObject*)LtE_type) < 0) return NULL;

  00cb8	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR LtE_type
  00cbf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03NBIPLMKK@LtE?$AA@
  00cc6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00ccb	e8 00 00 00 00	 call	 PyDict_SetItemString
  00cd0	85 c0		 test	 eax, eax
  00cd2	7d 07		 jge	 SHORT $LN15@PyInit__as
  00cd4	33 c0		 xor	 eax, eax
  00cd6	e9 e3 01 00 00	 jmp	 $LN109@PyInit__as
$LN15@PyInit__as:

; 6923 :     if (PyDict_SetItemString(d, "Gt", (PyObject*)Gt_type) < 0) return NULL;

  00cdb	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Gt_type
  00ce2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DODIABFK@Gt?$AA@
  00ce9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00cee	e8 00 00 00 00	 call	 PyDict_SetItemString
  00cf3	85 c0		 test	 eax, eax
  00cf5	7d 07		 jge	 SHORT $LN14@PyInit__as
  00cf7	33 c0		 xor	 eax, eax
  00cf9	e9 c0 01 00 00	 jmp	 $LN109@PyInit__as
$LN14@PyInit__as:

; 6924 :     if (PyDict_SetItemString(d, "GtE", (PyObject*)GtE_type) < 0) return NULL;

  00cfe	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR GtE_type
  00d05	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03GIODLKL@GtE?$AA@
  00d0c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00d11	e8 00 00 00 00	 call	 PyDict_SetItemString
  00d16	85 c0		 test	 eax, eax
  00d18	7d 07		 jge	 SHORT $LN13@PyInit__as
  00d1a	33 c0		 xor	 eax, eax
  00d1c	e9 9d 01 00 00	 jmp	 $LN109@PyInit__as
$LN13@PyInit__as:

; 6925 :     if (PyDict_SetItemString(d, "Is", (PyObject*)Is_type) < 0) return NULL;

  00d21	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR Is_type
  00d28	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02HLOHLKJH@Is?$AA@
  00d2f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00d34	e8 00 00 00 00	 call	 PyDict_SetItemString
  00d39	85 c0		 test	 eax, eax
  00d3b	7d 07		 jge	 SHORT $LN12@PyInit__as
  00d3d	33 c0		 xor	 eax, eax
  00d3f	e9 7a 01 00 00	 jmp	 $LN109@PyInit__as
$LN12@PyInit__as:

; 6926 :     if (PyDict_SetItemString(d, "IsNot", (PyObject*)IsNot_type) < 0) return

  00d44	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR IsNot_type
  00d4b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KLALIAAG@IsNot?$AA@
  00d52	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00d57	e8 00 00 00 00	 call	 PyDict_SetItemString
  00d5c	85 c0		 test	 eax, eax
  00d5e	7d 07		 jge	 SHORT $LN11@PyInit__as

; 6927 :         NULL;

  00d60	33 c0		 xor	 eax, eax
  00d62	e9 57 01 00 00	 jmp	 $LN109@PyInit__as
$LN11@PyInit__as:

; 6928 :     if (PyDict_SetItemString(d, "In", (PyObject*)In_type) < 0) return NULL;

  00d67	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR In_type
  00d6e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02IEILNGIL@In?$AA@
  00d75	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00d7a	e8 00 00 00 00	 call	 PyDict_SetItemString
  00d7f	85 c0		 test	 eax, eax
  00d81	7d 07		 jge	 SHORT $LN10@PyInit__as
  00d83	33 c0		 xor	 eax, eax
  00d85	e9 34 01 00 00	 jmp	 $LN109@PyInit__as
$LN10@PyInit__as:

; 6929 :     if (PyDict_SetItemString(d, "NotIn", (PyObject*)NotIn_type) < 0) return

  00d8a	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR NotIn_type
  00d91	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GFBCHB@NotIn?$AA@
  00d98	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00d9d	e8 00 00 00 00	 call	 PyDict_SetItemString
  00da2	85 c0		 test	 eax, eax
  00da4	7d 07		 jge	 SHORT $LN9@PyInit__as

; 6930 :         NULL;

  00da6	33 c0		 xor	 eax, eax
  00da8	e9 11 01 00 00	 jmp	 $LN109@PyInit__as
$LN9@PyInit__as:

; 6931 :     if (PyDict_SetItemString(d, "comprehension", (PyObject*)comprehension_type)
; 6932 :         < 0) return NULL;

  00dad	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR comprehension_type
  00db4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@PDDLNDDO@comprehension?$AA@
  00dbb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00dc0	e8 00 00 00 00	 call	 PyDict_SetItemString
  00dc5	85 c0		 test	 eax, eax
  00dc7	7d 07		 jge	 SHORT $LN8@PyInit__as
  00dc9	33 c0		 xor	 eax, eax
  00dcb	e9 ee 00 00 00	 jmp	 $LN109@PyInit__as
$LN8@PyInit__as:

; 6933 :     if (PyDict_SetItemString(d, "excepthandler", (PyObject*)excepthandler_type)
; 6934 :         < 0) return NULL;

  00dd0	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR excepthandler_type
  00dd7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LBOCECKK@excepthandler?$AA@
  00dde	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00de3	e8 00 00 00 00	 call	 PyDict_SetItemString
  00de8	85 c0		 test	 eax, eax
  00dea	7d 07		 jge	 SHORT $LN7@PyInit__as
  00dec	33 c0		 xor	 eax, eax
  00dee	e9 cb 00 00 00	 jmp	 $LN109@PyInit__as
$LN7@PyInit__as:

; 6935 :     if (PyDict_SetItemString(d, "ExceptHandler", (PyObject*)ExceptHandler_type)
; 6936 :         < 0) return NULL;

  00df3	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ExceptHandler_type
  00dfa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@IFPAFICE@ExceptHandler?$AA@
  00e01	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00e06	e8 00 00 00 00	 call	 PyDict_SetItemString
  00e0b	85 c0		 test	 eax, eax
  00e0d	7d 07		 jge	 SHORT $LN6@PyInit__as
  00e0f	33 c0		 xor	 eax, eax
  00e11	e9 a8 00 00 00	 jmp	 $LN109@PyInit__as
$LN6@PyInit__as:

; 6937 :     if (PyDict_SetItemString(d, "arguments", (PyObject*)arguments_type) < 0)

  00e16	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR arguments_type
  00e1d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09PBNAMLIK@arguments?$AA@
  00e24	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00e29	e8 00 00 00 00	 call	 PyDict_SetItemString
  00e2e	85 c0		 test	 eax, eax
  00e30	7d 07		 jge	 SHORT $LN5@PyInit__as

; 6938 :         return NULL;

  00e32	33 c0		 xor	 eax, eax
  00e34	e9 85 00 00 00	 jmp	 $LN109@PyInit__as
$LN5@PyInit__as:

; 6939 :     if (PyDict_SetItemString(d, "arg", (PyObject*)arg_type) < 0) return NULL;

  00e39	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR arg_type
  00e40	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03CAOIPBNL@arg?$AA@
  00e47	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00e4c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00e51	85 c0		 test	 eax, eax
  00e53	7d 04		 jge	 SHORT $LN4@PyInit__as
  00e55	33 c0		 xor	 eax, eax
  00e57	eb 65		 jmp	 SHORT $LN109@PyInit__as
$LN4@PyInit__as:

; 6940 :     if (PyDict_SetItemString(d, "keyword", (PyObject*)keyword_type) < 0) return

  00e59	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR keyword_type
  00e60	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JMKMGKCH@keyword?$AA@
  00e67	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00e6c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00e71	85 c0		 test	 eax, eax
  00e73	7d 04		 jge	 SHORT $LN3@PyInit__as

; 6941 :         NULL;

  00e75	33 c0		 xor	 eax, eax
  00e77	eb 45		 jmp	 SHORT $LN109@PyInit__as
$LN3@PyInit__as:

; 6942 :     if (PyDict_SetItemString(d, "alias", (PyObject*)alias_type) < 0) return

  00e79	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR alias_type
  00e80	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NKHOCLEE@alias?$AA@
  00e87	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00e8c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00e91	85 c0		 test	 eax, eax
  00e93	7d 04		 jge	 SHORT $LN2@PyInit__as

; 6943 :         NULL;

  00e95	33 c0		 xor	 eax, eax
  00e97	eb 25		 jmp	 SHORT $LN109@PyInit__as
$LN2@PyInit__as:

; 6944 :     if (PyDict_SetItemString(d, "withitem", (PyObject*)withitem_type) < 0)

  00e99	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR withitem_type
  00ea0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08FACALJAE@withitem?$AA@
  00ea7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00eac	e8 00 00 00 00	 call	 PyDict_SetItemString
  00eb1	85 c0		 test	 eax, eax
  00eb3	7d 04		 jge	 SHORT $LN1@PyInit__as

; 6945 :         return NULL;

  00eb5	33 c0		 xor	 eax, eax
  00eb7	eb 05		 jmp	 SHORT $LN109@PyInit__as
$LN1@PyInit__as:

; 6946 :     return m;

  00eb9	48 8b 44 24 28	 mov	 rax, QWORD PTR m$[rsp]
$LN109@PyInit__as:

; 6947 : }

  00ebe	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00ec2	c3		 ret	 0
PyInit__ast ENDP
_TEXT	ENDS
_BSS	SEGMENT
NotIn_singleton DQ 01H DUP (?)
In_singleton DQ	01H DUP (?)
IsNot_singleton DQ 01H DUP (?)
Is_singleton DQ	01H DUP (?)
GtE_singleton DQ 01H DUP (?)
Gt_singleton DQ	01H DUP (?)
LtE_singleton DQ 01H DUP (?)
Lt_singleton DQ	01H DUP (?)
NotEq_singleton DQ 01H DUP (?)
Eq_singleton DQ	01H DUP (?)
USub_singleton DQ 01H DUP (?)
UAdd_singleton DQ 01H DUP (?)
Not_singleton DQ 01H DUP (?)
Invert_singleton DQ 01H DUP (?)
FloorDiv_singleton DQ 01H DUP (?)
BitAnd_singleton DQ 01H DUP (?)
BitXor_singleton DQ 01H DUP (?)
BitOr_singleton DQ 01H DUP (?)
RShift_singleton DQ 01H DUP (?)
LShift_singleton DQ 01H DUP (?)
Pow_singleton DQ 01H DUP (?)
Mod_singleton DQ 01H DUP (?)
Div_singleton DQ 01H DUP (?)
Mult_singleton DQ 01H DUP (?)
Sub_singleton DQ 01H DUP (?)
Add_singleton DQ 01H DUP (?)
Or_singleton DQ	01H DUP (?)
And_singleton DQ 01H DUP (?)
Param_singleton DQ 01H DUP (?)
AugStore_singleton DQ 01H DUP (?)
AugLoad_singleton DQ 01H DUP (?)
Del_singleton DQ 01H DUP (?)
Store_singleton DQ 01H DUP (?)
Load_singleton DQ 01H DUP (?)
?initialized@?1??init_types@@9@9 DD 01H DUP (?)		; `init_types'::`2'::initialized
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_types DD imagerel init_types
	DD	imagerel init_types+7236
	DD	imagerel $unwind$init_types
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_types DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT init_types
_TEXT	SEGMENT
init_types PROC						; COMDAT

; 763  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 764  :     static int initialized;
; 765  :     if (initialized) return 1;

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?initialized@?1??init_types@@9@9, 0
  0000b	74 0a		 je	 SHORT $LN150@init_types
  0000d	b8 01 00 00 00	 mov	 eax, 1
  00012	e9 28 1c 00 00	 jmp	 $LN151@init_types
$LN150@init_types:

; 766  :     if (add_ast_fields() < 0) return 0;

  00017	e8 00 00 00 00	 call	 add_ast_fields
  0001c	85 c0		 test	 eax, eax
  0001e	7d 07		 jge	 SHORT $LN149@init_types
  00020	33 c0		 xor	 eax, eax
  00022	e9 18 1c 00 00	 jmp	 $LN151@init_types
$LN149@init_types:

; 767  :     mod_type = make_type("mod", &AST_type, NULL, 0);

  00027	45 33 c9	 xor	 r9d, r9d
  0002a	45 33 c0	 xor	 r8d, r8d
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FFONCNID@mod?$AA@
  0003b	e8 00 00 00 00	 call	 make_type
  00040	48 89 05 00 00
	00 00		 mov	 QWORD PTR mod_type, rax

; 768  :     if (!mod_type) return 0;

  00047	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR mod_type, 0
  0004f	75 07		 jne	 SHORT $LN148@init_types
  00051	33 c0		 xor	 eax, eax
  00053	e9 e7 1b 00 00	 jmp	 $LN151@init_types
$LN148@init_types:

; 769  :     if (!add_attributes(mod_type, NULL, 0)) return 0;

  00058	45 33 c0	 xor	 r8d, r8d
  0005b	33 d2		 xor	 edx, edx
  0005d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR mod_type
  00064	e8 00 00 00 00	 call	 add_attributes
  00069	85 c0		 test	 eax, eax
  0006b	75 07		 jne	 SHORT $LN147@init_types
  0006d	33 c0		 xor	 eax, eax
  0006f	e9 cb 1b 00 00	 jmp	 $LN151@init_types
$LN147@init_types:

; 770  :     Module_type = make_type("Module", mod_type, Module_fields, 1);

  00074	41 b9 01 00 00
	00		 mov	 r9d, 1
  0007a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Module_fields
  00081	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR mod_type
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06NHPJKFDC@Module?$AA@
  0008f	e8 00 00 00 00	 call	 make_type
  00094	48 89 05 00 00
	00 00		 mov	 QWORD PTR Module_type, rax

; 771  :     if (!Module_type) return 0;

  0009b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Module_type, 0
  000a3	75 07		 jne	 SHORT $LN146@init_types
  000a5	33 c0		 xor	 eax, eax
  000a7	e9 93 1b 00 00	 jmp	 $LN151@init_types
$LN146@init_types:

; 772  :     Interactive_type = make_type("Interactive", mod_type, Interactive_fields,
; 773  :                                  1);

  000ac	41 b9 01 00 00
	00		 mov	 r9d, 1
  000b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Interactive_fields
  000b9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR mod_type
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@INEKDBAI@Interactive?$AA@
  000c7	e8 00 00 00 00	 call	 make_type
  000cc	48 89 05 00 00
	00 00		 mov	 QWORD PTR Interactive_type, rax

; 774  :     if (!Interactive_type) return 0;

  000d3	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Interactive_type, 0
  000db	75 07		 jne	 SHORT $LN145@init_types
  000dd	33 c0		 xor	 eax, eax
  000df	e9 5b 1b 00 00	 jmp	 $LN151@init_types
$LN145@init_types:

; 775  :     Expression_type = make_type("Expression", mod_type, Expression_fields, 1);

  000e4	41 b9 01 00 00
	00		 mov	 r9d, 1
  000ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Expression_fields
  000f1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR mod_type
  000f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NMLOJPGF@Expression?$AA@
  000ff	e8 00 00 00 00	 call	 make_type
  00104	48 89 05 00 00
	00 00		 mov	 QWORD PTR Expression_type, rax

; 776  :     if (!Expression_type) return 0;

  0010b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Expression_type, 0
  00113	75 07		 jne	 SHORT $LN144@init_types
  00115	33 c0		 xor	 eax, eax
  00117	e9 23 1b 00 00	 jmp	 $LN151@init_types
$LN144@init_types:

; 777  :     Suite_type = make_type("Suite", mod_type, Suite_fields, 1);

  0011c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00122	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Suite_fields
  00129	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR mod_type
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05PIEJKMFN@Suite?$AA@
  00137	e8 00 00 00 00	 call	 make_type
  0013c	48 89 05 00 00
	00 00		 mov	 QWORD PTR Suite_type, rax

; 778  :     if (!Suite_type) return 0;

  00143	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Suite_type, 0
  0014b	75 07		 jne	 SHORT $LN143@init_types
  0014d	33 c0		 xor	 eax, eax
  0014f	e9 eb 1a 00 00	 jmp	 $LN151@init_types
$LN143@init_types:

; 779  :     stmt_type = make_type("stmt", &AST_type, NULL, 0);

  00154	45 33 c9	 xor	 r9d, r9d
  00157	45 33 c0	 xor	 r8d, r8d
  0015a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GIKOEBLH@stmt?$AA@
  00168	e8 00 00 00 00	 call	 make_type
  0016d	48 89 05 00 00
	00 00		 mov	 QWORD PTR stmt_type, rax

; 780  :     if (!stmt_type) return 0;

  00174	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR stmt_type, 0
  0017c	75 07		 jne	 SHORT $LN142@init_types
  0017e	33 c0		 xor	 eax, eax
  00180	e9 ba 1a 00 00	 jmp	 $LN151@init_types
$LN142@init_types:

; 781  :     if (!add_attributes(stmt_type, stmt_attributes, 2)) return 0;

  00185	41 b8 02 00 00
	00		 mov	 r8d, 2
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:stmt_attributes
  00192	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR stmt_type
  00199	e8 00 00 00 00	 call	 add_attributes
  0019e	85 c0		 test	 eax, eax
  001a0	75 07		 jne	 SHORT $LN141@init_types
  001a2	33 c0		 xor	 eax, eax
  001a4	e9 96 1a 00 00	 jmp	 $LN151@init_types
$LN141@init_types:

; 782  :     FunctionDef_type = make_type("FunctionDef", stmt_type, FunctionDef_fields,
; 783  :                                  5);

  001a9	41 b9 05 00 00
	00		 mov	 r9d, 5
  001af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:FunctionDef_fields
  001b6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  001bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@POJILEOM@FunctionDef?$AA@
  001c4	e8 00 00 00 00	 call	 make_type
  001c9	48 89 05 00 00
	00 00		 mov	 QWORD PTR FunctionDef_type, rax

; 784  :     if (!FunctionDef_type) return 0;

  001d0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR FunctionDef_type, 0
  001d8	75 07		 jne	 SHORT $LN140@init_types
  001da	33 c0		 xor	 eax, eax
  001dc	e9 5e 1a 00 00	 jmp	 $LN151@init_types
$LN140@init_types:

; 785  :     ClassDef_type = make_type("ClassDef", stmt_type, ClassDef_fields, 7);

  001e1	41 b9 07 00 00
	00		 mov	 r9d, 7
  001e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ClassDef_fields
  001ee	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  001f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OGFMJMG@ClassDef?$AA@
  001fc	e8 00 00 00 00	 call	 make_type
  00201	48 89 05 00 00
	00 00		 mov	 QWORD PTR ClassDef_type, rax

; 786  :     if (!ClassDef_type) return 0;

  00208	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ClassDef_type, 0
  00210	75 07		 jne	 SHORT $LN139@init_types
  00212	33 c0		 xor	 eax, eax
  00214	e9 26 1a 00 00	 jmp	 $LN151@init_types
$LN139@init_types:

; 787  :     Return_type = make_type("Return", stmt_type, Return_fields, 1);

  00219	41 b9 01 00 00
	00		 mov	 r9d, 1
  0021f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Return_fields
  00226	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  0022d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HCFIKKEA@Return?$AA@
  00234	e8 00 00 00 00	 call	 make_type
  00239	48 89 05 00 00
	00 00		 mov	 QWORD PTR Return_type, rax

; 788  :     if (!Return_type) return 0;

  00240	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Return_type, 0
  00248	75 07		 jne	 SHORT $LN138@init_types
  0024a	33 c0		 xor	 eax, eax
  0024c	e9 ee 19 00 00	 jmp	 $LN151@init_types
$LN138@init_types:

; 789  :     Delete_type = make_type("Delete", stmt_type, Delete_fields, 1);

  00251	41 b9 01 00 00
	00		 mov	 r9d, 1
  00257	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Delete_fields
  0025e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06JBKGCNBB@Delete?$AA@
  0026c	e8 00 00 00 00	 call	 make_type
  00271	48 89 05 00 00
	00 00		 mov	 QWORD PTR Delete_type, rax

; 790  :     if (!Delete_type) return 0;

  00278	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Delete_type, 0
  00280	75 07		 jne	 SHORT $LN137@init_types
  00282	33 c0		 xor	 eax, eax
  00284	e9 b6 19 00 00	 jmp	 $LN151@init_types
$LN137@init_types:

; 791  :     Assign_type = make_type("Assign", stmt_type, Assign_fields, 2);

  00289	41 b9 02 00 00
	00		 mov	 r9d, 2
  0028f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Assign_fields
  00296	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  0029d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06EDODJIDJ@Assign?$AA@
  002a4	e8 00 00 00 00	 call	 make_type
  002a9	48 89 05 00 00
	00 00		 mov	 QWORD PTR Assign_type, rax

; 792  :     if (!Assign_type) return 0;

  002b0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Assign_type, 0
  002b8	75 07		 jne	 SHORT $LN136@init_types
  002ba	33 c0		 xor	 eax, eax
  002bc	e9 7e 19 00 00	 jmp	 $LN151@init_types
$LN136@init_types:

; 793  :     AugAssign_type = make_type("AugAssign", stmt_type, AugAssign_fields, 3);

  002c1	41 b9 03 00 00
	00		 mov	 r9d, 3
  002c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:AugAssign_fields
  002ce	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  002d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CMGHGMJH@AugAssign?$AA@
  002dc	e8 00 00 00 00	 call	 make_type
  002e1	48 89 05 00 00
	00 00		 mov	 QWORD PTR AugAssign_type, rax

; 794  :     if (!AugAssign_type) return 0;

  002e8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR AugAssign_type, 0
  002f0	75 07		 jne	 SHORT $LN135@init_types
  002f2	33 c0		 xor	 eax, eax
  002f4	e9 46 19 00 00	 jmp	 $LN151@init_types
$LN135@init_types:

; 795  :     For_type = make_type("For", stmt_type, For_fields, 4);

  002f9	41 b9 04 00 00
	00		 mov	 r9d, 4
  002ff	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:For_fields
  00306	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  0030d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03DOEGLAGL@For?$AA@
  00314	e8 00 00 00 00	 call	 make_type
  00319	48 89 05 00 00
	00 00		 mov	 QWORD PTR For_type, rax

; 796  :     if (!For_type) return 0;

  00320	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR For_type, 0
  00328	75 07		 jne	 SHORT $LN134@init_types
  0032a	33 c0		 xor	 eax, eax
  0032c	e9 0e 19 00 00	 jmp	 $LN151@init_types
$LN134@init_types:

; 797  :     While_type = make_type("While", stmt_type, While_fields, 3);

  00331	41 b9 03 00 00
	00		 mov	 r9d, 3
  00337	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:While_fields
  0033e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00345	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OJJNEPLA@While?$AA@
  0034c	e8 00 00 00 00	 call	 make_type
  00351	48 89 05 00 00
	00 00		 mov	 QWORD PTR While_type, rax

; 798  :     if (!While_type) return 0;

  00358	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR While_type, 0
  00360	75 07		 jne	 SHORT $LN133@init_types
  00362	33 c0		 xor	 eax, eax
  00364	e9 d6 18 00 00	 jmp	 $LN151@init_types
$LN133@init_types:

; 799  :     If_type = make_type("If", stmt_type, If_fields, 3);

  00369	41 b9 03 00 00
	00		 mov	 r9d, 3
  0036f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:If_fields
  00376	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  0037d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02EMFCFMID@If?$AA@
  00384	e8 00 00 00 00	 call	 make_type
  00389	48 89 05 00 00
	00 00		 mov	 QWORD PTR If_type, rax

; 800  :     if (!If_type) return 0;

  00390	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR If_type, 0
  00398	75 07		 jne	 SHORT $LN132@init_types
  0039a	33 c0		 xor	 eax, eax
  0039c	e9 9e 18 00 00	 jmp	 $LN151@init_types
$LN132@init_types:

; 801  :     With_type = make_type("With", stmt_type, With_fields, 2);

  003a1	41 b9 02 00 00
	00		 mov	 r9d, 2
  003a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:With_fields
  003ae	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  003b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LBMICJD@With?$AA@
  003bc	e8 00 00 00 00	 call	 make_type
  003c1	48 89 05 00 00
	00 00		 mov	 QWORD PTR With_type, rax

; 802  :     if (!With_type) return 0;

  003c8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR With_type, 0
  003d0	75 07		 jne	 SHORT $LN131@init_types
  003d2	33 c0		 xor	 eax, eax
  003d4	e9 66 18 00 00	 jmp	 $LN151@init_types
$LN131@init_types:

; 803  :     Raise_type = make_type("Raise", stmt_type, Raise_fields, 2);

  003d9	41 b9 02 00 00
	00		 mov	 r9d, 2
  003df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Raise_fields
  003e6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  003ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KDDKFIDP@Raise?$AA@
  003f4	e8 00 00 00 00	 call	 make_type
  003f9	48 89 05 00 00
	00 00		 mov	 QWORD PTR Raise_type, rax

; 804  :     if (!Raise_type) return 0;

  00400	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Raise_type, 0
  00408	75 07		 jne	 SHORT $LN130@init_types
  0040a	33 c0		 xor	 eax, eax
  0040c	e9 2e 18 00 00	 jmp	 $LN151@init_types
$LN130@init_types:

; 805  :     Try_type = make_type("Try", stmt_type, Try_fields, 4);

  00411	41 b9 04 00 00
	00		 mov	 r9d, 4
  00417	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Try_fields
  0041e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00425	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03DDFMMGJH@Try?$AA@
  0042c	e8 00 00 00 00	 call	 make_type
  00431	48 89 05 00 00
	00 00		 mov	 QWORD PTR Try_type, rax

; 806  :     if (!Try_type) return 0;

  00438	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Try_type, 0
  00440	75 07		 jne	 SHORT $LN129@init_types
  00442	33 c0		 xor	 eax, eax
  00444	e9 f6 17 00 00	 jmp	 $LN151@init_types
$LN129@init_types:

; 807  :     Assert_type = make_type("Assert", stmt_type, Assert_fields, 2);

  00449	41 b9 02 00 00
	00		 mov	 r9d, 2
  0044f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Assert_fields
  00456	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  0045d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDPFLMMB@Assert?$AA@
  00464	e8 00 00 00 00	 call	 make_type
  00469	48 89 05 00 00
	00 00		 mov	 QWORD PTR Assert_type, rax

; 808  :     if (!Assert_type) return 0;

  00470	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Assert_type, 0
  00478	75 07		 jne	 SHORT $LN128@init_types
  0047a	33 c0		 xor	 eax, eax
  0047c	e9 be 17 00 00	 jmp	 $LN151@init_types
$LN128@init_types:

; 809  :     Import_type = make_type("Import", stmt_type, Import_fields, 1);

  00481	41 b9 01 00 00
	00		 mov	 r9d, 1
  00487	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Import_fields
  0048e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00495	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IBNLALPJ@Import?$AA@
  0049c	e8 00 00 00 00	 call	 make_type
  004a1	48 89 05 00 00
	00 00		 mov	 QWORD PTR Import_type, rax

; 810  :     if (!Import_type) return 0;

  004a8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Import_type, 0
  004b0	75 07		 jne	 SHORT $LN127@init_types
  004b2	33 c0		 xor	 eax, eax
  004b4	e9 86 17 00 00	 jmp	 $LN151@init_types
$LN127@init_types:

; 811  :     ImportFrom_type = make_type("ImportFrom", stmt_type, ImportFrom_fields, 3);

  004b9	41 b9 03 00 00
	00		 mov	 r9d, 3
  004bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ImportFrom_fields
  004c6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  004cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IKBFEFKH@ImportFrom?$AA@
  004d4	e8 00 00 00 00	 call	 make_type
  004d9	48 89 05 00 00
	00 00		 mov	 QWORD PTR ImportFrom_type, rax

; 812  :     if (!ImportFrom_type) return 0;

  004e0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ImportFrom_type, 0
  004e8	75 07		 jne	 SHORT $LN126@init_types
  004ea	33 c0		 xor	 eax, eax
  004ec	e9 4e 17 00 00	 jmp	 $LN151@init_types
$LN126@init_types:

; 813  :     Global_type = make_type("Global", stmt_type, Global_fields, 1);

  004f1	41 b9 01 00 00
	00		 mov	 r9d, 1
  004f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Global_fields
  004fe	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00505	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06JGBJPOPP@Global?$AA@
  0050c	e8 00 00 00 00	 call	 make_type
  00511	48 89 05 00 00
	00 00		 mov	 QWORD PTR Global_type, rax

; 814  :     if (!Global_type) return 0;

  00518	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Global_type, 0
  00520	75 07		 jne	 SHORT $LN125@init_types
  00522	33 c0		 xor	 eax, eax
  00524	e9 16 17 00 00	 jmp	 $LN151@init_types
$LN125@init_types:

; 815  :     Nonlocal_type = make_type("Nonlocal", stmt_type, Nonlocal_fields, 1);

  00529	41 b9 01 00 00
	00		 mov	 r9d, 1
  0052f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Nonlocal_fields
  00536	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BAHOEEIH@Nonlocal?$AA@
  00544	e8 00 00 00 00	 call	 make_type
  00549	48 89 05 00 00
	00 00		 mov	 QWORD PTR Nonlocal_type, rax

; 816  :     if (!Nonlocal_type) return 0;

  00550	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Nonlocal_type, 0
  00558	75 07		 jne	 SHORT $LN124@init_types
  0055a	33 c0		 xor	 eax, eax
  0055c	e9 de 16 00 00	 jmp	 $LN151@init_types
$LN124@init_types:

; 817  :     Expr_type = make_type("Expr", stmt_type, Expr_fields, 1);

  00561	41 b9 01 00 00
	00		 mov	 r9d, 1
  00567	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Expr_fields
  0056e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00575	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04EOLNCEIM@Expr?$AA@
  0057c	e8 00 00 00 00	 call	 make_type
  00581	48 89 05 00 00
	00 00		 mov	 QWORD PTR Expr_type, rax

; 818  :     if (!Expr_type) return 0;

  00588	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Expr_type, 0
  00590	75 07		 jne	 SHORT $LN123@init_types
  00592	33 c0		 xor	 eax, eax
  00594	e9 a6 16 00 00	 jmp	 $LN151@init_types
$LN123@init_types:

; 819  :     Pass_type = make_type("Pass", stmt_type, NULL, 0);

  00599	45 33 c9	 xor	 r9d, r9d
  0059c	45 33 c0	 xor	 r8d, r8d
  0059f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  005a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NAPBKLHD@Pass?$AA@
  005ad	e8 00 00 00 00	 call	 make_type
  005b2	48 89 05 00 00
	00 00		 mov	 QWORD PTR Pass_type, rax

; 820  :     if (!Pass_type) return 0;

  005b9	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Pass_type, 0
  005c1	75 07		 jne	 SHORT $LN122@init_types
  005c3	33 c0		 xor	 eax, eax
  005c5	e9 75 16 00 00	 jmp	 $LN151@init_types
$LN122@init_types:

; 821  :     Break_type = make_type("Break", stmt_type, NULL, 0);

  005ca	45 33 c9	 xor	 r9d, r9d
  005cd	45 33 c0	 xor	 r8d, r8d
  005d0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  005d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EMFLFCNO@Break?$AA@
  005de	e8 00 00 00 00	 call	 make_type
  005e3	48 89 05 00 00
	00 00		 mov	 QWORD PTR Break_type, rax

; 822  :     if (!Break_type) return 0;

  005ea	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Break_type, 0
  005f2	75 07		 jne	 SHORT $LN121@init_types
  005f4	33 c0		 xor	 eax, eax
  005f6	e9 44 16 00 00	 jmp	 $LN151@init_types
$LN121@init_types:

; 823  :     Continue_type = make_type("Continue", stmt_type, NULL, 0);

  005fb	45 33 c9	 xor	 r9d, r9d
  005fe	45 33 c0	 xor	 r8d, r8d
  00601	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR stmt_type
  00608	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LJHDLOLO@Continue?$AA@
  0060f	e8 00 00 00 00	 call	 make_type
  00614	48 89 05 00 00
	00 00		 mov	 QWORD PTR Continue_type, rax

; 824  :     if (!Continue_type) return 0;

  0061b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Continue_type, 0
  00623	75 07		 jne	 SHORT $LN120@init_types
  00625	33 c0		 xor	 eax, eax
  00627	e9 13 16 00 00	 jmp	 $LN151@init_types
$LN120@init_types:

; 825  :     expr_type = make_type("expr", &AST_type, NULL, 0);

  0062c	45 33 c9	 xor	 r9d, r9d
  0062f	45 33 c0	 xor	 r8d, r8d
  00632	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00639	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IPHMALII@expr?$AA@
  00640	e8 00 00 00 00	 call	 make_type
  00645	48 89 05 00 00
	00 00		 mov	 QWORD PTR expr_type, rax

; 826  :     if (!expr_type) return 0;

  0064c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR expr_type, 0
  00654	75 07		 jne	 SHORT $LN119@init_types
  00656	33 c0		 xor	 eax, eax
  00658	e9 e2 15 00 00	 jmp	 $LN151@init_types
$LN119@init_types:

; 827  :     if (!add_attributes(expr_type, expr_attributes, 2)) return 0;

  0065d	41 b8 02 00 00
	00		 mov	 r8d, 2
  00663	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:expr_attributes
  0066a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR expr_type
  00671	e8 00 00 00 00	 call	 add_attributes
  00676	85 c0		 test	 eax, eax
  00678	75 07		 jne	 SHORT $LN118@init_types
  0067a	33 c0		 xor	 eax, eax
  0067c	e9 be 15 00 00	 jmp	 $LN151@init_types
$LN118@init_types:

; 828  :     BoolOp_type = make_type("BoolOp", expr_type, BoolOp_fields, 2);

  00681	41 b9 02 00 00
	00		 mov	 r9d, 2
  00687	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:BoolOp_fields
  0068e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00695	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HGMOOCHC@BoolOp?$AA@
  0069c	e8 00 00 00 00	 call	 make_type
  006a1	48 89 05 00 00
	00 00		 mov	 QWORD PTR BoolOp_type, rax

; 829  :     if (!BoolOp_type) return 0;

  006a8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR BoolOp_type, 0
  006b0	75 07		 jne	 SHORT $LN117@init_types
  006b2	33 c0		 xor	 eax, eax
  006b4	e9 86 15 00 00	 jmp	 $LN151@init_types
$LN117@init_types:

; 830  :     BinOp_type = make_type("BinOp", expr_type, BinOp_fields, 3);

  006b9	41 b9 03 00 00
	00		 mov	 r9d, 3
  006bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:BinOp_fields
  006c6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  006cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BHIPNDDM@BinOp?$AA@
  006d4	e8 00 00 00 00	 call	 make_type
  006d9	48 89 05 00 00
	00 00		 mov	 QWORD PTR BinOp_type, rax

; 831  :     if (!BinOp_type) return 0;

  006e0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR BinOp_type, 0
  006e8	75 07		 jne	 SHORT $LN116@init_types
  006ea	33 c0		 xor	 eax, eax
  006ec	e9 4e 15 00 00	 jmp	 $LN151@init_types
$LN116@init_types:

; 832  :     UnaryOp_type = make_type("UnaryOp", expr_type, UnaryOp_fields, 2);

  006f1	41 b9 02 00 00
	00		 mov	 r9d, 2
  006f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:UnaryOp_fields
  006fe	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00705	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FOOGNJMB@UnaryOp?$AA@
  0070c	e8 00 00 00 00	 call	 make_type
  00711	48 89 05 00 00
	00 00		 mov	 QWORD PTR UnaryOp_type, rax

; 833  :     if (!UnaryOp_type) return 0;

  00718	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR UnaryOp_type, 0
  00720	75 07		 jne	 SHORT $LN115@init_types
  00722	33 c0		 xor	 eax, eax
  00724	e9 16 15 00 00	 jmp	 $LN151@init_types
$LN115@init_types:

; 834  :     Lambda_type = make_type("Lambda", expr_type, Lambda_fields, 2);

  00729	41 b9 02 00 00
	00		 mov	 r9d, 2
  0072f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Lambda_fields
  00736	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  0073d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OBCFFGBN@Lambda?$AA@
  00744	e8 00 00 00 00	 call	 make_type
  00749	48 89 05 00 00
	00 00		 mov	 QWORD PTR Lambda_type, rax

; 835  :     if (!Lambda_type) return 0;

  00750	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Lambda_type, 0
  00758	75 07		 jne	 SHORT $LN114@init_types
  0075a	33 c0		 xor	 eax, eax
  0075c	e9 de 14 00 00	 jmp	 $LN151@init_types
$LN114@init_types:

; 836  :     IfExp_type = make_type("IfExp", expr_type, IfExp_fields, 3);

  00761	41 b9 03 00 00
	00		 mov	 r9d, 3
  00767	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:IfExp_fields
  0076e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00775	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KJAPGPAE@IfExp?$AA@
  0077c	e8 00 00 00 00	 call	 make_type
  00781	48 89 05 00 00
	00 00		 mov	 QWORD PTR IfExp_type, rax

; 837  :     if (!IfExp_type) return 0;

  00788	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR IfExp_type, 0
  00790	75 07		 jne	 SHORT $LN113@init_types
  00792	33 c0		 xor	 eax, eax
  00794	e9 a6 14 00 00	 jmp	 $LN151@init_types
$LN113@init_types:

; 838  :     Dict_type = make_type("Dict", expr_type, Dict_fields, 2);

  00799	41 b9 02 00 00
	00		 mov	 r9d, 2
  0079f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Dict_fields
  007a6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  007ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NDECIHGJ@Dict?$AA@
  007b4	e8 00 00 00 00	 call	 make_type
  007b9	48 89 05 00 00
	00 00		 mov	 QWORD PTR Dict_type, rax

; 839  :     if (!Dict_type) return 0;

  007c0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Dict_type, 0
  007c8	75 07		 jne	 SHORT $LN112@init_types
  007ca	33 c0		 xor	 eax, eax
  007cc	e9 6e 14 00 00	 jmp	 $LN151@init_types
$LN112@init_types:

; 840  :     Set_type = make_type("Set", expr_type, Set_fields, 1);

  007d1	41 b9 01 00 00
	00		 mov	 r9d, 1
  007d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Set_fields
  007de	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  007e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CEMDFJG@Set?$AA@
  007ec	e8 00 00 00 00	 call	 make_type
  007f1	48 89 05 00 00
	00 00		 mov	 QWORD PTR Set_type, rax

; 841  :     if (!Set_type) return 0;

  007f8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Set_type, 0
  00800	75 07		 jne	 SHORT $LN111@init_types
  00802	33 c0		 xor	 eax, eax
  00804	e9 36 14 00 00	 jmp	 $LN151@init_types
$LN111@init_types:

; 842  :     ListComp_type = make_type("ListComp", expr_type, ListComp_fields, 2);

  00809	41 b9 02 00 00
	00		 mov	 r9d, 2
  0080f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ListComp_fields
  00816	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  0081d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LAOBMBPK@ListComp?$AA@
  00824	e8 00 00 00 00	 call	 make_type
  00829	48 89 05 00 00
	00 00		 mov	 QWORD PTR ListComp_type, rax

; 843  :     if (!ListComp_type) return 0;

  00830	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ListComp_type, 0
  00838	75 07		 jne	 SHORT $LN110@init_types
  0083a	33 c0		 xor	 eax, eax
  0083c	e9 fe 13 00 00	 jmp	 $LN151@init_types
$LN110@init_types:

; 844  :     SetComp_type = make_type("SetComp", expr_type, SetComp_fields, 2);

  00841	41 b9 02 00 00
	00		 mov	 r9d, 2
  00847	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:SetComp_fields
  0084e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00855	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BLGPBMGP@SetComp?$AA@
  0085c	e8 00 00 00 00	 call	 make_type
  00861	48 89 05 00 00
	00 00		 mov	 QWORD PTR SetComp_type, rax

; 845  :     if (!SetComp_type) return 0;

  00868	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR SetComp_type, 0
  00870	75 07		 jne	 SHORT $LN109@init_types
  00872	33 c0		 xor	 eax, eax
  00874	e9 c6 13 00 00	 jmp	 $LN151@init_types
$LN109@init_types:

; 846  :     DictComp_type = make_type("DictComp", expr_type, DictComp_fields, 3);

  00879	41 b9 03 00 00
	00		 mov	 r9d, 3
  0087f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:DictComp_fields
  00886	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  0088d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GMOHPPCM@DictComp?$AA@
  00894	e8 00 00 00 00	 call	 make_type
  00899	48 89 05 00 00
	00 00		 mov	 QWORD PTR DictComp_type, rax

; 847  :     if (!DictComp_type) return 0;

  008a0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR DictComp_type, 0
  008a8	75 07		 jne	 SHORT $LN108@init_types
  008aa	33 c0		 xor	 eax, eax
  008ac	e9 8e 13 00 00	 jmp	 $LN151@init_types
$LN108@init_types:

; 848  :     GeneratorExp_type = make_type("GeneratorExp", expr_type,
; 849  :                                   GeneratorExp_fields, 2);

  008b1	41 b9 02 00 00
	00		 mov	 r9d, 2
  008b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:GeneratorExp_fields
  008be	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  008c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MMHMBOOD@GeneratorExp?$AA@
  008cc	e8 00 00 00 00	 call	 make_type
  008d1	48 89 05 00 00
	00 00		 mov	 QWORD PTR GeneratorExp_type, rax

; 850  :     if (!GeneratorExp_type) return 0;

  008d8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR GeneratorExp_type, 0
  008e0	75 07		 jne	 SHORT $LN107@init_types
  008e2	33 c0		 xor	 eax, eax
  008e4	e9 56 13 00 00	 jmp	 $LN151@init_types
$LN107@init_types:

; 851  :     Yield_type = make_type("Yield", expr_type, Yield_fields, 1);

  008e9	41 b9 01 00 00
	00		 mov	 r9d, 1
  008ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Yield_fields
  008f6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  008fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNDKIJIJ@Yield?$AA@
  00904	e8 00 00 00 00	 call	 make_type
  00909	48 89 05 00 00
	00 00		 mov	 QWORD PTR Yield_type, rax

; 852  :     if (!Yield_type) return 0;

  00910	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Yield_type, 0
  00918	75 07		 jne	 SHORT $LN106@init_types
  0091a	33 c0		 xor	 eax, eax
  0091c	e9 1e 13 00 00	 jmp	 $LN151@init_types
$LN106@init_types:

; 853  :     YieldFrom_type = make_type("YieldFrom", expr_type, YieldFrom_fields, 1);

  00921	41 b9 01 00 00
	00		 mov	 r9d, 1
  00927	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:YieldFrom_fields
  0092e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00935	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09GLJBJEPP@YieldFrom?$AA@
  0093c	e8 00 00 00 00	 call	 make_type
  00941	48 89 05 00 00
	00 00		 mov	 QWORD PTR YieldFrom_type, rax

; 854  :     if (!YieldFrom_type) return 0;

  00948	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR YieldFrom_type, 0
  00950	75 07		 jne	 SHORT $LN105@init_types
  00952	33 c0		 xor	 eax, eax
  00954	e9 e6 12 00 00	 jmp	 $LN151@init_types
$LN105@init_types:

; 855  :     Compare_type = make_type("Compare", expr_type, Compare_fields, 3);

  00959	41 b9 03 00 00
	00		 mov	 r9d, 3
  0095f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Compare_fields
  00966	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  0096d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07MBOMJGGF@Compare?$AA@
  00974	e8 00 00 00 00	 call	 make_type
  00979	48 89 05 00 00
	00 00		 mov	 QWORD PTR Compare_type, rax

; 856  :     if (!Compare_type) return 0;

  00980	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Compare_type, 0
  00988	75 07		 jne	 SHORT $LN104@init_types
  0098a	33 c0		 xor	 eax, eax
  0098c	e9 ae 12 00 00	 jmp	 $LN151@init_types
$LN104@init_types:

; 857  :     Call_type = make_type("Call", expr_type, Call_fields, 5);

  00991	41 b9 05 00 00
	00		 mov	 r9d, 5
  00997	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Call_fields
  0099e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  009a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04CNJBKMPC@Call?$AA@
  009ac	e8 00 00 00 00	 call	 make_type
  009b1	48 89 05 00 00
	00 00		 mov	 QWORD PTR Call_type, rax

; 858  :     if (!Call_type) return 0;

  009b8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Call_type, 0
  009c0	75 07		 jne	 SHORT $LN103@init_types
  009c2	33 c0		 xor	 eax, eax
  009c4	e9 76 12 00 00	 jmp	 $LN151@init_types
$LN103@init_types:

; 859  :     Num_type = make_type("Num", expr_type, Num_fields, 1);

  009c9	41 b9 01 00 00
	00		 mov	 r9d, 1
  009cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Num_fields
  009d6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  009dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CHBJLALM@Num?$AA@
  009e4	e8 00 00 00 00	 call	 make_type
  009e9	48 89 05 00 00
	00 00		 mov	 QWORD PTR Num_type, rax

; 860  :     if (!Num_type) return 0;

  009f0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Num_type, 0
  009f8	75 07		 jne	 SHORT $LN102@init_types
  009fa	33 c0		 xor	 eax, eax
  009fc	e9 3e 12 00 00	 jmp	 $LN151@init_types
$LN102@init_types:

; 861  :     Str_type = make_type("Str", expr_type, Str_fields, 1);

  00a01	41 b9 01 00 00
	00		 mov	 r9d, 1
  00a07	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Str_fields
  00a0e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00a15	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EJPCFLFH@Str?$AA@
  00a1c	e8 00 00 00 00	 call	 make_type
  00a21	48 89 05 00 00
	00 00		 mov	 QWORD PTR Str_type, rax

; 862  :     if (!Str_type) return 0;

  00a28	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Str_type, 0
  00a30	75 07		 jne	 SHORT $LN101@init_types
  00a32	33 c0		 xor	 eax, eax
  00a34	e9 06 12 00 00	 jmp	 $LN151@init_types
$LN101@init_types:

; 863  :     Bytes_type = make_type("Bytes", expr_type, Bytes_fields, 1);

  00a39	41 b9 01 00 00
	00		 mov	 r9d, 1
  00a3f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Bytes_fields
  00a46	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00a4d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FGDMGDLA@Bytes?$AA@
  00a54	e8 00 00 00 00	 call	 make_type
  00a59	48 89 05 00 00
	00 00		 mov	 QWORD PTR Bytes_type, rax

; 864  :     if (!Bytes_type) return 0;

  00a60	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Bytes_type, 0
  00a68	75 07		 jne	 SHORT $LN100@init_types
  00a6a	33 c0		 xor	 eax, eax
  00a6c	e9 ce 11 00 00	 jmp	 $LN151@init_types
$LN100@init_types:

; 865  :     Ellipsis_type = make_type("Ellipsis", expr_type, NULL, 0);

  00a71	45 33 c9	 xor	 r9d, r9d
  00a74	45 33 c0	 xor	 r8d, r8d
  00a77	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00a7e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KKBGFFMJ@Ellipsis?$AA@
  00a85	e8 00 00 00 00	 call	 make_type
  00a8a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Ellipsis_type, rax

; 866  :     if (!Ellipsis_type) return 0;

  00a91	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Ellipsis_type, 0
  00a99	75 07		 jne	 SHORT $LN99@init_types
  00a9b	33 c0		 xor	 eax, eax
  00a9d	e9 9d 11 00 00	 jmp	 $LN151@init_types
$LN99@init_types:

; 867  :     Attribute_type = make_type("Attribute", expr_type, Attribute_fields, 3);

  00aa2	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aa8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Attribute_fields
  00aaf	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00ab6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EIDFECNJ@Attribute?$AA@
  00abd	e8 00 00 00 00	 call	 make_type
  00ac2	48 89 05 00 00
	00 00		 mov	 QWORD PTR Attribute_type, rax

; 868  :     if (!Attribute_type) return 0;

  00ac9	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Attribute_type, 0
  00ad1	75 07		 jne	 SHORT $LN98@init_types
  00ad3	33 c0		 xor	 eax, eax
  00ad5	e9 65 11 00 00	 jmp	 $LN151@init_types
$LN98@init_types:

; 869  :     Subscript_type = make_type("Subscript", expr_type, Subscript_fields, 3);

  00ada	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ae0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Subscript_fields
  00ae7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00aee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09OPNCODFI@Subscript?$AA@
  00af5	e8 00 00 00 00	 call	 make_type
  00afa	48 89 05 00 00
	00 00		 mov	 QWORD PTR Subscript_type, rax

; 870  :     if (!Subscript_type) return 0;

  00b01	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Subscript_type, 0
  00b09	75 07		 jne	 SHORT $LN97@init_types
  00b0b	33 c0		 xor	 eax, eax
  00b0d	e9 2d 11 00 00	 jmp	 $LN151@init_types
$LN97@init_types:

; 871  :     Starred_type = make_type("Starred", expr_type, Starred_fields, 2);

  00b12	41 b9 02 00 00
	00		 mov	 r9d, 2
  00b18	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Starred_fields
  00b1f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00b26	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JHFCIAKE@Starred?$AA@
  00b2d	e8 00 00 00 00	 call	 make_type
  00b32	48 89 05 00 00
	00 00		 mov	 QWORD PTR Starred_type, rax

; 872  :     if (!Starred_type) return 0;

  00b39	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Starred_type, 0
  00b41	75 07		 jne	 SHORT $LN96@init_types
  00b43	33 c0		 xor	 eax, eax
  00b45	e9 f5 10 00 00	 jmp	 $LN151@init_types
$LN96@init_types:

; 873  :     Name_type = make_type("Name", expr_type, Name_fields, 2);

  00b4a	41 b9 02 00 00
	00		 mov	 r9d, 2
  00b50	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Name_fields
  00b57	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00b5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FABLJDN@Name?$AA@
  00b65	e8 00 00 00 00	 call	 make_type
  00b6a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Name_type, rax

; 874  :     if (!Name_type) return 0;

  00b71	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Name_type, 0
  00b79	75 07		 jne	 SHORT $LN95@init_types
  00b7b	33 c0		 xor	 eax, eax
  00b7d	e9 bd 10 00 00	 jmp	 $LN151@init_types
$LN95@init_types:

; 875  :     List_type = make_type("List", expr_type, List_fields, 2);

  00b82	41 b9 02 00 00
	00		 mov	 r9d, 2
  00b88	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:List_fields
  00b8f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00b96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PPBEGPNI@List?$AA@
  00b9d	e8 00 00 00 00	 call	 make_type
  00ba2	48 89 05 00 00
	00 00		 mov	 QWORD PTR List_type, rax

; 876  :     if (!List_type) return 0;

  00ba9	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR List_type, 0
  00bb1	75 07		 jne	 SHORT $LN94@init_types
  00bb3	33 c0		 xor	 eax, eax
  00bb5	e9 85 10 00 00	 jmp	 $LN151@init_types
$LN94@init_types:

; 877  :     Tuple_type = make_type("Tuple", expr_type, Tuple_fields, 2);

  00bba	41 b9 02 00 00
	00		 mov	 r9d, 2
  00bc0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Tuple_fields
  00bc7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_type
  00bce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NKGIHGDI@Tuple?$AA@
  00bd5	e8 00 00 00 00	 call	 make_type
  00bda	48 89 05 00 00
	00 00		 mov	 QWORD PTR Tuple_type, rax

; 878  :     if (!Tuple_type) return 0;

  00be1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Tuple_type, 0
  00be9	75 07		 jne	 SHORT $LN93@init_types
  00beb	33 c0		 xor	 eax, eax
  00bed	e9 4d 10 00 00	 jmp	 $LN151@init_types
$LN93@init_types:

; 879  :     expr_context_type = make_type("expr_context", &AST_type, NULL, 0);

  00bf2	45 33 c9	 xor	 r9d, r9d
  00bf5	45 33 c0	 xor	 r8d, r8d
  00bf8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00bff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GABLJPJB@expr_context?$AA@
  00c06	e8 00 00 00 00	 call	 make_type
  00c0b	48 89 05 00 00
	00 00		 mov	 QWORD PTR expr_context_type, rax

; 880  :     if (!expr_context_type) return 0;

  00c12	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR expr_context_type, 0
  00c1a	75 07		 jne	 SHORT $LN92@init_types
  00c1c	33 c0		 xor	 eax, eax
  00c1e	e9 1c 10 00 00	 jmp	 $LN151@init_types
$LN92@init_types:

; 881  :     if (!add_attributes(expr_context_type, NULL, 0)) return 0;

  00c23	45 33 c0	 xor	 r8d, r8d
  00c26	33 d2		 xor	 edx, edx
  00c28	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR expr_context_type
  00c2f	e8 00 00 00 00	 call	 add_attributes
  00c34	85 c0		 test	 eax, eax
  00c36	75 07		 jne	 SHORT $LN91@init_types
  00c38	33 c0		 xor	 eax, eax
  00c3a	e9 00 10 00 00	 jmp	 $LN151@init_types
$LN91@init_types:

; 882  :     Load_type = make_type("Load", expr_context_type, NULL, 0);

  00c3f	45 33 c9	 xor	 r9d, r9d
  00c42	45 33 c0	 xor	 r8d, r8d
  00c45	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00c4c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IPBPFFEL@Load?$AA@
  00c53	e8 00 00 00 00	 call	 make_type
  00c58	48 89 05 00 00
	00 00		 mov	 QWORD PTR Load_type, rax

; 883  :     if (!Load_type) return 0;

  00c5f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Load_type, 0
  00c67	75 07		 jne	 SHORT $LN90@init_types
  00c69	33 c0		 xor	 eax, eax
  00c6b	e9 cf 0f 00 00	 jmp	 $LN151@init_types
$LN90@init_types:

; 884  :     Load_singleton = PyType_GenericNew(Load_type, NULL, NULL);

  00c70	45 33 c0	 xor	 r8d, r8d
  00c73	33 d2		 xor	 edx, edx
  00c75	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Load_type
  00c7c	e8 00 00 00 00	 call	 PyType_GenericNew
  00c81	48 89 05 00 00
	00 00		 mov	 QWORD PTR Load_singleton, rax

; 885  :     if (!Load_singleton) return 0;

  00c88	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Load_singleton, 0
  00c90	75 07		 jne	 SHORT $LN89@init_types
  00c92	33 c0		 xor	 eax, eax
  00c94	e9 a6 0f 00 00	 jmp	 $LN151@init_types
$LN89@init_types:

; 886  :     Store_type = make_type("Store", expr_context_type, NULL, 0);

  00c99	45 33 c9	 xor	 r9d, r9d
  00c9c	45 33 c0	 xor	 r8d, r8d
  00c9f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00ca6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OEMPKGID@Store?$AA@
  00cad	e8 00 00 00 00	 call	 make_type
  00cb2	48 89 05 00 00
	00 00		 mov	 QWORD PTR Store_type, rax

; 887  :     if (!Store_type) return 0;

  00cb9	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Store_type, 0
  00cc1	75 07		 jne	 SHORT $LN88@init_types
  00cc3	33 c0		 xor	 eax, eax
  00cc5	e9 75 0f 00 00	 jmp	 $LN151@init_types
$LN88@init_types:

; 888  :     Store_singleton = PyType_GenericNew(Store_type, NULL, NULL);

  00cca	45 33 c0	 xor	 r8d, r8d
  00ccd	33 d2		 xor	 edx, edx
  00ccf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Store_type
  00cd6	e8 00 00 00 00	 call	 PyType_GenericNew
  00cdb	48 89 05 00 00
	00 00		 mov	 QWORD PTR Store_singleton, rax

; 889  :     if (!Store_singleton) return 0;

  00ce2	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Store_singleton, 0
  00cea	75 07		 jne	 SHORT $LN87@init_types
  00cec	33 c0		 xor	 eax, eax
  00cee	e9 4c 0f 00 00	 jmp	 $LN151@init_types
$LN87@init_types:

; 890  :     Del_type = make_type("Del", expr_context_type, NULL, 0);

  00cf3	45 33 c9	 xor	 r9d, r9d
  00cf6	45 33 c0	 xor	 r8d, r8d
  00cf9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00d00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03ENJJMCOJ@Del?$AA@
  00d07	e8 00 00 00 00	 call	 make_type
  00d0c	48 89 05 00 00
	00 00		 mov	 QWORD PTR Del_type, rax

; 891  :     if (!Del_type) return 0;

  00d13	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Del_type, 0
  00d1b	75 07		 jne	 SHORT $LN86@init_types
  00d1d	33 c0		 xor	 eax, eax
  00d1f	e9 1b 0f 00 00	 jmp	 $LN151@init_types
$LN86@init_types:

; 892  :     Del_singleton = PyType_GenericNew(Del_type, NULL, NULL);

  00d24	45 33 c0	 xor	 r8d, r8d
  00d27	33 d2		 xor	 edx, edx
  00d29	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Del_type
  00d30	e8 00 00 00 00	 call	 PyType_GenericNew
  00d35	48 89 05 00 00
	00 00		 mov	 QWORD PTR Del_singleton, rax

; 893  :     if (!Del_singleton) return 0;

  00d3c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Del_singleton, 0
  00d44	75 07		 jne	 SHORT $LN85@init_types
  00d46	33 c0		 xor	 eax, eax
  00d48	e9 f2 0e 00 00	 jmp	 $LN151@init_types
$LN85@init_types:

; 894  :     AugLoad_type = make_type("AugLoad", expr_context_type, NULL, 0);

  00d4d	45 33 c9	 xor	 r9d, r9d
  00d50	45 33 c0	 xor	 r8d, r8d
  00d53	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00d5a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07GCIJHPCC@AugLoad?$AA@
  00d61	e8 00 00 00 00	 call	 make_type
  00d66	48 89 05 00 00
	00 00		 mov	 QWORD PTR AugLoad_type, rax

; 895  :     if (!AugLoad_type) return 0;

  00d6d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR AugLoad_type, 0
  00d75	75 07		 jne	 SHORT $LN84@init_types
  00d77	33 c0		 xor	 eax, eax
  00d79	e9 c1 0e 00 00	 jmp	 $LN151@init_types
$LN84@init_types:

; 896  :     AugLoad_singleton = PyType_GenericNew(AugLoad_type, NULL, NULL);

  00d7e	45 33 c0	 xor	 r8d, r8d
  00d81	33 d2		 xor	 edx, edx
  00d83	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR AugLoad_type
  00d8a	e8 00 00 00 00	 call	 PyType_GenericNew
  00d8f	48 89 05 00 00
	00 00		 mov	 QWORD PTR AugLoad_singleton, rax

; 897  :     if (!AugLoad_singleton) return 0;

  00d96	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR AugLoad_singleton, 0
  00d9e	75 07		 jne	 SHORT $LN83@init_types
  00da0	33 c0		 xor	 eax, eax
  00da2	e9 98 0e 00 00	 jmp	 $LN151@init_types
$LN83@init_types:

; 898  :     AugStore_type = make_type("AugStore", expr_context_type, NULL, 0);

  00da7	45 33 c9	 xor	 r9d, r9d
  00daa	45 33 c0	 xor	 r8d, r8d
  00dad	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00db4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NAEMOJFF@AugStore?$AA@
  00dbb	e8 00 00 00 00	 call	 make_type
  00dc0	48 89 05 00 00
	00 00		 mov	 QWORD PTR AugStore_type, rax

; 899  :     if (!AugStore_type) return 0;

  00dc7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR AugStore_type, 0
  00dcf	75 07		 jne	 SHORT $LN82@init_types
  00dd1	33 c0		 xor	 eax, eax
  00dd3	e9 67 0e 00 00	 jmp	 $LN151@init_types
$LN82@init_types:

; 900  :     AugStore_singleton = PyType_GenericNew(AugStore_type, NULL, NULL);

  00dd8	45 33 c0	 xor	 r8d, r8d
  00ddb	33 d2		 xor	 edx, edx
  00ddd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR AugStore_type
  00de4	e8 00 00 00 00	 call	 PyType_GenericNew
  00de9	48 89 05 00 00
	00 00		 mov	 QWORD PTR AugStore_singleton, rax

; 901  :     if (!AugStore_singleton) return 0;

  00df0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR AugStore_singleton, 0
  00df8	75 07		 jne	 SHORT $LN81@init_types
  00dfa	33 c0		 xor	 eax, eax
  00dfc	e9 3e 0e 00 00	 jmp	 $LN151@init_types
$LN81@init_types:

; 902  :     Param_type = make_type("Param", expr_context_type, NULL, 0);

  00e01	45 33 c9	 xor	 r9d, r9d
  00e04	45 33 c0	 xor	 r8d, r8d
  00e07	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR expr_context_type
  00e0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LOJBNELM@Param?$AA@
  00e15	e8 00 00 00 00	 call	 make_type
  00e1a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Param_type, rax

; 903  :     if (!Param_type) return 0;

  00e21	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Param_type, 0
  00e29	75 07		 jne	 SHORT $LN80@init_types
  00e2b	33 c0		 xor	 eax, eax
  00e2d	e9 0d 0e 00 00	 jmp	 $LN151@init_types
$LN80@init_types:

; 904  :     Param_singleton = PyType_GenericNew(Param_type, NULL, NULL);

  00e32	45 33 c0	 xor	 r8d, r8d
  00e35	33 d2		 xor	 edx, edx
  00e37	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Param_type
  00e3e	e8 00 00 00 00	 call	 PyType_GenericNew
  00e43	48 89 05 00 00
	00 00		 mov	 QWORD PTR Param_singleton, rax

; 905  :     if (!Param_singleton) return 0;

  00e4a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Param_singleton, 0
  00e52	75 07		 jne	 SHORT $LN79@init_types
  00e54	33 c0		 xor	 eax, eax
  00e56	e9 e4 0d 00 00	 jmp	 $LN151@init_types
$LN79@init_types:

; 906  :     slice_type = make_type("slice", &AST_type, NULL, 0);

  00e5b	45 33 c9	 xor	 r9d, r9d
  00e5e	45 33 c0	 xor	 r8d, r8d
  00e61	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00e68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05ILHMOJGN@slice?$AA@
  00e6f	e8 00 00 00 00	 call	 make_type
  00e74	48 89 05 00 00
	00 00		 mov	 QWORD PTR slice_type, rax

; 907  :     if (!slice_type) return 0;

  00e7b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR slice_type, 0
  00e83	75 07		 jne	 SHORT $LN78@init_types
  00e85	33 c0		 xor	 eax, eax
  00e87	e9 b3 0d 00 00	 jmp	 $LN151@init_types
$LN78@init_types:

; 908  :     if (!add_attributes(slice_type, NULL, 0)) return 0;

  00e8c	45 33 c0	 xor	 r8d, r8d
  00e8f	33 d2		 xor	 edx, edx
  00e91	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR slice_type
  00e98	e8 00 00 00 00	 call	 add_attributes
  00e9d	85 c0		 test	 eax, eax
  00e9f	75 07		 jne	 SHORT $LN77@init_types
  00ea1	33 c0		 xor	 eax, eax
  00ea3	e9 97 0d 00 00	 jmp	 $LN151@init_types
$LN77@init_types:

; 909  :     Slice_type = make_type("Slice", slice_type, Slice_fields, 3);

  00ea8	41 b9 03 00 00
	00		 mov	 r9d, 3
  00eae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Slice_fields
  00eb5	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR slice_type
  00ebc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IMNAOMFL@Slice?$AA@
  00ec3	e8 00 00 00 00	 call	 make_type
  00ec8	48 89 05 00 00
	00 00		 mov	 QWORD PTR Slice_type, rax

; 910  :     if (!Slice_type) return 0;

  00ecf	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Slice_type, 0
  00ed7	75 07		 jne	 SHORT $LN76@init_types
  00ed9	33 c0		 xor	 eax, eax
  00edb	e9 5f 0d 00 00	 jmp	 $LN151@init_types
$LN76@init_types:

; 911  :     ExtSlice_type = make_type("ExtSlice", slice_type, ExtSlice_fields, 1);

  00ee0	41 b9 01 00 00
	00		 mov	 r9d, 1
  00ee6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ExtSlice_fields
  00eed	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR slice_type
  00ef4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CIIMGBAD@ExtSlice?$AA@
  00efb	e8 00 00 00 00	 call	 make_type
  00f00	48 89 05 00 00
	00 00		 mov	 QWORD PTR ExtSlice_type, rax

; 912  :     if (!ExtSlice_type) return 0;

  00f07	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ExtSlice_type, 0
  00f0f	75 07		 jne	 SHORT $LN75@init_types
  00f11	33 c0		 xor	 eax, eax
  00f13	e9 27 0d 00 00	 jmp	 $LN151@init_types
$LN75@init_types:

; 913  :     Index_type = make_type("Index", slice_type, Index_fields, 1);

  00f18	41 b9 01 00 00
	00		 mov	 r9d, 1
  00f1e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Index_fields
  00f25	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR slice_type
  00f2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FNNGFGLF@Index?$AA@
  00f33	e8 00 00 00 00	 call	 make_type
  00f38	48 89 05 00 00
	00 00		 mov	 QWORD PTR Index_type, rax

; 914  :     if (!Index_type) return 0;

  00f3f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Index_type, 0
  00f47	75 07		 jne	 SHORT $LN74@init_types
  00f49	33 c0		 xor	 eax, eax
  00f4b	e9 ef 0c 00 00	 jmp	 $LN151@init_types
$LN74@init_types:

; 915  :     boolop_type = make_type("boolop", &AST_type, NULL, 0);

  00f50	45 33 c9	 xor	 r9d, r9d
  00f53	45 33 c0	 xor	 r8d, r8d
  00f56	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00f5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IBDOJNAO@boolop?$AA@
  00f64	e8 00 00 00 00	 call	 make_type
  00f69	48 89 05 00 00
	00 00		 mov	 QWORD PTR boolop_type, rax

; 916  :     if (!boolop_type) return 0;

  00f70	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR boolop_type, 0
  00f78	75 07		 jne	 SHORT $LN73@init_types
  00f7a	33 c0		 xor	 eax, eax
  00f7c	e9 be 0c 00 00	 jmp	 $LN151@init_types
$LN73@init_types:

; 917  :     if (!add_attributes(boolop_type, NULL, 0)) return 0;

  00f81	45 33 c0	 xor	 r8d, r8d
  00f84	33 d2		 xor	 edx, edx
  00f86	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR boolop_type
  00f8d	e8 00 00 00 00	 call	 add_attributes
  00f92	85 c0		 test	 eax, eax
  00f94	75 07		 jne	 SHORT $LN72@init_types
  00f96	33 c0		 xor	 eax, eax
  00f98	e9 a2 0c 00 00	 jmp	 $LN151@init_types
$LN72@init_types:

; 918  :     And_type = make_type("And", boolop_type, NULL, 0);

  00f9d	45 33 c9	 xor	 r9d, r9d
  00fa0	45 33 c0	 xor	 r8d, r8d
  00fa3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR boolop_type
  00faa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03LOMLFHDC@And?$AA@
  00fb1	e8 00 00 00 00	 call	 make_type
  00fb6	48 89 05 00 00
	00 00		 mov	 QWORD PTR And_type, rax

; 919  :     if (!And_type) return 0;

  00fbd	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR And_type, 0
  00fc5	75 07		 jne	 SHORT $LN71@init_types
  00fc7	33 c0		 xor	 eax, eax
  00fc9	e9 71 0c 00 00	 jmp	 $LN151@init_types
$LN71@init_types:

; 920  :     And_singleton = PyType_GenericNew(And_type, NULL, NULL);

  00fce	45 33 c0	 xor	 r8d, r8d
  00fd1	33 d2		 xor	 edx, edx
  00fd3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR And_type
  00fda	e8 00 00 00 00	 call	 PyType_GenericNew
  00fdf	48 89 05 00 00
	00 00		 mov	 QWORD PTR And_singleton, rax

; 921  :     if (!And_singleton) return 0;

  00fe6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR And_singleton, 0
  00fee	75 07		 jne	 SHORT $LN70@init_types
  00ff0	33 c0		 xor	 eax, eax
  00ff2	e9 48 0c 00 00	 jmp	 $LN151@init_types
$LN70@init_types:

; 922  :     Or_type = make_type("Or", boolop_type, NULL, 0);

  00ff7	45 33 c9	 xor	 r9d, r9d
  00ffa	45 33 c0	 xor	 r8d, r8d
  00ffd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR boolop_type
  01004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02GGHBPHGE@Or?$AA@
  0100b	e8 00 00 00 00	 call	 make_type
  01010	48 89 05 00 00
	00 00		 mov	 QWORD PTR Or_type, rax

; 923  :     if (!Or_type) return 0;

  01017	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Or_type, 0
  0101f	75 07		 jne	 SHORT $LN69@init_types
  01021	33 c0		 xor	 eax, eax
  01023	e9 17 0c 00 00	 jmp	 $LN151@init_types
$LN69@init_types:

; 924  :     Or_singleton = PyType_GenericNew(Or_type, NULL, NULL);

  01028	45 33 c0	 xor	 r8d, r8d
  0102b	33 d2		 xor	 edx, edx
  0102d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Or_type
  01034	e8 00 00 00 00	 call	 PyType_GenericNew
  01039	48 89 05 00 00
	00 00		 mov	 QWORD PTR Or_singleton, rax

; 925  :     if (!Or_singleton) return 0;

  01040	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Or_singleton, 0
  01048	75 07		 jne	 SHORT $LN68@init_types
  0104a	33 c0		 xor	 eax, eax
  0104c	e9 ee 0b 00 00	 jmp	 $LN151@init_types
$LN68@init_types:

; 926  :     operator_type = make_type("operator", &AST_type, NULL, 0);

  01051	45 33 c9	 xor	 r9d, r9d
  01054	45 33 c0	 xor	 r8d, r8d
  01057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  0105e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LHJFAFGD@operator?$AA@
  01065	e8 00 00 00 00	 call	 make_type
  0106a	48 89 05 00 00
	00 00		 mov	 QWORD PTR operator_type, rax

; 927  :     if (!operator_type) return 0;

  01071	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR operator_type, 0
  01079	75 07		 jne	 SHORT $LN67@init_types
  0107b	33 c0		 xor	 eax, eax
  0107d	e9 bd 0b 00 00	 jmp	 $LN151@init_types
$LN67@init_types:

; 928  :     if (!add_attributes(operator_type, NULL, 0)) return 0;

  01082	45 33 c0	 xor	 r8d, r8d
  01085	33 d2		 xor	 edx, edx
  01087	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR operator_type
  0108e	e8 00 00 00 00	 call	 add_attributes
  01093	85 c0		 test	 eax, eax
  01095	75 07		 jne	 SHORT $LN66@init_types
  01097	33 c0		 xor	 eax, eax
  01099	e9 a1 0b 00 00	 jmp	 $LN151@init_types
$LN66@init_types:

; 929  :     Add_type = make_type("Add", operator_type, NULL, 0);

  0109e	45 33 c9	 xor	 r9d, r9d
  010a1	45 33 c0	 xor	 r8d, r8d
  010a4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  010ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03LDFMNCOE@Add?$AA@
  010b2	e8 00 00 00 00	 call	 make_type
  010b7	48 89 05 00 00
	00 00		 mov	 QWORD PTR Add_type, rax

; 930  :     if (!Add_type) return 0;

  010be	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Add_type, 0
  010c6	75 07		 jne	 SHORT $LN65@init_types
  010c8	33 c0		 xor	 eax, eax
  010ca	e9 70 0b 00 00	 jmp	 $LN151@init_types
$LN65@init_types:

; 931  :     Add_singleton = PyType_GenericNew(Add_type, NULL, NULL);

  010cf	45 33 c0	 xor	 r8d, r8d
  010d2	33 d2		 xor	 edx, edx
  010d4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Add_type
  010db	e8 00 00 00 00	 call	 PyType_GenericNew
  010e0	48 89 05 00 00
	00 00		 mov	 QWORD PTR Add_singleton, rax

; 932  :     if (!Add_singleton) return 0;

  010e7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Add_singleton, 0
  010ef	75 07		 jne	 SHORT $LN64@init_types
  010f1	33 c0		 xor	 eax, eax
  010f3	e9 47 0b 00 00	 jmp	 $LN151@init_types
$LN64@init_types:

; 933  :     Sub_type = make_type("Sub", operator_type, NULL, 0);

  010f8	45 33 c9	 xor	 r9d, r9d
  010fb	45 33 c0	 xor	 r8d, r8d
  010fe	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  01105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CPCCDDB@Sub?$AA@
  0110c	e8 00 00 00 00	 call	 make_type
  01111	48 89 05 00 00
	00 00		 mov	 QWORD PTR Sub_type, rax

; 934  :     if (!Sub_type) return 0;

  01118	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Sub_type, 0
  01120	75 07		 jne	 SHORT $LN63@init_types
  01122	33 c0		 xor	 eax, eax
  01124	e9 16 0b 00 00	 jmp	 $LN151@init_types
$LN63@init_types:

; 935  :     Sub_singleton = PyType_GenericNew(Sub_type, NULL, NULL);

  01129	45 33 c0	 xor	 r8d, r8d
  0112c	33 d2		 xor	 edx, edx
  0112e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Sub_type
  01135	e8 00 00 00 00	 call	 PyType_GenericNew
  0113a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Sub_singleton, rax

; 936  :     if (!Sub_singleton) return 0;

  01141	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Sub_singleton, 0
  01149	75 07		 jne	 SHORT $LN62@init_types
  0114b	33 c0		 xor	 eax, eax
  0114d	e9 ed 0a 00 00	 jmp	 $LN151@init_types
$LN62@init_types:

; 937  :     Mult_type = make_type("Mult", operator_type, NULL, 0);

  01152	45 33 c9	 xor	 r9d, r9d
  01155	45 33 c0	 xor	 r8d, r8d
  01158	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  0115f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04MPMBEKAC@Mult?$AA@
  01166	e8 00 00 00 00	 call	 make_type
  0116b	48 89 05 00 00
	00 00		 mov	 QWORD PTR Mult_type, rax

; 938  :     if (!Mult_type) return 0;

  01172	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Mult_type, 0
  0117a	75 07		 jne	 SHORT $LN61@init_types
  0117c	33 c0		 xor	 eax, eax
  0117e	e9 bc 0a 00 00	 jmp	 $LN151@init_types
$LN61@init_types:

; 939  :     Mult_singleton = PyType_GenericNew(Mult_type, NULL, NULL);

  01183	45 33 c0	 xor	 r8d, r8d
  01186	33 d2		 xor	 edx, edx
  01188	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Mult_type
  0118f	e8 00 00 00 00	 call	 PyType_GenericNew
  01194	48 89 05 00 00
	00 00		 mov	 QWORD PTR Mult_singleton, rax

; 940  :     if (!Mult_singleton) return 0;

  0119b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Mult_singleton, 0
  011a3	75 07		 jne	 SHORT $LN60@init_types
  011a5	33 c0		 xor	 eax, eax
  011a7	e9 93 0a 00 00	 jmp	 $LN151@init_types
$LN60@init_types:

; 941  :     Div_type = make_type("Div", operator_type, NULL, 0);

  011ac	45 33 c9	 xor	 r9d, r9d
  011af	45 33 c0	 xor	 r8d, r8d
  011b2	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  011b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03PEKOMBFG@Div?$AA@
  011c0	e8 00 00 00 00	 call	 make_type
  011c5	48 89 05 00 00
	00 00		 mov	 QWORD PTR Div_type, rax

; 942  :     if (!Div_type) return 0;

  011cc	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Div_type, 0
  011d4	75 07		 jne	 SHORT $LN59@init_types
  011d6	33 c0		 xor	 eax, eax
  011d8	e9 62 0a 00 00	 jmp	 $LN151@init_types
$LN59@init_types:

; 943  :     Div_singleton = PyType_GenericNew(Div_type, NULL, NULL);

  011dd	45 33 c0	 xor	 r8d, r8d
  011e0	33 d2		 xor	 edx, edx
  011e2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Div_type
  011e9	e8 00 00 00 00	 call	 PyType_GenericNew
  011ee	48 89 05 00 00
	00 00		 mov	 QWORD PTR Div_singleton, rax

; 944  :     if (!Div_singleton) return 0;

  011f5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Div_singleton, 0
  011fd	75 07		 jne	 SHORT $LN58@init_types
  011ff	33 c0		 xor	 eax, eax
  01201	e9 39 0a 00 00	 jmp	 $LN151@init_types
$LN58@init_types:

; 945  :     Mod_type = make_type("Mod", operator_type, NULL, 0);

  01206	45 33 c9	 xor	 r9d, r9d
  01209	45 33 c0	 xor	 r8d, r8d
  0120c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  01213	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03PFNPICLN@Mod?$AA@
  0121a	e8 00 00 00 00	 call	 make_type
  0121f	48 89 05 00 00
	00 00		 mov	 QWORD PTR Mod_type, rax

; 946  :     if (!Mod_type) return 0;

  01226	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Mod_type, 0
  0122e	75 07		 jne	 SHORT $LN57@init_types
  01230	33 c0		 xor	 eax, eax
  01232	e9 08 0a 00 00	 jmp	 $LN151@init_types
$LN57@init_types:

; 947  :     Mod_singleton = PyType_GenericNew(Mod_type, NULL, NULL);

  01237	45 33 c0	 xor	 r8d, r8d
  0123a	33 d2		 xor	 edx, edx
  0123c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Mod_type
  01243	e8 00 00 00 00	 call	 PyType_GenericNew
  01248	48 89 05 00 00
	00 00		 mov	 QWORD PTR Mod_singleton, rax

; 948  :     if (!Mod_singleton) return 0;

  0124f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Mod_singleton, 0
  01257	75 07		 jne	 SHORT $LN56@init_types
  01259	33 c0		 xor	 eax, eax
  0125b	e9 df 09 00 00	 jmp	 $LN151@init_types
$LN56@init_types:

; 949  :     Pow_type = make_type("Pow", operator_type, NULL, 0);

  01260	45 33 c9	 xor	 r9d, r9d
  01263	45 33 c0	 xor	 r8d, r8d
  01266	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  0126d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03DGEDEMGN@Pow?$AA@
  01274	e8 00 00 00 00	 call	 make_type
  01279	48 89 05 00 00
	00 00		 mov	 QWORD PTR Pow_type, rax

; 950  :     if (!Pow_type) return 0;

  01280	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Pow_type, 0
  01288	75 07		 jne	 SHORT $LN55@init_types
  0128a	33 c0		 xor	 eax, eax
  0128c	e9 ae 09 00 00	 jmp	 $LN151@init_types
$LN55@init_types:

; 951  :     Pow_singleton = PyType_GenericNew(Pow_type, NULL, NULL);

  01291	45 33 c0	 xor	 r8d, r8d
  01294	33 d2		 xor	 edx, edx
  01296	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Pow_type
  0129d	e8 00 00 00 00	 call	 PyType_GenericNew
  012a2	48 89 05 00 00
	00 00		 mov	 QWORD PTR Pow_singleton, rax

; 952  :     if (!Pow_singleton) return 0;

  012a9	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Pow_singleton, 0
  012b1	75 07		 jne	 SHORT $LN54@init_types
  012b3	33 c0		 xor	 eax, eax
  012b5	e9 85 09 00 00	 jmp	 $LN151@init_types
$LN54@init_types:

; 953  :     LShift_type = make_type("LShift", operator_type, NULL, 0);

  012ba	45 33 c9	 xor	 r9d, r9d
  012bd	45 33 c0	 xor	 r8d, r8d
  012c0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  012c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IDEHMKLA@LShift?$AA@
  012ce	e8 00 00 00 00	 call	 make_type
  012d3	48 89 05 00 00
	00 00		 mov	 QWORD PTR LShift_type, rax

; 954  :     if (!LShift_type) return 0;

  012da	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR LShift_type, 0
  012e2	75 07		 jne	 SHORT $LN53@init_types
  012e4	33 c0		 xor	 eax, eax
  012e6	e9 54 09 00 00	 jmp	 $LN151@init_types
$LN53@init_types:

; 955  :     LShift_singleton = PyType_GenericNew(LShift_type, NULL, NULL);

  012eb	45 33 c0	 xor	 r8d, r8d
  012ee	33 d2		 xor	 edx, edx
  012f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR LShift_type
  012f7	e8 00 00 00 00	 call	 PyType_GenericNew
  012fc	48 89 05 00 00
	00 00		 mov	 QWORD PTR LShift_singleton, rax

; 956  :     if (!LShift_singleton) return 0;

  01303	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR LShift_singleton, 0
  0130b	75 07		 jne	 SHORT $LN52@init_types
  0130d	33 c0		 xor	 eax, eax
  0130f	e9 2b 09 00 00	 jmp	 $LN151@init_types
$LN52@init_types:

; 957  :     RShift_type = make_type("RShift", operator_type, NULL, 0);

  01314	45 33 c9	 xor	 r9d, r9d
  01317	45 33 c0	 xor	 r8d, r8d
  0131a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  01321	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LEKGCNCD@RShift?$AA@
  01328	e8 00 00 00 00	 call	 make_type
  0132d	48 89 05 00 00
	00 00		 mov	 QWORD PTR RShift_type, rax

; 958  :     if (!RShift_type) return 0;

  01334	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR RShift_type, 0
  0133c	75 07		 jne	 SHORT $LN51@init_types
  0133e	33 c0		 xor	 eax, eax
  01340	e9 fa 08 00 00	 jmp	 $LN151@init_types
$LN51@init_types:

; 959  :     RShift_singleton = PyType_GenericNew(RShift_type, NULL, NULL);

  01345	45 33 c0	 xor	 r8d, r8d
  01348	33 d2		 xor	 edx, edx
  0134a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RShift_type
  01351	e8 00 00 00 00	 call	 PyType_GenericNew
  01356	48 89 05 00 00
	00 00		 mov	 QWORD PTR RShift_singleton, rax

; 960  :     if (!RShift_singleton) return 0;

  0135d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR RShift_singleton, 0
  01365	75 07		 jne	 SHORT $LN50@init_types
  01367	33 c0		 xor	 eax, eax
  01369	e9 d1 08 00 00	 jmp	 $LN151@init_types
$LN50@init_types:

; 961  :     BitOr_type = make_type("BitOr", operator_type, NULL, 0);

  0136e	45 33 c9	 xor	 r9d, r9d
  01371	45 33 c0	 xor	 r8d, r8d
  01374	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  0137b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BKBNAGEF@BitOr?$AA@
  01382	e8 00 00 00 00	 call	 make_type
  01387	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitOr_type, rax

; 962  :     if (!BitOr_type) return 0;

  0138e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR BitOr_type, 0
  01396	75 07		 jne	 SHORT $LN49@init_types
  01398	33 c0		 xor	 eax, eax
  0139a	e9 a0 08 00 00	 jmp	 $LN151@init_types
$LN49@init_types:

; 963  :     BitOr_singleton = PyType_GenericNew(BitOr_type, NULL, NULL);

  0139f	45 33 c0	 xor	 r8d, r8d
  013a2	33 d2		 xor	 edx, edx
  013a4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BitOr_type
  013ab	e8 00 00 00 00	 call	 PyType_GenericNew
  013b0	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitOr_singleton, rax

; 964  :     if (!BitOr_singleton) return 0;

  013b7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR BitOr_singleton, 0
  013bf	75 07		 jne	 SHORT $LN48@init_types
  013c1	33 c0		 xor	 eax, eax
  013c3	e9 77 08 00 00	 jmp	 $LN151@init_types
$LN48@init_types:

; 965  :     BitXor_type = make_type("BitXor", operator_type, NULL, 0);

  013c8	45 33 c9	 xor	 r9d, r9d
  013cb	45 33 c0	 xor	 r8d, r8d
  013ce	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  013d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06MCJFOMGI@BitXor?$AA@
  013dc	e8 00 00 00 00	 call	 make_type
  013e1	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitXor_type, rax

; 966  :     if (!BitXor_type) return 0;

  013e8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR BitXor_type, 0
  013f0	75 07		 jne	 SHORT $LN47@init_types
  013f2	33 c0		 xor	 eax, eax
  013f4	e9 46 08 00 00	 jmp	 $LN151@init_types
$LN47@init_types:

; 967  :     BitXor_singleton = PyType_GenericNew(BitXor_type, NULL, NULL);

  013f9	45 33 c0	 xor	 r8d, r8d
  013fc	33 d2		 xor	 edx, edx
  013fe	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BitXor_type
  01405	e8 00 00 00 00	 call	 PyType_GenericNew
  0140a	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitXor_singleton, rax

; 968  :     if (!BitXor_singleton) return 0;

  01411	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR BitXor_singleton, 0
  01419	75 07		 jne	 SHORT $LN46@init_types
  0141b	33 c0		 xor	 eax, eax
  0141d	e9 1d 08 00 00	 jmp	 $LN151@init_types
$LN46@init_types:

; 969  :     BitAnd_type = make_type("BitAnd", operator_type, NULL, 0);

  01422	45 33 c9	 xor	 r9d, r9d
  01425	45 33 c0	 xor	 r8d, r8d
  01428	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  0142f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06PCNOCLJN@BitAnd?$AA@
  01436	e8 00 00 00 00	 call	 make_type
  0143b	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitAnd_type, rax

; 970  :     if (!BitAnd_type) return 0;

  01442	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR BitAnd_type, 0
  0144a	75 07		 jne	 SHORT $LN45@init_types
  0144c	33 c0		 xor	 eax, eax
  0144e	e9 ec 07 00 00	 jmp	 $LN151@init_types
$LN45@init_types:

; 971  :     BitAnd_singleton = PyType_GenericNew(BitAnd_type, NULL, NULL);

  01453	45 33 c0	 xor	 r8d, r8d
  01456	33 d2		 xor	 edx, edx
  01458	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BitAnd_type
  0145f	e8 00 00 00 00	 call	 PyType_GenericNew
  01464	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitAnd_singleton, rax

; 972  :     if (!BitAnd_singleton) return 0;

  0146b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR BitAnd_singleton, 0
  01473	75 07		 jne	 SHORT $LN44@init_types
  01475	33 c0		 xor	 eax, eax
  01477	e9 c3 07 00 00	 jmp	 $LN151@init_types
$LN44@init_types:

; 973  :     FloorDiv_type = make_type("FloorDiv", operator_type, NULL, 0);

  0147c	45 33 c9	 xor	 r9d, r9d
  0147f	45 33 c0	 xor	 r8d, r8d
  01482	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR operator_type
  01489	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BOGBPHLB@FloorDiv?$AA@
  01490	e8 00 00 00 00	 call	 make_type
  01495	48 89 05 00 00
	00 00		 mov	 QWORD PTR FloorDiv_type, rax

; 974  :     if (!FloorDiv_type) return 0;

  0149c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR FloorDiv_type, 0
  014a4	75 07		 jne	 SHORT $LN43@init_types
  014a6	33 c0		 xor	 eax, eax
  014a8	e9 92 07 00 00	 jmp	 $LN151@init_types
$LN43@init_types:

; 975  :     FloorDiv_singleton = PyType_GenericNew(FloorDiv_type, NULL, NULL);

  014ad	45 33 c0	 xor	 r8d, r8d
  014b0	33 d2		 xor	 edx, edx
  014b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR FloorDiv_type
  014b9	e8 00 00 00 00	 call	 PyType_GenericNew
  014be	48 89 05 00 00
	00 00		 mov	 QWORD PTR FloorDiv_singleton, rax

; 976  :     if (!FloorDiv_singleton) return 0;

  014c5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR FloorDiv_singleton, 0
  014cd	75 07		 jne	 SHORT $LN42@init_types
  014cf	33 c0		 xor	 eax, eax
  014d1	e9 69 07 00 00	 jmp	 $LN151@init_types
$LN42@init_types:

; 977  :     unaryop_type = make_type("unaryop", &AST_type, NULL, 0);

  014d6	45 33 c9	 xor	 r9d, r9d
  014d9	45 33 c0	 xor	 r8d, r8d
  014dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  014e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JPNNPNHH@unaryop?$AA@
  014ea	e8 00 00 00 00	 call	 make_type
  014ef	48 89 05 00 00
	00 00		 mov	 QWORD PTR unaryop_type, rax

; 978  :     if (!unaryop_type) return 0;

  014f6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR unaryop_type, 0
  014fe	75 07		 jne	 SHORT $LN41@init_types
  01500	33 c0		 xor	 eax, eax
  01502	e9 38 07 00 00	 jmp	 $LN151@init_types
$LN41@init_types:

; 979  :     if (!add_attributes(unaryop_type, NULL, 0)) return 0;

  01507	45 33 c0	 xor	 r8d, r8d
  0150a	33 d2		 xor	 edx, edx
  0150c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR unaryop_type
  01513	e8 00 00 00 00	 call	 add_attributes
  01518	85 c0		 test	 eax, eax
  0151a	75 07		 jne	 SHORT $LN40@init_types
  0151c	33 c0		 xor	 eax, eax
  0151e	e9 1c 07 00 00	 jmp	 $LN151@init_types
$LN40@init_types:

; 980  :     Invert_type = make_type("Invert", unaryop_type, NULL, 0);

  01523	45 33 c9	 xor	 r9d, r9d
  01526	45 33 c0	 xor	 r8d, r8d
  01529	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR unaryop_type
  01530	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OHLCGMJD@Invert?$AA@
  01537	e8 00 00 00 00	 call	 make_type
  0153c	48 89 05 00 00
	00 00		 mov	 QWORD PTR Invert_type, rax

; 981  :     if (!Invert_type) return 0;

  01543	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Invert_type, 0
  0154b	75 07		 jne	 SHORT $LN39@init_types
  0154d	33 c0		 xor	 eax, eax
  0154f	e9 eb 06 00 00	 jmp	 $LN151@init_types
$LN39@init_types:

; 982  :     Invert_singleton = PyType_GenericNew(Invert_type, NULL, NULL);

  01554	45 33 c0	 xor	 r8d, r8d
  01557	33 d2		 xor	 edx, edx
  01559	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Invert_type
  01560	e8 00 00 00 00	 call	 PyType_GenericNew
  01565	48 89 05 00 00
	00 00		 mov	 QWORD PTR Invert_singleton, rax

; 983  :     if (!Invert_singleton) return 0;

  0156c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Invert_singleton, 0
  01574	75 07		 jne	 SHORT $LN38@init_types
  01576	33 c0		 xor	 eax, eax
  01578	e9 c2 06 00 00	 jmp	 $LN151@init_types
$LN38@init_types:

; 984  :     Not_type = make_type("Not", unaryop_type, NULL, 0);

  0157d	45 33 c9	 xor	 r9d, r9d
  01580	45 33 c0	 xor	 r8d, r8d
  01583	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR unaryop_type
  0158a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03KNKIDPAC@Not?$AA@
  01591	e8 00 00 00 00	 call	 make_type
  01596	48 89 05 00 00
	00 00		 mov	 QWORD PTR Not_type, rax

; 985  :     if (!Not_type) return 0;

  0159d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Not_type, 0
  015a5	75 07		 jne	 SHORT $LN37@init_types
  015a7	33 c0		 xor	 eax, eax
  015a9	e9 91 06 00 00	 jmp	 $LN151@init_types
$LN37@init_types:

; 986  :     Not_singleton = PyType_GenericNew(Not_type, NULL, NULL);

  015ae	45 33 c0	 xor	 r8d, r8d
  015b1	33 d2		 xor	 edx, edx
  015b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Not_type
  015ba	e8 00 00 00 00	 call	 PyType_GenericNew
  015bf	48 89 05 00 00
	00 00		 mov	 QWORD PTR Not_singleton, rax

; 987  :     if (!Not_singleton) return 0;

  015c6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Not_singleton, 0
  015ce	75 07		 jne	 SHORT $LN36@init_types
  015d0	33 c0		 xor	 eax, eax
  015d2	e9 68 06 00 00	 jmp	 $LN151@init_types
$LN36@init_types:

; 988  :     UAdd_type = make_type("UAdd", unaryop_type, NULL, 0);

  015d7	45 33 c9	 xor	 r9d, r9d
  015da	45 33 c0	 xor	 r8d, r8d
  015dd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR unaryop_type
  015e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04KEMJLKFO@UAdd?$AA@
  015eb	e8 00 00 00 00	 call	 make_type
  015f0	48 89 05 00 00
	00 00		 mov	 QWORD PTR UAdd_type, rax

; 989  :     if (!UAdd_type) return 0;

  015f7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR UAdd_type, 0
  015ff	75 07		 jne	 SHORT $LN35@init_types
  01601	33 c0		 xor	 eax, eax
  01603	e9 37 06 00 00	 jmp	 $LN151@init_types
$LN35@init_types:

; 990  :     UAdd_singleton = PyType_GenericNew(UAdd_type, NULL, NULL);

  01608	45 33 c0	 xor	 r8d, r8d
  0160b	33 d2		 xor	 edx, edx
  0160d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR UAdd_type
  01614	e8 00 00 00 00	 call	 PyType_GenericNew
  01619	48 89 05 00 00
	00 00		 mov	 QWORD PTR UAdd_singleton, rax

; 991  :     if (!UAdd_singleton) return 0;

  01620	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR UAdd_singleton, 0
  01628	75 07		 jne	 SHORT $LN34@init_types
  0162a	33 c0		 xor	 eax, eax
  0162c	e9 0e 06 00 00	 jmp	 $LN151@init_types
$LN34@init_types:

; 992  :     USub_type = make_type("USub", unaryop_type, NULL, 0);

  01631	45 33 c9	 xor	 r9d, r9d
  01634	45 33 c0	 xor	 r8d, r8d
  01637	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR unaryop_type
  0163e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BFGHELIL@USub?$AA@
  01645	e8 00 00 00 00	 call	 make_type
  0164a	48 89 05 00 00
	00 00		 mov	 QWORD PTR USub_type, rax

; 993  :     if (!USub_type) return 0;

  01651	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR USub_type, 0
  01659	75 07		 jne	 SHORT $LN33@init_types
  0165b	33 c0		 xor	 eax, eax
  0165d	e9 dd 05 00 00	 jmp	 $LN151@init_types
$LN33@init_types:

; 994  :     USub_singleton = PyType_GenericNew(USub_type, NULL, NULL);

  01662	45 33 c0	 xor	 r8d, r8d
  01665	33 d2		 xor	 edx, edx
  01667	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR USub_type
  0166e	e8 00 00 00 00	 call	 PyType_GenericNew
  01673	48 89 05 00 00
	00 00		 mov	 QWORD PTR USub_singleton, rax

; 995  :     if (!USub_singleton) return 0;

  0167a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR USub_singleton, 0
  01682	75 07		 jne	 SHORT $LN32@init_types
  01684	33 c0		 xor	 eax, eax
  01686	e9 b4 05 00 00	 jmp	 $LN151@init_types
$LN32@init_types:

; 996  :     cmpop_type = make_type("cmpop", &AST_type, NULL, 0);

  0168b	45 33 c9	 xor	 r9d, r9d
  0168e	45 33 c0	 xor	 r8d, r8d
  01691	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01698	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KGHEMFCD@cmpop?$AA@
  0169f	e8 00 00 00 00	 call	 make_type
  016a4	48 89 05 00 00
	00 00		 mov	 QWORD PTR cmpop_type, rax

; 997  :     if (!cmpop_type) return 0;

  016ab	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR cmpop_type, 0
  016b3	75 07		 jne	 SHORT $LN31@init_types
  016b5	33 c0		 xor	 eax, eax
  016b7	e9 83 05 00 00	 jmp	 $LN151@init_types
$LN31@init_types:

; 998  :     if (!add_attributes(cmpop_type, NULL, 0)) return 0;

  016bc	45 33 c0	 xor	 r8d, r8d
  016bf	33 d2		 xor	 edx, edx
  016c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cmpop_type
  016c8	e8 00 00 00 00	 call	 add_attributes
  016cd	85 c0		 test	 eax, eax
  016cf	75 07		 jne	 SHORT $LN30@init_types
  016d1	33 c0		 xor	 eax, eax
  016d3	e9 67 05 00 00	 jmp	 $LN151@init_types
$LN30@init_types:

; 999  :     Eq_type = make_type("Eq", cmpop_type, NULL, 0);

  016d8	45 33 c9	 xor	 r9d, r9d
  016db	45 33 c0	 xor	 r8d, r8d
  016de	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  016e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02EAMLCBHB@Eq?$AA@
  016ec	e8 00 00 00 00	 call	 make_type
  016f1	48 89 05 00 00
	00 00		 mov	 QWORD PTR Eq_type, rax

; 1000 :     if (!Eq_type) return 0;

  016f8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Eq_type, 0
  01700	75 07		 jne	 SHORT $LN29@init_types
  01702	33 c0		 xor	 eax, eax
  01704	e9 36 05 00 00	 jmp	 $LN151@init_types
$LN29@init_types:

; 1001 :     Eq_singleton = PyType_GenericNew(Eq_type, NULL, NULL);

  01709	45 33 c0	 xor	 r8d, r8d
  0170c	33 d2		 xor	 edx, edx
  0170e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Eq_type
  01715	e8 00 00 00 00	 call	 PyType_GenericNew
  0171a	48 89 05 00 00
	00 00		 mov	 QWORD PTR Eq_singleton, rax

; 1002 :     if (!Eq_singleton) return 0;

  01721	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Eq_singleton, 0
  01729	75 07		 jne	 SHORT $LN28@init_types
  0172b	33 c0		 xor	 eax, eax
  0172d	e9 0d 05 00 00	 jmp	 $LN151@init_types
$LN28@init_types:

; 1003 :     NotEq_type = make_type("NotEq", cmpop_type, NULL, 0);

  01732	45 33 c9	 xor	 r9d, r9d
  01735	45 33 c0	 xor	 r8d, r8d
  01738	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  0173f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MECFOFIL@NotEq?$AA@
  01746	e8 00 00 00 00	 call	 make_type
  0174b	48 89 05 00 00
	00 00		 mov	 QWORD PTR NotEq_type, rax

; 1004 :     if (!NotEq_type) return 0;

  01752	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR NotEq_type, 0
  0175a	75 07		 jne	 SHORT $LN27@init_types
  0175c	33 c0		 xor	 eax, eax
  0175e	e9 dc 04 00 00	 jmp	 $LN151@init_types
$LN27@init_types:

; 1005 :     NotEq_singleton = PyType_GenericNew(NotEq_type, NULL, NULL);

  01763	45 33 c0	 xor	 r8d, r8d
  01766	33 d2		 xor	 edx, edx
  01768	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR NotEq_type
  0176f	e8 00 00 00 00	 call	 PyType_GenericNew
  01774	48 89 05 00 00
	00 00		 mov	 QWORD PTR NotEq_singleton, rax

; 1006 :     if (!NotEq_singleton) return 0;

  0177b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR NotEq_singleton, 0
  01783	75 07		 jne	 SHORT $LN26@init_types
  01785	33 c0		 xor	 eax, eax
  01787	e9 b3 04 00 00	 jmp	 $LN151@init_types
$LN26@init_types:

; 1007 :     Lt_type = make_type("Lt", cmpop_type, NULL, 0);

  0178c	45 33 c9	 xor	 r9d, r9d
  0178f	45 33 c0	 xor	 r8d, r8d
  01792	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  01799	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DCGNOOLL@Lt?$AA@
  017a0	e8 00 00 00 00	 call	 make_type
  017a5	48 89 05 00 00
	00 00		 mov	 QWORD PTR Lt_type, rax

; 1008 :     if (!Lt_type) return 0;

  017ac	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Lt_type, 0
  017b4	75 07		 jne	 SHORT $LN25@init_types
  017b6	33 c0		 xor	 eax, eax
  017b8	e9 82 04 00 00	 jmp	 $LN151@init_types
$LN25@init_types:

; 1009 :     Lt_singleton = PyType_GenericNew(Lt_type, NULL, NULL);

  017bd	45 33 c0	 xor	 r8d, r8d
  017c0	33 d2		 xor	 edx, edx
  017c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Lt_type
  017c9	e8 00 00 00 00	 call	 PyType_GenericNew
  017ce	48 89 05 00 00
	00 00		 mov	 QWORD PTR Lt_singleton, rax

; 1010 :     if (!Lt_singleton) return 0;

  017d5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Lt_singleton, 0
  017dd	75 07		 jne	 SHORT $LN24@init_types
  017df	33 c0		 xor	 eax, eax
  017e1	e9 59 04 00 00	 jmp	 $LN151@init_types
$LN24@init_types:

; 1011 :     LtE_type = make_type("LtE", cmpop_type, NULL, 0);

  017e6	45 33 c9	 xor	 r9d, r9d
  017e9	45 33 c0	 xor	 r8d, r8d
  017ec	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  017f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03NBIPLMKK@LtE?$AA@
  017fa	e8 00 00 00 00	 call	 make_type
  017ff	48 89 05 00 00
	00 00		 mov	 QWORD PTR LtE_type, rax

; 1012 :     if (!LtE_type) return 0;

  01806	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR LtE_type, 0
  0180e	75 07		 jne	 SHORT $LN23@init_types
  01810	33 c0		 xor	 eax, eax
  01812	e9 28 04 00 00	 jmp	 $LN151@init_types
$LN23@init_types:

; 1013 :     LtE_singleton = PyType_GenericNew(LtE_type, NULL, NULL);

  01817	45 33 c0	 xor	 r8d, r8d
  0181a	33 d2		 xor	 edx, edx
  0181c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR LtE_type
  01823	e8 00 00 00 00	 call	 PyType_GenericNew
  01828	48 89 05 00 00
	00 00		 mov	 QWORD PTR LtE_singleton, rax

; 1014 :     if (!LtE_singleton) return 0;

  0182f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR LtE_singleton, 0
  01837	75 07		 jne	 SHORT $LN22@init_types
  01839	33 c0		 xor	 eax, eax
  0183b	e9 ff 03 00 00	 jmp	 $LN151@init_types
$LN22@init_types:

; 1015 :     Gt_type = make_type("Gt", cmpop_type, NULL, 0);

  01840	45 33 c9	 xor	 r9d, r9d
  01843	45 33 c0	 xor	 r8d, r8d
  01846	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  0184d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DODIABFK@Gt?$AA@
  01854	e8 00 00 00 00	 call	 make_type
  01859	48 89 05 00 00
	00 00		 mov	 QWORD PTR Gt_type, rax

; 1016 :     if (!Gt_type) return 0;

  01860	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Gt_type, 0
  01868	75 07		 jne	 SHORT $LN21@init_types
  0186a	33 c0		 xor	 eax, eax
  0186c	e9 ce 03 00 00	 jmp	 $LN151@init_types
$LN21@init_types:

; 1017 :     Gt_singleton = PyType_GenericNew(Gt_type, NULL, NULL);

  01871	45 33 c0	 xor	 r8d, r8d
  01874	33 d2		 xor	 edx, edx
  01876	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Gt_type
  0187d	e8 00 00 00 00	 call	 PyType_GenericNew
  01882	48 89 05 00 00
	00 00		 mov	 QWORD PTR Gt_singleton, rax

; 1018 :     if (!Gt_singleton) return 0;

  01889	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Gt_singleton, 0
  01891	75 07		 jne	 SHORT $LN20@init_types
  01893	33 c0		 xor	 eax, eax
  01895	e9 a5 03 00 00	 jmp	 $LN151@init_types
$LN20@init_types:

; 1019 :     GtE_type = make_type("GtE", cmpop_type, NULL, 0);

  0189a	45 33 c9	 xor	 r9d, r9d
  0189d	45 33 c0	 xor	 r8d, r8d
  018a0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  018a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03GIODLKL@GtE?$AA@
  018ae	e8 00 00 00 00	 call	 make_type
  018b3	48 89 05 00 00
	00 00		 mov	 QWORD PTR GtE_type, rax

; 1020 :     if (!GtE_type) return 0;

  018ba	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR GtE_type, 0
  018c2	75 07		 jne	 SHORT $LN19@init_types
  018c4	33 c0		 xor	 eax, eax
  018c6	e9 74 03 00 00	 jmp	 $LN151@init_types
$LN19@init_types:

; 1021 :     GtE_singleton = PyType_GenericNew(GtE_type, NULL, NULL);

  018cb	45 33 c0	 xor	 r8d, r8d
  018ce	33 d2		 xor	 edx, edx
  018d0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GtE_type
  018d7	e8 00 00 00 00	 call	 PyType_GenericNew
  018dc	48 89 05 00 00
	00 00		 mov	 QWORD PTR GtE_singleton, rax

; 1022 :     if (!GtE_singleton) return 0;

  018e3	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR GtE_singleton, 0
  018eb	75 07		 jne	 SHORT $LN18@init_types
  018ed	33 c0		 xor	 eax, eax
  018ef	e9 4b 03 00 00	 jmp	 $LN151@init_types
$LN18@init_types:

; 1023 :     Is_type = make_type("Is", cmpop_type, NULL, 0);

  018f4	45 33 c9	 xor	 r9d, r9d
  018f7	45 33 c0	 xor	 r8d, r8d
  018fa	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  01901	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HLOHLKJH@Is?$AA@
  01908	e8 00 00 00 00	 call	 make_type
  0190d	48 89 05 00 00
	00 00		 mov	 QWORD PTR Is_type, rax

; 1024 :     if (!Is_type) return 0;

  01914	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Is_type, 0
  0191c	75 07		 jne	 SHORT $LN17@init_types
  0191e	33 c0		 xor	 eax, eax
  01920	e9 1a 03 00 00	 jmp	 $LN151@init_types
$LN17@init_types:

; 1025 :     Is_singleton = PyType_GenericNew(Is_type, NULL, NULL);

  01925	45 33 c0	 xor	 r8d, r8d
  01928	33 d2		 xor	 edx, edx
  0192a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Is_type
  01931	e8 00 00 00 00	 call	 PyType_GenericNew
  01936	48 89 05 00 00
	00 00		 mov	 QWORD PTR Is_singleton, rax

; 1026 :     if (!Is_singleton) return 0;

  0193d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Is_singleton, 0
  01945	75 07		 jne	 SHORT $LN16@init_types
  01947	33 c0		 xor	 eax, eax
  01949	e9 f1 02 00 00	 jmp	 $LN151@init_types
$LN16@init_types:

; 1027 :     IsNot_type = make_type("IsNot", cmpop_type, NULL, 0);

  0194e	45 33 c9	 xor	 r9d, r9d
  01951	45 33 c0	 xor	 r8d, r8d
  01954	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  0195b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KLALIAAG@IsNot?$AA@
  01962	e8 00 00 00 00	 call	 make_type
  01967	48 89 05 00 00
	00 00		 mov	 QWORD PTR IsNot_type, rax

; 1028 :     if (!IsNot_type) return 0;

  0196e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR IsNot_type, 0
  01976	75 07		 jne	 SHORT $LN15@init_types
  01978	33 c0		 xor	 eax, eax
  0197a	e9 c0 02 00 00	 jmp	 $LN151@init_types
$LN15@init_types:

; 1029 :     IsNot_singleton = PyType_GenericNew(IsNot_type, NULL, NULL);

  0197f	45 33 c0	 xor	 r8d, r8d
  01982	33 d2		 xor	 edx, edx
  01984	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR IsNot_type
  0198b	e8 00 00 00 00	 call	 PyType_GenericNew
  01990	48 89 05 00 00
	00 00		 mov	 QWORD PTR IsNot_singleton, rax

; 1030 :     if (!IsNot_singleton) return 0;

  01997	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR IsNot_singleton, 0
  0199f	75 07		 jne	 SHORT $LN14@init_types
  019a1	33 c0		 xor	 eax, eax
  019a3	e9 97 02 00 00	 jmp	 $LN151@init_types
$LN14@init_types:

; 1031 :     In_type = make_type("In", cmpop_type, NULL, 0);

  019a8	45 33 c9	 xor	 r9d, r9d
  019ab	45 33 c0	 xor	 r8d, r8d
  019ae	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  019b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02IEILNGIL@In?$AA@
  019bc	e8 00 00 00 00	 call	 make_type
  019c1	48 89 05 00 00
	00 00		 mov	 QWORD PTR In_type, rax

; 1032 :     if (!In_type) return 0;

  019c8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR In_type, 0
  019d0	75 07		 jne	 SHORT $LN13@init_types
  019d2	33 c0		 xor	 eax, eax
  019d4	e9 66 02 00 00	 jmp	 $LN151@init_types
$LN13@init_types:

; 1033 :     In_singleton = PyType_GenericNew(In_type, NULL, NULL);

  019d9	45 33 c0	 xor	 r8d, r8d
  019dc	33 d2		 xor	 edx, edx
  019de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR In_type
  019e5	e8 00 00 00 00	 call	 PyType_GenericNew
  019ea	48 89 05 00 00
	00 00		 mov	 QWORD PTR In_singleton, rax

; 1034 :     if (!In_singleton) return 0;

  019f1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR In_singleton, 0
  019f9	75 07		 jne	 SHORT $LN12@init_types
  019fb	33 c0		 xor	 eax, eax
  019fd	e9 3d 02 00 00	 jmp	 $LN151@init_types
$LN12@init_types:

; 1035 :     NotIn_type = make_type("NotIn", cmpop_type, NULL, 0);

  01a02	45 33 c9	 xor	 r9d, r9d
  01a05	45 33 c0	 xor	 r8d, r8d
  01a08	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR cmpop_type
  01a0f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GFBCHB@NotIn?$AA@
  01a16	e8 00 00 00 00	 call	 make_type
  01a1b	48 89 05 00 00
	00 00		 mov	 QWORD PTR NotIn_type, rax

; 1036 :     if (!NotIn_type) return 0;

  01a22	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR NotIn_type, 0
  01a2a	75 07		 jne	 SHORT $LN11@init_types
  01a2c	33 c0		 xor	 eax, eax
  01a2e	e9 0c 02 00 00	 jmp	 $LN151@init_types
$LN11@init_types:

; 1037 :     NotIn_singleton = PyType_GenericNew(NotIn_type, NULL, NULL);

  01a33	45 33 c0	 xor	 r8d, r8d
  01a36	33 d2		 xor	 edx, edx
  01a38	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR NotIn_type
  01a3f	e8 00 00 00 00	 call	 PyType_GenericNew
  01a44	48 89 05 00 00
	00 00		 mov	 QWORD PTR NotIn_singleton, rax

; 1038 :     if (!NotIn_singleton) return 0;

  01a4b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR NotIn_singleton, 0
  01a53	75 07		 jne	 SHORT $LN10@init_types
  01a55	33 c0		 xor	 eax, eax
  01a57	e9 e3 01 00 00	 jmp	 $LN151@init_types
$LN10@init_types:

; 1039 :     comprehension_type = make_type("comprehension", &AST_type,
; 1040 :                                    comprehension_fields, 3);

  01a5c	41 b9 03 00 00
	00		 mov	 r9d, 3
  01a62	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:comprehension_fields
  01a69	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01a70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@PDDLNDDO@comprehension?$AA@
  01a77	e8 00 00 00 00	 call	 make_type
  01a7c	48 89 05 00 00
	00 00		 mov	 QWORD PTR comprehension_type, rax

; 1041 :     if (!comprehension_type) return 0;

  01a83	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR comprehension_type, 0
  01a8b	75 07		 jne	 SHORT $LN9@init_types
  01a8d	33 c0		 xor	 eax, eax
  01a8f	e9 ab 01 00 00	 jmp	 $LN151@init_types
$LN9@init_types:

; 1042 :     excepthandler_type = make_type("excepthandler", &AST_type, NULL, 0);

  01a94	45 33 c9	 xor	 r9d, r9d
  01a97	45 33 c0	 xor	 r8d, r8d
  01a9a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01aa1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LBOCECKK@excepthandler?$AA@
  01aa8	e8 00 00 00 00	 call	 make_type
  01aad	48 89 05 00 00
	00 00		 mov	 QWORD PTR excepthandler_type, rax

; 1043 :     if (!excepthandler_type) return 0;

  01ab4	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR excepthandler_type, 0
  01abc	75 07		 jne	 SHORT $LN8@init_types
  01abe	33 c0		 xor	 eax, eax
  01ac0	e9 7a 01 00 00	 jmp	 $LN151@init_types
$LN8@init_types:

; 1044 :     if (!add_attributes(excepthandler_type, excepthandler_attributes, 2))

  01ac5	41 b8 02 00 00
	00		 mov	 r8d, 2
  01acb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:excepthandler_attributes
  01ad2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR excepthandler_type
  01ad9	e8 00 00 00 00	 call	 add_attributes
  01ade	85 c0		 test	 eax, eax
  01ae0	75 07		 jne	 SHORT $LN7@init_types

; 1045 :         return 0;

  01ae2	33 c0		 xor	 eax, eax
  01ae4	e9 56 01 00 00	 jmp	 $LN151@init_types
$LN7@init_types:

; 1046 :     ExceptHandler_type = make_type("ExceptHandler", excepthandler_type,
; 1047 :                                    ExceptHandler_fields, 3);

  01ae9	41 b9 03 00 00
	00		 mov	 r9d, 3
  01aef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ExceptHandler_fields
  01af6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR excepthandler_type
  01afd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IFPAFICE@ExceptHandler?$AA@
  01b04	e8 00 00 00 00	 call	 make_type
  01b09	48 89 05 00 00
	00 00		 mov	 QWORD PTR ExceptHandler_type, rax

; 1048 :     if (!ExceptHandler_type) return 0;

  01b10	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ExceptHandler_type, 0
  01b18	75 07		 jne	 SHORT $LN6@init_types
  01b1a	33 c0		 xor	 eax, eax
  01b1c	e9 1e 01 00 00	 jmp	 $LN151@init_types
$LN6@init_types:

; 1049 :     arguments_type = make_type("arguments", &AST_type, arguments_fields, 8);

  01b21	41 b9 08 00 00
	00		 mov	 r9d, 8
  01b27	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:arguments_fields
  01b2e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01b35	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PBNAMLIK@arguments?$AA@
  01b3c	e8 00 00 00 00	 call	 make_type
  01b41	48 89 05 00 00
	00 00		 mov	 QWORD PTR arguments_type, rax

; 1050 :     if (!arguments_type) return 0;

  01b48	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR arguments_type, 0
  01b50	75 07		 jne	 SHORT $LN5@init_types
  01b52	33 c0		 xor	 eax, eax
  01b54	e9 e6 00 00 00	 jmp	 $LN151@init_types
$LN5@init_types:

; 1051 :     arg_type = make_type("arg", &AST_type, arg_fields, 2);

  01b59	41 b9 02 00 00
	00		 mov	 r9d, 2
  01b5f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:arg_fields
  01b66	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01b6d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CAOIPBNL@arg?$AA@
  01b74	e8 00 00 00 00	 call	 make_type
  01b79	48 89 05 00 00
	00 00		 mov	 QWORD PTR arg_type, rax

; 1052 :     if (!arg_type) return 0;

  01b80	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR arg_type, 0
  01b88	75 07		 jne	 SHORT $LN4@init_types
  01b8a	33 c0		 xor	 eax, eax
  01b8c	e9 ae 00 00 00	 jmp	 $LN151@init_types
$LN4@init_types:

; 1053 :     keyword_type = make_type("keyword", &AST_type, keyword_fields, 2);

  01b91	41 b9 02 00 00
	00		 mov	 r9d, 2
  01b97	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:keyword_fields
  01b9e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01ba5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JMKMGKCH@keyword?$AA@
  01bac	e8 00 00 00 00	 call	 make_type
  01bb1	48 89 05 00 00
	00 00		 mov	 QWORD PTR keyword_type, rax

; 1054 :     if (!keyword_type) return 0;

  01bb8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR keyword_type, 0
  01bc0	75 04		 jne	 SHORT $LN3@init_types
  01bc2	33 c0		 xor	 eax, eax
  01bc4	eb 79		 jmp	 SHORT $LN151@init_types
$LN3@init_types:

; 1055 :     alias_type = make_type("alias", &AST_type, alias_fields, 2);

  01bc6	41 b9 02 00 00
	00		 mov	 r9d, 2
  01bcc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:alias_fields
  01bd3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01bda	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NKHOCLEE@alias?$AA@
  01be1	e8 00 00 00 00	 call	 make_type
  01be6	48 89 05 00 00
	00 00		 mov	 QWORD PTR alias_type, rax

; 1056 :     if (!alias_type) return 0;

  01bed	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR alias_type, 0
  01bf5	75 04		 jne	 SHORT $LN2@init_types
  01bf7	33 c0		 xor	 eax, eax
  01bf9	eb 44		 jmp	 SHORT $LN151@init_types
$LN2@init_types:

; 1057 :     withitem_type = make_type("withitem", &AST_type, withitem_fields, 2);

  01bfb	41 b9 02 00 00
	00		 mov	 r9d, 2
  01c01	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:withitem_fields
  01c08	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  01c0f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08FACALJAE@withitem?$AA@
  01c16	e8 00 00 00 00	 call	 make_type
  01c1b	48 89 05 00 00
	00 00		 mov	 QWORD PTR withitem_type, rax

; 1058 :     if (!withitem_type) return 0;

  01c22	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR withitem_type, 0
  01c2a	75 04		 jne	 SHORT $LN1@init_types
  01c2c	33 c0		 xor	 eax, eax
  01c2e	eb 0f		 jmp	 SHORT $LN151@init_types
$LN1@init_types:

; 1059 :     initialized = 1;

  01c30	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?initialized@?1??init_types@@9@9, 1

; 1060 :     return 1;

  01c3a	b8 01 00 00 00	 mov	 eax, 1
$LN151@init_types:

; 1061 : }

  01c3f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  01c43	c3		 ret	 0
init_types ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@EEPGGGII@s?$CIO?$CJ?$HLsOss?$HN?$AA@	; `string'
PUBLIC	??_C@_0L@LNCJCPDP@__module__?$AA@		; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_type DD imagerel make_type
	DD	imagerel make_type+264
	DD	imagerel $unwind$make_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_type DD 011801H
	DD	0c218H
xdata	ENDS
;	COMDAT ??_C@_0L@EEPGGGII@s?$CIO?$CJ?$HLsOss?$HN?$AA@
CONST	SEGMENT
??_C@_0L@EEPGGGII@s?$CIO?$CJ?$HLsOss?$HN?$AA@ DB 's(O){sOss}', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LNCJCPDP@__module__?$AA@
CONST	SEGMENT
??_C@_0L@LNCJCPDP@__module__?$AA@ DB '__module__', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT make_type
_TEXT	SEGMENT
i$ = 64
fnames$ = 72
result$ = 80
field$21905 = 88
type$ = 112
base$ = 120
fields$ = 128
num_fields$ = 136
make_type PROC						; COMDAT

; 610  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 611  :     PyObject *fnames, *result;
; 612  :     int i;
; 613  :     fnames = PyTuple_New(num_fields);

  00018	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR num_fields$[rsp]
  00020	48 8b c8	 mov	 rcx, rax
  00023	e8 00 00 00 00	 call	 PyTuple_New
  00028	48 89 44 24 48	 mov	 QWORD PTR fnames$[rsp], rax

; 614  :     if (!fnames) return NULL;

  0002d	48 83 7c 24 48
	00		 cmp	 QWORD PTR fnames$[rsp], 0
  00033	75 07		 jne	 SHORT $LN5@make_type
  00035	33 c0		 xor	 eax, eax
  00037	e9 c7 00 00 00	 jmp	 $LN6@make_type
$LN5@make_type:

; 615  :     for (i = 0; i < num_fields; i++) {

  0003c	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00044	eb 0a		 jmp	 SHORT $LN4@make_type
$LN3@make_type:
  00046	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0004a	ff c0		 inc	 eax
  0004c	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN4@make_type:
  00050	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR num_fields$[rsp]
  00057	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  0005b	7d 47		 jge	 SHORT $LN2@make_type

; 616  :         PyObject *field = PyUnicode_FromString(fields[i]);

  0005d	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00062	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR fields$[rsp]
  0006a	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0006e	e8 00 00 00 00	 call	 PyUnicode_FromString
  00073	48 89 44 24 58	 mov	 QWORD PTR field$21905[rsp], rax

; 617  :         if (!field) {

  00078	48 83 7c 24 58
	00		 cmp	 QWORD PTR field$21905[rsp], 0
  0007e	75 0e		 jne	 SHORT $LN1@make_type

; 618  :             Py_DECREF(fnames);

  00080	48 8b 4c 24 48	 mov	 rcx, QWORD PTR fnames$[rsp]
  00085	e8 00 00 00 00	 call	 _Py_DecRef

; 619  :             return NULL;

  0008a	33 c0		 xor	 eax, eax
  0008c	eb 75		 jmp	 SHORT $LN6@make_type
$LN1@make_type:

; 620  :         }
; 621  :         PyTuple_SET_ITEM(fnames, i, field);

  0008e	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00093	48 8b 4c 24 48	 mov	 rcx, QWORD PTR fnames$[rsp]
  00098	48 8b 54 24 58	 mov	 rdx, QWORD PTR field$21905[rsp]
  0009d	48 89 54 c1 70	 mov	 QWORD PTR [rcx+rax*8+112], rdx

; 622  :     }

  000a2	eb a2		 jmp	 SHORT $LN3@make_type
$LN2@make_type:

; 623  :     result = PyObject_CallFunction((PyObject*)&PyType_Type, "s(O){sOss}",
; 624  :                     type, base, "_fields", fnames, "__module__", "_ast");

  000a4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04BNOAKKGF@_ast?$AA@
  000ab	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
  000b7	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000bc	48 8b 44 24 48	 mov	 rax, QWORD PTR fnames$[rsp]
  000c1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07LKKIBPPO@_fields?$AA@
  000cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d2	4c 8b 4c 24 78	 mov	 r9, QWORD PTR base$[rsp]
  000d7	4c 8b 44 24 70	 mov	 r8, QWORD PTR type$[rsp]
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@EEPGGGII@s?$CIO?$CJ?$HLsOss?$HN?$AA@
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_Type
  000ea	e8 00 00 00 00	 call	 PyObject_CallFunction
  000ef	48 89 44 24 50	 mov	 QWORD PTR result$[rsp], rax

; 625  :     Py_DECREF(fnames);

  000f4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR fnames$[rsp]
  000f9	e8 00 00 00 00	 call	 _Py_DecRef

; 626  :     return (PyTypeObject*)result;

  000fe	48 8b 44 24 50	 mov	 rax, QWORD PTR result$[rsp]
$LN6@make_type:

; 627  : }

  00103	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00107	c3		 ret	 0
make_type ENDP
_TEXT	ENDS
EXTRN	_PyObject_SetAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_attributes DD imagerel add_attributes
	DD	imagerel add_attributes+243
	DD	imagerel $unwind$add_attributes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_attributes DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT add_attributes
_TEXT	SEGMENT
i$ = 32
s$ = 40
l$ = 48
result$ = 56
tv92 = 60
type$ = 80
attrs$ = 88
num_fields$ = 96
add_attributes PROC					; COMDAT

; 630  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 631  :     int i, result;
; 632  :     _Py_IDENTIFIER(_attributes);
; 633  :     PyObject *s, *l = PyTuple_New(num_fields);

  00013	48 63 44 24 60	 movsxd	 rax, DWORD PTR num_fields$[rsp]
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 PyTuple_New
  00020	48 89 44 24 30	 mov	 QWORD PTR l$[rsp], rax

; 634  :     if (!l)

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR l$[rsp], 0
  0002b	75 07		 jne	 SHORT $LN5@add_attrib

; 635  :         return 0;

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 ba 00 00 00	 jmp	 $LN6@add_attrib
$LN5@add_attrib:

; 636  :     for (i = 0; i < num_fields; i++) {

  00034	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0003c	eb 0a		 jmp	 SHORT $LN4@add_attrib
$LN3@add_attrib:
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00042	ff c0		 inc	 eax
  00044	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@add_attrib:
  00048	8b 44 24 60	 mov	 eax, DWORD PTR num_fields$[rsp]
  0004c	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00050	7d 44		 jge	 SHORT $LN2@add_attrib

; 637  :         s = PyUnicode_FromString(attrs[i]);

  00052	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00057	48 8b 4c 24 58	 mov	 rcx, QWORD PTR attrs$[rsp]
  0005c	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00060	e8 00 00 00 00	 call	 PyUnicode_FromString
  00065	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 638  :         if (!s) {

  0006a	48 83 7c 24 28
	00		 cmp	 QWORD PTR s$[rsp], 0
  00070	75 0e		 jne	 SHORT $LN1@add_attrib

; 639  :             Py_DECREF(l);

  00072	48 8b 4c 24 30	 mov	 rcx, QWORD PTR l$[rsp]
  00077	e8 00 00 00 00	 call	 _Py_DecRef

; 640  :             return 0;

  0007c	33 c0		 xor	 eax, eax
  0007e	eb 6e		 jmp	 SHORT $LN6@add_attrib
$LN1@add_attrib:

; 641  :         }
; 642  :         PyTuple_SET_ITEM(l, i, s);

  00080	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00085	48 8b 4c 24 30	 mov	 rcx, QWORD PTR l$[rsp]
  0008a	48 8b 54 24 28	 mov	 rdx, QWORD PTR s$[rsp]
  0008f	48 89 54 c1 70	 mov	 QWORD PTR [rcx+rax*8+112], rdx

; 643  :     }

  00094	eb a8		 jmp	 SHORT $LN3@add_attrib
$LN2@add_attrib:

; 644  :     result = _PyObject_SetAttrId((PyObject*)type, &PyId__attributes, l) >= 0;

  00096	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__attributes@?1??add_attributes@@9@9
  0009b	8b c0		 mov	 eax, eax
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000a3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000ac	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000b0	4c 8b 44 24 30	 mov	 r8, QWORD PTR l$[rsp]
  000b5	48 8b d0	 mov	 rdx, rax
  000b8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  000bd	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000c2	85 c0		 test	 eax, eax
  000c4	7c 0a		 jl	 SHORT $LN8@add_attrib
  000c6	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  000ce	eb 08		 jmp	 SHORT $LN9@add_attrib
$LN8@add_attrib:
  000d0	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN9@add_attrib:
  000d8	8b 44 24 3c	 mov	 eax, DWORD PTR tv92[rsp]
  000dc	89 44 24 38	 mov	 DWORD PTR result$[rsp], eax

; 645  :     Py_DECREF(l);

  000e0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR l$[rsp]
  000e5	e8 00 00 00 00	 call	 _Py_DecRef

; 646  :     return result;

  000ea	8b 44 24 38	 mov	 eax, DWORD PTR result$[rsp]
$LN6@add_attrib:

; 647  : }

  000ee	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f2	c3		 ret	 0
add_attributes ENDP
_TEXT	ENDS
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_ast_fields DD imagerel add_ast_fields
	DD	imagerel add_ast_fields+159
	DD	imagerel $unwind$add_ast_fields
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_ast_fields DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT add_ast_fields
_TEXT	SEGMENT
empty_tuple$ = 32
d$ = 40
add_ast_fields PROC					; COMDAT

; 745  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 746  :     PyObject *empty_tuple, *d;
; 747  :     if (PyType_Ready(&AST_type) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:AST_type
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	7d 07		 jge	 SHORT $LN7@add_ast_fi

; 748  :         return -1;

  00014	b8 ff ff ff ff	 mov	 eax, -1
  00019	eb 7f		 jmp	 SHORT $LN8@add_ast_fi
$LN7@add_ast_fi:

; 749  :     d = AST_type.tp_dict;

  0001b	48 8b 05 60 01
	00 00		 mov	 rax, QWORD PTR AST_type+352
  00022	48 89 44 24 28	 mov	 QWORD PTR d$[rsp], rax

; 750  :     empty_tuple = PyTuple_New(0);

  00027	33 c9		 xor	 ecx, ecx
  00029	e8 00 00 00 00	 call	 PyTuple_New
  0002e	48 89 44 24 20	 mov	 QWORD PTR empty_tuple$[rsp], rax

; 751  :     if (!empty_tuple ||
; 752  :         PyDict_SetItemString(d, "_fields", empty_tuple) < 0 ||
; 753  :         PyDict_SetItemString(d, "_attributes", empty_tuple) < 0) {

  00033	48 83 7c 24 20
	00		 cmp	 QWORD PTR empty_tuple$[rsp], 0
  00039	74 34		 je	 SHORT $LN5@add_ast_fi
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR empty_tuple$[rsp]
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07LKKIBPPO@_fields?$AA@
  00047	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0004c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00051	85 c0		 test	 eax, eax
  00053	7c 1a		 jl	 SHORT $LN5@add_ast_fi
  00055	4c 8b 44 24 20	 mov	 r8, QWORD PTR empty_tuple$[rsp]
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@CDHEEICO@_attributes?$AA@
  00061	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00066	e8 00 00 00 00	 call	 PyDict_SetItemString
  0006b	85 c0		 test	 eax, eax
  0006d	7d 1f		 jge	 SHORT $LN6@add_ast_fi
$LN5@add_ast_fi:
$LN4@add_ast_fi:

; 754  :         Py_XDECREF(empty_tuple);

  0006f	48 83 7c 24 20
	00		 cmp	 QWORD PTR empty_tuple$[rsp], 0
  00075	74 0a		 je	 SHORT $LN1@add_ast_fi
  00077	48 8b 4c 24 20	 mov	 rcx, QWORD PTR empty_tuple$[rsp]
  0007c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@add_ast_fi:
  00081	33 c0		 xor	 eax, eax
  00083	85 c0		 test	 eax, eax
  00085	75 e8		 jne	 SHORT $LN4@add_ast_fi

; 755  :         return -1;

  00087	b8 ff ff ff ff	 mov	 eax, -1
  0008c	eb 0c		 jmp	 SHORT $LN8@add_ast_fi
$LN6@add_ast_fi:

; 756  :     }
; 757  :     Py_DECREF(empty_tuple);

  0008e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR empty_tuple$[rsp]
  00093	e8 00 00 00 00	 call	 _Py_DecRef

; 758  :     return 0;

  00098	33 c0		 xor	 eax, eax
$LN8@add_ast_fi:

; 759  : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
add_ast_fields ENDP
_TEXT	ENDS
PUBLIC	PyAST_mod2obj
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyAST_mod2obj DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$PyAST_mod2obj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyAST_mod2obj DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyAST_mod2obj
_TEXT	SEGMENT
t$ = 48
PyAST_mod2obj PROC					; COMDAT

; 6951 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 6952 :     init_types();

  00009	e8 00 00 00 00	 call	 init_types

; 6953 :     return ast2obj_mod(t);

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR t$[rsp]
  00013	e8 00 00 00 00	 call	 ast2obj_mod

; 6954 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
PyAST_mod2obj ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_mod DD imagerel ast2obj_mod
	DD	imagerel ast2obj_mod+738
	DD	imagerel $unwind$ast2obj_mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_mod DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_mod
_TEXT	SEGMENT
value$ = 32
result$ = 40
o$ = 48
tv66 = 56
_o$ = 80
ast2obj_mod PROC					; COMDAT

; 2275 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2276 :     mod_ty o = (mod_ty)_o;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR _o$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 2277 :     PyObject *result = NULL, *value = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 2278 :     if (!o) {

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002b	75 18		 jne	 SHORT $LN27@ast2obj_mo

; 2279 :         Py_INCREF(Py_None);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00034	e8 00 00 00 00	 call	 _Py_IncRef

; 2280 :         return Py_None;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00040	e9 98 02 00 00	 jmp	 $LN28@ast2obj_mo
$LN27@ast2obj_mo:

; 2281 :     }
; 2282 : 
; 2283 :     switch (o->kind) {

  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0004a	8b 00		 mov	 eax, DWORD PTR [rax]
  0004c	89 44 24 38	 mov	 DWORD PTR tv66[rsp], eax
  00050	83 7c 24 38 01	 cmp	 DWORD PTR tv66[rsp], 1
  00055	74 26		 je	 SHORT $LN24@ast2obj_mo
  00057	83 7c 24 38 02	 cmp	 DWORD PTR tv66[rsp], 2
  0005c	0f 84 aa 00 00
	00		 je	 $LN20@ast2obj_mo
  00062	83 7c 24 38 03	 cmp	 DWORD PTR tv66[rsp], 3
  00067	0f 84 2e 01 00
	00		 je	 $LN16@ast2obj_mo
  0006d	83 7c 24 38 04	 cmp	 DWORD PTR tv66[rsp], 4
  00072	0f 84 ab 01 00
	00		 je	 $LN12@ast2obj_mo
  00078	e9 27 02 00 00	 jmp	 $LN25@ast2obj_mo
$LN24@ast2obj_mo:

; 2284 :     case Module_kind:
; 2285 :         result = PyType_GenericNew(Module_type, NULL, NULL);

  0007d	45 33 c0	 xor	 r8d, r8d
  00080	33 d2		 xor	 edx, edx
  00082	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Module_type
  00089	e8 00 00 00 00	 call	 PyType_GenericNew
  0008e	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2286 :         if (!result) goto failed;

  00093	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00099	75 05		 jne	 SHORT $LN23@ast2obj_mo
  0009b	e9 0b 02 00 00	 jmp	 $failed$23595
$LN23@ast2obj_mo:

; 2287 :         value = ast2obj_list(o->v.Module.body, ast2obj_stmt);

  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  000a7	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000ac	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000b0	e8 00 00 00 00	 call	 ast2obj_list
  000b5	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2288 :         if (!value) goto failed;

  000ba	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000c0	75 05		 jne	 SHORT $LN22@ast2obj_mo
  000c2	e9 e4 01 00 00	 jmp	 $failed$23595
$LN22@ast2obj_mo:

; 2289 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  000c7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  000cc	8b c0		 mov	 eax, eax
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000d4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000dd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e1	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000e6	48 8b d0	 mov	 rdx, rax
  000e9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000ee	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000f3	83 f8 ff	 cmp	 eax, -1
  000f6	75 05		 jne	 SHORT $LN21@ast2obj_mo

; 2290 :             goto failed;

  000f8	e9 ae 01 00 00	 jmp	 $failed$23595
$LN21@ast2obj_mo:

; 2291 :         Py_DECREF(value);

  000fd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00102	e8 00 00 00 00	 call	 _Py_DecRef

; 2292 :         break;

  00107	e9 98 01 00 00	 jmp	 $LN25@ast2obj_mo
$LN20@ast2obj_mo:

; 2293 :     case Interactive_kind:
; 2294 :         result = PyType_GenericNew(Interactive_type, NULL, NULL);

  0010c	45 33 c0	 xor	 r8d, r8d
  0010f	33 d2		 xor	 edx, edx
  00111	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Interactive_type
  00118	e8 00 00 00 00	 call	 PyType_GenericNew
  0011d	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2295 :         if (!result) goto failed;

  00122	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00128	75 05		 jne	 SHORT $LN19@ast2obj_mo
  0012a	e9 7c 01 00 00	 jmp	 $failed$23595
$LN19@ast2obj_mo:

; 2296 :         value = ast2obj_list(o->v.Interactive.body, ast2obj_stmt);

  0012f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00136	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0013b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0013f	e8 00 00 00 00	 call	 ast2obj_list
  00144	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2297 :         if (!value) goto failed;

  00149	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0014f	75 05		 jne	 SHORT $LN18@ast2obj_mo
  00151	e9 55 01 00 00	 jmp	 $failed$23595
$LN18@ast2obj_mo:

; 2298 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00156	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  0015b	8b c0		 mov	 eax, eax
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00163	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0016c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00170	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00175	48 8b d0	 mov	 rdx, rax
  00178	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0017d	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00182	83 f8 ff	 cmp	 eax, -1
  00185	75 05		 jne	 SHORT $LN17@ast2obj_mo

; 2299 :             goto failed;

  00187	e9 1f 01 00 00	 jmp	 $failed$23595
$LN17@ast2obj_mo:

; 2300 :         Py_DECREF(value);

  0018c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00191	e8 00 00 00 00	 call	 _Py_DecRef

; 2301 :         break;

  00196	e9 09 01 00 00	 jmp	 $LN25@ast2obj_mo
$LN16@ast2obj_mo:

; 2302 :     case Expression_kind:
; 2303 :         result = PyType_GenericNew(Expression_type, NULL, NULL);

  0019b	45 33 c0	 xor	 r8d, r8d
  0019e	33 d2		 xor	 edx, edx
  001a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Expression_type
  001a7	e8 00 00 00 00	 call	 PyType_GenericNew
  001ac	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2304 :         if (!result) goto failed;

  001b1	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  001b7	75 05		 jne	 SHORT $LN15@ast2obj_mo
  001b9	e9 ed 00 00 00	 jmp	 $failed$23595
$LN15@ast2obj_mo:

; 2305 :         value = ast2obj_expr(o->v.Expression.body);

  001be	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  001c3	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  001c7	e8 00 00 00 00	 call	 ast2obj_expr
  001cc	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2306 :         if (!value) goto failed;

  001d1	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  001d7	75 05		 jne	 SHORT $LN14@ast2obj_mo
  001d9	e9 cd 00 00 00	 jmp	 $failed$23595
$LN14@ast2obj_mo:

; 2307 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  001de	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  001e3	8b c0		 mov	 eax, eax
  001e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001eb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001f4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001f8	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  001fd	48 8b d0	 mov	 rdx, rax
  00200	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00205	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0020a	83 f8 ff	 cmp	 eax, -1
  0020d	75 05		 jne	 SHORT $LN13@ast2obj_mo

; 2308 :             goto failed;

  0020f	e9 97 00 00 00	 jmp	 $failed$23595
$LN13@ast2obj_mo:

; 2309 :         Py_DECREF(value);

  00214	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00219	e8 00 00 00 00	 call	 _Py_DecRef

; 2310 :         break;

  0021e	e9 81 00 00 00	 jmp	 $LN25@ast2obj_mo
$LN12@ast2obj_mo:

; 2311 :     case Suite_kind:
; 2312 :         result = PyType_GenericNew(Suite_type, NULL, NULL);

  00223	45 33 c0	 xor	 r8d, r8d
  00226	33 d2		 xor	 edx, edx
  00228	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Suite_type
  0022f	e8 00 00 00 00	 call	 PyType_GenericNew
  00234	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2313 :         if (!result) goto failed;

  00239	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0023f	75 02		 jne	 SHORT $LN11@ast2obj_mo
  00241	eb 68		 jmp	 SHORT $failed$23595
$LN11@ast2obj_mo:

; 2314 :         value = ast2obj_list(o->v.Suite.body, ast2obj_stmt);

  00243	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  0024a	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0024f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00253	e8 00 00 00 00	 call	 ast2obj_list
  00258	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2315 :         if (!value) goto failed;

  0025d	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00263	75 02		 jne	 SHORT $LN10@ast2obj_mo
  00265	eb 44		 jmp	 SHORT $failed$23595
$LN10@ast2obj_mo:

; 2316 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00267	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  0026c	8b c0		 mov	 eax, eax
  0026e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00274	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0027d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00281	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00286	48 8b d0	 mov	 rdx, rax
  00289	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0028e	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00293	83 f8 ff	 cmp	 eax, -1
  00296	75 02		 jne	 SHORT $LN9@ast2obj_mo

; 2317 :             goto failed;

  00298	eb 11		 jmp	 SHORT $failed$23595
$LN9@ast2obj_mo:

; 2318 :         Py_DECREF(value);

  0029a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0029f	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@ast2obj_mo:

; 2319 :         break;
; 2320 :     }
; 2321 :     return result;

  002a4	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  002a9	eb 32		 jmp	 SHORT $LN28@ast2obj_mo
$failed$23595:
$LN8@ast2obj_mo:

; 2322 : failed:
; 2323 :     Py_XDECREF(value);

  002ab	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  002b1	74 0a		 je	 SHORT $LN5@ast2obj_mo
  002b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  002b8	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ast2obj_mo:
  002bd	33 c0		 xor	 eax, eax
  002bf	85 c0		 test	 eax, eax
  002c1	75 e8		 jne	 SHORT $LN8@ast2obj_mo
$LN4@ast2obj_mo:

; 2324 :     Py_XDECREF(result);

  002c3	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  002c9	74 0a		 je	 SHORT $LN1@ast2obj_mo
  002cb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  002d0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast2obj_mo:
  002d5	33 c0		 xor	 eax, eax
  002d7	85 c0		 test	 eax, eax
  002d9	75 e8		 jne	 SHORT $LN4@ast2obj_mo

; 2325 :     return NULL;

  002db	33 c0		 xor	 eax, eax
$LN28@ast2obj_mo:

; 2326 : }

  002dd	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002e1	c3		 ret	 0
ast2obj_mod ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	PyList_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\python-ast.c
pdata	SEGMENT
$pdata$ast2obj_list DD imagerel ast2obj_list
	DD	imagerel ast2obj_list+200
	DD	imagerel $unwind$ast2obj_list
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_list DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_list
_TEXT	SEGMENT
value$ = 32
n$ = 40
i$ = 48
result$ = 56
tv65 = 64
seq$ = 96
func$ = 104
ast2obj_list PROC					; COMDAT

; 652  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 653  :     Py_ssize_t i, n = asdl_seq_LEN(seq);

  0000e	48 83 7c 24 60
	00		 cmp	 QWORD PTR seq$[rsp], 0
  00014	75 0b		 jne	 SHORT $LN8@ast2obj_li
  00016	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv65[rsp], 0
  0001f	eb 0d		 jmp	 SHORT $LN9@ast2obj_li
$LN8@ast2obj_li:
  00021	48 8b 44 24 60	 mov	 rax, QWORD PTR seq$[rsp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 89 44 24 40	 mov	 QWORD PTR tv65[rsp], rax
$LN9@ast2obj_li:
  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR tv65[rsp]
  00033	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 654  :     PyObject *result = PyList_New(n);

  00038	48 8b 4c 24 28	 mov	 rcx, QWORD PTR n$[rsp]
  0003d	e8 00 00 00 00	 call	 PyList_New
  00042	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 655  :     PyObject *value;
; 656  :     if (!result)

  00047	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  0004d	75 04		 jne	 SHORT $LN5@ast2obj_li

; 657  :         return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	eb 70		 jmp	 SHORT $LN6@ast2obj_li
$LN5@ast2obj_li:

; 658  :     for (i = 0; i < n; i++) {

  00053	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0005c	eb 0d		 jmp	 SHORT $LN4@ast2obj_li
$LN3@ast2obj_li:
  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00063	48 ff c0	 inc	 rax
  00066	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN4@ast2obj_li:
  0006b	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  00070	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  00075	7d 47		 jge	 SHORT $LN2@ast2obj_li

; 659  :         value = func(asdl_seq_GET(seq, i));

  00077	48 8b 44 24 60	 mov	 rax, QWORD PTR seq$[rsp]
  0007c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00081	48 8b 4c c8 08	 mov	 rcx, QWORD PTR [rax+rcx*8+8]
  00086	ff 54 24 68	 call	 QWORD PTR func$[rsp]
  0008a	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 660  :         if (!value) {

  0008f	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00095	75 0e		 jne	 SHORT $LN1@ast2obj_li

; 661  :             Py_DECREF(result);

  00097	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  0009c	e8 00 00 00 00	 call	 _Py_DecRef

; 662  :             return NULL;

  000a1	33 c0		 xor	 eax, eax
  000a3	eb 1e		 jmp	 SHORT $LN6@ast2obj_li
$LN1@ast2obj_li:

; 663  :         }
; 664  :         PyList_SET_ITEM(result, i, value);

  000a5	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  000aa	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000ae	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  000b3	48 8b 54 24 20	 mov	 rdx, QWORD PTR value$[rsp]
  000b8	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 665  :     }

  000bc	eb a0		 jmp	 SHORT $LN3@ast2obj_li
$LN2@ast2obj_li:

; 666  :     return result;

  000be	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN6@ast2obj_li:

; 667  : }

  000c3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c7	c3		 ret	 0
ast2obj_list ENDP
_TEXT	ENDS
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_stmt DD imagerel ast2obj_stmt
	DD	imagerel ast2obj_stmt+5860
	DD	imagerel $unwind$ast2obj_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_stmt DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_stmt
_TEXT	SEGMENT
value$ = 32
result$ = 40
o$ = 48
tv66 = 56
_o$ = 80
ast2obj_stmt PROC					; COMDAT

; 2330 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2331 :     stmt_ty o = (stmt_ty)_o;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR _o$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 2332 :     PyObject *result = NULL, *value = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 2333 :     if (!o) {

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002b	75 18		 jne	 SHORT $LN149@ast2obj_st

; 2334 :         Py_INCREF(Py_None);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00034	e8 00 00 00 00	 call	 _Py_IncRef

; 2335 :         return Py_None;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00040	e9 44 16 00 00	 jmp	 $LN150@ast2obj_st
$LN149@ast2obj_st:

; 2336 :     }
; 2337 : 
; 2338 :     switch (o->kind) {

  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0004a	8b 00		 mov	 eax, DWORD PTR [rax]
  0004c	89 44 24 38	 mov	 DWORD PTR tv66[rsp], eax
  00050	8b 44 24 38	 mov	 eax, DWORD PTR tv66[rsp]
  00054	ff c8		 dec	 eax
  00056	89 44 24 38	 mov	 DWORD PTR tv66[rsp], eax
  0005a	83 7c 24 38 14	 cmp	 DWORD PTR tv66[rsp], 20
  0005f	0f 87 38 15 00
	00		 ja	 $LN147@ast2obj_st
  00065	48 63 44 24 38	 movsxd	 rax, DWORD PTR tv66[rsp]
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00071	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN152@ast2obj_st[rcx+rax*4]
  00078	48 03 c1	 add	 rax, rcx
  0007b	ff e0		 jmp	 rax
$LN146@ast2obj_st:

; 2339 :     case FunctionDef_kind:
; 2340 :         result = PyType_GenericNew(FunctionDef_type, NULL, NULL);

  0007d	45 33 c0	 xor	 r8d, r8d
  00080	33 d2		 xor	 edx, edx
  00082	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR FunctionDef_type
  00089	e8 00 00 00 00	 call	 PyType_GenericNew
  0008e	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2341 :         if (!result) goto failed;

  00093	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00099	75 05		 jne	 SHORT $LN145@ast2obj_st
  0009b	e9 b7 15 00 00	 jmp	 $failed$23650
$LN145@ast2obj_st:

; 2342 :         value = ast2obj_identifier(o->v.FunctionDef.name);

  000a0	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000a5	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000a9	e8 00 00 00 00	 call	 ast2obj_object
  000ae	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2343 :         if (!value) goto failed;

  000b3	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000b9	75 05		 jne	 SHORT $LN144@ast2obj_st
  000bb	e9 97 15 00 00	 jmp	 $failed$23650
$LN144@ast2obj_st:

; 2344 :         if (_PyObject_SetAttrId(result, &PyId_name, value) == -1)

  000c0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  000c5	8b c0		 mov	 eax, eax
  000c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000cd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000d6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000da	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000df	48 8b d0	 mov	 rdx, rax
  000e2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000e7	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000ec	83 f8 ff	 cmp	 eax, -1
  000ef	75 05		 jne	 SHORT $LN143@ast2obj_st

; 2345 :             goto failed;

  000f1	e9 61 15 00 00	 jmp	 $failed$23650
$LN143@ast2obj_st:

; 2346 :         Py_DECREF(value);

  000f6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000fb	e8 00 00 00 00	 call	 _Py_DecRef

; 2347 :         value = ast2obj_arguments(o->v.FunctionDef.args);

  00100	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00105	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00109	e8 00 00 00 00	 call	 ast2obj_arguments
  0010e	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2348 :         if (!value) goto failed;

  00113	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00119	75 05		 jne	 SHORT $LN142@ast2obj_st
  0011b	e9 37 15 00 00	 jmp	 $failed$23650
$LN142@ast2obj_st:

; 2349 :         if (_PyObject_SetAttrId(result, &PyId_args, value) == -1)

  00120	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  00125	8b c0		 mov	 eax, eax
  00127	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0012d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00136	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0013a	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0013f	48 8b d0	 mov	 rdx, rax
  00142	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00147	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0014c	83 f8 ff	 cmp	 eax, -1
  0014f	75 05		 jne	 SHORT $LN141@ast2obj_st

; 2350 :             goto failed;

  00151	e9 01 15 00 00	 jmp	 $failed$23650
$LN141@ast2obj_st:

; 2351 :         Py_DECREF(value);

  00156	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0015b	e8 00 00 00 00	 call	 _Py_DecRef

; 2352 :         value = ast2obj_list(o->v.FunctionDef.body, ast2obj_stmt);

  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00167	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0016c	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00170	e8 00 00 00 00	 call	 ast2obj_list
  00175	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2353 :         if (!value) goto failed;

  0017a	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00180	75 05		 jne	 SHORT $LN140@ast2obj_st
  00182	e9 d0 14 00 00	 jmp	 $failed$23650
$LN140@ast2obj_st:

; 2354 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00187	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  0018c	8b c0		 mov	 eax, eax
  0018e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00194	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0019d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001a1	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  001ae	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001b3	83 f8 ff	 cmp	 eax, -1
  001b6	75 05		 jne	 SHORT $LN139@ast2obj_st

; 2355 :             goto failed;

  001b8	e9 9a 14 00 00	 jmp	 $failed$23650
$LN139@ast2obj_st:

; 2356 :         Py_DECREF(value);

  001bd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  001c2	e8 00 00 00 00	 call	 _Py_DecRef

; 2357 :         value = ast2obj_list(o->v.FunctionDef.decorator_list, ast2obj_expr);

  001c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  001ce	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  001d3	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  001d7	e8 00 00 00 00	 call	 ast2obj_list
  001dc	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2358 :         if (!value) goto failed;

  001e1	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  001e7	75 05		 jne	 SHORT $LN138@ast2obj_st
  001e9	e9 69 14 00 00	 jmp	 $failed$23650
$LN138@ast2obj_st:

; 2359 :         if (_PyObject_SetAttrId(result, &PyId_decorator_list, value) == -1)

  001ee	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_decorator_list
  001f3	8b c0		 mov	 eax, eax
  001f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001fb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00204	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00208	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0020d	48 8b d0	 mov	 rdx, rax
  00210	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00215	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0021a	83 f8 ff	 cmp	 eax, -1
  0021d	75 05		 jne	 SHORT $LN137@ast2obj_st

; 2360 :             goto failed;

  0021f	e9 33 14 00 00	 jmp	 $failed$23650
$LN137@ast2obj_st:

; 2361 :         Py_DECREF(value);

  00224	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00229	e8 00 00 00 00	 call	 _Py_DecRef

; 2362 :         value = ast2obj_expr(o->v.FunctionDef.returns);

  0022e	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00233	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00237	e8 00 00 00 00	 call	 ast2obj_expr
  0023c	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2363 :         if (!value) goto failed;

  00241	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00247	75 05		 jne	 SHORT $LN136@ast2obj_st
  00249	e9 09 14 00 00	 jmp	 $failed$23650
$LN136@ast2obj_st:

; 2364 :         if (_PyObject_SetAttrId(result, &PyId_returns, value) == -1)

  0024e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_returns
  00253	8b c0		 mov	 eax, eax
  00255	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0025b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00264	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00268	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0026d	48 8b d0	 mov	 rdx, rax
  00270	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00275	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0027a	83 f8 ff	 cmp	 eax, -1
  0027d	75 05		 jne	 SHORT $LN135@ast2obj_st

; 2365 :             goto failed;

  0027f	e9 d3 13 00 00	 jmp	 $failed$23650
$LN135@ast2obj_st:

; 2366 :         Py_DECREF(value);

  00284	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00289	e8 00 00 00 00	 call	 _Py_DecRef

; 2367 :         break;

  0028e	e9 0a 13 00 00	 jmp	 $LN147@ast2obj_st
$LN134@ast2obj_st:

; 2368 :     case ClassDef_kind:
; 2369 :         result = PyType_GenericNew(ClassDef_type, NULL, NULL);

  00293	45 33 c0	 xor	 r8d, r8d
  00296	33 d2		 xor	 edx, edx
  00298	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ClassDef_type
  0029f	e8 00 00 00 00	 call	 PyType_GenericNew
  002a4	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2370 :         if (!result) goto failed;

  002a9	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  002af	75 05		 jne	 SHORT $LN133@ast2obj_st
  002b1	e9 a1 13 00 00	 jmp	 $failed$23650
$LN133@ast2obj_st:

; 2371 :         value = ast2obj_identifier(o->v.ClassDef.name);

  002b6	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  002bb	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  002bf	e8 00 00 00 00	 call	 ast2obj_object
  002c4	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2372 :         if (!value) goto failed;

  002c9	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  002cf	75 05		 jne	 SHORT $LN132@ast2obj_st
  002d1	e9 81 13 00 00	 jmp	 $failed$23650
$LN132@ast2obj_st:

; 2373 :         if (_PyObject_SetAttrId(result, &PyId_name, value) == -1)

  002d6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  002db	8b c0		 mov	 eax, eax
  002dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002e3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002ec	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002f0	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  002f5	48 8b d0	 mov	 rdx, rax
  002f8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  002fd	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00302	83 f8 ff	 cmp	 eax, -1
  00305	75 05		 jne	 SHORT $LN131@ast2obj_st

; 2374 :             goto failed;

  00307	e9 4b 13 00 00	 jmp	 $failed$23650
$LN131@ast2obj_st:

; 2375 :         Py_DECREF(value);

  0030c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00311	e8 00 00 00 00	 call	 _Py_DecRef

; 2376 :         value = ast2obj_list(o->v.ClassDef.bases, ast2obj_expr);

  00316	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  0031d	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00322	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00326	e8 00 00 00 00	 call	 ast2obj_list
  0032b	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2377 :         if (!value) goto failed;

  00330	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00336	75 05		 jne	 SHORT $LN130@ast2obj_st
  00338	e9 1a 13 00 00	 jmp	 $failed$23650
$LN130@ast2obj_st:

; 2378 :         if (_PyObject_SetAttrId(result, &PyId_bases, value) == -1)

  0033d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_bases
  00342	8b c0		 mov	 eax, eax
  00344	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0034a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00353	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00357	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0035c	48 8b d0	 mov	 rdx, rax
  0035f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00364	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00369	83 f8 ff	 cmp	 eax, -1
  0036c	75 05		 jne	 SHORT $LN129@ast2obj_st

; 2379 :             goto failed;

  0036e	e9 e4 12 00 00	 jmp	 $failed$23650
$LN129@ast2obj_st:

; 2380 :         Py_DECREF(value);

  00373	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00378	e8 00 00 00 00	 call	 _Py_DecRef

; 2381 :         value = ast2obj_list(o->v.ClassDef.keywords, ast2obj_keyword);

  0037d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_keyword
  00384	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00389	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0038d	e8 00 00 00 00	 call	 ast2obj_list
  00392	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2382 :         if (!value) goto failed;

  00397	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0039d	75 05		 jne	 SHORT $LN128@ast2obj_st
  0039f	e9 b3 12 00 00	 jmp	 $failed$23650
$LN128@ast2obj_st:

; 2383 :         if (_PyObject_SetAttrId(result, &PyId_keywords, value) == -1)

  003a4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_keywords
  003a9	8b c0		 mov	 eax, eax
  003ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003b1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003ba	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003be	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  003c3	48 8b d0	 mov	 rdx, rax
  003c6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  003cb	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  003d0	83 f8 ff	 cmp	 eax, -1
  003d3	75 05		 jne	 SHORT $LN127@ast2obj_st

; 2384 :             goto failed;

  003d5	e9 7d 12 00 00	 jmp	 $failed$23650
$LN127@ast2obj_st:

; 2385 :         Py_DECREF(value);

  003da	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  003df	e8 00 00 00 00	 call	 _Py_DecRef

; 2386 :         value = ast2obj_expr(o->v.ClassDef.starargs);

  003e4	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  003e9	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  003ed	e8 00 00 00 00	 call	 ast2obj_expr
  003f2	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2387 :         if (!value) goto failed;

  003f7	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  003fd	75 05		 jne	 SHORT $LN126@ast2obj_st
  003ff	e9 53 12 00 00	 jmp	 $failed$23650
$LN126@ast2obj_st:

; 2388 :         if (_PyObject_SetAttrId(result, &PyId_starargs, value) == -1)

  00404	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_starargs
  00409	8b c0		 mov	 eax, eax
  0040b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00411	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0041a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0041e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00423	48 8b d0	 mov	 rdx, rax
  00426	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0042b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00430	83 f8 ff	 cmp	 eax, -1
  00433	75 05		 jne	 SHORT $LN125@ast2obj_st

; 2389 :             goto failed;

  00435	e9 1d 12 00 00	 jmp	 $failed$23650
$LN125@ast2obj_st:

; 2390 :         Py_DECREF(value);

  0043a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0043f	e8 00 00 00 00	 call	 _Py_DecRef

; 2391 :         value = ast2obj_expr(o->v.ClassDef.kwargs);

  00444	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00449	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  0044d	e8 00 00 00 00	 call	 ast2obj_expr
  00452	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2392 :         if (!value) goto failed;

  00457	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0045d	75 05		 jne	 SHORT $LN124@ast2obj_st
  0045f	e9 f3 11 00 00	 jmp	 $failed$23650
$LN124@ast2obj_st:

; 2393 :         if (_PyObject_SetAttrId(result, &PyId_kwargs, value) == -1)

  00464	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwargs
  00469	8b c0		 mov	 eax, eax
  0046b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00471	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0047a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0047e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00483	48 8b d0	 mov	 rdx, rax
  00486	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0048b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00490	83 f8 ff	 cmp	 eax, -1
  00493	75 05		 jne	 SHORT $LN123@ast2obj_st

; 2394 :             goto failed;

  00495	e9 bd 11 00 00	 jmp	 $failed$23650
$LN123@ast2obj_st:

; 2395 :         Py_DECREF(value);

  0049a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0049f	e8 00 00 00 00	 call	 _Py_DecRef

; 2396 :         value = ast2obj_list(o->v.ClassDef.body, ast2obj_stmt);

  004a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  004ab	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  004b0	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  004b4	e8 00 00 00 00	 call	 ast2obj_list
  004b9	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2397 :         if (!value) goto failed;

  004be	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  004c4	75 05		 jne	 SHORT $LN122@ast2obj_st
  004c6	e9 8c 11 00 00	 jmp	 $failed$23650
$LN122@ast2obj_st:

; 2398 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  004cb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  004d0	8b c0		 mov	 eax, eax
  004d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  004d8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  004e1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  004e5	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  004ea	48 8b d0	 mov	 rdx, rax
  004ed	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  004f2	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  004f7	83 f8 ff	 cmp	 eax, -1
  004fa	75 05		 jne	 SHORT $LN121@ast2obj_st

; 2399 :             goto failed;

  004fc	e9 56 11 00 00	 jmp	 $failed$23650
$LN121@ast2obj_st:

; 2400 :         Py_DECREF(value);

  00501	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00506	e8 00 00 00 00	 call	 _Py_DecRef

; 2401 :         value = ast2obj_list(o->v.ClassDef.decorator_list, ast2obj_expr);

  0050b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00512	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00517	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0051b	e8 00 00 00 00	 call	 ast2obj_list
  00520	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2402 :         if (!value) goto failed;

  00525	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0052b	75 05		 jne	 SHORT $LN120@ast2obj_st
  0052d	e9 25 11 00 00	 jmp	 $failed$23650
$LN120@ast2obj_st:

; 2403 :         if (_PyObject_SetAttrId(result, &PyId_decorator_list, value) == -1)

  00532	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_decorator_list
  00537	8b c0		 mov	 eax, eax
  00539	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0053f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00548	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0054c	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00551	48 8b d0	 mov	 rdx, rax
  00554	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00559	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0055e	83 f8 ff	 cmp	 eax, -1
  00561	75 05		 jne	 SHORT $LN119@ast2obj_st

; 2404 :             goto failed;

  00563	e9 ef 10 00 00	 jmp	 $failed$23650
$LN119@ast2obj_st:

; 2405 :         Py_DECREF(value);

  00568	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0056d	e8 00 00 00 00	 call	 _Py_DecRef

; 2406 :         break;

  00572	e9 26 10 00 00	 jmp	 $LN147@ast2obj_st
$LN118@ast2obj_st:

; 2407 :     case Return_kind:
; 2408 :         result = PyType_GenericNew(Return_type, NULL, NULL);

  00577	45 33 c0	 xor	 r8d, r8d
  0057a	33 d2		 xor	 edx, edx
  0057c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Return_type
  00583	e8 00 00 00 00	 call	 PyType_GenericNew
  00588	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2409 :         if (!result) goto failed;

  0058d	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00593	75 05		 jne	 SHORT $LN117@ast2obj_st
  00595	e9 bd 10 00 00	 jmp	 $failed$23650
$LN117@ast2obj_st:

; 2410 :         value = ast2obj_expr(o->v.Return.value);

  0059a	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0059f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  005a3	e8 00 00 00 00	 call	 ast2obj_expr
  005a8	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2411 :         if (!value) goto failed;

  005ad	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  005b3	75 05		 jne	 SHORT $LN116@ast2obj_st
  005b5	e9 9d 10 00 00	 jmp	 $failed$23650
$LN116@ast2obj_st:

; 2412 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  005ba	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  005bf	8b c0		 mov	 eax, eax
  005c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  005c7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  005d0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  005d4	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  005d9	48 8b d0	 mov	 rdx, rax
  005dc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  005e1	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  005e6	83 f8 ff	 cmp	 eax, -1
  005e9	75 05		 jne	 SHORT $LN115@ast2obj_st

; 2413 :             goto failed;

  005eb	e9 67 10 00 00	 jmp	 $failed$23650
$LN115@ast2obj_st:

; 2414 :         Py_DECREF(value);

  005f0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  005f5	e8 00 00 00 00	 call	 _Py_DecRef

; 2415 :         break;

  005fa	e9 9e 0f 00 00	 jmp	 $LN147@ast2obj_st
$LN114@ast2obj_st:

; 2416 :     case Delete_kind:
; 2417 :         result = PyType_GenericNew(Delete_type, NULL, NULL);

  005ff	45 33 c0	 xor	 r8d, r8d
  00602	33 d2		 xor	 edx, edx
  00604	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Delete_type
  0060b	e8 00 00 00 00	 call	 PyType_GenericNew
  00610	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2418 :         if (!result) goto failed;

  00615	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0061b	75 05		 jne	 SHORT $LN113@ast2obj_st
  0061d	e9 35 10 00 00	 jmp	 $failed$23650
$LN113@ast2obj_st:

; 2419 :         value = ast2obj_list(o->v.Delete.targets, ast2obj_expr);

  00622	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00629	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0062e	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00632	e8 00 00 00 00	 call	 ast2obj_list
  00637	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2420 :         if (!value) goto failed;

  0063c	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00642	75 05		 jne	 SHORT $LN112@ast2obj_st
  00644	e9 0e 10 00 00	 jmp	 $failed$23650
$LN112@ast2obj_st:

; 2421 :         if (_PyObject_SetAttrId(result, &PyId_targets, value) == -1)

  00649	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_targets
  0064e	8b c0		 mov	 eax, eax
  00650	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00656	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0065f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00663	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00668	48 8b d0	 mov	 rdx, rax
  0066b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00670	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00675	83 f8 ff	 cmp	 eax, -1
  00678	75 05		 jne	 SHORT $LN111@ast2obj_st

; 2422 :             goto failed;

  0067a	e9 d8 0f 00 00	 jmp	 $failed$23650
$LN111@ast2obj_st:

; 2423 :         Py_DECREF(value);

  0067f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00684	e8 00 00 00 00	 call	 _Py_DecRef

; 2424 :         break;

  00689	e9 0f 0f 00 00	 jmp	 $LN147@ast2obj_st
$LN110@ast2obj_st:

; 2425 :     case Assign_kind:
; 2426 :         result = PyType_GenericNew(Assign_type, NULL, NULL);

  0068e	45 33 c0	 xor	 r8d, r8d
  00691	33 d2		 xor	 edx, edx
  00693	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Assign_type
  0069a	e8 00 00 00 00	 call	 PyType_GenericNew
  0069f	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2427 :         if (!result) goto failed;

  006a4	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  006aa	75 05		 jne	 SHORT $LN109@ast2obj_st
  006ac	e9 a6 0f 00 00	 jmp	 $failed$23650
$LN109@ast2obj_st:

; 2428 :         value = ast2obj_list(o->v.Assign.targets, ast2obj_expr);

  006b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  006b8	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  006bd	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  006c1	e8 00 00 00 00	 call	 ast2obj_list
  006c6	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2429 :         if (!value) goto failed;

  006cb	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  006d1	75 05		 jne	 SHORT $LN108@ast2obj_st
  006d3	e9 7f 0f 00 00	 jmp	 $failed$23650
$LN108@ast2obj_st:

; 2430 :         if (_PyObject_SetAttrId(result, &PyId_targets, value) == -1)

  006d8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_targets
  006dd	8b c0		 mov	 eax, eax
  006df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  006e5	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  006ee	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  006f2	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  006f7	48 8b d0	 mov	 rdx, rax
  006fa	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  006ff	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00704	83 f8 ff	 cmp	 eax, -1
  00707	75 05		 jne	 SHORT $LN107@ast2obj_st

; 2431 :             goto failed;

  00709	e9 49 0f 00 00	 jmp	 $failed$23650
$LN107@ast2obj_st:

; 2432 :         Py_DECREF(value);

  0070e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00713	e8 00 00 00 00	 call	 _Py_DecRef

; 2433 :         value = ast2obj_expr(o->v.Assign.value);

  00718	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0071d	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00721	e8 00 00 00 00	 call	 ast2obj_expr
  00726	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2434 :         if (!value) goto failed;

  0072b	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00731	75 05		 jne	 SHORT $LN106@ast2obj_st
  00733	e9 1f 0f 00 00	 jmp	 $failed$23650
$LN106@ast2obj_st:

; 2435 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  00738	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  0073d	8b c0		 mov	 eax, eax
  0073f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00745	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0074e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00752	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00757	48 8b d0	 mov	 rdx, rax
  0075a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0075f	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00764	83 f8 ff	 cmp	 eax, -1
  00767	75 05		 jne	 SHORT $LN105@ast2obj_st

; 2436 :             goto failed;

  00769	e9 e9 0e 00 00	 jmp	 $failed$23650
$LN105@ast2obj_st:

; 2437 :         Py_DECREF(value);

  0076e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00773	e8 00 00 00 00	 call	 _Py_DecRef

; 2438 :         break;

  00778	e9 20 0e 00 00	 jmp	 $LN147@ast2obj_st
$LN104@ast2obj_st:

; 2439 :     case AugAssign_kind:
; 2440 :         result = PyType_GenericNew(AugAssign_type, NULL, NULL);

  0077d	45 33 c0	 xor	 r8d, r8d
  00780	33 d2		 xor	 edx, edx
  00782	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR AugAssign_type
  00789	e8 00 00 00 00	 call	 PyType_GenericNew
  0078e	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2441 :         if (!result) goto failed;

  00793	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00799	75 05		 jne	 SHORT $LN103@ast2obj_st
  0079b	e9 b7 0e 00 00	 jmp	 $failed$23650
$LN103@ast2obj_st:

; 2442 :         value = ast2obj_expr(o->v.AugAssign.target);

  007a0	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  007a5	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  007a9	e8 00 00 00 00	 call	 ast2obj_expr
  007ae	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2443 :         if (!value) goto failed;

  007b3	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  007b9	75 05		 jne	 SHORT $LN102@ast2obj_st
  007bb	e9 97 0e 00 00	 jmp	 $failed$23650
$LN102@ast2obj_st:

; 2444 :         if (_PyObject_SetAttrId(result, &PyId_target, value) == -1)

  007c0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_target
  007c5	8b c0		 mov	 eax, eax
  007c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  007cd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  007d6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  007da	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  007df	48 8b d0	 mov	 rdx, rax
  007e2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  007e7	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  007ec	83 f8 ff	 cmp	 eax, -1
  007ef	75 05		 jne	 SHORT $LN101@ast2obj_st

; 2445 :             goto failed;

  007f1	e9 61 0e 00 00	 jmp	 $failed$23650
$LN101@ast2obj_st:

; 2446 :         Py_DECREF(value);

  007f6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  007fb	e8 00 00 00 00	 call	 _Py_DecRef

; 2447 :         value = ast2obj_operator(o->v.AugAssign.op);

  00800	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00805	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  00808	e8 00 00 00 00	 call	 ast2obj_operator
  0080d	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2448 :         if (!value) goto failed;

  00812	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00818	75 05		 jne	 SHORT $LN100@ast2obj_st
  0081a	e9 38 0e 00 00	 jmp	 $failed$23650
$LN100@ast2obj_st:

; 2449 :         if (_PyObject_SetAttrId(result, &PyId_op, value) == -1)

  0081f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  00824	8b c0		 mov	 eax, eax
  00826	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0082c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00835	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00839	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0083e	48 8b d0	 mov	 rdx, rax
  00841	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00846	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0084b	83 f8 ff	 cmp	 eax, -1
  0084e	75 05		 jne	 SHORT $LN99@ast2obj_st

; 2450 :             goto failed;

  00850	e9 02 0e 00 00	 jmp	 $failed$23650
$LN99@ast2obj_st:

; 2451 :         Py_DECREF(value);

  00855	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0085a	e8 00 00 00 00	 call	 _Py_DecRef

; 2452 :         value = ast2obj_expr(o->v.AugAssign.value);

  0085f	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00864	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00868	e8 00 00 00 00	 call	 ast2obj_expr
  0086d	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2453 :         if (!value) goto failed;

  00872	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00878	75 05		 jne	 SHORT $LN98@ast2obj_st
  0087a	e9 d8 0d 00 00	 jmp	 $failed$23650
$LN98@ast2obj_st:

; 2454 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  0087f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  00884	8b c0		 mov	 eax, eax
  00886	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0088c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00895	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00899	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0089e	48 8b d0	 mov	 rdx, rax
  008a1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  008a6	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  008ab	83 f8 ff	 cmp	 eax, -1
  008ae	75 05		 jne	 SHORT $LN97@ast2obj_st

; 2455 :             goto failed;

  008b0	e9 a2 0d 00 00	 jmp	 $failed$23650
$LN97@ast2obj_st:

; 2456 :         Py_DECREF(value);

  008b5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  008ba	e8 00 00 00 00	 call	 _Py_DecRef

; 2457 :         break;

  008bf	e9 d9 0c 00 00	 jmp	 $LN147@ast2obj_st
$LN96@ast2obj_st:

; 2458 :     case For_kind:
; 2459 :         result = PyType_GenericNew(For_type, NULL, NULL);

  008c4	45 33 c0	 xor	 r8d, r8d
  008c7	33 d2		 xor	 edx, edx
  008c9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR For_type
  008d0	e8 00 00 00 00	 call	 PyType_GenericNew
  008d5	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2460 :         if (!result) goto failed;

  008da	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  008e0	75 05		 jne	 SHORT $LN95@ast2obj_st
  008e2	e9 70 0d 00 00	 jmp	 $failed$23650
$LN95@ast2obj_st:

; 2461 :         value = ast2obj_expr(o->v.For.target);

  008e7	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  008ec	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  008f0	e8 00 00 00 00	 call	 ast2obj_expr
  008f5	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2462 :         if (!value) goto failed;

  008fa	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00900	75 05		 jne	 SHORT $LN94@ast2obj_st
  00902	e9 50 0d 00 00	 jmp	 $failed$23650
$LN94@ast2obj_st:

; 2463 :         if (_PyObject_SetAttrId(result, &PyId_target, value) == -1)

  00907	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_target
  0090c	8b c0		 mov	 eax, eax
  0090e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00914	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0091d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00921	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00926	48 8b d0	 mov	 rdx, rax
  00929	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0092e	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00933	83 f8 ff	 cmp	 eax, -1
  00936	75 05		 jne	 SHORT $LN93@ast2obj_st

; 2464 :             goto failed;

  00938	e9 1a 0d 00 00	 jmp	 $failed$23650
$LN93@ast2obj_st:

; 2465 :         Py_DECREF(value);

  0093d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00942	e8 00 00 00 00	 call	 _Py_DecRef

; 2466 :         value = ast2obj_expr(o->v.For.iter);

  00947	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0094c	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00950	e8 00 00 00 00	 call	 ast2obj_expr
  00955	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2467 :         if (!value) goto failed;

  0095a	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00960	75 05		 jne	 SHORT $LN92@ast2obj_st
  00962	e9 f0 0c 00 00	 jmp	 $failed$23650
$LN92@ast2obj_st:

; 2468 :         if (_PyObject_SetAttrId(result, &PyId_iter, value) == -1)

  00967	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_iter
  0096c	8b c0		 mov	 eax, eax
  0096e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00974	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0097d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00981	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00986	48 8b d0	 mov	 rdx, rax
  00989	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0098e	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00993	83 f8 ff	 cmp	 eax, -1
  00996	75 05		 jne	 SHORT $LN91@ast2obj_st

; 2469 :             goto failed;

  00998	e9 ba 0c 00 00	 jmp	 $failed$23650
$LN91@ast2obj_st:

; 2470 :         Py_DECREF(value);

  0099d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  009a2	e8 00 00 00 00	 call	 _Py_DecRef

; 2471 :         value = ast2obj_list(o->v.For.body, ast2obj_stmt);

  009a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  009ae	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  009b3	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  009b7	e8 00 00 00 00	 call	 ast2obj_list
  009bc	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2472 :         if (!value) goto failed;

  009c1	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  009c7	75 05		 jne	 SHORT $LN90@ast2obj_st
  009c9	e9 89 0c 00 00	 jmp	 $failed$23650
$LN90@ast2obj_st:

; 2473 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  009ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  009d3	8b c0		 mov	 eax, eax
  009d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  009db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  009e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  009e8	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  009ed	48 8b d0	 mov	 rdx, rax
  009f0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  009f5	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  009fa	83 f8 ff	 cmp	 eax, -1
  009fd	75 05		 jne	 SHORT $LN89@ast2obj_st

; 2474 :             goto failed;

  009ff	e9 53 0c 00 00	 jmp	 $failed$23650
$LN89@ast2obj_st:

; 2475 :         Py_DECREF(value);

  00a04	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00a09	e8 00 00 00 00	 call	 _Py_DecRef

; 2476 :         value = ast2obj_list(o->v.For.orelse, ast2obj_stmt);

  00a0e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00a15	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00a1a	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00a1e	e8 00 00 00 00	 call	 ast2obj_list
  00a23	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2477 :         if (!value) goto failed;

  00a28	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00a2e	75 05		 jne	 SHORT $LN88@ast2obj_st
  00a30	e9 22 0c 00 00	 jmp	 $failed$23650
$LN88@ast2obj_st:

; 2478 :         if (_PyObject_SetAttrId(result, &PyId_orelse, value) == -1)

  00a35	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  00a3a	8b c0		 mov	 eax, eax
  00a3c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00a42	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00a4b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00a4f	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00a54	48 8b d0	 mov	 rdx, rax
  00a57	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00a5c	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00a61	83 f8 ff	 cmp	 eax, -1
  00a64	75 05		 jne	 SHORT $LN87@ast2obj_st

; 2479 :             goto failed;

  00a66	e9 ec 0b 00 00	 jmp	 $failed$23650
$LN87@ast2obj_st:

; 2480 :         Py_DECREF(value);

  00a6b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00a70	e8 00 00 00 00	 call	 _Py_DecRef

; 2481 :         break;

  00a75	e9 23 0b 00 00	 jmp	 $LN147@ast2obj_st
$LN86@ast2obj_st:

; 2482 :     case While_kind:
; 2483 :         result = PyType_GenericNew(While_type, NULL, NULL);

  00a7a	45 33 c0	 xor	 r8d, r8d
  00a7d	33 d2		 xor	 edx, edx
  00a7f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR While_type
  00a86	e8 00 00 00 00	 call	 PyType_GenericNew
  00a8b	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2484 :         if (!result) goto failed;

  00a90	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00a96	75 05		 jne	 SHORT $LN85@ast2obj_st
  00a98	e9 ba 0b 00 00	 jmp	 $failed$23650
$LN85@ast2obj_st:

; 2485 :         value = ast2obj_expr(o->v.While.test);

  00a9d	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00aa2	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00aa6	e8 00 00 00 00	 call	 ast2obj_expr
  00aab	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2486 :         if (!value) goto failed;

  00ab0	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00ab6	75 05		 jne	 SHORT $LN84@ast2obj_st
  00ab8	e9 9a 0b 00 00	 jmp	 $failed$23650
$LN84@ast2obj_st:

; 2487 :         if (_PyObject_SetAttrId(result, &PyId_test, value) == -1)

  00abd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  00ac2	8b c0		 mov	 eax, eax
  00ac4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00aca	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00ad3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00ad7	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00adc	48 8b d0	 mov	 rdx, rax
  00adf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00ae4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00ae9	83 f8 ff	 cmp	 eax, -1
  00aec	75 05		 jne	 SHORT $LN83@ast2obj_st

; 2488 :             goto failed;

  00aee	e9 64 0b 00 00	 jmp	 $failed$23650
$LN83@ast2obj_st:

; 2489 :         Py_DECREF(value);

  00af3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00af8	e8 00 00 00 00	 call	 _Py_DecRef

; 2490 :         value = ast2obj_list(o->v.While.body, ast2obj_stmt);

  00afd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00b04	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00b09	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00b0d	e8 00 00 00 00	 call	 ast2obj_list
  00b12	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2491 :         if (!value) goto failed;

  00b17	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00b1d	75 05		 jne	 SHORT $LN82@ast2obj_st
  00b1f	e9 33 0b 00 00	 jmp	 $failed$23650
$LN82@ast2obj_st:

; 2492 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00b24	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  00b29	8b c0		 mov	 eax, eax
  00b2b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00b31	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00b3a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00b3e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00b43	48 8b d0	 mov	 rdx, rax
  00b46	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00b4b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00b50	83 f8 ff	 cmp	 eax, -1
  00b53	75 05		 jne	 SHORT $LN81@ast2obj_st

; 2493 :             goto failed;

  00b55	e9 fd 0a 00 00	 jmp	 $failed$23650
$LN81@ast2obj_st:

; 2494 :         Py_DECREF(value);

  00b5a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00b5f	e8 00 00 00 00	 call	 _Py_DecRef

; 2495 :         value = ast2obj_list(o->v.While.orelse, ast2obj_stmt);

  00b64	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00b6b	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00b70	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00b74	e8 00 00 00 00	 call	 ast2obj_list
  00b79	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2496 :         if (!value) goto failed;

  00b7e	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00b84	75 05		 jne	 SHORT $LN80@ast2obj_st
  00b86	e9 cc 0a 00 00	 jmp	 $failed$23650
$LN80@ast2obj_st:

; 2497 :         if (_PyObject_SetAttrId(result, &PyId_orelse, value) == -1)

  00b8b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  00b90	8b c0		 mov	 eax, eax
  00b92	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00b98	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00ba1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00ba5	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00baa	48 8b d0	 mov	 rdx, rax
  00bad	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00bb2	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00bb7	83 f8 ff	 cmp	 eax, -1
  00bba	75 05		 jne	 SHORT $LN79@ast2obj_st

; 2498 :             goto failed;

  00bbc	e9 96 0a 00 00	 jmp	 $failed$23650
$LN79@ast2obj_st:

; 2499 :         Py_DECREF(value);

  00bc1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00bc6	e8 00 00 00 00	 call	 _Py_DecRef

; 2500 :         break;

  00bcb	e9 cd 09 00 00	 jmp	 $LN147@ast2obj_st
$LN78@ast2obj_st:

; 2501 :     case If_kind:
; 2502 :         result = PyType_GenericNew(If_type, NULL, NULL);

  00bd0	45 33 c0	 xor	 r8d, r8d
  00bd3	33 d2		 xor	 edx, edx
  00bd5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR If_type
  00bdc	e8 00 00 00 00	 call	 PyType_GenericNew
  00be1	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2503 :         if (!result) goto failed;

  00be6	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00bec	75 05		 jne	 SHORT $LN77@ast2obj_st
  00bee	e9 64 0a 00 00	 jmp	 $failed$23650
$LN77@ast2obj_st:

; 2504 :         value = ast2obj_expr(o->v.If.test);

  00bf3	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00bf8	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00bfc	e8 00 00 00 00	 call	 ast2obj_expr
  00c01	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2505 :         if (!value) goto failed;

  00c06	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00c0c	75 05		 jne	 SHORT $LN76@ast2obj_st
  00c0e	e9 44 0a 00 00	 jmp	 $failed$23650
$LN76@ast2obj_st:

; 2506 :         if (_PyObject_SetAttrId(result, &PyId_test, value) == -1)

  00c13	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  00c18	8b c0		 mov	 eax, eax
  00c1a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00c20	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00c29	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00c2d	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00c32	48 8b d0	 mov	 rdx, rax
  00c35	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00c3a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00c3f	83 f8 ff	 cmp	 eax, -1
  00c42	75 05		 jne	 SHORT $LN75@ast2obj_st

; 2507 :             goto failed;

  00c44	e9 0e 0a 00 00	 jmp	 $failed$23650
$LN75@ast2obj_st:

; 2508 :         Py_DECREF(value);

  00c49	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00c4e	e8 00 00 00 00	 call	 _Py_DecRef

; 2509 :         value = ast2obj_list(o->v.If.body, ast2obj_stmt);

  00c53	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00c5a	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00c5f	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00c63	e8 00 00 00 00	 call	 ast2obj_list
  00c68	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2510 :         if (!value) goto failed;

  00c6d	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00c73	75 05		 jne	 SHORT $LN74@ast2obj_st
  00c75	e9 dd 09 00 00	 jmp	 $failed$23650
$LN74@ast2obj_st:

; 2511 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00c7a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  00c7f	8b c0		 mov	 eax, eax
  00c81	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00c87	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00c90	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00c94	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00c99	48 8b d0	 mov	 rdx, rax
  00c9c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00ca1	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00ca6	83 f8 ff	 cmp	 eax, -1
  00ca9	75 05		 jne	 SHORT $LN73@ast2obj_st

; 2512 :             goto failed;

  00cab	e9 a7 09 00 00	 jmp	 $failed$23650
$LN73@ast2obj_st:

; 2513 :         Py_DECREF(value);

  00cb0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00cb5	e8 00 00 00 00	 call	 _Py_DecRef

; 2514 :         value = ast2obj_list(o->v.If.orelse, ast2obj_stmt);

  00cba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00cc1	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00cc6	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00cca	e8 00 00 00 00	 call	 ast2obj_list
  00ccf	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2515 :         if (!value) goto failed;

  00cd4	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00cda	75 05		 jne	 SHORT $LN72@ast2obj_st
  00cdc	e9 76 09 00 00	 jmp	 $failed$23650
$LN72@ast2obj_st:

; 2516 :         if (_PyObject_SetAttrId(result, &PyId_orelse, value) == -1)

  00ce1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  00ce6	8b c0		 mov	 eax, eax
  00ce8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00cee	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00cf7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00cfb	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00d00	48 8b d0	 mov	 rdx, rax
  00d03	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00d08	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00d0d	83 f8 ff	 cmp	 eax, -1
  00d10	75 05		 jne	 SHORT $LN71@ast2obj_st

; 2517 :             goto failed;

  00d12	e9 40 09 00 00	 jmp	 $failed$23650
$LN71@ast2obj_st:

; 2518 :         Py_DECREF(value);

  00d17	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00d1c	e8 00 00 00 00	 call	 _Py_DecRef

; 2519 :         break;

  00d21	e9 77 08 00 00	 jmp	 $LN147@ast2obj_st
$LN70@ast2obj_st:

; 2520 :     case With_kind:
; 2521 :         result = PyType_GenericNew(With_type, NULL, NULL);

  00d26	45 33 c0	 xor	 r8d, r8d
  00d29	33 d2		 xor	 edx, edx
  00d2b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR With_type
  00d32	e8 00 00 00 00	 call	 PyType_GenericNew
  00d37	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2522 :         if (!result) goto failed;

  00d3c	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00d42	75 05		 jne	 SHORT $LN69@ast2obj_st
  00d44	e9 0e 09 00 00	 jmp	 $failed$23650
$LN69@ast2obj_st:

; 2523 :         value = ast2obj_list(o->v.With.items, ast2obj_withitem);

  00d49	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_withitem
  00d50	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00d55	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00d59	e8 00 00 00 00	 call	 ast2obj_list
  00d5e	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2524 :         if (!value) goto failed;

  00d63	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00d69	75 05		 jne	 SHORT $LN68@ast2obj_st
  00d6b	e9 e7 08 00 00	 jmp	 $failed$23650
$LN68@ast2obj_st:

; 2525 :         if (_PyObject_SetAttrId(result, &PyId_items, value) == -1)

  00d70	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_items
  00d75	8b c0		 mov	 eax, eax
  00d77	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00d7d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00d86	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00d8a	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00d8f	48 8b d0	 mov	 rdx, rax
  00d92	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00d97	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00d9c	83 f8 ff	 cmp	 eax, -1
  00d9f	75 05		 jne	 SHORT $LN67@ast2obj_st

; 2526 :             goto failed;

  00da1	e9 b1 08 00 00	 jmp	 $failed$23650
$LN67@ast2obj_st:

; 2527 :         Py_DECREF(value);

  00da6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00dab	e8 00 00 00 00	 call	 _Py_DecRef

; 2528 :         value = ast2obj_list(o->v.With.body, ast2obj_stmt);

  00db0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00db7	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00dbc	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00dc0	e8 00 00 00 00	 call	 ast2obj_list
  00dc5	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2529 :         if (!value) goto failed;

  00dca	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00dd0	75 05		 jne	 SHORT $LN66@ast2obj_st
  00dd2	e9 80 08 00 00	 jmp	 $failed$23650
$LN66@ast2obj_st:

; 2530 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00dd7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  00ddc	8b c0		 mov	 eax, eax
  00dde	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00de4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00ded	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00df1	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00df6	48 8b d0	 mov	 rdx, rax
  00df9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00dfe	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00e03	83 f8 ff	 cmp	 eax, -1
  00e06	75 05		 jne	 SHORT $LN65@ast2obj_st

; 2531 :             goto failed;

  00e08	e9 4a 08 00 00	 jmp	 $failed$23650
$LN65@ast2obj_st:

; 2532 :         Py_DECREF(value);

  00e0d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00e12	e8 00 00 00 00	 call	 _Py_DecRef

; 2533 :         break;

  00e17	e9 81 07 00 00	 jmp	 $LN147@ast2obj_st
$LN64@ast2obj_st:

; 2534 :     case Raise_kind:
; 2535 :         result = PyType_GenericNew(Raise_type, NULL, NULL);

  00e1c	45 33 c0	 xor	 r8d, r8d
  00e1f	33 d2		 xor	 edx, edx
  00e21	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Raise_type
  00e28	e8 00 00 00 00	 call	 PyType_GenericNew
  00e2d	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2536 :         if (!result) goto failed;

  00e32	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00e38	75 05		 jne	 SHORT $LN63@ast2obj_st
  00e3a	e9 18 08 00 00	 jmp	 $failed$23650
$LN63@ast2obj_st:

; 2537 :         value = ast2obj_expr(o->v.Raise.exc);

  00e3f	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00e44	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00e48	e8 00 00 00 00	 call	 ast2obj_expr
  00e4d	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2538 :         if (!value) goto failed;

  00e52	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00e58	75 05		 jne	 SHORT $LN62@ast2obj_st
  00e5a	e9 f8 07 00 00	 jmp	 $failed$23650
$LN62@ast2obj_st:

; 2539 :         if (_PyObject_SetAttrId(result, &PyId_exc, value) == -1)

  00e5f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_exc
  00e64	8b c0		 mov	 eax, eax
  00e66	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00e6c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00e75	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00e79	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00e7e	48 8b d0	 mov	 rdx, rax
  00e81	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00e86	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00e8b	83 f8 ff	 cmp	 eax, -1
  00e8e	75 05		 jne	 SHORT $LN61@ast2obj_st

; 2540 :             goto failed;

  00e90	e9 c2 07 00 00	 jmp	 $failed$23650
$LN61@ast2obj_st:

; 2541 :         Py_DECREF(value);

  00e95	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00e9a	e8 00 00 00 00	 call	 _Py_DecRef

; 2542 :         value = ast2obj_expr(o->v.Raise.cause);

  00e9f	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00ea4	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00ea8	e8 00 00 00 00	 call	 ast2obj_expr
  00ead	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2543 :         if (!value) goto failed;

  00eb2	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00eb8	75 05		 jne	 SHORT $LN60@ast2obj_st
  00eba	e9 98 07 00 00	 jmp	 $failed$23650
$LN60@ast2obj_st:

; 2544 :         if (_PyObject_SetAttrId(result, &PyId_cause, value) == -1)

  00ebf	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_cause
  00ec4	8b c0		 mov	 eax, eax
  00ec6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00ecc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00ed5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00ed9	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00ede	48 8b d0	 mov	 rdx, rax
  00ee1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00ee6	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00eeb	83 f8 ff	 cmp	 eax, -1
  00eee	75 05		 jne	 SHORT $LN59@ast2obj_st

; 2545 :             goto failed;

  00ef0	e9 62 07 00 00	 jmp	 $failed$23650
$LN59@ast2obj_st:

; 2546 :         Py_DECREF(value);

  00ef5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00efa	e8 00 00 00 00	 call	 _Py_DecRef

; 2547 :         break;

  00eff	e9 99 06 00 00	 jmp	 $LN147@ast2obj_st
$LN58@ast2obj_st:

; 2548 :     case Try_kind:
; 2549 :         result = PyType_GenericNew(Try_type, NULL, NULL);

  00f04	45 33 c0	 xor	 r8d, r8d
  00f07	33 d2		 xor	 edx, edx
  00f09	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Try_type
  00f10	e8 00 00 00 00	 call	 PyType_GenericNew
  00f15	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2550 :         if (!result) goto failed;

  00f1a	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00f20	75 05		 jne	 SHORT $LN57@ast2obj_st
  00f22	e9 30 07 00 00	 jmp	 $failed$23650
$LN57@ast2obj_st:

; 2551 :         value = ast2obj_list(o->v.Try.body, ast2obj_stmt);

  00f27	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00f2e	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00f33	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00f37	e8 00 00 00 00	 call	 ast2obj_list
  00f3c	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2552 :         if (!value) goto failed;

  00f41	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00f47	75 05		 jne	 SHORT $LN56@ast2obj_st
  00f49	e9 09 07 00 00	 jmp	 $failed$23650
$LN56@ast2obj_st:

; 2553 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00f4e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  00f53	8b c0		 mov	 eax, eax
  00f55	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00f5b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00f64	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00f68	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00f6d	48 8b d0	 mov	 rdx, rax
  00f70	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00f75	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00f7a	83 f8 ff	 cmp	 eax, -1
  00f7d	75 05		 jne	 SHORT $LN55@ast2obj_st

; 2554 :             goto failed;

  00f7f	e9 d3 06 00 00	 jmp	 $failed$23650
$LN55@ast2obj_st:

; 2555 :         Py_DECREF(value);

  00f84	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00f89	e8 00 00 00 00	 call	 _Py_DecRef

; 2556 :         value = ast2obj_list(o->v.Try.handlers, ast2obj_excepthandler);

  00f8e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_excepthandler
  00f95	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00f9a	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00f9e	e8 00 00 00 00	 call	 ast2obj_list
  00fa3	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2557 :         if (!value) goto failed;

  00fa8	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00fae	75 05		 jne	 SHORT $LN54@ast2obj_st
  00fb0	e9 a2 06 00 00	 jmp	 $failed$23650
$LN54@ast2obj_st:

; 2558 :         if (_PyObject_SetAttrId(result, &PyId_handlers, value) == -1)

  00fb5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_handlers
  00fba	8b c0		 mov	 eax, eax
  00fbc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00fc2	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00fcb	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00fcf	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00fd4	48 8b d0	 mov	 rdx, rax
  00fd7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00fdc	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00fe1	83 f8 ff	 cmp	 eax, -1
  00fe4	75 05		 jne	 SHORT $LN53@ast2obj_st

; 2559 :             goto failed;

  00fe6	e9 6c 06 00 00	 jmp	 $failed$23650
$LN53@ast2obj_st:

; 2560 :         Py_DECREF(value);

  00feb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00ff0	e8 00 00 00 00	 call	 _Py_DecRef

; 2561 :         value = ast2obj_list(o->v.Try.orelse, ast2obj_stmt);

  00ff5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00ffc	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01001	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  01005	e8 00 00 00 00	 call	 ast2obj_list
  0100a	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2562 :         if (!value) goto failed;

  0100f	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01015	75 05		 jne	 SHORT $LN52@ast2obj_st
  01017	e9 3b 06 00 00	 jmp	 $failed$23650
$LN52@ast2obj_st:

; 2563 :         if (_PyObject_SetAttrId(result, &PyId_orelse, value) == -1)

  0101c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  01021	8b c0		 mov	 eax, eax
  01023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01029	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01032	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01036	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0103b	48 8b d0	 mov	 rdx, rax
  0103e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01043	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01048	83 f8 ff	 cmp	 eax, -1
  0104b	75 05		 jne	 SHORT $LN51@ast2obj_st

; 2564 :             goto failed;

  0104d	e9 05 06 00 00	 jmp	 $failed$23650
$LN51@ast2obj_st:

; 2565 :         Py_DECREF(value);

  01052	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01057	e8 00 00 00 00	 call	 _Py_DecRef

; 2566 :         value = ast2obj_list(o->v.Try.finalbody, ast2obj_stmt);

  0105c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  01063	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01068	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0106c	e8 00 00 00 00	 call	 ast2obj_list
  01071	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2567 :         if (!value) goto failed;

  01076	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0107c	75 05		 jne	 SHORT $LN50@ast2obj_st
  0107e	e9 d4 05 00 00	 jmp	 $failed$23650
$LN50@ast2obj_st:

; 2568 :         if (_PyObject_SetAttrId(result, &PyId_finalbody, value) == -1)

  01083	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_finalbody
  01088	8b c0		 mov	 eax, eax
  0108a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01090	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01099	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0109d	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  010a2	48 8b d0	 mov	 rdx, rax
  010a5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  010aa	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  010af	83 f8 ff	 cmp	 eax, -1
  010b2	75 05		 jne	 SHORT $LN49@ast2obj_st

; 2569 :             goto failed;

  010b4	e9 9e 05 00 00	 jmp	 $failed$23650
$LN49@ast2obj_st:

; 2570 :         Py_DECREF(value);

  010b9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  010be	e8 00 00 00 00	 call	 _Py_DecRef

; 2571 :         break;

  010c3	e9 d5 04 00 00	 jmp	 $LN147@ast2obj_st
$LN48@ast2obj_st:

; 2572 :     case Assert_kind:
; 2573 :         result = PyType_GenericNew(Assert_type, NULL, NULL);

  010c8	45 33 c0	 xor	 r8d, r8d
  010cb	33 d2		 xor	 edx, edx
  010cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Assert_type
  010d4	e8 00 00 00 00	 call	 PyType_GenericNew
  010d9	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2574 :         if (!result) goto failed;

  010de	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  010e4	75 05		 jne	 SHORT $LN47@ast2obj_st
  010e6	e9 6c 05 00 00	 jmp	 $failed$23650
$LN47@ast2obj_st:

; 2575 :         value = ast2obj_expr(o->v.Assert.test);

  010eb	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  010f0	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  010f4	e8 00 00 00 00	 call	 ast2obj_expr
  010f9	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2576 :         if (!value) goto failed;

  010fe	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01104	75 05		 jne	 SHORT $LN46@ast2obj_st
  01106	e9 4c 05 00 00	 jmp	 $failed$23650
$LN46@ast2obj_st:

; 2577 :         if (_PyObject_SetAttrId(result, &PyId_test, value) == -1)

  0110b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  01110	8b c0		 mov	 eax, eax
  01112	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01118	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01121	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01125	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0112a	48 8b d0	 mov	 rdx, rax
  0112d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01132	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01137	83 f8 ff	 cmp	 eax, -1
  0113a	75 05		 jne	 SHORT $LN45@ast2obj_st

; 2578 :             goto failed;

  0113c	e9 16 05 00 00	 jmp	 $failed$23650
$LN45@ast2obj_st:

; 2579 :         Py_DECREF(value);

  01141	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01146	e8 00 00 00 00	 call	 _Py_DecRef

; 2580 :         value = ast2obj_expr(o->v.Assert.msg);

  0114b	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01150	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  01154	e8 00 00 00 00	 call	 ast2obj_expr
  01159	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2581 :         if (!value) goto failed;

  0115e	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01164	75 05		 jne	 SHORT $LN44@ast2obj_st
  01166	e9 ec 04 00 00	 jmp	 $failed$23650
$LN44@ast2obj_st:

; 2582 :         if (_PyObject_SetAttrId(result, &PyId_msg, value) == -1)

  0116b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_msg
  01170	8b c0		 mov	 eax, eax
  01172	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01178	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01181	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01185	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0118a	48 8b d0	 mov	 rdx, rax
  0118d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01192	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01197	83 f8 ff	 cmp	 eax, -1
  0119a	75 05		 jne	 SHORT $LN43@ast2obj_st

; 2583 :             goto failed;

  0119c	e9 b6 04 00 00	 jmp	 $failed$23650
$LN43@ast2obj_st:

; 2584 :         Py_DECREF(value);

  011a1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  011a6	e8 00 00 00 00	 call	 _Py_DecRef

; 2585 :         break;

  011ab	e9 ed 03 00 00	 jmp	 $LN147@ast2obj_st
$LN42@ast2obj_st:

; 2586 :     case Import_kind:
; 2587 :         result = PyType_GenericNew(Import_type, NULL, NULL);

  011b0	45 33 c0	 xor	 r8d, r8d
  011b3	33 d2		 xor	 edx, edx
  011b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Import_type
  011bc	e8 00 00 00 00	 call	 PyType_GenericNew
  011c1	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2588 :         if (!result) goto failed;

  011c6	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  011cc	75 05		 jne	 SHORT $LN41@ast2obj_st
  011ce	e9 84 04 00 00	 jmp	 $failed$23650
$LN41@ast2obj_st:

; 2589 :         value = ast2obj_list(o->v.Import.names, ast2obj_alias);

  011d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_alias
  011da	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  011df	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  011e3	e8 00 00 00 00	 call	 ast2obj_list
  011e8	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2590 :         if (!value) goto failed;

  011ed	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  011f3	75 05		 jne	 SHORT $LN40@ast2obj_st
  011f5	e9 5d 04 00 00	 jmp	 $failed$23650
$LN40@ast2obj_st:

; 2591 :         if (_PyObject_SetAttrId(result, &PyId_names, value) == -1)

  011fa	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  011ff	8b c0		 mov	 eax, eax
  01201	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01207	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01210	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01214	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01219	48 8b d0	 mov	 rdx, rax
  0121c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01221	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01226	83 f8 ff	 cmp	 eax, -1
  01229	75 05		 jne	 SHORT $LN39@ast2obj_st

; 2592 :             goto failed;

  0122b	e9 27 04 00 00	 jmp	 $failed$23650
$LN39@ast2obj_st:

; 2593 :         Py_DECREF(value);

  01230	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01235	e8 00 00 00 00	 call	 _Py_DecRef

; 2594 :         break;

  0123a	e9 5e 03 00 00	 jmp	 $LN147@ast2obj_st
$LN38@ast2obj_st:

; 2595 :     case ImportFrom_kind:
; 2596 :         result = PyType_GenericNew(ImportFrom_type, NULL, NULL);

  0123f	45 33 c0	 xor	 r8d, r8d
  01242	33 d2		 xor	 edx, edx
  01244	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ImportFrom_type
  0124b	e8 00 00 00 00	 call	 PyType_GenericNew
  01250	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2597 :         if (!result) goto failed;

  01255	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0125b	75 05		 jne	 SHORT $LN37@ast2obj_st
  0125d	e9 f5 03 00 00	 jmp	 $failed$23650
$LN37@ast2obj_st:

; 2598 :         value = ast2obj_identifier(o->v.ImportFrom.module);

  01262	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01267	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0126b	e8 00 00 00 00	 call	 ast2obj_object
  01270	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2599 :         if (!value) goto failed;

  01275	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0127b	75 05		 jne	 SHORT $LN36@ast2obj_st
  0127d	e9 d5 03 00 00	 jmp	 $failed$23650
$LN36@ast2obj_st:

; 2600 :         if (_PyObject_SetAttrId(result, &PyId_module, value) == -1)

  01282	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_module
  01287	8b c0		 mov	 eax, eax
  01289	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0128f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01298	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0129c	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  012a1	48 8b d0	 mov	 rdx, rax
  012a4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  012a9	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  012ae	83 f8 ff	 cmp	 eax, -1
  012b1	75 05		 jne	 SHORT $LN35@ast2obj_st

; 2601 :             goto failed;

  012b3	e9 9f 03 00 00	 jmp	 $failed$23650
$LN35@ast2obj_st:

; 2602 :         Py_DECREF(value);

  012b8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  012bd	e8 00 00 00 00	 call	 _Py_DecRef

; 2603 :         value = ast2obj_list(o->v.ImportFrom.names, ast2obj_alias);

  012c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_alias
  012c9	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  012ce	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  012d2	e8 00 00 00 00	 call	 ast2obj_list
  012d7	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2604 :         if (!value) goto failed;

  012dc	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  012e2	75 05		 jne	 SHORT $LN34@ast2obj_st
  012e4	e9 6e 03 00 00	 jmp	 $failed$23650
$LN34@ast2obj_st:

; 2605 :         if (_PyObject_SetAttrId(result, &PyId_names, value) == -1)

  012e9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  012ee	8b c0		 mov	 eax, eax
  012f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  012f6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  012ff	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01303	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01308	48 8b d0	 mov	 rdx, rax
  0130b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01310	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01315	83 f8 ff	 cmp	 eax, -1
  01318	75 05		 jne	 SHORT $LN33@ast2obj_st

; 2606 :             goto failed;

  0131a	e9 38 03 00 00	 jmp	 $failed$23650
$LN33@ast2obj_st:

; 2607 :         Py_DECREF(value);

  0131f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01324	e8 00 00 00 00	 call	 _Py_DecRef

; 2608 :         value = ast2obj_int(o->v.ImportFrom.level);

  01329	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0132e	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  01331	e8 00 00 00 00	 call	 ast2obj_int
  01336	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2609 :         if (!value) goto failed;

  0133b	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01341	75 05		 jne	 SHORT $LN32@ast2obj_st
  01343	e9 0f 03 00 00	 jmp	 $failed$23650
$LN32@ast2obj_st:

; 2610 :         if (_PyObject_SetAttrId(result, &PyId_level, value) == -1)

  01348	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_level
  0134d	8b c0		 mov	 eax, eax
  0134f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01355	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0135e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01362	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01367	48 8b d0	 mov	 rdx, rax
  0136a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0136f	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01374	83 f8 ff	 cmp	 eax, -1
  01377	75 05		 jne	 SHORT $LN31@ast2obj_st

; 2611 :             goto failed;

  01379	e9 d9 02 00 00	 jmp	 $failed$23650
$LN31@ast2obj_st:

; 2612 :         Py_DECREF(value);

  0137e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01383	e8 00 00 00 00	 call	 _Py_DecRef

; 2613 :         break;

  01388	e9 10 02 00 00	 jmp	 $LN147@ast2obj_st
$LN30@ast2obj_st:

; 2614 :     case Global_kind:
; 2615 :         result = PyType_GenericNew(Global_type, NULL, NULL);

  0138d	45 33 c0	 xor	 r8d, r8d
  01390	33 d2		 xor	 edx, edx
  01392	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Global_type
  01399	e8 00 00 00 00	 call	 PyType_GenericNew
  0139e	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2616 :         if (!result) goto failed;

  013a3	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  013a9	75 05		 jne	 SHORT $LN29@ast2obj_st
  013ab	e9 a7 02 00 00	 jmp	 $failed$23650
$LN29@ast2obj_st:

; 2617 :         value = ast2obj_list(o->v.Global.names, ast2obj_identifier);

  013b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_object
  013b7	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  013bc	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  013c0	e8 00 00 00 00	 call	 ast2obj_list
  013c5	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2618 :         if (!value) goto failed;

  013ca	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  013d0	75 05		 jne	 SHORT $LN28@ast2obj_st
  013d2	e9 80 02 00 00	 jmp	 $failed$23650
$LN28@ast2obj_st:

; 2619 :         if (_PyObject_SetAttrId(result, &PyId_names, value) == -1)

  013d7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  013dc	8b c0		 mov	 eax, eax
  013de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  013e4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  013ed	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  013f1	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  013f6	48 8b d0	 mov	 rdx, rax
  013f9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  013fe	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01403	83 f8 ff	 cmp	 eax, -1
  01406	75 05		 jne	 SHORT $LN27@ast2obj_st

; 2620 :             goto failed;

  01408	e9 4a 02 00 00	 jmp	 $failed$23650
$LN27@ast2obj_st:

; 2621 :         Py_DECREF(value);

  0140d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01412	e8 00 00 00 00	 call	 _Py_DecRef

; 2622 :         break;

  01417	e9 81 01 00 00	 jmp	 $LN147@ast2obj_st
$LN26@ast2obj_st:

; 2623 :     case Nonlocal_kind:
; 2624 :         result = PyType_GenericNew(Nonlocal_type, NULL, NULL);

  0141c	45 33 c0	 xor	 r8d, r8d
  0141f	33 d2		 xor	 edx, edx
  01421	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Nonlocal_type
  01428	e8 00 00 00 00	 call	 PyType_GenericNew
  0142d	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2625 :         if (!result) goto failed;

  01432	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  01438	75 05		 jne	 SHORT $LN25@ast2obj_st
  0143a	e9 18 02 00 00	 jmp	 $failed$23650
$LN25@ast2obj_st:

; 2626 :         value = ast2obj_list(o->v.Nonlocal.names, ast2obj_identifier);

  0143f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_object
  01446	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0144b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0144f	e8 00 00 00 00	 call	 ast2obj_list
  01454	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2627 :         if (!value) goto failed;

  01459	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0145f	75 05		 jne	 SHORT $LN24@ast2obj_st
  01461	e9 f1 01 00 00	 jmp	 $failed$23650
$LN24@ast2obj_st:

; 2628 :         if (_PyObject_SetAttrId(result, &PyId_names, value) == -1)

  01466	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  0146b	8b c0		 mov	 eax, eax
  0146d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01473	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0147c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01480	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01485	48 8b d0	 mov	 rdx, rax
  01488	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0148d	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01492	83 f8 ff	 cmp	 eax, -1
  01495	75 05		 jne	 SHORT $LN23@ast2obj_st

; 2629 :             goto failed;

  01497	e9 bb 01 00 00	 jmp	 $failed$23650
$LN23@ast2obj_st:

; 2630 :         Py_DECREF(value);

  0149c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  014a1	e8 00 00 00 00	 call	 _Py_DecRef

; 2631 :         break;

  014a6	e9 f2 00 00 00	 jmp	 $LN147@ast2obj_st
$LN22@ast2obj_st:

; 2632 :     case Expr_kind:
; 2633 :         result = PyType_GenericNew(Expr_type, NULL, NULL);

  014ab	45 33 c0	 xor	 r8d, r8d
  014ae	33 d2		 xor	 edx, edx
  014b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Expr_type
  014b7	e8 00 00 00 00	 call	 PyType_GenericNew
  014bc	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2634 :         if (!result) goto failed;

  014c1	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  014c7	75 05		 jne	 SHORT $LN21@ast2obj_st
  014c9	e9 89 01 00 00	 jmp	 $failed$23650
$LN21@ast2obj_st:

; 2635 :         value = ast2obj_expr(o->v.Expr.value);

  014ce	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  014d3	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  014d7	e8 00 00 00 00	 call	 ast2obj_expr
  014dc	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2636 :         if (!value) goto failed;

  014e1	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  014e7	75 05		 jne	 SHORT $LN20@ast2obj_st
  014e9	e9 69 01 00 00	 jmp	 $failed$23650
$LN20@ast2obj_st:

; 2637 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  014ee	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  014f3	8b c0		 mov	 eax, eax
  014f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  014fb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01504	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01508	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0150d	48 8b d0	 mov	 rdx, rax
  01510	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01515	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0151a	83 f8 ff	 cmp	 eax, -1
  0151d	75 05		 jne	 SHORT $LN19@ast2obj_st

; 2638 :             goto failed;

  0151f	e9 33 01 00 00	 jmp	 $failed$23650
$LN19@ast2obj_st:

; 2639 :         Py_DECREF(value);

  01524	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01529	e8 00 00 00 00	 call	 _Py_DecRef

; 2640 :         break;

  0152e	eb 6d		 jmp	 SHORT $LN147@ast2obj_st
$LN18@ast2obj_st:

; 2641 :     case Pass_kind:
; 2642 :         result = PyType_GenericNew(Pass_type, NULL, NULL);

  01530	45 33 c0	 xor	 r8d, r8d
  01533	33 d2		 xor	 edx, edx
  01535	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Pass_type
  0153c	e8 00 00 00 00	 call	 PyType_GenericNew
  01541	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2643 :         if (!result) goto failed;

  01546	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0154c	75 05		 jne	 SHORT $LN17@ast2obj_st
  0154e	e9 04 01 00 00	 jmp	 $failed$23650
$LN17@ast2obj_st:

; 2644 :         break;

  01553	eb 48		 jmp	 SHORT $LN147@ast2obj_st
$LN16@ast2obj_st:

; 2645 :     case Break_kind:
; 2646 :         result = PyType_GenericNew(Break_type, NULL, NULL);

  01555	45 33 c0	 xor	 r8d, r8d
  01558	33 d2		 xor	 edx, edx
  0155a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Break_type
  01561	e8 00 00 00 00	 call	 PyType_GenericNew
  01566	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2647 :         if (!result) goto failed;

  0156b	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  01571	75 05		 jne	 SHORT $LN15@ast2obj_st
  01573	e9 df 00 00 00	 jmp	 $failed$23650
$LN15@ast2obj_st:

; 2648 :         break;

  01578	eb 23		 jmp	 SHORT $LN147@ast2obj_st
$LN14@ast2obj_st:

; 2649 :     case Continue_kind:
; 2650 :         result = PyType_GenericNew(Continue_type, NULL, NULL);

  0157a	45 33 c0	 xor	 r8d, r8d
  0157d	33 d2		 xor	 edx, edx
  0157f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Continue_type
  01586	e8 00 00 00 00	 call	 PyType_GenericNew
  0158b	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2651 :         if (!result) goto failed;

  01590	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  01596	75 05		 jne	 SHORT $LN13@ast2obj_st
  01598	e9 ba 00 00 00	 jmp	 $failed$23650
$LN13@ast2obj_st:
$LN147@ast2obj_st:

; 2652 :         break;
; 2653 :     }
; 2654 :     value = ast2obj_int(o->lineno);

  0159d	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  015a2	8b 48 40	 mov	 ecx, DWORD PTR [rax+64]
  015a5	e8 00 00 00 00	 call	 ast2obj_int
  015aa	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2655 :     if (!value) goto failed;

  015af	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  015b5	75 05		 jne	 SHORT $LN12@ast2obj_st
  015b7	e9 9b 00 00 00	 jmp	 $failed$23650
$LN12@ast2obj_st:

; 2656 :     if (_PyObject_SetAttrId(result, &PyId_lineno, value) < 0)

  015bc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lineno
  015c1	8b c0		 mov	 eax, eax
  015c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  015c9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  015d2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  015d6	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  015db	48 8b d0	 mov	 rdx, rax
  015de	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  015e3	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  015e8	85 c0		 test	 eax, eax
  015ea	7d 02		 jge	 SHORT $LN11@ast2obj_st

; 2657 :         goto failed;

  015ec	eb 69		 jmp	 SHORT $failed$23650
$LN11@ast2obj_st:

; 2658 :     Py_DECREF(value);

  015ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  015f3	e8 00 00 00 00	 call	 _Py_DecRef

; 2659 :     value = ast2obj_int(o->col_offset);

  015f8	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  015fd	8b 48 44	 mov	 ecx, DWORD PTR [rax+68]
  01600	e8 00 00 00 00	 call	 ast2obj_int
  01605	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2660 :     if (!value) goto failed;

  0160a	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01610	75 02		 jne	 SHORT $LN10@ast2obj_st
  01612	eb 43		 jmp	 SHORT $failed$23650
$LN10@ast2obj_st:

; 2661 :     if (_PyObject_SetAttrId(result, &PyId_col_offset, value) < 0)

  01614	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_col_offset
  01619	8b c0		 mov	 eax, eax
  0161b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01621	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0162a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0162e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01633	48 8b d0	 mov	 rdx, rax
  01636	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0163b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01640	85 c0		 test	 eax, eax
  01642	7d 02		 jge	 SHORT $LN9@ast2obj_st

; 2662 :         goto failed;

  01644	eb 11		 jmp	 SHORT $failed$23650
$LN9@ast2obj_st:

; 2663 :     Py_DECREF(value);

  01646	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0164b	e8 00 00 00 00	 call	 _Py_DecRef

; 2664 :     return result;

  01650	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  01655	eb 32		 jmp	 SHORT $LN150@ast2obj_st
$failed$23650:
$LN8@ast2obj_st:

; 2665 : failed:
; 2666 :     Py_XDECREF(value);

  01657	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0165d	74 0a		 je	 SHORT $LN5@ast2obj_st
  0165f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01664	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ast2obj_st:
  01669	33 c0		 xor	 eax, eax
  0166b	85 c0		 test	 eax, eax
  0166d	75 e8		 jne	 SHORT $LN8@ast2obj_st
$LN4@ast2obj_st:

; 2667 :     Py_XDECREF(result);

  0166f	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  01675	74 0a		 je	 SHORT $LN1@ast2obj_st
  01677	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0167c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast2obj_st:
  01681	33 c0		 xor	 eax, eax
  01683	85 c0		 test	 eax, eax
  01685	75 e8		 jne	 SHORT $LN4@ast2obj_st

; 2668 :     return NULL;

  01687	33 c0		 xor	 eax, eax
$LN150@ast2obj_st:

; 2669 : }

  01689	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0168d	c3		 ret	 0
  0168e	66 90		 npad	 2
$LN152@ast2obj_st:
  01690	00 00 00 00	 DD	 $LN146@ast2obj_st
  01694	00 00 00 00	 DD	 $LN134@ast2obj_st
  01698	00 00 00 00	 DD	 $LN118@ast2obj_st
  0169c	00 00 00 00	 DD	 $LN114@ast2obj_st
  016a0	00 00 00 00	 DD	 $LN110@ast2obj_st
  016a4	00 00 00 00	 DD	 $LN104@ast2obj_st
  016a8	00 00 00 00	 DD	 $LN96@ast2obj_st
  016ac	00 00 00 00	 DD	 $LN86@ast2obj_st
  016b0	00 00 00 00	 DD	 $LN78@ast2obj_st
  016b4	00 00 00 00	 DD	 $LN70@ast2obj_st
  016b8	00 00 00 00	 DD	 $LN64@ast2obj_st
  016bc	00 00 00 00	 DD	 $LN58@ast2obj_st
  016c0	00 00 00 00	 DD	 $LN48@ast2obj_st
  016c4	00 00 00 00	 DD	 $LN42@ast2obj_st
  016c8	00 00 00 00	 DD	 $LN38@ast2obj_st
  016cc	00 00 00 00	 DD	 $LN30@ast2obj_st
  016d0	00 00 00 00	 DD	 $LN26@ast2obj_st
  016d4	00 00 00 00	 DD	 $LN22@ast2obj_st
  016d8	00 00 00 00	 DD	 $LN18@ast2obj_st
  016dc	00 00 00 00	 DD	 $LN16@ast2obj_st
  016e0	00 00 00 00	 DD	 $LN14@ast2obj_st
ast2obj_stmt ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_object DD imagerel ast2obj_object
	DD	imagerel ast2obj_object+49
	DD	imagerel $unwind$ast2obj_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_object DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_object
_TEXT	SEGMENT
o$ = 48
ast2obj_object PROC					; COMDAT

; 670  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 671  :     if (!o)

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0000f	75 0c		 jne	 SHORT $LN1@ast2obj_ob

; 672  :         o = Py_None;

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00018	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax
$LN1@ast2obj_ob:

; 673  :     Py_INCREF((PyObject*)o);

  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR o$[rsp]
  00022	e8 00 00 00 00	 call	 _Py_IncRef

; 674  :     return (PyObject*)o;

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]

; 675  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
ast2obj_object ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_int DD imagerel ast2obj_int
	DD	imagerel ast2obj_int+22
	DD	imagerel $unwind$ast2obj_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_int DD 010801H
	DD	04208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_int
_TEXT	SEGMENT
b$ = 48
ast2obj_int PROC					; COMDAT

; 681  : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 682  :     return PyLong_FromLong(b);

  00008	8b 4c 24 30	 mov	 ecx, DWORD PTR b$[rsp]
  0000c	e8 00 00 00 00	 call	 PyLong_FromLong

; 683  : }

  00011	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00015	c3		 ret	 0
ast2obj_int ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_expr DD imagerel ast2obj_expr
	DD	imagerel ast2obj_expr+6580
	DD	imagerel $unwind$ast2obj_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_expr DD 010901H
	DD	0c209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_expr
_TEXT	SEGMENT
value$ = 32
result$ = 40
o$ = 48
n$24040 = 56
i$24039 = 64
tv66 = 72
tv613 = 80
_o$ = 112
ast2obj_expr PROC					; COMDAT

; 2673 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2674 :     expr_ty o = (expr_ty)_o;

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR _o$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 2675 :     PyObject *result = NULL, *value = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 2676 :     if (!o) {

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002b	75 18		 jne	 SHORT $LN171@ast2obj_ex

; 2677 :         Py_INCREF(Py_None);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00034	e8 00 00 00 00	 call	 _Py_IncRef

; 2678 :         return Py_None;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00040	e9 03 19 00 00	 jmp	 $LN172@ast2obj_ex
$LN171@ast2obj_ex:

; 2679 :     }
; 2680 : 
; 2681 :     switch (o->kind) {

  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0004a	8b 00		 mov	 eax, DWORD PTR [rax]
  0004c	89 44 24 48	 mov	 DWORD PTR tv66[rsp], eax
  00050	8b 44 24 48	 mov	 eax, DWORD PTR tv66[rsp]
  00054	ff c8		 dec	 eax
  00056	89 44 24 48	 mov	 DWORD PTR tv66[rsp], eax
  0005a	83 7c 24 48 18	 cmp	 DWORD PTR tv66[rsp], 24
  0005f	0f 87 f7 17 00
	00		 ja	 $LN169@ast2obj_ex
  00065	48 63 44 24 48	 movsxd	 rax, DWORD PTR tv66[rsp]
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00071	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN176@ast2obj_ex[rcx+rax*4]
  00078	48 03 c1	 add	 rax, rcx
  0007b	ff e0		 jmp	 rax
$LN168@ast2obj_ex:

; 2682 :     case BoolOp_kind:
; 2683 :         result = PyType_GenericNew(BoolOp_type, NULL, NULL);

  0007d	45 33 c0	 xor	 r8d, r8d
  00080	33 d2		 xor	 edx, edx
  00082	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BoolOp_type
  00089	e8 00 00 00 00	 call	 PyType_GenericNew
  0008e	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2684 :         if (!result) goto failed;

  00093	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00099	75 05		 jne	 SHORT $LN167@ast2obj_ex
  0009b	e9 76 18 00 00	 jmp	 $failed$23905
$LN167@ast2obj_ex:

; 2685 :         value = ast2obj_boolop(o->v.BoolOp.op);

  000a0	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000a5	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000a8	e8 00 00 00 00	 call	 ast2obj_boolop
  000ad	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2686 :         if (!value) goto failed;

  000b2	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000b8	75 05		 jne	 SHORT $LN166@ast2obj_ex
  000ba	e9 57 18 00 00	 jmp	 $failed$23905
$LN166@ast2obj_ex:

; 2687 :         if (_PyObject_SetAttrId(result, &PyId_op, value) == -1)

  000bf	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  000c4	8b c0		 mov	 eax, eax
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000cc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000d5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000d9	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000de	48 8b d0	 mov	 rdx, rax
  000e1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000e6	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000eb	83 f8 ff	 cmp	 eax, -1
  000ee	75 05		 jne	 SHORT $LN165@ast2obj_ex

; 2688 :             goto failed;

  000f0	e9 21 18 00 00	 jmp	 $failed$23905
$LN165@ast2obj_ex:

; 2689 :         Py_DECREF(value);

  000f5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000fa	e8 00 00 00 00	 call	 _Py_DecRef

; 2690 :         value = ast2obj_list(o->v.BoolOp.values, ast2obj_expr);

  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00106	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0010b	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0010f	e8 00 00 00 00	 call	 ast2obj_list
  00114	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2691 :         if (!value) goto failed;

  00119	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0011f	75 05		 jne	 SHORT $LN164@ast2obj_ex
  00121	e9 f0 17 00 00	 jmp	 $failed$23905
$LN164@ast2obj_ex:

; 2692 :         if (_PyObject_SetAttrId(result, &PyId_values, value) == -1)

  00126	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_values
  0012b	8b c0		 mov	 eax, eax
  0012d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00133	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0013c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00140	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00145	48 8b d0	 mov	 rdx, rax
  00148	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0014d	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00152	83 f8 ff	 cmp	 eax, -1
  00155	75 05		 jne	 SHORT $LN163@ast2obj_ex

; 2693 :             goto failed;

  00157	e9 ba 17 00 00	 jmp	 $failed$23905
$LN163@ast2obj_ex:

; 2694 :         Py_DECREF(value);

  0015c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00161	e8 00 00 00 00	 call	 _Py_DecRef

; 2695 :         break;

  00166	e9 f1 16 00 00	 jmp	 $LN169@ast2obj_ex
$LN162@ast2obj_ex:

; 2696 :     case BinOp_kind:
; 2697 :         result = PyType_GenericNew(BinOp_type, NULL, NULL);

  0016b	45 33 c0	 xor	 r8d, r8d
  0016e	33 d2		 xor	 edx, edx
  00170	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BinOp_type
  00177	e8 00 00 00 00	 call	 PyType_GenericNew
  0017c	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2698 :         if (!result) goto failed;

  00181	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00187	75 05		 jne	 SHORT $LN161@ast2obj_ex
  00189	e9 88 17 00 00	 jmp	 $failed$23905
$LN161@ast2obj_ex:

; 2699 :         value = ast2obj_expr(o->v.BinOp.left);

  0018e	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00193	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00197	e8 00 00 00 00	 call	 ast2obj_expr
  0019c	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2700 :         if (!value) goto failed;

  001a1	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  001a7	75 05		 jne	 SHORT $LN160@ast2obj_ex
  001a9	e9 68 17 00 00	 jmp	 $failed$23905
$LN160@ast2obj_ex:

; 2701 :         if (_PyObject_SetAttrId(result, &PyId_left, value) == -1)

  001ae	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_left
  001b3	8b c0		 mov	 eax, eax
  001b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001bb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001c4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001c8	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  001cd	48 8b d0	 mov	 rdx, rax
  001d0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  001d5	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001da	83 f8 ff	 cmp	 eax, -1
  001dd	75 05		 jne	 SHORT $LN159@ast2obj_ex

; 2702 :             goto failed;

  001df	e9 32 17 00 00	 jmp	 $failed$23905
$LN159@ast2obj_ex:

; 2703 :         Py_DECREF(value);

  001e4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  001e9	e8 00 00 00 00	 call	 _Py_DecRef

; 2704 :         value = ast2obj_operator(o->v.BinOp.op);

  001ee	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  001f3	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  001f6	e8 00 00 00 00	 call	 ast2obj_operator
  001fb	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2705 :         if (!value) goto failed;

  00200	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00206	75 05		 jne	 SHORT $LN158@ast2obj_ex
  00208	e9 09 17 00 00	 jmp	 $failed$23905
$LN158@ast2obj_ex:

; 2706 :         if (_PyObject_SetAttrId(result, &PyId_op, value) == -1)

  0020d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  00212	8b c0		 mov	 eax, eax
  00214	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0021a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00223	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00227	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0022c	48 8b d0	 mov	 rdx, rax
  0022f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00234	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00239	83 f8 ff	 cmp	 eax, -1
  0023c	75 05		 jne	 SHORT $LN157@ast2obj_ex

; 2707 :             goto failed;

  0023e	e9 d3 16 00 00	 jmp	 $failed$23905
$LN157@ast2obj_ex:

; 2708 :         Py_DECREF(value);

  00243	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00248	e8 00 00 00 00	 call	 _Py_DecRef

; 2709 :         value = ast2obj_expr(o->v.BinOp.right);

  0024d	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00252	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00256	e8 00 00 00 00	 call	 ast2obj_expr
  0025b	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2710 :         if (!value) goto failed;

  00260	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00266	75 05		 jne	 SHORT $LN156@ast2obj_ex
  00268	e9 a9 16 00 00	 jmp	 $failed$23905
$LN156@ast2obj_ex:

; 2711 :         if (_PyObject_SetAttrId(result, &PyId_right, value) == -1)

  0026d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_right
  00272	8b c0		 mov	 eax, eax
  00274	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0027a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00283	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00287	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0028c	48 8b d0	 mov	 rdx, rax
  0028f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00294	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00299	83 f8 ff	 cmp	 eax, -1
  0029c	75 05		 jne	 SHORT $LN155@ast2obj_ex

; 2712 :             goto failed;

  0029e	e9 73 16 00 00	 jmp	 $failed$23905
$LN155@ast2obj_ex:

; 2713 :         Py_DECREF(value);

  002a3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  002a8	e8 00 00 00 00	 call	 _Py_DecRef

; 2714 :         break;

  002ad	e9 aa 15 00 00	 jmp	 $LN169@ast2obj_ex
$LN154@ast2obj_ex:

; 2715 :     case UnaryOp_kind:
; 2716 :         result = PyType_GenericNew(UnaryOp_type, NULL, NULL);

  002b2	45 33 c0	 xor	 r8d, r8d
  002b5	33 d2		 xor	 edx, edx
  002b7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR UnaryOp_type
  002be	e8 00 00 00 00	 call	 PyType_GenericNew
  002c3	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2717 :         if (!result) goto failed;

  002c8	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  002ce	75 05		 jne	 SHORT $LN153@ast2obj_ex
  002d0	e9 41 16 00 00	 jmp	 $failed$23905
$LN153@ast2obj_ex:

; 2718 :         value = ast2obj_unaryop(o->v.UnaryOp.op);

  002d5	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  002da	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  002dd	e8 00 00 00 00	 call	 ast2obj_unaryop
  002e2	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2719 :         if (!value) goto failed;

  002e7	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  002ed	75 05		 jne	 SHORT $LN152@ast2obj_ex
  002ef	e9 22 16 00 00	 jmp	 $failed$23905
$LN152@ast2obj_ex:

; 2720 :         if (_PyObject_SetAttrId(result, &PyId_op, value) == -1)

  002f4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  002f9	8b c0		 mov	 eax, eax
  002fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00301	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0030a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0030e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00313	48 8b d0	 mov	 rdx, rax
  00316	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0031b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00320	83 f8 ff	 cmp	 eax, -1
  00323	75 05		 jne	 SHORT $LN151@ast2obj_ex

; 2721 :             goto failed;

  00325	e9 ec 15 00 00	 jmp	 $failed$23905
$LN151@ast2obj_ex:

; 2722 :         Py_DECREF(value);

  0032a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0032f	e8 00 00 00 00	 call	 _Py_DecRef

; 2723 :         value = ast2obj_expr(o->v.UnaryOp.operand);

  00334	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00339	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0033d	e8 00 00 00 00	 call	 ast2obj_expr
  00342	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2724 :         if (!value) goto failed;

  00347	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0034d	75 05		 jne	 SHORT $LN150@ast2obj_ex
  0034f	e9 c2 15 00 00	 jmp	 $failed$23905
$LN150@ast2obj_ex:

; 2725 :         if (_PyObject_SetAttrId(result, &PyId_operand, value) == -1)

  00354	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_operand
  00359	8b c0		 mov	 eax, eax
  0035b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00361	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0036a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0036e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00373	48 8b d0	 mov	 rdx, rax
  00376	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0037b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00380	83 f8 ff	 cmp	 eax, -1
  00383	75 05		 jne	 SHORT $LN149@ast2obj_ex

; 2726 :             goto failed;

  00385	e9 8c 15 00 00	 jmp	 $failed$23905
$LN149@ast2obj_ex:

; 2727 :         Py_DECREF(value);

  0038a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0038f	e8 00 00 00 00	 call	 _Py_DecRef

; 2728 :         break;

  00394	e9 c3 14 00 00	 jmp	 $LN169@ast2obj_ex
$LN148@ast2obj_ex:

; 2729 :     case Lambda_kind:
; 2730 :         result = PyType_GenericNew(Lambda_type, NULL, NULL);

  00399	45 33 c0	 xor	 r8d, r8d
  0039c	33 d2		 xor	 edx, edx
  0039e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Lambda_type
  003a5	e8 00 00 00 00	 call	 PyType_GenericNew
  003aa	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2731 :         if (!result) goto failed;

  003af	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  003b5	75 05		 jne	 SHORT $LN147@ast2obj_ex
  003b7	e9 5a 15 00 00	 jmp	 $failed$23905
$LN147@ast2obj_ex:

; 2732 :         value = ast2obj_arguments(o->v.Lambda.args);

  003bc	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  003c1	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  003c5	e8 00 00 00 00	 call	 ast2obj_arguments
  003ca	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2733 :         if (!value) goto failed;

  003cf	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  003d5	75 05		 jne	 SHORT $LN146@ast2obj_ex
  003d7	e9 3a 15 00 00	 jmp	 $failed$23905
$LN146@ast2obj_ex:

; 2734 :         if (_PyObject_SetAttrId(result, &PyId_args, value) == -1)

  003dc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  003e1	8b c0		 mov	 eax, eax
  003e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003e9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003f2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003f6	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  003fb	48 8b d0	 mov	 rdx, rax
  003fe	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00403	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00408	83 f8 ff	 cmp	 eax, -1
  0040b	75 05		 jne	 SHORT $LN145@ast2obj_ex

; 2735 :             goto failed;

  0040d	e9 04 15 00 00	 jmp	 $failed$23905
$LN145@ast2obj_ex:

; 2736 :         Py_DECREF(value);

  00412	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00417	e8 00 00 00 00	 call	 _Py_DecRef

; 2737 :         value = ast2obj_expr(o->v.Lambda.body);

  0041c	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00421	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00425	e8 00 00 00 00	 call	 ast2obj_expr
  0042a	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2738 :         if (!value) goto failed;

  0042f	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00435	75 05		 jne	 SHORT $LN144@ast2obj_ex
  00437	e9 da 14 00 00	 jmp	 $failed$23905
$LN144@ast2obj_ex:

; 2739 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  0043c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  00441	8b c0		 mov	 eax, eax
  00443	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00449	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00452	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00456	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0045b	48 8b d0	 mov	 rdx, rax
  0045e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00463	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00468	83 f8 ff	 cmp	 eax, -1
  0046b	75 05		 jne	 SHORT $LN143@ast2obj_ex

; 2740 :             goto failed;

  0046d	e9 a4 14 00 00	 jmp	 $failed$23905
$LN143@ast2obj_ex:

; 2741 :         Py_DECREF(value);

  00472	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00477	e8 00 00 00 00	 call	 _Py_DecRef

; 2742 :         break;

  0047c	e9 db 13 00 00	 jmp	 $LN169@ast2obj_ex
$LN142@ast2obj_ex:

; 2743 :     case IfExp_kind:
; 2744 :         result = PyType_GenericNew(IfExp_type, NULL, NULL);

  00481	45 33 c0	 xor	 r8d, r8d
  00484	33 d2		 xor	 edx, edx
  00486	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR IfExp_type
  0048d	e8 00 00 00 00	 call	 PyType_GenericNew
  00492	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2745 :         if (!result) goto failed;

  00497	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0049d	75 05		 jne	 SHORT $LN141@ast2obj_ex
  0049f	e9 72 14 00 00	 jmp	 $failed$23905
$LN141@ast2obj_ex:

; 2746 :         value = ast2obj_expr(o->v.IfExp.test);

  004a4	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  004a9	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  004ad	e8 00 00 00 00	 call	 ast2obj_expr
  004b2	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2747 :         if (!value) goto failed;

  004b7	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  004bd	75 05		 jne	 SHORT $LN140@ast2obj_ex
  004bf	e9 52 14 00 00	 jmp	 $failed$23905
$LN140@ast2obj_ex:

; 2748 :         if (_PyObject_SetAttrId(result, &PyId_test, value) == -1)

  004c4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  004c9	8b c0		 mov	 eax, eax
  004cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  004d1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  004da	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  004de	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  004e3	48 8b d0	 mov	 rdx, rax
  004e6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  004eb	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  004f0	83 f8 ff	 cmp	 eax, -1
  004f3	75 05		 jne	 SHORT $LN139@ast2obj_ex

; 2749 :             goto failed;

  004f5	e9 1c 14 00 00	 jmp	 $failed$23905
$LN139@ast2obj_ex:

; 2750 :         Py_DECREF(value);

  004fa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  004ff	e8 00 00 00 00	 call	 _Py_DecRef

; 2751 :         value = ast2obj_expr(o->v.IfExp.body);

  00504	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00509	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0050d	e8 00 00 00 00	 call	 ast2obj_expr
  00512	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2752 :         if (!value) goto failed;

  00517	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0051d	75 05		 jne	 SHORT $LN138@ast2obj_ex
  0051f	e9 f2 13 00 00	 jmp	 $failed$23905
$LN138@ast2obj_ex:

; 2753 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00524	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  00529	8b c0		 mov	 eax, eax
  0052b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00531	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0053a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0053e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00543	48 8b d0	 mov	 rdx, rax
  00546	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0054b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00550	83 f8 ff	 cmp	 eax, -1
  00553	75 05		 jne	 SHORT $LN137@ast2obj_ex

; 2754 :             goto failed;

  00555	e9 bc 13 00 00	 jmp	 $failed$23905
$LN137@ast2obj_ex:

; 2755 :         Py_DECREF(value);

  0055a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0055f	e8 00 00 00 00	 call	 _Py_DecRef

; 2756 :         value = ast2obj_expr(o->v.IfExp.orelse);

  00564	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00569	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0056d	e8 00 00 00 00	 call	 ast2obj_expr
  00572	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2757 :         if (!value) goto failed;

  00577	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0057d	75 05		 jne	 SHORT $LN136@ast2obj_ex
  0057f	e9 92 13 00 00	 jmp	 $failed$23905
$LN136@ast2obj_ex:

; 2758 :         if (_PyObject_SetAttrId(result, &PyId_orelse, value) == -1)

  00584	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  00589	8b c0		 mov	 eax, eax
  0058b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00591	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0059a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0059e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  005a3	48 8b d0	 mov	 rdx, rax
  005a6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  005ab	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  005b0	83 f8 ff	 cmp	 eax, -1
  005b3	75 05		 jne	 SHORT $LN135@ast2obj_ex

; 2759 :             goto failed;

  005b5	e9 5c 13 00 00	 jmp	 $failed$23905
$LN135@ast2obj_ex:

; 2760 :         Py_DECREF(value);

  005ba	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  005bf	e8 00 00 00 00	 call	 _Py_DecRef

; 2761 :         break;

  005c4	e9 93 12 00 00	 jmp	 $LN169@ast2obj_ex
$LN134@ast2obj_ex:

; 2762 :     case Dict_kind:
; 2763 :         result = PyType_GenericNew(Dict_type, NULL, NULL);

  005c9	45 33 c0	 xor	 r8d, r8d
  005cc	33 d2		 xor	 edx, edx
  005ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Dict_type
  005d5	e8 00 00 00 00	 call	 PyType_GenericNew
  005da	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2764 :         if (!result) goto failed;

  005df	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  005e5	75 05		 jne	 SHORT $LN133@ast2obj_ex
  005e7	e9 2a 13 00 00	 jmp	 $failed$23905
$LN133@ast2obj_ex:

; 2765 :         value = ast2obj_list(o->v.Dict.keys, ast2obj_expr);

  005ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  005f3	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  005f8	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  005fc	e8 00 00 00 00	 call	 ast2obj_list
  00601	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2766 :         if (!value) goto failed;

  00606	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0060c	75 05		 jne	 SHORT $LN132@ast2obj_ex
  0060e	e9 03 13 00 00	 jmp	 $failed$23905
$LN132@ast2obj_ex:

; 2767 :         if (_PyObject_SetAttrId(result, &PyId_keys, value) == -1)

  00613	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_keys
  00618	8b c0		 mov	 eax, eax
  0061a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00620	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00629	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0062d	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00632	48 8b d0	 mov	 rdx, rax
  00635	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0063a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0063f	83 f8 ff	 cmp	 eax, -1
  00642	75 05		 jne	 SHORT $LN131@ast2obj_ex

; 2768 :             goto failed;

  00644	e9 cd 12 00 00	 jmp	 $failed$23905
$LN131@ast2obj_ex:

; 2769 :         Py_DECREF(value);

  00649	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0064e	e8 00 00 00 00	 call	 _Py_DecRef

; 2770 :         value = ast2obj_list(o->v.Dict.values, ast2obj_expr);

  00653	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  0065a	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0065f	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00663	e8 00 00 00 00	 call	 ast2obj_list
  00668	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2771 :         if (!value) goto failed;

  0066d	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00673	75 05		 jne	 SHORT $LN130@ast2obj_ex
  00675	e9 9c 12 00 00	 jmp	 $failed$23905
$LN130@ast2obj_ex:

; 2772 :         if (_PyObject_SetAttrId(result, &PyId_values, value) == -1)

  0067a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_values
  0067f	8b c0		 mov	 eax, eax
  00681	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00687	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00690	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00694	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00699	48 8b d0	 mov	 rdx, rax
  0069c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  006a1	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  006a6	83 f8 ff	 cmp	 eax, -1
  006a9	75 05		 jne	 SHORT $LN129@ast2obj_ex

; 2773 :             goto failed;

  006ab	e9 66 12 00 00	 jmp	 $failed$23905
$LN129@ast2obj_ex:

; 2774 :         Py_DECREF(value);

  006b0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  006b5	e8 00 00 00 00	 call	 _Py_DecRef

; 2775 :         break;

  006ba	e9 9d 11 00 00	 jmp	 $LN169@ast2obj_ex
$LN128@ast2obj_ex:

; 2776 :     case Set_kind:
; 2777 :         result = PyType_GenericNew(Set_type, NULL, NULL);

  006bf	45 33 c0	 xor	 r8d, r8d
  006c2	33 d2		 xor	 edx, edx
  006c4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Set_type
  006cb	e8 00 00 00 00	 call	 PyType_GenericNew
  006d0	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2778 :         if (!result) goto failed;

  006d5	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  006db	75 05		 jne	 SHORT $LN127@ast2obj_ex
  006dd	e9 34 12 00 00	 jmp	 $failed$23905
$LN127@ast2obj_ex:

; 2779 :         value = ast2obj_list(o->v.Set.elts, ast2obj_expr);

  006e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  006e9	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  006ee	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  006f2	e8 00 00 00 00	 call	 ast2obj_list
  006f7	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2780 :         if (!value) goto failed;

  006fc	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00702	75 05		 jne	 SHORT $LN126@ast2obj_ex
  00704	e9 0d 12 00 00	 jmp	 $failed$23905
$LN126@ast2obj_ex:

; 2781 :         if (_PyObject_SetAttrId(result, &PyId_elts, value) == -1)

  00709	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elts
  0070e	8b c0		 mov	 eax, eax
  00710	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00716	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0071f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00723	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00728	48 8b d0	 mov	 rdx, rax
  0072b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00730	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00735	83 f8 ff	 cmp	 eax, -1
  00738	75 05		 jne	 SHORT $LN125@ast2obj_ex

; 2782 :             goto failed;

  0073a	e9 d7 11 00 00	 jmp	 $failed$23905
$LN125@ast2obj_ex:

; 2783 :         Py_DECREF(value);

  0073f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00744	e8 00 00 00 00	 call	 _Py_DecRef

; 2784 :         break;

  00749	e9 0e 11 00 00	 jmp	 $LN169@ast2obj_ex
$LN124@ast2obj_ex:

; 2785 :     case ListComp_kind:
; 2786 :         result = PyType_GenericNew(ListComp_type, NULL, NULL);

  0074e	45 33 c0	 xor	 r8d, r8d
  00751	33 d2		 xor	 edx, edx
  00753	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ListComp_type
  0075a	e8 00 00 00 00	 call	 PyType_GenericNew
  0075f	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2787 :         if (!result) goto failed;

  00764	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0076a	75 05		 jne	 SHORT $LN123@ast2obj_ex
  0076c	e9 a5 11 00 00	 jmp	 $failed$23905
$LN123@ast2obj_ex:

; 2788 :         value = ast2obj_expr(o->v.ListComp.elt);

  00771	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00776	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0077a	e8 00 00 00 00	 call	 ast2obj_expr
  0077f	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2789 :         if (!value) goto failed;

  00784	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0078a	75 05		 jne	 SHORT $LN122@ast2obj_ex
  0078c	e9 85 11 00 00	 jmp	 $failed$23905
$LN122@ast2obj_ex:

; 2790 :         if (_PyObject_SetAttrId(result, &PyId_elt, value) == -1)

  00791	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elt
  00796	8b c0		 mov	 eax, eax
  00798	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0079e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  007a7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  007ab	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  007b0	48 8b d0	 mov	 rdx, rax
  007b3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  007b8	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  007bd	83 f8 ff	 cmp	 eax, -1
  007c0	75 05		 jne	 SHORT $LN121@ast2obj_ex

; 2791 :             goto failed;

  007c2	e9 4f 11 00 00	 jmp	 $failed$23905
$LN121@ast2obj_ex:

; 2792 :         Py_DECREF(value);

  007c7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  007cc	e8 00 00 00 00	 call	 _Py_DecRef

; 2793 :         value = ast2obj_list(o->v.ListComp.generators, ast2obj_comprehension);

  007d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_comprehension
  007d8	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  007dd	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  007e1	e8 00 00 00 00	 call	 ast2obj_list
  007e6	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2794 :         if (!value) goto failed;

  007eb	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  007f1	75 05		 jne	 SHORT $LN120@ast2obj_ex
  007f3	e9 1e 11 00 00	 jmp	 $failed$23905
$LN120@ast2obj_ex:

; 2795 :         if (_PyObject_SetAttrId(result, &PyId_generators, value) == -1)

  007f8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  007fd	8b c0		 mov	 eax, eax
  007ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00805	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0080e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00812	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00817	48 8b d0	 mov	 rdx, rax
  0081a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0081f	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00824	83 f8 ff	 cmp	 eax, -1
  00827	75 05		 jne	 SHORT $LN119@ast2obj_ex

; 2796 :             goto failed;

  00829	e9 e8 10 00 00	 jmp	 $failed$23905
$LN119@ast2obj_ex:

; 2797 :         Py_DECREF(value);

  0082e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00833	e8 00 00 00 00	 call	 _Py_DecRef

; 2798 :         break;

  00838	e9 1f 10 00 00	 jmp	 $LN169@ast2obj_ex
$LN118@ast2obj_ex:

; 2799 :     case SetComp_kind:
; 2800 :         result = PyType_GenericNew(SetComp_type, NULL, NULL);

  0083d	45 33 c0	 xor	 r8d, r8d
  00840	33 d2		 xor	 edx, edx
  00842	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR SetComp_type
  00849	e8 00 00 00 00	 call	 PyType_GenericNew
  0084e	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2801 :         if (!result) goto failed;

  00853	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00859	75 05		 jne	 SHORT $LN117@ast2obj_ex
  0085b	e9 b6 10 00 00	 jmp	 $failed$23905
$LN117@ast2obj_ex:

; 2802 :         value = ast2obj_expr(o->v.SetComp.elt);

  00860	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00865	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00869	e8 00 00 00 00	 call	 ast2obj_expr
  0086e	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2803 :         if (!value) goto failed;

  00873	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00879	75 05		 jne	 SHORT $LN116@ast2obj_ex
  0087b	e9 96 10 00 00	 jmp	 $failed$23905
$LN116@ast2obj_ex:

; 2804 :         if (_PyObject_SetAttrId(result, &PyId_elt, value) == -1)

  00880	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elt
  00885	8b c0		 mov	 eax, eax
  00887	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0088d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00896	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0089a	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0089f	48 8b d0	 mov	 rdx, rax
  008a2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  008a7	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  008ac	83 f8 ff	 cmp	 eax, -1
  008af	75 05		 jne	 SHORT $LN115@ast2obj_ex

; 2805 :             goto failed;

  008b1	e9 60 10 00 00	 jmp	 $failed$23905
$LN115@ast2obj_ex:

; 2806 :         Py_DECREF(value);

  008b6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  008bb	e8 00 00 00 00	 call	 _Py_DecRef

; 2807 :         value = ast2obj_list(o->v.SetComp.generators, ast2obj_comprehension);

  008c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_comprehension
  008c7	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  008cc	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  008d0	e8 00 00 00 00	 call	 ast2obj_list
  008d5	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2808 :         if (!value) goto failed;

  008da	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  008e0	75 05		 jne	 SHORT $LN114@ast2obj_ex
  008e2	e9 2f 10 00 00	 jmp	 $failed$23905
$LN114@ast2obj_ex:

; 2809 :         if (_PyObject_SetAttrId(result, &PyId_generators, value) == -1)

  008e7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  008ec	8b c0		 mov	 eax, eax
  008ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  008f4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  008fd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00901	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00906	48 8b d0	 mov	 rdx, rax
  00909	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0090e	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00913	83 f8 ff	 cmp	 eax, -1
  00916	75 05		 jne	 SHORT $LN113@ast2obj_ex

; 2810 :             goto failed;

  00918	e9 f9 0f 00 00	 jmp	 $failed$23905
$LN113@ast2obj_ex:

; 2811 :         Py_DECREF(value);

  0091d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00922	e8 00 00 00 00	 call	 _Py_DecRef

; 2812 :         break;

  00927	e9 30 0f 00 00	 jmp	 $LN169@ast2obj_ex
$LN112@ast2obj_ex:

; 2813 :     case DictComp_kind:
; 2814 :         result = PyType_GenericNew(DictComp_type, NULL, NULL);

  0092c	45 33 c0	 xor	 r8d, r8d
  0092f	33 d2		 xor	 edx, edx
  00931	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR DictComp_type
  00938	e8 00 00 00 00	 call	 PyType_GenericNew
  0093d	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2815 :         if (!result) goto failed;

  00942	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00948	75 05		 jne	 SHORT $LN111@ast2obj_ex
  0094a	e9 c7 0f 00 00	 jmp	 $failed$23905
$LN111@ast2obj_ex:

; 2816 :         value = ast2obj_expr(o->v.DictComp.key);

  0094f	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00954	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00958	e8 00 00 00 00	 call	 ast2obj_expr
  0095d	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2817 :         if (!value) goto failed;

  00962	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00968	75 05		 jne	 SHORT $LN110@ast2obj_ex
  0096a	e9 a7 0f 00 00	 jmp	 $failed$23905
$LN110@ast2obj_ex:

; 2818 :         if (_PyObject_SetAttrId(result, &PyId_key, value) == -1)

  0096f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_key
  00974	8b c0		 mov	 eax, eax
  00976	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0097c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00985	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00989	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0098e	48 8b d0	 mov	 rdx, rax
  00991	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00996	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0099b	83 f8 ff	 cmp	 eax, -1
  0099e	75 05		 jne	 SHORT $LN109@ast2obj_ex

; 2819 :             goto failed;

  009a0	e9 71 0f 00 00	 jmp	 $failed$23905
$LN109@ast2obj_ex:

; 2820 :         Py_DECREF(value);

  009a5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  009aa	e8 00 00 00 00	 call	 _Py_DecRef

; 2821 :         value = ast2obj_expr(o->v.DictComp.value);

  009af	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  009b4	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  009b8	e8 00 00 00 00	 call	 ast2obj_expr
  009bd	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2822 :         if (!value) goto failed;

  009c2	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  009c8	75 05		 jne	 SHORT $LN108@ast2obj_ex
  009ca	e9 47 0f 00 00	 jmp	 $failed$23905
$LN108@ast2obj_ex:

; 2823 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  009cf	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  009d4	8b c0		 mov	 eax, eax
  009d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  009dc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  009e5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  009e9	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  009ee	48 8b d0	 mov	 rdx, rax
  009f1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  009f6	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  009fb	83 f8 ff	 cmp	 eax, -1
  009fe	75 05		 jne	 SHORT $LN107@ast2obj_ex

; 2824 :             goto failed;

  00a00	e9 11 0f 00 00	 jmp	 $failed$23905
$LN107@ast2obj_ex:

; 2825 :         Py_DECREF(value);

  00a05	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00a0a	e8 00 00 00 00	 call	 _Py_DecRef

; 2826 :         value = ast2obj_list(o->v.DictComp.generators, ast2obj_comprehension);

  00a0f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_comprehension
  00a16	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00a1b	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00a1f	e8 00 00 00 00	 call	 ast2obj_list
  00a24	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2827 :         if (!value) goto failed;

  00a29	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00a2f	75 05		 jne	 SHORT $LN106@ast2obj_ex
  00a31	e9 e0 0e 00 00	 jmp	 $failed$23905
$LN106@ast2obj_ex:

; 2828 :         if (_PyObject_SetAttrId(result, &PyId_generators, value) == -1)

  00a36	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  00a3b	8b c0		 mov	 eax, eax
  00a3d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00a43	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00a4c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00a50	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00a55	48 8b d0	 mov	 rdx, rax
  00a58	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00a5d	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00a62	83 f8 ff	 cmp	 eax, -1
  00a65	75 05		 jne	 SHORT $LN105@ast2obj_ex

; 2829 :             goto failed;

  00a67	e9 aa 0e 00 00	 jmp	 $failed$23905
$LN105@ast2obj_ex:

; 2830 :         Py_DECREF(value);

  00a6c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00a71	e8 00 00 00 00	 call	 _Py_DecRef

; 2831 :         break;

  00a76	e9 e1 0d 00 00	 jmp	 $LN169@ast2obj_ex
$LN104@ast2obj_ex:

; 2832 :     case GeneratorExp_kind:
; 2833 :         result = PyType_GenericNew(GeneratorExp_type, NULL, NULL);

  00a7b	45 33 c0	 xor	 r8d, r8d
  00a7e	33 d2		 xor	 edx, edx
  00a80	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GeneratorExp_type
  00a87	e8 00 00 00 00	 call	 PyType_GenericNew
  00a8c	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2834 :         if (!result) goto failed;

  00a91	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00a97	75 05		 jne	 SHORT $LN103@ast2obj_ex
  00a99	e9 78 0e 00 00	 jmp	 $failed$23905
$LN103@ast2obj_ex:

; 2835 :         value = ast2obj_expr(o->v.GeneratorExp.elt);

  00a9e	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00aa3	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00aa7	e8 00 00 00 00	 call	 ast2obj_expr
  00aac	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2836 :         if (!value) goto failed;

  00ab1	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00ab7	75 05		 jne	 SHORT $LN102@ast2obj_ex
  00ab9	e9 58 0e 00 00	 jmp	 $failed$23905
$LN102@ast2obj_ex:

; 2837 :         if (_PyObject_SetAttrId(result, &PyId_elt, value) == -1)

  00abe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elt
  00ac3	8b c0		 mov	 eax, eax
  00ac5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00acb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00ad4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00ad8	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00add	48 8b d0	 mov	 rdx, rax
  00ae0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00ae5	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00aea	83 f8 ff	 cmp	 eax, -1
  00aed	75 05		 jne	 SHORT $LN101@ast2obj_ex

; 2838 :             goto failed;

  00aef	e9 22 0e 00 00	 jmp	 $failed$23905
$LN101@ast2obj_ex:

; 2839 :         Py_DECREF(value);

  00af4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00af9	e8 00 00 00 00	 call	 _Py_DecRef

; 2840 :         value = ast2obj_list(o->v.GeneratorExp.generators,
; 2841 :                              ast2obj_comprehension);

  00afe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_comprehension
  00b05	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00b0a	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00b0e	e8 00 00 00 00	 call	 ast2obj_list
  00b13	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2842 :         if (!value) goto failed;

  00b18	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00b1e	75 05		 jne	 SHORT $LN100@ast2obj_ex
  00b20	e9 f1 0d 00 00	 jmp	 $failed$23905
$LN100@ast2obj_ex:

; 2843 :         if (_PyObject_SetAttrId(result, &PyId_generators, value) == -1)

  00b25	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  00b2a	8b c0		 mov	 eax, eax
  00b2c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00b32	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00b3b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00b3f	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00b44	48 8b d0	 mov	 rdx, rax
  00b47	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00b4c	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00b51	83 f8 ff	 cmp	 eax, -1
  00b54	75 05		 jne	 SHORT $LN99@ast2obj_ex

; 2844 :             goto failed;

  00b56	e9 bb 0d 00 00	 jmp	 $failed$23905
$LN99@ast2obj_ex:

; 2845 :         Py_DECREF(value);

  00b5b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00b60	e8 00 00 00 00	 call	 _Py_DecRef

; 2846 :         break;

  00b65	e9 f2 0c 00 00	 jmp	 $LN169@ast2obj_ex
$LN98@ast2obj_ex:

; 2847 :     case Yield_kind:
; 2848 :         result = PyType_GenericNew(Yield_type, NULL, NULL);

  00b6a	45 33 c0	 xor	 r8d, r8d
  00b6d	33 d2		 xor	 edx, edx
  00b6f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Yield_type
  00b76	e8 00 00 00 00	 call	 PyType_GenericNew
  00b7b	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2849 :         if (!result) goto failed;

  00b80	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00b86	75 05		 jne	 SHORT $LN97@ast2obj_ex
  00b88	e9 89 0d 00 00	 jmp	 $failed$23905
$LN97@ast2obj_ex:

; 2850 :         value = ast2obj_expr(o->v.Yield.value);

  00b8d	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00b92	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00b96	e8 00 00 00 00	 call	 ast2obj_expr
  00b9b	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2851 :         if (!value) goto failed;

  00ba0	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00ba6	75 05		 jne	 SHORT $LN96@ast2obj_ex
  00ba8	e9 69 0d 00 00	 jmp	 $failed$23905
$LN96@ast2obj_ex:

; 2852 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  00bad	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  00bb2	8b c0		 mov	 eax, eax
  00bb4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00bba	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00bc3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00bc7	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00bcc	48 8b d0	 mov	 rdx, rax
  00bcf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00bd4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00bd9	83 f8 ff	 cmp	 eax, -1
  00bdc	75 05		 jne	 SHORT $LN95@ast2obj_ex

; 2853 :             goto failed;

  00bde	e9 33 0d 00 00	 jmp	 $failed$23905
$LN95@ast2obj_ex:

; 2854 :         Py_DECREF(value);

  00be3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00be8	e8 00 00 00 00	 call	 _Py_DecRef

; 2855 :         break;

  00bed	e9 6a 0c 00 00	 jmp	 $LN169@ast2obj_ex
$LN94@ast2obj_ex:

; 2856 :     case YieldFrom_kind:
; 2857 :         result = PyType_GenericNew(YieldFrom_type, NULL, NULL);

  00bf2	45 33 c0	 xor	 r8d, r8d
  00bf5	33 d2		 xor	 edx, edx
  00bf7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR YieldFrom_type
  00bfe	e8 00 00 00 00	 call	 PyType_GenericNew
  00c03	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2858 :         if (!result) goto failed;

  00c08	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00c0e	75 05		 jne	 SHORT $LN93@ast2obj_ex
  00c10	e9 01 0d 00 00	 jmp	 $failed$23905
$LN93@ast2obj_ex:

; 2859 :         value = ast2obj_expr(o->v.YieldFrom.value);

  00c15	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00c1a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00c1e	e8 00 00 00 00	 call	 ast2obj_expr
  00c23	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2860 :         if (!value) goto failed;

  00c28	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00c2e	75 05		 jne	 SHORT $LN92@ast2obj_ex
  00c30	e9 e1 0c 00 00	 jmp	 $failed$23905
$LN92@ast2obj_ex:

; 2861 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  00c35	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  00c3a	8b c0		 mov	 eax, eax
  00c3c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00c42	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00c4b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00c4f	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00c54	48 8b d0	 mov	 rdx, rax
  00c57	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00c5c	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00c61	83 f8 ff	 cmp	 eax, -1
  00c64	75 05		 jne	 SHORT $LN91@ast2obj_ex

; 2862 :             goto failed;

  00c66	e9 ab 0c 00 00	 jmp	 $failed$23905
$LN91@ast2obj_ex:

; 2863 :         Py_DECREF(value);

  00c6b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00c70	e8 00 00 00 00	 call	 _Py_DecRef

; 2864 :         break;

  00c75	e9 e2 0b 00 00	 jmp	 $LN169@ast2obj_ex
$LN90@ast2obj_ex:

; 2865 :     case Compare_kind:
; 2866 :         result = PyType_GenericNew(Compare_type, NULL, NULL);

  00c7a	45 33 c0	 xor	 r8d, r8d
  00c7d	33 d2		 xor	 edx, edx
  00c7f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Compare_type
  00c86	e8 00 00 00 00	 call	 PyType_GenericNew
  00c8b	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2867 :         if (!result) goto failed;

  00c90	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00c96	75 05		 jne	 SHORT $LN89@ast2obj_ex
  00c98	e9 79 0c 00 00	 jmp	 $failed$23905
$LN89@ast2obj_ex:

; 2868 :         value = ast2obj_expr(o->v.Compare.left);

  00c9d	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00ca2	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00ca6	e8 00 00 00 00	 call	 ast2obj_expr
  00cab	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2869 :         if (!value) goto failed;

  00cb0	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00cb6	75 05		 jne	 SHORT $LN88@ast2obj_ex
  00cb8	e9 59 0c 00 00	 jmp	 $failed$23905
$LN88@ast2obj_ex:

; 2870 :         if (_PyObject_SetAttrId(result, &PyId_left, value) == -1)

  00cbd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_left
  00cc2	8b c0		 mov	 eax, eax
  00cc4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00cca	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00cd3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00cd7	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00cdc	48 8b d0	 mov	 rdx, rax
  00cdf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00ce4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00ce9	83 f8 ff	 cmp	 eax, -1
  00cec	75 05		 jne	 SHORT $LN87@ast2obj_ex

; 2871 :             goto failed;

  00cee	e9 23 0c 00 00	 jmp	 $failed$23905
$LN87@ast2obj_ex:

; 2872 :         Py_DECREF(value);

  00cf3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00cf8	e8 00 00 00 00	 call	 _Py_DecRef

; 2873 :         {
; 2874 :             Py_ssize_t i, n = asdl_seq_LEN(o->v.Compare.ops);

  00cfd	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00d02	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00d07	75 0b		 jne	 SHORT $LN174@ast2obj_ex
  00d09	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv613[rsp], 0
  00d12	eb 11		 jmp	 SHORT $LN175@ast2obj_ex
$LN174@ast2obj_ex:
  00d14	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00d19	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00d1d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d20	48 89 44 24 50	 mov	 QWORD PTR tv613[rsp], rax
$LN175@ast2obj_ex:
  00d25	48 8b 44 24 50	 mov	 rax, QWORD PTR tv613[rsp]
  00d2a	48 89 44 24 38	 mov	 QWORD PTR n$24040[rsp], rax

; 2875 :             value = PyList_New(n);

  00d2f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR n$24040[rsp]
  00d34	e8 00 00 00 00	 call	 PyList_New
  00d39	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2876 :             if (!value) goto failed;

  00d3e	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00d44	75 05		 jne	 SHORT $LN86@ast2obj_ex
  00d46	e9 cb 0b 00 00	 jmp	 $failed$23905
$LN86@ast2obj_ex:

; 2877 :             for(i = 0; i < n; i++)

  00d4b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$24039[rsp], 0
  00d54	eb 0d		 jmp	 SHORT $LN85@ast2obj_ex
$LN84@ast2obj_ex:
  00d56	48 8b 44 24 40	 mov	 rax, QWORD PTR i$24039[rsp]
  00d5b	48 ff c0	 inc	 rax
  00d5e	48 89 44 24 40	 mov	 QWORD PTR i$24039[rsp], rax
$LN85@ast2obj_ex:
  00d63	48 8b 44 24 38	 mov	 rax, QWORD PTR n$24040[rsp]
  00d68	48 39 44 24 40	 cmp	 QWORD PTR i$24039[rsp], rax
  00d6d	7d 2b		 jge	 SHORT $LN83@ast2obj_ex

; 2878 :                 PyList_SET_ITEM(value, i, ast2obj_cmpop((cmpop_ty)asdl_seq_GET(o->v.Compare.ops, i)));

  00d6f	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00d74	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00d78	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$24039[rsp]
  00d7d	8b 4c 88 08	 mov	 ecx, DWORD PTR [rax+rcx*4+8]
  00d81	e8 00 00 00 00	 call	 ast2obj_cmpop
  00d86	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00d8b	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00d8f	48 8b 54 24 40	 mov	 rdx, QWORD PTR i$24039[rsp]
  00d94	48 89 04 d1	 mov	 QWORD PTR [rcx+rdx*8], rax
  00d98	eb bc		 jmp	 SHORT $LN84@ast2obj_ex
$LN83@ast2obj_ex:

; 2879 :         }
; 2880 :         if (!value) goto failed;

  00d9a	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00da0	75 05		 jne	 SHORT $LN82@ast2obj_ex
  00da2	e9 6f 0b 00 00	 jmp	 $failed$23905
$LN82@ast2obj_ex:

; 2881 :         if (_PyObject_SetAttrId(result, &PyId_ops, value) == -1)

  00da7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ops
  00dac	8b c0		 mov	 eax, eax
  00dae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00db4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00dbd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00dc1	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00dc6	48 8b d0	 mov	 rdx, rax
  00dc9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00dce	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00dd3	83 f8 ff	 cmp	 eax, -1
  00dd6	75 05		 jne	 SHORT $LN81@ast2obj_ex

; 2882 :             goto failed;

  00dd8	e9 39 0b 00 00	 jmp	 $failed$23905
$LN81@ast2obj_ex:

; 2883 :         Py_DECREF(value);

  00ddd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00de2	e8 00 00 00 00	 call	 _Py_DecRef

; 2884 :         value = ast2obj_list(o->v.Compare.comparators, ast2obj_expr);

  00de7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00dee	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00df3	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00df7	e8 00 00 00 00	 call	 ast2obj_list
  00dfc	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2885 :         if (!value) goto failed;

  00e01	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00e07	75 05		 jne	 SHORT $LN80@ast2obj_ex
  00e09	e9 08 0b 00 00	 jmp	 $failed$23905
$LN80@ast2obj_ex:

; 2886 :         if (_PyObject_SetAttrId(result, &PyId_comparators, value) == -1)

  00e0e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_comparators
  00e13	8b c0		 mov	 eax, eax
  00e15	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00e1b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00e24	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00e28	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00e2d	48 8b d0	 mov	 rdx, rax
  00e30	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00e35	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00e3a	83 f8 ff	 cmp	 eax, -1
  00e3d	75 05		 jne	 SHORT $LN79@ast2obj_ex

; 2887 :             goto failed;

  00e3f	e9 d2 0a 00 00	 jmp	 $failed$23905
$LN79@ast2obj_ex:

; 2888 :         Py_DECREF(value);

  00e44	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00e49	e8 00 00 00 00	 call	 _Py_DecRef

; 2889 :         break;

  00e4e	e9 09 0a 00 00	 jmp	 $LN169@ast2obj_ex
$LN78@ast2obj_ex:

; 2890 :     case Call_kind:
; 2891 :         result = PyType_GenericNew(Call_type, NULL, NULL);

  00e53	45 33 c0	 xor	 r8d, r8d
  00e56	33 d2		 xor	 edx, edx
  00e58	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Call_type
  00e5f	e8 00 00 00 00	 call	 PyType_GenericNew
  00e64	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2892 :         if (!result) goto failed;

  00e69	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00e6f	75 05		 jne	 SHORT $LN77@ast2obj_ex
  00e71	e9 a0 0a 00 00	 jmp	 $failed$23905
$LN77@ast2obj_ex:

; 2893 :         value = ast2obj_expr(o->v.Call.func);

  00e76	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00e7b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00e7f	e8 00 00 00 00	 call	 ast2obj_expr
  00e84	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2894 :         if (!value) goto failed;

  00e89	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00e8f	75 05		 jne	 SHORT $LN76@ast2obj_ex
  00e91	e9 80 0a 00 00	 jmp	 $failed$23905
$LN76@ast2obj_ex:

; 2895 :         if (_PyObject_SetAttrId(result, &PyId_func, value) == -1)

  00e96	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_func
  00e9b	8b c0		 mov	 eax, eax
  00e9d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00ea3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00eac	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00eb0	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00eb5	48 8b d0	 mov	 rdx, rax
  00eb8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00ebd	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00ec2	83 f8 ff	 cmp	 eax, -1
  00ec5	75 05		 jne	 SHORT $LN75@ast2obj_ex

; 2896 :             goto failed;

  00ec7	e9 4a 0a 00 00	 jmp	 $failed$23905
$LN75@ast2obj_ex:

; 2897 :         Py_DECREF(value);

  00ecc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00ed1	e8 00 00 00 00	 call	 _Py_DecRef

; 2898 :         value = ast2obj_list(o->v.Call.args, ast2obj_expr);

  00ed6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00edd	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00ee2	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00ee6	e8 00 00 00 00	 call	 ast2obj_list
  00eeb	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2899 :         if (!value) goto failed;

  00ef0	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00ef6	75 05		 jne	 SHORT $LN74@ast2obj_ex
  00ef8	e9 19 0a 00 00	 jmp	 $failed$23905
$LN74@ast2obj_ex:

; 2900 :         if (_PyObject_SetAttrId(result, &PyId_args, value) == -1)

  00efd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  00f02	8b c0		 mov	 eax, eax
  00f04	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00f0a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00f13	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00f17	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00f1c	48 8b d0	 mov	 rdx, rax
  00f1f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00f24	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00f29	83 f8 ff	 cmp	 eax, -1
  00f2c	75 05		 jne	 SHORT $LN73@ast2obj_ex

; 2901 :             goto failed;

  00f2e	e9 e3 09 00 00	 jmp	 $failed$23905
$LN73@ast2obj_ex:

; 2902 :         Py_DECREF(value);

  00f33	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00f38	e8 00 00 00 00	 call	 _Py_DecRef

; 2903 :         value = ast2obj_list(o->v.Call.keywords, ast2obj_keyword);

  00f3d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_keyword
  00f44	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00f49	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00f4d	e8 00 00 00 00	 call	 ast2obj_list
  00f52	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2904 :         if (!value) goto failed;

  00f57	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00f5d	75 05		 jne	 SHORT $LN72@ast2obj_ex
  00f5f	e9 b2 09 00 00	 jmp	 $failed$23905
$LN72@ast2obj_ex:

; 2905 :         if (_PyObject_SetAttrId(result, &PyId_keywords, value) == -1)

  00f64	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_keywords
  00f69	8b c0		 mov	 eax, eax
  00f6b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00f71	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00f7a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00f7e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00f83	48 8b d0	 mov	 rdx, rax
  00f86	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00f8b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00f90	83 f8 ff	 cmp	 eax, -1
  00f93	75 05		 jne	 SHORT $LN71@ast2obj_ex

; 2906 :             goto failed;

  00f95	e9 7c 09 00 00	 jmp	 $failed$23905
$LN71@ast2obj_ex:

; 2907 :         Py_DECREF(value);

  00f9a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00f9f	e8 00 00 00 00	 call	 _Py_DecRef

; 2908 :         value = ast2obj_expr(o->v.Call.starargs);

  00fa4	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00fa9	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00fad	e8 00 00 00 00	 call	 ast2obj_expr
  00fb2	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2909 :         if (!value) goto failed;

  00fb7	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00fbd	75 05		 jne	 SHORT $LN70@ast2obj_ex
  00fbf	e9 52 09 00 00	 jmp	 $failed$23905
$LN70@ast2obj_ex:

; 2910 :         if (_PyObject_SetAttrId(result, &PyId_starargs, value) == -1)

  00fc4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_starargs
  00fc9	8b c0		 mov	 eax, eax
  00fcb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00fd1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00fda	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00fde	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00fe3	48 8b d0	 mov	 rdx, rax
  00fe6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00feb	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00ff0	83 f8 ff	 cmp	 eax, -1
  00ff3	75 05		 jne	 SHORT $LN69@ast2obj_ex

; 2911 :             goto failed;

  00ff5	e9 1c 09 00 00	 jmp	 $failed$23905
$LN69@ast2obj_ex:

; 2912 :         Py_DECREF(value);

  00ffa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00fff	e8 00 00 00 00	 call	 _Py_DecRef

; 2913 :         value = ast2obj_expr(o->v.Call.kwargs);

  01004	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01009	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  0100d	e8 00 00 00 00	 call	 ast2obj_expr
  01012	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2914 :         if (!value) goto failed;

  01017	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0101d	75 05		 jne	 SHORT $LN68@ast2obj_ex
  0101f	e9 f2 08 00 00	 jmp	 $failed$23905
$LN68@ast2obj_ex:

; 2915 :         if (_PyObject_SetAttrId(result, &PyId_kwargs, value) == -1)

  01024	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwargs
  01029	8b c0		 mov	 eax, eax
  0102b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01031	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0103a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0103e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01043	48 8b d0	 mov	 rdx, rax
  01046	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0104b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01050	83 f8 ff	 cmp	 eax, -1
  01053	75 05		 jne	 SHORT $LN67@ast2obj_ex

; 2916 :             goto failed;

  01055	e9 bc 08 00 00	 jmp	 $failed$23905
$LN67@ast2obj_ex:

; 2917 :         Py_DECREF(value);

  0105a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0105f	e8 00 00 00 00	 call	 _Py_DecRef

; 2918 :         break;

  01064	e9 f3 07 00 00	 jmp	 $LN169@ast2obj_ex
$LN66@ast2obj_ex:

; 2919 :     case Num_kind:
; 2920 :         result = PyType_GenericNew(Num_type, NULL, NULL);

  01069	45 33 c0	 xor	 r8d, r8d
  0106c	33 d2		 xor	 edx, edx
  0106e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Num_type
  01075	e8 00 00 00 00	 call	 PyType_GenericNew
  0107a	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2921 :         if (!result) goto failed;

  0107f	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  01085	75 05		 jne	 SHORT $LN65@ast2obj_ex
  01087	e9 8a 08 00 00	 jmp	 $failed$23905
$LN65@ast2obj_ex:

; 2922 :         value = ast2obj_object(o->v.Num.n);

  0108c	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01091	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  01095	e8 00 00 00 00	 call	 ast2obj_object
  0109a	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2923 :         if (!value) goto failed;

  0109f	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  010a5	75 05		 jne	 SHORT $LN64@ast2obj_ex
  010a7	e9 6a 08 00 00	 jmp	 $failed$23905
$LN64@ast2obj_ex:

; 2924 :         if (_PyObject_SetAttrId(result, &PyId_n, value) == -1)

  010ac	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_n
  010b1	8b c0		 mov	 eax, eax
  010b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  010b9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  010c2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  010c6	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  010cb	48 8b d0	 mov	 rdx, rax
  010ce	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  010d3	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  010d8	83 f8 ff	 cmp	 eax, -1
  010db	75 05		 jne	 SHORT $LN63@ast2obj_ex

; 2925 :             goto failed;

  010dd	e9 34 08 00 00	 jmp	 $failed$23905
$LN63@ast2obj_ex:

; 2926 :         Py_DECREF(value);

  010e2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  010e7	e8 00 00 00 00	 call	 _Py_DecRef

; 2927 :         break;

  010ec	e9 6b 07 00 00	 jmp	 $LN169@ast2obj_ex
$LN62@ast2obj_ex:

; 2928 :     case Str_kind:
; 2929 :         result = PyType_GenericNew(Str_type, NULL, NULL);

  010f1	45 33 c0	 xor	 r8d, r8d
  010f4	33 d2		 xor	 edx, edx
  010f6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Str_type
  010fd	e8 00 00 00 00	 call	 PyType_GenericNew
  01102	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2930 :         if (!result) goto failed;

  01107	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0110d	75 05		 jne	 SHORT $LN61@ast2obj_ex
  0110f	e9 02 08 00 00	 jmp	 $failed$23905
$LN61@ast2obj_ex:

; 2931 :         value = ast2obj_string(o->v.Str.s);

  01114	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01119	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0111d	e8 00 00 00 00	 call	 ast2obj_object
  01122	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2932 :         if (!value) goto failed;

  01127	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0112d	75 05		 jne	 SHORT $LN60@ast2obj_ex
  0112f	e9 e2 07 00 00	 jmp	 $failed$23905
$LN60@ast2obj_ex:

; 2933 :         if (_PyObject_SetAttrId(result, &PyId_s, value) == -1)

  01134	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_s
  01139	8b c0		 mov	 eax, eax
  0113b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01141	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0114a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0114e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01153	48 8b d0	 mov	 rdx, rax
  01156	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0115b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01160	83 f8 ff	 cmp	 eax, -1
  01163	75 05		 jne	 SHORT $LN59@ast2obj_ex

; 2934 :             goto failed;

  01165	e9 ac 07 00 00	 jmp	 $failed$23905
$LN59@ast2obj_ex:

; 2935 :         Py_DECREF(value);

  0116a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0116f	e8 00 00 00 00	 call	 _Py_DecRef

; 2936 :         break;

  01174	e9 e3 06 00 00	 jmp	 $LN169@ast2obj_ex
$LN58@ast2obj_ex:

; 2937 :     case Bytes_kind:
; 2938 :         result = PyType_GenericNew(Bytes_type, NULL, NULL);

  01179	45 33 c0	 xor	 r8d, r8d
  0117c	33 d2		 xor	 edx, edx
  0117e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Bytes_type
  01185	e8 00 00 00 00	 call	 PyType_GenericNew
  0118a	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2939 :         if (!result) goto failed;

  0118f	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  01195	75 05		 jne	 SHORT $LN57@ast2obj_ex
  01197	e9 7a 07 00 00	 jmp	 $failed$23905
$LN57@ast2obj_ex:

; 2940 :         value = ast2obj_bytes(o->v.Bytes.s);

  0119c	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  011a1	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  011a5	e8 00 00 00 00	 call	 ast2obj_object
  011aa	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2941 :         if (!value) goto failed;

  011af	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  011b5	75 05		 jne	 SHORT $LN56@ast2obj_ex
  011b7	e9 5a 07 00 00	 jmp	 $failed$23905
$LN56@ast2obj_ex:

; 2942 :         if (_PyObject_SetAttrId(result, &PyId_s, value) == -1)

  011bc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_s
  011c1	8b c0		 mov	 eax, eax
  011c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  011c9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  011d2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  011d6	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  011db	48 8b d0	 mov	 rdx, rax
  011de	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  011e3	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  011e8	83 f8 ff	 cmp	 eax, -1
  011eb	75 05		 jne	 SHORT $LN55@ast2obj_ex

; 2943 :             goto failed;

  011ed	e9 24 07 00 00	 jmp	 $failed$23905
$LN55@ast2obj_ex:

; 2944 :         Py_DECREF(value);

  011f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  011f7	e8 00 00 00 00	 call	 _Py_DecRef

; 2945 :         break;

  011fc	e9 5b 06 00 00	 jmp	 $LN169@ast2obj_ex
$LN54@ast2obj_ex:

; 2946 :     case Ellipsis_kind:
; 2947 :         result = PyType_GenericNew(Ellipsis_type, NULL, NULL);

  01201	45 33 c0	 xor	 r8d, r8d
  01204	33 d2		 xor	 edx, edx
  01206	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Ellipsis_type
  0120d	e8 00 00 00 00	 call	 PyType_GenericNew
  01212	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2948 :         if (!result) goto failed;

  01217	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0121d	75 05		 jne	 SHORT $LN53@ast2obj_ex
  0121f	e9 f2 06 00 00	 jmp	 $failed$23905
$LN53@ast2obj_ex:

; 2949 :         break;

  01224	e9 33 06 00 00	 jmp	 $LN169@ast2obj_ex
$LN52@ast2obj_ex:

; 2950 :     case Attribute_kind:
; 2951 :         result = PyType_GenericNew(Attribute_type, NULL, NULL);

  01229	45 33 c0	 xor	 r8d, r8d
  0122c	33 d2		 xor	 edx, edx
  0122e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Attribute_type
  01235	e8 00 00 00 00	 call	 PyType_GenericNew
  0123a	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2952 :         if (!result) goto failed;

  0123f	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  01245	75 05		 jne	 SHORT $LN51@ast2obj_ex
  01247	e9 ca 06 00 00	 jmp	 $failed$23905
$LN51@ast2obj_ex:

; 2953 :         value = ast2obj_expr(o->v.Attribute.value);

  0124c	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01251	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  01255	e8 00 00 00 00	 call	 ast2obj_expr
  0125a	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2954 :         if (!value) goto failed;

  0125f	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01265	75 05		 jne	 SHORT $LN50@ast2obj_ex
  01267	e9 aa 06 00 00	 jmp	 $failed$23905
$LN50@ast2obj_ex:

; 2955 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  0126c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  01271	8b c0		 mov	 eax, eax
  01273	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01279	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01282	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01286	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0128b	48 8b d0	 mov	 rdx, rax
  0128e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01293	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01298	83 f8 ff	 cmp	 eax, -1
  0129b	75 05		 jne	 SHORT $LN49@ast2obj_ex

; 2956 :             goto failed;

  0129d	e9 74 06 00 00	 jmp	 $failed$23905
$LN49@ast2obj_ex:

; 2957 :         Py_DECREF(value);

  012a2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  012a7	e8 00 00 00 00	 call	 _Py_DecRef

; 2958 :         value = ast2obj_identifier(o->v.Attribute.attr);

  012ac	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  012b1	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  012b5	e8 00 00 00 00	 call	 ast2obj_object
  012ba	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2959 :         if (!value) goto failed;

  012bf	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  012c5	75 05		 jne	 SHORT $LN48@ast2obj_ex
  012c7	e9 4a 06 00 00	 jmp	 $failed$23905
$LN48@ast2obj_ex:

; 2960 :         if (_PyObject_SetAttrId(result, &PyId_attr, value) == -1)

  012cc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_attr
  012d1	8b c0		 mov	 eax, eax
  012d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  012d9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  012e2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  012e6	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  012eb	48 8b d0	 mov	 rdx, rax
  012ee	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  012f3	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  012f8	83 f8 ff	 cmp	 eax, -1
  012fb	75 05		 jne	 SHORT $LN47@ast2obj_ex

; 2961 :             goto failed;

  012fd	e9 14 06 00 00	 jmp	 $failed$23905
$LN47@ast2obj_ex:

; 2962 :         Py_DECREF(value);

  01302	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01307	e8 00 00 00 00	 call	 _Py_DecRef

; 2963 :         value = ast2obj_expr_context(o->v.Attribute.ctx);

  0130c	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01311	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  01314	e8 00 00 00 00	 call	 ast2obj_expr_context
  01319	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2964 :         if (!value) goto failed;

  0131e	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01324	75 05		 jne	 SHORT $LN46@ast2obj_ex
  01326	e9 eb 05 00 00	 jmp	 $failed$23905
$LN46@ast2obj_ex:

; 2965 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)

  0132b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  01330	8b c0		 mov	 eax, eax
  01332	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01338	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01341	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01345	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0134a	48 8b d0	 mov	 rdx, rax
  0134d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01352	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01357	83 f8 ff	 cmp	 eax, -1
  0135a	75 05		 jne	 SHORT $LN45@ast2obj_ex

; 2966 :             goto failed;

  0135c	e9 b5 05 00 00	 jmp	 $failed$23905
$LN45@ast2obj_ex:

; 2967 :         Py_DECREF(value);

  01361	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01366	e8 00 00 00 00	 call	 _Py_DecRef

; 2968 :         break;

  0136b	e9 ec 04 00 00	 jmp	 $LN169@ast2obj_ex
$LN44@ast2obj_ex:

; 2969 :     case Subscript_kind:
; 2970 :         result = PyType_GenericNew(Subscript_type, NULL, NULL);

  01370	45 33 c0	 xor	 r8d, r8d
  01373	33 d2		 xor	 edx, edx
  01375	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Subscript_type
  0137c	e8 00 00 00 00	 call	 PyType_GenericNew
  01381	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2971 :         if (!result) goto failed;

  01386	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0138c	75 05		 jne	 SHORT $LN43@ast2obj_ex
  0138e	e9 83 05 00 00	 jmp	 $failed$23905
$LN43@ast2obj_ex:

; 2972 :         value = ast2obj_expr(o->v.Subscript.value);

  01393	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01398	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0139c	e8 00 00 00 00	 call	 ast2obj_expr
  013a1	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2973 :         if (!value) goto failed;

  013a6	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  013ac	75 05		 jne	 SHORT $LN42@ast2obj_ex
  013ae	e9 63 05 00 00	 jmp	 $failed$23905
$LN42@ast2obj_ex:

; 2974 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  013b3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  013b8	8b c0		 mov	 eax, eax
  013ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  013c0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  013c9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  013cd	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  013d2	48 8b d0	 mov	 rdx, rax
  013d5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  013da	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  013df	83 f8 ff	 cmp	 eax, -1
  013e2	75 05		 jne	 SHORT $LN41@ast2obj_ex

; 2975 :             goto failed;

  013e4	e9 2d 05 00 00	 jmp	 $failed$23905
$LN41@ast2obj_ex:

; 2976 :         Py_DECREF(value);

  013e9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  013ee	e8 00 00 00 00	 call	 _Py_DecRef

; 2977 :         value = ast2obj_slice(o->v.Subscript.slice);

  013f3	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  013f8	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  013fc	e8 00 00 00 00	 call	 ast2obj_slice
  01401	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2978 :         if (!value) goto failed;

  01406	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0140c	75 05		 jne	 SHORT $LN40@ast2obj_ex
  0140e	e9 03 05 00 00	 jmp	 $failed$23905
$LN40@ast2obj_ex:

; 2979 :         if (_PyObject_SetAttrId(result, &PyId_slice, value) == -1)

  01413	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_slice
  01418	8b c0		 mov	 eax, eax
  0141a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01420	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01429	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0142d	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01432	48 8b d0	 mov	 rdx, rax
  01435	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0143a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0143f	83 f8 ff	 cmp	 eax, -1
  01442	75 05		 jne	 SHORT $LN39@ast2obj_ex

; 2980 :             goto failed;

  01444	e9 cd 04 00 00	 jmp	 $failed$23905
$LN39@ast2obj_ex:

; 2981 :         Py_DECREF(value);

  01449	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0144e	e8 00 00 00 00	 call	 _Py_DecRef

; 2982 :         value = ast2obj_expr_context(o->v.Subscript.ctx);

  01453	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01458	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  0145b	e8 00 00 00 00	 call	 ast2obj_expr_context
  01460	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2983 :         if (!value) goto failed;

  01465	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0146b	75 05		 jne	 SHORT $LN38@ast2obj_ex
  0146d	e9 a4 04 00 00	 jmp	 $failed$23905
$LN38@ast2obj_ex:

; 2984 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)

  01472	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  01477	8b c0		 mov	 eax, eax
  01479	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0147f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01488	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0148c	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01491	48 8b d0	 mov	 rdx, rax
  01494	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01499	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0149e	83 f8 ff	 cmp	 eax, -1
  014a1	75 05		 jne	 SHORT $LN37@ast2obj_ex

; 2985 :             goto failed;

  014a3	e9 6e 04 00 00	 jmp	 $failed$23905
$LN37@ast2obj_ex:

; 2986 :         Py_DECREF(value);

  014a8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  014ad	e8 00 00 00 00	 call	 _Py_DecRef

; 2987 :         break;

  014b2	e9 a5 03 00 00	 jmp	 $LN169@ast2obj_ex
$LN36@ast2obj_ex:

; 2988 :     case Starred_kind:
; 2989 :         result = PyType_GenericNew(Starred_type, NULL, NULL);

  014b7	45 33 c0	 xor	 r8d, r8d
  014ba	33 d2		 xor	 edx, edx
  014bc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Starred_type
  014c3	e8 00 00 00 00	 call	 PyType_GenericNew
  014c8	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 2990 :         if (!result) goto failed;

  014cd	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  014d3	75 05		 jne	 SHORT $LN35@ast2obj_ex
  014d5	e9 3c 04 00 00	 jmp	 $failed$23905
$LN35@ast2obj_ex:

; 2991 :         value = ast2obj_expr(o->v.Starred.value);

  014da	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  014df	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  014e3	e8 00 00 00 00	 call	 ast2obj_expr
  014e8	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2992 :         if (!value) goto failed;

  014ed	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  014f3	75 05		 jne	 SHORT $LN34@ast2obj_ex
  014f5	e9 1c 04 00 00	 jmp	 $failed$23905
$LN34@ast2obj_ex:

; 2993 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  014fa	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  014ff	8b c0		 mov	 eax, eax
  01501	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01507	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01510	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01514	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01519	48 8b d0	 mov	 rdx, rax
  0151c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01521	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01526	83 f8 ff	 cmp	 eax, -1
  01529	75 05		 jne	 SHORT $LN33@ast2obj_ex

; 2994 :             goto failed;

  0152b	e9 e6 03 00 00	 jmp	 $failed$23905
$LN33@ast2obj_ex:

; 2995 :         Py_DECREF(value);

  01530	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01535	e8 00 00 00 00	 call	 _Py_DecRef

; 2996 :         value = ast2obj_expr_context(o->v.Starred.ctx);

  0153a	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0153f	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  01542	e8 00 00 00 00	 call	 ast2obj_expr_context
  01547	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 2997 :         if (!value) goto failed;

  0154c	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01552	75 05		 jne	 SHORT $LN32@ast2obj_ex
  01554	e9 bd 03 00 00	 jmp	 $failed$23905
$LN32@ast2obj_ex:

; 2998 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)

  01559	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  0155e	8b c0		 mov	 eax, eax
  01560	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01566	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0156f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01573	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01578	48 8b d0	 mov	 rdx, rax
  0157b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01580	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01585	83 f8 ff	 cmp	 eax, -1
  01588	75 05		 jne	 SHORT $LN31@ast2obj_ex

; 2999 :             goto failed;

  0158a	e9 87 03 00 00	 jmp	 $failed$23905
$LN31@ast2obj_ex:

; 3000 :         Py_DECREF(value);

  0158f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01594	e8 00 00 00 00	 call	 _Py_DecRef

; 3001 :         break;

  01599	e9 be 02 00 00	 jmp	 $LN169@ast2obj_ex
$LN30@ast2obj_ex:

; 3002 :     case Name_kind:
; 3003 :         result = PyType_GenericNew(Name_type, NULL, NULL);

  0159e	45 33 c0	 xor	 r8d, r8d
  015a1	33 d2		 xor	 edx, edx
  015a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Name_type
  015aa	e8 00 00 00 00	 call	 PyType_GenericNew
  015af	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3004 :         if (!result) goto failed;

  015b4	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  015ba	75 05		 jne	 SHORT $LN29@ast2obj_ex
  015bc	e9 55 03 00 00	 jmp	 $failed$23905
$LN29@ast2obj_ex:

; 3005 :         value = ast2obj_identifier(o->v.Name.id);

  015c1	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  015c6	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  015ca	e8 00 00 00 00	 call	 ast2obj_object
  015cf	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3006 :         if (!value) goto failed;

  015d4	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  015da	75 05		 jne	 SHORT $LN28@ast2obj_ex
  015dc	e9 35 03 00 00	 jmp	 $failed$23905
$LN28@ast2obj_ex:

; 3007 :         if (_PyObject_SetAttrId(result, &PyId_id, value) == -1)

  015e1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_id
  015e6	8b c0		 mov	 eax, eax
  015e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  015ee	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  015f7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  015fb	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  01600	48 8b d0	 mov	 rdx, rax
  01603	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01608	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0160d	83 f8 ff	 cmp	 eax, -1
  01610	75 05		 jne	 SHORT $LN27@ast2obj_ex

; 3008 :             goto failed;

  01612	e9 ff 02 00 00	 jmp	 $failed$23905
$LN27@ast2obj_ex:

; 3009 :         Py_DECREF(value);

  01617	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0161c	e8 00 00 00 00	 call	 _Py_DecRef

; 3010 :         value = ast2obj_expr_context(o->v.Name.ctx);

  01621	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01626	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  01629	e8 00 00 00 00	 call	 ast2obj_expr_context
  0162e	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3011 :         if (!value) goto failed;

  01633	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01639	75 05		 jne	 SHORT $LN26@ast2obj_ex
  0163b	e9 d6 02 00 00	 jmp	 $failed$23905
$LN26@ast2obj_ex:

; 3012 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)

  01640	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  01645	8b c0		 mov	 eax, eax
  01647	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0164d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01656	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0165a	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0165f	48 8b d0	 mov	 rdx, rax
  01662	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01667	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0166c	83 f8 ff	 cmp	 eax, -1
  0166f	75 05		 jne	 SHORT $LN25@ast2obj_ex

; 3013 :             goto failed;

  01671	e9 a0 02 00 00	 jmp	 $failed$23905
$LN25@ast2obj_ex:

; 3014 :         Py_DECREF(value);

  01676	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0167b	e8 00 00 00 00	 call	 _Py_DecRef

; 3015 :         break;

  01680	e9 d7 01 00 00	 jmp	 $LN169@ast2obj_ex
$LN24@ast2obj_ex:

; 3016 :     case List_kind:
; 3017 :         result = PyType_GenericNew(List_type, NULL, NULL);

  01685	45 33 c0	 xor	 r8d, r8d
  01688	33 d2		 xor	 edx, edx
  0168a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR List_type
  01691	e8 00 00 00 00	 call	 PyType_GenericNew
  01696	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3018 :         if (!result) goto failed;

  0169b	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  016a1	75 05		 jne	 SHORT $LN23@ast2obj_ex
  016a3	e9 6e 02 00 00	 jmp	 $failed$23905
$LN23@ast2obj_ex:

; 3019 :         value = ast2obj_list(o->v.List.elts, ast2obj_expr);

  016a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  016af	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  016b4	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  016b8	e8 00 00 00 00	 call	 ast2obj_list
  016bd	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3020 :         if (!value) goto failed;

  016c2	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  016c8	75 05		 jne	 SHORT $LN22@ast2obj_ex
  016ca	e9 47 02 00 00	 jmp	 $failed$23905
$LN22@ast2obj_ex:

; 3021 :         if (_PyObject_SetAttrId(result, &PyId_elts, value) == -1)

  016cf	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elts
  016d4	8b c0		 mov	 eax, eax
  016d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  016dc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  016e5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  016e9	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  016ee	48 8b d0	 mov	 rdx, rax
  016f1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  016f6	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  016fb	83 f8 ff	 cmp	 eax, -1
  016fe	75 05		 jne	 SHORT $LN21@ast2obj_ex

; 3022 :             goto failed;

  01700	e9 11 02 00 00	 jmp	 $failed$23905
$LN21@ast2obj_ex:

; 3023 :         Py_DECREF(value);

  01705	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0170a	e8 00 00 00 00	 call	 _Py_DecRef

; 3024 :         value = ast2obj_expr_context(o->v.List.ctx);

  0170f	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01714	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  01717	e8 00 00 00 00	 call	 ast2obj_expr_context
  0171c	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3025 :         if (!value) goto failed;

  01721	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01727	75 05		 jne	 SHORT $LN20@ast2obj_ex
  01729	e9 e8 01 00 00	 jmp	 $failed$23905
$LN20@ast2obj_ex:

; 3026 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)

  0172e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  01733	8b c0		 mov	 eax, eax
  01735	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0173b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01744	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01748	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0174d	48 8b d0	 mov	 rdx, rax
  01750	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01755	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0175a	83 f8 ff	 cmp	 eax, -1
  0175d	75 05		 jne	 SHORT $LN19@ast2obj_ex

; 3027 :             goto failed;

  0175f	e9 b2 01 00 00	 jmp	 $failed$23905
$LN19@ast2obj_ex:

; 3028 :         Py_DECREF(value);

  01764	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01769	e8 00 00 00 00	 call	 _Py_DecRef

; 3029 :         break;

  0176e	e9 e9 00 00 00	 jmp	 $LN169@ast2obj_ex
$LN18@ast2obj_ex:

; 3030 :     case Tuple_kind:
; 3031 :         result = PyType_GenericNew(Tuple_type, NULL, NULL);

  01773	45 33 c0	 xor	 r8d, r8d
  01776	33 d2		 xor	 edx, edx
  01778	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Tuple_type
  0177f	e8 00 00 00 00	 call	 PyType_GenericNew
  01784	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3032 :         if (!result) goto failed;

  01789	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0178f	75 05		 jne	 SHORT $LN17@ast2obj_ex
  01791	e9 80 01 00 00	 jmp	 $failed$23905
$LN17@ast2obj_ex:

; 3033 :         value = ast2obj_list(o->v.Tuple.elts, ast2obj_expr);

  01796	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  0179d	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  017a2	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  017a6	e8 00 00 00 00	 call	 ast2obj_list
  017ab	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3034 :         if (!value) goto failed;

  017b0	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  017b6	75 05		 jne	 SHORT $LN16@ast2obj_ex
  017b8	e9 59 01 00 00	 jmp	 $failed$23905
$LN16@ast2obj_ex:

; 3035 :         if (_PyObject_SetAttrId(result, &PyId_elts, value) == -1)

  017bd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elts
  017c2	8b c0		 mov	 eax, eax
  017c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  017ca	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  017d3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  017d7	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  017dc	48 8b d0	 mov	 rdx, rax
  017df	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  017e4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  017e9	83 f8 ff	 cmp	 eax, -1
  017ec	75 05		 jne	 SHORT $LN15@ast2obj_ex

; 3036 :             goto failed;

  017ee	e9 23 01 00 00	 jmp	 $failed$23905
$LN15@ast2obj_ex:

; 3037 :         Py_DECREF(value);

  017f3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  017f8	e8 00 00 00 00	 call	 _Py_DecRef

; 3038 :         value = ast2obj_expr_context(o->v.Tuple.ctx);

  017fd	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01802	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  01805	e8 00 00 00 00	 call	 ast2obj_expr_context
  0180a	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3039 :         if (!value) goto failed;

  0180f	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01815	75 05		 jne	 SHORT $LN14@ast2obj_ex
  01817	e9 fa 00 00 00	 jmp	 $failed$23905
$LN14@ast2obj_ex:

; 3040 :         if (_PyObject_SetAttrId(result, &PyId_ctx, value) == -1)

  0181c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  01821	8b c0		 mov	 eax, eax
  01823	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01829	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01832	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01836	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0183b	48 8b d0	 mov	 rdx, rax
  0183e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  01843	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  01848	83 f8 ff	 cmp	 eax, -1
  0184b	75 05		 jne	 SHORT $LN13@ast2obj_ex

; 3041 :             goto failed;

  0184d	e9 c4 00 00 00	 jmp	 $failed$23905
$LN13@ast2obj_ex:

; 3042 :         Py_DECREF(value);

  01852	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01857	e8 00 00 00 00	 call	 _Py_DecRef
$LN169@ast2obj_ex:

; 3043 :         break;
; 3044 :     }
; 3045 :     value = ast2obj_int(o->lineno);

  0185c	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  01861	8b 48 30	 mov	 ecx, DWORD PTR [rax+48]
  01864	e8 00 00 00 00	 call	 ast2obj_int
  01869	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3046 :     if (!value) goto failed;

  0186e	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  01874	75 05		 jne	 SHORT $LN12@ast2obj_ex
  01876	e9 9b 00 00 00	 jmp	 $failed$23905
$LN12@ast2obj_ex:

; 3047 :     if (_PyObject_SetAttrId(result, &PyId_lineno, value) < 0)

  0187b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lineno
  01880	8b c0		 mov	 eax, eax
  01882	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01888	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01891	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01895	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0189a	48 8b d0	 mov	 rdx, rax
  0189d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  018a2	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  018a7	85 c0		 test	 eax, eax
  018a9	7d 02		 jge	 SHORT $LN11@ast2obj_ex

; 3048 :         goto failed;

  018ab	eb 69		 jmp	 SHORT $failed$23905
$LN11@ast2obj_ex:

; 3049 :     Py_DECREF(value);

  018ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  018b2	e8 00 00 00 00	 call	 _Py_DecRef

; 3050 :     value = ast2obj_int(o->col_offset);

  018b7	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  018bc	8b 48 34	 mov	 ecx, DWORD PTR [rax+52]
  018bf	e8 00 00 00 00	 call	 ast2obj_int
  018c4	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3051 :     if (!value) goto failed;

  018c9	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  018cf	75 02		 jne	 SHORT $LN10@ast2obj_ex
  018d1	eb 43		 jmp	 SHORT $failed$23905
$LN10@ast2obj_ex:

; 3052 :     if (_PyObject_SetAttrId(result, &PyId_col_offset, value) < 0)

  018d3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_col_offset
  018d8	8b c0		 mov	 eax, eax
  018da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  018e0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  018e9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  018ed	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  018f2	48 8b d0	 mov	 rdx, rax
  018f5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  018fa	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  018ff	85 c0		 test	 eax, eax
  01901	7d 02		 jge	 SHORT $LN9@ast2obj_ex

; 3053 :         goto failed;

  01903	eb 11		 jmp	 SHORT $failed$23905
$LN9@ast2obj_ex:

; 3054 :     Py_DECREF(value);

  01905	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0190a	e8 00 00 00 00	 call	 _Py_DecRef

; 3055 :     return result;

  0190f	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  01914	eb 32		 jmp	 SHORT $LN172@ast2obj_ex
$failed$23905:
$LN8@ast2obj_ex:

; 3056 : failed:
; 3057 :     Py_XDECREF(value);

  01916	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0191c	74 0a		 je	 SHORT $LN5@ast2obj_ex
  0191e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  01923	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ast2obj_ex:
  01928	33 c0		 xor	 eax, eax
  0192a	85 c0		 test	 eax, eax
  0192c	75 e8		 jne	 SHORT $LN8@ast2obj_ex
$LN4@ast2obj_ex:

; 3058 :     Py_XDECREF(result);

  0192e	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  01934	74 0a		 je	 SHORT $LN1@ast2obj_ex
  01936	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0193b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast2obj_ex:
  01940	33 c0		 xor	 eax, eax
  01942	85 c0		 test	 eax, eax
  01944	75 e8		 jne	 SHORT $LN4@ast2obj_ex

; 3059 :     return NULL;

  01946	33 c0		 xor	 eax, eax
$LN172@ast2obj_ex:

; 3060 : }

  01948	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0194c	c3		 ret	 0
  0194d	0f 1f 00	 npad	 3
$LN176@ast2obj_ex:
  01950	00 00 00 00	 DD	 $LN168@ast2obj_ex
  01954	00 00 00 00	 DD	 $LN162@ast2obj_ex
  01958	00 00 00 00	 DD	 $LN154@ast2obj_ex
  0195c	00 00 00 00	 DD	 $LN148@ast2obj_ex
  01960	00 00 00 00	 DD	 $LN142@ast2obj_ex
  01964	00 00 00 00	 DD	 $LN134@ast2obj_ex
  01968	00 00 00 00	 DD	 $LN128@ast2obj_ex
  0196c	00 00 00 00	 DD	 $LN124@ast2obj_ex
  01970	00 00 00 00	 DD	 $LN118@ast2obj_ex
  01974	00 00 00 00	 DD	 $LN112@ast2obj_ex
  01978	00 00 00 00	 DD	 $LN104@ast2obj_ex
  0197c	00 00 00 00	 DD	 $LN98@ast2obj_ex
  01980	00 00 00 00	 DD	 $LN94@ast2obj_ex
  01984	00 00 00 00	 DD	 $LN90@ast2obj_ex
  01988	00 00 00 00	 DD	 $LN78@ast2obj_ex
  0198c	00 00 00 00	 DD	 $LN66@ast2obj_ex
  01990	00 00 00 00	 DD	 $LN62@ast2obj_ex
  01994	00 00 00 00	 DD	 $LN58@ast2obj_ex
  01998	00 00 00 00	 DD	 $LN54@ast2obj_ex
  0199c	00 00 00 00	 DD	 $LN52@ast2obj_ex
  019a0	00 00 00 00	 DD	 $LN44@ast2obj_ex
  019a4	00 00 00 00	 DD	 $LN36@ast2obj_ex
  019a8	00 00 00 00	 DD	 $LN30@ast2obj_ex
  019ac	00 00 00 00	 DD	 $LN24@ast2obj_ex
  019b0	00 00 00 00	 DD	 $LN18@ast2obj_ex
ast2obj_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@MIEHMAD@unknown?5expr_context?5found?$AA@ ; `string'
EXTRN	PyExc_SystemError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_expr_context DD imagerel ast2obj_expr_context
	DD	imagerel ast2obj_expr_context+240
	DD	imagerel $unwind$ast2obj_expr_context
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_expr_context DD 010801H
	DD	06208H
xdata	ENDS
;	COMDAT ??_C@_0BL@MIEHMAD@unknown?5expr_context?5found?$AA@
CONST	SEGMENT
??_C@_0BL@MIEHMAD@unknown?5expr_context?5found?$AA@ DB 'unknown expr_cont'
	DB	'ext found', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ast2obj_expr_context
_TEXT	SEGMENT
tv64 = 32
o$ = 64
ast2obj_expr_context PROC				; COMDAT

; 3063 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3064 :     switch(o) {

  00008	8b 44 24 40	 mov	 eax, DWORD PTR o$[rsp]
  0000c	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00010	8b 44 24 20	 mov	 eax, DWORD PTR tv64[rsp]
  00014	ff c8		 dec	 eax
  00016	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  0001a	83 7c 24 20 05	 cmp	 DWORD PTR tv64[rsp], 5
  0001f	0f 87 96 00 00
	00		 ja	 $LN1@ast2obj_ex@2
  00025	48 63 44 24 20	 movsxd	 rax, DWORD PTR tv64[rsp]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00031	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN12@ast2obj_ex@2[rcx+rax*4]
  00038	48 03 c1	 add	 rax, rcx
  0003b	ff e0		 jmp	 rax
$LN7@ast2obj_ex@2:

; 3065 :         case Load:
; 3066 :             Py_INCREF(Load_singleton);

  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Load_singleton
  00044	e8 00 00 00 00	 call	 _Py_IncRef

; 3067 :             return Load_singleton;

  00049	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Load_singleton
  00050	eb 7e		 jmp	 SHORT $LN10@ast2obj_ex@2
$LN6@ast2obj_ex@2:

; 3068 :         case Store:
; 3069 :             Py_INCREF(Store_singleton);

  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Store_singleton
  00059	e8 00 00 00 00	 call	 _Py_IncRef

; 3070 :             return Store_singleton;

  0005e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Store_singleton
  00065	eb 69		 jmp	 SHORT $LN10@ast2obj_ex@2
$LN5@ast2obj_ex@2:

; 3071 :         case Del:
; 3072 :             Py_INCREF(Del_singleton);

  00067	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Del_singleton
  0006e	e8 00 00 00 00	 call	 _Py_IncRef

; 3073 :             return Del_singleton;

  00073	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Del_singleton
  0007a	eb 54		 jmp	 SHORT $LN10@ast2obj_ex@2
$LN4@ast2obj_ex@2:

; 3074 :         case AugLoad:
; 3075 :             Py_INCREF(AugLoad_singleton);

  0007c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR AugLoad_singleton
  00083	e8 00 00 00 00	 call	 _Py_IncRef

; 3076 :             return AugLoad_singleton;

  00088	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR AugLoad_singleton
  0008f	eb 3f		 jmp	 SHORT $LN10@ast2obj_ex@2
$LN3@ast2obj_ex@2:

; 3077 :         case AugStore:
; 3078 :             Py_INCREF(AugStore_singleton);

  00091	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR AugStore_singleton
  00098	e8 00 00 00 00	 call	 _Py_IncRef

; 3079 :             return AugStore_singleton;

  0009d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR AugStore_singleton
  000a4	eb 2a		 jmp	 SHORT $LN10@ast2obj_ex@2
$LN2@ast2obj_ex@2:

; 3080 :         case Param:
; 3081 :             Py_INCREF(Param_singleton);

  000a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Param_singleton
  000ad	e8 00 00 00 00	 call	 _Py_IncRef

; 3082 :             return Param_singleton;

  000b2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Param_singleton
  000b9	eb 15		 jmp	 SHORT $LN10@ast2obj_ex@2
$LN1@ast2obj_ex@2:

; 3083 :         default:
; 3084 :             /* should never happen, but just in case ... */
; 3085 :             PyErr_Format(PyExc_SystemError, "unknown expr_context found");

  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@MIEHMAD@unknown?5expr_context?5found?$AA@
  000c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  000c9	e8 00 00 00 00	 call	 PyErr_Format

; 3086 :             return NULL;

  000ce	33 c0		 xor	 eax, eax
$LN10@ast2obj_ex@2:

; 3087 :     }
; 3088 : }

  000d0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d4	c3		 ret	 0
  000d5	0f 1f 00	 npad	 3
$LN12@ast2obj_ex@2:
  000d8	00 00 00 00	 DD	 $LN7@ast2obj_ex@2
  000dc	00 00 00 00	 DD	 $LN6@ast2obj_ex@2
  000e0	00 00 00 00	 DD	 $LN5@ast2obj_ex@2
  000e4	00 00 00 00	 DD	 $LN4@ast2obj_ex@2
  000e8	00 00 00 00	 DD	 $LN3@ast2obj_ex@2
  000ec	00 00 00 00	 DD	 $LN2@ast2obj_ex@2
ast2obj_expr_context ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_slice DD imagerel ast2obj_slice
	DD	imagerel ast2obj_slice+766
	DD	imagerel $unwind$ast2obj_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_slice DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_slice
_TEXT	SEGMENT
value$ = 32
result$ = 40
o$ = 48
tv66 = 56
_o$ = 80
ast2obj_slice PROC					; COMDAT

; 3091 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3092 :     slice_ty o = (slice_ty)_o;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR _o$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 3093 :     PyObject *result = NULL, *value = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 3094 :     if (!o) {

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002b	75 18		 jne	 SHORT $LN27@ast2obj_sl

; 3095 :         Py_INCREF(Py_None);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00034	e8 00 00 00 00	 call	 _Py_IncRef

; 3096 :         return Py_None;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00040	e9 b4 02 00 00	 jmp	 $LN28@ast2obj_sl
$LN27@ast2obj_sl:

; 3097 :     }
; 3098 : 
; 3099 :     switch (o->kind) {

  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0004a	8b 00		 mov	 eax, DWORD PTR [rax]
  0004c	89 44 24 38	 mov	 DWORD PTR tv66[rsp], eax
  00050	83 7c 24 38 01	 cmp	 DWORD PTR tv66[rsp], 1
  00055	74 1b		 je	 SHORT $LN24@ast2obj_sl
  00057	83 7c 24 38 02	 cmp	 DWORD PTR tv66[rsp], 2
  0005c	0f 84 58 01 00
	00		 je	 $LN16@ast2obj_sl
  00062	83 7c 24 38 03	 cmp	 DWORD PTR tv66[rsp], 3
  00067	0f 84 d9 01 00
	00		 je	 $LN12@ast2obj_sl
  0006d	e9 4e 02 00 00	 jmp	 $LN25@ast2obj_sl
$LN24@ast2obj_sl:

; 3100 :     case Slice_kind:
; 3101 :         result = PyType_GenericNew(Slice_type, NULL, NULL);

  00072	45 33 c0	 xor	 r8d, r8d
  00075	33 d2		 xor	 edx, edx
  00077	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Slice_type
  0007e	e8 00 00 00 00	 call	 PyType_GenericNew
  00083	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3102 :         if (!result) goto failed;

  00088	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0008e	75 05		 jne	 SHORT $LN23@ast2obj_sl
  00090	e9 32 02 00 00	 jmp	 $failed$24222
$LN23@ast2obj_sl:

; 3103 :         value = ast2obj_expr(o->v.Slice.lower);

  00095	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0009a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0009e	e8 00 00 00 00	 call	 ast2obj_expr
  000a3	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3104 :         if (!value) goto failed;

  000a8	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000ae	75 05		 jne	 SHORT $LN22@ast2obj_sl
  000b0	e9 12 02 00 00	 jmp	 $failed$24222
$LN22@ast2obj_sl:

; 3105 :         if (_PyObject_SetAttrId(result, &PyId_lower, value) == -1)

  000b5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lower
  000ba	8b c0		 mov	 eax, eax
  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000c2	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000cb	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000cf	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000d4	48 8b d0	 mov	 rdx, rax
  000d7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000dc	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000e1	83 f8 ff	 cmp	 eax, -1
  000e4	75 05		 jne	 SHORT $LN21@ast2obj_sl

; 3106 :             goto failed;

  000e6	e9 dc 01 00 00	 jmp	 $failed$24222
$LN21@ast2obj_sl:

; 3107 :         Py_DECREF(value);

  000eb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000f0	e8 00 00 00 00	 call	 _Py_DecRef

; 3108 :         value = ast2obj_expr(o->v.Slice.upper);

  000f5	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000fa	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  000fe	e8 00 00 00 00	 call	 ast2obj_expr
  00103	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3109 :         if (!value) goto failed;

  00108	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0010e	75 05		 jne	 SHORT $LN20@ast2obj_sl
  00110	e9 b2 01 00 00	 jmp	 $failed$24222
$LN20@ast2obj_sl:

; 3110 :         if (_PyObject_SetAttrId(result, &PyId_upper, value) == -1)

  00115	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_upper
  0011a	8b c0		 mov	 eax, eax
  0011c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00122	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0012b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0012f	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00134	48 8b d0	 mov	 rdx, rax
  00137	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0013c	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00141	83 f8 ff	 cmp	 eax, -1
  00144	75 05		 jne	 SHORT $LN19@ast2obj_sl

; 3111 :             goto failed;

  00146	e9 7c 01 00 00	 jmp	 $failed$24222
$LN19@ast2obj_sl:

; 3112 :         Py_DECREF(value);

  0014b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00150	e8 00 00 00 00	 call	 _Py_DecRef

; 3113 :         value = ast2obj_expr(o->v.Slice.step);

  00155	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0015a	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0015e	e8 00 00 00 00	 call	 ast2obj_expr
  00163	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3114 :         if (!value) goto failed;

  00168	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0016e	75 05		 jne	 SHORT $LN18@ast2obj_sl
  00170	e9 52 01 00 00	 jmp	 $failed$24222
$LN18@ast2obj_sl:

; 3115 :         if (_PyObject_SetAttrId(result, &PyId_step, value) == -1)

  00175	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_step
  0017a	8b c0		 mov	 eax, eax
  0017c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00182	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0018b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0018f	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00194	48 8b d0	 mov	 rdx, rax
  00197	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0019c	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001a1	83 f8 ff	 cmp	 eax, -1
  001a4	75 05		 jne	 SHORT $LN17@ast2obj_sl

; 3116 :             goto failed;

  001a6	e9 1c 01 00 00	 jmp	 $failed$24222
$LN17@ast2obj_sl:

; 3117 :         Py_DECREF(value);

  001ab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  001b0	e8 00 00 00 00	 call	 _Py_DecRef

; 3118 :         break;

  001b5	e9 06 01 00 00	 jmp	 $LN25@ast2obj_sl
$LN16@ast2obj_sl:

; 3119 :     case ExtSlice_kind:
; 3120 :         result = PyType_GenericNew(ExtSlice_type, NULL, NULL);

  001ba	45 33 c0	 xor	 r8d, r8d
  001bd	33 d2		 xor	 edx, edx
  001bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ExtSlice_type
  001c6	e8 00 00 00 00	 call	 PyType_GenericNew
  001cb	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3121 :         if (!result) goto failed;

  001d0	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  001d6	75 05		 jne	 SHORT $LN15@ast2obj_sl
  001d8	e9 ea 00 00 00	 jmp	 $failed$24222
$LN15@ast2obj_sl:

; 3122 :         value = ast2obj_list(o->v.ExtSlice.dims, ast2obj_slice);

  001dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_slice
  001e4	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  001e9	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  001ed	e8 00 00 00 00	 call	 ast2obj_list
  001f2	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3123 :         if (!value) goto failed;

  001f7	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  001fd	75 05		 jne	 SHORT $LN14@ast2obj_sl
  001ff	e9 c3 00 00 00	 jmp	 $failed$24222
$LN14@ast2obj_sl:

; 3124 :         if (_PyObject_SetAttrId(result, &PyId_dims, value) == -1)

  00204	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_dims
  00209	8b c0		 mov	 eax, eax
  0020b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00211	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0021a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0021e	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00223	48 8b d0	 mov	 rdx, rax
  00226	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0022b	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00230	83 f8 ff	 cmp	 eax, -1
  00233	75 05		 jne	 SHORT $LN13@ast2obj_sl

; 3125 :             goto failed;

  00235	e9 8d 00 00 00	 jmp	 $failed$24222
$LN13@ast2obj_sl:

; 3126 :         Py_DECREF(value);

  0023a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0023f	e8 00 00 00 00	 call	 _Py_DecRef

; 3127 :         break;

  00244	eb 7a		 jmp	 SHORT $LN25@ast2obj_sl
$LN12@ast2obj_sl:

; 3128 :     case Index_kind:
; 3129 :         result = PyType_GenericNew(Index_type, NULL, NULL);

  00246	45 33 c0	 xor	 r8d, r8d
  00249	33 d2		 xor	 edx, edx
  0024b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Index_type
  00252	e8 00 00 00 00	 call	 PyType_GenericNew
  00257	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3130 :         if (!result) goto failed;

  0025c	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00262	75 02		 jne	 SHORT $LN11@ast2obj_sl
  00264	eb 61		 jmp	 SHORT $failed$24222
$LN11@ast2obj_sl:

; 3131 :         value = ast2obj_expr(o->v.Index.value);

  00266	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0026b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0026f	e8 00 00 00 00	 call	 ast2obj_expr
  00274	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3132 :         if (!value) goto failed;

  00279	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0027f	75 02		 jne	 SHORT $LN10@ast2obj_sl
  00281	eb 44		 jmp	 SHORT $failed$24222
$LN10@ast2obj_sl:

; 3133 :         if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  00283	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  00288	8b c0		 mov	 eax, eax
  0028a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00290	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00299	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0029d	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  002a2	48 8b d0	 mov	 rdx, rax
  002a5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  002aa	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  002af	83 f8 ff	 cmp	 eax, -1
  002b2	75 02		 jne	 SHORT $LN9@ast2obj_sl

; 3134 :             goto failed;

  002b4	eb 11		 jmp	 SHORT $failed$24222
$LN9@ast2obj_sl:

; 3135 :         Py_DECREF(value);

  002b6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  002bb	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@ast2obj_sl:

; 3136 :         break;
; 3137 :     }
; 3138 :     return result;

  002c0	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  002c5	eb 32		 jmp	 SHORT $LN28@ast2obj_sl
$failed$24222:
$LN8@ast2obj_sl:

; 3139 : failed:
; 3140 :     Py_XDECREF(value);

  002c7	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  002cd	74 0a		 je	 SHORT $LN5@ast2obj_sl
  002cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  002d4	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ast2obj_sl:
  002d9	33 c0		 xor	 eax, eax
  002db	85 c0		 test	 eax, eax
  002dd	75 e8		 jne	 SHORT $LN8@ast2obj_sl
$LN4@ast2obj_sl:

; 3141 :     Py_XDECREF(result);

  002df	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  002e5	74 0a		 je	 SHORT $LN1@ast2obj_sl
  002e7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  002ec	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast2obj_sl:
  002f1	33 c0		 xor	 eax, eax
  002f3	85 c0		 test	 eax, eax
  002f5	75 e8		 jne	 SHORT $LN4@ast2obj_sl

; 3142 :     return NULL;

  002f7	33 c0		 xor	 eax, eax
$LN28@ast2obj_sl:

; 3143 : }

  002f9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002fd	c3		 ret	 0
ast2obj_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@OBPKEFDH@unknown?5boolop?5found?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_boolop DD imagerel ast2obj_boolop
	DD	imagerel ast2obj_boolop+100
	DD	imagerel $unwind$ast2obj_boolop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_boolop DD 010801H
	DD	06208H
xdata	ENDS
;	COMDAT ??_C@_0BF@OBPKEFDH@unknown?5boolop?5found?$AA@
CONST	SEGMENT
??_C@_0BF@OBPKEFDH@unknown?5boolop?5found?$AA@ DB 'unknown boolop found', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ast2obj_boolop
_TEXT	SEGMENT
tv64 = 32
o$ = 64
ast2obj_boolop PROC					; COMDAT

; 3146 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3147 :     switch(o) {

  00008	8b 44 24 40	 mov	 eax, DWORD PTR o$[rsp]
  0000c	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00010	83 7c 24 20 01	 cmp	 DWORD PTR tv64[rsp], 1
  00015	74 09		 je	 SHORT $LN3@ast2obj_bo
  00017	83 7c 24 20 02	 cmp	 DWORD PTR tv64[rsp], 2
  0001c	74 17		 je	 SHORT $LN2@ast2obj_bo
  0001e	eb 2a		 jmp	 SHORT $LN1@ast2obj_bo
$LN3@ast2obj_bo:

; 3148 :         case And:
; 3149 :             Py_INCREF(And_singleton);

  00020	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR And_singleton
  00027	e8 00 00 00 00	 call	 _Py_IncRef

; 3150 :             return And_singleton;

  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR And_singleton
  00033	eb 2a		 jmp	 SHORT $LN6@ast2obj_bo
$LN2@ast2obj_bo:

; 3151 :         case Or:
; 3152 :             Py_INCREF(Or_singleton);

  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Or_singleton
  0003c	e8 00 00 00 00	 call	 _Py_IncRef

; 3153 :             return Or_singleton;

  00041	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Or_singleton
  00048	eb 15		 jmp	 SHORT $LN6@ast2obj_bo
$LN1@ast2obj_bo:

; 3154 :         default:
; 3155 :             /* should never happen, but just in case ... */
; 3156 :             PyErr_Format(PyExc_SystemError, "unknown boolop found");

  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@OBPKEFDH@unknown?5boolop?5found?$AA@
  00051	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00058	e8 00 00 00 00	 call	 PyErr_Format

; 3157 :             return NULL;

  0005d	33 c0		 xor	 eax, eax
$LN6@ast2obj_bo:

; 3158 :     }
; 3159 : }

  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	c3		 ret	 0
ast2obj_boolop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@IGLEAKJO@unknown?5operator?5found?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_operator DD imagerel ast2obj_operator
	DD	imagerel ast2obj_operator+408
	DD	imagerel $unwind$ast2obj_operator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_operator DD 010801H
	DD	06208H
xdata	ENDS
;	COMDAT ??_C@_0BH@IGLEAKJO@unknown?5operator?5found?$AA@
CONST	SEGMENT
??_C@_0BH@IGLEAKJO@unknown?5operator?5found?$AA@ DB 'unknown operator fou'
	DB	'nd', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ast2obj_operator
_TEXT	SEGMENT
tv64 = 32
o$ = 64
ast2obj_operator PROC					; COMDAT

; 3161 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3162 :     switch(o) {

  00008	8b 44 24 40	 mov	 eax, DWORD PTR o$[rsp]
  0000c	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00010	8b 44 24 20	 mov	 eax, DWORD PTR tv64[rsp]
  00014	ff c8		 dec	 eax
  00016	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  0001a	83 7c 24 20 0b	 cmp	 DWORD PTR tv64[rsp], 11
  0001f	0f 87 26 01 00
	00		 ja	 $LN1@ast2obj_op
  00025	48 63 44 24 20	 movsxd	 rax, DWORD PTR tv64[rsp]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00031	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN18@ast2obj_op[rcx+rax*4]
  00038	48 03 c1	 add	 rax, rcx
  0003b	ff e0		 jmp	 rax
$LN13@ast2obj_op:

; 3163 :         case Add:
; 3164 :             Py_INCREF(Add_singleton);

  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Add_singleton
  00044	e8 00 00 00 00	 call	 _Py_IncRef

; 3165 :             return Add_singleton;

  00049	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Add_singleton
  00050	e9 0b 01 00 00	 jmp	 $LN16@ast2obj_op
$LN12@ast2obj_op:

; 3166 :         case Sub:
; 3167 :             Py_INCREF(Sub_singleton);

  00055	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Sub_singleton
  0005c	e8 00 00 00 00	 call	 _Py_IncRef

; 3168 :             return Sub_singleton;

  00061	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Sub_singleton
  00068	e9 f3 00 00 00	 jmp	 $LN16@ast2obj_op
$LN11@ast2obj_op:

; 3169 :         case Mult:
; 3170 :             Py_INCREF(Mult_singleton);

  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Mult_singleton
  00074	e8 00 00 00 00	 call	 _Py_IncRef

; 3171 :             return Mult_singleton;

  00079	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Mult_singleton
  00080	e9 db 00 00 00	 jmp	 $LN16@ast2obj_op
$LN10@ast2obj_op:

; 3172 :         case Div:
; 3173 :             Py_INCREF(Div_singleton);

  00085	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Div_singleton
  0008c	e8 00 00 00 00	 call	 _Py_IncRef

; 3174 :             return Div_singleton;

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Div_singleton
  00098	e9 c3 00 00 00	 jmp	 $LN16@ast2obj_op
$LN9@ast2obj_op:

; 3175 :         case Mod:
; 3176 :             Py_INCREF(Mod_singleton);

  0009d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Mod_singleton
  000a4	e8 00 00 00 00	 call	 _Py_IncRef

; 3177 :             return Mod_singleton;

  000a9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Mod_singleton
  000b0	e9 ab 00 00 00	 jmp	 $LN16@ast2obj_op
$LN8@ast2obj_op:

; 3178 :         case Pow:
; 3179 :             Py_INCREF(Pow_singleton);

  000b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Pow_singleton
  000bc	e8 00 00 00 00	 call	 _Py_IncRef

; 3180 :             return Pow_singleton;

  000c1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Pow_singleton
  000c8	e9 93 00 00 00	 jmp	 $LN16@ast2obj_op
$LN7@ast2obj_op:

; 3181 :         case LShift:
; 3182 :             Py_INCREF(LShift_singleton);

  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR LShift_singleton
  000d4	e8 00 00 00 00	 call	 _Py_IncRef

; 3183 :             return LShift_singleton;

  000d9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR LShift_singleton
  000e0	eb 7e		 jmp	 SHORT $LN16@ast2obj_op
$LN6@ast2obj_op:

; 3184 :         case RShift:
; 3185 :             Py_INCREF(RShift_singleton);

  000e2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RShift_singleton
  000e9	e8 00 00 00 00	 call	 _Py_IncRef

; 3186 :             return RShift_singleton;

  000ee	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RShift_singleton
  000f5	eb 69		 jmp	 SHORT $LN16@ast2obj_op
$LN5@ast2obj_op:

; 3187 :         case BitOr:
; 3188 :             Py_INCREF(BitOr_singleton);

  000f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BitOr_singleton
  000fe	e8 00 00 00 00	 call	 _Py_IncRef

; 3189 :             return BitOr_singleton;

  00103	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR BitOr_singleton
  0010a	eb 54		 jmp	 SHORT $LN16@ast2obj_op
$LN4@ast2obj_op:

; 3190 :         case BitXor:
; 3191 :             Py_INCREF(BitXor_singleton);

  0010c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BitXor_singleton
  00113	e8 00 00 00 00	 call	 _Py_IncRef

; 3192 :             return BitXor_singleton;

  00118	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR BitXor_singleton
  0011f	eb 3f		 jmp	 SHORT $LN16@ast2obj_op
$LN3@ast2obj_op:

; 3193 :         case BitAnd:
; 3194 :             Py_INCREF(BitAnd_singleton);

  00121	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BitAnd_singleton
  00128	e8 00 00 00 00	 call	 _Py_IncRef

; 3195 :             return BitAnd_singleton;

  0012d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR BitAnd_singleton
  00134	eb 2a		 jmp	 SHORT $LN16@ast2obj_op
$LN2@ast2obj_op:

; 3196 :         case FloorDiv:
; 3197 :             Py_INCREF(FloorDiv_singleton);

  00136	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR FloorDiv_singleton
  0013d	e8 00 00 00 00	 call	 _Py_IncRef

; 3198 :             return FloorDiv_singleton;

  00142	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR FloorDiv_singleton
  00149	eb 15		 jmp	 SHORT $LN16@ast2obj_op
$LN1@ast2obj_op:

; 3199 :         default:
; 3200 :             /* should never happen, but just in case ... */
; 3201 :             PyErr_Format(PyExc_SystemError, "unknown operator found");

  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGLEAKJO@unknown?5operator?5found?$AA@
  00152	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00159	e8 00 00 00 00	 call	 PyErr_Format

; 3202 :             return NULL;

  0015e	33 c0		 xor	 eax, eax
$LN16@ast2obj_op:

; 3203 :     }
; 3204 : }

  00160	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00164	c3		 ret	 0
  00165	0f 1f 00	 npad	 3
$LN18@ast2obj_op:
  00168	00 00 00 00	 DD	 $LN13@ast2obj_op
  0016c	00 00 00 00	 DD	 $LN12@ast2obj_op
  00170	00 00 00 00	 DD	 $LN11@ast2obj_op
  00174	00 00 00 00	 DD	 $LN10@ast2obj_op
  00178	00 00 00 00	 DD	 $LN9@ast2obj_op
  0017c	00 00 00 00	 DD	 $LN8@ast2obj_op
  00180	00 00 00 00	 DD	 $LN7@ast2obj_op
  00184	00 00 00 00	 DD	 $LN6@ast2obj_op
  00188	00 00 00 00	 DD	 $LN5@ast2obj_op
  0018c	00 00 00 00	 DD	 $LN4@ast2obj_op
  00190	00 00 00 00	 DD	 $LN3@ast2obj_op
  00194	00 00 00 00	 DD	 $LN2@ast2obj_op
ast2obj_operator ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@NOHBMGDK@unknown?5unaryop?5found?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_unaryop DD imagerel ast2obj_unaryop
	DD	imagerel ast2obj_unaryop+156
	DD	imagerel $unwind$ast2obj_unaryop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_unaryop DD 010801H
	DD	06208H
xdata	ENDS
;	COMDAT ??_C@_0BG@NOHBMGDK@unknown?5unaryop?5found?$AA@
CONST	SEGMENT
??_C@_0BG@NOHBMGDK@unknown?5unaryop?5found?$AA@ DB 'unknown unaryop found'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ast2obj_unaryop
_TEXT	SEGMENT
tv64 = 32
o$ = 64
ast2obj_unaryop PROC					; COMDAT

; 3206 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3207 :     switch(o) {

  00008	8b 44 24 40	 mov	 eax, DWORD PTR o$[rsp]
  0000c	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00010	83 7c 24 20 01	 cmp	 DWORD PTR tv64[rsp], 1
  00015	74 17		 je	 SHORT $LN5@ast2obj_un
  00017	83 7c 24 20 02	 cmp	 DWORD PTR tv64[rsp], 2
  0001c	74 25		 je	 SHORT $LN4@ast2obj_un
  0001e	83 7c 24 20 03	 cmp	 DWORD PTR tv64[rsp], 3
  00023	74 33		 je	 SHORT $LN3@ast2obj_un
  00025	83 7c 24 20 04	 cmp	 DWORD PTR tv64[rsp], 4
  0002a	74 41		 je	 SHORT $LN2@ast2obj_un
  0002c	eb 54		 jmp	 SHORT $LN1@ast2obj_un
$LN5@ast2obj_un:

; 3208 :         case Invert:
; 3209 :             Py_INCREF(Invert_singleton);

  0002e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Invert_singleton
  00035	e8 00 00 00 00	 call	 _Py_IncRef

; 3210 :             return Invert_singleton;

  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Invert_singleton
  00041	eb 54		 jmp	 SHORT $LN8@ast2obj_un
$LN4@ast2obj_un:

; 3211 :         case Not:
; 3212 :             Py_INCREF(Not_singleton);

  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Not_singleton
  0004a	e8 00 00 00 00	 call	 _Py_IncRef

; 3213 :             return Not_singleton;

  0004f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Not_singleton
  00056	eb 3f		 jmp	 SHORT $LN8@ast2obj_un
$LN3@ast2obj_un:

; 3214 :         case UAdd:
; 3215 :             Py_INCREF(UAdd_singleton);

  00058	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR UAdd_singleton
  0005f	e8 00 00 00 00	 call	 _Py_IncRef

; 3216 :             return UAdd_singleton;

  00064	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR UAdd_singleton
  0006b	eb 2a		 jmp	 SHORT $LN8@ast2obj_un
$LN2@ast2obj_un:

; 3217 :         case USub:
; 3218 :             Py_INCREF(USub_singleton);

  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR USub_singleton
  00074	e8 00 00 00 00	 call	 _Py_IncRef

; 3219 :             return USub_singleton;

  00079	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR USub_singleton
  00080	eb 15		 jmp	 SHORT $LN8@ast2obj_un
$LN1@ast2obj_un:

; 3220 :         default:
; 3221 :             /* should never happen, but just in case ... */
; 3222 :             PyErr_Format(PyExc_SystemError, "unknown unaryop found");

  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@NOHBMGDK@unknown?5unaryop?5found?$AA@
  00089	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00090	e8 00 00 00 00	 call	 PyErr_Format

; 3223 :             return NULL;

  00095	33 c0		 xor	 eax, eax
$LN8@ast2obj_un:

; 3224 :     }
; 3225 : }

  00097	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009b	c3		 ret	 0
ast2obj_unaryop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@BFIEMLNE@unknown?5cmpop?5found?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_cmpop DD imagerel ast2obj_cmpop
	DD	imagerel ast2obj_cmpop+352
	DD	imagerel $unwind$ast2obj_cmpop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_cmpop DD 010801H
	DD	06208H
xdata	ENDS
;	COMDAT ??_C@_0BE@BFIEMLNE@unknown?5cmpop?5found?$AA@
CONST	SEGMENT
??_C@_0BE@BFIEMLNE@unknown?5cmpop?5found?$AA@ DB 'unknown cmpop found', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ast2obj_cmpop
_TEXT	SEGMENT
tv64 = 32
o$ = 64
ast2obj_cmpop PROC					; COMDAT

; 3227 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3228 :     switch(o) {

  00008	8b 44 24 40	 mov	 eax, DWORD PTR o$[rsp]
  0000c	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00010	8b 44 24 20	 mov	 eax, DWORD PTR tv64[rsp]
  00014	ff c8		 dec	 eax
  00016	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  0001a	83 7c 24 20 09	 cmp	 DWORD PTR tv64[rsp], 9
  0001f	0f 87 f6 00 00
	00		 ja	 $LN1@ast2obj_cm
  00025	48 63 44 24 20	 movsxd	 rax, DWORD PTR tv64[rsp]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00031	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN16@ast2obj_cm[rcx+rax*4]
  00038	48 03 c1	 add	 rax, rcx
  0003b	ff e0		 jmp	 rax
$LN11@ast2obj_cm:

; 3229 :         case Eq:
; 3230 :             Py_INCREF(Eq_singleton);

  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Eq_singleton
  00044	e8 00 00 00 00	 call	 _Py_IncRef

; 3231 :             return Eq_singleton;

  00049	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Eq_singleton
  00050	e9 db 00 00 00	 jmp	 $LN14@ast2obj_cm
$LN10@ast2obj_cm:

; 3232 :         case NotEq:
; 3233 :             Py_INCREF(NotEq_singleton);

  00055	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR NotEq_singleton
  0005c	e8 00 00 00 00	 call	 _Py_IncRef

; 3234 :             return NotEq_singleton;

  00061	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR NotEq_singleton
  00068	e9 c3 00 00 00	 jmp	 $LN14@ast2obj_cm
$LN9@ast2obj_cm:

; 3235 :         case Lt:
; 3236 :             Py_INCREF(Lt_singleton);

  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Lt_singleton
  00074	e8 00 00 00 00	 call	 _Py_IncRef

; 3237 :             return Lt_singleton;

  00079	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Lt_singleton
  00080	e9 ab 00 00 00	 jmp	 $LN14@ast2obj_cm
$LN8@ast2obj_cm:

; 3238 :         case LtE:
; 3239 :             Py_INCREF(LtE_singleton);

  00085	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR LtE_singleton
  0008c	e8 00 00 00 00	 call	 _Py_IncRef

; 3240 :             return LtE_singleton;

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR LtE_singleton
  00098	e9 93 00 00 00	 jmp	 $LN14@ast2obj_cm
$LN7@ast2obj_cm:

; 3241 :         case Gt:
; 3242 :             Py_INCREF(Gt_singleton);

  0009d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Gt_singleton
  000a4	e8 00 00 00 00	 call	 _Py_IncRef

; 3243 :             return Gt_singleton;

  000a9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Gt_singleton
  000b0	eb 7e		 jmp	 SHORT $LN14@ast2obj_cm
$LN6@ast2obj_cm:

; 3244 :         case GtE:
; 3245 :             Py_INCREF(GtE_singleton);

  000b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR GtE_singleton
  000b9	e8 00 00 00 00	 call	 _Py_IncRef

; 3246 :             return GtE_singleton;

  000be	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR GtE_singleton
  000c5	eb 69		 jmp	 SHORT $LN14@ast2obj_cm
$LN5@ast2obj_cm:

; 3247 :         case Is:
; 3248 :             Py_INCREF(Is_singleton);

  000c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Is_singleton
  000ce	e8 00 00 00 00	 call	 _Py_IncRef

; 3249 :             return Is_singleton;

  000d3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Is_singleton
  000da	eb 54		 jmp	 SHORT $LN14@ast2obj_cm
$LN4@ast2obj_cm:

; 3250 :         case IsNot:
; 3251 :             Py_INCREF(IsNot_singleton);

  000dc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR IsNot_singleton
  000e3	e8 00 00 00 00	 call	 _Py_IncRef

; 3252 :             return IsNot_singleton;

  000e8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR IsNot_singleton
  000ef	eb 3f		 jmp	 SHORT $LN14@ast2obj_cm
$LN3@ast2obj_cm:

; 3253 :         case In:
; 3254 :             Py_INCREF(In_singleton);

  000f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR In_singleton
  000f8	e8 00 00 00 00	 call	 _Py_IncRef

; 3255 :             return In_singleton;

  000fd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR In_singleton
  00104	eb 2a		 jmp	 SHORT $LN14@ast2obj_cm
$LN2@ast2obj_cm:

; 3256 :         case NotIn:
; 3257 :             Py_INCREF(NotIn_singleton);

  00106	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR NotIn_singleton
  0010d	e8 00 00 00 00	 call	 _Py_IncRef

; 3258 :             return NotIn_singleton;

  00112	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR NotIn_singleton
  00119	eb 15		 jmp	 SHORT $LN14@ast2obj_cm
$LN1@ast2obj_cm:

; 3259 :         default:
; 3260 :             /* should never happen, but just in case ... */
; 3261 :             PyErr_Format(PyExc_SystemError, "unknown cmpop found");

  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@BFIEMLNE@unknown?5cmpop?5found?$AA@
  00122	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00129	e8 00 00 00 00	 call	 PyErr_Format

; 3262 :             return NULL;

  0012e	33 c0		 xor	 eax, eax
$LN14@ast2obj_cm:

; 3263 :     }
; 3264 : }

  00130	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00134	c3		 ret	 0
  00135	0f 1f 00	 npad	 3
$LN16@ast2obj_cm:
  00138	00 00 00 00	 DD	 $LN11@ast2obj_cm
  0013c	00 00 00 00	 DD	 $LN10@ast2obj_cm
  00140	00 00 00 00	 DD	 $LN9@ast2obj_cm
  00144	00 00 00 00	 DD	 $LN8@ast2obj_cm
  00148	00 00 00 00	 DD	 $LN7@ast2obj_cm
  0014c	00 00 00 00	 DD	 $LN6@ast2obj_cm
  00150	00 00 00 00	 DD	 $LN5@ast2obj_cm
  00154	00 00 00 00	 DD	 $LN4@ast2obj_cm
  00158	00 00 00 00	 DD	 $LN3@ast2obj_cm
  0015c	00 00 00 00	 DD	 $LN2@ast2obj_cm
ast2obj_cmpop ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_comprehension DD imagerel ast2obj_comprehension
	DD	imagerel ast2obj_comprehension+453
	DD	imagerel $unwind$ast2obj_comprehension
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_comprehension DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_comprehension
_TEXT	SEGMENT
value$ = 32
result$ = 40
o$ = 48
_o$ = 80
ast2obj_comprehension PROC				; COMDAT

; 3267 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3268 :     comprehension_ty o = (comprehension_ty)_o;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR _o$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 3269 :     PyObject *result = NULL, *value = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 3270 :     if (!o) {

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002b	75 18		 jne	 SHORT $LN16@ast2obj_co

; 3271 :         Py_INCREF(Py_None);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00034	e8 00 00 00 00	 call	 _Py_IncRef

; 3272 :         return Py_None;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00040	e9 7b 01 00 00	 jmp	 $LN17@ast2obj_co
$LN16@ast2obj_co:

; 3273 :     }
; 3274 : 
; 3275 :     result = PyType_GenericNew(comprehension_type, NULL, NULL);

  00045	45 33 c0	 xor	 r8d, r8d
  00048	33 d2		 xor	 edx, edx
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR comprehension_type
  00051	e8 00 00 00 00	 call	 PyType_GenericNew
  00056	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3276 :     if (!result) return NULL;

  0005b	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00061	75 07		 jne	 SHORT $LN15@ast2obj_co
  00063	33 c0		 xor	 eax, eax
  00065	e9 56 01 00 00	 jmp	 $LN17@ast2obj_co
$LN15@ast2obj_co:

; 3277 :     value = ast2obj_expr(o->target);

  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0006f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00072	e8 00 00 00 00	 call	 ast2obj_expr
  00077	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3278 :     if (!value) goto failed;

  0007c	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00082	75 05		 jne	 SHORT $LN14@ast2obj_co
  00084	e9 05 01 00 00	 jmp	 $failed$24369
$LN14@ast2obj_co:

; 3279 :     if (_PyObject_SetAttrId(result, &PyId_target, value) == -1)

  00089	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_target
  0008e	8b c0		 mov	 eax, eax
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00096	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0009f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000a3	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000a8	48 8b d0	 mov	 rdx, rax
  000ab	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000b0	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000b5	83 f8 ff	 cmp	 eax, -1
  000b8	75 05		 jne	 SHORT $LN13@ast2obj_co

; 3280 :         goto failed;

  000ba	e9 cf 00 00 00	 jmp	 $failed$24369
$LN13@ast2obj_co:

; 3281 :     Py_DECREF(value);

  000bf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000c4	e8 00 00 00 00	 call	 _Py_DecRef

; 3282 :     value = ast2obj_expr(o->iter);

  000c9	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000ce	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000d2	e8 00 00 00 00	 call	 ast2obj_expr
  000d7	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3283 :     if (!value) goto failed;

  000dc	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000e2	75 05		 jne	 SHORT $LN12@ast2obj_co
  000e4	e9 a5 00 00 00	 jmp	 $failed$24369
$LN12@ast2obj_co:

; 3284 :     if (_PyObject_SetAttrId(result, &PyId_iter, value) == -1)

  000e9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_iter
  000ee	8b c0		 mov	 eax, eax
  000f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000f6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000ff	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00103	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00108	48 8b d0	 mov	 rdx, rax
  0010b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00110	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00115	83 f8 ff	 cmp	 eax, -1
  00118	75 02		 jne	 SHORT $LN11@ast2obj_co

; 3285 :         goto failed;

  0011a	eb 72		 jmp	 SHORT $failed$24369
$LN11@ast2obj_co:

; 3286 :     Py_DECREF(value);

  0011c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00121	e8 00 00 00 00	 call	 _Py_DecRef

; 3287 :     value = ast2obj_list(o->ifs, ast2obj_expr);

  00126	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  0012d	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00132	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00136	e8 00 00 00 00	 call	 ast2obj_list
  0013b	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3288 :     if (!value) goto failed;

  00140	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00146	75 02		 jne	 SHORT $LN10@ast2obj_co
  00148	eb 44		 jmp	 SHORT $failed$24369
$LN10@ast2obj_co:

; 3289 :     if (_PyObject_SetAttrId(result, &PyId_ifs, value) == -1)

  0014a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ifs
  0014f	8b c0		 mov	 eax, eax
  00151	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00157	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00160	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00164	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00169	48 8b d0	 mov	 rdx, rax
  0016c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00171	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00176	83 f8 ff	 cmp	 eax, -1
  00179	75 02		 jne	 SHORT $LN9@ast2obj_co

; 3290 :         goto failed;

  0017b	eb 11		 jmp	 SHORT $failed$24369
$LN9@ast2obj_co:

; 3291 :     Py_DECREF(value);

  0017d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00182	e8 00 00 00 00	 call	 _Py_DecRef

; 3292 :     return result;

  00187	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  0018c	eb 32		 jmp	 SHORT $LN17@ast2obj_co
$failed$24369:
$LN8@ast2obj_co:

; 3293 : failed:
; 3294 :     Py_XDECREF(value);

  0018e	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00194	74 0a		 je	 SHORT $LN5@ast2obj_co
  00196	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0019b	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ast2obj_co:
  001a0	33 c0		 xor	 eax, eax
  001a2	85 c0		 test	 eax, eax
  001a4	75 e8		 jne	 SHORT $LN8@ast2obj_co
$LN4@ast2obj_co:

; 3295 :     Py_XDECREF(result);

  001a6	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  001ac	74 0a		 je	 SHORT $LN1@ast2obj_co
  001ae	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  001b3	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast2obj_co:
  001b8	33 c0		 xor	 eax, eax
  001ba	85 c0		 test	 eax, eax
  001bc	75 e8		 jne	 SHORT $LN4@ast2obj_co

; 3296 :     return NULL;

  001be	33 c0		 xor	 eax, eax
$LN17@ast2obj_co:

; 3297 : }

  001c0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001c4	c3		 ret	 0
ast2obj_comprehension ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_excepthandler DD imagerel ast2obj_excepthandler
	DD	imagerel ast2obj_excepthandler+663
	DD	imagerel $unwind$ast2obj_excepthandler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_excepthandler DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_excepthandler
_TEXT	SEGMENT
value$ = 32
result$ = 40
o$ = 48
tv66 = 56
_o$ = 80
ast2obj_excepthandler PROC				; COMDAT

; 3301 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3302 :     excepthandler_ty o = (excepthandler_ty)_o;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR _o$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 3303 :     PyObject *result = NULL, *value = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 3304 :     if (!o) {

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002b	75 18		 jne	 SHORT $LN23@ast2obj_ex@3

; 3305 :         Py_INCREF(Py_None);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00034	e8 00 00 00 00	 call	 _Py_IncRef

; 3306 :         return Py_None;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00040	e9 4d 02 00 00	 jmp	 $LN24@ast2obj_ex@3
$LN23@ast2obj_ex@3:

; 3307 :     }
; 3308 : 
; 3309 :     switch (o->kind) {

  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0004a	8b 00		 mov	 eax, DWORD PTR [rax]
  0004c	89 44 24 38	 mov	 DWORD PTR tv66[rsp], eax
  00050	83 7c 24 38 01	 cmp	 DWORD PTR tv66[rsp], 1
  00055	74 05		 je	 SHORT $LN20@ast2obj_ex@3
  00057	e9 4a 01 00 00	 jmp	 $LN21@ast2obj_ex@3
$LN20@ast2obj_ex@3:

; 3310 :     case ExceptHandler_kind:
; 3311 :         result = PyType_GenericNew(ExceptHandler_type, NULL, NULL);

  0005c	45 33 c0	 xor	 r8d, r8d
  0005f	33 d2		 xor	 edx, edx
  00061	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ExceptHandler_type
  00068	e8 00 00 00 00	 call	 PyType_GenericNew
  0006d	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3312 :         if (!result) goto failed;

  00072	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00078	75 05		 jne	 SHORT $LN19@ast2obj_ex@3
  0007a	e9 e1 01 00 00	 jmp	 $failed$24408
$LN19@ast2obj_ex@3:

; 3313 :         value = ast2obj_expr(o->v.ExceptHandler.type);

  0007f	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00084	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00088	e8 00 00 00 00	 call	 ast2obj_expr
  0008d	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3314 :         if (!value) goto failed;

  00092	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00098	75 05		 jne	 SHORT $LN18@ast2obj_ex@3
  0009a	e9 c1 01 00 00	 jmp	 $failed$24408
$LN18@ast2obj_ex@3:

; 3315 :         if (_PyObject_SetAttrId(result, &PyId_type, value) == -1)

  0009f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_type
  000a4	8b c0		 mov	 eax, eax
  000a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000ac	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000b5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000b9	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000be	48 8b d0	 mov	 rdx, rax
  000c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000c6	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000cb	83 f8 ff	 cmp	 eax, -1
  000ce	75 05		 jne	 SHORT $LN17@ast2obj_ex@3

; 3316 :             goto failed;

  000d0	e9 8b 01 00 00	 jmp	 $failed$24408
$LN17@ast2obj_ex@3:

; 3317 :         Py_DECREF(value);

  000d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000da	e8 00 00 00 00	 call	 _Py_DecRef

; 3318 :         value = ast2obj_identifier(o->v.ExceptHandler.name);

  000df	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000e4	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  000e8	e8 00 00 00 00	 call	 ast2obj_object
  000ed	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3319 :         if (!value) goto failed;

  000f2	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000f8	75 05		 jne	 SHORT $LN16@ast2obj_ex@3
  000fa	e9 61 01 00 00	 jmp	 $failed$24408
$LN16@ast2obj_ex@3:

; 3320 :         if (_PyObject_SetAttrId(result, &PyId_name, value) == -1)

  000ff	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  00104	8b c0		 mov	 eax, eax
  00106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0010c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00115	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00119	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0011e	48 8b d0	 mov	 rdx, rax
  00121	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00126	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0012b	83 f8 ff	 cmp	 eax, -1
  0012e	75 05		 jne	 SHORT $LN15@ast2obj_ex@3

; 3321 :             goto failed;

  00130	e9 2b 01 00 00	 jmp	 $failed$24408
$LN15@ast2obj_ex@3:

; 3322 :         Py_DECREF(value);

  00135	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0013a	e8 00 00 00 00	 call	 _Py_DecRef

; 3323 :         value = ast2obj_list(o->v.ExceptHandler.body, ast2obj_stmt);

  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_stmt
  00146	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0014b	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0014f	e8 00 00 00 00	 call	 ast2obj_list
  00154	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3324 :         if (!value) goto failed;

  00159	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0015f	75 05		 jne	 SHORT $LN14@ast2obj_ex@3
  00161	e9 fa 00 00 00	 jmp	 $failed$24408
$LN14@ast2obj_ex@3:

; 3325 :         if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)

  00166	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  0016b	8b c0		 mov	 eax, eax
  0016d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00173	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0017c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00180	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00185	48 8b d0	 mov	 rdx, rax
  00188	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0018d	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00192	83 f8 ff	 cmp	 eax, -1
  00195	75 05		 jne	 SHORT $LN13@ast2obj_ex@3

; 3326 :             goto failed;

  00197	e9 c4 00 00 00	 jmp	 $failed$24408
$LN13@ast2obj_ex@3:

; 3327 :         Py_DECREF(value);

  0019c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  001a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@ast2obj_ex@3:

; 3328 :         break;
; 3329 :     }
; 3330 :     value = ast2obj_int(o->lineno);

  001a6	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  001ab	8b 48 20	 mov	 ecx, DWORD PTR [rax+32]
  001ae	e8 00 00 00 00	 call	 ast2obj_int
  001b3	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3331 :     if (!value) goto failed;

  001b8	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  001be	75 05		 jne	 SHORT $LN12@ast2obj_ex@3
  001c0	e9 9b 00 00 00	 jmp	 $failed$24408
$LN12@ast2obj_ex@3:

; 3332 :     if (_PyObject_SetAttrId(result, &PyId_lineno, value) < 0)

  001c5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lineno
  001ca	8b c0		 mov	 eax, eax
  001cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001d2	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001db	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001df	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  001e4	48 8b d0	 mov	 rdx, rax
  001e7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  001ec	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001f1	85 c0		 test	 eax, eax
  001f3	7d 02		 jge	 SHORT $LN11@ast2obj_ex@3

; 3333 :         goto failed;

  001f5	eb 69		 jmp	 SHORT $failed$24408
$LN11@ast2obj_ex@3:

; 3334 :     Py_DECREF(value);

  001f7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  001fc	e8 00 00 00 00	 call	 _Py_DecRef

; 3335 :     value = ast2obj_int(o->col_offset);

  00201	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00206	8b 48 24	 mov	 ecx, DWORD PTR [rax+36]
  00209	e8 00 00 00 00	 call	 ast2obj_int
  0020e	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3336 :     if (!value) goto failed;

  00213	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00219	75 02		 jne	 SHORT $LN10@ast2obj_ex@3
  0021b	eb 43		 jmp	 SHORT $failed$24408
$LN10@ast2obj_ex@3:

; 3337 :     if (_PyObject_SetAttrId(result, &PyId_col_offset, value) < 0)

  0021d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_col_offset
  00222	8b c0		 mov	 eax, eax
  00224	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0022a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00233	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00237	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0023c	48 8b d0	 mov	 rdx, rax
  0023f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00244	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00249	85 c0		 test	 eax, eax
  0024b	7d 02		 jge	 SHORT $LN9@ast2obj_ex@3

; 3338 :         goto failed;

  0024d	eb 11		 jmp	 SHORT $failed$24408
$LN9@ast2obj_ex@3:

; 3339 :     Py_DECREF(value);

  0024f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00254	e8 00 00 00 00	 call	 _Py_DecRef

; 3340 :     return result;

  00259	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  0025e	eb 32		 jmp	 SHORT $LN24@ast2obj_ex@3
$failed$24408:
$LN8@ast2obj_ex@3:

; 3341 : failed:
; 3342 :     Py_XDECREF(value);

  00260	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00266	74 0a		 je	 SHORT $LN5@ast2obj_ex@3
  00268	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0026d	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ast2obj_ex@3:
  00272	33 c0		 xor	 eax, eax
  00274	85 c0		 test	 eax, eax
  00276	75 e8		 jne	 SHORT $LN8@ast2obj_ex@3
$LN4@ast2obj_ex@3:

; 3343 :     Py_XDECREF(result);

  00278	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0027e	74 0a		 je	 SHORT $LN1@ast2obj_ex@3
  00280	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00285	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast2obj_ex@3:
  0028a	33 c0		 xor	 eax, eax
  0028c	85 c0		 test	 eax, eax
  0028e	75 e8		 jne	 SHORT $LN4@ast2obj_ex@3

; 3344 :     return NULL;

  00290	33 c0		 xor	 eax, eax
$LN24@ast2obj_ex@3:

; 3345 : }

  00292	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00296	c3		 ret	 0
ast2obj_excepthandler ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_arguments DD imagerel ast2obj_arguments
	DD	imagerel ast2obj_arguments+954
	DD	imagerel $unwind$ast2obj_arguments
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_arguments DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_arguments
_TEXT	SEGMENT
value$ = 32
result$ = 40
o$ = 48
_o$ = 80
ast2obj_arguments PROC					; COMDAT

; 3349 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3350 :     arguments_ty o = (arguments_ty)_o;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR _o$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 3351 :     PyObject *result = NULL, *value = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 3352 :     if (!o) {

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002b	75 18		 jne	 SHORT $LN26@ast2obj_ar

; 3353 :         Py_INCREF(Py_None);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00034	e8 00 00 00 00	 call	 _Py_IncRef

; 3354 :         return Py_None;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00040	e9 70 03 00 00	 jmp	 $LN27@ast2obj_ar
$LN26@ast2obj_ar:

; 3355 :     }
; 3356 : 
; 3357 :     result = PyType_GenericNew(arguments_type, NULL, NULL);

  00045	45 33 c0	 xor	 r8d, r8d
  00048	33 d2		 xor	 edx, edx
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR arguments_type
  00051	e8 00 00 00 00	 call	 PyType_GenericNew
  00056	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3358 :     if (!result) return NULL;

  0005b	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00061	75 07		 jne	 SHORT $LN25@ast2obj_ar
  00063	33 c0		 xor	 eax, eax
  00065	e9 4b 03 00 00	 jmp	 $LN27@ast2obj_ar
$LN25@ast2obj_ar:

; 3359 :     value = ast2obj_list(o->args, ast2obj_arg);

  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_arg
  00071	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00076	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00079	e8 00 00 00 00	 call	 ast2obj_list
  0007e	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3360 :     if (!value) goto failed;

  00083	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00089	75 05		 jne	 SHORT $LN24@ast2obj_ar
  0008b	e9 f3 02 00 00	 jmp	 $failed$24451
$LN24@ast2obj_ar:

; 3361 :     if (_PyObject_SetAttrId(result, &PyId_args, value) == -1)

  00090	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  00095	8b c0		 mov	 eax, eax
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0009d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000a6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000aa	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000af	48 8b d0	 mov	 rdx, rax
  000b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000b7	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000bc	83 f8 ff	 cmp	 eax, -1
  000bf	75 05		 jne	 SHORT $LN23@ast2obj_ar

; 3362 :         goto failed;

  000c1	e9 bd 02 00 00	 jmp	 $failed$24451
$LN23@ast2obj_ar:

; 3363 :     Py_DECREF(value);

  000c6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000cb	e8 00 00 00 00	 call	 _Py_DecRef

; 3364 :     value = ast2obj_identifier(o->vararg);

  000d0	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000d5	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000d9	e8 00 00 00 00	 call	 ast2obj_object
  000de	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3365 :     if (!value) goto failed;

  000e3	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000e9	75 05		 jne	 SHORT $LN22@ast2obj_ar
  000eb	e9 93 02 00 00	 jmp	 $failed$24451
$LN22@ast2obj_ar:

; 3366 :     if (_PyObject_SetAttrId(result, &PyId_vararg, value) == -1)

  000f0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_vararg
  000f5	8b c0		 mov	 eax, eax
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000fd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00106	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0010a	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0010f	48 8b d0	 mov	 rdx, rax
  00112	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00117	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0011c	83 f8 ff	 cmp	 eax, -1
  0011f	75 05		 jne	 SHORT $LN21@ast2obj_ar

; 3367 :         goto failed;

  00121	e9 5d 02 00 00	 jmp	 $failed$24451
$LN21@ast2obj_ar:

; 3368 :     Py_DECREF(value);

  00126	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0012b	e8 00 00 00 00	 call	 _Py_DecRef

; 3369 :     value = ast2obj_expr(o->varargannotation);

  00130	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00135	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00139	e8 00 00 00 00	 call	 ast2obj_expr
  0013e	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3370 :     if (!value) goto failed;

  00143	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00149	75 05		 jne	 SHORT $LN20@ast2obj_ar
  0014b	e9 33 02 00 00	 jmp	 $failed$24451
$LN20@ast2obj_ar:

; 3371 :     if (_PyObject_SetAttrId(result, &PyId_varargannotation, value) == -1)

  00150	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_varargannotation
  00155	8b c0		 mov	 eax, eax
  00157	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0015d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00166	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0016a	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0016f	48 8b d0	 mov	 rdx, rax
  00172	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00177	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0017c	83 f8 ff	 cmp	 eax, -1
  0017f	75 05		 jne	 SHORT $LN19@ast2obj_ar

; 3372 :         goto failed;

  00181	e9 fd 01 00 00	 jmp	 $failed$24451
$LN19@ast2obj_ar:

; 3373 :     Py_DECREF(value);

  00186	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0018b	e8 00 00 00 00	 call	 _Py_DecRef

; 3374 :     value = ast2obj_list(o->kwonlyargs, ast2obj_arg);

  00190	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_arg
  00197	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0019c	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  001a0	e8 00 00 00 00	 call	 ast2obj_list
  001a5	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3375 :     if (!value) goto failed;

  001aa	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  001b0	75 05		 jne	 SHORT $LN18@ast2obj_ar
  001b2	e9 cc 01 00 00	 jmp	 $failed$24451
$LN18@ast2obj_ar:

; 3376 :     if (_PyObject_SetAttrId(result, &PyId_kwonlyargs, value) == -1)

  001b7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwonlyargs
  001bc	8b c0		 mov	 eax, eax
  001be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001c4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001cd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001d1	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  001d6	48 8b d0	 mov	 rdx, rax
  001d9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  001de	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001e3	83 f8 ff	 cmp	 eax, -1
  001e6	75 05		 jne	 SHORT $LN17@ast2obj_ar

; 3377 :         goto failed;

  001e8	e9 96 01 00 00	 jmp	 $failed$24451
$LN17@ast2obj_ar:

; 3378 :     Py_DECREF(value);

  001ed	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  001f2	e8 00 00 00 00	 call	 _Py_DecRef

; 3379 :     value = ast2obj_identifier(o->kwarg);

  001f7	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  001fc	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00200	e8 00 00 00 00	 call	 ast2obj_object
  00205	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3380 :     if (!value) goto failed;

  0020a	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00210	75 05		 jne	 SHORT $LN16@ast2obj_ar
  00212	e9 6c 01 00 00	 jmp	 $failed$24451
$LN16@ast2obj_ar:

; 3381 :     if (_PyObject_SetAttrId(result, &PyId_kwarg, value) == -1)

  00217	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwarg
  0021c	8b c0		 mov	 eax, eax
  0021e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00224	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0022d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00231	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00236	48 8b d0	 mov	 rdx, rax
  00239	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0023e	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00243	83 f8 ff	 cmp	 eax, -1
  00246	75 05		 jne	 SHORT $LN15@ast2obj_ar

; 3382 :         goto failed;

  00248	e9 36 01 00 00	 jmp	 $failed$24451
$LN15@ast2obj_ar:

; 3383 :     Py_DECREF(value);

  0024d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00252	e8 00 00 00 00	 call	 _Py_DecRef

; 3384 :     value = ast2obj_expr(o->kwargannotation);

  00257	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0025c	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00260	e8 00 00 00 00	 call	 ast2obj_expr
  00265	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3385 :     if (!value) goto failed;

  0026a	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00270	75 05		 jne	 SHORT $LN14@ast2obj_ar
  00272	e9 0c 01 00 00	 jmp	 $failed$24451
$LN14@ast2obj_ar:

; 3386 :     if (_PyObject_SetAttrId(result, &PyId_kwargannotation, value) == -1)

  00277	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwargannotation
  0027c	8b c0		 mov	 eax, eax
  0027e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00284	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0028d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00291	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00296	48 8b d0	 mov	 rdx, rax
  00299	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0029e	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  002a3	83 f8 ff	 cmp	 eax, -1
  002a6	75 05		 jne	 SHORT $LN13@ast2obj_ar

; 3387 :         goto failed;

  002a8	e9 d6 00 00 00	 jmp	 $failed$24451
$LN13@ast2obj_ar:

; 3388 :     Py_DECREF(value);

  002ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  002b2	e8 00 00 00 00	 call	 _Py_DecRef

; 3389 :     value = ast2obj_list(o->defaults, ast2obj_expr);

  002b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  002be	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  002c3	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  002c7	e8 00 00 00 00	 call	 ast2obj_list
  002cc	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3390 :     if (!value) goto failed;

  002d1	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  002d7	75 05		 jne	 SHORT $LN12@ast2obj_ar
  002d9	e9 a5 00 00 00	 jmp	 $failed$24451
$LN12@ast2obj_ar:

; 3391 :     if (_PyObject_SetAttrId(result, &PyId_defaults, value) == -1)

  002de	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_defaults
  002e3	8b c0		 mov	 eax, eax
  002e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002eb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002f4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002f8	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  002fd	48 8b d0	 mov	 rdx, rax
  00300	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00305	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0030a	83 f8 ff	 cmp	 eax, -1
  0030d	75 02		 jne	 SHORT $LN11@ast2obj_ar

; 3392 :         goto failed;

  0030f	eb 72		 jmp	 SHORT $failed$24451
$LN11@ast2obj_ar:

; 3393 :     Py_DECREF(value);

  00311	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00316	e8 00 00 00 00	 call	 _Py_DecRef

; 3394 :     value = ast2obj_list(o->kw_defaults, ast2obj_expr);

  0031b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ast2obj_expr
  00322	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  00327	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0032b	e8 00 00 00 00	 call	 ast2obj_list
  00330	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3395 :     if (!value) goto failed;

  00335	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0033b	75 02		 jne	 SHORT $LN10@ast2obj_ar
  0033d	eb 44		 jmp	 SHORT $failed$24451
$LN10@ast2obj_ar:

; 3396 :     if (_PyObject_SetAttrId(result, &PyId_kw_defaults, value) == -1)

  0033f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kw_defaults
  00344	8b c0		 mov	 eax, eax
  00346	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0034c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00355	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00359	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  0035e	48 8b d0	 mov	 rdx, rax
  00361	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00366	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0036b	83 f8 ff	 cmp	 eax, -1
  0036e	75 02		 jne	 SHORT $LN9@ast2obj_ar

; 3397 :         goto failed;

  00370	eb 11		 jmp	 SHORT $failed$24451
$LN9@ast2obj_ar:

; 3398 :     Py_DECREF(value);

  00372	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00377	e8 00 00 00 00	 call	 _Py_DecRef

; 3399 :     return result;

  0037c	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  00381	eb 32		 jmp	 SHORT $LN27@ast2obj_ar
$failed$24451:
$LN8@ast2obj_ar:

; 3400 : failed:
; 3401 :     Py_XDECREF(value);

  00383	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00389	74 0a		 je	 SHORT $LN5@ast2obj_ar
  0038b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00390	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ast2obj_ar:
  00395	33 c0		 xor	 eax, eax
  00397	85 c0		 test	 eax, eax
  00399	75 e8		 jne	 SHORT $LN8@ast2obj_ar
$LN4@ast2obj_ar:

; 3402 :     Py_XDECREF(result);

  0039b	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  003a1	74 0a		 je	 SHORT $LN1@ast2obj_ar
  003a3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  003a8	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast2obj_ar:
  003ad	33 c0		 xor	 eax, eax
  003af	85 c0		 test	 eax, eax
  003b1	75 e8		 jne	 SHORT $LN4@ast2obj_ar

; 3403 :     return NULL;

  003b3	33 c0		 xor	 eax, eax
$LN27@ast2obj_ar:

; 3404 : }

  003b5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  003b9	c3		 ret	 0
ast2obj_arguments ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_arg DD imagerel ast2obj_arg
	DD	imagerel ast2obj_arg+350
	DD	imagerel $unwind$ast2obj_arg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_arg DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_arg
_TEXT	SEGMENT
value$ = 32
result$ = 40
o$ = 48
_o$ = 80
ast2obj_arg PROC					; COMDAT

; 3408 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3409 :     arg_ty o = (arg_ty)_o;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR _o$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 3410 :     PyObject *result = NULL, *value = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 3411 :     if (!o) {

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002b	75 18		 jne	 SHORT $LN14@ast2obj_ar@2

; 3412 :         Py_INCREF(Py_None);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00034	e8 00 00 00 00	 call	 _Py_IncRef

; 3413 :         return Py_None;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00040	e9 14 01 00 00	 jmp	 $LN15@ast2obj_ar@2
$LN14@ast2obj_ar@2:

; 3414 :     }
; 3415 : 
; 3416 :     result = PyType_GenericNew(arg_type, NULL, NULL);

  00045	45 33 c0	 xor	 r8d, r8d
  00048	33 d2		 xor	 edx, edx
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR arg_type
  00051	e8 00 00 00 00	 call	 PyType_GenericNew
  00056	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3417 :     if (!result) return NULL;

  0005b	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00061	75 07		 jne	 SHORT $LN13@ast2obj_ar@2
  00063	33 c0		 xor	 eax, eax
  00065	e9 ef 00 00 00	 jmp	 $LN15@ast2obj_ar@2
$LN13@ast2obj_ar@2:

; 3418 :     value = ast2obj_identifier(o->arg);

  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0006f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00072	e8 00 00 00 00	 call	 ast2obj_object
  00077	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3419 :     if (!value) goto failed;

  0007c	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00082	75 05		 jne	 SHORT $LN12@ast2obj_ar@2
  00084	e9 9e 00 00 00	 jmp	 $failed$24502
$LN12@ast2obj_ar@2:

; 3420 :     if (_PyObject_SetAttrId(result, &PyId_arg, value) == -1)

  00089	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_arg
  0008e	8b c0		 mov	 eax, eax
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00096	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0009f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000a3	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000a8	48 8b d0	 mov	 rdx, rax
  000ab	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000b0	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000b5	83 f8 ff	 cmp	 eax, -1
  000b8	75 02		 jne	 SHORT $LN11@ast2obj_ar@2

; 3421 :         goto failed;

  000ba	eb 6b		 jmp	 SHORT $failed$24502
$LN11@ast2obj_ar@2:

; 3422 :     Py_DECREF(value);

  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef

; 3423 :     value = ast2obj_expr(o->annotation);

  000c6	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000cb	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000cf	e8 00 00 00 00	 call	 ast2obj_expr
  000d4	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3424 :     if (!value) goto failed;

  000d9	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000df	75 02		 jne	 SHORT $LN10@ast2obj_ar@2
  000e1	eb 44		 jmp	 SHORT $failed$24502
$LN10@ast2obj_ar@2:

; 3425 :     if (_PyObject_SetAttrId(result, &PyId_annotation, value) == -1)

  000e3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_annotation
  000e8	8b c0		 mov	 eax, eax
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000f0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000f9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000fd	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00102	48 8b d0	 mov	 rdx, rax
  00105	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0010a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0010f	83 f8 ff	 cmp	 eax, -1
  00112	75 02		 jne	 SHORT $LN9@ast2obj_ar@2

; 3426 :         goto failed;

  00114	eb 11		 jmp	 SHORT $failed$24502
$LN9@ast2obj_ar@2:

; 3427 :     Py_DECREF(value);

  00116	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0011b	e8 00 00 00 00	 call	 _Py_DecRef

; 3428 :     return result;

  00120	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  00125	eb 32		 jmp	 SHORT $LN15@ast2obj_ar@2
$failed$24502:
$LN8@ast2obj_ar@2:

; 3429 : failed:
; 3430 :     Py_XDECREF(value);

  00127	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0012d	74 0a		 je	 SHORT $LN5@ast2obj_ar@2
  0012f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00134	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ast2obj_ar@2:
  00139	33 c0		 xor	 eax, eax
  0013b	85 c0		 test	 eax, eax
  0013d	75 e8		 jne	 SHORT $LN8@ast2obj_ar@2
$LN4@ast2obj_ar@2:

; 3431 :     Py_XDECREF(result);

  0013f	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00145	74 0a		 je	 SHORT $LN1@ast2obj_ar@2
  00147	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0014c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast2obj_ar@2:
  00151	33 c0		 xor	 eax, eax
  00153	85 c0		 test	 eax, eax
  00155	75 e8		 jne	 SHORT $LN4@ast2obj_ar@2

; 3432 :     return NULL;

  00157	33 c0		 xor	 eax, eax
$LN15@ast2obj_ar@2:

; 3433 : }

  00159	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0015d	c3		 ret	 0
ast2obj_arg ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_keyword DD imagerel ast2obj_keyword
	DD	imagerel ast2obj_keyword+350
	DD	imagerel $unwind$ast2obj_keyword
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_keyword DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_keyword
_TEXT	SEGMENT
value$ = 32
result$ = 40
o$ = 48
_o$ = 80
ast2obj_keyword PROC					; COMDAT

; 3437 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3438 :     keyword_ty o = (keyword_ty)_o;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR _o$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 3439 :     PyObject *result = NULL, *value = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 3440 :     if (!o) {

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002b	75 18		 jne	 SHORT $LN14@ast2obj_ke

; 3441 :         Py_INCREF(Py_None);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00034	e8 00 00 00 00	 call	 _Py_IncRef

; 3442 :         return Py_None;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00040	e9 14 01 00 00	 jmp	 $LN15@ast2obj_ke
$LN14@ast2obj_ke:

; 3443 :     }
; 3444 : 
; 3445 :     result = PyType_GenericNew(keyword_type, NULL, NULL);

  00045	45 33 c0	 xor	 r8d, r8d
  00048	33 d2		 xor	 edx, edx
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR keyword_type
  00051	e8 00 00 00 00	 call	 PyType_GenericNew
  00056	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3446 :     if (!result) return NULL;

  0005b	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00061	75 07		 jne	 SHORT $LN13@ast2obj_ke
  00063	33 c0		 xor	 eax, eax
  00065	e9 ef 00 00 00	 jmp	 $LN15@ast2obj_ke
$LN13@ast2obj_ke:

; 3447 :     value = ast2obj_identifier(o->arg);

  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0006f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00072	e8 00 00 00 00	 call	 ast2obj_object
  00077	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3448 :     if (!value) goto failed;

  0007c	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00082	75 05		 jne	 SHORT $LN12@ast2obj_ke
  00084	e9 9e 00 00 00	 jmp	 $failed$24535
$LN12@ast2obj_ke:

; 3449 :     if (_PyObject_SetAttrId(result, &PyId_arg, value) == -1)

  00089	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_arg
  0008e	8b c0		 mov	 eax, eax
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00096	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0009f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000a3	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000a8	48 8b d0	 mov	 rdx, rax
  000ab	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000b0	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000b5	83 f8 ff	 cmp	 eax, -1
  000b8	75 02		 jne	 SHORT $LN11@ast2obj_ke

; 3450 :         goto failed;

  000ba	eb 6b		 jmp	 SHORT $failed$24535
$LN11@ast2obj_ke:

; 3451 :     Py_DECREF(value);

  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef

; 3452 :     value = ast2obj_expr(o->value);

  000c6	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000cb	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000cf	e8 00 00 00 00	 call	 ast2obj_expr
  000d4	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3453 :     if (!value) goto failed;

  000d9	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000df	75 02		 jne	 SHORT $LN10@ast2obj_ke
  000e1	eb 44		 jmp	 SHORT $failed$24535
$LN10@ast2obj_ke:

; 3454 :     if (_PyObject_SetAttrId(result, &PyId_value, value) == -1)

  000e3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  000e8	8b c0		 mov	 eax, eax
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000f0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000f9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000fd	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00102	48 8b d0	 mov	 rdx, rax
  00105	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0010a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0010f	83 f8 ff	 cmp	 eax, -1
  00112	75 02		 jne	 SHORT $LN9@ast2obj_ke

; 3455 :         goto failed;

  00114	eb 11		 jmp	 SHORT $failed$24535
$LN9@ast2obj_ke:

; 3456 :     Py_DECREF(value);

  00116	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0011b	e8 00 00 00 00	 call	 _Py_DecRef

; 3457 :     return result;

  00120	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  00125	eb 32		 jmp	 SHORT $LN15@ast2obj_ke
$failed$24535:
$LN8@ast2obj_ke:

; 3458 : failed:
; 3459 :     Py_XDECREF(value);

  00127	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0012d	74 0a		 je	 SHORT $LN5@ast2obj_ke
  0012f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00134	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ast2obj_ke:
  00139	33 c0		 xor	 eax, eax
  0013b	85 c0		 test	 eax, eax
  0013d	75 e8		 jne	 SHORT $LN8@ast2obj_ke
$LN4@ast2obj_ke:

; 3460 :     Py_XDECREF(result);

  0013f	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00145	74 0a		 je	 SHORT $LN1@ast2obj_ke
  00147	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0014c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast2obj_ke:
  00151	33 c0		 xor	 eax, eax
  00153	85 c0		 test	 eax, eax
  00155	75 e8		 jne	 SHORT $LN4@ast2obj_ke

; 3461 :     return NULL;

  00157	33 c0		 xor	 eax, eax
$LN15@ast2obj_ke:

; 3462 : }

  00159	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0015d	c3		 ret	 0
ast2obj_keyword ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_alias DD imagerel ast2obj_alias
	DD	imagerel ast2obj_alias+350
	DD	imagerel $unwind$ast2obj_alias
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_alias DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_alias
_TEXT	SEGMENT
value$ = 32
result$ = 40
o$ = 48
_o$ = 80
ast2obj_alias PROC					; COMDAT

; 3466 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3467 :     alias_ty o = (alias_ty)_o;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR _o$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 3468 :     PyObject *result = NULL, *value = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 3469 :     if (!o) {

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002b	75 18		 jne	 SHORT $LN14@ast2obj_al

; 3470 :         Py_INCREF(Py_None);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00034	e8 00 00 00 00	 call	 _Py_IncRef

; 3471 :         return Py_None;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00040	e9 14 01 00 00	 jmp	 $LN15@ast2obj_al
$LN14@ast2obj_al:

; 3472 :     }
; 3473 : 
; 3474 :     result = PyType_GenericNew(alias_type, NULL, NULL);

  00045	45 33 c0	 xor	 r8d, r8d
  00048	33 d2		 xor	 edx, edx
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR alias_type
  00051	e8 00 00 00 00	 call	 PyType_GenericNew
  00056	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3475 :     if (!result) return NULL;

  0005b	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00061	75 07		 jne	 SHORT $LN13@ast2obj_al
  00063	33 c0		 xor	 eax, eax
  00065	e9 ef 00 00 00	 jmp	 $LN15@ast2obj_al
$LN13@ast2obj_al:

; 3476 :     value = ast2obj_identifier(o->name);

  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0006f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00072	e8 00 00 00 00	 call	 ast2obj_object
  00077	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3477 :     if (!value) goto failed;

  0007c	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00082	75 05		 jne	 SHORT $LN12@ast2obj_al
  00084	e9 9e 00 00 00	 jmp	 $failed$24568
$LN12@ast2obj_al:

; 3478 :     if (_PyObject_SetAttrId(result, &PyId_name, value) == -1)

  00089	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  0008e	8b c0		 mov	 eax, eax
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00096	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0009f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000a3	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000a8	48 8b d0	 mov	 rdx, rax
  000ab	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000b0	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000b5	83 f8 ff	 cmp	 eax, -1
  000b8	75 02		 jne	 SHORT $LN11@ast2obj_al

; 3479 :         goto failed;

  000ba	eb 6b		 jmp	 SHORT $failed$24568
$LN11@ast2obj_al:

; 3480 :     Py_DECREF(value);

  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef

; 3481 :     value = ast2obj_identifier(o->asname);

  000c6	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000cb	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000cf	e8 00 00 00 00	 call	 ast2obj_object
  000d4	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3482 :     if (!value) goto failed;

  000d9	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000df	75 02		 jne	 SHORT $LN10@ast2obj_al
  000e1	eb 44		 jmp	 SHORT $failed$24568
$LN10@ast2obj_al:

; 3483 :     if (_PyObject_SetAttrId(result, &PyId_asname, value) == -1)

  000e3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_asname
  000e8	8b c0		 mov	 eax, eax
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000f0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000f9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000fd	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00102	48 8b d0	 mov	 rdx, rax
  00105	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0010a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0010f	83 f8 ff	 cmp	 eax, -1
  00112	75 02		 jne	 SHORT $LN9@ast2obj_al

; 3484 :         goto failed;

  00114	eb 11		 jmp	 SHORT $failed$24568
$LN9@ast2obj_al:

; 3485 :     Py_DECREF(value);

  00116	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0011b	e8 00 00 00 00	 call	 _Py_DecRef

; 3486 :     return result;

  00120	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  00125	eb 32		 jmp	 SHORT $LN15@ast2obj_al
$failed$24568:
$LN8@ast2obj_al:

; 3487 : failed:
; 3488 :     Py_XDECREF(value);

  00127	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0012d	74 0a		 je	 SHORT $LN5@ast2obj_al
  0012f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00134	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ast2obj_al:
  00139	33 c0		 xor	 eax, eax
  0013b	85 c0		 test	 eax, eax
  0013d	75 e8		 jne	 SHORT $LN8@ast2obj_al
$LN4@ast2obj_al:

; 3489 :     Py_XDECREF(result);

  0013f	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00145	74 0a		 je	 SHORT $LN1@ast2obj_al
  00147	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0014c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast2obj_al:
  00151	33 c0		 xor	 eax, eax
  00153	85 c0		 test	 eax, eax
  00155	75 e8		 jne	 SHORT $LN4@ast2obj_al

; 3490 :     return NULL;

  00157	33 c0		 xor	 eax, eax
$LN15@ast2obj_al:

; 3491 : }

  00159	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0015d	c3		 ret	 0
ast2obj_alias ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ast2obj_withitem DD imagerel ast2obj_withitem
	DD	imagerel ast2obj_withitem+350
	DD	imagerel $unwind$ast2obj_withitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ast2obj_withitem DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ast2obj_withitem
_TEXT	SEGMENT
value$ = 32
result$ = 40
o$ = 48
_o$ = 80
ast2obj_withitem PROC					; COMDAT

; 3495 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3496 :     withitem_ty o = (withitem_ty)_o;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR _o$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 3497 :     PyObject *result = NULL, *value = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 3498 :     if (!o) {

  00025	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$[rsp], 0
  0002b	75 18		 jne	 SHORT $LN14@ast2obj_wi

; 3499 :         Py_INCREF(Py_None);

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00034	e8 00 00 00 00	 call	 _Py_IncRef

; 3500 :         return Py_None;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00040	e9 14 01 00 00	 jmp	 $LN15@ast2obj_wi
$LN14@ast2obj_wi:

; 3501 :     }
; 3502 : 
; 3503 :     result = PyType_GenericNew(withitem_type, NULL, NULL);

  00045	45 33 c0	 xor	 r8d, r8d
  00048	33 d2		 xor	 edx, edx
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR withitem_type
  00051	e8 00 00 00 00	 call	 PyType_GenericNew
  00056	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3504 :     if (!result) return NULL;

  0005b	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00061	75 07		 jne	 SHORT $LN13@ast2obj_wi
  00063	33 c0		 xor	 eax, eax
  00065	e9 ef 00 00 00	 jmp	 $LN15@ast2obj_wi
$LN13@ast2obj_wi:

; 3505 :     value = ast2obj_expr(o->context_expr);

  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  0006f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00072	e8 00 00 00 00	 call	 ast2obj_expr
  00077	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3506 :     if (!value) goto failed;

  0007c	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00082	75 05		 jne	 SHORT $LN12@ast2obj_wi
  00084	e9 9e 00 00 00	 jmp	 $failed$24601
$LN12@ast2obj_wi:

; 3507 :     if (_PyObject_SetAttrId(result, &PyId_context_expr, value) == -1)

  00089	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_context_expr
  0008e	8b c0		 mov	 eax, eax
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00096	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0009f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000a3	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  000a8	48 8b d0	 mov	 rdx, rax
  000ab	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000b0	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000b5	83 f8 ff	 cmp	 eax, -1
  000b8	75 02		 jne	 SHORT $LN11@ast2obj_wi

; 3508 :         goto failed;

  000ba	eb 6b		 jmp	 SHORT $failed$24601
$LN11@ast2obj_wi:

; 3509 :     Py_DECREF(value);

  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef

; 3510 :     value = ast2obj_expr(o->optional_vars);

  000c6	48 8b 44 24 30	 mov	 rax, QWORD PTR o$[rsp]
  000cb	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000cf	e8 00 00 00 00	 call	 ast2obj_expr
  000d4	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3511 :     if (!value) goto failed;

  000d9	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000df	75 02		 jne	 SHORT $LN10@ast2obj_wi
  000e1	eb 44		 jmp	 SHORT $failed$24601
$LN10@ast2obj_wi:

; 3512 :     if (_PyObject_SetAttrId(result, &PyId_optional_vars, value) == -1)

  000e3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_optional_vars
  000e8	8b c0		 mov	 eax, eax
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000f0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000f9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000fd	4c 8b 44 24 20	 mov	 r8, QWORD PTR value$[rsp]
  00102	48 8b d0	 mov	 rdx, rax
  00105	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0010a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0010f	83 f8 ff	 cmp	 eax, -1
  00112	75 02		 jne	 SHORT $LN9@ast2obj_wi

; 3513 :         goto failed;

  00114	eb 11		 jmp	 SHORT $failed$24601
$LN9@ast2obj_wi:

; 3514 :     Py_DECREF(value);

  00116	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0011b	e8 00 00 00 00	 call	 _Py_DecRef

; 3515 :     return result;

  00120	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  00125	eb 32		 jmp	 SHORT $LN15@ast2obj_wi
$failed$24601:
$LN8@ast2obj_wi:

; 3516 : failed:
; 3517 :     Py_XDECREF(value);

  00127	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0012d	74 0a		 je	 SHORT $LN5@ast2obj_wi
  0012f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00134	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ast2obj_wi:
  00139	33 c0		 xor	 eax, eax
  0013b	85 c0		 test	 eax, eax
  0013d	75 e8		 jne	 SHORT $LN8@ast2obj_wi
$LN4@ast2obj_wi:

; 3518 :     Py_XDECREF(result);

  0013f	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00145	74 0a		 je	 SHORT $LN1@ast2obj_wi
  00147	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0014c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ast2obj_wi:
  00151	33 c0		 xor	 eax, eax
  00153	85 c0		 test	 eax, eax
  00155	75 e8		 jne	 SHORT $LN4@ast2obj_wi

; 3519 :     return NULL;

  00157	33 c0		 xor	 eax, eax
$LN15@ast2obj_wi:

; 3520 : }

  00159	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0015d	c3		 ret	 0
ast2obj_withitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@OEMLNFOL@expected?5?$CFs?5node?0?5got?5?$CF?4400s?$AA@ ; `string'
PUBLIC	??_C@_1CO@FDPFCAJD@?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA2?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	PyAST_obj2mod
EXTRN	PyObject_IsInstance:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyAST_obj2mod DD imagerel $LN9
	DD	imagerel $LN9+278
	DD	imagerel $unwind$PyAST_obj2mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyAST_obj2mod DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0BN@OEMLNFOL@expected?5?$CFs?5node?0?5got?5?$CF?4400s?$AA@
CONST	SEGMENT
??_C@_0BN@OEMLNFOL@expected?5?$CFs?5node?0?5got?5?$CF?4400s?$AA@ DB 'expe'
	DB	'cted %s node, got %.400s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@FDPFCAJD@?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@FDPFCAJD@?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA2?$AA?$AA@ DB '0'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'm', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'm'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, '2', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h'
	DB	00H, 'o', 00H, 'n', 00H, '-', 00H, 'a', 00H, 's', 00H, 't', 00H
	DB	'.', 00H, 'c', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyAST_obj2mod
_TEXT	SEGMENT
res$ = 32
req_name$ = 40
req_type$ = 64
isinstance$ = 88
ast$ = 112
arena$ = 120
mode$ = 128
PyAST_obj2mod PROC					; COMDAT

; 6958 : {

$LN9:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 6959 :     mod_ty res;
; 6960 :     PyObject *req_type[3];
; 6961 :     char *req_name[] = {"Module", "Expression", "Interactive"};

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06NHPJKFDC@Module?$AA@
  0001a	48 89 44 24 28	 mov	 QWORD PTR req_name$[rsp], rax
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@NMLOJPGF@Expression?$AA@
  00026	48 89 44 24 30	 mov	 QWORD PTR req_name$[rsp+8], rax
  0002b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@INEKDBAI@Interactive?$AA@
  00032	48 89 44 24 38	 mov	 QWORD PTR req_name$[rsp+16], rax

; 6962 :     int isinstance;
; 6963 : 
; 6964 :     req_type[0] = (PyObject*)Module_type;

  00037	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Module_type
  0003e	48 89 44 24 40	 mov	 QWORD PTR req_type$[rsp], rax

; 6965 :     req_type[1] = (PyObject*)Expression_type;

  00043	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Expression_type
  0004a	48 89 44 24 48	 mov	 QWORD PTR req_type$[rsp+8], rax

; 6966 :     req_type[2] = (PyObject*)Interactive_type;

  0004f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Interactive_type
  00056	48 89 44 24 50	 mov	 QWORD PTR req_type$[rsp+16], rax

; 6967 : 
; 6968 :     assert(0 <= mode && mode <= 2);

  0005b	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR mode$[rsp], 0
  00063	7c 0a		 jl	 SHORT $LN7@PyAST_obj2
  00065	83 bc 24 80 00
	00 00 02	 cmp	 DWORD PTR mode$[rsp], 2
  0006d	7e 1c		 jle	 SHORT $LN8@PyAST_obj2
$LN7@PyAST_obj2:
  0006f	41 b8 38 1b 00
	00		 mov	 r8d, 6968		; 00001b38H
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@FDPFCAJD@?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA2?$AA?$AA@
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00089	33 c0		 xor	 eax, eax
$LN8@PyAST_obj2:

; 6969 : 
; 6970 :     init_types();

  0008b	e8 00 00 00 00	 call	 init_types

; 6971 : 
; 6972 :     isinstance = PyObject_IsInstance(ast, req_type[mode]);

  00090	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  00098	48 8b 54 c4 40	 mov	 rdx, QWORD PTR req_type$[rsp+rax*8]
  0009d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ast$[rsp]
  000a2	e8 00 00 00 00	 call	 PyObject_IsInstance
  000a7	89 44 24 58	 mov	 DWORD PTR isinstance$[rsp], eax

; 6973 :     if (isinstance == -1)

  000ab	83 7c 24 58 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  000b0	75 04		 jne	 SHORT $LN4@PyAST_obj2

; 6974 :         return NULL;

  000b2	33 c0		 xor	 eax, eax
  000b4	eb 5b		 jmp	 SHORT $LN5@PyAST_obj2
$LN4@PyAST_obj2:

; 6975 :     if (!isinstance) {

  000b6	83 7c 24 58 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  000bb	75 31		 jne	 SHORT $LN3@PyAST_obj2

; 6976 :         PyErr_Format(PyExc_TypeError, "expected %s node, got %.400s",
; 6977 :                      req_name[mode], Py_TYPE(ast)->tp_name);

  000bd	48 8b 44 24 70	 mov	 rax, QWORD PTR ast$[rsp]
  000c2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c6	48 63 8c 24 80
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  000ce	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  000d2	4c 8b 44 cc 28	 mov	 r8, QWORD PTR req_name$[rsp+rcx*8]
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@OEMLNFOL@expected?5?$CFs?5node?0?5got?5?$CF?4400s?$AA@
  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000e5	e8 00 00 00 00	 call	 PyErr_Format

; 6978 :         return NULL;

  000ea	33 c0		 xor	 eax, eax
  000ec	eb 23		 jmp	 SHORT $LN5@PyAST_obj2
$LN3@PyAST_obj2:

; 6979 :     }
; 6980 :     if (obj2ast_mod(ast, &res, arena) != 0)

  000ee	4c 8b 44 24 78	 mov	 r8, QWORD PTR arena$[rsp]
  000f3	48 8d 54 24 20	 lea	 rdx, QWORD PTR res$[rsp]
  000f8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ast$[rsp]
  000fd	e8 00 00 00 00	 call	 obj2ast_mod
  00102	85 c0		 test	 eax, eax
  00104	74 06		 je	 SHORT $LN2@PyAST_obj2

; 6981 :         return NULL;

  00106	33 c0		 xor	 eax, eax
  00108	eb 07		 jmp	 SHORT $LN5@PyAST_obj2

; 6982 :     else

  0010a	eb 05		 jmp	 SHORT $LN1@PyAST_obj2
$LN2@PyAST_obj2:

; 6983 :         return res;

  0010c	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN1@PyAST_obj2:
$LN5@PyAST_obj2:

; 6984 : }

  00111	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00115	c3		 ret	 0
PyAST_obj2mod ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@KBNAANJO@expected?5some?5sort?5of?5mod?0?5but?5g@ ; `string'
PUBLIC	??_C@_0CJ@DAPFNIEF@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DA@CMKPFGKO@Suite?5field?5?$CCbody?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0CO@KHBECONP@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CP@KGIFMBCL@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DG@BHFFGJPL@Interactive?5field?5?$CCbody?$CC?5must?5be@ ; `string'
PUBLIC	??_C@_0CK@MEFNIBBA@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0M@HADBOJMD@obj2ast_mod?$AA@		; `string'
PUBLIC	??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@ ; `string'
PUBLIC	??_C@_0DB@BLHMLCNG@Module?5field?5?$CCbody?$CC?5must?5be?5a?5li@ ; `string'
EXTRN	asdl_seq_new:PROC
EXTRN	_PyObject_HasAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_mod DD imagerel obj2ast_mod
	DD	imagerel obj2ast_mod+2501
	DD	imagerel $unwind$obj2ast_mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_mod DD 021601H
	DD	0210116H
xdata	ENDS
;	COMDAT ??_C@_0CG@KBNAANJO@expected?5some?5sort?5of?5mod?0?5but?5g@
CONST	SEGMENT
??_C@_0CG@KBNAANJO@expected?5some?5sort?5of?5mod?0?5but?5g@ DB 'expected '
	DB	'some sort of mod, but got %R', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DAPFNIEF@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@DAPFNIEF@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Suite', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CMKPFGKO@Suite?5field?5?$CCbody?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@CMKPFGKO@Suite?5field?5?$CCbody?$CC?5must?5be?5a?5lis@ DB 'Suit'
	DB	'e field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KHBECONP@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CO@KHBECONP@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Expression', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@KGIFMBCL@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CP@KGIFMBCL@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Interactive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@BHFFGJPL@Interactive?5field?5?$CCbody?$CC?5must?5be@
CONST	SEGMENT
??_C@_0DG@BHFFGJPL@Interactive?5field?5?$CCbody?$CC?5must?5be@ DB 'Intera'
	DB	'ctive field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MEFNIBBA@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CK@MEFNIBBA@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Module', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HADBOJMD@obj2ast_mod?$AA@
CONST	SEGMENT
??_C@_0M@HADBOJMD@obj2ast_mod?$AA@ DB 'obj2ast_mod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
CONST	SEGMENT
??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@ DB '('
	DB	00H, 'b', 00H, 'o', 00H, 'd', 00H, 'y', 00H, ')', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H, 'd'
	DB	00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'(', 00H, 'b', 00H, 'o', 00H, 'd', 00H, 'y', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BLHMLCNG@Module?5field?5?$CCbody?$CC?5must?5be?5a?5li@
CONST	SEGMENT
??_C@_0DB@BLHMLCNG@Module?5field?5?$CCbody?$CC?5must?5be?5a?5li@ DB 'Modu'
	DB	'le field "body" must be a list, not a %.200s', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_mod
_TEXT	SEGMENT
tmp$ = 48
isinstance$ = 56
body$24633 = 64
res$24635 = 72
i$24637 = 80
len$24636 = 88
value$24650 = 96
_asdl_i$24653 = 104
_py_tmp$24662 = 112
body$24673 = 120
res$24675 = 128
i$24677 = 136
len$24676 = 144
value$24689 = 152
_asdl_i$24692 = 160
_py_tmp$24698 = 168
body$24709 = 176
res$24711 = 184
_py_tmp$24719 = 192
body$24730 = 200
res$24732 = 208
i$24734 = 216
len$24733 = 224
value$24746 = 232
_asdl_i$24749 = 240
_py_tmp$24755 = 248
obj$ = 272
out$ = 280
arena$ = 288
obj2ast_mod PROC					; COMDAT

; 3525 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 3526 :     int isinstance;
; 3527 : 
; 3528 :     PyObject *tmp = NULL;

  00016	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 3529 : 
; 3530 :     if (obj == Py_None) {

  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00026	48 39 84 24 10
	01 00 00	 cmp	 QWORD PTR obj$[rsp], rax
  0002e	75 16		 jne	 SHORT $LN64@obj2ast_mo

; 3531 :         *out = NULL;

  00030	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00038	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 3532 :         return 0;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 77 09 00 00	 jmp	 $LN65@obj2ast_mo
$LN64@obj2ast_mo:

; 3533 :     }
; 3534 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Module_type);

  00046	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Module_type
  0004d	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00055	e8 00 00 00 00	 call	 PyObject_IsInstance
  0005a	89 44 24 38	 mov	 DWORD PTR isinstance$[rsp], eax

; 3535 :     if (isinstance == -1) {

  0005e	83 7c 24 38 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00063	75 0a		 jne	 SHORT $LN63@obj2ast_mo

; 3536 :         return 1;

  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	e9 4e 09 00 00	 jmp	 $LN65@obj2ast_mo
$LN63@obj2ast_mo:

; 3537 :     }
; 3538 :     if (isinstance) {

  0006f	83 7c 24 38 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00074	0f 84 38 02 00
	00		 je	 $LN62@obj2ast_mo

; 3539 :         asdl_seq* body;
; 3540 : 
; 3541 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  0007a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  0007f	8b c0		 mov	 eax, eax
  00081	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00087	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00090	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00094	48 8b d0	 mov	 rdx, rax
  00097	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0009f	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  000a4	85 c0		 test	 eax, eax
  000a6	0f 84 b2 01 00
	00		 je	 $LN61@obj2ast_mo

; 3542 :             int res;
; 3543 :             Py_ssize_t len;
; 3544 :             Py_ssize_t i;
; 3545 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  000ac	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  000b1	8b c0		 mov	 eax, eax
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000b9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000c2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000c6	48 8b d0	 mov	 rdx, rax
  000c9	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  000d1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000d6	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 3546 :             if (tmp == NULL) goto failed;

  000db	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000e1	75 05		 jne	 SHORT $LN60@obj2ast_mo
  000e3	e9 b8 08 00 00	 jmp	 $failed$24640
$LN60@obj2ast_mo:

; 3547 :             if (!PyList_Check(tmp)) {

  000e8	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  000ed	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f7	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  000fc	85 c0		 test	 eax, eax
  000fe	75 25		 jne	 SHORT $LN59@obj2ast_mo

; 3548 :                 PyErr_Format(PyExc_TypeError, "Module field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00100	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00105	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00109	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0010d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@BLHMLCNG@Module?5field?5?$CCbody?$CC?5must?5be?5a?5li@
  00114	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0011b	e8 00 00 00 00	 call	 PyErr_Format

; 3549 :                 goto failed;

  00120	e9 7b 08 00 00	 jmp	 $failed$24640
$LN59@obj2ast_mo:

; 3550 :             }
; 3551 :             len = PyList_GET_SIZE(tmp);

  00125	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  0012a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0012e	48 89 44 24 58	 mov	 QWORD PTR len$24636[rsp], rax

; 3552 :             body = asdl_seq_new(len, arena);

  00133	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  0013b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR len$24636[rsp]
  00140	e8 00 00 00 00	 call	 asdl_seq_new
  00145	48 89 44 24 40	 mov	 QWORD PTR body$24633[rsp], rax

; 3553 :             if (body == NULL) goto failed;

  0014a	48 83 7c 24 40
	00		 cmp	 QWORD PTR body$24633[rsp], 0
  00150	75 05		 jne	 SHORT $LN58@obj2ast_mo
  00152	e9 49 08 00 00	 jmp	 $failed$24640
$LN58@obj2ast_mo:

; 3554 :             for (i = 0; i < len; i++) {

  00157	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR i$24637[rsp], 0
  00160	eb 0d		 jmp	 SHORT $LN57@obj2ast_mo
$LN56@obj2ast_mo:
  00162	48 8b 44 24 50	 mov	 rax, QWORD PTR i$24637[rsp]
  00167	48 ff c0	 inc	 rax
  0016a	48 89 44 24 50	 mov	 QWORD PTR i$24637[rsp], rax
$LN57@obj2ast_mo:
  0016f	48 8b 44 24 58	 mov	 rax, QWORD PTR len$24636[rsp]
  00174	48 39 44 24 50	 cmp	 QWORD PTR i$24637[rsp], rax
  00179	0f 8d 88 00 00
	00		 jge	 $LN55@obj2ast_mo

; 3555 :                 stmt_ty value;
; 3556 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  0017f	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00184	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00188	4c 8b 84 24 20
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00190	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$24650[rsp]
  00195	48 8b 4c 24 50	 mov	 rcx, QWORD PTR i$24637[rsp]
  0019a	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0019e	e8 00 00 00 00	 call	 obj2ast_stmt
  001a3	89 44 24 48	 mov	 DWORD PTR res$24635[rsp], eax

; 3557 :                 if (res != 0) goto failed;

  001a7	83 7c 24 48 00	 cmp	 DWORD PTR res$24635[rsp], 0
  001ac	74 05		 je	 SHORT $LN54@obj2ast_mo
  001ae	e9 ed 07 00 00	 jmp	 $failed$24640
$LN54@obj2ast_mo:

; 3558 :                 asdl_seq_SET(body, i, value);

  001b3	8b 44 24 50	 mov	 eax, DWORD PTR i$24637[rsp]
  001b7	89 44 24 68	 mov	 DWORD PTR _asdl_i$24653[rsp], eax
  001bb	48 83 7c 24 40
	00		 cmp	 QWORD PTR body$24633[rsp], 0
  001c1	74 0f		 je	 SHORT $LN67@obj2ast_mo
  001c3	48 63 44 24 68	 movsxd	 rax, DWORD PTR _asdl_i$24653[rsp]
  001c8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR body$24633[rsp]
  001cd	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  001d0	7c 1c		 jl	 SHORT $LN68@obj2ast_mo
$LN67@obj2ast_mo:
  001d2	41 b8 e6 0d 00
	00		 mov	 r8d, 3558		; 00000de6H
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  001e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ec	33 c0		 xor	 eax, eax
$LN68@obj2ast_mo:
  001ee	48 63 44 24 68	 movsxd	 rax, DWORD PTR _asdl_i$24653[rsp]
  001f3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR body$24633[rsp]
  001f8	48 8b 54 24 60	 mov	 rdx, QWORD PTR value$24650[rsp]
  001fd	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 3559 :             }

  00202	e9 5b ff ff ff	 jmp	 $LN56@obj2ast_mo
$LN55@obj2ast_mo:
$LN53@obj2ast_mo:

; 3560 :             Py_CLEAR(tmp);

  00207	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0020d	74 47		 je	 SHORT $LN50@obj2ast_mo
  0020f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00217	4c 8b 4c 24 30	 mov	 r9, QWORD PTR tmp$[rsp]
  0021c	41 b8 e8 0d 00
	00		 mov	 r8d, 3560		; 00000de8H
  00222	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00229	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HADBOJMD@obj2ast_mod?$AA@
  00230	e8 00 00 00 00	 call	 _PyParallel_Guard
  00235	85 c0		 test	 eax, eax
  00237	75 1d		 jne	 SHORT $LN50@obj2ast_mo
  00239	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  0023e	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$24662[rsp], rax
  00243	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0024c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$24662[rsp]
  00251	e8 00 00 00 00	 call	 _Py_DecRef
$LN50@obj2ast_mo:
  00256	33 c0		 xor	 eax, eax
  00258	85 c0		 test	 eax, eax
  0025a	75 ab		 jne	 SHORT $LN53@obj2ast_mo

; 3561 :         } else {

  0025c	eb 1d		 jmp	 SHORT $LN49@obj2ast_mo
$LN61@obj2ast_mo:

; 3562 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Module");

  0025e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@MEFNIBBA@required?5field?5?$CCbody?$CC?5missing?5fr@
  00265	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0026c	e8 00 00 00 00	 call	 PyErr_SetString

; 3563 :             return 1;

  00271	b8 01 00 00 00	 mov	 eax, 1
  00276	e9 42 07 00 00	 jmp	 $LN65@obj2ast_mo
$LN49@obj2ast_mo:

; 3564 :         }
; 3565 :         *out = Module(body, arena);

  0027b	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00283	48 8b 4c 24 40	 mov	 rcx, QWORD PTR body$24633[rsp]
  00288	e8 00 00 00 00	 call	 _Py_Module
  0028d	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00295	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3566 :         if (*out == NULL) goto failed;

  00298	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR out$[rsp]
  002a0	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  002a4	75 05		 jne	 SHORT $LN48@obj2ast_mo
  002a6	e9 f5 06 00 00	 jmp	 $failed$24640
$LN48@obj2ast_mo:

; 3567 :         return 0;

  002ab	33 c0		 xor	 eax, eax
  002ad	e9 0b 07 00 00	 jmp	 $LN65@obj2ast_mo
$LN62@obj2ast_mo:

; 3568 :     }
; 3569 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Interactive_type);

  002b2	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Interactive_type
  002b9	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  002c1	e8 00 00 00 00	 call	 PyObject_IsInstance
  002c6	89 44 24 38	 mov	 DWORD PTR isinstance$[rsp], eax

; 3570 :     if (isinstance == -1) {

  002ca	83 7c 24 38 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  002cf	75 0a		 jne	 SHORT $LN47@obj2ast_mo

; 3571 :         return 1;

  002d1	b8 01 00 00 00	 mov	 eax, 1
  002d6	e9 e2 06 00 00	 jmp	 $LN65@obj2ast_mo
$LN47@obj2ast_mo:

; 3572 :     }
; 3573 :     if (isinstance) {

  002db	83 7c 24 38 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  002e0	0f 84 6e 02 00
	00		 je	 $LN46@obj2ast_mo

; 3574 :         asdl_seq* body;
; 3575 : 
; 3576 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  002e6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  002eb	8b c0		 mov	 eax, eax
  002ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002f3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002fc	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00300	48 8b d0	 mov	 rdx, rax
  00303	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0030b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00310	85 c0		 test	 eax, eax
  00312	0f 84 e8 01 00
	00		 je	 $LN45@obj2ast_mo

; 3577 :             int res;
; 3578 :             Py_ssize_t len;
; 3579 :             Py_ssize_t i;
; 3580 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  00318	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  0031d	8b c0		 mov	 eax, eax
  0031f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00325	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0032e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00332	48 8b d0	 mov	 rdx, rax
  00335	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0033d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00342	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 3581 :             if (tmp == NULL) goto failed;

  00347	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0034d	75 05		 jne	 SHORT $LN44@obj2ast_mo
  0034f	e9 4c 06 00 00	 jmp	 $failed$24640
$LN44@obj2ast_mo:

; 3582 :             if (!PyList_Check(tmp)) {

  00354	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00359	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0035d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00363	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00368	85 c0		 test	 eax, eax
  0036a	75 25		 jne	 SHORT $LN43@obj2ast_mo

; 3583 :                 PyErr_Format(PyExc_TypeError, "Interactive field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0036c	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00371	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00375	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00379	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@BHFFGJPL@Interactive?5field?5?$CCbody?$CC?5must?5be@
  00380	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00387	e8 00 00 00 00	 call	 PyErr_Format

; 3584 :                 goto failed;

  0038c	e9 0f 06 00 00	 jmp	 $failed$24640
$LN43@obj2ast_mo:

; 3585 :             }
; 3586 :             len = PyList_GET_SIZE(tmp);

  00391	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00396	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0039a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR len$24676[rsp], rax

; 3587 :             body = asdl_seq_new(len, arena);

  003a2	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  003aa	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR len$24676[rsp]
  003b2	e8 00 00 00 00	 call	 asdl_seq_new
  003b7	48 89 44 24 78	 mov	 QWORD PTR body$24673[rsp], rax

; 3588 :             if (body == NULL) goto failed;

  003bc	48 83 7c 24 78
	00		 cmp	 QWORD PTR body$24673[rsp], 0
  003c2	75 05		 jne	 SHORT $LN42@obj2ast_mo
  003c4	e9 d7 05 00 00	 jmp	 $failed$24640
$LN42@obj2ast_mo:

; 3589 :             for (i = 0; i < len; i++) {

  003c9	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$24677[rsp], 0
  003d5	eb 13		 jmp	 SHORT $LN41@obj2ast_mo
$LN40@obj2ast_mo:
  003d7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR i$24677[rsp]
  003df	48 ff c0	 inc	 rax
  003e2	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR i$24677[rsp], rax
$LN41@obj2ast_mo:
  003ea	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR len$24676[rsp]
  003f2	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR i$24677[rsp], rax
  003fa	0f 8d a3 00 00
	00		 jge	 $LN39@obj2ast_mo

; 3590 :                 stmt_ty value;
; 3591 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  00400	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00405	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00409	4c 8b 84 24 20
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00411	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR value$24689[rsp]
  00419	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR i$24677[rsp]
  00421	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00425	e8 00 00 00 00	 call	 obj2ast_stmt
  0042a	89 84 24 80 00
	00 00		 mov	 DWORD PTR res$24675[rsp], eax

; 3592 :                 if (res != 0) goto failed;

  00431	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR res$24675[rsp], 0
  00439	74 05		 je	 SHORT $LN38@obj2ast_mo
  0043b	e9 60 05 00 00	 jmp	 $failed$24640
$LN38@obj2ast_mo:

; 3593 :                 asdl_seq_SET(body, i, value);

  00440	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR i$24677[rsp]
  00447	89 84 24 a0 00
	00 00		 mov	 DWORD PTR _asdl_i$24692[rsp], eax
  0044e	48 83 7c 24 78
	00		 cmp	 QWORD PTR body$24673[rsp], 0
  00454	74 12		 je	 SHORT $LN69@obj2ast_mo
  00456	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$24692[rsp]
  0045e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR body$24673[rsp]
  00463	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  00466	7c 1c		 jl	 SHORT $LN70@obj2ast_mo
$LN69@obj2ast_mo:
  00468	41 b8 09 0e 00
	00		 mov	 r8d, 3593		; 00000e09H
  0046e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  00475	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  0047c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00482	33 c0		 xor	 eax, eax
$LN70@obj2ast_mo:
  00484	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$24692[rsp]
  0048c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR body$24673[rsp]
  00491	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR value$24689[rsp]
  00499	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 3594 :             }

  0049e	e9 34 ff ff ff	 jmp	 $LN40@obj2ast_mo
$LN39@obj2ast_mo:
$LN37@obj2ast_mo:

; 3595 :             Py_CLEAR(tmp);

  004a3	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  004a9	74 4d		 je	 SHORT $LN34@obj2ast_mo
  004ab	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004b3	4c 8b 4c 24 30	 mov	 r9, QWORD PTR tmp$[rsp]
  004b8	41 b8 0b 0e 00
	00		 mov	 r8d, 3595		; 00000e0bH
  004be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  004c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HADBOJMD@obj2ast_mod?$AA@
  004cc	e8 00 00 00 00	 call	 _PyParallel_Guard
  004d1	85 c0		 test	 eax, eax
  004d3	75 23		 jne	 SHORT $LN34@obj2ast_mo
  004d5	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  004da	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR _py_tmp$24698[rsp], rax
  004e2	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  004eb	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$24698[rsp]
  004f3	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@obj2ast_mo:
  004f8	33 c0		 xor	 eax, eax
  004fa	85 c0		 test	 eax, eax
  004fc	75 a5		 jne	 SHORT $LN37@obj2ast_mo

; 3596 :         } else {

  004fe	eb 1d		 jmp	 SHORT $LN33@obj2ast_mo
$LN45@obj2ast_mo:

; 3597 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Interactive");

  00500	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@KGIFMBCL@required?5field?5?$CCbody?$CC?5missing?5fr@
  00507	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0050e	e8 00 00 00 00	 call	 PyErr_SetString

; 3598 :             return 1;

  00513	b8 01 00 00 00	 mov	 eax, 1
  00518	e9 a0 04 00 00	 jmp	 $LN65@obj2ast_mo
$LN33@obj2ast_mo:

; 3599 :         }
; 3600 :         *out = Interactive(body, arena);

  0051d	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00525	48 8b 4c 24 78	 mov	 rcx, QWORD PTR body$24673[rsp]
  0052a	e8 00 00 00 00	 call	 _Py_Interactive
  0052f	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00537	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3601 :         if (*out == NULL) goto failed;

  0053a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00542	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00546	75 05		 jne	 SHORT $LN32@obj2ast_mo
  00548	e9 53 04 00 00	 jmp	 $failed$24640
$LN32@obj2ast_mo:

; 3602 :         return 0;

  0054d	33 c0		 xor	 eax, eax
  0054f	e9 69 04 00 00	 jmp	 $LN65@obj2ast_mo
$LN46@obj2ast_mo:

; 3603 :     }
; 3604 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Expression_type);

  00554	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Expression_type
  0055b	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00563	e8 00 00 00 00	 call	 PyObject_IsInstance
  00568	89 44 24 38	 mov	 DWORD PTR isinstance$[rsp], eax

; 3605 :     if (isinstance == -1) {

  0056c	83 7c 24 38 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00571	75 0a		 jne	 SHORT $LN31@obj2ast_mo

; 3606 :         return 1;

  00573	b8 01 00 00 00	 mov	 eax, 1
  00578	e9 40 04 00 00	 jmp	 $LN65@obj2ast_mo
$LN31@obj2ast_mo:

; 3607 :     }
; 3608 :     if (isinstance) {

  0057d	83 7c 24 38 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00582	0f 84 52 01 00
	00		 je	 $LN30@obj2ast_mo

; 3609 :         expr_ty body;
; 3610 : 
; 3611 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  00588	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  0058d	8b c0		 mov	 eax, eax
  0058f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00595	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0059e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  005a2	48 8b d0	 mov	 rdx, rax
  005a5	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  005ad	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  005b2	85 c0		 test	 eax, eax
  005b4	0f 84 c9 00 00
	00		 je	 $LN29@obj2ast_mo

; 3612 :             int res;
; 3613 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  005ba	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  005bf	8b c0		 mov	 eax, eax
  005c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  005c7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  005d0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  005d4	48 8b d0	 mov	 rdx, rax
  005d7	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  005df	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  005e4	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 3614 :             if (tmp == NULL) goto failed;

  005e9	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  005ef	75 05		 jne	 SHORT $LN28@obj2ast_mo
  005f1	e9 aa 03 00 00	 jmp	 $failed$24640
$LN28@obj2ast_mo:

; 3615 :             res = obj2ast_expr(tmp, &body, arena);

  005f6	4c 8b 84 24 20
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  005fe	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR body$24709[rsp]
  00606	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  0060b	e8 00 00 00 00	 call	 obj2ast_expr
  00610	89 84 24 b8 00
	00 00		 mov	 DWORD PTR res$24711[rsp], eax

; 3616 :             if (res != 0) goto failed;

  00617	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR res$24711[rsp], 0
  0061f	74 05		 je	 SHORT $LN27@obj2ast_mo
  00621	e9 7a 03 00 00	 jmp	 $failed$24640
$LN27@obj2ast_mo:
$LN26@obj2ast_mo:

; 3617 :             Py_CLEAR(tmp);

  00626	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0062c	74 4d		 je	 SHORT $LN23@obj2ast_mo
  0062e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00636	4c 8b 4c 24 30	 mov	 r9, QWORD PTR tmp$[rsp]
  0063b	41 b8 21 0e 00
	00		 mov	 r8d, 3617		; 00000e21H
  00641	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00648	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HADBOJMD@obj2ast_mod?$AA@
  0064f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00654	85 c0		 test	 eax, eax
  00656	75 23		 jne	 SHORT $LN23@obj2ast_mo
  00658	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  0065d	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR _py_tmp$24719[rsp], rax
  00665	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0066e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$24719[rsp]
  00676	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@obj2ast_mo:
  0067b	33 c0		 xor	 eax, eax
  0067d	85 c0		 test	 eax, eax
  0067f	75 a5		 jne	 SHORT $LN26@obj2ast_mo

; 3618 :         } else {

  00681	eb 1d		 jmp	 SHORT $LN22@obj2ast_mo
$LN29@obj2ast_mo:

; 3619 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Expression");

  00683	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@KHBECONP@required?5field?5?$CCbody?$CC?5missing?5fr@
  0068a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00691	e8 00 00 00 00	 call	 PyErr_SetString

; 3620 :             return 1;

  00696	b8 01 00 00 00	 mov	 eax, 1
  0069b	e9 1d 03 00 00	 jmp	 $LN65@obj2ast_mo
$LN22@obj2ast_mo:

; 3621 :         }
; 3622 :         *out = Expression(body, arena);

  006a0	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  006a8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR body$24709[rsp]
  006b0	e8 00 00 00 00	 call	 _Py_Expression
  006b5	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  006bd	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3623 :         if (*out == NULL) goto failed;

  006c0	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR out$[rsp]
  006c8	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  006cc	75 05		 jne	 SHORT $LN21@obj2ast_mo
  006ce	e9 cd 02 00 00	 jmp	 $failed$24640
$LN21@obj2ast_mo:

; 3624 :         return 0;

  006d3	33 c0		 xor	 eax, eax
  006d5	e9 e3 02 00 00	 jmp	 $LN65@obj2ast_mo
$LN30@obj2ast_mo:

; 3625 :     }
; 3626 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Suite_type);

  006da	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Suite_type
  006e1	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  006e9	e8 00 00 00 00	 call	 PyObject_IsInstance
  006ee	89 44 24 38	 mov	 DWORD PTR isinstance$[rsp], eax

; 3627 :     if (isinstance == -1) {

  006f2	83 7c 24 38 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  006f7	75 0a		 jne	 SHORT $LN20@obj2ast_mo

; 3628 :         return 1;

  006f9	b8 01 00 00 00	 mov	 eax, 1
  006fe	e9 ba 02 00 00	 jmp	 $LN65@obj2ast_mo
$LN20@obj2ast_mo:

; 3629 :     }
; 3630 :     if (isinstance) {

  00703	83 7c 24 38 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00708	0f 84 77 02 00
	00		 je	 $LN19@obj2ast_mo

; 3631 :         asdl_seq* body;
; 3632 : 
; 3633 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  0070e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  00713	8b c0		 mov	 eax, eax
  00715	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0071b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00724	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00728	48 8b d0	 mov	 rdx, rax
  0072b	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00733	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00738	85 c0		 test	 eax, eax
  0073a	0f 84 f7 01 00
	00		 je	 $LN18@obj2ast_mo

; 3634 :             int res;
; 3635 :             Py_ssize_t len;
; 3636 :             Py_ssize_t i;
; 3637 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  00740	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  00745	8b c0		 mov	 eax, eax
  00747	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0074d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00756	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0075a	48 8b d0	 mov	 rdx, rax
  0075d	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00765	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0076a	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 3638 :             if (tmp == NULL) goto failed;

  0076f	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00775	75 05		 jne	 SHORT $LN17@obj2ast_mo
  00777	e9 24 02 00 00	 jmp	 $failed$24640
$LN17@obj2ast_mo:

; 3639 :             if (!PyList_Check(tmp)) {

  0077c	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00781	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00785	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0078b	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00790	85 c0		 test	 eax, eax
  00792	75 25		 jne	 SHORT $LN16@obj2ast_mo

; 3640 :                 PyErr_Format(PyExc_TypeError, "Suite field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00794	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00799	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0079d	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  007a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@CMKPFGKO@Suite?5field?5?$CCbody?$CC?5must?5be?5a?5lis@
  007a8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  007af	e8 00 00 00 00	 call	 PyErr_Format

; 3641 :                 goto failed;

  007b4	e9 e7 01 00 00	 jmp	 $failed$24640
$LN16@obj2ast_mo:

; 3642 :             }
; 3643 :             len = PyList_GET_SIZE(tmp);

  007b9	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  007be	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  007c2	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR len$24733[rsp], rax

; 3644 :             body = asdl_seq_new(len, arena);

  007ca	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  007d2	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR len$24733[rsp]
  007da	e8 00 00 00 00	 call	 asdl_seq_new
  007df	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR body$24730[rsp], rax

; 3645 :             if (body == NULL) goto failed;

  007e7	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR body$24730[rsp], 0
  007f0	75 05		 jne	 SHORT $LN15@obj2ast_mo
  007f2	e9 a9 01 00 00	 jmp	 $failed$24640
$LN15@obj2ast_mo:

; 3646 :             for (i = 0; i < len; i++) {

  007f7	48 c7 84 24 d8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$24734[rsp], 0
  00803	eb 13		 jmp	 SHORT $LN14@obj2ast_mo
$LN13@obj2ast_mo:
  00805	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR i$24734[rsp]
  0080d	48 ff c0	 inc	 rax
  00810	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR i$24734[rsp], rax
$LN14@obj2ast_mo:
  00818	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR len$24733[rsp]
  00820	48 39 84 24 d8
	00 00 00	 cmp	 QWORD PTR i$24734[rsp], rax
  00828	0f 8d ac 00 00
	00		 jge	 $LN12@obj2ast_mo

; 3647 :                 stmt_ty value;
; 3648 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  0082e	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00833	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00837	4c 8b 84 24 20
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0083f	48 8d 94 24 e8
	00 00 00	 lea	 rdx, QWORD PTR value$24746[rsp]
  00847	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR i$24734[rsp]
  0084f	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00853	e8 00 00 00 00	 call	 obj2ast_stmt
  00858	89 84 24 d0 00
	00 00		 mov	 DWORD PTR res$24732[rsp], eax

; 3649 :                 if (res != 0) goto failed;

  0085f	83 bc 24 d0 00
	00 00 00	 cmp	 DWORD PTR res$24732[rsp], 0
  00867	74 05		 je	 SHORT $LN11@obj2ast_mo
  00869	e9 32 01 00 00	 jmp	 $failed$24640
$LN11@obj2ast_mo:

; 3650 :                 asdl_seq_SET(body, i, value);

  0086e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR i$24734[rsp]
  00875	89 84 24 f0 00
	00 00		 mov	 DWORD PTR _asdl_i$24749[rsp], eax
  0087c	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR body$24730[rsp], 0
  00885	74 15		 je	 SHORT $LN71@obj2ast_mo
  00887	48 63 84 24 f0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$24749[rsp]
  0088f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR body$24730[rsp]
  00897	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  0089a	7c 1c		 jl	 SHORT $LN72@obj2ast_mo
$LN71@obj2ast_mo:
  0089c	41 b8 42 0e 00
	00		 mov	 r8d, 3650		; 00000e42H
  008a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  008a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  008b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008b6	33 c0		 xor	 eax, eax
$LN72@obj2ast_mo:
  008b8	48 63 84 24 f0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$24749[rsp]
  008c0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR body$24730[rsp]
  008c8	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR value$24746[rsp]
  008d0	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 3651 :             }

  008d5	e9 2b ff ff ff	 jmp	 $LN13@obj2ast_mo
$LN12@obj2ast_mo:
$LN10@obj2ast_mo:

; 3652 :             Py_CLEAR(tmp);

  008da	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  008e0	74 4d		 je	 SHORT $LN7@obj2ast_mo
  008e2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  008ea	4c 8b 4c 24 30	 mov	 r9, QWORD PTR tmp$[rsp]
  008ef	41 b8 44 0e 00
	00		 mov	 r8d, 3652		; 00000e44H
  008f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  008fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HADBOJMD@obj2ast_mod?$AA@
  00903	e8 00 00 00 00	 call	 _PyParallel_Guard
  00908	85 c0		 test	 eax, eax
  0090a	75 23		 jne	 SHORT $LN7@obj2ast_mo
  0090c	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00911	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR _py_tmp$24755[rsp], rax
  00919	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00922	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$24755[rsp]
  0092a	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@obj2ast_mo:
  0092f	33 c0		 xor	 eax, eax
  00931	85 c0		 test	 eax, eax
  00933	75 a5		 jne	 SHORT $LN10@obj2ast_mo

; 3653 :         } else {

  00935	eb 1a		 jmp	 SHORT $LN6@obj2ast_mo
$LN18@obj2ast_mo:

; 3654 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Suite");

  00937	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@DAPFNIEF@required?5field?5?$CCbody?$CC?5missing?5fr@
  0093e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00945	e8 00 00 00 00	 call	 PyErr_SetString

; 3655 :             return 1;

  0094a	b8 01 00 00 00	 mov	 eax, 1
  0094f	eb 6c		 jmp	 SHORT $LN65@obj2ast_mo
$LN6@obj2ast_mo:

; 3656 :         }
; 3657 :         *out = Suite(body, arena);

  00951	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00959	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR body$24730[rsp]
  00961	e8 00 00 00 00	 call	 _Py_Suite
  00966	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  0096e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3658 :         if (*out == NULL) goto failed;

  00971	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00979	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0097d	75 02		 jne	 SHORT $LN5@obj2ast_mo
  0097f	eb 1f		 jmp	 SHORT $failed$24640
$LN5@obj2ast_mo:

; 3659 :         return 0;

  00981	33 c0		 xor	 eax, eax
  00983	eb 38		 jmp	 SHORT $LN65@obj2ast_mo
$LN19@obj2ast_mo:

; 3660 :     }
; 3661 : 
; 3662 :     PyErr_Format(PyExc_TypeError, "expected some sort of mod, but got %R", obj);

  00985	4c 8b 84 24 10
	01 00 00	 mov	 r8, QWORD PTR obj$[rsp]
  0098d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KBNAANJO@expected?5some?5sort?5of?5mod?0?5but?5g@
  00994	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0099b	e8 00 00 00 00	 call	 PyErr_Format
$failed$24640:
$LN4@obj2ast_mo:

; 3663 :     failed:
; 3664 :     Py_XDECREF(tmp);

  009a0	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  009a6	74 0a		 je	 SHORT $LN1@obj2ast_mo
  009a8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  009ad	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@obj2ast_mo:
  009b2	33 c0		 xor	 eax, eax
  009b4	85 c0		 test	 eax, eax
  009b6	75 e8		 jne	 SHORT $LN4@obj2ast_mo

; 3665 :     return 1;

  009b8	b8 01 00 00 00	 mov	 eax, 1
$LN65@obj2ast_mo:

; 3666 : }

  009bd	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  009c4	c3		 ret	 0
obj2ast_mod ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@MEDEENCL@expected?5some?5sort?5of?5stmt?0?5but?5@ ; `string'
PUBLIC	??_C@_0CJ@HOLCPOID@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CN@LGEEILAC@required?5field?5?$CCnames?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0DE@JLMFHJNN@Nonlocal?5field?5?$CCnames?$CC?5must?5be?5a@ ; `string'
PUBLIC	??_C@_0CL@NNCJIPCP@required?5field?5?$CCnames?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0DC@HNDCGNHP@Global?5field?5?$CCnames?$CC?5must?5be?5a?5l@ ; `string'
PUBLIC	??_C@_0CP@MHDKFALC@required?5field?5?$CCnames?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0DG@LPEJBEJL@ImportFrom?5field?5?$CCnames?$CC?5must?5be@ ; `string'
PUBLIC	??_C@_0CL@MKOLHKCJ@required?5field?5?$CCnames?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_1EG@KNEALMDP@?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@ ; `string'
PUBLIC	??_C@_0DC@JDHMGOED@Import?5field?5?$CCnames?$CC?5must?5be?5a?5l@ ; `string'
PUBLIC	??_C@_0CK@EMFFOLOL@required?5field?5?$CCtest?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CM@LKCDFMOJ@required?5field?5?$CCfinalbody?$CC?5missi@ ; `string'
PUBLIC	??_C@_1FG@KBNINKEB@?$AA?$CI?$AAf?$AAi?$AAn?$AAa?$AAl?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAf?$AAi?$AAn?$AAa?$AAl?$AAb@ ; `string'
PUBLIC	??_C@_0DD@LHHDMHOG@Try?5field?5?$CCfinalbody?$CC?5must?5be?5a?5@ ; `string'
PUBLIC	??_C@_0CJ@HAGINNCN@required?5field?5?$CCorelse?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0DA@PCPJJJJH@Try?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0CL@KPJIMCMF@required?5field?5?$CChandlers?$CC?5missin@ ; `string'
PUBLIC	??_C@_1FC@EPGKLLPF@?$AA?$CI?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0DC@OJKLHJOP@Try?5field?5?$CChandlers?$CC?5must?5be?5a?5l@ ; `string'
PUBLIC	??_C@_0CH@HNJFAAMH@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CO@IDFBPFON@Try?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@ ; `string'
PUBLIC	??_C@_0CI@GADJBKKB@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CP@OEFDOBHK@With?5field?5?$CCbody?$CC?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_0CJ@CALAEGDB@required?5field?5?$CCitems?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_1EG@MEBHMPHM@?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@ ; `string'
PUBLIC	??_C@_0DA@DOBGIIJD@With?5field?5?$CCitems?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0CI@BBKAIMOL@required?5field?5?$CCorelse?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0CP@EKCAPFKA@If?5field?5?$CCorelse?$CC?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_0CG@IBBHFIGB@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CN@CBMBACPE@If?5field?5?$CCbody?$CC?5must?5be?5a?5list?0?5@ ; `string'
PUBLIC	??_C@_0CG@KNIONNCC@required?5field?5?$CCtest?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CL@HNNCIDFK@required?5field?5?$CCorelse?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0DC@CBNJGDLK@While?5field?5?$CCorelse?$CC?5must?5be?5a?5l@ ; `string'
PUBLIC	??_C@_0CJ@CBCBDLKI@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DA@DEKBMJDI@While?5field?5?$CCbody?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0CJ@JMNKEPPD@required?5field?5?$CCtest?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CJ@HNHCKLNB@required?5field?5?$CCorelse?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_1EK@PNODFBDF@?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_0DA@OHHBCDMN@For?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0CH@HAIPHGDL@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CO@HMKAJOFO@For?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@ ; `string'
PUBLIC	??_C@_0CH@ICLHNFMH@required?5field?5?$CCiter?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CJ@NEHOGNKF@required?5field?5?$CCtarget?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0CO@DDMENDHF@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CL@OOGNAPCP@required?5field?5?$CCop?$CC?5missing?5from@ ; `string'
PUBLIC	??_C@_0CP@OHAKCNID@required?5field?5?$CCtarget?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0CL@KCHNIPDD@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CN@BNPHBHEF@required?5field?5?$CCtargets?$CC?5missing@ ; `string'
PUBLIC	??_C@_0DE@CHFJFKNC@Assign?5field?5?$CCtargets?$CC?5must?5be?5a@ ; `string'
PUBLIC	??_C@_0CN@MPLCKCGN@required?5field?5?$CCtargets?$CC?5missing@ ; `string'
PUBLIC	??_C@_1EO@KJNHGEBL@?$AA?$CI?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AAs?$AA?$CJ@ ; `string'
PUBLIC	??_C@_0DE@JEFKDOEM@Delete?5field?5?$CCtargets?$CC?5must?5be?5a@ ; `string'
PUBLIC	??_C@_0DG@NOLEJLGL@required?5field?5?$CCdecorator_list?$CC?5@ ; `string'
PUBLIC	??_C@_0DN@MFOMKLEB@ClassDef?5field?5?$CCdecorator_list?$CC?5@ ; `string'
PUBLIC	??_C@_0CM@JFNEHIJD@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DD@FELJEMHL@ClassDef?5field?5?$CCbody?$CC?5must?5be?5a?5@ ; `string'
PUBLIC	??_C@_0DA@IHPLINCF@required?5field?5?$CCkeywords?$CC?5missin@ ; `string'
PUBLIC	??_C@_1FC@OHBDJICK@?$AA?$CI?$AAk?$AAe?$AAy?$AAw?$AAo?$AAr?$AAd?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAe?$AAy?$AAw?$AAo?$AAr?$AAd@ ; `string'
PUBLIC	??_C@_0DH@FAJFAAEL@ClassDef?5field?5?$CCkeywords?$CC?5must?5b@ ; `string'
PUBLIC	??_C@_0CN@HBECIBCI@required?5field?5?$CCbases?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_1EG@MIINPGAI@?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@ ; `string'
PUBLIC	??_C@_0DE@MHEBOGJH@ClassDef?5field?5?$CCbases?$CC?5must?5be?5a@ ; `string'
PUBLIC	??_C@_0CM@NNOCJKEL@required?5field?5?$CCname?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DJ@FGGBKHJL@required?5field?5?$CCdecorator_list?$CC?5@ ; `string'
PUBLIC	??_C@_1GK@LGJKDKMK@?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd@ ; `string'
PUBLIC	??_C@_0EA@GALCHNKH@FunctionDef?5field?5?$CCdecorator_lis@ ; `string'
PUBLIC	??_C@_0CP@NFFHEEMP@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DG@NOJACNBG@FunctionDef?5field?5?$CCbody?$CC?5must?5be@ ; `string'
PUBLIC	??_C@_0CP@OIMKEJCJ@required?5field?5?$CCargs?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CP@PFDPCEPI@required?5field?5?$CCname?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CO@GDDHAANC@required?5field?5?$CCcol_offset?$CC?5miss@ ; `string'
PUBLIC	??_C@_0CK@HLCNGPKC@required?5field?5?$CClineno?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_stmt DD imagerel obj2ast_stmt
	DD	imagerel obj2ast_stmt+23446
	DD	imagerel $unwind$obj2ast_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_stmt DD 021601H
	DD	0fb0116H
xdata	ENDS
;	COMDAT ??_C@_0CH@MEDEENCL@expected?5some?5sort?5of?5stmt?0?5but?5@
CONST	SEGMENT
??_C@_0CH@MEDEENCL@expected?5some?5sort?5of?5stmt?0?5but?5@ DB 'expected '
	DB	'some sort of stmt, but got %R', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HOLCPOID@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CJ@HOLCPOID@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Expr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LGEEILAC@required?5field?5?$CCnames?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CN@LGEEILAC@required?5field?5?$CCnames?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "names" missing from Nonlocal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JLMFHJNN@Nonlocal?5field?5?$CCnames?$CC?5must?5be?5a@
CONST	SEGMENT
??_C@_0DE@JLMFHJNN@Nonlocal?5field?5?$CCnames?$CC?5must?5be?5a@ DB 'Nonlo'
	DB	'cal field "names" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NNCJIPCP@required?5field?5?$CCnames?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CL@NNCJIPCP@required?5field?5?$CCnames?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "names" missing from Global', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HNDCGNHP@Global?5field?5?$CCnames?$CC?5must?5be?5a?5l@
CONST	SEGMENT
??_C@_0DC@HNDCGNHP@Global?5field?5?$CCnames?$CC?5must?5be?5a?5l@ DB 'Glob'
	DB	'al field "names" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MHDKFALC@required?5field?5?$CCnames?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CP@MHDKFALC@required?5field?5?$CCnames?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "names" missing from ImportFrom', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LPEJBEJL@ImportFrom?5field?5?$CCnames?$CC?5must?5be@
CONST	SEGMENT
??_C@_0DG@LPEJBEJL@ImportFrom?5field?5?$CCnames?$CC?5must?5be@ DB 'Import'
	DB	'From field "names" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MKOLHKCJ@required?5field?5?$CCnames?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CL@MKOLHKCJ@required?5field?5?$CCnames?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "names" missing from Import', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@KNEALMDP@?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@
CONST	SEGMENT
??_C@_1EG@KNEALMDP@?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@ DB '('
	DB	00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 's', 00H, ')', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's'
	DB	00H, 'd', 00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '(', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 's'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JDHMGOED@Import?5field?5?$CCnames?$CC?5must?5be?5a?5l@
CONST	SEGMENT
??_C@_0DC@JDHMGOED@Import?5field?5?$CCnames?$CC?5must?5be?5a?5l@ DB 'Impo'
	DB	'rt field "names" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EMFFOLOL@required?5field?5?$CCtest?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CK@EMFFOLOL@required?5field?5?$CCtest?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "test" missing from Assert', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LKCDFMOJ@required?5field?5?$CCfinalbody?$CC?5missi@
CONST	SEGMENT
??_C@_0CM@LKCDFMOJ@required?5field?5?$CCfinalbody?$CC?5missi@ DB 'require'
	DB	'd field "finalbody" missing from Try', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@KBNINKEB@?$AA?$CI?$AAf?$AAi?$AAn?$AAa?$AAl?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAf?$AAi?$AAn?$AAa?$AAl?$AAb@
CONST	SEGMENT
??_C@_1FG@KBNINKEB@?$AA?$CI?$AAf?$AAi?$AAn?$AAa?$AAl?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAf?$AAi?$AAn?$AAa?$AAl?$AAb@ DB '('
	DB	00H, 'f', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 'l', 00H, 'b', 00H
	DB	'o', 00H, 'd', 00H, 'y', 00H, ')', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H, 'd', 00H, 'l', 00H
	DB	'_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 'f'
	DB	00H, 'i', 00H, 'n', 00H, 'a', 00H, 'l', 00H, 'b', 00H, 'o', 00H
	DB	'd', 00H, 'y', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LHHDMHOG@Try?5field?5?$CCfinalbody?$CC?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0DD@LHHDMHOG@Try?5field?5?$CCfinalbody?$CC?5must?5be?5a?5@ DB 'Try '
	DB	'field "finalbody" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HAGINNCN@required?5field?5?$CCorelse?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CJ@HAGINNCN@required?5field?5?$CCorelse?$CC?5missing?5@ DB 'requir'
	DB	'ed field "orelse" missing from Try', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PCPJJJJH@Try?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@PCPJJJJH@Try?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@ DB 'Try '
	DB	'field "orelse" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KPJIMCMF@required?5field?5?$CChandlers?$CC?5missin@
CONST	SEGMENT
??_C@_0CL@KPJIMCMF@required?5field?5?$CChandlers?$CC?5missin@ DB 'require'
	DB	'd field "handlers" missing from Try', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@EPGKLLPF@?$AA?$CI?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FC@EPGKLLPF@?$AA?$CI?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr@ DB '('
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, '_', 00H, 'a', 00H, 's', 00H, 'd', 00H, 'l', 00H, '_', 00H
	DB	'i', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 'h', 00H, 'a'
	DB	00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, 'r', 00H, 's', 00H
	DB	')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OJKLHJOP@Try?5field?5?$CChandlers?$CC?5must?5be?5a?5l@
CONST	SEGMENT
??_C@_0DC@OJKLHJOP@Try?5field?5?$CChandlers?$CC?5must?5be?5a?5l@ DB 'Try '
	DB	'field "handlers" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HNJFAAMH@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CH@HNJFAAMH@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Try', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IDFBPFON@Try?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@
CONST	SEGMENT
??_C@_0CO@IDFBPFON@Try?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@ DB 'Try'
	DB	' field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GADJBKKB@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CI@GADJBKKB@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from With', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@OEFDOBHK@With?5field?5?$CCbody?$CC?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CP@OEFDOBHK@With?5field?5?$CCbody?$CC?5must?5be?5a?5list@ DB 'With'
	DB	' field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CALAEGDB@required?5field?5?$CCitems?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CJ@CALAEGDB@required?5field?5?$CCitems?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "items" missing from With', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@MEBHMPHM@?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@
CONST	SEGMENT
??_C@_1EG@MEBHMPHM@?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@ DB '('
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H, 's', 00H, ')', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's'
	DB	00H, 'd', 00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '(', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H, 's'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@DOBGIIJD@With?5field?5?$CCitems?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@DOBGIIJD@With?5field?5?$CCitems?$CC?5must?5be?5a?5lis@ DB 'With'
	DB	' field "items" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BBKAIMOL@required?5field?5?$CCorelse?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CI@BBKAIMOL@required?5field?5?$CCorelse?$CC?5missing?5@ DB 'requir'
	DB	'ed field "orelse" missing from If', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EKCAPFKA@If?5field?5?$CCorelse?$CC?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CP@EKCAPFKA@If?5field?5?$CCorelse?$CC?5must?5be?5a?5list@ DB 'If f'
	DB	'ield "orelse" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IBBHFIGB@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CG@IBBHFIGB@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from If', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CBMBACPE@If?5field?5?$CCbody?$CC?5must?5be?5a?5list?0?5@
CONST	SEGMENT
??_C@_0CN@CBMBACPE@If?5field?5?$CCbody?$CC?5must?5be?5a?5list?0?5@ DB 'If'
	DB	' field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KNIONNCC@required?5field?5?$CCtest?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CG@KNIONNCC@required?5field?5?$CCtest?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "test" missing from If', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HNNCIDFK@required?5field?5?$CCorelse?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CL@HNNCIDFK@required?5field?5?$CCorelse?$CC?5missing?5@ DB 'requir'
	DB	'ed field "orelse" missing from While', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CBNJGDLK@While?5field?5?$CCorelse?$CC?5must?5be?5a?5l@
CONST	SEGMENT
??_C@_0DC@CBNJGDLK@While?5field?5?$CCorelse?$CC?5must?5be?5a?5l@ DB 'Whil'
	DB	'e field "orelse" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CBCBDLKI@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@CBCBDLKI@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from While', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@DEKBMJDI@While?5field?5?$CCbody?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@DEKBMJDI@While?5field?5?$CCbody?$CC?5must?5be?5a?5lis@ DB 'Whil'
	DB	'e field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JMNKEPPD@required?5field?5?$CCtest?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@JMNKEPPD@required?5field?5?$CCtest?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "test" missing from While', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HNHCKLNB@required?5field?5?$CCorelse?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CJ@HNHCKLNB@required?5field?5?$CCorelse?$CC?5missing?5@ DB 'requir'
	DB	'ed field "orelse" missing from For', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@PNODFBDF@?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1EK@PNODFBDF@?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?9?$AA?$DO@ DB '('
	DB	00H, 'o', 00H, 'r', 00H, 'e', 00H, 'l', 00H, 's', 00H, 'e', 00H
	DB	')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a'
	DB	00H, 's', 00H, 'd', 00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, '(', 00H, 'o', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 's', 00H, 'e', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OHHBCDMN@For?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@OHHBCDMN@For?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@ DB 'For '
	DB	'field "orelse" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HAIPHGDL@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CH@HAIPHGDL@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from For', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HMKAJOFO@For?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@
CONST	SEGMENT
??_C@_0CO@HMKAJOFO@For?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@ DB 'For'
	DB	' field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@ICLHNFMH@required?5field?5?$CCiter?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CH@ICLHNFMH@required?5field?5?$CCiter?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "iter" missing from For', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NEHOGNKF@required?5field?5?$CCtarget?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CJ@NEHOGNKF@required?5field?5?$CCtarget?$CC?5missing?5@ DB 'requir'
	DB	'ed field "target" missing from For', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DDMENDHF@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CO@DDMENDHF@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from AugAssign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@OOGNAPCP@required?5field?5?$CCop?$CC?5missing?5from@
CONST	SEGMENT
??_C@_0CL@OOGNAPCP@required?5field?5?$CCop?$CC?5missing?5from@ DB 'requir'
	DB	'ed field "op" missing from AugAssign', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@OHAKCNID@required?5field?5?$CCtarget?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CP@OHAKCNID@required?5field?5?$CCtarget?$CC?5missing?5@ DB 'requir'
	DB	'ed field "target" missing from AugAssign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KCHNIPDD@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CL@KCHNIPDD@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Assign', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BNPHBHEF@required?5field?5?$CCtargets?$CC?5missing@
CONST	SEGMENT
??_C@_0CN@BNPHBHEF@required?5field?5?$CCtargets?$CC?5missing@ DB 'require'
	DB	'd field "targets" missing from Assign', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CHFJFKNC@Assign?5field?5?$CCtargets?$CC?5must?5be?5a@
CONST	SEGMENT
??_C@_0DE@CHFJFKNC@Assign?5field?5?$CCtargets?$CC?5must?5be?5a@ DB 'Assig'
	DB	'n field "targets" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MPLCKCGN@required?5field?5?$CCtargets?$CC?5missing@
CONST	SEGMENT
??_C@_0CN@MPLCKCGN@required?5field?5?$CCtargets?$CC?5missing@ DB 'require'
	DB	'd field "targets" missing from Delete', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@KJNHGEBL@?$AA?$CI?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AAs?$AA?$CJ@
CONST	SEGMENT
??_C@_1EO@KJNHGEBL@?$AA?$CI?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AAs?$AA?$CJ@ DB '('
	DB	00H, 't', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	's', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_'
	DB	00H, 'a', 00H, 's', 00H, 'd', 00H, 'l', 00H, '_', 00H, 'i', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 't', 00H, 'a', 00H, 'r'
	DB	00H, 'g', 00H, 'e', 00H, 't', 00H, 's', 00H, ')', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JEFKDOEM@Delete?5field?5?$CCtargets?$CC?5must?5be?5a@
CONST	SEGMENT
??_C@_0DE@JEFKDOEM@Delete?5field?5?$CCtargets?$CC?5must?5be?5a@ DB 'Delet'
	DB	'e field "targets" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NOLEJLGL@required?5field?5?$CCdecorator_list?$CC?5@
CONST	SEGMENT
??_C@_0DG@NOLEJLGL@required?5field?5?$CCdecorator_list?$CC?5@ DB 'require'
	DB	'd field "decorator_list" missing from ClassDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@MFOMKLEB@ClassDef?5field?5?$CCdecorator_list?$CC?5@
CONST	SEGMENT
??_C@_0DN@MFOMKLEB@ClassDef?5field?5?$CCdecorator_list?$CC?5@ DB 'ClassDe'
	DB	'f field "decorator_list" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JFNEHIJD@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CM@JFNEHIJD@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from ClassDef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@FELJEMHL@ClassDef?5field?5?$CCbody?$CC?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0DD@FELJEMHL@ClassDef?5field?5?$CCbody?$CC?5must?5be?5a?5@ DB 'Clas'
	DB	'sDef field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@IHPLINCF@required?5field?5?$CCkeywords?$CC?5missin@
CONST	SEGMENT
??_C@_0DA@IHPLINCF@required?5field?5?$CCkeywords?$CC?5missin@ DB 'require'
	DB	'd field "keywords" missing from ClassDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@OHBDJICK@?$AA?$CI?$AAk?$AAe?$AAy?$AAw?$AAo?$AAr?$AAd?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAe?$AAy?$AAw?$AAo?$AAr?$AAd@
CONST	SEGMENT
??_C@_1FC@OHBDJICK@?$AA?$CI?$AAk?$AAe?$AAy?$AAw?$AAo?$AAr?$AAd?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAe?$AAy?$AAw?$AAo?$AAr?$AAd@ DB '('
	DB	00H, 'k', 00H, 'e', 00H, 'y', 00H, 'w', 00H, 'o', 00H, 'r', 00H
	DB	'd', 00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, '_', 00H, 'a', 00H, 's', 00H, 'd', 00H, 'l', 00H, '_', 00H
	DB	'i', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 'k', 00H, 'e'
	DB	00H, 'y', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 's', 00H
	DB	')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@FAJFAAEL@ClassDef?5field?5?$CCkeywords?$CC?5must?5b@
CONST	SEGMENT
??_C@_0DH@FAJFAAEL@ClassDef?5field?5?$CCkeywords?$CC?5must?5b@ DB 'ClassD'
	DB	'ef field "keywords" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HBECIBCI@required?5field?5?$CCbases?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CN@HBECIBCI@required?5field?5?$CCbases?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "bases" missing from ClassDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@MIINPGAI@?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@
CONST	SEGMENT
??_C@_1EG@MIINPGAI@?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@ DB '('
	DB	00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, 's', 00H, ')', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's'
	DB	00H, 'd', 00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '(', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, 's'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MHEBOGJH@ClassDef?5field?5?$CCbases?$CC?5must?5be?5a@
CONST	SEGMENT
??_C@_0DE@MHEBOGJH@ClassDef?5field?5?$CCbases?$CC?5must?5be?5a@ DB 'Class'
	DB	'Def field "bases" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NNOCJKEL@required?5field?5?$CCname?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CM@NNOCJKEL@required?5field?5?$CCname?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "name" missing from ClassDef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FGGBKHJL@required?5field?5?$CCdecorator_list?$CC?5@
CONST	SEGMENT
??_C@_0DJ@FGGBKHJL@required?5field?5?$CCdecorator_list?$CC?5@ DB 'require'
	DB	'd field "decorator_list" missing from FunctionDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@LGJKDKMK@?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd@
CONST	SEGMENT
??_C@_1GK@LGJKDKMK@?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd@ DB '('
	DB	00H, 'd', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'_', 00H, 'a', 00H, 's', 00H, 'd', 00H, 'l', 00H, '_', 00H, 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 'd', 00H, 'e', 00H
	DB	'c', 00H, 'o', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ')', 00H
	DB	'-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@GALCHNKH@FunctionDef?5field?5?$CCdecorator_lis@
CONST	SEGMENT
??_C@_0EA@GALCHNKH@FunctionDef?5field?5?$CCdecorator_lis@ DB 'FunctionDef'
	DB	' field "decorator_list" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NFFHEEMP@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CP@NFFHEEMP@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from FunctionDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NOJACNBG@FunctionDef?5field?5?$CCbody?$CC?5must?5be@
CONST	SEGMENT
??_C@_0DG@NOJACNBG@FunctionDef?5field?5?$CCbody?$CC?5must?5be@ DB 'Functi'
	DB	'onDef field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@OIMKEJCJ@required?5field?5?$CCargs?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CP@OIMKEJCJ@required?5field?5?$CCargs?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "args" missing from FunctionDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@PFDPCEPI@required?5field?5?$CCname?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CP@PFDPCEPI@required?5field?5?$CCname?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "name" missing from FunctionDef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GDDHAANC@required?5field?5?$CCcol_offset?$CC?5miss@
CONST	SEGMENT
??_C@_0CO@GDDHAANC@required?5field?5?$CCcol_offset?$CC?5miss@ DB 'require'
	DB	'd field "col_offset" missing from stmt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HLCNGPKC@required?5field?5?$CClineno?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CK@HLCNGPKC@required?5field?5?$CClineno?$CC?5missing?5@ DB 'requir'
	DB	'ed field "lineno" missing from stmt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
CONST	SEGMENT
??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@ DB 'obj2ast_stmt', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_stmt
_TEXT	SEGMENT
lineno$ = 80
tmp$ = 88
col_offset$ = 96
isinstance$ = 100
res$24784 = 104
_py_tmp$24794 = 112
res$24801 = 120
_py_tmp$24809 = 128
decorator_list$24821 = 136
args$24819 = 144
name$24818 = 152
returns$24822 = 160
body$24820 = 168
res$24824 = 176
_py_tmp$24832 = 184
res$24839 = 192
_py_tmp$24847 = 200
res$24854 = 208
i$24856 = 216
len$24855 = 224
value$24868 = 232
_asdl_i$24871 = 240
_py_tmp$24877 = 248
res$24884 = 256
i$24886 = 264
len$24885 = 272
value$24898 = 280
_asdl_i$24901 = 288
_py_tmp$24908 = 296
res$24915 = 304
_py_tmp$24923 = 312
kwargs$24938 = 320
decorator_list$24940 = 328
bases$24935 = 336
keywords$24936 = 344
starargs$24937 = 352
name$24934 = 360
body$24939 = 368
res$24942 = 376
_py_tmp$24950 = 384
res$24957 = 392
i$24959 = 400
len$24958 = 408
value$24971 = 416
_asdl_i$24974 = 424
_py_tmp$24981 = 432
res$24988 = 440
i$24990 = 448
len$24989 = 456
value$25002 = 464
_asdl_i$25005 = 472
_py_tmp$25012 = 480
res$25019 = 488
_py_tmp$25027 = 496
res$25034 = 504
_py_tmp$25042 = 512
res$25049 = 520
i$25051 = 528
len$25050 = 536
value$25063 = 544
_asdl_i$25066 = 552
_py_tmp$25072 = 560
res$25079 = 568
i$25081 = 576
len$25080 = 584
value$25093 = 592
_asdl_i$25096 = 600
_py_tmp$25102 = 608
value$25113 = 616
res$25115 = 624
_py_tmp$25123 = 632
targets$25134 = 640
res$25136 = 648
i$25138 = 656
len$25137 = 664
value$25150 = 672
_asdl_i$25153 = 680
_py_tmp$25160 = 688
value$25172 = 696
targets$25171 = 704
res$25174 = 712
i$25176 = 720
len$25175 = 728
value$25188 = 736
_asdl_i$25191 = 744
_py_tmp$25197 = 752
res$25204 = 760
_py_tmp$25212 = 768
value$25225 = 776
target$25223 = 784
op$25224 = 792
res$25227 = 796
_py_tmp$25235 = 800
res$25242 = 808
_py_tmp$25250 = 816
res$25257 = 824
_py_tmp$25265 = 832
iter$25277 = 840
body$25278 = 848
target$25276 = 856
orelse$25279 = 864
res$25281 = 872
_py_tmp$25289 = 880
res$25296 = 888
_py_tmp$25304 = 896
res$25311 = 904
i$25313 = 912
len$25312 = 920
value$25325 = 928
_asdl_i$25328 = 936
_py_tmp$25334 = 944
res$25341 = 952
i$25343 = 960
len$25342 = 968
value$25355 = 976
_asdl_i$25358 = 984
_py_tmp$25365 = 992
body$25377 = 1000
test$25376 = 1008
orelse$25378 = 1016
res$25380 = 1024
_py_tmp$25388 = 1032
res$25395 = 1040
i$25397 = 1048
len$25396 = 1056
value$25409 = 1064
_asdl_i$25412 = 1072
_py_tmp$25418 = 1080
res$25425 = 1088
i$25427 = 1096
len$25426 = 1104
value$25439 = 1112
_asdl_i$25442 = 1120
_py_tmp$25448 = 1128
body$25460 = 1136
test$25459 = 1144
orelse$25461 = 1152
res$25463 = 1160
_py_tmp$25471 = 1168
res$25478 = 1176
i$25480 = 1184
len$25479 = 1192
value$25492 = 1200
_asdl_i$25495 = 1208
_py_tmp$25501 = 1216
res$25508 = 1224
i$25510 = 1232
len$25509 = 1240
value$25522 = 1248
_asdl_i$25525 = 1256
_py_tmp$25531 = 1264
body$25543 = 1272
items$25542 = 1280
res$25545 = 1288
i$25547 = 1296
len$25546 = 1304
value$25559 = 1312
_asdl_i$25562 = 1320
_py_tmp$25569 = 1328
res$25576 = 1336
i$25578 = 1344
len$25577 = 1352
value$25590 = 1360
_asdl_i$25593 = 1368
_py_tmp$25599 = 1376
cause$25611 = 1384
exc$25610 = 1392
res$25613 = 1400
_py_tmp$25621 = 1408
res$25628 = 1416
_py_tmp$25636 = 1424
finalbody$25650 = 1432
body$25647 = 1440
handlers$25648 = 1448
orelse$25649 = 1456
res$25652 = 1464
i$25654 = 1472
len$25653 = 1480
value$25666 = 1488
_asdl_i$25669 = 1496
_py_tmp$25675 = 1504
res$25682 = 1512
i$25684 = 1520
len$25683 = 1528
value$25696 = 1536
_asdl_i$25699 = 1544
_py_tmp$25706 = 1552
res$25713 = 1560
i$25715 = 1568
len$25714 = 1576
value$25727 = 1584
_asdl_i$25730 = 1592
_py_tmp$25736 = 1600
res$25743 = 1608
i$25745 = 1616
len$25744 = 1624
value$25757 = 1632
_asdl_i$25760 = 1640
_py_tmp$25767 = 1648
msg$25779 = 1656
test$25778 = 1664
res$25781 = 1672
_py_tmp$25789 = 1680
res$25796 = 1688
_py_tmp$25804 = 1696
names$25815 = 1704
res$25817 = 1712
i$25819 = 1720
len$25818 = 1728
value$25831 = 1736
_asdl_i$25834 = 1744
_py_tmp$25841 = 1752
level$25854 = 1760
names$25853 = 1768
module$25852 = 1776
res$25856 = 1784
_py_tmp$25864 = 1792
res$25871 = 1800
i$25873 = 1808
len$25872 = 1816
value$25885 = 1824
_asdl_i$25888 = 1832
_py_tmp$25894 = 1840
res$25901 = 1848
_py_tmp$25909 = 1856
names$25919 = 1864
res$25921 = 1872
i$25923 = 1880
len$25922 = 1888
value$25935 = 1896
_asdl_i$25938 = 1904
_py_tmp$25944 = 1912
names$25955 = 1920
res$25957 = 1928
i$25959 = 1936
len$25958 = 1944
value$25971 = 1952
_asdl_i$25974 = 1960
_py_tmp$25980 = 1968
value$25991 = 1976
res$25993 = 1984
_py_tmp$26001 = 1992
obj$ = 2016
out$ = 2024
arena$ = 2032
obj2ast_stmt PROC					; COMDAT

; 3670 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec d8 07
	00 00		 sub	 rsp, 2008		; 000007d8H

; 3671 :     int isinstance;
; 3672 : 
; 3673 :     PyObject *tmp = NULL;

  00016	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 3674 :     int lineno;
; 3675 :     int col_offset;
; 3676 : 
; 3677 :     if (obj == Py_None) {

  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00026	48 39 84 24 e0
	07 00 00	 cmp	 QWORD PTR obj$[rsp], rax
  0002e	75 16		 jne	 SHORT $LN572@obj2ast_st

; 3678 :         *out = NULL;

  00030	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00038	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 3679 :         return 0;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 48 5b 00 00	 jmp	 $LN573@obj2ast_st
$LN572@obj2ast_st:

; 3680 :     }
; 3681 :     if (_PyObject_HasAttrId(obj, &PyId_lineno)) {

  00046	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lineno
  0004b	8b c0		 mov	 eax, eax
  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00053	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0005c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00060	48 8b d0	 mov	 rdx, rax
  00063	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0006b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00070	85 c0		 test	 eax, eax
  00072	0f 84 ba 00 00
	00		 je	 $LN571@obj2ast_st

; 3682 :         int res;
; 3683 :         tmp = _PyObject_GetAttrId(obj, &PyId_lineno);

  00078	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lineno
  0007d	8b c0		 mov	 eax, eax
  0007f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00085	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0008e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00092	48 8b d0	 mov	 rdx, rax
  00095	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0009d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000a2	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3684 :         if (tmp == NULL) goto failed;

  000a7	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000ad	75 05		 jne	 SHORT $LN570@obj2ast_st
  000af	e9 bd 5a 00 00	 jmp	 $failed$24787
$LN570@obj2ast_st:

; 3685 :         res = obj2ast_int(tmp, &lineno, arena);

  000b4	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  000bc	48 8d 54 24 50	 lea	 rdx, QWORD PTR lineno$[rsp]
  000c1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  000c6	e8 00 00 00 00	 call	 obj2ast_int
  000cb	89 44 24 68	 mov	 DWORD PTR res$24784[rsp], eax

; 3686 :         if (res != 0) goto failed;

  000cf	83 7c 24 68 00	 cmp	 DWORD PTR res$24784[rsp], 0
  000d4	74 05		 je	 SHORT $LN569@obj2ast_st
  000d6	e9 96 5a 00 00	 jmp	 $failed$24787
$LN569@obj2ast_st:
$LN568@obj2ast_st:

; 3687 :         Py_CLEAR(tmp);

  000db	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000e1	74 47		 je	 SHORT $LN565@obj2ast_st
  000e3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000eb	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  000f0	41 b8 67 0e 00
	00		 mov	 r8d, 3687		; 00000e67H
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00104	e8 00 00 00 00	 call	 _PyParallel_Guard
  00109	85 c0		 test	 eax, eax
  0010b	75 1d		 jne	 SHORT $LN565@obj2ast_st
  0010d	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00112	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$24794[rsp], rax
  00117	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00120	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$24794[rsp]
  00125	e8 00 00 00 00	 call	 _Py_DecRef
$LN565@obj2ast_st:
  0012a	33 c0		 xor	 eax, eax
  0012c	85 c0		 test	 eax, eax
  0012e	75 ab		 jne	 SHORT $LN568@obj2ast_st

; 3688 :     } else {

  00130	eb 1d		 jmp	 SHORT $LN564@obj2ast_st
$LN571@obj2ast_st:

; 3689 :         PyErr_SetString(PyExc_TypeError, "required field \"lineno\" missing from stmt");

  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@HLCNGPKC@required?5field?5?$CClineno?$CC?5missing?5@
  00139	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00140	e8 00 00 00 00	 call	 PyErr_SetString

; 3690 :         return 1;

  00145	b8 01 00 00 00	 mov	 eax, 1
  0014a	e9 3f 5a 00 00	 jmp	 $LN573@obj2ast_st
$LN564@obj2ast_st:

; 3691 :     }
; 3692 :     if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {

  0014f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_col_offset
  00154	8b c0		 mov	 eax, eax
  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0015c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00165	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00169	48 8b d0	 mov	 rdx, rax
  0016c	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00174	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00179	85 c0		 test	 eax, eax
  0017b	0f 84 c0 00 00
	00		 je	 $LN563@obj2ast_st

; 3693 :         int res;
; 3694 :         tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);

  00181	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_col_offset
  00186	8b c0		 mov	 eax, eax
  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0018e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00197	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0019b	48 8b d0	 mov	 rdx, rax
  0019e	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  001a6	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001ab	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3695 :         if (tmp == NULL) goto failed;

  001b0	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001b6	75 05		 jne	 SHORT $LN562@obj2ast_st
  001b8	e9 b4 59 00 00	 jmp	 $failed$24787
$LN562@obj2ast_st:

; 3696 :         res = obj2ast_int(tmp, &col_offset, arena);

  001bd	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  001c5	48 8d 54 24 60	 lea	 rdx, QWORD PTR col_offset$[rsp]
  001ca	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  001cf	e8 00 00 00 00	 call	 obj2ast_int
  001d4	89 44 24 78	 mov	 DWORD PTR res$24801[rsp], eax

; 3697 :         if (res != 0) goto failed;

  001d8	83 7c 24 78 00	 cmp	 DWORD PTR res$24801[rsp], 0
  001dd	74 05		 je	 SHORT $LN561@obj2ast_st
  001df	e9 8d 59 00 00	 jmp	 $failed$24787
$LN561@obj2ast_st:
$LN560@obj2ast_st:

; 3698 :         Py_CLEAR(tmp);

  001e4	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001ea	74 4d		 je	 SHORT $LN557@obj2ast_st
  001ec	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001f4	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  001f9	41 b8 72 0e 00
	00		 mov	 r8d, 3698		; 00000e72H
  001ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00206	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0020d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00212	85 c0		 test	 eax, eax
  00214	75 23		 jne	 SHORT $LN557@obj2ast_st
  00216	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0021b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _py_tmp$24809[rsp], rax
  00223	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0022c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$24809[rsp]
  00234	e8 00 00 00 00	 call	 _Py_DecRef
$LN557@obj2ast_st:
  00239	33 c0		 xor	 eax, eax
  0023b	85 c0		 test	 eax, eax
  0023d	75 a5		 jne	 SHORT $LN560@obj2ast_st

; 3699 :     } else {

  0023f	eb 1d		 jmp	 SHORT $LN556@obj2ast_st
$LN563@obj2ast_st:

; 3700 :         PyErr_SetString(PyExc_TypeError, "required field \"col_offset\" missing from stmt");

  00241	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@GDDHAANC@required?5field?5?$CCcol_offset?$CC?5miss@
  00248	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0024f	e8 00 00 00 00	 call	 PyErr_SetString

; 3701 :         return 1;

  00254	b8 01 00 00 00	 mov	 eax, 1
  00259	e9 30 59 00 00	 jmp	 $LN573@obj2ast_st
$LN556@obj2ast_st:

; 3702 :     }
; 3703 :     isinstance = PyObject_IsInstance(obj, (PyObject*)FunctionDef_type);

  0025e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR FunctionDef_type
  00265	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0026d	e8 00 00 00 00	 call	 PyObject_IsInstance
  00272	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 3704 :     if (isinstance == -1) {

  00276	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0027b	75 0a		 jne	 SHORT $LN555@obj2ast_st

; 3705 :         return 1;

  0027d	b8 01 00 00 00	 mov	 eax, 1
  00282	e9 07 59 00 00	 jmp	 $LN573@obj2ast_st
$LN555@obj2ast_st:

; 3706 :     }
; 3707 :     if (isinstance) {

  00287	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0028c	0f 84 37 08 00
	00		 je	 $LN554@obj2ast_st

; 3708 :         identifier name;
; 3709 :         arguments_ty args;
; 3710 :         asdl_seq* body;
; 3711 :         asdl_seq* decorator_list;
; 3712 :         expr_ty returns;
; 3713 : 
; 3714 :         if (_PyObject_HasAttrId(obj, &PyId_name)) {

  00292	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  00297	8b c0		 mov	 eax, eax
  00299	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0029f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002a8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002ac	48 8b d0	 mov	 rdx, rax
  002af	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  002b7	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  002bc	85 c0		 test	 eax, eax
  002be	0f 84 c9 00 00
	00		 je	 $LN553@obj2ast_st

; 3715 :             int res;
; 3716 :             tmp = _PyObject_GetAttrId(obj, &PyId_name);

  002c4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  002c9	8b c0		 mov	 eax, eax
  002cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002d1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002da	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002de	48 8b d0	 mov	 rdx, rax
  002e1	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  002e9	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  002ee	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3717 :             if (tmp == NULL) goto failed;

  002f3	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  002f9	75 05		 jne	 SHORT $LN552@obj2ast_st
  002fb	e9 71 58 00 00	 jmp	 $failed$24787
$LN552@obj2ast_st:

; 3718 :             res = obj2ast_identifier(tmp, &name, arena);

  00300	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00308	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR name$24818[rsp]
  00310	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  00315	e8 00 00 00 00	 call	 obj2ast_identifier
  0031a	89 84 24 b0 00
	00 00		 mov	 DWORD PTR res$24824[rsp], eax

; 3719 :             if (res != 0) goto failed;

  00321	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR res$24824[rsp], 0
  00329	74 05		 je	 SHORT $LN551@obj2ast_st
  0032b	e9 41 58 00 00	 jmp	 $failed$24787
$LN551@obj2ast_st:
$LN550@obj2ast_st:

; 3720 :             Py_CLEAR(tmp);

  00330	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00336	74 4d		 je	 SHORT $LN547@obj2ast_st
  00338	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00340	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  00345	41 b8 88 0e 00
	00		 mov	 r8d, 3720		; 00000e88H
  0034b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00352	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00359	e8 00 00 00 00	 call	 _PyParallel_Guard
  0035e	85 c0		 test	 eax, eax
  00360	75 23		 jne	 SHORT $LN547@obj2ast_st
  00362	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00367	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR _py_tmp$24832[rsp], rax
  0036f	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00378	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$24832[rsp]
  00380	e8 00 00 00 00	 call	 _Py_DecRef
$LN547@obj2ast_st:
  00385	33 c0		 xor	 eax, eax
  00387	85 c0		 test	 eax, eax
  00389	75 a5		 jne	 SHORT $LN550@obj2ast_st

; 3721 :         } else {

  0038b	eb 1d		 jmp	 SHORT $LN546@obj2ast_st
$LN553@obj2ast_st:

; 3722 :             PyErr_SetString(PyExc_TypeError, "required field \"name\" missing from FunctionDef");

  0038d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@PFDPCEPI@required?5field?5?$CCname?$CC?5missing?5fr@
  00394	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0039b	e8 00 00 00 00	 call	 PyErr_SetString

; 3723 :             return 1;

  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	e9 e4 57 00 00	 jmp	 $LN573@obj2ast_st
$LN546@obj2ast_st:

; 3724 :         }
; 3725 :         if (_PyObject_HasAttrId(obj, &PyId_args)) {

  003aa	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  003af	8b c0		 mov	 eax, eax
  003b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003b7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003c0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003c4	48 8b d0	 mov	 rdx, rax
  003c7	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  003cf	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  003d4	85 c0		 test	 eax, eax
  003d6	0f 84 c9 00 00
	00		 je	 $LN545@obj2ast_st

; 3726 :             int res;
; 3727 :             tmp = _PyObject_GetAttrId(obj, &PyId_args);

  003dc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  003e1	8b c0		 mov	 eax, eax
  003e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003e9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003f2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003f6	48 8b d0	 mov	 rdx, rax
  003f9	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00401	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00406	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3728 :             if (tmp == NULL) goto failed;

  0040b	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00411	75 05		 jne	 SHORT $LN544@obj2ast_st
  00413	e9 59 57 00 00	 jmp	 $failed$24787
$LN544@obj2ast_st:

; 3729 :             res = obj2ast_arguments(tmp, &args, arena);

  00418	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00420	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR args$24819[rsp]
  00428	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  0042d	e8 00 00 00 00	 call	 obj2ast_arguments
  00432	89 84 24 c0 00
	00 00		 mov	 DWORD PTR res$24839[rsp], eax

; 3730 :             if (res != 0) goto failed;

  00439	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR res$24839[rsp], 0
  00441	74 05		 je	 SHORT $LN543@obj2ast_st
  00443	e9 29 57 00 00	 jmp	 $failed$24787
$LN543@obj2ast_st:
$LN542@obj2ast_st:

; 3731 :             Py_CLEAR(tmp);

  00448	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0044e	74 4d		 je	 SHORT $LN539@obj2ast_st
  00450	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00458	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  0045d	41 b8 93 0e 00
	00		 mov	 r8d, 3731		; 00000e93H
  00463	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0046a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00471	e8 00 00 00 00	 call	 _PyParallel_Guard
  00476	85 c0		 test	 eax, eax
  00478	75 23		 jne	 SHORT $LN539@obj2ast_st
  0047a	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0047f	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR _py_tmp$24847[rsp], rax
  00487	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00490	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$24847[rsp]
  00498	e8 00 00 00 00	 call	 _Py_DecRef
$LN539@obj2ast_st:
  0049d	33 c0		 xor	 eax, eax
  0049f	85 c0		 test	 eax, eax
  004a1	75 a5		 jne	 SHORT $LN542@obj2ast_st

; 3732 :         } else {

  004a3	eb 1d		 jmp	 SHORT $LN538@obj2ast_st
$LN545@obj2ast_st:

; 3733 :             PyErr_SetString(PyExc_TypeError, "required field \"args\" missing from FunctionDef");

  004a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@OIMKEJCJ@required?5field?5?$CCargs?$CC?5missing?5fr@
  004ac	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  004b3	e8 00 00 00 00	 call	 PyErr_SetString

; 3734 :             return 1;

  004b8	b8 01 00 00 00	 mov	 eax, 1
  004bd	e9 cc 56 00 00	 jmp	 $LN573@obj2ast_st
$LN538@obj2ast_st:

; 3735 :         }
; 3736 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  004c2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  004c7	8b c0		 mov	 eax, eax
  004c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  004cf	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  004d8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  004dc	48 8b d0	 mov	 rdx, rax
  004df	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  004e7	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  004ec	85 c0		 test	 eax, eax
  004ee	0f 84 f7 01 00
	00		 je	 $LN537@obj2ast_st

; 3737 :             int res;
; 3738 :             Py_ssize_t len;
; 3739 :             Py_ssize_t i;
; 3740 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  004f4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  004f9	8b c0		 mov	 eax, eax
  004fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00501	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0050a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0050e	48 8b d0	 mov	 rdx, rax
  00511	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00519	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0051e	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3741 :             if (tmp == NULL) goto failed;

  00523	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00529	75 05		 jne	 SHORT $LN536@obj2ast_st
  0052b	e9 41 56 00 00	 jmp	 $failed$24787
$LN536@obj2ast_st:

; 3742 :             if (!PyList_Check(tmp)) {

  00530	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00535	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00539	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0053f	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00544	85 c0		 test	 eax, eax
  00546	75 25		 jne	 SHORT $LN535@obj2ast_st

; 3743 :                 PyErr_Format(PyExc_TypeError, "FunctionDef field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00548	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0054d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00551	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00555	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@NOJACNBG@FunctionDef?5field?5?$CCbody?$CC?5must?5be@
  0055c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00563	e8 00 00 00 00	 call	 PyErr_Format

; 3744 :                 goto failed;

  00568	e9 04 56 00 00	 jmp	 $failed$24787
$LN535@obj2ast_st:

; 3745 :             }
; 3746 :             len = PyList_GET_SIZE(tmp);

  0056d	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00572	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00576	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR len$24855[rsp], rax

; 3747 :             body = asdl_seq_new(len, arena);

  0057e	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00586	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR len$24855[rsp]
  0058e	e8 00 00 00 00	 call	 asdl_seq_new
  00593	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR body$24820[rsp], rax

; 3748 :             if (body == NULL) goto failed;

  0059b	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR body$24820[rsp], 0
  005a4	75 05		 jne	 SHORT $LN534@obj2ast_st
  005a6	e9 c6 55 00 00	 jmp	 $failed$24787
$LN534@obj2ast_st:

; 3749 :             for (i = 0; i < len; i++) {

  005ab	48 c7 84 24 d8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$24856[rsp], 0
  005b7	eb 13		 jmp	 SHORT $LN533@obj2ast_st
$LN532@obj2ast_st:
  005b9	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR i$24856[rsp]
  005c1	48 ff c0	 inc	 rax
  005c4	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR i$24856[rsp], rax
$LN533@obj2ast_st:
  005cc	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR len$24855[rsp]
  005d4	48 39 84 24 d8
	00 00 00	 cmp	 QWORD PTR i$24856[rsp], rax
  005dc	0f 8d ac 00 00
	00		 jge	 $LN531@obj2ast_st

; 3750 :                 stmt_ty value;
; 3751 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  005e2	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  005e7	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  005eb	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  005f3	48 8d 94 24 e8
	00 00 00	 lea	 rdx, QWORD PTR value$24868[rsp]
  005fb	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR i$24856[rsp]
  00603	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00607	e8 00 00 00 00	 call	 obj2ast_stmt
  0060c	89 84 24 d0 00
	00 00		 mov	 DWORD PTR res$24854[rsp], eax

; 3752 :                 if (res != 0) goto failed;

  00613	83 bc 24 d0 00
	00 00 00	 cmp	 DWORD PTR res$24854[rsp], 0
  0061b	74 05		 je	 SHORT $LN530@obj2ast_st
  0061d	e9 4f 55 00 00	 jmp	 $failed$24787
$LN530@obj2ast_st:

; 3753 :                 asdl_seq_SET(body, i, value);

  00622	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR i$24856[rsp]
  00629	89 84 24 f0 00
	00 00		 mov	 DWORD PTR _asdl_i$24871[rsp], eax
  00630	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR body$24820[rsp], 0
  00639	74 15		 je	 SHORT $LN575@obj2ast_st
  0063b	48 63 84 24 f0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$24871[rsp]
  00643	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR body$24820[rsp]
  0064b	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  0064e	7c 1c		 jl	 SHORT $LN576@obj2ast_st
$LN575@obj2ast_st:
  00650	41 b8 a9 0e 00
	00		 mov	 r8d, 3753		; 00000ea9H
  00656	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  0065d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  00664	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0066a	33 c0		 xor	 eax, eax
$LN576@obj2ast_st:
  0066c	48 63 84 24 f0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$24871[rsp]
  00674	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR body$24820[rsp]
  0067c	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR value$24868[rsp]
  00684	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 3754 :             }

  00689	e9 2b ff ff ff	 jmp	 $LN532@obj2ast_st
$LN531@obj2ast_st:
$LN529@obj2ast_st:

; 3755 :             Py_CLEAR(tmp);

  0068e	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00694	74 4d		 je	 SHORT $LN526@obj2ast_st
  00696	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0069e	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  006a3	41 b8 ab 0e 00
	00		 mov	 r8d, 3755		; 00000eabH
  006a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  006b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  006b7	e8 00 00 00 00	 call	 _PyParallel_Guard
  006bc	85 c0		 test	 eax, eax
  006be	75 23		 jne	 SHORT $LN526@obj2ast_st
  006c0	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  006c5	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR _py_tmp$24877[rsp], rax
  006cd	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  006d6	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$24877[rsp]
  006de	e8 00 00 00 00	 call	 _Py_DecRef
$LN526@obj2ast_st:
  006e3	33 c0		 xor	 eax, eax
  006e5	85 c0		 test	 eax, eax
  006e7	75 a5		 jne	 SHORT $LN529@obj2ast_st

; 3756 :         } else {

  006e9	eb 1d		 jmp	 SHORT $LN525@obj2ast_st
$LN537@obj2ast_st:

; 3757 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from FunctionDef");

  006eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@NFFHEEMP@required?5field?5?$CCbody?$CC?5missing?5fr@
  006f2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  006f9	e8 00 00 00 00	 call	 PyErr_SetString

; 3758 :             return 1;

  006fe	b8 01 00 00 00	 mov	 eax, 1
  00703	e9 86 54 00 00	 jmp	 $LN573@obj2ast_st
$LN525@obj2ast_st:

; 3759 :         }
; 3760 :         if (_PyObject_HasAttrId(obj, &PyId_decorator_list)) {

  00708	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_decorator_list
  0070d	8b c0		 mov	 eax, eax
  0070f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00715	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0071e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00722	48 8b d0	 mov	 rdx, rax
  00725	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0072d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00732	85 c0		 test	 eax, eax
  00734	0f 84 f7 01 00
	00		 je	 $LN524@obj2ast_st

; 3761 :             int res;
; 3762 :             Py_ssize_t len;
; 3763 :             Py_ssize_t i;
; 3764 :             tmp = _PyObject_GetAttrId(obj, &PyId_decorator_list);

  0073a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_decorator_list
  0073f	8b c0		 mov	 eax, eax
  00741	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00747	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00750	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00754	48 8b d0	 mov	 rdx, rax
  00757	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0075f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00764	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3765 :             if (tmp == NULL) goto failed;

  00769	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0076f	75 05		 jne	 SHORT $LN523@obj2ast_st
  00771	e9 fb 53 00 00	 jmp	 $failed$24787
$LN523@obj2ast_st:

; 3766 :             if (!PyList_Check(tmp)) {

  00776	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0077b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0077f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00785	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0078a	85 c0		 test	 eax, eax
  0078c	75 25		 jne	 SHORT $LN522@obj2ast_st

; 3767 :                 PyErr_Format(PyExc_TypeError, "FunctionDef field \"decorator_list\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0078e	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00793	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00797	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0079b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@GALCHNKH@FunctionDef?5field?5?$CCdecorator_lis@
  007a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  007a9	e8 00 00 00 00	 call	 PyErr_Format

; 3768 :                 goto failed;

  007ae	e9 be 53 00 00	 jmp	 $failed$24787
$LN522@obj2ast_st:

; 3769 :             }
; 3770 :             len = PyList_GET_SIZE(tmp);

  007b3	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  007b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  007bc	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR len$24885[rsp], rax

; 3771 :             decorator_list = asdl_seq_new(len, arena);

  007c4	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  007cc	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR len$24885[rsp]
  007d4	e8 00 00 00 00	 call	 asdl_seq_new
  007d9	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR decorator_list$24821[rsp], rax

; 3772 :             if (decorator_list == NULL) goto failed;

  007e1	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR decorator_list$24821[rsp], 0
  007ea	75 05		 jne	 SHORT $LN521@obj2ast_st
  007ec	e9 80 53 00 00	 jmp	 $failed$24787
$LN521@obj2ast_st:

; 3773 :             for (i = 0; i < len; i++) {

  007f1	48 c7 84 24 08
	01 00 00 00 00
	00 00		 mov	 QWORD PTR i$24886[rsp], 0
  007fd	eb 13		 jmp	 SHORT $LN520@obj2ast_st
$LN519@obj2ast_st:
  007ff	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR i$24886[rsp]
  00807	48 ff c0	 inc	 rax
  0080a	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR i$24886[rsp], rax
$LN520@obj2ast_st:
  00812	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR len$24885[rsp]
  0081a	48 39 84 24 08
	01 00 00	 cmp	 QWORD PTR i$24886[rsp], rax
  00822	0f 8d ac 00 00
	00		 jge	 $LN518@obj2ast_st

; 3774 :                 expr_ty value;
; 3775 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00828	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0082d	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00831	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00839	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR value$24898[rsp]
  00841	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR i$24886[rsp]
  00849	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0084d	e8 00 00 00 00	 call	 obj2ast_expr
  00852	89 84 24 00 01
	00 00		 mov	 DWORD PTR res$24884[rsp], eax

; 3776 :                 if (res != 0) goto failed;

  00859	83 bc 24 00 01
	00 00 00	 cmp	 DWORD PTR res$24884[rsp], 0
  00861	74 05		 je	 SHORT $LN517@obj2ast_st
  00863	e9 09 53 00 00	 jmp	 $failed$24787
$LN517@obj2ast_st:

; 3777 :                 asdl_seq_SET(decorator_list, i, value);

  00868	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR i$24886[rsp]
  0086f	89 84 24 20 01
	00 00		 mov	 DWORD PTR _asdl_i$24901[rsp], eax
  00876	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR decorator_list$24821[rsp], 0
  0087f	74 15		 je	 SHORT $LN577@obj2ast_st
  00881	48 63 84 24 20
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$24901[rsp]
  00889	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR decorator_list$24821[rsp]
  00891	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  00894	7c 1c		 jl	 SHORT $LN578@obj2ast_st
$LN577@obj2ast_st:
  00896	41 b8 c1 0e 00
	00		 mov	 r8d, 3777		; 00000ec1H
  0089c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  008a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GK@LGJKDKMK@?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd@
  008aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008b0	33 c0		 xor	 eax, eax
$LN578@obj2ast_st:
  008b2	48 63 84 24 20
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$24901[rsp]
  008ba	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR decorator_list$24821[rsp]
  008c2	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR value$24898[rsp]
  008ca	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 3778 :             }

  008cf	e9 2b ff ff ff	 jmp	 $LN519@obj2ast_st
$LN518@obj2ast_st:
$LN516@obj2ast_st:

; 3779 :             Py_CLEAR(tmp);

  008d4	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  008da	74 4d		 je	 SHORT $LN513@obj2ast_st
  008dc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  008e4	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  008e9	41 b8 c3 0e 00
	00		 mov	 r8d, 3779		; 00000ec3H
  008ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  008f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  008fd	e8 00 00 00 00	 call	 _PyParallel_Guard
  00902	85 c0		 test	 eax, eax
  00904	75 23		 jne	 SHORT $LN513@obj2ast_st
  00906	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0090b	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR _py_tmp$24908[rsp], rax
  00913	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0091c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$24908[rsp]
  00924	e8 00 00 00 00	 call	 _Py_DecRef
$LN513@obj2ast_st:
  00929	33 c0		 xor	 eax, eax
  0092b	85 c0		 test	 eax, eax
  0092d	75 a5		 jne	 SHORT $LN516@obj2ast_st

; 3780 :         } else {

  0092f	eb 1d		 jmp	 SHORT $LN512@obj2ast_st
$LN524@obj2ast_st:

; 3781 :             PyErr_SetString(PyExc_TypeError, "required field \"decorator_list\" missing from FunctionDef");

  00931	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@FGGBKHJL@required?5field?5?$CCdecorator_list?$CC?5@
  00938	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0093f	e8 00 00 00 00	 call	 PyErr_SetString

; 3782 :             return 1;

  00944	b8 01 00 00 00	 mov	 eax, 1
  00949	e9 40 52 00 00	 jmp	 $LN573@obj2ast_st
$LN512@obj2ast_st:

; 3783 :         }
; 3784 :         if (_PyObject_HasAttrId(obj, &PyId_returns)) {

  0094e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_returns
  00953	8b c0		 mov	 eax, eax
  00955	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0095b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00964	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00968	48 8b d0	 mov	 rdx, rax
  0096b	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00973	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00978	85 c0		 test	 eax, eax
  0097a	0f 84 c9 00 00
	00		 je	 $LN511@obj2ast_st

; 3785 :             int res;
; 3786 :             tmp = _PyObject_GetAttrId(obj, &PyId_returns);

  00980	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_returns
  00985	8b c0		 mov	 eax, eax
  00987	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0098d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00996	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0099a	48 8b d0	 mov	 rdx, rax
  0099d	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  009a5	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  009aa	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3787 :             if (tmp == NULL) goto failed;

  009af	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  009b5	75 05		 jne	 SHORT $LN510@obj2ast_st
  009b7	e9 b5 51 00 00	 jmp	 $failed$24787
$LN510@obj2ast_st:

; 3788 :             res = obj2ast_expr(tmp, &returns, arena);

  009bc	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  009c4	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR returns$24822[rsp]
  009cc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  009d1	e8 00 00 00 00	 call	 obj2ast_expr
  009d6	89 84 24 30 01
	00 00		 mov	 DWORD PTR res$24915[rsp], eax

; 3789 :             if (res != 0) goto failed;

  009dd	83 bc 24 30 01
	00 00 00	 cmp	 DWORD PTR res$24915[rsp], 0
  009e5	74 05		 je	 SHORT $LN509@obj2ast_st
  009e7	e9 85 51 00 00	 jmp	 $failed$24787
$LN509@obj2ast_st:
$LN508@obj2ast_st:

; 3790 :             Py_CLEAR(tmp);

  009ec	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  009f2	74 4d		 je	 SHORT $LN505@obj2ast_st
  009f4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  009fc	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  00a01	41 b8 ce 0e 00
	00		 mov	 r8d, 3790		; 00000eceH
  00a07	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00a0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00a15	e8 00 00 00 00	 call	 _PyParallel_Guard
  00a1a	85 c0		 test	 eax, eax
  00a1c	75 23		 jne	 SHORT $LN505@obj2ast_st
  00a1e	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00a23	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR _py_tmp$24923[rsp], rax
  00a2b	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00a34	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$24923[rsp]
  00a3c	e8 00 00 00 00	 call	 _Py_DecRef
$LN505@obj2ast_st:
  00a41	33 c0		 xor	 eax, eax
  00a43	85 c0		 test	 eax, eax
  00a45	75 a5		 jne	 SHORT $LN508@obj2ast_st

; 3791 :         } else {

  00a47	eb 0c		 jmp	 SHORT $LN504@obj2ast_st
$LN511@obj2ast_st:

; 3792 :             returns = NULL;

  00a49	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR returns$24822[rsp], 0
$LN504@obj2ast_st:

; 3793 :         }
; 3794 :         *out = FunctionDef(name, args, body, decorator_list, returns, lineno,
; 3795 :                            col_offset, arena);

  00a55	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  00a5d	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00a62	8b 44 24 60	 mov	 eax, DWORD PTR col_offset$[rsp]
  00a66	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00a6a	8b 44 24 50	 mov	 eax, DWORD PTR lineno$[rsp]
  00a6e	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00a72	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR returns$24822[rsp]
  00a7a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a7f	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR decorator_list$24821[rsp]
  00a87	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR body$24820[rsp]
  00a8f	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR args$24819[rsp]
  00a97	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR name$24818[rsp]
  00a9f	e8 00 00 00 00	 call	 _Py_FunctionDef
  00aa4	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00aac	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3796 :         if (*out == NULL) goto failed;

  00aaf	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00ab7	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00abb	75 05		 jne	 SHORT $LN503@obj2ast_st
  00abd	e9 af 50 00 00	 jmp	 $failed$24787
$LN503@obj2ast_st:

; 3797 :         return 0;

  00ac2	33 c0		 xor	 eax, eax
  00ac4	e9 c5 50 00 00	 jmp	 $LN573@obj2ast_st
$LN554@obj2ast_st:

; 3798 :     }
; 3799 :     isinstance = PyObject_IsInstance(obj, (PyObject*)ClassDef_type);

  00ac9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ClassDef_type
  00ad0	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00ad8	e8 00 00 00 00	 call	 PyObject_IsInstance
  00add	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 3800 :     if (isinstance == -1) {

  00ae1	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00ae6	75 0a		 jne	 SHORT $LN502@obj2ast_st

; 3801 :         return 1;

  00ae8	b8 01 00 00 00	 mov	 eax, 1
  00aed	e9 9c 50 00 00	 jmp	 $LN573@obj2ast_st
$LN502@obj2ast_st:

; 3802 :     }
; 3803 :     if (isinstance) {

  00af2	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00af7	0f 84 cc 0c 00
	00		 je	 $LN501@obj2ast_st

; 3804 :         identifier name;
; 3805 :         asdl_seq* bases;
; 3806 :         asdl_seq* keywords;
; 3807 :         expr_ty starargs;
; 3808 :         expr_ty kwargs;
; 3809 :         asdl_seq* body;
; 3810 :         asdl_seq* decorator_list;
; 3811 : 
; 3812 :         if (_PyObject_HasAttrId(obj, &PyId_name)) {

  00afd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  00b02	8b c0		 mov	 eax, eax
  00b04	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00b0a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00b13	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00b17	48 8b d0	 mov	 rdx, rax
  00b1a	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00b22	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00b27	85 c0		 test	 eax, eax
  00b29	0f 84 c9 00 00
	00		 je	 $LN500@obj2ast_st

; 3813 :             int res;
; 3814 :             tmp = _PyObject_GetAttrId(obj, &PyId_name);

  00b2f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  00b34	8b c0		 mov	 eax, eax
  00b36	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00b3c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00b45	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00b49	48 8b d0	 mov	 rdx, rax
  00b4c	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00b54	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00b59	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3815 :             if (tmp == NULL) goto failed;

  00b5e	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00b64	75 05		 jne	 SHORT $LN499@obj2ast_st
  00b66	e9 06 50 00 00	 jmp	 $failed$24787
$LN499@obj2ast_st:

; 3816 :             res = obj2ast_identifier(tmp, &name, arena);

  00b6b	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00b73	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR name$24934[rsp]
  00b7b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  00b80	e8 00 00 00 00	 call	 obj2ast_identifier
  00b85	89 84 24 78 01
	00 00		 mov	 DWORD PTR res$24942[rsp], eax

; 3817 :             if (res != 0) goto failed;

  00b8c	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR res$24942[rsp], 0
  00b94	74 05		 je	 SHORT $LN498@obj2ast_st
  00b96	e9 d6 4f 00 00	 jmp	 $failed$24787
$LN498@obj2ast_st:
$LN497@obj2ast_st:

; 3818 :             Py_CLEAR(tmp);

  00b9b	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00ba1	74 4d		 je	 SHORT $LN494@obj2ast_st
  00ba3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00bab	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  00bb0	41 b8 ea 0e 00
	00		 mov	 r8d, 3818		; 00000eeaH
  00bb6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00bbd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00bc4	e8 00 00 00 00	 call	 _PyParallel_Guard
  00bc9	85 c0		 test	 eax, eax
  00bcb	75 23		 jne	 SHORT $LN494@obj2ast_st
  00bcd	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00bd2	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR _py_tmp$24950[rsp], rax
  00bda	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00be3	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$24950[rsp]
  00beb	e8 00 00 00 00	 call	 _Py_DecRef
$LN494@obj2ast_st:
  00bf0	33 c0		 xor	 eax, eax
  00bf2	85 c0		 test	 eax, eax
  00bf4	75 a5		 jne	 SHORT $LN497@obj2ast_st

; 3819 :         } else {

  00bf6	eb 1d		 jmp	 SHORT $LN493@obj2ast_st
$LN500@obj2ast_st:

; 3820 :             PyErr_SetString(PyExc_TypeError, "required field \"name\" missing from ClassDef");

  00bf8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@NNOCJKEL@required?5field?5?$CCname?$CC?5missing?5fr@
  00bff	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00c06	e8 00 00 00 00	 call	 PyErr_SetString

; 3821 :             return 1;

  00c0b	b8 01 00 00 00	 mov	 eax, 1
  00c10	e9 79 4f 00 00	 jmp	 $LN573@obj2ast_st
$LN493@obj2ast_st:

; 3822 :         }
; 3823 :         if (_PyObject_HasAttrId(obj, &PyId_bases)) {

  00c15	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_bases
  00c1a	8b c0		 mov	 eax, eax
  00c1c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00c22	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00c2b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00c2f	48 8b d0	 mov	 rdx, rax
  00c32	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00c3a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00c3f	85 c0		 test	 eax, eax
  00c41	0f 84 f7 01 00
	00		 je	 $LN492@obj2ast_st

; 3824 :             int res;
; 3825 :             Py_ssize_t len;
; 3826 :             Py_ssize_t i;
; 3827 :             tmp = _PyObject_GetAttrId(obj, &PyId_bases);

  00c47	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_bases
  00c4c	8b c0		 mov	 eax, eax
  00c4e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00c54	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00c5d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00c61	48 8b d0	 mov	 rdx, rax
  00c64	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00c6c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00c71	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3828 :             if (tmp == NULL) goto failed;

  00c76	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00c7c	75 05		 jne	 SHORT $LN491@obj2ast_st
  00c7e	e9 ee 4e 00 00	 jmp	 $failed$24787
$LN491@obj2ast_st:

; 3829 :             if (!PyList_Check(tmp)) {

  00c83	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00c88	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c8c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c92	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00c97	85 c0		 test	 eax, eax
  00c99	75 25		 jne	 SHORT $LN490@obj2ast_st

; 3830 :                 PyErr_Format(PyExc_TypeError, "ClassDef field \"bases\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00c9b	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00ca0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00ca4	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00ca8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@MHEBOGJH@ClassDef?5field?5?$CCbases?$CC?5must?5be?5a@
  00caf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00cb6	e8 00 00 00 00	 call	 PyErr_Format

; 3831 :                 goto failed;

  00cbb	e9 b1 4e 00 00	 jmp	 $failed$24787
$LN490@obj2ast_st:

; 3832 :             }
; 3833 :             len = PyList_GET_SIZE(tmp);

  00cc0	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00cc5	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00cc9	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR len$24958[rsp], rax

; 3834 :             bases = asdl_seq_new(len, arena);

  00cd1	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00cd9	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR len$24958[rsp]
  00ce1	e8 00 00 00 00	 call	 asdl_seq_new
  00ce6	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR bases$24935[rsp], rax

; 3835 :             if (bases == NULL) goto failed;

  00cee	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR bases$24935[rsp], 0
  00cf7	75 05		 jne	 SHORT $LN489@obj2ast_st
  00cf9	e9 73 4e 00 00	 jmp	 $failed$24787
$LN489@obj2ast_st:

; 3836 :             for (i = 0; i < len; i++) {

  00cfe	48 c7 84 24 90
	01 00 00 00 00
	00 00		 mov	 QWORD PTR i$24959[rsp], 0
  00d0a	eb 13		 jmp	 SHORT $LN488@obj2ast_st
$LN487@obj2ast_st:
  00d0c	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR i$24959[rsp]
  00d14	48 ff c0	 inc	 rax
  00d17	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR i$24959[rsp], rax
$LN488@obj2ast_st:
  00d1f	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR len$24958[rsp]
  00d27	48 39 84 24 90
	01 00 00	 cmp	 QWORD PTR i$24959[rsp], rax
  00d2f	0f 8d ac 00 00
	00		 jge	 $LN486@obj2ast_st

; 3837 :                 expr_ty value;
; 3838 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00d35	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00d3a	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00d3e	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00d46	48 8d 94 24 a0
	01 00 00	 lea	 rdx, QWORD PTR value$24971[rsp]
  00d4e	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR i$24959[rsp]
  00d56	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00d5a	e8 00 00 00 00	 call	 obj2ast_expr
  00d5f	89 84 24 88 01
	00 00		 mov	 DWORD PTR res$24957[rsp], eax

; 3839 :                 if (res != 0) goto failed;

  00d66	83 bc 24 88 01
	00 00 00	 cmp	 DWORD PTR res$24957[rsp], 0
  00d6e	74 05		 je	 SHORT $LN485@obj2ast_st
  00d70	e9 fc 4d 00 00	 jmp	 $failed$24787
$LN485@obj2ast_st:

; 3840 :                 asdl_seq_SET(bases, i, value);

  00d75	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR i$24959[rsp]
  00d7c	89 84 24 a8 01
	00 00		 mov	 DWORD PTR _asdl_i$24974[rsp], eax
  00d83	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR bases$24935[rsp], 0
  00d8c	74 15		 je	 SHORT $LN579@obj2ast_st
  00d8e	48 63 84 24 a8
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$24974[rsp]
  00d96	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR bases$24935[rsp]
  00d9e	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  00da1	7c 1c		 jl	 SHORT $LN580@obj2ast_st
$LN579@obj2ast_st:
  00da3	41 b8 00 0f 00
	00		 mov	 r8d, 3840		; 00000f00H
  00da9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  00db0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@MIINPGAI@?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@
  00db7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00dbd	33 c0		 xor	 eax, eax
$LN580@obj2ast_st:
  00dbf	48 63 84 24 a8
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$24974[rsp]
  00dc7	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR bases$24935[rsp]
  00dcf	48 8b 94 24 a0
	01 00 00	 mov	 rdx, QWORD PTR value$24971[rsp]
  00dd7	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 3841 :             }

  00ddc	e9 2b ff ff ff	 jmp	 $LN487@obj2ast_st
$LN486@obj2ast_st:
$LN484@obj2ast_st:

; 3842 :             Py_CLEAR(tmp);

  00de1	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00de7	74 4d		 je	 SHORT $LN481@obj2ast_st
  00de9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00df1	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  00df6	41 b8 02 0f 00
	00		 mov	 r8d, 3842		; 00000f02H
  00dfc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00e03	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  00e0a	e8 00 00 00 00	 call	 _PyParallel_Guard
  00e0f	85 c0		 test	 eax, eax
  00e11	75 23		 jne	 SHORT $LN481@obj2ast_st
  00e13	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00e18	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR _py_tmp$24981[rsp], rax
  00e20	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00e29	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$24981[rsp]
  00e31	e8 00 00 00 00	 call	 _Py_DecRef
$LN481@obj2ast_st:
  00e36	33 c0		 xor	 eax, eax
  00e38	85 c0		 test	 eax, eax
  00e3a	75 a5		 jne	 SHORT $LN484@obj2ast_st

; 3843 :         } else {

  00e3c	eb 1d		 jmp	 SHORT $LN480@obj2ast_st
$LN492@obj2ast_st:

; 3844 :             PyErr_SetString(PyExc_TypeError, "required field \"bases\" missing from ClassDef");

  00e3e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@HBECIBCI@required?5field?5?$CCbases?$CC?5missing?5f@
  00e45	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00e4c	e8 00 00 00 00	 call	 PyErr_SetString

; 3845 :             return 1;

  00e51	b8 01 00 00 00	 mov	 eax, 1
  00e56	e9 33 4d 00 00	 jmp	 $LN573@obj2ast_st
$LN480@obj2ast_st:

; 3846 :         }
; 3847 :         if (_PyObject_HasAttrId(obj, &PyId_keywords)) {

  00e5b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_keywords
  00e60	8b c0		 mov	 eax, eax
  00e62	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00e68	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00e71	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00e75	48 8b d0	 mov	 rdx, rax
  00e78	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00e80	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00e85	85 c0		 test	 eax, eax
  00e87	0f 84 f7 01 00
	00		 je	 $LN479@obj2ast_st

; 3848 :             int res;
; 3849 :             Py_ssize_t len;
; 3850 :             Py_ssize_t i;
; 3851 :             tmp = _PyObject_GetAttrId(obj, &PyId_keywords);

  00e8d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_keywords
  00e92	8b c0		 mov	 eax, eax
  00e94	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00e9a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00ea3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00ea7	48 8b d0	 mov	 rdx, rax
  00eaa	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00eb2	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00eb7	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3852 :             if (tmp == NULL) goto failed;

  00ebc	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00ec2	75 05		 jne	 SHORT $LN478@obj2ast_st
  00ec4	e9 a8 4c 00 00	 jmp	 $failed$24787
$LN478@obj2ast_st:

; 3853 :             if (!PyList_Check(tmp)) {

  00ec9	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00ece	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00ed2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00ed8	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00edd	85 c0		 test	 eax, eax
  00edf	75 25		 jne	 SHORT $LN477@obj2ast_st

; 3854 :                 PyErr_Format(PyExc_TypeError, "ClassDef field \"keywords\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00ee1	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00ee6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00eea	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00eee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@FAJFAAEL@ClassDef?5field?5?$CCkeywords?$CC?5must?5b@
  00ef5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00efc	e8 00 00 00 00	 call	 PyErr_Format

; 3855 :                 goto failed;

  00f01	e9 6b 4c 00 00	 jmp	 $failed$24787
$LN477@obj2ast_st:

; 3856 :             }
; 3857 :             len = PyList_GET_SIZE(tmp);

  00f06	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00f0b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00f0f	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR len$24989[rsp], rax

; 3858 :             keywords = asdl_seq_new(len, arena);

  00f17	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00f1f	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR len$24989[rsp]
  00f27	e8 00 00 00 00	 call	 asdl_seq_new
  00f2c	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR keywords$24936[rsp], rax

; 3859 :             if (keywords == NULL) goto failed;

  00f34	48 83 bc 24 58
	01 00 00 00	 cmp	 QWORD PTR keywords$24936[rsp], 0
  00f3d	75 05		 jne	 SHORT $LN476@obj2ast_st
  00f3f	e9 2d 4c 00 00	 jmp	 $failed$24787
$LN476@obj2ast_st:

; 3860 :             for (i = 0; i < len; i++) {

  00f44	48 c7 84 24 c0
	01 00 00 00 00
	00 00		 mov	 QWORD PTR i$24990[rsp], 0
  00f50	eb 13		 jmp	 SHORT $LN475@obj2ast_st
$LN474@obj2ast_st:
  00f52	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR i$24990[rsp]
  00f5a	48 ff c0	 inc	 rax
  00f5d	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR i$24990[rsp], rax
$LN475@obj2ast_st:
  00f65	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR len$24989[rsp]
  00f6d	48 39 84 24 c0
	01 00 00	 cmp	 QWORD PTR i$24990[rsp], rax
  00f75	0f 8d ac 00 00
	00		 jge	 $LN473@obj2ast_st

; 3861 :                 keyword_ty value;
; 3862 :                 res = obj2ast_keyword(PyList_GET_ITEM(tmp, i), &value, arena);

  00f7b	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  00f80	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00f84	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00f8c	48 8d 94 24 d0
	01 00 00	 lea	 rdx, QWORD PTR value$25002[rsp]
  00f94	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR i$24990[rsp]
  00f9c	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00fa0	e8 00 00 00 00	 call	 obj2ast_keyword
  00fa5	89 84 24 b8 01
	00 00		 mov	 DWORD PTR res$24988[rsp], eax

; 3863 :                 if (res != 0) goto failed;

  00fac	83 bc 24 b8 01
	00 00 00	 cmp	 DWORD PTR res$24988[rsp], 0
  00fb4	74 05		 je	 SHORT $LN472@obj2ast_st
  00fb6	e9 b6 4b 00 00	 jmp	 $failed$24787
$LN472@obj2ast_st:

; 3864 :                 asdl_seq_SET(keywords, i, value);

  00fbb	8b 84 24 c0 01
	00 00		 mov	 eax, DWORD PTR i$24990[rsp]
  00fc2	89 84 24 d8 01
	00 00		 mov	 DWORD PTR _asdl_i$25005[rsp], eax
  00fc9	48 83 bc 24 58
	01 00 00 00	 cmp	 QWORD PTR keywords$24936[rsp], 0
  00fd2	74 15		 je	 SHORT $LN581@obj2ast_st
  00fd4	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25005[rsp]
  00fdc	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR keywords$24936[rsp]
  00fe4	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  00fe7	7c 1c		 jl	 SHORT $LN582@obj2ast_st
$LN581@obj2ast_st:
  00fe9	41 b8 18 0f 00
	00		 mov	 r8d, 3864		; 00000f18H
  00fef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  00ff6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@OHBDJICK@?$AA?$CI?$AAk?$AAe?$AAy?$AAw?$AAo?$AAr?$AAd?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAe?$AAy?$AAw?$AAo?$AAr?$AAd@
  00ffd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01003	33 c0		 xor	 eax, eax
$LN582@obj2ast_st:
  01005	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25005[rsp]
  0100d	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR keywords$24936[rsp]
  01015	48 8b 94 24 d0
	01 00 00	 mov	 rdx, QWORD PTR value$25002[rsp]
  0101d	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 3865 :             }

  01022	e9 2b ff ff ff	 jmp	 $LN474@obj2ast_st
$LN473@obj2ast_st:
$LN471@obj2ast_st:

; 3866 :             Py_CLEAR(tmp);

  01027	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0102d	74 4d		 je	 SHORT $LN468@obj2ast_st
  0102f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01037	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  0103c	41 b8 1a 0f 00
	00		 mov	 r8d, 3866		; 00000f1aH
  01042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01050	e8 00 00 00 00	 call	 _PyParallel_Guard
  01055	85 c0		 test	 eax, eax
  01057	75 23		 jne	 SHORT $LN468@obj2ast_st
  01059	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0105e	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR _py_tmp$25012[rsp], rax
  01066	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0106f	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$25012[rsp]
  01077	e8 00 00 00 00	 call	 _Py_DecRef
$LN468@obj2ast_st:
  0107c	33 c0		 xor	 eax, eax
  0107e	85 c0		 test	 eax, eax
  01080	75 a5		 jne	 SHORT $LN471@obj2ast_st

; 3867 :         } else {

  01082	eb 1d		 jmp	 SHORT $LN467@obj2ast_st
$LN479@obj2ast_st:

; 3868 :             PyErr_SetString(PyExc_TypeError, "required field \"keywords\" missing from ClassDef");

  01084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@IHPLINCF@required?5field?5?$CCkeywords?$CC?5missin@
  0108b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01092	e8 00 00 00 00	 call	 PyErr_SetString

; 3869 :             return 1;

  01097	b8 01 00 00 00	 mov	 eax, 1
  0109c	e9 ed 4a 00 00	 jmp	 $LN573@obj2ast_st
$LN467@obj2ast_st:

; 3870 :         }
; 3871 :         if (_PyObject_HasAttrId(obj, &PyId_starargs)) {

  010a1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_starargs
  010a6	8b c0		 mov	 eax, eax
  010a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  010ae	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  010b7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  010bb	48 8b d0	 mov	 rdx, rax
  010be	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  010c6	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  010cb	85 c0		 test	 eax, eax
  010cd	0f 84 c9 00 00
	00		 je	 $LN466@obj2ast_st

; 3872 :             int res;
; 3873 :             tmp = _PyObject_GetAttrId(obj, &PyId_starargs);

  010d3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_starargs
  010d8	8b c0		 mov	 eax, eax
  010da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  010e0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  010e9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  010ed	48 8b d0	 mov	 rdx, rax
  010f0	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  010f8	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  010fd	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3874 :             if (tmp == NULL) goto failed;

  01102	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01108	75 05		 jne	 SHORT $LN465@obj2ast_st
  0110a	e9 62 4a 00 00	 jmp	 $failed$24787
$LN465@obj2ast_st:

; 3875 :             res = obj2ast_expr(tmp, &starargs, arena);

  0110f	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  01117	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR starargs$24937[rsp]
  0111f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  01124	e8 00 00 00 00	 call	 obj2ast_expr
  01129	89 84 24 e8 01
	00 00		 mov	 DWORD PTR res$25019[rsp], eax

; 3876 :             if (res != 0) goto failed;

  01130	83 bc 24 e8 01
	00 00 00	 cmp	 DWORD PTR res$25019[rsp], 0
  01138	74 05		 je	 SHORT $LN464@obj2ast_st
  0113a	e9 32 4a 00 00	 jmp	 $failed$24787
$LN464@obj2ast_st:
$LN463@obj2ast_st:

; 3877 :             Py_CLEAR(tmp);

  0113f	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01145	74 4d		 je	 SHORT $LN460@obj2ast_st
  01147	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0114f	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  01154	41 b8 25 0f 00
	00		 mov	 r8d, 3877		; 00000f25H
  0115a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01168	e8 00 00 00 00	 call	 _PyParallel_Guard
  0116d	85 c0		 test	 eax, eax
  0116f	75 23		 jne	 SHORT $LN460@obj2ast_st
  01171	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01176	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR _py_tmp$25027[rsp], rax
  0117e	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  01187	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$25027[rsp]
  0118f	e8 00 00 00 00	 call	 _Py_DecRef
$LN460@obj2ast_st:
  01194	33 c0		 xor	 eax, eax
  01196	85 c0		 test	 eax, eax
  01198	75 a5		 jne	 SHORT $LN463@obj2ast_st

; 3878 :         } else {

  0119a	eb 0c		 jmp	 SHORT $LN459@obj2ast_st
$LN466@obj2ast_st:

; 3879 :             starargs = NULL;

  0119c	48 c7 84 24 60
	01 00 00 00 00
	00 00		 mov	 QWORD PTR starargs$24937[rsp], 0
$LN459@obj2ast_st:

; 3880 :         }
; 3881 :         if (_PyObject_HasAttrId(obj, &PyId_kwargs)) {

  011a8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwargs
  011ad	8b c0		 mov	 eax, eax
  011af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  011b5	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  011be	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  011c2	48 8b d0	 mov	 rdx, rax
  011c5	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  011cd	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  011d2	85 c0		 test	 eax, eax
  011d4	0f 84 c9 00 00
	00		 je	 $LN458@obj2ast_st

; 3882 :             int res;
; 3883 :             tmp = _PyObject_GetAttrId(obj, &PyId_kwargs);

  011da	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwargs
  011df	8b c0		 mov	 eax, eax
  011e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  011e7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  011f0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  011f4	48 8b d0	 mov	 rdx, rax
  011f7	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  011ff	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01204	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3884 :             if (tmp == NULL) goto failed;

  01209	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0120f	75 05		 jne	 SHORT $LN457@obj2ast_st
  01211	e9 5b 49 00 00	 jmp	 $failed$24787
$LN457@obj2ast_st:

; 3885 :             res = obj2ast_expr(tmp, &kwargs, arena);

  01216	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0121e	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR kwargs$24938[rsp]
  01226	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  0122b	e8 00 00 00 00	 call	 obj2ast_expr
  01230	89 84 24 f8 01
	00 00		 mov	 DWORD PTR res$25034[rsp], eax

; 3886 :             if (res != 0) goto failed;

  01237	83 bc 24 f8 01
	00 00 00	 cmp	 DWORD PTR res$25034[rsp], 0
  0123f	74 05		 je	 SHORT $LN456@obj2ast_st
  01241	e9 2b 49 00 00	 jmp	 $failed$24787
$LN456@obj2ast_st:
$LN455@obj2ast_st:

; 3887 :             Py_CLEAR(tmp);

  01246	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0124c	74 4d		 je	 SHORT $LN452@obj2ast_st
  0124e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01256	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  0125b	41 b8 2f 0f 00
	00		 mov	 r8d, 3887		; 00000f2fH
  01261	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0126f	e8 00 00 00 00	 call	 _PyParallel_Guard
  01274	85 c0		 test	 eax, eax
  01276	75 23		 jne	 SHORT $LN452@obj2ast_st
  01278	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0127d	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR _py_tmp$25042[rsp], rax
  01285	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0128e	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$25042[rsp]
  01296	e8 00 00 00 00	 call	 _Py_DecRef
$LN452@obj2ast_st:
  0129b	33 c0		 xor	 eax, eax
  0129d	85 c0		 test	 eax, eax
  0129f	75 a5		 jne	 SHORT $LN455@obj2ast_st

; 3888 :         } else {

  012a1	eb 0c		 jmp	 SHORT $LN451@obj2ast_st
$LN458@obj2ast_st:

; 3889 :             kwargs = NULL;

  012a3	48 c7 84 24 40
	01 00 00 00 00
	00 00		 mov	 QWORD PTR kwargs$24938[rsp], 0
$LN451@obj2ast_st:

; 3890 :         }
; 3891 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  012af	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  012b4	8b c0		 mov	 eax, eax
  012b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  012bc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  012c5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  012c9	48 8b d0	 mov	 rdx, rax
  012cc	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  012d4	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  012d9	85 c0		 test	 eax, eax
  012db	0f 84 f7 01 00
	00		 je	 $LN450@obj2ast_st

; 3892 :             int res;
; 3893 :             Py_ssize_t len;
; 3894 :             Py_ssize_t i;
; 3895 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  012e1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  012e6	8b c0		 mov	 eax, eax
  012e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  012ee	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  012f7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  012fb	48 8b d0	 mov	 rdx, rax
  012fe	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01306	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0130b	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3896 :             if (tmp == NULL) goto failed;

  01310	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01316	75 05		 jne	 SHORT $LN449@obj2ast_st
  01318	e9 54 48 00 00	 jmp	 $failed$24787
$LN449@obj2ast_st:

; 3897 :             if (!PyList_Check(tmp)) {

  0131d	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01322	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01326	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0132c	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  01331	85 c0		 test	 eax, eax
  01333	75 25		 jne	 SHORT $LN448@obj2ast_st

; 3898 :                 PyErr_Format(PyExc_TypeError, "ClassDef field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01335	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0133a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0133e	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  01342	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@FELJEMHL@ClassDef?5field?5?$CCbody?$CC?5must?5be?5a?5@
  01349	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01350	e8 00 00 00 00	 call	 PyErr_Format

; 3899 :                 goto failed;

  01355	e9 17 48 00 00	 jmp	 $failed$24787
$LN448@obj2ast_st:

; 3900 :             }
; 3901 :             len = PyList_GET_SIZE(tmp);

  0135a	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0135f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  01363	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR len$25050[rsp], rax

; 3902 :             body = asdl_seq_new(len, arena);

  0136b	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  01373	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR len$25050[rsp]
  0137b	e8 00 00 00 00	 call	 asdl_seq_new
  01380	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR body$24939[rsp], rax

; 3903 :             if (body == NULL) goto failed;

  01388	48 83 bc 24 70
	01 00 00 00	 cmp	 QWORD PTR body$24939[rsp], 0
  01391	75 05		 jne	 SHORT $LN447@obj2ast_st
  01393	e9 d9 47 00 00	 jmp	 $failed$24787
$LN447@obj2ast_st:

; 3904 :             for (i = 0; i < len; i++) {

  01398	48 c7 84 24 10
	02 00 00 00 00
	00 00		 mov	 QWORD PTR i$25051[rsp], 0
  013a4	eb 13		 jmp	 SHORT $LN446@obj2ast_st
$LN445@obj2ast_st:
  013a6	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR i$25051[rsp]
  013ae	48 ff c0	 inc	 rax
  013b1	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR i$25051[rsp], rax
$LN446@obj2ast_st:
  013b9	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR len$25050[rsp]
  013c1	48 39 84 24 10
	02 00 00	 cmp	 QWORD PTR i$25051[rsp], rax
  013c9	0f 8d ac 00 00
	00		 jge	 $LN444@obj2ast_st

; 3905 :                 stmt_ty value;
; 3906 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  013cf	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  013d4	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  013d8	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  013e0	48 8d 94 24 20
	02 00 00	 lea	 rdx, QWORD PTR value$25063[rsp]
  013e8	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR i$25051[rsp]
  013f0	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  013f4	e8 00 00 00 00	 call	 obj2ast_stmt
  013f9	89 84 24 08 02
	00 00		 mov	 DWORD PTR res$25049[rsp], eax

; 3907 :                 if (res != 0) goto failed;

  01400	83 bc 24 08 02
	00 00 00	 cmp	 DWORD PTR res$25049[rsp], 0
  01408	74 05		 je	 SHORT $LN443@obj2ast_st
  0140a	e9 62 47 00 00	 jmp	 $failed$24787
$LN443@obj2ast_st:

; 3908 :                 asdl_seq_SET(body, i, value);

  0140f	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR i$25051[rsp]
  01416	89 84 24 28 02
	00 00		 mov	 DWORD PTR _asdl_i$25066[rsp], eax
  0141d	48 83 bc 24 70
	01 00 00 00	 cmp	 QWORD PTR body$24939[rsp], 0
  01426	74 15		 je	 SHORT $LN583@obj2ast_st
  01428	48 63 84 24 28
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25066[rsp]
  01430	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR body$24939[rsp]
  01438	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  0143b	7c 1c		 jl	 SHORT $LN584@obj2ast_st
$LN583@obj2ast_st:
  0143d	41 b8 44 0f 00
	00		 mov	 r8d, 3908		; 00000f44H
  01443	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  0144a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  01451	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01457	33 c0		 xor	 eax, eax
$LN584@obj2ast_st:
  01459	48 63 84 24 28
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25066[rsp]
  01461	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR body$24939[rsp]
  01469	48 8b 94 24 20
	02 00 00	 mov	 rdx, QWORD PTR value$25063[rsp]
  01471	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 3909 :             }

  01476	e9 2b ff ff ff	 jmp	 $LN445@obj2ast_st
$LN444@obj2ast_st:
$LN442@obj2ast_st:

; 3910 :             Py_CLEAR(tmp);

  0147b	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01481	74 4d		 je	 SHORT $LN439@obj2ast_st
  01483	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0148b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  01490	41 b8 46 0f 00
	00		 mov	 r8d, 3910		; 00000f46H
  01496	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0149d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  014a4	e8 00 00 00 00	 call	 _PyParallel_Guard
  014a9	85 c0		 test	 eax, eax
  014ab	75 23		 jne	 SHORT $LN439@obj2ast_st
  014ad	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  014b2	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR _py_tmp$25072[rsp], rax
  014ba	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  014c3	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$25072[rsp]
  014cb	e8 00 00 00 00	 call	 _Py_DecRef
$LN439@obj2ast_st:
  014d0	33 c0		 xor	 eax, eax
  014d2	85 c0		 test	 eax, eax
  014d4	75 a5		 jne	 SHORT $LN442@obj2ast_st

; 3911 :         } else {

  014d6	eb 1d		 jmp	 SHORT $LN438@obj2ast_st
$LN450@obj2ast_st:

; 3912 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from ClassDef");

  014d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@JFNEHIJD@required?5field?5?$CCbody?$CC?5missing?5fr@
  014df	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  014e6	e8 00 00 00 00	 call	 PyErr_SetString

; 3913 :             return 1;

  014eb	b8 01 00 00 00	 mov	 eax, 1
  014f0	e9 99 46 00 00	 jmp	 $LN573@obj2ast_st
$LN438@obj2ast_st:

; 3914 :         }
; 3915 :         if (_PyObject_HasAttrId(obj, &PyId_decorator_list)) {

  014f5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_decorator_list
  014fa	8b c0		 mov	 eax, eax
  014fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01502	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0150b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0150f	48 8b d0	 mov	 rdx, rax
  01512	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0151a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0151f	85 c0		 test	 eax, eax
  01521	0f 84 f7 01 00
	00		 je	 $LN437@obj2ast_st

; 3916 :             int res;
; 3917 :             Py_ssize_t len;
; 3918 :             Py_ssize_t i;
; 3919 :             tmp = _PyObject_GetAttrId(obj, &PyId_decorator_list);

  01527	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_decorator_list
  0152c	8b c0		 mov	 eax, eax
  0152e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01534	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0153d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01541	48 8b d0	 mov	 rdx, rax
  01544	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0154c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01551	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3920 :             if (tmp == NULL) goto failed;

  01556	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0155c	75 05		 jne	 SHORT $LN436@obj2ast_st
  0155e	e9 0e 46 00 00	 jmp	 $failed$24787
$LN436@obj2ast_st:

; 3921 :             if (!PyList_Check(tmp)) {

  01563	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01568	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0156c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01572	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  01577	85 c0		 test	 eax, eax
  01579	75 25		 jne	 SHORT $LN435@obj2ast_st

; 3922 :                 PyErr_Format(PyExc_TypeError, "ClassDef field \"decorator_list\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0157b	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01580	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01584	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  01588	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@MFOMKLEB@ClassDef?5field?5?$CCdecorator_list?$CC?5@
  0158f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01596	e8 00 00 00 00	 call	 PyErr_Format

; 3923 :                 goto failed;

  0159b	e9 d1 45 00 00	 jmp	 $failed$24787
$LN435@obj2ast_st:

; 3924 :             }
; 3925 :             len = PyList_GET_SIZE(tmp);

  015a0	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  015a5	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  015a9	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR len$25080[rsp], rax

; 3926 :             decorator_list = asdl_seq_new(len, arena);

  015b1	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  015b9	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR len$25080[rsp]
  015c1	e8 00 00 00 00	 call	 asdl_seq_new
  015c6	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR decorator_list$24940[rsp], rax

; 3927 :             if (decorator_list == NULL) goto failed;

  015ce	48 83 bc 24 48
	01 00 00 00	 cmp	 QWORD PTR decorator_list$24940[rsp], 0
  015d7	75 05		 jne	 SHORT $LN434@obj2ast_st
  015d9	e9 93 45 00 00	 jmp	 $failed$24787
$LN434@obj2ast_st:

; 3928 :             for (i = 0; i < len; i++) {

  015de	48 c7 84 24 40
	02 00 00 00 00
	00 00		 mov	 QWORD PTR i$25081[rsp], 0
  015ea	eb 13		 jmp	 SHORT $LN433@obj2ast_st
$LN432@obj2ast_st:
  015ec	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR i$25081[rsp]
  015f4	48 ff c0	 inc	 rax
  015f7	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR i$25081[rsp], rax
$LN433@obj2ast_st:
  015ff	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR len$25080[rsp]
  01607	48 39 84 24 40
	02 00 00	 cmp	 QWORD PTR i$25081[rsp], rax
  0160f	0f 8d ac 00 00
	00		 jge	 $LN431@obj2ast_st

; 3929 :                 expr_ty value;
; 3930 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  01615	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0161a	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0161e	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  01626	48 8d 94 24 50
	02 00 00	 lea	 rdx, QWORD PTR value$25093[rsp]
  0162e	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR i$25081[rsp]
  01636	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0163a	e8 00 00 00 00	 call	 obj2ast_expr
  0163f	89 84 24 38 02
	00 00		 mov	 DWORD PTR res$25079[rsp], eax

; 3931 :                 if (res != 0) goto failed;

  01646	83 bc 24 38 02
	00 00 00	 cmp	 DWORD PTR res$25079[rsp], 0
  0164e	74 05		 je	 SHORT $LN430@obj2ast_st
  01650	e9 1c 45 00 00	 jmp	 $failed$24787
$LN430@obj2ast_st:

; 3932 :                 asdl_seq_SET(decorator_list, i, value);

  01655	8b 84 24 40 02
	00 00		 mov	 eax, DWORD PTR i$25081[rsp]
  0165c	89 84 24 58 02
	00 00		 mov	 DWORD PTR _asdl_i$25096[rsp], eax
  01663	48 83 bc 24 48
	01 00 00 00	 cmp	 QWORD PTR decorator_list$24940[rsp], 0
  0166c	74 15		 je	 SHORT $LN585@obj2ast_st
  0166e	48 63 84 24 58
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25096[rsp]
  01676	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR decorator_list$24940[rsp]
  0167e	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  01681	7c 1c		 jl	 SHORT $LN586@obj2ast_st
$LN585@obj2ast_st:
  01683	41 b8 5c 0f 00
	00		 mov	 r8d, 3932		; 00000f5cH
  01689	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  01690	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GK@LGJKDKMK@?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd@
  01697	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0169d	33 c0		 xor	 eax, eax
$LN586@obj2ast_st:
  0169f	48 63 84 24 58
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25096[rsp]
  016a7	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR decorator_list$24940[rsp]
  016af	48 8b 94 24 50
	02 00 00	 mov	 rdx, QWORD PTR value$25093[rsp]
  016b7	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 3933 :             }

  016bc	e9 2b ff ff ff	 jmp	 $LN432@obj2ast_st
$LN431@obj2ast_st:
$LN429@obj2ast_st:

; 3934 :             Py_CLEAR(tmp);

  016c1	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  016c7	74 4d		 je	 SHORT $LN426@obj2ast_st
  016c9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  016d1	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  016d6	41 b8 5e 0f 00
	00		 mov	 r8d, 3934		; 00000f5eH
  016dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  016e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  016ea	e8 00 00 00 00	 call	 _PyParallel_Guard
  016ef	85 c0		 test	 eax, eax
  016f1	75 23		 jne	 SHORT $LN426@obj2ast_st
  016f3	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  016f8	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR _py_tmp$25102[rsp], rax
  01700	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  01709	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$25102[rsp]
  01711	e8 00 00 00 00	 call	 _Py_DecRef
$LN426@obj2ast_st:
  01716	33 c0		 xor	 eax, eax
  01718	85 c0		 test	 eax, eax
  0171a	75 a5		 jne	 SHORT $LN429@obj2ast_st

; 3935 :         } else {

  0171c	eb 1d		 jmp	 SHORT $LN425@obj2ast_st
$LN437@obj2ast_st:

; 3936 :             PyErr_SetString(PyExc_TypeError, "required field \"decorator_list\" missing from ClassDef");

  0171e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@NOLEJLGL@required?5field?5?$CCdecorator_list?$CC?5@
  01725	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0172c	e8 00 00 00 00	 call	 PyErr_SetString

; 3937 :             return 1;

  01731	b8 01 00 00 00	 mov	 eax, 1
  01736	e9 53 44 00 00	 jmp	 $LN573@obj2ast_st
$LN425@obj2ast_st:

; 3938 :         }
; 3939 :         *out = ClassDef(name, bases, keywords, starargs, kwargs, body,
; 3940 :                         decorator_list, lineno, col_offset, arena);

  0173b	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  01743	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  01748	8b 44 24 60	 mov	 eax, DWORD PTR col_offset$[rsp]
  0174c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  01750	8b 44 24 50	 mov	 eax, DWORD PTR lineno$[rsp]
  01754	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  01758	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR decorator_list$24940[rsp]
  01760	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  01765	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR body$24939[rsp]
  0176d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  01772	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR kwargs$24938[rsp]
  0177a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0177f	4c 8b 8c 24 60
	01 00 00	 mov	 r9, QWORD PTR starargs$24937[rsp]
  01787	4c 8b 84 24 58
	01 00 00	 mov	 r8, QWORD PTR keywords$24936[rsp]
  0178f	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR bases$24935[rsp]
  01797	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR name$24934[rsp]
  0179f	e8 00 00 00 00	 call	 _Py_ClassDef
  017a4	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  017ac	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3941 :         if (*out == NULL) goto failed;

  017af	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  017b7	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  017bb	75 05		 jne	 SHORT $LN424@obj2ast_st
  017bd	e9 af 43 00 00	 jmp	 $failed$24787
$LN424@obj2ast_st:

; 3942 :         return 0;

  017c2	33 c0		 xor	 eax, eax
  017c4	e9 c5 43 00 00	 jmp	 $LN573@obj2ast_st
$LN501@obj2ast_st:

; 3943 :     }
; 3944 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Return_type);

  017c9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Return_type
  017d0	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  017d8	e8 00 00 00 00	 call	 PyObject_IsInstance
  017dd	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 3945 :     if (isinstance == -1) {

  017e1	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  017e6	75 0a		 jne	 SHORT $LN423@obj2ast_st

; 3946 :         return 1;

  017e8	b8 01 00 00 00	 mov	 eax, 1
  017ed	e9 9c 43 00 00	 jmp	 $LN573@obj2ast_st
$LN423@obj2ast_st:

; 3947 :     }
; 3948 :     if (isinstance) {

  017f2	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  017f7	0f 84 4a 01 00
	00		 je	 $LN422@obj2ast_st

; 3949 :         expr_ty value;
; 3950 : 
; 3951 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  017fd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  01802	8b c0		 mov	 eax, eax
  01804	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0180a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01813	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01817	48 8b d0	 mov	 rdx, rax
  0181a	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01822	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01827	85 c0		 test	 eax, eax
  01829	0f 84 c9 00 00
	00		 je	 $LN421@obj2ast_st

; 3952 :             int res;
; 3953 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  0182f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  01834	8b c0		 mov	 eax, eax
  01836	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0183c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01845	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01849	48 8b d0	 mov	 rdx, rax
  0184c	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01854	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01859	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3954 :             if (tmp == NULL) goto failed;

  0185e	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01864	75 05		 jne	 SHORT $LN420@obj2ast_st
  01866	e9 06 43 00 00	 jmp	 $failed$24787
$LN420@obj2ast_st:

; 3955 :             res = obj2ast_expr(tmp, &value, arena);

  0186b	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  01873	48 8d 94 24 68
	02 00 00	 lea	 rdx, QWORD PTR value$25113[rsp]
  0187b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  01880	e8 00 00 00 00	 call	 obj2ast_expr
  01885	89 84 24 70 02
	00 00		 mov	 DWORD PTR res$25115[rsp], eax

; 3956 :             if (res != 0) goto failed;

  0188c	83 bc 24 70 02
	00 00 00	 cmp	 DWORD PTR res$25115[rsp], 0
  01894	74 05		 je	 SHORT $LN419@obj2ast_st
  01896	e9 d6 42 00 00	 jmp	 $failed$24787
$LN419@obj2ast_st:
$LN418@obj2ast_st:

; 3957 :             Py_CLEAR(tmp);

  0189b	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  018a1	74 4d		 je	 SHORT $LN415@obj2ast_st
  018a3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  018ab	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  018b0	41 b8 75 0f 00
	00		 mov	 r8d, 3957		; 00000f75H
  018b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  018bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  018c4	e8 00 00 00 00	 call	 _PyParallel_Guard
  018c9	85 c0		 test	 eax, eax
  018cb	75 23		 jne	 SHORT $LN415@obj2ast_st
  018cd	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  018d2	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR _py_tmp$25123[rsp], rax
  018da	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  018e3	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$25123[rsp]
  018eb	e8 00 00 00 00	 call	 _Py_DecRef
$LN415@obj2ast_st:
  018f0	33 c0		 xor	 eax, eax
  018f2	85 c0		 test	 eax, eax
  018f4	75 a5		 jne	 SHORT $LN418@obj2ast_st

; 3958 :         } else {

  018f6	eb 0c		 jmp	 SHORT $LN414@obj2ast_st
$LN421@obj2ast_st:

; 3959 :             value = NULL;

  018f8	48 c7 84 24 68
	02 00 00 00 00
	00 00		 mov	 QWORD PTR value$25113[rsp], 0
$LN414@obj2ast_st:

; 3960 :         }
; 3961 :         *out = Return(value, lineno, col_offset, arena);

  01904	4c 8b 8c 24 f0
	07 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  0190c	44 8b 44 24 60	 mov	 r8d, DWORD PTR col_offset$[rsp]
  01911	8b 54 24 50	 mov	 edx, DWORD PTR lineno$[rsp]
  01915	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR value$25113[rsp]
  0191d	e8 00 00 00 00	 call	 _Py_Return
  01922	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  0192a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3962 :         if (*out == NULL) goto failed;

  0192d	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  01935	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01939	75 05		 jne	 SHORT $LN413@obj2ast_st
  0193b	e9 31 42 00 00	 jmp	 $failed$24787
$LN413@obj2ast_st:

; 3963 :         return 0;

  01940	33 c0		 xor	 eax, eax
  01942	e9 47 42 00 00	 jmp	 $LN573@obj2ast_st
$LN422@obj2ast_st:

; 3964 :     }
; 3965 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Delete_type);

  01947	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Delete_type
  0194e	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01956	e8 00 00 00 00	 call	 PyObject_IsInstance
  0195b	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 3966 :     if (isinstance == -1) {

  0195f	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  01964	75 0a		 jne	 SHORT $LN412@obj2ast_st

; 3967 :         return 1;

  01966	b8 01 00 00 00	 mov	 eax, 1
  0196b	e9 1e 42 00 00	 jmp	 $LN573@obj2ast_st
$LN412@obj2ast_st:

; 3968 :     }
; 3969 :     if (isinstance) {

  01970	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  01975	0f 84 89 02 00
	00		 je	 $LN411@obj2ast_st

; 3970 :         asdl_seq* targets;
; 3971 : 
; 3972 :         if (_PyObject_HasAttrId(obj, &PyId_targets)) {

  0197b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_targets
  01980	8b c0		 mov	 eax, eax
  01982	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01988	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01991	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01995	48 8b d0	 mov	 rdx, rax
  01998	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  019a0	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  019a5	85 c0		 test	 eax, eax
  019a7	0f 84 f7 01 00
	00		 je	 $LN410@obj2ast_st

; 3973 :             int res;
; 3974 :             Py_ssize_t len;
; 3975 :             Py_ssize_t i;
; 3976 :             tmp = _PyObject_GetAttrId(obj, &PyId_targets);

  019ad	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_targets
  019b2	8b c0		 mov	 eax, eax
  019b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  019ba	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  019c3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  019c7	48 8b d0	 mov	 rdx, rax
  019ca	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  019d2	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  019d7	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 3977 :             if (tmp == NULL) goto failed;

  019dc	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  019e2	75 05		 jne	 SHORT $LN409@obj2ast_st
  019e4	e9 88 41 00 00	 jmp	 $failed$24787
$LN409@obj2ast_st:

; 3978 :             if (!PyList_Check(tmp)) {

  019e9	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  019ee	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  019f2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  019f8	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  019fd	85 c0		 test	 eax, eax
  019ff	75 25		 jne	 SHORT $LN408@obj2ast_st

; 3979 :                 PyErr_Format(PyExc_TypeError, "Delete field \"targets\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01a01	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01a06	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01a0a	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  01a0e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@JEFKDOEM@Delete?5field?5?$CCtargets?$CC?5must?5be?5a@
  01a15	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01a1c	e8 00 00 00 00	 call	 PyErr_Format

; 3980 :                 goto failed;

  01a21	e9 4b 41 00 00	 jmp	 $failed$24787
$LN408@obj2ast_st:

; 3981 :             }
; 3982 :             len = PyList_GET_SIZE(tmp);

  01a26	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01a2b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  01a2f	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR len$25137[rsp], rax

; 3983 :             targets = asdl_seq_new(len, arena);

  01a37	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  01a3f	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR len$25137[rsp]
  01a47	e8 00 00 00 00	 call	 asdl_seq_new
  01a4c	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR targets$25134[rsp], rax

; 3984 :             if (targets == NULL) goto failed;

  01a54	48 83 bc 24 80
	02 00 00 00	 cmp	 QWORD PTR targets$25134[rsp], 0
  01a5d	75 05		 jne	 SHORT $LN407@obj2ast_st
  01a5f	e9 0d 41 00 00	 jmp	 $failed$24787
$LN407@obj2ast_st:

; 3985 :             for (i = 0; i < len; i++) {

  01a64	48 c7 84 24 90
	02 00 00 00 00
	00 00		 mov	 QWORD PTR i$25138[rsp], 0
  01a70	eb 13		 jmp	 SHORT $LN406@obj2ast_st
$LN405@obj2ast_st:
  01a72	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR i$25138[rsp]
  01a7a	48 ff c0	 inc	 rax
  01a7d	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR i$25138[rsp], rax
$LN406@obj2ast_st:
  01a85	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR len$25137[rsp]
  01a8d	48 39 84 24 90
	02 00 00	 cmp	 QWORD PTR i$25138[rsp], rax
  01a95	0f 8d ac 00 00
	00		 jge	 $LN404@obj2ast_st

; 3986 :                 expr_ty value;
; 3987 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  01a9b	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01aa0	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  01aa4	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  01aac	48 8d 94 24 a0
	02 00 00	 lea	 rdx, QWORD PTR value$25150[rsp]
  01ab4	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR i$25138[rsp]
  01abc	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  01ac0	e8 00 00 00 00	 call	 obj2ast_expr
  01ac5	89 84 24 88 02
	00 00		 mov	 DWORD PTR res$25136[rsp], eax

; 3988 :                 if (res != 0) goto failed;

  01acc	83 bc 24 88 02
	00 00 00	 cmp	 DWORD PTR res$25136[rsp], 0
  01ad4	74 05		 je	 SHORT $LN403@obj2ast_st
  01ad6	e9 96 40 00 00	 jmp	 $failed$24787
$LN403@obj2ast_st:

; 3989 :                 asdl_seq_SET(targets, i, value);

  01adb	8b 84 24 90 02
	00 00		 mov	 eax, DWORD PTR i$25138[rsp]
  01ae2	89 84 24 a8 02
	00 00		 mov	 DWORD PTR _asdl_i$25153[rsp], eax
  01ae9	48 83 bc 24 80
	02 00 00 00	 cmp	 QWORD PTR targets$25134[rsp], 0
  01af2	74 15		 je	 SHORT $LN587@obj2ast_st
  01af4	48 63 84 24 a8
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25153[rsp]
  01afc	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR targets$25134[rsp]
  01b04	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  01b07	7c 1c		 jl	 SHORT $LN588@obj2ast_st
$LN587@obj2ast_st:
  01b09	41 b8 95 0f 00
	00		 mov	 r8d, 3989		; 00000f95H
  01b0f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  01b16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@KJNHGEBL@?$AA?$CI?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AAs?$AA?$CJ@
  01b1d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01b23	33 c0		 xor	 eax, eax
$LN588@obj2ast_st:
  01b25	48 63 84 24 a8
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25153[rsp]
  01b2d	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR targets$25134[rsp]
  01b35	48 8b 94 24 a0
	02 00 00	 mov	 rdx, QWORD PTR value$25150[rsp]
  01b3d	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 3990 :             }

  01b42	e9 2b ff ff ff	 jmp	 $LN405@obj2ast_st
$LN404@obj2ast_st:
$LN402@obj2ast_st:

; 3991 :             Py_CLEAR(tmp);

  01b47	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01b4d	74 4d		 je	 SHORT $LN399@obj2ast_st
  01b4f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01b57	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  01b5c	41 b8 97 0f 00
	00		 mov	 r8d, 3991		; 00000f97H
  01b62	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01b69	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01b70	e8 00 00 00 00	 call	 _PyParallel_Guard
  01b75	85 c0		 test	 eax, eax
  01b77	75 23		 jne	 SHORT $LN399@obj2ast_st
  01b79	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01b7e	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR _py_tmp$25160[rsp], rax
  01b86	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  01b8f	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$25160[rsp]
  01b97	e8 00 00 00 00	 call	 _Py_DecRef
$LN399@obj2ast_st:
  01b9c	33 c0		 xor	 eax, eax
  01b9e	85 c0		 test	 eax, eax
  01ba0	75 a5		 jne	 SHORT $LN402@obj2ast_st

; 3992 :         } else {

  01ba2	eb 1d		 jmp	 SHORT $LN398@obj2ast_st
$LN410@obj2ast_st:

; 3993 :             PyErr_SetString(PyExc_TypeError, "required field \"targets\" missing from Delete");

  01ba4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@MPLCKCGN@required?5field?5?$CCtargets?$CC?5missing@
  01bab	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01bb2	e8 00 00 00 00	 call	 PyErr_SetString

; 3994 :             return 1;

  01bb7	b8 01 00 00 00	 mov	 eax, 1
  01bbc	e9 cd 3f 00 00	 jmp	 $LN573@obj2ast_st
$LN398@obj2ast_st:

; 3995 :         }
; 3996 :         *out = Delete(targets, lineno, col_offset, arena);

  01bc1	4c 8b 8c 24 f0
	07 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  01bc9	44 8b 44 24 60	 mov	 r8d, DWORD PTR col_offset$[rsp]
  01bce	8b 54 24 50	 mov	 edx, DWORD PTR lineno$[rsp]
  01bd2	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR targets$25134[rsp]
  01bda	e8 00 00 00 00	 call	 _Py_Delete
  01bdf	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  01be7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3997 :         if (*out == NULL) goto failed;

  01bea	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  01bf2	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01bf6	75 05		 jne	 SHORT $LN397@obj2ast_st
  01bf8	e9 74 3f 00 00	 jmp	 $failed$24787
$LN397@obj2ast_st:

; 3998 :         return 0;

  01bfd	33 c0		 xor	 eax, eax
  01bff	e9 8a 3f 00 00	 jmp	 $LN573@obj2ast_st
$LN411@obj2ast_st:

; 3999 :     }
; 4000 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Assign_type);

  01c04	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Assign_type
  01c0b	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01c13	e8 00 00 00 00	 call	 PyObject_IsInstance
  01c18	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4001 :     if (isinstance == -1) {

  01c1c	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  01c21	75 0a		 jne	 SHORT $LN396@obj2ast_st

; 4002 :         return 1;

  01c23	b8 01 00 00 00	 mov	 eax, 1
  01c28	e9 61 3f 00 00	 jmp	 $LN573@obj2ast_st
$LN396@obj2ast_st:

; 4003 :     }
; 4004 :     if (isinstance) {

  01c2d	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  01c32	0f 84 af 03 00
	00		 je	 $LN395@obj2ast_st

; 4005 :         asdl_seq* targets;
; 4006 :         expr_ty value;
; 4007 : 
; 4008 :         if (_PyObject_HasAttrId(obj, &PyId_targets)) {

  01c38	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_targets
  01c3d	8b c0		 mov	 eax, eax
  01c3f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01c45	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01c4e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01c52	48 8b d0	 mov	 rdx, rax
  01c55	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01c5d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01c62	85 c0		 test	 eax, eax
  01c64	0f 84 f7 01 00
	00		 je	 $LN394@obj2ast_st

; 4009 :             int res;
; 4010 :             Py_ssize_t len;
; 4011 :             Py_ssize_t i;
; 4012 :             tmp = _PyObject_GetAttrId(obj, &PyId_targets);

  01c6a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_targets
  01c6f	8b c0		 mov	 eax, eax
  01c71	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01c77	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01c80	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01c84	48 8b d0	 mov	 rdx, rax
  01c87	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01c8f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01c94	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4013 :             if (tmp == NULL) goto failed;

  01c99	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01c9f	75 05		 jne	 SHORT $LN393@obj2ast_st
  01ca1	e9 cb 3e 00 00	 jmp	 $failed$24787
$LN393@obj2ast_st:

; 4014 :             if (!PyList_Check(tmp)) {

  01ca6	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01cab	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01caf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01cb5	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  01cba	85 c0		 test	 eax, eax
  01cbc	75 25		 jne	 SHORT $LN392@obj2ast_st

; 4015 :                 PyErr_Format(PyExc_TypeError, "Assign field \"targets\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01cbe	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01cc3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01cc7	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  01ccb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@CHFJFKNC@Assign?5field?5?$CCtargets?$CC?5must?5be?5a@
  01cd2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01cd9	e8 00 00 00 00	 call	 PyErr_Format

; 4016 :                 goto failed;

  01cde	e9 8e 3e 00 00	 jmp	 $failed$24787
$LN392@obj2ast_st:

; 4017 :             }
; 4018 :             len = PyList_GET_SIZE(tmp);

  01ce3	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01ce8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  01cec	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR len$25175[rsp], rax

; 4019 :             targets = asdl_seq_new(len, arena);

  01cf4	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  01cfc	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR len$25175[rsp]
  01d04	e8 00 00 00 00	 call	 asdl_seq_new
  01d09	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR targets$25171[rsp], rax

; 4020 :             if (targets == NULL) goto failed;

  01d11	48 83 bc 24 c0
	02 00 00 00	 cmp	 QWORD PTR targets$25171[rsp], 0
  01d1a	75 05		 jne	 SHORT $LN391@obj2ast_st
  01d1c	e9 50 3e 00 00	 jmp	 $failed$24787
$LN391@obj2ast_st:

; 4021 :             for (i = 0; i < len; i++) {

  01d21	48 c7 84 24 d0
	02 00 00 00 00
	00 00		 mov	 QWORD PTR i$25176[rsp], 0
  01d2d	eb 13		 jmp	 SHORT $LN390@obj2ast_st
$LN389@obj2ast_st:
  01d2f	48 8b 84 24 d0
	02 00 00	 mov	 rax, QWORD PTR i$25176[rsp]
  01d37	48 ff c0	 inc	 rax
  01d3a	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR i$25176[rsp], rax
$LN390@obj2ast_st:
  01d42	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR len$25175[rsp]
  01d4a	48 39 84 24 d0
	02 00 00	 cmp	 QWORD PTR i$25176[rsp], rax
  01d52	0f 8d ac 00 00
	00		 jge	 $LN388@obj2ast_st

; 4022 :                 expr_ty value;
; 4023 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  01d58	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01d5d	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  01d61	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  01d69	48 8d 94 24 e0
	02 00 00	 lea	 rdx, QWORD PTR value$25188[rsp]
  01d71	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR i$25176[rsp]
  01d79	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  01d7d	e8 00 00 00 00	 call	 obj2ast_expr
  01d82	89 84 24 c8 02
	00 00		 mov	 DWORD PTR res$25174[rsp], eax

; 4024 :                 if (res != 0) goto failed;

  01d89	83 bc 24 c8 02
	00 00 00	 cmp	 DWORD PTR res$25174[rsp], 0
  01d91	74 05		 je	 SHORT $LN387@obj2ast_st
  01d93	e9 d9 3d 00 00	 jmp	 $failed$24787
$LN387@obj2ast_st:

; 4025 :                 asdl_seq_SET(targets, i, value);

  01d98	8b 84 24 d0 02
	00 00		 mov	 eax, DWORD PTR i$25176[rsp]
  01d9f	89 84 24 e8 02
	00 00		 mov	 DWORD PTR _asdl_i$25191[rsp], eax
  01da6	48 83 bc 24 c0
	02 00 00 00	 cmp	 QWORD PTR targets$25171[rsp], 0
  01daf	74 15		 je	 SHORT $LN589@obj2ast_st
  01db1	48 63 84 24 e8
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25191[rsp]
  01db9	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR targets$25171[rsp]
  01dc1	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  01dc4	7c 1c		 jl	 SHORT $LN590@obj2ast_st
$LN589@obj2ast_st:
  01dc6	41 b8 b9 0f 00
	00		 mov	 r8d, 4025		; 00000fb9H
  01dcc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  01dd3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@KJNHGEBL@?$AA?$CI?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AAs?$AA?$CJ@
  01dda	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01de0	33 c0		 xor	 eax, eax
$LN590@obj2ast_st:
  01de2	48 63 84 24 e8
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25191[rsp]
  01dea	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR targets$25171[rsp]
  01df2	48 8b 94 24 e0
	02 00 00	 mov	 rdx, QWORD PTR value$25188[rsp]
  01dfa	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4026 :             }

  01dff	e9 2b ff ff ff	 jmp	 $LN389@obj2ast_st
$LN388@obj2ast_st:
$LN386@obj2ast_st:

; 4027 :             Py_CLEAR(tmp);

  01e04	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01e0a	74 4d		 je	 SHORT $LN383@obj2ast_st
  01e0c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01e14	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  01e19	41 b8 bb 0f 00
	00		 mov	 r8d, 4027		; 00000fbbH
  01e1f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01e26	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01e2d	e8 00 00 00 00	 call	 _PyParallel_Guard
  01e32	85 c0		 test	 eax, eax
  01e34	75 23		 jne	 SHORT $LN383@obj2ast_st
  01e36	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01e3b	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR _py_tmp$25197[rsp], rax
  01e43	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  01e4c	48 8b 8c 24 f0
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$25197[rsp]
  01e54	e8 00 00 00 00	 call	 _Py_DecRef
$LN383@obj2ast_st:
  01e59	33 c0		 xor	 eax, eax
  01e5b	85 c0		 test	 eax, eax
  01e5d	75 a5		 jne	 SHORT $LN386@obj2ast_st

; 4028 :         } else {

  01e5f	eb 1d		 jmp	 SHORT $LN382@obj2ast_st
$LN394@obj2ast_st:

; 4029 :             PyErr_SetString(PyExc_TypeError, "required field \"targets\" missing from Assign");

  01e61	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@BNPHBHEF@required?5field?5?$CCtargets?$CC?5missing@
  01e68	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01e6f	e8 00 00 00 00	 call	 PyErr_SetString

; 4030 :             return 1;

  01e74	b8 01 00 00 00	 mov	 eax, 1
  01e79	e9 10 3d 00 00	 jmp	 $LN573@obj2ast_st
$LN382@obj2ast_st:

; 4031 :         }
; 4032 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  01e7e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  01e83	8b c0		 mov	 eax, eax
  01e85	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01e8b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01e94	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01e98	48 8b d0	 mov	 rdx, rax
  01e9b	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01ea3	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01ea8	85 c0		 test	 eax, eax
  01eaa	0f 84 c9 00 00
	00		 je	 $LN381@obj2ast_st

; 4033 :             int res;
; 4034 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  01eb0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  01eb5	8b c0		 mov	 eax, eax
  01eb7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01ebd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01ec6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01eca	48 8b d0	 mov	 rdx, rax
  01ecd	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01ed5	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01eda	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4035 :             if (tmp == NULL) goto failed;

  01edf	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01ee5	75 05		 jne	 SHORT $LN380@obj2ast_st
  01ee7	e9 85 3c 00 00	 jmp	 $failed$24787
$LN380@obj2ast_st:

; 4036 :             res = obj2ast_expr(tmp, &value, arena);

  01eec	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  01ef4	48 8d 94 24 b8
	02 00 00	 lea	 rdx, QWORD PTR value$25172[rsp]
  01efc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  01f01	e8 00 00 00 00	 call	 obj2ast_expr
  01f06	89 84 24 f8 02
	00 00		 mov	 DWORD PTR res$25204[rsp], eax

; 4037 :             if (res != 0) goto failed;

  01f0d	83 bc 24 f8 02
	00 00 00	 cmp	 DWORD PTR res$25204[rsp], 0
  01f15	74 05		 je	 SHORT $LN379@obj2ast_st
  01f17	e9 55 3c 00 00	 jmp	 $failed$24787
$LN379@obj2ast_st:
$LN378@obj2ast_st:

; 4038 :             Py_CLEAR(tmp);

  01f1c	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01f22	74 4d		 je	 SHORT $LN375@obj2ast_st
  01f24	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01f2c	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  01f31	41 b8 c6 0f 00
	00		 mov	 r8d, 4038		; 00000fc6H
  01f37	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01f3e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  01f45	e8 00 00 00 00	 call	 _PyParallel_Guard
  01f4a	85 c0		 test	 eax, eax
  01f4c	75 23		 jne	 SHORT $LN375@obj2ast_st
  01f4e	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  01f53	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR _py_tmp$25212[rsp], rax
  01f5b	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  01f64	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$25212[rsp]
  01f6c	e8 00 00 00 00	 call	 _Py_DecRef
$LN375@obj2ast_st:
  01f71	33 c0		 xor	 eax, eax
  01f73	85 c0		 test	 eax, eax
  01f75	75 a5		 jne	 SHORT $LN378@obj2ast_st

; 4039 :         } else {

  01f77	eb 1d		 jmp	 SHORT $LN374@obj2ast_st
$LN381@obj2ast_st:

; 4040 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Assign");

  01f79	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@KCHNIPDD@required?5field?5?$CCvalue?$CC?5missing?5f@
  01f80	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01f87	e8 00 00 00 00	 call	 PyErr_SetString

; 4041 :             return 1;

  01f8c	b8 01 00 00 00	 mov	 eax, 1
  01f91	e9 f8 3b 00 00	 jmp	 $LN573@obj2ast_st
$LN374@obj2ast_st:

; 4042 :         }
; 4043 :         *out = Assign(targets, value, lineno, col_offset, arena);

  01f96	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  01f9e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01fa3	44 8b 4c 24 60	 mov	 r9d, DWORD PTR col_offset$[rsp]
  01fa8	44 8b 44 24 50	 mov	 r8d, DWORD PTR lineno$[rsp]
  01fad	48 8b 94 24 b8
	02 00 00	 mov	 rdx, QWORD PTR value$25172[rsp]
  01fb5	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR targets$25171[rsp]
  01fbd	e8 00 00 00 00	 call	 _Py_Assign
  01fc2	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  01fca	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4044 :         if (*out == NULL) goto failed;

  01fcd	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  01fd5	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01fd9	75 05		 jne	 SHORT $LN373@obj2ast_st
  01fdb	e9 91 3b 00 00	 jmp	 $failed$24787
$LN373@obj2ast_st:

; 4045 :         return 0;

  01fe0	33 c0		 xor	 eax, eax
  01fe2	e9 a7 3b 00 00	 jmp	 $LN573@obj2ast_st
$LN395@obj2ast_st:

; 4046 :     }
; 4047 :     isinstance = PyObject_IsInstance(obj, (PyObject*)AugAssign_type);

  01fe7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR AugAssign_type
  01fee	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01ff6	e8 00 00 00 00	 call	 PyObject_IsInstance
  01ffb	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4048 :     if (isinstance == -1) {

  01fff	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  02004	75 0a		 jne	 SHORT $LN372@obj2ast_st

; 4049 :         return 1;

  02006	b8 01 00 00 00	 mov	 eax, 1
  0200b	e9 7e 3b 00 00	 jmp	 $LN573@obj2ast_st
$LN372@obj2ast_st:

; 4050 :     }
; 4051 :     if (isinstance) {

  02010	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  02015	0f 84 a3 03 00
	00		 je	 $LN371@obj2ast_st

; 4052 :         expr_ty target;
; 4053 :         operator_ty op;
; 4054 :         expr_ty value;
; 4055 : 
; 4056 :         if (_PyObject_HasAttrId(obj, &PyId_target)) {

  0201b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_target
  02020	8b c0		 mov	 eax, eax
  02022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02028	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02031	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02035	48 8b d0	 mov	 rdx, rax
  02038	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02040	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02045	85 c0		 test	 eax, eax
  02047	0f 84 c9 00 00
	00		 je	 $LN370@obj2ast_st

; 4057 :             int res;
; 4058 :             tmp = _PyObject_GetAttrId(obj, &PyId_target);

  0204d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_target
  02052	8b c0		 mov	 eax, eax
  02054	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0205a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02063	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02067	48 8b d0	 mov	 rdx, rax
  0206a	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02072	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02077	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4059 :             if (tmp == NULL) goto failed;

  0207c	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02082	75 05		 jne	 SHORT $LN369@obj2ast_st
  02084	e9 e8 3a 00 00	 jmp	 $failed$24787
$LN369@obj2ast_st:

; 4060 :             res = obj2ast_expr(tmp, &target, arena);

  02089	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02091	48 8d 94 24 10
	03 00 00	 lea	 rdx, QWORD PTR target$25223[rsp]
  02099	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  0209e	e8 00 00 00 00	 call	 obj2ast_expr
  020a3	89 84 24 1c 03
	00 00		 mov	 DWORD PTR res$25227[rsp], eax

; 4061 :             if (res != 0) goto failed;

  020aa	83 bc 24 1c 03
	00 00 00	 cmp	 DWORD PTR res$25227[rsp], 0
  020b2	74 05		 je	 SHORT $LN368@obj2ast_st
  020b4	e9 b8 3a 00 00	 jmp	 $failed$24787
$LN368@obj2ast_st:
$LN367@obj2ast_st:

; 4062 :             Py_CLEAR(tmp);

  020b9	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  020bf	74 4d		 je	 SHORT $LN364@obj2ast_st
  020c1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  020c9	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  020ce	41 b8 de 0f 00
	00		 mov	 r8d, 4062		; 00000fdeH
  020d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  020db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  020e2	e8 00 00 00 00	 call	 _PyParallel_Guard
  020e7	85 c0		 test	 eax, eax
  020e9	75 23		 jne	 SHORT $LN364@obj2ast_st
  020eb	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  020f0	48 89 84 24 20
	03 00 00	 mov	 QWORD PTR _py_tmp$25235[rsp], rax
  020f8	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02101	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$25235[rsp]
  02109	e8 00 00 00 00	 call	 _Py_DecRef
$LN364@obj2ast_st:
  0210e	33 c0		 xor	 eax, eax
  02110	85 c0		 test	 eax, eax
  02112	75 a5		 jne	 SHORT $LN367@obj2ast_st

; 4063 :         } else {

  02114	eb 1d		 jmp	 SHORT $LN363@obj2ast_st
$LN370@obj2ast_st:

; 4064 :             PyErr_SetString(PyExc_TypeError, "required field \"target\" missing from AugAssign");

  02116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@OHAKCNID@required?5field?5?$CCtarget?$CC?5missing?5@
  0211d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02124	e8 00 00 00 00	 call	 PyErr_SetString

; 4065 :             return 1;

  02129	b8 01 00 00 00	 mov	 eax, 1
  0212e	e9 5b 3a 00 00	 jmp	 $LN573@obj2ast_st
$LN363@obj2ast_st:

; 4066 :         }
; 4067 :         if (_PyObject_HasAttrId(obj, &PyId_op)) {

  02133	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  02138	8b c0		 mov	 eax, eax
  0213a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02140	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02149	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0214d	48 8b d0	 mov	 rdx, rax
  02150	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02158	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0215d	85 c0		 test	 eax, eax
  0215f	0f 84 c9 00 00
	00		 je	 $LN362@obj2ast_st

; 4068 :             int res;
; 4069 :             tmp = _PyObject_GetAttrId(obj, &PyId_op);

  02165	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  0216a	8b c0		 mov	 eax, eax
  0216c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02172	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0217b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0217f	48 8b d0	 mov	 rdx, rax
  02182	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0218a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0218f	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4070 :             if (tmp == NULL) goto failed;

  02194	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0219a	75 05		 jne	 SHORT $LN361@obj2ast_st
  0219c	e9 d0 39 00 00	 jmp	 $failed$24787
$LN361@obj2ast_st:

; 4071 :             res = obj2ast_operator(tmp, &op, arena);

  021a1	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  021a9	48 8d 94 24 18
	03 00 00	 lea	 rdx, QWORD PTR op$25224[rsp]
  021b1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  021b6	e8 00 00 00 00	 call	 obj2ast_operator
  021bb	89 84 24 28 03
	00 00		 mov	 DWORD PTR res$25242[rsp], eax

; 4072 :             if (res != 0) goto failed;

  021c2	83 bc 24 28 03
	00 00 00	 cmp	 DWORD PTR res$25242[rsp], 0
  021ca	74 05		 je	 SHORT $LN360@obj2ast_st
  021cc	e9 a0 39 00 00	 jmp	 $failed$24787
$LN360@obj2ast_st:
$LN359@obj2ast_st:

; 4073 :             Py_CLEAR(tmp);

  021d1	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  021d7	74 4d		 je	 SHORT $LN356@obj2ast_st
  021d9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  021e1	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  021e6	41 b8 e9 0f 00
	00		 mov	 r8d, 4073		; 00000fe9H
  021ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  021f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  021fa	e8 00 00 00 00	 call	 _PyParallel_Guard
  021ff	85 c0		 test	 eax, eax
  02201	75 23		 jne	 SHORT $LN356@obj2ast_st
  02203	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02208	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR _py_tmp$25250[rsp], rax
  02210	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02219	48 8b 8c 24 30
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$25250[rsp]
  02221	e8 00 00 00 00	 call	 _Py_DecRef
$LN356@obj2ast_st:
  02226	33 c0		 xor	 eax, eax
  02228	85 c0		 test	 eax, eax
  0222a	75 a5		 jne	 SHORT $LN359@obj2ast_st

; 4074 :         } else {

  0222c	eb 1d		 jmp	 SHORT $LN355@obj2ast_st
$LN362@obj2ast_st:

; 4075 :             PyErr_SetString(PyExc_TypeError, "required field \"op\" missing from AugAssign");

  0222e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@OOGNAPCP@required?5field?5?$CCop?$CC?5missing?5from@
  02235	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0223c	e8 00 00 00 00	 call	 PyErr_SetString

; 4076 :             return 1;

  02241	b8 01 00 00 00	 mov	 eax, 1
  02246	e9 43 39 00 00	 jmp	 $LN573@obj2ast_st
$LN355@obj2ast_st:

; 4077 :         }
; 4078 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  0224b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  02250	8b c0		 mov	 eax, eax
  02252	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02258	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02261	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02265	48 8b d0	 mov	 rdx, rax
  02268	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02270	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02275	85 c0		 test	 eax, eax
  02277	0f 84 c9 00 00
	00		 je	 $LN354@obj2ast_st

; 4079 :             int res;
; 4080 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  0227d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  02282	8b c0		 mov	 eax, eax
  02284	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0228a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02293	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02297	48 8b d0	 mov	 rdx, rax
  0229a	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  022a2	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  022a7	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4081 :             if (tmp == NULL) goto failed;

  022ac	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  022b2	75 05		 jne	 SHORT $LN353@obj2ast_st
  022b4	e9 b8 38 00 00	 jmp	 $failed$24787
$LN353@obj2ast_st:

; 4082 :             res = obj2ast_expr(tmp, &value, arena);

  022b9	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  022c1	48 8d 94 24 08
	03 00 00	 lea	 rdx, QWORD PTR value$25225[rsp]
  022c9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  022ce	e8 00 00 00 00	 call	 obj2ast_expr
  022d3	89 84 24 38 03
	00 00		 mov	 DWORD PTR res$25257[rsp], eax

; 4083 :             if (res != 0) goto failed;

  022da	83 bc 24 38 03
	00 00 00	 cmp	 DWORD PTR res$25257[rsp], 0
  022e2	74 05		 je	 SHORT $LN352@obj2ast_st
  022e4	e9 88 38 00 00	 jmp	 $failed$24787
$LN352@obj2ast_st:
$LN351@obj2ast_st:

; 4084 :             Py_CLEAR(tmp);

  022e9	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  022ef	74 4d		 je	 SHORT $LN348@obj2ast_st
  022f1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  022f9	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  022fe	41 b8 f4 0f 00
	00		 mov	 r8d, 4084		; 00000ff4H
  02304	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0230b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  02312	e8 00 00 00 00	 call	 _PyParallel_Guard
  02317	85 c0		 test	 eax, eax
  02319	75 23		 jne	 SHORT $LN348@obj2ast_st
  0231b	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02320	48 89 84 24 40
	03 00 00	 mov	 QWORD PTR _py_tmp$25265[rsp], rax
  02328	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02331	48 8b 8c 24 40
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$25265[rsp]
  02339	e8 00 00 00 00	 call	 _Py_DecRef
$LN348@obj2ast_st:
  0233e	33 c0		 xor	 eax, eax
  02340	85 c0		 test	 eax, eax
  02342	75 a5		 jne	 SHORT $LN351@obj2ast_st

; 4085 :         } else {

  02344	eb 1d		 jmp	 SHORT $LN347@obj2ast_st
$LN354@obj2ast_st:

; 4086 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from AugAssign");

  02346	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@DDMENDHF@required?5field?5?$CCvalue?$CC?5missing?5f@
  0234d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02354	e8 00 00 00 00	 call	 PyErr_SetString

; 4087 :             return 1;

  02359	b8 01 00 00 00	 mov	 eax, 1
  0235e	e9 2b 38 00 00	 jmp	 $LN573@obj2ast_st
$LN347@obj2ast_st:

; 4088 :         }
; 4089 :         *out = AugAssign(target, op, value, lineno, col_offset, arena);

  02363	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  0236b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  02370	8b 44 24 60	 mov	 eax, DWORD PTR col_offset$[rsp]
  02374	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  02378	44 8b 4c 24 50	 mov	 r9d, DWORD PTR lineno$[rsp]
  0237d	4c 8b 84 24 08
	03 00 00	 mov	 r8, QWORD PTR value$25225[rsp]
  02385	8b 94 24 18 03
	00 00		 mov	 edx, DWORD PTR op$25224[rsp]
  0238c	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR target$25223[rsp]
  02394	e8 00 00 00 00	 call	 _Py_AugAssign
  02399	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  023a1	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4090 :         if (*out == NULL) goto failed;

  023a4	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  023ac	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  023b0	75 05		 jne	 SHORT $LN346@obj2ast_st
  023b2	e9 ba 37 00 00	 jmp	 $failed$24787
$LN346@obj2ast_st:

; 4091 :         return 0;

  023b7	33 c0		 xor	 eax, eax
  023b9	e9 d0 37 00 00	 jmp	 $LN573@obj2ast_st
$LN371@obj2ast_st:

; 4092 :     }
; 4093 :     isinstance = PyObject_IsInstance(obj, (PyObject*)For_type);

  023be	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR For_type
  023c5	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  023cd	e8 00 00 00 00	 call	 PyObject_IsInstance
  023d2	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4094 :     if (isinstance == -1) {

  023d6	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  023db	75 0a		 jne	 SHORT $LN345@obj2ast_st

; 4095 :         return 1;

  023dd	b8 01 00 00 00	 mov	 eax, 1
  023e2	e9 a7 37 00 00	 jmp	 $LN573@obj2ast_st
$LN345@obj2ast_st:

; 4096 :     }
; 4097 :     if (isinstance) {

  023e7	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  023ec	0f 84 23 07 00
	00		 je	 $LN344@obj2ast_st

; 4098 :         expr_ty target;
; 4099 :         expr_ty iter;
; 4100 :         asdl_seq* body;
; 4101 :         asdl_seq* orelse;
; 4102 : 
; 4103 :         if (_PyObject_HasAttrId(obj, &PyId_target)) {

  023f2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_target
  023f7	8b c0		 mov	 eax, eax
  023f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  023ff	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02408	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0240c	48 8b d0	 mov	 rdx, rax
  0240f	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02417	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0241c	85 c0		 test	 eax, eax
  0241e	0f 84 c9 00 00
	00		 je	 $LN343@obj2ast_st

; 4104 :             int res;
; 4105 :             tmp = _PyObject_GetAttrId(obj, &PyId_target);

  02424	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_target
  02429	8b c0		 mov	 eax, eax
  0242b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02431	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0243a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0243e	48 8b d0	 mov	 rdx, rax
  02441	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02449	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0244e	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4106 :             if (tmp == NULL) goto failed;

  02453	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02459	75 05		 jne	 SHORT $LN342@obj2ast_st
  0245b	e9 11 37 00 00	 jmp	 $failed$24787
$LN342@obj2ast_st:

; 4107 :             res = obj2ast_expr(tmp, &target, arena);

  02460	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02468	48 8d 94 24 58
	03 00 00	 lea	 rdx, QWORD PTR target$25276[rsp]
  02470	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  02475	e8 00 00 00 00	 call	 obj2ast_expr
  0247a	89 84 24 68 03
	00 00		 mov	 DWORD PTR res$25281[rsp], eax

; 4108 :             if (res != 0) goto failed;

  02481	83 bc 24 68 03
	00 00 00	 cmp	 DWORD PTR res$25281[rsp], 0
  02489	74 05		 je	 SHORT $LN341@obj2ast_st
  0248b	e9 e1 36 00 00	 jmp	 $failed$24787
$LN341@obj2ast_st:
$LN340@obj2ast_st:

; 4109 :             Py_CLEAR(tmp);

  02490	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02496	74 4d		 je	 SHORT $LN337@obj2ast_st
  02498	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  024a0	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  024a5	41 b8 0d 10 00
	00		 mov	 r8d, 4109		; 0000100dH
  024ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  024b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  024b9	e8 00 00 00 00	 call	 _PyParallel_Guard
  024be	85 c0		 test	 eax, eax
  024c0	75 23		 jne	 SHORT $LN337@obj2ast_st
  024c2	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  024c7	48 89 84 24 70
	03 00 00	 mov	 QWORD PTR _py_tmp$25289[rsp], rax
  024cf	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  024d8	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$25289[rsp]
  024e0	e8 00 00 00 00	 call	 _Py_DecRef
$LN337@obj2ast_st:
  024e5	33 c0		 xor	 eax, eax
  024e7	85 c0		 test	 eax, eax
  024e9	75 a5		 jne	 SHORT $LN340@obj2ast_st

; 4110 :         } else {

  024eb	eb 1d		 jmp	 SHORT $LN336@obj2ast_st
$LN343@obj2ast_st:

; 4111 :             PyErr_SetString(PyExc_TypeError, "required field \"target\" missing from For");

  024ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@NEHOGNKF@required?5field?5?$CCtarget?$CC?5missing?5@
  024f4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  024fb	e8 00 00 00 00	 call	 PyErr_SetString

; 4112 :             return 1;

  02500	b8 01 00 00 00	 mov	 eax, 1
  02505	e9 84 36 00 00	 jmp	 $LN573@obj2ast_st
$LN336@obj2ast_st:

; 4113 :         }
; 4114 :         if (_PyObject_HasAttrId(obj, &PyId_iter)) {

  0250a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_iter
  0250f	8b c0		 mov	 eax, eax
  02511	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02517	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02520	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02524	48 8b d0	 mov	 rdx, rax
  02527	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0252f	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02534	85 c0		 test	 eax, eax
  02536	0f 84 c9 00 00
	00		 je	 $LN335@obj2ast_st

; 4115 :             int res;
; 4116 :             tmp = _PyObject_GetAttrId(obj, &PyId_iter);

  0253c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_iter
  02541	8b c0		 mov	 eax, eax
  02543	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02549	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02552	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02556	48 8b d0	 mov	 rdx, rax
  02559	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02561	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02566	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4117 :             if (tmp == NULL) goto failed;

  0256b	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02571	75 05		 jne	 SHORT $LN334@obj2ast_st
  02573	e9 f9 35 00 00	 jmp	 $failed$24787
$LN334@obj2ast_st:

; 4118 :             res = obj2ast_expr(tmp, &iter, arena);

  02578	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02580	48 8d 94 24 48
	03 00 00	 lea	 rdx, QWORD PTR iter$25277[rsp]
  02588	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  0258d	e8 00 00 00 00	 call	 obj2ast_expr
  02592	89 84 24 78 03
	00 00		 mov	 DWORD PTR res$25296[rsp], eax

; 4119 :             if (res != 0) goto failed;

  02599	83 bc 24 78 03
	00 00 00	 cmp	 DWORD PTR res$25296[rsp], 0
  025a1	74 05		 je	 SHORT $LN333@obj2ast_st
  025a3	e9 c9 35 00 00	 jmp	 $failed$24787
$LN333@obj2ast_st:
$LN332@obj2ast_st:

; 4120 :             Py_CLEAR(tmp);

  025a8	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  025ae	74 4d		 je	 SHORT $LN329@obj2ast_st
  025b0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  025b8	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  025bd	41 b8 18 10 00
	00		 mov	 r8d, 4120		; 00001018H
  025c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  025ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  025d1	e8 00 00 00 00	 call	 _PyParallel_Guard
  025d6	85 c0		 test	 eax, eax
  025d8	75 23		 jne	 SHORT $LN329@obj2ast_st
  025da	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  025df	48 89 84 24 80
	03 00 00	 mov	 QWORD PTR _py_tmp$25304[rsp], rax
  025e7	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  025f0	48 8b 8c 24 80
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$25304[rsp]
  025f8	e8 00 00 00 00	 call	 _Py_DecRef
$LN329@obj2ast_st:
  025fd	33 c0		 xor	 eax, eax
  025ff	85 c0		 test	 eax, eax
  02601	75 a5		 jne	 SHORT $LN332@obj2ast_st

; 4121 :         } else {

  02603	eb 1d		 jmp	 SHORT $LN328@obj2ast_st
$LN335@obj2ast_st:

; 4122 :             PyErr_SetString(PyExc_TypeError, "required field \"iter\" missing from For");

  02605	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@ICLHNFMH@required?5field?5?$CCiter?$CC?5missing?5fr@
  0260c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02613	e8 00 00 00 00	 call	 PyErr_SetString

; 4123 :             return 1;

  02618	b8 01 00 00 00	 mov	 eax, 1
  0261d	e9 6c 35 00 00	 jmp	 $LN573@obj2ast_st
$LN328@obj2ast_st:

; 4124 :         }
; 4125 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  02622	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  02627	8b c0		 mov	 eax, eax
  02629	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0262f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02638	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0263c	48 8b d0	 mov	 rdx, rax
  0263f	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02647	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0264c	85 c0		 test	 eax, eax
  0264e	0f 84 f7 01 00
	00		 je	 $LN327@obj2ast_st

; 4126 :             int res;
; 4127 :             Py_ssize_t len;
; 4128 :             Py_ssize_t i;
; 4129 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  02654	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  02659	8b c0		 mov	 eax, eax
  0265b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02661	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0266a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0266e	48 8b d0	 mov	 rdx, rax
  02671	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02679	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0267e	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4130 :             if (tmp == NULL) goto failed;

  02683	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02689	75 05		 jne	 SHORT $LN326@obj2ast_st
  0268b	e9 e1 34 00 00	 jmp	 $failed$24787
$LN326@obj2ast_st:

; 4131 :             if (!PyList_Check(tmp)) {

  02690	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02695	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02699	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0269f	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  026a4	85 c0		 test	 eax, eax
  026a6	75 25		 jne	 SHORT $LN325@obj2ast_st

; 4132 :                 PyErr_Format(PyExc_TypeError, "For field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  026a8	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  026ad	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  026b1	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  026b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@HMKAJOFO@For?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@
  026bc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  026c3	e8 00 00 00 00	 call	 PyErr_Format

; 4133 :                 goto failed;

  026c8	e9 a4 34 00 00	 jmp	 $failed$24787
$LN325@obj2ast_st:

; 4134 :             }
; 4135 :             len = PyList_GET_SIZE(tmp);

  026cd	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  026d2	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  026d6	48 89 84 24 98
	03 00 00	 mov	 QWORD PTR len$25312[rsp], rax

; 4136 :             body = asdl_seq_new(len, arena);

  026de	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  026e6	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR len$25312[rsp]
  026ee	e8 00 00 00 00	 call	 asdl_seq_new
  026f3	48 89 84 24 50
	03 00 00	 mov	 QWORD PTR body$25278[rsp], rax

; 4137 :             if (body == NULL) goto failed;

  026fb	48 83 bc 24 50
	03 00 00 00	 cmp	 QWORD PTR body$25278[rsp], 0
  02704	75 05		 jne	 SHORT $LN324@obj2ast_st
  02706	e9 66 34 00 00	 jmp	 $failed$24787
$LN324@obj2ast_st:

; 4138 :             for (i = 0; i < len; i++) {

  0270b	48 c7 84 24 90
	03 00 00 00 00
	00 00		 mov	 QWORD PTR i$25313[rsp], 0
  02717	eb 13		 jmp	 SHORT $LN323@obj2ast_st
$LN322@obj2ast_st:
  02719	48 8b 84 24 90
	03 00 00	 mov	 rax, QWORD PTR i$25313[rsp]
  02721	48 ff c0	 inc	 rax
  02724	48 89 84 24 90
	03 00 00	 mov	 QWORD PTR i$25313[rsp], rax
$LN323@obj2ast_st:
  0272c	48 8b 84 24 98
	03 00 00	 mov	 rax, QWORD PTR len$25312[rsp]
  02734	48 39 84 24 90
	03 00 00	 cmp	 QWORD PTR i$25313[rsp], rax
  0273c	0f 8d ac 00 00
	00		 jge	 $LN321@obj2ast_st

; 4139 :                 stmt_ty value;
; 4140 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  02742	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02747	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0274b	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02753	48 8d 94 24 a0
	03 00 00	 lea	 rdx, QWORD PTR value$25325[rsp]
  0275b	48 8b 8c 24 90
	03 00 00	 mov	 rcx, QWORD PTR i$25313[rsp]
  02763	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  02767	e8 00 00 00 00	 call	 obj2ast_stmt
  0276c	89 84 24 88 03
	00 00		 mov	 DWORD PTR res$25311[rsp], eax

; 4141 :                 if (res != 0) goto failed;

  02773	83 bc 24 88 03
	00 00 00	 cmp	 DWORD PTR res$25311[rsp], 0
  0277b	74 05		 je	 SHORT $LN320@obj2ast_st
  0277d	e9 ef 33 00 00	 jmp	 $failed$24787
$LN320@obj2ast_st:

; 4142 :                 asdl_seq_SET(body, i, value);

  02782	8b 84 24 90 03
	00 00		 mov	 eax, DWORD PTR i$25313[rsp]
  02789	89 84 24 a8 03
	00 00		 mov	 DWORD PTR _asdl_i$25328[rsp], eax
  02790	48 83 bc 24 50
	03 00 00 00	 cmp	 QWORD PTR body$25278[rsp], 0
  02799	74 15		 je	 SHORT $LN591@obj2ast_st
  0279b	48 63 84 24 a8
	03 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25328[rsp]
  027a3	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR body$25278[rsp]
  027ab	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  027ae	7c 1c		 jl	 SHORT $LN592@obj2ast_st
$LN591@obj2ast_st:
  027b0	41 b8 2e 10 00
	00		 mov	 r8d, 4142		; 0000102eH
  027b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  027bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  027c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  027ca	33 c0		 xor	 eax, eax
$LN592@obj2ast_st:
  027cc	48 63 84 24 a8
	03 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25328[rsp]
  027d4	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR body$25278[rsp]
  027dc	48 8b 94 24 a0
	03 00 00	 mov	 rdx, QWORD PTR value$25325[rsp]
  027e4	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4143 :             }

  027e9	e9 2b ff ff ff	 jmp	 $LN322@obj2ast_st
$LN321@obj2ast_st:
$LN319@obj2ast_st:

; 4144 :             Py_CLEAR(tmp);

  027ee	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  027f4	74 4d		 je	 SHORT $LN316@obj2ast_st
  027f6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  027fe	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  02803	41 b8 30 10 00
	00		 mov	 r8d, 4144		; 00001030H
  02809	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02810	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  02817	e8 00 00 00 00	 call	 _PyParallel_Guard
  0281c	85 c0		 test	 eax, eax
  0281e	75 23		 jne	 SHORT $LN316@obj2ast_st
  02820	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02825	48 89 84 24 b0
	03 00 00	 mov	 QWORD PTR _py_tmp$25334[rsp], rax
  0282d	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02836	48 8b 8c 24 b0
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$25334[rsp]
  0283e	e8 00 00 00 00	 call	 _Py_DecRef
$LN316@obj2ast_st:
  02843	33 c0		 xor	 eax, eax
  02845	85 c0		 test	 eax, eax
  02847	75 a5		 jne	 SHORT $LN319@obj2ast_st

; 4145 :         } else {

  02849	eb 1d		 jmp	 SHORT $LN315@obj2ast_st
$LN327@obj2ast_st:

; 4146 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from For");

  0284b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@HAIPHGDL@required?5field?5?$CCbody?$CC?5missing?5fr@
  02852	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02859	e8 00 00 00 00	 call	 PyErr_SetString

; 4147 :             return 1;

  0285e	b8 01 00 00 00	 mov	 eax, 1
  02863	e9 26 33 00 00	 jmp	 $LN573@obj2ast_st
$LN315@obj2ast_st:

; 4148 :         }
; 4149 :         if (_PyObject_HasAttrId(obj, &PyId_orelse)) {

  02868	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  0286d	8b c0		 mov	 eax, eax
  0286f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02875	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0287e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02882	48 8b d0	 mov	 rdx, rax
  02885	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0288d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02892	85 c0		 test	 eax, eax
  02894	0f 84 f7 01 00
	00		 je	 $LN314@obj2ast_st

; 4150 :             int res;
; 4151 :             Py_ssize_t len;
; 4152 :             Py_ssize_t i;
; 4153 :             tmp = _PyObject_GetAttrId(obj, &PyId_orelse);

  0289a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  0289f	8b c0		 mov	 eax, eax
  028a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  028a7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  028b0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  028b4	48 8b d0	 mov	 rdx, rax
  028b7	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  028bf	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  028c4	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4154 :             if (tmp == NULL) goto failed;

  028c9	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  028cf	75 05		 jne	 SHORT $LN313@obj2ast_st
  028d1	e9 9b 32 00 00	 jmp	 $failed$24787
$LN313@obj2ast_st:

; 4155 :             if (!PyList_Check(tmp)) {

  028d6	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  028db	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  028df	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  028e5	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  028ea	85 c0		 test	 eax, eax
  028ec	75 25		 jne	 SHORT $LN312@obj2ast_st

; 4156 :                 PyErr_Format(PyExc_TypeError, "For field \"orelse\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  028ee	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  028f3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  028f7	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  028fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@OHHBCDMN@For?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@
  02902	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02909	e8 00 00 00 00	 call	 PyErr_Format

; 4157 :                 goto failed;

  0290e	e9 5e 32 00 00	 jmp	 $failed$24787
$LN312@obj2ast_st:

; 4158 :             }
; 4159 :             len = PyList_GET_SIZE(tmp);

  02913	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02918	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0291c	48 89 84 24 c8
	03 00 00	 mov	 QWORD PTR len$25342[rsp], rax

; 4160 :             orelse = asdl_seq_new(len, arena);

  02924	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  0292c	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR len$25342[rsp]
  02934	e8 00 00 00 00	 call	 asdl_seq_new
  02939	48 89 84 24 60
	03 00 00	 mov	 QWORD PTR orelse$25279[rsp], rax

; 4161 :             if (orelse == NULL) goto failed;

  02941	48 83 bc 24 60
	03 00 00 00	 cmp	 QWORD PTR orelse$25279[rsp], 0
  0294a	75 05		 jne	 SHORT $LN311@obj2ast_st
  0294c	e9 20 32 00 00	 jmp	 $failed$24787
$LN311@obj2ast_st:

; 4162 :             for (i = 0; i < len; i++) {

  02951	48 c7 84 24 c0
	03 00 00 00 00
	00 00		 mov	 QWORD PTR i$25343[rsp], 0
  0295d	eb 13		 jmp	 SHORT $LN310@obj2ast_st
$LN309@obj2ast_st:
  0295f	48 8b 84 24 c0
	03 00 00	 mov	 rax, QWORD PTR i$25343[rsp]
  02967	48 ff c0	 inc	 rax
  0296a	48 89 84 24 c0
	03 00 00	 mov	 QWORD PTR i$25343[rsp], rax
$LN310@obj2ast_st:
  02972	48 8b 84 24 c8
	03 00 00	 mov	 rax, QWORD PTR len$25342[rsp]
  0297a	48 39 84 24 c0
	03 00 00	 cmp	 QWORD PTR i$25343[rsp], rax
  02982	0f 8d ac 00 00
	00		 jge	 $LN308@obj2ast_st

; 4163 :                 stmt_ty value;
; 4164 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  02988	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0298d	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  02991	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02999	48 8d 94 24 d0
	03 00 00	 lea	 rdx, QWORD PTR value$25355[rsp]
  029a1	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR i$25343[rsp]
  029a9	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  029ad	e8 00 00 00 00	 call	 obj2ast_stmt
  029b2	89 84 24 b8 03
	00 00		 mov	 DWORD PTR res$25341[rsp], eax

; 4165 :                 if (res != 0) goto failed;

  029b9	83 bc 24 b8 03
	00 00 00	 cmp	 DWORD PTR res$25341[rsp], 0
  029c1	74 05		 je	 SHORT $LN307@obj2ast_st
  029c3	e9 a9 31 00 00	 jmp	 $failed$24787
$LN307@obj2ast_st:

; 4166 :                 asdl_seq_SET(orelse, i, value);

  029c8	8b 84 24 c0 03
	00 00		 mov	 eax, DWORD PTR i$25343[rsp]
  029cf	89 84 24 d8 03
	00 00		 mov	 DWORD PTR _asdl_i$25358[rsp], eax
  029d6	48 83 bc 24 60
	03 00 00 00	 cmp	 QWORD PTR orelse$25279[rsp], 0
  029df	74 15		 je	 SHORT $LN593@obj2ast_st
  029e1	48 63 84 24 d8
	03 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25358[rsp]
  029e9	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR orelse$25279[rsp]
  029f1	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  029f4	7c 1c		 jl	 SHORT $LN594@obj2ast_st
$LN593@obj2ast_st:
  029f6	41 b8 46 10 00
	00		 mov	 r8d, 4166		; 00001046H
  029fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  02a03	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@PNODFBDF@?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?9?$AA?$DO@
  02a0a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02a10	33 c0		 xor	 eax, eax
$LN594@obj2ast_st:
  02a12	48 63 84 24 d8
	03 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25358[rsp]
  02a1a	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR orelse$25279[rsp]
  02a22	48 8b 94 24 d0
	03 00 00	 mov	 rdx, QWORD PTR value$25355[rsp]
  02a2a	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4167 :             }

  02a2f	e9 2b ff ff ff	 jmp	 $LN309@obj2ast_st
$LN308@obj2ast_st:
$LN306@obj2ast_st:

; 4168 :             Py_CLEAR(tmp);

  02a34	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02a3a	74 4d		 je	 SHORT $LN303@obj2ast_st
  02a3c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02a44	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  02a49	41 b8 48 10 00
	00		 mov	 r8d, 4168		; 00001048H
  02a4f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02a56	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  02a5d	e8 00 00 00 00	 call	 _PyParallel_Guard
  02a62	85 c0		 test	 eax, eax
  02a64	75 23		 jne	 SHORT $LN303@obj2ast_st
  02a66	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02a6b	48 89 84 24 e0
	03 00 00	 mov	 QWORD PTR _py_tmp$25365[rsp], rax
  02a73	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02a7c	48 8b 8c 24 e0
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$25365[rsp]
  02a84	e8 00 00 00 00	 call	 _Py_DecRef
$LN303@obj2ast_st:
  02a89	33 c0		 xor	 eax, eax
  02a8b	85 c0		 test	 eax, eax
  02a8d	75 a5		 jne	 SHORT $LN306@obj2ast_st

; 4169 :         } else {

  02a8f	eb 1d		 jmp	 SHORT $LN302@obj2ast_st
$LN314@obj2ast_st:

; 4170 :             PyErr_SetString(PyExc_TypeError, "required field \"orelse\" missing from For");

  02a91	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HNHCKLNB@required?5field?5?$CCorelse?$CC?5missing?5@
  02a98	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02a9f	e8 00 00 00 00	 call	 PyErr_SetString

; 4171 :             return 1;

  02aa4	b8 01 00 00 00	 mov	 eax, 1
  02aa9	e9 e0 30 00 00	 jmp	 $LN573@obj2ast_st
$LN302@obj2ast_st:

; 4172 :         }
; 4173 :         *out = For(target, iter, body, orelse, lineno, col_offset, arena);

  02aae	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  02ab6	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  02abb	8b 44 24 60	 mov	 eax, DWORD PTR col_offset$[rsp]
  02abf	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  02ac3	8b 44 24 50	 mov	 eax, DWORD PTR lineno$[rsp]
  02ac7	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  02acb	4c 8b 8c 24 60
	03 00 00	 mov	 r9, QWORD PTR orelse$25279[rsp]
  02ad3	4c 8b 84 24 50
	03 00 00	 mov	 r8, QWORD PTR body$25278[rsp]
  02adb	48 8b 94 24 48
	03 00 00	 mov	 rdx, QWORD PTR iter$25277[rsp]
  02ae3	48 8b 8c 24 58
	03 00 00	 mov	 rcx, QWORD PTR target$25276[rsp]
  02aeb	e8 00 00 00 00	 call	 _Py_For
  02af0	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  02af8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4174 :         if (*out == NULL) goto failed;

  02afb	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  02b03	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  02b07	75 05		 jne	 SHORT $LN301@obj2ast_st
  02b09	e9 63 30 00 00	 jmp	 $failed$24787
$LN301@obj2ast_st:

; 4175 :         return 0;

  02b0e	33 c0		 xor	 eax, eax
  02b10	e9 79 30 00 00	 jmp	 $LN573@obj2ast_st
$LN344@obj2ast_st:

; 4176 :     }
; 4177 :     isinstance = PyObject_IsInstance(obj, (PyObject*)While_type);

  02b15	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR While_type
  02b1c	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02b24	e8 00 00 00 00	 call	 PyObject_IsInstance
  02b29	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4178 :     if (isinstance == -1) {

  02b2d	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  02b32	75 0a		 jne	 SHORT $LN300@obj2ast_st

; 4179 :         return 1;

  02b34	b8 01 00 00 00	 mov	 eax, 1
  02b39	e9 50 30 00 00	 jmp	 $LN573@obj2ast_st
$LN300@obj2ast_st:

; 4180 :     }
; 4181 :     if (isinstance) {

  02b3e	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  02b43	0f 84 00 06 00
	00		 je	 $LN299@obj2ast_st

; 4182 :         expr_ty test;
; 4183 :         asdl_seq* body;
; 4184 :         asdl_seq* orelse;
; 4185 : 
; 4186 :         if (_PyObject_HasAttrId(obj, &PyId_test)) {

  02b49	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  02b4e	8b c0		 mov	 eax, eax
  02b50	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02b56	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02b5f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02b63	48 8b d0	 mov	 rdx, rax
  02b66	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02b6e	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02b73	85 c0		 test	 eax, eax
  02b75	0f 84 c9 00 00
	00		 je	 $LN298@obj2ast_st

; 4187 :             int res;
; 4188 :             tmp = _PyObject_GetAttrId(obj, &PyId_test);

  02b7b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  02b80	8b c0		 mov	 eax, eax
  02b82	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02b88	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02b91	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02b95	48 8b d0	 mov	 rdx, rax
  02b98	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02ba0	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02ba5	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4189 :             if (tmp == NULL) goto failed;

  02baa	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02bb0	75 05		 jne	 SHORT $LN297@obj2ast_st
  02bb2	e9 ba 2f 00 00	 jmp	 $failed$24787
$LN297@obj2ast_st:

; 4190 :             res = obj2ast_expr(tmp, &test, arena);

  02bb7	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02bbf	48 8d 94 24 f0
	03 00 00	 lea	 rdx, QWORD PTR test$25376[rsp]
  02bc7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  02bcc	e8 00 00 00 00	 call	 obj2ast_expr
  02bd1	89 84 24 00 04
	00 00		 mov	 DWORD PTR res$25380[rsp], eax

; 4191 :             if (res != 0) goto failed;

  02bd8	83 bc 24 00 04
	00 00 00	 cmp	 DWORD PTR res$25380[rsp], 0
  02be0	74 05		 je	 SHORT $LN296@obj2ast_st
  02be2	e9 8a 2f 00 00	 jmp	 $failed$24787
$LN296@obj2ast_st:
$LN295@obj2ast_st:

; 4192 :             Py_CLEAR(tmp);

  02be7	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02bed	74 4d		 je	 SHORT $LN292@obj2ast_st
  02bef	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02bf7	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  02bfc	41 b8 60 10 00
	00		 mov	 r8d, 4192		; 00001060H
  02c02	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02c09	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  02c10	e8 00 00 00 00	 call	 _PyParallel_Guard
  02c15	85 c0		 test	 eax, eax
  02c17	75 23		 jne	 SHORT $LN292@obj2ast_st
  02c19	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02c1e	48 89 84 24 08
	04 00 00	 mov	 QWORD PTR _py_tmp$25388[rsp], rax
  02c26	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02c2f	48 8b 8c 24 08
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$25388[rsp]
  02c37	e8 00 00 00 00	 call	 _Py_DecRef
$LN292@obj2ast_st:
  02c3c	33 c0		 xor	 eax, eax
  02c3e	85 c0		 test	 eax, eax
  02c40	75 a5		 jne	 SHORT $LN295@obj2ast_st

; 4193 :         } else {

  02c42	eb 1d		 jmp	 SHORT $LN291@obj2ast_st
$LN298@obj2ast_st:

; 4194 :             PyErr_SetString(PyExc_TypeError, "required field \"test\" missing from While");

  02c44	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@JMNKEPPD@required?5field?5?$CCtest?$CC?5missing?5fr@
  02c4b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02c52	e8 00 00 00 00	 call	 PyErr_SetString

; 4195 :             return 1;

  02c57	b8 01 00 00 00	 mov	 eax, 1
  02c5c	e9 2d 2f 00 00	 jmp	 $LN573@obj2ast_st
$LN291@obj2ast_st:

; 4196 :         }
; 4197 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  02c61	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  02c66	8b c0		 mov	 eax, eax
  02c68	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02c6e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02c77	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02c7b	48 8b d0	 mov	 rdx, rax
  02c7e	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02c86	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02c8b	85 c0		 test	 eax, eax
  02c8d	0f 84 f7 01 00
	00		 je	 $LN290@obj2ast_st

; 4198 :             int res;
; 4199 :             Py_ssize_t len;
; 4200 :             Py_ssize_t i;
; 4201 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  02c93	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  02c98	8b c0		 mov	 eax, eax
  02c9a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02ca0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02ca9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02cad	48 8b d0	 mov	 rdx, rax
  02cb0	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02cb8	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02cbd	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4202 :             if (tmp == NULL) goto failed;

  02cc2	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02cc8	75 05		 jne	 SHORT $LN289@obj2ast_st
  02cca	e9 a2 2e 00 00	 jmp	 $failed$24787
$LN289@obj2ast_st:

; 4203 :             if (!PyList_Check(tmp)) {

  02ccf	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02cd4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02cd8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02cde	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  02ce3	85 c0		 test	 eax, eax
  02ce5	75 25		 jne	 SHORT $LN288@obj2ast_st

; 4204 :                 PyErr_Format(PyExc_TypeError, "While field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  02ce7	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02cec	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02cf0	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  02cf4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@DEKBMJDI@While?5field?5?$CCbody?$CC?5must?5be?5a?5lis@
  02cfb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02d02	e8 00 00 00 00	 call	 PyErr_Format

; 4205 :                 goto failed;

  02d07	e9 65 2e 00 00	 jmp	 $failed$24787
$LN288@obj2ast_st:

; 4206 :             }
; 4207 :             len = PyList_GET_SIZE(tmp);

  02d0c	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02d11	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  02d15	48 89 84 24 20
	04 00 00	 mov	 QWORD PTR len$25396[rsp], rax

; 4208 :             body = asdl_seq_new(len, arena);

  02d1d	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  02d25	48 8b 8c 24 20
	04 00 00	 mov	 rcx, QWORD PTR len$25396[rsp]
  02d2d	e8 00 00 00 00	 call	 asdl_seq_new
  02d32	48 89 84 24 e8
	03 00 00	 mov	 QWORD PTR body$25377[rsp], rax

; 4209 :             if (body == NULL) goto failed;

  02d3a	48 83 bc 24 e8
	03 00 00 00	 cmp	 QWORD PTR body$25377[rsp], 0
  02d43	75 05		 jne	 SHORT $LN287@obj2ast_st
  02d45	e9 27 2e 00 00	 jmp	 $failed$24787
$LN287@obj2ast_st:

; 4210 :             for (i = 0; i < len; i++) {

  02d4a	48 c7 84 24 18
	04 00 00 00 00
	00 00		 mov	 QWORD PTR i$25397[rsp], 0
  02d56	eb 13		 jmp	 SHORT $LN286@obj2ast_st
$LN285@obj2ast_st:
  02d58	48 8b 84 24 18
	04 00 00	 mov	 rax, QWORD PTR i$25397[rsp]
  02d60	48 ff c0	 inc	 rax
  02d63	48 89 84 24 18
	04 00 00	 mov	 QWORD PTR i$25397[rsp], rax
$LN286@obj2ast_st:
  02d6b	48 8b 84 24 20
	04 00 00	 mov	 rax, QWORD PTR len$25396[rsp]
  02d73	48 39 84 24 18
	04 00 00	 cmp	 QWORD PTR i$25397[rsp], rax
  02d7b	0f 8d ac 00 00
	00		 jge	 $LN284@obj2ast_st

; 4211 :                 stmt_ty value;
; 4212 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  02d81	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02d86	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  02d8a	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02d92	48 8d 94 24 28
	04 00 00	 lea	 rdx, QWORD PTR value$25409[rsp]
  02d9a	48 8b 8c 24 18
	04 00 00	 mov	 rcx, QWORD PTR i$25397[rsp]
  02da2	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  02da6	e8 00 00 00 00	 call	 obj2ast_stmt
  02dab	89 84 24 10 04
	00 00		 mov	 DWORD PTR res$25395[rsp], eax

; 4213 :                 if (res != 0) goto failed;

  02db2	83 bc 24 10 04
	00 00 00	 cmp	 DWORD PTR res$25395[rsp], 0
  02dba	74 05		 je	 SHORT $LN283@obj2ast_st
  02dbc	e9 b0 2d 00 00	 jmp	 $failed$24787
$LN283@obj2ast_st:

; 4214 :                 asdl_seq_SET(body, i, value);

  02dc1	8b 84 24 18 04
	00 00		 mov	 eax, DWORD PTR i$25397[rsp]
  02dc8	89 84 24 30 04
	00 00		 mov	 DWORD PTR _asdl_i$25412[rsp], eax
  02dcf	48 83 bc 24 e8
	03 00 00 00	 cmp	 QWORD PTR body$25377[rsp], 0
  02dd8	74 15		 je	 SHORT $LN595@obj2ast_st
  02dda	48 63 84 24 30
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25412[rsp]
  02de2	48 8b 8c 24 e8
	03 00 00	 mov	 rcx, QWORD PTR body$25377[rsp]
  02dea	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  02ded	7c 1c		 jl	 SHORT $LN596@obj2ast_st
$LN595@obj2ast_st:
  02def	41 b8 76 10 00
	00		 mov	 r8d, 4214		; 00001076H
  02df5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  02dfc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  02e03	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02e09	33 c0		 xor	 eax, eax
$LN596@obj2ast_st:
  02e0b	48 63 84 24 30
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25412[rsp]
  02e13	48 8b 8c 24 e8
	03 00 00	 mov	 rcx, QWORD PTR body$25377[rsp]
  02e1b	48 8b 94 24 28
	04 00 00	 mov	 rdx, QWORD PTR value$25409[rsp]
  02e23	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4215 :             }

  02e28	e9 2b ff ff ff	 jmp	 $LN285@obj2ast_st
$LN284@obj2ast_st:
$LN282@obj2ast_st:

; 4216 :             Py_CLEAR(tmp);

  02e2d	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02e33	74 4d		 je	 SHORT $LN279@obj2ast_st
  02e35	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02e3d	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  02e42	41 b8 78 10 00
	00		 mov	 r8d, 4216		; 00001078H
  02e48	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02e4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  02e56	e8 00 00 00 00	 call	 _PyParallel_Guard
  02e5b	85 c0		 test	 eax, eax
  02e5d	75 23		 jne	 SHORT $LN279@obj2ast_st
  02e5f	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02e64	48 89 84 24 38
	04 00 00	 mov	 QWORD PTR _py_tmp$25418[rsp], rax
  02e6c	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02e75	48 8b 8c 24 38
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$25418[rsp]
  02e7d	e8 00 00 00 00	 call	 _Py_DecRef
$LN279@obj2ast_st:
  02e82	33 c0		 xor	 eax, eax
  02e84	85 c0		 test	 eax, eax
  02e86	75 a5		 jne	 SHORT $LN282@obj2ast_st

; 4217 :         } else {

  02e88	eb 1d		 jmp	 SHORT $LN278@obj2ast_st
$LN290@obj2ast_st:

; 4218 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from While");

  02e8a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@CBCBDLKI@required?5field?5?$CCbody?$CC?5missing?5fr@
  02e91	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02e98	e8 00 00 00 00	 call	 PyErr_SetString

; 4219 :             return 1;

  02e9d	b8 01 00 00 00	 mov	 eax, 1
  02ea2	e9 e7 2c 00 00	 jmp	 $LN573@obj2ast_st
$LN278@obj2ast_st:

; 4220 :         }
; 4221 :         if (_PyObject_HasAttrId(obj, &PyId_orelse)) {

  02ea7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  02eac	8b c0		 mov	 eax, eax
  02eae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02eb4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02ebd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02ec1	48 8b d0	 mov	 rdx, rax
  02ec4	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02ecc	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02ed1	85 c0		 test	 eax, eax
  02ed3	0f 84 f7 01 00
	00		 je	 $LN277@obj2ast_st

; 4222 :             int res;
; 4223 :             Py_ssize_t len;
; 4224 :             Py_ssize_t i;
; 4225 :             tmp = _PyObject_GetAttrId(obj, &PyId_orelse);

  02ed9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  02ede	8b c0		 mov	 eax, eax
  02ee0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02ee6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02eef	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02ef3	48 8b d0	 mov	 rdx, rax
  02ef6	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02efe	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02f03	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4226 :             if (tmp == NULL) goto failed;

  02f08	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02f0e	75 05		 jne	 SHORT $LN276@obj2ast_st
  02f10	e9 5c 2c 00 00	 jmp	 $failed$24787
$LN276@obj2ast_st:

; 4227 :             if (!PyList_Check(tmp)) {

  02f15	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02f1a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02f1e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02f24	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  02f29	85 c0		 test	 eax, eax
  02f2b	75 25		 jne	 SHORT $LN275@obj2ast_st

; 4228 :                 PyErr_Format(PyExc_TypeError, "While field \"orelse\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  02f2d	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02f32	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02f36	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  02f3a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@CBNJGDLK@While?5field?5?$CCorelse?$CC?5must?5be?5a?5l@
  02f41	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02f48	e8 00 00 00 00	 call	 PyErr_Format

; 4229 :                 goto failed;

  02f4d	e9 1f 2c 00 00	 jmp	 $failed$24787
$LN275@obj2ast_st:

; 4230 :             }
; 4231 :             len = PyList_GET_SIZE(tmp);

  02f52	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02f57	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  02f5b	48 89 84 24 50
	04 00 00	 mov	 QWORD PTR len$25426[rsp], rax

; 4232 :             orelse = asdl_seq_new(len, arena);

  02f63	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  02f6b	48 8b 8c 24 50
	04 00 00	 mov	 rcx, QWORD PTR len$25426[rsp]
  02f73	e8 00 00 00 00	 call	 asdl_seq_new
  02f78	48 89 84 24 f8
	03 00 00	 mov	 QWORD PTR orelse$25378[rsp], rax

; 4233 :             if (orelse == NULL) goto failed;

  02f80	48 83 bc 24 f8
	03 00 00 00	 cmp	 QWORD PTR orelse$25378[rsp], 0
  02f89	75 05		 jne	 SHORT $LN274@obj2ast_st
  02f8b	e9 e1 2b 00 00	 jmp	 $failed$24787
$LN274@obj2ast_st:

; 4234 :             for (i = 0; i < len; i++) {

  02f90	48 c7 84 24 48
	04 00 00 00 00
	00 00		 mov	 QWORD PTR i$25427[rsp], 0
  02f9c	eb 13		 jmp	 SHORT $LN273@obj2ast_st
$LN272@obj2ast_st:
  02f9e	48 8b 84 24 48
	04 00 00	 mov	 rax, QWORD PTR i$25427[rsp]
  02fa6	48 ff c0	 inc	 rax
  02fa9	48 89 84 24 48
	04 00 00	 mov	 QWORD PTR i$25427[rsp], rax
$LN273@obj2ast_st:
  02fb1	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR len$25426[rsp]
  02fb9	48 39 84 24 48
	04 00 00	 cmp	 QWORD PTR i$25427[rsp], rax
  02fc1	0f 8d ac 00 00
	00		 jge	 $LN271@obj2ast_st

; 4235 :                 stmt_ty value;
; 4236 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  02fc7	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  02fcc	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  02fd0	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02fd8	48 8d 94 24 58
	04 00 00	 lea	 rdx, QWORD PTR value$25439[rsp]
  02fe0	48 8b 8c 24 48
	04 00 00	 mov	 rcx, QWORD PTR i$25427[rsp]
  02fe8	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  02fec	e8 00 00 00 00	 call	 obj2ast_stmt
  02ff1	89 84 24 40 04
	00 00		 mov	 DWORD PTR res$25425[rsp], eax

; 4237 :                 if (res != 0) goto failed;

  02ff8	83 bc 24 40 04
	00 00 00	 cmp	 DWORD PTR res$25425[rsp], 0
  03000	74 05		 je	 SHORT $LN270@obj2ast_st
  03002	e9 6a 2b 00 00	 jmp	 $failed$24787
$LN270@obj2ast_st:

; 4238 :                 asdl_seq_SET(orelse, i, value);

  03007	8b 84 24 48 04
	00 00		 mov	 eax, DWORD PTR i$25427[rsp]
  0300e	89 84 24 60 04
	00 00		 mov	 DWORD PTR _asdl_i$25442[rsp], eax
  03015	48 83 bc 24 f8
	03 00 00 00	 cmp	 QWORD PTR orelse$25378[rsp], 0
  0301e	74 15		 je	 SHORT $LN597@obj2ast_st
  03020	48 63 84 24 60
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25442[rsp]
  03028	48 8b 8c 24 f8
	03 00 00	 mov	 rcx, QWORD PTR orelse$25378[rsp]
  03030	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  03033	7c 1c		 jl	 SHORT $LN598@obj2ast_st
$LN597@obj2ast_st:
  03035	41 b8 8e 10 00
	00		 mov	 r8d, 4238		; 0000108eH
  0303b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  03042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@PNODFBDF@?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?9?$AA?$DO@
  03049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0304f	33 c0		 xor	 eax, eax
$LN598@obj2ast_st:
  03051	48 63 84 24 60
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25442[rsp]
  03059	48 8b 8c 24 f8
	03 00 00	 mov	 rcx, QWORD PTR orelse$25378[rsp]
  03061	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR value$25439[rsp]
  03069	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4239 :             }

  0306e	e9 2b ff ff ff	 jmp	 $LN272@obj2ast_st
$LN271@obj2ast_st:
$LN269@obj2ast_st:

; 4240 :             Py_CLEAR(tmp);

  03073	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03079	74 4d		 je	 SHORT $LN266@obj2ast_st
  0307b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03083	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  03088	41 b8 90 10 00
	00		 mov	 r8d, 4240		; 00001090H
  0308e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0309c	e8 00 00 00 00	 call	 _PyParallel_Guard
  030a1	85 c0		 test	 eax, eax
  030a3	75 23		 jne	 SHORT $LN266@obj2ast_st
  030a5	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  030aa	48 89 84 24 68
	04 00 00	 mov	 QWORD PTR _py_tmp$25448[rsp], rax
  030b2	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  030bb	48 8b 8c 24 68
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$25448[rsp]
  030c3	e8 00 00 00 00	 call	 _Py_DecRef
$LN266@obj2ast_st:
  030c8	33 c0		 xor	 eax, eax
  030ca	85 c0		 test	 eax, eax
  030cc	75 a5		 jne	 SHORT $LN269@obj2ast_st

; 4241 :         } else {

  030ce	eb 1d		 jmp	 SHORT $LN265@obj2ast_st
$LN277@obj2ast_st:

; 4242 :             PyErr_SetString(PyExc_TypeError, "required field \"orelse\" missing from While");

  030d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HNNCIDFK@required?5field?5?$CCorelse?$CC?5missing?5@
  030d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  030de	e8 00 00 00 00	 call	 PyErr_SetString

; 4243 :             return 1;

  030e3	b8 01 00 00 00	 mov	 eax, 1
  030e8	e9 a1 2a 00 00	 jmp	 $LN573@obj2ast_st
$LN265@obj2ast_st:

; 4244 :         }
; 4245 :         *out = While(test, body, orelse, lineno, col_offset, arena);

  030ed	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  030f5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  030fa	8b 44 24 60	 mov	 eax, DWORD PTR col_offset$[rsp]
  030fe	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  03102	44 8b 4c 24 50	 mov	 r9d, DWORD PTR lineno$[rsp]
  03107	4c 8b 84 24 f8
	03 00 00	 mov	 r8, QWORD PTR orelse$25378[rsp]
  0310f	48 8b 94 24 e8
	03 00 00	 mov	 rdx, QWORD PTR body$25377[rsp]
  03117	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR test$25376[rsp]
  0311f	e8 00 00 00 00	 call	 _Py_While
  03124	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  0312c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4246 :         if (*out == NULL) goto failed;

  0312f	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  03137	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0313b	75 05		 jne	 SHORT $LN264@obj2ast_st
  0313d	e9 2f 2a 00 00	 jmp	 $failed$24787
$LN264@obj2ast_st:

; 4247 :         return 0;

  03142	33 c0		 xor	 eax, eax
  03144	e9 45 2a 00 00	 jmp	 $LN573@obj2ast_st
$LN299@obj2ast_st:

; 4248 :     }
; 4249 :     isinstance = PyObject_IsInstance(obj, (PyObject*)If_type);

  03149	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR If_type
  03150	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03158	e8 00 00 00 00	 call	 PyObject_IsInstance
  0315d	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4250 :     if (isinstance == -1) {

  03161	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  03166	75 0a		 jne	 SHORT $LN263@obj2ast_st

; 4251 :         return 1;

  03168	b8 01 00 00 00	 mov	 eax, 1
  0316d	e9 1c 2a 00 00	 jmp	 $LN573@obj2ast_st
$LN263@obj2ast_st:

; 4252 :     }
; 4253 :     if (isinstance) {

  03172	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  03177	0f 84 00 06 00
	00		 je	 $LN262@obj2ast_st

; 4254 :         expr_ty test;
; 4255 :         asdl_seq* body;
; 4256 :         asdl_seq* orelse;
; 4257 : 
; 4258 :         if (_PyObject_HasAttrId(obj, &PyId_test)) {

  0317d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  03182	8b c0		 mov	 eax, eax
  03184	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0318a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03193	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03197	48 8b d0	 mov	 rdx, rax
  0319a	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  031a2	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  031a7	85 c0		 test	 eax, eax
  031a9	0f 84 c9 00 00
	00		 je	 $LN261@obj2ast_st

; 4259 :             int res;
; 4260 :             tmp = _PyObject_GetAttrId(obj, &PyId_test);

  031af	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  031b4	8b c0		 mov	 eax, eax
  031b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  031bc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  031c5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  031c9	48 8b d0	 mov	 rdx, rax
  031cc	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  031d4	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  031d9	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4261 :             if (tmp == NULL) goto failed;

  031de	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  031e4	75 05		 jne	 SHORT $LN260@obj2ast_st
  031e6	e9 86 29 00 00	 jmp	 $failed$24787
$LN260@obj2ast_st:

; 4262 :             res = obj2ast_expr(tmp, &test, arena);

  031eb	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  031f3	48 8d 94 24 78
	04 00 00	 lea	 rdx, QWORD PTR test$25459[rsp]
  031fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  03200	e8 00 00 00 00	 call	 obj2ast_expr
  03205	89 84 24 88 04
	00 00		 mov	 DWORD PTR res$25463[rsp], eax

; 4263 :             if (res != 0) goto failed;

  0320c	83 bc 24 88 04
	00 00 00	 cmp	 DWORD PTR res$25463[rsp], 0
  03214	74 05		 je	 SHORT $LN259@obj2ast_st
  03216	e9 56 29 00 00	 jmp	 $failed$24787
$LN259@obj2ast_st:
$LN258@obj2ast_st:

; 4264 :             Py_CLEAR(tmp);

  0321b	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03221	74 4d		 je	 SHORT $LN255@obj2ast_st
  03223	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0322b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  03230	41 b8 a8 10 00
	00		 mov	 r8d, 4264		; 000010a8H
  03236	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0323d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  03244	e8 00 00 00 00	 call	 _PyParallel_Guard
  03249	85 c0		 test	 eax, eax
  0324b	75 23		 jne	 SHORT $LN255@obj2ast_st
  0324d	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03252	48 89 84 24 90
	04 00 00	 mov	 QWORD PTR _py_tmp$25471[rsp], rax
  0325a	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  03263	48 8b 8c 24 90
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$25471[rsp]
  0326b	e8 00 00 00 00	 call	 _Py_DecRef
$LN255@obj2ast_st:
  03270	33 c0		 xor	 eax, eax
  03272	85 c0		 test	 eax, eax
  03274	75 a5		 jne	 SHORT $LN258@obj2ast_st

; 4265 :         } else {

  03276	eb 1d		 jmp	 SHORT $LN254@obj2ast_st
$LN261@obj2ast_st:

; 4266 :             PyErr_SetString(PyExc_TypeError, "required field \"test\" missing from If");

  03278	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KNIONNCC@required?5field?5?$CCtest?$CC?5missing?5fr@
  0327f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03286	e8 00 00 00 00	 call	 PyErr_SetString

; 4267 :             return 1;

  0328b	b8 01 00 00 00	 mov	 eax, 1
  03290	e9 f9 28 00 00	 jmp	 $LN573@obj2ast_st
$LN254@obj2ast_st:

; 4268 :         }
; 4269 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  03295	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  0329a	8b c0		 mov	 eax, eax
  0329c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  032a2	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  032ab	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  032af	48 8b d0	 mov	 rdx, rax
  032b2	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  032ba	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  032bf	85 c0		 test	 eax, eax
  032c1	0f 84 f7 01 00
	00		 je	 $LN253@obj2ast_st

; 4270 :             int res;
; 4271 :             Py_ssize_t len;
; 4272 :             Py_ssize_t i;
; 4273 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  032c7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  032cc	8b c0		 mov	 eax, eax
  032ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  032d4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  032dd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  032e1	48 8b d0	 mov	 rdx, rax
  032e4	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  032ec	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  032f1	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4274 :             if (tmp == NULL) goto failed;

  032f6	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  032fc	75 05		 jne	 SHORT $LN252@obj2ast_st
  032fe	e9 6e 28 00 00	 jmp	 $failed$24787
$LN252@obj2ast_st:

; 4275 :             if (!PyList_Check(tmp)) {

  03303	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03308	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0330c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03312	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  03317	85 c0		 test	 eax, eax
  03319	75 25		 jne	 SHORT $LN251@obj2ast_st

; 4276 :                 PyErr_Format(PyExc_TypeError, "If field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0331b	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03320	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03324	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  03328	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@CBMBACPE@If?5field?5?$CCbody?$CC?5must?5be?5a?5list?0?5@
  0332f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03336	e8 00 00 00 00	 call	 PyErr_Format

; 4277 :                 goto failed;

  0333b	e9 31 28 00 00	 jmp	 $failed$24787
$LN251@obj2ast_st:

; 4278 :             }
; 4279 :             len = PyList_GET_SIZE(tmp);

  03340	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03345	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  03349	48 89 84 24 a8
	04 00 00	 mov	 QWORD PTR len$25479[rsp], rax

; 4280 :             body = asdl_seq_new(len, arena);

  03351	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  03359	48 8b 8c 24 a8
	04 00 00	 mov	 rcx, QWORD PTR len$25479[rsp]
  03361	e8 00 00 00 00	 call	 asdl_seq_new
  03366	48 89 84 24 70
	04 00 00	 mov	 QWORD PTR body$25460[rsp], rax

; 4281 :             if (body == NULL) goto failed;

  0336e	48 83 bc 24 70
	04 00 00 00	 cmp	 QWORD PTR body$25460[rsp], 0
  03377	75 05		 jne	 SHORT $LN250@obj2ast_st
  03379	e9 f3 27 00 00	 jmp	 $failed$24787
$LN250@obj2ast_st:

; 4282 :             for (i = 0; i < len; i++) {

  0337e	48 c7 84 24 a0
	04 00 00 00 00
	00 00		 mov	 QWORD PTR i$25480[rsp], 0
  0338a	eb 13		 jmp	 SHORT $LN249@obj2ast_st
$LN248@obj2ast_st:
  0338c	48 8b 84 24 a0
	04 00 00	 mov	 rax, QWORD PTR i$25480[rsp]
  03394	48 ff c0	 inc	 rax
  03397	48 89 84 24 a0
	04 00 00	 mov	 QWORD PTR i$25480[rsp], rax
$LN249@obj2ast_st:
  0339f	48 8b 84 24 a8
	04 00 00	 mov	 rax, QWORD PTR len$25479[rsp]
  033a7	48 39 84 24 a0
	04 00 00	 cmp	 QWORD PTR i$25480[rsp], rax
  033af	0f 8d ac 00 00
	00		 jge	 $LN247@obj2ast_st

; 4283 :                 stmt_ty value;
; 4284 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  033b5	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  033ba	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  033be	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  033c6	48 8d 94 24 b0
	04 00 00	 lea	 rdx, QWORD PTR value$25492[rsp]
  033ce	48 8b 8c 24 a0
	04 00 00	 mov	 rcx, QWORD PTR i$25480[rsp]
  033d6	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  033da	e8 00 00 00 00	 call	 obj2ast_stmt
  033df	89 84 24 98 04
	00 00		 mov	 DWORD PTR res$25478[rsp], eax

; 4285 :                 if (res != 0) goto failed;

  033e6	83 bc 24 98 04
	00 00 00	 cmp	 DWORD PTR res$25478[rsp], 0
  033ee	74 05		 je	 SHORT $LN246@obj2ast_st
  033f0	e9 7c 27 00 00	 jmp	 $failed$24787
$LN246@obj2ast_st:

; 4286 :                 asdl_seq_SET(body, i, value);

  033f5	8b 84 24 a0 04
	00 00		 mov	 eax, DWORD PTR i$25480[rsp]
  033fc	89 84 24 b8 04
	00 00		 mov	 DWORD PTR _asdl_i$25495[rsp], eax
  03403	48 83 bc 24 70
	04 00 00 00	 cmp	 QWORD PTR body$25460[rsp], 0
  0340c	74 15		 je	 SHORT $LN599@obj2ast_st
  0340e	48 63 84 24 b8
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25495[rsp]
  03416	48 8b 8c 24 70
	04 00 00	 mov	 rcx, QWORD PTR body$25460[rsp]
  0341e	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  03421	7c 1c		 jl	 SHORT $LN600@obj2ast_st
$LN599@obj2ast_st:
  03423	41 b8 be 10 00
	00		 mov	 r8d, 4286		; 000010beH
  03429	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  03430	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  03437	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0343d	33 c0		 xor	 eax, eax
$LN600@obj2ast_st:
  0343f	48 63 84 24 b8
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25495[rsp]
  03447	48 8b 8c 24 70
	04 00 00	 mov	 rcx, QWORD PTR body$25460[rsp]
  0344f	48 8b 94 24 b0
	04 00 00	 mov	 rdx, QWORD PTR value$25492[rsp]
  03457	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4287 :             }

  0345c	e9 2b ff ff ff	 jmp	 $LN248@obj2ast_st
$LN247@obj2ast_st:
$LN245@obj2ast_st:

; 4288 :             Py_CLEAR(tmp);

  03461	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03467	74 4d		 je	 SHORT $LN242@obj2ast_st
  03469	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03471	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  03476	41 b8 c0 10 00
	00		 mov	 r8d, 4288		; 000010c0H
  0347c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03483	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0348a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0348f	85 c0		 test	 eax, eax
  03491	75 23		 jne	 SHORT $LN242@obj2ast_st
  03493	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03498	48 89 84 24 c0
	04 00 00	 mov	 QWORD PTR _py_tmp$25501[rsp], rax
  034a0	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  034a9	48 8b 8c 24 c0
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$25501[rsp]
  034b1	e8 00 00 00 00	 call	 _Py_DecRef
$LN242@obj2ast_st:
  034b6	33 c0		 xor	 eax, eax
  034b8	85 c0		 test	 eax, eax
  034ba	75 a5		 jne	 SHORT $LN245@obj2ast_st

; 4289 :         } else {

  034bc	eb 1d		 jmp	 SHORT $LN241@obj2ast_st
$LN253@obj2ast_st:

; 4290 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from If");

  034be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@IBBHFIGB@required?5field?5?$CCbody?$CC?5missing?5fr@
  034c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  034cc	e8 00 00 00 00	 call	 PyErr_SetString

; 4291 :             return 1;

  034d1	b8 01 00 00 00	 mov	 eax, 1
  034d6	e9 b3 26 00 00	 jmp	 $LN573@obj2ast_st
$LN241@obj2ast_st:

; 4292 :         }
; 4293 :         if (_PyObject_HasAttrId(obj, &PyId_orelse)) {

  034db	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  034e0	8b c0		 mov	 eax, eax
  034e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  034e8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  034f1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  034f5	48 8b d0	 mov	 rdx, rax
  034f8	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03500	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03505	85 c0		 test	 eax, eax
  03507	0f 84 f7 01 00
	00		 je	 $LN240@obj2ast_st

; 4294 :             int res;
; 4295 :             Py_ssize_t len;
; 4296 :             Py_ssize_t i;
; 4297 :             tmp = _PyObject_GetAttrId(obj, &PyId_orelse);

  0350d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  03512	8b c0		 mov	 eax, eax
  03514	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0351a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03523	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03527	48 8b d0	 mov	 rdx, rax
  0352a	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03532	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  03537	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4298 :             if (tmp == NULL) goto failed;

  0353c	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03542	75 05		 jne	 SHORT $LN239@obj2ast_st
  03544	e9 28 26 00 00	 jmp	 $failed$24787
$LN239@obj2ast_st:

; 4299 :             if (!PyList_Check(tmp)) {

  03549	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0354e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03552	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03558	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0355d	85 c0		 test	 eax, eax
  0355f	75 25		 jne	 SHORT $LN238@obj2ast_st

; 4300 :                 PyErr_Format(PyExc_TypeError, "If field \"orelse\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  03561	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03566	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0356a	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0356e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@EKCAPFKA@If?5field?5?$CCorelse?$CC?5must?5be?5a?5list@
  03575	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0357c	e8 00 00 00 00	 call	 PyErr_Format

; 4301 :                 goto failed;

  03581	e9 eb 25 00 00	 jmp	 $failed$24787
$LN238@obj2ast_st:

; 4302 :             }
; 4303 :             len = PyList_GET_SIZE(tmp);

  03586	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0358b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0358f	48 89 84 24 d8
	04 00 00	 mov	 QWORD PTR len$25509[rsp], rax

; 4304 :             orelse = asdl_seq_new(len, arena);

  03597	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  0359f	48 8b 8c 24 d8
	04 00 00	 mov	 rcx, QWORD PTR len$25509[rsp]
  035a7	e8 00 00 00 00	 call	 asdl_seq_new
  035ac	48 89 84 24 80
	04 00 00	 mov	 QWORD PTR orelse$25461[rsp], rax

; 4305 :             if (orelse == NULL) goto failed;

  035b4	48 83 bc 24 80
	04 00 00 00	 cmp	 QWORD PTR orelse$25461[rsp], 0
  035bd	75 05		 jne	 SHORT $LN237@obj2ast_st
  035bf	e9 ad 25 00 00	 jmp	 $failed$24787
$LN237@obj2ast_st:

; 4306 :             for (i = 0; i < len; i++) {

  035c4	48 c7 84 24 d0
	04 00 00 00 00
	00 00		 mov	 QWORD PTR i$25510[rsp], 0
  035d0	eb 13		 jmp	 SHORT $LN236@obj2ast_st
$LN235@obj2ast_st:
  035d2	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR i$25510[rsp]
  035da	48 ff c0	 inc	 rax
  035dd	48 89 84 24 d0
	04 00 00	 mov	 QWORD PTR i$25510[rsp], rax
$LN236@obj2ast_st:
  035e5	48 8b 84 24 d8
	04 00 00	 mov	 rax, QWORD PTR len$25509[rsp]
  035ed	48 39 84 24 d0
	04 00 00	 cmp	 QWORD PTR i$25510[rsp], rax
  035f5	0f 8d ac 00 00
	00		 jge	 $LN234@obj2ast_st

; 4307 :                 stmt_ty value;
; 4308 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  035fb	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03600	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  03604	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0360c	48 8d 94 24 e0
	04 00 00	 lea	 rdx, QWORD PTR value$25522[rsp]
  03614	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR i$25510[rsp]
  0361c	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  03620	e8 00 00 00 00	 call	 obj2ast_stmt
  03625	89 84 24 c8 04
	00 00		 mov	 DWORD PTR res$25508[rsp], eax

; 4309 :                 if (res != 0) goto failed;

  0362c	83 bc 24 c8 04
	00 00 00	 cmp	 DWORD PTR res$25508[rsp], 0
  03634	74 05		 je	 SHORT $LN233@obj2ast_st
  03636	e9 36 25 00 00	 jmp	 $failed$24787
$LN233@obj2ast_st:

; 4310 :                 asdl_seq_SET(orelse, i, value);

  0363b	8b 84 24 d0 04
	00 00		 mov	 eax, DWORD PTR i$25510[rsp]
  03642	89 84 24 e8 04
	00 00		 mov	 DWORD PTR _asdl_i$25525[rsp], eax
  03649	48 83 bc 24 80
	04 00 00 00	 cmp	 QWORD PTR orelse$25461[rsp], 0
  03652	74 15		 je	 SHORT $LN601@obj2ast_st
  03654	48 63 84 24 e8
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25525[rsp]
  0365c	48 8b 8c 24 80
	04 00 00	 mov	 rcx, QWORD PTR orelse$25461[rsp]
  03664	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  03667	7c 1c		 jl	 SHORT $LN602@obj2ast_st
$LN601@obj2ast_st:
  03669	41 b8 d6 10 00
	00		 mov	 r8d, 4310		; 000010d6H
  0366f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  03676	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@PNODFBDF@?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?9?$AA?$DO@
  0367d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03683	33 c0		 xor	 eax, eax
$LN602@obj2ast_st:
  03685	48 63 84 24 e8
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25525[rsp]
  0368d	48 8b 8c 24 80
	04 00 00	 mov	 rcx, QWORD PTR orelse$25461[rsp]
  03695	48 8b 94 24 e0
	04 00 00	 mov	 rdx, QWORD PTR value$25522[rsp]
  0369d	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4311 :             }

  036a2	e9 2b ff ff ff	 jmp	 $LN235@obj2ast_st
$LN234@obj2ast_st:
$LN232@obj2ast_st:

; 4312 :             Py_CLEAR(tmp);

  036a7	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  036ad	74 4d		 je	 SHORT $LN229@obj2ast_st
  036af	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  036b7	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  036bc	41 b8 d8 10 00
	00		 mov	 r8d, 4312		; 000010d8H
  036c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  036c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  036d0	e8 00 00 00 00	 call	 _PyParallel_Guard
  036d5	85 c0		 test	 eax, eax
  036d7	75 23		 jne	 SHORT $LN229@obj2ast_st
  036d9	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  036de	48 89 84 24 f0
	04 00 00	 mov	 QWORD PTR _py_tmp$25531[rsp], rax
  036e6	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  036ef	48 8b 8c 24 f0
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$25531[rsp]
  036f7	e8 00 00 00 00	 call	 _Py_DecRef
$LN229@obj2ast_st:
  036fc	33 c0		 xor	 eax, eax
  036fe	85 c0		 test	 eax, eax
  03700	75 a5		 jne	 SHORT $LN232@obj2ast_st

; 4313 :         } else {

  03702	eb 1d		 jmp	 SHORT $LN228@obj2ast_st
$LN240@obj2ast_st:

; 4314 :             PyErr_SetString(PyExc_TypeError, "required field \"orelse\" missing from If");

  03704	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@BBKAIMOL@required?5field?5?$CCorelse?$CC?5missing?5@
  0370b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03712	e8 00 00 00 00	 call	 PyErr_SetString

; 4315 :             return 1;

  03717	b8 01 00 00 00	 mov	 eax, 1
  0371c	e9 6d 24 00 00	 jmp	 $LN573@obj2ast_st
$LN228@obj2ast_st:

; 4316 :         }
; 4317 :         *out = If(test, body, orelse, lineno, col_offset, arena);

  03721	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  03729	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0372e	8b 44 24 60	 mov	 eax, DWORD PTR col_offset$[rsp]
  03732	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  03736	44 8b 4c 24 50	 mov	 r9d, DWORD PTR lineno$[rsp]
  0373b	4c 8b 84 24 80
	04 00 00	 mov	 r8, QWORD PTR orelse$25461[rsp]
  03743	48 8b 94 24 70
	04 00 00	 mov	 rdx, QWORD PTR body$25460[rsp]
  0374b	48 8b 8c 24 78
	04 00 00	 mov	 rcx, QWORD PTR test$25459[rsp]
  03753	e8 00 00 00 00	 call	 _Py_If
  03758	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  03760	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4318 :         if (*out == NULL) goto failed;

  03763	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  0376b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0376f	75 05		 jne	 SHORT $LN227@obj2ast_st
  03771	e9 fb 23 00 00	 jmp	 $failed$24787
$LN227@obj2ast_st:

; 4319 :         return 0;

  03776	33 c0		 xor	 eax, eax
  03778	e9 11 24 00 00	 jmp	 $LN573@obj2ast_st
$LN262@obj2ast_st:

; 4320 :     }
; 4321 :     isinstance = PyObject_IsInstance(obj, (PyObject*)With_type);

  0377d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR With_type
  03784	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0378c	e8 00 00 00 00	 call	 PyObject_IsInstance
  03791	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4322 :     if (isinstance == -1) {

  03795	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0379a	75 0a		 jne	 SHORT $LN226@obj2ast_st

; 4323 :         return 1;

  0379c	b8 01 00 00 00	 mov	 eax, 1
  037a1	e9 e8 23 00 00	 jmp	 $LN573@obj2ast_st
$LN226@obj2ast_st:

; 4324 :     }
; 4325 :     if (isinstance) {

  037a6	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  037ab	0f 84 dd 04 00
	00		 je	 $LN225@obj2ast_st

; 4326 :         asdl_seq* items;
; 4327 :         asdl_seq* body;
; 4328 : 
; 4329 :         if (_PyObject_HasAttrId(obj, &PyId_items)) {

  037b1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_items
  037b6	8b c0		 mov	 eax, eax
  037b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  037be	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  037c7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  037cb	48 8b d0	 mov	 rdx, rax
  037ce	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  037d6	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  037db	85 c0		 test	 eax, eax
  037dd	0f 84 f7 01 00
	00		 je	 $LN224@obj2ast_st

; 4330 :             int res;
; 4331 :             Py_ssize_t len;
; 4332 :             Py_ssize_t i;
; 4333 :             tmp = _PyObject_GetAttrId(obj, &PyId_items);

  037e3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_items
  037e8	8b c0		 mov	 eax, eax
  037ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  037f0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  037f9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  037fd	48 8b d0	 mov	 rdx, rax
  03800	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03808	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0380d	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4334 :             if (tmp == NULL) goto failed;

  03812	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03818	75 05		 jne	 SHORT $LN223@obj2ast_st
  0381a	e9 52 23 00 00	 jmp	 $failed$24787
$LN223@obj2ast_st:

; 4335 :             if (!PyList_Check(tmp)) {

  0381f	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03824	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03828	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0382e	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  03833	85 c0		 test	 eax, eax
  03835	75 25		 jne	 SHORT $LN222@obj2ast_st

; 4336 :                 PyErr_Format(PyExc_TypeError, "With field \"items\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  03837	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0383c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03840	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  03844	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@DOBGIIJD@With?5field?5?$CCitems?$CC?5must?5be?5a?5lis@
  0384b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03852	e8 00 00 00 00	 call	 PyErr_Format

; 4337 :                 goto failed;

  03857	e9 15 23 00 00	 jmp	 $failed$24787
$LN222@obj2ast_st:

; 4338 :             }
; 4339 :             len = PyList_GET_SIZE(tmp);

  0385c	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03861	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  03865	48 89 84 24 18
	05 00 00	 mov	 QWORD PTR len$25546[rsp], rax

; 4340 :             items = asdl_seq_new(len, arena);

  0386d	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  03875	48 8b 8c 24 18
	05 00 00	 mov	 rcx, QWORD PTR len$25546[rsp]
  0387d	e8 00 00 00 00	 call	 asdl_seq_new
  03882	48 89 84 24 00
	05 00 00	 mov	 QWORD PTR items$25542[rsp], rax

; 4341 :             if (items == NULL) goto failed;

  0388a	48 83 bc 24 00
	05 00 00 00	 cmp	 QWORD PTR items$25542[rsp], 0
  03893	75 05		 jne	 SHORT $LN221@obj2ast_st
  03895	e9 d7 22 00 00	 jmp	 $failed$24787
$LN221@obj2ast_st:

; 4342 :             for (i = 0; i < len; i++) {

  0389a	48 c7 84 24 10
	05 00 00 00 00
	00 00		 mov	 QWORD PTR i$25547[rsp], 0
  038a6	eb 13		 jmp	 SHORT $LN220@obj2ast_st
$LN219@obj2ast_st:
  038a8	48 8b 84 24 10
	05 00 00	 mov	 rax, QWORD PTR i$25547[rsp]
  038b0	48 ff c0	 inc	 rax
  038b3	48 89 84 24 10
	05 00 00	 mov	 QWORD PTR i$25547[rsp], rax
$LN220@obj2ast_st:
  038bb	48 8b 84 24 18
	05 00 00	 mov	 rax, QWORD PTR len$25546[rsp]
  038c3	48 39 84 24 10
	05 00 00	 cmp	 QWORD PTR i$25547[rsp], rax
  038cb	0f 8d ac 00 00
	00		 jge	 $LN218@obj2ast_st

; 4343 :                 withitem_ty value;
; 4344 :                 res = obj2ast_withitem(PyList_GET_ITEM(tmp, i), &value, arena);

  038d1	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  038d6	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  038da	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  038e2	48 8d 94 24 20
	05 00 00	 lea	 rdx, QWORD PTR value$25559[rsp]
  038ea	48 8b 8c 24 10
	05 00 00	 mov	 rcx, QWORD PTR i$25547[rsp]
  038f2	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  038f6	e8 00 00 00 00	 call	 obj2ast_withitem
  038fb	89 84 24 08 05
	00 00		 mov	 DWORD PTR res$25545[rsp], eax

; 4345 :                 if (res != 0) goto failed;

  03902	83 bc 24 08 05
	00 00 00	 cmp	 DWORD PTR res$25545[rsp], 0
  0390a	74 05		 je	 SHORT $LN217@obj2ast_st
  0390c	e9 60 22 00 00	 jmp	 $failed$24787
$LN217@obj2ast_st:

; 4346 :                 asdl_seq_SET(items, i, value);

  03911	8b 84 24 10 05
	00 00		 mov	 eax, DWORD PTR i$25547[rsp]
  03918	89 84 24 28 05
	00 00		 mov	 DWORD PTR _asdl_i$25562[rsp], eax
  0391f	48 83 bc 24 00
	05 00 00 00	 cmp	 QWORD PTR items$25542[rsp], 0
  03928	74 15		 je	 SHORT $LN603@obj2ast_st
  0392a	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25562[rsp]
  03932	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR items$25542[rsp]
  0393a	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  0393d	7c 1c		 jl	 SHORT $LN604@obj2ast_st
$LN603@obj2ast_st:
  0393f	41 b8 fa 10 00
	00		 mov	 r8d, 4346		; 000010faH
  03945	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  0394c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@MEBHMPHM@?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@
  03953	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03959	33 c0		 xor	 eax, eax
$LN604@obj2ast_st:
  0395b	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25562[rsp]
  03963	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR items$25542[rsp]
  0396b	48 8b 94 24 20
	05 00 00	 mov	 rdx, QWORD PTR value$25559[rsp]
  03973	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4347 :             }

  03978	e9 2b ff ff ff	 jmp	 $LN219@obj2ast_st
$LN218@obj2ast_st:
$LN216@obj2ast_st:

; 4348 :             Py_CLEAR(tmp);

  0397d	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03983	74 4d		 je	 SHORT $LN213@obj2ast_st
  03985	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0398d	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  03992	41 b8 fc 10 00
	00		 mov	 r8d, 4348		; 000010fcH
  03998	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0399f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  039a6	e8 00 00 00 00	 call	 _PyParallel_Guard
  039ab	85 c0		 test	 eax, eax
  039ad	75 23		 jne	 SHORT $LN213@obj2ast_st
  039af	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  039b4	48 89 84 24 30
	05 00 00	 mov	 QWORD PTR _py_tmp$25569[rsp], rax
  039bc	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  039c5	48 8b 8c 24 30
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$25569[rsp]
  039cd	e8 00 00 00 00	 call	 _Py_DecRef
$LN213@obj2ast_st:
  039d2	33 c0		 xor	 eax, eax
  039d4	85 c0		 test	 eax, eax
  039d6	75 a5		 jne	 SHORT $LN216@obj2ast_st

; 4349 :         } else {

  039d8	eb 1d		 jmp	 SHORT $LN212@obj2ast_st
$LN224@obj2ast_st:

; 4350 :             PyErr_SetString(PyExc_TypeError, "required field \"items\" missing from With");

  039da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@CALAEGDB@required?5field?5?$CCitems?$CC?5missing?5f@
  039e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  039e8	e8 00 00 00 00	 call	 PyErr_SetString

; 4351 :             return 1;

  039ed	b8 01 00 00 00	 mov	 eax, 1
  039f2	e9 97 21 00 00	 jmp	 $LN573@obj2ast_st
$LN212@obj2ast_st:

; 4352 :         }
; 4353 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  039f7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  039fc	8b c0		 mov	 eax, eax
  039fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03a04	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03a0d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03a11	48 8b d0	 mov	 rdx, rax
  03a14	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03a1c	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03a21	85 c0		 test	 eax, eax
  03a23	0f 84 f7 01 00
	00		 je	 $LN211@obj2ast_st

; 4354 :             int res;
; 4355 :             Py_ssize_t len;
; 4356 :             Py_ssize_t i;
; 4357 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  03a29	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  03a2e	8b c0		 mov	 eax, eax
  03a30	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03a36	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03a3f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03a43	48 8b d0	 mov	 rdx, rax
  03a46	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03a4e	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  03a53	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4358 :             if (tmp == NULL) goto failed;

  03a58	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03a5e	75 05		 jne	 SHORT $LN210@obj2ast_st
  03a60	e9 0c 21 00 00	 jmp	 $failed$24787
$LN210@obj2ast_st:

; 4359 :             if (!PyList_Check(tmp)) {

  03a65	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03a6a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03a6e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03a74	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  03a79	85 c0		 test	 eax, eax
  03a7b	75 25		 jne	 SHORT $LN209@obj2ast_st

; 4360 :                 PyErr_Format(PyExc_TypeError, "With field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  03a7d	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03a82	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03a86	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  03a8a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@OEFDOBHK@With?5field?5?$CCbody?$CC?5must?5be?5a?5list@
  03a91	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03a98	e8 00 00 00 00	 call	 PyErr_Format

; 4361 :                 goto failed;

  03a9d	e9 cf 20 00 00	 jmp	 $failed$24787
$LN209@obj2ast_st:

; 4362 :             }
; 4363 :             len = PyList_GET_SIZE(tmp);

  03aa2	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03aa7	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  03aab	48 89 84 24 48
	05 00 00	 mov	 QWORD PTR len$25577[rsp], rax

; 4364 :             body = asdl_seq_new(len, arena);

  03ab3	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  03abb	48 8b 8c 24 48
	05 00 00	 mov	 rcx, QWORD PTR len$25577[rsp]
  03ac3	e8 00 00 00 00	 call	 asdl_seq_new
  03ac8	48 89 84 24 f8
	04 00 00	 mov	 QWORD PTR body$25543[rsp], rax

; 4365 :             if (body == NULL) goto failed;

  03ad0	48 83 bc 24 f8
	04 00 00 00	 cmp	 QWORD PTR body$25543[rsp], 0
  03ad9	75 05		 jne	 SHORT $LN208@obj2ast_st
  03adb	e9 91 20 00 00	 jmp	 $failed$24787
$LN208@obj2ast_st:

; 4366 :             for (i = 0; i < len; i++) {

  03ae0	48 c7 84 24 40
	05 00 00 00 00
	00 00		 mov	 QWORD PTR i$25578[rsp], 0
  03aec	eb 13		 jmp	 SHORT $LN207@obj2ast_st
$LN206@obj2ast_st:
  03aee	48 8b 84 24 40
	05 00 00	 mov	 rax, QWORD PTR i$25578[rsp]
  03af6	48 ff c0	 inc	 rax
  03af9	48 89 84 24 40
	05 00 00	 mov	 QWORD PTR i$25578[rsp], rax
$LN207@obj2ast_st:
  03b01	48 8b 84 24 48
	05 00 00	 mov	 rax, QWORD PTR len$25577[rsp]
  03b09	48 39 84 24 40
	05 00 00	 cmp	 QWORD PTR i$25578[rsp], rax
  03b11	0f 8d ac 00 00
	00		 jge	 $LN205@obj2ast_st

; 4367 :                 stmt_ty value;
; 4368 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  03b17	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03b1c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  03b20	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  03b28	48 8d 94 24 50
	05 00 00	 lea	 rdx, QWORD PTR value$25590[rsp]
  03b30	48 8b 8c 24 40
	05 00 00	 mov	 rcx, QWORD PTR i$25578[rsp]
  03b38	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  03b3c	e8 00 00 00 00	 call	 obj2ast_stmt
  03b41	89 84 24 38 05
	00 00		 mov	 DWORD PTR res$25576[rsp], eax

; 4369 :                 if (res != 0) goto failed;

  03b48	83 bc 24 38 05
	00 00 00	 cmp	 DWORD PTR res$25576[rsp], 0
  03b50	74 05		 je	 SHORT $LN204@obj2ast_st
  03b52	e9 1a 20 00 00	 jmp	 $failed$24787
$LN204@obj2ast_st:

; 4370 :                 asdl_seq_SET(body, i, value);

  03b57	8b 84 24 40 05
	00 00		 mov	 eax, DWORD PTR i$25578[rsp]
  03b5e	89 84 24 58 05
	00 00		 mov	 DWORD PTR _asdl_i$25593[rsp], eax
  03b65	48 83 bc 24 f8
	04 00 00 00	 cmp	 QWORD PTR body$25543[rsp], 0
  03b6e	74 15		 je	 SHORT $LN605@obj2ast_st
  03b70	48 63 84 24 58
	05 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25593[rsp]
  03b78	48 8b 8c 24 f8
	04 00 00	 mov	 rcx, QWORD PTR body$25543[rsp]
  03b80	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  03b83	7c 1c		 jl	 SHORT $LN606@obj2ast_st
$LN605@obj2ast_st:
  03b85	41 b8 12 11 00
	00		 mov	 r8d, 4370		; 00001112H
  03b8b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  03b92	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  03b99	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03b9f	33 c0		 xor	 eax, eax
$LN606@obj2ast_st:
  03ba1	48 63 84 24 58
	05 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25593[rsp]
  03ba9	48 8b 8c 24 f8
	04 00 00	 mov	 rcx, QWORD PTR body$25543[rsp]
  03bb1	48 8b 94 24 50
	05 00 00	 mov	 rdx, QWORD PTR value$25590[rsp]
  03bb9	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4371 :             }

  03bbe	e9 2b ff ff ff	 jmp	 $LN206@obj2ast_st
$LN205@obj2ast_st:
$LN203@obj2ast_st:

; 4372 :             Py_CLEAR(tmp);

  03bc3	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03bc9	74 4d		 je	 SHORT $LN200@obj2ast_st
  03bcb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03bd3	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  03bd8	41 b8 14 11 00
	00		 mov	 r8d, 4372		; 00001114H
  03bde	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03be5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  03bec	e8 00 00 00 00	 call	 _PyParallel_Guard
  03bf1	85 c0		 test	 eax, eax
  03bf3	75 23		 jne	 SHORT $LN200@obj2ast_st
  03bf5	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03bfa	48 89 84 24 60
	05 00 00	 mov	 QWORD PTR _py_tmp$25599[rsp], rax
  03c02	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  03c0b	48 8b 8c 24 60
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$25599[rsp]
  03c13	e8 00 00 00 00	 call	 _Py_DecRef
$LN200@obj2ast_st:
  03c18	33 c0		 xor	 eax, eax
  03c1a	85 c0		 test	 eax, eax
  03c1c	75 a5		 jne	 SHORT $LN203@obj2ast_st

; 4373 :         } else {

  03c1e	eb 1d		 jmp	 SHORT $LN199@obj2ast_st
$LN211@obj2ast_st:

; 4374 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from With");

  03c20	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@GADJBKKB@required?5field?5?$CCbody?$CC?5missing?5fr@
  03c27	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03c2e	e8 00 00 00 00	 call	 PyErr_SetString

; 4375 :             return 1;

  03c33	b8 01 00 00 00	 mov	 eax, 1
  03c38	e9 51 1f 00 00	 jmp	 $LN573@obj2ast_st
$LN199@obj2ast_st:

; 4376 :         }
; 4377 :         *out = With(items, body, lineno, col_offset, arena);

  03c3d	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  03c45	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03c4a	44 8b 4c 24 60	 mov	 r9d, DWORD PTR col_offset$[rsp]
  03c4f	44 8b 44 24 50	 mov	 r8d, DWORD PTR lineno$[rsp]
  03c54	48 8b 94 24 f8
	04 00 00	 mov	 rdx, QWORD PTR body$25543[rsp]
  03c5c	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR items$25542[rsp]
  03c64	e8 00 00 00 00	 call	 _Py_With
  03c69	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  03c71	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4378 :         if (*out == NULL) goto failed;

  03c74	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  03c7c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  03c80	75 05		 jne	 SHORT $LN198@obj2ast_st
  03c82	e9 ea 1e 00 00	 jmp	 $failed$24787
$LN198@obj2ast_st:

; 4379 :         return 0;

  03c87	33 c0		 xor	 eax, eax
  03c89	e9 00 1f 00 00	 jmp	 $LN573@obj2ast_st
$LN225@obj2ast_st:

; 4380 :     }
; 4381 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Raise_type);

  03c8e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Raise_type
  03c95	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03c9d	e8 00 00 00 00	 call	 PyObject_IsInstance
  03ca2	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4382 :     if (isinstance == -1) {

  03ca6	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  03cab	75 0a		 jne	 SHORT $LN197@obj2ast_st

; 4383 :         return 1;

  03cad	b8 01 00 00 00	 mov	 eax, 1
  03cb2	e9 d7 1e 00 00	 jmp	 $LN573@obj2ast_st
$LN197@obj2ast_st:

; 4384 :     }
; 4385 :     if (isinstance) {

  03cb7	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  03cbc	0f 84 5f 02 00
	00		 je	 $LN196@obj2ast_st

; 4386 :         expr_ty exc;
; 4387 :         expr_ty cause;
; 4388 : 
; 4389 :         if (_PyObject_HasAttrId(obj, &PyId_exc)) {

  03cc2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_exc
  03cc7	8b c0		 mov	 eax, eax
  03cc9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03ccf	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03cd8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03cdc	48 8b d0	 mov	 rdx, rax
  03cdf	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03ce7	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03cec	85 c0		 test	 eax, eax
  03cee	0f 84 c9 00 00
	00		 je	 $LN195@obj2ast_st

; 4390 :             int res;
; 4391 :             tmp = _PyObject_GetAttrId(obj, &PyId_exc);

  03cf4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_exc
  03cf9	8b c0		 mov	 eax, eax
  03cfb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03d01	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03d0a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03d0e	48 8b d0	 mov	 rdx, rax
  03d11	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03d19	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  03d1e	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4392 :             if (tmp == NULL) goto failed;

  03d23	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03d29	75 05		 jne	 SHORT $LN194@obj2ast_st
  03d2b	e9 41 1e 00 00	 jmp	 $failed$24787
$LN194@obj2ast_st:

; 4393 :             res = obj2ast_expr(tmp, &exc, arena);

  03d30	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  03d38	48 8d 94 24 70
	05 00 00	 lea	 rdx, QWORD PTR exc$25610[rsp]
  03d40	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  03d45	e8 00 00 00 00	 call	 obj2ast_expr
  03d4a	89 84 24 78 05
	00 00		 mov	 DWORD PTR res$25613[rsp], eax

; 4394 :             if (res != 0) goto failed;

  03d51	83 bc 24 78 05
	00 00 00	 cmp	 DWORD PTR res$25613[rsp], 0
  03d59	74 05		 je	 SHORT $LN193@obj2ast_st
  03d5b	e9 11 1e 00 00	 jmp	 $failed$24787
$LN193@obj2ast_st:
$LN192@obj2ast_st:

; 4395 :             Py_CLEAR(tmp);

  03d60	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03d66	74 4d		 je	 SHORT $LN189@obj2ast_st
  03d68	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03d70	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  03d75	41 b8 2b 11 00
	00		 mov	 r8d, 4395		; 0000112bH
  03d7b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03d82	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  03d89	e8 00 00 00 00	 call	 _PyParallel_Guard
  03d8e	85 c0		 test	 eax, eax
  03d90	75 23		 jne	 SHORT $LN189@obj2ast_st
  03d92	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03d97	48 89 84 24 80
	05 00 00	 mov	 QWORD PTR _py_tmp$25621[rsp], rax
  03d9f	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  03da8	48 8b 8c 24 80
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$25621[rsp]
  03db0	e8 00 00 00 00	 call	 _Py_DecRef
$LN189@obj2ast_st:
  03db5	33 c0		 xor	 eax, eax
  03db7	85 c0		 test	 eax, eax
  03db9	75 a5		 jne	 SHORT $LN192@obj2ast_st

; 4396 :         } else {

  03dbb	eb 0c		 jmp	 SHORT $LN188@obj2ast_st
$LN195@obj2ast_st:

; 4397 :             exc = NULL;

  03dbd	48 c7 84 24 70
	05 00 00 00 00
	00 00		 mov	 QWORD PTR exc$25610[rsp], 0
$LN188@obj2ast_st:

; 4398 :         }
; 4399 :         if (_PyObject_HasAttrId(obj, &PyId_cause)) {

  03dc9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_cause
  03dce	8b c0		 mov	 eax, eax
  03dd0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03dd6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03ddf	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03de3	48 8b d0	 mov	 rdx, rax
  03de6	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03dee	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03df3	85 c0		 test	 eax, eax
  03df5	0f 84 c9 00 00
	00		 je	 $LN187@obj2ast_st

; 4400 :             int res;
; 4401 :             tmp = _PyObject_GetAttrId(obj, &PyId_cause);

  03dfb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_cause
  03e00	8b c0		 mov	 eax, eax
  03e02	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03e08	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03e11	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03e15	48 8b d0	 mov	 rdx, rax
  03e18	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03e20	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  03e25	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4402 :             if (tmp == NULL) goto failed;

  03e2a	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03e30	75 05		 jne	 SHORT $LN186@obj2ast_st
  03e32	e9 3a 1d 00 00	 jmp	 $failed$24787
$LN186@obj2ast_st:

; 4403 :             res = obj2ast_expr(tmp, &cause, arena);

  03e37	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  03e3f	48 8d 94 24 68
	05 00 00	 lea	 rdx, QWORD PTR cause$25611[rsp]
  03e47	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  03e4c	e8 00 00 00 00	 call	 obj2ast_expr
  03e51	89 84 24 88 05
	00 00		 mov	 DWORD PTR res$25628[rsp], eax

; 4404 :             if (res != 0) goto failed;

  03e58	83 bc 24 88 05
	00 00 00	 cmp	 DWORD PTR res$25628[rsp], 0
  03e60	74 05		 je	 SHORT $LN185@obj2ast_st
  03e62	e9 0a 1d 00 00	 jmp	 $failed$24787
$LN185@obj2ast_st:
$LN184@obj2ast_st:

; 4405 :             Py_CLEAR(tmp);

  03e67	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03e6d	74 4d		 je	 SHORT $LN181@obj2ast_st
  03e6f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03e77	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  03e7c	41 b8 35 11 00
	00		 mov	 r8d, 4405		; 00001135H
  03e82	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03e89	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  03e90	e8 00 00 00 00	 call	 _PyParallel_Guard
  03e95	85 c0		 test	 eax, eax
  03e97	75 23		 jne	 SHORT $LN181@obj2ast_st
  03e99	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03e9e	48 89 84 24 90
	05 00 00	 mov	 QWORD PTR _py_tmp$25636[rsp], rax
  03ea6	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  03eaf	48 8b 8c 24 90
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$25636[rsp]
  03eb7	e8 00 00 00 00	 call	 _Py_DecRef
$LN181@obj2ast_st:
  03ebc	33 c0		 xor	 eax, eax
  03ebe	85 c0		 test	 eax, eax
  03ec0	75 a5		 jne	 SHORT $LN184@obj2ast_st

; 4406 :         } else {

  03ec2	eb 0c		 jmp	 SHORT $LN180@obj2ast_st
$LN187@obj2ast_st:

; 4407 :             cause = NULL;

  03ec4	48 c7 84 24 68
	05 00 00 00 00
	00 00		 mov	 QWORD PTR cause$25611[rsp], 0
$LN180@obj2ast_st:

; 4408 :         }
; 4409 :         *out = Raise(exc, cause, lineno, col_offset, arena);

  03ed0	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  03ed8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03edd	44 8b 4c 24 60	 mov	 r9d, DWORD PTR col_offset$[rsp]
  03ee2	44 8b 44 24 50	 mov	 r8d, DWORD PTR lineno$[rsp]
  03ee7	48 8b 94 24 68
	05 00 00	 mov	 rdx, QWORD PTR cause$25611[rsp]
  03eef	48 8b 8c 24 70
	05 00 00	 mov	 rcx, QWORD PTR exc$25610[rsp]
  03ef7	e8 00 00 00 00	 call	 _Py_Raise
  03efc	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  03f04	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4410 :         if (*out == NULL) goto failed;

  03f07	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  03f0f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  03f13	75 05		 jne	 SHORT $LN179@obj2ast_st
  03f15	e9 57 1c 00 00	 jmp	 $failed$24787
$LN179@obj2ast_st:

; 4411 :         return 0;

  03f1a	33 c0		 xor	 eax, eax
  03f1c	e9 6d 1c 00 00	 jmp	 $LN573@obj2ast_st
$LN196@obj2ast_st:

; 4412 :     }
; 4413 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Try_type);

  03f21	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Try_type
  03f28	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03f30	e8 00 00 00 00	 call	 PyObject_IsInstance
  03f35	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4414 :     if (isinstance == -1) {

  03f39	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  03f3e	75 0a		 jne	 SHORT $LN178@obj2ast_st

; 4415 :         return 1;

  03f40	b8 01 00 00 00	 mov	 eax, 1
  03f45	e9 44 1c 00 00	 jmp	 $LN573@obj2ast_st
$LN178@obj2ast_st:

; 4416 :     }
; 4417 :     if (isinstance) {

  03f4a	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  03f4f	0f 84 7f 09 00
	00		 je	 $LN177@obj2ast_st

; 4418 :         asdl_seq* body;
; 4419 :         asdl_seq* handlers;
; 4420 :         asdl_seq* orelse;
; 4421 :         asdl_seq* finalbody;
; 4422 : 
; 4423 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  03f55	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  03f5a	8b c0		 mov	 eax, eax
  03f5c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03f62	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03f6b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03f6f	48 8b d0	 mov	 rdx, rax
  03f72	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03f7a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03f7f	85 c0		 test	 eax, eax
  03f81	0f 84 f7 01 00
	00		 je	 $LN176@obj2ast_st

; 4424 :             int res;
; 4425 :             Py_ssize_t len;
; 4426 :             Py_ssize_t i;
; 4427 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  03f87	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  03f8c	8b c0		 mov	 eax, eax
  03f8e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03f94	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03f9d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03fa1	48 8b d0	 mov	 rdx, rax
  03fa4	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03fac	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  03fb1	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4428 :             if (tmp == NULL) goto failed;

  03fb6	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03fbc	75 05		 jne	 SHORT $LN175@obj2ast_st
  03fbe	e9 ae 1b 00 00	 jmp	 $failed$24787
$LN175@obj2ast_st:

; 4429 :             if (!PyList_Check(tmp)) {

  03fc3	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03fc8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03fcc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03fd2	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  03fd7	85 c0		 test	 eax, eax
  03fd9	75 25		 jne	 SHORT $LN174@obj2ast_st

; 4430 :                 PyErr_Format(PyExc_TypeError, "Try field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  03fdb	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  03fe0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03fe4	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  03fe8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@IDFBPFON@Try?5field?5?$CCbody?$CC?5must?5be?5a?5list?0@
  03fef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03ff6	e8 00 00 00 00	 call	 PyErr_Format

; 4431 :                 goto failed;

  03ffb	e9 71 1b 00 00	 jmp	 $failed$24787
$LN174@obj2ast_st:

; 4432 :             }
; 4433 :             len = PyList_GET_SIZE(tmp);

  04000	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04005	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  04009	48 89 84 24 c8
	05 00 00	 mov	 QWORD PTR len$25653[rsp], rax

; 4434 :             body = asdl_seq_new(len, arena);

  04011	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  04019	48 8b 8c 24 c8
	05 00 00	 mov	 rcx, QWORD PTR len$25653[rsp]
  04021	e8 00 00 00 00	 call	 asdl_seq_new
  04026	48 89 84 24 a0
	05 00 00	 mov	 QWORD PTR body$25647[rsp], rax

; 4435 :             if (body == NULL) goto failed;

  0402e	48 83 bc 24 a0
	05 00 00 00	 cmp	 QWORD PTR body$25647[rsp], 0
  04037	75 05		 jne	 SHORT $LN173@obj2ast_st
  04039	e9 33 1b 00 00	 jmp	 $failed$24787
$LN173@obj2ast_st:

; 4436 :             for (i = 0; i < len; i++) {

  0403e	48 c7 84 24 c0
	05 00 00 00 00
	00 00		 mov	 QWORD PTR i$25654[rsp], 0
  0404a	eb 13		 jmp	 SHORT $LN172@obj2ast_st
$LN171@obj2ast_st:
  0404c	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR i$25654[rsp]
  04054	48 ff c0	 inc	 rax
  04057	48 89 84 24 c0
	05 00 00	 mov	 QWORD PTR i$25654[rsp], rax
$LN172@obj2ast_st:
  0405f	48 8b 84 24 c8
	05 00 00	 mov	 rax, QWORD PTR len$25653[rsp]
  04067	48 39 84 24 c0
	05 00 00	 cmp	 QWORD PTR i$25654[rsp], rax
  0406f	0f 8d ac 00 00
	00		 jge	 $LN170@obj2ast_st

; 4437 :                 stmt_ty value;
; 4438 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  04075	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0407a	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0407e	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04086	48 8d 94 24 d0
	05 00 00	 lea	 rdx, QWORD PTR value$25666[rsp]
  0408e	48 8b 8c 24 c0
	05 00 00	 mov	 rcx, QWORD PTR i$25654[rsp]
  04096	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0409a	e8 00 00 00 00	 call	 obj2ast_stmt
  0409f	89 84 24 b8 05
	00 00		 mov	 DWORD PTR res$25652[rsp], eax

; 4439 :                 if (res != 0) goto failed;

  040a6	83 bc 24 b8 05
	00 00 00	 cmp	 DWORD PTR res$25652[rsp], 0
  040ae	74 05		 je	 SHORT $LN169@obj2ast_st
  040b0	e9 bc 1a 00 00	 jmp	 $failed$24787
$LN169@obj2ast_st:

; 4440 :                 asdl_seq_SET(body, i, value);

  040b5	8b 84 24 c0 05
	00 00		 mov	 eax, DWORD PTR i$25654[rsp]
  040bc	89 84 24 d8 05
	00 00		 mov	 DWORD PTR _asdl_i$25669[rsp], eax
  040c3	48 83 bc 24 a0
	05 00 00 00	 cmp	 QWORD PTR body$25647[rsp], 0
  040cc	74 15		 je	 SHORT $LN607@obj2ast_st
  040ce	48 63 84 24 d8
	05 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25669[rsp]
  040d6	48 8b 8c 24 a0
	05 00 00	 mov	 rcx, QWORD PTR body$25647[rsp]
  040de	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  040e1	7c 1c		 jl	 SHORT $LN608@obj2ast_st
$LN607@obj2ast_st:
  040e3	41 b8 58 11 00
	00		 mov	 r8d, 4440		; 00001158H
  040e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  040f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  040f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  040fd	33 c0		 xor	 eax, eax
$LN608@obj2ast_st:
  040ff	48 63 84 24 d8
	05 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25669[rsp]
  04107	48 8b 8c 24 a0
	05 00 00	 mov	 rcx, QWORD PTR body$25647[rsp]
  0410f	48 8b 94 24 d0
	05 00 00	 mov	 rdx, QWORD PTR value$25666[rsp]
  04117	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4441 :             }

  0411c	e9 2b ff ff ff	 jmp	 $LN171@obj2ast_st
$LN170@obj2ast_st:
$LN168@obj2ast_st:

; 4442 :             Py_CLEAR(tmp);

  04121	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04127	74 4d		 je	 SHORT $LN165@obj2ast_st
  04129	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04131	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  04136	41 b8 5a 11 00
	00		 mov	 r8d, 4442		; 0000115aH
  0413c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0414a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0414f	85 c0		 test	 eax, eax
  04151	75 23		 jne	 SHORT $LN165@obj2ast_st
  04153	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04158	48 89 84 24 e0
	05 00 00	 mov	 QWORD PTR _py_tmp$25675[rsp], rax
  04160	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  04169	48 8b 8c 24 e0
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$25675[rsp]
  04171	e8 00 00 00 00	 call	 _Py_DecRef
$LN165@obj2ast_st:
  04176	33 c0		 xor	 eax, eax
  04178	85 c0		 test	 eax, eax
  0417a	75 a5		 jne	 SHORT $LN168@obj2ast_st

; 4443 :         } else {

  0417c	eb 1d		 jmp	 SHORT $LN164@obj2ast_st
$LN176@obj2ast_st:

; 4444 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Try");

  0417e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@HNJFAAMH@required?5field?5?$CCbody?$CC?5missing?5fr@
  04185	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0418c	e8 00 00 00 00	 call	 PyErr_SetString

; 4445 :             return 1;

  04191	b8 01 00 00 00	 mov	 eax, 1
  04196	e9 f3 19 00 00	 jmp	 $LN573@obj2ast_st
$LN164@obj2ast_st:

; 4446 :         }
; 4447 :         if (_PyObject_HasAttrId(obj, &PyId_handlers)) {

  0419b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_handlers
  041a0	8b c0		 mov	 eax, eax
  041a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  041a8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  041b1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  041b5	48 8b d0	 mov	 rdx, rax
  041b8	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  041c0	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  041c5	85 c0		 test	 eax, eax
  041c7	0f 84 f7 01 00
	00		 je	 $LN163@obj2ast_st

; 4448 :             int res;
; 4449 :             Py_ssize_t len;
; 4450 :             Py_ssize_t i;
; 4451 :             tmp = _PyObject_GetAttrId(obj, &PyId_handlers);

  041cd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_handlers
  041d2	8b c0		 mov	 eax, eax
  041d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  041da	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  041e3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  041e7	48 8b d0	 mov	 rdx, rax
  041ea	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  041f2	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  041f7	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4452 :             if (tmp == NULL) goto failed;

  041fc	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04202	75 05		 jne	 SHORT $LN162@obj2ast_st
  04204	e9 68 19 00 00	 jmp	 $failed$24787
$LN162@obj2ast_st:

; 4453 :             if (!PyList_Check(tmp)) {

  04209	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0420e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04212	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  04218	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0421d	85 c0		 test	 eax, eax
  0421f	75 25		 jne	 SHORT $LN161@obj2ast_st

; 4454 :                 PyErr_Format(PyExc_TypeError, "Try field \"handlers\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  04221	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04226	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0422a	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0422e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@OJKLHJOP@Try?5field?5?$CChandlers?$CC?5must?5be?5a?5l@
  04235	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0423c	e8 00 00 00 00	 call	 PyErr_Format

; 4455 :                 goto failed;

  04241	e9 2b 19 00 00	 jmp	 $failed$24787
$LN161@obj2ast_st:

; 4456 :             }
; 4457 :             len = PyList_GET_SIZE(tmp);

  04246	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0424b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0424f	48 89 84 24 f8
	05 00 00	 mov	 QWORD PTR len$25683[rsp], rax

; 4458 :             handlers = asdl_seq_new(len, arena);

  04257	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  0425f	48 8b 8c 24 f8
	05 00 00	 mov	 rcx, QWORD PTR len$25683[rsp]
  04267	e8 00 00 00 00	 call	 asdl_seq_new
  0426c	48 89 84 24 a8
	05 00 00	 mov	 QWORD PTR handlers$25648[rsp], rax

; 4459 :             if (handlers == NULL) goto failed;

  04274	48 83 bc 24 a8
	05 00 00 00	 cmp	 QWORD PTR handlers$25648[rsp], 0
  0427d	75 05		 jne	 SHORT $LN160@obj2ast_st
  0427f	e9 ed 18 00 00	 jmp	 $failed$24787
$LN160@obj2ast_st:

; 4460 :             for (i = 0; i < len; i++) {

  04284	48 c7 84 24 f0
	05 00 00 00 00
	00 00		 mov	 QWORD PTR i$25684[rsp], 0
  04290	eb 13		 jmp	 SHORT $LN159@obj2ast_st
$LN158@obj2ast_st:
  04292	48 8b 84 24 f0
	05 00 00	 mov	 rax, QWORD PTR i$25684[rsp]
  0429a	48 ff c0	 inc	 rax
  0429d	48 89 84 24 f0
	05 00 00	 mov	 QWORD PTR i$25684[rsp], rax
$LN159@obj2ast_st:
  042a5	48 8b 84 24 f8
	05 00 00	 mov	 rax, QWORD PTR len$25683[rsp]
  042ad	48 39 84 24 f0
	05 00 00	 cmp	 QWORD PTR i$25684[rsp], rax
  042b5	0f 8d ac 00 00
	00		 jge	 $LN157@obj2ast_st

; 4461 :                 excepthandler_ty value;
; 4462 :                 res = obj2ast_excepthandler(PyList_GET_ITEM(tmp, i), &value, arena);

  042bb	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  042c0	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  042c4	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  042cc	48 8d 94 24 00
	06 00 00	 lea	 rdx, QWORD PTR value$25696[rsp]
  042d4	48 8b 8c 24 f0
	05 00 00	 mov	 rcx, QWORD PTR i$25684[rsp]
  042dc	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  042e0	e8 00 00 00 00	 call	 obj2ast_excepthandler
  042e5	89 84 24 e8 05
	00 00		 mov	 DWORD PTR res$25682[rsp], eax

; 4463 :                 if (res != 0) goto failed;

  042ec	83 bc 24 e8 05
	00 00 00	 cmp	 DWORD PTR res$25682[rsp], 0
  042f4	74 05		 je	 SHORT $LN156@obj2ast_st
  042f6	e9 76 18 00 00	 jmp	 $failed$24787
$LN156@obj2ast_st:

; 4464 :                 asdl_seq_SET(handlers, i, value);

  042fb	8b 84 24 f0 05
	00 00		 mov	 eax, DWORD PTR i$25684[rsp]
  04302	89 84 24 08 06
	00 00		 mov	 DWORD PTR _asdl_i$25699[rsp], eax
  04309	48 83 bc 24 a8
	05 00 00 00	 cmp	 QWORD PTR handlers$25648[rsp], 0
  04312	74 15		 je	 SHORT $LN609@obj2ast_st
  04314	48 63 84 24 08
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25699[rsp]
  0431c	48 8b 8c 24 a8
	05 00 00	 mov	 rcx, QWORD PTR handlers$25648[rsp]
  04324	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  04327	7c 1c		 jl	 SHORT $LN610@obj2ast_st
$LN609@obj2ast_st:
  04329	41 b8 70 11 00
	00		 mov	 r8d, 4464		; 00001170H
  0432f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  04336	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@EPGKLLPF@?$AA?$CI?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr@
  0433d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  04343	33 c0		 xor	 eax, eax
$LN610@obj2ast_st:
  04345	48 63 84 24 08
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25699[rsp]
  0434d	48 8b 8c 24 a8
	05 00 00	 mov	 rcx, QWORD PTR handlers$25648[rsp]
  04355	48 8b 94 24 00
	06 00 00	 mov	 rdx, QWORD PTR value$25696[rsp]
  0435d	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4465 :             }

  04362	e9 2b ff ff ff	 jmp	 $LN158@obj2ast_st
$LN157@obj2ast_st:
$LN155@obj2ast_st:

; 4466 :             Py_CLEAR(tmp);

  04367	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0436d	74 4d		 je	 SHORT $LN152@obj2ast_st
  0436f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04377	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  0437c	41 b8 72 11 00
	00		 mov	 r8d, 4466		; 00001172H
  04382	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04389	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  04390	e8 00 00 00 00	 call	 _PyParallel_Guard
  04395	85 c0		 test	 eax, eax
  04397	75 23		 jne	 SHORT $LN152@obj2ast_st
  04399	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0439e	48 89 84 24 10
	06 00 00	 mov	 QWORD PTR _py_tmp$25706[rsp], rax
  043a6	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  043af	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$25706[rsp]
  043b7	e8 00 00 00 00	 call	 _Py_DecRef
$LN152@obj2ast_st:
  043bc	33 c0		 xor	 eax, eax
  043be	85 c0		 test	 eax, eax
  043c0	75 a5		 jne	 SHORT $LN155@obj2ast_st

; 4467 :         } else {

  043c2	eb 1d		 jmp	 SHORT $LN151@obj2ast_st
$LN163@obj2ast_st:

; 4468 :             PyErr_SetString(PyExc_TypeError, "required field \"handlers\" missing from Try");

  043c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@KPJIMCMF@required?5field?5?$CChandlers?$CC?5missin@
  043cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  043d2	e8 00 00 00 00	 call	 PyErr_SetString

; 4469 :             return 1;

  043d7	b8 01 00 00 00	 mov	 eax, 1
  043dc	e9 ad 17 00 00	 jmp	 $LN573@obj2ast_st
$LN151@obj2ast_st:

; 4470 :         }
; 4471 :         if (_PyObject_HasAttrId(obj, &PyId_orelse)) {

  043e1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  043e6	8b c0		 mov	 eax, eax
  043e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  043ee	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  043f7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  043fb	48 8b d0	 mov	 rdx, rax
  043fe	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04406	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0440b	85 c0		 test	 eax, eax
  0440d	0f 84 f7 01 00
	00		 je	 $LN150@obj2ast_st

; 4472 :             int res;
; 4473 :             Py_ssize_t len;
; 4474 :             Py_ssize_t i;
; 4475 :             tmp = _PyObject_GetAttrId(obj, &PyId_orelse);

  04413	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  04418	8b c0		 mov	 eax, eax
  0441a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04420	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04429	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0442d	48 8b d0	 mov	 rdx, rax
  04430	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04438	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0443d	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4476 :             if (tmp == NULL) goto failed;

  04442	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04448	75 05		 jne	 SHORT $LN149@obj2ast_st
  0444a	e9 22 17 00 00	 jmp	 $failed$24787
$LN149@obj2ast_st:

; 4477 :             if (!PyList_Check(tmp)) {

  0444f	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04454	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04458	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0445e	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  04463	85 c0		 test	 eax, eax
  04465	75 25		 jne	 SHORT $LN148@obj2ast_st

; 4478 :                 PyErr_Format(PyExc_TypeError, "Try field \"orelse\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  04467	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0446c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04470	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  04474	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@PCPJJJJH@Try?5field?5?$CCorelse?$CC?5must?5be?5a?5lis@
  0447b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  04482	e8 00 00 00 00	 call	 PyErr_Format

; 4479 :                 goto failed;

  04487	e9 e5 16 00 00	 jmp	 $failed$24787
$LN148@obj2ast_st:

; 4480 :             }
; 4481 :             len = PyList_GET_SIZE(tmp);

  0448c	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04491	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  04495	48 89 84 24 28
	06 00 00	 mov	 QWORD PTR len$25714[rsp], rax

; 4482 :             orelse = asdl_seq_new(len, arena);

  0449d	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  044a5	48 8b 8c 24 28
	06 00 00	 mov	 rcx, QWORD PTR len$25714[rsp]
  044ad	e8 00 00 00 00	 call	 asdl_seq_new
  044b2	48 89 84 24 b0
	05 00 00	 mov	 QWORD PTR orelse$25649[rsp], rax

; 4483 :             if (orelse == NULL) goto failed;

  044ba	48 83 bc 24 b0
	05 00 00 00	 cmp	 QWORD PTR orelse$25649[rsp], 0
  044c3	75 05		 jne	 SHORT $LN147@obj2ast_st
  044c5	e9 a7 16 00 00	 jmp	 $failed$24787
$LN147@obj2ast_st:

; 4484 :             for (i = 0; i < len; i++) {

  044ca	48 c7 84 24 20
	06 00 00 00 00
	00 00		 mov	 QWORD PTR i$25715[rsp], 0
  044d6	eb 13		 jmp	 SHORT $LN146@obj2ast_st
$LN145@obj2ast_st:
  044d8	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR i$25715[rsp]
  044e0	48 ff c0	 inc	 rax
  044e3	48 89 84 24 20
	06 00 00	 mov	 QWORD PTR i$25715[rsp], rax
$LN146@obj2ast_st:
  044eb	48 8b 84 24 28
	06 00 00	 mov	 rax, QWORD PTR len$25714[rsp]
  044f3	48 39 84 24 20
	06 00 00	 cmp	 QWORD PTR i$25715[rsp], rax
  044fb	0f 8d ac 00 00
	00		 jge	 $LN144@obj2ast_st

; 4485 :                 stmt_ty value;
; 4486 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  04501	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04506	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0450a	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04512	48 8d 94 24 30
	06 00 00	 lea	 rdx, QWORD PTR value$25727[rsp]
  0451a	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR i$25715[rsp]
  04522	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  04526	e8 00 00 00 00	 call	 obj2ast_stmt
  0452b	89 84 24 18 06
	00 00		 mov	 DWORD PTR res$25713[rsp], eax

; 4487 :                 if (res != 0) goto failed;

  04532	83 bc 24 18 06
	00 00 00	 cmp	 DWORD PTR res$25713[rsp], 0
  0453a	74 05		 je	 SHORT $LN143@obj2ast_st
  0453c	e9 30 16 00 00	 jmp	 $failed$24787
$LN143@obj2ast_st:

; 4488 :                 asdl_seq_SET(orelse, i, value);

  04541	8b 84 24 20 06
	00 00		 mov	 eax, DWORD PTR i$25715[rsp]
  04548	89 84 24 38 06
	00 00		 mov	 DWORD PTR _asdl_i$25730[rsp], eax
  0454f	48 83 bc 24 b0
	05 00 00 00	 cmp	 QWORD PTR orelse$25649[rsp], 0
  04558	74 15		 je	 SHORT $LN611@obj2ast_st
  0455a	48 63 84 24 38
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25730[rsp]
  04562	48 8b 8c 24 b0
	05 00 00	 mov	 rcx, QWORD PTR orelse$25649[rsp]
  0456a	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  0456d	7c 1c		 jl	 SHORT $LN612@obj2ast_st
$LN611@obj2ast_st:
  0456f	41 b8 88 11 00
	00		 mov	 r8d, 4488		; 00001188H
  04575	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  0457c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@PNODFBDF@?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAo?$AAr?$AAe?$AAl?$AAs?$AAe?$AA?$CJ?$AA?9?$AA?$DO@
  04583	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  04589	33 c0		 xor	 eax, eax
$LN612@obj2ast_st:
  0458b	48 63 84 24 38
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25730[rsp]
  04593	48 8b 8c 24 b0
	05 00 00	 mov	 rcx, QWORD PTR orelse$25649[rsp]
  0459b	48 8b 94 24 30
	06 00 00	 mov	 rdx, QWORD PTR value$25727[rsp]
  045a3	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4489 :             }

  045a8	e9 2b ff ff ff	 jmp	 $LN145@obj2ast_st
$LN144@obj2ast_st:
$LN142@obj2ast_st:

; 4490 :             Py_CLEAR(tmp);

  045ad	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  045b3	74 4d		 je	 SHORT $LN139@obj2ast_st
  045b5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  045bd	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  045c2	41 b8 8a 11 00
	00		 mov	 r8d, 4490		; 0000118aH
  045c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  045cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  045d6	e8 00 00 00 00	 call	 _PyParallel_Guard
  045db	85 c0		 test	 eax, eax
  045dd	75 23		 jne	 SHORT $LN139@obj2ast_st
  045df	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  045e4	48 89 84 24 40
	06 00 00	 mov	 QWORD PTR _py_tmp$25736[rsp], rax
  045ec	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  045f5	48 8b 8c 24 40
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$25736[rsp]
  045fd	e8 00 00 00 00	 call	 _Py_DecRef
$LN139@obj2ast_st:
  04602	33 c0		 xor	 eax, eax
  04604	85 c0		 test	 eax, eax
  04606	75 a5		 jne	 SHORT $LN142@obj2ast_st

; 4491 :         } else {

  04608	eb 1d		 jmp	 SHORT $LN138@obj2ast_st
$LN150@obj2ast_st:

; 4492 :             PyErr_SetString(PyExc_TypeError, "required field \"orelse\" missing from Try");

  0460a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HAGINNCN@required?5field?5?$CCorelse?$CC?5missing?5@
  04611	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  04618	e8 00 00 00 00	 call	 PyErr_SetString

; 4493 :             return 1;

  0461d	b8 01 00 00 00	 mov	 eax, 1
  04622	e9 67 15 00 00	 jmp	 $LN573@obj2ast_st
$LN138@obj2ast_st:

; 4494 :         }
; 4495 :         if (_PyObject_HasAttrId(obj, &PyId_finalbody)) {

  04627	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_finalbody
  0462c	8b c0		 mov	 eax, eax
  0462e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04634	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0463d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04641	48 8b d0	 mov	 rdx, rax
  04644	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0464c	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  04651	85 c0		 test	 eax, eax
  04653	0f 84 f7 01 00
	00		 je	 $LN137@obj2ast_st

; 4496 :             int res;
; 4497 :             Py_ssize_t len;
; 4498 :             Py_ssize_t i;
; 4499 :             tmp = _PyObject_GetAttrId(obj, &PyId_finalbody);

  04659	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_finalbody
  0465e	8b c0		 mov	 eax, eax
  04660	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04666	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0466f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04673	48 8b d0	 mov	 rdx, rax
  04676	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0467e	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04683	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4500 :             if (tmp == NULL) goto failed;

  04688	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0468e	75 05		 jne	 SHORT $LN136@obj2ast_st
  04690	e9 dc 14 00 00	 jmp	 $failed$24787
$LN136@obj2ast_st:

; 4501 :             if (!PyList_Check(tmp)) {

  04695	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0469a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0469e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  046a4	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  046a9	85 c0		 test	 eax, eax
  046ab	75 25		 jne	 SHORT $LN135@obj2ast_st

; 4502 :                 PyErr_Format(PyExc_TypeError, "Try field \"finalbody\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  046ad	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  046b2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  046b6	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  046ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@LHHDMHOG@Try?5field?5?$CCfinalbody?$CC?5must?5be?5a?5@
  046c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  046c8	e8 00 00 00 00	 call	 PyErr_Format

; 4503 :                 goto failed;

  046cd	e9 9f 14 00 00	 jmp	 $failed$24787
$LN135@obj2ast_st:

; 4504 :             }
; 4505 :             len = PyList_GET_SIZE(tmp);

  046d2	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  046d7	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  046db	48 89 84 24 58
	06 00 00	 mov	 QWORD PTR len$25744[rsp], rax

; 4506 :             finalbody = asdl_seq_new(len, arena);

  046e3	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  046eb	48 8b 8c 24 58
	06 00 00	 mov	 rcx, QWORD PTR len$25744[rsp]
  046f3	e8 00 00 00 00	 call	 asdl_seq_new
  046f8	48 89 84 24 98
	05 00 00	 mov	 QWORD PTR finalbody$25650[rsp], rax

; 4507 :             if (finalbody == NULL) goto failed;

  04700	48 83 bc 24 98
	05 00 00 00	 cmp	 QWORD PTR finalbody$25650[rsp], 0
  04709	75 05		 jne	 SHORT $LN134@obj2ast_st
  0470b	e9 61 14 00 00	 jmp	 $failed$24787
$LN134@obj2ast_st:

; 4508 :             for (i = 0; i < len; i++) {

  04710	48 c7 84 24 50
	06 00 00 00 00
	00 00		 mov	 QWORD PTR i$25745[rsp], 0
  0471c	eb 13		 jmp	 SHORT $LN133@obj2ast_st
$LN132@obj2ast_st:
  0471e	48 8b 84 24 50
	06 00 00	 mov	 rax, QWORD PTR i$25745[rsp]
  04726	48 ff c0	 inc	 rax
  04729	48 89 84 24 50
	06 00 00	 mov	 QWORD PTR i$25745[rsp], rax
$LN133@obj2ast_st:
  04731	48 8b 84 24 58
	06 00 00	 mov	 rax, QWORD PTR len$25744[rsp]
  04739	48 39 84 24 50
	06 00 00	 cmp	 QWORD PTR i$25745[rsp], rax
  04741	0f 8d ac 00 00
	00		 jge	 $LN131@obj2ast_st

; 4509 :                 stmt_ty value;
; 4510 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  04747	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0474c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  04750	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04758	48 8d 94 24 60
	06 00 00	 lea	 rdx, QWORD PTR value$25757[rsp]
  04760	48 8b 8c 24 50
	06 00 00	 mov	 rcx, QWORD PTR i$25745[rsp]
  04768	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0476c	e8 00 00 00 00	 call	 obj2ast_stmt
  04771	89 84 24 48 06
	00 00		 mov	 DWORD PTR res$25743[rsp], eax

; 4511 :                 if (res != 0) goto failed;

  04778	83 bc 24 48 06
	00 00 00	 cmp	 DWORD PTR res$25743[rsp], 0
  04780	74 05		 je	 SHORT $LN130@obj2ast_st
  04782	e9 ea 13 00 00	 jmp	 $failed$24787
$LN130@obj2ast_st:

; 4512 :                 asdl_seq_SET(finalbody, i, value);

  04787	8b 84 24 50 06
	00 00		 mov	 eax, DWORD PTR i$25745[rsp]
  0478e	89 84 24 68 06
	00 00		 mov	 DWORD PTR _asdl_i$25760[rsp], eax
  04795	48 83 bc 24 98
	05 00 00 00	 cmp	 QWORD PTR finalbody$25650[rsp], 0
  0479e	74 15		 je	 SHORT $LN613@obj2ast_st
  047a0	48 63 84 24 68
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25760[rsp]
  047a8	48 8b 8c 24 98
	05 00 00	 mov	 rcx, QWORD PTR finalbody$25650[rsp]
  047b0	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  047b3	7c 1c		 jl	 SHORT $LN614@obj2ast_st
$LN613@obj2ast_st:
  047b5	41 b8 a0 11 00
	00		 mov	 r8d, 4512		; 000011a0H
  047bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  047c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FG@KBNINKEB@?$AA?$CI?$AAf?$AAi?$AAn?$AAa?$AAl?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAf?$AAi?$AAn?$AAa?$AAl?$AAb@
  047c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  047cf	33 c0		 xor	 eax, eax
$LN614@obj2ast_st:
  047d1	48 63 84 24 68
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25760[rsp]
  047d9	48 8b 8c 24 98
	05 00 00	 mov	 rcx, QWORD PTR finalbody$25650[rsp]
  047e1	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR value$25757[rsp]
  047e9	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4513 :             }

  047ee	e9 2b ff ff ff	 jmp	 $LN132@obj2ast_st
$LN131@obj2ast_st:
$LN129@obj2ast_st:

; 4514 :             Py_CLEAR(tmp);

  047f3	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  047f9	74 4d		 je	 SHORT $LN126@obj2ast_st
  047fb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04803	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  04808	41 b8 a2 11 00
	00		 mov	 r8d, 4514		; 000011a2H
  0480e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04815	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0481c	e8 00 00 00 00	 call	 _PyParallel_Guard
  04821	85 c0		 test	 eax, eax
  04823	75 23		 jne	 SHORT $LN126@obj2ast_st
  04825	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0482a	48 89 84 24 70
	06 00 00	 mov	 QWORD PTR _py_tmp$25767[rsp], rax
  04832	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0483b	48 8b 8c 24 70
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$25767[rsp]
  04843	e8 00 00 00 00	 call	 _Py_DecRef
$LN126@obj2ast_st:
  04848	33 c0		 xor	 eax, eax
  0484a	85 c0		 test	 eax, eax
  0484c	75 a5		 jne	 SHORT $LN129@obj2ast_st

; 4515 :         } else {

  0484e	eb 1d		 jmp	 SHORT $LN125@obj2ast_st
$LN137@obj2ast_st:

; 4516 :             PyErr_SetString(PyExc_TypeError, "required field \"finalbody\" missing from Try");

  04850	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@LKCDFMOJ@required?5field?5?$CCfinalbody?$CC?5missi@
  04857	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0485e	e8 00 00 00 00	 call	 PyErr_SetString

; 4517 :             return 1;

  04863	b8 01 00 00 00	 mov	 eax, 1
  04868	e9 21 13 00 00	 jmp	 $LN573@obj2ast_st
$LN125@obj2ast_st:

; 4518 :         }
; 4519 :         *out = Try(body, handlers, orelse, finalbody, lineno, col_offset,
; 4520 :                    arena);

  0486d	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  04875	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0487a	8b 44 24 60	 mov	 eax, DWORD PTR col_offset$[rsp]
  0487e	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  04882	8b 44 24 50	 mov	 eax, DWORD PTR lineno$[rsp]
  04886	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0488a	4c 8b 8c 24 98
	05 00 00	 mov	 r9, QWORD PTR finalbody$25650[rsp]
  04892	4c 8b 84 24 b0
	05 00 00	 mov	 r8, QWORD PTR orelse$25649[rsp]
  0489a	48 8b 94 24 a8
	05 00 00	 mov	 rdx, QWORD PTR handlers$25648[rsp]
  048a2	48 8b 8c 24 a0
	05 00 00	 mov	 rcx, QWORD PTR body$25647[rsp]
  048aa	e8 00 00 00 00	 call	 _Py_Try
  048af	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  048b7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4521 :         if (*out == NULL) goto failed;

  048ba	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  048c2	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  048c6	75 05		 jne	 SHORT $LN124@obj2ast_st
  048c8	e9 a4 12 00 00	 jmp	 $failed$24787
$LN124@obj2ast_st:

; 4522 :         return 0;

  048cd	33 c0		 xor	 eax, eax
  048cf	e9 ba 12 00 00	 jmp	 $LN573@obj2ast_st
$LN177@obj2ast_st:

; 4523 :     }
; 4524 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Assert_type);

  048d4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Assert_type
  048db	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  048e3	e8 00 00 00 00	 call	 PyObject_IsInstance
  048e8	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4525 :     if (isinstance == -1) {

  048ec	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  048f1	75 0a		 jne	 SHORT $LN123@obj2ast_st

; 4526 :         return 1;

  048f3	b8 01 00 00 00	 mov	 eax, 1
  048f8	e9 91 12 00 00	 jmp	 $LN573@obj2ast_st
$LN123@obj2ast_st:

; 4527 :     }
; 4528 :     if (isinstance) {

  048fd	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  04902	0f 84 70 02 00
	00		 je	 $LN122@obj2ast_st

; 4529 :         expr_ty test;
; 4530 :         expr_ty msg;
; 4531 : 
; 4532 :         if (_PyObject_HasAttrId(obj, &PyId_test)) {

  04908	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  0490d	8b c0		 mov	 eax, eax
  0490f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04915	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0491e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04922	48 8b d0	 mov	 rdx, rax
  04925	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0492d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  04932	85 c0		 test	 eax, eax
  04934	0f 84 c9 00 00
	00		 je	 $LN121@obj2ast_st

; 4533 :             int res;
; 4534 :             tmp = _PyObject_GetAttrId(obj, &PyId_test);

  0493a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  0493f	8b c0		 mov	 eax, eax
  04941	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04947	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04950	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04954	48 8b d0	 mov	 rdx, rax
  04957	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0495f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04964	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4535 :             if (tmp == NULL) goto failed;

  04969	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0496f	75 05		 jne	 SHORT $LN120@obj2ast_st
  04971	e9 fb 11 00 00	 jmp	 $failed$24787
$LN120@obj2ast_st:

; 4536 :             res = obj2ast_expr(tmp, &test, arena);

  04976	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0497e	48 8d 94 24 80
	06 00 00	 lea	 rdx, QWORD PTR test$25778[rsp]
  04986	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  0498b	e8 00 00 00 00	 call	 obj2ast_expr
  04990	89 84 24 88 06
	00 00		 mov	 DWORD PTR res$25781[rsp], eax

; 4537 :             if (res != 0) goto failed;

  04997	83 bc 24 88 06
	00 00 00	 cmp	 DWORD PTR res$25781[rsp], 0
  0499f	74 05		 je	 SHORT $LN119@obj2ast_st
  049a1	e9 cb 11 00 00	 jmp	 $failed$24787
$LN119@obj2ast_st:
$LN118@obj2ast_st:

; 4538 :             Py_CLEAR(tmp);

  049a6	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  049ac	74 4d		 je	 SHORT $LN115@obj2ast_st
  049ae	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  049b6	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  049bb	41 b8 ba 11 00
	00		 mov	 r8d, 4538		; 000011baH
  049c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  049c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  049cf	e8 00 00 00 00	 call	 _PyParallel_Guard
  049d4	85 c0		 test	 eax, eax
  049d6	75 23		 jne	 SHORT $LN115@obj2ast_st
  049d8	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  049dd	48 89 84 24 90
	06 00 00	 mov	 QWORD PTR _py_tmp$25789[rsp], rax
  049e5	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  049ee	48 8b 8c 24 90
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$25789[rsp]
  049f6	e8 00 00 00 00	 call	 _Py_DecRef
$LN115@obj2ast_st:
  049fb	33 c0		 xor	 eax, eax
  049fd	85 c0		 test	 eax, eax
  049ff	75 a5		 jne	 SHORT $LN118@obj2ast_st

; 4539 :         } else {

  04a01	eb 1d		 jmp	 SHORT $LN114@obj2ast_st
$LN121@obj2ast_st:

; 4540 :             PyErr_SetString(PyExc_TypeError, "required field \"test\" missing from Assert");

  04a03	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EMFFOLOL@required?5field?5?$CCtest?$CC?5missing?5fr@
  04a0a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  04a11	e8 00 00 00 00	 call	 PyErr_SetString

; 4541 :             return 1;

  04a16	b8 01 00 00 00	 mov	 eax, 1
  04a1b	e9 6e 11 00 00	 jmp	 $LN573@obj2ast_st
$LN114@obj2ast_st:

; 4542 :         }
; 4543 :         if (_PyObject_HasAttrId(obj, &PyId_msg)) {

  04a20	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_msg
  04a25	8b c0		 mov	 eax, eax
  04a27	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04a2d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04a36	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04a3a	48 8b d0	 mov	 rdx, rax
  04a3d	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04a45	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  04a4a	85 c0		 test	 eax, eax
  04a4c	0f 84 c9 00 00
	00		 je	 $LN113@obj2ast_st

; 4544 :             int res;
; 4545 :             tmp = _PyObject_GetAttrId(obj, &PyId_msg);

  04a52	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_msg
  04a57	8b c0		 mov	 eax, eax
  04a59	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04a5f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04a68	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04a6c	48 8b d0	 mov	 rdx, rax
  04a6f	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04a77	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04a7c	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4546 :             if (tmp == NULL) goto failed;

  04a81	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04a87	75 05		 jne	 SHORT $LN112@obj2ast_st
  04a89	e9 e3 10 00 00	 jmp	 $failed$24787
$LN112@obj2ast_st:

; 4547 :             res = obj2ast_expr(tmp, &msg, arena);

  04a8e	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04a96	48 8d 94 24 78
	06 00 00	 lea	 rdx, QWORD PTR msg$25779[rsp]
  04a9e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  04aa3	e8 00 00 00 00	 call	 obj2ast_expr
  04aa8	89 84 24 98 06
	00 00		 mov	 DWORD PTR res$25796[rsp], eax

; 4548 :             if (res != 0) goto failed;

  04aaf	83 bc 24 98 06
	00 00 00	 cmp	 DWORD PTR res$25796[rsp], 0
  04ab7	74 05		 je	 SHORT $LN111@obj2ast_st
  04ab9	e9 b3 10 00 00	 jmp	 $failed$24787
$LN111@obj2ast_st:
$LN110@obj2ast_st:

; 4549 :             Py_CLEAR(tmp);

  04abe	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04ac4	74 4d		 je	 SHORT $LN107@obj2ast_st
  04ac6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04ace	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  04ad3	41 b8 c5 11 00
	00		 mov	 r8d, 4549		; 000011c5H
  04ad9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04ae0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  04ae7	e8 00 00 00 00	 call	 _PyParallel_Guard
  04aec	85 c0		 test	 eax, eax
  04aee	75 23		 jne	 SHORT $LN107@obj2ast_st
  04af0	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04af5	48 89 84 24 a0
	06 00 00	 mov	 QWORD PTR _py_tmp$25804[rsp], rax
  04afd	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  04b06	48 8b 8c 24 a0
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$25804[rsp]
  04b0e	e8 00 00 00 00	 call	 _Py_DecRef
$LN107@obj2ast_st:
  04b13	33 c0		 xor	 eax, eax
  04b15	85 c0		 test	 eax, eax
  04b17	75 a5		 jne	 SHORT $LN110@obj2ast_st

; 4550 :         } else {

  04b19	eb 0c		 jmp	 SHORT $LN106@obj2ast_st
$LN113@obj2ast_st:

; 4551 :             msg = NULL;

  04b1b	48 c7 84 24 78
	06 00 00 00 00
	00 00		 mov	 QWORD PTR msg$25779[rsp], 0
$LN106@obj2ast_st:

; 4552 :         }
; 4553 :         *out = Assert(test, msg, lineno, col_offset, arena);

  04b27	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  04b2f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04b34	44 8b 4c 24 60	 mov	 r9d, DWORD PTR col_offset$[rsp]
  04b39	44 8b 44 24 50	 mov	 r8d, DWORD PTR lineno$[rsp]
  04b3e	48 8b 94 24 78
	06 00 00	 mov	 rdx, QWORD PTR msg$25779[rsp]
  04b46	48 8b 8c 24 80
	06 00 00	 mov	 rcx, QWORD PTR test$25778[rsp]
  04b4e	e8 00 00 00 00	 call	 _Py_Assert
  04b53	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  04b5b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4554 :         if (*out == NULL) goto failed;

  04b5e	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  04b66	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  04b6a	75 05		 jne	 SHORT $LN105@obj2ast_st
  04b6c	e9 00 10 00 00	 jmp	 $failed$24787
$LN105@obj2ast_st:

; 4555 :         return 0;

  04b71	33 c0		 xor	 eax, eax
  04b73	e9 16 10 00 00	 jmp	 $LN573@obj2ast_st
$LN122@obj2ast_st:

; 4556 :     }
; 4557 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Import_type);

  04b78	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Import_type
  04b7f	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04b87	e8 00 00 00 00	 call	 PyObject_IsInstance
  04b8c	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4558 :     if (isinstance == -1) {

  04b90	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  04b95	75 0a		 jne	 SHORT $LN104@obj2ast_st

; 4559 :         return 1;

  04b97	b8 01 00 00 00	 mov	 eax, 1
  04b9c	e9 ed 0f 00 00	 jmp	 $LN573@obj2ast_st
$LN104@obj2ast_st:

; 4560 :     }
; 4561 :     if (isinstance) {

  04ba1	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  04ba6	0f 84 89 02 00
	00		 je	 $LN103@obj2ast_st

; 4562 :         asdl_seq* names;
; 4563 : 
; 4564 :         if (_PyObject_HasAttrId(obj, &PyId_names)) {

  04bac	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  04bb1	8b c0		 mov	 eax, eax
  04bb3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04bb9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04bc2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04bc6	48 8b d0	 mov	 rdx, rax
  04bc9	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04bd1	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  04bd6	85 c0		 test	 eax, eax
  04bd8	0f 84 f7 01 00
	00		 je	 $LN102@obj2ast_st

; 4565 :             int res;
; 4566 :             Py_ssize_t len;
; 4567 :             Py_ssize_t i;
; 4568 :             tmp = _PyObject_GetAttrId(obj, &PyId_names);

  04bde	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  04be3	8b c0		 mov	 eax, eax
  04be5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04beb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04bf4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04bf8	48 8b d0	 mov	 rdx, rax
  04bfb	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04c03	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04c08	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4569 :             if (tmp == NULL) goto failed;

  04c0d	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04c13	75 05		 jne	 SHORT $LN101@obj2ast_st
  04c15	e9 57 0f 00 00	 jmp	 $failed$24787
$LN101@obj2ast_st:

; 4570 :             if (!PyList_Check(tmp)) {

  04c1a	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04c1f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04c23	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  04c29	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  04c2e	85 c0		 test	 eax, eax
  04c30	75 25		 jne	 SHORT $LN100@obj2ast_st

; 4571 :                 PyErr_Format(PyExc_TypeError, "Import field \"names\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  04c32	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04c37	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04c3b	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  04c3f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@JDHMGOED@Import?5field?5?$CCnames?$CC?5must?5be?5a?5l@
  04c46	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  04c4d	e8 00 00 00 00	 call	 PyErr_Format

; 4572 :                 goto failed;

  04c52	e9 1a 0f 00 00	 jmp	 $failed$24787
$LN100@obj2ast_st:

; 4573 :             }
; 4574 :             len = PyList_GET_SIZE(tmp);

  04c57	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04c5c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  04c60	48 89 84 24 c0
	06 00 00	 mov	 QWORD PTR len$25818[rsp], rax

; 4575 :             names = asdl_seq_new(len, arena);

  04c68	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  04c70	48 8b 8c 24 c0
	06 00 00	 mov	 rcx, QWORD PTR len$25818[rsp]
  04c78	e8 00 00 00 00	 call	 asdl_seq_new
  04c7d	48 89 84 24 a8
	06 00 00	 mov	 QWORD PTR names$25815[rsp], rax

; 4576 :             if (names == NULL) goto failed;

  04c85	48 83 bc 24 a8
	06 00 00 00	 cmp	 QWORD PTR names$25815[rsp], 0
  04c8e	75 05		 jne	 SHORT $LN99@obj2ast_st
  04c90	e9 dc 0e 00 00	 jmp	 $failed$24787
$LN99@obj2ast_st:

; 4577 :             for (i = 0; i < len; i++) {

  04c95	48 c7 84 24 b8
	06 00 00 00 00
	00 00		 mov	 QWORD PTR i$25819[rsp], 0
  04ca1	eb 13		 jmp	 SHORT $LN98@obj2ast_st
$LN97@obj2ast_st:
  04ca3	48 8b 84 24 b8
	06 00 00	 mov	 rax, QWORD PTR i$25819[rsp]
  04cab	48 ff c0	 inc	 rax
  04cae	48 89 84 24 b8
	06 00 00	 mov	 QWORD PTR i$25819[rsp], rax
$LN98@obj2ast_st:
  04cb6	48 8b 84 24 c0
	06 00 00	 mov	 rax, QWORD PTR len$25818[rsp]
  04cbe	48 39 84 24 b8
	06 00 00	 cmp	 QWORD PTR i$25819[rsp], rax
  04cc6	0f 8d ac 00 00
	00		 jge	 $LN96@obj2ast_st

; 4578 :                 alias_ty value;
; 4579 :                 res = obj2ast_alias(PyList_GET_ITEM(tmp, i), &value, arena);

  04ccc	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04cd1	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  04cd5	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04cdd	48 8d 94 24 c8
	06 00 00	 lea	 rdx, QWORD PTR value$25831[rsp]
  04ce5	48 8b 8c 24 b8
	06 00 00	 mov	 rcx, QWORD PTR i$25819[rsp]
  04ced	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  04cf1	e8 00 00 00 00	 call	 obj2ast_alias
  04cf6	89 84 24 b0 06
	00 00		 mov	 DWORD PTR res$25817[rsp], eax

; 4580 :                 if (res != 0) goto failed;

  04cfd	83 bc 24 b0 06
	00 00 00	 cmp	 DWORD PTR res$25817[rsp], 0
  04d05	74 05		 je	 SHORT $LN95@obj2ast_st
  04d07	e9 65 0e 00 00	 jmp	 $failed$24787
$LN95@obj2ast_st:

; 4581 :                 asdl_seq_SET(names, i, value);

  04d0c	8b 84 24 b8 06
	00 00		 mov	 eax, DWORD PTR i$25819[rsp]
  04d13	89 84 24 d0 06
	00 00		 mov	 DWORD PTR _asdl_i$25834[rsp], eax
  04d1a	48 83 bc 24 a8
	06 00 00 00	 cmp	 QWORD PTR names$25815[rsp], 0
  04d23	74 15		 je	 SHORT $LN615@obj2ast_st
  04d25	48 63 84 24 d0
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25834[rsp]
  04d2d	48 8b 8c 24 a8
	06 00 00	 mov	 rcx, QWORD PTR names$25815[rsp]
  04d35	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  04d38	7c 1c		 jl	 SHORT $LN616@obj2ast_st
$LN615@obj2ast_st:
  04d3a	41 b8 e5 11 00
	00		 mov	 r8d, 4581		; 000011e5H
  04d40	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  04d47	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@KNEALMDP@?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@
  04d4e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  04d54	33 c0		 xor	 eax, eax
$LN616@obj2ast_st:
  04d56	48 63 84 24 d0
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25834[rsp]
  04d5e	48 8b 8c 24 a8
	06 00 00	 mov	 rcx, QWORD PTR names$25815[rsp]
  04d66	48 8b 94 24 c8
	06 00 00	 mov	 rdx, QWORD PTR value$25831[rsp]
  04d6e	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4582 :             }

  04d73	e9 2b ff ff ff	 jmp	 $LN97@obj2ast_st
$LN96@obj2ast_st:
$LN94@obj2ast_st:

; 4583 :             Py_CLEAR(tmp);

  04d78	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04d7e	74 4d		 je	 SHORT $LN91@obj2ast_st
  04d80	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04d88	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  04d8d	41 b8 e7 11 00
	00		 mov	 r8d, 4583		; 000011e7H
  04d93	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04d9a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  04da1	e8 00 00 00 00	 call	 _PyParallel_Guard
  04da6	85 c0		 test	 eax, eax
  04da8	75 23		 jne	 SHORT $LN91@obj2ast_st
  04daa	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04daf	48 89 84 24 d8
	06 00 00	 mov	 QWORD PTR _py_tmp$25841[rsp], rax
  04db7	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  04dc0	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$25841[rsp]
  04dc8	e8 00 00 00 00	 call	 _Py_DecRef
$LN91@obj2ast_st:
  04dcd	33 c0		 xor	 eax, eax
  04dcf	85 c0		 test	 eax, eax
  04dd1	75 a5		 jne	 SHORT $LN94@obj2ast_st

; 4584 :         } else {

  04dd3	eb 1d		 jmp	 SHORT $LN90@obj2ast_st
$LN102@obj2ast_st:

; 4585 :             PyErr_SetString(PyExc_TypeError, "required field \"names\" missing from Import");

  04dd5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@MKOLHKCJ@required?5field?5?$CCnames?$CC?5missing?5f@
  04ddc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  04de3	e8 00 00 00 00	 call	 PyErr_SetString

; 4586 :             return 1;

  04de8	b8 01 00 00 00	 mov	 eax, 1
  04ded	e9 9c 0d 00 00	 jmp	 $LN573@obj2ast_st
$LN90@obj2ast_st:

; 4587 :         }
; 4588 :         *out = Import(names, lineno, col_offset, arena);

  04df2	4c 8b 8c 24 f0
	07 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  04dfa	44 8b 44 24 60	 mov	 r8d, DWORD PTR col_offset$[rsp]
  04dff	8b 54 24 50	 mov	 edx, DWORD PTR lineno$[rsp]
  04e03	48 8b 8c 24 a8
	06 00 00	 mov	 rcx, QWORD PTR names$25815[rsp]
  04e0b	e8 00 00 00 00	 call	 _Py_Import
  04e10	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  04e18	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4589 :         if (*out == NULL) goto failed;

  04e1b	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  04e23	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  04e27	75 05		 jne	 SHORT $LN89@obj2ast_st
  04e29	e9 43 0d 00 00	 jmp	 $failed$24787
$LN89@obj2ast_st:

; 4590 :         return 0;

  04e2e	33 c0		 xor	 eax, eax
  04e30	e9 59 0d 00 00	 jmp	 $LN573@obj2ast_st
$LN103@obj2ast_st:

; 4591 :     }
; 4592 :     isinstance = PyObject_IsInstance(obj, (PyObject*)ImportFrom_type);

  04e35	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ImportFrom_type
  04e3c	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04e44	e8 00 00 00 00	 call	 PyObject_IsInstance
  04e49	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4593 :     if (isinstance == -1) {

  04e4d	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  04e52	75 0a		 jne	 SHORT $LN88@obj2ast_st

; 4594 :         return 1;

  04e54	b8 01 00 00 00	 mov	 eax, 1
  04e59	e9 30 0d 00 00	 jmp	 $LN573@obj2ast_st
$LN88@obj2ast_st:

; 4595 :     }
; 4596 :     if (isinstance) {

  04e5e	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  04e63	0f 84 af 04 00
	00		 je	 $LN87@obj2ast_st

; 4597 :         identifier module;
; 4598 :         asdl_seq* names;
; 4599 :         int level;
; 4600 : 
; 4601 :         if (_PyObject_HasAttrId(obj, &PyId_module)) {

  04e69	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_module
  04e6e	8b c0		 mov	 eax, eax
  04e70	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04e76	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04e7f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04e83	48 8b d0	 mov	 rdx, rax
  04e86	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04e8e	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  04e93	85 c0		 test	 eax, eax
  04e95	0f 84 c9 00 00
	00		 je	 $LN86@obj2ast_st

; 4602 :             int res;
; 4603 :             tmp = _PyObject_GetAttrId(obj, &PyId_module);

  04e9b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_module
  04ea0	8b c0		 mov	 eax, eax
  04ea2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04ea8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04eb1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04eb5	48 8b d0	 mov	 rdx, rax
  04eb8	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04ec0	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04ec5	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4604 :             if (tmp == NULL) goto failed;

  04eca	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04ed0	75 05		 jne	 SHORT $LN85@obj2ast_st
  04ed2	e9 9a 0c 00 00	 jmp	 $failed$24787
$LN85@obj2ast_st:

; 4605 :             res = obj2ast_identifier(tmp, &module, arena);

  04ed7	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04edf	48 8d 94 24 f0
	06 00 00	 lea	 rdx, QWORD PTR module$25852[rsp]
  04ee7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  04eec	e8 00 00 00 00	 call	 obj2ast_identifier
  04ef1	89 84 24 f8 06
	00 00		 mov	 DWORD PTR res$25856[rsp], eax

; 4606 :             if (res != 0) goto failed;

  04ef8	83 bc 24 f8 06
	00 00 00	 cmp	 DWORD PTR res$25856[rsp], 0
  04f00	74 05		 je	 SHORT $LN84@obj2ast_st
  04f02	e9 6a 0c 00 00	 jmp	 $failed$24787
$LN84@obj2ast_st:
$LN83@obj2ast_st:

; 4607 :             Py_CLEAR(tmp);

  04f07	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04f0d	74 4d		 je	 SHORT $LN80@obj2ast_st
  04f0f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04f17	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  04f1c	41 b8 ff 11 00
	00		 mov	 r8d, 4607		; 000011ffH
  04f22	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04f29	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  04f30	e8 00 00 00 00	 call	 _PyParallel_Guard
  04f35	85 c0		 test	 eax, eax
  04f37	75 23		 jne	 SHORT $LN80@obj2ast_st
  04f39	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04f3e	48 89 84 24 00
	07 00 00	 mov	 QWORD PTR _py_tmp$25864[rsp], rax
  04f46	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  04f4f	48 8b 8c 24 00
	07 00 00	 mov	 rcx, QWORD PTR _py_tmp$25864[rsp]
  04f57	e8 00 00 00 00	 call	 _Py_DecRef
$LN80@obj2ast_st:
  04f5c	33 c0		 xor	 eax, eax
  04f5e	85 c0		 test	 eax, eax
  04f60	75 a5		 jne	 SHORT $LN83@obj2ast_st

; 4608 :         } else {

  04f62	eb 0c		 jmp	 SHORT $LN79@obj2ast_st
$LN86@obj2ast_st:

; 4609 :             module = NULL;

  04f64	48 c7 84 24 f0
	06 00 00 00 00
	00 00		 mov	 QWORD PTR module$25852[rsp], 0
$LN79@obj2ast_st:

; 4610 :         }
; 4611 :         if (_PyObject_HasAttrId(obj, &PyId_names)) {

  04f70	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  04f75	8b c0		 mov	 eax, eax
  04f77	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04f7d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04f86	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04f8a	48 8b d0	 mov	 rdx, rax
  04f8d	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04f95	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  04f9a	85 c0		 test	 eax, eax
  04f9c	0f 84 f7 01 00
	00		 je	 $LN78@obj2ast_st

; 4612 :             int res;
; 4613 :             Py_ssize_t len;
; 4614 :             Py_ssize_t i;
; 4615 :             tmp = _PyObject_GetAttrId(obj, &PyId_names);

  04fa2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  04fa7	8b c0		 mov	 eax, eax
  04fa9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04faf	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04fb8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04fbc	48 8b d0	 mov	 rdx, rax
  04fbf	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04fc7	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04fcc	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4616 :             if (tmp == NULL) goto failed;

  04fd1	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04fd7	75 05		 jne	 SHORT $LN77@obj2ast_st
  04fd9	e9 93 0b 00 00	 jmp	 $failed$24787
$LN77@obj2ast_st:

; 4617 :             if (!PyList_Check(tmp)) {

  04fde	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04fe3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04fe7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  04fed	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  04ff2	85 c0		 test	 eax, eax
  04ff4	75 25		 jne	 SHORT $LN76@obj2ast_st

; 4618 :                 PyErr_Format(PyExc_TypeError, "ImportFrom field \"names\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  04ff6	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  04ffb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04fff	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  05003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@LPEJBEJL@ImportFrom?5field?5?$CCnames?$CC?5must?5be@
  0500a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  05011	e8 00 00 00 00	 call	 PyErr_Format

; 4619 :                 goto failed;

  05016	e9 56 0b 00 00	 jmp	 $failed$24787
$LN76@obj2ast_st:

; 4620 :             }
; 4621 :             len = PyList_GET_SIZE(tmp);

  0501b	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  05020	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  05024	48 89 84 24 18
	07 00 00	 mov	 QWORD PTR len$25872[rsp], rax

; 4622 :             names = asdl_seq_new(len, arena);

  0502c	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  05034	48 8b 8c 24 18
	07 00 00	 mov	 rcx, QWORD PTR len$25872[rsp]
  0503c	e8 00 00 00 00	 call	 asdl_seq_new
  05041	48 89 84 24 e8
	06 00 00	 mov	 QWORD PTR names$25853[rsp], rax

; 4623 :             if (names == NULL) goto failed;

  05049	48 83 bc 24 e8
	06 00 00 00	 cmp	 QWORD PTR names$25853[rsp], 0
  05052	75 05		 jne	 SHORT $LN75@obj2ast_st
  05054	e9 18 0b 00 00	 jmp	 $failed$24787
$LN75@obj2ast_st:

; 4624 :             for (i = 0; i < len; i++) {

  05059	48 c7 84 24 10
	07 00 00 00 00
	00 00		 mov	 QWORD PTR i$25873[rsp], 0
  05065	eb 13		 jmp	 SHORT $LN74@obj2ast_st
$LN73@obj2ast_st:
  05067	48 8b 84 24 10
	07 00 00	 mov	 rax, QWORD PTR i$25873[rsp]
  0506f	48 ff c0	 inc	 rax
  05072	48 89 84 24 10
	07 00 00	 mov	 QWORD PTR i$25873[rsp], rax
$LN74@obj2ast_st:
  0507a	48 8b 84 24 18
	07 00 00	 mov	 rax, QWORD PTR len$25872[rsp]
  05082	48 39 84 24 10
	07 00 00	 cmp	 QWORD PTR i$25873[rsp], rax
  0508a	0f 8d ac 00 00
	00		 jge	 $LN72@obj2ast_st

; 4625 :                 alias_ty value;
; 4626 :                 res = obj2ast_alias(PyList_GET_ITEM(tmp, i), &value, arena);

  05090	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  05095	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  05099	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  050a1	48 8d 94 24 20
	07 00 00	 lea	 rdx, QWORD PTR value$25885[rsp]
  050a9	48 8b 8c 24 10
	07 00 00	 mov	 rcx, QWORD PTR i$25873[rsp]
  050b1	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  050b5	e8 00 00 00 00	 call	 obj2ast_alias
  050ba	89 84 24 08 07
	00 00		 mov	 DWORD PTR res$25871[rsp], eax

; 4627 :                 if (res != 0) goto failed;

  050c1	83 bc 24 08 07
	00 00 00	 cmp	 DWORD PTR res$25871[rsp], 0
  050c9	74 05		 je	 SHORT $LN71@obj2ast_st
  050cb	e9 a1 0a 00 00	 jmp	 $failed$24787
$LN71@obj2ast_st:

; 4628 :                 asdl_seq_SET(names, i, value);

  050d0	8b 84 24 10 07
	00 00		 mov	 eax, DWORD PTR i$25873[rsp]
  050d7	89 84 24 28 07
	00 00		 mov	 DWORD PTR _asdl_i$25888[rsp], eax
  050de	48 83 bc 24 e8
	06 00 00 00	 cmp	 QWORD PTR names$25853[rsp], 0
  050e7	74 15		 je	 SHORT $LN617@obj2ast_st
  050e9	48 63 84 24 28
	07 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25888[rsp]
  050f1	48 8b 8c 24 e8
	06 00 00	 mov	 rcx, QWORD PTR names$25853[rsp]
  050f9	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  050fc	7c 1c		 jl	 SHORT $LN618@obj2ast_st
$LN617@obj2ast_st:
  050fe	41 b8 14 12 00
	00		 mov	 r8d, 4628		; 00001214H
  05104	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  0510b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@KNEALMDP@?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@
  05112	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  05118	33 c0		 xor	 eax, eax
$LN618@obj2ast_st:
  0511a	48 63 84 24 28
	07 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25888[rsp]
  05122	48 8b 8c 24 e8
	06 00 00	 mov	 rcx, QWORD PTR names$25853[rsp]
  0512a	48 8b 94 24 20
	07 00 00	 mov	 rdx, QWORD PTR value$25885[rsp]
  05132	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4629 :             }

  05137	e9 2b ff ff ff	 jmp	 $LN73@obj2ast_st
$LN72@obj2ast_st:
$LN70@obj2ast_st:

; 4630 :             Py_CLEAR(tmp);

  0513c	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  05142	74 4d		 je	 SHORT $LN67@obj2ast_st
  05144	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0514c	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  05151	41 b8 16 12 00
	00		 mov	 r8d, 4630		; 00001216H
  05157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0515e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  05165	e8 00 00 00 00	 call	 _PyParallel_Guard
  0516a	85 c0		 test	 eax, eax
  0516c	75 23		 jne	 SHORT $LN67@obj2ast_st
  0516e	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  05173	48 89 84 24 30
	07 00 00	 mov	 QWORD PTR _py_tmp$25894[rsp], rax
  0517b	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  05184	48 8b 8c 24 30
	07 00 00	 mov	 rcx, QWORD PTR _py_tmp$25894[rsp]
  0518c	e8 00 00 00 00	 call	 _Py_DecRef
$LN67@obj2ast_st:
  05191	33 c0		 xor	 eax, eax
  05193	85 c0		 test	 eax, eax
  05195	75 a5		 jne	 SHORT $LN70@obj2ast_st

; 4631 :         } else {

  05197	eb 1d		 jmp	 SHORT $LN66@obj2ast_st
$LN78@obj2ast_st:

; 4632 :             PyErr_SetString(PyExc_TypeError, "required field \"names\" missing from ImportFrom");

  05199	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@MHDKFALC@required?5field?5?$CCnames?$CC?5missing?5f@
  051a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  051a7	e8 00 00 00 00	 call	 PyErr_SetString

; 4633 :             return 1;

  051ac	b8 01 00 00 00	 mov	 eax, 1
  051b1	e9 d8 09 00 00	 jmp	 $LN573@obj2ast_st
$LN66@obj2ast_st:

; 4634 :         }
; 4635 :         if (_PyObject_HasAttrId(obj, &PyId_level)) {

  051b6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_level
  051bb	8b c0		 mov	 eax, eax
  051bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  051c3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  051cc	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  051d0	48 8b d0	 mov	 rdx, rax
  051d3	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  051db	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  051e0	85 c0		 test	 eax, eax
  051e2	0f 84 c9 00 00
	00		 je	 $LN65@obj2ast_st

; 4636 :             int res;
; 4637 :             tmp = _PyObject_GetAttrId(obj, &PyId_level);

  051e8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_level
  051ed	8b c0		 mov	 eax, eax
  051ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  051f5	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  051fe	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  05202	48 8b d0	 mov	 rdx, rax
  05205	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0520d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  05212	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4638 :             if (tmp == NULL) goto failed;

  05217	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0521d	75 05		 jne	 SHORT $LN64@obj2ast_st
  0521f	e9 4d 09 00 00	 jmp	 $failed$24787
$LN64@obj2ast_st:

; 4639 :             res = obj2ast_int(tmp, &level, arena);

  05224	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0522c	48 8d 94 24 e0
	06 00 00	 lea	 rdx, QWORD PTR level$25854[rsp]
  05234	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  05239	e8 00 00 00 00	 call	 obj2ast_int
  0523e	89 84 24 38 07
	00 00		 mov	 DWORD PTR res$25901[rsp], eax

; 4640 :             if (res != 0) goto failed;

  05245	83 bc 24 38 07
	00 00 00	 cmp	 DWORD PTR res$25901[rsp], 0
  0524d	74 05		 je	 SHORT $LN63@obj2ast_st
  0524f	e9 1d 09 00 00	 jmp	 $failed$24787
$LN63@obj2ast_st:
$LN62@obj2ast_st:

; 4641 :             Py_CLEAR(tmp);

  05254	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0525a	74 4d		 je	 SHORT $LN59@obj2ast_st
  0525c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  05264	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  05269	41 b8 21 12 00
	00		 mov	 r8d, 4641		; 00001221H
  0526f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  05276	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0527d	e8 00 00 00 00	 call	 _PyParallel_Guard
  05282	85 c0		 test	 eax, eax
  05284	75 23		 jne	 SHORT $LN59@obj2ast_st
  05286	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0528b	48 89 84 24 40
	07 00 00	 mov	 QWORD PTR _py_tmp$25909[rsp], rax
  05293	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0529c	48 8b 8c 24 40
	07 00 00	 mov	 rcx, QWORD PTR _py_tmp$25909[rsp]
  052a4	e8 00 00 00 00	 call	 _Py_DecRef
$LN59@obj2ast_st:
  052a9	33 c0		 xor	 eax, eax
  052ab	85 c0		 test	 eax, eax
  052ad	75 a5		 jne	 SHORT $LN62@obj2ast_st

; 4642 :         } else {

  052af	eb 0b		 jmp	 SHORT $LN58@obj2ast_st
$LN65@obj2ast_st:

; 4643 :             level = 0;

  052b1	c7 84 24 e0 06
	00 00 00 00 00
	00		 mov	 DWORD PTR level$25854[rsp], 0
$LN58@obj2ast_st:

; 4644 :         }
; 4645 :         *out = ImportFrom(module, names, level, lineno, col_offset, arena);

  052bc	48 8b 84 24 f0
	07 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  052c4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  052c9	8b 44 24 60	 mov	 eax, DWORD PTR col_offset$[rsp]
  052cd	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  052d1	44 8b 4c 24 50	 mov	 r9d, DWORD PTR lineno$[rsp]
  052d6	44 8b 84 24 e0
	06 00 00	 mov	 r8d, DWORD PTR level$25854[rsp]
  052de	48 8b 94 24 e8
	06 00 00	 mov	 rdx, QWORD PTR names$25853[rsp]
  052e6	48 8b 8c 24 f0
	06 00 00	 mov	 rcx, QWORD PTR module$25852[rsp]
  052ee	e8 00 00 00 00	 call	 _Py_ImportFrom
  052f3	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  052fb	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4646 :         if (*out == NULL) goto failed;

  052fe	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  05306	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0530a	75 05		 jne	 SHORT $LN57@obj2ast_st
  0530c	e9 60 08 00 00	 jmp	 $failed$24787
$LN57@obj2ast_st:

; 4647 :         return 0;

  05311	33 c0		 xor	 eax, eax
  05313	e9 76 08 00 00	 jmp	 $LN573@obj2ast_st
$LN87@obj2ast_st:

; 4648 :     }
; 4649 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Global_type);

  05318	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Global_type
  0531f	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05327	e8 00 00 00 00	 call	 PyObject_IsInstance
  0532c	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4650 :     if (isinstance == -1) {

  05330	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  05335	75 0a		 jne	 SHORT $LN56@obj2ast_st

; 4651 :         return 1;

  05337	b8 01 00 00 00	 mov	 eax, 1
  0533c	e9 4d 08 00 00	 jmp	 $LN573@obj2ast_st
$LN56@obj2ast_st:

; 4652 :     }
; 4653 :     if (isinstance) {

  05341	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  05346	0f 84 89 02 00
	00		 je	 $LN55@obj2ast_st

; 4654 :         asdl_seq* names;
; 4655 : 
; 4656 :         if (_PyObject_HasAttrId(obj, &PyId_names)) {

  0534c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  05351	8b c0		 mov	 eax, eax
  05353	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  05359	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  05362	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  05366	48 8b d0	 mov	 rdx, rax
  05369	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05371	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  05376	85 c0		 test	 eax, eax
  05378	0f 84 f7 01 00
	00		 je	 $LN54@obj2ast_st

; 4657 :             int res;
; 4658 :             Py_ssize_t len;
; 4659 :             Py_ssize_t i;
; 4660 :             tmp = _PyObject_GetAttrId(obj, &PyId_names);

  0537e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  05383	8b c0		 mov	 eax, eax
  05385	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0538b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  05394	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  05398	48 8b d0	 mov	 rdx, rax
  0539b	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  053a3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  053a8	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4661 :             if (tmp == NULL) goto failed;

  053ad	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  053b3	75 05		 jne	 SHORT $LN53@obj2ast_st
  053b5	e9 b7 07 00 00	 jmp	 $failed$24787
$LN53@obj2ast_st:

; 4662 :             if (!PyList_Check(tmp)) {

  053ba	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  053bf	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  053c3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  053c9	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  053ce	85 c0		 test	 eax, eax
  053d0	75 25		 jne	 SHORT $LN52@obj2ast_st

; 4663 :                 PyErr_Format(PyExc_TypeError, "Global field \"names\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  053d2	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  053d7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  053db	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  053df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@HNDCGNHP@Global?5field?5?$CCnames?$CC?5must?5be?5a?5l@
  053e6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  053ed	e8 00 00 00 00	 call	 PyErr_Format

; 4664 :                 goto failed;

  053f2	e9 7a 07 00 00	 jmp	 $failed$24787
$LN52@obj2ast_st:

; 4665 :             }
; 4666 :             len = PyList_GET_SIZE(tmp);

  053f7	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  053fc	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  05400	48 89 84 24 60
	07 00 00	 mov	 QWORD PTR len$25922[rsp], rax

; 4667 :             names = asdl_seq_new(len, arena);

  05408	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  05410	48 8b 8c 24 60
	07 00 00	 mov	 rcx, QWORD PTR len$25922[rsp]
  05418	e8 00 00 00 00	 call	 asdl_seq_new
  0541d	48 89 84 24 48
	07 00 00	 mov	 QWORD PTR names$25919[rsp], rax

; 4668 :             if (names == NULL) goto failed;

  05425	48 83 bc 24 48
	07 00 00 00	 cmp	 QWORD PTR names$25919[rsp], 0
  0542e	75 05		 jne	 SHORT $LN51@obj2ast_st
  05430	e9 3c 07 00 00	 jmp	 $failed$24787
$LN51@obj2ast_st:

; 4669 :             for (i = 0; i < len; i++) {

  05435	48 c7 84 24 58
	07 00 00 00 00
	00 00		 mov	 QWORD PTR i$25923[rsp], 0
  05441	eb 13		 jmp	 SHORT $LN50@obj2ast_st
$LN49@obj2ast_st:
  05443	48 8b 84 24 58
	07 00 00	 mov	 rax, QWORD PTR i$25923[rsp]
  0544b	48 ff c0	 inc	 rax
  0544e	48 89 84 24 58
	07 00 00	 mov	 QWORD PTR i$25923[rsp], rax
$LN50@obj2ast_st:
  05456	48 8b 84 24 60
	07 00 00	 mov	 rax, QWORD PTR len$25922[rsp]
  0545e	48 39 84 24 58
	07 00 00	 cmp	 QWORD PTR i$25923[rsp], rax
  05466	0f 8d ac 00 00
	00		 jge	 $LN48@obj2ast_st

; 4670 :                 identifier value;
; 4671 :                 res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);

  0546c	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  05471	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  05475	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0547d	48 8d 94 24 68
	07 00 00	 lea	 rdx, QWORD PTR value$25935[rsp]
  05485	48 8b 8c 24 58
	07 00 00	 mov	 rcx, QWORD PTR i$25923[rsp]
  0548d	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  05491	e8 00 00 00 00	 call	 obj2ast_identifier
  05496	89 84 24 50 07
	00 00		 mov	 DWORD PTR res$25921[rsp], eax

; 4672 :                 if (res != 0) goto failed;

  0549d	83 bc 24 50 07
	00 00 00	 cmp	 DWORD PTR res$25921[rsp], 0
  054a5	74 05		 je	 SHORT $LN47@obj2ast_st
  054a7	e9 c5 06 00 00	 jmp	 $failed$24787
$LN47@obj2ast_st:

; 4673 :                 asdl_seq_SET(names, i, value);

  054ac	8b 84 24 58 07
	00 00		 mov	 eax, DWORD PTR i$25923[rsp]
  054b3	89 84 24 70 07
	00 00		 mov	 DWORD PTR _asdl_i$25938[rsp], eax
  054ba	48 83 bc 24 48
	07 00 00 00	 cmp	 QWORD PTR names$25919[rsp], 0
  054c3	74 15		 je	 SHORT $LN619@obj2ast_st
  054c5	48 63 84 24 70
	07 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25938[rsp]
  054cd	48 8b 8c 24 48
	07 00 00	 mov	 rcx, QWORD PTR names$25919[rsp]
  054d5	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  054d8	7c 1c		 jl	 SHORT $LN620@obj2ast_st
$LN619@obj2ast_st:
  054da	41 b8 41 12 00
	00		 mov	 r8d, 4673		; 00001241H
  054e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  054e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@KNEALMDP@?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@
  054ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  054f4	33 c0		 xor	 eax, eax
$LN620@obj2ast_st:
  054f6	48 63 84 24 70
	07 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25938[rsp]
  054fe	48 8b 8c 24 48
	07 00 00	 mov	 rcx, QWORD PTR names$25919[rsp]
  05506	48 8b 94 24 68
	07 00 00	 mov	 rdx, QWORD PTR value$25935[rsp]
  0550e	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4674 :             }

  05513	e9 2b ff ff ff	 jmp	 $LN49@obj2ast_st
$LN48@obj2ast_st:
$LN46@obj2ast_st:

; 4675 :             Py_CLEAR(tmp);

  05518	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0551e	74 4d		 je	 SHORT $LN43@obj2ast_st
  05520	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  05528	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  0552d	41 b8 43 12 00
	00		 mov	 r8d, 4675		; 00001243H
  05533	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0553a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  05541	e8 00 00 00 00	 call	 _PyParallel_Guard
  05546	85 c0		 test	 eax, eax
  05548	75 23		 jne	 SHORT $LN43@obj2ast_st
  0554a	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0554f	48 89 84 24 78
	07 00 00	 mov	 QWORD PTR _py_tmp$25944[rsp], rax
  05557	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  05560	48 8b 8c 24 78
	07 00 00	 mov	 rcx, QWORD PTR _py_tmp$25944[rsp]
  05568	e8 00 00 00 00	 call	 _Py_DecRef
$LN43@obj2ast_st:
  0556d	33 c0		 xor	 eax, eax
  0556f	85 c0		 test	 eax, eax
  05571	75 a5		 jne	 SHORT $LN46@obj2ast_st

; 4676 :         } else {

  05573	eb 1d		 jmp	 SHORT $LN42@obj2ast_st
$LN54@obj2ast_st:

; 4677 :             PyErr_SetString(PyExc_TypeError, "required field \"names\" missing from Global");

  05575	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@NNCJIPCP@required?5field?5?$CCnames?$CC?5missing?5f@
  0557c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  05583	e8 00 00 00 00	 call	 PyErr_SetString

; 4678 :             return 1;

  05588	b8 01 00 00 00	 mov	 eax, 1
  0558d	e9 fc 05 00 00	 jmp	 $LN573@obj2ast_st
$LN42@obj2ast_st:

; 4679 :         }
; 4680 :         *out = Global(names, lineno, col_offset, arena);

  05592	4c 8b 8c 24 f0
	07 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  0559a	44 8b 44 24 60	 mov	 r8d, DWORD PTR col_offset$[rsp]
  0559f	8b 54 24 50	 mov	 edx, DWORD PTR lineno$[rsp]
  055a3	48 8b 8c 24 48
	07 00 00	 mov	 rcx, QWORD PTR names$25919[rsp]
  055ab	e8 00 00 00 00	 call	 _Py_Global
  055b0	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  055b8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4681 :         if (*out == NULL) goto failed;

  055bb	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  055c3	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  055c7	75 05		 jne	 SHORT $LN41@obj2ast_st
  055c9	e9 a3 05 00 00	 jmp	 $failed$24787
$LN41@obj2ast_st:

; 4682 :         return 0;

  055ce	33 c0		 xor	 eax, eax
  055d0	e9 b9 05 00 00	 jmp	 $LN573@obj2ast_st
$LN55@obj2ast_st:

; 4683 :     }
; 4684 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Nonlocal_type);

  055d5	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Nonlocal_type
  055dc	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  055e4	e8 00 00 00 00	 call	 PyObject_IsInstance
  055e9	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4685 :     if (isinstance == -1) {

  055ed	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  055f2	75 0a		 jne	 SHORT $LN40@obj2ast_st

; 4686 :         return 1;

  055f4	b8 01 00 00 00	 mov	 eax, 1
  055f9	e9 90 05 00 00	 jmp	 $LN573@obj2ast_st
$LN40@obj2ast_st:

; 4687 :     }
; 4688 :     if (isinstance) {

  055fe	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  05603	0f 84 89 02 00
	00		 je	 $LN39@obj2ast_st

; 4689 :         asdl_seq* names;
; 4690 : 
; 4691 :         if (_PyObject_HasAttrId(obj, &PyId_names)) {

  05609	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  0560e	8b c0		 mov	 eax, eax
  05610	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  05616	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0561f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  05623	48 8b d0	 mov	 rdx, rax
  05626	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0562e	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  05633	85 c0		 test	 eax, eax
  05635	0f 84 f7 01 00
	00		 je	 $LN38@obj2ast_st

; 4692 :             int res;
; 4693 :             Py_ssize_t len;
; 4694 :             Py_ssize_t i;
; 4695 :             tmp = _PyObject_GetAttrId(obj, &PyId_names);

  0563b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_names
  05640	8b c0		 mov	 eax, eax
  05642	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  05648	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  05651	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  05655	48 8b d0	 mov	 rdx, rax
  05658	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05660	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  05665	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4696 :             if (tmp == NULL) goto failed;

  0566a	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  05670	75 05		 jne	 SHORT $LN37@obj2ast_st
  05672	e9 fa 04 00 00	 jmp	 $failed$24787
$LN37@obj2ast_st:

; 4697 :             if (!PyList_Check(tmp)) {

  05677	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0567c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  05680	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  05686	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0568b	85 c0		 test	 eax, eax
  0568d	75 25		 jne	 SHORT $LN36@obj2ast_st

; 4698 :                 PyErr_Format(PyExc_TypeError, "Nonlocal field \"names\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0568f	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  05694	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  05698	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0569c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@JLMFHJNN@Nonlocal?5field?5?$CCnames?$CC?5must?5be?5a@
  056a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  056aa	e8 00 00 00 00	 call	 PyErr_Format

; 4699 :                 goto failed;

  056af	e9 bd 04 00 00	 jmp	 $failed$24787
$LN36@obj2ast_st:

; 4700 :             }
; 4701 :             len = PyList_GET_SIZE(tmp);

  056b4	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  056b9	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  056bd	48 89 84 24 98
	07 00 00	 mov	 QWORD PTR len$25958[rsp], rax

; 4702 :             names = asdl_seq_new(len, arena);

  056c5	48 8b 94 24 f0
	07 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  056cd	48 8b 8c 24 98
	07 00 00	 mov	 rcx, QWORD PTR len$25958[rsp]
  056d5	e8 00 00 00 00	 call	 asdl_seq_new
  056da	48 89 84 24 80
	07 00 00	 mov	 QWORD PTR names$25955[rsp], rax

; 4703 :             if (names == NULL) goto failed;

  056e2	48 83 bc 24 80
	07 00 00 00	 cmp	 QWORD PTR names$25955[rsp], 0
  056eb	75 05		 jne	 SHORT $LN35@obj2ast_st
  056ed	e9 7f 04 00 00	 jmp	 $failed$24787
$LN35@obj2ast_st:

; 4704 :             for (i = 0; i < len; i++) {

  056f2	48 c7 84 24 90
	07 00 00 00 00
	00 00		 mov	 QWORD PTR i$25959[rsp], 0
  056fe	eb 13		 jmp	 SHORT $LN34@obj2ast_st
$LN33@obj2ast_st:
  05700	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR i$25959[rsp]
  05708	48 ff c0	 inc	 rax
  0570b	48 89 84 24 90
	07 00 00	 mov	 QWORD PTR i$25959[rsp], rax
$LN34@obj2ast_st:
  05713	48 8b 84 24 98
	07 00 00	 mov	 rax, QWORD PTR len$25958[rsp]
  0571b	48 39 84 24 90
	07 00 00	 cmp	 QWORD PTR i$25959[rsp], rax
  05723	0f 8d ac 00 00
	00		 jge	 $LN32@obj2ast_st

; 4705 :                 identifier value;
; 4706 :                 res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &value, arena);

  05729	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0572e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  05732	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0573a	48 8d 94 24 a0
	07 00 00	 lea	 rdx, QWORD PTR value$25971[rsp]
  05742	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR i$25959[rsp]
  0574a	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0574e	e8 00 00 00 00	 call	 obj2ast_identifier
  05753	89 84 24 88 07
	00 00		 mov	 DWORD PTR res$25957[rsp], eax

; 4707 :                 if (res != 0) goto failed;

  0575a	83 bc 24 88 07
	00 00 00	 cmp	 DWORD PTR res$25957[rsp], 0
  05762	74 05		 je	 SHORT $LN31@obj2ast_st
  05764	e9 08 04 00 00	 jmp	 $failed$24787
$LN31@obj2ast_st:

; 4708 :                 asdl_seq_SET(names, i, value);

  05769	8b 84 24 90 07
	00 00		 mov	 eax, DWORD PTR i$25959[rsp]
  05770	89 84 24 a8 07
	00 00		 mov	 DWORD PTR _asdl_i$25974[rsp], eax
  05777	48 83 bc 24 80
	07 00 00 00	 cmp	 QWORD PTR names$25955[rsp], 0
  05780	74 15		 je	 SHORT $LN621@obj2ast_st
  05782	48 63 84 24 a8
	07 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25974[rsp]
  0578a	48 8b 8c 24 80
	07 00 00	 mov	 rcx, QWORD PTR names$25955[rsp]
  05792	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  05795	7c 1c		 jl	 SHORT $LN622@obj2ast_st
$LN621@obj2ast_st:
  05797	41 b8 64 12 00
	00		 mov	 r8d, 4708		; 00001264H
  0579d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  057a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@KNEALMDP@?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi@
  057ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  057b1	33 c0		 xor	 eax, eax
$LN622@obj2ast_st:
  057b3	48 63 84 24 a8
	07 00 00	 movsxd	 rax, DWORD PTR _asdl_i$25974[rsp]
  057bb	48 8b 8c 24 80
	07 00 00	 mov	 rcx, QWORD PTR names$25955[rsp]
  057c3	48 8b 94 24 a0
	07 00 00	 mov	 rdx, QWORD PTR value$25971[rsp]
  057cb	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4709 :             }

  057d0	e9 2b ff ff ff	 jmp	 $LN33@obj2ast_st
$LN32@obj2ast_st:
$LN30@obj2ast_st:

; 4710 :             Py_CLEAR(tmp);

  057d5	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  057db	74 4d		 je	 SHORT $LN27@obj2ast_st
  057dd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  057e5	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  057ea	41 b8 66 12 00
	00		 mov	 r8d, 4710		; 00001266H
  057f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  057f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  057fe	e8 00 00 00 00	 call	 _PyParallel_Guard
  05803	85 c0		 test	 eax, eax
  05805	75 23		 jne	 SHORT $LN27@obj2ast_st
  05807	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0580c	48 89 84 24 b0
	07 00 00	 mov	 QWORD PTR _py_tmp$25980[rsp], rax
  05814	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0581d	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR _py_tmp$25980[rsp]
  05825	e8 00 00 00 00	 call	 _Py_DecRef
$LN27@obj2ast_st:
  0582a	33 c0		 xor	 eax, eax
  0582c	85 c0		 test	 eax, eax
  0582e	75 a5		 jne	 SHORT $LN30@obj2ast_st

; 4711 :         } else {

  05830	eb 1d		 jmp	 SHORT $LN26@obj2ast_st
$LN38@obj2ast_st:

; 4712 :             PyErr_SetString(PyExc_TypeError, "required field \"names\" missing from Nonlocal");

  05832	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@LGEEILAC@required?5field?5?$CCnames?$CC?5missing?5f@
  05839	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  05840	e8 00 00 00 00	 call	 PyErr_SetString

; 4713 :             return 1;

  05845	b8 01 00 00 00	 mov	 eax, 1
  0584a	e9 3f 03 00 00	 jmp	 $LN573@obj2ast_st
$LN26@obj2ast_st:

; 4714 :         }
; 4715 :         *out = Nonlocal(names, lineno, col_offset, arena);

  0584f	4c 8b 8c 24 f0
	07 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  05857	44 8b 44 24 60	 mov	 r8d, DWORD PTR col_offset$[rsp]
  0585c	8b 54 24 50	 mov	 edx, DWORD PTR lineno$[rsp]
  05860	48 8b 8c 24 80
	07 00 00	 mov	 rcx, QWORD PTR names$25955[rsp]
  05868	e8 00 00 00 00	 call	 _Py_Nonlocal
  0586d	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  05875	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4716 :         if (*out == NULL) goto failed;

  05878	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  05880	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  05884	75 05		 jne	 SHORT $LN25@obj2ast_st
  05886	e9 e6 02 00 00	 jmp	 $failed$24787
$LN25@obj2ast_st:

; 4717 :         return 0;

  0588b	33 c0		 xor	 eax, eax
  0588d	e9 fc 02 00 00	 jmp	 $LN573@obj2ast_st
$LN39@obj2ast_st:

; 4718 :     }
; 4719 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Expr_type);

  05892	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Expr_type
  05899	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  058a1	e8 00 00 00 00	 call	 PyObject_IsInstance
  058a6	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4720 :     if (isinstance == -1) {

  058aa	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  058af	75 0a		 jne	 SHORT $LN24@obj2ast_st

; 4721 :         return 1;

  058b1	b8 01 00 00 00	 mov	 eax, 1
  058b6	e9 d3 02 00 00	 jmp	 $LN573@obj2ast_st
$LN24@obj2ast_st:

; 4722 :     }
; 4723 :     if (isinstance) {

  058bb	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  058c0	0f 84 5b 01 00
	00		 je	 $LN23@obj2ast_st

; 4724 :         expr_ty value;
; 4725 : 
; 4726 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  058c6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  058cb	8b c0		 mov	 eax, eax
  058cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  058d3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  058dc	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  058e0	48 8b d0	 mov	 rdx, rax
  058e3	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  058eb	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  058f0	85 c0		 test	 eax, eax
  058f2	0f 84 c9 00 00
	00		 je	 $LN22@obj2ast_st

; 4727 :             int res;
; 4728 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  058f8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  058fd	8b c0		 mov	 eax, eax
  058ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  05905	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0590e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  05912	48 8b d0	 mov	 rdx, rax
  05915	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0591d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  05922	48 89 44 24 58	 mov	 QWORD PTR tmp$[rsp], rax

; 4729 :             if (tmp == NULL) goto failed;

  05927	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0592d	75 05		 jne	 SHORT $LN21@obj2ast_st
  0592f	e9 3d 02 00 00	 jmp	 $failed$24787
$LN21@obj2ast_st:

; 4730 :             res = obj2ast_expr(tmp, &value, arena);

  05934	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0593c	48 8d 94 24 b8
	07 00 00	 lea	 rdx, QWORD PTR value$25991[rsp]
  05944	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  05949	e8 00 00 00 00	 call	 obj2ast_expr
  0594e	89 84 24 c0 07
	00 00		 mov	 DWORD PTR res$25993[rsp], eax

; 4731 :             if (res != 0) goto failed;

  05955	83 bc 24 c0 07
	00 00 00	 cmp	 DWORD PTR res$25993[rsp], 0
  0595d	74 05		 je	 SHORT $LN20@obj2ast_st
  0595f	e9 0d 02 00 00	 jmp	 $failed$24787
$LN20@obj2ast_st:
$LN19@obj2ast_st:

; 4732 :             Py_CLEAR(tmp);

  05964	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0596a	74 4d		 je	 SHORT $LN16@obj2ast_st
  0596c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  05974	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tmp$[rsp]
  05979	41 b8 7c 12 00
	00		 mov	 r8d, 4732		; 0000127cH
  0597f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  05986	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOFHNMOD@obj2ast_stmt?$AA@
  0598d	e8 00 00 00 00	 call	 _PyParallel_Guard
  05992	85 c0		 test	 eax, eax
  05994	75 23		 jne	 SHORT $LN16@obj2ast_st
  05996	48 8b 44 24 58	 mov	 rax, QWORD PTR tmp$[rsp]
  0599b	48 89 84 24 c8
	07 00 00	 mov	 QWORD PTR _py_tmp$26001[rsp], rax
  059a3	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  059ac	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR _py_tmp$26001[rsp]
  059b4	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@obj2ast_st:
  059b9	33 c0		 xor	 eax, eax
  059bb	85 c0		 test	 eax, eax
  059bd	75 a5		 jne	 SHORT $LN19@obj2ast_st

; 4733 :         } else {

  059bf	eb 1d		 jmp	 SHORT $LN15@obj2ast_st
$LN22@obj2ast_st:

; 4734 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Expr");

  059c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HOLCPOID@required?5field?5?$CCvalue?$CC?5missing?5f@
  059c8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  059cf	e8 00 00 00 00	 call	 PyErr_SetString

; 4735 :             return 1;

  059d4	b8 01 00 00 00	 mov	 eax, 1
  059d9	e9 b0 01 00 00	 jmp	 $LN573@obj2ast_st
$LN15@obj2ast_st:

; 4736 :         }
; 4737 :         *out = Expr(value, lineno, col_offset, arena);

  059de	4c 8b 8c 24 f0
	07 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  059e6	44 8b 44 24 60	 mov	 r8d, DWORD PTR col_offset$[rsp]
  059eb	8b 54 24 50	 mov	 edx, DWORD PTR lineno$[rsp]
  059ef	48 8b 8c 24 b8
	07 00 00	 mov	 rcx, QWORD PTR value$25991[rsp]
  059f7	e8 00 00 00 00	 call	 _Py_Expr
  059fc	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  05a04	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4738 :         if (*out == NULL) goto failed;

  05a07	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  05a0f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  05a13	75 05		 jne	 SHORT $LN14@obj2ast_st
  05a15	e9 57 01 00 00	 jmp	 $failed$24787
$LN14@obj2ast_st:

; 4739 :         return 0;

  05a1a	33 c0		 xor	 eax, eax
  05a1c	e9 6d 01 00 00	 jmp	 $LN573@obj2ast_st
$LN23@obj2ast_st:

; 4740 :     }
; 4741 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Pass_type);

  05a21	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Pass_type
  05a28	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05a30	e8 00 00 00 00	 call	 PyObject_IsInstance
  05a35	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4742 :     if (isinstance == -1) {

  05a39	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  05a3e	75 0a		 jne	 SHORT $LN13@obj2ast_st

; 4743 :         return 1;

  05a40	b8 01 00 00 00	 mov	 eax, 1
  05a45	e9 44 01 00 00	 jmp	 $LN573@obj2ast_st
$LN13@obj2ast_st:

; 4744 :     }
; 4745 :     if (isinstance) {

  05a4a	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  05a4f	74 3a		 je	 SHORT $LN12@obj2ast_st

; 4746 : 
; 4747 :         *out = Pass(lineno, col_offset, arena);

  05a51	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  05a59	8b 54 24 60	 mov	 edx, DWORD PTR col_offset$[rsp]
  05a5d	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  05a61	e8 00 00 00 00	 call	 _Py_Pass
  05a66	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  05a6e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4748 :         if (*out == NULL) goto failed;

  05a71	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  05a79	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  05a7d	75 05		 jne	 SHORT $LN11@obj2ast_st
  05a7f	e9 ed 00 00 00	 jmp	 $failed$24787
$LN11@obj2ast_st:

; 4749 :         return 0;

  05a84	33 c0		 xor	 eax, eax
  05a86	e9 03 01 00 00	 jmp	 $LN573@obj2ast_st
$LN12@obj2ast_st:

; 4750 :     }
; 4751 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Break_type);

  05a8b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Break_type
  05a92	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05a9a	e8 00 00 00 00	 call	 PyObject_IsInstance
  05a9f	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4752 :     if (isinstance == -1) {

  05aa3	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  05aa8	75 0a		 jne	 SHORT $LN10@obj2ast_st

; 4753 :         return 1;

  05aaa	b8 01 00 00 00	 mov	 eax, 1
  05aaf	e9 da 00 00 00	 jmp	 $LN573@obj2ast_st
$LN10@obj2ast_st:

; 4754 :     }
; 4755 :     if (isinstance) {

  05ab4	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  05ab9	74 3a		 je	 SHORT $LN9@obj2ast_st

; 4756 : 
; 4757 :         *out = Break(lineno, col_offset, arena);

  05abb	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  05ac3	8b 54 24 60	 mov	 edx, DWORD PTR col_offset$[rsp]
  05ac7	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  05acb	e8 00 00 00 00	 call	 _Py_Break
  05ad0	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  05ad8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4758 :         if (*out == NULL) goto failed;

  05adb	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  05ae3	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  05ae7	75 05		 jne	 SHORT $LN8@obj2ast_st
  05ae9	e9 83 00 00 00	 jmp	 $failed$24787
$LN8@obj2ast_st:

; 4759 :         return 0;

  05aee	33 c0		 xor	 eax, eax
  05af0	e9 99 00 00 00	 jmp	 $LN573@obj2ast_st
$LN9@obj2ast_st:

; 4760 :     }
; 4761 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Continue_type);

  05af5	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Continue_type
  05afc	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05b04	e8 00 00 00 00	 call	 PyObject_IsInstance
  05b09	89 44 24 64	 mov	 DWORD PTR isinstance$[rsp], eax

; 4762 :     if (isinstance == -1) {

  05b0d	83 7c 24 64 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  05b12	75 07		 jne	 SHORT $LN7@obj2ast_st

; 4763 :         return 1;

  05b14	b8 01 00 00 00	 mov	 eax, 1
  05b19	eb 73		 jmp	 SHORT $LN573@obj2ast_st
$LN7@obj2ast_st:

; 4764 :     }
; 4765 :     if (isinstance) {

  05b1b	83 7c 24 64 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  05b20	74 34		 je	 SHORT $LN6@obj2ast_st

; 4766 : 
; 4767 :         *out = Continue(lineno, col_offset, arena);

  05b22	4c 8b 84 24 f0
	07 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  05b2a	8b 54 24 60	 mov	 edx, DWORD PTR col_offset$[rsp]
  05b2e	8b 4c 24 50	 mov	 ecx, DWORD PTR lineno$[rsp]
  05b32	e8 00 00 00 00	 call	 _Py_Continue
  05b37	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  05b3f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4768 :         if (*out == NULL) goto failed;

  05b42	48 8b 84 24 e8
	07 00 00	 mov	 rax, QWORD PTR out$[rsp]
  05b4a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  05b4e	75 02		 jne	 SHORT $LN5@obj2ast_st
  05b50	eb 1f		 jmp	 SHORT $failed$24787
$LN5@obj2ast_st:

; 4769 :         return 0;

  05b52	33 c0		 xor	 eax, eax
  05b54	eb 38		 jmp	 SHORT $LN573@obj2ast_st
$LN6@obj2ast_st:

; 4770 :     }
; 4771 : 
; 4772 :     PyErr_Format(PyExc_TypeError, "expected some sort of stmt, but got %R", obj);

  05b56	4c 8b 84 24 e0
	07 00 00	 mov	 r8, QWORD PTR obj$[rsp]
  05b5e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@MEDEENCL@expected?5some?5sort?5of?5stmt?0?5but?5@
  05b65	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  05b6c	e8 00 00 00 00	 call	 PyErr_Format
$failed$24787:
$LN4@obj2ast_st:

; 4773 :     failed:
; 4774 :     Py_XDECREF(tmp);

  05b71	48 83 7c 24 58
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  05b77	74 0a		 je	 SHORT $LN1@obj2ast_st
  05b79	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tmp$[rsp]
  05b7e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@obj2ast_st:
  05b83	33 c0		 xor	 eax, eax
  05b85	85 c0		 test	 eax, eax
  05b87	75 e8		 jne	 SHORT $LN4@obj2ast_st

; 4775 :     return 1;

  05b89	b8 01 00 00 00	 mov	 eax, 1
$LN573@obj2ast_st:

; 4776 : }

  05b8e	48 81 c4 d8 07
	00 00		 add	 rsp, 2008		; 000007d8H
  05b95	c3		 ret	 0
obj2ast_stmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@PFCMDKJP@AST?5identifier?5must?5be?5of?5type?5s@ ; `string'
EXTRN	PyUnicode_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_identifier DD imagerel obj2ast_identifier
	DD	imagerel obj2ast_identifier+102
	DD	imagerel $unwind$obj2ast_identifier
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_identifier DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_0CD@PFCMDKJP@AST?5identifier?5must?5be?5of?5type?5s@
CONST	SEGMENT
??_C@_0CD@PFCMDKJP@AST?5identifier?5must?5be?5of?5type?5s@ DB 'AST identi'
	DB	'fier must be of type str', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_identifier
_TEXT	SEGMENT
obj$ = 48
out$ = 56
arena$ = 64
obj2ast_identifier PROC					; COMDAT

; 703  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 704  :     if (!PyUnicode_CheckExact(obj) && obj != Py_None) {

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 28		 je	 SHORT $LN1@obj2ast_id
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0002c	48 39 44 24 30	 cmp	 QWORD PTR obj$[rsp], rax
  00031	74 1a		 je	 SHORT $LN1@obj2ast_id

; 705  :         PyErr_SetString(PyExc_TypeError, "AST identifier must be of type str");

  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@PFCMDKJP@AST?5identifier?5must?5be?5of?5type?5s@
  0003a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00041	e8 00 00 00 00	 call	 PyErr_SetString

; 706  :         return 1;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	eb 14		 jmp	 SHORT $LN2@obj2ast_id
$LN1@obj2ast_id:

; 707  :     }
; 708  :     return obj2ast_object(obj, out, arena);

  0004d	4c 8b 44 24 40	 mov	 r8, QWORD PTR arena$[rsp]
  00052	48 8b 54 24 38	 mov	 rdx, QWORD PTR out$[rsp]
  00057	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0005c	e8 00 00 00 00	 call	 obj2ast_object
$LN2@obj2ast_id:

; 709  : }

  00061	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00065	c3		 ret	 0
obj2ast_identifier ENDP
_TEXT	ENDS
EXTRN	PyArena_AddPyObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_object DD imagerel obj2ast_object
	DD	imagerel obj2ast_object+118
	DD	imagerel $unwind$obj2ast_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_object DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT obj2ast_object
_TEXT	SEGMENT
obj$ = 48
out$ = 56
arena$ = 64
obj2ast_object PROC					; COMDAT

; 688  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 689  :     if (obj == Py_None)

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0001a	48 39 44 24 30	 cmp	 QWORD PTR obj$[rsp], rax
  0001f	75 09		 jne	 SHORT $LN3@obj2ast_ob

; 690  :         obj = NULL;

  00021	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR obj$[rsp], 0
$LN3@obj2ast_ob:

; 691  :     if (obj) {

  0002a	48 83 7c 24 30
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00030	74 30		 je	 SHORT $LN2@obj2ast_ob

; 692  :         if (PyArena_AddPyObject(arena, obj) < 0) {

  00032	48 8b 54 24 30	 mov	 rdx, QWORD PTR obj$[rsp]
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arena$[rsp]
  0003c	e8 00 00 00 00	 call	 PyArena_AddPyObject
  00041	85 c0		 test	 eax, eax
  00043	7d 13		 jge	 SHORT $LN1@obj2ast_ob

; 693  :             *out = NULL;

  00045	48 8b 44 24 38	 mov	 rax, QWORD PTR out$[rsp]
  0004a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 694  :             return -1;

  00051	b8 ff ff ff ff	 mov	 eax, -1
  00056	eb 19		 jmp	 SHORT $LN4@obj2ast_ob
$LN1@obj2ast_ob:

; 695  :         }
; 696  :         Py_INCREF(obj);

  00058	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0005d	e8 00 00 00 00	 call	 _Py_IncRef
$LN2@obj2ast_ob:

; 697  :     }
; 698  :     *out = obj;

  00062	48 8b 44 24 38	 mov	 rax, QWORD PTR out$[rsp]
  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0006c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 699  :     return 0;

  0006f	33 c0		 xor	 eax, eax
$LN4@obj2ast_ob:

; 700  : }

  00071	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00075	c3		 ret	 0
obj2ast_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@JIKIMNKN@invalid?5integer?5value?3?5?$CFR?$AA@ ; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_int DD imagerel obj2ast_int
	DD	imagerel obj2ast_int+130
	DD	imagerel $unwind$obj2ast_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_int DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BK@JIKIMNKN@invalid?5integer?5value?3?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BK@JIKIMNKN@invalid?5integer?5value?3?5?$CFR?$AA@ DB 'invalid inte'
	DB	'ger value: %R', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_int
_TEXT	SEGMENT
i$ = 32
obj$ = 64
out$ = 72
arena$ = 80
obj2ast_int PROC					; COMDAT

; 730  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 731  :     int i;
; 732  :     if (!PyLong_Check(obj)) {

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00022	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00027	85 c0		 test	 eax, eax
  00029	75 1f		 jne	 SHORT $LN2@obj2ast_in

; 733  :         PyErr_Format(PyExc_ValueError, "invalid integer value: %R", obj);

  0002b	4c 8b 44 24 40	 mov	 r8, QWORD PTR obj$[rsp]
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JIKIMNKN@invalid?5integer?5value?3?5?$CFR?$AA@
  00037	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0003e	e8 00 00 00 00	 call	 PyErr_Format

; 734  :         return 1;

  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	eb 33		 jmp	 SHORT $LN3@obj2ast_in
$LN2@obj2ast_in:

; 735  :     }
; 736  : 
; 737  :     i = (int)PyLong_AsLong(obj);

  0004a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0004f	e8 00 00 00 00	 call	 PyLong_AsLong
  00054	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax

; 738  :     if (i == -1 && PyErr_Occurred())

  00058	83 7c 24 20 ff	 cmp	 DWORD PTR i$[rsp], -1
  0005d	75 11		 jne	 SHORT $LN1@obj2ast_in
  0005f	e8 00 00 00 00	 call	 PyErr_Occurred
  00064	48 85 c0	 test	 rax, rax
  00067	74 07		 je	 SHORT $LN1@obj2ast_in

; 739  :         return 1;

  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	eb 0d		 jmp	 SHORT $LN3@obj2ast_in
$LN1@obj2ast_in:

; 740  :     *out = i;

  00070	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00075	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  00079	89 08		 mov	 DWORD PTR [rax], ecx

; 741  :     return 0;

  0007b	33 c0		 xor	 eax, eax
$LN3@obj2ast_in:

; 742  : }

  0007d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00081	c3		 ret	 0
obj2ast_int ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@JDNNBGGD@expected?5some?5sort?5of?5expr?0?5but?5@ ; `string'
PUBLIC	??_C@_0CI@KLMOMMFA@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CJ@BCPLDOGM@required?5field?5?$CCelts?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DA@HDHPGNPM@Tuple?5field?5?$CCelts?$CC?5must?5be?5a?5lis@ ; `string'
PUBLIC	??_C@_0CH@OICLIOJM@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CI@LLANLLOK@required?5field?5?$CCelts?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CP@NOICNLCE@List?5field?5?$CCelts?$CC?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_0CH@BCDOFIHJ@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CG@KDGIGLGJ@required?5field?5?$CCid?$CC?5missing?5from@ ; `string'
PUBLIC	??_C@_0CK@BBMCEKDP@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CM@HHGGPHKN@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CM@GNGBNLH@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CO@ECGILCDO@required?5field?5?$CCslice?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CO@PAHBFMLK@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CM@KBDBLMDG@required?5field?5?$CCctx?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CN@BLIDGIHB@required?5field?5?$CCattr?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CO@FHJGPNDL@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CG@INBJMMPB@required?5field?5?$CCs?$CC?5missing?5from?5@ ; `string'
PUBLIC	??_C@_0CE@ELPANCFA@required?5field?5?$CCs?$CC?5missing?5from?5@ ; `string'
PUBLIC	??_C@_0CE@HDIMJEDD@required?5field?5?$CCn?$CC?5missing?5from?5@ ; `string'
PUBLIC	??_C@_0CM@CAEPCCCE@required?5field?5?$CCkeywords?$CC?5missin@ ; `string'
PUBLIC	??_C@_0DD@OIKFBKNP@Call?5field?5?$CCkeywords?$CC?5must?5be?5a?5@ ; `string'
PUBLIC	??_C@_0CI@HMAALGIO@required?5field?5?$CCargs?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_1EC@KPDCIBGG@?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@ ; `string'
PUBLIC	??_C@_0CP@BJIMJFDA@Call?5field?5?$CCargs?$CC?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_0CI@NOCOEJHL@required?5field?5?$CCfunc?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DC@OKCKOOGB@required?5field?5?$CCcomparators?$CC?5mis@ ; `string'
PUBLIC	??_C@_1FO@IFANOCGD@?$AA?$CI?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAc?$AAo?$AAm?$AAp@ ; `string'
PUBLIC	??_C@_0DJ@BIJCFAHA@Compare?5field?5?$CCcomparators?$CC?5must@ ; `string'
PUBLIC	??_C@_0CK@EJGPDIPB@required?5field?5?$CCops?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_1DO@HAJJNCPB@?$AA?$CI?$AAo?$AAp?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAo?$AAp?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DB@LPCFPBLI@Compare?5field?5?$CCops?$CC?5must?5be?5a?5li@ ; `string'
PUBLIC	??_C@_0CL@IAGPHPKA@required?5field?5?$CCleft?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CO@HEDCCLBN@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0DG@FFMKMNIB@required?5field?5?$CCgenerators?$CC?5miss@ ; `string'
PUBLIC	??_C@_0DN@BPOKNM@GeneratorExp?5field?5?$CCgenerators?$CC?5@ ; `string'
PUBLIC	??_C@_0CP@HEOIHGCL@required?5field?5?$CCelt?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0DC@CAIFLNII@required?5field?5?$CCgenerators?$CC?5miss@ ; `string'
PUBLIC	??_C@_0DJ@CAGFCIFA@DictComp?5field?5?$CCgenerators?$CC?5must@ ; `string'
PUBLIC	??_C@_0CN@BFNLHDPP@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CL@CBPKJOEB@required?5field?5?$CCkey?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0DB@BADNOGEO@required?5field?5?$CCgenerators?$CC?5miss@ ; `string'
PUBLIC	??_C@_0DI@MNDNMCPF@SetComp?5field?5?$CCgenerators?$CC?5must?5@ ; `string'
PUBLIC	??_C@_0CK@GNDGBNHN@required?5field?5?$CCelt?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0DC@PMIDIDFO@required?5field?5?$CCgenerators?$CC?5miss@ ; `string'
PUBLIC	??_C@_1FK@HFOAFHGA@?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0DJ@KIJLIALD@ListComp?5field?5?$CCgenerators?$CC?5must@ ; `string'
PUBLIC	??_C@_0CL@EDCOOJLD@required?5field?5?$CCelt?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0CH@BPLFHEPK@required?5field?5?$CCelts?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_1EC@CNCMENEB@?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@ ; `string'
PUBLIC	??_C@_0CO@KGPNPPNE@Set?5field?5?$CCelts?$CC?5must?5be?5a?5list?0@ ; `string'
PUBLIC	??_C@_0CK@CCGGNJEC@required?5field?5?$CCvalues?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0DB@GGCPIMOJ@Dict?5field?5?$CCvalues?$CC?5must?5be?5a?5li@ ; `string'
PUBLIC	??_C@_0CI@JMGLEFIH@required?5field?5?$CCkeys?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_1EC@NADANMCL@?$AA?$CI?$AAk?$AAe?$AAy?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAe?$AAy?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@ ; `string'
PUBLIC	??_C@_0CP@EGMKHIJH@Dict?5field?5?$CCkeys?$CC?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_0CL@DNEAKDOO@required?5field?5?$CCorelse?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0CJ@GBLDBLBM@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CJ@NMEIGPEH@required?5field?5?$CCtest?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CK@PCIBHCDP@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CK@JPMNMIAM@required?5field?5?$CCargs?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CO@CAINBGKB@required?5field?5?$CCoperand?$CC?5missing@ ; `string'
PUBLIC	??_C@_0CJ@MPIFKMKO@required?5field?5?$CCop?$CC?5missing?5from@ ; `string'
PUBLIC	??_C@_0CK@CPLHPBCE@required?5field?5?$CCright?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CH@GDLDIEDI@required?5field?5?$CCop?$CC?5missing?5from@ ; `string'
PUBLIC	??_C@_0CJ@IMIJKKKN@required?5field?5?$CCleft?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0CM@IMGNJCMM@required?5field?5?$CCvalues?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_1EK@IHPOJLHM@?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_0DD@BPOBLELF@BoolOp?5field?5?$CCvalues?$CC?5must?5be?5a?5@ ; `string'
PUBLIC	??_C@_0CI@HBNHBKDM@required?5field?5?$CCop?$CC?5missing?5from@ ; `string'
PUBLIC	??_C@_0CO@IEOFEKON@required?5field?5?$CCcol_offset?$CC?5miss@ ; `string'
PUBLIC	??_C@_0CK@JMPPCFJN@required?5field?5?$CClineno?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@		; `string'
EXTRN	asdl_int_seq_new:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_expr DD imagerel obj2ast_expr
	DD	imagerel obj2ast_expr+22403
	DD	imagerel $unwind$obj2ast_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_expr DD 021601H
	DD	0d90116H
xdata	ENDS
;	COMDAT ??_C@_0CH@JDNNBGGD@expected?5some?5sort?5of?5expr?0?5but?5@
CONST	SEGMENT
??_C@_0CH@JDNNBGGD@expected?5some?5sort?5of?5expr?0?5but?5@ DB 'expected '
	DB	'some sort of expr, but got %R', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KLMOMMFA@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CI@KLMOMMFA@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ctx" missing from Tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BCPLDOGM@required?5field?5?$CCelts?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@BCPLDOGM@required?5field?5?$CCelts?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "elts" missing from Tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HDHPGNPM@Tuple?5field?5?$CCelts?$CC?5must?5be?5a?5lis@
CONST	SEGMENT
??_C@_0DA@HDHPGNPM@Tuple?5field?5?$CCelts?$CC?5must?5be?5a?5lis@ DB 'Tupl'
	DB	'e field "elts" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OICLIOJM@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CH@OICLIOJM@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ctx" missing from List', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LLANLLOK@required?5field?5?$CCelts?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CI@LLANLLOK@required?5field?5?$CCelts?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "elts" missing from List', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NOICNLCE@List?5field?5?$CCelts?$CC?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CP@NOICNLCE@List?5field?5?$CCelts?$CC?5must?5be?5a?5list@ DB 'List'
	DB	' field "elts" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BCDOFIHJ@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CH@BCDOFIHJ@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ctx" missing from Name', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KDGIGLGJ@required?5field?5?$CCid?$CC?5missing?5from@
CONST	SEGMENT
??_C@_0CG@KDGIGLGJ@required?5field?5?$CCid?$CC?5missing?5from@ DB 'requir'
	DB	'ed field "id" missing from Name', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BBMCEKDP@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CK@BBMCEKDP@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ctx" missing from Starred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HHGGPHKN@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CM@HHGGPHKN@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Starred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GNGBNLH@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CM@GNGBNLH@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'require'
	DB	'd field "ctx" missing from Subscript', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@ECGILCDO@required?5field?5?$CCslice?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CO@ECGILCDO@required?5field?5?$CCslice?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "slice" missing from Subscript', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PAHBFMLK@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CO@PAHBFMLK@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Subscript', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KBDBLMDG@required?5field?5?$CCctx?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CM@KBDBLMDG@required?5field?5?$CCctx?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ctx" missing from Attribute', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BLIDGIHB@required?5field?5?$CCattr?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CN@BLIDGIHB@required?5field?5?$CCattr?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "attr" missing from Attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FHJGPNDL@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CO@FHJGPNDL@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@INBJMMPB@required?5field?5?$CCs?$CC?5missing?5from?5@
CONST	SEGMENT
??_C@_0CG@INBJMMPB@required?5field?5?$CCs?$CC?5missing?5from?5@ DB 'requi'
	DB	'red field "s" missing from Bytes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ELPANCFA@required?5field?5?$CCs?$CC?5missing?5from?5@
CONST	SEGMENT
??_C@_0CE@ELPANCFA@required?5field?5?$CCs?$CC?5missing?5from?5@ DB 'requi'
	DB	'red field "s" missing from Str', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HDIMJEDD@required?5field?5?$CCn?$CC?5missing?5from?5@
CONST	SEGMENT
??_C@_0CE@HDIMJEDD@required?5field?5?$CCn?$CC?5missing?5from?5@ DB 'requi'
	DB	'red field "n" missing from Num', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CAEPCCCE@required?5field?5?$CCkeywords?$CC?5missin@
CONST	SEGMENT
??_C@_0CM@CAEPCCCE@required?5field?5?$CCkeywords?$CC?5missin@ DB 'require'
	DB	'd field "keywords" missing from Call', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OIKFBKNP@Call?5field?5?$CCkeywords?$CC?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0DD@OIKFBKNP@Call?5field?5?$CCkeywords?$CC?5must?5be?5a?5@ DB 'Call'
	DB	' field "keywords" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HMAALGIO@required?5field?5?$CCargs?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CI@HMAALGIO@required?5field?5?$CCargs?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "args" missing from Call', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@KPDCIBGG@?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
CONST	SEGMENT
??_C@_1EC@KPDCIBGG@?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@ DB '('
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 's', 00H, ')', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H, 'd'
	DB	00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'(', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 's', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BJIMJFDA@Call?5field?5?$CCargs?$CC?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CP@BJIMJFDA@Call?5field?5?$CCargs?$CC?5must?5be?5a?5list@ DB 'Call'
	DB	' field "args" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NOCOEJHL@required?5field?5?$CCfunc?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CI@NOCOEJHL@required?5field?5?$CCfunc?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "func" missing from Call', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OKCKOOGB@required?5field?5?$CCcomparators?$CC?5mis@
CONST	SEGMENT
??_C@_0DC@OKCKOOGB@required?5field?5?$CCcomparators?$CC?5mis@ DB 'require'
	DB	'd field "comparators" missing from Compare', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@IFANOCGD@?$AA?$CI?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAc?$AAo?$AAm?$AAp@
CONST	SEGMENT
??_C@_1FO@IFANOCGD@?$AA?$CI?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAc?$AAo?$AAm?$AAp@ DB '('
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 's', 00H, ')', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H
	DB	'd', 00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, '(', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 's', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@BIJCFAHA@Compare?5field?5?$CCcomparators?$CC?5must@
CONST	SEGMENT
??_C@_0DJ@BIJCFAHA@Compare?5field?5?$CCcomparators?$CC?5must@ DB 'Compare'
	DB	' field "comparators" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EJGPDIPB@required?5field?5?$CCops?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CK@EJGPDIPB@required?5field?5?$CCops?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ops" missing from Compare', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@HAJJNCPB@?$AA?$CI?$AAo?$AAp?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAo?$AAp?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@HAJJNCPB@?$AA?$CI?$AAo?$AAp?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAo?$AAp?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB '('
	DB	00H, 'o', 00H, 'p', 00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H, 'd', 00H, 'l'
	DB	00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H
	DB	'o', 00H, 'p', 00H, 's', 00H, ')', 00H, '-', 00H, '>', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LPCFPBLI@Compare?5field?5?$CCops?$CC?5must?5be?5a?5li@
CONST	SEGMENT
??_C@_0DB@LPCFPBLI@Compare?5field?5?$CCops?$CC?5must?5be?5a?5li@ DB 'Comp'
	DB	'are field "ops" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IAGPHPKA@required?5field?5?$CCleft?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CL@IAGPHPKA@required?5field?5?$CCleft?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "left" missing from Compare', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HEDCCLBN@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CO@HEDCCLBN@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from YieldFrom', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FFMKMNIB@required?5field?5?$CCgenerators?$CC?5miss@
CONST	SEGMENT
??_C@_0DG@FFMKMNIB@required?5field?5?$CCgenerators?$CC?5miss@ DB 'require'
	DB	'd field "generators" missing from GeneratorExp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@BPOKNM@GeneratorExp?5field?5?$CCgenerators?$CC?5@
CONST	SEGMENT
??_C@_0DN@BPOKNM@GeneratorExp?5field?5?$CCgenerators?$CC?5@ DB 'Generator'
	DB	'Exp field "generators" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HEOIHGCL@required?5field?5?$CCelt?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CP@HEOIHGCL@required?5field?5?$CCelt?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "elt" missing from GeneratorExp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CAIFLNII@required?5field?5?$CCgenerators?$CC?5miss@
CONST	SEGMENT
??_C@_0DC@CAIFLNII@required?5field?5?$CCgenerators?$CC?5miss@ DB 'require'
	DB	'd field "generators" missing from DictComp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CAGFCIFA@DictComp?5field?5?$CCgenerators?$CC?5must@
CONST	SEGMENT
??_C@_0DJ@CAGFCIFA@DictComp?5field?5?$CCgenerators?$CC?5must@ DB 'DictCom'
	DB	'p field "generators" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BFNLHDPP@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CN@BFNLHDPP@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from DictComp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CBPKJOEB@required?5field?5?$CCkey?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CL@CBPKJOEB@required?5field?5?$CCkey?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "key" missing from DictComp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BADNOGEO@required?5field?5?$CCgenerators?$CC?5miss@
CONST	SEGMENT
??_C@_0DB@BADNOGEO@required?5field?5?$CCgenerators?$CC?5miss@ DB 'require'
	DB	'd field "generators" missing from SetComp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@MNDNMCPF@SetComp?5field?5?$CCgenerators?$CC?5must?5@
CONST	SEGMENT
??_C@_0DI@MNDNMCPF@SetComp?5field?5?$CCgenerators?$CC?5must?5@ DB 'SetCom'
	DB	'p field "generators" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GNDGBNHN@required?5field?5?$CCelt?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CK@GNDGBNHN@required?5field?5?$CCelt?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "elt" missing from SetComp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PMIDIDFO@required?5field?5?$CCgenerators?$CC?5miss@
CONST	SEGMENT
??_C@_0DC@PMIDIDFO@required?5field?5?$CCgenerators?$CC?5miss@ DB 'require'
	DB	'd field "generators" missing from ListComp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@HFOAFHGA@?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FK@HFOAFHGA@?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr@ DB '('
	DB	00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, 's', 00H, ')', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H, 'd', 00H
	DB	'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' ', 00H, '('
	DB	00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, 's', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@KIJLIALD@ListComp?5field?5?$CCgenerators?$CC?5must@
CONST	SEGMENT
??_C@_0DJ@KIJLIALD@ListComp?5field?5?$CCgenerators?$CC?5must@ DB 'ListCom'
	DB	'p field "generators" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EDCOOJLD@required?5field?5?$CCelt?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CL@EDCOOJLD@required?5field?5?$CCelt?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "elt" missing from ListComp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BPLFHEPK@required?5field?5?$CCelts?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CH@BPLFHEPK@required?5field?5?$CCelts?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "elts" missing from Set', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@CNCMENEB@?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
CONST	SEGMENT
??_C@_1EC@CNCMENEB@?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@ DB '('
	DB	00H, 'e', 00H, 'l', 00H, 't', 00H, 's', 00H, ')', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H, 'd'
	DB	00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'(', 00H, 'e', 00H, 'l', 00H, 't', 00H, 's', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KGPNPPNE@Set?5field?5?$CCelts?$CC?5must?5be?5a?5list?0@
CONST	SEGMENT
??_C@_0CO@KGPNPPNE@Set?5field?5?$CCelts?$CC?5must?5be?5a?5list?0@ DB 'Set'
	DB	' field "elts" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CCGGNJEC@required?5field?5?$CCvalues?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CK@CCGGNJEC@required?5field?5?$CCvalues?$CC?5missing?5@ DB 'requir'
	DB	'ed field "values" missing from Dict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GGCPIMOJ@Dict?5field?5?$CCvalues?$CC?5must?5be?5a?5li@
CONST	SEGMENT
??_C@_0DB@GGCPIMOJ@Dict?5field?5?$CCvalues?$CC?5must?5be?5a?5li@ DB 'Dict'
	DB	' field "values" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JMGLEFIH@required?5field?5?$CCkeys?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CI@JMGLEFIH@required?5field?5?$CCkeys?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "keys" missing from Dict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@NADANMCL@?$AA?$CI?$AAk?$AAe?$AAy?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAe?$AAy?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
CONST	SEGMENT
??_C@_1EC@NADANMCL@?$AA?$CI?$AAk?$AAe?$AAy?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAe?$AAy?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@ DB '('
	DB	00H, 'k', 00H, 'e', 00H, 'y', 00H, 's', 00H, ')', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H, 'd'
	DB	00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'(', 00H, 'k', 00H, 'e', 00H, 'y', 00H, 's', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EGMKHIJH@Dict?5field?5?$CCkeys?$CC?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CP@EGMKHIJH@Dict?5field?5?$CCkeys?$CC?5must?5be?5a?5list@ DB 'Dict'
	DB	' field "keys" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DNEAKDOO@required?5field?5?$CCorelse?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CL@DNEAKDOO@required?5field?5?$CCorelse?$CC?5missing?5@ DB 'requir'
	DB	'ed field "orelse" missing from IfExp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GBLDBLBM@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@GBLDBLBM@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from IfExp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NMEIGPEH@required?5field?5?$CCtest?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@NMEIGPEH@required?5field?5?$CCtest?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "test" missing from IfExp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PCIBHCDP@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CK@PCIBHCDP@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from Lambda', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JPMNMIAM@required?5field?5?$CCargs?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CK@JPMNMIAM@required?5field?5?$CCargs?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "args" missing from Lambda', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CAINBGKB@required?5field?5?$CCoperand?$CC?5missing@
CONST	SEGMENT
??_C@_0CO@CAINBGKB@required?5field?5?$CCoperand?$CC?5missing@ DB 'require'
	DB	'd field "operand" missing from UnaryOp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MPIFKMKO@required?5field?5?$CCop?$CC?5missing?5from@
CONST	SEGMENT
??_C@_0CJ@MPIFKMKO@required?5field?5?$CCop?$CC?5missing?5from@ DB 'requir'
	DB	'ed field "op" missing from UnaryOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CPLHPBCE@required?5field?5?$CCright?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CK@CPLHPBCE@required?5field?5?$CCright?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "right" missing from BinOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GDLDIEDI@required?5field?5?$CCop?$CC?5missing?5from@
CONST	SEGMENT
??_C@_0CH@GDLDIEDI@required?5field?5?$CCop?$CC?5missing?5from@ DB 'requir'
	DB	'ed field "op" missing from BinOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IMIJKKKN@required?5field?5?$CCleft?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@IMIJKKKN@required?5field?5?$CCleft?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "left" missing from BinOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IMGNJCMM@required?5field?5?$CCvalues?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CM@IMGNJCMM@required?5field?5?$CCvalues?$CC?5missing?5@ DB 'requir'
	DB	'ed field "values" missing from BoolOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@IHPOJLHM@?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1EK@IHPOJLHM@?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO@ DB '('
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 's', 00H
	DB	')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a'
	DB	00H, 's', 00H, 'd', 00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, '(', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u'
	DB	00H, 'e', 00H, 's', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@BPOBLELF@BoolOp?5field?5?$CCvalues?$CC?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0DD@BPOBLELF@BoolOp?5field?5?$CCvalues?$CC?5must?5be?5a?5@ DB 'Bool'
	DB	'Op field "values" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HBNHBKDM@required?5field?5?$CCop?$CC?5missing?5from@
CONST	SEGMENT
??_C@_0CI@HBNHBKDM@required?5field?5?$CCop?$CC?5missing?5from@ DB 'requir'
	DB	'ed field "op" missing from BoolOp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IEOFEKON@required?5field?5?$CCcol_offset?$CC?5miss@
CONST	SEGMENT
??_C@_0CO@IEOFEKON@required?5field?5?$CCcol_offset?$CC?5miss@ DB 'require'
	DB	'd field "col_offset" missing from expr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JMPPCFJN@required?5field?5?$CClineno?$CC?5missing?5@
CONST	SEGMENT
??_C@_0CK@JMPPCFJN@required?5field?5?$CClineno?$CC?5missing?5@ DB 'requir'
	DB	'ed field "lineno" missing from expr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
CONST	SEGMENT
??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@ DB 'obj2ast_expr', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_expr
_TEXT	SEGMENT
lineno$ = 64
tmp$ = 72
col_offset$ = 80
isinstance$ = 84
res$26045 = 88
_py_tmp$26055 = 96
res$26062 = 104
_py_tmp$26070 = 112
values$26080 = 120
op$26079 = 128
res$26082 = 132
_py_tmp$26090 = 136
res$26097 = 144
i$26099 = 152
len$26098 = 160
value$26111 = 168
_asdl_i$26114 = 176
_py_tmp$26121 = 184
left$26132 = 192
right$26134 = 200
op$26133 = 208
res$26136 = 212
_py_tmp$26144 = 216
res$26151 = 224
_py_tmp$26159 = 232
res$26166 = 240
_py_tmp$26174 = 248
operand$26186 = 256
op$26185 = 264
res$26188 = 268
_py_tmp$26196 = 272
res$26203 = 280
_py_tmp$26211 = 288
args$26222 = 296
body$26223 = 304
res$26225 = 312
_py_tmp$26233 = 320
res$26240 = 328
_py_tmp$26248 = 336
body$26260 = 344
test$26259 = 352
orelse$26261 = 360
res$26263 = 368
_py_tmp$26271 = 376
res$26278 = 384
_py_tmp$26286 = 392
res$26293 = 400
_py_tmp$26301 = 408
values$26313 = 416
keys$26312 = 424
res$26315 = 432
i$26317 = 440
len$26316 = 448
value$26329 = 456
_asdl_i$26332 = 464
_py_tmp$26339 = 472
res$26346 = 480
i$26348 = 488
len$26347 = 496
value$26360 = 504
_asdl_i$26363 = 512
_py_tmp$26369 = 520
elts$26380 = 528
res$26382 = 536
i$26384 = 544
len$26383 = 552
value$26396 = 560
_asdl_i$26399 = 568
_py_tmp$26406 = 576
elt$26417 = 584
generators$26418 = 592
res$26420 = 600
_py_tmp$26428 = 608
res$26435 = 616
i$26437 = 624
len$26436 = 632
value$26449 = 640
_asdl_i$26452 = 648
_py_tmp$26459 = 656
elt$26470 = 664
generators$26471 = 672
res$26473 = 680
_py_tmp$26481 = 688
res$26488 = 696
i$26490 = 704
len$26489 = 712
value$26502 = 720
_asdl_i$26505 = 728
_py_tmp$26511 = 736
value$26523 = 744
key$26522 = 752
generators$26524 = 760
res$26526 = 768
_py_tmp$26534 = 776
res$26541 = 784
_py_tmp$26549 = 792
res$26556 = 800
i$26558 = 808
len$26557 = 816
value$26570 = 824
_asdl_i$26573 = 832
_py_tmp$26579 = 840
elt$26590 = 848
generators$26591 = 856
res$26593 = 864
_py_tmp$26601 = 872
res$26608 = 880
i$26610 = 888
len$26609 = 896
value$26622 = 904
_asdl_i$26625 = 912
_py_tmp$26631 = 920
value$26642 = 928
res$26644 = 936
_py_tmp$26652 = 944
value$26663 = 952
res$26665 = 960
_py_tmp$26673 = 968
comparators$26686 = 976
ops$26685 = 984
left$26684 = 992
res$26688 = 1000
_py_tmp$26696 = 1008
res$26703 = 1016
i$26705 = 1024
len$26704 = 1032
value$26717 = 1040
_asdl_i$26720 = 1044
_py_tmp$26727 = 1048
res$26734 = 1056
i$26736 = 1064
len$26735 = 1072
value$26748 = 1080
_asdl_i$26751 = 1088
_py_tmp$26758 = 1096
kwargs$26773 = 1104
args$26770 = 1112
keywords$26771 = 1120
starargs$26772 = 1128
func$26769 = 1136
res$26775 = 1144
_py_tmp$26783 = 1152
res$26790 = 1160
i$26792 = 1168
len$26791 = 1176
value$26804 = 1184
_asdl_i$26807 = 1192
_py_tmp$26814 = 1200
res$26821 = 1208
i$26823 = 1216
len$26822 = 1224
value$26835 = 1232
_asdl_i$26838 = 1240
_py_tmp$26844 = 1248
res$26851 = 1256
_py_tmp$26859 = 1264
res$26866 = 1272
_py_tmp$26874 = 1280
n$26885 = 1288
res$26887 = 1296
_py_tmp$26895 = 1304
s$26906 = 1312
res$26908 = 1320
_py_tmp$26916 = 1328
s$26927 = 1336
res$26929 = 1344
_py_tmp$26937 = 1352
value$26953 = 1360
attr$26954 = 1368
ctx$26955 = 1376
res$26957 = 1380
_py_tmp$26965 = 1384
res$26972 = 1392
_py_tmp$26980 = 1400
res$26987 = 1408
_py_tmp$26995 = 1416
slice$27007 = 1424
value$27006 = 1432
ctx$27008 = 1440
res$27010 = 1444
_py_tmp$27018 = 1448
res$27025 = 1456
_py_tmp$27033 = 1464
res$27040 = 1472
_py_tmp$27048 = 1480
value$27059 = 1488
ctx$27060 = 1496
res$27062 = 1500
_py_tmp$27070 = 1504
res$27077 = 1512
_py_tmp$27085 = 1520
id$27096 = 1528
ctx$27097 = 1536
res$27099 = 1540
_py_tmp$27107 = 1544
res$27114 = 1552
_py_tmp$27122 = 1560
ctx$27134 = 1568
elts$27133 = 1576
res$27136 = 1584
i$27138 = 1592
len$27137 = 1600
value$27150 = 1608
_asdl_i$27153 = 1616
_py_tmp$27159 = 1624
res$27166 = 1632
_py_tmp$27174 = 1640
ctx$27186 = 1648
elts$27185 = 1656
res$27188 = 1664
i$27190 = 1672
len$27189 = 1680
value$27202 = 1688
_asdl_i$27205 = 1696
_py_tmp$27211 = 1704
res$27218 = 1712
_py_tmp$27226 = 1720
obj$ = 1744
out$ = 1752
arena$ = 1760
obj2ast_expr PROC					; COMDAT

; 4780 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec c8 06
	00 00		 sub	 rsp, 1736		; 000006c8H

; 4781 :     int isinstance;
; 4782 : 
; 4783 :     PyObject *tmp = NULL;

  00016	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 4784 :     int lineno;
; 4785 :     int col_offset;
; 4786 : 
; 4787 :     if (obj == Py_None) {

  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00026	48 39 84 24 d0
	06 00 00	 cmp	 QWORD PTR obj$[rsp], rax
  0002e	75 16		 jne	 SHORT $LN574@obj2ast_ex

; 4788 :         *out = NULL;

  00030	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00038	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 4789 :         return 0;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 35 57 00 00	 jmp	 $LN575@obj2ast_ex
$LN574@obj2ast_ex:

; 4790 :     }
; 4791 :     if (_PyObject_HasAttrId(obj, &PyId_lineno)) {

  00046	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lineno
  0004b	8b c0		 mov	 eax, eax
  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00053	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0005c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00060	48 8b d0	 mov	 rdx, rax
  00063	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0006b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00070	85 c0		 test	 eax, eax
  00072	0f 84 ba 00 00
	00		 je	 $LN573@obj2ast_ex

; 4792 :         int res;
; 4793 :         tmp = _PyObject_GetAttrId(obj, &PyId_lineno);

  00078	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lineno
  0007d	8b c0		 mov	 eax, eax
  0007f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00085	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0008e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00092	48 8b d0	 mov	 rdx, rax
  00095	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0009d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000a2	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4794 :         if (tmp == NULL) goto failed;

  000a7	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000ad	75 05		 jne	 SHORT $LN572@obj2ast_ex
  000af	e9 aa 56 00 00	 jmp	 $failed$26048
$LN572@obj2ast_ex:

; 4795 :         res = obj2ast_int(tmp, &lineno, arena);

  000b4	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  000bc	48 8d 54 24 40	 lea	 rdx, QWORD PTR lineno$[rsp]
  000c1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  000c6	e8 00 00 00 00	 call	 obj2ast_int
  000cb	89 44 24 58	 mov	 DWORD PTR res$26045[rsp], eax

; 4796 :         if (res != 0) goto failed;

  000cf	83 7c 24 58 00	 cmp	 DWORD PTR res$26045[rsp], 0
  000d4	74 05		 je	 SHORT $LN571@obj2ast_ex
  000d6	e9 83 56 00 00	 jmp	 $failed$26048
$LN571@obj2ast_ex:
$LN570@obj2ast_ex:

; 4797 :         Py_CLEAR(tmp);

  000db	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000e1	74 47		 je	 SHORT $LN567@obj2ast_ex
  000e3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000eb	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  000f0	41 b8 bd 12 00
	00		 mov	 r8d, 4797		; 000012bdH
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00104	e8 00 00 00 00	 call	 _PyParallel_Guard
  00109	85 c0		 test	 eax, eax
  0010b	75 1d		 jne	 SHORT $LN567@obj2ast_ex
  0010d	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00112	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$26055[rsp], rax
  00117	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00120	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$26055[rsp]
  00125	e8 00 00 00 00	 call	 _Py_DecRef
$LN567@obj2ast_ex:
  0012a	33 c0		 xor	 eax, eax
  0012c	85 c0		 test	 eax, eax
  0012e	75 ab		 jne	 SHORT $LN570@obj2ast_ex

; 4798 :     } else {

  00130	eb 1d		 jmp	 SHORT $LN566@obj2ast_ex
$LN573@obj2ast_ex:

; 4799 :         PyErr_SetString(PyExc_TypeError, "required field \"lineno\" missing from expr");

  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@JMPPCFJN@required?5field?5?$CClineno?$CC?5missing?5@
  00139	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00140	e8 00 00 00 00	 call	 PyErr_SetString

; 4800 :         return 1;

  00145	b8 01 00 00 00	 mov	 eax, 1
  0014a	e9 2c 56 00 00	 jmp	 $LN575@obj2ast_ex
$LN566@obj2ast_ex:

; 4801 :     }
; 4802 :     if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {

  0014f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_col_offset
  00154	8b c0		 mov	 eax, eax
  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0015c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00165	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00169	48 8b d0	 mov	 rdx, rax
  0016c	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00174	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00179	85 c0		 test	 eax, eax
  0017b	0f 84 ba 00 00
	00		 je	 $LN565@obj2ast_ex

; 4803 :         int res;
; 4804 :         tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);

  00181	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_col_offset
  00186	8b c0		 mov	 eax, eax
  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0018e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00197	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0019b	48 8b d0	 mov	 rdx, rax
  0019e	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  001a6	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001ab	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4805 :         if (tmp == NULL) goto failed;

  001b0	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001b6	75 05		 jne	 SHORT $LN564@obj2ast_ex
  001b8	e9 a1 55 00 00	 jmp	 $failed$26048
$LN564@obj2ast_ex:

; 4806 :         res = obj2ast_int(tmp, &col_offset, arena);

  001bd	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  001c5	48 8d 54 24 50	 lea	 rdx, QWORD PTR col_offset$[rsp]
  001ca	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  001cf	e8 00 00 00 00	 call	 obj2ast_int
  001d4	89 44 24 68	 mov	 DWORD PTR res$26062[rsp], eax

; 4807 :         if (res != 0) goto failed;

  001d8	83 7c 24 68 00	 cmp	 DWORD PTR res$26062[rsp], 0
  001dd	74 05		 je	 SHORT $LN563@obj2ast_ex
  001df	e9 7a 55 00 00	 jmp	 $failed$26048
$LN563@obj2ast_ex:
$LN562@obj2ast_ex:

; 4808 :         Py_CLEAR(tmp);

  001e4	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001ea	74 47		 je	 SHORT $LN559@obj2ast_ex
  001ec	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001f4	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  001f9	41 b8 c8 12 00
	00		 mov	 r8d, 4808		; 000012c8H
  001ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00206	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0020d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00212	85 c0		 test	 eax, eax
  00214	75 1d		 jne	 SHORT $LN559@obj2ast_ex
  00216	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0021b	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$26070[rsp], rax
  00220	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00229	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$26070[rsp]
  0022e	e8 00 00 00 00	 call	 _Py_DecRef
$LN559@obj2ast_ex:
  00233	33 c0		 xor	 eax, eax
  00235	85 c0		 test	 eax, eax
  00237	75 ab		 jne	 SHORT $LN562@obj2ast_ex

; 4809 :     } else {

  00239	eb 1d		 jmp	 SHORT $LN558@obj2ast_ex
$LN565@obj2ast_ex:

; 4810 :         PyErr_SetString(PyExc_TypeError, "required field \"col_offset\" missing from expr");

  0023b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@IEOFEKON@required?5field?5?$CCcol_offset?$CC?5miss@
  00242	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00249	e8 00 00 00 00	 call	 PyErr_SetString

; 4811 :         return 1;

  0024e	b8 01 00 00 00	 mov	 eax, 1
  00253	e9 23 55 00 00	 jmp	 $LN575@obj2ast_ex
$LN558@obj2ast_ex:

; 4812 :     }
; 4813 :     isinstance = PyObject_IsInstance(obj, (PyObject*)BoolOp_type);

  00258	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR BoolOp_type
  0025f	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00267	e8 00 00 00 00	 call	 PyObject_IsInstance
  0026c	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 4814 :     if (isinstance == -1) {

  00270	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00275	75 0a		 jne	 SHORT $LN557@obj2ast_ex

; 4815 :         return 1;

  00277	b8 01 00 00 00	 mov	 eax, 1
  0027c	e9 fa 54 00 00	 jmp	 $LN575@obj2ast_ex
$LN557@obj2ast_ex:

; 4816 :     }
; 4817 :     if (isinstance) {

  00281	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00286	0f 84 9c 03 00
	00		 je	 $LN556@obj2ast_ex

; 4818 :         boolop_ty op;
; 4819 :         asdl_seq* values;
; 4820 : 
; 4821 :         if (_PyObject_HasAttrId(obj, &PyId_op)) {

  0028c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  00291	8b c0		 mov	 eax, eax
  00293	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00299	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002a2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002a6	48 8b d0	 mov	 rdx, rax
  002a9	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  002b1	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  002b6	85 c0		 test	 eax, eax
  002b8	0f 84 c9 00 00
	00		 je	 $LN555@obj2ast_ex

; 4822 :             int res;
; 4823 :             tmp = _PyObject_GetAttrId(obj, &PyId_op);

  002be	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  002c3	8b c0		 mov	 eax, eax
  002c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002cb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002d4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002d8	48 8b d0	 mov	 rdx, rax
  002db	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  002e3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  002e8	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4824 :             if (tmp == NULL) goto failed;

  002ed	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  002f3	75 05		 jne	 SHORT $LN554@obj2ast_ex
  002f5	e9 64 54 00 00	 jmp	 $failed$26048
$LN554@obj2ast_ex:

; 4825 :             res = obj2ast_boolop(tmp, &op, arena);

  002fa	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00302	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR op$26079[rsp]
  0030a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  0030f	e8 00 00 00 00	 call	 obj2ast_boolop
  00314	89 84 24 84 00
	00 00		 mov	 DWORD PTR res$26082[rsp], eax

; 4826 :             if (res != 0) goto failed;

  0031b	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR res$26082[rsp], 0
  00323	74 05		 je	 SHORT $LN553@obj2ast_ex
  00325	e9 34 54 00 00	 jmp	 $failed$26048
$LN553@obj2ast_ex:
$LN552@obj2ast_ex:

; 4827 :             Py_CLEAR(tmp);

  0032a	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00330	74 4d		 je	 SHORT $LN549@obj2ast_ex
  00332	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0033a	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0033f	41 b8 db 12 00
	00		 mov	 r8d, 4827		; 000012dbH
  00345	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0034c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00353	e8 00 00 00 00	 call	 _PyParallel_Guard
  00358	85 c0		 test	 eax, eax
  0035a	75 23		 jne	 SHORT $LN549@obj2ast_ex
  0035c	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00361	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _py_tmp$26090[rsp], rax
  00369	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00372	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$26090[rsp]
  0037a	e8 00 00 00 00	 call	 _Py_DecRef
$LN549@obj2ast_ex:
  0037f	33 c0		 xor	 eax, eax
  00381	85 c0		 test	 eax, eax
  00383	75 a5		 jne	 SHORT $LN552@obj2ast_ex

; 4828 :         } else {

  00385	eb 1d		 jmp	 SHORT $LN548@obj2ast_ex
$LN555@obj2ast_ex:

; 4829 :             PyErr_SetString(PyExc_TypeError, "required field \"op\" missing from BoolOp");

  00387	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@HBNHBKDM@required?5field?5?$CCop?$CC?5missing?5from@
  0038e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00395	e8 00 00 00 00	 call	 PyErr_SetString

; 4830 :             return 1;

  0039a	b8 01 00 00 00	 mov	 eax, 1
  0039f	e9 d7 53 00 00	 jmp	 $LN575@obj2ast_ex
$LN548@obj2ast_ex:

; 4831 :         }
; 4832 :         if (_PyObject_HasAttrId(obj, &PyId_values)) {

  003a4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_values
  003a9	8b c0		 mov	 eax, eax
  003ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003b1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003ba	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003be	48 8b d0	 mov	 rdx, rax
  003c1	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  003c9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  003ce	85 c0		 test	 eax, eax
  003d0	0f 84 e8 01 00
	00		 je	 $LN547@obj2ast_ex

; 4833 :             int res;
; 4834 :             Py_ssize_t len;
; 4835 :             Py_ssize_t i;
; 4836 :             tmp = _PyObject_GetAttrId(obj, &PyId_values);

  003d6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_values
  003db	8b c0		 mov	 eax, eax
  003dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003e3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003ec	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003f0	48 8b d0	 mov	 rdx, rax
  003f3	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  003fb	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00400	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4837 :             if (tmp == NULL) goto failed;

  00405	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0040b	75 05		 jne	 SHORT $LN546@obj2ast_ex
  0040d	e9 4c 53 00 00	 jmp	 $failed$26048
$LN546@obj2ast_ex:

; 4838 :             if (!PyList_Check(tmp)) {

  00412	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00417	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0041b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00421	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00426	85 c0		 test	 eax, eax
  00428	75 25		 jne	 SHORT $LN545@obj2ast_ex

; 4839 :                 PyErr_Format(PyExc_TypeError, "BoolOp field \"values\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0042a	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0042f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00433	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00437	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@BPOBLELF@BoolOp?5field?5?$CCvalues?$CC?5must?5be?5a?5@
  0043e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00445	e8 00 00 00 00	 call	 PyErr_Format

; 4840 :                 goto failed;

  0044a	e9 0f 53 00 00	 jmp	 $failed$26048
$LN545@obj2ast_ex:

; 4841 :             }
; 4842 :             len = PyList_GET_SIZE(tmp);

  0044f	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00454	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00458	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR len$26098[rsp], rax

; 4843 :             values = asdl_seq_new(len, arena);

  00460	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00468	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR len$26098[rsp]
  00470	e8 00 00 00 00	 call	 asdl_seq_new
  00475	48 89 44 24 78	 mov	 QWORD PTR values$26080[rsp], rax

; 4844 :             if (values == NULL) goto failed;

  0047a	48 83 7c 24 78
	00		 cmp	 QWORD PTR values$26080[rsp], 0
  00480	75 05		 jne	 SHORT $LN544@obj2ast_ex
  00482	e9 d7 52 00 00	 jmp	 $failed$26048
$LN544@obj2ast_ex:

; 4845 :             for (i = 0; i < len; i++) {

  00487	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$26099[rsp], 0
  00493	eb 13		 jmp	 SHORT $LN543@obj2ast_ex
$LN542@obj2ast_ex:
  00495	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$26099[rsp]
  0049d	48 ff c0	 inc	 rax
  004a0	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR i$26099[rsp], rax
$LN543@obj2ast_ex:
  004a8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR len$26098[rsp]
  004b0	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR i$26099[rsp], rax
  004b8	0f 8d a3 00 00
	00		 jge	 $LN541@obj2ast_ex

; 4846 :                 expr_ty value;
; 4847 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  004be	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  004c3	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  004c7	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  004cf	48 8d 94 24 a8
	00 00 00	 lea	 rdx, QWORD PTR value$26111[rsp]
  004d7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i$26099[rsp]
  004df	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  004e3	e8 00 00 00 00	 call	 obj2ast_expr
  004e8	89 84 24 90 00
	00 00		 mov	 DWORD PTR res$26097[rsp], eax

; 4848 :                 if (res != 0) goto failed;

  004ef	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR res$26097[rsp], 0
  004f7	74 05		 je	 SHORT $LN540@obj2ast_ex
  004f9	e9 60 52 00 00	 jmp	 $failed$26048
$LN540@obj2ast_ex:

; 4849 :                 asdl_seq_SET(values, i, value);

  004fe	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR i$26099[rsp]
  00505	89 84 24 b0 00
	00 00		 mov	 DWORD PTR _asdl_i$26114[rsp], eax
  0050c	48 83 7c 24 78
	00		 cmp	 QWORD PTR values$26080[rsp], 0
  00512	74 12		 je	 SHORT $LN577@obj2ast_ex
  00514	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26114[rsp]
  0051c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR values$26080[rsp]
  00521	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  00524	7c 1c		 jl	 SHORT $LN578@obj2ast_ex
$LN577@obj2ast_ex:
  00526	41 b8 f1 12 00
	00		 mov	 r8d, 4849		; 000012f1H
  0052c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  00533	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@IHPOJLHM@?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO@
  0053a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00540	33 c0		 xor	 eax, eax
$LN578@obj2ast_ex:
  00542	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26114[rsp]
  0054a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR values$26080[rsp]
  0054f	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR value$26111[rsp]
  00557	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 4850 :             }

  0055c	e9 34 ff ff ff	 jmp	 $LN542@obj2ast_ex
$LN541@obj2ast_ex:
$LN539@obj2ast_ex:

; 4851 :             Py_CLEAR(tmp);

  00561	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00567	74 4d		 je	 SHORT $LN536@obj2ast_ex
  00569	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00571	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  00576	41 b8 f3 12 00
	00		 mov	 r8d, 4851		; 000012f3H
  0057c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00583	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0058a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0058f	85 c0		 test	 eax, eax
  00591	75 23		 jne	 SHORT $LN536@obj2ast_ex
  00593	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00598	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR _py_tmp$26121[rsp], rax
  005a0	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  005a9	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$26121[rsp]
  005b1	e8 00 00 00 00	 call	 _Py_DecRef
$LN536@obj2ast_ex:
  005b6	33 c0		 xor	 eax, eax
  005b8	85 c0		 test	 eax, eax
  005ba	75 a5		 jne	 SHORT $LN539@obj2ast_ex

; 4852 :         } else {

  005bc	eb 1d		 jmp	 SHORT $LN535@obj2ast_ex
$LN547@obj2ast_ex:

; 4853 :             PyErr_SetString(PyExc_TypeError, "required field \"values\" missing from BoolOp");

  005be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IMGNJCMM@required?5field?5?$CCvalues?$CC?5missing?5@
  005c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  005cc	e8 00 00 00 00	 call	 PyErr_SetString

; 4854 :             return 1;

  005d1	b8 01 00 00 00	 mov	 eax, 1
  005d6	e9 a0 51 00 00	 jmp	 $LN575@obj2ast_ex
$LN535@obj2ast_ex:

; 4855 :         }
; 4856 :         *out = BoolOp(op, values, lineno, col_offset, arena);

  005db	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  005e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005e8	44 8b 4c 24 50	 mov	 r9d, DWORD PTR col_offset$[rsp]
  005ed	44 8b 44 24 40	 mov	 r8d, DWORD PTR lineno$[rsp]
  005f2	48 8b 54 24 78	 mov	 rdx, QWORD PTR values$26080[rsp]
  005f7	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR op$26079[rsp]
  005fe	e8 00 00 00 00	 call	 _Py_BoolOp
  00603	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  0060b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4857 :         if (*out == NULL) goto failed;

  0060e	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00616	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0061a	75 05		 jne	 SHORT $LN534@obj2ast_ex
  0061c	e9 3d 51 00 00	 jmp	 $failed$26048
$LN534@obj2ast_ex:

; 4858 :         return 0;

  00621	33 c0		 xor	 eax, eax
  00623	e9 53 51 00 00	 jmp	 $LN575@obj2ast_ex
$LN556@obj2ast_ex:

; 4859 :     }
; 4860 :     isinstance = PyObject_IsInstance(obj, (PyObject*)BinOp_type);

  00628	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR BinOp_type
  0062f	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00637	e8 00 00 00 00	 call	 PyObject_IsInstance
  0063c	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 4861 :     if (isinstance == -1) {

  00640	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00645	75 0a		 jne	 SHORT $LN533@obj2ast_ex

; 4862 :         return 1;

  00647	b8 01 00 00 00	 mov	 eax, 1
  0064c	e9 2a 51 00 00	 jmp	 $LN575@obj2ast_ex
$LN533@obj2ast_ex:

; 4863 :     }
; 4864 :     if (isinstance) {

  00651	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00656	0f 84 a3 03 00
	00		 je	 $LN532@obj2ast_ex

; 4865 :         expr_ty left;
; 4866 :         operator_ty op;
; 4867 :         expr_ty right;
; 4868 : 
; 4869 :         if (_PyObject_HasAttrId(obj, &PyId_left)) {

  0065c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_left
  00661	8b c0		 mov	 eax, eax
  00663	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00669	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00672	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00676	48 8b d0	 mov	 rdx, rax
  00679	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00681	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00686	85 c0		 test	 eax, eax
  00688	0f 84 c9 00 00
	00		 je	 $LN531@obj2ast_ex

; 4870 :             int res;
; 4871 :             tmp = _PyObject_GetAttrId(obj, &PyId_left);

  0068e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_left
  00693	8b c0		 mov	 eax, eax
  00695	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0069b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  006a4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  006a8	48 8b d0	 mov	 rdx, rax
  006ab	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  006b3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  006b8	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4872 :             if (tmp == NULL) goto failed;

  006bd	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  006c3	75 05		 jne	 SHORT $LN530@obj2ast_ex
  006c5	e9 94 50 00 00	 jmp	 $failed$26048
$LN530@obj2ast_ex:

; 4873 :             res = obj2ast_expr(tmp, &left, arena);

  006ca	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  006d2	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR left$26132[rsp]
  006da	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  006df	e8 00 00 00 00	 call	 obj2ast_expr
  006e4	89 84 24 d4 00
	00 00		 mov	 DWORD PTR res$26136[rsp], eax

; 4874 :             if (res != 0) goto failed;

  006eb	83 bc 24 d4 00
	00 00 00	 cmp	 DWORD PTR res$26136[rsp], 0
  006f3	74 05		 je	 SHORT $LN529@obj2ast_ex
  006f5	e9 64 50 00 00	 jmp	 $failed$26048
$LN529@obj2ast_ex:
$LN528@obj2ast_ex:

; 4875 :             Py_CLEAR(tmp);

  006fa	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00700	74 4d		 je	 SHORT $LN525@obj2ast_ex
  00702	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0070a	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0070f	41 b8 0b 13 00
	00		 mov	 r8d, 4875		; 0000130bH
  00715	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0071c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00723	e8 00 00 00 00	 call	 _PyParallel_Guard
  00728	85 c0		 test	 eax, eax
  0072a	75 23		 jne	 SHORT $LN525@obj2ast_ex
  0072c	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00731	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR _py_tmp$26144[rsp], rax
  00739	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00742	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$26144[rsp]
  0074a	e8 00 00 00 00	 call	 _Py_DecRef
$LN525@obj2ast_ex:
  0074f	33 c0		 xor	 eax, eax
  00751	85 c0		 test	 eax, eax
  00753	75 a5		 jne	 SHORT $LN528@obj2ast_ex

; 4876 :         } else {

  00755	eb 1d		 jmp	 SHORT $LN524@obj2ast_ex
$LN531@obj2ast_ex:

; 4877 :             PyErr_SetString(PyExc_TypeError, "required field \"left\" missing from BinOp");

  00757	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@IMIJKKKN@required?5field?5?$CCleft?$CC?5missing?5fr@
  0075e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00765	e8 00 00 00 00	 call	 PyErr_SetString

; 4878 :             return 1;

  0076a	b8 01 00 00 00	 mov	 eax, 1
  0076f	e9 07 50 00 00	 jmp	 $LN575@obj2ast_ex
$LN524@obj2ast_ex:

; 4879 :         }
; 4880 :         if (_PyObject_HasAttrId(obj, &PyId_op)) {

  00774	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  00779	8b c0		 mov	 eax, eax
  0077b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00781	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0078a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0078e	48 8b d0	 mov	 rdx, rax
  00791	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00799	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0079e	85 c0		 test	 eax, eax
  007a0	0f 84 c9 00 00
	00		 je	 $LN523@obj2ast_ex

; 4881 :             int res;
; 4882 :             tmp = _PyObject_GetAttrId(obj, &PyId_op);

  007a6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  007ab	8b c0		 mov	 eax, eax
  007ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  007b3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  007bc	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  007c0	48 8b d0	 mov	 rdx, rax
  007c3	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  007cb	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  007d0	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4883 :             if (tmp == NULL) goto failed;

  007d5	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  007db	75 05		 jne	 SHORT $LN522@obj2ast_ex
  007dd	e9 7c 4f 00 00	 jmp	 $failed$26048
$LN522@obj2ast_ex:

; 4884 :             res = obj2ast_operator(tmp, &op, arena);

  007e2	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  007ea	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR op$26133[rsp]
  007f2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  007f7	e8 00 00 00 00	 call	 obj2ast_operator
  007fc	89 84 24 e0 00
	00 00		 mov	 DWORD PTR res$26151[rsp], eax

; 4885 :             if (res != 0) goto failed;

  00803	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR res$26151[rsp], 0
  0080b	74 05		 je	 SHORT $LN521@obj2ast_ex
  0080d	e9 4c 4f 00 00	 jmp	 $failed$26048
$LN521@obj2ast_ex:
$LN520@obj2ast_ex:

; 4886 :             Py_CLEAR(tmp);

  00812	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00818	74 4d		 je	 SHORT $LN517@obj2ast_ex
  0081a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00822	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  00827	41 b8 16 13 00
	00		 mov	 r8d, 4886		; 00001316H
  0082d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00834	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0083b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00840	85 c0		 test	 eax, eax
  00842	75 23		 jne	 SHORT $LN517@obj2ast_ex
  00844	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00849	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR _py_tmp$26159[rsp], rax
  00851	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0085a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$26159[rsp]
  00862	e8 00 00 00 00	 call	 _Py_DecRef
$LN517@obj2ast_ex:
  00867	33 c0		 xor	 eax, eax
  00869	85 c0		 test	 eax, eax
  0086b	75 a5		 jne	 SHORT $LN520@obj2ast_ex

; 4887 :         } else {

  0086d	eb 1d		 jmp	 SHORT $LN516@obj2ast_ex
$LN523@obj2ast_ex:

; 4888 :             PyErr_SetString(PyExc_TypeError, "required field \"op\" missing from BinOp");

  0086f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@GDLDIEDI@required?5field?5?$CCop?$CC?5missing?5from@
  00876	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0087d	e8 00 00 00 00	 call	 PyErr_SetString

; 4889 :             return 1;

  00882	b8 01 00 00 00	 mov	 eax, 1
  00887	e9 ef 4e 00 00	 jmp	 $LN575@obj2ast_ex
$LN516@obj2ast_ex:

; 4890 :         }
; 4891 :         if (_PyObject_HasAttrId(obj, &PyId_right)) {

  0088c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_right
  00891	8b c0		 mov	 eax, eax
  00893	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00899	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  008a2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  008a6	48 8b d0	 mov	 rdx, rax
  008a9	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  008b1	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  008b6	85 c0		 test	 eax, eax
  008b8	0f 84 c9 00 00
	00		 je	 $LN515@obj2ast_ex

; 4892 :             int res;
; 4893 :             tmp = _PyObject_GetAttrId(obj, &PyId_right);

  008be	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_right
  008c3	8b c0		 mov	 eax, eax
  008c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  008cb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  008d4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  008d8	48 8b d0	 mov	 rdx, rax
  008db	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  008e3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  008e8	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4894 :             if (tmp == NULL) goto failed;

  008ed	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  008f3	75 05		 jne	 SHORT $LN514@obj2ast_ex
  008f5	e9 64 4e 00 00	 jmp	 $failed$26048
$LN514@obj2ast_ex:

; 4895 :             res = obj2ast_expr(tmp, &right, arena);

  008fa	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00902	48 8d 94 24 c8
	00 00 00	 lea	 rdx, QWORD PTR right$26134[rsp]
  0090a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  0090f	e8 00 00 00 00	 call	 obj2ast_expr
  00914	89 84 24 f0 00
	00 00		 mov	 DWORD PTR res$26166[rsp], eax

; 4896 :             if (res != 0) goto failed;

  0091b	83 bc 24 f0 00
	00 00 00	 cmp	 DWORD PTR res$26166[rsp], 0
  00923	74 05		 je	 SHORT $LN513@obj2ast_ex
  00925	e9 34 4e 00 00	 jmp	 $failed$26048
$LN513@obj2ast_ex:
$LN512@obj2ast_ex:

; 4897 :             Py_CLEAR(tmp);

  0092a	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00930	74 4d		 je	 SHORT $LN509@obj2ast_ex
  00932	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0093a	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0093f	41 b8 21 13 00
	00		 mov	 r8d, 4897		; 00001321H
  00945	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0094c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00953	e8 00 00 00 00	 call	 _PyParallel_Guard
  00958	85 c0		 test	 eax, eax
  0095a	75 23		 jne	 SHORT $LN509@obj2ast_ex
  0095c	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00961	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR _py_tmp$26174[rsp], rax
  00969	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00972	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$26174[rsp]
  0097a	e8 00 00 00 00	 call	 _Py_DecRef
$LN509@obj2ast_ex:
  0097f	33 c0		 xor	 eax, eax
  00981	85 c0		 test	 eax, eax
  00983	75 a5		 jne	 SHORT $LN512@obj2ast_ex

; 4898 :         } else {

  00985	eb 1d		 jmp	 SHORT $LN508@obj2ast_ex
$LN515@obj2ast_ex:

; 4899 :             PyErr_SetString(PyExc_TypeError, "required field \"right\" missing from BinOp");

  00987	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@CPLHPBCE@required?5field?5?$CCright?$CC?5missing?5f@
  0098e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00995	e8 00 00 00 00	 call	 PyErr_SetString

; 4900 :             return 1;

  0099a	b8 01 00 00 00	 mov	 eax, 1
  0099f	e9 d7 4d 00 00	 jmp	 $LN575@obj2ast_ex
$LN508@obj2ast_ex:

; 4901 :         }
; 4902 :         *out = BinOp(left, op, right, lineno, col_offset, arena);

  009a4	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  009ac	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  009b1	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  009b5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  009b9	44 8b 4c 24 40	 mov	 r9d, DWORD PTR lineno$[rsp]
  009be	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR right$26134[rsp]
  009c6	8b 94 24 d0 00
	00 00		 mov	 edx, DWORD PTR op$26133[rsp]
  009cd	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR left$26132[rsp]
  009d5	e8 00 00 00 00	 call	 _Py_BinOp
  009da	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  009e2	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4903 :         if (*out == NULL) goto failed;

  009e5	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  009ed	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  009f1	75 05		 jne	 SHORT $LN507@obj2ast_ex
  009f3	e9 66 4d 00 00	 jmp	 $failed$26048
$LN507@obj2ast_ex:

; 4904 :         return 0;

  009f8	33 c0		 xor	 eax, eax
  009fa	e9 7c 4d 00 00	 jmp	 $LN575@obj2ast_ex
$LN532@obj2ast_ex:

; 4905 :     }
; 4906 :     isinstance = PyObject_IsInstance(obj, (PyObject*)UnaryOp_type);

  009ff	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR UnaryOp_type
  00a06	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00a0e	e8 00 00 00 00	 call	 PyObject_IsInstance
  00a13	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 4907 :     if (isinstance == -1) {

  00a17	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00a1c	75 0a		 jne	 SHORT $LN506@obj2ast_ex

; 4908 :         return 1;

  00a1e	b8 01 00 00 00	 mov	 eax, 1
  00a23	e9 53 4d 00 00	 jmp	 $LN575@obj2ast_ex
$LN506@obj2ast_ex:

; 4909 :     }
; 4910 :     if (isinstance) {

  00a28	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00a2d	0f 84 80 02 00
	00		 je	 $LN505@obj2ast_ex

; 4911 :         unaryop_ty op;
; 4912 :         expr_ty operand;
; 4913 : 
; 4914 :         if (_PyObject_HasAttrId(obj, &PyId_op)) {

  00a33	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  00a38	8b c0		 mov	 eax, eax
  00a3a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00a40	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00a49	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00a4d	48 8b d0	 mov	 rdx, rax
  00a50	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00a58	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00a5d	85 c0		 test	 eax, eax
  00a5f	0f 84 c9 00 00
	00		 je	 $LN504@obj2ast_ex

; 4915 :             int res;
; 4916 :             tmp = _PyObject_GetAttrId(obj, &PyId_op);

  00a65	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_op
  00a6a	8b c0		 mov	 eax, eax
  00a6c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00a72	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00a7b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00a7f	48 8b d0	 mov	 rdx, rax
  00a82	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00a8a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00a8f	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4917 :             if (tmp == NULL) goto failed;

  00a94	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00a9a	75 05		 jne	 SHORT $LN503@obj2ast_ex
  00a9c	e9 bd 4c 00 00	 jmp	 $failed$26048
$LN503@obj2ast_ex:

; 4918 :             res = obj2ast_unaryop(tmp, &op, arena);

  00aa1	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00aa9	48 8d 94 24 08
	01 00 00	 lea	 rdx, QWORD PTR op$26185[rsp]
  00ab1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  00ab6	e8 00 00 00 00	 call	 obj2ast_unaryop
  00abb	89 84 24 0c 01
	00 00		 mov	 DWORD PTR res$26188[rsp], eax

; 4919 :             if (res != 0) goto failed;

  00ac2	83 bc 24 0c 01
	00 00 00	 cmp	 DWORD PTR res$26188[rsp], 0
  00aca	74 05		 je	 SHORT $LN502@obj2ast_ex
  00acc	e9 8d 4c 00 00	 jmp	 $failed$26048
$LN502@obj2ast_ex:
$LN501@obj2ast_ex:

; 4920 :             Py_CLEAR(tmp);

  00ad1	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00ad7	74 4d		 je	 SHORT $LN498@obj2ast_ex
  00ad9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00ae1	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  00ae6	41 b8 38 13 00
	00		 mov	 r8d, 4920		; 00001338H
  00aec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00af3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00afa	e8 00 00 00 00	 call	 _PyParallel_Guard
  00aff	85 c0		 test	 eax, eax
  00b01	75 23		 jne	 SHORT $LN498@obj2ast_ex
  00b03	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00b08	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR _py_tmp$26196[rsp], rax
  00b10	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00b19	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$26196[rsp]
  00b21	e8 00 00 00 00	 call	 _Py_DecRef
$LN498@obj2ast_ex:
  00b26	33 c0		 xor	 eax, eax
  00b28	85 c0		 test	 eax, eax
  00b2a	75 a5		 jne	 SHORT $LN501@obj2ast_ex

; 4921 :         } else {

  00b2c	eb 1d		 jmp	 SHORT $LN497@obj2ast_ex
$LN504@obj2ast_ex:

; 4922 :             PyErr_SetString(PyExc_TypeError, "required field \"op\" missing from UnaryOp");

  00b2e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@MPIFKMKO@required?5field?5?$CCop?$CC?5missing?5from@
  00b35	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00b3c	e8 00 00 00 00	 call	 PyErr_SetString

; 4923 :             return 1;

  00b41	b8 01 00 00 00	 mov	 eax, 1
  00b46	e9 30 4c 00 00	 jmp	 $LN575@obj2ast_ex
$LN497@obj2ast_ex:

; 4924 :         }
; 4925 :         if (_PyObject_HasAttrId(obj, &PyId_operand)) {

  00b4b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_operand
  00b50	8b c0		 mov	 eax, eax
  00b52	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00b58	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00b61	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00b65	48 8b d0	 mov	 rdx, rax
  00b68	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00b70	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00b75	85 c0		 test	 eax, eax
  00b77	0f 84 c9 00 00
	00		 je	 $LN496@obj2ast_ex

; 4926 :             int res;
; 4927 :             tmp = _PyObject_GetAttrId(obj, &PyId_operand);

  00b7d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_operand
  00b82	8b c0		 mov	 eax, eax
  00b84	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00b8a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00b93	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00b97	48 8b d0	 mov	 rdx, rax
  00b9a	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00ba2	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00ba7	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4928 :             if (tmp == NULL) goto failed;

  00bac	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00bb2	75 05		 jne	 SHORT $LN495@obj2ast_ex
  00bb4	e9 a5 4b 00 00	 jmp	 $failed$26048
$LN495@obj2ast_ex:

; 4929 :             res = obj2ast_expr(tmp, &operand, arena);

  00bb9	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00bc1	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR operand$26186[rsp]
  00bc9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  00bce	e8 00 00 00 00	 call	 obj2ast_expr
  00bd3	89 84 24 18 01
	00 00		 mov	 DWORD PTR res$26203[rsp], eax

; 4930 :             if (res != 0) goto failed;

  00bda	83 bc 24 18 01
	00 00 00	 cmp	 DWORD PTR res$26203[rsp], 0
  00be2	74 05		 je	 SHORT $LN494@obj2ast_ex
  00be4	e9 75 4b 00 00	 jmp	 $failed$26048
$LN494@obj2ast_ex:
$LN493@obj2ast_ex:

; 4931 :             Py_CLEAR(tmp);

  00be9	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00bef	74 4d		 je	 SHORT $LN490@obj2ast_ex
  00bf1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00bf9	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  00bfe	41 b8 43 13 00
	00		 mov	 r8d, 4931		; 00001343H
  00c04	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00c0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00c12	e8 00 00 00 00	 call	 _PyParallel_Guard
  00c17	85 c0		 test	 eax, eax
  00c19	75 23		 jne	 SHORT $LN490@obj2ast_ex
  00c1b	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00c20	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR _py_tmp$26211[rsp], rax
  00c28	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00c31	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$26211[rsp]
  00c39	e8 00 00 00 00	 call	 _Py_DecRef
$LN490@obj2ast_ex:
  00c3e	33 c0		 xor	 eax, eax
  00c40	85 c0		 test	 eax, eax
  00c42	75 a5		 jne	 SHORT $LN493@obj2ast_ex

; 4932 :         } else {

  00c44	eb 1d		 jmp	 SHORT $LN489@obj2ast_ex
$LN496@obj2ast_ex:

; 4933 :             PyErr_SetString(PyExc_TypeError, "required field \"operand\" missing from UnaryOp");

  00c46	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@CAINBGKB@required?5field?5?$CCoperand?$CC?5missing@
  00c4d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00c54	e8 00 00 00 00	 call	 PyErr_SetString

; 4934 :             return 1;

  00c59	b8 01 00 00 00	 mov	 eax, 1
  00c5e	e9 18 4b 00 00	 jmp	 $LN575@obj2ast_ex
$LN489@obj2ast_ex:

; 4935 :         }
; 4936 :         *out = UnaryOp(op, operand, lineno, col_offset, arena);

  00c63	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  00c6b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c70	44 8b 4c 24 50	 mov	 r9d, DWORD PTR col_offset$[rsp]
  00c75	44 8b 44 24 40	 mov	 r8d, DWORD PTR lineno$[rsp]
  00c7a	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR operand$26186[rsp]
  00c82	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR op$26185[rsp]
  00c89	e8 00 00 00 00	 call	 _Py_UnaryOp
  00c8e	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00c96	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4937 :         if (*out == NULL) goto failed;

  00c99	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00ca1	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00ca5	75 05		 jne	 SHORT $LN488@obj2ast_ex
  00ca7	e9 b2 4a 00 00	 jmp	 $failed$26048
$LN488@obj2ast_ex:

; 4938 :         return 0;

  00cac	33 c0		 xor	 eax, eax
  00cae	e9 c8 4a 00 00	 jmp	 $LN575@obj2ast_ex
$LN505@obj2ast_ex:

; 4939 :     }
; 4940 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Lambda_type);

  00cb3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Lambda_type
  00cba	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00cc2	e8 00 00 00 00	 call	 PyObject_IsInstance
  00cc7	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 4941 :     if (isinstance == -1) {

  00ccb	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00cd0	75 0a		 jne	 SHORT $LN487@obj2ast_ex

; 4942 :         return 1;

  00cd2	b8 01 00 00 00	 mov	 eax, 1
  00cd7	e9 9f 4a 00 00	 jmp	 $LN575@obj2ast_ex
$LN487@obj2ast_ex:

; 4943 :     }
; 4944 :     if (isinstance) {

  00cdc	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00ce1	0f 84 81 02 00
	00		 je	 $LN486@obj2ast_ex

; 4945 :         arguments_ty args;
; 4946 :         expr_ty body;
; 4947 : 
; 4948 :         if (_PyObject_HasAttrId(obj, &PyId_args)) {

  00ce7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  00cec	8b c0		 mov	 eax, eax
  00cee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00cf4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00cfd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00d01	48 8b d0	 mov	 rdx, rax
  00d04	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00d0c	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00d11	85 c0		 test	 eax, eax
  00d13	0f 84 c9 00 00
	00		 je	 $LN485@obj2ast_ex

; 4949 :             int res;
; 4950 :             tmp = _PyObject_GetAttrId(obj, &PyId_args);

  00d19	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  00d1e	8b c0		 mov	 eax, eax
  00d20	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00d26	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00d2f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00d33	48 8b d0	 mov	 rdx, rax
  00d36	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00d3e	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00d43	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4951 :             if (tmp == NULL) goto failed;

  00d48	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00d4e	75 05		 jne	 SHORT $LN484@obj2ast_ex
  00d50	e9 09 4a 00 00	 jmp	 $failed$26048
$LN484@obj2ast_ex:

; 4952 :             res = obj2ast_arguments(tmp, &args, arena);

  00d55	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00d5d	48 8d 94 24 28
	01 00 00	 lea	 rdx, QWORD PTR args$26222[rsp]
  00d65	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  00d6a	e8 00 00 00 00	 call	 obj2ast_arguments
  00d6f	89 84 24 38 01
	00 00		 mov	 DWORD PTR res$26225[rsp], eax

; 4953 :             if (res != 0) goto failed;

  00d76	83 bc 24 38 01
	00 00 00	 cmp	 DWORD PTR res$26225[rsp], 0
  00d7e	74 05		 je	 SHORT $LN483@obj2ast_ex
  00d80	e9 d9 49 00 00	 jmp	 $failed$26048
$LN483@obj2ast_ex:
$LN482@obj2ast_ex:

; 4954 :             Py_CLEAR(tmp);

  00d85	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00d8b	74 4d		 je	 SHORT $LN479@obj2ast_ex
  00d8d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00d95	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  00d9a	41 b8 5a 13 00
	00		 mov	 r8d, 4954		; 0000135aH
  00da0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00da7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00dae	e8 00 00 00 00	 call	 _PyParallel_Guard
  00db3	85 c0		 test	 eax, eax
  00db5	75 23		 jne	 SHORT $LN479@obj2ast_ex
  00db7	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00dbc	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR _py_tmp$26233[rsp], rax
  00dc4	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00dcd	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$26233[rsp]
  00dd5	e8 00 00 00 00	 call	 _Py_DecRef
$LN479@obj2ast_ex:
  00dda	33 c0		 xor	 eax, eax
  00ddc	85 c0		 test	 eax, eax
  00dde	75 a5		 jne	 SHORT $LN482@obj2ast_ex

; 4955 :         } else {

  00de0	eb 1d		 jmp	 SHORT $LN478@obj2ast_ex
$LN485@obj2ast_ex:

; 4956 :             PyErr_SetString(PyExc_TypeError, "required field \"args\" missing from Lambda");

  00de2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@JPMNMIAM@required?5field?5?$CCargs?$CC?5missing?5fr@
  00de9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00df0	e8 00 00 00 00	 call	 PyErr_SetString

; 4957 :             return 1;

  00df5	b8 01 00 00 00	 mov	 eax, 1
  00dfa	e9 7c 49 00 00	 jmp	 $LN575@obj2ast_ex
$LN478@obj2ast_ex:

; 4958 :         }
; 4959 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  00dff	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  00e04	8b c0		 mov	 eax, eax
  00e06	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00e0c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00e15	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00e19	48 8b d0	 mov	 rdx, rax
  00e1c	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00e24	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00e29	85 c0		 test	 eax, eax
  00e2b	0f 84 c9 00 00
	00		 je	 $LN477@obj2ast_ex

; 4960 :             int res;
; 4961 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  00e31	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  00e36	8b c0		 mov	 eax, eax
  00e38	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00e3e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00e47	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00e4b	48 8b d0	 mov	 rdx, rax
  00e4e	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00e56	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00e5b	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4962 :             if (tmp == NULL) goto failed;

  00e60	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00e66	75 05		 jne	 SHORT $LN476@obj2ast_ex
  00e68	e9 f1 48 00 00	 jmp	 $failed$26048
$LN476@obj2ast_ex:

; 4963 :             res = obj2ast_expr(tmp, &body, arena);

  00e6d	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00e75	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR body$26223[rsp]
  00e7d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  00e82	e8 00 00 00 00	 call	 obj2ast_expr
  00e87	89 84 24 48 01
	00 00		 mov	 DWORD PTR res$26240[rsp], eax

; 4964 :             if (res != 0) goto failed;

  00e8e	83 bc 24 48 01
	00 00 00	 cmp	 DWORD PTR res$26240[rsp], 0
  00e96	74 05		 je	 SHORT $LN475@obj2ast_ex
  00e98	e9 c1 48 00 00	 jmp	 $failed$26048
$LN475@obj2ast_ex:
$LN474@obj2ast_ex:

; 4965 :             Py_CLEAR(tmp);

  00e9d	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00ea3	74 4d		 je	 SHORT $LN471@obj2ast_ex
  00ea5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00ead	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  00eb2	41 b8 65 13 00
	00		 mov	 r8d, 4965		; 00001365H
  00eb8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00ebf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  00ec6	e8 00 00 00 00	 call	 _PyParallel_Guard
  00ecb	85 c0		 test	 eax, eax
  00ecd	75 23		 jne	 SHORT $LN471@obj2ast_ex
  00ecf	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  00ed4	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR _py_tmp$26248[rsp], rax
  00edc	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00ee5	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$26248[rsp]
  00eed	e8 00 00 00 00	 call	 _Py_DecRef
$LN471@obj2ast_ex:
  00ef2	33 c0		 xor	 eax, eax
  00ef4	85 c0		 test	 eax, eax
  00ef6	75 a5		 jne	 SHORT $LN474@obj2ast_ex

; 4966 :         } else {

  00ef8	eb 1d		 jmp	 SHORT $LN470@obj2ast_ex
$LN477@obj2ast_ex:

; 4967 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Lambda");

  00efa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@PCIBHCDP@required?5field?5?$CCbody?$CC?5missing?5fr@
  00f01	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00f08	e8 00 00 00 00	 call	 PyErr_SetString

; 4968 :             return 1;

  00f0d	b8 01 00 00 00	 mov	 eax, 1
  00f12	e9 64 48 00 00	 jmp	 $LN575@obj2ast_ex
$LN470@obj2ast_ex:

; 4969 :         }
; 4970 :         *out = Lambda(args, body, lineno, col_offset, arena);

  00f17	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  00f1f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f24	44 8b 4c 24 50	 mov	 r9d, DWORD PTR col_offset$[rsp]
  00f29	44 8b 44 24 40	 mov	 r8d, DWORD PTR lineno$[rsp]
  00f2e	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR body$26223[rsp]
  00f36	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR args$26222[rsp]
  00f3e	e8 00 00 00 00	 call	 _Py_Lambda
  00f43	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00f4b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 4971 :         if (*out == NULL) goto failed;

  00f4e	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00f56	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00f5a	75 05		 jne	 SHORT $LN469@obj2ast_ex
  00f5c	e9 fd 47 00 00	 jmp	 $failed$26048
$LN469@obj2ast_ex:

; 4972 :         return 0;

  00f61	33 c0		 xor	 eax, eax
  00f63	e9 13 48 00 00	 jmp	 $LN575@obj2ast_ex
$LN486@obj2ast_ex:

; 4973 :     }
; 4974 :     isinstance = PyObject_IsInstance(obj, (PyObject*)IfExp_type);

  00f68	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR IfExp_type
  00f6f	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00f77	e8 00 00 00 00	 call	 PyObject_IsInstance
  00f7c	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 4975 :     if (isinstance == -1) {

  00f80	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00f85	75 0a		 jne	 SHORT $LN468@obj2ast_ex

; 4976 :         return 1;

  00f87	b8 01 00 00 00	 mov	 eax, 1
  00f8c	e9 ea 47 00 00	 jmp	 $LN575@obj2ast_ex
$LN468@obj2ast_ex:

; 4977 :     }
; 4978 :     if (isinstance) {

  00f91	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00f96	0f 84 a4 03 00
	00		 je	 $LN467@obj2ast_ex

; 4979 :         expr_ty test;
; 4980 :         expr_ty body;
; 4981 :         expr_ty orelse;
; 4982 : 
; 4983 :         if (_PyObject_HasAttrId(obj, &PyId_test)) {

  00f9c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  00fa1	8b c0		 mov	 eax, eax
  00fa3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00fa9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00fb2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00fb6	48 8b d0	 mov	 rdx, rax
  00fb9	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00fc1	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00fc6	85 c0		 test	 eax, eax
  00fc8	0f 84 c9 00 00
	00		 je	 $LN466@obj2ast_ex

; 4984 :             int res;
; 4985 :             tmp = _PyObject_GetAttrId(obj, &PyId_test);

  00fce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_test
  00fd3	8b c0		 mov	 eax, eax
  00fd5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00fdb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00fe4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00fe8	48 8b d0	 mov	 rdx, rax
  00feb	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00ff3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00ff8	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4986 :             if (tmp == NULL) goto failed;

  00ffd	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01003	75 05		 jne	 SHORT $LN465@obj2ast_ex
  01005	e9 54 47 00 00	 jmp	 $failed$26048
$LN465@obj2ast_ex:

; 4987 :             res = obj2ast_expr(tmp, &test, arena);

  0100a	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  01012	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR test$26259[rsp]
  0101a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  0101f	e8 00 00 00 00	 call	 obj2ast_expr
  01024	89 84 24 70 01
	00 00		 mov	 DWORD PTR res$26263[rsp], eax

; 4988 :             if (res != 0) goto failed;

  0102b	83 bc 24 70 01
	00 00 00	 cmp	 DWORD PTR res$26263[rsp], 0
  01033	74 05		 je	 SHORT $LN464@obj2ast_ex
  01035	e9 24 47 00 00	 jmp	 $failed$26048
$LN464@obj2ast_ex:
$LN463@obj2ast_ex:

; 4989 :             Py_CLEAR(tmp);

  0103a	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01040	74 4d		 je	 SHORT $LN460@obj2ast_ex
  01042	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0104a	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0104f	41 b8 7d 13 00
	00		 mov	 r8d, 4989		; 0000137dH
  01055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0105c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01063	e8 00 00 00 00	 call	 _PyParallel_Guard
  01068	85 c0		 test	 eax, eax
  0106a	75 23		 jne	 SHORT $LN460@obj2ast_ex
  0106c	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01071	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR _py_tmp$26271[rsp], rax
  01079	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  01082	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$26271[rsp]
  0108a	e8 00 00 00 00	 call	 _Py_DecRef
$LN460@obj2ast_ex:
  0108f	33 c0		 xor	 eax, eax
  01091	85 c0		 test	 eax, eax
  01093	75 a5		 jne	 SHORT $LN463@obj2ast_ex

; 4990 :         } else {

  01095	eb 1d		 jmp	 SHORT $LN459@obj2ast_ex
$LN466@obj2ast_ex:

; 4991 :             PyErr_SetString(PyExc_TypeError, "required field \"test\" missing from IfExp");

  01097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@NMEIGPEH@required?5field?5?$CCtest?$CC?5missing?5fr@
  0109e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  010a5	e8 00 00 00 00	 call	 PyErr_SetString

; 4992 :             return 1;

  010aa	b8 01 00 00 00	 mov	 eax, 1
  010af	e9 c7 46 00 00	 jmp	 $LN575@obj2ast_ex
$LN459@obj2ast_ex:

; 4993 :         }
; 4994 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  010b4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  010b9	8b c0		 mov	 eax, eax
  010bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  010c1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  010ca	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  010ce	48 8b d0	 mov	 rdx, rax
  010d1	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  010d9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  010de	85 c0		 test	 eax, eax
  010e0	0f 84 c9 00 00
	00		 je	 $LN458@obj2ast_ex

; 4995 :             int res;
; 4996 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  010e6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  010eb	8b c0		 mov	 eax, eax
  010ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  010f3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  010fc	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01100	48 8b d0	 mov	 rdx, rax
  01103	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0110b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01110	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 4997 :             if (tmp == NULL) goto failed;

  01115	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0111b	75 05		 jne	 SHORT $LN457@obj2ast_ex
  0111d	e9 3c 46 00 00	 jmp	 $failed$26048
$LN457@obj2ast_ex:

; 4998 :             res = obj2ast_expr(tmp, &body, arena);

  01122	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0112a	48 8d 94 24 58
	01 00 00	 lea	 rdx, QWORD PTR body$26260[rsp]
  01132	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  01137	e8 00 00 00 00	 call	 obj2ast_expr
  0113c	89 84 24 80 01
	00 00		 mov	 DWORD PTR res$26278[rsp], eax

; 4999 :             if (res != 0) goto failed;

  01143	83 bc 24 80 01
	00 00 00	 cmp	 DWORD PTR res$26278[rsp], 0
  0114b	74 05		 je	 SHORT $LN456@obj2ast_ex
  0114d	e9 0c 46 00 00	 jmp	 $failed$26048
$LN456@obj2ast_ex:
$LN455@obj2ast_ex:

; 5000 :             Py_CLEAR(tmp);

  01152	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01158	74 4d		 je	 SHORT $LN452@obj2ast_ex
  0115a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01162	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  01167	41 b8 88 13 00
	00		 mov	 r8d, 5000		; 00001388H
  0116d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0117b	e8 00 00 00 00	 call	 _PyParallel_Guard
  01180	85 c0		 test	 eax, eax
  01182	75 23		 jne	 SHORT $LN452@obj2ast_ex
  01184	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01189	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR _py_tmp$26286[rsp], rax
  01191	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0119a	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$26286[rsp]
  011a2	e8 00 00 00 00	 call	 _Py_DecRef
$LN452@obj2ast_ex:
  011a7	33 c0		 xor	 eax, eax
  011a9	85 c0		 test	 eax, eax
  011ab	75 a5		 jne	 SHORT $LN455@obj2ast_ex

; 5001 :         } else {

  011ad	eb 1d		 jmp	 SHORT $LN451@obj2ast_ex
$LN458@obj2ast_ex:

; 5002 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from IfExp");

  011af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@GBLDBLBM@required?5field?5?$CCbody?$CC?5missing?5fr@
  011b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  011bd	e8 00 00 00 00	 call	 PyErr_SetString

; 5003 :             return 1;

  011c2	b8 01 00 00 00	 mov	 eax, 1
  011c7	e9 af 45 00 00	 jmp	 $LN575@obj2ast_ex
$LN451@obj2ast_ex:

; 5004 :         }
; 5005 :         if (_PyObject_HasAttrId(obj, &PyId_orelse)) {

  011cc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  011d1	8b c0		 mov	 eax, eax
  011d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  011d9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  011e2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  011e6	48 8b d0	 mov	 rdx, rax
  011e9	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  011f1	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  011f6	85 c0		 test	 eax, eax
  011f8	0f 84 c9 00 00
	00		 je	 $LN450@obj2ast_ex

; 5006 :             int res;
; 5007 :             tmp = _PyObject_GetAttrId(obj, &PyId_orelse);

  011fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_orelse
  01203	8b c0		 mov	 eax, eax
  01205	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0120b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01214	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01218	48 8b d0	 mov	 rdx, rax
  0121b	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01223	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01228	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5008 :             if (tmp == NULL) goto failed;

  0122d	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01233	75 05		 jne	 SHORT $LN449@obj2ast_ex
  01235	e9 24 45 00 00	 jmp	 $failed$26048
$LN449@obj2ast_ex:

; 5009 :             res = obj2ast_expr(tmp, &orelse, arena);

  0123a	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  01242	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR orelse$26261[rsp]
  0124a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  0124f	e8 00 00 00 00	 call	 obj2ast_expr
  01254	89 84 24 90 01
	00 00		 mov	 DWORD PTR res$26293[rsp], eax

; 5010 :             if (res != 0) goto failed;

  0125b	83 bc 24 90 01
	00 00 00	 cmp	 DWORD PTR res$26293[rsp], 0
  01263	74 05		 je	 SHORT $LN448@obj2ast_ex
  01265	e9 f4 44 00 00	 jmp	 $failed$26048
$LN448@obj2ast_ex:
$LN447@obj2ast_ex:

; 5011 :             Py_CLEAR(tmp);

  0126a	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01270	74 4d		 je	 SHORT $LN444@obj2ast_ex
  01272	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0127a	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0127f	41 b8 93 13 00
	00		 mov	 r8d, 5011		; 00001393H
  01285	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0128c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01293	e8 00 00 00 00	 call	 _PyParallel_Guard
  01298	85 c0		 test	 eax, eax
  0129a	75 23		 jne	 SHORT $LN444@obj2ast_ex
  0129c	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  012a1	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR _py_tmp$26301[rsp], rax
  012a9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  012b2	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$26301[rsp]
  012ba	e8 00 00 00 00	 call	 _Py_DecRef
$LN444@obj2ast_ex:
  012bf	33 c0		 xor	 eax, eax
  012c1	85 c0		 test	 eax, eax
  012c3	75 a5		 jne	 SHORT $LN447@obj2ast_ex

; 5012 :         } else {

  012c5	eb 1d		 jmp	 SHORT $LN443@obj2ast_ex
$LN450@obj2ast_ex:

; 5013 :             PyErr_SetString(PyExc_TypeError, "required field \"orelse\" missing from IfExp");

  012c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@DNEAKDOO@required?5field?5?$CCorelse?$CC?5missing?5@
  012ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  012d5	e8 00 00 00 00	 call	 PyErr_SetString

; 5014 :             return 1;

  012da	b8 01 00 00 00	 mov	 eax, 1
  012df	e9 97 44 00 00	 jmp	 $LN575@obj2ast_ex
$LN443@obj2ast_ex:

; 5015 :         }
; 5016 :         *out = IfExp(test, body, orelse, lineno, col_offset, arena);

  012e4	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  012ec	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  012f1	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  012f5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  012f9	44 8b 4c 24 40	 mov	 r9d, DWORD PTR lineno$[rsp]
  012fe	4c 8b 84 24 68
	01 00 00	 mov	 r8, QWORD PTR orelse$26261[rsp]
  01306	48 8b 94 24 58
	01 00 00	 mov	 rdx, QWORD PTR body$26260[rsp]
  0130e	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR test$26259[rsp]
  01316	e8 00 00 00 00	 call	 _Py_IfExp
  0131b	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  01323	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5017 :         if (*out == NULL) goto failed;

  01326	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  0132e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01332	75 05		 jne	 SHORT $LN442@obj2ast_ex
  01334	e9 25 44 00 00	 jmp	 $failed$26048
$LN442@obj2ast_ex:

; 5018 :         return 0;

  01339	33 c0		 xor	 eax, eax
  0133b	e9 3b 44 00 00	 jmp	 $LN575@obj2ast_ex
$LN467@obj2ast_ex:

; 5019 :     }
; 5020 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Dict_type);

  01340	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Dict_type
  01347	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0134f	e8 00 00 00 00	 call	 PyObject_IsInstance
  01354	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5021 :     if (isinstance == -1) {

  01358	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0135d	75 0a		 jne	 SHORT $LN441@obj2ast_ex

; 5022 :         return 1;

  0135f	b8 01 00 00 00	 mov	 eax, 1
  01364	e9 12 44 00 00	 jmp	 $LN575@obj2ast_ex
$LN441@obj2ast_ex:

; 5023 :     }
; 5024 :     if (isinstance) {

  01369	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0136e	0f 84 dd 04 00
	00		 je	 $LN440@obj2ast_ex

; 5025 :         asdl_seq* keys;
; 5026 :         asdl_seq* values;
; 5027 : 
; 5028 :         if (_PyObject_HasAttrId(obj, &PyId_keys)) {

  01374	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_keys
  01379	8b c0		 mov	 eax, eax
  0137b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01381	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0138a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0138e	48 8b d0	 mov	 rdx, rax
  01391	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01399	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0139e	85 c0		 test	 eax, eax
  013a0	0f 84 f7 01 00
	00		 je	 $LN439@obj2ast_ex

; 5029 :             int res;
; 5030 :             Py_ssize_t len;
; 5031 :             Py_ssize_t i;
; 5032 :             tmp = _PyObject_GetAttrId(obj, &PyId_keys);

  013a6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_keys
  013ab	8b c0		 mov	 eax, eax
  013ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  013b3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  013bc	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  013c0	48 8b d0	 mov	 rdx, rax
  013c3	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  013cb	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  013d0	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5033 :             if (tmp == NULL) goto failed;

  013d5	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  013db	75 05		 jne	 SHORT $LN438@obj2ast_ex
  013dd	e9 7c 43 00 00	 jmp	 $failed$26048
$LN438@obj2ast_ex:

; 5034 :             if (!PyList_Check(tmp)) {

  013e2	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  013e7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  013eb	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  013f1	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  013f6	85 c0		 test	 eax, eax
  013f8	75 25		 jne	 SHORT $LN437@obj2ast_ex

; 5035 :                 PyErr_Format(PyExc_TypeError, "Dict field \"keys\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  013fa	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  013ff	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01403	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  01407	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@EGMKHIJH@Dict?5field?5?$CCkeys?$CC?5must?5be?5a?5list@
  0140e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01415	e8 00 00 00 00	 call	 PyErr_Format

; 5036 :                 goto failed;

  0141a	e9 3f 43 00 00	 jmp	 $failed$26048
$LN437@obj2ast_ex:

; 5037 :             }
; 5038 :             len = PyList_GET_SIZE(tmp);

  0141f	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01424	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  01428	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR len$26316[rsp], rax

; 5039 :             keys = asdl_seq_new(len, arena);

  01430	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  01438	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR len$26316[rsp]
  01440	e8 00 00 00 00	 call	 asdl_seq_new
  01445	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR keys$26312[rsp], rax

; 5040 :             if (keys == NULL) goto failed;

  0144d	48 83 bc 24 a8
	01 00 00 00	 cmp	 QWORD PTR keys$26312[rsp], 0
  01456	75 05		 jne	 SHORT $LN436@obj2ast_ex
  01458	e9 01 43 00 00	 jmp	 $failed$26048
$LN436@obj2ast_ex:

; 5041 :             for (i = 0; i < len; i++) {

  0145d	48 c7 84 24 b8
	01 00 00 00 00
	00 00		 mov	 QWORD PTR i$26317[rsp], 0
  01469	eb 13		 jmp	 SHORT $LN435@obj2ast_ex
$LN434@obj2ast_ex:
  0146b	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR i$26317[rsp]
  01473	48 ff c0	 inc	 rax
  01476	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR i$26317[rsp], rax
$LN435@obj2ast_ex:
  0147e	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR len$26316[rsp]
  01486	48 39 84 24 b8
	01 00 00	 cmp	 QWORD PTR i$26317[rsp], rax
  0148e	0f 8d ac 00 00
	00		 jge	 $LN433@obj2ast_ex

; 5042 :                 expr_ty value;
; 5043 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  01494	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01499	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0149d	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  014a5	48 8d 94 24 c8
	01 00 00	 lea	 rdx, QWORD PTR value$26329[rsp]
  014ad	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR i$26317[rsp]
  014b5	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  014b9	e8 00 00 00 00	 call	 obj2ast_expr
  014be	89 84 24 b0 01
	00 00		 mov	 DWORD PTR res$26315[rsp], eax

; 5044 :                 if (res != 0) goto failed;

  014c5	83 bc 24 b0 01
	00 00 00	 cmp	 DWORD PTR res$26315[rsp], 0
  014cd	74 05		 je	 SHORT $LN432@obj2ast_ex
  014cf	e9 8a 42 00 00	 jmp	 $failed$26048
$LN432@obj2ast_ex:

; 5045 :                 asdl_seq_SET(keys, i, value);

  014d4	8b 84 24 b8 01
	00 00		 mov	 eax, DWORD PTR i$26317[rsp]
  014db	89 84 24 d0 01
	00 00		 mov	 DWORD PTR _asdl_i$26332[rsp], eax
  014e2	48 83 bc 24 a8
	01 00 00 00	 cmp	 QWORD PTR keys$26312[rsp], 0
  014eb	74 15		 je	 SHORT $LN579@obj2ast_ex
  014ed	48 63 84 24 d0
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26332[rsp]
  014f5	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR keys$26312[rsp]
  014fd	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  01500	7c 1c		 jl	 SHORT $LN580@obj2ast_ex
$LN579@obj2ast_ex:
  01502	41 b8 b5 13 00
	00		 mov	 r8d, 5045		; 000013b5H
  01508	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  0150f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@NADANMCL@?$AA?$CI?$AAk?$AAe?$AAy?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAe?$AAy?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  01516	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0151c	33 c0		 xor	 eax, eax
$LN580@obj2ast_ex:
  0151e	48 63 84 24 d0
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26332[rsp]
  01526	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR keys$26312[rsp]
  0152e	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR value$26329[rsp]
  01536	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5046 :             }

  0153b	e9 2b ff ff ff	 jmp	 $LN434@obj2ast_ex
$LN433@obj2ast_ex:
$LN431@obj2ast_ex:

; 5047 :             Py_CLEAR(tmp);

  01540	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01546	74 4d		 je	 SHORT $LN428@obj2ast_ex
  01548	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01550	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  01555	41 b8 b7 13 00
	00		 mov	 r8d, 5047		; 000013b7H
  0155b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01562	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01569	e8 00 00 00 00	 call	 _PyParallel_Guard
  0156e	85 c0		 test	 eax, eax
  01570	75 23		 jne	 SHORT $LN428@obj2ast_ex
  01572	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01577	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR _py_tmp$26339[rsp], rax
  0157f	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  01588	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$26339[rsp]
  01590	e8 00 00 00 00	 call	 _Py_DecRef
$LN428@obj2ast_ex:
  01595	33 c0		 xor	 eax, eax
  01597	85 c0		 test	 eax, eax
  01599	75 a5		 jne	 SHORT $LN431@obj2ast_ex

; 5048 :         } else {

  0159b	eb 1d		 jmp	 SHORT $LN427@obj2ast_ex
$LN439@obj2ast_ex:

; 5049 :             PyErr_SetString(PyExc_TypeError, "required field \"keys\" missing from Dict");

  0159d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@JMGLEFIH@required?5field?5?$CCkeys?$CC?5missing?5fr@
  015a4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  015ab	e8 00 00 00 00	 call	 PyErr_SetString

; 5050 :             return 1;

  015b0	b8 01 00 00 00	 mov	 eax, 1
  015b5	e9 c1 41 00 00	 jmp	 $LN575@obj2ast_ex
$LN427@obj2ast_ex:

; 5051 :         }
; 5052 :         if (_PyObject_HasAttrId(obj, &PyId_values)) {

  015ba	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_values
  015bf	8b c0		 mov	 eax, eax
  015c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  015c7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  015d0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  015d4	48 8b d0	 mov	 rdx, rax
  015d7	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  015df	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  015e4	85 c0		 test	 eax, eax
  015e6	0f 84 f7 01 00
	00		 je	 $LN426@obj2ast_ex

; 5053 :             int res;
; 5054 :             Py_ssize_t len;
; 5055 :             Py_ssize_t i;
; 5056 :             tmp = _PyObject_GetAttrId(obj, &PyId_values);

  015ec	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_values
  015f1	8b c0		 mov	 eax, eax
  015f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  015f9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01602	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01606	48 8b d0	 mov	 rdx, rax
  01609	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01611	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01616	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5057 :             if (tmp == NULL) goto failed;

  0161b	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01621	75 05		 jne	 SHORT $LN425@obj2ast_ex
  01623	e9 36 41 00 00	 jmp	 $failed$26048
$LN425@obj2ast_ex:

; 5058 :             if (!PyList_Check(tmp)) {

  01628	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0162d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01631	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01637	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0163c	85 c0		 test	 eax, eax
  0163e	75 25		 jne	 SHORT $LN424@obj2ast_ex

; 5059 :                 PyErr_Format(PyExc_TypeError, "Dict field \"values\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01640	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01645	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01649	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0164d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@GGCPIMOJ@Dict?5field?5?$CCvalues?$CC?5must?5be?5a?5li@
  01654	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0165b	e8 00 00 00 00	 call	 PyErr_Format

; 5060 :                 goto failed;

  01660	e9 f9 40 00 00	 jmp	 $failed$26048
$LN424@obj2ast_ex:

; 5061 :             }
; 5062 :             len = PyList_GET_SIZE(tmp);

  01665	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0166a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0166e	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR len$26347[rsp], rax

; 5063 :             values = asdl_seq_new(len, arena);

  01676	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  0167e	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR len$26347[rsp]
  01686	e8 00 00 00 00	 call	 asdl_seq_new
  0168b	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR values$26313[rsp], rax

; 5064 :             if (values == NULL) goto failed;

  01693	48 83 bc 24 a0
	01 00 00 00	 cmp	 QWORD PTR values$26313[rsp], 0
  0169c	75 05		 jne	 SHORT $LN423@obj2ast_ex
  0169e	e9 bb 40 00 00	 jmp	 $failed$26048
$LN423@obj2ast_ex:

; 5065 :             for (i = 0; i < len; i++) {

  016a3	48 c7 84 24 e8
	01 00 00 00 00
	00 00		 mov	 QWORD PTR i$26348[rsp], 0
  016af	eb 13		 jmp	 SHORT $LN422@obj2ast_ex
$LN421@obj2ast_ex:
  016b1	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR i$26348[rsp]
  016b9	48 ff c0	 inc	 rax
  016bc	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR i$26348[rsp], rax
$LN422@obj2ast_ex:
  016c4	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR len$26347[rsp]
  016cc	48 39 84 24 e8
	01 00 00	 cmp	 QWORD PTR i$26348[rsp], rax
  016d4	0f 8d ac 00 00
	00		 jge	 $LN420@obj2ast_ex

; 5066 :                 expr_ty value;
; 5067 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  016da	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  016df	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  016e3	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  016eb	48 8d 94 24 f8
	01 00 00	 lea	 rdx, QWORD PTR value$26360[rsp]
  016f3	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR i$26348[rsp]
  016fb	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  016ff	e8 00 00 00 00	 call	 obj2ast_expr
  01704	89 84 24 e0 01
	00 00		 mov	 DWORD PTR res$26346[rsp], eax

; 5068 :                 if (res != 0) goto failed;

  0170b	83 bc 24 e0 01
	00 00 00	 cmp	 DWORD PTR res$26346[rsp], 0
  01713	74 05		 je	 SHORT $LN419@obj2ast_ex
  01715	e9 44 40 00 00	 jmp	 $failed$26048
$LN419@obj2ast_ex:

; 5069 :                 asdl_seq_SET(values, i, value);

  0171a	8b 84 24 e8 01
	00 00		 mov	 eax, DWORD PTR i$26348[rsp]
  01721	89 84 24 00 02
	00 00		 mov	 DWORD PTR _asdl_i$26363[rsp], eax
  01728	48 83 bc 24 a0
	01 00 00 00	 cmp	 QWORD PTR values$26313[rsp], 0
  01731	74 15		 je	 SHORT $LN581@obj2ast_ex
  01733	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26363[rsp]
  0173b	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR values$26313[rsp]
  01743	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  01746	7c 1c		 jl	 SHORT $LN582@obj2ast_ex
$LN581@obj2ast_ex:
  01748	41 b8 cd 13 00
	00		 mov	 r8d, 5069		; 000013cdH
  0174e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  01755	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@IHPOJLHM@?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CJ?$AA?9?$AA?$DO@
  0175c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01762	33 c0		 xor	 eax, eax
$LN582@obj2ast_ex:
  01764	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26363[rsp]
  0176c	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR values$26313[rsp]
  01774	48 8b 94 24 f8
	01 00 00	 mov	 rdx, QWORD PTR value$26360[rsp]
  0177c	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5070 :             }

  01781	e9 2b ff ff ff	 jmp	 $LN421@obj2ast_ex
$LN420@obj2ast_ex:
$LN418@obj2ast_ex:

; 5071 :             Py_CLEAR(tmp);

  01786	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0178c	74 4d		 je	 SHORT $LN415@obj2ast_ex
  0178e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01796	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0179b	41 b8 cf 13 00
	00		 mov	 r8d, 5071		; 000013cfH
  017a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  017a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  017af	e8 00 00 00 00	 call	 _PyParallel_Guard
  017b4	85 c0		 test	 eax, eax
  017b6	75 23		 jne	 SHORT $LN415@obj2ast_ex
  017b8	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  017bd	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR _py_tmp$26369[rsp], rax
  017c5	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  017ce	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$26369[rsp]
  017d6	e8 00 00 00 00	 call	 _Py_DecRef
$LN415@obj2ast_ex:
  017db	33 c0		 xor	 eax, eax
  017dd	85 c0		 test	 eax, eax
  017df	75 a5		 jne	 SHORT $LN418@obj2ast_ex

; 5072 :         } else {

  017e1	eb 1d		 jmp	 SHORT $LN414@obj2ast_ex
$LN426@obj2ast_ex:

; 5073 :             PyErr_SetString(PyExc_TypeError, "required field \"values\" missing from Dict");

  017e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@CCGGNJEC@required?5field?5?$CCvalues?$CC?5missing?5@
  017ea	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  017f1	e8 00 00 00 00	 call	 PyErr_SetString

; 5074 :             return 1;

  017f6	b8 01 00 00 00	 mov	 eax, 1
  017fb	e9 7b 3f 00 00	 jmp	 $LN575@obj2ast_ex
$LN414@obj2ast_ex:

; 5075 :         }
; 5076 :         *out = Dict(keys, values, lineno, col_offset, arena);

  01800	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  01808	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0180d	44 8b 4c 24 50	 mov	 r9d, DWORD PTR col_offset$[rsp]
  01812	44 8b 44 24 40	 mov	 r8d, DWORD PTR lineno$[rsp]
  01817	48 8b 94 24 a0
	01 00 00	 mov	 rdx, QWORD PTR values$26313[rsp]
  0181f	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR keys$26312[rsp]
  01827	e8 00 00 00 00	 call	 _Py_Dict
  0182c	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  01834	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5077 :         if (*out == NULL) goto failed;

  01837	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  0183f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01843	75 05		 jne	 SHORT $LN413@obj2ast_ex
  01845	e9 14 3f 00 00	 jmp	 $failed$26048
$LN413@obj2ast_ex:

; 5078 :         return 0;

  0184a	33 c0		 xor	 eax, eax
  0184c	e9 2a 3f 00 00	 jmp	 $LN575@obj2ast_ex
$LN440@obj2ast_ex:

; 5079 :     }
; 5080 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Set_type);

  01851	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Set_type
  01858	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01860	e8 00 00 00 00	 call	 PyObject_IsInstance
  01865	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5081 :     if (isinstance == -1) {

  01869	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0186e	75 0a		 jne	 SHORT $LN412@obj2ast_ex

; 5082 :         return 1;

  01870	b8 01 00 00 00	 mov	 eax, 1
  01875	e9 01 3f 00 00	 jmp	 $LN575@obj2ast_ex
$LN412@obj2ast_ex:

; 5083 :     }
; 5084 :     if (isinstance) {

  0187a	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0187f	0f 84 89 02 00
	00		 je	 $LN411@obj2ast_ex

; 5085 :         asdl_seq* elts;
; 5086 : 
; 5087 :         if (_PyObject_HasAttrId(obj, &PyId_elts)) {

  01885	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elts
  0188a	8b c0		 mov	 eax, eax
  0188c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01892	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0189b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0189f	48 8b d0	 mov	 rdx, rax
  018a2	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  018aa	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  018af	85 c0		 test	 eax, eax
  018b1	0f 84 f7 01 00
	00		 je	 $LN410@obj2ast_ex

; 5088 :             int res;
; 5089 :             Py_ssize_t len;
; 5090 :             Py_ssize_t i;
; 5091 :             tmp = _PyObject_GetAttrId(obj, &PyId_elts);

  018b7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elts
  018bc	8b c0		 mov	 eax, eax
  018be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  018c4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  018cd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  018d1	48 8b d0	 mov	 rdx, rax
  018d4	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  018dc	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  018e1	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5092 :             if (tmp == NULL) goto failed;

  018e6	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  018ec	75 05		 jne	 SHORT $LN409@obj2ast_ex
  018ee	e9 6b 3e 00 00	 jmp	 $failed$26048
$LN409@obj2ast_ex:

; 5093 :             if (!PyList_Check(tmp)) {

  018f3	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  018f8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  018fc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01902	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  01907	85 c0		 test	 eax, eax
  01909	75 25		 jne	 SHORT $LN408@obj2ast_ex

; 5094 :                 PyErr_Format(PyExc_TypeError, "Set field \"elts\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0190b	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01910	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01914	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  01918	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@KGPNPPNE@Set?5field?5?$CCelts?$CC?5must?5be?5a?5list?0@
  0191f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01926	e8 00 00 00 00	 call	 PyErr_Format

; 5095 :                 goto failed;

  0192b	e9 2e 3e 00 00	 jmp	 $failed$26048
$LN408@obj2ast_ex:

; 5096 :             }
; 5097 :             len = PyList_GET_SIZE(tmp);

  01930	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01935	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  01939	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR len$26383[rsp], rax

; 5098 :             elts = asdl_seq_new(len, arena);

  01941	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  01949	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR len$26383[rsp]
  01951	e8 00 00 00 00	 call	 asdl_seq_new
  01956	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR elts$26380[rsp], rax

; 5099 :             if (elts == NULL) goto failed;

  0195e	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR elts$26380[rsp], 0
  01967	75 05		 jne	 SHORT $LN407@obj2ast_ex
  01969	e9 f0 3d 00 00	 jmp	 $failed$26048
$LN407@obj2ast_ex:

; 5100 :             for (i = 0; i < len; i++) {

  0196e	48 c7 84 24 20
	02 00 00 00 00
	00 00		 mov	 QWORD PTR i$26384[rsp], 0
  0197a	eb 13		 jmp	 SHORT $LN406@obj2ast_ex
$LN405@obj2ast_ex:
  0197c	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR i$26384[rsp]
  01984	48 ff c0	 inc	 rax
  01987	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR i$26384[rsp], rax
$LN406@obj2ast_ex:
  0198f	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR len$26383[rsp]
  01997	48 39 84 24 20
	02 00 00	 cmp	 QWORD PTR i$26384[rsp], rax
  0199f	0f 8d ac 00 00
	00		 jge	 $LN404@obj2ast_ex

; 5101 :                 expr_ty value;
; 5102 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  019a5	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  019aa	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  019ae	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  019b6	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR value$26396[rsp]
  019be	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR i$26384[rsp]
  019c6	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  019ca	e8 00 00 00 00	 call	 obj2ast_expr
  019cf	89 84 24 18 02
	00 00		 mov	 DWORD PTR res$26382[rsp], eax

; 5103 :                 if (res != 0) goto failed;

  019d6	83 bc 24 18 02
	00 00 00	 cmp	 DWORD PTR res$26382[rsp], 0
  019de	74 05		 je	 SHORT $LN403@obj2ast_ex
  019e0	e9 79 3d 00 00	 jmp	 $failed$26048
$LN403@obj2ast_ex:

; 5104 :                 asdl_seq_SET(elts, i, value);

  019e5	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR i$26384[rsp]
  019ec	89 84 24 38 02
	00 00		 mov	 DWORD PTR _asdl_i$26399[rsp], eax
  019f3	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR elts$26380[rsp], 0
  019fc	74 15		 je	 SHORT $LN583@obj2ast_ex
  019fe	48 63 84 24 38
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26399[rsp]
  01a06	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR elts$26380[rsp]
  01a0e	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  01a11	7c 1c		 jl	 SHORT $LN584@obj2ast_ex
$LN583@obj2ast_ex:
  01a13	41 b8 f0 13 00
	00		 mov	 r8d, 5104		; 000013f0H
  01a19	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  01a20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@CNCMENEB@?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  01a27	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01a2d	33 c0		 xor	 eax, eax
$LN584@obj2ast_ex:
  01a2f	48 63 84 24 38
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26399[rsp]
  01a37	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR elts$26380[rsp]
  01a3f	48 8b 94 24 30
	02 00 00	 mov	 rdx, QWORD PTR value$26396[rsp]
  01a47	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5105 :             }

  01a4c	e9 2b ff ff ff	 jmp	 $LN405@obj2ast_ex
$LN404@obj2ast_ex:
$LN402@obj2ast_ex:

; 5106 :             Py_CLEAR(tmp);

  01a51	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01a57	74 4d		 je	 SHORT $LN399@obj2ast_ex
  01a59	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01a61	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  01a66	41 b8 f2 13 00
	00		 mov	 r8d, 5106		; 000013f2H
  01a6c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01a73	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01a7a	e8 00 00 00 00	 call	 _PyParallel_Guard
  01a7f	85 c0		 test	 eax, eax
  01a81	75 23		 jne	 SHORT $LN399@obj2ast_ex
  01a83	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01a88	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR _py_tmp$26406[rsp], rax
  01a90	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  01a99	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$26406[rsp]
  01aa1	e8 00 00 00 00	 call	 _Py_DecRef
$LN399@obj2ast_ex:
  01aa6	33 c0		 xor	 eax, eax
  01aa8	85 c0		 test	 eax, eax
  01aaa	75 a5		 jne	 SHORT $LN402@obj2ast_ex

; 5107 :         } else {

  01aac	eb 1d		 jmp	 SHORT $LN398@obj2ast_ex
$LN410@obj2ast_ex:

; 5108 :             PyErr_SetString(PyExc_TypeError, "required field \"elts\" missing from Set");

  01aae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@BPLFHEPK@required?5field?5?$CCelts?$CC?5missing?5fr@
  01ab5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01abc	e8 00 00 00 00	 call	 PyErr_SetString

; 5109 :             return 1;

  01ac1	b8 01 00 00 00	 mov	 eax, 1
  01ac6	e9 b0 3c 00 00	 jmp	 $LN575@obj2ast_ex
$LN398@obj2ast_ex:

; 5110 :         }
; 5111 :         *out = Set(elts, lineno, col_offset, arena);

  01acb	4c 8b 8c 24 e0
	06 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  01ad3	44 8b 44 24 50	 mov	 r8d, DWORD PTR col_offset$[rsp]
  01ad8	8b 54 24 40	 mov	 edx, DWORD PTR lineno$[rsp]
  01adc	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR elts$26380[rsp]
  01ae4	e8 00 00 00 00	 call	 _Py_Set
  01ae9	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  01af1	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5112 :         if (*out == NULL) goto failed;

  01af4	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  01afc	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01b00	75 05		 jne	 SHORT $LN397@obj2ast_ex
  01b02	e9 57 3c 00 00	 jmp	 $failed$26048
$LN397@obj2ast_ex:

; 5113 :         return 0;

  01b07	33 c0		 xor	 eax, eax
  01b09	e9 6d 3c 00 00	 jmp	 $LN575@obj2ast_ex
$LN411@obj2ast_ex:

; 5114 :     }
; 5115 :     isinstance = PyObject_IsInstance(obj, (PyObject*)ListComp_type);

  01b0e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ListComp_type
  01b15	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01b1d	e8 00 00 00 00	 call	 PyObject_IsInstance
  01b22	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5116 :     if (isinstance == -1) {

  01b26	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  01b2b	75 0a		 jne	 SHORT $LN396@obj2ast_ex

; 5117 :         return 1;

  01b2d	b8 01 00 00 00	 mov	 eax, 1
  01b32	e9 44 3c 00 00	 jmp	 $LN575@obj2ast_ex
$LN396@obj2ast_ex:

; 5118 :     }
; 5119 :     if (isinstance) {

  01b37	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  01b3c	0f 84 af 03 00
	00		 je	 $LN395@obj2ast_ex

; 5120 :         expr_ty elt;
; 5121 :         asdl_seq* generators;
; 5122 : 
; 5123 :         if (_PyObject_HasAttrId(obj, &PyId_elt)) {

  01b42	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elt
  01b47	8b c0		 mov	 eax, eax
  01b49	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01b4f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01b58	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01b5c	48 8b d0	 mov	 rdx, rax
  01b5f	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01b67	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01b6c	85 c0		 test	 eax, eax
  01b6e	0f 84 c9 00 00
	00		 je	 $LN394@obj2ast_ex

; 5124 :             int res;
; 5125 :             tmp = _PyObject_GetAttrId(obj, &PyId_elt);

  01b74	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elt
  01b79	8b c0		 mov	 eax, eax
  01b7b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01b81	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01b8a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01b8e	48 8b d0	 mov	 rdx, rax
  01b91	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01b99	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01b9e	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5126 :             if (tmp == NULL) goto failed;

  01ba3	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01ba9	75 05		 jne	 SHORT $LN393@obj2ast_ex
  01bab	e9 ae 3b 00 00	 jmp	 $failed$26048
$LN393@obj2ast_ex:

; 5127 :             res = obj2ast_expr(tmp, &elt, arena);

  01bb0	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  01bb8	48 8d 94 24 48
	02 00 00	 lea	 rdx, QWORD PTR elt$26417[rsp]
  01bc0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  01bc5	e8 00 00 00 00	 call	 obj2ast_expr
  01bca	89 84 24 58 02
	00 00		 mov	 DWORD PTR res$26420[rsp], eax

; 5128 :             if (res != 0) goto failed;

  01bd1	83 bc 24 58 02
	00 00 00	 cmp	 DWORD PTR res$26420[rsp], 0
  01bd9	74 05		 je	 SHORT $LN392@obj2ast_ex
  01bdb	e9 7e 3b 00 00	 jmp	 $failed$26048
$LN392@obj2ast_ex:
$LN391@obj2ast_ex:

; 5129 :             Py_CLEAR(tmp);

  01be0	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01be6	74 4d		 je	 SHORT $LN388@obj2ast_ex
  01be8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01bf0	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  01bf5	41 b8 09 14 00
	00		 mov	 r8d, 5129		; 00001409H
  01bfb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01c02	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01c09	e8 00 00 00 00	 call	 _PyParallel_Guard
  01c0e	85 c0		 test	 eax, eax
  01c10	75 23		 jne	 SHORT $LN388@obj2ast_ex
  01c12	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01c17	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR _py_tmp$26428[rsp], rax
  01c1f	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  01c28	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$26428[rsp]
  01c30	e8 00 00 00 00	 call	 _Py_DecRef
$LN388@obj2ast_ex:
  01c35	33 c0		 xor	 eax, eax
  01c37	85 c0		 test	 eax, eax
  01c39	75 a5		 jne	 SHORT $LN391@obj2ast_ex

; 5130 :         } else {

  01c3b	eb 1d		 jmp	 SHORT $LN387@obj2ast_ex
$LN394@obj2ast_ex:

; 5131 :             PyErr_SetString(PyExc_TypeError, "required field \"elt\" missing from ListComp");

  01c3d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@EDCOOJLD@required?5field?5?$CCelt?$CC?5missing?5fro@
  01c44	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01c4b	e8 00 00 00 00	 call	 PyErr_SetString

; 5132 :             return 1;

  01c50	b8 01 00 00 00	 mov	 eax, 1
  01c55	e9 21 3b 00 00	 jmp	 $LN575@obj2ast_ex
$LN387@obj2ast_ex:

; 5133 :         }
; 5134 :         if (_PyObject_HasAttrId(obj, &PyId_generators)) {

  01c5a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  01c5f	8b c0		 mov	 eax, eax
  01c61	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01c67	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01c70	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01c74	48 8b d0	 mov	 rdx, rax
  01c77	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01c7f	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01c84	85 c0		 test	 eax, eax
  01c86	0f 84 f7 01 00
	00		 je	 $LN386@obj2ast_ex

; 5135 :             int res;
; 5136 :             Py_ssize_t len;
; 5137 :             Py_ssize_t i;
; 5138 :             tmp = _PyObject_GetAttrId(obj, &PyId_generators);

  01c8c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  01c91	8b c0		 mov	 eax, eax
  01c93	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01c99	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01ca2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01ca6	48 8b d0	 mov	 rdx, rax
  01ca9	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01cb1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01cb6	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5139 :             if (tmp == NULL) goto failed;

  01cbb	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01cc1	75 05		 jne	 SHORT $LN385@obj2ast_ex
  01cc3	e9 96 3a 00 00	 jmp	 $failed$26048
$LN385@obj2ast_ex:

; 5140 :             if (!PyList_Check(tmp)) {

  01cc8	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01ccd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01cd1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01cd7	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  01cdc	85 c0		 test	 eax, eax
  01cde	75 25		 jne	 SHORT $LN384@obj2ast_ex

; 5141 :                 PyErr_Format(PyExc_TypeError, "ListComp field \"generators\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  01ce0	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01ce5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01ce9	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  01ced	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@KIJLIALD@ListComp?5field?5?$CCgenerators?$CC?5must@
  01cf4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01cfb	e8 00 00 00 00	 call	 PyErr_Format

; 5142 :                 goto failed;

  01d00	e9 59 3a 00 00	 jmp	 $failed$26048
$LN384@obj2ast_ex:

; 5143 :             }
; 5144 :             len = PyList_GET_SIZE(tmp);

  01d05	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01d0a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  01d0e	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR len$26436[rsp], rax

; 5145 :             generators = asdl_seq_new(len, arena);

  01d16	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  01d1e	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR len$26436[rsp]
  01d26	e8 00 00 00 00	 call	 asdl_seq_new
  01d2b	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR generators$26418[rsp], rax

; 5146 :             if (generators == NULL) goto failed;

  01d33	48 83 bc 24 50
	02 00 00 00	 cmp	 QWORD PTR generators$26418[rsp], 0
  01d3c	75 05		 jne	 SHORT $LN383@obj2ast_ex
  01d3e	e9 1b 3a 00 00	 jmp	 $failed$26048
$LN383@obj2ast_ex:

; 5147 :             for (i = 0; i < len; i++) {

  01d43	48 c7 84 24 70
	02 00 00 00 00
	00 00		 mov	 QWORD PTR i$26437[rsp], 0
  01d4f	eb 13		 jmp	 SHORT $LN382@obj2ast_ex
$LN381@obj2ast_ex:
  01d51	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR i$26437[rsp]
  01d59	48 ff c0	 inc	 rax
  01d5c	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR i$26437[rsp], rax
$LN382@obj2ast_ex:
  01d64	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR len$26436[rsp]
  01d6c	48 39 84 24 70
	02 00 00	 cmp	 QWORD PTR i$26437[rsp], rax
  01d74	0f 8d ac 00 00
	00		 jge	 $LN380@obj2ast_ex

; 5148 :                 comprehension_ty value;
; 5149 :                 res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &value, arena);

  01d7a	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01d7f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  01d83	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  01d8b	48 8d 94 24 80
	02 00 00	 lea	 rdx, QWORD PTR value$26449[rsp]
  01d93	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR i$26437[rsp]
  01d9b	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  01d9f	e8 00 00 00 00	 call	 obj2ast_comprehension
  01da4	89 84 24 68 02
	00 00		 mov	 DWORD PTR res$26435[rsp], eax

; 5150 :                 if (res != 0) goto failed;

  01dab	83 bc 24 68 02
	00 00 00	 cmp	 DWORD PTR res$26435[rsp], 0
  01db3	74 05		 je	 SHORT $LN379@obj2ast_ex
  01db5	e9 a4 39 00 00	 jmp	 $failed$26048
$LN379@obj2ast_ex:

; 5151 :                 asdl_seq_SET(generators, i, value);

  01dba	8b 84 24 70 02
	00 00		 mov	 eax, DWORD PTR i$26437[rsp]
  01dc1	89 84 24 88 02
	00 00		 mov	 DWORD PTR _asdl_i$26452[rsp], eax
  01dc8	48 83 bc 24 50
	02 00 00 00	 cmp	 QWORD PTR generators$26418[rsp], 0
  01dd1	74 15		 je	 SHORT $LN585@obj2ast_ex
  01dd3	48 63 84 24 88
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26452[rsp]
  01ddb	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR generators$26418[rsp]
  01de3	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  01de6	7c 1c		 jl	 SHORT $LN586@obj2ast_ex
$LN585@obj2ast_ex:
  01de8	41 b8 1f 14 00
	00		 mov	 r8d, 5151		; 0000141fH
  01dee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  01df5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@HFOAFHGA@?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr@
  01dfc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01e02	33 c0		 xor	 eax, eax
$LN586@obj2ast_ex:
  01e04	48 63 84 24 88
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26452[rsp]
  01e0c	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR generators$26418[rsp]
  01e14	48 8b 94 24 80
	02 00 00	 mov	 rdx, QWORD PTR value$26449[rsp]
  01e1c	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5152 :             }

  01e21	e9 2b ff ff ff	 jmp	 $LN381@obj2ast_ex
$LN380@obj2ast_ex:
$LN378@obj2ast_ex:

; 5153 :             Py_CLEAR(tmp);

  01e26	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01e2c	74 4d		 je	 SHORT $LN375@obj2ast_ex
  01e2e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01e36	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  01e3b	41 b8 21 14 00
	00		 mov	 r8d, 5153		; 00001421H
  01e41	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01e48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01e4f	e8 00 00 00 00	 call	 _PyParallel_Guard
  01e54	85 c0		 test	 eax, eax
  01e56	75 23		 jne	 SHORT $LN375@obj2ast_ex
  01e58	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01e5d	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR _py_tmp$26459[rsp], rax
  01e65	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  01e6e	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$26459[rsp]
  01e76	e8 00 00 00 00	 call	 _Py_DecRef
$LN375@obj2ast_ex:
  01e7b	33 c0		 xor	 eax, eax
  01e7d	85 c0		 test	 eax, eax
  01e7f	75 a5		 jne	 SHORT $LN378@obj2ast_ex

; 5154 :         } else {

  01e81	eb 1d		 jmp	 SHORT $LN374@obj2ast_ex
$LN386@obj2ast_ex:

; 5155 :             PyErr_SetString(PyExc_TypeError, "required field \"generators\" missing from ListComp");

  01e83	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@PMIDIDFO@required?5field?5?$CCgenerators?$CC?5miss@
  01e8a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  01e91	e8 00 00 00 00	 call	 PyErr_SetString

; 5156 :             return 1;

  01e96	b8 01 00 00 00	 mov	 eax, 1
  01e9b	e9 db 38 00 00	 jmp	 $LN575@obj2ast_ex
$LN374@obj2ast_ex:

; 5157 :         }
; 5158 :         *out = ListComp(elt, generators, lineno, col_offset, arena);

  01ea0	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  01ea8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01ead	44 8b 4c 24 50	 mov	 r9d, DWORD PTR col_offset$[rsp]
  01eb2	44 8b 44 24 40	 mov	 r8d, DWORD PTR lineno$[rsp]
  01eb7	48 8b 94 24 50
	02 00 00	 mov	 rdx, QWORD PTR generators$26418[rsp]
  01ebf	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR elt$26417[rsp]
  01ec7	e8 00 00 00 00	 call	 _Py_ListComp
  01ecc	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  01ed4	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5159 :         if (*out == NULL) goto failed;

  01ed7	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  01edf	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01ee3	75 05		 jne	 SHORT $LN373@obj2ast_ex
  01ee5	e9 74 38 00 00	 jmp	 $failed$26048
$LN373@obj2ast_ex:

; 5160 :         return 0;

  01eea	33 c0		 xor	 eax, eax
  01eec	e9 8a 38 00 00	 jmp	 $LN575@obj2ast_ex
$LN395@obj2ast_ex:

; 5161 :     }
; 5162 :     isinstance = PyObject_IsInstance(obj, (PyObject*)SetComp_type);

  01ef1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR SetComp_type
  01ef8	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01f00	e8 00 00 00 00	 call	 PyObject_IsInstance
  01f05	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5163 :     if (isinstance == -1) {

  01f09	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  01f0e	75 0a		 jne	 SHORT $LN372@obj2ast_ex

; 5164 :         return 1;

  01f10	b8 01 00 00 00	 mov	 eax, 1
  01f15	e9 61 38 00 00	 jmp	 $LN575@obj2ast_ex
$LN372@obj2ast_ex:

; 5165 :     }
; 5166 :     if (isinstance) {

  01f1a	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  01f1f	0f 84 af 03 00
	00		 je	 $LN371@obj2ast_ex

; 5167 :         expr_ty elt;
; 5168 :         asdl_seq* generators;
; 5169 : 
; 5170 :         if (_PyObject_HasAttrId(obj, &PyId_elt)) {

  01f25	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elt
  01f2a	8b c0		 mov	 eax, eax
  01f2c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01f32	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01f3b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01f3f	48 8b d0	 mov	 rdx, rax
  01f42	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01f4a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  01f4f	85 c0		 test	 eax, eax
  01f51	0f 84 c9 00 00
	00		 je	 $LN370@obj2ast_ex

; 5171 :             int res;
; 5172 :             tmp = _PyObject_GetAttrId(obj, &PyId_elt);

  01f57	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elt
  01f5c	8b c0		 mov	 eax, eax
  01f5e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01f64	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01f6d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  01f71	48 8b d0	 mov	 rdx, rax
  01f74	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  01f7c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  01f81	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5173 :             if (tmp == NULL) goto failed;

  01f86	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01f8c	75 05		 jne	 SHORT $LN369@obj2ast_ex
  01f8e	e9 cb 37 00 00	 jmp	 $failed$26048
$LN369@obj2ast_ex:

; 5174 :             res = obj2ast_expr(tmp, &elt, arena);

  01f93	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  01f9b	48 8d 94 24 98
	02 00 00	 lea	 rdx, QWORD PTR elt$26470[rsp]
  01fa3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  01fa8	e8 00 00 00 00	 call	 obj2ast_expr
  01fad	89 84 24 a8 02
	00 00		 mov	 DWORD PTR res$26473[rsp], eax

; 5175 :             if (res != 0) goto failed;

  01fb4	83 bc 24 a8 02
	00 00 00	 cmp	 DWORD PTR res$26473[rsp], 0
  01fbc	74 05		 je	 SHORT $LN368@obj2ast_ex
  01fbe	e9 9b 37 00 00	 jmp	 $failed$26048
$LN368@obj2ast_ex:
$LN367@obj2ast_ex:

; 5176 :             Py_CLEAR(tmp);

  01fc3	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  01fc9	74 4d		 je	 SHORT $LN364@obj2ast_ex
  01fcb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  01fd3	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  01fd8	41 b8 38 14 00
	00		 mov	 r8d, 5176		; 00001438H
  01fde	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  01fe5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  01fec	e8 00 00 00 00	 call	 _PyParallel_Guard
  01ff1	85 c0		 test	 eax, eax
  01ff3	75 23		 jne	 SHORT $LN364@obj2ast_ex
  01ff5	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  01ffa	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR _py_tmp$26481[rsp], rax
  02002	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0200b	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$26481[rsp]
  02013	e8 00 00 00 00	 call	 _Py_DecRef
$LN364@obj2ast_ex:
  02018	33 c0		 xor	 eax, eax
  0201a	85 c0		 test	 eax, eax
  0201c	75 a5		 jne	 SHORT $LN367@obj2ast_ex

; 5177 :         } else {

  0201e	eb 1d		 jmp	 SHORT $LN363@obj2ast_ex
$LN370@obj2ast_ex:

; 5178 :             PyErr_SetString(PyExc_TypeError, "required field \"elt\" missing from SetComp");

  02020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@GNDGBNHN@required?5field?5?$CCelt?$CC?5missing?5fro@
  02027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0202e	e8 00 00 00 00	 call	 PyErr_SetString

; 5179 :             return 1;

  02033	b8 01 00 00 00	 mov	 eax, 1
  02038	e9 3e 37 00 00	 jmp	 $LN575@obj2ast_ex
$LN363@obj2ast_ex:

; 5180 :         }
; 5181 :         if (_PyObject_HasAttrId(obj, &PyId_generators)) {

  0203d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  02042	8b c0		 mov	 eax, eax
  02044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0204a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02053	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02057	48 8b d0	 mov	 rdx, rax
  0205a	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02062	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02067	85 c0		 test	 eax, eax
  02069	0f 84 f7 01 00
	00		 je	 $LN362@obj2ast_ex

; 5182 :             int res;
; 5183 :             Py_ssize_t len;
; 5184 :             Py_ssize_t i;
; 5185 :             tmp = _PyObject_GetAttrId(obj, &PyId_generators);

  0206f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  02074	8b c0		 mov	 eax, eax
  02076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0207c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02085	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02089	48 8b d0	 mov	 rdx, rax
  0208c	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02094	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02099	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5186 :             if (tmp == NULL) goto failed;

  0209e	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  020a4	75 05		 jne	 SHORT $LN361@obj2ast_ex
  020a6	e9 b3 36 00 00	 jmp	 $failed$26048
$LN361@obj2ast_ex:

; 5187 :             if (!PyList_Check(tmp)) {

  020ab	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  020b0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  020b4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  020ba	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  020bf	85 c0		 test	 eax, eax
  020c1	75 25		 jne	 SHORT $LN360@obj2ast_ex

; 5188 :                 PyErr_Format(PyExc_TypeError, "SetComp field \"generators\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  020c3	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  020c8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  020cc	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  020d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@MNDNMCPF@SetComp?5field?5?$CCgenerators?$CC?5must?5@
  020d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  020de	e8 00 00 00 00	 call	 PyErr_Format

; 5189 :                 goto failed;

  020e3	e9 76 36 00 00	 jmp	 $failed$26048
$LN360@obj2ast_ex:

; 5190 :             }
; 5191 :             len = PyList_GET_SIZE(tmp);

  020e8	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  020ed	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  020f1	48 89 84 24 c8
	02 00 00	 mov	 QWORD PTR len$26489[rsp], rax

; 5192 :             generators = asdl_seq_new(len, arena);

  020f9	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  02101	48 8b 8c 24 c8
	02 00 00	 mov	 rcx, QWORD PTR len$26489[rsp]
  02109	e8 00 00 00 00	 call	 asdl_seq_new
  0210e	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR generators$26471[rsp], rax

; 5193 :             if (generators == NULL) goto failed;

  02116	48 83 bc 24 a0
	02 00 00 00	 cmp	 QWORD PTR generators$26471[rsp], 0
  0211f	75 05		 jne	 SHORT $LN359@obj2ast_ex
  02121	e9 38 36 00 00	 jmp	 $failed$26048
$LN359@obj2ast_ex:

; 5194 :             for (i = 0; i < len; i++) {

  02126	48 c7 84 24 c0
	02 00 00 00 00
	00 00		 mov	 QWORD PTR i$26490[rsp], 0
  02132	eb 13		 jmp	 SHORT $LN358@obj2ast_ex
$LN357@obj2ast_ex:
  02134	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR i$26490[rsp]
  0213c	48 ff c0	 inc	 rax
  0213f	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR i$26490[rsp], rax
$LN358@obj2ast_ex:
  02147	48 8b 84 24 c8
	02 00 00	 mov	 rax, QWORD PTR len$26489[rsp]
  0214f	48 39 84 24 c0
	02 00 00	 cmp	 QWORD PTR i$26490[rsp], rax
  02157	0f 8d ac 00 00
	00		 jge	 $LN356@obj2ast_ex

; 5195 :                 comprehension_ty value;
; 5196 :                 res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &value, arena);

  0215d	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  02162	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  02166	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0216e	48 8d 94 24 d0
	02 00 00	 lea	 rdx, QWORD PTR value$26502[rsp]
  02176	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR i$26490[rsp]
  0217e	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  02182	e8 00 00 00 00	 call	 obj2ast_comprehension
  02187	89 84 24 b8 02
	00 00		 mov	 DWORD PTR res$26488[rsp], eax

; 5197 :                 if (res != 0) goto failed;

  0218e	83 bc 24 b8 02
	00 00 00	 cmp	 DWORD PTR res$26488[rsp], 0
  02196	74 05		 je	 SHORT $LN355@obj2ast_ex
  02198	e9 c1 35 00 00	 jmp	 $failed$26048
$LN355@obj2ast_ex:

; 5198 :                 asdl_seq_SET(generators, i, value);

  0219d	8b 84 24 c0 02
	00 00		 mov	 eax, DWORD PTR i$26490[rsp]
  021a4	89 84 24 d8 02
	00 00		 mov	 DWORD PTR _asdl_i$26505[rsp], eax
  021ab	48 83 bc 24 a0
	02 00 00 00	 cmp	 QWORD PTR generators$26471[rsp], 0
  021b4	74 15		 je	 SHORT $LN587@obj2ast_ex
  021b6	48 63 84 24 d8
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26505[rsp]
  021be	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR generators$26471[rsp]
  021c6	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  021c9	7c 1c		 jl	 SHORT $LN588@obj2ast_ex
$LN587@obj2ast_ex:
  021cb	41 b8 4e 14 00
	00		 mov	 r8d, 5198		; 0000144eH
  021d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  021d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@HFOAFHGA@?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr@
  021df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  021e5	33 c0		 xor	 eax, eax
$LN588@obj2ast_ex:
  021e7	48 63 84 24 d8
	02 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26505[rsp]
  021ef	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR generators$26471[rsp]
  021f7	48 8b 94 24 d0
	02 00 00	 mov	 rdx, QWORD PTR value$26502[rsp]
  021ff	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5199 :             }

  02204	e9 2b ff ff ff	 jmp	 $LN357@obj2ast_ex
$LN356@obj2ast_ex:
$LN354@obj2ast_ex:

; 5200 :             Py_CLEAR(tmp);

  02209	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0220f	74 4d		 je	 SHORT $LN351@obj2ast_ex
  02211	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02219	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0221e	41 b8 50 14 00
	00		 mov	 r8d, 5200		; 00001450H
  02224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0222b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  02232	e8 00 00 00 00	 call	 _PyParallel_Guard
  02237	85 c0		 test	 eax, eax
  02239	75 23		 jne	 SHORT $LN351@obj2ast_ex
  0223b	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  02240	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR _py_tmp$26511[rsp], rax
  02248	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02251	48 8b 8c 24 e0
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$26511[rsp]
  02259	e8 00 00 00 00	 call	 _Py_DecRef
$LN351@obj2ast_ex:
  0225e	33 c0		 xor	 eax, eax
  02260	85 c0		 test	 eax, eax
  02262	75 a5		 jne	 SHORT $LN354@obj2ast_ex

; 5201 :         } else {

  02264	eb 1d		 jmp	 SHORT $LN350@obj2ast_ex
$LN362@obj2ast_ex:

; 5202 :             PyErr_SetString(PyExc_TypeError, "required field \"generators\" missing from SetComp");

  02266	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@BADNOGEO@required?5field?5?$CCgenerators?$CC?5miss@
  0226d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02274	e8 00 00 00 00	 call	 PyErr_SetString

; 5203 :             return 1;

  02279	b8 01 00 00 00	 mov	 eax, 1
  0227e	e9 f8 34 00 00	 jmp	 $LN575@obj2ast_ex
$LN350@obj2ast_ex:

; 5204 :         }
; 5205 :         *out = SetComp(elt, generators, lineno, col_offset, arena);

  02283	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  0228b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02290	44 8b 4c 24 50	 mov	 r9d, DWORD PTR col_offset$[rsp]
  02295	44 8b 44 24 40	 mov	 r8d, DWORD PTR lineno$[rsp]
  0229a	48 8b 94 24 a0
	02 00 00	 mov	 rdx, QWORD PTR generators$26471[rsp]
  022a2	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR elt$26470[rsp]
  022aa	e8 00 00 00 00	 call	 _Py_SetComp
  022af	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  022b7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5206 :         if (*out == NULL) goto failed;

  022ba	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  022c2	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  022c6	75 05		 jne	 SHORT $LN349@obj2ast_ex
  022c8	e9 91 34 00 00	 jmp	 $failed$26048
$LN349@obj2ast_ex:

; 5207 :         return 0;

  022cd	33 c0		 xor	 eax, eax
  022cf	e9 a7 34 00 00	 jmp	 $LN575@obj2ast_ex
$LN371@obj2ast_ex:

; 5208 :     }
; 5209 :     isinstance = PyObject_IsInstance(obj, (PyObject*)DictComp_type);

  022d4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR DictComp_type
  022db	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  022e3	e8 00 00 00 00	 call	 PyObject_IsInstance
  022e8	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5210 :     if (isinstance == -1) {

  022ec	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  022f1	75 0a		 jne	 SHORT $LN348@obj2ast_ex

; 5211 :         return 1;

  022f3	b8 01 00 00 00	 mov	 eax, 1
  022f8	e9 7e 34 00 00	 jmp	 $LN575@obj2ast_ex
$LN348@obj2ast_ex:

; 5212 :     }
; 5213 :     if (isinstance) {

  022fd	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  02302	0f 84 d2 04 00
	00		 je	 $LN347@obj2ast_ex

; 5214 :         expr_ty key;
; 5215 :         expr_ty value;
; 5216 :         asdl_seq* generators;
; 5217 : 
; 5218 :         if (_PyObject_HasAttrId(obj, &PyId_key)) {

  02308	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_key
  0230d	8b c0		 mov	 eax, eax
  0230f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02315	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0231e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02322	48 8b d0	 mov	 rdx, rax
  02325	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0232d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02332	85 c0		 test	 eax, eax
  02334	0f 84 c9 00 00
	00		 je	 $LN346@obj2ast_ex

; 5219 :             int res;
; 5220 :             tmp = _PyObject_GetAttrId(obj, &PyId_key);

  0233a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_key
  0233f	8b c0		 mov	 eax, eax
  02341	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02347	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02350	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02354	48 8b d0	 mov	 rdx, rax
  02357	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0235f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02364	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5221 :             if (tmp == NULL) goto failed;

  02369	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0236f	75 05		 jne	 SHORT $LN345@obj2ast_ex
  02371	e9 e8 33 00 00	 jmp	 $failed$26048
$LN345@obj2ast_ex:

; 5222 :             res = obj2ast_expr(tmp, &key, arena);

  02376	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0237e	48 8d 94 24 f0
	02 00 00	 lea	 rdx, QWORD PTR key$26522[rsp]
  02386	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  0238b	e8 00 00 00 00	 call	 obj2ast_expr
  02390	89 84 24 00 03
	00 00		 mov	 DWORD PTR res$26526[rsp], eax

; 5223 :             if (res != 0) goto failed;

  02397	83 bc 24 00 03
	00 00 00	 cmp	 DWORD PTR res$26526[rsp], 0
  0239f	74 05		 je	 SHORT $LN344@obj2ast_ex
  023a1	e9 b8 33 00 00	 jmp	 $failed$26048
$LN344@obj2ast_ex:
$LN343@obj2ast_ex:

; 5224 :             Py_CLEAR(tmp);

  023a6	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  023ac	74 4d		 je	 SHORT $LN340@obj2ast_ex
  023ae	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  023b6	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  023bb	41 b8 68 14 00
	00		 mov	 r8d, 5224		; 00001468H
  023c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  023c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  023cf	e8 00 00 00 00	 call	 _PyParallel_Guard
  023d4	85 c0		 test	 eax, eax
  023d6	75 23		 jne	 SHORT $LN340@obj2ast_ex
  023d8	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  023dd	48 89 84 24 08
	03 00 00	 mov	 QWORD PTR _py_tmp$26534[rsp], rax
  023e5	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  023ee	48 8b 8c 24 08
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$26534[rsp]
  023f6	e8 00 00 00 00	 call	 _Py_DecRef
$LN340@obj2ast_ex:
  023fb	33 c0		 xor	 eax, eax
  023fd	85 c0		 test	 eax, eax
  023ff	75 a5		 jne	 SHORT $LN343@obj2ast_ex

; 5225 :         } else {

  02401	eb 1d		 jmp	 SHORT $LN339@obj2ast_ex
$LN346@obj2ast_ex:

; 5226 :             PyErr_SetString(PyExc_TypeError, "required field \"key\" missing from DictComp");

  02403	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@CBPKJOEB@required?5field?5?$CCkey?$CC?5missing?5fro@
  0240a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02411	e8 00 00 00 00	 call	 PyErr_SetString

; 5227 :             return 1;

  02416	b8 01 00 00 00	 mov	 eax, 1
  0241b	e9 5b 33 00 00	 jmp	 $LN575@obj2ast_ex
$LN339@obj2ast_ex:

; 5228 :         }
; 5229 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  02420	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  02425	8b c0		 mov	 eax, eax
  02427	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0242d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02436	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0243a	48 8b d0	 mov	 rdx, rax
  0243d	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02445	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0244a	85 c0		 test	 eax, eax
  0244c	0f 84 c9 00 00
	00		 je	 $LN338@obj2ast_ex

; 5230 :             int res;
; 5231 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  02452	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  02457	8b c0		 mov	 eax, eax
  02459	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0245f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02468	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0246c	48 8b d0	 mov	 rdx, rax
  0246f	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02477	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0247c	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5232 :             if (tmp == NULL) goto failed;

  02481	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02487	75 05		 jne	 SHORT $LN337@obj2ast_ex
  02489	e9 d0 32 00 00	 jmp	 $failed$26048
$LN337@obj2ast_ex:

; 5233 :             res = obj2ast_expr(tmp, &value, arena);

  0248e	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02496	48 8d 94 24 e8
	02 00 00	 lea	 rdx, QWORD PTR value$26523[rsp]
  0249e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  024a3	e8 00 00 00 00	 call	 obj2ast_expr
  024a8	89 84 24 10 03
	00 00		 mov	 DWORD PTR res$26541[rsp], eax

; 5234 :             if (res != 0) goto failed;

  024af	83 bc 24 10 03
	00 00 00	 cmp	 DWORD PTR res$26541[rsp], 0
  024b7	74 05		 je	 SHORT $LN336@obj2ast_ex
  024b9	e9 a0 32 00 00	 jmp	 $failed$26048
$LN336@obj2ast_ex:
$LN335@obj2ast_ex:

; 5235 :             Py_CLEAR(tmp);

  024be	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  024c4	74 4d		 je	 SHORT $LN332@obj2ast_ex
  024c6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  024ce	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  024d3	41 b8 73 14 00
	00		 mov	 r8d, 5235		; 00001473H
  024d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  024e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  024e7	e8 00 00 00 00	 call	 _PyParallel_Guard
  024ec	85 c0		 test	 eax, eax
  024ee	75 23		 jne	 SHORT $LN332@obj2ast_ex
  024f0	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  024f5	48 89 84 24 18
	03 00 00	 mov	 QWORD PTR _py_tmp$26549[rsp], rax
  024fd	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02506	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$26549[rsp]
  0250e	e8 00 00 00 00	 call	 _Py_DecRef
$LN332@obj2ast_ex:
  02513	33 c0		 xor	 eax, eax
  02515	85 c0		 test	 eax, eax
  02517	75 a5		 jne	 SHORT $LN335@obj2ast_ex

; 5236 :         } else {

  02519	eb 1d		 jmp	 SHORT $LN331@obj2ast_ex
$LN338@obj2ast_ex:

; 5237 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from DictComp");

  0251b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@BFNLHDPP@required?5field?5?$CCvalue?$CC?5missing?5f@
  02522	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02529	e8 00 00 00 00	 call	 PyErr_SetString

; 5238 :             return 1;

  0252e	b8 01 00 00 00	 mov	 eax, 1
  02533	e9 43 32 00 00	 jmp	 $LN575@obj2ast_ex
$LN331@obj2ast_ex:

; 5239 :         }
; 5240 :         if (_PyObject_HasAttrId(obj, &PyId_generators)) {

  02538	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  0253d	8b c0		 mov	 eax, eax
  0253f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02545	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0254e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02552	48 8b d0	 mov	 rdx, rax
  02555	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0255d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02562	85 c0		 test	 eax, eax
  02564	0f 84 f7 01 00
	00		 je	 $LN330@obj2ast_ex

; 5241 :             int res;
; 5242 :             Py_ssize_t len;
; 5243 :             Py_ssize_t i;
; 5244 :             tmp = _PyObject_GetAttrId(obj, &PyId_generators);

  0256a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  0256f	8b c0		 mov	 eax, eax
  02571	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02577	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02580	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02584	48 8b d0	 mov	 rdx, rax
  02587	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0258f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02594	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5245 :             if (tmp == NULL) goto failed;

  02599	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0259f	75 05		 jne	 SHORT $LN329@obj2ast_ex
  025a1	e9 b8 31 00 00	 jmp	 $failed$26048
$LN329@obj2ast_ex:

; 5246 :             if (!PyList_Check(tmp)) {

  025a6	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  025ab	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  025af	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  025b5	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  025ba	85 c0		 test	 eax, eax
  025bc	75 25		 jne	 SHORT $LN328@obj2ast_ex

; 5247 :                 PyErr_Format(PyExc_TypeError, "DictComp field \"generators\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  025be	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  025c3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  025c7	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  025cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@CAGFCIFA@DictComp?5field?5?$CCgenerators?$CC?5must@
  025d2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  025d9	e8 00 00 00 00	 call	 PyErr_Format

; 5248 :                 goto failed;

  025de	e9 7b 31 00 00	 jmp	 $failed$26048
$LN328@obj2ast_ex:

; 5249 :             }
; 5250 :             len = PyList_GET_SIZE(tmp);

  025e3	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  025e8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  025ec	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR len$26557[rsp], rax

; 5251 :             generators = asdl_seq_new(len, arena);

  025f4	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  025fc	48 8b 8c 24 30
	03 00 00	 mov	 rcx, QWORD PTR len$26557[rsp]
  02604	e8 00 00 00 00	 call	 asdl_seq_new
  02609	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR generators$26524[rsp], rax

; 5252 :             if (generators == NULL) goto failed;

  02611	48 83 bc 24 f8
	02 00 00 00	 cmp	 QWORD PTR generators$26524[rsp], 0
  0261a	75 05		 jne	 SHORT $LN327@obj2ast_ex
  0261c	e9 3d 31 00 00	 jmp	 $failed$26048
$LN327@obj2ast_ex:

; 5253 :             for (i = 0; i < len; i++) {

  02621	48 c7 84 24 28
	03 00 00 00 00
	00 00		 mov	 QWORD PTR i$26558[rsp], 0
  0262d	eb 13		 jmp	 SHORT $LN326@obj2ast_ex
$LN325@obj2ast_ex:
  0262f	48 8b 84 24 28
	03 00 00	 mov	 rax, QWORD PTR i$26558[rsp]
  02637	48 ff c0	 inc	 rax
  0263a	48 89 84 24 28
	03 00 00	 mov	 QWORD PTR i$26558[rsp], rax
$LN326@obj2ast_ex:
  02642	48 8b 84 24 30
	03 00 00	 mov	 rax, QWORD PTR len$26557[rsp]
  0264a	48 39 84 24 28
	03 00 00	 cmp	 QWORD PTR i$26558[rsp], rax
  02652	0f 8d ac 00 00
	00		 jge	 $LN324@obj2ast_ex

; 5254 :                 comprehension_ty value;
; 5255 :                 res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &value, arena);

  02658	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0265d	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  02661	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02669	48 8d 94 24 38
	03 00 00	 lea	 rdx, QWORD PTR value$26570[rsp]
  02671	48 8b 8c 24 28
	03 00 00	 mov	 rcx, QWORD PTR i$26558[rsp]
  02679	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0267d	e8 00 00 00 00	 call	 obj2ast_comprehension
  02682	89 84 24 20 03
	00 00		 mov	 DWORD PTR res$26556[rsp], eax

; 5256 :                 if (res != 0) goto failed;

  02689	83 bc 24 20 03
	00 00 00	 cmp	 DWORD PTR res$26556[rsp], 0
  02691	74 05		 je	 SHORT $LN323@obj2ast_ex
  02693	e9 c6 30 00 00	 jmp	 $failed$26048
$LN323@obj2ast_ex:

; 5257 :                 asdl_seq_SET(generators, i, value);

  02698	8b 84 24 28 03
	00 00		 mov	 eax, DWORD PTR i$26558[rsp]
  0269f	89 84 24 40 03
	00 00		 mov	 DWORD PTR _asdl_i$26573[rsp], eax
  026a6	48 83 bc 24 f8
	02 00 00 00	 cmp	 QWORD PTR generators$26524[rsp], 0
  026af	74 15		 je	 SHORT $LN589@obj2ast_ex
  026b1	48 63 84 24 40
	03 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26573[rsp]
  026b9	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR generators$26524[rsp]
  026c1	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  026c4	7c 1c		 jl	 SHORT $LN590@obj2ast_ex
$LN589@obj2ast_ex:
  026c6	41 b8 89 14 00
	00		 mov	 r8d, 5257		; 00001489H
  026cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  026d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@HFOAFHGA@?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr@
  026da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  026e0	33 c0		 xor	 eax, eax
$LN590@obj2ast_ex:
  026e2	48 63 84 24 40
	03 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26573[rsp]
  026ea	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR generators$26524[rsp]
  026f2	48 8b 94 24 38
	03 00 00	 mov	 rdx, QWORD PTR value$26570[rsp]
  026fa	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5258 :             }

  026ff	e9 2b ff ff ff	 jmp	 $LN325@obj2ast_ex
$LN324@obj2ast_ex:
$LN322@obj2ast_ex:

; 5259 :             Py_CLEAR(tmp);

  02704	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0270a	74 4d		 je	 SHORT $LN319@obj2ast_ex
  0270c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02714	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  02719	41 b8 8b 14 00
	00		 mov	 r8d, 5259		; 0000148bH
  0271f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02726	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0272d	e8 00 00 00 00	 call	 _PyParallel_Guard
  02732	85 c0		 test	 eax, eax
  02734	75 23		 jne	 SHORT $LN319@obj2ast_ex
  02736	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0273b	48 89 84 24 48
	03 00 00	 mov	 QWORD PTR _py_tmp$26579[rsp], rax
  02743	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0274c	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$26579[rsp]
  02754	e8 00 00 00 00	 call	 _Py_DecRef
$LN319@obj2ast_ex:
  02759	33 c0		 xor	 eax, eax
  0275b	85 c0		 test	 eax, eax
  0275d	75 a5		 jne	 SHORT $LN322@obj2ast_ex

; 5260 :         } else {

  0275f	eb 1d		 jmp	 SHORT $LN318@obj2ast_ex
$LN330@obj2ast_ex:

; 5261 :             PyErr_SetString(PyExc_TypeError, "required field \"generators\" missing from DictComp");

  02761	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@CAIFLNII@required?5field?5?$CCgenerators?$CC?5miss@
  02768	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0276f	e8 00 00 00 00	 call	 PyErr_SetString

; 5262 :             return 1;

  02774	b8 01 00 00 00	 mov	 eax, 1
  02779	e9 fd 2f 00 00	 jmp	 $LN575@obj2ast_ex
$LN318@obj2ast_ex:

; 5263 :         }
; 5264 :         *out = DictComp(key, value, generators, lineno, col_offset, arena);

  0277e	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  02786	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0278b	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  0278f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  02793	44 8b 4c 24 40	 mov	 r9d, DWORD PTR lineno$[rsp]
  02798	4c 8b 84 24 f8
	02 00 00	 mov	 r8, QWORD PTR generators$26524[rsp]
  027a0	48 8b 94 24 e8
	02 00 00	 mov	 rdx, QWORD PTR value$26523[rsp]
  027a8	48 8b 8c 24 f0
	02 00 00	 mov	 rcx, QWORD PTR key$26522[rsp]
  027b0	e8 00 00 00 00	 call	 _Py_DictComp
  027b5	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  027bd	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5265 :         if (*out == NULL) goto failed;

  027c0	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  027c8	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  027cc	75 05		 jne	 SHORT $LN317@obj2ast_ex
  027ce	e9 8b 2f 00 00	 jmp	 $failed$26048
$LN317@obj2ast_ex:

; 5266 :         return 0;

  027d3	33 c0		 xor	 eax, eax
  027d5	e9 a1 2f 00 00	 jmp	 $LN575@obj2ast_ex
$LN347@obj2ast_ex:

; 5267 :     }
; 5268 :     isinstance = PyObject_IsInstance(obj, (PyObject*)GeneratorExp_type);

  027da	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR GeneratorExp_type
  027e1	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  027e9	e8 00 00 00 00	 call	 PyObject_IsInstance
  027ee	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5269 :     if (isinstance == -1) {

  027f2	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  027f7	75 0a		 jne	 SHORT $LN316@obj2ast_ex

; 5270 :         return 1;

  027f9	b8 01 00 00 00	 mov	 eax, 1
  027fe	e9 78 2f 00 00	 jmp	 $LN575@obj2ast_ex
$LN316@obj2ast_ex:

; 5271 :     }
; 5272 :     if (isinstance) {

  02803	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  02808	0f 84 af 03 00
	00		 je	 $LN315@obj2ast_ex

; 5273 :         expr_ty elt;
; 5274 :         asdl_seq* generators;
; 5275 : 
; 5276 :         if (_PyObject_HasAttrId(obj, &PyId_elt)) {

  0280e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elt
  02813	8b c0		 mov	 eax, eax
  02815	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0281b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02824	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02828	48 8b d0	 mov	 rdx, rax
  0282b	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02833	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02838	85 c0		 test	 eax, eax
  0283a	0f 84 c9 00 00
	00		 je	 $LN314@obj2ast_ex

; 5277 :             int res;
; 5278 :             tmp = _PyObject_GetAttrId(obj, &PyId_elt);

  02840	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elt
  02845	8b c0		 mov	 eax, eax
  02847	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0284d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02856	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0285a	48 8b d0	 mov	 rdx, rax
  0285d	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02865	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0286a	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5279 :             if (tmp == NULL) goto failed;

  0286f	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02875	75 05		 jne	 SHORT $LN313@obj2ast_ex
  02877	e9 e2 2e 00 00	 jmp	 $failed$26048
$LN313@obj2ast_ex:

; 5280 :             res = obj2ast_expr(tmp, &elt, arena);

  0287c	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02884	48 8d 94 24 50
	03 00 00	 lea	 rdx, QWORD PTR elt$26590[rsp]
  0288c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  02891	e8 00 00 00 00	 call	 obj2ast_expr
  02896	89 84 24 60 03
	00 00		 mov	 DWORD PTR res$26593[rsp], eax

; 5281 :             if (res != 0) goto failed;

  0289d	83 bc 24 60 03
	00 00 00	 cmp	 DWORD PTR res$26593[rsp], 0
  028a5	74 05		 je	 SHORT $LN312@obj2ast_ex
  028a7	e9 b2 2e 00 00	 jmp	 $failed$26048
$LN312@obj2ast_ex:
$LN311@obj2ast_ex:

; 5282 :             Py_CLEAR(tmp);

  028ac	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  028b2	74 4d		 je	 SHORT $LN308@obj2ast_ex
  028b4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  028bc	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  028c1	41 b8 a2 14 00
	00		 mov	 r8d, 5282		; 000014a2H
  028c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  028ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  028d5	e8 00 00 00 00	 call	 _PyParallel_Guard
  028da	85 c0		 test	 eax, eax
  028dc	75 23		 jne	 SHORT $LN308@obj2ast_ex
  028de	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  028e3	48 89 84 24 68
	03 00 00	 mov	 QWORD PTR _py_tmp$26601[rsp], rax
  028eb	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  028f4	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$26601[rsp]
  028fc	e8 00 00 00 00	 call	 _Py_DecRef
$LN308@obj2ast_ex:
  02901	33 c0		 xor	 eax, eax
  02903	85 c0		 test	 eax, eax
  02905	75 a5		 jne	 SHORT $LN311@obj2ast_ex

; 5283 :         } else {

  02907	eb 1d		 jmp	 SHORT $LN307@obj2ast_ex
$LN314@obj2ast_ex:

; 5284 :             PyErr_SetString(PyExc_TypeError, "required field \"elt\" missing from GeneratorExp");

  02909	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@HEOIHGCL@required?5field?5?$CCelt?$CC?5missing?5fro@
  02910	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02917	e8 00 00 00 00	 call	 PyErr_SetString

; 5285 :             return 1;

  0291c	b8 01 00 00 00	 mov	 eax, 1
  02921	e9 55 2e 00 00	 jmp	 $LN575@obj2ast_ex
$LN307@obj2ast_ex:

; 5286 :         }
; 5287 :         if (_PyObject_HasAttrId(obj, &PyId_generators)) {

  02926	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  0292b	8b c0		 mov	 eax, eax
  0292d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02933	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0293c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02940	48 8b d0	 mov	 rdx, rax
  02943	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0294b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02950	85 c0		 test	 eax, eax
  02952	0f 84 f7 01 00
	00		 je	 $LN306@obj2ast_ex

; 5288 :             int res;
; 5289 :             Py_ssize_t len;
; 5290 :             Py_ssize_t i;
; 5291 :             tmp = _PyObject_GetAttrId(obj, &PyId_generators);

  02958	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_generators
  0295d	8b c0		 mov	 eax, eax
  0295f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02965	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0296e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02972	48 8b d0	 mov	 rdx, rax
  02975	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0297d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02982	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5292 :             if (tmp == NULL) goto failed;

  02987	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0298d	75 05		 jne	 SHORT $LN305@obj2ast_ex
  0298f	e9 ca 2d 00 00	 jmp	 $failed$26048
$LN305@obj2ast_ex:

; 5293 :             if (!PyList_Check(tmp)) {

  02994	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  02999	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0299d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  029a3	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  029a8	85 c0		 test	 eax, eax
  029aa	75 25		 jne	 SHORT $LN304@obj2ast_ex

; 5294 :                 PyErr_Format(PyExc_TypeError, "GeneratorExp field \"generators\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  029ac	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  029b1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  029b5	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  029b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@BPOKNM@GeneratorExp?5field?5?$CCgenerators?$CC?5@
  029c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  029c7	e8 00 00 00 00	 call	 PyErr_Format

; 5295 :                 goto failed;

  029cc	e9 8d 2d 00 00	 jmp	 $failed$26048
$LN304@obj2ast_ex:

; 5296 :             }
; 5297 :             len = PyList_GET_SIZE(tmp);

  029d1	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  029d6	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  029da	48 89 84 24 80
	03 00 00	 mov	 QWORD PTR len$26609[rsp], rax

; 5298 :             generators = asdl_seq_new(len, arena);

  029e2	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  029ea	48 8b 8c 24 80
	03 00 00	 mov	 rcx, QWORD PTR len$26609[rsp]
  029f2	e8 00 00 00 00	 call	 asdl_seq_new
  029f7	48 89 84 24 58
	03 00 00	 mov	 QWORD PTR generators$26591[rsp], rax

; 5299 :             if (generators == NULL) goto failed;

  029ff	48 83 bc 24 58
	03 00 00 00	 cmp	 QWORD PTR generators$26591[rsp], 0
  02a08	75 05		 jne	 SHORT $LN303@obj2ast_ex
  02a0a	e9 4f 2d 00 00	 jmp	 $failed$26048
$LN303@obj2ast_ex:

; 5300 :             for (i = 0; i < len; i++) {

  02a0f	48 c7 84 24 78
	03 00 00 00 00
	00 00		 mov	 QWORD PTR i$26610[rsp], 0
  02a1b	eb 13		 jmp	 SHORT $LN302@obj2ast_ex
$LN301@obj2ast_ex:
  02a1d	48 8b 84 24 78
	03 00 00	 mov	 rax, QWORD PTR i$26610[rsp]
  02a25	48 ff c0	 inc	 rax
  02a28	48 89 84 24 78
	03 00 00	 mov	 QWORD PTR i$26610[rsp], rax
$LN302@obj2ast_ex:
  02a30	48 8b 84 24 80
	03 00 00	 mov	 rax, QWORD PTR len$26609[rsp]
  02a38	48 39 84 24 78
	03 00 00	 cmp	 QWORD PTR i$26610[rsp], rax
  02a40	0f 8d ac 00 00
	00		 jge	 $LN300@obj2ast_ex

; 5301 :                 comprehension_ty value;
; 5302 :                 res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &value, arena);

  02a46	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  02a4b	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  02a4f	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02a57	48 8d 94 24 88
	03 00 00	 lea	 rdx, QWORD PTR value$26622[rsp]
  02a5f	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR i$26610[rsp]
  02a67	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  02a6b	e8 00 00 00 00	 call	 obj2ast_comprehension
  02a70	89 84 24 70 03
	00 00		 mov	 DWORD PTR res$26608[rsp], eax

; 5303 :                 if (res != 0) goto failed;

  02a77	83 bc 24 70 03
	00 00 00	 cmp	 DWORD PTR res$26608[rsp], 0
  02a7f	74 05		 je	 SHORT $LN299@obj2ast_ex
  02a81	e9 d8 2c 00 00	 jmp	 $failed$26048
$LN299@obj2ast_ex:

; 5304 :                 asdl_seq_SET(generators, i, value);

  02a86	8b 84 24 78 03
	00 00		 mov	 eax, DWORD PTR i$26610[rsp]
  02a8d	89 84 24 90 03
	00 00		 mov	 DWORD PTR _asdl_i$26625[rsp], eax
  02a94	48 83 bc 24 58
	03 00 00 00	 cmp	 QWORD PTR generators$26591[rsp], 0
  02a9d	74 15		 je	 SHORT $LN591@obj2ast_ex
  02a9f	48 63 84 24 90
	03 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26625[rsp]
  02aa7	48 8b 8c 24 58
	03 00 00	 mov	 rcx, QWORD PTR generators$26591[rsp]
  02aaf	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  02ab2	7c 1c		 jl	 SHORT $LN592@obj2ast_ex
$LN591@obj2ast_ex:
  02ab4	41 b8 b8 14 00
	00		 mov	 r8d, 5304		; 000014b8H
  02aba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  02ac1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@HFOAFHGA@?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAg?$AAe?$AAn?$AAe?$AAr@
  02ac8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02ace	33 c0		 xor	 eax, eax
$LN592@obj2ast_ex:
  02ad0	48 63 84 24 90
	03 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26625[rsp]
  02ad8	48 8b 8c 24 58
	03 00 00	 mov	 rcx, QWORD PTR generators$26591[rsp]
  02ae0	48 8b 94 24 88
	03 00 00	 mov	 rdx, QWORD PTR value$26622[rsp]
  02ae8	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5305 :             }

  02aed	e9 2b ff ff ff	 jmp	 $LN301@obj2ast_ex
$LN300@obj2ast_ex:
$LN298@obj2ast_ex:

; 5306 :             Py_CLEAR(tmp);

  02af2	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02af8	74 4d		 je	 SHORT $LN295@obj2ast_ex
  02afa	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02b02	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  02b07	41 b8 ba 14 00
	00		 mov	 r8d, 5306		; 000014baH
  02b0d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02b14	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  02b1b	e8 00 00 00 00	 call	 _PyParallel_Guard
  02b20	85 c0		 test	 eax, eax
  02b22	75 23		 jne	 SHORT $LN295@obj2ast_ex
  02b24	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  02b29	48 89 84 24 98
	03 00 00	 mov	 QWORD PTR _py_tmp$26631[rsp], rax
  02b31	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02b3a	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$26631[rsp]
  02b42	e8 00 00 00 00	 call	 _Py_DecRef
$LN295@obj2ast_ex:
  02b47	33 c0		 xor	 eax, eax
  02b49	85 c0		 test	 eax, eax
  02b4b	75 a5		 jne	 SHORT $LN298@obj2ast_ex

; 5307 :         } else {

  02b4d	eb 1d		 jmp	 SHORT $LN294@obj2ast_ex
$LN306@obj2ast_ex:

; 5308 :             PyErr_SetString(PyExc_TypeError, "required field \"generators\" missing from GeneratorExp");

  02b4f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@FFMKMNIB@required?5field?5?$CCgenerators?$CC?5miss@
  02b56	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02b5d	e8 00 00 00 00	 call	 PyErr_SetString

; 5309 :             return 1;

  02b62	b8 01 00 00 00	 mov	 eax, 1
  02b67	e9 0f 2c 00 00	 jmp	 $LN575@obj2ast_ex
$LN294@obj2ast_ex:

; 5310 :         }
; 5311 :         *out = GeneratorExp(elt, generators, lineno, col_offset, arena);

  02b6c	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  02b74	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02b79	44 8b 4c 24 50	 mov	 r9d, DWORD PTR col_offset$[rsp]
  02b7e	44 8b 44 24 40	 mov	 r8d, DWORD PTR lineno$[rsp]
  02b83	48 8b 94 24 58
	03 00 00	 mov	 rdx, QWORD PTR generators$26591[rsp]
  02b8b	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR elt$26590[rsp]
  02b93	e8 00 00 00 00	 call	 _Py_GeneratorExp
  02b98	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  02ba0	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5312 :         if (*out == NULL) goto failed;

  02ba3	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  02bab	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  02baf	75 05		 jne	 SHORT $LN293@obj2ast_ex
  02bb1	e9 a8 2b 00 00	 jmp	 $failed$26048
$LN293@obj2ast_ex:

; 5313 :         return 0;

  02bb6	33 c0		 xor	 eax, eax
  02bb8	e9 be 2b 00 00	 jmp	 $LN575@obj2ast_ex
$LN315@obj2ast_ex:

; 5314 :     }
; 5315 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Yield_type);

  02bbd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Yield_type
  02bc4	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02bcc	e8 00 00 00 00	 call	 PyObject_IsInstance
  02bd1	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5316 :     if (isinstance == -1) {

  02bd5	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  02bda	75 0a		 jne	 SHORT $LN292@obj2ast_ex

; 5317 :         return 1;

  02bdc	b8 01 00 00 00	 mov	 eax, 1
  02be1	e9 95 2b 00 00	 jmp	 $LN575@obj2ast_ex
$LN292@obj2ast_ex:

; 5318 :     }
; 5319 :     if (isinstance) {

  02be6	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  02beb	0f 84 4a 01 00
	00		 je	 $LN291@obj2ast_ex

; 5320 :         expr_ty value;
; 5321 : 
; 5322 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  02bf1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  02bf6	8b c0		 mov	 eax, eax
  02bf8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02bfe	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02c07	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02c0b	48 8b d0	 mov	 rdx, rax
  02c0e	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02c16	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02c1b	85 c0		 test	 eax, eax
  02c1d	0f 84 c9 00 00
	00		 je	 $LN290@obj2ast_ex

; 5323 :             int res;
; 5324 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  02c23	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  02c28	8b c0		 mov	 eax, eax
  02c2a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02c30	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02c39	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02c3d	48 8b d0	 mov	 rdx, rax
  02c40	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02c48	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02c4d	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5325 :             if (tmp == NULL) goto failed;

  02c52	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02c58	75 05		 jne	 SHORT $LN289@obj2ast_ex
  02c5a	e9 ff 2a 00 00	 jmp	 $failed$26048
$LN289@obj2ast_ex:

; 5326 :             res = obj2ast_expr(tmp, &value, arena);

  02c5f	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02c67	48 8d 94 24 a0
	03 00 00	 lea	 rdx, QWORD PTR value$26642[rsp]
  02c6f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  02c74	e8 00 00 00 00	 call	 obj2ast_expr
  02c79	89 84 24 a8 03
	00 00		 mov	 DWORD PTR res$26644[rsp], eax

; 5327 :             if (res != 0) goto failed;

  02c80	83 bc 24 a8 03
	00 00 00	 cmp	 DWORD PTR res$26644[rsp], 0
  02c88	74 05		 je	 SHORT $LN288@obj2ast_ex
  02c8a	e9 cf 2a 00 00	 jmp	 $failed$26048
$LN288@obj2ast_ex:
$LN287@obj2ast_ex:

; 5328 :             Py_CLEAR(tmp);

  02c8f	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02c95	74 4d		 je	 SHORT $LN284@obj2ast_ex
  02c97	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02c9f	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  02ca4	41 b8 d0 14 00
	00		 mov	 r8d, 5328		; 000014d0H
  02caa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02cb1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  02cb8	e8 00 00 00 00	 call	 _PyParallel_Guard
  02cbd	85 c0		 test	 eax, eax
  02cbf	75 23		 jne	 SHORT $LN284@obj2ast_ex
  02cc1	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  02cc6	48 89 84 24 b0
	03 00 00	 mov	 QWORD PTR _py_tmp$26652[rsp], rax
  02cce	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02cd7	48 8b 8c 24 b0
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$26652[rsp]
  02cdf	e8 00 00 00 00	 call	 _Py_DecRef
$LN284@obj2ast_ex:
  02ce4	33 c0		 xor	 eax, eax
  02ce6	85 c0		 test	 eax, eax
  02ce8	75 a5		 jne	 SHORT $LN287@obj2ast_ex

; 5329 :         } else {

  02cea	eb 0c		 jmp	 SHORT $LN283@obj2ast_ex
$LN290@obj2ast_ex:

; 5330 :             value = NULL;

  02cec	48 c7 84 24 a0
	03 00 00 00 00
	00 00		 mov	 QWORD PTR value$26642[rsp], 0
$LN283@obj2ast_ex:

; 5331 :         }
; 5332 :         *out = Yield(value, lineno, col_offset, arena);

  02cf8	4c 8b 8c 24 e0
	06 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  02d00	44 8b 44 24 50	 mov	 r8d, DWORD PTR col_offset$[rsp]
  02d05	8b 54 24 40	 mov	 edx, DWORD PTR lineno$[rsp]
  02d09	48 8b 8c 24 a0
	03 00 00	 mov	 rcx, QWORD PTR value$26642[rsp]
  02d11	e8 00 00 00 00	 call	 _Py_Yield
  02d16	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  02d1e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5333 :         if (*out == NULL) goto failed;

  02d21	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  02d29	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  02d2d	75 05		 jne	 SHORT $LN282@obj2ast_ex
  02d2f	e9 2a 2a 00 00	 jmp	 $failed$26048
$LN282@obj2ast_ex:

; 5334 :         return 0;

  02d34	33 c0		 xor	 eax, eax
  02d36	e9 40 2a 00 00	 jmp	 $LN575@obj2ast_ex
$LN291@obj2ast_ex:

; 5335 :     }
; 5336 :     isinstance = PyObject_IsInstance(obj, (PyObject*)YieldFrom_type);

  02d3b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR YieldFrom_type
  02d42	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02d4a	e8 00 00 00 00	 call	 PyObject_IsInstance
  02d4f	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5337 :     if (isinstance == -1) {

  02d53	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  02d58	75 0a		 jne	 SHORT $LN281@obj2ast_ex

; 5338 :         return 1;

  02d5a	b8 01 00 00 00	 mov	 eax, 1
  02d5f	e9 17 2a 00 00	 jmp	 $LN575@obj2ast_ex
$LN281@obj2ast_ex:

; 5339 :     }
; 5340 :     if (isinstance) {

  02d64	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  02d69	0f 84 5b 01 00
	00		 je	 $LN280@obj2ast_ex

; 5341 :         expr_ty value;
; 5342 : 
; 5343 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  02d6f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  02d74	8b c0		 mov	 eax, eax
  02d76	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02d7c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02d85	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02d89	48 8b d0	 mov	 rdx, rax
  02d8c	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02d94	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02d99	85 c0		 test	 eax, eax
  02d9b	0f 84 c9 00 00
	00		 je	 $LN279@obj2ast_ex

; 5344 :             int res;
; 5345 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  02da1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  02da6	8b c0		 mov	 eax, eax
  02da8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02dae	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02db7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02dbb	48 8b d0	 mov	 rdx, rax
  02dbe	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02dc6	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02dcb	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5346 :             if (tmp == NULL) goto failed;

  02dd0	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02dd6	75 05		 jne	 SHORT $LN278@obj2ast_ex
  02dd8	e9 81 29 00 00	 jmp	 $failed$26048
$LN278@obj2ast_ex:

; 5347 :             res = obj2ast_expr(tmp, &value, arena);

  02ddd	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02de5	48 8d 94 24 b8
	03 00 00	 lea	 rdx, QWORD PTR value$26663[rsp]
  02ded	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  02df2	e8 00 00 00 00	 call	 obj2ast_expr
  02df7	89 84 24 c0 03
	00 00		 mov	 DWORD PTR res$26665[rsp], eax

; 5348 :             if (res != 0) goto failed;

  02dfe	83 bc 24 c0 03
	00 00 00	 cmp	 DWORD PTR res$26665[rsp], 0
  02e06	74 05		 je	 SHORT $LN277@obj2ast_ex
  02e08	e9 51 29 00 00	 jmp	 $failed$26048
$LN277@obj2ast_ex:
$LN276@obj2ast_ex:

; 5349 :             Py_CLEAR(tmp);

  02e0d	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02e13	74 4d		 je	 SHORT $LN273@obj2ast_ex
  02e15	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02e1d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  02e22	41 b8 e5 14 00
	00		 mov	 r8d, 5349		; 000014e5H
  02e28	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02e2f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  02e36	e8 00 00 00 00	 call	 _PyParallel_Guard
  02e3b	85 c0		 test	 eax, eax
  02e3d	75 23		 jne	 SHORT $LN273@obj2ast_ex
  02e3f	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  02e44	48 89 84 24 c8
	03 00 00	 mov	 QWORD PTR _py_tmp$26673[rsp], rax
  02e4c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02e55	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$26673[rsp]
  02e5d	e8 00 00 00 00	 call	 _Py_DecRef
$LN273@obj2ast_ex:
  02e62	33 c0		 xor	 eax, eax
  02e64	85 c0		 test	 eax, eax
  02e66	75 a5		 jne	 SHORT $LN276@obj2ast_ex

; 5350 :         } else {

  02e68	eb 1d		 jmp	 SHORT $LN272@obj2ast_ex
$LN279@obj2ast_ex:

; 5351 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from YieldFrom");

  02e6a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@HEDCCLBN@required?5field?5?$CCvalue?$CC?5missing?5f@
  02e71	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  02e78	e8 00 00 00 00	 call	 PyErr_SetString

; 5352 :             return 1;

  02e7d	b8 01 00 00 00	 mov	 eax, 1
  02e82	e9 f4 28 00 00	 jmp	 $LN575@obj2ast_ex
$LN272@obj2ast_ex:

; 5353 :         }
; 5354 :         *out = YieldFrom(value, lineno, col_offset, arena);

  02e87	4c 8b 8c 24 e0
	06 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  02e8f	44 8b 44 24 50	 mov	 r8d, DWORD PTR col_offset$[rsp]
  02e94	8b 54 24 40	 mov	 edx, DWORD PTR lineno$[rsp]
  02e98	48 8b 8c 24 b8
	03 00 00	 mov	 rcx, QWORD PTR value$26663[rsp]
  02ea0	e8 00 00 00 00	 call	 _Py_YieldFrom
  02ea5	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  02ead	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5355 :         if (*out == NULL) goto failed;

  02eb0	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  02eb8	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  02ebc	75 05		 jne	 SHORT $LN271@obj2ast_ex
  02ebe	e9 9b 28 00 00	 jmp	 $failed$26048
$LN271@obj2ast_ex:

; 5356 :         return 0;

  02ec3	33 c0		 xor	 eax, eax
  02ec5	e9 b1 28 00 00	 jmp	 $LN575@obj2ast_ex
$LN280@obj2ast_ex:

; 5357 :     }
; 5358 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Compare_type);

  02eca	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Compare_type
  02ed1	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02ed9	e8 00 00 00 00	 call	 PyObject_IsInstance
  02ede	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5359 :     if (isinstance == -1) {

  02ee2	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  02ee7	75 0a		 jne	 SHORT $LN270@obj2ast_ex

; 5360 :         return 1;

  02ee9	b8 01 00 00 00	 mov	 eax, 1
  02eee	e9 88 28 00 00	 jmp	 $LN575@obj2ast_ex
$LN270@obj2ast_ex:

; 5361 :     }
; 5362 :     if (isinstance) {

  02ef3	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  02ef8	0f 84 fe 05 00
	00		 je	 $LN269@obj2ast_ex

; 5363 :         expr_ty left;
; 5364 :         asdl_int_seq* ops;
; 5365 :         asdl_seq* comparators;
; 5366 : 
; 5367 :         if (_PyObject_HasAttrId(obj, &PyId_left)) {

  02efe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_left
  02f03	8b c0		 mov	 eax, eax
  02f05	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02f0b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02f14	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02f18	48 8b d0	 mov	 rdx, rax
  02f1b	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02f23	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  02f28	85 c0		 test	 eax, eax
  02f2a	0f 84 c9 00 00
	00		 je	 $LN268@obj2ast_ex

; 5368 :             int res;
; 5369 :             tmp = _PyObject_GetAttrId(obj, &PyId_left);

  02f30	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_left
  02f35	8b c0		 mov	 eax, eax
  02f37	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02f3d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02f46	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  02f4a	48 8b d0	 mov	 rdx, rax
  02f4d	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  02f55	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  02f5a	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5370 :             if (tmp == NULL) goto failed;

  02f5f	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02f65	75 05		 jne	 SHORT $LN267@obj2ast_ex
  02f67	e9 f2 27 00 00	 jmp	 $failed$26048
$LN267@obj2ast_ex:

; 5371 :             res = obj2ast_expr(tmp, &left, arena);

  02f6c	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  02f74	48 8d 94 24 e0
	03 00 00	 lea	 rdx, QWORD PTR left$26684[rsp]
  02f7c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  02f81	e8 00 00 00 00	 call	 obj2ast_expr
  02f86	89 84 24 e8 03
	00 00		 mov	 DWORD PTR res$26688[rsp], eax

; 5372 :             if (res != 0) goto failed;

  02f8d	83 bc 24 e8 03
	00 00 00	 cmp	 DWORD PTR res$26688[rsp], 0
  02f95	74 05		 je	 SHORT $LN266@obj2ast_ex
  02f97	e9 c2 27 00 00	 jmp	 $failed$26048
$LN266@obj2ast_ex:
$LN265@obj2ast_ex:

; 5373 :             Py_CLEAR(tmp);

  02f9c	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  02fa2	74 4d		 je	 SHORT $LN262@obj2ast_ex
  02fa4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02fac	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  02fb1	41 b8 fd 14 00
	00		 mov	 r8d, 5373		; 000014fdH
  02fb7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  02fbe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  02fc5	e8 00 00 00 00	 call	 _PyParallel_Guard
  02fca	85 c0		 test	 eax, eax
  02fcc	75 23		 jne	 SHORT $LN262@obj2ast_ex
  02fce	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  02fd3	48 89 84 24 f0
	03 00 00	 mov	 QWORD PTR _py_tmp$26696[rsp], rax
  02fdb	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  02fe4	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR _py_tmp$26696[rsp]
  02fec	e8 00 00 00 00	 call	 _Py_DecRef
$LN262@obj2ast_ex:
  02ff1	33 c0		 xor	 eax, eax
  02ff3	85 c0		 test	 eax, eax
  02ff5	75 a5		 jne	 SHORT $LN265@obj2ast_ex

; 5374 :         } else {

  02ff7	eb 1d		 jmp	 SHORT $LN261@obj2ast_ex
$LN268@obj2ast_ex:

; 5375 :             PyErr_SetString(PyExc_TypeError, "required field \"left\" missing from Compare");

  02ff9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@IAGPHPKA@required?5field?5?$CCleft?$CC?5missing?5fr@
  03000	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03007	e8 00 00 00 00	 call	 PyErr_SetString

; 5376 :             return 1;

  0300c	b8 01 00 00 00	 mov	 eax, 1
  03011	e9 65 27 00 00	 jmp	 $LN575@obj2ast_ex
$LN261@obj2ast_ex:

; 5377 :         }
; 5378 :         if (_PyObject_HasAttrId(obj, &PyId_ops)) {

  03016	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ops
  0301b	8b c0		 mov	 eax, eax
  0301d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03023	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0302c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03030	48 8b d0	 mov	 rdx, rax
  03033	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0303b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03040	85 c0		 test	 eax, eax
  03042	0f 84 f5 01 00
	00		 je	 $LN260@obj2ast_ex

; 5379 :             int res;
; 5380 :             Py_ssize_t len;
; 5381 :             Py_ssize_t i;
; 5382 :             tmp = _PyObject_GetAttrId(obj, &PyId_ops);

  03048	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ops
  0304d	8b c0		 mov	 eax, eax
  0304f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03055	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0305e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03062	48 8b d0	 mov	 rdx, rax
  03065	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0306d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  03072	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5383 :             if (tmp == NULL) goto failed;

  03077	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0307d	75 05		 jne	 SHORT $LN259@obj2ast_ex
  0307f	e9 da 26 00 00	 jmp	 $failed$26048
$LN259@obj2ast_ex:

; 5384 :             if (!PyList_Check(tmp)) {

  03084	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  03089	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0308d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03093	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  03098	85 c0		 test	 eax, eax
  0309a	75 25		 jne	 SHORT $LN258@obj2ast_ex

; 5385 :                 PyErr_Format(PyExc_TypeError, "Compare field \"ops\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0309c	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  030a1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  030a5	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  030a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@LPCFPBLI@Compare?5field?5?$CCops?$CC?5must?5be?5a?5li@
  030b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  030b7	e8 00 00 00 00	 call	 PyErr_Format

; 5386 :                 goto failed;

  030bc	e9 9d 26 00 00	 jmp	 $failed$26048
$LN258@obj2ast_ex:

; 5387 :             }
; 5388 :             len = PyList_GET_SIZE(tmp);

  030c1	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  030c6	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  030ca	48 89 84 24 08
	04 00 00	 mov	 QWORD PTR len$26704[rsp], rax

; 5389 :             ops = asdl_int_seq_new(len, arena);

  030d2	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  030da	48 8b 8c 24 08
	04 00 00	 mov	 rcx, QWORD PTR len$26704[rsp]
  030e2	e8 00 00 00 00	 call	 asdl_int_seq_new
  030e7	48 89 84 24 d8
	03 00 00	 mov	 QWORD PTR ops$26685[rsp], rax

; 5390 :             if (ops == NULL) goto failed;

  030ef	48 83 bc 24 d8
	03 00 00 00	 cmp	 QWORD PTR ops$26685[rsp], 0
  030f8	75 05		 jne	 SHORT $LN257@obj2ast_ex
  030fa	e9 5f 26 00 00	 jmp	 $failed$26048
$LN257@obj2ast_ex:

; 5391 :             for (i = 0; i < len; i++) {

  030ff	48 c7 84 24 00
	04 00 00 00 00
	00 00		 mov	 QWORD PTR i$26705[rsp], 0
  0310b	eb 13		 jmp	 SHORT $LN256@obj2ast_ex
$LN255@obj2ast_ex:
  0310d	48 8b 84 24 00
	04 00 00	 mov	 rax, QWORD PTR i$26705[rsp]
  03115	48 ff c0	 inc	 rax
  03118	48 89 84 24 00
	04 00 00	 mov	 QWORD PTR i$26705[rsp], rax
$LN256@obj2ast_ex:
  03120	48 8b 84 24 08
	04 00 00	 mov	 rax, QWORD PTR len$26704[rsp]
  03128	48 39 84 24 00
	04 00 00	 cmp	 QWORD PTR i$26705[rsp], rax
  03130	0f 8d aa 00 00
	00		 jge	 $LN254@obj2ast_ex

; 5392 :                 cmpop_ty value;
; 5393 :                 res = obj2ast_cmpop(PyList_GET_ITEM(tmp, i), &value, arena);

  03136	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0313b	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0313f	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  03147	48 8d 94 24 10
	04 00 00	 lea	 rdx, QWORD PTR value$26717[rsp]
  0314f	48 8b 8c 24 00
	04 00 00	 mov	 rcx, QWORD PTR i$26705[rsp]
  03157	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0315b	e8 00 00 00 00	 call	 obj2ast_cmpop
  03160	89 84 24 f8 03
	00 00		 mov	 DWORD PTR res$26703[rsp], eax

; 5394 :                 if (res != 0) goto failed;

  03167	83 bc 24 f8 03
	00 00 00	 cmp	 DWORD PTR res$26703[rsp], 0
  0316f	74 05		 je	 SHORT $LN253@obj2ast_ex
  03171	e9 e8 25 00 00	 jmp	 $failed$26048
$LN253@obj2ast_ex:

; 5395 :                 asdl_seq_SET(ops, i, value);

  03176	8b 84 24 00 04
	00 00		 mov	 eax, DWORD PTR i$26705[rsp]
  0317d	89 84 24 14 04
	00 00		 mov	 DWORD PTR _asdl_i$26720[rsp], eax
  03184	48 83 bc 24 d8
	03 00 00 00	 cmp	 QWORD PTR ops$26685[rsp], 0
  0318d	74 15		 je	 SHORT $LN593@obj2ast_ex
  0318f	48 63 84 24 14
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26720[rsp]
  03197	48 8b 8c 24 d8
	03 00 00	 mov	 rcx, QWORD PTR ops$26685[rsp]
  0319f	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  031a2	7c 1c		 jl	 SHORT $LN594@obj2ast_ex
$LN593@obj2ast_ex:
  031a4	41 b8 13 15 00
	00		 mov	 r8d, 5395		; 00001513H
  031aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  031b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@HAJJNCPB@?$AA?$CI?$AAo?$AAp?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAo?$AAp?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
  031b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  031be	33 c0		 xor	 eax, eax
$LN594@obj2ast_ex:
  031c0	48 63 84 24 14
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26720[rsp]
  031c8	48 8b 8c 24 d8
	03 00 00	 mov	 rcx, QWORD PTR ops$26685[rsp]
  031d0	8b 94 24 10 04
	00 00		 mov	 edx, DWORD PTR value$26717[rsp]
  031d7	89 54 81 08	 mov	 DWORD PTR [rcx+rax*4+8], edx

; 5396 :             }

  031db	e9 2d ff ff ff	 jmp	 $LN255@obj2ast_ex
$LN254@obj2ast_ex:
$LN252@obj2ast_ex:

; 5397 :             Py_CLEAR(tmp);

  031e0	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  031e6	74 4d		 je	 SHORT $LN249@obj2ast_ex
  031e8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  031f0	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  031f5	41 b8 15 15 00
	00		 mov	 r8d, 5397		; 00001515H
  031fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03202	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  03209	e8 00 00 00 00	 call	 _PyParallel_Guard
  0320e	85 c0		 test	 eax, eax
  03210	75 23		 jne	 SHORT $LN249@obj2ast_ex
  03212	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  03217	48 89 84 24 18
	04 00 00	 mov	 QWORD PTR _py_tmp$26727[rsp], rax
  0321f	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  03228	48 8b 8c 24 18
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$26727[rsp]
  03230	e8 00 00 00 00	 call	 _Py_DecRef
$LN249@obj2ast_ex:
  03235	33 c0		 xor	 eax, eax
  03237	85 c0		 test	 eax, eax
  03239	75 a5		 jne	 SHORT $LN252@obj2ast_ex

; 5398 :         } else {

  0323b	eb 1d		 jmp	 SHORT $LN248@obj2ast_ex
$LN260@obj2ast_ex:

; 5399 :             PyErr_SetString(PyExc_TypeError, "required field \"ops\" missing from Compare");

  0323d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EJGPDIPB@required?5field?5?$CCops?$CC?5missing?5fro@
  03244	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0324b	e8 00 00 00 00	 call	 PyErr_SetString

; 5400 :             return 1;

  03250	b8 01 00 00 00	 mov	 eax, 1
  03255	e9 21 25 00 00	 jmp	 $LN575@obj2ast_ex
$LN248@obj2ast_ex:

; 5401 :         }
; 5402 :         if (_PyObject_HasAttrId(obj, &PyId_comparators)) {

  0325a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_comparators
  0325f	8b c0		 mov	 eax, eax
  03261	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03267	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03270	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03274	48 8b d0	 mov	 rdx, rax
  03277	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0327f	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03284	85 c0		 test	 eax, eax
  03286	0f 84 f7 01 00
	00		 je	 $LN247@obj2ast_ex

; 5403 :             int res;
; 5404 :             Py_ssize_t len;
; 5405 :             Py_ssize_t i;
; 5406 :             tmp = _PyObject_GetAttrId(obj, &PyId_comparators);

  0328c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_comparators
  03291	8b c0		 mov	 eax, eax
  03293	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03299	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  032a2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  032a6	48 8b d0	 mov	 rdx, rax
  032a9	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  032b1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  032b6	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5407 :             if (tmp == NULL) goto failed;

  032bb	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  032c1	75 05		 jne	 SHORT $LN246@obj2ast_ex
  032c3	e9 96 24 00 00	 jmp	 $failed$26048
$LN246@obj2ast_ex:

; 5408 :             if (!PyList_Check(tmp)) {

  032c8	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  032cd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  032d1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  032d7	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  032dc	85 c0		 test	 eax, eax
  032de	75 25		 jne	 SHORT $LN245@obj2ast_ex

; 5409 :                 PyErr_Format(PyExc_TypeError, "Compare field \"comparators\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  032e0	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  032e5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  032e9	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  032ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@BIJCFAHA@Compare?5field?5?$CCcomparators?$CC?5must@
  032f4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  032fb	e8 00 00 00 00	 call	 PyErr_Format

; 5410 :                 goto failed;

  03300	e9 59 24 00 00	 jmp	 $failed$26048
$LN245@obj2ast_ex:

; 5411 :             }
; 5412 :             len = PyList_GET_SIZE(tmp);

  03305	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0330a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0330e	48 89 84 24 30
	04 00 00	 mov	 QWORD PTR len$26735[rsp], rax

; 5413 :             comparators = asdl_seq_new(len, arena);

  03316	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  0331e	48 8b 8c 24 30
	04 00 00	 mov	 rcx, QWORD PTR len$26735[rsp]
  03326	e8 00 00 00 00	 call	 asdl_seq_new
  0332b	48 89 84 24 d0
	03 00 00	 mov	 QWORD PTR comparators$26686[rsp], rax

; 5414 :             if (comparators == NULL) goto failed;

  03333	48 83 bc 24 d0
	03 00 00 00	 cmp	 QWORD PTR comparators$26686[rsp], 0
  0333c	75 05		 jne	 SHORT $LN244@obj2ast_ex
  0333e	e9 1b 24 00 00	 jmp	 $failed$26048
$LN244@obj2ast_ex:

; 5415 :             for (i = 0; i < len; i++) {

  03343	48 c7 84 24 28
	04 00 00 00 00
	00 00		 mov	 QWORD PTR i$26736[rsp], 0
  0334f	eb 13		 jmp	 SHORT $LN243@obj2ast_ex
$LN242@obj2ast_ex:
  03351	48 8b 84 24 28
	04 00 00	 mov	 rax, QWORD PTR i$26736[rsp]
  03359	48 ff c0	 inc	 rax
  0335c	48 89 84 24 28
	04 00 00	 mov	 QWORD PTR i$26736[rsp], rax
$LN243@obj2ast_ex:
  03364	48 8b 84 24 30
	04 00 00	 mov	 rax, QWORD PTR len$26735[rsp]
  0336c	48 39 84 24 28
	04 00 00	 cmp	 QWORD PTR i$26736[rsp], rax
  03374	0f 8d ac 00 00
	00		 jge	 $LN241@obj2ast_ex

; 5416 :                 expr_ty value;
; 5417 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  0337a	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0337f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  03383	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0338b	48 8d 94 24 38
	04 00 00	 lea	 rdx, QWORD PTR value$26748[rsp]
  03393	48 8b 8c 24 28
	04 00 00	 mov	 rcx, QWORD PTR i$26736[rsp]
  0339b	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0339f	e8 00 00 00 00	 call	 obj2ast_expr
  033a4	89 84 24 20 04
	00 00		 mov	 DWORD PTR res$26734[rsp], eax

; 5418 :                 if (res != 0) goto failed;

  033ab	83 bc 24 20 04
	00 00 00	 cmp	 DWORD PTR res$26734[rsp], 0
  033b3	74 05		 je	 SHORT $LN240@obj2ast_ex
  033b5	e9 a4 23 00 00	 jmp	 $failed$26048
$LN240@obj2ast_ex:

; 5419 :                 asdl_seq_SET(comparators, i, value);

  033ba	8b 84 24 28 04
	00 00		 mov	 eax, DWORD PTR i$26736[rsp]
  033c1	89 84 24 40 04
	00 00		 mov	 DWORD PTR _asdl_i$26751[rsp], eax
  033c8	48 83 bc 24 d0
	03 00 00 00	 cmp	 QWORD PTR comparators$26686[rsp], 0
  033d1	74 15		 je	 SHORT $LN595@obj2ast_ex
  033d3	48 63 84 24 40
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26751[rsp]
  033db	48 8b 8c 24 d0
	03 00 00	 mov	 rcx, QWORD PTR comparators$26686[rsp]
  033e3	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  033e6	7c 1c		 jl	 SHORT $LN596@obj2ast_ex
$LN595@obj2ast_ex:
  033e8	41 b8 2b 15 00
	00		 mov	 r8d, 5419		; 0000152bH
  033ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  033f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FO@IFANOCGD@?$AA?$CI?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAc?$AAo?$AAm?$AAp@
  033fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03402	33 c0		 xor	 eax, eax
$LN596@obj2ast_ex:
  03404	48 63 84 24 40
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26751[rsp]
  0340c	48 8b 8c 24 d0
	03 00 00	 mov	 rcx, QWORD PTR comparators$26686[rsp]
  03414	48 8b 94 24 38
	04 00 00	 mov	 rdx, QWORD PTR value$26748[rsp]
  0341c	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5420 :             }

  03421	e9 2b ff ff ff	 jmp	 $LN242@obj2ast_ex
$LN241@obj2ast_ex:
$LN239@obj2ast_ex:

; 5421 :             Py_CLEAR(tmp);

  03426	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0342c	74 4d		 je	 SHORT $LN236@obj2ast_ex
  0342e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03436	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0343b	41 b8 2d 15 00
	00		 mov	 r8d, 5421		; 0000152dH
  03441	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03448	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0344f	e8 00 00 00 00	 call	 _PyParallel_Guard
  03454	85 c0		 test	 eax, eax
  03456	75 23		 jne	 SHORT $LN236@obj2ast_ex
  03458	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0345d	48 89 84 24 48
	04 00 00	 mov	 QWORD PTR _py_tmp$26758[rsp], rax
  03465	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0346e	48 8b 8c 24 48
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$26758[rsp]
  03476	e8 00 00 00 00	 call	 _Py_DecRef
$LN236@obj2ast_ex:
  0347b	33 c0		 xor	 eax, eax
  0347d	85 c0		 test	 eax, eax
  0347f	75 a5		 jne	 SHORT $LN239@obj2ast_ex

; 5422 :         } else {

  03481	eb 1d		 jmp	 SHORT $LN235@obj2ast_ex
$LN247@obj2ast_ex:

; 5423 :             PyErr_SetString(PyExc_TypeError, "required field \"comparators\" missing from Compare");

  03483	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@OKCKOOGB@required?5field?5?$CCcomparators?$CC?5mis@
  0348a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03491	e8 00 00 00 00	 call	 PyErr_SetString

; 5424 :             return 1;

  03496	b8 01 00 00 00	 mov	 eax, 1
  0349b	e9 db 22 00 00	 jmp	 $LN575@obj2ast_ex
$LN235@obj2ast_ex:

; 5425 :         }
; 5426 :         *out = Compare(left, ops, comparators, lineno, col_offset, arena);

  034a0	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  034a8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  034ad	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  034b1	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  034b5	44 8b 4c 24 40	 mov	 r9d, DWORD PTR lineno$[rsp]
  034ba	4c 8b 84 24 d0
	03 00 00	 mov	 r8, QWORD PTR comparators$26686[rsp]
  034c2	48 8b 94 24 d8
	03 00 00	 mov	 rdx, QWORD PTR ops$26685[rsp]
  034ca	48 8b 8c 24 e0
	03 00 00	 mov	 rcx, QWORD PTR left$26684[rsp]
  034d2	e8 00 00 00 00	 call	 _Py_Compare
  034d7	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  034df	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5427 :         if (*out == NULL) goto failed;

  034e2	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  034ea	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  034ee	75 05		 jne	 SHORT $LN234@obj2ast_ex
  034f0	e9 69 22 00 00	 jmp	 $failed$26048
$LN234@obj2ast_ex:

; 5428 :         return 0;

  034f5	33 c0		 xor	 eax, eax
  034f7	e9 7f 22 00 00	 jmp	 $LN575@obj2ast_ex
$LN269@obj2ast_ex:

; 5429 :     }
; 5430 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Call_type);

  034fc	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Call_type
  03503	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0350b	e8 00 00 00 00	 call	 PyObject_IsInstance
  03510	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5431 :     if (isinstance == -1) {

  03514	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  03519	75 0a		 jne	 SHORT $LN233@obj2ast_ex

; 5432 :         return 1;

  0351b	b8 01 00 00 00	 mov	 eax, 1
  03520	e9 56 22 00 00	 jmp	 $LN575@obj2ast_ex
$LN233@obj2ast_ex:

; 5433 :     }
; 5434 :     if (isinstance) {

  03525	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0352a	0f 84 26 08 00
	00		 je	 $LN232@obj2ast_ex

; 5435 :         expr_ty func;
; 5436 :         asdl_seq* args;
; 5437 :         asdl_seq* keywords;
; 5438 :         expr_ty starargs;
; 5439 :         expr_ty kwargs;
; 5440 : 
; 5441 :         if (_PyObject_HasAttrId(obj, &PyId_func)) {

  03530	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_func
  03535	8b c0		 mov	 eax, eax
  03537	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0353d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03546	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0354a	48 8b d0	 mov	 rdx, rax
  0354d	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03555	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0355a	85 c0		 test	 eax, eax
  0355c	0f 84 c9 00 00
	00		 je	 $LN231@obj2ast_ex

; 5442 :             int res;
; 5443 :             tmp = _PyObject_GetAttrId(obj, &PyId_func);

  03562	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_func
  03567	8b c0		 mov	 eax, eax
  03569	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0356f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03578	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0357c	48 8b d0	 mov	 rdx, rax
  0357f	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03587	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0358c	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5444 :             if (tmp == NULL) goto failed;

  03591	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03597	75 05		 jne	 SHORT $LN230@obj2ast_ex
  03599	e9 c0 21 00 00	 jmp	 $failed$26048
$LN230@obj2ast_ex:

; 5445 :             res = obj2ast_expr(tmp, &func, arena);

  0359e	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  035a6	48 8d 94 24 70
	04 00 00	 lea	 rdx, QWORD PTR func$26769[rsp]
  035ae	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  035b3	e8 00 00 00 00	 call	 obj2ast_expr
  035b8	89 84 24 78 04
	00 00		 mov	 DWORD PTR res$26775[rsp], eax

; 5446 :             if (res != 0) goto failed;

  035bf	83 bc 24 78 04
	00 00 00	 cmp	 DWORD PTR res$26775[rsp], 0
  035c7	74 05		 je	 SHORT $LN229@obj2ast_ex
  035c9	e9 90 21 00 00	 jmp	 $failed$26048
$LN229@obj2ast_ex:
$LN228@obj2ast_ex:

; 5447 :             Py_CLEAR(tmp);

  035ce	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  035d4	74 4d		 je	 SHORT $LN225@obj2ast_ex
  035d6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  035de	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  035e3	41 b8 47 15 00
	00		 mov	 r8d, 5447		; 00001547H
  035e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  035f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  035f7	e8 00 00 00 00	 call	 _PyParallel_Guard
  035fc	85 c0		 test	 eax, eax
  035fe	75 23		 jne	 SHORT $LN225@obj2ast_ex
  03600	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  03605	48 89 84 24 80
	04 00 00	 mov	 QWORD PTR _py_tmp$26783[rsp], rax
  0360d	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  03616	48 8b 8c 24 80
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$26783[rsp]
  0361e	e8 00 00 00 00	 call	 _Py_DecRef
$LN225@obj2ast_ex:
  03623	33 c0		 xor	 eax, eax
  03625	85 c0		 test	 eax, eax
  03627	75 a5		 jne	 SHORT $LN228@obj2ast_ex

; 5448 :         } else {

  03629	eb 1d		 jmp	 SHORT $LN224@obj2ast_ex
$LN231@obj2ast_ex:

; 5449 :             PyErr_SetString(PyExc_TypeError, "required field \"func\" missing from Call");

  0362b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@NOCOEJHL@required?5field?5?$CCfunc?$CC?5missing?5fr@
  03632	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03639	e8 00 00 00 00	 call	 PyErr_SetString

; 5450 :             return 1;

  0363e	b8 01 00 00 00	 mov	 eax, 1
  03643	e9 33 21 00 00	 jmp	 $LN575@obj2ast_ex
$LN224@obj2ast_ex:

; 5451 :         }
; 5452 :         if (_PyObject_HasAttrId(obj, &PyId_args)) {

  03648	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  0364d	8b c0		 mov	 eax, eax
  0364f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03655	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0365e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03662	48 8b d0	 mov	 rdx, rax
  03665	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0366d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03672	85 c0		 test	 eax, eax
  03674	0f 84 f7 01 00
	00		 je	 $LN223@obj2ast_ex

; 5453 :             int res;
; 5454 :             Py_ssize_t len;
; 5455 :             Py_ssize_t i;
; 5456 :             tmp = _PyObject_GetAttrId(obj, &PyId_args);

  0367a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  0367f	8b c0		 mov	 eax, eax
  03681	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03687	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03690	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03694	48 8b d0	 mov	 rdx, rax
  03697	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0369f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  036a4	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5457 :             if (tmp == NULL) goto failed;

  036a9	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  036af	75 05		 jne	 SHORT $LN222@obj2ast_ex
  036b1	e9 a8 20 00 00	 jmp	 $failed$26048
$LN222@obj2ast_ex:

; 5458 :             if (!PyList_Check(tmp)) {

  036b6	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  036bb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  036bf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  036c5	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  036ca	85 c0		 test	 eax, eax
  036cc	75 25		 jne	 SHORT $LN221@obj2ast_ex

; 5459 :                 PyErr_Format(PyExc_TypeError, "Call field \"args\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  036ce	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  036d3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  036d7	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  036db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@BJIMJFDA@Call?5field?5?$CCargs?$CC?5must?5be?5a?5list@
  036e2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  036e9	e8 00 00 00 00	 call	 PyErr_Format

; 5460 :                 goto failed;

  036ee	e9 6b 20 00 00	 jmp	 $failed$26048
$LN221@obj2ast_ex:

; 5461 :             }
; 5462 :             len = PyList_GET_SIZE(tmp);

  036f3	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  036f8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  036fc	48 89 84 24 98
	04 00 00	 mov	 QWORD PTR len$26791[rsp], rax

; 5463 :             args = asdl_seq_new(len, arena);

  03704	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  0370c	48 8b 8c 24 98
	04 00 00	 mov	 rcx, QWORD PTR len$26791[rsp]
  03714	e8 00 00 00 00	 call	 asdl_seq_new
  03719	48 89 84 24 58
	04 00 00	 mov	 QWORD PTR args$26770[rsp], rax

; 5464 :             if (args == NULL) goto failed;

  03721	48 83 bc 24 58
	04 00 00 00	 cmp	 QWORD PTR args$26770[rsp], 0
  0372a	75 05		 jne	 SHORT $LN220@obj2ast_ex
  0372c	e9 2d 20 00 00	 jmp	 $failed$26048
$LN220@obj2ast_ex:

; 5465 :             for (i = 0; i < len; i++) {

  03731	48 c7 84 24 90
	04 00 00 00 00
	00 00		 mov	 QWORD PTR i$26792[rsp], 0
  0373d	eb 13		 jmp	 SHORT $LN219@obj2ast_ex
$LN218@obj2ast_ex:
  0373f	48 8b 84 24 90
	04 00 00	 mov	 rax, QWORD PTR i$26792[rsp]
  03747	48 ff c0	 inc	 rax
  0374a	48 89 84 24 90
	04 00 00	 mov	 QWORD PTR i$26792[rsp], rax
$LN219@obj2ast_ex:
  03752	48 8b 84 24 98
	04 00 00	 mov	 rax, QWORD PTR len$26791[rsp]
  0375a	48 39 84 24 90
	04 00 00	 cmp	 QWORD PTR i$26792[rsp], rax
  03762	0f 8d ac 00 00
	00		 jge	 $LN217@obj2ast_ex

; 5466 :                 expr_ty value;
; 5467 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  03768	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0376d	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  03771	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  03779	48 8d 94 24 a0
	04 00 00	 lea	 rdx, QWORD PTR value$26804[rsp]
  03781	48 8b 8c 24 90
	04 00 00	 mov	 rcx, QWORD PTR i$26792[rsp]
  03789	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0378d	e8 00 00 00 00	 call	 obj2ast_expr
  03792	89 84 24 88 04
	00 00		 mov	 DWORD PTR res$26790[rsp], eax

; 5468 :                 if (res != 0) goto failed;

  03799	83 bc 24 88 04
	00 00 00	 cmp	 DWORD PTR res$26790[rsp], 0
  037a1	74 05		 je	 SHORT $LN216@obj2ast_ex
  037a3	e9 b6 1f 00 00	 jmp	 $failed$26048
$LN216@obj2ast_ex:

; 5469 :                 asdl_seq_SET(args, i, value);

  037a8	8b 84 24 90 04
	00 00		 mov	 eax, DWORD PTR i$26792[rsp]
  037af	89 84 24 a8 04
	00 00		 mov	 DWORD PTR _asdl_i$26807[rsp], eax
  037b6	48 83 bc 24 58
	04 00 00 00	 cmp	 QWORD PTR args$26770[rsp], 0
  037bf	74 15		 je	 SHORT $LN597@obj2ast_ex
  037c1	48 63 84 24 a8
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26807[rsp]
  037c9	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR args$26770[rsp]
  037d1	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  037d4	7c 1c		 jl	 SHORT $LN598@obj2ast_ex
$LN597@obj2ast_ex:
  037d6	41 b8 5d 15 00
	00		 mov	 r8d, 5469		; 0000155dH
  037dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  037e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@KPDCIBGG@?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  037ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  037f0	33 c0		 xor	 eax, eax
$LN598@obj2ast_ex:
  037f2	48 63 84 24 a8
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26807[rsp]
  037fa	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR args$26770[rsp]
  03802	48 8b 94 24 a0
	04 00 00	 mov	 rdx, QWORD PTR value$26804[rsp]
  0380a	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5470 :             }

  0380f	e9 2b ff ff ff	 jmp	 $LN218@obj2ast_ex
$LN217@obj2ast_ex:
$LN215@obj2ast_ex:

; 5471 :             Py_CLEAR(tmp);

  03814	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0381a	74 4d		 je	 SHORT $LN212@obj2ast_ex
  0381c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03824	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  03829	41 b8 5f 15 00
	00		 mov	 r8d, 5471		; 0000155fH
  0382f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03836	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0383d	e8 00 00 00 00	 call	 _PyParallel_Guard
  03842	85 c0		 test	 eax, eax
  03844	75 23		 jne	 SHORT $LN212@obj2ast_ex
  03846	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0384b	48 89 84 24 b0
	04 00 00	 mov	 QWORD PTR _py_tmp$26814[rsp], rax
  03853	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0385c	48 8b 8c 24 b0
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$26814[rsp]
  03864	e8 00 00 00 00	 call	 _Py_DecRef
$LN212@obj2ast_ex:
  03869	33 c0		 xor	 eax, eax
  0386b	85 c0		 test	 eax, eax
  0386d	75 a5		 jne	 SHORT $LN215@obj2ast_ex

; 5472 :         } else {

  0386f	eb 1d		 jmp	 SHORT $LN211@obj2ast_ex
$LN223@obj2ast_ex:

; 5473 :             PyErr_SetString(PyExc_TypeError, "required field \"args\" missing from Call");

  03871	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@HMAALGIO@required?5field?5?$CCargs?$CC?5missing?5fr@
  03878	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0387f	e8 00 00 00 00	 call	 PyErr_SetString

; 5474 :             return 1;

  03884	b8 01 00 00 00	 mov	 eax, 1
  03889	e9 ed 1e 00 00	 jmp	 $LN575@obj2ast_ex
$LN211@obj2ast_ex:

; 5475 :         }
; 5476 :         if (_PyObject_HasAttrId(obj, &PyId_keywords)) {

  0388e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_keywords
  03893	8b c0		 mov	 eax, eax
  03895	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0389b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  038a4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  038a8	48 8b d0	 mov	 rdx, rax
  038ab	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  038b3	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  038b8	85 c0		 test	 eax, eax
  038ba	0f 84 f7 01 00
	00		 je	 $LN210@obj2ast_ex

; 5477 :             int res;
; 5478 :             Py_ssize_t len;
; 5479 :             Py_ssize_t i;
; 5480 :             tmp = _PyObject_GetAttrId(obj, &PyId_keywords);

  038c0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_keywords
  038c5	8b c0		 mov	 eax, eax
  038c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  038cd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  038d6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  038da	48 8b d0	 mov	 rdx, rax
  038dd	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  038e5	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  038ea	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5481 :             if (tmp == NULL) goto failed;

  038ef	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  038f5	75 05		 jne	 SHORT $LN209@obj2ast_ex
  038f7	e9 62 1e 00 00	 jmp	 $failed$26048
$LN209@obj2ast_ex:

; 5482 :             if (!PyList_Check(tmp)) {

  038fc	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  03901	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03905	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0390b	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  03910	85 c0		 test	 eax, eax
  03912	75 25		 jne	 SHORT $LN208@obj2ast_ex

; 5483 :                 PyErr_Format(PyExc_TypeError, "Call field \"keywords\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  03914	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  03919	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0391d	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  03921	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@OIKFBKNP@Call?5field?5?$CCkeywords?$CC?5must?5be?5a?5@
  03928	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0392f	e8 00 00 00 00	 call	 PyErr_Format

; 5484 :                 goto failed;

  03934	e9 25 1e 00 00	 jmp	 $failed$26048
$LN208@obj2ast_ex:

; 5485 :             }
; 5486 :             len = PyList_GET_SIZE(tmp);

  03939	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0393e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  03942	48 89 84 24 c8
	04 00 00	 mov	 QWORD PTR len$26822[rsp], rax

; 5487 :             keywords = asdl_seq_new(len, arena);

  0394a	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  03952	48 8b 8c 24 c8
	04 00 00	 mov	 rcx, QWORD PTR len$26822[rsp]
  0395a	e8 00 00 00 00	 call	 asdl_seq_new
  0395f	48 89 84 24 60
	04 00 00	 mov	 QWORD PTR keywords$26771[rsp], rax

; 5488 :             if (keywords == NULL) goto failed;

  03967	48 83 bc 24 60
	04 00 00 00	 cmp	 QWORD PTR keywords$26771[rsp], 0
  03970	75 05		 jne	 SHORT $LN207@obj2ast_ex
  03972	e9 e7 1d 00 00	 jmp	 $failed$26048
$LN207@obj2ast_ex:

; 5489 :             for (i = 0; i < len; i++) {

  03977	48 c7 84 24 c0
	04 00 00 00 00
	00 00		 mov	 QWORD PTR i$26823[rsp], 0
  03983	eb 13		 jmp	 SHORT $LN206@obj2ast_ex
$LN205@obj2ast_ex:
  03985	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR i$26823[rsp]
  0398d	48 ff c0	 inc	 rax
  03990	48 89 84 24 c0
	04 00 00	 mov	 QWORD PTR i$26823[rsp], rax
$LN206@obj2ast_ex:
  03998	48 8b 84 24 c8
	04 00 00	 mov	 rax, QWORD PTR len$26822[rsp]
  039a0	48 39 84 24 c0
	04 00 00	 cmp	 QWORD PTR i$26823[rsp], rax
  039a8	0f 8d ac 00 00
	00		 jge	 $LN204@obj2ast_ex

; 5490 :                 keyword_ty value;
; 5491 :                 res = obj2ast_keyword(PyList_GET_ITEM(tmp, i), &value, arena);

  039ae	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  039b3	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  039b7	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  039bf	48 8d 94 24 d0
	04 00 00	 lea	 rdx, QWORD PTR value$26835[rsp]
  039c7	48 8b 8c 24 c0
	04 00 00	 mov	 rcx, QWORD PTR i$26823[rsp]
  039cf	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  039d3	e8 00 00 00 00	 call	 obj2ast_keyword
  039d8	89 84 24 b8 04
	00 00		 mov	 DWORD PTR res$26821[rsp], eax

; 5492 :                 if (res != 0) goto failed;

  039df	83 bc 24 b8 04
	00 00 00	 cmp	 DWORD PTR res$26821[rsp], 0
  039e7	74 05		 je	 SHORT $LN203@obj2ast_ex
  039e9	e9 70 1d 00 00	 jmp	 $failed$26048
$LN203@obj2ast_ex:

; 5493 :                 asdl_seq_SET(keywords, i, value);

  039ee	8b 84 24 c0 04
	00 00		 mov	 eax, DWORD PTR i$26823[rsp]
  039f5	89 84 24 d8 04
	00 00		 mov	 DWORD PTR _asdl_i$26838[rsp], eax
  039fc	48 83 bc 24 60
	04 00 00 00	 cmp	 QWORD PTR keywords$26771[rsp], 0
  03a05	74 15		 je	 SHORT $LN599@obj2ast_ex
  03a07	48 63 84 24 d8
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26838[rsp]
  03a0f	48 8b 8c 24 60
	04 00 00	 mov	 rcx, QWORD PTR keywords$26771[rsp]
  03a17	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  03a1a	7c 1c		 jl	 SHORT $LN600@obj2ast_ex
$LN599@obj2ast_ex:
  03a1c	41 b8 75 15 00
	00		 mov	 r8d, 5493		; 00001575H
  03a22	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  03a29	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@OHBDJICK@?$AA?$CI?$AAk?$AAe?$AAy?$AAw?$AAo?$AAr?$AAd?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAe?$AAy?$AAw?$AAo?$AAr?$AAd@
  03a30	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03a36	33 c0		 xor	 eax, eax
$LN600@obj2ast_ex:
  03a38	48 63 84 24 d8
	04 00 00	 movsxd	 rax, DWORD PTR _asdl_i$26838[rsp]
  03a40	48 8b 8c 24 60
	04 00 00	 mov	 rcx, QWORD PTR keywords$26771[rsp]
  03a48	48 8b 94 24 d0
	04 00 00	 mov	 rdx, QWORD PTR value$26835[rsp]
  03a50	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5494 :             }

  03a55	e9 2b ff ff ff	 jmp	 $LN205@obj2ast_ex
$LN204@obj2ast_ex:
$LN202@obj2ast_ex:

; 5495 :             Py_CLEAR(tmp);

  03a5a	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03a60	74 4d		 je	 SHORT $LN199@obj2ast_ex
  03a62	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03a6a	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  03a6f	41 b8 77 15 00
	00		 mov	 r8d, 5495		; 00001577H
  03a75	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03a7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  03a83	e8 00 00 00 00	 call	 _PyParallel_Guard
  03a88	85 c0		 test	 eax, eax
  03a8a	75 23		 jne	 SHORT $LN199@obj2ast_ex
  03a8c	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  03a91	48 89 84 24 e0
	04 00 00	 mov	 QWORD PTR _py_tmp$26844[rsp], rax
  03a99	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  03aa2	48 8b 8c 24 e0
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$26844[rsp]
  03aaa	e8 00 00 00 00	 call	 _Py_DecRef
$LN199@obj2ast_ex:
  03aaf	33 c0		 xor	 eax, eax
  03ab1	85 c0		 test	 eax, eax
  03ab3	75 a5		 jne	 SHORT $LN202@obj2ast_ex

; 5496 :         } else {

  03ab5	eb 1d		 jmp	 SHORT $LN198@obj2ast_ex
$LN210@obj2ast_ex:

; 5497 :             PyErr_SetString(PyExc_TypeError, "required field \"keywords\" missing from Call");

  03ab7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@CAEPCCCE@required?5field?5?$CCkeywords?$CC?5missin@
  03abe	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03ac5	e8 00 00 00 00	 call	 PyErr_SetString

; 5498 :             return 1;

  03aca	b8 01 00 00 00	 mov	 eax, 1
  03acf	e9 a7 1c 00 00	 jmp	 $LN575@obj2ast_ex
$LN198@obj2ast_ex:

; 5499 :         }
; 5500 :         if (_PyObject_HasAttrId(obj, &PyId_starargs)) {

  03ad4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_starargs
  03ad9	8b c0		 mov	 eax, eax
  03adb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03ae1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03aea	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03aee	48 8b d0	 mov	 rdx, rax
  03af1	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03af9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03afe	85 c0		 test	 eax, eax
  03b00	0f 84 c9 00 00
	00		 je	 $LN197@obj2ast_ex

; 5501 :             int res;
; 5502 :             tmp = _PyObject_GetAttrId(obj, &PyId_starargs);

  03b06	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_starargs
  03b0b	8b c0		 mov	 eax, eax
  03b0d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03b13	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03b1c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03b20	48 8b d0	 mov	 rdx, rax
  03b23	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03b2b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  03b30	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5503 :             if (tmp == NULL) goto failed;

  03b35	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03b3b	75 05		 jne	 SHORT $LN196@obj2ast_ex
  03b3d	e9 1c 1c 00 00	 jmp	 $failed$26048
$LN196@obj2ast_ex:

; 5504 :             res = obj2ast_expr(tmp, &starargs, arena);

  03b42	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  03b4a	48 8d 94 24 68
	04 00 00	 lea	 rdx, QWORD PTR starargs$26772[rsp]
  03b52	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  03b57	e8 00 00 00 00	 call	 obj2ast_expr
  03b5c	89 84 24 e8 04
	00 00		 mov	 DWORD PTR res$26851[rsp], eax

; 5505 :             if (res != 0) goto failed;

  03b63	83 bc 24 e8 04
	00 00 00	 cmp	 DWORD PTR res$26851[rsp], 0
  03b6b	74 05		 je	 SHORT $LN195@obj2ast_ex
  03b6d	e9 ec 1b 00 00	 jmp	 $failed$26048
$LN195@obj2ast_ex:
$LN194@obj2ast_ex:

; 5506 :             Py_CLEAR(tmp);

  03b72	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03b78	74 4d		 je	 SHORT $LN191@obj2ast_ex
  03b7a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03b82	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  03b87	41 b8 82 15 00
	00		 mov	 r8d, 5506		; 00001582H
  03b8d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03b94	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  03b9b	e8 00 00 00 00	 call	 _PyParallel_Guard
  03ba0	85 c0		 test	 eax, eax
  03ba2	75 23		 jne	 SHORT $LN191@obj2ast_ex
  03ba4	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  03ba9	48 89 84 24 f0
	04 00 00	 mov	 QWORD PTR _py_tmp$26859[rsp], rax
  03bb1	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  03bba	48 8b 8c 24 f0
	04 00 00	 mov	 rcx, QWORD PTR _py_tmp$26859[rsp]
  03bc2	e8 00 00 00 00	 call	 _Py_DecRef
$LN191@obj2ast_ex:
  03bc7	33 c0		 xor	 eax, eax
  03bc9	85 c0		 test	 eax, eax
  03bcb	75 a5		 jne	 SHORT $LN194@obj2ast_ex

; 5507 :         } else {

  03bcd	eb 0c		 jmp	 SHORT $LN190@obj2ast_ex
$LN197@obj2ast_ex:

; 5508 :             starargs = NULL;

  03bcf	48 c7 84 24 68
	04 00 00 00 00
	00 00		 mov	 QWORD PTR starargs$26772[rsp], 0
$LN190@obj2ast_ex:

; 5509 :         }
; 5510 :         if (_PyObject_HasAttrId(obj, &PyId_kwargs)) {

  03bdb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwargs
  03be0	8b c0		 mov	 eax, eax
  03be2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03be8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03bf1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03bf5	48 8b d0	 mov	 rdx, rax
  03bf8	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03c00	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03c05	85 c0		 test	 eax, eax
  03c07	0f 84 c9 00 00
	00		 je	 $LN189@obj2ast_ex

; 5511 :             int res;
; 5512 :             tmp = _PyObject_GetAttrId(obj, &PyId_kwargs);

  03c0d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwargs
  03c12	8b c0		 mov	 eax, eax
  03c14	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03c1a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03c23	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03c27	48 8b d0	 mov	 rdx, rax
  03c2a	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03c32	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  03c37	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5513 :             if (tmp == NULL) goto failed;

  03c3c	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03c42	75 05		 jne	 SHORT $LN188@obj2ast_ex
  03c44	e9 15 1b 00 00	 jmp	 $failed$26048
$LN188@obj2ast_ex:

; 5514 :             res = obj2ast_expr(tmp, &kwargs, arena);

  03c49	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  03c51	48 8d 94 24 50
	04 00 00	 lea	 rdx, QWORD PTR kwargs$26773[rsp]
  03c59	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  03c5e	e8 00 00 00 00	 call	 obj2ast_expr
  03c63	89 84 24 f8 04
	00 00		 mov	 DWORD PTR res$26866[rsp], eax

; 5515 :             if (res != 0) goto failed;

  03c6a	83 bc 24 f8 04
	00 00 00	 cmp	 DWORD PTR res$26866[rsp], 0
  03c72	74 05		 je	 SHORT $LN187@obj2ast_ex
  03c74	e9 e5 1a 00 00	 jmp	 $failed$26048
$LN187@obj2ast_ex:
$LN186@obj2ast_ex:

; 5516 :             Py_CLEAR(tmp);

  03c79	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03c7f	74 4d		 je	 SHORT $LN183@obj2ast_ex
  03c81	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03c89	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  03c8e	41 b8 8c 15 00
	00		 mov	 r8d, 5516		; 0000158cH
  03c94	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03c9b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  03ca2	e8 00 00 00 00	 call	 _PyParallel_Guard
  03ca7	85 c0		 test	 eax, eax
  03ca9	75 23		 jne	 SHORT $LN183@obj2ast_ex
  03cab	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  03cb0	48 89 84 24 00
	05 00 00	 mov	 QWORD PTR _py_tmp$26874[rsp], rax
  03cb8	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  03cc1	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$26874[rsp]
  03cc9	e8 00 00 00 00	 call	 _Py_DecRef
$LN183@obj2ast_ex:
  03cce	33 c0		 xor	 eax, eax
  03cd0	85 c0		 test	 eax, eax
  03cd2	75 a5		 jne	 SHORT $LN186@obj2ast_ex

; 5517 :         } else {

  03cd4	eb 0c		 jmp	 SHORT $LN182@obj2ast_ex
$LN189@obj2ast_ex:

; 5518 :             kwargs = NULL;

  03cd6	48 c7 84 24 50
	04 00 00 00 00
	00 00		 mov	 QWORD PTR kwargs$26773[rsp], 0
$LN182@obj2ast_ex:

; 5519 :         }
; 5520 :         *out = Call(func, args, keywords, starargs, kwargs, lineno, col_offset,
; 5521 :                     arena);

  03ce2	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  03cea	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  03cef	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  03cf3	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  03cf7	8b 44 24 40	 mov	 eax, DWORD PTR lineno$[rsp]
  03cfb	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  03cff	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR kwargs$26773[rsp]
  03d07	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03d0c	4c 8b 8c 24 68
	04 00 00	 mov	 r9, QWORD PTR starargs$26772[rsp]
  03d14	4c 8b 84 24 60
	04 00 00	 mov	 r8, QWORD PTR keywords$26771[rsp]
  03d1c	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR args$26770[rsp]
  03d24	48 8b 8c 24 70
	04 00 00	 mov	 rcx, QWORD PTR func$26769[rsp]
  03d2c	e8 00 00 00 00	 call	 _Py_Call
  03d31	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  03d39	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5522 :         if (*out == NULL) goto failed;

  03d3c	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  03d44	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  03d48	75 05		 jne	 SHORT $LN181@obj2ast_ex
  03d4a	e9 0f 1a 00 00	 jmp	 $failed$26048
$LN181@obj2ast_ex:

; 5523 :         return 0;

  03d4f	33 c0		 xor	 eax, eax
  03d51	e9 25 1a 00 00	 jmp	 $LN575@obj2ast_ex
$LN232@obj2ast_ex:

; 5524 :     }
; 5525 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Num_type);

  03d56	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Num_type
  03d5d	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03d65	e8 00 00 00 00	 call	 PyObject_IsInstance
  03d6a	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5526 :     if (isinstance == -1) {

  03d6e	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  03d73	75 0a		 jne	 SHORT $LN180@obj2ast_ex

; 5527 :         return 1;

  03d75	b8 01 00 00 00	 mov	 eax, 1
  03d7a	e9 fc 19 00 00	 jmp	 $LN575@obj2ast_ex
$LN180@obj2ast_ex:

; 5528 :     }
; 5529 :     if (isinstance) {

  03d7f	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  03d84	0f 84 5b 01 00
	00		 je	 $LN179@obj2ast_ex

; 5530 :         object n;
; 5531 : 
; 5532 :         if (_PyObject_HasAttrId(obj, &PyId_n)) {

  03d8a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_n
  03d8f	8b c0		 mov	 eax, eax
  03d91	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03d97	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03da0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03da4	48 8b d0	 mov	 rdx, rax
  03da7	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03daf	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03db4	85 c0		 test	 eax, eax
  03db6	0f 84 c9 00 00
	00		 je	 $LN178@obj2ast_ex

; 5533 :             int res;
; 5534 :             tmp = _PyObject_GetAttrId(obj, &PyId_n);

  03dbc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_n
  03dc1	8b c0		 mov	 eax, eax
  03dc3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03dc9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03dd2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03dd6	48 8b d0	 mov	 rdx, rax
  03dd9	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03de1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  03de6	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5535 :             if (tmp == NULL) goto failed;

  03deb	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03df1	75 05		 jne	 SHORT $LN177@obj2ast_ex
  03df3	e9 66 19 00 00	 jmp	 $failed$26048
$LN177@obj2ast_ex:

; 5536 :             res = obj2ast_object(tmp, &n, arena);

  03df8	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  03e00	48 8d 94 24 08
	05 00 00	 lea	 rdx, QWORD PTR n$26885[rsp]
  03e08	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  03e0d	e8 00 00 00 00	 call	 obj2ast_object
  03e12	89 84 24 10 05
	00 00		 mov	 DWORD PTR res$26887[rsp], eax

; 5537 :             if (res != 0) goto failed;

  03e19	83 bc 24 10 05
	00 00 00	 cmp	 DWORD PTR res$26887[rsp], 0
  03e21	74 05		 je	 SHORT $LN176@obj2ast_ex
  03e23	e9 36 19 00 00	 jmp	 $failed$26048
$LN176@obj2ast_ex:
$LN175@obj2ast_ex:

; 5538 :             Py_CLEAR(tmp);

  03e28	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03e2e	74 4d		 je	 SHORT $LN172@obj2ast_ex
  03e30	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03e38	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  03e3d	41 b8 a2 15 00
	00		 mov	 r8d, 5538		; 000015a2H
  03e43	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03e4a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  03e51	e8 00 00 00 00	 call	 _PyParallel_Guard
  03e56	85 c0		 test	 eax, eax
  03e58	75 23		 jne	 SHORT $LN172@obj2ast_ex
  03e5a	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  03e5f	48 89 84 24 18
	05 00 00	 mov	 QWORD PTR _py_tmp$26895[rsp], rax
  03e67	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  03e70	48 8b 8c 24 18
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$26895[rsp]
  03e78	e8 00 00 00 00	 call	 _Py_DecRef
$LN172@obj2ast_ex:
  03e7d	33 c0		 xor	 eax, eax
  03e7f	85 c0		 test	 eax, eax
  03e81	75 a5		 jne	 SHORT $LN175@obj2ast_ex

; 5539 :         } else {

  03e83	eb 1d		 jmp	 SHORT $LN171@obj2ast_ex
$LN178@obj2ast_ex:

; 5540 :             PyErr_SetString(PyExc_TypeError, "required field \"n\" missing from Num");

  03e85	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@HDIMJEDD@required?5field?5?$CCn?$CC?5missing?5from?5@
  03e8c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  03e93	e8 00 00 00 00	 call	 PyErr_SetString

; 5541 :             return 1;

  03e98	b8 01 00 00 00	 mov	 eax, 1
  03e9d	e9 d9 18 00 00	 jmp	 $LN575@obj2ast_ex
$LN171@obj2ast_ex:

; 5542 :         }
; 5543 :         *out = Num(n, lineno, col_offset, arena);

  03ea2	4c 8b 8c 24 e0
	06 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  03eaa	44 8b 44 24 50	 mov	 r8d, DWORD PTR col_offset$[rsp]
  03eaf	8b 54 24 40	 mov	 edx, DWORD PTR lineno$[rsp]
  03eb3	48 8b 8c 24 08
	05 00 00	 mov	 rcx, QWORD PTR n$26885[rsp]
  03ebb	e8 00 00 00 00	 call	 _Py_Num
  03ec0	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  03ec8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5544 :         if (*out == NULL) goto failed;

  03ecb	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  03ed3	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  03ed7	75 05		 jne	 SHORT $LN170@obj2ast_ex
  03ed9	e9 80 18 00 00	 jmp	 $failed$26048
$LN170@obj2ast_ex:

; 5545 :         return 0;

  03ede	33 c0		 xor	 eax, eax
  03ee0	e9 96 18 00 00	 jmp	 $LN575@obj2ast_ex
$LN179@obj2ast_ex:

; 5546 :     }
; 5547 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Str_type);

  03ee5	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Str_type
  03eec	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03ef4	e8 00 00 00 00	 call	 PyObject_IsInstance
  03ef9	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5548 :     if (isinstance == -1) {

  03efd	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  03f02	75 0a		 jne	 SHORT $LN169@obj2ast_ex

; 5549 :         return 1;

  03f04	b8 01 00 00 00	 mov	 eax, 1
  03f09	e9 6d 18 00 00	 jmp	 $LN575@obj2ast_ex
$LN169@obj2ast_ex:

; 5550 :     }
; 5551 :     if (isinstance) {

  03f0e	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  03f13	0f 84 5b 01 00
	00		 je	 $LN168@obj2ast_ex

; 5552 :         string s;
; 5553 : 
; 5554 :         if (_PyObject_HasAttrId(obj, &PyId_s)) {

  03f19	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_s
  03f1e	8b c0		 mov	 eax, eax
  03f20	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03f26	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03f2f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03f33	48 8b d0	 mov	 rdx, rax
  03f36	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03f3e	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  03f43	85 c0		 test	 eax, eax
  03f45	0f 84 c9 00 00
	00		 je	 $LN167@obj2ast_ex

; 5555 :             int res;
; 5556 :             tmp = _PyObject_GetAttrId(obj, &PyId_s);

  03f4b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_s
  03f50	8b c0		 mov	 eax, eax
  03f52	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03f58	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03f61	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  03f65	48 8b d0	 mov	 rdx, rax
  03f68	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  03f70	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  03f75	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5557 :             if (tmp == NULL) goto failed;

  03f7a	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03f80	75 05		 jne	 SHORT $LN166@obj2ast_ex
  03f82	e9 d7 17 00 00	 jmp	 $failed$26048
$LN166@obj2ast_ex:

; 5558 :             res = obj2ast_string(tmp, &s, arena);

  03f87	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  03f8f	48 8d 94 24 20
	05 00 00	 lea	 rdx, QWORD PTR s$26906[rsp]
  03f97	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  03f9c	e8 00 00 00 00	 call	 obj2ast_string
  03fa1	89 84 24 28 05
	00 00		 mov	 DWORD PTR res$26908[rsp], eax

; 5559 :             if (res != 0) goto failed;

  03fa8	83 bc 24 28 05
	00 00 00	 cmp	 DWORD PTR res$26908[rsp], 0
  03fb0	74 05		 je	 SHORT $LN165@obj2ast_ex
  03fb2	e9 a7 17 00 00	 jmp	 $failed$26048
$LN165@obj2ast_ex:
$LN164@obj2ast_ex:

; 5560 :             Py_CLEAR(tmp);

  03fb7	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  03fbd	74 4d		 je	 SHORT $LN161@obj2ast_ex
  03fbf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  03fc7	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  03fcc	41 b8 b8 15 00
	00		 mov	 r8d, 5560		; 000015b8H
  03fd2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  03fd9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  03fe0	e8 00 00 00 00	 call	 _PyParallel_Guard
  03fe5	85 c0		 test	 eax, eax
  03fe7	75 23		 jne	 SHORT $LN161@obj2ast_ex
  03fe9	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  03fee	48 89 84 24 30
	05 00 00	 mov	 QWORD PTR _py_tmp$26916[rsp], rax
  03ff6	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  03fff	48 8b 8c 24 30
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$26916[rsp]
  04007	e8 00 00 00 00	 call	 _Py_DecRef
$LN161@obj2ast_ex:
  0400c	33 c0		 xor	 eax, eax
  0400e	85 c0		 test	 eax, eax
  04010	75 a5		 jne	 SHORT $LN164@obj2ast_ex

; 5561 :         } else {

  04012	eb 1d		 jmp	 SHORT $LN160@obj2ast_ex
$LN167@obj2ast_ex:

; 5562 :             PyErr_SetString(PyExc_TypeError, "required field \"s\" missing from Str");

  04014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@ELPANCFA@required?5field?5?$CCs?$CC?5missing?5from?5@
  0401b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  04022	e8 00 00 00 00	 call	 PyErr_SetString

; 5563 :             return 1;

  04027	b8 01 00 00 00	 mov	 eax, 1
  0402c	e9 4a 17 00 00	 jmp	 $LN575@obj2ast_ex
$LN160@obj2ast_ex:

; 5564 :         }
; 5565 :         *out = Str(s, lineno, col_offset, arena);

  04031	4c 8b 8c 24 e0
	06 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  04039	44 8b 44 24 50	 mov	 r8d, DWORD PTR col_offset$[rsp]
  0403e	8b 54 24 40	 mov	 edx, DWORD PTR lineno$[rsp]
  04042	48 8b 8c 24 20
	05 00 00	 mov	 rcx, QWORD PTR s$26906[rsp]
  0404a	e8 00 00 00 00	 call	 _Py_Str
  0404f	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  04057	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5566 :         if (*out == NULL) goto failed;

  0405a	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  04062	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  04066	75 05		 jne	 SHORT $LN159@obj2ast_ex
  04068	e9 f1 16 00 00	 jmp	 $failed$26048
$LN159@obj2ast_ex:

; 5567 :         return 0;

  0406d	33 c0		 xor	 eax, eax
  0406f	e9 07 17 00 00	 jmp	 $LN575@obj2ast_ex
$LN168@obj2ast_ex:

; 5568 :     }
; 5569 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Bytes_type);

  04074	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Bytes_type
  0407b	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04083	e8 00 00 00 00	 call	 PyObject_IsInstance
  04088	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5570 :     if (isinstance == -1) {

  0408c	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  04091	75 0a		 jne	 SHORT $LN158@obj2ast_ex

; 5571 :         return 1;

  04093	b8 01 00 00 00	 mov	 eax, 1
  04098	e9 de 16 00 00	 jmp	 $LN575@obj2ast_ex
$LN158@obj2ast_ex:

; 5572 :     }
; 5573 :     if (isinstance) {

  0409d	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  040a2	0f 84 5b 01 00
	00		 je	 $LN157@obj2ast_ex

; 5574 :         bytes s;
; 5575 : 
; 5576 :         if (_PyObject_HasAttrId(obj, &PyId_s)) {

  040a8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_s
  040ad	8b c0		 mov	 eax, eax
  040af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  040b5	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  040be	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  040c2	48 8b d0	 mov	 rdx, rax
  040c5	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  040cd	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  040d2	85 c0		 test	 eax, eax
  040d4	0f 84 c9 00 00
	00		 je	 $LN156@obj2ast_ex

; 5577 :             int res;
; 5578 :             tmp = _PyObject_GetAttrId(obj, &PyId_s);

  040da	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_s
  040df	8b c0		 mov	 eax, eax
  040e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  040e7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  040f0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  040f4	48 8b d0	 mov	 rdx, rax
  040f7	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  040ff	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04104	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5579 :             if (tmp == NULL) goto failed;

  04109	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0410f	75 05		 jne	 SHORT $LN155@obj2ast_ex
  04111	e9 48 16 00 00	 jmp	 $failed$26048
$LN155@obj2ast_ex:

; 5580 :             res = obj2ast_bytes(tmp, &s, arena);

  04116	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0411e	48 8d 94 24 38
	05 00 00	 lea	 rdx, QWORD PTR s$26927[rsp]
  04126	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  0412b	e8 00 00 00 00	 call	 obj2ast_bytes
  04130	89 84 24 40 05
	00 00		 mov	 DWORD PTR res$26929[rsp], eax

; 5581 :             if (res != 0) goto failed;

  04137	83 bc 24 40 05
	00 00 00	 cmp	 DWORD PTR res$26929[rsp], 0
  0413f	74 05		 je	 SHORT $LN154@obj2ast_ex
  04141	e9 18 16 00 00	 jmp	 $failed$26048
$LN154@obj2ast_ex:
$LN153@obj2ast_ex:

; 5582 :             Py_CLEAR(tmp);

  04146	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0414c	74 4d		 je	 SHORT $LN150@obj2ast_ex
  0414e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04156	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0415b	41 b8 ce 15 00
	00		 mov	 r8d, 5582		; 000015ceH
  04161	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  0416f	e8 00 00 00 00	 call	 _PyParallel_Guard
  04174	85 c0		 test	 eax, eax
  04176	75 23		 jne	 SHORT $LN150@obj2ast_ex
  04178	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0417d	48 89 84 24 48
	05 00 00	 mov	 QWORD PTR _py_tmp$26937[rsp], rax
  04185	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0418e	48 8b 8c 24 48
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$26937[rsp]
  04196	e8 00 00 00 00	 call	 _Py_DecRef
$LN150@obj2ast_ex:
  0419b	33 c0		 xor	 eax, eax
  0419d	85 c0		 test	 eax, eax
  0419f	75 a5		 jne	 SHORT $LN153@obj2ast_ex

; 5583 :         } else {

  041a1	eb 1d		 jmp	 SHORT $LN149@obj2ast_ex
$LN156@obj2ast_ex:

; 5584 :             PyErr_SetString(PyExc_TypeError, "required field \"s\" missing from Bytes");

  041a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@INBJMMPB@required?5field?5?$CCs?$CC?5missing?5from?5@
  041aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  041b1	e8 00 00 00 00	 call	 PyErr_SetString

; 5585 :             return 1;

  041b6	b8 01 00 00 00	 mov	 eax, 1
  041bb	e9 bb 15 00 00	 jmp	 $LN575@obj2ast_ex
$LN149@obj2ast_ex:

; 5586 :         }
; 5587 :         *out = Bytes(s, lineno, col_offset, arena);

  041c0	4c 8b 8c 24 e0
	06 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  041c8	44 8b 44 24 50	 mov	 r8d, DWORD PTR col_offset$[rsp]
  041cd	8b 54 24 40	 mov	 edx, DWORD PTR lineno$[rsp]
  041d1	48 8b 8c 24 38
	05 00 00	 mov	 rcx, QWORD PTR s$26927[rsp]
  041d9	e8 00 00 00 00	 call	 _Py_Bytes
  041de	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  041e6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5588 :         if (*out == NULL) goto failed;

  041e9	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  041f1	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  041f5	75 05		 jne	 SHORT $LN148@obj2ast_ex
  041f7	e9 62 15 00 00	 jmp	 $failed$26048
$LN148@obj2ast_ex:

; 5589 :         return 0;

  041fc	33 c0		 xor	 eax, eax
  041fe	e9 78 15 00 00	 jmp	 $LN575@obj2ast_ex
$LN157@obj2ast_ex:

; 5590 :     }
; 5591 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Ellipsis_type);

  04203	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Ellipsis_type
  0420a	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04212	e8 00 00 00 00	 call	 PyObject_IsInstance
  04217	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5592 :     if (isinstance == -1) {

  0421b	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  04220	75 0a		 jne	 SHORT $LN147@obj2ast_ex

; 5593 :         return 1;

  04222	b8 01 00 00 00	 mov	 eax, 1
  04227	e9 4f 15 00 00	 jmp	 $LN575@obj2ast_ex
$LN147@obj2ast_ex:

; 5594 :     }
; 5595 :     if (isinstance) {

  0422c	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  04231	74 3a		 je	 SHORT $LN146@obj2ast_ex

; 5596 : 
; 5597 :         *out = Ellipsis(lineno, col_offset, arena);

  04233	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0423b	8b 54 24 50	 mov	 edx, DWORD PTR col_offset$[rsp]
  0423f	8b 4c 24 40	 mov	 ecx, DWORD PTR lineno$[rsp]
  04243	e8 00 00 00 00	 call	 _Py_Ellipsis
  04248	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  04250	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5598 :         if (*out == NULL) goto failed;

  04253	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  0425b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0425f	75 05		 jne	 SHORT $LN145@obj2ast_ex
  04261	e9 f8 14 00 00	 jmp	 $failed$26048
$LN145@obj2ast_ex:

; 5599 :         return 0;

  04266	33 c0		 xor	 eax, eax
  04268	e9 0e 15 00 00	 jmp	 $LN575@obj2ast_ex
$LN146@obj2ast_ex:

; 5600 :     }
; 5601 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Attribute_type);

  0426d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Attribute_type
  04274	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0427c	e8 00 00 00 00	 call	 PyObject_IsInstance
  04281	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5602 :     if (isinstance == -1) {

  04285	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0428a	75 0a		 jne	 SHORT $LN144@obj2ast_ex

; 5603 :         return 1;

  0428c	b8 01 00 00 00	 mov	 eax, 1
  04291	e9 e5 14 00 00	 jmp	 $LN575@obj2ast_ex
$LN144@obj2ast_ex:

; 5604 :     }
; 5605 :     if (isinstance) {

  04296	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0429b	0f 84 a4 03 00
	00		 je	 $LN143@obj2ast_ex

; 5606 :         expr_ty value;
; 5607 :         identifier attr;
; 5608 :         expr_context_ty ctx;
; 5609 : 
; 5610 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  042a1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  042a6	8b c0		 mov	 eax, eax
  042a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  042ae	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  042b7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  042bb	48 8b d0	 mov	 rdx, rax
  042be	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  042c6	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  042cb	85 c0		 test	 eax, eax
  042cd	0f 84 c9 00 00
	00		 je	 $LN142@obj2ast_ex

; 5611 :             int res;
; 5612 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  042d3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  042d8	8b c0		 mov	 eax, eax
  042da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  042e0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  042e9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  042ed	48 8b d0	 mov	 rdx, rax
  042f0	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  042f8	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  042fd	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5613 :             if (tmp == NULL) goto failed;

  04302	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04308	75 05		 jne	 SHORT $LN141@obj2ast_ex
  0430a	e9 4f 14 00 00	 jmp	 $failed$26048
$LN141@obj2ast_ex:

; 5614 :             res = obj2ast_expr(tmp, &value, arena);

  0430f	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04317	48 8d 94 24 50
	05 00 00	 lea	 rdx, QWORD PTR value$26953[rsp]
  0431f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  04324	e8 00 00 00 00	 call	 obj2ast_expr
  04329	89 84 24 64 05
	00 00		 mov	 DWORD PTR res$26957[rsp], eax

; 5615 :             if (res != 0) goto failed;

  04330	83 bc 24 64 05
	00 00 00	 cmp	 DWORD PTR res$26957[rsp], 0
  04338	74 05		 je	 SHORT $LN140@obj2ast_ex
  0433a	e9 1f 14 00 00	 jmp	 $failed$26048
$LN140@obj2ast_ex:
$LN139@obj2ast_ex:

; 5616 :             Py_CLEAR(tmp);

  0433f	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04345	74 4d		 je	 SHORT $LN136@obj2ast_ex
  04347	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0434f	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  04354	41 b8 f0 15 00
	00		 mov	 r8d, 5616		; 000015f0H
  0435a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04361	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  04368	e8 00 00 00 00	 call	 _PyParallel_Guard
  0436d	85 c0		 test	 eax, eax
  0436f	75 23		 jne	 SHORT $LN136@obj2ast_ex
  04371	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  04376	48 89 84 24 68
	05 00 00	 mov	 QWORD PTR _py_tmp$26965[rsp], rax
  0437e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  04387	48 8b 8c 24 68
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$26965[rsp]
  0438f	e8 00 00 00 00	 call	 _Py_DecRef
$LN136@obj2ast_ex:
  04394	33 c0		 xor	 eax, eax
  04396	85 c0		 test	 eax, eax
  04398	75 a5		 jne	 SHORT $LN139@obj2ast_ex

; 5617 :         } else {

  0439a	eb 1d		 jmp	 SHORT $LN135@obj2ast_ex
$LN142@obj2ast_ex:

; 5618 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Attribute");

  0439c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@FHJGPNDL@required?5field?5?$CCvalue?$CC?5missing?5f@
  043a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  043aa	e8 00 00 00 00	 call	 PyErr_SetString

; 5619 :             return 1;

  043af	b8 01 00 00 00	 mov	 eax, 1
  043b4	e9 c2 13 00 00	 jmp	 $LN575@obj2ast_ex
$LN135@obj2ast_ex:

; 5620 :         }
; 5621 :         if (_PyObject_HasAttrId(obj, &PyId_attr)) {

  043b9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_attr
  043be	8b c0		 mov	 eax, eax
  043c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  043c6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  043cf	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  043d3	48 8b d0	 mov	 rdx, rax
  043d6	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  043de	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  043e3	85 c0		 test	 eax, eax
  043e5	0f 84 c9 00 00
	00		 je	 $LN134@obj2ast_ex

; 5622 :             int res;
; 5623 :             tmp = _PyObject_GetAttrId(obj, &PyId_attr);

  043eb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_attr
  043f0	8b c0		 mov	 eax, eax
  043f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  043f8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04401	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04405	48 8b d0	 mov	 rdx, rax
  04408	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04410	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04415	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5624 :             if (tmp == NULL) goto failed;

  0441a	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04420	75 05		 jne	 SHORT $LN133@obj2ast_ex
  04422	e9 37 13 00 00	 jmp	 $failed$26048
$LN133@obj2ast_ex:

; 5625 :             res = obj2ast_identifier(tmp, &attr, arena);

  04427	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0442f	48 8d 94 24 58
	05 00 00	 lea	 rdx, QWORD PTR attr$26954[rsp]
  04437	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  0443c	e8 00 00 00 00	 call	 obj2ast_identifier
  04441	89 84 24 70 05
	00 00		 mov	 DWORD PTR res$26972[rsp], eax

; 5626 :             if (res != 0) goto failed;

  04448	83 bc 24 70 05
	00 00 00	 cmp	 DWORD PTR res$26972[rsp], 0
  04450	74 05		 je	 SHORT $LN132@obj2ast_ex
  04452	e9 07 13 00 00	 jmp	 $failed$26048
$LN132@obj2ast_ex:
$LN131@obj2ast_ex:

; 5627 :             Py_CLEAR(tmp);

  04457	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0445d	74 4d		 je	 SHORT $LN128@obj2ast_ex
  0445f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04467	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0446c	41 b8 fb 15 00
	00		 mov	 r8d, 5627		; 000015fbH
  04472	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04479	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  04480	e8 00 00 00 00	 call	 _PyParallel_Guard
  04485	85 c0		 test	 eax, eax
  04487	75 23		 jne	 SHORT $LN128@obj2ast_ex
  04489	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0448e	48 89 84 24 78
	05 00 00	 mov	 QWORD PTR _py_tmp$26980[rsp], rax
  04496	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0449f	48 8b 8c 24 78
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$26980[rsp]
  044a7	e8 00 00 00 00	 call	 _Py_DecRef
$LN128@obj2ast_ex:
  044ac	33 c0		 xor	 eax, eax
  044ae	85 c0		 test	 eax, eax
  044b0	75 a5		 jne	 SHORT $LN131@obj2ast_ex

; 5628 :         } else {

  044b2	eb 1d		 jmp	 SHORT $LN127@obj2ast_ex
$LN134@obj2ast_ex:

; 5629 :             PyErr_SetString(PyExc_TypeError, "required field \"attr\" missing from Attribute");

  044b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@BLIDGIHB@required?5field?5?$CCattr?$CC?5missing?5fr@
  044bb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  044c2	e8 00 00 00 00	 call	 PyErr_SetString

; 5630 :             return 1;

  044c7	b8 01 00 00 00	 mov	 eax, 1
  044cc	e9 aa 12 00 00	 jmp	 $LN575@obj2ast_ex
$LN127@obj2ast_ex:

; 5631 :         }
; 5632 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  044d1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  044d6	8b c0		 mov	 eax, eax
  044d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  044de	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  044e7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  044eb	48 8b d0	 mov	 rdx, rax
  044ee	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  044f6	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  044fb	85 c0		 test	 eax, eax
  044fd	0f 84 c9 00 00
	00		 je	 $LN126@obj2ast_ex

; 5633 :             int res;
; 5634 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  04503	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  04508	8b c0		 mov	 eax, eax
  0450a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04510	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04519	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0451d	48 8b d0	 mov	 rdx, rax
  04520	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04528	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0452d	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5635 :             if (tmp == NULL) goto failed;

  04532	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04538	75 05		 jne	 SHORT $LN125@obj2ast_ex
  0453a	e9 1f 12 00 00	 jmp	 $failed$26048
$LN125@obj2ast_ex:

; 5636 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  0453f	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04547	48 8d 94 24 60
	05 00 00	 lea	 rdx, QWORD PTR ctx$26955[rsp]
  0454f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  04554	e8 00 00 00 00	 call	 obj2ast_expr_context
  04559	89 84 24 80 05
	00 00		 mov	 DWORD PTR res$26987[rsp], eax

; 5637 :             if (res != 0) goto failed;

  04560	83 bc 24 80 05
	00 00 00	 cmp	 DWORD PTR res$26987[rsp], 0
  04568	74 05		 je	 SHORT $LN124@obj2ast_ex
  0456a	e9 ef 11 00 00	 jmp	 $failed$26048
$LN124@obj2ast_ex:
$LN123@obj2ast_ex:

; 5638 :             Py_CLEAR(tmp);

  0456f	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04575	74 4d		 je	 SHORT $LN120@obj2ast_ex
  04577	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0457f	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  04584	41 b8 06 16 00
	00		 mov	 r8d, 5638		; 00001606H
  0458a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04591	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  04598	e8 00 00 00 00	 call	 _PyParallel_Guard
  0459d	85 c0		 test	 eax, eax
  0459f	75 23		 jne	 SHORT $LN120@obj2ast_ex
  045a1	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  045a6	48 89 84 24 88
	05 00 00	 mov	 QWORD PTR _py_tmp$26995[rsp], rax
  045ae	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  045b7	48 8b 8c 24 88
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$26995[rsp]
  045bf	e8 00 00 00 00	 call	 _Py_DecRef
$LN120@obj2ast_ex:
  045c4	33 c0		 xor	 eax, eax
  045c6	85 c0		 test	 eax, eax
  045c8	75 a5		 jne	 SHORT $LN123@obj2ast_ex

; 5639 :         } else {

  045ca	eb 1d		 jmp	 SHORT $LN119@obj2ast_ex
$LN126@obj2ast_ex:

; 5640 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from Attribute");

  045cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@KBDBLMDG@required?5field?5?$CCctx?$CC?5missing?5fro@
  045d3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  045da	e8 00 00 00 00	 call	 PyErr_SetString

; 5641 :             return 1;

  045df	b8 01 00 00 00	 mov	 eax, 1
  045e4	e9 92 11 00 00	 jmp	 $LN575@obj2ast_ex
$LN119@obj2ast_ex:

; 5642 :         }
; 5643 :         *out = Attribute(value, attr, ctx, lineno, col_offset, arena);

  045e9	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  045f1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  045f6	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  045fa	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  045fe	44 8b 4c 24 40	 mov	 r9d, DWORD PTR lineno$[rsp]
  04603	44 8b 84 24 60
	05 00 00	 mov	 r8d, DWORD PTR ctx$26955[rsp]
  0460b	48 8b 94 24 58
	05 00 00	 mov	 rdx, QWORD PTR attr$26954[rsp]
  04613	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR value$26953[rsp]
  0461b	e8 00 00 00 00	 call	 _Py_Attribute
  04620	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  04628	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5644 :         if (*out == NULL) goto failed;

  0462b	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  04633	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  04637	75 05		 jne	 SHORT $LN118@obj2ast_ex
  04639	e9 20 11 00 00	 jmp	 $failed$26048
$LN118@obj2ast_ex:

; 5645 :         return 0;

  0463e	33 c0		 xor	 eax, eax
  04640	e9 36 11 00 00	 jmp	 $LN575@obj2ast_ex
$LN143@obj2ast_ex:

; 5646 :     }
; 5647 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Subscript_type);

  04645	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Subscript_type
  0464c	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04654	e8 00 00 00 00	 call	 PyObject_IsInstance
  04659	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5648 :     if (isinstance == -1) {

  0465d	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  04662	75 0a		 jne	 SHORT $LN117@obj2ast_ex

; 5649 :         return 1;

  04664	b8 01 00 00 00	 mov	 eax, 1
  04669	e9 0d 11 00 00	 jmp	 $LN575@obj2ast_ex
$LN117@obj2ast_ex:

; 5650 :     }
; 5651 :     if (isinstance) {

  0466e	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  04673	0f 84 a4 03 00
	00		 je	 $LN116@obj2ast_ex

; 5652 :         expr_ty value;
; 5653 :         slice_ty slice;
; 5654 :         expr_context_ty ctx;
; 5655 : 
; 5656 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  04679	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  0467e	8b c0		 mov	 eax, eax
  04680	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04686	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0468f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04693	48 8b d0	 mov	 rdx, rax
  04696	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0469e	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  046a3	85 c0		 test	 eax, eax
  046a5	0f 84 c9 00 00
	00		 je	 $LN115@obj2ast_ex

; 5657 :             int res;
; 5658 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  046ab	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  046b0	8b c0		 mov	 eax, eax
  046b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  046b8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  046c1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  046c5	48 8b d0	 mov	 rdx, rax
  046c8	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  046d0	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  046d5	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5659 :             if (tmp == NULL) goto failed;

  046da	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  046e0	75 05		 jne	 SHORT $LN114@obj2ast_ex
  046e2	e9 77 10 00 00	 jmp	 $failed$26048
$LN114@obj2ast_ex:

; 5660 :             res = obj2ast_expr(tmp, &value, arena);

  046e7	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  046ef	48 8d 94 24 98
	05 00 00	 lea	 rdx, QWORD PTR value$27006[rsp]
  046f7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  046fc	e8 00 00 00 00	 call	 obj2ast_expr
  04701	89 84 24 a4 05
	00 00		 mov	 DWORD PTR res$27010[rsp], eax

; 5661 :             if (res != 0) goto failed;

  04708	83 bc 24 a4 05
	00 00 00	 cmp	 DWORD PTR res$27010[rsp], 0
  04710	74 05		 je	 SHORT $LN113@obj2ast_ex
  04712	e9 47 10 00 00	 jmp	 $failed$26048
$LN113@obj2ast_ex:
$LN112@obj2ast_ex:

; 5662 :             Py_CLEAR(tmp);

  04717	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0471d	74 4d		 je	 SHORT $LN109@obj2ast_ex
  0471f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04727	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0472c	41 b8 1e 16 00
	00		 mov	 r8d, 5662		; 0000161eH
  04732	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04739	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  04740	e8 00 00 00 00	 call	 _PyParallel_Guard
  04745	85 c0		 test	 eax, eax
  04747	75 23		 jne	 SHORT $LN109@obj2ast_ex
  04749	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0474e	48 89 84 24 a8
	05 00 00	 mov	 QWORD PTR _py_tmp$27018[rsp], rax
  04756	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0475f	48 8b 8c 24 a8
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$27018[rsp]
  04767	e8 00 00 00 00	 call	 _Py_DecRef
$LN109@obj2ast_ex:
  0476c	33 c0		 xor	 eax, eax
  0476e	85 c0		 test	 eax, eax
  04770	75 a5		 jne	 SHORT $LN112@obj2ast_ex

; 5663 :         } else {

  04772	eb 1d		 jmp	 SHORT $LN108@obj2ast_ex
$LN115@obj2ast_ex:

; 5664 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Subscript");

  04774	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@PAHBFMLK@required?5field?5?$CCvalue?$CC?5missing?5f@
  0477b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  04782	e8 00 00 00 00	 call	 PyErr_SetString

; 5665 :             return 1;

  04787	b8 01 00 00 00	 mov	 eax, 1
  0478c	e9 ea 0f 00 00	 jmp	 $LN575@obj2ast_ex
$LN108@obj2ast_ex:

; 5666 :         }
; 5667 :         if (_PyObject_HasAttrId(obj, &PyId_slice)) {

  04791	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_slice
  04796	8b c0		 mov	 eax, eax
  04798	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0479e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  047a7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  047ab	48 8b d0	 mov	 rdx, rax
  047ae	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  047b6	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  047bb	85 c0		 test	 eax, eax
  047bd	0f 84 c9 00 00
	00		 je	 $LN107@obj2ast_ex

; 5668 :             int res;
; 5669 :             tmp = _PyObject_GetAttrId(obj, &PyId_slice);

  047c3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_slice
  047c8	8b c0		 mov	 eax, eax
  047ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  047d0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  047d9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  047dd	48 8b d0	 mov	 rdx, rax
  047e0	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  047e8	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  047ed	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5670 :             if (tmp == NULL) goto failed;

  047f2	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  047f8	75 05		 jne	 SHORT $LN106@obj2ast_ex
  047fa	e9 5f 0f 00 00	 jmp	 $failed$26048
$LN106@obj2ast_ex:

; 5671 :             res = obj2ast_slice(tmp, &slice, arena);

  047ff	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04807	48 8d 94 24 90
	05 00 00	 lea	 rdx, QWORD PTR slice$27007[rsp]
  0480f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  04814	e8 00 00 00 00	 call	 obj2ast_slice
  04819	89 84 24 b0 05
	00 00		 mov	 DWORD PTR res$27025[rsp], eax

; 5672 :             if (res != 0) goto failed;

  04820	83 bc 24 b0 05
	00 00 00	 cmp	 DWORD PTR res$27025[rsp], 0
  04828	74 05		 je	 SHORT $LN105@obj2ast_ex
  0482a	e9 2f 0f 00 00	 jmp	 $failed$26048
$LN105@obj2ast_ex:
$LN104@obj2ast_ex:

; 5673 :             Py_CLEAR(tmp);

  0482f	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04835	74 4d		 je	 SHORT $LN101@obj2ast_ex
  04837	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0483f	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  04844	41 b8 29 16 00
	00		 mov	 r8d, 5673		; 00001629H
  0484a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04851	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  04858	e8 00 00 00 00	 call	 _PyParallel_Guard
  0485d	85 c0		 test	 eax, eax
  0485f	75 23		 jne	 SHORT $LN101@obj2ast_ex
  04861	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  04866	48 89 84 24 b8
	05 00 00	 mov	 QWORD PTR _py_tmp$27033[rsp], rax
  0486e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  04877	48 8b 8c 24 b8
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$27033[rsp]
  0487f	e8 00 00 00 00	 call	 _Py_DecRef
$LN101@obj2ast_ex:
  04884	33 c0		 xor	 eax, eax
  04886	85 c0		 test	 eax, eax
  04888	75 a5		 jne	 SHORT $LN104@obj2ast_ex

; 5674 :         } else {

  0488a	eb 1d		 jmp	 SHORT $LN100@obj2ast_ex
$LN107@obj2ast_ex:

; 5675 :             PyErr_SetString(PyExc_TypeError, "required field \"slice\" missing from Subscript");

  0488c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@ECGILCDO@required?5field?5?$CCslice?$CC?5missing?5f@
  04893	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0489a	e8 00 00 00 00	 call	 PyErr_SetString

; 5676 :             return 1;

  0489f	b8 01 00 00 00	 mov	 eax, 1
  048a4	e9 d2 0e 00 00	 jmp	 $LN575@obj2ast_ex
$LN100@obj2ast_ex:

; 5677 :         }
; 5678 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  048a9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  048ae	8b c0		 mov	 eax, eax
  048b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  048b6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  048bf	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  048c3	48 8b d0	 mov	 rdx, rax
  048c6	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  048ce	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  048d3	85 c0		 test	 eax, eax
  048d5	0f 84 c9 00 00
	00		 je	 $LN99@obj2ast_ex

; 5679 :             int res;
; 5680 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  048db	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  048e0	8b c0		 mov	 eax, eax
  048e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  048e8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  048f1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  048f5	48 8b d0	 mov	 rdx, rax
  048f8	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04900	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04905	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5681 :             if (tmp == NULL) goto failed;

  0490a	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04910	75 05		 jne	 SHORT $LN98@obj2ast_ex
  04912	e9 47 0e 00 00	 jmp	 $failed$26048
$LN98@obj2ast_ex:

; 5682 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  04917	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0491f	48 8d 94 24 a0
	05 00 00	 lea	 rdx, QWORD PTR ctx$27008[rsp]
  04927	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  0492c	e8 00 00 00 00	 call	 obj2ast_expr_context
  04931	89 84 24 c0 05
	00 00		 mov	 DWORD PTR res$27040[rsp], eax

; 5683 :             if (res != 0) goto failed;

  04938	83 bc 24 c0 05
	00 00 00	 cmp	 DWORD PTR res$27040[rsp], 0
  04940	74 05		 je	 SHORT $LN97@obj2ast_ex
  04942	e9 17 0e 00 00	 jmp	 $failed$26048
$LN97@obj2ast_ex:
$LN96@obj2ast_ex:

; 5684 :             Py_CLEAR(tmp);

  04947	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0494d	74 4d		 je	 SHORT $LN93@obj2ast_ex
  0494f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04957	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0495c	41 b8 34 16 00
	00		 mov	 r8d, 5684		; 00001634H
  04962	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04969	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  04970	e8 00 00 00 00	 call	 _PyParallel_Guard
  04975	85 c0		 test	 eax, eax
  04977	75 23		 jne	 SHORT $LN93@obj2ast_ex
  04979	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0497e	48 89 84 24 c8
	05 00 00	 mov	 QWORD PTR _py_tmp$27048[rsp], rax
  04986	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0498f	48 8b 8c 24 c8
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$27048[rsp]
  04997	e8 00 00 00 00	 call	 _Py_DecRef
$LN93@obj2ast_ex:
  0499c	33 c0		 xor	 eax, eax
  0499e	85 c0		 test	 eax, eax
  049a0	75 a5		 jne	 SHORT $LN96@obj2ast_ex

; 5685 :         } else {

  049a2	eb 1d		 jmp	 SHORT $LN92@obj2ast_ex
$LN99@obj2ast_ex:

; 5686 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from Subscript");

  049a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@GNGBNLH@required?5field?5?$CCctx?$CC?5missing?5fro@
  049ab	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  049b2	e8 00 00 00 00	 call	 PyErr_SetString

; 5687 :             return 1;

  049b7	b8 01 00 00 00	 mov	 eax, 1
  049bc	e9 ba 0d 00 00	 jmp	 $LN575@obj2ast_ex
$LN92@obj2ast_ex:

; 5688 :         }
; 5689 :         *out = Subscript(value, slice, ctx, lineno, col_offset, arena);

  049c1	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  049c9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  049ce	8b 44 24 50	 mov	 eax, DWORD PTR col_offset$[rsp]
  049d2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  049d6	44 8b 4c 24 40	 mov	 r9d, DWORD PTR lineno$[rsp]
  049db	44 8b 84 24 a0
	05 00 00	 mov	 r8d, DWORD PTR ctx$27008[rsp]
  049e3	48 8b 94 24 90
	05 00 00	 mov	 rdx, QWORD PTR slice$27007[rsp]
  049eb	48 8b 8c 24 98
	05 00 00	 mov	 rcx, QWORD PTR value$27006[rsp]
  049f3	e8 00 00 00 00	 call	 _Py_Subscript
  049f8	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  04a00	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5690 :         if (*out == NULL) goto failed;

  04a03	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  04a0b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  04a0f	75 05		 jne	 SHORT $LN91@obj2ast_ex
  04a11	e9 48 0d 00 00	 jmp	 $failed$26048
$LN91@obj2ast_ex:

; 5691 :         return 0;

  04a16	33 c0		 xor	 eax, eax
  04a18	e9 5e 0d 00 00	 jmp	 $LN575@obj2ast_ex
$LN116@obj2ast_ex:

; 5692 :     }
; 5693 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Starred_type);

  04a1d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Starred_type
  04a24	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04a2c	e8 00 00 00 00	 call	 PyObject_IsInstance
  04a31	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5694 :     if (isinstance == -1) {

  04a35	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  04a3a	75 0a		 jne	 SHORT $LN90@obj2ast_ex

; 5695 :         return 1;

  04a3c	b8 01 00 00 00	 mov	 eax, 1
  04a41	e9 35 0d 00 00	 jmp	 $LN575@obj2ast_ex
$LN90@obj2ast_ex:

; 5696 :     }
; 5697 :     if (isinstance) {

  04a46	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  04a4b	0f 84 80 02 00
	00		 je	 $LN89@obj2ast_ex

; 5698 :         expr_ty value;
; 5699 :         expr_context_ty ctx;
; 5700 : 
; 5701 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  04a51	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  04a56	8b c0		 mov	 eax, eax
  04a58	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04a5e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04a67	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04a6b	48 8b d0	 mov	 rdx, rax
  04a6e	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04a76	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  04a7b	85 c0		 test	 eax, eax
  04a7d	0f 84 c9 00 00
	00		 je	 $LN88@obj2ast_ex

; 5702 :             int res;
; 5703 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  04a83	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  04a88	8b c0		 mov	 eax, eax
  04a8a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04a90	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04a99	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04a9d	48 8b d0	 mov	 rdx, rax
  04aa0	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04aa8	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04aad	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5704 :             if (tmp == NULL) goto failed;

  04ab2	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04ab8	75 05		 jne	 SHORT $LN87@obj2ast_ex
  04aba	e9 9f 0c 00 00	 jmp	 $failed$26048
$LN87@obj2ast_ex:

; 5705 :             res = obj2ast_expr(tmp, &value, arena);

  04abf	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04ac7	48 8d 94 24 d0
	05 00 00	 lea	 rdx, QWORD PTR value$27059[rsp]
  04acf	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  04ad4	e8 00 00 00 00	 call	 obj2ast_expr
  04ad9	89 84 24 dc 05
	00 00		 mov	 DWORD PTR res$27062[rsp], eax

; 5706 :             if (res != 0) goto failed;

  04ae0	83 bc 24 dc 05
	00 00 00	 cmp	 DWORD PTR res$27062[rsp], 0
  04ae8	74 05		 je	 SHORT $LN86@obj2ast_ex
  04aea	e9 6f 0c 00 00	 jmp	 $failed$26048
$LN86@obj2ast_ex:
$LN85@obj2ast_ex:

; 5707 :             Py_CLEAR(tmp);

  04aef	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04af5	74 4d		 je	 SHORT $LN82@obj2ast_ex
  04af7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04aff	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  04b04	41 b8 4b 16 00
	00		 mov	 r8d, 5707		; 0000164bH
  04b0a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04b11	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  04b18	e8 00 00 00 00	 call	 _PyParallel_Guard
  04b1d	85 c0		 test	 eax, eax
  04b1f	75 23		 jne	 SHORT $LN82@obj2ast_ex
  04b21	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  04b26	48 89 84 24 e0
	05 00 00	 mov	 QWORD PTR _py_tmp$27070[rsp], rax
  04b2e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  04b37	48 8b 8c 24 e0
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$27070[rsp]
  04b3f	e8 00 00 00 00	 call	 _Py_DecRef
$LN82@obj2ast_ex:
  04b44	33 c0		 xor	 eax, eax
  04b46	85 c0		 test	 eax, eax
  04b48	75 a5		 jne	 SHORT $LN85@obj2ast_ex

; 5708 :         } else {

  04b4a	eb 1d		 jmp	 SHORT $LN81@obj2ast_ex
$LN88@obj2ast_ex:

; 5709 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Starred");

  04b4c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@HHGGPHKN@required?5field?5?$CCvalue?$CC?5missing?5f@
  04b53	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  04b5a	e8 00 00 00 00	 call	 PyErr_SetString

; 5710 :             return 1;

  04b5f	b8 01 00 00 00	 mov	 eax, 1
  04b64	e9 12 0c 00 00	 jmp	 $LN575@obj2ast_ex
$LN81@obj2ast_ex:

; 5711 :         }
; 5712 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  04b69	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  04b6e	8b c0		 mov	 eax, eax
  04b70	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04b76	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04b7f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04b83	48 8b d0	 mov	 rdx, rax
  04b86	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04b8e	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  04b93	85 c0		 test	 eax, eax
  04b95	0f 84 c9 00 00
	00		 je	 $LN80@obj2ast_ex

; 5713 :             int res;
; 5714 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  04b9b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  04ba0	8b c0		 mov	 eax, eax
  04ba2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04ba8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04bb1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04bb5	48 8b d0	 mov	 rdx, rax
  04bb8	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04bc0	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04bc5	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5715 :             if (tmp == NULL) goto failed;

  04bca	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04bd0	75 05		 jne	 SHORT $LN79@obj2ast_ex
  04bd2	e9 87 0b 00 00	 jmp	 $failed$26048
$LN79@obj2ast_ex:

; 5716 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  04bd7	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04bdf	48 8d 94 24 d8
	05 00 00	 lea	 rdx, QWORD PTR ctx$27060[rsp]
  04be7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  04bec	e8 00 00 00 00	 call	 obj2ast_expr_context
  04bf1	89 84 24 e8 05
	00 00		 mov	 DWORD PTR res$27077[rsp], eax

; 5717 :             if (res != 0) goto failed;

  04bf8	83 bc 24 e8 05
	00 00 00	 cmp	 DWORD PTR res$27077[rsp], 0
  04c00	74 05		 je	 SHORT $LN78@obj2ast_ex
  04c02	e9 57 0b 00 00	 jmp	 $failed$26048
$LN78@obj2ast_ex:
$LN77@obj2ast_ex:

; 5718 :             Py_CLEAR(tmp);

  04c07	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04c0d	74 4d		 je	 SHORT $LN74@obj2ast_ex
  04c0f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04c17	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  04c1c	41 b8 56 16 00
	00		 mov	 r8d, 5718		; 00001656H
  04c22	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04c29	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  04c30	e8 00 00 00 00	 call	 _PyParallel_Guard
  04c35	85 c0		 test	 eax, eax
  04c37	75 23		 jne	 SHORT $LN74@obj2ast_ex
  04c39	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  04c3e	48 89 84 24 f0
	05 00 00	 mov	 QWORD PTR _py_tmp$27085[rsp], rax
  04c46	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  04c4f	48 8b 8c 24 f0
	05 00 00	 mov	 rcx, QWORD PTR _py_tmp$27085[rsp]
  04c57	e8 00 00 00 00	 call	 _Py_DecRef
$LN74@obj2ast_ex:
  04c5c	33 c0		 xor	 eax, eax
  04c5e	85 c0		 test	 eax, eax
  04c60	75 a5		 jne	 SHORT $LN77@obj2ast_ex

; 5719 :         } else {

  04c62	eb 1d		 jmp	 SHORT $LN73@obj2ast_ex
$LN80@obj2ast_ex:

; 5720 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from Starred");

  04c64	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@BBMCEKDP@required?5field?5?$CCctx?$CC?5missing?5fro@
  04c6b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  04c72	e8 00 00 00 00	 call	 PyErr_SetString

; 5721 :             return 1;

  04c77	b8 01 00 00 00	 mov	 eax, 1
  04c7c	e9 fa 0a 00 00	 jmp	 $LN575@obj2ast_ex
$LN73@obj2ast_ex:

; 5722 :         }
; 5723 :         *out = Starred(value, ctx, lineno, col_offset, arena);

  04c81	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  04c89	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04c8e	44 8b 4c 24 50	 mov	 r9d, DWORD PTR col_offset$[rsp]
  04c93	44 8b 44 24 40	 mov	 r8d, DWORD PTR lineno$[rsp]
  04c98	8b 94 24 d8 05
	00 00		 mov	 edx, DWORD PTR ctx$27060[rsp]
  04c9f	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR value$27059[rsp]
  04ca7	e8 00 00 00 00	 call	 _Py_Starred
  04cac	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  04cb4	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5724 :         if (*out == NULL) goto failed;

  04cb7	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  04cbf	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  04cc3	75 05		 jne	 SHORT $LN72@obj2ast_ex
  04cc5	e9 94 0a 00 00	 jmp	 $failed$26048
$LN72@obj2ast_ex:

; 5725 :         return 0;

  04cca	33 c0		 xor	 eax, eax
  04ccc	e9 aa 0a 00 00	 jmp	 $LN575@obj2ast_ex
$LN89@obj2ast_ex:

; 5726 :     }
; 5727 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Name_type);

  04cd1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Name_type
  04cd8	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04ce0	e8 00 00 00 00	 call	 PyObject_IsInstance
  04ce5	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5728 :     if (isinstance == -1) {

  04ce9	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  04cee	75 0a		 jne	 SHORT $LN71@obj2ast_ex

; 5729 :         return 1;

  04cf0	b8 01 00 00 00	 mov	 eax, 1
  04cf5	e9 81 0a 00 00	 jmp	 $LN575@obj2ast_ex
$LN71@obj2ast_ex:

; 5730 :     }
; 5731 :     if (isinstance) {

  04cfa	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  04cff	0f 84 80 02 00
	00		 je	 $LN70@obj2ast_ex

; 5732 :         identifier id;
; 5733 :         expr_context_ty ctx;
; 5734 : 
; 5735 :         if (_PyObject_HasAttrId(obj, &PyId_id)) {

  04d05	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_id
  04d0a	8b c0		 mov	 eax, eax
  04d0c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04d12	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04d1b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04d1f	48 8b d0	 mov	 rdx, rax
  04d22	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04d2a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  04d2f	85 c0		 test	 eax, eax
  04d31	0f 84 c9 00 00
	00		 je	 $LN69@obj2ast_ex

; 5736 :             int res;
; 5737 :             tmp = _PyObject_GetAttrId(obj, &PyId_id);

  04d37	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_id
  04d3c	8b c0		 mov	 eax, eax
  04d3e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04d44	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04d4d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04d51	48 8b d0	 mov	 rdx, rax
  04d54	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04d5c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04d61	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5738 :             if (tmp == NULL) goto failed;

  04d66	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04d6c	75 05		 jne	 SHORT $LN68@obj2ast_ex
  04d6e	e9 eb 09 00 00	 jmp	 $failed$26048
$LN68@obj2ast_ex:

; 5739 :             res = obj2ast_identifier(tmp, &id, arena);

  04d73	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04d7b	48 8d 94 24 f8
	05 00 00	 lea	 rdx, QWORD PTR id$27096[rsp]
  04d83	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  04d88	e8 00 00 00 00	 call	 obj2ast_identifier
  04d8d	89 84 24 04 06
	00 00		 mov	 DWORD PTR res$27099[rsp], eax

; 5740 :             if (res != 0) goto failed;

  04d94	83 bc 24 04 06
	00 00 00	 cmp	 DWORD PTR res$27099[rsp], 0
  04d9c	74 05		 je	 SHORT $LN67@obj2ast_ex
  04d9e	e9 bb 09 00 00	 jmp	 $failed$26048
$LN67@obj2ast_ex:
$LN66@obj2ast_ex:

; 5741 :             Py_CLEAR(tmp);

  04da3	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04da9	74 4d		 je	 SHORT $LN63@obj2ast_ex
  04dab	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04db3	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  04db8	41 b8 6d 16 00
	00		 mov	 r8d, 5741		; 0000166dH
  04dbe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04dc5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  04dcc	e8 00 00 00 00	 call	 _PyParallel_Guard
  04dd1	85 c0		 test	 eax, eax
  04dd3	75 23		 jne	 SHORT $LN63@obj2ast_ex
  04dd5	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  04dda	48 89 84 24 08
	06 00 00	 mov	 QWORD PTR _py_tmp$27107[rsp], rax
  04de2	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  04deb	48 8b 8c 24 08
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$27107[rsp]
  04df3	e8 00 00 00 00	 call	 _Py_DecRef
$LN63@obj2ast_ex:
  04df8	33 c0		 xor	 eax, eax
  04dfa	85 c0		 test	 eax, eax
  04dfc	75 a5		 jne	 SHORT $LN66@obj2ast_ex

; 5742 :         } else {

  04dfe	eb 1d		 jmp	 SHORT $LN62@obj2ast_ex
$LN69@obj2ast_ex:

; 5743 :             PyErr_SetString(PyExc_TypeError, "required field \"id\" missing from Name");

  04e00	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KDGIGLGJ@required?5field?5?$CCid?$CC?5missing?5from@
  04e07	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  04e0e	e8 00 00 00 00	 call	 PyErr_SetString

; 5744 :             return 1;

  04e13	b8 01 00 00 00	 mov	 eax, 1
  04e18	e9 5e 09 00 00	 jmp	 $LN575@obj2ast_ex
$LN62@obj2ast_ex:

; 5745 :         }
; 5746 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  04e1d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  04e22	8b c0		 mov	 eax, eax
  04e24	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04e2a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04e33	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04e37	48 8b d0	 mov	 rdx, rax
  04e3a	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04e42	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  04e47	85 c0		 test	 eax, eax
  04e49	0f 84 c9 00 00
	00		 je	 $LN61@obj2ast_ex

; 5747 :             int res;
; 5748 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  04e4f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  04e54	8b c0		 mov	 eax, eax
  04e56	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04e5c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04e65	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04e69	48 8b d0	 mov	 rdx, rax
  04e6c	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04e74	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  04e79	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5749 :             if (tmp == NULL) goto failed;

  04e7e	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04e84	75 05		 jne	 SHORT $LN60@obj2ast_ex
  04e86	e9 d3 08 00 00	 jmp	 $failed$26048
$LN60@obj2ast_ex:

; 5750 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  04e8b	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  04e93	48 8d 94 24 00
	06 00 00	 lea	 rdx, QWORD PTR ctx$27097[rsp]
  04e9b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  04ea0	e8 00 00 00 00	 call	 obj2ast_expr_context
  04ea5	89 84 24 10 06
	00 00		 mov	 DWORD PTR res$27114[rsp], eax

; 5751 :             if (res != 0) goto failed;

  04eac	83 bc 24 10 06
	00 00 00	 cmp	 DWORD PTR res$27114[rsp], 0
  04eb4	74 05		 je	 SHORT $LN59@obj2ast_ex
  04eb6	e9 a3 08 00 00	 jmp	 $failed$26048
$LN59@obj2ast_ex:
$LN58@obj2ast_ex:

; 5752 :             Py_CLEAR(tmp);

  04ebb	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  04ec1	74 4d		 je	 SHORT $LN55@obj2ast_ex
  04ec3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  04ecb	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  04ed0	41 b8 78 16 00
	00		 mov	 r8d, 5752		; 00001678H
  04ed6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  04edd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  04ee4	e8 00 00 00 00	 call	 _PyParallel_Guard
  04ee9	85 c0		 test	 eax, eax
  04eeb	75 23		 jne	 SHORT $LN55@obj2ast_ex
  04eed	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  04ef2	48 89 84 24 18
	06 00 00	 mov	 QWORD PTR _py_tmp$27122[rsp], rax
  04efa	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  04f03	48 8b 8c 24 18
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$27122[rsp]
  04f0b	e8 00 00 00 00	 call	 _Py_DecRef
$LN55@obj2ast_ex:
  04f10	33 c0		 xor	 eax, eax
  04f12	85 c0		 test	 eax, eax
  04f14	75 a5		 jne	 SHORT $LN58@obj2ast_ex

; 5753 :         } else {

  04f16	eb 1d		 jmp	 SHORT $LN54@obj2ast_ex
$LN61@obj2ast_ex:

; 5754 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from Name");

  04f18	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@BCDOFIHJ@required?5field?5?$CCctx?$CC?5missing?5fro@
  04f1f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  04f26	e8 00 00 00 00	 call	 PyErr_SetString

; 5755 :             return 1;

  04f2b	b8 01 00 00 00	 mov	 eax, 1
  04f30	e9 46 08 00 00	 jmp	 $LN575@obj2ast_ex
$LN54@obj2ast_ex:

; 5756 :         }
; 5757 :         *out = Name(id, ctx, lineno, col_offset, arena);

  04f35	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  04f3d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04f42	44 8b 4c 24 50	 mov	 r9d, DWORD PTR col_offset$[rsp]
  04f47	44 8b 44 24 40	 mov	 r8d, DWORD PTR lineno$[rsp]
  04f4c	8b 94 24 00 06
	00 00		 mov	 edx, DWORD PTR ctx$27097[rsp]
  04f53	48 8b 8c 24 f8
	05 00 00	 mov	 rcx, QWORD PTR id$27096[rsp]
  04f5b	e8 00 00 00 00	 call	 _Py_Name
  04f60	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  04f68	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5758 :         if (*out == NULL) goto failed;

  04f6b	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  04f73	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  04f77	75 05		 jne	 SHORT $LN53@obj2ast_ex
  04f79	e9 e0 07 00 00	 jmp	 $failed$26048
$LN53@obj2ast_ex:

; 5759 :         return 0;

  04f7e	33 c0		 xor	 eax, eax
  04f80	e9 f6 07 00 00	 jmp	 $LN575@obj2ast_ex
$LN70@obj2ast_ex:

; 5760 :     }
; 5761 :     isinstance = PyObject_IsInstance(obj, (PyObject*)List_type);

  04f85	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR List_type
  04f8c	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04f94	e8 00 00 00 00	 call	 PyObject_IsInstance
  04f99	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5762 :     if (isinstance == -1) {

  04f9d	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  04fa2	75 0a		 jne	 SHORT $LN52@obj2ast_ex

; 5763 :         return 1;

  04fa4	b8 01 00 00 00	 mov	 eax, 1
  04fa9	e9 cd 07 00 00	 jmp	 $LN575@obj2ast_ex
$LN52@obj2ast_ex:

; 5764 :     }
; 5765 :     if (isinstance) {

  04fae	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  04fb3	0f 84 ae 03 00
	00		 je	 $LN51@obj2ast_ex

; 5766 :         asdl_seq* elts;
; 5767 :         expr_context_ty ctx;
; 5768 : 
; 5769 :         if (_PyObject_HasAttrId(obj, &PyId_elts)) {

  04fb9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elts
  04fbe	8b c0		 mov	 eax, eax
  04fc0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04fc6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04fcf	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  04fd3	48 8b d0	 mov	 rdx, rax
  04fd6	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  04fde	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  04fe3	85 c0		 test	 eax, eax
  04fe5	0f 84 f7 01 00
	00		 je	 $LN50@obj2ast_ex

; 5770 :             int res;
; 5771 :             Py_ssize_t len;
; 5772 :             Py_ssize_t i;
; 5773 :             tmp = _PyObject_GetAttrId(obj, &PyId_elts);

  04feb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elts
  04ff0	8b c0		 mov	 eax, eax
  04ff2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04ff8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  05001	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  05005	48 8b d0	 mov	 rdx, rax
  05008	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05010	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  05015	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5774 :             if (tmp == NULL) goto failed;

  0501a	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  05020	75 05		 jne	 SHORT $LN49@obj2ast_ex
  05022	e9 37 07 00 00	 jmp	 $failed$26048
$LN49@obj2ast_ex:

; 5775 :             if (!PyList_Check(tmp)) {

  05027	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0502c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  05030	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  05036	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0503b	85 c0		 test	 eax, eax
  0503d	75 25		 jne	 SHORT $LN48@obj2ast_ex

; 5776 :                 PyErr_Format(PyExc_TypeError, "List field \"elts\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0503f	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  05044	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  05048	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0504c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@NOICNLCE@List?5field?5?$CCelts?$CC?5must?5be?5a?5list@
  05053	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0505a	e8 00 00 00 00	 call	 PyErr_Format

; 5777 :                 goto failed;

  0505f	e9 fa 06 00 00	 jmp	 $failed$26048
$LN48@obj2ast_ex:

; 5778 :             }
; 5779 :             len = PyList_GET_SIZE(tmp);

  05064	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  05069	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0506d	48 89 84 24 40
	06 00 00	 mov	 QWORD PTR len$27137[rsp], rax

; 5780 :             elts = asdl_seq_new(len, arena);

  05075	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  0507d	48 8b 8c 24 40
	06 00 00	 mov	 rcx, QWORD PTR len$27137[rsp]
  05085	e8 00 00 00 00	 call	 asdl_seq_new
  0508a	48 89 84 24 28
	06 00 00	 mov	 QWORD PTR elts$27133[rsp], rax

; 5781 :             if (elts == NULL) goto failed;

  05092	48 83 bc 24 28
	06 00 00 00	 cmp	 QWORD PTR elts$27133[rsp], 0
  0509b	75 05		 jne	 SHORT $LN47@obj2ast_ex
  0509d	e9 bc 06 00 00	 jmp	 $failed$26048
$LN47@obj2ast_ex:

; 5782 :             for (i = 0; i < len; i++) {

  050a2	48 c7 84 24 38
	06 00 00 00 00
	00 00		 mov	 QWORD PTR i$27138[rsp], 0
  050ae	eb 13		 jmp	 SHORT $LN46@obj2ast_ex
$LN45@obj2ast_ex:
  050b0	48 8b 84 24 38
	06 00 00	 mov	 rax, QWORD PTR i$27138[rsp]
  050b8	48 ff c0	 inc	 rax
  050bb	48 89 84 24 38
	06 00 00	 mov	 QWORD PTR i$27138[rsp], rax
$LN46@obj2ast_ex:
  050c3	48 8b 84 24 40
	06 00 00	 mov	 rax, QWORD PTR len$27137[rsp]
  050cb	48 39 84 24 38
	06 00 00	 cmp	 QWORD PTR i$27138[rsp], rax
  050d3	0f 8d ac 00 00
	00		 jge	 $LN44@obj2ast_ex

; 5783 :                 expr_ty value;
; 5784 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  050d9	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  050de	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  050e2	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  050ea	48 8d 94 24 48
	06 00 00	 lea	 rdx, QWORD PTR value$27150[rsp]
  050f2	48 8b 8c 24 38
	06 00 00	 mov	 rcx, QWORD PTR i$27138[rsp]
  050fa	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  050fe	e8 00 00 00 00	 call	 obj2ast_expr
  05103	89 84 24 30 06
	00 00		 mov	 DWORD PTR res$27136[rsp], eax

; 5785 :                 if (res != 0) goto failed;

  0510a	83 bc 24 30 06
	00 00 00	 cmp	 DWORD PTR res$27136[rsp], 0
  05112	74 05		 je	 SHORT $LN43@obj2ast_ex
  05114	e9 45 06 00 00	 jmp	 $failed$26048
$LN43@obj2ast_ex:

; 5786 :                 asdl_seq_SET(elts, i, value);

  05119	8b 84 24 38 06
	00 00		 mov	 eax, DWORD PTR i$27138[rsp]
  05120	89 84 24 50 06
	00 00		 mov	 DWORD PTR _asdl_i$27153[rsp], eax
  05127	48 83 bc 24 28
	06 00 00 00	 cmp	 QWORD PTR elts$27133[rsp], 0
  05130	74 15		 je	 SHORT $LN601@obj2ast_ex
  05132	48 63 84 24 50
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27153[rsp]
  0513a	48 8b 8c 24 28
	06 00 00	 mov	 rcx, QWORD PTR elts$27133[rsp]
  05142	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  05145	7c 1c		 jl	 SHORT $LN602@obj2ast_ex
$LN601@obj2ast_ex:
  05147	41 b8 9a 16 00
	00		 mov	 r8d, 5786		; 0000169aH
  0514d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  05154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@CNCMENEB@?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  0515b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  05161	33 c0		 xor	 eax, eax
$LN602@obj2ast_ex:
  05163	48 63 84 24 50
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27153[rsp]
  0516b	48 8b 8c 24 28
	06 00 00	 mov	 rcx, QWORD PTR elts$27133[rsp]
  05173	48 8b 94 24 48
	06 00 00	 mov	 rdx, QWORD PTR value$27150[rsp]
  0517b	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5787 :             }

  05180	e9 2b ff ff ff	 jmp	 $LN45@obj2ast_ex
$LN44@obj2ast_ex:
$LN42@obj2ast_ex:

; 5788 :             Py_CLEAR(tmp);

  05185	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0518b	74 4d		 je	 SHORT $LN39@obj2ast_ex
  0518d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  05195	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0519a	41 b8 9c 16 00
	00		 mov	 r8d, 5788		; 0000169cH
  051a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  051a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  051ae	e8 00 00 00 00	 call	 _PyParallel_Guard
  051b3	85 c0		 test	 eax, eax
  051b5	75 23		 jne	 SHORT $LN39@obj2ast_ex
  051b7	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  051bc	48 89 84 24 58
	06 00 00	 mov	 QWORD PTR _py_tmp$27159[rsp], rax
  051c4	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  051cd	48 8b 8c 24 58
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$27159[rsp]
  051d5	e8 00 00 00 00	 call	 _Py_DecRef
$LN39@obj2ast_ex:
  051da	33 c0		 xor	 eax, eax
  051dc	85 c0		 test	 eax, eax
  051de	75 a5		 jne	 SHORT $LN42@obj2ast_ex

; 5789 :         } else {

  051e0	eb 1d		 jmp	 SHORT $LN38@obj2ast_ex
$LN50@obj2ast_ex:

; 5790 :             PyErr_SetString(PyExc_TypeError, "required field \"elts\" missing from List");

  051e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@LLANLLOK@required?5field?5?$CCelts?$CC?5missing?5fr@
  051e9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  051f0	e8 00 00 00 00	 call	 PyErr_SetString

; 5791 :             return 1;

  051f5	b8 01 00 00 00	 mov	 eax, 1
  051fa	e9 7c 05 00 00	 jmp	 $LN575@obj2ast_ex
$LN38@obj2ast_ex:

; 5792 :         }
; 5793 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  051ff	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  05204	8b c0		 mov	 eax, eax
  05206	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0520c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  05215	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  05219	48 8b d0	 mov	 rdx, rax
  0521c	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05224	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  05229	85 c0		 test	 eax, eax
  0522b	0f 84 c9 00 00
	00		 je	 $LN37@obj2ast_ex

; 5794 :             int res;
; 5795 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  05231	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  05236	8b c0		 mov	 eax, eax
  05238	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0523e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  05247	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0524b	48 8b d0	 mov	 rdx, rax
  0524e	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05256	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0525b	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5796 :             if (tmp == NULL) goto failed;

  05260	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  05266	75 05		 jne	 SHORT $LN36@obj2ast_ex
  05268	e9 f1 04 00 00	 jmp	 $failed$26048
$LN36@obj2ast_ex:

; 5797 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  0526d	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  05275	48 8d 94 24 20
	06 00 00	 lea	 rdx, QWORD PTR ctx$27134[rsp]
  0527d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  05282	e8 00 00 00 00	 call	 obj2ast_expr_context
  05287	89 84 24 60 06
	00 00		 mov	 DWORD PTR res$27166[rsp], eax

; 5798 :             if (res != 0) goto failed;

  0528e	83 bc 24 60 06
	00 00 00	 cmp	 DWORD PTR res$27166[rsp], 0
  05296	74 05		 je	 SHORT $LN35@obj2ast_ex
  05298	e9 c1 04 00 00	 jmp	 $failed$26048
$LN35@obj2ast_ex:
$LN34@obj2ast_ex:

; 5799 :             Py_CLEAR(tmp);

  0529d	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  052a3	74 4d		 je	 SHORT $LN31@obj2ast_ex
  052a5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  052ad	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  052b2	41 b8 a7 16 00
	00		 mov	 r8d, 5799		; 000016a7H
  052b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  052bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  052c6	e8 00 00 00 00	 call	 _PyParallel_Guard
  052cb	85 c0		 test	 eax, eax
  052cd	75 23		 jne	 SHORT $LN31@obj2ast_ex
  052cf	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  052d4	48 89 84 24 68
	06 00 00	 mov	 QWORD PTR _py_tmp$27174[rsp], rax
  052dc	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  052e5	48 8b 8c 24 68
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$27174[rsp]
  052ed	e8 00 00 00 00	 call	 _Py_DecRef
$LN31@obj2ast_ex:
  052f2	33 c0		 xor	 eax, eax
  052f4	85 c0		 test	 eax, eax
  052f6	75 a5		 jne	 SHORT $LN34@obj2ast_ex

; 5800 :         } else {

  052f8	eb 1d		 jmp	 SHORT $LN30@obj2ast_ex
$LN37@obj2ast_ex:

; 5801 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from List");

  052fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@OICLIOJM@required?5field?5?$CCctx?$CC?5missing?5fro@
  05301	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  05308	e8 00 00 00 00	 call	 PyErr_SetString

; 5802 :             return 1;

  0530d	b8 01 00 00 00	 mov	 eax, 1
  05312	e9 64 04 00 00	 jmp	 $LN575@obj2ast_ex
$LN30@obj2ast_ex:

; 5803 :         }
; 5804 :         *out = List(elts, ctx, lineno, col_offset, arena);

  05317	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  0531f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  05324	44 8b 4c 24 50	 mov	 r9d, DWORD PTR col_offset$[rsp]
  05329	44 8b 44 24 40	 mov	 r8d, DWORD PTR lineno$[rsp]
  0532e	8b 94 24 20 06
	00 00		 mov	 edx, DWORD PTR ctx$27134[rsp]
  05335	48 8b 8c 24 28
	06 00 00	 mov	 rcx, QWORD PTR elts$27133[rsp]
  0533d	e8 00 00 00 00	 call	 _Py_List
  05342	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  0534a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5805 :         if (*out == NULL) goto failed;

  0534d	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  05355	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  05359	75 05		 jne	 SHORT $LN29@obj2ast_ex
  0535b	e9 fe 03 00 00	 jmp	 $failed$26048
$LN29@obj2ast_ex:

; 5806 :         return 0;

  05360	33 c0		 xor	 eax, eax
  05362	e9 14 04 00 00	 jmp	 $LN575@obj2ast_ex
$LN51@obj2ast_ex:

; 5807 :     }
; 5808 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Tuple_type);

  05367	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Tuple_type
  0536e	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05376	e8 00 00 00 00	 call	 PyObject_IsInstance
  0537b	89 44 24 54	 mov	 DWORD PTR isinstance$[rsp], eax

; 5809 :     if (isinstance == -1) {

  0537f	83 7c 24 54 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  05384	75 0a		 jne	 SHORT $LN28@obj2ast_ex

; 5810 :         return 1;

  05386	b8 01 00 00 00	 mov	 eax, 1
  0538b	e9 eb 03 00 00	 jmp	 $LN575@obj2ast_ex
$LN28@obj2ast_ex:

; 5811 :     }
; 5812 :     if (isinstance) {

  05390	83 7c 24 54 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  05395	0f 84 a8 03 00
	00		 je	 $LN27@obj2ast_ex

; 5813 :         asdl_seq* elts;
; 5814 :         expr_context_ty ctx;
; 5815 : 
; 5816 :         if (_PyObject_HasAttrId(obj, &PyId_elts)) {

  0539b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elts
  053a0	8b c0		 mov	 eax, eax
  053a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  053a8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  053b1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  053b5	48 8b d0	 mov	 rdx, rax
  053b8	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  053c0	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  053c5	85 c0		 test	 eax, eax
  053c7	0f 84 f7 01 00
	00		 je	 $LN26@obj2ast_ex

; 5817 :             int res;
; 5818 :             Py_ssize_t len;
; 5819 :             Py_ssize_t i;
; 5820 :             tmp = _PyObject_GetAttrId(obj, &PyId_elts);

  053cd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_elts
  053d2	8b c0		 mov	 eax, eax
  053d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  053da	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  053e3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  053e7	48 8b d0	 mov	 rdx, rax
  053ea	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  053f2	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  053f7	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5821 :             if (tmp == NULL) goto failed;

  053fc	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  05402	75 05		 jne	 SHORT $LN25@obj2ast_ex
  05404	e9 55 03 00 00	 jmp	 $failed$26048
$LN25@obj2ast_ex:

; 5822 :             if (!PyList_Check(tmp)) {

  05409	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0540e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  05412	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  05418	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0541d	85 c0		 test	 eax, eax
  0541f	75 25		 jne	 SHORT $LN24@obj2ast_ex

; 5823 :                 PyErr_Format(PyExc_TypeError, "Tuple field \"elts\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  05421	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  05426	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0542a	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0542e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@HDHPGNPM@Tuple?5field?5?$CCelts?$CC?5must?5be?5a?5lis@
  05435	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0543c	e8 00 00 00 00	 call	 PyErr_Format

; 5824 :                 goto failed;

  05441	e9 18 03 00 00	 jmp	 $failed$26048
$LN24@obj2ast_ex:

; 5825 :             }
; 5826 :             len = PyList_GET_SIZE(tmp);

  05446	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0544b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0544f	48 89 84 24 90
	06 00 00	 mov	 QWORD PTR len$27189[rsp], rax

; 5827 :             elts = asdl_seq_new(len, arena);

  05457	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  0545f	48 8b 8c 24 90
	06 00 00	 mov	 rcx, QWORD PTR len$27189[rsp]
  05467	e8 00 00 00 00	 call	 asdl_seq_new
  0546c	48 89 84 24 78
	06 00 00	 mov	 QWORD PTR elts$27185[rsp], rax

; 5828 :             if (elts == NULL) goto failed;

  05474	48 83 bc 24 78
	06 00 00 00	 cmp	 QWORD PTR elts$27185[rsp], 0
  0547d	75 05		 jne	 SHORT $LN23@obj2ast_ex
  0547f	e9 da 02 00 00	 jmp	 $failed$26048
$LN23@obj2ast_ex:

; 5829 :             for (i = 0; i < len; i++) {

  05484	48 c7 84 24 88
	06 00 00 00 00
	00 00		 mov	 QWORD PTR i$27190[rsp], 0
  05490	eb 13		 jmp	 SHORT $LN22@obj2ast_ex
$LN21@obj2ast_ex:
  05492	48 8b 84 24 88
	06 00 00	 mov	 rax, QWORD PTR i$27190[rsp]
  0549a	48 ff c0	 inc	 rax
  0549d	48 89 84 24 88
	06 00 00	 mov	 QWORD PTR i$27190[rsp], rax
$LN22@obj2ast_ex:
  054a5	48 8b 84 24 90
	06 00 00	 mov	 rax, QWORD PTR len$27189[rsp]
  054ad	48 39 84 24 88
	06 00 00	 cmp	 QWORD PTR i$27190[rsp], rax
  054b5	0f 8d ac 00 00
	00		 jge	 $LN20@obj2ast_ex

; 5830 :                 expr_ty value;
; 5831 :                 res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  054bb	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  054c0	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  054c4	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  054cc	48 8d 94 24 98
	06 00 00	 lea	 rdx, QWORD PTR value$27202[rsp]
  054d4	48 8b 8c 24 88
	06 00 00	 mov	 rcx, QWORD PTR i$27190[rsp]
  054dc	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  054e0	e8 00 00 00 00	 call	 obj2ast_expr
  054e5	89 84 24 80 06
	00 00		 mov	 DWORD PTR res$27188[rsp], eax

; 5832 :                 if (res != 0) goto failed;

  054ec	83 bc 24 80 06
	00 00 00	 cmp	 DWORD PTR res$27188[rsp], 0
  054f4	74 05		 je	 SHORT $LN19@obj2ast_ex
  054f6	e9 63 02 00 00	 jmp	 $failed$26048
$LN19@obj2ast_ex:

; 5833 :                 asdl_seq_SET(elts, i, value);

  054fb	8b 84 24 88 06
	00 00		 mov	 eax, DWORD PTR i$27190[rsp]
  05502	89 84 24 a0 06
	00 00		 mov	 DWORD PTR _asdl_i$27205[rsp], eax
  05509	48 83 bc 24 78
	06 00 00 00	 cmp	 QWORD PTR elts$27185[rsp], 0
  05512	74 15		 je	 SHORT $LN603@obj2ast_ex
  05514	48 63 84 24 a0
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27205[rsp]
  0551c	48 8b 8c 24 78
	06 00 00	 mov	 rcx, QWORD PTR elts$27185[rsp]
  05524	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  05527	7c 1c		 jl	 SHORT $LN604@obj2ast_ex
$LN603@obj2ast_ex:
  05529	41 b8 c9 16 00
	00		 mov	 r8d, 5833		; 000016c9H
  0552f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  05536	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@CNCMENEB@?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAe?$AAl?$AAt?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  0553d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  05543	33 c0		 xor	 eax, eax
$LN604@obj2ast_ex:
  05545	48 63 84 24 a0
	06 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27205[rsp]
  0554d	48 8b 8c 24 78
	06 00 00	 mov	 rcx, QWORD PTR elts$27185[rsp]
  05555	48 8b 94 24 98
	06 00 00	 mov	 rdx, QWORD PTR value$27202[rsp]
  0555d	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5834 :             }

  05562	e9 2b ff ff ff	 jmp	 $LN21@obj2ast_ex
$LN20@obj2ast_ex:
$LN18@obj2ast_ex:

; 5835 :             Py_CLEAR(tmp);

  05567	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0556d	74 4d		 je	 SHORT $LN15@obj2ast_ex
  0556f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  05577	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  0557c	41 b8 cb 16 00
	00		 mov	 r8d, 5835		; 000016cbH
  05582	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  05589	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  05590	e8 00 00 00 00	 call	 _PyParallel_Guard
  05595	85 c0		 test	 eax, eax
  05597	75 23		 jne	 SHORT $LN15@obj2ast_ex
  05599	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0559e	48 89 84 24 a8
	06 00 00	 mov	 QWORD PTR _py_tmp$27211[rsp], rax
  055a6	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  055af	48 8b 8c 24 a8
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$27211[rsp]
  055b7	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@obj2ast_ex:
  055bc	33 c0		 xor	 eax, eax
  055be	85 c0		 test	 eax, eax
  055c0	75 a5		 jne	 SHORT $LN18@obj2ast_ex

; 5836 :         } else {

  055c2	eb 1d		 jmp	 SHORT $LN14@obj2ast_ex
$LN26@obj2ast_ex:

; 5837 :             PyErr_SetString(PyExc_TypeError, "required field \"elts\" missing from Tuple");

  055c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@BCPLDOGM@required?5field?5?$CCelts?$CC?5missing?5fr@
  055cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  055d2	e8 00 00 00 00	 call	 PyErr_SetString

; 5838 :             return 1;

  055d7	b8 01 00 00 00	 mov	 eax, 1
  055dc	e9 9a 01 00 00	 jmp	 $LN575@obj2ast_ex
$LN14@obj2ast_ex:

; 5839 :         }
; 5840 :         if (_PyObject_HasAttrId(obj, &PyId_ctx)) {

  055e1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  055e6	8b c0		 mov	 eax, eax
  055e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  055ee	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  055f7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  055fb	48 8b d0	 mov	 rdx, rax
  055fe	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05606	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0560b	85 c0		 test	 eax, eax
  0560d	0f 84 c9 00 00
	00		 je	 $LN13@obj2ast_ex

; 5841 :             int res;
; 5842 :             tmp = _PyObject_GetAttrId(obj, &PyId_ctx);

  05613	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ctx
  05618	8b c0		 mov	 eax, eax
  0561a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  05620	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  05629	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0562d	48 8b d0	 mov	 rdx, rax
  05630	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  05638	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0563d	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 5843 :             if (tmp == NULL) goto failed;

  05642	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  05648	75 05		 jne	 SHORT $LN12@obj2ast_ex
  0564a	e9 0f 01 00 00	 jmp	 $failed$26048
$LN12@obj2ast_ex:

; 5844 :             res = obj2ast_expr_context(tmp, &ctx, arena);

  0564f	4c 8b 84 24 e0
	06 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  05657	48 8d 94 24 70
	06 00 00	 lea	 rdx, QWORD PTR ctx$27186[rsp]
  0565f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  05664	e8 00 00 00 00	 call	 obj2ast_expr_context
  05669	89 84 24 b0 06
	00 00		 mov	 DWORD PTR res$27218[rsp], eax

; 5845 :             if (res != 0) goto failed;

  05670	83 bc 24 b0 06
	00 00 00	 cmp	 DWORD PTR res$27218[rsp], 0
  05678	74 05		 je	 SHORT $LN11@obj2ast_ex
  0567a	e9 df 00 00 00	 jmp	 $failed$26048
$LN11@obj2ast_ex:
$LN10@obj2ast_ex:

; 5846 :             Py_CLEAR(tmp);

  0567f	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  05685	74 4d		 je	 SHORT $LN7@obj2ast_ex
  05687	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0568f	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tmp$[rsp]
  05694	41 b8 d6 16 00
	00		 mov	 r8d, 5846		; 000016d6H
  0569a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  056a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PJIFJGNM@obj2ast_expr?$AA@
  056a8	e8 00 00 00 00	 call	 _PyParallel_Guard
  056ad	85 c0		 test	 eax, eax
  056af	75 23		 jne	 SHORT $LN7@obj2ast_ex
  056b1	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  056b6	48 89 84 24 b8
	06 00 00	 mov	 QWORD PTR _py_tmp$27226[rsp], rax
  056be	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  056c7	48 8b 8c 24 b8
	06 00 00	 mov	 rcx, QWORD PTR _py_tmp$27226[rsp]
  056cf	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@obj2ast_ex:
  056d4	33 c0		 xor	 eax, eax
  056d6	85 c0		 test	 eax, eax
  056d8	75 a5		 jne	 SHORT $LN10@obj2ast_ex

; 5847 :         } else {

  056da	eb 1d		 jmp	 SHORT $LN6@obj2ast_ex
$LN13@obj2ast_ex:

; 5848 :             PyErr_SetString(PyExc_TypeError, "required field \"ctx\" missing from Tuple");

  056dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@KLMOMMFA@required?5field?5?$CCctx?$CC?5missing?5fro@
  056e3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  056ea	e8 00 00 00 00	 call	 PyErr_SetString

; 5849 :             return 1;

  056ef	b8 01 00 00 00	 mov	 eax, 1
  056f4	e9 82 00 00 00	 jmp	 $LN575@obj2ast_ex
$LN6@obj2ast_ex:

; 5850 :         }
; 5851 :         *out = Tuple(elts, ctx, lineno, col_offset, arena);

  056f9	48 8b 84 24 e0
	06 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  05701	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  05706	44 8b 4c 24 50	 mov	 r9d, DWORD PTR col_offset$[rsp]
  0570b	44 8b 44 24 40	 mov	 r8d, DWORD PTR lineno$[rsp]
  05710	8b 94 24 70 06
	00 00		 mov	 edx, DWORD PTR ctx$27186[rsp]
  05717	48 8b 8c 24 78
	06 00 00	 mov	 rcx, QWORD PTR elts$27185[rsp]
  0571f	e8 00 00 00 00	 call	 _Py_Tuple
  05724	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  0572c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5852 :         if (*out == NULL) goto failed;

  0572f	48 8b 84 24 d8
	06 00 00	 mov	 rax, QWORD PTR out$[rsp]
  05737	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0573b	75 02		 jne	 SHORT $LN5@obj2ast_ex
  0573d	eb 1f		 jmp	 SHORT $failed$26048
$LN5@obj2ast_ex:

; 5853 :         return 0;

  0573f	33 c0		 xor	 eax, eax
  05741	eb 38		 jmp	 SHORT $LN575@obj2ast_ex
$LN27@obj2ast_ex:

; 5854 :     }
; 5855 : 
; 5856 :     PyErr_Format(PyExc_TypeError, "expected some sort of expr, but got %R", obj);

  05743	4c 8b 84 24 d0
	06 00 00	 mov	 r8, QWORD PTR obj$[rsp]
  0574b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@JDNNBGGD@expected?5some?5sort?5of?5expr?0?5but?5@
  05752	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  05759	e8 00 00 00 00	 call	 PyErr_Format
$failed$26048:
$LN4@obj2ast_ex:

; 5857 :     failed:
; 5858 :     Py_XDECREF(tmp);

  0575e	48 83 7c 24 48
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  05764	74 0a		 je	 SHORT $LN1@obj2ast_ex
  05766	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tmp$[rsp]
  0576b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@obj2ast_ex:
  05770	33 c0		 xor	 eax, eax
  05772	85 c0		 test	 eax, eax
  05774	75 e8		 jne	 SHORT $LN4@obj2ast_ex

; 5859 :     return 1;

  05776	b8 01 00 00 00	 mov	 eax, 1
$LN575@obj2ast_ex:

; 5860 : }

  0577b	48 81 c4 c8 06
	00 00		 add	 rsp, 1736		; 000006c8H
  05782	c3		 ret	 0
obj2ast_expr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@FMAHCGHB@AST?5string?5must?5be?5of?5type?5str?$AA@ ; `string'
EXTRN	PyBytes_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_string DD imagerel obj2ast_string
	DD	imagerel obj2ast_string+106
	DD	imagerel $unwind$obj2ast_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_string DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_0BP@FMAHCGHB@AST?5string?5must?5be?5of?5type?5str?$AA@
CONST	SEGMENT
??_C@_0BP@FMAHCGHB@AST?5string?5must?5be?5of?5type?5str?$AA@ DB 'AST stri'
	DB	'ng must be of type str', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_string
_TEXT	SEGMENT
obj$ = 48
out$ = 56
arena$ = 64
obj2ast_string PROC					; COMDAT

; 712  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 713  :     if (!PyUnicode_CheckExact(obj) && !PyBytes_CheckExact(obj)) {

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 2c		 je	 SHORT $LN1@obj2ast_st@2
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  0002c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  00031	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00035	74 1a		 je	 SHORT $LN1@obj2ast_st@2

; 714  :         PyErr_SetString(PyExc_TypeError, "AST string must be of type str");

  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@FMAHCGHB@AST?5string?5must?5be?5of?5type?5str?$AA@
  0003e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00045	e8 00 00 00 00	 call	 PyErr_SetString

; 715  :         return 1;

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	eb 14		 jmp	 SHORT $LN2@obj2ast_st@2
$LN1@obj2ast_st@2:

; 716  :     }
; 717  :     return obj2ast_object(obj, out, arena);

  00051	4c 8b 44 24 40	 mov	 r8, QWORD PTR arena$[rsp]
  00056	48 8b 54 24 38	 mov	 rdx, QWORD PTR out$[rsp]
  0005b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  00060	e8 00 00 00 00	 call	 obj2ast_object
$LN2@obj2ast_st@2:

; 718  : }

  00065	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00069	c3		 ret	 0
obj2ast_string ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@ENLMLMLP@AST?5bytes?5must?5be?5of?5type?5bytes?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_bytes DD imagerel obj2ast_bytes
	DD	imagerel obj2ast_bytes+88
	DD	imagerel $unwind$obj2ast_bytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_bytes DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_0CA@ENLMLMLP@AST?5bytes?5must?5be?5of?5type?5bytes?$AA@
CONST	SEGMENT
??_C@_0CA@ENLMLMLP@AST?5bytes?5must?5be?5of?5type?5bytes?$AA@ DB 'AST byt'
	DB	'es must be of type bytes', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_bytes
_TEXT	SEGMENT
obj$ = 48
out$ = 56
arena$ = 64
obj2ast_bytes PROC					; COMDAT

; 721  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 722  :     if (!PyBytes_CheckExact(obj)) {

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 1a		 je	 SHORT $LN1@obj2ast_by

; 723  :         PyErr_SetString(PyExc_TypeError, "AST bytes must be of type bytes");

  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@ENLMLMLP@AST?5bytes?5must?5be?5of?5type?5bytes?$AA@
  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00033	e8 00 00 00 00	 call	 PyErr_SetString

; 724  :         return 1;

  00038	b8 01 00 00 00	 mov	 eax, 1
  0003d	eb 14		 jmp	 SHORT $LN2@obj2ast_by
$LN1@obj2ast_by:

; 725  :     }
; 726  :     return obj2ast_object(obj, out, arena);

  0003f	4c 8b 44 24 40	 mov	 r8, QWORD PTR arena$[rsp]
  00044	48 8b 54 24 38	 mov	 rdx, QWORD PTR out$[rsp]
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0004e	e8 00 00 00 00	 call	 obj2ast_object
$LN2@obj2ast_by:

; 727  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
obj2ast_bytes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@NKGMBLMP@expected?5some?5sort?5of?5expr_conte@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_expr_context DD imagerel obj2ast_expr_context
	DD	imagerel obj2ast_expr_context+419
	DD	imagerel $unwind$obj2ast_expr_context
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_expr_context DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CP@NKGMBLMP@expected?5some?5sort?5of?5expr_conte@
CONST	SEGMENT
??_C@_0CP@NKGMBLMP@expected?5some?5sort?5of?5expr_conte@ DB 'expected som'
	DB	'e sort of expr_context, but got %R', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_expr_context
_TEXT	SEGMENT
isinstance$ = 32
obj$ = 64
out$ = 72
arena$ = 80
obj2ast_expr_context PROC				; COMDAT

; 5864 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5865 :     int isinstance;
; 5866 : 
; 5867 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Load_type);

  00013	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Load_type
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0001f	e8 00 00 00 00	 call	 PyObject_IsInstance
  00024	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 5868 :     if (isinstance == -1) {

  00028	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0002d	75 0a		 jne	 SHORT $LN12@obj2ast_ex@2

; 5869 :         return 1;

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	e9 65 01 00 00	 jmp	 $LN13@obj2ast_ex@2
$LN12@obj2ast_ex@2:

; 5870 :     }
; 5871 :     if (isinstance) {

  00039	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0003e	74 12		 je	 SHORT $LN11@obj2ast_ex@2

; 5872 :         *out = Load;

  00040	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00045	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 5873 :         return 0;

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 4c 01 00 00	 jmp	 $LN13@obj2ast_ex@2
$LN11@obj2ast_ex@2:

; 5874 :     }
; 5875 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Store_type);

  00052	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Store_type
  00059	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0005e	e8 00 00 00 00	 call	 PyObject_IsInstance
  00063	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 5876 :     if (isinstance == -1) {

  00067	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0006c	75 0a		 jne	 SHORT $LN10@obj2ast_ex@2

; 5877 :         return 1;

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	e9 26 01 00 00	 jmp	 $LN13@obj2ast_ex@2
$LN10@obj2ast_ex@2:

; 5878 :     }
; 5879 :     if (isinstance) {

  00078	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0007d	74 12		 je	 SHORT $LN9@obj2ast_ex@2

; 5880 :         *out = Store;

  0007f	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00084	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 5881 :         return 0;

  0008a	33 c0		 xor	 eax, eax
  0008c	e9 0d 01 00 00	 jmp	 $LN13@obj2ast_ex@2
$LN9@obj2ast_ex@2:

; 5882 :     }
; 5883 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Del_type);

  00091	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Del_type
  00098	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0009d	e8 00 00 00 00	 call	 PyObject_IsInstance
  000a2	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 5884 :     if (isinstance == -1) {

  000a6	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  000ab	75 0a		 jne	 SHORT $LN8@obj2ast_ex@2

; 5885 :         return 1;

  000ad	b8 01 00 00 00	 mov	 eax, 1
  000b2	e9 e7 00 00 00	 jmp	 $LN13@obj2ast_ex@2
$LN8@obj2ast_ex@2:

; 5886 :     }
; 5887 :     if (isinstance) {

  000b7	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  000bc	74 12		 je	 SHORT $LN7@obj2ast_ex@2

; 5888 :         *out = Del;

  000be	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  000c3	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 5889 :         return 0;

  000c9	33 c0		 xor	 eax, eax
  000cb	e9 ce 00 00 00	 jmp	 $LN13@obj2ast_ex@2
$LN7@obj2ast_ex@2:

; 5890 :     }
; 5891 :     isinstance = PyObject_IsInstance(obj, (PyObject *)AugLoad_type);

  000d0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR AugLoad_type
  000d7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  000dc	e8 00 00 00 00	 call	 PyObject_IsInstance
  000e1	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 5892 :     if (isinstance == -1) {

  000e5	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  000ea	75 0a		 jne	 SHORT $LN6@obj2ast_ex@2

; 5893 :         return 1;

  000ec	b8 01 00 00 00	 mov	 eax, 1
  000f1	e9 a8 00 00 00	 jmp	 $LN13@obj2ast_ex@2
$LN6@obj2ast_ex@2:

; 5894 :     }
; 5895 :     if (isinstance) {

  000f6	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  000fb	74 12		 je	 SHORT $LN5@obj2ast_ex@2

; 5896 :         *out = AugLoad;

  000fd	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00102	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 5897 :         return 0;

  00108	33 c0		 xor	 eax, eax
  0010a	e9 8f 00 00 00	 jmp	 $LN13@obj2ast_ex@2
$LN5@obj2ast_ex@2:

; 5898 :     }
; 5899 :     isinstance = PyObject_IsInstance(obj, (PyObject *)AugStore_type);

  0010f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR AugStore_type
  00116	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0011b	e8 00 00 00 00	 call	 PyObject_IsInstance
  00120	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 5900 :     if (isinstance == -1) {

  00124	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00129	75 07		 jne	 SHORT $LN4@obj2ast_ex@2

; 5901 :         return 1;

  0012b	b8 01 00 00 00	 mov	 eax, 1
  00130	eb 6c		 jmp	 SHORT $LN13@obj2ast_ex@2
$LN4@obj2ast_ex@2:

; 5902 :     }
; 5903 :     if (isinstance) {

  00132	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00137	74 0f		 je	 SHORT $LN3@obj2ast_ex@2

; 5904 :         *out = AugStore;

  00139	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  0013e	c7 00 05 00 00
	00		 mov	 DWORD PTR [rax], 5

; 5905 :         return 0;

  00144	33 c0		 xor	 eax, eax
  00146	eb 56		 jmp	 SHORT $LN13@obj2ast_ex@2
$LN3@obj2ast_ex@2:

; 5906 :     }
; 5907 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Param_type);

  00148	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Param_type
  0014f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00154	e8 00 00 00 00	 call	 PyObject_IsInstance
  00159	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 5908 :     if (isinstance == -1) {

  0015d	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00162	75 07		 jne	 SHORT $LN2@obj2ast_ex@2

; 5909 :         return 1;

  00164	b8 01 00 00 00	 mov	 eax, 1
  00169	eb 33		 jmp	 SHORT $LN13@obj2ast_ex@2
$LN2@obj2ast_ex@2:

; 5910 :     }
; 5911 :     if (isinstance) {

  0016b	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00170	74 0f		 je	 SHORT $LN1@obj2ast_ex@2

; 5912 :         *out = Param;

  00172	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00177	c7 00 06 00 00
	00		 mov	 DWORD PTR [rax], 6

; 5913 :         return 0;

  0017d	33 c0		 xor	 eax, eax
  0017f	eb 1d		 jmp	 SHORT $LN13@obj2ast_ex@2
$LN1@obj2ast_ex@2:

; 5914 :     }
; 5915 : 
; 5916 :     PyErr_Format(PyExc_TypeError, "expected some sort of expr_context, but got %R", obj);

  00181	4c 8b 44 24 40	 mov	 r8, QWORD PTR obj$[rsp]
  00186	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@NKGMBLMP@expected?5some?5sort?5of?5expr_conte@
  0018d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00194	e8 00 00 00 00	 call	 PyErr_Format

; 5917 :     return 1;

  00199	b8 01 00 00 00	 mov	 eax, 1
$LN13@obj2ast_ex@2:

; 5918 : }

  0019e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001a2	c3		 ret	 0
obj2ast_expr_context ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@OCAPFKOE@expected?5some?5sort?5of?5slice?0?5but@ ; `string'
PUBLIC	??_C@_0CK@MNFJEEPO@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CM@EIBLNBO@required?5field?5?$CCdims?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_1EC@ECPBOKBI@?$AA?$CI?$AAd?$AAi?$AAm?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd?$AAi?$AAm?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@ ; `string'
PUBLIC	??_C@_0DD@COCDNLKF@ExtSlice?5field?5?$CCdims?$CC?5must?5be?5a?5@ ; `string'
PUBLIC	??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_slice DD imagerel obj2ast_slice
	DD	imagerel obj2ast_slice+2065
	DD	imagerel $unwind$obj2ast_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_slice DD 021601H
	DD	01d0116H
xdata	ENDS
;	COMDAT ??_C@_0CI@OCAPFKOE@expected?5some?5sort?5of?5slice?0?5but@
CONST	SEGMENT
??_C@_0CI@OCAPFKOE@expected?5some?5sort?5of?5slice?0?5but@ DB 'expected s'
	DB	'ome sort of slice, but got %R', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MNFJEEPO@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CK@MNFJEEPO@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from Index', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EIBLNBO@required?5field?5?$CCdims?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CM@EIBLNBO@required?5field?5?$CCdims?$CC?5missing?5fr@ DB 'require'
	DB	'd field "dims" missing from ExtSlice', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@ECPBOKBI@?$AA?$CI?$AAd?$AAi?$AAm?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd?$AAi?$AAm?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
CONST	SEGMENT
??_C@_1EC@ECPBOKBI@?$AA?$CI?$AAd?$AAi?$AAm?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd?$AAi?$AAm?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@ DB '('
	DB	00H, 'd', 00H, 'i', 00H, 'm', 00H, 's', 00H, ')', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H, 'd'
	DB	00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'(', 00H, 'd', 00H, 'i', 00H, 'm', 00H, 's', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@COCDNLKF@ExtSlice?5field?5?$CCdims?$CC?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0DD@COCDNLKF@ExtSlice?5field?5?$CCdims?$CC?5must?5be?5a?5@ DB 'ExtS'
	DB	'lice field "dims" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
CONST	SEGMENT
??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@ DB 'obj2ast_slice', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_slice
_TEXT	SEGMENT
tmp$ = 48
isinstance$ = 56
step$27284 = 64
upper$27283 = 72
lower$27282 = 80
res$27286 = 88
_py_tmp$27296 = 96
res$27303 = 104
_py_tmp$27311 = 112
res$27318 = 120
_py_tmp$27326 = 128
dims$27337 = 136
res$27339 = 144
i$27341 = 152
len$27340 = 160
value$27353 = 168
_asdl_i$27356 = 176
_py_tmp$27363 = 184
value$27374 = 192
res$27376 = 200
_py_tmp$27384 = 208
obj$ = 240
out$ = 248
arena$ = 256
obj2ast_slice PROC					; COMDAT

; 5922 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H

; 5923 :     int isinstance;
; 5924 : 
; 5925 :     PyObject *tmp = NULL;

  00016	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 5926 : 
; 5927 :     if (obj == Py_None) {

  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00026	48 39 84 24 f0
	00 00 00	 cmp	 QWORD PTR obj$[rsp], rax
  0002e	75 16		 jne	 SHORT $LN59@obj2ast_sl

; 5928 :         *out = NULL;

  00030	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00038	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 5929 :         return 0;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 c3 07 00 00	 jmp	 $LN60@obj2ast_sl
$LN59@obj2ast_sl:

; 5930 :     }
; 5931 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Slice_type);

  00046	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Slice_type
  0004d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00055	e8 00 00 00 00	 call	 PyObject_IsInstance
  0005a	89 44 24 38	 mov	 DWORD PTR isinstance$[rsp], eax

; 5932 :     if (isinstance == -1) {

  0005e	83 7c 24 38 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00063	75 0a		 jne	 SHORT $LN58@obj2ast_sl

; 5933 :         return 1;

  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	e9 9a 07 00 00	 jmp	 $LN60@obj2ast_sl
$LN58@obj2ast_sl:

; 5934 :     }
; 5935 :     if (isinstance) {

  0006f	83 7c 24 38 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00074	0f 84 26 03 00
	00		 je	 $LN57@obj2ast_sl

; 5936 :         expr_ty lower;
; 5937 :         expr_ty upper;
; 5938 :         expr_ty step;
; 5939 : 
; 5940 :         if (_PyObject_HasAttrId(obj, &PyId_lower)) {

  0007a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lower
  0007f	8b c0		 mov	 eax, eax
  00081	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00087	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00090	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00094	48 8b d0	 mov	 rdx, rax
  00097	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0009f	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  000a4	85 c0		 test	 eax, eax
  000a6	0f 84 ba 00 00
	00		 je	 $LN56@obj2ast_sl

; 5941 :             int res;
; 5942 :             tmp = _PyObject_GetAttrId(obj, &PyId_lower);

  000ac	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lower
  000b1	8b c0		 mov	 eax, eax
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000b9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000c2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000c6	48 8b d0	 mov	 rdx, rax
  000c9	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  000d1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000d6	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 5943 :             if (tmp == NULL) goto failed;

  000db	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000e1	75 05		 jne	 SHORT $LN55@obj2ast_sl
  000e3	e9 04 07 00 00	 jmp	 $failed$27289
$LN55@obj2ast_sl:

; 5944 :             res = obj2ast_expr(tmp, &lower, arena);

  000e8	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  000f0	48 8d 54 24 50	 lea	 rdx, QWORD PTR lower$27282[rsp]
  000f5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  000fa	e8 00 00 00 00	 call	 obj2ast_expr
  000ff	89 44 24 58	 mov	 DWORD PTR res$27286[rsp], eax

; 5945 :             if (res != 0) goto failed;

  00103	83 7c 24 58 00	 cmp	 DWORD PTR res$27286[rsp], 0
  00108	74 05		 je	 SHORT $LN54@obj2ast_sl
  0010a	e9 dd 06 00 00	 jmp	 $failed$27289
$LN54@obj2ast_sl:
$LN53@obj2ast_sl:

; 5946 :             Py_CLEAR(tmp);

  0010f	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00115	74 47		 je	 SHORT $LN50@obj2ast_sl
  00117	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0011f	4c 8b 4c 24 30	 mov	 r9, QWORD PTR tmp$[rsp]
  00124	41 b8 3a 17 00
	00		 mov	 r8d, 5946		; 0000173aH
  0012a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
  00138	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013d	85 c0		 test	 eax, eax
  0013f	75 1d		 jne	 SHORT $LN50@obj2ast_sl
  00141	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00146	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$27296[rsp], rax
  0014b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00154	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$27296[rsp]
  00159	e8 00 00 00 00	 call	 _Py_DecRef
$LN50@obj2ast_sl:
  0015e	33 c0		 xor	 eax, eax
  00160	85 c0		 test	 eax, eax
  00162	75 ab		 jne	 SHORT $LN53@obj2ast_sl

; 5947 :         } else {

  00164	eb 09		 jmp	 SHORT $LN49@obj2ast_sl
$LN56@obj2ast_sl:

; 5948 :             lower = NULL;

  00166	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR lower$27282[rsp], 0
$LN49@obj2ast_sl:

; 5949 :         }
; 5950 :         if (_PyObject_HasAttrId(obj, &PyId_upper)) {

  0016f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_upper
  00174	8b c0		 mov	 eax, eax
  00176	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0017c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00185	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00189	48 8b d0	 mov	 rdx, rax
  0018c	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00194	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00199	85 c0		 test	 eax, eax
  0019b	0f 84 ba 00 00
	00		 je	 $LN48@obj2ast_sl

; 5951 :             int res;
; 5952 :             tmp = _PyObject_GetAttrId(obj, &PyId_upper);

  001a1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_upper
  001a6	8b c0		 mov	 eax, eax
  001a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001ae	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001b7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001bb	48 8b d0	 mov	 rdx, rax
  001be	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  001c6	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001cb	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 5953 :             if (tmp == NULL) goto failed;

  001d0	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001d6	75 05		 jne	 SHORT $LN47@obj2ast_sl
  001d8	e9 0f 06 00 00	 jmp	 $failed$27289
$LN47@obj2ast_sl:

; 5954 :             res = obj2ast_expr(tmp, &upper, arena);

  001dd	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  001e5	48 8d 54 24 48	 lea	 rdx, QWORD PTR upper$27283[rsp]
  001ea	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  001ef	e8 00 00 00 00	 call	 obj2ast_expr
  001f4	89 44 24 68	 mov	 DWORD PTR res$27303[rsp], eax

; 5955 :             if (res != 0) goto failed;

  001f8	83 7c 24 68 00	 cmp	 DWORD PTR res$27303[rsp], 0
  001fd	74 05		 je	 SHORT $LN46@obj2ast_sl
  001ff	e9 e8 05 00 00	 jmp	 $failed$27289
$LN46@obj2ast_sl:
$LN45@obj2ast_sl:

; 5956 :             Py_CLEAR(tmp);

  00204	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0020a	74 47		 je	 SHORT $LN42@obj2ast_sl
  0020c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00214	4c 8b 4c 24 30	 mov	 r9, QWORD PTR tmp$[rsp]
  00219	41 b8 44 17 00
	00		 mov	 r8d, 5956		; 00001744H
  0021f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00226	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
  0022d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00232	85 c0		 test	 eax, eax
  00234	75 1d		 jne	 SHORT $LN42@obj2ast_sl
  00236	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  0023b	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$27311[rsp], rax
  00240	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00249	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$27311[rsp]
  0024e	e8 00 00 00 00	 call	 _Py_DecRef
$LN42@obj2ast_sl:
  00253	33 c0		 xor	 eax, eax
  00255	85 c0		 test	 eax, eax
  00257	75 ab		 jne	 SHORT $LN45@obj2ast_sl

; 5957 :         } else {

  00259	eb 09		 jmp	 SHORT $LN41@obj2ast_sl
$LN48@obj2ast_sl:

; 5958 :             upper = NULL;

  0025b	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR upper$27283[rsp], 0
$LN41@obj2ast_sl:

; 5959 :         }
; 5960 :         if (_PyObject_HasAttrId(obj, &PyId_step)) {

  00264	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_step
  00269	8b c0		 mov	 eax, eax
  0026b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00271	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0027a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0027e	48 8b d0	 mov	 rdx, rax
  00281	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00289	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0028e	85 c0		 test	 eax, eax
  00290	0f 84 c0 00 00
	00		 je	 $LN40@obj2ast_sl

; 5961 :             int res;
; 5962 :             tmp = _PyObject_GetAttrId(obj, &PyId_step);

  00296	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_step
  0029b	8b c0		 mov	 eax, eax
  0029d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002a3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002ac	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002b0	48 8b d0	 mov	 rdx, rax
  002b3	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  002bb	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  002c0	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 5963 :             if (tmp == NULL) goto failed;

  002c5	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  002cb	75 05		 jne	 SHORT $LN39@obj2ast_sl
  002cd	e9 1a 05 00 00	 jmp	 $failed$27289
$LN39@obj2ast_sl:

; 5964 :             res = obj2ast_expr(tmp, &step, arena);

  002d2	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  002da	48 8d 54 24 40	 lea	 rdx, QWORD PTR step$27284[rsp]
  002df	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  002e4	e8 00 00 00 00	 call	 obj2ast_expr
  002e9	89 44 24 78	 mov	 DWORD PTR res$27318[rsp], eax

; 5965 :             if (res != 0) goto failed;

  002ed	83 7c 24 78 00	 cmp	 DWORD PTR res$27318[rsp], 0
  002f2	74 05		 je	 SHORT $LN38@obj2ast_sl
  002f4	e9 f3 04 00 00	 jmp	 $failed$27289
$LN38@obj2ast_sl:
$LN37@obj2ast_sl:

; 5966 :             Py_CLEAR(tmp);

  002f9	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  002ff	74 4d		 je	 SHORT $LN34@obj2ast_sl
  00301	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00309	4c 8b 4c 24 30	 mov	 r9, QWORD PTR tmp$[rsp]
  0030e	41 b8 4e 17 00
	00		 mov	 r8d, 5966		; 0000174eH
  00314	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0031b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
  00322	e8 00 00 00 00	 call	 _PyParallel_Guard
  00327	85 c0		 test	 eax, eax
  00329	75 23		 jne	 SHORT $LN34@obj2ast_sl
  0032b	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00330	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _py_tmp$27326[rsp], rax
  00338	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00341	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$27326[rsp]
  00349	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@obj2ast_sl:
  0034e	33 c0		 xor	 eax, eax
  00350	85 c0		 test	 eax, eax
  00352	75 a5		 jne	 SHORT $LN37@obj2ast_sl

; 5967 :         } else {

  00354	eb 09		 jmp	 SHORT $LN33@obj2ast_sl
$LN40@obj2ast_sl:

; 5968 :             step = NULL;

  00356	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR step$27284[rsp], 0
$LN33@obj2ast_sl:

; 5969 :         }
; 5970 :         *out = Slice(lower, upper, step, arena);

  0035f	4c 8b 8c 24 00
	01 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  00367	4c 8b 44 24 40	 mov	 r8, QWORD PTR step$27284[rsp]
  0036c	48 8b 54 24 48	 mov	 rdx, QWORD PTR upper$27283[rsp]
  00371	48 8b 4c 24 50	 mov	 rcx, QWORD PTR lower$27282[rsp]
  00376	e8 00 00 00 00	 call	 _Py_Slice
  0037b	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00383	48 89 01	 mov	 QWORD PTR [rcx], rax

; 5971 :         if (*out == NULL) goto failed;

  00386	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR out$[rsp]
  0038e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00392	75 05		 jne	 SHORT $LN32@obj2ast_sl
  00394	e9 53 04 00 00	 jmp	 $failed$27289
$LN32@obj2ast_sl:

; 5972 :         return 0;

  00399	33 c0		 xor	 eax, eax
  0039b	e9 69 04 00 00	 jmp	 $LN60@obj2ast_sl
$LN57@obj2ast_sl:

; 5973 :     }
; 5974 :     isinstance = PyObject_IsInstance(obj, (PyObject*)ExtSlice_type);

  003a0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ExtSlice_type
  003a7	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  003af	e8 00 00 00 00	 call	 PyObject_IsInstance
  003b4	89 44 24 38	 mov	 DWORD PTR isinstance$[rsp], eax

; 5975 :     if (isinstance == -1) {

  003b8	83 7c 24 38 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  003bd	75 0a		 jne	 SHORT $LN31@obj2ast_sl

; 5976 :         return 1;

  003bf	b8 01 00 00 00	 mov	 eax, 1
  003c4	e9 40 04 00 00	 jmp	 $LN60@obj2ast_sl
$LN31@obj2ast_sl:

; 5977 :     }
; 5978 :     if (isinstance) {

  003c9	83 7c 24 38 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  003ce	0f 84 80 02 00
	00		 je	 $LN30@obj2ast_sl

; 5979 :         asdl_seq* dims;
; 5980 : 
; 5981 :         if (_PyObject_HasAttrId(obj, &PyId_dims)) {

  003d4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_dims
  003d9	8b c0		 mov	 eax, eax
  003db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003e1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003ea	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003ee	48 8b d0	 mov	 rdx, rax
  003f1	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  003f9	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  003fe	85 c0		 test	 eax, eax
  00400	0f 84 f7 01 00
	00		 je	 $LN29@obj2ast_sl

; 5982 :             int res;
; 5983 :             Py_ssize_t len;
; 5984 :             Py_ssize_t i;
; 5985 :             tmp = _PyObject_GetAttrId(obj, &PyId_dims);

  00406	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_dims
  0040b	8b c0		 mov	 eax, eax
  0040d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00413	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0041c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00420	48 8b d0	 mov	 rdx, rax
  00423	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0042b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00430	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 5986 :             if (tmp == NULL) goto failed;

  00435	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0043b	75 05		 jne	 SHORT $LN28@obj2ast_sl
  0043d	e9 aa 03 00 00	 jmp	 $failed$27289
$LN28@obj2ast_sl:

; 5987 :             if (!PyList_Check(tmp)) {

  00442	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00447	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0044b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00451	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00456	85 c0		 test	 eax, eax
  00458	75 25		 jne	 SHORT $LN27@obj2ast_sl

; 5988 :                 PyErr_Format(PyExc_TypeError, "ExtSlice field \"dims\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0045a	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  0045f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00463	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00467	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@COCDNLKF@ExtSlice?5field?5?$CCdims?$CC?5must?5be?5a?5@
  0046e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00475	e8 00 00 00 00	 call	 PyErr_Format

; 5989 :                 goto failed;

  0047a	e9 6d 03 00 00	 jmp	 $failed$27289
$LN27@obj2ast_sl:

; 5990 :             }
; 5991 :             len = PyList_GET_SIZE(tmp);

  0047f	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00484	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00488	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR len$27340[rsp], rax

; 5992 :             dims = asdl_seq_new(len, arena);

  00490	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00498	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR len$27340[rsp]
  004a0	e8 00 00 00 00	 call	 asdl_seq_new
  004a5	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dims$27337[rsp], rax

; 5993 :             if (dims == NULL) goto failed;

  004ad	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR dims$27337[rsp], 0
  004b6	75 05		 jne	 SHORT $LN26@obj2ast_sl
  004b8	e9 2f 03 00 00	 jmp	 $failed$27289
$LN26@obj2ast_sl:

; 5994 :             for (i = 0; i < len; i++) {

  004bd	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$27341[rsp], 0
  004c9	eb 13		 jmp	 SHORT $LN25@obj2ast_sl
$LN24@obj2ast_sl:
  004cb	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$27341[rsp]
  004d3	48 ff c0	 inc	 rax
  004d6	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR i$27341[rsp], rax
$LN25@obj2ast_sl:
  004de	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR len$27340[rsp]
  004e6	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR i$27341[rsp], rax
  004ee	0f 8d ac 00 00
	00		 jge	 $LN23@obj2ast_sl

; 5995 :                 slice_ty value;
; 5996 :                 res = obj2ast_slice(PyList_GET_ITEM(tmp, i), &value, arena);

  004f4	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  004f9	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  004fd	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00505	48 8d 94 24 a8
	00 00 00	 lea	 rdx, QWORD PTR value$27353[rsp]
  0050d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i$27341[rsp]
  00515	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00519	e8 00 00 00 00	 call	 obj2ast_slice
  0051e	89 84 24 90 00
	00 00		 mov	 DWORD PTR res$27339[rsp], eax

; 5997 :                 if (res != 0) goto failed;

  00525	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR res$27339[rsp], 0
  0052d	74 05		 je	 SHORT $LN22@obj2ast_sl
  0052f	e9 b8 02 00 00	 jmp	 $failed$27289
$LN22@obj2ast_sl:

; 5998 :                 asdl_seq_SET(dims, i, value);

  00534	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR i$27341[rsp]
  0053b	89 84 24 b0 00
	00 00		 mov	 DWORD PTR _asdl_i$27356[rsp], eax
  00542	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR dims$27337[rsp], 0
  0054b	74 15		 je	 SHORT $LN62@obj2ast_sl
  0054d	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27356[rsp]
  00555	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dims$27337[rsp]
  0055d	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  00560	7c 1c		 jl	 SHORT $LN63@obj2ast_sl
$LN62@obj2ast_sl:
  00562	41 b8 6e 17 00
	00		 mov	 r8d, 5998		; 0000176eH
  00568	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  0056f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@ECPBOKBI@?$AA?$CI?$AAd?$AAi?$AAm?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd?$AAi?$AAm?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  00576	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0057c	33 c0		 xor	 eax, eax
$LN63@obj2ast_sl:
  0057e	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27356[rsp]
  00586	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dims$27337[rsp]
  0058e	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR value$27353[rsp]
  00596	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5999 :             }

  0059b	e9 2b ff ff ff	 jmp	 $LN24@obj2ast_sl
$LN23@obj2ast_sl:
$LN21@obj2ast_sl:

; 6000 :             Py_CLEAR(tmp);

  005a0	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  005a6	74 4d		 je	 SHORT $LN18@obj2ast_sl
  005a8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005b0	4c 8b 4c 24 30	 mov	 r9, QWORD PTR tmp$[rsp]
  005b5	41 b8 70 17 00
	00		 mov	 r8d, 6000		; 00001770H
  005bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  005c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
  005c9	e8 00 00 00 00	 call	 _PyParallel_Guard
  005ce	85 c0		 test	 eax, eax
  005d0	75 23		 jne	 SHORT $LN18@obj2ast_sl
  005d2	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  005d7	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR _py_tmp$27363[rsp], rax
  005df	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  005e8	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$27363[rsp]
  005f0	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@obj2ast_sl:
  005f5	33 c0		 xor	 eax, eax
  005f7	85 c0		 test	 eax, eax
  005f9	75 a5		 jne	 SHORT $LN21@obj2ast_sl

; 6001 :         } else {

  005fb	eb 1d		 jmp	 SHORT $LN17@obj2ast_sl
$LN29@obj2ast_sl:

; 6002 :             PyErr_SetString(PyExc_TypeError, "required field \"dims\" missing from ExtSlice");

  005fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@EIBLNBO@required?5field?5?$CCdims?$CC?5missing?5fr@
  00604	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0060b	e8 00 00 00 00	 call	 PyErr_SetString

; 6003 :             return 1;

  00610	b8 01 00 00 00	 mov	 eax, 1
  00615	e9 ef 01 00 00	 jmp	 $LN60@obj2ast_sl
$LN17@obj2ast_sl:

; 6004 :         }
; 6005 :         *out = ExtSlice(dims, arena);

  0061a	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00622	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dims$27337[rsp]
  0062a	e8 00 00 00 00	 call	 _Py_ExtSlice
  0062f	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00637	48 89 01	 mov	 QWORD PTR [rcx], rax

; 6006 :         if (*out == NULL) goto failed;

  0063a	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00642	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00646	75 05		 jne	 SHORT $LN16@obj2ast_sl
  00648	e9 9f 01 00 00	 jmp	 $failed$27289
$LN16@obj2ast_sl:

; 6007 :         return 0;

  0064d	33 c0		 xor	 eax, eax
  0064f	e9 b5 01 00 00	 jmp	 $LN60@obj2ast_sl
$LN30@obj2ast_sl:

; 6008 :     }
; 6009 :     isinstance = PyObject_IsInstance(obj, (PyObject*)Index_type);

  00654	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Index_type
  0065b	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00663	e8 00 00 00 00	 call	 PyObject_IsInstance
  00668	89 44 24 38	 mov	 DWORD PTR isinstance$[rsp], eax

; 6010 :     if (isinstance == -1) {

  0066c	83 7c 24 38 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00671	75 0a		 jne	 SHORT $LN15@obj2ast_sl

; 6011 :         return 1;

  00673	b8 01 00 00 00	 mov	 eax, 1
  00678	e9 8c 01 00 00	 jmp	 $LN60@obj2ast_sl
$LN15@obj2ast_sl:

; 6012 :     }
; 6013 :     if (isinstance) {

  0067d	83 7c 24 38 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00682	0f 84 49 01 00
	00		 je	 $LN14@obj2ast_sl

; 6014 :         expr_ty value;
; 6015 : 
; 6016 :         if (_PyObject_HasAttrId(obj, &PyId_value)) {

  00688	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  0068d	8b c0		 mov	 eax, eax
  0068f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00695	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0069e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  006a2	48 8b d0	 mov	 rdx, rax
  006a5	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  006ad	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  006b2	85 c0		 test	 eax, eax
  006b4	0f 84 c9 00 00
	00		 je	 $LN13@obj2ast_sl

; 6017 :             int res;
; 6018 :             tmp = _PyObject_GetAttrId(obj, &PyId_value);

  006ba	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  006bf	8b c0		 mov	 eax, eax
  006c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  006c7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  006d0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  006d4	48 8b d0	 mov	 rdx, rax
  006d7	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  006df	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  006e4	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 6019 :             if (tmp == NULL) goto failed;

  006e9	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  006ef	75 05		 jne	 SHORT $LN12@obj2ast_sl
  006f1	e9 f6 00 00 00	 jmp	 $failed$27289
$LN12@obj2ast_sl:

; 6020 :             res = obj2ast_expr(tmp, &value, arena);

  006f6	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  006fe	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR value$27374[rsp]
  00706	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  0070b	e8 00 00 00 00	 call	 obj2ast_expr
  00710	89 84 24 c8 00
	00 00		 mov	 DWORD PTR res$27376[rsp], eax

; 6021 :             if (res != 0) goto failed;

  00717	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR res$27376[rsp], 0
  0071f	74 05		 je	 SHORT $LN11@obj2ast_sl
  00721	e9 c6 00 00 00	 jmp	 $failed$27289
$LN11@obj2ast_sl:
$LN10@obj2ast_sl:

; 6022 :             Py_CLEAR(tmp);

  00726	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0072c	74 4d		 je	 SHORT $LN7@obj2ast_sl
  0072e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00736	4c 8b 4c 24 30	 mov	 r9, QWORD PTR tmp$[rsp]
  0073b	41 b8 86 17 00
	00		 mov	 r8d, 6022		; 00001786H
  00741	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00748	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OHAMIFBN@obj2ast_slice?$AA@
  0074f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00754	85 c0		 test	 eax, eax
  00756	75 23		 jne	 SHORT $LN7@obj2ast_sl
  00758	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  0075d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR _py_tmp$27384[rsp], rax
  00765	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0076e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$27384[rsp]
  00776	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@obj2ast_sl:
  0077b	33 c0		 xor	 eax, eax
  0077d	85 c0		 test	 eax, eax
  0077f	75 a5		 jne	 SHORT $LN10@obj2ast_sl

; 6023 :         } else {

  00781	eb 1a		 jmp	 SHORT $LN6@obj2ast_sl
$LN13@obj2ast_sl:

; 6024 :             PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from Index");

  00783	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@MNFJEEPO@required?5field?5?$CCvalue?$CC?5missing?5f@
  0078a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00791	e8 00 00 00 00	 call	 PyErr_SetString

; 6025 :             return 1;

  00796	b8 01 00 00 00	 mov	 eax, 1
  0079b	eb 6c		 jmp	 SHORT $LN60@obj2ast_sl
$LN6@obj2ast_sl:

; 6026 :         }
; 6027 :         *out = Index(value, arena);

  0079d	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  007a5	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR value$27374[rsp]
  007ad	e8 00 00 00 00	 call	 _Py_Index
  007b2	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  007ba	48 89 01	 mov	 QWORD PTR [rcx], rax

; 6028 :         if (*out == NULL) goto failed;

  007bd	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR out$[rsp]
  007c5	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  007c9	75 02		 jne	 SHORT $LN5@obj2ast_sl
  007cb	eb 1f		 jmp	 SHORT $failed$27289
$LN5@obj2ast_sl:

; 6029 :         return 0;

  007cd	33 c0		 xor	 eax, eax
  007cf	eb 38		 jmp	 SHORT $LN60@obj2ast_sl
$LN14@obj2ast_sl:

; 6030 :     }
; 6031 : 
; 6032 :     PyErr_Format(PyExc_TypeError, "expected some sort of slice, but got %R", obj);

  007d1	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR obj$[rsp]
  007d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@OCAPFKOE@expected?5some?5sort?5of?5slice?0?5but@
  007e0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  007e7	e8 00 00 00 00	 call	 PyErr_Format
$failed$27289:
$LN4@obj2ast_sl:

; 6033 :     failed:
; 6034 :     Py_XDECREF(tmp);

  007ec	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  007f2	74 0a		 je	 SHORT $LN1@obj2ast_sl
  007f4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  007f9	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@obj2ast_sl:
  007fe	33 c0		 xor	 eax, eax
  00800	85 c0		 test	 eax, eax
  00802	75 e8		 jne	 SHORT $LN4@obj2ast_sl

; 6035 :     return 1;

  00804	b8 01 00 00 00	 mov	 eax, 1
$LN60@obj2ast_sl:

; 6036 : }

  00809	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  00810	c3		 ret	 0
obj2ast_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@JBAHCNPG@expected?5some?5sort?5of?5boolop?0?5bu@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_boolop DD imagerel obj2ast_boolop
	DD	imagerel obj2ast_boolop+167
	DD	imagerel $unwind$obj2ast_boolop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_boolop DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CJ@JBAHCNPG@expected?5some?5sort?5of?5boolop?0?5bu@
CONST	SEGMENT
??_C@_0CJ@JBAHCNPG@expected?5some?5sort?5of?5boolop?0?5bu@ DB 'expected s'
	DB	'ome sort of boolop, but got %R', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_boolop
_TEXT	SEGMENT
isinstance$ = 32
obj$ = 64
out$ = 72
arena$ = 80
obj2ast_boolop PROC					; COMDAT

; 6040 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6041 :     int isinstance;
; 6042 : 
; 6043 :     isinstance = PyObject_IsInstance(obj, (PyObject *)And_type);

  00013	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR And_type
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0001f	e8 00 00 00 00	 call	 PyObject_IsInstance
  00024	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6044 :     if (isinstance == -1) {

  00028	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0002d	75 07		 jne	 SHORT $LN4@obj2ast_bo

; 6045 :         return 1;

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	eb 6c		 jmp	 SHORT $LN5@obj2ast_bo
$LN4@obj2ast_bo:

; 6046 :     }
; 6047 :     if (isinstance) {

  00036	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0003b	74 0f		 je	 SHORT $LN3@obj2ast_bo

; 6048 :         *out = And;

  0003d	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00042	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 6049 :         return 0;

  00048	33 c0		 xor	 eax, eax
  0004a	eb 56		 jmp	 SHORT $LN5@obj2ast_bo
$LN3@obj2ast_bo:

; 6050 :     }
; 6051 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Or_type);

  0004c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Or_type
  00053	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00058	e8 00 00 00 00	 call	 PyObject_IsInstance
  0005d	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6052 :     if (isinstance == -1) {

  00061	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00066	75 07		 jne	 SHORT $LN2@obj2ast_bo

; 6053 :         return 1;

  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	eb 33		 jmp	 SHORT $LN5@obj2ast_bo
$LN2@obj2ast_bo:

; 6054 :     }
; 6055 :     if (isinstance) {

  0006f	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00074	74 0f		 je	 SHORT $LN1@obj2ast_bo

; 6056 :         *out = Or;

  00076	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  0007b	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 6057 :         return 0;

  00081	33 c0		 xor	 eax, eax
  00083	eb 1d		 jmp	 SHORT $LN5@obj2ast_bo
$LN1@obj2ast_bo:

; 6058 :     }
; 6059 : 
; 6060 :     PyErr_Format(PyExc_TypeError, "expected some sort of boolop, but got %R", obj);

  00085	4c 8b 44 24 40	 mov	 r8, QWORD PTR obj$[rsp]
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@JBAHCNPG@expected?5some?5sort?5of?5boolop?0?5bu@
  00091	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00098	e8 00 00 00 00	 call	 PyErr_Format

; 6061 :     return 1;

  0009d	b8 01 00 00 00	 mov	 eax, 1
$LN5@obj2ast_bo:

; 6062 : }

  000a2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a6	c3		 ret	 0
obj2ast_boolop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@LEJHHHPD@expected?5some?5sort?5of?5operator?0?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_operator DD imagerel obj2ast_operator
	DD	imagerel obj2ast_operator+797
	DD	imagerel $unwind$obj2ast_operator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_operator DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CL@LEJHHHPD@expected?5some?5sort?5of?5operator?0?5@
CONST	SEGMENT
??_C@_0CL@LEJHHHPD@expected?5some?5sort?5of?5operator?0?5@ DB 'expected s'
	DB	'ome sort of operator, but got %R', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_operator
_TEXT	SEGMENT
isinstance$ = 32
obj$ = 64
out$ = 72
arena$ = 80
obj2ast_operator PROC					; COMDAT

; 6066 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6067 :     int isinstance;
; 6068 : 
; 6069 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Add_type);

  00013	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Add_type
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0001f	e8 00 00 00 00	 call	 PyObject_IsInstance
  00024	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6070 :     if (isinstance == -1) {

  00028	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0002d	75 0a		 jne	 SHORT $LN24@obj2ast_op

; 6071 :         return 1;

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	e9 df 02 00 00	 jmp	 $LN25@obj2ast_op
$LN24@obj2ast_op:

; 6072 :     }
; 6073 :     if (isinstance) {

  00039	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0003e	74 12		 je	 SHORT $LN23@obj2ast_op

; 6074 :         *out = Add;

  00040	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00045	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 6075 :         return 0;

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 c6 02 00 00	 jmp	 $LN25@obj2ast_op
$LN23@obj2ast_op:

; 6076 :     }
; 6077 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Sub_type);

  00052	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Sub_type
  00059	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0005e	e8 00 00 00 00	 call	 PyObject_IsInstance
  00063	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6078 :     if (isinstance == -1) {

  00067	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0006c	75 0a		 jne	 SHORT $LN22@obj2ast_op

; 6079 :         return 1;

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	e9 a0 02 00 00	 jmp	 $LN25@obj2ast_op
$LN22@obj2ast_op:

; 6080 :     }
; 6081 :     if (isinstance) {

  00078	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0007d	74 12		 je	 SHORT $LN21@obj2ast_op

; 6082 :         *out = Sub;

  0007f	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00084	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 6083 :         return 0;

  0008a	33 c0		 xor	 eax, eax
  0008c	e9 87 02 00 00	 jmp	 $LN25@obj2ast_op
$LN21@obj2ast_op:

; 6084 :     }
; 6085 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Mult_type);

  00091	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Mult_type
  00098	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0009d	e8 00 00 00 00	 call	 PyObject_IsInstance
  000a2	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6086 :     if (isinstance == -1) {

  000a6	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  000ab	75 0a		 jne	 SHORT $LN20@obj2ast_op

; 6087 :         return 1;

  000ad	b8 01 00 00 00	 mov	 eax, 1
  000b2	e9 61 02 00 00	 jmp	 $LN25@obj2ast_op
$LN20@obj2ast_op:

; 6088 :     }
; 6089 :     if (isinstance) {

  000b7	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  000bc	74 12		 je	 SHORT $LN19@obj2ast_op

; 6090 :         *out = Mult;

  000be	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  000c3	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 6091 :         return 0;

  000c9	33 c0		 xor	 eax, eax
  000cb	e9 48 02 00 00	 jmp	 $LN25@obj2ast_op
$LN19@obj2ast_op:

; 6092 :     }
; 6093 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Div_type);

  000d0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Div_type
  000d7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  000dc	e8 00 00 00 00	 call	 PyObject_IsInstance
  000e1	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6094 :     if (isinstance == -1) {

  000e5	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  000ea	75 0a		 jne	 SHORT $LN18@obj2ast_op

; 6095 :         return 1;

  000ec	b8 01 00 00 00	 mov	 eax, 1
  000f1	e9 22 02 00 00	 jmp	 $LN25@obj2ast_op
$LN18@obj2ast_op:

; 6096 :     }
; 6097 :     if (isinstance) {

  000f6	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  000fb	74 12		 je	 SHORT $LN17@obj2ast_op

; 6098 :         *out = Div;

  000fd	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00102	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 6099 :         return 0;

  00108	33 c0		 xor	 eax, eax
  0010a	e9 09 02 00 00	 jmp	 $LN25@obj2ast_op
$LN17@obj2ast_op:

; 6100 :     }
; 6101 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Mod_type);

  0010f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Mod_type
  00116	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0011b	e8 00 00 00 00	 call	 PyObject_IsInstance
  00120	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6102 :     if (isinstance == -1) {

  00124	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00129	75 0a		 jne	 SHORT $LN16@obj2ast_op

; 6103 :         return 1;

  0012b	b8 01 00 00 00	 mov	 eax, 1
  00130	e9 e3 01 00 00	 jmp	 $LN25@obj2ast_op
$LN16@obj2ast_op:

; 6104 :     }
; 6105 :     if (isinstance) {

  00135	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0013a	74 12		 je	 SHORT $LN15@obj2ast_op

; 6106 :         *out = Mod;

  0013c	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00141	c7 00 05 00 00
	00		 mov	 DWORD PTR [rax], 5

; 6107 :         return 0;

  00147	33 c0		 xor	 eax, eax
  00149	e9 ca 01 00 00	 jmp	 $LN25@obj2ast_op
$LN15@obj2ast_op:

; 6108 :     }
; 6109 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Pow_type);

  0014e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Pow_type
  00155	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0015a	e8 00 00 00 00	 call	 PyObject_IsInstance
  0015f	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6110 :     if (isinstance == -1) {

  00163	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00168	75 0a		 jne	 SHORT $LN14@obj2ast_op

; 6111 :         return 1;

  0016a	b8 01 00 00 00	 mov	 eax, 1
  0016f	e9 a4 01 00 00	 jmp	 $LN25@obj2ast_op
$LN14@obj2ast_op:

; 6112 :     }
; 6113 :     if (isinstance) {

  00174	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00179	74 12		 je	 SHORT $LN13@obj2ast_op

; 6114 :         *out = Pow;

  0017b	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00180	c7 00 06 00 00
	00		 mov	 DWORD PTR [rax], 6

; 6115 :         return 0;

  00186	33 c0		 xor	 eax, eax
  00188	e9 8b 01 00 00	 jmp	 $LN25@obj2ast_op
$LN13@obj2ast_op:

; 6116 :     }
; 6117 :     isinstance = PyObject_IsInstance(obj, (PyObject *)LShift_type);

  0018d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR LShift_type
  00194	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00199	e8 00 00 00 00	 call	 PyObject_IsInstance
  0019e	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6118 :     if (isinstance == -1) {

  001a2	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  001a7	75 0a		 jne	 SHORT $LN12@obj2ast_op

; 6119 :         return 1;

  001a9	b8 01 00 00 00	 mov	 eax, 1
  001ae	e9 65 01 00 00	 jmp	 $LN25@obj2ast_op
$LN12@obj2ast_op:

; 6120 :     }
; 6121 :     if (isinstance) {

  001b3	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  001b8	74 12		 je	 SHORT $LN11@obj2ast_op

; 6122 :         *out = LShift;

  001ba	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  001bf	c7 00 07 00 00
	00		 mov	 DWORD PTR [rax], 7

; 6123 :         return 0;

  001c5	33 c0		 xor	 eax, eax
  001c7	e9 4c 01 00 00	 jmp	 $LN25@obj2ast_op
$LN11@obj2ast_op:

; 6124 :     }
; 6125 :     isinstance = PyObject_IsInstance(obj, (PyObject *)RShift_type);

  001cc	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR RShift_type
  001d3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  001d8	e8 00 00 00 00	 call	 PyObject_IsInstance
  001dd	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6126 :     if (isinstance == -1) {

  001e1	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  001e6	75 0a		 jne	 SHORT $LN10@obj2ast_op

; 6127 :         return 1;

  001e8	b8 01 00 00 00	 mov	 eax, 1
  001ed	e9 26 01 00 00	 jmp	 $LN25@obj2ast_op
$LN10@obj2ast_op:

; 6128 :     }
; 6129 :     if (isinstance) {

  001f2	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  001f7	74 12		 je	 SHORT $LN9@obj2ast_op

; 6130 :         *out = RShift;

  001f9	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  001fe	c7 00 08 00 00
	00		 mov	 DWORD PTR [rax], 8

; 6131 :         return 0;

  00204	33 c0		 xor	 eax, eax
  00206	e9 0d 01 00 00	 jmp	 $LN25@obj2ast_op
$LN9@obj2ast_op:

; 6132 :     }
; 6133 :     isinstance = PyObject_IsInstance(obj, (PyObject *)BitOr_type);

  0020b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR BitOr_type
  00212	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00217	e8 00 00 00 00	 call	 PyObject_IsInstance
  0021c	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6134 :     if (isinstance == -1) {

  00220	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00225	75 0a		 jne	 SHORT $LN8@obj2ast_op

; 6135 :         return 1;

  00227	b8 01 00 00 00	 mov	 eax, 1
  0022c	e9 e7 00 00 00	 jmp	 $LN25@obj2ast_op
$LN8@obj2ast_op:

; 6136 :     }
; 6137 :     if (isinstance) {

  00231	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00236	74 12		 je	 SHORT $LN7@obj2ast_op

; 6138 :         *out = BitOr;

  00238	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  0023d	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 6139 :         return 0;

  00243	33 c0		 xor	 eax, eax
  00245	e9 ce 00 00 00	 jmp	 $LN25@obj2ast_op
$LN7@obj2ast_op:

; 6140 :     }
; 6141 :     isinstance = PyObject_IsInstance(obj, (PyObject *)BitXor_type);

  0024a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR BitXor_type
  00251	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00256	e8 00 00 00 00	 call	 PyObject_IsInstance
  0025b	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6142 :     if (isinstance == -1) {

  0025f	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00264	75 0a		 jne	 SHORT $LN6@obj2ast_op

; 6143 :         return 1;

  00266	b8 01 00 00 00	 mov	 eax, 1
  0026b	e9 a8 00 00 00	 jmp	 $LN25@obj2ast_op
$LN6@obj2ast_op:

; 6144 :     }
; 6145 :     if (isinstance) {

  00270	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00275	74 12		 je	 SHORT $LN5@obj2ast_op

; 6146 :         *out = BitXor;

  00277	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  0027c	c7 00 0a 00 00
	00		 mov	 DWORD PTR [rax], 10

; 6147 :         return 0;

  00282	33 c0		 xor	 eax, eax
  00284	e9 8f 00 00 00	 jmp	 $LN25@obj2ast_op
$LN5@obj2ast_op:

; 6148 :     }
; 6149 :     isinstance = PyObject_IsInstance(obj, (PyObject *)BitAnd_type);

  00289	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR BitAnd_type
  00290	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00295	e8 00 00 00 00	 call	 PyObject_IsInstance
  0029a	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6150 :     if (isinstance == -1) {

  0029e	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  002a3	75 07		 jne	 SHORT $LN4@obj2ast_op

; 6151 :         return 1;

  002a5	b8 01 00 00 00	 mov	 eax, 1
  002aa	eb 6c		 jmp	 SHORT $LN25@obj2ast_op
$LN4@obj2ast_op:

; 6152 :     }
; 6153 :     if (isinstance) {

  002ac	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  002b1	74 0f		 je	 SHORT $LN3@obj2ast_op

; 6154 :         *out = BitAnd;

  002b3	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  002b8	c7 00 0b 00 00
	00		 mov	 DWORD PTR [rax], 11

; 6155 :         return 0;

  002be	33 c0		 xor	 eax, eax
  002c0	eb 56		 jmp	 SHORT $LN25@obj2ast_op
$LN3@obj2ast_op:

; 6156 :     }
; 6157 :     isinstance = PyObject_IsInstance(obj, (PyObject *)FloorDiv_type);

  002c2	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR FloorDiv_type
  002c9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  002ce	e8 00 00 00 00	 call	 PyObject_IsInstance
  002d3	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6158 :     if (isinstance == -1) {

  002d7	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  002dc	75 07		 jne	 SHORT $LN2@obj2ast_op

; 6159 :         return 1;

  002de	b8 01 00 00 00	 mov	 eax, 1
  002e3	eb 33		 jmp	 SHORT $LN25@obj2ast_op
$LN2@obj2ast_op:

; 6160 :     }
; 6161 :     if (isinstance) {

  002e5	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  002ea	74 0f		 je	 SHORT $LN1@obj2ast_op

; 6162 :         *out = FloorDiv;

  002ec	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  002f1	c7 00 0c 00 00
	00		 mov	 DWORD PTR [rax], 12

; 6163 :         return 0;

  002f7	33 c0		 xor	 eax, eax
  002f9	eb 1d		 jmp	 SHORT $LN25@obj2ast_op
$LN1@obj2ast_op:

; 6164 :     }
; 6165 : 
; 6166 :     PyErr_Format(PyExc_TypeError, "expected some sort of operator, but got %R", obj);

  002fb	4c 8b 44 24 40	 mov	 r8, QWORD PTR obj$[rsp]
  00300	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@LEJHHHPD@expected?5some?5sort?5of?5operator?0?5@
  00307	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0030e	e8 00 00 00 00	 call	 PyErr_Format

; 6167 :     return 1;

  00313	b8 01 00 00 00	 mov	 eax, 1
$LN25@obj2ast_op:

; 6168 : }

  00318	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0031c	c3		 ret	 0
obj2ast_operator ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@DOFOGKPJ@expected?5some?5sort?5of?5unaryop?0?5b@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_unaryop DD imagerel obj2ast_unaryop
	DD	imagerel obj2ast_unaryop+293
	DD	imagerel $unwind$obj2ast_unaryop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_unaryop DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CK@DOFOGKPJ@expected?5some?5sort?5of?5unaryop?0?5b@
CONST	SEGMENT
??_C@_0CK@DOFOGKPJ@expected?5some?5sort?5of?5unaryop?0?5b@ DB 'expected s'
	DB	'ome sort of unaryop, but got %R', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_unaryop
_TEXT	SEGMENT
isinstance$ = 32
obj$ = 64
out$ = 72
arena$ = 80
obj2ast_unaryop PROC					; COMDAT

; 6172 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6173 :     int isinstance;
; 6174 : 
; 6175 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Invert_type);

  00013	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Invert_type
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0001f	e8 00 00 00 00	 call	 PyObject_IsInstance
  00024	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6176 :     if (isinstance == -1) {

  00028	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0002d	75 0a		 jne	 SHORT $LN8@obj2ast_un

; 6177 :         return 1;

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	e9 e7 00 00 00	 jmp	 $LN9@obj2ast_un
$LN8@obj2ast_un:

; 6178 :     }
; 6179 :     if (isinstance) {

  00039	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0003e	74 12		 je	 SHORT $LN7@obj2ast_un

; 6180 :         *out = Invert;

  00040	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00045	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 6181 :         return 0;

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 ce 00 00 00	 jmp	 $LN9@obj2ast_un
$LN7@obj2ast_un:

; 6182 :     }
; 6183 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Not_type);

  00052	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Not_type
  00059	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0005e	e8 00 00 00 00	 call	 PyObject_IsInstance
  00063	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6184 :     if (isinstance == -1) {

  00067	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0006c	75 0a		 jne	 SHORT $LN6@obj2ast_un

; 6185 :         return 1;

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	e9 a8 00 00 00	 jmp	 $LN9@obj2ast_un
$LN6@obj2ast_un:

; 6186 :     }
; 6187 :     if (isinstance) {

  00078	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0007d	74 12		 je	 SHORT $LN5@obj2ast_un

; 6188 :         *out = Not;

  0007f	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00084	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 6189 :         return 0;

  0008a	33 c0		 xor	 eax, eax
  0008c	e9 8f 00 00 00	 jmp	 $LN9@obj2ast_un
$LN5@obj2ast_un:

; 6190 :     }
; 6191 :     isinstance = PyObject_IsInstance(obj, (PyObject *)UAdd_type);

  00091	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR UAdd_type
  00098	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0009d	e8 00 00 00 00	 call	 PyObject_IsInstance
  000a2	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6192 :     if (isinstance == -1) {

  000a6	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  000ab	75 07		 jne	 SHORT $LN4@obj2ast_un

; 6193 :         return 1;

  000ad	b8 01 00 00 00	 mov	 eax, 1
  000b2	eb 6c		 jmp	 SHORT $LN9@obj2ast_un
$LN4@obj2ast_un:

; 6194 :     }
; 6195 :     if (isinstance) {

  000b4	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  000b9	74 0f		 je	 SHORT $LN3@obj2ast_un

; 6196 :         *out = UAdd;

  000bb	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  000c0	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 6197 :         return 0;

  000c6	33 c0		 xor	 eax, eax
  000c8	eb 56		 jmp	 SHORT $LN9@obj2ast_un
$LN3@obj2ast_un:

; 6198 :     }
; 6199 :     isinstance = PyObject_IsInstance(obj, (PyObject *)USub_type);

  000ca	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR USub_type
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  000d6	e8 00 00 00 00	 call	 PyObject_IsInstance
  000db	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6200 :     if (isinstance == -1) {

  000df	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  000e4	75 07		 jne	 SHORT $LN2@obj2ast_un

; 6201 :         return 1;

  000e6	b8 01 00 00 00	 mov	 eax, 1
  000eb	eb 33		 jmp	 SHORT $LN9@obj2ast_un
$LN2@obj2ast_un:

; 6202 :     }
; 6203 :     if (isinstance) {

  000ed	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  000f2	74 0f		 je	 SHORT $LN1@obj2ast_un

; 6204 :         *out = USub;

  000f4	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  000f9	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 6205 :         return 0;

  000ff	33 c0		 xor	 eax, eax
  00101	eb 1d		 jmp	 SHORT $LN9@obj2ast_un
$LN1@obj2ast_un:

; 6206 :     }
; 6207 : 
; 6208 :     PyErr_Format(PyExc_TypeError, "expected some sort of unaryop, but got %R", obj);

  00103	4c 8b 44 24 40	 mov	 r8, QWORD PTR obj$[rsp]
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@DOFOGKPJ@expected?5some?5sort?5of?5unaryop?0?5b@
  0010f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00116	e8 00 00 00 00	 call	 PyErr_Format

; 6209 :     return 1;

  0011b	b8 01 00 00 00	 mov	 eax, 1
$LN9@obj2ast_un:

; 6210 : }

  00120	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00124	c3		 ret	 0
obj2ast_unaryop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@NHLCAGBK@expected?5some?5sort?5of?5cmpop?0?5but@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_cmpop DD imagerel obj2ast_cmpop
	DD	imagerel obj2ast_cmpop+671
	DD	imagerel $unwind$obj2ast_cmpop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_cmpop DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CI@NHLCAGBK@expected?5some?5sort?5of?5cmpop?0?5but@
CONST	SEGMENT
??_C@_0CI@NHLCAGBK@expected?5some?5sort?5of?5cmpop?0?5but@ DB 'expected s'
	DB	'ome sort of cmpop, but got %R', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_cmpop
_TEXT	SEGMENT
isinstance$ = 32
obj$ = 64
out$ = 72
arena$ = 80
obj2ast_cmpop PROC					; COMDAT

; 6214 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6215 :     int isinstance;
; 6216 : 
; 6217 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Eq_type);

  00013	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Eq_type
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0001f	e8 00 00 00 00	 call	 PyObject_IsInstance
  00024	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6218 :     if (isinstance == -1) {

  00028	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0002d	75 0a		 jne	 SHORT $LN20@obj2ast_cm

; 6219 :         return 1;

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	e9 61 02 00 00	 jmp	 $LN21@obj2ast_cm
$LN20@obj2ast_cm:

; 6220 :     }
; 6221 :     if (isinstance) {

  00039	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0003e	74 12		 je	 SHORT $LN19@obj2ast_cm

; 6222 :         *out = Eq;

  00040	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00045	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 6223 :         return 0;

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 48 02 00 00	 jmp	 $LN21@obj2ast_cm
$LN19@obj2ast_cm:

; 6224 :     }
; 6225 :     isinstance = PyObject_IsInstance(obj, (PyObject *)NotEq_type);

  00052	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR NotEq_type
  00059	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0005e	e8 00 00 00 00	 call	 PyObject_IsInstance
  00063	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6226 :     if (isinstance == -1) {

  00067	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0006c	75 0a		 jne	 SHORT $LN18@obj2ast_cm

; 6227 :         return 1;

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	e9 22 02 00 00	 jmp	 $LN21@obj2ast_cm
$LN18@obj2ast_cm:

; 6228 :     }
; 6229 :     if (isinstance) {

  00078	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0007d	74 12		 je	 SHORT $LN17@obj2ast_cm

; 6230 :         *out = NotEq;

  0007f	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00084	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 6231 :         return 0;

  0008a	33 c0		 xor	 eax, eax
  0008c	e9 09 02 00 00	 jmp	 $LN21@obj2ast_cm
$LN17@obj2ast_cm:

; 6232 :     }
; 6233 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Lt_type);

  00091	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Lt_type
  00098	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0009d	e8 00 00 00 00	 call	 PyObject_IsInstance
  000a2	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6234 :     if (isinstance == -1) {

  000a6	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  000ab	75 0a		 jne	 SHORT $LN16@obj2ast_cm

; 6235 :         return 1;

  000ad	b8 01 00 00 00	 mov	 eax, 1
  000b2	e9 e3 01 00 00	 jmp	 $LN21@obj2ast_cm
$LN16@obj2ast_cm:

; 6236 :     }
; 6237 :     if (isinstance) {

  000b7	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  000bc	74 12		 je	 SHORT $LN15@obj2ast_cm

; 6238 :         *out = Lt;

  000be	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  000c3	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 6239 :         return 0;

  000c9	33 c0		 xor	 eax, eax
  000cb	e9 ca 01 00 00	 jmp	 $LN21@obj2ast_cm
$LN15@obj2ast_cm:

; 6240 :     }
; 6241 :     isinstance = PyObject_IsInstance(obj, (PyObject *)LtE_type);

  000d0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR LtE_type
  000d7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  000dc	e8 00 00 00 00	 call	 PyObject_IsInstance
  000e1	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6242 :     if (isinstance == -1) {

  000e5	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  000ea	75 0a		 jne	 SHORT $LN14@obj2ast_cm

; 6243 :         return 1;

  000ec	b8 01 00 00 00	 mov	 eax, 1
  000f1	e9 a4 01 00 00	 jmp	 $LN21@obj2ast_cm
$LN14@obj2ast_cm:

; 6244 :     }
; 6245 :     if (isinstance) {

  000f6	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  000fb	74 12		 je	 SHORT $LN13@obj2ast_cm

; 6246 :         *out = LtE;

  000fd	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00102	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 6247 :         return 0;

  00108	33 c0		 xor	 eax, eax
  0010a	e9 8b 01 00 00	 jmp	 $LN21@obj2ast_cm
$LN13@obj2ast_cm:

; 6248 :     }
; 6249 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Gt_type);

  0010f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Gt_type
  00116	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0011b	e8 00 00 00 00	 call	 PyObject_IsInstance
  00120	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6250 :     if (isinstance == -1) {

  00124	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00129	75 0a		 jne	 SHORT $LN12@obj2ast_cm

; 6251 :         return 1;

  0012b	b8 01 00 00 00	 mov	 eax, 1
  00130	e9 65 01 00 00	 jmp	 $LN21@obj2ast_cm
$LN12@obj2ast_cm:

; 6252 :     }
; 6253 :     if (isinstance) {

  00135	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0013a	74 12		 je	 SHORT $LN11@obj2ast_cm

; 6254 :         *out = Gt;

  0013c	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00141	c7 00 05 00 00
	00		 mov	 DWORD PTR [rax], 5

; 6255 :         return 0;

  00147	33 c0		 xor	 eax, eax
  00149	e9 4c 01 00 00	 jmp	 $LN21@obj2ast_cm
$LN11@obj2ast_cm:

; 6256 :     }
; 6257 :     isinstance = PyObject_IsInstance(obj, (PyObject *)GtE_type);

  0014e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR GtE_type
  00155	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0015a	e8 00 00 00 00	 call	 PyObject_IsInstance
  0015f	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6258 :     if (isinstance == -1) {

  00163	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00168	75 0a		 jne	 SHORT $LN10@obj2ast_cm

; 6259 :         return 1;

  0016a	b8 01 00 00 00	 mov	 eax, 1
  0016f	e9 26 01 00 00	 jmp	 $LN21@obj2ast_cm
$LN10@obj2ast_cm:

; 6260 :     }
; 6261 :     if (isinstance) {

  00174	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00179	74 12		 je	 SHORT $LN9@obj2ast_cm

; 6262 :         *out = GtE;

  0017b	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00180	c7 00 06 00 00
	00		 mov	 DWORD PTR [rax], 6

; 6263 :         return 0;

  00186	33 c0		 xor	 eax, eax
  00188	e9 0d 01 00 00	 jmp	 $LN21@obj2ast_cm
$LN9@obj2ast_cm:

; 6264 :     }
; 6265 :     isinstance = PyObject_IsInstance(obj, (PyObject *)Is_type);

  0018d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Is_type
  00194	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00199	e8 00 00 00 00	 call	 PyObject_IsInstance
  0019e	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6266 :     if (isinstance == -1) {

  001a2	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  001a7	75 0a		 jne	 SHORT $LN8@obj2ast_cm

; 6267 :         return 1;

  001a9	b8 01 00 00 00	 mov	 eax, 1
  001ae	e9 e7 00 00 00	 jmp	 $LN21@obj2ast_cm
$LN8@obj2ast_cm:

; 6268 :     }
; 6269 :     if (isinstance) {

  001b3	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  001b8	74 12		 je	 SHORT $LN7@obj2ast_cm

; 6270 :         *out = Is;

  001ba	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  001bf	c7 00 07 00 00
	00		 mov	 DWORD PTR [rax], 7

; 6271 :         return 0;

  001c5	33 c0		 xor	 eax, eax
  001c7	e9 ce 00 00 00	 jmp	 $LN21@obj2ast_cm
$LN7@obj2ast_cm:

; 6272 :     }
; 6273 :     isinstance = PyObject_IsInstance(obj, (PyObject *)IsNot_type);

  001cc	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR IsNot_type
  001d3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  001d8	e8 00 00 00 00	 call	 PyObject_IsInstance
  001dd	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6274 :     if (isinstance == -1) {

  001e1	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  001e6	75 0a		 jne	 SHORT $LN6@obj2ast_cm

; 6275 :         return 1;

  001e8	b8 01 00 00 00	 mov	 eax, 1
  001ed	e9 a8 00 00 00	 jmp	 $LN21@obj2ast_cm
$LN6@obj2ast_cm:

; 6276 :     }
; 6277 :     if (isinstance) {

  001f2	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  001f7	74 12		 je	 SHORT $LN5@obj2ast_cm

; 6278 :         *out = IsNot;

  001f9	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  001fe	c7 00 08 00 00
	00		 mov	 DWORD PTR [rax], 8

; 6279 :         return 0;

  00204	33 c0		 xor	 eax, eax
  00206	e9 8f 00 00 00	 jmp	 $LN21@obj2ast_cm
$LN5@obj2ast_cm:

; 6280 :     }
; 6281 :     isinstance = PyObject_IsInstance(obj, (PyObject *)In_type);

  0020b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR In_type
  00212	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00217	e8 00 00 00 00	 call	 PyObject_IsInstance
  0021c	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6282 :     if (isinstance == -1) {

  00220	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00225	75 07		 jne	 SHORT $LN4@obj2ast_cm

; 6283 :         return 1;

  00227	b8 01 00 00 00	 mov	 eax, 1
  0022c	eb 6c		 jmp	 SHORT $LN21@obj2ast_cm
$LN4@obj2ast_cm:

; 6284 :     }
; 6285 :     if (isinstance) {

  0022e	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00233	74 0f		 je	 SHORT $LN3@obj2ast_cm

; 6286 :         *out = In;

  00235	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  0023a	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 6287 :         return 0;

  00240	33 c0		 xor	 eax, eax
  00242	eb 56		 jmp	 SHORT $LN21@obj2ast_cm
$LN3@obj2ast_cm:

; 6288 :     }
; 6289 :     isinstance = PyObject_IsInstance(obj, (PyObject *)NotIn_type);

  00244	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR NotIn_type
  0024b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00250	e8 00 00 00 00	 call	 PyObject_IsInstance
  00255	89 44 24 20	 mov	 DWORD PTR isinstance$[rsp], eax

; 6290 :     if (isinstance == -1) {

  00259	83 7c 24 20 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  0025e	75 07		 jne	 SHORT $LN2@obj2ast_cm

; 6291 :         return 1;

  00260	b8 01 00 00 00	 mov	 eax, 1
  00265	eb 33		 jmp	 SHORT $LN21@obj2ast_cm
$LN2@obj2ast_cm:

; 6292 :     }
; 6293 :     if (isinstance) {

  00267	83 7c 24 20 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  0026c	74 0f		 je	 SHORT $LN1@obj2ast_cm

; 6294 :         *out = NotIn;

  0026e	48 8b 44 24 48	 mov	 rax, QWORD PTR out$[rsp]
  00273	c7 00 0a 00 00
	00		 mov	 DWORD PTR [rax], 10

; 6295 :         return 0;

  00279	33 c0		 xor	 eax, eax
  0027b	eb 1d		 jmp	 SHORT $LN21@obj2ast_cm
$LN1@obj2ast_cm:

; 6296 :     }
; 6297 : 
; 6298 :     PyErr_Format(PyExc_TypeError, "expected some sort of cmpop, but got %R", obj);

  0027d	4c 8b 44 24 40	 mov	 r8, QWORD PTR obj$[rsp]
  00282	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@NHLCAGBK@expected?5some?5sort?5of?5cmpop?0?5but@
  00289	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00290	e8 00 00 00 00	 call	 PyErr_Format

; 6299 :     return 1;

  00295	b8 01 00 00 00	 mov	 eax, 1
$LN21@obj2ast_cm:

; 6300 : }

  0029a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0029e	c3		 ret	 0
obj2ast_cmpop ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DA@CLHABNLI@required?5field?5?$CCifs?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_1DO@KHECFIPN@?$AA?$CI?$AAi?$AAf?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAf?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DH@HJKCOGDD@comprehension?5field?5?$CCifs?$CC?5must?5b@ ; `string'
PUBLIC	??_C@_0DB@ICLPMMIK@required?5field?5?$CCiter?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DD@IBPNPKND@required?5field?5?$CCtarget?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_comprehension DD imagerel obj2ast_comprehension
	DD	imagerel obj2ast_comprehension+1181
	DD	imagerel $unwind$obj2ast_comprehension
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_comprehension DD 021601H
	DD	0150116H
xdata	ENDS
;	COMDAT ??_C@_0DA@CLHABNLI@required?5field?5?$CCifs?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0DA@CLHABNLI@required?5field?5?$CCifs?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "ifs" missing from comprehension', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@KHECFIPN@?$AA?$CI?$AAi?$AAf?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAf?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@KHECFIPN@?$AA?$CI?$AAi?$AAf?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAf?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB '('
	DB	00H, 'i', 00H, 'f', 00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H, 'd', 00H, 'l'
	DB	00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H
	DB	'i', 00H, 'f', 00H, 's', 00H, ')', 00H, '-', 00H, '>', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HJKCOGDD@comprehension?5field?5?$CCifs?$CC?5must?5b@
CONST	SEGMENT
??_C@_0DH@HJKCOGDD@comprehension?5field?5?$CCifs?$CC?5must?5b@ DB 'compre'
	DB	'hension field "ifs" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@ICLPMMIK@required?5field?5?$CCiter?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0DB@ICLPMMIK@required?5field?5?$CCiter?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "iter" missing from comprehension', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IBPNPKND@required?5field?5?$CCtarget?$CC?5missing?5@
CONST	SEGMENT
??_C@_0DD@IBPNPKND@required?5field?5?$CCtarget?$CC?5missing?5@ DB 'requir'
	DB	'ed field "target" missing from comprehension', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@
CONST	SEGMENT
??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@ DB 'obj2ast_comprehension', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_comprehension
_TEXT	SEGMENT
iter$ = 48
ifs$ = 56
tmp$ = 64
target$ = 72
res$27531 = 80
_py_tmp$27541 = 88
res$27548 = 96
_py_tmp$27556 = 104
res$27563 = 112
i$27565 = 120
len$27564 = 128
value$27577 = 136
_asdl_i$27580 = 144
_py_tmp$27587 = 152
obj$ = 176
out$ = 184
arena$ = 192
obj2ast_comprehension PROC				; COMDAT

; 6304 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 6305 :     PyObject* tmp = NULL;

  00016	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 6306 :     expr_ty target;
; 6307 :     expr_ty iter;
; 6308 :     asdl_seq* ifs;
; 6309 : 
; 6310 :     if (_PyObject_HasAttrId(obj, &PyId_target)) {

  0001f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_target
  00024	8b c0		 mov	 eax, eax
  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0002c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00035	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00039	48 8b d0	 mov	 rdx, rax
  0003c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00044	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00049	85 c0		 test	 eax, eax
  0004b	0f 84 ba 00 00
	00		 je	 $LN33@obj2ast_co

; 6311 :         int res;
; 6312 :         tmp = _PyObject_GetAttrId(obj, &PyId_target);

  00051	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_target
  00056	8b c0		 mov	 eax, eax
  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00067	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006b	48 8b d0	 mov	 rdx, rax
  0006e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00076	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0007b	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 6313 :         if (tmp == NULL) goto failed;

  00080	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00086	75 05		 jne	 SHORT $LN32@obj2ast_co
  00088	e9 eb 03 00 00	 jmp	 $failed$27534
$LN32@obj2ast_co:

; 6314 :         res = obj2ast_expr(tmp, &target, arena);

  0008d	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00095	48 8d 54 24 48	 lea	 rdx, QWORD PTR target$[rsp]
  0009a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tmp$[rsp]
  0009f	e8 00 00 00 00	 call	 obj2ast_expr
  000a4	89 44 24 50	 mov	 DWORD PTR res$27531[rsp], eax

; 6315 :         if (res != 0) goto failed;

  000a8	83 7c 24 50 00	 cmp	 DWORD PTR res$27531[rsp], 0
  000ad	74 05		 je	 SHORT $LN31@obj2ast_co
  000af	e9 c4 03 00 00	 jmp	 $failed$27534
$LN31@obj2ast_co:
$LN30@obj2ast_co:

; 6316 :         Py_CLEAR(tmp);

  000b4	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000ba	74 47		 je	 SHORT $LN27@obj2ast_co
  000bc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c4	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tmp$[rsp]
  000c9	41 b8 ac 18 00
	00		 mov	 r8d, 6316		; 000018acH
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@
  000dd	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e2	85 c0		 test	 eax, eax
  000e4	75 1d		 jne	 SHORT $LN27@obj2ast_co
  000e6	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  000eb	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$27541[rsp], rax
  000f0	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  000f9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$27541[rsp]
  000fe	e8 00 00 00 00	 call	 _Py_DecRef
$LN27@obj2ast_co:
  00103	33 c0		 xor	 eax, eax
  00105	85 c0		 test	 eax, eax
  00107	75 ab		 jne	 SHORT $LN30@obj2ast_co

; 6317 :     } else {

  00109	eb 1d		 jmp	 SHORT $LN26@obj2ast_co
$LN33@obj2ast_co:

; 6318 :         PyErr_SetString(PyExc_TypeError, "required field \"target\" missing from comprehension");

  0010b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@IBPNPKND@required?5field?5?$CCtarget?$CC?5missing?5@
  00112	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00119	e8 00 00 00 00	 call	 PyErr_SetString

; 6319 :         return 1;

  0011e	b8 01 00 00 00	 mov	 eax, 1
  00123	e9 6d 03 00 00	 jmp	 $LN34@obj2ast_co
$LN26@obj2ast_co:

; 6320 :     }
; 6321 :     if (_PyObject_HasAttrId(obj, &PyId_iter)) {

  00128	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_iter
  0012d	8b c0		 mov	 eax, eax
  0012f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00135	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0013e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00142	48 8b d0	 mov	 rdx, rax
  00145	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0014d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00152	85 c0		 test	 eax, eax
  00154	0f 84 ba 00 00
	00		 je	 $LN25@obj2ast_co

; 6322 :         int res;
; 6323 :         tmp = _PyObject_GetAttrId(obj, &PyId_iter);

  0015a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_iter
  0015f	8b c0		 mov	 eax, eax
  00161	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00167	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00170	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00174	48 8b d0	 mov	 rdx, rax
  00177	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0017f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00184	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 6324 :         if (tmp == NULL) goto failed;

  00189	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0018f	75 05		 jne	 SHORT $LN24@obj2ast_co
  00191	e9 e2 02 00 00	 jmp	 $failed$27534
$LN24@obj2ast_co:

; 6325 :         res = obj2ast_expr(tmp, &iter, arena);

  00196	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0019e	48 8d 54 24 30	 lea	 rdx, QWORD PTR iter$[rsp]
  001a3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tmp$[rsp]
  001a8	e8 00 00 00 00	 call	 obj2ast_expr
  001ad	89 44 24 60	 mov	 DWORD PTR res$27548[rsp], eax

; 6326 :         if (res != 0) goto failed;

  001b1	83 7c 24 60 00	 cmp	 DWORD PTR res$27548[rsp], 0
  001b6	74 05		 je	 SHORT $LN23@obj2ast_co
  001b8	e9 bb 02 00 00	 jmp	 $failed$27534
$LN23@obj2ast_co:
$LN22@obj2ast_co:

; 6327 :         Py_CLEAR(tmp);

  001bd	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001c3	74 47		 je	 SHORT $LN19@obj2ast_co
  001c5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001cd	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tmp$[rsp]
  001d2	41 b8 b7 18 00
	00		 mov	 r8d, 6327		; 000018b7H
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@
  001e6	e8 00 00 00 00	 call	 _PyParallel_Guard
  001eb	85 c0		 test	 eax, eax
  001ed	75 1d		 jne	 SHORT $LN19@obj2ast_co
  001ef	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  001f4	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$27556[rsp], rax
  001f9	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00202	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$27556[rsp]
  00207	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@obj2ast_co:
  0020c	33 c0		 xor	 eax, eax
  0020e	85 c0		 test	 eax, eax
  00210	75 ab		 jne	 SHORT $LN22@obj2ast_co

; 6328 :     } else {

  00212	eb 1d		 jmp	 SHORT $LN18@obj2ast_co
$LN25@obj2ast_co:

; 6329 :         PyErr_SetString(PyExc_TypeError, "required field \"iter\" missing from comprehension");

  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@ICLPMMIK@required?5field?5?$CCiter?$CC?5missing?5fr@
  0021b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00222	e8 00 00 00 00	 call	 PyErr_SetString

; 6330 :         return 1;

  00227	b8 01 00 00 00	 mov	 eax, 1
  0022c	e9 64 02 00 00	 jmp	 $LN34@obj2ast_co
$LN18@obj2ast_co:

; 6331 :     }
; 6332 :     if (_PyObject_HasAttrId(obj, &PyId_ifs)) {

  00231	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ifs
  00236	8b c0		 mov	 eax, eax
  00238	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0023e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00247	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0024b	48 8b d0	 mov	 rdx, rax
  0024e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00256	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0025b	85 c0		 test	 eax, eax
  0025d	0f 84 d0 01 00
	00		 je	 $LN17@obj2ast_co

; 6333 :         int res;
; 6334 :         Py_ssize_t len;
; 6335 :         Py_ssize_t i;
; 6336 :         tmp = _PyObject_GetAttrId(obj, &PyId_ifs);

  00263	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_ifs
  00268	8b c0		 mov	 eax, eax
  0026a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00270	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00279	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0027d	48 8b d0	 mov	 rdx, rax
  00280	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00288	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0028d	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 6337 :         if (tmp == NULL) goto failed;

  00292	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00298	75 05		 jne	 SHORT $LN16@obj2ast_co
  0029a	e9 d9 01 00 00	 jmp	 $failed$27534
$LN16@obj2ast_co:

; 6338 :         if (!PyList_Check(tmp)) {

  0029f	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  002a4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002a8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002ae	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002b3	85 c0		 test	 eax, eax
  002b5	75 25		 jne	 SHORT $LN15@obj2ast_co

; 6339 :             PyErr_Format(PyExc_TypeError, "comprehension field \"ifs\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  002b7	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  002bc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002c0	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  002c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@HJKCOGDD@comprehension?5field?5?$CCifs?$CC?5must?5b@
  002cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  002d2	e8 00 00 00 00	 call	 PyErr_Format

; 6340 :             goto failed;

  002d7	e9 9c 01 00 00	 jmp	 $failed$27534
$LN15@obj2ast_co:

; 6341 :         }
; 6342 :         len = PyList_GET_SIZE(tmp);

  002dc	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  002e1	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  002e5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR len$27564[rsp], rax

; 6343 :         ifs = asdl_seq_new(len, arena);

  002ed	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  002f5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR len$27564[rsp]
  002fd	e8 00 00 00 00	 call	 asdl_seq_new
  00302	48 89 44 24 38	 mov	 QWORD PTR ifs$[rsp], rax

; 6344 :         if (ifs == NULL) goto failed;

  00307	48 83 7c 24 38
	00		 cmp	 QWORD PTR ifs$[rsp], 0
  0030d	75 05		 jne	 SHORT $LN14@obj2ast_co
  0030f	e9 64 01 00 00	 jmp	 $failed$27534
$LN14@obj2ast_co:

; 6345 :         for (i = 0; i < len; i++) {

  00314	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR i$27565[rsp], 0
  0031d	eb 0d		 jmp	 SHORT $LN13@obj2ast_co
$LN12@obj2ast_co:
  0031f	48 8b 44 24 78	 mov	 rax, QWORD PTR i$27565[rsp]
  00324	48 ff c0	 inc	 rax
  00327	48 89 44 24 78	 mov	 QWORD PTR i$27565[rsp], rax
$LN13@obj2ast_co:
  0032c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR len$27564[rsp]
  00334	48 39 44 24 78	 cmp	 QWORD PTR i$27565[rsp], rax
  00339	0f 8d 97 00 00
	00		 jge	 $LN11@obj2ast_co

; 6346 :             expr_ty value;
; 6347 :             res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  0033f	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  00344	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00348	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00350	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR value$27577[rsp]
  00358	48 8b 4c 24 78	 mov	 rcx, QWORD PTR i$27565[rsp]
  0035d	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00361	e8 00 00 00 00	 call	 obj2ast_expr
  00366	89 44 24 70	 mov	 DWORD PTR res$27563[rsp], eax

; 6348 :             if (res != 0) goto failed;

  0036a	83 7c 24 70 00	 cmp	 DWORD PTR res$27563[rsp], 0
  0036f	74 05		 je	 SHORT $LN10@obj2ast_co
  00371	e9 02 01 00 00	 jmp	 $failed$27534
$LN10@obj2ast_co:

; 6349 :             asdl_seq_SET(ifs, i, value);

  00376	8b 44 24 78	 mov	 eax, DWORD PTR i$27565[rsp]
  0037a	89 84 24 90 00
	00 00		 mov	 DWORD PTR _asdl_i$27580[rsp], eax
  00381	48 83 7c 24 38
	00		 cmp	 QWORD PTR ifs$[rsp], 0
  00387	74 12		 je	 SHORT $LN36@obj2ast_co
  00389	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27580[rsp]
  00391	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ifs$[rsp]
  00396	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  00399	7c 1c		 jl	 SHORT $LN37@obj2ast_co
$LN36@obj2ast_co:
  0039b	41 b8 cd 18 00
	00		 mov	 r8d, 6349		; 000018cdH
  003a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  003a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@KHECFIPN@?$AA?$CI?$AAi?$AAf?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAi?$AAf?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
  003af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003b5	33 c0		 xor	 eax, eax
$LN37@obj2ast_co:
  003b7	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27580[rsp]
  003bf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ifs$[rsp]
  003c4	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR value$27577[rsp]
  003cc	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 6350 :         }

  003d1	e9 49 ff ff ff	 jmp	 $LN12@obj2ast_co
$LN11@obj2ast_co:
$LN9@obj2ast_co:

; 6351 :         Py_CLEAR(tmp);

  003d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  003dc	74 4d		 je	 SHORT $LN6@obj2ast_co
  003de	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003e6	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tmp$[rsp]
  003eb	41 b8 cf 18 00
	00		 mov	 r8d, 6351		; 000018cfH
  003f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  003f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@EEJNPDLC@obj2ast_comprehension?$AA@
  003ff	e8 00 00 00 00	 call	 _PyParallel_Guard
  00404	85 c0		 test	 eax, eax
  00406	75 23		 jne	 SHORT $LN6@obj2ast_co
  00408	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  0040d	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR _py_tmp$27587[rsp], rax
  00415	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0041e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$27587[rsp]
  00426	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@obj2ast_co:
  0042b	33 c0		 xor	 eax, eax
  0042d	85 c0		 test	 eax, eax
  0042f	75 a5		 jne	 SHORT $LN9@obj2ast_co

; 6352 :     } else {

  00431	eb 1a		 jmp	 SHORT $LN5@obj2ast_co
$LN17@obj2ast_co:

; 6353 :         PyErr_SetString(PyExc_TypeError, "required field \"ifs\" missing from comprehension");

  00433	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@CLHABNLI@required?5field?5?$CCifs?$CC?5missing?5fro@
  0043a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00441	e8 00 00 00 00	 call	 PyErr_SetString

; 6354 :         return 1;

  00446	b8 01 00 00 00	 mov	 eax, 1
  0044b	eb 48		 jmp	 SHORT $LN34@obj2ast_co
$LN5@obj2ast_co:

; 6355 :     }
; 6356 :     *out = comprehension(target, iter, ifs, arena);

  0044d	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  00455	4c 8b 44 24 38	 mov	 r8, QWORD PTR ifs$[rsp]
  0045a	48 8b 54 24 30	 mov	 rdx, QWORD PTR iter$[rsp]
  0045f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR target$[rsp]
  00464	e8 00 00 00 00	 call	 _Py_comprehension
  00469	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00471	48 89 01	 mov	 QWORD PTR [rcx], rax

; 6357 :     return 0;

  00474	33 c0		 xor	 eax, eax
  00476	eb 1d		 jmp	 SHORT $LN34@obj2ast_co
$failed$27534:
$LN4@obj2ast_co:

; 6358 : failed:
; 6359 :     Py_XDECREF(tmp);

  00478	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0047e	74 0a		 je	 SHORT $LN1@obj2ast_co
  00480	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tmp$[rsp]
  00485	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@obj2ast_co:
  0048a	33 c0		 xor	 eax, eax
  0048c	85 c0		 test	 eax, eax
  0048e	75 e8		 jne	 SHORT $LN4@obj2ast_co

; 6360 :     return 1;

  00490	b8 01 00 00 00	 mov	 eax, 1
$LN34@obj2ast_co:

; 6361 : }

  00495	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0049c	c3		 ret	 0
obj2ast_comprehension ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DA@EMHGDKLJ@expected?5some?5sort?5of?5excepthand@ ; `string'
PUBLIC	??_C@_0DB@IGOEPGJG@required?5field?5?$CCbody?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0DI@PLBLPMFL@ExceptHandler?5field?5?$CCbody?$CC?5must?5@ ; `string'
PUBLIC	??_C@_0DH@FCLGIHBO@required?5field?5?$CCcol_offset?$CC?5miss@ ; `string'
PUBLIC	??_C@_0DD@IHPFLFKK@required?5field?5?$CClineno?$CC?5missing?5@ ; `string'
PUBLIC	??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_excepthandler DD imagerel obj2ast_excepthandler
	DD	imagerel obj2ast_excepthandler+1874
	DD	imagerel $unwind$obj2ast_excepthandler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_excepthandler DD 021601H
	DD	01b0116H
xdata	ENDS
;	COMDAT ??_C@_0DA@EMHGDKLJ@expected?5some?5sort?5of?5excepthand@
CONST	SEGMENT
??_C@_0DA@EMHGDKLJ@expected?5some?5sort?5of?5excepthand@ DB 'expected som'
	DB	'e sort of excepthandler, but got %R', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@IGOEPGJG@required?5field?5?$CCbody?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0DB@IGOEPGJG@required?5field?5?$CCbody?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "body" missing from ExceptHandler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@PLBLPMFL@ExceptHandler?5field?5?$CCbody?$CC?5must?5@
CONST	SEGMENT
??_C@_0DI@PLBLPMFL@ExceptHandler?5field?5?$CCbody?$CC?5must?5@ DB 'Except'
	DB	'Handler field "body" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@FCLGIHBO@required?5field?5?$CCcol_offset?$CC?5miss@
CONST	SEGMENT
??_C@_0DH@FCLGIHBO@required?5field?5?$CCcol_offset?$CC?5miss@ DB 'require'
	DB	'd field "col_offset" missing from excepthandler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IHPFLFKK@required?5field?5?$CClineno?$CC?5missing?5@
CONST	SEGMENT
??_C@_0DD@IHPFLFKK@required?5field?5?$CClineno?$CC?5missing?5@ DB 'requir'
	DB	'ed field "lineno" missing from excepthandler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
CONST	SEGMENT
??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@ DB 'obj2ast_excepthandler', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_excepthandler
_TEXT	SEGMENT
lineno$ = 48
tmp$ = 56
col_offset$ = 64
isinstance$ = 68
res$27613 = 72
_py_tmp$27623 = 80
res$27630 = 88
_py_tmp$27638 = 96
type$27647 = 104
name$27648 = 112
body$27649 = 120
res$27651 = 128
_py_tmp$27659 = 136
res$27666 = 144
_py_tmp$27674 = 152
res$27681 = 160
i$27683 = 168
len$27682 = 176
value$27695 = 184
_asdl_i$27698 = 192
_py_tmp$27704 = 200
obj$ = 224
out$ = 232
arena$ = 240
obj2ast_excepthandler PROC				; COMDAT

; 6365 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 6366 :     int isinstance;
; 6367 : 
; 6368 :     PyObject *tmp = NULL;

  00016	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 6369 :     int lineno;
; 6370 :     int col_offset;
; 6371 : 
; 6372 :     if (obj == Py_None) {

  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00026	48 39 84 24 e0
	00 00 00	 cmp	 QWORD PTR obj$[rsp], rax
  0002e	75 16		 jne	 SHORT $LN53@obj2ast_ex@3

; 6373 :         *out = NULL;

  00030	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00038	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 6374 :         return 0;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 04 07 00 00	 jmp	 $LN54@obj2ast_ex@3
$LN53@obj2ast_ex@3:

; 6375 :     }
; 6376 :     if (_PyObject_HasAttrId(obj, &PyId_lineno)) {

  00046	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lineno
  0004b	8b c0		 mov	 eax, eax
  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00053	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0005c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00060	48 8b d0	 mov	 rdx, rax
  00063	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0006b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00070	85 c0		 test	 eax, eax
  00072	0f 84 ba 00 00
	00		 je	 $LN52@obj2ast_ex@3

; 6377 :         int res;
; 6378 :         tmp = _PyObject_GetAttrId(obj, &PyId_lineno);

  00078	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lineno
  0007d	8b c0		 mov	 eax, eax
  0007f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00085	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0008e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00092	48 8b d0	 mov	 rdx, rax
  00095	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0009d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000a2	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 6379 :         if (tmp == NULL) goto failed;

  000a7	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000ad	75 05		 jne	 SHORT $LN51@obj2ast_ex@3
  000af	e9 79 06 00 00	 jmp	 $failed$27616
$LN51@obj2ast_ex@3:

; 6380 :         res = obj2ast_int(tmp, &lineno, arena);

  000b4	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  000bc	48 8d 54 24 30	 lea	 rdx, QWORD PTR lineno$[rsp]
  000c1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  000c6	e8 00 00 00 00	 call	 obj2ast_int
  000cb	89 44 24 48	 mov	 DWORD PTR res$27613[rsp], eax

; 6381 :         if (res != 0) goto failed;

  000cf	83 7c 24 48 00	 cmp	 DWORD PTR res$27613[rsp], 0
  000d4	74 05		 je	 SHORT $LN50@obj2ast_ex@3
  000d6	e9 52 06 00 00	 jmp	 $failed$27616
$LN50@obj2ast_ex@3:
$LN49@obj2ast_ex@3:

; 6382 :         Py_CLEAR(tmp);

  000db	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000e1	74 47		 je	 SHORT $LN46@obj2ast_ex@3
  000e3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000eb	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp$[rsp]
  000f0	41 b8 ee 18 00
	00		 mov	 r8d, 6382		; 000018eeH
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
  00104	e8 00 00 00 00	 call	 _PyParallel_Guard
  00109	85 c0		 test	 eax, eax
  0010b	75 1d		 jne	 SHORT $LN46@obj2ast_ex@3
  0010d	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  00112	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$27623[rsp], rax
  00117	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00120	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$27623[rsp]
  00125	e8 00 00 00 00	 call	 _Py_DecRef
$LN46@obj2ast_ex@3:
  0012a	33 c0		 xor	 eax, eax
  0012c	85 c0		 test	 eax, eax
  0012e	75 ab		 jne	 SHORT $LN49@obj2ast_ex@3

; 6383 :     } else {

  00130	eb 1d		 jmp	 SHORT $LN45@obj2ast_ex@3
$LN52@obj2ast_ex@3:

; 6384 :         PyErr_SetString(PyExc_TypeError, "required field \"lineno\" missing from excepthandler");

  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@IHPFLFKK@required?5field?5?$CClineno?$CC?5missing?5@
  00139	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00140	e8 00 00 00 00	 call	 PyErr_SetString

; 6385 :         return 1;

  00145	b8 01 00 00 00	 mov	 eax, 1
  0014a	e9 fb 05 00 00	 jmp	 $LN54@obj2ast_ex@3
$LN45@obj2ast_ex@3:

; 6386 :     }
; 6387 :     if (_PyObject_HasAttrId(obj, &PyId_col_offset)) {

  0014f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_col_offset
  00154	8b c0		 mov	 eax, eax
  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0015c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00165	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00169	48 8b d0	 mov	 rdx, rax
  0016c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00174	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00179	85 c0		 test	 eax, eax
  0017b	0f 84 ba 00 00
	00		 je	 $LN44@obj2ast_ex@3

; 6388 :         int res;
; 6389 :         tmp = _PyObject_GetAttrId(obj, &PyId_col_offset);

  00181	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_col_offset
  00186	8b c0		 mov	 eax, eax
  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0018e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00197	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0019b	48 8b d0	 mov	 rdx, rax
  0019e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  001a6	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001ab	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 6390 :         if (tmp == NULL) goto failed;

  001b0	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001b6	75 05		 jne	 SHORT $LN43@obj2ast_ex@3
  001b8	e9 70 05 00 00	 jmp	 $failed$27616
$LN43@obj2ast_ex@3:

; 6391 :         res = obj2ast_int(tmp, &col_offset, arena);

  001bd	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  001c5	48 8d 54 24 40	 lea	 rdx, QWORD PTR col_offset$[rsp]
  001ca	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  001cf	e8 00 00 00 00	 call	 obj2ast_int
  001d4	89 44 24 58	 mov	 DWORD PTR res$27630[rsp], eax

; 6392 :         if (res != 0) goto failed;

  001d8	83 7c 24 58 00	 cmp	 DWORD PTR res$27630[rsp], 0
  001dd	74 05		 je	 SHORT $LN42@obj2ast_ex@3
  001df	e9 49 05 00 00	 jmp	 $failed$27616
$LN42@obj2ast_ex@3:
$LN41@obj2ast_ex@3:

; 6393 :         Py_CLEAR(tmp);

  001e4	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001ea	74 47		 je	 SHORT $LN38@obj2ast_ex@3
  001ec	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001f4	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp$[rsp]
  001f9	41 b8 f9 18 00
	00		 mov	 r8d, 6393		; 000018f9H
  001ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00206	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
  0020d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00212	85 c0		 test	 eax, eax
  00214	75 1d		 jne	 SHORT $LN38@obj2ast_ex@3
  00216	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  0021b	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$27638[rsp], rax
  00220	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00229	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$27638[rsp]
  0022e	e8 00 00 00 00	 call	 _Py_DecRef
$LN38@obj2ast_ex@3:
  00233	33 c0		 xor	 eax, eax
  00235	85 c0		 test	 eax, eax
  00237	75 ab		 jne	 SHORT $LN41@obj2ast_ex@3

; 6394 :     } else {

  00239	eb 1d		 jmp	 SHORT $LN37@obj2ast_ex@3
$LN44@obj2ast_ex@3:

; 6395 :         PyErr_SetString(PyExc_TypeError, "required field \"col_offset\" missing from excepthandler");

  0023b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@FCLGIHBO@required?5field?5?$CCcol_offset?$CC?5miss@
  00242	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00249	e8 00 00 00 00	 call	 PyErr_SetString

; 6396 :         return 1;

  0024e	b8 01 00 00 00	 mov	 eax, 1
  00253	e9 f2 04 00 00	 jmp	 $LN54@obj2ast_ex@3
$LN37@obj2ast_ex@3:

; 6397 :     }
; 6398 :     isinstance = PyObject_IsInstance(obj, (PyObject*)ExceptHandler_type);

  00258	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ExceptHandler_type
  0025f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00267	e8 00 00 00 00	 call	 PyObject_IsInstance
  0026c	89 44 24 44	 mov	 DWORD PTR isinstance$[rsp], eax

; 6399 :     if (isinstance == -1) {

  00270	83 7c 24 44 ff	 cmp	 DWORD PTR isinstance$[rsp], -1
  00275	75 0a		 jne	 SHORT $LN36@obj2ast_ex@3

; 6400 :         return 1;

  00277	b8 01 00 00 00	 mov	 eax, 1
  0027c	e9 c9 04 00 00	 jmp	 $LN54@obj2ast_ex@3
$LN36@obj2ast_ex@3:

; 6401 :     }
; 6402 :     if (isinstance) {

  00281	83 7c 24 44 00	 cmp	 DWORD PTR isinstance$[rsp], 0
  00286	0f 84 86 04 00
	00		 je	 $LN35@obj2ast_ex@3

; 6403 :         expr_ty type;
; 6404 :         identifier name;
; 6405 :         asdl_seq* body;
; 6406 : 
; 6407 :         if (_PyObject_HasAttrId(obj, &PyId_type)) {

  0028c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_type
  00291	8b c0		 mov	 eax, eax
  00293	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00299	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002a2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002a6	48 8b d0	 mov	 rdx, rax
  002a9	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  002b1	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  002b6	85 c0		 test	 eax, eax
  002b8	0f 84 c6 00 00
	00		 je	 $LN34@obj2ast_ex@3

; 6408 :             int res;
; 6409 :             tmp = _PyObject_GetAttrId(obj, &PyId_type);

  002be	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_type
  002c3	8b c0		 mov	 eax, eax
  002c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002cb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002d4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002d8	48 8b d0	 mov	 rdx, rax
  002db	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  002e3	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  002e8	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 6410 :             if (tmp == NULL) goto failed;

  002ed	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  002f3	75 05		 jne	 SHORT $LN33@obj2ast_ex@3
  002f5	e9 33 04 00 00	 jmp	 $failed$27616
$LN33@obj2ast_ex@3:

; 6411 :             res = obj2ast_expr(tmp, &type, arena);

  002fa	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00302	48 8d 54 24 68	 lea	 rdx, QWORD PTR type$27647[rsp]
  00307	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  0030c	e8 00 00 00 00	 call	 obj2ast_expr
  00311	89 84 24 80 00
	00 00		 mov	 DWORD PTR res$27651[rsp], eax

; 6412 :             if (res != 0) goto failed;

  00318	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR res$27651[rsp], 0
  00320	74 05		 je	 SHORT $LN32@obj2ast_ex@3
  00322	e9 06 04 00 00	 jmp	 $failed$27616
$LN32@obj2ast_ex@3:
$LN31@obj2ast_ex@3:

; 6413 :             Py_CLEAR(tmp);

  00327	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0032d	74 4d		 je	 SHORT $LN28@obj2ast_ex@3
  0032f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00337	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp$[rsp]
  0033c	41 b8 0d 19 00
	00		 mov	 r8d, 6413		; 0000190dH
  00342	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00349	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
  00350	e8 00 00 00 00	 call	 _PyParallel_Guard
  00355	85 c0		 test	 eax, eax
  00357	75 23		 jne	 SHORT $LN28@obj2ast_ex@3
  00359	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  0035e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _py_tmp$27659[rsp], rax
  00366	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0036f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$27659[rsp]
  00377	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@obj2ast_ex@3:
  0037c	33 c0		 xor	 eax, eax
  0037e	85 c0		 test	 eax, eax
  00380	75 a5		 jne	 SHORT $LN31@obj2ast_ex@3

; 6414 :         } else {

  00382	eb 09		 jmp	 SHORT $LN27@obj2ast_ex@3
$LN34@obj2ast_ex@3:

; 6415 :             type = NULL;

  00384	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR type$27647[rsp], 0
$LN27@obj2ast_ex@3:

; 6416 :         }
; 6417 :         if (_PyObject_HasAttrId(obj, &PyId_name)) {

  0038d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  00392	8b c0		 mov	 eax, eax
  00394	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0039a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003a3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003a7	48 8b d0	 mov	 rdx, rax
  003aa	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  003b2	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  003b7	85 c0		 test	 eax, eax
  003b9	0f 84 c6 00 00
	00		 je	 $LN26@obj2ast_ex@3

; 6418 :             int res;
; 6419 :             tmp = _PyObject_GetAttrId(obj, &PyId_name);

  003bf	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  003c4	8b c0		 mov	 eax, eax
  003c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003cc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003d5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003d9	48 8b d0	 mov	 rdx, rax
  003dc	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  003e4	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  003e9	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 6420 :             if (tmp == NULL) goto failed;

  003ee	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  003f4	75 05		 jne	 SHORT $LN25@obj2ast_ex@3
  003f6	e9 32 03 00 00	 jmp	 $failed$27616
$LN25@obj2ast_ex@3:

; 6421 :             res = obj2ast_identifier(tmp, &name, arena);

  003fb	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00403	48 8d 54 24 70	 lea	 rdx, QWORD PTR name$27648[rsp]
  00408	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  0040d	e8 00 00 00 00	 call	 obj2ast_identifier
  00412	89 84 24 90 00
	00 00		 mov	 DWORD PTR res$27666[rsp], eax

; 6422 :             if (res != 0) goto failed;

  00419	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR res$27666[rsp], 0
  00421	74 05		 je	 SHORT $LN24@obj2ast_ex@3
  00423	e9 05 03 00 00	 jmp	 $failed$27616
$LN24@obj2ast_ex@3:
$LN23@obj2ast_ex@3:

; 6423 :             Py_CLEAR(tmp);

  00428	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0042e	74 4d		 je	 SHORT $LN20@obj2ast_ex@3
  00430	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00438	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp$[rsp]
  0043d	41 b8 17 19 00
	00		 mov	 r8d, 6423		; 00001917H
  00443	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0044a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
  00451	e8 00 00 00 00	 call	 _PyParallel_Guard
  00456	85 c0		 test	 eax, eax
  00458	75 23		 jne	 SHORT $LN20@obj2ast_ex@3
  0045a	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  0045f	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR _py_tmp$27674[rsp], rax
  00467	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00470	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$27674[rsp]
  00478	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@obj2ast_ex@3:
  0047d	33 c0		 xor	 eax, eax
  0047f	85 c0		 test	 eax, eax
  00481	75 a5		 jne	 SHORT $LN23@obj2ast_ex@3

; 6424 :         } else {

  00483	eb 09		 jmp	 SHORT $LN19@obj2ast_ex@3
$LN26@obj2ast_ex@3:

; 6425 :             name = NULL;

  00485	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR name$27648[rsp], 0
$LN19@obj2ast_ex@3:

; 6426 :         }
; 6427 :         if (_PyObject_HasAttrId(obj, &PyId_body)) {

  0048e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  00493	8b c0		 mov	 eax, eax
  00495	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0049b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  004a4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  004a8	48 8b d0	 mov	 rdx, rax
  004ab	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  004b3	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  004b8	85 c0		 test	 eax, eax
  004ba	0f 84 e8 01 00
	00		 je	 $LN18@obj2ast_ex@3

; 6428 :             int res;
; 6429 :             Py_ssize_t len;
; 6430 :             Py_ssize_t i;
; 6431 :             tmp = _PyObject_GetAttrId(obj, &PyId_body);

  004c0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_body
  004c5	8b c0		 mov	 eax, eax
  004c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  004cd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  004d6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  004da	48 8b d0	 mov	 rdx, rax
  004dd	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  004e5	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  004ea	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 6432 :             if (tmp == NULL) goto failed;

  004ef	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  004f5	75 05		 jne	 SHORT $LN17@obj2ast_ex@3
  004f7	e9 31 02 00 00	 jmp	 $failed$27616
$LN17@obj2ast_ex@3:

; 6433 :             if (!PyList_Check(tmp)) {

  004fc	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  00501	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00505	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0050b	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00510	85 c0		 test	 eax, eax
  00512	75 25		 jne	 SHORT $LN16@obj2ast_ex@3

; 6434 :                 PyErr_Format(PyExc_TypeError, "ExceptHandler field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00514	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  00519	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0051d	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00521	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@PLBLPMFL@ExceptHandler?5field?5?$CCbody?$CC?5must?5@
  00528	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0052f	e8 00 00 00 00	 call	 PyErr_Format

; 6435 :                 goto failed;

  00534	e9 f4 01 00 00	 jmp	 $failed$27616
$LN16@obj2ast_ex@3:

; 6436 :             }
; 6437 :             len = PyList_GET_SIZE(tmp);

  00539	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  0053e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00542	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$27682[rsp], rax

; 6438 :             body = asdl_seq_new(len, arena);

  0054a	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00552	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$27682[rsp]
  0055a	e8 00 00 00 00	 call	 asdl_seq_new
  0055f	48 89 44 24 78	 mov	 QWORD PTR body$27649[rsp], rax

; 6439 :             if (body == NULL) goto failed;

  00564	48 83 7c 24 78
	00		 cmp	 QWORD PTR body$27649[rsp], 0
  0056a	75 05		 jne	 SHORT $LN15@obj2ast_ex@3
  0056c	e9 bc 01 00 00	 jmp	 $failed$27616
$LN15@obj2ast_ex@3:

; 6440 :             for (i = 0; i < len; i++) {

  00571	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$27683[rsp], 0
  0057d	eb 13		 jmp	 SHORT $LN14@obj2ast_ex@3
$LN13@obj2ast_ex@3:
  0057f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR i$27683[rsp]
  00587	48 ff c0	 inc	 rax
  0058a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR i$27683[rsp], rax
$LN14@obj2ast_ex@3:
  00592	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$27682[rsp]
  0059a	48 39 84 24 a8
	00 00 00	 cmp	 QWORD PTR i$27683[rsp], rax
  005a2	0f 8d a3 00 00
	00		 jge	 $LN12@obj2ast_ex@3

; 6441 :                 stmt_ty value;
; 6442 :                 res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);

  005a8	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  005ad	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  005b1	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  005b9	48 8d 94 24 b8
	00 00 00	 lea	 rdx, QWORD PTR value$27695[rsp]
  005c1	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR i$27683[rsp]
  005c9	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  005cd	e8 00 00 00 00	 call	 obj2ast_stmt
  005d2	89 84 24 a0 00
	00 00		 mov	 DWORD PTR res$27681[rsp], eax

; 6443 :                 if (res != 0) goto failed;

  005d9	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR res$27681[rsp], 0
  005e1	74 05		 je	 SHORT $LN11@obj2ast_ex@3
  005e3	e9 45 01 00 00	 jmp	 $failed$27616
$LN11@obj2ast_ex@3:

; 6444 :                 asdl_seq_SET(body, i, value);

  005e8	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR i$27683[rsp]
  005ef	89 84 24 c0 00
	00 00		 mov	 DWORD PTR _asdl_i$27698[rsp], eax
  005f6	48 83 7c 24 78
	00		 cmp	 QWORD PTR body$27649[rsp], 0
  005fc	74 12		 je	 SHORT $LN56@obj2ast_ex@3
  005fe	48 63 84 24 c0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27698[rsp]
  00606	48 8b 4c 24 78	 mov	 rcx, QWORD PTR body$27649[rsp]
  0060b	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  0060e	7c 1c		 jl	 SHORT $LN57@obj2ast_ex@3
$LN56@obj2ast_ex@3:
  00610	41 b8 2c 19 00
	00		 mov	 r8d, 6444		; 0000192cH
  00616	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  0061d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@HIDNOKCC@?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAb?$AAo?$AAd?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  00624	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0062a	33 c0		 xor	 eax, eax
$LN57@obj2ast_ex@3:
  0062c	48 63 84 24 c0
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27698[rsp]
  00634	48 8b 4c 24 78	 mov	 rcx, QWORD PTR body$27649[rsp]
  00639	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR value$27695[rsp]
  00641	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 6445 :             }

  00646	e9 34 ff ff ff	 jmp	 $LN13@obj2ast_ex@3
$LN12@obj2ast_ex@3:
$LN10@obj2ast_ex@3:

; 6446 :             Py_CLEAR(tmp);

  0064b	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00651	74 4d		 je	 SHORT $LN7@obj2ast_ex@3
  00653	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0065b	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp$[rsp]
  00660	41 b8 2e 19 00
	00		 mov	 r8d, 6446		; 0000192eH
  00666	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0066d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GEEGCCG@obj2ast_excepthandler?$AA@
  00674	e8 00 00 00 00	 call	 _PyParallel_Guard
  00679	85 c0		 test	 eax, eax
  0067b	75 23		 jne	 SHORT $LN7@obj2ast_ex@3
  0067d	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  00682	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR _py_tmp$27704[rsp], rax
  0068a	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00693	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$27704[rsp]
  0069b	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@obj2ast_ex@3:
  006a0	33 c0		 xor	 eax, eax
  006a2	85 c0		 test	 eax, eax
  006a4	75 a5		 jne	 SHORT $LN10@obj2ast_ex@3

; 6447 :         } else {

  006a6	eb 1d		 jmp	 SHORT $LN6@obj2ast_ex@3
$LN18@obj2ast_ex@3:

; 6448 :             PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from ExceptHandler");

  006a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@IGOEPGJG@required?5field?5?$CCbody?$CC?5missing?5fr@
  006af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  006b6	e8 00 00 00 00	 call	 PyErr_SetString

; 6449 :             return 1;

  006bb	b8 01 00 00 00	 mov	 eax, 1
  006c0	e9 85 00 00 00	 jmp	 $LN54@obj2ast_ex@3
$LN6@obj2ast_ex@3:

; 6450 :         }
; 6451 :         *out = ExceptHandler(type, name, body, lineno, col_offset, arena);

  006c5	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  006cd	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  006d2	8b 44 24 40	 mov	 eax, DWORD PTR col_offset$[rsp]
  006d6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  006da	44 8b 4c 24 30	 mov	 r9d, DWORD PTR lineno$[rsp]
  006df	4c 8b 44 24 78	 mov	 r8, QWORD PTR body$27649[rsp]
  006e4	48 8b 54 24 70	 mov	 rdx, QWORD PTR name$27648[rsp]
  006e9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR type$27647[rsp]
  006ee	e8 00 00 00 00	 call	 _Py_ExceptHandler
  006f3	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  006fb	48 89 01	 mov	 QWORD PTR [rcx], rax

; 6452 :         if (*out == NULL) goto failed;

  006fe	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00706	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0070a	75 02		 jne	 SHORT $LN5@obj2ast_ex@3
  0070c	eb 1f		 jmp	 SHORT $failed$27616
$LN5@obj2ast_ex@3:

; 6453 :         return 0;

  0070e	33 c0		 xor	 eax, eax
  00710	eb 38		 jmp	 SHORT $LN54@obj2ast_ex@3
$LN35@obj2ast_ex@3:

; 6454 :     }
; 6455 : 
; 6456 :     PyErr_Format(PyExc_TypeError, "expected some sort of excepthandler, but got %R", obj);

  00712	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR obj$[rsp]
  0071a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@EMHGDKLJ@expected?5some?5sort?5of?5excepthand@
  00721	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00728	e8 00 00 00 00	 call	 PyErr_Format
$failed$27616:
$LN4@obj2ast_ex@3:

; 6457 :     failed:
; 6458 :     Py_XDECREF(tmp);

  0072d	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00733	74 0a		 je	 SHORT $LN1@obj2ast_ex@3
  00735	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  0073a	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@obj2ast_ex@3:
  0073f	33 c0		 xor	 eax, eax
  00741	85 c0		 test	 eax, eax
  00743	75 e8		 jne	 SHORT $LN4@obj2ast_ex@3

; 6459 :     return 1;

  00745	b8 01 00 00 00	 mov	 eax, 1
$LN54@obj2ast_ex@3:

; 6460 : }

  0074a	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00751	c3		 ret	 0
obj2ast_excepthandler ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@GCEJPHGL@required?5field?5?$CCkw_defaults?$CC?5mis@ ; `string'
PUBLIC	??_C@_1FO@JNNJHDDE@?$AA?$CI?$AAk?$AAw?$AA_?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAw?$AA_?$AAd@ ; `string'
PUBLIC	??_C@_0DL@IAKMBFAB@arguments?5field?5?$CCkw_defaults?$CC?5mu@ ; `string'
PUBLIC	??_C@_0DB@MPBJNEFN@required?5field?5?$CCdefaults?$CC?5missin@ ; `string'
PUBLIC	??_C@_1FC@BKBCFNNC@?$AA?$CI?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt@ ; `string'
PUBLIC	??_C@_0DI@DFMGFEGL@arguments?5field?5?$CCdefaults?$CC?5must?5@ ; `string'
PUBLIC	??_C@_0DD@BHLCGNME@required?5field?5?$CCkwonlyargs?$CC?5miss@ ; `string'
PUBLIC	??_C@_1FK@KCMNHAJA@?$AA?$CI?$AAk?$AAw?$AAo?$AAn?$AAl?$AAy?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAw?$AAo?$AAn?$AAl@ ; `string'
PUBLIC	??_C@_0DK@DLAPFEKE@arguments?5field?5?$CCkwonlyargs?$CC?5mus@ ; `string'
PUBLIC	??_C@_0CN@KNCHMPGN@required?5field?5?$CCargs?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@	; `string'
PUBLIC	??_C@_0DE@BACKFDNE@arguments?5field?5?$CCargs?$CC?5must?5be?5a@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_arguments DD imagerel obj2ast_arguments
	DD	imagerel obj2ast_arguments+3502
	DD	imagerel $unwind$obj2ast_arguments
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_arguments DD 021601H
	DD	0350116H
xdata	ENDS
;	COMDAT ??_C@_0DE@GCEJPHGL@required?5field?5?$CCkw_defaults?$CC?5mis@
CONST	SEGMENT
??_C@_0DE@GCEJPHGL@required?5field?5?$CCkw_defaults?$CC?5mis@ DB 'require'
	DB	'd field "kw_defaults" missing from arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@JNNJHDDE@?$AA?$CI?$AAk?$AAw?$AA_?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAw?$AA_?$AAd@
CONST	SEGMENT
??_C@_1FO@JNNJHDDE@?$AA?$CI?$AAk?$AAw?$AA_?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAw?$AA_?$AAd@ DB '('
	DB	00H, 'k', 00H, 'w', 00H, '_', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'a', 00H, 'u', 00H, 'l', 00H, 't', 00H, 's', 00H, ')', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H
	DB	'd', 00H, 'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, '(', 00H, 'k', 00H, 'w', 00H, '_', 00H, 'd', 00H, 'e', 00H
	DB	'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H, 't', 00H, 's', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@IAKMBFAB@arguments?5field?5?$CCkw_defaults?$CC?5mu@
CONST	SEGMENT
??_C@_0DL@IAKMBFAB@arguments?5field?5?$CCkw_defaults?$CC?5mu@ DB 'argumen'
	DB	'ts field "kw_defaults" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MPBJNEFN@required?5field?5?$CCdefaults?$CC?5missin@
CONST	SEGMENT
??_C@_0DB@MPBJNEFN@required?5field?5?$CCdefaults?$CC?5missin@ DB 'require'
	DB	'd field "defaults" missing from arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@BKBCFNNC@?$AA?$CI?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt@
CONST	SEGMENT
??_C@_1FC@BKBCFNNC@?$AA?$CI?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt@ DB '('
	DB	00H, 'd', 00H, 'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, '_', 00H, 'a', 00H, 's', 00H, 'd', 00H, 'l', 00H, '_', 00H
	DB	'i', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 'd', 00H, 'e'
	DB	00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H, 't', 00H, 's', 00H
	DB	')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@DFMGFEGL@arguments?5field?5?$CCdefaults?$CC?5must?5@
CONST	SEGMENT
??_C@_0DI@DFMGFEGL@arguments?5field?5?$CCdefaults?$CC?5must?5@ DB 'argume'
	DB	'nts field "defaults" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@BHLCGNME@required?5field?5?$CCkwonlyargs?$CC?5miss@
CONST	SEGMENT
??_C@_0DD@BHLCGNME@required?5field?5?$CCkwonlyargs?$CC?5miss@ DB 'require'
	DB	'd field "kwonlyargs" missing from arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@KCMNHAJA@?$AA?$CI?$AAk?$AAw?$AAo?$AAn?$AAl?$AAy?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAw?$AAo?$AAn?$AAl@
CONST	SEGMENT
??_C@_1FK@KCMNHAJA@?$AA?$CI?$AAk?$AAw?$AAo?$AAn?$AAl?$AAy?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAw?$AAo?$AAn?$AAl@ DB '('
	DB	00H, 'k', 00H, 'w', 00H, 'o', 00H, 'n', 00H, 'l', 00H, 'y', 00H
	DB	'a', 00H, 'r', 00H, 'g', 00H, 's', 00H, ')', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, '_', 00H, 'a', 00H, 's', 00H, 'd', 00H
	DB	'l', 00H, '_', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' ', 00H, '('
	DB	00H, 'k', 00H, 'w', 00H, 'o', 00H, 'n', 00H, 'l', 00H, 'y', 00H
	DB	'a', 00H, 'r', 00H, 'g', 00H, 's', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@DLAPFEKE@arguments?5field?5?$CCkwonlyargs?$CC?5mus@
CONST	SEGMENT
??_C@_0DK@DLAPFEKE@arguments?5field?5?$CCkwonlyargs?$CC?5mus@ DB 'argumen'
	DB	'ts field "kwonlyargs" must be a list, not a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KNCHMPGN@required?5field?5?$CCargs?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CN@KNCHMPGN@required?5field?5?$CCargs?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "args" missing from arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
CONST	SEGMENT
??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@ DB 'obj2ast_arguments', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@BACKFDNE@arguments?5field?5?$CCargs?$CC?5must?5be?5a@
CONST	SEGMENT
??_C@_0DE@BACKFDNE@arguments?5field?5?$CCargs?$CC?5must?5be?5a@ DB 'argum'
	DB	'ents field "args" must be a list, not a %.200s', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_arguments
_TEXT	SEGMENT
kwargannotation$ = 80
kwonlyargs$ = 88
args$ = 96
kwarg$ = 104
varargannotation$ = 112
tmp$ = 120
defaults$ = 128
kw_defaults$ = 136
vararg$ = 144
res$27736 = 152
i$27738 = 160
len$27737 = 168
value$27751 = 176
_asdl_i$27754 = 184
_py_tmp$27761 = 192
res$27768 = 200
_py_tmp$27776 = 208
res$27783 = 216
_py_tmp$27791 = 224
res$27798 = 232
i$27800 = 240
len$27799 = 248
value$27812 = 256
_asdl_i$27815 = 264
_py_tmp$27822 = 272
res$27829 = 280
_py_tmp$27837 = 288
res$27844 = 296
_py_tmp$27852 = 304
res$27859 = 312
i$27861 = 320
len$27860 = 328
value$27873 = 336
_asdl_i$27876 = 344
_py_tmp$27883 = 352
res$27890 = 360
i$27892 = 368
len$27891 = 376
value$27904 = 384
_asdl_i$27907 = 392
_py_tmp$27914 = 400
obj$ = 432
out$ = 440
arena$ = 448
obj2ast_arguments PROC					; COMDAT

; 6464 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H

; 6465 :     PyObject* tmp = NULL;

  00016	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 6466 :     asdl_seq* args;
; 6467 :     identifier vararg;
; 6468 :     expr_ty varargannotation;
; 6469 :     asdl_seq* kwonlyargs;
; 6470 :     identifier kwarg;
; 6471 :     expr_ty kwargannotation;
; 6472 :     asdl_seq* defaults;
; 6473 :     asdl_seq* kw_defaults;
; 6474 : 
; 6475 :     if (_PyObject_HasAttrId(obj, &PyId_args)) {

  0001f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  00024	8b c0		 mov	 eax, eax
  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0002c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00035	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00039	48 8b d0	 mov	 rdx, rax
  0003c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00044	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00049	85 c0		 test	 eax, eax
  0004b	0f 84 e8 01 00
	00		 je	 $LN88@obj2ast_ar

; 6476 :         int res;
; 6477 :         Py_ssize_t len;
; 6478 :         Py_ssize_t i;
; 6479 :         tmp = _PyObject_GetAttrId(obj, &PyId_args);

  00051	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_args
  00056	8b c0		 mov	 eax, eax
  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00067	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006b	48 8b d0	 mov	 rdx, rax
  0006e	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00076	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0007b	48 89 44 24 78	 mov	 QWORD PTR tmp$[rsp], rax

; 6480 :         if (tmp == NULL) goto failed;

  00080	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00086	75 05		 jne	 SHORT $LN87@obj2ast_ar
  00088	e9 fc 0c 00 00	 jmp	 $failed$27741
$LN87@obj2ast_ar:

; 6481 :         if (!PyList_Check(tmp)) {

  0008d	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00092	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00096	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0009c	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  000a1	85 c0		 test	 eax, eax
  000a3	75 25		 jne	 SHORT $LN86@obj2ast_ar

; 6482 :             PyErr_Format(PyExc_TypeError, "arguments field \"args\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  000a5	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  000aa	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ae	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@BACKFDNE@arguments?5field?5?$CCargs?$CC?5must?5be?5a@
  000b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c0	e8 00 00 00 00	 call	 PyErr_Format

; 6483 :             goto failed;

  000c5	e9 bf 0c 00 00	 jmp	 $failed$27741
$LN86@obj2ast_ar:

; 6484 :         }
; 6485 :         len = PyList_GET_SIZE(tmp);

  000ca	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  000cf	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR len$27737[rsp], rax

; 6486 :         args = asdl_seq_new(len, arena);

  000db	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  000e3	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR len$27737[rsp]
  000eb	e8 00 00 00 00	 call	 asdl_seq_new
  000f0	48 89 44 24 60	 mov	 QWORD PTR args$[rsp], rax

; 6487 :         if (args == NULL) goto failed;

  000f5	48 83 7c 24 60
	00		 cmp	 QWORD PTR args$[rsp], 0
  000fb	75 05		 jne	 SHORT $LN85@obj2ast_ar
  000fd	e9 87 0c 00 00	 jmp	 $failed$27741
$LN85@obj2ast_ar:

; 6488 :         for (i = 0; i < len; i++) {

  00102	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$27738[rsp], 0
  0010e	eb 13		 jmp	 SHORT $LN84@obj2ast_ar
$LN83@obj2ast_ar:
  00110	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR i$27738[rsp]
  00118	48 ff c0	 inc	 rax
  0011b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR i$27738[rsp], rax
$LN84@obj2ast_ar:
  00123	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR len$27737[rsp]
  0012b	48 39 84 24 a0
	00 00 00	 cmp	 QWORD PTR i$27738[rsp], rax
  00133	0f 8d a3 00 00
	00		 jge	 $LN82@obj2ast_ar

; 6489 :             arg_ty value;
; 6490 :             res = obj2ast_arg(PyList_GET_ITEM(tmp, i), &value, arena);

  00139	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  0013e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00142	4c 8b 84 24 c0
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0014a	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR value$27751[rsp]
  00152	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR i$27738[rsp]
  0015a	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0015e	e8 00 00 00 00	 call	 obj2ast_arg
  00163	89 84 24 98 00
	00 00		 mov	 DWORD PTR res$27736[rsp], eax

; 6491 :             if (res != 0) goto failed;

  0016a	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR res$27736[rsp], 0
  00172	74 05		 je	 SHORT $LN81@obj2ast_ar
  00174	e9 10 0c 00 00	 jmp	 $failed$27741
$LN81@obj2ast_ar:

; 6492 :             asdl_seq_SET(args, i, value);

  00179	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR i$27738[rsp]
  00180	89 84 24 b8 00
	00 00		 mov	 DWORD PTR _asdl_i$27754[rsp], eax
  00187	48 83 7c 24 60
	00		 cmp	 QWORD PTR args$[rsp], 0
  0018d	74 12		 je	 SHORT $LN91@obj2ast_ar
  0018f	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27754[rsp]
  00197	48 8b 4c 24 60	 mov	 rcx, QWORD PTR args$[rsp]
  0019c	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  0019f	7c 1c		 jl	 SHORT $LN92@obj2ast_ar
$LN91@obj2ast_ar:
  001a1	41 b8 5c 19 00
	00		 mov	 r8d, 6492		; 0000195cH
  001a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  001ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@KPDCIBGG@?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe@
  001b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001bb	33 c0		 xor	 eax, eax
$LN92@obj2ast_ar:
  001bd	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27754[rsp]
  001c5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR args$[rsp]
  001ca	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR value$27751[rsp]
  001d2	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 6493 :         }

  001d7	e9 34 ff ff ff	 jmp	 $LN83@obj2ast_ar
$LN82@obj2ast_ar:
$LN80@obj2ast_ar:

; 6494 :         Py_CLEAR(tmp);

  001dc	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001e2	74 4d		 je	 SHORT $LN77@obj2ast_ar
  001e4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ec	4c 8b 4c 24 78	 mov	 r9, QWORD PTR tmp$[rsp]
  001f1	41 b8 5e 19 00
	00		 mov	 r8d, 6494		; 0000195eH
  001f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  00205	e8 00 00 00 00	 call	 _PyParallel_Guard
  0020a	85 c0		 test	 eax, eax
  0020c	75 23		 jne	 SHORT $LN77@obj2ast_ar
  0020e	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00213	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR _py_tmp$27761[rsp], rax
  0021b	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00224	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$27761[rsp]
  0022c	e8 00 00 00 00	 call	 _Py_DecRef
$LN77@obj2ast_ar:
  00231	33 c0		 xor	 eax, eax
  00233	85 c0		 test	 eax, eax
  00235	75 a5		 jne	 SHORT $LN80@obj2ast_ar

; 6495 :     } else {

  00237	eb 1d		 jmp	 SHORT $LN76@obj2ast_ar
$LN88@obj2ast_ar:

; 6496 :         PyErr_SetString(PyExc_TypeError, "required field \"args\" missing from arguments");

  00239	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@KNCHMPGN@required?5field?5?$CCargs?$CC?5missing?5fr@
  00240	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00247	e8 00 00 00 00	 call	 PyErr_SetString

; 6497 :         return 1;

  0024c	b8 01 00 00 00	 mov	 eax, 1
  00251	e9 50 0b 00 00	 jmp	 $LN89@obj2ast_ar
$LN76@obj2ast_ar:

; 6498 :     }
; 6499 :     if (_PyObject_HasAttrId(obj, &PyId_vararg)) {

  00256	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_vararg
  0025b	8b c0		 mov	 eax, eax
  0025d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00263	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0026c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00270	48 8b d0	 mov	 rdx, rax
  00273	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0027b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00280	85 c0		 test	 eax, eax
  00282	0f 84 c9 00 00
	00		 je	 $LN75@obj2ast_ar

; 6500 :         int res;
; 6501 :         tmp = _PyObject_GetAttrId(obj, &PyId_vararg);

  00288	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_vararg
  0028d	8b c0		 mov	 eax, eax
  0028f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00295	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0029e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002a2	48 8b d0	 mov	 rdx, rax
  002a5	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  002ad	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  002b2	48 89 44 24 78	 mov	 QWORD PTR tmp$[rsp], rax

; 6502 :         if (tmp == NULL) goto failed;

  002b7	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  002bd	75 05		 jne	 SHORT $LN74@obj2ast_ar
  002bf	e9 c5 0a 00 00	 jmp	 $failed$27741
$LN74@obj2ast_ar:

; 6503 :         res = obj2ast_identifier(tmp, &vararg, arena);

  002c4	4c 8b 84 24 c0
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  002cc	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR vararg$[rsp]
  002d4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tmp$[rsp]
  002d9	e8 00 00 00 00	 call	 obj2ast_identifier
  002de	89 84 24 c8 00
	00 00		 mov	 DWORD PTR res$27768[rsp], eax

; 6504 :         if (res != 0) goto failed;

  002e5	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR res$27768[rsp], 0
  002ed	74 05		 je	 SHORT $LN73@obj2ast_ar
  002ef	e9 95 0a 00 00	 jmp	 $failed$27741
$LN73@obj2ast_ar:
$LN72@obj2ast_ar:

; 6505 :         Py_CLEAR(tmp);

  002f4	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  002fa	74 4d		 je	 SHORT $LN69@obj2ast_ar
  002fc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00304	4c 8b 4c 24 78	 mov	 r9, QWORD PTR tmp$[rsp]
  00309	41 b8 69 19 00
	00		 mov	 r8d, 6505		; 00001969H
  0030f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00316	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  0031d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00322	85 c0		 test	 eax, eax
  00324	75 23		 jne	 SHORT $LN69@obj2ast_ar
  00326	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  0032b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR _py_tmp$27776[rsp], rax
  00333	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0033c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$27776[rsp]
  00344	e8 00 00 00 00	 call	 _Py_DecRef
$LN69@obj2ast_ar:
  00349	33 c0		 xor	 eax, eax
  0034b	85 c0		 test	 eax, eax
  0034d	75 a5		 jne	 SHORT $LN72@obj2ast_ar

; 6506 :     } else {

  0034f	eb 0c		 jmp	 SHORT $LN68@obj2ast_ar
$LN75@obj2ast_ar:

; 6507 :         vararg = NULL;

  00351	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR vararg$[rsp], 0
$LN68@obj2ast_ar:

; 6508 :     }
; 6509 :     if (_PyObject_HasAttrId(obj, &PyId_varargannotation)) {

  0035d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_varargannotation
  00362	8b c0		 mov	 eax, eax
  00364	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0036a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00373	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00377	48 8b d0	 mov	 rdx, rax
  0037a	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00382	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00387	85 c0		 test	 eax, eax
  00389	0f 84 c6 00 00
	00		 je	 $LN67@obj2ast_ar

; 6510 :         int res;
; 6511 :         tmp = _PyObject_GetAttrId(obj, &PyId_varargannotation);

  0038f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_varargannotation
  00394	8b c0		 mov	 eax, eax
  00396	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0039c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003a5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003a9	48 8b d0	 mov	 rdx, rax
  003ac	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  003b4	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  003b9	48 89 44 24 78	 mov	 QWORD PTR tmp$[rsp], rax

; 6512 :         if (tmp == NULL) goto failed;

  003be	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  003c4	75 05		 jne	 SHORT $LN66@obj2ast_ar
  003c6	e9 be 09 00 00	 jmp	 $failed$27741
$LN66@obj2ast_ar:

; 6513 :         res = obj2ast_expr(tmp, &varargannotation, arena);

  003cb	4c 8b 84 24 c0
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  003d3	48 8d 54 24 70	 lea	 rdx, QWORD PTR varargannotation$[rsp]
  003d8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tmp$[rsp]
  003dd	e8 00 00 00 00	 call	 obj2ast_expr
  003e2	89 84 24 d8 00
	00 00		 mov	 DWORD PTR res$27783[rsp], eax

; 6514 :         if (res != 0) goto failed;

  003e9	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR res$27783[rsp], 0
  003f1	74 05		 je	 SHORT $LN65@obj2ast_ar
  003f3	e9 91 09 00 00	 jmp	 $failed$27741
$LN65@obj2ast_ar:
$LN64@obj2ast_ar:

; 6515 :         Py_CLEAR(tmp);

  003f8	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  003fe	74 4d		 je	 SHORT $LN61@obj2ast_ar
  00400	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00408	4c 8b 4c 24 78	 mov	 r9, QWORD PTR tmp$[rsp]
  0040d	41 b8 73 19 00
	00		 mov	 r8d, 6515		; 00001973H
  00413	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0041a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  00421	e8 00 00 00 00	 call	 _PyParallel_Guard
  00426	85 c0		 test	 eax, eax
  00428	75 23		 jne	 SHORT $LN61@obj2ast_ar
  0042a	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  0042f	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR _py_tmp$27791[rsp], rax
  00437	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00440	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$27791[rsp]
  00448	e8 00 00 00 00	 call	 _Py_DecRef
$LN61@obj2ast_ar:
  0044d	33 c0		 xor	 eax, eax
  0044f	85 c0		 test	 eax, eax
  00451	75 a5		 jne	 SHORT $LN64@obj2ast_ar

; 6516 :     } else {

  00453	eb 09		 jmp	 SHORT $LN60@obj2ast_ar
$LN67@obj2ast_ar:

; 6517 :         varargannotation = NULL;

  00455	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR varargannotation$[rsp], 0
$LN60@obj2ast_ar:

; 6518 :     }
; 6519 :     if (_PyObject_HasAttrId(obj, &PyId_kwonlyargs)) {

  0045e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwonlyargs
  00463	8b c0		 mov	 eax, eax
  00465	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0046b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00474	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00478	48 8b d0	 mov	 rdx, rax
  0047b	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00483	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00488	85 c0		 test	 eax, eax
  0048a	0f 84 e8 01 00
	00		 je	 $LN59@obj2ast_ar

; 6520 :         int res;
; 6521 :         Py_ssize_t len;
; 6522 :         Py_ssize_t i;
; 6523 :         tmp = _PyObject_GetAttrId(obj, &PyId_kwonlyargs);

  00490	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwonlyargs
  00495	8b c0		 mov	 eax, eax
  00497	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0049d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  004a6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  004aa	48 8b d0	 mov	 rdx, rax
  004ad	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  004b5	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  004ba	48 89 44 24 78	 mov	 QWORD PTR tmp$[rsp], rax

; 6524 :         if (tmp == NULL) goto failed;

  004bf	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  004c5	75 05		 jne	 SHORT $LN58@obj2ast_ar
  004c7	e9 bd 08 00 00	 jmp	 $failed$27741
$LN58@obj2ast_ar:

; 6525 :         if (!PyList_Check(tmp)) {

  004cc	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  004d1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004d5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004db	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  004e0	85 c0		 test	 eax, eax
  004e2	75 25		 jne	 SHORT $LN57@obj2ast_ar

; 6526 :             PyErr_Format(PyExc_TypeError, "arguments field \"kwonlyargs\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  004e4	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  004e9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004ed	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  004f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DK@DLAPFEKE@arguments?5field?5?$CCkwonlyargs?$CC?5mus@
  004f8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  004ff	e8 00 00 00 00	 call	 PyErr_Format

; 6527 :             goto failed;

  00504	e9 80 08 00 00	 jmp	 $failed$27741
$LN57@obj2ast_ar:

; 6528 :         }
; 6529 :         len = PyList_GET_SIZE(tmp);

  00509	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  0050e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00512	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR len$27799[rsp], rax

; 6530 :         kwonlyargs = asdl_seq_new(len, arena);

  0051a	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00522	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR len$27799[rsp]
  0052a	e8 00 00 00 00	 call	 asdl_seq_new
  0052f	48 89 44 24 58	 mov	 QWORD PTR kwonlyargs$[rsp], rax

; 6531 :         if (kwonlyargs == NULL) goto failed;

  00534	48 83 7c 24 58
	00		 cmp	 QWORD PTR kwonlyargs$[rsp], 0
  0053a	75 05		 jne	 SHORT $LN56@obj2ast_ar
  0053c	e9 48 08 00 00	 jmp	 $failed$27741
$LN56@obj2ast_ar:

; 6532 :         for (i = 0; i < len; i++) {

  00541	48 c7 84 24 f0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$27800[rsp], 0
  0054d	eb 13		 jmp	 SHORT $LN55@obj2ast_ar
$LN54@obj2ast_ar:
  0054f	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR i$27800[rsp]
  00557	48 ff c0	 inc	 rax
  0055a	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR i$27800[rsp], rax
$LN55@obj2ast_ar:
  00562	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR len$27799[rsp]
  0056a	48 39 84 24 f0
	00 00 00	 cmp	 QWORD PTR i$27800[rsp], rax
  00572	0f 8d a3 00 00
	00		 jge	 $LN53@obj2ast_ar

; 6533 :             arg_ty value;
; 6534 :             res = obj2ast_arg(PyList_GET_ITEM(tmp, i), &value, arena);

  00578	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  0057d	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00581	4c 8b 84 24 c0
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00589	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR value$27812[rsp]
  00591	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR i$27800[rsp]
  00599	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0059d	e8 00 00 00 00	 call	 obj2ast_arg
  005a2	89 84 24 e8 00
	00 00		 mov	 DWORD PTR res$27798[rsp], eax

; 6535 :             if (res != 0) goto failed;

  005a9	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR res$27798[rsp], 0
  005b1	74 05		 je	 SHORT $LN52@obj2ast_ar
  005b3	e9 d1 07 00 00	 jmp	 $failed$27741
$LN52@obj2ast_ar:

; 6536 :             asdl_seq_SET(kwonlyargs, i, value);

  005b8	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR i$27800[rsp]
  005bf	89 84 24 08 01
	00 00		 mov	 DWORD PTR _asdl_i$27815[rsp], eax
  005c6	48 83 7c 24 58
	00		 cmp	 QWORD PTR kwonlyargs$[rsp], 0
  005cc	74 12		 je	 SHORT $LN93@obj2ast_ar
  005ce	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27815[rsp]
  005d6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR kwonlyargs$[rsp]
  005db	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  005de	7c 1c		 jl	 SHORT $LN94@obj2ast_ar
$LN93@obj2ast_ar:
  005e0	41 b8 88 19 00
	00		 mov	 r8d, 6536		; 00001988H
  005e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  005ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@KCMNHAJA@?$AA?$CI?$AAk?$AAw?$AAo?$AAn?$AAl?$AAy?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAw?$AAo?$AAn?$AAl@
  005f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005fa	33 c0		 xor	 eax, eax
$LN94@obj2ast_ar:
  005fc	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27815[rsp]
  00604	48 8b 4c 24 58	 mov	 rcx, QWORD PTR kwonlyargs$[rsp]
  00609	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR value$27812[rsp]
  00611	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 6537 :         }

  00616	e9 34 ff ff ff	 jmp	 $LN54@obj2ast_ar
$LN53@obj2ast_ar:
$LN51@obj2ast_ar:

; 6538 :         Py_CLEAR(tmp);

  0061b	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00621	74 4d		 je	 SHORT $LN48@obj2ast_ar
  00623	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0062b	4c 8b 4c 24 78	 mov	 r9, QWORD PTR tmp$[rsp]
  00630	41 b8 8a 19 00
	00		 mov	 r8d, 6538		; 0000198aH
  00636	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  0063d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  00644	e8 00 00 00 00	 call	 _PyParallel_Guard
  00649	85 c0		 test	 eax, eax
  0064b	75 23		 jne	 SHORT $LN48@obj2ast_ar
  0064d	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00652	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR _py_tmp$27822[rsp], rax
  0065a	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00663	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$27822[rsp]
  0066b	e8 00 00 00 00	 call	 _Py_DecRef
$LN48@obj2ast_ar:
  00670	33 c0		 xor	 eax, eax
  00672	85 c0		 test	 eax, eax
  00674	75 a5		 jne	 SHORT $LN51@obj2ast_ar

; 6539 :     } else {

  00676	eb 1d		 jmp	 SHORT $LN47@obj2ast_ar
$LN59@obj2ast_ar:

; 6540 :         PyErr_SetString(PyExc_TypeError, "required field \"kwonlyargs\" missing from arguments");

  00678	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@BHLCGNME@required?5field?5?$CCkwonlyargs?$CC?5miss@
  0067f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00686	e8 00 00 00 00	 call	 PyErr_SetString

; 6541 :         return 1;

  0068b	b8 01 00 00 00	 mov	 eax, 1
  00690	e9 11 07 00 00	 jmp	 $LN89@obj2ast_ar
$LN47@obj2ast_ar:

; 6542 :     }
; 6543 :     if (_PyObject_HasAttrId(obj, &PyId_kwarg)) {

  00695	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwarg
  0069a	8b c0		 mov	 eax, eax
  0069c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  006a2	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  006ab	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  006af	48 8b d0	 mov	 rdx, rax
  006b2	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  006ba	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  006bf	85 c0		 test	 eax, eax
  006c1	0f 84 c6 00 00
	00		 je	 $LN46@obj2ast_ar

; 6544 :         int res;
; 6545 :         tmp = _PyObject_GetAttrId(obj, &PyId_kwarg);

  006c7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwarg
  006cc	8b c0		 mov	 eax, eax
  006ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  006d4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  006dd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  006e1	48 8b d0	 mov	 rdx, rax
  006e4	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  006ec	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  006f1	48 89 44 24 78	 mov	 QWORD PTR tmp$[rsp], rax

; 6546 :         if (tmp == NULL) goto failed;

  006f6	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  006fc	75 05		 jne	 SHORT $LN45@obj2ast_ar
  006fe	e9 86 06 00 00	 jmp	 $failed$27741
$LN45@obj2ast_ar:

; 6547 :         res = obj2ast_identifier(tmp, &kwarg, arena);

  00703	4c 8b 84 24 c0
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0070b	48 8d 54 24 68	 lea	 rdx, QWORD PTR kwarg$[rsp]
  00710	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tmp$[rsp]
  00715	e8 00 00 00 00	 call	 obj2ast_identifier
  0071a	89 84 24 18 01
	00 00		 mov	 DWORD PTR res$27829[rsp], eax

; 6548 :         if (res != 0) goto failed;

  00721	83 bc 24 18 01
	00 00 00	 cmp	 DWORD PTR res$27829[rsp], 0
  00729	74 05		 je	 SHORT $LN44@obj2ast_ar
  0072b	e9 59 06 00 00	 jmp	 $failed$27741
$LN44@obj2ast_ar:
$LN43@obj2ast_ar:

; 6549 :         Py_CLEAR(tmp);

  00730	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00736	74 4d		 je	 SHORT $LN40@obj2ast_ar
  00738	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00740	4c 8b 4c 24 78	 mov	 r9, QWORD PTR tmp$[rsp]
  00745	41 b8 95 19 00
	00		 mov	 r8d, 6549		; 00001995H
  0074b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00752	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  00759	e8 00 00 00 00	 call	 _PyParallel_Guard
  0075e	85 c0		 test	 eax, eax
  00760	75 23		 jne	 SHORT $LN40@obj2ast_ar
  00762	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00767	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR _py_tmp$27837[rsp], rax
  0076f	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00778	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$27837[rsp]
  00780	e8 00 00 00 00	 call	 _Py_DecRef
$LN40@obj2ast_ar:
  00785	33 c0		 xor	 eax, eax
  00787	85 c0		 test	 eax, eax
  00789	75 a5		 jne	 SHORT $LN43@obj2ast_ar

; 6550 :     } else {

  0078b	eb 09		 jmp	 SHORT $LN39@obj2ast_ar
$LN46@obj2ast_ar:

; 6551 :         kwarg = NULL;

  0078d	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR kwarg$[rsp], 0
$LN39@obj2ast_ar:

; 6552 :     }
; 6553 :     if (_PyObject_HasAttrId(obj, &PyId_kwargannotation)) {

  00796	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwargannotation
  0079b	8b c0		 mov	 eax, eax
  0079d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  007a3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  007ac	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  007b0	48 8b d0	 mov	 rdx, rax
  007b3	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  007bb	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  007c0	85 c0		 test	 eax, eax
  007c2	0f 84 c6 00 00
	00		 je	 $LN38@obj2ast_ar

; 6554 :         int res;
; 6555 :         tmp = _PyObject_GetAttrId(obj, &PyId_kwargannotation);

  007c8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kwargannotation
  007cd	8b c0		 mov	 eax, eax
  007cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  007d5	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  007de	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  007e2	48 8b d0	 mov	 rdx, rax
  007e5	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  007ed	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  007f2	48 89 44 24 78	 mov	 QWORD PTR tmp$[rsp], rax

; 6556 :         if (tmp == NULL) goto failed;

  007f7	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  007fd	75 05		 jne	 SHORT $LN37@obj2ast_ar
  007ff	e9 85 05 00 00	 jmp	 $failed$27741
$LN37@obj2ast_ar:

; 6557 :         res = obj2ast_expr(tmp, &kwargannotation, arena);

  00804	4c 8b 84 24 c0
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0080c	48 8d 54 24 50	 lea	 rdx, QWORD PTR kwargannotation$[rsp]
  00811	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tmp$[rsp]
  00816	e8 00 00 00 00	 call	 obj2ast_expr
  0081b	89 84 24 28 01
	00 00		 mov	 DWORD PTR res$27844[rsp], eax

; 6558 :         if (res != 0) goto failed;

  00822	83 bc 24 28 01
	00 00 00	 cmp	 DWORD PTR res$27844[rsp], 0
  0082a	74 05		 je	 SHORT $LN36@obj2ast_ar
  0082c	e9 58 05 00 00	 jmp	 $failed$27741
$LN36@obj2ast_ar:
$LN35@obj2ast_ar:

; 6559 :         Py_CLEAR(tmp);

  00831	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00837	74 4d		 je	 SHORT $LN32@obj2ast_ar
  00839	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00841	4c 8b 4c 24 78	 mov	 r9, QWORD PTR tmp$[rsp]
  00846	41 b8 9f 19 00
	00		 mov	 r8d, 6559		; 0000199fH
  0084c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00853	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  0085a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0085f	85 c0		 test	 eax, eax
  00861	75 23		 jne	 SHORT $LN32@obj2ast_ar
  00863	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00868	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR _py_tmp$27852[rsp], rax
  00870	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00879	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$27852[rsp]
  00881	e8 00 00 00 00	 call	 _Py_DecRef
$LN32@obj2ast_ar:
  00886	33 c0		 xor	 eax, eax
  00888	85 c0		 test	 eax, eax
  0088a	75 a5		 jne	 SHORT $LN35@obj2ast_ar

; 6560 :     } else {

  0088c	eb 09		 jmp	 SHORT $LN31@obj2ast_ar
$LN38@obj2ast_ar:

; 6561 :         kwargannotation = NULL;

  0088e	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR kwargannotation$[rsp], 0
$LN31@obj2ast_ar:

; 6562 :     }
; 6563 :     if (_PyObject_HasAttrId(obj, &PyId_defaults)) {

  00897	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_defaults
  0089c	8b c0		 mov	 eax, eax
  0089e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  008a4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  008ad	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  008b1	48 8b d0	 mov	 rdx, rax
  008b4	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  008bc	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  008c1	85 c0		 test	 eax, eax
  008c3	0f 84 f7 01 00
	00		 je	 $LN30@obj2ast_ar

; 6564 :         int res;
; 6565 :         Py_ssize_t len;
; 6566 :         Py_ssize_t i;
; 6567 :         tmp = _PyObject_GetAttrId(obj, &PyId_defaults);

  008c9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_defaults
  008ce	8b c0		 mov	 eax, eax
  008d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  008d6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  008df	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  008e3	48 8b d0	 mov	 rdx, rax
  008e6	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  008ee	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  008f3	48 89 44 24 78	 mov	 QWORD PTR tmp$[rsp], rax

; 6568 :         if (tmp == NULL) goto failed;

  008f8	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  008fe	75 05		 jne	 SHORT $LN29@obj2ast_ar
  00900	e9 84 04 00 00	 jmp	 $failed$27741
$LN29@obj2ast_ar:

; 6569 :         if (!PyList_Check(tmp)) {

  00905	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  0090a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0090e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00914	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00919	85 c0		 test	 eax, eax
  0091b	75 25		 jne	 SHORT $LN28@obj2ast_ar

; 6570 :             PyErr_Format(PyExc_TypeError, "arguments field \"defaults\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  0091d	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00922	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00926	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0092a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@DFMGFEGL@arguments?5field?5?$CCdefaults?$CC?5must?5@
  00931	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00938	e8 00 00 00 00	 call	 PyErr_Format

; 6571 :             goto failed;

  0093d	e9 47 04 00 00	 jmp	 $failed$27741
$LN28@obj2ast_ar:

; 6572 :         }
; 6573 :         len = PyList_GET_SIZE(tmp);

  00942	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00947	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0094b	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR len$27860[rsp], rax

; 6574 :         defaults = asdl_seq_new(len, arena);

  00953	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  0095b	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR len$27860[rsp]
  00963	e8 00 00 00 00	 call	 asdl_seq_new
  00968	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR defaults$[rsp], rax

; 6575 :         if (defaults == NULL) goto failed;

  00970	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR defaults$[rsp], 0
  00979	75 05		 jne	 SHORT $LN27@obj2ast_ar
  0097b	e9 09 04 00 00	 jmp	 $failed$27741
$LN27@obj2ast_ar:

; 6576 :         for (i = 0; i < len; i++) {

  00980	48 c7 84 24 40
	01 00 00 00 00
	00 00		 mov	 QWORD PTR i$27861[rsp], 0
  0098c	eb 13		 jmp	 SHORT $LN26@obj2ast_ar
$LN25@obj2ast_ar:
  0098e	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR i$27861[rsp]
  00996	48 ff c0	 inc	 rax
  00999	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR i$27861[rsp], rax
$LN26@obj2ast_ar:
  009a1	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR len$27860[rsp]
  009a9	48 39 84 24 40
	01 00 00	 cmp	 QWORD PTR i$27861[rsp], rax
  009b1	0f 8d ac 00 00
	00		 jge	 $LN24@obj2ast_ar

; 6577 :             expr_ty value;
; 6578 :             res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  009b7	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  009bc	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  009c0	4c 8b 84 24 c0
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  009c8	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR value$27873[rsp]
  009d0	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR i$27861[rsp]
  009d8	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  009dc	e8 00 00 00 00	 call	 obj2ast_expr
  009e1	89 84 24 38 01
	00 00		 mov	 DWORD PTR res$27859[rsp], eax

; 6579 :             if (res != 0) goto failed;

  009e8	83 bc 24 38 01
	00 00 00	 cmp	 DWORD PTR res$27859[rsp], 0
  009f0	74 05		 je	 SHORT $LN23@obj2ast_ar
  009f2	e9 92 03 00 00	 jmp	 $failed$27741
$LN23@obj2ast_ar:

; 6580 :             asdl_seq_SET(defaults, i, value);

  009f7	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$27861[rsp]
  009fe	89 84 24 58 01
	00 00		 mov	 DWORD PTR _asdl_i$27876[rsp], eax
  00a05	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR defaults$[rsp], 0
  00a0e	74 15		 je	 SHORT $LN95@obj2ast_ar
  00a10	48 63 84 24 58
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27876[rsp]
  00a18	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR defaults$[rsp]
  00a20	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  00a23	7c 1c		 jl	 SHORT $LN96@obj2ast_ar
$LN95@obj2ast_ar:
  00a25	41 b8 b4 19 00
	00		 mov	 r8d, 6580		; 000019b4H
  00a2b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  00a32	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@BKBCFNNC@?$AA?$CI?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt@
  00a39	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a3f	33 c0		 xor	 eax, eax
$LN96@obj2ast_ar:
  00a41	48 63 84 24 58
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27876[rsp]
  00a49	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR defaults$[rsp]
  00a51	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR value$27873[rsp]
  00a59	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 6581 :         }

  00a5e	e9 2b ff ff ff	 jmp	 $LN25@obj2ast_ar
$LN24@obj2ast_ar:
$LN22@obj2ast_ar:

; 6582 :         Py_CLEAR(tmp);

  00a63	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00a69	74 4d		 je	 SHORT $LN19@obj2ast_ar
  00a6b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00a73	4c 8b 4c 24 78	 mov	 r9, QWORD PTR tmp$[rsp]
  00a78	41 b8 b6 19 00
	00		 mov	 r8d, 6582		; 000019b6H
  00a7e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00a85	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  00a8c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00a91	85 c0		 test	 eax, eax
  00a93	75 23		 jne	 SHORT $LN19@obj2ast_ar
  00a95	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00a9a	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR _py_tmp$27883[rsp], rax
  00aa2	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00aab	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$27883[rsp]
  00ab3	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@obj2ast_ar:
  00ab8	33 c0		 xor	 eax, eax
  00aba	85 c0		 test	 eax, eax
  00abc	75 a5		 jne	 SHORT $LN22@obj2ast_ar

; 6583 :     } else {

  00abe	eb 1d		 jmp	 SHORT $LN18@obj2ast_ar
$LN30@obj2ast_ar:

; 6584 :         PyErr_SetString(PyExc_TypeError, "required field \"defaults\" missing from arguments");

  00ac0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@MPBJNEFN@required?5field?5?$CCdefaults?$CC?5missin@
  00ac7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00ace	e8 00 00 00 00	 call	 PyErr_SetString

; 6585 :         return 1;

  00ad3	b8 01 00 00 00	 mov	 eax, 1
  00ad8	e9 c9 02 00 00	 jmp	 $LN89@obj2ast_ar
$LN18@obj2ast_ar:

; 6586 :     }
; 6587 :     if (_PyObject_HasAttrId(obj, &PyId_kw_defaults)) {

  00add	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kw_defaults
  00ae2	8b c0		 mov	 eax, eax
  00ae4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00aea	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00af3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00af7	48 8b d0	 mov	 rdx, rax
  00afa	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00b02	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00b07	85 c0		 test	 eax, eax
  00b09	0f 84 f7 01 00
	00		 je	 $LN17@obj2ast_ar

; 6588 :         int res;
; 6589 :         Py_ssize_t len;
; 6590 :         Py_ssize_t i;
; 6591 :         tmp = _PyObject_GetAttrId(obj, &PyId_kw_defaults);

  00b0f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_kw_defaults
  00b14	8b c0		 mov	 eax, eax
  00b16	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00b1c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00b25	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00b29	48 8b d0	 mov	 rdx, rax
  00b2c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00b34	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00b39	48 89 44 24 78	 mov	 QWORD PTR tmp$[rsp], rax

; 6592 :         if (tmp == NULL) goto failed;

  00b3e	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00b44	75 05		 jne	 SHORT $LN16@obj2ast_ar
  00b46	e9 3e 02 00 00	 jmp	 $failed$27741
$LN16@obj2ast_ar:

; 6593 :         if (!PyList_Check(tmp)) {

  00b4b	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00b50	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00b54	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b5a	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00b5f	85 c0		 test	 eax, eax
  00b61	75 25		 jne	 SHORT $LN15@obj2ast_ar

; 6594 :             PyErr_Format(PyExc_TypeError, "arguments field \"kw_defaults\" must be a list, not a %.200s", tmp->ob_type->tp_name);

  00b63	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00b68	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00b6c	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00b70	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DL@IAKMBFAB@arguments?5field?5?$CCkw_defaults?$CC?5mu@
  00b77	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00b7e	e8 00 00 00 00	 call	 PyErr_Format

; 6595 :             goto failed;

  00b83	e9 01 02 00 00	 jmp	 $failed$27741
$LN15@obj2ast_ar:

; 6596 :         }
; 6597 :         len = PyList_GET_SIZE(tmp);

  00b88	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00b8d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00b91	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR len$27891[rsp], rax

; 6598 :         kw_defaults = asdl_seq_new(len, arena);

  00b99	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR arena$[rsp]
  00ba1	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR len$27891[rsp]
  00ba9	e8 00 00 00 00	 call	 asdl_seq_new
  00bae	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR kw_defaults$[rsp], rax

; 6599 :         if (kw_defaults == NULL) goto failed;

  00bb6	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR kw_defaults$[rsp], 0
  00bbf	75 05		 jne	 SHORT $LN14@obj2ast_ar
  00bc1	e9 c3 01 00 00	 jmp	 $failed$27741
$LN14@obj2ast_ar:

; 6600 :         for (i = 0; i < len; i++) {

  00bc6	48 c7 84 24 70
	01 00 00 00 00
	00 00		 mov	 QWORD PTR i$27892[rsp], 0
  00bd2	eb 13		 jmp	 SHORT $LN13@obj2ast_ar
$LN12@obj2ast_ar:
  00bd4	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR i$27892[rsp]
  00bdc	48 ff c0	 inc	 rax
  00bdf	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR i$27892[rsp], rax
$LN13@obj2ast_ar:
  00be7	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR len$27891[rsp]
  00bef	48 39 84 24 70
	01 00 00	 cmp	 QWORD PTR i$27892[rsp], rax
  00bf7	0f 8d ac 00 00
	00		 jge	 $LN11@obj2ast_ar

; 6601 :             expr_ty value;
; 6602 :             res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);

  00bfd	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00c02	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00c06	4c 8b 84 24 c0
	01 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00c0e	48 8d 94 24 80
	01 00 00	 lea	 rdx, QWORD PTR value$27904[rsp]
  00c16	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR i$27892[rsp]
  00c1e	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00c22	e8 00 00 00 00	 call	 obj2ast_expr
  00c27	89 84 24 68 01
	00 00		 mov	 DWORD PTR res$27890[rsp], eax

; 6603 :             if (res != 0) goto failed;

  00c2e	83 bc 24 68 01
	00 00 00	 cmp	 DWORD PTR res$27890[rsp], 0
  00c36	74 05		 je	 SHORT $LN10@obj2ast_ar
  00c38	e9 4c 01 00 00	 jmp	 $failed$27741
$LN10@obj2ast_ar:

; 6604 :             asdl_seq_SET(kw_defaults, i, value);

  00c3d	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR i$27892[rsp]
  00c44	89 84 24 88 01
	00 00		 mov	 DWORD PTR _asdl_i$27907[rsp], eax
  00c4b	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR kw_defaults$[rsp], 0
  00c54	74 15		 je	 SHORT $LN97@obj2ast_ar
  00c56	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27907[rsp]
  00c5e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR kw_defaults$[rsp]
  00c66	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  00c69	7c 1c		 jl	 SHORT $LN98@obj2ast_ar
$LN97@obj2ast_ar:
  00c6b	41 b8 cc 19 00
	00		 mov	 r8d, 6604		; 000019ccH
  00c71	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@IABIACLB@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?9?$AAa?$AAs?$AAt?$AA?4?$AAc?$AA?$AA@
  00c78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FO@JNNJHDDE@?$AA?$CI?$AAk?$AAw?$AA_?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAa?$AAs?$AAd?$AAl?$AA_?$AAi?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAk?$AAw?$AA_?$AAd@
  00c7f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c85	33 c0		 xor	 eax, eax
$LN98@obj2ast_ar:
  00c87	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR _asdl_i$27907[rsp]
  00c8f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR kw_defaults$[rsp]
  00c97	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR value$27904[rsp]
  00c9f	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 6605 :         }

  00ca4	e9 2b ff ff ff	 jmp	 $LN12@obj2ast_ar
$LN11@obj2ast_ar:
$LN9@obj2ast_ar:

; 6606 :         Py_CLEAR(tmp);

  00ca9	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00caf	74 4d		 je	 SHORT $LN6@obj2ast_ar
  00cb1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00cb9	4c 8b 4c 24 78	 mov	 r9, QWORD PTR tmp$[rsp]
  00cbe	41 b8 ce 19 00
	00		 mov	 r8d, 6606		; 000019ceH
  00cc4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  00ccb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LABJANNH@obj2ast_arguments?$AA@
  00cd2	e8 00 00 00 00	 call	 _PyParallel_Guard
  00cd7	85 c0		 test	 eax, eax
  00cd9	75 23		 jne	 SHORT $LN6@obj2ast_ar
  00cdb	48 8b 44 24 78	 mov	 rax, QWORD PTR tmp$[rsp]
  00ce0	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR _py_tmp$27914[rsp], rax
  00ce8	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00cf1	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$27914[rsp]
  00cf9	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@obj2ast_ar:
  00cfe	33 c0		 xor	 eax, eax
  00d00	85 c0		 test	 eax, eax
  00d02	75 a5		 jne	 SHORT $LN9@obj2ast_ar

; 6607 :     } else {

  00d04	eb 1d		 jmp	 SHORT $LN5@obj2ast_ar
$LN17@obj2ast_ar:

; 6608 :         PyErr_SetString(PyExc_TypeError, "required field \"kw_defaults\" missing from arguments");

  00d06	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@GCEJPHGL@required?5field?5?$CCkw_defaults?$CC?5mis@
  00d0d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00d14	e8 00 00 00 00	 call	 PyErr_SetString

; 6609 :         return 1;

  00d19	b8 01 00 00 00	 mov	 eax, 1
  00d1e	e9 83 00 00 00	 jmp	 $LN89@obj2ast_ar
$LN5@obj2ast_ar:

; 6610 :     }
; 6611 :     *out = arguments(args, vararg, varargannotation, kwonlyargs, kwarg,
; 6612 :                      kwargannotation, defaults, kw_defaults, arena);

  00d23	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR arena$[rsp]
  00d2b	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00d30	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR kw_defaults$[rsp]
  00d38	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00d3d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR defaults$[rsp]
  00d45	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00d4a	48 8b 44 24 50	 mov	 rax, QWORD PTR kwargannotation$[rsp]
  00d4f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00d54	48 8b 44 24 68	 mov	 rax, QWORD PTR kwarg$[rsp]
  00d59	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d5e	4c 8b 4c 24 58	 mov	 r9, QWORD PTR kwonlyargs$[rsp]
  00d63	4c 8b 44 24 70	 mov	 r8, QWORD PTR varargannotation$[rsp]
  00d68	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR vararg$[rsp]
  00d70	48 8b 4c 24 60	 mov	 rcx, QWORD PTR args$[rsp]
  00d75	e8 00 00 00 00	 call	 _Py_arguments
  00d7a	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00d82	48 89 01	 mov	 QWORD PTR [rcx], rax

; 6613 :     return 0;

  00d85	33 c0		 xor	 eax, eax
  00d87	eb 1d		 jmp	 SHORT $LN89@obj2ast_ar
$failed$27741:
$LN4@obj2ast_ar:

; 6614 : failed:
; 6615 :     Py_XDECREF(tmp);

  00d89	48 83 7c 24 78
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00d8f	74 0a		 je	 SHORT $LN1@obj2ast_ar
  00d91	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tmp$[rsp]
  00d96	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@obj2ast_ar:
  00d9b	33 c0		 xor	 eax, eax
  00d9d	85 c0		 test	 eax, eax
  00d9f	75 e8		 jne	 SHORT $LN4@obj2ast_ar

; 6616 :     return 1;

  00da1	b8 01 00 00 00	 mov	 eax, 1
$LN89@obj2ast_ar:

; 6617 : }

  00da6	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00dad	c3		 ret	 0
obj2ast_arguments ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@OMIDOBAH@required?5field?5?$CCarg?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0M@FDEDFJL@obj2ast_arg?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_arg DD imagerel obj2ast_arg
	DD	imagerel obj2ast_arg+610
	DD	imagerel $unwind$obj2ast_arg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_arg DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0CG@OMIDOBAH@required?5field?5?$CCarg?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CG@OMIDOBAH@required?5field?5?$CCarg?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "arg" missing from arg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FDEDFJL@obj2ast_arg?$AA@
CONST	SEGMENT
??_C@_0M@FDEDFJL@obj2ast_arg?$AA@ DB 'obj2ast_arg', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_arg
_TEXT	SEGMENT
arg$ = 48
annotation$ = 56
tmp$ = 64
res$27937 = 72
_py_tmp$27947 = 80
res$27954 = 88
_py_tmp$27962 = 96
obj$ = 128
out$ = 136
arena$ = 144
obj2ast_arg PROC					; COMDAT

; 6621 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 6622 :     PyObject* tmp = NULL;

  00013	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 6623 :     identifier arg;
; 6624 :     expr_ty annotation;
; 6625 : 
; 6626 :     if (_PyObject_HasAttrId(obj, &PyId_arg)) {

  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_arg
  00021	8b c0		 mov	 eax, eax
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00029	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00032	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00036	48 8b d0	 mov	 rdx, rax
  00039	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00041	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00046	85 c0		 test	 eax, eax
  00048	0f 84 ba 00 00
	00		 je	 $LN20@obj2ast_ar@2

; 6627 :         int res;
; 6628 :         tmp = _PyObject_GetAttrId(obj, &PyId_arg);

  0004e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_arg
  00053	8b c0		 mov	 eax, eax
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00064	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00068	48 8b d0	 mov	 rdx, rax
  0006b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00073	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00078	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 6629 :         if (tmp == NULL) goto failed;

  0007d	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00083	75 05		 jne	 SHORT $LN19@obj2ast_ar@2
  00085	e9 b6 01 00 00	 jmp	 $failed$27940
$LN19@obj2ast_ar@2:

; 6630 :         res = obj2ast_identifier(tmp, &arg, arena);

  0008a	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00092	48 8d 54 24 30	 lea	 rdx, QWORD PTR arg$[rsp]
  00097	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tmp$[rsp]
  0009c	e8 00 00 00 00	 call	 obj2ast_identifier
  000a1	89 44 24 48	 mov	 DWORD PTR res$27937[rsp], eax

; 6631 :         if (res != 0) goto failed;

  000a5	83 7c 24 48 00	 cmp	 DWORD PTR res$27937[rsp], 0
  000aa	74 05		 je	 SHORT $LN18@obj2ast_ar@2
  000ac	e9 8f 01 00 00	 jmp	 $failed$27940
$LN18@obj2ast_ar@2:
$LN17@obj2ast_ar@2:

; 6632 :         Py_CLEAR(tmp);

  000b1	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000b7	74 47		 je	 SHORT $LN14@obj2ast_ar@2
  000b9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c1	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tmp$[rsp]
  000c6	41 b8 e8 19 00
	00		 mov	 r8d, 6632		; 000019e8H
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FDEDFJL@obj2ast_arg?$AA@
  000da	e8 00 00 00 00	 call	 _PyParallel_Guard
  000df	85 c0		 test	 eax, eax
  000e1	75 1d		 jne	 SHORT $LN14@obj2ast_ar@2
  000e3	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  000e8	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$27947[rsp], rax
  000ed	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  000f6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$27947[rsp]
  000fb	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@obj2ast_ar@2:
  00100	33 c0		 xor	 eax, eax
  00102	85 c0		 test	 eax, eax
  00104	75 ab		 jne	 SHORT $LN17@obj2ast_ar@2

; 6633 :     } else {

  00106	eb 1d		 jmp	 SHORT $LN13@obj2ast_ar@2
$LN20@obj2ast_ar@2:

; 6634 :         PyErr_SetString(PyExc_TypeError, "required field \"arg\" missing from arg");

  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@OMIDOBAH@required?5field?5?$CCarg?$CC?5missing?5fro@
  0010f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00116	e8 00 00 00 00	 call	 PyErr_SetString

; 6635 :         return 1;

  0011b	b8 01 00 00 00	 mov	 eax, 1
  00120	e9 38 01 00 00	 jmp	 $LN21@obj2ast_ar@2
$LN13@obj2ast_ar@2:

; 6636 :     }
; 6637 :     if (_PyObject_HasAttrId(obj, &PyId_annotation)) {

  00125	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_annotation
  0012a	8b c0		 mov	 eax, eax
  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00132	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0013b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0013f	48 8b d0	 mov	 rdx, rax
  00142	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0014a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0014f	85 c0		 test	 eax, eax
  00151	0f 84 ba 00 00
	00		 je	 $LN12@obj2ast_ar@2

; 6638 :         int res;
; 6639 :         tmp = _PyObject_GetAttrId(obj, &PyId_annotation);

  00157	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_annotation
  0015c	8b c0		 mov	 eax, eax
  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00164	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0016d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00171	48 8b d0	 mov	 rdx, rax
  00174	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0017c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00181	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 6640 :         if (tmp == NULL) goto failed;

  00186	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0018c	75 05		 jne	 SHORT $LN11@obj2ast_ar@2
  0018e	e9 ad 00 00 00	 jmp	 $failed$27940
$LN11@obj2ast_ar@2:

; 6641 :         res = obj2ast_expr(tmp, &annotation, arena);

  00193	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0019b	48 8d 54 24 38	 lea	 rdx, QWORD PTR annotation$[rsp]
  001a0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tmp$[rsp]
  001a5	e8 00 00 00 00	 call	 obj2ast_expr
  001aa	89 44 24 58	 mov	 DWORD PTR res$27954[rsp], eax

; 6642 :         if (res != 0) goto failed;

  001ae	83 7c 24 58 00	 cmp	 DWORD PTR res$27954[rsp], 0
  001b3	74 05		 je	 SHORT $LN10@obj2ast_ar@2
  001b5	e9 86 00 00 00	 jmp	 $failed$27940
$LN10@obj2ast_ar@2:
$LN9@obj2ast_ar@2:

; 6643 :         Py_CLEAR(tmp);

  001ba	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001c0	74 47		 je	 SHORT $LN6@obj2ast_ar@2
  001c2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ca	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tmp$[rsp]
  001cf	41 b8 f3 19 00
	00		 mov	 r8d, 6643		; 000019f3H
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FDEDFJL@obj2ast_arg?$AA@
  001e3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e8	85 c0		 test	 eax, eax
  001ea	75 1d		 jne	 SHORT $LN6@obj2ast_ar@2
  001ec	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  001f1	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$27962[rsp], rax
  001f6	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  001ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$27962[rsp]
  00204	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@obj2ast_ar@2:
  00209	33 c0		 xor	 eax, eax
  0020b	85 c0		 test	 eax, eax
  0020d	75 ab		 jne	 SHORT $LN9@obj2ast_ar@2

; 6644 :     } else {

  0020f	eb 09		 jmp	 SHORT $LN5@obj2ast_ar@2
$LN12@obj2ast_ar@2:

; 6645 :         annotation = NULL;

  00211	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR annotation$[rsp], 0
$LN5@obj2ast_ar@2:

; 6646 :     }
; 6647 :     *out = arg(arg, annotation, arena);

  0021a	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00222	48 8b 54 24 38	 mov	 rdx, QWORD PTR annotation$[rsp]
  00227	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  0022c	e8 00 00 00 00	 call	 _Py_arg
  00231	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00239	48 89 01	 mov	 QWORD PTR [rcx], rax

; 6648 :     return 0;

  0023c	33 c0		 xor	 eax, eax
  0023e	eb 1d		 jmp	 SHORT $LN21@obj2ast_ar@2
$failed$27940:
$LN4@obj2ast_ar@2:

; 6649 : failed:
; 6650 :     Py_XDECREF(tmp);

  00240	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00246	74 0a		 je	 SHORT $LN1@obj2ast_ar@2
  00248	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tmp$[rsp]
  0024d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@obj2ast_ar@2:
  00252	33 c0		 xor	 eax, eax
  00254	85 c0		 test	 eax, eax
  00256	75 e8		 jne	 SHORT $LN4@obj2ast_ar@2

; 6651 :     return 1;

  00258	b8 01 00 00 00	 mov	 eax, 1
$LN21@obj2ast_ar@2:

; 6652 : }

  0025d	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00261	c3		 ret	 0
obj2ast_arg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@HMJIBNCO@required?5field?5?$CCvalue?$CC?5missing?5f@ ; `string'
PUBLIC	??_C@_0CK@PINDPDIB@required?5field?5?$CCarg?$CC?5missing?5fro@ ; `string'
PUBLIC	??_C@_0BA@PHJHFCNC@obj2ast_keyword?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_keyword DD imagerel obj2ast_keyword
	DD	imagerel obj2ast_keyword+627
	DD	imagerel $unwind$obj2ast_keyword
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_keyword DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0CM@HMJIBNCO@required?5field?5?$CCvalue?$CC?5missing?5f@
CONST	SEGMENT
??_C@_0CM@HMJIBNCO@required?5field?5?$CCvalue?$CC?5missing?5f@ DB 'requir'
	DB	'ed field "value" missing from keyword', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PINDPDIB@required?5field?5?$CCarg?$CC?5missing?5fro@
CONST	SEGMENT
??_C@_0CK@PINDPDIB@required?5field?5?$CCarg?$CC?5missing?5fro@ DB 'requir'
	DB	'ed field "arg" missing from keyword', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PHJHFCNC@obj2ast_keyword?$AA@
CONST	SEGMENT
??_C@_0BA@PHJHFCNC@obj2ast_keyword?$AA@ DB 'obj2ast_keyword', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_keyword
_TEXT	SEGMENT
value$ = 48
arg$ = 56
tmp$ = 64
res$27985 = 72
_py_tmp$27995 = 80
res$28002 = 88
_py_tmp$28010 = 96
obj$ = 128
out$ = 136
arena$ = 144
obj2ast_keyword PROC					; COMDAT

; 6656 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 6657 :     PyObject* tmp = NULL;

  00013	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 6658 :     identifier arg;
; 6659 :     expr_ty value;
; 6660 : 
; 6661 :     if (_PyObject_HasAttrId(obj, &PyId_arg)) {

  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_arg
  00021	8b c0		 mov	 eax, eax
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00029	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00032	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00036	48 8b d0	 mov	 rdx, rax
  00039	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00041	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00046	85 c0		 test	 eax, eax
  00048	0f 84 ba 00 00
	00		 je	 $LN20@obj2ast_ke

; 6662 :         int res;
; 6663 :         tmp = _PyObject_GetAttrId(obj, &PyId_arg);

  0004e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_arg
  00053	8b c0		 mov	 eax, eax
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00064	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00068	48 8b d0	 mov	 rdx, rax
  0006b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00073	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00078	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 6664 :         if (tmp == NULL) goto failed;

  0007d	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00083	75 05		 jne	 SHORT $LN19@obj2ast_ke
  00085	e9 c7 01 00 00	 jmp	 $failed$27988
$LN19@obj2ast_ke:

; 6665 :         res = obj2ast_identifier(tmp, &arg, arena);

  0008a	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00092	48 8d 54 24 38	 lea	 rdx, QWORD PTR arg$[rsp]
  00097	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tmp$[rsp]
  0009c	e8 00 00 00 00	 call	 obj2ast_identifier
  000a1	89 44 24 48	 mov	 DWORD PTR res$27985[rsp], eax

; 6666 :         if (res != 0) goto failed;

  000a5	83 7c 24 48 00	 cmp	 DWORD PTR res$27985[rsp], 0
  000aa	74 05		 je	 SHORT $LN18@obj2ast_ke
  000ac	e9 a0 01 00 00	 jmp	 $failed$27988
$LN18@obj2ast_ke:
$LN17@obj2ast_ke:

; 6667 :         Py_CLEAR(tmp);

  000b1	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000b7	74 47		 je	 SHORT $LN14@obj2ast_ke
  000b9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c1	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tmp$[rsp]
  000c6	41 b8 0b 1a 00
	00		 mov	 r8d, 6667		; 00001a0bH
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PHJHFCNC@obj2ast_keyword?$AA@
  000da	e8 00 00 00 00	 call	 _PyParallel_Guard
  000df	85 c0		 test	 eax, eax
  000e1	75 1d		 jne	 SHORT $LN14@obj2ast_ke
  000e3	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  000e8	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$27995[rsp], rax
  000ed	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  000f6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$27995[rsp]
  000fb	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@obj2ast_ke:
  00100	33 c0		 xor	 eax, eax
  00102	85 c0		 test	 eax, eax
  00104	75 ab		 jne	 SHORT $LN17@obj2ast_ke

; 6668 :     } else {

  00106	eb 1d		 jmp	 SHORT $LN13@obj2ast_ke
$LN20@obj2ast_ke:

; 6669 :         PyErr_SetString(PyExc_TypeError, "required field \"arg\" missing from keyword");

  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@PINDPDIB@required?5field?5?$CCarg?$CC?5missing?5fro@
  0010f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00116	e8 00 00 00 00	 call	 PyErr_SetString

; 6670 :         return 1;

  0011b	b8 01 00 00 00	 mov	 eax, 1
  00120	e9 49 01 00 00	 jmp	 $LN21@obj2ast_ke
$LN13@obj2ast_ke:

; 6671 :     }
; 6672 :     if (_PyObject_HasAttrId(obj, &PyId_value)) {

  00125	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  0012a	8b c0		 mov	 eax, eax
  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00132	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0013b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0013f	48 8b d0	 mov	 rdx, rax
  00142	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0014a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0014f	85 c0		 test	 eax, eax
  00151	0f 84 ba 00 00
	00		 je	 $LN12@obj2ast_ke

; 6673 :         int res;
; 6674 :         tmp = _PyObject_GetAttrId(obj, &PyId_value);

  00157	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_value
  0015c	8b c0		 mov	 eax, eax
  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00164	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0016d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00171	48 8b d0	 mov	 rdx, rax
  00174	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0017c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00181	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 6675 :         if (tmp == NULL) goto failed;

  00186	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0018c	75 05		 jne	 SHORT $LN11@obj2ast_ke
  0018e	e9 be 00 00 00	 jmp	 $failed$27988
$LN11@obj2ast_ke:

; 6676 :         res = obj2ast_expr(tmp, &value, arena);

  00193	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0019b	48 8d 54 24 30	 lea	 rdx, QWORD PTR value$[rsp]
  001a0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tmp$[rsp]
  001a5	e8 00 00 00 00	 call	 obj2ast_expr
  001aa	89 44 24 58	 mov	 DWORD PTR res$28002[rsp], eax

; 6677 :         if (res != 0) goto failed;

  001ae	83 7c 24 58 00	 cmp	 DWORD PTR res$28002[rsp], 0
  001b3	74 05		 je	 SHORT $LN10@obj2ast_ke
  001b5	e9 97 00 00 00	 jmp	 $failed$27988
$LN10@obj2ast_ke:
$LN9@obj2ast_ke:

; 6678 :         Py_CLEAR(tmp);

  001ba	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001c0	74 47		 je	 SHORT $LN6@obj2ast_ke
  001c2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ca	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tmp$[rsp]
  001cf	41 b8 16 1a 00
	00		 mov	 r8d, 6678		; 00001a16H
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PHJHFCNC@obj2ast_keyword?$AA@
  001e3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e8	85 c0		 test	 eax, eax
  001ea	75 1d		 jne	 SHORT $LN6@obj2ast_ke
  001ec	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  001f1	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$28010[rsp], rax
  001f6	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  001ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$28010[rsp]
  00204	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@obj2ast_ke:
  00209	33 c0		 xor	 eax, eax
  0020b	85 c0		 test	 eax, eax
  0020d	75 ab		 jne	 SHORT $LN9@obj2ast_ke

; 6679 :     } else {

  0020f	eb 1a		 jmp	 SHORT $LN5@obj2ast_ke
$LN12@obj2ast_ke:

; 6680 :         PyErr_SetString(PyExc_TypeError, "required field \"value\" missing from keyword");

  00211	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@HMJIBNCO@required?5field?5?$CCvalue?$CC?5missing?5f@
  00218	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0021f	e8 00 00 00 00	 call	 PyErr_SetString

; 6681 :         return 1;

  00224	b8 01 00 00 00	 mov	 eax, 1
  00229	eb 43		 jmp	 SHORT $LN21@obj2ast_ke
$LN5@obj2ast_ke:

; 6682 :     }
; 6683 :     *out = keyword(arg, value, arena);

  0022b	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00233	48 8b 54 24 30	 mov	 rdx, QWORD PTR value$[rsp]
  00238	48 8b 4c 24 38	 mov	 rcx, QWORD PTR arg$[rsp]
  0023d	e8 00 00 00 00	 call	 _Py_keyword
  00242	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  0024a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 6684 :     return 0;

  0024d	33 c0		 xor	 eax, eax
  0024f	eb 1d		 jmp	 SHORT $LN21@obj2ast_ke
$failed$27988:
$LN4@obj2ast_ke:

; 6685 : failed:
; 6686 :     Py_XDECREF(tmp);

  00251	48 83 7c 24 40
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00257	74 0a		 je	 SHORT $LN1@obj2ast_ke
  00259	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tmp$[rsp]
  0025e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@obj2ast_ke:
  00263	33 c0		 xor	 eax, eax
  00265	85 c0		 test	 eax, eax
  00267	75 e8		 jne	 SHORT $LN4@obj2ast_ke

; 6687 :     return 1;

  00269	b8 01 00 00 00	 mov	 eax, 1
$LN21@obj2ast_ke:

; 6688 : }

  0026e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00272	c3		 ret	 0
obj2ast_keyword ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@HAJLLOEN@required?5field?5?$CCname?$CC?5missing?5fr@ ; `string'
PUBLIC	??_C@_0O@LGAOEHDE@obj2ast_alias?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_alias DD imagerel obj2ast_alias
	DD	imagerel obj2ast_alias+610
	DD	imagerel $unwind$obj2ast_alias
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_alias DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0CJ@HAJLLOEN@required?5field?5?$CCname?$CC?5missing?5fr@
CONST	SEGMENT
??_C@_0CJ@HAJLLOEN@required?5field?5?$CCname?$CC?5missing?5fr@ DB 'requir'
	DB	'ed field "name" missing from alias', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LGAOEHDE@obj2ast_alias?$AA@
CONST	SEGMENT
??_C@_0O@LGAOEHDE@obj2ast_alias?$AA@ DB 'obj2ast_alias', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_alias
_TEXT	SEGMENT
asname$ = 48
tmp$ = 56
name$ = 64
res$28033 = 72
_py_tmp$28043 = 80
res$28050 = 88
_py_tmp$28058 = 96
obj$ = 128
out$ = 136
arena$ = 144
obj2ast_alias PROC					; COMDAT

; 6692 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 6693 :     PyObject* tmp = NULL;

  00013	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 6694 :     identifier name;
; 6695 :     identifier asname;
; 6696 : 
; 6697 :     if (_PyObject_HasAttrId(obj, &PyId_name)) {

  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  00021	8b c0		 mov	 eax, eax
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00029	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00032	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00036	48 8b d0	 mov	 rdx, rax
  00039	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00041	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00046	85 c0		 test	 eax, eax
  00048	0f 84 ba 00 00
	00		 je	 $LN20@obj2ast_al

; 6698 :         int res;
; 6699 :         tmp = _PyObject_GetAttrId(obj, &PyId_name);

  0004e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  00053	8b c0		 mov	 eax, eax
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00064	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00068	48 8b d0	 mov	 rdx, rax
  0006b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00073	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00078	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 6700 :         if (tmp == NULL) goto failed;

  0007d	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00083	75 05		 jne	 SHORT $LN19@obj2ast_al
  00085	e9 b6 01 00 00	 jmp	 $failed$28036
$LN19@obj2ast_al:

; 6701 :         res = obj2ast_identifier(tmp, &name, arena);

  0008a	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00092	48 8d 54 24 40	 lea	 rdx, QWORD PTR name$[rsp]
  00097	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  0009c	e8 00 00 00 00	 call	 obj2ast_identifier
  000a1	89 44 24 48	 mov	 DWORD PTR res$28033[rsp], eax

; 6702 :         if (res != 0) goto failed;

  000a5	83 7c 24 48 00	 cmp	 DWORD PTR res$28033[rsp], 0
  000aa	74 05		 je	 SHORT $LN18@obj2ast_al
  000ac	e9 8f 01 00 00	 jmp	 $failed$28036
$LN18@obj2ast_al:
$LN17@obj2ast_al:

; 6703 :         Py_CLEAR(tmp);

  000b1	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000b7	74 47		 je	 SHORT $LN14@obj2ast_al
  000b9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c1	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp$[rsp]
  000c6	41 b8 2f 1a 00
	00		 mov	 r8d, 6703		; 00001a2fH
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LGAOEHDE@obj2ast_alias?$AA@
  000da	e8 00 00 00 00	 call	 _PyParallel_Guard
  000df	85 c0		 test	 eax, eax
  000e1	75 1d		 jne	 SHORT $LN14@obj2ast_al
  000e3	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  000e8	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$28043[rsp], rax
  000ed	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  000f6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$28043[rsp]
  000fb	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@obj2ast_al:
  00100	33 c0		 xor	 eax, eax
  00102	85 c0		 test	 eax, eax
  00104	75 ab		 jne	 SHORT $LN17@obj2ast_al

; 6704 :     } else {

  00106	eb 1d		 jmp	 SHORT $LN13@obj2ast_al
$LN20@obj2ast_al:

; 6705 :         PyErr_SetString(PyExc_TypeError, "required field \"name\" missing from alias");

  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HAJLLOEN@required?5field?5?$CCname?$CC?5missing?5fr@
  0010f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00116	e8 00 00 00 00	 call	 PyErr_SetString

; 6706 :         return 1;

  0011b	b8 01 00 00 00	 mov	 eax, 1
  00120	e9 38 01 00 00	 jmp	 $LN21@obj2ast_al
$LN13@obj2ast_al:

; 6707 :     }
; 6708 :     if (_PyObject_HasAttrId(obj, &PyId_asname)) {

  00125	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_asname
  0012a	8b c0		 mov	 eax, eax
  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00132	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0013b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0013f	48 8b d0	 mov	 rdx, rax
  00142	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0014a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0014f	85 c0		 test	 eax, eax
  00151	0f 84 ba 00 00
	00		 je	 $LN12@obj2ast_al

; 6709 :         int res;
; 6710 :         tmp = _PyObject_GetAttrId(obj, &PyId_asname);

  00157	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_asname
  0015c	8b c0		 mov	 eax, eax
  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00164	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0016d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00171	48 8b d0	 mov	 rdx, rax
  00174	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0017c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00181	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 6711 :         if (tmp == NULL) goto failed;

  00186	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0018c	75 05		 jne	 SHORT $LN11@obj2ast_al
  0018e	e9 ad 00 00 00	 jmp	 $failed$28036
$LN11@obj2ast_al:

; 6712 :         res = obj2ast_identifier(tmp, &asname, arena);

  00193	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0019b	48 8d 54 24 30	 lea	 rdx, QWORD PTR asname$[rsp]
  001a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  001a5	e8 00 00 00 00	 call	 obj2ast_identifier
  001aa	89 44 24 58	 mov	 DWORD PTR res$28050[rsp], eax

; 6713 :         if (res != 0) goto failed;

  001ae	83 7c 24 58 00	 cmp	 DWORD PTR res$28050[rsp], 0
  001b3	74 05		 je	 SHORT $LN10@obj2ast_al
  001b5	e9 86 00 00 00	 jmp	 $failed$28036
$LN10@obj2ast_al:
$LN9@obj2ast_al:

; 6714 :         Py_CLEAR(tmp);

  001ba	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001c0	74 47		 je	 SHORT $LN6@obj2ast_al
  001c2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ca	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp$[rsp]
  001cf	41 b8 3a 1a 00
	00		 mov	 r8d, 6714		; 00001a3aH
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LGAOEHDE@obj2ast_alias?$AA@
  001e3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e8	85 c0		 test	 eax, eax
  001ea	75 1d		 jne	 SHORT $LN6@obj2ast_al
  001ec	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  001f1	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$28058[rsp], rax
  001f6	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  001ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$28058[rsp]
  00204	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@obj2ast_al:
  00209	33 c0		 xor	 eax, eax
  0020b	85 c0		 test	 eax, eax
  0020d	75 ab		 jne	 SHORT $LN9@obj2ast_al

; 6715 :     } else {

  0020f	eb 09		 jmp	 SHORT $LN5@obj2ast_al
$LN12@obj2ast_al:

; 6716 :         asname = NULL;

  00211	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR asname$[rsp], 0
$LN5@obj2ast_al:

; 6717 :     }
; 6718 :     *out = alias(name, asname, arena);

  0021a	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00222	48 8b 54 24 30	 mov	 rdx, QWORD PTR asname$[rsp]
  00227	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0022c	e8 00 00 00 00	 call	 _Py_alias
  00231	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00239	48 89 01	 mov	 QWORD PTR [rcx], rax

; 6719 :     return 0;

  0023c	33 c0		 xor	 eax, eax
  0023e	eb 1d		 jmp	 SHORT $LN21@obj2ast_al
$failed$28036:
$LN4@obj2ast_al:

; 6720 : failed:
; 6721 :     Py_XDECREF(tmp);

  00240	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00246	74 0a		 je	 SHORT $LN1@obj2ast_al
  00248	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  0024d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@obj2ast_al:
  00252	33 c0		 xor	 eax, eax
  00254	85 c0		 test	 eax, eax
  00256	75 e8		 jne	 SHORT $LN4@obj2ast_al

; 6722 :     return 1;

  00258	b8 01 00 00 00	 mov	 eax, 1
$LN21@obj2ast_al:

; 6723 : }

  0025d	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00261	c3		 ret	 0
obj2ast_alias ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@NEPNEKJG@required?5field?5?$CCcontext_expr?$CC?5mi@ ; `string'
PUBLIC	??_C@_0BB@JNJMIEKP@obj2ast_withitem?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$obj2ast_withitem DD imagerel obj2ast_withitem
	DD	imagerel obj2ast_withitem+610
	DD	imagerel $unwind$obj2ast_withitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$obj2ast_withitem DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0DE@NEPNEKJG@required?5field?5?$CCcontext_expr?$CC?5mi@
CONST	SEGMENT
??_C@_0DE@NEPNEKJG@required?5field?5?$CCcontext_expr?$CC?5mi@ DB 'require'
	DB	'd field "context_expr" missing from withitem', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JNJMIEKP@obj2ast_withitem?$AA@
CONST	SEGMENT
??_C@_0BB@JNJMIEKP@obj2ast_withitem?$AA@ DB 'obj2ast_withitem', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT obj2ast_withitem
_TEXT	SEGMENT
optional_vars$ = 48
tmp$ = 56
context_expr$ = 64
res$28081 = 72
_py_tmp$28091 = 80
res$28098 = 88
_py_tmp$28106 = 96
obj$ = 128
out$ = 136
arena$ = 144
obj2ast_withitem PROC					; COMDAT

; 6727 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 6728 :     PyObject* tmp = NULL;

  00013	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0

; 6729 :     expr_ty context_expr;
; 6730 :     expr_ty optional_vars;
; 6731 : 
; 6732 :     if (_PyObject_HasAttrId(obj, &PyId_context_expr)) {

  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_context_expr
  00021	8b c0		 mov	 eax, eax
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00029	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00032	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00036	48 8b d0	 mov	 rdx, rax
  00039	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00041	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00046	85 c0		 test	 eax, eax
  00048	0f 84 ba 00 00
	00		 je	 $LN20@obj2ast_wi

; 6733 :         int res;
; 6734 :         tmp = _PyObject_GetAttrId(obj, &PyId_context_expr);

  0004e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_context_expr
  00053	8b c0		 mov	 eax, eax
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00064	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00068	48 8b d0	 mov	 rdx, rax
  0006b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00073	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00078	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 6735 :         if (tmp == NULL) goto failed;

  0007d	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00083	75 05		 jne	 SHORT $LN19@obj2ast_wi
  00085	e9 b6 01 00 00	 jmp	 $failed$28084
$LN19@obj2ast_wi:

; 6736 :         res = obj2ast_expr(tmp, &context_expr, arena);

  0008a	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00092	48 8d 54 24 40	 lea	 rdx, QWORD PTR context_expr$[rsp]
  00097	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  0009c	e8 00 00 00 00	 call	 obj2ast_expr
  000a1	89 44 24 48	 mov	 DWORD PTR res$28081[rsp], eax

; 6737 :         if (res != 0) goto failed;

  000a5	83 7c 24 48 00	 cmp	 DWORD PTR res$28081[rsp], 0
  000aa	74 05		 je	 SHORT $LN18@obj2ast_wi
  000ac	e9 8f 01 00 00	 jmp	 $failed$28084
$LN18@obj2ast_wi:
$LN17@obj2ast_wi:

; 6738 :         Py_CLEAR(tmp);

  000b1	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000b7	74 47		 je	 SHORT $LN14@obj2ast_wi
  000b9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c1	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp$[rsp]
  000c6	41 b8 52 1a 00
	00		 mov	 r8d, 6738		; 00001a52H
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JNJMIEKP@obj2ast_withitem?$AA@
  000da	e8 00 00 00 00	 call	 _PyParallel_Guard
  000df	85 c0		 test	 eax, eax
  000e1	75 1d		 jne	 SHORT $LN14@obj2ast_wi
  000e3	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  000e8	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$28091[rsp], rax
  000ed	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  000f6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$28091[rsp]
  000fb	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@obj2ast_wi:
  00100	33 c0		 xor	 eax, eax
  00102	85 c0		 test	 eax, eax
  00104	75 ab		 jne	 SHORT $LN17@obj2ast_wi

; 6739 :     } else {

  00106	eb 1d		 jmp	 SHORT $LN13@obj2ast_wi
$LN20@obj2ast_wi:

; 6740 :         PyErr_SetString(PyExc_TypeError, "required field \"context_expr\" missing from withitem");

  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@NEPNEKJG@required?5field?5?$CCcontext_expr?$CC?5mi@
  0010f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00116	e8 00 00 00 00	 call	 PyErr_SetString

; 6741 :         return 1;

  0011b	b8 01 00 00 00	 mov	 eax, 1
  00120	e9 38 01 00 00	 jmp	 $LN21@obj2ast_wi
$LN13@obj2ast_wi:

; 6742 :     }
; 6743 :     if (_PyObject_HasAttrId(obj, &PyId_optional_vars)) {

  00125	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_optional_vars
  0012a	8b c0		 mov	 eax, eax
  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00132	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0013b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0013f	48 8b d0	 mov	 rdx, rax
  00142	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0014a	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0014f	85 c0		 test	 eax, eax
  00151	0f 84 ba 00 00
	00		 je	 $LN12@obj2ast_wi

; 6744 :         int res;
; 6745 :         tmp = _PyObject_GetAttrId(obj, &PyId_optional_vars);

  00157	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_optional_vars
  0015c	8b c0		 mov	 eax, eax
  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00164	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0016d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00171	48 8b d0	 mov	 rdx, rax
  00174	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0017c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00181	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 6746 :         if (tmp == NULL) goto failed;

  00186	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0018c	75 05		 jne	 SHORT $LN11@obj2ast_wi
  0018e	e9 ad 00 00 00	 jmp	 $failed$28084
$LN11@obj2ast_wi:

; 6747 :         res = obj2ast_expr(tmp, &optional_vars, arena);

  00193	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  0019b	48 8d 54 24 30	 lea	 rdx, QWORD PTR optional_vars$[rsp]
  001a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  001a5	e8 00 00 00 00	 call	 obj2ast_expr
  001aa	89 44 24 58	 mov	 DWORD PTR res$28098[rsp], eax

; 6748 :         if (res != 0) goto failed;

  001ae	83 7c 24 58 00	 cmp	 DWORD PTR res$28098[rsp], 0
  001b3	74 05		 je	 SHORT $LN10@obj2ast_wi
  001b5	e9 86 00 00 00	 jmp	 $failed$28084
$LN10@obj2ast_wi:
$LN9@obj2ast_wi:

; 6749 :         Py_CLEAR(tmp);

  001ba	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001c0	74 47		 je	 SHORT $LN6@obj2ast_wi
  001c2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ca	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp$[rsp]
  001cf	41 b8 5d 1a 00
	00		 mov	 r8d, 6749		; 00001a5dH
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@KJIDLEJF@?4?4?2Python?2Python?9ast?4c?$AA@
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JNJMIEKP@obj2ast_withitem?$AA@
  001e3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e8	85 c0		 test	 eax, eax
  001ea	75 1d		 jne	 SHORT $LN6@obj2ast_wi
  001ec	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  001f1	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$28106[rsp], rax
  001f6	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  001ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$28106[rsp]
  00204	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@obj2ast_wi:
  00209	33 c0		 xor	 eax, eax
  0020b	85 c0		 test	 eax, eax
  0020d	75 ab		 jne	 SHORT $LN9@obj2ast_wi

; 6750 :     } else {

  0020f	eb 09		 jmp	 SHORT $LN5@obj2ast_wi
$LN12@obj2ast_wi:

; 6751 :         optional_vars = NULL;

  00211	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR optional_vars$[rsp], 0
$LN5@obj2ast_wi:

; 6752 :     }
; 6753 :     *out = withitem(context_expr, optional_vars, arena);

  0021a	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR arena$[rsp]
  00222	48 8b 54 24 30	 mov	 rdx, QWORD PTR optional_vars$[rsp]
  00227	48 8b 4c 24 40	 mov	 rcx, QWORD PTR context_expr$[rsp]
  0022c	e8 00 00 00 00	 call	 _Py_withitem
  00231	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  00239	48 89 01	 mov	 QWORD PTR [rcx], rax

; 6754 :     return 0;

  0023c	33 c0		 xor	 eax, eax
  0023e	eb 1d		 jmp	 SHORT $LN21@obj2ast_wi
$failed$28084:
$LN4@obj2ast_wi:

; 6755 : failed:
; 6756 :     Py_XDECREF(tmp);

  00240	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00246	74 0a		 je	 SHORT $LN1@obj2ast_wi
  00248	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  0024d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@obj2ast_wi:
  00252	33 c0		 xor	 eax, eax
  00254	85 c0		 test	 eax, eax
  00256	75 e8		 jne	 SHORT $LN4@obj2ast_wi

; 6757 :     return 1;

  00258	b8 01 00 00 00	 mov	 eax, 1
$LN21@obj2ast_wi:

; 6758 : }

  0025d	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00261	c3		 ret	 0
obj2ast_withitem ENDP
_TEXT	ENDS
PUBLIC	PyAST_Check
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyAST_Check DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$PyAST_Check
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyAST_Check DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyAST_Check
_TEXT	SEGMENT
obj$ = 48
PyAST_Check PROC					; COMDAT

; 6987 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 6988 :     init_types();

  00009	e8 00 00 00 00	 call	 init_types

; 6989 :     return PyObject_IsInstance(obj, (PyObject*)&AST_type);

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:AST_type
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0001a	e8 00 00 00 00	 call	 PyObject_IsInstance

; 6990 : }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
PyAST_Check ENDP
_TEXT	ENDS
END
