; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04KHDNNOGM@_md5?$AA@			; `string'
PUBLIC	??_C@_03PKBIKOHH@md5?$AA@			; `string'
PUBLIC	??_C@_06ICGJLFIM@string?$AA@			; `string'
PUBLIC	??_C@_08IOOPDBIF@_md5?4md5?$AA@			; `string'
PUBLIC	??_C@_0M@NPLIJFCD@digest_size?$AA@		; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_0L@EHHMJOPG@block_size?$AA@		; `string'
PUBLIC	??_C@_06HDLLMMEJ@update?$AA@			; `string'
PUBLIC	??_C@_09NNAIGNDA@hexdigest?$AA@			; `string'
PUBLIC	??_C@_06IJPNAHC@digest?$AA@			; `string'
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
;	COMDAT ??_C@_04KHDNNOGM@_md5?$AA@
CONST	SEGMENT
??_C@_04KHDNNOGM@_md5?$AA@ DB '_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PKBIKOHH@md5?$AA@
CONST	SEGMENT
??_C@_03PKBIKOHH@md5?$AA@ DB 'md5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICGJLFIM@string?$AA@
CONST	SEGMENT
??_C@_06ICGJLFIM@string?$AA@ DB 'string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IOOPDBIF@_md5?4md5?$AA@
CONST	SEGMENT
??_C@_08IOOPDBIF@_md5?4md5?$AA@ DB '_md5.md5', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NPLIJFCD@digest_size?$AA@
CONST	SEGMENT
??_C@_0M@NPLIJFCD@digest_size?$AA@ DB 'digest_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EHHMJOPG@block_size?$AA@
CONST	SEGMENT
??_C@_0L@EHHMJOPG@block_size?$AA@ DB 'block_size', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDLLMMEJ@update?$AA@
CONST	SEGMENT
??_C@_06HDLLMMEJ@update?$AA@ DB 'update', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NNAIGNDA@hexdigest?$AA@
CONST	SEGMENT
??_C@_09NNAIGNDA@hexdigest?$AA@ DB 'hexdigest', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJPNAHC@digest?$AA@
CONST	SEGMENT
??_C@_06IJPNAHC@digest?$AA@ DB 'digest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
MD5_copy__doc__ DB 'Return a copy of the hash object.', 00H
	ORG $+6
MD5_digest__doc__ DB 'Return the digest value as a string of binary data.'
	DB	00H
	ORG $+4
MD5_hexdigest__doc__ DB 'Return the digest value as a string of hexadecim'
	DB	'al digits.', 00H
	ORG $+5
MD5_update__doc__ DB 'Update this hash object''s state with the provided '
	DB	'string.', 00H
	ORG $+6
MD5_methods DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:MD5_copy
	DD	04H
	ORG $+4
	DQ	FLAT:MD5_copy__doc__
	DQ	FLAT:??_C@_06IJPNAHC@digest?$AA@
	DQ	FLAT:MD5_digest
	DD	04H
	ORG $+4
	DQ	FLAT:MD5_digest__doc__
	DQ	FLAT:??_C@_09NNAIGNDA@hexdigest?$AA@
	DQ	FLAT:MD5_hexdigest
	DD	04H
	ORG $+4
	DQ	FLAT:MD5_hexdigest__doc__
	DQ	FLAT:??_C@_06HDLLMMEJ@update?$AA@
	DQ	FLAT:MD5_update
	DD	01H
	ORG $+4
	DQ	FLAT:MD5_update__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
MD5_getseters DQ FLAT:??_C@_0L@EHHMJOPG@block_size?$AA@
	DQ	FLAT:MD5_get_block_size
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:MD5_get_name
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0M@NPLIJFCD@digest_size?$AA@
	DQ	FLAT:md5_get_digest_size
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
MD5type	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08IOOPDBIF@_md5?4md5?$AA@
	DQ	00000000000000c0H
	DQ	0000000000000000H
	DQ	FLAT:MD5_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:MD5_methods
	DQ	0000000000000000H
	DQ	FLAT:MD5_getseters
	ORG $+136
MD5_new__doc__ DB 'Return a new MD5 hash object; optionally initialized w'
	DB	'ith a string.', 00H
	ORG $+4
?kwlist@?1??MD5_new@@9@9 DQ FLAT:??_C@_06ICGJLFIM@string?$AA@ ; `MD5_new'::`2'::kwlist
	DQ	0000000000000000H
	ORG $+8
MD5_functions DQ FLAT:??_C@_03PKBIKOHH@md5?$AA@
	DQ	FLAT:MD5_new
	DD	03H
	ORG $+4
	DQ	FLAT:MD5_new__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_md5module DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04KHDNNOGM@_md5?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:MD5_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
EXTRN	_PyObject_DebugFree:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\md5module.c
pdata	SEGMENT
$pdata$MD5_dealloc DD imagerel MD5_dealloc
	DD	imagerel MD5_dealloc+24
	DD	imagerel $unwind$MD5_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MD5_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT MD5_dealloc
_TEXT	SEGMENT
ptr$ = 48
MD5_dealloc PROC					; COMDAT

; 332  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 333  :     PyObject_Del(ptr);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ptr$[rsp]
  0000e	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 334  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
MD5_dealloc ENDP
_TEXT	ENDS
PUBLIC	$T21051
;	COMDAT pdata
pdata	SEGMENT
$pdata$MD5_copy DD imagerel MD5_copy
	DD	imagerel MD5_copy+152
	DD	imagerel $unwind$MD5_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MD5_copy DD 041301H
	DD	0130113H
	DD	0600b700cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT MD5_copy
_TEXT	SEGMENT
newobj$ = 32
$T21051 = 40
self$ = 176
unused$ = 184
MD5_copy PROC						; COMDAT

; 343  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 344  :     MD5object *newobj;
; 345  : 
; 346  :     if (Py_TYPE(self) == &MD5type) {

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:MD5type
  0001a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00022	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00026	75 18		 jne	 SHORT $LN4@MD5_copy

; 347  :         if ( (newobj = newMD5object())==NULL)

  00028	e8 00 00 00 00	 call	 newMD5object
  0002d	48 89 44 24 20	 mov	 QWORD PTR newobj$[rsp], rax
  00032	48 83 7c 24 20
	00		 cmp	 QWORD PTR newobj$[rsp], 0
  00038	75 04		 jne	 SHORT $LN3@MD5_copy

; 348  :             return NULL;

  0003a	33 c0		 xor	 eax, eax
  0003c	eb 50		 jmp	 SHORT $LN5@MD5_copy
$LN3@MD5_copy:

; 349  :     } else {

  0003e	eb 16		 jmp	 SHORT $LN2@MD5_copy
$LN4@MD5_copy:

; 350  :         if ( (newobj = newMD5object())==NULL)

  00040	e8 00 00 00 00	 call	 newMD5object
  00045	48 89 44 24 20	 mov	 QWORD PTR newobj$[rsp], rax
  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR newobj$[rsp], 0
  00050	75 04		 jne	 SHORT $LN1@MD5_copy

; 351  :             return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 38		 jmp	 SHORT $LN5@MD5_copy
$LN1@MD5_copy:
$LN2@MD5_copy:

; 352  :     }
; 353  : 
; 354  :     newobj->hash_state = self->hash_state;

  00056	48 8d 44 24 28	 lea	 rax, QWORD PTR $T21051[rsp]
  0005b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00063	48 8b f8	 mov	 rdi, rax
  00066	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  0006a	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0006f	f3 a4		 rep movsb
  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR newobj$[rsp]
  00076	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T21051[rsp]
  0007b	48 8d 78 60	 lea	 rdi, QWORD PTR [rax+96]
  0007f	48 8b f1	 mov	 rsi, rcx
  00082	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00087	f3 a4		 rep movsb

; 355  :     return (PyObject *)newobj;

  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR newobj$[rsp]
$LN5@MD5_copy:

; 356  : }

  0008e	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00095	5f		 pop	 rdi
  00096	5e		 pop	 rsi
  00097	c3		 ret	 0
MD5_copy ENDP
_TEXT	ENDS
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$newMD5object DD imagerel newMD5object
	DD	imagerel newMD5object+59
	DD	imagerel $unwind$newMD5object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newMD5object DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT newMD5object
_TEXT	SEGMENT
tv70 = 32
newMD5object PROC					; COMDAT

; 323  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 324  :     return (MD5object *)PyObject_New(MD5object, &MD5type);

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 13		 je	 SHORT $LN3@newMD5obje
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:MD5type
  00014	e8 00 00 00 00	 call	 _PxObject_New
  00019	48 89 44 24 20	 mov	 QWORD PTR tv70[rsp], rax
  0001e	eb 11		 jmp	 SHORT $LN4@newMD5obje
$LN3@newMD5obje:
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:MD5type
  00027	e8 00 00 00 00	 call	 _PyObject_New
  0002c	48 89 44 24 20	 mov	 QWORD PTR tv70[rsp], rax
$LN4@newMD5obje:
  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR tv70[rsp]

; 325  : }

  00036	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003a	c3		 ret	 0
newMD5object ENDP
_TEXT	ENDS
PUBLIC	$T21066
EXTRN	PyBytes_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$MD5_digest DD imagerel MD5_digest
	DD	imagerel MD5_digest+121
	DD	imagerel $unwind$MD5_digest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MD5_digest DD 041301H
	DD	01f0113H
	DD	0600b700cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT MD5_digest
_TEXT	SEGMENT
temp$ = 32
digest$ = 128
$T21066 = 144
self$ = 272
unused$ = 280
MD5_digest PROC						; COMDAT

; 363  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H

; 364  :     unsigned char digest[MD5_DIGESTSIZE];
; 365  :     struct md5_state temp;
; 366  : 
; 367  :     temp = self->hash_state;

  00013	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR $T21066[rsp]
  0001b	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00023	48 8b f8	 mov	 rdi, rax
  00026	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  0002a	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0002f	f3 a4		 rep movsb
  00031	48 8d 44 24 20	 lea	 rax, QWORD PTR temp$[rsp]
  00036	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T21066[rsp]
  0003e	48 8b f8	 mov	 rdi, rax
  00041	48 8b f1	 mov	 rsi, rcx
  00044	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00049	f3 a4		 rep movsb

; 368  :     md5_done(&temp, digest);

  0004b	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR digest$[rsp]
  00053	48 8d 4c 24 20	 lea	 rcx, QWORD PTR temp$[rsp]
  00058	e8 00 00 00 00	 call	 md5_done

; 369  :     return PyBytes_FromStringAndSize((const char *)digest, MD5_DIGESTSIZE);

  0005d	ba 10 00 00 00	 mov	 edx, 16
  00062	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR digest$[rsp]
  0006a	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize

; 370  : }

  0006f	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  00076	5f		 pop	 rdi
  00077	5e		 pop	 rsi
  00078	c3		 ret	 0
MD5_digest ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DO@EGCGGDMI@?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@JCEANMNF@?$AAo?$AAu?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@KFDLKFAL@?$AAm?$AAd?$AA5?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$md5_done DD imagerel md5_done
	DD	imagerel md5_done+763
	DD	imagerel $unwind$md5_done
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$md5_done DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1DO@EGCGGDMI@?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@EGCGGDMI@?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@ DB 'm'
	DB	00H, 'd', 00H, '5', 00H, '-', 00H, '>', 00H, 'c', 00H, 'u', 00H
	DB	'r', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H
	DB	'(', 00H, 'm', 00H, 'd', 00H, '5', 00H, '-', 00H, '>', 00H, 'b'
	DB	00H, 'u', 00H, 'f', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@JCEANMNF@?$AAo?$AAu?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@JCEANMNF@?$AAo?$AAu?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'o'
	DB	00H, 'u', 00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@KFDLKFAL@?$AAm?$AAd?$AA5?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@KFDLKFAL@?$AAm?$AAd?$AA5?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'm'
	DB	00H, 'd', 00H, '5', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'd', 00H, '5'
	DB	00H, 'm', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'l', 00H, 'e', 00H
	DB	'.', 00H, 'c', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT md5_done
_TEXT	SEGMENT
i$ = 32
md5$ = 64
out$ = 72
md5_done PROC						; COMDAT

; 268  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 269  :     int i;
; 270  : 
; 271  :     assert(md5 != NULL);

  0000e	48 83 7c 24 40
	00		 cmp	 QWORD PTR md5$[rsp], 0
  00014	75 1c		 jne	 SHORT $LN11@md5_done
  00016	41 b8 0f 01 00
	00		 mov	 r8d, 271		; 0000010fH
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KFDLKFAL@?$AAm?$AAd?$AA5?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00030	33 c0		 xor	 eax, eax
$LN11@md5_done:

; 272  :     assert(out != NULL);

  00032	48 83 7c 24 48
	00		 cmp	 QWORD PTR out$[rsp], 0
  00038	75 1c		 jne	 SHORT $LN12@md5_done
  0003a	41 b8 10 01 00
	00		 mov	 r8d, 272		; 00000110H
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@JCEANMNF@?$AAo?$AAu?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00054	33 c0		 xor	 eax, eax
$LN12@md5_done:

; 273  :     assert(md5->curlen < sizeof(md5->buf));

  00056	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  0005b	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0005e	48 83 f8 40	 cmp	 rax, 64			; 00000040H
  00062	72 1c		 jb	 SHORT $LN13@md5_done
  00064	41 b8 11 01 00
	00		 mov	 r8d, 273		; 00000111H
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@EGCGGDMI@?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007e	33 c0		 xor	 eax, eax
$LN13@md5_done:

; 274  : 
; 275  :     /* increase the length of the message */
; 276  :     md5->length += md5->curlen * 8;

  00080	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00085	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00088	c1 e0 03	 shl	 eax, 3
  0008b	8b c0		 mov	 eax, eax
  0008d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  00092	48 03 01	 add	 rax, QWORD PTR [rcx]
  00095	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  0009a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 277  : 
; 278  :     /* append the '1' bit */
; 279  :     md5->buf[md5->curlen++] = (unsigned char)0x80;

  0009d	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  000a2	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000a5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  000aa	c6 44 01 1c 80	 mov	 BYTE PTR [rcx+rax+28], 128 ; 00000080H
  000af	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  000b4	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000b7	ff c0		 inc	 eax
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  000be	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 280  : 
; 281  :     /* if the length is currently above 56 bytes we append zeros
; 282  :      * then compress.  Then we can fall back to padding zeros and length
; 283  :      * encoding like normal.
; 284  :      */
; 285  :     if (md5->curlen > 56) {

  000c1	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  000c6	83 78 18 38	 cmp	 DWORD PTR [rax+24], 56	; 00000038H
  000ca	76 53		 jbe	 SHORT $LN8@md5_done
$LN7@md5_done:

; 286  :         while (md5->curlen < 64) {

  000cc	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  000d1	83 78 18 40	 cmp	 DWORD PTR [rax+24], 64	; 00000040H
  000d5	73 26		 jae	 SHORT $LN6@md5_done

; 287  :             md5->buf[md5->curlen++] = (unsigned char)0;

  000d7	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  000dc	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000df	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  000e4	c6 44 01 1c 00	 mov	 BYTE PTR [rcx+rax+28], 0
  000e9	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  000ee	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000f1	ff c0		 inc	 eax
  000f3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  000f8	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 288  :         }

  000fb	eb cf		 jmp	 SHORT $LN7@md5_done
$LN6@md5_done:

; 289  :         md5_compress(md5, md5->buf);

  000fd	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00102	48 83 c0 1c	 add	 rax, 28
  00106	48 8b d0	 mov	 rdx, rax
  00109	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  0010e	e8 00 00 00 00	 call	 md5_compress

; 290  :         md5->curlen = 0;

  00113	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00118	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [rax+24], 0
$LN8@md5_done:
$LN5@md5_done:

; 291  :     }
; 292  : 
; 293  :     /* pad upto 56 bytes of zeroes */
; 294  :     while (md5->curlen < 56) {

  0011f	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00124	83 78 18 38	 cmp	 DWORD PTR [rax+24], 56	; 00000038H
  00128	73 26		 jae	 SHORT $LN4@md5_done

; 295  :         md5->buf[md5->curlen++] = (unsigned char)0;

  0012a	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  0012f	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00132	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  00137	c6 44 01 1c 00	 mov	 BYTE PTR [rcx+rax+28], 0
  0013c	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00141	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00144	ff c0		 inc	 eax
  00146	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  0014b	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 296  :     }

  0014e	eb cf		 jmp	 SHORT $LN5@md5_done
$LN4@md5_done:

; 297  : 
; 298  :     /* store length */
; 299  :     STORE64L(md5->length, md5->buf+56);

  00150	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00155	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00158	48 c1 f8 38	 sar	 rax, 56			; 00000038H
  0015c	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00162	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  00167	88 41 5b	 mov	 BYTE PTR [rcx+91], al
  0016a	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  0016f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00172	48 c1 f8 30	 sar	 rax, 48			; 00000030H
  00176	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0017c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  00181	88 41 5a	 mov	 BYTE PTR [rcx+90], al
  00184	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00189	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018c	48 c1 f8 28	 sar	 rax, 40			; 00000028H
  00190	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00196	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  0019b	88 41 59	 mov	 BYTE PTR [rcx+89], al
  0019e	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  001a3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a6	48 c1 f8 20	 sar	 rax, 32			; 00000020H
  001aa	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  001b0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  001b5	88 41 58	 mov	 BYTE PTR [rcx+88], al
  001b8	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  001bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c0	48 c1 f8 18	 sar	 rax, 24
  001c4	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  001ca	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  001cf	88 41 57	 mov	 BYTE PTR [rcx+87], al
  001d2	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  001d7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001da	48 c1 f8 10	 sar	 rax, 16
  001de	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  001e4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  001e9	88 41 56	 mov	 BYTE PTR [rcx+86], al
  001ec	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  001f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001f4	48 c1 f8 08	 sar	 rax, 8
  001f8	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  001fe	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  00203	88 41 55	 mov	 BYTE PTR [rcx+85], al
  00206	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  0020b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0020e	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00214	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  00219	88 41 54	 mov	 BYTE PTR [rcx+84], al

; 300  :     md5_compress(md5, md5->buf);

  0021c	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00221	48 83 c0 1c	 add	 rax, 28
  00225	48 8b d0	 mov	 rdx, rax
  00228	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  0022d	e8 00 00 00 00	 call	 md5_compress

; 301  : 
; 302  :     /* copy output */
; 303  :     for (i = 0; i < 4; i++) {

  00232	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0023a	eb 0a		 jmp	 SHORT $LN3@md5_done
$LN2@md5_done:
  0023c	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00240	ff c0		 inc	 eax
  00242	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN3@md5_done:
  00246	83 7c 24 20 04	 cmp	 DWORD PTR i$[rsp], 4
  0024b	0f 8d a5 00 00
	00		 jge	 $LN1@md5_done

; 304  :         STORE32L(md5->state[i], out+(4*i));

  00251	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00256	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  0025b	8b 44 81 08	 mov	 eax, DWORD PTR [rcx+rax*4+8]
  0025f	c1 e8 18	 shr	 eax, 24
  00262	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00267	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  0026b	c1 e1 02	 shl	 ecx, 2
  0026e	48 63 c9	 movsxd	 rcx, ecx
  00271	48 8b 54 24 48	 mov	 rdx, QWORD PTR out$[rsp]
  00276	88 44 0a 03	 mov	 BYTE PTR [rdx+rcx+3], al
  0027a	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0027f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  00284	8b 44 81 08	 mov	 eax, DWORD PTR [rcx+rax*4+8]
  00288	c1 e8 10	 shr	 eax, 16
  0028b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00290	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  00294	c1 e1 02	 shl	 ecx, 2
  00297	48 63 c9	 movsxd	 rcx, ecx
  0029a	48 8b 54 24 48	 mov	 rdx, QWORD PTR out$[rsp]
  0029f	88 44 0a 02	 mov	 BYTE PTR [rdx+rcx+2], al
  002a3	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  002a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  002ad	8b 44 81 08	 mov	 eax, DWORD PTR [rcx+rax*4+8]
  002b1	c1 e8 08	 shr	 eax, 8
  002b4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002b9	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  002bd	c1 e1 02	 shl	 ecx, 2
  002c0	48 63 c9	 movsxd	 rcx, ecx
  002c3	48 8b 54 24 48	 mov	 rdx, QWORD PTR out$[rsp]
  002c8	88 44 0a 01	 mov	 BYTE PTR [rdx+rcx+1], al
  002cc	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  002d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  002d6	8b 44 81 08	 mov	 eax, DWORD PTR [rcx+rax*4+8]
  002da	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002df	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  002e3	c1 e1 02	 shl	 ecx, 2
  002e6	48 63 c9	 movsxd	 rcx, ecx
  002e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR out$[rsp]
  002ee	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 305  :     }

  002f1	e9 46 ff ff ff	 jmp	 $LN2@md5_done
$LN1@md5_done:

; 306  : }

  002f6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002fa	c3		 ret	 0
md5_done ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@ICGGMGLK@?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$md5_compress DD imagerel md5_compress
	DD	imagerel md5_compress+5168
	DD	imagerel $unwind$md5_compress
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$md5_compress DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_1BI@ICGGMGLK@?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@ICGGMGLK@?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'b'
	DB	00H, 'u', 00H, 'f', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT md5_compress
_TEXT	SEGMENT
W$ = 32
a$ = 96
i$ = 100
b$ = 104
d$ = 108
c$ = 112
md5$ = 144
buf$ = 152
md5_compress PROC					; COMDAT

; 120  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 121  :     MD5_INT32 i, W[16], a, b, c, d;
; 122  : 
; 123  :     assert(md5 != NULL);

  00011	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR md5$[rsp], 0
  0001a	75 1c		 jne	 SHORT $LN6@md5_compre
  0001c	41 b8 7b 00 00
	00		 mov	 r8d, 123		; 0000007bH
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KFDLKFAL@?$AAm?$AAd?$AA5?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00036	33 c0		 xor	 eax, eax
$LN6@md5_compre:

; 124  :     assert(buf != NULL);

  00038	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp], 0
  00041	75 1c		 jne	 SHORT $LN7@md5_compre
  00043	41 b8 7c 00 00
	00		 mov	 r8d, 124		; 0000007cH
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@ICGGMGLK@?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005d	33 c0		 xor	 eax, eax
$LN7@md5_compre:

; 125  : 
; 126  :     /* copy the state into 512-bits into W[0..15] */
; 127  :     for (i = 0; i < 16; i++) {

  0005f	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00067	eb 0a		 jmp	 SHORT $LN3@md5_compre
$LN2@md5_compre:
  00069	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  0006d	ff c0		 inc	 eax
  0006f	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN3@md5_compre:
  00073	83 7c 24 64 10	 cmp	 DWORD PTR i$[rsp], 16
  00078	0f 83 8a 00 00
	00		 jae	 $LN1@md5_compre

; 128  :         LOAD32L(W[i], buf + (4*i));

  0007e	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  00082	c1 e0 02	 shl	 eax, 2
  00085	8b c0		 mov	 eax, eax
  00087	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0008f	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  00094	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00099	c1 e0 18	 shl	 eax, 24
  0009c	8b 4c 24 64	 mov	 ecx, DWORD PTR i$[rsp]
  000a0	c1 e1 02	 shl	 ecx, 2
  000a3	8b c9		 mov	 ecx, ecx
  000a5	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  000ad	0f b6 4c 0a 02	 movzx	 ecx, BYTE PTR [rdx+rcx+2]
  000b2	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000b8	c1 e1 10	 shl	 ecx, 16
  000bb	0b c1		 or	 eax, ecx
  000bd	8b 4c 24 64	 mov	 ecx, DWORD PTR i$[rsp]
  000c1	c1 e1 02	 shl	 ecx, 2
  000c4	8b c9		 mov	 ecx, ecx
  000c6	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  000ce	0f b6 4c 0a 01	 movzx	 ecx, BYTE PTR [rdx+rcx+1]
  000d3	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000d9	c1 e1 08	 shl	 ecx, 8
  000dc	0b c1		 or	 eax, ecx
  000de	8b 4c 24 64	 mov	 ecx, DWORD PTR i$[rsp]
  000e2	c1 e1 02	 shl	 ecx, 2
  000e5	8b c9		 mov	 ecx, ecx
  000e7	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  000ef	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000f3	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000f9	0b c1		 or	 eax, ecx
  000fb	8b 4c 24 64	 mov	 ecx, DWORD PTR i$[rsp]
  000ff	89 44 8c 20	 mov	 DWORD PTR W$[rsp+rcx*4], eax

; 129  :     }

  00103	e9 61 ff ff ff	 jmp	 $LN2@md5_compre
$LN1@md5_compre:

; 130  : 
; 131  :     /* copy state */
; 132  :     a = md5->state[0];

  00108	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR md5$[rsp]
  00110	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00113	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 133  :     b = md5->state[1];

  00117	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR md5$[rsp]
  0011f	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00122	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 134  :     c = md5->state[2];

  00126	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR md5$[rsp]
  0012e	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00131	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 135  :     d = md5->state[3];

  00135	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR md5$[rsp]
  0013d	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00140	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 136  : 
; 137  :     FF(a,b,c,d,W[0],7,0xd76aa478UL)

  00144	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00148	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0014c	33 c8		 xor	 ecx, eax
  0014e	8b c1		 mov	 eax, ecx
  00150	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00154	23 c8		 and	 ecx, eax
  00156	8b c1		 mov	 eax, ecx
  00158	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0015c	33 c8		 xor	 ecx, eax
  0015e	8b c1		 mov	 eax, ecx
  00160	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00164	03 c8		 add	 ecx, eax
  00166	8b c1		 mov	 eax, ecx
  00168	b9 78 a4 6a d7	 mov	 ecx, -680876936		; ffffffffd76aa478H
  0016d	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00171	8b 4c 24 20	 mov	 ecx, DWORD PTR W$[rsp]
  00175	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00178	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  0017c	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00180	c1 e0 07	 shl	 eax, 7
  00183	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00187	c1 e9 19	 shr	 ecx, 25
  0018a	0b c1		 or	 eax, ecx
  0018c	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  00190	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 138  :     FF(d,a,b,c,W[1],12,0xe8c7b756UL)

  00194	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00198	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  0019c	33 c8		 xor	 ecx, eax
  0019e	8b c1		 mov	 eax, ecx
  001a0	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  001a4	23 c8		 and	 ecx, eax
  001a6	8b c1		 mov	 eax, ecx
  001a8	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  001ac	33 c8		 xor	 ecx, eax
  001ae	8b c1		 mov	 eax, ecx
  001b0	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  001b4	03 c8		 add	 ecx, eax
  001b6	8b c1		 mov	 eax, ecx
  001b8	b9 56 b7 c7 e8	 mov	 ecx, -389564586		; ffffffffe8c7b756H
  001bd	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  001c1	8b 4c 24 24	 mov	 ecx, DWORD PTR W$[rsp+4]
  001c5	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  001c8	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  001cc	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  001d0	c1 e0 0c	 shl	 eax, 12
  001d3	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  001d7	c1 e9 14	 shr	 ecx, 20
  001da	0b c1		 or	 eax, ecx
  001dc	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  001e0	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 139  :     FF(c,d,a,b,W[2],17,0x242070dbUL)

  001e4	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  001e8	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  001ec	33 c8		 xor	 ecx, eax
  001ee	8b c1		 mov	 eax, ecx
  001f0	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  001f4	23 c8		 and	 ecx, eax
  001f6	8b c1		 mov	 eax, ecx
  001f8	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  001fc	33 c8		 xor	 ecx, eax
  001fe	8b c1		 mov	 eax, ecx
  00200	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00204	03 c8		 add	 ecx, eax
  00206	8b c1		 mov	 eax, ecx
  00208	8b 4c 24 28	 mov	 ecx, DWORD PTR W$[rsp+8]
  0020c	8d 84 08 db 70
	20 24		 lea	 eax, DWORD PTR [rax+rcx+606105819]
  00213	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  00217	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  0021b	c1 e0 11	 shl	 eax, 17
  0021e	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00222	c1 e9 0f	 shr	 ecx, 15
  00225	0b c1		 or	 eax, ecx
  00227	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  0022b	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 140  :     FF(b,c,d,a,W[3],22,0xc1bdceeeUL)

  0022f	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00233	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00237	33 c8		 xor	 ecx, eax
  00239	8b c1		 mov	 eax, ecx
  0023b	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0023f	23 c8		 and	 ecx, eax
  00241	8b c1		 mov	 eax, ecx
  00243	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00247	33 c8		 xor	 ecx, eax
  00249	8b c1		 mov	 eax, ecx
  0024b	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  0024f	03 c8		 add	 ecx, eax
  00251	8b c1		 mov	 eax, ecx
  00253	b9 ee ce bd c1	 mov	 ecx, -1044525330	; ffffffffc1bdceeeH
  00258	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  0025c	8b 4c 24 2c	 mov	 ecx, DWORD PTR W$[rsp+12]
  00260	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00263	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  00267	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  0026b	c1 e0 16	 shl	 eax, 22
  0026e	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00272	c1 e9 0a	 shr	 ecx, 10
  00275	0b c1		 or	 eax, ecx
  00277	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  0027b	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 141  :     FF(a,b,c,d,W[4],7,0xf57c0fafUL)

  0027f	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00283	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00287	33 c8		 xor	 ecx, eax
  00289	8b c1		 mov	 eax, ecx
  0028b	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  0028f	23 c8		 and	 ecx, eax
  00291	8b c1		 mov	 eax, ecx
  00293	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00297	33 c8		 xor	 ecx, eax
  00299	8b c1		 mov	 eax, ecx
  0029b	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  0029f	03 c8		 add	 ecx, eax
  002a1	8b c1		 mov	 eax, ecx
  002a3	b9 af 0f 7c f5	 mov	 ecx, -176418897		; fffffffff57c0fafH
  002a8	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  002ac	8b 4c 24 30	 mov	 ecx, DWORD PTR W$[rsp+16]
  002b0	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  002b3	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  002b7	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  002bb	c1 e0 07	 shl	 eax, 7
  002be	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  002c2	c1 e9 19	 shr	 ecx, 25
  002c5	0b c1		 or	 eax, ecx
  002c7	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  002cb	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 142  :     FF(d,a,b,c,W[5],12,0x4787c62aUL)

  002cf	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  002d3	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  002d7	33 c8		 xor	 ecx, eax
  002d9	8b c1		 mov	 eax, ecx
  002db	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  002df	23 c8		 and	 ecx, eax
  002e1	8b c1		 mov	 eax, ecx
  002e3	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  002e7	33 c8		 xor	 ecx, eax
  002e9	8b c1		 mov	 eax, ecx
  002eb	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  002ef	03 c8		 add	 ecx, eax
  002f1	8b c1		 mov	 eax, ecx
  002f3	8b 4c 24 34	 mov	 ecx, DWORD PTR W$[rsp+20]
  002f7	8d 84 08 2a c6
	87 47		 lea	 eax, DWORD PTR [rax+rcx+1200080426]
  002fe	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  00302	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00306	c1 e0 0c	 shl	 eax, 12
  00309	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0030d	c1 e9 14	 shr	 ecx, 20
  00310	0b c1		 or	 eax, ecx
  00312	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  00316	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 143  :     FF(c,d,a,b,W[6],17,0xa8304613UL)

  0031a	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  0031e	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00322	33 c8		 xor	 ecx, eax
  00324	8b c1		 mov	 eax, ecx
  00326	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0032a	23 c8		 and	 ecx, eax
  0032c	8b c1		 mov	 eax, ecx
  0032e	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00332	33 c8		 xor	 ecx, eax
  00334	8b c1		 mov	 eax, ecx
  00336	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0033a	03 c8		 add	 ecx, eax
  0033c	8b c1		 mov	 eax, ecx
  0033e	b9 13 46 30 a8	 mov	 ecx, -1473231341	; ffffffffa8304613H
  00343	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00347	8b 4c 24 38	 mov	 ecx, DWORD PTR W$[rsp+24]
  0034b	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  0034e	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  00352	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00356	c1 e0 11	 shl	 eax, 17
  00359	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0035d	c1 e9 0f	 shr	 ecx, 15
  00360	0b c1		 or	 eax, ecx
  00362	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  00366	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 144  :     FF(b,c,d,a,W[7],22,0xfd469501UL)

  0036a	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  0036e	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00372	33 c8		 xor	 ecx, eax
  00374	8b c1		 mov	 eax, ecx
  00376	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0037a	23 c8		 and	 ecx, eax
  0037c	8b c1		 mov	 eax, ecx
  0037e	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00382	33 c8		 xor	 ecx, eax
  00384	8b c1		 mov	 eax, ecx
  00386	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  0038a	03 c8		 add	 ecx, eax
  0038c	8b c1		 mov	 eax, ecx
  0038e	b9 01 95 46 fd	 mov	 ecx, -45705983		; fffffffffd469501H
  00393	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00397	8b 4c 24 3c	 mov	 ecx, DWORD PTR W$[rsp+28]
  0039b	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  0039e	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  003a2	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  003a6	c1 e0 16	 shl	 eax, 22
  003a9	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  003ad	c1 e9 0a	 shr	 ecx, 10
  003b0	0b c1		 or	 eax, ecx
  003b2	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  003b6	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 145  :     FF(a,b,c,d,W[8],7,0x698098d8UL)

  003ba	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  003be	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  003c2	33 c8		 xor	 ecx, eax
  003c4	8b c1		 mov	 eax, ecx
  003c6	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  003ca	23 c8		 and	 ecx, eax
  003cc	8b c1		 mov	 eax, ecx
  003ce	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  003d2	33 c8		 xor	 ecx, eax
  003d4	8b c1		 mov	 eax, ecx
  003d6	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  003da	03 c8		 add	 ecx, eax
  003dc	8b c1		 mov	 eax, ecx
  003de	8b 4c 24 40	 mov	 ecx, DWORD PTR W$[rsp+32]
  003e2	8d 84 08 d8 98
	80 69		 lea	 eax, DWORD PTR [rax+rcx+1770035416]
  003e9	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  003ed	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  003f1	c1 e0 07	 shl	 eax, 7
  003f4	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  003f8	c1 e9 19	 shr	 ecx, 25
  003fb	0b c1		 or	 eax, ecx
  003fd	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  00401	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 146  :     FF(d,a,b,c,W[9],12,0x8b44f7afUL)

  00405	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00409	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  0040d	33 c8		 xor	 ecx, eax
  0040f	8b c1		 mov	 eax, ecx
  00411	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00415	23 c8		 and	 ecx, eax
  00417	8b c1		 mov	 eax, ecx
  00419	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0041d	33 c8		 xor	 ecx, eax
  0041f	8b c1		 mov	 eax, ecx
  00421	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00425	03 c8		 add	 ecx, eax
  00427	8b c1		 mov	 eax, ecx
  00429	b9 af f7 44 8b	 mov	 ecx, -1958414417	; ffffffff8b44f7afH
  0042e	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00432	8b 4c 24 44	 mov	 ecx, DWORD PTR W$[rsp+36]
  00436	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00439	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  0043d	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00441	c1 e0 0c	 shl	 eax, 12
  00444	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00448	c1 e9 14	 shr	 ecx, 20
  0044b	0b c1		 or	 eax, ecx
  0044d	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  00451	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 147  :     FF(c,d,a,b,W[10],17,0xffff5bb1UL)

  00455	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00459	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  0045d	33 c8		 xor	 ecx, eax
  0045f	8b c1		 mov	 eax, ecx
  00461	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00465	23 c8		 and	 ecx, eax
  00467	8b c1		 mov	 eax, ecx
  00469	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  0046d	33 c8		 xor	 ecx, eax
  0046f	8b c1		 mov	 eax, ecx
  00471	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00475	03 c8		 add	 ecx, eax
  00477	8b c1		 mov	 eax, ecx
  00479	b9 b1 5b ff ff	 mov	 ecx, -42063		; ffffffffffff5bb1H
  0047e	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00482	8b 4c 24 48	 mov	 ecx, DWORD PTR W$[rsp+40]
  00486	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00489	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  0048d	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00491	c1 e0 11	 shl	 eax, 17
  00494	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00498	c1 e9 0f	 shr	 ecx, 15
  0049b	0b c1		 or	 eax, ecx
  0049d	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  004a1	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 148  :     FF(b,c,d,a,W[11],22,0x895cd7beUL)

  004a5	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  004a9	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  004ad	33 c8		 xor	 ecx, eax
  004af	8b c1		 mov	 eax, ecx
  004b1	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  004b5	23 c8		 and	 ecx, eax
  004b7	8b c1		 mov	 eax, ecx
  004b9	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  004bd	33 c8		 xor	 ecx, eax
  004bf	8b c1		 mov	 eax, ecx
  004c1	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  004c5	03 c8		 add	 ecx, eax
  004c7	8b c1		 mov	 eax, ecx
  004c9	b9 be d7 5c 89	 mov	 ecx, -1990404162	; ffffffff895cd7beH
  004ce	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  004d2	8b 4c 24 4c	 mov	 ecx, DWORD PTR W$[rsp+44]
  004d6	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  004d9	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  004dd	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  004e1	c1 e0 16	 shl	 eax, 22
  004e4	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  004e8	c1 e9 0a	 shr	 ecx, 10
  004eb	0b c1		 or	 eax, ecx
  004ed	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  004f1	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 149  :     FF(a,b,c,d,W[12],7,0x6b901122UL)

  004f5	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  004f9	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  004fd	33 c8		 xor	 ecx, eax
  004ff	8b c1		 mov	 eax, ecx
  00501	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00505	23 c8		 and	 ecx, eax
  00507	8b c1		 mov	 eax, ecx
  00509	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0050d	33 c8		 xor	 ecx, eax
  0050f	8b c1		 mov	 eax, ecx
  00511	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00515	03 c8		 add	 ecx, eax
  00517	8b c1		 mov	 eax, ecx
  00519	8b 4c 24 50	 mov	 ecx, DWORD PTR W$[rsp+48]
  0051d	8d 84 08 22 11
	90 6b		 lea	 eax, DWORD PTR [rax+rcx+1804603682]
  00524	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  00528	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  0052c	c1 e0 07	 shl	 eax, 7
  0052f	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00533	c1 e9 19	 shr	 ecx, 25
  00536	0b c1		 or	 eax, ecx
  00538	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  0053c	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 150  :     FF(d,a,b,c,W[13],12,0xfd987193UL)

  00540	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00544	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00548	33 c8		 xor	 ecx, eax
  0054a	8b c1		 mov	 eax, ecx
  0054c	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00550	23 c8		 and	 ecx, eax
  00552	8b c1		 mov	 eax, ecx
  00554	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00558	33 c8		 xor	 ecx, eax
  0055a	8b c1		 mov	 eax, ecx
  0055c	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00560	03 c8		 add	 ecx, eax
  00562	8b c1		 mov	 eax, ecx
  00564	b9 93 71 98 fd	 mov	 ecx, -40341101		; fffffffffd987193H
  00569	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  0056d	8b 4c 24 54	 mov	 ecx, DWORD PTR W$[rsp+52]
  00571	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00574	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  00578	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  0057c	c1 e0 0c	 shl	 eax, 12
  0057f	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00583	c1 e9 14	 shr	 ecx, 20
  00586	0b c1		 or	 eax, ecx
  00588	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  0058c	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 151  :     FF(c,d,a,b,W[14],17,0xa679438eUL)

  00590	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00594	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00598	33 c8		 xor	 ecx, eax
  0059a	8b c1		 mov	 eax, ecx
  0059c	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  005a0	23 c8		 and	 ecx, eax
  005a2	8b c1		 mov	 eax, ecx
  005a4	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  005a8	33 c8		 xor	 ecx, eax
  005aa	8b c1		 mov	 eax, ecx
  005ac	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  005b0	03 c8		 add	 ecx, eax
  005b2	8b c1		 mov	 eax, ecx
  005b4	b9 8e 43 79 a6	 mov	 ecx, -1502002290	; ffffffffa679438eH
  005b9	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  005bd	8b 4c 24 58	 mov	 ecx, DWORD PTR W$[rsp+56]
  005c1	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  005c4	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  005c8	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  005cc	c1 e0 11	 shl	 eax, 17
  005cf	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  005d3	c1 e9 0f	 shr	 ecx, 15
  005d6	0b c1		 or	 eax, ecx
  005d8	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  005dc	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 152  :     FF(b,c,d,a,W[15],22,0x49b40821UL)

  005e0	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  005e4	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  005e8	33 c8		 xor	 ecx, eax
  005ea	8b c1		 mov	 eax, ecx
  005ec	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  005f0	23 c8		 and	 ecx, eax
  005f2	8b c1		 mov	 eax, ecx
  005f4	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  005f8	33 c8		 xor	 ecx, eax
  005fa	8b c1		 mov	 eax, ecx
  005fc	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00600	03 c8		 add	 ecx, eax
  00602	8b c1		 mov	 eax, ecx
  00604	8b 4c 24 5c	 mov	 ecx, DWORD PTR W$[rsp+60]
  00608	8d 84 08 21 08
	b4 49		 lea	 eax, DWORD PTR [rax+rcx+1236535329]
  0060f	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  00613	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00617	c1 e0 16	 shl	 eax, 22
  0061a	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  0061e	c1 e9 0a	 shr	 ecx, 10
  00621	0b c1		 or	 eax, ecx
  00623	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  00627	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 153  :     GG(a,b,c,d,W[1],5,0xf61e2562UL)

  0062b	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  0062f	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00633	33 c8		 xor	 ecx, eax
  00635	8b c1		 mov	 eax, ecx
  00637	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0063b	23 c8		 and	 ecx, eax
  0063d	8b c1		 mov	 eax, ecx
  0063f	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00643	33 c8		 xor	 ecx, eax
  00645	8b c1		 mov	 eax, ecx
  00647	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  0064b	03 c8		 add	 ecx, eax
  0064d	8b c1		 mov	 eax, ecx
  0064f	b9 62 25 1e f6	 mov	 ecx, -165796510		; fffffffff61e2562H
  00654	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00658	8b 4c 24 24	 mov	 ecx, DWORD PTR W$[rsp+4]
  0065c	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  0065f	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  00663	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00667	c1 e0 05	 shl	 eax, 5
  0066a	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  0066e	c1 e9 1b	 shr	 ecx, 27
  00671	0b c1		 or	 eax, ecx
  00673	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  00677	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 154  :     GG(d,a,b,c,W[6],9,0xc040b340UL)

  0067b	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  0067f	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00683	33 c8		 xor	 ecx, eax
  00685	8b c1		 mov	 eax, ecx
  00687	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0068b	23 c8		 and	 ecx, eax
  0068d	8b c1		 mov	 eax, ecx
  0068f	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00693	33 c8		 xor	 ecx, eax
  00695	8b c1		 mov	 eax, ecx
  00697	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0069b	03 c8		 add	 ecx, eax
  0069d	8b c1		 mov	 eax, ecx
  0069f	b9 40 b3 40 c0	 mov	 ecx, -1069501632	; ffffffffc040b340H
  006a4	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  006a8	8b 4c 24 38	 mov	 ecx, DWORD PTR W$[rsp+24]
  006ac	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  006af	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  006b3	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  006b7	c1 e0 09	 shl	 eax, 9
  006ba	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  006be	c1 e9 17	 shr	 ecx, 23
  006c1	0b c1		 or	 eax, ecx
  006c3	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  006c7	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 155  :     GG(c,d,a,b,W[11],14,0x265e5a51UL)

  006cb	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  006cf	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  006d3	33 c8		 xor	 ecx, eax
  006d5	8b c1		 mov	 eax, ecx
  006d7	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  006db	23 c8		 and	 ecx, eax
  006dd	8b c1		 mov	 eax, ecx
  006df	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  006e3	33 c8		 xor	 ecx, eax
  006e5	8b c1		 mov	 eax, ecx
  006e7	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  006eb	03 c8		 add	 ecx, eax
  006ed	8b c1		 mov	 eax, ecx
  006ef	8b 4c 24 4c	 mov	 ecx, DWORD PTR W$[rsp+44]
  006f3	8d 84 08 51 5a
	5e 26		 lea	 eax, DWORD PTR [rax+rcx+643717713]
  006fa	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  006fe	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00702	c1 e0 0e	 shl	 eax, 14
  00705	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00709	c1 e9 12	 shr	 ecx, 18
  0070c	0b c1		 or	 eax, ecx
  0070e	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  00712	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 156  :     GG(b,c,d,a,W[0],20,0xe9b6c7aaUL)

  00716	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  0071a	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0071e	33 c8		 xor	 ecx, eax
  00720	8b c1		 mov	 eax, ecx
  00722	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00726	23 c8		 and	 ecx, eax
  00728	8b c1		 mov	 eax, ecx
  0072a	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0072e	33 c8		 xor	 ecx, eax
  00730	8b c1		 mov	 eax, ecx
  00732	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00736	03 c8		 add	 ecx, eax
  00738	8b c1		 mov	 eax, ecx
  0073a	b9 aa c7 b6 e9	 mov	 ecx, -373897302		; ffffffffe9b6c7aaH
  0073f	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00743	8b 4c 24 20	 mov	 ecx, DWORD PTR W$[rsp]
  00747	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  0074a	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  0074e	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00752	c1 e0 14	 shl	 eax, 20
  00755	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00759	c1 e9 0c	 shr	 ecx, 12
  0075c	0b c1		 or	 eax, ecx
  0075e	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  00762	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 157  :     GG(a,b,c,d,W[5],5,0xd62f105dUL)

  00766	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  0076a	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0076e	33 c8		 xor	 ecx, eax
  00770	8b c1		 mov	 eax, ecx
  00772	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00776	23 c8		 and	 ecx, eax
  00778	8b c1		 mov	 eax, ecx
  0077a	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0077e	33 c8		 xor	 ecx, eax
  00780	8b c1		 mov	 eax, ecx
  00782	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00786	03 c8		 add	 ecx, eax
  00788	8b c1		 mov	 eax, ecx
  0078a	b9 5d 10 2f d6	 mov	 ecx, -701558691		; ffffffffd62f105dH
  0078f	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00793	8b 4c 24 34	 mov	 ecx, DWORD PTR W$[rsp+20]
  00797	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  0079a	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  0079e	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  007a2	c1 e0 05	 shl	 eax, 5
  007a5	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  007a9	c1 e9 1b	 shr	 ecx, 27
  007ac	0b c1		 or	 eax, ecx
  007ae	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  007b2	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 158  :     GG(d,a,b,c,W[10],9,0x02441453UL)

  007b6	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  007ba	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  007be	33 c8		 xor	 ecx, eax
  007c0	8b c1		 mov	 eax, ecx
  007c2	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  007c6	23 c8		 and	 ecx, eax
  007c8	8b c1		 mov	 eax, ecx
  007ca	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  007ce	33 c8		 xor	 ecx, eax
  007d0	8b c1		 mov	 eax, ecx
  007d2	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  007d6	03 c8		 add	 ecx, eax
  007d8	8b c1		 mov	 eax, ecx
  007da	8b 4c 24 48	 mov	 ecx, DWORD PTR W$[rsp+40]
  007de	8d 84 08 53 14
	44 02		 lea	 eax, DWORD PTR [rax+rcx+38016083]
  007e5	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  007e9	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  007ed	c1 e0 09	 shl	 eax, 9
  007f0	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  007f4	c1 e9 17	 shr	 ecx, 23
  007f7	0b c1		 or	 eax, ecx
  007f9	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  007fd	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 159  :     GG(c,d,a,b,W[15],14,0xd8a1e681UL)

  00801	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00805	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00809	33 c8		 xor	 ecx, eax
  0080b	8b c1		 mov	 eax, ecx
  0080d	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00811	23 c8		 and	 ecx, eax
  00813	8b c1		 mov	 eax, ecx
  00815	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00819	33 c8		 xor	 ecx, eax
  0081b	8b c1		 mov	 eax, ecx
  0081d	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00821	03 c8		 add	 ecx, eax
  00823	8b c1		 mov	 eax, ecx
  00825	b9 81 e6 a1 d8	 mov	 ecx, -660478335		; ffffffffd8a1e681H
  0082a	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  0082e	8b 4c 24 5c	 mov	 ecx, DWORD PTR W$[rsp+60]
  00832	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00835	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  00839	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  0083d	c1 e0 0e	 shl	 eax, 14
  00840	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00844	c1 e9 12	 shr	 ecx, 18
  00847	0b c1		 or	 eax, ecx
  00849	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  0084d	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 160  :     GG(b,c,d,a,W[4],20,0xe7d3fbc8UL)

  00851	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00855	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00859	33 c8		 xor	 ecx, eax
  0085b	8b c1		 mov	 eax, ecx
  0085d	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00861	23 c8		 and	 ecx, eax
  00863	8b c1		 mov	 eax, ecx
  00865	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00869	33 c8		 xor	 ecx, eax
  0086b	8b c1		 mov	 eax, ecx
  0086d	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00871	03 c8		 add	 ecx, eax
  00873	8b c1		 mov	 eax, ecx
  00875	b9 c8 fb d3 e7	 mov	 ecx, -405537848		; ffffffffe7d3fbc8H
  0087a	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  0087e	8b 4c 24 30	 mov	 ecx, DWORD PTR W$[rsp+16]
  00882	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00885	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  00889	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  0088d	c1 e0 14	 shl	 eax, 20
  00890	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00894	c1 e9 0c	 shr	 ecx, 12
  00897	0b c1		 or	 eax, ecx
  00899	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  0089d	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 161  :     GG(a,b,c,d,W[9],5,0x21e1cde6UL)

  008a1	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  008a5	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  008a9	33 c8		 xor	 ecx, eax
  008ab	8b c1		 mov	 eax, ecx
  008ad	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  008b1	23 c8		 and	 ecx, eax
  008b3	8b c1		 mov	 eax, ecx
  008b5	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  008b9	33 c8		 xor	 ecx, eax
  008bb	8b c1		 mov	 eax, ecx
  008bd	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  008c1	03 c8		 add	 ecx, eax
  008c3	8b c1		 mov	 eax, ecx
  008c5	8b 4c 24 44	 mov	 ecx, DWORD PTR W$[rsp+36]
  008c9	8d 84 08 e6 cd
	e1 21		 lea	 eax, DWORD PTR [rax+rcx+568446438]
  008d0	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  008d4	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  008d8	c1 e0 05	 shl	 eax, 5
  008db	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  008df	c1 e9 1b	 shr	 ecx, 27
  008e2	0b c1		 or	 eax, ecx
  008e4	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  008e8	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 162  :     GG(d,a,b,c,W[14],9,0xc33707d6UL)

  008ec	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  008f0	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  008f4	33 c8		 xor	 ecx, eax
  008f6	8b c1		 mov	 eax, ecx
  008f8	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  008fc	23 c8		 and	 ecx, eax
  008fe	8b c1		 mov	 eax, ecx
  00900	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00904	33 c8		 xor	 ecx, eax
  00906	8b c1		 mov	 eax, ecx
  00908	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0090c	03 c8		 add	 ecx, eax
  0090e	8b c1		 mov	 eax, ecx
  00910	b9 d6 07 37 c3	 mov	 ecx, -1019803690	; ffffffffc33707d6H
  00915	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00919	8b 4c 24 58	 mov	 ecx, DWORD PTR W$[rsp+56]
  0091d	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00920	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  00924	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00928	c1 e0 09	 shl	 eax, 9
  0092b	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0092f	c1 e9 17	 shr	 ecx, 23
  00932	0b c1		 or	 eax, ecx
  00934	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  00938	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 163  :     GG(c,d,a,b,W[3],14,0xf4d50d87UL)

  0093c	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00940	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00944	33 c8		 xor	 ecx, eax
  00946	8b c1		 mov	 eax, ecx
  00948	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  0094c	23 c8		 and	 ecx, eax
  0094e	8b c1		 mov	 eax, ecx
  00950	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00954	33 c8		 xor	 ecx, eax
  00956	8b c1		 mov	 eax, ecx
  00958	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0095c	03 c8		 add	 ecx, eax
  0095e	8b c1		 mov	 eax, ecx
  00960	b9 87 0d d5 f4	 mov	 ecx, -187363961		; fffffffff4d50d87H
  00965	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00969	8b 4c 24 2c	 mov	 ecx, DWORD PTR W$[rsp+12]
  0096d	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00970	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  00974	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00978	c1 e0 0e	 shl	 eax, 14
  0097b	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0097f	c1 e9 12	 shr	 ecx, 18
  00982	0b c1		 or	 eax, ecx
  00984	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  00988	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 164  :     GG(b,c,d,a,W[8],20,0x455a14edUL)

  0098c	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00990	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00994	33 c8		 xor	 ecx, eax
  00996	8b c1		 mov	 eax, ecx
  00998	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  0099c	23 c8		 and	 ecx, eax
  0099e	8b c1		 mov	 eax, ecx
  009a0	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  009a4	33 c8		 xor	 ecx, eax
  009a6	8b c1		 mov	 eax, ecx
  009a8	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  009ac	03 c8		 add	 ecx, eax
  009ae	8b c1		 mov	 eax, ecx
  009b0	8b 4c 24 40	 mov	 ecx, DWORD PTR W$[rsp+32]
  009b4	8d 84 08 ed 14
	5a 45		 lea	 eax, DWORD PTR [rax+rcx+1163531501]
  009bb	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  009bf	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  009c3	c1 e0 14	 shl	 eax, 20
  009c6	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  009ca	c1 e9 0c	 shr	 ecx, 12
  009cd	0b c1		 or	 eax, ecx
  009cf	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  009d3	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 165  :     GG(a,b,c,d,W[13],5,0xa9e3e905UL)

  009d7	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  009db	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  009df	33 c8		 xor	 ecx, eax
  009e1	8b c1		 mov	 eax, ecx
  009e3	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  009e7	23 c8		 and	 ecx, eax
  009e9	8b c1		 mov	 eax, ecx
  009eb	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  009ef	33 c8		 xor	 ecx, eax
  009f1	8b c1		 mov	 eax, ecx
  009f3	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  009f7	03 c8		 add	 ecx, eax
  009f9	8b c1		 mov	 eax, ecx
  009fb	b9 05 e9 e3 a9	 mov	 ecx, -1444681467	; ffffffffa9e3e905H
  00a00	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00a04	8b 4c 24 54	 mov	 ecx, DWORD PTR W$[rsp+52]
  00a08	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00a0b	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  00a0f	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00a13	c1 e0 05	 shl	 eax, 5
  00a16	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00a1a	c1 e9 1b	 shr	 ecx, 27
  00a1d	0b c1		 or	 eax, ecx
  00a1f	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  00a23	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 166  :     GG(d,a,b,c,W[2],9,0xfcefa3f8UL)

  00a27	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00a2b	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00a2f	33 c8		 xor	 ecx, eax
  00a31	8b c1		 mov	 eax, ecx
  00a33	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00a37	23 c8		 and	 ecx, eax
  00a39	8b c1		 mov	 eax, ecx
  00a3b	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00a3f	33 c8		 xor	 ecx, eax
  00a41	8b c1		 mov	 eax, ecx
  00a43	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00a47	03 c8		 add	 ecx, eax
  00a49	8b c1		 mov	 eax, ecx
  00a4b	b9 f8 a3 ef fc	 mov	 ecx, -51403784		; fffffffffcefa3f8H
  00a50	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00a54	8b 4c 24 28	 mov	 ecx, DWORD PTR W$[rsp+8]
  00a58	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00a5b	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  00a5f	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00a63	c1 e0 09	 shl	 eax, 9
  00a66	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00a6a	c1 e9 17	 shr	 ecx, 23
  00a6d	0b c1		 or	 eax, ecx
  00a6f	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  00a73	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 167  :     GG(c,d,a,b,W[7],14,0x676f02d9UL)

  00a77	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00a7b	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00a7f	33 c8		 xor	 ecx, eax
  00a81	8b c1		 mov	 eax, ecx
  00a83	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00a87	23 c8		 and	 ecx, eax
  00a89	8b c1		 mov	 eax, ecx
  00a8b	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00a8f	33 c8		 xor	 ecx, eax
  00a91	8b c1		 mov	 eax, ecx
  00a93	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00a97	03 c8		 add	 ecx, eax
  00a99	8b c1		 mov	 eax, ecx
  00a9b	8b 4c 24 3c	 mov	 ecx, DWORD PTR W$[rsp+28]
  00a9f	8d 84 08 d9 02
	6f 67		 lea	 eax, DWORD PTR [rax+rcx+1735328473]
  00aa6	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  00aaa	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00aae	c1 e0 0e	 shl	 eax, 14
  00ab1	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00ab5	c1 e9 12	 shr	 ecx, 18
  00ab8	0b c1		 or	 eax, ecx
  00aba	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  00abe	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 168  :     GG(b,c,d,a,W[12],20,0x8d2a4c8aUL)

  00ac2	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00ac6	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00aca	33 c8		 xor	 ecx, eax
  00acc	8b c1		 mov	 eax, ecx
  00ace	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00ad2	23 c8		 and	 ecx, eax
  00ad4	8b c1		 mov	 eax, ecx
  00ad6	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00ada	33 c8		 xor	 ecx, eax
  00adc	8b c1		 mov	 eax, ecx
  00ade	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00ae2	03 c8		 add	 ecx, eax
  00ae4	8b c1		 mov	 eax, ecx
  00ae6	b9 8a 4c 2a 8d	 mov	 ecx, -1926607734	; ffffffff8d2a4c8aH
  00aeb	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00aef	8b 4c 24 50	 mov	 ecx, DWORD PTR W$[rsp+48]
  00af3	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00af6	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  00afa	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00afe	c1 e0 14	 shl	 eax, 20
  00b01	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00b05	c1 e9 0c	 shr	 ecx, 12
  00b08	0b c1		 or	 eax, ecx
  00b0a	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  00b0e	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 169  :     HH(a,b,c,d,W[5],4,0xfffa3942UL)

  00b12	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00b16	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00b1a	33 c8		 xor	 ecx, eax
  00b1c	8b c1		 mov	 eax, ecx
  00b1e	33 44 24 6c	 xor	 eax, DWORD PTR d$[rsp]
  00b22	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00b26	03 c8		 add	 ecx, eax
  00b28	8b c1		 mov	 eax, ecx
  00b2a	b9 42 39 fa ff	 mov	 ecx, -378558		; fffffffffffa3942H
  00b2f	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00b33	8b 4c 24 34	 mov	 ecx, DWORD PTR W$[rsp+20]
  00b37	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00b3a	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  00b3e	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00b42	c1 e0 04	 shl	 eax, 4
  00b45	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00b49	c1 e9 1c	 shr	 ecx, 28
  00b4c	0b c1		 or	 eax, ecx
  00b4e	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  00b52	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 170  :     HH(d,a,b,c,W[8],11,0x8771f681UL)

  00b56	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00b5a	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00b5e	33 c8		 xor	 ecx, eax
  00b60	8b c1		 mov	 eax, ecx
  00b62	33 44 24 70	 xor	 eax, DWORD PTR c$[rsp]
  00b66	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00b6a	03 c8		 add	 ecx, eax
  00b6c	8b c1		 mov	 eax, ecx
  00b6e	b9 81 f6 71 87	 mov	 ecx, -2022574463	; ffffffff8771f681H
  00b73	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00b77	8b 4c 24 40	 mov	 ecx, DWORD PTR W$[rsp+32]
  00b7b	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00b7e	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  00b82	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00b86	c1 e0 0b	 shl	 eax, 11
  00b89	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00b8d	c1 e9 15	 shr	 ecx, 21
  00b90	0b c1		 or	 eax, ecx
  00b92	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  00b96	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 171  :     HH(c,d,a,b,W[11],16,0x6d9d6122UL)

  00b9a	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00b9e	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00ba2	33 c8		 xor	 ecx, eax
  00ba4	8b c1		 mov	 eax, ecx
  00ba6	33 44 24 68	 xor	 eax, DWORD PTR b$[rsp]
  00baa	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00bae	03 c8		 add	 ecx, eax
  00bb0	8b c1		 mov	 eax, ecx
  00bb2	8b 4c 24 4c	 mov	 ecx, DWORD PTR W$[rsp+44]
  00bb6	8d 84 08 22 61
	9d 6d		 lea	 eax, DWORD PTR [rax+rcx+1839030562]
  00bbd	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  00bc1	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00bc5	c1 e0 10	 shl	 eax, 16
  00bc8	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00bcc	c1 e9 10	 shr	 ecx, 16
  00bcf	0b c1		 or	 eax, ecx
  00bd1	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  00bd5	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 172  :     HH(b,c,d,a,W[14],23,0xfde5380cUL)

  00bd9	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00bdd	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00be1	33 c8		 xor	 ecx, eax
  00be3	8b c1		 mov	 eax, ecx
  00be5	33 44 24 60	 xor	 eax, DWORD PTR a$[rsp]
  00be9	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00bed	03 c8		 add	 ecx, eax
  00bef	8b c1		 mov	 eax, ecx
  00bf1	b9 0c 38 e5 fd	 mov	 ecx, -35309556		; fffffffffde5380cH
  00bf6	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00bfa	8b 4c 24 58	 mov	 ecx, DWORD PTR W$[rsp+56]
  00bfe	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00c01	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  00c05	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00c09	c1 e0 17	 shl	 eax, 23
  00c0c	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00c10	c1 e9 09	 shr	 ecx, 9
  00c13	0b c1		 or	 eax, ecx
  00c15	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  00c19	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 173  :     HH(a,b,c,d,W[1],4,0xa4beea44UL)

  00c1d	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00c21	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00c25	33 c8		 xor	 ecx, eax
  00c27	8b c1		 mov	 eax, ecx
  00c29	33 44 24 6c	 xor	 eax, DWORD PTR d$[rsp]
  00c2d	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00c31	03 c8		 add	 ecx, eax
  00c33	8b c1		 mov	 eax, ecx
  00c35	b9 44 ea be a4	 mov	 ecx, -1530992060	; ffffffffa4beea44H
  00c3a	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00c3e	8b 4c 24 24	 mov	 ecx, DWORD PTR W$[rsp+4]
  00c42	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00c45	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  00c49	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00c4d	c1 e0 04	 shl	 eax, 4
  00c50	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00c54	c1 e9 1c	 shr	 ecx, 28
  00c57	0b c1		 or	 eax, ecx
  00c59	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  00c5d	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 174  :     HH(d,a,b,c,W[4],11,0x4bdecfa9UL)

  00c61	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00c65	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00c69	33 c8		 xor	 ecx, eax
  00c6b	8b c1		 mov	 eax, ecx
  00c6d	33 44 24 70	 xor	 eax, DWORD PTR c$[rsp]
  00c71	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00c75	03 c8		 add	 ecx, eax
  00c77	8b c1		 mov	 eax, ecx
  00c79	8b 4c 24 30	 mov	 ecx, DWORD PTR W$[rsp+16]
  00c7d	8d 84 08 a9 cf
	de 4b		 lea	 eax, DWORD PTR [rax+rcx+1272893353]
  00c84	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  00c88	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00c8c	c1 e0 0b	 shl	 eax, 11
  00c8f	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00c93	c1 e9 15	 shr	 ecx, 21
  00c96	0b c1		 or	 eax, ecx
  00c98	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  00c9c	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 175  :     HH(c,d,a,b,W[7],16,0xf6bb4b60UL)

  00ca0	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00ca4	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00ca8	33 c8		 xor	 ecx, eax
  00caa	8b c1		 mov	 eax, ecx
  00cac	33 44 24 68	 xor	 eax, DWORD PTR b$[rsp]
  00cb0	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00cb4	03 c8		 add	 ecx, eax
  00cb6	8b c1		 mov	 eax, ecx
  00cb8	b9 60 4b bb f6	 mov	 ecx, -155497632		; fffffffff6bb4b60H
  00cbd	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00cc1	8b 4c 24 3c	 mov	 ecx, DWORD PTR W$[rsp+28]
  00cc5	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00cc8	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  00ccc	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00cd0	c1 e0 10	 shl	 eax, 16
  00cd3	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00cd7	c1 e9 10	 shr	 ecx, 16
  00cda	0b c1		 or	 eax, ecx
  00cdc	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  00ce0	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 176  :     HH(b,c,d,a,W[10],23,0xbebfbc70UL)

  00ce4	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00ce8	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00cec	33 c8		 xor	 ecx, eax
  00cee	8b c1		 mov	 eax, ecx
  00cf0	33 44 24 60	 xor	 eax, DWORD PTR a$[rsp]
  00cf4	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00cf8	03 c8		 add	 ecx, eax
  00cfa	8b c1		 mov	 eax, ecx
  00cfc	b9 70 bc bf be	 mov	 ecx, -1094730640	; ffffffffbebfbc70H
  00d01	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00d05	8b 4c 24 48	 mov	 ecx, DWORD PTR W$[rsp+40]
  00d09	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00d0c	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  00d10	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00d14	c1 e0 17	 shl	 eax, 23
  00d17	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00d1b	c1 e9 09	 shr	 ecx, 9
  00d1e	0b c1		 or	 eax, ecx
  00d20	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  00d24	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 177  :     HH(a,b,c,d,W[13],4,0x289b7ec6UL)

  00d28	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00d2c	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00d30	33 c8		 xor	 ecx, eax
  00d32	8b c1		 mov	 eax, ecx
  00d34	33 44 24 6c	 xor	 eax, DWORD PTR d$[rsp]
  00d38	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00d3c	03 c8		 add	 ecx, eax
  00d3e	8b c1		 mov	 eax, ecx
  00d40	8b 4c 24 54	 mov	 ecx, DWORD PTR W$[rsp+52]
  00d44	8d 84 08 c6 7e
	9b 28		 lea	 eax, DWORD PTR [rax+rcx+681279174]
  00d4b	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  00d4f	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00d53	c1 e0 04	 shl	 eax, 4
  00d56	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00d5a	c1 e9 1c	 shr	 ecx, 28
  00d5d	0b c1		 or	 eax, ecx
  00d5f	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  00d63	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 178  :     HH(d,a,b,c,W[0],11,0xeaa127faUL)

  00d67	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00d6b	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00d6f	33 c8		 xor	 ecx, eax
  00d71	8b c1		 mov	 eax, ecx
  00d73	33 44 24 70	 xor	 eax, DWORD PTR c$[rsp]
  00d77	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00d7b	03 c8		 add	 ecx, eax
  00d7d	8b c1		 mov	 eax, ecx
  00d7f	b9 fa 27 a1 ea	 mov	 ecx, -358537222		; ffffffffeaa127faH
  00d84	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00d88	8b 4c 24 20	 mov	 ecx, DWORD PTR W$[rsp]
  00d8c	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00d8f	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  00d93	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00d97	c1 e0 0b	 shl	 eax, 11
  00d9a	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00d9e	c1 e9 15	 shr	 ecx, 21
  00da1	0b c1		 or	 eax, ecx
  00da3	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  00da7	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 179  :     HH(c,d,a,b,W[3],16,0xd4ef3085UL)

  00dab	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00daf	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00db3	33 c8		 xor	 ecx, eax
  00db5	8b c1		 mov	 eax, ecx
  00db7	33 44 24 68	 xor	 eax, DWORD PTR b$[rsp]
  00dbb	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00dbf	03 c8		 add	 ecx, eax
  00dc1	8b c1		 mov	 eax, ecx
  00dc3	b9 85 30 ef d4	 mov	 ecx, -722521979		; ffffffffd4ef3085H
  00dc8	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00dcc	8b 4c 24 2c	 mov	 ecx, DWORD PTR W$[rsp+12]
  00dd0	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00dd3	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  00dd7	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00ddb	c1 e0 10	 shl	 eax, 16
  00dde	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00de2	c1 e9 10	 shr	 ecx, 16
  00de5	0b c1		 or	 eax, ecx
  00de7	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  00deb	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 180  :     HH(b,c,d,a,W[6],23,0x04881d05UL)

  00def	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00df3	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00df7	33 c8		 xor	 ecx, eax
  00df9	8b c1		 mov	 eax, ecx
  00dfb	33 44 24 60	 xor	 eax, DWORD PTR a$[rsp]
  00dff	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00e03	03 c8		 add	 ecx, eax
  00e05	8b c1		 mov	 eax, ecx
  00e07	8b 4c 24 38	 mov	 ecx, DWORD PTR W$[rsp+24]
  00e0b	8d 84 08 05 1d
	88 04		 lea	 eax, DWORD PTR [rax+rcx+76029189]
  00e12	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  00e16	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00e1a	c1 e0 17	 shl	 eax, 23
  00e1d	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00e21	c1 e9 09	 shr	 ecx, 9
  00e24	0b c1		 or	 eax, ecx
  00e26	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  00e2a	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 181  :     HH(a,b,c,d,W[9],4,0xd9d4d039UL)

  00e2e	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00e32	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00e36	33 c8		 xor	 ecx, eax
  00e38	8b c1		 mov	 eax, ecx
  00e3a	33 44 24 6c	 xor	 eax, DWORD PTR d$[rsp]
  00e3e	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00e42	03 c8		 add	 ecx, eax
  00e44	8b c1		 mov	 eax, ecx
  00e46	b9 39 d0 d4 d9	 mov	 ecx, -640364487		; ffffffffd9d4d039H
  00e4b	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00e4f	8b 4c 24 44	 mov	 ecx, DWORD PTR W$[rsp+36]
  00e53	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00e56	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  00e5a	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00e5e	c1 e0 04	 shl	 eax, 4
  00e61	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00e65	c1 e9 1c	 shr	 ecx, 28
  00e68	0b c1		 or	 eax, ecx
  00e6a	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  00e6e	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 182  :     HH(d,a,b,c,W[12],11,0xe6db99e5UL)

  00e72	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00e76	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00e7a	33 c8		 xor	 ecx, eax
  00e7c	8b c1		 mov	 eax, ecx
  00e7e	33 44 24 70	 xor	 eax, DWORD PTR c$[rsp]
  00e82	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00e86	03 c8		 add	 ecx, eax
  00e88	8b c1		 mov	 eax, ecx
  00e8a	b9 e5 99 db e6	 mov	 ecx, -421815835		; ffffffffe6db99e5H
  00e8f	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00e93	8b 4c 24 50	 mov	 ecx, DWORD PTR W$[rsp+48]
  00e97	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00e9a	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  00e9e	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00ea2	c1 e0 0b	 shl	 eax, 11
  00ea5	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00ea9	c1 e9 15	 shr	 ecx, 21
  00eac	0b c1		 or	 eax, ecx
  00eae	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  00eb2	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 183  :     HH(c,d,a,b,W[15],16,0x1fa27cf8UL)

  00eb6	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00eba	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00ebe	33 c8		 xor	 ecx, eax
  00ec0	8b c1		 mov	 eax, ecx
  00ec2	33 44 24 68	 xor	 eax, DWORD PTR b$[rsp]
  00ec6	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00eca	03 c8		 add	 ecx, eax
  00ecc	8b c1		 mov	 eax, ecx
  00ece	8b 4c 24 5c	 mov	 ecx, DWORD PTR W$[rsp+60]
  00ed2	8d 84 08 f8 7c
	a2 1f		 lea	 eax, DWORD PTR [rax+rcx+530742520]
  00ed9	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  00edd	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00ee1	c1 e0 10	 shl	 eax, 16
  00ee4	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00ee8	c1 e9 10	 shr	 ecx, 16
  00eeb	0b c1		 or	 eax, ecx
  00eed	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  00ef1	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 184  :     HH(b,c,d,a,W[2],23,0xc4ac5665UL)

  00ef5	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00ef9	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00efd	33 c8		 xor	 ecx, eax
  00eff	8b c1		 mov	 eax, ecx
  00f01	33 44 24 60	 xor	 eax, DWORD PTR a$[rsp]
  00f05	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00f09	03 c8		 add	 ecx, eax
  00f0b	8b c1		 mov	 eax, ecx
  00f0d	b9 65 56 ac c4	 mov	 ecx, -995338651		; ffffffffc4ac5665H
  00f12	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00f16	8b 4c 24 28	 mov	 ecx, DWORD PTR W$[rsp+8]
  00f1a	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00f1d	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  00f21	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00f25	c1 e0 17	 shl	 eax, 23
  00f28	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00f2c	c1 e9 09	 shr	 ecx, 9
  00f2f	0b c1		 or	 eax, ecx
  00f31	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  00f35	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 185  :     II(a,b,c,d,W[0],6,0xf4292244UL)

  00f39	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00f3d	f7 d0		 not	 eax
  00f3f	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00f43	0b c8		 or	 ecx, eax
  00f45	8b c1		 mov	 eax, ecx
  00f47	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00f4b	33 c8		 xor	 ecx, eax
  00f4d	8b c1		 mov	 eax, ecx
  00f4f	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00f53	03 c8		 add	 ecx, eax
  00f55	8b c1		 mov	 eax, ecx
  00f57	b9 44 22 29 f4	 mov	 ecx, -198630844		; fffffffff4292244H
  00f5c	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00f60	8b 4c 24 20	 mov	 ecx, DWORD PTR W$[rsp]
  00f64	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00f67	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  00f6b	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  00f6f	c1 e0 06	 shl	 eax, 6
  00f72	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00f76	c1 e9 1a	 shr	 ecx, 26
  00f79	0b c1		 or	 eax, ecx
  00f7b	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  00f7f	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 186  :     II(d,a,b,c,W[7],10,0x432aff97UL)

  00f83	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00f87	f7 d0		 not	 eax
  00f89	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00f8d	0b c8		 or	 ecx, eax
  00f8f	8b c1		 mov	 eax, ecx
  00f91	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  00f95	33 c8		 xor	 ecx, eax
  00f97	8b c1		 mov	 eax, ecx
  00f99	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00f9d	03 c8		 add	 ecx, eax
  00f9f	8b c1		 mov	 eax, ecx
  00fa1	8b 4c 24 3c	 mov	 ecx, DWORD PTR W$[rsp+28]
  00fa5	8d 84 08 97 ff
	2a 43		 lea	 eax, DWORD PTR [rax+rcx+1126891415]
  00fac	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  00fb0	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  00fb4	c1 e0 0a	 shl	 eax, 10
  00fb7	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00fbb	c1 e9 16	 shr	 ecx, 22
  00fbe	0b c1		 or	 eax, ecx
  00fc0	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  00fc4	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 187  :     II(c,d,a,b,W[14],15,0xab9423a7UL)

  00fc8	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  00fcc	f7 d0		 not	 eax
  00fce	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  00fd2	0b c8		 or	 ecx, eax
  00fd4	8b c1		 mov	 eax, ecx
  00fd6	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  00fda	33 c8		 xor	 ecx, eax
  00fdc	8b c1		 mov	 eax, ecx
  00fde	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  00fe2	03 c8		 add	 ecx, eax
  00fe4	8b c1		 mov	 eax, ecx
  00fe6	b9 a7 23 94 ab	 mov	 ecx, -1416354905	; ffffffffab9423a7H
  00feb	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  00fef	8b 4c 24 58	 mov	 ecx, DWORD PTR W$[rsp+56]
  00ff3	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  00ff6	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  00ffa	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  00ffe	c1 e0 0f	 shl	 eax, 15
  01001	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  01005	c1 e9 11	 shr	 ecx, 17
  01008	0b c1		 or	 eax, ecx
  0100a	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  0100e	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 188  :     II(b,c,d,a,W[5],21,0xfc93a039UL)

  01012	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  01016	f7 d0		 not	 eax
  01018	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0101c	0b c8		 or	 ecx, eax
  0101e	8b c1		 mov	 eax, ecx
  01020	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  01024	33 c8		 xor	 ecx, eax
  01026	8b c1		 mov	 eax, ecx
  01028	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  0102c	03 c8		 add	 ecx, eax
  0102e	8b c1		 mov	 eax, ecx
  01030	b9 39 a0 93 fc	 mov	 ecx, -57434055		; fffffffffc93a039H
  01035	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  01039	8b 4c 24 34	 mov	 ecx, DWORD PTR W$[rsp+20]
  0103d	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  01040	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  01044	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  01048	c1 e0 15	 shl	 eax, 21
  0104b	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  0104f	c1 e9 0b	 shr	 ecx, 11
  01052	0b c1		 or	 eax, ecx
  01054	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  01058	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 189  :     II(a,b,c,d,W[12],6,0x655b59c3UL)

  0105c	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  01060	f7 d0		 not	 eax
  01062	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  01066	0b c8		 or	 ecx, eax
  01068	8b c1		 mov	 eax, ecx
  0106a	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0106e	33 c8		 xor	 ecx, eax
  01070	8b c1		 mov	 eax, ecx
  01072	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  01076	03 c8		 add	 ecx, eax
  01078	8b c1		 mov	 eax, ecx
  0107a	8b 4c 24 50	 mov	 ecx, DWORD PTR W$[rsp+48]
  0107e	8d 84 08 c3 59
	5b 65		 lea	 eax, DWORD PTR [rax+rcx+1700485571]
  01085	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  01089	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  0108d	c1 e0 06	 shl	 eax, 6
  01090	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  01094	c1 e9 1a	 shr	 ecx, 26
  01097	0b c1		 or	 eax, ecx
  01099	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  0109d	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 190  :     II(d,a,b,c,W[3],10,0x8f0ccc92UL)

  010a1	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  010a5	f7 d0		 not	 eax
  010a7	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  010ab	0b c8		 or	 ecx, eax
  010ad	8b c1		 mov	 eax, ecx
  010af	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  010b3	33 c8		 xor	 ecx, eax
  010b5	8b c1		 mov	 eax, ecx
  010b7	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  010bb	03 c8		 add	 ecx, eax
  010bd	8b c1		 mov	 eax, ecx
  010bf	b9 92 cc 0c 8f	 mov	 ecx, -1894986606	; ffffffff8f0ccc92H
  010c4	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  010c8	8b 4c 24 2c	 mov	 ecx, DWORD PTR W$[rsp+12]
  010cc	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  010cf	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  010d3	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  010d7	c1 e0 0a	 shl	 eax, 10
  010da	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  010de	c1 e9 16	 shr	 ecx, 22
  010e1	0b c1		 or	 eax, ecx
  010e3	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  010e7	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 191  :     II(c,d,a,b,W[10],15,0xffeff47dUL)

  010eb	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  010ef	f7 d0		 not	 eax
  010f1	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  010f5	0b c8		 or	 ecx, eax
  010f7	8b c1		 mov	 eax, ecx
  010f9	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  010fd	33 c8		 xor	 ecx, eax
  010ff	8b c1		 mov	 eax, ecx
  01101	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  01105	03 c8		 add	 ecx, eax
  01107	8b c1		 mov	 eax, ecx
  01109	b9 7d f4 ef ff	 mov	 ecx, -1051523		; ffffffffffeff47dH
  0110e	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  01112	8b 4c 24 48	 mov	 ecx, DWORD PTR W$[rsp+40]
  01116	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  01119	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  0111d	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  01121	c1 e0 0f	 shl	 eax, 15
  01124	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  01128	c1 e9 11	 shr	 ecx, 17
  0112b	0b c1		 or	 eax, ecx
  0112d	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  01131	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 192  :     II(b,c,d,a,W[1],21,0x85845dd1UL)

  01135	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  01139	f7 d0		 not	 eax
  0113b	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0113f	0b c8		 or	 ecx, eax
  01141	8b c1		 mov	 eax, ecx
  01143	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  01147	33 c8		 xor	 ecx, eax
  01149	8b c1		 mov	 eax, ecx
  0114b	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  0114f	03 c8		 add	 ecx, eax
  01151	8b c1		 mov	 eax, ecx
  01153	b9 d1 5d 84 85	 mov	 ecx, -2054922799	; ffffffff85845dd1H
  01158	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  0115c	8b 4c 24 24	 mov	 ecx, DWORD PTR W$[rsp+4]
  01160	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  01163	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  01167	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  0116b	c1 e0 15	 shl	 eax, 21
  0116e	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  01172	c1 e9 0b	 shr	 ecx, 11
  01175	0b c1		 or	 eax, ecx
  01177	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  0117b	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 193  :     II(a,b,c,d,W[8],6,0x6fa87e4fUL)

  0117f	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  01183	f7 d0		 not	 eax
  01185	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  01189	0b c8		 or	 ecx, eax
  0118b	8b c1		 mov	 eax, ecx
  0118d	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  01191	33 c8		 xor	 ecx, eax
  01193	8b c1		 mov	 eax, ecx
  01195	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  01199	03 c8		 add	 ecx, eax
  0119b	8b c1		 mov	 eax, ecx
  0119d	8b 4c 24 40	 mov	 ecx, DWORD PTR W$[rsp+32]
  011a1	8d 84 08 4f 7e
	a8 6f		 lea	 eax, DWORD PTR [rax+rcx+1873313359]
  011a8	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  011ac	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  011b0	c1 e0 06	 shl	 eax, 6
  011b3	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  011b7	c1 e9 1a	 shr	 ecx, 26
  011ba	0b c1		 or	 eax, ecx
  011bc	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  011c0	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 194  :     II(d,a,b,c,W[15],10,0xfe2ce6e0UL)

  011c4	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  011c8	f7 d0		 not	 eax
  011ca	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  011ce	0b c8		 or	 ecx, eax
  011d0	8b c1		 mov	 eax, ecx
  011d2	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  011d6	33 c8		 xor	 ecx, eax
  011d8	8b c1		 mov	 eax, ecx
  011da	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  011de	03 c8		 add	 ecx, eax
  011e0	8b c1		 mov	 eax, ecx
  011e2	b9 e0 e6 2c fe	 mov	 ecx, -30611744		; fffffffffe2ce6e0H
  011e7	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  011eb	8b 4c 24 5c	 mov	 ecx, DWORD PTR W$[rsp+60]
  011ef	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  011f2	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  011f6	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  011fa	c1 e0 0a	 shl	 eax, 10
  011fd	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  01201	c1 e9 16	 shr	 ecx, 22
  01204	0b c1		 or	 eax, ecx
  01206	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  0120a	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 195  :     II(c,d,a,b,W[6],15,0xa3014314UL)

  0120e	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  01212	f7 d0		 not	 eax
  01214	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  01218	0b c8		 or	 ecx, eax
  0121a	8b c1		 mov	 eax, ecx
  0121c	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  01220	33 c8		 xor	 ecx, eax
  01222	8b c1		 mov	 eax, ecx
  01224	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  01228	03 c8		 add	 ecx, eax
  0122a	8b c1		 mov	 eax, ecx
  0122c	b9 14 43 01 a3	 mov	 ecx, -1560198380	; ffffffffa3014314H
  01231	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  01235	8b 4c 24 38	 mov	 ecx, DWORD PTR W$[rsp+24]
  01239	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  0123c	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  01240	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  01244	c1 e0 0f	 shl	 eax, 15
  01247	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0124b	c1 e9 11	 shr	 ecx, 17
  0124e	0b c1		 or	 eax, ecx
  01250	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  01254	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 196  :     II(b,c,d,a,W[13],21,0x4e0811a1UL)

  01258	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  0125c	f7 d0		 not	 eax
  0125e	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  01262	0b c8		 or	 ecx, eax
  01264	8b c1		 mov	 eax, ecx
  01266	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0126a	33 c8		 xor	 ecx, eax
  0126c	8b c1		 mov	 eax, ecx
  0126e	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  01272	03 c8		 add	 ecx, eax
  01274	8b c1		 mov	 eax, ecx
  01276	8b 4c 24 54	 mov	 ecx, DWORD PTR W$[rsp+52]
  0127a	8d 84 08 a1 11
	08 4e		 lea	 eax, DWORD PTR [rax+rcx+1309151649]
  01281	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  01285	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  01289	c1 e0 15	 shl	 eax, 21
  0128c	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  01290	c1 e9 0b	 shr	 ecx, 11
  01293	0b c1		 or	 eax, ecx
  01295	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  01299	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 197  :     II(a,b,c,d,W[4],6,0xf7537e82UL)

  0129d	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  012a1	f7 d0		 not	 eax
  012a3	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  012a7	0b c8		 or	 ecx, eax
  012a9	8b c1		 mov	 eax, ecx
  012ab	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  012af	33 c8		 xor	 ecx, eax
  012b1	8b c1		 mov	 eax, ecx
  012b3	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  012b7	03 c8		 add	 ecx, eax
  012b9	8b c1		 mov	 eax, ecx
  012bb	b9 82 7e 53 f7	 mov	 ecx, -145523070		; fffffffff7537e82H
  012c0	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  012c4	8b 4c 24 30	 mov	 ecx, DWORD PTR W$[rsp+16]
  012c8	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  012cb	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax
  012cf	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  012d3	c1 e0 06	 shl	 eax, 6
  012d6	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  012da	c1 e9 1a	 shr	 ecx, 26
  012dd	0b c1		 or	 eax, ecx
  012df	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  012e3	89 44 24 60	 mov	 DWORD PTR a$[rsp], eax

; 198  :     II(d,a,b,c,W[11],10,0xbd3af235UL)

  012e7	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  012eb	f7 d0		 not	 eax
  012ed	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  012f1	0b c8		 or	 ecx, eax
  012f3	8b c1		 mov	 eax, ecx
  012f5	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  012f9	33 c8		 xor	 ecx, eax
  012fb	8b c1		 mov	 eax, ecx
  012fd	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  01301	03 c8		 add	 ecx, eax
  01303	8b c1		 mov	 eax, ecx
  01305	b9 35 f2 3a bd	 mov	 ecx, -1120210379	; ffffffffbd3af235H
  0130a	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  0130e	8b 4c 24 4c	 mov	 ecx, DWORD PTR W$[rsp+44]
  01312	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  01315	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax
  01319	8b 44 24 6c	 mov	 eax, DWORD PTR d$[rsp]
  0131d	c1 e0 0a	 shl	 eax, 10
  01320	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  01324	c1 e9 16	 shr	 ecx, 22
  01327	0b c1		 or	 eax, ecx
  01329	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  0132d	89 44 24 6c	 mov	 DWORD PTR d$[rsp], eax

; 199  :     II(c,d,a,b,W[2],15,0x2ad7d2bbUL)

  01331	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  01335	f7 d0		 not	 eax
  01337	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  0133b	0b c8		 or	 ecx, eax
  0133d	8b c1		 mov	 eax, ecx
  0133f	8b 4c 24 60	 mov	 ecx, DWORD PTR a$[rsp]
  01343	33 c8		 xor	 ecx, eax
  01345	8b c1		 mov	 eax, ecx
  01347	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  0134b	03 c8		 add	 ecx, eax
  0134d	8b c1		 mov	 eax, ecx
  0134f	8b 4c 24 28	 mov	 ecx, DWORD PTR W$[rsp+8]
  01353	8d 84 08 bb d2
	d7 2a		 lea	 eax, DWORD PTR [rax+rcx+718787259]
  0135a	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax
  0135e	8b 44 24 70	 mov	 eax, DWORD PTR c$[rsp]
  01362	c1 e0 0f	 shl	 eax, 15
  01365	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  01369	c1 e9 11	 shr	 ecx, 17
  0136c	0b c1		 or	 eax, ecx
  0136e	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  01372	89 44 24 70	 mov	 DWORD PTR c$[rsp], eax

; 200  :     II(b,c,d,a,W[9],21,0xeb86d391UL)

  01376	8b 44 24 60	 mov	 eax, DWORD PTR a$[rsp]
  0137a	f7 d0		 not	 eax
  0137c	8b 4c 24 70	 mov	 ecx, DWORD PTR c$[rsp]
  01380	0b c8		 or	 ecx, eax
  01382	8b c1		 mov	 eax, ecx
  01384	8b 4c 24 6c	 mov	 ecx, DWORD PTR d$[rsp]
  01388	33 c8		 xor	 ecx, eax
  0138a	8b c1		 mov	 eax, ecx
  0138c	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  01390	03 c8		 add	 ecx, eax
  01392	8b c1		 mov	 eax, ecx
  01394	b9 91 d3 86 eb	 mov	 ecx, -343485551		; ffffffffeb86d391H
  01399	48 8d 04 08	 lea	 rax, QWORD PTR [rax+rcx]
  0139d	8b 4c 24 44	 mov	 ecx, DWORD PTR W$[rsp+36]
  013a1	8d 04 08	 lea	 eax, DWORD PTR [rax+rcx]
  013a4	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax
  013a8	8b 44 24 68	 mov	 eax, DWORD PTR b$[rsp]
  013ac	c1 e0 15	 shl	 eax, 21
  013af	8b 4c 24 68	 mov	 ecx, DWORD PTR b$[rsp]
  013b3	c1 e9 0b	 shr	 ecx, 11
  013b6	0b c1		 or	 eax, ecx
  013b8	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  013bc	89 44 24 68	 mov	 DWORD PTR b$[rsp], eax

; 201  : 
; 202  :     md5->state[0] = md5->state[0] + a;

  013c0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR md5$[rsp]
  013c8	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  013cb	03 44 24 60	 add	 eax, DWORD PTR a$[rsp]
  013cf	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR md5$[rsp]
  013d7	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 203  :     md5->state[1] = md5->state[1] + b;

  013da	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR md5$[rsp]
  013e2	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  013e5	03 44 24 68	 add	 eax, DWORD PTR b$[rsp]
  013e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR md5$[rsp]
  013f1	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 204  :     md5->state[2] = md5->state[2] + c;

  013f4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR md5$[rsp]
  013fc	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  013ff	03 44 24 70	 add	 eax, DWORD PTR c$[rsp]
  01403	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR md5$[rsp]
  0140b	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 205  :     md5->state[3] = md5->state[3] + d;

  0140e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR md5$[rsp]
  01416	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  01419	03 44 24 6c	 add	 eax, DWORD PTR d$[rsp]
  0141d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR md5$[rsp]
  01425	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 206  : }

  01428	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0142f	c3		 ret	 0
md5_compress ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EO@BJKIFCAJ@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAt?$AAv@ ; `string'
PUBLIC	??_C@_1EO@LALHLELK@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@ ; `string'
PUBLIC	??_C@_1DG@MMKMIIBJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@FHOAPDMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	$T21099
EXTRN	_PyUnicode_CheckConsistency:PROC
EXTRN	Py_hexdigits:QWORD
EXTRN	PyUnicode_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$MD5_hexdigest DD imagerel MD5_hexdigest
	DD	imagerel MD5_hexdigest+724
	DD	imagerel $unwind$MD5_hexdigest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MD5_hexdigest DD 041301H
	DD	0250113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_1EO@BJKIFCAJ@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAt?$AAv@
CONST	SEGMENT
??_C@_1EO@BJKIFCAJ@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAt?$AAv@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e'
	DB	00H, 'c', 00H, 'k', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'y'
	DB	00H, '(', 00H, 'r', 00H, 'e', 00H, 't', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, ',', 00H, ' ', 00H, '1', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@LALHLELK@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
CONST	SEGMENT
??_C@_1EO@LALHLELK@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'r', 00H, 'e', 00H, 't', 00H, 'v', 00H, 'a', 00H, 'l', 00H, ')'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@MMKMIIBJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@MMKMIIBJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'r', 00H
	DB	'e', 00H, 't', 00H, 'v', 00H, 'a', 00H, 'l', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@FHOAPDMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@FHOAPDMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'r', 00H, 'e', 00H, 't', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT MD5_hexdigest
_TEXT	SEGMENT
i$ = 32
retval$ = 40
temp$ = 48
digest$ = 144
hex_digest$ = 160
j$ = 168
c$20744 = 172
$T21099 = 176
tv137 = 272
tv146 = 280
self$ = 320
unused$ = 328
MD5_hexdigest PROC					; COMDAT

; 377  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H

; 378  :     unsigned char digest[MD5_DIGESTSIZE];
; 379  :     struct md5_state temp;
; 380  :     PyObject *retval;
; 381  :     Py_UCS1 *hex_digest;
; 382  :     int i, j;
; 383  : 
; 384  :     /* Get the raw (binary) digest value */
; 385  :     temp = self->hash_state;

  00013	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T21099[rsp]
  0001b	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00023	48 8b f8	 mov	 rdi, rax
  00026	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  0002a	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0002f	f3 a4		 rep movsb
  00031	48 8d 44 24 30	 lea	 rax, QWORD PTR temp$[rsp]
  00036	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T21099[rsp]
  0003e	48 8b f8	 mov	 rdi, rax
  00041	48 8b f1	 mov	 rsi, rcx
  00044	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00049	f3 a4		 rep movsb

; 386  :     md5_done(&temp, digest);

  0004b	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR digest$[rsp]
  00053	48 8d 4c 24 30	 lea	 rcx, QWORD PTR temp$[rsp]
  00058	e8 00 00 00 00	 call	 md5_done

; 387  : 
; 388  :     /* Create a new string */
; 389  :     retval = PyUnicode_New(MD5_DIGESTSIZE * 2, 127);

  0005d	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00062	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00067	e8 00 00 00 00	 call	 PyUnicode_New
  0006c	48 89 44 24 28	 mov	 QWORD PTR retval$[rsp], rax

; 390  :     if (!retval)

  00071	48 83 7c 24 28
	00		 cmp	 QWORD PTR retval$[rsp], 0
  00077	75 07		 jne	 SHORT $LN4@MD5_hexdig

; 391  :             return NULL;

  00079	33 c0		 xor	 eax, eax
  0007b	e9 4a 02 00 00	 jmp	 $LN5@MD5_hexdig
$LN4@MD5_hexdig:

; 392  :     hex_digest = PyUnicode_1BYTE_DATA(retval);

  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  00085	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00089	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00094	85 c0		 test	 eax, eax
  00096	75 1c		 jne	 SHORT $LN7@MD5_hexdig
  00098	41 b8 88 01 00
	00		 mov	 r8d, 392		; 00000188H
  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FHOAPDMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b2	33 c0		 xor	 eax, eax
$LN7@MD5_hexdig:
  000b4	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  000b9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000bc	c1 e8 05	 shr	 eax, 5
  000bf	83 e0 01	 and	 eax, 1
  000c2	85 c0		 test	 eax, eax
  000c4	0f 84 ae 00 00
	00		 je	 $LN13@MD5_hexdig
  000ca	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  000cf	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000de	85 c0		 test	 eax, eax
  000e0	75 1c		 jne	 SHORT $LN8@MD5_hexdig
  000e2	41 b8 88 01 00
	00		 mov	 r8d, 392		; 00000188H
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FHOAPDMD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000fc	33 c0		 xor	 eax, eax
$LN8@MD5_hexdig:
  000fe	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  00103	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00106	c1 e8 07	 shr	 eax, 7
  00109	83 e0 01	 and	 eax, 1
  0010c	85 c0		 test	 eax, eax
  0010e	75 1c		 jne	 SHORT $LN9@MD5_hexdig
  00110	41 b8 88 01 00
	00		 mov	 r8d, 392		; 00000188H
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MMKMIIBJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012a	33 c0		 xor	 eax, eax
$LN9@MD5_hexdig:
  0012c	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  00131	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00134	c1 e8 06	 shr	 eax, 6
  00137	83 e0 01	 and	 eax, 1
  0013a	85 c0		 test	 eax, eax
  0013c	74 15		 je	 SHORT $LN10@MD5_hexdig
  0013e	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  00143	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00149	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv137[rsp], rax
  00151	eb 13		 jmp	 SHORT $LN11@MD5_hexdig
$LN10@MD5_hexdig:
  00153	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  00158	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0015e	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv137[rsp], rax
$LN11@MD5_hexdig:
  00166	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv137[rsp]
  0016e	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv146[rsp], rax
  00176	eb 3f		 jmp	 SHORT $LN14@MD5_hexdig
$LN13@MD5_hexdig:
  00178	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  0017d	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00185	75 1c		 jne	 SHORT $LN12@MD5_hexdig
  00187	41 b8 88 01 00
	00		 mov	 r8d, 392		; 00000188H
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@LALHLELK@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  0019b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a1	33 c0		 xor	 eax, eax
$LN12@MD5_hexdig:
  001a3	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  001a8	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  001af	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv146[rsp], rax
$LN14@MD5_hexdig:
  001b7	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv146[rsp]
  001bf	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR hex_digest$[rsp], rax

; 393  : 
; 394  :     /* Make hex version of the digest */
; 395  :     for(i=j=0; i<MD5_DIGESTSIZE; i++) {

  001c7	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  001d2	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  001d9	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  001dd	eb 0a		 jmp	 SHORT $LN3@MD5_hexdig
$LN2@MD5_hexdig:
  001df	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  001e3	ff c0		 inc	 eax
  001e5	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN3@MD5_hexdig:
  001e9	83 7c 24 20 10	 cmp	 DWORD PTR i$[rsp], 16
  001ee	0f 8d a2 00 00
	00		 jge	 $LN1@MD5_hexdig

; 396  :         unsigned char c;
; 397  :         c = (digest[i] >> 4) & 0xf;

  001f4	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001f9	0f b6 84 04 90
	00 00 00	 movzx	 eax, BYTE PTR digest$[rsp+rax]
  00201	c1 f8 04	 sar	 eax, 4
  00204	83 e0 0f	 and	 eax, 15
  00207	88 84 24 ac 00
	00 00		 mov	 BYTE PTR c$20744[rsp], al

; 398  :         hex_digest[j++] = Py_hexdigits[c];

  0020e	0f b6 84 24 ac
	00 00 00	 movzx	 eax, BYTE PTR c$20744[rsp]
  00216	48 63 8c 24 a8
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  0021e	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR hex_digest$[rsp]
  00226	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR Py_hexdigits
  0022d	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  00231	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00234	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  0023b	ff c0		 inc	 eax
  0023d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR j$[rsp], eax

; 399  :         c = (digest[i] & 0xf);

  00244	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00249	0f b6 84 04 90
	00 00 00	 movzx	 eax, BYTE PTR digest$[rsp+rax]
  00251	83 e0 0f	 and	 eax, 15
  00254	88 84 24 ac 00
	00 00		 mov	 BYTE PTR c$20744[rsp], al

; 400  :         hex_digest[j++] = Py_hexdigits[c];

  0025b	0f b6 84 24 ac
	00 00 00	 movzx	 eax, BYTE PTR c$20744[rsp]
  00263	48 63 8c 24 a8
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  0026b	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR hex_digest$[rsp]
  00273	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR Py_hexdigits
  0027a	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  0027e	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00281	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  00288	ff c0		 inc	 eax
  0028a	89 84 24 a8 00
	00 00		 mov	 DWORD PTR j$[rsp], eax

; 401  :     }

  00291	e9 49 ff ff ff	 jmp	 $LN2@MD5_hexdig
$LN1@MD5_hexdig:

; 402  : #ifdef Py_DEBUG
; 403  :     assert(_PyUnicode_CheckConsistency(retval, 1));

  00296	ba 01 00 00 00	 mov	 edx, 1
  0029b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR retval$[rsp]
  002a0	e8 00 00 00 00	 call	 _PyUnicode_CheckConsistency
  002a5	85 c0		 test	 eax, eax
  002a7	75 1c		 jne	 SHORT $LN15@MD5_hexdig
  002a9	41 b8 93 01 00
	00		 mov	 r8d, 403		; 00000193H
  002af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  002b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@BJKIFCAJ@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAt?$AAv@
  002bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002c3	33 c0		 xor	 eax, eax
$LN15@MD5_hexdig:

; 404  : #endif
; 405  :     return retval;

  002c5	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
$LN5@MD5_hexdig:

; 406  : }

  002ca	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  002d1	5f		 pop	 rdi
  002d2	5e		 pop	 rsi
  002d3	c3		 ret	 0
MD5_hexdigest ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@ ; `string'
PUBLIC	??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@ ; `string'
PUBLIC	??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@ ; `string'
PUBLIC	??_C@_08BNPIIEPK@O?3update?$AA@			; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyBuffer_Release:PROC
EXTRN	PyExc_BufferError:QWORD
EXTRN	PyObject_GetBuffer:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$MD5_update DD imagerel MD5_update
	DD	imagerel MD5_update+314
	DD	imagerel $unwind$MD5_update
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MD5_update DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
CONST	SEGMENT
??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@ DB 'Buffer mus'
	DB	't be single dimension', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@
CONST	SEGMENT
??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@ DB 'object suppo'
	DB	'rting the buffer API required', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@
CONST	SEGMENT
??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@ DB 'Unicode-obj'
	DB	'ects must be encoded before hashing', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BNPIIEPK@O?3update?$AA@
CONST	SEGMENT
??_C@_08BNPIIEPK@O?3update?$AA@ DB 'O:update', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT MD5_update
_TEXT	SEGMENT
buf$ = 32
obj$ = 112
self$ = 144
args$ = 152
MD5_update PROC						; COMDAT

; 413  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 414  :     PyObject *obj;
; 415  :     Py_buffer buf;
; 416  : 
; 417  :     if (!PyArg_ParseTuple(args, "O:update", &obj))

  00011	4c 8d 44 24 70	 lea	 r8, QWORD PTR obj$[rsp]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BNPIIEPK@O?3update?$AA@
  0001d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00025	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002a	85 c0		 test	 eax, eax
  0002c	75 07		 jne	 SHORT $LN9@MD5_update

; 418  :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	e9 fd 00 00 00	 jmp	 $LN10@MD5_update
$LN9@MD5_update:
$LN8@MD5_update:

; 419  : 
; 420  :     GET_BUFFER_VIEW_OR_ERROUT(obj, &buf);

  00035	48 8b 44 24 70	 mov	 rax, QWORD PTR obj$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00044	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00049	85 c0		 test	 eax, eax
  0004b	74 1a		 je	 SHORT $LN5@MD5_update
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@
  00054	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0005b	e8 00 00 00 00	 call	 PyErr_SetString
  00060	33 c0		 xor	 eax, eax
  00062	e9 cb 00 00 00	 jmp	 $LN10@MD5_update
$LN5@MD5_update:
  00067	48 8b 44 24 70	 mov	 rax, QWORD PTR obj$[rsp]
  0006c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00070	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  00078	74 16		 je	 SHORT $LN3@MD5_update
  0007a	48 8b 44 24 70	 mov	 rax, QWORD PTR obj$[rsp]
  0007f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00083	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  0008a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0008e	75 1a		 jne	 SHORT $LN4@MD5_update
$LN3@MD5_update:
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@
  00097	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009e	e8 00 00 00 00	 call	 PyErr_SetString
  000a3	33 c0		 xor	 eax, eax
  000a5	e9 88 00 00 00	 jmp	 $LN10@MD5_update
$LN4@MD5_update:
  000aa	45 33 c0	 xor	 r8d, r8d
  000ad	48 8d 54 24 20	 lea	 rdx, QWORD PTR buf$[rsp]
  000b2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR obj$[rsp]
  000b7	e8 00 00 00 00	 call	 PyObject_GetBuffer
  000bc	83 f8 ff	 cmp	 eax, -1
  000bf	75 04		 jne	 SHORT $LN2@MD5_update
  000c1	33 c0		 xor	 eax, eax
  000c3	eb 6d		 jmp	 SHORT $LN10@MD5_update
$LN2@MD5_update:
  000c5	83 7c 24 44 01	 cmp	 DWORD PTR buf$[rsp+36], 1
  000ca	7e 21		 jle	 SHORT $LN1@MD5_update
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  000d3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  000da	e8 00 00 00 00	 call	 PyErr_SetString
  000df	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  000e4	e8 00 00 00 00	 call	 PyBuffer_Release
  000e9	33 c0		 xor	 eax, eax
  000eb	eb 45		 jmp	 SHORT $LN10@MD5_update
$LN1@MD5_update:
  000ed	33 c0		 xor	 eax, eax
  000ef	85 c0		 test	 eax, eax
  000f1	0f 85 3e ff ff
	ff		 jne	 $LN8@MD5_update

; 421  : 
; 422  :     md5_process(&self->hash_state, buf.buf, buf.len);

  000f7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000ff	48 83 c0 60	 add	 rax, 96			; 00000060H
  00103	4c 8b 44 24 30	 mov	 r8, QWORD PTR buf$[rsp+16]
  00108	48 8b 54 24 20	 mov	 rdx, QWORD PTR buf$[rsp]
  0010d	48 8b c8	 mov	 rcx, rax
  00110	e8 00 00 00 00	 call	 md5_process

; 423  : 
; 424  :     PyBuffer_Release(&buf);

  00115	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  0011a	e8 00 00 00 00	 call	 PyBuffer_Release

; 425  :     Py_INCREF(Py_None);

  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00126	e8 00 00 00 00	 call	 _Py_IncRef

; 426  :     return Py_None;

  0012b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN10@MD5_update:

; 427  : }

  00132	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00139	c3		 ret	 0
MD5_update ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EA@FHOFJCKE@?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@FJHBFMEJ@?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
EXTRN	memcpy:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\md5module.c
pdata	SEGMENT
$pdata$md5_process DD imagerel md5_process
	DD	imagerel md5_process+478
	DD	imagerel $unwind$md5_process
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$md5_process DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_1EA@FHOFJCKE@?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@FHOFJCKE@?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@ DB 'm'
	DB	00H, 'd', 00H, '5', 00H, '-', 00H, '>', 00H, 'c', 00H, 'u', 00H
	DB	'r', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H
	DB	'f', 00H, '(', 00H, 'm', 00H, 'd', 00H, '5', 00H, '-', 00H, '>'
	DB	00H, 'b', 00H, 'u', 00H, 'f', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@FJHBFMEJ@?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@FJHBFMEJ@?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT md5_process
_TEXT	SEGMENT
n$ = 32
tv129 = 40
md5$ = 64
in$ = 72
inlen$ = 80
md5_process PROC					; COMDAT

; 233  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 234  :     Py_ssize_t n;
; 235  : 
; 236  :     assert(md5 != NULL);

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR md5$[rsp], 0
  00019	75 1c		 jne	 SHORT $LN8@md5_proces
  0001b	41 b8 ec 00 00
	00		 mov	 r8d, 236		; 000000ecH
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KFDLKFAL@?$AAm?$AAd?$AA5?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00035	33 c0		 xor	 eax, eax
$LN8@md5_proces:

; 237  :     assert(in != NULL);

  00037	48 83 7c 24 48
	00		 cmp	 QWORD PTR in$[rsp], 0
  0003d	75 1c		 jne	 SHORT $LN9@md5_proces
  0003f	41 b8 ed 00 00
	00		 mov	 r8d, 237		; 000000edH
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BG@FJHBFMEJ@?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00059	33 c0		 xor	 eax, eax
$LN9@md5_proces:

; 238  :     assert(md5->curlen <= sizeof(md5->buf));

  0005b	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00060	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00063	48 83 f8 40	 cmp	 rax, 64			; 00000040H
  00067	76 1c		 jbe	 SHORT $LN10@md5_proces
  00069	41 b8 ee 00 00
	00		 mov	 r8d, 238		; 000000eeH
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@FHOFJCKE@?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAm?$AAd?$AA5?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00083	33 c0		 xor	 eax, eax
$LN10@md5_proces:
$LN5@md5_proces:

; 239  : 
; 240  :     while (inlen > 0) {

  00085	48 83 7c 24 50
	00		 cmp	 QWORD PTR inlen$[rsp], 0
  0008b	0f 8e 48 01 00
	00		 jle	 $LN4@md5_proces

; 241  :         if (md5->curlen == 0 && inlen >= MD5_BLOCKSIZE) {

  00091	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00096	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  0009a	75 4e		 jne	 SHORT $LN3@md5_proces
  0009c	48 83 7c 24 50
	40		 cmp	 QWORD PTR inlen$[rsp], 64 ; 00000040H
  000a2	7c 46		 jl	 SHORT $LN3@md5_proces

; 242  :            md5_compress(md5, (unsigned char *)in);

  000a4	48 8b 54 24 48	 mov	 rdx, QWORD PTR in$[rsp]
  000a9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  000ae	e8 00 00 00 00	 call	 md5_compress

; 243  :            md5->length    += MD5_BLOCKSIZE * 8;

  000b3	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  000b8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000bb	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  000c1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  000c6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 244  :            in             += MD5_BLOCKSIZE;

  000c9	48 8b 44 24 48	 mov	 rax, QWORD PTR in$[rsp]
  000ce	48 83 c0 40	 add	 rax, 64			; 00000040H
  000d2	48 89 44 24 48	 mov	 QWORD PTR in$[rsp], rax

; 245  :            inlen          -= MD5_BLOCKSIZE;

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR inlen$[rsp]
  000dc	48 83 e8 40	 sub	 rax, 64			; 00000040H
  000e0	48 89 44 24 50	 mov	 QWORD PTR inlen$[rsp], rax

; 246  :         } else {

  000e5	e9 ea 00 00 00	 jmp	 $LN2@md5_proces
$LN3@md5_proces:

; 247  :            n = MIN(inlen, (Py_ssize_t)(MD5_BLOCKSIZE - md5->curlen));

  000ea	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  000ef	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000f4	2b 48 18	 sub	 ecx, DWORD PTR [rax+24]
  000f7	8b c1		 mov	 eax, ecx
  000f9	8b c0		 mov	 eax, eax
  000fb	48 39 44 24 50	 cmp	 QWORD PTR inlen$[rsp], rax
  00100	7d 0c		 jge	 SHORT $LN11@md5_proces
  00102	48 8b 44 24 50	 mov	 rax, QWORD PTR inlen$[rsp]
  00107	48 89 44 24 28	 mov	 QWORD PTR tv129[rsp], rax
  0010c	eb 16		 jmp	 SHORT $LN12@md5_proces
$LN11@md5_proces:
  0010e	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00113	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00118	2b 48 18	 sub	 ecx, DWORD PTR [rax+24]
  0011b	8b c1		 mov	 eax, ecx
  0011d	8b c0		 mov	 eax, eax
  0011f	48 89 44 24 28	 mov	 QWORD PTR tv129[rsp], rax
$LN12@md5_proces:
  00124	48 8b 44 24 28	 mov	 rax, QWORD PTR tv129[rsp]
  00129	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 248  :            memcpy(md5->buf + md5->curlen, in, (size_t)n);

  0012e	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00133	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00136	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  0013b	48 8d 44 01 1c	 lea	 rax, QWORD PTR [rcx+rax+28]
  00140	4c 8b 44 24 20	 mov	 r8, QWORD PTR n$[rsp]
  00145	48 8b 54 24 48	 mov	 rdx, QWORD PTR in$[rsp]
  0014a	48 8b c8	 mov	 rcx, rax
  0014d	e8 00 00 00 00	 call	 memcpy

; 249  :            md5->curlen    += n;

  00152	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00157	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0015a	48 03 44 24 20	 add	 rax, QWORD PTR n$[rsp]
  0015f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  00164	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 250  :            in             += n;

  00167	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0016c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR in$[rsp]
  00171	48 03 c8	 add	 rcx, rax
  00174	48 8b c1	 mov	 rax, rcx
  00177	48 89 44 24 48	 mov	 QWORD PTR in$[rsp], rax

; 251  :            inlen          -= n;

  0017c	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00181	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inlen$[rsp]
  00186	48 2b c8	 sub	 rcx, rax
  00189	48 8b c1	 mov	 rax, rcx
  0018c	48 89 44 24 50	 mov	 QWORD PTR inlen$[rsp], rax

; 252  :            if (md5->curlen == MD5_BLOCKSIZE) {

  00191	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  00196	83 78 18 40	 cmp	 DWORD PTR [rax+24], 64	; 00000040H
  0019a	75 38		 jne	 SHORT $LN1@md5_proces

; 253  :               md5_compress(md5, md5->buf);

  0019c	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  001a1	48 83 c0 1c	 add	 rax, 28
  001a5	48 8b d0	 mov	 rdx, rax
  001a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  001ad	e8 00 00 00 00	 call	 md5_compress

; 254  :               md5->length += 8*MD5_BLOCKSIZE;

  001b2	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  001b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ba	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  001c0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR md5$[rsp]
  001c5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 255  :               md5->curlen = 0;

  001c8	48 8b 44 24 40	 mov	 rax, QWORD PTR md5$[rsp]
  001cd	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [rax+24], 0
$LN1@md5_proces:
$LN2@md5_proces:

; 256  :            }
; 257  :        }
; 258  :     }

  001d4	e9 ac fe ff ff	 jmp	 $LN5@md5_proces
$LN4@md5_proces:

; 259  : }

  001d9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001dd	c3		 ret	 0
md5_process ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$MD5_get_block_size DD imagerel MD5_get_block_size
	DD	imagerel MD5_get_block_size+29
	DD	imagerel $unwind$MD5_get_block_size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MD5_get_block_size DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT MD5_get_block_size
_TEXT	SEGMENT
self$ = 48
closure$ = 56
MD5_get_block_size PROC					; COMDAT

; 439  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 440  :     return PyLong_FromLong(MD5_BLOCKSIZE);

  0000e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00013	e8 00 00 00 00	 call	 PyLong_FromLong

; 441  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
MD5_get_block_size ENDP
_TEXT	ENDS
PUBLIC	??_C@_03GCGHEHKJ@MD5?$AA@			; `string'
EXTRN	PyUnicode_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$MD5_get_name DD imagerel MD5_get_name
	DD	imagerel MD5_get_name+36
	DD	imagerel $unwind$MD5_get_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MD5_get_name DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_03GCGHEHKJ@MD5?$AA@
CONST	SEGMENT
??_C@_03GCGHEHKJ@MD5?$AA@ DB 'MD5', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT MD5_get_name
_TEXT	SEGMENT
self$ = 48
closure$ = 56
MD5_get_name PROC					; COMDAT

; 445  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 446  :     return PyUnicode_FromStringAndSize("MD5", 3);

  0000e	ba 03 00 00 00	 mov	 edx, 3
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03GCGHEHKJ@MD5?$AA@
  0001a	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize

; 447  : }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
MD5_get_name ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$md5_get_digest_size DD imagerel md5_get_digest_size
	DD	imagerel md5_get_digest_size+29
	DD	imagerel $unwind$md5_get_digest_size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$md5_get_digest_size DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT md5_get_digest_size
_TEXT	SEGMENT
self$ = 48
closure$ = 56
md5_get_digest_size PROC				; COMDAT

; 451  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 452  :     return PyLong_FromLong(MD5_DIGESTSIZE);

  0000e	b9 10 00 00 00	 mov	 ecx, 16
  00013	e8 00 00 00 00	 call	 PyLong_FromLong

; 453  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
md5_get_digest_size ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_06KJFPOEIK@?$HMO?3new?$AA@		; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$MD5_new DD imagerel MD5_new
	DD	imagerel MD5_new+474
	DD	imagerel $unwind$MD5_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MD5_new DD 021601H
	DD	0150116H
xdata	ENDS
;	COMDAT ??_C@_06KJFPOEIK@?$HMO?3new?$AA@
CONST	SEGMENT
??_C@_06KJFPOEIK@?$HMO?3new?$AA@ DB '|O:new', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT MD5_new
_TEXT	SEGMENT
data_obj$ = 48
buf$ = 64
new$ = 144
self$ = 176
args$ = 184
kwdict$ = 192
MD5_new	PROC						; COMDAT

; 514  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 515  :     static char *kwlist[] = {"string", NULL};
; 516  :     MD5object *new;
; 517  :     PyObject *data_obj = NULL;

  00016	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR data_obj$[rsp], 0

; 518  :     Py_buffer buf;
; 519  : 
; 520  :     if (!PyArg_ParseTupleAndKeywords(args, kwdict, "|O:new", kwlist,
; 521  :                                      &data_obj)) {

  0001f	48 8d 44 24 30	 lea	 rax, QWORD PTR data_obj$[rsp]
  00024	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00029	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??MD5_new@@9@9
  00030	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KJFPOEIK@?$HMO?3new?$AA@
  00037	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR kwdict$[rsp]
  0003f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00047	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0004c	85 c0		 test	 eax, eax
  0004e	75 07		 jne	 SHORT $LN15@MD5_new

; 522  :         return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	e9 7b 01 00 00	 jmp	 $LN16@MD5_new
$LN15@MD5_new:

; 523  :     }
; 524  : 
; 525  :     if (data_obj)

  00057	48 83 7c 24 30
	00		 cmp	 QWORD PTR data_obj$[rsp], 0
  0005d	0f 84 c8 00 00
	00		 je	 $LN14@MD5_new
$LN13@MD5_new:

; 526  :         GET_BUFFER_VIEW_OR_ERROUT(data_obj, &buf);

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR data_obj$[rsp]
  00068	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00072	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00077	85 c0		 test	 eax, eax
  00079	74 1a		 je	 SHORT $LN10@MD5_new
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@IBHDLOCD@Unicode?9objects?5must?5be?5encoded?5@
  00082	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00089	e8 00 00 00 00	 call	 PyErr_SetString
  0008e	33 c0		 xor	 eax, eax
  00090	e9 3d 01 00 00	 jmp	 $LN16@MD5_new
$LN10@MD5_new:
  00095	48 8b 44 24 30	 mov	 rax, QWORD PTR data_obj$[rsp]
  0009a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0009e	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  000a6	74 16		 je	 SHORT $LN8@MD5_new
  000a8	48 8b 44 24 30	 mov	 rax, QWORD PTR data_obj$[rsp]
  000ad	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b1	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  000b8	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000bc	75 1a		 jne	 SHORT $LN9@MD5_new
$LN8@MD5_new:
  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@NHOOCGGK@object?5supporting?5the?5buffer?5API@
  000c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000cc	e8 00 00 00 00	 call	 PyErr_SetString
  000d1	33 c0		 xor	 eax, eax
  000d3	e9 fa 00 00 00	 jmp	 $LN16@MD5_new
$LN9@MD5_new:
  000d8	45 33 c0	 xor	 r8d, r8d
  000db	48 8d 54 24 40	 lea	 rdx, QWORD PTR buf$[rsp]
  000e0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR data_obj$[rsp]
  000e5	e8 00 00 00 00	 call	 PyObject_GetBuffer
  000ea	83 f8 ff	 cmp	 eax, -1
  000ed	75 07		 jne	 SHORT $LN7@MD5_new
  000ef	33 c0		 xor	 eax, eax
  000f1	e9 dc 00 00 00	 jmp	 $LN16@MD5_new
$LN7@MD5_new:
  000f6	83 7c 24 64 01	 cmp	 DWORD PTR buf$[rsp+36], 1
  000fb	7e 24		 jle	 SHORT $LN6@MD5_new
  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  00104	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  0010b	e8 00 00 00 00	 call	 PyErr_SetString
  00110	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00115	e8 00 00 00 00	 call	 PyBuffer_Release
  0011a	33 c0		 xor	 eax, eax
  0011c	e9 b1 00 00 00	 jmp	 $LN16@MD5_new
$LN6@MD5_new:
  00121	33 c0		 xor	 eax, eax
  00123	85 c0		 test	 eax, eax
  00125	0f 85 38 ff ff
	ff		 jne	 $LN13@MD5_new
$LN14@MD5_new:

; 527  : 
; 528  :     if ((new = newMD5object()) == NULL) {

  0012b	e8 00 00 00 00	 call	 newMD5object
  00130	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR new$[rsp], rax
  00138	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR new$[rsp], 0
  00141	75 16		 jne	 SHORT $LN5@MD5_new

; 529  :         if (data_obj)

  00143	48 83 7c 24 30
	00		 cmp	 QWORD PTR data_obj$[rsp], 0
  00149	74 0a		 je	 SHORT $LN4@MD5_new

; 530  :             PyBuffer_Release(&buf);

  0014b	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00150	e8 00 00 00 00	 call	 PyBuffer_Release
$LN4@MD5_new:

; 531  :         return NULL;

  00155	33 c0		 xor	 eax, eax
  00157	eb 79		 jmp	 SHORT $LN16@MD5_new
$LN5@MD5_new:

; 532  :     }
; 533  : 
; 534  :     md5_init(&new->hash_state);

  00159	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR new$[rsp]
  00161	48 83 c0 60	 add	 rax, 96			; 00000060H
  00165	48 8b c8	 mov	 rcx, rax
  00168	e8 00 00 00 00	 call	 md5_init

; 535  : 
; 536  :     if (PyErr_Occurred()) {

  0016d	e8 00 00 00 00	 call	 PyErr_Occurred
  00172	48 85 c0	 test	 rax, rax
  00175	74 23		 je	 SHORT $LN3@MD5_new

; 537  :         Py_DECREF(new);

  00177	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR new$[rsp]
  0017f	e8 00 00 00 00	 call	 _Py_DecRef

; 538  :         if (data_obj)

  00184	48 83 7c 24 30
	00		 cmp	 QWORD PTR data_obj$[rsp], 0
  0018a	74 0a		 je	 SHORT $LN2@MD5_new

; 539  :             PyBuffer_Release(&buf);

  0018c	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00191	e8 00 00 00 00	 call	 PyBuffer_Release
$LN2@MD5_new:

; 540  :         return NULL;

  00196	33 c0		 xor	 eax, eax
  00198	eb 38		 jmp	 SHORT $LN16@MD5_new
$LN3@MD5_new:

; 541  :     }
; 542  :     if (data_obj) {

  0019a	48 83 7c 24 30
	00		 cmp	 QWORD PTR data_obj$[rsp], 0
  001a0	74 28		 je	 SHORT $LN1@MD5_new

; 543  :         md5_process(&new->hash_state, buf.buf, buf.len);

  001a2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR new$[rsp]
  001aa	48 83 c0 60	 add	 rax, 96			; 00000060H
  001ae	4c 8b 44 24 50	 mov	 r8, QWORD PTR buf$[rsp+16]
  001b3	48 8b 54 24 40	 mov	 rdx, QWORD PTR buf$[rsp]
  001b8	48 8b c8	 mov	 rcx, rax
  001bb	e8 00 00 00 00	 call	 md5_process

; 544  :         PyBuffer_Release(&buf);

  001c0	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  001c5	e8 00 00 00 00	 call	 PyBuffer_Release
$LN1@MD5_new:

; 545  :     }
; 546  : 
; 547  :     return (PyObject *)new;

  001ca	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR new$[rsp]
$LN16@MD5_new:

; 548  : }

  001d2	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  001d9	c3		 ret	 0
MD5_new	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\md5module.c
pdata	SEGMENT
$pdata$md5_init DD imagerel md5_init
	DD	imagerel md5_init+122
	DD	imagerel $unwind$md5_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$md5_init DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT md5_init
_TEXT	SEGMENT
md5$ = 48
md5_init PROC						; COMDAT

; 215  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 216  :     assert(md5 != NULL);

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR md5$[rsp], 0
  0000f	75 1c		 jne	 SHORT $LN3@md5_init
  00011	41 b8 d8 00 00
	00		 mov	 r8d, 216		; 000000d8H
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@NGFEBKPJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAd?$AA5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KFDLKFAL@?$AAm?$AAd?$AA5?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002b	33 c0		 xor	 eax, eax
$LN3@md5_init:

; 217  :     md5->state[0] = 0x67452301UL;

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR md5$[rsp]
  00032	c7 40 08 01 23
	45 67		 mov	 DWORD PTR [rax+8], 1732584193 ; 67452301H

; 218  :     md5->state[1] = 0xefcdab89UL;

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR md5$[rsp]
  0003e	c7 40 0c 89 ab
	cd ef		 mov	 DWORD PTR [rax+12], -271733879 ; efcdab89H

; 219  :     md5->state[2] = 0x98badcfeUL;

  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR md5$[rsp]
  0004a	c7 40 10 fe dc
	ba 98		 mov	 DWORD PTR [rax+16], -1732584194 ; 98badcfeH

; 220  :     md5->state[3] = 0x10325476UL;

  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR md5$[rsp]
  00056	c7 40 14 76 54
	32 10		 mov	 DWORD PTR [rax+20], 271733878 ; 10325476H

; 221  :     md5->curlen = 0;

  0005d	48 8b 44 24 30	 mov	 rax, QWORD PTR md5$[rsp]
  00062	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [rax+24], 0

; 222  :     md5->length = 0;

  00069	48 8b 44 24 30	 mov	 rax, QWORD PTR md5$[rsp]
  0006e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 223  : }

  00075	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00079	c3		 ret	 0
md5_init ENDP
_TEXT	ENDS
PUBLIC	PyInit__md5
EXTRN	PyModule_Create2TraceRefs:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__md5 DD imagerel $LN4
	DD	imagerel $LN4+60
	DD	imagerel $unwind$PyInit__md5
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__md5 DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyInit__md5
_TEXT	SEGMENT
PyInit__md5 PROC					; COMDAT

; 578  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 579  :     Py_TYPE(&MD5type) = &PyType_Type;

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyType_Type
  0000b	48 89 05 58 00
	00 00		 mov	 QWORD PTR MD5type+88, rax

; 580  :     if (PyType_Ready(&MD5type) < 0)

  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:MD5type
  00019	e8 00 00 00 00	 call	 PyType_Ready
  0001e	85 c0		 test	 eax, eax
  00020	7d 04		 jge	 SHORT $LN1@PyInit__md

; 581  :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	eb 11		 jmp	 SHORT $LN2@PyInit__md
$LN1@PyInit__md:

; 582  :     return PyModule_Create(&_md5module);

  00026	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_md5module
  00032	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
$LN2@PyInit__md:

; 583  : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
PyInit__md5 ENDP
_TEXT	ENDS
END
