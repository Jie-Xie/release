; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@EGKCMCGH@_io?4StringIO?$AA@		; `string'
PUBLIC	??_C@_0P@MGPKIIND@line_buffering?$AA@		; `string'
PUBLIC	??_C@_08EGHAIIMO@newlines?$AA@			; `string'
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0N@NAMJJHIO@__getstate__?$AA@		; `string'
PUBLIC	??_C@_08IBOGFJJC@writable?$AA@			; `string'
PUBLIC	??_C@_08INDGGIBD@readable?$AA@			; `string'
PUBLIC	??_C@_08JPFEOKJG@seekable?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_04EDECCOGL@seek?$AA@			; `string'
PUBLIC	??_C@_08MABILMFG@truncate?$AA@			; `string'
PUBLIC	??_C@_04LBPCFPDD@tell?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_08ODLBJABI@getvalue?$AA@			; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	PyStringIO_Type
;	COMDAT ??_C@_0N@EGKCMCGH@_io?4StringIO?$AA@
CONST	SEGMENT
??_C@_0N@EGKCMCGH@_io?4StringIO?$AA@ DB '_io.StringIO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MGPKIIND@line_buffering?$AA@
CONST	SEGMENT
??_C@_0P@MGPKIIND@line_buffering?$AA@ DB 'line_buffering', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGHAIIMO@newlines?$AA@
CONST	SEGMENT
??_C@_08EGHAIIMO@newlines?$AA@ DB 'newlines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAMJJHIO@__getstate__?$AA@
CONST	SEGMENT
??_C@_0N@NAMJJHIO@__getstate__?$AA@ DB '__getstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBOGFJJC@writable?$AA@
CONST	SEGMENT
??_C@_08IBOGFJJC@writable?$AA@ DB 'writable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08INDGGIBD@readable?$AA@
CONST	SEGMENT
??_C@_08INDGGIBD@readable?$AA@ DB 'readable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPFEOKJG@seekable?$AA@
CONST	SEGMENT
??_C@_08JPFEOKJG@seekable?$AA@ DB 'seekable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDECCOGL@seek?$AA@
CONST	SEGMENT
??_C@_04EDECCOGL@seek?$AA@ DB 'seek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MABILMFG@truncate?$AA@
CONST	SEGMENT
??_C@_08MABILMFG@truncate?$AA@ DB 'truncate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBPCFPDD@tell?$AA@
CONST	SEGMENT
??_C@_04LBPCFPDD@tell?$AA@ DB 'tell', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ODLBJABI@getvalue?$AA@
CONST	SEGMENT
??_C@_08ODLBJABI@getvalue?$AA@ DB 'getvalue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
stringio_doc DB	'Text I/O implementation using an in-memory buffer.', 0aH
	DB	0aH, 'The initial_value argument sets the value of object.  Th'
	DB	'e newline', 0aH, 'argument is like the one of TextIOWrapper'''
	DB	's constructor.', 00H
	ORG $+1
stringio_getvalue_doc DB 'Retrieve the entire contents of the object.', 00H
	ORG $+4
stringio_tell_doc DB 'Tell the current file position.', 00H
stringio_read_doc DB 'Read at most n characters, returned as a string.', 0aH
	DB	0aH, 'If the argument is negative or omitted, read until EOF', 0aH
	DB	'is reached. Return an empty string at EOF.', 0aH, 00H
	ORG $+11
stringio_readline_doc DB 'Read until newline or EOF.', 0aH, 0aH, 'Returns'
	DB	' an empty string if EOF is hit immediately.', 0aH, 00H
stringio_truncate_doc DB 'Truncate size to pos.', 0aH, 0aH, 'The pos argu'
	DB	'ment defaults to the current file position, as', 0aH, 'return'
	DB	'ed by tell().  The current file position is unchanged.', 0aH, 'R'
	DB	'eturns the new absolute position.', 0aH, 00H
	ORG $+13
stringio_seek_doc DB 'Change stream position.', 0aH, 0aH, 'Seek to charac'
	DB	'ter offset pos relative to position indicated by whence:', 0aH
	DB	'    0  Start of stream (the default).  pos should be >= 0;', 0aH
	DB	'    1  Current position - pos must be 0;', 0aH, '    2  End o'
	DB	'f stream - pos must be 0.', 0aH, 'Returns the new absolute po'
	DB	'sition.', 0aH, 00H
	ORG $+2
stringio_write_doc DB 'Write string to file.', 0aH, 0aH, 'Returns the num'
	DB	'ber of characters written, which is always equal to', 0aH, 't'
	DB	'he length of the string.', 0aH, 00H
	ORG $+11
stringio_close_doc DB 'Close the IO object. Attempting any further operat'
	DB	'ion after the', 0aH, 'object is closed will raise a ValueErro'
	DB	'r.', 0aH, 0aH, 'This method has no effect if the file is alre'
	DB	'ady closed.', 0aH, 00H
	ORG $+3
stringio_readable_doc DB 'readable() -> bool. Returns True if the IO obje'
	DB	'ct can be read.', 00H
	ORG $+9
stringio_writable_doc DB 'writable() -> bool. Returns True if the IO obje'
	DB	'ct can be written.', 00H
	ORG $+14
stringio_seekable_doc DB 'seekable() -> bool. Returns True if the IO obje'
	DB	'ct can be seeked.', 00H
	ORG $+15
stringio_methods DQ FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:stringio_close
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_close_doc
	DQ	FLAT:??_C@_08ODLBJABI@getvalue?$AA@
	DQ	FLAT:stringio_getvalue
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_getvalue_doc
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:stringio_read
	DD	01H
	ORG $+4
	DQ	FLAT:stringio_read_doc
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:stringio_readline
	DD	01H
	ORG $+4
	DQ	FLAT:stringio_readline_doc
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:stringio_tell
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_tell_doc
	DQ	FLAT:??_C@_08MABILMFG@truncate?$AA@
	DQ	FLAT:stringio_truncate
	DD	01H
	ORG $+4
	DQ	FLAT:stringio_truncate_doc
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:stringio_seek
	DD	01H
	ORG $+4
	DQ	FLAT:stringio_seek_doc
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:stringio_write
	DD	08H
	ORG $+4
	DQ	FLAT:stringio_write_doc
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	FLAT:stringio_seekable
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_seekable_doc
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:stringio_readable
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_readable_doc
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:stringio_writable
	DD	04H
	ORG $+4
	DQ	FLAT:stringio_writable_doc
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	FLAT:stringio_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:stringio_setstate
	DD	08H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
stringio_getset DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:stringio_closed
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08EGHAIIMO@newlines?$AA@
	DQ	FLAT:stringio_newlines
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@MGPKIIND@line_buffering?$AA@
	DQ	FLAT:stringio_line_buffering
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyStringIO_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@EGKCMCGH@_io?4StringIO?$AA@
	DQ	00000000000000d0H
	DQ	0000000000000000H
	DQ	FLAT:stringio_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:stringio_doc
	DQ	FLAT:stringio_traverse
	DQ	FLAT:stringio_clear
	DQ	0000000000000000H
	DQ	00000000000000c0H
	DQ	0000000000000000H
	DQ	FLAT:stringio_iternext
	DQ	FLAT:stringio_methods
	DQ	0000000000000000H
	DQ	FLAT:stringio_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	00000000000000b8H
	DQ	FLAT:stringio_init
	DQ	0000000000000000H
	DQ	FLAT:stringio_new
	ORG $+72
_DATA	ENDS
PUBLIC	??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@ ; `string'
PUBLIC	??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@ ; `string'
EXTRN	PyUnicode_FromKindAndData:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\stringio.c
pdata	SEGMENT
$pdata$stringio_getvalue DD imagerel stringio_getvalue
	DD	imagerel stringio_getvalue+146
	DD	imagerel $unwind$stringio_getvalue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_getvalue DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@ DB 'I/O operati'
	DB	'on on closed file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
CONST	SEGMENT
??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@ DB 'I/O operati'
	DB	'on on uninitialized object', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_getvalue
_TEXT	SEGMENT
self$ = 48
stringio_getvalue PROC					; COMDAT

; 272  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 273  :     CHECK_INITIALIZED(self);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  00015	85 c0		 test	 eax, eax
  00017	7f 17		 jg	 SHORT $LN3@stringio_g
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00020	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00027	e8 00 00 00 00	 call	 PyErr_SetString
  0002c	33 c0		 xor	 eax, eax
  0002e	eb 5d		 jmp	 SHORT $LN4@stringio_g
$LN3@stringio_g:

; 274  :     CHECK_CLOSED(self);

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00035	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  0003c	85 c0		 test	 eax, eax
  0003e	74 17		 je	 SHORT $LN2@stringio_g
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004e	e8 00 00 00 00	 call	 PyErr_SetString
  00053	33 c0		 xor	 eax, eax
  00055	eb 36		 jmp	 SHORT $LN4@stringio_g
$LN2@stringio_g:

; 275  :     if (self->state == STATE_ACCUMULATING)

  00057	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005c	83 b8 80 00 00
	00 02		 cmp	 DWORD PTR [rax+128], 2
  00063	75 0c		 jne	 SHORT $LN1@stringio_g

; 276  :         return make_intermediate(self);

  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0006a	e8 00 00 00 00	 call	 make_intermediate
  0006f	eb 1c		 jmp	 SHORT $LN4@stringio_g
$LN1@stringio_g:

; 277  :     return PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, self->buf,
; 278  :                                      self->string_size);

  00071	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00076	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0007a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0007f	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00083	b9 04 00 00 00	 mov	 ecx, 4
  00088	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
$LN4@stringio_g:

; 279  : }

  0008d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00091	c3		 ret	 0
stringio_getvalue ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
EXTRN	_PyAccu_Accumulate:PROC
EXTRN	_PyAccu_Init:PROC
EXTRN	_PyAccu_Finish:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_intermediate DD imagerel make_intermediate
	DD	imagerel make_intermediate+150
	DD	imagerel $unwind$make_intermediate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_intermediate DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT make_intermediate
_TEXT	SEGMENT
intermediate$ = 32
self$ = 64
make_intermediate PROC					; COMDAT

; 125  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 126  :     PyObject *intermediate = _PyAccu_Finish(&self->accu);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00014	48 8b c8	 mov	 rcx, rax
  00017	e8 00 00 00 00	 call	 _PyAccu_Finish
  0001c	48 89 44 24 20	 mov	 QWORD PTR intermediate$[rsp], rax

; 127  :     self->state = STATE_REALIZED;

  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00026	c7 80 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+128], 1

; 128  :     if (intermediate == NULL)

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR intermediate$[rsp], 0
  00036	75 04		 jne	 SHORT $LN3@make_inter

; 129  :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 55		 jmp	 SHORT $LN4@make_inter
$LN3@make_inter:

; 130  :     if (_PyAccu_Init(&self->accu) ||
; 131  :         _PyAccu_Accumulate(&self->accu, intermediate)) {

  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00041	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 _PyAccu_Init
  0004f	85 c0		 test	 eax, eax
  00051	75 1c		 jne	 SHORT $LN1@make_inter
  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00058	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  0005e	48 8b 54 24 20	 mov	 rdx, QWORD PTR intermediate$[rsp]
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  0006b	85 c0		 test	 eax, eax
  0006d	74 0e		 je	 SHORT $LN2@make_inter
$LN1@make_inter:

; 132  :         Py_DECREF(intermediate);

  0006f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR intermediate$[rsp]
  00074	e8 00 00 00 00	 call	 _Py_DecRef

; 133  :         return NULL;

  00079	33 c0		 xor	 eax, eax
  0007b	eb 14		 jmp	 SHORT $LN4@make_inter
$LN2@make_inter:

; 134  :     }
; 135  :     self->state = STATE_ACCUMULATING;

  0007d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00082	c7 80 80 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+128], 2

; 136  :     return intermediate;

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR intermediate$[rsp]
$LN4@make_inter:

; 137  : }

  00091	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00095	c3		 ret	 0
make_intermediate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\stringio.c
pdata	SEGMENT
$pdata$stringio_tell DD imagerel stringio_tell
	DD	imagerel stringio_tell+106
	DD	imagerel $unwind$stringio_tell
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_tell DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT stringio_tell
_TEXT	SEGMENT
self$ = 48
stringio_tell PROC					; COMDAT

; 286  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 287  :     CHECK_INITIALIZED(self);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  00015	85 c0		 test	 eax, eax
  00017	7f 17		 jg	 SHORT $LN2@stringio_t
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00020	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00027	e8 00 00 00 00	 call	 PyErr_SetString
  0002c	33 c0		 xor	 eax, eax
  0002e	eb 35		 jmp	 SHORT $LN3@stringio_t
$LN2@stringio_t:

; 288  :     CHECK_CLOSED(self);

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00035	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  0003c	85 c0		 test	 eax, eax
  0003e	74 17		 je	 SHORT $LN1@stringio_t
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004e	e8 00 00 00 00	 call	 PyErr_SetString
  00053	33 c0		 xor	 eax, eax
  00055	eb 0e		 jmp	 SHORT $LN3@stringio_t
$LN1@stringio_t:

; 289  :     return PyLong_FromSsize_t(self->pos);

  00057	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005c	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00060	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN3@stringio_t:

; 290  : }

  00065	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00069	c3		 ret	 0
stringio_tell ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@ ; `string'
PUBLIC	??_C@_07LBOODODI@?$HMO?3read?$AA@		; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyNumber_Check:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_read DD imagerel stringio_read
	DD	imagerel stringio_read+514
	DD	imagerel $unwind$stringio_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_read DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@
CONST	SEGMENT
??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@ DB 'integer ar'
	DB	'gument expected, got ''%s''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LBOODODI@?$HMO?3read?$AA@
CONST	SEGMENT
??_C@_07LBOODODI@?$HMO?3read?$AA@ DB '|O:read', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_read
_TEXT	SEGMENT
arg$ = 32
n$ = 40
output$ = 48
size$ = 56
result$20671 = 64
self$ = 96
args$ = 104
stringio_read PROC					; COMDAT

; 300  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 301  :     Py_ssize_t size, n;
; 302  :     Py_UCS4 *output;
; 303  :     PyObject *arg = Py_None;

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 89 44 24 20	 mov	 QWORD PTR arg$[rsp], rax

; 304  : 
; 305  :     CHECK_INITIALIZED(self);

  0001a	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0001f	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  00026	85 c0		 test	 eax, eax
  00028	7f 1a		 jg	 SHORT $LN13@stringio_r
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00031	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00038	e8 00 00 00 00	 call	 PyErr_SetString
  0003d	33 c0		 xor	 eax, eax
  0003f	e9 b9 01 00 00	 jmp	 $LN14@stringio_r
$LN13@stringio_r:

; 306  :     if (!PyArg_ParseTuple(args, "|O:read", &arg))

  00044	4c 8d 44 24 20	 lea	 r8, QWORD PTR arg$[rsp]
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07LBOODODI@?$HMO?3read?$AA@
  00050	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00055	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0005a	85 c0		 test	 eax, eax
  0005c	75 07		 jne	 SHORT $LN12@stringio_r

; 307  :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	e9 98 01 00 00	 jmp	 $LN14@stringio_r
$LN12@stringio_r:

; 308  :     CHECK_CLOSED(self);

  00065	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0006a	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  00071	85 c0		 test	 eax, eax
  00073	74 1a		 je	 SHORT $LN11@stringio_r
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0007c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00083	e8 00 00 00 00	 call	 PyErr_SetString
  00088	33 c0		 xor	 eax, eax
  0008a	e9 6e 01 00 00	 jmp	 $LN14@stringio_r
$LN11@stringio_r:

; 309  : 
; 310  :     if (PyNumber_Check(arg)) {

  0008f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arg$[rsp]
  00094	e8 00 00 00 00	 call	 PyNumber_Check
  00099	85 c0		 test	 eax, eax
  0009b	74 31		 je	 SHORT $LN10@stringio_r

; 311  :         size = PyNumber_AsSsize_t(arg, PyExc_OverflowError);

  0009d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  000a4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arg$[rsp]
  000a9	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  000ae	48 89 44 24 38	 mov	 QWORD PTR size$[rsp], rax

; 312  :         if (size == -1 && PyErr_Occurred())

  000b3	48 83 7c 24 38
	ff		 cmp	 QWORD PTR size$[rsp], -1
  000b9	75 11		 jne	 SHORT $LN9@stringio_r
  000bb	e8 00 00 00 00	 call	 PyErr_Occurred
  000c0	48 85 c0	 test	 rax, rax
  000c3	74 07		 je	 SHORT $LN9@stringio_r

; 313  :             return NULL;

  000c5	33 c0		 xor	 eax, eax
  000c7	e9 31 01 00 00	 jmp	 $LN14@stringio_r
$LN9@stringio_r:

; 314  :     }
; 315  :     else if (arg == Py_None) {

  000cc	eb 40		 jmp	 SHORT $LN8@stringio_r
$LN10@stringio_r:
  000ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000d5	48 39 44 24 20	 cmp	 QWORD PTR arg$[rsp], rax
  000da	75 0b		 jne	 SHORT $LN7@stringio_r

; 316  :         /* Read until EOF is reached, by default. */
; 317  :         size = -1;

  000dc	48 c7 44 24 38
	ff ff ff ff	 mov	 QWORD PTR size$[rsp], -1

; 318  :     }
; 319  :     else {

  000e5	eb 27		 jmp	 SHORT $LN6@stringio_r
$LN7@stringio_r:

; 320  :         PyErr_Format(PyExc_TypeError, "integer argument expected, got '%s'",
; 321  :                      Py_TYPE(arg)->tp_name);

  000e7	48 8b 44 24 20	 mov	 rax, QWORD PTR arg$[rsp]
  000ec	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f0	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@
  000fb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00102	e8 00 00 00 00	 call	 PyErr_Format

; 322  :         return NULL;

  00107	33 c0		 xor	 eax, eax
  00109	e9 ef 00 00 00	 jmp	 $LN14@stringio_r
$LN6@stringio_r:
$LN8@stringio_r:

; 323  :     }
; 324  : 
; 325  :     /* adjust invalid sizes */
; 326  :     n = self->string_size - self->pos;

  0010e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00113	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00118	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0011c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00120	48 2b c1	 sub	 rax, rcx
  00123	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 327  :     if (size < 0 || size > n) {

  00128	48 83 7c 24 38
	00		 cmp	 QWORD PTR size$[rsp], 0
  0012e	7c 0c		 jl	 SHORT $LN4@stringio_r
  00130	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  00135	48 39 44 24 38	 cmp	 QWORD PTR size$[rsp], rax
  0013a	7e 1b		 jle	 SHORT $LN5@stringio_r
$LN4@stringio_r:

; 328  :         size = n;

  0013c	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  00141	48 89 44 24 38	 mov	 QWORD PTR size$[rsp], rax

; 329  :         if (size < 0)

  00146	48 83 7c 24 38
	00		 cmp	 QWORD PTR size$[rsp], 0
  0014c	7d 09		 jge	 SHORT $LN3@stringio_r

; 330  :             size = 0;

  0014e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR size$[rsp], 0
$LN3@stringio_r:
$LN5@stringio_r:

; 331  :     }
; 332  : 
; 333  :     /* Optimization for seek(0); read() */
; 334  :     if (self->state == STATE_ACCUMULATING && self->pos == 0 && size == n) {

  00157	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0015c	83 b8 80 00 00
	00 02		 cmp	 DWORD PTR [rax+128], 2
  00163	75 40		 jne	 SHORT $LN2@stringio_r
  00165	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0016a	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0016f	75 34		 jne	 SHORT $LN2@stringio_r
  00171	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  00176	48 39 44 24 38	 cmp	 QWORD PTR size$[rsp], rax
  0017b	75 28		 jne	 SHORT $LN2@stringio_r

; 335  :         PyObject *result = make_intermediate(self);

  0017d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00182	e8 00 00 00 00	 call	 make_intermediate
  00187	48 89 44 24 40	 mov	 QWORD PTR result$20671[rsp], rax

; 336  :         self->pos = self->string_size;

  0018c	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00191	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00196	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0019a	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 337  :         return result;

  0019e	48 8b 44 24 40	 mov	 rax, QWORD PTR result$20671[rsp]
  001a3	eb 58		 jmp	 SHORT $LN14@stringio_r
$LN2@stringio_r:

; 338  :     }
; 339  : 
; 340  :     ENSURE_REALIZED(self);

  001a5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  001aa	e8 00 00 00 00	 call	 realize
  001af	85 c0		 test	 eax, eax
  001b1	7d 04		 jge	 SHORT $LN1@stringio_r
  001b3	33 c0		 xor	 eax, eax
  001b5	eb 46		 jmp	 SHORT $LN14@stringio_r
$LN1@stringio_r:

; 341  :     output = self->buf + self->pos;

  001b7	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001bc	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001c0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  001c5	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  001c9	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  001cd	48 89 44 24 30	 mov	 QWORD PTR output$[rsp], rax

; 342  :     self->pos += size;

  001d2	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001d7	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001db	48 03 44 24 38	 add	 rax, QWORD PTR size$[rsp]
  001e0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  001e5	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 343  :     return PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, output, size);

  001e9	4c 8b 44 24 38	 mov	 r8, QWORD PTR size$[rsp]
  001ee	48 8b 54 24 30	 mov	 rdx, QWORD PTR output$[rsp]
  001f3	b9 04 00 00 00	 mov	 ecx, 4
  001f8	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
$LN14@stringio_r:

; 344  : }

  001fd	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00201	c3		 ret	 0
stringio_read ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EC@IAMKNAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAn?$AAt?$AAe?$AAr?$AAm?$AAe?$AAd?$AAi?$AAa?$AAt?$AAe?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1DM@KPMCJOPH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAn?$AAt?$AAe?$AAr?$AAm?$AAe?$AAd?$AAi?$AAa?$AAt?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@HGOBMLHA@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAS?$AAT?$AAA?$AAT?$AAE?$AA_?$AAA?$AAC?$AAC?$AAU?$AAM?$AAU?$AAL?$AAA?$AAT?$AAI?$AAN@ ; `string'
PUBLIC	??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	PyUnicode_AsUCS4:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$realize DD imagerel realize
	DD	imagerel realize+343
	DD	imagerel $unwind$realize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$realize DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1EC@IAMKNAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAn?$AAt?$AAe?$AAr?$AAm?$AAe?$AAd?$AAi?$AAa?$AAt?$AAe?$AA?$CJ@
CONST	SEGMENT
??_C@_1EC@IAMKNAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAn?$AAt?$AAe?$AAr?$AAm?$AAe?$AAd?$AAi?$AAa?$AAt?$AAe?$AA?$CJ@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'm', 00H, 'e', 00H, 'd'
	DB	00H, 'i', 00H, 'a', 00H, 't', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@KPMCJOPH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAn?$AAt?$AAe?$AAr?$AAm?$AAe?$AAd?$AAi?$AAa?$AAt?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@KPMCJOPH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAn?$AAt?$AAe?$AAr?$AAm?$AAe?$AAd?$AAi?$AAa?$AAt?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'm', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@HGOBMLHA@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAS?$AAT?$AAA?$AAT?$AAE?$AA_?$AAA?$AAC?$AAC?$AAU?$AAM?$AAU?$AAL?$AAA?$AAT?$AAI?$AAN@
CONST	SEGMENT
??_C@_1EE@HGOBMLHA@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAS?$AAT?$AAA?$AAT?$AAE?$AA_?$AAA?$AAC?$AAC?$AAU?$AAM?$AAU?$AAL?$AAA?$AAT?$AAI?$AAN@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'S', 00H, 'T', 00H, 'A', 00H, 'T', 00H, 'E', 00H
	DB	'_', 00H, 'A', 00H, 'C', 00H, 'C', 00H, 'U', 00H, 'M', 00H, 'U'
	DB	00H, 'L', 00H, 'A', 00H, 'T', 00H, 'I', 00H, 'N', 00H, 'G', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, '_', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT realize
_TEXT	SEGMENT
len$ = 32
intermediate$ = 40
self$ = 64
realize	PROC						; COMDAT

; 141  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 142  :     Py_ssize_t len;
; 143  :     PyObject *intermediate;
; 144  : 
; 145  :     if (self->state == STATE_REALIZED)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 b8 80 00 00
	00 01		 cmp	 DWORD PTR [rax+128], 1
  00015	75 07		 jne	 SHORT $LN4@realize

; 146  :         return 0;

  00017	33 c0		 xor	 eax, eax
  00019	e9 34 01 00 00	 jmp	 $LN5@realize
$LN4@realize:

; 147  :     assert(self->state == STATE_ACCUMULATING);

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00023	83 b8 80 00 00
	00 02		 cmp	 DWORD PTR [rax+128], 2
  0002a	74 1c		 je	 SHORT $LN7@realize
  0002c	41 b8 93 00 00
	00		 mov	 r8d, 147		; 00000093H
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@HGOBMLHA@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAS?$AAT?$AAA?$AAT?$AAE?$AA_?$AAA?$AAC?$AAC?$AAU?$AAM?$AAU?$AAL?$AAA?$AAT?$AAI?$AAN@
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00046	33 c0		 xor	 eax, eax
$LN7@realize:

; 148  :     self->state = STATE_REALIZED;

  00048	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004d	c7 80 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+128], 1

; 149  : 
; 150  :     intermediate = _PyAccu_Finish(&self->accu);

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0005c	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 _PyAccu_Finish
  0006a	48 89 44 24 28	 mov	 QWORD PTR intermediate$[rsp], rax

; 151  :     if (intermediate == NULL)

  0006f	48 83 7c 24 28
	00		 cmp	 QWORD PTR intermediate$[rsp], 0
  00075	75 0a		 jne	 SHORT $LN3@realize

; 152  :         return -1;

  00077	b8 ff ff ff ff	 mov	 eax, -1
  0007c	e9 d1 00 00 00	 jmp	 $LN5@realize
$LN3@realize:

; 153  : 
; 154  :     /* Append the intermediate string to the internal buffer.
; 155  :        The length should be equal to the current cursor position.
; 156  :      */
; 157  :     len = PyUnicode_GET_LENGTH(intermediate);

  00081	48 8b 44 24 28	 mov	 rax, QWORD PTR intermediate$[rsp]
  00086	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00090	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00095	85 c0		 test	 eax, eax
  00097	75 1c		 jne	 SHORT $LN8@realize
  00099	41 b8 9d 00 00
	00		 mov	 r8d, 157		; 0000009dH
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@KPMCJOPH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAn?$AAt?$AAe?$AAr?$AAm?$AAe?$AAd?$AAi?$AAa?$AAt?$AAe?$AA?$CJ?$AA?$AA@
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b3	33 c0		 xor	 eax, eax
$LN8@realize:
  000b5	48 8b 44 24 28	 mov	 rax, QWORD PTR intermediate$[rsp]
  000ba	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000bd	c1 e8 07	 shr	 eax, 7
  000c0	83 e0 01	 and	 eax, 1
  000c3	85 c0		 test	 eax, eax
  000c5	75 1c		 jne	 SHORT $LN9@realize
  000c7	41 b8 9d 00 00
	00		 mov	 r8d, 157		; 0000009dH
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@IAMKNAA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAn?$AAt?$AAe?$AAr?$AAm?$AAe?$AAd?$AAi?$AAa?$AAt?$AAe?$AA?$CJ@
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e1	33 c0		 xor	 eax, eax
$LN9@realize:
  000e3	48 8b 44 24 28	 mov	 rax, QWORD PTR intermediate$[rsp]
  000e8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ec	48 89 44 24 20	 mov	 QWORD PTR len$[rsp], rax

; 158  :     if (resize_buffer(self, len) < 0) {

  000f1	48 8b 54 24 20	 mov	 rdx, QWORD PTR len$[rsp]
  000f6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000fb	e8 00 00 00 00	 call	 resize_buffer
  00100	85 c0		 test	 eax, eax
  00102	7d 11		 jge	 SHORT $LN2@realize

; 159  :         Py_DECREF(intermediate);

  00104	48 8b 4c 24 28	 mov	 rcx, QWORD PTR intermediate$[rsp]
  00109	e8 00 00 00 00	 call	 _Py_DecRef

; 160  :         return -1;

  0010e	b8 ff ff ff ff	 mov	 eax, -1
  00113	eb 3d		 jmp	 SHORT $LN5@realize
$LN2@realize:

; 161  :     }
; 162  :     if (!PyUnicode_AsUCS4(intermediate, self->buf, len, 0)) {

  00115	45 33 c9	 xor	 r9d, r9d
  00118	4c 8b 44 24 20	 mov	 r8, QWORD PTR len$[rsp]
  0011d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00122	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00126	48 8b 4c 24 28	 mov	 rcx, QWORD PTR intermediate$[rsp]
  0012b	e8 00 00 00 00	 call	 PyUnicode_AsUCS4
  00130	48 85 c0	 test	 rax, rax
  00133	75 11		 jne	 SHORT $LN1@realize

; 163  :         Py_DECREF(intermediate);

  00135	48 8b 4c 24 28	 mov	 rcx, QWORD PTR intermediate$[rsp]
  0013a	e8 00 00 00 00	 call	 _Py_DecRef

; 164  :         return -1;

  0013f	b8 ff ff ff ff	 mov	 eax, -1
  00144	eb 0c		 jmp	 SHORT $LN5@realize
$LN1@realize:

; 165  :     }
; 166  : 
; 167  :     Py_DECREF(intermediate);

  00146	48 8b 4c 24 28	 mov	 rcx, QWORD PTR intermediate$[rsp]
  0014b	e8 00 00 00 00	 call	 _Py_DecRef

; 168  :     return 0;

  00150	33 c0		 xor	 eax, eax
$LN5@realize:

; 169  : }

  00152	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00156	c3		 ret	 0
realize	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@PGPOMJCD@new?5buffer?5size?5too?5large?$AA@ ; `string'
PUBLIC	__real@3ff2000000000000
PUBLIC	__real@43f0000000000000
PUBLIC	??_C@_1CE@FBILHFFC@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Realloc:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$resize_buffer DD imagerel resize_buffer
	DD	imagerel resize_buffer+449
	DD	imagerel $unwind$resize_buffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$resize_buffer DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BK@PGPOMJCD@new?5buffer?5size?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BK@PGPOMJCD@new?5buffer?5size?5too?5large?$AA@ DB 'new buffer size'
	DB	' too large', 00H				; `string'
CONST	ENDS
;	COMDAT __real@3ff2000000000000
CONST	SEGMENT
__real@3ff2000000000000 DQ 03ff2000000000000r	; 1.125
CONST	ENDS
;	COMDAT __real@43f0000000000000
CONST	SEGMENT
__real@43f0000000000000 DQ 043f0000000000000r	; 1.84467e+019
CONST	ENDS
;	COMDAT ??_C@_1CE@FBILHFFC@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@FBILHFFC@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'b', 00H
	DB	'u', 00H, 'f', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT resize_buffer
_TEXT	SEGMENT
new_buf$ = 32
alloc$ = 40
tv84 = 48
self$ = 80
size$ = 88
resize_buffer PROC					; COMDAT

; 73   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 74   :     /* Here, unsigned types are used to avoid dealing with signed integer
; 75   :        overflow, which is undefined in C. */
; 76   :     size_t alloc = self->buf_size;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00017	48 89 44 24 28	 mov	 QWORD PTR alloc$[rsp], rax

; 77   :     Py_UCS4 *new_buf = NULL;

  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR new_buf$[rsp], 0

; 78   : 
; 79   :     assert(self->buf != NULL);

  00025	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0002a	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0002f	75 1c		 jne	 SHORT $LN12@resize_buf
  00031	41 b8 4f 00 00
	00		 mov	 r8d, 79			; 0000004fH
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@FBILHFFC@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004b	33 c0		 xor	 eax, eax
$LN12@resize_buf:

; 80   : 
; 81   :     /* Reserve one more char for line ending detection. */
; 82   :     size = size + 1;

  0004d	48 8b 44 24 58	 mov	 rax, QWORD PTR size$[rsp]
  00052	48 ff c0	 inc	 rax
  00055	48 89 44 24 58	 mov	 QWORD PTR size$[rsp], rax

; 83   :     /* For simplicity, stay in the range of the signed type. Anyway, Python
; 84   :        doesn't allow strings to be longer than this. */
; 85   :     if (size > PY_SSIZE_T_MAX)

  0005a	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00064	48 39 44 24 58	 cmp	 QWORD PTR size$[rsp], rax
  00069	76 05		 jbe	 SHORT $LN9@resize_buf

; 86   :         goto overflow;

  0006b	e9 34 01 00 00	 jmp	 $overflow$20509
$LN9@resize_buf:

; 87   : 
; 88   :     if (size < alloc / 2) {

  00070	33 d2		 xor	 edx, edx
  00072	48 8b 44 24 28	 mov	 rax, QWORD PTR alloc$[rsp]
  00077	b9 02 00 00 00	 mov	 ecx, 2
  0007c	48 f7 f1	 div	 rcx
  0007f	48 39 44 24 58	 cmp	 QWORD PTR size$[rsp], rax
  00084	73 12		 jae	 SHORT $LN8@resize_buf

; 89   :         /* Major downsize; resize down to exact size. */
; 90   :         alloc = size + 1;

  00086	48 8b 44 24 58	 mov	 rax, QWORD PTR size$[rsp]
  0008b	48 ff c0	 inc	 rax
  0008e	48 89 44 24 28	 mov	 QWORD PTR alloc$[rsp], rax
  00093	e9 a6 00 00 00	 jmp	 $LN7@resize_buf
$LN8@resize_buf:

; 91   :     }
; 92   :     else if (size < alloc) {

  00098	48 8b 44 24 28	 mov	 rax, QWORD PTR alloc$[rsp]
  0009d	48 39 44 24 58	 cmp	 QWORD PTR size$[rsp], rax
  000a2	73 0c		 jae	 SHORT $LN6@resize_buf

; 93   :         /* Within allocated size; quick exit */
; 94   :         return 0;

  000a4	33 c0		 xor	 eax, eax
  000a6	e9 11 01 00 00	 jmp	 $LN10@resize_buf
  000ab	e9 8e 00 00 00	 jmp	 $LN5@resize_buf
$LN6@resize_buf:

; 95   :     }
; 96   :     else if (size <= alloc * 1.125) {

  000b0	48 8b 44 24 58	 mov	 rax, QWORD PTR size$[rsp]
  000b5	66 0f ef c0	 pxor	 xmm0, xmm0
  000b9	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  000be	48 85 c0	 test	 rax, rax
  000c1	7d 08		 jge	 SHORT $LN16@resize_buf
  000c3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@43f0000000000000
$LN16@resize_buf:
  000cb	48 8b 44 24 28	 mov	 rax, QWORD PTR alloc$[rsp]
  000d0	66 0f ef c9	 pxor	 xmm1, xmm1
  000d4	f2 48 0f 2a c8	 cvtsi2sd xmm1, rax
  000d9	48 85 c0	 test	 rax, rax
  000dc	7d 08		 jge	 SHORT $LN15@resize_buf
  000de	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@43f0000000000000
$LN15@resize_buf:
  000e6	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff2000000000000
  000ee	66 0f 2f c8	 comisd	 xmm1, xmm0
  000f2	72 3d		 jb	 SHORT $LN4@resize_buf

; 97   :         /* Moderate upsize; overallocate similar to list_resize() */
; 98   :         alloc = size + (size >> 3) + (size < 9 ? 3 : 6);

  000f4	48 83 7c 24 58
	09		 cmp	 QWORD PTR size$[rsp], 9
  000fa	73 0a		 jae	 SHORT $LN13@resize_buf
  000fc	c7 44 24 30 03
	00 00 00	 mov	 DWORD PTR tv84[rsp], 3
  00104	eb 08		 jmp	 SHORT $LN14@resize_buf
$LN13@resize_buf:
  00106	c7 44 24 30 06
	00 00 00	 mov	 DWORD PTR tv84[rsp], 6
$LN14@resize_buf:
  0010e	48 8b 44 24 58	 mov	 rax, QWORD PTR size$[rsp]
  00113	48 c1 e8 03	 shr	 rax, 3
  00117	48 8b 4c 24 58	 mov	 rcx, QWORD PTR size$[rsp]
  0011c	48 03 c8	 add	 rcx, rax
  0011f	48 8b c1	 mov	 rax, rcx
  00122	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR tv84[rsp]
  00127	48 03 c1	 add	 rax, rcx
  0012a	48 89 44 24 28	 mov	 QWORD PTR alloc$[rsp], rax

; 99   :     }
; 100  :     else {

  0012f	eb 0d		 jmp	 SHORT $LN3@resize_buf
$LN4@resize_buf:

; 101  :         /* Major upsize; resize up to exact size */
; 102  :         alloc = size + 1;

  00131	48 8b 44 24 58	 mov	 rax, QWORD PTR size$[rsp]
  00136	48 ff c0	 inc	 rax
  00139	48 89 44 24 28	 mov	 QWORD PTR alloc$[rsp], rax
$LN3@resize_buf:
$LN5@resize_buf:
$LN7@resize_buf:

; 103  :     }
; 104  : 
; 105  :     if (alloc > PY_SIZE_MAX / sizeof(Py_UCS4))

  0013e	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH
  00148	48 39 44 24 28	 cmp	 QWORD PTR alloc$[rsp], rax
  0014d	76 02		 jbe	 SHORT $LN2@resize_buf

; 106  :         goto overflow;

  0014f	eb 53		 jmp	 SHORT $overflow$20509
$LN2@resize_buf:

; 107  :     new_buf = (Py_UCS4 *)PyMem_Realloc(self->buf, alloc * sizeof(Py_UCS4));

  00151	48 8b 44 24 28	 mov	 rax, QWORD PTR alloc$[rsp]
  00156	48 c1 e0 02	 shl	 rax, 2
  0015a	48 8b d0	 mov	 rdx, rax
  0015d	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00162	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00166	e8 00 00 00 00	 call	 PyMem_Realloc
  0016b	48 89 44 24 20	 mov	 QWORD PTR new_buf$[rsp], rax

; 108  :     if (new_buf == NULL) {

  00170	48 83 7c 24 20
	00		 cmp	 QWORD PTR new_buf$[rsp], 0
  00176	75 0c		 jne	 SHORT $LN1@resize_buf

; 109  :         PyErr_NoMemory();

  00178	e8 00 00 00 00	 call	 PyErr_NoMemory

; 110  :         return -1;

  0017d	b8 ff ff ff ff	 mov	 eax, -1
  00182	eb 38		 jmp	 SHORT $LN10@resize_buf
$LN1@resize_buf:

; 111  :     }
; 112  :     self->buf_size = alloc;

  00184	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00189	48 8b 4c 24 28	 mov	 rcx, QWORD PTR alloc$[rsp]
  0018e	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 113  :     self->buf = new_buf;

  00192	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00197	48 8b 4c 24 20	 mov	 rcx, QWORD PTR new_buf$[rsp]
  0019c	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 114  : 
; 115  :     return 0;

  001a0	33 c0		 xor	 eax, eax
  001a2	eb 18		 jmp	 SHORT $LN10@resize_buf
$overflow$20509:

; 116  : 
; 117  :   overflow:
; 118  :     PyErr_SetString(PyExc_OverflowError,
; 119  :                     "new buffer size too large");

  001a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PGPOMJCD@new?5buffer?5size?5too?5large?$AA@
  001ab	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  001b2	e8 00 00 00 00	 call	 PyErr_SetString

; 120  :     return -1;

  001b7	b8 ff ff ff ff	 mov	 eax, -1
$LN10@resize_buf:

; 121  : }

  001bc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001c0	c3		 ret	 0
resize_buffer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@CHNOBOKB@?$HMO?3readline?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_readline DD imagerel stringio_readline
	DD	imagerel stringio_readline+300
	DD	imagerel $unwind$stringio_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_readline DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0M@CHNOBOKB@?$HMO?3readline?$AA@
CONST	SEGMENT
??_C@_0M@CHNOBOKB@?$HMO?3readline?$AA@ DB '|O:readline', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_readline
_TEXT	SEGMENT
arg$ = 32
limit$ = 40
self$ = 64
args$ = 72
stringio_readline PROC					; COMDAT

; 383  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 384  :     PyObject *arg = Py_None;

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 89 44 24 20	 mov	 QWORD PTR arg$[rsp], rax

; 385  :     Py_ssize_t limit = -1;

  0001a	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR limit$[rsp], -1

; 386  : 
; 387  :     CHECK_INITIALIZED(self);

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00028	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  0002f	85 c0		 test	 eax, eax
  00031	7f 1a		 jg	 SHORT $LN8@stringio_r@2
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0003a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00041	e8 00 00 00 00	 call	 PyErr_SetString
  00046	33 c0		 xor	 eax, eax
  00048	e9 da 00 00 00	 jmp	 $LN9@stringio_r@2
$LN8@stringio_r@2:

; 388  :     if (!PyArg_ParseTuple(args, "|O:readline", &arg))

  0004d	4c 8d 44 24 20	 lea	 r8, QWORD PTR arg$[rsp]
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@CHNOBOKB@?$HMO?3readline?$AA@
  00059	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0005e	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00063	85 c0		 test	 eax, eax
  00065	75 07		 jne	 SHORT $LN7@stringio_r@2

; 389  :         return NULL;

  00067	33 c0		 xor	 eax, eax
  00069	e9 b9 00 00 00	 jmp	 $LN9@stringio_r@2
$LN7@stringio_r@2:

; 390  :     CHECK_CLOSED(self);

  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00073	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  0007a	85 c0		 test	 eax, eax
  0007c	74 1a		 je	 SHORT $LN6@stringio_r@2
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  00085	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0008c	e8 00 00 00 00	 call	 PyErr_SetString
  00091	33 c0		 xor	 eax, eax
  00093	e9 8f 00 00 00	 jmp	 $LN9@stringio_r@2
$LN6@stringio_r@2:

; 391  :     ENSURE_REALIZED(self);

  00098	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0009d	e8 00 00 00 00	 call	 realize
  000a2	85 c0		 test	 eax, eax
  000a4	7d 04		 jge	 SHORT $LN5@stringio_r@2
  000a6	33 c0		 xor	 eax, eax
  000a8	eb 7d		 jmp	 SHORT $LN9@stringio_r@2
$LN5@stringio_r@2:

; 392  : 
; 393  :     if (PyNumber_Check(arg)) {

  000aa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arg$[rsp]
  000af	e8 00 00 00 00	 call	 PyNumber_Check
  000b4	85 c0		 test	 eax, eax
  000b6	74 2e		 je	 SHORT $LN4@stringio_r@2

; 394  :         limit = PyNumber_AsSsize_t(arg, PyExc_OverflowError);

  000b8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  000bf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arg$[rsp]
  000c4	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  000c9	48 89 44 24 28	 mov	 QWORD PTR limit$[rsp], rax

; 395  :         if (limit == -1 && PyErr_Occurred())

  000ce	48 83 7c 24 28
	ff		 cmp	 QWORD PTR limit$[rsp], -1
  000d4	75 0e		 jne	 SHORT $LN3@stringio_r@2
  000d6	e8 00 00 00 00	 call	 PyErr_Occurred
  000db	48 85 c0	 test	 rax, rax
  000de	74 04		 je	 SHORT $LN3@stringio_r@2

; 396  :             return NULL;

  000e0	33 c0		 xor	 eax, eax
  000e2	eb 43		 jmp	 SHORT $LN9@stringio_r@2
$LN3@stringio_r@2:

; 397  :     }
; 398  :     else if (arg != Py_None) {

  000e4	eb 32		 jmp	 SHORT $LN2@stringio_r@2
$LN4@stringio_r@2:
  000e6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000ed	48 39 44 24 20	 cmp	 QWORD PTR arg$[rsp], rax
  000f2	74 24		 je	 SHORT $LN1@stringio_r@2

; 399  :         PyErr_Format(PyExc_TypeError, "integer argument expected, got '%s'",
; 400  :                      Py_TYPE(arg)->tp_name);

  000f4	48 8b 44 24 20	 mov	 rax, QWORD PTR arg$[rsp]
  000f9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000fd	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00101	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@
  00108	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0010f	e8 00 00 00 00	 call	 PyErr_Format

; 401  :         return NULL;

  00114	33 c0		 xor	 eax, eax
  00116	eb 0f		 jmp	 SHORT $LN9@stringio_r@2
$LN1@stringio_r@2:
$LN2@stringio_r@2:

; 402  :     }
; 403  :     return _stringio_readline(self, limit);

  00118	48 8b 54 24 28	 mov	 rdx, QWORD PTR limit$[rsp]
  0011d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00122	e8 00 00 00 00	 call	 _stringio_readline
$LN9@stringio_r@2:

; 404  : }

  00127	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0012b	c3		 ret	 0
stringio_readline ENDP
_TEXT	ENDS
EXTRN	_PyIO_find_line_ending:PROC
EXTRN	PyUnicode_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_stringio_readline DD imagerel _stringio_readline
	DD	imagerel _stringio_readline+393
	DD	imagerel $unwind$_stringio_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_stringio_readline DD 010e01H
	DD	0e20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _stringio_readline
_TEXT	SEGMENT
old_char$ = 64
len$ = 72
end$ = 80
start$ = 88
consumed$ = 96
self$ = 128
limit$ = 136
_stringio_readline PROC					; COMDAT

; 349  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 350  :     Py_UCS4 *start, *end, old_char;
; 351  :     Py_ssize_t len, consumed;
; 352  : 
; 353  :     /* In case of overseek, return the empty string */
; 354  :     if (self->pos >= self->string_size)

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00016	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0001e	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00022	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  00026	7c 0e		 jl	 SHORT $LN4@stringio_r@3

; 355  :         return PyUnicode_New(0, 0);

  00028	33 d2		 xor	 edx, edx
  0002a	33 c9		 xor	 ecx, ecx
  0002c	e8 00 00 00 00	 call	 PyUnicode_New
  00031	e9 4e 01 00 00	 jmp	 $LN5@stringio_r@3
$LN4@stringio_r@3:

; 356  : 
; 357  :     start = self->buf + self->pos;

  00036	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0003e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00042	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0004a	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0004e	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00052	48 89 44 24 58	 mov	 QWORD PTR start$[rsp], rax

; 358  :     if (limit < 0 || limit > self->string_size - self->pos)

  00057	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR limit$[rsp], 0
  00060	7c 25		 jl	 SHORT $LN2@stringio_r@3
  00062	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0006a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00072	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00076	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0007a	48 2b c1	 sub	 rax, rcx
  0007d	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR limit$[rsp], rax
  00085	7e 23		 jle	 SHORT $LN3@stringio_r@3
$LN2@stringio_r@3:

; 359  :         limit = self->string_size - self->pos;

  00087	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0008f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00097	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0009b	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0009f	48 2b c1	 sub	 rax, rcx
  000a2	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR limit$[rsp], rax
$LN3@stringio_r@3:

; 360  : 
; 361  :     end = start + limit;

  000aa	48 8b 44 24 58	 mov	 rax, QWORD PTR start$[rsp]
  000af	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR limit$[rsp]
  000b7	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  000bb	48 89 44 24 50	 mov	 QWORD PTR end$[rsp], rax

; 362  :     old_char = *end;

  000c0	48 8b 44 24 50	 mov	 rax, QWORD PTR end$[rsp]
  000c5	8b 00		 mov	 eax, DWORD PTR [rax]
  000c7	89 44 24 40	 mov	 DWORD PTR old_char$[rsp], eax

; 363  :     *end = '\0';

  000cb	48 8b 44 24 50	 mov	 rax, QWORD PTR end$[rsp]
  000d0	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 364  :     len = _PyIO_find_line_ending(
; 365  :         self->readtranslate, self->readuniversal, self->readnl,
; 366  :         PyUnicode_4BYTE_KIND, (char*)start, (char*)end, &consumed);

  000d6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000de	0f be 80 9a 00
	00 00		 movsx	 eax, BYTE PTR [rax+154]
  000e5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000ed	0f be 89 9b 00
	00 00		 movsx	 ecx, BYTE PTR [rcx+155]
  000f4	48 8d 54 24 60	 lea	 rdx, QWORD PTR consumed$[rsp]
  000f9	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  000fe	48 8b 54 24 50	 mov	 rdx, QWORD PTR end$[rsp]
  00103	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00108	48 8b 54 24 58	 mov	 rdx, QWORD PTR start$[rsp]
  0010d	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00112	41 b9 04 00 00
	00		 mov	 r9d, 4
  00118	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  00120	4c 8b 82 a8 00
	00 00		 mov	 r8, QWORD PTR [rdx+168]
  00127	8b d0		 mov	 edx, eax
  00129	e8 00 00 00 00	 call	 _PyIO_find_line_ending
  0012e	48 89 44 24 48	 mov	 QWORD PTR len$[rsp], rax

; 367  :     *end = old_char;

  00133	48 8b 44 24 50	 mov	 rax, QWORD PTR end$[rsp]
  00138	8b 4c 24 40	 mov	 ecx, DWORD PTR old_char$[rsp]
  0013c	89 08		 mov	 DWORD PTR [rax], ecx

; 368  :     /* If we haven't found any line ending, we just return everything
; 369  :        (`consumed` is ignored). */
; 370  :     if (len < 0)

  0013e	48 83 7c 24 48
	00		 cmp	 QWORD PTR len$[rsp], 0
  00144	7d 0d		 jge	 SHORT $LN1@stringio_r@3

; 371  :         len = limit;

  00146	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR limit$[rsp]
  0014e	48 89 44 24 48	 mov	 QWORD PTR len$[rsp], rax
$LN1@stringio_r@3:

; 372  :     self->pos += len;

  00153	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0015b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0015f	48 03 44 24 48	 add	 rax, QWORD PTR len$[rsp]
  00164	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0016c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 373  :     return PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, start, len);

  00170	4c 8b 44 24 48	 mov	 r8, QWORD PTR len$[rsp]
  00175	48 8b 54 24 58	 mov	 rdx, QWORD PTR start$[rsp]
  0017a	b9 04 00 00 00	 mov	 ecx, 4
  0017f	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
$LN5@stringio_r@3:

; 374  : }

  00184	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00188	c3		 ret	 0
_stringio_readline ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@ ; `string'
EXTRN	PyExc_IOError:QWORD
EXTRN	PyObject_CallMethodObjArgs:PROC
EXTRN	_PyIO_str_readline:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_iternext DD imagerel stringio_iternext
	DD	imagerel stringio_iternext+411
	DD	imagerel $unwind$stringio_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_iternext DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@
CONST	SEGMENT
??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@ DB 'readli'
	DB	'ne() should have returned an str object, not ''%.200s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_iternext
_TEXT	SEGMENT
line$ = 32
self$ = 64
stringio_iternext PROC					; COMDAT

; 408  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 409  :     PyObject *line;
; 410  : 
; 411  :     CHECK_INITIALIZED(self);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  00015	85 c0		 test	 eax, eax
  00017	7f 1a		 jg	 SHORT $LN8@stringio_i
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00020	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00027	e8 00 00 00 00	 call	 PyErr_SetString
  0002c	33 c0		 xor	 eax, eax
  0002e	e9 63 01 00 00	 jmp	 $LN9@stringio_i
$LN8@stringio_i:

; 412  :     CHECK_CLOSED(self);

  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00038	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  0003f	85 c0		 test	 eax, eax
  00041	74 1a		 je	 SHORT $LN7@stringio_i
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00051	e8 00 00 00 00	 call	 PyErr_SetString
  00056	33 c0		 xor	 eax, eax
  00058	e9 39 01 00 00	 jmp	 $LN9@stringio_i
$LN7@stringio_i:

; 413  :     ENSURE_REALIZED(self);

  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00062	e8 00 00 00 00	 call	 realize
  00067	85 c0		 test	 eax, eax
  00069	7d 07		 jge	 SHORT $LN6@stringio_i
  0006b	33 c0		 xor	 eax, eax
  0006d	e9 24 01 00 00	 jmp	 $LN9@stringio_i
$LN6@stringio_i:

; 414  : 
; 415  :     if (Py_TYPE(self) == &PyStringIO_Type) {

  00072	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyStringIO_Type
  00079	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0007e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00082	75 18		 jne	 SHORT $LN5@stringio_i

; 416  :         /* Skip method call overhead for speed */
; 417  :         line = _stringio_readline(self, -1);

  00084	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00090	e8 00 00 00 00	 call	 _stringio_readline
  00095	48 89 44 24 20	 mov	 QWORD PTR line$[rsp], rax

; 418  :     }
; 419  :     else {

  0009a	eb 6a		 jmp	 SHORT $LN4@stringio_i
$LN5@stringio_i:

; 420  :         /* XXX is subclassing StringIO really supported? */
; 421  :         line = PyObject_CallMethodObjArgs((PyObject *)self,
; 422  :                                            _PyIO_str_readline, NULL);

  0009c	45 33 c0	 xor	 r8d, r8d
  0009f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readline
  000a6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000ab	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  000b0	48 89 44 24 20	 mov	 QWORD PTR line$[rsp], rax

; 423  :         if (line && !PyUnicode_Check(line)) {

  000b5	48 83 7c 24 20
	00		 cmp	 QWORD PTR line$[rsp], 0
  000bb	74 49		 je	 SHORT $LN3@stringio_i
  000bd	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
  000c2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000cc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000d1	85 c0		 test	 eax, eax
  000d3	75 31		 jne	 SHORT $LN3@stringio_i

; 424  :             PyErr_Format(PyExc_IOError,
; 425  :                          "readline() should have returned an str object, "
; 426  :                          "not '%.200s'", Py_TYPE(line)->tp_name);

  000d5	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
  000da	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000de	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@KEHPMFAP@readline?$CI?$CJ?5should?5have?5returned?5@
  000e9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000f0	e8 00 00 00 00	 call	 PyErr_Format

; 427  :             Py_DECREF(line);

  000f5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR line$[rsp]
  000fa	e8 00 00 00 00	 call	 _Py_DecRef

; 428  :             return NULL;

  000ff	33 c0		 xor	 eax, eax
  00101	e9 90 00 00 00	 jmp	 $LN9@stringio_i
$LN3@stringio_i:
$LN4@stringio_i:

; 429  :         }
; 430  :     }
; 431  : 
; 432  :     if (line == NULL)

  00106	48 83 7c 24 20
	00		 cmp	 QWORD PTR line$[rsp], 0
  0010c	75 07		 jne	 SHORT $LN2@stringio_i

; 433  :         return NULL;

  0010e	33 c0		 xor	 eax, eax
  00110	e9 81 00 00 00	 jmp	 $LN9@stringio_i
$LN2@stringio_i:

; 434  : 
; 435  :     if (PyUnicode_GET_LENGTH(line) == 0) {

  00115	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
  0011a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0011e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00124	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00129	85 c0		 test	 eax, eax
  0012b	75 1c		 jne	 SHORT $LN11@stringio_i
  0012d	41 b8 b3 01 00
	00		 mov	 r8d, 435		; 000001b3H
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KMONDKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00147	33 c0		 xor	 eax, eax
$LN11@stringio_i:
  00149	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
  0014e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00151	c1 e8 07	 shr	 eax, 7
  00154	83 e0 01	 and	 eax, 1
  00157	85 c0		 test	 eax, eax
  00159	75 1c		 jne	 SHORT $LN12@stringio_i
  0015b	41 b8 b3 01 00
	00		 mov	 r8d, 435		; 000001b3H
  00161	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@GDIMFDDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  0016f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00175	33 c0		 xor	 eax, eax
$LN12@stringio_i:
  00177	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
  0017c	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00181	75 0e		 jne	 SHORT $LN1@stringio_i

; 436  :         /* Reached EOF */
; 437  :         Py_DECREF(line);

  00183	48 8b 4c 24 20	 mov	 rcx, QWORD PTR line$[rsp]
  00188	e8 00 00 00 00	 call	 _Py_DecRef

; 438  :         return NULL;

  0018d	33 c0		 xor	 eax, eax
  0018f	eb 05		 jmp	 SHORT $LN9@stringio_i
$LN1@stringio_i:

; 439  :     }
; 440  : 
; 441  :     return line;

  00191	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
$LN9@stringio_i:

; 442  : }

  00196	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0019a	c3		 ret	 0
stringio_iternext ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@GAHNANHP@Negative?5size?5value?5?$CFzd?$AA@ ; `string'
PUBLIC	??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_truncate DD imagerel stringio_truncate
	DD	imagerel stringio_truncate+394
	DD	imagerel $unwind$stringio_truncate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_truncate DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BI@GAHNANHP@Negative?5size?5value?5?$CFzd?$AA@
CONST	SEGMENT
??_C@_0BI@GAHNANHP@Negative?5size?5value?5?$CFzd?$AA@ DB 'Negative size v'
	DB	'alue %zd', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@
CONST	SEGMENT
??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@ DB '|O:truncate', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_truncate
_TEXT	SEGMENT
arg$ = 32
size$ = 40
self$ = 64
args$ = 72
stringio_truncate PROC					; COMDAT

; 453  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 454  :     Py_ssize_t size;
; 455  :     PyObject *arg = Py_None;

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 89 44 24 20	 mov	 QWORD PTR arg$[rsp], rax

; 456  : 
; 457  :     CHECK_INITIALIZED(self);

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001f	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  00026	85 c0		 test	 eax, eax
  00028	7f 1a		 jg	 SHORT $LN12@stringio_t@2
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00031	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00038	e8 00 00 00 00	 call	 PyErr_SetString
  0003d	33 c0		 xor	 eax, eax
  0003f	e9 41 01 00 00	 jmp	 $LN13@stringio_t@2
$LN12@stringio_t@2:

; 458  :     if (!PyArg_ParseTuple(args, "|O:truncate", &arg))

  00044	4c 8d 44 24 20	 lea	 r8, QWORD PTR arg$[rsp]
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@
  00050	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00055	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0005a	85 c0		 test	 eax, eax
  0005c	75 07		 jne	 SHORT $LN11@stringio_t@2

; 459  :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	e9 20 01 00 00	 jmp	 $LN13@stringio_t@2
$LN11@stringio_t@2:

; 460  :     CHECK_CLOSED(self);

  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0006a	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  00071	85 c0		 test	 eax, eax
  00073	74 1a		 je	 SHORT $LN10@stringio_t@2
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0007c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00083	e8 00 00 00 00	 call	 PyErr_SetString
  00088	33 c0		 xor	 eax, eax
  0008a	e9 f6 00 00 00	 jmp	 $LN13@stringio_t@2
$LN10@stringio_t@2:

; 461  : 
; 462  :     if (PyNumber_Check(arg)) {

  0008f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arg$[rsp]
  00094	e8 00 00 00 00	 call	 PyNumber_Check
  00099	85 c0		 test	 eax, eax
  0009b	74 31		 je	 SHORT $LN9@stringio_t@2

; 463  :         size = PyNumber_AsSsize_t(arg, PyExc_OverflowError);

  0009d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  000a4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arg$[rsp]
  000a9	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  000ae	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax

; 464  :         if (size == -1 && PyErr_Occurred())

  000b3	48 83 7c 24 28
	ff		 cmp	 QWORD PTR size$[rsp], -1
  000b9	75 11		 jne	 SHORT $LN8@stringio_t@2
  000bb	e8 00 00 00 00	 call	 PyErr_Occurred
  000c0	48 85 c0	 test	 rax, rax
  000c3	74 07		 je	 SHORT $LN8@stringio_t@2

; 465  :             return NULL;

  000c5	33 c0		 xor	 eax, eax
  000c7	e9 b9 00 00 00	 jmp	 $LN13@stringio_t@2
$LN8@stringio_t@2:

; 466  :     }
; 467  :     else if (arg == Py_None) {

  000cc	eb 42		 jmp	 SHORT $LN7@stringio_t@2
$LN9@stringio_t@2:
  000ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000d5	48 39 44 24 20	 cmp	 QWORD PTR arg$[rsp], rax
  000da	75 10		 jne	 SHORT $LN6@stringio_t@2

; 468  :         /* Truncate to current position if no argument is passed. */
; 469  :         size = self->pos;

  000dc	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000e1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000e5	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax

; 470  :     }
; 471  :     else {

  000ea	eb 24		 jmp	 SHORT $LN5@stringio_t@2
$LN6@stringio_t@2:

; 472  :         PyErr_Format(PyExc_TypeError, "integer argument expected, got '%s'",
; 473  :                      Py_TYPE(arg)->tp_name);

  000ec	48 8b 44 24 20	 mov	 rax, QWORD PTR arg$[rsp]
  000f1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f5	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@MLFMOEKB@integer?5argument?5expected?0?5got?5?8@
  00100	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00107	e8 00 00 00 00	 call	 PyErr_Format

; 474  :         return NULL;

  0010c	33 c0		 xor	 eax, eax
  0010e	eb 75		 jmp	 SHORT $LN13@stringio_t@2
$LN5@stringio_t@2:
$LN7@stringio_t@2:

; 475  :     }
; 476  : 
; 477  :     if (size < 0) {

  00110	48 83 7c 24 28
	00		 cmp	 QWORD PTR size$[rsp], 0
  00116	7d 1c		 jge	 SHORT $LN4@stringio_t@2

; 478  :         PyErr_Format(PyExc_ValueError,
; 479  :                      "Negative size value %zd", size);

  00118	4c 8b 44 24 28	 mov	 r8, QWORD PTR size$[rsp]
  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GAHNANHP@Negative?5size?5value?5?$CFzd?$AA@
  00124	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0012b	e8 00 00 00 00	 call	 PyErr_Format

; 480  :         return NULL;

  00130	33 c0		 xor	 eax, eax
  00132	eb 51		 jmp	 SHORT $LN13@stringio_t@2
$LN4@stringio_t@2:

; 481  :     }
; 482  : 
; 483  :     if (size < self->string_size) {

  00134	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00139	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0013d	48 39 44 24 28	 cmp	 QWORD PTR size$[rsp], rax
  00142	7d 37		 jge	 SHORT $LN3@stringio_t@2

; 484  :         ENSURE_REALIZED(self);

  00144	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00149	e8 00 00 00 00	 call	 realize
  0014e	85 c0		 test	 eax, eax
  00150	7d 04		 jge	 SHORT $LN2@stringio_t@2
  00152	33 c0		 xor	 eax, eax
  00154	eb 2f		 jmp	 SHORT $LN13@stringio_t@2
$LN2@stringio_t@2:

; 485  :         if (resize_buffer(self, size) < 0)

  00156	48 8b 54 24 28	 mov	 rdx, QWORD PTR size$[rsp]
  0015b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00160	e8 00 00 00 00	 call	 resize_buffer
  00165	85 c0		 test	 eax, eax
  00167	7d 04		 jge	 SHORT $LN1@stringio_t@2

; 486  :             return NULL;

  00169	33 c0		 xor	 eax, eax
  0016b	eb 18		 jmp	 SHORT $LN13@stringio_t@2
$LN1@stringio_t@2:

; 487  :         self->string_size = size;

  0016d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00172	48 8b 4c 24 28	 mov	 rcx, QWORD PTR size$[rsp]
  00177	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx
$LN3@stringio_t@2:

; 488  :     }
; 489  : 
; 490  :     return PyLong_FromSsize_t(size);

  0017b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR size$[rsp]
  00180	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN13@stringio_t@2:

; 491  : }

  00185	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00189	c3		 ret	 0
stringio_truncate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@EGPJNCAG@Can?8t?5do?5nonzero?5cur?9relative?5se@ ; `string'
PUBLIC	??_C@_0BL@KGECPAH@Negative?5seek?5position?5?$CFzd?$AA@ ; `string'
PUBLIC	??_C@_0CJ@IGFEKKBJ@Invalid?5whence?5?$CI?$CFi?0?5should?5be?50?0@ ; `string'
PUBLIC	??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_seek DD imagerel stringio_seek
	DD	imagerel stringio_seek+358
	DD	imagerel $unwind$stringio_seek
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_seek DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CE@EGPJNCAG@Can?8t?5do?5nonzero?5cur?9relative?5se@
CONST	SEGMENT
??_C@_0CE@EGPJNCAG@Can?8t?5do?5nonzero?5cur?9relative?5se@ DB 'Can''t do '
	DB	'nonzero cur-relative seeks', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KGECPAH@Negative?5seek?5position?5?$CFzd?$AA@
CONST	SEGMENT
??_C@_0BL@KGECPAH@Negative?5seek?5position?5?$CFzd?$AA@ DB 'Negative seek'
	DB	' position %zd', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IGFEKKBJ@Invalid?5whence?5?$CI?$CFi?0?5should?5be?50?0@
CONST	SEGMENT
??_C@_0CJ@IGFEKKBJ@Invalid?5whence?5?$CI?$CFi?0?5should?5be?50?0@ DB 'Inv'
	DB	'alid whence (%i, should be 0, 1 or 2)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@
CONST	SEGMENT
??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@ DB 'n|i:seek', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_seek
_TEXT	SEGMENT
mode$ = 32
pos$ = 40
self$ = 64
args$ = 72
stringio_seek PROC					; COMDAT

; 504  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 505  :     Py_ssize_t pos;
; 506  :     int mode = 0;

  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR mode$[rsp], 0

; 507  : 
; 508  :     CHECK_INITIALIZED(self);

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001b	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  00022	85 c0		 test	 eax, eax
  00024	7f 1a		 jg	 SHORT $LN11@stringio_s
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0002d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00034	e8 00 00 00 00	 call	 PyErr_SetString
  00039	33 c0		 xor	 eax, eax
  0003b	e9 21 01 00 00	 jmp	 $LN12@stringio_s
$LN11@stringio_s:

; 509  :     if (!PyArg_ParseTuple(args, "n|i:seek", &pos, &mode))

  00040	4c 8d 4c 24 20	 lea	 r9, QWORD PTR mode$[rsp]
  00045	4c 8d 44 24 28	 lea	 r8, QWORD PTR pos$[rsp]
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LHPIDOMM@n?$HMi?3seek?$AA@
  00051	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00056	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0005b	85 c0		 test	 eax, eax
  0005d	75 07		 jne	 SHORT $LN10@stringio_s

; 510  :         return NULL;

  0005f	33 c0		 xor	 eax, eax
  00061	e9 fb 00 00 00	 jmp	 $LN12@stringio_s
$LN10@stringio_s:

; 511  :     CHECK_CLOSED(self);

  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0006b	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  00072	85 c0		 test	 eax, eax
  00074	74 1a		 je	 SHORT $LN9@stringio_s
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0007d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00084	e8 00 00 00 00	 call	 PyErr_SetString
  00089	33 c0		 xor	 eax, eax
  0008b	e9 d1 00 00 00	 jmp	 $LN12@stringio_s
$LN9@stringio_s:

; 512  : 
; 513  :     if (mode != 0 && mode != 1 && mode != 2) {

  00090	83 7c 24 20 00	 cmp	 DWORD PTR mode$[rsp], 0
  00095	74 2f		 je	 SHORT $LN8@stringio_s
  00097	83 7c 24 20 01	 cmp	 DWORD PTR mode$[rsp], 1
  0009c	74 28		 je	 SHORT $LN8@stringio_s
  0009e	83 7c 24 20 02	 cmp	 DWORD PTR mode$[rsp], 2
  000a3	74 21		 je	 SHORT $LN8@stringio_s

; 514  :         PyErr_Format(PyExc_ValueError,
; 515  :                      "Invalid whence (%i, should be 0, 1 or 2)", mode);

  000a5	44 8b 44 24 20	 mov	 r8d, DWORD PTR mode$[rsp]
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@IGFEKKBJ@Invalid?5whence?5?$CI?$CFi?0?5should?5be?50?0@
  000b1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000b8	e8 00 00 00 00	 call	 PyErr_Format

; 516  :         return NULL;

  000bd	33 c0		 xor	 eax, eax
  000bf	e9 9d 00 00 00	 jmp	 $LN12@stringio_s
  000c4	eb 53		 jmp	 SHORT $LN7@stringio_s
$LN8@stringio_s:

; 517  :     }
; 518  :     else if (pos < 0 && mode == 0) {

  000c6	48 83 7c 24 28
	00		 cmp	 QWORD PTR pos$[rsp], 0
  000cc	7d 25		 jge	 SHORT $LN6@stringio_s
  000ce	83 7c 24 20 00	 cmp	 DWORD PTR mode$[rsp], 0
  000d3	75 1e		 jne	 SHORT $LN6@stringio_s

; 519  :         PyErr_Format(PyExc_ValueError,
; 520  :                      "Negative seek position %zd", pos);

  000d5	4c 8b 44 24 28	 mov	 r8, QWORD PTR pos$[rsp]
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@KGECPAH@Negative?5seek?5position?5?$CFzd?$AA@
  000e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000e8	e8 00 00 00 00	 call	 PyErr_Format

; 521  :         return NULL;

  000ed	33 c0		 xor	 eax, eax
  000ef	eb 70		 jmp	 SHORT $LN12@stringio_s
  000f1	eb 26		 jmp	 SHORT $LN5@stringio_s
$LN6@stringio_s:

; 522  :     }
; 523  :     else if (mode != 0 && pos != 0) {

  000f3	83 7c 24 20 00	 cmp	 DWORD PTR mode$[rsp], 0
  000f8	74 1f		 je	 SHORT $LN4@stringio_s
  000fa	48 83 7c 24 28
	00		 cmp	 QWORD PTR pos$[rsp], 0
  00100	74 17		 je	 SHORT $LN4@stringio_s

; 524  :         PyErr_SetString(PyExc_IOError,
; 525  :                         "Can't do nonzero cur-relative seeks");

  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@EGPJNCAG@Can?8t?5do?5nonzero?5cur?9relative?5se@
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00110	e8 00 00 00 00	 call	 PyErr_SetString

; 526  :         return NULL;

  00115	33 c0		 xor	 eax, eax
  00117	eb 48		 jmp	 SHORT $LN12@stringio_s
$LN4@stringio_s:
$LN5@stringio_s:
$LN7@stringio_s:

; 527  :     }
; 528  : 
; 529  :     /* mode 0: offset relative to beginning of the string.
; 530  :        mode 1: no change to current position.
; 531  :        mode 2: change position to end of file. */
; 532  :     if (mode == 1) {

  00119	83 7c 24 20 01	 cmp	 DWORD PTR mode$[rsp], 1
  0011e	75 10		 jne	 SHORT $LN3@stringio_s

; 533  :         pos = self->pos;

  00120	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00125	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00129	48 89 44 24 28	 mov	 QWORD PTR pos$[rsp], rax
  0012e	eb 15		 jmp	 SHORT $LN2@stringio_s
$LN3@stringio_s:

; 534  :     }
; 535  :     else if (mode == 2) {

  00130	83 7c 24 20 02	 cmp	 DWORD PTR mode$[rsp], 2
  00135	75 0e		 jne	 SHORT $LN1@stringio_s

; 536  :         pos = self->string_size;

  00137	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0013c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00140	48 89 44 24 28	 mov	 QWORD PTR pos$[rsp], rax
$LN1@stringio_s:
$LN2@stringio_s:

; 537  :     }
; 538  : 
; 539  :     self->pos = pos;

  00145	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0014a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pos$[rsp]
  0014f	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 540  : 
; 541  :     return PyLong_FromSsize_t(self->pos);

  00153	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00158	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0015c	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN12@stringio_s:

; 542  : }

  00161	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00165	c3		 ret	 0
stringio_seek ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CD@IPDIHMAG@string?5argument?5expected?0?5got?5?8?$CF@ ; `string'
EXTRN	_PyUnicode_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_write DD imagerel stringio_write
	DD	imagerel stringio_write+428
	DD	imagerel $unwind$stringio_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_write DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'o', 00H
	DB	'b', 00H, 'j', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IPDIHMAG@string?5argument?5expected?0?5got?5?8?$CF@
CONST	SEGMENT
??_C@_0CD@IPDIHMAG@string?5argument?5expected?0?5got?5?8?$CF@ DB 'string '
	DB	'argument expected, got ''%s''', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_write
_TEXT	SEGMENT
size$ = 32
tv92 = 40
self$ = 64
obj$ = 72
stringio_write PROC					; COMDAT

; 552  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 553  :     Py_ssize_t size;
; 554  : 
; 555  :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00013	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  0001a	85 c0		 test	 eax, eax
  0001c	7f 1a		 jg	 SHORT $LN5@stringio_w
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	e8 00 00 00 00	 call	 PyErr_SetString
  00031	33 c0		 xor	 eax, eax
  00033	e9 6f 01 00 00	 jmp	 $LN6@stringio_w
$LN5@stringio_w:

; 556  :     if (!PyUnicode_Check(obj)) {

  00038	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  0003d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00041	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00047	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0004c	85 c0		 test	 eax, eax
  0004e	75 27		 jne	 SHORT $LN4@stringio_w

; 557  :         PyErr_Format(PyExc_TypeError, "string argument expected, got '%s'",
; 558  :                      Py_TYPE(obj)->tp_name);

  00050	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00055	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00059	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@IPDIHMAG@string?5argument?5expected?0?5got?5?8?$CF@
  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0006b	e8 00 00 00 00	 call	 PyErr_Format

; 559  :         return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	e9 30 01 00 00	 jmp	 $LN6@stringio_w
$LN4@stringio_w:

; 560  :     }
; 561  :     if (PyUnicode_READY(obj))

  00077	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  0007c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00080	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00086	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0008b	85 c0		 test	 eax, eax
  0008d	75 1c		 jne	 SHORT $LN8@stringio_w
  0008f	41 b8 31 02 00
	00		 mov	 r8d, 561		; 00000231H
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a9	33 c0		 xor	 eax, eax
$LN8@stringio_w:
  000ab	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  000b0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000b3	c1 e8 07	 shr	 eax, 7
  000b6	83 e0 01	 and	 eax, 1
  000b9	85 c0		 test	 eax, eax
  000bb	74 0a		 je	 SHORT $LN9@stringio_w
  000bd	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
  000c5	eb 0e		 jmp	 SHORT $LN10@stringio_w
$LN9@stringio_w:
  000c7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  000cc	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000d1	89 44 24 28	 mov	 DWORD PTR tv92[rsp], eax
$LN10@stringio_w:
  000d5	83 7c 24 28 00	 cmp	 DWORD PTR tv92[rsp], 0
  000da	74 07		 je	 SHORT $LN3@stringio_w

; 562  :         return NULL;

  000dc	33 c0		 xor	 eax, eax
  000de	e9 c4 00 00 00	 jmp	 $LN6@stringio_w
$LN3@stringio_w:

; 563  :     CHECK_CLOSED(self);

  000e3	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000e8	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  000ef	85 c0		 test	 eax, eax
  000f1	74 1a		 je	 SHORT $LN2@stringio_w
  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  000fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00101	e8 00 00 00 00	 call	 PyErr_SetString
  00106	33 c0		 xor	 eax, eax
  00108	e9 9a 00 00 00	 jmp	 $LN6@stringio_w
$LN2@stringio_w:

; 564  :     size = PyUnicode_GET_LENGTH(obj);

  0010d	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00112	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00116	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0011c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00121	85 c0		 test	 eax, eax
  00123	75 1c		 jne	 SHORT $LN11@stringio_w
  00125	41 b8 34 02 00
	00		 mov	 r8d, 564		; 00000234H
  0012b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00139	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0013f	33 c0		 xor	 eax, eax
$LN11@stringio_w:
  00141	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00146	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00149	c1 e8 07	 shr	 eax, 7
  0014c	83 e0 01	 and	 eax, 1
  0014f	85 c0		 test	 eax, eax
  00151	75 1c		 jne	 SHORT $LN12@stringio_w
  00153	41 b8 34 02 00
	00		 mov	 r8d, 564		; 00000234H
  00159	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@OCGMGMDG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00167	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0016d	33 c0		 xor	 eax, eax
$LN12@stringio_w:
  0016f	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00174	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00178	48 89 44 24 20	 mov	 QWORD PTR size$[rsp], rax

; 565  : 
; 566  :     if (size > 0 && write_str(self, obj) < 0)

  0017d	48 83 7c 24 20
	00		 cmp	 QWORD PTR size$[rsp], 0
  00183	7e 18		 jle	 SHORT $LN1@stringio_w
  00185	48 8b 54 24 48	 mov	 rdx, QWORD PTR obj$[rsp]
  0018a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0018f	e8 00 00 00 00	 call	 write_str
  00194	48 85 c0	 test	 rax, rax
  00197	7d 04		 jge	 SHORT $LN1@stringio_w

; 567  :         return NULL;

  00199	33 c0		 xor	 eax, eax
  0019b	eb 0a		 jmp	 SHORT $LN6@stringio_w
$LN1@stringio_w:

; 568  : 
; 569  :     return PyLong_FromSsize_t(size);

  0019d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR size$[rsp]
  001a2	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN6@stringio_w:

; 570  : }

  001a7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001ab	c3		 ret	 0
stringio_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@LKHKGFCB@new?5position?5too?5large?$AA@ ; `string'
PUBLIC	??_C@_1BC@OAMMNJJI@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@FNOIOGJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@OBOIPIPO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_1BO@MEJGEIJC@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
EXTRN	memset:PROC
EXTRN	PyUnicode_Replace:PROC
EXTRN	_PyIO_str_nl:QWORD
EXTRN	_PyIncrementalNewlineDecoder_decode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$write_str DD imagerel write_str
	DD	imagerel write_str+1051
	DD	imagerel $unwind$write_str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$write_str DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BH@LKHKGFCB@new?5position?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BH@LKHKGFCB@new?5position?5too?5large?$AA@ DB 'new position too la'
	DB	'rge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@OAMMNJJI@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@OAMMNJJI@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'l'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@FNOIOGJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@FNOIOGJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'd', 00H
	DB	'e', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@OBOIPIPO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@OBOIPIPO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MEJGEIJC@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEJGEIJC@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT write_str
_TEXT	SEGMENT
decoded$ = 32
len$ = 40
translated$20576 = 48
tv148 = 56
self$ = 80
obj$ = 88
write_str PROC						; COMDAT

; 175  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 176  :     Py_ssize_t len;
; 177  :     PyObject *decoded = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR decoded$[rsp], 0

; 178  : 
; 179  :     assert(self->buf != NULL);

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0001c	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00021	75 1c		 jne	 SHORT $LN22@write_str
  00023	41 b8 b3 00 00
	00		 mov	 r8d, 179		; 000000b3H
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@FBILHFFC@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003d	33 c0		 xor	 eax, eax
$LN22@write_str:

; 180  :     assert(self->pos >= 0);

  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00044	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00049	7d 1c		 jge	 SHORT $LN23@write_str
  0004b	41 b8 b4 00 00
	00		 mov	 r8d, 180		; 000000b4H
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@MEJGEIJC@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00065	33 c0		 xor	 eax, eax
$LN23@write_str:

; 181  : 
; 182  :     if (self->decoder != NULL) {

  00067	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0006c	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00074	74 23		 je	 SHORT $LN19@write_str

; 183  :         decoded = _PyIncrementalNewlineDecoder_decode(
; 184  :             self->decoder, obj, 1 /* always final */);

  00076	41 b8 01 00 00
	00		 mov	 r8d, 1
  0007c	48 8b 54 24 58	 mov	 rdx, QWORD PTR obj$[rsp]
  00081	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00086	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  0008d	e8 00 00 00 00	 call	 _PyIncrementalNewlineDecoder_decode
  00092	48 89 44 24 20	 mov	 QWORD PTR decoded$[rsp], rax

; 185  :     }
; 186  :     else {

  00097	eb 14		 jmp	 SHORT $LN18@write_str
$LN19@write_str:

; 187  :         decoded = obj;

  00099	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  0009e	48 89 44 24 20	 mov	 QWORD PTR decoded$[rsp], rax

; 188  :         Py_INCREF(decoded);

  000a3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR decoded$[rsp]
  000a8	e8 00 00 00 00	 call	 _Py_IncRef
$LN18@write_str:

; 189  :     }
; 190  :     if (self->writenl) {

  000ad	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b2	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  000ba	74 3d		 je	 SHORT $LN17@write_str

; 191  :         PyObject *translated = PyUnicode_Replace(
; 192  :             decoded, _PyIO_str_nl, self->writenl, -1);

  000bc	49 c7 c1 ff ff
	ff ff		 mov	 r9, -1
  000c3	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000c8	4c 8b 80 b0 00
	00 00		 mov	 r8, QWORD PTR [rax+176]
  000cf	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_nl
  000d6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR decoded$[rsp]
  000db	e8 00 00 00 00	 call	 PyUnicode_Replace
  000e0	48 89 44 24 30	 mov	 QWORD PTR translated$20576[rsp], rax

; 193  :         Py_DECREF(decoded);

  000e5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR decoded$[rsp]
  000ea	e8 00 00 00 00	 call	 _Py_DecRef

; 194  :         decoded = translated;

  000ef	48 8b 44 24 30	 mov	 rax, QWORD PTR translated$20576[rsp]
  000f4	48 89 44 24 20	 mov	 QWORD PTR decoded$[rsp], rax
$LN17@write_str:

; 195  :     }
; 196  :     if (decoded == NULL)

  000f9	48 83 7c 24 20
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  000ff	75 0c		 jne	 SHORT $LN16@write_str

; 197  :         return -1;

  00101	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00108	e9 09 03 00 00	 jmp	 $LN20@write_str
$LN16@write_str:

; 198  : 
; 199  :     assert(PyUnicode_Check(decoded));

  0010d	48 8b 44 24 20	 mov	 rax, QWORD PTR decoded$[rsp]
  00112	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00116	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0011c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00121	85 c0		 test	 eax, eax
  00123	75 1c		 jne	 SHORT $LN24@write_str
  00125	41 b8 c7 00 00
	00		 mov	 r8d, 199		; 000000c7H
  0012b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@OBOIPIPO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00139	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0013f	33 c0		 xor	 eax, eax
$LN24@write_str:

; 200  :     if (PyUnicode_READY(decoded)) {

  00141	48 8b 44 24 20	 mov	 rax, QWORD PTR decoded$[rsp]
  00146	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0014a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00150	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00155	85 c0		 test	 eax, eax
  00157	75 1c		 jne	 SHORT $LN25@write_str
  00159	41 b8 c8 00 00
	00		 mov	 r8d, 200		; 000000c8H
  0015f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@OBOIPIPO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  0016d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00173	33 c0		 xor	 eax, eax
$LN25@write_str:
  00175	48 8b 44 24 20	 mov	 rax, QWORD PTR decoded$[rsp]
  0017a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0017d	c1 e8 07	 shr	 eax, 7
  00180	83 e0 01	 and	 eax, 1
  00183	85 c0		 test	 eax, eax
  00185	74 0a		 je	 SHORT $LN26@write_str
  00187	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
  0018f	eb 0e		 jmp	 SHORT $LN27@write_str
$LN26@write_str:
  00191	48 8b 4c 24 20	 mov	 rcx, QWORD PTR decoded$[rsp]
  00196	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0019b	89 44 24 38	 mov	 DWORD PTR tv148[rsp], eax
$LN27@write_str:
  0019f	83 7c 24 38 00	 cmp	 DWORD PTR tv148[rsp], 0
  001a4	74 16		 je	 SHORT $LN15@write_str

; 201  :         Py_DECREF(decoded);

  001a6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR decoded$[rsp]
  001ab	e8 00 00 00 00	 call	 _Py_DecRef

; 202  :         return -1;

  001b0	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  001b7	e9 5a 02 00 00	 jmp	 $LN20@write_str
$LN15@write_str:

; 203  :     }
; 204  :     len = PyUnicode_GET_LENGTH(decoded);

  001bc	48 8b 44 24 20	 mov	 rax, QWORD PTR decoded$[rsp]
  001c1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001c5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001cb	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001d0	85 c0		 test	 eax, eax
  001d2	75 1c		 jne	 SHORT $LN28@write_str
  001d4	41 b8 cc 00 00
	00		 mov	 r8d, 204		; 000000ccH
  001da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  001e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@OBOIPIPO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  001e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ee	33 c0		 xor	 eax, eax
$LN28@write_str:
  001f0	48 8b 44 24 20	 mov	 rax, QWORD PTR decoded$[rsp]
  001f5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001f8	c1 e8 07	 shr	 eax, 7
  001fb	83 e0 01	 and	 eax, 1
  001fe	85 c0		 test	 eax, eax
  00200	75 1c		 jne	 SHORT $LN29@write_str
  00202	41 b8 cc 00 00
	00		 mov	 r8d, 204		; 000000ccH
  00208	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0020f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@FNOIOGJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAe?$AAc?$AAo?$AAd?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0021c	33 c0		 xor	 eax, eax
$LN29@write_str:
  0021e	48 8b 44 24 20	 mov	 rax, QWORD PTR decoded$[rsp]
  00223	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00227	48 89 44 24 28	 mov	 QWORD PTR len$[rsp], rax

; 205  :     assert(len >= 0);

  0022c	48 83 7c 24 28
	00		 cmp	 QWORD PTR len$[rsp], 0
  00232	7d 1c		 jge	 SHORT $LN30@write_str
  00234	41 b8 cd 00 00
	00		 mov	 r8d, 205		; 000000cdH
  0023a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00241	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@OAMMNJJI@?$AAl?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00248	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0024e	33 c0		 xor	 eax, eax
$LN30@write_str:

; 206  : 
; 207  :     /* This overflow check is not strictly necessary. However, it avoids us to
; 208  :        deal with funky things like comparing an unsigned and a signed
; 209  :        integer. */
; 210  :     if (self->pos > PY_SSIZE_T_MAX - len) {

  00250	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0025a	48 2b 44 24 28	 sub	 rax, QWORD PTR len$[rsp]
  0025f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00264	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00268	7e 18		 jle	 SHORT $LN14@write_str

; 211  :         PyErr_SetString(PyExc_OverflowError,
; 212  :                         "new position too large");

  0026a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@LKHKGFCB@new?5position?5too?5large?$AA@
  00271	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00278	e8 00 00 00 00	 call	 PyErr_SetString

; 213  :         goto fail;

  0027d	e9 75 01 00 00	 jmp	 $fail$20601
$LN14@write_str:

; 214  :     }
; 215  : 
; 216  :     if (self->state == STATE_ACCUMULATING) {

  00282	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00287	83 b8 80 00 00
	00 02		 cmp	 DWORD PTR [rax+128], 2
  0028e	75 4d		 jne	 SHORT $LN13@write_str

; 217  :         if (self->string_size == self->pos) {

  00290	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00295	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0029a	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0029e	48 39 48 70	 cmp	 QWORD PTR [rax+112], rcx
  002a2	75 26		 jne	 SHORT $LN12@write_str

; 218  :             if (_PyAccu_Accumulate(&self->accu, decoded))

  002a4	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  002a9	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  002af	48 8b 54 24 20	 mov	 rdx, QWORD PTR decoded$[rsp]
  002b4	48 8b c8	 mov	 rcx, rax
  002b7	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  002bc	85 c0		 test	 eax, eax
  002be	74 05		 je	 SHORT $LN11@write_str

; 219  :                 goto fail;

  002c0	e9 32 01 00 00	 jmp	 $fail$20601
$LN11@write_str:

; 220  :             goto success;

  002c5	e9 e2 00 00 00	 jmp	 $success$20605
$LN12@write_str:

; 221  :         }
; 222  :         if (realize(self))

  002ca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  002cf	e8 00 00 00 00	 call	 realize
  002d4	85 c0		 test	 eax, eax
  002d6	74 05		 je	 SHORT $LN10@write_str

; 223  :             goto fail;

  002d8	e9 1a 01 00 00	 jmp	 $fail$20601
$LN10@write_str:
$LN13@write_str:

; 224  :     }
; 225  : 
; 226  :     if (self->pos + len > self->string_size) {

  002dd	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  002e2	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  002e6	48 03 44 24 28	 add	 rax, QWORD PTR len$[rsp]
  002eb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  002f0	48 3b 41 70	 cmp	 rax, QWORD PTR [rcx+112]
  002f4	7e 24		 jle	 SHORT $LN9@write_str

; 227  :         if (resize_buffer(self, self->pos + len) < 0)

  002f6	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  002fb	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  002ff	48 03 44 24 28	 add	 rax, QWORD PTR len$[rsp]
  00304	48 8b d0	 mov	 rdx, rax
  00307	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0030c	e8 00 00 00 00	 call	 resize_buffer
  00311	85 c0		 test	 eax, eax
  00313	7d 05		 jge	 SHORT $LN8@write_str

; 228  :             goto fail;

  00315	e9 dd 00 00 00	 jmp	 $fail$20601
$LN8@write_str:
$LN9@write_str:

; 229  :     }
; 230  : 
; 231  :     if (self->pos > self->string_size) {

  0031a	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0031f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00324	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00328	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  0032c	7e 39		 jle	 SHORT $LN7@write_str

; 232  :         /* In case of overseek, pad with null bytes the buffer region between
; 233  :            the end of stream and the current position.
; 234  : 
; 235  :           0   lo      string_size                           hi
; 236  :           |   |<---used--->|<----------available----------->|
; 237  :           |   |            <--to pad-->|<---to write--->    |
; 238  :           0   buf                   position
; 239  : 
; 240  :         */
; 241  :         memset(self->buf + self->string_size, '\0',
; 242  :                (self->pos - self->string_size) * sizeof(Py_UCS4));

  0032e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00333	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00338	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0033c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00340	48 2b c1	 sub	 rax, rcx
  00343	48 c1 e0 02	 shl	 rax, 2
  00347	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0034c	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00350	48 8b 54 24 50	 mov	 rdx, QWORD PTR self$[rsp]
  00355	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  00359	48 8d 0c 8a	 lea	 rcx, QWORD PTR [rdx+rcx*4]
  0035d	4c 8b c0	 mov	 r8, rax
  00360	33 d2		 xor	 edx, edx
  00362	e8 00 00 00 00	 call	 memset
$LN7@write_str:

; 243  :     }
; 244  : 
; 245  :     /* Copy the data to the internal buffer, overwriting some of the
; 246  :        existing data if self->pos < self->string_size. */
; 247  :     if (!PyUnicode_AsUCS4(decoded,
; 248  :                           self->buf + self->pos,
; 249  :                           self->buf_size - self->pos,
; 250  :                           0))

  00367	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0036c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00371	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00375	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00379	48 2b c1	 sub	 rax, rcx
  0037c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00381	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00385	48 8b 54 24 50	 mov	 rdx, QWORD PTR self$[rsp]
  0038a	48 8b 52 60	 mov	 rdx, QWORD PTR [rdx+96]
  0038e	48 8d 0c 8a	 lea	 rcx, QWORD PTR [rdx+rcx*4]
  00392	45 33 c9	 xor	 r9d, r9d
  00395	4c 8b c0	 mov	 r8, rax
  00398	48 8b d1	 mov	 rdx, rcx
  0039b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR decoded$[rsp]
  003a0	e8 00 00 00 00	 call	 PyUnicode_AsUCS4
  003a5	48 85 c0	 test	 rax, rax
  003a8	75 02		 jne	 SHORT $LN6@write_str

; 251  :         goto fail;

  003aa	eb 4b		 jmp	 SHORT $fail$20601
$LN6@write_str:
$success$20605:

; 252  : 
; 253  : success:
; 254  :     /* Set the new length of the internal string if it has changed. */
; 255  :     self->pos += len;

  003ac	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  003b1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  003b5	48 03 44 24 28	 add	 rax, QWORD PTR len$[rsp]
  003ba	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  003bf	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 256  :     if (self->string_size < self->pos)

  003c3	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  003c8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  003cd	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  003d1	48 39 48 70	 cmp	 QWORD PTR [rax+112], rcx
  003d5	7d 12		 jge	 SHORT $LN5@write_str

; 257  :         self->string_size = self->pos;

  003d7	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  003dc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  003e1	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  003e5	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx
$LN5@write_str:

; 258  : 
; 259  :     Py_DECREF(decoded);

  003e9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR decoded$[rsp]
  003ee	e8 00 00 00 00	 call	 _Py_DecRef

; 260  :     return 0;

  003f3	33 c0		 xor	 eax, eax
  003f5	eb 1f		 jmp	 SHORT $LN20@write_str
$fail$20601:
$LN4@write_str:

; 261  : 
; 262  : fail:
; 263  :     Py_XDECREF(decoded);

  003f7	48 83 7c 24 20
	00		 cmp	 QWORD PTR decoded$[rsp], 0
  003fd	74 0a		 je	 SHORT $LN1@write_str
  003ff	48 8b 4c 24 20	 mov	 rcx, QWORD PTR decoded$[rsp]
  00404	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@write_str:
  00409	33 c0		 xor	 eax, eax
  0040b	85 c0		 test	 eax, eax
  0040d	75 e8		 jne	 SHORT $LN4@write_str

; 264  :     return -1;

  0040f	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
$LN20@write_str:

; 265  : }

  00416	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0041a	c3		 ret	 0
write_str ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@EBEIBIEC@stringio_close?$AA@		; `string'
PUBLIC	??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@ ; `string'
EXTRN	_PyAccu_Destroy:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\stringio.c
pdata	SEGMENT
$pdata$stringio_close DD imagerel stringio_close
	DD	imagerel stringio_close+426
	DD	imagerel $unwind$stringio_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_close DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0P@EBEIBIEC@stringio_close?$AA@
CONST	SEGMENT
??_C@_0P@EBEIBIEC@stringio_close?$AA@ DB 'stringio_close', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
CONST	SEGMENT
??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@ DB '..\Modules\_i'
	DB	'o\stringio.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_close
_TEXT	SEGMENT
_py_tmp$20858 = 48
_py_tmp$20866 = 56
_py_tmp$20874 = 64
self$ = 96
stringio_close PROC					; COMDAT

; 580  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 581  :     self->closed = 1;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0000e	c6 80 99 00 00
	00 01		 mov	 BYTE PTR [rax+153], 1

; 582  :     /* Free up some memory */
; 583  :     if (resize_buffer(self, 0) < 0)

  00015	33 d2		 xor	 edx, edx
  00017	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0001c	e8 00 00 00 00	 call	 resize_buffer
  00021	85 c0		 test	 eax, eax
  00023	7d 07		 jge	 SHORT $LN13@stringio_c

; 584  :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	e9 79 01 00 00	 jmp	 $LN14@stringio_c
$LN13@stringio_c:

; 585  :     _PyAccu_Destroy(&self->accu);

  0002c	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00031	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 _PyAccu_Destroy
$LN12@stringio_c:

; 586  :     Py_CLEAR(self->readnl);

  0003f	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00044	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  0004c	74 5c		 je	 SHORT $LN9@stringio_c
  0004e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00056	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0005b	4c 8b 88 a8 00
	00 00		 mov	 r9, QWORD PTR [rax+168]
  00062	41 b8 4a 02 00
	00		 mov	 r8d, 586		; 0000024aH
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EBEIBIEC@stringio_close?$AA@
  00076	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007b	85 c0		 test	 eax, eax
  0007d	75 2b		 jne	 SHORT $LN9@stringio_c
  0007f	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00084	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  0008b	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20858[rsp], rax
  00090	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00095	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0
  000a0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20858[rsp]
  000a5	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@stringio_c:
  000aa	33 c0		 xor	 eax, eax
  000ac	85 c0		 test	 eax, eax
  000ae	75 8f		 jne	 SHORT $LN12@stringio_c
$LN8@stringio_c:

; 587  :     Py_CLEAR(self->writenl);

  000b0	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000b5	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  000bd	74 5c		 je	 SHORT $LN5@stringio_c
  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000cc	4c 8b 88 b0 00
	00 00		 mov	 r9, QWORD PTR [rax+176]
  000d3	41 b8 4b 02 00
	00		 mov	 r8d, 587		; 0000024bH
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EBEIBIEC@stringio_close?$AA@
  000e7	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ec	85 c0		 test	 eax, eax
  000ee	75 2b		 jne	 SHORT $LN5@stringio_c
  000f0	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000f5	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  000fc	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20866[rsp], rax
  00101	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00106	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0
  00111	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20866[rsp]
  00116	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@stringio_c:
  0011b	33 c0		 xor	 eax, eax
  0011d	85 c0		 test	 eax, eax
  0011f	75 8f		 jne	 SHORT $LN8@stringio_c
$LN4@stringio_c:

; 588  :     Py_CLEAR(self->decoder);

  00121	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00126	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0012e	74 5c		 je	 SHORT $LN1@stringio_c
  00130	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00138	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0013d	4c 8b 88 a0 00
	00 00		 mov	 r9, QWORD PTR [rax+160]
  00144	41 b8 4c 02 00
	00		 mov	 r8d, 588		; 0000024cH
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EBEIBIEC@stringio_close?$AA@
  00158	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015d	85 c0		 test	 eax, eax
  0015f	75 2b		 jne	 SHORT $LN1@stringio_c
  00161	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00166	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0016d	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$20874[rsp], rax
  00172	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00177	48 c7 80 a0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+160], 0
  00182	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$20874[rsp]
  00187	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@stringio_c:
  0018c	33 c0		 xor	 eax, eax
  0018e	85 c0		 test	 eax, eax
  00190	75 8f		 jne	 SHORT $LN4@stringio_c

; 589  :     Py_RETURN_NONE;

  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00199	e8 00 00 00 00	 call	 _Py_IncRef
  0019e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN14@stringio_c:

; 590  : }

  001a5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a9	c3		 ret	 0
stringio_close ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@KHGLMPKH@stringio_traverse?$AA@	; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_traverse DD imagerel stringio_traverse
	DD	imagerel stringio_traverse+122
	DD	imagerel $unwind$stringio_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BC@KHGLMPKH@stringio_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@KHGLMPKH@stringio_traverse?$AA@ DB 'stringio_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_traverse
_TEXT	SEGMENT
vret$20893 = 32
self$ = 64
visit$ = 72
arg$ = 80
stringio_traverse PROC					; COMDAT

; 594  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@stringio_t@3:

; 595  :     Py_VISIT(self->dict);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@stringio_t@3
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 53 02 00
	00		 mov	 r8d, 595		; 00000253H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@KHGLMPKH@stringio_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@stringio_t@3:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00045	74 26		 je	 SHORT $LN2@stringio_t@3
  00047	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00051	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00058	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  0005c	89 44 24 20	 mov	 DWORD PTR vret$20893[rsp], eax
  00060	83 7c 24 20 00	 cmp	 DWORD PTR vret$20893[rsp], 0
  00065	74 06		 je	 SHORT $LN1@stringio_t@3
  00067	8b 44 24 20	 mov	 eax, DWORD PTR vret$20893[rsp]
  0006b	eb 08		 jmp	 SHORT $LN7@stringio_t@3
$LN1@stringio_t@3:
$LN2@stringio_t@3:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a0		 jne	 SHORT $LN6@stringio_t@3

; 596  :     return 0;

  00073	33 c0		 xor	 eax, eax
$LN7@stringio_t@3:

; 597  : }

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
stringio_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DENEALKO@stringio_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_clear DD imagerel stringio_clear
	DD	imagerel stringio_clear+129
	DD	imagerel $unwind$stringio_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0P@DENEALKO@stringio_clear?$AA@
CONST	SEGMENT
??_C@_0P@DENEALKO@stringio_clear?$AA@ DB 'stringio_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_clear
_TEXT	SEGMENT
_py_tmp$20905 = 48
self$ = 80
stringio_clear PROC					; COMDAT

; 601  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@stringio_c@2:

; 602  :     Py_CLEAR(self->dict);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00016	74 5c		 je	 SHORT $LN1@stringio_c@2
  00018	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00025	4c 8b 88 b8 00
	00 00		 mov	 r9, QWORD PTR [rax+184]
  0002c	41 b8 5a 02 00
	00		 mov	 r8d, 602		; 0000025aH
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@DENEALKO@stringio_clear?$AA@
  00040	e8 00 00 00 00	 call	 _PyParallel_Guard
  00045	85 c0		 test	 eax, eax
  00047	75 2b		 jne	 SHORT $LN1@stringio_c@2
  00049	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00055	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20905[rsp], rax
  0005a	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 c7 80 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+184], 0
  0006a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20905[rsp]
  0006f	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@stringio_c@2:
  00074	33 c0		 xor	 eax, eax
  00076	85 c0		 test	 eax, eax
  00078	75 8f		 jne	 SHORT $LN4@stringio_c@2

; 603  :     return 0;

  0007a	33 c0		 xor	 eax, eax

; 604  : }

  0007c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00080	c3		 ret	 0
stringio_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@	; `string'
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	PyMem_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_dealloc DD imagerel stringio_dealloc
	DD	imagerel stringio_dealloc+820
	DD	imagerel $unwind$stringio_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_dealloc DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
CONST	SEGMENT
??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@ DB 'stringio_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_dealloc
_TEXT	SEGMENT
g$20918 = 48
_py_tmp$20930 = 56
_py_tmp$20938 = 64
_py_tmp$20946 = 72
_py_tmp$20954 = 80
tv79 = 88
self$ = 112
stringio_dealloc PROC					; COMDAT

; 608  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 609  :     _PyObject_GC_UNTRACK(self);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 70	 mov	 r9, QWORD PTR self$[rsp]
  00016	41 b8 61 02 00
	00		 mov	 r8d, 609		; 00000261H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN22@stringio_d
$LN21@stringio_d:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 70	 mov	 r9, QWORD PTR self$[rsp]
  00044	41 b8 61 02 00
	00		 mov	 r8d, 609		; 00000261H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN25@stringio_d
  00061	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN26@stringio_d
$LN25@stringio_d:
  0006c	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 58	 mov	 QWORD PTR tv79[rsp], rax
$LN26@stringio_d:
  0007a	48 8b 44 24 58	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$20918[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20918[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN27@stringio_d
  00090	41 b8 61 02 00
	00		 mov	 r8d, 609		; 00000261H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN27@stringio_d:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20918[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20918[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20918[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20918[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20918[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20918[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN21@stringio_d
$LN22@stringio_d:

; 610  :     self->ok = 0;

  000f8	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  000fd	c6 80 98 00 00
	00 00		 mov	 BYTE PTR [rax+152], 0

; 611  :     if (self->buf) {

  00104	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00109	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0010e	74 1b		 je	 SHORT $LN18@stringio_d

; 612  :         PyMem_Free(self->buf);

  00110	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00115	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00119	e8 00 00 00 00	 call	 PyMem_Free

; 613  :         self->buf = NULL;

  0011e	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00123	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
$LN18@stringio_d:

; 614  :     }
; 615  :     _PyAccu_Destroy(&self->accu);

  0012b	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00130	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00136	48 8b c8	 mov	 rcx, rax
  00139	e8 00 00 00 00	 call	 _PyAccu_Destroy
$LN17@stringio_d:

; 616  :     Py_CLEAR(self->readnl);

  0013e	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00143	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  0014b	74 5c		 je	 SHORT $LN14@stringio_d
  0014d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00155	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0015a	4c 8b 88 a8 00
	00 00		 mov	 r9, QWORD PTR [rax+168]
  00161	41 b8 68 02 00
	00		 mov	 r8d, 616		; 00000268H
  00167	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  00175	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017a	85 c0		 test	 eax, eax
  0017c	75 2b		 jne	 SHORT $LN14@stringio_d
  0017e	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00183	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  0018a	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20930[rsp], rax
  0018f	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00194	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0
  0019f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20930[rsp]
  001a4	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@stringio_d:
  001a9	33 c0		 xor	 eax, eax
  001ab	85 c0		 test	 eax, eax
  001ad	75 8f		 jne	 SHORT $LN17@stringio_d
$LN13@stringio_d:

; 617  :     Py_CLEAR(self->writenl);

  001af	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  001b4	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  001bc	74 5c		 je	 SHORT $LN10@stringio_d
  001be	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c6	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  001cb	4c 8b 88 b0 00
	00 00		 mov	 r9, QWORD PTR [rax+176]
  001d2	41 b8 69 02 00
	00		 mov	 r8d, 617		; 00000269H
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  001e6	e8 00 00 00 00	 call	 _PyParallel_Guard
  001eb	85 c0		 test	 eax, eax
  001ed	75 2b		 jne	 SHORT $LN10@stringio_d
  001ef	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  001f4	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  001fb	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$20938[rsp], rax
  00200	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00205	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0
  00210	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$20938[rsp]
  00215	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@stringio_d:
  0021a	33 c0		 xor	 eax, eax
  0021c	85 c0		 test	 eax, eax
  0021e	75 8f		 jne	 SHORT $LN13@stringio_d
$LN9@stringio_d:

; 618  :     Py_CLEAR(self->decoder);

  00220	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00225	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0022d	74 5c		 je	 SHORT $LN6@stringio_d
  0022f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00237	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0023c	4c 8b 88 a0 00
	00 00		 mov	 r9, QWORD PTR [rax+160]
  00243	41 b8 6a 02 00
	00		 mov	 r8d, 618		; 0000026aH
  00249	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  00257	e8 00 00 00 00	 call	 _PyParallel_Guard
  0025c	85 c0		 test	 eax, eax
  0025e	75 2b		 jne	 SHORT $LN6@stringio_d
  00260	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00265	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0026c	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$20946[rsp], rax
  00271	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00276	48 c7 80 a0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+160], 0
  00281	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$20946[rsp]
  00286	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@stringio_d:
  0028b	33 c0		 xor	 eax, eax
  0028d	85 c0		 test	 eax, eax
  0028f	75 8f		 jne	 SHORT $LN9@stringio_d
$LN5@stringio_d:

; 619  :     Py_CLEAR(self->dict);

  00291	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00296	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0029e	74 5c		 je	 SHORT $LN2@stringio_d
  002a0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002a8	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  002ad	4c 8b 88 b8 00
	00 00		 mov	 r9, QWORD PTR [rax+184]
  002b4	41 b8 6b 02 00
	00		 mov	 r8d, 619		; 0000026bH
  002ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  002c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGJHCCID@stringio_dealloc?$AA@
  002c8	e8 00 00 00 00	 call	 _PyParallel_Guard
  002cd	85 c0		 test	 eax, eax
  002cf	75 2b		 jne	 SHORT $LN2@stringio_d
  002d1	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  002d6	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  002dd	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$20954[rsp], rax
  002e2	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  002e7	48 c7 80 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+184], 0
  002f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$20954[rsp]
  002f7	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@stringio_d:
  002fc	33 c0		 xor	 eax, eax
  002fe	85 c0		 test	 eax, eax
  00300	75 8f		 jne	 SHORT $LN5@stringio_d

; 620  :     if (self->weakreflist != NULL)

  00302	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00307	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  0030f	74 0a		 je	 SHORT $LN1@stringio_d

; 621  :         PyObject_ClearWeakRefs((PyObject *) self);

  00311	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00316	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN1@stringio_d:

; 622  :     Py_TYPE(self)->tp_free(self);

  0031b	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00320	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00324	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00329	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 623  : }

  0032f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00333	c3		 ret	 0
stringio_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@ ; `string'
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_new DD imagerel stringio_new
	DD	imagerel stringio_new+160
	DD	imagerel $unwind$stringio_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_new DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@
CONST	SEGMENT
??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@ DB 't'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 't', 00H, 'p', 00H, '_', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_new
_TEXT	SEGMENT
self$ = 32
type$ = 64
args$ = 72
kwds$ = 80
stringio_new PROC					; COMDAT

; 627  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 628  :     stringio *self;
; 629  : 
; 630  :     assert(type != NULL && type->tp_alloc != NULL);

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR type$[rsp], 0
  00019	74 0f		 je	 SHORT $LN5@stringio_n
  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00020	48 83 b8 88 01
	00 00 00	 cmp	 QWORD PTR [rax+392], 0
  00028	75 1c		 jne	 SHORT $LN6@stringio_n
$LN5@stringio_n:
  0002a	41 b8 76 02 00
	00		 mov	 r8d, 630		; 00000276H
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00044	33 c0		 xor	 eax, eax
$LN6@stringio_n:

; 631  :     self = (stringio *)type->tp_alloc(type, 0);

  00046	33 d2		 xor	 edx, edx
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00052	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00058	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 632  :     if (self == NULL)

  0005d	48 83 7c 24 20
	00		 cmp	 QWORD PTR self$[rsp], 0
  00063	75 04		 jne	 SHORT $LN2@stringio_n

; 633  :         return NULL;

  00065	33 c0		 xor	 eax, eax
  00067	eb 32		 jmp	 SHORT $LN3@stringio_n
$LN2@stringio_n:

; 634  : 
; 635  :     /* tp_alloc initializes all the fields to zero. So we don't have to
; 636  :        initialize them here. */
; 637  : 
; 638  :     self->buf = (Py_UCS4 *)PyMem_Malloc(0);

  00069	33 c9		 xor	 ecx, ecx
  0006b	e8 00 00 00 00	 call	 PyMem_Malloc
  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  00075	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 639  :     if (self->buf == NULL) {

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  0007e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00083	75 11		 jne	 SHORT $LN1@stringio_n

; 640  :         Py_DECREF(self);

  00085	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  0008a	e8 00 00 00 00	 call	 _Py_DecRef

; 641  :         return PyErr_NoMemory();

  0008f	e8 00 00 00 00	 call	 PyErr_NoMemory
  00094	eb 05		 jmp	 SHORT $LN3@stringio_n
$LN1@stringio_n:

; 642  :     }
; 643  : 
; 644  :     return (PyObject *)self;

  00096	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
$LN3@stringio_n:

; 645  : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
stringio_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MPEHDMPO@Oi?$AA@			; `string'
PUBLIC	??_C@_1LG@OMLMLKNL@?$AA?$CI?$AAn?$AAe?$AAw?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAe?$AAw?$AAl?$AAi?$AAn?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?5@ ; `string'
PUBLIC	??_C@_0O@NKMPINCD@stringio_init?$AA@		; `string'
PUBLIC	??_C@_0CO@EIJEHAIM@initial_value?5must?5be?5str?5or?5Non@ ; `string'
PUBLIC	??_C@_0BK@BLBBMCNI@illegal?5newline?5value?3?5?$CFR?$AA@ ; `string'
PUBLIC	??_C@_0CI@JNJCNLJD@newline?5must?5be?5str?5or?5None?0?5not@ ; `string'
PUBLIC	??_C@_0N@IPNCKJGL@?$HMOO?3__init__?$AA@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_07NADKJHCJ@newline?$AA@			; `string'
PUBLIC	??_C@_0O@HFIAAMGD@initial_value?$AA@		; `string'
EXTRN	PyUnicode_GetLength:PROC
EXTRN	_PyObject_CallFunction_SizeT:PROC
EXTRN	PyIncrementalNewlineDecoder_Type:BYTE
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	_PyArg_ParseTupleAndKeywords_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_init DD imagerel stringio_init
	DD	imagerel stringio_init+1664
	DD	imagerel $unwind$stringio_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_init DD 021601H
	DD	0130116H
xdata	ENDS
;	COMDAT ??_C@_02MPEHDMPO@Oi?$AA@
CONST	SEGMENT
??_C@_02MPEHDMPO@Oi?$AA@ DB 'Oi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@OMLMLKNL@?$AA?$CI?$AAn?$AAe?$AAw?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAe?$AAw?$AAl?$AAi?$AAn?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?5@
CONST	SEGMENT
??_C@_1LG@OMLMLKNL@?$AA?$CI?$AAn?$AAe?$AAw?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAe?$AAw?$AAl?$AAi?$AAn?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?5@ DB '('
	DB	00H, 'n', 00H, 'e', 00H, 'w', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'n', 00H, 'e', 00H, 'w', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, '_', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'P', 00H, 'y', 00H, '_', 00H, 'N', 00H, 'o'
	DB	00H, 'n', 00H, 'e', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, '(', 00H, 'n', 00H, 'e', 00H, 'w', 00H, 'l', 00H, 'i'
	DB	00H, 'n', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'n', 00H, 'e', 00H, 'w', 00H, 'l', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, '_', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'y', 00H, '_', 00H
	DB	'N', 00H, 'o', 00H, 'n', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NKMPINCD@stringio_init?$AA@
CONST	SEGMENT
??_C@_0O@NKMPINCD@stringio_init?$AA@ DB 'stringio_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EIJEHAIM@initial_value?5must?5be?5str?5or?5Non@
CONST	SEGMENT
??_C@_0CO@EIJEHAIM@initial_value?5must?5be?5str?5or?5Non@ DB 'initial_val'
	DB	'ue must be str or None, not %.200s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BLBBMCNI@illegal?5newline?5value?3?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BK@BLBBMCNI@illegal?5newline?5value?3?5?$CFR?$AA@ DB 'illegal newl'
	DB	'ine value: %R', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JNJCNLJD@newline?5must?5be?5str?5or?5None?0?5not@
CONST	SEGMENT
??_C@_0CI@JNJCNLJD@newline?5must?5be?5str?5or?5None?0?5not@ DB 'newline m'
	DB	'ust be str or None, not %.200s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IPNCKJGL@?$HMOO?3__init__?$AA@
CONST	SEGMENT
??_C@_0N@IPNCKJGL@?$HMOO?3__init__?$AA@ DB '|OO:__init__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07NADKJHCJ@newline?$AA@
CONST	SEGMENT
??_C@_07NADKJHCJ@newline?$AA@ DB 'newline', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HFIAAMGD@initial_value?$AA@
CONST	SEGMENT
??_C@_0O@HFIAAMGD@initial_value?$AA@ DB 'initial_value', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_init
_TEXT	SEGMENT
kwlist$ = 48
value$ = 72
newline_obj$ = 80
newline$ = 88
value_len$ = 96
_py_tmp$21029 = 104
_py_tmp$21037 = 112
_py_tmp$21045 = 120
tv216 = 128
tv220 = 132
self$ = 160
args$ = 168
kwds$ = 176
stringio_init PROC					; COMDAT

; 649  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 650  :     char *kwlist[] = {"initial_value", "newline", NULL};

  00016	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@HFIAAMGD@initial_value?$AA@
  0001d	48 89 44 24 30	 mov	 QWORD PTR kwlist$[rsp], rax
  00022	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07NADKJHCJ@newline?$AA@
  00029	48 89 44 24 38	 mov	 QWORD PTR kwlist$[rsp+8], rax
  0002e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR kwlist$[rsp+16], 0

; 651  :     PyObject *value = NULL;

  00037	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 652  :     PyObject *newline_obj = NULL;

  00040	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR newline_obj$[rsp], 0

; 653  :     char *newline = "\n";

  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00050	48 89 44 24 58	 mov	 QWORD PTR newline$[rsp], rax

; 654  :     Py_ssize_t value_len;
; 655  : 
; 656  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OO:__init__", kwlist,
; 657  :                                      &value, &newline_obj))

  00055	48 8d 44 24 50	 lea	 rax, QWORD PTR newline_obj$[rsp]
  0005a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0005f	48 8d 44 24 48	 lea	 rax, QWORD PTR value$[rsp]
  00064	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00069	4c 8d 4c 24 30	 lea	 r9, QWORD PTR kwlist$[rsp]
  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@IPNCKJGL@?$HMOO?3__init__?$AA@
  00075	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0007d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00085	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  0008a	85 c0		 test	 eax, eax
  0008c	75 0a		 jne	 SHORT $LN36@stringio_i@2

; 658  :         return -1;

  0008e	b8 ff ff ff ff	 mov	 eax, -1
  00093	e9 e0 05 00 00	 jmp	 $LN37@stringio_i@2
$LN36@stringio_i@2:

; 659  : 
; 660  :     /* Parse the newline argument. This used to be done with the 'z'
; 661  :        specifier, however this allowed any object with the buffer interface to
; 662  :        be converted. Thus we have to parse it manually since we only want to
; 663  :        allow unicode objects or None. */
; 664  :     if (newline_obj == Py_None) {

  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0009f	48 39 44 24 50	 cmp	 QWORD PTR newline_obj$[rsp], rax
  000a4	75 0b		 jne	 SHORT $LN35@stringio_i@2

; 665  :         newline = NULL;

  000a6	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR newline$[rsp], 0
  000af	eb 6b		 jmp	 SHORT $LN34@stringio_i@2
$LN35@stringio_i@2:

; 666  :     }
; 667  :     else if (newline_obj) {

  000b1	48 83 7c 24 50
	00		 cmp	 QWORD PTR newline_obj$[rsp], 0
  000b7	74 63		 je	 SHORT $LN33@stringio_i@2

; 668  :         if (!PyUnicode_Check(newline_obj)) {

  000b9	48 8b 44 24 50	 mov	 rax, QWORD PTR newline_obj$[rsp]
  000be	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000cd	85 c0		 test	 eax, eax
  000cf	75 2a		 jne	 SHORT $LN32@stringio_i@2

; 669  :             PyErr_Format(PyExc_TypeError,
; 670  :                          "newline must be str or None, not %.200s",
; 671  :                          Py_TYPE(newline_obj)->tp_name);

  000d1	48 8b 44 24 50	 mov	 rax, QWORD PTR newline_obj$[rsp]
  000d6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000da	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@JNJCNLJD@newline?5must?5be?5str?5or?5None?0?5not@
  000e5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ec	e8 00 00 00 00	 call	 PyErr_Format

; 672  :             return -1;

  000f1	b8 ff ff ff ff	 mov	 eax, -1
  000f6	e9 7d 05 00 00	 jmp	 $LN37@stringio_i@2
$LN32@stringio_i@2:

; 673  :         }
; 674  :         newline = _PyUnicode_AsString(newline_obj);

  000fb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR newline_obj$[rsp]
  00100	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00105	48 89 44 24 58	 mov	 QWORD PTR newline$[rsp], rax

; 675  :         if (newline == NULL)

  0010a	48 83 7c 24 58
	00		 cmp	 QWORD PTR newline$[rsp], 0
  00110	75 0a		 jne	 SHORT $LN31@stringio_i@2

; 676  :             return -1;

  00112	b8 ff ff ff ff	 mov	 eax, -1
  00117	e9 5c 05 00 00	 jmp	 $LN37@stringio_i@2
$LN31@stringio_i@2:
$LN33@stringio_i@2:
$LN34@stringio_i@2:

; 677  :     }
; 678  : 
; 679  :     if (newline && newline[0] != '\0'
; 680  :         && !(newline[0] == '\n' && newline[1] == '\0')
; 681  :         && !(newline[0] == '\r' && newline[1] == '\0')
; 682  :         && !(newline[0] == '\r' && newline[1] == '\n' && newline[2] == '\0')) {

  0011c	48 83 7c 24 58
	00		 cmp	 QWORD PTR newline$[rsp], 0
  00122	0f 84 8a 00 00
	00		 je	 $LN30@stringio_i@2
  00128	48 8b 44 24 58	 mov	 rax, QWORD PTR newline$[rsp]
  0012d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00130	85 c0		 test	 eax, eax
  00132	74 7e		 je	 SHORT $LN30@stringio_i@2
  00134	48 8b 44 24 58	 mov	 rax, QWORD PTR newline$[rsp]
  00139	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0013c	83 f8 0a	 cmp	 eax, 10
  0013f	75 0d		 jne	 SHORT $LN29@stringio_i@2
  00141	48 8b 44 24 58	 mov	 rax, QWORD PTR newline$[rsp]
  00146	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  0014a	85 c0		 test	 eax, eax
  0014c	74 64		 je	 SHORT $LN30@stringio_i@2
$LN29@stringio_i@2:
  0014e	48 8b 44 24 58	 mov	 rax, QWORD PTR newline$[rsp]
  00153	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00156	83 f8 0d	 cmp	 eax, 13
  00159	75 0d		 jne	 SHORT $LN28@stringio_i@2
  0015b	48 8b 44 24 58	 mov	 rax, QWORD PTR newline$[rsp]
  00160	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  00164	85 c0		 test	 eax, eax
  00166	74 4a		 je	 SHORT $LN30@stringio_i@2
$LN28@stringio_i@2:
  00168	48 8b 44 24 58	 mov	 rax, QWORD PTR newline$[rsp]
  0016d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00170	83 f8 0d	 cmp	 eax, 13
  00173	75 1b		 jne	 SHORT $LN27@stringio_i@2
  00175	48 8b 44 24 58	 mov	 rax, QWORD PTR newline$[rsp]
  0017a	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  0017e	83 f8 0a	 cmp	 eax, 10
  00181	75 0d		 jne	 SHORT $LN27@stringio_i@2
  00183	48 8b 44 24 58	 mov	 rax, QWORD PTR newline$[rsp]
  00188	0f be 40 02	 movsx	 eax, BYTE PTR [rax+2]
  0018c	85 c0		 test	 eax, eax
  0018e	74 22		 je	 SHORT $LN30@stringio_i@2
$LN27@stringio_i@2:

; 683  :         PyErr_Format(PyExc_ValueError,
; 684  :                      "illegal newline value: %R", newline_obj);

  00190	4c 8b 44 24 50	 mov	 r8, QWORD PTR newline_obj$[rsp]
  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BLBBMCNI@illegal?5newline?5value?3?5?$CFR?$AA@
  0019c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001a3	e8 00 00 00 00	 call	 PyErr_Format

; 685  :         return -1;

  001a8	b8 ff ff ff ff	 mov	 eax, -1
  001ad	e9 c6 04 00 00	 jmp	 $LN37@stringio_i@2
$LN30@stringio_i@2:

; 686  :     }
; 687  :     if (value && value != Py_None && !PyUnicode_Check(value)) {

  001b2	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  001b8	74 50		 je	 SHORT $LN26@stringio_i@2
  001ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001c1	48 39 44 24 48	 cmp	 QWORD PTR value$[rsp], rax
  001c6	74 42		 je	 SHORT $LN26@stringio_i@2
  001c8	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  001cd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001d1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001d7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001dc	85 c0		 test	 eax, eax
  001de	75 2a		 jne	 SHORT $LN26@stringio_i@2

; 688  :         PyErr_Format(PyExc_TypeError,
; 689  :                      "initial_value must be str or None, not %.200s",
; 690  :                      Py_TYPE(value)->tp_name);

  001e0	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  001e5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001e9	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  001ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@EIJEHAIM@initial_value?5must?5be?5str?5or?5Non@
  001f4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001fb	e8 00 00 00 00	 call	 PyErr_Format

; 691  :         return -1;

  00200	b8 ff ff ff ff	 mov	 eax, -1
  00205	e9 6e 04 00 00	 jmp	 $LN37@stringio_i@2
$LN26@stringio_i@2:

; 692  :     }
; 693  : 
; 694  :     self->ok = 0;

  0020a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00212	c6 80 98 00 00
	00 00		 mov	 BYTE PTR [rax+152], 0

; 695  : 
; 696  :     _PyAccu_Destroy(&self->accu);

  00219	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00221	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00227	48 8b c8	 mov	 rcx, rax
  0022a	e8 00 00 00 00	 call	 _PyAccu_Destroy
$LN25@stringio_i@2:

; 697  :     Py_CLEAR(self->readnl);

  0022f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00237	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  0023f	74 65		 je	 SHORT $LN22@stringio_i@2
  00241	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00249	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00251	4c 8b 88 a8 00
	00 00		 mov	 r9, QWORD PTR [rax+168]
  00258	41 b8 b9 02 00
	00		 mov	 r8d, 697		; 000002b9H
  0025e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NKMPINCD@stringio_init?$AA@
  0026c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00271	85 c0		 test	 eax, eax
  00273	75 31		 jne	 SHORT $LN22@stringio_i@2
  00275	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0027d	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  00284	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$21029[rsp], rax
  00289	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00291	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0
  0029c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$21029[rsp]
  002a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@stringio_i@2:
  002a6	33 c0		 xor	 eax, eax
  002a8	85 c0		 test	 eax, eax
  002aa	75 83		 jne	 SHORT $LN25@stringio_i@2
$LN21@stringio_i@2:

; 698  :     Py_CLEAR(self->writenl);

  002ac	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002b4	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  002bc	74 65		 je	 SHORT $LN18@stringio_i@2
  002be	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002c6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002ce	4c 8b 88 b0 00
	00 00		 mov	 r9, QWORD PTR [rax+176]
  002d5	41 b8 ba 02 00
	00		 mov	 r8d, 698		; 000002baH
  002db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  002e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NKMPINCD@stringio_init?$AA@
  002e9	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ee	85 c0		 test	 eax, eax
  002f0	75 31		 jne	 SHORT $LN18@stringio_i@2
  002f2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002fa	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  00301	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$21037[rsp], rax
  00306	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0030e	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0
  00319	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$21037[rsp]
  0031e	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@stringio_i@2:
  00323	33 c0		 xor	 eax, eax
  00325	85 c0		 test	 eax, eax
  00327	75 83		 jne	 SHORT $LN21@stringio_i@2
$LN17@stringio_i@2:

; 699  :     Py_CLEAR(self->decoder);

  00329	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00331	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00339	74 65		 je	 SHORT $LN14@stringio_i@2
  0033b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00343	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0034b	4c 8b 88 a0 00
	00 00		 mov	 r9, QWORD PTR [rax+160]
  00352	41 b8 bb 02 00
	00		 mov	 r8d, 699		; 000002bbH
  00358	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@MBDKMCIM@?4?4?2Modules?2_io?2stringio?4c?$AA@
  0035f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NKMPINCD@stringio_init?$AA@
  00366	e8 00 00 00 00	 call	 _PyParallel_Guard
  0036b	85 c0		 test	 eax, eax
  0036d	75 31		 jne	 SHORT $LN14@stringio_i@2
  0036f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00377	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0037e	48 89 44 24 78	 mov	 QWORD PTR _py_tmp$21045[rsp], rax
  00383	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0038b	48 c7 80 a0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+160], 0
  00396	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _py_tmp$21045[rsp]
  0039b	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@stringio_i@2:
  003a0	33 c0		 xor	 eax, eax
  003a2	85 c0		 test	 eax, eax
  003a4	75 83		 jne	 SHORT $LN17@stringio_i@2

; 700  : 
; 701  :     assert((newline != NULL && newline_obj != Py_None) ||
; 702  :            (newline == NULL && newline_obj == Py_None));

  003a6	48 83 7c 24 58
	00		 cmp	 QWORD PTR newline$[rsp], 0
  003ac	74 0e		 je	 SHORT $LN39@stringio_i@2
  003ae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  003b5	48 39 44 24 50	 cmp	 QWORD PTR newline_obj$[rsp], rax
  003ba	75 32		 jne	 SHORT $LN41@stringio_i@2
$LN39@stringio_i@2:
  003bc	48 83 7c 24 58
	00		 cmp	 QWORD PTR newline$[rsp], 0
  003c2	75 0e		 jne	 SHORT $LN40@stringio_i@2
  003c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  003cb	48 39 44 24 50	 cmp	 QWORD PTR newline_obj$[rsp], rax
  003d0	74 1c		 je	 SHORT $LN41@stringio_i@2
$LN40@stringio_i@2:
  003d2	41 b8 be 02 00
	00		 mov	 r8d, 702		; 000002beH
  003d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  003df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LG@OMLMLKNL@?$AA?$CI?$AAn?$AAe?$AAw?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAe?$AAw?$AAl?$AAi?$AAn?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?5@
  003e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003ec	33 c0		 xor	 eax, eax
$LN41@stringio_i@2:

; 703  : 
; 704  :     if (newline) {

  003ee	48 83 7c 24 58
	00		 cmp	 QWORD PTR newline$[rsp], 0
  003f4	74 35		 je	 SHORT $LN13@stringio_i@2

; 705  :         self->readnl = PyUnicode_FromString(newline);

  003f6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR newline$[rsp]
  003fb	e8 00 00 00 00	 call	 PyUnicode_FromString
  00400	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00408	48 89 81 a8 00
	00 00		 mov	 QWORD PTR [rcx+168], rax

; 706  :         if (self->readnl == NULL)

  0040f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00417	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  0041f	75 0a		 jne	 SHORT $LN12@stringio_i@2

; 707  :             return -1;

  00421	b8 ff ff ff ff	 mov	 eax, -1
  00426	e9 4d 02 00 00	 jmp	 $LN37@stringio_i@2
$LN12@stringio_i@2:
$LN13@stringio_i@2:

; 708  :     }
; 709  :     self->readuniversal = (newline == NULL || newline[0] == '\0');

  0042b	48 83 7c 24 58
	00		 cmp	 QWORD PTR newline$[rsp], 0
  00431	74 19		 je	 SHORT $LN42@stringio_i@2
  00433	48 8b 44 24 58	 mov	 rax, QWORD PTR newline$[rsp]
  00438	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0043b	85 c0		 test	 eax, eax
  0043d	74 0d		 je	 SHORT $LN42@stringio_i@2
  0043f	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv216[rsp], 0
  0044a	eb 0b		 jmp	 SHORT $LN43@stringio_i@2
$LN42@stringio_i@2:
  0044c	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv216[rsp], 1
$LN43@stringio_i@2:
  00457	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0045f	0f b6 8c 24 80
	00 00 00	 movzx	 ecx, BYTE PTR tv216[rsp]
  00467	88 88 9a 00 00
	00		 mov	 BYTE PTR [rax+154], cl

; 710  :     self->readtranslate = (newline == NULL);

  0046d	48 83 7c 24 58
	00		 cmp	 QWORD PTR newline$[rsp], 0
  00473	75 0d		 jne	 SHORT $LN44@stringio_i@2
  00475	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv220[rsp], 1
  00480	eb 0b		 jmp	 SHORT $LN45@stringio_i@2
$LN44@stringio_i@2:
  00482	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv220[rsp], 0
$LN45@stringio_i@2:
  0048d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00495	0f b6 8c 24 84
	00 00 00	 movzx	 ecx, BYTE PTR tv220[rsp]
  0049d	88 88 9b 00 00
	00		 mov	 BYTE PTR [rax+155], cl

; 711  :     /* If newline == "", we don't translate anything.
; 712  :        If newline == "\n" or newline == None, we translate to "\n", which is
; 713  :        a no-op.
; 714  :        (for newline == None, TextIOWrapper translates to os.sepline, but it
; 715  :        is pointless for StringIO)
; 716  :     */
; 717  :     if (newline != NULL && newline[0] == '\r') {

  004a3	48 83 7c 24 58
	00		 cmp	 QWORD PTR newline$[rsp], 0
  004a9	74 3f		 je	 SHORT $LN11@stringio_i@2
  004ab	48 8b 44 24 58	 mov	 rax, QWORD PTR newline$[rsp]
  004b0	0f be 00	 movsx	 eax, BYTE PTR [rax]
  004b3	83 f8 0d	 cmp	 eax, 13
  004b6	75 32		 jne	 SHORT $LN11@stringio_i@2

; 718  :         self->writenl = self->readnl;

  004b8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004c0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004c8	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  004cf	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx

; 719  :         Py_INCREF(self->writenl);

  004d6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004de	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  004e5	e8 00 00 00 00	 call	 _Py_IncRef
$LN11@stringio_i@2:

; 720  :     }
; 721  : 
; 722  :     if (self->readuniversal) {

  004ea	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004f2	0f be 80 9a 00
	00 00		 movsx	 eax, BYTE PTR [rax+154]
  004f9	85 c0		 test	 eax, eax
  004fb	74 57		 je	 SHORT $LN10@stringio_i@2

; 723  :         self->decoder = PyObject_CallFunction(
; 724  :             (PyObject *)&PyIncrementalNewlineDecoder_Type,
; 725  :             "Oi", Py_None, (int) self->readtranslate);

  004fd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00505	0f be 80 9b 00
	00 00		 movsx	 eax, BYTE PTR [rax+155]
  0050c	44 8b c8	 mov	 r9d, eax
  0050f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00516	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  0051d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyIncrementalNewlineDecoder_Type
  00524	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT
  00529	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00531	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 726  :         if (self->decoder == NULL)

  00538	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00540	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00548	75 0a		 jne	 SHORT $LN9@stringio_i@2

; 727  :             return -1;

  0054a	b8 ff ff ff ff	 mov	 eax, -1
  0054f	e9 24 01 00 00	 jmp	 $LN37@stringio_i@2
$LN9@stringio_i@2:
$LN10@stringio_i@2:

; 728  :     }
; 729  : 
; 730  :     /* Now everything is set up, resize buffer to size of initial value,
; 731  :        and copy it */
; 732  :     self->string_size = 0;

  00554	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0055c	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 733  :     if (value && value != Py_None)

  00564	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  0056a	74 1f		 je	 SHORT $LN8@stringio_i@2
  0056c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00573	48 39 44 24 48	 cmp	 QWORD PTR value$[rsp], rax
  00578	74 11		 je	 SHORT $LN8@stringio_i@2

; 734  :         value_len = PyUnicode_GetLength(value);

  0057a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0057f	e8 00 00 00 00	 call	 PyUnicode_GetLength
  00584	48 89 44 24 60	 mov	 QWORD PTR value_len$[rsp], rax

; 735  :     else

  00589	eb 09		 jmp	 SHORT $LN7@stringio_i@2
$LN8@stringio_i@2:

; 736  :         value_len = 0;

  0058b	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR value_len$[rsp], 0
$LN7@stringio_i@2:

; 737  :     if (value_len > 0) {

  00594	48 83 7c 24 60
	00		 cmp	 QWORD PTR value_len$[rsp], 0
  0059a	7e 5f		 jle	 SHORT $LN6@stringio_i@2

; 738  :         /* This is a heuristic, for newline translation might change
; 739  :            the string length. */
; 740  :         if (resize_buffer(self, 0) < 0)

  0059c	33 d2		 xor	 edx, edx
  0059e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  005a6	e8 00 00 00 00	 call	 resize_buffer
  005ab	85 c0		 test	 eax, eax
  005ad	7d 0a		 jge	 SHORT $LN5@stringio_i@2

; 741  :             return -1;

  005af	b8 ff ff ff ff	 mov	 eax, -1
  005b4	e9 bf 00 00 00	 jmp	 $LN37@stringio_i@2
$LN5@stringio_i@2:

; 742  :         self->state = STATE_REALIZED;

  005b9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005c1	c7 80 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+128], 1

; 743  :         self->pos = 0;

  005cb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005d3	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 744  :         if (write_str(self, value) < 0)

  005db	48 8b 54 24 48	 mov	 rdx, QWORD PTR value$[rsp]
  005e0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  005e8	e8 00 00 00 00	 call	 write_str
  005ed	48 85 c0	 test	 rax, rax
  005f0	7d 07		 jge	 SHORT $LN4@stringio_i@2

; 745  :             return -1;

  005f2	b8 ff ff ff ff	 mov	 eax, -1
  005f7	eb 7f		 jmp	 SHORT $LN37@stringio_i@2
$LN4@stringio_i@2:

; 746  :     }
; 747  :     else {

  005f9	eb 4d		 jmp	 SHORT $LN3@stringio_i@2
$LN6@stringio_i@2:

; 748  :         /* Empty stringio object, we can start by accumulating */
; 749  :         if (resize_buffer(self, 0) < 0)

  005fb	33 d2		 xor	 edx, edx
  005fd	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00605	e8 00 00 00 00	 call	 resize_buffer
  0060a	85 c0		 test	 eax, eax
  0060c	7d 07		 jge	 SHORT $LN2@stringio_i@2

; 750  :             return -1;

  0060e	b8 ff ff ff ff	 mov	 eax, -1
  00613	eb 63		 jmp	 SHORT $LN37@stringio_i@2
$LN2@stringio_i@2:

; 751  :         if (_PyAccu_Init(&self->accu))

  00615	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0061d	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00623	48 8b c8	 mov	 rcx, rax
  00626	e8 00 00 00 00	 call	 _PyAccu_Init
  0062b	85 c0		 test	 eax, eax
  0062d	74 07		 je	 SHORT $LN1@stringio_i@2

; 752  :             return -1;

  0062f	b8 ff ff ff ff	 mov	 eax, -1
  00634	eb 42		 jmp	 SHORT $LN37@stringio_i@2
$LN1@stringio_i@2:

; 753  :         self->state = STATE_ACCUMULATING;

  00636	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0063e	c7 80 80 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+128], 2
$LN3@stringio_i@2:

; 754  :     }
; 755  :     self->pos = 0;

  00648	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00650	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 756  : 
; 757  :     self->closed = 0;

  00658	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00660	c6 80 99 00 00
	00 00		 mov	 BYTE PTR [rax+153], 0

; 758  :     self->ok = 1;

  00667	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0066f	c6 80 98 00 00
	00 01		 mov	 BYTE PTR [rax+152], 1

; 759  :     return 0;

  00676	33 c0		 xor	 eax, eax
$LN37@stringio_i@2:

; 760  : }

  00678	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0067f	c3		 ret	 0
stringio_init ENDP
_TEXT	ENDS
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_seekable DD imagerel stringio_seekable
	DD	imagerel stringio_seekable+116
	DD	imagerel $unwind$stringio_seekable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_seekable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT stringio_seekable
_TEXT	SEGMENT
self$ = 48
args$ = 56
stringio_seekable PROC					; COMDAT

; 775  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 776  :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  0001a	85 c0		 test	 eax, eax
  0001c	7f 17		 jg	 SHORT $LN2@stringio_s@2
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	e8 00 00 00 00	 call	 PyErr_SetString
  00031	33 c0		 xor	 eax, eax
  00033	eb 3a		 jmp	 SHORT $LN3@stringio_s@2
$LN2@stringio_s@2:

; 777  :     CHECK_CLOSED(self);

  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003a	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  00041	85 c0		 test	 eax, eax
  00043	74 17		 je	 SHORT $LN1@stringio_s@2
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00053	e8 00 00 00 00	 call	 PyErr_SetString
  00058	33 c0		 xor	 eax, eax
  0005a	eb 13		 jmp	 SHORT $LN3@stringio_s@2
$LN1@stringio_s@2:

; 778  :     Py_RETURN_TRUE;

  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00063	e8 00 00 00 00	 call	 _Py_IncRef
  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
$LN3@stringio_s@2:

; 779  : }

  0006f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00073	c3		 ret	 0
stringio_seekable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_readable DD imagerel stringio_readable
	DD	imagerel stringio_readable+116
	DD	imagerel $unwind$stringio_readable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_readable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT stringio_readable
_TEXT	SEGMENT
self$ = 48
args$ = 56
stringio_readable PROC					; COMDAT

; 783  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 784  :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  0001a	85 c0		 test	 eax, eax
  0001c	7f 17		 jg	 SHORT $LN2@stringio_r@4
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	e8 00 00 00 00	 call	 PyErr_SetString
  00031	33 c0		 xor	 eax, eax
  00033	eb 3a		 jmp	 SHORT $LN3@stringio_r@4
$LN2@stringio_r@4:

; 785  :     CHECK_CLOSED(self);

  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003a	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  00041	85 c0		 test	 eax, eax
  00043	74 17		 je	 SHORT $LN1@stringio_r@4
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00053	e8 00 00 00 00	 call	 PyErr_SetString
  00058	33 c0		 xor	 eax, eax
  0005a	eb 13		 jmp	 SHORT $LN3@stringio_r@4
$LN1@stringio_r@4:

; 786  :     Py_RETURN_TRUE;

  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00063	e8 00 00 00 00	 call	 _Py_IncRef
  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
$LN3@stringio_r@4:

; 787  : }

  0006f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00073	c3		 ret	 0
stringio_readable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_writable DD imagerel stringio_writable
	DD	imagerel stringio_writable+116
	DD	imagerel $unwind$stringio_writable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_writable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT stringio_writable
_TEXT	SEGMENT
self$ = 48
args$ = 56
stringio_writable PROC					; COMDAT

; 791  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 792  :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  0001a	85 c0		 test	 eax, eax
  0001c	7f 17		 jg	 SHORT $LN2@stringio_w@2
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	e8 00 00 00 00	 call	 PyErr_SetString
  00031	33 c0		 xor	 eax, eax
  00033	eb 3a		 jmp	 SHORT $LN3@stringio_w@2
$LN2@stringio_w@2:

; 793  :     CHECK_CLOSED(self);

  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003a	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  00041	85 c0		 test	 eax, eax
  00043	74 17		 je	 SHORT $LN1@stringio_w@2
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00053	e8 00 00 00 00	 call	 PyErr_SetString
  00058	33 c0		 xor	 eax, eax
  0005a	eb 13		 jmp	 SHORT $LN3@stringio_w@2
$LN1@stringio_w@2:

; 794  :     Py_RETURN_TRUE;

  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00063	e8 00 00 00 00	 call	 _Py_IncRef
  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
$LN3@stringio_w@2:

; 795  : }

  0006f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00073	c3		 ret	 0
stringio_writable ENDP
_TEXT	ENDS
PUBLIC	??_C@_06FPNHJPEK@?$CIOOnN?$CJ?$AA@		; `string'
EXTRN	_Py_BuildValue_SizeT:PROC
EXTRN	PyDict_Copy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_getstate DD imagerel stringio_getstate
	DD	imagerel stringio_getstate+226
	DD	imagerel $unwind$stringio_getstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_getstate DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_06FPNHJPEK@?$CIOOnN?$CJ?$AA@
CONST	SEGMENT
??_C@_06FPNHJPEK@?$CIOOnN?$CJ?$AA@ DB '(OOnN)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_getstate
_TEXT	SEGMENT
dict$ = 48
initvalue$ = 56
state$ = 64
tv81 = 72
self$ = 96
stringio_getstate PROC					; COMDAT

; 811  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 812  :     PyObject *initvalue = stringio_getvalue(self);

  00009	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 stringio_getvalue
  00013	48 89 44 24 38	 mov	 QWORD PTR initvalue$[rsp], rax

; 813  :     PyObject *dict;
; 814  :     PyObject *state;
; 815  : 
; 816  :     if (initvalue == NULL)

  00018	48 83 7c 24 38
	00		 cmp	 QWORD PTR initvalue$[rsp], 0
  0001e	75 07		 jne	 SHORT $LN4@stringio_g@2

; 817  :         return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	e9 b6 00 00 00	 jmp	 $LN5@stringio_g@2
$LN4@stringio_g@2:

; 818  :     if (self->dict == NULL) {

  00027	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0002c	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00034	75 1a		 jne	 SHORT $LN3@stringio_g@2

; 819  :         Py_INCREF(Py_None);

  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0003d	e8 00 00 00 00	 call	 _Py_IncRef

; 820  :         dict = Py_None;

  00042	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00049	48 89 44 24 30	 mov	 QWORD PTR dict$[rsp], rax

; 821  :     }
; 822  :     else {

  0004e	eb 22		 jmp	 SHORT $LN2@stringio_g@2
$LN3@stringio_g@2:

; 823  :         dict = PyDict_Copy(self->dict);

  00050	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00055	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0005c	e8 00 00 00 00	 call	 PyDict_Copy
  00061	48 89 44 24 30	 mov	 QWORD PTR dict$[rsp], rax

; 824  :         if (dict == NULL)

  00066	48 83 7c 24 30
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0006c	75 04		 jne	 SHORT $LN1@stringio_g@2

; 825  :             return NULL;

  0006e	33 c0		 xor	 eax, eax
  00070	eb 6b		 jmp	 SHORT $LN5@stringio_g@2
$LN1@stringio_g@2:
$LN2@stringio_g@2:

; 826  :     }
; 827  : 
; 828  :     state = Py_BuildValue("(OOnN)", initvalue,
; 829  :                           self->readnl ? self->readnl : Py_None,
; 830  :                           self->pos, dict);

  00072	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00077	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  0007f	74 13		 je	 SHORT $LN7@stringio_g@2
  00081	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00086	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  0008d	48 89 44 24 48	 mov	 QWORD PTR tv81[rsp], rax
  00092	eb 0c		 jmp	 SHORT $LN8@stringio_g@2
$LN7@stringio_g@2:
  00094	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0009b	48 89 44 24 48	 mov	 QWORD PTR tv81[rsp], rax
$LN8@stringio_g@2:
  000a0	48 8b 44 24 30	 mov	 rax, QWORD PTR dict$[rsp]
  000a5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000aa	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000af	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  000b3	4c 8b 44 24 48	 mov	 r8, QWORD PTR tv81[rsp]
  000b8	48 8b 54 24 38	 mov	 rdx, QWORD PTR initvalue$[rsp]
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FPNHJPEK@?$CIOOnN?$CJ?$AA@
  000c4	e8 00 00 00 00	 call	 _Py_BuildValue_SizeT
  000c9	48 89 44 24 40	 mov	 QWORD PTR state$[rsp], rax

; 831  :     Py_DECREF(initvalue);

  000ce	48 8b 4c 24 38	 mov	 rcx, QWORD PTR initvalue$[rsp]
  000d3	e8 00 00 00 00	 call	 _Py_DecRef

; 832  :     return state;

  000d8	48 8b 44 24 40	 mov	 rax, QWORD PTR state$[rsp]
$LN5@stringio_g@2:

; 833  : }

  000dd	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e1	c3		 ret	 0
stringio_getstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@JKPKACMP@fourth?5item?5of?5state?5should?5be?5a@ ; `string'
PUBLIC	??_C@_0CC@PHIJAEHN@position?5value?5cannot?5be?5negativ@ ; `string'
PUBLIC	??_C@_0DD@NIONAAAA@third?5item?5of?5state?5must?5be?5an?5i@ ; `string'
PUBLIC	??_C@_1DC@JIEGLAEH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DL@OLKILEH@?$CF?4200s?4__setstate__?5argument?5sho@ ; `string'
PUBLIC	??_C@_1BM@MIMANDHC@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
EXTRN	PyDict_Update:PROC
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	memcpy:PROC
EXTRN	PyUnicode_AsUCS4Copy:PROC
EXTRN	PyTuple_GetSlice:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_setstate DD imagerel stringio_setstate
	DD	imagerel stringio_setstate+875
	DD	imagerel $unwind$stringio_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_setstate DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0DE@JKPKACMP@fourth?5item?5of?5state?5should?5be?5a@
CONST	SEGMENT
??_C@_0DE@JKPKACMP@fourth?5item?5of?5state?5should?5be?5a@ DB 'fourth ite'
	DB	'm of state should be a dict, got a %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PHIJAEHN@position?5value?5cannot?5be?5negativ@
CONST	SEGMENT
??_C@_0CC@PHIJAEHN@position?5value?5cannot?5be?5negativ@ DB 'position val'
	DB	'ue cannot be negative', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NIONAAAA@third?5item?5of?5state?5must?5be?5an?5i@
CONST	SEGMENT
??_C@_0DD@NIONAAAA@third?5item?5of?5state?5must?5be?5an?5i@ DB 'third ite'
	DB	'm of state must be an integer, got %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@JIEGLAEH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@JIEGLAEH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@OLKILEH@?$CF?4200s?4__setstate__?5argument?5sho@
CONST	SEGMENT
??_C@_0DL@OLKILEH@?$CF?4200s?4__setstate__?5argument?5sho@ DB '%.200s.__s'
	DB	'etstate__ argument should be 4-tuple, got %.200s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@MIMANDHC@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@MIMANDHC@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT stringio_setstate
_TEXT	SEGMENT
position_obj$ = 32
dict$ = 40
initarg$ = 48
pos$ = 56
bufsize$21169 = 64
buf$21168 = 72
item$21167 = 80
self$ = 112
state$ = 120
stringio_setstate PROC					; COMDAT

; 837  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 838  :     PyObject *initarg;
; 839  :     PyObject *position_obj;
; 840  :     PyObject *dict;
; 841  :     Py_ssize_t pos;
; 842  : 
; 843  :     assert(state != NULL);

  0000e	48 83 7c 24 78
	00		 cmp	 QWORD PTR state$[rsp], 0
  00014	75 1c		 jne	 SHORT $LN18@stringio_s@3
  00016	41 b8 4b 03 00
	00		 mov	 r8d, 843		; 0000034bH
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@MIMANDHC@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00030	33 c0		 xor	 eax, eax
$LN18@stringio_s@3:

; 844  :     CHECK_CLOSED(self);

  00032	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00037	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  0003e	85 c0		 test	 eax, eax
  00040	74 1a		 je	 SHORT $LN15@stringio_s@3
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00050	e8 00 00 00 00	 call	 PyErr_SetString
  00055	33 c0		 xor	 eax, eax
  00057	e9 0a 03 00 00	 jmp	 $LN16@stringio_s@3
$LN15@stringio_s@3:

; 845  : 
; 846  :     /* We allow the state tuple to be longer than 4, because we may need
; 847  :        someday to extend the object's state without breaking
; 848  :        backward-compatibility. */
; 849  :     if (!PyTuple_Check(state) || Py_SIZE(state) < 4) {

  0005c	48 8b 44 24 78	 mov	 rax, QWORD PTR state$[rsp]
  00061	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00065	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0006b	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00070	85 c0		 test	 eax, eax
  00072	74 0c		 je	 SHORT $LN13@stringio_s@3
  00074	48 8b 44 24 78	 mov	 rax, QWORD PTR state$[rsp]
  00079	48 83 78 60 04	 cmp	 QWORD PTR [rax+96], 4
  0007e	7d 34		 jge	 SHORT $LN14@stringio_s@3
$LN13@stringio_s@3:

; 850  :         PyErr_Format(PyExc_TypeError,
; 851  :                      "%.200s.__setstate__ argument should be 4-tuple, got %.200s",
; 852  :                      Py_TYPE(self)->tp_name, Py_TYPE(state)->tp_name);

  00080	48 8b 44 24 78	 mov	 rax, QWORD PTR state$[rsp]
  00085	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00089	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  0008e	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00092	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00096	4c 8b 41 70	 mov	 r8, QWORD PTR [rcx+112]
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DL@OLKILEH@?$CF?4200s?4__setstate__?5argument?5sho@
  000a1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a8	e8 00 00 00 00	 call	 PyErr_Format

; 853  :         return NULL;

  000ad	33 c0		 xor	 eax, eax
  000af	e9 b2 02 00 00	 jmp	 $LN16@stringio_s@3
$LN14@stringio_s@3:

; 854  :     }
; 855  : 
; 856  :     /* Initialize the object's state. */
; 857  :     initarg = PyTuple_GetSlice(state, 0, 2);

  000b4	41 b8 02 00 00
	00		 mov	 r8d, 2
  000ba	33 d2		 xor	 edx, edx
  000bc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR state$[rsp]
  000c1	e8 00 00 00 00	 call	 PyTuple_GetSlice
  000c6	48 89 44 24 30	 mov	 QWORD PTR initarg$[rsp], rax

; 858  :     if (initarg == NULL)

  000cb	48 83 7c 24 30
	00		 cmp	 QWORD PTR initarg$[rsp], 0
  000d1	75 07		 jne	 SHORT $LN12@stringio_s@3

; 859  :         return NULL;

  000d3	33 c0		 xor	 eax, eax
  000d5	e9 8c 02 00 00	 jmp	 $LN16@stringio_s@3
$LN12@stringio_s@3:

; 860  :     if (stringio_init(self, initarg, NULL) < 0) {

  000da	45 33 c0	 xor	 r8d, r8d
  000dd	48 8b 54 24 30	 mov	 rdx, QWORD PTR initarg$[rsp]
  000e2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  000e7	e8 00 00 00 00	 call	 stringio_init
  000ec	85 c0		 test	 eax, eax
  000ee	7d 11		 jge	 SHORT $LN11@stringio_s@3

; 861  :         Py_DECREF(initarg);

  000f0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR initarg$[rsp]
  000f5	e8 00 00 00 00	 call	 _Py_DecRef

; 862  :         return NULL;

  000fa	33 c0		 xor	 eax, eax
  000fc	e9 65 02 00 00	 jmp	 $LN16@stringio_s@3
$LN11@stringio_s@3:

; 863  :     }
; 864  :     Py_DECREF(initarg);

  00101	48 8b 4c 24 30	 mov	 rcx, QWORD PTR initarg$[rsp]
  00106	e8 00 00 00 00	 call	 _Py_DecRef

; 865  : 
; 866  :     /* Restore the buffer state. Even if __init__ did initialize the buffer,
; 867  :        we have to initialize it again since __init__ may translates the
; 868  :        newlines in the inital_value string. We clearly do not want that
; 869  :        because the string value in the state tuple has already been translated
; 870  :        once by __init__. So we do not take any chance and replace object's
; 871  :        buffer completely. */
; 872  :     {
; 873  :         PyObject *item;
; 874  :         Py_UCS4 *buf;
; 875  :         Py_ssize_t bufsize;
; 876  : 
; 877  :         item = PyTuple_GET_ITEM(state, 0);

  0010b	48 8b 44 24 78	 mov	 rax, QWORD PTR state$[rsp]
  00110	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00114	48 89 44 24 50	 mov	 QWORD PTR item$21167[rsp], rax

; 878  :         buf = PyUnicode_AsUCS4Copy(item);

  00119	48 8b 4c 24 50	 mov	 rcx, QWORD PTR item$21167[rsp]
  0011e	e8 00 00 00 00	 call	 PyUnicode_AsUCS4Copy
  00123	48 89 44 24 48	 mov	 QWORD PTR buf$21168[rsp], rax

; 879  :         if (buf == NULL)

  00128	48 83 7c 24 48
	00		 cmp	 QWORD PTR buf$21168[rsp], 0
  0012e	75 07		 jne	 SHORT $LN10@stringio_s@3

; 880  :             return NULL;

  00130	33 c0		 xor	 eax, eax
  00132	e9 2f 02 00 00	 jmp	 $LN16@stringio_s@3
$LN10@stringio_s@3:

; 881  :         bufsize = PyUnicode_GET_LENGTH(item);

  00137	48 8b 44 24 50	 mov	 rax, QWORD PTR item$21167[rsp]
  0013c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00140	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00146	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0014b	85 c0		 test	 eax, eax
  0014d	75 1c		 jne	 SHORT $LN19@stringio_s@3
  0014f	41 b8 71 03 00
	00		 mov	 r8d, 881		; 00000371H
  00155	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00169	33 c0		 xor	 eax, eax
$LN19@stringio_s@3:
  0016b	48 8b 44 24 50	 mov	 rax, QWORD PTR item$21167[rsp]
  00170	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00173	c1 e8 07	 shr	 eax, 7
  00176	83 e0 01	 and	 eax, 1
  00179	85 c0		 test	 eax, eax
  0017b	75 1c		 jne	 SHORT $LN20@stringio_s@3
  0017d	41 b8 71 03 00
	00		 mov	 r8d, 881		; 00000371H
  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@MHGHOABF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@JIEGLAEH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
  00191	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00197	33 c0		 xor	 eax, eax
$LN20@stringio_s@3:
  00199	48 8b 44 24 50	 mov	 rax, QWORD PTR item$21167[rsp]
  0019e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001a2	48 89 44 24 40	 mov	 QWORD PTR bufsize$21169[rsp], rax

; 882  : 
; 883  :         if (resize_buffer(self, bufsize) < 0) {

  001a7	48 8b 54 24 40	 mov	 rdx, QWORD PTR bufsize$21169[rsp]
  001ac	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  001b1	e8 00 00 00 00	 call	 resize_buffer
  001b6	85 c0		 test	 eax, eax
  001b8	7d 11		 jge	 SHORT $LN9@stringio_s@3

; 884  :             PyMem_Free(buf);

  001ba	48 8b 4c 24 48	 mov	 rcx, QWORD PTR buf$21168[rsp]
  001bf	e8 00 00 00 00	 call	 PyMem_Free

; 885  :             return NULL;

  001c4	33 c0		 xor	 eax, eax
  001c6	e9 9b 01 00 00	 jmp	 $LN16@stringio_s@3
$LN9@stringio_s@3:

; 886  :         }
; 887  :         memcpy(self->buf, buf, bufsize * sizeof(Py_UCS4));

  001cb	48 8b 44 24 40	 mov	 rax, QWORD PTR bufsize$21169[rsp]
  001d0	48 c1 e0 02	 shl	 rax, 2
  001d4	4c 8b c0	 mov	 r8, rax
  001d7	48 8b 54 24 48	 mov	 rdx, QWORD PTR buf$21168[rsp]
  001dc	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  001e1	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  001e5	e8 00 00 00 00	 call	 memcpy

; 888  :         PyMem_Free(buf);

  001ea	48 8b 4c 24 48	 mov	 rcx, QWORD PTR buf$21168[rsp]
  001ef	e8 00 00 00 00	 call	 PyMem_Free

; 889  :         self->string_size = bufsize;

  001f4	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  001f9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR bufsize$21169[rsp]
  001fe	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 890  :     }
; 891  : 
; 892  :     /* Set carefully the position value. Alternatively, we could use the seek
; 893  :        method instead of modifying self->pos directly to better protect the
; 894  :        object internal state against errneous (or malicious) inputs. */
; 895  :     position_obj = PyTuple_GET_ITEM(state, 2);

  00202	48 8b 44 24 78	 mov	 rax, QWORD PTR state$[rsp]
  00207	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0020e	48 89 44 24 20	 mov	 QWORD PTR position_obj$[rsp], rax

; 896  :     if (!PyLong_Check(position_obj)) {

  00213	48 8b 44 24 20	 mov	 rax, QWORD PTR position_obj$[rsp]
  00218	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0021c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00222	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00227	85 c0		 test	 eax, eax
  00229	75 27		 jne	 SHORT $LN8@stringio_s@3

; 897  :         PyErr_Format(PyExc_TypeError,
; 898  :                      "third item of state must be an integer, got %.200s",
; 899  :                      Py_TYPE(position_obj)->tp_name);

  0022b	48 8b 44 24 20	 mov	 rax, QWORD PTR position_obj$[rsp]
  00230	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00234	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00238	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@NIONAAAA@third?5item?5of?5state?5must?5be?5an?5i@
  0023f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00246	e8 00 00 00 00	 call	 PyErr_Format

; 900  :         return NULL;

  0024b	33 c0		 xor	 eax, eax
  0024d	e9 14 01 00 00	 jmp	 $LN16@stringio_s@3
$LN8@stringio_s@3:

; 901  :     }
; 902  :     pos = PyLong_AsSsize_t(position_obj);

  00252	48 8b 4c 24 20	 mov	 rcx, QWORD PTR position_obj$[rsp]
  00257	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  0025c	48 89 44 24 38	 mov	 QWORD PTR pos$[rsp], rax

; 903  :     if (pos == -1 && PyErr_Occurred())

  00261	48 83 7c 24 38
	ff		 cmp	 QWORD PTR pos$[rsp], -1
  00267	75 11		 jne	 SHORT $LN7@stringio_s@3
  00269	e8 00 00 00 00	 call	 PyErr_Occurred
  0026e	48 85 c0	 test	 rax, rax
  00271	74 07		 je	 SHORT $LN7@stringio_s@3

; 904  :         return NULL;

  00273	33 c0		 xor	 eax, eax
  00275	e9 ec 00 00 00	 jmp	 $LN16@stringio_s@3
$LN7@stringio_s@3:

; 905  :     if (pos < 0) {

  0027a	48 83 7c 24 38
	00		 cmp	 QWORD PTR pos$[rsp], 0
  00280	7d 1a		 jge	 SHORT $LN6@stringio_s@3

; 906  :         PyErr_SetString(PyExc_ValueError,
; 907  :                         "position value cannot be negative");

  00282	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@PHIJAEHN@position?5value?5cannot?5be?5negativ@
  00289	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00290	e8 00 00 00 00	 call	 PyErr_SetString

; 908  :         return NULL;

  00295	33 c0		 xor	 eax, eax
  00297	e9 ca 00 00 00	 jmp	 $LN16@stringio_s@3
$LN6@stringio_s@3:

; 909  :     }
; 910  :     self->pos = pos;

  0029c	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  002a1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pos$[rsp]
  002a6	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 911  : 
; 912  :     /* Set the dictionary of the instance variables. */
; 913  :     dict = PyTuple_GET_ITEM(state, 3);

  002aa	48 8b 44 24 78	 mov	 rax, QWORD PTR state$[rsp]
  002af	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  002b6	48 89 44 24 28	 mov	 QWORD PTR dict$[rsp], rax

; 914  :     if (dict != Py_None) {

  002bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  002c2	48 39 44 24 28	 cmp	 QWORD PTR dict$[rsp], rax
  002c7	0f 84 86 00 00
	00		 je	 $LN5@stringio_s@3

; 915  :         if (!PyDict_Check(dict)) {

  002cd	48 8b 44 24 28	 mov	 rax, QWORD PTR dict$[rsp]
  002d2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002d6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002dc	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  002e1	85 c0		 test	 eax, eax
  002e3	75 24		 jne	 SHORT $LN4@stringio_s@3

; 916  :             PyErr_Format(PyExc_TypeError,
; 917  :                          "fourth item of state should be a dict, got a %.200s",
; 918  :                          Py_TYPE(dict)->tp_name);

  002e5	48 8b 44 24 28	 mov	 rax, QWORD PTR dict$[rsp]
  002ea	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002ee	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  002f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@JKPKACMP@fourth?5item?5of?5state?5should?5be?5a@
  002f9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00300	e8 00 00 00 00	 call	 PyErr_Format

; 919  :             return NULL;

  00305	33 c0		 xor	 eax, eax
  00307	eb 5d		 jmp	 SHORT $LN16@stringio_s@3
$LN4@stringio_s@3:

; 920  :         }
; 921  :         if (self->dict) {

  00309	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0030e	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00316	74 20		 je	 SHORT $LN3@stringio_s@3

; 922  :             /* Alternatively, we could replace the internal dictionary
; 923  :                completely. However, it seems more practical to just update it. */
; 924  :             if (PyDict_Update(self->dict, dict) < 0)

  00318	48 8b 54 24 28	 mov	 rdx, QWORD PTR dict$[rsp]
  0031d	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00322	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00329	e8 00 00 00 00	 call	 PyDict_Update
  0032e	85 c0		 test	 eax, eax
  00330	7d 04		 jge	 SHORT $LN2@stringio_s@3

; 925  :                 return NULL;

  00332	33 c0		 xor	 eax, eax
  00334	eb 30		 jmp	 SHORT $LN16@stringio_s@3
$LN2@stringio_s@3:

; 926  :         }
; 927  :         else {

  00336	eb 1b		 jmp	 SHORT $LN1@stringio_s@3
$LN3@stringio_s@3:

; 928  :             Py_INCREF(dict);

  00338	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  0033d	e8 00 00 00 00	 call	 _Py_IncRef

; 929  :             self->dict = dict;

  00342	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00347	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  0034c	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx
$LN1@stringio_s@3:
$LN5@stringio_s@3:

; 930  :         }
; 931  :     }
; 932  : 
; 933  :     Py_RETURN_NONE;

  00353	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0035a	e8 00 00 00 00	 call	 _Py_IncRef
  0035f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN16@stringio_s@3:

; 934  : }

  00366	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0036a	c3		 ret	 0
stringio_setstate ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_closed DD imagerel stringio_closed
	DD	imagerel stringio_closed+77
	DD	imagerel $unwind$stringio_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_closed DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT stringio_closed
_TEXT	SEGMENT
self$ = 48
context$ = 56
stringio_closed PROC					; COMDAT

; 939  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 940  :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  0001a	85 c0		 test	 eax, eax
  0001c	7f 17		 jg	 SHORT $LN1@stringio_c@3
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	e8 00 00 00 00	 call	 PyErr_SetString
  00031	33 c0		 xor	 eax, eax
  00033	eb 13		 jmp	 SHORT $LN2@stringio_c@3
$LN1@stringio_c@3:

; 941  :     return PyBool_FromLong(self->closed);

  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003a	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 PyBool_FromLong
$LN2@stringio_c@3:

; 942  : }

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
stringio_closed ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_line_buffering DD imagerel stringio_line_buffering
	DD	imagerel stringio_line_buffering+116
	DD	imagerel $unwind$stringio_line_buffering
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_line_buffering DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT stringio_line_buffering
_TEXT	SEGMENT
self$ = 48
context$ = 56
stringio_line_buffering PROC				; COMDAT

; 946  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 947  :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  0001a	85 c0		 test	 eax, eax
  0001c	7f 17		 jg	 SHORT $LN2@stringio_l
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	e8 00 00 00 00	 call	 PyErr_SetString
  00031	33 c0		 xor	 eax, eax
  00033	eb 3a		 jmp	 SHORT $LN3@stringio_l
$LN2@stringio_l:

; 948  :     CHECK_CLOSED(self);

  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003a	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  00041	85 c0		 test	 eax, eax
  00043	74 17		 je	 SHORT $LN1@stringio_l
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00053	e8 00 00 00 00	 call	 PyErr_SetString
  00058	33 c0		 xor	 eax, eax
  0005a	eb 13		 jmp	 SHORT $LN3@stringio_l
$LN1@stringio_l:

; 949  :     Py_RETURN_FALSE;

  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00063	e8 00 00 00 00	 call	 _Py_IncRef
  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
$LN3@stringio_l:

; 950  : }

  0006f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00073	c3		 ret	 0
stringio_line_buffering ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttr:PROC
EXTRN	_PyIO_str_newlines:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$stringio_newlines DD imagerel stringio_newlines
	DD	imagerel stringio_newlines+157
	DD	imagerel $unwind$stringio_newlines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stringio_newlines DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT stringio_newlines
_TEXT	SEGMENT
self$ = 48
context$ = 56
stringio_newlines PROC					; COMDAT

; 954  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 955  :     CHECK_INITIALIZED(self);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	0f be 80 98 00
	00 00		 movsx	 eax, BYTE PTR [rax+152]
  0001a	85 c0		 test	 eax, eax
  0001c	7f 17		 jg	 SHORT $LN3@stringio_n@2
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00025	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002c	e8 00 00 00 00	 call	 PyErr_SetString
  00031	33 c0		 xor	 eax, eax
  00033	eb 63		 jmp	 SHORT $LN4@stringio_n@2
$LN3@stringio_n@2:

; 956  :     CHECK_CLOSED(self);

  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003a	0f be 80 99 00
	00 00		 movsx	 eax, BYTE PTR [rax+153]
  00041	85 c0		 test	 eax, eax
  00043	74 17		 je	 SHORT $LN2@stringio_n@2
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@EBOEDLCG@I?1O?5operation?5on?5closed?5file?$AA@
  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00053	e8 00 00 00 00	 call	 PyErr_SetString
  00058	33 c0		 xor	 eax, eax
  0005a	eb 3c		 jmp	 SHORT $LN4@stringio_n@2
$LN2@stringio_n@2:

; 957  :     if (self->decoder == NULL)

  0005c	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00061	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00069	75 15		 jne	 SHORT $LN1@stringio_n@2

; 958  :         Py_RETURN_NONE;

  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00072	e8 00 00 00 00	 call	 _Py_IncRef
  00077	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0007e	eb 18		 jmp	 SHORT $LN4@stringio_n@2
$LN1@stringio_n@2:

; 959  :     return PyObject_GetAttr(self->decoder, _PyIO_str_newlines);

  00080	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_newlines
  00087	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0008c	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  00093	e8 00 00 00 00	 call	 PyObject_GetAttr
$LN4@stringio_n@2:

; 960  : }

  00098	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009c	c3		 ret	 0
stringio_newlines ENDP
_TEXT	ENDS
END
