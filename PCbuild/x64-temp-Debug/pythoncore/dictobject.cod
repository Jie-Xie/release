; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@CKNECNBG@?$DMdummy?5key?$DO?5type?$AA@ ; `string'
PUBLIC	??_C@_0M@JJEDNKGI@dict_values?$AA@		; `string'
PUBLIC	??_C@_0L@KKKCFCKM@dict_items?$AA@		; `string'
PUBLIC	??_C@_09DCAKNFLJ@dict_keys?$AA@			; `string'
PUBLIC	??_C@_0L@EMANFHEK@isdisjoint?$AA@		; `string'
PUBLIC	??_C@_0BM@OJODNHLP@symmetric_difference_update?$AA@ ; `string'
PUBLIC	??_C@_0BE@EMPOGGNJ@intersection_update?$AA@	; `string'
PUBLIC	??_C@_0BC@LNEPHBNC@difference_update?$AA@	; `string'
PUBLIC	??_C@_0BC@HJGBEDCD@dict_itemiterator?$AA@	; `string'
PUBLIC	??_C@_0BD@EEPKNHCO@dict_valueiterator?$AA@	; `string'
PUBLIC	??_C@_0BB@HHJBMJDG@dict_keyiterator?$AA@	; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_04BCIDKIGN@dict?$AA@			; `string'
PUBLIC	PyDict_Contains
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
PUBLIC	??_C@_05MEHLAELG@clear?$AA@			; `string'
PUBLIC	??_C@_08KMEGJNJN@fromkeys?$AA@			; `string'
PUBLIC	??_C@_06HDLLMMEJ@update?$AA@			; `string'
PUBLIC	??_C@_06GEKOPAHD@values?$AA@			; `string'
PUBLIC	??_C@_05CFHBDDLG@items?$AA@			; `string'
PUBLIC	??_C@_07KOGBLOBN@popitem?$AA@			; `string'
PUBLIC	??_C@_03NJDAHFJE@pop?$AA@			; `string'
PUBLIC	??_C@_0L@MIJGIGKN@setdefault?$AA@		; `string'
PUBLIC	??_C@_03HNAFFKGA@get?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_0M@GAJGCIJD@__getitem__?$AA@		; `string'
PUBLIC	??_C@_0N@MCIOADFH@__contains__?$AA@		; `string'
PUBLIC	??_C@_04IEPFDAGF@keys?$AA@			; `string'
PUBLIC	??_C@_0M@PPMOEBOH@__missing__?$AA@		; `string'
PUBLIC	PyDict_Type
PUBLIC	PyDictIterKey_Type
PUBLIC	PyDictIterValue_Type
PUBLIC	PyDictIterItem_Type
PUBLIC	PyDictKeys_Type
PUBLIC	PyDictItems_Type
PUBLIC	PyDictValues_Type
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyObject_HashNotImplemented:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
numfree	DD	01H DUP (?)
	ALIGN	8

empty_values DQ	01H DUP (?)
dictvalues_methods DB 020H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BB@CKNECNBG@?$DMdummy?5key?$DO?5type?$AA@
CONST	SEGMENT
??_C@_0BB@CKNECNBG@?$DMdummy?5key?$DO?5type?$AA@ DB '<dummy key> type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JJEDNKGI@dict_values?$AA@
CONST	SEGMENT
??_C@_0M@JJEDNKGI@dict_values?$AA@ DB 'dict_values', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KKKCFCKM@dict_items?$AA@
CONST	SEGMENT
??_C@_0L@KKKCFCKM@dict_items?$AA@ DB 'dict_items', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DCAKNFLJ@dict_keys?$AA@
CONST	SEGMENT
??_C@_09DCAKNFLJ@dict_keys?$AA@ DB 'dict_keys', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EMANFHEK@isdisjoint?$AA@
CONST	SEGMENT
??_C@_0L@EMANFHEK@isdisjoint?$AA@ DB 'isdisjoint', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OJODNHLP@symmetric_difference_update?$AA@
CONST	SEGMENT
??_C@_0BM@OJODNHLP@symmetric_difference_update?$AA@ DB 'symmetric_differe'
	DB	'nce_update', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EMPOGGNJ@intersection_update?$AA@
CONST	SEGMENT
??_C@_0BE@EMPOGGNJ@intersection_update?$AA@ DB 'intersection_update', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LNEPHBNC@difference_update?$AA@
CONST	SEGMENT
??_C@_0BC@LNEPHBNC@difference_update?$AA@ DB 'difference_update', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HJGBEDCD@dict_itemiterator?$AA@
CONST	SEGMENT
??_C@_0BC@HJGBEDCD@dict_itemiterator?$AA@ DB 'dict_itemiterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EEPKNHCO@dict_valueiterator?$AA@
CONST	SEGMENT
??_C@_0BD@EEPKNHCO@dict_valueiterator?$AA@ DB 'dict_valueiterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HHJBMJDG@dict_keyiterator?$AA@
CONST	SEGMENT
??_C@_0BB@HHJBMJDG@dict_keyiterator?$AA@ DB 'dict_keyiterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCIDKIGN@dict?$AA@
CONST	SEGMENT
??_C@_04BCIDKIGN@dict?$AA@ DB 'dict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHLAELG@clear?$AA@
CONST	SEGMENT
??_C@_05MEHLAELG@clear?$AA@ DB 'clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KMEGJNJN@fromkeys?$AA@
CONST	SEGMENT
??_C@_08KMEGJNJN@fromkeys?$AA@ DB 'fromkeys', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDLLMMEJ@update?$AA@
CONST	SEGMENT
??_C@_06HDLLMMEJ@update?$AA@ DB 'update', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEKOPAHD@values?$AA@
CONST	SEGMENT
??_C@_06GEKOPAHD@values?$AA@ DB 'values', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFHBDDLG@items?$AA@
CONST	SEGMENT
??_C@_05CFHBDDLG@items?$AA@ DB 'items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOGBLOBN@popitem?$AA@
CONST	SEGMENT
??_C@_07KOGBLOBN@popitem?$AA@ DB 'popitem', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJDAHFJE@pop?$AA@
CONST	SEGMENT
??_C@_03NJDAHFJE@pop?$AA@ DB 'pop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIJGIGKN@setdefault?$AA@
CONST	SEGMENT
??_C@_0L@MIJGIGKN@setdefault?$AA@ DB 'setdefault', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HNAFFKGA@get?$AA@
CONST	SEGMENT
??_C@_03HNAFFKGA@get?$AA@ DB 'get', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAJGCIJD@__getitem__?$AA@
CONST	SEGMENT
??_C@_0M@GAJGCIJD@__getitem__?$AA@ DB '__getitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MCIOADFH@__contains__?$AA@
CONST	SEGMENT
??_C@_0N@MCIOADFH@__contains__?$AA@ DB '__contains__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEPFDAGF@keys?$AA@
CONST	SEGMENT
??_C@_04IEPFDAGF@keys?$AA@ DB 'keys', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_symmetric_difference_update@?1??dictviews_xor@@9@9 DQ 0000000000000000H ; `dictviews_xor'::`2'::PyId_symmetric_difference_update
	DQ	FLAT:??_C@_0BM@OJODNHLP@symmetric_difference_update?$AA@
	DQ	0000000000000000H
?PyId_update@?1??dictviews_or@@9@9 DQ 0000000000000000H	; `dictviews_or'::`2'::PyId_update
	DQ	FLAT:??_C@_06HDLLMMEJ@update?$AA@
	DQ	0000000000000000H
?PyId_intersection_update@?1??dictviews_and@@9@9 DQ 0000000000000000H ; `dictviews_and'::`2'::PyId_intersection_update
	DQ	FLAT:??_C@_0BE@EMPOGGNJ@intersection_update?$AA@
	DQ	0000000000000000H
?PyId_difference_update@?1??dictviews_sub@@9@9 DQ 0000000000000000H ; `dictviews_sub'::`2'::PyId_difference_update
	DQ	FLAT:??_C@_0BC@LNEPHBNC@difference_update?$AA@
	DQ	0000000000000000H
?PyId_keys@?2??dict_update_common@@9@9 DQ 0000000000000000H ; `dict_update_common'::`3'::PyId_keys
	DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	0000000000000000H
?PyId___missing__@?4??dict_subscript@@9@9 DQ 0000000000000000H ; `dict_subscript'::`5'::PyId___missing__
	DQ	FLAT:??_C@_0M@PPMOEBOH@__missing__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0M@PPMOEBOH@__missing__?$AA@
CONST	SEGMENT
??_C@_0M@PPMOEBOH@__missing__?$AA@ DB '__missing__', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
empty_keys_struct DQ 0000000000000002H
	DQ	0000000000000001H
	DQ	FLAT:lookdict_split
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
dict_as_mapping DQ FLAT:dict_length
	DQ	FLAT:dict_subscript
	DQ	FLAT:dict_ass_sub
contains__doc__ DB 'D.__contains__(k) -> True if D has a key k, else Fals'
	DB	'e', 00H
	ORG $+1
getitem__doc__ DB 'x.__getitem__(y) <==> x[y]', 00H
	ORG $+5
sizeof__doc__ DB 'D.__sizeof__() -> size of D in memory, in bytes', 00H
get__doc__ DB	'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to N'
	DB	'one.', 00H
	ORG $+11
setdefault_doc__ DB 'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i'
	DB	'f k not in D', 00H
	ORG $+15
pop__doc__ DB	'D.pop(k[,d]) -> v, remove specified key and return the c'
	DB	'orresponding value.', 0aH, 'If key is not found, d is returne'
	DB	'd if given, otherwise KeyError is raised', 00H
	ORG $+10
popitem__doc__ DB 'D.popitem() -> (k, v), remove and return some (key, va'
	DB	'lue) pair as a', 0aH, '2-tuple; but raise KeyError if D is em'
	DB	'pty.', 00H
update__doc__ DB 'D.update([E, ]**F) -> None.  Update D from dict/iterabl'
	DB	'e E and F.', 0aH, 'If E present and has a .keys() method, doe'
	DB	's:     for k in E: D[k] = E[k]', 0aH, 'If E present and lacks'
	DB	' .keys() method, does:     for (k, v) in E: D[k] = v', 0aH, 'I'
	DB	'n either case, this is followed by: for k in F: D[k] = F[k]', 00H
	ORG $+13
fromkeys__doc__ DB 'dict.fromkeys(S[,v]) -> New dict with keys from S and'
	DB	' values equal to v.', 0aH, 'v defaults to None.', 00H
	ORG $+3
clear__doc__ DB	'D.clear() -> None.  Remove all items from D.', 00H
	ORG $+3
copy__doc__ DB	'D.copy() -> a shallow copy of D', 00H
keys__doc__ DB	'D.keys() -> a set-like object providing a view on D''s k'
	DB	'eys', 00H
	ORG $+5
items__doc__ DB	'D.items() -> a set-like object providing a view on D''s '
	DB	'items', 00H
	ORG $+3
values__doc__ DB 'D.values() -> an object providing a view on D''s values'
	DB	00H
	ORG $+9
mapp_methods DQ	FLAT:??_C@_0N@MCIOADFH@__contains__?$AA@
	DQ	FLAT:dict_contains
	DD	048H
	ORG $+4
	DQ	FLAT:contains__doc__
	DQ	FLAT:??_C@_0M@GAJGCIJD@__getitem__?$AA@
	DQ	FLAT:dict_subscript
	DD	048H
	ORG $+4
	DQ	FLAT:getitem__doc__
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:dict_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:sizeof__doc__
	DQ	FLAT:??_C@_03HNAFFKGA@get?$AA@
	DQ	FLAT:dict_get
	DD	01H
	ORG $+4
	DQ	FLAT:get__doc__
	DQ	FLAT:??_C@_0L@MIJGIGKN@setdefault?$AA@
	DQ	FLAT:dict_setdefault
	DD	01H
	ORG $+4
	DQ	FLAT:setdefault_doc__
	DQ	FLAT:??_C@_03NJDAHFJE@pop?$AA@
	DQ	FLAT:dict_pop
	DD	01H
	ORG $+4
	DQ	FLAT:pop__doc__
	DQ	FLAT:??_C@_07KOGBLOBN@popitem?$AA@
	DQ	FLAT:dict_popitem
	DD	04H
	ORG $+4
	DQ	FLAT:popitem__doc__
	DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	FLAT:dictkeys_new
	DD	04H
	ORG $+4
	DQ	FLAT:keys__doc__
	DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	FLAT:dictitems_new
	DD	04H
	ORG $+4
	DQ	FLAT:items__doc__
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
	DQ	FLAT:dictvalues_new
	DD	04H
	ORG $+4
	DQ	FLAT:values__doc__
	DQ	FLAT:??_C@_06HDLLMMEJ@update?$AA@
	DQ	FLAT:dict_update
	DD	03H
	ORG $+4
	DQ	FLAT:update__doc__
	DQ	FLAT:??_C@_08KMEGJNJN@fromkeys?$AA@
	DQ	FLAT:dict_fromkeys
	DD	011H
	ORG $+4
	DQ	FLAT:fromkeys__doc__
	DQ	FLAT:??_C@_05MEHLAELG@clear?$AA@
	DQ	FLAT:dict_clear
	DD	04H
	ORG $+4
	DQ	FLAT:clear__doc__
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:dict_copy
	DD	04H
	ORG $+4
	DQ	FLAT:copy__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
dict_as_sequence DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyDict_Contains
	DQ	0000000000000000H
	DQ	0000000000000000H
dictionary_doc DB 'dict() -> new empty dictionary', 0aH, 'dict(mapping) -'
	DB	'> new dictionary initialized from a mapping object''s', 0aH, ' '
	DB	'   (key, value) pairs', 0aH, 'dict(iterable) -> new dictionar'
	DB	'y initialized as if via:', 0aH, '    d = {}', 0aH, '    for k'
	DB	', v in iterable:', 0aH, '        d[k] = v', 0aH, 'dict(**kwar'
	DB	'gs) -> new dictionary initialized with the name=value pairs', 0aH
	DB	'    in the keyword argument list.  For example:  dict(one=1, '
	DB	'two=2)', 00H
	ORG $+13
PyDict_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04BCIDKIGN@dict?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:dict_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dict_repr
	DQ	0000000000000000H
	DQ	FLAT:dict_as_sequence
	DQ	FLAT:dict_as_mapping
	DQ	FLAT:PyObject_HashNotImplemented
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	020044400H
	ORG $+4
	DQ	FLAT:dictionary_doc
	DQ	FLAT:dict_traverse
	DQ	FLAT:dict_tp_clear
	DQ	FLAT:dict_richcompare
	DQ	0000000000000000H
	DQ	FLAT:dict_iter
	DQ	0000000000000000H
	DQ	FLAT:mapp_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dict_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:dict_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
dictiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:dictiter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:dictiter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyDictIterKey_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BB@HHJBMJDG@dict_keyiterator?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:dictiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:dictiter_iternextkey
	DQ	FLAT:dictiter_methods
	DQ	0000000000000000H
	ORG $+144
PyDictIterValue_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@EEPKNHCO@dict_valueiterator?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:dictiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:dictiter_iternextvalue
	DQ	FLAT:dictiter_methods
	DQ	0000000000000000H
	ORG $+144
PyDictIterItem_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@HJGBEDCD@dict_itemiterator?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:dictiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:dictiter_iternextitem
	DQ	FLAT:dictiter_methods
	DQ	0000000000000000H
	ORG $+144
dictkeys_as_sequence DQ FLAT:dictview_len
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictkeys_contains
	ORG $+16
dictviews_as_number DQ 0000000000000000H
	DQ	FLAT:dictviews_sub
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictviews_and
	DQ	FLAT:dictviews_xor
	DQ	FLAT:dictviews_or
	ORG $+144
isdisjoint_doc DB 'Return True if the view and the given iterable have a '
	DB	'null intersection.', 00H
	ORG $+7
dictkeys_methods DQ FLAT:??_C@_0L@EMANFHEK@isdisjoint?$AA@
	DQ	FLAT:dictviews_isdisjoint
	DD	08H
	ORG $+4
	DQ	FLAT:isdisjoint_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyDictKeys_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09DCAKNFLJ@dict_keys?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:dictview_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictview_repr
	DQ	FLAT:dictviews_as_number
	DQ	FLAT:dictkeys_as_sequence
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictview_traverse
	DQ	0000000000000000H
	DQ	FLAT:dictview_richcompare
	DQ	0000000000000000H
	DQ	FLAT:dictkeys_iter
	DQ	0000000000000000H
	DQ	FLAT:dictkeys_methods
	DQ	0000000000000000H
	ORG $+144
dictitems_as_sequence DQ FLAT:dictview_len
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictitems_contains
	ORG $+16
dictitems_methods DQ FLAT:??_C@_0L@EMANFHEK@isdisjoint?$AA@
	DQ	FLAT:dictviews_isdisjoint
	DD	08H
	ORG $+4
	DQ	FLAT:isdisjoint_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyDictItems_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0L@KKKCFCKM@dict_items?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:dictview_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictview_repr
	DQ	FLAT:dictviews_as_number
	DQ	FLAT:dictitems_as_sequence
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictview_traverse
	DQ	0000000000000000H
	DQ	FLAT:dictview_richcompare
	DQ	0000000000000000H
	DQ	FLAT:dictitems_iter
	DQ	0000000000000000H
	DQ	FLAT:dictitems_methods
	DQ	0000000000000000H
	ORG $+144
dictvalues_as_sequence DQ FLAT:dictview_len
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyDictValues_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0M@JJEDNKGI@dict_values?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:dictview_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictview_repr
	DQ	0000000000000000H
	DQ	FLAT:dictvalues_as_sequence
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:dictview_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dictvalues_iter
	DQ	0000000000000000H
	DQ	FLAT:dictvalues_methods
	DQ	0000000000000000H
	ORG $+144
PyDictDummy_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BB@CKNECNBG@?$DMdummy?5key?$DO?5type?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dummy_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dummy_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	ORG $+216
_dummy_struct DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000002H
	DQ	FLAT:PyDictDummy_Type
_DATA	ENDS
PUBLIC	_PyDict_Dummy
; Function compile flags: /Odtp
; File c:\src\pyparallel\objects\dictobject.c
;	COMDAT _PyDict_Dummy
_TEXT	SEGMENT
_PyDict_Dummy PROC					; COMDAT

; 221  :     return dummy;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct

; 222  : }

  00007	c3		 ret	 0
_PyDict_Dummy ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CM@LGOONGON@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	PyDict_ClearFreeList
EXTRN	__imp__wassert:PROC
EXTRN	_Py_PXCTX:PROC
_BSS	SEGMENT
free_list DQ	050H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_ClearFreeList DD imagerel $LN7
	DD	imagerel $LN7+158
	DD	imagerel $unwind$PyDict_ClearFreeList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_ClearFreeList DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_1CM@LGOONGON@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@LGOONGON@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'E', 00H, 'x'
	DB	00H, 'a', 00H, 'c', 00H, 't', 00H, '(', 00H, 'o', 00H, 'p', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'd', 00H, 'i', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyDict_ClearFreeList
_TEXT	SEGMENT
ret$ = 32
op$ = 40
PyDict_ClearFreeList PROC				; COMDAT

; 247  : {

$LN7:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 248  :     PyDictObject *op;
; 249  :     int ret = numfree;

  00004	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  0000a	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 250  :     if (Py_PXCTX)

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 04		 je	 SHORT $LN3@PyDict_Cle

; 251  :         return 0;

  00017	33 c0		 xor	 eax, eax
  00019	eb 7e		 jmp	 SHORT $LN4@PyDict_Cle
$LN3@PyDict_Cle:
$LN2@PyDict_Cle:

; 252  : 
; 253  :     while (numfree) {

  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR numfree, 0
  00022	74 71		 je	 SHORT $LN1@PyDict_Cle

; 254  :         op = free_list[--numfree];

  00024	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  0002a	ff c8		 dec	 eax
  0002c	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax
  00032	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR numfree
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:free_list
  00040	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00044	48 89 44 24 28	 mov	 QWORD PTR op$[rsp], rax

; 255  :         assert(PyDict_CheckExact(op));

  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00050	48 8b 4c 24 28	 mov	 rcx, QWORD PTR op$[rsp]
  00055	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00059	74 2e		 je	 SHORT $LN6@PyDict_Cle
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00062	48 8b 4c 24 28	 mov	 rcx, QWORD PTR op$[rsp]
  00067	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  0006b	74 1c		 je	 SHORT $LN6@PyDict_Cle
  0006d	41 b8 ff 00 00
	00		 mov	 r8d, 255		; 000000ffH
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@LGOONGON@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00087	33 c0		 xor	 eax, eax
$LN6@PyDict_Cle:

; 256  :         PyObject_GC_Del(op);

  00089	48 8b 4c 24 28	 mov	 rcx, QWORD PTR op$[rsp]
  0008e	e8 00 00 00 00	 call	 PyObject_GC_Del

; 257  :     }

  00093	eb 86		 jmp	 SHORT $LN2@PyDict_Cle
$LN1@PyDict_Cle:

; 258  :     return ret;

  00095	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]
$LN4@PyDict_Cle:

; 259  : }

  00099	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009d	c3		 ret	 0
PyDict_ClearFreeList ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@KBCHCIKN@free?5PyDictObject?$AA@	; `string'
PUBLIC	_PyDict_DebugMallocStats
EXTRN	_PyDebugAllocatorStats:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_DebugMallocStats DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$_PyDict_DebugMallocStats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_DebugMallocStats DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BC@KBCHCIKN@free?5PyDictObject?$AA@
CONST	SEGMENT
??_C@_0BC@KBCHCIKN@free?5PyDictObject?$AA@ DB 'free PyDictObject', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyDict_DebugMallocStats
_TEXT	SEGMENT
out$ = 48
_PyDict_DebugMallocStats PROC				; COMDAT

; 264  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 265  :     _PyDebugAllocatorStats(out,
; 266  :                            "free PyDictObject", numfree, sizeof(PyDictObject));

  00009	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  0000f	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR numfree
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@KBCHCIKN@free?5PyDictObject?$AA@
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  00022	e8 00 00 00 00	 call	 _PyDebugAllocatorStats

; 267  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
_PyDict_DebugMallocStats ENDP
_TEXT	ENDS
PUBLIC	PyDict_Fini
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Fini DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$PyDict_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Fini DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_Fini
_TEXT	SEGMENT
PyDict_Fini PROC					; COMDAT

; 272  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 273  :     PyDict_ClearFreeList();

  00004	e8 00 00 00 00	 call	 PyDict_ClearFreeList

; 274  : }

  00009	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000d	c3		 ret	 0
PyDict_Fini ENDP
_TEXT	ENDS
PUBLIC	PyDict_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_New DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$PyDict_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_New DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_New
_TEXT	SEGMENT
PyDict_New PROC						; COMDAT

; 437  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 438  :     return new_dict(new_keys_object(PyDict_MINSIZE_COMBINED), NULL);

  00004	b9 08 00 00 00	 mov	 ecx, 8
  00009	e8 00 00 00 00	 call	 new_keys_object
  0000e	33 d2		 xor	 edx, edx
  00010	48 8b c8	 mov	 rcx, rax
  00013	e8 00 00 00 00	 call	 new_dict

; 439  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
PyDict_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@HLHIKCPM@?$AAI?$AAS?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAO?$AAF?$AA_?$AA2?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@LLIGAGCA@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAM?$AAI?$AAN?$AAS?$AAI?$AAZ?$AAE?$AA_?$AAS?$AAP?$AAL?$AAI?$AAT?$AA?$AA@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	PyErr_NoMemory:PROC
EXTRN	_PyMem_DebugMalloc:PROC
EXTRN	_PxMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_keys_object DD imagerel new_keys_object
	DD	imagerel new_keys_object+415
	DD	imagerel $unwind$new_keys_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_keys_object DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1CI@HLHIKCPM@?$AAI?$AAS?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAO?$AAF?$AA_?$AA2?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@HLHIKCPM@?$AAI?$AAS?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAO?$AAF?$AA_?$AA2?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?$AA@ DB 'I'
	DB	00H, 'S', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'W', 00H, 'E', 00H
	DB	'R', 00H, '_', 00H, 'O', 00H, 'F', 00H, '_', 00H, '2', 00H, '('
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@LLIGAGCA@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAM?$AAI?$AAN?$AAS?$AAI?$AAZ?$AAE?$AA_?$AAS?$AAP?$AAL?$AAI?$AAT?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@LLIGAGCA@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAM?$AAI?$AAN?$AAS?$AAI?$AAZ?$AAE?$AA_?$AAS?$AAP?$AAL?$AAI?$AAT?$AA?$AA@ DB 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, 'P', 00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't'
	DB	00H, '_', 00H, 'M', 00H, 'I', 00H, 'N', 00H, 'S', 00H, 'I', 00H
	DB	'Z', 00H, 'E', 00H, '_', 00H, 'S', 00H, 'P', 00H, 'L', 00H, 'I'
	DB	00H, 'T', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT new_keys_object
_TEXT	SEGMENT
dk$ = 32
i$ = 40
ep0$ = 48
tv88 = 56
size$ = 80
new_keys_object PROC					; COMDAT

; 347  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 348  :     PyDictKeysObject *dk;
; 349  :     Py_ssize_t i;
; 350  :     PyDictKeyEntry *ep0;
; 351  : 
; 352  :     assert(size >= PyDict_MINSIZE_SPLIT);

  00009	48 83 7c 24 50
	04		 cmp	 QWORD PTR size$[rsp], 4
  0000f	7d 1c		 jge	 SHORT $LN7@new_keys_o
  00011	41 b8 60 01 00
	00		 mov	 r8d, 352		; 00000160H
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@LLIGAGCA@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAM?$AAI?$AAN?$AAS?$AAI?$AAZ?$AAE?$AA_?$AAS?$AAP?$AAL?$AAI?$AAT?$AA?$AA@
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002b	33 c0		 xor	 eax, eax
$LN7@new_keys_o:

; 353  :     assert(IS_POWER_OF_2(size));

  0002d	48 8b 44 24 50	 mov	 rax, QWORD PTR size$[rsp]
  00032	48 ff c8	 dec	 rax
  00035	48 8b 4c 24 50	 mov	 rcx, QWORD PTR size$[rsp]
  0003a	48 23 c8	 and	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	48 85 c0	 test	 rax, rax
  00043	74 1c		 je	 SHORT $LN8@new_keys_o
  00045	41 b8 61 01 00
	00		 mov	 r8d, 353		; 00000161H
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@HLHIKCPM@?$AAI?$AAS?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAO?$AAF?$AA_?$AA2?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?$AA@
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005f	33 c0		 xor	 eax, eax
$LN8@new_keys_o:

; 354  :     dk = PyMem_MALLOC(sizeof(PyDictKeysObject) +
; 355  :                       sizeof(PyDictKeyEntry) * (size-1));

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 1f		 je	 SHORT $LN9@new_keys_o
  0006a	48 8b 44 24 50	 mov	 rax, QWORD PTR size$[rsp]
  0006f	48 ff c8	 dec	 rax
  00072	48 6b c0 18	 imul	 rax, 24
  00076	48 83 c0 38	 add	 rax, 56			; 00000038H
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 _PxMem_Malloc
  00082	48 89 44 24 38	 mov	 QWORD PTR tv88[rsp], rax
  00087	eb 1d		 jmp	 SHORT $LN10@new_keys_o
$LN9@new_keys_o:
  00089	48 8b 44 24 50	 mov	 rax, QWORD PTR size$[rsp]
  0008e	48 ff c8	 dec	 rax
  00091	48 6b c0 18	 imul	 rax, 24
  00095	48 83 c0 38	 add	 rax, 56			; 00000038H
  00099	48 8b c8	 mov	 rcx, rax
  0009c	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  000a1	48 89 44 24 38	 mov	 QWORD PTR tv88[rsp], rax
$LN10@new_keys_o:
  000a6	48 8b 44 24 38	 mov	 rax, QWORD PTR tv88[rsp]
  000ab	48 89 44 24 20	 mov	 QWORD PTR dk$[rsp], rax

; 356  :     if (dk == NULL) {

  000b0	48 83 7c 24 20
	00		 cmp	 QWORD PTR dk$[rsp], 0
  000b6	75 0c		 jne	 SHORT $LN4@new_keys_o

; 357  :         PyErr_NoMemory();

  000b8	e8 00 00 00 00	 call	 PyErr_NoMemory

; 358  :         return NULL;

  000bd	33 c0		 xor	 eax, eax
  000bf	e9 d6 00 00 00	 jmp	 $LN5@new_keys_o
$LN4@new_keys_o:

; 359  :     }
; 360  :     DK_DEBUG_INCREF dk->dk_refcnt = 1;

  000c4	e8 00 00 00 00	 call	 _Py_PXCTX
  000c9	85 c0		 test	 eax, eax
  000cb	74 02		 je	 SHORT $LN11@new_keys_o
  000cd	eb 11		 jmp	 SHORT $LN12@new_keys_o
$LN11@new_keys_o:
  000cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  000d6	48 ff c0	 inc	 rax
  000d9	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@new_keys_o:
  000e0	48 8b 44 24 20	 mov	 rax, QWORD PTR dk$[rsp]
  000e5	48 c7 00 01 00
	00 00		 mov	 QWORD PTR [rax], 1

; 361  :     dk->dk_size = size;

  000ec	48 8b 44 24 20	 mov	 rax, QWORD PTR dk$[rsp]
  000f1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR size$[rsp]
  000f6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 362  :     dk->dk_usable = USABLE_FRACTION(size);

  000fa	48 8b 44 24 50	 mov	 rax, QWORD PTR size$[rsp]
  000ff	48 8d 44 00 01	 lea	 rax, QWORD PTR [rax+rax+1]
  00104	48 99		 cdq
  00106	b9 03 00 00 00	 mov	 ecx, 3
  0010b	48 f7 f9	 idiv	 rcx
  0010e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dk$[rsp]
  00113	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 363  :     ep0 = &dk->dk_entries[0];

  00117	48 8b 44 24 20	 mov	 rax, QWORD PTR dk$[rsp]
  0011c	48 83 c0 20	 add	 rax, 32			; 00000020H
  00120	48 89 44 24 30	 mov	 QWORD PTR ep0$[rsp], rax

; 364  :     /* Hash value of slot 0 is used by popitem, so it must be initialized */
; 365  :     ep0->me_hash = 0;

  00125	48 8b 44 24 30	 mov	 rax, QWORD PTR ep0$[rsp]
  0012a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 366  :     for (i = 0; i < size; i++) {

  00131	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0013a	eb 0d		 jmp	 SHORT $LN3@new_keys_o
$LN2@new_keys_o:
  0013c	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00141	48 ff c0	 inc	 rax
  00144	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN3@new_keys_o:
  00149	48 8b 44 24 50	 mov	 rax, QWORD PTR size$[rsp]
  0014e	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00153	7d 30		 jge	 SHORT $LN1@new_keys_o

; 367  :         ep0[i].me_key = NULL;

  00155	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0015a	48 6b c0 18	 imul	 rax, 24
  0015e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ep0$[rsp]
  00163	48 c7 44 01 08
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+8], 0

; 368  :         ep0[i].me_value = NULL;

  0016c	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00171	48 6b c0 18	 imul	 rax, 24
  00175	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ep0$[rsp]
  0017a	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 369  :     }

  00183	eb b7		 jmp	 SHORT $LN2@new_keys_o
$LN1@new_keys_o:

; 370  :     dk->dk_lookup = lookdict_unicode_nodummy;

  00185	48 8b 44 24 20	 mov	 rax, QWORD PTR dk$[rsp]
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode_nodummy
  00191	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 371  :     return dk;

  00195	48 8b 44 24 20	 mov	 rax, QWORD PTR dk$[rsp]
$LN5@new_keys_o:

; 372  : }

  0019a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0019e	c3		 ret	 0
new_keys_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DI@IDMCNEEJ@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAm?$AAp?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@PMOOCPAL@?$AAm?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
EXTRN	_PyMem_DebugFree:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_Py_NewReference:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_dict DD imagerel new_dict
	DD	imagerel new_dict+407
	DD	imagerel $unwind$new_dict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_dict DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_1DI@IDMCNEEJ@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAm?$AAp?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@IDMCNEEJ@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAm?$AAp?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'm', 00H, 'p', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '&', 00H, 'P', 00H, 'y', 00H, 'D', 00H, 'i', 00H
	DB	'c', 00H, 't', 00H, '_', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@PMOOCPAL@?$AAm?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@PMOOCPAL@?$AAm?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'm'
	DB	00H, 'p', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT new_dict
_TEXT	SEGMENT
mp$ = 32
tv89 = 40
tv133 = 48
keys$ = 80
values$ = 88
new_dict PROC						; COMDAT

; 393  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 394  :     PyDictObject *mp;
; 395  : 
; 396  :     if (!Py_PXCTX && numfree) {

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	0f 85 93 00 00
	00		 jne	 $LN4@new_dict
  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR numfree, 0
  00022	0f 84 86 00 00
	00		 je	 $LN4@new_dict

; 397  :         mp = free_list[--numfree];

  00028	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  0002e	ff c8		 dec	 eax
  00030	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax
  00036	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR numfree
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:free_list
  00044	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00048	48 89 44 24 20	 mov	 QWORD PTR mp$[rsp], rax

; 398  :         assert (mp != NULL);

  0004d	48 83 7c 24 20
	00		 cmp	 QWORD PTR mp$[rsp], 0
  00053	75 1c		 jne	 SHORT $LN7@new_dict
  00055	41 b8 8e 01 00
	00		 mov	 r8d, 398		; 0000018eH
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BG@PMOOCPAL@?$AAm?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006f	33 c0		 xor	 eax, eax
$LN7@new_dict:

; 399  :         assert (Py_TYPE(mp) == &PyDict_Type);

  00071	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00078	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mp$[rsp]
  0007d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00081	74 1c		 je	 SHORT $LN8@new_dict
  00083	41 b8 8f 01 00
	00		 mov	 r8d, 399		; 0000018fH
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@IDMCNEEJ@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAm?$AAp?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AA?$AA@
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0009d	33 c0		 xor	 eax, eax
$LN8@new_dict:

; 400  :         _Py_NewReference((PyObject *)mp);

  0009f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mp$[rsp]
  000a4	e8 00 00 00 00	 call	 _Py_NewReference

; 401  :     }
; 402  :     else {

  000a9	e9 b6 00 00 00	 jmp	 $LN3@new_dict
$LN4@new_dict:

; 403  :         mp = PyObject_GC_New(PyDictObject, &PyDict_Type);

  000ae	e8 00 00 00 00	 call	 _Py_PXCTX
  000b3	85 c0		 test	 eax, eax
  000b5	74 13		 je	 SHORT $LN9@new_dict
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  000be	e8 00 00 00 00	 call	 _PxObject_New
  000c3	48 89 44 24 28	 mov	 QWORD PTR tv89[rsp], rax
  000c8	eb 11		 jmp	 SHORT $LN10@new_dict
$LN9@new_dict:
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  000d1	e8 00 00 00 00	 call	 _PyObject_GC_New
  000d6	48 89 44 24 28	 mov	 QWORD PTR tv89[rsp], rax
$LN10@new_dict:
  000db	48 8b 44 24 28	 mov	 rax, QWORD PTR tv89[rsp]
  000e0	48 89 44 24 20	 mov	 QWORD PTR mp$[rsp], rax

; 404  :         if (mp == NULL) {

  000e5	48 83 7c 24 20
	00		 cmp	 QWORD PTR mp$[rsp], 0
  000eb	75 77		 jne	 SHORT $LN2@new_dict

; 405  :             DK_DECREF(keys);

  000ed	e8 00 00 00 00	 call	 _Py_PXCTX
  000f2	85 c0		 test	 eax, eax
  000f4	74 02		 je	 SHORT $LN11@new_dict
  000f6	eb 11		 jmp	 SHORT $LN12@new_dict
$LN11@new_dict:
  000f8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  000ff	48 ff c8	 dec	 rax
  00102	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@new_dict:
  00109	48 8b 44 24 50	 mov	 rax, QWORD PTR keys$[rsp]
  0010e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00111	48 ff c8	 dec	 rax
  00114	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keys$[rsp]
  00119	48 89 01	 mov	 QWORD PTR [rcx], rax
  0011c	48 8b 44 24 50	 mov	 rax, QWORD PTR keys$[rsp]
  00121	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00125	75 0a		 jne	 SHORT $LN1@new_dict
  00127	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keys$[rsp]
  0012c	e8 00 00 00 00	 call	 free_keys_object
$LN1@new_dict:

; 406  :             free_values(values);

  00131	e8 00 00 00 00	 call	 _Py_PXCTX
  00136	85 c0		 test	 eax, eax
  00138	74 14		 je	 SHORT $LN13@new_dict
  0013a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR values$[rsp]
  0013f	e8 00 00 00 00	 call	 _PxMem_Free
  00144	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv133[rsp], 0
  0014c	eb 12		 jmp	 SHORT $LN14@new_dict
$LN13@new_dict:
  0014e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR values$[rsp]
  00153	e8 00 00 00 00	 call	 _PyMem_DebugFree
  00158	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv133[rsp], 0
$LN14@new_dict:

; 407  :             return NULL;

  00160	33 c0		 xor	 eax, eax
  00162	eb 2e		 jmp	 SHORT $LN5@new_dict
$LN2@new_dict:
$LN3@new_dict:

; 408  :         }
; 409  :     }
; 410  :     mp->ma_keys = keys;

  00164	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  00169	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keys$[rsp]
  0016e	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 411  :     mp->ma_values = values;

  00172	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  00177	48 8b 4c 24 58	 mov	 rcx, QWORD PTR values$[rsp]
  0017c	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 412  :     mp->ma_used = 0;

  00180	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  00185	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 413  :     return (PyObject *)mp;

  0018d	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
$LN5@new_dict:

; 414  : }

  00192	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00196	c3		 ret	 0
new_dict ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_keys_object DD imagerel free_keys_object
	DD	imagerel free_keys_object+234
	DD	imagerel $unwind$free_keys_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_keys_object DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT free_keys_object
_TEXT	SEGMENT
n$ = 32
i$ = 40
entries$ = 48
tv91 = 56
keys$ = 80
free_keys_object PROC					; COMDAT

; 376  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 377  :     PyDictKeyEntry *entries = &keys->dk_entries[0];

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR keys$[rsp]
  0000e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00012	48 89 44 24 30	 mov	 QWORD PTR entries$[rsp], rax

; 378  :     Py_ssize_t i, n;
; 379  :     for (i = 0, n = DK_SIZE(keys); i < n; i++) {

  00017	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR keys$[rsp]
  00025	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00029	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax
  0002e	eb 0d		 jmp	 SHORT $LN11@free_keys_
$LN10@free_keys_:
  00030	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00035	48 ff c0	 inc	 rax
  00038	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN11@free_keys_:
  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00042	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00047	7d 6d		 jge	 SHORT $LN9@free_keys_
$LN8@free_keys_:

; 380  :         Py_XDECREF(entries[i].me_key);

  00049	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0004e	48 6b c0 18	 imul	 rax, 24
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR entries$[rsp]
  00057	48 83 7c 01 08
	00		 cmp	 QWORD PTR [rcx+rax+8], 0
  0005d	74 18		 je	 SHORT $LN5@free_keys_
  0005f	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00064	48 6b c0 18	 imul	 rax, 24
  00068	48 8b 4c 24 30	 mov	 rcx, QWORD PTR entries$[rsp]
  0006d	48 8b 4c 01 08	 mov	 rcx, QWORD PTR [rcx+rax+8]
  00072	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@free_keys_:
  00077	33 c0		 xor	 eax, eax
  00079	85 c0		 test	 eax, eax
  0007b	75 cc		 jne	 SHORT $LN8@free_keys_
$LN4@free_keys_:

; 381  :         Py_XDECREF(entries[i].me_value);

  0007d	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00082	48 6b c0 18	 imul	 rax, 24
  00086	48 8b 4c 24 30	 mov	 rcx, QWORD PTR entries$[rsp]
  0008b	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00091	74 18		 je	 SHORT $LN1@free_keys_
  00093	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00098	48 6b c0 18	 imul	 rax, 24
  0009c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR entries$[rsp]
  000a1	48 8b 4c 01 10	 mov	 rcx, QWORD PTR [rcx+rax+16]
  000a6	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@free_keys_:
  000ab	33 c0		 xor	 eax, eax
  000ad	85 c0		 test	 eax, eax
  000af	75 cc		 jne	 SHORT $LN4@free_keys_

; 382  :     }

  000b1	e9 7a ff ff ff	 jmp	 $LN10@free_keys_
$LN9@free_keys_:

; 383  :     PyMem_FREE(keys);

  000b6	e8 00 00 00 00	 call	 _Py_PXCTX
  000bb	85 c0		 test	 eax, eax
  000bd	74 14		 je	 SHORT $LN14@free_keys_
  000bf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keys$[rsp]
  000c4	e8 00 00 00 00	 call	 _PxMem_Free
  000c9	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000d1	eb 12		 jmp	 SHORT $LN15@free_keys_
$LN14@free_keys_:
  000d3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keys$[rsp]
  000d8	e8 00 00 00 00	 call	 _PyMem_DebugFree
  000dd	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN15@free_keys_:

; 384  : }

  000e5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e9	c3		 ret	 0
free_keys_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_1GO@LLKCDEIG@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@ ; `string'
EXTRN	PyUnicode_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\objects\dictobject.c
pdata	SEGMENT
$pdata$lookdict_unicode_nodummy DD imagerel lookdict_unicode_nodummy
	DD	imagerel lookdict_unicode_nodummy+621
	DD	imagerel $unwind$lookdict_unicode_nodummy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookdict_unicode_nodummy DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@LLKCDEIG@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
CONST	SEGMENT
??_C@_1GO@LLKCDEIG@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@ DB 'e'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	'k', 00H, 'e', 00H, 'y', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'C', 00H
	DB	'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'E', 00H, 'x', 00H, 'a'
	DB	00H, 'c', 00H, 't', 00H, '(', 00H, 'e', 00H, 'p', 00H, '-', 00H
	DB	'>', 00H, 'm', 00H, 'e', 00H, '_', 00H, 'k', 00H, 'e', 00H, 'y'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT lookdict_unicode_nodummy
_TEXT	SEGMENT
i$ = 32
mask$ = 40
perturb$ = 48
ep$ = 56
ep0$ = 64
mp$ = 96
key$ = 104
hash$ = 112
value_addr$ = 120
lookdict_unicode_nodummy PROC				; COMDAT

; 626  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 627  :     register size_t i;
; 628  :     register size_t perturb;
; 629  :     register size_t mask = DK_MASK(mp->ma_keys);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  0001d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00021	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00025	48 ff c8	 dec	 rax
  00028	48 89 44 24 28	 mov	 QWORD PTR mask$[rsp], rax

; 630  :     PyDictKeyEntry *ep0 = &mp->ma_keys->dk_entries[0];

  0002d	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  00032	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00036	48 83 c0 20	 add	 rax, 32			; 00000020H
  0003a	48 89 44 24 40	 mov	 QWORD PTR ep0$[rsp], rax

; 631  :     register PyDictKeyEntry *ep;
; 632  : 
; 633  :     /* Make sure this function doesn't have to handle non-unicode keys,
; 634  :        including subclasses of str; e.g., one reason to subclass
; 635  :        unicodes is to override __eq__, and for speed we don't cater to
; 636  :        that here. */
; 637  :     if (!PyUnicode_CheckExact(key)) {

  0003f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00046	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  0004b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0004f	74 32		 je	 SHORT $LN8@lookdict_u

; 638  :         mp->ma_keys->dk_lookup = lookdict;

  00051	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  00056	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  00061	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 639  :         return lookdict(mp, key, hash, value_addr);

  00065	4c 8b 4c 24 78	 mov	 r9, QWORD PTR value_addr$[rsp]
  0006a	4c 8b 44 24 70	 mov	 r8, QWORD PTR hash$[rsp]
  0006f	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  00074	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  00079	e8 00 00 00 00	 call	 lookdict
  0007e	e9 e5 01 00 00	 jmp	 $LN9@lookdict_u
$LN8@lookdict_u:

; 640  :     }
; 641  :     i = (size_t)hash & mask;

  00083	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  00088	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  0008d	48 23 c8	 and	 rcx, rax
  00090	48 8b c1	 mov	 rax, rcx
  00093	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 642  :     ep = &ep0[i];

  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0009d	48 6b c0 18	 imul	 rax, 24
  000a1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep0$[rsp]
  000a6	48 03 c8	 add	 rcx, rax
  000a9	48 8b c1	 mov	 rax, rcx
  000ac	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 643  :     assert(ep->me_key == NULL || PyUnicode_CheckExact(ep->me_key));

  000b1	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000b6	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000bb	74 32		 je	 SHORT $LN11@lookdict_u
  000bd	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000c2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyUnicode_Type
  000cd	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  000d1	74 1c		 je	 SHORT $LN11@lookdict_u
  000d3	41 b8 83 02 00
	00		 mov	 r8d, 643		; 00000283H
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GO@LLKCDEIG@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ed	33 c0		 xor	 eax, eax
$LN11@lookdict_u:

; 644  :     if (ep->me_key == NULL || ep->me_key == key ||
; 645  :         (ep->me_hash == hash && unicode_eq(ep->me_key, key))) {

  000ef	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000f4	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000f9	74 36		 je	 SHORT $LN6@lookdict_u
  000fb	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00100	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  00105	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00109	74 26		 je	 SHORT $LN6@lookdict_u
  0010b	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00110	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  00115	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00118	75 32		 jne	 SHORT $LN7@lookdict_u
  0011a	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  0011f	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00124	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00128	e8 00 00 00 00	 call	 unicode_eq
  0012d	85 c0		 test	 eax, eax
  0012f	74 1b		 je	 SHORT $LN7@lookdict_u
$LN6@lookdict_u:

; 646  :         *value_addr = &ep->me_value;

  00131	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00136	48 83 c0 10	 add	 rax, 16
  0013a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  0013f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 647  :         return ep;

  00142	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00147	e9 1c 01 00 00	 jmp	 $LN9@lookdict_u
$LN7@lookdict_u:

; 648  :     }
; 649  :     for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {

  0014c	48 8b 44 24 70	 mov	 rax, QWORD PTR hash$[rsp]
  00151	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
  00156	eb 0e		 jmp	 SHORT $LN5@lookdict_u
$LN4@lookdict_u:
  00158	48 8b 44 24 30	 mov	 rax, QWORD PTR perturb$[rsp]
  0015d	48 c1 e8 05	 shr	 rax, 5
  00161	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
$LN5@lookdict_u:

; 650  :         i = (i << 2) + i + perturb + 1;

  00166	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0016b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00170	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00174	48 8b 4c 24 30	 mov	 rcx, QWORD PTR perturb$[rsp]
  00179	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  0017e	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 651  :         ep = &ep0[i & mask];

  00183	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  00188	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0018d	48 23 c8	 and	 rcx, rax
  00190	48 8b c1	 mov	 rax, rcx
  00193	48 6b c0 18	 imul	 rax, 24
  00197	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep0$[rsp]
  0019c	48 03 c8	 add	 rcx, rax
  0019f	48 8b c1	 mov	 rax, rcx
  001a2	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 652  :         assert(ep->me_key == NULL || PyUnicode_CheckExact(ep->me_key));

  001a7	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  001ac	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  001b1	74 32		 je	 SHORT $LN12@lookdict_u
  001b3	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  001b8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyUnicode_Type
  001c3	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001c7	74 1c		 je	 SHORT $LN12@lookdict_u
  001c9	41 b8 8c 02 00
	00		 mov	 r8d, 652		; 0000028cH
  001cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GO@LLKCDEIG@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
  001dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001e3	33 c0		 xor	 eax, eax
$LN12@lookdict_u:

; 653  :         if (ep->me_key == NULL || ep->me_key == key ||
; 654  :             (ep->me_hash == hash && unicode_eq(ep->me_key, key))) {

  001e5	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  001ea	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  001ef	74 36		 je	 SHORT $LN1@lookdict_u
  001f1	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  001f6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  001fb	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  001ff	74 26		 je	 SHORT $LN1@lookdict_u
  00201	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00206	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  0020b	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0020e	75 2f		 jne	 SHORT $LN2@lookdict_u
  00210	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  00215	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0021a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0021e	e8 00 00 00 00	 call	 unicode_eq
  00223	85 c0		 test	 eax, eax
  00225	74 18		 je	 SHORT $LN2@lookdict_u
$LN1@lookdict_u:

; 655  :             *value_addr = &ep->me_value;

  00227	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0022c	48 83 c0 10	 add	 rax, 16
  00230	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  00235	48 89 01	 mov	 QWORD PTR [rcx], rax

; 656  :             return ep;

  00238	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0023d	eb 29		 jmp	 SHORT $LN9@lookdict_u
$LN2@lookdict_u:

; 657  :         }
; 658  :     }

  0023f	e9 14 ff ff ff	 jmp	 $LN4@lookdict_u

; 659  :     assert(0);          /* NOT REACHED */

  00244	33 c0		 xor	 eax, eax
  00246	85 c0		 test	 eax, eax
  00248	75 1c		 jne	 SHORT $LN13@lookdict_u
  0024a	41 b8 93 02 00
	00		 mov	 r8d, 659		; 00000293H
  00250	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00257	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0025e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00264	33 c0		 xor	 eax, eax
$LN13@lookdict_u:

; 660  :     return 0;

  00266	33 c0		 xor	 eax, eax
$LN9@lookdict_u:

; 661  : }

  00268	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0026c	c3		 ret	 0
lookdict_unicode_nodummy ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EE@PCPICPBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAa?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@ ; `string'
PUBLIC	??_C@_1EE@PACGCIDO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@ ; `string'
PUBLIC	??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@MIIHENII@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAe?$AAq?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAf?$AAa?$AAi?$AAl?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@ ; `string'
EXTRN	memcmp:PROC
EXTRN	_PyUnicode_Ready:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\stringlib\eq.h
pdata	SEGMENT
$pdata$unicode_eq DD imagerel unicode_eq
	DD	imagerel unicode_eq+1724
	DD	imagerel $unwind$unicode_eq
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unicode_eq DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_1EE@PCPICPBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAa?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@
CONST	SEGMENT
??_C@_1EE@PCPICPBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAa?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'a', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@PACGCIDO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@
CONST	SEGMENT
??_C@_1EE@PACGCIDO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'b', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'b', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'a', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@MIIHENII@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAe?$AAq?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAf?$AAa?$AAi?$AAl?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@MIIHENII@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAe?$AAq?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAf?$AAa?$AAi?$AAl?$AA?$CC?$AA?$AA@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'u', 00H
	DB	'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_'
	DB	00H, 'e', 00H, 'q', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'd', 00H, 'y', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'b', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'a', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
CONST	SEGMENT
??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H
	DB	'p', 00H, 'y', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'e', 00H, 'l', 00H, '\', 00H, 'o', 00H, 'b', 00H
	DB	'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, 's', 00H, '\', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'l', 00H
	DB	'i', 00H, 'b', 00H, '/', 00H, 'e', 00H, 'q', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT unicode_eq
_TEXT	SEGMENT
a$ = 32
b$ = 40
tv78 = 48
tv94 = 52
tv298 = 56
tv307 = 64
tv342 = 72
tv351 = 80
tv354 = 88
aa$ = 112
bb$ = 120
unicode_eq PROC						; COMDAT

; 8    : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 9    :     register PyUnicodeObject *a = (PyUnicodeObject *)aa;

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR aa$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR a$[rsp], rax

; 10   :     register PyUnicodeObject *b = (PyUnicodeObject *)bb;

  00018	48 8b 44 24 78	 mov	 rax, QWORD PTR bb$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR b$[rsp], rax

; 11   : 
; 12   :     if (PyUnicode_READY(a) == -1 || PyUnicode_READY(b) == -1) {

  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00031	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00036	85 c0		 test	 eax, eax
  00038	75 1c		 jne	 SHORT $LN8@unicode_eq
  0003a	41 b8 0c 00 00
	00		 mov	 r8d, 12
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00054	33 c0		 xor	 eax, eax
$LN8@unicode_eq:
  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0005b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0005e	c1 e8 07	 shr	 eax, 7
  00061	83 e0 01	 and	 eax, 1
  00064	85 c0		 test	 eax, eax
  00066	74 0a		 je	 SHORT $LN9@unicode_eq
  00068	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
  00070	eb 0e		 jmp	 SHORT $LN10@unicode_eq
$LN9@unicode_eq:
  00072	48 8b 4c 24 20	 mov	 rcx, QWORD PTR a$[rsp]
  00077	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0007c	89 44 24 30	 mov	 DWORD PTR tv78[rsp], eax
$LN10@unicode_eq:
  00080	83 7c 24 30 ff	 cmp	 DWORD PTR tv78[rsp], -1
  00085	74 65		 je	 SHORT $LN4@unicode_eq
  00087	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  0008c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00090	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00096	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0009b	85 c0		 test	 eax, eax
  0009d	75 1c		 jne	 SHORT $LN11@unicode_eq
  0009f	41 b8 0c 00 00
	00		 mov	 r8d, 12
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b9	33 c0		 xor	 eax, eax
$LN11@unicode_eq:
  000bb	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  000c0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000c3	c1 e8 07	 shr	 eax, 7
  000c6	83 e0 01	 and	 eax, 1
  000c9	85 c0		 test	 eax, eax
  000cb	74 0a		 je	 SHORT $LN12@unicode_eq
  000cd	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
  000d5	eb 0e		 jmp	 SHORT $LN13@unicode_eq
$LN12@unicode_eq:
  000d7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR b$[rsp]
  000dc	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000e1	89 44 24 34	 mov	 DWORD PTR tv94[rsp], eax
$LN13@unicode_eq:
  000e5	83 7c 24 34 ff	 cmp	 DWORD PTR tv94[rsp], -1
  000ea	75 29		 jne	 SHORT $LN5@unicode_eq
$LN4@unicode_eq:

; 13   :         assert(0 && "unicode_eq ready fail");

  000ec	33 c0		 xor	 eax, eax
  000ee	85 c0		 test	 eax, eax
  000f0	75 1c		 jne	 SHORT $LN14@unicode_eq
  000f2	41 b8 0d 00 00
	00		 mov	 r8d, 13
  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@MIIHENII@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAe?$AAq?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAf?$AAa?$AAi?$AAl?$AA?$CC?$AA?$AA@
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010c	33 c0		 xor	 eax, eax
$LN14@unicode_eq:

; 14   :         return 0;

  0010e	33 c0		 xor	 eax, eax
  00110	e9 a2 05 00 00	 jmp	 $LN6@unicode_eq
$LN5@unicode_eq:

; 15   :     }
; 16   : 
; 17   :     if (PyUnicode_GET_LENGTH(a) != PyUnicode_GET_LENGTH(b))

  00115	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0011a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0011e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00124	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00129	85 c0		 test	 eax, eax
  0012b	75 1c		 jne	 SHORT $LN15@unicode_eq
  0012d	41 b8 11 00 00
	00		 mov	 r8d, 17
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00147	33 c0		 xor	 eax, eax
$LN15@unicode_eq:
  00149	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0014e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00151	c1 e8 07	 shr	 eax, 7
  00154	83 e0 01	 and	 eax, 1
  00157	85 c0		 test	 eax, eax
  00159	75 1c		 jne	 SHORT $LN16@unicode_eq
  0015b	41 b8 11 00 00
	00		 mov	 r8d, 17
  00161	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  00168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  0016f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00175	33 c0		 xor	 eax, eax
$LN16@unicode_eq:
  00177	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  0017c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00180	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00186	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0018b	85 c0		 test	 eax, eax
  0018d	75 1c		 jne	 SHORT $LN17@unicode_eq
  0018f	41 b8 11 00 00
	00		 mov	 r8d, 17
  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  0019c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  001a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a9	33 c0		 xor	 eax, eax
$LN17@unicode_eq:
  001ab	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  001b0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001b3	c1 e8 07	 shr	 eax, 7
  001b6	83 e0 01	 and	 eax, 1
  001b9	85 c0		 test	 eax, eax
  001bb	75 1c		 jne	 SHORT $LN18@unicode_eq
  001bd	41 b8 11 00 00
	00		 mov	 r8d, 17
  001c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  001ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  001d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d7	33 c0		 xor	 eax, eax
$LN18@unicode_eq:
  001d9	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  001de	48 8b 4c 24 28	 mov	 rcx, QWORD PTR b$[rsp]
  001e3	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  001e7	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  001eb	74 07		 je	 SHORT $LN3@unicode_eq

; 18   :         return 0;

  001ed	33 c0		 xor	 eax, eax
  001ef	e9 c3 04 00 00	 jmp	 $LN6@unicode_eq
$LN3@unicode_eq:

; 19   :     if (PyUnicode_GET_LENGTH(a) == 0)

  001f4	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  001f9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001fd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00203	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00208	85 c0		 test	 eax, eax
  0020a	75 1c		 jne	 SHORT $LN19@unicode_eq
  0020c	41 b8 13 00 00
	00		 mov	 r8d, 19
  00212	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  00219	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  00220	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00226	33 c0		 xor	 eax, eax
$LN19@unicode_eq:
  00228	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0022d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00230	c1 e8 07	 shr	 eax, 7
  00233	83 e0 01	 and	 eax, 1
  00236	85 c0		 test	 eax, eax
  00238	75 1c		 jne	 SHORT $LN20@unicode_eq
  0023a	41 b8 13 00 00
	00		 mov	 r8d, 19
  00240	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  0024e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00254	33 c0		 xor	 eax, eax
$LN20@unicode_eq:
  00256	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0025b	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00260	75 0a		 jne	 SHORT $LN2@unicode_eq

; 20   :         return 1;

  00262	b8 01 00 00 00	 mov	 eax, 1
  00267	e9 4b 04 00 00	 jmp	 $LN6@unicode_eq
$LN2@unicode_eq:

; 21   :     if (PyUnicode_KIND(a) != PyUnicode_KIND(b))

  0026c	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00271	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00275	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0027b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00280	85 c0		 test	 eax, eax
  00282	75 1c		 jne	 SHORT $LN21@unicode_eq
  00284	41 b8 15 00 00
	00		 mov	 r8d, 21
  0028a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0029e	33 c0		 xor	 eax, eax
$LN21@unicode_eq:
  002a0	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  002a5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002a8	c1 e8 07	 shr	 eax, 7
  002ab	83 e0 01	 and	 eax, 1
  002ae	85 c0		 test	 eax, eax
  002b0	75 1c		 jne	 SHORT $LN22@unicode_eq
  002b2	41 b8 15 00 00
	00		 mov	 r8d, 21
  002b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  002c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002cc	33 c0		 xor	 eax, eax
$LN22@unicode_eq:
  002ce	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  002d3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002d7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002dd	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002e2	85 c0		 test	 eax, eax
  002e4	75 1c		 jne	 SHORT $LN23@unicode_eq
  002e6	41 b8 15 00 00
	00		 mov	 r8d, 21
  002ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  002f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  002fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00300	33 c0		 xor	 eax, eax
$LN23@unicode_eq:
  00302	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  00307	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0030a	c1 e8 07	 shr	 eax, 7
  0030d	83 e0 01	 and	 eax, 1
  00310	85 c0		 test	 eax, eax
  00312	75 1c		 jne	 SHORT $LN24@unicode_eq
  00314	41 b8 15 00 00
	00		 mov	 r8d, 21
  0031a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  00321	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  00328	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0032e	33 c0		 xor	 eax, eax
$LN24@unicode_eq:
  00330	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00335	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00338	c1 e8 02	 shr	 eax, 2
  0033b	83 e0 07	 and	 eax, 7
  0033e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR b$[rsp]
  00343	8b 49 70	 mov	 ecx, DWORD PTR [rcx+112]
  00346	c1 e9 02	 shr	 ecx, 2
  00349	83 e1 07	 and	 ecx, 7
  0034c	3b c1		 cmp	 eax, ecx
  0034e	74 07		 je	 SHORT $LN1@unicode_eq

; 22   :         return 0;

  00350	33 c0		 xor	 eax, eax
  00352	e9 60 03 00 00	 jmp	 $LN6@unicode_eq
$LN1@unicode_eq:

; 23   :     return memcmp(PyUnicode_1BYTE_DATA(a), PyUnicode_1BYTE_DATA(b),
; 24   :                   PyUnicode_GET_LENGTH(a) * PyUnicode_KIND(a)) == 0;

  00357	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0035c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00360	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00366	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0036b	85 c0		 test	 eax, eax
  0036d	75 1c		 jne	 SHORT $LN25@unicode_eq
  0036f	41 b8 18 00 00
	00		 mov	 r8d, 24
  00375	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  0037c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  00383	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00389	33 c0		 xor	 eax, eax
$LN25@unicode_eq:
  0038b	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00390	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00393	c1 e8 07	 shr	 eax, 7
  00396	83 e0 01	 and	 eax, 1
  00399	85 c0		 test	 eax, eax
  0039b	75 1c		 jne	 SHORT $LN26@unicode_eq
  0039d	41 b8 18 00 00
	00		 mov	 r8d, 24
  003a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  003aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  003b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003b7	33 c0		 xor	 eax, eax
$LN26@unicode_eq:
  003b9	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  003be	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003c2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003c8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003cd	85 c0		 test	 eax, eax
  003cf	75 1c		 jne	 SHORT $LN27@unicode_eq
  003d1	41 b8 18 00 00
	00		 mov	 r8d, 24
  003d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  003de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  003e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003eb	33 c0		 xor	 eax, eax
$LN27@unicode_eq:
  003ed	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  003f2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003f5	c1 e8 07	 shr	 eax, 7
  003f8	83 e0 01	 and	 eax, 1
  003fb	85 c0		 test	 eax, eax
  003fd	75 1c		 jne	 SHORT $LN28@unicode_eq
  003ff	41 b8 18 00 00
	00		 mov	 r8d, 24
  00405	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  0040c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  00413	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00419	33 c0		 xor	 eax, eax
$LN28@unicode_eq:
  0041b	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  00420	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00424	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0042a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0042f	85 c0		 test	 eax, eax
  00431	75 1c		 jne	 SHORT $LN29@unicode_eq
  00433	41 b8 17 00 00
	00		 mov	 r8d, 23
  00439	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  00440	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  00447	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0044d	33 c0		 xor	 eax, eax
$LN29@unicode_eq:
  0044f	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  00454	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00457	c1 e8 05	 shr	 eax, 5
  0045a	83 e0 01	 and	 eax, 1
  0045d	85 c0		 test	 eax, eax
  0045f	0f 84 a2 00 00
	00		 je	 $LN35@unicode_eq
  00465	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  0046a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0046e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00474	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00479	85 c0		 test	 eax, eax
  0047b	75 1c		 jne	 SHORT $LN30@unicode_eq
  0047d	41 b8 17 00 00
	00		 mov	 r8d, 23
  00483	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  0048a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  00491	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00497	33 c0		 xor	 eax, eax
$LN30@unicode_eq:
  00499	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  0049e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004a1	c1 e8 07	 shr	 eax, 7
  004a4	83 e0 01	 and	 eax, 1
  004a7	85 c0		 test	 eax, eax
  004a9	75 1c		 jne	 SHORT $LN31@unicode_eq
  004ab	41 b8 17 00 00
	00		 mov	 r8d, 23
  004b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  004b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  004bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c5	33 c0		 xor	 eax, eax
$LN31@unicode_eq:
  004c7	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  004cc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004cf	c1 e8 06	 shr	 eax, 6
  004d2	83 e0 01	 and	 eax, 1
  004d5	85 c0		 test	 eax, eax
  004d7	74 12		 je	 SHORT $LN32@unicode_eq
  004d9	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  004de	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  004e4	48 89 44 24 38	 mov	 QWORD PTR tv298[rsp], rax
  004e9	eb 10		 jmp	 SHORT $LN33@unicode_eq
$LN32@unicode_eq:
  004eb	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  004f0	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  004f6	48 89 44 24 38	 mov	 QWORD PTR tv298[rsp], rax
$LN33@unicode_eq:
  004fb	48 8b 44 24 38	 mov	 rax, QWORD PTR tv298[rsp]
  00500	48 89 44 24 40	 mov	 QWORD PTR tv307[rsp], rax
  00505	eb 3c		 jmp	 SHORT $LN36@unicode_eq
$LN35@unicode_eq:
  00507	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  0050c	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00514	75 1c		 jne	 SHORT $LN34@unicode_eq
  00516	41 b8 17 00 00
	00		 mov	 r8d, 23
  0051c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  00523	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@PACGCIDO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@
  0052a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00530	33 c0		 xor	 eax, eax
$LN34@unicode_eq:
  00532	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  00537	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0053e	48 89 44 24 40	 mov	 QWORD PTR tv307[rsp], rax
$LN36@unicode_eq:
  00543	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00548	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0054c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00552	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00557	85 c0		 test	 eax, eax
  00559	75 1c		 jne	 SHORT $LN37@unicode_eq
  0055b	41 b8 17 00 00
	00		 mov	 r8d, 23
  00561	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  00568	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  0056f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00575	33 c0		 xor	 eax, eax
$LN37@unicode_eq:
  00577	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0057c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0057f	c1 e8 05	 shr	 eax, 5
  00582	83 e0 01	 and	 eax, 1
  00585	85 c0		 test	 eax, eax
  00587	0f 84 a2 00 00
	00		 je	 $LN43@unicode_eq
  0058d	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00592	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00596	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0059c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  005a1	85 c0		 test	 eax, eax
  005a3	75 1c		 jne	 SHORT $LN38@unicode_eq
  005a5	41 b8 17 00 00
	00		 mov	 r8d, 23
  005ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  005b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  005b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005bf	33 c0		 xor	 eax, eax
$LN38@unicode_eq:
  005c1	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  005c6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005c9	c1 e8 07	 shr	 eax, 7
  005cc	83 e0 01	 and	 eax, 1
  005cf	85 c0		 test	 eax, eax
  005d1	75 1c		 jne	 SHORT $LN39@unicode_eq
  005d3	41 b8 17 00 00
	00		 mov	 r8d, 23
  005d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  005e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  005e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005ed	33 c0		 xor	 eax, eax
$LN39@unicode_eq:
  005ef	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  005f4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005f7	c1 e8 06	 shr	 eax, 6
  005fa	83 e0 01	 and	 eax, 1
  005fd	85 c0		 test	 eax, eax
  005ff	74 12		 je	 SHORT $LN40@unicode_eq
  00601	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00606	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0060c	48 89 44 24 48	 mov	 QWORD PTR tv342[rsp], rax
  00611	eb 10		 jmp	 SHORT $LN41@unicode_eq
$LN40@unicode_eq:
  00613	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00618	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0061e	48 89 44 24 48	 mov	 QWORD PTR tv342[rsp], rax
$LN41@unicode_eq:
  00623	48 8b 44 24 48	 mov	 rax, QWORD PTR tv342[rsp]
  00628	48 89 44 24 50	 mov	 QWORD PTR tv351[rsp], rax
  0062d	eb 3c		 jmp	 SHORT $LN44@unicode_eq
$LN43@unicode_eq:
  0062f	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00634	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0063c	75 1c		 jne	 SHORT $LN42@unicode_eq
  0063e	41 b8 17 00 00
	00		 mov	 r8d, 23
  00644	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@DJFCKAMI@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg@
  0064b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@PCPICPBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAa?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@
  00652	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00658	33 c0		 xor	 eax, eax
$LN42@unicode_eq:
  0065a	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0065f	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00666	48 89 44 24 50	 mov	 QWORD PTR tv351[rsp], rax
$LN44@unicode_eq:
  0066b	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00670	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00673	c1 e8 02	 shr	 eax, 2
  00676	83 e0 07	 and	 eax, 7
  00679	8b c0		 mov	 eax, eax
  0067b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR a$[rsp]
  00680	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00684	48 0f af c8	 imul	 rcx, rax
  00688	48 8b c1	 mov	 rax, rcx
  0068b	4c 8b c0	 mov	 r8, rax
  0068e	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv307[rsp]
  00693	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv351[rsp]
  00698	e8 00 00 00 00	 call	 memcmp
  0069d	85 c0		 test	 eax, eax
  0069f	75 0a		 jne	 SHORT $LN45@unicode_eq
  006a1	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv354[rsp], 1
  006a9	eb 08		 jmp	 SHORT $LN46@unicode_eq
$LN45@unicode_eq:
  006ab	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv354[rsp], 0
$LN46@unicode_eq:
  006b3	8b 44 24 58	 mov	 eax, DWORD PTR tv354[rsp]
$LN6@unicode_eq:

; 25   : }

  006b7	48 83 c4 68	 add	 rsp, 104		; 00000068H
  006bb	c3		 ret	 0
unicode_eq ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\dictobject.c
pdata	SEGMENT
$pdata$lookdict DD imagerel lookdict
	DD	imagerel lookdict+902
	DD	imagerel $unwind$lookdict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookdict DD 011801H
	DD	0c218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lookdict
_TEXT	SEGMENT
i$ = 32
mask$ = 40
perturb$ = 48
startkey$ = 56
ep$ = 64
ep0$ = 72
cmp$ = 80
freeslot$ = 88
mp$ = 112
key$ = 120
hash$ = 128
value_addr$ = 136
lookdict PROC						; COMDAT

; 469  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN27@lookdict:
$top$20615:

; 470  :     register size_t i;
; 471  :     register size_t perturb;
; 472  :     register PyDictKeyEntry *freeslot;
; 473  :     register size_t mask;
; 474  :     PyDictKeyEntry *ep0;
; 475  :     register PyDictKeyEntry *ep;
; 476  :     register int cmp;
; 477  :     PyObject *startkey;
; 478  : 
; 479  : top:
; 480  :     mask = DK_MASK(mp->ma_keys);

  00018	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  0001d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00021	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00025	48 ff c8	 dec	 rax
  00028	48 89 44 24 28	 mov	 QWORD PTR mask$[rsp], rax

; 481  :     ep0 = &mp->ma_keys->dk_entries[0];

  0002d	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  00032	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00036	48 83 c0 20	 add	 rax, 32			; 00000020H
  0003a	48 89 44 24 48	 mov	 QWORD PTR ep0$[rsp], rax

; 482  :     i = (size_t)hash & mask;

  0003f	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  00044	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR hash$[rsp]
  0004c	48 23 c8	 and	 rcx, rax
  0004f	48 8b c1	 mov	 rax, rcx
  00052	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 483  :     ep = &ep0[i];

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0005c	48 6b c0 18	 imul	 rax, 24
  00060	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ep0$[rsp]
  00065	48 03 c8	 add	 rcx, rax
  00068	48 8b c1	 mov	 rax, rcx
  0006b	48 89 44 24 40	 mov	 QWORD PTR ep$[rsp], rax

; 484  :     if (ep->me_key == NULL || ep->me_key == key) {

  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00075	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0007a	74 10		 je	 SHORT $LN22@lookdict
  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00081	48 8b 4c 24 78	 mov	 rcx, QWORD PTR key$[rsp]
  00086	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0008a	75 1e		 jne	 SHORT $LN23@lookdict
$LN22@lookdict:

; 485  :         *value_addr = &ep->me_value;

  0008c	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00091	48 83 c0 10	 add	 rax, 16
  00095	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR value_addr$[rsp]
  0009d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 486  :         return ep;

  000a0	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  000a5	e9 d7 02 00 00	 jmp	 $LN24@lookdict
$LN23@lookdict:

; 487  :     }
; 488  :     if (ep->me_key == dummy)

  000aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  000b1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep$[rsp]
  000b6	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  000ba	75 0f		 jne	 SHORT $LN21@lookdict

; 489  :         freeslot = ep;

  000bc	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  000c1	48 89 44 24 58	 mov	 QWORD PTR freeslot$[rsp], rax

; 490  :     else {

  000c6	e9 b8 00 00 00	 jmp	 $LN20@lookdict
$LN21@lookdict:

; 491  :         if (ep->me_hash == hash) {

  000cb	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  000d0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR hash$[rsp]
  000d8	48 39 08	 cmp	 QWORD PTR [rax], rcx
  000db	0f 85 99 00 00
	00		 jne	 $LN19@lookdict

; 492  :             startkey = ep->me_key;

  000e1	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  000e6	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000ea	48 89 44 24 38	 mov	 QWORD PTR startkey$[rsp], rax

; 493  :             Py_INCREF(startkey);

  000ef	48 8b 4c 24 38	 mov	 rcx, QWORD PTR startkey$[rsp]
  000f4	e8 00 00 00 00	 call	 _Py_IncRef

; 494  :             cmp = PyObject_RichCompareBool(startkey, key, Py_EQ);

  000f9	41 b8 02 00 00
	00		 mov	 r8d, 2
  000ff	48 8b 54 24 78	 mov	 rdx, QWORD PTR key$[rsp]
  00104	48 8b 4c 24 38	 mov	 rcx, QWORD PTR startkey$[rsp]
  00109	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0010e	89 44 24 50	 mov	 DWORD PTR cmp$[rsp], eax

; 495  :             Py_DECREF(startkey);

  00112	48 8b 4c 24 38	 mov	 rcx, QWORD PTR startkey$[rsp]
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 496  :             if (cmp < 0)

  0011c	83 7c 24 50 00	 cmp	 DWORD PTR cmp$[rsp], 0
  00121	7d 07		 jge	 SHORT $LN18@lookdict

; 497  :                 return NULL;

  00123	33 c0		 xor	 eax, eax
  00125	e9 57 02 00 00	 jmp	 $LN24@lookdict
$LN18@lookdict:

; 498  :             if (ep0 == mp->ma_keys->dk_entries && ep->me_key == startkey) {

  0012a	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  0012f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00133	48 83 c0 20	 add	 rax, 32			; 00000020H
  00137	48 39 44 24 48	 cmp	 QWORD PTR ep0$[rsp], rax
  0013c	75 37		 jne	 SHORT $LN17@lookdict
  0013e	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00143	48 8b 4c 24 38	 mov	 rcx, QWORD PTR startkey$[rsp]
  00148	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0014c	75 27		 jne	 SHORT $LN17@lookdict

; 499  :                 if (cmp > 0) {

  0014e	83 7c 24 50 00	 cmp	 DWORD PTR cmp$[rsp], 0
  00153	7e 1e		 jle	 SHORT $LN16@lookdict

; 500  :                     *value_addr = &ep->me_value;

  00155	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  0015a	48 83 c0 10	 add	 rax, 16
  0015e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR value_addr$[rsp]
  00166	48 89 01	 mov	 QWORD PTR [rcx], rax

; 501  :                     return ep;

  00169	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  0016e	e9 0e 02 00 00	 jmp	 $LN24@lookdict
$LN16@lookdict:

; 502  :                 }
; 503  :             }
; 504  :             else {

  00173	eb 05		 jmp	 SHORT $LN15@lookdict
$LN17@lookdict:

; 505  :                 /* The dict was mutated, restart */
; 506  :                 goto top;

  00175	e9 9e fe ff ff	 jmp	 $top$20615
$LN15@lookdict:
$LN19@lookdict:

; 507  :             }
; 508  :         }
; 509  :         freeslot = NULL;

  0017a	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR freeslot$[rsp], 0
$LN20@lookdict:

; 510  :     }
; 511  : 
; 512  :     /* In the loop, me_key == dummy is by far (factor of 100s) the
; 513  :        least likely outcome, so test for that last. */
; 514  :     for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {

  00183	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR hash$[rsp]
  0018b	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
  00190	eb 0e		 jmp	 SHORT $LN14@lookdict
$LN13@lookdict:
  00192	48 8b 44 24 30	 mov	 rax, QWORD PTR perturb$[rsp]
  00197	48 c1 e8 05	 shr	 rax, 5
  0019b	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
$LN14@lookdict:

; 515  :         i = (i << 2) + i + perturb + 1;

  001a0	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  001a5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  001aa	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  001ae	48 8b 4c 24 30	 mov	 rcx, QWORD PTR perturb$[rsp]
  001b3	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  001b8	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 516  :         ep = &ep0[i & mask];

  001bd	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  001c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  001c7	48 23 c8	 and	 rcx, rax
  001ca	48 8b c1	 mov	 rax, rcx
  001cd	48 6b c0 18	 imul	 rax, 24
  001d1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ep0$[rsp]
  001d6	48 03 c8	 add	 rcx, rax
  001d9	48 8b c1	 mov	 rax, rcx
  001dc	48 89 44 24 40	 mov	 QWORD PTR ep$[rsp], rax

; 517  :         if (ep->me_key == NULL) {

  001e1	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  001e6	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  001eb	75 46		 jne	 SHORT $LN11@lookdict

; 518  :             if (freeslot == NULL) {

  001ed	48 83 7c 24 58
	00		 cmp	 QWORD PTR freeslot$[rsp], 0
  001f3	75 20		 jne	 SHORT $LN10@lookdict

; 519  :                 *value_addr = &ep->me_value;

  001f5	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  001fa	48 83 c0 10	 add	 rax, 16
  001fe	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR value_addr$[rsp]
  00206	48 89 01	 mov	 QWORD PTR [rcx], rax

; 520  :                 return ep;

  00209	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  0020e	e9 6e 01 00 00	 jmp	 $LN24@lookdict

; 521  :             } else {

  00213	eb 1e		 jmp	 SHORT $LN9@lookdict
$LN10@lookdict:

; 522  :                 *value_addr = &freeslot->me_value;

  00215	48 8b 44 24 58	 mov	 rax, QWORD PTR freeslot$[rsp]
  0021a	48 83 c0 10	 add	 rax, 16
  0021e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR value_addr$[rsp]
  00226	48 89 01	 mov	 QWORD PTR [rcx], rax

; 523  :                 return freeslot;

  00229	48 8b 44 24 58	 mov	 rax, QWORD PTR freeslot$[rsp]
  0022e	e9 4e 01 00 00	 jmp	 $LN24@lookdict
$LN9@lookdict:
$LN11@lookdict:

; 524  :             }
; 525  :         }
; 526  :         if (ep->me_key == key) {

  00233	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00238	48 8b 4c 24 78	 mov	 rcx, QWORD PTR key$[rsp]
  0023d	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00241	75 1e		 jne	 SHORT $LN8@lookdict

; 527  :             *value_addr = &ep->me_value;

  00243	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00248	48 83 c0 10	 add	 rax, 16
  0024c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR value_addr$[rsp]
  00254	48 89 01	 mov	 QWORD PTR [rcx], rax

; 528  :             return ep;

  00257	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  0025c	e9 20 01 00 00	 jmp	 $LN24@lookdict
$LN8@lookdict:

; 529  :         }
; 530  :         if (ep->me_hash == hash && ep->me_key != dummy) {

  00261	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00266	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR hash$[rsp]
  0026e	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00271	0f 85 bd 00 00
	00		 jne	 $LN7@lookdict
  00277	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  0027e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep$[rsp]
  00283	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  00287	0f 84 a7 00 00
	00		 je	 $LN7@lookdict

; 531  :             startkey = ep->me_key;

  0028d	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00292	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00296	48 89 44 24 38	 mov	 QWORD PTR startkey$[rsp], rax

; 532  :             Py_INCREF(startkey);

  0029b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR startkey$[rsp]
  002a0	e8 00 00 00 00	 call	 _Py_IncRef

; 533  :             cmp = PyObject_RichCompareBool(startkey, key, Py_EQ);

  002a5	41 b8 02 00 00
	00		 mov	 r8d, 2
  002ab	48 8b 54 24 78	 mov	 rdx, QWORD PTR key$[rsp]
  002b0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR startkey$[rsp]
  002b5	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  002ba	89 44 24 50	 mov	 DWORD PTR cmp$[rsp], eax

; 534  :             Py_DECREF(startkey);

  002be	48 8b 4c 24 38	 mov	 rcx, QWORD PTR startkey$[rsp]
  002c3	e8 00 00 00 00	 call	 _Py_DecRef

; 535  :             if (cmp < 0) {

  002c8	83 7c 24 50 00	 cmp	 DWORD PTR cmp$[rsp], 0
  002cd	7d 16		 jge	 SHORT $LN6@lookdict

; 536  :                 *value_addr = NULL;

  002cf	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR value_addr$[rsp]
  002d7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 537  :                 return NULL;

  002de	33 c0		 xor	 eax, eax
  002e0	e9 9c 00 00 00	 jmp	 $LN24@lookdict
$LN6@lookdict:

; 538  :             }
; 539  :             if (ep0 == mp->ma_keys->dk_entries && ep->me_key == startkey) {

  002e5	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  002ea	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  002ee	48 83 c0 20	 add	 rax, 32			; 00000020H
  002f2	48 39 44 24 48	 cmp	 QWORD PTR ep0$[rsp], rax
  002f7	75 34		 jne	 SHORT $LN5@lookdict
  002f9	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  002fe	48 8b 4c 24 38	 mov	 rcx, QWORD PTR startkey$[rsp]
  00303	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00307	75 24		 jne	 SHORT $LN5@lookdict

; 540  :                 if (cmp > 0) {

  00309	83 7c 24 50 00	 cmp	 DWORD PTR cmp$[rsp], 0
  0030e	7e 1b		 jle	 SHORT $LN4@lookdict

; 541  :                     *value_addr = &ep->me_value;

  00310	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00315	48 83 c0 10	 add	 rax, 16
  00319	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR value_addr$[rsp]
  00321	48 89 01	 mov	 QWORD PTR [rcx], rax

; 542  :                     return ep;

  00324	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00329	eb 56		 jmp	 SHORT $LN24@lookdict
$LN4@lookdict:

; 543  :                 }
; 544  :             }
; 545  :             else {

  0032b	eb 05		 jmp	 SHORT $LN3@lookdict
$LN5@lookdict:

; 546  :                 /* The dict was mutated, restart */
; 547  :                 goto top;

  0032d	e9 e6 fc ff ff	 jmp	 $LN27@lookdict
$LN3@lookdict:

; 548  :             }

  00332	eb 24		 jmp	 SHORT $LN2@lookdict
$LN7@lookdict:

; 549  :         }
; 550  :         else if (ep->me_key == dummy && freeslot == NULL)

  00334	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  0033b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep$[rsp]
  00340	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  00344	75 12		 jne	 SHORT $LN1@lookdict
  00346	48 83 7c 24 58
	00		 cmp	 QWORD PTR freeslot$[rsp], 0
  0034c	75 0a		 jne	 SHORT $LN1@lookdict

; 551  :             freeslot = ep;

  0034e	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00353	48 89 44 24 58	 mov	 QWORD PTR freeslot$[rsp], rax
$LN1@lookdict:
$LN2@lookdict:

; 552  :     }

  00358	e9 35 fe ff ff	 jmp	 $LN13@lookdict

; 553  :     assert(0);          /* NOT REACHED */

  0035d	33 c0		 xor	 eax, eax
  0035f	85 c0		 test	 eax, eax
  00361	75 1c		 jne	 SHORT $LN26@lookdict
  00363	41 b8 29 02 00
	00		 mov	 r8d, 553		; 00000229H
  00369	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00370	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00377	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0037d	33 c0		 xor	 eax, eax
$LN26@lookdict:

; 554  :     return 0;

  0037f	33 c0		 xor	 eax, eax
$LN24@lookdict:

; 555  : }

  00381	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00385	c3		 ret	 0
lookdict ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\dictobject.c
pdata	SEGMENT
$pdata$lookdict_split DD imagerel lookdict_split
	DD	imagerel lookdict_split+697
	DD	imagerel $unwind$lookdict_split
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookdict_split DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lookdict_split
_TEXT	SEGMENT
i$ = 32
mask$ = 40
perturb$ = 48
ep$ = 56
ep0$ = 64
mp$ = 96
key$ = 104
hash$ = 112
value_addr$ = 120
lookdict_split PROC					; COMDAT

; 671  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 672  :     register size_t i;
; 673  :     register size_t perturb;
; 674  :     register size_t mask = DK_MASK(mp->ma_keys);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  0001d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00021	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00025	48 ff c8	 dec	 rax
  00028	48 89 44 24 28	 mov	 QWORD PTR mask$[rsp], rax

; 675  :     PyDictKeyEntry *ep0 = &mp->ma_keys->dk_entries[0];

  0002d	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  00032	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00036	48 83 c0 20	 add	 rax, 32			; 00000020H
  0003a	48 89 44 24 40	 mov	 QWORD PTR ep0$[rsp], rax

; 676  :     register PyDictKeyEntry *ep;
; 677  : 
; 678  :     if (!PyUnicode_CheckExact(key)) {

  0003f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00046	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  0004b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0004f	74 61		 je	 SHORT $LN8@lookdict_s

; 679  :         ep = lookdict(mp, key, hash, value_addr);

  00051	4c 8b 4c 24 78	 mov	 r9, QWORD PTR value_addr$[rsp]
  00056	4c 8b 44 24 70	 mov	 r8, QWORD PTR hash$[rsp]
  0005b	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  00060	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  00065	e8 00 00 00 00	 call	 lookdict
  0006a	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 680  :         /* lookdict expects a combined-table, so fix value_addr */
; 681  :         i = ep - ep0;

  0006f	48 8b 44 24 40	 mov	 rax, QWORD PTR ep0$[rsp]
  00074	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ep$[rsp]
  00079	48 2b c8	 sub	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	48 99		 cdq
  00081	b9 18 00 00 00	 mov	 ecx, 24
  00086	48 f7 f9	 idiv	 rcx
  00089	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 682  :         *value_addr = &mp->ma_values[i];

  0008e	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  00093	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00097	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0009c	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  000a5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 683  :         return ep;

  000a8	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000ad	e9 02 02 00 00	 jmp	 $LN9@lookdict_s
$LN8@lookdict_s:

; 684  :     }
; 685  :     i = (size_t)hash & mask;

  000b2	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  000b7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  000bc	48 23 c8	 and	 rcx, rax
  000bf	48 8b c1	 mov	 rax, rcx
  000c2	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 686  :     ep = &ep0[i];

  000c7	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  000cc	48 6b c0 18	 imul	 rax, 24
  000d0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep0$[rsp]
  000d5	48 03 c8	 add	 rcx, rax
  000d8	48 8b c1	 mov	 rax, rcx
  000db	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 687  :     assert(ep->me_key == NULL || PyUnicode_CheckExact(ep->me_key));

  000e0	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000e5	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000ea	74 32		 je	 SHORT $LN11@lookdict_s
  000ec	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000f1	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyUnicode_Type
  000fc	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00100	74 1c		 je	 SHORT $LN11@lookdict_s
  00102	41 b8 af 02 00
	00		 mov	 r8d, 687		; 000002afH
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GO@LLKCDEIG@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011c	33 c0		 xor	 eax, eax
$LN11@lookdict_s:

; 688  :     if (ep->me_key == NULL || ep->me_key == key ||
; 689  :         (ep->me_hash == hash && unicode_eq(ep->me_key, key))) {

  0011e	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00123	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00128	74 36		 je	 SHORT $LN6@lookdict_s
  0012a	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0012f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  00134	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00138	74 26		 je	 SHORT $LN6@lookdict_s
  0013a	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0013f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  00144	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00147	75 3b		 jne	 SHORT $LN7@lookdict_s
  00149	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  0014e	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00153	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00157	e8 00 00 00 00	 call	 unicode_eq
  0015c	85 c0		 test	 eax, eax
  0015e	74 24		 je	 SHORT $LN7@lookdict_s
$LN6@lookdict_s:

; 690  :         *value_addr = &mp->ma_values[i];

  00160	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  00165	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00169	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0016e	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00172	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  00177	48 89 01	 mov	 QWORD PTR [rcx], rax

; 691  :         return ep;

  0017a	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0017f	e9 30 01 00 00	 jmp	 $LN9@lookdict_s
$LN7@lookdict_s:

; 692  :     }
; 693  :     for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {

  00184	48 8b 44 24 70	 mov	 rax, QWORD PTR hash$[rsp]
  00189	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
  0018e	eb 0e		 jmp	 SHORT $LN5@lookdict_s
$LN4@lookdict_s:
  00190	48 8b 44 24 30	 mov	 rax, QWORD PTR perturb$[rsp]
  00195	48 c1 e8 05	 shr	 rax, 5
  00199	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
$LN5@lookdict_s:

; 694  :         i = (i << 2) + i + perturb + 1;

  0019e	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  001a3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  001a8	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  001ac	48 8b 4c 24 30	 mov	 rcx, QWORD PTR perturb$[rsp]
  001b1	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  001b6	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 695  :         ep = &ep0[i & mask];

  001bb	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  001c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  001c5	48 23 c8	 and	 rcx, rax
  001c8	48 8b c1	 mov	 rax, rcx
  001cb	48 6b c0 18	 imul	 rax, 24
  001cf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep0$[rsp]
  001d4	48 03 c8	 add	 rcx, rax
  001d7	48 8b c1	 mov	 rax, rcx
  001da	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 696  :         assert(ep->me_key == NULL || PyUnicode_CheckExact(ep->me_key));

  001df	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  001e4	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  001e9	74 32		 je	 SHORT $LN12@lookdict_s
  001eb	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  001f0	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyUnicode_Type
  001fb	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001ff	74 1c		 je	 SHORT $LN12@lookdict_s
  00201	41 b8 b8 02 00
	00		 mov	 r8d, 696		; 000002b8H
  00207	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0020e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GO@LLKCDEIG@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
  00215	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0021b	33 c0		 xor	 eax, eax
$LN12@lookdict_s:

; 697  :         if (ep->me_key == NULL || ep->me_key == key ||
; 698  :             (ep->me_hash == hash && unicode_eq(ep->me_key, key))) {

  0021d	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00222	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00227	74 36		 je	 SHORT $LN1@lookdict_s
  00229	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0022e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  00233	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00237	74 26		 je	 SHORT $LN1@lookdict_s
  00239	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0023e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  00243	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00246	75 43		 jne	 SHORT $LN2@lookdict_s
  00248	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  0024d	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00252	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00256	e8 00 00 00 00	 call	 unicode_eq
  0025b	85 c0		 test	 eax, eax
  0025d	74 2c		 je	 SHORT $LN2@lookdict_s
$LN1@lookdict_s:

; 699  :             *value_addr = &mp->ma_values[i & mask];

  0025f	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  00264	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00269	48 23 c8	 and	 rcx, rax
  0026c	48 8b c1	 mov	 rax, rcx
  0026f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  00274	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00278	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0027c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  00281	48 89 01	 mov	 QWORD PTR [rcx], rax

; 700  :             return ep;

  00284	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00289	eb 29		 jmp	 SHORT $LN9@lookdict_s
$LN2@lookdict_s:

; 701  :         }
; 702  :     }

  0028b	e9 00 ff ff ff	 jmp	 $LN4@lookdict_s

; 703  :     assert(0);          /* NOT REACHED */

  00290	33 c0		 xor	 eax, eax
  00292	85 c0		 test	 eax, eax
  00294	75 1c		 jne	 SHORT $LN13@lookdict_s
  00296	41 b8 bf 02 00
	00		 mov	 r8d, 703		; 000002bfH
  0029c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  002a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  002aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b0	33 c0		 xor	 eax, eax
$LN13@lookdict_s:

; 704  :     return 0;

  002b2	33 c0		 xor	 eax, eax
$LN9@lookdict_s:

; 705  : }

  002b4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002b8	c3		 ret	 0
lookdict_split ENDP
_TEXT	ENDS
PUBLIC	PyDict_Next
PUBLIC	??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	_PyDict_HasOnlyStringKeys
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_HasOnlyStringKeys DD imagerel $LN8
	DD	imagerel $LN8+168
	DD	imagerel $unwind$_PyDict_HasOnlyStringKeys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_HasOnlyStringKeys DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'd'
	DB	00H, 'i', 00H, 'c', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyDict_HasOnlyStringKeys
_TEXT	SEGMENT
value$ = 32
key$ = 40
pos$ = 48
dict$ = 80
_PyDict_HasOnlyStringKeys PROC				; COMDAT

; 709  : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 710  :     Py_ssize_t pos = 0;

  00009	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0

; 711  :     PyObject *key, *value;
; 712  :     assert(PyDict_Check(dict));

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR dict$[rsp]
  00017	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00021	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00026	85 c0		 test	 eax, eax
  00028	75 1c		 jne	 SHORT $LN7@PyDict_Has
  0002a	41 b8 c8 02 00
	00		 mov	 r8d, 712		; 000002c8H
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00044	33 c0		 xor	 eax, eax
$LN7@PyDict_Has:

; 713  :     /* Shortcut */
; 714  :     if (((PyDictObject *)dict)->ma_keys->dk_lookup != lookdict)

  00046	48 8b 44 24 50	 mov	 rax, QWORD PTR dict$[rsp]
  0004b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  00056	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  0005a	74 07		 je	 SHORT $LN4@PyDict_Has

; 715  :         return 1;

  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	eb 40		 jmp	 SHORT $LN5@PyDict_Has
$LN4@PyDict_Has:
$LN3@PyDict_Has:

; 716  :     while (PyDict_Next(dict, &pos, &key, &value))

  00063	4c 8d 4c 24 20	 lea	 r9, QWORD PTR value$[rsp]
  00068	4c 8d 44 24 28	 lea	 r8, QWORD PTR key$[rsp]
  0006d	48 8d 54 24 30	 lea	 rdx, QWORD PTR pos$[rsp]
  00072	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dict$[rsp]
  00077	e8 00 00 00 00	 call	 PyDict_Next
  0007c	85 c0		 test	 eax, eax
  0007e	74 1e		 je	 SHORT $LN2@PyDict_Has

; 717  :         if (!PyUnicode_Check(key))

  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00085	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00089	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00094	85 c0		 test	 eax, eax
  00096	75 04		 jne	 SHORT $LN1@PyDict_Has

; 718  :             return 0;

  00098	33 c0		 xor	 eax, eax
  0009a	eb 07		 jmp	 SHORT $LN5@PyDict_Has
$LN1@PyDict_Has:

; 719  :     return 1;

  0009c	eb c5		 jmp	 SHORT $LN3@PyDict_Has
$LN2@PyDict_Has:
  0009e	b8 01 00 00 00	 mov	 eax, 1
$LN5@PyDict_Has:

; 720  : }

  000a3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a7	c3		 ret	 0
_PyDict_HasOnlyStringKeys ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_1IC@KDIFNHFG@?$AA?$CB?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAG?$AAC?$AA_?$AAM?$AAA?$AAY?$AA_?$AAB?$AAE?$AA_?$AAT?$AAR?$AAA?$AAC?$AAK?$AAE?$AAD?$AA?$CI?$AA?5?$AAm?$AAp@ ; `string'
PUBLIC	??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@	; `string'
PUBLIC	??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@ ; `string'
PUBLIC	_PyDict_MaybeUntrack
EXTRN	PyTuple_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_MaybeUntrack DD imagerel $LN113
	DD	imagerel $LN113+3353
	DD	imagerel $unwind$_PyDict_MaybeUntrack
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_MaybeUntrack DD 020c01H
	DD	027010cH
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IC@KDIFNHFG@?$AA?$CB?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAG?$AAC?$AA_?$AAM?$AAA?$AAY?$AA_?$AAB?$AAE?$AA_?$AAT?$AAR?$AAA?$AAC?$AAK?$AAE?$AAD?$AA?$CI?$AA?5?$AAm?$AAp@
CONST	SEGMENT
??_C@_1IC@KDIFNHFG@?$AA?$CB?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAG?$AAC?$AA_?$AAM?$AAA?$AAY?$AA_?$AAB?$AAE?$AA_?$AAT?$AAR?$AAA?$AAC?$AAK?$AAE?$AAD?$AA?$CI?$AA?5?$AAm?$AAp@ DB '!'
	DB	00H, '_', 00H, 'P', 00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, '_', 00H, 'G', 00H, 'C', 00H, '_'
	DB	00H, 'M', 00H, 'A', 00H, 'Y', 00H, '_', 00H, 'B', 00H, 'E', 00H
	DB	'_', 00H, 'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'K', 00H, 'E'
	DB	00H, 'D', 00H, '(', 00H, ' ', 00H, 'm', 00H, 'p', 00H, '-', 00H
	DB	'>', 00H, 'm', 00H, 'a', 00H, '_', 00H, 'k', 00H, 'e', 00H, 'y'
	DB	00H, 's', 00H, '-', 00H, '>', 00H, 'd', 00H, 'k', 00H, '_', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '[', 00H, 'i', 00H, ']', 00H, '.', 00H, 'm', 00H, 'e', 00H
	DB	'_', 00H, 'k', 00H, 'e', 00H, 'y', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
CONST	SEGMENT
??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@ DB '_PyDict_MaybeUntrack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@ DB '..\Objects\dicto'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyDict_MaybeUntrack
_TEXT	SEGMENT
value$ = 48
i$ = 56
mp$ = 64
size$ = 72
ep0$20818 = 80
g$20844 = 88
tv87 = 96
tv82 = 104
tv85 = 112
tv189 = 116
tv162 = 120
tv150 = 124
tv148 = 128
tv160 = 132
tv184 = 136
tv179 = 144
tv182 = 152
tv187 = 156
tv299 = 160
tv252 = 164
tv225 = 168
tv223 = 172
tv250 = 176
tv294 = 180
tv289 = 184
tv292 = 192
tv297 = 196
tv372 = 200
tv345 = 204
tv333 = 208
tv331 = 212
tv343 = 216
tv367 = 220
tv362 = 224
tv365 = 232
tv370 = 236
tv462 = 240
tv423 = 244
tv402 = 248
tv400 = 252
tv501 = 256
tv421 = 264
tv457 = 268
tv452 = 272
tv455 = 280
tv460 = 284
tv479 = 288
op$ = 320
_PyDict_MaybeUntrack PROC				; COMDAT

; 734  : {

$LN113:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H

; 735  :     PyDictObject *mp;
; 736  :     PyObject *value;
; 737  :     Py_ssize_t i, size;
; 738  : 
; 739  :     if (!PyDict_CheckExact(op) || !_PyObject_GC_IS_TRACKED(op))

  0000c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00013	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR op$[rsp]
  0001b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001f	74 19		 je	 SHORT $LN18@PyDict_May
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00028	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR op$[rsp]
  00030	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  00034	0f 85 ad 00 00
	00		 jne	 $LN19@PyDict_May
$LN18@PyDict_May:
  0003a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00042	4c 8b 8c 24 40
	01 00 00	 mov	 r9, QWORD PTR op$[rsp]
  0004a	41 b8 e3 02 00
	00		 mov	 r8d, 739		; 000002e3H
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  0005e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00063	85 c0		 test	 eax, eax
  00065	74 0a		 je	 SHORT $LN27@PyDict_May
  00067	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
  0006f	eb 6f		 jmp	 SHORT $LN28@PyDict_May
$LN27@PyDict_May:
  00071	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00079	4c 8b 8c 24 40
	01 00 00	 mov	 r9, QWORD PTR op$[rsp]
  00081	41 b8 e3 02 00
	00		 mov	 r8d, 739		; 000002e3H
  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00095	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009a	85 c0		 test	 eax, eax
  0009c	74 0b		 je	 SHORT $LN23@PyDict_May
  0009e	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR tv82[rsp], 0
  000a7	eb 11		 jmp	 SHORT $LN24@PyDict_May
$LN23@PyDict_May:
  000a9	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR op$[rsp]
  000b1	48 83 e8 18	 sub	 rax, 24
  000b5	48 89 44 24 68	 mov	 QWORD PTR tv82[rsp], rax
$LN24@PyDict_May:
  000ba	48 8b 44 24 68	 mov	 rax, QWORD PTR tv82[rsp]
  000bf	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000c4	74 0a		 je	 SHORT $LN25@PyDict_May
  000c6	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv85[rsp], 1
  000ce	eb 08		 jmp	 SHORT $LN26@PyDict_May
$LN25@PyDict_May:
  000d0	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
$LN26@PyDict_May:
  000d8	8b 44 24 70	 mov	 eax, DWORD PTR tv85[rsp]
  000dc	89 44 24 60	 mov	 DWORD PTR tv87[rsp], eax
$LN28@PyDict_May:
  000e0	83 7c 24 60 00	 cmp	 DWORD PTR tv87[rsp], 0
  000e5	75 05		 jne	 SHORT $LN20@PyDict_May
$LN19@PyDict_May:

; 740  :         return;

  000e7	e9 25 0c 00 00	 jmp	 $LN21@PyDict_May
$LN20@PyDict_May:

; 741  : 
; 742  :     mp = (PyDictObject *) op;

  000ec	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR op$[rsp]
  000f4	48 89 44 24 40	 mov	 QWORD PTR mp$[rsp], rax

; 743  :     size = DK_SIZE(mp->ma_keys);

  000f9	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  000fe	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00102	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00106	48 89 44 24 48	 mov	 QWORD PTR size$[rsp], rax

; 744  :     if (_PyDict_HasSplitTable(mp)) {

  0010b	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00110	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00115	0f 84 80 05 00
	00		 je	 $LN17@PyDict_May

; 745  :         for (i = 0; i < size; i++) {

  0011b	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00124	eb 0d		 jmp	 SHORT $LN16@PyDict_May
$LN15@PyDict_May:
  00126	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  0012b	48 ff c0	 inc	 rax
  0012e	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN16@PyDict_May:
  00133	48 8b 44 24 48	 mov	 rax, QWORD PTR size$[rsp]
  00138	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  0013d	0f 8d 53 05 00
	00		 jge	 $LN14@PyDict_May

; 746  :             if ((value = mp->ma_values[i]) == NULL)

  00143	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00148	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0014c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00151	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00155	48 89 44 24 30	 mov	 QWORD PTR value$[rsp], rax
  0015a	48 83 7c 24 30
	00		 cmp	 QWORD PTR value$[rsp], 0
  00160	75 02		 jne	 SHORT $LN13@PyDict_May

; 747  :                 continue;

  00162	eb c2		 jmp	 SHORT $LN15@PyDict_May
$LN13@PyDict_May:

; 748  :             if (_PyObject_GC_MAY_BE_TRACKED(value)) {

  00164	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0016c	4c 8b 4c 24 30	 mov	 r9, QWORD PTR value$[rsp]
  00171	41 b8 ec 02 00
	00		 mov	 r8d, 748		; 000002ecH
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00185	e8 00 00 00 00	 call	 _PyParallel_Guard
  0018a	85 c0		 test	 eax, eax
  0018c	74 0d		 je	 SHORT $LN47@PyDict_May
  0018e	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv189[rsp], 0
  00196	e9 dd 01 00 00	 jmp	 $LN48@PyDict_May
$LN47@PyDict_May:
  0019b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a3	4c 8b 4c 24 30	 mov	 r9, QWORD PTR value$[rsp]
  001a8	41 b8 ec 02 00
	00		 mov	 r8d, 748		; 000002ecH
  001ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  001bc	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c1	85 c0		 test	 eax, eax
  001c3	74 0d		 je	 SHORT $LN36@PyDict_May
  001c5	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv162[rsp], 0
  001cd	e9 a3 00 00 00	 jmp	 $LN37@PyDict_May
$LN36@PyDict_May:
  001d2	e8 00 00 00 00	 call	 _Py_PXCTX
  001d7	85 c0		 test	 eax, eax
  001d9	74 0a		 je	 SHORT $LN31@PyDict_May
  001db	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv150[rsp], 0
  001e3	eb 3b		 jmp	 SHORT $LN32@PyDict_May
$LN31@PyDict_May:
  001e5	48 8b 44 24 30	 mov	 rax, QWORD PTR value$[rsp]
  001ea	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001ee	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001f4	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  001f9	85 c0		 test	 eax, eax
  001fb	74 0d		 je	 SHORT $LN29@PyDict_May
  001fd	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv148[rsp], 1
  00208	eb 0b		 jmp	 SHORT $LN30@PyDict_May
$LN29@PyDict_May:
  0020a	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv148[rsp], 0
$LN30@PyDict_May:
  00215	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv148[rsp]
  0021c	89 44 24 7c	 mov	 DWORD PTR tv150[rsp], eax
$LN32@PyDict_May:
  00220	83 7c 24 7c 00	 cmp	 DWORD PTR tv150[rsp], 0
  00225	74 38		 je	 SHORT $LN34@PyDict_May
  00227	48 8b 44 24 30	 mov	 rax, QWORD PTR value$[rsp]
  0022c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00230	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  00238	74 18		 je	 SHORT $LN33@PyDict_May
  0023a	48 8b 44 24 30	 mov	 rax, QWORD PTR value$[rsp]
  0023f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00243	48 8b 4c 24 30	 mov	 rcx, QWORD PTR value$[rsp]
  00248	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  0024e	85 c0		 test	 eax, eax
  00250	74 0d		 je	 SHORT $LN34@PyDict_May
$LN33@PyDict_May:
  00252	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv160[rsp], 1
  0025d	eb 0b		 jmp	 SHORT $LN35@PyDict_May
$LN34@PyDict_May:
  0025f	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv160[rsp], 0
$LN35@PyDict_May:
  0026a	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv160[rsp]
  00271	89 44 24 78	 mov	 DWORD PTR tv162[rsp], eax
$LN37@PyDict_May:
  00275	83 7c 24 78 00	 cmp	 DWORD PTR tv162[rsp], 0
  0027a	0f 84 e2 00 00
	00		 je	 $LN45@PyDict_May
  00280	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00287	48 8b 4c 24 30	 mov	 rcx, QWORD PTR value$[rsp]
  0028c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00290	0f 85 bf 00 00
	00		 jne	 $LN44@PyDict_May
  00296	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0029e	4c 8b 4c 24 30	 mov	 r9, QWORD PTR value$[rsp]
  002a3	41 b8 ec 02 00
	00		 mov	 r8d, 748		; 000002ecH
  002a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  002b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  002b7	e8 00 00 00 00	 call	 _PyParallel_Guard
  002bc	85 c0		 test	 eax, eax
  002be	74 0d		 je	 SHORT $LN42@PyDict_May
  002c0	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv184[rsp], 0
  002cb	eb 7e		 jmp	 SHORT $LN43@PyDict_May
$LN42@PyDict_May:
  002cd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002d5	4c 8b 4c 24 30	 mov	 r9, QWORD PTR value$[rsp]
  002da	41 b8 ec 02 00
	00		 mov	 r8d, 748		; 000002ecH
  002e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  002e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  002ee	e8 00 00 00 00	 call	 _PyParallel_Guard
  002f3	85 c0		 test	 eax, eax
  002f5	74 0e		 je	 SHORT $LN38@PyDict_May
  002f7	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv179[rsp], 0
  00303	eb 11		 jmp	 SHORT $LN39@PyDict_May
$LN38@PyDict_May:
  00305	48 8b 44 24 30	 mov	 rax, QWORD PTR value$[rsp]
  0030a	48 83 e8 18	 sub	 rax, 24
  0030e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv179[rsp], rax
$LN39@PyDict_May:
  00316	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv179[rsp]
  0031e	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00323	74 0d		 je	 SHORT $LN40@PyDict_May
  00325	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv182[rsp], 1
  00330	eb 0b		 jmp	 SHORT $LN41@PyDict_May
$LN40@PyDict_May:
  00332	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv182[rsp], 0
$LN41@PyDict_May:
  0033d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv182[rsp]
  00344	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
$LN43@PyDict_May:
  0034b	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR tv184[rsp], 0
  00353	74 0d		 je	 SHORT $LN45@PyDict_May
$LN44@PyDict_May:
  00355	c7 84 24 9c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv187[rsp], 1
  00360	eb 0b		 jmp	 SHORT $LN46@PyDict_May
$LN45@PyDict_May:
  00362	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv187[rsp], 0
$LN46@PyDict_May:
  0036d	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv187[rsp]
  00374	89 44 24 74	 mov	 DWORD PTR tv189[rsp], eax
$LN48@PyDict_May:
  00378	83 7c 24 74 00	 cmp	 DWORD PTR tv189[rsp], 0
  0037d	0f 84 0e 03 00
	00		 je	 $LN12@PyDict_May

; 749  :                 assert(!_PyObject_GC_MAY_BE_TRACKED(
; 750  :                     mp->ma_keys->dk_entries[i].me_key));

  00383	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00388	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0038c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00391	48 6b c9 18	 imul	 rcx, 24
  00395	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0039d	4c 8b 4c 08 28	 mov	 r9, QWORD PTR [rax+rcx+40]
  003a2	41 b8 ee 02 00
	00		 mov	 r8d, 750		; 000002eeH
  003a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  003af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  003b6	e8 00 00 00 00	 call	 _PyParallel_Guard
  003bb	85 c0		 test	 eax, eax
  003bd	74 10		 je	 SHORT $LN67@PyDict_May
  003bf	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv299[rsp], 0
  003ca	e9 97 02 00 00	 jmp	 $LN68@PyDict_May
$LN67@PyDict_May:
  003cf	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  003d4	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  003d8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  003dd	48 6b c9 18	 imul	 rcx, 24
  003e1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003e9	4c 8b 4c 08 28	 mov	 r9, QWORD PTR [rax+rcx+40]
  003ee	41 b8 ee 02 00
	00		 mov	 r8d, 750		; 000002eeH
  003f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  003fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00402	e8 00 00 00 00	 call	 _PyParallel_Guard
  00407	85 c0		 test	 eax, eax
  00409	74 10		 je	 SHORT $LN56@PyDict_May
  0040b	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv252[rsp], 0
  00416	e9 f7 00 00 00	 jmp	 $LN57@PyDict_May
$LN56@PyDict_May:
  0041b	e8 00 00 00 00	 call	 _Py_PXCTX
  00420	85 c0		 test	 eax, eax
  00422	74 0d		 je	 SHORT $LN51@PyDict_May
  00424	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv225[rsp], 0
  0042f	eb 50		 jmp	 SHORT $LN52@PyDict_May
$LN51@PyDict_May:
  00431	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00436	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0043a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  0043f	48 6b c9 18	 imul	 rcx, 24
  00443	48 8b 44 08 28	 mov	 rax, QWORD PTR [rax+rcx+40]
  00448	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0044c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00452	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00457	85 c0		 test	 eax, eax
  00459	74 0d		 je	 SHORT $LN49@PyDict_May
  0045b	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv223[rsp], 1
  00466	eb 0b		 jmp	 SHORT $LN50@PyDict_May
$LN49@PyDict_May:
  00468	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv223[rsp], 0
$LN50@PyDict_May:
  00473	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv223[rsp]
  0047a	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv225[rsp], eax
$LN52@PyDict_May:
  00481	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR tv225[rsp], 0
  00489	74 6e		 je	 SHORT $LN54@PyDict_May
  0048b	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00490	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00494	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00499	48 6b c9 18	 imul	 rcx, 24
  0049d	48 8b 44 08 28	 mov	 rax, QWORD PTR [rax+rcx+40]
  004a2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004a6	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  004ae	74 3c		 je	 SHORT $LN53@PyDict_May
  004b0	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  004b5	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  004b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  004be	48 6b c9 18	 imul	 rcx, 24
  004c2	48 8b 54 24 40	 mov	 rdx, QWORD PTR mp$[rsp]
  004c7	48 8b 52 68	 mov	 rdx, QWORD PTR [rdx+104]
  004cb	4c 8b 44 24 38	 mov	 r8, QWORD PTR i$[rsp]
  004d0	4d 6b c0 18	 imul	 r8, 24
  004d4	4a 8b 54 02 28	 mov	 rdx, QWORD PTR [rdx+r8+40]
  004d9	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  004dd	48 8b 4c 08 28	 mov	 rcx, QWORD PTR [rax+rcx+40]
  004e2	ff 92 a0 01 00
	00		 call	 QWORD PTR [rdx+416]
  004e8	85 c0		 test	 eax, eax
  004ea	74 0d		 je	 SHORT $LN54@PyDict_May
$LN53@PyDict_May:
  004ec	c7 84 24 b0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv250[rsp], 1
  004f7	eb 0b		 jmp	 SHORT $LN55@PyDict_May
$LN54@PyDict_May:
  004f9	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv250[rsp], 0
$LN55@PyDict_May:
  00504	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR tv250[rsp]
  0050b	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv252[rsp], eax
$LN57@PyDict_May:
  00512	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR tv252[rsp], 0
  0051a	0f 84 2d 01 00
	00		 je	 $LN65@PyDict_May
  00520	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00525	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00529	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  0052e	48 6b c9 18	 imul	 rcx, 24
  00532	48 8b 44 08 28	 mov	 rax, QWORD PTR [rax+rcx+40]
  00537	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  0053e	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00542	0f 85 f8 00 00
	00		 jne	 $LN64@PyDict_May
  00548	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  0054d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00551	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00556	48 6b c9 18	 imul	 rcx, 24
  0055a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00562	4c 8b 4c 08 28	 mov	 r9, QWORD PTR [rax+rcx+40]
  00567	41 b8 ee 02 00
	00		 mov	 r8d, 750		; 000002eeH
  0056d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00574	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  0057b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00580	85 c0		 test	 eax, eax
  00582	74 10		 je	 SHORT $LN62@PyDict_May
  00584	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv294[rsp], 0
  0058f	e9 a2 00 00 00	 jmp	 $LN63@PyDict_May
$LN62@PyDict_May:
  00594	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00599	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0059d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  005a2	48 6b c9 18	 imul	 rcx, 24
  005a6	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005ae	4c 8b 4c 08 28	 mov	 r9, QWORD PTR [rax+rcx+40]
  005b3	41 b8 ee 02 00
	00		 mov	 r8d, 750		; 000002eeH
  005b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  005c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  005c7	e8 00 00 00 00	 call	 _PyParallel_Guard
  005cc	85 c0		 test	 eax, eax
  005ce	74 0e		 je	 SHORT $LN58@PyDict_May
  005d0	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv289[rsp], 0
  005dc	eb 23		 jmp	 SHORT $LN59@PyDict_May
$LN58@PyDict_May:
  005de	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  005e3	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  005e7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  005ec	48 6b c9 18	 imul	 rcx, 24
  005f0	48 8b 44 08 28	 mov	 rax, QWORD PTR [rax+rcx+40]
  005f5	48 83 e8 18	 sub	 rax, 24
  005f9	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv289[rsp], rax
$LN59@PyDict_May:
  00601	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv289[rsp]
  00609	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0060e	74 0d		 je	 SHORT $LN60@PyDict_May
  00610	c7 84 24 c0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv292[rsp], 1
  0061b	eb 0b		 jmp	 SHORT $LN61@PyDict_May
$LN60@PyDict_May:
  0061d	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv292[rsp], 0
$LN61@PyDict_May:
  00628	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv292[rsp]
  0062f	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv294[rsp], eax
$LN63@PyDict_May:
  00636	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR tv294[rsp], 0
  0063e	74 0d		 je	 SHORT $LN65@PyDict_May
$LN64@PyDict_May:
  00640	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv297[rsp], 1
  0064b	eb 0b		 jmp	 SHORT $LN66@PyDict_May
$LN65@PyDict_May:
  0064d	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv297[rsp], 0
$LN66@PyDict_May:
  00658	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv297[rsp]
  0065f	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv299[rsp], eax
$LN68@PyDict_May:
  00666	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR tv299[rsp], 0
  0066e	74 1c		 je	 SHORT $LN69@PyDict_May
  00670	41 b8 ee 02 00
	00		 mov	 r8d, 750		; 000002eeH
  00676	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0067d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1IC@KDIFNHFG@?$AA?$CB?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAG?$AAC?$AA_?$AAM?$AAA?$AAY?$AA_?$AAB?$AAE?$AA_?$AAT?$AAR?$AAA?$AAC?$AAK?$AAE?$AAD?$AA?$CI?$AA?5?$AAm?$AAp@
  00684	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0068a	33 c0		 xor	 eax, eax
$LN69@PyDict_May:

; 751  :                 return;

  0068c	e9 80 06 00 00	 jmp	 $LN21@PyDict_May
$LN12@PyDict_May:

; 752  :             }
; 753  :         }

  00691	e9 90 fa ff ff	 jmp	 $LN15@PyDict_May
$LN14@PyDict_May:

; 754  :     }
; 755  :     else {

  00696	e9 75 05 00 00	 jmp	 $LN11@PyDict_May
$LN17@PyDict_May:

; 756  :         PyDictKeyEntry *ep0 = &mp->ma_keys->dk_entries[0];

  0069b	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  006a0	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  006a4	48 83 c0 20	 add	 rax, 32			; 00000020H
  006a8	48 89 44 24 50	 mov	 QWORD PTR ep0$20818[rsp], rax

; 757  :         for (i = 0; i < size; i++) {

  006ad	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  006b6	eb 0d		 jmp	 SHORT $LN10@PyDict_May
$LN9@PyDict_May:
  006b8	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  006bd	48 ff c0	 inc	 rax
  006c0	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN10@PyDict_May:
  006c5	48 8b 44 24 48	 mov	 rax, QWORD PTR size$[rsp]
  006ca	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  006cf	0f 8d 3b 05 00
	00		 jge	 $LN8@PyDict_May

; 758  :             if ((value = ep0[i].me_value) == NULL)

  006d5	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  006da	48 6b c0 18	 imul	 rax, 24
  006de	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ep0$20818[rsp]
  006e3	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  006e8	48 89 44 24 30	 mov	 QWORD PTR value$[rsp], rax
  006ed	48 83 7c 24 30
	00		 cmp	 QWORD PTR value$[rsp], 0
  006f3	75 02		 jne	 SHORT $LN7@PyDict_May

; 759  :                 continue;

  006f5	eb c1		 jmp	 SHORT $LN9@PyDict_May
$LN7@PyDict_May:

; 760  :             if (_PyObject_GC_MAY_BE_TRACKED(value) ||
; 761  :                 _PyObject_GC_MAY_BE_TRACKED(ep0[i].me_key))

  006f7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006ff	4c 8b 4c 24 30	 mov	 r9, QWORD PTR value$[rsp]
  00704	41 b8 f8 02 00
	00		 mov	 r8d, 760		; 000002f8H
  0070a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00711	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00718	e8 00 00 00 00	 call	 _PyParallel_Guard
  0071d	85 c0		 test	 eax, eax
  0071f	74 10		 je	 SHORT $LN88@PyDict_May
  00721	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv372[rsp], 0
  0072c	e9 f2 01 00 00	 jmp	 $LN89@PyDict_May
$LN88@PyDict_May:
  00731	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00739	4c 8b 4c 24 30	 mov	 r9, QWORD PTR value$[rsp]
  0073e	41 b8 f8 02 00
	00		 mov	 r8d, 760		; 000002f8H
  00744	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0074b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00752	e8 00 00 00 00	 call	 _PyParallel_Guard
  00757	85 c0		 test	 eax, eax
  00759	74 10		 je	 SHORT $LN77@PyDict_May
  0075b	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv345[rsp], 0
  00766	e9 af 00 00 00	 jmp	 $LN78@PyDict_May
$LN77@PyDict_May:
  0076b	e8 00 00 00 00	 call	 _Py_PXCTX
  00770	85 c0		 test	 eax, eax
  00772	74 0d		 je	 SHORT $LN72@PyDict_May
  00774	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv333[rsp], 0
  0077f	eb 3e		 jmp	 SHORT $LN73@PyDict_May
$LN72@PyDict_May:
  00781	48 8b 44 24 30	 mov	 rax, QWORD PTR value$[rsp]
  00786	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0078a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00790	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00795	85 c0		 test	 eax, eax
  00797	74 0d		 je	 SHORT $LN70@PyDict_May
  00799	c7 84 24 d4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv331[rsp], 1
  007a4	eb 0b		 jmp	 SHORT $LN71@PyDict_May
$LN70@PyDict_May:
  007a6	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv331[rsp], 0
$LN71@PyDict_May:
  007b1	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR tv331[rsp]
  007b8	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv333[rsp], eax
$LN73@PyDict_May:
  007bf	83 bc 24 d0 00
	00 00 00	 cmp	 DWORD PTR tv333[rsp], 0
  007c7	74 38		 je	 SHORT $LN75@PyDict_May
  007c9	48 8b 44 24 30	 mov	 rax, QWORD PTR value$[rsp]
  007ce	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007d2	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  007da	74 18		 je	 SHORT $LN74@PyDict_May
  007dc	48 8b 44 24 30	 mov	 rax, QWORD PTR value$[rsp]
  007e1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007e5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR value$[rsp]
  007ea	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  007f0	85 c0		 test	 eax, eax
  007f2	74 0d		 je	 SHORT $LN75@PyDict_May
$LN74@PyDict_May:
  007f4	c7 84 24 d8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv343[rsp], 1
  007ff	eb 0b		 jmp	 SHORT $LN76@PyDict_May
$LN75@PyDict_May:
  00801	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv343[rsp], 0
$LN76@PyDict_May:
  0080c	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR tv343[rsp]
  00813	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv345[rsp], eax
$LN78@PyDict_May:
  0081a	83 bc 24 cc 00
	00 00 00	 cmp	 DWORD PTR tv345[rsp], 0
  00822	0f 84 e2 00 00
	00		 je	 $LN86@PyDict_May
  00828	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  0082f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR value$[rsp]
  00834	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00838	0f 85 bf 00 00
	00		 jne	 $LN85@PyDict_May
  0083e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00846	4c 8b 4c 24 30	 mov	 r9, QWORD PTR value$[rsp]
  0084b	41 b8 f8 02 00
	00		 mov	 r8d, 760		; 000002f8H
  00851	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00858	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  0085f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00864	85 c0		 test	 eax, eax
  00866	74 0d		 je	 SHORT $LN83@PyDict_May
  00868	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv367[rsp], 0
  00873	eb 7e		 jmp	 SHORT $LN84@PyDict_May
$LN83@PyDict_May:
  00875	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0087d	4c 8b 4c 24 30	 mov	 r9, QWORD PTR value$[rsp]
  00882	41 b8 f8 02 00
	00		 mov	 r8d, 760		; 000002f8H
  00888	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0088f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00896	e8 00 00 00 00	 call	 _PyParallel_Guard
  0089b	85 c0		 test	 eax, eax
  0089d	74 0e		 je	 SHORT $LN79@PyDict_May
  0089f	48 c7 84 24 e0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv362[rsp], 0
  008ab	eb 11		 jmp	 SHORT $LN80@PyDict_May
$LN79@PyDict_May:
  008ad	48 8b 44 24 30	 mov	 rax, QWORD PTR value$[rsp]
  008b2	48 83 e8 18	 sub	 rax, 24
  008b6	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv362[rsp], rax
$LN80@PyDict_May:
  008be	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tv362[rsp]
  008c6	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  008cb	74 0d		 je	 SHORT $LN81@PyDict_May
  008cd	c7 84 24 e8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv365[rsp], 1
  008d8	eb 0b		 jmp	 SHORT $LN82@PyDict_May
$LN81@PyDict_May:
  008da	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv365[rsp], 0
$LN82@PyDict_May:
  008e5	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR tv365[rsp]
  008ec	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv367[rsp], eax
$LN84@PyDict_May:
  008f3	83 bc 24 dc 00
	00 00 00	 cmp	 DWORD PTR tv367[rsp], 0
  008fb	74 0d		 je	 SHORT $LN86@PyDict_May
$LN85@PyDict_May:
  008fd	c7 84 24 ec 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv370[rsp], 1
  00908	eb 0b		 jmp	 SHORT $LN87@PyDict_May
$LN86@PyDict_May:
  0090a	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv370[rsp], 0
$LN87@PyDict_May:
  00915	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR tv370[rsp]
  0091c	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv372[rsp], eax
$LN89@PyDict_May:
  00923	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR tv372[rsp], 0
  0092b	0f 85 d5 02 00
	00		 jne	 $LN5@PyDict_May
  00931	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00936	48 6b c0 18	 imul	 rax, 24
  0093a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00942	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ep0$20818[rsp]
  00947	4c 8b 4c 01 08	 mov	 r9, QWORD PTR [rcx+rax+8]
  0094c	41 b8 f9 02 00
	00		 mov	 r8d, 761		; 000002f9H
  00952	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00959	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00960	e8 00 00 00 00	 call	 _PyParallel_Guard
  00965	85 c0		 test	 eax, eax
  00967	74 10		 je	 SHORT $LN108@PyDict_May
  00969	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv462[rsp], 0
  00974	e9 83 02 00 00	 jmp	 $LN109@PyDict_May
$LN108@PyDict_May:
  00979	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  0097e	48 6b c0 18	 imul	 rax, 24
  00982	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0098a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ep0$20818[rsp]
  0098f	4c 8b 4c 01 08	 mov	 r9, QWORD PTR [rcx+rax+8]
  00994	41 b8 f9 02 00
	00		 mov	 r8d, 761		; 000002f9H
  0099a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  009a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  009a8	e8 00 00 00 00	 call	 _PyParallel_Guard
  009ad	85 c0		 test	 eax, eax
  009af	74 10		 je	 SHORT $LN97@PyDict_May
  009b1	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv423[rsp], 0
  009bc	e9 f7 00 00 00	 jmp	 $LN98@PyDict_May
$LN97@PyDict_May:
  009c1	e8 00 00 00 00	 call	 _Py_PXCTX
  009c6	85 c0		 test	 eax, eax
  009c8	74 0d		 je	 SHORT $LN92@PyDict_May
  009ca	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv402[rsp], 0
  009d5	eb 4c		 jmp	 SHORT $LN93@PyDict_May
$LN92@PyDict_May:
  009d7	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  009dc	48 6b c0 18	 imul	 rax, 24
  009e0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ep0$20818[rsp]
  009e5	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  009ea	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  009ee	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  009f4	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  009f9	85 c0		 test	 eax, eax
  009fb	74 0d		 je	 SHORT $LN90@PyDict_May
  009fd	c7 84 24 fc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv400[rsp], 1
  00a08	eb 0b		 jmp	 SHORT $LN91@PyDict_May
$LN90@PyDict_May:
  00a0a	c7 84 24 fc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv400[rsp], 0
$LN91@PyDict_May:
  00a15	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR tv400[rsp]
  00a1c	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv402[rsp], eax
$LN93@PyDict_May:
  00a23	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR tv402[rsp], 0
  00a2b	74 72		 je	 SHORT $LN95@PyDict_May
  00a2d	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00a32	48 6b c0 18	 imul	 rax, 24
  00a36	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ep0$20818[rsp]
  00a3b	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  00a40	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00a44	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  00a4c	74 44		 je	 SHORT $LN94@PyDict_May
  00a4e	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00a53	48 6b c0 18	 imul	 rax, 24
  00a57	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00a5c	48 6b c9 18	 imul	 rcx, 24
  00a60	48 8b 54 24 50	 mov	 rdx, QWORD PTR ep0$20818[rsp]
  00a65	48 8b 4c 0a 08	 mov	 rcx, QWORD PTR [rdx+rcx+8]
  00a6a	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00a6e	48 89 8c 24 00
	01 00 00	 mov	 QWORD PTR tv501[rsp], rcx
  00a76	48 8b 54 24 50	 mov	 rdx, QWORD PTR ep0$20818[rsp]
  00a7b	48 8b 4c 02 08	 mov	 rcx, QWORD PTR [rdx+rax+8]
  00a80	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv501[rsp]
  00a88	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  00a8e	85 c0		 test	 eax, eax
  00a90	74 0d		 je	 SHORT $LN95@PyDict_May
$LN94@PyDict_May:
  00a92	c7 84 24 08 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv421[rsp], 1
  00a9d	eb 0b		 jmp	 SHORT $LN96@PyDict_May
$LN95@PyDict_May:
  00a9f	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv421[rsp], 0
$LN96@PyDict_May:
  00aaa	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR tv421[rsp]
  00ab1	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv423[rsp], eax
$LN98@PyDict_May:
  00ab8	83 bc 24 f4 00
	00 00 00	 cmp	 DWORD PTR tv423[rsp], 0
  00ac0	0f 84 1d 01 00
	00		 je	 $LN106@PyDict_May
  00ac6	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00acb	48 6b c0 18	 imul	 rax, 24
  00acf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ep0$20818[rsp]
  00ad4	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  00ad9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  00ae0	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00ae4	0f 85 ec 00 00
	00		 jne	 $LN105@PyDict_May
  00aea	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00aef	48 6b c0 18	 imul	 rax, 24
  00af3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00afb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ep0$20818[rsp]
  00b00	4c 8b 4c 01 08	 mov	 r9, QWORD PTR [rcx+rax+8]
  00b05	41 b8 f9 02 00
	00		 mov	 r8d, 761		; 000002f9H
  00b0b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00b12	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00b19	e8 00 00 00 00	 call	 _PyParallel_Guard
  00b1e	85 c0		 test	 eax, eax
  00b20	74 10		 je	 SHORT $LN103@PyDict_May
  00b22	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv457[rsp], 0
  00b2d	e9 9a 00 00 00	 jmp	 $LN104@PyDict_May
$LN103@PyDict_May:
  00b32	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00b37	48 6b c0 18	 imul	 rax, 24
  00b3b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00b43	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ep0$20818[rsp]
  00b48	4c 8b 4c 01 08	 mov	 r9, QWORD PTR [rcx+rax+8]
  00b4d	41 b8 f9 02 00
	00		 mov	 r8d, 761		; 000002f9H
  00b53	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00b5a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00b61	e8 00 00 00 00	 call	 _PyParallel_Guard
  00b66	85 c0		 test	 eax, eax
  00b68	74 0e		 je	 SHORT $LN99@PyDict_May
  00b6a	48 c7 84 24 10
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv452[rsp], 0
  00b76	eb 1f		 jmp	 SHORT $LN100@PyDict_May
$LN99@PyDict_May:
  00b78	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00b7d	48 6b c0 18	 imul	 rax, 24
  00b81	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ep0$20818[rsp]
  00b86	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  00b8b	48 83 e8 18	 sub	 rax, 24
  00b8f	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv452[rsp], rax
$LN100@PyDict_May:
  00b97	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv452[rsp]
  00b9f	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00ba4	74 0d		 je	 SHORT $LN101@PyDict_May
  00ba6	c7 84 24 18 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv455[rsp], 1
  00bb1	eb 0b		 jmp	 SHORT $LN102@PyDict_May
$LN101@PyDict_May:
  00bb3	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv455[rsp], 0
$LN102@PyDict_May:
  00bbe	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR tv455[rsp]
  00bc5	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv457[rsp], eax
$LN104@PyDict_May:
  00bcc	83 bc 24 0c 01
	00 00 00	 cmp	 DWORD PTR tv457[rsp], 0
  00bd4	74 0d		 je	 SHORT $LN106@PyDict_May
$LN105@PyDict_May:
  00bd6	c7 84 24 1c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv460[rsp], 1
  00be1	eb 0b		 jmp	 SHORT $LN107@PyDict_May
$LN106@PyDict_May:
  00be3	c7 84 24 1c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv460[rsp], 0
$LN107@PyDict_May:
  00bee	8b 84 24 1c 01
	00 00		 mov	 eax, DWORD PTR tv460[rsp]
  00bf5	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv462[rsp], eax
$LN109@PyDict_May:
  00bfc	83 bc 24 f0 00
	00 00 00	 cmp	 DWORD PTR tv462[rsp], 0
  00c04	74 05		 je	 SHORT $LN6@PyDict_May
$LN5@PyDict_May:

; 762  :                 return;

  00c06	e9 06 01 00 00	 jmp	 $LN21@PyDict_May
$LN6@PyDict_May:

; 763  :         }

  00c0b	e9 a8 fa ff ff	 jmp	 $LN9@PyDict_May
$LN8@PyDict_May:
$LN11@PyDict_May:

; 764  :     }
; 765  :     _PyObject_GC_UNTRACK(op);

  00c10	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00c18	4c 8b 8c 24 40
	01 00 00	 mov	 r9, QWORD PTR op$[rsp]
  00c20	41 b8 fd 02 00
	00		 mov	 r8d, 765		; 000002fdH
  00c26	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00c2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00c34	e8 00 00 00 00	 call	 _PyParallel_Guard
  00c39	85 c0		 test	 eax, eax
  00c3b	0f 85 d0 00 00
	00		 jne	 $LN4@PyDict_May
$LN3@PyDict_May:
  00c41	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00c49	4c 8b 8c 24 40
	01 00 00	 mov	 r9, QWORD PTR op$[rsp]
  00c51	41 b8 fd 02 00
	00		 mov	 r8d, 765		; 000002fdH
  00c57	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00c5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFCLJMII@_PyDict_MaybeUntrack?$AA@
  00c65	e8 00 00 00 00	 call	 _PyParallel_Guard
  00c6a	85 c0		 test	 eax, eax
  00c6c	74 0e		 je	 SHORT $LN110@PyDict_May
  00c6e	48 c7 84 24 20
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv479[rsp], 0
  00c7a	eb 14		 jmp	 SHORT $LN111@PyDict_May
$LN110@PyDict_May:
  00c7c	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR op$[rsp]
  00c84	48 83 e8 18	 sub	 rax, 24
  00c88	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv479[rsp], rax
$LN111@PyDict_May:
  00c90	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR tv479[rsp]
  00c98	48 89 44 24 58	 mov	 QWORD PTR g$20844[rsp], rax
  00c9d	48 8b 44 24 58	 mov	 rax, QWORD PTR g$20844[rsp]
  00ca2	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00ca7	75 1c		 jne	 SHORT $LN112@PyDict_May
  00ca9	41 b8 fd 02 00
	00		 mov	 r8d, 765		; 000002fdH
  00caf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00cb6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  00cbd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00cc3	33 c0		 xor	 eax, eax
$LN112@PyDict_May:
  00cc5	48 8b 44 24 58	 mov	 rax, QWORD PTR g$20844[rsp]
  00cca	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  00cd2	48 8b 44 24 58	 mov	 rax, QWORD PTR g$20844[rsp]
  00cd7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00cdb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR g$20844[rsp]
  00ce0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00ce3	48 89 08	 mov	 QWORD PTR [rax], rcx
  00ce6	48 8b 44 24 58	 mov	 rax, QWORD PTR g$20844[rsp]
  00ceb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00cee	48 8b 4c 24 58	 mov	 rcx, QWORD PTR g$20844[rsp]
  00cf3	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00cf7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00cfb	48 8b 44 24 58	 mov	 rax, QWORD PTR g$20844[rsp]
  00d00	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00d07	33 c0		 xor	 eax, eax
  00d09	85 c0		 test	 eax, eax
  00d0b	0f 85 30 ff ff
	ff		 jne	 $LN3@PyDict_May
$LN4@PyDict_May:
$LN21@PyDict_May:

; 766  : }

  00d11	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  00d18	c3		 ret	 0
_PyDict_MaybeUntrack ENDP
_TEXT	ENDS
PUBLIC	_PyDict_NewPresized
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_NewPresized DD imagerel $LN7
	DD	imagerel $LN7+99
	DD	imagerel $unwind$_PyDict_NewPresized
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_NewPresized DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyDict_NewPresized
_TEXT	SEGMENT
newsize$ = 32
new_keys$ = 40
minused$ = 64
_PyDict_NewPresized PROC				; COMDAT

; 1055 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1056 :     Py_ssize_t newsize;
; 1057 :     PyDictKeysObject *new_keys;
; 1058 :     for (newsize = PyDict_MINSIZE_COMBINED;
; 1059 :          newsize <= minused && newsize > 0;
; 1060 :          newsize <<= 1)

  00009	48 c7 44 24 20
	08 00 00 00	 mov	 QWORD PTR newsize$[rsp], 8
  00012	eb 0d		 jmp	 SHORT $LN4@PyDict_New
$LN3@PyDict_New:
  00014	48 8b 44 24 20	 mov	 rax, QWORD PTR newsize$[rsp]
  00019	48 d1 e0	 shl	 rax, 1
  0001c	48 89 44 24 20	 mov	 QWORD PTR newsize$[rsp], rax
$LN4@PyDict_New:
  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR minused$[rsp]
  00026	48 39 44 24 20	 cmp	 QWORD PTR newsize$[rsp], rax
  0002b	7f 0a		 jg	 SHORT $LN2@PyDict_New
  0002d	48 83 7c 24 20
	00		 cmp	 QWORD PTR newsize$[rsp], 0
  00033	7e 02		 jle	 SHORT $LN2@PyDict_New

; 1061 :         ;

  00035	eb dd		 jmp	 SHORT $LN3@PyDict_New
$LN2@PyDict_New:

; 1062 :     new_keys = new_keys_object(newsize);

  00037	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newsize$[rsp]
  0003c	e8 00 00 00 00	 call	 new_keys_object
  00041	48 89 44 24 28	 mov	 QWORD PTR new_keys$[rsp], rax

; 1063 :     if (new_keys == NULL)

  00046	48 83 7c 24 28
	00		 cmp	 QWORD PTR new_keys$[rsp], 0
  0004c	75 04		 jne	 SHORT $LN1@PyDict_New

; 1064 :         return NULL;

  0004e	33 c0		 xor	 eax, eax
  00050	eb 0c		 jmp	 SHORT $LN5@PyDict_New
$LN1@PyDict_New:

; 1065 :     return new_dict(new_keys, NULL);

  00052	33 d2		 xor	 edx, edx
  00054	48 8b 4c 24 28	 mov	 rcx, QWORD PTR new_keys$[rsp]
  00059	e8 00 00 00 00	 call	 new_dict
$LN5@PyDict_New:

; 1066 : }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
_PyDict_NewPresized ENDP
_TEXT	ENDS
PUBLIC	PyDict_GetItem
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_Fetch:PROC
EXTRN	_PyThreadState_Current:QWORD
EXTRN	PyErr_Clear:PROC
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_GetItem DD imagerel $LN11
	DD	imagerel $LN11+320
	DD	imagerel $unwind$PyDict_GetItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_GetItem DD 010e01H
	DD	0c20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_GetItem
_TEXT	SEGMENT
mp$ = 32
tstate$ = 40
value_addr$ = 48
ep$ = 56
hash$ = 64
err_value$21148 = 72
err_type$21147 = 80
err_tb$21149 = 88
op$ = 112
key$ = 120
PyDict_GetItem PROC					; COMDAT

; 1080 : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1081 :     Py_hash_t hash;
; 1082 :     PyDictObject *mp = (PyDictObject *)op;

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR mp$[rsp], rax

; 1083 :     PyDictKeyEntry *ep;
; 1084 :     PyThreadState *tstate;
; 1085 :     PyObject **value_addr;
; 1086 : 
; 1087 :     if (!PyDict_Check(op))

  00018	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  0001d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00021	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00027	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0002c	85 c0		 test	 eax, eax
  0002e	75 07		 jne	 SHORT $LN8@PyDict_Get

; 1088 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	e9 04 01 00 00	 jmp	 $LN9@PyDict_Get
$LN8@PyDict_Get:

; 1089 : 
; 1090 :     if (!PyUnicode_CheckExact(key) ||
; 1091 :         (hash = ((PyASCIIObject *) key)->hash) == -1)

  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0003e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR key$[rsp]
  00043	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00047	75 16		 jne	 SHORT $LN6@PyDict_Get
  00049	48 8b 44 24 78	 mov	 rax, QWORD PTR key$[rsp]
  0004e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00052	48 89 44 24 40	 mov	 QWORD PTR hash$[rsp], rax
  00057	48 83 7c 24 40
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  0005d	75 23		 jne	 SHORT $LN7@PyDict_Get
$LN6@PyDict_Get:

; 1092 :     {
; 1093 :         hash = PyObject_Hash(key);

  0005f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR key$[rsp]
  00064	e8 00 00 00 00	 call	 PyObject_Hash
  00069	48 89 44 24 40	 mov	 QWORD PTR hash$[rsp], rax

; 1094 :         if (hash == -1) {

  0006e	48 83 7c 24 40
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  00074	75 0c		 jne	 SHORT $LN5@PyDict_Get

; 1095 :             PyErr_Clear();

  00076	e8 00 00 00 00	 call	 PyErr_Clear

; 1096 :             return NULL;

  0007b	33 c0		 xor	 eax, eax
  0007d	e9 b9 00 00 00	 jmp	 $LN9@PyDict_Get
$LN5@PyDict_Get:
$LN7@PyDict_Get:

; 1097 :         }
; 1098 :     }
; 1099 : 
; 1100 :     /* We can arrive here with a NULL tstate during initialization: try
; 1101 :        running "python -Wi" for an example related to string interning.
; 1102 :        Let's just hope that no exception occurs then...  This must be
; 1103 :        _PyThreadState_Current and not PyThreadState_GET() because in debug
; 1104 :        mode, the latter complains if tstate is NULL. */
; 1105 :     tstate = (PyThreadState*)_Py_atomic_load_relaxed(
; 1106 :         &_PyThreadState_Current);

  00082	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
  00089	48 89 44 24 28	 mov	 QWORD PTR tstate$[rsp], rax

; 1107 :     if (tstate != NULL && tstate->curexc_type != NULL) {

  0008e	48 83 7c 24 28
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  00094	74 67		 je	 SHORT $LN4@PyDict_Get
  00096	48 8b 44 24 28	 mov	 rax, QWORD PTR tstate$[rsp]
  0009b	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  000a0	74 5b		 je	 SHORT $LN4@PyDict_Get

; 1108 :         /* preserve the existing exception */
; 1109 :         PyObject *err_type, *err_value, *err_tb;
; 1110 :         PyErr_Fetch(&err_type, &err_value, &err_tb);

  000a2	4c 8d 44 24 58	 lea	 r8, QWORD PTR err_tb$21149[rsp]
  000a7	48 8d 54 24 48	 lea	 rdx, QWORD PTR err_value$21148[rsp]
  000ac	48 8d 4c 24 50	 lea	 rcx, QWORD PTR err_type$21147[rsp]
  000b1	e8 00 00 00 00	 call	 PyErr_Fetch

; 1111 :         ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  000b6	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  000bb	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000bf	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  000c4	4c 8b 44 24 40	 mov	 r8, QWORD PTR hash$[rsp]
  000c9	48 8b 54 24 78	 mov	 rdx, QWORD PTR key$[rsp]
  000ce	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mp$[rsp]
  000d3	ff 50 10	 call	 QWORD PTR [rax+16]
  000d6	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 1112 :         /* ignore errors */
; 1113 :         PyErr_Restore(err_type, err_value, err_tb);

  000db	4c 8b 44 24 58	 mov	 r8, QWORD PTR err_tb$21149[rsp]
  000e0	48 8b 54 24 48	 mov	 rdx, QWORD PTR err_value$21148[rsp]
  000e5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR err_type$21147[rsp]
  000ea	e8 00 00 00 00	 call	 PyErr_Restore

; 1114 :         if (ep == NULL)

  000ef	48 83 7c 24 38
	00		 cmp	 QWORD PTR ep$[rsp], 0
  000f5	75 04		 jne	 SHORT $LN3@PyDict_Get

; 1115 :             return NULL;

  000f7	33 c0		 xor	 eax, eax
  000f9	eb 40		 jmp	 SHORT $LN9@PyDict_Get
$LN3@PyDict_Get:

; 1116 :     }
; 1117 :     else {

  000fb	eb 36		 jmp	 SHORT $LN2@PyDict_Get
$LN4@PyDict_Get:

; 1118 :         ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  000fd	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  00102	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00106	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  0010b	4c 8b 44 24 40	 mov	 r8, QWORD PTR hash$[rsp]
  00110	48 8b 54 24 78	 mov	 rdx, QWORD PTR key$[rsp]
  00115	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mp$[rsp]
  0011a	ff 50 10	 call	 QWORD PTR [rax+16]
  0011d	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 1119 :         if (ep == NULL) {

  00122	48 83 7c 24 38
	00		 cmp	 QWORD PTR ep$[rsp], 0
  00128	75 09		 jne	 SHORT $LN1@PyDict_Get

; 1120 :             PyErr_Clear();

  0012a	e8 00 00 00 00	 call	 PyErr_Clear

; 1121 :             return NULL;

  0012f	33 c0		 xor	 eax, eax
  00131	eb 08		 jmp	 SHORT $LN9@PyDict_Get
$LN1@PyDict_Get:
$LN2@PyDict_Get:

; 1122 :         }
; 1123 :     }
; 1124 :     return *value_addr;

  00133	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]
  00138	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN9@PyDict_Get:

; 1125 : }

  0013b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0013f	c3		 ret	 0
PyDict_GetItem ENDP
_TEXT	ENDS
PUBLIC	PyDict_GetItemWithError
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_GetItemWithError DD imagerel $LN8
	DD	imagerel $LN8+198
	DD	imagerel $unwind$PyDict_GetItemWithError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_GetItemWithError DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_GetItemWithError
_TEXT	SEGMENT
mp$ = 32
value_addr$ = 40
ep$ = 48
hash$ = 56
op$ = 80
key$ = 88
PyDict_GetItemWithError PROC				; COMDAT

; 1133 : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1134 :     Py_hash_t hash;
; 1135 :     PyDictObject*mp = (PyDictObject *)op;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR mp$[rsp], rax

; 1136 :     PyDictKeyEntry *ep;
; 1137 :     PyObject **value_addr;
; 1138 : 
; 1139 :     if (!PyDict_Check(op)) {

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00021	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00027	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0002c	85 c0		 test	 eax, eax
  0002e	75 15		 jne	 SHORT $LN5@PyDict_Get@2

; 1140 :         PyErr_BadInternalCall();

  00030	ba 74 04 00 00	 mov	 edx, 1140		; 00000474H
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0003c	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 1141 :         return NULL;

  00041	33 c0		 xor	 eax, eax
  00043	eb 7c		 jmp	 SHORT $LN6@PyDict_Get@2
$LN5@PyDict_Get@2:

; 1142 :     }
; 1143 : 
; 1144 :     if (!PyUnicode_CheckExact(key) ||
; 1145 :         (hash = ((PyASCIIObject *) key)->hash) == -1)

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0004c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR key$[rsp]
  00051	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00055	75 16		 jne	 SHORT $LN3@PyDict_Get@2
  00057	48 8b 44 24 58	 mov	 rax, QWORD PTR key$[rsp]
  0005c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00060	48 89 44 24 38	 mov	 QWORD PTR hash$[rsp], rax
  00065	48 83 7c 24 38
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  0006b	75 1b		 jne	 SHORT $LN4@PyDict_Get@2
$LN3@PyDict_Get@2:

; 1146 :     {
; 1147 :         hash = PyObject_Hash(key);

  0006d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR key$[rsp]
  00072	e8 00 00 00 00	 call	 PyObject_Hash
  00077	48 89 44 24 38	 mov	 QWORD PTR hash$[rsp], rax

; 1148 :         if (hash == -1) {

  0007c	48 83 7c 24 38
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  00082	75 04		 jne	 SHORT $LN2@PyDict_Get@2

; 1149 :             return NULL;

  00084	33 c0		 xor	 eax, eax
  00086	eb 39		 jmp	 SHORT $LN6@PyDict_Get@2
$LN2@PyDict_Get@2:
$LN4@PyDict_Get@2:

; 1150 :         }
; 1151 :     }
; 1152 : 
; 1153 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  00088	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  0008d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00091	4c 8d 4c 24 28	 lea	 r9, QWORD PTR value_addr$[rsp]
  00096	4c 8b 44 24 38	 mov	 r8, QWORD PTR hash$[rsp]
  0009b	48 8b 54 24 58	 mov	 rdx, QWORD PTR key$[rsp]
  000a0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mp$[rsp]
  000a5	ff 50 10	 call	 QWORD PTR [rax+16]
  000a8	48 89 44 24 30	 mov	 QWORD PTR ep$[rsp], rax

; 1154 :     if (ep == NULL)

  000ad	48 83 7c 24 30
	00		 cmp	 QWORD PTR ep$[rsp], 0
  000b3	75 04		 jne	 SHORT $LN1@PyDict_Get@2

; 1155 :         return NULL;

  000b5	33 c0		 xor	 eax, eax
  000b7	eb 08		 jmp	 SHORT $LN6@PyDict_Get@2
$LN1@PyDict_Get@2:

; 1156 :     return *value_addr;

  000b9	48 8b 44 24 28	 mov	 rax, QWORD PTR value_addr$[rsp]
  000be	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN6@PyDict_Get@2:

; 1157 : }

  000c1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c5	c3		 ret	 0
PyDict_GetItemWithError ENDP
_TEXT	ENDS
PUBLIC	_PyDict_GetItemIdWithError
EXTRN	_PyUnicode_FromId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_GetItemIdWithError DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$_PyDict_GetItemIdWithError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_GetItemIdWithError DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyDict_GetItemIdWithError
_TEXT	SEGMENT
kv$ = 32
dp$ = 64
key$ = 72
_PyDict_GetItemIdWithError PROC				; COMDAT

; 1161 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1162 :     PyObject *kv;
; 1163 :     kv = _PyUnicode_FromId(key); /* borrowed */

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00013	e8 00 00 00 00	 call	 _PyUnicode_FromId
  00018	48 89 44 24 20	 mov	 QWORD PTR kv$[rsp], rax

; 1164 :     if (kv == NULL)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR kv$[rsp], 0
  00023	75 04		 jne	 SHORT $LN1@PyDict_Get@3

; 1165 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 0f		 jmp	 SHORT $LN2@PyDict_Get@3
$LN1@PyDict_Get@3:

; 1166 :     return PyDict_GetItemWithError(dp, kv);

  00029	48 8b 54 24 20	 mov	 rdx, QWORD PTR kv$[rsp]
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dp$[rsp]
  00033	e8 00 00 00 00	 call	 PyDict_GetItemWithError
$LN2@PyDict_Get@3:

; 1167 : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
_PyDict_GetItemIdWithError ENDP
_TEXT	ENDS
PUBLIC	_PyDict_LoadGlobal
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_LoadGlobal DD imagerel $LN10
	DD	imagerel $LN10+288
	DD	imagerel $unwind$_PyDict_LoadGlobal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_LoadGlobal DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyDict_LoadGlobal
_TEXT	SEGMENT
x$ = 32
value_addr$21198 = 40
hash$21199 = 48
e$21202 = 56
globals$ = 80
builtins$ = 88
key$ = 96
_PyDict_LoadGlobal PROC					; COMDAT

; 1174 : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1175 :     PyObject *x;
; 1176 :     if (PyUnicode_CheckExact(key)) {

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0001a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR key$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	0f 85 b2 00 00
	00		 jne	 $LN7@PyDict_Loa

; 1177 :         PyObject **value_addr;
; 1178 :         Py_hash_t hash = ((PyASCIIObject *)key)->hash;

  00029	48 8b 44 24 60	 mov	 rax, QWORD PTR key$[rsp]
  0002e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00032	48 89 44 24 30	 mov	 QWORD PTR hash$21199[rsp], rax

; 1179 :         if (hash != -1) {

  00037	48 83 7c 24 30
	ff		 cmp	 QWORD PTR hash$21199[rsp], -1
  0003d	0f 84 98 00 00
	00		 je	 $LN6@PyDict_Loa

; 1180 :             PyDictKeyEntry *e;
; 1181 :             e = globals->ma_keys->dk_lookup(globals, key, hash, &value_addr);

  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR globals$[rsp]
  00048	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004c	4c 8d 4c 24 28	 lea	 r9, QWORD PTR value_addr$21198[rsp]
  00051	4c 8b 44 24 30	 mov	 r8, QWORD PTR hash$21199[rsp]
  00056	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$[rsp]
  0005b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR globals$[rsp]
  00060	ff 50 10	 call	 QWORD PTR [rax+16]
  00063	48 89 44 24 38	 mov	 QWORD PTR e$21202[rsp], rax

; 1182 :             if (e == NULL) {

  00068	48 83 7c 24 38
	00		 cmp	 QWORD PTR e$21202[rsp], 0
  0006e	75 07		 jne	 SHORT $LN5@PyDict_Loa

; 1183 :                 return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	e9 a4 00 00 00	 jmp	 $LN8@PyDict_Loa
$LN5@PyDict_Loa:

; 1184 :             }
; 1185 :             x = *value_addr;

  00077	48 8b 44 24 28	 mov	 rax, QWORD PTR value_addr$21198[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 1186 :             if (x != NULL)

  00084	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  0008a	74 0a		 je	 SHORT $LN4@PyDict_Loa

; 1187 :                 return x;

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00091	e9 85 00 00 00	 jmp	 $LN8@PyDict_Loa
$LN4@PyDict_Loa:

; 1188 :             e = builtins->ma_keys->dk_lookup(builtins, key, hash, &value_addr);

  00096	48 8b 44 24 58	 mov	 rax, QWORD PTR builtins$[rsp]
  0009b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009f	4c 8d 4c 24 28	 lea	 r9, QWORD PTR value_addr$21198[rsp]
  000a4	4c 8b 44 24 30	 mov	 r8, QWORD PTR hash$21199[rsp]
  000a9	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$[rsp]
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR builtins$[rsp]
  000b3	ff 50 10	 call	 QWORD PTR [rax+16]
  000b6	48 89 44 24 38	 mov	 QWORD PTR e$21202[rsp], rax

; 1189 :             if (e == NULL) {

  000bb	48 83 7c 24 38
	00		 cmp	 QWORD PTR e$21202[rsp], 0
  000c1	75 04		 jne	 SHORT $LN3@PyDict_Loa

; 1190 :                 return NULL;

  000c3	33 c0		 xor	 eax, eax
  000c5	eb 54		 jmp	 SHORT $LN8@PyDict_Loa
$LN3@PyDict_Loa:

; 1191 :             }
; 1192 :             x = *value_addr;

  000c7	48 8b 44 24 28	 mov	 rax, QWORD PTR value_addr$21198[rsp]
  000cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cf	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 1193 :             return x;

  000d4	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  000d9	eb 40		 jmp	 SHORT $LN8@PyDict_Loa
$LN6@PyDict_Loa:
$LN7@PyDict_Loa:

; 1194 :         }
; 1195 :     }
; 1196 :     x = PyDict_GetItemWithError((PyObject *)globals, key);

  000db	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$[rsp]
  000e0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR globals$[rsp]
  000e5	e8 00 00 00 00	 call	 PyDict_GetItemWithError
  000ea	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 1197 :     if (x != NULL)

  000ef	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  000f5	74 07		 je	 SHORT $LN2@PyDict_Loa

; 1198 :         return x;

  000f7	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  000fc	eb 1d		 jmp	 SHORT $LN8@PyDict_Loa
$LN2@PyDict_Loa:

; 1199 :     if (PyErr_Occurred())

  000fe	e8 00 00 00 00	 call	 PyErr_Occurred
  00103	48 85 c0	 test	 rax, rax
  00106	74 04		 je	 SHORT $LN1@PyDict_Loa

; 1200 :         return NULL;

  00108	33 c0		 xor	 eax, eax
  0010a	eb 0f		 jmp	 SHORT $LN8@PyDict_Loa
$LN1@PyDict_Loa:

; 1201 :     return PyDict_GetItemWithError((PyObject *)builtins, key);

  0010c	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$[rsp]
  00111	48 8b 4c 24 58	 mov	 rcx, QWORD PTR builtins$[rsp]
  00116	e8 00 00 00 00	 call	 PyDict_GetItemWithError
$LN8@PyDict_Loa:

; 1202 : }

  0011b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011f	c3		 ret	 0
_PyDict_LoadGlobal ENDP
_TEXT	ENDS
PUBLIC	??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_17FJFCONIE@?$AAk?$AAe?$AAy?$AA?$AA@	; `string'
PUBLIC	PyDict_SetItem
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_SetItem DD imagerel $LN9
	DD	imagerel $LN9+252
	DD	imagerel $unwind$PyDict_SetItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_SetItem DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@ DB 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_17FJFCONIE@?$AAk?$AAe?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_17FJFCONIE@?$AAk?$AAe?$AAy?$AA?$AA@ DB 'k', 00H, 'e', 00H, 'y', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyDict_SetItem
_TEXT	SEGMENT
mp$ = 32
hash$ = 40
op$ = 64
key$ = 72
value$ = 80
PyDict_SetItem PROC					; COMDAT

; 1212 : {

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1213 :     PyDictObject *mp;
; 1214 :     Py_hash_t hash;
; 1215 :     if (!PyDict_Check(op)) {

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00022	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00027	85 c0		 test	 eax, eax
  00029	75 1b		 jne	 SHORT $LN4@PyDict_Set

; 1216 :         PyErr_BadInternalCall();

  0002b	ba c0 04 00 00	 mov	 edx, 1216		; 000004c0H
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00037	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 1217 :         return -1;

  0003c	b8 ff ff ff ff	 mov	 eax, -1
  00041	e9 b1 00 00 00	 jmp	 $LN5@PyDict_Set
$LN4@PyDict_Set:

; 1218 :     }
; 1219 :     assert(key);

  00046	48 83 7c 24 48
	00		 cmp	 QWORD PTR key$[rsp], 0
  0004c	75 1c		 jne	 SHORT $LN7@PyDict_Set
  0004e	41 b8 c3 04 00
	00		 mov	 r8d, 1219		; 000004c3H
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17FJFCONIE@?$AAk?$AAe?$AAy?$AA?$AA@
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00068	33 c0		 xor	 eax, eax
$LN7@PyDict_Set:

; 1220 :     assert(value);

  0006a	48 83 7c 24 50
	00		 cmp	 QWORD PTR value$[rsp], 0
  00070	75 1c		 jne	 SHORT $LN8@PyDict_Set
  00072	41 b8 c4 04 00
	00		 mov	 r8d, 1220		; 000004c4H
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008c	33 c0		 xor	 eax, eax
$LN8@PyDict_Set:

; 1221 : 
; 1222 :     /*
; 1223 :     if (Px_CHECK_PROTECTION(op, key, value))
; 1224 :         return -1;
; 1225 :     if (Px_PROTECTION_ERROR(op))
; 1226 :         return -1;
; 1227 :     */
; 1228 : 
; 1229 :     mp = (PyDictObject *)op;

  0008e	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 89 44 24 20	 mov	 QWORD PTR mp$[rsp], rax

; 1230 :     if (!PyUnicode_CheckExact(key) ||
; 1231 :         (hash = ((PyASCIIObject *) key)->hash) == -1)

  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0009f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  000a4	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a8	75 16		 jne	 SHORT $LN2@PyDict_Set
  000aa	48 8b 44 24 48	 mov	 rax, QWORD PTR key$[rsp]
  000af	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b3	48 89 44 24 28	 mov	 QWORD PTR hash$[rsp], rax
  000b8	48 83 7c 24 28
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  000be	75 1e		 jne	 SHORT $LN3@PyDict_Set
$LN2@PyDict_Set:

; 1232 :     {
; 1233 :         hash = PyObject_Hash(key);

  000c0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  000c5	e8 00 00 00 00	 call	 PyObject_Hash
  000ca	48 89 44 24 28	 mov	 QWORD PTR hash$[rsp], rax

; 1234 :         if (hash == -1)

  000cf	48 83 7c 24 28
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  000d5	75 07		 jne	 SHORT $LN1@PyDict_Set

; 1235 :             return -1;

  000d7	b8 ff ff ff ff	 mov	 eax, -1
  000dc	eb 19		 jmp	 SHORT $LN5@PyDict_Set
$LN1@PyDict_Set:
$LN3@PyDict_Set:

; 1236 :     }
; 1237 : 
; 1238 :     /* insertdict() handles any resizing that might be necessary */
; 1239 :     return insertdict(mp, key, hash, value);

  000de	4c 8b 4c 24 50	 mov	 r9, QWORD PTR value$[rsp]
  000e3	4c 8b 44 24 28	 mov	 r8, QWORD PTR hash$[rsp]
  000e8	48 8b 54 24 48	 mov	 rdx, QWORD PTR key$[rsp]
  000ed	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mp$[rsp]
  000f2	e8 00 00 00 00	 call	 insertdict
$LN5@PyDict_Set:

; 1240 : }

  000f7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fb	c3		 ret	 0
PyDict_SetItem ENDP
_TEXT	ENDS
PUBLIC	??_C@_1IA@CAJKFOBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAm?$AAp?$AA?9@ ; `string'
PUBLIC	??_C@_1DE@JLMLNBLA@?$AA_?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAH?$AAa?$AAs?$AAS?$AAp?$AAl?$AAi?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?$CI?$AAm?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@MOMAOGGA@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAu?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FE@FLPNEBMO@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy@ ; `string'
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0L@OBPAKNPI@insertdict?$AA@		; `string'
PUBLIC	??_C@_1BK@IGFPGOMC@?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?$AA@ ; `string'
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$insertdict DD imagerel insertdict
	DD	imagerel insertdict+2483
	DD	imagerel $unwind$insertdict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$insertdict DD 021b01H
	DD	019011bH
xdata	ENDS
;	COMDAT ??_C@_1IA@CAJKFOBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAm?$AAp?$AA?9@
CONST	SEGMENT
??_C@_1IA@CAJKFOBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAm?$AAp?$AA?9@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, 'E', 00H, 'x', 00H, 'a', 00H, 'c', 00H, 't', 00H
	DB	'(', 00H, 'k', 00H, 'e', 00H, 'y', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'm', 00H, 'p', 00H, '-', 00H, '>', 00H
	DB	'm', 00H, 'a', 00H, '_', 00H, 'k', 00H, 'e', 00H, 'y', 00H, 's'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'k', 00H, '_', 00H, 'l', 00H
	DB	'o', 00H, 'o', 00H, 'k', 00H, 'u', 00H, 'p', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'o', 00H, 'k', 00H
	DB	'd', 00H, 'i', 00H, 'c', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@JLMLNBLA@?$AA_?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAH?$AAa?$AAs?$AAS?$AAp?$AAl?$AAi?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?$CI?$AAm?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@JLMLNBLA@?$AA_?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAH?$AAa?$AAs?$AAS?$AAp?$AAl?$AAi?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?$CI?$AAm?$AAp?$AA?$CJ?$AA?$AA@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't', 00H
	DB	'_', 00H, 'H', 00H, 'a', 00H, 's', 00H, 'S', 00H, 'p', 00H, 'l'
	DB	00H, 'i', 00H, 't', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, '(', 00H, 'm', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@MOMAOGGA@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAu?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@MOMAOGGA@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAu?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'm'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, '_', 00H
	DB	'k', 00H, 'e', 00H, 'y', 00H, 's', 00H, '-', 00H, '>', 00H, 'd'
	DB	00H, 'k', 00H, '_', 00H, 'u', 00H, 's', 00H, 'a', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@FLPNEBMO@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy@
CONST	SEGMENT
??_C@_1FE@FLPNEBMO@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy@ DB 'e'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	'k', 00H, 'e', 00H, 'y', 00H, ' ', 00H, '!', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'e', 00H, 'p', 00H, '-', 00H, '>', 00H, 'm'
	DB	00H, 'e', 00H, '_', 00H, 'k', 00H, 'e', 00H, 'y', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'd', 00H, 'u', 00H, 'm', 00H, 'm'
	DB	00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OBPAKNPI@insertdict?$AA@
CONST	SEGMENT
??_C@_0L@OBPAKNPI@insertdict?$AA@ DB 'insertdict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@IGFPGOMC@?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@IGFPGOMC@?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?$AA@ DB 'k'
	DB	00H, 'e', 00H, 'y', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'd', 00H, 'u', 00H, 'm', 00H, 'm', 00H, 'y', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT insertdict
_TEXT	SEGMENT
value_addr$ = 48
ep$ = 56
old_value$ = 64
g$20932 = 72
tv136 = 80
tv131 = 88
tv134 = 96
tv196 = 100
tv169 = 104
tv157 = 108
tv155 = 112
tv167 = 116
tv191 = 120
tv186 = 128
tv189 = 136
tv194 = 140
tv256 = 144
tv229 = 148
tv217 = 152
tv215 = 156
tv227 = 160
tv251 = 164
tv246 = 168
tv249 = 176
tv254 = 180
tv273 = 184
mp$ = 208
key$ = 216
hash$ = 224
value$ = 232
insertdict PROC						; COMDAT

; 811  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 812  :     PyObject *old_value;
; 813  :     PyObject **value_addr;
; 814  :     PyDictKeyEntry *ep;
; 815  :     assert(key != dummy);

  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  00022	48 39 84 24 d8
	00 00 00	 cmp	 QWORD PTR key$[rsp], rax
  0002a	75 1c		 jne	 SHORT $LN25@insertdict
  0002c	41 b8 2f 03 00
	00		 mov	 r8d, 815		; 0000032fH
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@IGFPGOMC@?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?$AA@
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00046	33 c0		 xor	 eax, eax
$LN25@insertdict:

; 816  : 
; 817  :     if (mp->ma_values != NULL && !PyUnicode_CheckExact(key)) {

  00048	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00050	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00055	74 30		 je	 SHORT $LN22@insertdict
  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0005e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR key$[rsp]
  00066	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0006a	74 1b		 je	 SHORT $LN22@insertdict

; 818  :         if (insertion_resize(mp) < 0)

  0006c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  00074	e8 00 00 00 00	 call	 insertion_resize
  00079	85 c0		 test	 eax, eax
  0007b	7d 0a		 jge	 SHORT $LN21@insertdict

; 819  :             return -1;

  0007d	b8 ff ff ff ff	 mov	 eax, -1
  00082	e9 24 09 00 00	 jmp	 $LN23@insertdict
$LN21@insertdict:
$LN22@insertdict:

; 820  :     }
; 821  : 
; 822  :     ep = mp->ma_keys->dk_lookup(mp, key, hash, &value_addr);

  00087	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  0008f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00093	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  00098	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR hash$[rsp]
  000a0	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR key$[rsp]
  000a8	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  000b0	ff 50 10	 call	 QWORD PTR [rax+16]
  000b3	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 823  :     if (ep == NULL) {

  000b8	48 83 7c 24 38
	00		 cmp	 QWORD PTR ep$[rsp], 0
  000be	75 0a		 jne	 SHORT $LN20@insertdict

; 824  :         return -1;

  000c0	b8 ff ff ff ff	 mov	 eax, -1
  000c5	e9 e1 08 00 00	 jmp	 $LN23@insertdict
$LN20@insertdict:

; 825  :     }
; 826  :     old_value = *value_addr;

  000ca	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]
  000cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d2	48 89 44 24 40	 mov	 QWORD PTR old_value$[rsp], rax

; 827  :     /*
; 828  :     if (Px_ASSIGNMENT_ERROR(mp, old_value))
; 829  :         return -1;
; 830  :     */
; 831  :     Py_INCREF(value);

  000d7	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  000df	e8 00 00 00 00	 call	 _Py_IncRef
$LN19@insertdict:

; 832  :     MAINTAIN_TRACKING(mp, key, value);

  000e4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ec	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR mp$[rsp]
  000f4	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  00108	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010d	85 c0		 test	 eax, eax
  0010f	74 0a		 je	 SHORT $LN30@insertdict
  00111	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
  00119	eb 6f		 jmp	 SHORT $LN31@insertdict
$LN30@insertdict:
  0011b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00123	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR mp$[rsp]
  0012b	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  00131	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  0013f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00144	85 c0		 test	 eax, eax
  00146	74 0b		 je	 SHORT $LN26@insertdict
  00148	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv131[rsp], 0
  00151	eb 11		 jmp	 SHORT $LN27@insertdict
$LN26@insertdict:
  00153	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  0015b	48 83 e8 18	 sub	 rax, 24
  0015f	48 89 44 24 58	 mov	 QWORD PTR tv131[rsp], rax
$LN27@insertdict:
  00164	48 8b 44 24 58	 mov	 rax, QWORD PTR tv131[rsp]
  00169	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0016e	74 0a		 je	 SHORT $LN28@insertdict
  00170	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv134[rsp], 1
  00178	eb 08		 jmp	 SHORT $LN29@insertdict
$LN28@insertdict:
  0017a	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv134[rsp], 0
$LN29@insertdict:
  00182	8b 44 24 60	 mov	 eax, DWORD PTR tv134[rsp]
  00186	89 44 24 50	 mov	 DWORD PTR tv136[rsp], eax
$LN31@insertdict:
  0018a	83 7c 24 50 00	 cmp	 DWORD PTR tv136[rsp], 0
  0018f	0f 85 80 05 00
	00		 jne	 $LN16@insertdict
  00195	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0019d	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR key$[rsp]
  001a5	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  001ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  001b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  001b9	e8 00 00 00 00	 call	 _PyParallel_Guard
  001be	85 c0		 test	 eax, eax
  001c0	74 0d		 je	 SHORT $LN50@insertdict
  001c2	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv196[rsp], 0
  001ca	e9 e0 01 00 00	 jmp	 $LN51@insertdict
$LN50@insertdict:
  001cf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d7	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR key$[rsp]
  001df	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  001f3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f8	85 c0		 test	 eax, eax
  001fa	74 0d		 je	 SHORT $LN39@insertdict
  001fc	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv169[rsp], 0
  00204	e9 9d 00 00 00	 jmp	 $LN40@insertdict
$LN39@insertdict:
  00209	e8 00 00 00 00	 call	 _Py_PXCTX
  0020e	85 c0		 test	 eax, eax
  00210	74 0a		 je	 SHORT $LN34@insertdict
  00212	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
  0021a	eb 35		 jmp	 SHORT $LN35@insertdict
$LN34@insertdict:
  0021c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR key$[rsp]
  00224	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00228	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0022e	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00233	85 c0		 test	 eax, eax
  00235	74 0a		 je	 SHORT $LN32@insertdict
  00237	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv155[rsp], 1
  0023f	eb 08		 jmp	 SHORT $LN33@insertdict
$LN32@insertdict:
  00241	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv155[rsp], 0
$LN33@insertdict:
  00249	8b 44 24 70	 mov	 eax, DWORD PTR tv155[rsp]
  0024d	89 44 24 6c	 mov	 DWORD PTR tv157[rsp], eax
$LN35@insertdict:
  00251	83 7c 24 6c 00	 cmp	 DWORD PTR tv157[rsp], 0
  00256	74 3e		 je	 SHORT $LN37@insertdict
  00258	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR key$[rsp]
  00260	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00264	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  0026c	74 1e		 je	 SHORT $LN36@insertdict
  0026e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR key$[rsp]
  00276	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0027a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR key$[rsp]
  00282	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  00288	85 c0		 test	 eax, eax
  0028a	74 0a		 je	 SHORT $LN37@insertdict
$LN36@insertdict:
  0028c	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv167[rsp], 1
  00294	eb 08		 jmp	 SHORT $LN38@insertdict
$LN37@insertdict:
  00296	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv167[rsp], 0
$LN38@insertdict:
  0029e	8b 44 24 74	 mov	 eax, DWORD PTR tv167[rsp]
  002a2	89 44 24 68	 mov	 DWORD PTR tv169[rsp], eax
$LN40@insertdict:
  002a6	83 7c 24 68 00	 cmp	 DWORD PTR tv169[rsp], 0
  002ab	0f 84 e8 00 00
	00		 je	 $LN48@insertdict
  002b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  002b8	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR key$[rsp]
  002c0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  002c4	0f 85 c2 00 00
	00		 jne	 $LN47@insertdict
  002ca	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002d2	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR key$[rsp]
  002da	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  002e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  002e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  002ee	e8 00 00 00 00	 call	 _PyParallel_Guard
  002f3	85 c0		 test	 eax, eax
  002f5	74 0d		 je	 SHORT $LN45@insertdict
  002f7	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv191[rsp], 0
  002ff	e9 81 00 00 00	 jmp	 $LN46@insertdict
$LN45@insertdict:
  00304	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0030c	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR key$[rsp]
  00314	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  0031a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00321	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  00328	e8 00 00 00 00	 call	 _PyParallel_Guard
  0032d	85 c0		 test	 eax, eax
  0032f	74 0e		 je	 SHORT $LN41@insertdict
  00331	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv186[rsp], 0
  0033d	eb 14		 jmp	 SHORT $LN42@insertdict
$LN41@insertdict:
  0033f	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR key$[rsp]
  00347	48 83 e8 18	 sub	 rax, 24
  0034b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv186[rsp], rax
$LN42@insertdict:
  00353	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv186[rsp]
  0035b	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00360	74 0d		 je	 SHORT $LN43@insertdict
  00362	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv189[rsp], 1
  0036d	eb 0b		 jmp	 SHORT $LN44@insertdict
$LN43@insertdict:
  0036f	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv189[rsp], 0
$LN44@insertdict:
  0037a	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv189[rsp]
  00381	89 44 24 78	 mov	 DWORD PTR tv191[rsp], eax
$LN46@insertdict:
  00385	83 7c 24 78 00	 cmp	 DWORD PTR tv191[rsp], 0
  0038a	74 0d		 je	 SHORT $LN48@insertdict
$LN47@insertdict:
  0038c	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv194[rsp], 1
  00397	eb 0b		 jmp	 SHORT $LN49@insertdict
$LN48@insertdict:
  00399	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv194[rsp], 0
$LN49@insertdict:
  003a4	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv194[rsp]
  003ab	89 44 24 64	 mov	 DWORD PTR tv196[rsp], eax
$LN51@insertdict:
  003af	83 7c 24 64 00	 cmp	 DWORD PTR tv196[rsp], 0
  003b4	0f 85 5b 02 00
	00		 jne	 $LN14@insertdict
  003ba	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003c2	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR value$[rsp]
  003ca	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  003d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  003d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  003de	e8 00 00 00 00	 call	 _PyParallel_Guard
  003e3	85 c0		 test	 eax, eax
  003e5	74 10		 je	 SHORT $LN70@insertdict
  003e7	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
  003f2	e9 10 02 00 00	 jmp	 $LN71@insertdict
$LN70@insertdict:
  003f7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003ff	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR value$[rsp]
  00407	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  0040d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00414	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  0041b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00420	85 c0		 test	 eax, eax
  00422	74 10		 je	 SHORT $LN59@insertdict
  00424	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv229[rsp], 0
  0042f	e9 bb 00 00 00	 jmp	 $LN60@insertdict
$LN59@insertdict:
  00434	e8 00 00 00 00	 call	 _Py_PXCTX
  00439	85 c0		 test	 eax, eax
  0043b	74 0d		 je	 SHORT $LN54@insertdict
  0043d	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv217[rsp], 0
  00448	eb 41		 jmp	 SHORT $LN55@insertdict
$LN54@insertdict:
  0044a	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  00452	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00456	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0045c	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00461	85 c0		 test	 eax, eax
  00463	74 0d		 je	 SHORT $LN52@insertdict
  00465	c7 84 24 9c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv215[rsp], 1
  00470	eb 0b		 jmp	 SHORT $LN53@insertdict
$LN52@insertdict:
  00472	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv215[rsp], 0
$LN53@insertdict:
  0047d	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv215[rsp]
  00484	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv217[rsp], eax
$LN55@insertdict:
  0048b	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tv217[rsp], 0
  00493	74 41		 je	 SHORT $LN57@insertdict
  00495	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  0049d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004a1	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  004a9	74 1e		 je	 SHORT $LN56@insertdict
  004ab	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  004b3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004b7	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  004bf	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  004c5	85 c0		 test	 eax, eax
  004c7	74 0d		 je	 SHORT $LN57@insertdict
$LN56@insertdict:
  004c9	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv227[rsp], 1
  004d4	eb 0b		 jmp	 SHORT $LN58@insertdict
$LN57@insertdict:
  004d6	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv227[rsp], 0
$LN58@insertdict:
  004e1	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv227[rsp]
  004e8	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv229[rsp], eax
$LN60@insertdict:
  004ef	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR tv229[rsp], 0
  004f7	0f 84 f1 00 00
	00		 je	 $LN68@insertdict
  004fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00504	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  0050c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00510	0f 85 cb 00 00
	00		 jne	 $LN67@insertdict
  00516	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0051e	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR value$[rsp]
  00526	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  0052c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00533	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  0053a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0053f	85 c0		 test	 eax, eax
  00541	74 10		 je	 SHORT $LN65@insertdict
  00543	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv251[rsp], 0
  0054e	e9 84 00 00 00	 jmp	 $LN66@insertdict
$LN65@insertdict:
  00553	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0055b	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR value$[rsp]
  00563	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  00569	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00570	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  00577	e8 00 00 00 00	 call	 _PyParallel_Guard
  0057c	85 c0		 test	 eax, eax
  0057e	74 0e		 je	 SHORT $LN61@insertdict
  00580	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv246[rsp], 0
  0058c	eb 14		 jmp	 SHORT $LN62@insertdict
$LN61@insertdict:
  0058e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  00596	48 83 e8 18	 sub	 rax, 24
  0059a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv246[rsp], rax
$LN62@insertdict:
  005a2	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv246[rsp]
  005aa	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  005af	74 0d		 je	 SHORT $LN63@insertdict
  005b1	c7 84 24 b0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  005bc	eb 0b		 jmp	 SHORT $LN64@insertdict
$LN63@insertdict:
  005be	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv249[rsp], 0
$LN64@insertdict:
  005c9	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  005d0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv251[rsp], eax
$LN66@insertdict:
  005d7	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR tv251[rsp], 0
  005df	74 0d		 je	 SHORT $LN68@insertdict
$LN67@insertdict:
  005e1	c7 84 24 b4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv254[rsp], 1
  005ec	eb 0b		 jmp	 SHORT $LN69@insertdict
$LN68@insertdict:
  005ee	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv254[rsp], 0
$LN69@insertdict:
  005f9	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR tv254[rsp]
  00600	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv256[rsp], eax
$LN71@insertdict:
  00607	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR tv256[rsp], 0
  0060f	0f 84 00 01 00
	00		 je	 $LN15@insertdict
$LN14@insertdict:
  00615	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0061d	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR mp$[rsp]
  00625	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  0062b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00632	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  00639	e8 00 00 00 00	 call	 _PyParallel_Guard
  0063e	85 c0		 test	 eax, eax
  00640	0f 85 cf 00 00
	00		 jne	 $LN13@insertdict
$LN12@insertdict:
  00646	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0064e	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR mp$[rsp]
  00656	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  0065c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00663	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OBPAKNPI@insertdict?$AA@
  0066a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0066f	85 c0		 test	 eax, eax
  00671	74 0e		 je	 SHORT $LN72@insertdict
  00673	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv273[rsp], 0
  0067f	eb 14		 jmp	 SHORT $LN73@insertdict
$LN72@insertdict:
  00681	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00689	48 83 e8 18	 sub	 rax, 24
  0068d	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv273[rsp], rax
$LN73@insertdict:
  00695	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv273[rsp]
  0069d	48 89 44 24 48	 mov	 QWORD PTR g$20932[rsp], rax
  006a2	48 8b 44 24 48	 mov	 rax, QWORD PTR g$20932[rsp]
  006a7	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  006ac	74 0c		 je	 SHORT $LN9@insertdict
  006ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  006b5	e8 00 00 00 00	 call	 Py_FatalError
$LN9@insertdict:
  006ba	48 8b 44 24 48	 mov	 rax, QWORD PTR g$20932[rsp]
  006bf	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  006c7	48 8b 44 24 48	 mov	 rax, QWORD PTR g$20932[rsp]
  006cc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  006d3	48 89 08	 mov	 QWORD PTR [rax], rcx
  006d6	48 8b 44 24 48	 mov	 rax, QWORD PTR g$20932[rsp]
  006db	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  006e2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  006e6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  006ea	48 8b 44 24 48	 mov	 rax, QWORD PTR g$20932[rsp]
  006ef	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  006f3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR g$20932[rsp]
  006f8	48 89 08	 mov	 QWORD PTR [rax], rcx
  006fb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00702	48 8b 4c 24 48	 mov	 rcx, QWORD PTR g$20932[rsp]
  00707	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0070b	33 c0		 xor	 eax, eax
  0070d	85 c0		 test	 eax, eax
  0070f	0f 85 31 ff ff
	ff		 jne	 $LN12@insertdict
$LN13@insertdict:
$LN15@insertdict:
$LN16@insertdict:
  00715	33 c0		 xor	 eax, eax
  00717	85 c0		 test	 eax, eax
  00719	0f 85 c5 f9 ff
	ff		 jne	 $LN19@insertdict

; 833  :     if (old_value != NULL) {

  0071f	48 83 7c 24 40
	00		 cmp	 QWORD PTR old_value$[rsp], 0
  00725	74 59		 je	 SHORT $LN8@insertdict

; 834  :         assert(ep->me_key != NULL && ep->me_key != dummy);

  00727	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0072c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00731	74 12		 je	 SHORT $LN74@insertdict
  00733	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  0073a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ep$[rsp]
  0073f	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  00743	75 1c		 jne	 SHORT $LN75@insertdict
$LN74@insertdict:
  00745	41 b8 42 03 00
	00		 mov	 r8d, 834		; 00000342H
  0074b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00752	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@FLPNEBMO@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy@
  00759	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0075f	33 c0		 xor	 eax, eax
$LN75@insertdict:

; 835  :         *value_addr = value;

  00761	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]
  00766	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  0076e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 836  :         Py_DECREF(old_value); /* which **CAN** re-enter */

  00771	48 8b 4c 24 40	 mov	 rcx, QWORD PTR old_value$[rsp]
  00776	e8 00 00 00 00	 call	 _Py_DecRef

; 837  :     }
; 838  :     else {

  0077b	e9 a5 01 00 00	 jmp	 $LN7@insertdict
$LN8@insertdict:

; 839  :         if (ep->me_key == NULL) {

  00780	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00785	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0078a	0f 85 f1 00 00
	00		 jne	 $LN6@insertdict

; 840  :             Py_INCREF(key);

  00790	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR key$[rsp]
  00798	e8 00 00 00 00	 call	 _Py_IncRef

; 841  :             if (mp->ma_keys->dk_usable <= 0) {

  0079d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  007a5	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  007a9	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  007ae	7f 5c		 jg	 SHORT $LN5@insertdict

; 842  :                 /* Need to resize. */
; 843  :                 if (insertion_resize(mp) < 0) {

  007b0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  007b8	e8 00 00 00 00	 call	 insertion_resize
  007bd	85 c0		 test	 eax, eax
  007bf	7d 24		 jge	 SHORT $LN4@insertdict

; 844  :                     Py_DECREF(key);

  007c1	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR key$[rsp]
  007c9	e8 00 00 00 00	 call	 _Py_DecRef

; 845  :                     Py_DECREF(value);

  007ce	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  007d6	e8 00 00 00 00	 call	 _Py_DecRef

; 846  :                     return -1;

  007db	b8 ff ff ff ff	 mov	 eax, -1
  007e0	e9 c6 01 00 00	 jmp	 $LN23@insertdict
$LN4@insertdict:

; 847  :                 }
; 848  :                 ep = find_empty_slot(mp, key, hash, &value_addr);

  007e5	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  007ea	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR hash$[rsp]
  007f2	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR key$[rsp]
  007fa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  00802	e8 00 00 00 00	 call	 find_empty_slot
  00807	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax
$LN5@insertdict:

; 849  :             }
; 850  :             mp->ma_keys->dk_usable--;

  0080c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00814	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00818	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0081c	48 ff c8	 dec	 rax
  0081f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  00827	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0082b	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 851  :             assert(mp->ma_keys->dk_usable >= 0);

  0082f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00837	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0083b	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00840	7d 1c		 jge	 SHORT $LN76@insertdict
  00842	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00848	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0084f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MOMAOGGA@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAu?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00856	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0085c	33 c0		 xor	 eax, eax
$LN76@insertdict:

; 852  :             ep->me_key = key;

  0085e	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00863	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR key$[rsp]
  0086b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 853  :             ep->me_hash = hash;

  0086f	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00874	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR hash$[rsp]
  0087c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 854  :         }
; 855  :         else {

  0087f	eb 79		 jmp	 SHORT $LN3@insertdict
$LN6@insertdict:

; 856  :             if (ep->me_key == dummy) {

  00881	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  00888	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ep$[rsp]
  0088d	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  00891	75 3c		 jne	 SHORT $LN2@insertdict

; 857  :                 Py_INCREF(key);

  00893	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR key$[rsp]
  0089b	e8 00 00 00 00	 call	 _Py_IncRef

; 858  :                 ep->me_key = key;

  008a0	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  008a5	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR key$[rsp]
  008ad	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 859  :                 ep->me_hash = hash;

  008b1	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  008b6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR hash$[rsp]
  008be	48 89 08	 mov	 QWORD PTR [rax], rcx

; 860  :                 Py_DECREF(dummy);

  008c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dummy_struct
  008c8	e8 00 00 00 00	 call	 _Py_DecRef

; 861  :             } else {

  008cd	eb 2b		 jmp	 SHORT $LN1@insertdict
$LN2@insertdict:

; 862  :                 assert(_PyDict_HasSplitTable(mp));

  008cf	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  008d7	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  008dc	75 1c		 jne	 SHORT $LN77@insertdict
  008de	41 b8 5e 03 00
	00		 mov	 r8d, 862		; 0000035eH
  008e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  008eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JLMLNBLA@?$AA_?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAH?$AAa?$AAs?$AAS?$AAp?$AAl?$AAi?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?$CI?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  008f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008f8	33 c0		 xor	 eax, eax
$LN77@insertdict:
$LN1@insertdict:
$LN3@insertdict:

; 863  :             }
; 864  :         }
; 865  :         mp->ma_used++;

  008fa	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00902	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00906	48 ff c0	 inc	 rax
  00909	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  00911	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 866  :         *value_addr = value;

  00915	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]
  0091a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00922	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN7@insertdict:

; 867  :     }
; 868  :     assert(ep->me_key != NULL && ep->me_key != dummy);

  00925	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0092a	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0092f	74 12		 je	 SHORT $LN78@insertdict
  00931	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  00938	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ep$[rsp]
  0093d	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  00941	75 1c		 jne	 SHORT $LN79@insertdict
$LN78@insertdict:
  00943	41 b8 64 03 00
	00		 mov	 r8d, 868		; 00000364H
  00949	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00950	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@FLPNEBMO@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy@
  00957	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0095d	33 c0		 xor	 eax, eax
$LN79@insertdict:

; 869  :     assert(PyUnicode_CheckExact(key) || mp->ma_keys->dk_lookup == lookdict);

  0095f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00966	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR key$[rsp]
  0096e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00972	74 35		 je	 SHORT $LN80@insertdict
  00974	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  0097c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00980	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  00987	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  0098b	74 1c		 je	 SHORT $LN80@insertdict
  0098d	41 b8 65 03 00
	00		 mov	 r8d, 869		; 00000365H
  00993	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0099a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1IA@CAJKFOBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAm?$AAp?$AA?9@
  009a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009a7	33 c0		 xor	 eax, eax
$LN80@insertdict:

; 870  :     return 0;

  009a9	33 c0		 xor	 eax, eax
$LN23@insertdict:

; 871  : }

  009ab	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  009b2	c3		 ret	 0
insertdict ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CK@PIHHMCC@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@OEOAAOGG@?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$find_empty_slot DD imagerel find_empty_slot
	DD	imagerel find_empty_slot+406
	DD	imagerel $unwind$find_empty_slot
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$find_empty_slot DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT ??_C@_1CK@PIHHMCC@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@PIHHMCC@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'e'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@OEOAAOGG@?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@OEOAAOGG@?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'k'
	DB	00H, 'e', 00H, 'y', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT find_empty_slot
_TEXT	SEGMENT
i$ = 32
mask$ = 40
perturb$ = 48
ep$ = 56
ep0$ = 64
mp$ = 96
key$ = 104
hash$ = 112
value_addr$ = 120
find_empty_slot PROC					; COMDAT

; 774  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 775  :     size_t i;
; 776  :     size_t perturb;
; 777  :     size_t mask = DK_MASK(mp->ma_keys);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  0001d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00021	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00025	48 ff c8	 dec	 rax
  00028	48 89 44 24 28	 mov	 QWORD PTR mask$[rsp], rax

; 778  :     PyDictKeyEntry *ep0 = &mp->ma_keys->dk_entries[0];

  0002d	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  00032	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00036	48 83 c0 20	 add	 rax, 32			; 00000020H
  0003a	48 89 44 24 40	 mov	 QWORD PTR ep0$[rsp], rax

; 779  :     PyDictKeyEntry *ep;
; 780  : 
; 781  :     assert(key != NULL);

  0003f	48 83 7c 24 68
	00		 cmp	 QWORD PTR key$[rsp], 0
  00045	75 1c		 jne	 SHORT $LN9@find_empty
  00047	41 b8 0d 03 00
	00		 mov	 r8d, 781		; 0000030dH
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@OEOAAOGG@?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00061	33 c0		 xor	 eax, eax
$LN9@find_empty:

; 782  :     if (!PyUnicode_CheckExact(key))

  00063	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0006a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  0006f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00073	74 14		 je	 SHORT $LN6@find_empty

; 783  :         mp->ma_keys->dk_lookup = lookdict;

  00075	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  0007a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  00085	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN6@find_empty:

; 784  :     i = hash & mask;

  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  0008e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  00093	48 23 c8	 and	 rcx, rax
  00096	48 8b c1	 mov	 rax, rcx
  00099	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 785  :     ep = &ep0[i];

  0009e	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  000a3	48 6b c0 18	 imul	 rax, 24
  000a7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep0$[rsp]
  000ac	48 03 c8	 add	 rcx, rax
  000af	48 8b c1	 mov	 rax, rcx
  000b2	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 786  :     for (perturb = hash; ep->me_key != NULL; perturb >>= PERTURB_SHIFT) {

  000b7	48 8b 44 24 70	 mov	 rax, QWORD PTR hash$[rsp]
  000bc	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
  000c1	eb 0e		 jmp	 SHORT $LN5@find_empty
$LN4@find_empty:
  000c3	48 8b 44 24 30	 mov	 rax, QWORD PTR perturb$[rsp]
  000c8	48 c1 e8 05	 shr	 rax, 5
  000cc	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
$LN5@find_empty:
  000d1	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000d6	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000db	74 43		 je	 SHORT $LN3@find_empty

; 787  :         i = (i << 2) + i + perturb + 1;

  000dd	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  000e2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000e7	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  000eb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR perturb$[rsp]
  000f0	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  000f5	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 788  :         ep = &ep0[i & mask];

  000fa	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  000ff	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00104	48 23 c8	 and	 rcx, rax
  00107	48 8b c1	 mov	 rax, rcx
  0010a	48 6b c0 18	 imul	 rax, 24
  0010e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep0$[rsp]
  00113	48 03 c8	 add	 rcx, rax
  00116	48 8b c1	 mov	 rax, rcx
  00119	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 789  :     }

  0011e	eb a3		 jmp	 SHORT $LN4@find_empty
$LN3@find_empty:

; 790  :     assert(ep->me_value == NULL);

  00120	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00125	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0012a	74 1c		 je	 SHORT $LN10@find_empty
  0012c	41 b8 16 03 00
	00		 mov	 r8d, 790		; 00000316H
  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@PIHHMCC@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00146	33 c0		 xor	 eax, eax
$LN10@find_empty:

; 791  :     if (mp->ma_values)

  00148	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  0014d	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00152	74 27		 je	 SHORT $LN2@find_empty

; 792  :         *value_addr = &mp->ma_values[i & mask];

  00154	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  00159	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0015e	48 23 c8	 and	 rcx, rax
  00161	48 8b c1	 mov	 rax, rcx
  00164	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  00169	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0016d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00171	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  00176	48 89 01	 mov	 QWORD PTR [rcx], rax

; 793  :     else

  00179	eb 11		 jmp	 SHORT $LN1@find_empty
$LN2@find_empty:

; 794  :         *value_addr = &ep->me_value;

  0017b	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00180	48 83 c0 10	 add	 rax, 16
  00184	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  00189	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN1@find_empty:

; 795  :     return ep;

  0018c	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]

; 796  : }

  00191	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00195	c3		 ret	 0
find_empty_slot ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$insertion_resize DD imagerel insertion_resize
	DD	imagerel insertion_resize+56
	DD	imagerel $unwind$insertion_resize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$insertion_resize DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT insertion_resize
_TEXT	SEGMENT
mp$ = 48
insertion_resize PROC					; COMDAT

; 800  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 801  :     return dictresize(mp, GROWTH_RATE(mp));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mp$[rsp]
  00017	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0001b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0001f	48 d1 f9	 sar	 rcx, 1
  00022	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00026	48 8b d0	 mov	 rdx, rax
  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mp$[rsp]
  0002e	e8 00 00 00 00	 call	 dictresize

; 802  : }

  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00037	c3		 ret	 0
insertion_resize ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@GBAIJCII@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EK@PBFMPLCM@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAl?$AAo?$AAo?$AAk?$AAd?$AAi?$AAc?$AAt?$AA_?$AAs@ ; `string'
PUBLIC	??_C@_1DE@IMAKNMFB@?$AAo?$AAl?$AAd?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@LPINHHAG@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@HGONKNGF@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAE?$AAM?$AAP?$AAT?$AAY?$AA_?$AAK?$AAE?$AAY?$AAS?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DH@PECGNGIB@parallel?5thread?5attempted?5to?5res@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictresize DD imagerel dictresize
	DD	imagerel dictresize+1241
	DD	imagerel $unwind$dictresize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictresize DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_1DA@GBAIJCII@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@GBAIJCII@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ DB 'o'
	DB	00H, 'l', 00H, 'd', 00H, 'k', 00H, 'e', 00H, 'y', 00H, 's', 00H
	DB	'-', 00H, '>', 00H, 'd', 00H, 'k', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'f', 00H, 'c', 00H, 'n', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '1', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@PBFMPLCM@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAl?$AAo?$AAo?$AAk?$AAd?$AAi?$AAc?$AAt?$AA_?$AAs@
CONST	SEGMENT
??_C@_1EK@PBFMPLCM@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAl?$AAo?$AAo?$AAk?$AAd?$AAi?$AAc?$AAt?$AA_?$AAs@ DB 'o'
	DB	00H, 'l', 00H, 'd', 00H, 'k', 00H, 'e', 00H, 'y', 00H, 's', 00H
	DB	'-', 00H, '>', 00H, 'd', 00H, 'k', 00H, '_', 00H, 'l', 00H, 'o'
	DB	00H, 'o', 00H, 'k', 00H, 'u', 00H, 'p', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'o', 00H, 'k', 00H, 'd'
	DB	00H, 'i', 00H, 'c', 00H, 't', 00H, '_', 00H, 's', 00H, 'p', 00H
	DB	'l', 00H, 'i', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@IMAKNMFB@?$AAo?$AAl?$AAd?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@IMAKNMFB@?$AAo?$AAl?$AAd?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$AA@ DB 'o'
	DB	00H, 'l', 00H, 'd', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H
	DB	'e', 00H, 's', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'e'
	DB	00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, '_', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@LPINHHAG@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@LPINHHAG@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?$AA@ DB 'e'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'm', 00H, 'e', 00H, '_', 00H
	DB	'k', 00H, 'e', 00H, 'y', 00H, ' ', 00H, '!', 00H, '=', 00H, ' '
	DB	00H, 'd', 00H, 'u', 00H, 'm', 00H, 'm', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HGONKNGF@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAE?$AAM?$AAP?$AAT?$AAY?$AA_?$AAK?$AAE?$AAY?$AAS?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@HGONKNGF@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAE?$AAM?$AAP?$AAT?$AAY?$AA_?$AAK?$AAE?$AAY?$AAS?$AA?$AA@ DB 'o'
	DB	00H, 'l', 00H, 'd', 00H, 'k', 00H, 'e', 00H, 'y', 00H, 's', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'y', 00H, '_'
	DB	00H, 'E', 00H, 'M', 00H, 'P', 00H, 'T', 00H, 'Y', 00H, '_', 00H
	DB	'K', 00H, 'E', 00H, 'Y', 00H, 'S', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@PECGNGIB@parallel?5thread?5attempted?5to?5res@
CONST	SEGMENT
??_C@_0DH@PECGNGIB@parallel?5thread?5attempted?5to?5res@ DB 'parallel thr'
	DB	'ead attempted to resize a main thread dict', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dictresize
_TEXT	SEGMENT
oldsize$ = 32
i$ = 40
newsize$ = 48
oldkeys$ = 56
oldvalues$ = 64
ep$21038 = 72
ep0$21057 = 80
tv191 = 88
tv227 = 92
mp$ = 112
minused$ = 120
dictresize PROC						; COMDAT

; 923  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 924  :     Py_ssize_t newsize;
; 925  :     PyDictKeysObject *oldkeys;
; 926  :     PyObject **oldvalues;
; 927  :     Py_ssize_t i, oldsize;
; 928  : 
; 929  : #ifdef WITH_PARALLEL
; 930  :     if (Py_PXCTX && Px_ISPY(mp)) {

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 2f		 je	 SHORT $LN29@dictresize
  00017	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  0001c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00020	48 83 e0 01	 and	 rax, 1
  00024	48 85 c0	 test	 rax, rax
  00027	74 1d		 je	 SHORT $LN29@dictresize

; 931  :         PyErr_SetString(PyExc_RuntimeError,
; 932  :                         "parallel thread attempted to "
; 933  :                         "resize a main thread dict");

  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@PECGNGIB@parallel?5thread?5attempted?5to?5res@
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00037	e8 00 00 00 00	 call	 PyErr_SetString

; 934  :         return -1;

  0003c	b8 ff ff ff ff	 mov	 eax, -1
  00041	e9 8e 04 00 00	 jmp	 $LN30@dictresize
$LN29@dictresize:

; 935  :     }
; 936  : #endif
; 937  : 
; 938  : /* Find the smallest table size > minused. */
; 939  :     for (newsize = PyDict_MINSIZE_COMBINED;
; 940  :          newsize <= minused && newsize > 0;
; 941  :          newsize <<= 1)

  00046	48 c7 44 24 30
	08 00 00 00	 mov	 QWORD PTR newsize$[rsp], 8
  0004f	eb 0d		 jmp	 SHORT $LN28@dictresize
$LN27@dictresize:
  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR newsize$[rsp]
  00056	48 d1 e0	 shl	 rax, 1
  00059	48 89 44 24 30	 mov	 QWORD PTR newsize$[rsp], rax
$LN28@dictresize:
  0005e	48 8b 44 24 78	 mov	 rax, QWORD PTR minused$[rsp]
  00063	48 39 44 24 30	 cmp	 QWORD PTR newsize$[rsp], rax
  00068	7f 0a		 jg	 SHORT $LN26@dictresize
  0006a	48 83 7c 24 30
	00		 cmp	 QWORD PTR newsize$[rsp], 0
  00070	7e 02		 jle	 SHORT $LN26@dictresize

; 942  :         ;

  00072	eb dd		 jmp	 SHORT $LN27@dictresize
$LN26@dictresize:

; 943  :     if (newsize <= 0) {

  00074	48 83 7c 24 30
	00		 cmp	 QWORD PTR newsize$[rsp], 0
  0007a	7f 0f		 jg	 SHORT $LN25@dictresize

; 944  :         PyErr_NoMemory();

  0007c	e8 00 00 00 00	 call	 PyErr_NoMemory

; 945  :         return -1;

  00081	b8 ff ff ff ff	 mov	 eax, -1
  00086	e9 49 04 00 00	 jmp	 $LN30@dictresize
$LN25@dictresize:

; 946  :     }
; 947  :     oldkeys = mp->ma_keys;

  0008b	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  00090	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00094	48 89 44 24 38	 mov	 QWORD PTR oldkeys$[rsp], rax

; 948  :     oldvalues = mp->ma_values;

  00099	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  0009e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000a2	48 89 44 24 40	 mov	 QWORD PTR oldvalues$[rsp], rax

; 949  :     /* Allocate a new table. */
; 950  :     mp->ma_keys = new_keys_object(newsize);

  000a7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR newsize$[rsp]
  000ac	e8 00 00 00 00	 call	 new_keys_object
  000b1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR mp$[rsp]
  000b6	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 951  :     if (mp->ma_keys == NULL) {

  000ba	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  000bf	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000c4	75 18		 jne	 SHORT $LN24@dictresize

; 952  :         mp->ma_keys = oldkeys;

  000c6	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  000cb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  000d0	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 953  :         return -1;

  000d4	b8 ff ff ff ff	 mov	 eax, -1
  000d9	e9 f6 03 00 00	 jmp	 $LN30@dictresize
$LN24@dictresize:

; 954  :     }
; 955  :     if (oldkeys->dk_lookup == lookdict)

  000de	48 8b 44 24 38	 mov	 rax, QWORD PTR oldkeys$[rsp]
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  000ea	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000ee	75 14		 jne	 SHORT $LN23@dictresize

; 956  :         mp->ma_keys->dk_lookup = lookdict;

  000f0	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  000f5	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  00100	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN23@dictresize:

; 957  :     oldsize = DK_SIZE(oldkeys);

  00104	48 8b 44 24 38	 mov	 rax, QWORD PTR oldkeys$[rsp]
  00109	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0010d	48 89 44 24 20	 mov	 QWORD PTR oldsize$[rsp], rax

; 958  :     mp->ma_values = NULL;

  00112	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  00117	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 959  :     /* If empty then nothing to copy so just return */
; 960  :     if (oldsize == 1) {

  0011f	48 83 7c 24 20
	01		 cmp	 QWORD PTR oldsize$[rsp], 1
  00125	75 75		 jne	 SHORT $LN22@dictresize

; 961  :         assert(oldkeys == Py_EMPTY_KEYS);

  00127	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:empty_keys_struct
  0012e	48 39 44 24 38	 cmp	 QWORD PTR oldkeys$[rsp], rax
  00133	74 1c		 je	 SHORT $LN32@dictresize
  00135	41 b8 c1 03 00
	00		 mov	 r8d, 961		; 000003c1H
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@HGONKNGF@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAE?$AAM?$AAP?$AAT?$AAY?$AA_?$AAK?$AAE?$AAY?$AAS?$AA?$AA@
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014f	33 c0		 xor	 eax, eax
$LN32@dictresize:

; 962  :         DK_DECREF(oldkeys);

  00151	e8 00 00 00 00	 call	 _Py_PXCTX
  00156	85 c0		 test	 eax, eax
  00158	74 02		 je	 SHORT $LN33@dictresize
  0015a	eb 11		 jmp	 SHORT $LN34@dictresize
$LN33@dictresize:
  0015c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00163	48 ff c8	 dec	 rax
  00166	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN34@dictresize:
  0016d	48 8b 44 24 38	 mov	 rax, QWORD PTR oldkeys$[rsp]
  00172	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00175	48 ff c8	 dec	 rax
  00178	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  0017d	48 89 01	 mov	 QWORD PTR [rcx], rax
  00180	48 8b 44 24 38	 mov	 rax, QWORD PTR oldkeys$[rsp]
  00185	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00189	75 0a		 jne	 SHORT $LN21@dictresize
  0018b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  00190	e8 00 00 00 00	 call	 free_keys_object
$LN21@dictresize:

; 963  :         return 0;

  00195	33 c0		 xor	 eax, eax
  00197	e9 38 03 00 00	 jmp	 $LN30@dictresize
$LN22@dictresize:

; 964  :     }
; 965  :     /* Main loop below assumes we can transfer refcount to new keys
; 966  :      * and that value is stored in me_value.
; 967  :      * Increment ref-counts and copy values here to compensate
; 968  :      * This (resizing a split table) should be relatively rare */
; 969  :     if (oldvalues != NULL) {

  0019c	48 83 7c 24 40
	00		 cmp	 QWORD PTR oldvalues$[rsp], 0
  001a2	74 70		 je	 SHORT $LN20@dictresize

; 970  :         for (i = 0; i < oldsize; i++) {

  001a4	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  001ad	eb 0d		 jmp	 SHORT $LN19@dictresize
$LN18@dictresize:
  001af	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  001b4	48 ff c0	 inc	 rax
  001b7	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN19@dictresize:
  001bc	48 8b 44 24 20	 mov	 rax, QWORD PTR oldsize$[rsp]
  001c1	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  001c6	7d 4c		 jge	 SHORT $LN17@dictresize

; 971  :             if (oldvalues[i] != NULL) {

  001c8	48 8b 44 24 40	 mov	 rax, QWORD PTR oldvalues$[rsp]
  001cd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  001d2	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  001d7	74 39		 je	 SHORT $LN16@dictresize

; 972  :                 Py_INCREF(oldkeys->dk_entries[i].me_key);

  001d9	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  001de	48 6b c0 18	 imul	 rax, 24
  001e2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  001e7	48 8b 4c 01 28	 mov	 rcx, QWORD PTR [rcx+rax+40]
  001ec	e8 00 00 00 00	 call	 _Py_IncRef

; 973  :                 oldkeys->dk_entries[i].me_value = oldvalues[i];

  001f1	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  001f6	48 6b c0 18	 imul	 rax, 24
  001fa	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  001ff	48 8b 54 24 40	 mov	 rdx, QWORD PTR oldvalues$[rsp]
  00204	4c 8b 44 24 28	 mov	 r8, QWORD PTR i$[rsp]
  00209	4a 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+r8*8]
  0020d	48 89 54 01 30	 mov	 QWORD PTR [rcx+rax+48], rdx
$LN16@dictresize:

; 974  :             }
; 975  :         }

  00212	eb 9b		 jmp	 SHORT $LN18@dictresize
$LN17@dictresize:
$LN20@dictresize:

; 976  :     }
; 977  :     /* Main loop */
; 978  :     for (i = 0; i < oldsize; i++) {

  00214	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0021d	eb 0d		 jmp	 SHORT $LN15@dictresize
$LN14@dictresize:
  0021f	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00224	48 ff c0	 inc	 rax
  00227	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN15@dictresize:
  0022c	48 8b 44 24 20	 mov	 rax, QWORD PTR oldsize$[rsp]
  00231	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00236	7d 7b		 jge	 SHORT $LN13@dictresize

; 979  :         PyDictKeyEntry *ep = &oldkeys->dk_entries[i];

  00238	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0023d	48 6b c0 18	 imul	 rax, 24
  00241	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  00246	48 8d 44 01 20	 lea	 rax, QWORD PTR [rcx+rax+32]
  0024b	48 89 44 24 48	 mov	 QWORD PTR ep$21038[rsp], rax

; 980  :         if (ep->me_value != NULL) {

  00250	48 8b 44 24 48	 mov	 rax, QWORD PTR ep$21038[rsp]
  00255	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0025a	74 52		 je	 SHORT $LN12@dictresize

; 981  :             assert(ep->me_key != dummy);

  0025c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  00263	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ep$21038[rsp]
  00268	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  0026c	75 1c		 jne	 SHORT $LN35@dictresize
  0026e	41 b8 d5 03 00
	00		 mov	 r8d, 981		; 000003d5H
  00274	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0027b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@LPINHHAG@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?$AA@
  00282	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00288	33 c0		 xor	 eax, eax
$LN35@dictresize:

; 982  :             insertdict_clean(mp, ep->me_key, ep->me_hash, ep->me_value);

  0028a	48 8b 44 24 48	 mov	 rax, QWORD PTR ep$21038[rsp]
  0028f	4c 8b 48 10	 mov	 r9, QWORD PTR [rax+16]
  00293	48 8b 44 24 48	 mov	 rax, QWORD PTR ep$21038[rsp]
  00298	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0029b	48 8b 44 24 48	 mov	 rax, QWORD PTR ep$21038[rsp]
  002a0	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  002a4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR mp$[rsp]
  002a9	e8 00 00 00 00	 call	 insertdict_clean
$LN12@dictresize:

; 983  :         }
; 984  :     }

  002ae	e9 6c ff ff ff	 jmp	 $LN14@dictresize
$LN13@dictresize:

; 985  :     mp->ma_keys->dk_usable -= mp->ma_used;

  002b3	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  002b8	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  002bc	48 8b 4c 24 70	 mov	 rcx, QWORD PTR mp$[rsp]
  002c1	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  002c5	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  002c9	48 2b c1	 sub	 rax, rcx
  002cc	48 8b 4c 24 70	 mov	 rcx, QWORD PTR mp$[rsp]
  002d1	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  002d5	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 986  :     if (oldvalues != NULL) {

  002d9	48 83 7c 24 40
	00		 cmp	 QWORD PTR oldvalues$[rsp], 0
  002df	0f 84 df 00 00
	00		 je	 $LN11@dictresize

; 987  :         /* NULL out me_value slot in oldkeys, in case it was shared */
; 988  :         for (i = 0; i < oldsize; i++)

  002e5	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  002ee	eb 0d		 jmp	 SHORT $LN10@dictresize
$LN9@dictresize:
  002f0	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  002f5	48 ff c0	 inc	 rax
  002f8	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN10@dictresize:
  002fd	48 8b 44 24 20	 mov	 rax, QWORD PTR oldsize$[rsp]
  00302	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00307	7d 19		 jge	 SHORT $LN8@dictresize

; 989  :             oldkeys->dk_entries[i].me_value = NULL;

  00309	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0030e	48 6b c0 18	 imul	 rax, 24
  00312	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  00317	48 c7 44 01 30
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+48], 0
  00320	eb ce		 jmp	 SHORT $LN9@dictresize
$LN8@dictresize:

; 990  :         assert(oldvalues != empty_values);

  00322	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:empty_values
  00329	48 39 44 24 40	 cmp	 QWORD PTR oldvalues$[rsp], rax
  0032e	75 1c		 jne	 SHORT $LN36@dictresize
  00330	41 b8 de 03 00
	00		 mov	 r8d, 990		; 000003deH
  00336	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0033d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@IMAKNMFB@?$AAo?$AAl?$AAd?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$AA@
  00344	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0034a	33 c0		 xor	 eax, eax
$LN36@dictresize:

; 991  :         free_values(oldvalues);

  0034c	e8 00 00 00 00	 call	 _Py_PXCTX
  00351	85 c0		 test	 eax, eax
  00353	74 14		 je	 SHORT $LN37@dictresize
  00355	48 8b 4c 24 40	 mov	 rcx, QWORD PTR oldvalues$[rsp]
  0035a	e8 00 00 00 00	 call	 _PxMem_Free
  0035f	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv191[rsp], 0
  00367	eb 12		 jmp	 SHORT $LN38@dictresize
$LN37@dictresize:
  00369	48 8b 4c 24 40	 mov	 rcx, QWORD PTR oldvalues$[rsp]
  0036e	e8 00 00 00 00	 call	 _PyMem_DebugFree
  00373	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv191[rsp], 0
$LN38@dictresize:

; 992  :         DK_DECREF(oldkeys);

  0037b	e8 00 00 00 00	 call	 _Py_PXCTX
  00380	85 c0		 test	 eax, eax
  00382	74 02		 je	 SHORT $LN39@dictresize
  00384	eb 11		 jmp	 SHORT $LN40@dictresize
$LN39@dictresize:
  00386	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  0038d	48 ff c8	 dec	 rax
  00390	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN40@dictresize:
  00397	48 8b 44 24 38	 mov	 rax, QWORD PTR oldkeys$[rsp]
  0039c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0039f	48 ff c8	 dec	 rax
  003a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  003a7	48 89 01	 mov	 QWORD PTR [rcx], rax
  003aa	48 8b 44 24 38	 mov	 rax, QWORD PTR oldkeys$[rsp]
  003af	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  003b3	75 0a		 jne	 SHORT $LN7@dictresize
  003b5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  003ba	e8 00 00 00 00	 call	 free_keys_object
$LN7@dictresize:

; 993  :     }
; 994  :     else {

  003bf	e9 0e 01 00 00	 jmp	 $LN6@dictresize
$LN11@dictresize:

; 995  :         assert(oldkeys->dk_lookup != lookdict_split);

  003c4	48 8b 44 24 38	 mov	 rax, QWORD PTR oldkeys$[rsp]
  003c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_split
  003d0	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  003d4	75 1c		 jne	 SHORT $LN41@dictresize
  003d6	41 b8 e3 03 00
	00		 mov	 r8d, 995		; 000003e3H
  003dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  003e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@PBFMPLCM@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAl?$AAo?$AAo?$AAk?$AAd?$AAi?$AAc?$AAt?$AA_?$AAs@
  003ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003f0	33 c0		 xor	 eax, eax
$LN41@dictresize:

; 996  :         if (oldkeys->dk_lookup != lookdict_unicode_nodummy) {

  003f2	48 8b 44 24 38	 mov	 rax, QWORD PTR oldkeys$[rsp]
  003f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode_nodummy
  003fe	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00402	74 5c		 je	 SHORT $LN5@dictresize

; 997  :             PyDictKeyEntry *ep0 = &oldkeys->dk_entries[0];

  00404	48 8b 44 24 38	 mov	 rax, QWORD PTR oldkeys$[rsp]
  00409	48 83 c0 20	 add	 rax, 32			; 00000020H
  0040d	48 89 44 24 50	 mov	 QWORD PTR ep0$21057[rsp], rax

; 998  :             for (i = 0; i < oldsize; i++) {

  00412	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0041b	eb 0d		 jmp	 SHORT $LN4@dictresize
$LN3@dictresize:
  0041d	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00422	48 ff c0	 inc	 rax
  00425	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN4@dictresize:
  0042a	48 8b 44 24 20	 mov	 rax, QWORD PTR oldsize$[rsp]
  0042f	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00434	7d 2a		 jge	 SHORT $LN2@dictresize

; 999  :                 if (ep0[i].me_key == dummy)

  00436	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0043b	48 6b c0 18	 imul	 rax, 24
  0043f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dummy_struct
  00446	48 8b 54 24 50	 mov	 rdx, QWORD PTR ep0$21057[rsp]
  0044b	48 39 4c 02 08	 cmp	 QWORD PTR [rdx+rax+8], rcx
  00450	75 0c		 jne	 SHORT $LN1@dictresize

; 1000 :                     Py_DECREF(dummy);

  00452	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dummy_struct
  00459	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@dictresize:

; 1001 :             }

  0045e	eb bd		 jmp	 SHORT $LN3@dictresize
$LN2@dictresize:
$LN5@dictresize:

; 1002 :         }
; 1003 :         assert(oldkeys->dk_refcnt == 1);

  00460	48 8b 44 24 38	 mov	 rax, QWORD PTR oldkeys$[rsp]
  00465	48 83 38 01	 cmp	 QWORD PTR [rax], 1
  00469	74 1c		 je	 SHORT $LN42@dictresize
  0046b	41 b8 eb 03 00
	00		 mov	 r8d, 1003		; 000003ebH
  00471	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00478	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@GBAIJCII@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  0047f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00485	33 c0		 xor	 eax, eax
$LN42@dictresize:

; 1004 :         DK_DEBUG_DECREF PyMem_FREE(oldkeys);

  00487	e8 00 00 00 00	 call	 _Py_PXCTX
  0048c	85 c0		 test	 eax, eax
  0048e	74 02		 je	 SHORT $LN43@dictresize
  00490	eb 11		 jmp	 SHORT $LN44@dictresize
$LN43@dictresize:
  00492	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00499	48 ff c8	 dec	 rax
  0049c	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN44@dictresize:
  004a3	e8 00 00 00 00	 call	 _Py_PXCTX
  004a8	85 c0		 test	 eax, eax
  004aa	74 14		 je	 SHORT $LN45@dictresize
  004ac	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  004b1	e8 00 00 00 00	 call	 _PxMem_Free
  004b6	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv227[rsp], 0
  004be	eb 12		 jmp	 SHORT $LN46@dictresize
$LN45@dictresize:
  004c0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  004c5	e8 00 00 00 00	 call	 _PyMem_DebugFree
  004ca	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv227[rsp], 0
$LN46@dictresize:
$LN6@dictresize:

; 1005 :     }
; 1006 :     return 0;

  004d2	33 c0		 xor	 eax, eax
$LN30@dictresize:

; 1007 : }

  004d4	48 83 c4 68	 add	 rsp, 104		; 00000068H
  004d8	c3		 ret	 0
dictresize ENDP
_TEXT	ENDS
PUBLIC	??_C@_1GM@PACNDBNA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAk?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_1BM@IFHPBCCM@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@HNMJJMJC@?$AAk?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$insertdict_clean DD imagerel insertdict_clean
	DD	imagerel insertdict_clean+524
	DD	imagerel $unwind$insertdict_clean
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$insertdict_clean DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT ??_C@_1GM@PACNDBNA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAk?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1GM@PACNDBNA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAk?$AA?9?$AA?$DO@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, 'E', 00H, 'x', 00H, 'a', 00H, 'c', 00H, 't', 00H
	DB	'(', 00H, 'k', 00H, 'e', 00H, 'y', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'k', 00H, '-', 00H, '>', 00H, 'd', 00H
	DB	'k', 00H, '_', 00H, 'l', 00H, 'o', 00H, 'o', 00H, 'k', 00H, 'u'
	DB	00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'l', 00H
	DB	'o', 00H, 'o', 00H, 'k', 00H, 'd', 00H, 'i', 00H, 'c', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@IFHPBCCM@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@IFHPBCCM@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@HNMJJMJC@?$AAk?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@HNMJJMJC@?$AAk?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'k'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'k', 00H, '_', 00H, 'l', 00H
	DB	'o', 00H, 'o', 00H, 'k', 00H, 'u', 00H, 'p', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT insertdict_clean
_TEXT	SEGMENT
i$ = 32
mask$ = 40
perturb$ = 48
k$ = 56
ep$ = 64
ep0$ = 72
mp$ = 96
key$ = 104
hash$ = 112
value$ = 120
insertdict_clean PROC					; COMDAT

; 886  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 887  :     size_t i;
; 888  :     size_t perturb;
; 889  :     PyDictKeysObject *k = mp->ma_keys;

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  0001d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00021	48 89 44 24 38	 mov	 QWORD PTR k$[rsp], rax

; 890  :     size_t mask = (size_t)DK_SIZE(k)-1;

  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR k$[rsp]
  0002b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002f	48 ff c8	 dec	 rax
  00032	48 89 44 24 28	 mov	 QWORD PTR mask$[rsp], rax

; 891  :     PyDictKeyEntry *ep0 = &k->dk_entries[0];

  00037	48 8b 44 24 38	 mov	 rax, QWORD PTR k$[rsp]
  0003c	48 83 c0 20	 add	 rax, 32			; 00000020H
  00040	48 89 44 24 48	 mov	 QWORD PTR ep0$[rsp], rax

; 892  :     PyDictKeyEntry *ep;
; 893  : 
; 894  :     assert(k->dk_lookup != NULL);

  00045	48 8b 44 24 38	 mov	 rax, QWORD PTR k$[rsp]
  0004a	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0004f	75 1c		 jne	 SHORT $LN6@insertdict@2
  00051	41 b8 7e 03 00
	00		 mov	 r8d, 894		; 0000037eH
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@HNMJJMJC@?$AAk?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006b	33 c0		 xor	 eax, eax
$LN6@insertdict@2:

; 895  :     assert(value != NULL);

  0006d	48 83 7c 24 78
	00		 cmp	 QWORD PTR value$[rsp], 0
  00073	75 1c		 jne	 SHORT $LN7@insertdict@2
  00075	41 b8 7f 03 00
	00		 mov	 r8d, 895		; 0000037fH
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@IFHPBCCM@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008f	33 c0		 xor	 eax, eax
$LN7@insertdict@2:

; 896  :     assert(key != NULL);

  00091	48 83 7c 24 68
	00		 cmp	 QWORD PTR key$[rsp], 0
  00097	75 1c		 jne	 SHORT $LN8@insertdict@2
  00099	41 b8 80 03 00
	00		 mov	 r8d, 896		; 00000380H
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@OEOAAOGG@?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b3	33 c0		 xor	 eax, eax
$LN8@insertdict@2:

; 897  :     assert(key != dummy);

  000b5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  000bc	48 39 44 24 68	 cmp	 QWORD PTR key$[rsp], rax
  000c1	75 1c		 jne	 SHORT $LN9@insertdict@2
  000c3	41 b8 81 03 00
	00		 mov	 r8d, 897		; 00000381H
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@IGFPGOMC@?$AAk?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?$AA@
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000dd	33 c0		 xor	 eax, eax
$LN9@insertdict@2:

; 898  :     assert(PyUnicode_CheckExact(key) || k->dk_lookup == lookdict);

  000df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  000e6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  000eb	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000ef	74 2e		 je	 SHORT $LN10@insertdict@2
  000f1	48 8b 44 24 38	 mov	 rax, QWORD PTR k$[rsp]
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  000fd	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00101	74 1c		 je	 SHORT $LN10@insertdict@2
  00103	41 b8 82 03 00
	00		 mov	 r8d, 898		; 00000382H
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GM@PACNDBNA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAk?$AA?9?$AA?$DO@
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011d	33 c0		 xor	 eax, eax
$LN10@insertdict@2:

; 899  :     i = hash & mask;

  0011f	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  00124	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  00129	48 23 c8	 and	 rcx, rax
  0012c	48 8b c1	 mov	 rax, rcx
  0012f	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 900  :     ep = &ep0[i];

  00134	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00139	48 6b c0 18	 imul	 rax, 24
  0013d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ep0$[rsp]
  00142	48 03 c8	 add	 rcx, rax
  00145	48 8b c1	 mov	 rax, rcx
  00148	48 89 44 24 40	 mov	 QWORD PTR ep$[rsp], rax

; 901  :     for (perturb = hash; ep->me_key != NULL; perturb >>= PERTURB_SHIFT) {

  0014d	48 8b 44 24 70	 mov	 rax, QWORD PTR hash$[rsp]
  00152	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
  00157	eb 0e		 jmp	 SHORT $LN3@insertdict@2
$LN2@insertdict@2:
  00159	48 8b 44 24 30	 mov	 rax, QWORD PTR perturb$[rsp]
  0015e	48 c1 e8 05	 shr	 rax, 5
  00162	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
$LN3@insertdict@2:
  00167	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  0016c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00171	74 43		 je	 SHORT $LN1@insertdict@2

; 902  :         i = (i << 2) + i + perturb + 1;

  00173	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00178	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0017d	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00181	48 8b 4c 24 30	 mov	 rcx, QWORD PTR perturb$[rsp]
  00186	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  0018b	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 903  :         ep = &ep0[i & mask];

  00190	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  00195	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0019a	48 23 c8	 and	 rcx, rax
  0019d	48 8b c1	 mov	 rax, rcx
  001a0	48 6b c0 18	 imul	 rax, 24
  001a4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ep0$[rsp]
  001a9	48 03 c8	 add	 rcx, rax
  001ac	48 8b c1	 mov	 rax, rcx
  001af	48 89 44 24 40	 mov	 QWORD PTR ep$[rsp], rax

; 904  :     }

  001b4	eb a3		 jmp	 SHORT $LN2@insertdict@2
$LN1@insertdict@2:

; 905  :     assert(ep->me_value == NULL);

  001b6	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  001bb	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  001c0	74 1c		 je	 SHORT $LN11@insertdict@2
  001c2	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  001c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@PIHHMCC@?$AAe?$AAp?$AA?9?$AA?$DO?$AAm?$AAe?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  001d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001dc	33 c0		 xor	 eax, eax
$LN11@insertdict@2:

; 906  :     ep->me_key = key;

  001de	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  001e3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  001e8	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 907  :     ep->me_hash = hash;

  001ec	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  001f1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  001f6	48 89 08	 mov	 QWORD PTR [rax], rcx

; 908  :     ep->me_value = value;

  001f9	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  001fe	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value$[rsp]
  00203	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 909  : }

  00207	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0020b	c3		 ret	 0
insertdict_clean ENDP
_TEXT	ENDS
PUBLIC	PyDict_DelItem
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_DelItem DD imagerel $LN12
	DD	imagerel $LN12+439
	DD	imagerel $unwind$PyDict_DelItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_DelItem DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_DelItem
_TEXT	SEGMENT
mp$ = 32
old_key$ = 40
value_addr$ = 48
old_value$ = 56
ep$ = 64
hash$ = 72
op$ = 96
key$ = 104
PyDict_DelItem PROC					; COMDAT

; 1244 : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1245 :     PyDictObject *mp;
; 1246 :     Py_hash_t hash;
; 1247 :     PyDictKeyEntry *ep;
; 1248 :     PyObject *old_key, *old_value;
; 1249 :     PyObject **value_addr;
; 1250 : 
; 1251 :     if (!PyDict_Check(op)) {

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001d	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00022	85 c0		 test	 eax, eax
  00024	75 1b		 jne	 SHORT $LN8@PyDict_Del

; 1252 :         PyErr_BadInternalCall();

  00026	ba e4 04 00 00	 mov	 edx, 1252		; 000004e4H
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00032	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 1253 :         return -1;

  00037	b8 ff ff ff ff	 mov	 eax, -1
  0003c	e9 71 01 00 00	 jmp	 $LN9@PyDict_Del
$LN8@PyDict_Del:

; 1254 :     }
; 1255 :     assert(key);

  00041	48 83 7c 24 68
	00		 cmp	 QWORD PTR key$[rsp], 0
  00047	75 1c		 jne	 SHORT $LN11@PyDict_Del
  00049	41 b8 e7 04 00
	00		 mov	 r8d, 1255		; 000004e7H
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17FJFCONIE@?$AAk?$AAe?$AAy?$AA?$AA@
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00063	33 c0		 xor	 eax, eax
$LN11@PyDict_Del:

; 1256 : 
; 1257 :     /*
; 1258 :     if (Px_CHECK_PROTECTION(op, key, NULL))
; 1259 :         return -1;
; 1260 :     */
; 1261 : 
; 1262 :     if (!PyUnicode_CheckExact(key) ||
; 1263 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0006c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  00071	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00075	75 16		 jne	 SHORT $LN6@PyDict_Del
  00077	48 8b 44 24 68	 mov	 rax, QWORD PTR key$[rsp]
  0007c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00080	48 89 44 24 48	 mov	 QWORD PTR hash$[rsp], rax
  00085	48 83 7c 24 48
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  0008b	75 21		 jne	 SHORT $LN7@PyDict_Del
$LN6@PyDict_Del:

; 1264 :         hash = PyObject_Hash(key);

  0008d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  00092	e8 00 00 00 00	 call	 PyObject_Hash
  00097	48 89 44 24 48	 mov	 QWORD PTR hash$[rsp], rax

; 1265 :         if (hash == -1)

  0009c	48 83 7c 24 48
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  000a2	75 0a		 jne	 SHORT $LN5@PyDict_Del

; 1266 :             return -1;

  000a4	b8 ff ff ff ff	 mov	 eax, -1
  000a9	e9 04 01 00 00	 jmp	 $LN9@PyDict_Del
$LN5@PyDict_Del:
$LN7@PyDict_Del:

; 1267 :     }
; 1268 :     mp = (PyDictObject *)op;

  000ae	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  000b3	48 89 44 24 20	 mov	 QWORD PTR mp$[rsp], rax

; 1269 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  000b8	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  000bd	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000c1	4c 8d 4c 24 30	 lea	 r9, QWORD PTR value_addr$[rsp]
  000c6	4c 8b 44 24 48	 mov	 r8, QWORD PTR hash$[rsp]
  000cb	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  000d0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mp$[rsp]
  000d5	ff 50 10	 call	 QWORD PTR [rax+16]
  000d8	48 89 44 24 40	 mov	 QWORD PTR ep$[rsp], rax

; 1270 :     if (ep == NULL)

  000dd	48 83 7c 24 40
	00		 cmp	 QWORD PTR ep$[rsp], 0
  000e3	75 0a		 jne	 SHORT $LN4@PyDict_Del

; 1271 :         return -1;

  000e5	b8 ff ff ff ff	 mov	 eax, -1
  000ea	e9 c3 00 00 00	 jmp	 $LN9@PyDict_Del
$LN4@PyDict_Del:

; 1272 :     if (*value_addr == NULL) {

  000ef	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]
  000f4	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000f8	75 14		 jne	 SHORT $LN3@PyDict_Del

; 1273 :         set_key_error(key);

  000fa	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  000ff	e8 00 00 00 00	 call	 set_key_error

; 1274 :         return -1;

  00104	b8 ff ff ff ff	 mov	 eax, -1
  00109	e9 a4 00 00 00	 jmp	 $LN9@PyDict_Del
$LN3@PyDict_Del:

; 1275 :     }
; 1276 :     old_value = *value_addr;

  0010e	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]
  00113	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00116	48 89 44 24 38	 mov	 QWORD PTR old_value$[rsp], rax

; 1277 :     /*
; 1278 :     if (Px_ASSIGNMENT_ERROR(op, old_value))
; 1279 :         return -1;
; 1280 :     */
; 1281 :     *value_addr = NULL;

  0011b	48 8b 44 24 30	 mov	 rax, QWORD PTR value_addr$[rsp]
  00120	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1282 :     mp->ma_used--;

  00127	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  0012c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00130	48 ff c8	 dec	 rax
  00133	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mp$[rsp]
  00138	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 1283 :     if (!_PyDict_HasSplitTable(mp)) {

  0013c	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  00141	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00146	75 5e		 jne	 SHORT $LN2@PyDict_Del

; 1284 :         ENSURE_ALLOWS_DELETIONS(mp);

  00148	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  0014d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode_nodummy
  00158	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  0015c	75 14		 jne	 SHORT $LN1@PyDict_Del
  0015e	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  00163	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00167	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode
  0016e	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN1@PyDict_Del:

; 1285 :         old_key = ep->me_key;

  00172	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00177	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0017b	48 89 44 24 28	 mov	 QWORD PTR old_key$[rsp], rax

; 1286 :         Py_INCREF(dummy);

  00180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dummy_struct
  00187	e8 00 00 00 00	 call	 _Py_IncRef

; 1287 :         ep->me_key = dummy;

  0018c	48 8b 44 24 40	 mov	 rax, QWORD PTR ep$[rsp]
  00191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dummy_struct
  00198	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1288 :         Py_DECREF(old_key);

  0019c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR old_key$[rsp]
  001a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PyDict_Del:

; 1289 :     }
; 1290 :     Py_DECREF(old_value);

  001a6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR old_value$[rsp]
  001ab	e8 00 00 00 00	 call	 _Py_DecRef

; 1291 :     return 0;

  001b0	33 c0		 xor	 eax, eax
$LN9@PyDict_Del:

; 1292 : }

  001b2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001b6	c3		 ret	 0
PyDict_DelItem ENDP
_TEXT	ENDS
EXTRN	PyErr_SetObject:PROC
EXTRN	PyExc_KeyError:QWORD
EXTRN	PyTuple_Pack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$set_key_error DD imagerel set_key_error
	DD	imagerel set_key_error+71
	DD	imagerel $unwind$set_key_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$set_key_error DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT set_key_error
_TEXT	SEGMENT
tup$ = 32
arg$ = 64
set_key_error PROC					; COMDAT

; 103  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 104  :     PyObject *tup;
; 105  :     tup = PyTuple_Pack(1, arg);

  00009	48 8b 54 24 40	 mov	 rdx, QWORD PTR arg$[rsp]
  0000e	b9 01 00 00 00	 mov	 ecx, 1
  00013	e8 00 00 00 00	 call	 PyTuple_Pack
  00018	48 89 44 24 20	 mov	 QWORD PTR tup$[rsp], rax

; 106  :     if (!tup)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR tup$[rsp], 0
  00023	75 02		 jne	 SHORT $LN1@set_key_er

; 107  :         return; /* caller will expect error to be set anyway */

  00025	eb 1b		 jmp	 SHORT $LN2@set_key_er
$LN1@set_key_er:

; 108  :     PyErr_SetObject(PyExc_KeyError, tup);

  00027	48 8b 54 24 20	 mov	 rdx, QWORD PTR tup$[rsp]
  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  00033	e8 00 00 00 00	 call	 PyErr_SetObject

; 109  :     Py_DECREF(tup);

  00038	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tup$[rsp]
  0003d	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@set_key_er:

; 110  : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
set_key_error ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lookdict_unicode DD imagerel lookdict_unicode
	DD	imagerel lookdict_unicode+681
	DD	imagerel $unwind$lookdict_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookdict_unicode DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lookdict_unicode
_TEXT	SEGMENT
i$ = 32
mask$ = 40
perturb$ = 48
ep$ = 56
ep0$ = 64
freeslot$ = 72
mp$ = 96
key$ = 104
hash$ = 112
value_addr$ = 120
lookdict_unicode PROC					; COMDAT

; 561  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 562  :     register size_t i;
; 563  :     register size_t perturb;
; 564  :     register PyDictKeyEntry *freeslot;
; 565  :     register size_t mask = DK_MASK(mp->ma_keys);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  0001d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00021	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00025	48 ff c8	 dec	 rax
  00028	48 89 44 24 28	 mov	 QWORD PTR mask$[rsp], rax

; 566  :     PyDictKeyEntry *ep0 = &mp->ma_keys->dk_entries[0];

  0002d	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  00032	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00036	48 83 c0 20	 add	 rax, 32			; 00000020H
  0003a	48 89 44 24 40	 mov	 QWORD PTR ep0$[rsp], rax

; 567  :     register PyDictKeyEntry *ep;
; 568  : 
; 569  :     /* Make sure this function doesn't have to handle non-unicode keys,
; 570  :        including subclasses of str; e.g., one reason to subclass
; 571  :        unicodes is to override __eq__, and for speed we don't cater to
; 572  :        that here. */
; 573  :     if (!PyUnicode_CheckExact(key)) {

  0003f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00046	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  0004b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0004f	74 32		 je	 SHORT $LN15@lookdict_u@2

; 574  :         mp->ma_keys->dk_lookup = lookdict;

  00051	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  00056	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  00061	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 575  :         return lookdict(mp, key, hash, value_addr);

  00065	4c 8b 4c 24 78	 mov	 r9, QWORD PTR value_addr$[rsp]
  0006a	4c 8b 44 24 70	 mov	 r8, QWORD PTR hash$[rsp]
  0006f	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  00074	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  00079	e8 00 00 00 00	 call	 lookdict
  0007e	e9 21 02 00 00	 jmp	 $LN16@lookdict_u@2
$LN15@lookdict_u@2:

; 576  :     }
; 577  :     i = (size_t)hash & mask;

  00083	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  00088	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  0008d	48 23 c8	 and	 rcx, rax
  00090	48 8b c1	 mov	 rax, rcx
  00093	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 578  :     ep = &ep0[i];

  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0009d	48 6b c0 18	 imul	 rax, 24
  000a1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep0$[rsp]
  000a6	48 03 c8	 add	 rcx, rax
  000a9	48 8b c1	 mov	 rax, rcx
  000ac	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 579  :     if (ep->me_key == NULL || ep->me_key == key) {

  000b1	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000b6	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000bb	74 10		 je	 SHORT $LN13@lookdict_u@2
  000bd	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000c2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  000c7	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  000cb	75 1b		 jne	 SHORT $LN14@lookdict_u@2
$LN13@lookdict_u@2:

; 580  :         *value_addr = &ep->me_value;

  000cd	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000d2	48 83 c0 10	 add	 rax, 16
  000d6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  000db	48 89 01	 mov	 QWORD PTR [rcx], rax

; 581  :         return ep;

  000de	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000e3	e9 bc 01 00 00	 jmp	 $LN16@lookdict_u@2
$LN14@lookdict_u@2:

; 582  :     }
; 583  :     if (ep->me_key == dummy)

  000e8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  000ef	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ep$[rsp]
  000f4	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  000f8	75 0c		 jne	 SHORT $LN12@lookdict_u@2

; 584  :         freeslot = ep;

  000fa	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  000ff	48 89 44 24 48	 mov	 QWORD PTR freeslot$[rsp], rax

; 585  :     else {

  00104	eb 4a		 jmp	 SHORT $LN11@lookdict_u@2
$LN12@lookdict_u@2:

; 586  :         if (ep->me_hash == hash && unicode_eq(ep->me_key, key)) {

  00106	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0010b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  00110	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00113	75 32		 jne	 SHORT $LN10@lookdict_u@2
  00115	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  0011a	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0011f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00123	e8 00 00 00 00	 call	 unicode_eq
  00128	85 c0		 test	 eax, eax
  0012a	74 1b		 je	 SHORT $LN10@lookdict_u@2

; 587  :             *value_addr = &ep->me_value;

  0012c	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00131	48 83 c0 10	 add	 rax, 16
  00135	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  0013a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 588  :             return ep;

  0013d	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00142	e9 5d 01 00 00	 jmp	 $LN16@lookdict_u@2
$LN10@lookdict_u@2:

; 589  :         }
; 590  :         freeslot = NULL;

  00147	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR freeslot$[rsp], 0
$LN11@lookdict_u@2:

; 591  :     }
; 592  : 
; 593  :     /* In the loop, me_key == dummy is by far (factor of 100s) the
; 594  :        least likely outcome, so test for that last. */
; 595  :     for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {

  00150	48 8b 44 24 70	 mov	 rax, QWORD PTR hash$[rsp]
  00155	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
  0015a	eb 0e		 jmp	 SHORT $LN9@lookdict_u@2
$LN8@lookdict_u@2:
  0015c	48 8b 44 24 30	 mov	 rax, QWORD PTR perturb$[rsp]
  00161	48 c1 e8 05	 shr	 rax, 5
  00165	48 89 44 24 30	 mov	 QWORD PTR perturb$[rsp], rax
$LN9@lookdict_u@2:

; 596  :         i = (i << 2) + i + perturb + 1;

  0016a	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0016f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00174	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00178	48 8b 4c 24 30	 mov	 rcx, QWORD PTR perturb$[rsp]
  0017d	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  00182	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 597  :         ep = &ep0[i & mask];

  00187	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  0018c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00191	48 23 c8	 and	 rcx, rax
  00194	48 8b c1	 mov	 rax, rcx
  00197	48 6b c0 18	 imul	 rax, 24
  0019b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep0$[rsp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	48 89 44 24 38	 mov	 QWORD PTR ep$[rsp], rax

; 598  :         if (ep->me_key == NULL) {

  001ab	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  001b0	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  001b5	75 40		 jne	 SHORT $LN6@lookdict_u@2

; 599  :             if (freeslot == NULL) {

  001b7	48 83 7c 24 48
	00		 cmp	 QWORD PTR freeslot$[rsp], 0
  001bd	75 1d		 jne	 SHORT $LN5@lookdict_u@2

; 600  :                 *value_addr = &ep->me_value;

  001bf	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  001c4	48 83 c0 10	 add	 rax, 16
  001c8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  001cd	48 89 01	 mov	 QWORD PTR [rcx], rax

; 601  :                 return ep;

  001d0	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  001d5	e9 ca 00 00 00	 jmp	 $LN16@lookdict_u@2

; 602  :             } else {

  001da	eb 1b		 jmp	 SHORT $LN4@lookdict_u@2
$LN5@lookdict_u@2:

; 603  :                 *value_addr = &freeslot->me_value;

  001dc	48 8b 44 24 48	 mov	 rax, QWORD PTR freeslot$[rsp]
  001e1	48 83 c0 10	 add	 rax, 16
  001e5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  001ea	48 89 01	 mov	 QWORD PTR [rcx], rax

; 604  :                 return freeslot;

  001ed	48 8b 44 24 48	 mov	 rax, QWORD PTR freeslot$[rsp]
  001f2	e9 ad 00 00 00	 jmp	 $LN16@lookdict_u@2
$LN4@lookdict_u@2:
$LN6@lookdict_u@2:

; 605  :             }
; 606  :         }
; 607  :         if (ep->me_key == key
; 608  :             || (ep->me_hash == hash
; 609  :             && ep->me_key != dummy
; 610  :             && unicode_eq(ep->me_key, key))) {

  001f7	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  001fc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  00201	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00205	74 38		 je	 SHORT $LN2@lookdict_u@2
  00207	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  0020c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hash$[rsp]
  00211	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00214	75 41		 jne	 SHORT $LN3@lookdict_u@2
  00216	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  0021d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ep$[rsp]
  00222	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  00226	74 2f		 je	 SHORT $LN3@lookdict_u@2
  00228	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  0022d	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00232	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00236	e8 00 00 00 00	 call	 unicode_eq
  0023b	85 c0		 test	 eax, eax
  0023d	74 18		 je	 SHORT $LN3@lookdict_u@2
$LN2@lookdict_u@2:

; 611  :             *value_addr = &ep->me_value;

  0023f	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00244	48 83 c0 10	 add	 rax, 16
  00248	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value_addr$[rsp]
  0024d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 612  :             return ep;

  00250	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00255	eb 4d		 jmp	 SHORT $LN16@lookdict_u@2
$LN3@lookdict_u@2:

; 613  :         }
; 614  :         if (ep->me_key == dummy && freeslot == NULL)

  00257	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dummy_struct
  0025e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ep$[rsp]
  00263	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  00267	75 12		 jne	 SHORT $LN1@lookdict_u@2
  00269	48 83 7c 24 48
	00		 cmp	 QWORD PTR freeslot$[rsp], 0
  0026f	75 0a		 jne	 SHORT $LN1@lookdict_u@2

; 615  :             freeslot = ep;

  00271	48 8b 44 24 38	 mov	 rax, QWORD PTR ep$[rsp]
  00276	48 89 44 24 48	 mov	 QWORD PTR freeslot$[rsp], rax
$LN1@lookdict_u@2:

; 616  :     }

  0027b	e9 dc fe ff ff	 jmp	 $LN8@lookdict_u@2

; 617  :     assert(0);          /* NOT REACHED */

  00280	33 c0		 xor	 eax, eax
  00282	85 c0		 test	 eax, eax
  00284	75 1c		 jne	 SHORT $LN18@lookdict_u@2
  00286	41 b8 69 02 00
	00		 mov	 r8d, 617		; 00000269H
  0028c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00293	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0029a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002a0	33 c0		 xor	 eax, eax
$LN18@lookdict_u@2:

; 618  :     return 0;

  002a2	33 c0		 xor	 eax, eax
$LN16@lookdict_u@2:

; 619  : }

  002a4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002a8	c3		 ret	 0
lookdict_unicode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BOACJEDH@PyDict_Clear?$AA@		; `string'
PUBLIC	??_C@_0DG@NJAOCDNF@parallel?5thread?5attempted?5to?5cle@ ; `string'
PUBLIC	PyDict_Clear
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Clear DD imagerel $LN26
	DD	imagerel $LN26+650
	DD	imagerel $unwind$PyDict_Clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Clear DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_0N@BOACJEDH@PyDict_Clear?$AA@
CONST	SEGMENT
??_C@_0N@BOACJEDH@PyDict_Clear?$AA@ DB 'PyDict_Clear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NJAOCDNF@parallel?5thread?5attempted?5to?5cle@
CONST	SEGMENT
??_C@_0DG@NJAOCDNF@parallel?5thread?5attempted?5to?5cle@ DB 'parallel thr'
	DB	'ead attempted to clear a main thread dict', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyDict_Clear
_TEXT	SEGMENT
n$ = 48
i$ = 56
mp$ = 64
oldkeys$ = 72
oldvalues$ = 80
_py_tmp$21295 = 88
tv142 = 96
op$ = 128
PyDict_Clear PROC					; COMDAT

; 1296 : {

$LN26:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1297 :     PyDictObject *mp;
; 1298 :     PyDictKeysObject *oldkeys;
; 1299 :     PyObject **oldvalues;
; 1300 :     Py_ssize_t i, n;
; 1301 : 
; 1302 : #ifdef WITH_PARALLEL
; 1303 :     if (Py_PXCTX && Px_ISPY(op))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 21		 je	 SHORT $LN14@PyDict_Cle@2
  00012	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR op$[rsp]
  0001a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001e	48 83 e0 01	 and	 rax, 1
  00022	48 85 c0	 test	 rax, rax
  00025	74 0c		 je	 SHORT $LN14@PyDict_Cle@2

; 1304 :         Py_FatalError("parallel thread attempted to clear a main thread dict");

  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DG@NJAOCDNF@parallel?5thread?5attempted?5to?5cle@
  0002e	e8 00 00 00 00	 call	 Py_FatalError
$LN14@PyDict_Cle@2:

; 1305 : #endif
; 1306 : 
; 1307 :     if (!PyDict_Check(op))

  00033	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR op$[rsp]
  0003b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00045	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0004a	85 c0		 test	 eax, eax
  0004c	75 05		 jne	 SHORT $LN13@PyDict_Cle@2

; 1308 :         return;

  0004e	e9 32 02 00 00	 jmp	 $LN15@PyDict_Cle@2
$LN13@PyDict_Cle@2:

; 1309 : 
; 1310 :     mp = ((PyDictObject *)op);

  00053	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR op$[rsp]
  0005b	48 89 44 24 40	 mov	 QWORD PTR mp$[rsp], rax

; 1311 :     oldkeys = mp->ma_keys;

  00060	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00065	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00069	48 89 44 24 48	 mov	 QWORD PTR oldkeys$[rsp], rax

; 1312 :     oldvalues = mp->ma_values;

  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00073	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00077	48 89 44 24 50	 mov	 QWORD PTR oldvalues$[rsp], rax

; 1313 :     if (oldvalues == empty_values)

  0007c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:empty_values
  00083	48 39 44 24 50	 cmp	 QWORD PTR oldvalues$[rsp], rax
  00088	75 05		 jne	 SHORT $LN12@PyDict_Cle@2

; 1314 :         return;

  0008a	e9 f6 01 00 00	 jmp	 $LN15@PyDict_Cle@2
$LN12@PyDict_Cle@2:

; 1315 :     /* Empty the dict... */
; 1316 :     DK_INCREF(Py_EMPTY_KEYS);

  0008f	e8 00 00 00 00	 call	 _Py_PXCTX
  00094	85 c0		 test	 eax, eax
  00096	74 02		 je	 SHORT $LN17@PyDict_Cle@2
  00098	eb 11		 jmp	 SHORT $LN18@PyDict_Cle@2
$LN17@PyDict_Cle@2:
  0009a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  000a1	48 ff c0	 inc	 rax
  000a4	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN18@PyDict_Cle@2:
  000ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR empty_keys_struct
  000b2	48 ff c0	 inc	 rax
  000b5	48 89 05 00 00
	00 00		 mov	 QWORD PTR empty_keys_struct, rax

; 1317 :     mp->ma_keys = Py_EMPTY_KEYS;

  000bc	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:empty_keys_struct
  000c8	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 1318 :     mp->ma_values = empty_values;

  000cc	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:empty_values
  000d8	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1319 :     mp->ma_used = 0;

  000dc	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  000e1	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 1320 :     /* ...then clear the keys and values */
; 1321 :     if (oldvalues != NULL) {

  000e9	48 83 7c 24 50
	00		 cmp	 QWORD PTR oldvalues$[rsp], 0
  000ef	0f 84 25 01 00
	00		 je	 $LN11@PyDict_Cle@2

; 1322 :         n = DK_SIZE(oldkeys);

  000f5	48 8b 44 24 48	 mov	 rax, QWORD PTR oldkeys$[rsp]
  000fa	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000fe	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 1323 :         for (i = 0; i < n; i++)

  00103	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0010c	eb 0d		 jmp	 SHORT $LN10@PyDict_Cle@2
$LN9@PyDict_Cle@2:
  0010e	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00113	48 ff c0	 inc	 rax
  00116	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN10@PyDict_Cle@2:
  0011b	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00120	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  00125	7d 7e		 jge	 SHORT $LN8@PyDict_Cle@2
$LN7@PyDict_Cle@2:

; 1324 :             Py_CLEAR(oldvalues[i]);

  00127	48 8b 44 24 50	 mov	 rax, QWORD PTR oldvalues$[rsp]
  0012c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00131	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  00136	74 62		 je	 SHORT $LN4@PyDict_Cle@2
  00138	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00140	48 8b 44 24 50	 mov	 rax, QWORD PTR oldvalues$[rsp]
  00145	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  0014a	4c 8b 0c c8	 mov	 r9, QWORD PTR [rax+rcx*8]
  0014e	41 b8 2c 05 00
	00		 mov	 r8d, 1324		; 0000052cH
  00154	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0015b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BOACJEDH@PyDict_Clear?$AA@
  00162	e8 00 00 00 00	 call	 _PyParallel_Guard
  00167	85 c0		 test	 eax, eax
  00169	75 2f		 jne	 SHORT $LN4@PyDict_Cle@2
  0016b	48 8b 44 24 50	 mov	 rax, QWORD PTR oldvalues$[rsp]
  00170	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00175	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00179	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$21295[rsp], rax
  0017e	48 8b 44 24 50	 mov	 rax, QWORD PTR oldvalues$[rsp]
  00183	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00188	48 c7 04 c8 00
	00 00 00	 mov	 QWORD PTR [rax+rcx*8], 0
  00190	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$21295[rsp]
  00195	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyDict_Cle@2:
  0019a	33 c0		 xor	 eax, eax
  0019c	85 c0		 test	 eax, eax
  0019e	75 87		 jne	 SHORT $LN7@PyDict_Cle@2
  001a0	e9 69 ff ff ff	 jmp	 $LN9@PyDict_Cle@2
$LN8@PyDict_Cle@2:

; 1325 :         free_values(oldvalues);

  001a5	e8 00 00 00 00	 call	 _Py_PXCTX
  001aa	85 c0		 test	 eax, eax
  001ac	74 14		 je	 SHORT $LN19@PyDict_Cle@2
  001ae	48 8b 4c 24 50	 mov	 rcx, QWORD PTR oldvalues$[rsp]
  001b3	e8 00 00 00 00	 call	 _PxMem_Free
  001b8	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
  001c0	eb 12		 jmp	 SHORT $LN20@PyDict_Cle@2
$LN19@PyDict_Cle@2:
  001c2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR oldvalues$[rsp]
  001c7	e8 00 00 00 00	 call	 _PyMem_DebugFree
  001cc	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN20@PyDict_Cle@2:

; 1326 :         DK_DECREF(oldkeys);

  001d4	e8 00 00 00 00	 call	 _Py_PXCTX
  001d9	85 c0		 test	 eax, eax
  001db	74 02		 je	 SHORT $LN21@PyDict_Cle@2
  001dd	eb 11		 jmp	 SHORT $LN22@PyDict_Cle@2
$LN21@PyDict_Cle@2:
  001df	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  001e6	48 ff c8	 dec	 rax
  001e9	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN22@PyDict_Cle@2:
  001f0	48 8b 44 24 48	 mov	 rax, QWORD PTR oldkeys$[rsp]
  001f5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001f8	48 ff c8	 dec	 rax
  001fb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  00200	48 89 01	 mov	 QWORD PTR [rcx], rax
  00203	48 8b 44 24 48	 mov	 rax, QWORD PTR oldkeys$[rsp]
  00208	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0020c	75 0a		 jne	 SHORT $LN3@PyDict_Cle@2
  0020e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  00213	e8 00 00 00 00	 call	 free_keys_object
$LN3@PyDict_Cle@2:

; 1327 :     }
; 1328 :     else {

  00218	eb 6b		 jmp	 SHORT $LN2@PyDict_Cle@2
$LN11@PyDict_Cle@2:

; 1329 :        assert(oldkeys->dk_refcnt == 1);

  0021a	48 8b 44 24 48	 mov	 rax, QWORD PTR oldkeys$[rsp]
  0021f	48 83 38 01	 cmp	 QWORD PTR [rax], 1
  00223	74 1c		 je	 SHORT $LN23@PyDict_Cle@2
  00225	41 b8 31 05 00
	00		 mov	 r8d, 1329		; 00000531H
  0022b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@GBAIJCII@?$AAo?$AAl?$AAd?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  00239	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0023f	33 c0		 xor	 eax, eax
$LN23@PyDict_Cle@2:

; 1330 :        DK_DECREF(oldkeys);

  00241	e8 00 00 00 00	 call	 _Py_PXCTX
  00246	85 c0		 test	 eax, eax
  00248	74 02		 je	 SHORT $LN24@PyDict_Cle@2
  0024a	eb 11		 jmp	 SHORT $LN25@PyDict_Cle@2
$LN24@PyDict_Cle@2:
  0024c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00253	48 ff c8	 dec	 rax
  00256	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN25@PyDict_Cle@2:
  0025d	48 8b 44 24 48	 mov	 rax, QWORD PTR oldkeys$[rsp]
  00262	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00265	48 ff c8	 dec	 rax
  00268	48 8b 4c 24 48	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  0026d	48 89 01	 mov	 QWORD PTR [rcx], rax
  00270	48 8b 44 24 48	 mov	 rax, QWORD PTR oldkeys$[rsp]
  00275	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00279	75 0a		 jne	 SHORT $LN1@PyDict_Cle@2
  0027b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR oldkeys$[rsp]
  00280	e8 00 00 00 00	 call	 free_keys_object
$LN1@PyDict_Cle@2:
$LN2@PyDict_Cle@2:
$LN15@PyDict_Cle@2:

; 1331 :     }
; 1332 : }

  00285	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00289	c3		 ret	 0
PyDict_Clear ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Next DD imagerel $LN5
	DD	imagerel $LN5+139
	DD	imagerel $unwind$PyDict_Next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Next DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_Next
_TEXT	SEGMENT
i$ = 32
mp$ = 40
op$ = 64
ppos$ = 72
pkey$ = 80
pvalue$ = 88
PyDict_Next PROC					; COMDAT

; 1387 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1388 :     PyDictObject *mp;
; 1389 :     Py_ssize_t i = dict_next(op, *ppos, pvalue);

  00018	4c 8b 44 24 58	 mov	 r8, QWORD PTR pvalue$[rsp]
  0001d	48 8b 44 24 48	 mov	 rax, QWORD PTR ppos$[rsp]
  00022	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00025	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0002a	e8 00 00 00 00	 call	 dict_next
  0002f	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 1390 :     if (i < 0)

  00034	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  0003a	7d 04		 jge	 SHORT $LN2@PyDict_Nex

; 1391 :         return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 46		 jmp	 SHORT $LN3@PyDict_Nex
$LN2@PyDict_Nex:

; 1392 :     mp = (PyDictObject *)op;

  00040	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00045	48 89 44 24 28	 mov	 QWORD PTR mp$[rsp], rax

; 1393 :     *ppos = i+1;

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0004f	48 ff c0	 inc	 rax
  00052	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ppos$[rsp]
  00057	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1394 :     if (pkey)

  0005a	48 83 7c 24 50
	00		 cmp	 QWORD PTR pkey$[rsp], 0
  00060	74 1f		 je	 SHORT $LN1@PyDict_Nex

; 1395 :         *pkey = mp->ma_keys->dk_entries[i].me_key;

  00062	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  00067	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0006b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00070	48 6b c9 18	 imul	 rcx, 24
  00074	48 8b 54 24 50	 mov	 rdx, QWORD PTR pkey$[rsp]
  00079	48 8b 44 08 28	 mov	 rax, QWORD PTR [rax+rcx+40]
  0007e	48 89 02	 mov	 QWORD PTR [rdx], rax
$LN1@PyDict_Nex:

; 1396 :     return 1;

  00081	b8 01 00 00 00	 mov	 eax, 1
$LN3@PyDict_Nex:

; 1397 : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
PyDict_Next ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_next DD imagerel dict_next
	DD	imagerel dict_next+298
	DD	imagerel $unwind$dict_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_next DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_next
_TEXT	SEGMENT
mp$ = 0
mask$ = 8
offset$ = 16
value_ptr$ = 24
op$ = 48
i$ = 56
pvalue$ = 64
dict_next PROC						; COMDAT

; 1339 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1340 :     Py_ssize_t mask, offset;
; 1341 :     PyDictObject *mp;
; 1342 :     PyObject **value_ptr;
; 1343 : 
; 1344 : 
; 1345 :     if (!PyDict_Check(op))

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00022	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00027	85 c0		 test	 eax, eax
  00029	75 0c		 jne	 SHORT $LN8@dict_next

; 1346 :         return -1;

  0002b	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00032	e9 ee 00 00 00	 jmp	 $LN9@dict_next
$LN8@dict_next:

; 1347 :     mp = (PyDictObject *)op;

  00037	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0003c	48 89 04 24	 mov	 QWORD PTR mp$[rsp], rax

; 1348 :     if (i < 0)

  00040	48 83 7c 24 38
	00		 cmp	 QWORD PTR i$[rsp], 0
  00046	7d 0c		 jge	 SHORT $LN7@dict_next

; 1349 :         return -1;

  00048	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0004f	e9 d1 00 00 00	 jmp	 $LN9@dict_next
$LN7@dict_next:

; 1350 :     if (mp->ma_values) {

  00054	48 8b 04 24	 mov	 rax, QWORD PTR mp$[rsp]
  00058	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0005d	74 21		 je	 SHORT $LN6@dict_next

; 1351 :         value_ptr = &mp->ma_values[i];

  0005f	48 8b 04 24	 mov	 rax, QWORD PTR mp$[rsp]
  00063	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00067	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  0006c	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00070	48 89 44 24 18	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1352 :         offset = sizeof(PyObject *);

  00075	48 c7 44 24 10
	08 00 00 00	 mov	 QWORD PTR offset$[rsp], 8

; 1353 :     }
; 1354 :     else {

  0007e	eb 24		 jmp	 SHORT $LN5@dict_next
$LN6@dict_next:

; 1355 :         value_ptr = &mp->ma_keys->dk_entries[i].me_value;

  00080	48 8b 04 24	 mov	 rax, QWORD PTR mp$[rsp]
  00084	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00088	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  0008d	48 6b c9 18	 imul	 rcx, 24
  00091	48 8d 44 08 30	 lea	 rax, QWORD PTR [rax+rcx+48]
  00096	48 89 44 24 18	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1356 :         offset = sizeof(PyDictKeyEntry);

  0009b	48 c7 44 24 10
	18 00 00 00	 mov	 QWORD PTR offset$[rsp], 24
$LN5@dict_next:

; 1357 :     }
; 1358 :     mask = DK_MASK(mp->ma_keys);

  000a4	48 8b 04 24	 mov	 rax, QWORD PTR mp$[rsp]
  000a8	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ac	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000b0	48 ff c8	 dec	 rax
  000b3	48 89 44 24 08	 mov	 QWORD PTR mask$[rsp], rax
$LN4@dict_next:

; 1359 :     while (i <= mask && *value_ptr == NULL) {

  000b8	48 8b 44 24 08	 mov	 rax, QWORD PTR mask$[rsp]
  000bd	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  000c2	7f 2f		 jg	 SHORT $LN3@dict_next
  000c4	48 8b 44 24 18	 mov	 rax, QWORD PTR value_ptr$[rsp]
  000c9	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000cd	75 24		 jne	 SHORT $LN3@dict_next

; 1360 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);

  000cf	48 8b 44 24 10	 mov	 rax, QWORD PTR offset$[rsp]
  000d4	48 8b 4c 24 18	 mov	 rcx, QWORD PTR value_ptr$[rsp]
  000d9	48 03 c8	 add	 rcx, rax
  000dc	48 8b c1	 mov	 rax, rcx
  000df	48 89 44 24 18	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1361 :         i++;

  000e4	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  000e9	48 ff c0	 inc	 rax
  000ec	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax

; 1362 :     }

  000f1	eb c5		 jmp	 SHORT $LN4@dict_next
$LN3@dict_next:

; 1363 :     if (i > mask)

  000f3	48 8b 44 24 08	 mov	 rax, QWORD PTR mask$[rsp]
  000f8	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  000fd	7e 09		 jle	 SHORT $LN2@dict_next

; 1364 :         return -1;

  000ff	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00106	eb 1d		 jmp	 SHORT $LN9@dict_next
$LN2@dict_next:

; 1365 :     if (pvalue)

  00108	48 83 7c 24 40
	00		 cmp	 QWORD PTR pvalue$[rsp], 0
  0010e	74 10		 je	 SHORT $LN1@dict_next

; 1366 :         *pvalue = *value_ptr;

  00110	48 8b 44 24 40	 mov	 rax, QWORD PTR pvalue$[rsp]
  00115	48 8b 4c 24 18	 mov	 rcx, QWORD PTR value_ptr$[rsp]
  0011a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0011d	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN1@dict_next:

; 1367 :     return i;

  00120	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
$LN9@dict_next:

; 1368 : }

  00125	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00129	c3		 ret	 0
dict_next ENDP
_TEXT	ENDS
PUBLIC	_PyDict_Next
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_Next DD imagerel $LN5
	DD	imagerel $LN5+170
	DD	imagerel $unwind$_PyDict_Next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_Next DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyDict_Next
_TEXT	SEGMENT
i$ = 32
mp$ = 40
op$ = 64
ppos$ = 72
pkey$ = 80
pvalue$ = 88
phash$ = 96
_PyDict_Next PROC					; COMDAT

; 1405 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1406 :     PyDictObject *mp;
; 1407 :     Py_ssize_t i = dict_next(op, *ppos, pvalue);

  00018	4c 8b 44 24 58	 mov	 r8, QWORD PTR pvalue$[rsp]
  0001d	48 8b 44 24 48	 mov	 rax, QWORD PTR ppos$[rsp]
  00022	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00025	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0002a	e8 00 00 00 00	 call	 dict_next
  0002f	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 1408 :     if (i < 0)

  00034	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  0003a	7d 04		 jge	 SHORT $LN2@PyDict_Nex@2

; 1409 :         return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 65		 jmp	 SHORT $LN3@PyDict_Nex@2
$LN2@PyDict_Nex@2:

; 1410 :     mp = (PyDictObject *)op;

  00040	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00045	48 89 44 24 28	 mov	 QWORD PTR mp$[rsp], rax

; 1411 :     *ppos = i+1;

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0004f	48 ff c0	 inc	 rax
  00052	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ppos$[rsp]
  00057	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1412 :     *phash = mp->ma_keys->dk_entries[i].me_hash;

  0005a	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  0005f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00063	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00068	48 6b c9 18	 imul	 rcx, 24
  0006c	48 8b 54 24 60	 mov	 rdx, QWORD PTR phash$[rsp]
  00071	48 8b 44 08 20	 mov	 rax, QWORD PTR [rax+rcx+32]
  00076	48 89 02	 mov	 QWORD PTR [rdx], rax

; 1413 :     if (pkey)

  00079	48 83 7c 24 50
	00		 cmp	 QWORD PTR pkey$[rsp], 0
  0007f	74 1f		 je	 SHORT $LN1@PyDict_Nex@2

; 1414 :         *pkey = mp->ma_keys->dk_entries[i].me_key;

  00081	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  00086	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0008a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0008f	48 6b c9 18	 imul	 rcx, 24
  00093	48 8b 54 24 50	 mov	 rdx, QWORD PTR pkey$[rsp]
  00098	48 8b 44 08 28	 mov	 rax, QWORD PTR [rax+rcx+40]
  0009d	48 89 02	 mov	 QWORD PTR [rdx], rax
$LN1@PyDict_Nex@2:

; 1415 :     return 1;

  000a0	b8 01 00 00 00	 mov	 eax, 1
$LN3@PyDict_Nex@2:

; 1416 : }

  000a5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a9	c3		 ret	 0
_PyDict_Next ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CK@JMPJNLLC@?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@HOKLHDCC@dict_dealloc?$AA@		; `string'
EXTRN	_PyTrash_thread_deposit_object:PROC
EXTRN	_PyTrash_thread_destroy_chain:PROC
EXTRN	PyThreadState_Get:PROC
EXTRN	PyObject_GC_UnTrack:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_dealloc DD imagerel dict_dealloc
	DD	imagerel dict_dealloc+659
	DD	imagerel $unwind$dict_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_dealloc DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_1CK@JMPJNLLC@?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@JMPJNLLC@?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ DB 'k'
	DB	00H, 'e', 00H, 'y', 00H, 's', 00H, '-', 00H, '>', 00H, 'd', 00H
	DB	'k', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HOKLHDCC@dict_dealloc?$AA@
CONST	SEGMENT
??_C@_0N@HOKLHDCC@dict_dealloc?$AA@ DB 'dict_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dict_dealloc
_TEXT	SEGMENT
n$ = 32
i$ = 40
values$ = 48
keys$ = 56
_tstate$21376 = 64
tv128 = 72
mp$ = 96
dict_dealloc PROC					; COMDAT

; 1422 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1423 :     PyObject **values = mp->ma_values;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  0000e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00012	48 89 44 24 30	 mov	 QWORD PTR values$[rsp], rax

; 1424 :     PyDictKeysObject *keys = mp->ma_keys;

  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  0001c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00020	48 89 44 24 38	 mov	 QWORD PTR keys$[rsp], rax

; 1425 :     Py_ssize_t i, n;
; 1426 :     Py_GUARD

  00025	e8 00 00 00 00	 call	 _Py_PXCTX
  0002a	85 c0		 test	 eax, eax
  0002c	74 1c		 je	 SHORT $LN21@dict_deall
  0002e	45 33 c9	 xor	 r9d, r9d
  00031	41 b8 92 05 00
	00		 mov	 r8d, 1426		; 00000592H
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HOKLHDCC@dict_dealloc?$AA@
  00045	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@dict_deall:

; 1427 :     PyObject_GC_UnTrack(mp);

  0004a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  0004f	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN20@dict_deall:

; 1428 :     Py_TRASHCAN_SAFE_BEGIN(mp)

  00054	e8 00 00 00 00	 call	 PyThreadState_Get
  00059	48 89 44 24 40	 mov	 QWORD PTR _tstate$21376[rsp], rax
  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR _tstate$21376[rsp]
  00063	83 b8 94 00 00
	00 32		 cmp	 DWORD PTR [rax+148], 50	; 00000032H
  0006a	0f 8d 0a 02 00
	00		 jge	 $LN17@dict_deall
  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR _tstate$21376[rsp]
  00075	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0007b	ff c0		 inc	 eax
  0007d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _tstate$21376[rsp]
  00082	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 1429 :     if (values != NULL) {

  00088	48 83 7c 24 30
	00		 cmp	 QWORD PTR values$[rsp], 0
  0008e	0f 84 e9 00 00
	00		 je	 $LN16@dict_deall

; 1430 :         if (values != empty_values) {

  00094	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:empty_values
  0009b	48 39 44 24 30	 cmp	 QWORD PTR values$[rsp], rax
  000a0	0f 84 91 00 00
	00		 je	 $LN15@dict_deall

; 1431 :             for (i = 0, n = DK_SIZE(mp->ma_keys); i < n; i++) {

  000a6	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000af	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  000b4	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000bc	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax
  000c1	eb 0d		 jmp	 SHORT $LN14@dict_deall
$LN13@dict_deall:
  000c3	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000c8	48 ff c0	 inc	 rax
  000cb	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN14@dict_deall:
  000d0	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  000d5	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000da	7d 2c		 jge	 SHORT $LN12@dict_deall
$LN11@dict_deall:

; 1432 :                 Py_XDECREF(values[i]);

  000dc	48 8b 44 24 30	 mov	 rax, QWORD PTR values$[rsp]
  000e1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000e6	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  000eb	74 13		 je	 SHORT $LN8@dict_deall
  000ed	48 8b 44 24 30	 mov	 rax, QWORD PTR values$[rsp]
  000f2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000f7	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  000fb	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@dict_deall:
  00100	33 c0		 xor	 eax, eax
  00102	85 c0		 test	 eax, eax
  00104	75 d6		 jne	 SHORT $LN11@dict_deall

; 1433 :             }

  00106	eb bb		 jmp	 SHORT $LN13@dict_deall
$LN12@dict_deall:

; 1434 :             free_values(values);

  00108	e8 00 00 00 00	 call	 _Py_PXCTX
  0010d	85 c0		 test	 eax, eax
  0010f	74 14		 je	 SHORT $LN24@dict_deall
  00111	48 8b 4c 24 30	 mov	 rcx, QWORD PTR values$[rsp]
  00116	e8 00 00 00 00	 call	 _PxMem_Free
  0011b	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
  00123	eb 12		 jmp	 SHORT $LN25@dict_deall
$LN24@dict_deall:
  00125	48 8b 4c 24 30	 mov	 rcx, QWORD PTR values$[rsp]
  0012a	e8 00 00 00 00	 call	 _PyMem_DebugFree
  0012f	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN25@dict_deall:
$LN15@dict_deall:

; 1435 :         }
; 1436 :         DK_DECREF(keys);

  00137	e8 00 00 00 00	 call	 _Py_PXCTX
  0013c	85 c0		 test	 eax, eax
  0013e	74 02		 je	 SHORT $LN26@dict_deall
  00140	eb 11		 jmp	 SHORT $LN27@dict_deall
$LN26@dict_deall:
  00142	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00149	48 ff c8	 dec	 rax
  0014c	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN27@dict_deall:
  00153	48 8b 44 24 38	 mov	 rax, QWORD PTR keys$[rsp]
  00158	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0015b	48 ff c8	 dec	 rax
  0015e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR keys$[rsp]
  00163	48 89 01	 mov	 QWORD PTR [rcx], rax
  00166	48 8b 44 24 38	 mov	 rax, QWORD PTR keys$[rsp]
  0016b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0016f	75 0a		 jne	 SHORT $LN7@dict_deall
  00171	48 8b 4c 24 38	 mov	 rcx, QWORD PTR keys$[rsp]
  00176	e8 00 00 00 00	 call	 free_keys_object
$LN7@dict_deall:

; 1437 :     }
; 1438 :     else {

  0017b	eb 6b		 jmp	 SHORT $LN6@dict_deall
$LN16@dict_deall:

; 1439 :         assert(keys->dk_refcnt == 1);

  0017d	48 8b 44 24 38	 mov	 rax, QWORD PTR keys$[rsp]
  00182	48 83 38 01	 cmp	 QWORD PTR [rax], 1
  00186	74 1c		 je	 SHORT $LN28@dict_deall
  00188	41 b8 9f 05 00
	00		 mov	 r8d, 1439		; 0000059fH
  0018e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@JMPJNLLC@?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a2	33 c0		 xor	 eax, eax
$LN28@dict_deall:

; 1440 :         DK_DECREF(keys);

  001a4	e8 00 00 00 00	 call	 _Py_PXCTX
  001a9	85 c0		 test	 eax, eax
  001ab	74 02		 je	 SHORT $LN29@dict_deall
  001ad	eb 11		 jmp	 SHORT $LN30@dict_deall
$LN29@dict_deall:
  001af	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  001b6	48 ff c8	 dec	 rax
  001b9	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN30@dict_deall:
  001c0	48 8b 44 24 38	 mov	 rax, QWORD PTR keys$[rsp]
  001c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c8	48 ff c8	 dec	 rax
  001cb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR keys$[rsp]
  001d0	48 89 01	 mov	 QWORD PTR [rcx], rax
  001d3	48 8b 44 24 38	 mov	 rax, QWORD PTR keys$[rsp]
  001d8	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001dc	75 0a		 jne	 SHORT $LN5@dict_deall
  001de	48 8b 4c 24 38	 mov	 rcx, QWORD PTR keys$[rsp]
  001e3	e8 00 00 00 00	 call	 free_keys_object
$LN5@dict_deall:
$LN6@dict_deall:

; 1441 :     }
; 1442 :     if (numfree < PyDict_MAXFREELIST && Py_TYPE(mp) == &PyDict_Type)

  001e8	83 3d 00 00 00
	00 50		 cmp	 DWORD PTR numfree, 80	; 00000050H
  001ef	7d 39		 jge	 SHORT $LN4@dict_deall
  001f1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  001f8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  001fd	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00201	75 27		 jne	 SHORT $LN4@dict_deall

; 1443 :         free_list[numfree++] = mp;

  00203	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR numfree
  0020a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:free_list
  00211	48 8b 54 24 60	 mov	 rdx, QWORD PTR mp$[rsp]
  00216	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
  0021a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  00220	ff c0		 inc	 eax
  00222	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 1444 :     else

  00228	eb 14		 jmp	 SHORT $LN3@dict_deall
$LN4@dict_deall:

; 1445 :         Py_TYPE(mp)->tp_free((PyObject *)mp);

  0022a	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  0022f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00233	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  00238	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]
$LN3@dict_deall:

; 1446 :     Py_TRASHCAN_SAFE_END(mp)

  0023e	48 8b 44 24 40	 mov	 rax, QWORD PTR _tstate$21376[rsp]
  00243	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00249	ff c8		 dec	 eax
  0024b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _tstate$21376[rsp]
  00250	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
  00256	48 8b 44 24 40	 mov	 rax, QWORD PTR _tstate$21376[rsp]
  0025b	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00263	74 13		 je	 SHORT $LN2@dict_deall
  00265	48 8b 44 24 40	 mov	 rax, QWORD PTR _tstate$21376[rsp]
  0026a	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [rax+148], 0
  00271	7f 05		 jg	 SHORT $LN2@dict_deall
  00273	e8 00 00 00 00	 call	 _PyTrash_thread_destroy_chain
$LN2@dict_deall:
  00278	eb 0a		 jmp	 SHORT $LN1@dict_deall
$LN17@dict_deall:
  0027a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  0027f	e8 00 00 00 00	 call	 _PyTrash_thread_deposit_object
$LN1@dict_deall:
  00284	33 c0		 xor	 eax, eax
  00286	85 c0		 test	 eax, eax
  00288	0f 85 c6 fd ff
	ff		 jne	 $LN20@dict_deall

; 1447 : }

  0028e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00292	c3		 ret	 0
dict_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_01CELHOKLL@?$HN?$AA@			; `string'
PUBLIC	??_C@_01HCONENDN@?$HL?$AA@			; `string'
PUBLIC	??_C@_1DI@MBJLGDG@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAp?$AAi?$AAe?$AAc?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_02MCILKGOH@?$HL?$HN?$AA@			; `string'
PUBLIC	??_C@_05LJIGIGGH@?$HL?4?4?4?$HN?$AA@		; `string'
EXTRN	Py_ReprLeave:PROC
EXTRN	PyUnicode_Join:PROC
EXTRN	PyList_Append:PROC
EXTRN	PyUnicode_AppendAndDel:PROC
EXTRN	PyUnicode_Append:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	PyList_New:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	Py_ReprEnter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_repr DD imagerel dict_repr
	DD	imagerel dict_repr+770
	DD	imagerel $unwind$dict_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_repr DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CELHOKLL@?$HN?$AA@
CONST	SEGMENT
??_C@_01CELHOKLL@?$HN?$AA@ DB '}', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL?$AA@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL?$AA@ DB '{', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@MBJLGDG@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAp?$AAi?$AAe?$AAc?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@MBJLGDG@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAp?$AAi?$AAe?$AAc?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'G', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z'
	DB	00H, 'E', 00H, '(', 00H, 'p', 00H, 'i', 00H, 'e', 00H, 'c', 00H
	DB	'e', 00H, 's', 00H, ')', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MCILKGOH@?$HL?$HN?$AA@
CONST	SEGMENT
??_C@_02MCILKGOH@?$HL?$HN?$AA@ DB '{}', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LJIGIGGH@?$HL?4?4?4?$HN?$AA@
CONST	SEGMENT
??_C@_05LJIGIGGH@?$HL?4?4?4?$HN?$AA@ DB '{...}', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dict_repr
_TEXT	SEGMENT
value$ = 32
pieces$ = 40
i$ = 48
s$ = 56
key$ = 64
temp$ = 72
colon$ = 80
result$ = 88
status$21435 = 96
tv71 = 104
mp$ = 128
dict_repr PROC						; COMDAT

; 1452 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1453 :     Py_ssize_t i;
; 1454 :     PyObject *s, *temp, *colon = NULL;

  00009	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR colon$[rsp], 0

; 1455 :     PyObject *pieces = NULL, *result = NULL;

  00012	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR pieces$[rsp], 0
  0001b	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 1456 :     PyObject *key, *value;
; 1457 : 
; 1458 :     i = Py_ReprEnter((PyObject *)mp);

  00024	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  0002c	e8 00 00 00 00	 call	 Py_ReprEnter
  00031	48 98		 cdqe
  00033	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax

; 1459 :     if (i != 0) {

  00038	48 83 7c 24 30
	00		 cmp	 QWORD PTR i$[rsp], 0
  0003e	74 2e		 je	 SHORT $LN21@dict_repr

; 1460 :         return i > 0 ? PyUnicode_FromString("{...}") : NULL;

  00040	48 83 7c 24 30
	00		 cmp	 QWORD PTR i$[rsp], 0
  00046	7e 13		 jle	 SHORT $LN24@dict_repr
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LJIGIGGH@?$HL?4?4?4?$HN?$AA@
  0004f	e8 00 00 00 00	 call	 PyUnicode_FromString
  00054	48 89 44 24 68	 mov	 QWORD PTR tv71[rsp], rax
  00059	eb 09		 jmp	 SHORT $LN25@dict_repr
$LN24@dict_repr:
  0005b	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR tv71[rsp], 0
$LN25@dict_repr:
  00064	48 8b 44 24 68	 mov	 rax, QWORD PTR tv71[rsp]
  00069	e9 8f 02 00 00	 jmp	 $LN22@dict_repr
$LN21@dict_repr:

; 1461 :     }
; 1462 : 
; 1463 :     if (mp->ma_used == 0) {

  0006e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00076	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0007b	75 16		 jne	 SHORT $LN20@dict_repr

; 1464 :         result = PyUnicode_FromString("{}");

  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02MCILKGOH@?$HL?$HN?$AA@
  00084	e8 00 00 00 00	 call	 PyUnicode_FromString
  00089	48 89 44 24 58	 mov	 QWORD PTR result$[rsp], rax

; 1465 :         goto Done;

  0008e	e9 28 02 00 00	 jmp	 $Done$21425
$LN20@dict_repr:

; 1466 :     }
; 1467 : 
; 1468 :     pieces = PyList_New(0);

  00093	33 c9		 xor	 ecx, ecx
  00095	e8 00 00 00 00	 call	 PyList_New
  0009a	48 89 44 24 28	 mov	 QWORD PTR pieces$[rsp], rax

; 1469 :     if (pieces == NULL)

  0009f	48 83 7c 24 28
	00		 cmp	 QWORD PTR pieces$[rsp], 0
  000a5	75 05		 jne	 SHORT $LN19@dict_repr

; 1470 :         goto Done;

  000a7	e9 0f 02 00 00	 jmp	 $Done$21425
$LN19@dict_repr:

; 1471 : 
; 1472 :     colon = PyUnicode_FromString(": ");

  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02LMMGGCAJ@?3?5?$AA@
  000b3	e8 00 00 00 00	 call	 PyUnicode_FromString
  000b8	48 89 44 24 50	 mov	 QWORD PTR colon$[rsp], rax

; 1473 :     if (colon == NULL)

  000bd	48 83 7c 24 50
	00		 cmp	 QWORD PTR colon$[rsp], 0
  000c3	75 05		 jne	 SHORT $LN18@dict_repr

; 1474 :         goto Done;

  000c5	e9 f1 01 00 00	 jmp	 $Done$21425
$LN18@dict_repr:

; 1475 : 
; 1476 :     /* Do repr() on each key+value pair, and insert ": " between them.
; 1477 :        Note that repr may mutate the dict. */
; 1478 :     i = 0;

  000ca	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
$LN17@dict_repr:

; 1479 :     while (PyDict_Next((PyObject *)mp, &i, &key, &value)) {

  000d3	4c 8d 4c 24 20	 lea	 r9, QWORD PTR value$[rsp]
  000d8	4c 8d 44 24 40	 lea	 r8, QWORD PTR key$[rsp]
  000dd	48 8d 54 24 30	 lea	 rdx, QWORD PTR i$[rsp]
  000e2	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  000ea	e8 00 00 00 00	 call	 PyDict_Next
  000ef	85 c0		 test	 eax, eax
  000f1	0f 84 98 00 00
	00		 je	 $LN16@dict_repr

; 1480 :         int status;
; 1481 :         /* Prevent repr from deleting key or value during key format. */
; 1482 :         Py_INCREF(key);

  000f7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR key$[rsp]
  000fc	e8 00 00 00 00	 call	 _Py_IncRef

; 1483 :         Py_INCREF(value);

  00101	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00106	e8 00 00 00 00	 call	 _Py_IncRef

; 1484 :         s = PyObject_Repr(key);

  0010b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR key$[rsp]
  00110	e8 00 00 00 00	 call	 PyObject_Repr
  00115	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 1485 :         PyUnicode_Append(&s, colon);

  0011a	48 8b 54 24 50	 mov	 rdx, QWORD PTR colon$[rsp]
  0011f	48 8d 4c 24 38	 lea	 rcx, QWORD PTR s$[rsp]
  00124	e8 00 00 00 00	 call	 PyUnicode_Append

; 1486 :         PyUnicode_AppendAndDel(&s, PyObject_Repr(value));

  00129	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0012e	e8 00 00 00 00	 call	 PyObject_Repr
  00133	48 8b d0	 mov	 rdx, rax
  00136	48 8d 4c 24 38	 lea	 rcx, QWORD PTR s$[rsp]
  0013b	e8 00 00 00 00	 call	 PyUnicode_AppendAndDel

; 1487 :         Py_DECREF(key);

  00140	48 8b 4c 24 40	 mov	 rcx, QWORD PTR key$[rsp]
  00145	e8 00 00 00 00	 call	 _Py_DecRef

; 1488 :         Py_DECREF(value);

  0014a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0014f	e8 00 00 00 00	 call	 _Py_DecRef

; 1489 :         if (s == NULL)

  00154	48 83 7c 24 38
	00		 cmp	 QWORD PTR s$[rsp], 0
  0015a	75 05		 jne	 SHORT $LN15@dict_repr

; 1490 :             goto Done;

  0015c	e9 5a 01 00 00	 jmp	 $Done$21425
$LN15@dict_repr:

; 1491 :         status = PyList_Append(pieces, s);

  00161	48 8b 54 24 38	 mov	 rdx, QWORD PTR s$[rsp]
  00166	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pieces$[rsp]
  0016b	e8 00 00 00 00	 call	 PyList_Append
  00170	89 44 24 60	 mov	 DWORD PTR status$21435[rsp], eax

; 1492 :         Py_DECREF(s);  /* append created a new ref */

  00174	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00179	e8 00 00 00 00	 call	 _Py_DecRef

; 1493 :         if (status < 0)

  0017e	83 7c 24 60 00	 cmp	 DWORD PTR status$21435[rsp], 0
  00183	7d 05		 jge	 SHORT $LN14@dict_repr

; 1494 :             goto Done;

  00185	e9 31 01 00 00	 jmp	 $Done$21425
$LN14@dict_repr:

; 1495 :     }

  0018a	e9 44 ff ff ff	 jmp	 $LN17@dict_repr
$LN16@dict_repr:

; 1496 : 
; 1497 :     /* Add "{}" decorations to the first and last items. */
; 1498 :     assert(PyList_GET_SIZE(pieces) > 0);

  0018f	48 8b 44 24 28	 mov	 rax, QWORD PTR pieces$[rsp]
  00194	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00199	7f 1c		 jg	 SHORT $LN26@dict_repr
  0019b	41 b8 da 05 00
	00		 mov	 r8d, 1498		; 000005daH
  001a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MBJLGDG@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAp?$AAi?$AAe?$AAc?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b5	33 c0		 xor	 eax, eax
$LN26@dict_repr:

; 1499 :     s = PyUnicode_FromString("{");

  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01HCONENDN@?$HL?$AA@
  001be	e8 00 00 00 00	 call	 PyUnicode_FromString
  001c3	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 1500 :     if (s == NULL)

  001c8	48 83 7c 24 38
	00		 cmp	 QWORD PTR s$[rsp], 0
  001ce	75 05		 jne	 SHORT $LN13@dict_repr

; 1501 :         goto Done;

  001d0	e9 e6 00 00 00	 jmp	 $Done$21425
$LN13@dict_repr:

; 1502 :     temp = PyList_GET_ITEM(pieces, 0);

  001d5	48 8b 44 24 28	 mov	 rax, QWORD PTR pieces$[rsp]
  001da	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001de	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e1	48 89 44 24 48	 mov	 QWORD PTR temp$[rsp], rax

; 1503 :     PyUnicode_AppendAndDel(&s, temp);

  001e6	48 8b 54 24 48	 mov	 rdx, QWORD PTR temp$[rsp]
  001eb	48 8d 4c 24 38	 lea	 rcx, QWORD PTR s$[rsp]
  001f0	e8 00 00 00 00	 call	 PyUnicode_AppendAndDel

; 1504 :     PyList_SET_ITEM(pieces, 0, s);

  001f5	48 8b 44 24 28	 mov	 rax, QWORD PTR pieces$[rsp]
  001fa	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001fe	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00203	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1505 :     if (s == NULL)

  00206	48 83 7c 24 38
	00		 cmp	 QWORD PTR s$[rsp], 0
  0020c	75 05		 jne	 SHORT $LN12@dict_repr

; 1506 :         goto Done;

  0020e	e9 a8 00 00 00	 jmp	 $Done$21425
$LN12@dict_repr:

; 1507 : 
; 1508 :     s = PyUnicode_FromString("}");

  00213	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01CELHOKLL@?$HN?$AA@
  0021a	e8 00 00 00 00	 call	 PyUnicode_FromString
  0021f	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 1509 :     if (s == NULL)

  00224	48 83 7c 24 38
	00		 cmp	 QWORD PTR s$[rsp], 0
  0022a	75 05		 jne	 SHORT $LN11@dict_repr

; 1510 :         goto Done;

  0022c	e9 8a 00 00 00	 jmp	 $Done$21425
$LN11@dict_repr:

; 1511 :     temp = PyList_GET_ITEM(pieces, PyList_GET_SIZE(pieces) - 1);

  00231	48 8b 44 24 28	 mov	 rax, QWORD PTR pieces$[rsp]
  00236	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0023a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pieces$[rsp]
  0023f	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00243	48 8b 44 c1 f8	 mov	 rax, QWORD PTR [rcx+rax*8-8]
  00248	48 89 44 24 48	 mov	 QWORD PTR temp$[rsp], rax

; 1512 :     PyUnicode_AppendAndDel(&temp, s);

  0024d	48 8b 54 24 38	 mov	 rdx, QWORD PTR s$[rsp]
  00252	48 8d 4c 24 48	 lea	 rcx, QWORD PTR temp$[rsp]
  00257	e8 00 00 00 00	 call	 PyUnicode_AppendAndDel

; 1513 :     PyList_SET_ITEM(pieces, PyList_GET_SIZE(pieces) - 1, temp);

  0025c	48 8b 44 24 28	 mov	 rax, QWORD PTR pieces$[rsp]
  00261	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00265	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pieces$[rsp]
  0026a	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0026e	48 8b 54 24 48	 mov	 rdx, QWORD PTR temp$[rsp]
  00273	48 89 54 c1 f8	 mov	 QWORD PTR [rcx+rax*8-8], rdx

; 1514 :     if (temp == NULL)

  00278	48 83 7c 24 48
	00		 cmp	 QWORD PTR temp$[rsp], 0
  0027e	75 02		 jne	 SHORT $LN10@dict_repr

; 1515 :         goto Done;

  00280	eb 39		 jmp	 SHORT $Done$21425
$LN10@dict_repr:

; 1516 : 
; 1517 :     /* Paste them all together with ", " between. */
; 1518 :     s = PyUnicode_FromString(", ");

  00282	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KEGNLNML@?0?5?$AA@
  00289	e8 00 00 00 00	 call	 PyUnicode_FromString
  0028e	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 1519 :     if (s == NULL)

  00293	48 83 7c 24 38
	00		 cmp	 QWORD PTR s$[rsp], 0
  00299	75 02		 jne	 SHORT $LN9@dict_repr

; 1520 :         goto Done;

  0029b	eb 1e		 jmp	 SHORT $Done$21425
$LN9@dict_repr:

; 1521 :     result = PyUnicode_Join(s, pieces);

  0029d	48 8b 54 24 28	 mov	 rdx, QWORD PTR pieces$[rsp]
  002a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  002a7	e8 00 00 00 00	 call	 PyUnicode_Join
  002ac	48 89 44 24 58	 mov	 QWORD PTR result$[rsp], rax

; 1522 :     Py_DECREF(s);

  002b1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  002b6	e8 00 00 00 00	 call	 _Py_DecRef
$Done$21425:
$LN8@dict_repr:

; 1523 : 
; 1524 : Done:
; 1525 :     Py_XDECREF(pieces);

  002bb	48 83 7c 24 28
	00		 cmp	 QWORD PTR pieces$[rsp], 0
  002c1	74 0a		 je	 SHORT $LN5@dict_repr
  002c3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pieces$[rsp]
  002c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@dict_repr:
  002cd	33 c0		 xor	 eax, eax
  002cf	85 c0		 test	 eax, eax
  002d1	75 e8		 jne	 SHORT $LN8@dict_repr
$LN4@dict_repr:

; 1526 :     Py_XDECREF(colon);

  002d3	48 83 7c 24 50
	00		 cmp	 QWORD PTR colon$[rsp], 0
  002d9	74 0a		 je	 SHORT $LN1@dict_repr
  002db	48 8b 4c 24 50	 mov	 rcx, QWORD PTR colon$[rsp]
  002e0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@dict_repr:
  002e5	33 c0		 xor	 eax, eax
  002e7	85 c0		 test	 eax, eax
  002e9	75 e8		 jne	 SHORT $LN4@dict_repr

; 1527 :     Py_ReprLeave((PyObject *)mp);

  002eb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  002f3	e8 00 00 00 00	 call	 Py_ReprLeave

; 1528 :     return result;

  002f8	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
$LN22@dict_repr:

; 1529 : }

  002fd	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00301	c3		 ret	 0
dict_repr ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT dict_length
_TEXT	SEGMENT
mp$ = 8
dict_length PROC					; COMDAT

; 1533 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1534 :     return mp->ma_used;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR mp$[rsp]
  0000a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 1535 : }

  0000e	c3		 ret	 0
dict_length ENDP
_TEXT	ENDS
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_LookupSpecial:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_subscript DD imagerel dict_subscript
	DD	imagerel dict_subscript+341
	DD	imagerel $unwind$dict_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_subscript DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_subscript
_TEXT	SEGMENT
v$ = 32
value_addr$ = 40
ep$ = 48
hash$ = 56
res$21507 = 64
missing$21506 = 72
mp$ = 96
key$ = 104
dict_subscript PROC					; COMDAT

; 1539 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1540 :     PyObject *v;
; 1541 :     Py_hash_t hash;
; 1542 :     PyDictKeyEntry *ep;
; 1543 :     PyObject **value_addr;
; 1544 : 
; 1545 :     if (!PyUnicode_CheckExact(key) ||
; 1546 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00015	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	75 16		 jne	 SHORT $LN9@dict_subsc
  00020	48 8b 44 24 68	 mov	 rax, QWORD PTR key$[rsp]
  00025	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00029	48 89 44 24 38	 mov	 QWORD PTR hash$[rsp], rax
  0002e	48 83 7c 24 38
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  00034	75 1e		 jne	 SHORT $LN10@dict_subsc
$LN9@dict_subsc:

; 1547 :         hash = PyObject_Hash(key);

  00036	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  0003b	e8 00 00 00 00	 call	 PyObject_Hash
  00040	48 89 44 24 38	 mov	 QWORD PTR hash$[rsp], rax

; 1548 :         if (hash == -1)

  00045	48 83 7c 24 38
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  0004b	75 07		 jne	 SHORT $LN8@dict_subsc

; 1549 :             return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	e9 fc 00 00 00	 jmp	 $LN11@dict_subsc
$LN8@dict_subsc:
$LN10@dict_subsc:

; 1550 :     }
; 1551 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  00054	48 8b 44 24 60	 mov	 rax, QWORD PTR mp$[rsp]
  00059	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0005d	4c 8d 4c 24 28	 lea	 r9, QWORD PTR value_addr$[rsp]
  00062	4c 8b 44 24 38	 mov	 r8, QWORD PTR hash$[rsp]
  00067	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  0006c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  00071	ff 50 10	 call	 QWORD PTR [rax+16]
  00074	48 89 44 24 30	 mov	 QWORD PTR ep$[rsp], rax

; 1552 :     if (ep == NULL)

  00079	48 83 7c 24 30
	00		 cmp	 QWORD PTR ep$[rsp], 0
  0007f	75 07		 jne	 SHORT $LN7@dict_subsc

; 1553 :         return NULL;

  00081	33 c0		 xor	 eax, eax
  00083	e9 c8 00 00 00	 jmp	 $LN11@dict_subsc
$LN7@dict_subsc:

; 1554 :     v = *value_addr;

  00088	48 8b 44 24 28	 mov	 rax, QWORD PTR value_addr$[rsp]
  0008d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00090	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1555 :     if (v == NULL) {

  00095	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0009b	0f 85 a0 00 00
	00		 jne	 $LN6@dict_subsc

; 1556 :         if (!PyDict_CheckExact(mp)) {

  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  000a8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  000ad	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000b1	74 7e		 je	 SHORT $LN5@dict_subsc
  000b3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  000ba	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  000bf	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  000c3	74 6c		 je	 SHORT $LN5@dict_subsc

; 1557 :             /* Look up __missing__ method if we're a subclass. */
; 1558 :             PyObject *missing, *res;
; 1559 :             _Py_IDENTIFIER(__missing__);
; 1560 :             missing = _PyObject_LookupSpecial((PyObject *)mp, &PyId___missing__);

  000c5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___missing__@?4??dict_subscript@@9@9
  000ca	8b c0		 mov	 eax, eax
  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000d2	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000db	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000df	48 8b d0	 mov	 rdx, rax
  000e2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$[rsp]
  000e7	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  000ec	48 89 44 24 48	 mov	 QWORD PTR missing$21506[rsp], rax

; 1561 :             if (missing != NULL) {

  000f1	48 83 7c 24 48
	00		 cmp	 QWORD PTR missing$21506[rsp], 0
  000f7	74 2a		 je	 SHORT $LN4@dict_subsc

; 1562 :                 res = PyObject_CallFunctionObjArgs(missing,
; 1563 :                                                    key, NULL);

  000f9	45 33 c0	 xor	 r8d, r8d
  000fc	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  00101	48 8b 4c 24 48	 mov	 rcx, QWORD PTR missing$21506[rsp]
  00106	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  0010b	48 89 44 24 40	 mov	 QWORD PTR res$21507[rsp], rax

; 1564 :                 Py_DECREF(missing);

  00110	48 8b 4c 24 48	 mov	 rcx, QWORD PTR missing$21506[rsp]
  00115	e8 00 00 00 00	 call	 _Py_DecRef

; 1565 :                 return res;

  0011a	48 8b 44 24 40	 mov	 rax, QWORD PTR res$21507[rsp]
  0011f	eb 2f		 jmp	 SHORT $LN11@dict_subsc
  00121	eb 0e		 jmp	 SHORT $LN3@dict_subsc
$LN4@dict_subsc:

; 1566 :             }
; 1567 :             else if (PyErr_Occurred())

  00123	e8 00 00 00 00	 call	 PyErr_Occurred
  00128	48 85 c0	 test	 rax, rax
  0012b	74 04		 je	 SHORT $LN2@dict_subsc

; 1568 :                 return NULL;

  0012d	33 c0		 xor	 eax, eax
  0012f	eb 1f		 jmp	 SHORT $LN11@dict_subsc
$LN2@dict_subsc:
$LN3@dict_subsc:
$LN5@dict_subsc:

; 1569 :         }
; 1570 :         set_key_error(key);

  00131	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  00136	e8 00 00 00 00	 call	 set_key_error

; 1571 :         return NULL;

  0013b	33 c0		 xor	 eax, eax
  0013d	eb 11		 jmp	 SHORT $LN11@dict_subsc

; 1572 :     }
; 1573 :     else

  0013f	eb 0a		 jmp	 SHORT $LN1@dict_subsc
$LN6@dict_subsc:

; 1574 :         Py_INCREF(v);

  00141	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00146	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@dict_subsc:

; 1575 :     return v;

  0014b	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN11@dict_subsc:

; 1576 : }

  00150	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00154	c3		 ret	 0
dict_subscript ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_ass_sub DD imagerel dict_ass_sub
	DD	imagerel dict_ass_sub+71
	DD	imagerel $unwind$dict_ass_sub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_ass_sub DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_ass_sub
_TEXT	SEGMENT
mp$ = 48
v$ = 56
w$ = 64
dict_ass_sub PROC					; COMDAT

; 1580 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1581 :     if (w == NULL)

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR w$[rsp], 0
  00019	75 13		 jne	 SHORT $LN2@dict_ass_s

; 1582 :         return PyDict_DelItem((PyObject *)mp, v);

  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR v$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mp$[rsp]
  00025	e8 00 00 00 00	 call	 PyDict_DelItem
  0002a	eb 16		 jmp	 SHORT $LN3@dict_ass_s

; 1583 :     else

  0002c	eb 14		 jmp	 SHORT $LN1@dict_ass_s
$LN2@dict_ass_s:

; 1584 :         return PyDict_SetItem((PyObject *)mp, v, w);

  0002e	4c 8b 44 24 40	 mov	 r8, QWORD PTR w$[rsp]
  00033	48 8b 54 24 38	 mov	 rdx, QWORD PTR v$[rsp]
  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mp$[rsp]
  0003d	e8 00 00 00 00	 call	 PyDict_SetItem
$LN1@dict_ass_s:
$LN3@dict_ass_s:

; 1585 : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
dict_ass_sub ENDP
_TEXT	ENDS
EXTRN	PyObject_SetItem:PROC
EXTRN	PyIter_Next:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	_PySet_NextEntry:PROC
EXTRN	PyFrozenSet_Type:BYTE
EXTRN	PySet_Type:BYTE
EXTRN	PyObject_CallObject:PROC
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_fromkeys DD imagerel dict_fromkeys
	DD	imagerel dict_fromkeys+871
	DD	imagerel $unwind$dict_fromkeys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_fromkeys DD 021101H
	DD	0170111H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_fromkeys
_TEXT	SEGMENT
it$ = 48
value$ = 56
key$ = 64
seq$ = 72
status$ = 80
d$ = 88
mp$21679 = 96
key$21683 = 104
hash$21684 = 112
oldvalue$21681 = 120
pos$21682 = 128
mp$21699 = 136
key$21702 = 144
hash$21703 = 152
pos$21701 = 160
cls$ = 192
args$ = 200
dict_fromkeys PROC					; COMDAT

; 1743 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1744 :     PyObject *seq;
; 1745 :     PyObject *value = Py_None;

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00018	48 89 44 24 38	 mov	 QWORD PTR value$[rsp], rax

; 1746 :     PyObject *it;       /* iter(seq) */
; 1747 :     PyObject *key;
; 1748 :     PyObject *d;
; 1749 :     int status;
; 1750 : 
; 1751 :     /* PXX TODO: px protection here? */
; 1752 : 
; 1753 :     if (!PyArg_UnpackTuple(args, "fromkeys", 1, 2, &seq, &value))

  0001d	48 8d 44 24 38	 lea	 rax, QWORD PTR value$[rsp]
  00022	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00027	48 8d 44 24 48	 lea	 rax, QWORD PTR seq$[rsp]
  0002c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00031	41 b9 02 00 00
	00		 mov	 r9d, 2
  00037	41 b8 01 00 00
	00		 mov	 r8d, 1
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KMEGJNJN@fromkeys?$AA@
  00044	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0004c	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00051	85 c0		 test	 eax, eax
  00053	75 07		 jne	 SHORT $LN27@dict_fromk

; 1754 :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	e9 03 03 00 00	 jmp	 $LN28@dict_fromk
$LN27@dict_fromk:

; 1755 : 
; 1756 :     d = PyObject_CallObject(cls, NULL);

  0005c	33 d2		 xor	 edx, edx
  0005e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR cls$[rsp]
  00066	e8 00 00 00 00	 call	 PyObject_CallObject
  0006b	48 89 44 24 58	 mov	 QWORD PTR d$[rsp], rax

; 1757 :     if (d == NULL)

  00070	48 83 7c 24 58
	00		 cmp	 QWORD PTR d$[rsp], 0
  00076	75 07		 jne	 SHORT $LN26@dict_fromk

; 1758 :         return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 e0 02 00 00	 jmp	 $LN28@dict_fromk
$LN26@dict_fromk:

; 1759 : 
; 1760 :     if (PyDict_CheckExact(d) && ((PyDictObject *)d)->ma_used == 0) {

  0007f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00086	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  0008b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008f	74 16		 je	 SHORT $LN24@dict_fromk
  00091	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00098	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  0009d	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  000a1	0f 85 af 01 00
	00		 jne	 $LN25@dict_fromk
$LN24@dict_fromk:
  000a7	48 8b 44 24 58	 mov	 rax, QWORD PTR d$[rsp]
  000ac	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000b1	0f 85 9f 01 00
	00		 jne	 $LN25@dict_fromk

; 1761 :         if (PyDict_CheckExact(seq)) {

  000b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  000be	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  000c3	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000c7	74 16		 je	 SHORT $LN22@dict_fromk
  000c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  000d0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  000d5	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  000d9	0f 85 a2 00 00
	00		 jne	 $LN23@dict_fromk
$LN22@dict_fromk:

; 1762 :             PyDictObject *mp = (PyDictObject *)d;

  000df	48 8b 44 24 58	 mov	 rax, QWORD PTR d$[rsp]
  000e4	48 89 44 24 60	 mov	 QWORD PTR mp$21679[rsp], rax

; 1763 :             PyObject *oldvalue;
; 1764 :             Py_ssize_t pos = 0;

  000e9	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pos$21682[rsp], 0

; 1765 :             PyObject *key;
; 1766 :             Py_hash_t hash;
; 1767 : 
; 1768 :             if (dictresize(mp, Py_SIZE(seq))) {

  000f5	48 8b 44 24 48	 mov	 rax, QWORD PTR seq$[rsp]
  000fa	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000fe	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$21679[rsp]
  00103	e8 00 00 00 00	 call	 dictresize
  00108	85 c0		 test	 eax, eax
  0010a	74 11		 je	 SHORT $LN21@dict_fromk

; 1769 :                 Py_DECREF(d);

  0010c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  00111	e8 00 00 00 00	 call	 _Py_DecRef

; 1770 :                 return NULL;

  00116	33 c0		 xor	 eax, eax
  00118	e9 42 02 00 00	 jmp	 $LN28@dict_fromk
$LN21@dict_fromk:
$LN20@dict_fromk:

; 1771 :             }
; 1772 : 
; 1773 :             while (_PyDict_Next(seq, &pos, &key, &oldvalue, &hash)) {

  0011d	48 8d 44 24 70	 lea	 rax, QWORD PTR hash$21684[rsp]
  00122	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00127	4c 8d 4c 24 78	 lea	 r9, QWORD PTR oldvalue$21681[rsp]
  0012c	4c 8d 44 24 68	 lea	 r8, QWORD PTR key$21683[rsp]
  00131	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR pos$21682[rsp]
  00139	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  0013e	e8 00 00 00 00	 call	 _PyDict_Next
  00143	85 c0		 test	 eax, eax
  00145	74 30		 je	 SHORT $LN19@dict_fromk

; 1774 :                 if (insertdict(mp, key, hash, value)) {

  00147	4c 8b 4c 24 38	 mov	 r9, QWORD PTR value$[rsp]
  0014c	4c 8b 44 24 70	 mov	 r8, QWORD PTR hash$21684[rsp]
  00151	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$21683[rsp]
  00156	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mp$21679[rsp]
  0015b	e8 00 00 00 00	 call	 insertdict
  00160	85 c0		 test	 eax, eax
  00162	74 11		 je	 SHORT $LN18@dict_fromk

; 1775 :                     Py_DECREF(d);

  00164	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  00169	e8 00 00 00 00	 call	 _Py_DecRef

; 1776 :                     return NULL;

  0016e	33 c0		 xor	 eax, eax
  00170	e9 ea 01 00 00	 jmp	 $LN28@dict_fromk
$LN18@dict_fromk:

; 1777 :                 }
; 1778 :             }

  00175	eb a6		 jmp	 SHORT $LN20@dict_fromk
$LN19@dict_fromk:

; 1779 :             return d;

  00177	48 8b 44 24 58	 mov	 rax, QWORD PTR d$[rsp]
  0017c	e9 de 01 00 00	 jmp	 $LN28@dict_fromk
$LN23@dict_fromk:

; 1780 :         }
; 1781 :         if (PyAnySet_CheckExact(seq)) {

  00181	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySet_Type
  00188	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  0018d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00191	74 16		 je	 SHORT $LN16@dict_fromk
  00193	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFrozenSet_Type
  0019a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  0019f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  001a3	0f 85 ad 00 00
	00		 jne	 $LN17@dict_fromk
$LN16@dict_fromk:

; 1782 :             PyDictObject *mp = (PyDictObject *)d;

  001a9	48 8b 44 24 58	 mov	 rax, QWORD PTR d$[rsp]
  001ae	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR mp$21699[rsp], rax

; 1783 :             Py_ssize_t pos = 0;

  001b6	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pos$21701[rsp], 0

; 1784 :             PyObject *key;
; 1785 :             Py_hash_t hash;
; 1786 : 
; 1787 :             if (dictresize(mp, PySet_GET_SIZE(seq))) {

  001c2	48 8b 44 24 48	 mov	 rax, QWORD PTR seq$[rsp]
  001c7	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  001cb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR mp$21699[rsp]
  001d3	e8 00 00 00 00	 call	 dictresize
  001d8	85 c0		 test	 eax, eax
  001da	74 11		 je	 SHORT $LN15@dict_fromk

; 1788 :                 Py_DECREF(d);

  001dc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  001e1	e8 00 00 00 00	 call	 _Py_DecRef

; 1789 :                 return NULL;

  001e6	33 c0		 xor	 eax, eax
  001e8	e9 72 01 00 00	 jmp	 $LN28@dict_fromk
$LN15@dict_fromk:
$LN14@dict_fromk:

; 1790 :             }
; 1791 : 
; 1792 :             while (_PySet_NextEntry(seq, &pos, &key, &hash)) {

  001ed	4c 8d 8c 24 98
	00 00 00	 lea	 r9, QWORD PTR hash$21703[rsp]
  001f5	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR key$21702[rsp]
  001fd	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR pos$21701[rsp]
  00205	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  0020a	e8 00 00 00 00	 call	 _PySet_NextEntry
  0020f	85 c0		 test	 eax, eax
  00211	74 39		 je	 SHORT $LN13@dict_fromk

; 1793 :                 if (insertdict(mp, key, hash, value)) {

  00213	4c 8b 4c 24 38	 mov	 r9, QWORD PTR value$[rsp]
  00218	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR hash$21703[rsp]
  00220	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR key$21702[rsp]
  00228	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR mp$21699[rsp]
  00230	e8 00 00 00 00	 call	 insertdict
  00235	85 c0		 test	 eax, eax
  00237	74 11		 je	 SHORT $LN12@dict_fromk

; 1794 :                     Py_DECREF(d);

  00239	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  0023e	e8 00 00 00 00	 call	 _Py_DecRef

; 1795 :                     return NULL;

  00243	33 c0		 xor	 eax, eax
  00245	e9 15 01 00 00	 jmp	 $LN28@dict_fromk
$LN12@dict_fromk:

; 1796 :                 }
; 1797 :             }

  0024a	eb a1		 jmp	 SHORT $LN14@dict_fromk
$LN13@dict_fromk:

; 1798 :             return d;

  0024c	48 8b 44 24 58	 mov	 rax, QWORD PTR d$[rsp]
  00251	e9 09 01 00 00	 jmp	 $LN28@dict_fromk
$LN17@dict_fromk:
$LN25@dict_fromk:

; 1799 :         }
; 1800 :     }
; 1801 : 
; 1802 :     it = PyObject_GetIter(seq);

  00256	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  0025b	e8 00 00 00 00	 call	 PyObject_GetIter
  00260	48 89 44 24 30	 mov	 QWORD PTR it$[rsp], rax

; 1803 :     if (it == NULL){

  00265	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  0026b	75 11		 jne	 SHORT $LN11@dict_fromk

; 1804 :         Py_DECREF(d);

  0026d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  00272	e8 00 00 00 00	 call	 _Py_DecRef

; 1805 :         return NULL;

  00277	33 c0		 xor	 eax, eax
  00279	e9 e1 00 00 00	 jmp	 $LN28@dict_fromk
$LN11@dict_fromk:

; 1806 :     }
; 1807 : 
; 1808 :     if (PyDict_CheckExact(d)) {

  0027e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00285	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  0028a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0028e	74 12		 je	 SHORT $LN9@dict_fromk
  00290	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00297	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  0029c	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  002a0	75 46		 jne	 SHORT $LN10@dict_fromk
$LN9@dict_fromk:
$LN8@dict_fromk:

; 1809 :         while ((key = PyIter_Next(it)) != NULL) {

  002a2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  002a7	e8 00 00 00 00	 call	 PyIter_Next
  002ac	48 89 44 24 40	 mov	 QWORD PTR key$[rsp], rax
  002b1	48 83 7c 24 40
	00		 cmp	 QWORD PTR key$[rsp], 0
  002b7	74 2d		 je	 SHORT $LN7@dict_fromk

; 1810 :             status = PyDict_SetItem(d, key, value);

  002b9	4c 8b 44 24 38	 mov	 r8, QWORD PTR value$[rsp]
  002be	48 8b 54 24 40	 mov	 rdx, QWORD PTR key$[rsp]
  002c3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  002c8	e8 00 00 00 00	 call	 PyDict_SetItem
  002cd	89 44 24 50	 mov	 DWORD PTR status$[rsp], eax

; 1811 :             Py_DECREF(key);

  002d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR key$[rsp]
  002d6	e8 00 00 00 00	 call	 _Py_DecRef

; 1812 :             if (status < 0)

  002db	83 7c 24 50 00	 cmp	 DWORD PTR status$[rsp], 0
  002e0	7d 02		 jge	 SHORT $LN6@dict_fromk

; 1813 :                 goto Fail;

  002e2	eb 65		 jmp	 SHORT $Fail$21728
$LN6@dict_fromk:

; 1814 :         }

  002e4	eb bc		 jmp	 SHORT $LN8@dict_fromk
$LN7@dict_fromk:

; 1815 :     } else {

  002e6	eb 44		 jmp	 SHORT $LN5@dict_fromk
$LN10@dict_fromk:
$LN4@dict_fromk:

; 1816 :         while ((key = PyIter_Next(it)) != NULL) {

  002e8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  002ed	e8 00 00 00 00	 call	 PyIter_Next
  002f2	48 89 44 24 40	 mov	 QWORD PTR key$[rsp], rax
  002f7	48 83 7c 24 40
	00		 cmp	 QWORD PTR key$[rsp], 0
  002fd	74 2d		 je	 SHORT $LN3@dict_fromk

; 1817 :             status = PyObject_SetItem(d, key, value);

  002ff	4c 8b 44 24 38	 mov	 r8, QWORD PTR value$[rsp]
  00304	48 8b 54 24 40	 mov	 rdx, QWORD PTR key$[rsp]
  00309	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  0030e	e8 00 00 00 00	 call	 PyObject_SetItem
  00313	89 44 24 50	 mov	 DWORD PTR status$[rsp], eax

; 1818 :             Py_DECREF(key);

  00317	48 8b 4c 24 40	 mov	 rcx, QWORD PTR key$[rsp]
  0031c	e8 00 00 00 00	 call	 _Py_DecRef

; 1819 :             if (status < 0)

  00321	83 7c 24 50 00	 cmp	 DWORD PTR status$[rsp], 0
  00326	7d 02		 jge	 SHORT $LN2@dict_fromk

; 1820 :                 goto Fail;

  00328	eb 1f		 jmp	 SHORT $Fail$21728
$LN2@dict_fromk:

; 1821 :         }

  0032a	eb bc		 jmp	 SHORT $LN4@dict_fromk
$LN3@dict_fromk:
$LN5@dict_fromk:

; 1822 :     }
; 1823 : 
; 1824 :     if (PyErr_Occurred())

  0032c	e8 00 00 00 00	 call	 PyErr_Occurred
  00331	48 85 c0	 test	 rax, rax
  00334	74 02		 je	 SHORT $LN1@dict_fromk

; 1825 :         goto Fail;

  00336	eb 11		 jmp	 SHORT $Fail$21728
$LN1@dict_fromk:

; 1826 :     Py_DECREF(it);

  00338	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  0033d	e8 00 00 00 00	 call	 _Py_DecRef

; 1827 :     return d;

  00342	48 8b 44 24 58	 mov	 rax, QWORD PTR d$[rsp]
  00347	eb 16		 jmp	 SHORT $LN28@dict_fromk
$Fail$21728:

; 1828 : 
; 1829 : Fail:
; 1830 :     Py_DECREF(it);

  00349	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  0034e	e8 00 00 00 00	 call	 _Py_DecRef

; 1831 :     Py_DECREF(d);

  00353	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d$[rsp]
  00358	e8 00 00 00 00	 call	 _Py_DecRef

; 1832 :     return NULL;

  0035d	33 c0		 xor	 eax, eax
$LN28@dict_fromk:

; 1833 : }

  0035f	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00366	c3		 ret	 0
dict_fromkeys ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_update DD imagerel dict_update
	DD	imagerel dict_update+79
	DD	imagerel $unwind$dict_update
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_update DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_update
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
dict_update PROC					; COMDAT

; 1862 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1863 :     if (dict_update_common(self, args, kwds, "update") != -1)

  00013	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_06HDLLMMEJ@update?$AA@
  0001a	4c 8b 44 24 40	 mov	 r8, QWORD PTR kwds$[rsp]
  0001f	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  00024	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00029	e8 00 00 00 00	 call	 dict_update_common
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	74 15		 je	 SHORT $LN1@dict_updat

; 1864 :         Py_RETURN_NONE;

  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0003a	e8 00 00 00 00	 call	 _Py_IncRef
  0003f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00046	eb 02		 jmp	 SHORT $LN2@dict_updat
$LN1@dict_updat:

; 1865 :     return NULL;

  00048	33 c0		 xor	 eax, eax
$LN2@dict_updat:

; 1866 : }

  0004a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004e	c3		 ret	 0
dict_update ENDP
_TEXT	ENDS
PUBLIC	PyDict_MergeFromSeq2
PUBLIC	PyDict_Merge
EXTRN	PyArg_ValidateKeywordArguments:PROC
EXTRN	_PyObject_HasAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_update_common DD imagerel dict_update_common
	DD	imagerel dict_update_common+265
	DD	imagerel $unwind$dict_update_common
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_update_common DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_update_common
_TEXT	SEGMENT
arg$ = 48
result$ = 56
self$ = 80
args$ = 88
kwds$ = 96
methname$ = 104
dict_update_common PROC					; COMDAT

; 1837 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1838 :     PyObject *arg = NULL;

  00018	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR arg$[rsp], 0

; 1839 :     int result = 0;

  00021	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 1840 : 
; 1841 :     if (!PyArg_UnpackTuple(args, methname, 0, 1, &arg))

  00029	48 8d 44 24 30	 lea	 rax, QWORD PTR arg$[rsp]
  0002e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00033	41 b9 01 00 00
	00		 mov	 r9d, 1
  00039	45 33 c0	 xor	 r8d, r8d
  0003c	48 8b 54 24 68	 mov	 rdx, QWORD PTR methname$[rsp]
  00041	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00046	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0004b	85 c0		 test	 eax, eax
  0004d	75 0a		 jne	 SHORT $LN8@dict_updat@2

; 1842 :         result = -1;

  0004f	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR result$[rsp], -1
  00057	eb 67		 jmp	 SHORT $LN7@dict_updat@2
$LN8@dict_updat@2:

; 1843 : 
; 1844 :     else if (arg != NULL) {

  00059	48 83 7c 24 30
	00		 cmp	 QWORD PTR arg$[rsp], 0
  0005f	74 5f		 je	 SHORT $LN6@dict_updat@2

; 1845 :         _Py_IDENTIFIER(keys);
; 1846 :         if (_PyObject_HasAttrId(arg, &PyId_keys))

  00061	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_keys@?2??dict_update_common@@9@9
  00066	8b c0		 mov	 eax, eax
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0006e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00077	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0007b	48 8b d0	 mov	 rdx, rax
  0007e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  00083	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00088	85 c0		 test	 eax, eax
  0008a	74 1b		 je	 SHORT $LN5@dict_updat@2

; 1847 :             result = PyDict_Merge(self, arg, 1);

  0008c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00092	48 8b 54 24 30	 mov	 rdx, QWORD PTR arg$[rsp]
  00097	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0009c	e8 00 00 00 00	 call	 PyDict_Merge
  000a1	89 44 24 38	 mov	 DWORD PTR result$[rsp], eax

; 1848 :         else

  000a5	eb 19		 jmp	 SHORT $LN4@dict_updat@2
$LN5@dict_updat@2:

; 1849 :             result = PyDict_MergeFromSeq2(self, arg, 1);

  000a7	41 b8 01 00 00
	00		 mov	 r8d, 1
  000ad	48 8b 54 24 30	 mov	 rdx, QWORD PTR arg$[rsp]
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000b7	e8 00 00 00 00	 call	 PyDict_MergeFromSeq2
  000bc	89 44 24 38	 mov	 DWORD PTR result$[rsp], eax
$LN4@dict_updat@2:
$LN6@dict_updat@2:
$LN7@dict_updat@2:

; 1850 :     }
; 1851 :     if (result == 0 && kwds != NULL) {

  000c0	83 7c 24 38 00	 cmp	 DWORD PTR result$[rsp], 0
  000c5	75 39		 jne	 SHORT $LN3@dict_updat@2
  000c7	48 83 7c 24 60
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  000cd	74 31		 je	 SHORT $LN3@dict_updat@2

; 1852 :         if (PyArg_ValidateKeywordArguments(kwds))

  000cf	48 8b 4c 24 60	 mov	 rcx, QWORD PTR kwds$[rsp]
  000d4	e8 00 00 00 00	 call	 PyArg_ValidateKeywordArguments
  000d9	85 c0		 test	 eax, eax
  000db	74 1b		 je	 SHORT $LN2@dict_updat@2

; 1853 :             result = PyDict_Merge(self, kwds, 1);

  000dd	41 b8 01 00 00
	00		 mov	 r8d, 1
  000e3	48 8b 54 24 60	 mov	 rdx, QWORD PTR kwds$[rsp]
  000e8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000ed	e8 00 00 00 00	 call	 PyDict_Merge
  000f2	89 44 24 38	 mov	 DWORD PTR result$[rsp], eax

; 1854 :         else

  000f6	eb 08		 jmp	 SHORT $LN1@dict_updat@2
$LN2@dict_updat@2:

; 1855 :             result = -1;

  000f8	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR result$[rsp], -1
$LN1@dict_updat@2:
$LN3@dict_updat@2:

; 1856 :     }
; 1857 :     return result;

  00100	8b 44 24 38	 mov	 eax, DWORD PTR result$[rsp]

; 1858 : }

  00104	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00108	c3		 ret	 0
dict_update_common ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DI@MNKBAHEP@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0EG@BDIBGBNC@dictionary?5update?5sequence?5eleme@ ; `string'
PUBLIC	??_C@_0EF@LNNPNMIA@cannot?5convert?5dictionary?5update@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_1BK@GLCLJHKH@?$AAs?$AAe?$AAq?$AA2?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@PKLKKIO@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@EFCCCFNO@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyErr_Format:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PySequence_Fast:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_MergeFromSeq2 DD imagerel $LN33
	DD	imagerel $LN33+807
	DD	imagerel $unwind$PyDict_MergeFromSeq2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_MergeFromSeq2 DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_1DI@MNKBAHEP@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@MNKBAHEP@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@ DB '('
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 's', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, '_', 00H, 't', 00H, ')', 00H, '(', 00H, 'i'
	DB	00H, 'n', 00H, 't', 00H, ')', 00H, '(', 00H, 'i', 00H, ')', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '(', 00H, 'i', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@BDIBGBNC@dictionary?5update?5sequence?5eleme@
CONST	SEGMENT
??_C@_0EG@BDIBGBNC@dictionary?5update?5sequence?5eleme@ DB 'dictionary up'
	DB	'date sequence element #%zd has length %zd; 2 is required', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@LNNPNMIA@cannot?5convert?5dictionary?5update@
CONST	SEGMENT
??_C@_0EF@LNNPNMIA@cannot?5convert?5dictionary?5update@ DB 'cannot conver'
	DB	't dictionary update sequence element #%zd to a sequence', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@GLCLJHKH@?$AAs?$AAe?$AAq?$AA2?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@GLCLJHKH@?$AAs?$AAe?$AAq?$AA2?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'q', 00H, '2', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@PKLKKIO@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@PKLKKIO@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'd'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@EFCCCFNO@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@EFCCCFNO@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'd'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H
	DB	'L', 00H, 'L', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyDict_MergeFromSeq2
_TEXT	SEGMENT
it$ = 32
i$ = 40
fast$ = 48
item$ = 56
value$21805 = 64
n$21806 = 72
key$21804 = 80
status$21831 = 88
tv139 = 96
tv153 = 104
tv162 = 112
d$ = 144
seq2$ = 152
override$ = 160
PyDict_MergeFromSeq2 PROC				; COMDAT

; 1880 : {

$LN33:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1881 :     PyObject *it;       /* iter(seq2) */
; 1882 :     Py_ssize_t i;       /* index into seq2 of current element */
; 1883 :     PyObject *item;     /* seq2[i] */
; 1884 :     PyObject *fast;     /* item as a 2-tuple or 2-list */
; 1885 : 
; 1886 :     assert(d != NULL);

  00016	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR d$[rsp], 0
  0001f	75 1c		 jne	 SHORT $LN23@PyDict_Mer
  00021	41 b8 5e 07 00
	00		 mov	 r8d, 1886		; 0000075eH
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@EFCCCFNO@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003b	33 c0		 xor	 eax, eax
$LN23@PyDict_Mer:

; 1887 :     assert(PyDict_Check(d));

  0003d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR d$[rsp]
  00045	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00049	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0004f	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00054	85 c0		 test	 eax, eax
  00056	75 1c		 jne	 SHORT $LN24@PyDict_Mer
  00058	41 b8 5f 07 00
	00		 mov	 r8d, 1887		; 0000075fH
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@PKLKKIO@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AA?$CJ?$AA?$AA@
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00072	33 c0		 xor	 eax, eax
$LN24@PyDict_Mer:

; 1888 :     assert(seq2 != NULL);

  00074	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR seq2$[rsp], 0
  0007d	75 1c		 jne	 SHORT $LN25@PyDict_Mer
  0007f	41 b8 60 07 00
	00		 mov	 r8d, 1888		; 00000760H
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@GLCLJHKH@?$AAs?$AAe?$AAq?$AA2?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00099	33 c0		 xor	 eax, eax
$LN25@PyDict_Mer:

; 1889 : 
; 1890 :     /*
; 1891 :     if (Px_CHECK_PROTECTION(d, seq2, NULL))
; 1892 :         return -1;
; 1893 :     */
; 1894 : 
; 1895 :     it = PyObject_GetIter(seq2);

  0009b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR seq2$[rsp]
  000a3	e8 00 00 00 00	 call	 PyObject_GetIter
  000a8	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 1896 :     if (it == NULL)

  000ad	48 83 7c 24 20
	00		 cmp	 QWORD PTR it$[rsp], 0
  000b3	75 0a		 jne	 SHORT $LN20@PyDict_Mer

; 1897 :         return -1;

  000b5	b8 ff ff ff ff	 mov	 eax, -1
  000ba	e9 60 02 00 00	 jmp	 $LN21@PyDict_Mer
$LN20@PyDict_Mer:

; 1898 : 
; 1899 :     for (i = 0; ; ++i) {

  000bf	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000c8	eb 0d		 jmp	 SHORT $LN19@PyDict_Mer
$LN18@PyDict_Mer:
  000ca	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000cf	48 ff c0	 inc	 rax
  000d2	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN19@PyDict_Mer:

; 1900 :         PyObject *key, *value;
; 1901 :         Py_ssize_t n;
; 1902 : 
; 1903 :         fast = NULL;

  000d7	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR fast$[rsp], 0

; 1904 :         item = PyIter_Next(it);

  000e0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  000e5	e8 00 00 00 00	 call	 PyIter_Next
  000ea	48 89 44 24 38	 mov	 QWORD PTR item$[rsp], rax

; 1905 :         if (item == NULL) {

  000ef	48 83 7c 24 38
	00		 cmp	 QWORD PTR item$[rsp], 0
  000f5	75 14		 jne	 SHORT $LN16@PyDict_Mer

; 1906 :             if (PyErr_Occurred())

  000f7	e8 00 00 00 00	 call	 PyErr_Occurred
  000fc	48 85 c0	 test	 rax, rax
  000ff	74 05		 je	 SHORT $LN15@PyDict_Mer

; 1907 :                 goto Fail;

  00101	e9 aa 01 00 00	 jmp	 $Fail$21811
$LN15@PyDict_Mer:

; 1908 :             break;

  00106	e9 9a 01 00 00	 jmp	 $LN17@PyDict_Mer
$LN16@PyDict_Mer:

; 1909 :         }
; 1910 : 
; 1911 :         /* Convert item to sequence, and verify length 2. */
; 1912 :         fast = PySequence_Fast(item, "");

  0010b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00112	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  00117	e8 00 00 00 00	 call	 PySequence_Fast
  0011c	48 89 44 24 30	 mov	 QWORD PTR fast$[rsp], rax

; 1913 :         if (fast == NULL) {

  00121	48 83 7c 24 30
	00		 cmp	 QWORD PTR fast$[rsp], 0
  00127	75 2d		 jne	 SHORT $LN14@PyDict_Mer

; 1914 :             if (PyErr_ExceptionMatches(PyExc_TypeError))

  00129	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00130	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00135	85 c0		 test	 eax, eax
  00137	74 18		 je	 SHORT $LN13@PyDict_Mer

; 1915 :                 PyErr_Format(PyExc_TypeError,
; 1916 :                     "cannot convert dictionary update "
; 1917 :                     "sequence element #%zd to a sequence",
; 1918 :                     i);

  00139	4c 8b 44 24 28	 mov	 r8, QWORD PTR i$[rsp]
  0013e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EF@LNNPNMIA@cannot?5convert?5dictionary?5update@
  00145	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0014c	e8 00 00 00 00	 call	 PyErr_Format
$LN13@PyDict_Mer:

; 1919 :             goto Fail;

  00151	e9 5a 01 00 00	 jmp	 $Fail$21811
$LN14@PyDict_Mer:

; 1920 :         }
; 1921 :         n = PySequence_Fast_GET_SIZE(fast);

  00156	48 8b 44 24 30	 mov	 rax, QWORD PTR fast$[rsp]
  0015b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0015f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00165	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0016a	85 c0		 test	 eax, eax
  0016c	74 10		 je	 SHORT $LN26@PyDict_Mer
  0016e	48 8b 44 24 30	 mov	 rax, QWORD PTR fast$[rsp]
  00173	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00177	48 89 44 24 60	 mov	 QWORD PTR tv139[rsp], rax
  0017c	eb 0e		 jmp	 SHORT $LN27@PyDict_Mer
$LN26@PyDict_Mer:
  0017e	48 8b 44 24 30	 mov	 rax, QWORD PTR fast$[rsp]
  00183	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00187	48 89 44 24 60	 mov	 QWORD PTR tv139[rsp], rax
$LN27@PyDict_Mer:
  0018c	48 8b 44 24 60	 mov	 rax, QWORD PTR tv139[rsp]
  00191	48 89 44 24 48	 mov	 QWORD PTR n$21806[rsp], rax

; 1922 :         if (n != 2) {

  00196	48 83 7c 24 48
	02		 cmp	 QWORD PTR n$21806[rsp], 2
  0019c	74 22		 je	 SHORT $LN12@PyDict_Mer

; 1923 :             PyErr_Format(PyExc_ValueError,
; 1924 :                          "dictionary update sequence element #%zd "
; 1925 :                          "has length %zd; 2 is required",
; 1926 :                          i, n);

  0019e	4c 8b 4c 24 48	 mov	 r9, QWORD PTR n$21806[rsp]
  001a3	4c 8b 44 24 28	 mov	 r8, QWORD PTR i$[rsp]
  001a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EG@BDIBGBNC@dictionary?5update?5sequence?5eleme@
  001af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001b6	e8 00 00 00 00	 call	 PyErr_Format

; 1927 :             goto Fail;

  001bb	e9 f0 00 00 00	 jmp	 $Fail$21811
$LN12@PyDict_Mer:

; 1928 :         }
; 1929 : 
; 1930 :         /* Update/merge with this (key, value) pair. */
; 1931 :         key = PySequence_Fast_GET_ITEM(fast, 0);

  001c0	48 8b 44 24 30	 mov	 rax, QWORD PTR fast$[rsp]
  001c5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001c9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001cf	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  001d4	85 c0		 test	 eax, eax
  001d6	74 13		 je	 SHORT $LN28@PyDict_Mer
  001d8	48 8b 44 24 30	 mov	 rax, QWORD PTR fast$[rsp]
  001dd	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001e1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e4	48 89 44 24 68	 mov	 QWORD PTR tv153[rsp], rax
  001e9	eb 0e		 jmp	 SHORT $LN29@PyDict_Mer
$LN28@PyDict_Mer:
  001eb	48 8b 44 24 30	 mov	 rax, QWORD PTR fast$[rsp]
  001f0	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001f4	48 89 44 24 68	 mov	 QWORD PTR tv153[rsp], rax
$LN29@PyDict_Mer:
  001f9	48 8b 44 24 68	 mov	 rax, QWORD PTR tv153[rsp]
  001fe	48 89 44 24 50	 mov	 QWORD PTR key$21804[rsp], rax

; 1932 :         value = PySequence_Fast_GET_ITEM(fast, 1);

  00203	48 8b 44 24 30	 mov	 rax, QWORD PTR fast$[rsp]
  00208	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0020c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00212	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00217	85 c0		 test	 eax, eax
  00219	74 14		 je	 SHORT $LN30@PyDict_Mer
  0021b	48 8b 44 24 30	 mov	 rax, QWORD PTR fast$[rsp]
  00220	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00224	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00228	48 89 44 24 70	 mov	 QWORD PTR tv162[rsp], rax
  0022d	eb 0e		 jmp	 SHORT $LN31@PyDict_Mer
$LN30@PyDict_Mer:
  0022f	48 8b 44 24 30	 mov	 rax, QWORD PTR fast$[rsp]
  00234	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00238	48 89 44 24 70	 mov	 QWORD PTR tv162[rsp], rax
$LN31@PyDict_Mer:
  0023d	48 8b 44 24 70	 mov	 rax, QWORD PTR tv162[rsp]
  00242	48 89 44 24 40	 mov	 QWORD PTR value$21805[rsp], rax

; 1933 :         if (override || PyDict_GetItem(d, key) == NULL) {

  00247	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR override$[rsp], 0
  0024f	75 17		 jne	 SHORT $LN10@PyDict_Mer
  00251	48 8b 54 24 50	 mov	 rdx, QWORD PTR key$21804[rsp]
  00256	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR d$[rsp]
  0025e	e8 00 00 00 00	 call	 PyDict_GetItem
  00263	48 85 c0	 test	 rax, rax
  00266	75 24		 jne	 SHORT $LN11@PyDict_Mer
$LN10@PyDict_Mer:

; 1934 :             int status = PyDict_SetItem(d, key, value);

  00268	4c 8b 44 24 40	 mov	 r8, QWORD PTR value$21805[rsp]
  0026d	48 8b 54 24 50	 mov	 rdx, QWORD PTR key$21804[rsp]
  00272	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR d$[rsp]
  0027a	e8 00 00 00 00	 call	 PyDict_SetItem
  0027f	89 44 24 58	 mov	 DWORD PTR status$21831[rsp], eax

; 1935 :             if (status < 0)

  00283	83 7c 24 58 00	 cmp	 DWORD PTR status$21831[rsp], 0
  00288	7d 02		 jge	 SHORT $LN9@PyDict_Mer

; 1936 :                 goto Fail;

  0028a	eb 24		 jmp	 SHORT $Fail$21811
$LN9@PyDict_Mer:
$LN11@PyDict_Mer:

; 1937 :         }
; 1938 :         Py_DECREF(fast);

  0028c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fast$[rsp]
  00291	e8 00 00 00 00	 call	 _Py_DecRef

; 1939 :         Py_DECREF(item);

  00296	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  0029b	e8 00 00 00 00	 call	 _Py_DecRef

; 1940 :     }

  002a0	e9 25 fe ff ff	 jmp	 $LN18@PyDict_Mer
$LN17@PyDict_Mer:

; 1941 : 
; 1942 :     i = 0;

  002a5	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0

; 1943 :     goto Return;

  002ae	eb 39		 jmp	 SHORT $Return$21835
$Fail$21811:
$LN8@PyDict_Mer:

; 1944 : Fail:
; 1945 :     Py_XDECREF(item);

  002b0	48 83 7c 24 38
	00		 cmp	 QWORD PTR item$[rsp], 0
  002b6	74 0a		 je	 SHORT $LN5@PyDict_Mer
  002b8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  002bd	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyDict_Mer:
  002c2	33 c0		 xor	 eax, eax
  002c4	85 c0		 test	 eax, eax
  002c6	75 e8		 jne	 SHORT $LN8@PyDict_Mer
$LN4@PyDict_Mer:

; 1946 :     Py_XDECREF(fast);

  002c8	48 83 7c 24 30
	00		 cmp	 QWORD PTR fast$[rsp], 0
  002ce	74 0a		 je	 SHORT $LN1@PyDict_Mer
  002d0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fast$[rsp]
  002d5	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyDict_Mer:
  002da	33 c0		 xor	 eax, eax
  002dc	85 c0		 test	 eax, eax
  002de	75 e8		 jne	 SHORT $LN4@PyDict_Mer

; 1947 :     i = -1;

  002e0	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR i$[rsp], -1
$Return$21835:

; 1948 : Return:
; 1949 :     Py_DECREF(it);

  002e9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  002ee	e8 00 00 00 00	 call	 _Py_DecRef

; 1950 :     return Py_SAFE_DOWNCAST(i, Py_ssize_t, int);

  002f3	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  002f8	48 3b 44 24 28	 cmp	 rax, QWORD PTR i$[rsp]
  002fd	74 1c		 je	 SHORT $LN32@PyDict_Mer
  002ff	41 b8 9e 07 00
	00		 mov	 r8d, 1950		; 0000079eH
  00305	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0030c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MNKBAHEP@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@
  00313	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00319	33 c0		 xor	 eax, eax
$LN32@PyDict_Mer:
  0031b	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
$LN21@PyDict_Mer:

; 1951 : }

  0031f	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00326	c3		 ret	 0
PyDict_MergeFromSeq2 ENDP
_TEXT	ENDS
PUBLIC	PyDict_Update
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Update DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$PyDict_Update
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Update DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_Update
_TEXT	SEGMENT
a$ = 48
b$ = 56
PyDict_Update PROC					; COMDAT

; 1955 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1956 :     return PyDict_Merge(a, b, 1);

  0000e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00014	48 8b 54 24 38	 mov	 rdx, QWORD PTR b$[rsp]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a$[rsp]
  0001e	e8 00 00 00 00	 call	 PyDict_Merge

; 1957 : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
PyDict_Update ENDP
_TEXT	ENDS
EXTRN	PyObject_GetItem:PROC
EXTRN	PyMapping_Keys:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Merge DD imagerel $LN29
	DD	imagerel $LN29+868
	DD	imagerel $unwind$PyDict_Merge
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Merge DD 021601H
	DD	0110116H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_Merge
_TEXT	SEGMENT
n$ = 32
i$ = 40
mp$ = 48
other$ = 56
entry$ = 64
value$21886 = 72
value$21898 = 80
iter$21896 = 88
key$21897 = 96
status$21899 = 104
keys$21895 = 112
a$ = 144
b$ = 152
override$ = 160
PyDict_Merge PROC					; COMDAT

; 1961 : {

$LN29:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1962 :     register PyDictObject *mp, *other;
; 1963 :     register Py_ssize_t i, n;
; 1964 :     PyDictKeyEntry *entry;
; 1965 : 
; 1966 :     /* We accept for the argument either a concrete dictionary object,
; 1967 :      * or an abstract "mapping" object.  For the former, we can do
; 1968 :      * things quite efficiently.  For the latter, we only require that
; 1969 :      * PyMapping_Keys() and PyObject_GetItem() be supported.
; 1970 :      */
; 1971 :     if (a == NULL || !PyDict_Check(a) || b == NULL) {

  00016	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR a$[rsp], 0
  0001f	74 26		 je	 SHORT $LN25@PyDict_Mer@2
  00021	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00029	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00033	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00038	85 c0		 test	 eax, eax
  0003a	74 0b		 je	 SHORT $LN25@PyDict_Mer@2
  0003c	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR b$[rsp], 0
  00045	75 1b		 jne	 SHORT $LN26@PyDict_Mer@2
$LN25@PyDict_Mer@2:

; 1972 :         PyErr_BadInternalCall();

  00047	ba b4 07 00 00	 mov	 edx, 1972		; 000007b4H
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00053	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 1973 :         return -1;

  00058	b8 ff ff ff ff	 mov	 eax, -1
  0005d	e9 fa 02 00 00	 jmp	 $LN27@PyDict_Mer@2
$LN26@PyDict_Mer@2:

; 1974 :     }
; 1975 : 
; 1976 :     /*
; 1977 :     if (Px_CHECK_PROTECTION(a, b, NULL) ||
; 1978 :         Px_CHECK_PROTECTION(b, a, NULL))
; 1979 :         return -1;
; 1980 :     */
; 1981 : 
; 1982 :     mp = (PyDictObject*)a;

  00062	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  0006a	48 89 44 24 30	 mov	 QWORD PTR mp$[rsp], rax

; 1983 :     if (PyDict_Check(b)) {

  0006f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00077	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00081	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00086	85 c0		 test	 eax, eax
  00088	0f 84 83 01 00
	00		 je	 $LN24@PyDict_Mer@2

; 1984 :         other = (PyDictObject*)b;

  0008e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  00096	48 89 44 24 38	 mov	 QWORD PTR other$[rsp], rax

; 1985 :         if (other == mp || other->ma_used == 0)

  0009b	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  000a0	48 39 44 24 38	 cmp	 QWORD PTR other$[rsp], rax
  000a5	74 0c		 je	 SHORT $LN22@PyDict_Mer@2
  000a7	48 8b 44 24 38	 mov	 rax, QWORD PTR other$[rsp]
  000ac	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000b1	75 07		 jne	 SHORT $LN23@PyDict_Mer@2
$LN22@PyDict_Mer@2:

; 1986 :             /* a.update(a) or a.update({}); nothing to do */
; 1987 :             return 0;

  000b3	33 c0		 xor	 eax, eax
  000b5	e9 a2 02 00 00	 jmp	 $LN27@PyDict_Mer@2
$LN23@PyDict_Mer@2:

; 1988 :         if (mp->ma_used == 0)

  000ba	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  000bf	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000c4	75 0b		 jne	 SHORT $LN21@PyDict_Mer@2

; 1989 :             /* Since the target dict is empty, PyDict_GetItem()
; 1990 :              * always returns NULL.  Setting override to 1
; 1991 :              * skips the unnecessary test.
; 1992 :              */
; 1993 :             override = 1;

  000c6	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR override$[rsp], 1
$LN21@PyDict_Mer@2:

; 1994 :         /* Do one big resize at the start, rather than
; 1995 :          * incrementally resizing as we insert new items.  Expect
; 1996 :          * that there will be no (or few) overlapping keys.
; 1997 :          */
; 1998 :         if (mp->ma_keys->dk_usable * 3 < other->ma_used * 2)

  000d1	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  000d6	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000da	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000de	48 6b c0 03	 imul	 rax, 3
  000e2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR other$[rsp]
  000e7	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000eb	48 d1 e1	 shl	 rcx, 1
  000ee	48 3b c1	 cmp	 rax, rcx
  000f1	7d 30		 jge	 SHORT $LN20@PyDict_Mer@2

; 1999 :             if (dictresize(mp, (mp->ma_used + other->ma_used)*2) != 0)

  000f3	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  000f8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000fc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR other$[rsp]
  00101	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]
  00105	48 d1 e0	 shl	 rax, 1
  00108	48 8b d0	 mov	 rdx, rax
  0010b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mp$[rsp]
  00110	e8 00 00 00 00	 call	 dictresize
  00115	85 c0		 test	 eax, eax
  00117	74 0a		 je	 SHORT $LN19@PyDict_Mer@2

; 2000 :                return -1;

  00119	b8 ff ff ff ff	 mov	 eax, -1
  0011e	e9 39 02 00 00	 jmp	 $LN27@PyDict_Mer@2
$LN19@PyDict_Mer@2:
$LN20@PyDict_Mer@2:

; 2001 :         for (i = 0, n = DK_SIZE(other->ma_keys); i < n; i++) {

  00123	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0012c	48 8b 44 24 38	 mov	 rax, QWORD PTR other$[rsp]
  00131	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00135	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00139	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax
  0013e	eb 0d		 jmp	 SHORT $LN18@PyDict_Mer@2
$LN17@PyDict_Mer@2:
  00140	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00145	48 ff c0	 inc	 rax
  00148	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN18@PyDict_Mer@2:
  0014d	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00152	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00157	0f 8d af 00 00
	00		 jge	 $LN16@PyDict_Mer@2

; 2002 :             PyObject *value;
; 2003 :             entry = &other->ma_keys->dk_entries[i];

  0015d	48 8b 44 24 38	 mov	 rax, QWORD PTR other$[rsp]
  00162	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00166	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0016b	48 6b c9 18	 imul	 rcx, 24
  0016f	48 8d 44 08 20	 lea	 rax, QWORD PTR [rax+rcx+32]
  00174	48 89 44 24 40	 mov	 QWORD PTR entry$[rsp], rax

; 2004 :             if (other->ma_values)

  00179	48 8b 44 24 38	 mov	 rax, QWORD PTR other$[rsp]
  0017e	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00183	74 19		 je	 SHORT $LN15@PyDict_Mer@2

; 2005 :                 value = other->ma_values[i];

  00185	48 8b 44 24 38	 mov	 rax, QWORD PTR other$[rsp]
  0018a	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0018e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00193	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00197	48 89 44 24 48	 mov	 QWORD PTR value$21886[rsp], rax

; 2006 :             else

  0019c	eb 0e		 jmp	 SHORT $LN14@PyDict_Mer@2
$LN15@PyDict_Mer@2:

; 2007 :                 value = entry->me_value;

  0019e	48 8b 44 24 40	 mov	 rax, QWORD PTR entry$[rsp]
  001a3	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001a7	48 89 44 24 48	 mov	 QWORD PTR value$21886[rsp], rax
$LN14@PyDict_Mer@2:

; 2008 : 
; 2009 :             if (value != NULL &&
; 2010 :                 (override ||
; 2011 :                  PyDict_GetItem(a, entry->me_key) == NULL)) {

  001ac	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$21886[rsp], 0
  001b2	74 53		 je	 SHORT $LN13@PyDict_Mer@2
  001b4	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR override$[rsp], 0
  001bc	75 1b		 jne	 SHORT $LN12@PyDict_Mer@2
  001be	48 8b 44 24 40	 mov	 rax, QWORD PTR entry$[rsp]
  001c3	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  001c7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
  001cf	e8 00 00 00 00	 call	 PyDict_GetItem
  001d4	48 85 c0	 test	 rax, rax
  001d7	75 2e		 jne	 SHORT $LN13@PyDict_Mer@2
$LN12@PyDict_Mer@2:

; 2012 :                 if (insertdict(mp, entry->me_key,
; 2013 :                                entry->me_hash,
; 2014 :                                value) != 0)

  001d9	4c 8b 4c 24 48	 mov	 r9, QWORD PTR value$21886[rsp]
  001de	48 8b 44 24 40	 mov	 rax, QWORD PTR entry$[rsp]
  001e3	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  001e6	48 8b 44 24 40	 mov	 rax, QWORD PTR entry$[rsp]
  001eb	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  001ef	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mp$[rsp]
  001f4	e8 00 00 00 00	 call	 insertdict
  001f9	85 c0		 test	 eax, eax
  001fb	74 0a		 je	 SHORT $LN11@PyDict_Mer@2

; 2015 :                     return -1;

  001fd	b8 ff ff ff ff	 mov	 eax, -1
  00202	e9 55 01 00 00	 jmp	 $LN27@PyDict_Mer@2
$LN11@PyDict_Mer@2:
$LN13@PyDict_Mer@2:

; 2016 :             }
; 2017 :         }

  00207	e9 34 ff ff ff	 jmp	 $LN17@PyDict_Mer@2
$LN16@PyDict_Mer@2:

; 2018 :     }
; 2019 :     else {

  0020c	e9 49 01 00 00	 jmp	 $LN10@PyDict_Mer@2
$LN24@PyDict_Mer@2:

; 2020 :         /* Do it the generic, slower way */
; 2021 :         PyObject *keys = PyMapping_Keys(b);

  00211	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR b$[rsp]
  00219	e8 00 00 00 00	 call	 PyMapping_Keys
  0021e	48 89 44 24 70	 mov	 QWORD PTR keys$21895[rsp], rax

; 2022 :         PyObject *iter;
; 2023 :         PyObject *key, *value;
; 2024 :         int status;
; 2025 : 
; 2026 :         if (keys == NULL)

  00223	48 83 7c 24 70
	00		 cmp	 QWORD PTR keys$21895[rsp], 0
  00229	75 0a		 jne	 SHORT $LN9@PyDict_Mer@2

; 2027 :             /* Docstring says this is equivalent to E.keys() so
; 2028 :              * if E doesn't have a .keys() method we want
; 2029 :              * AttributeError to percolate up.  Might as well
; 2030 :              * do the same for any other error.
; 2031 :              */
; 2032 :             return -1;

  0022b	b8 ff ff ff ff	 mov	 eax, -1
  00230	e9 27 01 00 00	 jmp	 $LN27@PyDict_Mer@2
$LN9@PyDict_Mer@2:

; 2033 : 
; 2034 :         iter = PyObject_GetIter(keys);

  00235	48 8b 4c 24 70	 mov	 rcx, QWORD PTR keys$21895[rsp]
  0023a	e8 00 00 00 00	 call	 PyObject_GetIter
  0023f	48 89 44 24 58	 mov	 QWORD PTR iter$21896[rsp], rax

; 2035 :         Py_DECREF(keys);

  00244	48 8b 4c 24 70	 mov	 rcx, QWORD PTR keys$21895[rsp]
  00249	e8 00 00 00 00	 call	 _Py_DecRef

; 2036 :         if (iter == NULL)

  0024e	48 83 7c 24 58
	00		 cmp	 QWORD PTR iter$21896[rsp], 0
  00254	75 0a		 jne	 SHORT $LN8@PyDict_Mer@2

; 2037 :             return -1;

  00256	b8 ff ff ff ff	 mov	 eax, -1
  0025b	e9 fc 00 00 00	 jmp	 $LN27@PyDict_Mer@2
$LN8@PyDict_Mer@2:

; 2038 : 
; 2039 :         for (key = PyIter_Next(iter); key; key = PyIter_Next(iter)) {

  00260	48 8b 4c 24 58	 mov	 rcx, QWORD PTR iter$21896[rsp]
  00265	e8 00 00 00 00	 call	 PyIter_Next
  0026a	48 89 44 24 60	 mov	 QWORD PTR key$21897[rsp], rax
  0026f	eb 0f		 jmp	 SHORT $LN7@PyDict_Mer@2
$LN6@PyDict_Mer@2:
  00271	48 8b 4c 24 58	 mov	 rcx, QWORD PTR iter$21896[rsp]
  00276	e8 00 00 00 00	 call	 PyIter_Next
  0027b	48 89 44 24 60	 mov	 QWORD PTR key$21897[rsp], rax
$LN7@PyDict_Mer@2:
  00280	48 83 7c 24 60
	00		 cmp	 QWORD PTR key$21897[rsp], 0
  00286	0f 84 b3 00 00
	00		 je	 $LN5@PyDict_Mer@2

; 2040 :             if (!override && PyDict_GetItem(a, key) != NULL) {

  0028c	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR override$[rsp], 0
  00294	75 23		 jne	 SHORT $LN4@PyDict_Mer@2
  00296	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$21897[rsp]
  0029b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
  002a3	e8 00 00 00 00	 call	 PyDict_GetItem
  002a8	48 85 c0	 test	 rax, rax
  002ab	74 0c		 je	 SHORT $LN4@PyDict_Mer@2

; 2041 :                 Py_DECREF(key);

  002ad	48 8b 4c 24 60	 mov	 rcx, QWORD PTR key$21897[rsp]
  002b2	e8 00 00 00 00	 call	 _Py_DecRef

; 2042 :                 continue;

  002b7	eb b8		 jmp	 SHORT $LN6@PyDict_Mer@2
$LN4@PyDict_Mer@2:

; 2043 :             }
; 2044 :             value = PyObject_GetItem(b, key);

  002b9	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$21897[rsp]
  002be	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR b$[rsp]
  002c6	e8 00 00 00 00	 call	 PyObject_GetItem
  002cb	48 89 44 24 50	 mov	 QWORD PTR value$21898[rsp], rax

; 2045 :             if (value == NULL) {

  002d0	48 83 7c 24 50
	00		 cmp	 QWORD PTR value$21898[rsp], 0
  002d6	75 1b		 jne	 SHORT $LN3@PyDict_Mer@2

; 2046 :                 Py_DECREF(iter);

  002d8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR iter$21896[rsp]
  002dd	e8 00 00 00 00	 call	 _Py_DecRef

; 2047 :                 Py_DECREF(key);

  002e2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR key$21897[rsp]
  002e7	e8 00 00 00 00	 call	 _Py_DecRef

; 2048 :                 return -1;

  002ec	b8 ff ff ff ff	 mov	 eax, -1
  002f1	eb 69		 jmp	 SHORT $LN27@PyDict_Mer@2
$LN3@PyDict_Mer@2:

; 2049 :             }
; 2050 :             status = PyDict_SetItem(a, key, value);

  002f3	4c 8b 44 24 50	 mov	 r8, QWORD PTR value$21898[rsp]
  002f8	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$21897[rsp]
  002fd	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
  00305	e8 00 00 00 00	 call	 PyDict_SetItem
  0030a	89 44 24 68	 mov	 DWORD PTR status$21899[rsp], eax

; 2051 :             Py_DECREF(key);

  0030e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR key$21897[rsp]
  00313	e8 00 00 00 00	 call	 _Py_DecRef

; 2052 :             Py_DECREF(value);

  00318	48 8b 4c 24 50	 mov	 rcx, QWORD PTR value$21898[rsp]
  0031d	e8 00 00 00 00	 call	 _Py_DecRef

; 2053 :             if (status < 0) {

  00322	83 7c 24 68 00	 cmp	 DWORD PTR status$21899[rsp], 0
  00327	7d 11		 jge	 SHORT $LN2@PyDict_Mer@2

; 2054 :                 Py_DECREF(iter);

  00329	48 8b 4c 24 58	 mov	 rcx, QWORD PTR iter$21896[rsp]
  0032e	e8 00 00 00 00	 call	 _Py_DecRef

; 2055 :                 return -1;

  00333	b8 ff ff ff ff	 mov	 eax, -1
  00338	eb 22		 jmp	 SHORT $LN27@PyDict_Mer@2
$LN2@PyDict_Mer@2:

; 2056 :             }
; 2057 :         }

  0033a	e9 32 ff ff ff	 jmp	 $LN6@PyDict_Mer@2
$LN5@PyDict_Mer@2:

; 2058 :         Py_DECREF(iter);

  0033f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR iter$21896[rsp]
  00344	e8 00 00 00 00	 call	 _Py_DecRef

; 2059 :         if (PyErr_Occurred())

  00349	e8 00 00 00 00	 call	 PyErr_Occurred
  0034e	48 85 c0	 test	 rax, rax
  00351	74 07		 je	 SHORT $LN1@PyDict_Mer@2

; 2060 :             /* Iterator completed, via error */
; 2061 :             return -1;

  00353	b8 ff ff ff ff	 mov	 eax, -1
  00358	eb 02		 jmp	 SHORT $LN27@PyDict_Mer@2
$LN1@PyDict_Mer@2:
$LN10@PyDict_Mer@2:

; 2062 :     }
; 2063 :     return 0;

  0035a	33 c0		 xor	 eax, eax
$LN27@PyDict_Mer@2:

; 2064 : }

  0035c	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00363	c3		 ret	 0
PyDict_Merge ENDP
_TEXT	ENDS
PUBLIC	PyDict_Copy
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_copy DD imagerel dict_copy
	DD	imagerel dict_copy+24
	DD	imagerel $unwind$dict_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_copy DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_copy
_TEXT	SEGMENT
mp$ = 48
dict_copy PROC						; COMDAT

; 2068 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2069 :     return PyDict_Copy((PyObject*)mp);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mp$[rsp]
  0000e	e8 00 00 00 00	 call	 PyDict_Copy

; 2070 : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
dict_copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Copy DD imagerel $LN41
	DD	imagerel $LN41+1137
	DD	imagerel $unwind$PyDict_Copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Copy DD 020c01H
	DD	017010cH
xdata	ENDS
;	COMDAT ??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@
CONST	SEGMENT
??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@ DB 'PyDict_Copy', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyDict_Copy
_TEXT	SEGMENT
n$ = 48
i$ = 56
mp$ = 64
copy$ = 72
split_copy$21941 = 80
newvalues$21942 = 88
value$21964 = 96
g$21978 = 104
tv89 = 112
tv88 = 120
tv130 = 128
tv136 = 136
tv182 = 140
tv177 = 144
tv180 = 152
tv199 = 160
o$ = 192
PyDict_Copy PROC					; COMDAT

; 2074 : {

$LN41:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 2075 :     PyObject *copy;
; 2076 :     PyDictObject *mp;
; 2077 :     Py_ssize_t i, n;
; 2078 : 
; 2079 :     if (o == NULL || !PyDict_Check(o)) {

  0000c	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR o$[rsp], 0
  00015	74 1b		 je	 SHORT $LN19@PyDict_Cop
  00017	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  0001f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00023	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00029	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0002e	85 c0		 test	 eax, eax
  00030	75 18		 jne	 SHORT $LN20@PyDict_Cop
$LN19@PyDict_Cop:

; 2080 :         PyErr_BadInternalCall();

  00032	ba 20 08 00 00	 mov	 edx, 2080		; 00000820H
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0003e	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2081 :         return NULL;

  00043	33 c0		 xor	 eax, eax
  00045	e9 1f 04 00 00	 jmp	 $LN21@PyDict_Cop
$LN20@PyDict_Cop:

; 2082 :     }
; 2083 : 
; 2084 :     mp = (PyDictObject *)o;

  0004a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  00052	48 89 44 24 40	 mov	 QWORD PTR mp$[rsp], rax

; 2085 :     if (_PyDict_HasSplitTable(mp)) {

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  0005c	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00061	0f 84 bd 03 00
	00		 je	 $LN18@PyDict_Cop

; 2086 :         PyDictObject *split_copy;
; 2087 :         PyObject **newvalues = new_values(DK_SIZE(mp->ma_keys));

  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  0006c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00070	48 b9 ff ff ff
	ff ff ff ff 0f	 mov	 rcx, 1152921504606846975 ; 0fffffffffffffffH
  0007a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0007e	76 0b		 jbe	 SHORT $LN25@PyDict_Cop
  00080	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv89[rsp], 0
  00089	eb 51		 jmp	 SHORT $LN26@PyDict_Cop
$LN25@PyDict_Cop:
  0008b	e8 00 00 00 00	 call	 _Py_PXCTX
  00090	85 c0		 test	 eax, eax
  00092	74 20		 je	 SHORT $LN23@PyDict_Cop
  00094	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00099	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000a1	48 c1 e0 03	 shl	 rax, 3
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	e8 00 00 00 00	 call	 _PxMem_Malloc
  000ad	48 89 44 24 78	 mov	 QWORD PTR tv88[rsp], rax
  000b2	eb 1e		 jmp	 SHORT $LN24@PyDict_Cop
$LN23@PyDict_Cop:
  000b4	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  000b9	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000bd	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c1	48 c1 e0 03	 shl	 rax, 3
  000c5	48 8b c8	 mov	 rcx, rax
  000c8	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  000cd	48 89 44 24 78	 mov	 QWORD PTR tv88[rsp], rax
$LN24@PyDict_Cop:
  000d2	48 8b 44 24 78	 mov	 rax, QWORD PTR tv88[rsp]
  000d7	48 89 44 24 70	 mov	 QWORD PTR tv89[rsp], rax
$LN26@PyDict_Cop:
  000dc	48 8b 44 24 70	 mov	 rax, QWORD PTR tv89[rsp]
  000e1	48 89 44 24 58	 mov	 QWORD PTR newvalues$21942[rsp], rax

; 2088 :         if (newvalues == NULL)

  000e6	48 83 7c 24 58
	00		 cmp	 QWORD PTR newvalues$21942[rsp], 0
  000ec	75 0a		 jne	 SHORT $LN17@PyDict_Cop

; 2089 :             return PyErr_NoMemory();

  000ee	e8 00 00 00 00	 call	 PyErr_NoMemory
  000f3	e9 71 03 00 00	 jmp	 $LN21@PyDict_Cop
$LN17@PyDict_Cop:

; 2090 :         split_copy = PyObject_GC_New(PyDictObject, &PyDict_Type);

  000f8	e8 00 00 00 00	 call	 _Py_PXCTX
  000fd	85 c0		 test	 eax, eax
  000ff	74 16		 je	 SHORT $LN27@PyDict_Cop
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  00108	e8 00 00 00 00	 call	 _PxObject_New
  0010d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv130[rsp], rax
  00115	eb 14		 jmp	 SHORT $LN28@PyDict_Cop
$LN27@PyDict_Cop:
  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  0011e	e8 00 00 00 00	 call	 _PyObject_GC_New
  00123	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv130[rsp], rax
$LN28@PyDict_Cop:
  0012b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv130[rsp]
  00133	48 89 44 24 50	 mov	 QWORD PTR split_copy$21941[rsp], rax

; 2091 :         if (split_copy == NULL) {

  00138	48 83 7c 24 50
	00		 cmp	 QWORD PTR split_copy$21941[rsp], 0
  0013e	75 3c		 jne	 SHORT $LN16@PyDict_Cop

; 2092 :             free_values(newvalues);

  00140	e8 00 00 00 00	 call	 _Py_PXCTX
  00145	85 c0		 test	 eax, eax
  00147	74 17		 je	 SHORT $LN29@PyDict_Cop
  00149	48 8b 4c 24 58	 mov	 rcx, QWORD PTR newvalues$21942[rsp]
  0014e	e8 00 00 00 00	 call	 _PxMem_Free
  00153	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv136[rsp], 0
  0015e	eb 15		 jmp	 SHORT $LN30@PyDict_Cop
$LN29@PyDict_Cop:
  00160	48 8b 4c 24 58	 mov	 rcx, QWORD PTR newvalues$21942[rsp]
  00165	e8 00 00 00 00	 call	 _PyMem_DebugFree
  0016a	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv136[rsp], 0
$LN30@PyDict_Cop:

; 2093 :             return NULL;

  00175	33 c0		 xor	 eax, eax
  00177	e9 ed 02 00 00	 jmp	 $LN21@PyDict_Cop
$LN16@PyDict_Cop:

; 2094 :         }
; 2095 :         split_copy->ma_values = newvalues;

  0017c	48 8b 44 24 50	 mov	 rax, QWORD PTR split_copy$21941[rsp]
  00181	48 8b 4c 24 58	 mov	 rcx, QWORD PTR newvalues$21942[rsp]
  00186	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 2096 :         split_copy->ma_keys = mp->ma_keys;

  0018a	48 8b 44 24 50	 mov	 rax, QWORD PTR split_copy$21941[rsp]
  0018f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mp$[rsp]
  00194	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00198	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 2097 :         split_copy->ma_used = mp->ma_used;

  0019c	48 8b 44 24 50	 mov	 rax, QWORD PTR split_copy$21941[rsp]
  001a1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mp$[rsp]
  001a6	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  001aa	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 2098 :         DK_INCREF(mp->ma_keys);

  001ae	e8 00 00 00 00	 call	 _Py_PXCTX
  001b3	85 c0		 test	 eax, eax
  001b5	74 02		 je	 SHORT $LN31@PyDict_Cop
  001b7	eb 11		 jmp	 SHORT $LN32@PyDict_Cop
$LN31@PyDict_Cop:
  001b9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  001c0	48 ff c0	 inc	 rax
  001c3	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN32@PyDict_Cop:
  001ca	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  001cf	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001d3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001d6	48 ff c0	 inc	 rax
  001d9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mp$[rsp]
  001de	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  001e2	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2099 :         for (i = 0, n = DK_SIZE(mp->ma_keys); i < n; i++) {

  001e5	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  001ee	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  001f3	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001f7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001fb	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax
  00200	eb 0d		 jmp	 SHORT $LN15@PyDict_Cop
$LN14@PyDict_Cop:
  00202	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00207	48 ff c0	 inc	 rax
  0020a	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN15@PyDict_Cop:
  0020f	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00214	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  00219	7d 48		 jge	 SHORT $LN13@PyDict_Cop

; 2100 :             PyObject *value = mp->ma_values[i];

  0021b	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00220	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00224	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00229	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0022d	48 89 44 24 60	 mov	 QWORD PTR value$21964[rsp], rax
$LN12@PyDict_Cop:

; 2101 :             Py_XINCREF(value);

  00232	48 83 7c 24 60
	00		 cmp	 QWORD PTR value$21964[rsp], 0
  00238	74 0a		 je	 SHORT $LN9@PyDict_Cop
  0023a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$21964[rsp]
  0023f	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@PyDict_Cop:
  00244	33 c0		 xor	 eax, eax
  00246	85 c0		 test	 eax, eax
  00248	75 e8		 jne	 SHORT $LN12@PyDict_Cop

; 2102 :             split_copy->ma_values[i] = value;

  0024a	48 8b 44 24 50	 mov	 rax, QWORD PTR split_copy$21941[rsp]
  0024f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00253	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00258	48 8b 54 24 60	 mov	 rdx, QWORD PTR value$21964[rsp]
  0025d	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 2103 :         }

  00261	eb 9f		 jmp	 SHORT $LN14@PyDict_Cop
$LN13@PyDict_Cop:

; 2104 :         if (_PyObject_GC_IS_TRACKED(mp))

  00263	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0026b	4c 8b 4c 24 40	 mov	 r9, QWORD PTR mp$[rsp]
  00270	41 b8 38 08 00
	00		 mov	 r8d, 2104		; 00000838H
  00276	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0027d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@
  00284	e8 00 00 00 00	 call	 _PyParallel_Guard
  00289	85 c0		 test	 eax, eax
  0028b	74 0d		 je	 SHORT $LN37@PyDict_Cop
  0028d	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv182[rsp], 0
  00298	eb 7e		 jmp	 SHORT $LN38@PyDict_Cop
$LN37@PyDict_Cop:
  0029a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002a2	4c 8b 4c 24 40	 mov	 r9, QWORD PTR mp$[rsp]
  002a7	41 b8 38 08 00
	00		 mov	 r8d, 2104		; 00000838H
  002ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@
  002bb	e8 00 00 00 00	 call	 _PyParallel_Guard
  002c0	85 c0		 test	 eax, eax
  002c2	74 0e		 je	 SHORT $LN33@PyDict_Cop
  002c4	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv177[rsp], 0
  002d0	eb 11		 jmp	 SHORT $LN34@PyDict_Cop
$LN33@PyDict_Cop:
  002d2	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  002d7	48 83 e8 18	 sub	 rax, 24
  002db	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv177[rsp], rax
$LN34@PyDict_Cop:
  002e3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv177[rsp]
  002eb	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  002f0	74 0d		 je	 SHORT $LN35@PyDict_Cop
  002f2	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv180[rsp], 1
  002fd	eb 0b		 jmp	 SHORT $LN36@PyDict_Cop
$LN35@PyDict_Cop:
  002ff	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv180[rsp], 0
$LN36@PyDict_Cop:
  0030a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv180[rsp]
  00311	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv182[rsp], eax
$LN38@PyDict_Cop:
  00318	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR tv182[rsp], 0
  00320	0f 84 f7 00 00
	00		 je	 $LN8@PyDict_Cop

; 2105 :             _PyObject_GC_TRACK(split_copy);

  00326	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0032e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR split_copy$21941[rsp]
  00333	41 b8 39 08 00
	00		 mov	 r8d, 2105		; 00000839H
  00339	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00340	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@
  00347	e8 00 00 00 00	 call	 _PyParallel_Guard
  0034c	85 c0		 test	 eax, eax
  0034e	0f 85 c9 00 00
	00		 jne	 $LN7@PyDict_Cop
$LN6@PyDict_Cop:
  00354	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0035c	4c 8b 4c 24 50	 mov	 r9, QWORD PTR split_copy$21941[rsp]
  00361	41 b8 39 08 00
	00		 mov	 r8d, 2105		; 00000839H
  00367	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0036e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DHCOBJKO@PyDict_Copy?$AA@
  00375	e8 00 00 00 00	 call	 _PyParallel_Guard
  0037a	85 c0		 test	 eax, eax
  0037c	74 0e		 je	 SHORT $LN39@PyDict_Cop
  0037e	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv199[rsp], 0
  0038a	eb 11		 jmp	 SHORT $LN40@PyDict_Cop
$LN39@PyDict_Cop:
  0038c	48 8b 44 24 50	 mov	 rax, QWORD PTR split_copy$21941[rsp]
  00391	48 83 e8 18	 sub	 rax, 24
  00395	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv199[rsp], rax
$LN40@PyDict_Cop:
  0039d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv199[rsp]
  003a5	48 89 44 24 68	 mov	 QWORD PTR g$21978[rsp], rax
  003aa	48 8b 44 24 68	 mov	 rax, QWORD PTR g$21978[rsp]
  003af	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  003b4	74 0c		 je	 SHORT $LN3@PyDict_Cop
  003b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  003bd	e8 00 00 00 00	 call	 Py_FatalError
$LN3@PyDict_Cop:
  003c2	48 8b 44 24 68	 mov	 rax, QWORD PTR g$21978[rsp]
  003c7	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  003cf	48 8b 44 24 68	 mov	 rax, QWORD PTR g$21978[rsp]
  003d4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  003db	48 89 08	 mov	 QWORD PTR [rax], rcx
  003de	48 8b 44 24 68	 mov	 rax, QWORD PTR g$21978[rsp]
  003e3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  003ea	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  003ee	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  003f2	48 8b 44 24 68	 mov	 rax, QWORD PTR g$21978[rsp]
  003f7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003fb	48 8b 4c 24 68	 mov	 rcx, QWORD PTR g$21978[rsp]
  00400	48 89 08	 mov	 QWORD PTR [rax], rcx
  00403	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0040a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR g$21978[rsp]
  0040f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00413	33 c0		 xor	 eax, eax
  00415	85 c0		 test	 eax, eax
  00417	0f 85 37 ff ff
	ff		 jne	 $LN6@PyDict_Cop
$LN7@PyDict_Cop:
$LN8@PyDict_Cop:

; 2106 :         return (PyObject *)split_copy;

  0041d	48 8b 44 24 50	 mov	 rax, QWORD PTR split_copy$21941[rsp]
  00422	eb 45		 jmp	 SHORT $LN21@PyDict_Cop
$LN18@PyDict_Cop:

; 2107 :     }
; 2108 :     copy = PyDict_New();

  00424	e8 00 00 00 00	 call	 PyDict_New
  00429	48 89 44 24 48	 mov	 QWORD PTR copy$[rsp], rax

; 2109 :     if (copy == NULL)

  0042e	48 83 7c 24 48
	00		 cmp	 QWORD PTR copy$[rsp], 0
  00434	75 04		 jne	 SHORT $LN2@PyDict_Cop

; 2110 :         return NULL;

  00436	33 c0		 xor	 eax, eax
  00438	eb 2f		 jmp	 SHORT $LN21@PyDict_Cop
$LN2@PyDict_Cop:

; 2111 :     if (PyDict_Merge(copy, o, 1) == 0)

  0043a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00440	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR o$[rsp]
  00448	48 8b 4c 24 48	 mov	 rcx, QWORD PTR copy$[rsp]
  0044d	e8 00 00 00 00	 call	 PyDict_Merge
  00452	85 c0		 test	 eax, eax
  00454	75 07		 jne	 SHORT $LN1@PyDict_Cop

; 2112 :         return copy;

  00456	48 8b 44 24 48	 mov	 rax, QWORD PTR copy$[rsp]
  0045b	eb 0c		 jmp	 SHORT $LN21@PyDict_Cop
$LN1@PyDict_Cop:

; 2113 :     Py_DECREF(copy);

  0045d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR copy$[rsp]
  00462	e8 00 00 00 00	 call	 _Py_DecRef

; 2114 :     return NULL;

  00467	33 c0		 xor	 eax, eax
$LN21@PyDict_Cop:

; 2115 : }

  00469	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00470	c3		 ret	 0
PyDict_Copy ENDP
_TEXT	ENDS
PUBLIC	PyDict_Size
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Size DD imagerel $LN5
	DD	imagerel $LN5+81
	DD	imagerel $unwind$PyDict_Size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Size DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_Size
_TEXT	SEGMENT
mp$ = 48
PyDict_Size PROC					; COMDAT

; 2119 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2120 :     if (mp == NULL || !PyDict_Check(mp)) {

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR mp$[rsp], 0
  0000f	74 18		 je	 SHORT $LN1@PyDict_Siz
  00011	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00016	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00020	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00025	85 c0		 test	 eax, eax
  00027	75 1a		 jne	 SHORT $LN2@PyDict_Siz
$LN1@PyDict_Siz:

; 2121 :         PyErr_BadInternalCall();

  00029	ba 49 08 00 00	 mov	 edx, 2121		; 00000849H
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00035	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2122 :         return -1;

  0003a	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00041	eb 09		 jmp	 SHORT $LN3@PyDict_Siz
$LN2@PyDict_Siz:

; 2123 :     }
; 2124 : 
; 2125 :     return ((PyDictObject *)mp)->ma_used;

  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
$LN3@PyDict_Siz:

; 2126 : }

  0004c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00050	c3		 ret	 0
PyDict_Size ENDP
_TEXT	ENDS
PUBLIC	PyDict_Keys
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Keys DD imagerel $LN5
	DD	imagerel $LN5+77
	DD	imagerel $unwind$PyDict_Keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Keys DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_Keys
_TEXT	SEGMENT
mp$ = 48
PyDict_Keys PROC					; COMDAT

; 2130 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2131 :     if (mp == NULL || !PyDict_Check(mp)) {

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR mp$[rsp], 0
  0000f	74 18		 je	 SHORT $LN1@PyDict_Key
  00011	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00016	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00020	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00025	85 c0		 test	 eax, eax
  00027	75 15		 jne	 SHORT $LN2@PyDict_Key
$LN1@PyDict_Key:

; 2132 :         PyErr_BadInternalCall();

  00029	ba 54 08 00 00	 mov	 edx, 2132		; 00000854H
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00035	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2133 :         return NULL;

  0003a	33 c0		 xor	 eax, eax
  0003c	eb 0a		 jmp	 SHORT $LN3@PyDict_Key
$LN2@PyDict_Key:

; 2134 :     }
; 2135 : 
; 2136 :     return dict_keys((PyDictObject *)mp);

  0003e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mp$[rsp]
  00043	e8 00 00 00 00	 call	 dict_keys
$LN3@PyDict_Key:

; 2137 : }

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
PyDict_Keys ENDP
_TEXT	ENDS
PUBLIC	??_C@_1O@DHAPMCFA@?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_keys DD imagerel dict_keys
	DD	imagerel dict_keys+397
	DD	imagerel $unwind$dict_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_keys DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_1O@DHAPMCFA@?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1O@DHAPMCFA@?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AA?$AA@ DB 'j', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'n', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dict_keys
_TEXT	SEGMENT
v$ = 32
n$ = 40
i$ = 48
offset$ = 56
size$ = 64
value_ptr$ = 72
ep$ = 80
j$ = 88
key$21566 = 96
mp$ = 128
dict_keys PROC						; COMDAT

; 1595 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H
$again$21551:

; 1596 :     register PyObject *v;
; 1597 :     register Py_ssize_t i, j;
; 1598 :     PyDictKeyEntry *ep;
; 1599 :     Py_ssize_t size, n, offset;
; 1600 :     PyObject **value_ptr;
; 1601 : 
; 1602 :   again:
; 1603 :     n = mp->ma_used;

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00011	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00015	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 1604 :     v = PyList_New(n);

  0001a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR n$[rsp]
  0001f	e8 00 00 00 00	 call	 PyList_New
  00024	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1605 :     if (v == NULL)

  00029	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0002f	75 07		 jne	 SHORT $LN8@dict_keys

; 1606 :         return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	e9 50 01 00 00	 jmp	 $LN9@dict_keys
$LN8@dict_keys:

; 1607 :     if (n != mp->ma_used) {

  00038	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00040	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00044	48 39 44 24 28	 cmp	 QWORD PTR n$[rsp], rax
  00049	74 0c		 je	 SHORT $LN7@dict_keys

; 1608 :         /* Durnit.  The allocations caused the dict to resize.
; 1609 :          * Just start over, this shouldn't normally happen.
; 1610 :          */
; 1611 :         Py_DECREF(v);

  0004b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00050	e8 00 00 00 00	 call	 _Py_DecRef

; 1612 :         goto again;

  00055	eb b2		 jmp	 SHORT $again$21551
$LN7@dict_keys:

; 1613 :     }
; 1614 :     ep = &mp->ma_keys->dk_entries[0];

  00057	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  0005f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00063	48 83 c0 20	 add	 rax, 32			; 00000020H
  00067	48 89 44 24 50	 mov	 QWORD PTR ep$[rsp], rax

; 1615 :     size = DK_SIZE(mp->ma_keys);

  0006c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00074	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00078	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0007c	48 89 44 24 40	 mov	 QWORD PTR size$[rsp], rax

; 1616 :     if (mp->ma_values) {

  00081	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00089	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0008e	74 1c		 je	 SHORT $LN6@dict_keys

; 1617 :         value_ptr = mp->ma_values;

  00090	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00098	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0009c	48 89 44 24 48	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1618 :         offset = sizeof(PyObject *);

  000a1	48 c7 44 24 38
	08 00 00 00	 mov	 QWORD PTR offset$[rsp], 8

; 1619 :     }
; 1620 :     else {

  000aa	eb 17		 jmp	 SHORT $LN5@dict_keys
$LN6@dict_keys:

; 1621 :         value_ptr = &ep[0].me_value;

  000ac	48 8b 44 24 50	 mov	 rax, QWORD PTR ep$[rsp]
  000b1	48 83 c0 10	 add	 rax, 16
  000b5	48 89 44 24 48	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1622 :         offset = sizeof(PyDictKeyEntry);

  000ba	48 c7 44 24 38
	18 00 00 00	 mov	 QWORD PTR offset$[rsp], 24
$LN5@dict_keys:

; 1623 :     }
; 1624 :     for (i = 0, j = 0; i < size; i++) {

  000c3	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000cc	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  000d5	eb 0d		 jmp	 SHORT $LN4@dict_keys
$LN3@dict_keys:
  000d7	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  000dc	48 ff c0	 inc	 rax
  000df	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN4@dict_keys:
  000e4	48 8b 44 24 40	 mov	 rax, QWORD PTR size$[rsp]
  000e9	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  000ee	7d 6b		 jge	 SHORT $LN2@dict_keys

; 1625 :         if (*value_ptr != NULL) {

  000f0	48 8b 44 24 48	 mov	 rax, QWORD PTR value_ptr$[rsp]
  000f5	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000f9	74 46		 je	 SHORT $LN1@dict_keys

; 1626 :             PyObject *key = ep[i].me_key;

  000fb	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00100	48 6b c0 18	 imul	 rax, 24
  00104	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ep$[rsp]
  00109	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  0010e	48 89 44 24 60	 mov	 QWORD PTR key$21566[rsp], rax

; 1627 :             Py_INCREF(key);

  00113	48 8b 4c 24 60	 mov	 rcx, QWORD PTR key$21566[rsp]
  00118	e8 00 00 00 00	 call	 _Py_IncRef

; 1628 :             PyList_SET_ITEM(v, j, key);

  0011d	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  00122	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00126	48 8b 4c 24 58	 mov	 rcx, QWORD PTR j$[rsp]
  0012b	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$21566[rsp]
  00130	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 1629 :             j++;

  00134	48 8b 44 24 58	 mov	 rax, QWORD PTR j$[rsp]
  00139	48 ff c0	 inc	 rax
  0013c	48 89 44 24 58	 mov	 QWORD PTR j$[rsp], rax
$LN1@dict_keys:

; 1630 :         }
; 1631 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);

  00141	48 8b 44 24 38	 mov	 rax, QWORD PTR offset$[rsp]
  00146	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value_ptr$[rsp]
  0014b	48 03 c8	 add	 rcx, rax
  0014e	48 8b c1	 mov	 rax, rcx
  00151	48 89 44 24 48	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1632 :     }

  00156	e9 7c ff ff ff	 jmp	 $LN3@dict_keys
$LN2@dict_keys:

; 1633 :     assert(j == n);

  0015b	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  00160	48 39 44 24 58	 cmp	 QWORD PTR j$[rsp], rax
  00165	74 1c		 je	 SHORT $LN11@dict_keys
  00167	41 b8 61 06 00
	00		 mov	 r8d, 1633		; 00000661H
  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@DHAPMCFA@?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AA?$AA@
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00181	33 c0		 xor	 eax, eax
$LN11@dict_keys:

; 1634 :     return v;

  00183	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN9@dict_keys:

; 1635 : }

  00188	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0018c	c3		 ret	 0
dict_keys ENDP
_TEXT	ENDS
PUBLIC	PyDict_Values
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Values DD imagerel $LN5
	DD	imagerel $LN5+77
	DD	imagerel $unwind$PyDict_Values
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Values DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_Values
_TEXT	SEGMENT
mp$ = 48
PyDict_Values PROC					; COMDAT

; 2141 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2142 :     if (mp == NULL || !PyDict_Check(mp)) {

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR mp$[rsp], 0
  0000f	74 18		 je	 SHORT $LN1@PyDict_Val
  00011	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00016	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00020	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00025	85 c0		 test	 eax, eax
  00027	75 15		 jne	 SHORT $LN2@PyDict_Val
$LN1@PyDict_Val:

; 2143 :         PyErr_BadInternalCall();

  00029	ba 5f 08 00 00	 mov	 edx, 2143		; 0000085fH
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00035	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2144 :         return NULL;

  0003a	33 c0		 xor	 eax, eax
  0003c	eb 0a		 jmp	 SHORT $LN3@PyDict_Val
$LN2@PyDict_Val:

; 2145 :     }
; 2146 : 
; 2147 :     return dict_values((PyDictObject *)mp);

  0003e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mp$[rsp]
  00043	e8 00 00 00 00	 call	 dict_values
$LN3@PyDict_Val:

; 2148 : }

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
PyDict_Values ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_values DD imagerel dict_values
	DD	imagerel dict_values+348
	DD	imagerel $unwind$dict_values
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_values DD 010901H
	DD	0c209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_values
_TEXT	SEGMENT
v$ = 32
n$ = 40
i$ = 48
offset$ = 56
size$ = 64
value_ptr$ = 72
j$ = 80
value$21597 = 88
mp$ = 112
dict_values PROC					; COMDAT

; 1639 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$again$21584:

; 1640 :     register PyObject *v;
; 1641 :     register Py_ssize_t i, j;
; 1642 :     Py_ssize_t size, n, offset;
; 1643 :     PyObject **value_ptr;
; 1644 : 
; 1645 :   again:
; 1646 :     n = mp->ma_used;

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 1647 :     v = PyList_New(n);

  00017	48 8b 4c 24 28	 mov	 rcx, QWORD PTR n$[rsp]
  0001c	e8 00 00 00 00	 call	 PyList_New
  00021	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1648 :     if (v == NULL)

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0002c	75 07		 jne	 SHORT $LN8@dict_value

; 1649 :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	e9 22 01 00 00	 jmp	 $LN9@dict_value
$LN8@dict_value:

; 1650 :     if (n != mp->ma_used) {

  00035	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  0003a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0003e	48 39 44 24 28	 cmp	 QWORD PTR n$[rsp], rax
  00043	74 0c		 je	 SHORT $LN7@dict_value

; 1651 :         /* Durnit.  The allocations caused the dict to resize.
; 1652 :          * Just start over, this shouldn't normally happen.
; 1653 :          */
; 1654 :         Py_DECREF(v);

  00045	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0004a	e8 00 00 00 00	 call	 _Py_DecRef

; 1655 :         goto again;

  0004f	eb b8		 jmp	 SHORT $again$21584
$LN7@dict_value:

; 1656 :     }
; 1657 :     size = DK_SIZE(mp->ma_keys);

  00051	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  00056	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0005a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005e	48 89 44 24 40	 mov	 QWORD PTR size$[rsp], rax

; 1658 :     if (mp->ma_values) {

  00063	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  00068	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0006d	74 19		 je	 SHORT $LN6@dict_value

; 1659 :         value_ptr = mp->ma_values;

  0006f	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  00074	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00078	48 89 44 24 48	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1660 :         offset = sizeof(PyObject *);

  0007d	48 c7 44 24 38
	08 00 00 00	 mov	 QWORD PTR offset$[rsp], 8

; 1661 :     }
; 1662 :     else {

  00086	eb 1b		 jmp	 SHORT $LN5@dict_value
$LN6@dict_value:

; 1663 :         value_ptr = &mp->ma_keys->dk_entries[0].me_value;

  00088	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  0008d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00091	48 83 c0 30	 add	 rax, 48			; 00000030H
  00095	48 89 44 24 48	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1664 :         offset = sizeof(PyDictKeyEntry);

  0009a	48 c7 44 24 38
	18 00 00 00	 mov	 QWORD PTR offset$[rsp], 24
$LN5@dict_value:

; 1665 :     }
; 1666 :     for (i = 0, j = 0; i < size; i++) {

  000a3	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000ac	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  000b5	eb 0d		 jmp	 SHORT $LN4@dict_value
$LN3@dict_value:
  000b7	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  000bc	48 ff c0	 inc	 rax
  000bf	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN4@dict_value:
  000c4	48 8b 44 24 40	 mov	 rax, QWORD PTR size$[rsp]
  000c9	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  000ce	7d 5a		 jge	 SHORT $LN2@dict_value

; 1667 :         PyObject *value = *value_ptr;

  000d0	48 8b 44 24 48	 mov	 rax, QWORD PTR value_ptr$[rsp]
  000d5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d8	48 89 44 24 58	 mov	 QWORD PTR value$21597[rsp], rax

; 1668 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);

  000dd	48 8b 44 24 38	 mov	 rax, QWORD PTR offset$[rsp]
  000e2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value_ptr$[rsp]
  000e7	48 03 c8	 add	 rcx, rax
  000ea	48 8b c1	 mov	 rax, rcx
  000ed	48 89 44 24 48	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1669 :         if (value != NULL) {

  000f2	48 83 7c 24 58
	00		 cmp	 QWORD PTR value$21597[rsp], 0
  000f8	74 2e		 je	 SHORT $LN1@dict_value

; 1670 :             Py_INCREF(value);

  000fa	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$21597[rsp]
  000ff	e8 00 00 00 00	 call	 _Py_IncRef

; 1671 :             PyList_SET_ITEM(v, j, value);

  00104	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  00109	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0010d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR j$[rsp]
  00112	48 8b 54 24 58	 mov	 rdx, QWORD PTR value$21597[rsp]
  00117	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 1672 :             j++;

  0011b	48 8b 44 24 50	 mov	 rax, QWORD PTR j$[rsp]
  00120	48 ff c0	 inc	 rax
  00123	48 89 44 24 50	 mov	 QWORD PTR j$[rsp], rax
$LN1@dict_value:

; 1673 :         }
; 1674 :     }

  00128	eb 8d		 jmp	 SHORT $LN3@dict_value
$LN2@dict_value:

; 1675 :     assert(j == n);

  0012a	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  0012f	48 39 44 24 50	 cmp	 QWORD PTR j$[rsp], rax
  00134	74 1c		 je	 SHORT $LN11@dict_value
  00136	41 b8 8b 06 00
	00		 mov	 r8d, 1675		; 0000068bH
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@DHAPMCFA@?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AA?$AA@
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00150	33 c0		 xor	 eax, eax
$LN11@dict_value:

; 1676 :     return v;

  00152	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN9@dict_value:

; 1677 : }

  00157	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0015b	c3		 ret	 0
dict_values ENDP
_TEXT	ENDS
PUBLIC	PyDict_Items
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Items DD imagerel $LN5
	DD	imagerel $LN5+77
	DD	imagerel $unwind$PyDict_Items
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Items DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_Items
_TEXT	SEGMENT
mp$ = 48
PyDict_Items PROC					; COMDAT

; 2152 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2153 :     if (mp == NULL || !PyDict_Check(mp)) {

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR mp$[rsp], 0
  0000f	74 18		 je	 SHORT $LN1@PyDict_Ite
  00011	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00016	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00020	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00025	85 c0		 test	 eax, eax
  00027	75 15		 jne	 SHORT $LN2@PyDict_Ite
$LN1@PyDict_Ite:

; 2154 :         PyErr_BadInternalCall();

  00029	ba 6a 08 00 00	 mov	 edx, 2154		; 0000086aH
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00035	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 2155 :         return NULL;

  0003a	33 c0		 xor	 eax, eax
  0003c	eb 0a		 jmp	 SHORT $LN3@PyDict_Ite
$LN2@PyDict_Ite:

; 2156 :     }
; 2157 : 
; 2158 :     return dict_items((PyDictObject *)mp);

  0003e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mp$[rsp]
  00043	e8 00 00 00 00	 call	 dict_items
$LN3@PyDict_Ite:

; 2159 : }

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
PyDict_Items ENDP
_TEXT	ENDS
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_items DD imagerel dict_items
	DD	imagerel dict_items+559
	DD	imagerel $unwind$dict_items
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_items DD 020c01H
	DD	011010cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_items
_TEXT	SEGMENT
v$ = 32
n$ = 40
i$ = 48
key$ = 56
offset$ = 64
size$ = 72
value_ptr$ = 80
ep$ = 88
item$ = 96
j$ = 104
value$21640 = 112
mp$ = 144
dict_items PROC						; COMDAT

; 1681 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$again$21619:

; 1682 :     register PyObject *v;
; 1683 :     register Py_ssize_t i, j, n;
; 1684 :     Py_ssize_t size, offset;
; 1685 :     PyObject *item, *key;
; 1686 :     PyDictKeyEntry *ep;
; 1687 :     PyObject **value_ptr;
; 1688 : 
; 1689 :     /* Preallocate the list of tuples, to avoid allocations during
; 1690 :      * the loop over the items, which could trigger GC, which
; 1691 :      * could resize the dict. :-(
; 1692 :      */
; 1693 :   again:
; 1694 :     n = mp->ma_used;

  0000c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00014	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00018	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 1695 :     v = PyList_New(n);

  0001d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR n$[rsp]
  00022	e8 00 00 00 00	 call	 PyList_New
  00027	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1696 :     if (v == NULL)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00032	75 07		 jne	 SHORT $LN12@dict_items

; 1697 :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	e9 ec 01 00 00	 jmp	 $LN13@dict_items
$LN12@dict_items:

; 1698 :     for (i = 0; i < n; i++) {

  0003b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00044	eb 0d		 jmp	 SHORT $LN11@dict_items
$LN10@dict_items:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  0004b	48 ff c0	 inc	 rax
  0004e	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN11@dict_items:
  00053	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  00058	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  0005d	7d 41		 jge	 SHORT $LN9@dict_items

; 1699 :         item = PyTuple_New(2);

  0005f	b9 02 00 00 00	 mov	 ecx, 2
  00064	e8 00 00 00 00	 call	 PyTuple_New
  00069	48 89 44 24 60	 mov	 QWORD PTR item$[rsp], rax

; 1700 :         if (item == NULL) {

  0006e	48 83 7c 24 60
	00		 cmp	 QWORD PTR item$[rsp], 0
  00074	75 11		 jne	 SHORT $LN8@dict_items

; 1701 :             Py_DECREF(v);

  00076	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0007b	e8 00 00 00 00	 call	 _Py_DecRef

; 1702 :             return NULL;

  00080	33 c0		 xor	 eax, eax
  00082	e9 a0 01 00 00	 jmp	 $LN13@dict_items
$LN8@dict_items:

; 1703 :         }
; 1704 :         PyList_SET_ITEM(v, i, item);

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  0008c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00090	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00095	48 8b 54 24 60	 mov	 rdx, QWORD PTR item$[rsp]
  0009a	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 1705 :     }

  0009e	eb a6		 jmp	 SHORT $LN10@dict_items
$LN9@dict_items:

; 1706 :     if (n != mp->ma_used) {

  000a0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  000a8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ac	48 39 44 24 28	 cmp	 QWORD PTR n$[rsp], rax
  000b1	74 0f		 je	 SHORT $LN7@dict_items

; 1707 :         /* Durnit.  The allocations caused the dict to resize.
; 1708 :          * Just start over, this shouldn't normally happen.
; 1709 :          */
; 1710 :         Py_DECREF(v);

  000b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000b8	e8 00 00 00 00	 call	 _Py_DecRef

; 1711 :         goto again;

  000bd	e9 4a ff ff ff	 jmp	 $again$21619
$LN7@dict_items:

; 1712 :     }
; 1713 :     /* Nothing we do below makes any function calls. */
; 1714 :     ep = mp->ma_keys->dk_entries;

  000c2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 20	 add	 rax, 32			; 00000020H
  000d2	48 89 44 24 58	 mov	 QWORD PTR ep$[rsp], rax

; 1715 :     size = DK_SIZE(mp->ma_keys);

  000d7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  000df	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000e3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e7	48 89 44 24 48	 mov	 QWORD PTR size$[rsp], rax

; 1716 :     if (mp->ma_values) {

  000ec	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  000f4	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  000f9	74 1c		 je	 SHORT $LN6@dict_items

; 1717 :         value_ptr = mp->ma_values;

  000fb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00103	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00107	48 89 44 24 50	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1718 :         offset = sizeof(PyObject *);

  0010c	48 c7 44 24 40
	08 00 00 00	 mov	 QWORD PTR offset$[rsp], 8

; 1719 :     }
; 1720 :     else {

  00115	eb 17		 jmp	 SHORT $LN5@dict_items
$LN6@dict_items:

; 1721 :         value_ptr = &ep[0].me_value;

  00117	48 8b 44 24 58	 mov	 rax, QWORD PTR ep$[rsp]
  0011c	48 83 c0 10	 add	 rax, 16
  00120	48 89 44 24 50	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1722 :         offset = sizeof(PyDictKeyEntry);

  00125	48 c7 44 24 40
	18 00 00 00	 mov	 QWORD PTR offset$[rsp], 24
$LN5@dict_items:

; 1723 :     }
; 1724 :     for (i = 0, j = 0; i < size; i++) {

  0012e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00137	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  00140	eb 0d		 jmp	 SHORT $LN4@dict_items
$LN3@dict_items:
  00142	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00147	48 ff c0	 inc	 rax
  0014a	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN4@dict_items:
  0014f	48 8b 44 24 48	 mov	 rax, QWORD PTR size$[rsp]
  00154	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  00159	0f 8d 9b 00 00
	00		 jge	 $LN2@dict_items

; 1725 :         PyObject *value = *value_ptr;

  0015f	48 8b 44 24 50	 mov	 rax, QWORD PTR value_ptr$[rsp]
  00164	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00167	48 89 44 24 70	 mov	 QWORD PTR value$21640[rsp], rax

; 1726 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);

  0016c	48 8b 44 24 40	 mov	 rax, QWORD PTR offset$[rsp]
  00171	48 8b 4c 24 50	 mov	 rcx, QWORD PTR value_ptr$[rsp]
  00176	48 03 c8	 add	 rcx, rax
  00179	48 8b c1	 mov	 rax, rcx
  0017c	48 89 44 24 50	 mov	 QWORD PTR value_ptr$[rsp], rax

; 1727 :         if (value != NULL) {

  00181	48 83 7c 24 70
	00		 cmp	 QWORD PTR value$21640[rsp], 0
  00187	74 6c		 je	 SHORT $LN1@dict_items

; 1728 :             key = ep[i].me_key;

  00189	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  0018e	48 6b c0 18	 imul	 rax, 24
  00192	48 8b 4c 24 58	 mov	 rcx, QWORD PTR ep$[rsp]
  00197	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  0019c	48 89 44 24 38	 mov	 QWORD PTR key$[rsp], rax

; 1729 :             item = PyList_GET_ITEM(v, j);

  001a1	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  001a6	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001aa	48 8b 4c 24 68	 mov	 rcx, QWORD PTR j$[rsp]
  001af	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  001b3	48 89 44 24 60	 mov	 QWORD PTR item$[rsp], rax

; 1730 :             Py_INCREF(key);

  001b8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  001bd	e8 00 00 00 00	 call	 _Py_IncRef

; 1731 :             PyTuple_SET_ITEM(item, 0, key);

  001c2	48 8b 44 24 60	 mov	 rax, QWORD PTR item$[rsp]
  001c7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  001cc	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1732 :             Py_INCREF(value);

  001d0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR value$21640[rsp]
  001d5	e8 00 00 00 00	 call	 _Py_IncRef

; 1733 :             PyTuple_SET_ITEM(item, 1, value);

  001da	48 8b 44 24 60	 mov	 rax, QWORD PTR item$[rsp]
  001df	48 8b 4c 24 70	 mov	 rcx, QWORD PTR value$21640[rsp]
  001e4	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 1734 :             j++;

  001e8	48 8b 44 24 68	 mov	 rax, QWORD PTR j$[rsp]
  001ed	48 ff c0	 inc	 rax
  001f0	48 89 44 24 68	 mov	 QWORD PTR j$[rsp], rax
$LN1@dict_items:

; 1735 :         }
; 1736 :     }

  001f5	e9 48 ff ff ff	 jmp	 $LN3@dict_items
$LN2@dict_items:

; 1737 :     assert(j == n);

  001fa	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  001ff	48 39 44 24 68	 cmp	 QWORD PTR j$[rsp], rax
  00204	74 1c		 je	 SHORT $LN15@dict_items
  00206	41 b8 c9 06 00
	00		 mov	 r8d, 1737		; 000006c9H
  0020c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00213	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@DHAPMCFA@?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AA?$AA@
  0021a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00220	33 c0		 xor	 eax, eax
$LN15@dict_items:

; 1738 :     return v;

  00222	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN13@dict_items:

; 1739 : }

  00227	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0022e	c3		 ret	 0
dict_items ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_richcompare DD imagerel dict_richcompare
	DD	imagerel dict_richcompare+233
	DD	imagerel $unwind$dict_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_richcompare DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_richcompare
_TEXT	SEGMENT
res$ = 32
cmp$ = 40
tv79 = 44
tv81 = 48
v$ = 80
w$ = 88
op$ = 96
dict_richcompare PROC					; COMDAT

; 2210 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2211 :     int cmp;
; 2212 :     PyObject *res;
; 2213 : 
; 2214 :     if (!PyDict_Check(v) || !PyDict_Check(w)) {

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR v$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00022	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00027	85 c0		 test	 eax, eax
  00029	74 18		 je	 SHORT $LN6@dict_richc
  0002b	48 8b 44 24 58	 mov	 rax, QWORD PTR w$[rsp]
  00030	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00034	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003a	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0003f	85 c0		 test	 eax, eax
  00041	75 11		 jne	 SHORT $LN7@dict_richc
$LN6@dict_richc:

; 2215 :         res = Py_NotImplemented;

  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0004a	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
  0004f	e9 81 00 00 00	 jmp	 $LN5@dict_richc
$LN7@dict_richc:

; 2216 :     }
; 2217 :     else if (op == Py_EQ || op == Py_NE) {

  00054	83 7c 24 60 02	 cmp	 DWORD PTR op$[rsp], 2
  00059	74 07		 je	 SHORT $LN3@dict_richc
  0005b	83 7c 24 60 03	 cmp	 DWORD PTR op$[rsp], 3
  00060	75 67		 jne	 SHORT $LN4@dict_richc
$LN3@dict_richc:

; 2218 :         cmp = dict_equal((PyDictObject *)v, (PyDictObject *)w);

  00062	48 8b 54 24 58	 mov	 rdx, QWORD PTR w$[rsp]
  00067	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  0006c	e8 00 00 00 00	 call	 dict_equal
  00071	89 44 24 28	 mov	 DWORD PTR cmp$[rsp], eax

; 2219 :         if (cmp < 0)

  00075	83 7c 24 28 00	 cmp	 DWORD PTR cmp$[rsp], 0
  0007a	7d 04		 jge	 SHORT $LN2@dict_richc

; 2220 :             return NULL;

  0007c	33 c0		 xor	 eax, eax
  0007e	eb 64		 jmp	 SHORT $LN8@dict_richc
$LN2@dict_richc:

; 2221 :         res = (cmp == (op == Py_EQ)) ? Py_True : Py_False;

  00080	83 7c 24 60 02	 cmp	 DWORD PTR op$[rsp], 2
  00085	75 0a		 jne	 SHORT $LN10@dict_richc
  00087	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  0008f	eb 08		 jmp	 SHORT $LN11@dict_richc
$LN10@dict_richc:
  00091	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
$LN11@dict_richc:
  00099	8b 44 24 2c	 mov	 eax, DWORD PTR tv79[rsp]
  0009d	39 44 24 28	 cmp	 DWORD PTR cmp$[rsp], eax
  000a1	75 0e		 jne	 SHORT $LN12@dict_richc
  000a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000aa	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  000af	eb 0c		 jmp	 SHORT $LN13@dict_richc
$LN12@dict_richc:
  000b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  000b8	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
$LN13@dict_richc:
  000bd	48 8b 44 24 30	 mov	 rax, QWORD PTR tv81[rsp]
  000c2	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 2222 :     }
; 2223 :     else

  000c7	eb 0c		 jmp	 SHORT $LN1@dict_richc
$LN4@dict_richc:

; 2224 :         res = Py_NotImplemented;

  000c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  000d0	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@dict_richc:
$LN5@dict_richc:

; 2225 :     Py_INCREF(res);

  000d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000da	e8 00 00 00 00	 call	 _Py_IncRef

; 2226 :     return res;

  000df	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN8@dict_richc:

; 2227 : }

  000e4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e8	c3		 ret	 0
dict_richcompare ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_equal DD imagerel dict_equal
	DD	imagerel dict_equal+346
	DD	imagerel $unwind$dict_equal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_equal DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_equal
_TEXT	SEGMENT
i$ = 32
aval$22036 = 40
ep$22035 = 48
key$22043 = 56
bval$22042 = 64
cmp$22041 = 72
a$ = 96
b$ = 104
dict_equal PROC						; COMDAT

; 2167 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2168 :     Py_ssize_t i;
; 2169 : 
; 2170 : 
; 2171 :     if (a->ma_used != b->ma_used)

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00013	48 8b 4c 24 68	 mov	 rcx, QWORD PTR b$[rsp]
  00018	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0001c	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  00020	74 07		 je	 SHORT $LN10@dict_equal

; 2172 :         /* can't be equal if # of entries differ */
; 2173 :         return 0;

  00022	33 c0		 xor	 eax, eax
  00024	e9 2c 01 00 00	 jmp	 $LN11@dict_equal
$LN10@dict_equal:

; 2174 :     /* Same # of entries -- check all of 'em.  Exit early on any diff. */
; 2175 :     for (i = 0; i < DK_SIZE(a->ma_keys); i++) {

  00029	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00032	eb 0d		 jmp	 SHORT $LN9@dict_equal
$LN8@dict_equal:
  00034	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00039	48 ff c0	 inc	 rax
  0003c	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN9@dict_equal:
  00041	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00046	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004e	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00053	0f 8d f7 00 00
	00		 jge	 $LN7@dict_equal

; 2176 :         PyDictKeyEntry *ep = &a->ma_keys->dk_entries[i];

  00059	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  0005e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00062	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00067	48 6b c9 18	 imul	 rcx, 24
  0006b	48 8d 44 08 20	 lea	 rax, QWORD PTR [rax+rcx+32]
  00070	48 89 44 24 30	 mov	 QWORD PTR ep$22035[rsp], rax

; 2177 :         PyObject *aval;
; 2178 :         if (a->ma_values)

  00075	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  0007a	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0007f	74 19		 je	 SHORT $LN6@dict_equal

; 2179 :             aval = a->ma_values[i];

  00081	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00086	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0008a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0008f	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00093	48 89 44 24 28	 mov	 QWORD PTR aval$22036[rsp], rax

; 2180 :         else

  00098	eb 0e		 jmp	 SHORT $LN5@dict_equal
$LN6@dict_equal:

; 2181 :             aval = ep->me_value;

  0009a	48 8b 44 24 30	 mov	 rax, QWORD PTR ep$22035[rsp]
  0009f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000a3	48 89 44 24 28	 mov	 QWORD PTR aval$22036[rsp], rax
$LN5@dict_equal:

; 2182 :         if (aval != NULL) {

  000a8	48 83 7c 24 28
	00		 cmp	 QWORD PTR aval$22036[rsp], 0
  000ae	0f 84 97 00 00
	00		 je	 $LN4@dict_equal

; 2183 :             int cmp;
; 2184 :             PyObject *bval;
; 2185 :             PyObject *key = ep->me_key;

  000b4	48 8b 44 24 30	 mov	 rax, QWORD PTR ep$22035[rsp]
  000b9	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000bd	48 89 44 24 38	 mov	 QWORD PTR key$22043[rsp], rax

; 2186 :             /* temporarily bump aval's refcount to ensure it stays
; 2187 :                alive until we're done with it */
; 2188 :             Py_INCREF(aval);

  000c2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR aval$22036[rsp]
  000c7	e8 00 00 00 00	 call	 _Py_IncRef

; 2189 :             /* ditto for key */
; 2190 :             Py_INCREF(key);

  000cc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$22043[rsp]
  000d1	e8 00 00 00 00	 call	 _Py_IncRef

; 2191 :             bval = PyDict_GetItemWithError((PyObject *)b, key);

  000d6	48 8b 54 24 38	 mov	 rdx, QWORD PTR key$22043[rsp]
  000db	48 8b 4c 24 68	 mov	 rcx, QWORD PTR b$[rsp]
  000e0	e8 00 00 00 00	 call	 PyDict_GetItemWithError
  000e5	48 89 44 24 40	 mov	 QWORD PTR bval$22042[rsp], rax

; 2192 :             Py_DECREF(key);

  000ea	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$22043[rsp]
  000ef	e8 00 00 00 00	 call	 _Py_DecRef

; 2193 :             if (bval == NULL) {

  000f4	48 83 7c 24 40
	00		 cmp	 QWORD PTR bval$22042[rsp], 0
  000fa	75 1f		 jne	 SHORT $LN3@dict_equal

; 2194 :                 Py_DECREF(aval);

  000fc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR aval$22036[rsp]
  00101	e8 00 00 00 00	 call	 _Py_DecRef

; 2195 :                 if (PyErr_Occurred())

  00106	e8 00 00 00 00	 call	 PyErr_Occurred
  0010b	48 85 c0	 test	 rax, rax
  0010e	74 07		 je	 SHORT $LN2@dict_equal

; 2196 :                     return -1;

  00110	b8 ff ff ff ff	 mov	 eax, -1
  00115	eb 3e		 jmp	 SHORT $LN11@dict_equal
$LN2@dict_equal:

; 2197 :                 return 0;

  00117	33 c0		 xor	 eax, eax
  00119	eb 3a		 jmp	 SHORT $LN11@dict_equal
$LN3@dict_equal:

; 2198 :             }
; 2199 :             cmp = PyObject_RichCompareBool(aval, bval, Py_EQ);

  0011b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00121	48 8b 54 24 40	 mov	 rdx, QWORD PTR bval$22042[rsp]
  00126	48 8b 4c 24 28	 mov	 rcx, QWORD PTR aval$22036[rsp]
  0012b	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00130	89 44 24 48	 mov	 DWORD PTR cmp$22041[rsp], eax

; 2200 :             Py_DECREF(aval);

  00134	48 8b 4c 24 28	 mov	 rcx, QWORD PTR aval$22036[rsp]
  00139	e8 00 00 00 00	 call	 _Py_DecRef

; 2201 :             if (cmp <= 0)  /* error or not equal */

  0013e	83 7c 24 48 00	 cmp	 DWORD PTR cmp$22041[rsp], 0
  00143	7f 06		 jg	 SHORT $LN1@dict_equal

; 2202 :                 return cmp;

  00145	8b 44 24 48	 mov	 eax, DWORD PTR cmp$22041[rsp]
  00149	eb 0a		 jmp	 SHORT $LN11@dict_equal
$LN1@dict_equal:
$LN4@dict_equal:

; 2203 :         }
; 2204 :     }

  0014b	e9 e4 fe ff ff	 jmp	 $LN8@dict_equal
$LN7@dict_equal:

; 2205 :     return 1;

  00150	b8 01 00 00 00	 mov	 eax, 1
$LN11@dict_equal:

; 2206 : }

  00155	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00159	c3		 ret	 0
dict_equal ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_contains DD imagerel dict_contains
	DD	imagerel dict_contains+173
	DD	imagerel $unwind$dict_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_contains DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_contains
_TEXT	SEGMENT
value_addr$ = 32
ep$ = 40
hash$ = 48
tv81 = 56
mp$ = 80
key$ = 88
dict_contains PROC					; COMDAT

; 2231 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2232 :     Py_hash_t hash;
; 2233 :     PyDictKeyEntry *ep;
; 2234 :     PyObject **value_addr;
; 2235 : 
; 2236 :     if (!PyUnicode_CheckExact(key) ||
; 2237 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00015	48 8b 4c 24 58	 mov	 rcx, QWORD PTR key$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	75 16		 jne	 SHORT $LN3@dict_conta
  00020	48 8b 44 24 58	 mov	 rax, QWORD PTR key$[rsp]
  00025	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00029	48 89 44 24 30	 mov	 QWORD PTR hash$[rsp], rax
  0002e	48 83 7c 24 30
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  00034	75 1b		 jne	 SHORT $LN4@dict_conta
$LN3@dict_conta:

; 2238 :         hash = PyObject_Hash(key);

  00036	48 8b 4c 24 58	 mov	 rcx, QWORD PTR key$[rsp]
  0003b	e8 00 00 00 00	 call	 PyObject_Hash
  00040	48 89 44 24 30	 mov	 QWORD PTR hash$[rsp], rax

; 2239 :         if (hash == -1)

  00045	48 83 7c 24 30
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  0004b	75 04		 jne	 SHORT $LN2@dict_conta

; 2240 :             return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	eb 57		 jmp	 SHORT $LN5@dict_conta
$LN2@dict_conta:
$LN4@dict_conta:

; 2241 :     }
; 2242 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR mp$[rsp]
  00056	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0005a	4c 8d 4c 24 20	 lea	 r9, QWORD PTR value_addr$[rsp]
  0005f	4c 8b 44 24 30	 mov	 r8, QWORD PTR hash$[rsp]
  00064	48 8b 54 24 58	 mov	 rdx, QWORD PTR key$[rsp]
  00069	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mp$[rsp]
  0006e	ff 50 10	 call	 QWORD PTR [rax+16]
  00071	48 89 44 24 28	 mov	 QWORD PTR ep$[rsp], rax

; 2243 :     if (ep == NULL)

  00076	48 83 7c 24 28
	00		 cmp	 QWORD PTR ep$[rsp], 0
  0007c	75 04		 jne	 SHORT $LN1@dict_conta

; 2244 :         return NULL;

  0007e	33 c0		 xor	 eax, eax
  00080	eb 26		 jmp	 SHORT $LN5@dict_conta
$LN1@dict_conta:

; 2245 :     return PyBool_FromLong(*value_addr != NULL);

  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR value_addr$[rsp]
  00087	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0008b	74 0a		 je	 SHORT $LN7@dict_conta
  0008d	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  00095	eb 08		 jmp	 SHORT $LN8@dict_conta
$LN7@dict_conta:
  00097	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN8@dict_conta:
  0009f	8b 4c 24 38	 mov	 ecx, DWORD PTR tv81[rsp]
  000a3	e8 00 00 00 00	 call	 PyBool_FromLong
$LN5@dict_conta:

; 2246 : }

  000a8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ac	c3		 ret	 0
dict_contains ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_get DD imagerel dict_get
	DD	imagerel dict_get+262
	DD	imagerel $unwind$dict_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_get DD 010e01H
	DD	0c20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_get
_TEXT	SEGMENT
failobj$ = 48
key$ = 56
value_addr$ = 64
val$ = 72
ep$ = 80
hash$ = 88
mp$ = 112
args$ = 120
dict_get PROC						; COMDAT

; 2250 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2251 :     PyObject *key;
; 2252 :     PyObject *failobj = Py_None;

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 89 44 24 30	 mov	 QWORD PTR failobj$[rsp], rax

; 2253 :     PyObject *val = NULL;

  0001a	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR val$[rsp], 0

; 2254 :     Py_hash_t hash;
; 2255 :     PyDictKeyEntry *ep;
; 2256 :     PyObject **value_addr;
; 2257 : 
; 2258 :     if (!PyArg_UnpackTuple(args, "get", 1, 2, &key, &failobj))

  00023	48 8d 44 24 30	 lea	 rax, QWORD PTR failobj$[rsp]
  00028	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002d	48 8d 44 24 38	 lea	 rax, QWORD PTR key$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00037	41 b9 02 00 00
	00		 mov	 r9d, 2
  0003d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HNAFFKGA@get?$AA@
  0004a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0004f	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00054	85 c0		 test	 eax, eax
  00056	75 07		 jne	 SHORT $LN6@dict_get

; 2259 :         return NULL;

  00058	33 c0		 xor	 eax, eax
  0005a	e9 a2 00 00 00	 jmp	 $LN7@dict_get
$LN6@dict_get:

; 2260 : 
; 2261 :     if (!PyUnicode_CheckExact(key) ||
; 2262 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00066	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  0006b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0006f	75 16		 jne	 SHORT $LN4@dict_get
  00071	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00076	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0007a	48 89 44 24 58	 mov	 QWORD PTR hash$[rsp], rax
  0007f	48 83 7c 24 58
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  00085	75 1b		 jne	 SHORT $LN5@dict_get
$LN4@dict_get:

; 2263 :         hash = PyObject_Hash(key);

  00087	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  0008c	e8 00 00 00 00	 call	 PyObject_Hash
  00091	48 89 44 24 58	 mov	 QWORD PTR hash$[rsp], rax

; 2264 :         if (hash == -1)

  00096	48 83 7c 24 58
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  0009c	75 04		 jne	 SHORT $LN3@dict_get

; 2265 :             return NULL;

  0009e	33 c0		 xor	 eax, eax
  000a0	eb 5f		 jmp	 SHORT $LN7@dict_get
$LN3@dict_get:
$LN5@dict_get:

; 2266 :     }
; 2267 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  000a2	48 8b 44 24 70	 mov	 rax, QWORD PTR mp$[rsp]
  000a7	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ab	4c 8d 4c 24 40	 lea	 r9, QWORD PTR value_addr$[rsp]
  000b0	4c 8b 44 24 58	 mov	 r8, QWORD PTR hash$[rsp]
  000b5	48 8b 54 24 38	 mov	 rdx, QWORD PTR key$[rsp]
  000ba	48 8b 4c 24 70	 mov	 rcx, QWORD PTR mp$[rsp]
  000bf	ff 50 10	 call	 QWORD PTR [rax+16]
  000c2	48 89 44 24 50	 mov	 QWORD PTR ep$[rsp], rax

; 2268 :     if (ep == NULL)

  000c7	48 83 7c 24 50
	00		 cmp	 QWORD PTR ep$[rsp], 0
  000cd	75 04		 jne	 SHORT $LN2@dict_get

; 2269 :         return NULL;

  000cf	33 c0		 xor	 eax, eax
  000d1	eb 2e		 jmp	 SHORT $LN7@dict_get
$LN2@dict_get:

; 2270 :     val = *value_addr;

  000d3	48 8b 44 24 40	 mov	 rax, QWORD PTR value_addr$[rsp]
  000d8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000db	48 89 44 24 48	 mov	 QWORD PTR val$[rsp], rax

; 2271 :     if (val == NULL)

  000e0	48 83 7c 24 48
	00		 cmp	 QWORD PTR val$[rsp], 0
  000e6	75 0a		 jne	 SHORT $LN1@dict_get

; 2272 :         val = failobj;

  000e8	48 8b 44 24 30	 mov	 rax, QWORD PTR failobj$[rsp]
  000ed	48 89 44 24 48	 mov	 QWORD PTR val$[rsp], rax
$LN1@dict_get:

; 2273 :     Py_INCREF(val);

  000f2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR val$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_IncRef

; 2274 :     return val;

  000fc	48 8b 44 24 48	 mov	 rax, QWORD PTR val$[rsp]
$LN7@dict_get:

; 2275 : }

  00101	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00105	c3		 ret	 0
dict_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_setdefault DD imagerel dict_setdefault
	DD	imagerel dict_setdefault+2059
	DD	imagerel $unwind$dict_setdefault
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_setdefault DD 021101H
	DD	01d0111H
xdata	ENDS
;	COMDAT ??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
CONST	SEGMENT
??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@ DB 'dict_setdefault', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dict_setdefault
_TEXT	SEGMENT
failobj$ = 48
key$ = 56
value_addr$ = 64
val$ = 72
ep$ = 80
hash$ = 88
g$22185 = 96
tv152 = 104
tv147 = 112
tv150 = 120
tv212 = 124
tv185 = 128
tv173 = 132
tv171 = 136
tv183 = 140
tv207 = 144
tv202 = 152
tv205 = 160
tv210 = 164
tv272 = 168
tv245 = 172
tv233 = 176
tv231 = 180
tv243 = 184
tv267 = 188
tv262 = 192
tv265 = 200
tv270 = 204
tv289 = 208
mp$ = 240
args$ = 248
dict_setdefault PROC					; COMDAT

; 2279 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H

; 2280 :     PyObject *key;
; 2281 :     PyObject *failobj = Py_None;

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00018	48 89 44 24 30	 mov	 QWORD PTR failobj$[rsp], rax

; 2282 :     PyObject *val = NULL;

  0001d	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR val$[rsp], 0

; 2283 :     Py_hash_t hash;
; 2284 :     PyDictKeyEntry *ep;
; 2285 :     PyObject **value_addr;
; 2286 : 
; 2287 :     if (!PyArg_UnpackTuple(args, "setdefault", 1, 2, &key, &failobj))

  00026	48 8d 44 24 30	 lea	 rax, QWORD PTR failobj$[rsp]
  0002b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00030	48 8d 44 24 38	 lea	 rax, QWORD PTR key$[rsp]
  00035	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003a	41 b9 02 00 00
	00		 mov	 r9d, 2
  00040	41 b8 01 00 00
	00		 mov	 r8d, 1
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@MIJGIGKN@setdefault?$AA@
  0004d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00055	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0005a	85 c0		 test	 eax, eax
  0005c	75 07		 jne	 SHORT $LN19@dict_setde

; 2288 :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	e9 9e 07 00 00	 jmp	 $LN20@dict_setde
$LN19@dict_setde:

; 2289 : 
; 2290 :     /*
; 2291 :     if (Px_CHECK_PROTECTION(mp, args, NULL))
; 2292 :         return NULL;
; 2293 :     */
; 2294 : 
; 2295 :     if (!PyUnicode_CheckExact(key) ||
; 2296 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0006c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  00071	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00075	75 16		 jne	 SHORT $LN17@dict_setde
  00077	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  0007c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00080	48 89 44 24 58	 mov	 QWORD PTR hash$[rsp], rax
  00085	48 83 7c 24 58
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  0008b	75 1e		 jne	 SHORT $LN18@dict_setde
$LN17@dict_setde:

; 2297 :         hash = PyObject_Hash(key);

  0008d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  00092	e8 00 00 00 00	 call	 PyObject_Hash
  00097	48 89 44 24 58	 mov	 QWORD PTR hash$[rsp], rax

; 2298 :         if (hash == -1)

  0009c	48 83 7c 24 58
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  000a2	75 07		 jne	 SHORT $LN16@dict_setde

; 2299 :             return NULL;

  000a4	33 c0		 xor	 eax, eax
  000a6	e9 58 07 00 00	 jmp	 $LN20@dict_setde
$LN16@dict_setde:
$LN18@dict_setde:

; 2300 :     }
; 2301 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  000ab	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  000b3	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b7	4c 8d 4c 24 40	 lea	 r9, QWORD PTR value_addr$[rsp]
  000bc	4c 8b 44 24 58	 mov	 r8, QWORD PTR hash$[rsp]
  000c1	48 8b 54 24 38	 mov	 rdx, QWORD PTR key$[rsp]
  000c6	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  000ce	ff 50 10	 call	 QWORD PTR [rax+16]
  000d1	48 89 44 24 50	 mov	 QWORD PTR ep$[rsp], rax

; 2302 :     if (ep == NULL)

  000d6	48 83 7c 24 50
	00		 cmp	 QWORD PTR ep$[rsp], 0
  000dc	75 07		 jne	 SHORT $LN15@dict_setde

; 2303 :         return NULL;

  000de	33 c0		 xor	 eax, eax
  000e0	e9 1e 07 00 00	 jmp	 $LN20@dict_setde
$LN15@dict_setde:

; 2304 :     val = *value_addr;

  000e5	48 8b 44 24 40	 mov	 rax, QWORD PTR value_addr$[rsp]
  000ea	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ed	48 89 44 24 48	 mov	 QWORD PTR val$[rsp], rax

; 2305 :     if (val == NULL) {

  000f2	48 83 7c 24 48
	00		 cmp	 QWORD PTR val$[rsp], 0
  000f8	0f 85 f6 06 00
	00		 jne	 $LN14@dict_setde

; 2306 :         if (mp->ma_keys->dk_usable <= 0) {

  000fe	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00106	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0010a	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0010f	7f 39		 jg	 SHORT $LN13@dict_setde

; 2307 :             /* Need to resize. */
; 2308 :             if (insertion_resize(mp) < 0)

  00111	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  00119	e8 00 00 00 00	 call	 insertion_resize
  0011e	85 c0		 test	 eax, eax
  00120	7d 07		 jge	 SHORT $LN12@dict_setde

; 2309 :                 return NULL;

  00122	33 c0		 xor	 eax, eax
  00124	e9 da 06 00 00	 jmp	 $LN20@dict_setde
$LN12@dict_setde:

; 2310 :             ep = find_empty_slot(mp, key, hash, &value_addr);

  00129	4c 8d 4c 24 40	 lea	 r9, QWORD PTR value_addr$[rsp]
  0012e	4c 8b 44 24 58	 mov	 r8, QWORD PTR hash$[rsp]
  00133	48 8b 54 24 38	 mov	 rdx, QWORD PTR key$[rsp]
  00138	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  00140	e8 00 00 00 00	 call	 find_empty_slot
  00145	48 89 44 24 50	 mov	 QWORD PTR ep$[rsp], rax
$LN13@dict_setde:

; 2311 :         }
; 2312 :         Py_INCREF(failobj);

  0014a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR failobj$[rsp]
  0014f	e8 00 00 00 00	 call	 _Py_IncRef

; 2313 :         Py_INCREF(key);

  00154	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  00159	e8 00 00 00 00	 call	 _Py_IncRef
$LN11@dict_setde:

; 2314 :         MAINTAIN_TRACKING(mp, key, failobj);

  0015e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00166	4c 8b 8c 24 f0
	00 00 00	 mov	 r9, QWORD PTR mp$[rsp]
  0016e	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  00174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0017b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  00182	e8 00 00 00 00	 call	 _PyParallel_Guard
  00187	85 c0		 test	 eax, eax
  00189	74 0a		 je	 SHORT $LN26@dict_setde
  0018b	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv152[rsp], 0
  00193	eb 6f		 jmp	 SHORT $LN27@dict_setde
$LN26@dict_setde:
  00195	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0019d	4c 8b 8c 24 f0
	00 00 00	 mov	 r9, QWORD PTR mp$[rsp]
  001a5	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  001ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  001b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  001b9	e8 00 00 00 00	 call	 _PyParallel_Guard
  001be	85 c0		 test	 eax, eax
  001c0	74 0b		 je	 SHORT $LN22@dict_setde
  001c2	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv147[rsp], 0
  001cb	eb 11		 jmp	 SHORT $LN23@dict_setde
$LN22@dict_setde:
  001cd	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  001d5	48 83 e8 18	 sub	 rax, 24
  001d9	48 89 44 24 70	 mov	 QWORD PTR tv147[rsp], rax
$LN23@dict_setde:
  001de	48 8b 44 24 70	 mov	 rax, QWORD PTR tv147[rsp]
  001e3	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  001e8	74 0a		 je	 SHORT $LN24@dict_setde
  001ea	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv150[rsp], 1
  001f2	eb 08		 jmp	 SHORT $LN25@dict_setde
$LN24@dict_setde:
  001f4	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv150[rsp], 0
$LN25@dict_setde:
  001fc	8b 44 24 78	 mov	 eax, DWORD PTR tv150[rsp]
  00200	89 44 24 68	 mov	 DWORD PTR tv152[rsp], eax
$LN27@dict_setde:
  00204	83 7c 24 68 00	 cmp	 DWORD PTR tv152[rsp], 0
  00209	0f 85 6b 05 00
	00		 jne	 $LN8@dict_setde
  0020f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00217	4c 8b 4c 24 38	 mov	 r9, QWORD PTR key$[rsp]
  0021c	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  00222	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00229	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  00230	e8 00 00 00 00	 call	 _PyParallel_Guard
  00235	85 c0		 test	 eax, eax
  00237	74 0d		 je	 SHORT $LN46@dict_setde
  00239	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv212[rsp], 0
  00241	e9 ef 01 00 00	 jmp	 $LN47@dict_setde
$LN46@dict_setde:
  00246	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0024e	4c 8b 4c 24 38	 mov	 r9, QWORD PTR key$[rsp]
  00253	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  00259	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00260	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  00267	e8 00 00 00 00	 call	 _PyParallel_Guard
  0026c	85 c0		 test	 eax, eax
  0026e	74 10		 je	 SHORT $LN35@dict_setde
  00270	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv185[rsp], 0
  0027b	e9 af 00 00 00	 jmp	 $LN36@dict_setde
$LN35@dict_setde:
  00280	e8 00 00 00 00	 call	 _Py_PXCTX
  00285	85 c0		 test	 eax, eax
  00287	74 0d		 je	 SHORT $LN30@dict_setde
  00289	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv173[rsp], 0
  00294	eb 3e		 jmp	 SHORT $LN31@dict_setde
$LN30@dict_setde:
  00296	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  0029b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0029f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002a5	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  002aa	85 c0		 test	 eax, eax
  002ac	74 0d		 je	 SHORT $LN28@dict_setde
  002ae	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv171[rsp], 1
  002b9	eb 0b		 jmp	 SHORT $LN29@dict_setde
$LN28@dict_setde:
  002bb	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv171[rsp], 0
$LN29@dict_setde:
  002c6	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv171[rsp]
  002cd	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv173[rsp], eax
$LN31@dict_setde:
  002d4	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR tv173[rsp], 0
  002dc	74 38		 je	 SHORT $LN33@dict_setde
  002de	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  002e3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002e7	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  002ef	74 18		 je	 SHORT $LN32@dict_setde
  002f1	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  002f6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002fa	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  002ff	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  00305	85 c0		 test	 eax, eax
  00307	74 0d		 je	 SHORT $LN33@dict_setde
$LN32@dict_setde:
  00309	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv183[rsp], 1
  00314	eb 0b		 jmp	 SHORT $LN34@dict_setde
$LN33@dict_setde:
  00316	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv183[rsp], 0
$LN34@dict_setde:
  00321	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv183[rsp]
  00328	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv185[rsp], eax
$LN36@dict_setde:
  0032f	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR tv185[rsp], 0
  00337	0f 84 e2 00 00
	00		 je	 $LN44@dict_setde
  0033d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00344	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  00349	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0034d	0f 85 bf 00 00
	00		 jne	 $LN43@dict_setde
  00353	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0035b	4c 8b 4c 24 38	 mov	 r9, QWORD PTR key$[rsp]
  00360	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  00366	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0036d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  00374	e8 00 00 00 00	 call	 _PyParallel_Guard
  00379	85 c0		 test	 eax, eax
  0037b	74 0d		 je	 SHORT $LN41@dict_setde
  0037d	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv207[rsp], 0
  00388	eb 7e		 jmp	 SHORT $LN42@dict_setde
$LN41@dict_setde:
  0038a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00392	4c 8b 4c 24 38	 mov	 r9, QWORD PTR key$[rsp]
  00397	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  0039d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  003a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  003ab	e8 00 00 00 00	 call	 _PyParallel_Guard
  003b0	85 c0		 test	 eax, eax
  003b2	74 0e		 je	 SHORT $LN37@dict_setde
  003b4	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv202[rsp], 0
  003c0	eb 11		 jmp	 SHORT $LN38@dict_setde
$LN37@dict_setde:
  003c2	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  003c7	48 83 e8 18	 sub	 rax, 24
  003cb	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv202[rsp], rax
$LN38@dict_setde:
  003d3	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv202[rsp]
  003db	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  003e0	74 0d		 je	 SHORT $LN39@dict_setde
  003e2	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv205[rsp], 1
  003ed	eb 0b		 jmp	 SHORT $LN40@dict_setde
$LN39@dict_setde:
  003ef	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv205[rsp], 0
$LN40@dict_setde:
  003fa	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv205[rsp]
  00401	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv207[rsp], eax
$LN42@dict_setde:
  00408	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR tv207[rsp], 0
  00410	74 0d		 je	 SHORT $LN44@dict_setde
$LN43@dict_setde:
  00412	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv210[rsp], 1
  0041d	eb 0b		 jmp	 SHORT $LN45@dict_setde
$LN44@dict_setde:
  0041f	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv210[rsp], 0
$LN45@dict_setde:
  0042a	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv210[rsp]
  00431	89 44 24 7c	 mov	 DWORD PTR tv212[rsp], eax
$LN47@dict_setde:
  00435	83 7c 24 7c 00	 cmp	 DWORD PTR tv212[rsp], 0
  0043a	0f 85 3a 02 00
	00		 jne	 $LN6@dict_setde
  00440	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00448	4c 8b 4c 24 30	 mov	 r9, QWORD PTR failobj$[rsp]
  0044d	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  00453	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0045a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  00461	e8 00 00 00 00	 call	 _PyParallel_Guard
  00466	85 c0		 test	 eax, eax
  00468	74 10		 je	 SHORT $LN66@dict_setde
  0046a	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv272[rsp], 0
  00475	e9 f2 01 00 00	 jmp	 $LN67@dict_setde
$LN66@dict_setde:
  0047a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00482	4c 8b 4c 24 30	 mov	 r9, QWORD PTR failobj$[rsp]
  00487	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  0048d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00494	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  0049b	e8 00 00 00 00	 call	 _PyParallel_Guard
  004a0	85 c0		 test	 eax, eax
  004a2	74 10		 je	 SHORT $LN55@dict_setde
  004a4	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv245[rsp], 0
  004af	e9 af 00 00 00	 jmp	 $LN56@dict_setde
$LN55@dict_setde:
  004b4	e8 00 00 00 00	 call	 _Py_PXCTX
  004b9	85 c0		 test	 eax, eax
  004bb	74 0d		 je	 SHORT $LN50@dict_setde
  004bd	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv233[rsp], 0
  004c8	eb 3e		 jmp	 SHORT $LN51@dict_setde
$LN50@dict_setde:
  004ca	48 8b 44 24 30	 mov	 rax, QWORD PTR failobj$[rsp]
  004cf	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004d3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004d9	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  004de	85 c0		 test	 eax, eax
  004e0	74 0d		 je	 SHORT $LN48@dict_setde
  004e2	c7 84 24 b4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv231[rsp], 1
  004ed	eb 0b		 jmp	 SHORT $LN49@dict_setde
$LN48@dict_setde:
  004ef	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv231[rsp], 0
$LN49@dict_setde:
  004fa	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR tv231[rsp]
  00501	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv233[rsp], eax
$LN51@dict_setde:
  00508	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR tv233[rsp], 0
  00510	74 38		 je	 SHORT $LN53@dict_setde
  00512	48 8b 44 24 30	 mov	 rax, QWORD PTR failobj$[rsp]
  00517	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0051b	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  00523	74 18		 je	 SHORT $LN52@dict_setde
  00525	48 8b 44 24 30	 mov	 rax, QWORD PTR failobj$[rsp]
  0052a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0052e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR failobj$[rsp]
  00533	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  00539	85 c0		 test	 eax, eax
  0053b	74 0d		 je	 SHORT $LN53@dict_setde
$LN52@dict_setde:
  0053d	c7 84 24 b8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv243[rsp], 1
  00548	eb 0b		 jmp	 SHORT $LN54@dict_setde
$LN53@dict_setde:
  0054a	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv243[rsp], 0
$LN54@dict_setde:
  00555	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv243[rsp]
  0055c	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv245[rsp], eax
$LN56@dict_setde:
  00563	83 bc 24 ac 00
	00 00 00	 cmp	 DWORD PTR tv245[rsp], 0
  0056b	0f 84 e2 00 00
	00		 je	 $LN64@dict_setde
  00571	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00578	48 8b 4c 24 30	 mov	 rcx, QWORD PTR failobj$[rsp]
  0057d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00581	0f 85 bf 00 00
	00		 jne	 $LN63@dict_setde
  00587	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0058f	4c 8b 4c 24 30	 mov	 r9, QWORD PTR failobj$[rsp]
  00594	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  0059a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  005a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  005a8	e8 00 00 00 00	 call	 _PyParallel_Guard
  005ad	85 c0		 test	 eax, eax
  005af	74 0d		 je	 SHORT $LN61@dict_setde
  005b1	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv267[rsp], 0
  005bc	eb 7e		 jmp	 SHORT $LN62@dict_setde
$LN61@dict_setde:
  005be	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  005c6	4c 8b 4c 24 30	 mov	 r9, QWORD PTR failobj$[rsp]
  005cb	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  005d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  005d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  005df	e8 00 00 00 00	 call	 _PyParallel_Guard
  005e4	85 c0		 test	 eax, eax
  005e6	74 0e		 je	 SHORT $LN57@dict_setde
  005e8	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv262[rsp], 0
  005f4	eb 11		 jmp	 SHORT $LN58@dict_setde
$LN57@dict_setde:
  005f6	48 8b 44 24 30	 mov	 rax, QWORD PTR failobj$[rsp]
  005fb	48 83 e8 18	 sub	 rax, 24
  005ff	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv262[rsp], rax
$LN58@dict_setde:
  00607	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv262[rsp]
  0060f	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00614	74 0d		 je	 SHORT $LN59@dict_setde
  00616	c7 84 24 c8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv265[rsp], 1
  00621	eb 0b		 jmp	 SHORT $LN60@dict_setde
$LN59@dict_setde:
  00623	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
$LN60@dict_setde:
  0062e	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR tv265[rsp]
  00635	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv267[rsp], eax
$LN62@dict_setde:
  0063c	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR tv267[rsp], 0
  00644	74 0d		 je	 SHORT $LN64@dict_setde
$LN63@dict_setde:
  00646	c7 84 24 cc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv270[rsp], 1
  00651	eb 0b		 jmp	 SHORT $LN65@dict_setde
$LN64@dict_setde:
  00653	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv270[rsp], 0
$LN65@dict_setde:
  0065e	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR tv270[rsp]
  00665	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv272[rsp], eax
$LN67@dict_setde:
  0066c	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR tv272[rsp], 0
  00674	0f 84 00 01 00
	00		 je	 $LN7@dict_setde
$LN6@dict_setde:
  0067a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00682	4c 8b 8c 24 f0
	00 00 00	 mov	 r9, QWORD PTR mp$[rsp]
  0068a	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  00690	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00697	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  0069e	e8 00 00 00 00	 call	 _PyParallel_Guard
  006a3	85 c0		 test	 eax, eax
  006a5	0f 85 cf 00 00
	00		 jne	 $LN5@dict_setde
$LN4@dict_setde:
  006ab	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006b3	4c 8b 8c 24 f0
	00 00 00	 mov	 r9, QWORD PTR mp$[rsp]
  006bb	41 b8 0a 09 00
	00		 mov	 r8d, 2314		; 0000090aH
  006c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  006c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FCIIJGAF@dict_setdefault?$AA@
  006cf	e8 00 00 00 00	 call	 _PyParallel_Guard
  006d4	85 c0		 test	 eax, eax
  006d6	74 0e		 je	 SHORT $LN68@dict_setde
  006d8	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv289[rsp], 0
  006e4	eb 14		 jmp	 SHORT $LN69@dict_setde
$LN68@dict_setde:
  006e6	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  006ee	48 83 e8 18	 sub	 rax, 24
  006f2	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv289[rsp], rax
$LN69@dict_setde:
  006fa	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv289[rsp]
  00702	48 89 44 24 60	 mov	 QWORD PTR g$22185[rsp], rax
  00707	48 8b 44 24 60	 mov	 rax, QWORD PTR g$22185[rsp]
  0070c	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00711	74 0c		 je	 SHORT $LN1@dict_setde
  00713	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  0071a	e8 00 00 00 00	 call	 Py_FatalError
$LN1@dict_setde:
  0071f	48 8b 44 24 60	 mov	 rax, QWORD PTR g$22185[rsp]
  00724	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  0072c	48 8b 44 24 60	 mov	 rax, QWORD PTR g$22185[rsp]
  00731	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00738	48 89 08	 mov	 QWORD PTR [rax], rcx
  0073b	48 8b 44 24 60	 mov	 rax, QWORD PTR g$22185[rsp]
  00740	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00747	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0074b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0074f	48 8b 44 24 60	 mov	 rax, QWORD PTR g$22185[rsp]
  00754	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00758	48 8b 4c 24 60	 mov	 rcx, QWORD PTR g$22185[rsp]
  0075d	48 89 08	 mov	 QWORD PTR [rax], rcx
  00760	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00767	48 8b 4c 24 60	 mov	 rcx, QWORD PTR g$22185[rsp]
  0076c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00770	33 c0		 xor	 eax, eax
  00772	85 c0		 test	 eax, eax
  00774	0f 85 31 ff ff
	ff		 jne	 $LN4@dict_setde
$LN5@dict_setde:
$LN7@dict_setde:
$LN8@dict_setde:
  0077a	33 c0		 xor	 eax, eax
  0077c	85 c0		 test	 eax, eax
  0077e	0f 85 da f9 ff
	ff		 jne	 $LN11@dict_setde

; 2315 :         ep->me_key = key;

  00784	48 8b 44 24 50	 mov	 rax, QWORD PTR ep$[rsp]
  00789	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  0078e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2316 :         ep->me_hash = hash;

  00792	48 8b 44 24 50	 mov	 rax, QWORD PTR ep$[rsp]
  00797	48 8b 4c 24 58	 mov	 rcx, QWORD PTR hash$[rsp]
  0079c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2317 :         *value_addr = failobj;

  0079f	48 8b 44 24 40	 mov	 rax, QWORD PTR value_addr$[rsp]
  007a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR failobj$[rsp]
  007a9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2318 :         val = failobj;

  007ac	48 8b 44 24 30	 mov	 rax, QWORD PTR failobj$[rsp]
  007b1	48 89 44 24 48	 mov	 QWORD PTR val$[rsp], rax

; 2319 :         mp->ma_keys->dk_usable--;

  007b6	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  007be	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  007c2	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  007c6	48 ff c8	 dec	 rax
  007c9	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  007d1	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  007d5	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 2320 :         mp->ma_used++;

  007d9	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  007e1	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  007e5	48 ff c0	 inc	 rax
  007e8	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  007f0	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax
$LN14@dict_setde:

; 2321 :     }
; 2322 :     Py_INCREF(val);

  007f4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR val$[rsp]
  007f9	e8 00 00 00 00	 call	 _Py_IncRef

; 2323 :     return val;

  007fe	48 8b 44 24 48	 mov	 rax, QWORD PTR val$[rsp]
$LN20@dict_setde:

; 2324 : }

  00803	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  0080a	c3		 ret	 0
dict_setdefault ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@ELKIGFKM@dict_clear?$AA@		; `string'
EXTRN	PyExc_AssignmentError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_clear DD imagerel dict_clear
	DD	imagerel dict_clear+117
	DD	imagerel $unwind$dict_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_clear DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@ELKIGFKM@dict_clear?$AA@
CONST	SEGMENT
??_C@_0L@ELKIGFKM@dict_clear?$AA@ DB 'dict_clear', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dict_clear
_TEXT	SEGMENT
mp$ = 64
dict_clear PROC						; COMDAT

; 2329 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2330 : #ifdef WITH_PARALLEL
; 2331 :     if (Py_PXCTX && Py_ISPY(mp)) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 41		 je	 SHORT $LN1@dict_clear
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR mp$[rsp]
  0001f	41 b8 1b 09 00
	00		 mov	 r8d, 2331		; 0000091bH
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@ELKIGFKM@dict_clear?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	74 17		 je	 SHORT $LN1@dict_clear

; 2332 :         PyErr_SetString(PyExc_AssignmentError,
; 2333 :                         "parallel thread attempted to clear "
; 2334 :                         "a main thread dict");

  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@NJAOCDNF@parallel?5thread?5attempted?5to?5cle@
  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AssignmentError
  0004a	e8 00 00 00 00	 call	 PyErr_SetString

; 2335 :         return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	eb 1d		 jmp	 SHORT $LN2@dict_clear
$LN1@dict_clear:

; 2336 :     }
; 2337 : #endif
; 2338 :     PyDict_Clear((PyObject *)mp);

  00053	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mp$[rsp]
  00058	e8 00 00 00 00	 call	 PyDict_Clear

; 2339 :     Py_RETURN_NONE;

  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00064	e8 00 00 00 00	 call	 _Py_IncRef
  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@dict_clear:

; 2340 : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
dict_clear ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_pop DD imagerel dict_pop
	DD	imagerel dict_pop+504
	DD	imagerel $unwind$dict_pop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_pop DD 010e01H
	DD	0e20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_pop
_TEXT	SEGMENT
deflt$ = 48
key$ = 56
old_key$ = 64
value_addr$ = 72
ep$ = 80
old_value$ = 88
hash$ = 96
mp$ = 128
args$ = 136
dict_pop PROC						; COMDAT

; 2344 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2345 :     Py_hash_t hash;
; 2346 :     PyObject *old_value, *old_key;
; 2347 :     PyObject *key, *deflt = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR deflt$[rsp], 0

; 2348 :     PyDictKeyEntry *ep;
; 2349 :     PyObject **value_addr;
; 2350 : 
; 2351 :     /*
; 2352 :     if (Px_CHECK_PROTECTION(mp, args, NULL))
; 2353 :         return NULL;
; 2354 :     */
; 2355 : 
; 2356 :     if(!PyArg_UnpackTuple(args, "pop", 1, 2, &key, &deflt))

  00017	48 8d 44 24 30	 lea	 rax, QWORD PTR deflt$[rsp]
  0001c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00021	48 8d 44 24 38	 lea	 rax, QWORD PTR key$[rsp]
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	41 b9 02 00 00
	00		 mov	 r9d, 2
  00031	41 b8 01 00 00
	00		 mov	 r8d, 1
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03NJDAHFJE@pop?$AA@
  0003e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00046	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0004b	85 c0		 test	 eax, eax
  0004d	75 07		 jne	 SHORT $LN11@dict_pop

; 2357 :         return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	e9 9d 01 00 00	 jmp	 $LN12@dict_pop
$LN11@dict_pop:

; 2358 :     if (mp->ma_used == 0) {

  00056	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  0005e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00063	75 2d		 jne	 SHORT $LN10@dict_pop

; 2359 :         if (deflt) {

  00065	48 83 7c 24 30
	00		 cmp	 QWORD PTR deflt$[rsp], 0
  0006b	74 14		 je	 SHORT $LN9@dict_pop

; 2360 :             Py_INCREF(deflt);

  0006d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR deflt$[rsp]
  00072	e8 00 00 00 00	 call	 _Py_IncRef

; 2361 :             return deflt;

  00077	48 8b 44 24 30	 mov	 rax, QWORD PTR deflt$[rsp]
  0007c	e9 72 01 00 00	 jmp	 $LN12@dict_pop
$LN9@dict_pop:

; 2362 :         }
; 2363 :         set_key_error(key);

  00081	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  00086	e8 00 00 00 00	 call	 set_key_error

; 2364 :         return NULL;

  0008b	33 c0		 xor	 eax, eax
  0008d	e9 61 01 00 00	 jmp	 $LN12@dict_pop
$LN10@dict_pop:

; 2365 :     }
; 2366 :     if (!PyUnicode_CheckExact(key) ||
; 2367 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  00092	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00099	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  0009e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a2	75 16		 jne	 SHORT $LN7@dict_pop
  000a4	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  000a9	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ad	48 89 44 24 60	 mov	 QWORD PTR hash$[rsp], rax
  000b2	48 83 7c 24 60
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  000b8	75 1e		 jne	 SHORT $LN8@dict_pop
$LN7@dict_pop:

; 2368 :         hash = PyObject_Hash(key);

  000ba	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  000bf	e8 00 00 00 00	 call	 PyObject_Hash
  000c4	48 89 44 24 60	 mov	 QWORD PTR hash$[rsp], rax

; 2369 :         if (hash == -1)

  000c9	48 83 7c 24 60
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  000cf	75 07		 jne	 SHORT $LN6@dict_pop

; 2370 :             return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 1b 01 00 00	 jmp	 $LN12@dict_pop
$LN6@dict_pop:
$LN8@dict_pop:

; 2371 :     }
; 2372 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  000d8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  000e0	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000e4	4c 8d 4c 24 48	 lea	 r9, QWORD PTR value_addr$[rsp]
  000e9	4c 8b 44 24 60	 mov	 r8, QWORD PTR hash$[rsp]
  000ee	48 8b 54 24 38	 mov	 rdx, QWORD PTR key$[rsp]
  000f3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  000fb	ff 50 10	 call	 QWORD PTR [rax+16]
  000fe	48 89 44 24 50	 mov	 QWORD PTR ep$[rsp], rax

; 2373 :     if (ep == NULL)

  00103	48 83 7c 24 50
	00		 cmp	 QWORD PTR ep$[rsp], 0
  00109	75 07		 jne	 SHORT $LN5@dict_pop

; 2374 :         return NULL;

  0010b	33 c0		 xor	 eax, eax
  0010d	e9 e1 00 00 00	 jmp	 $LN12@dict_pop
$LN5@dict_pop:

; 2375 :     old_value = *value_addr;

  00112	48 8b 44 24 48	 mov	 rax, QWORD PTR value_addr$[rsp]
  00117	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0011a	48 89 44 24 58	 mov	 QWORD PTR old_value$[rsp], rax

; 2376 :     if (old_value == NULL) {

  0011f	48 83 7c 24 58
	00		 cmp	 QWORD PTR old_value$[rsp], 0
  00125	75 2d		 jne	 SHORT $LN4@dict_pop

; 2377 :         if (deflt) {

  00127	48 83 7c 24 30
	00		 cmp	 QWORD PTR deflt$[rsp], 0
  0012d	74 14		 je	 SHORT $LN3@dict_pop

; 2378 :             Py_INCREF(deflt);

  0012f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR deflt$[rsp]
  00134	e8 00 00 00 00	 call	 _Py_IncRef

; 2379 :             return deflt;

  00139	48 8b 44 24 30	 mov	 rax, QWORD PTR deflt$[rsp]
  0013e	e9 b0 00 00 00	 jmp	 $LN12@dict_pop
$LN3@dict_pop:

; 2380 :         }
; 2381 :         set_key_error(key);

  00143	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  00148	e8 00 00 00 00	 call	 set_key_error

; 2382 :         return NULL;

  0014d	33 c0		 xor	 eax, eax
  0014f	e9 9f 00 00 00	 jmp	 $LN12@dict_pop
$LN4@dict_pop:

; 2383 :     }
; 2384 :     *value_addr = NULL;

  00154	48 8b 44 24 48	 mov	 rax, QWORD PTR value_addr$[rsp]
  00159	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 2385 :     mp->ma_used--;

  00160	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00168	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0016c	48 ff c8	 dec	 rax
  0016f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  00177	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 2386 :     if (!_PyDict_HasSplitTable(mp)) {

  0017b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00183	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00188	75 64		 jne	 SHORT $LN2@dict_pop

; 2387 :         ENSURE_ALLOWS_DELETIONS(mp);

  0018a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  00192	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00196	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode_nodummy
  0019d	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  001a1	75 17		 jne	 SHORT $LN1@dict_pop
  001a3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  001ab	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode
  001b6	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN1@dict_pop:

; 2388 :         old_key = ep->me_key;

  001ba	48 8b 44 24 50	 mov	 rax, QWORD PTR ep$[rsp]
  001bf	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001c3	48 89 44 24 40	 mov	 QWORD PTR old_key$[rsp], rax

; 2389 :         Py_INCREF(dummy);

  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dummy_struct
  001cf	e8 00 00 00 00	 call	 _Py_IncRef

; 2390 :         ep->me_key = dummy;

  001d4	48 8b 44 24 50	 mov	 rax, QWORD PTR ep$[rsp]
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dummy_struct
  001e0	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2391 :         Py_DECREF(old_key);

  001e4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR old_key$[rsp]
  001e9	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@dict_pop:

; 2392 :     }
; 2393 :     return old_value;

  001ee	48 8b 44 24 58	 mov	 rax, QWORD PTR old_value$[rsp]
$LN12@dict_pop:

; 2394 : }

  001f3	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001f7	c3		 ret	 0
dict_pop ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FI@KEJDCAGN@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAe?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?$FL?$AA0?$AA?$FN?$AA?4?$AAm?$AAe?$AA_?$AAv?$AAa@ ; `string'
PUBLIC	??_C@_0BP@HHKKPFHK@popitem?$CI?$CJ?3?5dictionary?5is?5empty?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_popitem DD imagerel dict_popitem
	DD	imagerel dict_popitem+550
	DD	imagerel $unwind$dict_popitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_popitem DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1FI@KEJDCAGN@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAe?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?$FL?$AA0?$AA?$FN?$AA?4?$AAm?$AAe?$AA_?$AAv?$AAa@
CONST	SEGMENT
??_C@_1FI@KEJDCAGN@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAe?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?$FL?$AA0?$AA?$FN?$AA?4?$AAm?$AAe?$AA_?$AAv?$AAa@ DB 'm'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, '_', 00H
	DB	'k', 00H, 'e', 00H, 'y', 00H, 's', 00H, '-', 00H, '>', 00H, 'd'
	DB	00H, 'k', 00H, '_', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, '[', 00H, '0', 00H, ']', 00H, '.'
	DB	00H, 'm', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HHKKPFHK@popitem?$CI?$CJ?3?5dictionary?5is?5empty?$AA@
CONST	SEGMENT
??_C@_0BP@HHKKPFHK@popitem?$CI?$CJ?3?5dictionary?5is?5empty?$AA@ DB 'popi'
	DB	'tem(): dictionary is empty', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dict_popitem
_TEXT	SEGMENT
res$ = 32
i$ = 40
ep$ = 48
mask$22261 = 56
mp$ = 80
dict_popitem PROC					; COMDAT

; 2398 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2399 :     Py_hash_t i = 0;

  00009	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0

; 2400 :     PyDictKeyEntry *ep;
; 2401 :     PyObject *res;
; 2402 : 
; 2403 :     /*
; 2404 :     if (Px_CHECK_PROTECTION(mp, NULL, NULL))
; 2405 :         return NULL;
; 2406 :     */
; 2407 : 
; 2408 :     /* Allocate the result tuple before checking the size.  Believe it
; 2409 :      * or not, this allocation could trigger a garbage collection which
; 2410 :      * could empty the dict, so if we checked the size first and that
; 2411 :      * happened, the result would be an infinite loop (searching for an
; 2412 :      * entry that no longer exists).  Note that the usual popitem()
; 2413 :      * idiom is "while d: k, v = d.popitem()". so needing to throw the
; 2414 :      * tuple away if the dict *is* empty isn't a significant
; 2415 :      * inefficiency -- possible, but unlikely in practice.
; 2416 :      */
; 2417 :     res = PyTuple_New(2);

  00012	b9 02 00 00 00	 mov	 ecx, 2
  00017	e8 00 00 00 00	 call	 PyTuple_New
  0001c	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 2418 :     if (res == NULL)

  00021	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00027	75 07		 jne	 SHORT $LN11@dict_popit

; 2419 :         return NULL;

  00029	33 c0		 xor	 eax, eax
  0002b	e9 f1 01 00 00	 jmp	 $LN12@dict_popit
$LN11@dict_popit:

; 2420 :     if (mp->ma_used == 0) {

  00030	48 8b 44 24 50	 mov	 rax, QWORD PTR mp$[rsp]
  00035	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0003a	75 24		 jne	 SHORT $LN10@dict_popit

; 2421 :         Py_DECREF(res);

  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00041	e8 00 00 00 00	 call	 _Py_DecRef

; 2422 :         PyErr_SetString(PyExc_KeyError,
; 2423 :                         "popitem(): dictionary is empty");

  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@HHKKPFHK@popitem?$CI?$CJ?3?5dictionary?5is?5empty?$AA@
  0004d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  00054	e8 00 00 00 00	 call	 PyErr_SetString

; 2424 :         return NULL;

  00059	33 c0		 xor	 eax, eax
  0005b	e9 c1 01 00 00	 jmp	 $LN12@dict_popit
$LN10@dict_popit:

; 2425 :     }
; 2426 :     /* Convert split table to combined table */
; 2427 :     if (mp->ma_keys->dk_lookup == lookdict_split) {

  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR mp$[rsp]
  00065	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_split
  00070	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00074	75 2c		 jne	 SHORT $LN9@dict_popit

; 2428 :         if (dictresize(mp, DK_SIZE(mp->ma_keys))) {

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR mp$[rsp]
  0007b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mp$[rsp]
  00088	e8 00 00 00 00	 call	 dictresize
  0008d	85 c0		 test	 eax, eax
  0008f	74 11		 je	 SHORT $LN8@dict_popit

; 2429 :             Py_DECREF(res);

  00091	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00096	e8 00 00 00 00	 call	 _Py_DecRef

; 2430 :             return NULL;

  0009b	33 c0		 xor	 eax, eax
  0009d	e9 7f 01 00 00	 jmp	 $LN12@dict_popit
$LN8@dict_popit:
$LN9@dict_popit:

; 2431 :         }
; 2432 :     }
; 2433 :     ENSURE_ALLOWS_DELETIONS(mp);

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR mp$[rsp]
  000a7	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode_nodummy
  000b2	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000b6	75 14		 jne	 SHORT $LN7@dict_popit
  000b8	48 8b 44 24 50	 mov	 rax, QWORD PTR mp$[rsp]
  000bd	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode
  000c8	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN7@dict_popit:

; 2434 :     /* Set ep to "the first" dict entry with a value.  We abuse the hash
; 2435 :      * field of slot 0 to hold a search finger:
; 2436 :      * If slot 0 has a value, use slot 0.
; 2437 :      * Else slot 0 is being used to hold a search finger,
; 2438 :      * and we use its hash value as the first index to look.
; 2439 :      */
; 2440 :     ep = &mp->ma_keys->dk_entries[0];

  000cc	48 8b 44 24 50	 mov	 rax, QWORD PTR mp$[rsp]
  000d1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000d5	48 83 c0 20	 add	 rax, 32			; 00000020H
  000d9	48 89 44 24 30	 mov	 QWORD PTR ep$[rsp], rax

; 2441 :     if (ep->me_value == NULL) {

  000de	48 8b 44 24 30	 mov	 rax, QWORD PTR ep$[rsp]
  000e3	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  000e8	0f 85 8b 00 00
	00		 jne	 $LN6@dict_popit

; 2442 :         Py_ssize_t mask = DK_MASK(mp->ma_keys);

  000ee	48 8b 44 24 50	 mov	 rax, QWORD PTR mp$[rsp]
  000f3	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000f7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000fb	48 ff c8	 dec	 rax
  000fe	48 89 44 24 38	 mov	 QWORD PTR mask$22261[rsp], rax

; 2443 :         i = ep->me_hash;

  00103	48 8b 44 24 30	 mov	 rax, QWORD PTR ep$[rsp]
  00108	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010b	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax

; 2444 :         /* The hash field may be a real hash value, or it may be a
; 2445 :          * legit search finger, or it may be a once-legit search
; 2446 :          * finger that's out of bounds now because it wrapped around
; 2447 :          * or the table shrunk -- simply make sure it's in bounds now.
; 2448 :          */
; 2449 :         if (i > mask || i < 1)

  00110	48 8b 44 24 38	 mov	 rax, QWORD PTR mask$22261[rsp]
  00115	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0011a	7f 08		 jg	 SHORT $LN4@dict_popit
  0011c	48 83 7c 24 28
	01		 cmp	 QWORD PTR i$[rsp], 1
  00122	7d 09		 jge	 SHORT $LN5@dict_popit
$LN4@dict_popit:

; 2450 :             i = 1;              /* skip slot 0 */

  00124	48 c7 44 24 28
	01 00 00 00	 mov	 QWORD PTR i$[rsp], 1
$LN5@dict_popit:
$LN3@dict_popit:

; 2451 :         while ((ep = &mp->ma_keys->dk_entries[i])->me_value == NULL) {

  0012d	48 8b 44 24 50	 mov	 rax, QWORD PTR mp$[rsp]
  00132	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00136	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0013b	48 6b c9 18	 imul	 rcx, 24
  0013f	48 8d 44 08 20	 lea	 rax, QWORD PTR [rax+rcx+32]
  00144	48 89 44 24 30	 mov	 QWORD PTR ep$[rsp], rax
  00149	48 8b 44 24 30	 mov	 rax, QWORD PTR ep$[rsp]
  0014e	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00153	75 24		 jne	 SHORT $LN2@dict_popit

; 2452 :             i++;

  00155	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0015a	48 ff c0	 inc	 rax
  0015d	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax

; 2453 :             if (i > mask)

  00162	48 8b 44 24 38	 mov	 rax, QWORD PTR mask$22261[rsp]
  00167	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0016c	7e 09		 jle	 SHORT $LN1@dict_popit

; 2454 :                 i = 1;

  0016e	48 c7 44 24 28
	01 00 00 00	 mov	 QWORD PTR i$[rsp], 1
$LN1@dict_popit:

; 2455 :         }

  00177	eb b4		 jmp	 SHORT $LN3@dict_popit
$LN2@dict_popit:
$LN6@dict_popit:

; 2456 :     }
; 2457 :     PyTuple_SET_ITEM(res, 0, ep->me_key);

  00179	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0017e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ep$[rsp]
  00183	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00187	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 2458 :     PyTuple_SET_ITEM(res, 1, ep->me_value);

  0018b	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00190	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ep$[rsp]
  00195	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00199	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 2459 :     Py_INCREF(dummy);

  0019d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dummy_struct
  001a4	e8 00 00 00 00	 call	 _Py_IncRef

; 2460 :     ep->me_key = dummy;

  001a9	48 8b 44 24 30	 mov	 rax, QWORD PTR ep$[rsp]
  001ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_dummy_struct
  001b5	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2461 :     ep->me_value = NULL;

  001b9	48 8b 44 24 30	 mov	 rax, QWORD PTR ep$[rsp]
  001be	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 2462 :     mp->ma_used--;

  001c6	48 8b 44 24 50	 mov	 rax, QWORD PTR mp$[rsp]
  001cb	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001cf	48 ff c8	 dec	 rax
  001d2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mp$[rsp]
  001d7	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 2463 :     assert(mp->ma_keys->dk_entries[0].me_value == NULL);

  001db	48 8b 44 24 50	 mov	 rax, QWORD PTR mp$[rsp]
  001e0	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001e4	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  001e9	74 1c		 je	 SHORT $LN14@dict_popit
  001eb	41 b8 9f 09 00
	00		 mov	 r8d, 2463		; 0000099fH
  001f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FI@KEJDCAGN@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAe?$AAn?$AAt?$AAr?$AAi?$AAe?$AAs?$AA?$FL?$AA0?$AA?$FN?$AA?4?$AAm?$AAe?$AA_?$AAv?$AAa@
  001ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00205	33 c0		 xor	 eax, eax
$LN14@dict_popit:

; 2464 :     mp->ma_keys->dk_entries[0].me_hash = i + 1;  /* next place to start */

  00207	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0020c	48 ff c0	 inc	 rax
  0020f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mp$[rsp]
  00214	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00218	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 2465 :     return res;

  0021c	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN12@dict_popit:

; 2466 : }

  00221	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00225	c3		 ret	 0
dict_popitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@GCCGAII@dict_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_traverse DD imagerel dict_traverse
	DD	imagerel dict_traverse+760
	DD	imagerel $unwind$dict_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_traverse DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0O@GCCGAII@dict_traverse?$AA@
CONST	SEGMENT
??_C@_0O@GCCGAII@dict_traverse?$AA@ DB 'dict_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dict_traverse
_TEXT	SEGMENT
n$ = 32
i$ = 40
mp$ = 48
vret$22300 = 56
vret$22308 = 60
vret$22322 = 64
vret$22334 = 68
op$ = 96
visit$ = 104
arg$ = 112
dict_traverse PROC					; COMDAT

; 2470 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2471 :     Py_ssize_t i, n;
; 2472 :     PyDictObject *mp = (PyDictObject *)op;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  00018	48 89 44 24 30	 mov	 QWORD PTR mp$[rsp], rax

; 2473 :     if (mp->ma_keys->dk_lookup == lookdict) {

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00022	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  0002d	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00031	0f 85 4a 01 00
	00		 jne	 $LN38@dict_trave

; 2474 :         for (i = 0; i < DK_SIZE(mp->ma_keys); i++) {

  00037	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00040	eb 0d		 jmp	 SHORT $LN37@dict_trave
$LN36@dict_trave:
  00042	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00047	48 ff c0	 inc	 rax
  0004a	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN37@dict_trave:
  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00054	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00058	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005c	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00061	0f 8d 15 01 00
	00		 jge	 $LN35@dict_trave

; 2475 :             if (mp->ma_keys->dk_entries[i].me_value != NULL) {

  00067	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  0006c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00070	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00075	48 6b c9 18	 imul	 rcx, 24
  00079	48 83 7c 08 30
	00		 cmp	 QWORD PTR [rax+rcx+48], 0
  0007f	0f 84 f2 00 00
	00		 je	 $LN34@dict_trave
$LN33@dict_trave:

; 2476 :                 Py_VISIT(mp->ma_keys->dk_entries[i].me_value);

  00085	e8 00 00 00 00	 call	 _Py_PXCTX
  0008a	85 c0		 test	 eax, eax
  0008c	74 1c		 je	 SHORT $LN30@dict_trave
  0008e	45 33 c9	 xor	 r9d, r9d
  00091	41 b8 ac 09 00
	00		 mov	 r8d, 2476		; 000009acH
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GCCGAII@dict_traverse?$AA@
  000a5	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN30@dict_trave:
  000aa	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  000af	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000b8	48 6b c9 18	 imul	 rcx, 24
  000bc	48 83 7c 08 30
	00		 cmp	 QWORD PTR [rax+rcx+48], 0
  000c2	74 34		 je	 SHORT $LN29@dict_trave
  000c4	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  000c9	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000cd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000d2	48 6b c9 18	 imul	 rcx, 24
  000d6	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  000db	48 8b 4c 08 30	 mov	 rcx, QWORD PTR [rax+rcx+48]
  000e0	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  000e4	89 44 24 38	 mov	 DWORD PTR vret$22300[rsp], eax
  000e8	83 7c 24 38 00	 cmp	 DWORD PTR vret$22300[rsp], 0
  000ed	74 09		 je	 SHORT $LN28@dict_trave
  000ef	8b 44 24 38	 mov	 eax, DWORD PTR vret$22300[rsp]
  000f3	e9 fb 01 00 00	 jmp	 $LN39@dict_trave
$LN28@dict_trave:
$LN29@dict_trave:
  000f8	33 c0		 xor	 eax, eax
  000fa	85 c0		 test	 eax, eax
  000fc	75 87		 jne	 SHORT $LN33@dict_trave
$LN27@dict_trave:

; 2477 :                 Py_VISIT(mp->ma_keys->dk_entries[i].me_key);

  000fe	e8 00 00 00 00	 call	 _Py_PXCTX
  00103	85 c0		 test	 eax, eax
  00105	74 1c		 je	 SHORT $LN24@dict_trave
  00107	45 33 c9	 xor	 r9d, r9d
  0010a	41 b8 ad 09 00
	00		 mov	 r8d, 2477		; 000009adH
  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GCCGAII@dict_traverse?$AA@
  0011e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN24@dict_trave:
  00123	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00128	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0012c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00131	48 6b c9 18	 imul	 rcx, 24
  00135	48 83 7c 08 28
	00		 cmp	 QWORD PTR [rax+rcx+40], 0
  0013b	74 34		 je	 SHORT $LN23@dict_trave
  0013d	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00142	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00146	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0014b	48 6b c9 18	 imul	 rcx, 24
  0014f	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00154	48 8b 4c 08 28	 mov	 rcx, QWORD PTR [rax+rcx+40]
  00159	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  0015d	89 44 24 3c	 mov	 DWORD PTR vret$22308[rsp], eax
  00161	83 7c 24 3c 00	 cmp	 DWORD PTR vret$22308[rsp], 0
  00166	74 09		 je	 SHORT $LN22@dict_trave
  00168	8b 44 24 3c	 mov	 eax, DWORD PTR vret$22308[rsp]
  0016c	e9 82 01 00 00	 jmp	 $LN39@dict_trave
$LN22@dict_trave:
$LN23@dict_trave:
  00171	33 c0		 xor	 eax, eax
  00173	85 c0		 test	 eax, eax
  00175	75 87		 jne	 SHORT $LN27@dict_trave
$LN34@dict_trave:

; 2478 :             }
; 2479 :         }

  00177	e9 c6 fe ff ff	 jmp	 $LN36@dict_trave
$LN35@dict_trave:

; 2480 :     } else {

  0017c	e9 70 01 00 00	 jmp	 $LN21@dict_trave
$LN38@dict_trave:

; 2481 :         if (mp->ma_values != NULL) {

  00181	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00186	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0018b	0f 84 af 00 00
	00		 je	 $LN20@dict_trave

; 2482 :             for (i = 0, n = DK_SIZE(mp->ma_keys); i < n; i++) {

  00191	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0019a	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  0019f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001a3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001a7	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax
  001ac	eb 0d		 jmp	 SHORT $LN19@dict_trave
$LN18@dict_trave:
  001ae	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  001b3	48 ff c0	 inc	 rax
  001b6	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN19@dict_trave:
  001bb	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  001c0	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  001c5	7d 74		 jge	 SHORT $LN17@dict_trave
$LN16@dict_trave:

; 2483 :                 Py_VISIT(mp->ma_values[i]);

  001c7	e8 00 00 00 00	 call	 _Py_PXCTX
  001cc	85 c0		 test	 eax, eax
  001ce	74 1c		 je	 SHORT $LN13@dict_trave
  001d0	45 33 c9	 xor	 r9d, r9d
  001d3	41 b8 b3 09 00
	00		 mov	 r8d, 2483		; 000009b3H
  001d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GCCGAII@dict_traverse?$AA@
  001e7	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN13@dict_trave:
  001ec	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  001f1	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001f5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  001fa	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  001ff	74 2f		 je	 SHORT $LN12@dict_trave
  00201	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00206	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0020a	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  0020f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00214	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00218	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  0021c	89 44 24 40	 mov	 DWORD PTR vret$22322[rsp], eax
  00220	83 7c 24 40 00	 cmp	 DWORD PTR vret$22322[rsp], 0
  00225	74 09		 je	 SHORT $LN11@dict_trave
  00227	8b 44 24 40	 mov	 eax, DWORD PTR vret$22322[rsp]
  0022b	e9 c3 00 00 00	 jmp	 $LN39@dict_trave
$LN11@dict_trave:
$LN12@dict_trave:
  00230	33 c0		 xor	 eax, eax
  00232	85 c0		 test	 eax, eax
  00234	75 91		 jne	 SHORT $LN16@dict_trave

; 2484 :             }

  00236	e9 73 ff ff ff	 jmp	 $LN18@dict_trave
$LN17@dict_trave:

; 2485 :         }
; 2486 :         else {

  0023b	e9 b1 00 00 00	 jmp	 $LN10@dict_trave
$LN20@dict_trave:

; 2487 :             for (i = 0, n = DK_SIZE(mp->ma_keys); i < n; i++) {

  00240	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00249	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  0024e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00252	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00256	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax
  0025b	eb 0d		 jmp	 SHORT $LN9@dict_trave
$LN8@dict_trave:
  0025d	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00262	48 ff c0	 inc	 rax
  00265	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN9@dict_trave:
  0026a	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0026f	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00274	7d 7b		 jge	 SHORT $LN7@dict_trave
$LN6@dict_trave:

; 2488 :                 Py_VISIT(mp->ma_keys->dk_entries[i].me_value);

  00276	e8 00 00 00 00	 call	 _Py_PXCTX
  0027b	85 c0		 test	 eax, eax
  0027d	74 1c		 je	 SHORT $LN3@dict_trave
  0027f	45 33 c9	 xor	 r9d, r9d
  00282	41 b8 b8 09 00
	00		 mov	 r8d, 2488		; 000009b8H
  00288	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0028f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GCCGAII@dict_traverse?$AA@
  00296	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@dict_trave:
  0029b	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  002a0	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  002a4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  002a9	48 6b c9 18	 imul	 rcx, 24
  002ad	48 83 7c 08 30
	00		 cmp	 QWORD PTR [rax+rcx+48], 0
  002b3	74 31		 je	 SHORT $LN2@dict_trave
  002b5	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  002ba	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  002be	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  002c3	48 6b c9 18	 imul	 rcx, 24
  002c7	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  002cc	48 8b 4c 08 30	 mov	 rcx, QWORD PTR [rax+rcx+48]
  002d1	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  002d5	89 44 24 44	 mov	 DWORD PTR vret$22334[rsp], eax
  002d9	83 7c 24 44 00	 cmp	 DWORD PTR vret$22334[rsp], 0
  002de	74 06		 je	 SHORT $LN1@dict_trave
  002e0	8b 44 24 44	 mov	 eax, DWORD PTR vret$22334[rsp]
  002e4	eb 0d		 jmp	 SHORT $LN39@dict_trave
$LN1@dict_trave:
$LN2@dict_trave:
  002e6	33 c0		 xor	 eax, eax
  002e8	85 c0		 test	 eax, eax
  002ea	75 8a		 jne	 SHORT $LN6@dict_trave

; 2489 :             }

  002ec	e9 6c ff ff ff	 jmp	 $LN8@dict_trave
$LN7@dict_trave:
$LN10@dict_trave:
$LN21@dict_trave:

; 2490 :         }
; 2491 :     }
; 2492 :     return 0;

  002f1	33 c0		 xor	 eax, eax
$LN39@dict_trave:

; 2493 : }

  002f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002f7	c3		 ret	 0
dict_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_tp_clear DD imagerel dict_tp_clear
	DD	imagerel dict_tp_clear+26
	DD	imagerel $unwind$dict_tp_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_tp_clear DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_tp_clear
_TEXT	SEGMENT
op$ = 48
dict_tp_clear PROC					; COMDAT

; 2497 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2498 :     PyDict_Clear(op);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0000e	e8 00 00 00 00	 call	 PyDict_Clear

; 2499 :     return 0;

  00013	33 c0		 xor	 eax, eax

; 2500 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
dict_tp_clear ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_sizeof DD imagerel dict_sizeof
	DD	imagerel dict_sizeof+124
	DD	imagerel $unwind$dict_sizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_sizeof DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_sizeof
_TEXT	SEGMENT
res$ = 32
size$ = 40
mp$ = 64
dict_sizeof PROC					; COMDAT

; 2506 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2507 :     Py_ssize_t size, res;
; 2508 : 
; 2509 :     size = DK_SIZE(mp->ma_keys);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  0000e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00012	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00016	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax

; 2510 :     res = sizeof(PyDictObject);

  0001b	48 c7 44 24 20
	80 00 00 00	 mov	 QWORD PTR res$[rsp], 128 ; 00000080H

; 2511 :     if (mp->ma_values)

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00029	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0002e	74 13		 je	 SHORT $LN2@dict_sizeo

; 2512 :         res += size * sizeof(PyObject*);

  00030	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00035	48 8b 4c 24 28	 mov	 rcx, QWORD PTR size$[rsp]
  0003a	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  0003e	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN2@dict_sizeo:

; 2513 :     /* If the dictionary is split, the keys portion is accounted-for
; 2514 :        in the type object. */
; 2515 :     if (mp->ma_keys->dk_refcnt == 1)

  00043	48 8b 44 24 40	 mov	 rax, QWORD PTR mp$[rsp]
  00048	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004c	48 83 38 01	 cmp	 QWORD PTR [rax], 1
  00050	75 1b		 jne	 SHORT $LN1@dict_sizeo

; 2516 :         res += sizeof(PyDictKeysObject) + (size-1) * sizeof(PyDictKeyEntry);

  00052	48 8b 44 24 28	 mov	 rax, QWORD PTR size$[rsp]
  00057	48 ff c8	 dec	 rax
  0005a	48 6b c0 18	 imul	 rax, 24
  0005e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00063	48 8d 44 01 38	 lea	 rax, QWORD PTR [rcx+rax+56]
  00068	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@dict_sizeo:

; 2517 :     return PyLong_FromSsize_t(res);

  0006d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00072	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 2518 : }

  00077	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007b	c3		 ret	 0
dict_sizeof ENDP
_TEXT	ENDS
PUBLIC	_PyDict_KeysSize
; Function compile flags: /Odtp
;	COMDAT _PyDict_KeysSize
_TEXT	SEGMENT
keys$ = 8
_PyDict_KeysSize PROC					; COMDAT

; 2522 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2523 :     return sizeof(PyDictKeysObject) + (DK_SIZE(keys)-1) * sizeof(PyDictKeyEntry);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR keys$[rsp]
  0000a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0000e	48 ff c8	 dec	 rax
  00011	48 6b c0 18	 imul	 rax, 24
  00015	48 83 c0 38	 add	 rax, 56			; 00000038H

; 2524 : }

  00019	c3		 ret	 0
_PyDict_KeysSize ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_Contains DD imagerel $LN10
	DD	imagerel $LN10+195
	DD	imagerel $unwind$PyDict_Contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_Contains DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_Contains
_TEXT	SEGMENT
mp$ = 32
value_addr$ = 40
ep$ = 48
hash$ = 56
tv81 = 64
tv80 = 68
op$ = 96
key$ = 104
PyDict_Contains PROC					; COMDAT

; 2611 : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2612 :     Py_hash_t hash;
; 2613 :     PyDictObject *mp = (PyDictObject *)op;

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR mp$[rsp], rax

; 2614 :     PyDictKeyEntry *ep;
; 2615 :     PyObject **value_addr;
; 2616 : 
; 2617 :     if (!PyUnicode_CheckExact(key) ||
; 2618 :         (hash = ((PyASCIIObject *) key)->hash) == -1) {

  00018	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0001f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  00024	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00028	75 16		 jne	 SHORT $LN2@PyDict_Con
  0002a	48 8b 44 24 68	 mov	 rax, QWORD PTR key$[rsp]
  0002f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00033	48 89 44 24 38	 mov	 QWORD PTR hash$[rsp], rax
  00038	48 83 7c 24 38
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  0003e	75 1e		 jne	 SHORT $LN3@PyDict_Con
$LN2@PyDict_Con:

; 2619 :         hash = PyObject_Hash(key);

  00040	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  00045	e8 00 00 00 00	 call	 PyObject_Hash
  0004a	48 89 44 24 38	 mov	 QWORD PTR hash$[rsp], rax

; 2620 :         if (hash == -1)

  0004f	48 83 7c 24 38
	ff		 cmp	 QWORD PTR hash$[rsp], -1
  00055	75 07		 jne	 SHORT $LN1@PyDict_Con

; 2621 :             return -1;

  00057	b8 ff ff ff ff	 mov	 eax, -1
  0005c	eb 60		 jmp	 SHORT $LN4@PyDict_Con
$LN1@PyDict_Con:
$LN3@PyDict_Con:

; 2622 :     }
; 2623 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  0005e	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  00063	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00067	4c 8d 4c 24 28	 lea	 r9, QWORD PTR value_addr$[rsp]
  0006c	4c 8b 44 24 38	 mov	 r8, QWORD PTR hash$[rsp]
  00071	48 8b 54 24 68	 mov	 rdx, QWORD PTR key$[rsp]
  00076	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mp$[rsp]
  0007b	ff 50 10	 call	 QWORD PTR [rax+16]
  0007e	48 89 44 24 30	 mov	 QWORD PTR ep$[rsp], rax

; 2624 :     return (ep == NULL) ? -1 : (*value_addr != NULL);

  00083	48 83 7c 24 30
	00		 cmp	 QWORD PTR ep$[rsp], 0
  00089	75 0a		 jne	 SHORT $LN8@PyDict_Con
  0008b	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR tv81[rsp], -1
  00093	eb 25		 jmp	 SHORT $LN9@PyDict_Con
$LN8@PyDict_Con:
  00095	48 8b 44 24 28	 mov	 rax, QWORD PTR value_addr$[rsp]
  0009a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0009e	74 0a		 je	 SHORT $LN6@PyDict_Con
  000a0	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  000a8	eb 08		 jmp	 SHORT $LN7@PyDict_Con
$LN6@PyDict_Con:
  000aa	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN7@PyDict_Con:
  000b2	8b 44 24 44	 mov	 eax, DWORD PTR tv80[rsp]
  000b6	89 44 24 40	 mov	 DWORD PTR tv81[rsp], eax
$LN9@PyDict_Con:
  000ba	8b 44 24 40	 mov	 eax, DWORD PTR tv81[rsp]
$LN4@PyDict_Con:

; 2625 : }

  000be	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c2	c3		 ret	 0
PyDict_Contains ENDP
_TEXT	ENDS
PUBLIC	_PyDict_Contains
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_Contains DD imagerel $LN7
	DD	imagerel $LN7+130
	DD	imagerel $unwind$_PyDict_Contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_Contains DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyDict_Contains
_TEXT	SEGMENT
mp$ = 32
value_addr$ = 40
ep$ = 48
tv74 = 56
tv73 = 60
op$ = 80
key$ = 88
hash$ = 96
_PyDict_Contains PROC					; COMDAT

; 2630 : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2631 :     PyDictObject *mp = (PyDictObject *)op;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR mp$[rsp], rax

; 2632 :     PyDictKeyEntry *ep;
; 2633 :     PyObject **value_addr;
; 2634 : 
; 2635 :     ep = (mp->ma_keys->dk_lookup)(mp, key, hash, &value_addr);

  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR mp$[rsp]
  00022	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00026	4c 8d 4c 24 28	 lea	 r9, QWORD PTR value_addr$[rsp]
  0002b	4c 8b 44 24 60	 mov	 r8, QWORD PTR hash$[rsp]
  00030	48 8b 54 24 58	 mov	 rdx, QWORD PTR key$[rsp]
  00035	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mp$[rsp]
  0003a	ff 50 10	 call	 QWORD PTR [rax+16]
  0003d	48 89 44 24 30	 mov	 QWORD PTR ep$[rsp], rax

; 2636 :     return (ep == NULL) ? -1 : (*value_addr != NULL);

  00042	48 83 7c 24 30
	00		 cmp	 QWORD PTR ep$[rsp], 0
  00048	75 0a		 jne	 SHORT $LN5@PyDict_Con@2
  0004a	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00052	eb 25		 jmp	 SHORT $LN6@PyDict_Con@2
$LN5@PyDict_Con@2:
  00054	48 8b 44 24 28	 mov	 rax, QWORD PTR value_addr$[rsp]
  00059	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0005d	74 0a		 je	 SHORT $LN3@PyDict_Con@2
  0005f	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  00067	eb 08		 jmp	 SHORT $LN4@PyDict_Con@2
$LN3@PyDict_Con@2:
  00069	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN4@PyDict_Con@2:
  00071	8b 44 24 3c	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 38	 mov	 DWORD PTR tv74[rsp], eax
$LN6@PyDict_Con@2:
  00079	8b 44 24 38	 mov	 eax, DWORD PTR tv74[rsp]

; 2637 : }

  0007d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00081	c3		 ret	 0
_PyDict_Contains ENDP
_TEXT	ENDS
PUBLIC	??_C@_08LCOIKHBG@dict_new?$AA@			; `string'
PUBLIC	??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_new DD imagerel dict_new
	DD	imagerel dict_new+503
	DD	imagerel $unwind$dict_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_new DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_08LCOIKHBG@dict_new?$AA@
CONST	SEGMENT
??_C@_08LCOIKHBG@dict_new?$AA@ DB 'dict_new', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@
CONST	SEGMENT
??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@ DB 't'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 't', 00H, 'p', 00H, '_', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dict_new
_TEXT	SEGMENT
self$ = 48
d$22452 = 56
g$22463 = 64
tv136 = 72
type$ = 96
args$ = 104
kwds$ = 112
dict_new PROC						; COMDAT

; 2655 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2656 :     PyObject *self;
; 2657 : 
; 2658 :     assert(type != NULL && type->tp_alloc != NULL);

  00013	48 83 7c 24 60
	00		 cmp	 QWORD PTR type$[rsp], 0
  00019	74 0f		 je	 SHORT $LN10@dict_new
  0001b	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00020	48 83 b8 88 01
	00 00 00	 cmp	 QWORD PTR [rax+392], 0
  00028	75 1c		 jne	 SHORT $LN11@dict_new
$LN10@dict_new:
  0002a	41 b8 62 0a 00
	00		 mov	 r8d, 2658		; 00000a62H
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00044	33 c0		 xor	 eax, eax
$LN11@dict_new:

; 2659 :     self = type->tp_alloc(type, 0);

  00046	33 d2		 xor	 edx, edx
  00048	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  0004d	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00052	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00058	48 89 44 24 30	 mov	 QWORD PTR self$[rsp], rax

; 2660 :     if (self != NULL) {

  0005d	48 83 7c 24 30
	00		 cmp	 QWORD PTR self$[rsp], 0
  00063	0f 84 84 01 00
	00		 je	 $LN7@dict_new

; 2661 :         PyDictObject *d = (PyDictObject *)self;

  00069	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0006e	48 89 44 24 38	 mov	 QWORD PTR d$22452[rsp], rax

; 2662 :         d->ma_keys = new_keys_object(PyDict_MINSIZE_COMBINED);

  00073	b9 08 00 00 00	 mov	 ecx, 8
  00078	e8 00 00 00 00	 call	 new_keys_object
  0007d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR d$22452[rsp]
  00082	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 2663 :         /* XXX - Should we raise a no-memory error? */
; 2664 :         if (d->ma_keys == NULL) {

  00086	48 8b 44 24 38	 mov	 rax, QWORD PTR d$22452[rsp]
  0008b	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00090	75 4d		 jne	 SHORT $LN6@dict_new

; 2665 :             DK_INCREF(Py_EMPTY_KEYS);

  00092	e8 00 00 00 00	 call	 _Py_PXCTX
  00097	85 c0		 test	 eax, eax
  00099	74 02		 je	 SHORT $LN12@dict_new
  0009b	eb 11		 jmp	 SHORT $LN13@dict_new
$LN12@dict_new:
  0009d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  000a4	48 ff c0	 inc	 rax
  000a7	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN13@dict_new:
  000ae	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR empty_keys_struct
  000b5	48 ff c0	 inc	 rax
  000b8	48 89 05 00 00
	00 00		 mov	 QWORD PTR empty_keys_struct, rax

; 2666 :             d->ma_keys = Py_EMPTY_KEYS;

  000bf	48 8b 44 24 38	 mov	 rax, QWORD PTR d$22452[rsp]
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:empty_keys_struct
  000cb	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 2667 :             d->ma_values = empty_values;

  000cf	48 8b 44 24 38	 mov	 rax, QWORD PTR d$22452[rsp]
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:empty_values
  000db	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx
$LN6@dict_new:

; 2668 :         }
; 2669 :         d->ma_used = 0;

  000df	48 8b 44 24 38	 mov	 rax, QWORD PTR d$22452[rsp]
  000e4	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 2670 :         /* The object has been implicitly tracked by tp_alloc */
; 2671 :         if (type == &PyDict_Type)

  000ec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  000f3	48 39 44 24 60	 cmp	 QWORD PTR type$[rsp], rax
  000f8	0f 85 ef 00 00
	00		 jne	 $LN5@dict_new

; 2672 :             _PyObject_GC_UNTRACK(d);

  000fe	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00106	4c 8b 4c 24 38	 mov	 r9, QWORD PTR d$22452[rsp]
  0010b	41 b8 70 0a 00
	00		 mov	 r8d, 2672		; 00000a70H
  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LCOIKHBG@dict_new?$AA@
  0011f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00124	85 c0		 test	 eax, eax
  00126	0f 85 c1 00 00
	00		 jne	 $LN4@dict_new
$LN3@dict_new:
  0012c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00134	4c 8b 4c 24 38	 mov	 r9, QWORD PTR d$22452[rsp]
  00139	41 b8 70 0a 00
	00		 mov	 r8d, 2672		; 00000a70H
  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LCOIKHBG@dict_new?$AA@
  0014d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00152	85 c0		 test	 eax, eax
  00154	74 0b		 je	 SHORT $LN14@dict_new
  00156	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv136[rsp], 0
  0015f	eb 0e		 jmp	 SHORT $LN15@dict_new
$LN14@dict_new:
  00161	48 8b 44 24 38	 mov	 rax, QWORD PTR d$22452[rsp]
  00166	48 83 e8 18	 sub	 rax, 24
  0016a	48 89 44 24 48	 mov	 QWORD PTR tv136[rsp], rax
$LN15@dict_new:
  0016f	48 8b 44 24 48	 mov	 rax, QWORD PTR tv136[rsp]
  00174	48 89 44 24 40	 mov	 QWORD PTR g$22463[rsp], rax
  00179	48 8b 44 24 40	 mov	 rax, QWORD PTR g$22463[rsp]
  0017e	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00183	75 1c		 jne	 SHORT $LN16@dict_new
  00185	41 b8 70 0a 00
	00		 mov	 r8d, 2672		; 00000a70H
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0019f	33 c0		 xor	 eax, eax
$LN16@dict_new:
  001a1	48 8b 44 24 40	 mov	 rax, QWORD PTR g$22463[rsp]
  001a6	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  001ae	48 8b 44 24 40	 mov	 rax, QWORD PTR g$22463[rsp]
  001b3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001b7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$22463[rsp]
  001bc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001bf	48 89 08	 mov	 QWORD PTR [rax], rcx
  001c2	48 8b 44 24 40	 mov	 rax, QWORD PTR g$22463[rsp]
  001c7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ca	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$22463[rsp]
  001cf	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001d3	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001d7	48 8b 44 24 40	 mov	 rax, QWORD PTR g$22463[rsp]
  001dc	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  001e3	33 c0		 xor	 eax, eax
  001e5	85 c0		 test	 eax, eax
  001e7	0f 85 3f ff ff
	ff		 jne	 $LN3@dict_new
$LN4@dict_new:
$LN5@dict_new:
$LN7@dict_new:

; 2673 :     }
; 2674 :     return self;

  001ed	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]

; 2675 : }

  001f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001f6	c3		 ret	 0
dict_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_init DD imagerel dict_init
	DD	imagerel dict_init+51
	DD	imagerel $unwind$dict_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_init DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_init
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
dict_init PROC						; COMDAT

; 2679 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2680 :     return dict_update_common(self, args, kwds, "dict");

  00013	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_04BCIDKIGN@dict?$AA@
  0001a	4c 8b 44 24 40	 mov	 r8, QWORD PTR kwds$[rsp]
  0001f	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  00024	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00029	e8 00 00 00 00	 call	 dict_update_common

; 2681 : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
dict_init ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_iter DD imagerel dict_iter
	DD	imagerel dict_iter+31
	DD	imagerel $unwind$dict_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_iter DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_iter
_TEXT	SEGMENT
dict$ = 48
dict_iter PROC						; COMDAT

; 2685 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2686 :     return dictiter_new(dict, &PyDictIterKey_Type);

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictIterKey_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  00015	e8 00 00 00 00	 call	 dictiter_new

; 2687 : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
dict_iter ENDP
_TEXT	ENDS
PUBLIC	_PyDict_GetItemId
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_GetItemId DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$_PyDict_GetItemId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_GetItemId DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyDict_GetItemId
_TEXT	SEGMENT
kv$ = 32
dp$ = 64
key$ = 72
_PyDict_GetItemId PROC					; COMDAT

; 2745 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2746 :     PyObject *kv;
; 2747 :     kv = _PyUnicode_FromId(key); /* borrowed */

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00013	e8 00 00 00 00	 call	 _PyUnicode_FromId
  00018	48 89 44 24 20	 mov	 QWORD PTR kv$[rsp], rax

; 2748 :     if (kv == NULL)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR kv$[rsp], 0
  00023	75 04		 jne	 SHORT $LN1@PyDict_Get@4

; 2749 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 0f		 jmp	 SHORT $LN2@PyDict_Get@4
$LN1@PyDict_Get@4:

; 2750 :     return PyDict_GetItem(dp, kv);

  00029	48 8b 54 24 20	 mov	 rdx, QWORD PTR kv$[rsp]
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dp$[rsp]
  00033	e8 00 00 00 00	 call	 PyDict_GetItem
$LN2@PyDict_Get@4:

; 2751 : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
_PyDict_GetItemId ENDP
_TEXT	ENDS
PUBLIC	PyDict_GetItemString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_GetItemString DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$PyDict_GetItemString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_GetItemString DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_GetItemString
_TEXT	SEGMENT
kv$ = 32
rv$ = 40
v$ = 64
key$ = 72
PyDict_GetItemString PROC				; COMDAT

; 2757 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2758 :     PyObject *kv, *rv;
; 2759 :     kv = PyUnicode_FromString(key);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00013	e8 00 00 00 00	 call	 PyUnicode_FromString
  00018	48 89 44 24 20	 mov	 QWORD PTR kv$[rsp], rax

; 2760 :     if (kv == NULL)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR kv$[rsp], 0
  00023	75 04		 jne	 SHORT $LN1@PyDict_Get@5

; 2761 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 23		 jmp	 SHORT $LN2@PyDict_Get@5
$LN1@PyDict_Get@5:

; 2762 :     rv = PyDict_GetItem(v, kv);

  00029	48 8b 54 24 20	 mov	 rdx, QWORD PTR kv$[rsp]
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00033	e8 00 00 00 00	 call	 PyDict_GetItem
  00038	48 89 44 24 28	 mov	 QWORD PTR rv$[rsp], rax

; 2763 :     Py_DECREF(kv);

  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR kv$[rsp]
  00042	e8 00 00 00 00	 call	 _Py_DecRef

; 2764 :     return rv;

  00047	48 8b 44 24 28	 mov	 rax, QWORD PTR rv$[rsp]
$LN2@PyDict_Get@5:

; 2765 : }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
PyDict_GetItemString ENDP
_TEXT	ENDS
PUBLIC	_PyDict_SetItemId
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_SetItemId DD imagerel $LN4
	DD	imagerel $LN4+74
	DD	imagerel $unwind$_PyDict_SetItemId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_SetItemId DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyDict_SetItemId
_TEXT	SEGMENT
kv$ = 32
v$ = 64
key$ = 72
item$ = 80
_PyDict_SetItemId PROC					; COMDAT

; 2769 : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2770 :     PyObject *kv;
; 2771 :     kv = _PyUnicode_FromId(key); /* borrowed */

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00018	e8 00 00 00 00	 call	 _PyUnicode_FromId
  0001d	48 89 44 24 20	 mov	 QWORD PTR kv$[rsp], rax

; 2772 :     if (kv == NULL)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR kv$[rsp], 0
  00028	75 07		 jne	 SHORT $LN1@PyDict_Set@2

; 2773 :         return -1;

  0002a	b8 ff ff ff ff	 mov	 eax, -1
  0002f	eb 14		 jmp	 SHORT $LN2@PyDict_Set@2
$LN1@PyDict_Set@2:

; 2774 :     return PyDict_SetItem(v, kv, item);

  00031	4c 8b 44 24 50	 mov	 r8, QWORD PTR item$[rsp]
  00036	48 8b 54 24 20	 mov	 rdx, QWORD PTR kv$[rsp]
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00040	e8 00 00 00 00	 call	 PyDict_SetItem
$LN2@PyDict_Set@2:

; 2775 : }

  00045	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00049	c3		 ret	 0
_PyDict_SetItemId ENDP
_TEXT	ENDS
PUBLIC	PyDict_SetItemString
EXTRN	PyUnicode_InternInPlace:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_SetItemString DD imagerel $LN4
	DD	imagerel $LN4+102
	DD	imagerel $unwind$PyDict_SetItemString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_SetItemString DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_SetItemString
_TEXT	SEGMENT
kv$ = 32
err$ = 40
v$ = 64
key$ = 72
item$ = 80
PyDict_SetItemString PROC				; COMDAT

; 2779 : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2780 :     PyObject *kv;
; 2781 :     int err;
; 2782 :     kv = PyUnicode_FromString(key);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00018	e8 00 00 00 00	 call	 PyUnicode_FromString
  0001d	48 89 44 24 20	 mov	 QWORD PTR kv$[rsp], rax

; 2783 :     if (kv == NULL)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR kv$[rsp], 0
  00028	75 07		 jne	 SHORT $LN1@PyDict_Set@3

; 2784 :         return -1;

  0002a	b8 ff ff ff ff	 mov	 eax, -1
  0002f	eb 30		 jmp	 SHORT $LN2@PyDict_Set@3
$LN1@PyDict_Set@3:

; 2785 :     PyUnicode_InternInPlace(&kv); /* XXX Should we really? */

  00031	48 8d 4c 24 20	 lea	 rcx, QWORD PTR kv$[rsp]
  00036	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 2786 :     err = PyDict_SetItem(v, kv, item);

  0003b	4c 8b 44 24 50	 mov	 r8, QWORD PTR item$[rsp]
  00040	48 8b 54 24 20	 mov	 rdx, QWORD PTR kv$[rsp]
  00045	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0004a	e8 00 00 00 00	 call	 PyDict_SetItem
  0004f	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 2787 :     Py_DECREF(kv);

  00053	48 8b 4c 24 20	 mov	 rcx, QWORD PTR kv$[rsp]
  00058	e8 00 00 00 00	 call	 _Py_DecRef

; 2788 :     return err;

  0005d	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]
$LN2@PyDict_Set@3:

; 2789 : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
PyDict_SetItemString ENDP
_TEXT	ENDS
PUBLIC	PyDict_DelItemString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDict_DelItemString DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$PyDict_DelItemString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDict_DelItemString DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDict_DelItemString
_TEXT	SEGMENT
kv$ = 32
err$ = 40
v$ = 64
key$ = 72
PyDict_DelItemString PROC				; COMDAT

; 2793 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2794 :     PyObject *kv;
; 2795 :     int err;
; 2796 :     kv = PyUnicode_FromString(key);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00013	e8 00 00 00 00	 call	 PyUnicode_FromString
  00018	48 89 44 24 20	 mov	 QWORD PTR kv$[rsp], rax

; 2797 :     if (kv == NULL)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR kv$[rsp], 0
  00023	75 07		 jne	 SHORT $LN1@PyDict_Del@2

; 2798 :         return -1;

  00025	b8 ff ff ff ff	 mov	 eax, -1
  0002a	eb 21		 jmp	 SHORT $LN2@PyDict_Del@2
$LN1@PyDict_Del@2:

; 2799 :     err = PyDict_DelItem(v, kv);

  0002c	48 8b 54 24 20	 mov	 rdx, QWORD PTR kv$[rsp]
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00036	e8 00 00 00 00	 call	 PyDict_DelItem
  0003b	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 2800 :     Py_DECREF(kv);

  0003f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR kv$[rsp]
  00044	e8 00 00 00 00	 call	 _Py_DecRef

; 2801 :     return err;

  00049	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]
$LN2@PyDict_Del@2:

; 2802 : }

  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
PyDict_DelItemString ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@LFMINDDK@dictiter_new?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_new DD imagerel dictiter_new
	DD	imagerel dictiter_new+495
	DD	imagerel $unwind$dictiter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_new DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0N@LFMINDDK@dictiter_new?$AA@
CONST	SEGMENT
??_C@_0N@LFMINDDK@dictiter_new?$AA@ DB 'dictiter_new', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dictiter_new
_TEXT	SEGMENT
di$ = 48
g$22582 = 56
tv70 = 64
tv136 = 72
dict$ = 96
itertype$ = 104
dictiter_new PROC					; COMDAT

; 2817 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2818 :     dictiterobject *di;
; 2819 :     di = PyObject_GC_New(dictiterobject, itertype);

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 11		 je	 SHORT $LN12@dictiter_n
  00017	48 8b 4c 24 68	 mov	 rcx, QWORD PTR itertype$[rsp]
  0001c	e8 00 00 00 00	 call	 _PxObject_New
  00021	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
  00026	eb 0f		 jmp	 SHORT $LN13@dictiter_n
$LN12@dictiter_n:
  00028	48 8b 4c 24 68	 mov	 rcx, QWORD PTR itertype$[rsp]
  0002d	e8 00 00 00 00	 call	 _PyObject_GC_New
  00032	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
$LN13@dictiter_n:
  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR tv70[rsp]
  0003c	48 89 44 24 30	 mov	 QWORD PTR di$[rsp], rax

; 2820 :     if (di == NULL)

  00041	48 83 7c 24 30
	00		 cmp	 QWORD PTR di$[rsp], 0
  00047	75 07		 jne	 SHORT $LN9@dictiter_n

; 2821 :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	e9 9a 01 00 00	 jmp	 $LN10@dictiter_n
$LN9@dictiter_n:

; 2822 :     Py_INCREF(dict);

  00050	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dict$[rsp]
  00055	e8 00 00 00 00	 call	 _Py_IncRef

; 2823 :     di->di_dict = dict;

  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
  0005f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dict$[rsp]
  00064	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 2824 :     di->di_used = dict->ma_used;

  00068	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
  0006d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dict$[rsp]
  00072	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00076	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 2825 :     di->di_pos = 0;

  0007a	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
  0007f	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 2826 :     di->len = dict->ma_used;

  00087	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
  0008c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dict$[rsp]
  00091	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00095	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 2827 :     if (itertype == &PyDictIterItem_Type) {

  0009c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDictIterItem_Type
  000a3	48 39 44 24 68	 cmp	 QWORD PTR itertype$[rsp], rax
  000a8	75 40		 jne	 SHORT $LN8@dictiter_n

; 2828 :         di->di_result = PyTuple_Pack(2, Py_None, Py_None);

  000aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  000b8	b9 02 00 00 00	 mov	 ecx, 2
  000bd	e8 00 00 00 00	 call	 PyTuple_Pack
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR di$[rsp]
  000c7	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 2829 :         if (di->di_result == NULL) {

  000cb	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
  000d0	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  000d5	75 11		 jne	 SHORT $LN7@dictiter_n

; 2830 :             Py_DECREF(di);

  000d7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR di$[rsp]
  000dc	e8 00 00 00 00	 call	 _Py_DecRef

; 2831 :             return NULL;

  000e1	33 c0		 xor	 eax, eax
  000e3	e9 02 01 00 00	 jmp	 $LN10@dictiter_n
$LN7@dictiter_n:

; 2832 :         }
; 2833 :     }
; 2834 :     else

  000e8	eb 0d		 jmp	 SHORT $LN6@dictiter_n
$LN8@dictiter_n:

; 2835 :         di->di_result = NULL;

  000ea	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
  000ef	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
$LN6@dictiter_n:

; 2836 :     _PyObject_GC_TRACK(di);

  000f7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ff	4c 8b 4c 24 30	 mov	 r9, QWORD PTR di$[rsp]
  00104	41 b8 14 0b 00
	00		 mov	 r8d, 2836		; 00000b14H
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LFMINDDK@dictiter_new?$AA@
  00118	e8 00 00 00 00	 call	 _PyParallel_Guard
  0011d	85 c0		 test	 eax, eax
  0011f	0f 85 c0 00 00
	00		 jne	 $LN5@dictiter_n
$LN4@dictiter_n:
  00125	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0012d	4c 8b 4c 24 30	 mov	 r9, QWORD PTR di$[rsp]
  00132	41 b8 14 0b 00
	00		 mov	 r8d, 2836		; 00000b14H
  00138	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0013f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LFMINDDK@dictiter_new?$AA@
  00146	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014b	85 c0		 test	 eax, eax
  0014d	74 0b		 je	 SHORT $LN14@dictiter_n
  0014f	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv136[rsp], 0
  00158	eb 0e		 jmp	 SHORT $LN15@dictiter_n
$LN14@dictiter_n:
  0015a	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
  0015f	48 83 e8 18	 sub	 rax, 24
  00163	48 89 44 24 48	 mov	 QWORD PTR tv136[rsp], rax
$LN15@dictiter_n:
  00168	48 8b 44 24 48	 mov	 rax, QWORD PTR tv136[rsp]
  0016d	48 89 44 24 38	 mov	 QWORD PTR g$22582[rsp], rax
  00172	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22582[rsp]
  00177	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0017c	74 0c		 je	 SHORT $LN1@dictiter_n
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00185	e8 00 00 00 00	 call	 Py_FatalError
$LN1@dictiter_n:
  0018a	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22582[rsp]
  0018f	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  00197	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22582[rsp]
  0019c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  001a3	48 89 08	 mov	 QWORD PTR [rax], rcx
  001a6	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22582[rsp]
  001ab	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  001b2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001b6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001ba	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22582[rsp]
  001bf	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$22582[rsp]
  001c8	48 89 08	 mov	 QWORD PTR [rax], rcx
  001cb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  001d2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$22582[rsp]
  001d7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001db	33 c0		 xor	 eax, eax
  001dd	85 c0		 test	 eax, eax
  001df	0f 85 40 ff ff
	ff		 jne	 $LN4@dictiter_n
$LN5@dictiter_n:

; 2837 :     return (PyObject *)di;

  001e5	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
$LN10@dictiter_n:

; 2838 : }

  001ea	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ee	c3		 ret	 0
dictiter_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_dealloc DD imagerel dictiter_dealloc
	DD	imagerel dictiter_dealloc+88
	DD	imagerel $unwind$dictiter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictiter_dealloc
_TEXT	SEGMENT
di$ = 48
dictiter_dealloc PROC					; COMDAT

; 2842 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN8@dictiter_d:

; 2843 :     Py_XDECREF(di->di_dict);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 0e		 je	 SHORT $LN5@dictiter_d
  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
  0001a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0001e	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@dictiter_d:
  00023	33 c0		 xor	 eax, eax
  00025	85 c0		 test	 eax, eax
  00027	75 e0		 jne	 SHORT $LN8@dictiter_d
$LN4@dictiter_d:

; 2844 :     Py_XDECREF(di->di_result);

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
  0002e	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00033	74 0e		 je	 SHORT $LN1@dictiter_d
  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR di$[rsp]
  0003a	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0003e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@dictiter_d:
  00043	33 c0		 xor	 eax, eax
  00045	85 c0		 test	 eax, eax
  00047	75 e0		 jne	 SHORT $LN4@dictiter_d

; 2845 :     PyObject_GC_Del(di);

  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR di$[rsp]
  0004e	e8 00 00 00 00	 call	 PyObject_GC_Del

; 2846 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
dictiter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@JBECEFGB@dictiter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_traverse DD imagerel dictiter_traverse
	DD	imagerel dictiter_traverse+206
	DD	imagerel $unwind$dictiter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BC@JBECEFGB@dictiter_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@JBECEFGB@dictiter_traverse?$AA@ DB 'dictiter_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dictiter_traverse
_TEXT	SEGMENT
vret$22615 = 32
vret$22623 = 36
di$ = 64
visit$ = 72
arg$ = 80
dictiter_traverse PROC					; COMDAT

; 2850 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@dictiter_t:

; 2851 :     Py_VISIT(di->di_dict);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@dictiter_t
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 23 0b 00
	00		 mov	 r8d, 2851		; 00000b23H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JBECEFGB@dictiter_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@dictiter_t:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR di$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN8@dictiter_t
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR di$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$22615[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$22615[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@dictiter_t
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$22615[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@dictiter_t
$LN7@dictiter_t:
$LN8@dictiter_t:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@dictiter_t
$LN6@dictiter_t:

; 2852 :     Py_VISIT(di->di_result);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@dictiter_t
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 24 0b 00
	00		 mov	 r8d, 2852		; 00000b24H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JBECEFGB@dictiter_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@dictiter_t:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR di$[rsp]
  00097	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0009c	74 23		 je	 SHORT $LN2@dictiter_t
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR di$[rsp]
  000a8	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$22623[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$22623[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@dictiter_t
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$22623[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@dictiter_t
$LN1@dictiter_t:
$LN2@dictiter_t:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@dictiter_t

; 2853 :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@dictiter_t:

; 2854 : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
dictiter_traverse ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_len DD imagerel dictiter_len
	DD	imagerel dictiter_len+86
	DD	imagerel $unwind$dictiter_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_len DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictiter_len
_TEXT	SEGMENT
len$ = 32
di$ = 64
dictiter_len PROC					; COMDAT

; 2858 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2859 :     Py_ssize_t len = 0;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR len$[rsp], 0

; 2860 :     if (di->di_dict != NULL && di->di_used == di->di_dict->ma_used)

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR di$[rsp]
  00017	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0001c	74 29		 je	 SHORT $LN1@dictiter_l
  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR di$[rsp]
  00023	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR di$[rsp]
  0002c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00030	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00034	75 11		 jne	 SHORT $LN1@dictiter_l

; 2861 :         len = di->len;

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR di$[rsp]
  0003b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00042	48 89 44 24 20	 mov	 QWORD PTR len$[rsp], rax
$LN1@dictiter_l:

; 2862 :     return PyLong_FromSize_t(len);

  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR len$[rsp]
  0004c	e8 00 00 00 00	 call	 PyLong_FromSize_t

; 2863 : }

  00051	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00055	c3		 ret	 0
dictiter_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_iternextkey DD imagerel dictiter_iternextkey
	DD	imagerel dictiter_iternextkey+474
	DD	imagerel $unwind$dictiter_iternextkey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_iternextkey DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@
CONST	SEGMENT
??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@ DB 'dictionary c'
	DB	'hanged size during iteration', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dictiter_iternextkey
_TEXT	SEGMENT
i$ = 32
mask$ = 40
key$ = 48
offset$ = 56
value_ptr$ = 64
k$ = 72
d$ = 80
di$ = 112
dictiter_iternextkey PROC				; COMDAT

; 2882 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2883 :     PyObject *key;
; 2884 :     register Py_ssize_t i, mask, offset;
; 2885 :     register PyDictKeysObject *k;
; 2886 :     PyDictObject *d = di->di_dict;

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 89 44 24 50	 mov	 QWORD PTR d$[rsp], rax

; 2887 :     PyObject **value_ptr;
; 2888 : 
; 2889 :     if (d == NULL)

  00017	48 83 7c 24 50
	00		 cmp	 QWORD PTR d$[rsp], 0
  0001d	75 07		 jne	 SHORT $LN8@dictiter_i

; 2890 :         return NULL;

  0001f	33 c0		 xor	 eax, eax
  00021	e9 af 01 00 00	 jmp	 $LN9@dictiter_i
$LN8@dictiter_i:

; 2891 :     assert (PyDict_Check(d));

  00026	48 8b 44 24 50	 mov	 rax, QWORD PTR d$[rsp]
  0002b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00035	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0003a	85 c0		 test	 eax, eax
  0003c	75 1c		 jne	 SHORT $LN11@dictiter_i
  0003e	41 b8 4b 0b 00
	00		 mov	 r8d, 2891		; 00000b4bH
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@PKLKKIO@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AA?$CJ?$AA?$AA@
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00058	33 c0		 xor	 eax, eax
$LN11@dictiter_i:

; 2892 : 
; 2893 :     if (di->di_used != d->ma_used) {

  0005a	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  0005f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR d$[rsp]
  00064	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00068	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  0006c	74 27		 je	 SHORT $LN7@dictiter_i

; 2894 :         PyErr_SetString(PyExc_RuntimeError,
; 2895 :                         "dictionary changed size during iteration");

  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@
  00075	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0007c	e8 00 00 00 00	 call	 PyErr_SetString

; 2896 :         di->di_used = -1; /* Make this state sticky */

  00081	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  00086	48 c7 40 68 ff
	ff ff ff	 mov	 QWORD PTR [rax+104], -1

; 2897 :         return NULL;

  0008e	33 c0		 xor	 eax, eax
  00090	e9 40 01 00 00	 jmp	 $LN9@dictiter_i
$LN7@dictiter_i:

; 2898 :     }
; 2899 : 
; 2900 :     i = di->di_pos;

  00095	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  0009a	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0009e	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 2901 :     if (i < 0)

  000a3	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  000a9	7d 05		 jge	 SHORT $LN6@dictiter_i

; 2902 :         goto fail;

  000ab	e9 0c 01 00 00	 jmp	 $fail$22665
$LN6@dictiter_i:

; 2903 :     k = d->ma_keys;

  000b0	48 8b 44 24 50	 mov	 rax, QWORD PTR d$[rsp]
  000b5	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b9	48 89 44 24 48	 mov	 QWORD PTR k$[rsp], rax

; 2904 :     if (d->ma_values) {

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR d$[rsp]
  000c3	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  000c8	74 22		 je	 SHORT $LN5@dictiter_i

; 2905 :         value_ptr = &d->ma_values[i];

  000ca	48 8b 44 24 50	 mov	 rax, QWORD PTR d$[rsp]
  000cf	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000d3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000d8	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  000dc	48 89 44 24 40	 mov	 QWORD PTR value_ptr$[rsp], rax

; 2906 :         offset = sizeof(PyObject *);

  000e1	48 c7 44 24 38
	08 00 00 00	 mov	 QWORD PTR offset$[rsp], 8

; 2907 :     }
; 2908 :     else {

  000ea	eb 21		 jmp	 SHORT $LN4@dictiter_i
$LN5@dictiter_i:

; 2909 :         value_ptr = &k->dk_entries[i].me_value;

  000ec	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  000f1	48 6b c0 18	 imul	 rax, 24
  000f5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR k$[rsp]
  000fa	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  000ff	48 89 44 24 40	 mov	 QWORD PTR value_ptr$[rsp], rax

; 2910 :         offset = sizeof(PyDictKeyEntry);

  00104	48 c7 44 24 38
	18 00 00 00	 mov	 QWORD PTR offset$[rsp], 24
$LN4@dictiter_i:

; 2911 :     }
; 2912 :     mask = DK_SIZE(k)-1;

  0010d	48 8b 44 24 48	 mov	 rax, QWORD PTR k$[rsp]
  00112	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00116	48 ff c8	 dec	 rax
  00119	48 89 44 24 28	 mov	 QWORD PTR mask$[rsp], rax
$LN3@dictiter_i:

; 2913 :     while (i <= mask && *value_ptr == NULL) {

  0011e	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  00123	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00128	7f 2f		 jg	 SHORT $LN2@dictiter_i
  0012a	48 8b 44 24 40	 mov	 rax, QWORD PTR value_ptr$[rsp]
  0012f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00133	75 24		 jne	 SHORT $LN2@dictiter_i

; 2914 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);

  00135	48 8b 44 24 38	 mov	 rax, QWORD PTR offset$[rsp]
  0013a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value_ptr$[rsp]
  0013f	48 03 c8	 add	 rcx, rax
  00142	48 8b c1	 mov	 rax, rcx
  00145	48 89 44 24 40	 mov	 QWORD PTR value_ptr$[rsp], rax

; 2915 :         i++;

  0014a	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0014f	48 ff c0	 inc	 rax
  00152	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 2916 :     }

  00157	eb c5		 jmp	 SHORT $LN3@dictiter_i
$LN2@dictiter_i:

; 2917 :     di->di_pos = i+1;

  00159	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0015e	48 ff c0	 inc	 rax
  00161	48 8b 4c 24 70	 mov	 rcx, QWORD PTR di$[rsp]
  00166	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 2918 :     if (i > mask)

  0016a	48 8b 44 24 28	 mov	 rax, QWORD PTR mask$[rsp]
  0016f	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00174	7e 02		 jle	 SHORT $LN1@dictiter_i

; 2919 :         goto fail;

  00176	eb 44		 jmp	 SHORT $fail$22665
$LN1@dictiter_i:

; 2920 :     di->len--;

  00178	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  0017d	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00184	48 ff c8	 dec	 rax
  00187	48 8b 4c 24 70	 mov	 rcx, QWORD PTR di$[rsp]
  0018c	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 2921 :     key = k->dk_entries[i].me_key;

  00193	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00198	48 6b c0 18	 imul	 rax, 24
  0019c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR k$[rsp]
  001a1	48 8b 44 01 28	 mov	 rax, QWORD PTR [rcx+rax+40]
  001a6	48 89 44 24 30	 mov	 QWORD PTR key$[rsp], rax

; 2922 :     Py_INCREF(key);

  001ab	48 8b 4c 24 30	 mov	 rcx, QWORD PTR key$[rsp]
  001b0	e8 00 00 00 00	 call	 _Py_IncRef

; 2923 :     return key;

  001b5	48 8b 44 24 30	 mov	 rax, QWORD PTR key$[rsp]
  001ba	eb 19		 jmp	 SHORT $LN9@dictiter_i
$fail$22665:

; 2924 : 
; 2925 : fail:
; 2926 :     Py_DECREF(d);

  001bc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR d$[rsp]
  001c1	e8 00 00 00 00	 call	 _Py_DecRef

; 2927 :     di->di_dict = NULL;

  001c6	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  001cb	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 2928 :     return NULL;

  001d3	33 c0		 xor	 eax, eax
$LN9@dictiter_i:

; 2929 : }

  001d5	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d9	c3		 ret	 0
dictiter_iternextkey ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_iternextvalue DD imagerel dictiter_iternextvalue
	DD	imagerel dictiter_iternextvalue+469
	DD	imagerel $unwind$dictiter_iternextvalue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_iternextvalue DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictiter_iternextvalue
_TEXT	SEGMENT
value$ = 32
i$ = 40
mask$ = 48
offset$ = 56
value_ptr$ = 64
d$ = 72
di$ = 96
dictiter_iternextvalue PROC				; COMDAT

; 2965 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2966 :     PyObject *value;
; 2967 :     register Py_ssize_t i, mask, offset;
; 2968 :     PyDictObject *d = di->di_dict;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR di$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 89 44 24 48	 mov	 QWORD PTR d$[rsp], rax

; 2969 :     PyObject **value_ptr;
; 2970 : 
; 2971 :     if (d == NULL)

  00017	48 83 7c 24 48
	00		 cmp	 QWORD PTR d$[rsp], 0
  0001d	75 07		 jne	 SHORT $LN9@dictiter_i@2

; 2972 :         return NULL;

  0001f	33 c0		 xor	 eax, eax
  00021	e9 aa 01 00 00	 jmp	 $LN10@dictiter_i@2
$LN9@dictiter_i@2:

; 2973 :     assert (PyDict_Check(d));

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR d$[rsp]
  0002b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00035	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0003a	85 c0		 test	 eax, eax
  0003c	75 1c		 jne	 SHORT $LN12@dictiter_i@2
  0003e	41 b8 9d 0b 00
	00		 mov	 r8d, 2973		; 00000b9dH
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@PKLKKIO@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AA?$CJ?$AA?$AA@
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00058	33 c0		 xor	 eax, eax
$LN12@dictiter_i@2:

; 2974 : 
; 2975 :     if (di->di_used != d->ma_used) {

  0005a	48 8b 44 24 60	 mov	 rax, QWORD PTR di$[rsp]
  0005f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR d$[rsp]
  00064	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00068	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  0006c	74 27		 je	 SHORT $LN8@dictiter_i@2

; 2976 :         PyErr_SetString(PyExc_RuntimeError,
; 2977 :                         "dictionary changed size during iteration");

  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@
  00075	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0007c	e8 00 00 00 00	 call	 PyErr_SetString

; 2978 :         di->di_used = -1; /* Make this state sticky */

  00081	48 8b 44 24 60	 mov	 rax, QWORD PTR di$[rsp]
  00086	48 c7 40 68 ff
	ff ff ff	 mov	 QWORD PTR [rax+104], -1

; 2979 :         return NULL;

  0008e	33 c0		 xor	 eax, eax
  00090	e9 3b 01 00 00	 jmp	 $LN10@dictiter_i@2
$LN8@dictiter_i@2:

; 2980 :     }
; 2981 : 
; 2982 :     i = di->di_pos;

  00095	48 8b 44 24 60	 mov	 rax, QWORD PTR di$[rsp]
  0009a	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0009e	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax

; 2983 :     mask = DK_SIZE(d->ma_keys)-1;

  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR d$[rsp]
  000a8	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ac	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000b0	48 ff c8	 dec	 rax
  000b3	48 89 44 24 30	 mov	 QWORD PTR mask$[rsp], rax

; 2984 :     if (i < 0 || i > mask)

  000b8	48 83 7c 24 28
	00		 cmp	 QWORD PTR i$[rsp], 0
  000be	7c 0c		 jl	 SHORT $LN6@dictiter_i@2
  000c0	48 8b 44 24 30	 mov	 rax, QWORD PTR mask$[rsp]
  000c5	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000ca	7e 05		 jle	 SHORT $LN7@dictiter_i@2
$LN6@dictiter_i@2:

; 2985 :         goto fail;

  000cc	e9 e6 00 00 00	 jmp	 $fail$22717
$LN7@dictiter_i@2:

; 2986 :     if (d->ma_values) {

  000d1	48 8b 44 24 48	 mov	 rax, QWORD PTR d$[rsp]
  000d6	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  000db	74 22		 je	 SHORT $LN5@dictiter_i@2

; 2987 :         value_ptr = &d->ma_values[i];

  000dd	48 8b 44 24 48	 mov	 rax, QWORD PTR d$[rsp]
  000e2	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000e6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000eb	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  000ef	48 89 44 24 40	 mov	 QWORD PTR value_ptr$[rsp], rax

; 2988 :         offset = sizeof(PyObject *);

  000f4	48 c7 44 24 38
	08 00 00 00	 mov	 QWORD PTR offset$[rsp], 8

; 2989 :     }
; 2990 :     else {

  000fd	eb 25		 jmp	 SHORT $LN4@dictiter_i@2
$LN5@dictiter_i@2:

; 2991 :         value_ptr = &d->ma_keys->dk_entries[i].me_value;

  000ff	48 8b 44 24 48	 mov	 rax, QWORD PTR d$[rsp]
  00104	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00108	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0010d	48 6b c9 18	 imul	 rcx, 24
  00111	48 8d 44 08 30	 lea	 rax, QWORD PTR [rax+rcx+48]
  00116	48 89 44 24 40	 mov	 QWORD PTR value_ptr$[rsp], rax

; 2992 :         offset = sizeof(PyDictKeyEntry);

  0011b	48 c7 44 24 38
	18 00 00 00	 mov	 QWORD PTR offset$[rsp], 24
$LN4@dictiter_i@2:
$LN3@dictiter_i@2:

; 2993 :     }
; 2994 :     while (i <= mask && *value_ptr == NULL) {

  00124	48 8b 44 24 30	 mov	 rax, QWORD PTR mask$[rsp]
  00129	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0012e	7f 3d		 jg	 SHORT $LN2@dictiter_i@2
  00130	48 8b 44 24 40	 mov	 rax, QWORD PTR value_ptr$[rsp]
  00135	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00139	75 32		 jne	 SHORT $LN2@dictiter_i@2

; 2995 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);

  0013b	48 8b 44 24 38	 mov	 rax, QWORD PTR offset$[rsp]
  00140	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value_ptr$[rsp]
  00145	48 03 c8	 add	 rcx, rax
  00148	48 8b c1	 mov	 rax, rcx
  0014b	48 89 44 24 40	 mov	 QWORD PTR value_ptr$[rsp], rax

; 2996 :         i++;

  00150	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00155	48 ff c0	 inc	 rax
  00158	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax

; 2997 :         if (i > mask)

  0015d	48 8b 44 24 30	 mov	 rax, QWORD PTR mask$[rsp]
  00162	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00167	7e 02		 jle	 SHORT $LN1@dictiter_i@2

; 2998 :             goto fail;

  00169	eb 4c		 jmp	 SHORT $fail$22717
$LN1@dictiter_i@2:

; 2999 :     }

  0016b	eb b7		 jmp	 SHORT $LN3@dictiter_i@2
$LN2@dictiter_i@2:

; 3000 :     di->di_pos = i+1;

  0016d	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00172	48 ff c0	 inc	 rax
  00175	48 8b 4c 24 60	 mov	 rcx, QWORD PTR di$[rsp]
  0017a	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 3001 :     di->len--;

  0017e	48 8b 44 24 60	 mov	 rax, QWORD PTR di$[rsp]
  00183	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0018a	48 ff c8	 dec	 rax
  0018d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR di$[rsp]
  00192	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 3002 :     value = *value_ptr;

  00199	48 8b 44 24 40	 mov	 rax, QWORD PTR value_ptr$[rsp]
  0019e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a1	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3003 :     Py_INCREF(value);

  001a6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  001ab	e8 00 00 00 00	 call	 _Py_IncRef

; 3004 :     return value;

  001b0	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  001b5	eb 19		 jmp	 SHORT $LN10@dictiter_i@2
$fail$22717:

; 3005 : 
; 3006 : fail:
; 3007 :     Py_DECREF(d);

  001b7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR d$[rsp]
  001bc	e8 00 00 00 00	 call	 _Py_DecRef

; 3008 :     di->di_dict = NULL;

  001c1	48 8b 44 24 60	 mov	 rax, QWORD PTR di$[rsp]
  001c6	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 3009 :     return NULL;

  001ce	33 c0		 xor	 eax, eax
$LN10@dictiter_i@2:

; 3010 : }

  001d0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001d4	c3		 ret	 0
dictiter_iternextvalue ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_iternextitem DD imagerel dictiter_iternextitem
	DD	imagerel dictiter_iternextitem+622
	DD	imagerel $unwind$dictiter_iternextitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_iternextitem DD 010901H
	DD	0c209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictiter_iternextitem
_TEXT	SEGMENT
value$ = 32
i$ = 40
mask$ = 48
key$ = 56
offset$ = 64
value_ptr$ = 72
d$ = 80
result$ = 88
di$ = 112
dictiter_iternextitem PROC				; COMDAT

; 3046 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 3047 :     PyObject *key, *value, *result = di->di_result;

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  0000e	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00012	48 89 44 24 58	 mov	 QWORD PTR result$[rsp], rax

; 3048 :     register Py_ssize_t i, mask, offset;
; 3049 :     PyDictObject *d = di->di_dict;

  00017	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  0001c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00020	48 89 44 24 50	 mov	 QWORD PTR d$[rsp], rax

; 3050 :     PyObject **value_ptr;
; 3051 : 
; 3052 :     if (d == NULL)

  00025	48 83 7c 24 50
	00		 cmp	 QWORD PTR d$[rsp], 0
  0002b	75 07		 jne	 SHORT $LN11@dictiter_i@3

; 3053 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 35 02 00 00	 jmp	 $LN12@dictiter_i@3
$LN11@dictiter_i@3:

; 3054 :     assert (PyDict_Check(d));

  00034	48 8b 44 24 50	 mov	 rax, QWORD PTR d$[rsp]
  00039	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00043	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00048	85 c0		 test	 eax, eax
  0004a	75 1c		 jne	 SHORT $LN14@dictiter_i@3
  0004c	41 b8 ee 0b 00
	00		 mov	 r8d, 3054		; 00000beeH
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@PKLKKIO@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AA?$CJ?$AA?$AA@
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00066	33 c0		 xor	 eax, eax
$LN14@dictiter_i@3:

; 3055 : 
; 3056 :     if (di->di_used != d->ma_used) {

  00068	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  0006d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR d$[rsp]
  00072	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00076	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  0007a	74 27		 je	 SHORT $LN10@dictiter_i@3

; 3057 :         PyErr_SetString(PyExc_RuntimeError,
; 3058 :                         "dictionary changed size during iteration");

  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KOANJCHL@dictionary?5changed?5size?5during?5i@
  00083	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0008a	e8 00 00 00 00	 call	 PyErr_SetString

; 3059 :         di->di_used = -1; /* Make this state sticky */

  0008f	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  00094	48 c7 40 68 ff
	ff ff ff	 mov	 QWORD PTR [rax+104], -1

; 3060 :         return NULL;

  0009c	33 c0		 xor	 eax, eax
  0009e	e9 c6 01 00 00	 jmp	 $LN12@dictiter_i@3
$LN10@dictiter_i@3:

; 3061 :     }
; 3062 : 
; 3063 :     i = di->di_pos;

  000a3	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  000a8	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000ac	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax

; 3064 :     if (i < 0)

  000b1	48 83 7c 24 28
	00		 cmp	 QWORD PTR i$[rsp], 0
  000b7	7d 05		 jge	 SHORT $LN9@dictiter_i@3

; 3065 :         goto fail;

  000b9	e9 92 01 00 00	 jmp	 $fail$22770
$LN9@dictiter_i@3:

; 3066 :     mask = DK_SIZE(d->ma_keys)-1;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR d$[rsp]
  000c3	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000c7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000cb	48 ff c8	 dec	 rax
  000ce	48 89 44 24 30	 mov	 QWORD PTR mask$[rsp], rax

; 3067 :     if (d->ma_values) {

  000d3	48 8b 44 24 50	 mov	 rax, QWORD PTR d$[rsp]
  000d8	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  000dd	74 22		 je	 SHORT $LN8@dictiter_i@3

; 3068 :         value_ptr = &d->ma_values[i];

  000df	48 8b 44 24 50	 mov	 rax, QWORD PTR d$[rsp]
  000e4	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000e8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000ed	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  000f1	48 89 44 24 48	 mov	 QWORD PTR value_ptr$[rsp], rax

; 3069 :         offset = sizeof(PyObject *);

  000f6	48 c7 44 24 40
	08 00 00 00	 mov	 QWORD PTR offset$[rsp], 8

; 3070 :     }
; 3071 :     else {

  000ff	eb 25		 jmp	 SHORT $LN7@dictiter_i@3
$LN8@dictiter_i@3:

; 3072 :         value_ptr = &d->ma_keys->dk_entries[i].me_value;

  00101	48 8b 44 24 50	 mov	 rax, QWORD PTR d$[rsp]
  00106	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0010a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0010f	48 6b c9 18	 imul	 rcx, 24
  00113	48 8d 44 08 30	 lea	 rax, QWORD PTR [rax+rcx+48]
  00118	48 89 44 24 48	 mov	 QWORD PTR value_ptr$[rsp], rax

; 3073 :         offset = sizeof(PyDictKeyEntry);

  0011d	48 c7 44 24 40
	18 00 00 00	 mov	 QWORD PTR offset$[rsp], 24
$LN7@dictiter_i@3:
$LN6@dictiter_i@3:

; 3074 :     }
; 3075 :     while (i <= mask && *value_ptr == NULL) {

  00126	48 8b 44 24 30	 mov	 rax, QWORD PTR mask$[rsp]
  0012b	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00130	7f 2f		 jg	 SHORT $LN5@dictiter_i@3
  00132	48 8b 44 24 48	 mov	 rax, QWORD PTR value_ptr$[rsp]
  00137	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0013b	75 24		 jne	 SHORT $LN5@dictiter_i@3

; 3076 :         value_ptr = (PyObject **)(((char *)value_ptr) + offset);

  0013d	48 8b 44 24 40	 mov	 rax, QWORD PTR offset$[rsp]
  00142	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value_ptr$[rsp]
  00147	48 03 c8	 add	 rcx, rax
  0014a	48 8b c1	 mov	 rax, rcx
  0014d	48 89 44 24 48	 mov	 QWORD PTR value_ptr$[rsp], rax

; 3077 :         i++;

  00152	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00157	48 ff c0	 inc	 rax
  0015a	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax

; 3078 :     }

  0015f	eb c5		 jmp	 SHORT $LN6@dictiter_i@3
$LN5@dictiter_i@3:

; 3079 :     di->di_pos = i+1;

  00161	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00166	48 ff c0	 inc	 rax
  00169	48 8b 4c 24 70	 mov	 rcx, QWORD PTR di$[rsp]
  0016e	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 3080 :     if (i > mask)

  00172	48 8b 44 24 30	 mov	 rax, QWORD PTR mask$[rsp]
  00177	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0017c	7e 05		 jle	 SHORT $LN4@dictiter_i@3

; 3081 :         goto fail;

  0017e	e9 cd 00 00 00	 jmp	 $fail$22770
$LN4@dictiter_i@3:

; 3082 : 
; 3083 :     if (result->ob_refcnt == 1) {

  00183	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
  00188	48 83 78 50 01	 cmp	 QWORD PTR [rax+80], 1
  0018d	75 28		 jne	 SHORT $LN3@dictiter_i@3

; 3084 :         Py_INCREF(result);

  0018f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR result$[rsp]
  00194	e8 00 00 00 00	 call	 _Py_IncRef

; 3085 :         Py_DECREF(PyTuple_GET_ITEM(result, 0));

  00199	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
  0019e	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  001a2	e8 00 00 00 00	 call	 _Py_DecRef

; 3086 :         Py_DECREF(PyTuple_GET_ITEM(result, 1));

  001a7	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
  001ac	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  001b0	e8 00 00 00 00	 call	 _Py_DecRef

; 3087 :     } else {

  001b5	eb 1e		 jmp	 SHORT $LN2@dictiter_i@3
$LN3@dictiter_i@3:

; 3088 :         result = PyTuple_New(2);

  001b7	b9 02 00 00 00	 mov	 ecx, 2
  001bc	e8 00 00 00 00	 call	 PyTuple_New
  001c1	48 89 44 24 58	 mov	 QWORD PTR result$[rsp], rax

; 3089 :         if (result == NULL)

  001c6	48 83 7c 24 58
	00		 cmp	 QWORD PTR result$[rsp], 0
  001cc	75 07		 jne	 SHORT $LN1@dictiter_i@3

; 3090 :             return NULL;

  001ce	33 c0		 xor	 eax, eax
  001d0	e9 94 00 00 00	 jmp	 $LN12@dictiter_i@3
$LN1@dictiter_i@3:
$LN2@dictiter_i@3:

; 3091 :     }
; 3092 :     di->len--;

  001d5	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  001da	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  001e1	48 ff c8	 dec	 rax
  001e4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR di$[rsp]
  001e9	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 3093 :     key = d->ma_keys->dk_entries[i].me_key;

  001f0	48 8b 44 24 50	 mov	 rax, QWORD PTR d$[rsp]
  001f5	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001f9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  001fe	48 6b c9 18	 imul	 rcx, 24
  00202	48 8b 44 08 28	 mov	 rax, QWORD PTR [rax+rcx+40]
  00207	48 89 44 24 38	 mov	 QWORD PTR key$[rsp], rax

; 3094 :     value = *value_ptr;

  0020c	48 8b 44 24 48	 mov	 rax, QWORD PTR value_ptr$[rsp]
  00211	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00214	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 3095 :     Py_INCREF(key);

  00219	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  0021e	e8 00 00 00 00	 call	 _Py_IncRef

; 3096 :     Py_INCREF(value);

  00223	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00228	e8 00 00 00 00	 call	 _Py_IncRef

; 3097 :     PyTuple_SET_ITEM(result, 0, key);

  0022d	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
  00232	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  00237	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 3098 :     PyTuple_SET_ITEM(result, 1, value);

  0023b	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
  00240	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00245	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 3099 :     return result;

  00249	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
  0024e	eb 19		 jmp	 SHORT $LN12@dictiter_i@3
$fail$22770:

; 3100 : 
; 3101 : fail:
; 3102 :     Py_DECREF(d);

  00250	48 8b 4c 24 50	 mov	 rcx, QWORD PTR d$[rsp]
  00255	e8 00 00 00 00	 call	 _Py_DecRef

; 3103 :     di->di_dict = NULL;

  0025a	48 8b 44 24 70	 mov	 rax, QWORD PTR di$[rsp]
  0025f	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 3104 :     return NULL;

  00267	33 c0		 xor	 eax, eax
$LN12@dictiter_i@3:

; 3105 : }

  00269	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0026d	c3		 ret	 0
dictiter_iternextitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@		; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
PUBLIC	$T24812
EXTRN	Py_BuildValue:PROC
EXTRN	_PyObject_GetBuiltin:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictiter_reduce DD imagerel dictiter_reduce
	DD	imagerel dictiter_reduce+519
	DD	imagerel $unwind$dictiter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictiter_reduce DD 040e01H
	DD	02b010eH
	DD	060067007H
xdata	ENDS
;	COMDAT ??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@
CONST	SEGMENT
??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@ DB 'N(N)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dictiter_reduce
_TEXT	SEGMENT
tmp$ = 32
list$ = 176
element$22831 = 184
$T24812 = 192
di$ = 368
dictiter_reduce PROC					; COMDAT

; 3143 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H

; 3144 :     PyObject *list;
; 3145 :     dictiterobject tmp;
; 3146 : 
; 3147 :     list = PyList_New(0);

  0000e	33 c9		 xor	 ecx, ecx
  00010	e8 00 00 00 00	 call	 PyList_New
  00015	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR list$[rsp], rax

; 3148 :     if (!list)

  0001d	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR list$[rsp], 0
  00026	75 07		 jne	 SHORT $LN25@dictiter_r

; 3149 :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	e9 ce 01 00 00	 jmp	 $LN26@dictiter_r
$LN25@dictiter_r:

; 3150 : 
; 3151 :     /* copy the itertor state */
; 3152 :     tmp = *di;

  0002f	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T24812[rsp]
  00037	48 8b f8	 mov	 rdi, rax
  0003a	48 8b b4 24 70
	01 00 00	 mov	 rsi, QWORD PTR di$[rsp]
  00042	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00047	f3 a4		 rep movsb
  00049	48 8d 44 24 20	 lea	 rax, QWORD PTR tmp$[rsp]
  0004e	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR $T24812[rsp]
  00056	48 8b f8	 mov	 rdi, rax
  00059	48 8b f1	 mov	 rsi, rcx
  0005c	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00061	f3 a4		 rep movsb
$LN24@dictiter_r:

; 3153 :     Py_XINCREF(tmp.di_dict);

  00063	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR tmp$[rsp+96], 0
  0006c	74 0d		 je	 SHORT $LN21@dictiter_r
  0006e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp+96]
  00076	e8 00 00 00 00	 call	 _Py_IncRef
$LN21@dictiter_r:
  0007b	33 c0		 xor	 eax, eax
  0007d	85 c0		 test	 eax, eax
  0007f	75 e2		 jne	 SHORT $LN24@dictiter_r
$LN20@dictiter_r:

; 3154 : 
; 3155 :     /* iterate the temporary into a list */
; 3156 :     for(;;) {
; 3157 :         PyObject *element = 0;

  00081	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR element$22831[rsp], 0

; 3158 :         if (Py_TYPE(di) == &PyDictIterItem_Type)

  0008d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDictIterItem_Type
  00094	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR di$[rsp]
  0009c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000a0	75 14		 jne	 SHORT $LN18@dictiter_r

; 3159 :             element = dictiter_iternextitem(&tmp);

  000a2	48 8d 4c 24 20	 lea	 rcx, QWORD PTR tmp$[rsp]
  000a7	e8 00 00 00 00	 call	 dictiter_iternextitem
  000ac	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR element$22831[rsp], rax
  000b4	eb 74		 jmp	 SHORT $LN17@dictiter_r
$LN18@dictiter_r:

; 3160 :         else if (Py_TYPE(di) == &PyDictIterKey_Type)

  000b6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDictIterKey_Type
  000bd	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR di$[rsp]
  000c5	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000c9	75 14		 jne	 SHORT $LN16@dictiter_r

; 3161 :             element = dictiter_iternextkey(&tmp);

  000cb	48 8d 4c 24 20	 lea	 rcx, QWORD PTR tmp$[rsp]
  000d0	e8 00 00 00 00	 call	 dictiter_iternextkey
  000d5	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR element$22831[rsp], rax
  000dd	eb 4b		 jmp	 SHORT $LN15@dictiter_r
$LN16@dictiter_r:

; 3162 :         else if (Py_TYPE(di) == &PyDictIterValue_Type)

  000df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDictIterValue_Type
  000e6	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR di$[rsp]
  000ee	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000f2	75 14		 jne	 SHORT $LN14@dictiter_r

; 3163 :             element = dictiter_iternextvalue(&tmp);

  000f4	48 8d 4c 24 20	 lea	 rcx, QWORD PTR tmp$[rsp]
  000f9	e8 00 00 00 00	 call	 dictiter_iternextvalue
  000fe	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR element$22831[rsp], rax

; 3164 :         else

  00106	eb 22		 jmp	 SHORT $LN13@dictiter_r
$LN14@dictiter_r:

; 3165 :             assert(0);

  00108	33 c0		 xor	 eax, eax
  0010a	85 c0		 test	 eax, eax
  0010c	75 1c		 jne	 SHORT $LN28@dictiter_r
  0010e	41 b8 5d 0c 00
	00		 mov	 r8d, 3165		; 00000c5dH
  00114	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0011b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00122	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00128	33 c0		 xor	 eax, eax
$LN28@dictiter_r:
$LN13@dictiter_r:
$LN15@dictiter_r:
$LN17@dictiter_r:

; 3166 :         if (element) {

  0012a	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR element$22831[rsp], 0
  00133	74 64		 je	 SHORT $LN12@dictiter_r

; 3167 :             if (PyList_Append(list, element)) {

  00135	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR element$22831[rsp]
  0013d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR list$[rsp]
  00145	e8 00 00 00 00	 call	 PyList_Append
  0014a	85 c0		 test	 eax, eax
  0014c	74 3c		 je	 SHORT $LN11@dictiter_r

; 3168 :                 Py_DECREF(element);

  0014e	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR element$22831[rsp]
  00156	e8 00 00 00 00	 call	 _Py_DecRef

; 3169 :                 Py_DECREF(list);

  0015b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR list$[rsp]
  00163	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@dictiter_r:

; 3170 :                 Py_XDECREF(tmp.di_dict);

  00168	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR tmp$[rsp+96], 0
  00171	74 0d		 je	 SHORT $LN7@dictiter_r
  00173	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp+96]
  0017b	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@dictiter_r:
  00180	33 c0		 xor	 eax, eax
  00182	85 c0		 test	 eax, eax
  00184	75 e2		 jne	 SHORT $LN10@dictiter_r

; 3171 :                 return NULL;

  00186	33 c0		 xor	 eax, eax
  00188	eb 73		 jmp	 SHORT $LN26@dictiter_r
$LN11@dictiter_r:

; 3172 :             }
; 3173 :             Py_DECREF(element);

  0018a	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR element$22831[rsp]
  00192	e8 00 00 00 00	 call	 _Py_DecRef

; 3174 :         } else

  00197	eb 02		 jmp	 SHORT $LN6@dictiter_r
$LN12@dictiter_r:

; 3175 :             break;

  00199	eb 05		 jmp	 SHORT $LN19@dictiter_r
$LN6@dictiter_r:

; 3176 :     }

  0019b	e9 e1 fe ff ff	 jmp	 $LN20@dictiter_r
$LN19@dictiter_r:
$LN5@dictiter_r:

; 3177 :     Py_XDECREF(tmp.di_dict);

  001a0	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR tmp$[rsp+96], 0
  001a9	74 0d		 je	 SHORT $LN2@dictiter_r
  001ab	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp+96]
  001b3	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@dictiter_r:
  001b8	33 c0		 xor	 eax, eax
  001ba	85 c0		 test	 eax, eax
  001bc	75 e2		 jne	 SHORT $LN5@dictiter_r

; 3178 :     /* check for error */
; 3179 :     if (tmp.di_dict != NULL) {

  001be	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR tmp$[rsp+96], 0
  001c7	74 11		 je	 SHORT $LN1@dictiter_r

; 3180 :         /* we have an error */
; 3181 :         Py_DECREF(list);

  001c9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR list$[rsp]
  001d1	e8 00 00 00 00	 call	 _Py_DecRef

; 3182 :         return NULL;

  001d6	33 c0		 xor	 eax, eax
  001d8	eb 23		 jmp	 SHORT $LN26@dictiter_r
$LN1@dictiter_r:

; 3183 :     }
; 3184 :     return Py_BuildValue("N(N)", _PyObject_GetBuiltin("iter"), list);

  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  001e1	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  001e6	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR list$[rsp]
  001ee	48 8b d0	 mov	 rdx, rax
  001f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IFNKFGDK@N?$CIN?$CJ?$AA@
  001f8	e8 00 00 00 00	 call	 Py_BuildValue
$LN26@dictiter_r:

; 3185 : }

  001fd	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00204	5f		 pop	 rdi
  00205	5e		 pop	 rsi
  00206	c3		 ret	 0
dictiter_reduce ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictview_dealloc DD imagerel dictview_dealloc
	DD	imagerel dictview_dealloc+56
	DD	imagerel $unwind$dictview_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictview_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictview_dealloc
_TEXT	SEGMENT
dv$ = 48
dictview_dealloc PROC					; COMDAT

; 3201 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@dictview_d:

; 3202 :     Py_XDECREF(dv->dv_dict);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 0e		 je	 SHORT $LN1@dictview_d
  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  0001a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0001e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@dictview_d:
  00023	33 c0		 xor	 eax, eax
  00025	85 c0		 test	 eax, eax
  00027	75 e0		 jne	 SHORT $LN4@dictview_d

; 3203 :     PyObject_GC_Del(dv);

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dv$[rsp]
  0002e	e8 00 00 00 00	 call	 PyObject_GC_Del

; 3204 : }

  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00037	c3		 ret	 0
dictview_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@CDBIKHBN@dictview_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictview_traverse DD imagerel dictview_traverse
	DD	imagerel dictview_traverse+116
	DD	imagerel $unwind$dictview_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictview_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BC@CDBIKHBN@dictview_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@CDBIKHBN@dictview_traverse?$AA@ DB 'dictview_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dictview_traverse
_TEXT	SEGMENT
vret$22892 = 32
dv$ = 64
visit$ = 72
arg$ = 80
dictview_traverse PROC					; COMDAT

; 3208 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@dictview_t:

; 3209 :     Py_VISIT(dv->dv_dict);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@dictview_t
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 89 0c 00
	00		 mov	 r8d, 3209		; 00000c89H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@CDBIKHBN@dictview_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@dictview_t:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR dv$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN2@dictview_t
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR dv$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$22892[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$22892[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@dictview_t
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$22892[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@dictview_t
$LN1@dictview_t:
$LN2@dictview_t:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@dictview_t

; 3210 :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@dictview_t:

; 3211 : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
dictview_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictview_len DD imagerel dictview_len
	DD	imagerel dictview_len+55
	DD	imagerel $unwind$dictview_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictview_len DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictview_len
_TEXT	SEGMENT
len$ = 0
dv$ = 32
dictview_len PROC					; COMDAT

; 3215 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 3216 :     Py_ssize_t len = 0;

  00009	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR len$[rsp], 0

; 3217 :     if (dv->dv_dict != NULL)

  00011	48 8b 44 24 20	 mov	 rax, QWORD PTR dv$[rsp]
  00016	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0001b	74 11		 je	 SHORT $LN1@dictview_l

; 3218 :         len = dv->dv_dict->ma_used;

  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR dv$[rsp]
  00022	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00026	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0002a	48 89 04 24	 mov	 QWORD PTR len$[rsp], rax
$LN1@dictview_l:

; 3219 :     return len;

  0002e	48 8b 04 24	 mov	 rax, QWORD PTR len$[rsp]

; 3220 : }

  00032	48 83 c4 18	 add	 rsp, 24
  00036	c3		 ret	 0
dictview_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BM@DEJCGEJA@?$AAo?$AAt?$AAh?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@ONJMCHIA@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AAV?$AAi?$AAe?$AAw?$AAS?$AAe?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@KLMFOMEM@?$AAs?$AAe?$AAl?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
EXTRN	__ImageBase:BYTE
EXTRN	PyObject_Size:PROC
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictview_richcompare DD imagerel dictview_richcompare
	DD	imagerel dictview_richcompare+728
	DD	imagerel $unwind$dictview_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictview_richcompare DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_1BM@DEJCGEJA@?$AAo?$AAt?$AAh?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@DEJCGEJA@?$AAo?$AAt?$AAh?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'o'
	DB	00H, 't', 00H, 'h', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@ONJMCHIA@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AAV?$AAi?$AAe?$AAw?$AAS?$AAe?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@ONJMCHIA@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AAV?$AAi?$AAe?$AAw?$AAS?$AAe?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't', 00H, 'V', 00H
	DB	'i', 00H, 'e', 00H, 'w', 00H, 'S', 00H, 'e', 00H, 't', 00H, '_'
	DB	00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H
	DB	's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@KLMFOMEM@?$AAs?$AAe?$AAl?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@KLMFOMEM@?$AAs?$AAe?$AAl?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dictview_richcompare
_TEXT	SEGMENT
len_other$ = 32
len_self$ = 40
ok$ = 48
result$ = 56
tv139 = 64
tv147 = 68
tv167 = 72
self$ = 96
other$ = 104
op$ = 112
dictview_richcompare PROC				; COMDAT

; 3282 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3283 :     Py_ssize_t len_self, len_other;
; 3284 :     int ok;
; 3285 :     PyObject *result;
; 3286 : 
; 3287 :     assert(self != NULL);

  00013	48 83 7c 24 60
	00		 cmp	 QWORD PTR self$[rsp], 0
  00019	75 1c		 jne	 SHORT $LN20@dictview_r
  0001b	41 b8 d7 0c 00
	00		 mov	 r8d, 3287		; 00000cd7H
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@KLMFOMEM@?$AAs?$AAe?$AAl?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00035	33 c0		 xor	 eax, eax
$LN20@dictview_r:

; 3288 :     assert(PyDictViewSet_Check(self));

  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDictKeys_Type
  0003e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00043	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00047	74 2e		 je	 SHORT $LN21@dictview_r
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDictItems_Type
  00050	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00055	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00059	74 1c		 je	 SHORT $LN21@dictview_r
  0005b	41 b8 d8 0c 00
	00		 mov	 r8d, 3288		; 00000cd8H
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@ONJMCHIA@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AAV?$AAi?$AAe?$AAw?$AAS?$AAe?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00075	33 c0		 xor	 eax, eax
$LN21@dictview_r:

; 3289 :     assert(other != NULL);

  00077	48 83 7c 24 68
	00		 cmp	 QWORD PTR other$[rsp], 0
  0007d	75 1c		 jne	 SHORT $LN22@dictview_r
  0007f	41 b8 d9 0c 00
	00		 mov	 r8d, 3289		; 00000cd9H
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@DEJCGEJA@?$AAo?$AAt?$AAh?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00099	33 c0		 xor	 eax, eax
$LN22@dictview_r:

; 3290 : 
; 3291 :     if (!PyAnySet_Check(other) && !PyDictViewSet_Check(other))

  0009b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySet_Type
  000a2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  000a7	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000ab	0f 84 80 00 00
	00		 je	 $LN17@dictview_r
  000b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFrozenSet_Type
  000b8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  000bd	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000c1	74 6e		 je	 SHORT $LN17@dictview_r
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PySet_Type
  000ca	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  000cf	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000d3	e8 00 00 00 00	 call	 PyType_IsSubtype
  000d8	85 c0		 test	 eax, eax
  000da	75 55		 jne	 SHORT $LN17@dictview_r
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFrozenSet_Type
  000e3	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  000e8	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000ec	e8 00 00 00 00	 call	 PyType_IsSubtype
  000f1	85 c0		 test	 eax, eax
  000f3	75 3c		 jne	 SHORT $LN17@dictview_r
  000f5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDictKeys_Type
  000fc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  00101	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00105	74 2a		 je	 SHORT $LN17@dictview_r
  00107	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDictItems_Type
  0010e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  00113	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00117	74 18		 je	 SHORT $LN17@dictview_r

; 3292 :         Py_RETURN_NOTIMPLEMENTED;

  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  00120	e8 00 00 00 00	 call	 _Py_IncRef
  00125	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0012c	e9 89 01 00 00	 jmp	 $LN18@dictview_r
$LN17@dictview_r:

; 3293 : 
; 3294 :     len_self = PyObject_Size(self);

  00131	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00136	e8 00 00 00 00	 call	 PyObject_Size
  0013b	48 89 44 24 28	 mov	 QWORD PTR len_self$[rsp], rax

; 3295 :     if (len_self < 0)

  00140	48 83 7c 24 28
	00		 cmp	 QWORD PTR len_self$[rsp], 0
  00146	7d 07		 jge	 SHORT $LN16@dictview_r

; 3296 :         return NULL;

  00148	33 c0		 xor	 eax, eax
  0014a	e9 6b 01 00 00	 jmp	 $LN18@dictview_r
$LN16@dictview_r:

; 3297 :     len_other = PyObject_Size(other);

  0014f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  00154	e8 00 00 00 00	 call	 PyObject_Size
  00159	48 89 44 24 20	 mov	 QWORD PTR len_other$[rsp], rax

; 3298 :     if (len_other < 0)

  0015e	48 83 7c 24 20
	00		 cmp	 QWORD PTR len_other$[rsp], 0
  00164	7d 07		 jge	 SHORT $LN15@dictview_r

; 3299 :         return NULL;

  00166	33 c0		 xor	 eax, eax
  00168	e9 4d 01 00 00	 jmp	 $LN18@dictview_r
$LN15@dictview_r:

; 3300 : 
; 3301 :     ok = 0;

  0016d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR ok$[rsp], 0

; 3302 :     switch(op) {

  00175	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00179	89 44 24 40	 mov	 DWORD PTR tv139[rsp], eax
  0017d	83 7c 24 40 05	 cmp	 DWORD PTR tv139[rsp], 5
  00182	0f 87 ed 00 00
	00		 ja	 $LN13@dictview_r
  00188	48 63 44 24 40	 movsxd	 rax, DWORD PTR tv139[rsp]
  0018d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00194	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN27@dictview_r[rcx+rax*4]
  0019b	48 03 c1	 add	 rax, rcx
  0019e	ff e0		 jmp	 rax
$LN12@dictview_r:

; 3303 : 
; 3304 :     case Py_NE:
; 3305 :     case Py_EQ:
; 3306 :         if (len_self == len_other)

  001a0	48 8b 44 24 20	 mov	 rax, QWORD PTR len_other$[rsp]
  001a5	48 39 44 24 28	 cmp	 QWORD PTR len_self$[rsp], rax
  001aa	75 13		 jne	 SHORT $LN11@dictview_r

; 3307 :             ok = all_contained_in(self, other);

  001ac	48 8b 54 24 68	 mov	 rdx, QWORD PTR other$[rsp]
  001b1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  001b6	e8 00 00 00 00	 call	 all_contained_in
  001bb	89 44 24 30	 mov	 DWORD PTR ok$[rsp], eax
$LN11@dictview_r:

; 3308 :         if (op == Py_NE && ok >= 0)

  001bf	83 7c 24 70 03	 cmp	 DWORD PTR op$[rsp], 3
  001c4	75 28		 jne	 SHORT $LN10@dictview_r
  001c6	83 7c 24 30 00	 cmp	 DWORD PTR ok$[rsp], 0
  001cb	7c 21		 jl	 SHORT $LN10@dictview_r

; 3309 :             ok = !ok;

  001cd	83 7c 24 30 00	 cmp	 DWORD PTR ok$[rsp], 0
  001d2	75 0a		 jne	 SHORT $LN23@dictview_r
  001d4	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv147[rsp], 1
  001dc	eb 08		 jmp	 SHORT $LN24@dictview_r
$LN23@dictview_r:
  001de	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
$LN24@dictview_r:
  001e6	8b 44 24 44	 mov	 eax, DWORD PTR tv147[rsp]
  001ea	89 44 24 30	 mov	 DWORD PTR ok$[rsp], eax
$LN10@dictview_r:

; 3310 :         break;

  001ee	e9 82 00 00 00	 jmp	 $LN13@dictview_r
$LN9@dictview_r:

; 3311 : 
; 3312 :     case Py_LT:
; 3313 :         if (len_self < len_other)

  001f3	48 8b 44 24 20	 mov	 rax, QWORD PTR len_other$[rsp]
  001f8	48 39 44 24 28	 cmp	 QWORD PTR len_self$[rsp], rax
  001fd	7d 13		 jge	 SHORT $LN8@dictview_r

; 3314 :             ok = all_contained_in(self, other);

  001ff	48 8b 54 24 68	 mov	 rdx, QWORD PTR other$[rsp]
  00204	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00209	e8 00 00 00 00	 call	 all_contained_in
  0020e	89 44 24 30	 mov	 DWORD PTR ok$[rsp], eax
$LN8@dictview_r:

; 3315 :         break;

  00212	eb 61		 jmp	 SHORT $LN13@dictview_r
$LN7@dictview_r:

; 3316 : 
; 3317 :       case Py_LE:
; 3318 :           if (len_self <= len_other)

  00214	48 8b 44 24 20	 mov	 rax, QWORD PTR len_other$[rsp]
  00219	48 39 44 24 28	 cmp	 QWORD PTR len_self$[rsp], rax
  0021e	7f 13		 jg	 SHORT $LN6@dictview_r

; 3319 :               ok = all_contained_in(self, other);

  00220	48 8b 54 24 68	 mov	 rdx, QWORD PTR other$[rsp]
  00225	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0022a	e8 00 00 00 00	 call	 all_contained_in
  0022f	89 44 24 30	 mov	 DWORD PTR ok$[rsp], eax
$LN6@dictview_r:

; 3320 :           break;

  00233	eb 40		 jmp	 SHORT $LN13@dictview_r
$LN5@dictview_r:

; 3321 : 
; 3322 :     case Py_GT:
; 3323 :         if (len_self > len_other)

  00235	48 8b 44 24 20	 mov	 rax, QWORD PTR len_other$[rsp]
  0023a	48 39 44 24 28	 cmp	 QWORD PTR len_self$[rsp], rax
  0023f	7e 13		 jle	 SHORT $LN4@dictview_r

; 3324 :             ok = all_contained_in(other, self);

  00241	48 8b 54 24 60	 mov	 rdx, QWORD PTR self$[rsp]
  00246	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  0024b	e8 00 00 00 00	 call	 all_contained_in
  00250	89 44 24 30	 mov	 DWORD PTR ok$[rsp], eax
$LN4@dictview_r:

; 3325 :         break;

  00254	eb 1f		 jmp	 SHORT $LN13@dictview_r
$LN3@dictview_r:

; 3326 : 
; 3327 :     case Py_GE:
; 3328 :         if (len_self >= len_other)

  00256	48 8b 44 24 20	 mov	 rax, QWORD PTR len_other$[rsp]
  0025b	48 39 44 24 28	 cmp	 QWORD PTR len_self$[rsp], rax
  00260	7c 13		 jl	 SHORT $LN2@dictview_r

; 3329 :             ok = all_contained_in(other, self);

  00262	48 8b 54 24 60	 mov	 rdx, QWORD PTR self$[rsp]
  00267	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  0026c	e8 00 00 00 00	 call	 all_contained_in
  00271	89 44 24 30	 mov	 DWORD PTR ok$[rsp], eax
$LN2@dictview_r:
$LN13@dictview_r:

; 3330 :         break;
; 3331 : 
; 3332 :     }
; 3333 :     if (ok < 0)

  00275	83 7c 24 30 00	 cmp	 DWORD PTR ok$[rsp], 0
  0027a	7d 04		 jge	 SHORT $LN1@dictview_r

; 3334 :         return NULL;

  0027c	33 c0		 xor	 eax, eax
  0027e	eb 3a		 jmp	 SHORT $LN18@dictview_r
$LN1@dictview_r:

; 3335 :     result = ok ? Py_True : Py_False;

  00280	83 7c 24 30 00	 cmp	 DWORD PTR ok$[rsp], 0
  00285	74 0e		 je	 SHORT $LN25@dictview_r
  00287	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0028e	48 89 44 24 48	 mov	 QWORD PTR tv167[rsp], rax
  00293	eb 0c		 jmp	 SHORT $LN26@dictview_r
$LN25@dictview_r:
  00295	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0029c	48 89 44 24 48	 mov	 QWORD PTR tv167[rsp], rax
$LN26@dictview_r:
  002a1	48 8b 44 24 48	 mov	 rax, QWORD PTR tv167[rsp]
  002a6	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 3336 :     Py_INCREF(result);

  002ab	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  002b0	e8 00 00 00 00	 call	 _Py_IncRef

; 3337 :     return result;

  002b5	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN18@dictview_r:

; 3338 : }

  002ba	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002be	c3		 ret	 0
  002bf	90		 npad	 1
$LN27@dictview_r:
  002c0	00 00 00 00	 DD	 $LN9@dictview_r
  002c4	00 00 00 00	 DD	 $LN7@dictview_r
  002c8	00 00 00 00	 DD	 $LN12@dictview_r
  002cc	00 00 00 00	 DD	 $LN12@dictview_r
  002d0	00 00 00 00	 DD	 $LN5@dictview_r
  002d4	00 00 00 00	 DD	 $LN3@dictview_r
dictview_richcompare ENDP
_TEXT	ENDS
EXTRN	PySequence_Contains:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$all_contained_in DD imagerel all_contained_in
	DD	imagerel all_contained_in+154
	DD	imagerel $unwind$all_contained_in
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$all_contained_in DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT all_contained_in
_TEXT	SEGMENT
iter$ = 32
ok$ = 40
next$22946 = 48
self$ = 80
other$ = 88
all_contained_in PROC					; COMDAT

; 3258 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3259 :     PyObject *iter = PyObject_GetIter(self);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00013	e8 00 00 00 00	 call	 PyObject_GetIter
  00018	48 89 44 24 20	 mov	 QWORD PTR iter$[rsp], rax

; 3260 :     int ok = 1;

  0001d	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR ok$[rsp], 1

; 3261 : 
; 3262 :     if (iter == NULL)

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR iter$[rsp], 0
  0002b	75 07		 jne	 SHORT $LN6@all_contai

; 3263 :         return -1;

  0002d	b8 ff ff ff ff	 mov	 eax, -1
  00032	eb 61		 jmp	 SHORT $LN7@all_contai
$LN6@all_contai:
$LN5@all_contai:

; 3264 :     for (;;) {
; 3265 :         PyObject *next = PyIter_Next(iter);

  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR iter$[rsp]
  00039	e8 00 00 00 00	 call	 PyIter_Next
  0003e	48 89 44 24 30	 mov	 QWORD PTR next$22946[rsp], rax

; 3266 :         if (next == NULL) {

  00043	48 83 7c 24 30
	00		 cmp	 QWORD PTR next$22946[rsp], 0
  00049	75 14		 jne	 SHORT $LN3@all_contai

; 3267 :             if (PyErr_Occurred())

  0004b	e8 00 00 00 00	 call	 PyErr_Occurred
  00050	48 85 c0	 test	 rax, rax
  00053	74 08		 je	 SHORT $LN2@all_contai

; 3268 :                 ok = -1;

  00055	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ok$[rsp], -1
$LN2@all_contai:

; 3269 :             break;

  0005d	eb 28		 jmp	 SHORT $LN4@all_contai
$LN3@all_contai:

; 3270 :         }
; 3271 :         ok = PySequence_Contains(other, next);

  0005f	48 8b 54 24 30	 mov	 rdx, QWORD PTR next$22946[rsp]
  00064	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00069	e8 00 00 00 00	 call	 PySequence_Contains
  0006e	89 44 24 28	 mov	 DWORD PTR ok$[rsp], eax

; 3272 :         Py_DECREF(next);

  00072	48 8b 4c 24 30	 mov	 rcx, QWORD PTR next$22946[rsp]
  00077	e8 00 00 00 00	 call	 _Py_DecRef

; 3273 :         if (ok <= 0)

  0007c	83 7c 24 28 00	 cmp	 DWORD PTR ok$[rsp], 0
  00081	7f 02		 jg	 SHORT $LN1@all_contai

; 3274 :             break;

  00083	eb 02		 jmp	 SHORT $LN4@all_contai
$LN1@all_contai:

; 3275 :     }

  00085	eb ad		 jmp	 SHORT $LN5@all_contai
$LN4@all_contai:

; 3276 :     Py_DECREF(iter);

  00087	48 8b 4c 24 20	 mov	 rcx, QWORD PTR iter$[rsp]
  0008c	e8 00 00 00 00	 call	 _Py_DecRef

; 3277 :     return ok;

  00091	8b 44 24 28	 mov	 eax, DWORD PTR ok$[rsp]
$LN7@all_contai:

; 3278 : }

  00095	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00099	c3		 ret	 0
all_contained_in ENDP
_TEXT	ENDS
PUBLIC	??_C@_06DPIDBHCJ@?$CFs?$CI?$CFR?$CJ?$AA@	; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PySequence_List:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictview_repr DD imagerel dictview_repr
	DD	imagerel dictview_repr+91
	DD	imagerel $unwind$dictview_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictview_repr DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_06DPIDBHCJ@?$CFs?$CI?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_06DPIDBHCJ@?$CFs?$CI?$CFR?$CJ?$AA@ DB '%s(%R)', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dictview_repr
_TEXT	SEGMENT
seq$ = 32
result$ = 40
dv$ = 64
dictview_repr PROC					; COMDAT

; 3342 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3343 :     PyObject *seq;
; 3344 :     PyObject *result;
; 3345 : 
; 3346 :     seq = PySequence_List((PyObject *)dv);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dv$[rsp]
  0000e	e8 00 00 00 00	 call	 PySequence_List
  00013	48 89 44 24 20	 mov	 QWORD PTR seq$[rsp], rax

; 3347 :     if (seq == NULL)

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR seq$[rsp], 0
  0001e	75 04		 jne	 SHORT $LN1@dictview_r@2

; 3348 :         return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	eb 32		 jmp	 SHORT $LN2@dictview_r@2
$LN1@dictview_r@2:

; 3349 : 
; 3350 :     result = PyUnicode_FromFormat("%s(%R)", Py_TYPE(dv)->tp_name, seq);

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR dv$[rsp]
  00029	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002d	4c 8b 44 24 20	 mov	 r8, QWORD PTR seq$[rsp]
  00032	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DPIDBHCJ@?$CFs?$CI?$CFR?$CJ?$AA@
  0003d	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00042	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3351 :     Py_DECREF(seq);

  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR seq$[rsp]
  0004c	e8 00 00 00 00	 call	 _Py_DecRef

; 3352 :     return result;

  00051	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN2@dictview_r@2:

; 3353 : }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	c3		 ret	 0
dictview_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictkeys_iter DD imagerel dictkeys_iter
	DD	imagerel dictkeys_iter+68
	DD	imagerel $unwind$dictkeys_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictkeys_iter DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictkeys_iter
_TEXT	SEGMENT
dv$ = 48
dictkeys_iter PROC					; COMDAT

; 3359 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3360 :     if (dv->dv_dict == NULL) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	75 15		 jne	 SHORT $LN1@dictkeys_i

; 3361 :         Py_RETURN_NONE;

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001c	e8 00 00 00 00	 call	 _Py_IncRef
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00028	eb 15		 jmp	 SHORT $LN2@dictkeys_i
$LN1@dictkeys_i:

; 3362 :     }
; 3363 :     return dictiter_new(dv->dv_dict, &PyDictIterKey_Type);

  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictIterKey_Type
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  00036	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0003a	e8 00 00 00 00	 call	 dictiter_new
$LN2@dictkeys_i:

; 3364 : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
dictkeys_iter ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictkeys_contains DD imagerel dictkeys_contains
	DD	imagerel dictkeys_contains+54
	DD	imagerel $unwind$dictkeys_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictkeys_contains DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictkeys_contains
_TEXT	SEGMENT
dv$ = 48
obj$ = 56
dictkeys_contains PROC					; COMDAT

; 3368 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3369 :     if (dv->dv_dict == NULL)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  00013	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00018	75 04		 jne	 SHORT $LN1@dictkeys_c

; 3370 :         return 0;

  0001a	33 c0		 xor	 eax, eax
  0001c	eb 13		 jmp	 SHORT $LN2@dictkeys_c
$LN1@dictkeys_c:

; 3371 :     return PyDict_Contains((PyObject *)dv->dv_dict, obj);

  0001e	48 8b 54 24 38	 mov	 rdx, QWORD PTR obj$[rsp]
  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  00028	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0002c	e8 00 00 00 00	 call	 PyDict_Contains
$LN2@dictkeys_c:

; 3372 : }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
dictkeys_contains ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PySet_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictviews_sub DD imagerel dictviews_sub
	DD	imagerel dictviews_sub+139
	DD	imagerel $unwind$dictviews_sub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictviews_sub DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dictviews_sub
_TEXT	SEGMENT
tmp$ = 32
result$ = 40
self$ = 64
other$ = 72
dictviews_sub PROC					; COMDAT

; 3387 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3388 :     PyObject *result = PySet_New(self);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00013	e8 00 00 00 00	 call	 PySet_New
  00018	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3389 :     PyObject *tmp;
; 3390 :     _Py_IDENTIFIER(difference_update);
; 3391 : 
; 3392 :     if (result == NULL)

  0001d	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00023	75 04		 jne	 SHORT $LN2@dictviews_

; 3393 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 5d		 jmp	 SHORT $LN3@dictviews_
$LN2@dictviews_:

; 3394 : 
; 3395 :     tmp = _PyObject_CallMethodId(result, &PyId_difference_update, "O", other);

  00029	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_difference_update@?1??dictviews_sub@@9@9
  0002e	8b c0		 mov	 eax, eax
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00036	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0003f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00043	4c 8b 4c 24 48	 mov	 r9, QWORD PTR other$[rsp]
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0004f	48 8b d0	 mov	 rdx, rax
  00052	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00057	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0005c	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax

; 3396 :     if (tmp == NULL) {

  00061	48 83 7c 24 20
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00067	75 0e		 jne	 SHORT $LN1@dictviews_

; 3397 :         Py_DECREF(result);

  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_DecRef

; 3398 :         return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	eb 0f		 jmp	 SHORT $LN3@dictviews_
$LN1@dictviews_:

; 3399 :     }
; 3400 : 
; 3401 :     Py_DECREF(tmp);

  00077	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  0007c	e8 00 00 00 00	 call	 _Py_DecRef

; 3402 :     return result;

  00081	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN3@dictviews_:

; 3403 : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
dictviews_sub ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictviews_and DD imagerel dictviews_and
	DD	imagerel dictviews_and+139
	DD	imagerel $unwind$dictviews_and
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictviews_and DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictviews_and
_TEXT	SEGMENT
tmp$ = 32
result$ = 40
self$ = 64
other$ = 72
dictviews_and PROC					; COMDAT

; 3407 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3408 :     PyObject *result = PySet_New(self);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00013	e8 00 00 00 00	 call	 PySet_New
  00018	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3409 :     PyObject *tmp;
; 3410 :     _Py_IDENTIFIER(intersection_update);
; 3411 : 
; 3412 :     if (result == NULL)

  0001d	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00023	75 04		 jne	 SHORT $LN2@dictviews_@2

; 3413 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 5d		 jmp	 SHORT $LN3@dictviews_@2
$LN2@dictviews_@2:

; 3414 : 
; 3415 :     tmp = _PyObject_CallMethodId(result, &PyId_intersection_update, "O", other);

  00029	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_intersection_update@?1??dictviews_and@@9@9
  0002e	8b c0		 mov	 eax, eax
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00036	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0003f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00043	4c 8b 4c 24 48	 mov	 r9, QWORD PTR other$[rsp]
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0004f	48 8b d0	 mov	 rdx, rax
  00052	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00057	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0005c	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax

; 3416 :     if (tmp == NULL) {

  00061	48 83 7c 24 20
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00067	75 0e		 jne	 SHORT $LN1@dictviews_@2

; 3417 :         Py_DECREF(result);

  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_DecRef

; 3418 :         return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	eb 0f		 jmp	 SHORT $LN3@dictviews_@2
$LN1@dictviews_@2:

; 3419 :     }
; 3420 : 
; 3421 :     Py_DECREF(tmp);

  00077	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  0007c	e8 00 00 00 00	 call	 _Py_DecRef

; 3422 :     return result;

  00081	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN3@dictviews_@2:

; 3423 : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
dictviews_and ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictviews_or DD imagerel dictviews_or
	DD	imagerel dictviews_or+139
	DD	imagerel $unwind$dictviews_or
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictviews_or DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictviews_or
_TEXT	SEGMENT
tmp$ = 32
result$ = 40
self$ = 64
other$ = 72
dictviews_or PROC					; COMDAT

; 3427 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3428 :     PyObject *result = PySet_New(self);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00013	e8 00 00 00 00	 call	 PySet_New
  00018	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3429 :     PyObject *tmp;
; 3430 :     _Py_IDENTIFIER(update);
; 3431 : 
; 3432 :     if (result == NULL)

  0001d	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00023	75 04		 jne	 SHORT $LN2@dictviews_@3

; 3433 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 5d		 jmp	 SHORT $LN3@dictviews_@3
$LN2@dictviews_@3:

; 3434 : 
; 3435 :     tmp = _PyObject_CallMethodId(result, &PyId_update, "O", other);

  00029	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_update@?1??dictviews_or@@9@9
  0002e	8b c0		 mov	 eax, eax
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00036	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0003f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00043	4c 8b 4c 24 48	 mov	 r9, QWORD PTR other$[rsp]
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0004f	48 8b d0	 mov	 rdx, rax
  00052	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00057	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0005c	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax

; 3436 :     if (tmp == NULL) {

  00061	48 83 7c 24 20
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00067	75 0e		 jne	 SHORT $LN1@dictviews_@3

; 3437 :         Py_DECREF(result);

  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_DecRef

; 3438 :         return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	eb 0f		 jmp	 SHORT $LN3@dictviews_@3
$LN1@dictviews_@3:

; 3439 :     }
; 3440 : 
; 3441 :     Py_DECREF(tmp);

  00077	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  0007c	e8 00 00 00 00	 call	 _Py_DecRef

; 3442 :     return result;

  00081	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN3@dictviews_@3:

; 3443 : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
dictviews_or ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictviews_xor DD imagerel dictviews_xor
	DD	imagerel dictviews_xor+139
	DD	imagerel $unwind$dictviews_xor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictviews_xor DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictviews_xor
_TEXT	SEGMENT
tmp$ = 32
result$ = 40
self$ = 64
other$ = 72
dictviews_xor PROC					; COMDAT

; 3447 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3448 :     PyObject *result = PySet_New(self);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00013	e8 00 00 00 00	 call	 PySet_New
  00018	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3449 :     PyObject *tmp;
; 3450 :     _Py_IDENTIFIER(symmetric_difference_update);
; 3451 : 
; 3452 :     if (result == NULL)

  0001d	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00023	75 04		 jne	 SHORT $LN2@dictviews_@4

; 3453 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 5d		 jmp	 SHORT $LN3@dictviews_@4
$LN2@dictviews_@4:

; 3454 : 
; 3455 :     tmp = _PyObject_CallMethodId(result, &PyId_symmetric_difference_update, "O",
; 3456 :                               other);

  00029	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_symmetric_difference_update@?1??dictviews_xor@@9@9
  0002e	8b c0		 mov	 eax, eax
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00036	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0003f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00043	4c 8b 4c 24 48	 mov	 r9, QWORD PTR other$[rsp]
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0004f	48 8b d0	 mov	 rdx, rax
  00052	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00057	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0005c	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax

; 3457 :     if (tmp == NULL) {

  00061	48 83 7c 24 20
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00067	75 0e		 jne	 SHORT $LN1@dictviews_@4

; 3458 :         Py_DECREF(result);

  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_DecRef

; 3459 :         return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	eb 0f		 jmp	 SHORT $LN3@dictviews_@4
$LN1@dictviews_@4:

; 3460 :     }
; 3461 : 
; 3462 :     Py_DECREF(tmp);

  00077	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  0007c	e8 00 00 00 00	 call	 _Py_DecRef

; 3463 :     return result;

  00081	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN3@dictviews_@4:

; 3464 : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
dictviews_xor ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictviews_isdisjoint DD imagerel dictviews_isdisjoint
	DD	imagerel dictviews_isdisjoint+500
	DD	imagerel $unwind$dictviews_isdisjoint
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictviews_isdisjoint DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictviews_isdisjoint
_TEXT	SEGMENT
it$ = 32
item$ = 40
len_other$23150 = 48
len_self$23148 = 56
tmp$23154 = 64
contains$23162 = 72
self$ = 96
other$ = 104
dictviews_isdisjoint PROC				; COMDAT

; 3487 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3488 :     PyObject *it;
; 3489 :     PyObject *item = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR item$[rsp], 0

; 3490 : 
; 3491 :     if (self == other) {

  00017	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  0001c	48 39 44 24 60	 cmp	 QWORD PTR self$[rsp], rax
  00021	75 41		 jne	 SHORT $LN14@dictviews_@5

; 3492 :         if (dictview_len((dictviewobject *)self) == 0)

  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00028	e8 00 00 00 00	 call	 dictview_len
  0002d	48 85 c0	 test	 rax, rax
  00030	75 1a		 jne	 SHORT $LN13@dictviews_@5

; 3493 :             Py_RETURN_TRUE;

  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00039	e8 00 00 00 00	 call	 _Py_IncRef
  0003e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00045	e9 a5 01 00 00	 jmp	 $LN15@dictviews_@5

; 3494 :         else

  0004a	eb 18		 jmp	 SHORT $LN12@dictviews_@5
$LN13@dictviews_@5:

; 3495 :             Py_RETURN_FALSE;

  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00053	e8 00 00 00 00	 call	 _Py_IncRef
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0005f	e9 8b 01 00 00	 jmp	 $LN15@dictviews_@5
$LN12@dictviews_@5:
$LN14@dictviews_@5:

; 3496 :     }
; 3497 : 
; 3498 :     /* Iterate over the shorter object (only if other is a set,
; 3499 :      * because PySequence_Contains may be expensive otherwise): */
; 3500 :     if (PyAnySet_Check(other) || PyDictViewSet_Check(other)) {

  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySet_Type
  0006b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  00070	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00074	74 68		 je	 SHORT $LN10@dictviews_@5
  00076	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFrozenSet_Type
  0007d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  00082	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00086	74 56		 je	 SHORT $LN10@dictviews_@5
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PySet_Type
  0008f	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  00094	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00098	e8 00 00 00 00	 call	 PyType_IsSubtype
  0009d	85 c0		 test	 eax, eax
  0009f	75 3d		 jne	 SHORT $LN10@dictviews_@5
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFrozenSet_Type
  000a8	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  000ad	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000b1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000b6	85 c0		 test	 eax, eax
  000b8	75 24		 jne	 SHORT $LN10@dictviews_@5
  000ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDictKeys_Type
  000c1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  000c6	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000ca	74 12		 je	 SHORT $LN9@dictviews_@5
  000cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDictItems_Type
  000d3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  000d8	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000dc	75 57		 jne	 SHORT $LN11@dictviews_@5
$LN9@dictviews_@5:
$LN10@dictviews_@5:

; 3501 :         Py_ssize_t len_self = dictview_len((dictviewobject *)self);

  000de	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000e3	e8 00 00 00 00	 call	 dictview_len
  000e8	48 89 44 24 38	 mov	 QWORD PTR len_self$23148[rsp], rax

; 3502 :         Py_ssize_t len_other = PyObject_Size(other);

  000ed	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  000f2	e8 00 00 00 00	 call	 PyObject_Size
  000f7	48 89 44 24 30	 mov	 QWORD PTR len_other$23150[rsp], rax

; 3503 :         if (len_other == -1)

  000fc	48 83 7c 24 30
	ff		 cmp	 QWORD PTR len_other$23150[rsp], -1
  00102	75 07		 jne	 SHORT $LN8@dictviews_@5

; 3504 :             return NULL;

  00104	33 c0		 xor	 eax, eax
  00106	e9 e4 00 00 00	 jmp	 $LN15@dictviews_@5
$LN8@dictviews_@5:

; 3505 : 
; 3506 :         if ((len_other > len_self)) {

  0010b	48 8b 44 24 38	 mov	 rax, QWORD PTR len_self$23148[rsp]
  00110	48 39 44 24 30	 cmp	 QWORD PTR len_other$23150[rsp], rax
  00115	7e 1e		 jle	 SHORT $LN7@dictviews_@5

; 3507 :             PyObject *tmp = other;

  00117	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  0011c	48 89 44 24 40	 mov	 QWORD PTR tmp$23154[rsp], rax

; 3508 :             other = self;

  00121	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00126	48 89 44 24 68	 mov	 QWORD PTR other$[rsp], rax

; 3509 :             self = tmp;

  0012b	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$23154[rsp]
  00130	48 89 44 24 60	 mov	 QWORD PTR self$[rsp], rax
$LN7@dictviews_@5:
$LN11@dictviews_@5:

; 3510 :         }
; 3511 :     }
; 3512 : 
; 3513 :     it = PyObject_GetIter(other);

  00135	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  0013a	e8 00 00 00 00	 call	 PyObject_GetIter
  0013f	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 3514 :     if (it == NULL)

  00144	48 83 7c 24 20
	00		 cmp	 QWORD PTR it$[rsp], 0
  0014a	75 07		 jne	 SHORT $LN6@dictviews_@5

; 3515 :         return NULL;

  0014c	33 c0		 xor	 eax, eax
  0014e	e9 9c 00 00 00	 jmp	 $LN15@dictviews_@5
$LN6@dictviews_@5:
$LN5@dictviews_@5:

; 3516 : 
; 3517 :     while ((item = PyIter_Next(it)) != NULL) {

  00153	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00158	e8 00 00 00 00	 call	 PyIter_Next
  0015d	48 89 44 24 28	 mov	 QWORD PTR item$[rsp], rax
  00162	48 83 7c 24 28
	00		 cmp	 QWORD PTR item$[rsp], 0
  00168	74 5a		 je	 SHORT $LN4@dictviews_@5

; 3518 :         int contains = PySequence_Contains(self, item);

  0016a	48 8b 54 24 28	 mov	 rdx, QWORD PTR item$[rsp]
  0016f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00174	e8 00 00 00 00	 call	 PySequence_Contains
  00179	89 44 24 48	 mov	 DWORD PTR contains$23162[rsp], eax

; 3519 :         Py_DECREF(item);

  0017d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR item$[rsp]
  00182	e8 00 00 00 00	 call	 _Py_DecRef

; 3520 :         if (contains == -1) {

  00187	83 7c 24 48 ff	 cmp	 DWORD PTR contains$23162[rsp], -1
  0018c	75 0e		 jne	 SHORT $LN3@dictviews_@5

; 3521 :             Py_DECREF(it);

  0018e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00193	e8 00 00 00 00	 call	 _Py_DecRef

; 3522 :             return NULL;

  00198	33 c0		 xor	 eax, eax
  0019a	eb 53		 jmp	 SHORT $LN15@dictviews_@5
$LN3@dictviews_@5:

; 3523 :         }
; 3524 : 
; 3525 :         if (contains) {

  0019c	83 7c 24 48 00	 cmp	 DWORD PTR contains$23162[rsp], 0
  001a1	74 1f		 je	 SHORT $LN2@dictviews_@5

; 3526 :             Py_DECREF(it);

  001a3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  001a8	e8 00 00 00 00	 call	 _Py_DecRef

; 3527 :             Py_RETURN_FALSE;

  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  001b4	e8 00 00 00 00	 call	 _Py_IncRef
  001b9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001c0	eb 2d		 jmp	 SHORT $LN15@dictviews_@5
$LN2@dictviews_@5:

; 3528 :         }
; 3529 :     }

  001c2	eb 8f		 jmp	 SHORT $LN5@dictviews_@5
$LN4@dictviews_@5:

; 3530 :     Py_DECREF(it);

  001c4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  001c9	e8 00 00 00 00	 call	 _Py_DecRef

; 3531 :     if (PyErr_Occurred())

  001ce	e8 00 00 00 00	 call	 PyErr_Occurred
  001d3	48 85 c0	 test	 rax, rax
  001d6	74 04		 je	 SHORT $LN1@dictviews_@5

; 3532 :         return NULL; /* PyIter_Next raised an exception. */

  001d8	33 c0		 xor	 eax, eax
  001da	eb 13		 jmp	 SHORT $LN15@dictviews_@5
$LN1@dictviews_@5:

; 3533 :     Py_RETURN_TRUE;

  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  001e3	e8 00 00 00 00	 call	 _Py_IncRef
  001e8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
$LN15@dictviews_@5:

; 3534 : }

  001ef	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001f3	c3		 ret	 0
dictviews_isdisjoint ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictkeys_new DD imagerel dictkeys_new
	DD	imagerel dictkeys_new+31
	DD	imagerel $unwind$dictkeys_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictkeys_new DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictkeys_new
_TEXT	SEGMENT
dict$ = 48
dictkeys_new PROC					; COMDAT

; 3580 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3581 :     return dictview_new(dict, &PyDictKeys_Type);

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictKeys_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  00015	e8 00 00 00 00	 call	 dictview_new

; 3582 : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
dictkeys_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@HBMCOLND@dictview_new?$AA@		; `string'
PUBLIC	??_C@_0CI@EBOFFAIK@?$CFs?$CI?$CJ?5requires?5a?5dict?5argument?0?5n@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictview_new DD imagerel dictview_new
	DD	imagerel dictview_new+456
	DD	imagerel $unwind$dictview_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictview_new DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0N@HBMCOLND@dictview_new?$AA@
CONST	SEGMENT
??_C@_0N@HBMCOLND@dictview_new?$AA@ DB 'dictview_new', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EBOFFAIK@?$CFs?$CI?$CJ?5requires?5a?5dict?5argument?0?5n@
CONST	SEGMENT
??_C@_0CI@EBOFFAIK@?$CFs?$CI?$CJ?5requires?5a?5dict?5argument?0?5n@ DB '%'
	DB	's() requires a dict argument, not ''%s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dictview_new
_TEXT	SEGMENT
dv$ = 48
g$22928 = 56
tv84 = 64
tv135 = 72
dict$ = 96
type$ = 104
dictview_new PROC					; COMDAT

; 3224 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3225 :     dictviewobject *dv;
; 3226 :     if (dict == NULL) {

  0000e	48 83 7c 24 60
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00014	75 18		 jne	 SHORT $LN8@dictview_n

; 3227 :         PyErr_BadInternalCall();

  00016	ba 9b 0c 00 00	 mov	 edx, 3227		; 00000c9bH
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00022	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 3228 :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	e9 95 01 00 00	 jmp	 $LN9@dictview_n
$LN8@dictview_n:

; 3229 :     }
; 3230 :     if (!PyDict_Check(dict)) {

  0002e	48 8b 44 24 60	 mov	 rax, QWORD PTR dict$[rsp]
  00033	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00037	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003d	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00042	85 c0		 test	 eax, eax
  00044	75 30		 jne	 SHORT $LN7@dictview_n

; 3231 :         /* XXX Get rid of this restriction later */
; 3232 :         PyErr_Format(PyExc_TypeError,
; 3233 :                      "%s() requires a dict argument, not '%s'",
; 3234 :                      type->tp_name, dict->ob_type->tp_name);

  00046	48 8b 44 24 60	 mov	 rax, QWORD PTR dict$[rsp]
  0004b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004f	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00053	48 8b 44 24 68	 mov	 rax, QWORD PTR type$[rsp]
  00058	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@EBOFFAIK@?$CFs?$CI?$CJ?5requires?5a?5dict?5argument?0?5n@
  00063	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0006a	e8 00 00 00 00	 call	 PyErr_Format

; 3235 :         return NULL;

  0006f	33 c0		 xor	 eax, eax
  00071	e9 4d 01 00 00	 jmp	 $LN9@dictview_n
$LN7@dictview_n:

; 3236 :     }
; 3237 :     dv = PyObject_GC_New(dictviewobject, type);

  00076	e8 00 00 00 00	 call	 _Py_PXCTX
  0007b	85 c0		 test	 eax, eax
  0007d	74 11		 je	 SHORT $LN11@dictview_n
  0007f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR type$[rsp]
  00084	e8 00 00 00 00	 call	 _PxObject_New
  00089	48 89 44 24 40	 mov	 QWORD PTR tv84[rsp], rax
  0008e	eb 0f		 jmp	 SHORT $LN12@dictview_n
$LN11@dictview_n:
  00090	48 8b 4c 24 68	 mov	 rcx, QWORD PTR type$[rsp]
  00095	e8 00 00 00 00	 call	 _PyObject_GC_New
  0009a	48 89 44 24 40	 mov	 QWORD PTR tv84[rsp], rax
$LN12@dictview_n:
  0009f	48 8b 44 24 40	 mov	 rax, QWORD PTR tv84[rsp]
  000a4	48 89 44 24 30	 mov	 QWORD PTR dv$[rsp], rax

; 3238 :     if (dv == NULL)

  000a9	48 83 7c 24 30
	00		 cmp	 QWORD PTR dv$[rsp], 0
  000af	75 07		 jne	 SHORT $LN6@dictview_n

; 3239 :         return NULL;

  000b1	33 c0		 xor	 eax, eax
  000b3	e9 0b 01 00 00	 jmp	 $LN9@dictview_n
$LN6@dictview_n:

; 3240 :     Py_INCREF(dict);

  000b8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dict$[rsp]
  000bd	e8 00 00 00 00	 call	 _Py_IncRef

; 3241 :     dv->dv_dict = (PyDictObject *)dict;

  000c2	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  000c7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dict$[rsp]
  000cc	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 3242 :     _PyObject_GC_TRACK(dv);

  000d0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d8	4c 8b 4c 24 30	 mov	 r9, QWORD PTR dv$[rsp]
  000dd	41 b8 aa 0c 00
	00		 mov	 r8d, 3242		; 00000caaH
  000e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HBMCOLND@dictview_new?$AA@
  000f1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f6	85 c0		 test	 eax, eax
  000f8	0f 85 c0 00 00
	00		 jne	 $LN5@dictview_n
$LN4@dictview_n:
  000fe	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00106	4c 8b 4c 24 30	 mov	 r9, QWORD PTR dv$[rsp]
  0010b	41 b8 aa 0c 00
	00		 mov	 r8d, 3242		; 00000caaH
  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LNHGAPGK@?4?4?2Objects?2dictobject?4c?$AA@
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HBMCOLND@dictview_new?$AA@
  0011f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00124	85 c0		 test	 eax, eax
  00126	74 0b		 je	 SHORT $LN13@dictview_n
  00128	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv135[rsp], 0
  00131	eb 0e		 jmp	 SHORT $LN14@dictview_n
$LN13@dictview_n:
  00133	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  00138	48 83 e8 18	 sub	 rax, 24
  0013c	48 89 44 24 48	 mov	 QWORD PTR tv135[rsp], rax
$LN14@dictview_n:
  00141	48 8b 44 24 48	 mov	 rax, QWORD PTR tv135[rsp]
  00146	48 89 44 24 38	 mov	 QWORD PTR g$22928[rsp], rax
  0014b	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22928[rsp]
  00150	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00155	74 0c		 je	 SHORT $LN1@dictview_n
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  0015e	e8 00 00 00 00	 call	 Py_FatalError
$LN1@dictview_n:
  00163	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22928[rsp]
  00168	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  00170	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22928[rsp]
  00175	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0017c	48 89 08	 mov	 QWORD PTR [rax], rcx
  0017f	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22928[rsp]
  00184	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0018b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0018f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00193	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22928[rsp]
  00198	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0019c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$22928[rsp]
  001a1	48 89 08	 mov	 QWORD PTR [rax], rcx
  001a4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  001ab	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$22928[rsp]
  001b0	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001b4	33 c0		 xor	 eax, eax
  001b6	85 c0		 test	 eax, eax
  001b8	0f 85 40 ff ff
	ff		 jne	 $LN4@dictview_n
$LN5@dictview_n:

; 3243 :     return (PyObject *)dv;

  001be	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
$LN9@dictview_n:

; 3244 : }

  001c3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001c7	c3		 ret	 0
dictview_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictitems_iter DD imagerel dictitems_iter
	DD	imagerel dictitems_iter+68
	DD	imagerel $unwind$dictitems_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictitems_iter DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictitems_iter
_TEXT	SEGMENT
dv$ = 48
dictitems_iter PROC					; COMDAT

; 3588 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3589 :     if (dv->dv_dict == NULL) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	75 15		 jne	 SHORT $LN1@dictitems_

; 3590 :         Py_RETURN_NONE;

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001c	e8 00 00 00 00	 call	 _Py_IncRef
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00028	eb 15		 jmp	 SHORT $LN2@dictitems_
$LN1@dictitems_:

; 3591 :     }
; 3592 :     return dictiter_new(dv->dv_dict, &PyDictIterItem_Type);

  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictIterItem_Type
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  00036	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0003a	e8 00 00 00 00	 call	 dictiter_new
$LN2@dictitems_:

; 3593 : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
dictitems_iter ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictitems_contains DD imagerel dictitems_contains
	DD	imagerel dictitems_contains+180
	DD	imagerel $unwind$dictitems_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictitems_contains DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictitems_contains
_TEXT	SEGMENT
found$ = 32
value$ = 40
key$ = 48
dv$ = 80
obj$ = 88
dictitems_contains PROC					; COMDAT

; 3597 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3598 :     PyObject *key, *value, *found;
; 3599 :     if (dv->dv_dict == NULL)

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR dv$[rsp]
  00013	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00018	75 07		 jne	 SHORT $LN5@dictitems_@2

; 3600 :         return 0;

  0001a	33 c0		 xor	 eax, eax
  0001c	e9 8e 00 00 00	 jmp	 $LN6@dictitems_@2
$LN5@dictitems_@2:

; 3601 :     if (!PyTuple_Check(obj) || PyTuple_GET_SIZE(obj) != 2)

  00021	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  00026	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00030	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00035	85 c0		 test	 eax, eax
  00037	74 0c		 je	 SHORT $LN3@dictitems_@2
  00039	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  0003e	48 83 78 60 02	 cmp	 QWORD PTR [rax+96], 2
  00043	74 04		 je	 SHORT $LN4@dictitems_@2
$LN3@dictitems_@2:

; 3602 :         return 0;

  00045	33 c0		 xor	 eax, eax
  00047	eb 66		 jmp	 SHORT $LN6@dictitems_@2
$LN4@dictitems_@2:

; 3603 :     key = PyTuple_GET_ITEM(obj, 0);

  00049	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  0004e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00052	48 89 44 24 30	 mov	 QWORD PTR key$[rsp], rax

; 3604 :     value = PyTuple_GET_ITEM(obj, 1);

  00057	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  0005c	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00060	48 89 44 24 28	 mov	 QWORD PTR value$[rsp], rax

; 3605 :     found = PyDict_GetItem((PyObject *)dv->dv_dict, key);

  00065	48 8b 54 24 30	 mov	 rdx, QWORD PTR key$[rsp]
  0006a	48 8b 44 24 50	 mov	 rax, QWORD PTR dv$[rsp]
  0006f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00073	e8 00 00 00 00	 call	 PyDict_GetItem
  00078	48 89 44 24 20	 mov	 QWORD PTR found$[rsp], rax

; 3606 :     if (found == NULL) {

  0007d	48 83 7c 24 20
	00		 cmp	 QWORD PTR found$[rsp], 0
  00083	75 15		 jne	 SHORT $LN2@dictitems_@2

; 3607 :         if (PyErr_Occurred())

  00085	e8 00 00 00 00	 call	 PyErr_Occurred
  0008a	48 85 c0	 test	 rax, rax
  0008d	74 07		 je	 SHORT $LN1@dictitems_@2

; 3608 :             return -1;

  0008f	b8 ff ff ff ff	 mov	 eax, -1
  00094	eb 19		 jmp	 SHORT $LN6@dictitems_@2
$LN1@dictitems_@2:

; 3609 :         return 0;

  00096	33 c0		 xor	 eax, eax
  00098	eb 15		 jmp	 SHORT $LN6@dictitems_@2
$LN2@dictitems_@2:

; 3610 :     }
; 3611 :     return PyObject_RichCompareBool(value, found, Py_EQ);

  0009a	41 b8 02 00 00
	00		 mov	 r8d, 2
  000a0	48 8b 54 24 20	 mov	 rdx, QWORD PTR found$[rsp]
  000a5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR value$[rsp]
  000aa	e8 00 00 00 00	 call	 PyObject_RichCompareBool
$LN6@dictitems_@2:

; 3612 : }

  000af	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b3	c3		 ret	 0
dictitems_contains ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictitems_new DD imagerel dictitems_new
	DD	imagerel dictitems_new+31
	DD	imagerel $unwind$dictitems_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictitems_new DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictitems_new
_TEXT	SEGMENT
dict$ = 48
dictitems_new PROC					; COMDAT

; 3666 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3667 :     return dictview_new(dict, &PyDictItems_Type);

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictItems_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  00015	e8 00 00 00 00	 call	 dictview_new

; 3668 : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
dictitems_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictvalues_iter DD imagerel dictvalues_iter
	DD	imagerel dictvalues_iter+68
	DD	imagerel $unwind$dictvalues_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictvalues_iter DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictvalues_iter
_TEXT	SEGMENT
dv$ = 48
dictvalues_iter PROC					; COMDAT

; 3674 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3675 :     if (dv->dv_dict == NULL) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	75 15		 jne	 SHORT $LN1@dictvalues

; 3676 :         Py_RETURN_NONE;

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001c	e8 00 00 00 00	 call	 _Py_IncRef
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00028	eb 15		 jmp	 SHORT $LN2@dictvalues
$LN1@dictvalues:

; 3677 :     }
; 3678 :     return dictiter_new(dv->dv_dict, &PyDictIterValue_Type);

  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictIterValue_Type
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR dv$[rsp]
  00036	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0003a	e8 00 00 00 00	 call	 dictiter_new
$LN2@dictvalues:

; 3679 : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
dictvalues_iter ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dictvalues_new DD imagerel dictvalues_new
	DD	imagerel dictvalues_new+31
	DD	imagerel $unwind$dictvalues_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dictvalues_new DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dictvalues_new
_TEXT	SEGMENT
dict$ = 48
dictvalues_new PROC					; COMDAT

; 3731 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3732 :     return dictview_new(dict, &PyDictValues_Type);

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDictValues_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  00015	e8 00 00 00 00	 call	 dictview_new

; 3733 : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
dictvalues_new ENDP
_TEXT	ENDS
PUBLIC	_PyDict_NewKeysForClass
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDict_NewKeysForClass DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$_PyDict_NewKeysForClass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDict_NewKeysForClass DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyDict_NewKeysForClass
_TEXT	SEGMENT
keys$ = 32
_PyDict_NewKeysForClass PROC				; COMDAT

; 3739 : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3740 :     PyDictKeysObject *keys = new_keys_object(PyDict_MINSIZE_SPLIT);

  00004	b9 04 00 00 00	 mov	 ecx, 4
  00009	e8 00 00 00 00	 call	 new_keys_object
  0000e	48 89 44 24 20	 mov	 QWORD PTR keys$[rsp], rax

; 3741 :     if (keys == NULL)

  00013	48 83 7c 24 20
	00		 cmp	 QWORD PTR keys$[rsp], 0
  00019	75 07		 jne	 SHORT $LN2@PyDict_New@2

; 3742 :         PyErr_Clear();

  0001b	e8 00 00 00 00	 call	 PyErr_Clear

; 3743 :     else

  00020	eb 10		 jmp	 SHORT $LN1@PyDict_New@2
$LN2@PyDict_New@2:

; 3744 :         keys->dk_lookup = lookdict_split;

  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR keys$[rsp]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_split
  0002e	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN1@PyDict_New@2:

; 3745 :     return keys;

  00032	48 8b 44 24 20	 mov	 rax, QWORD PTR keys$[rsp]

; 3746 : }

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
_PyDict_NewKeysForClass ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@ ; `string'
PUBLIC	PyObject_GenericGetDict
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_PyObject_GetDictPtr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GenericGetDict DD imagerel $LN13
	DD	imagerel $LN13+292
	DD	imagerel $unwind$PyObject_GenericGetDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GenericGetDict DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@
CONST	SEGMENT
??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@ DB 'This object h'
	DB	'as no __dict__', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_GenericGetDict
_TEXT	SEGMENT
dict$ = 32
dictptr$ = 40
tp$23315 = 48
obj$ = 80
context$ = 88
PyObject_GenericGetDict PROC				; COMDAT

; 3752 : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3753 :     PyObject *dict, **dictptr = _PyObject_GetDictPtr(obj);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  00018	48 89 44 24 28	 mov	 QWORD PTR dictptr$[rsp], rax

; 3754 :     if (dictptr == NULL) {

  0001d	48 83 7c 24 28
	00		 cmp	 QWORD PTR dictptr$[rsp], 0
  00023	75 1a		 jne	 SHORT $LN8@PyObject_G

; 3755 :         PyErr_SetString(PyExc_AttributeError,
; 3756 :                         "This object has no __dict__");

  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@
  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00033	e8 00 00 00 00	 call	 PyErr_SetString

; 3757 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	e9 e0 00 00 00	 jmp	 $LN9@PyObject_G
$LN8@PyObject_G:

; 3758 :     }
; 3759 :     dict = *dictptr;

  0003f	48 8b 44 24 28	 mov	 rax, QWORD PTR dictptr$[rsp]
  00044	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00047	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 3760 :     if (dict == NULL) {

  0004c	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00052	0f 85 aa 00 00
	00		 jne	 $LN7@PyObject_G

; 3761 :         PyTypeObject *tp = Py_TYPE(obj);

  00058	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  0005d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00061	48 89 44 24 30	 mov	 QWORD PTR tp$23315[rsp], rax

; 3762 :         if ((tp->tp_flags & Py_TPFLAGS_HEAPTYPE) && CACHED_KEYS(tp)) {

  00066	48 8b 44 24 30	 mov	 rax, QWORD PTR tp$23315[rsp]
  0006b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00071	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00076	85 c0		 test	 eax, eax
  00078	74 71		 je	 SHORT $LN6@PyObject_G
  0007a	48 8b 44 24 30	 mov	 rax, QWORD PTR tp$23315[rsp]
  0007f	48 83 b8 80 03
	00 00 00	 cmp	 QWORD PTR [rax+896], 0
  00087	74 62		 je	 SHORT $LN6@PyObject_G

; 3763 :             DK_INCREF(CACHED_KEYS(tp));

  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	74 02		 je	 SHORT $LN11@PyObject_G
  00092	eb 11		 jmp	 SHORT $LN12@PyObject_G
$LN11@PyObject_G:
  00094	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  0009b	48 ff c0	 inc	 rax
  0009e	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@PyObject_G:
  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR tp$23315[rsp]
  000aa	48 8b 80 80 03
	00 00		 mov	 rax, QWORD PTR [rax+896]
  000b1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b4	48 ff c0	 inc	 rax
  000b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tp$23315[rsp]
  000bc	48 8b 89 80 03
	00 00		 mov	 rcx, QWORD PTR [rcx+896]
  000c3	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3764 :             *dictptr = dict = new_dict_with_shared_keys(CACHED_KEYS(tp));

  000c6	48 8b 44 24 30	 mov	 rax, QWORD PTR tp$23315[rsp]
  000cb	48 8b 88 80 03
	00 00		 mov	 rcx, QWORD PTR [rax+896]
  000d2	e8 00 00 00 00	 call	 new_dict_with_shared_keys
  000d7	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax
  000dc	48 8b 44 24 28	 mov	 rax, QWORD PTR dictptr$[rsp]
  000e1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  000e6	48 89 08	 mov	 QWORD PTR [rax], rcx

; 3765 :         }
; 3766 :         else {

  000e9	eb 17		 jmp	 SHORT $LN5@PyObject_G
$LN6@PyObject_G:

; 3767 :             *dictptr = dict = PyDict_New();

  000eb	e8 00 00 00 00	 call	 PyDict_New
  000f0	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax
  000f5	48 8b 44 24 28	 mov	 rax, QWORD PTR dictptr$[rsp]
  000fa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  000ff	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN5@PyObject_G:
$LN7@PyObject_G:
$LN4@PyObject_G:

; 3768 :         }
; 3769 :     }
; 3770 :     Py_XINCREF(dict);

  00102	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00108	74 0a		 je	 SHORT $LN1@PyObject_G
  0010a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0010f	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@PyObject_G:
  00114	33 c0		 xor	 eax, eax
  00116	85 c0		 test	 eax, eax
  00118	75 e8		 jne	 SHORT $LN4@PyObject_G

; 3771 :     return dict;

  0011a	48 8b 44 24 20	 mov	 rax, QWORD PTR dict$[rsp]
$LN9@PyObject_G:

; 3772 : }

  0011f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00123	c3		 ret	 0
PyObject_GenericGetDict ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_dict_with_shared_keys DD imagerel new_dict_with_shared_keys
	DD	imagerel new_dict_with_shared_keys+285
	DD	imagerel $unwind$new_dict_with_shared_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_dict_with_shared_keys DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT new_dict_with_shared_keys
_TEXT	SEGMENT
i$ = 32
values$ = 40
size$ = 48
tv75 = 56
tv74 = 64
keys$ = 96
new_dict_with_shared_keys PROC				; COMDAT

; 419  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 420  :     PyObject **values;
; 421  :     Py_ssize_t i, size;
; 422  : 
; 423  :     size = DK_SIZE(keys);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR keys$[rsp]
  0000e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00012	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 424  :     values = new_values(size);

  00017	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  00021	48 39 44 24 30	 cmp	 QWORD PTR size$[rsp], rax
  00026	76 0b		 jbe	 SHORT $LN10@new_dict_w
  00028	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv75[rsp], 0
  00031	eb 41		 jmp	 SHORT $LN11@new_dict_w
$LN10@new_dict_w:
  00033	e8 00 00 00 00	 call	 _Py_PXCTX
  00038	85 c0		 test	 eax, eax
  0003a	74 18		 je	 SHORT $LN8@new_dict_w
  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  00041	48 c1 e0 03	 shl	 rax, 3
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 _PxMem_Malloc
  0004d	48 89 44 24 40	 mov	 QWORD PTR tv74[rsp], rax
  00052	eb 16		 jmp	 SHORT $LN9@new_dict_w
$LN8@new_dict_w:
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  00059	48 c1 e0 03	 shl	 rax, 3
  0005d	48 8b c8	 mov	 rcx, rax
  00060	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  00065	48 89 44 24 40	 mov	 QWORD PTR tv74[rsp], rax
$LN9@new_dict_w:
  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR tv74[rsp]
  0006f	48 89 44 24 38	 mov	 QWORD PTR tv75[rsp], rax
$LN11@new_dict_w:
  00074	48 8b 44 24 38	 mov	 rax, QWORD PTR tv75[rsp]
  00079	48 89 44 24 28	 mov	 QWORD PTR values$[rsp], rax

; 425  :     if (values == NULL) {

  0007e	48 83 7c 24 28
	00		 cmp	 QWORD PTR values$[rsp], 0
  00084	75 4b		 jne	 SHORT $LN5@new_dict_w

; 426  :         DK_DECREF(keys);

  00086	e8 00 00 00 00	 call	 _Py_PXCTX
  0008b	85 c0		 test	 eax, eax
  0008d	74 02		 je	 SHORT $LN12@new_dict_w
  0008f	eb 11		 jmp	 SHORT $LN13@new_dict_w
$LN12@new_dict_w:
  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00098	48 ff c8	 dec	 rax
  0009b	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN13@new_dict_w:
  000a2	48 8b 44 24 60	 mov	 rax, QWORD PTR keys$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 ff c8	 dec	 rax
  000ad	48 8b 4c 24 60	 mov	 rcx, QWORD PTR keys$[rsp]
  000b2	48 89 01	 mov	 QWORD PTR [rcx], rax
  000b5	48 8b 44 24 60	 mov	 rax, QWORD PTR keys$[rsp]
  000ba	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000be	75 0a		 jne	 SHORT $LN4@new_dict_w
  000c0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR keys$[rsp]
  000c5	e8 00 00 00 00	 call	 free_keys_object
$LN4@new_dict_w:

; 427  :         return PyErr_NoMemory();

  000ca	e8 00 00 00 00	 call	 PyErr_NoMemory
  000cf	eb 47		 jmp	 SHORT $LN6@new_dict_w
$LN5@new_dict_w:

; 428  :     }
; 429  :     for (i = 0; i < size; i++) {

  000d1	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000da	eb 0d		 jmp	 SHORT $LN3@new_dict_w
$LN2@new_dict_w:
  000dc	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  000e1	48 ff c0	 inc	 rax
  000e4	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN3@new_dict_w:
  000e9	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  000ee	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  000f3	7d 14		 jge	 SHORT $LN1@new_dict_w

; 430  :         values[i] = NULL;

  000f5	48 8b 44 24 28	 mov	 rax, QWORD PTR values$[rsp]
  000fa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000ff	48 c7 04 c8 00
	00 00 00	 mov	 QWORD PTR [rax+rcx*8], 0

; 431  :     }

  00107	eb d3		 jmp	 SHORT $LN2@new_dict_w
$LN1@new_dict_w:

; 432  :     return new_dict(keys, values);

  00109	48 8b 54 24 28	 mov	 rdx, QWORD PTR values$[rsp]
  0010e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR keys$[rsp]
  00113	e8 00 00 00 00	 call	 new_dict
$LN6@new_dict_w:

; 433  : }

  00118	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0011c	c3		 ret	 0
new_dict_with_shared_keys ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CA@HGHLDIFC@?$AAd?$AAi?$AAc?$AAt?$AAp?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	_PyObjectDict_SetItem
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObjectDict_SetItem DD imagerel $LN28
	DD	imagerel $LN28+713
	DD	imagerel $unwind$_PyObjectDict_SetItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObjectDict_SetItem DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_1CA@HGHLDIFC@?$AAd?$AAi?$AAc?$AAt?$AAp?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@HGHLDIFC@?$AAd?$AAi?$AAc?$AAt?$AAp?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'd'
	DB	00H, 'i', 00H, 'c', 00H, 't', 00H, 'p', 00H, 't', 00H, 'r', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObjectDict_SetItem
_TEXT	SEGMENT
res$ = 32
dict$ = 40
cached$ = 48
tp$ = 80
dictptr$ = 88
key$ = 96
value$ = 104
_PyObjectDict_SetItem PROC				; COMDAT

; 3777 : {

$LN28:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3778 :     PyObject *dict;
; 3779 :     int res;
; 3780 :     PyDictKeysObject *cached;
; 3781 : 
; 3782 :     assert(dictptr != NULL);

  00018	48 83 7c 24 58
	00		 cmp	 QWORD PTR dictptr$[rsp], 0
  0001e	75 1c		 jne	 SHORT $LN20@PyObjectDi
  00020	41 b8 c6 0e 00
	00		 mov	 r8d, 3782		; 00000ec6H
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@HGHLDIFC@?$AAd?$AAi?$AAc?$AAt?$AAp?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003a	33 c0		 xor	 eax, eax
$LN20@PyObjectDi:

; 3783 :     if ((tp->tp_flags & Py_TPFLAGS_HEAPTYPE) && (cached = CACHED_KEYS(tp))) {

  0003c	48 8b 44 24 50	 mov	 rax, QWORD PTR tp$[rsp]
  00041	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00047	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0004c	85 c0		 test	 eax, eax
  0004e	0f 84 fc 01 00
	00		 je	 $LN17@PyObjectDi
  00054	48 8b 44 24 50	 mov	 rax, QWORD PTR tp$[rsp]
  00059	48 8b 80 80 03
	00 00		 mov	 rax, QWORD PTR [rax+896]
  00060	48 89 44 24 30	 mov	 QWORD PTR cached$[rsp], rax
  00065	48 83 7c 24 30
	00		 cmp	 QWORD PTR cached$[rsp], 0
  0006b	0f 84 df 01 00
	00		 je	 $LN17@PyObjectDi

; 3784 :         assert(dictptr != NULL);

  00071	48 83 7c 24 58
	00		 cmp	 QWORD PTR dictptr$[rsp], 0
  00077	75 1c		 jne	 SHORT $LN21@PyObjectDi
  00079	41 b8 c8 0e 00
	00		 mov	 r8d, 3784		; 00000ec8H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@HGHLDIFC@?$AAd?$AAi?$AAc?$AAt?$AAp?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00093	33 c0		 xor	 eax, eax
$LN21@PyObjectDi:

; 3785 :         dict = *dictptr;

  00095	48 8b 44 24 58	 mov	 rax, QWORD PTR dictptr$[rsp]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 89 44 24 28	 mov	 QWORD PTR dict$[rsp], rax

; 3786 :         if (dict == NULL) {

  000a2	48 83 7c 24 28
	00		 cmp	 QWORD PTR dict$[rsp], 0
  000a8	75 5d		 jne	 SHORT $LN16@PyObjectDi

; 3787 :             DK_INCREF(cached);

  000aa	e8 00 00 00 00	 call	 _Py_PXCTX
  000af	85 c0		 test	 eax, eax
  000b1	74 02		 je	 SHORT $LN22@PyObjectDi
  000b3	eb 11		 jmp	 SHORT $LN23@PyObjectDi
$LN22@PyObjectDi:
  000b5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  000bc	48 ff c0	 inc	 rax
  000bf	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN23@PyObjectDi:
  000c6	48 8b 44 24 30	 mov	 rax, QWORD PTR cached$[rsp]
  000cb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ce	48 ff c0	 inc	 rax
  000d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cached$[rsp]
  000d6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3788 :             dict = new_dict_with_shared_keys(cached);

  000d9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cached$[rsp]
  000de	e8 00 00 00 00	 call	 new_dict_with_shared_keys
  000e3	48 89 44 24 28	 mov	 QWORD PTR dict$[rsp], rax

; 3789 :             if (dict == NULL)

  000e8	48 83 7c 24 28
	00		 cmp	 QWORD PTR dict$[rsp], 0
  000ee	75 0a		 jne	 SHORT $LN15@PyObjectDi

; 3790 :                 return -1;

  000f0	b8 ff ff ff ff	 mov	 eax, -1
  000f5	e9 ca 01 00 00	 jmp	 $LN18@PyObjectDi
$LN15@PyObjectDi:

; 3791 :             *dictptr = dict;

  000fa	48 8b 44 24 58	 mov	 rax, QWORD PTR dictptr$[rsp]
  000ff	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  00104	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN16@PyObjectDi:

; 3792 :         }
; 3793 :         if (value == NULL) {

  00107	48 83 7c 24 68
	00		 cmp	 QWORD PTR value$[rsp], 0
  0010d	75 7c		 jne	 SHORT $LN14@PyObjectDi

; 3794 :             res = PyDict_DelItem(dict, key);

  0010f	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$[rsp]
  00114	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  00119	e8 00 00 00 00	 call	 PyDict_DelItem
  0011e	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3795 :             if (cached != ((PyDictObject *)dict)->ma_keys) {

  00122	48 8b 44 24 28	 mov	 rax, QWORD PTR dict$[rsp]
  00127	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0012b	48 39 44 24 30	 cmp	 QWORD PTR cached$[rsp], rax
  00130	74 54		 je	 SHORT $LN13@PyObjectDi

; 3796 :                 CACHED_KEYS(tp) = NULL;

  00132	48 8b 44 24 50	 mov	 rax, QWORD PTR tp$[rsp]
  00137	48 c7 80 80 03
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+896], 0

; 3797 :                 DK_DECREF(cached);

  00142	e8 00 00 00 00	 call	 _Py_PXCTX
  00147	85 c0		 test	 eax, eax
  00149	74 02		 je	 SHORT $LN24@PyObjectDi
  0014b	eb 11		 jmp	 SHORT $LN25@PyObjectDi
$LN24@PyObjectDi:
  0014d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00154	48 ff c8	 dec	 rax
  00157	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN25@PyObjectDi:
  0015e	48 8b 44 24 30	 mov	 rax, QWORD PTR cached$[rsp]
  00163	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00166	48 ff c8	 dec	 rax
  00169	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cached$[rsp]
  0016e	48 89 01	 mov	 QWORD PTR [rcx], rax
  00171	48 8b 44 24 30	 mov	 rax, QWORD PTR cached$[rsp]
  00176	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0017a	75 0a		 jne	 SHORT $LN12@PyObjectDi
  0017c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cached$[rsp]
  00181	e8 00 00 00 00	 call	 free_keys_object
$LN12@PyObjectDi:
$LN13@PyObjectDi:

; 3798 :             }
; 3799 :         } else {

  00186	e9 c3 00 00 00	 jmp	 $LN11@PyObjectDi
$LN14@PyObjectDi:

; 3800 :             res = PyDict_SetItem(dict, key, value);

  0018b	4c 8b 44 24 68	 mov	 r8, QWORD PTR value$[rsp]
  00190	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$[rsp]
  00195	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  0019a	e8 00 00 00 00	 call	 PyDict_SetItem
  0019f	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3801 :             if (cached != ((PyDictObject *)dict)->ma_keys) {

  001a3	48 8b 44 24 28	 mov	 rax, QWORD PTR dict$[rsp]
  001a8	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001ac	48 39 44 24 30	 cmp	 QWORD PTR cached$[rsp], rax
  001b1	0f 84 97 00 00
	00		 je	 $LN10@PyObjectDi

; 3802 :                 /* Either update tp->ht_cached_keys or delete it */
; 3803 :                 if (cached->dk_refcnt == 1) {

  001b7	48 8b 44 24 30	 mov	 rax, QWORD PTR cached$[rsp]
  001bc	48 83 38 01	 cmp	 QWORD PTR [rax], 1
  001c0	75 18		 jne	 SHORT $LN9@PyObjectDi

; 3804 :                     CACHED_KEYS(tp) = make_keys_shared(dict);

  001c2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  001c7	e8 00 00 00 00	 call	 make_keys_shared
  001cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tp$[rsp]
  001d1	48 89 81 80 03
	00 00		 mov	 QWORD PTR [rcx+896], rax

; 3805 :                 } else {

  001d8	eb 10		 jmp	 SHORT $LN8@PyObjectDi
$LN9@PyObjectDi:

; 3806 :                     CACHED_KEYS(tp) = NULL;

  001da	48 8b 44 24 50	 mov	 rax, QWORD PTR tp$[rsp]
  001df	48 c7 80 80 03
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+896], 0
$LN8@PyObjectDi:

; 3807 :                 }
; 3808 :                 DK_DECREF(cached);

  001ea	e8 00 00 00 00	 call	 _Py_PXCTX
  001ef	85 c0		 test	 eax, eax
  001f1	74 02		 je	 SHORT $LN26@PyObjectDi
  001f3	eb 11		 jmp	 SHORT $LN27@PyObjectDi
$LN26@PyObjectDi:
  001f5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  001fc	48 ff c8	 dec	 rax
  001ff	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN27@PyObjectDi:
  00206	48 8b 44 24 30	 mov	 rax, QWORD PTR cached$[rsp]
  0020b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0020e	48 ff c8	 dec	 rax
  00211	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cached$[rsp]
  00216	48 89 01	 mov	 QWORD PTR [rcx], rax
  00219	48 8b 44 24 30	 mov	 rax, QWORD PTR cached$[rsp]
  0021e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00222	75 0a		 jne	 SHORT $LN7@PyObjectDi
  00224	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cached$[rsp]
  00229	e8 00 00 00 00	 call	 free_keys_object
$LN7@PyObjectDi:

; 3809 :                 if (CACHED_KEYS(tp) == NULL && PyErr_Occurred())

  0022e	48 8b 44 24 50	 mov	 rax, QWORD PTR tp$[rsp]
  00233	48 83 b8 80 03
	00 00 00	 cmp	 QWORD PTR [rax+896], 0
  0023b	75 11		 jne	 SHORT $LN6@PyObjectDi
  0023d	e8 00 00 00 00	 call	 PyErr_Occurred
  00242	48 85 c0	 test	 rax, rax
  00245	74 07		 je	 SHORT $LN6@PyObjectDi

; 3810 :                     return -1;

  00247	b8 ff ff ff ff	 mov	 eax, -1
  0024c	eb 76		 jmp	 SHORT $LN18@PyObjectDi
$LN6@PyObjectDi:
$LN10@PyObjectDi:
$LN11@PyObjectDi:

; 3811 :             }
; 3812 :         }
; 3813 :     } else {

  0024e	eb 70		 jmp	 SHORT $LN5@PyObjectDi
$LN17@PyObjectDi:

; 3814 :         dict = *dictptr;

  00250	48 8b 44 24 58	 mov	 rax, QWORD PTR dictptr$[rsp]
  00255	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00258	48 89 44 24 28	 mov	 QWORD PTR dict$[rsp], rax

; 3815 :         if (dict == NULL) {

  0025d	48 83 7c 24 28
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00263	75 26		 jne	 SHORT $LN4@PyObjectDi

; 3816 :             dict = PyDict_New();

  00265	e8 00 00 00 00	 call	 PyDict_New
  0026a	48 89 44 24 28	 mov	 QWORD PTR dict$[rsp], rax

; 3817 :             if (dict == NULL)

  0026f	48 83 7c 24 28
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00275	75 07		 jne	 SHORT $LN3@PyObjectDi

; 3818 :                 return -1;

  00277	b8 ff ff ff ff	 mov	 eax, -1
  0027c	eb 46		 jmp	 SHORT $LN18@PyObjectDi
$LN3@PyObjectDi:

; 3819 :             *dictptr = dict;

  0027e	48 8b 44 24 58	 mov	 rax, QWORD PTR dictptr$[rsp]
  00283	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  00288	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN4@PyObjectDi:

; 3820 :         }
; 3821 :         if (value == NULL) {

  0028b	48 83 7c 24 68
	00		 cmp	 QWORD PTR value$[rsp], 0
  00291	75 15		 jne	 SHORT $LN2@PyObjectDi

; 3822 :             res = PyDict_DelItem(dict, key);

  00293	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$[rsp]
  00298	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  0029d	e8 00 00 00 00	 call	 PyDict_DelItem
  002a2	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 3823 :         } else {

  002a6	eb 18		 jmp	 SHORT $LN1@PyObjectDi
$LN2@PyObjectDi:

; 3824 :             res = PyDict_SetItem(dict, key, value);

  002a8	4c 8b 44 24 68	 mov	 r8, QWORD PTR value$[rsp]
  002ad	48 8b 54 24 60	 mov	 rdx, QWORD PTR key$[rsp]
  002b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  002b7	e8 00 00 00 00	 call	 PyDict_SetItem
  002bc	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN1@PyObjectDi:
$LN5@PyObjectDi:

; 3825 :         }
; 3826 :     }
; 3827 :     return res;

  002c0	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN18@PyObjectDi:

; 3828 : }

  002c4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002c8	c3		 ret	 0
_PyObjectDict_SetItem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@CANHAIEM@Not?5enough?5memory?5to?5allocate?5ne@ ; `string'
PUBLIC	??_C@_1GG@PJGCKCO@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAo?$AAo?$AAk?$AAd?$AAi@ ; `string'
PUBLIC	??_C@_1DI@FFOPFLL@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ ; `string'
EXTRN	PyExc_MemoryError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_keys_shared DD imagerel make_keys_shared
	DD	imagerel make_keys_shared+628
	DD	imagerel $unwind$make_keys_shared
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_keys_shared DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0CP@CANHAIEM@Not?5enough?5memory?5to?5allocate?5ne@
CONST	SEGMENT
??_C@_0CP@CANHAIEM@Not?5enough?5memory?5to?5allocate?5ne@ DB 'Not enough '
	DB	'memory to allocate new values array', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@PJGCKCO@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAo?$AAo?$AAk?$AAd?$AAi@
CONST	SEGMENT
??_C@_1GG@PJGCKCO@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAo?$AAo?$AAk?$AAd?$AAi@ DB 'm'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, '_', 00H
	DB	'k', 00H, 'e', 00H, 'y', 00H, 's', 00H, '-', 00H, '>', 00H, 'd'
	DB	00H, 'k', 00H, '_', 00H, 'l', 00H, 'o', 00H, 'o', 00H, 'k', 00H
	DB	'u', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'l'
	DB	00H, 'o', 00H, 'o', 00H, 'k', 00H, 'd', 00H, 'i', 00H, 'c', 00H
	DB	't', 00H, '_', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'e', 00H, '_', 00H, 'n', 00H, 'o', 00H, 'd', 00H
	DB	'u', 00H, 'm', 00H, 'm', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@FFOPFLL@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@FFOPFLL@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ DB 'm'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, '_', 00H
	DB	'k', 00H, 'e', 00H, 'y', 00H, 's', 00H, '-', 00H, '>', 00H, 'd'
	DB	00H, 'k', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT make_keys_shared
_TEXT	SEGMENT
i$ = 32
mp$ = 40
size$ = 48
values$21081 = 56
ep0$21080 = 64
tv143 = 72
tv142 = 80
op$ = 112
make_keys_shared PROC					; COMDAT

; 1013 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1014 :     Py_ssize_t i;
; 1015 :     Py_ssize_t size;
; 1016 :     PyDictObject *mp = (PyDictObject *)op;

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 89 44 24 28	 mov	 QWORD PTR mp$[rsp], rax

; 1017 : 
; 1018 :     if (!PyDict_CheckExact(op))

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  0001a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR op$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 19		 je	 SHORT $LN10@make_keys_
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  0002c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR op$[rsp]
  00031	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  00035	74 07		 je	 SHORT $LN10@make_keys_

; 1019 :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	e9 31 02 00 00	 jmp	 $LN11@make_keys_
$LN10@make_keys_:

; 1020 :     if (!_PyDict_HasSplitTable(mp)) {

  0003e	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  00043	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00048	0f 85 e1 01 00
	00		 jne	 $LN9@make_keys_

; 1021 :         PyDictKeyEntry *ep0;
; 1022 :         PyObject **values;
; 1023 :         assert(mp->ma_keys->dk_refcnt == 1);

  0004e	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  00053	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00057	48 83 38 01	 cmp	 QWORD PTR [rax], 1
  0005b	74 1c		 je	 SHORT $LN13@make_keys_
  0005d	41 b8 ff 03 00
	00		 mov	 r8d, 1023		; 000003ffH
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@FFOPFLL@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00077	33 c0		 xor	 eax, eax
$LN13@make_keys_:

; 1024 :         if (mp->ma_keys->dk_lookup == lookdict) {

  00079	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  0007e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict
  00089	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  0008d	75 09		 jne	 SHORT $LN8@make_keys_

; 1025 :             return NULL;

  0008f	33 c0		 xor	 eax, eax
  00091	e9 d9 01 00 00	 jmp	 $LN11@make_keys_
  00096	eb 38		 jmp	 SHORT $LN7@make_keys_
$LN8@make_keys_:

; 1026 :         }
; 1027 :         else if (mp->ma_keys->dk_lookup == lookdict_unicode) {

  00098	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  0009d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode
  000a8	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000ac	75 22		 jne	 SHORT $LN6@make_keys_

; 1028 :             /* Remove dummy keys */
; 1029 :             if (dictresize(mp, DK_SIZE(mp->ma_keys)))

  000ae	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  000b3	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b7	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000bb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR mp$[rsp]
  000c0	e8 00 00 00 00	 call	 dictresize
  000c5	85 c0		 test	 eax, eax
  000c7	74 07		 je	 SHORT $LN5@make_keys_

; 1030 :                 return NULL;

  000c9	33 c0		 xor	 eax, eax
  000cb	e9 9f 01 00 00	 jmp	 $LN11@make_keys_
$LN5@make_keys_:
$LN6@make_keys_:
$LN7@make_keys_:

; 1031 :         }
; 1032 :         assert(mp->ma_keys->dk_lookup == lookdict_unicode_nodummy);

  000d0	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  000d5	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_unicode_nodummy
  000e0	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000e4	74 1c		 je	 SHORT $LN14@make_keys_
  000e6	41 b8 08 04 00
	00		 mov	 r8d, 1032		; 00000408H
  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@KJKMNNNH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAi?$AAc?$AAt?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GG@PJGCKCO@?$AAm?$AAp?$AA?9?$AA?$DO?$AAm?$AAa?$AA_?$AAk?$AAe?$AAy?$AAs?$AA?9?$AA?$DO?$AAd?$AAk?$AA_?$AAl?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAl?$AAo?$AAo?$AAk?$AAd?$AAi@
  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00100	33 c0		 xor	 eax, eax
$LN14@make_keys_:

; 1033 :         /* Copy values into a new array */
; 1034 :         ep0 = &mp->ma_keys->dk_entries[0];

  00102	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  00107	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0010b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0010f	48 89 44 24 40	 mov	 QWORD PTR ep0$21080[rsp], rax

; 1035 :         size = DK_SIZE(mp->ma_keys);

  00114	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  00119	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0011d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00121	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 1036 :         values = new_values(size);

  00126	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  00130	48 39 44 24 30	 cmp	 QWORD PTR size$[rsp], rax
  00135	76 0b		 jbe	 SHORT $LN17@make_keys_
  00137	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv143[rsp], 0
  00140	eb 41		 jmp	 SHORT $LN18@make_keys_
$LN17@make_keys_:
  00142	e8 00 00 00 00	 call	 _Py_PXCTX
  00147	85 c0		 test	 eax, eax
  00149	74 18		 je	 SHORT $LN15@make_keys_
  0014b	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  00150	48 c1 e0 03	 shl	 rax, 3
  00154	48 8b c8	 mov	 rcx, rax
  00157	e8 00 00 00 00	 call	 _PxMem_Malloc
  0015c	48 89 44 24 50	 mov	 QWORD PTR tv142[rsp], rax
  00161	eb 16		 jmp	 SHORT $LN16@make_keys_
$LN15@make_keys_:
  00163	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  00168	48 c1 e0 03	 shl	 rax, 3
  0016c	48 8b c8	 mov	 rcx, rax
  0016f	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  00174	48 89 44 24 50	 mov	 QWORD PTR tv142[rsp], rax
$LN16@make_keys_:
  00179	48 8b 44 24 50	 mov	 rax, QWORD PTR tv142[rsp]
  0017e	48 89 44 24 48	 mov	 QWORD PTR tv143[rsp], rax
$LN18@make_keys_:
  00183	48 8b 44 24 48	 mov	 rax, QWORD PTR tv143[rsp]
  00188	48 89 44 24 38	 mov	 QWORD PTR values$21081[rsp], rax

; 1037 :         if (values == NULL) {

  0018d	48 83 7c 24 38
	00		 cmp	 QWORD PTR values$21081[rsp], 0
  00193	75 1a		 jne	 SHORT $LN4@make_keys_

; 1038 :             PyErr_SetString(PyExc_MemoryError,
; 1039 :                 "Not enough memory to allocate new values array");

  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@CANHAIEM@Not?5enough?5memory?5to?5allocate?5ne@
  0019c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  001a3	e8 00 00 00 00	 call	 PyErr_SetString

; 1040 :             return NULL;

  001a8	33 c0		 xor	 eax, eax
  001aa	e9 c0 00 00 00	 jmp	 $LN11@make_keys_
$LN4@make_keys_:

; 1041 :         }
; 1042 :         for (i = 0; i < size; i++) {

  001af	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  001b8	eb 0d		 jmp	 SHORT $LN3@make_keys_
$LN2@make_keys_:
  001ba	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  001bf	48 ff c0	 inc	 rax
  001c2	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN3@make_keys_:
  001c7	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  001cc	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  001d1	7d 3a		 jge	 SHORT $LN1@make_keys_

; 1043 :             values[i] = ep0[i].me_value;

  001d3	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  001d8	48 6b c0 18	 imul	 rax, 24
  001dc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR values$21081[rsp]
  001e1	48 8b 54 24 20	 mov	 rdx, QWORD PTR i$[rsp]
  001e6	4c 8b 44 24 40	 mov	 r8, QWORD PTR ep0$21080[rsp]
  001eb	49 8b 44 00 10	 mov	 rax, QWORD PTR [r8+rax+16]
  001f0	48 89 04 d1	 mov	 QWORD PTR [rcx+rdx*8], rax

; 1044 :             ep0[i].me_value = NULL;

  001f4	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  001f9	48 6b c0 18	 imul	 rax, 24
  001fd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ep0$21080[rsp]
  00202	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 1045 :         }

  0020b	eb ad		 jmp	 SHORT $LN2@make_keys_
$LN1@make_keys_:

; 1046 :         mp->ma_keys->dk_lookup = lookdict_split;

  0020d	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  00212	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lookdict_split
  0021d	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1047 :         mp->ma_values = values;

  00221	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  00226	48 8b 4c 24 38	 mov	 rcx, QWORD PTR values$21081[rsp]
  0022b	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx
$LN9@make_keys_:

; 1048 :     }
; 1049 :     DK_INCREF(mp->ma_keys);

  0022f	e8 00 00 00 00	 call	 _Py_PXCTX
  00234	85 c0		 test	 eax, eax
  00236	74 02		 je	 SHORT $LN19@make_keys_
  00238	eb 11		 jmp	 SHORT $LN20@make_keys_
$LN19@make_keys_:
  0023a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00241	48 ff c0	 inc	 rax
  00244	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN20@make_keys_:
  0024b	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  00250	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00254	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00257	48 ff c0	 inc	 rax
  0025a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR mp$[rsp]
  0025f	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00263	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1050 :     return mp->ma_keys;

  00266	48 8b 44 24 28	 mov	 rax, QWORD PTR mp$[rsp]
  0026b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
$LN11@make_keys_:

; 1051 : }

  0026f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00273	c3		 ret	 0
make_keys_shared ENDP
_TEXT	ENDS
PUBLIC	_PyDictKeys_DecRef
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyDictKeys_DecRef DD imagerel $LN6
	DD	imagerel $LN6+82
	DD	imagerel $unwind$_PyDictKeys_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyDictKeys_DecRef DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyDictKeys_DecRef
_TEXT	SEGMENT
keys$ = 48
_PyDictKeys_DecRef PROC					; COMDAT

; 3832 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3833 :     DK_DECREF(keys);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 02		 je	 SHORT $LN4@PyDictKeys
  00012	eb 11		 jmp	 SHORT $LN5@PyDictKeys
$LN4@PyDictKeys:
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  0001b	48 ff c8	 dec	 rax
  0001e	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN5@PyDictKeys:
  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR keys$[rsp]
  0002a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002d	48 ff c8	 dec	 rax
  00030	48 8b 4c 24 30	 mov	 rcx, QWORD PTR keys$[rsp]
  00035	48 89 01	 mov	 QWORD PTR [rcx], rax
  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR keys$[rsp]
  0003d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00041	75 0a		 jne	 SHORT $LN1@PyDictKeys
  00043	48 8b 4c 24 30	 mov	 rcx, QWORD PTR keys$[rsp]
  00048	e8 00 00 00 00	 call	 free_keys_object
$LN1@PyDictKeys:

; 3834 : }

  0004d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00051	c3		 ret	 0
_PyDictKeys_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@FAFKDOL@?$DMdummy?5key?$DO?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dummy_repr DD imagerel dummy_repr
	DD	imagerel dummy_repr+26
	DD	imagerel $unwind$dummy_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dummy_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0M@FAFKDOL@?$DMdummy?5key?$DO?$AA@
CONST	SEGMENT
??_C@_0M@FAFKDOL@?$DMdummy?5key?$DO?$AA@ DB '<dummy key>', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dummy_repr
_TEXT	SEGMENT
op$ = 48
dummy_repr PROC						; COMDAT

; 3840 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3841 :     return PyUnicode_FromString("<dummy key>");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FAFKDOL@?$DMdummy?5key?$DO?$AA@
  00010	e8 00 00 00 00	 call	 PyUnicode_FromString

; 3842 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
dummy_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@KNLICOIJ@deallocating?5?$DMdummy?5key?$DO?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dummy_dealloc DD imagerel dummy_dealloc
	DD	imagerel dummy_dealloc+26
	DD	imagerel $unwind$dummy_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dummy_dealloc DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BJ@KNLICOIJ@deallocating?5?$DMdummy?5key?$DO?$AA@
CONST	SEGMENT
??_C@_0BJ@KNLICOIJ@deallocating?5?$DMdummy?5key?$DO?$AA@ DB 'deallocating'
	DB	' <dummy key>', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dummy_dealloc
_TEXT	SEGMENT
ignore$ = 48
dummy_dealloc PROC					; COMDAT

; 3847 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3848 :     /* This should never get called, but we also don't want to SEGV if
; 3849 :      * we accidentally decref dummy-key out of existence.
; 3850 :      */
; 3851 :     Py_FatalError("deallocating <dummy key>");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KNLICOIJ@deallocating?5?$DMdummy?5key?$DO?$AA@
  00010	e8 00 00 00 00	 call	 Py_FatalError

; 3852 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
dummy_dealloc ENDP
_TEXT	ENDS
END
