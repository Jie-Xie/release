; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_PyTime_gettimeofday
;	COMDAT pdata
; File c:\src\pyparallel\python\pytime.c
pdata	SEGMENT
$pdata$_PyTime_gettimeofday DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$_PyTime_gettimeofday
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTime_gettimeofday DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyTime_gettimeofday
_TEXT	SEGMENT
tp$ = 48
_PyTime_gettimeofday PROC				; COMDAT

; 106  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 107  :     pygettimeofday(tp, NULL);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tp$[rsp]
  00010	e8 00 00 00 00	 call	 pygettimeofday

; 108  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
_PyTime_gettimeofday ENDP
_TEXT	ENDS
PUBLIC	__real@3e7ad7f29abcaf48
PUBLIC	??_C@_0BK@PNAGOKKE@GetSystemTimeAsFileTime?$CI?$CJ?$AA@ ; `string'
EXTRN	__imp_GetSystemTimeAdjustment:PROC
EXTRN	__imp_GetSystemTimeAsFileTime:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$pygettimeofday DD imagerel pygettimeofday
	DD	imagerel pygettimeofday+227
	DD	imagerel $unwind$pygettimeofday
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pygettimeofday DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT __real@3e7ad7f29abcaf48
CONST	SEGMENT
__real@3e7ad7f29abcaf48 DQ 03e7ad7f29abcaf48r	; 1e-007
CONST	ENDS
;	COMDAT ??_C@_0BK@PNAGOKKE@GetSystemTimeAsFileTime?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BK@PNAGOKKE@GetSystemTimeAsFileTime?$CI?$CJ?$AA@ DB 'GetSystemTime'
	DB	'AsFileTime()', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT pygettimeofday
_TEXT	SEGMENT
large$ = 32
microseconds$ = 40
system_time$ = 48
timeAdjustment$120407 = 56
timeIncrement$120408 = 60
isTimeAdjustmentDisabled$120409 = 64
tp$ = 96
info$ = 104
pygettimeofday PROC					; COMDAT

; 23   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 24   : #ifdef MS_WINDOWS
; 25   :     FILETIME system_time;
; 26   :     ULARGE_INTEGER large;
; 27   :     ULONGLONG microseconds;
; 28   : 
; 29   :     GetSystemTimeAsFileTime(&system_time);

  0000e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR system_time$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTimeAsFileTime

; 30   :     large.u.LowPart = system_time.dwLowDateTime;

  00019	8b 44 24 30	 mov	 eax, DWORD PTR system_time$[rsp]
  0001d	89 44 24 20	 mov	 DWORD PTR large$[rsp], eax

; 31   :     large.u.HighPart = system_time.dwHighDateTime;

  00021	8b 44 24 34	 mov	 eax, DWORD PTR system_time$[rsp+4]
  00025	89 44 24 24	 mov	 DWORD PTR large$[rsp+4], eax

; 32   :     /* 11,644,473,600,000,000: number of microseconds between
; 33   :        the 1st january 1601 and the 1st january 1970 (369 years + 89 leap
; 34   :        days). */
; 35   :     microseconds = large.QuadPart / 10 - 11644473600000000;

  00029	33 d2		 xor	 edx, edx
  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR large$[rsp]
  00030	b9 0a 00 00 00	 mov	 ecx, 10
  00035	48 f7 f1	 div	 rcx
  00038	48 b9 00 40 86
	48 96 5e 29 00	 mov	 rcx, 11644473600000000	; 00295e9648864000H
  00042	48 2b c1	 sub	 rax, rcx
  00045	48 89 44 24 28	 mov	 QWORD PTR microseconds$[rsp], rax

; 36   :     tp->tv_sec = microseconds / 1000000;

  0004a	33 d2		 xor	 edx, edx
  0004c	48 8b 44 24 28	 mov	 rax, QWORD PTR microseconds$[rsp]
  00051	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00056	48 f7 f1	 div	 rcx
  00059	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tp$[rsp]
  0005e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 37   :     tp->tv_usec = microseconds % 1000000;

  00061	33 d2		 xor	 edx, edx
  00063	48 8b 44 24 28	 mov	 rax, QWORD PTR microseconds$[rsp]
  00068	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0006d	48 f7 f1	 div	 rcx
  00070	48 8b c2	 mov	 rax, rdx
  00073	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tp$[rsp]
  00078	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 38   :     if (info) {

  0007b	48 83 7c 24 68
	00		 cmp	 QWORD PTR info$[rsp], 0
  00081	74 5b		 je	 SHORT $LN1@pygettimeo

; 39   :         DWORD timeAdjustment, timeIncrement;
; 40   :         BOOL isTimeAdjustmentDisabled;
; 41   : 
; 42   :         info->implementation = "GetSystemTimeAsFileTime()";

  00083	48 8b 44 24 68	 mov	 rax, QWORD PTR info$[rsp]
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@PNAGOKKE@GetSystemTimeAsFileTime?$CI?$CJ?$AA@
  0008f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 43   :         info->monotonic = 0;

  00092	48 8b 44 24 68	 mov	 rax, QWORD PTR info$[rsp]
  00097	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0

; 44   :         (void) GetSystemTimeAdjustment(&timeAdjustment, &timeIncrement,
; 45   :                                        &isTimeAdjustmentDisabled);

  0009e	4c 8d 44 24 40	 lea	 r8, QWORD PTR isTimeAdjustmentDisabled$120409[rsp]
  000a3	48 8d 54 24 3c	 lea	 rdx, QWORD PTR timeIncrement$120408[rsp]
  000a8	48 8d 4c 24 38	 lea	 rcx, QWORD PTR timeAdjustment$120407[rsp]
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTimeAdjustment

; 46   :         info->resolution = timeIncrement * 1e-7;

  000b3	8b 44 24 3c	 mov	 eax, DWORD PTR timeIncrement$120408[rsp]
  000b7	66 0f ef c0	 pxor	 xmm0, xmm0
  000bb	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  000c0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3e7ad7f29abcaf48
  000c8	48 8b 44 24 68	 mov	 rax, QWORD PTR info$[rsp]
  000cd	f2 0f 11 40 10	 movsdx	 QWORD PTR [rax+16], xmm0

; 47   :         info->adjustable = 1;

  000d2	48 8b 44 24 68	 mov	 rax, QWORD PTR info$[rsp]
  000d7	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [rax+12], 1
$LN1@pygettimeo:

; 48   :     }
; 49   : #else
; 50   :     /* There are three ways to get the time:
; 51   :       (1) gettimeofday() -- resolution in microseconds
; 52   :       (2) ftime() -- resolution in milliseconds
; 53   :       (3) time() -- resolution in seconds
; 54   :       In all cases the return value in a timeval struct.
; 55   :       Since on some systems (e.g. SCO ODT 3.0) gettimeofday() may
; 56   :       fail, so we fall back on ftime() or time().
; 57   :       Note: clock resolution does not imply clock accuracy! */
; 58   : 
; 59   : #ifdef HAVE_GETTIMEOFDAY
; 60   :     int err;
; 61   : #ifdef GETTIMEOFDAY_NO_TZ
; 62   :     err = gettimeofday(tp);
; 63   : #else
; 64   :     err = gettimeofday(tp, (struct timezone *)NULL);
; 65   : #endif
; 66   :     if (err == 0) {
; 67   :         if (info) {
; 68   :             info->implementation = "gettimeofday()";
; 69   :             info->resolution = 1e-6;
; 70   :             info->monotonic = 0;
; 71   :             info->adjustable = 1;
; 72   :         }
; 73   :         return;
; 74   :     }
; 75   : #endif   /* HAVE_GETTIMEOFDAY */
; 76   : 
; 77   : #if defined(HAVE_FTIME)
; 78   :     {
; 79   :         struct timeb t;
; 80   :         ftime(&t);
; 81   :         tp->tv_sec = t.time;
; 82   :         tp->tv_usec = t.millitm * 1000;
; 83   :         if (info) {
; 84   :             info->implementation = "ftime()";
; 85   :             info->resolution = 1e-3;
; 86   :             info->monotonic = 0;
; 87   :             info->adjustable = 1;
; 88   :         }
; 89   :     }
; 90   : #else /* !HAVE_FTIME */
; 91   :     tp->tv_sec = time(NULL);
; 92   :     tp->tv_usec = 0;
; 93   :     if (info) {
; 94   :         info->implementation = "time()";
; 95   :         info->resolution = 1.0;
; 96   :         info->monotonic = 0;
; 97   :         info->adjustable = 1;
; 98   :     }
; 99   : #endif /* !HAVE_FTIME */
; 100  : 
; 101  : #endif /* MS_WINDOWS */
; 102  : }

  000de	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e2	c3		 ret	 0
pygettimeofday ENDP
_TEXT	ENDS
PUBLIC	_PyTime_gettimeofday_info
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTime_gettimeofday_info DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$_PyTime_gettimeofday_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTime_gettimeofday_info DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyTime_gettimeofday_info
_TEXT	SEGMENT
tp$ = 48
info$ = 56
_PyTime_gettimeofday_info PROC				; COMDAT

; 112  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 113  :     pygettimeofday(tp, info);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR info$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tp$[rsp]
  00018	e8 00 00 00 00	 call	 pygettimeofday

; 114  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
_PyTime_gettimeofday_info ENDP
_TEXT	ENDS
PUBLIC	_PyLong_AsTime_t
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLongLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyLong_AsTime_t DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$_PyLong_AsTime_t
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyLong_AsTime_t DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyLong_AsTime_t
_TEXT	SEGMENT
val$ = 32
obj$ = 64
_PyLong_AsTime_t PROC					; COMDAT

; 125  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 126  : #if defined(HAVE_LONG_LONG) && SIZEOF_TIME_T == SIZEOF_LONG_LONG
; 127  :     PY_LONG_LONG val;
; 128  :     val = PyLong_AsLongLong(obj);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0000e	e8 00 00 00 00	 call	 PyLong_AsLongLong
  00013	48 89 44 24 20	 mov	 QWORD PTR val$[rsp], rax

; 129  : #else
; 130  :     long val;
; 131  :     assert(sizeof(time_t) <= sizeof(long));
; 132  :     val = PyLong_AsLong(obj);
; 133  : #endif
; 134  :     if (val == -1 && PyErr_Occurred()) {

  00018	48 83 7c 24 20
	ff		 cmp	 QWORD PTR val$[rsp], -1
  0001e	75 28		 jne	 SHORT $LN2@PyLong_AsT
  00020	e8 00 00 00 00	 call	 PyErr_Occurred
  00025	48 85 c0	 test	 rax, rax
  00028	74 1e		 je	 SHORT $LN2@PyLong_AsT

; 135  :         if (PyErr_ExceptionMatches(PyExc_OverflowError))

  0002a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00031	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00036	85 c0		 test	 eax, eax
  00038	74 05		 je	 SHORT $LN1@PyLong_AsT

; 136  :             error_time_t_overflow();

  0003a	e8 00 00 00 00	 call	 error_time_t_overflow
$LN1@PyLong_AsT:

; 137  :         return -1;

  0003f	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00046	eb 05		 jmp	 SHORT $LN3@PyLong_AsT
$LN2@PyLong_AsT:

; 138  :     }
; 139  :     return (time_t)val;

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR val$[rsp]
$LN3@PyLong_AsT:

; 140  : }

  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
_PyLong_AsTime_t ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@IDPHOICO@timestamp?5out?5of?5range?5for?5platf@ ; `string'
EXTRN	PyErr_SetString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$error_time_t_overflow DD imagerel error_time_t_overflow
	DD	imagerel error_time_t_overflow+28
	DD	imagerel $unwind$error_time_t_overflow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$error_time_t_overflow DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CL@IDPHOICO@timestamp?5out?5of?5range?5for?5platf@
CONST	SEGMENT
??_C@_0CL@IDPHOICO@timestamp?5out?5of?5range?5for?5platf@ DB 'timestamp o'
	DB	'ut of range for platform time_t', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT error_time_t_overflow
_TEXT	SEGMENT
error_time_t_overflow PROC				; COMDAT

; 118  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 119  :     PyErr_SetString(PyExc_OverflowError,
; 120  :                     "timestamp out of range for platform time_t");

  00004	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@IDPHOICO@timestamp?5out?5of?5range?5for?5platf@
  0000b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00012	e8 00 00 00 00	 call	 PyErr_SetString

; 121  : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
error_time_t_overflow ENDP
_TEXT	ENDS
PUBLIC	_PyLong_FromTime_t
EXTRN	PyLong_FromLongLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyLong_FromTime_t DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$_PyLong_FromTime_t
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyLong_FromTime_t DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyLong_FromTime_t
_TEXT	SEGMENT
t$ = 48
_PyLong_FromTime_t PROC					; COMDAT

; 144  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 145  : #if defined(HAVE_LONG_LONG) && SIZEOF_TIME_T == SIZEOF_LONG_LONG
; 146  :     return PyLong_FromLongLong((PY_LONG_LONG)t);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR t$[rsp]
  0000e	e8 00 00 00 00	 call	 PyLong_FromLongLong

; 147  : #else
; 148  :     assert(sizeof(time_t) <= sizeof(long));
; 149  :     return PyLong_FromLong((long)t);
; 150  : #endif
; 151  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
_PyLong_FromTime_t ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	_PyTime_ObjectToTime_t
EXTRN	__imp_modf:PROC
EXTRN	PyFloat_AsDouble:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyFloat_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTime_ObjectToTime_t DD imagerel $LN9
	DD	imagerel $LN9+246
	DD	imagerel $unwind$_PyTime_ObjectToTime_t
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTime_ObjectToTime_t DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTime_ObjectToTime_t
_TEXT	SEGMENT
intpart$120476 = 32
err$120477 = 40
d$120475 = 48
obj$ = 80
sec$ = 88
_PyTime_ObjectToTime_t PROC				; COMDAT

; 192  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 193  :     if (PyFloat_Check(obj)) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  00015	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 1d		 je	 SHORT $LN5@PyTime_Obj
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFloat_Type
  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  0002c	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00030	e8 00 00 00 00	 call	 PyType_IsSubtype
  00035	85 c0		 test	 eax, eax
  00037	0f 84 84 00 00
	00		 je	 $LN6@PyTime_Obj
$LN5@PyTime_Obj:

; 194  :         double d, intpart, err;
; 195  : 
; 196  :         d = PyFloat_AsDouble(obj);

  0003d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00042	e8 00 00 00 00	 call	 PyFloat_AsDouble
  00047	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR d$120475[rsp], xmm0

; 197  :         (void)modf(d, &intpart);

  0004d	48 8d 54 24 20	 lea	 rdx, QWORD PTR intpart$120476[rsp]
  00052	f2 0f 10 44 24
	30		 movsdx	 xmm0, QWORD PTR d$120475[rsp]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_modf

; 198  : 
; 199  :         *sec = (time_t)intpart;

  0005e	f2 48 0f 2c 44
	24 20		 cvttsd2si rax, QWORD PTR intpart$120476[rsp]
  00065	48 8b 4c 24 58	 mov	 rcx, QWORD PTR sec$[rsp]
  0006a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 200  :         err = intpart - (double)*sec;

  0006d	48 8b 44 24 58	 mov	 rax, QWORD PTR sec$[rsp]
  00072	66 0f ef c0	 pxor	 xmm0, xmm0
  00076	f2 48 0f 2a 00	 cvtsi2sd xmm0, QWORD PTR [rax]
  0007b	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR intpart$120476[rsp]
  00081	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00085	66 0f 28 c1	 movapd	 xmm0, xmm1
  00089	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR err$120477[rsp], xmm0

; 201  :         if (err <= -1.0 || err >= 1.0) {

  0008f	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@bff0000000000000
  00097	66 0f 2f 44 24
	28		 comisd	 xmm0, QWORD PTR err$120477[rsp]
  0009d	73 10		 jae	 SHORT $LN3@PyTime_Obj
  0009f	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR err$120477[rsp]
  000a5	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  000ad	72 0c		 jb	 SHORT $LN4@PyTime_Obj
$LN3@PyTime_Obj:

; 202  :             error_time_t_overflow();

  000af	e8 00 00 00 00	 call	 error_time_t_overflow

; 203  :             return -1;

  000b4	b8 ff ff ff ff	 mov	 eax, -1
  000b9	eb 36		 jmp	 SHORT $LN7@PyTime_Obj
$LN4@PyTime_Obj:

; 204  :         }
; 205  :         return 0;

  000bb	33 c0		 xor	 eax, eax
  000bd	eb 32		 jmp	 SHORT $LN7@PyTime_Obj

; 206  :     }
; 207  :     else {

  000bf	eb 30		 jmp	 SHORT $LN2@PyTime_Obj
$LN6@PyTime_Obj:

; 208  :         *sec = _PyLong_AsTime_t(obj);

  000c1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  000c6	e8 00 00 00 00	 call	 _PyLong_AsTime_t
  000cb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR sec$[rsp]
  000d0	48 89 01	 mov	 QWORD PTR [rcx], rax

; 209  :         if (*sec == (time_t)-1 && PyErr_Occurred())

  000d3	48 8b 44 24 58	 mov	 rax, QWORD PTR sec$[rsp]
  000d8	48 83 38 ff	 cmp	 QWORD PTR [rax], -1
  000dc	75 11		 jne	 SHORT $LN1@PyTime_Obj
  000de	e8 00 00 00 00	 call	 PyErr_Occurred
  000e3	48 85 c0	 test	 rax, rax
  000e6	74 07		 je	 SHORT $LN1@PyTime_Obj

; 210  :             return -1;

  000e8	b8 ff ff ff ff	 mov	 eax, -1
  000ed	eb 02		 jmp	 SHORT $LN7@PyTime_Obj
$LN1@PyTime_Obj:

; 211  :         return 0;

  000ef	33 c0		 xor	 eax, eax
$LN2@PyTime_Obj:
$LN7@PyTime_Obj:

; 212  :     }
; 213  : }

  000f1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f5	c3		 ret	 0
_PyTime_ObjectToTime_t ENDP
_TEXT	ENDS
PUBLIC	__real@41cdcd6500000000
PUBLIC	_PyTime_ObjectToTimespec
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTime_ObjectToTimespec DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$_PyTime_ObjectToTimespec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTime_ObjectToTimespec DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT __real@41cdcd6500000000
CONST	SEGMENT
__real@41cdcd6500000000 DQ 041cdcd6500000000r	; 1e+009
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTime_ObjectToTimespec
_TEXT	SEGMENT
obj$ = 48
sec$ = 56
nsec$ = 64
_PyTime_ObjectToTimespec PROC				; COMDAT

; 217  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 218  :     return _PyTime_ObjectToDenominator(obj, sec, nsec, 1e9);

  00013	f2 0f 10 1d 00
	00 00 00	 movsdx	 xmm3, QWORD PTR __real@41cdcd6500000000
  0001b	4c 8b 44 24 40	 mov	 r8, QWORD PTR nsec$[rsp]
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR sec$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0002a	e8 00 00 00 00	 call	 _PyTime_ObjectToDenominator

; 219  : }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
_PyTime_ObjectToTimespec ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@FEDJCNGN@?$AAd?$AAe?$AAn?$AAo?$AAm?$AAi?$AAn?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAL?$AAO?$AAN?$AAG?$AA_?$AAM?$AAA?$AAX?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@KJJLEFGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAt?$AAi?$AAm?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	__real@41dfffffffc00000
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTime_ObjectToDenominator DD imagerel _PyTime_ObjectToDenominator
	DD	imagerel _PyTime_ObjectToDenominator+417
	DD	imagerel $unwind$_PyTime_ObjectToDenominator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTime_ObjectToDenominator DD 011901H
	DD	08219H
xdata	ENDS
;	COMDAT ??_C@_1DA@FEDJCNGN@?$AAd?$AAe?$AAn?$AAo?$AAm?$AAi?$AAn?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAL?$AAO?$AAN?$AAG?$AA_?$AAM?$AAA?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@FEDJCNGN@?$AAd?$AAe?$AAn?$AAo?$AAm?$AAi?$AAn?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAL?$AAO?$AAN?$AAG?$AA_?$AAM?$AAA?$AAX?$AA?$AA@ DB 'd'
	DB	00H, 'e', 00H, 'n', 00H, 'o', 00H, 'm', 00H, 'i', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, 'L', 00H, 'O', 00H, 'N', 00H, 'G', 00H, '_', 00H
	DB	'M', 00H, 'A', 00H, 'X', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KJJLEFGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAt?$AAi?$AAm?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@KJJLEFGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAt?$AAi?$AAm?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'p', 00H, 'y', 00H, 't', 00H, 'i'
	DB	00H, 'm', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT __real@41dfffffffc00000
CONST	SEGMENT
__real@41dfffffffc00000 DQ 041dfffffffc00000r	; 2.14748e+009
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTime_ObjectToDenominator
_TEXT	SEGMENT
intpart$120454 = 32
floatpart$120456 = 40
err$120455 = 48
d$120453 = 56
obj$ = 80
sec$ = 88
numerator$ = 96
denominator$ = 104
_PyTime_ObjectToDenominator PROC			; COMDAT

; 156  : {

  00000	f2 0f 11 5c 24
	20		 movsdx	 QWORD PTR [rsp+32], xmm3
  00006	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 157  :     assert(denominator <= LONG_MAX);

  00019	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@41dfffffffc00000
  00021	66 0f 2f 44 24
	68		 comisd	 xmm0, QWORD PTR denominator$[rsp]
  00027	73 1c		 jae	 SHORT $LN10@PyTime_Obj@2
  00029	41 b8 9d 00 00
	00		 mov	 r8d, 157		; 0000009dH
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KJJLEFGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAt?$AAi?$AAm?$AAe?$AA?4?$AAc?$AA?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FEDJCNGN@?$AAd?$AAe?$AAn?$AAo?$AAm?$AAi?$AAn?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAL?$AAO?$AAN?$AAG?$AA_?$AAM?$AAA?$AAX?$AA?$AA@
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00043	33 c0		 xor	 eax, eax
$LN10@PyTime_Obj@2:

; 158  :     if (PyFloat_Check(obj)) {

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  0004c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00051	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00055	74 1d		 je	 SHORT $LN6@PyTime_Obj@2
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFloat_Type
  0005e	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  00063	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00067	e8 00 00 00 00	 call	 PyType_IsSubtype
  0006c	85 c0		 test	 eax, eax
  0006e	0f 84 ed 00 00
	00		 je	 $LN7@PyTime_Obj@2
$LN6@PyTime_Obj@2:

; 159  :         double d, intpart, err;
; 160  :         /* volatile avoids unsafe optimization on float enabled by gcc -O3 */
; 161  :         volatile double floatpart;
; 162  : 
; 163  :         d = PyFloat_AsDouble(obj);

  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00079	e8 00 00 00 00	 call	 PyFloat_AsDouble
  0007e	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR d$120453[rsp], xmm0

; 164  :         floatpart = modf(d, &intpart);

  00084	48 8d 54 24 20	 lea	 rdx, QWORD PTR intpart$120454[rsp]
  00089	f2 0f 10 44 24
	38		 movsdx	 xmm0, QWORD PTR d$120453[rsp]
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_modf
  00095	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR floatpart$120456[rsp], xmm0

; 165  :         if (floatpart < 0) {

  0009b	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR floatpart$120456[rsp]
  000a1	66 0f 57 c9	 xorpd	 xmm1, xmm1
  000a5	66 0f 2f c8	 comisd	 xmm1, xmm0
  000a9	76 30		 jbe	 SHORT $LN5@PyTime_Obj@2

; 166  :             floatpart = 1.0 + floatpart;

  000ab	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR floatpart$120456[rsp]
  000b1	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ff0000000000000
  000b9	f2 0f 58 c8	 addsd	 xmm1, xmm0
  000bd	66 0f 28 c1	 movapd	 xmm0, xmm1
  000c1	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR floatpart$120456[rsp], xmm0

; 167  :             intpart -= 1.0;

  000c7	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR intpart$120454[rsp]
  000cd	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000d5	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR intpart$120454[rsp], xmm0
$LN5@PyTime_Obj@2:

; 168  :         }
; 169  : 
; 170  :         *sec = (time_t)intpart;

  000db	f2 48 0f 2c 44
	24 20		 cvttsd2si rax, QWORD PTR intpart$120454[rsp]
  000e2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR sec$[rsp]
  000e7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 171  :         err = intpart - (double)*sec;

  000ea	48 8b 44 24 58	 mov	 rax, QWORD PTR sec$[rsp]
  000ef	66 0f ef c0	 pxor	 xmm0, xmm0
  000f3	f2 48 0f 2a 00	 cvtsi2sd xmm0, QWORD PTR [rax]
  000f8	f2 0f 10 4c 24
	20		 movsdx	 xmm1, QWORD PTR intpart$120454[rsp]
  000fe	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00102	66 0f 28 c1	 movapd	 xmm0, xmm1
  00106	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR err$120455[rsp], xmm0

; 172  :         if (err <= -1.0 || err >= 1.0) {

  0010c	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@bff0000000000000
  00114	66 0f 2f 44 24
	30		 comisd	 xmm0, QWORD PTR err$120455[rsp]
  0011a	73 10		 jae	 SHORT $LN3@PyTime_Obj@2
  0011c	f2 0f 10 44 24
	30		 movsdx	 xmm0, QWORD PTR err$120455[rsp]
  00122	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  0012a	72 0c		 jb	 SHORT $LN4@PyTime_Obj@2
$LN3@PyTime_Obj@2:

; 173  :             error_time_t_overflow();

  0012c	e8 00 00 00 00	 call	 error_time_t_overflow

; 174  :             return -1;

  00131	b8 ff ff ff ff	 mov	 eax, -1
  00136	eb 64		 jmp	 SHORT $LN8@PyTime_Obj@2
$LN4@PyTime_Obj@2:

; 175  :         }
; 176  : 
; 177  :         floatpart *= denominator;

  00138	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR floatpart$120456[rsp]
  0013e	f2 0f 59 44 24
	68		 mulsd	 xmm0, QWORD PTR denominator$[rsp]
  00144	f2 0f 11 44 24
	28		 movsdx	 QWORD PTR floatpart$120456[rsp], xmm0

; 178  :         *numerator = (long)floatpart;

  0014a	f2 0f 10 44 24
	28		 movsdx	 xmm0, QWORD PTR floatpart$120456[rsp]
  00150	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00154	48 8b 4c 24 60	 mov	 rcx, QWORD PTR numerator$[rsp]
  00159	89 01		 mov	 DWORD PTR [rcx], eax

; 179  :         return 0;

  0015b	33 c0		 xor	 eax, eax
  0015d	eb 3d		 jmp	 SHORT $LN8@PyTime_Obj@2

; 180  :     }
; 181  :     else {

  0015f	eb 3b		 jmp	 SHORT $LN2@PyTime_Obj@2
$LN7@PyTime_Obj@2:

; 182  :         *sec = _PyLong_AsTime_t(obj);

  00161	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00166	e8 00 00 00 00	 call	 _PyLong_AsTime_t
  0016b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR sec$[rsp]
  00170	48 89 01	 mov	 QWORD PTR [rcx], rax

; 183  :         if (*sec == (time_t)-1 && PyErr_Occurred())

  00173	48 8b 44 24 58	 mov	 rax, QWORD PTR sec$[rsp]
  00178	48 83 38 ff	 cmp	 QWORD PTR [rax], -1
  0017c	75 11		 jne	 SHORT $LN1@PyTime_Obj@2
  0017e	e8 00 00 00 00	 call	 PyErr_Occurred
  00183	48 85 c0	 test	 rax, rax
  00186	74 07		 je	 SHORT $LN1@PyTime_Obj@2

; 184  :             return -1;

  00188	b8 ff ff ff ff	 mov	 eax, -1
  0018d	eb 0d		 jmp	 SHORT $LN8@PyTime_Obj@2
$LN1@PyTime_Obj@2:

; 185  :         *numerator = 0;

  0018f	48 8b 44 24 60	 mov	 rax, QWORD PTR numerator$[rsp]
  00194	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 186  :         return 0;

  0019a	33 c0		 xor	 eax, eax
$LN2@PyTime_Obj@2:
$LN8@PyTime_Obj@2:

; 187  :     }
; 188  : }

  0019c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001a0	c3		 ret	 0
_PyTime_ObjectToDenominator ENDP
_TEXT	ENDS
PUBLIC	__real@412e848000000000
PUBLIC	_PyTime_ObjectToTimeval
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTime_ObjectToTimeval DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$_PyTime_ObjectToTimeval
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTime_ObjectToTimeval DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+006
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTime_ObjectToTimeval
_TEXT	SEGMENT
obj$ = 48
sec$ = 56
usec$ = 64
_PyTime_ObjectToTimeval PROC				; COMDAT

; 223  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 224  :     return _PyTime_ObjectToDenominator(obj, sec, usec, 1e6);

  00013	f2 0f 10 1d 00
	00 00 00	 movsdx	 xmm3, QWORD PTR __real@412e848000000000
  0001b	4c 8b 44 24 40	 mov	 r8, QWORD PTR usec$[rsp]
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR sec$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0002a	e8 00 00 00 00	 call	 _PyTime_ObjectToDenominator

; 225  : }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
_PyTime_ObjectToTimeval ENDP
_TEXT	ENDS
PUBLIC	_PyTime_Init
; Function compile flags: /Odtp
;	COMDAT _PyTime_Init
_TEXT	SEGMENT
_PyTime_Init PROC					; COMDAT

; 230  :     /* Do nothing.  Needed to force linking. */
; 231  : }

  00000	c3		 ret	 0
_PyTime_Init ENDP
_TEXT	ENDS
END
