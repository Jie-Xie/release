; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09BFJOLACN@_shutdown?$AA@			; `string'
PUBLIC	??_C@_0EH@FGGCAPDG@?6During?5handling?5of?5the?5above?5ex@ ; `string'
PUBLIC	??_C@_0EI@ENDHMPEA@?6The?5above?5exception?5was?5the?5dir@ ; `string'
PUBLIC	??_C@_0L@LNCJCPDP@__module__?$AA@		; `string'
PUBLIC	??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@	; `string'
PUBLIC	??_C@_04NDFOBODE@code?$AA@			; `string'
PUBLIC	??_C@_04CIMGMMMG@text?$AA@			; `string'
PUBLIC	??_C@_06KLHHMIGM@offset?$AA@			; `string'
PUBLIC	??_C@_06ILKIAHNN@lineno?$AA@			; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	??_C@_03GLPMCEFE@msg?$AA@			; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_03DGOGAGNC@raw?$AA@			; `string'
PUBLIC	??_C@_04GMGOKAFF@mode?$AA@			; `string'
PUBLIC	??_C@_0O@CKECCIPK@TextIOWrapper?$AA@		; `string'
PUBLIC	??_C@_06BMABDNNN@isatty?$AA@			; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_1O@KDDPCNEL@?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	Py_UseClassExceptionsFlag
PUBLIC	Py_NoUserSiteDirectory
PUBLIC	Py_UnbufferedStdioFlag
PUBLIC	Py_HashRandomizationFlag
PUBLIC	_Py_Finalizing
PUBLIC	_PyOS_mystrnicmp_hack
EXTRN	PyOS_mystrnicmp:PROC
_DATA	SEGMENT
COMM	Py_DontWriteBytecodeFlag:DWORD
COMM	Py_QuietFlag:DWORD
COMM	Py_InspectFlag:DWORD
COMM	Py_FrozenFlag:DWORD
COMM	Py_NoSiteFlag:DWORD
COMM	Py_DebugFlag:DWORD
COMM	Py_BytesWarningFlag:DWORD
COMM	Py_InteractiveFlag:DWORD
COMM	Py_IgnoreEnvironmentFlag:DWORD
COMM	Py_VerboseFlag:DWORD
_DATA	ENDS
_BSS	SEGMENT
Py_NoUserSiteDirectory DD 01H DUP (?)
Py_UnbufferedStdioFlag DD 01H DUP (?)
Py_HashRandomizationFlag DD 01H DUP (?)
	ALIGN	8

_Py_Finalizing DQ 01H DUP (?)
initialized DD	01H DUP (?)
	ALIGN	8

default_home DQ	01H DUP (?)
pyexitfunc DQ	01H DUP (?)
nexitfuncs DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_09BFJOLACN@_shutdown?$AA@
CONST	SEGMENT
??_C@_09BFJOLACN@_shutdown?$AA@ DB '_shutdown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@FGGCAPDG@?6During?5handling?5of?5the?5above?5ex@
CONST	SEGMENT
??_C@_0EH@FGGCAPDG@?6During?5handling?5of?5the?5above?5ex@ DB 0aH, 'Durin'
	DB	'g handling of the above exception, another exception occurred'
	DB	':', 0aH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@ENDHMPEA@?6The?5above?5exception?5was?5the?5dir@
CONST	SEGMENT
??_C@_0EI@ENDHMPEA@?6The?5above?5exception?5was?5the?5dir@ DB 0aH, 'The a'
	DB	'bove exception was the direct cause of the following exceptio'
	DB	'n:', 0aH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LNCJCPDP@__module__?$AA@
CONST	SEGMENT
??_C@_0L@LNCJCPDP@__module__?$AA@ DB '__module__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@
CONST	SEGMENT
??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@ DB 'print_file_and_line', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDFOBODE@code?$AA@
CONST	SEGMENT
??_C@_04NDFOBODE@code?$AA@ DB 'code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CIMGMMMG@text?$AA@
CONST	SEGMENT
??_C@_04CIMGMMMG@text?$AA@ DB 'text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLHHMIGM@offset?$AA@
CONST	SEGMENT
??_C@_06KLHHMIGM@offset?$AA@ DB 'offset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILKIAHNN@lineno?$AA@
CONST	SEGMENT
??_C@_06ILKIAHNN@lineno?$AA@ DB 'lineno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLPMCEFE@msg?$AA@
CONST	SEGMENT
??_C@_03GLPMCEFE@msg?$AA@ DB 'msg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw?$AA@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw?$AA@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMGOKAFF@mode?$AA@
CONST	SEGMENT
??_C@_04GMGOKAFF@mode?$AA@ DB 'mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CKECCIPK@TextIOWrapper?$AA@
CONST	SEGMENT
??_C@_0O@CKECCIPK@TextIOWrapper?$AA@ DB 'TextIOWrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMABDNNN@isatty?$AA@
CONST	SEGMENT
??_C@_06BMABDNNN@isatty?$AA@ DB 'isatty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@KDDPCNEL@?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1O@KDDPCNEL@?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?$AA@ DB 'p', 00H, 'y'
	DB	00H, 't', 00H, 'h', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId__shutdown@?1??wait_for_thread_shutdown@@9@9 DQ 0000000000000000H ; `wait_for_thread_shutdown'::`2'::PyId__shutdown
	DQ	FLAT:??_C@_09BFJOLACN@_shutdown?$AA@
	DQ	0000000000000000H
?PyId_flush@?1??flush_io@@9@9 DQ 0000000000000000H	; `flush_io'::`2'::PyId_flush
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	0000000000000000H
?PyId___module__@?6??print_exception@@9@9 DQ 0000000000000000H ; `print_exception'::`7'::PyId___module__
	DQ	FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
	DQ	0000000000000000H
?PyId_print_file_and_line@?1??print_exception@@9@9 DQ 0000000000000000H ; `print_exception'::`2'::PyId_print_file_and_line
	DQ	FLAT:??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@
	DQ	0000000000000000H
?PyId_code@?2??handle_system_exit@@9@9 DQ 0000000000000000H ; `handle_system_exit'::`3'::PyId_code
	DQ	FLAT:??_C@_04NDFOBODE@code?$AA@
	DQ	0000000000000000H
?PyId_text@?1??parse_syntax_error@@9@9 DQ 0000000000000000H ; `parse_syntax_error'::`2'::PyId_text
	DQ	FLAT:??_C@_04CIMGMMMG@text?$AA@
	DQ	0000000000000000H
?PyId_offset@?1??parse_syntax_error@@9@9 DQ 0000000000000000H ; `parse_syntax_error'::`2'::PyId_offset
	DQ	FLAT:??_C@_06KLHHMIGM@offset?$AA@
	DQ	0000000000000000H
?PyId_lineno@?1??parse_syntax_error@@9@9 DQ 0000000000000000H ; `parse_syntax_error'::`2'::PyId_lineno
	DQ	FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	0000000000000000H
?PyId_filename@?1??parse_syntax_error@@9@9 DQ 0000000000000000H ; `parse_syntax_error'::`2'::PyId_filename
	DQ	FLAT:??_C@_08BABJIOEM@filename?$AA@
	DQ	0000000000000000H
?PyId_msg@?1??parse_syntax_error@@9@9 DQ 0000000000000000H ; `parse_syntax_error'::`2'::PyId_msg
	DQ	FLAT:??_C@_03GLPMCEFE@msg?$AA@
	DQ	0000000000000000H
?PyId_encoding@?1??PyRun_InteractiveOneFlags@@9@9 DQ 0000000000000000H ; `PyRun_InteractiveOneFlags'::`2'::PyId_encoding
	DQ	FLAT:??_C@_08MLPGAEIK@encoding?$AA@
	DQ	0000000000000000H
?PyId_raw@?2??create_stdio@@9@9 DQ 0000000000000000H	; `create_stdio'::`3'::PyId_raw
	DQ	FLAT:??_C@_03DGOGAGNC@raw?$AA@
	DQ	0000000000000000H
?PyId_mode@?1??create_stdio@@9@9 DQ 0000000000000000H	; `create_stdio'::`2'::PyId_mode
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	0000000000000000H
?PyId_name@?1??create_stdio@@9@9 DQ 0000000000000000H	; `create_stdio'::`2'::PyId_name
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	0000000000000000H
?PyId_TextIOWrapper@?1??create_stdio@@9@9 DQ 0000000000000000H ; `create_stdio'::`2'::PyId_TextIOWrapper
	DQ	FLAT:??_C@_0O@CKECCIPK@TextIOWrapper?$AA@
	DQ	0000000000000000H
?PyId_isatty@?1??create_stdio@@9@9 DQ 0000000000000000H	; `create_stdio'::`2'::PyId_isatty
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	0000000000000000H
?PyId_open@?1??create_stdio@@9@9 DQ 0000000000000000H	; `create_stdio'::`2'::PyId_open
	DQ	FLAT:??_C@_04PMOCAHAA@open?$AA@
	DQ	0000000000000000H
?PyId_flush@?1??flush_std_files@@9@9 DQ 0000000000000000H ; `flush_std_files'::`2'::PyId_flush
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	0000000000000000H
?PyId_name@?1??get_codec_name@@9@9 DQ 0000000000000000H	; `get_codec_name'::`2'::PyId_name
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
Py_UseClassExceptionsFlag DD 01H
	ORG $+4
_PyOS_mystrnicmp_hack DQ FLAT:PyOS_mystrnicmp
progname DQ	FLAT:??_C@_1O@KDDPCNEL@?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?$AA@
cause_message DQ FLAT:??_C@_0EI@ENDHMPEA@?6The?5above?5exception?5was?5the?5dir@
context_message DQ FLAT:??_C@_0EH@FGGCAPDG@?6During?5handling?5of?5the?5above?5ex@
_DATA	ENDS
PUBLIC	??_C@_08NOCNCINM@warnings?$AA@			; `string'
PUBLIC	PyModule_GetWarningsModule
EXTRN	PyImport_ImportModule:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pythonrun.c
pdata	SEGMENT
$pdata$PyModule_GetWarningsModule DD imagerel $LN3
	DD	imagerel $LN3+21
	DD	imagerel $unwind$PyModule_GetWarningsModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetWarningsModule DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_08NOCNCINM@warnings?$AA@
CONST	SEGMENT
??_C@_08NOCNCINM@warnings?$AA@ DB 'warnings', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyModule_GetWarningsModule
_TEXT	SEGMENT
PyModule_GetWarningsModule PROC				; COMDAT

; 107  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 108  :     return PyImport_ImportModule("warnings");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NOCNCINM@warnings?$AA@
  0000b	e8 00 00 00 00	 call	 PyImport_ImportModule

; 109  : }

  00010	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00014	c3		 ret	 0
PyModule_GetWarningsModule ENDP
_TEXT	ENDS
PUBLIC	Py_IsInitialized
; Function compile flags: /Odtp
;	COMDAT Py_IsInitialized
_TEXT	SEGMENT
Py_IsInitialized PROC					; COMDAT

; 118  :     return initialized;

  00000	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR initialized

; 119  : }

  00006	c3		 ret	 0
Py_IsInitialized ENDP
_TEXT	ENDS
PUBLIC	??_C@_06NAHKMOGH@_async?$AA@			; `string'
PUBLIC	??_C@_0CO@PJOLMBNF@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_09KKLBMLNG@_parallel?$AA@			; `string'
PUBLIC	??_C@_0DB@GBLAJFBE@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	PyErr_Print
PUBLIC	??_C@_0CG@PJEKFHMO@?8import?5warnings?8?5failed?$DL?5traceb@ ; `string'
PUBLIC	??_C@_0DF@BMECFJNN@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0DE@GJBFCCGH@Py_Initialize?3?5unable?5to?5load?5th@ ; `string'
PUBLIC	??_C@_0CN@LMHHBFOI@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0L@OJDCNPPP@__stderr__?$AA@		; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	??_C@_0CM@PBJGLECD@Py_Initialize?3?5can?8t?5set?5prelimi@ ; `string'
PUBLIC	??_C@_07DFGEOAEG@modules?$AA@			; `string'
PUBLIC	??_C@_03PIADFGHL@sys?$AA@			; `string'
PUBLIC	??_C@_0CJ@PDBCFFEI@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0CE@DDAMEANI@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0CO@LKOHMMCC@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	??_C@_0DB@FOMCBPB@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0CI@KMMHKOEA@Py_Initialize?3?5can?8t?5initialize?5@ ; `string'
PUBLIC	??_C@_0CN@GDNGMGLE@Py_Initialize?3?5can?8t?5make?5module@ ; `string'
PUBLIC	??_C@_0CE@GMGFLAMI@Py_Initialize?3?5can?8t?5init?5bytear@ ; `string'
PUBLIC	??_C@_0CA@HKLDAHHJ@Py_Initialize?3?5can?8t?5init?5longs?$AA@ ; `string'
PUBLIC	??_C@_0CB@MDMPLGNG@Py_Initialize?3?5can?8t?5init?5frames@ ; `string'
PUBLIC	??_C@_0CH@HJDBGLIJ@Py_Initialize?3?5can?8t?5make?5first?5@ ; `string'
PUBLIC	Py_FatalError
PUBLIC	??_C@_0CM@DNEMEGHJ@Py_Initialize?3?5can?8t?5make?5first?5@ ; `string'
PUBLIC	??_C@_0P@FFABKKFN@PYTHONHASHSEED?$AA@		; `string'
PUBLIC	??_C@_0BI@OGIPAPOL@PYTHONDONTWRITEBYTECODE?$AA@	; `string'
PUBLIC	??_C@_0P@BEONFIFN@PYTHONOPTIMIZE?$AA@		; `string'
PUBLIC	??_C@_0O@GLMLAMNF@PYTHONVERBOSE?$AA@		; `string'
PUBLIC	??_C@_0M@GKBGODBJ@PYTHONDEBUG?$AA@		; `string'
PUBLIC	_Py_InitializeEx_Private
EXTRN	_PyAsync_ModInit:PROC
EXTRN	_PyParallel_ModInit:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	PySys_HasWarnOptions:PROC
EXTRN	_PyTime_Init:PROC
EXTRN	_PyFaulthandler_Init:PROC
EXTRN	_PyWarnings_Init:PROC
EXTRN	_PyImportHooks_Init:PROC
EXTRN	_PyImport_Init:PROC
EXTRN	PySys_SetObject:PROC
EXTRN	PyFile_NewStdPrinter:PROC
EXTRN	__imp_fileno:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PySys_SetPath:PROC
EXTRN	Py_GetPath:PROC
EXTRN	_PySys_Init:PROC
EXTRN	_PyExc_Init:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	_PyImport_FixupBuiltin:PROC
EXTRN	_PyBuiltin_Init:PROC
EXTRN	_PyUnicode_Init:PROC
EXTRN	PyDict_New:PROC
EXTRN	_PyFloat_Init:PROC
EXTRN	PyByteArray_Init:PROC
EXTRN	_PyLong_Init:PROC
EXTRN	_PyFrame_Init:PROC
EXTRN	_Py_ReadyTypes:PROC
EXTRN	_PyGILState_Init:PROC
EXTRN	_PyEval_FiniThreads:PROC
EXTRN	PyThreadState_Swap:PROC
EXTRN	PyThreadState_New:PROC
EXTRN	PyInterpreterState_New:PROC
EXTRN	_PyRandom_Init:PROC
EXTRN	Py_OptimizeFlag:DWORD
EXTRN	__imp_getenv:PROC
EXTRN	_PyParallel_Init:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_InitializeEx_Private DD imagerel $LN45
	DD	imagerel $LN45+1479
	DD	imagerel $unwind$_Py_InitializeEx_Private
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_InitializeEx_Private DD 020f01H
	DD	013010fH
xdata	ENDS
;	COMDAT ??_C@_06NAHKMOGH@_async?$AA@
CONST	SEGMENT
??_C@_06NAHKMOGH@_async?$AA@ DB '_async', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PJOLMBNF@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CO@PJOLMBNF@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize _async module', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KKLBMLNG@_parallel?$AA@
CONST	SEGMENT
??_C@_09KKLBMLNG@_parallel?$AA@ DB '_parallel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GBLAJFBE@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0DB@GBLAJFBE@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize _parallel module', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PJEKFHMO@?8import?5warnings?8?5failed?$DL?5traceb@
CONST	SEGMENT
??_C@_0CG@PJEKFHMO@?8import?5warnings?8?5failed?$DL?5traceb@ DB '''import'
	DB	' warnings'' failed; traceback:', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@BMECFJNN@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0DF@BMECFJNN@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize sys standard streams', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GJBFCCGH@Py_Initialize?3?5unable?5to?5load?5th@
CONST	SEGMENT
??_C@_0DE@GJBFCCGH@Py_Initialize?3?5unable?5to?5load?5th@ DB 'Py_Initiali'
	DB	'ze: unable to load the file system codec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LMHHBFOI@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CN@LMHHBFOI@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize faulthandler', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OJDCNPPP@__stderr__?$AA@
CONST	SEGMENT
??_C@_0L@OJDCNPPP@__stderr__?$AA@ DB '__stderr__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PBJGLECD@Py_Initialize?3?5can?8t?5set?5prelimi@
CONST	SEGMENT
??_C@_0CM@PBJGLECD@Py_Initialize?3?5can?8t?5set?5prelimi@ DB 'Py_Initiali'
	DB	'ze: can''t set preliminary stderr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFGEOAEG@modules?$AA@
CONST	SEGMENT
??_C@_07DFGEOAEG@modules?$AA@ DB 'modules', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PIADFGHL@sys?$AA@
CONST	SEGMENT
??_C@_03PIADFGHL@sys?$AA@ DB 'sys', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PDBCFFEI@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CJ@PDBCFFEI@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize sys dict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DDAMEANI@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CE@DDAMEANI@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize sys', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LKOHMMCC@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CO@LKOHMMCC@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize builtins dict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@FOMCBPB@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0DB@FOMCBPB@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initializ'
	DB	'e: can''t initialize builtins modules', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KMMHKOEA@Py_Initialize?3?5can?8t?5initialize?5@
CONST	SEGMENT
??_C@_0CI@KMMHKOEA@Py_Initialize?3?5can?8t?5initialize?5@ DB 'Py_Initiali'
	DB	'ze: can''t initialize unicode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GDNGMGLE@Py_Initialize?3?5can?8t?5make?5module@
CONST	SEGMENT
??_C@_0CN@GDNGMGLE@Py_Initialize?3?5can?8t?5make?5module@ DB 'Py_Initiali'
	DB	'ze: can''t make modules dictionary', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMGFLAMI@Py_Initialize?3?5can?8t?5init?5bytear@
CONST	SEGMENT
??_C@_0CE@GMGFLAMI@Py_Initialize?3?5can?8t?5init?5bytear@ DB 'Py_Initiali'
	DB	'ze: can''t init bytearray', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HKLDAHHJ@Py_Initialize?3?5can?8t?5init?5longs?$AA@
CONST	SEGMENT
??_C@_0CA@HKLDAHHJ@Py_Initialize?3?5can?8t?5init?5longs?$AA@ DB 'Py_Initi'
	DB	'alize: can''t init longs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MDMPLGNG@Py_Initialize?3?5can?8t?5init?5frames@
CONST	SEGMENT
??_C@_0CB@MDMPLGNG@Py_Initialize?3?5can?8t?5init?5frames@ DB 'Py_Initiali'
	DB	'ze: can''t init frames', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HJDBGLIJ@Py_Initialize?3?5can?8t?5make?5first?5@
CONST	SEGMENT
??_C@_0CH@HJDBGLIJ@Py_Initialize?3?5can?8t?5make?5first?5@ DB 'Py_Initial'
	DB	'ize: can''t make first thread', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DNEMEGHJ@Py_Initialize?3?5can?8t?5make?5first?5@
CONST	SEGMENT
??_C@_0CM@DNEMEGHJ@Py_Initialize?3?5can?8t?5make?5first?5@ DB 'Py_Initial'
	DB	'ize: can''t make first interpreter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FFABKKFN@PYTHONHASHSEED?$AA@
CONST	SEGMENT
??_C@_0P@FFABKKFN@PYTHONHASHSEED?$AA@ DB 'PYTHONHASHSEED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OGIPAPOL@PYTHONDONTWRITEBYTECODE?$AA@
CONST	SEGMENT
??_C@_0BI@OGIPAPOL@PYTHONDONTWRITEBYTECODE?$AA@ DB 'PYTHONDONTWRITEBYTECO'
	DB	'DE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BEONFIFN@PYTHONOPTIMIZE?$AA@
CONST	SEGMENT
??_C@_0P@BEONFIFN@PYTHONOPTIMIZE?$AA@ DB 'PYTHONOPTIMIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GLMLAMNF@PYTHONVERBOSE?$AA@
CONST	SEGMENT
??_C@_0O@GLMLAMNF@PYTHONVERBOSE?$AA@ DB 'PYTHONVERBOSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GKBGODBJ@PYTHONDEBUG?$AA@
CONST	SEGMENT
??_C@_0M@GKBGODBJ@PYTHONDEBUG?$AA@ DB 'PYTHONDEBUG', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_InitializeEx_Private
_TEXT	SEGMENT
p$ = 32
sysmod$ = 40
pstderr$ = 48
tstate$ = 56
interp$ = 64
_asyncmod$ = 72
_parallelmod$ = 80
bimod$ = 88
warnings_module$122249 = 96
tv68 = 104
tv78 = 112
tv88 = 120
tv130 = 128
tv140 = 136
install_sigs$ = 160
install_importlib$ = 168
_Py_InitializeEx_Private PROC				; COMDAT

; 249  : {

$LN45:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 250  :     PyInterpreterState *interp;
; 251  :     PyThreadState *tstate;
; 252  :     PyObject *bimod, *sysmod, *pstderr;
; 253  : #ifdef WITH_PARALLEL
; 254  :     PyObject *_parallelmod;
; 255  :     PyObject *_asyncmod;
; 256  : #endif
; 257  :     char *p;
; 258  :     extern void _Py_ReadyTypes(void);
; 259  : 
; 260  :     if (initialized)

  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR initialized, 0
  00016	74 05		 je	 SHORT $LN32@Py_Initial

; 261  :         return;

  00018	e9 a2 05 00 00	 jmp	 $LN33@Py_Initial
$LN32@Py_Initial:

; 262  :     initialized = 1;

  0001d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR initialized, 1

; 263  :     _Py_Finalizing = NULL;

  00027	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR _Py_Finalizing, 0

; 264  : 
; 265  : #ifdef WITH_PARALLEL
; 266  :     _PyParallel_Init();

  00032	e8 00 00 00 00	 call	 _PyParallel_Init

; 267  : #endif
; 268  : 
; 269  : #if defined(HAVE_LANGINFO_H) && defined(HAVE_SETLOCALE)
; 270  :     /* Set up the LC_CTYPE locale, so we can obtain
; 271  :        the locale's charset without having to switch
; 272  :        locales. */
; 273  :     setlocale(LC_CTYPE, "");
; 274  : #endif
; 275  : 
; 276  :     if ((p = Py_GETENV("PYTHONDEBUG")) && *p != '\0')

  00037	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  0003e	74 0b		 je	 SHORT $LN35@Py_Initial
  00040	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR tv68[rsp], 0
  00049	eb 12		 jmp	 SHORT $LN36@Py_Initial
$LN35@Py_Initial:
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GKBGODBJ@PYTHONDEBUG?$AA@
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  00058	48 89 44 24 68	 mov	 QWORD PTR tv68[rsp], rax
$LN36@Py_Initial:
  0005d	48 8b 44 24 68	 mov	 rax, QWORD PTR tv68[rsp]
  00062	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  00067	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0006d	74 22		 je	 SHORT $LN31@Py_Initial
  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00074	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00077	85 c0		 test	 eax, eax
  00079	74 16		 je	 SHORT $LN31@Py_Initial

; 277  :         Py_DebugFlag = add_flag(Py_DebugFlag, p);

  0007b	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  00080	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_DebugFlag
  00086	e8 00 00 00 00	 call	 add_flag
  0008b	89 05 00 00 00
	00		 mov	 DWORD PTR Py_DebugFlag, eax
$LN31@Py_Initial:

; 278  :     if ((p = Py_GETENV("PYTHONVERBOSE")) && *p != '\0')

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  00098	74 0b		 je	 SHORT $LN37@Py_Initial
  0009a	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv78[rsp], 0
  000a3	eb 12		 jmp	 SHORT $LN38@Py_Initial
$LN37@Py_Initial:
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GLMLAMNF@PYTHONVERBOSE?$AA@
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  000b2	48 89 44 24 70	 mov	 QWORD PTR tv78[rsp], rax
$LN38@Py_Initial:
  000b7	48 8b 44 24 70	 mov	 rax, QWORD PTR tv78[rsp]
  000bc	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  000c1	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  000c7	74 22		 je	 SHORT $LN30@Py_Initial
  000c9	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000ce	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d1	85 c0		 test	 eax, eax
  000d3	74 16		 je	 SHORT $LN30@Py_Initial

; 279  :         Py_VerboseFlag = add_flag(Py_VerboseFlag, p);

  000d5	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  000da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_VerboseFlag
  000e0	e8 00 00 00 00	 call	 add_flag
  000e5	89 05 00 00 00
	00		 mov	 DWORD PTR Py_VerboseFlag, eax
$LN30@Py_Initial:

; 280  :     if ((p = Py_GETENV("PYTHONOPTIMIZE")) && *p != '\0')

  000eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  000f2	74 0b		 je	 SHORT $LN39@Py_Initial
  000f4	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tv88[rsp], 0
  000fd	eb 12		 jmp	 SHORT $LN40@Py_Initial
$LN39@Py_Initial:
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@BEONFIFN@PYTHONOPTIMIZE?$AA@
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  0010c	48 89 44 24 78	 mov	 QWORD PTR tv88[rsp], rax
$LN40@Py_Initial:
  00111	48 8b 44 24 78	 mov	 rax, QWORD PTR tv88[rsp]
  00116	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  0011b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00121	74 22		 je	 SHORT $LN29@Py_Initial
  00123	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00128	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0012b	85 c0		 test	 eax, eax
  0012d	74 16		 je	 SHORT $LN29@Py_Initial

; 281  :         Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p);

  0012f	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_OptimizeFlag
  0013a	e8 00 00 00 00	 call	 add_flag
  0013f	89 05 00 00 00
	00		 mov	 DWORD PTR Py_OptimizeFlag, eax
$LN29@Py_Initial:

; 282  :     if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p != '\0')

  00145	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  0014c	74 0e		 je	 SHORT $LN41@Py_Initial
  0014e	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv130[rsp], 0
  0015a	eb 15		 jmp	 SHORT $LN42@Py_Initial
$LN41@Py_Initial:
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@OGIPAPOL@PYTHONDONTWRITEBYTECODE?$AA@
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  00169	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv130[rsp], rax
$LN42@Py_Initial:
  00171	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv130[rsp]
  00179	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  0017e	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00184	74 22		 je	 SHORT $LN28@Py_Initial
  00186	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0018b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0018e	85 c0		 test	 eax, eax
  00190	74 16		 je	 SHORT $LN28@Py_Initial

; 283  :         Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);

  00192	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  00197	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_DontWriteBytecodeFlag
  0019d	e8 00 00 00 00	 call	 add_flag
  001a2	89 05 00 00 00
	00		 mov	 DWORD PTR Py_DontWriteBytecodeFlag, eax
$LN28@Py_Initial:

; 284  :     /* The variable is only tested for existence here; _PyRandom_Init will
; 285  :        check its value further. */
; 286  :     if ((p = Py_GETENV("PYTHONHASHSEED")) && *p != '\0')

  001a8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  001af	74 0e		 je	 SHORT $LN43@Py_Initial
  001b1	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv140[rsp], 0
  001bd	eb 15		 jmp	 SHORT $LN44@Py_Initial
$LN43@Py_Initial:
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FFABKKFN@PYTHONHASHSEED?$AA@
  001c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  001cc	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv140[rsp], rax
$LN44@Py_Initial:
  001d4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv140[rsp]
  001dc	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  001e1	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  001e7	74 22		 je	 SHORT $LN27@Py_Initial
  001e9	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  001ee	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001f1	85 c0		 test	 eax, eax
  001f3	74 16		 je	 SHORT $LN27@Py_Initial

; 287  :         Py_HashRandomizationFlag = add_flag(Py_HashRandomizationFlag, p);

  001f5	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  001fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR Py_HashRandomizationFlag
  00200	e8 00 00 00 00	 call	 add_flag
  00205	89 05 00 00 00
	00		 mov	 DWORD PTR Py_HashRandomizationFlag, eax
$LN27@Py_Initial:

; 288  : 
; 289  :     _PyRandom_Init();

  0020b	e8 00 00 00 00	 call	 _PyRandom_Init

; 290  : 
; 291  :     interp = PyInterpreterState_New();

  00210	e8 00 00 00 00	 call	 PyInterpreterState_New
  00215	48 89 44 24 40	 mov	 QWORD PTR interp$[rsp], rax

; 292  :     if (interp == NULL)

  0021a	48 83 7c 24 40
	00		 cmp	 QWORD PTR interp$[rsp], 0
  00220	75 0c		 jne	 SHORT $LN26@Py_Initial

; 293  :         Py_FatalError("Py_Initialize: can't make first interpreter");

  00222	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@DNEMEGHJ@Py_Initialize?3?5can?8t?5make?5first?5@
  00229	e8 00 00 00 00	 call	 Py_FatalError
$LN26@Py_Initial:

; 294  : 
; 295  :     tstate = PyThreadState_New(interp);

  0022e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  00233	e8 00 00 00 00	 call	 PyThreadState_New
  00238	48 89 44 24 38	 mov	 QWORD PTR tstate$[rsp], rax

; 296  :     if (tstate == NULL)

  0023d	48 83 7c 24 38
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  00243	75 0c		 jne	 SHORT $LN25@Py_Initial

; 297  :         Py_FatalError("Py_Initialize: can't make first thread");

  00245	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@HJDBGLIJ@Py_Initialize?3?5can?8t?5make?5first?5@
  0024c	e8 00 00 00 00	 call	 Py_FatalError
$LN25@Py_Initial:

; 298  :     (void) PyThreadState_Swap(tstate);

  00251	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tstate$[rsp]
  00256	e8 00 00 00 00	 call	 PyThreadState_Swap

; 299  : 
; 300  : #ifdef WITH_PARALLEL
; 301  :     /*_PyParallel_InterpreterCreatedFirstThread(tstate);*/
; 302  : #endif
; 303  : 
; 304  : #ifdef WITH_THREAD
; 305  :     /* We can't call _PyEval_FiniThreads() in Py_Finalize because
; 306  :        destroying the GIL might fail when it is being referenced from
; 307  :        another running thread (see issue #9901).
; 308  :        Instead we destroy the previously created GIL here, which ensures
; 309  :        that we can call Py_Initialize / Py_Finalize multiple times. */
; 310  :     _PyEval_FiniThreads();

  0025b	e8 00 00 00 00	 call	 _PyEval_FiniThreads

; 311  : 
; 312  :     /* Auto-thread-state API */
; 313  :     _PyGILState_Init(interp, tstate);

  00260	48 8b 54 24 38	 mov	 rdx, QWORD PTR tstate$[rsp]
  00265	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  0026a	e8 00 00 00 00	 call	 _PyGILState_Init

; 314  : #endif /* WITH_THREAD */
; 315  : 
; 316  :     _Py_ReadyTypes();

  0026f	e8 00 00 00 00	 call	 _Py_ReadyTypes

; 317  : 
; 318  :     if (!_PyFrame_Init())

  00274	e8 00 00 00 00	 call	 _PyFrame_Init
  00279	85 c0		 test	 eax, eax
  0027b	75 0c		 jne	 SHORT $LN24@Py_Initial

; 319  :         Py_FatalError("Py_Initialize: can't init frames");

  0027d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@MDMPLGNG@Py_Initialize?3?5can?8t?5init?5frames@
  00284	e8 00 00 00 00	 call	 Py_FatalError
$LN24@Py_Initial:

; 320  : 
; 321  :     if (!_PyLong_Init())

  00289	e8 00 00 00 00	 call	 _PyLong_Init
  0028e	85 c0		 test	 eax, eax
  00290	75 0c		 jne	 SHORT $LN23@Py_Initial

; 322  :         Py_FatalError("Py_Initialize: can't init longs");

  00292	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@HKLDAHHJ@Py_Initialize?3?5can?8t?5init?5longs?$AA@
  00299	e8 00 00 00 00	 call	 Py_FatalError
$LN23@Py_Initial:

; 323  : 
; 324  :     if (!PyByteArray_Init())

  0029e	e8 00 00 00 00	 call	 PyByteArray_Init
  002a3	85 c0		 test	 eax, eax
  002a5	75 0c		 jne	 SHORT $LN22@Py_Initial

; 325  :         Py_FatalError("Py_Initialize: can't init bytearray");

  002a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@GMGFLAMI@Py_Initialize?3?5can?8t?5init?5bytear@
  002ae	e8 00 00 00 00	 call	 Py_FatalError
$LN22@Py_Initial:

; 326  : 
; 327  :     _PyFloat_Init();

  002b3	e8 00 00 00 00	 call	 _PyFloat_Init

; 328  : 
; 329  :     interp->modules = PyDict_New();

  002b8	e8 00 00 00 00	 call	 PyDict_New
  002bd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  002c2	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 330  :     if (interp->modules == NULL)

  002c6	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  002cb	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  002d0	75 0c		 jne	 SHORT $LN21@Py_Initial

; 331  :         Py_FatalError("Py_Initialize: can't make modules dictionary");

  002d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@GDNGMGLE@Py_Initialize?3?5can?8t?5make?5module@
  002d9	e8 00 00 00 00	 call	 Py_FatalError
$LN21@Py_Initial:

; 332  : 
; 333  :     /* Init Unicode implementation; relies on the codec registry */
; 334  :     if (_PyUnicode_Init() < 0)

  002de	e8 00 00 00 00	 call	 _PyUnicode_Init
  002e3	85 c0		 test	 eax, eax
  002e5	7d 0c		 jge	 SHORT $LN20@Py_Initial

; 335  :         Py_FatalError("Py_Initialize: can't initialize unicode");

  002e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@KMMHKOEA@Py_Initialize?3?5can?8t?5initialize?5@
  002ee	e8 00 00 00 00	 call	 Py_FatalError
$LN20@Py_Initial:

; 336  : 
; 337  :     bimod = _PyBuiltin_Init();

  002f3	e8 00 00 00 00	 call	 _PyBuiltin_Init
  002f8	48 89 44 24 58	 mov	 QWORD PTR bimod$[rsp], rax

; 338  :     if (bimod == NULL)

  002fd	48 83 7c 24 58
	00		 cmp	 QWORD PTR bimod$[rsp], 0
  00303	75 0c		 jne	 SHORT $LN19@Py_Initial

; 339  :         Py_FatalError("Py_Initialize: can't initialize builtins modules");

  00305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@FOMCBPB@Py_Initialize?3?5can?8t?5initialize?5@
  0030c	e8 00 00 00 00	 call	 Py_FatalError
$LN19@Py_Initial:

; 340  :     _PyImport_FixupBuiltin(bimod, "builtins");

  00311	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00318	48 8b 4c 24 58	 mov	 rcx, QWORD PTR bimod$[rsp]
  0031d	e8 00 00 00 00	 call	 _PyImport_FixupBuiltin

; 341  :     interp->builtins = PyModule_GetDict(bimod);

  00322	48 8b 4c 24 58	 mov	 rcx, QWORD PTR bimod$[rsp]
  00327	e8 00 00 00 00	 call	 PyModule_GetDict
  0032c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  00331	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 342  :     if (interp->builtins == NULL)

  00335	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  0033a	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  0033f	75 0c		 jne	 SHORT $LN18@Py_Initial

; 343  :         Py_FatalError("Py_Initialize: can't initialize builtins dict");

  00341	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@LKOHMMCC@Py_Initialize?3?5can?8t?5initialize?5@
  00348	e8 00 00 00 00	 call	 Py_FatalError
$LN18@Py_Initial:

; 344  :     Py_INCREF(interp->builtins);

  0034d	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  00352	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00356	e8 00 00 00 00	 call	 _Py_IncRef

; 345  : 
; 346  :     /* initialize builtin exceptions */
; 347  :     _PyExc_Init(bimod);

  0035b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR bimod$[rsp]
  00360	e8 00 00 00 00	 call	 _PyExc_Init

; 348  : 
; 349  :     sysmod = _PySys_Init();

  00365	e8 00 00 00 00	 call	 _PySys_Init
  0036a	48 89 44 24 28	 mov	 QWORD PTR sysmod$[rsp], rax

; 350  :     if (sysmod == NULL)

  0036f	48 83 7c 24 28
	00		 cmp	 QWORD PTR sysmod$[rsp], 0
  00375	75 0c		 jne	 SHORT $LN17@Py_Initial

; 351  :         Py_FatalError("Py_Initialize: can't initialize sys");

  00377	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@DDAMEANI@Py_Initialize?3?5can?8t?5initialize?5@
  0037e	e8 00 00 00 00	 call	 Py_FatalError
$LN17@Py_Initial:

; 352  :     interp->sysdict = PyModule_GetDict(sysmod);

  00383	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysmod$[rsp]
  00388	e8 00 00 00 00	 call	 PyModule_GetDict
  0038d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  00392	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 353  :     if (interp->sysdict == NULL)

  00396	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  0039b	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  003a0	75 0c		 jne	 SHORT $LN16@Py_Initial

; 354  :         Py_FatalError("Py_Initialize: can't initialize sys dict");

  003a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@PDBCFFEI@Py_Initialize?3?5can?8t?5initialize?5@
  003a9	e8 00 00 00 00	 call	 Py_FatalError
$LN16@Py_Initial:

; 355  :     Py_INCREF(interp->sysdict);

  003ae	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  003b3	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  003b7	e8 00 00 00 00	 call	 _Py_IncRef

; 356  :     _PyImport_FixupBuiltin(sysmod, "sys");

  003bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  003c3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sysmod$[rsp]
  003c8	e8 00 00 00 00	 call	 _PyImport_FixupBuiltin

; 357  :     PySys_SetPath(Py_GetPath());

  003cd	e8 00 00 00 00	 call	 Py_GetPath
  003d2	48 8b c8	 mov	 rcx, rax
  003d5	e8 00 00 00 00	 call	 PySys_SetPath

; 358  :     PyDict_SetItemString(interp->sysdict, "modules",
; 359  :                          interp->modules);

  003da	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  003df	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
  003e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DFGEOAEG@modules?$AA@
  003ea	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  003ef	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  003f3	e8 00 00 00 00	 call	 PyDict_SetItemString

; 360  : 
; 361  :     /* Set up a preliminary stderr printer until we have enough
; 362  :        infrastructure for the io module in place. */
; 363  :     pstderr = PyFile_NewStdPrinter(fileno(stderr));

  003f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  003fe	48 83 c0 60	 add	 rax, 96			; 00000060H
  00402	48 8b c8	 mov	 rcx, rax
  00405	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0040b	8b c8		 mov	 ecx, eax
  0040d	e8 00 00 00 00	 call	 PyFile_NewStdPrinter
  00412	48 89 44 24 30	 mov	 QWORD PTR pstderr$[rsp], rax

; 364  :     if (pstderr == NULL)

  00417	48 83 7c 24 30
	00		 cmp	 QWORD PTR pstderr$[rsp], 0
  0041d	75 0c		 jne	 SHORT $LN15@Py_Initial

; 365  :         Py_FatalError("Py_Initialize: can't set preliminary stderr");

  0041f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@PBJGLECD@Py_Initialize?3?5can?8t?5set?5prelimi@
  00426	e8 00 00 00 00	 call	 Py_FatalError
$LN15@Py_Initial:

; 366  :     PySys_SetObject("stderr", pstderr);

  0042b	48 8b 54 24 30	 mov	 rdx, QWORD PTR pstderr$[rsp]
  00430	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00437	e8 00 00 00 00	 call	 PySys_SetObject

; 367  :     PySys_SetObject("__stderr__", pstderr);

  0043c	48 8b 54 24 30	 mov	 rdx, QWORD PTR pstderr$[rsp]
  00441	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OJDCNPPP@__stderr__?$AA@
  00448	e8 00 00 00 00	 call	 PySys_SetObject

; 368  :     Py_DECREF(pstderr);

  0044d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pstderr$[rsp]
  00452	e8 00 00 00 00	 call	 _Py_DecRef

; 369  : 
; 370  :     _PyImport_Init();

  00457	e8 00 00 00 00	 call	 _PyImport_Init

; 371  : 
; 372  :     _PyImportHooks_Init();

  0045c	e8 00 00 00 00	 call	 _PyImportHooks_Init

; 373  : 
; 374  :     /* Initialize _warnings. */
; 375  :     _PyWarnings_Init();

  00461	e8 00 00 00 00	 call	 _PyWarnings_Init

; 376  : 
; 377  :     if (!install_importlib)

  00466	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR install_importlib$[rsp], 0
  0046e	75 05		 jne	 SHORT $LN14@Py_Initial

; 378  :         return;

  00470	e9 4a 01 00 00	 jmp	 $LN33@Py_Initial
$LN14@Py_Initial:

; 379  : 
; 380  :     import_init(interp, sysmod);

  00475	48 8b 54 24 28	 mov	 rdx, QWORD PTR sysmod$[rsp]
  0047a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  0047f	e8 00 00 00 00	 call	 import_init

; 381  : 
; 382  :     /* initialize the faulthandler module */
; 383  :     if (_PyFaulthandler_Init())

  00484	e8 00 00 00 00	 call	 _PyFaulthandler_Init
  00489	85 c0		 test	 eax, eax
  0048b	74 0c		 je	 SHORT $LN13@Py_Initial

; 384  :         Py_FatalError("Py_Initialize: can't initialize faulthandler");

  0048d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@LMHHBFOI@Py_Initialize?3?5can?8t?5initialize?5@
  00494	e8 00 00 00 00	 call	 Py_FatalError
$LN13@Py_Initial:

; 385  : 
; 386  :     _PyTime_Init();

  00499	e8 00 00 00 00	 call	 _PyTime_Init

; 387  : 
; 388  :     if (initfsencoding(interp) < 0)

  0049e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  004a3	e8 00 00 00 00	 call	 initfsencoding
  004a8	85 c0		 test	 eax, eax
  004aa	7d 0c		 jge	 SHORT $LN12@Py_Initial

; 389  :         Py_FatalError("Py_Initialize: unable to load the file system codec");

  004ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DE@GJBFCCGH@Py_Initialize?3?5unable?5to?5load?5th@
  004b3	e8 00 00 00 00	 call	 Py_FatalError
$LN12@Py_Initial:

; 390  : 
; 391  :     if (install_sigs)

  004b8	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR install_sigs$[rsp], 0
  004c0	74 05		 je	 SHORT $LN11@Py_Initial

; 392  :         initsigs(); /* Signal handling stuff, including initintr() */

  004c2	e8 00 00 00 00	 call	 initsigs
$LN11@Py_Initial:

; 393  : 
; 394  :     initmain(interp); /* Module __main__ */

  004c7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  004cc	e8 00 00 00 00	 call	 initmain

; 395  :     if (initstdio() < 0)

  004d1	e8 00 00 00 00	 call	 initstdio
  004d6	85 c0		 test	 eax, eax
  004d8	7d 0c		 jge	 SHORT $LN10@Py_Initial

; 396  :         Py_FatalError(
; 397  :             "Py_Initialize: can't initialize sys standard streams");

  004da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DF@BMECFJNN@Py_Initialize?3?5can?8t?5initialize?5@
  004e1	e8 00 00 00 00	 call	 Py_FatalError
$LN10@Py_Initial:

; 398  : 
; 399  :     /* Initialize warnings. */
; 400  :     if (PySys_HasWarnOptions()) {

  004e6	e8 00 00 00 00	 call	 PySys_HasWarnOptions
  004eb	85 c0		 test	 eax, eax
  004ed	74 50		 je	 SHORT $LN9@Py_Initial

; 401  :         PyObject *warnings_module = PyImport_ImportModule("warnings");

  004ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NOCNCINM@warnings?$AA@
  004f6	e8 00 00 00 00	 call	 PyImport_ImportModule
  004fb	48 89 44 24 60	 mov	 QWORD PTR warnings_module$122249[rsp], rax

; 402  :         if (warnings_module == NULL) {

  00500	48 83 7c 24 60
	00		 cmp	 QWORD PTR warnings_module$122249[rsp], 0
  00506	75 1f		 jne	 SHORT $LN8@Py_Initial

; 403  :             fprintf(stderr, "'import warnings' failed; traceback:\n");

  00508	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0050e	48 83 c0 60	 add	 rax, 96			; 00000060H
  00512	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@PJEKFHMO@?8import?5warnings?8?5failed?$DL?5traceb@
  00519	48 8b c8	 mov	 rcx, rax
  0051c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 404  :             PyErr_Print();

  00522	e8 00 00 00 00	 call	 PyErr_Print
$LN8@Py_Initial:
$LN7@Py_Initial:

; 405  :         }
; 406  :         Py_XDECREF(warnings_module);

  00527	48 83 7c 24 60
	00		 cmp	 QWORD PTR warnings_module$122249[rsp], 0
  0052d	74 0a		 je	 SHORT $LN4@Py_Initial
  0052f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR warnings_module$122249[rsp]
  00534	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@Py_Initial:
  00539	33 c0		 xor	 eax, eax
  0053b	85 c0		 test	 eax, eax
  0053d	75 e8		 jne	 SHORT $LN7@Py_Initial
$LN9@Py_Initial:

; 407  :     }
; 408  : 
; 409  :     if (!Py_NoSiteFlag)

  0053f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_NoSiteFlag, 0
  00546	75 05		 jne	 SHORT $LN3@Py_Initial

; 410  :         initsite(); /* Module site */

  00548	e8 00 00 00 00	 call	 initsite
$LN3@Py_Initial:

; 411  : #ifdef WITH_PARALLEL
; 412  :     _parallelmod = _PyParallel_ModInit();

  0054d	e8 00 00 00 00	 call	 _PyParallel_ModInit
  00552	48 89 44 24 50	 mov	 QWORD PTR _parallelmod$[rsp], rax

; 413  :     if (_parallelmod == NULL)

  00557	48 83 7c 24 50
	00		 cmp	 QWORD PTR _parallelmod$[rsp], 0
  0055d	75 0c		 jne	 SHORT $LN2@Py_Initial

; 414  :         Py_FatalError("Py_Initialize: can't initialize _parallel module");

  0055f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@GBLAJFBE@Py_Initialize?3?5can?8t?5initialize?5@
  00566	e8 00 00 00 00	 call	 Py_FatalError
$LN2@Py_Initial:

; 415  :     Py_INCREF(_parallelmod);

  0056b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _parallelmod$[rsp]
  00570	e8 00 00 00 00	 call	 _Py_IncRef

; 416  :     _PyImport_FixupBuiltin(_parallelmod, "_parallel");

  00575	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09KKLBMLNG@_parallel?$AA@
  0057c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _parallelmod$[rsp]
  00581	e8 00 00 00 00	 call	 _PyImport_FixupBuiltin

; 417  : 
; 418  :     _asyncmod = _PyAsync_ModInit();

  00586	e8 00 00 00 00	 call	 _PyAsync_ModInit
  0058b	48 89 44 24 48	 mov	 QWORD PTR _asyncmod$[rsp], rax

; 419  :     if (_asyncmod == NULL)

  00590	48 83 7c 24 48
	00		 cmp	 QWORD PTR _asyncmod$[rsp], 0
  00596	75 0c		 jne	 SHORT $LN1@Py_Initial

; 420  :         Py_FatalError("Py_Initialize: can't initialize _async module");

  00598	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PJOLMBNF@Py_Initialize?3?5can?8t?5initialize?5@
  0059f	e8 00 00 00 00	 call	 Py_FatalError
$LN1@Py_Initial:

; 421  :     Py_INCREF(_asyncmod);

  005a4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _asyncmod$[rsp]
  005a9	e8 00 00 00 00	 call	 _Py_IncRef

; 422  :     _PyImport_FixupBuiltin(_asyncmod, "_async");

  005ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NAHKMOGH@_async?$AA@
  005b5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _asyncmod$[rsp]
  005ba	e8 00 00 00 00	 call	 _PyImport_FixupBuiltin
$LN33@Py_Initial:

; 423  : 
; 424  : #endif
; 425  : }

  005bf	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  005c6	c3		 ret	 0
_Py_InitializeEx_Private ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	__imp_atoi:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pythonrun.c
pdata	SEGMENT
$pdata$add_flag DD imagerel add_flag
	DD	imagerel add_flag+70
	DD	imagerel $unwind$add_flag
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_flag DD 010d01H
	DD	0620dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT add_flag
_TEXT	SEGMENT
env$ = 32
flag$ = 64
envs$ = 72
add_flag PROC						; COMDAT

; 135  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 136  :     int env = atoi(envs);

  0000d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR envs$[rsp]
  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00018	89 44 24 20	 mov	 DWORD PTR env$[rsp], eax

; 137  :     if (flag < env)

  0001c	8b 44 24 20	 mov	 eax, DWORD PTR env$[rsp]
  00020	39 44 24 40	 cmp	 DWORD PTR flag$[rsp], eax
  00024	7d 08		 jge	 SHORT $LN2@add_flag

; 138  :         flag = env;

  00026	8b 44 24 20	 mov	 eax, DWORD PTR env$[rsp]
  0002a	89 44 24 40	 mov	 DWORD PTR flag$[rsp], eax
$LN2@add_flag:

; 139  :     if (flag < 1)

  0002e	83 7c 24 40 01	 cmp	 DWORD PTR flag$[rsp], 1
  00033	7d 08		 jge	 SHORT $LN1@add_flag

; 140  :         flag = 1;

  00035	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR flag$[rsp], 1
$LN1@add_flag:

; 141  :     return flag;

  0003d	8b 44 24 40	 mov	 eax, DWORD PTR flag$[rsp]

; 142  : }

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
add_flag ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@LDJDJHNL@Py_Initialize?3?5importlib?5install@ ; `string'
PUBLIC	??_C@_08CKMLFGDH@_install?$AA@			; `string'
PUBLIC	??_C@_02MJJLPNK@OO?$AA@				; `string'
PUBLIC	??_C@_0CO@NHLGIPOO@Py_Initialize?3?5can?8t?5save?5_imp?5t@ ; `string'
PUBLIC	??_C@_04KKIAMJPE@_imp?$AA@			; `string'
PUBLIC	??_C@_0BG@ECKJLMOC@import?5sys?5?$CD?5builtin?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@KDBAIBAC@import?5imp?5?$CD?5builtin?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@IKDHDMHB@Py_Initialize?3?5can?8t?5import?5imp?$AA@ ; `string'
PUBLIC	??_C@_0DP@JKEJOPCF@Py_Initialize?3?5couldn?8t?5get?5_fro@ ; `string'
PUBLIC	??_C@_0CD@EMCOKPID@import?5_frozen_importlib?5?$CD?5froze@ ; `string'
PUBLIC	??_C@_0CO@DNANHCJL@Py_Initialize?3?5can?8t?5import?5_fro@ ; `string'
PUBLIC	??_C@_0BC@BLEAGBOG@_frozen_importlib?$AA@	; `string'
EXTRN	_PyImportZip_Init:PROC
EXTRN	PyObject_CallMethod:PROC
EXTRN	PyImport_GetModuleDict:PROC
EXTRN	PyInit_imp:PROC
EXTRN	PyImport_AddModule:PROC
EXTRN	PySys_FormatStderr:PROC
EXTRN	PyImport_ImportFrozenModule:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$import_init DD imagerel import_init
	DD	imagerel import_init+351
	DD	imagerel $unwind$import_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$import_init DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0CI@LDJDJHNL@Py_Initialize?3?5importlib?5install@
CONST	SEGMENT
??_C@_0CI@LDJDJHNL@Py_Initialize?3?5importlib?5install@ DB 'Py_Initialize'
	DB	': importlib install failed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CKMLFGDH@_install?$AA@
CONST	SEGMENT
??_C@_08CKMLFGDH@_install?$AA@ DB '_install', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MJJLPNK@OO?$AA@
CONST	SEGMENT
??_C@_02MJJLPNK@OO?$AA@ DB 'OO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NHLGIPOO@Py_Initialize?3?5can?8t?5save?5_imp?5t@
CONST	SEGMENT
??_C@_0CO@NHLGIPOO@Py_Initialize?3?5can?8t?5save?5_imp?5t@ DB 'Py_Initial'
	DB	'ize: can''t save _imp to sys.modules', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KKIAMJPE@_imp?$AA@
CONST	SEGMENT
??_C@_04KKIAMJPE@_imp?$AA@ DB '_imp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ECKJLMOC@import?5sys?5?$CD?5builtin?6?$AA@
CONST	SEGMENT
??_C@_0BG@ECKJLMOC@import?5sys?5?$CD?5builtin?6?$AA@ DB 'import sys # bui'
	DB	'ltin', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KDBAIBAC@import?5imp?5?$CD?5builtin?6?$AA@
CONST	SEGMENT
??_C@_0BG@KDBAIBAC@import?5imp?5?$CD?5builtin?6?$AA@ DB 'import imp # bui'
	DB	'ltin', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IKDHDMHB@Py_Initialize?3?5can?8t?5import?5imp?$AA@
CONST	SEGMENT
??_C@_0CA@IKDHDMHB@Py_Initialize?3?5can?8t?5import?5imp?$AA@ DB 'Py_Initi'
	DB	'alize: can''t import imp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@JKEJOPCF@Py_Initialize?3?5couldn?8t?5get?5_fro@
CONST	SEGMENT
??_C@_0DP@JKEJOPCF@Py_Initialize?3?5couldn?8t?5get?5_fro@ DB 'Py_Initiali'
	DB	'ze: couldn''t get _frozen_importlib from sys.modules', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EMCOKPID@import?5_frozen_importlib?5?$CD?5froze@
CONST	SEGMENT
??_C@_0CD@EMCOKPID@import?5_frozen_importlib?5?$CD?5froze@ DB 'import _fr'
	DB	'ozen_importlib # frozen', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DNANHCJL@Py_Initialize?3?5can?8t?5import?5_fro@
CONST	SEGMENT
??_C@_0CO@DNANHCJL@Py_Initialize?3?5can?8t?5import?5_fro@ DB 'Py_Initiali'
	DB	'ze: can''t import _frozen_importlib', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BLEAGBOG@_frozen_importlib?$AA@
CONST	SEGMENT
??_C@_0BC@BLEAGBOG@_frozen_importlib?$AA@ DB '_frozen_importlib', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT import_init
_TEXT	SEGMENT
value$ = 48
sys_modules$ = 56
importlib$ = 64
impmod$ = 72
interp$ = 96
sysmod$ = 104
import_init PROC					; COMDAT

; 199  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 200  :     PyObject *importlib;
; 201  :     PyObject *impmod;
; 202  :     PyObject *sys_modules;
; 203  :     PyObject *value;
; 204  : 
; 205  :     /* Import _importlib through its frozen version, _frozen_importlib. */
; 206  :     if (PyImport_ImportFrozenModule("_frozen_importlib") <= 0) {

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BLEAGBOG@_frozen_importlib?$AA@
  00015	e8 00 00 00 00	 call	 PyImport_ImportFrozenModule
  0001a	85 c0		 test	 eax, eax
  0001c	7f 0e		 jg	 SHORT $LN10@import_ini

; 207  :         Py_FatalError("Py_Initialize: can't import _frozen_importlib");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@DNANHCJL@Py_Initialize?3?5can?8t?5import?5_fro@
  00025	e8 00 00 00 00	 call	 Py_FatalError
  0002a	eb 15		 jmp	 SHORT $LN9@import_ini
$LN10@import_ini:

; 208  :     }
; 209  :     else if (Py_VerboseFlag) {

  0002c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00033	74 0c		 je	 SHORT $LN8@import_ini

; 210  :         PySys_FormatStderr("import _frozen_importlib # frozen\n");

  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@EMCOKPID@import?5_frozen_importlib?5?$CD?5froze@
  0003c	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN8@import_ini:
$LN9@import_ini:

; 211  :     }
; 212  :     importlib = PyImport_AddModule("_frozen_importlib");

  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BLEAGBOG@_frozen_importlib?$AA@
  00048	e8 00 00 00 00	 call	 PyImport_AddModule
  0004d	48 89 44 24 40	 mov	 QWORD PTR importlib$[rsp], rax

; 213  :     if (importlib == NULL) {

  00052	48 83 7c 24 40
	00		 cmp	 QWORD PTR importlib$[rsp], 0
  00058	75 0c		 jne	 SHORT $LN7@import_ini

; 214  :         Py_FatalError("Py_Initialize: couldn't get _frozen_importlib from "
; 215  :                       "sys.modules");

  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DP@JKEJOPCF@Py_Initialize?3?5couldn?8t?5get?5_fro@
  00061	e8 00 00 00 00	 call	 Py_FatalError
$LN7@import_ini:

; 216  :     }
; 217  :     interp->importlib = importlib;

  00066	48 8b 44 24 60	 mov	 rax, QWORD PTR interp$[rsp]
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR importlib$[rsp]
  00070	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 218  :     Py_INCREF(interp->importlib);

  00074	48 8b 44 24 60	 mov	 rax, QWORD PTR interp$[rsp]
  00079	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0007d	e8 00 00 00 00	 call	 _Py_IncRef

; 219  : 
; 220  :     /* Install _importlib as __import__ */
; 221  :     impmod = PyInit_imp();

  00082	e8 00 00 00 00	 call	 PyInit_imp
  00087	48 89 44 24 48	 mov	 QWORD PTR impmod$[rsp], rax

; 222  :     if (impmod == NULL) {

  0008c	48 83 7c 24 48
	00		 cmp	 QWORD PTR impmod$[rsp], 0
  00092	75 0e		 jne	 SHORT $LN6@import_ini

; 223  :         Py_FatalError("Py_Initialize: can't import imp");

  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@IKDHDMHB@Py_Initialize?3?5can?8t?5import?5imp?$AA@
  0009b	e8 00 00 00 00	 call	 Py_FatalError
  000a0	eb 15		 jmp	 SHORT $LN5@import_ini
$LN6@import_ini:

; 224  :     }
; 225  :     else if (Py_VerboseFlag) {

  000a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  000a9	74 0c		 je	 SHORT $LN4@import_ini

; 226  :         PySys_FormatStderr("import imp # builtin\n");

  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@KDBAIBAC@import?5imp?5?$CD?5builtin?6?$AA@
  000b2	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN4@import_ini:
$LN5@import_ini:

; 227  :     }
; 228  :     sys_modules = PyImport_GetModuleDict();

  000b7	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  000bc	48 89 44 24 38	 mov	 QWORD PTR sys_modules$[rsp], rax

; 229  :     if (Py_VerboseFlag) {

  000c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  000c8	74 0c		 je	 SHORT $LN3@import_ini

; 230  :         PySys_FormatStderr("import sys # builtin\n");

  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@ECKJLMOC@import?5sys?5?$CD?5builtin?6?$AA@
  000d1	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN3@import_ini:

; 231  :     }
; 232  :     if (PyDict_SetItemString(sys_modules, "_imp", impmod) < 0) {

  000d6	4c 8b 44 24 48	 mov	 r8, QWORD PTR impmod$[rsp]
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KKIAMJPE@_imp?$AA@
  000e2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR sys_modules$[rsp]
  000e7	e8 00 00 00 00	 call	 PyDict_SetItemString
  000ec	85 c0		 test	 eax, eax
  000ee	7d 0c		 jge	 SHORT $LN2@import_ini

; 233  :         Py_FatalError("Py_Initialize: can't save _imp to sys.modules");

  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@NHLGIPOO@Py_Initialize?3?5can?8t?5save?5_imp?5t@
  000f7	e8 00 00 00 00	 call	 Py_FatalError
$LN2@import_ini:

; 234  :     }
; 235  : 
; 236  :     value = PyObject_CallMethod(importlib, "_install", "OO", sysmod, impmod);

  000fc	48 8b 44 24 48	 mov	 rax, QWORD PTR impmod$[rsp]
  00101	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00106	4c 8b 4c 24 68	 mov	 r9, QWORD PTR sysmod$[rsp]
  0010b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02MJJLPNK@OO?$AA@
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CKMLFGDH@_install?$AA@
  00119	48 8b 4c 24 40	 mov	 rcx, QWORD PTR importlib$[rsp]
  0011e	e8 00 00 00 00	 call	 PyObject_CallMethod
  00123	48 89 44 24 30	 mov	 QWORD PTR value$[rsp], rax

; 237  :     if (value == NULL) {

  00128	48 83 7c 24 30
	00		 cmp	 QWORD PTR value$[rsp], 0
  0012e	75 11		 jne	 SHORT $LN1@import_ini

; 238  :         PyErr_Print();

  00130	e8 00 00 00 00	 call	 PyErr_Print

; 239  :         Py_FatalError("Py_Initialize: importlib install failed");

  00135	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@LDJDJHNL@Py_Initialize?3?5importlib?5install@
  0013c	e8 00 00 00 00	 call	 Py_FatalError
$LN1@import_ini:

; 240  :     }
; 241  :     Py_DECREF(value);

  00141	48 8b 4c 24 30	 mov	 rcx, QWORD PTR value$[rsp]
  00146	e8 00 00 00 00	 call	 _Py_DecRef

; 242  :     Py_DECREF(impmod);

  0014b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR impmod$[rsp]
  00150	e8 00 00 00 00	 call	 _Py_DecRef

; 243  : 
; 244  :     _PyImportZip_Init();

  00155	e8 00 00 00 00	 call	 _PyImportZip_Init

; 245  : }

  0015a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0015e	c3		 ret	 0
import_init ENDP
_TEXT	ENDS
PUBLIC	Py_InitializeEx
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_InitializeEx DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$Py_InitializeEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_InitializeEx DD 010801H
	DD	04208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Py_InitializeEx
_TEXT	SEGMENT
install_sigs$ = 48
Py_InitializeEx PROC					; COMDAT

; 429  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 430  :     _Py_InitializeEx_Private(install_sigs, 1);

  00008	ba 01 00 00 00	 mov	 edx, 1
  0000d	8b 4c 24 30	 mov	 ecx, DWORD PTR install_sigs$[rsp]
  00011	e8 00 00 00 00	 call	 _Py_InitializeEx_Private

; 431  : }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
Py_InitializeEx ENDP
_TEXT	ENDS
PUBLIC	Py_Initialize
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_Initialize DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$Py_Initialize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_Initialize DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Py_Initialize
_TEXT	SEGMENT
Py_Initialize PROC					; COMDAT

; 435  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 436  :     Py_InitializeEx(1);

  00004	b9 01 00 00 00	 mov	 ecx, 1
  00009	e8 00 00 00 00	 call	 Py_InitializeEx

; 437  : }

  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	c3		 ret	 0
Py_Initialize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@HAEBPFMD@PYTHONMALLOCSTATS?$AA@	; `string'
PUBLIC	??_C@_0P@KJAFBCIC@PYTHONDUMPREFS?$AA@		; `string'
PUBLIC	??_C@_0M@HGODPNIO@?$FL?$CFId?5refs?$FN?6?$AA@	; `string'
PUBLIC	Py_Finalize
EXTRN	_PyObject_DebugMallocStats:PROC
EXTRN	_Py_PrintReferenceAddresses:PROC
EXTRN	PyGrammar_RemoveAccelerators:PROC
EXTRN	_PyParser_Grammar:BYTE
EXTRN	__imp_free:PROC
EXTRN	Py_FileSystemDefaultEncoding:QWORD
EXTRN	Py_HasFileSystemDefaultEncoding:DWORD
EXTRN	PyInterpreterState_Delete:PROC
EXTRN	_PyUnicode_Fini:PROC
EXTRN	PySlice_Fini:PROC
EXTRN	PyDict_Fini:PROC
EXTRN	PyFloat_Fini:PROC
EXTRN	PyLong_Fini:PROC
EXTRN	PyByteArray_Fini:PROC
EXTRN	PyBytes_Fini:PROC
EXTRN	PySet_Fini:PROC
EXTRN	PyList_Fini:PROC
EXTRN	PyTuple_Fini:PROC
EXTRN	PyCFunction_Fini:PROC
EXTRN	PyFrame_Fini:PROC
EXTRN	PyMethod_Fini:PROC
EXTRN	_PyGILState_Fini:PROC
EXTRN	_PyExc_Fini:PROC
EXTRN	PyInterpreterState_Clear:PROC
EXTRN	_Py_PrintReferences:PROC
EXTRN	_Py_GetRefTotal:PROC
EXTRN	_PyFaulthandler_Fini:PROC
EXTRN	_PyType_Fini:PROC
EXTRN	_PyImport_Fini:PROC
EXTRN	PyImport_Cleanup:PROC
EXTRN	_PyGC_Fini:PROC
EXTRN	PyGC_Collect:PROC
EXTRN	PyOS_FiniInterrupts:PROC
EXTRN	PyThreadState_Get:PROC
EXTRN	_PyParallel_Finalize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_Finalize DD imagerel $LN14
	DD	imagerel $LN14+527
	DD	imagerel $unwind$Py_Finalize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_Finalize DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_0BC@HAEBPFMD@PYTHONMALLOCSTATS?$AA@
CONST	SEGMENT
??_C@_0BC@HAEBPFMD@PYTHONMALLOCSTATS?$AA@ DB 'PYTHONMALLOCSTATS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KJAFBCIC@PYTHONDUMPREFS?$AA@
CONST	SEGMENT
??_C@_0P@KJAFBCIC@PYTHONDUMPREFS?$AA@ DB 'PYTHONDUMPREFS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HGODPNIO@?$FL?$CFId?5refs?$FN?6?$AA@
CONST	SEGMENT
??_C@_0M@HGODPNIO@?$FL?$CFId?5refs?$FN?6?$AA@ DB '[%Id refs]', 0aH, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Py_Finalize
_TEXT	SEGMENT
tstate$ = 32
interp$ = 40
tv68 = 48
tv76 = 56
tv91 = 64
tv131 = 72
Py_Finalize PROC					; COMDAT

; 503  : {

$LN14:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 504  :     PyInterpreterState *interp;
; 505  :     PyThreadState *tstate;
; 506  : 
; 507  :     if (!initialized)

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR initialized, 0
  0000b	75 05		 jne	 SHORT $LN5@Py_Finaliz

; 508  :         return;

  0000d	e9 f8 01 00 00	 jmp	 $LN6@Py_Finaliz
$LN5@Py_Finaliz:

; 509  : 
; 510  :     wait_for_thread_shutdown();

  00012	e8 00 00 00 00	 call	 wait_for_thread_shutdown

; 511  : 
; 512  : #ifdef WITH_PARALLEL
; 513  :     _PyParallel_Finalize();

  00017	e8 00 00 00 00	 call	 _PyParallel_Finalize

; 514  : #endif
; 515  : 
; 516  :     /* The interpreter is still entirely intact at this point, and the
; 517  :      * exit funcs may be relying on that.  In particular, if some thread
; 518  :      * or exit func is still waiting to do an import, the import machinery
; 519  :      * expects Py_IsInitialized() to return true.  So don't say the
; 520  :      * interpreter is uninitialized until after the exit funcs have run.
; 521  :      * Note that Threading.py uses an exit func to do a join on all the
; 522  :      * threads created thru it, so this also protects pending imports in
; 523  :      * the threads created via Threading.
; 524  :      */
; 525  :     call_py_exitfuncs();

  0001c	e8 00 00 00 00	 call	 call_py_exitfuncs

; 526  : 
; 527  :     /* Get current thread state and interpreter pointer */
; 528  :     tstate = PyThreadState_GET();

  00021	e8 00 00 00 00	 call	 PyThreadState_Get
  00026	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 529  :     interp = tstate->interp;

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00030	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00034	48 89 44 24 28	 mov	 QWORD PTR interp$[rsp], rax

; 530  : 
; 531  :     /* Remaining threads (e.g. daemon threads) will automatically exit
; 532  :        after taking the GIL (in PyEval_RestoreThread()). */
; 533  :     _Py_Finalizing = tstate;

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0003e	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_Finalizing, rax

; 534  :     initialized = 0;

  00045	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR initialized, 0

; 535  : 
; 536  :     /* Flush stdout+stderr */
; 537  :     flush_std_files();

  0004f	e8 00 00 00 00	 call	 flush_std_files

; 538  : 
; 539  :     /* Disable signal handling */
; 540  :     PyOS_FiniInterrupts();

  00054	e8 00 00 00 00	 call	 PyOS_FiniInterrupts

; 541  : 
; 542  :     /* Collect garbage.  This may call finalizers; it's nice to call these
; 543  :      * before all modules are destroyed.
; 544  :      * XXX If a __del__ or weakref callback is triggered here, and tries to
; 545  :      * XXX import a module, bad things can happen, because Python no
; 546  :      * XXX longer believes it's initialized.
; 547  :      * XXX     Fatal Python error: Interpreter not initialized (version mismatch?)
; 548  :      * XXX is easy to provoke that way.  I've also seen, e.g.,
; 549  :      * XXX     Exception exceptions.ImportError: 'No module named sha'
; 550  :      * XXX         in <function callback at 0x008F5718> ignored
; 551  :      * XXX but I'm unclear on exactly how that one happens.  In any case,
; 552  :      * XXX I haven't seen a real-life report of either of these.
; 553  :      */
; 554  :     PyGC_Collect();

  00059	e8 00 00 00 00	 call	 PyGC_Collect

; 555  : #ifdef COUNT_ALLOCS
; 556  :     /* With COUNT_ALLOCS, it helps to run GC multiple times:
; 557  :        each collection might release some types from the type
; 558  :        list, so they become garbage. */
; 559  :     while (PyGC_Collect() > 0)
; 560  :         /* nothing */;
; 561  : #endif
; 562  :     /* We run this while most interpreter state is still alive, so that
; 563  :        debug information can be printed out */
; 564  :     _PyGC_Fini();

  0005e	e8 00 00 00 00	 call	 _PyGC_Fini

; 565  : 
; 566  :     /* Destroy all modules */
; 567  :     PyImport_Cleanup();

  00063	e8 00 00 00 00	 call	 PyImport_Cleanup

; 568  : 
; 569  :     /* Flush stdout+stderr (again, in case more was printed) */
; 570  :     flush_std_files();

  00068	e8 00 00 00 00	 call	 flush_std_files

; 571  : 
; 572  :     /* Collect final garbage.  This disposes of cycles created by
; 573  :      * class definitions, for example.
; 574  :      * XXX This is disabled because it caused too many problems.  If
; 575  :      * XXX a __del__ or weakref callback triggers here, Python code has
; 576  :      * XXX a hard time running, because even the sys module has been
; 577  :      * XXX cleared out (sys.stdout is gone, sys.excepthook is gone, etc).
; 578  :      * XXX One symptom is a sequence of information-free messages
; 579  :      * XXX coming from threads (if a __del__ or callback is invoked,
; 580  :      * XXX other threads can execute too, and any exception they encounter
; 581  :      * XXX triggers a comedy of errors as subsystem after subsystem
; 582  :      * XXX fails to find what it *expects* to find in sys to help report
; 583  :      * XXX the exception and consequent unexpected failures).  I've also
; 584  :      * XXX seen segfaults then, after adding print statements to the
; 585  :      * XXX Python code getting called.
; 586  :      */
; 587  : #if 0
; 588  :     PyGC_Collect();
; 589  : #endif
; 590  : 
; 591  :     /* Destroy the database used by _PyImport_{Fixup,Find}Extension */
; 592  :     _PyImport_Fini();

  0006d	e8 00 00 00 00	 call	 _PyImport_Fini

; 593  : 
; 594  :     /* Cleanup typeobject.c's internal caches. */
; 595  :     _PyType_Fini();

  00072	e8 00 00 00 00	 call	 _PyType_Fini

; 596  : 
; 597  :     /* unload faulthandler module */
; 598  :     _PyFaulthandler_Fini();

  00077	e8 00 00 00 00	 call	 _PyFaulthandler_Fini

; 599  : 
; 600  :     /* Debugging stuff */
; 601  : #ifdef COUNT_ALLOCS
; 602  :     dump_counts(stdout);
; 603  : #endif
; 604  : 
; 605  :     PRINT_TOTAL_REFS();

  0007c	e8 00 00 00 00	 call	 _Py_GetRefTotal
  00081	48 89 44 24 30	 mov	 QWORD PTR tv68[rsp], rax
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0008c	48 83 c0 60	 add	 rax, 96			; 00000060H
  00090	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv68[rsp]
  00095	4c 8b c1	 mov	 r8, rcx
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@HGODPNIO@?$FL?$CFId?5refs?$FN?6?$AA@
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 606  : 
; 607  : #ifdef Py_TRACE_REFS
; 608  :     /* Display all objects still alive -- this can invoke arbitrary
; 609  :      * __repr__ overrides, so requires a mostly-intact interpreter.
; 610  :      * Alas, a lot of stuff may still be alive now that will be cleaned
; 611  :      * up later.
; 612  :      */
; 613  :     if (Py_GETENV("PYTHONDUMPREFS"))

  000a8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  000af	74 0b		 je	 SHORT $LN8@Py_Finaliz
  000b1	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv76[rsp], 0
  000ba	eb 12		 jmp	 SHORT $LN9@Py_Finaliz
$LN8@Py_Finaliz:
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KJAFBCIC@PYTHONDUMPREFS?$AA@
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  000c9	48 89 44 24 38	 mov	 QWORD PTR tv76[rsp], rax
$LN9@Py_Finaliz:
  000ce	48 83 7c 24 38
	00		 cmp	 QWORD PTR tv76[rsp], 0
  000d4	74 12		 je	 SHORT $LN4@Py_Finaliz

; 614  :         _Py_PrintReferences(stderr);

  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  000dc	48 83 c0 60	 add	 rax, 96			; 00000060H
  000e0	48 8b c8	 mov	 rcx, rax
  000e3	e8 00 00 00 00	 call	 _Py_PrintReferences
$LN4@Py_Finaliz:

; 615  : #endif /* Py_TRACE_REFS */
; 616  : 
; 617  :     /* Clear interpreter state and all thread states. */
; 618  :     PyInterpreterState_Clear(interp);

  000e8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR interp$[rsp]
  000ed	e8 00 00 00 00	 call	 PyInterpreterState_Clear

; 619  : 
; 620  :     /* Now we decref the exception classes.  After this point nothing
; 621  :        can raise an exception.  That's okay, because each Fini() method
; 622  :        below has been checked to make sure no exceptions are ever
; 623  :        raised.
; 624  :     */
; 625  : 
; 626  :     _PyExc_Fini();

  000f2	e8 00 00 00 00	 call	 _PyExc_Fini

; 627  : 
; 628  :     /* Cleanup auto-thread-state */
; 629  : #ifdef WITH_THREAD
; 630  :     _PyGILState_Fini();

  000f7	e8 00 00 00 00	 call	 _PyGILState_Fini

; 631  : #endif /* WITH_THREAD */
; 632  : 
; 633  :     /* Sundry finalizers */
; 634  :     PyMethod_Fini();

  000fc	e8 00 00 00 00	 call	 PyMethod_Fini

; 635  :     PyFrame_Fini();

  00101	e8 00 00 00 00	 call	 PyFrame_Fini

; 636  :     PyCFunction_Fini();

  00106	e8 00 00 00 00	 call	 PyCFunction_Fini

; 637  :     PyTuple_Fini();

  0010b	e8 00 00 00 00	 call	 PyTuple_Fini

; 638  :     PyList_Fini();

  00110	e8 00 00 00 00	 call	 PyList_Fini

; 639  :     PySet_Fini();

  00115	e8 00 00 00 00	 call	 PySet_Fini

; 640  :     PyBytes_Fini();

  0011a	e8 00 00 00 00	 call	 PyBytes_Fini

; 641  :     PyByteArray_Fini();

  0011f	e8 00 00 00 00	 call	 PyByteArray_Fini

; 642  :     PyLong_Fini();

  00124	e8 00 00 00 00	 call	 PyLong_Fini

; 643  :     PyFloat_Fini();

  00129	e8 00 00 00 00	 call	 PyFloat_Fini

; 644  :     PyDict_Fini();

  0012e	e8 00 00 00 00	 call	 PyDict_Fini

; 645  :     PySlice_Fini();

  00133	e8 00 00 00 00	 call	 PySlice_Fini

; 646  : 
; 647  :     /* Cleanup Unicode implementation */
; 648  :     _PyUnicode_Fini();

  00138	e8 00 00 00 00	 call	 _PyUnicode_Fini

; 649  : 
; 650  :     /* Delete current thread. After this, many C API calls become crashy. */
; 651  :     PyThreadState_Swap(NULL);

  0013d	33 c9		 xor	 ecx, ecx
  0013f	e8 00 00 00 00	 call	 PyThreadState_Swap

; 652  :     PyInterpreterState_Delete(interp);

  00144	48 8b 4c 24 28	 mov	 rcx, QWORD PTR interp$[rsp]
  00149	e8 00 00 00 00	 call	 PyInterpreterState_Delete

; 653  : 
; 654  :     /* reset file system default encoding */
; 655  :     if (!Py_HasFileSystemDefaultEncoding && Py_FileSystemDefaultEncoding) {

  0014e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_HasFileSystemDefaultEncoding, 0
  00155	75 22		 jne	 SHORT $LN3@Py_Finaliz
  00157	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Py_FileSystemDefaultEncoding, 0
  0015f	74 18		 je	 SHORT $LN3@Py_Finaliz

; 656  :         free((char*)Py_FileSystemDefaultEncoding);

  00161	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Py_FileSystemDefaultEncoding
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 657  :         Py_FileSystemDefaultEncoding = NULL;

  0016e	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR Py_FileSystemDefaultEncoding, 0
$LN3@Py_Finaliz:

; 658  :     }
; 659  : 
; 660  :     /* XXX Still allocated:
; 661  :        - various static ad-hoc pointers to interned strings
; 662  :        - int and float free list blocks
; 663  :        - whatever various modules and libraries allocate
; 664  :     */
; 665  : 
; 666  :     PyGrammar_RemoveAccelerators(&_PyParser_Grammar);

  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyParser_Grammar
  00180	e8 00 00 00 00	 call	 PyGrammar_RemoveAccelerators

; 667  : 
; 668  : #ifdef Py_TRACE_REFS
; 669  :     /* Display addresses (& refcnts) of all objects still alive.
; 670  :      * An address can be used to find the repr of the object, printed
; 671  :      * above by _Py_PrintReferences.
; 672  :      */
; 673  :     if (Py_GETENV("PYTHONDUMPREFS"))

  00185	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  0018c	74 0b		 je	 SHORT $LN10@Py_Finaliz
  0018e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv91[rsp], 0
  00197	eb 12		 jmp	 SHORT $LN11@Py_Finaliz
$LN10@Py_Finaliz:
  00199	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KJAFBCIC@PYTHONDUMPREFS?$AA@
  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  001a6	48 89 44 24 40	 mov	 QWORD PTR tv91[rsp], rax
$LN11@Py_Finaliz:
  001ab	48 83 7c 24 40
	00		 cmp	 QWORD PTR tv91[rsp], 0
  001b1	74 12		 je	 SHORT $LN2@Py_Finaliz

; 674  :         _Py_PrintReferenceAddresses(stderr);

  001b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001b9	48 83 c0 60	 add	 rax, 96			; 00000060H
  001bd	48 8b c8	 mov	 rcx, rax
  001c0	e8 00 00 00 00	 call	 _Py_PrintReferenceAddresses
$LN2@Py_Finaliz:

; 675  : #endif /* Py_TRACE_REFS */
; 676  : #ifdef PYMALLOC_DEBUG
; 677  :     if (Py_GETENV("PYTHONMALLOCSTATS"))

  001c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  001cc	74 0b		 je	 SHORT $LN12@Py_Finaliz
  001ce	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv131[rsp], 0
  001d7	eb 12		 jmp	 SHORT $LN13@Py_Finaliz
$LN12@Py_Finaliz:
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HAEBPFMD@PYTHONMALLOCSTATS?$AA@
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  001e6	48 89 44 24 48	 mov	 QWORD PTR tv131[rsp], rax
$LN13@Py_Finaliz:
  001eb	48 83 7c 24 48
	00		 cmp	 QWORD PTR tv131[rsp], 0
  001f1	74 12		 je	 SHORT $LN1@Py_Finaliz

; 678  :         _PyObject_DebugMallocStats(stderr);

  001f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001f9	48 83 c0 60	 add	 rax, 96			; 00000060H
  001fd	48 8b c8	 mov	 rcx, rax
  00200	e8 00 00 00 00	 call	 _PyObject_DebugMallocStats
$LN1@Py_Finaliz:

; 679  : #endif
; 680  : 
; 681  :     call_ll_exitfuncs();

  00205	e8 00 00 00 00	 call	 call_ll_exitfuncs
$LN6@Py_Finaliz:

; 682  : }

  0020a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0020e	c3		 ret	 0
Py_Finalize ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_06DJDOIFHB@stdout?$AA@			; `string'
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PySys_GetObject:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$flush_std_files DD imagerel flush_std_files
	DD	imagerel flush_std_files+272
	DD	imagerel $unwind$flush_std_files
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$flush_std_files DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJDOIFHB@stdout?$AA@
CONST	SEGMENT
??_C@_06DJDOIFHB@stdout?$AA@ DB 'stdout', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT flush_std_files
_TEXT	SEGMENT
ferr$ = 32
tmp$ = 40
fout$ = 48
flush_std_files PROC					; COMDAT

; 464  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 465  :     PyObject *fout = PySys_GetObject("stdout");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  0000b	e8 00 00 00 00	 call	 PySys_GetObject
  00010	48 89 44 24 30	 mov	 QWORD PTR fout$[rsp], rax

; 466  :     PyObject *ferr = PySys_GetObject("stderr");

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  0001c	e8 00 00 00 00	 call	 PySys_GetObject
  00021	48 89 44 24 20	 mov	 QWORD PTR ferr$[rsp], rax

; 467  :     PyObject *tmp;
; 468  :     _Py_IDENTIFIER(flush);
; 469  : 
; 470  :     if (fout != NULL && fout != Py_None && !file_is_closed(fout)) {

  00026	48 83 7c 24 30
	00		 cmp	 QWORD PTR fout$[rsp], 0
  0002c	74 6d		 je	 SHORT $LN6@flush_std_
  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00035	48 39 44 24 30	 cmp	 QWORD PTR fout$[rsp], rax
  0003a	74 5f		 je	 SHORT $LN6@flush_std_
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fout$[rsp]
  00041	e8 00 00 00 00	 call	 file_is_closed
  00046	85 c0		 test	 eax, eax
  00048	75 51		 jne	 SHORT $LN6@flush_std_

; 471  :         tmp = _PyObject_CallMethodId(fout, &PyId_flush, "");

  0004a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_flush@?1??flush_std_files@@9@9
  0004f	8b c0		 mov	 eax, eax
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00057	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00060	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00064	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0006b	48 8b d0	 mov	 rdx, rax
  0006e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fout$[rsp]
  00073	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00078	48 89 44 24 28	 mov	 QWORD PTR tmp$[rsp], rax

; 472  :         if (tmp == NULL)

  0007d	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00083	75 0c		 jne	 SHORT $LN5@flush_std_

; 473  :             PyErr_WriteUnraisable(fout);

  00085	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fout$[rsp]
  0008a	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 474  :         else

  0008f	eb 0a		 jmp	 SHORT $LN4@flush_std_
$LN5@flush_std_:

; 475  :             Py_DECREF(tmp);

  00091	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp$[rsp]
  00096	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@flush_std_:
$LN6@flush_std_:

; 476  :     }
; 477  : 
; 478  :     if (ferr != NULL && ferr != Py_None && !file_is_closed(ferr)) {

  0009b	48 83 7c 24 20
	00		 cmp	 QWORD PTR ferr$[rsp], 0
  000a1	74 68		 je	 SHORT $LN3@flush_std_
  000a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000aa	48 39 44 24 20	 cmp	 QWORD PTR ferr$[rsp], rax
  000af	74 5a		 je	 SHORT $LN3@flush_std_
  000b1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ferr$[rsp]
  000b6	e8 00 00 00 00	 call	 file_is_closed
  000bb	85 c0		 test	 eax, eax
  000bd	75 4c		 jne	 SHORT $LN3@flush_std_

; 479  :         tmp = _PyObject_CallMethodId(ferr, &PyId_flush, "");

  000bf	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_flush@?1??flush_std_files@@9@9
  000c4	8b c0		 mov	 eax, eax
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000cc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000d5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000e0	48 8b d0	 mov	 rdx, rax
  000e3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ferr$[rsp]
  000e8	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  000ed	48 89 44 24 28	 mov	 QWORD PTR tmp$[rsp], rax

; 480  :         if (tmp == NULL)

  000f2	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000f8	75 07		 jne	 SHORT $LN2@flush_std_

; 481  :             PyErr_Clear();

  000fa	e8 00 00 00 00	 call	 PyErr_Clear

; 482  :         else

  000ff	eb 0a		 jmp	 SHORT $LN1@flush_std_
$LN2@flush_std_:

; 483  :             Py_DECREF(tmp);

  00101	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp$[rsp]
  00106	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@flush_std_:
$LN3@flush_std_:

; 484  :     }
; 485  : }

  0010b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0010f	c3		 ret	 0
flush_std_files ENDP
_TEXT	ENDS
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyObject_GetAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$file_is_closed DD imagerel file_is_closed
	DD	imagerel file_is_closed+118
	DD	imagerel $unwind$file_is_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$file_is_closed DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT file_is_closed
_TEXT	SEGMENT
tmp$ = 32
r$ = 40
tv73 = 44
fobj$ = 64
file_is_closed PROC					; COMDAT

; 448  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 449  :     int r;
; 450  :     PyObject *tmp = PyObject_GetAttrString(fobj, "closed");

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IKJOPBFO@closed?$AA@
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fobj$[rsp]
  00015	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0001a	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax

; 451  :     if (tmp == NULL) {

  0001f	48 83 7c 24 20
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00025	75 09		 jne	 SHORT $LN2@file_is_cl

; 452  :         PyErr_Clear();

  00027	e8 00 00 00 00	 call	 PyErr_Clear

; 453  :         return 0;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 41		 jmp	 SHORT $LN3@file_is_cl
$LN2@file_is_cl:

; 454  :     }
; 455  :     r = PyObject_IsTrue(tmp);

  00030	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  00035	e8 00 00 00 00	 call	 PyObject_IsTrue
  0003a	89 44 24 28	 mov	 DWORD PTR r$[rsp], eax

; 456  :     Py_DECREF(tmp);

  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  00043	e8 00 00 00 00	 call	 _Py_DecRef

; 457  :     if (r < 0)

  00048	83 7c 24 28 00	 cmp	 DWORD PTR r$[rsp], 0
  0004d	7d 05		 jge	 SHORT $LN1@file_is_cl

; 458  :         PyErr_Clear();

  0004f	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@file_is_cl:

; 459  :     return r > 0;

  00054	83 7c 24 28 00	 cmp	 DWORD PTR r$[rsp], 0
  00059	7e 0a		 jle	 SHORT $LN5@file_is_cl
  0005b	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  00063	eb 08		 jmp	 SHORT $LN6@file_is_cl
$LN5@file_is_cl:
  00065	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN6@file_is_cl:
  0006d	8b 44 24 2c	 mov	 eax, DWORD PTR tv73[rsp]
$LN3@file_is_cl:

; 460  : }

  00071	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00075	c3		 ret	 0
file_is_closed ENDP
_TEXT	ENDS
PUBLIC	PyErr_PrintEx
PUBLIC	??_C@_0CM@OMAIIAMK@Py_NewInterpreter?3?5call?5Py_Initi@ ; `string'
PUBLIC	Py_NewInterpreter
EXTRN	PyThreadState_Delete:PROC
EXTRN	PyThreadState_Clear:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	_PyImport_FindBuiltin:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_NewInterpreter DD imagerel $LN15
	DD	imagerel $LN15+585
	DD	imagerel $unwind$Py_NewInterpreter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_NewInterpreter DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_0CM@OMAIIAMK@Py_NewInterpreter?3?5call?5Py_Initi@
CONST	SEGMENT
??_C@_0CM@OMAIIAMK@Py_NewInterpreter?3?5call?5Py_Initi@ DB 'Py_NewInterpr'
	DB	'eter: call Py_Initialize first', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Py_NewInterpreter
_TEXT	SEGMENT
sysmod$ = 32
save_tstate$ = 40
tstate$ = 48
interp$ = 56
bimod$ = 64
pstderr$122350 = 72
Py_NewInterpreter PROC					; COMDAT

; 699  : {

$LN15:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 700  :     PyInterpreterState *interp;
; 701  :     PyThreadState *tstate, *save_tstate;
; 702  :     PyObject *bimod, *sysmod;
; 703  : 
; 704  :     if (!initialized)

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR initialized, 0
  0000b	75 0c		 jne	 SHORT $LN12@Py_NewInte

; 705  :         Py_FatalError("Py_NewInterpreter: call Py_Initialize first");

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@OMAIIAMK@Py_NewInterpreter?3?5call?5Py_Initi@
  00014	e8 00 00 00 00	 call	 Py_FatalError
$LN12@Py_NewInte:

; 706  : 
; 707  :     interp = PyInterpreterState_New();

  00019	e8 00 00 00 00	 call	 PyInterpreterState_New
  0001e	48 89 44 24 38	 mov	 QWORD PTR interp$[rsp], rax

; 708  :     if (interp == NULL)

  00023	48 83 7c 24 38
	00		 cmp	 QWORD PTR interp$[rsp], 0
  00029	75 07		 jne	 SHORT $LN11@Py_NewInte

; 709  :         return NULL;

  0002b	33 c0		 xor	 eax, eax
  0002d	e9 12 02 00 00	 jmp	 $LN13@Py_NewInte
$LN11@Py_NewInte:

; 710  : 
; 711  :     tstate = PyThreadState_New(interp);

  00032	48 8b 4c 24 38	 mov	 rcx, QWORD PTR interp$[rsp]
  00037	e8 00 00 00 00	 call	 PyThreadState_New
  0003c	48 89 44 24 30	 mov	 QWORD PTR tstate$[rsp], rax

; 712  :     if (tstate == NULL) {

  00041	48 83 7c 24 30
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  00047	75 11		 jne	 SHORT $LN10@Py_NewInte

; 713  :         PyInterpreterState_Delete(interp);

  00049	48 8b 4c 24 38	 mov	 rcx, QWORD PTR interp$[rsp]
  0004e	e8 00 00 00 00	 call	 PyInterpreterState_Delete

; 714  :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	e9 ea 01 00 00	 jmp	 $LN13@Py_NewInte
$LN10@Py_NewInte:

; 715  :     }
; 716  : 
; 717  :     save_tstate = PyThreadState_Swap(tstate);

  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tstate$[rsp]
  0005f	e8 00 00 00 00	 call	 PyThreadState_Swap
  00064	48 89 44 24 28	 mov	 QWORD PTR save_tstate$[rsp], rax

; 718  : 
; 719  :     /* XXX The following is lax in error checking */
; 720  : 
; 721  :     interp->modules = PyDict_New();

  00069	e8 00 00 00 00	 call	 PyDict_New
  0006e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR interp$[rsp]
  00073	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 722  : 
; 723  :     bimod = _PyImport_FindBuiltin("builtins");

  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  0007e	e8 00 00 00 00	 call	 _PyImport_FindBuiltin
  00083	48 89 44 24 40	 mov	 QWORD PTR bimod$[rsp], rax

; 724  :     if (bimod != NULL) {

  00088	48 83 7c 24 40
	00		 cmp	 QWORD PTR bimod$[rsp], 0
  0008e	74 32		 je	 SHORT $LN9@Py_NewInte

; 725  :         interp->builtins = PyModule_GetDict(bimod);

  00090	48 8b 4c 24 40	 mov	 rcx, QWORD PTR bimod$[rsp]
  00095	e8 00 00 00 00	 call	 PyModule_GetDict
  0009a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR interp$[rsp]
  0009f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 726  :         if (interp->builtins == NULL)

  000a3	48 8b 44 24 38	 mov	 rax, QWORD PTR interp$[rsp]
  000a8	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  000ad	75 05		 jne	 SHORT $LN8@Py_NewInte

; 727  :             goto handle_error;

  000af	e9 5f 01 00 00	 jmp	 $handle_error$122345
$LN8@Py_NewInte:

; 728  :         Py_INCREF(interp->builtins);

  000b4	48 8b 44 24 38	 mov	 rax, QWORD PTR interp$[rsp]
  000b9	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  000bd	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@Py_NewInte:

; 729  :     }
; 730  : 
; 731  :     /* initialize builtin exceptions */
; 732  :     _PyExc_Init(bimod);

  000c2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR bimod$[rsp]
  000c7	e8 00 00 00 00	 call	 _PyExc_Init

; 733  : 
; 734  :     sysmod = _PyImport_FindBuiltin("sys");

  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  000d3	e8 00 00 00 00	 call	 _PyImport_FindBuiltin
  000d8	48 89 44 24 20	 mov	 QWORD PTR sysmod$[rsp], rax

; 735  :     if (bimod != NULL && sysmod != NULL) {

  000dd	48 83 7c 24 40
	00		 cmp	 QWORD PTR bimod$[rsp], 0
  000e3	0f 84 19 01 00
	00		 je	 $LN7@Py_NewInte
  000e9	48 83 7c 24 20
	00		 cmp	 QWORD PTR sysmod$[rsp], 0
  000ef	0f 84 0d 01 00
	00		 je	 $LN7@Py_NewInte

; 736  :         PyObject *pstderr;
; 737  : 
; 738  :         interp->sysdict = PyModule_GetDict(sysmod);

  000f5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sysmod$[rsp]
  000fa	e8 00 00 00 00	 call	 PyModule_GetDict
  000ff	48 8b 4c 24 38	 mov	 rcx, QWORD PTR interp$[rsp]
  00104	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 739  :         if (interp->sysdict == NULL)

  00108	48 8b 44 24 38	 mov	 rax, QWORD PTR interp$[rsp]
  0010d	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00112	75 05		 jne	 SHORT $LN6@Py_NewInte

; 740  :             goto handle_error;

  00114	e9 fa 00 00 00	 jmp	 $handle_error$122345
$LN6@Py_NewInte:

; 741  :         Py_INCREF(interp->sysdict);

  00119	48 8b 44 24 38	 mov	 rax, QWORD PTR interp$[rsp]
  0011e	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00122	e8 00 00 00 00	 call	 _Py_IncRef

; 742  :         PySys_SetPath(Py_GetPath());

  00127	e8 00 00 00 00	 call	 Py_GetPath
  0012c	48 8b c8	 mov	 rcx, rax
  0012f	e8 00 00 00 00	 call	 PySys_SetPath

; 743  :         PyDict_SetItemString(interp->sysdict, "modules",
; 744  :                              interp->modules);

  00134	48 8b 44 24 38	 mov	 rax, QWORD PTR interp$[rsp]
  00139	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
  0013d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DFGEOAEG@modules?$AA@
  00144	48 8b 44 24 38	 mov	 rax, QWORD PTR interp$[rsp]
  00149	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0014d	e8 00 00 00 00	 call	 PyDict_SetItemString

; 745  :         /* Set up a preliminary stderr printer until we have enough
; 746  :            infrastructure for the io module in place. */
; 747  :         pstderr = PyFile_NewStdPrinter(fileno(stderr));

  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00158	48 83 c0 60	 add	 rax, 96			; 00000060H
  0015c	48 8b c8	 mov	 rcx, rax
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00165	8b c8		 mov	 ecx, eax
  00167	e8 00 00 00 00	 call	 PyFile_NewStdPrinter
  0016c	48 89 44 24 48	 mov	 QWORD PTR pstderr$122350[rsp], rax

; 748  :         if (pstderr == NULL)

  00171	48 83 7c 24 48
	00		 cmp	 QWORD PTR pstderr$122350[rsp], 0
  00177	75 0c		 jne	 SHORT $LN5@Py_NewInte

; 749  :             Py_FatalError("Py_Initialize: can't set preliminary stderr");

  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@PBJGLECD@Py_Initialize?3?5can?8t?5set?5prelimi@
  00180	e8 00 00 00 00	 call	 Py_FatalError
$LN5@Py_NewInte:

; 750  :         PySys_SetObject("stderr", pstderr);

  00185	48 8b 54 24 48	 mov	 rdx, QWORD PTR pstderr$122350[rsp]
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00191	e8 00 00 00 00	 call	 PySys_SetObject

; 751  :         PySys_SetObject("__stderr__", pstderr);

  00196	48 8b 54 24 48	 mov	 rdx, QWORD PTR pstderr$122350[rsp]
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OJDCNPPP@__stderr__?$AA@
  001a2	e8 00 00 00 00	 call	 PySys_SetObject

; 752  :         Py_DECREF(pstderr);

  001a7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pstderr$122350[rsp]
  001ac	e8 00 00 00 00	 call	 _Py_DecRef

; 753  : 
; 754  :         _PyImportHooks_Init();

  001b1	e8 00 00 00 00	 call	 _PyImportHooks_Init

; 755  : 
; 756  :         import_init(interp, sysmod);

  001b6	48 8b 54 24 20	 mov	 rdx, QWORD PTR sysmod$[rsp]
  001bb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR interp$[rsp]
  001c0	e8 00 00 00 00	 call	 import_init

; 757  : 
; 758  :         if (initfsencoding(interp) < 0)

  001c5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR interp$[rsp]
  001ca	e8 00 00 00 00	 call	 initfsencoding
  001cf	85 c0		 test	 eax, eax
  001d1	7d 02		 jge	 SHORT $LN4@Py_NewInte

; 759  :             goto handle_error;

  001d3	eb 3e		 jmp	 SHORT $handle_error$122345
$LN4@Py_NewInte:

; 760  : 
; 761  :         if (initstdio() < 0)

  001d5	e8 00 00 00 00	 call	 initstdio
  001da	85 c0		 test	 eax, eax
  001dc	7d 0c		 jge	 SHORT $LN3@Py_NewInte

; 762  :             Py_FatalError(
; 763  :             "Py_Initialize: can't initialize sys standard streams");

  001de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DF@BMECFJNN@Py_Initialize?3?5can?8t?5initialize?5@
  001e5	e8 00 00 00 00	 call	 Py_FatalError
$LN3@Py_NewInte:

; 764  :         initmain(interp);

  001ea	48 8b 4c 24 38	 mov	 rcx, QWORD PTR interp$[rsp]
  001ef	e8 00 00 00 00	 call	 initmain

; 765  :         if (!Py_NoSiteFlag)

  001f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_NoSiteFlag, 0
  001fb	75 05		 jne	 SHORT $LN2@Py_NewInte

; 766  :             initsite();

  001fd	e8 00 00 00 00	 call	 initsite
$LN2@Py_NewInte:
$LN7@Py_NewInte:

; 767  :     }
; 768  : 
; 769  :     if (!PyErr_Occurred())

  00202	e8 00 00 00 00	 call	 PyErr_Occurred
  00207	48 85 c0	 test	 rax, rax
  0020a	75 07		 jne	 SHORT $LN1@Py_NewInte

; 770  :         return tstate;

  0020c	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  00211	eb 31		 jmp	 SHORT $LN13@Py_NewInte
$LN1@Py_NewInte:
$handle_error$122345:

; 771  : 
; 772  : handle_error:
; 773  :     /* Oops, it didn't work.  Undo it all. */
; 774  : 
; 775  :     PyErr_PrintEx(0);

  00213	33 c9		 xor	 ecx, ecx
  00215	e8 00 00 00 00	 call	 PyErr_PrintEx

; 776  :     PyThreadState_Clear(tstate);

  0021a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tstate$[rsp]
  0021f	e8 00 00 00 00	 call	 PyThreadState_Clear

; 777  :     PyThreadState_Swap(save_tstate);

  00224	48 8b 4c 24 28	 mov	 rcx, QWORD PTR save_tstate$[rsp]
  00229	e8 00 00 00 00	 call	 PyThreadState_Swap

; 778  :     PyThreadState_Delete(tstate);

  0022e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tstate$[rsp]
  00233	e8 00 00 00 00	 call	 PyThreadState_Delete

; 779  :     PyInterpreterState_Delete(interp);

  00238	48 8b 4c 24 38	 mov	 rcx, QWORD PTR interp$[rsp]
  0023d	e8 00 00 00 00	 call	 PyInterpreterState_Delete

; 780  : 
; 781  :     return NULL;

  00242	33 c0		 xor	 eax, eax
$LN13@Py_NewInte:

; 782  : }

  00244	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00248	c3		 ret	 0
Py_NewInterpreter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@BMJGACPI@Py_EndInterpreter?3?5not?5the?5last?5@ ; `string'
PUBLIC	??_C@_0CM@JEDPKMPD@Py_EndInterpreter?3?5thread?5still?5@ ; `string'
PUBLIC	??_C@_0CJ@OFMCECPE@Py_EndInterpreter?3?5thread?5is?5not@ ; `string'
PUBLIC	Py_EndInterpreter
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_EndInterpreter DD imagerel $LN7
	DD	imagerel $LN7+147
	DD	imagerel $unwind$Py_EndInterpreter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_EndInterpreter DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CH@BMJGACPI@Py_EndInterpreter?3?5not?5the?5last?5@
CONST	SEGMENT
??_C@_0CH@BMJGACPI@Py_EndInterpreter?3?5not?5the?5last?5@ DB 'Py_EndInter'
	DB	'preter: not the last thread', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JEDPKMPD@Py_EndInterpreter?3?5thread?5still?5@
CONST	SEGMENT
??_C@_0CM@JEDPKMPD@Py_EndInterpreter?3?5thread?5still?5@ DB 'Py_EndInterp'
	DB	'reter: thread still has a frame', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OFMCECPE@Py_EndInterpreter?3?5thread?5is?5not@
CONST	SEGMENT
??_C@_0CJ@OFMCECPE@Py_EndInterpreter?3?5thread?5is?5not@ DB 'Py_EndInterp'
	DB	'reter: thread is not current', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Py_EndInterpreter
_TEXT	SEGMENT
interp$ = 32
tstate$ = 64
Py_EndInterpreter PROC					; COMDAT

; 798  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 799  :     PyInterpreterState *interp = tstate->interp;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  0000e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00012	48 89 44 24 20	 mov	 QWORD PTR interp$[rsp], rax

; 800  : 
; 801  :     if (tstate != PyThreadState_GET())

  00017	e8 00 00 00 00	 call	 PyThreadState_Get
  0001c	48 39 44 24 40	 cmp	 QWORD PTR tstate$[rsp], rax
  00021	74 0c		 je	 SHORT $LN4@Py_EndInte

; 802  :         Py_FatalError("Py_EndInterpreter: thread is not current");

  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@OFMCECPE@Py_EndInterpreter?3?5thread?5is?5not@
  0002a	e8 00 00 00 00	 call	 Py_FatalError
$LN4@Py_EndInte:

; 803  :     if (tstate->frame != NULL)

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  00034	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00039	74 0c		 je	 SHORT $LN3@Py_EndInte

; 804  :         Py_FatalError("Py_EndInterpreter: thread still has a frame");

  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@JEDPKMPD@Py_EndInterpreter?3?5thread?5still?5@
  00042	e8 00 00 00 00	 call	 Py_FatalError
$LN3@Py_EndInte:

; 805  :     if (tstate != interp->tstate_head || tstate->next != NULL)

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  0004c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00050	48 39 44 24 40	 cmp	 QWORD PTR tstate$[rsp], rax
  00055	75 0b		 jne	 SHORT $LN1@Py_EndInte
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  0005c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00060	74 0c		 je	 SHORT $LN2@Py_EndInte
$LN1@Py_EndInte:

; 806  :         Py_FatalError("Py_EndInterpreter: not the last thread");

  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@BMJGACPI@Py_EndInterpreter?3?5not?5the?5last?5@
  00069	e8 00 00 00 00	 call	 Py_FatalError
$LN2@Py_EndInte:

; 807  : 
; 808  :     PyImport_Cleanup();

  0006e	e8 00 00 00 00	 call	 PyImport_Cleanup

; 809  :     PyInterpreterState_Clear(interp);

  00073	48 8b 4c 24 20	 mov	 rcx, QWORD PTR interp$[rsp]
  00078	e8 00 00 00 00	 call	 PyInterpreterState_Clear

; 810  :     PyThreadState_Swap(NULL);

  0007d	33 c9		 xor	 ecx, ecx
  0007f	e8 00 00 00 00	 call	 PyThreadState_Swap

; 811  :     PyInterpreterState_Delete(interp);

  00084	48 8b 4c 24 20	 mov	 rcx, QWORD PTR interp$[rsp]
  00089	e8 00 00 00 00	 call	 PyInterpreterState_Delete

; 812  : }

  0008e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00092	c3		 ret	 0
Py_EndInterpreter ENDP
_TEXT	ENDS
PUBLIC	Py_SetProgramName
; Function compile flags: /Odtp
;	COMDAT Py_SetProgramName
_TEXT	SEGMENT
pn$ = 8
Py_SetProgramName PROC					; COMDAT

; 822  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 823  :     if (pn && *pn)

  00005	48 83 7c 24 08
	00		 cmp	 QWORD PTR pn$[rsp], 0
  0000b	74 18		 je	 SHORT $LN1@Py_SetProg
  0000d	48 8b 44 24 08	 mov	 rax, QWORD PTR pn$[rsp]
  00012	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $LN1@Py_SetProg

; 824  :         progname = pn;

  00019	48 8b 44 24 08	 mov	 rax, QWORD PTR pn$[rsp]
  0001e	48 89 05 00 00
	00 00		 mov	 QWORD PTR progname, rax
$LN1@Py_SetProg:

; 825  : }

  00025	f3 c3		 fatret	 0
Py_SetProgramName ENDP
_TEXT	ENDS
PUBLIC	Py_GetProgramName
; Function compile flags: /Odtp
;	COMDAT Py_GetProgramName
_TEXT	SEGMENT
Py_GetProgramName PROC					; COMDAT

; 830  :     return progname;

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR progname

; 831  : }

  00007	c3		 ret	 0
Py_GetProgramName ENDP
_TEXT	ENDS
PUBLIC	Py_SetPythonHome
; Function compile flags: /Odtp
;	COMDAT Py_SetPythonHome
_TEXT	SEGMENT
home$ = 8
Py_SetPythonHome PROC					; COMDAT

; 838  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 839  :     default_home = home;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR home$[rsp]
  0000a	48 89 05 00 00
	00 00		 mov	 QWORD PTR default_home, rax

; 840  : }

  00011	c3		 ret	 0
Py_SetPythonHome ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@KFKIGHCL@PYTHONHOME?$AA@		; `string'
PUBLIC	Py_GetPythonHome
EXTRN	__imp_mbstowcs:PROC
_BSS	SEGMENT
env_home DW	0101H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_GetPythonHome DD imagerel $LN8
	DD	imagerel $LN8+172
	DD	imagerel $unwind$Py_GetPythonHome
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_GetPythonHome DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_0L@KFKIGHCL@PYTHONHOME?$AA@
CONST	SEGMENT
??_C@_0L@KFKIGHCL@PYTHONHOME?$AA@ DB 'PYTHONHOME', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Py_GetPythonHome
_TEXT	SEGMENT
home$ = 32
chome$122395 = 40
size$122399 = 48
r$122400 = 56
tv69 = 64
Py_GetPythonHome PROC					; COMDAT

; 844  : {

$LN8:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 845  :     wchar_t *home = default_home;

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR default_home
  0000b	48 89 44 24 20	 mov	 QWORD PTR home$[rsp], rax

; 846  :     if (home == NULL && !Py_IgnoreEnvironmentFlag) {

  00010	48 83 7c 24 20
	00		 cmp	 QWORD PTR home$[rsp], 0
  00016	0f 85 86 00 00
	00		 jne	 $LN3@Py_GetPyth
  0001c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  00023	75 7d		 jne	 SHORT $LN3@Py_GetPyth

; 847  :         char* chome = Py_GETENV("PYTHONHOME");

  00025	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  0002c	74 0b		 je	 SHORT $LN6@Py_GetPyth
  0002e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv69[rsp], 0
  00037	eb 12		 jmp	 SHORT $LN7@Py_GetPyth
$LN6@Py_GetPyth:
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@KFKIGHCL@PYTHONHOME?$AA@
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  00046	48 89 44 24 40	 mov	 QWORD PTR tv69[rsp], rax
$LN7@Py_GetPyth:
  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR tv69[rsp]
  00050	48 89 44 24 28	 mov	 QWORD PTR chome$122395[rsp], rax

; 848  :         if (chome) {

  00055	48 83 7c 24 28
	00		 cmp	 QWORD PTR chome$122395[rsp], 0
  0005b	74 45		 je	 SHORT $LN2@Py_GetPyth

; 849  :             size_t size = Py_ARRAY_LENGTH(env_home);

  0005d	48 c7 44 24 30
	01 01 00 00	 mov	 QWORD PTR size$122399[rsp], 257 ; 00000101H

; 850  :             size_t r = mbstowcs(env_home, chome, size);

  00066	4c 8b 44 24 30	 mov	 r8, QWORD PTR size$122399[rsp]
  0006b	48 8b 54 24 28	 mov	 rdx, QWORD PTR chome$122395[rsp]
  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:env_home
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_mbstowcs
  0007d	48 89 44 24 38	 mov	 QWORD PTR r$122400[rsp], rax

; 851  :             if (r != (size_t)-1 && r < size)

  00082	48 83 7c 24 38
	ff		 cmp	 QWORD PTR r$122400[rsp], -1
  00088	74 18		 je	 SHORT $LN1@Py_GetPyth
  0008a	48 8b 44 24 30	 mov	 rax, QWORD PTR size$122399[rsp]
  0008f	48 39 44 24 38	 cmp	 QWORD PTR r$122400[rsp], rax
  00094	73 0c		 jae	 SHORT $LN1@Py_GetPyth

; 852  :                 home = env_home;

  00096	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:env_home
  0009d	48 89 44 24 20	 mov	 QWORD PTR home$[rsp], rax
$LN1@Py_GetPyth:
$LN2@Py_GetPyth:
$LN3@Py_GetPyth:

; 853  :         }
; 854  : 
; 855  :     }
; 856  :     return home;

  000a2	48 8b 44 24 20	 mov	 rax, QWORD PTR home$[rsp]

; 857  : }

  000a7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ab	c3		 ret	 0
Py_GetPythonHome ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@NHBIPDPB@Failed?5to?5initialize?5__main__?4__@ ; `string'
PUBLIC	??_C@_0CD@OJEPFHEH@Failed?5to?5retrieve?5BuiltinImport@ ; `string'
PUBLIC	??_C@_0BA@OCDHMNGE@BuiltinImporter?$AA@		; `string'
PUBLIC	??_C@_0L@PADOMILC@__loader__?$AA@		; `string'
PUBLIC	??_C@_0CL@KHAKOLEM@Failed?5to?5initialize?5__main__?4__@ ; `string'
PUBLIC	??_C@_0CD@KMLAPGBK@Failed?5to?5retrieve?5builtins?5modu@ ; `string'
PUBLIC	??_C@_0N@MNFFDJII@__builtins__?$AA@		; `string'
PUBLIC	??_C@_0BN@MDHCIOAB@can?8t?5create?5__main__?5module?$AA@ ; `string'
PUBLIC	??_C@_08EMKMIFM@__main__?$AA@			; `string'
EXTRN	PyDict_GetItemString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$initmain DD imagerel initmain
	DD	imagerel initmain+289
	DD	imagerel $unwind$initmain
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initmain DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0CJ@NHBIPDPB@Failed?5to?5initialize?5__main__?4__@
CONST	SEGMENT
??_C@_0CJ@NHBIPDPB@Failed?5to?5initialize?5__main__?4__@ DB 'Failed to in'
	DB	'itialize __main__.__loader__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OJEPFHEH@Failed?5to?5retrieve?5BuiltinImport@
CONST	SEGMENT
??_C@_0CD@OJEPFHEH@Failed?5to?5retrieve?5BuiltinImport@ DB 'Failed to ret'
	DB	'rieve BuiltinImporter', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OCDHMNGE@BuiltinImporter?$AA@
CONST	SEGMENT
??_C@_0BA@OCDHMNGE@BuiltinImporter?$AA@ DB 'BuiltinImporter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PADOMILC@__loader__?$AA@
CONST	SEGMENT
??_C@_0L@PADOMILC@__loader__?$AA@ DB '__loader__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KHAKOLEM@Failed?5to?5initialize?5__main__?4__@
CONST	SEGMENT
??_C@_0CL@KHAKOLEM@Failed?5to?5initialize?5__main__?4__@ DB 'Failed to in'
	DB	'itialize __main__.__builtins__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KMLAPGBK@Failed?5to?5retrieve?5builtins?5modu@
CONST	SEGMENT
??_C@_0CD@KMLAPGBK@Failed?5to?5retrieve?5builtins?5modu@ DB 'Failed to re'
	DB	'trieve builtins module', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__?$AA@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__?$AA@ DB '__builtins__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MDHCIOAB@can?8t?5create?5__main__?5module?$AA@
CONST	SEGMENT
??_C@_0BN@MDHCIOAB@can?8t?5create?5__main__?5module?$AA@ DB 'can''t creat'
	DB	'e __main__ module', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMKMIFM@__main__?$AA@
CONST	SEGMENT
??_C@_08EMKMIFM@__main__?$AA@ DB '__main__', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT initmain
_TEXT	SEGMENT
d$ = 32
m$ = 40
bimod$122415 = 48
loader$122425 = 56
interp$ = 80
initmain PROC						; COMDAT

; 863  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 864  :     PyObject *m, *d;
; 865  :     m = PyImport_AddModule("__main__");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00010	e8 00 00 00 00	 call	 PyImport_AddModule
  00015	48 89 44 24 28	 mov	 QWORD PTR m$[rsp], rax

; 866  :     if (m == NULL)

  0001a	48 83 7c 24 28
	00		 cmp	 QWORD PTR m$[rsp], 0
  00020	75 0c		 jne	 SHORT $LN7@initmain

; 867  :         Py_FatalError("can't create __main__ module");

  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@MDHCIOAB@can?8t?5create?5__main__?5module?$AA@
  00029	e8 00 00 00 00	 call	 Py_FatalError
$LN7@initmain:

; 868  :     d = PyModule_GetDict(m);

  0002e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00033	e8 00 00 00 00	 call	 PyModule_GetDict
  00038	48 89 44 24 20	 mov	 QWORD PTR d$[rsp], rax

; 869  :     if (PyDict_GetItemString(d, "__builtins__") == NULL) {

  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00044	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00049	e8 00 00 00 00	 call	 PyDict_GetItemString
  0004e	48 85 c0	 test	 rax, rax
  00051	75 55		 jne	 SHORT $LN6@initmain

; 870  :         PyObject *bimod = PyImport_ImportModule("builtins");

  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  0005a	e8 00 00 00 00	 call	 PyImport_ImportModule
  0005f	48 89 44 24 30	 mov	 QWORD PTR bimod$122415[rsp], rax

; 871  :         if (bimod == NULL) {

  00064	48 83 7c 24 30
	00		 cmp	 QWORD PTR bimod$122415[rsp], 0
  0006a	75 0c		 jne	 SHORT $LN5@initmain

; 872  :             Py_FatalError("Failed to retrieve builtins module");

  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@KMLAPGBK@Failed?5to?5retrieve?5builtins?5modu@
  00073	e8 00 00 00 00	 call	 Py_FatalError
$LN5@initmain:

; 873  :         }
; 874  :         if (PyDict_SetItemString(d, "__builtins__", bimod) < 0) {

  00078	4c 8b 44 24 30	 mov	 r8, QWORD PTR bimod$122415[rsp]
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00084	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00089	e8 00 00 00 00	 call	 PyDict_SetItemString
  0008e	85 c0		 test	 eax, eax
  00090	7d 0c		 jge	 SHORT $LN4@initmain

; 875  :             Py_FatalError("Failed to initialize __main__.__builtins__");

  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@KHAKOLEM@Failed?5to?5initialize?5__main__?4__@
  00099	e8 00 00 00 00	 call	 Py_FatalError
$LN4@initmain:

; 876  :         }
; 877  :         Py_DECREF(bimod);

  0009e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bimod$122415[rsp]
  000a3	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@initmain:

; 878  :     }
; 879  :     /* Main is a little special - imp.is_builtin("__main__") will return
; 880  :      * False, but BuiltinImporter is still the most appropriate initial
; 881  :      * setting for its __loader__ attribute. A more suitable value will
; 882  :      * be set if __main__ gets further initialized later in the startup
; 883  :      * process.
; 884  :      */
; 885  :     if (PyDict_GetItemString(d, "__loader__") == NULL) {

  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PADOMILC@__loader__?$AA@
  000af	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  000b4	e8 00 00 00 00	 call	 PyDict_GetItemString
  000b9	48 85 c0	 test	 rax, rax
  000bc	75 5e		 jne	 SHORT $LN3@initmain

; 886  :         PyObject *loader = PyObject_GetAttrString(interp->importlib,
; 887  :                                                   "BuiltinImporter");

  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@OCDHMNGE@BuiltinImporter?$AA@
  000c5	48 8b 44 24 50	 mov	 rax, QWORD PTR interp$[rsp]
  000ca	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  000ce	e8 00 00 00 00	 call	 PyObject_GetAttrString
  000d3	48 89 44 24 38	 mov	 QWORD PTR loader$122425[rsp], rax

; 888  :         if (loader == NULL) {

  000d8	48 83 7c 24 38
	00		 cmp	 QWORD PTR loader$122425[rsp], 0
  000de	75 0c		 jne	 SHORT $LN2@initmain

; 889  :             Py_FatalError("Failed to retrieve BuiltinImporter");

  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@OJEPFHEH@Failed?5to?5retrieve?5BuiltinImport@
  000e7	e8 00 00 00 00	 call	 Py_FatalError
$LN2@initmain:

; 890  :         }
; 891  :         if (PyDict_SetItemString(d, "__loader__", loader) < 0) {

  000ec	4c 8b 44 24 38	 mov	 r8, QWORD PTR loader$122425[rsp]
  000f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PADOMILC@__loader__?$AA@
  000f8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  000fd	e8 00 00 00 00	 call	 PyDict_SetItemString
  00102	85 c0		 test	 eax, eax
  00104	7d 0c		 jge	 SHORT $LN1@initmain

; 892  :             Py_FatalError("Failed to initialize __main__.__loader__");

  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@NHBIPDPB@Failed?5to?5initialize?5__main__?4__@
  0010d	e8 00 00 00 00	 call	 Py_FatalError
$LN1@initmain:

; 893  :         }
; 894  :         Py_DECREF(loader);

  00112	48 8b 4c 24 38	 mov	 rcx, QWORD PTR loader$122425[rsp]
  00117	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@initmain:

; 895  :     }
; 896  : }

  0011c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00120	c3		 ret	 0
initmain ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@FEOCANB@Py_Initialize?3?5Unable?5to?5get?5the@ ; `string'
EXTRN	_PyCodec_Lookup:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$initfsencoding DD imagerel initfsencoding
	DD	imagerel initfsencoding+140
	DD	imagerel $unwind$initfsencoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initfsencoding DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0DB@FEOCANB@Py_Initialize?3?5Unable?5to?5get?5the@
CONST	SEGMENT
??_C@_0DB@FEOCANB@Py_Initialize?3?5Unable?5to?5get?5the@ DB 'Py_Initializ'
	DB	'e: Unable to get the locale encoding', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT initfsencoding
_TEXT	SEGMENT
codec$ = 32
interp$ = 64
initfsencoding PROC					; COMDAT

; 900  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 901  :     PyObject *codec;
; 902  : 
; 903  :     if (Py_FileSystemDefaultEncoding == NULL)

  00009	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Py_FileSystemDefaultEncoding, 0
  00011	75 3c		 jne	 SHORT $LN3@initfsenco

; 904  :     {
; 905  :         Py_FileSystemDefaultEncoding = get_locale_encoding();

  00013	e8 00 00 00 00	 call	 get_locale_encoding
  00018	48 89 05 00 00
	00 00		 mov	 QWORD PTR Py_FileSystemDefaultEncoding, rax

; 906  :         if (Py_FileSystemDefaultEncoding == NULL)

  0001f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Py_FileSystemDefaultEncoding, 0
  00027	75 0c		 jne	 SHORT $LN2@initfsenco

; 907  :             Py_FatalError("Py_Initialize: Unable to get the locale encoding");

  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@FEOCANB@Py_Initialize?3?5Unable?5to?5get?5the@
  00030	e8 00 00 00 00	 call	 Py_FatalError
$LN2@initfsenco:

; 908  : 
; 909  :         Py_HasFileSystemDefaultEncoding = 0;

  00035	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR Py_HasFileSystemDefaultEncoding, 0

; 910  :         interp->fscodec_initialized = 1;

  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  00044	c7 40 54 01 00
	00 00		 mov	 DWORD PTR [rax+84], 1

; 911  :         return 0;

  0004b	33 c0		 xor	 eax, eax
  0004d	eb 38		 jmp	 SHORT $LN4@initfsenco
$LN3@initfsenco:

; 912  :     }
; 913  : 
; 914  :     /* the encoding is mbcs, utf-8 or ascii */
; 915  :     codec = _PyCodec_Lookup(Py_FileSystemDefaultEncoding);

  0004f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR Py_FileSystemDefaultEncoding
  00056	e8 00 00 00 00	 call	 _PyCodec_Lookup
  0005b	48 89 44 24 20	 mov	 QWORD PTR codec$[rsp], rax

; 916  :     if (!codec) {

  00060	48 83 7c 24 20
	00		 cmp	 QWORD PTR codec$[rsp], 0
  00066	75 07		 jne	 SHORT $LN1@initfsenco

; 917  :         /* Such error can only occurs in critical situations: no more
; 918  :          * memory, import a module of the standard library failed,
; 919  :          * etc. */
; 920  :         return -1;

  00068	b8 ff ff ff ff	 mov	 eax, -1
  0006d	eb 18		 jmp	 SHORT $LN4@initfsenco
$LN1@initfsenco:

; 921  :     }
; 922  :     Py_DECREF(codec);

  0006f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR codec$[rsp]
  00074	e8 00 00 00 00	 call	 _Py_DecRef

; 923  :     interp->fscodec_initialized = 1;

  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  0007e	c7 40 54 01 00
	00 00		 mov	 DWORD PTR [rax+84], 1

; 924  :     return 0;

  00085	33 c0		 xor	 eax, eax
$LN4@initfsenco:

; 925  : }

  00087	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008b	c3		 ret	 0
initfsencoding ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LDGHIPEL@cp?$CFd?$AA@			; `string'
EXTRN	PyOS_snprintf:PROC
EXTRN	__imp_GetACP:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_locale_encoding DD imagerel get_locale_encoding
	DD	imagerel get_locale_encoding+56
	DD	imagerel $unwind$get_locale_encoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_locale_encoding DD 020701H
	DD	0130107H
xdata	ENDS
;	COMDAT ??_C@_04LDGHIPEL@cp?$CFd?$AA@
CONST	SEGMENT
??_C@_04LDGHIPEL@cp?$CFd?$AA@ DB 'cp%d', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_locale_encoding
_TEXT	SEGMENT
codepage$ = 32
get_locale_encoding PROC				; COMDAT

; 179  : {

  00000	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 180  : #ifdef MS_WINDOWS
; 181  :     char codepage[100];
; 182  :     PyOS_snprintf(codepage, sizeof(codepage), "cp%d", GetACP());

  00007	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetACP
  0000d	44 8b c8	 mov	 r9d, eax
  00010	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04LDGHIPEL@cp?$CFd?$AA@
  00017	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  0001c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR codepage$[rsp]
  00021	e8 00 00 00 00	 call	 PyOS_snprintf

; 183  :     return get_codec_name(codepage);

  00026	48 8d 4c 24 20	 lea	 rcx, QWORD PTR codepage$[rsp]
  0002b	e8 00 00 00 00	 call	 get_codec_name

; 184  : #elif defined(HAVE_LANGINFO_H) && defined(CODESET)
; 185  :     char* codeset = nl_langinfo(CODESET);
; 186  :     if (!codeset || codeset[0] == '\0') {
; 187  :         PyErr_SetString(PyExc_ValueError, "CODESET is not set or empty");
; 188  :         return NULL;
; 189  :     }
; 190  :     return get_codec_name(codeset);
; 191  : #else
; 192  :     PyErr_SetNone(PyExc_NotImplementedError);
; 193  :     return NULL;
; 194  : #endif
; 195  : }

  00030	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00037	c3		 ret	 0
get_locale_encoding ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@HAKCHPI@get_codec_name?$AA@		; `string'
PUBLIC	??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@ ; `string'
EXTRN	PyErr_NoMemory:PROC
EXTRN	__imp_strdup:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	_PyObject_GetAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_codec_name DD imagerel get_codec_name
	DD	imagerel get_codec_name+315
	DD	imagerel $unwind$get_codec_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_codec_name DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0P@HAKCHPI@get_codec_name?$AA@
CONST	SEGMENT
??_C@_0P@HAKCHPI@get_codec_name?$AA@ DB 'get_codec_name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
CONST	SEGMENT
??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@ DB '..\Python\pythonru'
	DB	'n.c', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_codec_name
_TEXT	SEGMENT
codec$ = 48
name$ = 56
name_str$ = 64
name_utf8$ = 72
_py_tmp$122102 = 80
encoding$ = 112
get_codec_name PROC					; COMDAT

; 146  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 147  :     char *name_utf8, *name_str;
; 148  :     PyObject *codec, *name = NULL;

  00009	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR name$[rsp], 0

; 149  :     _Py_IDENTIFIER(name);
; 150  : 
; 151  :     codec = _PyCodec_Lookup(encoding);

  00012	48 8b 4c 24 70	 mov	 rcx, QWORD PTR encoding$[rsp]
  00017	e8 00 00 00 00	 call	 _PyCodec_Lookup
  0001c	48 89 44 24 30	 mov	 QWORD PTR codec$[rsp], rax

; 152  :     if (!codec)

  00021	48 83 7c 24 30
	00		 cmp	 QWORD PTR codec$[rsp], 0
  00027	75 05		 jne	 SHORT $LN16@get_codec_

; 153  :         goto error;

  00029	e9 d6 00 00 00	 jmp	 $error$122095
$LN16@get_codec_:

; 154  : 
; 155  :     name = _PyObject_GetAttrId(codec, &PyId_name);

  0002e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_name@?1??get_codec_name@@9@9
  00033	8b c0		 mov	 eax, eax
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00044	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00048	48 8b d0	 mov	 rdx, rax
  0004b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR codec$[rsp]
  00050	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00055	48 89 44 24 38	 mov	 QWORD PTR name$[rsp], rax
$LN15@get_codec_:

; 156  :     Py_CLEAR(codec);

  0005a	48 83 7c 24 30
	00		 cmp	 QWORD PTR codec$[rsp], 0
  00060	74 47		 je	 SHORT $LN12@get_codec_
  00062	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006a	4c 8b 4c 24 30	 mov	 r9, QWORD PTR codec$[rsp]
  0006f	41 b8 9c 00 00
	00		 mov	 r8d, 156		; 0000009cH
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@HAKCHPI@get_codec_name?$AA@
  00083	e8 00 00 00 00	 call	 _PyParallel_Guard
  00088	85 c0		 test	 eax, eax
  0008a	75 1d		 jne	 SHORT $LN12@get_codec_
  0008c	48 8b 44 24 30	 mov	 rax, QWORD PTR codec$[rsp]
  00091	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$122102[rsp], rax
  00096	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR codec$[rsp], 0
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$122102[rsp]
  000a4	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@get_codec_:
  000a9	33 c0		 xor	 eax, eax
  000ab	85 c0		 test	 eax, eax
  000ad	75 ab		 jne	 SHORT $LN15@get_codec_

; 157  :     if (!name)

  000af	48 83 7c 24 38
	00		 cmp	 QWORD PTR name$[rsp], 0
  000b5	75 02		 jne	 SHORT $LN11@get_codec_

; 158  :         goto error;

  000b7	eb 4b		 jmp	 SHORT $error$122095
$LN11@get_codec_:

; 159  : 
; 160  :     name_utf8 = _PyUnicode_AsString(name);

  000b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR name$[rsp]
  000be	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  000c3	48 89 44 24 48	 mov	 QWORD PTR name_utf8$[rsp], rax

; 161  :     if (name_utf8 == NULL)

  000c8	48 83 7c 24 48
	00		 cmp	 QWORD PTR name_utf8$[rsp], 0
  000ce	75 02		 jne	 SHORT $LN10@get_codec_

; 162  :         goto error;

  000d0	eb 32		 jmp	 SHORT $error$122095
$LN10@get_codec_:

; 163  :     name_str = strdup(name_utf8);

  000d2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name_utf8$[rsp]
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000dd	48 89 44 24 40	 mov	 QWORD PTR name_str$[rsp], rax

; 164  :     Py_DECREF(name);

  000e2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR name$[rsp]
  000e7	e8 00 00 00 00	 call	 _Py_DecRef

; 165  :     if (name_str == NULL) {

  000ec	48 83 7c 24 40
	00		 cmp	 QWORD PTR name_str$[rsp], 0
  000f2	75 09		 jne	 SHORT $LN9@get_codec_

; 166  :         PyErr_NoMemory();

  000f4	e8 00 00 00 00	 call	 PyErr_NoMemory

; 167  :         return NULL;

  000f9	33 c0		 xor	 eax, eax
  000fb	eb 39		 jmp	 SHORT $LN17@get_codec_
$LN9@get_codec_:

; 168  :     }
; 169  :     return name_str;

  000fd	48 8b 44 24 40	 mov	 rax, QWORD PTR name_str$[rsp]
  00102	eb 32		 jmp	 SHORT $LN17@get_codec_
$error$122095:
$LN8@get_codec_:

; 170  : 
; 171  : error:
; 172  :     Py_XDECREF(codec);

  00104	48 83 7c 24 30
	00		 cmp	 QWORD PTR codec$[rsp], 0
  0010a	74 0a		 je	 SHORT $LN5@get_codec_
  0010c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR codec$[rsp]
  00111	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@get_codec_:
  00116	33 c0		 xor	 eax, eax
  00118	85 c0		 test	 eax, eax
  0011a	75 e8		 jne	 SHORT $LN8@get_codec_
$LN4@get_codec_:

; 173  :     Py_XDECREF(name);

  0011c	48 83 7c 24 38
	00		 cmp	 QWORD PTR name$[rsp], 0
  00122	74 0a		 je	 SHORT $LN1@get_codec_
  00124	48 8b 4c 24 38	 mov	 rcx, QWORD PTR name$[rsp]
  00129	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@get_codec_:
  0012e	33 c0		 xor	 eax, eax
  00130	85 c0		 test	 eax, eax
  00132	75 e8		 jne	 SHORT $LN4@get_codec_

; 174  :     return NULL;

  00134	33 c0		 xor	 eax, eax
$LN17@get_codec_:

; 175  : }

  00136	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0013a	c3		 ret	 0
get_codec_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_04IKPDHFBK@site?$AA@			; `string'
EXTRN	__imp_exit:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$initsite DD imagerel initsite
	DD	imagerel initsite+67
	DD	imagerel $unwind$initsite
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initsite DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_04IKPDHFBK@site?$AA@
CONST	SEGMENT
??_C@_04IKPDHFBK@site?$AA@ DB 'site', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT initsite
_TEXT	SEGMENT
m$ = 32
initsite PROC						; COMDAT

; 931  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 932  :     PyObject *m;
; 933  :     m = PyImport_ImportModule("site");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IKPDHFBK@site?$AA@
  0000b	e8 00 00 00 00	 call	 PyImport_ImportModule
  00010	48 89 44 24 20	 mov	 QWORD PTR m$[rsp], rax

; 934  :     if (m == NULL) {

  00015	48 83 7c 24 20
	00		 cmp	 QWORD PTR m$[rsp], 0
  0001b	75 17		 jne	 SHORT $LN2@initsite

; 935  :         PyErr_Print();

  0001d	e8 00 00 00 00	 call	 PyErr_Print

; 936  :         Py_Finalize();

  00022	e8 00 00 00 00	 call	 Py_Finalize

; 937  :         exit(1);

  00027	b9 01 00 00 00	 mov	 ecx, 1
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit

; 938  :     }
; 939  :     else {

  00032	eb 0a		 jmp	 SHORT $LN1@initsite
$LN2@initsite:

; 940  :         Py_DECREF(m);

  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00039	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@initsite:
$LN4@initsite:

; 941  :     }
; 942  : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
initsite ENDP
_TEXT	ENDS
PUBLIC	??_C@_08PODKMAPJ@?$DMstderr?$DO?$AA@		; `string'
PUBLIC	??_C@_0BB@GGCFDDAA@backslashreplace?$AA@	; `string'
PUBLIC	??_C@_0L@NPOCHPFF@__stdout__?$AA@		; `string'
PUBLIC	??_C@_08CNNAJMFD@?$DMstdout?$DO?$AA@		; `string'
PUBLIC	??_C@_05MHOFLBOO@stdin?$AA@			; `string'
PUBLIC	??_C@_09EFAEFGPG@__stdin__?$AA@			; `string'
PUBLIC	??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@		; `string'
PUBLIC	??_C@_0BB@DDJHNGCM@PYTHONIOENCODING?$AA@	; `string'
PUBLIC	??_C@_0M@LNNEGDCO@OpenWrapper?$AA@		; `string'
PUBLIC	??_C@_02KFNNKBCK@io?$AA@			; `string'
PUBLIC	??_C@_0BC@IIKNEEFE@encodings?4latin_1?$AA@	; `string'
PUBLIC	??_C@_0BA@FFBNEIDG@encodings?4utf_8?$AA@	; `string'
EXTRN	__imp_strchr:PROC
EXTRN	PyObject_SetAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$initstdio DD imagerel initstdio
	DD	imagerel initstdio+1138
	DD	imagerel $unwind$initstdio
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initstdio DD 020701H
	DD	0150107H
xdata	ENDS
;	COMDAT ??_C@_08PODKMAPJ@?$DMstderr?$DO?$AA@
CONST	SEGMENT
??_C@_08PODKMAPJ@?$DMstderr?$DO?$AA@ DB '<stderr>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
CONST	SEGMENT
??_C@_0BB@GGCFDDAA@backslashreplace?$AA@ DB 'backslashreplace', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NPOCHPFF@__stdout__?$AA@
CONST	SEGMENT
??_C@_0L@NPOCHPFF@__stdout__?$AA@ DB '__stdout__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CNNAJMFD@?$DMstdout?$DO?$AA@
CONST	SEGMENT
??_C@_08CNNAJMFD@?$DMstdout?$DO?$AA@ DB '<stdout>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHOFLBOO@stdin?$AA@
CONST	SEGMENT
??_C@_05MHOFLBOO@stdin?$AA@ DB 'stdin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EFAEFGPG@__stdin__?$AA@
CONST	SEGMENT
??_C@_09EFAEFGPG@__stdin__?$AA@ DB '__stdin__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@
CONST	SEGMENT
??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@ DB '<stdin>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DDJHNGCM@PYTHONIOENCODING?$AA@
CONST	SEGMENT
??_C@_0BB@DDJHNGCM@PYTHONIOENCODING?$AA@ DB 'PYTHONIOENCODING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LNNEGDCO@OpenWrapper?$AA@
CONST	SEGMENT
??_C@_0M@LNNEGDCO@OpenWrapper?$AA@ DB 'OpenWrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KFNNKBCK@io?$AA@
CONST	SEGMENT
??_C@_02KFNNKBCK@io?$AA@ DB 'io', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IIKNEEFE@encodings?4latin_1?$AA@
CONST	SEGMENT
??_C@_0BC@IIKNEEFE@encodings?4latin_1?$AA@ DB 'encodings.latin_1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FFBNEIDG@encodings?4utf_8?$AA@
CONST	SEGMENT
??_C@_0BA@FFBNEIDG@encodings?4utf_8?$AA@ DB 'encodings.utf_8', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT initstdio
_TEXT	SEGMENT
std$ = 48
errors$ = 56
encoding_attr$ = 64
encoding$ = 72
wrapper$ = 80
status$ = 88
iomod$ = 96
bimod$ = 104
fd$ = 112
m$ = 120
encoding$122660 = 128
codec_info$122663 = 136
tv92 = 144
initstdio PROC						; COMDAT

; 1060 : {

  00000	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1061 :     PyObject *iomod = NULL, *wrapper;

  00007	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR iomod$[rsp], 0

; 1062 :     PyObject *bimod = NULL;

  00010	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR bimod$[rsp], 0

; 1063 :     PyObject *m;
; 1064 :     PyObject *std = NULL;

  00019	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR std$[rsp], 0

; 1065 :     int status = 0, fd;

  00022	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR status$[rsp], 0

; 1066 :     PyObject * encoding_attr;
; 1067 :     char *encoding = NULL, *errors;

  0002a	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR encoding$[rsp], 0

; 1068 : 
; 1069 :     /* Hack to avoid a nasty recursion issue when Python is invoked
; 1070 :        in verbose mode: pre-import the Latin-1 and UTF-8 codecs */
; 1071 :     if ((m = PyImport_ImportModule("encodings.utf_8")) == NULL) {

  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FFBNEIDG@encodings?4utf_8?$AA@
  0003a	e8 00 00 00 00	 call	 PyImport_ImportModule
  0003f	48 89 44 24 78	 mov	 QWORD PTR m$[rsp], rax
  00044	48 83 7c 24 78
	00		 cmp	 QWORD PTR m$[rsp], 0
  0004a	75 05		 jne	 SHORT $LN33@initstdio

; 1072 :         goto error;

  0004c	e9 ca 03 00 00	 jmp	 $error$122615
$LN33@initstdio:

; 1073 :     }
; 1074 :     Py_DECREF(m);

  00051	48 8b 4c 24 78	 mov	 rcx, QWORD PTR m$[rsp]
  00056	e8 00 00 00 00	 call	 _Py_DecRef

; 1075 : 
; 1076 :     if (!(m = PyImport_ImportModule("encodings.latin_1"))) {

  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@IIKNEEFE@encodings?4latin_1?$AA@
  00062	e8 00 00 00 00	 call	 PyImport_ImportModule
  00067	48 89 44 24 78	 mov	 QWORD PTR m$[rsp], rax
  0006c	48 83 7c 24 78
	00		 cmp	 QWORD PTR m$[rsp], 0
  00072	75 05		 jne	 SHORT $LN32@initstdio

; 1077 :         goto error;

  00074	e9 a2 03 00 00	 jmp	 $error$122615
$LN32@initstdio:

; 1078 :     }
; 1079 :     Py_DECREF(m);

  00079	48 8b 4c 24 78	 mov	 rcx, QWORD PTR m$[rsp]
  0007e	e8 00 00 00 00	 call	 _Py_DecRef

; 1080 : 
; 1081 :     if (!(bimod = PyImport_ImportModule("builtins"))) {

  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  0008a	e8 00 00 00 00	 call	 PyImport_ImportModule
  0008f	48 89 44 24 68	 mov	 QWORD PTR bimod$[rsp], rax
  00094	48 83 7c 24 68
	00		 cmp	 QWORD PTR bimod$[rsp], 0
  0009a	75 05		 jne	 SHORT $LN31@initstdio

; 1082 :         goto error;

  0009c	e9 7a 03 00 00	 jmp	 $error$122615
$LN31@initstdio:

; 1083 :     }
; 1084 : 
; 1085 :     if (!(iomod = PyImport_ImportModule("io"))) {

  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KFNNKBCK@io?$AA@
  000a8	e8 00 00 00 00	 call	 PyImport_ImportModule
  000ad	48 89 44 24 60	 mov	 QWORD PTR iomod$[rsp], rax
  000b2	48 83 7c 24 60
	00		 cmp	 QWORD PTR iomod$[rsp], 0
  000b8	75 05		 jne	 SHORT $LN30@initstdio

; 1086 :         goto error;

  000ba	e9 5c 03 00 00	 jmp	 $error$122615
$LN30@initstdio:

; 1087 :     }
; 1088 :     if (!(wrapper = PyObject_GetAttrString(iomod, "OpenWrapper"))) {

  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@LNNEGDCO@OpenWrapper?$AA@
  000c6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR iomod$[rsp]
  000cb	e8 00 00 00 00	 call	 PyObject_GetAttrString
  000d0	48 89 44 24 50	 mov	 QWORD PTR wrapper$[rsp], rax
  000d5	48 83 7c 24 50
	00		 cmp	 QWORD PTR wrapper$[rsp], 0
  000db	75 05		 jne	 SHORT $LN29@initstdio

; 1089 :         goto error;

  000dd	e9 39 03 00 00	 jmp	 $error$122615
$LN29@initstdio:

; 1090 :     }
; 1091 : 
; 1092 :     /* Set builtins.open */
; 1093 :     if (PyObject_SetAttrString(bimod, "open", wrapper) == -1) {

  000e2	4c 8b 44 24 50	 mov	 r8, QWORD PTR wrapper$[rsp]
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04PMOCAHAA@open?$AA@
  000ee	48 8b 4c 24 68	 mov	 rcx, QWORD PTR bimod$[rsp]
  000f3	e8 00 00 00 00	 call	 PyObject_SetAttrString
  000f8	83 f8 ff	 cmp	 eax, -1
  000fb	75 0f		 jne	 SHORT $LN28@initstdio

; 1094 :         Py_DECREF(wrapper);

  000fd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR wrapper$[rsp]
  00102	e8 00 00 00 00	 call	 _Py_DecRef

; 1095 :         goto error;

  00107	e9 0f 03 00 00	 jmp	 $error$122615
$LN28@initstdio:

; 1096 :     }
; 1097 :     Py_DECREF(wrapper);

  0010c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR wrapper$[rsp]
  00111	e8 00 00 00 00	 call	 _Py_DecRef

; 1098 : 
; 1099 :     encoding = Py_GETENV("PYTHONIOENCODING");

  00116	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_IgnoreEnvironmentFlag, 0
  0011d	74 0e		 je	 SHORT $LN36@initstdio
  0011f	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv92[rsp], 0
  0012b	eb 15		 jmp	 SHORT $LN37@initstdio
$LN36@initstdio:
  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@DDJHNGCM@PYTHONIOENCODING?$AA@
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  0013a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv92[rsp], rax
$LN37@initstdio:
  00142	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv92[rsp]
  0014a	48 89 44 24 48	 mov	 QWORD PTR encoding$[rsp], rax

; 1100 :     errors = NULL;

  0014f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR errors$[rsp], 0

; 1101 :     if (encoding) {

  00158	48 83 7c 24 48
	00		 cmp	 QWORD PTR encoding$[rsp], 0
  0015e	74 42		 je	 SHORT $LN27@initstdio

; 1102 :         encoding = strdup(encoding);

  00160	48 8b 4c 24 48	 mov	 rcx, QWORD PTR encoding$[rsp]
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0016b	48 89 44 24 48	 mov	 QWORD PTR encoding$[rsp], rax

; 1103 :         errors = strchr(encoding, ':');

  00170	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  00175	48 8b 4c 24 48	 mov	 rcx, QWORD PTR encoding$[rsp]
  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00180	48 89 44 24 38	 mov	 QWORD PTR errors$[rsp], rax

; 1104 :         if (errors) {

  00185	48 83 7c 24 38
	00		 cmp	 QWORD PTR errors$[rsp], 0
  0018b	74 15		 je	 SHORT $LN26@initstdio

; 1105 :             *errors = '\0';

  0018d	48 8b 44 24 38	 mov	 rax, QWORD PTR errors$[rsp]
  00192	c6 00 00	 mov	 BYTE PTR [rax], 0

; 1106 :             errors++;

  00195	48 8b 44 24 38	 mov	 rax, QWORD PTR errors$[rsp]
  0019a	48 ff c0	 inc	 rax
  0019d	48 89 44 24 38	 mov	 QWORD PTR errors$[rsp], rax
$LN26@initstdio:
$LN27@initstdio:

; 1107 :         }
; 1108 :     }
; 1109 : 
; 1110 :     /* Set sys.stdin */
; 1111 :     fd = fileno(stdin);

  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001a8	48 8b c8	 mov	 rcx, rax
  001ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  001b1	89 44 24 70	 mov	 DWORD PTR fd$[rsp], eax

; 1112 :     /* Under some conditions stdin, stdout and stderr may not be connected
; 1113 :      * and fileno() may point to an invalid file descriptor. For example
; 1114 :      * GUI apps don't have valid standard streams by default.
; 1115 :      */
; 1116 :     if (!is_valid_fd(fd)) {

  001b5	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  001b9	e8 00 00 00 00	 call	 is_valid_fd
  001be	85 c0		 test	 eax, eax
  001c0	75 18		 jne	 SHORT $LN25@initstdio

; 1117 :         std = Py_None;

  001c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001c9	48 89 44 24 30	 mov	 QWORD PTR std$[rsp], rax

; 1118 :         Py_INCREF(std);

  001ce	48 8b 4c 24 30	 mov	 rcx, QWORD PTR std$[rsp]
  001d3	e8 00 00 00 00	 call	 _Py_IncRef

; 1119 :     }
; 1120 :     else {

  001d8	eb 3e		 jmp	 SHORT $LN24@initstdio
$LN25@initstdio:

; 1121 :         std = create_stdio(iomod, fd, 0, "<stdin>", encoding, errors);

  001da	48 8b 44 24 38	 mov	 rax, QWORD PTR errors$[rsp]
  001df	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001e4	48 8b 44 24 48	 mov	 rax, QWORD PTR encoding$[rsp]
  001e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ee	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@
  001f5	45 33 c0	 xor	 r8d, r8d
  001f8	8b 54 24 70	 mov	 edx, DWORD PTR fd$[rsp]
  001fc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR iomod$[rsp]
  00201	e8 00 00 00 00	 call	 create_stdio
  00206	48 89 44 24 30	 mov	 QWORD PTR std$[rsp], rax

; 1122 :         if (std == NULL)

  0020b	48 83 7c 24 30
	00		 cmp	 QWORD PTR std$[rsp], 0
  00211	75 05		 jne	 SHORT $LN23@initstdio

; 1123 :             goto error;

  00213	e9 03 02 00 00	 jmp	 $error$122615
$LN23@initstdio:
$LN24@initstdio:

; 1124 :     } /* if (fd < 0) */
; 1125 :     PySys_SetObject("__stdin__", std);

  00218	48 8b 54 24 30	 mov	 rdx, QWORD PTR std$[rsp]
  0021d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EFAEFGPG@__stdin__?$AA@
  00224	e8 00 00 00 00	 call	 PySys_SetObject

; 1126 :     PySys_SetObject("stdin", std);

  00229	48 8b 54 24 30	 mov	 rdx, QWORD PTR std$[rsp]
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MHOFLBOO@stdin?$AA@
  00235	e8 00 00 00 00	 call	 PySys_SetObject

; 1127 :     Py_DECREF(std);

  0023a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR std$[rsp]
  0023f	e8 00 00 00 00	 call	 _Py_DecRef

; 1128 : 
; 1129 :     /* Set sys.stdout */
; 1130 :     fd = fileno(stdout);

  00244	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0024a	48 83 c0 30	 add	 rax, 48			; 00000030H
  0024e	48 8b c8	 mov	 rcx, rax
  00251	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00257	89 44 24 70	 mov	 DWORD PTR fd$[rsp], eax

; 1131 :     if (!is_valid_fd(fd)) {

  0025b	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0025f	e8 00 00 00 00	 call	 is_valid_fd
  00264	85 c0		 test	 eax, eax
  00266	75 18		 jne	 SHORT $LN22@initstdio

; 1132 :         std = Py_None;

  00268	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0026f	48 89 44 24 30	 mov	 QWORD PTR std$[rsp], rax

; 1133 :         Py_INCREF(std);

  00274	48 8b 4c 24 30	 mov	 rcx, QWORD PTR std$[rsp]
  00279	e8 00 00 00 00	 call	 _Py_IncRef

; 1134 :     }
; 1135 :     else {

  0027e	eb 41		 jmp	 SHORT $LN21@initstdio
$LN22@initstdio:

; 1136 :         std = create_stdio(iomod, fd, 1, "<stdout>", encoding, errors);

  00280	48 8b 44 24 38	 mov	 rax, QWORD PTR errors$[rsp]
  00285	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0028a	48 8b 44 24 48	 mov	 rax, QWORD PTR encoding$[rsp]
  0028f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00294	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08CNNAJMFD@?$DMstdout?$DO?$AA@
  0029b	41 b8 01 00 00
	00		 mov	 r8d, 1
  002a1	8b 54 24 70	 mov	 edx, DWORD PTR fd$[rsp]
  002a5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR iomod$[rsp]
  002aa	e8 00 00 00 00	 call	 create_stdio
  002af	48 89 44 24 30	 mov	 QWORD PTR std$[rsp], rax

; 1137 :         if (std == NULL)

  002b4	48 83 7c 24 30
	00		 cmp	 QWORD PTR std$[rsp], 0
  002ba	75 05		 jne	 SHORT $LN20@initstdio

; 1138 :             goto error;

  002bc	e9 5a 01 00 00	 jmp	 $error$122615
$LN20@initstdio:
$LN21@initstdio:

; 1139 :     } /* if (fd < 0) */
; 1140 :     PySys_SetObject("__stdout__", std);

  002c1	48 8b 54 24 30	 mov	 rdx, QWORD PTR std$[rsp]
  002c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NPOCHPFF@__stdout__?$AA@
  002cd	e8 00 00 00 00	 call	 PySys_SetObject

; 1141 :     PySys_SetObject("stdout", std);

  002d2	48 8b 54 24 30	 mov	 rdx, QWORD PTR std$[rsp]
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  002de	e8 00 00 00 00	 call	 PySys_SetObject

; 1142 :     Py_DECREF(std);

  002e3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR std$[rsp]
  002e8	e8 00 00 00 00	 call	 _Py_DecRef

; 1143 : 
; 1144 : #if 1 /* Disable this if you have trouble debugging bootstrap stuff */
; 1145 :     /* Set sys.stderr, replaces the preliminary stderr */
; 1146 :     fd = fileno(stderr);

  002ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  002f3	48 83 c0 60	 add	 rax, 96			; 00000060H
  002f7	48 8b c8	 mov	 rcx, rax
  002fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00300	89 44 24 70	 mov	 DWORD PTR fd$[rsp], eax

; 1147 :     if (!is_valid_fd(fd)) {

  00304	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00308	e8 00 00 00 00	 call	 is_valid_fd
  0030d	85 c0		 test	 eax, eax
  0030f	75 18		 jne	 SHORT $LN19@initstdio

; 1148 :         std = Py_None;

  00311	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00318	48 89 44 24 30	 mov	 QWORD PTR std$[rsp], rax

; 1149 :         Py_INCREF(std);

  0031d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR std$[rsp]
  00322	e8 00 00 00 00	 call	 _Py_IncRef

; 1150 :     }
; 1151 :     else {

  00327	eb 43		 jmp	 SHORT $LN18@initstdio
$LN19@initstdio:

; 1152 :         std = create_stdio(iomod, fd, 1, "<stderr>", encoding, "backslashreplace");

  00329	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
  00330	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00335	48 8b 44 24 48	 mov	 rax, QWORD PTR encoding$[rsp]
  0033a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0033f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08PODKMAPJ@?$DMstderr?$DO?$AA@
  00346	41 b8 01 00 00
	00		 mov	 r8d, 1
  0034c	8b 54 24 70	 mov	 edx, DWORD PTR fd$[rsp]
  00350	48 8b 4c 24 60	 mov	 rcx, QWORD PTR iomod$[rsp]
  00355	e8 00 00 00 00	 call	 create_stdio
  0035a	48 89 44 24 30	 mov	 QWORD PTR std$[rsp], rax

; 1153 :         if (std == NULL)

  0035f	48 83 7c 24 30
	00		 cmp	 QWORD PTR std$[rsp], 0
  00365	75 05		 jne	 SHORT $LN17@initstdio

; 1154 :             goto error;

  00367	e9 af 00 00 00	 jmp	 $error$122615
$LN17@initstdio:
$LN18@initstdio:

; 1155 :     } /* if (fd < 0) */
; 1156 : 
; 1157 :     /* Same as hack above, pre-import stderr's codec to avoid recursion
; 1158 :        when import.c tries to write to stderr in verbose mode. */
; 1159 :     encoding_attr = PyObject_GetAttrString(std, "encoding");

  0036c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08MLPGAEIK@encoding?$AA@
  00373	48 8b 4c 24 30	 mov	 rcx, QWORD PTR std$[rsp]
  00378	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0037d	48 89 44 24 40	 mov	 QWORD PTR encoding_attr$[rsp], rax

; 1160 :     if (encoding_attr != NULL) {

  00382	48 83 7c 24 40
	00		 cmp	 QWORD PTR encoding_attr$[rsp], 0
  00388	74 5a		 je	 SHORT $LN16@initstdio

; 1161 :         const char * encoding;
; 1162 :         encoding = _PyUnicode_AsString(encoding_attr);

  0038a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR encoding_attr$[rsp]
  0038f	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00394	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR encoding$122660[rsp], rax

; 1163 :         if (encoding != NULL) {

  0039c	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR encoding$122660[rsp], 0
  003a5	74 33		 je	 SHORT $LN15@initstdio

; 1164 :             PyObject *codec_info = _PyCodec_Lookup(encoding);

  003a7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR encoding$122660[rsp]
  003af	e8 00 00 00 00	 call	 _PyCodec_Lookup
  003b4	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR codec_info$122663[rsp], rax
$LN14@initstdio:

; 1165 :             Py_XDECREF(codec_info);

  003bc	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR codec_info$122663[rsp], 0
  003c5	74 0d		 je	 SHORT $LN11@initstdio
  003c7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR codec_info$122663[rsp]
  003cf	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@initstdio:
  003d4	33 c0		 xor	 eax, eax
  003d6	85 c0		 test	 eax, eax
  003d8	75 e2		 jne	 SHORT $LN14@initstdio
$LN15@initstdio:

; 1166 :         }
; 1167 :         Py_DECREF(encoding_attr);

  003da	48 8b 4c 24 40	 mov	 rcx, QWORD PTR encoding_attr$[rsp]
  003df	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@initstdio:

; 1168 :     }
; 1169 :     PyErr_Clear();  /* Not a fatal error if codec isn't available */

  003e4	e8 00 00 00 00	 call	 PyErr_Clear

; 1170 : 
; 1171 :     PySys_SetObject("__stderr__", std);

  003e9	48 8b 54 24 30	 mov	 rdx, QWORD PTR std$[rsp]
  003ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OJDCNPPP@__stderr__?$AA@
  003f5	e8 00 00 00 00	 call	 PySys_SetObject

; 1172 :     PySys_SetObject("stderr", std);

  003fa	48 8b 54 24 30	 mov	 rdx, QWORD PTR std$[rsp]
  003ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00406	e8 00 00 00 00	 call	 PySys_SetObject

; 1173 :     Py_DECREF(std);

  0040b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR std$[rsp]
  00410	e8 00 00 00 00	 call	 _Py_DecRef

; 1174 : #endif
; 1175 : 
; 1176 :     if (0) {

  00415	33 c0		 xor	 eax, eax
  00417	85 c0		 test	 eax, eax
  00419	74 08		 je	 SHORT $LN10@initstdio
$error$122615:

; 1177 :   error:
; 1178 :         status = -1;

  0041b	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR status$[rsp], -1
$LN10@initstdio:

; 1179 :     }
; 1180 : 
; 1181 :     if (encoding)

  00423	48 83 7c 24 48
	00		 cmp	 QWORD PTR encoding$[rsp], 0
  00429	74 0b		 je	 SHORT $LN9@initstdio

; 1182 :         free(encoding);

  0042b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR encoding$[rsp]
  00430	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN9@initstdio:
$LN8@initstdio:

; 1183 :     Py_XDECREF(bimod);

  00436	48 83 7c 24 68
	00		 cmp	 QWORD PTR bimod$[rsp], 0
  0043c	74 0a		 je	 SHORT $LN5@initstdio
  0043e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR bimod$[rsp]
  00443	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@initstdio:
  00448	33 c0		 xor	 eax, eax
  0044a	85 c0		 test	 eax, eax
  0044c	75 e8		 jne	 SHORT $LN8@initstdio
$LN4@initstdio:

; 1184 :     Py_XDECREF(iomod);

  0044e	48 83 7c 24 60
	00		 cmp	 QWORD PTR iomod$[rsp], 0
  00454	74 0a		 je	 SHORT $LN1@initstdio
  00456	48 8b 4c 24 60	 mov	 rcx, QWORD PTR iomod$[rsp]
  0045b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@initstdio:
  00460	33 c0		 xor	 eax, eax
  00462	85 c0		 test	 eax, eax
  00464	75 e8		 jne	 SHORT $LN4@initstdio

; 1185 :     return status;

  00466	8b 44 24 58	 mov	 eax, DWORD PTR status$[rsp]

; 1186 : }

  0046a	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00471	c3		 ret	 0
initstdio ENDP
_TEXT	ENDS
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_05FGJNPGEL@OsssO?$AA@			; `string'
PUBLIC	??_C@_0N@OEHPDOBJ@create_stdio?$AA@		; `string'
PUBLIC	??_C@_07HBCPJCMC@isiOOOi?$AA@			; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_PyObject_SetAttrId:PROC
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$create_stdio DD imagerel create_stdio
	DD	imagerel create_stdio+1398
	DD	imagerel $unwind$create_stdio
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$create_stdio DD 021a01H
	DD	019011aH
xdata	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FGJNPGEL@OsssO?$AA@
CONST	SEGMENT
??_C@_05FGJNPGEL@OsssO?$AA@ DB 'OsssO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OEHPDOBJ@create_stdio?$AA@
CONST	SEGMENT
??_C@_0N@OEHPDOBJ@create_stdio?$AA@ DB 'create_stdio', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HBCPJCMC@isiOOOi?$AA@
CONST	SEGMENT
??_C@_07HBCPJCMC@isiOOOi?$AA@ DB 'isiOOOi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT create_stdio
_TEXT	SEGMENT
buffering$ = 80
res$ = 88
text$ = 96
line_buffering$ = 104
newline$ = 112
mode$ = 120
raw$ = 128
stream$ = 136
isatty$ = 144
buf$ = 152
_py_tmp$122529 = 160
_py_tmp$122537 = 168
_py_tmp$122547 = 176
_py_tmp$122563 = 184
io$ = 208
fd$ = 216
write_mode$ = 224
name$ = 232
encoding$ = 240
errors$ = 248
create_stdio PROC					; COMDAT

; 948  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 949  :     PyObject *buf = NULL, *stream = NULL, *text = NULL, *raw = NULL, *res;

  0001a	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR buf$[rsp], 0
  00026	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR stream$[rsp], 0
  00032	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR text$[rsp], 0
  0003b	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR raw$[rsp], 0

; 950  :     const char* mode;
; 951  :     const char* newline;
; 952  :     PyObject *line_buffering;
; 953  :     int buffering, isatty;
; 954  :     _Py_IDENTIFIER(open);
; 955  :     _Py_IDENTIFIER(isatty);
; 956  :     _Py_IDENTIFIER(TextIOWrapper);
; 957  :     _Py_IDENTIFIER(name);
; 958  :     _Py_IDENTIFIER(mode);
; 959  : 
; 960  :     /* stdin is always opened in buffered mode, first because it shouldn't
; 961  :        make a difference in common use cases, second because TextIOWrapper
; 962  :        depends on the presence of a read1() method which only exists on
; 963  :        buffered streams.
; 964  :     */
; 965  :     if (Py_UnbufferedStdioFlag && write_mode)

  00047	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_UnbufferedStdioFlag, 0
  0004e	74 14		 je	 SHORT $LN52@create_std
  00050	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR write_mode$[rsp], 0
  00058	74 0a		 je	 SHORT $LN52@create_std

; 966  :         buffering = 0;

  0005a	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR buffering$[rsp], 0

; 967  :     else

  00062	eb 08		 jmp	 SHORT $LN51@create_std
$LN52@create_std:

; 968  :         buffering = -1;

  00064	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR buffering$[rsp], -1
$LN51@create_std:

; 969  :     if (write_mode)

  0006c	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR write_mode$[rsp], 0
  00074	74 0e		 je	 SHORT $LN50@create_std

; 970  :         mode = "wb";

  00076	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
  0007d	48 89 44 24 78	 mov	 QWORD PTR mode$[rsp], rax

; 971  :     else

  00082	eb 0c		 jmp	 SHORT $LN49@create_std
$LN50@create_std:

; 972  :         mode = "rb";

  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  0008b	48 89 44 24 78	 mov	 QWORD PTR mode$[rsp], rax
$LN49@create_std:

; 973  :     buf = _PyObject_CallMethodId(io, &PyId_open, "isiOOOi",
; 974  :                                  fd, mode, buffering,
; 975  :                                  Py_None, Py_None, Py_None, 0);

  00090	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_open@?1??create_stdio@@9@9
  00095	8b c0		 mov	 eax, eax
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0009d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000a6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000aa	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000ba	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000c6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d7	8b 4c 24 50	 mov	 ecx, DWORD PTR buffering$[rsp]
  000db	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  000df	48 8b 4c 24 78	 mov	 rcx, QWORD PTR mode$[rsp]
  000e4	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000e9	44 8b 8c 24 d8
	00 00 00	 mov	 r9d, DWORD PTR fd$[rsp]
  000f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07HBCPJCMC@isiOOOi?$AA@
  000f8	48 8b d0	 mov	 rdx, rax
  000fb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR io$[rsp]
  00103	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00108	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR buf$[rsp], rax

; 976  :     if (buf == NULL)

  00110	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp], 0
  00119	75 05		 jne	 SHORT $LN48@create_std

; 977  :         goto error;

  0011b	e9 da 03 00 00	 jmp	 $error$122503
$LN48@create_std:

; 978  : 
; 979  :     if (buffering) {

  00120	83 7c 24 50 00	 cmp	 DWORD PTR buffering$[rsp], 0
  00125	74 44		 je	 SHORT $LN47@create_std

; 980  :         _Py_IDENTIFIER(raw);
; 981  :         raw = _PyObject_GetAttrId(buf, &PyId_raw);

  00127	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_raw@?2??create_stdio@@9@9
  0012c	8b c0		 mov	 eax, eax
  0012e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00134	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0013d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00141	48 8b d0	 mov	 rdx, rax
  00144	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0014c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00151	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR raw$[rsp], rax

; 982  :         if (raw == NULL)

  00159	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR raw$[rsp], 0
  00162	75 05		 jne	 SHORT $LN46@create_std

; 983  :             goto error;

  00164	e9 91 03 00 00	 jmp	 $error$122503
$LN46@create_std:

; 984  :     }
; 985  :     else {

  00169	eb 1d		 jmp	 SHORT $LN45@create_std
$LN47@create_std:

; 986  :         raw = buf;

  0016b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00173	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR raw$[rsp], rax

; 987  :         Py_INCREF(raw);

  0017b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR raw$[rsp]
  00183	e8 00 00 00 00	 call	 _Py_IncRef
$LN45@create_std:

; 988  :     }
; 989  : 
; 990  :     text = PyUnicode_FromString(name);

  00188	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00190	e8 00 00 00 00	 call	 PyUnicode_FromString
  00195	48 89 44 24 60	 mov	 QWORD PTR text$[rsp], rax

; 991  :     if (text == NULL || _PyObject_SetAttrId(raw, &PyId_name, text) < 0)

  0019a	48 83 7c 24 60
	00		 cmp	 QWORD PTR text$[rsp], 0
  001a0	74 33		 je	 SHORT $LN43@create_std
  001a2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_name@?1??create_stdio@@9@9
  001a7	8b c0		 mov	 eax, eax
  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001af	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001b8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001bc	4c 8b 44 24 60	 mov	 r8, QWORD PTR text$[rsp]
  001c1	48 8b d0	 mov	 rdx, rax
  001c4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR raw$[rsp]
  001cc	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001d1	85 c0		 test	 eax, eax
  001d3	7d 05		 jge	 SHORT $LN44@create_std
$LN43@create_std:

; 992  :         goto error;

  001d5	e9 20 03 00 00	 jmp	 $error$122503
$LN44@create_std:

; 993  :     res = _PyObject_CallMethodId(raw, &PyId_isatty, "");

  001da	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_isatty@?1??create_stdio@@9@9
  001df	8b c0		 mov	 eax, eax
  001e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001e7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001f0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  001fb	48 8b d0	 mov	 rdx, rax
  001fe	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR raw$[rsp]
  00206	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0020b	48 89 44 24 58	 mov	 QWORD PTR res$[rsp], rax

; 994  :     if (res == NULL)

  00210	48 83 7c 24 58
	00		 cmp	 QWORD PTR res$[rsp], 0
  00216	75 05		 jne	 SHORT $LN42@create_std

; 995  :         goto error;

  00218	e9 dd 02 00 00	 jmp	 $error$122503
$LN42@create_std:

; 996  :     isatty = PyObject_IsTrue(res);

  0021d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR res$[rsp]
  00222	e8 00 00 00 00	 call	 PyObject_IsTrue
  00227	89 84 24 90 00
	00 00		 mov	 DWORD PTR isatty$[rsp], eax

; 997  :     Py_DECREF(res);

  0022e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR res$[rsp]
  00233	e8 00 00 00 00	 call	 _Py_DecRef

; 998  :     if (isatty == -1)

  00238	83 bc 24 90 00
	00 00 ff	 cmp	 DWORD PTR isatty$[rsp], -1
  00240	75 05		 jne	 SHORT $LN41@create_std

; 999  :         goto error;

  00242	e9 b3 02 00 00	 jmp	 $error$122503
$LN41@create_std:

; 1000 :     if (isatty || Py_UnbufferedStdioFlag)

  00247	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR isatty$[rsp], 0
  0024f	75 09		 jne	 SHORT $LN39@create_std
  00251	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_UnbufferedStdioFlag, 0
  00258	74 0e		 je	 SHORT $LN40@create_std
$LN39@create_std:

; 1001 :         line_buffering = Py_True;

  0025a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00261	48 89 44 24 68	 mov	 QWORD PTR line_buffering$[rsp], rax

; 1002 :     else

  00266	eb 0c		 jmp	 SHORT $LN38@create_std
$LN40@create_std:

; 1003 :         line_buffering = Py_False;

  00268	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0026f	48 89 44 24 68	 mov	 QWORD PTR line_buffering$[rsp], rax
$LN38@create_std:
$LN37@create_std:

; 1004 : 
; 1005 :     Py_CLEAR(raw);

  00274	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR raw$[rsp], 0
  0027d	74 56		 je	 SHORT $LN34@create_std
  0027f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00287	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR raw$[rsp]
  0028f	41 b8 ed 03 00
	00		 mov	 r8d, 1005		; 000003edH
  00295	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  0029c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OEHPDOBJ@create_stdio?$AA@
  002a3	e8 00 00 00 00	 call	 _PyParallel_Guard
  002a8	85 c0		 test	 eax, eax
  002aa	75 29		 jne	 SHORT $LN34@create_std
  002ac	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR raw$[rsp]
  002b4	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _py_tmp$122529[rsp], rax
  002bc	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR raw$[rsp], 0
  002c8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$122529[rsp]
  002d0	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@create_std:
  002d5	33 c0		 xor	 eax, eax
  002d7	85 c0		 test	 eax, eax
  002d9	75 99		 jne	 SHORT $LN37@create_std
$LN33@create_std:

; 1006 :     Py_CLEAR(text);

  002db	48 83 7c 24 60
	00		 cmp	 QWORD PTR text$[rsp], 0
  002e1	74 4d		 je	 SHORT $LN30@create_std
  002e3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002eb	4c 8b 4c 24 60	 mov	 r9, QWORD PTR text$[rsp]
  002f0	41 b8 ee 03 00
	00		 mov	 r8d, 1006		; 000003eeH
  002f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  002fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OEHPDOBJ@create_stdio?$AA@
  00304	e8 00 00 00 00	 call	 _PyParallel_Guard
  00309	85 c0		 test	 eax, eax
  0030b	75 23		 jne	 SHORT $LN30@create_std
  0030d	48 8b 44 24 60	 mov	 rax, QWORD PTR text$[rsp]
  00312	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR _py_tmp$122537[rsp], rax
  0031a	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR text$[rsp], 0
  00323	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$122537[rsp]
  0032b	e8 00 00 00 00	 call	 _Py_DecRef
$LN30@create_std:
  00330	33 c0		 xor	 eax, eax
  00332	85 c0		 test	 eax, eax
  00334	75 a5		 jne	 SHORT $LN33@create_std

; 1007 : 
; 1008 : #ifdef MS_WINDOWS
; 1009 :     /* sys.stdin: enable universal newline mode, translate "\r\n" and "\r"
; 1010 :        newlines to "\n".
; 1011 :        sys.stdout and sys.stderr: translate "\n" to "\r\n". */
; 1012 :     newline = NULL;

  00336	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR newline$[rsp], 0

; 1013 : #else
; 1014 :     /* sys.stdin: split lines at "\n".
; 1015 :        sys.stdout and sys.stderr: don't translate newlines (use "\n"). */
; 1016 :     newline = "\n";
; 1017 : #endif
; 1018 : 
; 1019 :     stream = _PyObject_CallMethodId(io, &PyId_TextIOWrapper, "OsssO",
; 1020 :                                     buf, encoding, errors,
; 1021 :                                     newline, line_buffering);

  0033f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_TextIOWrapper@?1??create_stdio@@9@9
  00344	8b c0		 mov	 eax, eax
  00346	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0034c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00355	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00359	48 8b 4c 24 68	 mov	 rcx, QWORD PTR line_buffering$[rsp]
  0035e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00363	48 8b 4c 24 70	 mov	 rcx, QWORD PTR newline$[rsp]
  00368	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0036d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR errors$[rsp]
  00375	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0037a	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR encoding$[rsp]
  00382	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00387	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR buf$[rsp]
  0038f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05FGJNPGEL@OsssO?$AA@
  00396	48 8b d0	 mov	 rdx, rax
  00399	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR io$[rsp]
  003a1	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  003a6	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR stream$[rsp], rax
$LN29@create_std:

; 1022 :     Py_CLEAR(buf);

  003ae	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp], 0
  003b7	74 56		 je	 SHORT $LN26@create_std
  003b9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003c1	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR buf$[rsp]
  003c9	41 b8 fe 03 00
	00		 mov	 r8d, 1022		; 000003feH
  003cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  003d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OEHPDOBJ@create_stdio?$AA@
  003dd	e8 00 00 00 00	 call	 _PyParallel_Guard
  003e2	85 c0		 test	 eax, eax
  003e4	75 29		 jne	 SHORT $LN26@create_std
  003e6	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  003ee	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR _py_tmp$122547[rsp], rax
  003f6	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR buf$[rsp], 0
  00402	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$122547[rsp]
  0040a	e8 00 00 00 00	 call	 _Py_DecRef
$LN26@create_std:
  0040f	33 c0		 xor	 eax, eax
  00411	85 c0		 test	 eax, eax
  00413	75 99		 jne	 SHORT $LN29@create_std

; 1023 :     if (stream == NULL)

  00415	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR stream$[rsp], 0
  0041e	75 05		 jne	 SHORT $LN25@create_std

; 1024 :         goto error;

  00420	e9 d5 00 00 00	 jmp	 $error$122503
$LN25@create_std:

; 1025 : 
; 1026 :     if (write_mode)

  00425	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR write_mode$[rsp], 0
  0042d	74 0e		 je	 SHORT $LN24@create_std

; 1027 :         mode = "w";

  0042f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01NOFIACDB@w?$AA@
  00436	48 89 44 24 78	 mov	 QWORD PTR mode$[rsp], rax

; 1028 :     else

  0043b	eb 0c		 jmp	 SHORT $LN23@create_std
$LN24@create_std:

; 1029 :         mode = "r";

  0043d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  00444	48 89 44 24 78	 mov	 QWORD PTR mode$[rsp], rax
$LN23@create_std:

; 1030 :     text = PyUnicode_FromString(mode);

  00449	48 8b 4c 24 78	 mov	 rcx, QWORD PTR mode$[rsp]
  0044e	e8 00 00 00 00	 call	 PyUnicode_FromString
  00453	48 89 44 24 60	 mov	 QWORD PTR text$[rsp], rax

; 1031 :     if (!text || _PyObject_SetAttrId(stream, &PyId_mode, text) < 0)

  00458	48 83 7c 24 60
	00		 cmp	 QWORD PTR text$[rsp], 0
  0045e	74 33		 je	 SHORT $LN21@create_std
  00460	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_mode@?1??create_stdio@@9@9
  00465	8b c0		 mov	 eax, eax
  00467	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0046d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00476	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0047a	4c 8b 44 24 60	 mov	 r8, QWORD PTR text$[rsp]
  0047f	48 8b d0	 mov	 rdx, rax
  00482	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR stream$[rsp]
  0048a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0048f	85 c0		 test	 eax, eax
  00491	7d 02		 jge	 SHORT $LN22@create_std
$LN21@create_std:

; 1032 :         goto error;

  00493	eb 65		 jmp	 SHORT $error$122503
$LN22@create_std:
$LN20@create_std:

; 1033 :     Py_CLEAR(text);

  00495	48 83 7c 24 60
	00		 cmp	 QWORD PTR text$[rsp], 0
  0049b	74 4d		 je	 SHORT $LN17@create_std
  0049d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004a5	4c 8b 4c 24 60	 mov	 r9, QWORD PTR text$[rsp]
  004aa	41 b8 09 04 00
	00		 mov	 r8d, 1033		; 00000409H
  004b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  004b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OEHPDOBJ@create_stdio?$AA@
  004be	e8 00 00 00 00	 call	 _PyParallel_Guard
  004c3	85 c0		 test	 eax, eax
  004c5	75 23		 jne	 SHORT $LN17@create_std
  004c7	48 8b 44 24 60	 mov	 rax, QWORD PTR text$[rsp]
  004cc	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR _py_tmp$122563[rsp], rax
  004d4	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR text$[rsp], 0
  004dd	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$122563[rsp]
  004e5	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@create_std:
  004ea	33 c0		 xor	 eax, eax
  004ec	85 c0		 test	 eax, eax
  004ee	75 a5		 jne	 SHORT $LN20@create_std

; 1034 :     return stream;

  004f0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR stream$[rsp]
  004f8	eb 74		 jmp	 SHORT $LN53@create_std
$error$122503:
$LN16@create_std:

; 1035 : 
; 1036 : error:
; 1037 :     Py_XDECREF(buf);

  004fa	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp], 0
  00503	74 0d		 je	 SHORT $LN13@create_std
  00505	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0050d	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@create_std:
  00512	33 c0		 xor	 eax, eax
  00514	85 c0		 test	 eax, eax
  00516	75 e2		 jne	 SHORT $LN16@create_std
$LN12@create_std:

; 1038 :     Py_XDECREF(stream);

  00518	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR stream$[rsp], 0
  00521	74 0d		 je	 SHORT $LN9@create_std
  00523	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR stream$[rsp]
  0052b	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@create_std:
  00530	33 c0		 xor	 eax, eax
  00532	85 c0		 test	 eax, eax
  00534	75 e2		 jne	 SHORT $LN12@create_std
$LN8@create_std:

; 1039 :     Py_XDECREF(text);

  00536	48 83 7c 24 60
	00		 cmp	 QWORD PTR text$[rsp], 0
  0053c	74 0a		 je	 SHORT $LN5@create_std
  0053e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR text$[rsp]
  00543	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@create_std:
  00548	33 c0		 xor	 eax, eax
  0054a	85 c0		 test	 eax, eax
  0054c	75 e8		 jne	 SHORT $LN8@create_std
$LN4@create_std:

; 1040 :     Py_XDECREF(raw);

  0054e	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR raw$[rsp], 0
  00557	74 0d		 je	 SHORT $LN1@create_std
  00559	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR raw$[rsp]
  00561	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@create_std:
  00566	33 c0		 xor	 eax, eax
  00568	85 c0		 test	 eax, eax
  0056a	75 e2		 jne	 SHORT $LN4@create_std

; 1041 :     return NULL;

  0056c	33 c0		 xor	 eax, eax
$LN53@create_std:

; 1042 : }

  0056e	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00575	c3		 ret	 0
create_stdio ENDP
_TEXT	ENDS
EXTRN	__imp_close:PROC
EXTRN	__imp_dup:PROC
EXTRN	_PyVerify_fd:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_valid_fd DD imagerel is_valid_fd
	DD	imagerel is_valid_fd+77
	DD	imagerel $unwind$is_valid_fd
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_valid_fd DD 010801H
	DD	06208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT is_valid_fd
_TEXT	SEGMENT
dummy_fd$ = 32
fd$ = 64
is_valid_fd PROC					; COMDAT

; 1046 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1047 :     int dummy_fd;
; 1048 :     if (fd < 0 || !_PyVerify_fd(fd))

  00008	83 7c 24 40 00	 cmp	 DWORD PTR fd$[rsp], 0
  0000d	7c 0d		 jl	 SHORT $LN2@is_valid_f
  0000f	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00013	e8 00 00 00 00	 call	 _PyVerify_fd
  00018	85 c0		 test	 eax, eax
  0001a	75 04		 jne	 SHORT $LN3@is_valid_f
$LN2@is_valid_f:

; 1049 :         return 0;

  0001c	33 c0		 xor	 eax, eax
  0001e	eb 28		 jmp	 SHORT $LN4@is_valid_f
$LN3@is_valid_f:

; 1050 :     dummy_fd = dup(fd);

  00020	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_dup
  0002a	89 44 24 20	 mov	 DWORD PTR dummy_fd$[rsp], eax

; 1051 :     if (dummy_fd < 0)

  0002e	83 7c 24 20 00	 cmp	 DWORD PTR dummy_fd$[rsp], 0
  00033	7d 04		 jge	 SHORT $LN1@is_valid_f

; 1052 :         return 0;

  00035	33 c0		 xor	 eax, eax
  00037	eb 0f		 jmp	 SHORT $LN4@is_valid_f
$LN1@is_valid_f:

; 1053 :     close(dummy_fd);

  00039	8b 4c 24 20	 mov	 ecx, DWORD PTR dummy_fd$[rsp]
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 1054 :     return 1;

  00043	b8 01 00 00 00	 mov	 eax, 1
$LN4@is_valid_f:

; 1055 : }

  00048	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004c	c3		 ret	 0
is_valid_fd ENDP
_TEXT	ENDS
PUBLIC	PyRun_SimpleFileExFlags
PUBLIC	PyRun_InteractiveLoopFlags
PUBLIC	Py_FdIsInteractive
PUBLIC	??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@		; `string'
PUBLIC	PyRun_AnyFileExFlags
EXTRN	__imp_fclose:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_AnyFileExFlags DD imagerel $LN7
	DD	imagerel $LN7+143
	DD	imagerel $unwind$PyRun_AnyFileExFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_AnyFileExFlags DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
CONST	SEGMENT
??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@ DB '???', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyRun_AnyFileExFlags
_TEXT	SEGMENT
err$122696 = 32
fp$ = 64
filename$ = 72
closeit$ = 80
flags$ = 88
PyRun_AnyFileExFlags PROC				; COMDAT

; 1193 : {

$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1194 :     if (filename == NULL)

  00018	48 83 7c 24 48
	00		 cmp	 QWORD PTR filename$[rsp], 0
  0001e	75 0c		 jne	 SHORT $LN4@PyRun_AnyF

; 1195 :         filename = "???";

  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
  00027	48 89 44 24 48	 mov	 QWORD PTR filename$[rsp], rax
$LN4@PyRun_AnyF:

; 1196 :     if (Py_FdIsInteractive(fp, filename)) {

  0002c	48 8b 54 24 48	 mov	 rdx, QWORD PTR filename$[rsp]
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  00036	e8 00 00 00 00	 call	 Py_FdIsInteractive
  0003b	85 c0		 test	 eax, eax
  0003d	74 32		 je	 SHORT $LN3@PyRun_AnyF

; 1197 :         int err = PyRun_InteractiveLoopFlags(fp, filename, flags);

  0003f	4c 8b 44 24 58	 mov	 r8, QWORD PTR flags$[rsp]
  00044	48 8b 54 24 48	 mov	 rdx, QWORD PTR filename$[rsp]
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  0004e	e8 00 00 00 00	 call	 PyRun_InteractiveLoopFlags
  00053	89 44 24 20	 mov	 DWORD PTR err$122696[rsp], eax

; 1198 :         if (closeit)

  00057	83 7c 24 50 00	 cmp	 DWORD PTR closeit$[rsp], 0
  0005c	74 0b		 je	 SHORT $LN2@PyRun_AnyF

; 1199 :             fclose(fp);

  0005e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN2@PyRun_AnyF:

; 1200 :         return err;

  00069	8b 44 24 20	 mov	 eax, DWORD PTR err$122696[rsp]
  0006d	eb 1b		 jmp	 SHORT $LN5@PyRun_AnyF

; 1201 :     }
; 1202 :     else

  0006f	eb 19		 jmp	 SHORT $LN1@PyRun_AnyF
$LN3@PyRun_AnyF:

; 1203 :         return PyRun_SimpleFileExFlags(fp, filename, closeit, flags);

  00071	4c 8b 4c 24 58	 mov	 r9, QWORD PTR flags$[rsp]
  00076	44 8b 44 24 50	 mov	 r8d, DWORD PTR closeit$[rsp]
  0007b	48 8b 54 24 48	 mov	 rdx, QWORD PTR filename$[rsp]
  00080	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  00085	e8 00 00 00 00	 call	 PyRun_SimpleFileExFlags
$LN1@PyRun_AnyF:
$LN5@PyRun_AnyF:

; 1204 : }

  0008a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008e	c3		 ret	 0
PyRun_AnyFileExFlags ENDP
_TEXT	ENDS
PUBLIC	PyRun_InteractiveOneFlags
PUBLIC	??_C@_04KAJGAOMC@?4?4?4?5?$AA@			; `string'
PUBLIC	??_C@_03OEDACAH@ps2?$AA@			; `string'
PUBLIC	??_C@_04IMEJGNKP@?$DO?$DO?$DO?5?$AA@		; `string'
PUBLIC	??_C@_03CFGOFBME@ps1?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_InteractiveLoopFlags DD imagerel $LN17
	DD	imagerel $LN17+297
	DD	imagerel $unwind$PyRun_InteractiveLoopFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_InteractiveLoopFlags DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_04KAJGAOMC@?4?4?4?5?$AA@
CONST	SEGMENT
??_C@_04KAJGAOMC@?4?4?4?5?$AA@ DB '... ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OEDACAH@ps2?$AA@
CONST	SEGMENT
??_C@_03OEDACAH@ps2?$AA@ DB 'ps2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMEJGNKP@?$DO?$DO?$DO?5?$AA@
CONST	SEGMENT
??_C@_04IMEJGNKP@?$DO?$DO?$DO?5?$AA@ DB '>>> ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFGOFBME@ps1?$AA@
CONST	SEGMENT
??_C@_03CFGOFBME@ps1?$AA@ DB 'ps1', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyRun_InteractiveLoopFlags
_TEXT	SEGMENT
v$ = 32
local_flags$ = 40
ret$ = 44
tv90 = 48
fp$ = 80
filename$ = 88
flags$ = 96
PyRun_InteractiveLoopFlags PROC				; COMDAT

; 1208 : {

$LN17:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1209 :     PyObject *v;
; 1210 :     int ret;
; 1211 :     PyCompilerFlags local_flags;
; 1212 : 
; 1213 :     if (flags == NULL) {

  00013	48 83 7c 24 60
	00		 cmp	 QWORD PTR flags$[rsp], 0
  00019	75 12		 jne	 SHORT $LN14@PyRun_Inte

; 1214 :         flags = &local_flags;

  0001b	48 8d 44 24 28	 lea	 rax, QWORD PTR local_flags$[rsp]
  00020	48 89 44 24 60	 mov	 QWORD PTR flags$[rsp], rax

; 1215 :         local_flags.cf_flags = 0;

  00025	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR local_flags$[rsp], 0
$LN14@PyRun_Inte:

; 1216 :     }
; 1217 :     v = PySys_GetObject("ps1");

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CFGOFBME@ps1?$AA@
  00034	e8 00 00 00 00	 call	 PySys_GetObject
  00039	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1218 :     if (v == NULL) {

  0003e	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00044	75 3a		 jne	 SHORT $LN13@PyRun_Inte

; 1219 :         PySys_SetObject("ps1", v = PyUnicode_FromString(">>> "));

  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IMEJGNKP@?$DO?$DO?$DO?5?$AA@
  0004d	e8 00 00 00 00	 call	 PyUnicode_FromString
  00052	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00057	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CFGOFBME@ps1?$AA@
  00063	e8 00 00 00 00	 call	 PySys_SetObject
$LN12@PyRun_Inte:

; 1220 :         Py_XDECREF(v);

  00068	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0006e	74 0a		 je	 SHORT $LN9@PyRun_Inte
  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00075	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyRun_Inte:
  0007a	33 c0		 xor	 eax, eax
  0007c	85 c0		 test	 eax, eax
  0007e	75 e8		 jne	 SHORT $LN12@PyRun_Inte
$LN13@PyRun_Inte:

; 1221 :     }
; 1222 :     v = PySys_GetObject("ps2");

  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OEDACAH@ps2?$AA@
  00087	e8 00 00 00 00	 call	 PySys_GetObject
  0008c	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1223 :     if (v == NULL) {

  00091	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00097	75 3a		 jne	 SHORT $LN8@PyRun_Inte

; 1224 :         PySys_SetObject("ps2", v = PyUnicode_FromString("... "));

  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04KAJGAOMC@?4?4?4?5?$AA@
  000a0	e8 00 00 00 00	 call	 PyUnicode_FromString
  000a5	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  000aa	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OEDACAH@ps2?$AA@
  000b6	e8 00 00 00 00	 call	 PySys_SetObject
$LN7@PyRun_Inte:

; 1225 :         Py_XDECREF(v);

  000bb	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  000c1	74 0a		 je	 SHORT $LN4@PyRun_Inte
  000c3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyRun_Inte:
  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 e8		 jne	 SHORT $LN7@PyRun_Inte
$LN8@PyRun_Inte:
$LN3@PyRun_Inte:

; 1226 :     }
; 1227 :     for (;;) {
; 1228 :         ret = PyRun_InteractiveOneFlags(fp, filename, flags);

  000d3	4c 8b 44 24 60	 mov	 r8, QWORD PTR flags$[rsp]
  000d8	48 8b 54 24 58	 mov	 rdx, QWORD PTR filename$[rsp]
  000dd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  000e2	e8 00 00 00 00	 call	 PyRun_InteractiveOneFlags
  000e7	89 44 24 2c	 mov	 DWORD PTR ret$[rsp], eax

; 1229 :         PRINT_TOTAL_REFS();

  000eb	e8 00 00 00 00	 call	 _Py_GetRefTotal
  000f0	48 89 44 24 30	 mov	 QWORD PTR tv90[rsp], rax
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  000fb	48 83 c0 60	 add	 rax, 96			; 00000060H
  000ff	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv90[rsp]
  00104	4c 8b c1	 mov	 r8, rcx
  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@HGODPNIO@?$FL?$CFId?5refs?$FN?6?$AA@
  0010e	48 8b c8	 mov	 rcx, rax
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1230 :         if (ret == E_EOF)

  00117	83 7c 24 2c 0b	 cmp	 DWORD PTR ret$[rsp], 11
  0011c	75 04		 jne	 SHORT $LN1@PyRun_Inte

; 1231 :             return 0;

  0011e	33 c0		 xor	 eax, eax
  00120	eb 02		 jmp	 SHORT $LN15@PyRun_Inte
$LN1@PyRun_Inte:

; 1232 :         /*
; 1233 :         if (ret == E_NOMEM)
; 1234 :             return -1;
; 1235 :         */
; 1236 :     }

  00122	eb af		 jmp	 SHORT $LN3@PyRun_Inte
$LN15@PyRun_Inte:

; 1237 : }

  00124	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00128	c3		 ret	 0
PyRun_InteractiveLoopFlags ENDP
_TEXT	ENDS
PUBLIC	PyParser_ASTFromFile
EXTRN	PyArena_Free:PROC
EXTRN	PyArena_New:PROC
EXTRN	PyObject_Str:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_InteractiveOneFlags DD imagerel $LN46
	DD	imagerel $LN46+997
	DD	imagerel $unwind$PyRun_InteractiveOneFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_InteractiveOneFlags DD 021601H
	DD	0170116H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_InteractiveOneFlags
_TEXT	SEGMENT
w$ = 80
v$ = 88
ps1$ = 96
arena$ = 104
ps2$ = 112
d$ = 120
errcode$ = 128
enc$ = 136
mod$ = 144
oenc$ = 152
m$ = 160
fp$ = 192
filename$ = 200
flags$ = 208
PyRun_InteractiveOneFlags PROC				; COMDAT

; 1265 : {

$LN46:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1266 :     PyObject *m, *d, *v, *w, *oenc = NULL;

  00016	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR oenc$[rsp], 0

; 1267 :     mod_ty mod;
; 1268 :     PyArena *arena;
; 1269 :     char *ps1 = "", *ps2 = "", *enc = NULL;

  00022	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00029	48 89 44 24 60	 mov	 QWORD PTR ps1$[rsp], rax
  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00035	48 89 44 24 70	 mov	 QWORD PTR ps2$[rsp], rax
  0003a	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR enc$[rsp], 0

; 1270 :     int errcode = 0;

  00046	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR errcode$[rsp], 0

; 1271 :     _Py_IDENTIFIER(encoding);
; 1272 : 
; 1273 :     if (fp == stdin) {

  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00057	48 39 84 24 c0
	00 00 00	 cmp	 QWORD PTR fp$[rsp], rax
  0005f	0f 85 86 00 00
	00		 jne	 $LN43@PyRun_Inte@2

; 1274 :         /* Fetch encoding from sys.stdin if possible. */
; 1275 :         v = PySys_GetObject("stdin");

  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MHOFLBOO@stdin?$AA@
  0006c	e8 00 00 00 00	 call	 PySys_GetObject
  00071	48 89 44 24 58	 mov	 QWORD PTR v$[rsp], rax

; 1276 :         if (v && v != Py_None) {

  00076	48 83 7c 24 58
	00		 cmp	 QWORD PTR v$[rsp], 0
  0007c	74 6d		 je	 SHORT $LN42@PyRun_Inte@2
  0007e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00085	48 39 44 24 58	 cmp	 QWORD PTR v$[rsp], rax
  0008a	74 5f		 je	 SHORT $LN42@PyRun_Inte@2

; 1277 :             oenc = _PyObject_GetAttrId(v, &PyId_encoding);

  0008c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_encoding@?1??PyRun_InteractiveOneFlags@@9@9
  00091	8b c0		 mov	 eax, eax
  00093	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00099	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000a2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000a6	48 8b d0	 mov	 rdx, rax
  000a9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  000ae	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000b3	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR oenc$[rsp], rax

; 1278 :             if (oenc)

  000bb	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR oenc$[rsp], 0
  000c4	74 15		 je	 SHORT $LN41@PyRun_Inte@2

; 1279 :                 enc = _PyUnicode_AsString(oenc);

  000c6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR oenc$[rsp]
  000ce	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  000d3	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR enc$[rsp], rax
$LN41@PyRun_Inte@2:

; 1280 :             if (!enc)

  000db	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR enc$[rsp], 0
  000e4	75 05		 jne	 SHORT $LN40@PyRun_Inte@2

; 1281 :                 PyErr_Clear();

  000e6	e8 00 00 00 00	 call	 PyErr_Clear
$LN40@PyRun_Inte@2:
$LN42@PyRun_Inte@2:
$LN43@PyRun_Inte@2:

; 1282 :         }
; 1283 :     }
; 1284 :     v = PySys_GetObject("ps1");

  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CFGOFBME@ps1?$AA@
  000f2	e8 00 00 00 00	 call	 PySys_GetObject
  000f7	48 89 44 24 58	 mov	 QWORD PTR v$[rsp], rax

; 1285 :     if (v != NULL) {

  000fc	48 83 7c 24 58
	00		 cmp	 QWORD PTR v$[rsp], 0
  00102	74 5e		 je	 SHORT $LN39@PyRun_Inte@2

; 1286 :         v = PyObject_Str(v);

  00104	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  00109	e8 00 00 00 00	 call	 PyObject_Str
  0010e	48 89 44 24 58	 mov	 QWORD PTR v$[rsp], rax

; 1287 :         if (v == NULL)

  00113	48 83 7c 24 58
	00		 cmp	 QWORD PTR v$[rsp], 0
  00119	75 07		 jne	 SHORT $LN38@PyRun_Inte@2

; 1288 :             PyErr_Clear();

  0011b	e8 00 00 00 00	 call	 PyErr_Clear
  00120	eb 40		 jmp	 SHORT $LN37@PyRun_Inte@2
$LN38@PyRun_Inte@2:

; 1289 :         else if (PyUnicode_Check(v)) {

  00122	48 8b 44 24 58	 mov	 rax, QWORD PTR v$[rsp]
  00127	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0012b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00131	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00136	85 c0		 test	 eax, eax
  00138	74 28		 je	 SHORT $LN36@PyRun_Inte@2

; 1290 :             ps1 = _PyUnicode_AsString(v);

  0013a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  0013f	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00144	48 89 44 24 60	 mov	 QWORD PTR ps1$[rsp], rax

; 1291 :             if (ps1 == NULL) {

  00149	48 83 7c 24 60
	00		 cmp	 QWORD PTR ps1$[rsp], 0
  0014f	75 11		 jne	 SHORT $LN35@PyRun_Inte@2

; 1292 :                 PyErr_Clear();

  00151	e8 00 00 00 00	 call	 PyErr_Clear

; 1293 :                 ps1 = "";

  00156	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0015d	48 89 44 24 60	 mov	 QWORD PTR ps1$[rsp], rax
$LN35@PyRun_Inte@2:
$LN36@PyRun_Inte@2:
$LN37@PyRun_Inte@2:
$LN39@PyRun_Inte@2:

; 1294 :             }
; 1295 :         }
; 1296 :     }
; 1297 :     w = PySys_GetObject("ps2");

  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OEDACAH@ps2?$AA@
  00169	e8 00 00 00 00	 call	 PySys_GetObject
  0016e	48 89 44 24 50	 mov	 QWORD PTR w$[rsp], rax

; 1298 :     if (w != NULL) {

  00173	48 83 7c 24 50
	00		 cmp	 QWORD PTR w$[rsp], 0
  00179	74 5e		 je	 SHORT $LN34@PyRun_Inte@2

; 1299 :         w = PyObject_Str(w);

  0017b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR w$[rsp]
  00180	e8 00 00 00 00	 call	 PyObject_Str
  00185	48 89 44 24 50	 mov	 QWORD PTR w$[rsp], rax

; 1300 :         if (w == NULL)

  0018a	48 83 7c 24 50
	00		 cmp	 QWORD PTR w$[rsp], 0
  00190	75 07		 jne	 SHORT $LN33@PyRun_Inte@2

; 1301 :             PyErr_Clear();

  00192	e8 00 00 00 00	 call	 PyErr_Clear
  00197	eb 40		 jmp	 SHORT $LN32@PyRun_Inte@2
$LN33@PyRun_Inte@2:

; 1302 :         else if (PyUnicode_Check(w)) {

  00199	48 8b 44 24 50	 mov	 rax, QWORD PTR w$[rsp]
  0019e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001a2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001a8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001ad	85 c0		 test	 eax, eax
  001af	74 28		 je	 SHORT $LN31@PyRun_Inte@2

; 1303 :             ps2 = _PyUnicode_AsString(w);

  001b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR w$[rsp]
  001b6	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  001bb	48 89 44 24 70	 mov	 QWORD PTR ps2$[rsp], rax

; 1304 :             if (ps2 == NULL) {

  001c0	48 83 7c 24 70
	00		 cmp	 QWORD PTR ps2$[rsp], 0
  001c6	75 11		 jne	 SHORT $LN30@PyRun_Inte@2

; 1305 :                 PyErr_Clear();

  001c8	e8 00 00 00 00	 call	 PyErr_Clear

; 1306 :                 ps2 = "";

  001cd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  001d4	48 89 44 24 70	 mov	 QWORD PTR ps2$[rsp], rax
$LN30@PyRun_Inte@2:
$LN31@PyRun_Inte@2:
$LN32@PyRun_Inte@2:
$LN34@PyRun_Inte@2:

; 1307 :             }
; 1308 :         }
; 1309 :     }
; 1310 :     arena = PyArena_New();

  001d9	e8 00 00 00 00	 call	 PyArena_New
  001de	48 89 44 24 68	 mov	 QWORD PTR arena$[rsp], rax

; 1311 :     if (arena == NULL) {

  001e3	48 83 7c 24 68
	00		 cmp	 QWORD PTR arena$[rsp], 0
  001e9	75 58		 jne	 SHORT $LN29@PyRun_Inte@2
$LN28@PyRun_Inte@2:

; 1312 :         Py_XDECREF(v);

  001eb	48 83 7c 24 58
	00		 cmp	 QWORD PTR v$[rsp], 0
  001f1	74 0a		 je	 SHORT $LN25@PyRun_Inte@2
  001f3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  001f8	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@PyRun_Inte@2:
  001fd	33 c0		 xor	 eax, eax
  001ff	85 c0		 test	 eax, eax
  00201	75 e8		 jne	 SHORT $LN28@PyRun_Inte@2
$LN24@PyRun_Inte@2:

; 1313 :         Py_XDECREF(w);

  00203	48 83 7c 24 50
	00		 cmp	 QWORD PTR w$[rsp], 0
  00209	74 0a		 je	 SHORT $LN21@PyRun_Inte@2
  0020b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR w$[rsp]
  00210	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@PyRun_Inte@2:
  00215	33 c0		 xor	 eax, eax
  00217	85 c0		 test	 eax, eax
  00219	75 e8		 jne	 SHORT $LN24@PyRun_Inte@2
$LN20@PyRun_Inte@2:

; 1314 :         Py_XDECREF(oenc);

  0021b	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR oenc$[rsp], 0
  00224	74 0d		 je	 SHORT $LN17@PyRun_Inte@2
  00226	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR oenc$[rsp]
  0022e	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@PyRun_Inte@2:
  00233	33 c0		 xor	 eax, eax
  00235	85 c0		 test	 eax, eax
  00237	75 e2		 jne	 SHORT $LN20@PyRun_Inte@2

; 1315 :         return -1;

  00239	b8 ff ff ff ff	 mov	 eax, -1
  0023e	e9 9a 01 00 00	 jmp	 $LN44@PyRun_Inte@2
$LN29@PyRun_Inte@2:

; 1316 :     }
; 1317 :     mod = PyParser_ASTFromFile(fp, filename, enc,
; 1318 :                                Py_single_input, ps1, ps2,
; 1319 :                                flags, &errcode, arena);

  00243	48 8b 44 24 68	 mov	 rax, QWORD PTR arena$[rsp]
  00248	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0024d	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR errcode$[rsp]
  00255	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0025a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR flags$[rsp]
  00262	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00267	48 8b 44 24 70	 mov	 rax, QWORD PTR ps2$[rsp]
  0026c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00271	48 8b 44 24 60	 mov	 rax, QWORD PTR ps1$[rsp]
  00276	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0027b	41 b9 00 01 00
	00		 mov	 r9d, 256		; 00000100H
  00281	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR enc$[rsp]
  00289	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00291	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00299	e8 00 00 00 00	 call	 PyParser_ASTFromFile
  0029e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR mod$[rsp], rax
$LN16@PyRun_Inte@2:

; 1320 :     Py_XDECREF(v);

  002a6	48 83 7c 24 58
	00		 cmp	 QWORD PTR v$[rsp], 0
  002ac	74 0a		 je	 SHORT $LN13@PyRun_Inte@2
  002ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  002b3	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyRun_Inte@2:
  002b8	33 c0		 xor	 eax, eax
  002ba	85 c0		 test	 eax, eax
  002bc	75 e8		 jne	 SHORT $LN16@PyRun_Inte@2
$LN12@PyRun_Inte@2:

; 1321 :     Py_XDECREF(w);

  002be	48 83 7c 24 50
	00		 cmp	 QWORD PTR w$[rsp], 0
  002c4	74 0a		 je	 SHORT $LN9@PyRun_Inte@2
  002c6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR w$[rsp]
  002cb	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyRun_Inte@2:
  002d0	33 c0		 xor	 eax, eax
  002d2	85 c0		 test	 eax, eax
  002d4	75 e8		 jne	 SHORT $LN12@PyRun_Inte@2
$LN8@PyRun_Inte@2:

; 1322 :     Py_XDECREF(oenc);

  002d6	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR oenc$[rsp], 0
  002df	74 0d		 je	 SHORT $LN5@PyRun_Inte@2
  002e1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR oenc$[rsp]
  002e9	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyRun_Inte@2:
  002ee	33 c0		 xor	 eax, eax
  002f0	85 c0		 test	 eax, eax
  002f2	75 e2		 jne	 SHORT $LN8@PyRun_Inte@2

; 1323 :     if (mod == NULL) {

  002f4	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR mod$[rsp], 0
  002fd	75 32		 jne	 SHORT $LN4@PyRun_Inte@2

; 1324 :         PyArena_Free(arena);

  002ff	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00304	e8 00 00 00 00	 call	 PyArena_Free

; 1325 :         if (errcode == E_EOF) {

  00309	83 bc 24 80 00
	00 00 0b	 cmp	 DWORD PTR errcode$[rsp], 11
  00311	75 0f		 jne	 SHORT $LN3@PyRun_Inte@2

; 1326 :             PyErr_Clear();

  00313	e8 00 00 00 00	 call	 PyErr_Clear

; 1327 :             return E_EOF;

  00318	b8 0b 00 00 00	 mov	 eax, 11
  0031d	e9 bb 00 00 00	 jmp	 $LN44@PyRun_Inte@2
$LN3@PyRun_Inte@2:

; 1328 :         }
; 1329 :         PyErr_Print();

  00322	e8 00 00 00 00	 call	 PyErr_Print

; 1330 :         return -1;

  00327	b8 ff ff ff ff	 mov	 eax, -1
  0032c	e9 ac 00 00 00	 jmp	 $LN44@PyRun_Inte@2
$LN4@PyRun_Inte@2:

; 1331 :     }
; 1332 :     m = PyImport_AddModule("__main__");

  00331	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00338	e8 00 00 00 00	 call	 PyImport_AddModule
  0033d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR m$[rsp], rax

; 1333 :     if (m == NULL) {

  00345	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR m$[rsp], 0
  0034e	75 11		 jne	 SHORT $LN2@PyRun_Inte@2

; 1334 :         PyArena_Free(arena);

  00350	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  00355	e8 00 00 00 00	 call	 PyArena_Free

; 1335 :         return -1;

  0035a	b8 ff ff ff ff	 mov	 eax, -1
  0035f	eb 7c		 jmp	 SHORT $LN44@PyRun_Inte@2
$LN2@PyRun_Inte@2:

; 1336 :     }
; 1337 :     d = PyModule_GetDict(m);

  00361	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR m$[rsp]
  00369	e8 00 00 00 00	 call	 PyModule_GetDict
  0036e	48 89 44 24 78	 mov	 QWORD PTR d$[rsp], rax

; 1338 :     v = run_mod(mod, filename, d, d, flags, arena);

  00373	48 8b 44 24 68	 mov	 rax, QWORD PTR arena$[rsp]
  00378	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0037d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR flags$[rsp]
  00385	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0038a	4c 8b 4c 24 78	 mov	 r9, QWORD PTR d$[rsp]
  0038f	4c 8b 44 24 78	 mov	 r8, QWORD PTR d$[rsp]
  00394	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  0039c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR mod$[rsp]
  003a4	e8 00 00 00 00	 call	 run_mod
  003a9	48 89 44 24 58	 mov	 QWORD PTR v$[rsp], rax

; 1339 :     PyArena_Free(arena);

  003ae	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arena$[rsp]
  003b3	e8 00 00 00 00	 call	 PyArena_Free

; 1340 :     flush_io();

  003b8	e8 00 00 00 00	 call	 flush_io

; 1341 :     if (v == NULL) {

  003bd	48 83 7c 24 58
	00		 cmp	 QWORD PTR v$[rsp], 0
  003c3	75 0c		 jne	 SHORT $LN1@PyRun_Inte@2

; 1342 :         PyErr_Print();

  003c5	e8 00 00 00 00	 call	 PyErr_Print

; 1343 :         return -1;

  003ca	b8 ff ff ff ff	 mov	 eax, -1
  003cf	eb 0c		 jmp	 SHORT $LN44@PyRun_Inte@2
$LN1@PyRun_Inte@2:

; 1344 :     }
; 1345 :     Py_DECREF(v);

  003d1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$[rsp]
  003d6	e8 00 00 00 00	 call	 _Py_DecRef

; 1346 :     return 0;

  003db	33 c0		 xor	 eax, eax
$LN44@PyRun_Inte@2:

; 1347 : }

  003dd	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  003e4	c3		 ret	 0
PyRun_InteractiveOneFlags ENDP
_TEXT	ENDS
PUBLIC	PyRun_FileExFlags
PUBLIC	??_C@_0BB@KNHNFDFI@SourceFileLoader?$AA@	; `string'
PUBLIC	??_C@_0CL@HOHNJFCL@python?3?5failed?5to?5set?5__main__?4_@ ; `string'
PUBLIC	??_C@_0BF@JDOCAIAK@SourcelessFileLoader?$AA@	; `string'
PUBLIC	??_C@_04JFFGBNKM@?4pyo?$AA@			; `string'
PUBLIC	??_C@_0CA@PGFKDAAB@python?3?5Can?8t?5reopen?5?4pyc?5file?6?$AA@ ; `string'
PUBLIC	??_C@_0L@KPCCMMEA@__cached__?$AA@		; `string'
PUBLIC	??_C@_08PFHPBGLK@__file__?$AA@			; `string'
EXTRN	PyDict_DelItemString:PROC
EXTRN	strcmp:PROC
EXTRN	__imp_fopen:PROC
EXTRN	strlen:PROC
EXTRN	PyUnicode_DecodeFSDefault:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_SimpleFileExFlags DD imagerel $LN19
	DD	imagerel $LN19+903
	DD	imagerel $unwind$PyRun_SimpleFileExFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_SimpleFileExFlags DD 021b01H
	DD	013011bH
xdata	ENDS
;	COMDAT ??_C@_0BB@KNHNFDFI@SourceFileLoader?$AA@
CONST	SEGMENT
??_C@_0BB@KNHNFDFI@SourceFileLoader?$AA@ DB 'SourceFileLoader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HOHNJFCL@python?3?5failed?5to?5set?5__main__?4_@
CONST	SEGMENT
??_C@_0CL@HOHNJFCL@python?3?5failed?5to?5set?5__main__?4_@ DB 'python: fa'
	DB	'iled to set __main__.__loader__', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JDOCAIAK@SourcelessFileLoader?$AA@
CONST	SEGMENT
??_C@_0BF@JDOCAIAK@SourcelessFileLoader?$AA@ DB 'SourcelessFileLoader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFFGBNKM@?4pyo?$AA@
CONST	SEGMENT
??_C@_04JFFGBNKM@?4pyo?$AA@ DB '.pyo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PGFKDAAB@python?3?5Can?8t?5reopen?5?4pyc?5file?6?$AA@
CONST	SEGMENT
??_C@_0CA@PGFKDAAB@python?3?5Can?8t?5reopen?5?4pyc?5file?6?$AA@ DB 'pytho'
	DB	'n: Can''t reopen .pyc file', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KPCCMMEA@__cached__?$AA@
CONST	SEGMENT
??_C@_0L@KPCCMMEA@__cached__?$AA@ DB '__cached__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PFHPBGLK@__file__?$AA@
CONST	SEGMENT
??_C@_08PFHPBGLK@__file__?$AA@ DB '__file__', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyRun_SimpleFileExFlags
_TEXT	SEGMENT
v$ = 64
len$ = 72
ext$ = 80
ret$ = 88
set_file_name$ = 92
d$ = 96
m$ = 104
f$122894 = 112
pyc_fp$122905 = 120
tv94 = 128
fp$ = 160
filename$ = 168
closeit$ = 176
flags$ = 184
PyRun_SimpleFileExFlags PROC				; COMDAT

; 1423 : {

$LN19:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1424 :     PyObject *m, *d, *v;
; 1425 :     const char *ext;
; 1426 :     int set_file_name = 0, ret = -1;

  0001b	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR set_file_name$[rsp], 0
  00023	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 1427 :     size_t len;
; 1428 : 
; 1429 :     m = PyImport_AddModule("__main__");

  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00032	e8 00 00 00 00	 call	 PyImport_AddModule
  00037	48 89 44 24 68	 mov	 QWORD PTR m$[rsp], rax

; 1430 :     if (m == NULL)

  0003c	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$[rsp], 0
  00042	75 0a		 jne	 SHORT $LN14@PyRun_Simp

; 1431 :         return -1;

  00044	b8 ff ff ff ff	 mov	 eax, -1
  00049	e9 31 03 00 00	 jmp	 $LN15@PyRun_Simp
$LN14@PyRun_Simp:

; 1432 :     Py_INCREF(m);

  0004e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  00053	e8 00 00 00 00	 call	 _Py_IncRef

; 1433 :     d = PyModule_GetDict(m);

  00058	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  0005d	e8 00 00 00 00	 call	 PyModule_GetDict
  00062	48 89 44 24 60	 mov	 QWORD PTR d$[rsp], rax

; 1434 :     if (PyDict_GetItemString(d, "__file__") == NULL) {

  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  0006e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  00073	e8 00 00 00 00	 call	 PyDict_GetItemString
  00078	48 85 c0	 test	 rax, rax
  0007b	0f 85 85 00 00
	00		 jne	 $LN13@PyRun_Simp

; 1435 :         PyObject *f;
; 1436 :         f = PyUnicode_DecodeFSDefault(filename);

  00081	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00089	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  0008e	48 89 44 24 70	 mov	 QWORD PTR f$122894[rsp], rax

; 1437 :         if (f == NULL)

  00093	48 83 7c 24 70
	00		 cmp	 QWORD PTR f$122894[rsp], 0
  00099	75 05		 jne	 SHORT $LN12@PyRun_Simp

; 1438 :             goto done;

  0009b	e9 b0 02 00 00	 jmp	 $done$122897
$LN12@PyRun_Simp:

; 1439 :         if (PyDict_SetItemString(d, "__file__", f) < 0) {

  000a0	4c 8b 44 24 70	 mov	 r8, QWORD PTR f$122894[rsp]
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  000ac	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  000b1	e8 00 00 00 00	 call	 PyDict_SetItemString
  000b6	85 c0		 test	 eax, eax
  000b8	7d 0f		 jge	 SHORT $LN11@PyRun_Simp

; 1440 :             Py_DECREF(f);

  000ba	48 8b 4c 24 70	 mov	 rcx, QWORD PTR f$122894[rsp]
  000bf	e8 00 00 00 00	 call	 _Py_DecRef

; 1441 :             goto done;

  000c4	e9 87 02 00 00	 jmp	 $done$122897
$LN11@PyRun_Simp:

; 1442 :         }
; 1443 :         if (PyDict_SetItemString(d, "__cached__", Py_None) < 0) {

  000c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@KPCCMMEA@__cached__?$AA@
  000d7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  000dc	e8 00 00 00 00	 call	 PyDict_SetItemString
  000e1	85 c0		 test	 eax, eax
  000e3	7d 0f		 jge	 SHORT $LN10@PyRun_Simp

; 1444 :             Py_DECREF(f);

  000e5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR f$122894[rsp]
  000ea	e8 00 00 00 00	 call	 _Py_DecRef

; 1445 :             goto done;

  000ef	e9 5c 02 00 00	 jmp	 $done$122897
$LN10@PyRun_Simp:

; 1446 :         }
; 1447 :         set_file_name = 1;

  000f4	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR set_file_name$[rsp], 1

; 1448 :         Py_DECREF(f);

  000fc	48 8b 4c 24 70	 mov	 rcx, QWORD PTR f$122894[rsp]
  00101	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyRun_Simp:

; 1449 :     }
; 1450 :     len = strlen(filename);

  00106	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  0010e	e8 00 00 00 00	 call	 strlen
  00113	48 89 44 24 48	 mov	 QWORD PTR len$[rsp], rax

; 1451 :     ext = filename + len - (len > 4 ? 4 : 0);

  00118	48 83 7c 24 48
	04		 cmp	 QWORD PTR len$[rsp], 4
  0011e	76 0d		 jbe	 SHORT $LN17@PyRun_Simp
  00120	c7 84 24 80 00
	00 00 04 00 00
	00		 mov	 DWORD PTR tv94[rsp], 4
  0012b	eb 0b		 jmp	 SHORT $LN18@PyRun_Simp
$LN17@PyRun_Simp:
  0012d	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv94[rsp], 0
$LN18@PyRun_Simp:
  00138	48 8b 44 24 48	 mov	 rax, QWORD PTR len$[rsp]
  0013d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00145	48 03 c8	 add	 rcx, rax
  00148	48 8b c1	 mov	 rax, rcx
  0014b	48 63 8c 24 80
	00 00 00	 movsxd	 rcx, DWORD PTR tv94[rsp]
  00153	48 2b c1	 sub	 rax, rcx
  00156	48 89 44 24 50	 mov	 QWORD PTR ext$[rsp], rax

; 1452 :     if (maybe_pyc_file(fp, filename, ext, closeit)) {

  0015b	44 8b 8c 24 b0
	00 00 00	 mov	 r9d, DWORD PTR closeit$[rsp]
  00163	4c 8b 44 24 50	 mov	 r8, QWORD PTR ext$[rsp]
  00168	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00170	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00178	e8 00 00 00 00	 call	 maybe_pyc_file
  0017d	85 c0		 test	 eax, eax
  0017f	0f 84 05 01 00
	00		 je	 $LN9@PyRun_Simp

; 1453 :         FILE *pyc_fp;
; 1454 :         /* Try to run a pyc file. First, re-open in binary */
; 1455 :         if (closeit)

  00185	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR closeit$[rsp], 0
  0018d	74 0e		 je	 SHORT $LN8@PyRun_Simp

; 1456 :             fclose(fp);

  0018f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00197	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN8@PyRun_Simp:

; 1457 :         if ((pyc_fp = fopen(filename, "rb")) == NULL) {

  0019d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  001a4	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  001b2	48 89 44 24 78	 mov	 QWORD PTR pyc_fp$122905[rsp], rax
  001b7	48 83 7c 24 78
	00		 cmp	 QWORD PTR pyc_fp$122905[rsp], 0
  001bd	75 1f		 jne	 SHORT $LN7@PyRun_Simp

; 1458 :             fprintf(stderr, "python: Can't reopen .pyc file\n");

  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001c5	48 83 c0 60	 add	 rax, 96			; 00000060H
  001c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@PGFKDAAB@python?3?5Can?8t?5reopen?5?4pyc?5file?6?$AA@
  001d0	48 8b c8	 mov	 rcx, rax
  001d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1459 :             goto done;

  001d9	e9 72 01 00 00	 jmp	 $done$122897
$LN7@PyRun_Simp:

; 1460 :         }
; 1461 :         /* Turn on optimization if a .pyo file is given */
; 1462 :         if (strcmp(ext, ".pyo") == 0)

  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04JFFGBNKM@?4pyo?$AA@
  001e5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ext$[rsp]
  001ea	e8 00 00 00 00	 call	 strcmp
  001ef	85 c0		 test	 eax, eax
  001f1	75 0a		 jne	 SHORT $LN6@PyRun_Simp

; 1463 :             Py_OptimizeFlag = 1;

  001f3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR Py_OptimizeFlag, 1
$LN6@PyRun_Simp:

; 1464 : 
; 1465 :         if (set_main_loader(d, filename, "SourcelessFileLoader") < 0) {

  001fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@JDOCAIAK@SourcelessFileLoader?$AA@
  00204	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  0020c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  00211	e8 00 00 00 00	 call	 set_main_loader
  00216	85 c0		 test	 eax, eax
  00218	7d 32		 jge	 SHORT $LN5@PyRun_Simp

; 1466 :             fprintf(stderr, "python: failed to set __main__.__loader__\n");

  0021a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00220	48 83 c0 60	 add	 rax, 96			; 00000060H
  00224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HOHNJFCL@python?3?5failed?5to?5set?5__main__?4_@
  0022b	48 8b c8	 mov	 rcx, rax
  0022e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1467 :             ret = -1;

  00234	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 1468 :             fclose(pyc_fp);

  0023c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pyc_fp$122905[rsp]
  00241	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 1469 :             goto done;

  00247	e9 04 01 00 00	 jmp	 $done$122897
$LN5@PyRun_Simp:

; 1470 :         }
; 1471 :         v = run_pyc_file(pyc_fp, filename, d, d, flags);

  0024c	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR flags$[rsp]
  00254	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00259	4c 8b 4c 24 60	 mov	 r9, QWORD PTR d$[rsp]
  0025e	4c 8b 44 24 60	 mov	 r8, QWORD PTR d$[rsp]
  00263	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  0026b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pyc_fp$122905[rsp]
  00270	e8 00 00 00 00	 call	 run_pyc_file
  00275	48 89 44 24 40	 mov	 QWORD PTR v$[rsp], rax

; 1472 :         fclose(pyc_fp);

  0027a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pyc_fp$122905[rsp]
  0027f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 1473 :     } else {

  00285	e9 a0 00 00 00	 jmp	 $LN4@PyRun_Simp
$LN9@PyRun_Simp:

; 1474 :         /* When running from stdin, leave __main__.__loader__ alone */
; 1475 :         if (strcmp(filename, "<stdin>") != 0 &&
; 1476 :             set_main_loader(d, filename, "SourceFileLoader") < 0) {

  0028a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@
  00291	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00299	e8 00 00 00 00	 call	 strcmp
  0029e	85 c0		 test	 eax, eax
  002a0	74 41		 je	 SHORT $LN3@PyRun_Simp
  002a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@KNHNFDFI@SourceFileLoader?$AA@
  002a9	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  002b1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  002b6	e8 00 00 00 00	 call	 set_main_loader
  002bb	85 c0		 test	 eax, eax
  002bd	7d 24		 jge	 SHORT $LN3@PyRun_Simp

; 1477 :             fprintf(stderr, "python: failed to set __main__.__loader__\n");

  002bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  002c5	48 83 c0 60	 add	 rax, 96			; 00000060H
  002c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HOHNJFCL@python?3?5failed?5to?5set?5__main__?4_@
  002d0	48 8b c8	 mov	 rcx, rax
  002d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1478 :             ret = -1;

  002d9	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 1479 :             goto done;

  002e1	eb 6d		 jmp	 SHORT $done$122897
$LN3@PyRun_Simp:

; 1480 :         }
; 1481 :         v = PyRun_FileExFlags(fp, filename, Py_file_input, d, d,
; 1482 :                               closeit, flags);

  002e3	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR flags$[rsp]
  002eb	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  002f0	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR closeit$[rsp]
  002f7	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  002fb	48 8b 44 24 60	 mov	 rax, QWORD PTR d$[rsp]
  00300	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00305	4c 8b 4c 24 60	 mov	 r9, QWORD PTR d$[rsp]
  0030a	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00310	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00318	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00320	e8 00 00 00 00	 call	 PyRun_FileExFlags
  00325	48 89 44 24 40	 mov	 QWORD PTR v$[rsp], rax
$LN4@PyRun_Simp:

; 1483 :     }
; 1484 :     flush_io();

  0032a	e8 00 00 00 00	 call	 flush_io

; 1485 :     if (v == NULL) {

  0032f	48 83 7c 24 40
	00		 cmp	 QWORD PTR v$[rsp], 0
  00335	75 07		 jne	 SHORT $LN2@PyRun_Simp

; 1486 :         PyErr_Print();

  00337	e8 00 00 00 00	 call	 PyErr_Print

; 1487 :         goto done;

  0033c	eb 12		 jmp	 SHORT $done$122897
$LN2@PyRun_Simp:

; 1488 :     }
; 1489 :     Py_DECREF(v);

  0033e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00343	e8 00 00 00 00	 call	 _Py_DecRef

; 1490 :     ret = 0;

  00348	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0
$done$122897:

; 1491 :   done:
; 1492 :     if (set_file_name && PyDict_DelItemString(d, "__file__"))

  00350	83 7c 24 5c 00	 cmp	 DWORD PTR set_file_name$[rsp], 0
  00355	74 1a		 je	 SHORT $LN1@PyRun_Simp
  00357	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  0035e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  00363	e8 00 00 00 00	 call	 PyDict_DelItemString
  00368	85 c0		 test	 eax, eax
  0036a	74 05		 je	 SHORT $LN1@PyRun_Simp

; 1493 :         PyErr_Clear();

  0036c	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@PyRun_Simp:

; 1494 :     Py_DECREF(m);

  00371	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  00376	e8 00 00 00 00	 call	 _Py_DecRef

; 1495 :     return ret;

  0037b	8b 44 24 58	 mov	 eax, DWORD PTR ret$[rsp]
$LN15@PyRun_Simp:

; 1496 : }

  0037f	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00386	c3		 ret	 0
PyRun_SimpleFileExFlags ENDP
_TEXT	ENDS
PUBLIC	??_C@_04DJODFCKA@?4pyc?$AA@			; `string'
EXTRN	__imp_rewind:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp_ftell:PROC
EXTRN	PyImport_GetMagicNumber:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$maybe_pyc_file DD imagerel maybe_pyc_file
	DD	imagerel maybe_pyc_file+203
	DD	imagerel $unwind$maybe_pyc_file
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$maybe_pyc_file DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_04DJODFCKA@?4pyc?$AA@
CONST	SEGMENT
??_C@_04DJODFCKA@?4pyc?$AA@ DB '.pyc', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT maybe_pyc_file
_TEXT	SEGMENT
halfmagic$122841 = 32
ispyc$122843 = 36
buf$122842 = 40
fp$ = 64
filename$ = 72
ext$ = 80
closeit$ = 88
maybe_pyc_file PROC					; COMDAT

; 1354 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1355 :     if (strcmp(ext, ".pyc") == 0 || strcmp(ext, ".pyo") == 0)

  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DJODFCKA@?4pyc?$AA@
  0001f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ext$[rsp]
  00024	e8 00 00 00 00	 call	 strcmp
  00029	85 c0		 test	 eax, eax
  0002b	74 15		 je	 SHORT $LN4@maybe_pyc_
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04JFFGBNKM@?4pyo?$AA@
  00034	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ext$[rsp]
  00039	e8 00 00 00 00	 call	 strcmp
  0003e	85 c0		 test	 eax, eax
  00040	75 07		 jne	 SHORT $LN5@maybe_pyc_
$LN4@maybe_pyc_:

; 1356 :         return 1;

  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	eb 7d		 jmp	 SHORT $LN6@maybe_pyc_
$LN5@maybe_pyc_:

; 1357 : 
; 1358 :     /* Only look into the file if we are allowed to close it, since
; 1359 :        it then should also be seekable. */
; 1360 :     if (closeit) {

  00049	83 7c 24 58 00	 cmp	 DWORD PTR closeit$[rsp], 0
  0004e	74 74		 je	 SHORT $LN3@maybe_pyc_

; 1361 :         /* Read only two bytes of the magic. If the file was opened in
; 1362 :            text mode, the bytes 3 and 4 of the magic (\r\n) might not
; 1363 :            be read as they are on disk. */
; 1364 :         unsigned int halfmagic = PyImport_GetMagicNumber() & 0xFFFF;

  00050	e8 00 00 00 00	 call	 PyImport_GetMagicNumber
  00055	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0005a	89 44 24 20	 mov	 DWORD PTR halfmagic$122841[rsp], eax

; 1365 :         unsigned char buf[2];
; 1366 :         /* Mess:  In case of -x, the stream is NOT at its start now,
; 1367 :            and ungetc() was used to push back the first newline,
; 1368 :            which makes the current stream position formally undefined,
; 1369 :            and a x-platform nightmare.
; 1370 :            Unfortunately, we have no direct way to know whether -x
; 1371 :            was specified.  So we use a terrible hack:  if the current
; 1372 :            stream position is not 0, we assume -x was specified, and
; 1373 :            give up.  Bug 132850 on SourceForge spells out the
; 1374 :            hopelessness of trying anything else (fseek and ftell
; 1375 :            don't work predictably x-platform for text-mode files).
; 1376 :         */
; 1377 :         int ispyc = 0;

  0005e	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR ispyc$122843[rsp], 0

; 1378 :         if (ftell(fp) == 0) {

  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ftell
  00071	85 c0		 test	 eax, eax
  00073	75 49		 jne	 SHORT $LN2@maybe_pyc_

; 1379 :             if (fread(buf, 1, 2, fp) == 2 &&
; 1380 :                 ((unsigned int)buf[1]<<8 | buf[0]) == halfmagic)

  00075	4c 8b 4c 24 40	 mov	 r9, QWORD PTR fp$[rsp]
  0007a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 8d 4c 24 28	 lea	 rcx, QWORD PTR buf$122842[rsp]
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  00090	48 83 f8 02	 cmp	 rax, 2
  00094	75 1d		 jne	 SHORT $LN1@maybe_pyc_
  00096	0f b6 44 24 29	 movzx	 eax, BYTE PTR buf$122842[rsp+1]
  0009b	c1 e0 08	 shl	 eax, 8
  0009e	0f b6 4c 24 28	 movzx	 ecx, BYTE PTR buf$122842[rsp]
  000a3	0b c1		 or	 eax, ecx
  000a5	3b 44 24 20	 cmp	 eax, DWORD PTR halfmagic$122841[rsp]
  000a9	75 08		 jne	 SHORT $LN1@maybe_pyc_

; 1381 :                 ispyc = 1;

  000ab	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR ispyc$122843[rsp], 1
$LN1@maybe_pyc_:

; 1382 :             rewind(fp);

  000b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rewind
$LN2@maybe_pyc_:

; 1383 :         }
; 1384 :         return ispyc;

  000be	8b 44 24 24	 mov	 eax, DWORD PTR ispyc$122843[rsp]
  000c2	eb 02		 jmp	 SHORT $LN6@maybe_pyc_
$LN3@maybe_pyc_:

; 1385 :     }
; 1386 :     return 0;

  000c4	33 c0		 xor	 eax, eax
$LN6@maybe_pyc_:

; 1387 : }

  000c6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ca	c3		 ret	 0
maybe_pyc_file ENDP
_TEXT	ENDS
PUBLIC	??_C@_02DIPDJCGP@sN?$AA@			; `string'
EXTRN	PyObject_CallFunction:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$set_main_loader DD imagerel set_main_loader
	DD	imagerel set_main_loader+245
	DD	imagerel $unwind$set_main_loader
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$set_main_loader DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_02DIPDJCGP@sN?$AA@
CONST	SEGMENT
??_C@_02DIPDJCGP@sN?$AA@ DB 'sN', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT set_main_loader
_TEXT	SEGMENT
filename_obj$ = 32
tstate$ = 40
interp$ = 48
result$ = 56
loader$ = 64
loader_type$ = 72
d$ = 96
filename$ = 104
loader_name$ = 112
set_main_loader PROC					; COMDAT

; 1391 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1392 :     PyInterpreterState *interp;
; 1393 :     PyThreadState *tstate;
; 1394 :     PyObject *filename_obj, *loader_type, *loader;
; 1395 :     int result = 0;

  00013	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 1396 : 
; 1397 :     filename_obj = PyUnicode_DecodeFSDefault(filename);

  0001b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR filename$[rsp]
  00020	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  00025	48 89 44 24 20	 mov	 QWORD PTR filename_obj$[rsp], rax

; 1398 :     if (filename_obj == NULL)

  0002a	48 83 7c 24 20
	00		 cmp	 QWORD PTR filename_obj$[rsp], 0
  00030	75 0a		 jne	 SHORT $LN4@set_main_l

; 1399 :         return -1;

  00032	b8 ff ff ff ff	 mov	 eax, -1
  00037	e9 b4 00 00 00	 jmp	 $LN5@set_main_l
$LN4@set_main_l:

; 1400 :     /* Get current thread state and interpreter pointer */
; 1401 :     tstate = PyThreadState_GET();

  0003c	e8 00 00 00 00	 call	 PyThreadState_Get
  00041	48 89 44 24 28	 mov	 QWORD PTR tstate$[rsp], rax

; 1402 :     interp = tstate->interp;

  00046	48 8b 44 24 28	 mov	 rax, QWORD PTR tstate$[rsp]
  0004b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004f	48 89 44 24 30	 mov	 QWORD PTR interp$[rsp], rax

; 1403 :     loader_type = PyObject_GetAttrString(interp->importlib, loader_name);

  00054	48 8b 54 24 70	 mov	 rdx, QWORD PTR loader_name$[rsp]
  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR interp$[rsp]
  0005e	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00062	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00067	48 89 44 24 48	 mov	 QWORD PTR loader_type$[rsp], rax

; 1404 :     if (loader_type == NULL) {

  0006c	48 83 7c 24 48
	00		 cmp	 QWORD PTR loader_type$[rsp], 0
  00072	75 11		 jne	 SHORT $LN3@set_main_l

; 1405 :         Py_DECREF(filename_obj);

  00074	48 8b 4c 24 20	 mov	 rcx, QWORD PTR filename_obj$[rsp]
  00079	e8 00 00 00 00	 call	 _Py_DecRef

; 1406 :         return -1;

  0007e	b8 ff ff ff ff	 mov	 eax, -1
  00083	eb 6b		 jmp	 SHORT $LN5@set_main_l
$LN3@set_main_l:

; 1407 :     }
; 1408 :     loader = PyObject_CallFunction(loader_type, "sN", "__main__", filename_obj);

  00085	4c 8b 4c 24 20	 mov	 r9, QWORD PTR filename_obj$[rsp]
  0008a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DIPDJCGP@sN?$AA@
  00098	48 8b 4c 24 48	 mov	 rcx, QWORD PTR loader_type$[rsp]
  0009d	e8 00 00 00 00	 call	 PyObject_CallFunction
  000a2	48 89 44 24 40	 mov	 QWORD PTR loader$[rsp], rax

; 1409 :     Py_DECREF(loader_type);

  000a7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR loader_type$[rsp]
  000ac	e8 00 00 00 00	 call	 _Py_DecRef

; 1410 :     if (loader == NULL) {

  000b1	48 83 7c 24 40
	00		 cmp	 QWORD PTR loader$[rsp], 0
  000b7	75 07		 jne	 SHORT $LN2@set_main_l

; 1411 :         return -1;

  000b9	b8 ff ff ff ff	 mov	 eax, -1
  000be	eb 30		 jmp	 SHORT $LN5@set_main_l
$LN2@set_main_l:

; 1412 :     }
; 1413 :     if (PyDict_SetItemString(d, "__loader__", loader) < 0) {

  000c0	4c 8b 44 24 40	 mov	 r8, QWORD PTR loader$[rsp]
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PADOMILC@__loader__?$AA@
  000cc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  000d1	e8 00 00 00 00	 call	 PyDict_SetItemString
  000d6	85 c0		 test	 eax, eax
  000d8	7d 08		 jge	 SHORT $LN1@set_main_l

; 1414 :         result = -1;

  000da	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR result$[rsp], -1
$LN1@set_main_l:

; 1415 :     }
; 1416 :     Py_DECREF(loader);

  000e2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR loader$[rsp]
  000e7	e8 00 00 00 00	 call	 _Py_DecRef

; 1417 :     return result;

  000ec	8b 44 24 38	 mov	 eax, DWORD PTR result$[rsp]
$LN5@set_main_l:

; 1418 : }

  000f0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f4	c3		 ret	 0
set_main_loader ENDP
_TEXT	ENDS
PUBLIC	PyRun_StringFlags
PUBLIC	PyRun_SimpleStringFlags
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_SimpleStringFlags DD imagerel $LN5
	DD	imagerel $LN5+138
	DD	imagerel $unwind$PyRun_SimpleStringFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_SimpleStringFlags DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_SimpleStringFlags
_TEXT	SEGMENT
v$ = 48
d$ = 56
m$ = 64
command$ = 96
flags$ = 104
PyRun_SimpleStringFlags PROC				; COMDAT

; 1500 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1501 :     PyObject *m, *d, *v;
; 1502 :     m = PyImport_AddModule("__main__");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00015	e8 00 00 00 00	 call	 PyImport_AddModule
  0001a	48 89 44 24 40	 mov	 QWORD PTR m$[rsp], rax

; 1503 :     if (m == NULL)

  0001f	48 83 7c 24 40
	00		 cmp	 QWORD PTR m$[rsp], 0
  00025	75 07		 jne	 SHORT $LN2@PyRun_Simp@2

; 1504 :         return -1;

  00027	b8 ff ff ff ff	 mov	 eax, -1
  0002c	eb 57		 jmp	 SHORT $LN3@PyRun_Simp@2
$LN2@PyRun_Simp@2:

; 1505 :     d = PyModule_GetDict(m);

  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  00033	e8 00 00 00 00	 call	 PyModule_GetDict
  00038	48 89 44 24 38	 mov	 QWORD PTR d$[rsp], rax

; 1506 :     v = PyRun_StringFlags(command, Py_file_input, d, d, flags);

  0003d	48 8b 44 24 68	 mov	 rax, QWORD PTR flags$[rsp]
  00042	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00047	4c 8b 4c 24 38	 mov	 r9, QWORD PTR d$[rsp]
  0004c	4c 8b 44 24 38	 mov	 r8, QWORD PTR d$[rsp]
  00051	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  00056	48 8b 4c 24 60	 mov	 rcx, QWORD PTR command$[rsp]
  0005b	e8 00 00 00 00	 call	 PyRun_StringFlags
  00060	48 89 44 24 30	 mov	 QWORD PTR v$[rsp], rax

; 1507 :     if (v == NULL) {

  00065	48 83 7c 24 30
	00		 cmp	 QWORD PTR v$[rsp], 0
  0006b	75 0c		 jne	 SHORT $LN1@PyRun_Simp@2

; 1508 :         PyErr_Print();

  0006d	e8 00 00 00 00	 call	 PyErr_Print

; 1509 :         return -1;

  00072	b8 ff ff ff ff	 mov	 eax, -1
  00077	eb 0c		 jmp	 SHORT $LN3@PyRun_Simp@2
$LN1@PyRun_Simp@2:

; 1510 :     }
; 1511 :     Py_DECREF(v);

  00079	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  0007e	e8 00 00 00 00	 call	 _Py_DecRef

; 1512 :     return 0;

  00083	33 c0		 xor	 eax, eax
$LN3@PyRun_Simp@2:

; 1513 : }

  00085	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00089	c3		 ret	 0
PyRun_SimpleStringFlags ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_Print DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$PyErr_Print
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Print DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_Print
_TEXT	SEGMENT
PyErr_Print PROC					; COMDAT

; 1593 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1594 :     PyErr_PrintEx(1);

  00004	b9 01 00 00 00	 mov	 ecx, 1
  00009	e8 00 00 00 00	 call	 PyErr_PrintEx

; 1595 : }

  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	c3		 ret	 0
PyErr_Print ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@MEIMIMHC@sys?4excepthook?5is?5missing?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@LFLHLMAE@?6Original?5exception?5was?3?6?$AA@ ; `string'
PUBLIC	PyErr_Display
PUBLIC	??_C@_0BK@OEGNGKBF@Error?5in?5sys?4excepthook?3?6?$AA@ ; `string'
PUBLIC	??_C@_0L@NONONIOP@excepthook?$AA@		; `string'
PUBLIC	??_C@_0P@IGCACIDI@last_traceback?$AA@		; `string'
PUBLIC	??_C@_0L@IGFDBBEF@last_value?$AA@		; `string'
PUBLIC	??_C@_09NIIGAFC@last_type?$AA@			; `string'
EXTRN	PySys_WriteStderr:PROC
EXTRN	__imp_fflush:PROC
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyTuple_Pack:PROC
EXTRN	PyException_SetTraceback:PROC
EXTRN	PyErr_NormalizeException:PROC
EXTRN	PyErr_Fetch:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_SystemExit:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_PrintEx DD imagerel $LN38
	DD	imagerel $LN38+702
	DD	imagerel $unwind$PyErr_PrintEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_PrintEx DD 010801H
	DD	0e208H
xdata	ENDS
;	COMDAT ??_C@_0BL@MEIMIMHC@sys?4excepthook?5is?5missing?6?$AA@
CONST	SEGMENT
??_C@_0BL@MEIMIMHC@sys?4excepthook?5is?5missing?6?$AA@ DB 'sys.excepthook'
	DB	' is missing', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LFLHLMAE@?6Original?5exception?5was?3?6?$AA@
CONST	SEGMENT
??_C@_0BK@LFLHLMAE@?6Original?5exception?5was?3?6?$AA@ DB 0aH, 'Original '
	DB	'exception was:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OEGNGKBF@Error?5in?5sys?4excepthook?3?6?$AA@
CONST	SEGMENT
??_C@_0BK@OEGNGKBF@Error?5in?5sys?4excepthook?3?6?$AA@ DB 'Error in sys.e'
	DB	'xcepthook:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NONONIOP@excepthook?$AA@
CONST	SEGMENT
??_C@_0L@NONONIOP@excepthook?$AA@ DB 'excepthook', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IGCACIDI@last_traceback?$AA@
CONST	SEGMENT
??_C@_0P@IGCACIDI@last_traceback?$AA@ DB 'last_traceback', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IGFDBBEF@last_value?$AA@
CONST	SEGMENT
??_C@_0L@IGFDBBEF@last_value?$AA@ DB 'last_value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NIIGAFC@last_type?$AA@
CONST	SEGMENT
??_C@_09NIIGAFC@last_type?$AA@ DB 'last_type', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_PrintEx
_TEXT	SEGMENT
v$ = 32
hook$ = 40
exception$ = 48
tb$ = 56
args$123082 = 64
result$123083 = 72
v2$123089 = 80
exception2$123088 = 88
tb2$123090 = 96
set_sys_last_vars$ = 128
PyErr_PrintEx PROC					; COMDAT

; 1683 : {

$LN38:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1684 :     PyObject *exception, *v, *tb, *hook;
; 1685 : 
; 1686 :     if (PyErr_ExceptionMatches(PyExc_SystemExit)) {

  00008	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemExit
  0000f	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00014	85 c0		 test	 eax, eax
  00016	74 05		 je	 SHORT $LN35@PyErr_Prin

; 1687 :         handle_system_exit();

  00018	e8 00 00 00 00	 call	 handle_system_exit
$LN35@PyErr_Prin:

; 1688 :     }
; 1689 :     PyErr_Fetch(&exception, &v, &tb);

  0001d	4c 8d 44 24 38	 lea	 r8, QWORD PTR tb$[rsp]
  00022	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  00027	48 8d 4c 24 30	 lea	 rcx, QWORD PTR exception$[rsp]
  0002c	e8 00 00 00 00	 call	 PyErr_Fetch

; 1690 :     if (exception == NULL)

  00031	48 83 7c 24 30
	00		 cmp	 QWORD PTR exception$[rsp], 0
  00037	75 05		 jne	 SHORT $LN34@PyErr_Prin

; 1691 :         return;

  00039	e9 7b 02 00 00	 jmp	 $LN36@PyErr_Prin
$LN34@PyErr_Prin:

; 1692 :     PyErr_NormalizeException(&exception, &v, &tb);

  0003e	4c 8d 44 24 38	 lea	 r8, QWORD PTR tb$[rsp]
  00043	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  00048	48 8d 4c 24 30	 lea	 rcx, QWORD PTR exception$[rsp]
  0004d	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 1693 :     if (tb == NULL) {

  00052	48 83 7c 24 38
	00		 cmp	 QWORD PTR tb$[rsp], 0
  00058	75 16		 jne	 SHORT $LN33@PyErr_Prin

; 1694 :         tb = Py_None;

  0005a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00061	48 89 44 24 38	 mov	 QWORD PTR tb$[rsp], rax

; 1695 :         Py_INCREF(tb);

  00066	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tb$[rsp]
  0006b	e8 00 00 00 00	 call	 _Py_IncRef
$LN33@PyErr_Prin:

; 1696 :     }
; 1697 :     PyException_SetTraceback(v, tb);

  00070	48 8b 54 24 38	 mov	 rdx, QWORD PTR tb$[rsp]
  00075	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0007a	e8 00 00 00 00	 call	 PyException_SetTraceback

; 1698 :     if (exception == NULL)

  0007f	48 83 7c 24 30
	00		 cmp	 QWORD PTR exception$[rsp], 0
  00085	75 05		 jne	 SHORT $LN32@PyErr_Prin

; 1699 :         return;

  00087	e9 2d 02 00 00	 jmp	 $LN36@PyErr_Prin
$LN32@PyErr_Prin:

; 1700 :     /* Now we know v != NULL too */
; 1701 :     if (set_sys_last_vars) {

  0008c	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR set_sys_last_vars$[rsp], 0
  00094	74 33		 je	 SHORT $LN31@PyErr_Prin

; 1702 :         PySys_SetObject("last_type", exception);

  00096	48 8b 54 24 30	 mov	 rdx, QWORD PTR exception$[rsp]
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NIIGAFC@last_type?$AA@
  000a2	e8 00 00 00 00	 call	 PySys_SetObject

; 1703 :         PySys_SetObject("last_value", v);

  000a7	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IGFDBBEF@last_value?$AA@
  000b3	e8 00 00 00 00	 call	 PySys_SetObject

; 1704 :         PySys_SetObject("last_traceback", tb);

  000b8	48 8b 54 24 38	 mov	 rdx, QWORD PTR tb$[rsp]
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IGCACIDI@last_traceback?$AA@
  000c4	e8 00 00 00 00	 call	 PySys_SetObject
$LN31@PyErr_Prin:

; 1705 :     }
; 1706 :     hook = PySys_GetObject("excepthook");

  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NONONIOP@excepthook?$AA@
  000d0	e8 00 00 00 00	 call	 PySys_GetObject
  000d5	48 89 44 24 28	 mov	 QWORD PTR hook$[rsp], rax

; 1707 :     if (hook) {

  000da	48 83 7c 24 28
	00		 cmp	 QWORD PTR hook$[rsp], 0
  000e0	0f 84 6b 01 00
	00		 je	 $LN30@PyErr_Prin

; 1708 :         PyObject *args = PyTuple_Pack(3, exception, v, tb);

  000e6	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tb$[rsp]
  000eb	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  000f0	48 8b 54 24 30	 mov	 rdx, QWORD PTR exception$[rsp]
  000f5	b9 03 00 00 00	 mov	 ecx, 3
  000fa	e8 00 00 00 00	 call	 PyTuple_Pack
  000ff	48 89 44 24 40	 mov	 QWORD PTR args$123082[rsp], rax

; 1709 :         PyObject *result = PyEval_CallObject(hook, args);

  00104	45 33 c0	 xor	 r8d, r8d
  00107	48 8b 54 24 40	 mov	 rdx, QWORD PTR args$123082[rsp]
  0010c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hook$[rsp]
  00111	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00116	48 89 44 24 48	 mov	 QWORD PTR result$123083[rsp], rax

; 1710 :         if (result == NULL) {

  0011b	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$123083[rsp], 0
  00121	0f 85 f8 00 00
	00		 jne	 $LN29@PyErr_Prin

; 1711 :             PyObject *exception2, *v2, *tb2;
; 1712 :             if (PyErr_ExceptionMatches(PyExc_SystemExit)) {

  00127	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemExit
  0012e	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00133	85 c0		 test	 eax, eax
  00135	74 05		 je	 SHORT $LN28@PyErr_Prin

; 1713 :                 handle_system_exit();

  00137	e8 00 00 00 00	 call	 handle_system_exit
$LN28@PyErr_Prin:

; 1714 :             }
; 1715 :             PyErr_Fetch(&exception2, &v2, &tb2);

  0013c	4c 8d 44 24 60	 lea	 r8, QWORD PTR tb2$123090[rsp]
  00141	48 8d 54 24 50	 lea	 rdx, QWORD PTR v2$123089[rsp]
  00146	48 8d 4c 24 58	 lea	 rcx, QWORD PTR exception2$123088[rsp]
  0014b	e8 00 00 00 00	 call	 PyErr_Fetch

; 1716 :             PyErr_NormalizeException(&exception2, &v2, &tb2);

  00150	4c 8d 44 24 60	 lea	 r8, QWORD PTR tb2$123090[rsp]
  00155	48 8d 54 24 50	 lea	 rdx, QWORD PTR v2$123089[rsp]
  0015a	48 8d 4c 24 58	 lea	 rcx, QWORD PTR exception2$123088[rsp]
  0015f	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 1717 :             /* It should not be possible for exception2 or v2
; 1718 :                to be NULL. However PyErr_Display() can't
; 1719 :                tolerate NULLs, so just be safe. */
; 1720 :             if (exception2 == NULL) {

  00164	48 83 7c 24 58
	00		 cmp	 QWORD PTR exception2$123088[rsp], 0
  0016a	75 16		 jne	 SHORT $LN27@PyErr_Prin

; 1721 :                 exception2 = Py_None;

  0016c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00173	48 89 44 24 58	 mov	 QWORD PTR exception2$123088[rsp], rax

; 1722 :                 Py_INCREF(exception2);

  00178	48 8b 4c 24 58	 mov	 rcx, QWORD PTR exception2$123088[rsp]
  0017d	e8 00 00 00 00	 call	 _Py_IncRef
$LN27@PyErr_Prin:

; 1723 :             }
; 1724 :             if (v2 == NULL) {

  00182	48 83 7c 24 50
	00		 cmp	 QWORD PTR v2$123089[rsp], 0
  00188	75 16		 jne	 SHORT $LN26@PyErr_Prin

; 1725 :                 v2 = Py_None;

  0018a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00191	48 89 44 24 50	 mov	 QWORD PTR v2$123089[rsp], rax

; 1726 :                 Py_INCREF(v2);

  00196	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v2$123089[rsp]
  0019b	e8 00 00 00 00	 call	 _Py_IncRef
$LN26@PyErr_Prin:

; 1727 :             }
; 1728 :             fflush(stdout);

  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  001a6	48 83 c0 30	 add	 rax, 48			; 00000030H
  001aa	48 8b c8	 mov	 rcx, rax
  001ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 1729 :             PySys_WriteStderr("Error in sys.excepthook:\n");

  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@OEGNGKBF@Error?5in?5sys?4excepthook?3?6?$AA@
  001ba	e8 00 00 00 00	 call	 PySys_WriteStderr

; 1730 :             PyErr_Display(exception2, v2, tb2);

  001bf	4c 8b 44 24 60	 mov	 r8, QWORD PTR tb2$123090[rsp]
  001c4	48 8b 54 24 50	 mov	 rdx, QWORD PTR v2$123089[rsp]
  001c9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR exception2$123088[rsp]
  001ce	e8 00 00 00 00	 call	 PyErr_Display

; 1731 :             PySys_WriteStderr("\nOriginal exception was:\n");

  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@LFLHLMAE@?6Original?5exception?5was?3?6?$AA@
  001da	e8 00 00 00 00	 call	 PySys_WriteStderr

; 1732 :             PyErr_Display(exception, v, tb);

  001df	4c 8b 44 24 38	 mov	 r8, QWORD PTR tb$[rsp]
  001e4	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  001e9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR exception$[rsp]
  001ee	e8 00 00 00 00	 call	 PyErr_Display

; 1733 :             Py_DECREF(exception2);

  001f3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR exception2$123088[rsp]
  001f8	e8 00 00 00 00	 call	 _Py_DecRef

; 1734 :             Py_DECREF(v2);

  001fd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v2$123089[rsp]
  00202	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@PyErr_Prin:

; 1735 :             Py_XDECREF(tb2);

  00207	48 83 7c 24 60
	00		 cmp	 QWORD PTR tb2$123090[rsp], 0
  0020d	74 0a		 je	 SHORT $LN22@PyErr_Prin
  0020f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tb2$123090[rsp]
  00214	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@PyErr_Prin:
  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	75 e8		 jne	 SHORT $LN25@PyErr_Prin
$LN29@PyErr_Prin:
$LN21@PyErr_Prin:

; 1736 :         }
; 1737 :         Py_XDECREF(result);

  0021f	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$123083[rsp], 0
  00225	74 0a		 je	 SHORT $LN18@PyErr_Prin
  00227	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$123083[rsp]
  0022c	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@PyErr_Prin:
  00231	33 c0		 xor	 eax, eax
  00233	85 c0		 test	 eax, eax
  00235	75 e8		 jne	 SHORT $LN21@PyErr_Prin
$LN17@PyErr_Prin:

; 1738 :         Py_XDECREF(args);

  00237	48 83 7c 24 40
	00		 cmp	 QWORD PTR args$123082[rsp], 0
  0023d	74 0a		 je	 SHORT $LN14@PyErr_Prin
  0023f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR args$123082[rsp]
  00244	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@PyErr_Prin:
  00249	33 c0		 xor	 eax, eax
  0024b	85 c0		 test	 eax, eax
  0024d	75 e8		 jne	 SHORT $LN17@PyErr_Prin

; 1739 :     } else {

  0024f	eb 20		 jmp	 SHORT $LN13@PyErr_Prin
$LN30@PyErr_Prin:

; 1740 :         PySys_WriteStderr("sys.excepthook is missing\n");

  00251	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@MEIMIMHC@sys?4excepthook?5is?5missing?6?$AA@
  00258	e8 00 00 00 00	 call	 PySys_WriteStderr

; 1741 :         PyErr_Display(exception, v, tb);

  0025d	4c 8b 44 24 38	 mov	 r8, QWORD PTR tb$[rsp]
  00262	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  00267	48 8b 4c 24 30	 mov	 rcx, QWORD PTR exception$[rsp]
  0026c	e8 00 00 00 00	 call	 PyErr_Display
$LN13@PyErr_Prin:
$LN12@PyErr_Prin:

; 1742 :     }
; 1743 :     Py_XDECREF(exception);

  00271	48 83 7c 24 30
	00		 cmp	 QWORD PTR exception$[rsp], 0
  00277	74 0a		 je	 SHORT $LN9@PyErr_Prin
  00279	48 8b 4c 24 30	 mov	 rcx, QWORD PTR exception$[rsp]
  0027e	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyErr_Prin:
  00283	33 c0		 xor	 eax, eax
  00285	85 c0		 test	 eax, eax
  00287	75 e8		 jne	 SHORT $LN12@PyErr_Prin
$LN8@PyErr_Prin:

; 1744 :     Py_XDECREF(v);

  00289	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0028f	74 0a		 je	 SHORT $LN5@PyErr_Prin
  00291	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00296	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyErr_Prin:
  0029b	33 c0		 xor	 eax, eax
  0029d	85 c0		 test	 eax, eax
  0029f	75 e8		 jne	 SHORT $LN8@PyErr_Prin
$LN4@PyErr_Prin:

; 1745 :     Py_XDECREF(tb);

  002a1	48 83 7c 24 38
	00		 cmp	 QWORD PTR tb$[rsp], 0
  002a7	74 0a		 je	 SHORT $LN1@PyErr_Prin
  002a9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tb$[rsp]
  002ae	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_Prin:
  002b3	33 c0		 xor	 eax, eax
  002b5	85 c0		 test	 eax, eax
  002b7	75 e8		 jne	 SHORT $LN4@PyErr_Prin
$LN36@PyErr_Prin:

; 1746 : }

  002b9	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002bd	c3		 ret	 0
PyErr_PrintEx ENDP
_TEXT	ENDS
PUBLIC	Py_Exit
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	PyErr_Restore:PROC
EXTRN	PyObject_Print:PROC
EXTRN	PyFile_WriteObject:PROC
EXTRN	PyLong_AsLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$handle_system_exit DD imagerel handle_system_exit
	DD	imagerel handle_system_exit+419
	DD	imagerel $unwind$handle_system_exit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$handle_system_exit DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT handle_system_exit
_TEXT	SEGMENT
value$ = 32
exitcode$ = 40
exception$ = 48
tb$ = 56
code$123049 = 64
sys_stderr$123057 = 72
handle_system_exit PROC					; COMDAT

; 1630 : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1631 :     PyObject *exception, *value, *tb;
; 1632 :     int exitcode = 0;

  00004	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR exitcode$[rsp], 0

; 1633 : 
; 1634 :     if (Py_InspectFlag)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_InspectFlag, 0
  00013	74 05		 je	 SHORT $LN10@handle_sys

; 1635 :         /* Don't exit if -i flag was given. This flag is set to 0
; 1636 :          * when entering interactive mode for inspecting. */
; 1637 :         return;

  00015	e9 84 01 00 00	 jmp	 $LN11@handle_sys
$LN10@handle_sys:

; 1638 : 
; 1639 :     PyErr_Fetch(&exception, &value, &tb);

  0001a	4c 8d 44 24 38	 lea	 r8, QWORD PTR tb$[rsp]
  0001f	48 8d 54 24 20	 lea	 rdx, QWORD PTR value$[rsp]
  00024	48 8d 4c 24 30	 lea	 rcx, QWORD PTR exception$[rsp]
  00029	e8 00 00 00 00	 call	 PyErr_Fetch

; 1640 :     fflush(stdout);

  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00034	48 83 c0 30	 add	 rax, 48			; 00000030H
  00038	48 8b c8	 mov	 rcx, rax
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 1641 :     if (value == NULL || value == Py_None)

  00041	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00047	74 0e		 je	 SHORT $LN8@handle_sys
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00050	48 39 44 24 20	 cmp	 QWORD PTR value$[rsp], rax
  00055	75 05		 jne	 SHORT $LN9@handle_sys
$LN8@handle_sys:

; 1642 :         goto done;

  00057	e9 20 01 00 00	 jmp	 $done$123044
$LN9@handle_sys:

; 1643 :     if (PyExceptionInstance_Check(value)) {

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  00061	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00065	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0006b	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00070	85 c0		 test	 eax, eax
  00072	74 5b		 je	 SHORT $LN7@handle_sys

; 1644 :         /* The error code should be in the `code' attribute. */
; 1645 :         _Py_IDENTIFIER(code);
; 1646 :         PyObject *code = _PyObject_GetAttrId(value, &PyId_code);

  00074	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_code@?2??handle_system_exit@@9@9
  00079	8b c0		 mov	 eax, eax
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00081	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0008a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0008e	48 8b d0	 mov	 rdx, rax
  00091	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00096	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0009b	48 89 44 24 40	 mov	 QWORD PTR code$123049[rsp], rax

; 1647 :         if (code) {

  000a0	48 83 7c 24 40
	00		 cmp	 QWORD PTR code$123049[rsp], 0
  000a6	74 27		 je	 SHORT $LN6@handle_sys

; 1648 :             Py_DECREF(value);

  000a8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000ad	e8 00 00 00 00	 call	 _Py_DecRef

; 1649 :             value = code;

  000b2	48 8b 44 24 40	 mov	 rax, QWORD PTR code$123049[rsp]
  000b7	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 1650 :             if (value == Py_None)

  000bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000c3	48 39 44 24 20	 cmp	 QWORD PTR value$[rsp], rax
  000c8	75 05		 jne	 SHORT $LN5@handle_sys

; 1651 :                 goto done;

  000ca	e9 ad 00 00 00	 jmp	 $done$123044
$LN5@handle_sys:
$LN6@handle_sys:
$LN7@handle_sys:

; 1652 :         }
; 1653 :         /* If we failed to dig out the 'code' attribute,
; 1654 :            just let the else clause below print the error. */
; 1655 :     }
; 1656 :     if (PyLong_Check(value))

  000cf	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  000d4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000de	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  000e3	85 c0		 test	 eax, eax
  000e5	74 13		 je	 SHORT $LN4@handle_sys

; 1657 :         exitcode = (int)PyLong_AsLong(value);

  000e7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000ec	e8 00 00 00 00	 call	 PyLong_AsLong
  000f1	89 44 24 28	 mov	 DWORD PTR exitcode$[rsp], eax

; 1658 :     else {

  000f5	e9 82 00 00 00	 jmp	 $LN3@handle_sys
$LN4@handle_sys:

; 1659 :         PyObject *sys_stderr = PySys_GetObject("stderr");

  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00101	e8 00 00 00 00	 call	 PySys_GetObject
  00106	48 89 44 24 48	 mov	 QWORD PTR sys_stderr$123057[rsp], rax

; 1660 :         if (sys_stderr != NULL && sys_stderr != Py_None) {

  0010b	48 83 7c 24 48
	00		 cmp	 QWORD PTR sys_stderr$123057[rsp], 0
  00111	74 25		 je	 SHORT $LN2@handle_sys
  00113	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0011a	48 39 44 24 48	 cmp	 QWORD PTR sys_stderr$123057[rsp], rax
  0011f	74 17		 je	 SHORT $LN2@handle_sys

; 1661 :             PyFile_WriteObject(value, sys_stderr, Py_PRINT_RAW);

  00121	41 b8 01 00 00
	00		 mov	 r8d, 1
  00127	48 8b 54 24 48	 mov	 rdx, QWORD PTR sys_stderr$123057[rsp]
  0012c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00131	e8 00 00 00 00	 call	 PyFile_WriteObject

; 1662 :         } else {

  00136	eb 30		 jmp	 SHORT $LN1@handle_sys
$LN2@handle_sys:

; 1663 :             PyObject_Print(value, stderr, Py_PRINT_RAW);

  00138	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0013e	48 83 c0 60	 add	 rax, 96			; 00000060H
  00142	41 b8 01 00 00
	00		 mov	 r8d, 1
  00148	48 8b d0	 mov	 rdx, rax
  0014b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00150	e8 00 00 00 00	 call	 PyObject_Print

; 1664 :             fflush(stderr);

  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0015b	48 83 c0 60	 add	 rax, 96			; 00000060H
  0015f	48 8b c8	 mov	 rcx, rax
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
$LN1@handle_sys:

; 1665 :         }
; 1666 :         PySys_WriteStderr("\n");

  00168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  0016f	e8 00 00 00 00	 call	 PySys_WriteStderr

; 1667 :         exitcode = 1;

  00174	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR exitcode$[rsp], 1
$LN3@handle_sys:
$done$123044:

; 1668 :     }
; 1669 :  done:
; 1670 :     /* Restore and clear the exception info, in order to properly decref
; 1671 :      * the exception, value, and traceback.      If we just exit instead,
; 1672 :      * these leak, which confuses PYTHONDUMPREFS output, and may prevent
; 1673 :      * some finalizers from running.
; 1674 :      */
; 1675 :     PyErr_Restore(exception, value, tb);

  0017c	4c 8b 44 24 38	 mov	 r8, QWORD PTR tb$[rsp]
  00181	48 8b 54 24 20	 mov	 rdx, QWORD PTR value$[rsp]
  00186	48 8b 4c 24 30	 mov	 rcx, QWORD PTR exception$[rsp]
  0018b	e8 00 00 00 00	 call	 PyErr_Restore

; 1676 :     PyErr_Clear();

  00190	e8 00 00 00 00	 call	 PyErr_Clear

; 1677 :     Py_Exit(exitcode);

  00195	8b 4c 24 28	 mov	 ecx, DWORD PTR exitcode$[rsp]
  00199	e8 00 00 00 00	 call	 Py_Exit
$LN11@handle_sys:

; 1678 :     /* NOTREACHED */
; 1679 : }

  0019e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a2	c3		 ret	 0
handle_system_exit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@	; `string'
EXTRN	PySet_New:PROC
EXTRN	_PyObject_Dump:PROC
EXTRN	PyException_GetTraceback:PROC
EXTRN	PyTraceBack_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_Display DD imagerel $LN15
	DD	imagerel $LN15+272
	DD	imagerel $unwind$PyErr_Display
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Display DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@
CONST	SEGMENT
??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@ DB 'lost sys.stderr', 0aH, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_Display
_TEXT	SEGMENT
f$ = 32
seen$ = 40
cur_tb$123286 = 48
exception$ = 80
value$ = 88
tb$ = 96
PyErr_Display PROC					; COMDAT

; 1914 : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1915 :     PyObject *seen;
; 1916 :     PyObject *f = PySys_GetObject("stderr");

  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  0001a	e8 00 00 00 00	 call	 PySys_GetObject
  0001f	48 89 44 24 20	 mov	 QWORD PTR f$[rsp], rax

; 1917 :     if (PyExceptionInstance_Check(value)
; 1918 :         && tb != NULL && PyTraceBack_Check(tb)) {

  00024	48 8b 44 24 58	 mov	 rax, QWORD PTR value$[rsp]
  00029	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00033	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00038	85 c0		 test	 eax, eax
  0003a	74 4c		 je	 SHORT $LN12@PyErr_Disp
  0003c	48 83 7c 24 60
	00		 cmp	 QWORD PTR tb$[rsp], 0
  00042	74 44		 je	 SHORT $LN12@PyErr_Disp
  00044	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTraceBack_Type
  0004b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tb$[rsp]
  00050	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00054	75 32		 jne	 SHORT $LN12@PyErr_Disp

; 1919 :         /* Put the traceback on the exception, otherwise it won't get
; 1920 :            displayed.  See issue #18776. */
; 1921 :         PyObject *cur_tb = PyException_GetTraceback(value);

  00056	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$[rsp]
  0005b	e8 00 00 00 00	 call	 PyException_GetTraceback
  00060	48 89 44 24 30	 mov	 QWORD PTR cur_tb$123286[rsp], rax

; 1922 :         if (cur_tb == NULL)

  00065	48 83 7c 24 30
	00		 cmp	 QWORD PTR cur_tb$123286[rsp], 0
  0006b	75 11		 jne	 SHORT $LN11@PyErr_Disp

; 1923 :             PyException_SetTraceback(value, tb);

  0006d	48 8b 54 24 60	 mov	 rdx, QWORD PTR tb$[rsp]
  00072	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$[rsp]
  00077	e8 00 00 00 00	 call	 PyException_SetTraceback

; 1924 :         else

  0007c	eb 0a		 jmp	 SHORT $LN10@PyErr_Disp
$LN11@PyErr_Disp:

; 1925 :             Py_DECREF(cur_tb);

  0007e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cur_tb$123286[rsp]
  00083	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@PyErr_Disp:
$LN12@PyErr_Disp:

; 1926 :     }
; 1927 :     if (f == Py_None) {

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0008f	48 39 44 24 20	 cmp	 QWORD PTR f$[rsp], rax
  00094	75 02		 jne	 SHORT $LN9@PyErr_Disp
  00096	eb 73		 jmp	 SHORT $LN8@PyErr_Disp
$LN9@PyErr_Disp:

; 1928 :         /* pass */
; 1929 :     }
; 1930 :     else if (f == NULL) {

  00098	48 83 7c 24 20
	00		 cmp	 QWORD PTR f$[rsp], 0
  0009e	75 26		 jne	 SHORT $LN7@PyErr_Disp

; 1931 :         _PyObject_Dump(value);

  000a0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$[rsp]
  000a5	e8 00 00 00 00	 call	 _PyObject_Dump

; 1932 :         fprintf(stderr, "lost sys.stderr\n");

  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  000b0	48 83 c0 60	 add	 rax, 96			; 00000060H
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@
  000bb	48 8b c8	 mov	 rcx, rax
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1933 :     }
; 1934 :     else {

  000c4	eb 45		 jmp	 SHORT $LN6@PyErr_Disp
$LN7@PyErr_Disp:

; 1935 :         /* We choose to ignore seen being possibly NULL, and report
; 1936 :            at least the main exception (it could be a MemoryError).
; 1937 :         */
; 1938 :         seen = PySet_New(NULL);

  000c6	33 c9		 xor	 ecx, ecx
  000c8	e8 00 00 00 00	 call	 PySet_New
  000cd	48 89 44 24 28	 mov	 QWORD PTR seen$[rsp], rax

; 1939 :         if (seen == NULL)

  000d2	48 83 7c 24 28
	00		 cmp	 QWORD PTR seen$[rsp], 0
  000d8	75 05		 jne	 SHORT $LN5@PyErr_Disp

; 1940 :             PyErr_Clear();

  000da	e8 00 00 00 00	 call	 PyErr_Clear
$LN5@PyErr_Disp:

; 1941 :         print_exception_recursive(f, value, seen);

  000df	4c 8b 44 24 28	 mov	 r8, QWORD PTR seen$[rsp]
  000e4	48 8b 54 24 58	 mov	 rdx, QWORD PTR value$[rsp]
  000e9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR f$[rsp]
  000ee	e8 00 00 00 00	 call	 print_exception_recursive
$LN4@PyErr_Disp:

; 1942 :         Py_XDECREF(seen);

  000f3	48 83 7c 24 28
	00		 cmp	 QWORD PTR seen$[rsp], 0
  000f9	74 0a		 je	 SHORT $LN1@PyErr_Disp
  000fb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR seen$[rsp]
  00100	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_Disp:
  00105	33 c0		 xor	 eax, eax
  00107	85 c0		 test	 eax, eax
  00109	75 e8		 jne	 SHORT $LN4@PyErr_Disp
$LN6@PyErr_Disp:
$LN8@PyErr_Disp:

; 1943 :     }
; 1944 : }

  0010b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0010f	c3		 ret	 0
PyErr_Display ENDP
_TEXT	ENDS
EXTRN	PyFile_WriteString:PROC
EXTRN	PySet_Contains:PROC
EXTRN	PyException_GetContext:PROC
EXTRN	PyException_GetCause:PROC
EXTRN	PySet_Add:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$print_exception_recursive DD imagerel print_exception_recursive
	DD	imagerel print_exception_recursive+415
	DD	imagerel $unwind$print_exception_recursive
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$print_exception_recursive DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT print_exception_recursive
_TEXT	SEGMENT
res$ = 32
cause$ = 40
err$ = 48
context$ = 56
f$ = 80
value$ = 88
seen$ = 96
print_exception_recursive PROC				; COMDAT

; 1869 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1870 :     int err = 0, res;

  00013	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1871 :     PyObject *cause, *context;
; 1872 : 
; 1873 :     if (seen != NULL) {

  0001b	48 83 7c 24 60
	00		 cmp	 QWORD PTR seen$[rsp], 0
  00021	0f 84 58 01 00
	00		 je	 $LN20@print_exce

; 1874 :         /* Exception chaining */
; 1875 :         if (PySet_Add(seen, value) == -1)

  00027	48 8b 54 24 58	 mov	 rdx, QWORD PTR value$[rsp]
  0002c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR seen$[rsp]
  00031	e8 00 00 00 00	 call	 PySet_Add
  00036	83 f8 ff	 cmp	 eax, -1
  00039	75 0a		 jne	 SHORT $LN19@print_exce

; 1876 :             PyErr_Clear();

  0003b	e8 00 00 00 00	 call	 PyErr_Clear
  00040	e9 3a 01 00 00	 jmp	 $LN18@print_exce
$LN19@print_exce:

; 1877 :         else if (PyExceptionInstance_Check(value)) {

  00045	48 8b 44 24 58	 mov	 rax, QWORD PTR value$[rsp]
  0004a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00054	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00059	85 c0		 test	 eax, eax
  0005b	0f 84 1e 01 00
	00		 je	 $LN17@print_exce

; 1878 :             cause = PyException_GetCause(value);

  00061	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$[rsp]
  00066	e8 00 00 00 00	 call	 PyException_GetCause
  0006b	48 89 44 24 28	 mov	 QWORD PTR cause$[rsp], rax

; 1879 :             context = PyException_GetContext(value);

  00070	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$[rsp]
  00075	e8 00 00 00 00	 call	 PyException_GetContext
  0007a	48 89 44 24 38	 mov	 QWORD PTR context$[rsp], rax

; 1880 :             if (cause) {

  0007f	48 83 7c 24 28
	00		 cmp	 QWORD PTR cause$[rsp], 0
  00085	74 59		 je	 SHORT $LN16@print_exce

; 1881 :                 res = PySet_Contains(seen, cause);

  00087	48 8b 54 24 28	 mov	 rdx, QWORD PTR cause$[rsp]
  0008c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR seen$[rsp]
  00091	e8 00 00 00 00	 call	 PySet_Contains
  00096	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1882 :                 if (res == -1)

  0009a	83 7c 24 20 ff	 cmp	 DWORD PTR res$[rsp], -1
  0009f	75 05		 jne	 SHORT $LN15@print_exce

; 1883 :                     PyErr_Clear();

  000a1	e8 00 00 00 00	 call	 PyErr_Clear
$LN15@print_exce:

; 1884 :                 if (res == 0) {

  000a6	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000ab	75 31		 jne	 SHORT $LN14@print_exce

; 1885 :                     print_exception_recursive(
; 1886 :                         f, cause, seen);

  000ad	4c 8b 44 24 60	 mov	 r8, QWORD PTR seen$[rsp]
  000b2	48 8b 54 24 28	 mov	 rdx, QWORD PTR cause$[rsp]
  000b7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR f$[rsp]
  000bc	e8 00 00 00 00	 call	 print_exception_recursive

; 1887 :                     err |= PyFile_WriteString(
; 1888 :                         cause_message, f);

  000c1	48 8b 54 24 50	 mov	 rdx, QWORD PTR f$[rsp]
  000c6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cause_message
  000cd	e8 00 00 00 00	 call	 PyFile_WriteString
  000d2	8b 4c 24 30	 mov	 ecx, DWORD PTR err$[rsp]
  000d6	0b c8		 or	 ecx, eax
  000d8	8b c1		 mov	 eax, ecx
  000da	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax
$LN14@print_exce:

; 1889 :                 }
; 1890 :             }
; 1891 :             else if (context &&

  000de	eb 6f		 jmp	 SHORT $LN13@print_exce
$LN16@print_exce:

; 1892 :                 !((PyBaseExceptionObject *)value)->suppress_context) {

  000e0	48 83 7c 24 38
	00		 cmp	 QWORD PTR context$[rsp], 0
  000e6	74 67		 je	 SHORT $LN12@print_exce
  000e8	48 8b 44 24 58	 mov	 rax, QWORD PTR value$[rsp]
  000ed	0f be 80 88 00
	00 00		 movsx	 eax, BYTE PTR [rax+136]
  000f4	85 c0		 test	 eax, eax
  000f6	75 57		 jne	 SHORT $LN12@print_exce

; 1893 :                 res = PySet_Contains(seen, context);

  000f8	48 8b 54 24 38	 mov	 rdx, QWORD PTR context$[rsp]
  000fd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR seen$[rsp]
  00102	e8 00 00 00 00	 call	 PySet_Contains
  00107	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1894 :                 if (res == -1)

  0010b	83 7c 24 20 ff	 cmp	 DWORD PTR res$[rsp], -1
  00110	75 05		 jne	 SHORT $LN11@print_exce

; 1895 :                     PyErr_Clear();

  00112	e8 00 00 00 00	 call	 PyErr_Clear
$LN11@print_exce:

; 1896 :                 if (res == 0) {

  00117	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0011c	75 31		 jne	 SHORT $LN10@print_exce

; 1897 :                     print_exception_recursive(
; 1898 :                         f, context, seen);

  0011e	4c 8b 44 24 60	 mov	 r8, QWORD PTR seen$[rsp]
  00123	48 8b 54 24 38	 mov	 rdx, QWORD PTR context$[rsp]
  00128	48 8b 4c 24 50	 mov	 rcx, QWORD PTR f$[rsp]
  0012d	e8 00 00 00 00	 call	 print_exception_recursive

; 1899 :                     err |= PyFile_WriteString(
; 1900 :                         context_message, f);

  00132	48 8b 54 24 50	 mov	 rdx, QWORD PTR f$[rsp]
  00137	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR context_message
  0013e	e8 00 00 00 00	 call	 PyFile_WriteString
  00143	8b 4c 24 30	 mov	 ecx, DWORD PTR err$[rsp]
  00147	0b c8		 or	 ecx, eax
  00149	8b c1		 mov	 eax, ecx
  0014b	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax
$LN10@print_exce:
$LN12@print_exce:
$LN13@print_exce:
$LN9@print_exce:

; 1901 :                 }
; 1902 :             }
; 1903 :             Py_XDECREF(context);

  0014f	48 83 7c 24 38
	00		 cmp	 QWORD PTR context$[rsp], 0
  00155	74 0a		 je	 SHORT $LN6@print_exce
  00157	48 8b 4c 24 38	 mov	 rcx, QWORD PTR context$[rsp]
  0015c	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@print_exce:
  00161	33 c0		 xor	 eax, eax
  00163	85 c0		 test	 eax, eax
  00165	75 e8		 jne	 SHORT $LN9@print_exce
$LN5@print_exce:

; 1904 :             Py_XDECREF(cause);

  00167	48 83 7c 24 28
	00		 cmp	 QWORD PTR cause$[rsp], 0
  0016d	74 0a		 je	 SHORT $LN2@print_exce
  0016f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cause$[rsp]
  00174	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@print_exce:
  00179	33 c0		 xor	 eax, eax
  0017b	85 c0		 test	 eax, eax
  0017d	75 e8		 jne	 SHORT $LN5@print_exce
$LN17@print_exce:
$LN18@print_exce:
$LN20@print_exce:

; 1905 :         }
; 1906 :     }
; 1907 :     print_exception(f, value);

  0017f	48 8b 54 24 58	 mov	 rdx, QWORD PTR value$[rsp]
  00184	48 8b 4c 24 50	 mov	 rcx, QWORD PTR f$[rsp]
  00189	e8 00 00 00 00	 call	 print_exception

; 1908 :     if (err != 0)

  0018e	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  00193	74 05		 je	 SHORT $LN1@print_exce

; 1909 :         PyErr_Clear();

  00195	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@print_exce:

; 1910 : }

  0019a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0019e	c3		 ret	 0
print_exception_recursive ENDP
_TEXT	ENDS
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@		; `string'
PUBLIC	??_C@_1DK@MDHPGLPH@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@JBJNIJPF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AAr?$AAu?$AAn?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_08DPOAHILF@?$CC?0?5line?5?$AA@		; `string'
PUBLIC	??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@		; `string'
PUBLIC	??_C@_08KFJEIIMI@?5?5File?5?$CC?$AA@		; `string'
PUBLIC	??_C@_07CNJFOCGJ@?5found?6?$AA@			; `string'
PUBLIC	??_C@_0DN@FJODKFFN@TypeError?3?5print_exception?$CI?$CJ?3?5Ex@ ; `string'
EXTRN	PyUnicode_GetLength:PROC
EXTRN	__imp_strrchr:PROC
EXTRN	__imp__wassert:PROC
EXTRN	_PyObject_HasAttrId:PROC
EXTRN	PyTraceBack_Print:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$print_exception DD imagerel print_exception
	DD	imagerel print_exception+1374
	DD	imagerel $unwind$print_exception
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$print_exception DD 021101H
	DD	0150111H
xdata	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
CONST	SEGMENT
??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@ DB '<unknown>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@MDHPGLPH@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@MDHPGLPH@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'E', 00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'C', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H
	DB	'c', 00H, 'k', 00H, '(', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@JBJNIJPF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AAr?$AAu?$AAn?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@JBJNIJPF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AAr?$AAu?$AAn?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'p', 00H, 'y', 00H, 't', 00H, 'h'
	DB	00H, 'o', 00H, 'n', 00H, 'r', 00H, 'u', 00H, 'n', 00H, '.', 00H
	DB	'c', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DPOAHILF@?$CC?0?5line?5?$AA@
CONST	SEGMENT
??_C@_08DPOAHILF@?$CC?0?5line?5?$AA@ DB '", line ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
CONST	SEGMENT
??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@ DB '<string>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFJEIIMI@?5?5File?5?$CC?$AA@
CONST	SEGMENT
??_C@_08KFJEIIMI@?5?5File?5?$CC?$AA@ DB '  File "', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNJFOCGJ@?5found?6?$AA@
CONST	SEGMENT
??_C@_07CNJFOCGJ@?5found?6?$AA@ DB ' found', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@FJODKFFN@TypeError?3?5print_exception?$CI?$CJ?3?5Ex@
CONST	SEGMENT
??_C@_0DN@FJODKFFN@TypeError?3?5print_exception?$CI?$CJ?3?5Ex@ DB 'TypeEr'
	DB	'ror: print_exception(): Exception expected for value, ', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT print_exception
_TEXT	SEGMENT
type$ = 48
tb$ = 56
err$ = 64
text$123157 = 72
lineno$123158 = 80
offset$123159 = 84
message$123155 = 88
filename$123156 = 96
buf$123162 = 104
className$123177 = 120
moduleName$123176 = 128
dot$123190 = 136
modstr$123204 = 144
s$123213 = 152
f$ = 176
value$ = 184
print_exception PROC					; COMDAT

; 1750 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1751 :     int err = 0;

  00011	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1752 :     PyObject *type, *tb;
; 1753 :     _Py_IDENTIFIER(print_file_and_line);
; 1754 : 
; 1755 :     if (!PyExceptionInstance_Check(value)) {

  00019	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  00021	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00025	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0002b	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00030	85 c0		 test	 eax, eax
  00032	75 4a		 jne	 SHORT $LN39@print_exce@2

; 1756 :         PyFile_WriteString("TypeError: print_exception(): Exception expected for value, ", f);

  00034	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DN@FJODKFFN@TypeError?3?5print_exception?$CI?$CJ?3?5Ex@
  00043	e8 00 00 00 00	 call	 PyFile_WriteString

; 1757 :         PyFile_WriteString(Py_TYPE(value)->tp_name, f);

  00048	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  00050	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00054	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  0005c	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00060	e8 00 00 00 00	 call	 PyFile_WriteString

; 1758 :         PyFile_WriteString(" found\n", f);

  00065	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CNJFOCGJ@?5found?6?$AA@
  00074	e8 00 00 00 00	 call	 PyFile_WriteString

; 1759 :         return;

  00079	e9 d8 04 00 00	 jmp	 $LN40@print_exce@2
$LN39@print_exce@2:

; 1760 :     }
; 1761 : 
; 1762 :     Py_INCREF(value);

  0007e	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00086	e8 00 00 00 00	 call	 _Py_IncRef

; 1763 :     fflush(stdout);

  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00091	48 83 c0 30	 add	 rax, 48			; 00000030H
  00095	48 8b c8	 mov	 rcx, rax
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 1764 :     type = (PyObject *) Py_TYPE(value);

  0009e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  000a6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000aa	48 89 44 24 30	 mov	 QWORD PTR type$[rsp], rax

; 1765 :     tb = PyException_GetTraceback(value);

  000af	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  000b7	e8 00 00 00 00	 call	 PyException_GetTraceback
  000bc	48 89 44 24 38	 mov	 QWORD PTR tb$[rsp], rax

; 1766 :     if (tb && tb != Py_None)

  000c1	48 83 7c 24 38
	00		 cmp	 QWORD PTR tb$[rsp], 0
  000c7	74 24		 je	 SHORT $LN38@print_exce@2
  000c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000d0	48 39 44 24 38	 cmp	 QWORD PTR tb$[rsp], rax
  000d5	74 16		 je	 SHORT $LN38@print_exce@2

; 1767 :         err = PyTraceBack_Print(tb, f);

  000d7	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  000df	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tb$[rsp]
  000e4	e8 00 00 00 00	 call	 PyTraceBack_Print
  000e9	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax
$LN38@print_exce@2:

; 1768 :     if (err == 0 &&
; 1769 :         _PyObject_HasAttrId(value, &PyId_print_file_and_line))

  000ed	83 7c 24 40 00	 cmp	 DWORD PTR err$[rsp], 0
  000f2	0f 85 53 01 00
	00		 jne	 $LN37@print_exce@2
  000f8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_print_file_and_line@?1??print_exception@@9@9
  000fd	8b c0		 mov	 eax, eax
  000ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00105	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0010e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00112	48 8b d0	 mov	 rdx, rax
  00115	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  0011d	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00122	85 c0		 test	 eax, eax
  00124	0f 84 21 01 00
	00		 je	 $LN37@print_exce@2

; 1770 :     {
; 1771 :         PyObject *message;
; 1772 :         const char *filename, *text;
; 1773 :         int lineno, offset;
; 1774 :         if (!parse_syntax_error(value, &message, &filename,
; 1775 :                                 &lineno, &offset, &text))

  0012a	48 8d 44 24 48	 lea	 rax, QWORD PTR text$123157[rsp]
  0012f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00134	48 8d 44 24 54	 lea	 rax, QWORD PTR offset$123159[rsp]
  00139	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0013e	4c 8d 4c 24 50	 lea	 r9, QWORD PTR lineno$123158[rsp]
  00143	4c 8d 44 24 60	 lea	 r8, QWORD PTR filename$123156[rsp]
  00148	48 8d 54 24 58	 lea	 rdx, QWORD PTR message$123155[rsp]
  0014d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00155	e8 00 00 00 00	 call	 parse_syntax_error
  0015a	85 c0		 test	 eax, eax
  0015c	75 0a		 jne	 SHORT $LN36@print_exce@2

; 1776 :             PyErr_Clear();

  0015e	e8 00 00 00 00	 call	 PyErr_Clear

; 1777 :         else {

  00163	e9 e3 00 00 00	 jmp	 $LN35@print_exce@2
$LN36@print_exce@2:

; 1778 :             char buf[10];
; 1779 :             PyFile_WriteString("  File \"", f);

  00168	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  00170	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KFJEIIMI@?5?5File?5?$CC?$AA@
  00177	e8 00 00 00 00	 call	 PyFile_WriteString

; 1780 :             if (filename == NULL)

  0017c	48 83 7c 24 60
	00		 cmp	 QWORD PTR filename$123156[rsp], 0
  00182	75 16		 jne	 SHORT $LN34@print_exce@2

; 1781 :                 PyFile_WriteString("<string>", f);

  00184	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  0018c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
  00193	e8 00 00 00 00	 call	 PyFile_WriteString

; 1782 :             else

  00198	eb 12		 jmp	 SHORT $LN33@print_exce@2
$LN34@print_exce@2:

; 1783 :                 PyFile_WriteString(filename, f);

  0019a	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  001a2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filename$123156[rsp]
  001a7	e8 00 00 00 00	 call	 PyFile_WriteString
$LN33@print_exce@2:

; 1784 :             PyFile_WriteString("\", line ", f);

  001ac	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08DPOAHILF@?$CC?0?5line?5?$AA@
  001bb	e8 00 00 00 00	 call	 PyFile_WriteString

; 1785 :             PyOS_snprintf(buf, sizeof(buf), "%d", lineno);

  001c0	44 8b 4c 24 50	 mov	 r9d, DWORD PTR lineno$123158[rsp]
  001c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  001cc	ba 0a 00 00 00	 mov	 edx, 10
  001d1	48 8d 4c 24 68	 lea	 rcx, QWORD PTR buf$123162[rsp]
  001d6	e8 00 00 00 00	 call	 PyOS_snprintf

; 1786 :             PyFile_WriteString(buf, f);

  001db	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  001e3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR buf$123162[rsp]
  001e8	e8 00 00 00 00	 call	 PyFile_WriteString

; 1787 :             PyFile_WriteString("\n", f);

  001ed	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  001f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  001fc	e8 00 00 00 00	 call	 PyFile_WriteString

; 1788 :             if (text != NULL)

  00201	48 83 7c 24 48
	00		 cmp	 QWORD PTR text$123157[rsp], 0
  00207	74 16		 je	 SHORT $LN32@print_exce@2

; 1789 :                 print_error_text(f, offset, text);

  00209	4c 8b 44 24 48	 mov	 r8, QWORD PTR text$123157[rsp]
  0020e	8b 54 24 54	 mov	 edx, DWORD PTR offset$123159[rsp]
  00212	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  0021a	e8 00 00 00 00	 call	 print_error_text
$LN32@print_exce@2:

; 1790 :             Py_DECREF(value);

  0021f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00227	e8 00 00 00 00	 call	 _Py_DecRef

; 1791 :             value = message;

  0022c	48 8b 44 24 58	 mov	 rax, QWORD PTR message$123155[rsp]
  00231	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR value$[rsp], rax

; 1792 :             /* Can't be bothered to check all those
; 1793 :                PyFile_WriteString() calls */
; 1794 :             if (PyErr_Occurred())

  00239	e8 00 00 00 00	 call	 PyErr_Occurred
  0023e	48 85 c0	 test	 rax, rax
  00241	74 08		 je	 SHORT $LN31@print_exce@2

; 1795 :                 err = -1;

  00243	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN31@print_exce@2:
$LN35@print_exce@2:
$LN37@print_exce@2:

; 1796 :         }
; 1797 :     }
; 1798 :     if (err) {

  0024b	83 7c 24 40 00	 cmp	 DWORD PTR err$[rsp], 0
  00250	74 05		 je	 SHORT $LN30@print_exce@2

; 1799 :         /* Don't do anything else */
; 1800 :     }
; 1801 :     else {

  00252	e9 db 01 00 00	 jmp	 $LN29@print_exce@2
$LN30@print_exce@2:

; 1802 :         PyObject* moduleName;
; 1803 :         char* className;
; 1804 :         _Py_IDENTIFIER(__module__);
; 1805 :         assert(PyExceptionClass_Check(type));

  00257	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0025c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00260	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00266	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0026b	85 c0		 test	 eax, eax
  0026d	74 14		 je	 SHORT $LN42@print_exce@2
  0026f	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00274	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0027a	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  0027f	85 c0		 test	 eax, eax
  00281	75 1c		 jne	 SHORT $LN43@print_exce@2
$LN42@print_exce@2:
  00283	41 b8 0d 07 00
	00		 mov	 r8d, 1805		; 0000070dH
  00289	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JBJNIJPF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AAr?$AAu?$AAn?$AA?4?$AAc?$AA?$AA@
  00290	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@MDHPGLPH@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?$CJ?$AA?$AA@
  00297	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0029d	33 c0		 xor	 eax, eax
$LN43@print_exce@2:

; 1806 :         className = PyExceptionClass_Name(type);

  0029f	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  002a4	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  002a8	48 89 44 24 78	 mov	 QWORD PTR className$123177[rsp], rax

; 1807 :         if (className != NULL) {

  002ad	48 83 7c 24 78
	00		 cmp	 QWORD PTR className$123177[rsp], 0
  002b3	74 33		 je	 SHORT $LN28@print_exce@2

; 1808 :             char *dot = strrchr(className, '.');

  002b5	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  002ba	48 8b 4c 24 78	 mov	 rcx, QWORD PTR className$123177[rsp]
  002bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  002c5	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dot$123190[rsp], rax

; 1809 :             if (dot != NULL)

  002cd	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR dot$123190[rsp], 0
  002d6	74 10		 je	 SHORT $LN27@print_exce@2

; 1810 :                 className = dot+1;

  002d8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR dot$123190[rsp]
  002e0	48 ff c0	 inc	 rax
  002e3	48 89 44 24 78	 mov	 QWORD PTR className$123177[rsp], rax
$LN27@print_exce@2:
$LN28@print_exce@2:

; 1811 :         }
; 1812 : 
; 1813 :         moduleName = _PyObject_GetAttrId(type, &PyId___module__);

  002e8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___module__@?6??print_exception@@9@9
  002ed	8b c0		 mov	 eax, eax
  002ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002f5	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002fe	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00302	48 8b d0	 mov	 rdx, rax
  00305	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  0030a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0030f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR moduleName$123176[rsp], rax

; 1814 :         if (moduleName == NULL || !PyUnicode_Check(moduleName))

  00317	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR moduleName$123176[rsp], 0
  00320	74 1b		 je	 SHORT $LN25@print_exce@2
  00322	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR moduleName$123176[rsp]
  0032a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0032e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00334	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00339	85 c0		 test	 eax, eax
  0033b	75 38		 jne	 SHORT $LN26@print_exce@2
$LN25@print_exce@2:
$LN24@print_exce@2:

; 1815 :         {
; 1816 :             Py_XDECREF(moduleName);

  0033d	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR moduleName$123176[rsp], 0
  00346	74 0d		 je	 SHORT $LN21@print_exce@2
  00348	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR moduleName$123176[rsp]
  00350	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@print_exce@2:
  00355	33 c0		 xor	 eax, eax
  00357	85 c0		 test	 eax, eax
  00359	75 e2		 jne	 SHORT $LN24@print_exce@2

; 1817 :             err = PyFile_WriteString("<unknown>", f);

  0035b	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  00363	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
  0036a	e8 00 00 00 00	 call	 PyFile_WriteString
  0036f	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax

; 1818 :         }
; 1819 :         else {

  00373	eb 7e		 jmp	 SHORT $LN20@print_exce@2
$LN26@print_exce@2:

; 1820 :             char* modstr = _PyUnicode_AsString(moduleName);

  00375	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR moduleName$123176[rsp]
  0037d	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00382	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR modstr$123204[rsp], rax

; 1821 :             if (modstr && strcmp(modstr, "builtins"))

  0038a	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR modstr$123204[rsp], 0
  00393	74 51		 je	 SHORT $LN19@print_exce@2
  00395	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  0039c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR modstr$123204[rsp]
  003a4	e8 00 00 00 00	 call	 strcmp
  003a9	85 c0		 test	 eax, eax
  003ab	74 39		 je	 SHORT $LN19@print_exce@2

; 1822 :             {
; 1823 :                 err = PyFile_WriteString(modstr, f);

  003ad	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  003b5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR modstr$123204[rsp]
  003bd	e8 00 00 00 00	 call	 PyFile_WriteString
  003c2	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax

; 1824 :                 err += PyFile_WriteString(".", f);

  003c6	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  003ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  003d5	e8 00 00 00 00	 call	 PyFile_WriteString
  003da	8b 4c 24 40	 mov	 ecx, DWORD PTR err$[rsp]
  003de	03 c8		 add	 ecx, eax
  003e0	8b c1		 mov	 eax, ecx
  003e2	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax
$LN19@print_exce@2:

; 1825 :             }
; 1826 :             Py_DECREF(moduleName);

  003e6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR moduleName$123176[rsp]
  003ee	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@print_exce@2:

; 1827 :         }
; 1828 :         if (err == 0) {

  003f3	83 7c 24 40 00	 cmp	 DWORD PTR err$[rsp], 0
  003f8	75 38		 jne	 SHORT $LN18@print_exce@2

; 1829 :             if (className == NULL)

  003fa	48 83 7c 24 78
	00		 cmp	 QWORD PTR className$123177[rsp], 0
  00400	75 1a		 jne	 SHORT $LN17@print_exce@2

; 1830 :                       err = PyFile_WriteString("<unknown>", f);

  00402	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  0040a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
  00411	e8 00 00 00 00	 call	 PyFile_WriteString
  00416	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax

; 1831 :             else

  0041a	eb 16		 jmp	 SHORT $LN16@print_exce@2
$LN17@print_exce@2:

; 1832 :                       err = PyFile_WriteString(className, f);

  0041c	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  00424	48 8b 4c 24 78	 mov	 rcx, QWORD PTR className$123177[rsp]
  00429	e8 00 00 00 00	 call	 PyFile_WriteString
  0042e	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax
$LN16@print_exce@2:
$LN18@print_exce@2:
$LN29@print_exce@2:

; 1833 :         }
; 1834 :     }
; 1835 :     if (err == 0 && (value != Py_None)) {

  00432	83 7c 24 40 00	 cmp	 DWORD PTR err$[rsp], 0
  00437	0f 85 c8 00 00
	00		 jne	 $LN15@print_exce@2
  0043d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00444	48 39 84 24 b8
	00 00 00	 cmp	 QWORD PTR value$[rsp], rax
  0044c	0f 84 b3 00 00
	00		 je	 $LN15@print_exce@2

; 1836 :         PyObject *s = PyObject_Str(value);

  00452	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  0045a	e8 00 00 00 00	 call	 PyObject_Str
  0045f	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR s$123213[rsp], rax

; 1837 :         /* only print colon if the str() of the
; 1838 :            object is not the empty string
; 1839 :         */
; 1840 :         if (s == NULL)

  00467	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR s$123213[rsp], 0
  00470	75 0a		 jne	 SHORT $LN14@print_exce@2

; 1841 :             err = -1;

  00472	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1

; 1842 :         else if (!PyUnicode_Check(s) ||

  0047a	eb 45		 jmp	 SHORT $LN13@print_exce@2
$LN14@print_exce@2:

; 1843 :             PyUnicode_GetLength(s) != 0)

  0047c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR s$123213[rsp]
  00484	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00488	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0048e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00493	85 c0		 test	 eax, eax
  00495	74 12		 je	 SHORT $LN11@print_exce@2
  00497	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR s$123213[rsp]
  0049f	e8 00 00 00 00	 call	 PyUnicode_GetLength
  004a4	48 85 c0	 test	 rax, rax
  004a7	74 18		 je	 SHORT $LN12@print_exce@2
$LN11@print_exce@2:

; 1844 :             err = PyFile_WriteString(": ", f);

  004a9	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  004b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02LMMGGCAJ@?3?5?$AA@
  004b8	e8 00 00 00 00	 call	 PyFile_WriteString
  004bd	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax
$LN12@print_exce@2:
$LN13@print_exce@2:

; 1845 :         if (err == 0)

  004c1	83 7c 24 40 00	 cmp	 DWORD PTR err$[rsp], 0
  004c6	75 1f		 jne	 SHORT $LN10@print_exce@2

; 1846 :           err = PyFile_WriteObject(s, f, Py_PRINT_RAW);

  004c8	41 b8 01 00 00
	00		 mov	 r8d, 1
  004ce	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  004d6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR s$123213[rsp]
  004de	e8 00 00 00 00	 call	 PyFile_WriteObject
  004e3	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax
$LN10@print_exce@2:
$LN9@print_exce@2:

; 1847 :         Py_XDECREF(s);

  004e7	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR s$123213[rsp], 0
  004f0	74 0d		 je	 SHORT $LN6@print_exce@2
  004f2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR s$123213[rsp]
  004fa	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@print_exce@2:
  004ff	33 c0		 xor	 eax, eax
  00501	85 c0		 test	 eax, eax
  00503	75 e2		 jne	 SHORT $LN9@print_exce@2
$LN15@print_exce@2:

; 1848 :     }
; 1849 :     /* try to write a newline in any case */
; 1850 :     err += PyFile_WriteString("\n", f);

  00505	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  0050d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00514	e8 00 00 00 00	 call	 PyFile_WriteString
  00519	8b 4c 24 40	 mov	 ecx, DWORD PTR err$[rsp]
  0051d	03 c8		 add	 ecx, eax
  0051f	8b c1		 mov	 eax, ecx
  00521	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax
$LN5@print_exce@2:

; 1851 :     Py_XDECREF(tb);

  00525	48 83 7c 24 38
	00		 cmp	 QWORD PTR tb$[rsp], 0
  0052b	74 0a		 je	 SHORT $LN2@print_exce@2
  0052d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tb$[rsp]
  00532	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@print_exce@2:
  00537	33 c0		 xor	 eax, eax
  00539	85 c0		 test	 eax, eax
  0053b	75 e8		 jne	 SHORT $LN5@print_exce@2

; 1852 :     Py_DECREF(value);

  0053d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00545	e8 00 00 00 00	 call	 _Py_DecRef

; 1853 :     /* If an error happened here, don't show it.
; 1854 :        XXX This is wrong, but too many callers rely on this behavior. */
; 1855 :     if (err != 0)

  0054a	83 7c 24 40 00	 cmp	 DWORD PTR err$[rsp], 0
  0054f	74 05		 je	 SHORT $LN1@print_exce@2

; 1856 :         PyErr_Clear();

  00551	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@print_exce@2:
$LN40@print_exce@2:

; 1857 : }

  00556	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0055d	c3		 ret	 0
print_exception ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_syntax_error DD imagerel parse_syntax_error
	DD	imagerel parse_syntax_error+680
	DD	imagerel $unwind$parse_syntax_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_syntax_error DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parse_syntax_error
_TEXT	SEGMENT
v$ = 32
hold$ = 40
err$ = 64
message$ = 72
filename$ = 80
lineno$ = 88
offset$ = 96
text$ = 104
parse_syntax_error PROC					; COMDAT

; 1518 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1519 :     long hold;
; 1520 :     PyObject *v;
; 1521 :     _Py_IDENTIFIER(msg);
; 1522 :     _Py_IDENTIFIER(filename);
; 1523 :     _Py_IDENTIFIER(lineno);
; 1524 :     _Py_IDENTIFIER(offset);
; 1525 :     _Py_IDENTIFIER(text);
; 1526 : 
; 1527 :     *message = NULL;

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR message$[rsp]
  0001d	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1528 : 
; 1529 :     /* new style errors.  `err' is an instance */
; 1530 :     *message = _PyObject_GetAttrId(err, &PyId_msg);

  00024	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_msg@?1??parse_syntax_error@@9@9
  00029	8b c0		 mov	 eax, eax
  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00031	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0003a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0003e	48 8b d0	 mov	 rdx, rax
  00041	48 8b 4c 24 40	 mov	 rcx, QWORD PTR err$[rsp]
  00046	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0004b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR message$[rsp]
  00050	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1531 :     if (!*message)

  00053	48 8b 44 24 48	 mov	 rax, QWORD PTR message$[rsp]
  00058	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0005c	75 05		 jne	 SHORT $LN19@parse_synt

; 1532 :         goto finally;

  0005e	e9 20 02 00 00	 jmp	 $finally$122968
$LN19@parse_synt:

; 1533 : 
; 1534 :     v = _PyObject_GetAttrId(err, &PyId_filename);

  00063	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_filename@?1??parse_syntax_error@@9@9
  00068	8b c0		 mov	 eax, eax
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00070	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00079	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0007d	48 8b d0	 mov	 rdx, rax
  00080	48 8b 4c 24 40	 mov	 rcx, QWORD PTR err$[rsp]
  00085	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0008a	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1535 :     if (!v)

  0008f	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00095	75 05		 jne	 SHORT $LN18@parse_synt

; 1536 :         goto finally;

  00097	e9 e7 01 00 00	 jmp	 $finally$122968
$LN18@parse_synt:

; 1537 :     if (v == Py_None) {

  0009c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000a3	48 39 44 24 20	 cmp	 QWORD PTR v$[rsp], rax
  000a8	75 18		 jne	 SHORT $LN17@parse_synt

; 1538 :         Py_DECREF(v);

  000aa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000af	e8 00 00 00 00	 call	 _Py_DecRef

; 1539 :         *filename = NULL;

  000b4	48 8b 44 24 50	 mov	 rax, QWORD PTR filename$[rsp]
  000b9	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1540 :     }
; 1541 :     else {

  000c0	eb 2c		 jmp	 SHORT $LN16@parse_synt
$LN17@parse_synt:

; 1542 :         *filename = _PyUnicode_AsString(v);

  000c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000c7	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  000cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  000d1	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1543 :         Py_DECREF(v);

  000d4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000d9	e8 00 00 00 00	 call	 _Py_DecRef

; 1544 :         if (!*filename)

  000de	48 8b 44 24 50	 mov	 rax, QWORD PTR filename$[rsp]
  000e3	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000e7	75 05		 jne	 SHORT $LN15@parse_synt

; 1545 :             goto finally;

  000e9	e9 95 01 00 00	 jmp	 $finally$122968
$LN15@parse_synt:
$LN16@parse_synt:

; 1546 :     }
; 1547 : 
; 1548 :     v = _PyObject_GetAttrId(err, &PyId_lineno);

  000ee	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_lineno@?1??parse_syntax_error@@9@9
  000f3	8b c0		 mov	 eax, eax
  000f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000fb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00104	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00108	48 8b d0	 mov	 rdx, rax
  0010b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR err$[rsp]
  00110	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00115	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1549 :     if (!v)

  0011a	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00120	75 05		 jne	 SHORT $LN14@parse_synt

; 1550 :         goto finally;

  00122	e9 5c 01 00 00	 jmp	 $finally$122968
$LN14@parse_synt:

; 1551 :     hold = PyLong_AsLong(v);

  00127	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0012c	e8 00 00 00 00	 call	 PyLong_AsLong
  00131	89 44 24 28	 mov	 DWORD PTR hold$[rsp], eax

; 1552 :     Py_DECREF(v);

  00135	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0013a	e8 00 00 00 00	 call	 _Py_DecRef

; 1553 :     if (hold < 0 && PyErr_Occurred())

  0013f	83 7c 24 28 00	 cmp	 DWORD PTR hold$[rsp], 0
  00144	7d 0f		 jge	 SHORT $LN13@parse_synt
  00146	e8 00 00 00 00	 call	 PyErr_Occurred
  0014b	48 85 c0	 test	 rax, rax
  0014e	74 05		 je	 SHORT $LN13@parse_synt

; 1554 :         goto finally;

  00150	e9 2e 01 00 00	 jmp	 $finally$122968
$LN13@parse_synt:

; 1555 :     *lineno = (int)hold;

  00155	48 8b 44 24 58	 mov	 rax, QWORD PTR lineno$[rsp]
  0015a	8b 4c 24 28	 mov	 ecx, DWORD PTR hold$[rsp]
  0015e	89 08		 mov	 DWORD PTR [rax], ecx

; 1556 : 
; 1557 :     v = _PyObject_GetAttrId(err, &PyId_offset);

  00160	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_offset@?1??parse_syntax_error@@9@9
  00165	8b c0		 mov	 eax, eax
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00176	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0017a	48 8b d0	 mov	 rdx, rax
  0017d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR err$[rsp]
  00182	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00187	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1558 :     if (!v)

  0018c	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00192	75 05		 jne	 SHORT $LN12@parse_synt

; 1559 :         goto finally;

  00194	e9 ea 00 00 00	 jmp	 $finally$122968
$LN12@parse_synt:

; 1560 :     if (v == Py_None) {

  00199	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001a0	48 39 44 24 20	 cmp	 QWORD PTR v$[rsp], rax
  001a5	75 17		 jne	 SHORT $LN11@parse_synt

; 1561 :         *offset = -1;

  001a7	48 8b 44 24 60	 mov	 rax, QWORD PTR offset$[rsp]
  001ac	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [rax], -1

; 1562 :         Py_DECREF(v);

  001b2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  001b7	e8 00 00 00 00	 call	 _Py_DecRef

; 1563 :     } else {

  001bc	eb 39		 jmp	 SHORT $LN10@parse_synt
$LN11@parse_synt:

; 1564 :         hold = PyLong_AsLong(v);

  001be	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  001c3	e8 00 00 00 00	 call	 PyLong_AsLong
  001c8	89 44 24 28	 mov	 DWORD PTR hold$[rsp], eax

; 1565 :         Py_DECREF(v);

  001cc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  001d1	e8 00 00 00 00	 call	 _Py_DecRef

; 1566 :         if (hold < 0 && PyErr_Occurred())

  001d6	83 7c 24 28 00	 cmp	 DWORD PTR hold$[rsp], 0
  001db	7d 0f		 jge	 SHORT $LN9@parse_synt
  001dd	e8 00 00 00 00	 call	 PyErr_Occurred
  001e2	48 85 c0	 test	 rax, rax
  001e5	74 05		 je	 SHORT $LN9@parse_synt

; 1567 :             goto finally;

  001e7	e9 97 00 00 00	 jmp	 $finally$122968
$LN9@parse_synt:

; 1568 :         *offset = (int)hold;

  001ec	48 8b 44 24 60	 mov	 rax, QWORD PTR offset$[rsp]
  001f1	8b 4c 24 28	 mov	 ecx, DWORD PTR hold$[rsp]
  001f5	89 08		 mov	 DWORD PTR [rax], ecx
$LN10@parse_synt:

; 1569 :     }
; 1570 : 
; 1571 :     v = _PyObject_GetAttrId(err, &PyId_text);

  001f7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_text@?1??parse_syntax_error@@9@9
  001fc	8b c0		 mov	 eax, eax
  001fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00204	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0020d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00211	48 8b d0	 mov	 rdx, rax
  00214	48 8b 4c 24 40	 mov	 rcx, QWORD PTR err$[rsp]
  00219	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0021e	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1572 :     if (!v)

  00223	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00229	75 02		 jne	 SHORT $LN8@parse_synt

; 1573 :         goto finally;

  0022b	eb 56		 jmp	 SHORT $finally$122968
$LN8@parse_synt:

; 1574 :     if (v == Py_None) {

  0022d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00234	48 39 44 24 20	 cmp	 QWORD PTR v$[rsp], rax
  00239	75 18		 jne	 SHORT $LN7@parse_synt

; 1575 :         Py_DECREF(v);

  0023b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00240	e8 00 00 00 00	 call	 _Py_DecRef

; 1576 :         *text = NULL;

  00245	48 8b 44 24 68	 mov	 rax, QWORD PTR text$[rsp]
  0024a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1577 :     }
; 1578 :     else {

  00251	eb 29		 jmp	 SHORT $LN6@parse_synt
$LN7@parse_synt:

; 1579 :         *text = _PyUnicode_AsString(v);

  00253	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00258	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0025d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR text$[rsp]
  00262	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1580 :         Py_DECREF(v);

  00265	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0026a	e8 00 00 00 00	 call	 _Py_DecRef

; 1581 :         if (!*text)

  0026f	48 8b 44 24 68	 mov	 rax, QWORD PTR text$[rsp]
  00274	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00278	75 02		 jne	 SHORT $LN5@parse_synt

; 1582 :             goto finally;

  0027a	eb 07		 jmp	 SHORT $finally$122968
$LN5@parse_synt:
$LN6@parse_synt:

; 1583 :     }
; 1584 :     return 1;

  0027c	b8 01 00 00 00	 mov	 eax, 1
  00281	eb 20		 jmp	 SHORT $LN20@parse_synt
$finally$122968:
$LN4@parse_synt:

; 1585 : 
; 1586 : finally:
; 1587 :     Py_XDECREF(*message);

  00283	48 8b 44 24 48	 mov	 rax, QWORD PTR message$[rsp]
  00288	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0028c	74 0d		 je	 SHORT $LN1@parse_synt
  0028e	48 8b 44 24 48	 mov	 rax, QWORD PTR message$[rsp]
  00293	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00296	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@parse_synt:
  0029b	33 c0		 xor	 eax, eax
  0029d	85 c0		 test	 eax, eax
  0029f	75 e2		 jne	 SHORT $LN4@parse_synt

; 1588 :     return 0;

  002a1	33 c0		 xor	 eax, eax
$LN20@parse_synt:

; 1589 : }

  002a3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002a7	c3		 ret	 0
parse_syntax_error ENDP
_TEXT	ENDS
PUBLIC	??_C@_02JMHDMNNN@?$FO?6?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_04PFOHOKJK@?5?5?5?5?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$print_error_text DD imagerel print_error_text
	DD	imagerel print_error_text+416
	DD	imagerel $unwind$print_error_text
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$print_error_text DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT ??_C@_02JMHDMNNN@?$FO?6?$AA@
CONST	SEGMENT
??_C@_02JMHDMNNN@?$FO?6?$AA@ DB '^', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFOHOKJK@?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_04PFOHOKJK@?5?5?5?5?$AA@ DB '    ', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT print_error_text
_TEXT	SEGMENT
nl$ = 32
tv66 = 40
f$ = 64
offset$ = 72
text$ = 80
print_error_text PROC					; COMDAT

; 1599 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1600 :     char *nl;
; 1601 :     if (offset >= 0) {

  00012	83 7c 24 48 00	 cmp	 DWORD PTR offset$[rsp], 0
  00017	0f 8c d9 00 00
	00		 jl	 $LN14@print_erro

; 1602 :         if (offset > 0 && offset == strlen(text) && text[offset - 1] == '\n')

  0001d	83 7c 24 48 00	 cmp	 DWORD PTR offset$[rsp], 0
  00022	7e 3e		 jle	 SHORT $LN13@print_erro
  00024	48 63 44 24 48	 movsxd	 rax, DWORD PTR offset$[rsp]
  00029	48 89 44 24 28	 mov	 QWORD PTR tv66[rsp], rax
  0002e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR text$[rsp]
  00033	e8 00 00 00 00	 call	 strlen
  00038	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv66[rsp]
  0003d	48 3b c8	 cmp	 rcx, rax
  00040	75 20		 jne	 SHORT $LN13@print_erro
  00042	8b 44 24 48	 mov	 eax, DWORD PTR offset$[rsp]
  00046	ff c8		 dec	 eax
  00048	48 98		 cdqe
  0004a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR text$[rsp]
  0004f	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00053	83 f8 0a	 cmp	 eax, 10
  00056	75 0a		 jne	 SHORT $LN13@print_erro

; 1603 :             offset--;

  00058	8b 44 24 48	 mov	 eax, DWORD PTR offset$[rsp]
  0005c	ff c8		 dec	 eax
  0005e	89 44 24 48	 mov	 DWORD PTR offset$[rsp], eax
$LN13@print_erro:
$LN12@print_erro:

; 1604 :         for (;;) {
; 1605 :             nl = strchr(text, '\n');

  00062	ba 0a 00 00 00	 mov	 edx, 10
  00067	48 8b 4c 24 50	 mov	 rcx, QWORD PTR text$[rsp]
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00072	48 89 44 24 20	 mov	 QWORD PTR nl$[rsp], rax

; 1606 :             if (nl == NULL || nl-text >= offset)

  00077	48 83 7c 24 20
	00		 cmp	 QWORD PTR nl$[rsp], 0
  0007d	74 1a		 je	 SHORT $LN9@print_erro
  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR text$[rsp]
  00084	48 8b 4c 24 20	 mov	 rcx, QWORD PTR nl$[rsp]
  00089	48 2b c8	 sub	 rcx, rax
  0008c	48 8b c1	 mov	 rax, rcx
  0008f	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR offset$[rsp]
  00094	48 3b c1	 cmp	 rax, rcx
  00097	7c 02		 jl	 SHORT $LN10@print_erro
$LN9@print_erro:

; 1607 :                 break;

  00099	eb 28		 jmp	 SHORT $LN11@print_erro
$LN10@print_erro:

; 1608 :             offset -= (int)(nl+1-text);

  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR nl$[rsp]
  000a0	48 ff c0	 inc	 rax
  000a3	48 2b 44 24 50	 sub	 rax, QWORD PTR text$[rsp]
  000a8	8b 4c 24 48	 mov	 ecx, DWORD PTR offset$[rsp]
  000ac	2b c8		 sub	 ecx, eax
  000ae	8b c1		 mov	 eax, ecx
  000b0	89 44 24 48	 mov	 DWORD PTR offset$[rsp], eax

; 1609 :             text = nl+1;

  000b4	48 8b 44 24 20	 mov	 rax, QWORD PTR nl$[rsp]
  000b9	48 ff c0	 inc	 rax
  000bc	48 89 44 24 50	 mov	 QWORD PTR text$[rsp], rax

; 1610 :         }

  000c1	eb 9f		 jmp	 SHORT $LN12@print_erro
$LN11@print_erro:
$LN8@print_erro:

; 1611 :         while (*text == ' ' || *text == '\t') {

  000c3	48 8b 44 24 50	 mov	 rax, QWORD PTR text$[rsp]
  000c8	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000cb	83 f8 20	 cmp	 eax, 32			; 00000020H
  000ce	74 0d		 je	 SHORT $LN6@print_erro
  000d0	48 8b 44 24 50	 mov	 rax, QWORD PTR text$[rsp]
  000d5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d8	83 f8 09	 cmp	 eax, 9
  000db	75 19		 jne	 SHORT $LN7@print_erro
$LN6@print_erro:

; 1612 :             text++;

  000dd	48 8b 44 24 50	 mov	 rax, QWORD PTR text$[rsp]
  000e2	48 ff c0	 inc	 rax
  000e5	48 89 44 24 50	 mov	 QWORD PTR text$[rsp], rax

; 1613 :             offset--;

  000ea	8b 44 24 48	 mov	 eax, DWORD PTR offset$[rsp]
  000ee	ff c8		 dec	 eax
  000f0	89 44 24 48	 mov	 DWORD PTR offset$[rsp], eax

; 1614 :         }

  000f4	eb cd		 jmp	 SHORT $LN8@print_erro
$LN7@print_erro:
$LN14@print_erro:

; 1615 :     }
; 1616 :     PyFile_WriteString("    ", f);

  000f6	48 8b 54 24 40	 mov	 rdx, QWORD PTR f$[rsp]
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PFOHOKJK@?5?5?5?5?$AA@
  00102	e8 00 00 00 00	 call	 PyFile_WriteString

; 1617 :     PyFile_WriteString(text, f);

  00107	48 8b 54 24 40	 mov	 rdx, QWORD PTR f$[rsp]
  0010c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR text$[rsp]
  00111	e8 00 00 00 00	 call	 PyFile_WriteString

; 1618 :     if (*text == '\0' || text[strlen(text)-1] != '\n')

  00116	48 8b 44 24 50	 mov	 rax, QWORD PTR text$[rsp]
  0011b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0011e	85 c0		 test	 eax, eax
  00120	74 19		 je	 SHORT $LN4@print_erro
  00122	48 8b 4c 24 50	 mov	 rcx, QWORD PTR text$[rsp]
  00127	e8 00 00 00 00	 call	 strlen
  0012c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR text$[rsp]
  00131	0f be 44 01 ff	 movsx	 eax, BYTE PTR [rcx+rax-1]
  00136	83 f8 0a	 cmp	 eax, 10
  00139	74 11		 je	 SHORT $LN5@print_erro
$LN4@print_erro:

; 1619 :         PyFile_WriteString("\n", f);

  0013b	48 8b 54 24 40	 mov	 rdx, QWORD PTR f$[rsp]
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00147	e8 00 00 00 00	 call	 PyFile_WriteString
$LN5@print_erro:

; 1620 :     if (offset == -1)

  0014c	83 7c 24 48 ff	 cmp	 DWORD PTR offset$[rsp], -1
  00151	75 02		 jne	 SHORT $LN3@print_erro

; 1621 :         return;

  00153	eb 46		 jmp	 SHORT $LN15@print_erro
$LN3@print_erro:

; 1622 :     PyFile_WriteString("    ", f);

  00155	48 8b 54 24 40	 mov	 rdx, QWORD PTR f$[rsp]
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PFOHOKJK@?5?5?5?5?$AA@
  00161	e8 00 00 00 00	 call	 PyFile_WriteString
$LN2@print_erro:

; 1623 :     while (--offset > 0)

  00166	8b 44 24 48	 mov	 eax, DWORD PTR offset$[rsp]
  0016a	ff c8		 dec	 eax
  0016c	89 44 24 48	 mov	 DWORD PTR offset$[rsp], eax
  00170	83 7c 24 48 00	 cmp	 DWORD PTR offset$[rsp], 0
  00175	7e 13		 jle	 SHORT $LN1@print_erro

; 1624 :         PyFile_WriteString(" ", f);

  00177	48 8b 54 24 40	 mov	 rdx, QWORD PTR f$[rsp]
  0017c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01CLKCMJKC@?5?$AA@
  00183	e8 00 00 00 00	 call	 PyFile_WriteString
  00188	eb dc		 jmp	 SHORT $LN2@print_erro
$LN1@print_erro:

; 1625 :     PyFile_WriteString("^\n", f);

  0018a	48 8b 54 24 40	 mov	 rdx, QWORD PTR f$[rsp]
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02JMHDMNNN@?$FO?6?$AA@
  00196	e8 00 00 00 00	 call	 PyFile_WriteString
$LN15@print_erro:

; 1626 : }

  0019b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0019f	c3		 ret	 0
print_error_text ENDP
_TEXT	ENDS
PUBLIC	PyParser_ASTFromString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_StringFlags DD imagerel $LN5
	DD	imagerel $LN5+182
	DD	imagerel $unwind$PyRun_StringFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_StringFlags DD 011701H
	DD	0a217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_StringFlags
_TEXT	SEGMENT
arena$ = 48
ret$ = 56
mod$ = 64
str$ = 96
start$ = 104
globals$ = 112
locals$ = 120
flags$ = 128
PyRun_StringFlags PROC					; COMDAT

; 1949 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1950 :     PyObject *ret = NULL;

  00017	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR ret$[rsp], 0

; 1951 :     mod_ty mod;
; 1952 :     PyArena *arena = PyArena_New();

  00020	e8 00 00 00 00	 call	 PyArena_New
  00025	48 89 44 24 30	 mov	 QWORD PTR arena$[rsp], rax

; 1953 :     if (arena == NULL)

  0002a	48 83 7c 24 30
	00		 cmp	 QWORD PTR arena$[rsp], 0
  00030	75 04		 jne	 SHORT $LN2@PyRun_Stri

; 1954 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 7b		 jmp	 SHORT $LN3@PyRun_Stri
$LN2@PyRun_Stri:

; 1955 : 
; 1956 :     mod = PyParser_ASTFromString(str, "<string>", start, flags, arena);

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR arena$[rsp]
  0003b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00040	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR flags$[rsp]
  00048	44 8b 44 24 68	 mov	 r8d, DWORD PTR start$[rsp]
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
  00054	48 8b 4c 24 60	 mov	 rcx, QWORD PTR str$[rsp]
  00059	e8 00 00 00 00	 call	 PyParser_ASTFromString
  0005e	48 89 44 24 40	 mov	 QWORD PTR mod$[rsp], rax

; 1957 :     if (mod != NULL)

  00063	48 83 7c 24 40
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00069	74 37		 je	 SHORT $LN1@PyRun_Stri

; 1958 :         ret = run_mod(mod, "<string>", globals, locals, flags, arena);

  0006b	48 8b 44 24 30	 mov	 rax, QWORD PTR arena$[rsp]
  00070	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00075	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR flags$[rsp]
  0007d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00082	4c 8b 4c 24 78	 mov	 r9, QWORD PTR locals$[rsp]
  00087	4c 8b 44 24 70	 mov	 r8, QWORD PTR globals$[rsp]
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
  00093	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mod$[rsp]
  00098	e8 00 00 00 00	 call	 run_mod
  0009d	48 89 44 24 38	 mov	 QWORD PTR ret$[rsp], rax
$LN1@PyRun_Stri:

; 1959 :     PyArena_Free(arena);

  000a2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arena$[rsp]
  000a7	e8 00 00 00 00	 call	 PyArena_Free

; 1960 :     return ret;

  000ac	48 8b 44 24 38	 mov	 rax, QWORD PTR ret$[rsp]
$LN3@PyRun_Stri:

; 1961 : }

  000b1	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000b5	c3		 ret	 0
PyRun_StringFlags ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_FileExFlags DD imagerel $LN6
	DD	imagerel $LN6+264
	DD	imagerel $unwind$PyRun_FileExFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_FileExFlags DD 011801H
	DD	0e218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_FileExFlags
_TEXT	SEGMENT
arena$ = 80
ret$ = 88
mod$ = 96
fp$ = 128
filename$ = 136
start$ = 144
globals$ = 152
locals$ = 160
closeit$ = 168
flags$ = 176
PyRun_FileExFlags PROC					; COMDAT

; 1966 : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1967 :     PyObject *ret;
; 1968 :     mod_ty mod;
; 1969 :     PyArena *arena = PyArena_New();

  00018	e8 00 00 00 00	 call	 PyArena_New
  0001d	48 89 44 24 50	 mov	 QWORD PTR arena$[rsp], rax

; 1970 :     if (arena == NULL)

  00022	48 83 7c 24 50
	00		 cmp	 QWORD PTR arena$[rsp], 0
  00028	75 07		 jne	 SHORT $LN3@PyRun_File

; 1971 :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	e9 d2 00 00 00	 jmp	 $LN4@PyRun_File
$LN3@PyRun_File:

; 1972 : 
; 1973 :     mod = PyParser_ASTFromFile(fp, filename, NULL, start, 0, 0,
; 1974 :                                flags, NULL, arena);

  00031	48 8b 44 24 50	 mov	 rax, QWORD PTR arena$[rsp]
  00036	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0003b	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  00044	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR flags$[rsp]
  0004c	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00051	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0005a	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00063	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR start$[rsp]
  0006b	45 33 c0	 xor	 r8d, r8d
  0006e	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00076	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  0007e	e8 00 00 00 00	 call	 PyParser_ASTFromFile
  00083	48 89 44 24 60	 mov	 QWORD PTR mod$[rsp], rax

; 1975 :     if (closeit)

  00088	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR closeit$[rsp], 0
  00090	74 0e		 je	 SHORT $LN2@PyRun_File

; 1976 :         fclose(fp);

  00092	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN2@PyRun_File:

; 1977 :     if (mod == NULL) {

  000a0	48 83 7c 24 60
	00		 cmp	 QWORD PTR mod$[rsp], 0
  000a6	75 0e		 jne	 SHORT $LN1@PyRun_File

; 1978 :         PyArena_Free(arena);

  000a8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  000ad	e8 00 00 00 00	 call	 PyArena_Free

; 1979 :         return NULL;

  000b2	33 c0		 xor	 eax, eax
  000b4	eb 4d		 jmp	 SHORT $LN4@PyRun_File
$LN1@PyRun_File:

; 1980 :     }
; 1981 :     ret = run_mod(mod, filename, globals, locals, flags, arena);

  000b6	48 8b 44 24 50	 mov	 rax, QWORD PTR arena$[rsp]
  000bb	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000c0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR flags$[rsp]
  000c8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cd	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR locals$[rsp]
  000d5	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR globals$[rsp]
  000dd	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000e5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mod$[rsp]
  000ea	e8 00 00 00 00	 call	 run_mod
  000ef	48 89 44 24 58	 mov	 QWORD PTR ret$[rsp], rax

; 1982 :     PyArena_Free(arena);

  000f4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arena$[rsp]
  000f9	e8 00 00 00 00	 call	 PyArena_Free

; 1983 :     return ret;

  000fe	48 8b 44 24 58	 mov	 rax, QWORD PTR ret$[rsp]
$LN4@PyRun_File:

; 1984 : }

  00103	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00107	c3		 ret	 0
PyRun_FileExFlags ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$flush_io DD imagerel flush_io
	DD	imagerel flush_io+251
	DD	imagerel $unwind$flush_io
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$flush_io DD 010401H
	DD	0a204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT flush_io
_TEXT	SEGMENT
value$ = 32
type$ = 40
f$ = 48
traceback$ = 56
r$ = 64
flush_io PROC						; COMDAT

; 1988 : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1989 :     PyObject *f, *r;
; 1990 :     PyObject *type, *value, *traceback;
; 1991 :     _Py_IDENTIFIER(flush);
; 1992 : 
; 1993 :     /* Save the current exception */
; 1994 :     PyErr_Fetch(&type, &value, &traceback);

  00004	4c 8d 44 24 38	 lea	 r8, QWORD PTR traceback$[rsp]
  00009	48 8d 54 24 20	 lea	 rdx, QWORD PTR value$[rsp]
  0000e	48 8d 4c 24 28	 lea	 rcx, QWORD PTR type$[rsp]
  00013	e8 00 00 00 00	 call	 PyErr_Fetch

; 1995 : 
; 1996 :     f = PySys_GetObject("stderr");

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  0001f	e8 00 00 00 00	 call	 PySys_GetObject
  00024	48 89 44 24 30	 mov	 QWORD PTR f$[rsp], rax

; 1997 :     if (f != NULL) {

  00029	48 83 7c 24 30
	00		 cmp	 QWORD PTR f$[rsp], 0
  0002f	74 4c		 je	 SHORT $LN6@flush_io

; 1998 :         r = _PyObject_CallMethodId(f, &PyId_flush, "");

  00031	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_flush@?1??flush_io@@9@9
  00036	8b c0		 mov	 eax, eax
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00047	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0004b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00052	48 8b d0	 mov	 rdx, rax
  00055	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  0005a	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0005f	48 89 44 24 40	 mov	 QWORD PTR r$[rsp], rax

; 1999 :         if (r)

  00064	48 83 7c 24 40
	00		 cmp	 QWORD PTR r$[rsp], 0
  0006a	74 0c		 je	 SHORT $LN5@flush_io

; 2000 :             Py_DECREF(r);

  0006c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  00071	e8 00 00 00 00	 call	 _Py_DecRef

; 2001 :         else

  00076	eb 05		 jmp	 SHORT $LN4@flush_io
$LN5@flush_io:

; 2002 :             PyErr_Clear();

  00078	e8 00 00 00 00	 call	 PyErr_Clear
$LN4@flush_io:
$LN6@flush_io:

; 2003 :     }
; 2004 :     f = PySys_GetObject("stdout");

  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DJDOIFHB@stdout?$AA@
  00084	e8 00 00 00 00	 call	 PySys_GetObject
  00089	48 89 44 24 30	 mov	 QWORD PTR f$[rsp], rax

; 2005 :     if (f != NULL) {

  0008e	48 83 7c 24 30
	00		 cmp	 QWORD PTR f$[rsp], 0
  00094	74 4c		 je	 SHORT $LN3@flush_io

; 2006 :         r = _PyObject_CallMethodId(f, &PyId_flush, "");

  00096	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_flush@?1??flush_io@@9@9
  0009b	8b c0		 mov	 eax, eax
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000a3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000ac	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000b7	48 8b d0	 mov	 rdx, rax
  000ba	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  000bf	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  000c4	48 89 44 24 40	 mov	 QWORD PTR r$[rsp], rax

; 2007 :         if (r)

  000c9	48 83 7c 24 40
	00		 cmp	 QWORD PTR r$[rsp], 0
  000cf	74 0c		 je	 SHORT $LN2@flush_io

; 2008 :             Py_DECREF(r);

  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  000d6	e8 00 00 00 00	 call	 _Py_DecRef

; 2009 :         else

  000db	eb 05		 jmp	 SHORT $LN1@flush_io
$LN2@flush_io:

; 2010 :             PyErr_Clear();

  000dd	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@flush_io:
$LN3@flush_io:

; 2011 :     }
; 2012 : 
; 2013 :     PyErr_Restore(type, value, traceback);

  000e2	4c 8b 44 24 38	 mov	 r8, QWORD PTR traceback$[rsp]
  000e7	48 8b 54 24 20	 mov	 rdx, QWORD PTR value$[rsp]
  000ec	48 8b 4c 24 28	 mov	 rcx, QWORD PTR type$[rsp]
  000f1	e8 00 00 00 00	 call	 PyErr_Restore

; 2014 : }

  000f6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000fa	c3		 ret	 0
flush_io ENDP
_TEXT	ENDS
EXTRN	PyEval_EvalCode:PROC
EXTRN	PyAST_CompileEx:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$run_mod DD imagerel run_mod
	DD	imagerel run_mod+122
	DD	imagerel $unwind$run_mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$run_mod DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT run_mod
_TEXT	SEGMENT
v$ = 48
co$ = 56
mod$ = 80
filename$ = 88
globals$ = 96
locals$ = 104
flags$ = 112
arena$ = 120
run_mod	PROC						; COMDAT

; 2019 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2020 :     PyCodeObject *co;
; 2021 :     PyObject *v;
; 2022 :     co = PyAST_Compile(mod, filename, flags, arena);

  00018	48 8b 44 24 78	 mov	 rax, QWORD PTR arena$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00028	4c 8b 44 24 70	 mov	 r8, QWORD PTR flags$[rsp]
  0002d	48 8b 54 24 58	 mov	 rdx, QWORD PTR filename$[rsp]
  00032	48 8b 4c 24 50	 mov	 rcx, QWORD PTR mod$[rsp]
  00037	e8 00 00 00 00	 call	 PyAST_CompileEx
  0003c	48 89 44 24 38	 mov	 QWORD PTR co$[rsp], rax

; 2023 :     if (co == NULL)

  00041	48 83 7c 24 38
	00		 cmp	 QWORD PTR co$[rsp], 0
  00047	75 04		 jne	 SHORT $LN1@run_mod

; 2024 :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 28		 jmp	 SHORT $LN2@run_mod
$LN1@run_mod:

; 2025 :     v = PyEval_EvalCode((PyObject*)co, globals, locals);

  0004d	4c 8b 44 24 68	 mov	 r8, QWORD PTR locals$[rsp]
  00052	48 8b 54 24 60	 mov	 rdx, QWORD PTR globals$[rsp]
  00057	48 8b 4c 24 38	 mov	 rcx, QWORD PTR co$[rsp]
  0005c	e8 00 00 00 00	 call	 PyEval_EvalCode
  00061	48 89 44 24 30	 mov	 QWORD PTR v$[rsp], rax

; 2026 :     Py_DECREF(co);

  00066	48 8b 4c 24 38	 mov	 rcx, QWORD PTR co$[rsp]
  0006b	e8 00 00 00 00	 call	 _Py_DecRef

; 2027 :     return v;

  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
$LN2@run_mod:

; 2028 : }

  00075	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00079	c3		 ret	 0
run_mod	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file?$AA@ ; `string'
PUBLIC	??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file?$AA@ ; `string'
EXTRN	PyCode_Type:BYTE
EXTRN	PyMarshal_ReadLastObjectFromFile:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	PyMarshal_ReadLongFromFile:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$run_pyc_file DD imagerel run_pyc_file
	DD	imagerel run_pyc_file+285
	DD	imagerel $unwind$run_pyc_file
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$run_pyc_file DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file?$AA@
CONST	SEGMENT
??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file?$AA@ DB 'Bad code o'
	DB	'bject in .pyc file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file?$AA@
CONST	SEGMENT
??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file?$AA@ DB 'Bad magic'
	DB	' number in .pyc file', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT run_pyc_file
_TEXT	SEGMENT
v$ = 32
magic$ = 40
co$ = 48
fp$ = 80
filename$ = 88
globals$ = 96
locals$ = 104
flags$ = 112
run_pyc_file PROC					; COMDAT

; 2033 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2034 :     PyCodeObject *co;
; 2035 :     PyObject *v;
; 2036 :     long magic;
; 2037 :     long PyImport_GetMagicNumber(void);
; 2038 : 
; 2039 :     magic = PyMarshal_ReadLongFromFile(fp);

  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  0001d	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile
  00022	89 44 24 28	 mov	 DWORD PTR magic$[rsp], eax

; 2040 :     if (magic != PyImport_GetMagicNumber()) {

  00026	e8 00 00 00 00	 call	 PyImport_GetMagicNumber
  0002b	39 44 24 28	 cmp	 DWORD PTR magic$[rsp], eax
  0002f	74 1a		 je	 SHORT $LN8@run_pyc_fi

; 2041 :         PyErr_SetString(PyExc_RuntimeError,
; 2042 :                    "Bad magic number in .pyc file");

  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file?$AA@
  00038	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0003f	e8 00 00 00 00	 call	 PyErr_SetString

; 2043 :         return NULL;

  00044	33 c0		 xor	 eax, eax
  00046	e9 cd 00 00 00	 jmp	 $LN9@run_pyc_fi
$LN8@run_pyc_fi:

; 2044 :     }
; 2045 :     /* Skip mtime and size */
; 2046 :     (void) PyMarshal_ReadLongFromFile(fp);

  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  00050	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile

; 2047 :     (void) PyMarshal_ReadLongFromFile(fp);

  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  0005a	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile

; 2048 :     v = PyMarshal_ReadLastObjectFromFile(fp);

  0005f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  00064	e8 00 00 00 00	 call	 PyMarshal_ReadLastObjectFromFile
  00069	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 2049 :     if (v == NULL || !PyCode_Check(v)) {

  0006e	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00074	74 12		 je	 SHORT $LN6@run_pyc_fi
  00076	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  0007d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00082	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00086	74 2f		 je	 SHORT $LN7@run_pyc_fi
$LN6@run_pyc_fi:
$LN5@run_pyc_fi:

; 2050 :         Py_XDECREF(v);

  00088	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0008e	74 0a		 je	 SHORT $LN2@run_pyc_fi
  00090	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00095	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@run_pyc_fi:
  0009a	33 c0		 xor	 eax, eax
  0009c	85 c0		 test	 eax, eax
  0009e	75 e8		 jne	 SHORT $LN5@run_pyc_fi

; 2051 :         PyErr_SetString(PyExc_RuntimeError,
; 2052 :                    "Bad code object in .pyc file");

  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file?$AA@
  000a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000ae	e8 00 00 00 00	 call	 PyErr_SetString

; 2053 :         return NULL;

  000b3	33 c0		 xor	 eax, eax
  000b5	eb 61		 jmp	 SHORT $LN9@run_pyc_fi
$LN7@run_pyc_fi:

; 2054 :     }
; 2055 :     co = (PyCodeObject *)v;

  000b7	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  000bc	48 89 44 24 30	 mov	 QWORD PTR co$[rsp], rax

; 2056 :     v = PyEval_EvalCode((PyObject*)co, globals, locals);

  000c1	4c 8b 44 24 68	 mov	 r8, QWORD PTR locals$[rsp]
  000c6	48 8b 54 24 60	 mov	 rdx, QWORD PTR globals$[rsp]
  000cb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR co$[rsp]
  000d0	e8 00 00 00 00	 call	 PyEval_EvalCode
  000d5	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 2057 :     if (v && flags)

  000da	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  000e0	74 27		 je	 SHORT $LN1@run_pyc_fi
  000e2	48 83 7c 24 70
	00		 cmp	 QWORD PTR flags$[rsp], 0
  000e8	74 1f		 je	 SHORT $LN1@run_pyc_fi

; 2058 :         flags->cf_flags |= (co->co_flags & PyCF_MASK);

  000ea	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  000ef	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000f2	25 00 e0 07 00	 and	 eax, 516096		; 0007e000H
  000f7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR flags$[rsp]
  000fc	8b 09		 mov	 ecx, DWORD PTR [rcx]
  000fe	0b c8		 or	 ecx, eax
  00100	8b c1		 mov	 eax, ecx
  00102	48 8b 4c 24 70	 mov	 rcx, QWORD PTR flags$[rsp]
  00107	89 01		 mov	 DWORD PTR [rcx], eax
$LN1@run_pyc_fi:

; 2059 :     Py_DECREF(co);

  00109	48 8b 4c 24 30	 mov	 rcx, QWORD PTR co$[rsp]
  0010e	e8 00 00 00 00	 call	 _Py_DecRef

; 2060 :     return v;

  00113	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN9@run_pyc_fi:

; 2061 : }

  00118	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011c	c3		 ret	 0
run_pyc_file ENDP
_TEXT	ENDS
PUBLIC	Py_CompileStringExFlags
EXTRN	PyAST_mod2obj:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_CompileStringExFlags DD imagerel $LN6
	DD	imagerel $LN6+230
	DD	imagerel $unwind$Py_CompileStringExFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_CompileStringExFlags DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Py_CompileStringExFlags
_TEXT	SEGMENT
arena$ = 48
co$ = 56
mod$ = 64
result$123448 = 72
str$ = 96
filename$ = 104
start$ = 112
flags$ = 120
optimize$ = 128
Py_CompileStringExFlags PROC				; COMDAT

; 2066 : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2067 :     PyCodeObject *co;
; 2068 :     mod_ty mod;
; 2069 :     PyArena *arena = PyArena_New();

  00018	e8 00 00 00 00	 call	 PyArena_New
  0001d	48 89 44 24 30	 mov	 QWORD PTR arena$[rsp], rax

; 2070 :     if (arena == NULL)

  00022	48 83 7c 24 30
	00		 cmp	 QWORD PTR arena$[rsp], 0
  00028	75 07		 jne	 SHORT $LN3@Py_Compile

; 2071 :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	e9 b0 00 00 00	 jmp	 $LN4@Py_Compile
$LN3@Py_Compile:

; 2072 : 
; 2073 :     mod = PyParser_ASTFromString(str, filename, start, flags, arena);

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR arena$[rsp]
  00036	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003b	4c 8b 4c 24 78	 mov	 r9, QWORD PTR flags$[rsp]
  00040	44 8b 44 24 70	 mov	 r8d, DWORD PTR start$[rsp]
  00045	48 8b 54 24 68	 mov	 rdx, QWORD PTR filename$[rsp]
  0004a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR str$[rsp]
  0004f	e8 00 00 00 00	 call	 PyParser_ASTFromString
  00054	48 89 44 24 40	 mov	 QWORD PTR mod$[rsp], rax

; 2074 :     if (mod == NULL) {

  00059	48 83 7c 24 40
	00		 cmp	 QWORD PTR mod$[rsp], 0
  0005f	75 0e		 jne	 SHORT $LN2@Py_Compile

; 2075 :         PyArena_Free(arena);

  00061	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arena$[rsp]
  00066	e8 00 00 00 00	 call	 PyArena_Free

; 2076 :         return NULL;

  0006b	33 c0		 xor	 eax, eax
  0006d	eb 72		 jmp	 SHORT $LN4@Py_Compile
$LN2@Py_Compile:

; 2077 :     }
; 2078 :     if (flags && (flags->cf_flags & PyCF_ONLY_AST)) {

  0006f	48 83 7c 24 78
	00		 cmp	 QWORD PTR flags$[rsp], 0
  00075	74 30		 je	 SHORT $LN1@Py_Compile
  00077	48 8b 44 24 78	 mov	 rax, QWORD PTR flags$[rsp]
  0007c	8b 00		 mov	 eax, DWORD PTR [rax]
  0007e	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00083	85 c0		 test	 eax, eax
  00085	74 20		 je	 SHORT $LN1@Py_Compile

; 2079 :         PyObject *result = PyAST_mod2obj(mod);

  00087	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mod$[rsp]
  0008c	e8 00 00 00 00	 call	 PyAST_mod2obj
  00091	48 89 44 24 48	 mov	 QWORD PTR result$123448[rsp], rax

; 2080 :         PyArena_Free(arena);

  00096	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arena$[rsp]
  0009b	e8 00 00 00 00	 call	 PyArena_Free

; 2081 :         return result;

  000a0	48 8b 44 24 48	 mov	 rax, QWORD PTR result$123448[rsp]
  000a5	eb 3a		 jmp	 SHORT $LN4@Py_Compile
$LN1@Py_Compile:

; 2082 :     }
; 2083 :     co = PyAST_CompileEx(mod, filename, flags, optimize, arena);

  000a7	48 8b 44 24 30	 mov	 rax, QWORD PTR arena$[rsp]
  000ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b1	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR optimize$[rsp]
  000b9	4c 8b 44 24 78	 mov	 r8, QWORD PTR flags$[rsp]
  000be	48 8b 54 24 68	 mov	 rdx, QWORD PTR filename$[rsp]
  000c3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mod$[rsp]
  000c8	e8 00 00 00 00	 call	 PyAST_CompileEx
  000cd	48 89 44 24 38	 mov	 QWORD PTR co$[rsp], rax

; 2084 :     PyArena_Free(arena);

  000d2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arena$[rsp]
  000d7	e8 00 00 00 00	 call	 PyArena_Free

; 2085 :     return (PyObject *)co;

  000dc	48 8b 44 24 38	 mov	 rax, QWORD PTR co$[rsp]
$LN4@Py_Compile:

; 2086 : }

  000e1	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e5	c3		 ret	 0
Py_CompileStringExFlags ENDP
_TEXT	ENDS
PUBLIC	PyCompileString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCompileString DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$PyCompileString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCompileString DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCompileString
_TEXT	SEGMENT
str$ = 64
filename$ = 72
start$ = 80
PyCompileString PROC					; COMDAT

; 2092 : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2093 :     return Py_CompileStringFlags(str, filename, start, NULL);

  00013	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	44 8b 44 24 50	 mov	 r8d, DWORD PTR start$[rsp]
  00023	48 8b 54 24 48	 mov	 rdx, QWORD PTR filename$[rsp]
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR str$[rsp]
  0002d	e8 00 00 00 00	 call	 Py_CompileStringExFlags

; 2094 : }

  00032	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00036	c3		 ret	 0
PyCompileString ENDP
_TEXT	ENDS
PUBLIC	Py_SymtableString
EXTRN	PySymtable_Build:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_SymtableString DD imagerel $LN5
	DD	imagerel $LN5+154
	DD	imagerel $unwind$Py_SymtableString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_SymtableString DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Py_SymtableString
_TEXT	SEGMENT
flags$ = 48
arena$ = 56
st$ = 64
mod$ = 72
str$ = 96
filename$ = 104
start$ = 112
Py_SymtableString PROC					; COMDAT

; 2098 : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2099 :     struct symtable *st;
; 2100 :     mod_ty mod;
; 2101 :     PyCompilerFlags flags;
; 2102 :     PyArena *arena = PyArena_New();

  00013	e8 00 00 00 00	 call	 PyArena_New
  00018	48 89 44 24 38	 mov	 QWORD PTR arena$[rsp], rax

; 2103 :     if (arena == NULL)

  0001d	48 83 7c 24 38
	00		 cmp	 QWORD PTR arena$[rsp], 0
  00023	75 04		 jne	 SHORT $LN2@Py_Symtabl

; 2104 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 6c		 jmp	 SHORT $LN3@Py_Symtabl
$LN2@Py_Symtabl:

; 2105 : 
; 2106 :     flags.cf_flags = 0;

  00029	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR flags$[rsp], 0

; 2107 :     mod = PyParser_ASTFromString(str, filename, start, &flags, arena);

  00031	48 8b 44 24 38	 mov	 rax, QWORD PTR arena$[rsp]
  00036	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003b	4c 8d 4c 24 30	 lea	 r9, QWORD PTR flags$[rsp]
  00040	44 8b 44 24 70	 mov	 r8d, DWORD PTR start$[rsp]
  00045	48 8b 54 24 68	 mov	 rdx, QWORD PTR filename$[rsp]
  0004a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR str$[rsp]
  0004f	e8 00 00 00 00	 call	 PyParser_ASTFromString
  00054	48 89 44 24 48	 mov	 QWORD PTR mod$[rsp], rax

; 2108 :     if (mod == NULL) {

  00059	48 83 7c 24 48
	00		 cmp	 QWORD PTR mod$[rsp], 0
  0005f	75 0e		 jne	 SHORT $LN1@Py_Symtabl

; 2109 :         PyArena_Free(arena);

  00061	48 8b 4c 24 38	 mov	 rcx, QWORD PTR arena$[rsp]
  00066	e8 00 00 00 00	 call	 PyArena_Free

; 2110 :         return NULL;

  0006b	33 c0		 xor	 eax, eax
  0006d	eb 26		 jmp	 SHORT $LN3@Py_Symtabl
$LN1@Py_Symtabl:

; 2111 :     }
; 2112 :     st = PySymtable_Build(mod, filename, 0);

  0006f	45 33 c0	 xor	 r8d, r8d
  00072	48 8b 54 24 68	 mov	 rdx, QWORD PTR filename$[rsp]
  00077	48 8b 4c 24 48	 mov	 rcx, QWORD PTR mod$[rsp]
  0007c	e8 00 00 00 00	 call	 PySymtable_Build
  00081	48 89 44 24 40	 mov	 QWORD PTR st$[rsp], rax

; 2113 :     PyArena_Free(arena);

  00086	48 8b 4c 24 38	 mov	 rcx, QWORD PTR arena$[rsp]
  0008b	e8 00 00 00 00	 call	 PyArena_Free

; 2114 :     return st;

  00090	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
$LN3@Py_Symtabl:

; 2115 : }

  00095	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00099	c3		 ret	 0
Py_SymtableString ENDP
_TEXT	ENDS
EXTRN	PyNode_Free:PROC
EXTRN	PyAST_FromNode:PROC
EXTRN	PyParser_ParseStringFlagsFilenameEx:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_ASTFromString DD imagerel $LN6
	DD	imagerel $LN6+271
	DD	imagerel $unwind$PyParser_ASTFromString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_ASTFromString DD 021b01H
	DD	011011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyParser_ASTFromString
_TEXT	SEGMENT
n$ = 48
localflags$ = 56
err$ = 64
iflags$ = 104
mod$ = 112
s$ = 144
filename$ = 152
start$ = 160
flags$ = 168
arena$ = 176
PyParser_ASTFromString PROC				; COMDAT

; 2121 : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 2122 :     mod_ty mod;
; 2123 :     PyCompilerFlags localflags;
; 2124 :     perrdetail err;
; 2125 :     int iflags = PARSER_FLAGS(flags);

  0001b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR flags$[rsp]
  00023	e8 00 00 00 00	 call	 PARSER_FLAGS
  00028	89 44 24 68	 mov	 DWORD PTR iflags$[rsp], eax

; 2126 : 
; 2127 :     node *n = PyParser_ParseStringFlagsFilenameEx(s, filename,
; 2128 :                                     &_PyParser_Grammar, start, &err,
; 2129 :                                     &iflags);

  0002c	48 8d 44 24 68	 lea	 rax, QWORD PTR iflags$[rsp]
  00031	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00036	48 8d 44 24 40	 lea	 rax, QWORD PTR err$[rsp]
  0003b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00040	44 8b 8c 24 a0
	00 00 00	 mov	 r9d, DWORD PTR start$[rsp]
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyParser_Grammar
  0004f	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00057	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0005f	e8 00 00 00 00	 call	 PyParser_ParseStringFlagsFilenameEx
  00064	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 2130 :     if (flags == NULL) {

  00069	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR flags$[rsp], 0
  00072	75 15		 jne	 SHORT $LN3@PyParser_A

; 2131 :         localflags.cf_flags = 0;

  00074	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR localflags$[rsp], 0

; 2132 :         flags = &localflags;

  0007c	48 8d 44 24 38	 lea	 rax, QWORD PTR localflags$[rsp]
  00081	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR flags$[rsp], rax
$LN3@PyParser_A:

; 2133 :     }
; 2134 :     if (n) {

  00089	48 83 7c 24 30
	00		 cmp	 QWORD PTR n$[rsp], 0
  0008f	74 54		 je	 SHORT $LN2@PyParser_A

; 2135 :         flags->cf_flags |= iflags & PyCF_MASK;

  00091	8b 44 24 68	 mov	 eax, DWORD PTR iflags$[rsp]
  00095	25 00 e0 07 00	 and	 eax, 516096		; 0007e000H
  0009a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR flags$[rsp]
  000a2	8b 09		 mov	 ecx, DWORD PTR [rcx]
  000a4	0b c8		 or	 ecx, eax
  000a6	8b c1		 mov	 eax, ecx
  000a8	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR flags$[rsp]
  000b0	89 01		 mov	 DWORD PTR [rcx], eax

; 2136 :         mod = PyAST_FromNode(n, flags, filename, arena);

  000b2	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  000ba	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR filename$[rsp]
  000c2	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR flags$[rsp]
  000ca	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  000cf	e8 00 00 00 00	 call	 PyAST_FromNode
  000d4	48 89 44 24 70	 mov	 QWORD PTR mod$[rsp], rax

; 2137 :         PyNode_Free(n);

  000d9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  000de	e8 00 00 00 00	 call	 PyNode_Free

; 2138 :     }
; 2139 :     else {

  000e3	eb 13		 jmp	 SHORT $LN1@PyParser_A
$LN2@PyParser_A:

; 2140 :         err_input(&err);

  000e5	48 8d 4c 24 40	 lea	 rcx, QWORD PTR err$[rsp]
  000ea	e8 00 00 00 00	 call	 err_input

; 2141 :         mod = NULL;

  000ef	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR mod$[rsp], 0
$LN1@PyParser_A:

; 2142 :     }
; 2143 :     err_free(&err);

  000f8	48 8d 4c 24 40	 lea	 rcx, QWORD PTR err$[rsp]
  000fd	e8 00 00 00 00	 call	 err_free

; 2144 :     return mod;

  00102	48 8b 44 24 70	 mov	 rax, QWORD PTR mod$[rsp]

; 2145 : }

  00107	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0010e	c3		 ret	 0
PyParser_ASTFromString ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PARSER_FLAGS DD imagerel PARSER_FLAGS
	DD	imagerel PARSER_FLAGS+111
	DD	imagerel $unwind$PARSER_FLAGS
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PARSER_FLAGS DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PARSER_FLAGS
_TEXT	SEGMENT
parser_flags$ = 0
flags$ = 32
PARSER_FLAGS PROC					; COMDAT

; 1241 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 1242 :     int parser_flags = 0;

  00009	c7 04 24 00 00
	00 00		 mov	 DWORD PTR parser_flags$[rsp], 0

; 1243 :     if (!flags)

  00010	48 83 7c 24 20
	00		 cmp	 QWORD PTR flags$[rsp], 0
  00016	75 04		 jne	 SHORT $LN4@PARSER_FLA

; 1244 :         return 0;

  00018	33 c0		 xor	 eax, eax
  0001a	eb 4e		 jmp	 SHORT $LN5@PARSER_FLA
$LN4@PARSER_FLA:

; 1245 :     if (flags->cf_flags & PyCF_DONT_IMPLY_DEDENT)

  0001c	48 8b 44 24 20	 mov	 rax, QWORD PTR flags$[rsp]
  00021	8b 00		 mov	 eax, DWORD PTR [rax]
  00023	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00028	85 c0		 test	 eax, eax
  0002a	74 09		 je	 SHORT $LN3@PARSER_FLA

; 1246 :         parser_flags |= PyPARSE_DONT_IMPLY_DEDENT;

  0002c	8b 04 24	 mov	 eax, DWORD PTR parser_flags$[rsp]
  0002f	83 c8 02	 or	 eax, 2
  00032	89 04 24	 mov	 DWORD PTR parser_flags$[rsp], eax
$LN3@PARSER_FLA:

; 1247 :     if (flags->cf_flags & PyCF_IGNORE_COOKIE)

  00035	48 8b 44 24 20	 mov	 rax, QWORD PTR flags$[rsp]
  0003a	8b 00		 mov	 eax, DWORD PTR [rax]
  0003c	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00041	85 c0		 test	 eax, eax
  00043	74 09		 je	 SHORT $LN2@PARSER_FLA

; 1248 :         parser_flags |= PyPARSE_IGNORE_COOKIE;

  00045	8b 04 24	 mov	 eax, DWORD PTR parser_flags$[rsp]
  00048	83 c8 10	 or	 eax, 16
  0004b	89 04 24	 mov	 DWORD PTR parser_flags$[rsp], eax
$LN2@PARSER_FLA:

; 1249 :     if (flags->cf_flags & CO_FUTURE_BARRY_AS_BDFL)

  0004e	48 8b 44 24 20	 mov	 rax, QWORD PTR flags$[rsp]
  00053	8b 00		 mov	 eax, DWORD PTR [rax]
  00055	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  0005a	85 c0		 test	 eax, eax
  0005c	74 09		 je	 SHORT $LN1@PARSER_FLA

; 1250 :         parser_flags |= PyPARSE_BARRY_AS_BDFL;

  0005e	8b 04 24	 mov	 eax, DWORD PTR parser_flags$[rsp]
  00061	83 c8 20	 or	 eax, 32			; 00000020H
  00064	89 04 24	 mov	 DWORD PTR parser_flags$[rsp], eax
$LN1@PARSER_FLA:

; 1251 :     return parser_flags;

  00067	8b 04 24	 mov	 eax, DWORD PTR parser_flags$[rsp]
$LN5@PARSER_FLA:

; 1252 : }

  0006a	48 83 c4 18	 add	 rsp, 24
  0006e	c3		 ret	 0
PARSER_FLAGS ENDP
_TEXT	ENDS
EXTRN	PyParser_ParseFileFlagsEx:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_ASTFromFile DD imagerel $LN7
	DD	imagerel $LN7+351
	DD	imagerel $unwind$PyParser_ASTFromFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_ASTFromFile DD 021b01H
	DD	015011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyParser_ASTFromFile
_TEXT	SEGMENT
n$ = 80
localflags$ = 88
err$ = 96
iflags$ = 136
mod$ = 144
fp$ = 176
filename$ = 184
enc$ = 192
start$ = 200
ps1$ = 208
ps2$ = 216
flags$ = 224
errcode$ = 232
arena$ = 240
PyParser_ASTFromFile PROC				; COMDAT

; 2152 : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 2153 :     mod_ty mod;
; 2154 :     PyCompilerFlags localflags;
; 2155 :     perrdetail err;
; 2156 :     int iflags = PARSER_FLAGS(flags);

  0001b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR flags$[rsp]
  00023	e8 00 00 00 00	 call	 PARSER_FLAGS
  00028	89 84 24 88 00
	00 00		 mov	 DWORD PTR iflags$[rsp], eax

; 2157 : 
; 2158 :     node *n = PyParser_ParseFileFlagsEx(fp, filename, enc,
; 2159 :                                       &_PyParser_Grammar,
; 2160 :                             start, ps1, ps2, &err, &iflags);

  0002f	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR iflags$[rsp]
  00037	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0003c	48 8d 44 24 60	 lea	 rax, QWORD PTR err$[rsp]
  00041	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00046	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR ps2$[rsp]
  0004e	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00053	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ps1$[rsp]
  0005b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00060	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  00067	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0006b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_PyParser_Grammar
  00072	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR enc$[rsp]
  0007a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00082	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  0008a	e8 00 00 00 00	 call	 PyParser_ParseFileFlagsEx
  0008f	48 89 44 24 50	 mov	 QWORD PTR n$[rsp], rax

; 2161 :     if (flags == NULL) {

  00094	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR flags$[rsp], 0
  0009d	75 15		 jne	 SHORT $LN4@PyParser_A@2

; 2162 :         localflags.cf_flags = 0;

  0009f	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR localflags$[rsp], 0

; 2163 :         flags = &localflags;

  000a7	48 8d 44 24 58	 lea	 rax, QWORD PTR localflags$[rsp]
  000ac	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR flags$[rsp], rax
$LN4@PyParser_A@2:

; 2164 :     }
; 2165 :     if (n) {

  000b4	48 83 7c 24 50
	00		 cmp	 QWORD PTR n$[rsp], 0
  000ba	74 5a		 je	 SHORT $LN3@PyParser_A@2

; 2166 :         flags->cf_flags |= iflags & PyCF_MASK;

  000bc	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR iflags$[rsp]
  000c3	25 00 e0 07 00	 and	 eax, 516096		; 0007e000H
  000c8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR flags$[rsp]
  000d0	8b 09		 mov	 ecx, DWORD PTR [rcx]
  000d2	0b c8		 or	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR flags$[rsp]
  000de	89 01		 mov	 DWORD PTR [rcx], eax

; 2167 :         mod = PyAST_FromNode(n, flags, filename, arena);

  000e0	4c 8b 8c 24 f0
	00 00 00	 mov	 r9, QWORD PTR arena$[rsp]
  000e8	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR filename$[rsp]
  000f0	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR flags$[rsp]
  000f8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n$[rsp]
  000fd	e8 00 00 00 00	 call	 PyAST_FromNode
  00102	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR mod$[rsp], rax

; 2168 :         PyNode_Free(n);

  0010a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n$[rsp]
  0010f	e8 00 00 00 00	 call	 PyNode_Free

; 2169 :     }
; 2170 :     else {

  00114	eb 2f		 jmp	 SHORT $LN2@PyParser_A@2
$LN3@PyParser_A@2:

; 2171 :         err_input(&err);

  00116	48 8d 4c 24 60	 lea	 rcx, QWORD PTR err$[rsp]
  0011b	e8 00 00 00 00	 call	 err_input

; 2172 :         if (errcode)

  00120	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR errcode$[rsp], 0
  00129	74 0e		 je	 SHORT $LN1@PyParser_A@2

; 2173 :             *errcode = err.error;

  0012b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR errcode$[rsp]
  00133	8b 4c 24 60	 mov	 ecx, DWORD PTR err$[rsp]
  00137	89 08		 mov	 DWORD PTR [rax], ecx
$LN1@PyParser_A@2:

; 2174 :         mod = NULL;

  00139	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR mod$[rsp], 0
$LN2@PyParser_A@2:

; 2175 :     }
; 2176 :     err_free(&err);

  00145	48 8d 4c 24 60	 lea	 rcx, QWORD PTR err$[rsp]
  0014a	e8 00 00 00 00	 call	 err_free

; 2177 :     return mod;

  0014f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mod$[rsp]

; 2178 : }

  00157	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0015e	c3		 ret	 0
PyParser_ASTFromFile ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseFileFlags
EXTRN	PyParser_ParseFileFlags:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_SimpleParseFileFlags DD imagerel $LN4
	DD	imagerel $LN4+154
	DD	imagerel $unwind$PyParser_SimpleParseFileFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_SimpleParseFileFlags DD 021b01H
	DD	011011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyParser_SimpleParseFileFlags
_TEXT	SEGMENT
n$ = 80
err$ = 88
fp$ = 144
filename$ = 152
start$ = 160
flags$ = 168
PyParser_SimpleParseFileFlags PROC			; COMDAT

; 2184 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 2185 :     perrdetail err;
; 2186 :     node *n = PyParser_ParseFileFlags(fp, filename, NULL,
; 2187 :                                       &_PyParser_Grammar,
; 2188 :                                       start, NULL, NULL, &err, flags);

  0001b	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00022	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00026	48 8d 44 24 58	 lea	 rax, QWORD PTR err$[rsp]
  0002b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00030	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00039	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00042	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  00049	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0004d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_PyParser_Grammar
  00054	45 33 c0	 xor	 r8d, r8d
  00057	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  0005f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00067	e8 00 00 00 00	 call	 PyParser_ParseFileFlags
  0006c	48 89 44 24 50	 mov	 QWORD PTR n$[rsp], rax

; 2189 :     if (n == NULL)

  00071	48 83 7c 24 50
	00		 cmp	 QWORD PTR n$[rsp], 0
  00077	75 0a		 jne	 SHORT $LN1@PyParser_S

; 2190 :         err_input(&err);

  00079	48 8d 4c 24 58	 lea	 rcx, QWORD PTR err$[rsp]
  0007e	e8 00 00 00 00	 call	 err_input
$LN1@PyParser_S:

; 2191 :     err_free(&err);

  00083	48 8d 4c 24 58	 lea	 rcx, QWORD PTR err$[rsp]
  00088	e8 00 00 00 00	 call	 err_free

; 2192 : 
; 2193 :     return n;

  0008d	48 8b 44 24 50	 mov	 rax, QWORD PTR n$[rsp]

; 2194 : }

  00092	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00099	c3		 ret	 0
PyParser_SimpleParseFileFlags ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseStringFlags
EXTRN	PyParser_ParseStringFlags:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_SimpleParseStringFlags DD imagerel $LN4
	DD	imagerel $LN4+99
	DD	imagerel $unwind$PyParser_SimpleParseStringFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_SimpleParseStringFlags DD 011201H
	DD	0c212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyParser_SimpleParseStringFlags
_TEXT	SEGMENT
n$ = 48
err$ = 56
str$ = 112
start$ = 120
flags$ = 128
PyParser_SimpleParseStringFlags PROC			; COMDAT

; 2200 : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2201 :     perrdetail err;
; 2202 :     node *n = PyParser_ParseStringFlags(str, &_PyParser_Grammar,
; 2203 :                                         start, &err, flags);

  00012	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00019	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0001d	4c 8d 4c 24 38	 lea	 r9, QWORD PTR err$[rsp]
  00022	44 8b 44 24 78	 mov	 r8d, DWORD PTR start$[rsp]
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyParser_Grammar
  0002e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00033	e8 00 00 00 00	 call	 PyParser_ParseStringFlags
  00038	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 2204 :     if (n == NULL)

  0003d	48 83 7c 24 30
	00		 cmp	 QWORD PTR n$[rsp], 0
  00043	75 0a		 jne	 SHORT $LN1@PyParser_S@2

; 2205 :         err_input(&err);

  00045	48 8d 4c 24 38	 lea	 rcx, QWORD PTR err$[rsp]
  0004a	e8 00 00 00 00	 call	 err_input
$LN1@PyParser_S@2:

; 2206 :     err_free(&err);

  0004f	48 8d 4c 24 38	 lea	 rcx, QWORD PTR err$[rsp]
  00054	e8 00 00 00 00	 call	 err_free

; 2207 :     return n;

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]

; 2208 : }

  0005e	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00062	c3		 ret	 0
PyParser_SimpleParseStringFlags ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseStringFlagsFilename
EXTRN	PyParser_ParseStringFlagsFilename:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_SimpleParseStringFlagsFilename DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$PyParser_SimpleParseStringFlagsFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_SimpleParseStringFlagsFilename DD 011801H
	DD	0c218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyParser_SimpleParseStringFlagsFilename
_TEXT	SEGMENT
n$ = 48
err$ = 56
str$ = 112
filename$ = 120
start$ = 128
flags$ = 136
PyParser_SimpleParseStringFlagsFilename PROC		; COMDAT

; 2213 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2214 :     perrdetail err;
; 2215 :     node *n = PyParser_ParseStringFlagsFilename(str, filename,
; 2216 :                             &_PyParser_Grammar, start, &err, flags);

  00018	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  0001f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00023	48 8d 44 24 38	 lea	 rax, QWORD PTR err$[rsp]
  00028	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002d	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR start$[rsp]
  00035	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyParser_Grammar
  0003c	48 8b 54 24 78	 mov	 rdx, QWORD PTR filename$[rsp]
  00041	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00046	e8 00 00 00 00	 call	 PyParser_ParseStringFlagsFilename
  0004b	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 2217 :     if (n == NULL)

  00050	48 83 7c 24 30
	00		 cmp	 QWORD PTR n$[rsp], 0
  00056	75 0a		 jne	 SHORT $LN1@PyParser_S@3

; 2218 :         err_input(&err);

  00058	48 8d 4c 24 38	 lea	 rcx, QWORD PTR err$[rsp]
  0005d	e8 00 00 00 00	 call	 err_input
$LN1@PyParser_S@3:

; 2219 :     err_free(&err);

  00062	48 8d 4c 24 38	 lea	 rcx, QWORD PTR err$[rsp]
  00067	e8 00 00 00 00	 call	 err_free

; 2220 :     return n;

  0006c	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]

; 2221 : }

  00071	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00075	c3		 ret	 0
PyParser_SimpleParseStringFlagsFilename ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseStringFilename
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_SimpleParseStringFilename DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$PyParser_SimpleParseStringFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_SimpleParseStringFilename DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyParser_SimpleParseStringFilename
_TEXT	SEGMENT
str$ = 48
filename$ = 56
start$ = 64
PyParser_SimpleParseStringFilename PROC			; COMDAT

; 2225 : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2226 :     return PyParser_SimpleParseStringFlagsFilename(str, filename, start, 0);

  00013	45 33 c9	 xor	 r9d, r9d
  00016	44 8b 44 24 40	 mov	 r8d, DWORD PTR start$[rsp]
  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR filename$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00025	e8 00 00 00 00	 call	 PyParser_SimpleParseStringFlagsFilename

; 2227 : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
PyParser_SimpleParseStringFilename ENDP
_TEXT	ENDS
PUBLIC	PyParser_ClearError
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_ClearError DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$PyParser_ClearError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_ClearError DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyParser_ClearError
_TEXT	SEGMENT
err$ = 48
PyParser_ClearError PROC				; COMDAT

; 2234 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2235 :     err_free(err);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR err$[rsp]
  0000e	e8 00 00 00 00	 call	 err_free

; 2236 : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
PyParser_ClearError ENDP
_TEXT	ENDS
PUBLIC	PyParser_SetError
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_SetError DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$PyParser_SetError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_SetError DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyParser_SetError
_TEXT	SEGMENT
err$ = 48
PyParser_SetError PROC					; COMDAT

; 2240 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2241 :     err_input(err);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR err$[rsp]
  0000e	e8 00 00 00 00	 call	 err_input

; 2242 : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
PyParser_SetError ENDP
_TEXT	ENDS
PUBLIC	??_C@_08OGIKLOKE@err_free?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$err_free DD imagerel err_free
	DD	imagerel err_free+115
	DD	imagerel $unwind$err_free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$err_free DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_08OGIKLOKE@err_free?$AA@
CONST	SEGMENT
??_C@_08OGIKLOKE@err_free?$AA@ DB 'err_free', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT err_free
_TEXT	SEGMENT
_py_tmp$123589 = 48
err$ = 80
err_free PROC						; COMDAT

; 2246 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@err_free:

; 2247 :     Py_CLEAR(err->filename);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR err$[rsp]
  0000e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00013	74 53		 je	 SHORT $LN1@err_free
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR err$[rsp]
  00022	4c 8b 48 08	 mov	 r9, QWORD PTR [rax+8]
  00026	41 b8 c7 08 00
	00		 mov	 r8d, 2247		; 000008c7H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BNKHLDPK@?4?4?2Python?2pythonrun?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OGIKLOKE@err_free?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN1@err_free
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR err$[rsp]
  00048	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$123589[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR err$[rsp]
  00056	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$123589[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@err_free:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN4@err_free

; 2248 : }

  0006e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00072	c3		 ret	 0
err_free ENDP
_TEXT	ENDS
PUBLIC	??_C@_04IOGGDGED@?$CIsO?$CJ?$AA@		; `string'
PUBLIC	??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@		; `string'
PUBLIC	??_C@_06IMIBHNFH@?$CIOiiN?$CJ?$AA@		; `string'
PUBLIC	??_C@_1DI@CEPJEPCO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAe?$AAr?$AAr?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@JIPJFBED@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAe?$AAr?$AAr?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_07CLEHDIEJ@replace?$AA@			; `string'
PUBLIC	??_C@_0BG@BPGIPGPD@unknown?5parsing?5error?$AA@	; `string'
PUBLIC	??_C@_09FLODBNII@error?$DN?$CFd?6?$AA@		; `string'
PUBLIC	??_C@_0DN@BMNJCEJJ@multiple?5statements?5found?5while?5@ ; `string'
PUBLIC	??_C@_0CA@MBMGHOGA@invalid?5character?5in?5identifier?$AA@ ; `string'
PUBLIC	??_C@_0DH@CDIGDJHN@unexpected?5character?5after?5line?5@ ; `string'
PUBLIC	??_C@_0BF@GCGCDMBJ@unknown?5decode?5error?$AA@	; `string'
PUBLIC	??_C@_0BP@PIBOEKAB@too?5many?5levels?5of?5indentation?$AA@ ; `string'
PUBLIC	??_C@_0DE@DEIKPMIL@unindent?5does?5not?5match?5any?5oute@ ; `string'
PUBLIC	??_C@_0BE@CJOHKGGD@expression?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0DD@GEHBOAJA@inconsistent?5use?5of?5tabs?5and?5spa@ ; `string'
PUBLIC	??_C@_0BN@PKHPGBNI@unexpected?5EOF?5while?5parsing?$AA@ ; `string'
PUBLIC	??_C@_0CC@NOHDFAMP@EOL?5while?5scanning?5string?5litera@ ; `string'
PUBLIC	??_C@_0DA@JEABMMDJ@EOF?5while?5scanning?5triple?9quoted@ ; `string'
PUBLIC	??_C@_0O@NAGEJJCE@invalid?5token?$AA@		; `string'
PUBLIC	??_C@_0P@OAAEFEAJ@invalid?5syntax?$AA@		; `string'
PUBLIC	??_C@_0BE@GLFMJNCN@unexpected?5unindent?$AA@	; `string'
PUBLIC	??_C@_0BC@GPEJPPAM@unexpected?5indent?$AA@	; `string'
PUBLIC	??_C@_0BL@KKHMBMMH@expected?5an?5indented?5block?$AA@ ; `string'
EXTRN	_PyObject_DebugFree:PROC
EXTRN	PyErr_SetObject:PROC
EXTRN	Py_BuildValue:PROC
EXTRN	PyUnicode_DecodeUTF8:PROC
EXTRN	PyExc_TabError:QWORD
EXTRN	PyErr_SetNone:PROC
EXTRN	PyExc_KeyboardInterrupt:QWORD
EXTRN	PyExc_IndentationError:QWORD
EXTRN	__ImageBase:BYTE
EXTRN	PyExc_SyntaxError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$err_input DD imagerel err_input
	DD	imagerel err_input+1348
	DD	imagerel $unwind$err_input
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$err_input DD 020c01H
	DD	013010cH
xdata	ENDS
;	COMDAT ??_C@_04IOGGDGED@?$CIsO?$CJ?$AA@
CONST	SEGMENT
??_C@_04IOGGDGED@?$CIsO?$CJ?$AA@ DB '(sO)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@ DB '(OO)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IMIBHNFH@?$CIOiiN?$CJ?$AA@
CONST	SEGMENT
??_C@_06IMIBHNFH@?$CIOiiN?$CJ?$AA@ DB '(OiiN)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@CEPJEPCO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAe?$AAr?$AAr?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@CEPJEPCO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAe?$AAr?$AAr?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'e', 00H
	DB	'r', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@JIPJFBED@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAe?$AAr?$AAr?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@JIPJFBED@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAe?$AAr?$AAr?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLEHDIEJ@replace?$AA@
CONST	SEGMENT
??_C@_07CLEHDIEJ@replace?$AA@ DB 'replace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BPGIPGPD@unknown?5parsing?5error?$AA@
CONST	SEGMENT
??_C@_0BG@BPGIPGPD@unknown?5parsing?5error?$AA@ DB 'unknown parsing error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09FLODBNII@error?$DN?$CFd?6?$AA@
CONST	SEGMENT
??_C@_09FLODBNII@error?$DN?$CFd?6?$AA@ DB 'error=%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@BMNJCEJJ@multiple?5statements?5found?5while?5@
CONST	SEGMENT
??_C@_0DN@BMNJCEJJ@multiple?5statements?5found?5while?5@ DB 'multiple sta'
	DB	'tements found while compiling a single statement', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MBMGHOGA@invalid?5character?5in?5identifier?$AA@
CONST	SEGMENT
??_C@_0CA@MBMGHOGA@invalid?5character?5in?5identifier?$AA@ DB 'invalid ch'
	DB	'aracter in identifier', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CDIGDJHN@unexpected?5character?5after?5line?5@
CONST	SEGMENT
??_C@_0DH@CDIGDJHN@unexpected?5character?5after?5line?5@ DB 'unexpected c'
	DB	'haracter after line continuation character', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GCGCDMBJ@unknown?5decode?5error?$AA@
CONST	SEGMENT
??_C@_0BF@GCGCDMBJ@unknown?5decode?5error?$AA@ DB 'unknown decode error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PIBOEKAB@too?5many?5levels?5of?5indentation?$AA@
CONST	SEGMENT
??_C@_0BP@PIBOEKAB@too?5many?5levels?5of?5indentation?$AA@ DB 'too many l'
	DB	'evels of indentation', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DEIKPMIL@unindent?5does?5not?5match?5any?5oute@
CONST	SEGMENT
??_C@_0DE@DEIKPMIL@unindent?5does?5not?5match?5any?5oute@ DB 'unindent do'
	DB	'es not match any outer indentation level', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CJOHKGGD@expression?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@CJOHKGGD@expression?5too?5long?$AA@ DB 'expression too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GEHBOAJA@inconsistent?5use?5of?5tabs?5and?5spa@
CONST	SEGMENT
??_C@_0DD@GEHBOAJA@inconsistent?5use?5of?5tabs?5and?5spa@ DB 'inconsisten'
	DB	't use of tabs and spaces in indentation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PKHPGBNI@unexpected?5EOF?5while?5parsing?$AA@
CONST	SEGMENT
??_C@_0BN@PKHPGBNI@unexpected?5EOF?5while?5parsing?$AA@ DB 'unexpected EO'
	DB	'F while parsing', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NOHDFAMP@EOL?5while?5scanning?5string?5litera@
CONST	SEGMENT
??_C@_0CC@NOHDFAMP@EOL?5while?5scanning?5string?5litera@ DB 'EOL while sc'
	DB	'anning string literal', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@JEABMMDJ@EOF?5while?5scanning?5triple?9quoted@
CONST	SEGMENT
??_C@_0DA@JEABMMDJ@EOF?5while?5scanning?5triple?9quoted@ DB 'EOF while sc'
	DB	'anning triple-quoted string literal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NAGEJJCE@invalid?5token?$AA@
CONST	SEGMENT
??_C@_0O@NAGEJJCE@invalid?5token?$AA@ DB 'invalid token', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OAAEFEAJ@invalid?5syntax?$AA@
CONST	SEGMENT
??_C@_0P@OAAEFEAJ@invalid?5syntax?$AA@ DB 'invalid syntax', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GLFMJNCN@unexpected?5unindent?$AA@
CONST	SEGMENT
??_C@_0BE@GLFMJNCN@unexpected?5unindent?$AA@ DB 'unexpected unindent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GPEJPPAM@unexpected?5indent?$AA@
CONST	SEGMENT
??_C@_0BC@GPEJPPAM@unexpected?5indent?$AA@ DB 'unexpected indent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KKHMBMMH@expected?5an?5indented?5block?$AA@
CONST	SEGMENT
??_C@_0BL@KKHMBMMH@expected?5an?5indented?5block?$AA@ DB 'expected an ind'
	DB	'ented block', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT err_input
_TEXT	SEGMENT
errtext$ = 48
w$ = 56
v$ = 64
offset$ = 72
msg$ = 80
errtype$ = 88
msg_obj$ = 96
value$123643 = 104
type$123642 = 112
tb$123644 = 120
len$123678 = 128
tv65 = 136
err$ = 160
err_input PROC						; COMDAT

; 2254 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 2255 :     PyObject *v, *w, *errtype, *errtext;
; 2256 :     PyObject *msg_obj = NULL;

  0000c	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR msg_obj$[rsp], 0

; 2257 :     char *msg = NULL;

  00015	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR msg$[rsp], 0

; 2258 :     int offset = err->offset;

  0001e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  00026	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00029	89 44 24 48	 mov	 DWORD PTR offset$[rsp], eax

; 2259 : 
; 2260 :     errtype = PyExc_SyntaxError;

  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_SyntaxError
  00034	48 89 44 24 58	 mov	 QWORD PTR errtype$[rsp], rax

; 2261 :     switch (err->error) {

  00039	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  00041	8b 00		 mov	 eax, DWORD PTR [rax]
  00043	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv65[rsp], eax
  0004a	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv65[rsp]
  00051	83 e8 0b	 sub	 eax, 11
  00054	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv65[rsp], eax
  0005b	83 bc 24 88 00
	00 00 10	 cmp	 DWORD PTR tv65[rsp], 16
  00063	0f 87 19 02 00
	00		 ja	 $LN22@err_input
  00069	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR tv65[rsp]
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00078	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN65@err_input[rcx+rax*4]
  0007f	48 03 c1	 add	 rax, rcx
  00082	ff e0		 jmp	 rax
$LN58@err_input:

; 2262 :     case E_ERROR:
; 2263 :         return;

  00084	e9 6c 04 00 00	 jmp	 $LN61@err_input
$LN57@err_input:

; 2264 :     case E_SYNTAX:
; 2265 :         errtype = PyExc_IndentationError;

  00089	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_IndentationError
  00090	48 89 44 24 58	 mov	 QWORD PTR errtype$[rsp], rax

; 2266 :         if (err->expected == INDENT)

  00095	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  0009d	83 78 24 05	 cmp	 DWORD PTR [rax+36], 5
  000a1	75 0e		 jne	 SHORT $LN56@err_input

; 2267 :             msg = "expected an indented block";

  000a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BL@KKHMBMMH@expected?5an?5indented?5block?$AA@
  000aa	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax
  000af	eb 50		 jmp	 SHORT $LN55@err_input
$LN56@err_input:

; 2268 :         else if (err->token == INDENT)

  000b1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  000b9	83 78 20 05	 cmp	 DWORD PTR [rax+32], 5
  000bd	75 0e		 jne	 SHORT $LN54@err_input

; 2269 :             msg = "unexpected indent";

  000bf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@GPEJPPAM@unexpected?5indent?$AA@
  000c6	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax
  000cb	eb 34		 jmp	 SHORT $LN53@err_input
$LN54@err_input:

; 2270 :         else if (err->token == DEDENT)

  000cd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  000d5	83 78 20 06	 cmp	 DWORD PTR [rax+32], 6
  000d9	75 0e		 jne	 SHORT $LN52@err_input

; 2271 :             msg = "unexpected unindent";

  000db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BE@GLFMJNCN@unexpected?5unindent?$AA@
  000e2	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2272 :         else {

  000e7	eb 18		 jmp	 SHORT $LN51@err_input
$LN52@err_input:

; 2273 :             errtype = PyExc_SyntaxError;

  000e9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_SyntaxError
  000f0	48 89 44 24 58	 mov	 QWORD PTR errtype$[rsp], rax

; 2274 :             msg = "invalid syntax";

  000f5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0P@OAAEFEAJ@invalid?5syntax?$AA@
  000fc	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax
$LN51@err_input:
$LN53@err_input:
$LN55@err_input:

; 2275 :         }
; 2276 :         break;

  00101	e9 ad 01 00 00	 jmp	 $LN59@err_input
$LN50@err_input:

; 2277 :     case E_TOKEN:
; 2278 :         msg = "invalid token";

  00106	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@NAGEJJCE@invalid?5token?$AA@
  0010d	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2279 :         break;

  00112	e9 9c 01 00 00	 jmp	 $LN59@err_input
$LN49@err_input:

; 2280 :     case E_EOFS:
; 2281 :         msg = "EOF while scanning triple-quoted string literal";

  00117	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DA@JEABMMDJ@EOF?5while?5scanning?5triple?9quoted@
  0011e	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2282 :         break;

  00123	e9 8b 01 00 00	 jmp	 $LN59@err_input
$LN48@err_input:

; 2283 :     case E_EOLS:
; 2284 :         msg = "EOL while scanning string literal";

  00128	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CC@NOHDFAMP@EOL?5while?5scanning?5string?5litera@
  0012f	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2285 :         break;

  00134	e9 7a 01 00 00	 jmp	 $LN59@err_input
$LN47@err_input:

; 2286 :     case E_INTR:
; 2287 :         if (!PyErr_Occurred())

  00139	e8 00 00 00 00	 call	 PyErr_Occurred
  0013e	48 85 c0	 test	 rax, rax
  00141	75 0c		 jne	 SHORT $LN46@err_input

; 2288 :             PyErr_SetNone(PyExc_KeyboardInterrupt);

  00143	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyboardInterrupt
  0014a	e8 00 00 00 00	 call	 PyErr_SetNone
$LN46@err_input:

; 2289 :         goto cleanup;

  0014f	e9 59 03 00 00	 jmp	 $cleanup$123629
$LN45@err_input:

; 2290 :     case E_NOMEM:
; 2291 :         PyErr_NoMemory();

  00154	e8 00 00 00 00	 call	 PyErr_NoMemory

; 2292 :         goto cleanup;

  00159	e9 4f 03 00 00	 jmp	 $cleanup$123629
$LN44@err_input:

; 2293 :     case E_EOF:
; 2294 :         msg = "unexpected EOF while parsing";

  0015e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BN@PKHPGBNI@unexpected?5EOF?5while?5parsing?$AA@
  00165	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2295 :         break;

  0016a	e9 44 01 00 00	 jmp	 $LN59@err_input
$LN43@err_input:

; 2296 :     case E_TABSPACE:
; 2297 :         errtype = PyExc_TabError;

  0016f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_TabError
  00176	48 89 44 24 58	 mov	 QWORD PTR errtype$[rsp], rax

; 2298 :         msg = "inconsistent use of tabs and spaces in indentation";

  0017b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DD@GEHBOAJA@inconsistent?5use?5of?5tabs?5and?5spa@
  00182	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2299 :         break;

  00187	e9 27 01 00 00	 jmp	 $LN59@err_input
$LN42@err_input:

; 2300 :     case E_OVERFLOW:
; 2301 :         msg = "expression too long";

  0018c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BE@CJOHKGGD@expression?5too?5long?$AA@
  00193	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2302 :         break;

  00198	e9 16 01 00 00	 jmp	 $LN59@err_input
$LN41@err_input:

; 2303 :     case E_DEDENT:
; 2304 :         errtype = PyExc_IndentationError;

  0019d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_IndentationError
  001a4	48 89 44 24 58	 mov	 QWORD PTR errtype$[rsp], rax

; 2305 :         msg = "unindent does not match any outer indentation level";

  001a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DE@DEIKPMIL@unindent?5does?5not?5match?5any?5oute@
  001b0	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2306 :         break;

  001b5	e9 f9 00 00 00	 jmp	 $LN59@err_input
$LN40@err_input:

; 2307 :     case E_TOODEEP:
; 2308 :         errtype = PyExc_IndentationError;

  001ba	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_IndentationError
  001c1	48 89 44 24 58	 mov	 QWORD PTR errtype$[rsp], rax

; 2309 :         msg = "too many levels of indentation";

  001c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BP@PIBOEKAB@too?5many?5levels?5of?5indentation?$AA@
  001cd	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2310 :         break;

  001d2	e9 dc 00 00 00	 jmp	 $LN59@err_input
$LN39@err_input:

; 2311 :     case E_DECODE: {
; 2312 :         PyObject *type, *value, *tb;
; 2313 :         PyErr_Fetch(&type, &value, &tb);

  001d7	4c 8d 44 24 78	 lea	 r8, QWORD PTR tb$123644[rsp]
  001dc	48 8d 54 24 68	 lea	 rdx, QWORD PTR value$123643[rsp]
  001e1	48 8d 4c 24 70	 lea	 rcx, QWORD PTR type$123642[rsp]
  001e6	e8 00 00 00 00	 call	 PyErr_Fetch

; 2314 :         msg = "unknown decode error";

  001eb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BF@GCGCDMBJ@unknown?5decode?5error?$AA@
  001f2	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2315 :         if (value != NULL)

  001f7	48 83 7c 24 68
	00		 cmp	 QWORD PTR value$123643[rsp], 0
  001fd	74 0f		 je	 SHORT $LN38@err_input

; 2316 :             msg_obj = PyObject_Str(value);

  001ff	48 8b 4c 24 68	 mov	 rcx, QWORD PTR value$123643[rsp]
  00204	e8 00 00 00 00	 call	 PyObject_Str
  00209	48 89 44 24 60	 mov	 QWORD PTR msg_obj$[rsp], rax
$LN38@err_input:
$LN37@err_input:

; 2317 :         Py_XDECREF(type);

  0020e	48 83 7c 24 70
	00		 cmp	 QWORD PTR type$123642[rsp], 0
  00214	74 0a		 je	 SHORT $LN34@err_input
  00216	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$123642[rsp]
  0021b	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@err_input:
  00220	33 c0		 xor	 eax, eax
  00222	85 c0		 test	 eax, eax
  00224	75 e8		 jne	 SHORT $LN37@err_input
$LN33@err_input:

; 2318 :         Py_XDECREF(value);

  00226	48 83 7c 24 68
	00		 cmp	 QWORD PTR value$123643[rsp], 0
  0022c	74 0a		 je	 SHORT $LN30@err_input
  0022e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR value$123643[rsp]
  00233	e8 00 00 00 00	 call	 _Py_DecRef
$LN30@err_input:
  00238	33 c0		 xor	 eax, eax
  0023a	85 c0		 test	 eax, eax
  0023c	75 e8		 jne	 SHORT $LN33@err_input
$LN29@err_input:

; 2319 :         Py_XDECREF(tb);

  0023e	48 83 7c 24 78
	00		 cmp	 QWORD PTR tb$123644[rsp], 0
  00244	74 0a		 je	 SHORT $LN26@err_input
  00246	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tb$123644[rsp]
  0024b	e8 00 00 00 00	 call	 _Py_DecRef
$LN26@err_input:
  00250	33 c0		 xor	 eax, eax
  00252	85 c0		 test	 eax, eax
  00254	75 e8		 jne	 SHORT $LN29@err_input

; 2320 :         break;

  00256	eb 5b		 jmp	 SHORT $LN59@err_input
$LN25@err_input:

; 2321 :     }
; 2322 :     case E_LINECONT:
; 2323 :         msg = "unexpected character after line continuation character";

  00258	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DH@CDIGDJHN@unexpected?5character?5after?5line?5@
  0025f	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2324 :         break;

  00264	eb 4d		 jmp	 SHORT $LN59@err_input
$LN24@err_input:

; 2325 : 
; 2326 :     case E_IDENTIFIER:
; 2327 :         msg = "invalid character in identifier";

  00266	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CA@MBMGHOGA@invalid?5character?5in?5identifier?$AA@
  0026d	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2328 :         break;

  00272	eb 3f		 jmp	 SHORT $LN59@err_input
$LN23@err_input:

; 2329 :     case E_BADSINGLE:
; 2330 :         msg = "multiple statements found while compiling a single statement";

  00274	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DN@BMNJCEJJ@multiple?5statements?5found?5while?5@
  0027b	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax

; 2331 :         break;

  00280	eb 31		 jmp	 SHORT $LN59@err_input
$LN22@err_input:

; 2332 :     default:
; 2333 :         fprintf(stderr, "error=%d\n", err->error);

  00282	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00288	48 83 c0 60	 add	 rax, 96			; 00000060H
  0028c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR err$[rsp]
  00294	44 8b 01	 mov	 r8d, DWORD PTR [rcx]
  00297	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FLODBNII@error?$DN?$CFd?6?$AA@
  0029e	48 8b c8	 mov	 rcx, rax
  002a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 2334 :         msg = "unknown parsing error";

  002a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BG@BPGIPGPD@unknown?5parsing?5error?$AA@
  002ae	48 89 44 24 50	 mov	 QWORD PTR msg$[rsp], rax
$LN59@err_input:

; 2335 :         break;
; 2336 :     }
; 2337 :     /* err->text may not be UTF-8 in case of decoding errors.
; 2338 :        Explicitly convert to an object. */
; 2339 :     if (!err->text) {

  002b3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  002bb	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  002c0	75 1d		 jne	 SHORT $LN21@err_input

; 2340 :         errtext = Py_None;

  002c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  002c9	48 89 44 24 30	 mov	 QWORD PTR errtext$[rsp], rax

; 2341 :         Py_INCREF(Py_None);

  002ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  002d5	e8 00 00 00 00	 call	 _Py_IncRef

; 2342 :     } else {

  002da	e9 04 01 00 00	 jmp	 $LN20@err_input
$LN21@err_input:

; 2343 :         errtext = PyUnicode_DecodeUTF8(err->text, err->offset,
; 2344 :                                        "replace");

  002df	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  002e7	48 63 40 14	 movsxd	 rax, DWORD PTR [rax+20]
  002eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07CLEHDIEJ@replace?$AA@
  002f2	48 8b d0	 mov	 rdx, rax
  002f5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  002fd	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00301	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF8
  00306	48 89 44 24 30	 mov	 QWORD PTR errtext$[rsp], rax

; 2345 :         if (errtext != NULL) {

  0030b	48 83 7c 24 30
	00		 cmp	 QWORD PTR errtext$[rsp], 0
  00311	0f 84 cc 00 00
	00		 je	 $LN19@err_input

; 2346 :             Py_ssize_t len = strlen(err->text);

  00317	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  0031f	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00323	e8 00 00 00 00	 call	 strlen
  00328	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR len$123678[rsp], rax

; 2347 :             offset = (int)PyUnicode_GET_LENGTH(errtext);

  00330	48 8b 44 24 30	 mov	 rax, QWORD PTR errtext$[rsp]
  00335	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00339	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0033f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00344	85 c0		 test	 eax, eax
  00346	75 1c		 jne	 SHORT $LN63@err_input
  00348	41 b8 2b 09 00
	00		 mov	 r8d, 2347		; 0000092bH
  0034e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JBJNIJPF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AAr?$AAu?$AAn?$AA?4?$AAc?$AA?$AA@
  00355	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@JIPJFBED@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAe?$AAr?$AAr?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
  0035c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00362	33 c0		 xor	 eax, eax
$LN63@err_input:
  00364	48 8b 44 24 30	 mov	 rax, QWORD PTR errtext$[rsp]
  00369	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0036c	c1 e8 07	 shr	 eax, 7
  0036f	83 e0 01	 and	 eax, 1
  00372	85 c0		 test	 eax, eax
  00374	75 1c		 jne	 SHORT $LN64@err_input
  00376	41 b8 2b 09 00
	00		 mov	 r8d, 2347		; 0000092bH
  0037c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JBJNIJPF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAt?$AAh?$AAo?$AAn?$AAr?$AAu?$AAn?$AA?4?$AAc?$AA?$AA@
  00383	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@CEPJEPCO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAe?$AAr?$AAr?$AAt?$AAe?$AAx?$AAt?$AA?$CJ?$AA?$AA@
  0038a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00390	33 c0		 xor	 eax, eax
$LN64@err_input:
  00392	48 8b 44 24 30	 mov	 rax, QWORD PTR errtext$[rsp]
  00397	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0039a	89 44 24 48	 mov	 DWORD PTR offset$[rsp], eax

; 2348 :             if (len != err->offset) {

  0039e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  003a6	48 63 40 14	 movsxd	 rax, DWORD PTR [rax+20]
  003aa	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR len$123678[rsp], rax
  003b2	74 2f		 je	 SHORT $LN18@err_input

; 2349 :                 Py_DECREF(errtext);

  003b4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR errtext$[rsp]
  003b9	e8 00 00 00 00	 call	 _Py_DecRef

; 2350 :                 errtext = PyUnicode_DecodeUTF8(err->text, len,
; 2351 :                                                "replace");

  003be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07CLEHDIEJ@replace?$AA@
  003c5	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR len$123678[rsp]
  003cd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  003d5	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  003d9	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF8
  003de	48 89 44 24 30	 mov	 QWORD PTR errtext$[rsp], rax
$LN18@err_input:
$LN19@err_input:
$LN20@err_input:

; 2352 :             }
; 2353 :         }
; 2354 :     }
; 2355 :     v = Py_BuildValue("(OiiN)", err->filename,
; 2356 :                       err->lineno, offset, errtext);

  003e3	48 8b 44 24 30	 mov	 rax, QWORD PTR errtext$[rsp]
  003e8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ed	44 8b 4c 24 48	 mov	 r9d, DWORD PTR offset$[rsp]
  003f2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  003fa	44 8b 40 10	 mov	 r8d, DWORD PTR [rax+16]
  003fe	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  00406	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0040a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IMIBHNFH@?$CIOiiN?$CJ?$AA@
  00411	e8 00 00 00 00	 call	 Py_BuildValue
  00416	48 89 44 24 40	 mov	 QWORD PTR v$[rsp], rax

; 2357 :     if (v != NULL) {

  0041b	48 83 7c 24 40
	00		 cmp	 QWORD PTR v$[rsp], 0
  00421	74 42		 je	 SHORT $LN17@err_input

; 2358 :         if (msg_obj)

  00423	48 83 7c 24 60
	00		 cmp	 QWORD PTR msg_obj$[rsp], 0
  00429	74 1d		 je	 SHORT $LN16@err_input

; 2359 :             w = Py_BuildValue("(OO)", msg_obj, v);

  0042b	4c 8b 44 24 40	 mov	 r8, QWORD PTR v$[rsp]
  00430	48 8b 54 24 60	 mov	 rdx, QWORD PTR msg_obj$[rsp]
  00435	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
  0043c	e8 00 00 00 00	 call	 Py_BuildValue
  00441	48 89 44 24 38	 mov	 QWORD PTR w$[rsp], rax

; 2360 :         else

  00446	eb 1b		 jmp	 SHORT $LN15@err_input
$LN16@err_input:

; 2361 :             w = Py_BuildValue("(sO)", msg, v);

  00448	4c 8b 44 24 40	 mov	 r8, QWORD PTR v$[rsp]
  0044d	48 8b 54 24 50	 mov	 rdx, QWORD PTR msg$[rsp]
  00452	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IOGGDGED@?$CIsO?$CJ?$AA@
  00459	e8 00 00 00 00	 call	 Py_BuildValue
  0045e	48 89 44 24 38	 mov	 QWORD PTR w$[rsp], rax
$LN15@err_input:

; 2362 :     } else

  00463	eb 09		 jmp	 SHORT $LN14@err_input
$LN17@err_input:

; 2363 :         w = NULL;

  00465	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR w$[rsp], 0
$LN14@err_input:
$LN13@err_input:

; 2364 :     Py_XDECREF(v);

  0046e	48 83 7c 24 40
	00		 cmp	 QWORD PTR v$[rsp], 0
  00474	74 0a		 je	 SHORT $LN10@err_input
  00476	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0047b	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@err_input:
  00480	33 c0		 xor	 eax, eax
  00482	85 c0		 test	 eax, eax
  00484	75 e8		 jne	 SHORT $LN13@err_input

; 2365 :     PyErr_SetObject(errtype, w);

  00486	48 8b 54 24 38	 mov	 rdx, QWORD PTR w$[rsp]
  0048b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR errtype$[rsp]
  00490	e8 00 00 00 00	 call	 PyErr_SetObject
$LN9@err_input:

; 2366 :     Py_XDECREF(w);

  00495	48 83 7c 24 38
	00		 cmp	 QWORD PTR w$[rsp], 0
  0049b	74 0a		 je	 SHORT $LN6@err_input
  0049d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR w$[rsp]
  004a2	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@err_input:
  004a7	33 c0		 xor	 eax, eax
  004a9	85 c0		 test	 eax, eax
  004ab	75 e8		 jne	 SHORT $LN9@err_input
$cleanup$123629:
$LN5@err_input:

; 2367 : cleanup:
; 2368 :     Py_XDECREF(msg_obj);

  004ad	48 83 7c 24 60
	00		 cmp	 QWORD PTR msg_obj$[rsp], 0
  004b3	74 0a		 je	 SHORT $LN2@err_input
  004b5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR msg_obj$[rsp]
  004ba	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@err_input:
  004bf	33 c0		 xor	 eax, eax
  004c1	85 c0		 test	 eax, eax
  004c3	75 e8		 jne	 SHORT $LN5@err_input

; 2369 :     if (err->text != NULL) {

  004c5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  004cd	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  004d2	74 21		 je	 SHORT $LN1@err_input

; 2370 :         PyObject_FREE(err->text);

  004d4	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  004dc	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  004e0	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 2371 :         err->text = NULL;

  004e5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR err$[rsp]
  004ed	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
$LN1@err_input:
$LN61@err_input:

; 2372 :     }
; 2373 : }

  004f5	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  004fc	c3		 ret	 0
  004fd	0f 1f 00	 npad	 3
$LN65@err_input:
  00500	00 00 00 00	 DD	 $LN44@err_input
  00504	00 00 00 00	 DD	 $LN47@err_input
  00508	00 00 00 00	 DD	 $LN50@err_input
  0050c	00 00 00 00	 DD	 $LN57@err_input
  00510	00 00 00 00	 DD	 $LN45@err_input
  00514	00 00 00 00	 DD	 $LN22@err_input
  00518	00 00 00 00	 DD	 $LN58@err_input
  0051c	00 00 00 00	 DD	 $LN43@err_input
  00520	00 00 00 00	 DD	 $LN42@err_input
  00524	00 00 00 00	 DD	 $LN40@err_input
  00528	00 00 00 00	 DD	 $LN41@err_input
  0052c	00 00 00 00	 DD	 $LN39@err_input
  00530	00 00 00 00	 DD	 $LN49@err_input
  00534	00 00 00 00	 DD	 $LN48@err_input
  00538	00 00 00 00	 DD	 $LN25@err_input
  0053c	00 00 00 00	 DD	 $LN24@err_input
  00540	00 00 00 00	 DD	 $LN23@err_input
err_input ENDP
_TEXT	ENDS
PUBLIC	??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_1CK@FEEIBFIN@?$AAF?$AAa?$AAt?$AAa?$AAl?$AA?5?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BI@MGCCOBGK@Fatal?5Python?5error?3?5?$CFs?6?$AA@ ; `string'
EXTRN	__imp_abort:PROC
EXTRN	__imp_DebugBreak:PROC
EXTRN	__imp_OutputDebugStringW:PROC
EXTRN	_Py_DumpTracebackThreads:PROC
EXTRN	__imp_fputc:PROC
EXTRN	_PyThreadState_Current:QWORD
EXTRN	__chkstk:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_FatalError DD imagerel $LN10
	DD	imagerel $LN10+376
	DD	imagerel $unwind$Py_FatalError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_FatalError DD 025030f01H
	DD	0920a230fH
	DD	05006H
xdata	ENDS
;	COMDAT ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@ DB 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@FEEIBFIN@?$AAF?$AAa?$AAt?$AAa?$AAl?$AA?5?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@FEEIBFIN@?$AAF?$AAa?$AAt?$AAa?$AAl?$AA?5?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 'P', 00H
	DB	'y', 00H, 't', 00H, 'h', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'e'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' ', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MGCCOBGK@Fatal?5Python?5error?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BI@MGCCOBGK@Fatal?5Python?5error?3?5?$CFs?6?$AA@ DB 'Fatal Python '
	DB	'error: %s', 0aH, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Py_FatalError
_TEXT	SEGMENT
tstate$ = 0
fd$ = 8
i$123728 = 16
len$123726 = 24
buffer$123727 = 32
msg$ = 64
Py_FatalError PROC					; COMDAT

; 2379 : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]

; 2380 :     const int fd = fileno(stderr);

  0000f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00015	48 83 c0 60	 add	 rax, 96			; 00000060H
  00019	48 8b c8	 mov	 rcx, rax
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00022	89 45 08	 mov	 DWORD PTR fd$[rbp], eax

; 2381 :     PyThreadState *tstate;
; 2382 : 
; 2383 :     fprintf(stderr, "Fatal Python error: %s\n", msg);

  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0002b	48 83 c0 60	 add	 rax, 96			; 00000060H
  0002f	4c 8b 45 40	 mov	 r8, QWORD PTR msg$[rbp]
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@MGCCOBGK@Fatal?5Python?5error?3?5?$CFs?6?$AA@
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 2384 :     fflush(stderr); /* it helps in Windows debug build */

  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00049	48 83 c0 60	 add	 rax, 96			; 00000060H
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 2385 :     if (PyErr_Occurred()) {

  00056	e8 00 00 00 00	 call	 PyErr_Occurred
  0005b	48 85 c0	 test	 rax, rax
  0005e	74 09		 je	 SHORT $LN6@Py_FatalEr

; 2386 :         PyErr_PrintEx(0);

  00060	33 c9		 xor	 ecx, ecx
  00062	e8 00 00 00 00	 call	 PyErr_PrintEx

; 2387 :     }
; 2388 :     else {

  00067	eb 56		 jmp	 SHORT $LN5@Py_FatalEr
$LN6@Py_FatalEr:

; 2389 :         tstate = _Py_atomic_load_relaxed(&_PyThreadState_Current);

  00069	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
  00070	48 89 45 00	 mov	 QWORD PTR tstate$[rbp], rax

; 2390 :         if (tstate != NULL) {

  00074	48 83 7d 00 00	 cmp	 QWORD PTR tstate$[rbp], 0
  00079	74 3f		 je	 SHORT $LN4@Py_FatalEr

; 2391 :             fputc('\n', stderr);

  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00081	48 83 c0 60	 add	 rax, 96			; 00000060H
  00085	48 8b d0	 mov	 rdx, rax
  00088	b9 0a 00 00 00	 mov	 ecx, 10
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputc

; 2392 :             fflush(stderr);

  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00099	48 83 c0 60	 add	 rax, 96			; 00000060H
  0009d	48 8b c8	 mov	 rcx, rax
  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 2393 :             _Py_DumpTracebackThreads(fd, tstate->interp, tstate);

  000a6	4c 8b 45 00	 mov	 r8, QWORD PTR tstate$[rbp]
  000aa	48 8b 45 00	 mov	 rax, QWORD PTR tstate$[rbp]
  000ae	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR fd$[rbp]
  000b5	e8 00 00 00 00	 call	 _Py_DumpTracebackThreads
$LN4@Py_FatalEr:

; 2394 :         }
; 2395 :         _PyFaulthandler_Fini();

  000ba	e8 00 00 00 00	 call	 _PyFaulthandler_Fini
$LN5@Py_FatalEr:

; 2396 :     }
; 2397 : 
; 2398 : #ifdef MS_WINDOWS
; 2399 :     {
; 2400 :         size_t len = strlen(msg);

  000bf	48 8b 4d 40	 mov	 rcx, QWORD PTR msg$[rbp]
  000c3	e8 00 00 00 00	 call	 strlen
  000c8	48 89 45 18	 mov	 QWORD PTR len$123726[rbp], rax

; 2401 :         WCHAR* buffer;
; 2402 :         size_t i;
; 2403 : 
; 2404 :         /* Convert the message to wchar_t. This uses a simple one-to-one
; 2405 :         conversion, assuming that the this error message actually uses ASCII
; 2406 :         only. If this ceases to be true, we will have to convert. */
; 2407 :         buffer = alloca( (len+1) * (sizeof *buffer));

  000cc	48 8b 45 18	 mov	 rax, QWORD PTR len$123726[rbp]
  000d0	48 8d 44 00 02	 lea	 rax, QWORD PTR [rax+rax+2]
  000d5	48 8b c8	 mov	 rcx, rax
  000d8	48 83 c1 0f	 add	 rcx, 15
  000dc	48 3b c8	 cmp	 rcx, rax
  000df	77 0a		 ja	 SHORT $LN9@Py_FatalEr
  000e1	48 b9 f0 ff ff
	ff ff ff ff 0f	 mov	 rcx, 1152921504606846960 ; 0ffffffffffffff0H
$LN9@Py_FatalEr:
  000eb	48 83 e1 f0	 and	 rcx, -16
  000ef	48 8b c1	 mov	 rax, rcx
  000f2	e8 00 00 00 00	 call	 __chkstk
  000f7	48 2b e0	 sub	 rsp, rax
  000fa	48 8d 44 24 20	 lea	 rax, QWORD PTR [rsp+32]
  000ff	48 89 45 20	 mov	 QWORD PTR buffer$123727[rbp], rax

; 2408 :         for( i=0; i<=len; ++i)

  00103	48 c7 45 10 00
	00 00 00	 mov	 QWORD PTR i$123728[rbp], 0
  0010b	eb 0b		 jmp	 SHORT $LN3@Py_FatalEr
$LN2@Py_FatalEr:
  0010d	48 8b 45 10	 mov	 rax, QWORD PTR i$123728[rbp]
  00111	48 ff c0	 inc	 rax
  00114	48 89 45 10	 mov	 QWORD PTR i$123728[rbp], rax
$LN3@Py_FatalEr:
  00118	48 8b 45 18	 mov	 rax, QWORD PTR len$123726[rbp]
  0011c	48 39 45 10	 cmp	 QWORD PTR i$123728[rbp], rax
  00120	77 20		 ja	 SHORT $LN1@Py_FatalEr

; 2409 :             buffer[i] = msg[i];

  00122	48 8b 45 10	 mov	 rax, QWORD PTR i$123728[rbp]
  00126	48 8b 4d 40	 mov	 rcx, QWORD PTR msg$[rbp]
  0012a	48 03 c8	 add	 rcx, rax
  0012d	48 8b c1	 mov	 rax, rcx
  00130	66 0f be 00	 movsx	 ax, BYTE PTR [rax]
  00134	48 8b 4d 20	 mov	 rcx, QWORD PTR buffer$123727[rbp]
  00138	48 8b 55 10	 mov	 rdx, QWORD PTR i$123728[rbp]
  0013c	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax
  00140	eb cb		 jmp	 SHORT $LN2@Py_FatalEr
$LN1@Py_FatalEr:

; 2410 :         OutputDebugStringW(L"Fatal Python error: ");

  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FEEIBFIN@?$AAF?$AAa?$AAt?$AAa?$AAl?$AA?5?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AA?$AA@
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW

; 2411 :         OutputDebugStringW(buffer);

  0014f	48 8b 4d 20	 mov	 rcx, QWORD PTR buffer$123727[rbp]
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW

; 2412 :         OutputDebugStringW(L"\n");

  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
  00160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW

; 2413 :     }
; 2414 : #ifdef _DEBUG
; 2415 :     DebugBreak();

  00166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DebugBreak

; 2416 : #endif
; 2417 : #endif /* MS_WINDOWS */
; 2418 :     abort();

  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_abort

; 2419 : }

  00172	48 8d 65 30	 lea	 rsp, QWORD PTR [rbp+48]
  00176	5d		 pop	 rbp
  00177	c3		 ret	 0
Py_FatalError ENDP
_TEXT	ENDS
PUBLIC	_Py_PyAtExit
; Function compile flags: /Odtp
;	COMDAT _Py_PyAtExit
_TEXT	SEGMENT
func$ = 8
_Py_PyAtExit PROC					; COMDAT

; 2430 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2431 :     pyexitfunc = func;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR func$[rsp]
  0000a	48 89 05 00 00
	00 00		 mov	 QWORD PTR pyexitfunc, rax

; 2432 : }

  00011	c3		 ret	 0
_Py_PyAtExit ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_py_exitfuncs DD imagerel call_py_exitfuncs
	DD	imagerel call_py_exitfuncs+32
	DD	imagerel $unwind$call_py_exitfuncs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_py_exitfuncs DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT call_py_exitfuncs
_TEXT	SEGMENT
call_py_exitfuncs PROC					; COMDAT

; 2436 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2437 :     if (pyexitfunc == NULL)

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR pyexitfunc, 0
  0000c	75 02		 jne	 SHORT $LN1@call_py_ex

; 2438 :         return;

  0000e	eb 0b		 jmp	 SHORT $LN2@call_py_ex
$LN1@call_py_ex:

; 2439 : 
; 2440 :     (*pyexitfunc)();

  00010	ff 15 00 00 00
	00		 call	 QWORD PTR pyexitfunc

; 2441 :     PyErr_Clear();

  00016	e8 00 00 00 00	 call	 PyErr_Clear
$LN2@call_py_ex:

; 2442 : }

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
call_py_exitfuncs ENDP
_TEXT	ENDS
PUBLIC	??_C@_09LCFGMKMJ@threading?$AA@			; `string'
EXTRN	PyMapping_GetItemString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$wait_for_thread_shutdown DD imagerel wait_for_thread_shutdown
	DD	imagerel wait_for_thread_shutdown+155
	DD	imagerel $unwind$wait_for_thread_shutdown
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wait_for_thread_shutdown DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_09LCFGMKMJ@threading?$AA@
CONST	SEGMENT
??_C@_09LCFGMKMJ@threading?$AA@ DB 'threading', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT wait_for_thread_shutdown
_TEXT	SEGMENT
threading$ = 32
tstate$ = 40
result$ = 48
wait_for_thread_shutdown PROC				; COMDAT

; 2450 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2451 : #ifdef WITH_THREAD
; 2452 :     _Py_IDENTIFIER(_shutdown);
; 2453 :     PyObject *result;
; 2454 :     PyThreadState *tstate = PyThreadState_GET();

  00004	e8 00 00 00 00	 call	 PyThreadState_Get
  00009	48 89 44 24 28	 mov	 QWORD PTR tstate$[rsp], rax

; 2455 :     PyObject *threading = PyMapping_GetItemString(tstate->interp->modules,
; 2456 :                                                   "threading");

  0000e	48 8b 44 24 28	 mov	 rax, QWORD PTR tstate$[rsp]
  00013	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LCFGMKMJ@threading?$AA@
  0001e	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00022	e8 00 00 00 00	 call	 PyMapping_GetItemString
  00027	48 89 44 24 20	 mov	 QWORD PTR threading$[rsp], rax

; 2457 :     if (threading == NULL) {

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR threading$[rsp], 0
  00032	75 07		 jne	 SHORT $LN3@wait_for_t

; 2458 :         /* threading not imported */
; 2459 :         PyErr_Clear();

  00034	e8 00 00 00 00	 call	 PyErr_Clear

; 2460 :         return;

  00039	eb 5b		 jmp	 SHORT $LN4@wait_for_t
$LN3@wait_for_t:

; 2461 :     }
; 2462 :     result = _PyObject_CallMethodId(threading, &PyId__shutdown, "");

  0003b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__shutdown@?1??wait_for_thread_shutdown@@9@9
  00040	8b c0		 mov	 eax, eax
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00048	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00051	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00055	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0005c	48 8b d0	 mov	 rdx, rax
  0005f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR threading$[rsp]
  00064	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00069	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 2463 :     if (result == NULL) {

  0006e	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  00074	75 0c		 jne	 SHORT $LN2@wait_for_t

; 2464 :         PyErr_WriteUnraisable(threading);

  00076	48 8b 4c 24 20	 mov	 rcx, QWORD PTR threading$[rsp]
  0007b	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 2465 :     }
; 2466 :     else {

  00080	eb 0a		 jmp	 SHORT $LN1@wait_for_t
$LN2@wait_for_t:

; 2467 :         Py_DECREF(result);

  00082	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  00087	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@wait_for_t:

; 2468 :     }
; 2469 :     Py_DECREF(threading);

  0008c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR threading$[rsp]
  00091	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@wait_for_t:

; 2470 : #endif
; 2471 : }

  00096	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009a	c3		 ret	 0
wait_for_thread_shutdown ENDP
_TEXT	ENDS
PUBLIC	Py_AtExit
_BSS	SEGMENT
	ALIGN	8

exitfuncs DQ	020H DUP (?)
; Function compile flags: /Odtp
_BSS	ENDS
;	COMDAT Py_AtExit
_TEXT	SEGMENT
func$ = 8
Py_AtExit PROC						; COMDAT

; 2478 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2479 :     if (nexitfuncs >= NEXITFUNCS)

  00005	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR nexitfuncs, 32 ; 00000020H
  0000c	7c 07		 jl	 SHORT $LN1@Py_AtExit

; 2480 :         return -1;

  0000e	b8 ff ff ff ff	 mov	 eax, -1
  00013	eb 27		 jmp	 SHORT $LN2@Py_AtExit
$LN1@Py_AtExit:

; 2481 :     exitfuncs[nexitfuncs++] = func;

  00015	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR nexitfuncs
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:exitfuncs
  00023	48 8b 54 24 08	 mov	 rdx, QWORD PTR func$[rsp]
  00028	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
  0002c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR nexitfuncs
  00032	ff c0		 inc	 eax
  00034	89 05 00 00 00
	00		 mov	 DWORD PTR nexitfuncs, eax

; 2482 :     return 0;

  0003a	33 c0		 xor	 eax, eax
$LN2@Py_AtExit:

; 2483 : }

  0003c	f3 c3		 fatret	 0
Py_AtExit ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_ll_exitfuncs DD imagerel call_ll_exitfuncs
	DD	imagerel call_ll_exitfuncs+89
	DD	imagerel $unwind$call_ll_exitfuncs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_ll_exitfuncs DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT call_ll_exitfuncs
_TEXT	SEGMENT
call_ll_exitfuncs PROC					; COMDAT

; 2487 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN2@call_ll_ex:

; 2488 :     while (nexitfuncs > 0)

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR nexitfuncs, 0
  0000b	7e 21		 jle	 SHORT $LN1@call_ll_ex

; 2489 :         (*exitfuncs[--nexitfuncs])();

  0000d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR nexitfuncs
  00013	ff c8		 dec	 eax
  00015	89 05 00 00 00
	00		 mov	 DWORD PTR nexitfuncs, eax
  0001b	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR nexitfuncs
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:exitfuncs
  00029	ff 14 c1	 call	 QWORD PTR [rcx+rax*8]
  0002c	eb d6		 jmp	 SHORT $LN2@call_ll_ex
$LN1@call_ll_ex:

; 2490 : 
; 2491 :     fflush(stdout);

  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00034	48 83 c0 30	 add	 rax, 48			; 00000030H
  00038	48 8b c8	 mov	 rcx, rax
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 2492 :     fflush(stderr);

  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00047	48 83 c0 60	 add	 rax, 96			; 00000060H
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 2493 : }

  00054	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00058	c3		 ret	 0
call_ll_exitfuncs ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_Exit DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$Py_Exit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_Exit DD 010801H
	DD	04208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Py_Exit
_TEXT	SEGMENT
sts$ = 48
Py_Exit	PROC						; COMDAT

; 2497 : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2498 :     Py_Finalize();

  00008	e8 00 00 00 00	 call	 Py_Finalize

; 2499 : 
; 2500 :     exit(sts);

  0000d	8b 4c 24 30	 mov	 ecx, DWORD PTR sts$[rsp]
  00011	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN2@Py_Exit:

; 2501 : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
Py_Exit	ENDP
_TEXT	ENDS
EXTRN	PyOS_InitInterrupts:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$initsigs DD imagerel initsigs
	DD	imagerel initsigs+14
	DD	imagerel $unwind$initsigs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$initsigs DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT initsigs
_TEXT	SEGMENT
initsigs PROC						; COMDAT

; 2505 : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2506 : #ifdef SIGPIPE
; 2507 :     PyOS_setsig(SIGPIPE, SIG_IGN);
; 2508 : #endif
; 2509 : #ifdef SIGXFZ
; 2510 :     PyOS_setsig(SIGXFZ, SIG_IGN);
; 2511 : #endif
; 2512 : #ifdef SIGXFSZ
; 2513 :     PyOS_setsig(SIGXFSZ, SIG_IGN);
; 2514 : #endif
; 2515 :     PyOS_InitInterrupts(); /* May imply initsignal() */

  00004	e8 00 00 00 00	 call	 PyOS_InitInterrupts

; 2516 : }

  00009	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000d	c3		 ret	 0
initsigs ENDP
_TEXT	ENDS
PUBLIC	_Py_RestoreSignals
; Function compile flags: /Odtp
;	COMDAT _Py_RestoreSignals
_TEXT	SEGMENT
_Py_RestoreSignals PROC					; COMDAT

; 2528 : #ifdef SIGPIPE
; 2529 :     PyOS_setsig(SIGPIPE, SIG_DFL);
; 2530 : #endif
; 2531 : #ifdef SIGXFZ
; 2532 :     PyOS_setsig(SIGXFZ, SIG_DFL);
; 2533 : #endif
; 2534 : #ifdef SIGXFSZ
; 2535 :     PyOS_setsig(SIGXFSZ, SIG_DFL);
; 2536 : #endif
; 2537 : }

  00000	c3		 ret	 0
_Py_RestoreSignals ENDP
_TEXT	ENDS
EXTRN	__imp_isatty:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_FdIsInteractive DD imagerel $LN7
	DD	imagerel $LN7+134
	DD	imagerel $unwind$Py_FdIsInteractive
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_FdIsInteractive DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Py_FdIsInteractive
_TEXT	SEGMENT
tv79 = 32
fp$ = 64
filename$ = 72
Py_FdIsInteractive PROC					; COMDAT

; 2548 : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2549 :     if (isatty((int)fileno(fp)))

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00019	8b c8		 mov	 ecx, eax
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isatty
  00021	85 c0		 test	 eax, eax
  00023	74 07		 je	 SHORT $LN2@Py_FdIsInt

; 2550 :         return 1;

  00025	b8 01 00 00 00	 mov	 eax, 1
  0002a	eb 55		 jmp	 SHORT $LN3@Py_FdIsInt
$LN2@Py_FdIsInt:

; 2551 :     if (!Py_InteractiveFlag)

  0002c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_InteractiveFlag, 0
  00033	75 04		 jne	 SHORT $LN1@Py_FdIsInt

; 2552 :         return 0;

  00035	33 c0		 xor	 eax, eax
  00037	eb 48		 jmp	 SHORT $LN3@Py_FdIsInt
$LN1@Py_FdIsInt:

; 2553 :     return (filename == NULL) ||
; 2554 :            (strcmp(filename, "<stdin>") == 0) ||
; 2555 :            (strcmp(filename, "???") == 0);

  00039	48 83 7c 24 48
	00		 cmp	 QWORD PTR filename$[rsp], 0
  0003f	74 34		 je	 SHORT $LN5@Py_FdIsInt
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CMJMHHJG@?$DMstdin?$DO?$AA@
  00048	48 8b 4c 24 48	 mov	 rcx, QWORD PTR filename$[rsp]
  0004d	e8 00 00 00 00	 call	 strcmp
  00052	85 c0		 test	 eax, eax
  00054	74 1f		 je	 SHORT $LN5@Py_FdIsInt
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
  0005d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR filename$[rsp]
  00062	e8 00 00 00 00	 call	 strcmp
  00067	85 c0		 test	 eax, eax
  00069	74 0a		 je	 SHORT $LN5@Py_FdIsInt
  0006b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
  00073	eb 08		 jmp	 SHORT $LN6@Py_FdIsInt
$LN5@Py_FdIsInt:
  00075	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
$LN6@Py_FdIsInt:
  0007d	8b 44 24 20	 mov	 eax, DWORD PTR tv79[rsp]
$LN3@Py_FdIsInt:

; 2556 : }

  00081	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00085	c3		 ret	 0
Py_FdIsInteractive ENDP
_TEXT	ENDS
PUBLIC	PyOS_getsig
EXTRN	__imp_signal:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyOS_getsig DD imagerel $LN10
	DD	imagerel $LN10+161
	DD	imagerel $unwind$PyOS_getsig
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyOS_getsig DD 010801H
	DD	06208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyOS_getsig
_TEXT	SEGMENT
handler$ = 32
tv64 = 40
sig$ = 64
PyOS_getsig PROC					; COMDAT

; 2601 : {

$LN10:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2602 : #ifdef HAVE_SIGACTION
; 2603 :     struct sigaction context;
; 2604 :     if (sigaction(sig, NULL, &context) == -1)
; 2605 :         return SIG_ERR;
; 2606 :     return context.sa_handler;
; 2607 : #else
; 2608 :     PyOS_sighandler_t handler;
; 2609 : /* Special signal handling for the secure CRT in Visual Studio 2005 */
; 2610 : #if defined(_MSC_VER) && _MSC_VER >= 1400
; 2611 :     switch (sig) {

  00008	8b 44 24 40	 mov	 eax, DWORD PTR sig$[rsp]
  0000c	89 44 24 28	 mov	 DWORD PTR tv64[rsp], eax
  00010	8b 44 24 28	 mov	 eax, DWORD PTR tv64[rsp]
  00014	83 e8 02	 sub	 eax, 2
  00017	89 44 24 28	 mov	 DWORD PTR tv64[rsp], eax
  0001b	83 7c 24 28 14	 cmp	 DWORD PTR tv64[rsp], 20
  00020	77 22		 ja	 SHORT $LN2@PyOS_getsi
  00022	48 63 44 24 28	 movsxd	 rax, DWORD PTR tv64[rsp]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0002e	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN8@PyOS_getsi[rcx+rax]
  00036	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN9@PyOS_getsi[rcx+rax*4]
  0003d	48 03 c1	 add	 rax, rcx
  00040	ff e0		 jmp	 rax
$LN3@PyOS_getsi:

; 2612 :     /* Only these signals are valid */
; 2613 :     case SIGINT:
; 2614 :     case SIGILL:
; 2615 :     case SIGFPE:
; 2616 :     case SIGSEGV:
; 2617 :     case SIGTERM:
; 2618 :     case SIGBREAK:
; 2619 :     case SIGABRT:
; 2620 :         break;

  00042	eb 09		 jmp	 SHORT $LN4@PyOS_getsi
$LN2@PyOS_getsi:

; 2621 :     /* Don't call signal() with other values or it will assert */
; 2622 :     default:
; 2623 :         return SIG_ERR;

  00044	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0004b	eb 30		 jmp	 SHORT $LN6@PyOS_getsi
$LN4@PyOS_getsi:

; 2624 :     }
; 2625 : #endif /* _MSC_VER && _MSC_VER >= 1400 */
; 2626 :     handler = signal(sig, SIG_IGN);

  0004d	ba 01 00 00 00	 mov	 edx, 1
  00052	8b 4c 24 40	 mov	 ecx, DWORD PTR sig$[rsp]
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_signal
  0005c	48 89 44 24 20	 mov	 QWORD PTR handler$[rsp], rax

; 2627 :     if (handler != SIG_ERR)

  00061	48 83 7c 24 20
	ff		 cmp	 QWORD PTR handler$[rsp], -1
  00067	74 0f		 je	 SHORT $LN1@PyOS_getsi

; 2628 :         signal(sig, handler);

  00069	48 8b 54 24 20	 mov	 rdx, QWORD PTR handler$[rsp]
  0006e	8b 4c 24 40	 mov	 ecx, DWORD PTR sig$[rsp]
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_signal
$LN1@PyOS_getsi:

; 2629 :     return handler;

  00078	48 8b 44 24 20	 mov	 rax, QWORD PTR handler$[rsp]
$LN6@PyOS_getsi:

; 2630 : #endif
; 2631 : }

  0007d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00081	c3		 ret	 0
  00082	66 90		 npad	 2
$LN9@PyOS_getsi:
  00084	00 00 00 00	 DD	 $LN3@PyOS_getsi
  00088	00 00 00 00	 DD	 $LN2@PyOS_getsi
$LN8@PyOS_getsi:
  0008c	00		 DB	 0
  0008d	01		 DB	 1
  0008e	00		 DB	 0
  0008f	01		 DB	 1
  00090	01		 DB	 1
  00091	01		 DB	 1
  00092	00		 DB	 0
  00093	01		 DB	 1
  00094	01		 DB	 1
  00095	00		 DB	 0
  00096	01		 DB	 1
  00097	01		 DB	 1
  00098	01		 DB	 1
  00099	00		 DB	 0
  0009a	01		 DB	 1
  0009b	01		 DB	 1
  0009c	01		 DB	 1
  0009d	01		 DB	 1
  0009e	01		 DB	 1
  0009f	00		 DB	 0
  000a0	00		 DB	 0
PyOS_getsig ENDP
_TEXT	ENDS
PUBLIC	PyOS_setsig
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyOS_setsig DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$PyOS_setsig
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyOS_setsig DD 010d01H
	DD	0620dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyOS_setsig
_TEXT	SEGMENT
oldhandler$ = 32
sig$ = 64
handler$ = 72
PyOS_setsig PROC					; COMDAT

; 2640 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2641 : #ifdef HAVE_SIGACTION
; 2642 :     /* Some code in Modules/signalmodule.c depends on sigaction() being
; 2643 :      * used here if HAVE_SIGACTION is defined.  Fix that if this code
; 2644 :      * changes to invalidate that assumption.
; 2645 :      */
; 2646 :     struct sigaction context, ocontext;
; 2647 :     context.sa_handler = handler;
; 2648 :     sigemptyset(&context.sa_mask);
; 2649 :     context.sa_flags = 0;
; 2650 :     if (sigaction(sig, &context, &ocontext) == -1)
; 2651 :         return SIG_ERR;
; 2652 :     return ocontext.sa_handler;
; 2653 : #else
; 2654 :     PyOS_sighandler_t oldhandler;
; 2655 :     oldhandler = signal(sig, handler);

  0000d	48 8b 54 24 48	 mov	 rdx, QWORD PTR handler$[rsp]
  00012	8b 4c 24 40	 mov	 ecx, DWORD PTR sig$[rsp]
  00016	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_signal
  0001c	48 89 44 24 20	 mov	 QWORD PTR oldhandler$[rsp], rax

; 2656 : #ifdef HAVE_SIGINTERRUPT
; 2657 :     siginterrupt(sig, 1);
; 2658 : #endif
; 2659 :     return oldhandler;

  00021	48 8b 44 24 20	 mov	 rax, QWORD PTR oldhandler$[rsp]

; 2660 : #endif
; 2661 : }

  00026	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002a	c3		 ret	 0
PyOS_setsig ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_SimpleParseFile DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$PyParser_SimpleParseFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_SimpleParseFile DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyParser_SimpleParseFile
_TEXT	SEGMENT
fp$ = 48
filename$ = 56
start$ = 64
PyParser_SimpleParseFile PROC				; COMDAT

; 2668 : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2669 :     return PyParser_SimpleParseFileFlags(fp, filename, start, 0);

  00013	45 33 c9	 xor	 r9d, r9d
  00016	44 8b 44 24 40	 mov	 r8d, DWORD PTR start$[rsp]
  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR filename$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fp$[rsp]
  00025	e8 00 00 00 00	 call	 PyParser_SimpleParseFileFlags

; 2670 : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
PyParser_SimpleParseFile ENDP
_TEXT	ENDS
PUBLIC	PyParser_SimpleParseString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyParser_SimpleParseString DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$PyParser_SimpleParseString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyParser_SimpleParseString DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyParser_SimpleParseString
_TEXT	SEGMENT
str$ = 48
start$ = 56
PyParser_SimpleParseString PROC				; COMDAT

; 2675 : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2676 :     return PyParser_SimpleParseStringFlags(str, start, 0);

  0000d	45 33 c0	 xor	 r8d, r8d
  00010	8b 54 24 38	 mov	 edx, DWORD PTR start$[rsp]
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00019	e8 00 00 00 00	 call	 PyParser_SimpleParseStringFlags

; 2677 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
PyParser_SimpleParseString ENDP
_TEXT	ENDS
PUBLIC	PyRun_AnyFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_AnyFile DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$PyRun_AnyFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_AnyFile DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_AnyFile
_TEXT	SEGMENT
fp$ = 48
name$ = 56
PyRun_AnyFile PROC					; COMDAT

; 2682 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2683 :     return PyRun_AnyFileExFlags(fp, name, 0, NULL);

  0000e	45 33 c9	 xor	 r9d, r9d
  00011	45 33 c0	 xor	 r8d, r8d
  00014	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fp$[rsp]
  0001e	e8 00 00 00 00	 call	 PyRun_AnyFileExFlags

; 2684 : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
PyRun_AnyFile ENDP
_TEXT	ENDS
PUBLIC	PyRun_AnyFileEx
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_AnyFileEx DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$PyRun_AnyFileEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_AnyFileEx DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_AnyFileEx
_TEXT	SEGMENT
fp$ = 48
name$ = 56
closeit$ = 64
PyRun_AnyFileEx PROC					; COMDAT

; 2689 : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2690 :     return PyRun_AnyFileExFlags(fp, name, closeit, NULL);

  00013	45 33 c9	 xor	 r9d, r9d
  00016	44 8b 44 24 40	 mov	 r8d, DWORD PTR closeit$[rsp]
  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fp$[rsp]
  00025	e8 00 00 00 00	 call	 PyRun_AnyFileExFlags

; 2691 : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
PyRun_AnyFileEx ENDP
_TEXT	ENDS
PUBLIC	PyRun_AnyFileFlags
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_AnyFileFlags DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$PyRun_AnyFileFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_AnyFileFlags DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_AnyFileFlags
_TEXT	SEGMENT
fp$ = 48
name$ = 56
flags$ = 64
PyRun_AnyFileFlags PROC					; COMDAT

; 2696 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2697 :     return PyRun_AnyFileExFlags(fp, name, 0, flags);

  00013	4c 8b 4c 24 40	 mov	 r9, QWORD PTR flags$[rsp]
  00018	45 33 c0	 xor	 r8d, r8d
  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fp$[rsp]
  00025	e8 00 00 00 00	 call	 PyRun_AnyFileExFlags

; 2698 : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
PyRun_AnyFileFlags ENDP
_TEXT	ENDS
PUBLIC	PyRun_File
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_File DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$PyRun_File
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_File DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_File
_TEXT	SEGMENT
fp$ = 80
p$ = 88
s$ = 96
g$ = 104
l$ = 112
PyRun_File PROC						; COMDAT

; 2703 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2704 :     return PyRun_FileExFlags(fp, p, s, g, l, 0, NULL);

  00018	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00021	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00029	48 8b 44 24 70	 mov	 rax, QWORD PTR l$[rsp]
  0002e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00033	4c 8b 4c 24 68	 mov	 r9, QWORD PTR g$[rsp]
  00038	44 8b 44 24 60	 mov	 r8d, DWORD PTR s$[rsp]
  0003d	48 8b 54 24 58	 mov	 rdx, QWORD PTR p$[rsp]
  00042	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  00047	e8 00 00 00 00	 call	 PyRun_FileExFlags

; 2705 : }

  0004c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00050	c3		 ret	 0
PyRun_File ENDP
_TEXT	ENDS
PUBLIC	PyRun_FileEx
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_FileEx DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$PyRun_FileEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_FileEx DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_FileEx
_TEXT	SEGMENT
fp$ = 80
p$ = 88
s$ = 96
g$ = 104
l$ = 112
c$ = 120
PyRun_FileEx PROC					; COMDAT

; 2710 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2711 :     return PyRun_FileExFlags(fp, p, s, g, l, c, NULL);

  00018	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00021	8b 44 24 78	 mov	 eax, DWORD PTR c$[rsp]
  00025	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00029	48 8b 44 24 70	 mov	 rax, QWORD PTR l$[rsp]
  0002e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00033	4c 8b 4c 24 68	 mov	 r9, QWORD PTR g$[rsp]
  00038	44 8b 44 24 60	 mov	 r8d, DWORD PTR s$[rsp]
  0003d	48 8b 54 24 58	 mov	 rdx, QWORD PTR p$[rsp]
  00042	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  00047	e8 00 00 00 00	 call	 PyRun_FileExFlags

; 2712 : }

  0004c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00050	c3		 ret	 0
PyRun_FileEx ENDP
_TEXT	ENDS
PUBLIC	PyRun_FileFlags
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_FileFlags DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$PyRun_FileFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_FileFlags DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_FileFlags
_TEXT	SEGMENT
fp$ = 80
p$ = 88
s$ = 96
g$ = 104
l$ = 112
flags$ = 120
PyRun_FileFlags PROC					; COMDAT

; 2718 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2719 :     return PyRun_FileExFlags(fp, p, s, g, l, 0, flags);

  00018	48 8b 44 24 78	 mov	 rax, QWORD PTR flags$[rsp]
  0001d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00022	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0002a	48 8b 44 24 70	 mov	 rax, QWORD PTR l$[rsp]
  0002f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00034	4c 8b 4c 24 68	 mov	 r9, QWORD PTR g$[rsp]
  00039	44 8b 44 24 60	 mov	 r8d, DWORD PTR s$[rsp]
  0003e	48 8b 54 24 58	 mov	 rdx, QWORD PTR p$[rsp]
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  00048	e8 00 00 00 00	 call	 PyRun_FileExFlags

; 2720 : }

  0004d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00051	c3		 ret	 0
PyRun_FileFlags ENDP
_TEXT	ENDS
PUBLIC	PyRun_SimpleFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_SimpleFile DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$PyRun_SimpleFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_SimpleFile DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_SimpleFile
_TEXT	SEGMENT
f$ = 48
p$ = 56
PyRun_SimpleFile PROC					; COMDAT

; 2725 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2726 :     return PyRun_SimpleFileExFlags(f, p, 0, NULL);

  0000e	45 33 c9	 xor	 r9d, r9d
  00011	45 33 c0	 xor	 r8d, r8d
  00014	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$[rsp]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  0001e	e8 00 00 00 00	 call	 PyRun_SimpleFileExFlags

; 2727 : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
PyRun_SimpleFile ENDP
_TEXT	ENDS
PUBLIC	PyRun_SimpleFileEx
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_SimpleFileEx DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$PyRun_SimpleFileEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_SimpleFileEx DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_SimpleFileEx
_TEXT	SEGMENT
f$ = 48
p$ = 56
c$ = 64
PyRun_SimpleFileEx PROC					; COMDAT

; 2732 : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2733 :     return PyRun_SimpleFileExFlags(f, p, c, NULL);

  00013	45 33 c9	 xor	 r9d, r9d
  00016	44 8b 44 24 40	 mov	 r8d, DWORD PTR c$[rsp]
  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  00025	e8 00 00 00 00	 call	 PyRun_SimpleFileExFlags

; 2734 : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
PyRun_SimpleFileEx ENDP
_TEXT	ENDS
PUBLIC	PyRun_String
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_String DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$PyRun_String
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_String DD 011701H
	DD	06217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_String
_TEXT	SEGMENT
str$ = 64
s$ = 72
g$ = 80
l$ = 88
PyRun_String PROC					; COMDAT

; 2740 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2741 :     return PyRun_StringFlags(str, s, g, l, NULL);

  00017	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00020	4c 8b 4c 24 58	 mov	 r9, QWORD PTR l$[rsp]
  00025	4c 8b 44 24 50	 mov	 r8, QWORD PTR g$[rsp]
  0002a	8b 54 24 48	 mov	 edx, DWORD PTR s$[rsp]
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR str$[rsp]
  00033	e8 00 00 00 00	 call	 PyRun_StringFlags

; 2742 : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
PyRun_String ENDP
_TEXT	ENDS
PUBLIC	PyRun_SimpleString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_SimpleString DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$PyRun_SimpleString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_SimpleString DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_SimpleString
_TEXT	SEGMENT
s$ = 48
PyRun_SimpleString PROC					; COMDAT

; 2747 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2748 :     return PyRun_SimpleStringFlags(s, NULL);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00010	e8 00 00 00 00	 call	 PyRun_SimpleStringFlags

; 2749 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
PyRun_SimpleString ENDP
_TEXT	ENDS
PUBLIC	Py_CompileString
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_CompileString DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$Py_CompileString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_CompileString DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Py_CompileString
_TEXT	SEGMENT
str$ = 64
p$ = 72
s$ = 80
Py_CompileString PROC					; COMDAT

; 2754 : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2755 :     return Py_CompileStringExFlags(str, p, s, NULL, -1);

  00013	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	44 8b 44 24 50	 mov	 r8d, DWORD PTR s$[rsp]
  00023	48 8b 54 24 48	 mov	 rdx, QWORD PTR p$[rsp]
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR str$[rsp]
  0002d	e8 00 00 00 00	 call	 Py_CompileStringExFlags

; 2756 : }

  00032	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00036	c3		 ret	 0
Py_CompileString ENDP
_TEXT	ENDS
PUBLIC	Py_CompileStringFlags
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_CompileStringFlags DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$Py_CompileStringFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_CompileStringFlags DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Py_CompileStringFlags
_TEXT	SEGMENT
str$ = 64
p$ = 72
s$ = 80
flags$ = 88
Py_CompileStringFlags PROC				; COMDAT

; 2762 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2763 :     return Py_CompileStringExFlags(str, p, s, flags, -1);

  00018	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  00020	4c 8b 4c 24 58	 mov	 r9, QWORD PTR flags$[rsp]
  00025	44 8b 44 24 50	 mov	 r8d, DWORD PTR s$[rsp]
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR p$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR str$[rsp]
  00034	e8 00 00 00 00	 call	 Py_CompileStringExFlags

; 2764 : }

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
Py_CompileStringFlags ENDP
_TEXT	ENDS
PUBLIC	PyRun_InteractiveOne
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_InteractiveOne DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$PyRun_InteractiveOne
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_InteractiveOne DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_InteractiveOne
_TEXT	SEGMENT
f$ = 48
p$ = 56
PyRun_InteractiveOne PROC				; COMDAT

; 2769 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2770 :     return PyRun_InteractiveOneFlags(f, p, NULL);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  0001b	e8 00 00 00 00	 call	 PyRun_InteractiveOneFlags

; 2771 : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
PyRun_InteractiveOne ENDP
_TEXT	ENDS
PUBLIC	PyRun_InteractiveLoop
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyRun_InteractiveLoop DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$PyRun_InteractiveLoop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyRun_InteractiveLoop DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyRun_InteractiveLoop
_TEXT	SEGMENT
f$ = 48
p$ = 56
PyRun_InteractiveLoop PROC				; COMDAT

; 2776 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2777 :     return PyRun_InteractiveLoopFlags(f, p, NULL);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  0001b	e8 00 00 00 00	 call	 PyRun_InteractiveLoopFlags

; 2778 : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
PyRun_InteractiveLoop ENDP
_TEXT	ENDS
END
