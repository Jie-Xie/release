; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04IFNPAAGM@_csv?$AA@			; `string'
PUBLIC	??_C@_0BB@BNOLCBNI@field_size_limit?$AA@	; `string'
PUBLIC	??_C@_0M@HDPFACFG@get_dialect?$AA@		; `string'
PUBLIC	??_C@_0BD@BDAIJALH@unregister_dialect?$AA@	; `string'
PUBLIC	??_C@_0BB@LIENFODA@register_dialect?$AA@	; `string'
PUBLIC	??_C@_0O@OHENEOBL@list_dialects?$AA@		; `string'
PUBLIC	??_C@_06CONMFCKG@writer?$AA@			; `string'
PUBLIC	??_C@_06CFOFDHM@reader?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_0M@DNIHIKFD@_csv?4writer?$AA@		; `string'
PUBLIC	??_C@_09OMPEDDGA@writerows?$AA@			; `string'
PUBLIC	??_C@_08FOMNGGEH@writerow?$AA@			; `string'
PUBLIC	??_C@_0M@BBAFILIJ@_csv?4reader?$AA@		; `string'
PUBLIC	??_C@_08MGGOMFL@line_num?$AA@			; `string'
PUBLIC	??_C@_0N@HGLADAPF@_csv?4Dialect?$AA@		; `string'
PUBLIC	??_C@_07ECACAPOI@dialect?$AA@			; `string'
PUBLIC	??_C@_07JPFMBGFH@quoting?$AA@			; `string'
PUBLIC	??_C@_09ICADEPGB@quotechar?$AA@			; `string'
PUBLIC	??_C@_0P@JHFLIELP@lineterminator?$AA@		; `string'
PUBLIC	??_C@_0L@BBGHHBGG@escapechar?$AA@		; `string'
PUBLIC	??_C@_09NMOHGHGG@delimiter?$AA@			; `string'
PUBLIC	??_C@_06OLFOGHEN@strict?$AA@			; `string'
PUBLIC	??_C@_0M@IJBGDELB@doublequote?$AA@		; `string'
PUBLIC	??_C@_0BB@CFMLGKKP@skipinitialspace?$AA@	; `string'
PUBLIC	??_C@_0L@JKGHGFCE@QUOTE_NONE?$AA@		; `string'
PUBLIC	??_C@_0BB@FBNDDEOM@QUOTE_NONNUMERIC?$AA@	; `string'
PUBLIC	??_C@_09LGHDOLBD@QUOTE_ALL?$AA@			; `string'
PUBLIC	??_C@_0O@JIFNDNHJ@QUOTE_MINIMAL?$AA@		; `string'
EXTRN	PyObject_SelfIter:PROC
_BSS	SEGMENT
Reader_methods DB 020H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_04IFNPAAGM@_csv?$AA@
CONST	SEGMENT
??_C@_04IFNPAAGM@_csv?$AA@ DB '_csv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BNOLCBNI@field_size_limit?$AA@
CONST	SEGMENT
??_C@_0BB@BNOLCBNI@field_size_limit?$AA@ DB 'field_size_limit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HDPFACFG@get_dialect?$AA@
CONST	SEGMENT
??_C@_0M@HDPFACFG@get_dialect?$AA@ DB 'get_dialect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BDAIJALH@unregister_dialect?$AA@
CONST	SEGMENT
??_C@_0BD@BDAIJALH@unregister_dialect?$AA@ DB 'unregister_dialect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LIENFODA@register_dialect?$AA@
CONST	SEGMENT
??_C@_0BB@LIENFODA@register_dialect?$AA@ DB 'register_dialect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OHENEOBL@list_dialects?$AA@
CONST	SEGMENT
??_C@_0O@OHENEOBL@list_dialects?$AA@ DB 'list_dialects', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CONMFCKG@writer?$AA@
CONST	SEGMENT
??_C@_06CONMFCKG@writer?$AA@ DB 'writer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CFOFDHM@reader?$AA@
CONST	SEGMENT
??_C@_06CFOFDHM@reader?$AA@ DB 'reader', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_write@?1??csv_writer@@9@9 DQ 0000000000000000H	; `csv_writer'::`2'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DNIHIKFD@_csv?4writer?$AA@
CONST	SEGMENT
??_C@_0M@DNIHIKFD@_csv?4writer?$AA@ DB '_csv.writer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OMPEDDGA@writerows?$AA@
CONST	SEGMENT
??_C@_09OMPEDDGA@writerows?$AA@ DB 'writerows', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FOMNGGEH@writerow?$AA@
CONST	SEGMENT
??_C@_08FOMNGGEH@writerow?$AA@ DB 'writerow', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BBAFILIJ@_csv?4reader?$AA@
CONST	SEGMENT
??_C@_0M@BBAFILIJ@_csv?4reader?$AA@ DB '_csv.reader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MGGOMFL@line_num?$AA@
CONST	SEGMENT
??_C@_08MGGOMFL@line_num?$AA@ DB 'line_num', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HGLADAPF@_csv?4Dialect?$AA@
CONST	SEGMENT
??_C@_0N@HGLADAPF@_csv?4Dialect?$AA@ DB '_csv.Dialect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07ECACAPOI@dialect?$AA@
CONST	SEGMENT
??_C@_07ECACAPOI@dialect?$AA@ DB 'dialect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JPFMBGFH@quoting?$AA@
CONST	SEGMENT
??_C@_07JPFMBGFH@quoting?$AA@ DB 'quoting', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09ICADEPGB@quotechar?$AA@
CONST	SEGMENT
??_C@_09ICADEPGB@quotechar?$AA@ DB 'quotechar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JHFLIELP@lineterminator?$AA@
CONST	SEGMENT
??_C@_0P@JHFLIELP@lineterminator?$AA@ DB 'lineterminator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BBGHHBGG@escapechar?$AA@
CONST	SEGMENT
??_C@_0L@BBGHHBGG@escapechar?$AA@ DB 'escapechar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NMOHGHGG@delimiter?$AA@
CONST	SEGMENT
??_C@_09NMOHGHGG@delimiter?$AA@ DB 'delimiter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLFOGHEN@strict?$AA@
CONST	SEGMENT
??_C@_06OLFOGHEN@strict?$AA@ DB 'strict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IJBGDELB@doublequote?$AA@
CONST	SEGMENT
??_C@_0M@IJBGDELB@doublequote?$AA@ DB 'doublequote', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CFMLGKKP@skipinitialspace?$AA@
CONST	SEGMENT
??_C@_0BB@CFMLGKKP@skipinitialspace?$AA@ DB 'skipinitialspace', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
quote_styles DD	00H
	ORG $+4
	DQ	FLAT:??_C@_0O@JIFNDNHJ@QUOTE_MINIMAL?$AA@
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_09LGHDOLBD@QUOTE_ALL?$AA@
	DD	02H
	ORG $+4
	DQ	FLAT:??_C@_0BB@FBNDDEOM@QUOTE_NONNUMERIC?$AA@
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0L@JKGHGFCE@QUOTE_NONE?$AA@
	DD	00H
	ORG $+4
	ORG $+8
Dialect_memberlist DQ FLAT:??_C@_0BB@CFMLGKKP@skipinitialspace?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@IJBGDELB@doublequote?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06OLFOGHEN@strict?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000084H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
Dialect_getsetlist DQ FLAT:??_C@_09NMOHGHGG@delimiter?$AA@
	DQ	FLAT:Dialect_get_delimiter
	ORG $+24
	DQ	FLAT:??_C@_0L@BBGHHBGG@escapechar?$AA@
	DQ	FLAT:Dialect_get_escapechar
	ORG $+24
	DQ	FLAT:??_C@_0P@JHFLIELP@lineterminator?$AA@
	DQ	FLAT:Dialect_get_lineterminator
	ORG $+24
	DQ	FLAT:??_C@_09ICADEPGB@quotechar?$AA@
	DQ	FLAT:Dialect_get_quotechar
	ORG $+24
	DQ	FLAT:??_C@_07JPFMBGFH@quoting?$AA@
	DQ	FLAT:Dialect_get_quoting
	ORG $+24
	DQ	0000000000000000H
	ORG $+32
dialect_kws DQ	FLAT:??_C@_07ECACAPOI@dialect?$AA@
	DQ	FLAT:??_C@_09NMOHGHGG@delimiter?$AA@
	DQ	FLAT:??_C@_0M@IJBGDELB@doublequote?$AA@
	DQ	FLAT:??_C@_0L@BBGHHBGG@escapechar?$AA@
	DQ	FLAT:??_C@_0P@JHFLIELP@lineterminator?$AA@
	DQ	FLAT:??_C@_09ICADEPGB@quotechar?$AA@
	DQ	FLAT:??_C@_07JPFMBGFH@quoting?$AA@
	DQ	FLAT:??_C@_0BB@CFMLGKKP@skipinitialspace?$AA@
	DQ	FLAT:??_C@_06OLFOGHEN@strict?$AA@
	DQ	0000000000000000H
Dialect_Type_doc DB 'CSV dialect', 0aH, 0aH, 'The Dialect type records CS'
	DB	'V parsing and generation options.', 0aH, 00H
	ORG $+5
Dialect_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@HGLADAPF@_csv?4Dialect?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:Dialect_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	FLAT:Dialect_Type_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:Dialect_memberlist
	DQ	FLAT:Dialect_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:dialect_new
	DQ	0000000000000000H
	ORG $+64
Reader_Type_doc DB 'CSV reader', 0aH, 0aH, 'Reader objects are responsibl'
	DB	'e for reading and parsing tabular data', 0aH, 'in CSV format.'
	DB	0aH, 00H
Reader_memberlist DQ FLAT:??_C@_07ECACAPOI@dialect?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08MGGOMFL@line_num?$AA@
	DD	0cH
	ORG $+4
	DQ	000000000000009cH
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
Reader_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0M@BBAFILIJ@_csv?4reader?$AA@
	DQ	00000000000000a0H
	DQ	0000000000000000H
	DQ	FLAT:Reader_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:Reader_Type_doc
	DQ	FLAT:Reader_traverse
	DQ	FLAT:Reader_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:Reader_iternext
	DQ	FLAT:Reader_methods
	DQ	FLAT:Reader_memberlist
	DQ	0000000000000000H
	ORG $+136
csv_writerow_doc DB 'writerow(sequence)', 0aH, 0aH, 'Construct and write '
	DB	'a CSV record from a sequence of fields.  Non-string', 0aH, 'e'
	DB	'lements will be converted to string.', 00H
	ORG $+14
csv_writerows_doc DB 'writerows(sequence of sequences)', 0aH, 0aH, 'Const'
	DB	'ruct and write a series of sequences to a csv file.  Non-stri'
	DB	'ng', 0aH, 'elements will be converted to string.', 00H
	ORG $+3
Writer_methods DQ FLAT:??_C@_08FOMNGGEH@writerow?$AA@
	DQ	FLAT:csv_writerow
	DD	08H
	ORG $+4
	DQ	FLAT:csv_writerow_doc
	DQ	FLAT:??_C@_09OMPEDDGA@writerows?$AA@
	DQ	FLAT:csv_writerows
	DD	08H
	ORG $+4
	DQ	FLAT:csv_writerows_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
Writer_memberlist DQ FLAT:??_C@_07ECACAPOI@dialect?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
Writer_Type_doc DB 'CSV writer', 0aH, 0aH, 'Writer objects are responsibl'
	DB	'e for generating tabular data', 0aH, 'in CSV format from sequ'
	DB	'ence input.', 0aH, 00H
	ORG $+5
Writer_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0M@DNIHIKFD@_csv?4writer?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:Writer_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:Writer_Type_doc
	DQ	FLAT:Writer_traverse
	DQ	FLAT:Writer_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:Writer_methods
	DQ	FLAT:Writer_memberlist
	DQ	0000000000000000H
	ORG $+136
csv_module_doc DB 'CSV parsing and writing.', 0aH, 0aH, 'This module prov'
	DB	'ides classes that assist in the reading and writing', 0aH, 'o'
	DB	'f Comma Separated Value (CSV) files, and implements the inter'
	DB	'face', 0aH, 'described by PEP 305.  Although many CSV files a'
	DB	're simple to parse,', 0aH, 'the format is not formally define'
	DB	'd by a stable specification and', 0aH, 'is subtle enough that'
	DB	' parsing lines of a CSV file with something', 0aH, 'like line'
	DB	'.split(",") is bound to fail.  The module supports three', 0aH
	DB	'basic APIs: reading, writing, and registration of dialects.', 0aH
	DB	0aH, 0aH, 'DIALECT REGISTRATION:', 0aH, 0aH, 'Readers and writ'
	DB	'ers support a dialect argument, which is a convenient', 0aH, 'h'
	DB	'andle on a group of settings.  When the dialect argument is a'
	DB	' string,', 0aH, 'it identifies one of the dialects previously'
	DB	' registered with the module.', 0aH, 'If it is a class or inst'
	DB	'ance, the attributes of the argument are used as', 0aH, 'the '
	DB	'settings for the reader or writer:', 0aH, 0aH, '    class exc'
	DB	'el:', 0aH, '        delimiter = '',''', 0aH, '        quotech'
	DB	'ar = ''"''', 0aH, '        escapechar = None', 0aH, '        '
	DB	'doublequote = True', 0aH, '        skipinitialspace = False', 0aH
	DB	'        lineterminator = ''\r\n''', 0aH, '        quoting = Q'
	DB	'UOTE_MINIMAL', 0aH, 0aH, 'SETTINGS:', 0aH, 0aH, '    * quotec'
	DB	'har - specifies a one-character string to use as the ', 0aH, ' '
	DB	'       quoting character.  It defaults to ''"''.', 0aH, '    '
	DB	'* delimiter - specifies a one-character string to use as the '
	DB	0aH, '        field separator.  It defaults to '',''.', 0aH, ' '
	DB	'   * skipinitialspace - specifies how to interpret whitespace'
	DB	' which', 0aH, '        immediately follows a delimiter.  It d'
	DB	'efaults to False, which', 0aH, '        means that whitespace'
	DB	' immediately following a delimiter is part', 0aH, '        of'
	DB	' the following field.', 0aH, '    * lineterminator -  specifi'
	DB	'es the character sequence which should ', 0aH, '        termi'
	DB	'nate rows.', 0aH, '    * quoting - controls when quotes shoul'
	DB	'd be generated by the writer.', 0aH, '        It can take on '
	DB	'any of the following module constants:', 0aH, 0aH, '        c'
	DB	'sv.QUOTE_MINIMAL means only when required, for example, when '
	DB	'a', 0aH, '            field contains either the quotechar or '
	DB	'the delimiter', 0aH, '        csv.QUOTE_ALL means that quotes'
	DB	' are always placed around fields.', 0aH, '        csv.QUOTE_N'
	DB	'ONNUMERIC means that quotes are always placed around', 0aH, ' '
	DB	'           fields which do not parse as integers or floating '
	DB	'point', 0aH, '            numbers.', 0aH, '        csv.QUOTE_'
	DB	'NONE means that quotes are never placed around fields.', 0aH, ' '
	DB	'   * escapechar - specifies a one-character string used to es'
	DB	'cape ', 0aH, '        the delimiter when quoting is set to QU'
	DB	'OTE_NONE.', 0aH, '    * doublequote - controls the handling o'
	DB	'f quotes inside fields.  When', 0aH, '        True, two conse'
	DB	'cutive quotes are interpreted as one during read,', 0aH, '   '
	DB	'     and when writing, each quote character embedded in the d'
	DB	'ata is', 0aH, '        written as two quotes', 0aH, 00H
	ORG $+12
csv_reader_doc DB '    csv_reader = reader(iterable [, dialect=''excel'']'
	DB	0aH, '                        [optional keyword args])', 0aH, ' '
	DB	'   for row in csv_reader:', 0aH, '        process(row)', 0aH, 0aH
	DB	'The "iterable" argument can be any object that returns a line'
	DB	0aH, 'of input for each iteration, such as a file object or a '
	DB	'list.  The', 0aH, 'optional "dialect" parameter is discussed '
	DB	'below.  The function', 0aH, 'also accepts optional keyword ar'
	DB	'guments which override settings', 0aH, 'provided by the diale'
	DB	'ct.', 0aH, 0aH, 'The returned object is an iterator.  Each it'
	DB	'eration returns a row', 0aH, 'of the CSV file (which can span'
	DB	' multiple input lines):', 0aH, 00H
	ORG $+5
csv_writer_doc DB '    csv_writer = csv.writer(fileobj [, dialect=''excel'
	DB	''']', 0aH, '                            [optional keyword arg'
	DB	's])', 0aH, '    for row in sequence:', 0aH, '        csv_writ'
	DB	'er.writerow(row)', 0aH, 0aH, '    [or]', 0aH, 0aH, '    csv_w'
	DB	'riter = csv.writer(fileobj [, dialect=''excel'']', 0aH, '    '
	DB	'                        [optional keyword args])', 0aH, '    '
	DB	'csv_writer.writerows(rows)', 0aH, 0aH, 'The "fileobj" argumen'
	DB	't can be any object that supports the file API.', 0aH, 00H
	ORG $+11
csv_list_dialects_doc DB 'Return a list of all know dialect names.', 0aH, ' '
	DB	'   names = csv.list_dialects()', 00H
	ORG $+7
csv_get_dialect_doc DB 'Return the dialect instance associated with name.'
	DB	0aH, '    dialect = csv.get_dialect(name)', 00H
	ORG $+10
csv_register_dialect_doc DB 'Create a mapping from a string name to a dia'
	DB	'lect class.', 0aH, '    dialect = csv.register_dialect(name, '
	DB	'dialect)', 00H
	ORG $+6
csv_unregister_dialect_doc DB 'Delete the name/dialect mapping associated'
	DB	' with a string name.', 0aH, '    csv.unregister_dialect(name)'
	DB	00H
csv_field_size_limit_doc DB 'Sets an upper limit on parsed fields.', 0aH, ' '
	DB	'   csv.field_size_limit([limit])', 0aH, 0aH, 'Returns old lim'
	DB	'it. If limit is not given, no new limit is set and', 0aH, 'th'
	DB	'e old limit is returned', 00H
	ORG $+11
csv_methods DQ	FLAT:??_C@_06CFOFDHM@reader?$AA@
	DQ	FLAT:csv_reader
	DD	03H
	ORG $+4
	DQ	FLAT:csv_reader_doc
	DQ	FLAT:??_C@_06CONMFCKG@writer?$AA@
	DQ	FLAT:csv_writer
	DD	03H
	ORG $+4
	DQ	FLAT:csv_writer_doc
	DQ	FLAT:??_C@_0O@OHENEOBL@list_dialects?$AA@
	DQ	FLAT:csv_list_dialects
	DD	04H
	ORG $+4
	DQ	FLAT:csv_list_dialects_doc
	DQ	FLAT:??_C@_0BB@LIENFODA@register_dialect?$AA@
	DQ	FLAT:csv_register_dialect
	DD	03H
	ORG $+4
	DQ	FLAT:csv_register_dialect_doc
	DQ	FLAT:??_C@_0BD@BDAIJALH@unregister_dialect?$AA@
	DQ	FLAT:csv_unregister_dialect
	DD	08H
	ORG $+4
	DQ	FLAT:csv_unregister_dialect_doc
	DQ	FLAT:??_C@_0M@HDPFACFG@get_dialect?$AA@
	DQ	FLAT:csv_get_dialect
	DD	08H
	ORG $+4
	DQ	FLAT:csv_get_dialect_doc
	DQ	FLAT:??_C@_0BB@BNOLCBNI@field_size_limit?$AA@
	DQ	FLAT:csv_field_size_limit
	DD	01H
	ORG $+4
	DQ	FLAT:csv_field_size_limit_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_csvmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04IFNPAAGM@_csv?$AA@
	DQ	FLAT:csv_module_doc
	DQ	0000000000000018H
	DQ	FLAT:csv_methods
	DQ	0000000000000000H
	DQ	FLAT:_csv_traverse
	DQ	FLAT:_csv_clear
	DQ	FLAT:_csv_free
_DATA	ENDS
;	COMDAT ??_C@_0L@JKGHGFCE@QUOTE_NONE?$AA@
CONST	SEGMENT
??_C@_0L@JKGHGFCE@QUOTE_NONE?$AA@ DB 'QUOTE_NONE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FBNDDEOM@QUOTE_NONNUMERIC?$AA@
CONST	SEGMENT
??_C@_0BB@FBNDDEOM@QUOTE_NONNUMERIC?$AA@ DB 'QUOTE_NONNUMERIC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGHDOLBD@QUOTE_ALL?$AA@
CONST	SEGMENT
??_C@_09LGHDOLBD@QUOTE_ALL?$AA@ DB 'QUOTE_ALL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JIFNDNHJ@QUOTE_MINIMAL?$AA@
CONST	SEGMENT
??_C@_0O@JIFNDNHJ@QUOTE_MINIMAL?$AA@ DB 'QUOTE_MINIMAL', 00H ; `string'
CONST	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0L@LJCEHMDB@_csv_clear?$AA@		; `string'
PUBLIC	??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@	; `string'
EXTRN	_PyParallel_Guard:PROC
EXTRN	PyModule_GetState:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_csv.c
pdata	SEGMENT
$pdata$_csv_clear DD imagerel _csv_clear
	DD	imagerel _csv_clear+254
	DD	imagerel $unwind$_csv_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_csv_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@LJCEHMDB@_csv_clear?$AA@
CONST	SEGMENT
??_C@_0L@LJCEHMDB@_csv_clear?$AA@ DB '_csv_clear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
CONST	SEGMENT
??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@ DB '..\Modules\_csv.c', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _csv_clear
_TEXT	SEGMENT
_py_tmp$20345 = 48
_py_tmp$20357 = 56
m$ = 80
_csv_clear PROC						; COMDAT

; 27   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN8@csv_clear:

; 28   :     Py_CLEAR(_csvstate(m)->error_obj);

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  0000e	e8 00 00 00 00	 call	 PyModule_GetState
  00013	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00017	74 5f		 je	 SHORT $LN5@csv_clear
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  0001e	e8 00 00 00 00	 call	 PyModule_GetState
  00023	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002b	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  0002e	41 b8 1c 00 00
	00		 mov	 r8d, 28
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LJCEHMDB@_csv_clear?$AA@
  00042	e8 00 00 00 00	 call	 _PyParallel_Guard
  00047	85 c0		 test	 eax, eax
  00049	75 2d		 jne	 SHORT $LN5@csv_clear
  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  00050	e8 00 00 00 00	 call	 PyModule_GetState
  00055	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00058	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20345[rsp], rax
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  00062	e8 00 00 00 00	 call	 PyModule_GetState
  00067	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0006e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20345[rsp]
  00073	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@csv_clear:
  00078	33 c0		 xor	 eax, eax
  0007a	85 c0		 test	 eax, eax
  0007c	75 8b		 jne	 SHORT $LN8@csv_clear
$LN4@csv_clear:

; 29   :     Py_CLEAR(_csvstate(m)->dialects);

  0007e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  00083	e8 00 00 00 00	 call	 PyModule_GetState
  00088	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0008d	74 62		 je	 SHORT $LN1@csv_clear
  0008f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  00094	e8 00 00 00 00	 call	 PyModule_GetState
  00099	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a1	4c 8b 48 08	 mov	 r9, QWORD PTR [rax+8]
  000a5	41 b8 1d 00 00
	00		 mov	 r8d, 29
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LJCEHMDB@_csv_clear?$AA@
  000b9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000be	85 c0		 test	 eax, eax
  000c0	75 2f		 jne	 SHORT $LN1@csv_clear
  000c2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  000c7	e8 00 00 00 00	 call	 PyModule_GetState
  000cc	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000d0	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20357[rsp], rax
  000d5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  000da	e8 00 00 00 00	 call	 PyModule_GetState
  000df	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  000e7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20357[rsp]
  000ec	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@csv_clear:
  000f1	33 c0		 xor	 eax, eax
  000f3	85 c0		 test	 eax, eax
  000f5	75 87		 jne	 SHORT $LN4@csv_clear

; 30   :     return 0;

  000f7	33 c0		 xor	 eax, eax

; 31   : }

  000f9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000fd	c3		 ret	 0
_csv_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@IMOHCNMK@_csv_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_csv.c
pdata	SEGMENT
$pdata$_csv_traverse DD imagerel _csv_traverse
	DD	imagerel _csv_traverse+224
	DD	imagerel $unwind$_csv_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_csv_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0O@IMOHCNMK@_csv_traverse?$AA@
CONST	SEGMENT
??_C@_0O@IMOHCNMK@_csv_traverse?$AA@ DB '_csv_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _csv_traverse
_TEXT	SEGMENT
vret$20378 = 32
vret$20388 = 36
m$ = 64
visit$ = 72
arg$ = 80
_csv_traverse PROC					; COMDAT

; 35   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@csv_traver:

; 36   :     Py_VISIT(_csvstate(m)->error_obj);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@csv_traver
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 24 00 00
	00		 mov	 r8d, 36			; 00000024H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IMOHCNMK@_csv_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@csv_traver:
  00038	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0003d	e8 00 00 00 00	 call	 PyModule_GetState
  00042	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00046	74 27		 je	 SHORT $LN8@csv_traver
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0004d	e8 00 00 00 00	 call	 PyModule_GetState
  00052	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00057	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0005a	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  0005e	89 44 24 20	 mov	 DWORD PTR vret$20378[rsp], eax
  00062	83 7c 24 20 00	 cmp	 DWORD PTR vret$20378[rsp], 0
  00067	74 06		 je	 SHORT $LN7@csv_traver
  00069	8b 44 24 20	 mov	 eax, DWORD PTR vret$20378[rsp]
  0006d	eb 6c		 jmp	 SHORT $LN13@csv_traver
$LN7@csv_traver:
$LN8@csv_traver:
  0006f	33 c0		 xor	 eax, eax
  00071	85 c0		 test	 eax, eax
  00073	75 9e		 jne	 SHORT $LN12@csv_traver
$LN6@csv_traver:

; 37   :     Py_VISIT(_csvstate(m)->dialects);

  00075	e8 00 00 00 00	 call	 _Py_PXCTX
  0007a	85 c0		 test	 eax, eax
  0007c	74 1c		 je	 SHORT $LN3@csv_traver
  0007e	45 33 c9	 xor	 r9d, r9d
  00081	41 b8 25 00 00
	00		 mov	 r8d, 37			; 00000025H
  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IMOHCNMK@_csv_traverse?$AA@
  00095	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@csv_traver:
  0009a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0009f	e8 00 00 00 00	 call	 PyModule_GetState
  000a4	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000a9	74 28		 je	 SHORT $LN2@csv_traver
  000ab	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  000b0	e8 00 00 00 00	 call	 PyModule_GetState
  000b5	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000ba	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000be	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000c2	89 44 24 24	 mov	 DWORD PTR vret$20388[rsp], eax
  000c6	83 7c 24 24 00	 cmp	 DWORD PTR vret$20388[rsp], 0
  000cb	74 06		 je	 SHORT $LN1@csv_traver
  000cd	8b 44 24 24	 mov	 eax, DWORD PTR vret$20388[rsp]
  000d1	eb 08		 jmp	 SHORT $LN13@csv_traver
$LN1@csv_traver:
$LN2@csv_traver:
  000d3	33 c0		 xor	 eax, eax
  000d5	85 c0		 test	 eax, eax
  000d7	75 9c		 jne	 SHORT $LN6@csv_traver

; 38   :     return 0;

  000d9	33 c0		 xor	 eax, eax
$LN13@csv_traver:

; 39   : }

  000db	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000df	c3		 ret	 0
_csv_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_csv_free DD imagerel _csv_free
	DD	imagerel _csv_free+24
	DD	imagerel $unwind$_csv_free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_csv_free DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _csv_free
_TEXT	SEGMENT
m$ = 48
_csv_free PROC						; COMDAT

; 43   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 44   :    _csv_clear((PyObject *)m);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR m$[rsp]
  0000e	e8 00 00 00 00	 call	 _csv_clear

; 45   : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
_csv_free ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Dialect_get_lineterminator DD imagerel Dialect_get_lineterminator
	DD	imagerel Dialect_get_lineterminator+28
	DD	imagerel $unwind$Dialect_get_lineterminator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Dialect_get_lineterminator DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Dialect_get_lineterminator
_TEXT	SEGMENT
self$ = 48
Dialect_get_lineterminator PROC				; COMDAT

; 164  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 165  :     return get_string(self->lineterminator);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00012	e8 00 00 00 00	 call	 get_string

; 166  : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
Dialect_get_lineterminator ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_string DD imagerel get_string
	DD	imagerel get_string+43
	DD	imagerel $unwind$get_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_string DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT get_string
_TEXT	SEGMENT
str$ = 48
get_string PROC						; COMDAT

; 146  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@get_string:

; 147  :     Py_XINCREF(str);

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR str$[rsp], 0
  0000f	74 0a		 je	 SHORT $LN1@get_string
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR str$[rsp]
  00016	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@get_string:
  0001b	33 c0		 xor	 eax, eax
  0001d	85 c0		 test	 eax, eax
  0001f	75 e8		 jne	 SHORT $LN4@get_string

; 148  :     return str;

  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]

; 149  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
get_string ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\_csv.c
pdata	SEGMENT
$pdata$Dialect_get_delimiter DD imagerel Dialect_get_delimiter
	DD	imagerel Dialect_get_delimiter+27
	DD	imagerel $unwind$Dialect_get_delimiter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Dialect_get_delimiter DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Dialect_get_delimiter
_TEXT	SEGMENT
self$ = 48
Dialect_get_delimiter PROC				; COMDAT

; 170  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 171  :     return get_nullchar_as_None(self->delimiter);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	8b 48 64	 mov	 ecx, DWORD PTR [rax+100]
  00011	e8 00 00 00 00	 call	 get_nullchar_as_None

; 172  : }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
Dialect_get_delimiter ENDP
_TEXT	ENDS
EXTRN	PyUnicode_FromOrdinal:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_nullchar_as_None DD imagerel get_nullchar_as_None
	DD	imagerel get_nullchar_as_None+52
	DD	imagerel $unwind$get_nullchar_as_None
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_nullchar_as_None DD 010801H
	DD	04208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT get_nullchar_as_None
_TEXT	SEGMENT
c$ = 48
get_nullchar_as_None PROC				; COMDAT

; 153  : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 154  :     if (c == '\0') {

  00008	83 7c 24 30 00	 cmp	 DWORD PTR c$[rsp], 0
  0000d	75 17		 jne	 SHORT $LN2@get_nullch

; 155  :         Py_INCREF(Py_None);

  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00016	e8 00 00 00 00	 call	 _Py_IncRef

; 156  :         return Py_None;

  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00022	eb 0b		 jmp	 SHORT $LN3@get_nullch

; 157  :     }
; 158  :     else

  00024	eb 09		 jmp	 SHORT $LN1@get_nullch
$LN2@get_nullch:

; 159  :         return PyUnicode_FromOrdinal(c);

  00026	8b 4c 24 30	 mov	 ecx, DWORD PTR c$[rsp]
  0002a	e8 00 00 00 00	 call	 PyUnicode_FromOrdinal
$LN1@get_nullch:
$LN3@get_nullch:

; 160  : }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
get_nullchar_as_None ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Dialect_get_escapechar DD imagerel Dialect_get_escapechar
	DD	imagerel Dialect_get_escapechar+27
	DD	imagerel $unwind$Dialect_get_escapechar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Dialect_get_escapechar DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Dialect_get_escapechar
_TEXT	SEGMENT
self$ = 48
Dialect_get_escapechar PROC				; COMDAT

; 176  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 177  :     return get_nullchar_as_None(self->escapechar);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	8b 48 6c	 mov	 ecx, DWORD PTR [rax+108]
  00011	e8 00 00 00 00	 call	 get_nullchar_as_None

; 178  : }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
Dialect_get_escapechar ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Dialect_get_quotechar DD imagerel Dialect_get_quotechar
	DD	imagerel Dialect_get_quotechar+27
	DD	imagerel $unwind$Dialect_get_quotechar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Dialect_get_quotechar DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Dialect_get_quotechar
_TEXT	SEGMENT
self$ = 48
Dialect_get_quotechar PROC				; COMDAT

; 182  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 183  :     return get_nullchar_as_None(self->quotechar);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	8b 48 68	 mov	 ecx, DWORD PTR [rax+104]
  00011	e8 00 00 00 00	 call	 get_nullchar_as_None

; 184  : }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
Dialect_get_quotechar ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Dialect_get_quoting DD imagerel Dialect_get_quoting
	DD	imagerel Dialect_get_quoting+30
	DD	imagerel $unwind$Dialect_get_quoting
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Dialect_get_quoting DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Dialect_get_quoting
_TEXT	SEGMENT
self$ = 48
Dialect_get_quoting PROC				; COMDAT

; 188  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 189  :     return PyLong_FromLong(self->quoting);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [rax+128]
  00014	e8 00 00 00 00	 call	 PyLong_FromLong

; 190  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
Dialect_get_quoting ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Dialect_dealloc DD imagerel Dialect_dealloc
	DD	imagerel Dialect_dealloc+66
	DD	imagerel $unwind$Dialect_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Dialect_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Dialect_dealloc
_TEXT	SEGMENT
self$ = 48
Dialect_dealloc PROC					; COMDAT

; 320  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@Dialect_de:

; 321  :     Py_XDECREF(self->lineterminator);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00013	74 0e		 je	 SHORT $LN1@Dialect_de
  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001a	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0001e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@Dialect_de:
  00023	33 c0		 xor	 eax, eax
  00025	85 c0		 test	 eax, eax
  00027	75 e0		 jne	 SHORT $LN4@Dialect_de

; 322  :     Py_TYPE(self)->tp_free((PyObject *)self);

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0002e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00037	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 323  : }

  0003d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00041	c3		 ret	 0
Dialect_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@BEOHJCBM@lineterminator?5must?5be?5set?$AA@ ; `string'
PUBLIC	??_C@_0CJ@MDIOJFDM@quotechar?5must?5be?5set?5if?5quoting@ ; `string'
PUBLIC	??_C@_0CK@KMDCNNH@?$CCdelimiter?$CC?5must?5be?5an?51?9charact@ ; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6?$AA@			; `string'
PUBLIC	??_C@_0L@KHNJGNHA@?$HMOOOOOOOOO?$AA@		; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyErr_Clear:PROC
EXTRN	PyObject_GetAttrString:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dialect_new DD imagerel dialect_new
	DD	imagerel dialect_new+2097
	DD	imagerel $unwind$dialect_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dialect_new DD 021601H
	DD	01b0116H
xdata	ENDS
;	COMDAT ??_C@_0BL@BEOHJCBM@lineterminator?5must?5be?5set?$AA@
CONST	SEGMENT
??_C@_0BL@BEOHJCBM@lineterminator?5must?5be?5set?$AA@ DB 'lineterminator '
	DB	'must be set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MDIOJFDM@quotechar?5must?5be?5set?5if?5quoting@
CONST	SEGMENT
??_C@_0CJ@MDIOJFDM@quotechar?5must?5be?5set?5if?5quoting@ DB 'quotechar m'
	DB	'ust be set if quoting enabled', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KMDCNNH@?$CCdelimiter?$CC?5must?5be?5an?51?9charact@
CONST	SEGMENT
??_C@_0CK@KMDCNNH@?$CCdelimiter?$CC?5must?5be?5an?51?9charact@ DB '"delim'
	DB	'iter" must be an 1-character string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6?$AA@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KHNJGNHA@?$HMOOOOOOOOO?$AA@
CONST	SEGMENT
??_C@_0L@KHNJGNHA@?$HMOOOOOOOOO?$AA@ DB '|OOOOOOOOO', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dialect_new
_TEXT	SEGMENT
escapechar$ = 112
delimiter$ = 120
strict$ = 128
self$ = 136
skipinitialspace$ = 144
quoting$ = 152
ret$ = 160
dialect$ = 168
lineterminator$ = 176
doublequote$ = 184
quotechar$ = 192
type$ = 224
args$ = 232
kwargs$ = 240
dialect_new PROC					; COMDAT

; 340  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 341  :     DialectObj *self;
; 342  :     PyObject *ret = NULL;

  00016	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR ret$[rsp], 0

; 343  :     PyObject *dialect = NULL;

  00022	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR dialect$[rsp], 0

; 344  :     PyObject *delimiter = NULL;

  0002e	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR delimiter$[rsp], 0

; 345  :     PyObject *doublequote = NULL;

  00037	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR doublequote$[rsp], 0

; 346  :     PyObject *escapechar = NULL;

  00043	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR escapechar$[rsp], 0

; 347  :     PyObject *lineterminator = NULL;

  0004c	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR lineterminator$[rsp], 0

; 348  :     PyObject *quotechar = NULL;

  00058	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR quotechar$[rsp], 0

; 349  :     PyObject *quoting = NULL;

  00064	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR quoting$[rsp], 0

; 350  :     PyObject *skipinitialspace = NULL;

  00070	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR skipinitialspace$[rsp], 0

; 351  :     PyObject *strict = NULL;

  0007c	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR strict$[rsp], 0

; 352  : 
; 353  :     if (!PyArg_ParseTupleAndKeywords(args, kwargs,
; 354  :                                      "|OOOOOOOOO", dialect_kws,
; 355  :                                      &dialect,
; 356  :                                      &delimiter,
; 357  :                                      &doublequote,
; 358  :                                      &escapechar,
; 359  :                                      &lineterminator,
; 360  :                                      &quotechar,
; 361  :                                      &quoting,
; 362  :                                      &skipinitialspace,
; 363  :                                      &strict))

  00088	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR strict$[rsp]
  00090	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  00095	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR skipinitialspace$[rsp]
  0009d	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000a2	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR quoting$[rsp]
  000aa	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000af	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR quotechar$[rsp]
  000b7	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  000bc	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR lineterminator$[rsp]
  000c4	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  000c9	48 8d 44 24 70	 lea	 rax, QWORD PTR escapechar$[rsp]
  000ce	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000d3	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR doublequote$[rsp]
  000db	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000e0	48 8d 44 24 78	 lea	 rax, QWORD PTR delimiter$[rsp]
  000e5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ea	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR dialect$[rsp]
  000f2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:dialect_kws
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@KHNJGNHA@?$HMOOOOOOOOO?$AA@
  00105	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR kwargs$[rsp]
  0010d	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00115	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0011a	85 c0		 test	 eax, eax
  0011c	75 07		 jne	 SHORT $LN106@dialect_ne

; 364  :         return NULL;

  0011e	33 c0		 xor	 eax, eax
  00120	e9 04 07 00 00	 jmp	 $LN107@dialect_ne
$LN106@dialect_ne:

; 365  : 
; 366  :     if (dialect != NULL) {

  00125	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dialect$[rsp], 0
  0012e	0f 84 e1 00 00
	00		 je	 $LN105@dialect_ne

; 367  :         if (PyUnicode_Check(dialect)) {

  00134	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dialect$[rsp]
  0013c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00140	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00146	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0014b	85 c0		 test	 eax, eax
  0014d	74 29		 je	 SHORT $LN104@dialect_ne

; 368  :             dialect = get_dialect_from_registry(dialect);

  0014f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  00157	e8 00 00 00 00	 call	 get_dialect_from_registry
  0015c	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR dialect$[rsp], rax

; 369  :             if (dialect == NULL)

  00164	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dialect$[rsp], 0
  0016d	75 07		 jne	 SHORT $LN103@dialect_ne

; 370  :                 return NULL;

  0016f	33 c0		 xor	 eax, eax
  00171	e9 b3 06 00 00	 jmp	 $LN107@dialect_ne
$LN103@dialect_ne:

; 371  :         }
; 372  :         else

  00176	eb 0d		 jmp	 SHORT $LN102@dialect_ne
$LN104@dialect_ne:

; 373  :             Py_INCREF(dialect);

  00178	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  00180	e8 00 00 00 00	 call	 _Py_IncRef
$LN102@dialect_ne:

; 374  :         /* Can we reuse this instance? */
; 375  :         if (PyObject_TypeCheck(dialect, &Dialect_Type) &&
; 376  :             delimiter == 0 &&
; 377  :             doublequote == 0 &&
; 378  :             escapechar == 0 &&
; 379  :             lineterminator == 0 &&
; 380  :             quotechar == 0 &&
; 381  :             quoting == 0 &&
; 382  :             skipinitialspace == 0 &&
; 383  :             strict == 0)

  00185	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Dialect_Type
  0018c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  00194	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00198	74 1c		 je	 SHORT $LN100@dialect_ne
  0019a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:Dialect_Type
  001a1	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dialect$[rsp]
  001a9	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  001ad	e8 00 00 00 00	 call	 PyType_IsSubtype
  001b2	85 c0		 test	 eax, eax
  001b4	74 5f		 je	 SHORT $LN101@dialect_ne
$LN100@dialect_ne:
  001b6	48 83 7c 24 78
	00		 cmp	 QWORD PTR delimiter$[rsp], 0
  001bc	75 57		 jne	 SHORT $LN101@dialect_ne
  001be	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR doublequote$[rsp], 0
  001c7	75 4c		 jne	 SHORT $LN101@dialect_ne
  001c9	48 83 7c 24 70
	00		 cmp	 QWORD PTR escapechar$[rsp], 0
  001cf	75 44		 jne	 SHORT $LN101@dialect_ne
  001d1	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR lineterminator$[rsp], 0
  001da	75 39		 jne	 SHORT $LN101@dialect_ne
  001dc	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR quotechar$[rsp], 0
  001e5	75 2e		 jne	 SHORT $LN101@dialect_ne
  001e7	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR quoting$[rsp], 0
  001f0	75 23		 jne	 SHORT $LN101@dialect_ne
  001f2	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR skipinitialspace$[rsp], 0
  001fb	75 18		 jne	 SHORT $LN101@dialect_ne
  001fd	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR strict$[rsp], 0
  00206	75 0d		 jne	 SHORT $LN101@dialect_ne

; 384  :             return dialect;

  00208	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dialect$[rsp]
  00210	e9 14 06 00 00	 jmp	 $LN107@dialect_ne
$LN101@dialect_ne:
$LN105@dialect_ne:

; 385  :     }
; 386  : 
; 387  :     self = (DialectObj *)type->tp_alloc(type, 0);

  00215	33 d2		 xor	 edx, edx
  00217	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  0021f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00227	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  0022d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR self$[rsp], rax

; 388  :     if (self == NULL) {

  00235	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR self$[rsp], 0
  0023e	75 25		 jne	 SHORT $LN99@dialect_ne
$LN98@dialect_ne:

; 389  :         Py_XDECREF(dialect);

  00240	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dialect$[rsp], 0
  00249	74 0d		 je	 SHORT $LN95@dialect_ne
  0024b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  00253	e8 00 00 00 00	 call	 _Py_DecRef
$LN95@dialect_ne:
  00258	33 c0		 xor	 eax, eax
  0025a	85 c0		 test	 eax, eax
  0025c	75 e2		 jne	 SHORT $LN98@dialect_ne

; 390  :         return NULL;

  0025e	33 c0		 xor	 eax, eax
  00260	e9 c4 05 00 00	 jmp	 $LN107@dialect_ne
$LN99@dialect_ne:

; 391  :     }
; 392  :     self->lineterminator = NULL;

  00265	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0026d	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
$LN94@dialect_ne:

; 393  : 
; 394  :     Py_XINCREF(delimiter);

  00275	48 83 7c 24 78
	00		 cmp	 QWORD PTR delimiter$[rsp], 0
  0027b	74 0a		 je	 SHORT $LN91@dialect_ne
  0027d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR delimiter$[rsp]
  00282	e8 00 00 00 00	 call	 _Py_IncRef
$LN91@dialect_ne:
  00287	33 c0		 xor	 eax, eax
  00289	85 c0		 test	 eax, eax
  0028b	75 e8		 jne	 SHORT $LN94@dialect_ne
$LN90@dialect_ne:

; 395  :     Py_XINCREF(doublequote);

  0028d	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR doublequote$[rsp], 0
  00296	74 0d		 je	 SHORT $LN87@dialect_ne
  00298	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR doublequote$[rsp]
  002a0	e8 00 00 00 00	 call	 _Py_IncRef
$LN87@dialect_ne:
  002a5	33 c0		 xor	 eax, eax
  002a7	85 c0		 test	 eax, eax
  002a9	75 e2		 jne	 SHORT $LN90@dialect_ne
$LN86@dialect_ne:

; 396  :     Py_XINCREF(escapechar);

  002ab	48 83 7c 24 70
	00		 cmp	 QWORD PTR escapechar$[rsp], 0
  002b1	74 0a		 je	 SHORT $LN83@dialect_ne
  002b3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR escapechar$[rsp]
  002b8	e8 00 00 00 00	 call	 _Py_IncRef
$LN83@dialect_ne:
  002bd	33 c0		 xor	 eax, eax
  002bf	85 c0		 test	 eax, eax
  002c1	75 e8		 jne	 SHORT $LN86@dialect_ne
$LN82@dialect_ne:

; 397  :     Py_XINCREF(lineterminator);

  002c3	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR lineterminator$[rsp], 0
  002cc	74 0d		 je	 SHORT $LN79@dialect_ne
  002ce	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR lineterminator$[rsp]
  002d6	e8 00 00 00 00	 call	 _Py_IncRef
$LN79@dialect_ne:
  002db	33 c0		 xor	 eax, eax
  002dd	85 c0		 test	 eax, eax
  002df	75 e2		 jne	 SHORT $LN82@dialect_ne
$LN78@dialect_ne:

; 398  :     Py_XINCREF(quotechar);

  002e1	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR quotechar$[rsp], 0
  002ea	74 0d		 je	 SHORT $LN75@dialect_ne
  002ec	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR quotechar$[rsp]
  002f4	e8 00 00 00 00	 call	 _Py_IncRef
$LN75@dialect_ne:
  002f9	33 c0		 xor	 eax, eax
  002fb	85 c0		 test	 eax, eax
  002fd	75 e2		 jne	 SHORT $LN78@dialect_ne
$LN74@dialect_ne:

; 399  :     Py_XINCREF(quoting);

  002ff	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR quoting$[rsp], 0
  00308	74 0d		 je	 SHORT $LN71@dialect_ne
  0030a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR quoting$[rsp]
  00312	e8 00 00 00 00	 call	 _Py_IncRef
$LN71@dialect_ne:
  00317	33 c0		 xor	 eax, eax
  00319	85 c0		 test	 eax, eax
  0031b	75 e2		 jne	 SHORT $LN74@dialect_ne
$LN70@dialect_ne:

; 400  :     Py_XINCREF(skipinitialspace);

  0031d	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR skipinitialspace$[rsp], 0
  00326	74 0d		 je	 SHORT $LN67@dialect_ne
  00328	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR skipinitialspace$[rsp]
  00330	e8 00 00 00 00	 call	 _Py_IncRef
$LN67@dialect_ne:
  00335	33 c0		 xor	 eax, eax
  00337	85 c0		 test	 eax, eax
  00339	75 e2		 jne	 SHORT $LN70@dialect_ne
$LN66@dialect_ne:

; 401  :     Py_XINCREF(strict);

  0033b	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR strict$[rsp], 0
  00344	74 0d		 je	 SHORT $LN63@dialect_ne
  00346	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR strict$[rsp]
  0034e	e8 00 00 00 00	 call	 _Py_IncRef
$LN63@dialect_ne:
  00353	33 c0		 xor	 eax, eax
  00355	85 c0		 test	 eax, eax
  00357	75 e2		 jne	 SHORT $LN66@dialect_ne

; 402  :     if (dialect != NULL) {

  00359	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dialect$[rsp], 0
  00362	0f 84 31 01 00
	00		 je	 $LN62@dialect_ne

; 403  : #define DIALECT_GETATTR(v, n) \
; 404  :         if (v == NULL) \
; 405  :             v = PyObject_GetAttrString(dialect, n)
; 406  :         DIALECT_GETATTR(delimiter, "delimiter");

  00368	48 83 7c 24 78
	00		 cmp	 QWORD PTR delimiter$[rsp], 0
  0036e	75 19		 jne	 SHORT $LN61@dialect_ne
  00370	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09NMOHGHGG@delimiter?$AA@
  00377	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  0037f	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00384	48 89 44 24 78	 mov	 QWORD PTR delimiter$[rsp], rax
$LN61@dialect_ne:

; 407  :         DIALECT_GETATTR(doublequote, "doublequote");

  00389	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR doublequote$[rsp], 0
  00392	75 1c		 jne	 SHORT $LN60@dialect_ne
  00394	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IJBGDELB@doublequote?$AA@
  0039b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  003a3	e8 00 00 00 00	 call	 PyObject_GetAttrString
  003a8	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR doublequote$[rsp], rax
$LN60@dialect_ne:

; 408  :         DIALECT_GETATTR(escapechar, "escapechar");

  003b0	48 83 7c 24 70
	00		 cmp	 QWORD PTR escapechar$[rsp], 0
  003b6	75 19		 jne	 SHORT $LN59@dialect_ne
  003b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@BBGHHBGG@escapechar?$AA@
  003bf	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  003c7	e8 00 00 00 00	 call	 PyObject_GetAttrString
  003cc	48 89 44 24 70	 mov	 QWORD PTR escapechar$[rsp], rax
$LN59@dialect_ne:

; 409  :         DIALECT_GETATTR(lineterminator, "lineterminator");

  003d1	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR lineterminator$[rsp], 0
  003da	75 1c		 jne	 SHORT $LN58@dialect_ne
  003dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@JHFLIELP@lineterminator?$AA@
  003e3	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  003eb	e8 00 00 00 00	 call	 PyObject_GetAttrString
  003f0	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR lineterminator$[rsp], rax
$LN58@dialect_ne:

; 410  :         DIALECT_GETATTR(quotechar, "quotechar");

  003f8	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR quotechar$[rsp], 0
  00401	75 1c		 jne	 SHORT $LN57@dialect_ne
  00403	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09ICADEPGB@quotechar?$AA@
  0040a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  00412	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00417	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR quotechar$[rsp], rax
$LN57@dialect_ne:

; 411  :         DIALECT_GETATTR(quoting, "quoting");

  0041f	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR quoting$[rsp], 0
  00428	75 1c		 jne	 SHORT $LN56@dialect_ne
  0042a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JPFMBGFH@quoting?$AA@
  00431	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  00439	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0043e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR quoting$[rsp], rax
$LN56@dialect_ne:

; 412  :         DIALECT_GETATTR(skipinitialspace, "skipinitialspace");

  00446	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR skipinitialspace$[rsp], 0
  0044f	75 1c		 jne	 SHORT $LN55@dialect_ne
  00451	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@CFMLGKKP@skipinitialspace?$AA@
  00458	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  00460	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00465	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR skipinitialspace$[rsp], rax
$LN55@dialect_ne:

; 413  :         DIALECT_GETATTR(strict, "strict");

  0046d	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR strict$[rsp], 0
  00476	75 1c		 jne	 SHORT $LN54@dialect_ne
  00478	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  0047f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  00487	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0048c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR strict$[rsp], rax
$LN54@dialect_ne:

; 414  :         PyErr_Clear();

  00494	e8 00 00 00 00	 call	 PyErr_Clear
$LN62@dialect_ne:

; 415  :     }
; 416  : 
; 417  :     /* check types and convert to C values */
; 418  : #define DIASET(meth, name, target, src, dflt) \
; 419  :     if (meth(name, target, src, dflt)) \
; 420  :         goto err
; 421  :     DIASET(_set_char, "delimiter", &self->delimiter, delimiter, ',');

  00499	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004a1	48 83 c0 64	 add	 rax, 100		; 00000064H
  004a5	41 b9 2c 00 00
	00		 mov	 r9d, 44			; 0000002cH
  004ab	4c 8b 44 24 78	 mov	 r8, QWORD PTR delimiter$[rsp]
  004b0	48 8b d0	 mov	 rdx, rax
  004b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NMOHGHGG@delimiter?$AA@
  004ba	e8 00 00 00 00	 call	 _set_char
  004bf	85 c0		 test	 eax, eax
  004c1	74 05		 je	 SHORT $LN53@dialect_ne
  004c3	e9 39 02 00 00	 jmp	 $err$20832
$LN53@dialect_ne:

; 422  :     DIASET(_set_bool, "doublequote", &self->doublequote, doublequote, 1);

  004c8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004d0	48 83 c0 60	 add	 rax, 96			; 00000060H
  004d4	41 b9 01 00 00
	00		 mov	 r9d, 1
  004da	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR doublequote$[rsp]
  004e2	48 8b d0	 mov	 rdx, rax
  004e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@IJBGDELB@doublequote?$AA@
  004ec	e8 00 00 00 00	 call	 _set_bool
  004f1	85 c0		 test	 eax, eax
  004f3	74 05		 je	 SHORT $LN52@dialect_ne
  004f5	e9 07 02 00 00	 jmp	 $err$20832
$LN52@dialect_ne:

; 423  :     DIASET(_set_char, "escapechar", &self->escapechar, escapechar, 0);

  004fa	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00502	48 83 c0 6c	 add	 rax, 108		; 0000006cH
  00506	45 33 c9	 xor	 r9d, r9d
  00509	4c 8b 44 24 70	 mov	 r8, QWORD PTR escapechar$[rsp]
  0050e	48 8b d0	 mov	 rdx, rax
  00511	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@BBGHHBGG@escapechar?$AA@
  00518	e8 00 00 00 00	 call	 _set_char
  0051d	85 c0		 test	 eax, eax
  0051f	74 05		 je	 SHORT $LN51@dialect_ne
  00521	e9 db 01 00 00	 jmp	 $err$20832
$LN51@dialect_ne:

; 424  :     DIASET(_set_str, "lineterminator", &self->lineterminator, lineterminator, "\r\n");

  00526	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0052e	48 83 c0 78	 add	 rax, 120		; 00000078H
  00532	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6?$AA@
  00539	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR lineterminator$[rsp]
  00541	48 8b d0	 mov	 rdx, rax
  00544	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JHFLIELP@lineterminator?$AA@
  0054b	e8 00 00 00 00	 call	 _set_str
  00550	85 c0		 test	 eax, eax
  00552	74 05		 je	 SHORT $LN50@dialect_ne
  00554	e9 a8 01 00 00	 jmp	 $err$20832
$LN50@dialect_ne:

; 425  :     DIASET(_set_char, "quotechar", &self->quotechar, quotechar, '"');

  00559	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00561	48 83 c0 68	 add	 rax, 104		; 00000068H
  00565	41 b9 22 00 00
	00		 mov	 r9d, 34			; 00000022H
  0056b	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR quotechar$[rsp]
  00573	48 8b d0	 mov	 rdx, rax
  00576	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09ICADEPGB@quotechar?$AA@
  0057d	e8 00 00 00 00	 call	 _set_char
  00582	85 c0		 test	 eax, eax
  00584	74 05		 je	 SHORT $LN49@dialect_ne
  00586	e9 76 01 00 00	 jmp	 $err$20832
$LN49@dialect_ne:

; 426  :     DIASET(_set_int, "quoting", &self->quoting, quoting, QUOTE_MINIMAL);

  0058b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00593	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00599	45 33 c9	 xor	 r9d, r9d
  0059c	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR quoting$[rsp]
  005a4	48 8b d0	 mov	 rdx, rax
  005a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JPFMBGFH@quoting?$AA@
  005ae	e8 00 00 00 00	 call	 _set_int
  005b3	85 c0		 test	 eax, eax
  005b5	74 05		 je	 SHORT $LN48@dialect_ne
  005b7	e9 45 01 00 00	 jmp	 $err$20832
$LN48@dialect_ne:

; 427  :     DIASET(_set_bool, "skipinitialspace", &self->skipinitialspace, skipinitialspace, 0);

  005bc	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005c4	48 83 c0 70	 add	 rax, 112		; 00000070H
  005c8	45 33 c9	 xor	 r9d, r9d
  005cb	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR skipinitialspace$[rsp]
  005d3	48 8b d0	 mov	 rdx, rax
  005d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CFMLGKKP@skipinitialspace?$AA@
  005dd	e8 00 00 00 00	 call	 _set_bool
  005e2	85 c0		 test	 eax, eax
  005e4	74 05		 je	 SHORT $LN47@dialect_ne
  005e6	e9 16 01 00 00	 jmp	 $err$20832
$LN47@dialect_ne:

; 428  :     DIASET(_set_bool, "strict", &self->strict, strict, 0);

  005eb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005f3	48 05 84 00 00
	00		 add	 rax, 132		; 00000084H
  005f9	45 33 c9	 xor	 r9d, r9d
  005fc	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR strict$[rsp]
  00604	48 8b d0	 mov	 rdx, rax
  00607	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  0060e	e8 00 00 00 00	 call	 _set_bool
  00613	85 c0		 test	 eax, eax
  00615	74 05		 je	 SHORT $LN46@dialect_ne
  00617	e9 e5 00 00 00	 jmp	 $err$20832
$LN46@dialect_ne:

; 429  : 
; 430  :     /* validate options */
; 431  :     if (dialect_check_quoting(self->quoting))

  0061c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00624	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [rax+128]
  0062a	e8 00 00 00 00	 call	 dialect_check_quoting
  0062f	85 c0		 test	 eax, eax
  00631	74 05		 je	 SHORT $LN45@dialect_ne

; 432  :         goto err;

  00633	e9 c9 00 00 00	 jmp	 $err$20832
$LN45@dialect_ne:

; 433  :     if (self->delimiter == 0) {

  00638	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00640	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00644	75 18		 jne	 SHORT $LN44@dialect_ne

; 434  :         PyErr_SetString(PyExc_TypeError,
; 435  :                         "\"delimiter\" must be an 1-character string");

  00646	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@KMDCNNH@?$CCdelimiter?$CC?5must?5be?5an?51?9charact@
  0064d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00654	e8 00 00 00 00	 call	 PyErr_SetString

; 436  :         goto err;

  00659	e9 a3 00 00 00	 jmp	 $err$20832
$LN44@dialect_ne:

; 437  :     }
; 438  :     if (quotechar == Py_None && quoting == NULL)

  0065e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00665	48 39 84 24 c0
	00 00 00	 cmp	 QWORD PTR quotechar$[rsp], rax
  0066d	75 1d		 jne	 SHORT $LN43@dialect_ne
  0066f	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR quoting$[rsp], 0
  00678	75 12		 jne	 SHORT $LN43@dialect_ne

; 439  :         self->quoting = QUOTE_NONE;

  0067a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00682	c7 80 80 00 00
	00 03 00 00 00	 mov	 DWORD PTR [rax+128], 3
$LN43@dialect_ne:

; 440  :     if (self->quoting != QUOTE_NONE && self->quotechar == 0) {

  0068c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00694	83 b8 80 00 00
	00 03		 cmp	 DWORD PTR [rax+128], 3
  0069b	74 23		 je	 SHORT $LN42@dialect_ne
  0069d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  006a5	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  006a9	75 15		 jne	 SHORT $LN42@dialect_ne

; 441  :         PyErr_SetString(PyExc_TypeError,
; 442  :                         "quotechar must be set if quoting enabled");

  006ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@MDIOJFDM@quotechar?5must?5be?5set?5if?5quoting@
  006b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  006b9	e8 00 00 00 00	 call	 PyErr_SetString

; 443  :         goto err;

  006be	eb 41		 jmp	 SHORT $err$20832
$LN42@dialect_ne:

; 444  :     }
; 445  :     if (self->lineterminator == 0) {

  006c0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  006c8	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  006cd	75 15		 jne	 SHORT $LN41@dialect_ne

; 446  :         PyErr_SetString(PyExc_TypeError, "lineterminator must be set");

  006cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@BEOHJCBM@lineterminator?5must?5be?5set?$AA@
  006d6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  006dd	e8 00 00 00 00	 call	 PyErr_SetString

; 447  :         goto err;

  006e2	eb 1d		 jmp	 SHORT $err$20832
$LN41@dialect_ne:

; 448  :     }
; 449  : 
; 450  :     ret = (PyObject *)self;

  006e4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  006ec	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR ret$[rsp], rax

; 451  :     Py_INCREF(self);

  006f4	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  006fc	e8 00 00 00 00	 call	 _Py_IncRef
$err$20832:
$LN40@dialect_ne:

; 452  : err:
; 453  :     Py_XDECREF(self);

  00701	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR self$[rsp], 0
  0070a	74 0d		 je	 SHORT $LN37@dialect_ne
  0070c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00714	e8 00 00 00 00	 call	 _Py_DecRef
$LN37@dialect_ne:
  00719	33 c0		 xor	 eax, eax
  0071b	85 c0		 test	 eax, eax
  0071d	75 e2		 jne	 SHORT $LN40@dialect_ne
$LN36@dialect_ne:

; 454  :     Py_XDECREF(dialect);

  0071f	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dialect$[rsp], 0
  00728	74 0d		 je	 SHORT $LN33@dialect_ne
  0072a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dialect$[rsp]
  00732	e8 00 00 00 00	 call	 _Py_DecRef
$LN33@dialect_ne:
  00737	33 c0		 xor	 eax, eax
  00739	85 c0		 test	 eax, eax
  0073b	75 e2		 jne	 SHORT $LN36@dialect_ne
$LN32@dialect_ne:

; 455  :     Py_XDECREF(delimiter);

  0073d	48 83 7c 24 78
	00		 cmp	 QWORD PTR delimiter$[rsp], 0
  00743	74 0a		 je	 SHORT $LN29@dialect_ne
  00745	48 8b 4c 24 78	 mov	 rcx, QWORD PTR delimiter$[rsp]
  0074a	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@dialect_ne:
  0074f	33 c0		 xor	 eax, eax
  00751	85 c0		 test	 eax, eax
  00753	75 e8		 jne	 SHORT $LN32@dialect_ne
$LN28@dialect_ne:

; 456  :     Py_XDECREF(doublequote);

  00755	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR doublequote$[rsp], 0
  0075e	74 0d		 je	 SHORT $LN25@dialect_ne
  00760	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR doublequote$[rsp]
  00768	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@dialect_ne:
  0076d	33 c0		 xor	 eax, eax
  0076f	85 c0		 test	 eax, eax
  00771	75 e2		 jne	 SHORT $LN28@dialect_ne
$LN24@dialect_ne:

; 457  :     Py_XDECREF(escapechar);

  00773	48 83 7c 24 70
	00		 cmp	 QWORD PTR escapechar$[rsp], 0
  00779	74 0a		 je	 SHORT $LN21@dialect_ne
  0077b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR escapechar$[rsp]
  00780	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@dialect_ne:
  00785	33 c0		 xor	 eax, eax
  00787	85 c0		 test	 eax, eax
  00789	75 e8		 jne	 SHORT $LN24@dialect_ne
$LN20@dialect_ne:

; 458  :     Py_XDECREF(lineterminator);

  0078b	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR lineterminator$[rsp], 0
  00794	74 0d		 je	 SHORT $LN17@dialect_ne
  00796	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR lineterminator$[rsp]
  0079e	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@dialect_ne:
  007a3	33 c0		 xor	 eax, eax
  007a5	85 c0		 test	 eax, eax
  007a7	75 e2		 jne	 SHORT $LN20@dialect_ne
$LN16@dialect_ne:

; 459  :     Py_XDECREF(quotechar);

  007a9	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR quotechar$[rsp], 0
  007b2	74 0d		 je	 SHORT $LN13@dialect_ne
  007b4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR quotechar$[rsp]
  007bc	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@dialect_ne:
  007c1	33 c0		 xor	 eax, eax
  007c3	85 c0		 test	 eax, eax
  007c5	75 e2		 jne	 SHORT $LN16@dialect_ne
$LN12@dialect_ne:

; 460  :     Py_XDECREF(quoting);

  007c7	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR quoting$[rsp], 0
  007d0	74 0d		 je	 SHORT $LN9@dialect_ne
  007d2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR quoting$[rsp]
  007da	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@dialect_ne:
  007df	33 c0		 xor	 eax, eax
  007e1	85 c0		 test	 eax, eax
  007e3	75 e2		 jne	 SHORT $LN12@dialect_ne
$LN8@dialect_ne:

; 461  :     Py_XDECREF(skipinitialspace);

  007e5	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR skipinitialspace$[rsp], 0
  007ee	74 0d		 je	 SHORT $LN5@dialect_ne
  007f0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR skipinitialspace$[rsp]
  007f8	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@dialect_ne:
  007fd	33 c0		 xor	 eax, eax
  007ff	85 c0		 test	 eax, eax
  00801	75 e2		 jne	 SHORT $LN8@dialect_ne
$LN4@dialect_ne:

; 462  :     Py_XDECREF(strict);

  00803	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR strict$[rsp], 0
  0080c	74 0d		 je	 SHORT $LN1@dialect_ne
  0080e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR strict$[rsp]
  00816	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@dialect_ne:
  0081b	33 c0		 xor	 eax, eax
  0081d	85 c0		 test	 eax, eax
  0081f	75 e2		 jne	 SHORT $LN4@dialect_ne

; 463  :     return ret;

  00821	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ret$[rsp]
$LN107@dialect_ne:

; 464  : }

  00829	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00830	c3		 ret	 0
dialect_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@DGBJMIAO@unknown?5dialect?$AA@	; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyState_FindModule:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_dialect_from_registry DD imagerel get_dialect_from_registry
	DD	imagerel get_dialect_from_registry+123
	DD	imagerel $unwind$get_dialect_from_registry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_dialect_from_registry DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BA@DGBJMIAO@unknown?5dialect?$AA@
CONST	SEGMENT
??_C@_0BA@DGBJMIAO@unknown?5dialect?$AA@ DB 'unknown dialect', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_dialect_from_registry
_TEXT	SEGMENT
dialect_obj$ = 32
name_obj$ = 64
get_dialect_from_registry PROC				; COMDAT

; 131  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 132  :     PyObject *dialect_obj;
; 133  : 
; 134  :     dialect_obj = PyDict_GetItem(_csvstate_global->dialects, name_obj);

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  00010	e8 00 00 00 00	 call	 PyState_FindModule
  00015	48 8b c8	 mov	 rcx, rax
  00018	e8 00 00 00 00	 call	 PyModule_GetState
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR name_obj$[rsp]
  00022	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00026	e8 00 00 00 00	 call	 PyDict_GetItem
  0002b	48 89 44 24 20	 mov	 QWORD PTR dialect_obj$[rsp], rax

; 135  :     if (dialect_obj == NULL) {

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR dialect_obj$[rsp], 0
  00036	75 2f		 jne	 SHORT $LN3@get_dialec

; 136  :         if (!PyErr_Occurred())

  00038	e8 00 00 00 00	 call	 PyErr_Occurred
  0003d	48 85 c0	 test	 rax, rax
  00040	75 23		 jne	 SHORT $LN2@get_dialec

; 137  :             PyErr_Format(_csvstate_global->error_obj, "unknown dialect");

  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  00049	e8 00 00 00 00	 call	 PyState_FindModule
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 PyModule_GetState
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DGBJMIAO@unknown?5dialect?$AA@
  0005d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00060	e8 00 00 00 00	 call	 PyErr_Format
$LN2@get_dialec:

; 138  :     }
; 139  :     else

  00065	eb 0a		 jmp	 SHORT $LN1@get_dialec
$LN3@get_dialec:

; 140  :         Py_INCREF(dialect_obj);

  00067	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dialect_obj$[rsp]
  0006c	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@get_dialec:

; 141  :     return dialect_obj;

  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect_obj$[rsp]

; 142  : }

  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
get_dialect_from_registry ENDP
_TEXT	ENDS
EXTRN	PyObject_IsTrue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_set_bool DD imagerel _set_bool
	DD	imagerel _set_bool+91
	DD	imagerel $unwind$_set_bool
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_set_bool DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _set_bool
_TEXT	SEGMENT
b$20522 = 32
name$ = 64
target$ = 72
src$ = 80
dflt$ = 88
_set_bool PROC						; COMDAT

; 194  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 195  :     if (src == NULL)

  00018	48 83 7c 24 50
	00		 cmp	 QWORD PTR src$[rsp], 0
  0001e	75 0d		 jne	 SHORT $LN3@set_bool

; 196  :         *target = dflt;

  00020	48 8b 44 24 48	 mov	 rax, QWORD PTR target$[rsp]
  00025	8b 4c 24 58	 mov	 ecx, DWORD PTR dflt$[rsp]
  00029	89 08		 mov	 DWORD PTR [rax], ecx

; 197  :     else {

  0002b	eb 27		 jmp	 SHORT $LN2@set_bool
$LN3@set_bool:

; 198  :         int b = PyObject_IsTrue(src);

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00032	e8 00 00 00 00	 call	 PyObject_IsTrue
  00037	89 44 24 20	 mov	 DWORD PTR b$20522[rsp], eax

; 199  :         if (b < 0)

  0003b	83 7c 24 20 00	 cmp	 DWORD PTR b$20522[rsp], 0
  00040	7d 07		 jge	 SHORT $LN1@set_bool

; 200  :             return -1;

  00042	b8 ff ff ff ff	 mov	 eax, -1
  00047	eb 0d		 jmp	 SHORT $LN4@set_bool
$LN1@set_bool:

; 201  :         *target = b;

  00049	48 8b 44 24 48	 mov	 rax, QWORD PTR target$[rsp]
  0004e	8b 4c 24 20	 mov	 ecx, DWORD PTR b$20522[rsp]
  00052	89 08		 mov	 DWORD PTR [rax], ecx
$LN2@set_bool:

; 202  :     }
; 203  :     return 0;

  00054	33 c0		 xor	 eax, eax
$LN4@set_bool:

; 204  : }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	c3		 ret	 0
_set_bool ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@GENCJOL@?$CC?$CFs?$CC?5must?5be?5an?5integer?$AA@ ; `string'
EXTRN	PyLong_AsLong:PROC
EXTRN	PyLong_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_set_int DD imagerel _set_int
	DD	imagerel _set_int+150
	DD	imagerel $unwind$_set_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_set_int DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0BI@GENCJOL@?$CC?$CFs?$CC?5must?5be?5an?5integer?$AA@
CONST	SEGMENT
??_C@_0BI@GENCJOL@?$CC?$CFs?$CC?5must?5be?5an?5integer?$AA@ DB '"%s" must'
	DB	' be an integer', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _set_int
_TEXT	SEGMENT
value$20537 = 32
name$ = 64
target$ = 72
src$ = 80
dflt$ = 88
_set_int PROC						; COMDAT

; 208  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 209  :     if (src == NULL)

  00018	48 83 7c 24 50
	00		 cmp	 QWORD PTR src$[rsp], 0
  0001e	75 0d		 jne	 SHORT $LN4@set_int

; 210  :         *target = dflt;

  00020	48 8b 44 24 48	 mov	 rax, QWORD PTR target$[rsp]
  00025	8b 4c 24 58	 mov	 ecx, DWORD PTR dflt$[rsp]
  00029	89 08		 mov	 DWORD PTR [rax], ecx

; 211  :     else {

  0002b	eb 62		 jmp	 SHORT $LN3@set_int
$LN4@set_int:

; 212  :         long value;
; 213  :         if (!PyLong_CheckExact(src)) {

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  00034	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00039	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0003d	74 1f		 je	 SHORT $LN2@set_int

; 214  :             PyErr_Format(PyExc_TypeError,
; 215  :                          "\"%s\" must be an integer", name);

  0003f	4c 8b 44 24 40	 mov	 r8, QWORD PTR name$[rsp]
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GENCJOL@?$CC?$CFs?$CC?5must?5be?5an?5integer?$AA@
  0004b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00052	e8 00 00 00 00	 call	 PyErr_Format

; 216  :             return -1;

  00057	b8 ff ff ff ff	 mov	 eax, -1
  0005c	eb 33		 jmp	 SHORT $LN5@set_int
$LN2@set_int:

; 217  :         }
; 218  :         value = PyLong_AsLong(src);

  0005e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00063	e8 00 00 00 00	 call	 PyLong_AsLong
  00068	89 44 24 20	 mov	 DWORD PTR value$20537[rsp], eax

; 219  :         if (value == -1 && PyErr_Occurred())

  0006c	83 7c 24 20 ff	 cmp	 DWORD PTR value$20537[rsp], -1
  00071	75 11		 jne	 SHORT $LN1@set_int
  00073	e8 00 00 00 00	 call	 PyErr_Occurred
  00078	48 85 c0	 test	 rax, rax
  0007b	74 07		 je	 SHORT $LN1@set_int

; 220  :             return -1;

  0007d	b8 ff ff ff ff	 mov	 eax, -1
  00082	eb 0d		 jmp	 SHORT $LN5@set_int
$LN1@set_int:

; 221  : #if SIZEOF_LONG > SIZEOF_INT
; 222  :         if (value > INT_MAX || value < INT_MIN) {
; 223  :             PyErr_Format(PyExc_ValueError,
; 224  :                          "integer out of range for \"%s\"", name);
; 225  :             return -1;
; 226  :         }
; 227  : #endif
; 228  :         *target = (int)value;

  00084	48 8b 44 24 48	 mov	 rax, QWORD PTR target$[rsp]
  00089	8b 4c 24 20	 mov	 ecx, DWORD PTR value$20537[rsp]
  0008d	89 08		 mov	 DWORD PTR [rax], ecx
$LN3@set_int:

; 229  :     }
; 230  :     return 0;

  0008f	33 c0		 xor	 eax, eax
$LN5@set_int:

; 231  : }

  00091	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00095	c3		 ret	 0
_set_int ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@FMDBGHD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1DE@NBLFGFBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@GKGHDLCP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@IEEKGNLD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@MDPDINJJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CD@KOOPOFBL@?$CC?$CFs?$CC?5must?5be?5an?51?9character?5stri@ ; `string'
PUBLIC	??_C@_0CA@BHAKGOMP@?$CC?$CFs?$CC?5must?5be?5string?0?5not?5?$CF?4200s?$AA@ ; `string'
EXTRN	__imp__wassert:PROC
EXTRN	PyUnicode_GetLength:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_set_char DD imagerel _set_char
	DD	imagerel _set_char+1654
	DD	imagerel $unwind$_set_char
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_set_char DD 011801H
	DD	0e218H
xdata	ENDS
;	COMDAT ??_C@_1EM@FMDBGHD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EM@FMDBGHD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 's', 00H, 'r', 00H, 'c', 00H, ')', 00H, ')', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@NBLFGFBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@NBLFGFBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@GKGHDLCP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@GKGHDLCP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 's', 00H, 'r', 00H, 'c', 00H
	DB	')', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@IEEKGNLD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@IEEKGNLD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 's', 00H
	DB	'r', 00H, 'c', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@MDPDINJJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@MDPDINJJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, 'r', 00H, 'c', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, '_', 00H, 'c', 00H, 's'
	DB	00H, 'v', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KOOPOFBL@?$CC?$CFs?$CC?5must?5be?5an?51?9character?5stri@
CONST	SEGMENT
??_C@_0CD@KOOPOFBL@?$CC?$CFs?$CC?5must?5be?5an?51?9character?5stri@ DB '"'
	DB	'%s" must be an 1-character string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BHAKGOMP@?$CC?$CFs?$CC?5must?5be?5string?0?5not?5?$CF?4200s?$AA@
CONST	SEGMENT
??_C@_0CA@BHAKGOMP@?$CC?$CFs?$CC?5must?5be?5string?0?5not?5?$CF?4200s?$AA@ DB '"'
	DB	'%s" must be string, not %.200s', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _set_char
_TEXT	SEGMENT
len$20557 = 32
tv184 = 40
tv193 = 48
tv303 = 56
tv248 = 64
tv257 = 72
tv302 = 80
tv292 = 88
tv301 = 96
name$ = 128
target$ = 136
src$ = 144
dflt$ = 152
_set_char PROC						; COMDAT

; 235  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 236  :     if (src == NULL)

  00018	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR src$[rsp], 0
  00021	75 16		 jne	 SHORT $LN6@set_char

; 237  :         *target = dflt;

  00023	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR target$[rsp]
  0002b	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR dflt$[rsp]
  00032	89 08		 mov	 DWORD PTR [rax], ecx

; 238  :     else {

  00034	e9 36 06 00 00	 jmp	 $LN5@set_char
$LN6@set_char:

; 239  :         *target = '\0';

  00039	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR target$[rsp]
  00041	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 240  :         if (src != Py_None) {

  00047	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004e	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR src$[rsp], rax
  00056	0f 84 13 06 00
	00		 je	 $LN4@set_char

; 241  :             Py_ssize_t len;
; 242  :             if (!PyUnicode_Check(src)) {

  0005c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00064	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00068	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0006e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00073	85 c0		 test	 eax, eax
  00075	75 35		 jne	 SHORT $LN3@set_char

; 243  :                 PyErr_Format(PyExc_TypeError,
; 244  :                     "\"%s\" must be string, not %.200s", name,
; 245  :                     src->ob_type->tp_name);

  00077	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0007f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00083	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00087	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR name$[rsp]
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@BHAKGOMP@?$CC?$CFs?$CC?5must?5be?5string?0?5not?5?$CF?4200s?$AA@
  00096	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009d	e8 00 00 00 00	 call	 PyErr_Format

; 246  :                 return -1;

  000a2	b8 ff ff ff ff	 mov	 eax, -1
  000a7	e9 c5 05 00 00	 jmp	 $LN7@set_char
$LN3@set_char:

; 247  :             }
; 248  :             len = PyUnicode_GetLength(src);

  000ac	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  000b4	e8 00 00 00 00	 call	 PyUnicode_GetLength
  000b9	48 89 44 24 20	 mov	 QWORD PTR len$20557[rsp], rax

; 249  :             if (len > 1) {

  000be	48 83 7c 24 20
	01		 cmp	 QWORD PTR len$20557[rsp], 1
  000c4	7e 25		 jle	 SHORT $LN2@set_char

; 250  :                 PyErr_Format(PyExc_TypeError,
; 251  :                     "\"%s\" must be an 1-character string",
; 252  :                     name);

  000c6	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR name$[rsp]
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@KOOPOFBL@?$CC?$CFs?$CC?5must?5be?5an?51?9character?5stri@
  000d5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000dc	e8 00 00 00 00	 call	 PyErr_Format

; 253  :                 return -1;

  000e1	b8 ff ff ff ff	 mov	 eax, -1
  000e6	e9 86 05 00 00	 jmp	 $LN7@set_char
$LN2@set_char:

; 254  :             }
; 255  :             /* PyUnicode_READY() is called in PyUnicode_GetLength() */
; 256  :             if (len > 0)

  000eb	48 83 7c 24 20
	00		 cmp	 QWORD PTR len$20557[rsp], 0
  000f1	0f 8e 78 05 00
	00		 jle	 $LN1@set_char

; 257  :                 *target = PyUnicode_READ_CHAR(src, 0);

  000f7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  000ff	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00103	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00109	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0010e	85 c0		 test	 eax, eax
  00110	75 1c		 jne	 SHORT $LN9@set_char
  00112	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00118	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MDPDINJJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$AA@
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012c	33 c0		 xor	 eax, eax
$LN9@set_char:
  0012e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00136	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00139	c1 e8 07	 shr	 eax, 7
  0013c	83 e0 01	 and	 eax, 1
  0013f	85 c0		 test	 eax, eax
  00141	75 1c		 jne	 SHORT $LN10@set_char
  00143	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00149	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IEEKGNLD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$AA@
  00157	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0015d	33 c0		 xor	 eax, eax
$LN10@set_char:
  0015f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00167	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0016b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00171	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00176	85 c0		 test	 eax, eax
  00178	75 1c		 jne	 SHORT $LN11@set_char
  0017a	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GKGHDLCP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0018e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00194	33 c0		 xor	 eax, eax
$LN11@set_char:
  00196	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0019e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001a1	c1 e8 07	 shr	 eax, 7
  001a4	83 e0 01	 and	 eax, 1
  001a7	85 c0		 test	 eax, eax
  001a9	75 1c		 jne	 SHORT $LN12@set_char
  001ab	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  001b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NBLFGFBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c5	33 c0		 xor	 eax, eax
$LN12@set_char:
  001c7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001cf	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001d2	c1 e8 02	 shr	 eax, 2
  001d5	83 e0 07	 and	 eax, 7
  001d8	83 f8 01	 cmp	 eax, 1
  001db	0f 85 54 01 00
	00		 jne	 $LN41@set_char
  001e1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001e9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001ed	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001f3	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001f8	85 c0		 test	 eax, eax
  001fa	75 1c		 jne	 SHORT $LN13@set_char
  001fc	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00202	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GKGHDLCP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00210	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00216	33 c0		 xor	 eax, eax
$LN13@set_char:
  00218	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00220	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00223	c1 e8 05	 shr	 eax, 5
  00226	83 e0 01	 and	 eax, 1
  00229	85 c0		 test	 eax, eax
  0022b	0f 84 b1 00 00
	00		 je	 $LN19@set_char
  00231	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00239	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0023d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00243	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00248	85 c0		 test	 eax, eax
  0024a	75 1c		 jne	 SHORT $LN14@set_char
  0024c	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00252	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GKGHDLCP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00260	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00266	33 c0		 xor	 eax, eax
$LN14@set_char:
  00268	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00270	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00273	c1 e8 07	 shr	 eax, 7
  00276	83 e0 01	 and	 eax, 1
  00279	85 c0		 test	 eax, eax
  0027b	75 1c		 jne	 SHORT $LN15@set_char
  0027d	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00283	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0028a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NBLFGFBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00291	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00297	33 c0		 xor	 eax, eax
$LN15@set_char:
  00299	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  002a1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002a4	c1 e8 06	 shr	 eax, 6
  002a7	83 e0 01	 and	 eax, 1
  002aa	85 c0		 test	 eax, eax
  002ac	74 15		 je	 SHORT $LN16@set_char
  002ae	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  002b6	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  002bc	48 89 44 24 28	 mov	 QWORD PTR tv184[rsp], rax
  002c1	eb 13		 jmp	 SHORT $LN17@set_char
$LN16@set_char:
  002c3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  002cb	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  002d1	48 89 44 24 28	 mov	 QWORD PTR tv184[rsp], rax
$LN17@set_char:
  002d6	48 8b 44 24 28	 mov	 rax, QWORD PTR tv184[rsp]
  002db	48 89 44 24 30	 mov	 QWORD PTR tv193[rsp], rax
  002e0	eb 42		 jmp	 SHORT $LN20@set_char
$LN19@set_char:
  002e2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  002ea	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  002f2	75 1c		 jne	 SHORT $LN18@set_char
  002f4	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  002fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00301	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FMDBGHD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00308	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0030e	33 c0		 xor	 eax, eax
$LN18@set_char:
  00310	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00318	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0031f	48 89 44 24 30	 mov	 QWORD PTR tv193[rsp], rax
$LN20@set_char:
  00324	48 8b 44 24 30	 mov	 rax, QWORD PTR tv193[rsp]
  00329	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0032c	89 44 24 38	 mov	 DWORD PTR tv303[rsp], eax
  00330	e9 2c 03 00 00	 jmp	 $LN42@set_char
$LN41@set_char:
  00335	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0033d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00341	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00347	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0034c	85 c0		 test	 eax, eax
  0034e	75 1c		 jne	 SHORT $LN21@set_char
  00350	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00356	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0035d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GKGHDLCP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00364	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0036a	33 c0		 xor	 eax, eax
$LN21@set_char:
  0036c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00374	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00377	c1 e8 07	 shr	 eax, 7
  0037a	83 e0 01	 and	 eax, 1
  0037d	85 c0		 test	 eax, eax
  0037f	75 1c		 jne	 SHORT $LN22@set_char
  00381	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00387	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0038e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NBLFGFBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00395	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0039b	33 c0		 xor	 eax, eax
$LN22@set_char:
  0039d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  003a5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003a8	c1 e8 02	 shr	 eax, 2
  003ab	83 e0 07	 and	 eax, 7
  003ae	83 f8 02	 cmp	 eax, 2
  003b1	0f 85 54 01 00
	00		 jne	 $LN39@set_char
  003b7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  003bf	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003c3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003c9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003ce	85 c0		 test	 eax, eax
  003d0	75 1c		 jne	 SHORT $LN23@set_char
  003d2	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  003d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  003df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GKGHDLCP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003ec	33 c0		 xor	 eax, eax
$LN23@set_char:
  003ee	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  003f6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003f9	c1 e8 05	 shr	 eax, 5
  003fc	83 e0 01	 and	 eax, 1
  003ff	85 c0		 test	 eax, eax
  00401	0f 84 b1 00 00
	00		 je	 $LN29@set_char
  00407	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0040f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00413	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00419	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0041e	85 c0		 test	 eax, eax
  00420	75 1c		 jne	 SHORT $LN24@set_char
  00422	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00428	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0042f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GKGHDLCP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00436	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0043c	33 c0		 xor	 eax, eax
$LN24@set_char:
  0043e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00446	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00449	c1 e8 07	 shr	 eax, 7
  0044c	83 e0 01	 and	 eax, 1
  0044f	85 c0		 test	 eax, eax
  00451	75 1c		 jne	 SHORT $LN25@set_char
  00453	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00459	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00460	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NBLFGFBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00467	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0046d	33 c0		 xor	 eax, eax
$LN25@set_char:
  0046f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00477	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0047a	c1 e8 06	 shr	 eax, 6
  0047d	83 e0 01	 and	 eax, 1
  00480	85 c0		 test	 eax, eax
  00482	74 15		 je	 SHORT $LN26@set_char
  00484	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0048c	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00492	48 89 44 24 40	 mov	 QWORD PTR tv248[rsp], rax
  00497	eb 13		 jmp	 SHORT $LN27@set_char
$LN26@set_char:
  00499	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  004a1	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  004a7	48 89 44 24 40	 mov	 QWORD PTR tv248[rsp], rax
$LN27@set_char:
  004ac	48 8b 44 24 40	 mov	 rax, QWORD PTR tv248[rsp]
  004b1	48 89 44 24 48	 mov	 QWORD PTR tv257[rsp], rax
  004b6	eb 42		 jmp	 SHORT $LN30@set_char
$LN29@set_char:
  004b8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  004c0	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  004c8	75 1c		 jne	 SHORT $LN28@set_char
  004ca	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  004d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  004d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FMDBGHD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  004de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004e4	33 c0		 xor	 eax, eax
$LN28@set_char:
  004e6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  004ee	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  004f5	48 89 44 24 48	 mov	 QWORD PTR tv257[rsp], rax
$LN30@set_char:
  004fa	48 8b 44 24 48	 mov	 rax, QWORD PTR tv257[rsp]
  004ff	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00502	89 44 24 50	 mov	 DWORD PTR tv302[rsp], eax
  00506	e9 4e 01 00 00	 jmp	 $LN40@set_char
$LN39@set_char:
  0050b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00513	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00517	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0051d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00522	85 c0		 test	 eax, eax
  00524	75 1c		 jne	 SHORT $LN31@set_char
  00526	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  0052c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00533	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GKGHDLCP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0053a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00540	33 c0		 xor	 eax, eax
$LN31@set_char:
  00542	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0054a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0054d	c1 e8 05	 shr	 eax, 5
  00550	83 e0 01	 and	 eax, 1
  00553	85 c0		 test	 eax, eax
  00555	0f 84 b1 00 00
	00		 je	 $LN37@set_char
  0055b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00563	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00567	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0056d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00572	85 c0		 test	 eax, eax
  00574	75 1c		 jne	 SHORT $LN32@set_char
  00576	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  0057c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00583	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GKGHDLCP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0058a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00590	33 c0		 xor	 eax, eax
$LN32@set_char:
  00592	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0059a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0059d	c1 e8 07	 shr	 eax, 7
  005a0	83 e0 01	 and	 eax, 1
  005a3	85 c0		 test	 eax, eax
  005a5	75 1c		 jne	 SHORT $LN33@set_char
  005a7	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  005ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  005b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NBLFGFBH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  005bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005c1	33 c0		 xor	 eax, eax
$LN33@set_char:
  005c3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  005cb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005ce	c1 e8 06	 shr	 eax, 6
  005d1	83 e0 01	 and	 eax, 1
  005d4	85 c0		 test	 eax, eax
  005d6	74 15		 je	 SHORT $LN34@set_char
  005d8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  005e0	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  005e6	48 89 44 24 58	 mov	 QWORD PTR tv292[rsp], rax
  005eb	eb 13		 jmp	 SHORT $LN35@set_char
$LN34@set_char:
  005ed	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  005f5	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  005fb	48 89 44 24 58	 mov	 QWORD PTR tv292[rsp], rax
$LN35@set_char:
  00600	48 8b 44 24 58	 mov	 rax, QWORD PTR tv292[rsp]
  00605	48 89 44 24 60	 mov	 QWORD PTR tv301[rsp], rax
  0060a	eb 42		 jmp	 SHORT $LN38@set_char
$LN37@set_char:
  0060c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00614	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0061c	75 1c		 jne	 SHORT $LN36@set_char
  0061e	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00624	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0062b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FMDBGHD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00632	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00638	33 c0		 xor	 eax, eax
$LN36@set_char:
  0063a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00642	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00649	48 89 44 24 60	 mov	 QWORD PTR tv301[rsp], rax
$LN38@set_char:
  0064e	48 8b 44 24 60	 mov	 rax, QWORD PTR tv301[rsp]
  00653	8b 00		 mov	 eax, DWORD PTR [rax]
  00655	89 44 24 50	 mov	 DWORD PTR tv302[rsp], eax
$LN40@set_char:
  00659	8b 44 24 50	 mov	 eax, DWORD PTR tv302[rsp]
  0065d	89 44 24 38	 mov	 DWORD PTR tv303[rsp], eax
$LN42@set_char:
  00661	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR target$[rsp]
  00669	8b 4c 24 38	 mov	 ecx, DWORD PTR tv303[rsp]
  0066d	89 08		 mov	 DWORD PTR [rax], ecx
$LN1@set_char:
$LN4@set_char:
$LN5@set_char:

; 258  :         }
; 259  :     }
; 260  :     return 0;

  0066f	33 c0		 xor	 eax, eax
$LN7@set_char:

; 261  : }

  00671	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00675	c3		 ret	 0
_set_char ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@OPDEJNGK@?$CC?$CFs?$CC?5must?5be?5a?5string?$AA@ ; `string'
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyUnicode_DecodeASCII:PROC
EXTRN	strlen:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_set_str DD imagerel _set_str
	DD	imagerel _set_str+333
	DD	imagerel $unwind$_set_str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_set_str DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0BG@OPDEJNGK@?$CC?$CFs?$CC?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0BG@OPDEJNGK@?$CC?$CFs?$CC?5must?5be?5a?5string?$AA@ DB '"%s" must '
	DB	'be a string', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _set_str
_TEXT	SEGMENT
tv93 = 32
name$ = 64
target$ = 72
src$ = 80
dflt$ = 88
_set_str PROC						; COMDAT

; 265  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 266  :     if (src == NULL)

  00018	48 83 7c 24 50
	00		 cmp	 QWORD PTR src$[rsp], 0
  0001e	75 27		 jne	 SHORT $LN11@set_str

; 267  :         *target = PyUnicode_DecodeASCII(dflt, strlen(dflt), NULL);

  00020	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dflt$[rsp]
  00025	e8 00 00 00 00	 call	 strlen
  0002a	45 33 c0	 xor	 r8d, r8d
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dflt$[rsp]
  00035	e8 00 00 00 00	 call	 PyUnicode_DecodeASCII
  0003a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR target$[rsp]
  0003f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 268  :     else {

  00042	e9 ff 00 00 00	 jmp	 $LN10@set_str
$LN11@set_str:

; 269  :         if (src == Py_None)

  00047	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004e	48 39 44 24 50	 cmp	 QWORD PTR src$[rsp], rax
  00053	75 11		 jne	 SHORT $LN9@set_str

; 270  :             *target = NULL;

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR target$[rsp]
  0005a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00061	e9 e0 00 00 00	 jmp	 $LN8@set_str
$LN9@set_str:

; 271  :         else if (!PyUnicode_Check(src)) {

  00066	48 8b 44 24 50	 mov	 rax, QWORD PTR src$[rsp]
  0006b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00075	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0007a	85 c0		 test	 eax, eax
  0007c	75 27		 jne	 SHORT $LN7@set_str

; 272  :             PyErr_Format(PyExc_TypeError,
; 273  :                          "\"%s\" must be a string", name);

  0007e	4c 8b 44 24 40	 mov	 r8, QWORD PTR name$[rsp]
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@OPDEJNGK@?$CC?$CFs?$CC?5must?5be?5a?5string?$AA@
  0008a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00091	e8 00 00 00 00	 call	 PyErr_Format

; 274  :             return -1;

  00096	b8 ff ff ff ff	 mov	 eax, -1
  0009b	e9 a8 00 00 00	 jmp	 $LN12@set_str

; 275  :         }
; 276  :         else {

  000a0	e9 a1 00 00 00	 jmp	 $LN6@set_str
$LN7@set_str:

; 277  :             if (PyUnicode_READY(src) == -1)

  000a5	48 8b 44 24 50	 mov	 rax, QWORD PTR src$[rsp]
  000aa	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ae	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000b9	85 c0		 test	 eax, eax
  000bb	75 1c		 jne	 SHORT $LN14@set_str
  000bd	41 b8 15 01 00
	00		 mov	 r8d, 277		; 00000115H
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MDPDINJJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAr?$AAc?$AA?$CJ?$AA?$AA@
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d7	33 c0		 xor	 eax, eax
$LN14@set_str:
  000d9	48 8b 44 24 50	 mov	 rax, QWORD PTR src$[rsp]
  000de	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000e1	c1 e8 07	 shr	 eax, 7
  000e4	83 e0 01	 and	 eax, 1
  000e7	85 c0		 test	 eax, eax
  000e9	74 0a		 je	 SHORT $LN15@set_str
  000eb	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
  000f3	eb 0e		 jmp	 SHORT $LN16@set_str
$LN15@set_str:
  000f5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  000fa	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ff	89 44 24 20	 mov	 DWORD PTR tv93[rsp], eax
$LN16@set_str:
  00103	83 7c 24 20 ff	 cmp	 DWORD PTR tv93[rsp], -1
  00108	75 07		 jne	 SHORT $LN5@set_str

; 278  :                 return -1;

  0010a	b8 ff ff ff ff	 mov	 eax, -1
  0010f	eb 37		 jmp	 SHORT $LN12@set_str
$LN5@set_str:
$LN4@set_str:

; 279  :             Py_XDECREF(*target);

  00111	48 8b 44 24 48	 mov	 rax, QWORD PTR target$[rsp]
  00116	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0011a	74 0d		 je	 SHORT $LN1@set_str
  0011c	48 8b 44 24 48	 mov	 rax, QWORD PTR target$[rsp]
  00121	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00124	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@set_str:
  00129	33 c0		 xor	 eax, eax
  0012b	85 c0		 test	 eax, eax
  0012d	75 e2		 jne	 SHORT $LN4@set_str

; 280  :             Py_INCREF(src);

  0012f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00134	e8 00 00 00 00	 call	 _Py_IncRef

; 281  :             *target = src;

  00139	48 8b 44 24 48	 mov	 rax, QWORD PTR target$[rsp]
  0013e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00143	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN6@set_str:
$LN8@set_str:
$LN10@set_str:

; 282  :         }
; 283  :     }
; 284  :     return 0;

  00146	33 c0		 xor	 eax, eax
$LN12@set_str:

; 285  : }

  00148	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0014c	c3		 ret	 0
_set_str ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@MOEHADNO@bad?5?$CCquoting?$CC?5value?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dialect_check_quoting DD imagerel dialect_check_quoting
	DD	imagerel dialect_check_quoting+96
	DD	imagerel $unwind$dialect_check_quoting
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dialect_check_quoting DD 010801H
	DD	06208H
xdata	ENDS
;	COMDAT ??_C@_0BE@MOEHADNO@bad?5?$CCquoting?$CC?5value?$AA@
CONST	SEGMENT
??_C@_0BE@MOEHADNO@bad?5?$CCquoting?$CC?5value?$AA@ DB 'bad "quoting" val'
	DB	'ue', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dialect_check_quoting
_TEXT	SEGMENT
qs$ = 32
quoting$ = 64
dialect_check_quoting PROC				; COMDAT

; 289  : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 290  :     StyleDesc *qs;
; 291  : 
; 292  :     for (qs = quote_styles; qs->name; qs++) {

  00008	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:quote_styles
  0000f	48 89 44 24 20	 mov	 QWORD PTR qs$[rsp], rax
  00014	eb 0e		 jmp	 SHORT $LN4@dialect_ch
$LN3@dialect_ch:
  00016	48 8b 44 24 20	 mov	 rax, QWORD PTR qs$[rsp]
  0001b	48 83 c0 10	 add	 rax, 16
  0001f	48 89 44 24 20	 mov	 QWORD PTR qs$[rsp], rax
$LN4@dialect_ch:
  00024	48 8b 44 24 20	 mov	 rax, QWORD PTR qs$[rsp]
  00029	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002e	74 13		 je	 SHORT $LN2@dialect_ch

; 293  :         if (qs->style == quoting)

  00030	48 8b 44 24 20	 mov	 rax, QWORD PTR qs$[rsp]
  00035	8b 4c 24 40	 mov	 ecx, DWORD PTR quoting$[rsp]
  00039	39 08		 cmp	 DWORD PTR [rax], ecx
  0003b	75 04		 jne	 SHORT $LN1@dialect_ch

; 294  :             return 0;

  0003d	33 c0		 xor	 eax, eax
  0003f	eb 1a		 jmp	 SHORT $LN5@dialect_ch
$LN1@dialect_ch:

; 295  :     }

  00041	eb d3		 jmp	 SHORT $LN3@dialect_ch
$LN2@dialect_ch:

; 296  :     PyErr_Format(PyExc_TypeError, "bad \"quoting\" value");

  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@MOEHADNO@bad?5?$CCquoting?$CC?5value?$AA@
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00051	e8 00 00 00 00	 call	 PyErr_Format

; 297  :     return -1;

  00056	b8 ff ff ff ff	 mov	 eax, -1
$LN5@dialect_ch:

; 298  : }

  0005b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005f	c3		 ret	 0
dialect_check_quoting ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@DKJAPDDK@line?5contains?5NULL?5byte?$AA@ ; `string'
PUBLIC	??_C@_1FA@KECAHNAJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd@ ; `string'
PUBLIC	??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0FB@IOCKMCCD@iterator?5should?5return?5strings?0?5@ ; `string'
PUBLIC	??_C@_0BH@OMKFHCNA@unexpected?5end?5of?5data?$AA@ ; `string'
EXTRN	PyIter_Next:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Reader_iternext DD imagerel Reader_iternext
	DD	imagerel Reader_iternext+1320
	DD	imagerel $unwind$Reader_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Reader_iternext DD 020c01H
	DD	011010cH
xdata	ENDS
;	COMDAT ??_C@_0BI@DKJAPDDK@line?5contains?5NULL?5byte?$AA@
CONST	SEGMENT
??_C@_0BI@DKJAPDDK@line?5contains?5NULL?5byte?$AA@ DB 'line contains NULL'
	DB	' byte', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@KECAHNAJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd@
CONST	SEGMENT
??_C@_1FA@KECAHNAJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 'o', 00H, 'b', 00H, 'j'
	DB	00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@IOCKMCCD@iterator?5should?5return?5strings?0?5@
CONST	SEGMENT
??_C@_0FB@IOCKMCCD@iterator?5should?5return?5strings?0?5@ DB 'iterator sh'
	DB	'ould return strings, not %.200s (did you open the file in tex'
	DB	't mode?)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OMKFHCNA@unexpected?5end?5of?5data?$AA@
CONST	SEGMENT
??_C@_0BH@OMKFHCNA@unexpected?5end?5of?5data?$AA@ DB 'unexpected end of d'
	DB	'ata', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Reader_iternext
_TEXT	SEGMENT
kind$ = 32
lineobj$ = 40
fields$ = 48
linelen$ = 56
data$ = 64
c$ = 72
pos$ = 80
tv276 = 88
tv149 = 96
tv207 = 104
tv216 = 112
tv246 = 120
tv245 = 124
self$ = 144
Reader_iternext PROC					; COMDAT

; 785  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 786  :     PyObject *fields = NULL;

  0000c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR fields$[rsp], 0

; 787  :     Py_UCS4 c;
; 788  :     Py_ssize_t pos, linelen;
; 789  :     unsigned int kind;
; 790  :     void *data;
; 791  :     PyObject *lineobj;
; 792  : 
; 793  :     if (parse_reset(self) < 0)

  00015	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0001d	e8 00 00 00 00	 call	 parse_reset
  00022	85 c0		 test	 eax, eax
  00024	7d 07		 jge	 SHORT $LN17@Reader_ite

; 794  :         return NULL;

  00026	33 c0		 xor	 eax, eax
  00028	e9 f3 04 00 00	 jmp	 $LN18@Reader_ite
$LN17@Reader_ite:
$LN16@Reader_ite:

; 795  :     do {
; 796  :         lineobj = PyIter_Next(self->input_iter);

  0002d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00035	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00039	e8 00 00 00 00	 call	 PyIter_Next
  0003e	48 89 44 24 28	 mov	 QWORD PTR lineobj$[rsp], rax

; 797  :         if (lineobj == NULL) {

  00043	48 83 7c 24 28
	00		 cmp	 QWORD PTR lineobj$[rsp], 0
  00049	0f 85 81 00 00
	00		 jne	 $LN13@Reader_ite

; 798  :             /* End of input OR exception */
; 799  :             if (!PyErr_Occurred() && (self->field_len != 0 ||
; 800  :                                       self->state == IN_QUOTED_FIELD)) {

  0004f	e8 00 00 00 00	 call	 PyErr_Occurred
  00054	48 85 c0	 test	 rax, rax
  00057	75 70		 jne	 SHORT $LN12@Reader_ite
  00059	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00061	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00069	75 0e		 jne	 SHORT $LN11@Reader_ite
  0006b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00073	83 78 78 04	 cmp	 DWORD PTR [rax+120], 4
  00077	75 50		 jne	 SHORT $LN12@Reader_ite
$LN11@Reader_ite:

; 801  :                 if (self->dialect->strict)

  00079	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00081	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00085	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [rax+132], 0
  0008c	74 25		 je	 SHORT $LN10@Reader_ite

; 802  :                     PyErr_SetString(_csvstate_global->error_obj,
; 803  :                                     "unexpected end of data");

  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  00095	e8 00 00 00 00	 call	 PyState_FindModule
  0009a	48 8b c8	 mov	 rcx, rax
  0009d	e8 00 00 00 00	 call	 PyModule_GetState
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@OMKFHCNA@unexpected?5end?5of?5data?$AA@
  000a9	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000ac	e8 00 00 00 00	 call	 PyErr_SetString
  000b1	eb 16		 jmp	 SHORT $LN9@Reader_ite
$LN10@Reader_ite:

; 804  :                 else if (parse_save_field(self) >= 0)

  000b3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000bb	e8 00 00 00 00	 call	 parse_save_field
  000c0	85 c0		 test	 eax, eax
  000c2	7c 05		 jl	 SHORT $LN8@Reader_ite

; 805  :                     break;

  000c4	e9 31 04 00 00	 jmp	 $LN14@Reader_ite
$LN8@Reader_ite:
$LN9@Reader_ite:
$LN12@Reader_ite:

; 806  :             }
; 807  :             return NULL;

  000c9	33 c0		 xor	 eax, eax
  000cb	e9 50 04 00 00	 jmp	 $LN18@Reader_ite
$LN13@Reader_ite:

; 808  :         }
; 809  :         if (!PyUnicode_Check(lineobj)) {

  000d0	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  000d5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000df	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000e4	85 c0		 test	 eax, eax
  000e6	75 4b		 jne	 SHORT $LN7@Reader_ite

; 810  :             PyErr_Format(_csvstate_global->error_obj,
; 811  :                          "iterator should return strings, "
; 812  :                          "not %.200s "
; 813  :                          "(did you open the file in text mode?)",
; 814  :                          lineobj->ob_type->tp_name
; 815  :                 );

  000e8	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  000ed	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f1	48 89 44 24 58	 mov	 QWORD PTR tv276[rsp], rax
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  000fd	e8 00 00 00 00	 call	 PyState_FindModule
  00102	48 8b c8	 mov	 rcx, rax
  00105	e8 00 00 00 00	 call	 PyModule_GetState
  0010a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv276[rsp]
  0010f	4c 8b 41 70	 mov	 r8, QWORD PTR [rcx+112]
  00113	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FB@IOCKMCCD@iterator?5should?5return?5strings?0?5@
  0011a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0011d	e8 00 00 00 00	 call	 PyErr_Format

; 816  :             Py_DECREF(lineobj);

  00122	48 8b 4c 24 28	 mov	 rcx, QWORD PTR lineobj$[rsp]
  00127	e8 00 00 00 00	 call	 _Py_DecRef

; 817  :             return NULL;

  0012c	33 c0		 xor	 eax, eax
  0012e	e9 ed 03 00 00	 jmp	 $LN18@Reader_ite
$LN7@Reader_ite:

; 818  :         }
; 819  :         if (PyUnicode_READY(lineobj) == -1) {

  00133	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  00138	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0013c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00142	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00147	85 c0		 test	 eax, eax
  00149	75 1c		 jne	 SHORT $LN20@Reader_ite
  0014b	41 b8 33 03 00
	00		 mov	 r8d, 819		; 00000333H
  00151	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00158	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00165	33 c0		 xor	 eax, eax
$LN20@Reader_ite:
  00167	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  0016c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0016f	c1 e8 07	 shr	 eax, 7
  00172	83 e0 01	 and	 eax, 1
  00175	85 c0		 test	 eax, eax
  00177	74 0a		 je	 SHORT $LN21@Reader_ite
  00179	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  00181	eb 0e		 jmp	 SHORT $LN22@Reader_ite
$LN21@Reader_ite:
  00183	48 8b 4c 24 28	 mov	 rcx, QWORD PTR lineobj$[rsp]
  00188	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0018d	89 44 24 60	 mov	 DWORD PTR tv149[rsp], eax
$LN22@Reader_ite:
  00191	83 7c 24 60 ff	 cmp	 DWORD PTR tv149[rsp], -1
  00196	75 11		 jne	 SHORT $LN6@Reader_ite

; 820  :             Py_DECREF(lineobj);

  00198	48 8b 4c 24 28	 mov	 rcx, QWORD PTR lineobj$[rsp]
  0019d	e8 00 00 00 00	 call	 _Py_DecRef

; 821  :             return NULL;

  001a2	33 c0		 xor	 eax, eax
  001a4	e9 77 03 00 00	 jmp	 $LN18@Reader_ite
$LN6@Reader_ite:

; 822  :         }
; 823  :         ++self->line_num;

  001a9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001b1	8b 80 9c 00 00
	00		 mov	 eax, DWORD PTR [rax+156]
  001b7	ff c0		 inc	 eax
  001b9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001c1	89 81 9c 00 00
	00		 mov	 DWORD PTR [rcx+156], eax

; 824  :         kind = PyUnicode_KIND(lineobj);

  001c7	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  001cc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001d0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001d6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001db	85 c0		 test	 eax, eax
  001dd	75 1c		 jne	 SHORT $LN23@Reader_ite
  001df	41 b8 38 03 00
	00		 mov	 r8d, 824		; 00000338H
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  001f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001f9	33 c0		 xor	 eax, eax
$LN23@Reader_ite:
  001fb	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  00200	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00203	c1 e8 07	 shr	 eax, 7
  00206	83 e0 01	 and	 eax, 1
  00209	85 c0		 test	 eax, eax
  0020b	75 1c		 jne	 SHORT $LN24@Reader_ite
  0020d	41 b8 38 03 00
	00		 mov	 r8d, 824		; 00000338H
  00213	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0021a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00221	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00227	33 c0		 xor	 eax, eax
$LN24@Reader_ite:
  00229	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  0022e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00231	c1 e8 02	 shr	 eax, 2
  00234	83 e0 07	 and	 eax, 7
  00237	89 44 24 20	 mov	 DWORD PTR kind$[rsp], eax

; 825  :         data = PyUnicode_DATA(lineobj);

  0023b	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  00240	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00244	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0024a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0024f	85 c0		 test	 eax, eax
  00251	75 1c		 jne	 SHORT $LN25@Reader_ite
  00253	41 b8 39 03 00
	00		 mov	 r8d, 825		; 00000339H
  00259	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00260	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00267	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0026d	33 c0		 xor	 eax, eax
$LN25@Reader_ite:
  0026f	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  00274	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00277	c1 e8 05	 shr	 eax, 5
  0027a	83 e0 01	 and	 eax, 1
  0027d	85 c0		 test	 eax, eax
  0027f	0f 84 a2 00 00
	00		 je	 $LN31@Reader_ite
  00285	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  0028a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0028e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00294	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00299	85 c0		 test	 eax, eax
  0029b	75 1c		 jne	 SHORT $LN26@Reader_ite
  0029d	41 b8 39 03 00
	00		 mov	 r8d, 825		; 00000339H
  002a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  002aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  002b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b7	33 c0		 xor	 eax, eax
$LN26@Reader_ite:
  002b9	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  002be	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002c1	c1 e8 07	 shr	 eax, 7
  002c4	83 e0 01	 and	 eax, 1
  002c7	85 c0		 test	 eax, eax
  002c9	75 1c		 jne	 SHORT $LN27@Reader_ite
  002cb	41 b8 39 03 00
	00		 mov	 r8d, 825		; 00000339H
  002d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  002d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  002df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e5	33 c0		 xor	 eax, eax
$LN27@Reader_ite:
  002e7	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  002ec	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002ef	c1 e8 06	 shr	 eax, 6
  002f2	83 e0 01	 and	 eax, 1
  002f5	85 c0		 test	 eax, eax
  002f7	74 12		 je	 SHORT $LN28@Reader_ite
  002f9	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  002fe	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00304	48 89 44 24 68	 mov	 QWORD PTR tv207[rsp], rax
  00309	eb 10		 jmp	 SHORT $LN29@Reader_ite
$LN28@Reader_ite:
  0030b	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  00310	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00316	48 89 44 24 68	 mov	 QWORD PTR tv207[rsp], rax
$LN29@Reader_ite:
  0031b	48 8b 44 24 68	 mov	 rax, QWORD PTR tv207[rsp]
  00320	48 89 44 24 70	 mov	 QWORD PTR tv216[rsp], rax
  00325	eb 3c		 jmp	 SHORT $LN32@Reader_ite
$LN31@Reader_ite:
  00327	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  0032c	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00334	75 1c		 jne	 SHORT $LN30@Reader_ite
  00336	41 b8 39 03 00
	00		 mov	 r8d, 825		; 00000339H
  0033c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00343	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FA@KECAHNAJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd@
  0034a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00350	33 c0		 xor	 eax, eax
$LN30@Reader_ite:
  00352	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  00357	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0035e	48 89 44 24 70	 mov	 QWORD PTR tv216[rsp], rax
$LN32@Reader_ite:
  00363	48 8b 44 24 70	 mov	 rax, QWORD PTR tv216[rsp]
  00368	48 89 44 24 40	 mov	 QWORD PTR data$[rsp], rax

; 826  :         pos = 0;

  0036d	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0

; 827  :         linelen = PyUnicode_GET_LENGTH(lineobj);

  00376	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  0037b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0037f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00385	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0038a	85 c0		 test	 eax, eax
  0038c	75 1c		 jne	 SHORT $LN33@Reader_ite
  0038e	41 b8 3b 03 00
	00		 mov	 r8d, 827		; 0000033bH
  00394	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0039b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  003a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003a8	33 c0		 xor	 eax, eax
$LN33@Reader_ite:
  003aa	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  003af	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003b2	c1 e8 07	 shr	 eax, 7
  003b5	83 e0 01	 and	 eax, 1
  003b8	85 c0		 test	 eax, eax
  003ba	75 1c		 jne	 SHORT $LN34@Reader_ite
  003bc	41 b8 3b 03 00
	00		 mov	 r8d, 827		; 0000033bH
  003c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  003c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  003d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003d6	33 c0		 xor	 eax, eax
$LN34@Reader_ite:
  003d8	48 8b 44 24 28	 mov	 rax, QWORD PTR lineobj$[rsp]
  003dd	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  003e1	48 89 44 24 38	 mov	 QWORD PTR linelen$[rsp], rax
$LN5@Reader_ite:

; 828  :         while (linelen--) {

  003e6	48 8b 44 24 38	 mov	 rax, QWORD PTR linelen$[rsp]
  003eb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR linelen$[rsp]
  003f0	48 ff c9	 dec	 rcx
  003f3	48 89 4c 24 38	 mov	 QWORD PTR linelen$[rsp], rcx
  003f8	48 85 c0	 test	 rax, rax
  003fb	0f 84 c8 00 00
	00		 je	 $LN4@Reader_ite

; 829  :             c = PyUnicode_READ(kind, data, pos);

  00401	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00406	75 19		 jne	 SHORT $LN37@Reader_ite
  00408	48 8b 44 24 50	 mov	 rax, QWORD PTR pos$[rsp]
  0040d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR data$[rsp]
  00412	48 03 c8	 add	 rcx, rax
  00415	48 8b c1	 mov	 rax, rcx
  00418	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0041b	89 44 24 78	 mov	 DWORD PTR tv246[rsp], eax
  0041f	eb 34		 jmp	 SHORT $LN38@Reader_ite
$LN37@Reader_ite:
  00421	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00426	75 14		 jne	 SHORT $LN35@Reader_ite
  00428	48 8b 44 24 40	 mov	 rax, QWORD PTR data$[rsp]
  0042d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pos$[rsp]
  00432	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00436	89 44 24 7c	 mov	 DWORD PTR tv245[rsp], eax
  0043a	eb 11		 jmp	 SHORT $LN36@Reader_ite
$LN35@Reader_ite:
  0043c	48 8b 44 24 40	 mov	 rax, QWORD PTR data$[rsp]
  00441	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pos$[rsp]
  00446	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00449	89 44 24 7c	 mov	 DWORD PTR tv245[rsp], eax
$LN36@Reader_ite:
  0044d	8b 44 24 7c	 mov	 eax, DWORD PTR tv245[rsp]
  00451	89 44 24 78	 mov	 DWORD PTR tv246[rsp], eax
$LN38@Reader_ite:
  00455	8b 44 24 78	 mov	 eax, DWORD PTR tv246[rsp]
  00459	89 44 24 48	 mov	 DWORD PTR c$[rsp], eax

; 830  :             if (c == '\0') {

  0045d	83 7c 24 48 00	 cmp	 DWORD PTR c$[rsp], 0
  00462	75 32		 jne	 SHORT $LN3@Reader_ite

; 831  :                 Py_DECREF(lineobj);

  00464	48 8b 4c 24 28	 mov	 rcx, QWORD PTR lineobj$[rsp]
  00469	e8 00 00 00 00	 call	 _Py_DecRef

; 832  :                 PyErr_Format(_csvstate_global->error_obj,
; 833  :                              "line contains NULL byte");

  0046e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  00475	e8 00 00 00 00	 call	 PyState_FindModule
  0047a	48 8b c8	 mov	 rcx, rax
  0047d	e8 00 00 00 00	 call	 PyModule_GetState
  00482	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@DKJAPDDK@line?5contains?5NULL?5byte?$AA@
  00489	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0048c	e8 00 00 00 00	 call	 PyErr_Format

; 834  :                 goto err;

  00491	e9 85 00 00 00	 jmp	 $err$21168
$LN3@Reader_ite:

; 835  :             }
; 836  :             if (parse_process_char(self, c) < 0) {

  00496	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  0049a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004a2	e8 00 00 00 00	 call	 parse_process_char
  004a7	85 c0		 test	 eax, eax
  004a9	7d 0c		 jge	 SHORT $LN2@Reader_ite

; 837  :                 Py_DECREF(lineobj);

  004ab	48 8b 4c 24 28	 mov	 rcx, QWORD PTR lineobj$[rsp]
  004b0	e8 00 00 00 00	 call	 _Py_DecRef

; 838  :                 goto err;

  004b5	eb 64		 jmp	 SHORT $err$21168
$LN2@Reader_ite:

; 839  :             }
; 840  :             pos++;

  004b7	48 8b 44 24 50	 mov	 rax, QWORD PTR pos$[rsp]
  004bc	48 ff c0	 inc	 rax
  004bf	48 89 44 24 50	 mov	 QWORD PTR pos$[rsp], rax

; 841  :         }

  004c4	e9 1d ff ff ff	 jmp	 $LN5@Reader_ite
$LN4@Reader_ite:

; 842  :         Py_DECREF(lineobj);

  004c9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR lineobj$[rsp]
  004ce	e8 00 00 00 00	 call	 _Py_DecRef

; 843  :         if (parse_process_char(self, 0) < 0)

  004d3	33 d2		 xor	 edx, edx
  004d5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004dd	e8 00 00 00 00	 call	 parse_process_char
  004e2	85 c0		 test	 eax, eax
  004e4	7d 02		 jge	 SHORT $LN1@Reader_ite

; 844  :             goto err;

  004e6	eb 33		 jmp	 SHORT $err$21168
$LN1@Reader_ite:

; 845  :     } while (self->state != START_RECORD);

  004e8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004f0	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  004f4	0f 85 33 fb ff
	ff		 jne	 $LN16@Reader_ite
$LN14@Reader_ite:

; 846  : 
; 847  :     fields = self->fields;

  004fa	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00502	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00506	48 89 44 24 30	 mov	 QWORD PTR fields$[rsp], rax

; 848  :     self->fields = NULL;

  0050b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00513	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
$err$21168:

; 849  : err:
; 850  :     return fields;

  0051b	48 8b 44 24 30	 mov	 rax, QWORD PTR fields$[rsp]
$LN18@Reader_ite:

; 851  : }

  00520	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00527	c3		 ret	 0
Reader_iternext ENDP
_TEXT	ENDS
EXTRN	PyList_Append:PROC
EXTRN	PyNumber_Float:PROC
EXTRN	PyUnicode_FromKindAndData:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_save_field DD imagerel parse_save_field
	DD	imagerel parse_save_field+194
	DD	imagerel $unwind$parse_save_field
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_save_field DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parse_save_field
_TEXT	SEGMENT
field$ = 32
tmp$20950 = 40
self$ = 64
parse_save_field PROC					; COMDAT

; 538  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 539  :     PyObject *field;
; 540  : 
; 541  :     field = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND,
; 542  :                                       (void *) self->field, self->field_len);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	4c 8b 80 90 00
	00 00		 mov	 r8, QWORD PTR [rax+144]
  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001a	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  00021	b9 04 00 00 00	 mov	 ecx, 4
  00026	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
  0002b	48 89 44 24 20	 mov	 QWORD PTR field$[rsp], rax

; 543  :     if (field == NULL)

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR field$[rsp], 0
  00036	75 07		 jne	 SHORT $LN3@parse_save

; 544  :         return -1;

  00038	b8 ff ff ff ff	 mov	 eax, -1
  0003d	eb 7e		 jmp	 SHORT $LN4@parse_save
$LN3@parse_save:

; 545  :     self->field_len = 0;

  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00044	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 546  :     if (self->numeric_field) {

  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00054	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [rax+152], 0
  0005b	74 41		 je	 SHORT $LN2@parse_save

; 547  :         PyObject *tmp;
; 548  : 
; 549  :         self->numeric_field = 0;

  0005d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00062	c7 80 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+152], 0

; 550  :         tmp = PyNumber_Float(field);

  0006c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR field$[rsp]
  00071	e8 00 00 00 00	 call	 PyNumber_Float
  00076	48 89 44 24 28	 mov	 QWORD PTR tmp$20950[rsp], rax

; 551  :         Py_DECREF(field);

  0007b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR field$[rsp]
  00080	e8 00 00 00 00	 call	 _Py_DecRef

; 552  :         if (tmp == NULL)

  00085	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp$20950[rsp], 0
  0008b	75 07		 jne	 SHORT $LN1@parse_save

; 553  :             return -1;

  0008d	b8 ff ff ff ff	 mov	 eax, -1
  00092	eb 29		 jmp	 SHORT $LN4@parse_save
$LN1@parse_save:

; 554  :         field = tmp;

  00094	48 8b 44 24 28	 mov	 rax, QWORD PTR tmp$20950[rsp]
  00099	48 89 44 24 20	 mov	 QWORD PTR field$[rsp], rax
$LN2@parse_save:

; 555  :     }
; 556  :     PyList_Append(self->fields, field);

  0009e	48 8b 54 24 20	 mov	 rdx, QWORD PTR field$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000a8	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000ac	e8 00 00 00 00	 call	 PyList_Append

; 557  :     Py_DECREF(field);

  000b1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR field$[rsp]
  000b6	e8 00 00 00 00	 call	 _Py_DecRef

; 558  :     return 0;

  000bb	33 c0		 xor	 eax, eax
$LN4@parse_save:

; 559  : }

  000bd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c1	c3		 ret	 0
parse_save_field ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GE@PLHPFOMK@new?9line?5character?5seen?5in?5unquo@ ; `string'
PUBLIC	??_C@_0BJ@HMHEPCIE@?8?$CFc?8?5expected?5after?5?8?$CFc?8?$AA@ ; `string'
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_process_char DD imagerel parse_process_char
	DD	imagerel parse_process_char+1332
	DD	imagerel $unwind$parse_process_char
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_process_char DD 010d01H
	DD	0820dH
xdata	ENDS
;	COMDAT ??_C@_0GE@PLHPFOMK@new?9line?5character?5seen?5in?5unquo@
CONST	SEGMENT
??_C@_0GE@PLHPFOMK@new?9line?5character?5seen?5in?5unquo@ DB 'new-line ch'
	DB	'aracter seen in unquoted field - do you need to open the file'
	DB	' in universal-newline mode?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HMHEPCIE@?8?$CFc?8?5expected?5after?5?8?$CFc?8?$AA@
CONST	SEGMENT
??_C@_0BJ@HMHEPCIE@?8?$CFc?8?5expected?5after?5?8?$CFc?8?$AA@ DB '''%c'' '
	DB	'expected after ''%c''', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parse_process_char
_TEXT	SEGMENT
dialect$ = 32
tv66 = 40
tv80 = 44
tv151 = 48
tv210 = 52
self$ = 80
c$ = 88
parse_process_char PROC					; COMDAT

; 602  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 603  :     DialectObj *dialect = self->dialect;

  0000d	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00012	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00016	48 89 44 24 20	 mov	 QWORD PTR dialect$[rsp], rax

; 604  : 
; 605  :     switch (self->state) {

  0001b	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00020	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00023	89 44 24 28	 mov	 DWORD PTR tv66[rsp], eax
  00027	83 7c 24 28 07	 cmp	 DWORD PTR tv66[rsp], 7
  0002c	0f 87 d9 04 00
	00		 ja	 $LN69@parse_proc
  00032	48 63 44 24 28	 movsxd	 rax, DWORD PTR tv66[rsp]
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0003e	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN79@parse_proc[rcx+rax*4]
  00045	48 03 c1	 add	 rax, rcx
  00048	ff e0		 jmp	 rax
$LN68@parse_proc:

; 606  :     case START_RECORD:
; 607  :         /* start of record */
; 608  :         if (c == '\0')

  0004a	83 7c 24 58 00	 cmp	 DWORD PTR c$[rsp], 0
  0004f	75 07		 jne	 SHORT $LN67@parse_proc

; 609  :             /* empty line - return [] */
; 610  :             break;

  00051	e9 b5 04 00 00	 jmp	 $LN69@parse_proc
  00056	eb 1f		 jmp	 SHORT $LN66@parse_proc
$LN67@parse_proc:

; 611  :         else if (c == '\n' || c == '\r') {

  00058	83 7c 24 58 0a	 cmp	 DWORD PTR c$[rsp], 10
  0005d	74 07		 je	 SHORT $LN64@parse_proc
  0005f	83 7c 24 58 0d	 cmp	 DWORD PTR c$[rsp], 13
  00064	75 11		 jne	 SHORT $LN65@parse_proc
$LN64@parse_proc:

; 612  :             self->state = EAT_CRNL;

  00066	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0006b	c7 40 78 07 00
	00 00		 mov	 DWORD PTR [rax+120], 7

; 613  :             break;

  00072	e9 94 04 00 00	 jmp	 $LN69@parse_proc
$LN65@parse_proc:
$LN66@parse_proc:

; 614  :         }
; 615  :         /* normal character - handle as START_FIELD */
; 616  :         self->state = START_FIELD;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0007c	c7 40 78 01 00
	00 00		 mov	 DWORD PTR [rax+120], 1
$LN63@parse_proc:

; 617  :         /* fallthru */
; 618  :     case START_FIELD:
; 619  :         /* expecting field */
; 620  :         if (c == '\n' || c == '\r' || c == '\0') {

  00083	83 7c 24 58 0a	 cmp	 DWORD PTR c$[rsp], 10
  00088	74 0e		 je	 SHORT $LN61@parse_proc
  0008a	83 7c 24 58 0d	 cmp	 DWORD PTR c$[rsp], 13
  0008f	74 07		 je	 SHORT $LN61@parse_proc
  00091	83 7c 24 58 00	 cmp	 DWORD PTR c$[rsp], 0
  00096	75 42		 jne	 SHORT $LN62@parse_proc
$LN61@parse_proc:

; 621  :             /* save empty field - return [fields] */
; 622  :             if (parse_save_field(self) < 0)

  00098	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0009d	e8 00 00 00 00	 call	 parse_save_field
  000a2	85 c0		 test	 eax, eax
  000a4	7d 0a		 jge	 SHORT $LN60@parse_proc

; 623  :                 return -1;

  000a6	b8 ff ff ff ff	 mov	 eax, -1
  000ab	e9 5d 04 00 00	 jmp	 $LN71@parse_proc
$LN60@parse_proc:

; 624  :             self->state = (c == '\0' ? START_RECORD : EAT_CRNL);

  000b0	83 7c 24 58 00	 cmp	 DWORD PTR c$[rsp], 0
  000b5	75 0a		 jne	 SHORT $LN73@parse_proc
  000b7	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
  000bf	eb 08		 jmp	 SHORT $LN74@parse_proc
$LN73@parse_proc:
  000c1	c7 44 24 2c 07
	00 00 00	 mov	 DWORD PTR tv80[rsp], 7
$LN74@parse_proc:
  000c9	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000ce	8b 4c 24 2c	 mov	 ecx, DWORD PTR tv80[rsp]
  000d2	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 625  :         }
; 626  :         else if (c == dialect->quotechar &&

  000d5	e9 cd 00 00 00	 jmp	 $LN59@parse_proc
$LN62@parse_proc:

; 627  :                  dialect->quoting != QUOTE_NONE) {

  000da	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  000df	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  000e2	39 44 24 58	 cmp	 DWORD PTR c$[rsp], eax
  000e6	75 1f		 jne	 SHORT $LN58@parse_proc
  000e8	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  000ed	83 b8 80 00 00
	00 03		 cmp	 DWORD PTR [rax+128], 3
  000f4	74 11		 je	 SHORT $LN58@parse_proc

; 628  :             /* start quoted field */
; 629  :             self->state = IN_QUOTED_FIELD;

  000f6	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000fb	c7 40 78 04 00
	00 00		 mov	 DWORD PTR [rax+120], 4
  00102	e9 a0 00 00 00	 jmp	 $LN57@parse_proc
$LN58@parse_proc:

; 630  :         }
; 631  :         else if (c == dialect->escapechar) {

  00107	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  0010c	8b 40 6c	 mov	 eax, DWORD PTR [rax+108]
  0010f	39 44 24 58	 cmp	 DWORD PTR c$[rsp], eax
  00113	75 11		 jne	 SHORT $LN56@parse_proc

; 632  :             /* possible escaped character */
; 633  :             self->state = ESCAPED_CHAR;

  00115	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0011a	c7 40 78 02 00
	00 00		 mov	 DWORD PTR [rax+120], 2
  00121	e9 81 00 00 00	 jmp	 $LN55@parse_proc
$LN56@parse_proc:

; 634  :         }
; 635  :         else if (c == ' ' && dialect->skipinitialspace)

  00126	83 7c 24 58 20	 cmp	 DWORD PTR c$[rsp], 32	; 00000020H
  0012b	75 0d		 jne	 SHORT $LN54@parse_proc
  0012d	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  00132	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00136	74 02		 je	 SHORT $LN54@parse_proc
  00138	eb 6d		 jmp	 SHORT $LN53@parse_proc
$LN54@parse_proc:

; 636  :             /* ignore space at start of field */
; 637  :             ;
; 638  :         else if (c == dialect->delimiter) {

  0013a	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  0013f	8b 40 64	 mov	 eax, DWORD PTR [rax+100]
  00142	39 44 24 58	 cmp	 DWORD PTR c$[rsp], eax
  00146	75 1a		 jne	 SHORT $LN52@parse_proc

; 639  :             /* save empty field */
; 640  :             if (parse_save_field(self) < 0)

  00148	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0014d	e8 00 00 00 00	 call	 parse_save_field
  00152	85 c0		 test	 eax, eax
  00154	7d 0a		 jge	 SHORT $LN51@parse_proc

; 641  :                 return -1;

  00156	b8 ff ff ff ff	 mov	 eax, -1
  0015b	e9 ad 03 00 00	 jmp	 $LN71@parse_proc
$LN51@parse_proc:

; 642  :         }
; 643  :         else {

  00160	eb 45		 jmp	 SHORT $LN50@parse_proc
$LN52@parse_proc:

; 644  :             /* begin new unquoted field */
; 645  :             if (dialect->quoting == QUOTE_NONNUMERIC)

  00162	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  00167	83 b8 80 00 00
	00 02		 cmp	 DWORD PTR [rax+128], 2
  0016e	75 0f		 jne	 SHORT $LN49@parse_proc

; 646  :                 self->numeric_field = 1;

  00170	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00175	c7 80 98 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+152], 1
$LN49@parse_proc:

; 647  :             if (parse_add_char(self, c) < 0)

  0017f	8b 54 24 58	 mov	 edx, DWORD PTR c$[rsp]
  00183	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00188	e8 00 00 00 00	 call	 parse_add_char
  0018d	85 c0		 test	 eax, eax
  0018f	7d 0a		 jge	 SHORT $LN48@parse_proc

; 648  :                 return -1;

  00191	b8 ff ff ff ff	 mov	 eax, -1
  00196	e9 72 03 00 00	 jmp	 $LN71@parse_proc
$LN48@parse_proc:

; 649  :             self->state = IN_FIELD;

  0019b	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  001a0	c7 40 78 03 00
	00 00		 mov	 DWORD PTR [rax+120], 3
$LN50@parse_proc:
$LN53@parse_proc:
$LN55@parse_proc:
$LN57@parse_proc:
$LN59@parse_proc:

; 650  :         }
; 651  :         break;

  001a7	e9 5f 03 00 00	 jmp	 $LN69@parse_proc
$LN47@parse_proc:

; 652  : 
; 653  :     case ESCAPED_CHAR:
; 654  :         if (c == '\0')

  001ac	83 7c 24 58 00	 cmp	 DWORD PTR c$[rsp], 0
  001b1	75 08		 jne	 SHORT $LN46@parse_proc

; 655  :             c = '\n';

  001b3	c7 44 24 58 0a
	00 00 00	 mov	 DWORD PTR c$[rsp], 10
$LN46@parse_proc:

; 656  :         if (parse_add_char(self, c) < 0)

  001bb	8b 54 24 58	 mov	 edx, DWORD PTR c$[rsp]
  001bf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001c4	e8 00 00 00 00	 call	 parse_add_char
  001c9	85 c0		 test	 eax, eax
  001cb	7d 0a		 jge	 SHORT $LN45@parse_proc

; 657  :             return -1;

  001cd	b8 ff ff ff ff	 mov	 eax, -1
  001d2	e9 36 03 00 00	 jmp	 $LN71@parse_proc
$LN45@parse_proc:

; 658  :         self->state = IN_FIELD;

  001d7	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  001dc	c7 40 78 03 00
	00 00		 mov	 DWORD PTR [rax+120], 3

; 659  :         break;

  001e3	e9 23 03 00 00	 jmp	 $LN69@parse_proc
$LN44@parse_proc:

; 660  : 
; 661  :     case IN_FIELD:
; 662  :         /* in unquoted field */
; 663  :         if (c == '\n' || c == '\r' || c == '\0') {

  001e8	83 7c 24 58 0a	 cmp	 DWORD PTR c$[rsp], 10
  001ed	74 0e		 je	 SHORT $LN42@parse_proc
  001ef	83 7c 24 58 0d	 cmp	 DWORD PTR c$[rsp], 13
  001f4	74 07		 je	 SHORT $LN42@parse_proc
  001f6	83 7c 24 58 00	 cmp	 DWORD PTR c$[rsp], 0
  001fb	75 3f		 jne	 SHORT $LN43@parse_proc
$LN42@parse_proc:

; 664  :             /* end of line - return [fields] */
; 665  :             if (parse_save_field(self) < 0)

  001fd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00202	e8 00 00 00 00	 call	 parse_save_field
  00207	85 c0		 test	 eax, eax
  00209	7d 0a		 jge	 SHORT $LN41@parse_proc

; 666  :                 return -1;

  0020b	b8 ff ff ff ff	 mov	 eax, -1
  00210	e9 f8 02 00 00	 jmp	 $LN71@parse_proc
$LN41@parse_proc:

; 667  :             self->state = (c == '\0' ? START_RECORD : EAT_CRNL);

  00215	83 7c 24 58 00	 cmp	 DWORD PTR c$[rsp], 0
  0021a	75 0a		 jne	 SHORT $LN75@parse_proc
  0021c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv151[rsp], 0
  00224	eb 08		 jmp	 SHORT $LN76@parse_proc
$LN75@parse_proc:
  00226	c7 44 24 30 07
	00 00 00	 mov	 DWORD PTR tv151[rsp], 7
$LN76@parse_proc:
  0022e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00233	8b 4c 24 30	 mov	 ecx, DWORD PTR tv151[rsp]
  00237	89 48 78	 mov	 DWORD PTR [rax+120], ecx
  0023a	eb 6c		 jmp	 SHORT $LN40@parse_proc
$LN43@parse_proc:

; 668  :         }
; 669  :         else if (c == dialect->escapechar) {

  0023c	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  00241	8b 40 6c	 mov	 eax, DWORD PTR [rax+108]
  00244	39 44 24 58	 cmp	 DWORD PTR c$[rsp], eax
  00248	75 0e		 jne	 SHORT $LN39@parse_proc

; 670  :             /* possible escaped character */
; 671  :             self->state = ESCAPED_CHAR;

  0024a	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0024f	c7 40 78 02 00
	00 00		 mov	 DWORD PTR [rax+120], 2
  00256	eb 50		 jmp	 SHORT $LN38@parse_proc
$LN39@parse_proc:

; 672  :         }
; 673  :         else if (c == dialect->delimiter) {

  00258	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  0025d	8b 40 64	 mov	 eax, DWORD PTR [rax+100]
  00260	39 44 24 58	 cmp	 DWORD PTR c$[rsp], eax
  00264	75 26		 jne	 SHORT $LN37@parse_proc

; 674  :             /* save field - wait for new field */
; 675  :             if (parse_save_field(self) < 0)

  00266	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0026b	e8 00 00 00 00	 call	 parse_save_field
  00270	85 c0		 test	 eax, eax
  00272	7d 0a		 jge	 SHORT $LN36@parse_proc

; 676  :                 return -1;

  00274	b8 ff ff ff ff	 mov	 eax, -1
  00279	e9 8f 02 00 00	 jmp	 $LN71@parse_proc
$LN36@parse_proc:

; 677  :             self->state = START_FIELD;

  0027e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00283	c7 40 78 01 00
	00 00		 mov	 DWORD PTR [rax+120], 1

; 678  :         }
; 679  :         else {

  0028a	eb 1c		 jmp	 SHORT $LN35@parse_proc
$LN37@parse_proc:

; 680  :             /* normal character - save in field */
; 681  :             if (parse_add_char(self, c) < 0)

  0028c	8b 54 24 58	 mov	 edx, DWORD PTR c$[rsp]
  00290	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00295	e8 00 00 00 00	 call	 parse_add_char
  0029a	85 c0		 test	 eax, eax
  0029c	7d 0a		 jge	 SHORT $LN34@parse_proc

; 682  :                 return -1;

  0029e	b8 ff ff ff ff	 mov	 eax, -1
  002a3	e9 65 02 00 00	 jmp	 $LN71@parse_proc
$LN34@parse_proc:
$LN35@parse_proc:
$LN38@parse_proc:
$LN40@parse_proc:

; 683  :         }
; 684  :         break;

  002a8	e9 5e 02 00 00	 jmp	 $LN69@parse_proc
$LN33@parse_proc:

; 685  : 
; 686  :     case IN_QUOTED_FIELD:
; 687  :         /* in quoted field */
; 688  :         if (c == '\0')

  002ad	83 7c 24 58 00	 cmp	 DWORD PTR c$[rsp], 0
  002b2	75 02		 jne	 SHORT $LN32@parse_proc
  002b4	eb 7b		 jmp	 SHORT $LN31@parse_proc
$LN32@parse_proc:

; 689  :             ;
; 690  :         else if (c == dialect->escapechar) {

  002b6	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  002bb	8b 40 6c	 mov	 eax, DWORD PTR [rax+108]
  002be	39 44 24 58	 cmp	 DWORD PTR c$[rsp], eax
  002c2	75 0e		 jne	 SHORT $LN30@parse_proc

; 691  :             /* Possible escape character */
; 692  :             self->state = ESCAPE_IN_QUOTED_FIELD;

  002c4	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  002c9	c7 40 78 05 00
	00 00		 mov	 DWORD PTR [rax+120], 5

; 693  :         }
; 694  :         else if (c == dialect->quotechar &&

  002d0	eb 5f		 jmp	 SHORT $LN29@parse_proc
$LN30@parse_proc:

; 695  :                  dialect->quoting != QUOTE_NONE) {

  002d2	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  002d7	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  002da	39 44 24 58	 cmp	 DWORD PTR c$[rsp], eax
  002de	75 35		 jne	 SHORT $LN28@parse_proc
  002e0	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  002e5	83 b8 80 00 00
	00 03		 cmp	 DWORD PTR [rax+128], 3
  002ec	74 27		 je	 SHORT $LN28@parse_proc

; 696  :             if (dialect->doublequote) {

  002ee	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  002f3	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  002f7	74 0e		 je	 SHORT $LN27@parse_proc

; 697  :                 /* doublequote; " represented by "" */
; 698  :                 self->state = QUOTE_IN_QUOTED_FIELD;

  002f9	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  002fe	c7 40 78 06 00
	00 00		 mov	 DWORD PTR [rax+120], 6

; 699  :             }
; 700  :             else {

  00305	eb 0c		 jmp	 SHORT $LN26@parse_proc
$LN27@parse_proc:

; 701  :                 /* end of quote part of field */
; 702  :                 self->state = IN_FIELD;

  00307	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0030c	c7 40 78 03 00
	00 00		 mov	 DWORD PTR [rax+120], 3
$LN26@parse_proc:

; 703  :             }
; 704  :         }
; 705  :         else {

  00313	eb 1c		 jmp	 SHORT $LN25@parse_proc
$LN28@parse_proc:

; 706  :             /* normal character - save in field */
; 707  :             if (parse_add_char(self, c) < 0)

  00315	8b 54 24 58	 mov	 edx, DWORD PTR c$[rsp]
  00319	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0031e	e8 00 00 00 00	 call	 parse_add_char
  00323	85 c0		 test	 eax, eax
  00325	7d 0a		 jge	 SHORT $LN24@parse_proc

; 708  :                 return -1;

  00327	b8 ff ff ff ff	 mov	 eax, -1
  0032c	e9 dc 01 00 00	 jmp	 $LN71@parse_proc
$LN24@parse_proc:
$LN25@parse_proc:
$LN29@parse_proc:
$LN31@parse_proc:

; 709  :         }
; 710  :         break;

  00331	e9 d5 01 00 00	 jmp	 $LN69@parse_proc
$LN23@parse_proc:

; 711  : 
; 712  :     case ESCAPE_IN_QUOTED_FIELD:
; 713  :         if (c == '\0')

  00336	83 7c 24 58 00	 cmp	 DWORD PTR c$[rsp], 0
  0033b	75 08		 jne	 SHORT $LN22@parse_proc

; 714  :             c = '\n';

  0033d	c7 44 24 58 0a
	00 00 00	 mov	 DWORD PTR c$[rsp], 10
$LN22@parse_proc:

; 715  :         if (parse_add_char(self, c) < 0)

  00345	8b 54 24 58	 mov	 edx, DWORD PTR c$[rsp]
  00349	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0034e	e8 00 00 00 00	 call	 parse_add_char
  00353	85 c0		 test	 eax, eax
  00355	7d 0a		 jge	 SHORT $LN21@parse_proc

; 716  :             return -1;

  00357	b8 ff ff ff ff	 mov	 eax, -1
  0035c	e9 ac 01 00 00	 jmp	 $LN71@parse_proc
$LN21@parse_proc:

; 717  :         self->state = IN_QUOTED_FIELD;

  00361	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00366	c7 40 78 04 00
	00 00		 mov	 DWORD PTR [rax+120], 4

; 718  :         break;

  0036d	e9 99 01 00 00	 jmp	 $LN69@parse_proc
$LN20@parse_proc:

; 719  : 
; 720  :     case QUOTE_IN_QUOTED_FIELD:
; 721  :         /* doublequote - seen a quote in an quoted field */
; 722  :         if (dialect->quoting != QUOTE_NONE &&
; 723  :             c == dialect->quotechar) {

  00372	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  00377	83 b8 80 00 00
	00 03		 cmp	 DWORD PTR [rax+128], 3
  0037e	74 3b		 je	 SHORT $LN19@parse_proc
  00380	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  00385	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  00388	39 44 24 58	 cmp	 DWORD PTR c$[rsp], eax
  0038c	75 2d		 jne	 SHORT $LN19@parse_proc

; 724  :             /* save "" as " */
; 725  :             if (parse_add_char(self, c) < 0)

  0038e	8b 54 24 58	 mov	 edx, DWORD PTR c$[rsp]
  00392	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00397	e8 00 00 00 00	 call	 parse_add_char
  0039c	85 c0		 test	 eax, eax
  0039e	7d 0a		 jge	 SHORT $LN18@parse_proc

; 726  :                 return -1;

  003a0	b8 ff ff ff ff	 mov	 eax, -1
  003a5	e9 63 01 00 00	 jmp	 $LN71@parse_proc
$LN18@parse_proc:

; 727  :             self->state = IN_QUOTED_FIELD;

  003aa	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  003af	c7 40 78 04 00
	00 00		 mov	 DWORD PTR [rax+120], 4
  003b6	e9 ff 00 00 00	 jmp	 $LN17@parse_proc
$LN19@parse_proc:

; 728  :         }
; 729  :         else if (c == dialect->delimiter) {

  003bb	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  003c0	8b 40 64	 mov	 eax, DWORD PTR [rax+100]
  003c3	39 44 24 58	 cmp	 DWORD PTR c$[rsp], eax
  003c7	75 29		 jne	 SHORT $LN16@parse_proc

; 730  :             /* save field - wait for new field */
; 731  :             if (parse_save_field(self) < 0)

  003c9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  003ce	e8 00 00 00 00	 call	 parse_save_field
  003d3	85 c0		 test	 eax, eax
  003d5	7d 0a		 jge	 SHORT $LN15@parse_proc

; 732  :                 return -1;

  003d7	b8 ff ff ff ff	 mov	 eax, -1
  003dc	e9 2c 01 00 00	 jmp	 $LN71@parse_proc
$LN15@parse_proc:

; 733  :             self->state = START_FIELD;

  003e1	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  003e6	c7 40 78 01 00
	00 00		 mov	 DWORD PTR [rax+120], 1
  003ed	e9 c8 00 00 00	 jmp	 $LN14@parse_proc
$LN16@parse_proc:

; 734  :         }
; 735  :         else if (c == '\n' || c == '\r' || c == '\0') {

  003f2	83 7c 24 58 0a	 cmp	 DWORD PTR c$[rsp], 10
  003f7	74 0e		 je	 SHORT $LN12@parse_proc
  003f9	83 7c 24 58 0d	 cmp	 DWORD PTR c$[rsp], 13
  003fe	74 07		 je	 SHORT $LN12@parse_proc
  00400	83 7c 24 58 00	 cmp	 DWORD PTR c$[rsp], 0
  00405	75 3f		 jne	 SHORT $LN13@parse_proc
$LN12@parse_proc:

; 736  :             /* end of line - return [fields] */
; 737  :             if (parse_save_field(self) < 0)

  00407	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0040c	e8 00 00 00 00	 call	 parse_save_field
  00411	85 c0		 test	 eax, eax
  00413	7d 0a		 jge	 SHORT $LN11@parse_proc

; 738  :                 return -1;

  00415	b8 ff ff ff ff	 mov	 eax, -1
  0041a	e9 ee 00 00 00	 jmp	 $LN71@parse_proc
$LN11@parse_proc:

; 739  :             self->state = (c == '\0' ? START_RECORD : EAT_CRNL);

  0041f	83 7c 24 58 00	 cmp	 DWORD PTR c$[rsp], 0
  00424	75 0a		 jne	 SHORT $LN77@parse_proc
  00426	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv210[rsp], 0
  0042e	eb 08		 jmp	 SHORT $LN78@parse_proc
$LN77@parse_proc:
  00430	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR tv210[rsp], 7
$LN78@parse_proc:
  00438	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0043d	8b 4c 24 34	 mov	 ecx, DWORD PTR tv210[rsp]
  00441	89 48 78	 mov	 DWORD PTR [rax+120], ecx
  00444	eb 74		 jmp	 SHORT $LN10@parse_proc
$LN13@parse_proc:

; 740  :         }
; 741  :         else if (!dialect->strict) {

  00446	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
  0044b	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [rax+132], 0
  00452	75 2a		 jne	 SHORT $LN9@parse_proc

; 742  :             if (parse_add_char(self, c) < 0)

  00454	8b 54 24 58	 mov	 edx, DWORD PTR c$[rsp]
  00458	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0045d	e8 00 00 00 00	 call	 parse_add_char
  00462	85 c0		 test	 eax, eax
  00464	7d 0a		 jge	 SHORT $LN8@parse_proc

; 743  :                 return -1;

  00466	b8 ff ff ff ff	 mov	 eax, -1
  0046b	e9 9d 00 00 00	 jmp	 $LN71@parse_proc
$LN8@parse_proc:

; 744  :             self->state = IN_FIELD;

  00470	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00475	c7 40 78 03 00
	00 00		 mov	 DWORD PTR [rax+120], 3

; 745  :         }
; 746  :         else {

  0047c	eb 3c		 jmp	 SHORT $LN7@parse_proc
$LN9@parse_proc:

; 747  :             /* illegal */
; 748  :             PyErr_Format(_csvstate_global->error_obj, "'%c' expected after '%c'",
; 749  :                             dialect->delimiter,
; 750  :                             dialect->quotechar);

  0047e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  00485	e8 00 00 00 00	 call	 PyState_FindModule
  0048a	48 8b c8	 mov	 rcx, rax
  0048d	e8 00 00 00 00	 call	 PyModule_GetState
  00492	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dialect$[rsp]
  00497	44 8b 49 68	 mov	 r9d, DWORD PTR [rcx+104]
  0049b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dialect$[rsp]
  004a0	44 8b 41 64	 mov	 r8d, DWORD PTR [rcx+100]
  004a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HMHEPCIE@?8?$CFc?8?5expected?5after?5?8?$CFc?8?$AA@
  004ab	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  004ae	e8 00 00 00 00	 call	 PyErr_Format

; 751  :             return -1;

  004b3	b8 ff ff ff ff	 mov	 eax, -1
  004b8	eb 53		 jmp	 SHORT $LN71@parse_proc
$LN7@parse_proc:
$LN10@parse_proc:
$LN14@parse_proc:
$LN17@parse_proc:

; 752  :         }
; 753  :         break;

  004ba	eb 4f		 jmp	 SHORT $LN69@parse_proc
$LN6@parse_proc:

; 754  : 
; 755  :     case EAT_CRNL:
; 756  :         if (c == '\n' || c == '\r')

  004bc	83 7c 24 58 0a	 cmp	 DWORD PTR c$[rsp], 10
  004c1	74 07		 je	 SHORT $LN4@parse_proc
  004c3	83 7c 24 58 0d	 cmp	 DWORD PTR c$[rsp], 13
  004c8	75 02		 jne	 SHORT $LN5@parse_proc
$LN4@parse_proc:

; 757  :             ;
; 758  :         else if (c == '\0')

  004ca	eb 3f		 jmp	 SHORT $LN3@parse_proc
$LN5@parse_proc:
  004cc	83 7c 24 58 00	 cmp	 DWORD PTR c$[rsp], 0
  004d1	75 0e		 jne	 SHORT $LN2@parse_proc

; 759  :             self->state = START_RECORD;

  004d3	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  004d8	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [rax+120], 0

; 760  :         else {

  004df	eb 2a		 jmp	 SHORT $LN1@parse_proc
$LN2@parse_proc:

; 761  :             PyErr_Format(_csvstate_global->error_obj, "new-line character seen in unquoted field - do you need to open the file in universal-newline mode?");

  004e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  004e8	e8 00 00 00 00	 call	 PyState_FindModule
  004ed	48 8b c8	 mov	 rcx, rax
  004f0	e8 00 00 00 00	 call	 PyModule_GetState
  004f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GE@PLHPFOMK@new?9line?5character?5seen?5in?5unquo@
  004fc	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  004ff	e8 00 00 00 00	 call	 PyErr_Format

; 762  :             return -1;

  00504	b8 ff ff ff ff	 mov	 eax, -1
  00509	eb 02		 jmp	 SHORT $LN71@parse_proc
$LN1@parse_proc:
$LN3@parse_proc:
$LN69@parse_proc:

; 763  :         }
; 764  :         break;
; 765  : 
; 766  :     }
; 767  :     return 0;

  0050b	33 c0		 xor	 eax, eax
$LN71@parse_proc:

; 768  : }

  0050d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00511	c3		 ret	 0
  00512	66 90		 npad	 2
$LN79@parse_proc:
  00514	00 00 00 00	 DD	 $LN68@parse_proc
  00518	00 00 00 00	 DD	 $LN63@parse_proc
  0051c	00 00 00 00	 DD	 $LN47@parse_proc
  00520	00 00 00 00	 DD	 $LN44@parse_proc
  00524	00 00 00 00	 DD	 $LN33@parse_proc
  00528	00 00 00 00	 DD	 $LN23@parse_proc
  0052c	00 00 00 00	 DD	 $LN20@parse_proc
  00530	00 00 00 00	 DD	 $LN6@parse_proc
parse_process_char ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@LGBILMFL@field?5larger?5than?5field?5limit?5?$CI?$CF@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_add_char DD imagerel parse_add_char
	DD	imagerel parse_add_char+239
	DD	imagerel $unwind$parse_add_char
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_add_char DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT ??_C@_0CE@LGBILMFL@field?5larger?5than?5field?5limit?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CE@LGBILMFL@field?5larger?5than?5field?5limit?5?$CI?$CF@ DB 'field'
	DB	' larger than field limit (%ld)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parse_add_char
_TEXT	SEGMENT
tv73 = 32
self$ = 64
c$ = 72
parse_add_char PROC					; COMDAT

; 588  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 589  :     if (self->field_len >= _csvstate_global->field_limit) {

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  00014	e8 00 00 00 00	 call	 PyState_FindModule
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 PyModule_GetState
  00021	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  00025	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0002a	48 39 81 90 00
	00 00		 cmp	 QWORD PTR [rcx+144], rax
  00031	7c 4c		 jl	 SHORT $LN2@parse_add_

; 590  :         PyErr_Format(_csvstate_global->error_obj, "field larger than field limit (%ld)",
; 591  :                      _csvstate_global->field_limit);

  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  0003a	e8 00 00 00 00	 call	 PyState_FindModule
  0003f	48 8b c8	 mov	 rcx, rax
  00042	e8 00 00 00 00	 call	 PyModule_GetState
  00047	48 89 44 24 20	 mov	 QWORD PTR tv73[rsp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  00053	e8 00 00 00 00	 call	 PyState_FindModule
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 PyModule_GetState
  00060	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv73[rsp]
  00065	44 8b 41 10	 mov	 r8d, DWORD PTR [rcx+16]
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@LGBILMFL@field?5larger?5than?5field?5limit?5?$CI?$CF@
  00070	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00073	e8 00 00 00 00	 call	 PyErr_Format

; 592  :         return -1;

  00078	b8 ff ff ff ff	 mov	 eax, -1
  0007d	eb 6b		 jmp	 SHORT $LN3@parse_add_
$LN2@parse_add_:

; 593  :     }
; 594  :     if (self->field_len == self->field_size && !parse_grow_buff(self))

  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00084	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00089	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00090	48 39 88 90 00
	00 00		 cmp	 QWORD PTR [rax+144], rcx
  00097	75 15		 jne	 SHORT $LN1@parse_add_
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0009e	e8 00 00 00 00	 call	 parse_grow_buff
  000a3	85 c0		 test	 eax, eax
  000a5	75 07		 jne	 SHORT $LN1@parse_add_

; 595  :         return -1;

  000a7	b8 ff ff ff ff	 mov	 eax, -1
  000ac	eb 3c		 jmp	 SHORT $LN3@parse_add_
$LN1@parse_add_:

; 596  :     self->field[self->field_len++] = c;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000b3	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000bf	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  000c6	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  000ca	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx
  000cd	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000d2	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000d9	48 ff c0	 inc	 rax
  000dc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000e1	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 597  :     return 0;

  000e8	33 c0		 xor	 eax, eax
$LN3@parse_add_:

; 598  : }

  000ea	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ee	c3		 ret	 0
parse_add_char ENDP
_TEXT	ENDS
EXTRN	PyMem_Realloc:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
EXTRN	PyMem_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_grow_buff DD imagerel parse_grow_buff
	DD	imagerel parse_grow_buff+372
	DD	imagerel $unwind$parse_grow_buff
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_grow_buff DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parse_grow_buff
_TEXT	SEGMENT
field$20970 = 32
tv78 = 40
tv93 = 48
self$ = 80
parse_grow_buff PROC					; COMDAT

; 563  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 564  :     if (self->field_size == 0) {

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00016	0f 85 86 00 00
	00		 jne	 $LN5@parse_grow

; 565  :         self->field_size = 4096;

  0001c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00021	48 c7 80 88 00
	00 00 00 10 00
	00		 mov	 QWORD PTR [rax+136], 4096 ; 00001000H

; 566  :         if (self->field != NULL)

  0002c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00031	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00039	74 11		 je	 SHORT $LN4@parse_grow

; 567  :             PyMem_Free(self->field);

  0003b	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00040	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00047	e8 00 00 00 00	 call	 PyMem_Free
$LN4@parse_grow:

; 568  :         self->field = PyMem_New(Py_UCS4, self->field_size);

  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00051	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  0005b	48 39 88 88 00
	00 00		 cmp	 QWORD PTR [rax+136], rcx
  00062	76 0b		 jbe	 SHORT $LN8@parse_grow
  00064	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv78[rsp], 0
  0006d	eb 1d		 jmp	 SHORT $LN9@parse_grow
$LN8@parse_grow:
  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00074	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  0007b	48 c1 e0 02	 shl	 rax, 2
  0007f	48 8b c8	 mov	 rcx, rax
  00082	e8 00 00 00 00	 call	 PyMem_Malloc
  00087	48 89 44 24 28	 mov	 QWORD PTR tv78[rsp], rax
$LN9@parse_grow:
  0008c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00091	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv78[rsp]
  00096	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 569  :     }
; 570  :     else {

  0009d	e9 b0 00 00 00	 jmp	 $LN3@parse_grow
$LN5@parse_grow:

; 571  :         Py_UCS4 *field = self->field;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000a7	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000ae	48 89 44 24 20	 mov	 QWORD PTR field$20970[rsp], rax

; 572  :         if (self->field_size > PY_SSIZE_T_MAX / 2) {

  000b3	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b8	48 b9 ff ff ff
	ff ff ff ff 3f	 mov	 rcx, 4611686018427387903 ; 3fffffffffffffffH
  000c2	48 39 88 88 00
	00 00		 cmp	 QWORD PTR [rax+136], rcx
  000c9	7e 0c		 jle	 SHORT $LN2@parse_grow

; 573  :             PyErr_NoMemory();

  000cb	e8 00 00 00 00	 call	 PyErr_NoMemory

; 574  :             return 0;

  000d0	33 c0		 xor	 eax, eax
  000d2	e9 98 00 00 00	 jmp	 $LN6@parse_grow
$LN2@parse_grow:

; 575  :         }
; 576  :         self->field_size *= 2;

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000dc	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  000e3	48 d1 e0	 shl	 rax, 1
  000e6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000eb	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 577  :         self->field = PyMem_Resize(field, Py_UCS4, self->field_size);

  000f2	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000f7	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  00101	48 39 88 88 00
	00 00		 cmp	 QWORD PTR [rax+136], rcx
  00108	76 0b		 jbe	 SHORT $LN10@parse_grow
  0010a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv93[rsp], 0
  00113	eb 22		 jmp	 SHORT $LN11@parse_grow
$LN10@parse_grow:
  00115	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0011a	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00121	48 c1 e0 02	 shl	 rax, 2
  00125	48 8b d0	 mov	 rdx, rax
  00128	48 8b 4c 24 20	 mov	 rcx, QWORD PTR field$20970[rsp]
  0012d	e8 00 00 00 00	 call	 PyMem_Realloc
  00132	48 89 44 24 30	 mov	 QWORD PTR tv93[rsp], rax
$LN11@parse_grow:
  00137	48 8b 44 24 30	 mov	 rax, QWORD PTR tv93[rsp]
  0013c	48 89 44 24 20	 mov	 QWORD PTR field$20970[rsp], rax
  00141	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00146	48 8b 4c 24 20	 mov	 rcx, QWORD PTR field$20970[rsp]
  0014b	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN3@parse_grow:

; 578  :     }
; 579  :     if (self->field == NULL) {

  00152	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00157	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0015f	75 09		 jne	 SHORT $LN1@parse_grow

; 580  :         PyErr_NoMemory();

  00161	e8 00 00 00 00	 call	 PyErr_NoMemory

; 581  :         return 0;

  00166	33 c0		 xor	 eax, eax
  00168	eb 05		 jmp	 SHORT $LN6@parse_grow
$LN1@parse_grow:

; 582  :     }
; 583  :     return 1;

  0016a	b8 01 00 00 00	 mov	 eax, 1
$LN6@parse_grow:

; 584  : }

  0016f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00173	c3		 ret	 0
parse_grow_buff ENDP
_TEXT	ENDS
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_reset DD imagerel parse_reset
	DD	imagerel parse_reset+126
	DD	imagerel $unwind$parse_reset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_reset DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parse_reset
_TEXT	SEGMENT
self$ = 48
parse_reset PROC					; COMDAT

; 772  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN5@parse_rese:

; 773  :     Py_XDECREF(self->fields);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00013	74 0e		 je	 SHORT $LN2@parse_rese
  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001a	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0001e	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@parse_rese:
  00023	33 c0		 xor	 eax, eax
  00025	85 c0		 test	 eax, eax
  00027	75 e0		 jne	 SHORT $LN5@parse_rese

; 774  :     self->fields = PyList_New(0);

  00029	33 c9		 xor	 ecx, ecx
  0002b	e8 00 00 00 00	 call	 PyList_New
  00030	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00035	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 775  :     if (self->fields == NULL)

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003e	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00043	75 07		 jne	 SHORT $LN1@parse_rese

; 776  :         return -1;

  00045	b8 ff ff ff ff	 mov	 eax, -1
  0004a	eb 2d		 jmp	 SHORT $LN6@parse_rese
$LN1@parse_rese:

; 777  :     self->field_len = 0;

  0004c	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00051	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 778  :     self->state = START_RECORD;

  0005c	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00061	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [rax+120], 0

; 779  :     self->numeric_field = 0;

  00068	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0006d	c7 80 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+152], 0

; 780  :     return 0;

  00077	33 c0		 xor	 eax, eax
$LN6@parse_rese:

; 781  : }

  00079	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007d	c3		 ret	 0
parse_reset ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Reader_dealloc DD imagerel Reader_dealloc
	DD	imagerel Reader_dealloc+162
	DD	imagerel $unwind$Reader_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Reader_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Reader_dealloc
_TEXT	SEGMENT
self$ = 48
Reader_dealloc PROC					; COMDAT

; 855  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 856  :     PyObject_GC_UnTrack(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN13@Reader_dea:

; 857  :     Py_XDECREF(self->dialect);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001d	74 0e		 je	 SHORT $LN10@Reader_dea
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00028	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@Reader_dea:
  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 e0		 jne	 SHORT $LN13@Reader_dea
$LN9@Reader_dea:

; 858  :     Py_XDECREF(self->input_iter);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00038	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0003d	74 0e		 je	 SHORT $LN6@Reader_dea
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00044	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00048	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@Reader_dea:
  0004d	33 c0		 xor	 eax, eax
  0004f	85 c0		 test	 eax, eax
  00051	75 e0		 jne	 SHORT $LN9@Reader_dea
$LN5@Reader_dea:

; 859  :     Py_XDECREF(self->fields);

  00053	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00058	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0005d	74 0e		 je	 SHORT $LN2@Reader_dea
  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00064	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00068	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@Reader_dea:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 e0		 jne	 SHORT $LN5@Reader_dea

; 860  :     if (self->field != NULL)

  00073	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00078	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00080	74 11		 je	 SHORT $LN1@Reader_dea

; 861  :         PyMem_Free(self->field);

  00082	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00087	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0008e	e8 00 00 00 00	 call	 PyMem_Free
$LN1@Reader_dea:

; 862  :     PyObject_GC_Del(self);

  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00098	e8 00 00 00 00	 call	 PyObject_GC_Del

; 863  : }

  0009d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a1	c3		 ret	 0
Reader_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@MBGFCFMF@Reader_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$Reader_traverse DD imagerel Reader_traverse
	DD	imagerel Reader_traverse+299
	DD	imagerel $unwind$Reader_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Reader_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BA@MBGFCFMF@Reader_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@MBGFCFMF@Reader_traverse?$AA@ DB 'Reader_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Reader_traverse
_TEXT	SEGMENT
vret$21209 = 32
vret$21217 = 36
vret$21225 = 40
self$ = 64
visit$ = 72
arg$ = 80
Reader_traverse PROC					; COMDAT

; 867  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN18@Reader_tra:

; 868  :     Py_VISIT(self->dialect);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN15@Reader_tra
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 64 03 00
	00		 mov	 r8d, 868		; 00000364H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@MBGFCFMF@Reader_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@Reader_tra:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 26		 je	 SHORT $LN14@Reader_tra
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21209[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21209[rsp], 0
  0005f	74 09		 je	 SHORT $LN13@Reader_tra
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21209[rsp]
  00065	e9 bc 00 00 00	 jmp	 $LN19@Reader_tra
$LN13@Reader_tra:
$LN14@Reader_tra:
  0006a	33 c0		 xor	 eax, eax
  0006c	85 c0		 test	 eax, eax
  0006e	75 a3		 jne	 SHORT $LN18@Reader_tra
$LN12@Reader_tra:

; 869  :     Py_VISIT(self->input_iter);

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	74 1c		 je	 SHORT $LN9@Reader_tra
  00079	45 33 c9	 xor	 r9d, r9d
  0007c	41 b8 65 03 00
	00		 mov	 r8d, 869		; 00000365H
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@MBGFCFMF@Reader_traverse?$AA@
  00090	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@Reader_tra:
  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0009a	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0009f	74 23		 je	 SHORT $LN8@Reader_tra
  000a1	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a6	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000ab	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000af	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b3	89 44 24 24	 mov	 DWORD PTR vret$21217[rsp], eax
  000b7	83 7c 24 24 00	 cmp	 DWORD PTR vret$21217[rsp], 0
  000bc	74 06		 je	 SHORT $LN7@Reader_tra
  000be	8b 44 24 24	 mov	 eax, DWORD PTR vret$21217[rsp]
  000c2	eb 62		 jmp	 SHORT $LN19@Reader_tra
$LN7@Reader_tra:
$LN8@Reader_tra:
  000c4	33 c0		 xor	 eax, eax
  000c6	85 c0		 test	 eax, eax
  000c8	75 a6		 jne	 SHORT $LN12@Reader_tra
$LN6@Reader_tra:

; 870  :     Py_VISIT(self->fields);

  000ca	e8 00 00 00 00	 call	 _Py_PXCTX
  000cf	85 c0		 test	 eax, eax
  000d1	74 1c		 je	 SHORT $LN3@Reader_tra
  000d3	45 33 c9	 xor	 r9d, r9d
  000d6	41 b8 66 03 00
	00		 mov	 r8d, 870		; 00000366H
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@MBGFCFMF@Reader_traverse?$AA@
  000ea	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@Reader_tra:
  000ef	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000f4	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  000f9	74 23		 je	 SHORT $LN2@Reader_tra
  000fb	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00100	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00105	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00109	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  0010d	89 44 24 28	 mov	 DWORD PTR vret$21225[rsp], eax
  00111	83 7c 24 28 00	 cmp	 DWORD PTR vret$21225[rsp], 0
  00116	74 06		 je	 SHORT $LN1@Reader_tra
  00118	8b 44 24 28	 mov	 eax, DWORD PTR vret$21225[rsp]
  0011c	eb 08		 jmp	 SHORT $LN19@Reader_tra
$LN1@Reader_tra:
$LN2@Reader_tra:
  0011e	33 c0		 xor	 eax, eax
  00120	85 c0		 test	 eax, eax
  00122	75 a6		 jne	 SHORT $LN6@Reader_tra

; 871  :     return 0;

  00124	33 c0		 xor	 eax, eax
$LN19@Reader_tra:

; 872  : }

  00126	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0012a	c3		 ret	 0
Reader_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@MHKAFMBP@Reader_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$Reader_clear DD imagerel Reader_clear
	DD	imagerel Reader_clear+319
	DD	imagerel $unwind$Reader_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Reader_clear DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0N@MHKAFMBP@Reader_clear?$AA@
CONST	SEGMENT
??_C@_0N@MHKAFMBP@Reader_clear?$AA@ DB 'Reader_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Reader_clear
_TEXT	SEGMENT
_py_tmp$21237 = 48
_py_tmp$21245 = 56
_py_tmp$21253 = 64
self$ = 96
Reader_clear PROC					; COMDAT

; 876  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN12@Reader_cle:

; 877  :     Py_CLEAR(self->dialect);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	74 53		 je	 SHORT $LN9@Reader_cle
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00022	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  00026	41 b8 6d 03 00
	00		 mov	 r8d, 877		; 0000036dH
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MHKAFMBP@Reader_clear?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN9@Reader_cle
  00043	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00048	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21237[rsp], rax
  00051	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00056	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21237[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@Reader_cle:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN12@Reader_cle
$LN8@Reader_cle:

; 878  :     Py_CLEAR(self->input_iter);

  0006e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00073	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00078	74 53		 je	 SHORT $LN5@Reader_cle
  0007a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00082	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00087	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  0008b	41 b8 6e 03 00
	00		 mov	 r8d, 878		; 0000036eH
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MHKAFMBP@Reader_clear?$AA@
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 25		 jne	 SHORT $LN5@Reader_cle
  000a8	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000ad	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000b1	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$21245[rsp], rax
  000b6	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000bb	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  000c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$21245[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@Reader_cle:
  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 9b		 jne	 SHORT $LN8@Reader_cle
$LN4@Reader_cle:

; 879  :     Py_CLEAR(self->fields);

  000d3	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000d8	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  000dd	74 53		 je	 SHORT $LN1@Reader_cle
  000df	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e7	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000ec	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  000f0	41 b8 6f 03 00
	00		 mov	 r8d, 879		; 0000036fH
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MHKAFMBP@Reader_clear?$AA@
  00104	e8 00 00 00 00	 call	 _PyParallel_Guard
  00109	85 c0		 test	 eax, eax
  0010b	75 25		 jne	 SHORT $LN1@Reader_cle
  0010d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00112	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00116	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$21253[rsp], rax
  0011b	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00120	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  00128	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$21253[rsp]
  0012d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@Reader_cle:
  00132	33 c0		 xor	 eax, eax
  00134	85 c0		 test	 eax, eax
  00136	75 9b		 jne	 SHORT $LN4@Reader_cle

; 880  :     return 0;

  00138	33 c0		 xor	 eax, eax

; 881  : }

  0013a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013e	c3		 ret	 0
Reader_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@KNOECLE@argument?51?5must?5be?5an?5iterator?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyObject_GC_Track:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$csv_reader DD imagerel csv_reader
	DD	imagerel csv_reader+419
	DD	imagerel $unwind$csv_reader
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$csv_reader DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BP@KNOECLE@argument?51?5must?5be?5an?5iterator?$AA@
CONST	SEGMENT
??_C@_0BP@KNOECLE@argument?51?5must?5be?5an?5iterator?$AA@ DB 'argument 1'
	DB	' must be an iterator', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT csv_reader
_TEXT	SEGMENT
self$ = 48
dialect$ = 56
iterator$ = 64
tv70 = 72
module$ = 96
args$ = 104
keyword_args$ = 112
csv_reader PROC						; COMDAT

; 940  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 941  :     PyObject * iterator, * dialect = NULL;

  00013	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR dialect$[rsp], 0

; 942  :     ReaderObj * self = PyObject_GC_New(ReaderObj, &Reader_Type);

  0001c	e8 00 00 00 00	 call	 _Py_PXCTX
  00021	85 c0		 test	 eax, eax
  00023	74 13		 je	 SHORT $LN8@csv_reader
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Reader_Type
  0002c	e8 00 00 00 00	 call	 _PxObject_New
  00031	48 89 44 24 48	 mov	 QWORD PTR tv70[rsp], rax
  00036	eb 11		 jmp	 SHORT $LN9@csv_reader
$LN8@csv_reader:
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Reader_Type
  0003f	e8 00 00 00 00	 call	 _PyObject_GC_New
  00044	48 89 44 24 48	 mov	 QWORD PTR tv70[rsp], rax
$LN9@csv_reader:
  00049	48 8b 44 24 48	 mov	 rax, QWORD PTR tv70[rsp]
  0004e	48 89 44 24 30	 mov	 QWORD PTR self$[rsp], rax

; 943  : 
; 944  :     if (!self)

  00053	48 83 7c 24 30
	00		 cmp	 QWORD PTR self$[rsp], 0
  00059	75 07		 jne	 SHORT $LN5@csv_reader

; 945  :         return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 3c 01 00 00	 jmp	 $LN6@csv_reader
$LN5@csv_reader:

; 946  : 
; 947  :     self->dialect = NULL;

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00067	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 948  :     self->fields = NULL;

  0006f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00074	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 949  :     self->input_iter = NULL;

  0007c	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00081	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 950  :     self->field = NULL;

  00089	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0008e	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 951  :     self->field_size = 0;

  00099	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0009e	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0

; 952  :     self->line_num = 0;

  000a9	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  000ae	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+156], 0

; 953  : 
; 954  :     if (parse_reset(self) < 0) {

  000b8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  000bd	e8 00 00 00 00	 call	 parse_reset
  000c2	85 c0		 test	 eax, eax
  000c4	7d 11		 jge	 SHORT $LN4@csv_reader

; 955  :         Py_DECREF(self);

  000c6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  000cb	e8 00 00 00 00	 call	 _Py_DecRef

; 956  :         return NULL;

  000d0	33 c0		 xor	 eax, eax
  000d2	e9 c7 00 00 00	 jmp	 $LN6@csv_reader
$LN4@csv_reader:

; 957  :     }
; 958  : 
; 959  :     if (!PyArg_UnpackTuple(args, "", 1, 2, &iterator, &dialect)) {

  000d7	48 8d 44 24 38	 lea	 rax, QWORD PTR dialect$[rsp]
  000dc	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e1	48 8d 44 24 40	 lea	 rax, QWORD PTR iterator$[rsp]
  000e6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000eb	41 b9 02 00 00
	00		 mov	 r9d, 2
  000f1	41 b8 01 00 00
	00		 mov	 r8d, 1
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000fe	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00103	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00108	85 c0		 test	 eax, eax
  0010a	75 11		 jne	 SHORT $LN3@csv_reader

; 960  :         Py_DECREF(self);

  0010c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00111	e8 00 00 00 00	 call	 _Py_DecRef

; 961  :         return NULL;

  00116	33 c0		 xor	 eax, eax
  00118	e9 81 00 00 00	 jmp	 $LN6@csv_reader
$LN3@csv_reader:

; 962  :     }
; 963  :     self->input_iter = PyObject_GetIter(iterator);

  0011d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR iterator$[rsp]
  00122	e8 00 00 00 00	 call	 PyObject_GetIter
  00127	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0012c	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 964  :     if (self->input_iter == NULL) {

  00130	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00135	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0013a	75 21		 jne	 SHORT $LN2@csv_reader

; 965  :         PyErr_SetString(PyExc_TypeError,
; 966  :                         "argument 1 must be an iterator");

  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@KNOECLE@argument?51?5must?5be?5an?5iterator?$AA@
  00143	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0014a	e8 00 00 00 00	 call	 PyErr_SetString

; 967  :         Py_DECREF(self);

  0014f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00154	e8 00 00 00 00	 call	 _Py_DecRef

; 968  :         return NULL;

  00159	33 c0		 xor	 eax, eax
  0015b	eb 41		 jmp	 SHORT $LN6@csv_reader
$LN2@csv_reader:

; 969  :     }
; 970  :     self->dialect = (DialectObj *)_call_dialect(dialect, keyword_args);

  0015d	48 8b 54 24 70	 mov	 rdx, QWORD PTR keyword_args$[rsp]
  00162	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dialect$[rsp]
  00167	e8 00 00 00 00	 call	 _call_dialect
  0016c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00171	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 971  :     if (self->dialect == NULL) {

  00175	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0017a	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0017f	75 0e		 jne	 SHORT $LN1@csv_reader

; 972  :         Py_DECREF(self);

  00181	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00186	e8 00 00 00 00	 call	 _Py_DecRef

; 973  :         return NULL;

  0018b	33 c0		 xor	 eax, eax
  0018d	eb 0f		 jmp	 SHORT $LN6@csv_reader
$LN1@csv_reader:

; 974  :     }
; 975  : 
; 976  :     PyObject_GC_Track(self);

  0018f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00194	e8 00 00 00 00	 call	 PyObject_GC_Track

; 977  :     return (PyObject *)self;

  00199	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
$LN6@csv_reader:

; 978  : }

  0019e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a2	c3		 ret	 0
csv_reader ENDP
_TEXT	ENDS
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ?$AA@			; `string'
PUBLIC	??_C@_03IELNPCCE@?$CIO?$CJ?$AA@			; `string'
EXTRN	PyObject_Call:PROC
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_call_dialect DD imagerel _call_dialect
	DD	imagerel _call_dialect+127
	DD	imagerel $unwind$_call_dialect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_call_dialect DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ?$AA@ DB '()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_03IELNPCCE@?$CIO?$CJ?$AA@ DB '(O)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _call_dialect
_TEXT	SEGMENT
dialect$ = 32
ctor_args$ = 40
tv67 = 48
dialect_inst$ = 80
kwargs$ = 88
_call_dialect PROC					; COMDAT

; 521  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 522  :     PyObject *ctor_args;
; 523  :     PyObject *dialect;
; 524  : 
; 525  :     ctor_args = Py_BuildValue(dialect_inst ? "(O)" : "()", dialect_inst);

  0000e	48 83 7c 24 50
	00		 cmp	 QWORD PTR dialect_inst$[rsp], 0
  00014	74 0e		 je	 SHORT $LN4@call_diale
  00016	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  0001d	48 89 44 24 30	 mov	 QWORD PTR tv67[rsp], rax
  00022	eb 0c		 jmp	 SHORT $LN5@call_diale
$LN4@call_diale:
  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  0002b	48 89 44 24 30	 mov	 QWORD PTR tv67[rsp], rax
$LN5@call_diale:
  00030	48 8b 54 24 50	 mov	 rdx, QWORD PTR dialect_inst$[rsp]
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv67[rsp]
  0003a	e8 00 00 00 00	 call	 Py_BuildValue
  0003f	48 89 44 24 28	 mov	 QWORD PTR ctor_args$[rsp], rax

; 526  :     if (ctor_args == NULL)

  00044	48 83 7c 24 28
	00		 cmp	 QWORD PTR ctor_args$[rsp], 0
  0004a	75 04		 jne	 SHORT $LN1@call_diale

; 527  :         return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	eb 2a		 jmp	 SHORT $LN2@call_diale
$LN1@call_diale:

; 528  :     dialect = PyObject_Call((PyObject *)&Dialect_Type, ctor_args, kwargs);

  00050	4c 8b 44 24 58	 mov	 r8, QWORD PTR kwargs$[rsp]
  00055	48 8b 54 24 28	 mov	 rdx, QWORD PTR ctor_args$[rsp]
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Dialect_Type
  00061	e8 00 00 00 00	 call	 PyObject_Call
  00066	48 89 44 24 20	 mov	 QWORD PTR dialect$[rsp], rax

; 529  :     Py_DECREF(ctor_args);

  0006b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ctor_args$[rsp]
  00070	e8 00 00 00 00	 call	 _Py_DecRef

; 530  :     return dialect;

  00075	48 8b 44 24 20	 mov	 rax, QWORD PTR dialect$[rsp]
$LN2@call_diale:

; 531  : }

  0007a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007e	c3		 ret	 0
_call_dialect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@BNLPKJHP@sequence?5expected?$AA@	; `string'
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyObject_Str:PROC
EXTRN	PyNumber_Check:PROC
EXTRN	PySequence_GetItem:PROC
EXTRN	PySequence_Size:PROC
EXTRN	PySequence_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$csv_writerow DD imagerel csv_writerow
	DD	imagerel csv_writerow+736
	DD	imagerel $unwind$csv_writerow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$csv_writerow DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0BC@BNLPKJHP@sequence?5expected?$AA@
CONST	SEGMENT
??_C@_0BC@BNLPKJHP@sequence?5expected?$AA@ DB 'sequence expected', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT csv_writerow
_TEXT	SEGMENT
line$ = 32
i$ = 40
len$ = 48
dialect$ = 56
result$ = 64
quoted$21575 = 72
append_ok$21574 = 76
field$21573 = 80
str$21594 = 88
tv86 = 96
tv90 = 100
tv131 = 104
tv140 = 108
tv152 = 112
self$ = 144
seq$ = 152
csv_writerow PROC					; COMDAT

; 1177 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1178 :     DialectObj *dialect = self->dialect;

  00011	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 89 44 24 38	 mov	 QWORD PTR dialect$[rsp], rax

; 1179 :     Py_ssize_t len, i;
; 1180 :     PyObject *line, *result;
; 1181 : 
; 1182 :     if (!PySequence_Check(seq))

  00022	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR seq$[rsp]
  0002a	e8 00 00 00 00	 call	 PySequence_Check
  0002f	85 c0		 test	 eax, eax
  00031	75 28		 jne	 SHORT $LN19@csv_writer

; 1183 :         return PyErr_Format(_csvstate_global->error_obj, "sequence expected");

  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  0003a	e8 00 00 00 00	 call	 PyState_FindModule
  0003f	48 8b c8	 mov	 rcx, rax
  00042	e8 00 00 00 00	 call	 PyModule_GetState
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@BNLPKJHP@sequence?5expected?$AA@
  0004e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00051	e8 00 00 00 00	 call	 PyErr_Format
  00056	e9 7d 02 00 00	 jmp	 $LN20@csv_writer
$LN19@csv_writer:

; 1184 : 
; 1185 :     len = PySequence_Length(seq);

  0005b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR seq$[rsp]
  00063	e8 00 00 00 00	 call	 PySequence_Size
  00068	48 89 44 24 30	 mov	 QWORD PTR len$[rsp], rax

; 1186 :     if (len < 0)

  0006d	48 83 7c 24 30
	00		 cmp	 QWORD PTR len$[rsp], 0
  00073	7d 07		 jge	 SHORT $LN18@csv_writer

; 1187 :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	e9 5c 02 00 00	 jmp	 $LN20@csv_writer
$LN18@csv_writer:

; 1188 : 
; 1189 :     /* Join all fields in internal buffer.
; 1190 :      */
; 1191 :     join_reset(self);

  0007c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00084	e8 00 00 00 00	 call	 join_reset

; 1192 :     for (i = 0; i < len; i++) {

  00089	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00092	eb 0d		 jmp	 SHORT $LN17@csv_writer
$LN16@csv_writer:
  00094	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00099	48 ff c0	 inc	 rax
  0009c	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN17@csv_writer:
  000a1	48 8b 44 24 30	 mov	 rax, QWORD PTR len$[rsp]
  000a6	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000ab	0f 8d af 01 00
	00		 jge	 $LN15@csv_writer

; 1193 :         PyObject *field;
; 1194 :         int append_ok;
; 1195 :         int quoted;
; 1196 : 
; 1197 :         field = PySequence_GetItem(seq, i);

  000b1	48 8b 54 24 28	 mov	 rdx, QWORD PTR i$[rsp]
  000b6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR seq$[rsp]
  000be	e8 00 00 00 00	 call	 PySequence_GetItem
  000c3	48 89 44 24 50	 mov	 QWORD PTR field$21573[rsp], rax

; 1198 :         if (field == NULL)

  000c8	48 83 7c 24 50
	00		 cmp	 QWORD PTR field$21573[rsp], 0
  000ce	75 07		 jne	 SHORT $LN14@csv_writer

; 1199 :             return NULL;

  000d0	33 c0		 xor	 eax, eax
  000d2	e9 01 02 00 00	 jmp	 $LN20@csv_writer
$LN14@csv_writer:

; 1200 : 
; 1201 :         switch (dialect->quoting) {

  000d7	48 8b 44 24 38	 mov	 rax, QWORD PTR dialect$[rsp]
  000dc	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  000e2	89 44 24 60	 mov	 DWORD PTR tv86[rsp], eax
  000e6	83 7c 24 60 01	 cmp	 DWORD PTR tv86[rsp], 1
  000eb	74 33		 je	 SHORT $LN10@csv_writer
  000ed	83 7c 24 60 02	 cmp	 DWORD PTR tv86[rsp], 2
  000f2	74 02		 je	 SHORT $LN11@csv_writer
  000f4	eb 34		 jmp	 SHORT $LN9@csv_writer
$LN11@csv_writer:

; 1202 :         case QUOTE_NONNUMERIC:
; 1203 :             quoted = !PyNumber_Check(field);

  000f6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR field$21573[rsp]
  000fb	e8 00 00 00 00	 call	 PyNumber_Check
  00100	85 c0		 test	 eax, eax
  00102	75 0a		 jne	 SHORT $LN22@csv_writer
  00104	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv90[rsp], 1
  0010c	eb 08		 jmp	 SHORT $LN23@csv_writer
$LN22@csv_writer:
  0010e	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
$LN23@csv_writer:
  00116	8b 44 24 64	 mov	 eax, DWORD PTR tv90[rsp]
  0011a	89 44 24 48	 mov	 DWORD PTR quoted$21575[rsp], eax

; 1204 :             break;

  0011e	eb 12		 jmp	 SHORT $LN12@csv_writer
$LN10@csv_writer:

; 1205 :         case QUOTE_ALL:
; 1206 :             quoted = 1;

  00120	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR quoted$21575[rsp], 1

; 1207 :             break;

  00128	eb 08		 jmp	 SHORT $LN12@csv_writer
$LN9@csv_writer:

; 1208 :         default:
; 1209 :             quoted = 0;

  0012a	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR quoted$21575[rsp], 0
$LN12@csv_writer:

; 1210 :             break;
; 1211 :         }
; 1212 : 
; 1213 :         if (PyUnicode_Check(field)) {

  00132	48 8b 44 24 50	 mov	 rax, QWORD PTR field$21573[rsp]
  00137	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0013b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00141	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00146	85 c0		 test	 eax, eax
  00148	74 49		 je	 SHORT $LN8@csv_writer

; 1214 :             append_ok = join_append(self, field, &quoted, len == 1);

  0014a	48 83 7c 24 30
	01		 cmp	 QWORD PTR len$[rsp], 1
  00150	75 0a		 jne	 SHORT $LN24@csv_writer
  00152	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  0015a	eb 08		 jmp	 SHORT $LN25@csv_writer
$LN24@csv_writer:
  0015c	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN25@csv_writer:
  00164	44 8b 4c 24 68	 mov	 r9d, DWORD PTR tv131[rsp]
  00169	4c 8d 44 24 48	 lea	 r8, QWORD PTR quoted$21575[rsp]
  0016e	48 8b 54 24 50	 mov	 rdx, QWORD PTR field$21573[rsp]
  00173	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0017b	e8 00 00 00 00	 call	 join_append
  00180	89 44 24 4c	 mov	 DWORD PTR append_ok$21574[rsp], eax

; 1215 :             Py_DECREF(field);

  00184	48 8b 4c 24 50	 mov	 rcx, QWORD PTR field$21573[rsp]
  00189	e8 00 00 00 00	 call	 _Py_DecRef
  0018e	e9 bd 00 00 00	 jmp	 $LN7@csv_writer
$LN8@csv_writer:

; 1216 :         }
; 1217 :         else if (field == Py_None) {

  00193	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0019a	48 39 44 24 50	 cmp	 QWORD PTR field$21573[rsp], rax
  0019f	75 43		 jne	 SHORT $LN6@csv_writer

; 1218 :             append_ok = join_append(self, NULL, &quoted, len == 1);

  001a1	48 83 7c 24 30
	01		 cmp	 QWORD PTR len$[rsp], 1
  001a7	75 0a		 jne	 SHORT $LN26@csv_writer
  001a9	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv140[rsp], 1
  001b1	eb 08		 jmp	 SHORT $LN27@csv_writer
$LN26@csv_writer:
  001b3	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
$LN27@csv_writer:
  001bb	44 8b 4c 24 6c	 mov	 r9d, DWORD PTR tv140[rsp]
  001c0	4c 8d 44 24 48	 lea	 r8, QWORD PTR quoted$21575[rsp]
  001c5	33 d2		 xor	 edx, edx
  001c7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001cf	e8 00 00 00 00	 call	 join_append
  001d4	89 44 24 4c	 mov	 DWORD PTR append_ok$21574[rsp], eax

; 1219 :             Py_DECREF(field);

  001d8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR field$21573[rsp]
  001dd	e8 00 00 00 00	 call	 _Py_DecRef

; 1220 :         }
; 1221 :         else {

  001e2	eb 6c		 jmp	 SHORT $LN5@csv_writer
$LN6@csv_writer:

; 1222 :             PyObject *str;
; 1223 : 
; 1224 :             str = PyObject_Str(field);

  001e4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR field$21573[rsp]
  001e9	e8 00 00 00 00	 call	 PyObject_Str
  001ee	48 89 44 24 58	 mov	 QWORD PTR str$21594[rsp], rax

; 1225 :             Py_DECREF(field);

  001f3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR field$21573[rsp]
  001f8	e8 00 00 00 00	 call	 _Py_DecRef

; 1226 :             if (str == NULL)

  001fd	48 83 7c 24 58
	00		 cmp	 QWORD PTR str$21594[rsp], 0
  00203	75 07		 jne	 SHORT $LN4@csv_writer

; 1227 :                 return NULL;

  00205	33 c0		 xor	 eax, eax
  00207	e9 cc 00 00 00	 jmp	 $LN20@csv_writer
$LN4@csv_writer:

; 1228 :             append_ok = join_append(self, str, &quoted, len == 1);

  0020c	48 83 7c 24 30
	01		 cmp	 QWORD PTR len$[rsp], 1
  00212	75 0a		 jne	 SHORT $LN28@csv_writer
  00214	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv152[rsp], 1
  0021c	eb 08		 jmp	 SHORT $LN29@csv_writer
$LN28@csv_writer:
  0021e	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv152[rsp], 0
$LN29@csv_writer:
  00226	44 8b 4c 24 70	 mov	 r9d, DWORD PTR tv152[rsp]
  0022b	4c 8d 44 24 48	 lea	 r8, QWORD PTR quoted$21575[rsp]
  00230	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$21594[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0023d	e8 00 00 00 00	 call	 join_append
  00242	89 44 24 4c	 mov	 DWORD PTR append_ok$21574[rsp], eax

; 1229 :             Py_DECREF(str);

  00246	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$21594[rsp]
  0024b	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@csv_writer:
$LN7@csv_writer:

; 1230 :         }
; 1231 :         if (!append_ok)

  00250	83 7c 24 4c 00	 cmp	 DWORD PTR append_ok$21574[rsp], 0
  00255	75 04		 jne	 SHORT $LN3@csv_writer

; 1232 :             return NULL;

  00257	33 c0		 xor	 eax, eax
  00259	eb 7d		 jmp	 SHORT $LN20@csv_writer
$LN3@csv_writer:

; 1233 :     }

  0025b	e9 34 fe ff ff	 jmp	 $LN16@csv_writer
$LN15@csv_writer:

; 1234 : 
; 1235 :     /* Add line terminator.
; 1236 :      */
; 1237 :     if (!join_append_lineterminator(self))

  00260	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00268	e8 00 00 00 00	 call	 join_append_lineterminator
  0026d	85 c0		 test	 eax, eax
  0026f	75 04		 jne	 SHORT $LN2@csv_writer

; 1238 :         return 0;

  00271	33 c0		 xor	 eax, eax
  00273	eb 63		 jmp	 SHORT $LN20@csv_writer
$LN2@csv_writer:

; 1239 : 
; 1240 :     line = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND,
; 1241 :                                      (void *) self->rec, self->rec_len);

  00275	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0027d	4c 8b 80 80 00
	00 00		 mov	 r8, QWORD PTR [rax+128]
  00284	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0028c	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00290	b9 04 00 00 00	 mov	 ecx, 4
  00295	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
  0029a	48 89 44 24 20	 mov	 QWORD PTR line$[rsp], rax

; 1242 :     if (line == NULL)

  0029f	48 83 7c 24 20
	00		 cmp	 QWORD PTR line$[rsp], 0
  002a5	75 04		 jne	 SHORT $LN1@csv_writer

; 1243 :         return NULL;

  002a7	33 c0		 xor	 eax, eax
  002a9	eb 2d		 jmp	 SHORT $LN20@csv_writer
$LN1@csv_writer:

; 1244 :     result = PyObject_CallFunctionObjArgs(self->writeline, line, NULL);

  002ab	45 33 c0	 xor	 r8d, r8d
  002ae	48 8b 54 24 20	 mov	 rdx, QWORD PTR line$[rsp]
  002b3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002bb	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  002bf	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  002c4	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 1245 :     Py_DECREF(line);

  002c9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR line$[rsp]
  002ce	e8 00 00 00 00	 call	 _Py_DecRef

; 1246 :     return result;

  002d3	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
$LN20@csv_writer:

; 1247 : }

  002d8	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002df	c3		 ret	 0
csv_writerow ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT join_reset
_TEXT	SEGMENT
self$ = 8
join_reset PROC						; COMDAT

; 986  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 987  :     self->rec_len = 0;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR self$[rsp]
  0000a	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 988  :     self->num_fields = 0;

  00015	48 8b 44 24 08	 mov	 rax, QWORD PTR self$[rsp]
  0001a	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+136], 0

; 989  : }

  00024	c3		 ret	 0
join_reset ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@FDLPIMOJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1DE@BCCMFDHE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@KJPOANEM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$join_append DD imagerel join_append
	DD	imagerel join_append+986
	DD	imagerel $unwind$join_append
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$join_append DD 021b01H
	DD	011011bH
xdata	ENDS
;	COMDAT ??_C@_1EM@FDLPIMOJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EM@FDLPIMOJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'f', 00H, 'i', 00H, 'e', 00H, 'l', 00H, 'd', 00H, ')', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@BCCMFDHE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@BCCMFDHE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'f', 00H
	DB	'i', 00H, 'e', 00H, 'l', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@KJPOANEM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@KJPOANEM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'f', 00H, 'i', 00H, 'e', 00H, 'l', 00H
	DB	'd', 00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT join_append
_TEXT	SEGMENT
rec_len$ = 64
field_kind$ = 72
field_len$ = 80
field_data$ = 88
tv79 = 96
tv165 = 104
tv174 = 112
self$ = 144
field$ = 152
quoted$ = 160
quote_empty$ = 168
join_append PROC					; COMDAT

; 1116 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1117 :     unsigned int field_kind = -1;

  0001b	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR field_kind$[rsp], -1 ; ffffffffH

; 1118 :     void *field_data = NULL;

  00023	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR field_data$[rsp], 0

; 1119 :     Py_ssize_t field_len = 0;

  0002c	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR field_len$[rsp], 0

; 1120 :     Py_ssize_t rec_len;
; 1121 : 
; 1122 :     if (field != NULL) {

  00035	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR field$[rsp], 0
  0003e	0f 84 b8 02 00
	00		 je	 $LN4@join_appen

; 1123 :         if (PyUnicode_READY(field) == -1)

  00044	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  0004c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00050	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00056	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0005b	85 c0		 test	 eax, eax
  0005d	75 1c		 jne	 SHORT $LN7@join_appen
  0005f	41 b8 63 04 00
	00		 mov	 r8d, 1123		; 00000463H
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@KJPOANEM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00079	33 c0		 xor	 eax, eax
$LN7@join_appen:
  0007b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  00083	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00086	c1 e8 07	 shr	 eax, 7
  00089	83 e0 01	 and	 eax, 1
  0008c	85 c0		 test	 eax, eax
  0008e	74 0a		 je	 SHORT $LN8@join_appen
  00090	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
  00098	eb 11		 jmp	 SHORT $LN9@join_appen
$LN8@join_appen:
  0009a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR field$[rsp]
  000a2	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000a7	89 44 24 60	 mov	 DWORD PTR tv79[rsp], eax
$LN9@join_appen:
  000ab	83 7c 24 60 ff	 cmp	 DWORD PTR tv79[rsp], -1
  000b0	75 07		 jne	 SHORT $LN3@join_appen

; 1124 :             return 0;

  000b2	33 c0		 xor	 eax, eax
  000b4	e9 19 03 00 00	 jmp	 $LN5@join_appen
$LN3@join_appen:

; 1125 :         field_kind = PyUnicode_KIND(field);

  000b9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  000c1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000cb	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000d0	85 c0		 test	 eax, eax
  000d2	75 1c		 jne	 SHORT $LN10@join_appen
  000d4	41 b8 65 04 00
	00		 mov	 r8d, 1125		; 00000465H
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@KJPOANEM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@
  000e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ee	33 c0		 xor	 eax, eax
$LN10@join_appen:
  000f0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  000f8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000fb	c1 e8 07	 shr	 eax, 7
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	75 1c		 jne	 SHORT $LN11@join_appen
  00105	41 b8 65 04 00
	00		 mov	 r8d, 1125		; 00000465H
  0010b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@BCCMFDHE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@
  00119	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011f	33 c0		 xor	 eax, eax
$LN11@join_appen:
  00121	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  00129	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0012c	c1 e8 02	 shr	 eax, 2
  0012f	83 e0 07	 and	 eax, 7
  00132	89 44 24 48	 mov	 DWORD PTR field_kind$[rsp], eax

; 1126 :         field_data = PyUnicode_DATA(field);

  00136	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  0013e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00142	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00148	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0014d	85 c0		 test	 eax, eax
  0014f	75 1c		 jne	 SHORT $LN12@join_appen
  00151	41 b8 66 04 00
	00		 mov	 r8d, 1126		; 00000466H
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@KJPOANEM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0016b	33 c0		 xor	 eax, eax
$LN12@join_appen:
  0016d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  00175	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00178	c1 e8 05	 shr	 eax, 5
  0017b	83 e0 01	 and	 eax, 1
  0017e	85 c0		 test	 eax, eax
  00180	0f 84 b1 00 00
	00		 je	 $LN18@join_appen
  00186	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  0018e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00192	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00198	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0019d	85 c0		 test	 eax, eax
  0019f	75 1c		 jne	 SHORT $LN13@join_appen
  001a1	41 b8 66 04 00
	00		 mov	 r8d, 1126		; 00000466H
  001a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  001ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@KJPOANEM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@
  001b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001bb	33 c0		 xor	 eax, eax
$LN13@join_appen:
  001bd	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  001c5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001c8	c1 e8 07	 shr	 eax, 7
  001cb	83 e0 01	 and	 eax, 1
  001ce	85 c0		 test	 eax, eax
  001d0	75 1c		 jne	 SHORT $LN14@join_appen
  001d2	41 b8 66 04 00
	00		 mov	 r8d, 1126		; 00000466H
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@BCCMFDHE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@
  001e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ec	33 c0		 xor	 eax, eax
$LN14@join_appen:
  001ee	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  001f6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001f9	c1 e8 06	 shr	 eax, 6
  001fc	83 e0 01	 and	 eax, 1
  001ff	85 c0		 test	 eax, eax
  00201	74 15		 je	 SHORT $LN15@join_appen
  00203	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  0020b	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00211	48 89 44 24 68	 mov	 QWORD PTR tv165[rsp], rax
  00216	eb 13		 jmp	 SHORT $LN16@join_appen
$LN15@join_appen:
  00218	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  00220	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00226	48 89 44 24 68	 mov	 QWORD PTR tv165[rsp], rax
$LN16@join_appen:
  0022b	48 8b 44 24 68	 mov	 rax, QWORD PTR tv165[rsp]
  00230	48 89 44 24 70	 mov	 QWORD PTR tv174[rsp], rax
  00235	eb 42		 jmp	 SHORT $LN19@join_appen
$LN18@join_appen:
  00237	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  0023f	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00247	75 1c		 jne	 SHORT $LN17@join_appen
  00249	41 b8 66 04 00
	00		 mov	 r8d, 1126		; 00000466H
  0024f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00256	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FDLPIMOJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  0025d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00263	33 c0		 xor	 eax, eax
$LN17@join_appen:
  00265	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  0026d	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00274	48 89 44 24 70	 mov	 QWORD PTR tv174[rsp], rax
$LN19@join_appen:
  00279	48 8b 44 24 70	 mov	 rax, QWORD PTR tv174[rsp]
  0027e	48 89 44 24 58	 mov	 QWORD PTR field_data$[rsp], rax

; 1127 :         field_len = PyUnicode_GET_LENGTH(field);

  00283	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  0028b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0028f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00295	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0029a	85 c0		 test	 eax, eax
  0029c	75 1c		 jne	 SHORT $LN20@join_appen
  0029e	41 b8 67 04 00
	00		 mov	 r8d, 1127		; 00000467H
  002a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  002ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@KJPOANEM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@
  002b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b8	33 c0		 xor	 eax, eax
$LN20@join_appen:
  002ba	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  002c2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002c5	c1 e8 07	 shr	 eax, 7
  002c8	83 e0 01	 and	 eax, 1
  002cb	85 c0		 test	 eax, eax
  002cd	75 1c		 jne	 SHORT $LN21@join_appen
  002cf	41 b8 67 04 00
	00		 mov	 r8d, 1127		; 00000467H
  002d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  002dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@BCCMFDHE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAi?$AAe?$AAl?$AAd?$AA?$CJ?$AA?$AA@
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e9	33 c0		 xor	 eax, eax
$LN21@join_appen:
  002eb	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR field$[rsp]
  002f3	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  002f7	48 89 44 24 50	 mov	 QWORD PTR field_len$[rsp], rax
$LN4@join_appen:

; 1128 :     }
; 1129 :     rec_len = join_append_data(self, field_kind, field_data, field_len,
; 1130 :                                quote_empty, quoted, 0);

  002fc	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00304	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR quoted$[rsp]
  0030c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00311	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR quote_empty$[rsp]
  00318	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0031c	4c 8b 4c 24 50	 mov	 r9, QWORD PTR field_len$[rsp]
  00321	4c 8b 44 24 58	 mov	 r8, QWORD PTR field_data$[rsp]
  00326	8b 54 24 48	 mov	 edx, DWORD PTR field_kind$[rsp]
  0032a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00332	e8 00 00 00 00	 call	 join_append_data
  00337	48 89 44 24 40	 mov	 QWORD PTR rec_len$[rsp], rax

; 1131 :     if (rec_len < 0)

  0033c	48 83 7c 24 40
	00		 cmp	 QWORD PTR rec_len$[rsp], 0
  00342	7d 07		 jge	 SHORT $LN2@join_appen

; 1132 :         return 0;

  00344	33 c0		 xor	 eax, eax
  00346	e9 87 00 00 00	 jmp	 $LN5@join_appen
$LN2@join_appen:

; 1133 : 
; 1134 :     /* grow record buffer if necessary */
; 1135 :     if (!join_check_rec_size(self, rec_len))

  0034b	48 8b 54 24 40	 mov	 rdx, QWORD PTR rec_len$[rsp]
  00350	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00358	e8 00 00 00 00	 call	 join_check_rec_size
  0035d	85 c0		 test	 eax, eax
  0035f	75 04		 jne	 SHORT $LN1@join_appen

; 1136 :         return 0;

  00361	33 c0		 xor	 eax, eax
  00363	eb 6d		 jmp	 SHORT $LN5@join_appen
$LN1@join_appen:

; 1137 : 
; 1138 :     self->rec_len = join_append_data(self, field_kind, field_data, field_len,
; 1139 :                                      quote_empty, quoted, 1);

  00365	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR [rsp+48], 1
  0036d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR quoted$[rsp]
  00375	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0037a	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR quote_empty$[rsp]
  00381	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00385	4c 8b 4c 24 50	 mov	 r9, QWORD PTR field_len$[rsp]
  0038a	4c 8b 44 24 58	 mov	 r8, QWORD PTR field_data$[rsp]
  0038f	8b 54 24 48	 mov	 edx, DWORD PTR field_kind$[rsp]
  00393	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0039b	e8 00 00 00 00	 call	 join_append_data
  003a0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  003a8	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 1140 :     self->num_fields++;

  003af	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003b7	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  003bd	ff c0		 inc	 eax
  003bf	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  003c7	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax

; 1141 : 
; 1142 :     return 1;

  003cd	b8 01 00 00 00	 mov	 eax, 1
$LN5@join_appen:

; 1143 : }

  003d2	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  003d9	c3		 ret	 0
join_append ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@HECEKHFI@single?5empty?5field?5record?5must?5b@ ; `string'
PUBLIC	??_C@_0CG@GPDPHFMF@need?5to?5escape?0?5but?5no?5escapecha@ ; `string'
PUBLIC	??_C@_1FI@LIOPNDNK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl?$AAi?$AAn?$AAe@ ; `string'
PUBLIC	??_C@_1FC@GPJFGMJF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl?$AAi?$AAn?$AAe?$AAt?$AAe?$AAr@ ; `string'
EXTRN	PyUnicode_FindChar:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$join_append_data DD imagerel join_append_data
	DD	imagerel join_append_data+1070
	DD	imagerel $unwind$join_append_data
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$join_append_data DD 011701H
	DD	0c217H
xdata	ENDS
;	COMDAT ??_C@_0CJ@HECEKHFI@single?5empty?5field?5record?5must?5b@
CONST	SEGMENT
??_C@_0CJ@HECEKHFI@single?5empty?5field?5record?5must?5b@ DB 'single empt'
	DB	'y field record must be quoted', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GPDPHFMF@need?5to?5escape?0?5but?5no?5escapecha@
CONST	SEGMENT
??_C@_0CG@GPDPHFMF@need?5to?5escape?0?5but?5no?5escapecha@ DB 'need to es'
	DB	'cape, but no escapechar set', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@LIOPNDNK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl?$AAi?$AAn?$AAe@
CONST	SEGMENT
??_C@_1FI@LIOPNDNK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl?$AAi?$AAn?$AAe@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'd', 00H
	DB	'i', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, '-'
	DB	00H, '>', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@GPJFGMJF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl?$AAi?$AAn?$AAe?$AAt?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FC@GPJFGMJF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl?$AAi?$AAn?$AAe?$AAt?$AAe?$AAr@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, '-', 00H, '>', 00H, 'l', 00H, 'i'
	DB	00H, 'n', 00H, 'e', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'm', 00H
	DB	'i', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ')'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT join_append_data
_TEXT	SEGMENT
rec_len$ = 48
i$ = 56
dialect$ = 64
want_escape$21378 = 72
c$21373 = 76
tv133 = 80
tv132 = 84
self$ = 112
field_kind$ = 120
field_data$ = 128
field_len$ = 136
quote_empty$ = 144
quoted$ = 152
copy_phase$ = 160
join_append_data PROC					; COMDAT

; 1000 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1001 :     DialectObj *dialect = self->dialect;

  00017	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0001c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00020	48 89 44 24 40	 mov	 QWORD PTR dialect$[rsp], rax

; 1002 :     int i;
; 1003 :     Py_ssize_t rec_len;
; 1004 : 
; 1005 : #define ADDCH(c) \
; 1006 :     do {\
; 1007 :         if (copy_phase) \
; 1008 :             self->rec[rec_len] = c;\
; 1009 :         rec_len++;\
; 1010 :     } while(0)
; 1011 : 
; 1012 :     rec_len = self->rec_len;

  00025	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0002a	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00031	48 89 44 24 30	 mov	 QWORD PTR rec_len$[rsp], rax

; 1013 : 
; 1014 :     /* If this is not the first field we need a field separator */
; 1015 :     if (self->num_fields > 0)

  00036	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0003b	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  00042	7e 36		 jle	 SHORT $LN45@join_appen@2
$LN44@join_appen@2:

; 1016 :         ADDCH(dialect->delimiter);

  00044	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR copy_phase$[rsp], 0
  0004c	74 19		 je	 SHORT $LN41@join_appen@2
  0004e	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00053	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00057	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec_len$[rsp]
  0005c	48 8b 54 24 40	 mov	 rdx, QWORD PTR dialect$[rsp]
  00061	8b 52 64	 mov	 edx, DWORD PTR [rdx+100]
  00064	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
$LN41@join_appen@2:
  00067	48 8b 44 24 30	 mov	 rax, QWORD PTR rec_len$[rsp]
  0006c	48 ff c0	 inc	 rax
  0006f	48 89 44 24 30	 mov	 QWORD PTR rec_len$[rsp], rax
  00074	33 c0		 xor	 eax, eax
  00076	85 c0		 test	 eax, eax
  00078	75 ca		 jne	 SHORT $LN44@join_appen@2
$LN45@join_appen@2:

; 1017 : 
; 1018 :     /* Handle preceding quote */
; 1019 :     if (copy_phase && *quoted)

  0007a	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR copy_phase$[rsp], 0
  00082	74 43		 je	 SHORT $LN40@join_appen@2
  00084	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR quoted$[rsp]
  0008c	83 38 00	 cmp	 DWORD PTR [rax], 0
  0008f	74 36		 je	 SHORT $LN40@join_appen@2
$LN39@join_appen@2:

; 1020 :         ADDCH(dialect->quotechar);

  00091	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR copy_phase$[rsp], 0
  00099	74 19		 je	 SHORT $LN36@join_appen@2
  0009b	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  000a0	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec_len$[rsp]
  000a9	48 8b 54 24 40	 mov	 rdx, QWORD PTR dialect$[rsp]
  000ae	8b 52 68	 mov	 edx, DWORD PTR [rdx+104]
  000b1	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
$LN36@join_appen@2:
  000b4	48 8b 44 24 30	 mov	 rax, QWORD PTR rec_len$[rsp]
  000b9	48 ff c0	 inc	 rax
  000bc	48 89 44 24 30	 mov	 QWORD PTR rec_len$[rsp], rax
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 ca		 jne	 SHORT $LN39@join_appen@2
$LN40@join_appen@2:

; 1021 : 
; 1022 :     /* Copy/count field data */
; 1023 :     /* If field is null just pass over */
; 1024 :     for (i = 0; field_data && (i < field_len); i++) {

  000c7	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000cf	eb 0a		 jmp	 SHORT $LN35@join_appen@2
$LN34@join_appen@2:
  000d1	8b 44 24 38	 mov	 eax, DWORD PTR i$[rsp]
  000d5	ff c0		 inc	 eax
  000d7	89 44 24 38	 mov	 DWORD PTR i$[rsp], eax
$LN35@join_appen@2:
  000db	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR field_data$[rsp], 0
  000e4	0f 84 82 02 00
	00		 je	 $LN33@join_appen@2
  000ea	48 63 44 24 38	 movsxd	 rax, DWORD PTR i$[rsp]
  000ef	48 3b 84 24 88
	00 00 00	 cmp	 rax, QWORD PTR field_len$[rsp]
  000f7	0f 8d 6f 02 00
	00		 jge	 $LN33@join_appen@2

; 1025 :         Py_UCS4 c = PyUnicode_READ(field_kind, field_data, i);

  000fd	83 7c 24 78 01	 cmp	 DWORD PTR field_kind$[rsp], 1
  00102	75 17		 jne	 SHORT $LN50@join_appen@2
  00104	48 63 44 24 38	 movsxd	 rax, DWORD PTR i$[rsp]
  00109	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR field_data$[rsp]
  00111	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00115	89 44 24 50	 mov	 DWORD PTR tv133[rsp], eax
  00119	eb 3a		 jmp	 SHORT $LN51@join_appen@2
$LN50@join_appen@2:
  0011b	83 7c 24 78 02	 cmp	 DWORD PTR field_kind$[rsp], 2
  00120	75 17		 jne	 SHORT $LN48@join_appen@2
  00122	48 63 44 24 38	 movsxd	 rax, DWORD PTR i$[rsp]
  00127	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR field_data$[rsp]
  0012f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00133	89 44 24 54	 mov	 DWORD PTR tv132[rsp], eax
  00137	eb 14		 jmp	 SHORT $LN49@join_appen@2
$LN48@join_appen@2:
  00139	48 63 44 24 38	 movsxd	 rax, DWORD PTR i$[rsp]
  0013e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR field_data$[rsp]
  00146	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00149	89 44 24 54	 mov	 DWORD PTR tv132[rsp], eax
$LN49@join_appen@2:
  0014d	8b 44 24 54	 mov	 eax, DWORD PTR tv132[rsp]
  00151	89 44 24 50	 mov	 DWORD PTR tv133[rsp], eax
$LN51@join_appen@2:
  00155	8b 44 24 50	 mov	 eax, DWORD PTR tv133[rsp]
  00159	89 44 24 4c	 mov	 DWORD PTR c$21373[rsp], eax

; 1026 :         int want_escape = 0;

  0015d	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR want_escape$21378[rsp], 0

; 1027 : 
; 1028 :         if (c == dialect->delimiter ||
; 1029 :             c == dialect->escapechar ||
; 1030 :             c == dialect->quotechar  ||
; 1031 :             PyUnicode_FindChar(
; 1032 :                 dialect->lineterminator, c, 0,
; 1033 :                 PyUnicode_GET_LENGTH(dialect->lineterminator), 1) >= 0) {

  00165	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  0016a	8b 40 64	 mov	 eax, DWORD PTR [rax+100]
  0016d	39 44 24 4c	 cmp	 DWORD PTR c$21373[rsp], eax
  00171	0f 84 c1 00 00
	00		 je	 $LN31@join_appen@2
  00177	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  0017c	8b 40 6c	 mov	 eax, DWORD PTR [rax+108]
  0017f	39 44 24 4c	 cmp	 DWORD PTR c$21373[rsp], eax
  00183	0f 84 af 00 00
	00		 je	 $LN31@join_appen@2
  00189	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  0018e	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  00191	39 44 24 4c	 cmp	 DWORD PTR c$21373[rsp], eax
  00195	0f 84 9d 00 00
	00		 je	 $LN31@join_appen@2
  0019b	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  001a0	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001a4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001a8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001ae	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001b3	85 c0		 test	 eax, eax
  001b5	75 1c		 jne	 SHORT $LN52@join_appen@2
  001b7	41 b8 09 04 00
	00		 mov	 r8d, 1033		; 00000409H
  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@GPJFGMJF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl?$AAi?$AAn?$AAe?$AAt?$AAe?$AAr@
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d1	33 c0		 xor	 eax, eax
$LN52@join_appen@2:
  001d3	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  001d8	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001dc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001df	c1 e8 07	 shr	 eax, 7
  001e2	83 e0 01	 and	 eax, 1
  001e5	85 c0		 test	 eax, eax
  001e7	75 1c		 jne	 SHORT $LN53@join_appen@2
  001e9	41 b8 09 04 00
	00		 mov	 r8d, 1033		; 00000409H
  001ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FI@LIOPNDNK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl?$AAi?$AAn?$AAe@
  001fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00203	33 c0		 xor	 eax, eax
$LN53@join_appen@2:
  00205	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  0020a	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0020e	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00216	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  0021a	45 33 c0	 xor	 r8d, r8d
  0021d	8b 54 24 4c	 mov	 edx, DWORD PTR c$21373[rsp]
  00221	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  00226	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0022a	e8 00 00 00 00	 call	 PyUnicode_FindChar
  0022f	48 85 c0	 test	 rax, rax
  00232	0f 8c fd 00 00
	00		 jl	 $LN32@join_appen@2
$LN31@join_appen@2:

; 1034 :             if (dialect->quoting == QUOTE_NONE)

  00238	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  0023d	83 b8 80 00 00
	00 03		 cmp	 DWORD PTR [rax+128], 3
  00244	75 0a		 jne	 SHORT $LN30@join_appen@2

; 1035 :                 want_escape = 1;

  00246	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR want_escape$21378[rsp], 1

; 1036 :             else {

  0024e	eb 6e		 jmp	 SHORT $LN29@join_appen@2
$LN30@join_appen@2:

; 1037 :                 if (c == dialect->quotechar) {

  00250	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  00255	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  00258	39 44 24 4c	 cmp	 DWORD PTR c$21373[rsp], eax
  0025c	75 4b		 jne	 SHORT $LN28@join_appen@2

; 1038 :                     if (dialect->doublequote)

  0025e	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  00263	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  00267	74 38		 je	 SHORT $LN27@join_appen@2
$LN26@join_appen@2:

; 1039 :                         ADDCH(dialect->quotechar);

  00269	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR copy_phase$[rsp], 0
  00271	74 19		 je	 SHORT $LN23@join_appen@2
  00273	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00278	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0027c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec_len$[rsp]
  00281	48 8b 54 24 40	 mov	 rdx, QWORD PTR dialect$[rsp]
  00286	8b 52 68	 mov	 edx, DWORD PTR [rdx+104]
  00289	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
$LN23@join_appen@2:
  0028c	48 8b 44 24 30	 mov	 rax, QWORD PTR rec_len$[rsp]
  00291	48 ff c0	 inc	 rax
  00294	48 89 44 24 30	 mov	 QWORD PTR rec_len$[rsp], rax
  00299	33 c0		 xor	 eax, eax
  0029b	85 c0		 test	 eax, eax
  0029d	75 ca		 jne	 SHORT $LN26@join_appen@2

; 1040 :                     else

  0029f	eb 08		 jmp	 SHORT $LN22@join_appen@2
$LN27@join_appen@2:

; 1041 :                         want_escape = 1;

  002a1	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR want_escape$21378[rsp], 1
$LN22@join_appen@2:
$LN28@join_appen@2:

; 1042 :                 }
; 1043 :                 if (!want_escape)

  002a9	83 7c 24 48 00	 cmp	 DWORD PTR want_escape$21378[rsp], 0
  002ae	75 0e		 jne	 SHORT $LN21@join_appen@2

; 1044 :                     *quoted = 1;

  002b0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR quoted$[rsp]
  002b8	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1
$LN21@join_appen@2:
$LN29@join_appen@2:

; 1045 :             }
; 1046 :             if (want_escape) {

  002be	83 7c 24 48 00	 cmp	 DWORD PTR want_escape$21378[rsp], 0
  002c3	74 70		 je	 SHORT $LN20@join_appen@2

; 1047 :                 if (!dialect->escapechar) {

  002c5	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  002ca	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  002ce	75 2f		 jne	 SHORT $LN19@join_appen@2

; 1048 :                     PyErr_Format(_csvstate_global->error_obj,
; 1049 :                                  "need to escape, but no escapechar set");

  002d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  002d7	e8 00 00 00 00	 call	 PyState_FindModule
  002dc	48 8b c8	 mov	 rcx, rax
  002df	e8 00 00 00 00	 call	 PyModule_GetState
  002e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@GPDPHFMF@need?5to?5escape?0?5but?5no?5escapecha@
  002eb	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  002ee	e8 00 00 00 00	 call	 PyErr_Format

; 1050 :                     return -1;

  002f3	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  002fa	e9 2a 01 00 00	 jmp	 $LN46@join_appen@2
$LN19@join_appen@2:
$LN18@join_appen@2:

; 1051 :                 }
; 1052 :                 ADDCH(dialect->escapechar);

  002ff	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR copy_phase$[rsp], 0
  00307	74 19		 je	 SHORT $LN15@join_appen@2
  00309	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0030e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00312	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec_len$[rsp]
  00317	48 8b 54 24 40	 mov	 rdx, QWORD PTR dialect$[rsp]
  0031c	8b 52 6c	 mov	 edx, DWORD PTR [rdx+108]
  0031f	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
$LN15@join_appen@2:
  00322	48 8b 44 24 30	 mov	 rax, QWORD PTR rec_len$[rsp]
  00327	48 ff c0	 inc	 rax
  0032a	48 89 44 24 30	 mov	 QWORD PTR rec_len$[rsp], rax
  0032f	33 c0		 xor	 eax, eax
  00331	85 c0		 test	 eax, eax
  00333	75 ca		 jne	 SHORT $LN18@join_appen@2
$LN20@join_appen@2:
$LN32@join_appen@2:
$LN14@join_appen@2:

; 1053 :             }
; 1054 :         }
; 1055 :         /* Copy field character into record buffer.
; 1056 :          */
; 1057 :         ADDCH(c);

  00335	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR copy_phase$[rsp], 0
  0033d	74 15		 je	 SHORT $LN11@join_appen@2
  0033f	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00344	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00348	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec_len$[rsp]
  0034d	8b 54 24 4c	 mov	 edx, DWORD PTR c$21373[rsp]
  00351	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
$LN11@join_appen@2:
  00354	48 8b 44 24 30	 mov	 rax, QWORD PTR rec_len$[rsp]
  00359	48 ff c0	 inc	 rax
  0035c	48 89 44 24 30	 mov	 QWORD PTR rec_len$[rsp], rax
  00361	33 c0		 xor	 eax, eax
  00363	85 c0		 test	 eax, eax
  00365	75 ce		 jne	 SHORT $LN14@join_appen@2

; 1058 :     }

  00367	e9 65 fd ff ff	 jmp	 $LN34@join_appen@2
$LN33@join_appen@2:

; 1059 : 
; 1060 :     /* If field is empty check if it needs to be quoted.
; 1061 :      */
; 1062 :     if (i == 0 && quote_empty) {

  0036c	83 7c 24 38 00	 cmp	 DWORD PTR i$[rsp], 0
  00371	75 54		 jne	 SHORT $LN10@join_appen@2
  00373	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR quote_empty$[rsp], 0
  0037b	74 4a		 je	 SHORT $LN10@join_appen@2

; 1063 :         if (dialect->quoting == QUOTE_NONE) {

  0037d	48 8b 44 24 40	 mov	 rax, QWORD PTR dialect$[rsp]
  00382	83 b8 80 00 00
	00 03		 cmp	 DWORD PTR [rax+128], 3
  00389	75 2e		 jne	 SHORT $LN9@join_appen@2

; 1064 :             PyErr_Format(_csvstate_global->error_obj,
; 1065 :                 "single empty field record must be quoted");

  0038b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  00392	e8 00 00 00 00	 call	 PyState_FindModule
  00397	48 8b c8	 mov	 rcx, rax
  0039a	e8 00 00 00 00	 call	 PyModule_GetState
  0039f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HECEKHFI@single?5empty?5field?5record?5must?5b@
  003a6	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  003a9	e8 00 00 00 00	 call	 PyErr_Format

; 1066 :             return -1;

  003ae	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  003b5	eb 72		 jmp	 SHORT $LN46@join_appen@2

; 1067 :         }
; 1068 :         else

  003b7	eb 0e		 jmp	 SHORT $LN8@join_appen@2
$LN9@join_appen@2:

; 1069 :             *quoted = 1;

  003b9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR quoted$[rsp]
  003c1	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1
$LN8@join_appen@2:
$LN10@join_appen@2:

; 1070 :     }
; 1071 : 
; 1072 :     if (*quoted) {

  003c7	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR quoted$[rsp]
  003cf	83 38 00	 cmp	 DWORD PTR [rax], 0
  003d2	74 50		 je	 SHORT $LN7@join_appen@2

; 1073 :         if (copy_phase)

  003d4	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR copy_phase$[rsp], 0
  003dc	74 38		 je	 SHORT $LN6@join_appen@2
$LN5@join_appen@2:

; 1074 :             ADDCH(dialect->quotechar);

  003de	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR copy_phase$[rsp], 0
  003e6	74 19		 je	 SHORT $LN2@join_appen@2
  003e8	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  003ed	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  003f1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec_len$[rsp]
  003f6	48 8b 54 24 40	 mov	 rdx, QWORD PTR dialect$[rsp]
  003fb	8b 52 68	 mov	 edx, DWORD PTR [rdx+104]
  003fe	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
$LN2@join_appen@2:
  00401	48 8b 44 24 30	 mov	 rax, QWORD PTR rec_len$[rsp]
  00406	48 ff c0	 inc	 rax
  00409	48 89 44 24 30	 mov	 QWORD PTR rec_len$[rsp], rax
  0040e	33 c0		 xor	 eax, eax
  00410	85 c0		 test	 eax, eax
  00412	75 ca		 jne	 SHORT $LN5@join_appen@2

; 1075 :         else

  00414	eb 0e		 jmp	 SHORT $LN1@join_appen@2
$LN6@join_appen@2:

; 1076 :             rec_len += 2;

  00416	48 8b 44 24 30	 mov	 rax, QWORD PTR rec_len$[rsp]
  0041b	48 83 c0 02	 add	 rax, 2
  0041f	48 89 44 24 30	 mov	 QWORD PTR rec_len$[rsp], rax
$LN1@join_appen@2:
$LN7@join_appen@2:

; 1077 :     }
; 1078 :     return rec_len;

  00424	48 8b 44 24 30	 mov	 rax, QWORD PTR rec_len$[rsp]
$LN46@join_appen@2:

; 1079 : #undef ADDCH
; 1080 : }

  00429	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0042d	c3		 ret	 0
join_append_data ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$join_check_rec_size DD imagerel join_check_rec_size
	DD	imagerel join_check_rec_size+424
	DD	imagerel $unwind$join_check_rec_size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$join_check_rec_size DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT join_check_rec_size
_TEXT	SEGMENT
old_rec$21444 = 32
tv85 = 40
tv131 = 48
self$ = 80
rec_len$ = 88
join_check_rec_size PROC				; COMDAT

; 1084 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1085 : 
; 1086 :     if (rec_len < 0 || rec_len > PY_SSIZE_T_MAX - MEM_INCR) {

  0000e	48 83 7c 24 58
	00		 cmp	 QWORD PTR rec_len$[rsp], 0
  00014	7c 11		 jl	 SHORT $LN7@join_check
  00016	48 b8 ff 7f ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854743039 ; 7fffffffffff7fffH
  00020	48 39 44 24 58	 cmp	 QWORD PTR rec_len$[rsp], rax
  00025	7e 0c		 jle	 SHORT $LN8@join_check
$LN7@join_check:

; 1087 :         PyErr_NoMemory();

  00027	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1088 :         return 0;

  0002c	33 c0		 xor	 eax, eax
  0002e	e9 70 01 00 00	 jmp	 $LN9@join_check
$LN8@join_check:

; 1089 :     }
; 1090 : 
; 1091 :     if (rec_len > self->rec_size) {

  00033	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00038	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0003c	48 39 44 24 58	 cmp	 QWORD PTR rec_len$[rsp], rax
  00041	0f 8e 57 01 00
	00		 jle	 $LN6@join_check

; 1092 :         if (self->rec_size == 0) {

  00047	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0004c	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00051	0f 85 8f 00 00
	00		 jne	 $LN5@join_check

; 1093 :             self->rec_size = (rec_len / MEM_INCR + 1) * MEM_INCR;

  00057	48 8b 44 24 58	 mov	 rax, QWORD PTR rec_len$[rsp]
  0005c	48 99		 cdq
  0005e	48 81 e2 ff 7f
	00 00		 and	 rdx, 32767		; 00007fffH
  00065	48 03 c2	 add	 rax, rdx
  00068	48 c1 f8 0f	 sar	 rax, 15
  0006c	48 ff c0	 inc	 rax
  0006f	48 69 c0 00 80
	00 00		 imul	 rax, 32768		; 00008000H
  00076	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0007b	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 1094 :             if (self->rec != NULL)

  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00084	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00089	74 0e		 je	 SHORT $LN4@join_check

; 1095 :                 PyMem_Free(self->rec);

  0008b	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00090	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00094	e8 00 00 00 00	 call	 PyMem_Free
$LN4@join_check:

; 1096 :             self->rec = PyMem_New(Py_UCS4, self->rec_size);

  00099	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0009e	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  000a8	48 39 48 78	 cmp	 QWORD PTR [rax+120], rcx
  000ac	76 0b		 jbe	 SHORT $LN11@join_check
  000ae	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv85[rsp], 0
  000b7	eb 1a		 jmp	 SHORT $LN12@join_check
$LN11@join_check:
  000b9	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000be	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  000c2	48 c1 e0 02	 shl	 rax, 2
  000c6	48 8b c8	 mov	 rcx, rax
  000c9	e8 00 00 00 00	 call	 PyMem_Malloc
  000ce	48 89 44 24 28	 mov	 QWORD PTR tv85[rsp], rax
$LN12@join_check:
  000d3	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000d8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv85[rsp]
  000dd	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1097 :         }
; 1098 :         else {

  000e1	e9 a3 00 00 00	 jmp	 $LN3@join_check
$LN5@join_check:

; 1099 :             Py_UCS4* old_rec = self->rec;

  000e6	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000eb	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000ef	48 89 44 24 20	 mov	 QWORD PTR old_rec$21444[rsp], rax

; 1100 : 
; 1101 :             self->rec_size = (rec_len / MEM_INCR + 1) * MEM_INCR;

  000f4	48 8b 44 24 58	 mov	 rax, QWORD PTR rec_len$[rsp]
  000f9	48 99		 cdq
  000fb	48 81 e2 ff 7f
	00 00		 and	 rdx, 32767		; 00007fffH
  00102	48 03 c2	 add	 rax, rdx
  00105	48 c1 f8 0f	 sar	 rax, 15
  00109	48 ff c0	 inc	 rax
  0010c	48 69 c0 00 80
	00 00		 imul	 rax, 32768		; 00008000H
  00113	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00118	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 1102 :             self->rec = PyMem_Resize(old_rec, Py_UCS4, self->rec_size);

  0011c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00121	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  0012b	48 39 48 78	 cmp	 QWORD PTR [rax+120], rcx
  0012f	76 0b		 jbe	 SHORT $LN13@join_check
  00131	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv131[rsp], 0
  0013a	eb 1f		 jmp	 SHORT $LN14@join_check
$LN13@join_check:
  0013c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00141	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00145	48 c1 e0 02	 shl	 rax, 2
  00149	48 8b d0	 mov	 rdx, rax
  0014c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR old_rec$21444[rsp]
  00151	e8 00 00 00 00	 call	 PyMem_Realloc
  00156	48 89 44 24 30	 mov	 QWORD PTR tv131[rsp], rax
$LN14@join_check:
  0015b	48 8b 44 24 30	 mov	 rax, QWORD PTR tv131[rsp]
  00160	48 89 44 24 20	 mov	 QWORD PTR old_rec$21444[rsp], rax
  00165	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0016a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR old_rec$21444[rsp]
  0016f	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1103 :             if (self->rec == NULL)

  00173	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00178	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0017d	75 0a		 jne	 SHORT $LN2@join_check

; 1104 :                 PyMem_Free(old_rec);

  0017f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR old_rec$21444[rsp]
  00184	e8 00 00 00 00	 call	 PyMem_Free
$LN2@join_check:
$LN3@join_check:

; 1105 :         }
; 1106 :         if (self->rec == NULL) {

  00189	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0018e	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00193	75 09		 jne	 SHORT $LN1@join_check

; 1107 :             PyErr_NoMemory();

  00195	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1108 :             return 0;

  0019a	33 c0		 xor	 eax, eax
  0019c	eb 05		 jmp	 SHORT $LN9@join_check
$LN1@join_check:
$LN6@join_check:

; 1109 :         }
; 1110 :     }
; 1111 :     return 1;

  0019e	b8 01 00 00 00	 mov	 eax, 1
$LN9@join_check:

; 1112 : }

  001a3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001a7	c3		 ret	 0
join_check_rec_size ENDP
_TEXT	ENDS
PUBLIC	??_C@_1HM@FPHDGKAC@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc@ ; `string'
PUBLIC	??_C@_1GE@OFMJDKAC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt@ ; `string'
PUBLIC	??_C@_1FO@PKEAKBGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$join_append_lineterminator DD imagerel join_append_lineterminator
	DD	imagerel join_append_lineterminator+916
	DD	imagerel $unwind$join_append_lineterminator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$join_append_lineterminator DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_1HM@FPHDGKAC@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc@
CONST	SEGMENT
??_C@_1HM@FPHDGKAC@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'd'
	DB	00H, 'i', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'-', 00H, '>', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H
	DB	'n', 00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@OFMJDKAC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt@
CONST	SEGMENT
??_C@_1GE@OFMJDKAC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 's', 00H
	DB	'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'd', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@PKEAKBGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl@
CONST	SEGMENT
??_C@_1FO@PKEAKBGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H
	DB	'-', 00H, '>', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, '-', 00H, '>', 00H, 'l', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'm', 00H, 'i'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ')', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT join_append_lineterminator
_TEXT	SEGMENT
i$ = 32
terminator_len$ = 40
term_kind$ = 48
term_data$ = 56
tv198 = 64
tv211 = 72
tv229 = 80
tv228 = 84
self$ = 112
join_append_lineterminator PROC				; COMDAT

; 1147 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1148 :     Py_ssize_t terminator_len, i;
; 1149 :     unsigned int term_kind;
; 1150 :     void *term_data;
; 1151 : 
; 1152 :     terminator_len = PyUnicode_GET_LENGTH(self->dialect->lineterminator);

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00012	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00016	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00020	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00025	85 c0		 test	 eax, eax
  00027	75 1c		 jne	 SHORT $LN8@join_appen@3
  00029	41 b8 80 04 00
	00		 mov	 r8d, 1152		; 00000480H
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FO@PKEAKBGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl@
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00043	33 c0		 xor	 eax, eax
$LN8@join_appen@3:
  00045	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0004a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004e	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00052	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00055	c1 e8 07	 shr	 eax, 7
  00058	83 e0 01	 and	 eax, 1
  0005b	85 c0		 test	 eax, eax
  0005d	75 1c		 jne	 SHORT $LN9@join_appen@3
  0005f	41 b8 80 04 00
	00		 mov	 r8d, 1152		; 00000480H
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GE@OFMJDKAC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt@
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00079	33 c0		 xor	 eax, eax
$LN9@join_appen@3:
  0007b	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00080	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00084	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00088	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0008c	48 89 44 24 28	 mov	 QWORD PTR terminator_len$[rsp], rax

; 1153 :     if (terminator_len == -1)

  00091	48 83 7c 24 28
	ff		 cmp	 QWORD PTR terminator_len$[rsp], -1
  00097	75 07		 jne	 SHORT $LN5@join_appen@3

; 1154 :         return 0;

  00099	33 c0		 xor	 eax, eax
  0009b	e9 ef 02 00 00	 jmp	 $LN6@join_appen@3
$LN5@join_appen@3:

; 1155 : 
; 1156 :     /* grow record buffer if necessary */
; 1157 :     if (!join_check_rec_size(self, self->rec_len + terminator_len))

  000a0	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  000a5	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000ac	48 03 44 24 28	 add	 rax, QWORD PTR terminator_len$[rsp]
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  000b9	e8 00 00 00 00	 call	 join_check_rec_size
  000be	85 c0		 test	 eax, eax
  000c0	75 07		 jne	 SHORT $LN4@join_appen@3

; 1158 :         return 0;

  000c2	33 c0		 xor	 eax, eax
  000c4	e9 c6 02 00 00	 jmp	 $LN6@join_appen@3
$LN4@join_appen@3:

; 1159 : 
; 1160 :     term_kind = PyUnicode_KIND(self->dialect->lineterminator);

  000c9	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  000ce	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000d2	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  000d6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000da	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000e5	85 c0		 test	 eax, eax
  000e7	75 1c		 jne	 SHORT $LN10@join_appen@3
  000e9	41 b8 88 04 00
	00		 mov	 r8d, 1160		; 00000488H
  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FO@PKEAKBGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl@
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00103	33 c0		 xor	 eax, eax
$LN10@join_appen@3:
  00105	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0010a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0010e	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00112	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00115	c1 e8 07	 shr	 eax, 7
  00118	83 e0 01	 and	 eax, 1
  0011b	85 c0		 test	 eax, eax
  0011d	75 1c		 jne	 SHORT $LN11@join_appen@3
  0011f	41 b8 88 04 00
	00		 mov	 r8d, 1160		; 00000488H
  00125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GE@OFMJDKAC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt@
  00133	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00139	33 c0		 xor	 eax, eax
$LN11@join_appen@3:
  0013b	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00140	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00144	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00148	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0014b	c1 e8 02	 shr	 eax, 2
  0014e	83 e0 07	 and	 eax, 7
  00151	89 44 24 30	 mov	 DWORD PTR term_kind$[rsp], eax

; 1161 :     term_data = PyUnicode_DATA(self->dialect->lineterminator);

  00155	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0015a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0015e	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00162	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00166	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0016c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00171	85 c0		 test	 eax, eax
  00173	75 1c		 jne	 SHORT $LN12@join_appen@3
  00175	41 b8 89 04 00
	00		 mov	 r8d, 1161		; 00000489H
  0017b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FO@PKEAKBGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl@
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018f	33 c0		 xor	 eax, eax
$LN12@join_appen@3:
  00191	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00196	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0019a	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0019e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001a1	c1 e8 05	 shr	 eax, 5
  001a4	83 e0 01	 and	 eax, 1
  001a7	85 c0		 test	 eax, eax
  001a9	0f 84 ca 00 00
	00		 je	 $LN18@join_appen@3
  001af	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  001b4	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001b8	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001bc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001c0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001c6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001cb	85 c0		 test	 eax, eax
  001cd	75 1c		 jne	 SHORT $LN13@join_appen@3
  001cf	41 b8 89 04 00
	00		 mov	 r8d, 1161		; 00000489H
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FO@PKEAKBGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAl@
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001e9	33 c0		 xor	 eax, eax
$LN13@join_appen@3:
  001eb	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  001f0	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001f4	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001f8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001fb	c1 e8 07	 shr	 eax, 7
  001fe	83 e0 01	 and	 eax, 1
  00201	85 c0		 test	 eax, eax
  00203	75 1c		 jne	 SHORT $LN14@join_appen@3
  00205	41 b8 89 04 00
	00		 mov	 r8d, 1161		; 00000489H
  0020b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  00212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GE@OFMJDKAC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc?$AAt@
  00219	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0021f	33 c0		 xor	 eax, eax
$LN14@join_appen@3:
  00221	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00226	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0022a	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0022e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00231	c1 e8 06	 shr	 eax, 6
  00234	83 e0 01	 and	 eax, 1
  00237	85 c0		 test	 eax, eax
  00239	74 1a		 je	 SHORT $LN15@join_appen@3
  0023b	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00240	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00244	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00248	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0024e	48 89 44 24 40	 mov	 QWORD PTR tv198[rsp], rax
  00253	eb 18		 jmp	 SHORT $LN16@join_appen@3
$LN15@join_appen@3:
  00255	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0025a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0025e	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00262	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00268	48 89 44 24 40	 mov	 QWORD PTR tv198[rsp], rax
$LN16@join_appen@3:
  0026d	48 8b 44 24 40	 mov	 rax, QWORD PTR tv198[rsp]
  00272	48 89 44 24 48	 mov	 QWORD PTR tv211[rsp], rax
  00277	eb 4c		 jmp	 SHORT $LN19@join_appen@3
$LN18@join_appen@3:
  00279	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0027e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00282	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00286	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0028e	75 1c		 jne	 SHORT $LN17@join_appen@3
  00290	41 b8 89 04 00
	00		 mov	 r8d, 1161		; 00000489H
  00296	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  0029d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HM@FPHDGKAC@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAd?$AAi?$AAa?$AAl?$AAe?$AAc@
  002a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002aa	33 c0		 xor	 eax, eax
$LN17@join_appen@3:
  002ac	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  002b1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  002b5	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  002b9	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  002c0	48 89 44 24 48	 mov	 QWORD PTR tv211[rsp], rax
$LN19@join_appen@3:
  002c5	48 8b 44 24 48	 mov	 rax, QWORD PTR tv211[rsp]
  002ca	48 89 44 24 38	 mov	 QWORD PTR term_data$[rsp], rax

; 1162 :     for (i = 0; i < terminator_len; i++)

  002cf	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  002d8	eb 0d		 jmp	 SHORT $LN3@join_appen@3
$LN2@join_appen@3:
  002da	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  002df	48 ff c0	 inc	 rax
  002e2	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN3@join_appen@3:
  002e7	48 8b 44 24 28	 mov	 rax, QWORD PTR terminator_len$[rsp]
  002ec	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  002f1	7d 7a		 jge	 SHORT $LN1@join_appen@3

; 1163 :         self->rec[self->rec_len + i] = PyUnicode_READ(term_kind, term_data, i);

  002f3	83 7c 24 30 01	 cmp	 DWORD PTR term_kind$[rsp], 1
  002f8	75 19		 jne	 SHORT $LN22@join_appen@3
  002fa	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  002ff	48 8b 4c 24 38	 mov	 rcx, QWORD PTR term_data$[rsp]
  00304	48 03 c8	 add	 rcx, rax
  00307	48 8b c1	 mov	 rax, rcx
  0030a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0030d	89 44 24 50	 mov	 DWORD PTR tv229[rsp], eax
  00311	eb 34		 jmp	 SHORT $LN23@join_appen@3
$LN22@join_appen@3:
  00313	83 7c 24 30 02	 cmp	 DWORD PTR term_kind$[rsp], 2
  00318	75 14		 jne	 SHORT $LN20@join_appen@3
  0031a	48 8b 44 24 38	 mov	 rax, QWORD PTR term_data$[rsp]
  0031f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00324	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00328	89 44 24 54	 mov	 DWORD PTR tv228[rsp], eax
  0032c	eb 11		 jmp	 SHORT $LN21@join_appen@3
$LN20@join_appen@3:
  0032e	48 8b 44 24 38	 mov	 rax, QWORD PTR term_data$[rsp]
  00333	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00338	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0033b	89 44 24 54	 mov	 DWORD PTR tv228[rsp], eax
$LN21@join_appen@3:
  0033f	8b 44 24 54	 mov	 eax, DWORD PTR tv228[rsp]
  00343	89 44 24 50	 mov	 DWORD PTR tv229[rsp], eax
$LN23@join_appen@3:
  00347	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0034c	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00353	48 03 44 24 20	 add	 rax, QWORD PTR i$[rsp]
  00358	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  0035d	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00361	8b 54 24 50	 mov	 edx, DWORD PTR tv229[rsp]
  00365	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx
  00368	e9 6d ff ff ff	 jmp	 $LN2@join_appen@3
$LN1@join_appen@3:

; 1164 :     self->rec_len += terminator_len;

  0036d	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00372	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00379	48 03 44 24 28	 add	 rax, QWORD PTR terminator_len$[rsp]
  0037e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00383	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 1165 : 
; 1166 :     return 1;

  0038a	b8 01 00 00 00	 mov	 eax, 1
$LN6@join_appen@3:

; 1167 : }

  0038f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00393	c3		 ret	 0
join_append_lineterminator ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@LBOMLBOD@writerows?$CI?$CJ?5argument?5must?5be?5ite@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$csv_writerows DD imagerel csv_writerows
	DD	imagerel csv_writerows+200
	DD	imagerel $unwind$csv_writerows
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$csv_writerows DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CG@LBOMLBOD@writerows?$CI?$CJ?5argument?5must?5be?5ite@
CONST	SEGMENT
??_C@_0CG@LBOMLBOD@writerows?$CI?$CJ?5argument?5must?5be?5ite@ DB 'writer'
	DB	'ows() argument must be iterable', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT csv_writerows
_TEXT	SEGMENT
row_obj$ = 32
row_iter$ = 40
result$ = 48
self$ = 80
seqseq$ = 88
csv_writerows PROC					; COMDAT

; 1257 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1258 :     PyObject *row_iter, *row_obj, *result;
; 1259 : 
; 1260 :     row_iter = PyObject_GetIter(seqseq);

  0000e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR seqseq$[rsp]
  00013	e8 00 00 00 00	 call	 PyObject_GetIter
  00018	48 89 44 24 28	 mov	 QWORD PTR row_iter$[rsp], rax

; 1261 :     if (row_iter == NULL) {

  0001d	48 83 7c 24 28
	00		 cmp	 QWORD PTR row_iter$[rsp], 0
  00023	75 1a		 jne	 SHORT $LN6@csv_writer@2

; 1262 :         PyErr_SetString(PyExc_TypeError,
; 1263 :                         "writerows() argument must be iterable");

  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@LBOMLBOD@writerows?$CI?$CJ?5argument?5must?5be?5ite@
  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00033	e8 00 00 00 00	 call	 PyErr_SetString

; 1264 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	e9 84 00 00 00	 jmp	 $LN7@csv_writer@2
$LN6@csv_writer@2:
$LN5@csv_writer@2:

; 1265 :     }
; 1266 :     while ((row_obj = PyIter_Next(row_iter))) {

  0003f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR row_iter$[rsp]
  00044	e8 00 00 00 00	 call	 PyIter_Next
  00049	48 89 44 24 20	 mov	 QWORD PTR row_obj$[rsp], rax
  0004e	48 83 7c 24 20
	00		 cmp	 QWORD PTR row_obj$[rsp], 0
  00054	74 42		 je	 SHORT $LN4@csv_writer@2

; 1267 :         result = csv_writerow(self, row_obj);

  00056	48 8b 54 24 20	 mov	 rdx, QWORD PTR row_obj$[rsp]
  0005b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00060	e8 00 00 00 00	 call	 csv_writerow
  00065	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 1268 :         Py_DECREF(row_obj);

  0006a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR row_obj$[rsp]
  0006f	e8 00 00 00 00	 call	 _Py_DecRef

; 1269 :         if (!result) {

  00074	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  0007a	75 10		 jne	 SHORT $LN3@csv_writer@2

; 1270 :             Py_DECREF(row_iter);

  0007c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR row_iter$[rsp]
  00081	e8 00 00 00 00	 call	 _Py_DecRef

; 1271 :             return NULL;

  00086	33 c0		 xor	 eax, eax
  00088	eb 39		 jmp	 SHORT $LN7@csv_writer@2

; 1272 :         }
; 1273 :         else

  0008a	eb 0a		 jmp	 SHORT $LN2@csv_writer@2
$LN3@csv_writer@2:

; 1274 :              Py_DECREF(result);

  0008c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  00091	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@csv_writer@2:

; 1275 :     }

  00096	eb a7		 jmp	 SHORT $LN5@csv_writer@2
$LN4@csv_writer@2:

; 1276 :     Py_DECREF(row_iter);

  00098	48 8b 4c 24 28	 mov	 rcx, QWORD PTR row_iter$[rsp]
  0009d	e8 00 00 00 00	 call	 _Py_DecRef

; 1277 :     if (PyErr_Occurred())

  000a2	e8 00 00 00 00	 call	 PyErr_Occurred
  000a7	48 85 c0	 test	 rax, rax
  000aa	74 04		 je	 SHORT $LN1@csv_writer@2

; 1278 :         return NULL;

  000ac	33 c0		 xor	 eax, eax
  000ae	eb 13		 jmp	 SHORT $LN7@csv_writer@2
$LN1@csv_writer@2:

; 1279 :     Py_INCREF(Py_None);

  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000b7	e8 00 00 00 00	 call	 _Py_IncRef

; 1280 :     return Py_None;

  000bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN7@csv_writer@2:

; 1281 : }

  000c3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c7	c3		 ret	 0
csv_writerows ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Writer_dealloc DD imagerel Writer_dealloc
	DD	imagerel Writer_dealloc+124
	DD	imagerel $unwind$Writer_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Writer_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Writer_dealloc
_TEXT	SEGMENT
self$ = 48
Writer_dealloc PROC					; COMDAT

; 1298 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1299 :     PyObject_GC_UnTrack(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN9@Writer_dea:

; 1300 :     Py_XDECREF(self->dialect);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001d	74 0e		 je	 SHORT $LN6@Writer_dea
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00028	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@Writer_dea:
  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 e0		 jne	 SHORT $LN9@Writer_dea
$LN5@Writer_dea:

; 1301 :     Py_XDECREF(self->writeline);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00038	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0003d	74 0e		 je	 SHORT $LN2@Writer_dea
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00044	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00048	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@Writer_dea:
  0004d	33 c0		 xor	 eax, eax
  0004f	85 c0		 test	 eax, eax
  00051	75 e0		 jne	 SHORT $LN5@Writer_dea

; 1302 :     if (self->rec != NULL)

  00053	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00058	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0005d	74 0e		 je	 SHORT $LN1@Writer_dea

; 1303 :         PyMem_Free(self->rec);

  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00064	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00068	e8 00 00 00 00	 call	 PyMem_Free
$LN1@Writer_dea:

; 1304 :     PyObject_GC_Del(self);

  0006d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00072	e8 00 00 00 00	 call	 PyObject_GC_Del

; 1305 : }

  00077	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007b	c3		 ret	 0
Writer_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@ODABNAGK@Writer_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$Writer_traverse DD imagerel Writer_traverse
	DD	imagerel Writer_traverse+206
	DD	imagerel $unwind$Writer_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Writer_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BA@ODABNAGK@Writer_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@ODABNAGK@Writer_traverse?$AA@ DB 'Writer_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Writer_traverse
_TEXT	SEGMENT
vret$21679 = 32
vret$21687 = 36
self$ = 64
visit$ = 72
arg$ = 80
Writer_traverse PROC					; COMDAT

; 1309 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@Writer_tra:

; 1310 :     Py_VISIT(self->dialect);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@Writer_tra
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 1e 05 00
	00		 mov	 r8d, 1310		; 0000051eH
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@ODABNAGK@Writer_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@Writer_tra:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 23		 je	 SHORT $LN8@Writer_tra
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21679[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21679[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@Writer_tra
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21679[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@Writer_tra
$LN7@Writer_tra:
$LN8@Writer_tra:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@Writer_tra
$LN6@Writer_tra:

; 1311 :     Py_VISIT(self->writeline);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@Writer_tra
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 1f 05 00
	00		 mov	 r8d, 1311		; 0000051fH
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@ODABNAGK@Writer_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@Writer_tra:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00097	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0009c	74 23		 je	 SHORT $LN2@Writer_tra
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000a8	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$21687[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$21687[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@Writer_tra
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$21687[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@Writer_tra
$LN1@Writer_tra:
$LN2@Writer_tra:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@Writer_tra

; 1312 :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@Writer_tra:

; 1313 : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
Writer_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DPGCILNC@Writer_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$Writer_clear DD imagerel Writer_clear
	DD	imagerel Writer_clear+218
	DD	imagerel $unwind$Writer_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Writer_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0N@DPGCILNC@Writer_clear?$AA@
CONST	SEGMENT
??_C@_0N@DPGCILNC@Writer_clear?$AA@ DB 'Writer_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Writer_clear
_TEXT	SEGMENT
_py_tmp$21699 = 48
_py_tmp$21707 = 56
self$ = 80
Writer_clear PROC					; COMDAT

; 1317 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN8@Writer_cle:

; 1318 :     Py_CLEAR(self->dialect);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	74 53		 je	 SHORT $LN5@Writer_cle
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00022	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  00026	41 b8 26 05 00
	00		 mov	 r8d, 1318		; 00000526H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DPGCILNC@Writer_clear?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN5@Writer_cle
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00048	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21699[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00056	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21699[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@Writer_cle:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN8@Writer_cle
$LN4@Writer_cle:

; 1319 :     Py_CLEAR(self->writeline);

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00073	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00078	74 53		 je	 SHORT $LN1@Writer_cle
  0007a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00087	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  0008b	41 b8 27 05 00
	00		 mov	 r8d, 1319		; 00000527H
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DDBDDPGA@?4?4?2Modules?2_csv?4c?$AA@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DPGCILNC@Writer_clear?$AA@
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 25		 jne	 SHORT $LN1@Writer_cle
  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000ad	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000b1	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$21707[rsp], rax
  000b6	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000bb	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  000c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$21707[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@Writer_cle:
  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 9b		 jne	 SHORT $LN4@Writer_cle

; 1320 :     return 0;

  000d3	33 c0		 xor	 eax, eax

; 1321 : }

  000d5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d9	c3		 ret	 0
Writer_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@MLDPKAEK@argument?51?5must?5have?5a?5?$CCwrite?$CC?5m@ ; `string'
EXTRN	PyCallable_Check:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$csv_writer DD imagerel csv_writer
	DD	imagerel csv_writer+432
	DD	imagerel $unwind$csv_writer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$csv_writer DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0CG@MLDPKAEK@argument?51?5must?5have?5a?5?$CCwrite?$CC?5m@
CONST	SEGMENT
??_C@_0CG@MLDPKAEK@argument?51?5must?5have?5a?5?$CCwrite?$CC?5m@ DB 'argu'
	DB	'ment 1 must have a "write" method', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT csv_writer
_TEXT	SEGMENT
output_file$ = 48
self$ = 56
dialect$ = 64
tv70 = 72
module$ = 96
args$ = 104
keyword_args$ = 112
csv_writer PROC						; COMDAT

; 1367 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1368 :     PyObject * output_file, * dialect = NULL;

  00013	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR dialect$[rsp], 0

; 1369 :     WriterObj * self = PyObject_GC_New(WriterObj, &Writer_Type);

  0001c	e8 00 00 00 00	 call	 _Py_PXCTX
  00021	85 c0		 test	 eax, eax
  00023	74 13		 je	 SHORT $LN8@csv_writer@3
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Writer_Type
  0002c	e8 00 00 00 00	 call	 _PxObject_New
  00031	48 89 44 24 48	 mov	 QWORD PTR tv70[rsp], rax
  00036	eb 11		 jmp	 SHORT $LN9@csv_writer@3
$LN8@csv_writer@3:
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Writer_Type
  0003f	e8 00 00 00 00	 call	 _PyObject_GC_New
  00044	48 89 44 24 48	 mov	 QWORD PTR tv70[rsp], rax
$LN9@csv_writer@3:
  00049	48 8b 44 24 48	 mov	 rax, QWORD PTR tv70[rsp]
  0004e	48 89 44 24 38	 mov	 QWORD PTR self$[rsp], rax

; 1370 :     _Py_IDENTIFIER(write);
; 1371 : 
; 1372 :     if (!self)

  00053	48 83 7c 24 38
	00		 cmp	 QWORD PTR self$[rsp], 0
  00059	75 07		 jne	 SHORT $LN5@csv_writer@3

; 1373 :         return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 49 01 00 00	 jmp	 $LN6@csv_writer@3
$LN5@csv_writer@3:

; 1374 : 
; 1375 :     self->dialect = NULL;

  00062	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  00067	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 1376 :     self->writeline = NULL;

  0006f	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  00074	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 1377 : 
; 1378 :     self->rec = NULL;

  0007c	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  00081	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 1379 :     self->rec_size = 0;

  00089	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  0008e	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 1380 :     self->rec_len = 0;

  00096	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  0009b	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1381 :     self->num_fields = 0;

  000a6	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  000ab	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+136], 0

; 1382 : 
; 1383 :     if (!PyArg_UnpackTuple(args, "", 1, 2, &output_file, &dialect)) {

  000b5	48 8d 44 24 40	 lea	 rax, QWORD PTR dialect$[rsp]
  000ba	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000bf	48 8d 44 24 30	 lea	 rax, QWORD PTR output_file$[rsp]
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 02 00 00
	00		 mov	 r9d, 2
  000cf	41 b8 01 00 00
	00		 mov	 r8d, 1
  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000dc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  000e1	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  000e6	85 c0		 test	 eax, eax
  000e8	75 11		 jne	 SHORT $LN4@csv_writer@3

; 1384 :         Py_DECREF(self);

  000ea	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  000ef	e8 00 00 00 00	 call	 _Py_DecRef

; 1385 :         return NULL;

  000f4	33 c0		 xor	 eax, eax
  000f6	e9 b0 00 00 00	 jmp	 $LN6@csv_writer@3
$LN4@csv_writer@3:

; 1386 :     }
; 1387 :     self->writeline = _PyObject_GetAttrId(output_file, &PyId_write);

  000fb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_write@?1??csv_writer@@9@9
  00100	8b c0		 mov	 eax, eax
  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00108	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00111	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00115	48 8b d0	 mov	 rdx, rax
  00118	48 8b 4c 24 30	 mov	 rcx, QWORD PTR output_file$[rsp]
  0011d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00122	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  00127	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 1388 :     if (self->writeline == NULL || !PyCallable_Check(self->writeline)) {

  0012b	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  00130	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00135	74 12		 je	 SHORT $LN2@csv_writer@3
  00137	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  0013c	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00140	e8 00 00 00 00	 call	 PyCallable_Check
  00145	85 c0		 test	 eax, eax
  00147	75 21		 jne	 SHORT $LN3@csv_writer@3
$LN2@csv_writer@3:

; 1389 :         PyErr_SetString(PyExc_TypeError,
; 1390 :                         "argument 1 must have a \"write\" method");

  00149	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@MLDPKAEK@argument?51?5must?5have?5a?5?$CCwrite?$CC?5m@
  00150	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00157	e8 00 00 00 00	 call	 PyErr_SetString

; 1391 :         Py_DECREF(self);

  0015c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  00161	e8 00 00 00 00	 call	 _Py_DecRef

; 1392 :         return NULL;

  00166	33 c0		 xor	 eax, eax
  00168	eb 41		 jmp	 SHORT $LN6@csv_writer@3
$LN3@csv_writer@3:

; 1393 :     }
; 1394 :     self->dialect = (DialectObj *)_call_dialect(dialect, keyword_args);

  0016a	48 8b 54 24 70	 mov	 rdx, QWORD PTR keyword_args$[rsp]
  0016f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dialect$[rsp]
  00174	e8 00 00 00 00	 call	 _call_dialect
  00179	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  0017e	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 1395 :     if (self->dialect == NULL) {

  00182	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  00187	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0018c	75 0e		 jne	 SHORT $LN1@csv_writer@3

; 1396 :         Py_DECREF(self);

  0018e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  00193	e8 00 00 00 00	 call	 _Py_DecRef

; 1397 :         return NULL;

  00198	33 c0		 xor	 eax, eax
  0019a	eb 0f		 jmp	 SHORT $LN6@csv_writer@3
$LN1@csv_writer@3:

; 1398 :     }
; 1399 :     PyObject_GC_Track(self);

  0019c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  001a1	e8 00 00 00 00	 call	 PyObject_GC_Track

; 1400 :     return (PyObject *)self;

  001a6	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
$LN6@csv_writer@3:

; 1401 : }

  001ab	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001af	c3		 ret	 0
csv_writer ENDP
_TEXT	ENDS
EXTRN	PyDict_Keys:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$csv_list_dialects DD imagerel csv_list_dialects
	DD	imagerel csv_list_dialects+48
	DD	imagerel $unwind$csv_list_dialects
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$csv_list_dialects DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT csv_list_dialects
_TEXT	SEGMENT
module$ = 48
args$ = 56
csv_list_dialects PROC					; COMDAT

; 1408 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1409 :     return PyDict_Keys(_csvstate_global->dialects);

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  00015	e8 00 00 00 00	 call	 PyState_FindModule
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 PyModule_GetState
  00022	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00026	e8 00 00 00 00	 call	 PyDict_Keys

; 1410 : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
csv_list_dialects ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DE@HHFBJPMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BO@IGKDECPB@dialect?5name?5must?5be?5a?5string?$AA@ ; `string'
EXTRN	PyDict_SetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$csv_register_dialect DD imagerel csv_register_dialect
	DD	imagerel csv_register_dialect+366
	DD	imagerel $unwind$csv_register_dialect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$csv_register_dialect DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_1DE@HHFBJPMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@HHFBJPMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	'_', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IGKDECPB@dialect?5name?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0BO@IGKDECPB@dialect?5name?5must?5be?5a?5string?$AA@ DB 'dialect na'
	DB	'me must be a string', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT csv_register_dialect
_TEXT	SEGMENT
dialect_obj$ = 48
name_obj$ = 56
dialect$ = 64
tv92 = 72
module$ = 96
args$ = 104
kwargs$ = 112
csv_register_dialect PROC				; COMDAT

; 1414 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1415 :     PyObject *name_obj, *dialect_obj = NULL;

  00013	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR dialect_obj$[rsp], 0

; 1416 :     PyObject *dialect;
; 1417 : 
; 1418 :     if (!PyArg_UnpackTuple(args, "", 1, 2, &name_obj, &dialect_obj))

  0001c	48 8d 44 24 30	 lea	 rax, QWORD PTR dialect_obj$[rsp]
  00021	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00026	48 8d 44 24 38	 lea	 rax, QWORD PTR name_obj$[rsp]
  0002b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00030	41 b9 02 00 00
	00		 mov	 r9d, 2
  00036	41 b8 01 00 00
	00		 mov	 r8d, 1
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00043	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00048	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0004d	85 c0		 test	 eax, eax
  0004f	75 07		 jne	 SHORT $LN5@csv_regist

; 1419 :         return NULL;

  00051	33 c0		 xor	 eax, eax
  00053	e9 11 01 00 00	 jmp	 $LN6@csv_regist
$LN5@csv_regist:

; 1420 :     if (!PyUnicode_Check(name_obj)) {

  00058	48 8b 44 24 38	 mov	 rax, QWORD PTR name_obj$[rsp]
  0005d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00061	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00067	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0006c	85 c0		 test	 eax, eax
  0006e	75 1a		 jne	 SHORT $LN4@csv_regist

; 1421 :         PyErr_SetString(PyExc_TypeError,
; 1422 :                         "dialect name must be a string");

  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@IGKDECPB@dialect?5name?5must?5be?5a?5string?$AA@
  00077	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0007e	e8 00 00 00 00	 call	 PyErr_SetString

; 1423 :         return NULL;

  00083	33 c0		 xor	 eax, eax
  00085	e9 df 00 00 00	 jmp	 $LN6@csv_regist
$LN4@csv_regist:

; 1424 :     }
; 1425 :     if (PyUnicode_READY(name_obj) == -1)

  0008a	48 8b 44 24 38	 mov	 rax, QWORD PTR name_obj$[rsp]
  0008f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00093	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00099	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0009e	85 c0		 test	 eax, eax
  000a0	75 1c		 jne	 SHORT $LN8@csv_regist
  000a2	41 b8 91 05 00
	00		 mov	 r8d, 1425		; 00000591H
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CE@JDJOPMPI@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAc?$AAs?$AAv?$AA?4?$AAc?$AA?$AA@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@HHFBJPMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000bc	33 c0		 xor	 eax, eax
$LN8@csv_regist:
  000be	48 8b 44 24 38	 mov	 rax, QWORD PTR name_obj$[rsp]
  000c3	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000c6	c1 e8 07	 shr	 eax, 7
  000c9	83 e0 01	 and	 eax, 1
  000cc	85 c0		 test	 eax, eax
  000ce	74 0a		 je	 SHORT $LN9@csv_regist
  000d0	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
  000d8	eb 0e		 jmp	 SHORT $LN10@csv_regist
$LN9@csv_regist:
  000da	48 8b 4c 24 38	 mov	 rcx, QWORD PTR name_obj$[rsp]
  000df	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000e4	89 44 24 48	 mov	 DWORD PTR tv92[rsp], eax
$LN10@csv_regist:
  000e8	83 7c 24 48 ff	 cmp	 DWORD PTR tv92[rsp], -1
  000ed	75 04		 jne	 SHORT $LN3@csv_regist

; 1426 :         return NULL;

  000ef	33 c0		 xor	 eax, eax
  000f1	eb 76		 jmp	 SHORT $LN6@csv_regist
$LN3@csv_regist:

; 1427 :     dialect = _call_dialect(dialect_obj, kwargs);

  000f3	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwargs$[rsp]
  000f8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dialect_obj$[rsp]
  000fd	e8 00 00 00 00	 call	 _call_dialect
  00102	48 89 44 24 40	 mov	 QWORD PTR dialect$[rsp], rax

; 1428 :     if (dialect == NULL)

  00107	48 83 7c 24 40
	00		 cmp	 QWORD PTR dialect$[rsp], 0
  0010d	75 04		 jne	 SHORT $LN2@csv_regist

; 1429 :         return NULL;

  0010f	33 c0		 xor	 eax, eax
  00111	eb 56		 jmp	 SHORT $LN6@csv_regist
$LN2@csv_regist:

; 1430 :     if (PyDict_SetItem(_csvstate_global->dialects, name_obj, dialect) < 0) {

  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  0011a	e8 00 00 00 00	 call	 PyState_FindModule
  0011f	48 8b c8	 mov	 rcx, rax
  00122	e8 00 00 00 00	 call	 PyModule_GetState
  00127	4c 8b 44 24 40	 mov	 r8, QWORD PTR dialect$[rsp]
  0012c	48 8b 54 24 38	 mov	 rdx, QWORD PTR name_obj$[rsp]
  00131	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00135	e8 00 00 00 00	 call	 PyDict_SetItem
  0013a	85 c0		 test	 eax, eax
  0013c	7d 0e		 jge	 SHORT $LN1@csv_regist

; 1431 :         Py_DECREF(dialect);

  0013e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dialect$[rsp]
  00143	e8 00 00 00 00	 call	 _Py_DecRef

; 1432 :         return NULL;

  00148	33 c0		 xor	 eax, eax
  0014a	eb 1d		 jmp	 SHORT $LN6@csv_regist
$LN1@csv_regist:

; 1433 :     }
; 1434 :     Py_DECREF(dialect);

  0014c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dialect$[rsp]
  00151	e8 00 00 00 00	 call	 _Py_DecRef

; 1435 :     Py_INCREF(Py_None);

  00156	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0015d	e8 00 00 00 00	 call	 _Py_IncRef

; 1436 :     return Py_None;

  00162	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN6@csv_regist:

; 1437 : }

  00169	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0016d	c3		 ret	 0
csv_register_dialect ENDP
_TEXT	ENDS
EXTRN	PyDict_DelItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$csv_unregister_dialect DD imagerel csv_unregister_dialect
	DD	imagerel csv_unregister_dialect+113
	DD	imagerel $unwind$csv_unregister_dialect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$csv_unregister_dialect DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT csv_unregister_dialect
_TEXT	SEGMENT
module$ = 48
name_obj$ = 56
csv_unregister_dialect PROC				; COMDAT

; 1441 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1442 :     if (PyDict_DelItem(_csvstate_global->dialects, name_obj) < 0)

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  00015	e8 00 00 00 00	 call	 PyState_FindModule
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 PyModule_GetState
  00022	48 8b 54 24 38	 mov	 rdx, QWORD PTR name_obj$[rsp]
  00027	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0002b	e8 00 00 00 00	 call	 PyDict_DelItem
  00030	85 c0		 test	 eax, eax
  00032	7d 25		 jge	 SHORT $LN1@csv_unregi

; 1443 :         return PyErr_Format(_csvstate_global->error_obj, "unknown dialect");

  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  0003b	e8 00 00 00 00	 call	 PyState_FindModule
  00040	48 8b c8	 mov	 rcx, rax
  00043	e8 00 00 00 00	 call	 PyModule_GetState
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DGBJMIAO@unknown?5dialect?$AA@
  0004f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00052	e8 00 00 00 00	 call	 PyErr_Format
  00057	eb 13		 jmp	 SHORT $LN2@csv_unregi
$LN1@csv_unregi:

; 1444 :     Py_INCREF(Py_None);

  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00060	e8 00 00 00 00	 call	 _Py_IncRef

; 1445 :     return Py_None;

  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@csv_unregi:

; 1446 : }

  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	c3		 ret	 0
csv_unregister_dialect ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$csv_get_dialect DD imagerel csv_get_dialect
	DD	imagerel csv_get_dialect+29
	DD	imagerel $unwind$csv_get_dialect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$csv_get_dialect DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT csv_get_dialect
_TEXT	SEGMENT
module$ = 48
name_obj$ = 56
csv_get_dialect PROC					; COMDAT

; 1450 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1451 :     return get_dialect_from_registry(name_obj);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR name_obj$[rsp]
  00013	e8 00 00 00 00	 call	 get_dialect_from_registry

; 1452 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
csv_get_dialect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@EOJGCLAC@limit?5must?5be?5an?5integer?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$csv_field_size_limit DD imagerel csv_field_size_limit
	DD	imagerel csv_field_size_limit+272
	DD	imagerel $unwind$csv_field_size_limit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$csv_field_size_limit DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0BJ@EOJGCLAC@limit?5must?5be?5an?5integer?$AA@
CONST	SEGMENT
??_C@_0BJ@EOJGCLAC@limit?5must?5be?5an?5integer?$AA@ DB 'limit must be an'
	DB	' integer', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT csv_field_size_limit
_TEXT	SEGMENT
old_limit$ = 48
new_limit$ = 56
tv86 = 64
module$ = 96
args$ = 104
csv_field_size_limit PROC				; COMDAT

; 1456 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1457 :     PyObject *new_limit = NULL;

  0000e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR new_limit$[rsp], 0

; 1458 :     long old_limit = _csvstate_global->field_limit;

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  0001e	e8 00 00 00 00	 call	 PyState_FindModule
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 PyModule_GetState
  0002b	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0002e	89 44 24 30	 mov	 DWORD PTR old_limit$[rsp], eax

; 1459 : 
; 1460 :     if (!PyArg_UnpackTuple(args, "field_size_limit", 0, 1, &new_limit))

  00032	48 8d 44 24 38	 lea	 rax, QWORD PTR new_limit$[rsp]
  00037	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00042	45 33 c0	 xor	 r8d, r8d
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@BNOLCBNI@field_size_limit?$AA@
  0004c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00051	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00056	85 c0		 test	 eax, eax
  00058	75 07		 jne	 SHORT $LN4@csv_field_

; 1461 :         return NULL;

  0005a	33 c0		 xor	 eax, eax
  0005c	e9 aa 00 00 00	 jmp	 $LN5@csv_field_
$LN4@csv_field_:

; 1462 :     if (new_limit != NULL) {

  00061	48 83 7c 24 38
	00		 cmp	 QWORD PTR new_limit$[rsp], 0
  00067	0f 84 95 00 00
	00		 je	 $LN3@csv_field_

; 1463 :         if (!PyLong_CheckExact(new_limit)) {

  0006d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  00074	48 8b 4c 24 38	 mov	 rcx, QWORD PTR new_limit$[rsp]
  00079	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0007d	74 17		 je	 SHORT $LN2@csv_field_

; 1464 :             PyErr_Format(PyExc_TypeError,
; 1465 :                          "limit must be an integer");

  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@EOJGCLAC@limit?5must?5be?5an?5integer?$AA@
  00086	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0008d	e8 00 00 00 00	 call	 PyErr_Format

; 1466 :             return NULL;

  00092	33 c0		 xor	 eax, eax
  00094	eb 75		 jmp	 SHORT $LN5@csv_field_
$LN2@csv_field_:

; 1467 :         }
; 1468 :         _csvstate_global->field_limit = PyLong_AsLong(new_limit);

  00096	48 8b 4c 24 38	 mov	 rcx, QWORD PTR new_limit$[rsp]
  0009b	e8 00 00 00 00	 call	 PyLong_AsLong
  000a0	89 44 24 40	 mov	 DWORD PTR tv86[rsp], eax
  000a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  000ab	e8 00 00 00 00	 call	 PyState_FindModule
  000b0	48 8b c8	 mov	 rcx, rax
  000b3	e8 00 00 00 00	 call	 PyModule_GetState
  000b8	8b 4c 24 40	 mov	 ecx, DWORD PTR tv86[rsp]
  000bc	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 1469 :         if (_csvstate_global->field_limit == -1 && PyErr_Occurred()) {

  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  000c6	e8 00 00 00 00	 call	 PyState_FindModule
  000cb	48 8b c8	 mov	 rcx, rax
  000ce	e8 00 00 00 00	 call	 PyModule_GetState
  000d3	83 78 10 ff	 cmp	 DWORD PTR [rax+16], -1
  000d7	75 29		 jne	 SHORT $LN1@csv_field_
  000d9	e8 00 00 00 00	 call	 PyErr_Occurred
  000de	48 85 c0	 test	 rax, rax
  000e1	74 1f		 je	 SHORT $LN1@csv_field_

; 1470 :             _csvstate_global->field_limit = old_limit;

  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  000ea	e8 00 00 00 00	 call	 PyState_FindModule
  000ef	48 8b c8	 mov	 rcx, rax
  000f2	e8 00 00 00 00	 call	 PyModule_GetState
  000f7	8b 4c 24 30	 mov	 ecx, DWORD PTR old_limit$[rsp]
  000fb	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 1471 :             return NULL;

  000fe	33 c0		 xor	 eax, eax
  00100	eb 09		 jmp	 SHORT $LN5@csv_field_
$LN1@csv_field_:
$LN3@csv_field_:

; 1472 :         }
; 1473 :     }
; 1474 :     return PyLong_FromLong(old_limit);

  00102	8b 4c 24 30	 mov	 ecx, DWORD PTR old_limit$[rsp]
  00106	e8 00 00 00 00	 call	 PyLong_FromLong
$LN5@csv_field_:

; 1475 : }

  0010b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0010f	c3		 ret	 0
csv_field_size_limit ENDP
_TEXT	ENDS
PUBLIC	??_C@_05NAOIJFC@Error?$AA@			; `string'
PUBLIC	??_C@_0L@DKEOCKEK@_csv?4Error?$AA@		; `string'
PUBLIC	??_C@_07LLHEGNLO@Dialect?$AA@			; `string'
PUBLIC	??_C@_09OHBNODGN@_dialects?$AA@			; `string'
PUBLIC	??_C@_0M@EKHGKOEI@__version__?$AA@		; `string'
PUBLIC	??_C@_03HLLJOCDO@1?40?$AA@			; `string'
PUBLIC	PyInit__csv
EXTRN	PyErr_NewException:PROC
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyModule_AddStringConstant:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__csv DD imagerel $LN16
	DD	imagerel $LN16+520
	DD	imagerel $unwind$PyInit__csv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__csv DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error?$AA@
CONST	SEGMENT
??_C@_05NAOIJFC@Error?$AA@ DB 'Error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DKEOCKEK@_csv?4Error?$AA@
CONST	SEGMENT
??_C@_0L@DKEOCKEK@_csv?4Error?$AA@ DB '_csv.Error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LLHEGNLO@Dialect?$AA@
CONST	SEGMENT
??_C@_07LLHEGNLO@Dialect?$AA@ DB 'Dialect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OHBNODGN@_dialects?$AA@
CONST	SEGMENT
??_C@_09OHBNODGN@_dialects?$AA@ DB '_dialects', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EKHGKOEI@__version__?$AA@
CONST	SEGMENT
??_C@_0M@EKHGKOEI@__version__?$AA@ DB '__version__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HLLJOCDO@1?40?$AA@
CONST	SEGMENT
??_C@_03HLLJOCDO@1?40?$AA@ DB '1.0', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit__csv
_TEXT	SEGMENT
style$ = 32
module$ = 40
tv88 = 48
tv154 = 56
PyInit__csv PROC					; COMDAT

; 1623 : {

$LN16:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1624 :     PyObject *module;
; 1625 :     StyleDesc *style;
; 1626 : 
; 1627 :     if (PyType_Ready(&Dialect_Type) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Dialect_Type
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	7d 07		 jge	 SHORT $LN13@PyInit__cs

; 1628 :         return NULL;

  00014	33 c0		 xor	 eax, eax
  00016	e9 e8 01 00 00	 jmp	 $LN14@PyInit__cs
$LN13@PyInit__cs:

; 1629 : 
; 1630 :     if (PyType_Ready(&Reader_Type) < 0)

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Reader_Type
  00022	e8 00 00 00 00	 call	 PyType_Ready
  00027	85 c0		 test	 eax, eax
  00029	7d 07		 jge	 SHORT $LN12@PyInit__cs

; 1631 :         return NULL;

  0002b	33 c0		 xor	 eax, eax
  0002d	e9 d1 01 00 00	 jmp	 $LN14@PyInit__cs
$LN12@PyInit__cs:

; 1632 : 
; 1633 :     if (PyType_Ready(&Writer_Type) < 0)

  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Writer_Type
  00039	e8 00 00 00 00	 call	 PyType_Ready
  0003e	85 c0		 test	 eax, eax
  00040	7d 07		 jge	 SHORT $LN11@PyInit__cs

; 1634 :         return NULL;

  00042	33 c0		 xor	 eax, eax
  00044	e9 ba 01 00 00	 jmp	 $LN14@PyInit__cs
$LN11@PyInit__cs:

; 1635 : 
; 1636 :     /* Create the module and add the functions */
; 1637 :     module = PyModule_Create(&_csvmodule);

  00049	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_csvmodule
  00055	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  0005a	48 89 44 24 28	 mov	 QWORD PTR module$[rsp], rax

; 1638 :     if (module == NULL)

  0005f	48 83 7c 24 28
	00		 cmp	 QWORD PTR module$[rsp], 0
  00065	75 07		 jne	 SHORT $LN10@PyInit__cs

; 1639 :         return NULL;

  00067	33 c0		 xor	 eax, eax
  00069	e9 95 01 00 00	 jmp	 $LN14@PyInit__cs
$LN10@PyInit__cs:

; 1640 : 
; 1641 :     /* Add version to the module. */
; 1642 :     if (PyModule_AddStringConstant(module, "__version__",
; 1643 :                                    MODULE_VERSION) == -1)

  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03HLLJOCDO@1?40?$AA@
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@EKHGKOEI@__version__?$AA@
  0007c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  00081	e8 00 00 00 00	 call	 PyModule_AddStringConstant
  00086	83 f8 ff	 cmp	 eax, -1
  00089	75 07		 jne	 SHORT $LN9@PyInit__cs

; 1644 :         return NULL;

  0008b	33 c0		 xor	 eax, eax
  0008d	e9 71 01 00 00	 jmp	 $LN14@PyInit__cs
$LN9@PyInit__cs:

; 1645 : 
; 1646 :     /* Set the field limit */
; 1647 :     _csvstate(module)->field_limit = 128 * 1024;

  00092	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  00097	e8 00 00 00 00	 call	 PyModule_GetState
  0009c	c7 40 10 00 00
	02 00		 mov	 DWORD PTR [rax+16], 131072 ; 00020000H

; 1648 :     /* Do I still need to add this var to the Module Dict? */
; 1649 : 
; 1650 :     /* Add _dialects dictionary */
; 1651 :     _csvstate(module)->dialects = PyDict_New();

  000a3	e8 00 00 00 00	 call	 PyDict_New
  000a8	48 89 44 24 30	 mov	 QWORD PTR tv88[rsp], rax
  000ad	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  000b2	e8 00 00 00 00	 call	 PyModule_GetState
  000b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv88[rsp]
  000bc	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1652 :     if (_csvstate(module)->dialects == NULL)

  000c0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  000c5	e8 00 00 00 00	 call	 PyModule_GetState
  000ca	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000cf	75 07		 jne	 SHORT $LN8@PyInit__cs

; 1653 :         return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	e9 2b 01 00 00	 jmp	 $LN14@PyInit__cs
$LN8@PyInit__cs:

; 1654 :     Py_INCREF(_csvstate(module)->dialects);

  000d8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  000dd	e8 00 00 00 00	 call	 PyModule_GetState
  000e2	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000e6	e8 00 00 00 00	 call	 _Py_IncRef

; 1655 :     if (PyModule_AddObject(module, "_dialects", _csvstate(module)->dialects))

  000eb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  000f0	e8 00 00 00 00	 call	 PyModule_GetState
  000f5	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09OHBNODGN@_dialects?$AA@
  00100	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  00105	e8 00 00 00 00	 call	 PyModule_AddObject
  0010a	85 c0		 test	 eax, eax
  0010c	74 07		 je	 SHORT $LN7@PyInit__cs

; 1656 :         return NULL;

  0010e	33 c0		 xor	 eax, eax
  00110	e9 ee 00 00 00	 jmp	 $LN14@PyInit__cs
$LN7@PyInit__cs:

; 1657 : 
; 1658 :     /* Add quote styles into dictionary */
; 1659 :     for (style = quote_styles; style->name; style++) {

  00115	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:quote_styles
  0011c	48 89 44 24 20	 mov	 QWORD PTR style$[rsp], rax
  00121	eb 0e		 jmp	 SHORT $LN6@PyInit__cs
$LN5@PyInit__cs:
  00123	48 8b 44 24 20	 mov	 rax, QWORD PTR style$[rsp]
  00128	48 83 c0 10	 add	 rax, 16
  0012c	48 89 44 24 20	 mov	 QWORD PTR style$[rsp], rax
$LN6@PyInit__cs:
  00131	48 8b 44 24 20	 mov	 rax, QWORD PTR style$[rsp]
  00136	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0013b	74 29		 je	 SHORT $LN4@PyInit__cs

; 1660 :         if (PyModule_AddIntConstant(module, style->name,
; 1661 :                                     style->style) == -1)

  0013d	48 8b 44 24 20	 mov	 rax, QWORD PTR style$[rsp]
  00142	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  00145	48 8b 44 24 20	 mov	 rax, QWORD PTR style$[rsp]
  0014a	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  00153	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  00158	83 f8 ff	 cmp	 eax, -1
  0015b	75 07		 jne	 SHORT $LN3@PyInit__cs

; 1662 :             return NULL;

  0015d	33 c0		 xor	 eax, eax
  0015f	e9 9f 00 00 00	 jmp	 $LN14@PyInit__cs
$LN3@PyInit__cs:

; 1663 :     }

  00164	eb bd		 jmp	 SHORT $LN5@PyInit__cs
$LN4@PyInit__cs:

; 1664 : 
; 1665 :     /* Add the Dialect type */
; 1666 :     Py_INCREF(&Dialect_Type);

  00166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Dialect_Type
  0016d	e8 00 00 00 00	 call	 _Py_IncRef

; 1667 :     if (PyModule_AddObject(module, "Dialect", (PyObject *)&Dialect_Type))

  00172	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:Dialect_Type
  00179	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07LLHEGNLO@Dialect?$AA@
  00180	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  00185	e8 00 00 00 00	 call	 PyModule_AddObject
  0018a	85 c0		 test	 eax, eax
  0018c	74 04		 je	 SHORT $LN2@PyInit__cs

; 1668 :         return NULL;

  0018e	33 c0		 xor	 eax, eax
  00190	eb 71		 jmp	 SHORT $LN14@PyInit__cs
$LN2@PyInit__cs:

; 1669 : 
; 1670 :     /* Add the CSV exception object to the module. */
; 1671 :     _csvstate(module)->error_obj = PyErr_NewException("_csv.Error", NULL, NULL);

  00192	45 33 c0	 xor	 r8d, r8d
  00195	33 d2		 xor	 edx, edx
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DKEOCKEK@_csv?4Error?$AA@
  0019e	e8 00 00 00 00	 call	 PyErr_NewException
  001a3	48 89 44 24 38	 mov	 QWORD PTR tv154[rsp], rax
  001a8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  001ad	e8 00 00 00 00	 call	 PyModule_GetState
  001b2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv154[rsp]
  001b7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1672 :     if (_csvstate(module)->error_obj == NULL)

  001ba	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  001bf	e8 00 00 00 00	 call	 PyModule_GetState
  001c4	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001c8	75 04		 jne	 SHORT $LN1@PyInit__cs

; 1673 :         return NULL;

  001ca	33 c0		 xor	 eax, eax
  001cc	eb 35		 jmp	 SHORT $LN14@PyInit__cs
$LN1@PyInit__cs:

; 1674 :     Py_INCREF(_csvstate(module)->error_obj);

  001ce	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  001d3	e8 00 00 00 00	 call	 PyModule_GetState
  001d8	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001db	e8 00 00 00 00	 call	 _Py_IncRef

; 1675 :     PyModule_AddObject(module, "Error", _csvstate(module)->error_obj);

  001e0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  001e5	e8 00 00 00 00	 call	 PyModule_GetState
  001ea	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  001ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NAOIJFC@Error?$AA@
  001f4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR module$[rsp]
  001f9	e8 00 00 00 00	 call	 PyModule_AddObject

; 1676 :     return module;

  001fe	48 8b 44 24 28	 mov	 rax, QWORD PTR module$[rsp]
$LN14@PyInit__cs:

; 1677 : }

  00203	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00207	c3		 ret	 0
PyInit__csv ENDP
_TEXT	ENDS
END
