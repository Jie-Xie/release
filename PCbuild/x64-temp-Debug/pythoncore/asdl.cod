; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	asdl_seq_new
EXTRN	memset:PROC
EXTRN	PyArena_Malloc:PROC
EXTRN	PyErr_NoMemory:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\asdl.c
pdata	SEGMENT
$pdata$asdl_seq_new DD imagerel $LN9
	DD	imagerel $LN9+237
	DD	imagerel $unwind$asdl_seq_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$asdl_seq_new DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT asdl_seq_new
_TEXT	SEGMENT
n$ = 32
seq$ = 40
tv67 = 48
size$ = 80
arena$ = 88
asdl_seq_new PROC					; COMDAT

; 6    : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 7    :     asdl_seq *seq = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR seq$[rsp], 0

; 8    :     size_t n = (size ? (sizeof(void *) * (size - 1)) : 0);

  00017	48 83 7c 24 50
	00		 cmp	 QWORD PTR size$[rsp], 0
  0001d	74 14		 je	 SHORT $LN7@asdl_seq_n
  0001f	48 8b 44 24 50	 mov	 rax, QWORD PTR size$[rsp]
  00024	48 8d 04 c5 f8
	ff ff ff	 lea	 rax, QWORD PTR [rax*8-8]
  0002c	48 89 44 24 30	 mov	 QWORD PTR tv67[rsp], rax
  00031	eb 09		 jmp	 SHORT $LN8@asdl_seq_n
$LN7@asdl_seq_n:
  00033	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv67[rsp], 0
$LN8@asdl_seq_n:
  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR tv67[rsp]
  00041	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 9    : 
; 10   :     /* check size is sane */
; 11   :     if (size < 0 || size == INT_MIN ||
; 12   :         (size && ((size - 1) > (PY_SIZE_MAX / sizeof(void *))))) {

  00046	48 83 7c 24 50
	00		 cmp	 QWORD PTR size$[rsp], 0
  0004c	7c 2a		 jl	 SHORT $LN3@asdl_seq_n
  0004e	48 81 7c 24 50
	00 00 00 80	 cmp	 QWORD PTR size$[rsp], -2147483648 ; ffffffff80000000H
  00057	74 1f		 je	 SHORT $LN3@asdl_seq_n
  00059	48 83 7c 24 50
	00		 cmp	 QWORD PTR size$[rsp], 0
  0005f	74 20		 je	 SHORT $LN4@asdl_seq_n
  00061	48 8b 44 24 50	 mov	 rax, QWORD PTR size$[rsp]
  00066	48 ff c8	 dec	 rax
  00069	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  00073	48 3b c1	 cmp	 rax, rcx
  00076	76 09		 jbe	 SHORT $LN4@asdl_seq_n
$LN3@asdl_seq_n:

; 13   :         PyErr_NoMemory();

  00078	e8 00 00 00 00	 call	 PyErr_NoMemory

; 14   :         return NULL;

  0007d	33 c0		 xor	 eax, eax
  0007f	eb 67		 jmp	 SHORT $LN5@asdl_seq_n
$LN4@asdl_seq_n:

; 15   :     }
; 16   : 
; 17   :     /* check if size can be added safely */
; 18   :     if (n > PY_SIZE_MAX - sizeof(asdl_seq)) {

  00081	48 83 7c 24 20
	ef		 cmp	 QWORD PTR n$[rsp], -17
  00087	76 09		 jbe	 SHORT $LN2@asdl_seq_n

; 19   :         PyErr_NoMemory();

  00089	e8 00 00 00 00	 call	 PyErr_NoMemory

; 20   :         return NULL;

  0008e	33 c0		 xor	 eax, eax
  00090	eb 56		 jmp	 SHORT $LN5@asdl_seq_n
$LN2@asdl_seq_n:

; 21   :     }
; 22   : 
; 23   :     n += sizeof(asdl_seq);

  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00097	48 83 c0 10	 add	 rax, 16
  0009b	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 24   : 
; 25   :     seq = (asdl_seq *)PyArena_Malloc(arena, n);

  000a0	48 8b 54 24 20	 mov	 rdx, QWORD PTR n$[rsp]
  000a5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  000aa	e8 00 00 00 00	 call	 PyArena_Malloc
  000af	48 89 44 24 28	 mov	 QWORD PTR seq$[rsp], rax

; 26   :     if (!seq) {

  000b4	48 83 7c 24 28
	00		 cmp	 QWORD PTR seq$[rsp], 0
  000ba	75 09		 jne	 SHORT $LN1@asdl_seq_n

; 27   :         PyErr_NoMemory();

  000bc	e8 00 00 00 00	 call	 PyErr_NoMemory

; 28   :         return NULL;

  000c1	33 c0		 xor	 eax, eax
  000c3	eb 23		 jmp	 SHORT $LN5@asdl_seq_n
$LN1@asdl_seq_n:

; 29   :     }
; 30   :     memset(seq, 0, n);

  000c5	4c 8b 44 24 20	 mov	 r8, QWORD PTR n$[rsp]
  000ca	33 d2		 xor	 edx, edx
  000cc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR seq$[rsp]
  000d1	e8 00 00 00 00	 call	 memset

; 31   :     seq->size = size;

  000d6	48 8b 44 24 28	 mov	 rax, QWORD PTR seq$[rsp]
  000db	48 8b 4c 24 50	 mov	 rcx, QWORD PTR size$[rsp]
  000e0	48 89 08	 mov	 QWORD PTR [rax], rcx

; 32   :     return seq;

  000e3	48 8b 44 24 28	 mov	 rax, QWORD PTR seq$[rsp]
$LN5@asdl_seq_n:

; 33   : }

  000e8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ec	c3		 ret	 0
asdl_seq_new ENDP
_TEXT	ENDS
PUBLIC	asdl_int_seq_new
;	COMDAT pdata
pdata	SEGMENT
$pdata$asdl_int_seq_new DD imagerel $LN9
	DD	imagerel $LN9+237
	DD	imagerel $unwind$asdl_int_seq_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$asdl_int_seq_new DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT asdl_int_seq_new
_TEXT	SEGMENT
n$ = 32
seq$ = 40
tv67 = 48
size$ = 80
arena$ = 88
asdl_int_seq_new PROC					; COMDAT

; 37   : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 38   :     asdl_int_seq *seq = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR seq$[rsp], 0

; 39   :     size_t n = (size ? (sizeof(void *) * (size - 1)) : 0);

  00017	48 83 7c 24 50
	00		 cmp	 QWORD PTR size$[rsp], 0
  0001d	74 14		 je	 SHORT $LN7@asdl_int_s
  0001f	48 8b 44 24 50	 mov	 rax, QWORD PTR size$[rsp]
  00024	48 8d 04 c5 f8
	ff ff ff	 lea	 rax, QWORD PTR [rax*8-8]
  0002c	48 89 44 24 30	 mov	 QWORD PTR tv67[rsp], rax
  00031	eb 09		 jmp	 SHORT $LN8@asdl_int_s
$LN7@asdl_int_s:
  00033	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv67[rsp], 0
$LN8@asdl_int_s:
  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR tv67[rsp]
  00041	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 40   : 
; 41   :     /* check size is sane */
; 42   :     if (size < 0 || size == INT_MIN ||
; 43   :         (size && ((size - 1) > (PY_SIZE_MAX / sizeof(void *))))) {

  00046	48 83 7c 24 50
	00		 cmp	 QWORD PTR size$[rsp], 0
  0004c	7c 2a		 jl	 SHORT $LN3@asdl_int_s
  0004e	48 81 7c 24 50
	00 00 00 80	 cmp	 QWORD PTR size$[rsp], -2147483648 ; ffffffff80000000H
  00057	74 1f		 je	 SHORT $LN3@asdl_int_s
  00059	48 83 7c 24 50
	00		 cmp	 QWORD PTR size$[rsp], 0
  0005f	74 20		 je	 SHORT $LN4@asdl_int_s
  00061	48 8b 44 24 50	 mov	 rax, QWORD PTR size$[rsp]
  00066	48 ff c8	 dec	 rax
  00069	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  00073	48 3b c1	 cmp	 rax, rcx
  00076	76 09		 jbe	 SHORT $LN4@asdl_int_s
$LN3@asdl_int_s:

; 44   :             PyErr_NoMemory();

  00078	e8 00 00 00 00	 call	 PyErr_NoMemory

; 45   :             return NULL;

  0007d	33 c0		 xor	 eax, eax
  0007f	eb 67		 jmp	 SHORT $LN5@asdl_int_s
$LN4@asdl_int_s:

; 46   :     }
; 47   : 
; 48   :     /* check if size can be added safely */
; 49   :     if (n > PY_SIZE_MAX - sizeof(asdl_seq)) {

  00081	48 83 7c 24 20
	ef		 cmp	 QWORD PTR n$[rsp], -17
  00087	76 09		 jbe	 SHORT $LN2@asdl_int_s

; 50   :         PyErr_NoMemory();

  00089	e8 00 00 00 00	 call	 PyErr_NoMemory

; 51   :         return NULL;

  0008e	33 c0		 xor	 eax, eax
  00090	eb 56		 jmp	 SHORT $LN5@asdl_int_s
$LN2@asdl_int_s:

; 52   :     }
; 53   : 
; 54   :     n += sizeof(asdl_seq);

  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00097	48 83 c0 10	 add	 rax, 16
  0009b	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 55   : 
; 56   :     seq = (asdl_int_seq *)PyArena_Malloc(arena, n);

  000a0	48 8b 54 24 20	 mov	 rdx, QWORD PTR n$[rsp]
  000a5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arena$[rsp]
  000aa	e8 00 00 00 00	 call	 PyArena_Malloc
  000af	48 89 44 24 28	 mov	 QWORD PTR seq$[rsp], rax

; 57   :     if (!seq) {

  000b4	48 83 7c 24 28
	00		 cmp	 QWORD PTR seq$[rsp], 0
  000ba	75 09		 jne	 SHORT $LN1@asdl_int_s

; 58   :         PyErr_NoMemory();

  000bc	e8 00 00 00 00	 call	 PyErr_NoMemory

; 59   :         return NULL;

  000c1	33 c0		 xor	 eax, eax
  000c3	eb 23		 jmp	 SHORT $LN5@asdl_int_s
$LN1@asdl_int_s:

; 60   :     }
; 61   :     memset(seq, 0, n);

  000c5	4c 8b 44 24 20	 mov	 r8, QWORD PTR n$[rsp]
  000ca	33 d2		 xor	 edx, edx
  000cc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR seq$[rsp]
  000d1	e8 00 00 00 00	 call	 memset

; 62   :     seq->size = size;

  000d6	48 8b 44 24 28	 mov	 rax, QWORD PTR seq$[rsp]
  000db	48 8b 4c 24 50	 mov	 rcx, QWORD PTR size$[rsp]
  000e0	48 89 08	 mov	 QWORD PTR [rax], rcx

; 63   :     return seq;

  000e3	48 8b 44 24 28	 mov	 rax, QWORD PTR seq$[rsp]
$LN5@asdl_int_s:

; 64   : }

  000e8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ec	c3		 ret	 0
asdl_int_seq_new ENDP
_TEXT	ENDS
END
