; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@CKECCIPK@TextIOWrapper?$AA@		; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_09GPFEECNC@traceback?$AA@			; `string'
PUBLIC	??_C@_09PEHPNNHP@tb_lineno?$AA@			; `string'
PUBLIC	??_C@_08LGMDMJNM@tb_lasti?$AA@			; `string'
PUBLIC	??_C@_08HFEKEPAP@tb_frame?$AA@			; `string'
PUBLIC	??_C@_07GIHNBDBF@tb_next?$AA@			; `string'
PUBLIC	??_C@_07FPPEEAND@__dir__?$AA@			; `string'
PUBLIC	PyTraceBack_Type
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_0O@CKECCIPK@TextIOWrapper?$AA@
CONST	SEGMENT
??_C@_0O@CKECCIPK@TextIOWrapper?$AA@ DB 'TextIOWrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_TextIOWrapper@?1??_Py_DisplaySourceLine@@9@9 DQ 0000000000000000H ; `_Py_DisplaySourceLine'::`2'::PyId_TextIOWrapper
	DQ	FLAT:??_C@_0O@CKECCIPK@TextIOWrapper?$AA@
	DQ	0000000000000000H
?PyId_open@?1??_Py_DisplaySourceLine@@9@9 DQ 0000000000000000H ; `_Py_DisplaySourceLine'::`2'::PyId_open
	DQ	FLAT:??_C@_04PMOCAHAA@open?$AA@
	DQ	0000000000000000H
?PyId_close@?1??_Py_DisplaySourceLine@@9@9 DQ 0000000000000000H ; `_Py_DisplaySourceLine'::`2'::PyId_close
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	0000000000000000H
?PyId_open@?1??_Py_FindSourceFile@@9@9 DQ 0000000000000000H ; `_Py_FindSourceFile'::`2'::PyId_open
	DQ	FLAT:??_C@_04PMOCAHAA@open?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GPFEECNC@traceback?$AA@
CONST	SEGMENT
??_C@_09GPFEECNC@traceback?$AA@ DB 'traceback', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PEHPNNHP@tb_lineno?$AA@
CONST	SEGMENT
??_C@_09PEHPNNHP@tb_lineno?$AA@ DB 'tb_lineno', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LGMDMJNM@tb_lasti?$AA@
CONST	SEGMENT
??_C@_08LGMDMJNM@tb_lasti?$AA@ DB 'tb_lasti', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFEKEPAP@tb_frame?$AA@
CONST	SEGMENT
??_C@_08HFEKEPAP@tb_frame?$AA@ DB 'tb_frame', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GIHNBDBF@tb_next?$AA@
CONST	SEGMENT
??_C@_07GIHNBDBF@tb_next?$AA@ DB 'tb_next', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
tb_methods DQ	FLAT:??_C@_07FPPEEAND@__dir__?$AA@
	DQ	FLAT:tb_dir
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
tb_memberlist DQ FLAT:??_C@_07GIHNBDBF@tb_next?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08HFEKEPAP@tb_frame?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08LGMDMJNM@tb_lasti?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09PEHPNNHP@tb_lineno?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000074H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
PyTraceBack_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09GPFEECNC@traceback?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:tb_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:tb_traverse
	DQ	FLAT:tb_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:tb_methods
	DQ	FLAT:tb_memberlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+120
_DATA	ENDS
;	COMDAT ??_C@_07FPPEEAND@__dir__?$AA@
CONST	SEGMENT
??_C@_07FPPEEAND@__dir__?$AA@ DB '__dir__', 00H		; `string'
CONST	ENDS
PUBLIC	??_C@_06FAKNICNO@?$FLssss?$FN?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\traceback.c
pdata	SEGMENT
$pdata$tb_dir DD imagerel tb_dir
	DD	imagerel tb_dir+59
	DD	imagerel $unwind$tb_dir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_dir DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_06FAKNICNO@?$FLssss?$FN?$AA@
CONST	SEGMENT
??_C@_06FAKNICNO@?$FLssss?$FN?$AA@ DB '[ssss]', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tb_dir
_TEXT	SEGMENT
self$ = 64
tb_dir	PROC						; COMDAT

; 26   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 27   :     return Py_BuildValue("[ssss]", "tb_frame", "tb_next",
; 28   :                                    "tb_lasti", "tb_lineno");

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09PEHPNNHP@tb_lineno?$AA@
  00010	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00015	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_08LGMDMJNM@tb_lasti?$AA@
  0001c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07GIHNBDBF@tb_next?$AA@
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08HFEKEPAP@tb_frame?$AA@
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FAKNICNO@?$FLssss?$FN?$AA@
  00031	e8 00 00 00 00	 call	 Py_BuildValue

; 29   : }

  00036	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003a	c3		 ret	 0
tb_dir	ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
EXTRN	_PyTrash_thread_deposit_object:PROC
EXTRN	_PyTrash_thread_destroy_chain:PROC
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyThreadState_Get:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tb_dealloc DD imagerel tb_dealloc
	DD	imagerel tb_dealloc+230
	DD	imagerel $unwind$tb_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_dealloc DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tb_dealloc
_TEXT	SEGMENT
_tstate$20466 = 32
tb$ = 64
tb_dealloc PROC						; COMDAT

; 46   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 47   :     PyObject_GC_UnTrack(tb);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tb$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN14@tb_dealloc:

; 48   :     Py_TRASHCAN_SAFE_BEGIN(tb)

  00013	e8 00 00 00 00	 call	 PyThreadState_Get
  00018	48 89 44 24 20	 mov	 QWORD PTR _tstate$20466[rsp], rax
  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR _tstate$20466[rsp]
  00022	83 b8 94 00 00
	00 32		 cmp	 DWORD PTR [rax+148], 50	; 00000032H
  00029	0f 8d 9e 00 00
	00		 jge	 $LN11@tb_dealloc
  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR _tstate$20466[rsp]
  00034	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0003a	ff c0		 inc	 eax
  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _tstate$20466[rsp]
  00041	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
$LN10@tb_dealloc:

; 49   :     Py_XDECREF(tb->tb_next);

  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  0004c	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00051	74 0e		 je	 SHORT $LN7@tb_dealloc
  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  00058	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0005c	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@tb_dealloc:
  00061	33 c0		 xor	 eax, eax
  00063	85 c0		 test	 eax, eax
  00065	75 e0		 jne	 SHORT $LN10@tb_dealloc
$LN6@tb_dealloc:

; 50   :     Py_XDECREF(tb->tb_frame);

  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  0006c	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00071	74 0e		 je	 SHORT $LN3@tb_dealloc
  00073	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  00078	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0007c	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@tb_dealloc:
  00081	33 c0		 xor	 eax, eax
  00083	85 c0		 test	 eax, eax
  00085	75 e0		 jne	 SHORT $LN6@tb_dealloc

; 51   :     PyObject_GC_Del(tb);

  00087	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tb$[rsp]
  0008c	e8 00 00 00 00	 call	 PyObject_GC_Del

; 52   :     Py_TRASHCAN_SAFE_END(tb)

  00091	48 8b 44 24 20	 mov	 rax, QWORD PTR _tstate$20466[rsp]
  00096	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0009c	ff c8		 dec	 eax
  0009e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _tstate$20466[rsp]
  000a3	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
  000a9	48 8b 44 24 20	 mov	 rax, QWORD PTR _tstate$20466[rsp]
  000ae	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  000b6	74 13		 je	 SHORT $LN2@tb_dealloc
  000b8	48 8b 44 24 20	 mov	 rax, QWORD PTR _tstate$20466[rsp]
  000bd	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [rax+148], 0
  000c4	7f 05		 jg	 SHORT $LN2@tb_dealloc
  000c6	e8 00 00 00 00	 call	 _PyTrash_thread_destroy_chain
$LN2@tb_dealloc:
  000cb	eb 0a		 jmp	 SHORT $LN1@tb_dealloc
$LN11@tb_dealloc:
  000cd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tb$[rsp]
  000d2	e8 00 00 00 00	 call	 _PyTrash_thread_deposit_object
$LN1@tb_dealloc:
  000d7	33 c0		 xor	 eax, eax
  000d9	85 c0		 test	 eax, eax
  000db	0f 85 32 ff ff
	ff		 jne	 $LN14@tb_dealloc

; 53   : }

  000e1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e5	c3		 ret	 0
tb_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@IOJIAFFP@tb_traverse?$AA@		; `string'
PUBLIC	??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\traceback.c
pdata	SEGMENT
$pdata$tb_traverse DD imagerel tb_traverse
	DD	imagerel tb_traverse+206
	DD	imagerel $unwind$tb_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0M@IOJIAFFP@tb_traverse?$AA@
CONST	SEGMENT
??_C@_0M@IOJIAFFP@tb_traverse?$AA@ DB 'tb_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
CONST	SEGMENT
??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@ DB '..\Python\tracebac'
	DB	'k.c', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tb_traverse
_TEXT	SEGMENT
vret$20496 = 32
vret$20504 = 36
tb$ = 64
visit$ = 72
arg$ = 80
tb_traverse PROC					; COMDAT

; 57   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@tb_travers:

; 58   :     Py_VISIT(tb->tb_next);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@tb_travers
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 3a 00 00
	00		 mov	 r8d, 58			; 0000003aH
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@IOJIAFFP@tb_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@tb_travers:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN8@tb_travers
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20496[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20496[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@tb_travers
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20496[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@tb_travers
$LN7@tb_travers:
$LN8@tb_travers:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@tb_travers
$LN6@tb_travers:

; 59   :     Py_VISIT(tb->tb_frame);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@tb_travers
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 3b 00 00
	00		 mov	 r8d, 59			; 0000003bH
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@IOJIAFFP@tb_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@tb_travers:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  00097	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0009c	74 23		 je	 SHORT $LN2@tb_travers
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  000a8	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$20504[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$20504[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@tb_travers
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$20504[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@tb_travers
$LN1@tb_travers:
$LN2@tb_travers:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@tb_travers

; 60   :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@tb_travers:

; 61   : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
tb_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_08HJKMBNPK@tb_clear?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$tb_clear DD imagerel tb_clear
	DD	imagerel tb_clear+216
	DD	imagerel $unwind$tb_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_08HJKMBNPK@tb_clear?$AA@
CONST	SEGMENT
??_C@_08HJKMBNPK@tb_clear?$AA@ DB 'tb_clear', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tb_clear
_TEXT	SEGMENT
_py_tmp$20516 = 48
_py_tmp$20524 = 56
tb$ = 80
tb_clear PROC						; COMDAT

; 65   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN8@tb_clear:

; 66   :     Py_CLEAR(tb->tb_next);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tb$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 53		 je	 SHORT $LN5@tb_clear
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR tb$[rsp]
  00022	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00026	41 b8 42 00 00
	00		 mov	 r8d, 66			; 00000042H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08HJKMBNPK@tb_clear?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN5@tb_clear
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR tb$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20516[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR tb$[rsp]
  00056	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20516[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@tb_clear:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN8@tb_clear
$LN4@tb_clear:

; 67   :     Py_CLEAR(tb->tb_frame);

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR tb$[rsp]
  00073	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00078	74 53		 je	 SHORT $LN1@tb_clear
  0007a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR tb$[rsp]
  00087	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  0008b	41 b8 43 00 00
	00		 mov	 r8d, 67			; 00000043H
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08HJKMBNPK@tb_clear?$AA@
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 25		 jne	 SHORT $LN1@tb_clear
  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR tb$[rsp]
  000ad	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b1	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20524[rsp], rax
  000b6	48 8b 44 24 50	 mov	 rax, QWORD PTR tb$[rsp]
  000bb	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  000c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20524[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@tb_clear:
  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 9b		 jne	 SHORT $LN4@tb_clear

; 68   : }

  000d3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d7	c3		 ret	 0
tb_clear ENDP
_TEXT	ENDS
PUBLIC	PyTraceBack_Here
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTraceBack_Here DD imagerel $LN8
	DD	imagerel $LN8+113
	DD	imagerel $unwind$PyTraceBack_Here
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTraceBack_Here DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyTraceBack_Here
_TEXT	SEGMENT
tstate$ = 32
tb$ = 40
oldtb$ = 48
frame$ = 80
PyTraceBack_Here PROC					; COMDAT

; 129  : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 130  :     PyThreadState *tstate = PyThreadState_GET();

  00009	e8 00 00 00 00	 call	 PyThreadState_Get
  0000e	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 131  :     PyTracebackObject *oldtb = (PyTracebackObject *) tstate->curexc_traceback;

  00013	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	48 89 44 24 30	 mov	 QWORD PTR oldtb$[rsp], rax

; 132  :     PyTracebackObject *tb = newtracebackobject(oldtb, frame);

  00021	48 8b 54 24 50	 mov	 rdx, QWORD PTR frame$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR oldtb$[rsp]
  0002b	e8 00 00 00 00	 call	 newtracebackobject
  00030	48 89 44 24 28	 mov	 QWORD PTR tb$[rsp], rax

; 133  :     if (tb == NULL)

  00035	48 83 7c 24 28
	00		 cmp	 QWORD PTR tb$[rsp], 0
  0003b	75 07		 jne	 SHORT $LN5@PyTraceBac

; 134  :         return -1;

  0003d	b8 ff ff ff ff	 mov	 eax, -1
  00042	eb 28		 jmp	 SHORT $LN6@PyTraceBac
$LN5@PyTraceBac:

; 135  :     tstate->curexc_traceback = (PyObject *)tb;

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00049	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tb$[rsp]
  0004e	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx
$LN4@PyTraceBac:

; 136  :     Py_XDECREF(oldtb);

  00052	48 83 7c 24 30
	00		 cmp	 QWORD PTR oldtb$[rsp], 0
  00058	74 0a		 je	 SHORT $LN1@PyTraceBac
  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR oldtb$[rsp]
  0005f	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyTraceBac:
  00064	33 c0		 xor	 eax, eax
  00066	85 c0		 test	 eax, eax
  00068	75 e8		 jne	 SHORT $LN4@PyTraceBac

; 137  :     return 0;

  0006a	33 c0		 xor	 eax, eax
$LN6@PyTraceBac:

; 138  : }

  0006c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00070	c3		 ret	 0
PyTraceBack_Here ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
EXTRN	PyObject_GC_Track:PROC
EXTRN	PyFrame_GetLineNumber:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	PyFrame_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$newtracebackobject DD imagerel newtracebackobject
	DD	imagerel newtracebackobject+286
	DD	imagerel $unwind$newtracebackobject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newtracebackobject DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT newtracebackobject
_TEXT	SEGMENT
tb$ = 32
tv78 = 40
next$ = 64
frame$ = 72
newtracebackobject PROC					; COMDAT

; 107  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 108  :     PyTracebackObject *tb;
; 109  :     if ((next != NULL && !PyTraceBack_Check(next)) ||
; 110  :                     frame == NULL || !PyFrame_Check(frame)) {

  0000e	48 83 7c 24 40
	00		 cmp	 QWORD PTR next$[rsp], 0
  00014	74 12		 je	 SHORT $LN10@newtraceba
  00016	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTraceBack_Type
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR next$[rsp]
  00022	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00026	75 1a		 jne	 SHORT $LN11@newtraceba
$LN10@newtraceba:
  00028	48 83 7c 24 48
	00		 cmp	 QWORD PTR frame$[rsp], 0
  0002e	74 12		 je	 SHORT $LN11@newtraceba
  00030	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFrame_Type
  00037	48 8b 4c 24 48	 mov	 rcx, QWORD PTR frame$[rsp]
  0003c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00040	74 18		 je	 SHORT $LN12@newtraceba
$LN11@newtraceba:

; 111  :         PyErr_BadInternalCall();

  00042	ba 6f 00 00 00	 mov	 edx, 111		; 0000006fH
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  0004e	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 112  :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	e9 bf 00 00 00	 jmp	 $LN13@newtraceba
$LN12@newtraceba:

; 113  :     }
; 114  :     tb = PyObject_GC_New(PyTracebackObject, &PyTraceBack_Type);

  0005a	e8 00 00 00 00	 call	 _Py_PXCTX
  0005f	85 c0		 test	 eax, eax
  00061	74 13		 je	 SHORT $LN15@newtraceba
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTraceBack_Type
  0006a	e8 00 00 00 00	 call	 _PxObject_New
  0006f	48 89 44 24 28	 mov	 QWORD PTR tv78[rsp], rax
  00074	eb 11		 jmp	 SHORT $LN16@newtraceba
$LN15@newtraceba:
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTraceBack_Type
  0007d	e8 00 00 00 00	 call	 _PyObject_GC_New
  00082	48 89 44 24 28	 mov	 QWORD PTR tv78[rsp], rax
$LN16@newtraceba:
  00087	48 8b 44 24 28	 mov	 rax, QWORD PTR tv78[rsp]
  0008c	48 89 44 24 20	 mov	 QWORD PTR tb$[rsp], rax

; 115  :     if (tb != NULL) {

  00091	48 83 7c 24 20
	00		 cmp	 QWORD PTR tb$[rsp], 0
  00097	74 7b		 je	 SHORT $LN9@newtraceba
$LN8@newtraceba:

; 116  :         Py_XINCREF(next);

  00099	48 83 7c 24 40
	00		 cmp	 QWORD PTR next$[rsp], 0
  0009f	74 0a		 je	 SHORT $LN5@newtraceba
  000a1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR next$[rsp]
  000a6	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@newtraceba:
  000ab	33 c0		 xor	 eax, eax
  000ad	85 c0		 test	 eax, eax
  000af	75 e8		 jne	 SHORT $LN8@newtraceba

; 117  :         tb->tb_next = next;

  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR tb$[rsp]
  000b6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR next$[rsp]
  000bb	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN4@newtraceba:

; 118  :         Py_XINCREF(frame);

  000bf	48 83 7c 24 48
	00		 cmp	 QWORD PTR frame$[rsp], 0
  000c5	74 0a		 je	 SHORT $LN1@newtraceba
  000c7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR frame$[rsp]
  000cc	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@newtraceba:
  000d1	33 c0		 xor	 eax, eax
  000d3	85 c0		 test	 eax, eax
  000d5	75 e8		 jne	 SHORT $LN4@newtraceba

; 119  :         tb->tb_frame = frame;

  000d7	48 8b 44 24 20	 mov	 rax, QWORD PTR tb$[rsp]
  000dc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR frame$[rsp]
  000e1	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 120  :         tb->tb_lasti = frame->f_lasti;

  000e5	48 8b 44 24 20	 mov	 rax, QWORD PTR tb$[rsp]
  000ea	48 8b 4c 24 48	 mov	 rcx, QWORD PTR frame$[rsp]
  000ef	8b 89 d0 00 00
	00		 mov	 ecx, DWORD PTR [rcx+208]
  000f5	89 48 70	 mov	 DWORD PTR [rax+112], ecx

; 121  :         tb->tb_lineno = PyFrame_GetLineNumber(frame);

  000f8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR frame$[rsp]
  000fd	e8 00 00 00 00	 call	 PyFrame_GetLineNumber
  00102	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tb$[rsp]
  00107	89 41 74	 mov	 DWORD PTR [rcx+116], eax

; 122  :         PyObject_GC_Track(tb);

  0010a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tb$[rsp]
  0010f	e8 00 00 00 00	 call	 PyObject_GC_Track
$LN9@newtraceba:

; 123  :     }
; 124  :     return tb;

  00114	48 8b 44 24 20	 mov	 rax, QWORD PTR tb$[rsp]
$LN13@newtraceba:

; 125  : }

  00119	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011d	c3		 ret	 0
newtracebackobject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_1CE@OMHPPAJG@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5?$AA@	; `string'
PUBLIC	??_C@_1FA@KECAHNAJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd@ ; `string'
PUBLIC	??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_05CAMHEFLG@utf?98?$AA@			; `string'
PUBLIC	??_C@_02HPGKMGCF@Os?$AA@			; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_02KFNNKBCK@io?$AA@			; `string'
PUBLIC	_Py_DisplaySourceLine
EXTRN	PyFile_WriteObject:PROC
EXTRN	PyFile_WriteString:PROC
EXTRN	strlen:PROC
EXTRN	strcpy:PROC
EXTRN	PyUnicode_Substring:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyFile_GetLine:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	_PyMem_DebugFree:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	__imp_lseek:PROC
EXTRN	PyTokenizer_FindEncodingFilename:PROC
EXTRN	PyObject_AsFileDescriptor:PROC
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyImport_ImportModuleNoBlock:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\traceback.c
pdata	SEGMENT
$pdata$_Py_DisplaySourceLine DD imagerel $LN64
	DD	imagerel $LN64+2132
	DD	imagerel $unwind$_Py_DisplaySourceLine
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DisplaySourceLine DD 021b01H
	DD	03b011bH
xdata	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@OMHPPAJG@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@OMHPPAJG@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA0?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'l', 00H, 'e', 00H, 'n', 00H, '(', 00H
	DB	'b', 00H, 'u', 00H, 'f', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '1', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5?$AA@ DB '          ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@KECAHNAJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd@
CONST	SEGMENT
??_C@_1FA@KECAHNAJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 'o', 00H, 'b', 00H, 'j'
	DB	00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c'
	DB	00H, 'e', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '.', 00H
	DB	'c', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05CAMHEFLG@utf?98?$AA@
CONST	SEGMENT
??_C@_05CAMHEFLG@utf?98?$AA@ DB 'utf-8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HPGKMGCF@Os?$AA@
CONST	SEGMENT
??_C@_02HPGKMGCF@Os?$AA@ DB 'Os', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KFNNKBCK@io?$AA@
CONST	SEGMENT
??_C@_02KFNNKBCK@io?$AA@ DB 'io', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DisplaySourceLine
_TEXT	SEGMENT
kind$ = 48
io$ = 56
res$ = 64
lineobj$ = 72
i$ = 80
encoding$ = 88
buf$ = 96
data$ = 368
err$ = 376
found_encoding$ = 384
fob$ = 392
binary$ = 400
fd$ = 408
ch$20770 = 412
truncated$20777 = 416
tv129 = 424
tv141 = 432
tv160 = 436
tv244 = 440
tv253 = 448
tv287 = 456
tv286 = 460
f$ = 480
filename$ = 488
lineno$ = 496
indent$ = 504
_Py_DisplaySourceLine PROC				; COMDAT

; 221  : {

$LN64:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H

; 222  :     int err = 0;

  0001b	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR err$[rsp], 0

; 223  :     int fd;
; 224  :     int i;
; 225  :     char *found_encoding;
; 226  :     char *encoding;
; 227  :     PyObject *io;
; 228  :     PyObject *binary;
; 229  :     PyObject *fob = NULL;

  00026	48 c7 84 24 88
	01 00 00 00 00
	00 00		 mov	 QWORD PTR fob$[rsp], 0

; 230  :     PyObject *lineobj = NULL;

  00032	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR lineobj$[rsp], 0

; 231  :     PyObject *res;
; 232  :     char buf[MAXPATHLEN+1];
; 233  :     int kind;
; 234  :     void *data;
; 235  :     _Py_IDENTIFIER(close);
; 236  :     _Py_IDENTIFIER(open);
; 237  :     _Py_IDENTIFIER(TextIOWrapper);
; 238  : 
; 239  :     /* open the file */
; 240  :     if (filename == NULL)

  0003b	48 83 bc 24 e8
	01 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00044	75 07		 jne	 SHORT $LN36@Py_Display

; 241  :         return 0;

  00046	33 c0		 xor	 eax, eax
  00048	e9 ff 07 00 00	 jmp	 $LN37@Py_Display
$LN36@Py_Display:

; 242  : 
; 243  :     io = PyImport_ImportModuleNoBlock("io");

  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KFNNKBCK@io?$AA@
  00054	e8 00 00 00 00	 call	 PyImport_ImportModuleNoBlock
  00059	48 89 44 24 38	 mov	 QWORD PTR io$[rsp], rax

; 244  :     if (io == NULL)

  0005e	48 83 7c 24 38
	00		 cmp	 QWORD PTR io$[rsp], 0
  00064	75 0a		 jne	 SHORT $LN35@Py_Display

; 245  :         return -1;

  00066	b8 ff ff ff ff	 mov	 eax, -1
  0006b	e9 dc 07 00 00	 jmp	 $LN37@Py_Display
$LN35@Py_Display:

; 246  :     binary = _PyObject_CallMethodId(io, &PyId_open, "Os", filename, "rb");

  00070	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_open@?1??_Py_DisplaySourceLine@@9@9
  00075	8b c0		 mov	 eax, eax
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0007d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00086	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  00091	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00096	4c 8b 8c 24 e8
	01 00 00	 mov	 r9, QWORD PTR filename$[rsp]
  0009e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HPGKMGCF@Os?$AA@
  000a5	48 8b d0	 mov	 rdx, rax
  000a8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR io$[rsp]
  000ad	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  000b2	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR binary$[rsp], rax

; 247  : 
; 248  :     if (binary == NULL) {

  000ba	48 83 bc 24 90
	01 00 00 00	 cmp	 QWORD PTR binary$[rsp], 0
  000c3	75 41		 jne	 SHORT $LN34@Py_Display

; 249  :         binary = _Py_FindSourceFile(filename, buf, sizeof(buf), io);

  000c5	4c 8b 4c 24 38	 mov	 r9, QWORD PTR io$[rsp]
  000ca	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  000d0	48 8d 54 24 60	 lea	 rdx, QWORD PTR buf$[rsp]
  000d5	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000dd	e8 00 00 00 00	 call	 _Py_FindSourceFile
  000e2	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR binary$[rsp], rax

; 250  :         if (binary == NULL) {

  000ea	48 83 bc 24 90
	01 00 00 00	 cmp	 QWORD PTR binary$[rsp], 0
  000f3	75 11		 jne	 SHORT $LN33@Py_Display

; 251  :             Py_DECREF(io);

  000f5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR io$[rsp]
  000fa	e8 00 00 00 00	 call	 _Py_DecRef

; 252  :             return 0;

  000ff	33 c0		 xor	 eax, eax
  00101	e9 46 07 00 00	 jmp	 $LN37@Py_Display
$LN33@Py_Display:
$LN34@Py_Display:

; 253  :         }
; 254  :     }
; 255  : 
; 256  :     /* use the right encoding to decode the file as unicode */
; 257  :     fd = PyObject_AsFileDescriptor(binary);

  00106	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR binary$[rsp]
  0010e	e8 00 00 00 00	 call	 PyObject_AsFileDescriptor
  00113	89 84 24 98 01
	00 00		 mov	 DWORD PTR fd$[rsp], eax

; 258  :     if (fd < 0) {

  0011a	83 bc 24 98 01
	00 00 00	 cmp	 DWORD PTR fd$[rsp], 0
  00122	7d 1e		 jge	 SHORT $LN32@Py_Display

; 259  :         Py_DECREF(io);

  00124	48 8b 4c 24 38	 mov	 rcx, QWORD PTR io$[rsp]
  00129	e8 00 00 00 00	 call	 _Py_DecRef

; 260  :         Py_DECREF(binary);

  0012e	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR binary$[rsp]
  00136	e8 00 00 00 00	 call	 _Py_DecRef

; 261  :         return 0;

  0013b	33 c0		 xor	 eax, eax
  0013d	e9 0a 07 00 00	 jmp	 $LN37@Py_Display
$LN32@Py_Display:

; 262  :     }
; 263  :     found_encoding = PyTokenizer_FindEncodingFilename(fd, filename);

  00142	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  0014a	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00151	e8 00 00 00 00	 call	 PyTokenizer_FindEncodingFilename
  00156	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR found_encoding$[rsp], rax

; 264  :     encoding = (found_encoding != NULL) ? found_encoding : "utf-8";

  0015e	48 83 bc 24 80
	01 00 00 00	 cmp	 QWORD PTR found_encoding$[rsp], 0
  00167	74 12		 je	 SHORT $LN39@Py_Display
  00169	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR found_encoding$[rsp]
  00171	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv129[rsp], rax
  00179	eb 0f		 jmp	 SHORT $LN40@Py_Display
$LN39@Py_Display:
  0017b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05CAMHEFLG@utf?98?$AA@
  00182	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv129[rsp], rax
$LN40@Py_Display:
  0018a	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR tv129[rsp]
  00192	48 89 44 24 58	 mov	 QWORD PTR encoding$[rsp], rax

; 265  :     /* Reset position */
; 266  :     if (lseek(fd, 0, SEEK_SET) == (off_t)-1) {

  00197	45 33 c0	 xor	 r8d, r8d
  0019a	33 d2		 xor	 edx, edx
  0019c	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  001a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lseek
  001a9	83 f8 ff	 cmp	 eax, -1
  001ac	75 59		 jne	 SHORT $LN31@Py_Display

; 267  :         Py_DECREF(io);

  001ae	48 8b 4c 24 38	 mov	 rcx, QWORD PTR io$[rsp]
  001b3	e8 00 00 00 00	 call	 _Py_DecRef

; 268  :         Py_DECREF(binary);

  001b8	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR binary$[rsp]
  001c0	e8 00 00 00 00	 call	 _Py_DecRef

; 269  :         PyMem_FREE(found_encoding);

  001c5	e8 00 00 00 00	 call	 _Py_PXCTX
  001ca	85 c0		 test	 eax, eax
  001cc	74 1a		 je	 SHORT $LN41@Py_Display
  001ce	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR found_encoding$[rsp]
  001d6	e8 00 00 00 00	 call	 _PxMem_Free
  001db	c7 84 24 b0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv141[rsp], 0
  001e6	eb 18		 jmp	 SHORT $LN42@Py_Display
$LN41@Py_Display:
  001e8	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR found_encoding$[rsp]
  001f0	e8 00 00 00 00	 call	 _PyMem_DebugFree
  001f5	c7 84 24 b0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv141[rsp], 0
$LN42@Py_Display:

; 270  :         return 0;

  00200	33 c0		 xor	 eax, eax
  00202	e9 45 06 00 00	 jmp	 $LN37@Py_Display
$LN31@Py_Display:

; 271  :     }
; 272  :     fob = _PyObject_CallMethodId(io, &PyId_TextIOWrapper, "Os", binary, encoding);

  00207	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_TextIOWrapper@?1??_Py_DisplaySourceLine@@9@9
  0020c	8b c0		 mov	 eax, eax
  0020e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00214	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0021d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00221	48 8b 4c 24 58	 mov	 rcx, QWORD PTR encoding$[rsp]
  00226	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0022b	4c 8b 8c 24 90
	01 00 00	 mov	 r9, QWORD PTR binary$[rsp]
  00233	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HPGKMGCF@Os?$AA@
  0023a	48 8b d0	 mov	 rdx, rax
  0023d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR io$[rsp]
  00242	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00247	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR fob$[rsp], rax

; 273  :     Py_DECREF(io);

  0024f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR io$[rsp]
  00254	e8 00 00 00 00	 call	 _Py_DecRef

; 274  :     Py_DECREF(binary);

  00259	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR binary$[rsp]
  00261	e8 00 00 00 00	 call	 _Py_DecRef

; 275  :     PyMem_FREE(found_encoding);

  00266	e8 00 00 00 00	 call	 _Py_PXCTX
  0026b	85 c0		 test	 eax, eax
  0026d	74 1a		 je	 SHORT $LN43@Py_Display
  0026f	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR found_encoding$[rsp]
  00277	e8 00 00 00 00	 call	 _PxMem_Free
  0027c	c7 84 24 b4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv160[rsp], 0
  00287	eb 18		 jmp	 SHORT $LN44@Py_Display
$LN43@Py_Display:
  00289	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR found_encoding$[rsp]
  00291	e8 00 00 00 00	 call	 _PyMem_DebugFree
  00296	c7 84 24 b4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv160[rsp], 0
$LN44@Py_Display:

; 276  : 
; 277  :     if (fob == NULL) {

  002a1	48 83 bc 24 88
	01 00 00 00	 cmp	 QWORD PTR fob$[rsp], 0
  002aa	75 0c		 jne	 SHORT $LN30@Py_Display

; 278  :         PyErr_Clear();

  002ac	e8 00 00 00 00	 call	 PyErr_Clear

; 279  :         return 0;

  002b1	33 c0		 xor	 eax, eax
  002b3	e9 94 05 00 00	 jmp	 $LN37@Py_Display
$LN30@Py_Display:

; 280  :     }
; 281  : 
; 282  :     /* get the line number lineno */
; 283  :     for (i = 0; i < lineno; i++) {

  002b8	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  002c0	eb 0a		 jmp	 SHORT $LN29@Py_Display
$LN28@Py_Display:
  002c2	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  002c6	ff c0		 inc	 eax
  002c8	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN29@Py_Display:
  002cc	8b 84 24 f0 01
	00 00		 mov	 eax, DWORD PTR lineno$[rsp]
  002d3	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  002d7	7d 46		 jge	 SHORT $LN27@Py_Display
$LN26@Py_Display:

; 284  :         Py_XDECREF(lineobj);

  002d9	48 83 7c 24 48
	00		 cmp	 QWORD PTR lineobj$[rsp], 0
  002df	74 0a		 je	 SHORT $LN23@Py_Display
  002e1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR lineobj$[rsp]
  002e6	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@Py_Display:
  002eb	33 c0		 xor	 eax, eax
  002ed	85 c0		 test	 eax, eax
  002ef	75 e8		 jne	 SHORT $LN26@Py_Display

; 285  :         lineobj = PyFile_GetLine(fob, -1);

  002f1	ba ff ff ff ff	 mov	 edx, -1
  002f6	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR fob$[rsp]
  002fe	e8 00 00 00 00	 call	 PyFile_GetLine
  00303	48 89 44 24 48	 mov	 QWORD PTR lineobj$[rsp], rax

; 286  :         if (!lineobj) {

  00308	48 83 7c 24 48
	00		 cmp	 QWORD PTR lineobj$[rsp], 0
  0030e	75 0d		 jne	 SHORT $LN22@Py_Display

; 287  :             err = -1;

  00310	c7 84 24 78 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1

; 288  :             break;

  0031b	eb 02		 jmp	 SHORT $LN27@Py_Display
$LN22@Py_Display:

; 289  :         }
; 290  :     }

  0031d	eb a3		 jmp	 SHORT $LN28@Py_Display
$LN27@Py_Display:

; 291  :     res = _PyObject_CallMethodId(fob, &PyId_close, "");

  0031f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_close@?1??_Py_DisplaySourceLine@@9@9
  00324	8b c0		 mov	 eax, eax
  00326	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0032c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00335	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00339	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00340	48 8b d0	 mov	 rdx, rax
  00343	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR fob$[rsp]
  0034b	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00350	48 89 44 24 40	 mov	 QWORD PTR res$[rsp], rax

; 292  :     if (res)

  00355	48 83 7c 24 40
	00		 cmp	 QWORD PTR res$[rsp], 0
  0035b	74 0c		 je	 SHORT $LN21@Py_Display

; 293  :         Py_DECREF(res);

  0035d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR res$[rsp]
  00362	e8 00 00 00 00	 call	 _Py_DecRef

; 294  :     else

  00367	eb 05		 jmp	 SHORT $LN20@Py_Display
$LN21@Py_Display:

; 295  :         PyErr_Clear();

  00369	e8 00 00 00 00	 call	 PyErr_Clear
$LN20@Py_Display:

; 296  :     Py_DECREF(fob);

  0036e	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR fob$[rsp]
  00376	e8 00 00 00 00	 call	 _Py_DecRef

; 297  :     if (!lineobj || !PyUnicode_Check(lineobj)) {

  0037b	48 83 7c 24 48
	00		 cmp	 QWORD PTR lineobj$[rsp], 0
  00381	74 18		 je	 SHORT $LN18@Py_Display
  00383	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  00388	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0038c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00392	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00397	85 c0		 test	 eax, eax
  00399	75 24		 jne	 SHORT $LN19@Py_Display
$LN18@Py_Display:
$LN17@Py_Display:

; 298  :         Py_XDECREF(lineobj);

  0039b	48 83 7c 24 48
	00		 cmp	 QWORD PTR lineobj$[rsp], 0
  003a1	74 0a		 je	 SHORT $LN14@Py_Display
  003a3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR lineobj$[rsp]
  003a8	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@Py_Display:
  003ad	33 c0		 xor	 eax, eax
  003af	85 c0		 test	 eax, eax
  003b1	75 e8		 jne	 SHORT $LN17@Py_Display

; 299  :         return err;

  003b3	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR err$[rsp]
  003ba	e9 8d 04 00 00	 jmp	 $LN37@Py_Display
$LN19@Py_Display:

; 300  :     }
; 301  : 
; 302  :     /* remove the indentation of the line */
; 303  :     kind = PyUnicode_KIND(lineobj);

  003bf	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  003c4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003c8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003ce	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003d3	85 c0		 test	 eax, eax
  003d5	75 1c		 jne	 SHORT $LN45@Py_Display
  003d7	41 b8 2f 01 00
	00		 mov	 r8d, 303		; 0000012fH
  003dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  003e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  003eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003f1	33 c0		 xor	 eax, eax
$LN45@Py_Display:
  003f3	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  003f8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003fb	c1 e8 07	 shr	 eax, 7
  003fe	83 e0 01	 and	 eax, 1
  00401	85 c0		 test	 eax, eax
  00403	75 1c		 jne	 SHORT $LN46@Py_Display
  00405	41 b8 2f 01 00
	00		 mov	 r8d, 303		; 0000012fH
  0040b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  00412	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00419	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0041f	33 c0		 xor	 eax, eax
$LN46@Py_Display:
  00421	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  00426	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00429	c1 e8 02	 shr	 eax, 2
  0042c	83 e0 07	 and	 eax, 7
  0042f	89 44 24 30	 mov	 DWORD PTR kind$[rsp], eax

; 304  :     data = PyUnicode_DATA(lineobj);

  00433	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  00438	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0043c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00442	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00447	85 c0		 test	 eax, eax
  00449	75 1c		 jne	 SHORT $LN47@Py_Display
  0044b	41 b8 30 01 00
	00		 mov	 r8d, 304		; 00000130H
  00451	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  00458	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0045f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00465	33 c0		 xor	 eax, eax
$LN47@Py_Display:
  00467	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  0046c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0046f	c1 e8 05	 shr	 eax, 5
  00472	83 e0 01	 and	 eax, 1
  00475	85 c0		 test	 eax, eax
  00477	0f 84 ae 00 00
	00		 je	 $LN53@Py_Display
  0047d	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  00482	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00486	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0048c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00491	85 c0		 test	 eax, eax
  00493	75 1c		 jne	 SHORT $LN48@Py_Display
  00495	41 b8 30 01 00
	00		 mov	 r8d, 304		; 00000130H
  0049b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  004a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  004a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004af	33 c0		 xor	 eax, eax
$LN48@Py_Display:
  004b1	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  004b6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004b9	c1 e8 07	 shr	 eax, 7
  004bc	83 e0 01	 and	 eax, 1
  004bf	85 c0		 test	 eax, eax
  004c1	75 1c		 jne	 SHORT $LN49@Py_Display
  004c3	41 b8 30 01 00
	00		 mov	 r8d, 304		; 00000130H
  004c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  004d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  004d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004dd	33 c0		 xor	 eax, eax
$LN49@Py_Display:
  004df	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  004e4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004e7	c1 e8 06	 shr	 eax, 6
  004ea	83 e0 01	 and	 eax, 1
  004ed	85 c0		 test	 eax, eax
  004ef	74 15		 je	 SHORT $LN50@Py_Display
  004f1	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  004f6	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  004fc	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv244[rsp], rax
  00504	eb 13		 jmp	 SHORT $LN51@Py_Display
$LN50@Py_Display:
  00506	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  0050b	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00511	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv244[rsp], rax
$LN51@Py_Display:
  00519	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR tv244[rsp]
  00521	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv253[rsp], rax
  00529	eb 3f		 jmp	 SHORT $LN54@Py_Display
$LN53@Py_Display:
  0052b	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  00530	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00538	75 1c		 jne	 SHORT $LN52@Py_Display
  0053a	41 b8 30 01 00
	00		 mov	 r8d, 304		; 00000130H
  00540	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  00547	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FA@KECAHNAJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd@
  0054e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00554	33 c0		 xor	 eax, eax
$LN52@Py_Display:
  00556	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  0055b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00562	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv253[rsp], rax
$LN54@Py_Display:
  0056a	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR tv253[rsp]
  00572	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR data$[rsp], rax

; 305  :     for (i=0; i < PyUnicode_GET_LENGTH(lineobj); i++) {

  0057a	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00582	eb 0a		 jmp	 SHORT $LN13@Py_Display
$LN12@Py_Display:
  00584	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00588	ff c0		 inc	 eax
  0058a	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN13@Py_Display:
  0058e	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  00593	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00597	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0059d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  005a2	85 c0		 test	 eax, eax
  005a4	75 1c		 jne	 SHORT $LN55@Py_Display
  005a6	41 b8 31 01 00
	00		 mov	 r8d, 305		; 00000131H
  005ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  005b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  005ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005c0	33 c0		 xor	 eax, eax
$LN55@Py_Display:
  005c2	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  005c7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005ca	c1 e8 07	 shr	 eax, 7
  005cd	83 e0 01	 and	 eax, 1
  005d0	85 c0		 test	 eax, eax
  005d2	75 1c		 jne	 SHORT $LN56@Py_Display
  005d4	41 b8 31 01 00
	00		 mov	 r8d, 305		; 00000131H
  005da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  005e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  005e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005ee	33 c0		 xor	 eax, eax
$LN56@Py_Display:
  005f0	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  005f5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR lineobj$[rsp]
  005fa	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  005fe	0f 8d 9a 00 00
	00		 jge	 $LN11@Py_Display

; 306  :         Py_UCS4 ch = PyUnicode_READ(kind, data, i);

  00604	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00609	75 1a		 jne	 SHORT $LN59@Py_Display
  0060b	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00610	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR data$[rsp]
  00618	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0061c	89 84 24 c8 01
	00 00		 mov	 DWORD PTR tv287[rsp], eax
  00623	eb 46		 jmp	 SHORT $LN60@Py_Display
$LN59@Py_Display:
  00625	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  0062a	75 1a		 jne	 SHORT $LN57@Py_Display
  0062c	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00631	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR data$[rsp]
  00639	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0063d	89 84 24 cc 01
	00 00		 mov	 DWORD PTR tv286[rsp], eax
  00644	eb 17		 jmp	 SHORT $LN58@Py_Display
$LN57@Py_Display:
  00646	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0064b	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR data$[rsp]
  00653	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00656	89 84 24 cc 01
	00 00		 mov	 DWORD PTR tv286[rsp], eax
$LN58@Py_Display:
  0065d	8b 84 24 cc 01
	00 00		 mov	 eax, DWORD PTR tv286[rsp]
  00664	89 84 24 c8 01
	00 00		 mov	 DWORD PTR tv287[rsp], eax
$LN60@Py_Display:
  0066b	8b 84 24 c8 01
	00 00		 mov	 eax, DWORD PTR tv287[rsp]
  00672	89 84 24 9c 01
	00 00		 mov	 DWORD PTR ch$20770[rsp], eax

; 307  :         if (ch != ' ' && ch != '\t' && ch != '\014')

  00679	83 bc 24 9c 01
	00 00 20	 cmp	 DWORD PTR ch$20770[rsp], 32 ; 00000020H
  00681	74 16		 je	 SHORT $LN10@Py_Display
  00683	83 bc 24 9c 01
	00 00 09	 cmp	 DWORD PTR ch$20770[rsp], 9
  0068b	74 0c		 je	 SHORT $LN10@Py_Display
  0068d	83 bc 24 9c 01
	00 00 0c	 cmp	 DWORD PTR ch$20770[rsp], 12
  00695	74 02		 je	 SHORT $LN10@Py_Display

; 308  :             break;

  00697	eb 05		 jmp	 SHORT $LN11@Py_Display
$LN10@Py_Display:

; 309  :     }

  00699	e9 e6 fe ff ff	 jmp	 $LN12@Py_Display
$LN11@Py_Display:

; 310  :     if (i) {

  0069e	83 7c 24 50 00	 cmp	 DWORD PTR i$[rsp], 0
  006a3	0f 84 ae 00 00
	00		 je	 $LN9@Py_Display

; 311  :         PyObject *truncated;
; 312  :         truncated = PyUnicode_Substring(lineobj, i, PyUnicode_GET_LENGTH(lineobj));

  006a9	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  006ae	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  006b2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  006b8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  006bd	85 c0		 test	 eax, eax
  006bf	75 1c		 jne	 SHORT $LN61@Py_Display
  006c1	41 b8 38 01 00
	00		 mov	 r8d, 312		; 00000138H
  006c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  006ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MEHJIOJO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  006d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006db	33 c0		 xor	 eax, eax
$LN61@Py_Display:
  006dd	48 8b 44 24 48	 mov	 rax, QWORD PTR lineobj$[rsp]
  006e2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006e5	c1 e8 07	 shr	 eax, 7
  006e8	83 e0 01	 and	 eax, 1
  006eb	85 c0		 test	 eax, eax
  006ed	75 1c		 jne	 SHORT $LN62@Py_Display
  006ef	41 b8 38 01 00
	00		 mov	 r8d, 312		; 00000138H
  006f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  006fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@HIHJJAPD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00703	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00709	33 c0		 xor	 eax, eax
$LN62@Py_Display:
  0070b	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00710	48 8b 4c 24 48	 mov	 rcx, QWORD PTR lineobj$[rsp]
  00715	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  00719	48 8b d0	 mov	 rdx, rax
  0071c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR lineobj$[rsp]
  00721	e8 00 00 00 00	 call	 PyUnicode_Substring
  00726	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR truncated$20777[rsp], rax

; 313  :         if (truncated) {

  0072e	48 83 bc 24 a0
	01 00 00 00	 cmp	 QWORD PTR truncated$20777[rsp], 0
  00737	74 19		 je	 SHORT $LN8@Py_Display

; 314  :             Py_DECREF(lineobj);

  00739	48 8b 4c 24 48	 mov	 rcx, QWORD PTR lineobj$[rsp]
  0073e	e8 00 00 00 00	 call	 _Py_DecRef

; 315  :             lineobj = truncated;

  00743	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR truncated$20777[rsp]
  0074b	48 89 44 24 48	 mov	 QWORD PTR lineobj$[rsp], rax

; 316  :         } else {

  00750	eb 05		 jmp	 SHORT $LN7@Py_Display
$LN8@Py_Display:

; 317  :             PyErr_Clear();

  00752	e8 00 00 00 00	 call	 PyErr_Clear
$LN7@Py_Display:
$LN9@Py_Display:

; 318  :         }
; 319  :     }
; 320  : 
; 321  :     /* Write some spaces before the line */
; 322  :     strcpy(buf, "          ");

  00757	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@CCBFPMDD@?5?5?5?5?5?5?5?5?5?5?$AA@
  0075e	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00763	e8 00 00 00 00	 call	 strcpy

; 323  :     assert (strlen(buf) == 10);

  00768	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0076d	e8 00 00 00 00	 call	 strlen
  00772	48 83 f8 0a	 cmp	 rax, 10
  00776	74 1c		 je	 SHORT $LN63@Py_Display
  00778	41 b8 43 01 00
	00		 mov	 r8d, 323		; 00000143H
  0077e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  00785	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@OMHPPAJG@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA0?$AA?$AA@
  0078c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00792	33 c0		 xor	 eax, eax
$LN63@Py_Display:
$LN6@Py_Display:

; 324  :     while (indent > 0) {

  00794	83 bc 24 f8 01
	00 00 00	 cmp	 DWORD PTR indent$[rsp], 0
  0079c	7e 4f		 jle	 SHORT $LN5@Py_Display

; 325  :         if (indent < 10)

  0079e	83 bc 24 f8 01
	00 00 0a	 cmp	 DWORD PTR indent$[rsp], 10
  007a6	7d 0d		 jge	 SHORT $LN4@Py_Display

; 326  :             buf[indent] = '\0';

  007a8	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR indent$[rsp]
  007b0	c6 44 04 60 00	 mov	 BYTE PTR buf$[rsp+rax], 0
$LN4@Py_Display:

; 327  :         err = PyFile_WriteString(buf, f);

  007b5	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  007bd	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  007c2	e8 00 00 00 00	 call	 PyFile_WriteString
  007c7	89 84 24 78 01
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 328  :         if (err != 0)

  007ce	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  007d6	74 02		 je	 SHORT $LN3@Py_Display

; 329  :             break;

  007d8	eb 13		 jmp	 SHORT $LN5@Py_Display
$LN3@Py_Display:

; 330  :         indent -= 10;

  007da	8b 84 24 f8 01
	00 00		 mov	 eax, DWORD PTR indent$[rsp]
  007e1	83 e8 0a	 sub	 eax, 10
  007e4	89 84 24 f8 01
	00 00		 mov	 DWORD PTR indent$[rsp], eax

; 331  :     }

  007eb	eb a7		 jmp	 SHORT $LN6@Py_Display
$LN5@Py_Display:

; 332  : 
; 333  :     /* finally display the line */
; 334  :     if (err == 0)

  007ed	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  007f5	75 1f		 jne	 SHORT $LN2@Py_Display

; 335  :         err = PyFile_WriteObject(lineobj, f, Py_PRINT_RAW);

  007f7	41 b8 01 00 00
	00		 mov	 r8d, 1
  007fd	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  00805	48 8b 4c 24 48	 mov	 rcx, QWORD PTR lineobj$[rsp]
  0080a	e8 00 00 00 00	 call	 PyFile_WriteObject
  0080f	89 84 24 78 01
	00 00		 mov	 DWORD PTR err$[rsp], eax
$LN2@Py_Display:

; 336  :     Py_DECREF(lineobj);

  00816	48 8b 4c 24 48	 mov	 rcx, QWORD PTR lineobj$[rsp]
  0081b	e8 00 00 00 00	 call	 _Py_DecRef

; 337  :     if  (err == 0)

  00820	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  00828	75 1b		 jne	 SHORT $LN1@Py_Display

; 338  :         err = PyFile_WriteString("\n", f);

  0082a	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR f$[rsp]
  00832	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00839	e8 00 00 00 00	 call	 PyFile_WriteString
  0083e	89 84 24 78 01
	00 00		 mov	 DWORD PTR err$[rsp], eax
$LN1@Py_Display:

; 339  :     return err;

  00845	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR err$[rsp]
$LN37@Py_Display:

; 340  : }

  0084c	48 81 c4 d8 01
	00 00		 add	 rsp, 472		; 000001d8H
  00853	c3		 ret	 0
_Py_DisplaySourceLine ENDP
_TEXT	ENDS
PUBLIC	??_C@_02FCBLNKNB@ss?$AA@			; `string'
PUBLIC	??_C@_1CI@EOAICPCA@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_04LNEJFJGI@path?$AA@			; `string'
PUBLIC	??_C@_1DC@CDOGEOJC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyList_GetItem:PROC
EXTRN	PyList_Size:PROC
EXTRN	PySys_GetObject:PROC
EXTRN	__imp_strrchr:PROC
EXTRN	PyUnicode_EncodeFSDefault:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_FindSourceFile DD imagerel _Py_FindSourceFile
	DD	imagerel _Py_FindSourceFile+902
	DD	imagerel $unwind$_Py_FindSourceFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_FindSourceFile DD 021b01H
	DD	013011bH
xdata	ENDS
;	COMDAT ??_C@_02FCBLNKNB@ss?$AA@
CONST	SEGMENT
??_C@_02FCBLNKNB@ss?$AA@ DB 'ss', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@EOAICPCA@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@EOAICPCA@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNEJFJGI@path?$AA@
CONST	SEGMENT
??_C@_04LNEJFJGI@path?$AA@ DB 'path', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@CDOGEOJC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@CDOGEOJC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'b', 00H, 'y', 00H
	DB	't', 00H, 'e', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_FindSourceFile
_TEXT	SEGMENT
npath$ = 48
v$ = 56
i$ = 64
filepath$ = 72
taillen$ = 80
tail$ = 88
syspath$ = 96
len$ = 104
filebytes$ = 112
result$ = 120
path$ = 128
binary$ = 136
filename$ = 160
namebuf$ = 168
namelen$ = 176
io$ = 184
_Py_FindSourceFile PROC					; COMDAT

; 142  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 143  :     Py_ssize_t i;
; 144  :     PyObject *binary;
; 145  :     PyObject *v;
; 146  :     Py_ssize_t npath;
; 147  :     size_t taillen;
; 148  :     PyObject *syspath;
; 149  :     PyObject *path;
; 150  :     const char* tail;
; 151  :     PyObject *filebytes;
; 152  :     const char* filepath;
; 153  :     Py_ssize_t len;
; 154  :     PyObject* result;
; 155  :     _Py_IDENTIFIER(open);
; 156  : 
; 157  :     filebytes = PyUnicode_EncodeFSDefault(filename);

  0001b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00023	e8 00 00 00 00	 call	 PyUnicode_EncodeFSDefault
  00028	48 89 44 24 70	 mov	 QWORD PTR filebytes$[rsp], rax

; 158  :     if (filebytes == NULL) {

  0002d	48 83 7c 24 70
	00		 cmp	 QWORD PTR filebytes$[rsp], 0
  00033	75 0c		 jne	 SHORT $LN15@Py_FindSou

; 159  :         PyErr_Clear();

  00035	e8 00 00 00 00	 call	 PyErr_Clear

; 160  :         return NULL;

  0003a	33 c0		 xor	 eax, eax
  0003c	e9 3d 03 00 00	 jmp	 $LN16@Py_FindSou
$LN15@Py_FindSou:

; 161  :     }
; 162  :     filepath = PyBytes_AS_STRING(filebytes);

  00041	48 8b 44 24 70	 mov	 rax, QWORD PTR filebytes$[rsp]
  00046	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00050	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00055	85 c0		 test	 eax, eax
  00057	75 1c		 jne	 SHORT $LN18@Py_FindSou
  00059	41 b8 a2 00 00
	00		 mov	 r8d, 162		; 000000a2H
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CDOGEOJC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00073	33 c0		 xor	 eax, eax
$LN18@Py_FindSou:
  00075	48 8b 44 24 70	 mov	 rax, QWORD PTR filebytes$[rsp]
  0007a	48 83 c0 78	 add	 rax, 120		; 00000078H
  0007e	48 89 44 24 48	 mov	 QWORD PTR filepath$[rsp], rax

; 163  : 
; 164  :     /* Search tail of filename in sys.path before giving up */
; 165  :     tail = strrchr(filepath, SEP);

  00083	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  00088	48 8b 4c 24 48	 mov	 rcx, QWORD PTR filepath$[rsp]
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  00093	48 89 44 24 58	 mov	 QWORD PTR tail$[rsp], rax

; 166  :     if (tail == NULL)

  00098	48 83 7c 24 58
	00		 cmp	 QWORD PTR tail$[rsp], 0
  0009e	75 0c		 jne	 SHORT $LN14@Py_FindSou

; 167  :         tail = filepath;

  000a0	48 8b 44 24 48	 mov	 rax, QWORD PTR filepath$[rsp]
  000a5	48 89 44 24 58	 mov	 QWORD PTR tail$[rsp], rax

; 168  :     else

  000aa	eb 0d		 jmp	 SHORT $LN13@Py_FindSou
$LN14@Py_FindSou:

; 169  :         tail++;

  000ac	48 8b 44 24 58	 mov	 rax, QWORD PTR tail$[rsp]
  000b1	48 ff c0	 inc	 rax
  000b4	48 89 44 24 58	 mov	 QWORD PTR tail$[rsp], rax
$LN13@Py_FindSou:

; 170  :     taillen = strlen(tail);

  000b9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tail$[rsp]
  000be	e8 00 00 00 00	 call	 strlen
  000c3	48 89 44 24 50	 mov	 QWORD PTR taillen$[rsp], rax

; 171  : 
; 172  :     syspath = PySys_GetObject("path");

  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LNEJFJGI@path?$AA@
  000cf	e8 00 00 00 00	 call	 PySys_GetObject
  000d4	48 89 44 24 60	 mov	 QWORD PTR syspath$[rsp], rax

; 173  :     if (syspath == NULL || !PyList_Check(syspath))

  000d9	48 83 7c 24 60
	00		 cmp	 QWORD PTR syspath$[rsp], 0
  000df	74 18		 je	 SHORT $LN11@Py_FindSou
  000e1	48 8b 44 24 60	 mov	 rax, QWORD PTR syspath$[rsp]
  000e6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ea	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f0	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  000f5	85 c0		 test	 eax, eax
  000f7	75 05		 jne	 SHORT $LN12@Py_FindSou
$LN11@Py_FindSou:

; 174  :         goto error;

  000f9	e9 68 02 00 00	 jmp	 $error$20630
$LN12@Py_FindSou:

; 175  :     npath = PyList_Size(syspath);

  000fe	48 8b 4c 24 60	 mov	 rcx, QWORD PTR syspath$[rsp]
  00103	e8 00 00 00 00	 call	 PyList_Size
  00108	48 89 44 24 30	 mov	 QWORD PTR npath$[rsp], rax

; 176  : 
; 177  :     for (i = 0; i < npath; i++) {

  0010d	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00116	eb 0d		 jmp	 SHORT $LN10@Py_FindSou
$LN9@Py_FindSou:
  00118	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  0011d	48 ff c0	 inc	 rax
  00120	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN10@Py_FindSou:
  00125	48 8b 44 24 30	 mov	 rax, QWORD PTR npath$[rsp]
  0012a	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  0012f	0f 8d 31 02 00
	00		 jge	 $LN8@Py_FindSou

; 178  :         v = PyList_GetItem(syspath, i);

  00135	48 8b 54 24 40	 mov	 rdx, QWORD PTR i$[rsp]
  0013a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR syspath$[rsp]
  0013f	e8 00 00 00 00	 call	 PyList_GetItem
  00144	48 89 44 24 38	 mov	 QWORD PTR v$[rsp], rax

; 179  :         if (v == NULL) {

  00149	48 83 7c 24 38
	00		 cmp	 QWORD PTR v$[rsp], 0
  0014f	75 0a		 jne	 SHORT $LN7@Py_FindSou

; 180  :             PyErr_Clear();

  00151	e8 00 00 00 00	 call	 PyErr_Clear

; 181  :             break;

  00156	e9 0b 02 00 00	 jmp	 $LN8@Py_FindSou
$LN7@Py_FindSou:

; 182  :         }
; 183  :         if (!PyUnicode_Check(v))

  0015b	48 8b 44 24 38	 mov	 rax, QWORD PTR v$[rsp]
  00160	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00164	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0016a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0016f	85 c0		 test	 eax, eax
  00171	75 02		 jne	 SHORT $LN6@Py_FindSou

; 184  :             continue;

  00173	eb a3		 jmp	 SHORT $LN9@Py_FindSou
$LN6@Py_FindSou:

; 185  :         path = PyUnicode_EncodeFSDefault(v);

  00175	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  0017a	e8 00 00 00 00	 call	 PyUnicode_EncodeFSDefault
  0017f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR path$[rsp], rax

; 186  :         if (path == NULL) {

  00187	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR path$[rsp], 0
  00190	75 0a		 jne	 SHORT $LN5@Py_FindSou

; 187  :             PyErr_Clear();

  00192	e8 00 00 00 00	 call	 PyErr_Clear

; 188  :             continue;

  00197	e9 7c ff ff ff	 jmp	 $LN9@Py_FindSou
$LN5@Py_FindSou:

; 189  :         }
; 190  :         len = PyBytes_GET_SIZE(path);

  0019c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR path$[rsp]
  001a4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001a8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001ae	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001b3	85 c0		 test	 eax, eax
  001b5	75 1c		 jne	 SHORT $LN19@Py_FindSou
  001b7	41 b8 be 00 00
	00		 mov	 r8d, 190		; 000000beH
  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@EOAICPCA@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d1	33 c0		 xor	 eax, eax
$LN19@Py_FindSou:
  001d3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR path$[rsp]
  001db	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001df	48 89 44 24 68	 mov	 QWORD PTR len$[rsp], rax

; 191  :         if (len + 1 + (Py_ssize_t)taillen >= (Py_ssize_t)namelen - 1) {

  001e4	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  001e9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR taillen$[rsp]
  001ee	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  001f3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR namelen$[rsp]
  001fb	48 ff c9	 dec	 rcx
  001fe	48 3b c1	 cmp	 rax, rcx
  00201	7c 12		 jl	 SHORT $LN4@Py_FindSou

; 192  :             Py_DECREF(path);

  00203	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  0020b	e8 00 00 00 00	 call	 _Py_DecRef

; 193  :             continue; /* Too long */

  00210	e9 03 ff ff ff	 jmp	 $LN9@Py_FindSou
$LN4@Py_FindSou:

; 194  :         }
; 195  :         strcpy(namebuf, PyBytes_AS_STRING(path));

  00215	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR path$[rsp]
  0021d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00221	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00227	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0022c	85 c0		 test	 eax, eax
  0022e	75 1c		 jne	 SHORT $LN20@Py_FindSou
  00230	41 b8 c3 00 00
	00		 mov	 r8d, 195		; 000000c3H
  00236	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@IJKLHPHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAt?$AAr?$AAa?$AAc?$AAe?$AAb?$AAa?$AAc?$AAk?$AA?4?$AAc?$AA?$AA@
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@EOAICPCA@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  00244	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0024a	33 c0		 xor	 eax, eax
$LN20@Py_FindSou:
  0024c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR path$[rsp]
  00254	48 83 c0 78	 add	 rax, 120		; 00000078H
  00258	48 8b d0	 mov	 rdx, rax
  0025b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR namebuf$[rsp]
  00263	e8 00 00 00 00	 call	 strcpy

; 196  :         Py_DECREF(path);

  00268	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  00270	e8 00 00 00 00	 call	 _Py_DecRef

; 197  :         if (strlen(namebuf) != len)

  00275	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR namebuf$[rsp]
  0027d	e8 00 00 00 00	 call	 strlen
  00282	48 3b 44 24 68	 cmp	 rax, QWORD PTR len$[rsp]
  00287	74 05		 je	 SHORT $LN3@Py_FindSou

; 198  :             continue; /* v contains '\0' */

  00289	e9 8a fe ff ff	 jmp	 $LN9@Py_FindSou
$LN3@Py_FindSou:

; 199  :         if (len > 0 && namebuf[len-1] != SEP)

  0028e	48 83 7c 24 68
	00		 cmp	 QWORD PTR len$[rsp], 0
  00294	7e 3f		 jle	 SHORT $LN2@Py_FindSou
  00296	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  0029b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR namebuf$[rsp]
  002a3	48 03 c8	 add	 rcx, rax
  002a6	48 8b c1	 mov	 rax, rcx
  002a9	0f be 40 ff	 movsx	 eax, BYTE PTR [rax-1]
  002ad	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  002b0	74 23		 je	 SHORT $LN2@Py_FindSou

; 200  :             namebuf[len++] = SEP;

  002b2	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  002b7	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR namebuf$[rsp]
  002bf	48 03 c8	 add	 rcx, rax
  002c2	48 8b c1	 mov	 rax, rcx
  002c5	c6 00 5c	 mov	 BYTE PTR [rax], 92	; 0000005cH
  002c8	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  002cd	48 ff c0	 inc	 rax
  002d0	48 89 44 24 68	 mov	 QWORD PTR len$[rsp], rax
$LN2@Py_FindSou:

; 201  :         strcpy(namebuf+len, tail);

  002d5	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  002da	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR namebuf$[rsp]
  002e2	48 03 c8	 add	 rcx, rax
  002e5	48 8b c1	 mov	 rax, rcx
  002e8	48 8b 54 24 58	 mov	 rdx, QWORD PTR tail$[rsp]
  002ed	48 8b c8	 mov	 rcx, rax
  002f0	e8 00 00 00 00	 call	 strcpy

; 202  : 
; 203  :         binary = _PyObject_CallMethodId(io, &PyId_open, "ss", namebuf, "rb");

  002f5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_open@?1??_Py_FindSourceFile@@9@9
  002fa	8b c0		 mov	 eax, eax
  002fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00302	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0030b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0030f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  00316	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0031b	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR namebuf$[rsp]
  00323	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02FCBLNKNB@ss?$AA@
  0032a	48 8b d0	 mov	 rdx, rax
  0032d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR io$[rsp]
  00335	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0033a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR binary$[rsp], rax

; 204  :         if (binary != NULL) {

  00342	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR binary$[rsp], 0
  0034b	74 0f		 je	 SHORT $LN1@Py_FindSou

; 205  :             result = binary;

  0034d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR binary$[rsp]
  00355	48 89 44 24 78	 mov	 QWORD PTR result$[rsp], rax

; 206  :             goto finally;

  0035a	eb 13		 jmp	 SHORT $finally$20658
$LN1@Py_FindSou:

; 207  :         }
; 208  :         PyErr_Clear();

  0035c	e8 00 00 00 00	 call	 PyErr_Clear

; 209  :     }

  00361	e9 b2 fd ff ff	 jmp	 $LN9@Py_FindSou
$LN8@Py_FindSou:
$error$20630:

; 210  :     goto error;
; 211  : 
; 212  : error:
; 213  :     result = NULL;

  00366	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
$finally$20658:

; 214  : finally:
; 215  :     Py_DECREF(filebytes);

  0036f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR filebytes$[rsp]
  00374	e8 00 00 00 00	 call	 _Py_DecRef

; 216  :     return result;

  00379	48 8b 44 24 78	 mov	 rax, QWORD PTR result$[rsp]
$LN16@Py_FindSou:

; 217  : }

  0037e	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00385	c3		 ret	 0
_Py_FindSourceFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@JKALNFEK@Traceback?5?$CImost?5recent?5call?5last@ ; `string'
PUBLIC	??_C@_0P@GFPFPEBF@tracebacklimit?$AA@		; `string'
PUBLIC	PyTraceBack_Print
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTraceBack_Print DD imagerel $LN24
	DD	imagerel $LN24+362
	DD	imagerel $unwind$PyTraceBack_Print
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTraceBack_Print DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0CE@JKALNFEK@Traceback?5?$CImost?5recent?5call?5last@
CONST	SEGMENT
??_C@_0CE@JKALNFEK@Traceback?5?$CImost?5recent?5call?5last@ DB 'Traceback'
	DB	' (most recent call last):', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GFPFPEBF@tracebacklimit?$AA@
CONST	SEGMENT
??_C@_0P@GFPFPEBF@tracebacklimit?$AA@ DB 'tracebacklimit', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyTraceBack_Print
_TEXT	SEGMENT
limitv$ = 32
limit$ = 40
err$ = 44
exc_tb$20858 = 48
exc_type$20856 = 56
exc_value$20857 = 64
v$ = 96
f$ = 104
PyTraceBack_Print PROC					; COMDAT

; 393  : {

$LN24:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 394  :     int err;
; 395  :     PyObject *limitv;
; 396  :     long limit = PyTraceBack_LIMIT;

  0000e	c7 44 24 28 e8
	03 00 00	 mov	 DWORD PTR limit$[rsp], 1000 ; 000003e8H

; 397  : 
; 398  :     if (v == NULL)

  00016	48 83 7c 24 60
	00		 cmp	 QWORD PTR v$[rsp], 0
  0001c	75 07		 jne	 SHORT $LN21@PyTraceBac@2

; 399  :         return 0;

  0001e	33 c0		 xor	 eax, eax
  00020	e9 40 01 00 00	 jmp	 $LN22@PyTraceBac@2
$LN21@PyTraceBac@2:

; 400  :     if (!PyTraceBack_Check(v)) {

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTraceBack_Type
  0002c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  00031	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00035	74 1b		 je	 SHORT $LN20@PyTraceBac@2

; 401  :         PyErr_BadInternalCall();

  00037	ba 91 01 00 00	 mov	 edx, 401		; 00000191H
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@HFAOEPCJ@?4?4?2Python?2traceback?4c?$AA@
  00043	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 402  :         return -1;

  00048	b8 ff ff ff ff	 mov	 eax, -1
  0004d	e9 13 01 00 00	 jmp	 $LN22@PyTraceBac@2
$LN20@PyTraceBac@2:

; 403  :     }
; 404  :     limitv = PySys_GetObject("tracebacklimit");

  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@GFPFPEBF@tracebacklimit?$AA@
  00059	e8 00 00 00 00	 call	 PySys_GetObject
  0005e	48 89 44 24 20	 mov	 QWORD PTR limitv$[rsp], rax

; 405  :     if (limitv) {

  00063	48 83 7c 24 20
	00		 cmp	 QWORD PTR limitv$[rsp], 0
  00069	0f 84 be 00 00
	00		 je	 $LN19@PyTraceBac@2

; 406  :         PyObject *exc_type, *exc_value, *exc_tb;
; 407  : 
; 408  :         PyErr_Fetch(&exc_type, &exc_value, &exc_tb);

  0006f	4c 8d 44 24 30	 lea	 r8, QWORD PTR exc_tb$20858[rsp]
  00074	48 8d 54 24 40	 lea	 rdx, QWORD PTR exc_value$20857[rsp]
  00079	48 8d 4c 24 38	 lea	 rcx, QWORD PTR exc_type$20856[rsp]
  0007e	e8 00 00 00 00	 call	 PyErr_Fetch

; 409  :         limit = PyLong_AsLong(limitv);

  00083	48 8b 4c 24 20	 mov	 rcx, QWORD PTR limitv$[rsp]
  00088	e8 00 00 00 00	 call	 PyLong_AsLong
  0008d	89 44 24 28	 mov	 DWORD PTR limit$[rsp], eax

; 410  :         if (limit == -1 && PyErr_Occurred()) {

  00091	83 7c 24 28 ff	 cmp	 DWORD PTR limit$[rsp], -1
  00096	75 72		 jne	 SHORT $LN18@PyTraceBac@2
  00098	e8 00 00 00 00	 call	 PyErr_Occurred
  0009d	48 85 c0	 test	 rax, rax
  000a0	74 68		 je	 SHORT $LN18@PyTraceBac@2

; 411  :             if (PyErr_ExceptionMatches(PyExc_OverflowError)) {

  000a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000a9	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000ae	85 c0		 test	 eax, eax
  000b0	74 0a		 je	 SHORT $LN17@PyTraceBac@2

; 412  :                 limit = PyTraceBack_LIMIT;

  000b2	c7 44 24 28 e8
	03 00 00	 mov	 DWORD PTR limit$[rsp], 1000 ; 000003e8H

; 413  :             }
; 414  :             else {

  000ba	eb 4c		 jmp	 SHORT $LN16@PyTraceBac@2
$LN17@PyTraceBac@2:
$LN15@PyTraceBac@2:

; 415  :                 Py_XDECREF(exc_type);

  000bc	48 83 7c 24 38
	00		 cmp	 QWORD PTR exc_type$20856[rsp], 0
  000c2	74 0a		 je	 SHORT $LN12@PyTraceBac@2
  000c4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR exc_type$20856[rsp]
  000c9	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@PyTraceBac@2:
  000ce	33 c0		 xor	 eax, eax
  000d0	85 c0		 test	 eax, eax
  000d2	75 e8		 jne	 SHORT $LN15@PyTraceBac@2
$LN11@PyTraceBac@2:

; 416  :                 Py_XDECREF(exc_value);

  000d4	48 83 7c 24 40
	00		 cmp	 QWORD PTR exc_value$20857[rsp], 0
  000da	74 0a		 je	 SHORT $LN8@PyTraceBac@2
  000dc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc_value$20857[rsp]
  000e1	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@PyTraceBac@2:
  000e6	33 c0		 xor	 eax, eax
  000e8	85 c0		 test	 eax, eax
  000ea	75 e8		 jne	 SHORT $LN11@PyTraceBac@2
$LN7@PyTraceBac@2:

; 417  :                 Py_XDECREF(exc_tb);

  000ec	48 83 7c 24 30
	00		 cmp	 QWORD PTR exc_tb$20858[rsp], 0
  000f2	74 0a		 je	 SHORT $LN4@PyTraceBac@2
  000f4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR exc_tb$20858[rsp]
  000f9	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyTraceBac@2:
  000fe	33 c0		 xor	 eax, eax
  00100	85 c0		 test	 eax, eax
  00102	75 e8		 jne	 SHORT $LN7@PyTraceBac@2

; 418  :                 return 0;

  00104	33 c0		 xor	 eax, eax
  00106	eb 5d		 jmp	 SHORT $LN22@PyTraceBac@2
$LN16@PyTraceBac@2:

; 419  :             }

  00108	eb 0f		 jmp	 SHORT $LN3@PyTraceBac@2
$LN18@PyTraceBac@2:

; 420  :         }
; 421  :         else if (limit <= 0) {

  0010a	83 7c 24 28 00	 cmp	 DWORD PTR limit$[rsp], 0
  0010f	7f 08		 jg	 SHORT $LN2@PyTraceBac@2

; 422  :             limit = PyTraceBack_LIMIT;

  00111	c7 44 24 28 e8
	03 00 00	 mov	 DWORD PTR limit$[rsp], 1000 ; 000003e8H
$LN2@PyTraceBac@2:
$LN3@PyTraceBac@2:

; 423  :         }
; 424  :         PyErr_Restore(exc_type, exc_value, exc_tb);

  00119	4c 8b 44 24 30	 mov	 r8, QWORD PTR exc_tb$20858[rsp]
  0011e	48 8b 54 24 40	 mov	 rdx, QWORD PTR exc_value$20857[rsp]
  00123	48 8b 4c 24 38	 mov	 rcx, QWORD PTR exc_type$20856[rsp]
  00128	e8 00 00 00 00	 call	 PyErr_Restore
$LN19@PyTraceBac@2:

; 425  :     }
; 426  :     err = PyFile_WriteString("Traceback (most recent call last):\n", f);

  0012d	48 8b 54 24 68	 mov	 rdx, QWORD PTR f$[rsp]
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@JKALNFEK@Traceback?5?$CImost?5recent?5call?5last@
  00139	e8 00 00 00 00	 call	 PyFile_WriteString
  0013e	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax

; 427  :     if (!err)

  00142	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  00147	75 18		 jne	 SHORT $LN1@PyTraceBac@2

; 428  :         err = tb_printinternal((PyTracebackObject *)v, f, limit);

  00149	44 8b 44 24 28	 mov	 r8d, DWORD PTR limit$[rsp]
  0014e	48 8b 54 24 68	 mov	 rdx, QWORD PTR f$[rsp]
  00153	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  00158	e8 00 00 00 00	 call	 tb_printinternal
  0015d	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax
$LN1@PyTraceBac@2:

; 429  :     return err;

  00161	8b 44 24 2c	 mov	 eax, DWORD PTR err$[rsp]
$LN22@PyTraceBac@2:

; 430  : }

  00165	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00169	c3		 ret	 0
PyTraceBack_Print ENDP
_TEXT	ENDS
EXTRN	PyErr_CheckSignals:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tb_printinternal DD imagerel tb_printinternal
	DD	imagerel tb_printinternal+221
	DD	imagerel $unwind$tb_printinternal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_printinternal DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tb_printinternal
_TEXT	SEGMENT
tb1$ = 32
err$ = 40
depth$ = 44
tb$ = 64
f$ = 72
limit$ = 80
tb_printinternal PROC					; COMDAT

; 366  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 367  :     int err = 0;

  00013	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 368  :     long depth = 0;

  0001b	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR depth$[rsp], 0

; 369  :     PyTracebackObject *tb1 = tb;

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  00028	48 89 44 24 20	 mov	 QWORD PTR tb1$[rsp], rax
$LN6@tb_printin:

; 370  :     while (tb1 != NULL) {

  0002d	48 83 7c 24 20
	00		 cmp	 QWORD PTR tb1$[rsp], 0
  00033	74 1a		 je	 SHORT $LN5@tb_printin

; 371  :         depth++;

  00035	8b 44 24 2c	 mov	 eax, DWORD PTR depth$[rsp]
  00039	ff c0		 inc	 eax
  0003b	89 44 24 2c	 mov	 DWORD PTR depth$[rsp], eax

; 372  :         tb1 = tb1->tb_next;

  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR tb1$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 89 44 24 20	 mov	 QWORD PTR tb1$[rsp], rax

; 373  :     }

  0004d	eb de		 jmp	 SHORT $LN6@tb_printin
$LN5@tb_printin:
$LN4@tb_printin:

; 374  :     while (tb != NULL && err == 0) {

  0004f	48 83 7c 24 40
	00		 cmp	 QWORD PTR tb$[rsp], 0
  00055	74 7d		 je	 SHORT $LN3@tb_printin
  00057	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  0005c	75 76		 jne	 SHORT $LN3@tb_printin

; 375  :         if (depth <= limit) {

  0005e	8b 44 24 50	 mov	 eax, DWORD PTR limit$[rsp]
  00062	39 44 24 2c	 cmp	 DWORD PTR depth$[rsp], eax
  00066	7f 3f		 jg	 SHORT $LN2@tb_printin

; 376  :             err = tb_displayline(f,
; 377  :                                  tb->tb_frame->f_code->co_filename,
; 378  :                                  tb->tb_lineno,
; 379  :                                  tb->tb_frame->f_code->co_name);

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  0006d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00071	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tb$[rsp]
  0007a	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0007e	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00082	4c 8b 88 b8 00
	00 00		 mov	 r9, QWORD PTR [rax+184]
  00089	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  0008e	44 8b 40 74	 mov	 r8d, DWORD PTR [rax+116]
  00092	48 8b 91 b0 00
	00 00		 mov	 rdx, QWORD PTR [rcx+176]
  00099	48 8b 4c 24 48	 mov	 rcx, QWORD PTR f$[rsp]
  0009e	e8 00 00 00 00	 call	 tb_displayline
  000a3	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN2@tb_printin:

; 380  :         }
; 381  :         depth--;

  000a7	8b 44 24 2c	 mov	 eax, DWORD PTR depth$[rsp]
  000ab	ff c8		 dec	 eax
  000ad	89 44 24 2c	 mov	 DWORD PTR depth$[rsp], eax

; 382  :         tb = tb->tb_next;

  000b1	48 8b 44 24 40	 mov	 rax, QWORD PTR tb$[rsp]
  000b6	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ba	48 89 44 24 40	 mov	 QWORD PTR tb$[rsp], rax

; 383  :         if (err == 0)

  000bf	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000c4	75 09		 jne	 SHORT $LN1@tb_printin

; 384  :             err = PyErr_CheckSignals();

  000c6	e8 00 00 00 00	 call	 PyErr_CheckSignals
  000cb	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN1@tb_printin:

; 385  :     }

  000cf	e9 7b ff ff ff	 jmp	 $LN4@tb_printin
$LN3@tb_printin:

; 386  :     return err;

  000d4	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]

; 387  : }

  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
tb_printinternal ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@NMGFJCMM@?5?5File?5?$CC?$CFU?$CC?0?5line?5?$CFd?0?5in?5?$CFU?6?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tb_displayline DD imagerel tb_displayline
	DD	imagerel tb_displayline+189
	DD	imagerel $unwind$tb_displayline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tb_displayline DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_0BN@NMGFJCMM@?5?5File?5?$CC?$CFU?$CC?0?5line?5?$CFd?0?5in?5?$CFU?6?$AA@
CONST	SEGMENT
??_C@_0BN@NMGFJCMM@?5?5File?5?$CC?$CFU?$CC?0?5line?5?$CFd?0?5in?5?$CFU?6?$AA@ DB ' '
	DB	' File "%U", line %d, in %U', 0aH, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tb_displayline
_TEXT	SEGMENT
line$ = 32
err$ = 40
f$ = 64
filename$ = 72
lineno$ = 80
name$ = 88
tb_displayline PROC					; COMDAT

; 344  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 345  :     int err;
; 346  :     PyObject *line;
; 347  : 
; 348  :     if (filename == NULL || name == NULL)

  00018	48 83 7c 24 48
	00		 cmp	 QWORD PTR filename$[rsp], 0
  0001e	74 08		 je	 SHORT $LN4@tb_display
  00020	48 83 7c 24 58
	00		 cmp	 QWORD PTR name$[rsp], 0
  00026	75 0a		 jne	 SHORT $LN5@tb_display
$LN4@tb_display:

; 349  :         return -1;

  00028	b8 ff ff ff ff	 mov	 eax, -1
  0002d	e9 86 00 00 00	 jmp	 $LN6@tb_display
$LN5@tb_display:

; 350  :     line = PyUnicode_FromFormat("  File \"%U\", line %d, in %U\n",
; 351  :                                 filename, lineno, name);

  00032	4c 8b 4c 24 58	 mov	 r9, QWORD PTR name$[rsp]
  00037	44 8b 44 24 50	 mov	 r8d, DWORD PTR lineno$[rsp]
  0003c	48 8b 54 24 48	 mov	 rdx, QWORD PTR filename$[rsp]
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@NMGFJCMM@?5?5File?5?$CC?$CFU?$CC?0?5line?5?$CFd?0?5in?5?$CFU?6?$AA@
  00048	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0004d	48 89 44 24 20	 mov	 QWORD PTR line$[rsp], rax

; 352  :     if (line == NULL)

  00052	48 83 7c 24 20
	00		 cmp	 QWORD PTR line$[rsp], 0
  00058	75 07		 jne	 SHORT $LN3@tb_display

; 353  :         return -1;

  0005a	b8 ff ff ff ff	 mov	 eax, -1
  0005f	eb 57		 jmp	 SHORT $LN6@tb_display
$LN3@tb_display:

; 354  :     err = PyFile_WriteObject(line, f, Py_PRINT_RAW);

  00061	41 b8 01 00 00
	00		 mov	 r8d, 1
  00067	48 8b 54 24 40	 mov	 rdx, QWORD PTR f$[rsp]
  0006c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR line$[rsp]
  00071	e8 00 00 00 00	 call	 PyFile_WriteObject
  00076	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 355  :     Py_DECREF(line);

  0007a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR line$[rsp]
  0007f	e8 00 00 00 00	 call	 _Py_DecRef

; 356  :     if (err != 0)

  00084	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00089	74 06		 je	 SHORT $LN2@tb_display

; 357  :         return err;

  0008b	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]
  0008f	eb 27		 jmp	 SHORT $LN6@tb_display
$LN2@tb_display:

; 358  :     /* ignore errors since we can't report them, can we? */
; 359  :     if (_Py_DisplaySourceLine(f, filename, lineno, 4))

  00091	41 b9 04 00 00
	00		 mov	 r9d, 4
  00097	44 8b 44 24 50	 mov	 r8d, DWORD PTR lineno$[rsp]
  0009c	48 8b 54 24 48	 mov	 rdx, QWORD PTR filename$[rsp]
  000a1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR f$[rsp]
  000a6	e8 00 00 00 00	 call	 _Py_DisplaySourceLine
  000ab	85 c0		 test	 eax, eax
  000ad	74 05		 je	 SHORT $LN1@tb_display

; 360  :         PyErr_Clear();

  000af	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@tb_display:

; 361  :     return err;

  000b4	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]
$LN6@tb_display:

; 362  : }

  000b8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bc	c3		 ret	 0
tb_displayline ENDP
_TEXT	ENDS
PUBLIC	_Py_DumpTraceback
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DumpTraceback DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$_Py_DumpTraceback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DumpTraceback DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_DumpTraceback
_TEXT	SEGMENT
fd$ = 48
tstate$ = 56
_Py_DumpTraceback PROC					; COMDAT

; 626  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 627  :     dump_traceback(fd, tstate, 1);

  0000d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00013	48 8b 54 24 38	 mov	 rdx, QWORD PTR tstate$[rsp]
  00018	8b 4c 24 30	 mov	 ecx, DWORD PTR fd$[rsp]
  0001c	e8 00 00 00 00	 call	 dump_traceback

; 628  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
_Py_DumpTraceback ENDP
_TEXT	ENDS
PUBLIC	??_C@_06FMKCNGCD@?5?5?4?4?4?6?$AA@		; `string'
PUBLIC	??_C@_0CF@DHIBPHGN@Traceback?5?$CImost?5recent?5call?5firs@ ; `string'
EXTRN	_PyThreadState_GetFrame:QWORD
EXTRN	__imp_write:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dump_traceback DD imagerel dump_traceback
	DD	imagerel dump_traceback+205
	DD	imagerel $unwind$dump_traceback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dump_traceback DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT ??_C@_06FMKCNGCD@?5?5?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_06FMKCNGCD@?5?5?4?4?4?6?$AA@ DB '  ...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DHIBPHGN@Traceback?5?$CImost?5recent?5call?5firs@
CONST	SEGMENT
??_C@_0CF@DHIBPHGN@Traceback?5?$CImost?5recent?5call?5firs@ DB 'Traceback'
	DB	' (most recent call first):', 0aH, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dump_traceback
_TEXT	SEGMENT
frame$ = 32
depth$ = 40
fd$ = 64
tstate$ = 72
write_header$ = 80
dump_traceback PROC					; COMDAT

; 599  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 600  :     PyFrameObject *frame;
; 601  :     unsigned int depth;
; 602  : 
; 603  :     if (write_header)

  00012	83 7c 24 50 00	 cmp	 DWORD PTR write_header$[rsp], 0
  00017	74 20		 je	 SHORT $LN6@dump_trace

; 604  :         PUTS(fd, "Traceback (most recent call first):\n");

  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@DHIBPHGN@Traceback?5?$CImost?5recent?5call?5firs@
  00020	e8 00 00 00 00	 call	 strlen
  00025	44 8b c0	 mov	 r8d, eax
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@DHIBPHGN@Traceback?5?$CImost?5recent?5call?5firs@
  0002f	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN6@dump_trace:

; 605  : 
; 606  :     frame = _PyThreadState_GetFrame(tstate);

  00039	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tstate$[rsp]
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR _PyThreadState_GetFrame
  00044	48 89 44 24 20	 mov	 QWORD PTR frame$[rsp], rax

; 607  :     if (frame == NULL)

  00049	48 83 7c 24 20
	00		 cmp	 QWORD PTR frame$[rsp], 0
  0004f	75 02		 jne	 SHORT $LN5@dump_trace

; 608  :         return;

  00051	eb 75		 jmp	 SHORT $LN7@dump_trace
$LN5@dump_trace:

; 609  : 
; 610  :     depth = 0;

  00053	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR depth$[rsp], 0
$LN4@dump_trace:

; 611  :     while (frame != NULL) {

  0005b	48 83 7c 24 20
	00		 cmp	 QWORD PTR frame$[rsp], 0
  00061	74 65		 je	 SHORT $LN3@dump_trace

; 612  :         if (MAX_FRAME_DEPTH <= depth) {

  00063	83 7c 24 28 64	 cmp	 DWORD PTR depth$[rsp], 100 ; 00000064H
  00068	72 22		 jb	 SHORT $LN2@dump_trace

; 613  :             PUTS(fd, "  ...\n");

  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FMKCNGCD@?5?5?4?4?4?6?$AA@
  00071	e8 00 00 00 00	 call	 strlen
  00076	44 8b c0	 mov	 r8d, eax
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06FMKCNGCD@?5?5?4?4?4?6?$AA@
  00080	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 614  :             break;

  0008a	eb 3c		 jmp	 SHORT $LN3@dump_trace
$LN2@dump_trace:

; 615  :         }
; 616  :         if (!PyFrame_Check(frame))

  0008c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFrame_Type
  00093	48 8b 4c 24 20	 mov	 rcx, QWORD PTR frame$[rsp]
  00098	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0009c	74 02		 je	 SHORT $LN1@dump_trace

; 617  :             break;

  0009e	eb 28		 jmp	 SHORT $LN3@dump_trace
$LN1@dump_trace:

; 618  :         dump_frame(fd, frame);

  000a0	48 8b 54 24 20	 mov	 rdx, QWORD PTR frame$[rsp]
  000a5	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  000a9	e8 00 00 00 00	 call	 dump_frame

; 619  :         frame = frame->f_back;

  000ae	48 8b 44 24 20	 mov	 rax, QWORD PTR frame$[rsp]
  000b3	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000b7	48 89 44 24 20	 mov	 QWORD PTR frame$[rsp], rax

; 620  :         depth++;

  000bc	8b 44 24 28	 mov	 eax, DWORD PTR depth$[rsp]
  000c0	ff c0		 inc	 eax
  000c2	89 44 24 28	 mov	 DWORD PTR depth$[rsp], eax

; 621  :     }

  000c6	eb 93		 jmp	 SHORT $LN4@dump_trace
$LN3@dump_trace:
$LN7@dump_trace:

; 622  : }

  000c8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cc	c3		 ret	 0
dump_traceback ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GJPPFNOH@?5in?5?$AA@			; `string'
PUBLIC	??_C@_07BAMMBJFH@?0?5line?5?$AA@		; `string'
PUBLIC	??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@		; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	??_C@_07ELFNOCMD@?5?5File?5?$AA@		; `string'
EXTRN	PyCode_Addr2Line:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dump_frame DD imagerel dump_frame
	DD	imagerel dump_frame+453
	DD	imagerel $unwind$dump_frame
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dump_frame DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT ??_C@_04GJPPFNOH@?5in?5?$AA@
CONST	SEGMENT
??_C@_04GJPPFNOH@?5in?5?$AA@ DB ' in ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BAMMBJFH@?0?5line?5?$AA@
CONST	SEGMENT
??_C@_07BAMMBJFH@?0?5line?5?$AA@ DB ', line ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
CONST	SEGMENT
??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@ DB '???', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELFNOCMD@?5?5File?5?$AA@
CONST	SEGMENT
??_C@_07ELFNOCMD@?5?5File?5?$AA@ DB '  File ', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dump_frame
_TEXT	SEGMENT
lineno$ = 32
code$ = 40
fd$ = 64
frame$ = 72
dump_frame PROC						; COMDAT

; 566  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 567  :     PyCodeObject *code;
; 568  :     int lineno;
; 569  : 
; 570  :     code = frame->f_code;

  0000d	48 8b 44 24 48	 mov	 rax, QWORD PTR frame$[rsp]
  00012	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00016	48 89 44 24 28	 mov	 QWORD PTR code$[rsp], rax

; 571  :     PUTS(fd, "  File ");

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07ELFNOCMD@?5?5File?5?$AA@
  00022	e8 00 00 00 00	 call	 strlen
  00027	44 8b c0	 mov	 r8d, eax
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07ELFNOCMD@?5?5File?5?$AA@
  00031	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 572  :     if (code != NULL && code->co_filename != NULL
; 573  :         && PyUnicode_Check(code->co_filename))

  0003b	48 83 7c 24 28
	00		 cmp	 QWORD PTR code$[rsp], 0
  00041	74 73		 je	 SHORT $LN4@dump_frame
  00043	48 8b 44 24 28	 mov	 rax, QWORD PTR code$[rsp]
  00048	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  00050	74 64		 je	 SHORT $LN4@dump_frame
  00052	48 8b 44 24 28	 mov	 rax, QWORD PTR code$[rsp]
  00057	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  0005e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00062	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00068	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0006d	85 c0		 test	 eax, eax
  0006f	74 45		 je	 SHORT $LN4@dump_frame

; 574  :     {
; 575  :         write(fd, "\"", 1);

  00071	41 b8 01 00 00
	00		 mov	 r8d, 1
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01BJJEKLCA@?$CC?$AA@
  0007e	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 576  :         dump_ascii(fd, code->co_filename);

  00088	48 8b 44 24 28	 mov	 rax, QWORD PTR code$[rsp]
  0008d	48 8b 90 b0 00
	00 00		 mov	 rdx, QWORD PTR [rax+176]
  00094	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00098	e8 00 00 00 00	 call	 dump_ascii

; 577  :         write(fd, "\"", 1);

  0009d	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01BJJEKLCA@?$CC?$AA@
  000aa	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 578  :     } else {

  000b4	eb 20		 jmp	 SHORT $LN3@dump_frame
$LN4@dump_frame:

; 579  :         PUTS(fd, "???");

  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
  000bd	e8 00 00 00 00	 call	 strlen
  000c2	44 8b c0	 mov	 r8d, eax
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
  000cc	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN3@dump_frame:

; 580  :     }
; 581  : 
; 582  :     /* PyFrame_GetLineNumber() was introduced in Python 2.7.0 and 3.2.0 */
; 583  :     lineno = PyCode_Addr2Line(code, frame->f_lasti);

  000d6	48 8b 44 24 48	 mov	 rax, QWORD PTR frame$[rsp]
  000db	8b 90 d0 00 00
	00		 mov	 edx, DWORD PTR [rax+208]
  000e1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR code$[rsp]
  000e6	e8 00 00 00 00	 call	 PyCode_Addr2Line
  000eb	89 44 24 20	 mov	 DWORD PTR lineno$[rsp], eax

; 584  :     PUTS(fd, ", line ");

  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BAMMBJFH@?0?5line?5?$AA@
  000f6	e8 00 00 00 00	 call	 strlen
  000fb	44 8b c0	 mov	 r8d, eax
  000fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BAMMBJFH@?0?5line?5?$AA@
  00105	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 585  :     dump_decimal(fd, lineno);

  0010f	8b 54 24 20	 mov	 edx, DWORD PTR lineno$[rsp]
  00113	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00117	e8 00 00 00 00	 call	 dump_decimal

; 586  :     PUTS(fd, " in ");

  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GJPPFNOH@?5in?5?$AA@
  00123	e8 00 00 00 00	 call	 strlen
  00128	44 8b c0	 mov	 r8d, eax
  0012b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04GJPPFNOH@?5in?5?$AA@
  00132	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 587  : 
; 588  :     if (code != NULL && code->co_name != NULL
; 589  :         && PyUnicode_Check(code->co_name))

  0013c	48 83 7c 24 28
	00		 cmp	 QWORD PTR code$[rsp], 0
  00142	74 45		 je	 SHORT $LN2@dump_frame
  00144	48 8b 44 24 28	 mov	 rax, QWORD PTR code$[rsp]
  00149	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00151	74 36		 je	 SHORT $LN2@dump_frame
  00153	48 8b 44 24 28	 mov	 rax, QWORD PTR code$[rsp]
  00158	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0015f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00163	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00169	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0016e	85 c0		 test	 eax, eax
  00170	74 17		 je	 SHORT $LN2@dump_frame

; 590  :         dump_ascii(fd, code->co_name);

  00172	48 8b 44 24 28	 mov	 rax, QWORD PTR code$[rsp]
  00177	48 8b 90 b8 00
	00 00		 mov	 rdx, QWORD PTR [rax+184]
  0017e	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00182	e8 00 00 00 00	 call	 dump_ascii

; 591  :     else

  00187	eb 20		 jmp	 SHORT $LN1@dump_frame
$LN2@dump_frame:

; 592  :         PUTS(fd, "???");

  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
  00190	e8 00 00 00 00	 call	 strlen
  00195	44 8b c0	 mov	 r8d, eax
  00198	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
  0019f	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  001a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN1@dump_frame:

; 593  : 
; 594  :     write(fd, "\n", 1);

  001a9	41 b8 01 00 00
	00		 mov	 r8d, 1
  001af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  001b6	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  001ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 595  : }

  001c0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001c4	c3		 ret	 0
dump_frame ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dump_decimal DD imagerel dump_decimal
	DD	imagerel dump_decimal+141
	DD	imagerel $unwind$dump_decimal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dump_decimal DD 010c01H
	DD	0620cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dump_decimal
_TEXT	SEGMENT
len$ = 32
buffer$ = 36
fd$ = 64
value$ = 72
dump_decimal PROC					; COMDAT

; 457  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 458  :     char buffer[7];
; 459  :     int len;
; 460  :     if (value < 0 || 999999 < value)

  0000c	83 7c 24 48 00	 cmp	 DWORD PTR value$[rsp], 0
  00011	7c 0a		 jl	 SHORT $LN4@dump_decim
  00013	81 7c 24 48 3f
	42 0f 00	 cmp	 DWORD PTR value$[rsp], 999999 ; 000f423fH
  0001b	7e 02		 jle	 SHORT $LN5@dump_decim
$LN4@dump_decim:

; 461  :         return;

  0001d	eb 69		 jmp	 SHORT $LN6@dump_decim
$LN5@dump_decim:

; 462  :     len = 0;

  0001f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR len$[rsp], 0
$LN3@dump_decim:

; 463  :     do {
; 464  :         buffer[len] = '0' + (value % 10);

  00027	8b 44 24 48	 mov	 eax, DWORD PTR value$[rsp]
  0002b	99		 cdq
  0002c	b9 0a 00 00 00	 mov	 ecx, 10
  00031	f7 f9		 idiv	 ecx
  00033	8b c2		 mov	 eax, edx
  00035	83 c0 30	 add	 eax, 48			; 00000030H
  00038	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR len$[rsp]
  0003d	88 44 0c 24	 mov	 BYTE PTR buffer$[rsp+rcx], al

; 465  :         value /= 10;

  00041	8b 44 24 48	 mov	 eax, DWORD PTR value$[rsp]
  00045	99		 cdq
  00046	b9 0a 00 00 00	 mov	 ecx, 10
  0004b	f7 f9		 idiv	 ecx
  0004d	89 44 24 48	 mov	 DWORD PTR value$[rsp], eax

; 466  :         len++;

  00051	8b 44 24 20	 mov	 eax, DWORD PTR len$[rsp]
  00055	ff c0		 inc	 eax
  00057	89 44 24 20	 mov	 DWORD PTR len$[rsp], eax

; 467  :     } while (value);

  0005b	83 7c 24 48 00	 cmp	 DWORD PTR value$[rsp], 0
  00060	75 c5		 jne	 SHORT $LN3@dump_decim

; 468  :     reverse_string(buffer, len);

  00062	48 63 44 24 20	 movsxd	 rax, DWORD PTR len$[rsp]
  00067	48 8b d0	 mov	 rdx, rax
  0006a	48 8d 4c 24 24	 lea	 rcx, QWORD PTR buffer$[rsp]
  0006f	e8 00 00 00 00	 call	 reverse_string

; 469  :     write(fd, buffer, len);

  00074	44 8b 44 24 20	 mov	 r8d, DWORD PTR len$[rsp]
  00079	48 8d 54 24 24	 lea	 rdx, QWORD PTR buffer$[rsp]
  0007e	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN6@dump_decim:

; 470  : }

  00088	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008c	c3		 ret	 0
dump_decimal ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$reverse_string DD imagerel reverse_string
	DD	imagerel reverse_string+173
	DD	imagerel $unwind$reverse_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reverse_string DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT reverse_string
_TEXT	SEGMENT
i$ = 0
tmp$ = 8
j$ = 16
text$ = 48
len$ = 56
reverse_string PROC					; COMDAT

; 438  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 439  :     char tmp;
; 440  :     size_t i, j;
; 441  :     if (len == 0)

  0000e	48 83 7c 24 38
	00		 cmp	 QWORD PTR len$[rsp], 0
  00014	75 05		 jne	 SHORT $LN4@reverse_st

; 442  :         return;

  00016	e9 8d 00 00 00	 jmp	 $LN5@reverse_st
$LN4@reverse_st:

; 443  :     for (i=0, j=len-1; i < j; i++, j--) {

  0001b	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  00028	48 ff c8	 dec	 rax
  0002b	48 89 44 24 10	 mov	 QWORD PTR j$[rsp], rax
  00030	eb 18		 jmp	 SHORT $LN3@reverse_st
$LN2@reverse_st:
  00032	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  00036	48 ff c0	 inc	 rax
  00039	48 89 04 24	 mov	 QWORD PTR i$[rsp], rax
  0003d	48 8b 44 24 10	 mov	 rax, QWORD PTR j$[rsp]
  00042	48 ff c8	 dec	 rax
  00045	48 89 44 24 10	 mov	 QWORD PTR j$[rsp], rax
$LN3@reverse_st:
  0004a	48 8b 44 24 10	 mov	 rax, QWORD PTR j$[rsp]
  0004f	48 39 04 24	 cmp	 QWORD PTR i$[rsp], rax
  00053	73 53		 jae	 SHORT $LN1@reverse_st

; 444  :         tmp = text[i];

  00055	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  00059	48 8b 4c 24 30	 mov	 rcx, QWORD PTR text$[rsp]
  0005e	48 03 c8	 add	 rcx, rax
  00061	48 8b c1	 mov	 rax, rcx
  00064	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00067	88 44 24 08	 mov	 BYTE PTR tmp$[rsp], al

; 445  :         text[i] = text[j];

  0006b	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  0006f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR text$[rsp]
  00074	48 03 c8	 add	 rcx, rax
  00077	48 8b c1	 mov	 rax, rcx
  0007a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR j$[rsp]
  0007f	48 8b 54 24 30	 mov	 rdx, QWORD PTR text$[rsp]
  00084	48 03 d1	 add	 rdx, rcx
  00087	48 8b ca	 mov	 rcx, rdx
  0008a	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0008d	88 08		 mov	 BYTE PTR [rax], cl

; 446  :         text[j] = tmp;

  0008f	48 8b 44 24 10	 mov	 rax, QWORD PTR j$[rsp]
  00094	48 8b 4c 24 30	 mov	 rcx, QWORD PTR text$[rsp]
  00099	48 03 c8	 add	 rcx, rax
  0009c	48 8b c1	 mov	 rax, rcx
  0009f	0f b6 4c 24 08	 movzx	 ecx, BYTE PTR tmp$[rsp]
  000a4	88 08		 mov	 BYTE PTR [rax], cl

; 447  :     }

  000a6	eb 8a		 jmp	 SHORT $LN2@reverse_st
$LN1@reverse_st:
$LN5@reverse_st:

; 448  : }

  000a8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ac	c3		 ret	 0
reverse_string ENDP
_TEXT	ENDS
PUBLIC	??_C@_03KHICJKCI@?4?4?4?$AA@			; `string'
PUBLIC	??_C@_02KCNEFICI@?2U?$AA@			; `string'
PUBLIC	??_C@_02DHFAHMIK@?2u?$AA@			; `string'
PUBLIC	??_C@_02ICPOACMH@?2x?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$dump_ascii DD imagerel dump_ascii
	DD	imagerel dump_ascii+738
	DD	imagerel $unwind$dump_ascii
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dump_ascii DD 010d01H
	DD	0e20dH
xdata	ENDS
;	COMDAT ??_C@_03KHICJKCI@?4?4?4?$AA@
CONST	SEGMENT
??_C@_03KHICJKCI@?4?4?4?$AA@ DB '...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCNEFICI@?2U?$AA@
CONST	SEGMENT
??_C@_02KCNEFICI@?2U?$AA@ DB '\U', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DHFAHMIK@?2u?$AA@
CONST	SEGMENT
??_C@_02DHFAHMIK@?2u?$AA@ DB '\u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ICPOACMH@?2x?$AA@
CONST	SEGMENT
??_C@_02ICPOACMH@?2x?$AA@ DB '\x', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dump_ascii
_TEXT	SEGMENT
kind$ = 32
i$ = 40
size$ = 48
data$ = 56
ascii$ = 64
ch$ = 72
truncated$ = 76
wstr$ = 80
c$20966 = 88
tv130 = 92
tv129 = 96
fd$ = 128
text$ = 136
dump_ascii PROC						; COMDAT

; 498  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 499  :     PyASCIIObject *ascii = (PyASCIIObject *)text;

  0000d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR text$[rsp]
  00015	48 89 44 24 40	 mov	 QWORD PTR ascii$[rsp], rax

; 500  :     Py_ssize_t i, size;
; 501  :     int truncated;
; 502  :     int kind;
; 503  :     void *data = NULL;

  0001a	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR data$[rsp], 0

; 504  :     wchar_t *wstr = NULL;

  00023	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR wstr$[rsp], 0

; 505  :     Py_UCS4 ch;
; 506  : 
; 507  :     size = ascii->length;

  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR ascii$[rsp]
  00031	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00035	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 508  :     kind = ascii->state.kind;

  0003a	48 8b 44 24 40	 mov	 rax, QWORD PTR ascii$[rsp]
  0003f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00042	c1 e8 02	 shr	 eax, 2
  00045	83 e0 07	 and	 eax, 7
  00048	89 44 24 20	 mov	 DWORD PTR kind$[rsp], eax

; 509  :     if (ascii->state.compact) {

  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR ascii$[rsp]
  00051	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00054	c1 e8 05	 shr	 eax, 5
  00057	83 e0 01	 and	 eax, 1
  0005a	85 c0		 test	 eax, eax
  0005c	74 3c		 je	 SHORT $LN22@dump_ascii

; 510  :         if (ascii->state.ascii)

  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR ascii$[rsp]
  00063	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00066	c1 e8 06	 shr	 eax, 6
  00069	83 e0 01	 and	 eax, 1
  0006c	85 c0		 test	 eax, eax
  0006e	74 15		 je	 SHORT $LN21@dump_ascii

; 511  :             data = ((PyASCIIObject*)text) + 1;

  00070	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR text$[rsp]
  00078	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0007e	48 89 44 24 38	 mov	 QWORD PTR data$[rsp], rax

; 512  :         else

  00083	eb 13		 jmp	 SHORT $LN20@dump_ascii
$LN21@dump_ascii:

; 513  :             data = ((PyCompactUnicodeObject*)text) + 1;

  00085	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR text$[rsp]
  0008d	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00093	48 89 44 24 38	 mov	 QWORD PTR data$[rsp], rax
$LN20@dump_ascii:

; 514  :     }
; 515  :     else if (kind != PyUnicode_WCHAR_KIND) {

  00098	eb 5c		 jmp	 SHORT $LN19@dump_ascii
$LN22@dump_ascii:
  0009a	83 7c 24 20 00	 cmp	 DWORD PTR kind$[rsp], 0
  0009f	74 23		 je	 SHORT $LN18@dump_ascii

; 516  :         data = ((PyUnicodeObject *)text)->data.any;

  000a1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR text$[rsp]
  000a9	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  000b0	48 89 44 24 38	 mov	 QWORD PTR data$[rsp], rax

; 517  :         if (data == NULL)

  000b5	48 83 7c 24 38
	00		 cmp	 QWORD PTR data$[rsp], 0
  000bb	75 05		 jne	 SHORT $LN17@dump_ascii

; 518  :             return;

  000bd	e9 1b 02 00 00	 jmp	 $LN23@dump_ascii
$LN17@dump_ascii:

; 519  :     }
; 520  :     else {

  000c2	eb 32		 jmp	 SHORT $LN16@dump_ascii
$LN18@dump_ascii:

; 521  :         wstr = ((PyASCIIObject *)text)->wstr;

  000c4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR text$[rsp]
  000cc	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  000d0	48 89 44 24 50	 mov	 QWORD PTR wstr$[rsp], rax

; 522  :         if (wstr == NULL)

  000d5	48 83 7c 24 50
	00		 cmp	 QWORD PTR wstr$[rsp], 0
  000db	75 05		 jne	 SHORT $LN15@dump_ascii

; 523  :             return;

  000dd	e9 fb 01 00 00	 jmp	 $LN23@dump_ascii
$LN15@dump_ascii:

; 524  :         size = ((PyCompactUnicodeObject *)text)->wstr_length;

  000e2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR text$[rsp]
  000ea	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000f1	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax
$LN16@dump_ascii:
$LN19@dump_ascii:

; 525  :     }
; 526  : 
; 527  :     if (MAX_STRING_LENGTH < size) {

  000f6	48 81 7c 24 30
	f4 01 00 00	 cmp	 QWORD PTR size$[rsp], 500 ; 000001f4H
  000ff	7e 13		 jle	 SHORT $LN14@dump_ascii

; 528  :         size = MAX_STRING_LENGTH;

  00101	48 c7 44 24 30
	f4 01 00 00	 mov	 QWORD PTR size$[rsp], 500 ; 000001f4H

; 529  :         truncated = 1;

  0010a	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR truncated$[rsp], 1

; 530  :     }
; 531  :     else

  00112	eb 08		 jmp	 SHORT $LN13@dump_ascii
$LN14@dump_ascii:

; 532  :         truncated = 0;

  00114	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR truncated$[rsp], 0
$LN13@dump_ascii:

; 533  : 
; 534  :     for (i=0; i < size; i++) {

  0011c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00125	eb 0d		 jmp	 SHORT $LN12@dump_ascii
$LN11@dump_ascii:
  00127	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0012c	48 ff c0	 inc	 rax
  0012f	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN12@dump_ascii:
  00134	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  00139	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0013e	0f 8d 6f 01 00
	00		 jge	 $LN10@dump_ascii

; 535  :         if (kind != PyUnicode_WCHAR_KIND)

  00144	83 7c 24 20 00	 cmp	 DWORD PTR kind$[rsp], 0
  00149	74 5e		 je	 SHORT $LN9@dump_ascii

; 536  :             ch = PyUnicode_READ(kind, data, i);

  0014b	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00150	75 19		 jne	 SHORT $LN27@dump_ascii
  00152	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00157	48 8b 4c 24 38	 mov	 rcx, QWORD PTR data$[rsp]
  0015c	48 03 c8	 add	 rcx, rax
  0015f	48 8b c1	 mov	 rax, rcx
  00162	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00165	89 44 24 5c	 mov	 DWORD PTR tv130[rsp], eax
  00169	eb 34		 jmp	 SHORT $LN28@dump_ascii
$LN27@dump_ascii:
  0016b	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00170	75 14		 jne	 SHORT $LN25@dump_ascii
  00172	48 8b 44 24 38	 mov	 rax, QWORD PTR data$[rsp]
  00177	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0017c	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00180	89 44 24 60	 mov	 DWORD PTR tv129[rsp], eax
  00184	eb 11		 jmp	 SHORT $LN26@dump_ascii
$LN25@dump_ascii:
  00186	48 8b 44 24 38	 mov	 rax, QWORD PTR data$[rsp]
  0018b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00190	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00193	89 44 24 60	 mov	 DWORD PTR tv129[rsp], eax
$LN26@dump_ascii:
  00197	8b 44 24 60	 mov	 eax, DWORD PTR tv129[rsp]
  0019b	89 44 24 5c	 mov	 DWORD PTR tv130[rsp], eax
$LN28@dump_ascii:
  0019f	8b 44 24 5c	 mov	 eax, DWORD PTR tv130[rsp]
  001a3	89 44 24 48	 mov	 DWORD PTR ch$[rsp], eax

; 537  :         else

  001a7	eb 12		 jmp	 SHORT $LN8@dump_ascii
$LN9@dump_ascii:

; 538  :             ch = wstr[i];

  001a9	48 8b 44 24 50	 mov	 rax, QWORD PTR wstr$[rsp]
  001ae	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  001b3	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  001b7	89 44 24 48	 mov	 DWORD PTR ch$[rsp], eax
$LN8@dump_ascii:

; 539  :         if (ch < 128) {

  001bb	81 7c 24 48 80
	00 00 00	 cmp	 DWORD PTR ch$[rsp], 128	; 00000080H
  001c3	73 26		 jae	 SHORT $LN7@dump_ascii

; 540  :             char c = (char)ch;

  001c5	0f b6 44 24 48	 movzx	 eax, BYTE PTR ch$[rsp]
  001ca	88 44 24 58	 mov	 BYTE PTR c$20966[rsp], al

; 541  :             write(fd, &c, 1);

  001ce	41 b8 01 00 00
	00		 mov	 r8d, 1
  001d4	48 8d 54 24 58	 lea	 rdx, QWORD PTR c$20966[rsp]
  001d9	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  001e6	e9 c3 00 00 00	 jmp	 $LN6@dump_ascii
$LN7@dump_ascii:

; 542  :         }
; 543  :         else if (ch < 0xff) {

  001eb	81 7c 24 48 ff
	00 00 00	 cmp	 DWORD PTR ch$[rsp], 255	; 000000ffH
  001f3	73 3b		 jae	 SHORT $LN5@dump_ascii

; 544  :             PUTS(fd, "\\x");

  001f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02ICPOACMH@?2x?$AA@
  001fc	e8 00 00 00 00	 call	 strlen
  00201	44 8b c0	 mov	 r8d, eax
  00204	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02ICPOACMH@?2x?$AA@
  0020b	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00212	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 545  :             dump_hexadecimal(2, ch, fd);

  00218	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR fd$[rsp]
  00220	8b 54 24 48	 mov	 edx, DWORD PTR ch$[rsp]
  00224	b9 02 00 00 00	 mov	 ecx, 2
  00229	e8 00 00 00 00	 call	 dump_hexadecimal
  0022e	eb 7e		 jmp	 SHORT $LN4@dump_ascii
$LN5@dump_ascii:

; 546  :         }
; 547  :         else if (ch < 0xffff) {

  00230	81 7c 24 48 ff
	ff 00 00	 cmp	 DWORD PTR ch$[rsp], 65535 ; 0000ffffH
  00238	73 3b		 jae	 SHORT $LN3@dump_ascii

; 548  :             PUTS(fd, "\\u");

  0023a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DHFAHMIK@?2u?$AA@
  00241	e8 00 00 00 00	 call	 strlen
  00246	44 8b c0	 mov	 r8d, eax
  00249	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DHFAHMIK@?2u?$AA@
  00250	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00257	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 549  :             dump_hexadecimal(4, ch, fd);

  0025d	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR fd$[rsp]
  00265	8b 54 24 48	 mov	 edx, DWORD PTR ch$[rsp]
  00269	b9 04 00 00 00	 mov	 ecx, 4
  0026e	e8 00 00 00 00	 call	 dump_hexadecimal

; 550  :         }
; 551  :         else {

  00273	eb 39		 jmp	 SHORT $LN2@dump_ascii
$LN3@dump_ascii:

; 552  :             PUTS(fd, "\\U");

  00275	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KCNEFICI@?2U?$AA@
  0027c	e8 00 00 00 00	 call	 strlen
  00281	44 8b c0	 mov	 r8d, eax
  00284	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KCNEFICI@?2U?$AA@
  0028b	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 553  :             dump_hexadecimal(8, ch, fd);

  00298	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR fd$[rsp]
  002a0	8b 54 24 48	 mov	 edx, DWORD PTR ch$[rsp]
  002a4	b9 08 00 00 00	 mov	 ecx, 8
  002a9	e8 00 00 00 00	 call	 dump_hexadecimal
$LN2@dump_ascii:
$LN4@dump_ascii:
$LN6@dump_ascii:

; 554  :         }
; 555  :     }

  002ae	e9 74 fe ff ff	 jmp	 $LN11@dump_ascii
$LN10@dump_ascii:

; 556  :     if (truncated)

  002b3	83 7c 24 4c 00	 cmp	 DWORD PTR truncated$[rsp], 0
  002b8	74 23		 je	 SHORT $LN1@dump_ascii

; 557  :         PUTS(fd, "...");

  002ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03KHICJKCI@?4?4?4?$AA@
  002c1	e8 00 00 00 00	 call	 strlen
  002c6	44 8b c0	 mov	 r8d, eax
  002c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03KHICJKCI@?4?4?4?$AA@
  002d0	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  002d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN1@dump_ascii:
$LN23@dump_ascii:

; 558  : }

  002dd	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002e1	c3		 ret	 0
dump_ascii ENDP
_TEXT	ENDS
EXTRN	Py_hexdigits:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$dump_hexadecimal DD imagerel dump_hexadecimal
	DD	imagerel dump_hexadecimal+135
	DD	imagerel $unwind$dump_hexadecimal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dump_hexadecimal DD 011101H
	DD	08211H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dump_hexadecimal
_TEXT	SEGMENT
len$ = 32
buffer$ = 40
width$ = 80
value$ = 88
fd$ = 96
dump_hexadecimal PROC					; COMDAT

; 479  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 480  :     int len;
; 481  :     char buffer[sizeof(unsigned long) * 2 + 1];
; 482  :     len = 0;

  00011	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR len$[rsp], 0
$LN6@dump_hexad:
$LN3@dump_hexad:

; 483  :     do {
; 484  :         buffer[len] = Py_hexdigits[value & 15];

  00019	8b 44 24 58	 mov	 eax, DWORD PTR value$[rsp]
  0001d	83 e0 0f	 and	 eax, 15
  00020	8b c0		 mov	 eax, eax
  00022	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR len$[rsp]
  00027	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  0002e	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00032	88 44 0c 28	 mov	 BYTE PTR buffer$[rsp+rcx], al

; 485  :         value >>= 4;

  00036	8b 44 24 58	 mov	 eax, DWORD PTR value$[rsp]
  0003a	c1 e8 04	 shr	 eax, 4
  0003d	89 44 24 58	 mov	 DWORD PTR value$[rsp], eax

; 486  :         len++;

  00041	8b 44 24 20	 mov	 eax, DWORD PTR len$[rsp]
  00045	ff c0		 inc	 eax
  00047	89 44 24 20	 mov	 DWORD PTR len$[rsp], eax

; 487  :     } while (len < width || value);

  0004b	8b 44 24 50	 mov	 eax, DWORD PTR width$[rsp]
  0004f	39 44 24 20	 cmp	 DWORD PTR len$[rsp], eax
  00053	7c c4		 jl	 SHORT $LN3@dump_hexad
  00055	83 7c 24 58 00	 cmp	 DWORD PTR value$[rsp], 0
  0005a	75 bd		 jne	 SHORT $LN6@dump_hexad

; 488  :     reverse_string(buffer, len);

  0005c	48 63 44 24 20	 movsxd	 rax, DWORD PTR len$[rsp]
  00061	48 8b d0	 mov	 rdx, rax
  00064	48 8d 4c 24 28	 lea	 rcx, QWORD PTR buffer$[rsp]
  00069	e8 00 00 00 00	 call	 reverse_string

; 489  :     write(fd, buffer, len);

  0006e	44 8b 44 24 20	 mov	 r8d, DWORD PTR len$[rsp]
  00073	48 8d 54 24 28	 lea	 rdx, QWORD PTR buffer$[rsp]
  00078	8b 4c 24 60	 mov	 ecx, DWORD PTR fd$[rsp]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 490  : }

  00082	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00086	c3		 ret	 0
dump_hexadecimal ENDP
_TEXT	ENDS
PUBLIC	??_C@_04MPPNMCOK@?4?4?4?6?$AA@			; `string'
PUBLIC	??_C@_0CE@BJCCNHOB@unable?5to?5get?5the?5thread?5head?5st@ ; `string'
PUBLIC	_Py_DumpTracebackThreads
EXTRN	PyThreadState_Next:PROC
EXTRN	PyInterpreterState_ThreadHead:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DumpTracebackThreads DD imagerel $LN11
	DD	imagerel $LN11+257
	DD	imagerel $unwind$_Py_DumpTracebackThreads
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DumpTracebackThreads DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT ??_C@_04MPPNMCOK@?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_04MPPNMCOK@?4?4?4?6?$AA@ DB '...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BJCCNHOB@unable?5to?5get?5the?5thread?5head?5st@
CONST	SEGMENT
??_C@_0CE@BJCCNHOB@unable?5to?5get?5the?5thread?5head?5st@ DB 'unable to '
	DB	'get the thread head state', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DumpTracebackThreads
_TEXT	SEGMENT
tstate$ = 32
nthreads$ = 40
tv81 = 44
fd$ = 64
interp$ = 72
current_thread$ = 80
_Py_DumpTracebackThreads PROC				; COMDAT

; 649  : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 650  :     PyThreadState *tstate;
; 651  :     unsigned int nthreads;
; 652  : 
; 653  :     /* Get the current interpreter from the current thread */
; 654  :     tstate = PyInterpreterState_ThreadHead(interp);

  00012	48 8b 4c 24 48	 mov	 rcx, QWORD PTR interp$[rsp]
  00017	e8 00 00 00 00	 call	 PyInterpreterState_ThreadHead
  0001c	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 655  :     if (tstate == NULL)

  00021	48 83 7c 24 20
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  00027	75 0c		 jne	 SHORT $LN6@Py_DumpTra

; 656  :         return "unable to get the thread head state";

  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CE@BJCCNHOB@unable?5to?5get?5the?5thread?5head?5st@
  00030	e9 c7 00 00 00	 jmp	 $LN7@Py_DumpTra
$LN6@Py_DumpTra:

; 657  : 
; 658  :     /* Dump the traceback of each thread */
; 659  :     tstate = PyInterpreterState_ThreadHead(interp);

  00035	48 8b 4c 24 48	 mov	 rcx, QWORD PTR interp$[rsp]
  0003a	e8 00 00 00 00	 call	 PyInterpreterState_ThreadHead
  0003f	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 660  :     nthreads = 0;

  00044	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR nthreads$[rsp], 0
$LN5@Py_DumpTra:

; 661  :     do
; 662  :     {
; 663  :         if (nthreads != 0)

  0004c	83 7c 24 28 00	 cmp	 DWORD PTR nthreads$[rsp], 0
  00051	74 17		 je	 SHORT $LN2@Py_DumpTra

; 664  :             write(fd, "\n", 1);

  00053	41 b8 01 00 00
	00		 mov	 r8d, 1
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00060	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN2@Py_DumpTra:

; 665  :         if (nthreads >= MAX_NTHREADS) {

  0006a	83 7c 24 28 64	 cmp	 DWORD PTR nthreads$[rsp], 100 ; 00000064H
  0006f	72 22		 jb	 SHORT $LN1@Py_DumpTra

; 666  :             PUTS(fd, "...\n");

  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04MPPNMCOK@?4?4?4?6?$AA@
  00078	e8 00 00 00 00	 call	 strlen
  0007d	44 8b c0	 mov	 r8d, eax
  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MPPNMCOK@?4?4?4?6?$AA@
  00087	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 667  :             break;

  00091	eb 67		 jmp	 SHORT $LN3@Py_DumpTra
$LN1@Py_DumpTra:

; 668  :         }
; 669  :         write_thread_id(fd, tstate, tstate == current_thread);

  00093	48 8b 44 24 50	 mov	 rax, QWORD PTR current_thread$[rsp]
  00098	48 39 44 24 20	 cmp	 QWORD PTR tstate$[rsp], rax
  0009d	75 0a		 jne	 SHORT $LN9@Py_DumpTra
  0009f	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  000a7	eb 08		 jmp	 SHORT $LN10@Py_DumpTra
$LN9@Py_DumpTra:
  000a9	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN10@Py_DumpTra:
  000b1	44 8b 44 24 2c	 mov	 r8d, DWORD PTR tv81[rsp]
  000b6	48 8b 54 24 20	 mov	 rdx, QWORD PTR tstate$[rsp]
  000bb	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  000bf	e8 00 00 00 00	 call	 write_thread_id

; 670  :         dump_traceback(fd, tstate, 0);

  000c4	45 33 c0	 xor	 r8d, r8d
  000c7	48 8b 54 24 20	 mov	 rdx, QWORD PTR tstate$[rsp]
  000cc	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  000d0	e8 00 00 00 00	 call	 dump_traceback

; 671  :         tstate = PyThreadState_Next(tstate);

  000d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  000da	e8 00 00 00 00	 call	 PyThreadState_Next
  000df	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 672  :         nthreads++;

  000e4	8b 44 24 28	 mov	 eax, DWORD PTR nthreads$[rsp]
  000e8	ff c0		 inc	 eax
  000ea	89 44 24 28	 mov	 DWORD PTR nthreads$[rsp], eax

; 673  :     } while (tstate != NULL);

  000ee	48 83 7c 24 20
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  000f4	0f 85 52 ff ff
	ff		 jne	 $LN5@Py_DumpTra
$LN3@Py_DumpTra:

; 674  : 
; 675  :     return NULL;

  000fa	33 c0		 xor	 eax, eax
$LN7@Py_DumpTra:

; 676  : }

  000fc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00100	c3		 ret	 0
_Py_DumpTracebackThreads ENDP
_TEXT	ENDS
PUBLIC	??_C@_02NDKNKOCB@?3?6?$AA@			; `string'
PUBLIC	??_C@_09LAGPNDIK@Thread?50x?$AA@		; `string'
PUBLIC	??_C@_0BC@BABFAHCN@Current?5thread?50x?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$write_thread_id DD imagerel write_thread_id
	DD	imagerel write_thread_id+154
	DD	imagerel $unwind$write_thread_id
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$write_thread_id DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT ??_C@_02NDKNKOCB@?3?6?$AA@
CONST	SEGMENT
??_C@_02NDKNKOCB@?3?6?$AA@ DB ':', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LAGPNDIK@Thread?50x?$AA@
CONST	SEGMENT
??_C@_09LAGPNDIK@Thread?50x?$AA@ DB 'Thread 0x', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BABFAHCN@Current?5thread?50x?$AA@
CONST	SEGMENT
??_C@_0BC@BABFAHCN@Current?5thread?50x?$AA@ DB 'Current thread 0x', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT write_thread_id
_TEXT	SEGMENT
fd$ = 48
tstate$ = 56
is_current$ = 64
write_thread_id PROC					; COMDAT

; 637  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 638  :     if (is_current)

  00012	83 7c 24 40 00	 cmp	 DWORD PTR is_current$[rsp], 0
  00017	74 22		 je	 SHORT $LN2@write_thre

; 639  :         PUTS(fd, "Current thread 0x");

  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BABFAHCN@Current?5thread?50x?$AA@
  00020	e8 00 00 00 00	 call	 strlen
  00025	44 8b c0	 mov	 r8d, eax
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@BABFAHCN@Current?5thread?50x?$AA@
  0002f	8b 4c 24 30	 mov	 ecx, DWORD PTR fd$[rsp]
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 640  :     else

  00039	eb 20		 jmp	 SHORT $LN1@write_thre
$LN2@write_thre:

; 641  :         PUTS(fd, "Thread 0x");

  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09LAGPNDIK@Thread?50x?$AA@
  00042	e8 00 00 00 00	 call	 strlen
  00047	44 8b c0	 mov	 r8d, eax
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LAGPNDIK@Thread?50x?$AA@
  00051	8b 4c 24 30	 mov	 ecx, DWORD PTR fd$[rsp]
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
$LN1@write_thre:

; 642  :     dump_hexadecimal(sizeof(long)*2, (unsigned long)tstate->thread_id, fd);

  0005b	44 8b 44 24 30	 mov	 r8d, DWORD PTR fd$[rsp]
  00060	48 8b 44 24 38	 mov	 rax, QWORD PTR tstate$[rsp]
  00065	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [rax+144]
  0006b	b9 08 00 00 00	 mov	 ecx, 8
  00070	e8 00 00 00 00	 call	 dump_hexadecimal

; 643  :     PUTS(fd, ":\n");

  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02NDKNKOCB@?3?6?$AA@
  0007c	e8 00 00 00 00	 call	 strlen
  00081	44 8b c0	 mov	 r8d, eax
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02NDKNKOCB@?3?6?$AA@
  0008b	8b 4c 24 30	 mov	 ecx, DWORD PTR fd$[rsp]
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write

; 644  : }

  00095	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00099	c3		 ret	 0
write_thread_id ENDP
_TEXT	ENDS
END
