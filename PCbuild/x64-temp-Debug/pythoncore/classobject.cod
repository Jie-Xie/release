; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@NKEHLIOI@instancemethod?$AA@		; `string'
PUBLIC	??_C@_06GABBCIBA@method?$AA@			; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_0CI@GHOOOEEG@the?5instance?5to?5which?5a?5method?5i@ ; `string'
PUBLIC	??_C@_08KFOOMKEG@__self__?$AA@			; `string'
PUBLIC	??_C@_0DH@EAMKJIGG@the?5function?5?$CIor?5other?5callable?$CJ@ ; `string'
PUBLIC	??_C@_08NOMANIOG@__func__?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	PyMethod_Type
PUBLIC	PyInstanceMethod_Type
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
numfree	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0P@NKEHLIOI@instancemethod?$AA@
CONST	SEGMENT
??_C@_0P@NKEHLIOI@instancemethod?$AA@ DB 'instancemethod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GABBCIBA@method?$AA@
CONST	SEGMENT
??_C@_06GABBCIBA@method?$AA@ DB 'method', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
method_memberlist DQ FLAT:??_C@_08NOMANIOG@__func__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	07H
	ORG $+4
	DQ	FLAT:??_C@_0DH@EAMKJIGG@the?5function?5?$CIor?5other?5callable?$CJ@
	DQ	FLAT:??_C@_08KFOOMKEG@__self__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	07H
	ORG $+4
	DQ	FLAT:??_C@_0CI@GHOOOEEG@the?5instance?5to?5which?5a?5method?5i@
	DQ	0000000000000000H
	ORG $+32
instancemethod_doc DB 'instancemethod(function)', 0aH, 0aH, 'Bind a funct'
	DB	'ion to a class.', 00H
	ORG $+2
method_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:method_get_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
method_doc DB	'method(function, instance)', 0aH, 0aH, 'Create a bound i'
	DB	'nstance method object.', 00H
	ORG $+13
PyMethod_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06GABBCIBA@method?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:method_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_hash
	DQ	FLAT:method_call
	DQ	0000000000000000H
	DQ	FLAT:method_getattro
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:method_doc
	DQ	FLAT:method_traverse
	DQ	0000000000000000H
	DQ	FLAT:method_richcompare
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_memberlist
	DQ	FLAT:method_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_descr_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_new
	ORG $+72
instancemethod_memberlist DQ FLAT:??_C@_08NOMANIOG@__func__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	07H
	ORG $+4
	DQ	FLAT:??_C@_0DH@EAMKJIGG@the?5function?5?$CIor?5other?5callable?$CJ@
	DQ	0000000000000000H
	ORG $+32
instancemethod_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:instancemethod_get_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyInstanceMethod_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@NKEHLIOI@instancemethod?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_call
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_getattro
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:instancemethod_doc
	DQ	FLAT:instancemethod_traverse
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_memberlist
	DQ	FLAT:instancemethod_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_descr_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:instancemethod_new
	ORG $+72
_DATA	ENDS
;	COMDAT ??_C@_0CI@GHOOOEEG@the?5instance?5to?5which?5a?5method?5i@
CONST	SEGMENT
??_C@_0CI@GHOOOEEG@the?5instance?5to?5which?5a?5method?5i@ DB 'the instan'
	DB	'ce to which a method is bound', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFOOMKEG@__self__?$AA@
CONST	SEGMENT
??_C@_08KFOOMKEG@__self__?$AA@ DB '__self__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@EAMKJIGG@the?5function?5?$CIor?5other?5callable?$CJ@
CONST	SEGMENT
??_C@_0DH@EAMKJIGG@the?5function?5?$CIor?5other?5callable?$CJ@ DB 'the fu'
	DB	'nction (or other callable) implementing a method', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NOMANIOG@__func__?$AA@
CONST	SEGMENT
??_C@_08NOMANIOG@__func__?$AA@ DB '__func__', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
PyId___name__ DQ 0000000000000000H
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@ ; `string'
PUBLIC	PyMethod_Function
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\classobject.c
pdata	SEGMENT
$pdata$PyMethod_Function DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$PyMethod_Function
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMethod_Function DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@ DB '..\Objects\clas'
	DB	'sobject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyMethod_Function
_TEXT	SEGMENT
im$ = 48
PyMethod_Function PROC					; COMDAT

; 21   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 22   :     if (!PyMethod_Check(im)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyMethod_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR im$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyMethod_F

; 23   :         PyErr_BadInternalCall();

  0001b	ba 17 00 00 00	 mov	 edx, 23
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 24   :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 09		 jmp	 SHORT $LN2@PyMethod_F
$LN1@PyMethod_F:

; 25   :     }
; 26   :     return ((PyMethodObject *)im)->im_func;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR im$[rsp]
  00035	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
$LN2@PyMethod_F:

; 27   : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
PyMethod_Function ENDP
_TEXT	ENDS
PUBLIC	PyMethod_Self
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMethod_Self DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$PyMethod_Self
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMethod_Self DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyMethod_Self
_TEXT	SEGMENT
im$ = 48
PyMethod_Self PROC					; COMDAT

; 31   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 32   :     if (!PyMethod_Check(im)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyMethod_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR im$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyMethod_S

; 33   :         PyErr_BadInternalCall();

  0001b	ba 21 00 00 00	 mov	 edx, 33			; 00000021H
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 34   :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 09		 jmp	 SHORT $LN2@PyMethod_S
$LN1@PyMethod_S:

; 35   :     }
; 36   :     return ((PyMethodObject *)im)->im_self;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR im$[rsp]
  00035	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
$LN2@PyMethod_S:

; 37   : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
PyMethod_Self ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0N@MFMAGHMM@PyMethod_New?$AA@		; `string'
PUBLIC	_Py_IncRef
PUBLIC	PyMethod_New
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_Py_PXCTX:PROC
_BSS	SEGMENT
	ALIGN	8

free_list DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMethod_New DD imagerel $LN20
	DD	imagerel $LN20+517
	DD	imagerel $unwind$PyMethod_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMethod_New DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MFMAGHMM@PyMethod_New?$AA@
CONST	SEGMENT
??_C@_0N@MFMAGHMM@PyMethod_New?$AA@ DB 'PyMethod_New', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyMethod_New
_TEXT	SEGMENT
im$ = 48
g$20376 = 56
tv80 = 64
tv136 = 72
func$ = 96
self$ = 104
PyMethod_New PROC					; COMDAT

; 46   : {

$LN20:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 47   :     register PyMethodObject *im;
; 48   :     if (self == NULL) {

  0000e	48 83 7c 24 68
	00		 cmp	 QWORD PTR self$[rsp], 0
  00014	75 18		 jne	 SHORT $LN13@PyMethod_N

; 49   :         PyErr_BadInternalCall();

  00016	ba 31 00 00 00	 mov	 edx, 49			; 00000031H
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00022	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 50   :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	e9 d2 01 00 00	 jmp	 $LN14@PyMethod_N
$LN13@PyMethod_N:

; 51   :     }
; 52   :     im = free_list;

  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list
  00035	48 89 44 24 30	 mov	 QWORD PTR im$[rsp], rax

; 53   :     if (!Py_PXCTX && im != NULL) {

  0003a	e8 00 00 00 00	 call	 _Py_PXCTX
  0003f	85 c0		 test	 eax, eax
  00041	75 39		 jne	 SHORT $LN12@PyMethod_N
  00043	48 83 7c 24 30
	00		 cmp	 QWORD PTR im$[rsp], 0
  00049	74 31		 je	 SHORT $LN12@PyMethod_N

; 54   :         free_list = (PyMethodObject *)(im->im_self);

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR im$[rsp]
  00050	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00054	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax

; 55   :         PyObject_INIT((PyObject *)im, &PyMethod_Type);

  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyMethod_Type
  00062	48 8b 4c 24 30	 mov	 rcx, QWORD PTR im$[rsp]
  00067	e8 00 00 00 00	 call	 PyObject_INIT

; 56   :         numfree--;

  0006c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  00072	ff c8		 dec	 eax
  00074	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 57   :     }
; 58   :     else {

  0007a	eb 46		 jmp	 SHORT $LN11@PyMethod_N
$LN12@PyMethod_N:

; 59   :         im = PyObject_GC_New(PyMethodObject, &PyMethod_Type);

  0007c	e8 00 00 00 00	 call	 _Py_PXCTX
  00081	85 c0		 test	 eax, eax
  00083	74 13		 je	 SHORT $LN16@PyMethod_N
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMethod_Type
  0008c	e8 00 00 00 00	 call	 _PxObject_New
  00091	48 89 44 24 40	 mov	 QWORD PTR tv80[rsp], rax
  00096	eb 11		 jmp	 SHORT $LN17@PyMethod_N
$LN16@PyMethod_N:
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMethod_Type
  0009f	e8 00 00 00 00	 call	 _PyObject_GC_New
  000a4	48 89 44 24 40	 mov	 QWORD PTR tv80[rsp], rax
$LN17@PyMethod_N:
  000a9	48 8b 44 24 40	 mov	 rax, QWORD PTR tv80[rsp]
  000ae	48 89 44 24 30	 mov	 QWORD PTR im$[rsp], rax

; 60   :         if (im == NULL)

  000b3	48 83 7c 24 30
	00		 cmp	 QWORD PTR im$[rsp], 0
  000b9	75 07		 jne	 SHORT $LN10@PyMethod_N

; 61   :             return NULL;

  000bb	33 c0		 xor	 eax, eax
  000bd	e9 3e 01 00 00	 jmp	 $LN14@PyMethod_N
$LN10@PyMethod_N:
$LN11@PyMethod_N:

; 62   :     }
; 63   :     im->im_weakreflist = NULL;

  000c2	48 8b 44 24 30	 mov	 rax, QWORD PTR im$[rsp]
  000c7	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 64   :     Py_INCREF(func);

  000cf	48 8b 4c 24 60	 mov	 rcx, QWORD PTR func$[rsp]
  000d4	e8 00 00 00 00	 call	 _Py_IncRef

; 65   :     im->im_func = func;

  000d9	48 8b 44 24 30	 mov	 rax, QWORD PTR im$[rsp]
  000de	48 8b 4c 24 60	 mov	 rcx, QWORD PTR func$[rsp]
  000e3	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN9@PyMethod_N:

; 66   :     Py_XINCREF(self);

  000e7	48 83 7c 24 68
	00		 cmp	 QWORD PTR self$[rsp], 0
  000ed	74 0a		 je	 SHORT $LN6@PyMethod_N
  000ef	48 8b 4c 24 68	 mov	 rcx, QWORD PTR self$[rsp]
  000f4	e8 00 00 00 00	 call	 _Py_IncRef
$LN6@PyMethod_N:
  000f9	33 c0		 xor	 eax, eax
  000fb	85 c0		 test	 eax, eax
  000fd	75 e8		 jne	 SHORT $LN9@PyMethod_N

; 67   :     im->im_self = self;

  000ff	48 8b 44 24 30	 mov	 rax, QWORD PTR im$[rsp]
  00104	48 8b 4c 24 68	 mov	 rcx, QWORD PTR self$[rsp]
  00109	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 68   :     _PyObject_GC_TRACK(im);

  0010d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00115	4c 8b 4c 24 30	 mov	 r9, QWORD PTR im$[rsp]
  0011a	41 b8 44 00 00
	00		 mov	 r8d, 68			; 00000044H
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MFMAGHMM@PyMethod_New?$AA@
  0012e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00133	85 c0		 test	 eax, eax
  00135	0f 85 c0 00 00
	00		 jne	 $LN5@PyMethod_N
$LN4@PyMethod_N:
  0013b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00143	4c 8b 4c 24 30	 mov	 r9, QWORD PTR im$[rsp]
  00148	41 b8 44 00 00
	00		 mov	 r8d, 68			; 00000044H
  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MFMAGHMM@PyMethod_New?$AA@
  0015c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00161	85 c0		 test	 eax, eax
  00163	74 0b		 je	 SHORT $LN18@PyMethod_N
  00165	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv136[rsp], 0
  0016e	eb 0e		 jmp	 SHORT $LN19@PyMethod_N
$LN18@PyMethod_N:
  00170	48 8b 44 24 30	 mov	 rax, QWORD PTR im$[rsp]
  00175	48 83 e8 18	 sub	 rax, 24
  00179	48 89 44 24 48	 mov	 QWORD PTR tv136[rsp], rax
$LN19@PyMethod_N:
  0017e	48 8b 44 24 48	 mov	 rax, QWORD PTR tv136[rsp]
  00183	48 89 44 24 38	 mov	 QWORD PTR g$20376[rsp], rax
  00188	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20376[rsp]
  0018d	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00192	74 0c		 je	 SHORT $LN1@PyMethod_N
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  0019b	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyMethod_N:
  001a0	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20376[rsp]
  001a5	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  001ad	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20376[rsp]
  001b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  001b9	48 89 08	 mov	 QWORD PTR [rax], rcx
  001bc	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20376[rsp]
  001c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  001c8	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001cc	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001d0	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20376[rsp]
  001d5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001d9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20376[rsp]
  001de	48 89 08	 mov	 QWORD PTR [rax], rcx
  001e1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  001e8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20376[rsp]
  001ed	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001f1	33 c0		 xor	 eax, eax
  001f3	85 c0		 test	 eax, eax
  001f5	0f 85 40 ff ff
	ff		 jne	 $LN4@PyMethod_N
$LN5@PyMethod_N:

; 69   :     return (PyObject *)im;

  001fb	48 8b 44 24 30	 mov	 rax, QWORD PTR im$[rsp]
$LN14@PyMethod_N:

; 70   : }

  00200	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00204	c3		 ret	 0
PyMethod_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	_Py_NewReference:PROC
EXTRN	_PxObject_Init:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyObject_INIT DD imagerel PyObject_INIT
	DD	imagerel PyObject_INIT+84
	DD	imagerel $unwind$PyObject_INIT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_INIT
_TEXT	SEGMENT
op$ = 48
tp$ = 56
PyObject_INIT PROC					; COMDAT

; 236  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 237  :     Px_RETURN(_PxObject_Init(op, tp))

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 11		 je	 SHORT $LN1@PyObject_I
  00017	48 8b 54 24 38	 mov	 rdx, QWORD PTR tp$[rsp]
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00021	e8 00 00 00 00	 call	 _PxObject_Init
  00026	eb 27		 jmp	 SHORT $LN2@PyObject_I
$LN1@PyObject_I:

; 238  :     Py_TYPE(op) = tp;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  00032	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 239  :     _PyObject_InitHead(op);

  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0003b	e8 00 00 00 00	 call	 _PyObject_InitHead

; 240  :     _Py_NewReference(op);

  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00045	e8 00 00 00 00	 call	 _Py_NewReference

; 241  :     return op;

  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN2@PyObject_I:

; 242  : }

  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00053	c3		 ret	 0
PyObject_INIT ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ ; `string'
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_InitHead DD imagerel _PyObject_InitHead
	DD	imagerel _PyObject_InitHead+182
	DD	imagerel $unwind$_PyObject_InitHead
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_InitHead DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
CONST	SEGMENT
??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H
	DB	'p', 00H, 'y', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'e', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'o'
	DB	00H, 'b', 00H, 'j', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 48
_PyObject_InitHead PROC					; COMDAT

; 215  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 216  :     assert(Py_TYPE(op));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  00013	75 1c		 jne	 SHORT $LN3@PyObject_I@2
  00015	41 b8 d8 00 00
	00		 mov	 r8d, 216		; 000000d8H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002f	33 c0		 xor	 eax, eax
$LN3@PyObject_I@2:

; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00036	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 218  :     op->px    = _Py_NOT_PARALLEL;

  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00048	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00052	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 219  :     op->slist_entry.Next = NULL;

  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0005b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00068	48 c7 40 20 01
	00 00 00	 mov	 QWORD PTR [rax+32], 1

; 221  :     op->srw_lock  = NULL;

  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00075	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 222  :     op->event     = NULL;

  0007d	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 223  :     op->orig_type = NULL;

  0008a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0008f	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;

  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0009c	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 226  :     op->_ob_prev = NULL;

  000a4	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000a9	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;
; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;
; 230  : #endif
; 231  : }

  000b1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b5	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttr:PROC
EXTRN	PyUnicode_InternFromString:PROC
_BSS	SEGMENT
?docstr@?1??method_get_doc@@9@9 DQ 01H DUP (?)		; `method_get_doc'::`2'::docstr
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\classobject.c
pdata	SEGMENT
$pdata$method_get_doc DD imagerel method_get_doc
	DD	imagerel method_get_doc+83
	DD	imagerel $unwind$method_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_get_doc DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT method_get_doc
_TEXT	SEGMENT
im$ = 48
context$ = 56
method_get_doc PROC					; COMDAT

; 93   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 94   :     static PyObject *docstr;
; 95   :     if (docstr == NULL) {

  0000e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?docstr@?1??method_get_doc@@9@9, 0
  00016	75 21		 jne	 SHORT $LN2@method_get

; 96   :         docstr= PyUnicode_InternFromString("__doc__");

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  0001f	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00024	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?docstr@?1??method_get_doc@@9@9, rax

; 97   :         if (docstr == NULL)

  0002b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?docstr@?1??method_get_doc@@9@9, 0
  00033	75 04		 jne	 SHORT $LN1@method_get

; 98   :             return NULL;

  00035	33 c0		 xor	 eax, eax
  00037	eb 15		 jmp	 SHORT $LN3@method_get
$LN1@method_get:
$LN2@method_get:

; 99   :     }
; 100  :     return PyObject_GetAttr(im->im_func, docstr);

  00039	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?docstr@?1??method_get_doc@@9@9
  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR im$[rsp]
  00045	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00049	e8 00 00 00 00	 call	 PyObject_GetAttr
$LN3@method_get:

; 101  : }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
method_get_doc ENDP
_TEXT	ENDS
EXTRN	_PyType_Lookup:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_getattro DD imagerel method_getattro
	DD	imagerel method_getattro+205
	DD	imagerel $unwind$method_getattro
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_getattro DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT method_getattro
_TEXT	SEGMENT
im$ = 32
descr$ = 40
tp$ = 48
f$20430 = 56
obj$ = 80
name$ = 88
method_getattro PROC					; COMDAT

; 110  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 111  :     PyMethodObject *im = (PyMethodObject *)obj;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR im$[rsp], rax

; 112  :     PyTypeObject *tp = obj->ob_type;

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  0001d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00021	48 89 44 24 30	 mov	 QWORD PTR tp$[rsp], rax

; 113  :     PyObject *descr = NULL;

  00026	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR descr$[rsp], 0

; 114  : 
; 115  :     {
; 116  :         if (tp->tp_dict == NULL) {

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR tp$[rsp]
  00034	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  0003c	75 12		 jne	 SHORT $LN5@method_get@2

; 117  :             if (PyType_Ready(tp) < 0)

  0003e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tp$[rsp]
  00043	e8 00 00 00 00	 call	 PyType_Ready
  00048	85 c0		 test	 eax, eax
  0004a	7d 04		 jge	 SHORT $LN4@method_get@2

; 118  :                 return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	eb 78		 jmp	 SHORT $LN6@method_get@2
$LN4@method_get@2:
$LN5@method_get@2:

; 119  :         }
; 120  :         descr = _PyType_Lookup(tp, name);

  00050	48 8b 54 24 58	 mov	 rdx, QWORD PTR name$[rsp]
  00055	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tp$[rsp]
  0005a	e8 00 00 00 00	 call	 _PyType_Lookup
  0005f	48 89 44 24 28	 mov	 QWORD PTR descr$[rsp], rax

; 121  :     }
; 122  : 
; 123  :     if (descr != NULL) {

  00064	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  0006a	74 49		 je	 SHORT $LN3@method_get@2

; 124  :         descrgetfunc f = TP_DESCR_GET(descr->ob_type);

  0006c	48 8b 44 24 28	 mov	 rax, QWORD PTR descr$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	48 8b 80 68 01
	00 00		 mov	 rax, QWORD PTR [rax+360]
  0007c	48 89 44 24 38	 mov	 QWORD PTR f$20430[rsp], rax

; 125  :         if (f != NULL)

  00081	48 83 7c 24 38
	00		 cmp	 QWORD PTR f$20430[rsp], 0
  00087	74 1b		 je	 SHORT $LN2@method_get@2

; 126  :             return f(descr, obj, (PyObject *)obj->ob_type);

  00089	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  0008e	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR obj$[rsp]
  00097	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  0009c	ff 54 24 38	 call	 QWORD PTR f$20430[rsp]
  000a0	eb 26		 jmp	 SHORT $LN6@method_get@2

; 127  :         else {

  000a2	eb 11		 jmp	 SHORT $LN1@method_get@2
$LN2@method_get@2:

; 128  :             Py_INCREF(descr);

  000a4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  000a9	e8 00 00 00 00	 call	 _Py_IncRef

; 129  :             return descr;

  000ae	48 8b 44 24 28	 mov	 rax, QWORD PTR descr$[rsp]
  000b3	eb 13		 jmp	 SHORT $LN6@method_get@2
$LN1@method_get@2:
$LN3@method_get@2:

; 130  :         }
; 131  :     }
; 132  : 
; 133  :     return PyObject_GetAttr(im->im_func, name);

  000b5	48 8b 54 24 58	 mov	 rdx, QWORD PTR name$[rsp]
  000ba	48 8b 44 24 20	 mov	 rax, QWORD PTR im$[rsp]
  000bf	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000c3	e8 00 00 00 00	 call	 PyObject_GetAttr
$LN6@method_get@2:

; 134  : }

  000c8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000cc	c3		 ret	 0
method_getattro ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@ECOLINDM@self?5must?5not?5be?5None?$AA@ ; `string'
PUBLIC	??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@ ; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyCallable_Check:PROC
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_new DD imagerel method_new
	DD	imagerel method_new+206
	DD	imagerel $unwind$method_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_new DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0BG@ECOLINDM@self?5must?5not?5be?5None?$AA@
CONST	SEGMENT
??_C@_0BG@ECOLINDM@self?5must?5not?5be?5None?$AA@ DB 'self must not be No'
	DB	'ne', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@
CONST	SEGMENT
??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@ DB 'first arg'
	DB	'ument must be callable', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT method_new
_TEXT	SEGMENT
self$ = 48
func$ = 56
type$ = 80
args$ = 88
kw$ = 96
method_new PROC						; COMDAT

; 143  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 144  :     PyObject *func;
; 145  :     PyObject *self;
; 146  : 
; 147  :     if (!_PyArg_NoKeywords("method", kw))

  00013	48 8b 54 24 60	 mov	 rdx, QWORD PTR kw$[rsp]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GABBCIBA@method?$AA@
  0001f	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00024	85 c0		 test	 eax, eax
  00026	75 07		 jne	 SHORT $LN5@method_new

; 148  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	e9 9a 00 00 00	 jmp	 $LN6@method_new
$LN5@method_new:

; 149  :     if (!PyArg_UnpackTuple(args, "method", 2, 2,
; 150  :                           &func, &self))

  0002f	48 8d 44 24 30	 lea	 rax, QWORD PTR self$[rsp]
  00034	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00039	48 8d 44 24 38	 lea	 rax, QWORD PTR func$[rsp]
  0003e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00043	41 b9 02 00 00
	00		 mov	 r9d, 2
  00049	41 b8 02 00 00
	00		 mov	 r8d, 2
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GABBCIBA@method?$AA@
  00056	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0005b	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00060	85 c0		 test	 eax, eax
  00062	75 04		 jne	 SHORT $LN4@method_new

; 151  :         return NULL;

  00064	33 c0		 xor	 eax, eax
  00066	eb 61		 jmp	 SHORT $LN6@method_new
$LN4@method_new:

; 152  :     if (!PyCallable_Check(func)) {

  00068	48 8b 4c 24 38	 mov	 rcx, QWORD PTR func$[rsp]
  0006d	e8 00 00 00 00	 call	 PyCallable_Check
  00072	85 c0		 test	 eax, eax
  00074	75 17		 jne	 SHORT $LN3@method_new

; 153  :         PyErr_SetString(PyExc_TypeError,
; 154  :                         "first argument must be callable");

  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@
  0007d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00084	e8 00 00 00 00	 call	 PyErr_SetString

; 155  :         return NULL;

  00089	33 c0		 xor	 eax, eax
  0008b	eb 3c		 jmp	 SHORT $LN6@method_new
$LN3@method_new:

; 156  :     }
; 157  :     if (self == NULL || self == Py_None) {

  0008d	48 83 7c 24 30
	00		 cmp	 QWORD PTR self$[rsp], 0
  00093	74 0e		 je	 SHORT $LN1@method_new
  00095	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0009c	48 39 44 24 30	 cmp	 QWORD PTR self$[rsp], rax
  000a1	75 17		 jne	 SHORT $LN2@method_new
$LN1@method_new:

; 158  :         PyErr_SetString(PyExc_TypeError,
; 159  :             "self must not be None");

  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@ECOLINDM@self?5must?5not?5be?5None?$AA@
  000aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000b1	e8 00 00 00 00	 call	 PyErr_SetString

; 160  :         return NULL;

  000b6	33 c0		 xor	 eax, eax
  000b8	eb 0f		 jmp	 SHORT $LN6@method_new
$LN2@method_new:

; 161  :     }
; 162  : 
; 163  :     return PyMethod_New(func, self);

  000ba	48 8b 54 24 30	 mov	 rdx, QWORD PTR self$[rsp]
  000bf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR func$[rsp]
  000c4	e8 00 00 00 00	 call	 PyMethod_New
$LN6@method_new:

; 164  : }

  000c9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000cd	c3		 ret	 0
method_new ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_1DC@NCFJIGPE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAl?$AAa?$AAs?$AAs?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0P@BCFEBJHG@method_dealloc?$AA@		; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_dealloc DD imagerel method_dealloc
	DD	imagerel method_dealloc+424
	DD	imagerel $unwind$method_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@NCFJIGPE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAl?$AAa?$AAs?$AAs?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@NCFJIGPE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAl?$AAa?$AAs?$AAs?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BCFEBJHG@method_dealloc?$AA@
CONST	SEGMENT
??_C@_0P@BCFEBJHG@method_dealloc?$AA@ DB 'method_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT method_dealloc
_TEXT	SEGMENT
g$20470 = 48
tv85 = 56
im$ = 80
method_dealloc PROC					; COMDAT

; 168  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 169  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN12@method_dea
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 a9 00 00
	00		 mov	 r8d, 169		; 000000a9H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@BCFEBJHG@method_dealloc?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN12@method_dea:

; 170  :     _PyObject_GC_UNTRACK(im);

  0002e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00036	4c 8b 4c 24 50	 mov	 r9, QWORD PTR im$[rsp]
  0003b	41 b8 aa 00 00
	00		 mov	 r8d, 170		; 000000aaH
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@BCFEBJHG@method_dealloc?$AA@
  0004f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00054	85 c0		 test	 eax, eax
  00056	0f 85 c1 00 00
	00		 jne	 $LN11@method_dea
$LN10@method_dea:
  0005c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00064	4c 8b 4c 24 50	 mov	 r9, QWORD PTR im$[rsp]
  00069	41 b8 aa 00 00
	00		 mov	 r8d, 170		; 000000aaH
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@BCFEBJHG@method_dealloc?$AA@
  0007d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00082	85 c0		 test	 eax, eax
  00084	74 0b		 je	 SHORT $LN15@method_dea
  00086	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv85[rsp], 0
  0008f	eb 0e		 jmp	 SHORT $LN16@method_dea
$LN15@method_dea:
  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR im$[rsp]
  00096	48 83 e8 18	 sub	 rax, 24
  0009a	48 89 44 24 38	 mov	 QWORD PTR tv85[rsp], rax
$LN16@method_dea:
  0009f	48 8b 44 24 38	 mov	 rax, QWORD PTR tv85[rsp]
  000a4	48 89 44 24 30	 mov	 QWORD PTR g$20470[rsp], rax
  000a9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20470[rsp]
  000ae	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000b3	75 1c		 jne	 SHORT $LN17@method_dea
  000b5	41 b8 aa 00 00
	00		 mov	 r8d, 170		; 000000aaH
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@NCFJIGPE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAl?$AAa?$AAs?$AAs?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000cf	33 c0		 xor	 eax, eax
$LN17@method_dea:
  000d1	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20470[rsp]
  000d6	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000de	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20470[rsp]
  000e3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20470[rsp]
  000ec	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ef	48 89 08	 mov	 QWORD PTR [rax], rcx
  000f2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20470[rsp]
  000f7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000fa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20470[rsp]
  000ff	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00103	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00107	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20470[rsp]
  0010c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00113	33 c0		 xor	 eax, eax
  00115	85 c0		 test	 eax, eax
  00117	0f 85 3f ff ff
	ff		 jne	 $LN10@method_dea
$LN11@method_dea:

; 171  :     if (im->im_weakreflist != NULL)

  0011d	48 8b 44 24 50	 mov	 rax, QWORD PTR im$[rsp]
  00122	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00127	74 0a		 je	 SHORT $LN7@method_dea

; 172  :         PyObject_ClearWeakRefs((PyObject *)im);

  00129	48 8b 4c 24 50	 mov	 rcx, QWORD PTR im$[rsp]
  0012e	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN7@method_dea:

; 173  :     Py_DECREF(im->im_func);

  00133	48 8b 44 24 50	 mov	 rax, QWORD PTR im$[rsp]
  00138	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0013c	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@method_dea:

; 174  :     Py_XDECREF(im->im_self);

  00141	48 8b 44 24 50	 mov	 rax, QWORD PTR im$[rsp]
  00146	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0014b	74 0e		 je	 SHORT $LN3@method_dea
  0014d	48 8b 44 24 50	 mov	 rax, QWORD PTR im$[rsp]
  00152	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00156	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@method_dea:
  0015b	33 c0		 xor	 eax, eax
  0015d	85 c0		 test	 eax, eax
  0015f	75 e0		 jne	 SHORT $LN6@method_dea

; 175  :     if (numfree < PyMethod_MAXFREELIST) {

  00161	81 3d 00 00 00
	00 00 01 00 00	 cmp	 DWORD PTR numfree, 256	; 00000100H
  0016b	7d 2c		 jge	 SHORT $LN2@method_dea

; 176  :         im->im_self = (PyObject *)free_list;

  0016d	48 8b 44 24 50	 mov	 rax, QWORD PTR im$[rsp]
  00172	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR free_list
  00179	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 177  :         free_list = im;

  0017d	48 8b 44 24 50	 mov	 rax, QWORD PTR im$[rsp]
  00182	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax

; 178  :         numfree++;

  00189	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  0018f	ff c0		 inc	 eax
  00191	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 179  :     }
; 180  :     else {

  00197	eb 0a		 jmp	 SHORT $LN1@method_dea
$LN2@method_dea:

; 181  :         PyObject_GC_Del(im);

  00199	48 8b 4c 24 50	 mov	 rcx, QWORD PTR im$[rsp]
  0019e	e8 00 00 00 00	 call	 PyObject_GC_Del
$LN1@method_dea:

; 182  :     }
; 183  : }

  001a3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001a7	c3		 ret	 0
method_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyObject_RichCompareBool:PROC
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\objects\classobject.c
pdata	SEGMENT
$pdata$method_richcompare DD imagerel method_richcompare
	DD	imagerel method_richcompare+384
	DD	imagerel $unwind$method_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_richcompare DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT method_richcompare
_TEXT	SEGMENT
res$ = 32
a$ = 40
b$ = 48
eq$ = 56
tv85 = 60
tv95 = 64
tv129 = 72
self$ = 96
other$ = 104
op$ = 112
method_richcompare PROC					; COMDAT

; 187  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 188  :     PyMethodObject *a, *b;
; 189  :     PyObject *res;
; 190  :     int eq;
; 191  : 
; 192  :     if ((op != Py_EQ && op != Py_NE) ||
; 193  :         !PyMethod_Check(self) ||
; 194  :         !PyMethod_Check(other))

  00013	83 7c 24 70 02	 cmp	 DWORD PTR op$[rsp], 2
  00018	74 07		 je	 SHORT $LN8@method_ric
  0001a	83 7c 24 70 03	 cmp	 DWORD PTR op$[rsp], 3
  0001f	75 24		 jne	 SHORT $LN9@method_ric
$LN8@method_ric:
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyMethod_Type
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0002d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00031	75 12		 jne	 SHORT $LN9@method_ric
  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyMethod_Type
  0003a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  0003f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00043	74 18		 je	 SHORT $LN10@method_ric
$LN9@method_ric:

; 195  :     {
; 196  :         Py_RETURN_NOTIMPLEMENTED;

  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0004c	e8 00 00 00 00	 call	 _Py_IncRef
  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00058	e9 1e 01 00 00	 jmp	 $LN11@method_ric
$LN10@method_ric:

; 197  :     }
; 198  :     a = (PyMethodObject *)self;

  0005d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00062	48 89 44 24 28	 mov	 QWORD PTR a$[rsp], rax

; 199  :     b = (PyMethodObject *)other;

  00067	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  0006c	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax

; 200  :     eq = PyObject_RichCompareBool(a->im_func, b->im_func, Py_EQ);

  00071	41 b8 02 00 00
	00		 mov	 r8d, 2
  00077	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  0007c	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  00085	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00089	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0008e	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 201  :     if (eq == 1) {

  00092	83 7c 24 38 01	 cmp	 DWORD PTR eq$[rsp], 1
  00097	75 69		 jne	 SHORT $LN7@method_ric

; 202  :         if (a->im_self == NULL || b->im_self == NULL)

  00099	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  0009e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000a3	74 0c		 je	 SHORT $LN5@method_ric
  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  000aa	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000af	75 30		 jne	 SHORT $LN6@method_ric
$LN5@method_ric:

; 203  :             eq = a->im_self == b->im_self;

  000b1	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  000b6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  000bb	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  000bf	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  000c3	75 0a		 jne	 SHORT $LN13@method_ric
  000c5	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv85[rsp], 1
  000cd	eb 08		 jmp	 SHORT $LN14@method_ric
$LN13@method_ric:
  000cf	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
$LN14@method_ric:
  000d7	8b 44 24 3c	 mov	 eax, DWORD PTR tv85[rsp]
  000db	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 204  :         else

  000df	eb 21		 jmp	 SHORT $LN4@method_ric
$LN6@method_ric:

; 205  :             eq = PyObject_RichCompareBool(a->im_self, b->im_self,
; 206  :                                           Py_EQ);

  000e1	41 b8 02 00 00
	00		 mov	 r8d, 2
  000e7	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  000ec	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  000f0	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  000f5	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000f9	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000fe	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax
$LN4@method_ric:
$LN7@method_ric:

; 207  :     }
; 208  :     if (eq < 0)

  00102	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  00107	7d 04		 jge	 SHORT $LN3@method_ric

; 209  :         return NULL;

  00109	33 c0		 xor	 eax, eax
  0010b	eb 6e		 jmp	 SHORT $LN11@method_ric
$LN3@method_ric:

; 210  :     if (op == Py_EQ)

  0010d	83 7c 24 70 02	 cmp	 DWORD PTR op$[rsp], 2
  00112	75 2d		 jne	 SHORT $LN2@method_ric

; 211  :         res = eq ? Py_True : Py_False;

  00114	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  00119	74 0e		 je	 SHORT $LN15@method_ric
  0011b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00122	48 89 44 24 40	 mov	 QWORD PTR tv95[rsp], rax
  00127	eb 0c		 jmp	 SHORT $LN16@method_ric
$LN15@method_ric:
  00129	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00130	48 89 44 24 40	 mov	 QWORD PTR tv95[rsp], rax
$LN16@method_ric:
  00135	48 8b 44 24 40	 mov	 rax, QWORD PTR tv95[rsp]
  0013a	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 212  :     else

  0013f	eb 2b		 jmp	 SHORT $LN1@method_ric
$LN2@method_ric:

; 213  :         res = eq ? Py_False : Py_True;

  00141	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  00146	74 0e		 je	 SHORT $LN17@method_ric
  00148	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0014f	48 89 44 24 48	 mov	 QWORD PTR tv129[rsp], rax
  00154	eb 0c		 jmp	 SHORT $LN18@method_ric
$LN17@method_ric:
  00156	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0015d	48 89 44 24 48	 mov	 QWORD PTR tv129[rsp], rax
$LN18@method_ric:
  00162	48 8b 44 24 48	 mov	 rax, QWORD PTR tv129[rsp]
  00167	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@method_ric:

; 214  :     Py_INCREF(res);

  0016c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00171	e8 00 00 00 00	 call	 _Py_IncRef

; 215  :     return res;

  00176	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN11@method_ric:

; 216  : }

  0017b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0017f	c3		 ret	 0
method_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@DFLPBABB@?$DMbound?5method?5?$CFV?4?$CFV?5of?5?$CFR?$DO?$AA@ ; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_repr DD imagerel method_repr
	DD	imagerel method_repr+534
	DD	imagerel $unwind$method_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_repr DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_0BL@DFLPBABB@?$DMbound?5method?5?$CFV?4?$CFV?5of?5?$CFR?$DO?$AA@
CONST	SEGMENT
??_C@_0BL@DFLPBABB@?$DMbound?5method?5?$CFV?4?$CFV?5of?5?$CFR?$DO?$AA@ DB '<'
	DB	'bound method %V.%V of %R>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT method_repr
_TEXT	SEGMENT
klassname$ = 48
defname$ = 56
klass$ = 64
self$ = 72
result$ = 80
funcname$ = 88
func$ = 96
a$ = 128
method_repr PROC					; COMDAT

; 220  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 221  :     PyObject *self = a->im_self;

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00011	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00015	48 89 44 24 48	 mov	 QWORD PTR self$[rsp], rax

; 222  :     PyObject *func = a->im_func;

  0001a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00022	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00026	48 89 44 24 60	 mov	 QWORD PTR func$[rsp], rax

; 223  :     PyObject *klass;
; 224  :     PyObject *funcname = NULL ,*klassname = NULL, *result = NULL;

  0002b	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR funcname$[rsp], 0
  00034	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR klassname$[rsp], 0
  0003d	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 225  :     char *defname = "?";

  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  0004d	48 89 44 24 38	 mov	 QWORD PTR defname$[rsp], rax

; 226  : 
; 227  :     if (self == NULL) {

  00052	48 83 7c 24 48
	00		 cmp	 QWORD PTR self$[rsp], 0
  00058	75 18		 jne	 SHORT $LN23@method_rep

; 228  :         PyErr_BadInternalCall();

  0005a	ba e4 00 00 00	 mov	 edx, 228		; 000000e4H
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00066	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 229  :         return NULL;

  0006b	33 c0		 xor	 eax, eax
  0006d	e9 9f 01 00 00	 jmp	 $LN24@method_rep
$LN23@method_rep:

; 230  :     }
; 231  :     klass = (PyObject*)Py_TYPE(self);

  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  00077	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007b	48 89 44 24 40	 mov	 QWORD PTR klass$[rsp], rax

; 232  : 
; 233  :     funcname = _PyObject_GetAttrId(func, &PyId___name__);

  00080	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___name__
  00085	8b c0		 mov	 eax, eax
  00087	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0008d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00096	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0009a	48 8b d0	 mov	 rdx, rax
  0009d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR func$[rsp]
  000a2	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000a7	48 89 44 24 58	 mov	 QWORD PTR funcname$[rsp], rax

; 234  :     if (funcname == NULL) {

  000ac	48 83 7c 24 58
	00		 cmp	 QWORD PTR funcname$[rsp], 0
  000b2	75 1e		 jne	 SHORT $LN22@method_rep

; 235  :         if (!PyErr_ExceptionMatches(PyExc_AttributeError))

  000b4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000bb	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000c0	85 c0		 test	 eax, eax
  000c2	75 07		 jne	 SHORT $LN21@method_rep

; 236  :             return NULL;

  000c4	33 c0		 xor	 eax, eax
  000c6	e9 46 01 00 00	 jmp	 $LN24@method_rep
$LN21@method_rep:

; 237  :         PyErr_Clear();

  000cb	e8 00 00 00 00	 call	 PyErr_Clear
  000d0	eb 2b		 jmp	 SHORT $LN20@method_rep
$LN22@method_rep:

; 238  :     }
; 239  :     else if (!PyUnicode_Check(funcname)) {

  000d2	48 8b 44 24 58	 mov	 rax, QWORD PTR funcname$[rsp]
  000d7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000db	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000e6	85 c0		 test	 eax, eax
  000e8	75 13		 jne	 SHORT $LN19@method_rep

; 240  :         Py_DECREF(funcname);

  000ea	48 8b 4c 24 58	 mov	 rcx, QWORD PTR funcname$[rsp]
  000ef	e8 00 00 00 00	 call	 _Py_DecRef

; 241  :         funcname = NULL;

  000f4	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR funcname$[rsp], 0
$LN19@method_rep:
$LN20@method_rep:

; 242  :     }
; 243  : 
; 244  :     if (klass == NULL)

  000fd	48 83 7c 24 40
	00		 cmp	 QWORD PTR klass$[rsp], 0
  00103	75 0e		 jne	 SHORT $LN18@method_rep

; 245  :         klassname = NULL;

  00105	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR klassname$[rsp], 0

; 246  :     else {

  0010e	e9 95 00 00 00	 jmp	 $LN17@method_rep
$LN18@method_rep:

; 247  :         klassname = _PyObject_GetAttrId(klass, &PyId___name__);

  00113	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___name__
  00118	8b c0		 mov	 eax, eax
  0011a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00120	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00129	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0012d	48 8b d0	 mov	 rdx, rax
  00130	48 8b 4c 24 40	 mov	 rcx, QWORD PTR klass$[rsp]
  00135	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0013a	48 89 44 24 30	 mov	 QWORD PTR klassname$[rsp], rax

; 248  :         if (klassname == NULL) {

  0013f	48 83 7c 24 30
	00		 cmp	 QWORD PTR klassname$[rsp], 0
  00145	75 36		 jne	 SHORT $LN16@method_rep

; 249  :             if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {

  00147	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0014e	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00153	85 c0		 test	 eax, eax
  00155	75 1f		 jne	 SHORT $LN15@method_rep
$LN14@method_rep:

; 250  :                 Py_XDECREF(funcname);

  00157	48 83 7c 24 58
	00		 cmp	 QWORD PTR funcname$[rsp], 0
  0015d	74 0a		 je	 SHORT $LN11@method_rep
  0015f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR funcname$[rsp]
  00164	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@method_rep:
  00169	33 c0		 xor	 eax, eax
  0016b	85 c0		 test	 eax, eax
  0016d	75 e8		 jne	 SHORT $LN14@method_rep

; 251  :                 return NULL;

  0016f	33 c0		 xor	 eax, eax
  00171	e9 9b 00 00 00	 jmp	 $LN24@method_rep
$LN15@method_rep:

; 252  :             }
; 253  :             PyErr_Clear();

  00176	e8 00 00 00 00	 call	 PyErr_Clear
  0017b	eb 2b		 jmp	 SHORT $LN10@method_rep
$LN16@method_rep:

; 254  :         }
; 255  :         else if (!PyUnicode_Check(klassname)) {

  0017d	48 8b 44 24 30	 mov	 rax, QWORD PTR klassname$[rsp]
  00182	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00186	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0018c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00191	85 c0		 test	 eax, eax
  00193	75 13		 jne	 SHORT $LN9@method_rep

; 256  :             Py_DECREF(klassname);

  00195	48 8b 4c 24 30	 mov	 rcx, QWORD PTR klassname$[rsp]
  0019a	e8 00 00 00 00	 call	 _Py_DecRef

; 257  :             klassname = NULL;

  0019f	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR klassname$[rsp], 0
$LN9@method_rep:
$LN10@method_rep:
$LN17@method_rep:

; 258  :         }
; 259  :     }
; 260  : 
; 261  :     /* XXX Shouldn't use repr()/%R here! */
; 262  :     result = PyUnicode_FromFormat("<bound method %V.%V of %R>",
; 263  :                                   klassname, defname,
; 264  :                                   funcname, defname, self);

  001a8	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  001ad	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001b2	48 8b 44 24 38	 mov	 rax, QWORD PTR defname$[rsp]
  001b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001bc	4c 8b 4c 24 58	 mov	 r9, QWORD PTR funcname$[rsp]
  001c1	4c 8b 44 24 38	 mov	 r8, QWORD PTR defname$[rsp]
  001c6	48 8b 54 24 30	 mov	 rdx, QWORD PTR klassname$[rsp]
  001cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@DFLPBABB@?$DMbound?5method?5?$CFV?4?$CFV?5of?5?$CFR?$DO?$AA@
  001d2	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  001d7	48 89 44 24 50	 mov	 QWORD PTR result$[rsp], rax
$LN8@method_rep:

; 265  : 
; 266  :     Py_XDECREF(funcname);

  001dc	48 83 7c 24 58
	00		 cmp	 QWORD PTR funcname$[rsp], 0
  001e2	74 0a		 je	 SHORT $LN5@method_rep
  001e4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR funcname$[rsp]
  001e9	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@method_rep:
  001ee	33 c0		 xor	 eax, eax
  001f0	85 c0		 test	 eax, eax
  001f2	75 e8		 jne	 SHORT $LN8@method_rep
$LN4@method_rep:

; 267  :     Py_XDECREF(klassname);

  001f4	48 83 7c 24 30
	00		 cmp	 QWORD PTR klassname$[rsp], 0
  001fa	74 0a		 je	 SHORT $LN1@method_rep
  001fc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR klassname$[rsp]
  00201	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@method_rep:
  00206	33 c0		 xor	 eax, eax
  00208	85 c0		 test	 eax, eax
  0020a	75 e8		 jne	 SHORT $LN4@method_rep

; 268  :     return result;

  0020c	48 8b 44 24 50	 mov	 rax, QWORD PTR result$[rsp]
$LN24@method_rep:

; 269  : }

  00211	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00215	c3		 ret	 0
method_repr ENDP
_TEXT	ENDS
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_hash DD imagerel method_hash
	DD	imagerel method_hash+160
	DD	imagerel $unwind$method_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_hash DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT method_hash
_TEXT	SEGMENT
y$ = 32
x$ = 40
a$ = 64
method_hash PROC					; COMDAT

; 273  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 274  :     Py_hash_t x, y;
; 275  :     if (a->im_self == NULL)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	75 13		 jne	 SHORT $LN5@method_has

; 276  :         x = PyObject_Hash(Py_None);

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001c	e8 00 00 00 00	 call	 PyObject_Hash
  00021	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 277  :     else

  00026	eb 13		 jmp	 SHORT $LN4@method_has
$LN5@method_has:

; 278  :         x = PyObject_Hash(a->im_self);

  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  0002d	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00031	e8 00 00 00 00	 call	 PyObject_Hash
  00036	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax
$LN4@method_has:

; 279  :     if (x == -1)

  0003b	48 83 7c 24 28
	ff		 cmp	 QWORD PTR x$[rsp], -1
  00041	75 09		 jne	 SHORT $LN3@method_has

; 280  :         return -1;

  00043	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0004a	eb 4f		 jmp	 SHORT $LN6@method_has
$LN3@method_has:

; 281  :     y = PyObject_Hash(a->im_func);

  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  00051	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00055	e8 00 00 00 00	 call	 PyObject_Hash
  0005a	48 89 44 24 20	 mov	 QWORD PTR y$[rsp], rax

; 282  :     if (y == -1)

  0005f	48 83 7c 24 20
	ff		 cmp	 QWORD PTR y$[rsp], -1
  00065	75 09		 jne	 SHORT $LN2@method_has

; 283  :         return -1;

  00067	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0006e	eb 2b		 jmp	 SHORT $LN6@method_has
$LN2@method_has:

; 284  :     x = x ^ y;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR y$[rsp]
  00075	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  0007a	48 33 c8	 xor	 rcx, rax
  0007d	48 8b c1	 mov	 rax, rcx
  00080	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 285  :     if (x == -1)

  00085	48 83 7c 24 28
	ff		 cmp	 QWORD PTR x$[rsp], -1
  0008b	75 09		 jne	 SHORT $LN1@method_has

; 286  :         x = -2;

  0008d	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR x$[rsp], -2
$LN1@method_has:

; 287  :     return x;

  00096	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
$LN6@method_has:

; 288  : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
method_hash ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@GKEIAKAP@method_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_traverse DD imagerel method_traverse
	DD	imagerel method_traverse+206
	DD	imagerel $unwind$method_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BA@GKEIAKAP@method_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@GKEIAKAP@method_traverse?$AA@ DB 'method_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT method_traverse
_TEXT	SEGMENT
vret$20606 = 32
vret$20614 = 36
im$ = 64
visit$ = 72
arg$ = 80
method_traverse PROC					; COMDAT

; 292  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@method_tra:

; 293  :     Py_VISIT(im->im_func);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@method_tra
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 25 01 00
	00		 mov	 r8d, 293		; 00000125H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@GKEIAKAP@method_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@method_tra:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR im$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN8@method_tra
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR im$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20606[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20606[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@method_tra
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20606[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@method_tra
$LN7@method_tra:
$LN8@method_tra:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@method_tra
$LN6@method_tra:

; 294  :     Py_VISIT(im->im_self);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@method_tra
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@GKEIAKAP@method_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@method_tra:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR im$[rsp]
  00097	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0009c	74 23		 je	 SHORT $LN2@method_tra
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR im$[rsp]
  000a8	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$20614[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$20614[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@method_tra
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$20614[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@method_tra
$LN1@method_tra:
$LN2@method_tra:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@method_tra

; 295  :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@method_tra:

; 296  : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
method_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_Call:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyTuple_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_call DD imagerel method_call
	DD	imagerel method_call+315
	DD	imagerel $unwind$method_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_call DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT method_call
_TEXT	SEGMENT
self$ = 32
result$ = 40
i$20635 = 48
argcount$20633 = 56
newarg$20634 = 64
v$20644 = 72
func$ = 96
arg$ = 104
kw$ = 112
method_call PROC					; COMDAT

; 300  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 301  :     PyObject *self = PyMethod_GET_SELF(func);

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR func$[rsp]
  00018	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001c	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 302  :     PyObject *result;
; 303  : 
; 304  :     func = PyMethod_GET_FUNCTION(func);

  00021	48 8b 44 24 60	 mov	 rax, QWORD PTR func$[rsp]
  00026	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0002a	48 89 44 24 60	 mov	 QWORD PTR func$[rsp], rax

; 305  :     if (self == NULL) {

  0002f	48 83 7c 24 20
	00		 cmp	 QWORD PTR self$[rsp], 0
  00035	75 1d		 jne	 SHORT $LN10@method_cal

; 306  :         PyErr_BadInternalCall();

  00037	ba 32 01 00 00	 mov	 edx, 306		; 00000132H
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00043	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 307  :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 e7 00 00 00	 jmp	 $LN11@method_cal

; 308  :     }
; 309  :     else {

  0004f	e9 ba 00 00 00	 jmp	 $LN9@method_cal
$LN10@method_cal:

; 310  :         Py_ssize_t argcount = PyTuple_Size(arg);

  00054	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arg$[rsp]
  00059	e8 00 00 00 00	 call	 PyTuple_Size
  0005e	48 89 44 24 38	 mov	 QWORD PTR argcount$20633[rsp], rax

; 311  :         PyObject *newarg = PyTuple_New(argcount + 1);

  00063	48 8b 44 24 38	 mov	 rax, QWORD PTR argcount$20633[rsp]
  00068	48 ff c0	 inc	 rax
  0006b	48 8b c8	 mov	 rcx, rax
  0006e	e8 00 00 00 00	 call	 PyTuple_New
  00073	48 89 44 24 40	 mov	 QWORD PTR newarg$20634[rsp], rax

; 312  :         int i;
; 313  :         if (newarg == NULL)

  00078	48 83 7c 24 40
	00		 cmp	 QWORD PTR newarg$20634[rsp], 0
  0007e	75 07		 jne	 SHORT $LN8@method_cal

; 314  :             return NULL;

  00080	33 c0		 xor	 eax, eax
  00082	e9 af 00 00 00	 jmp	 $LN11@method_cal
$LN8@method_cal:

; 315  :         Py_INCREF(self);

  00087	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  0008c	e8 00 00 00 00	 call	 _Py_IncRef

; 316  :         PyTuple_SET_ITEM(newarg, 0, self);

  00091	48 8b 44 24 40	 mov	 rax, QWORD PTR newarg$20634[rsp]
  00096	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  0009b	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 317  :         for (i = 0; i < argcount; i++) {

  0009f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$20635[rsp], 0
  000a7	eb 0a		 jmp	 SHORT $LN7@method_cal
$LN6@method_cal:
  000a9	8b 44 24 30	 mov	 eax, DWORD PTR i$20635[rsp]
  000ad	ff c0		 inc	 eax
  000af	89 44 24 30	 mov	 DWORD PTR i$20635[rsp], eax
$LN7@method_cal:
  000b3	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$20635[rsp]
  000b8	48 3b 44 24 38	 cmp	 rax, QWORD PTR argcount$20633[rsp]
  000bd	7d 45		 jge	 SHORT $LN5@method_cal

; 318  :             PyObject *v = PyTuple_GET_ITEM(arg, i);

  000bf	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$20635[rsp]
  000c4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arg$[rsp]
  000c9	48 8b 44 c1 70	 mov	 rax, QWORD PTR [rcx+rax*8+112]
  000ce	48 89 44 24 48	 mov	 QWORD PTR v$20644[rsp], rax
$LN4@method_cal:

; 319  :             Py_XINCREF(v);

  000d3	48 83 7c 24 48
	00		 cmp	 QWORD PTR v$20644[rsp], 0
  000d9	74 0a		 je	 SHORT $LN1@method_cal
  000db	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$20644[rsp]
  000e0	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@method_cal:
  000e5	33 c0		 xor	 eax, eax
  000e7	85 c0		 test	 eax, eax
  000e9	75 e8		 jne	 SHORT $LN4@method_cal

; 320  :             PyTuple_SET_ITEM(newarg, i+1, v);

  000eb	8b 44 24 30	 mov	 eax, DWORD PTR i$20635[rsp]
  000ef	ff c0		 inc	 eax
  000f1	48 98		 cdqe
  000f3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR newarg$20634[rsp]
  000f8	48 8b 54 24 48	 mov	 rdx, QWORD PTR v$20644[rsp]
  000fd	48 89 54 c1 70	 mov	 QWORD PTR [rcx+rax*8+112], rdx

; 321  :         }

  00102	eb a5		 jmp	 SHORT $LN6@method_cal
$LN5@method_cal:

; 322  :         arg = newarg;

  00104	48 8b 44 24 40	 mov	 rax, QWORD PTR newarg$20634[rsp]
  00109	48 89 44 24 68	 mov	 QWORD PTR arg$[rsp], rax
$LN9@method_cal:

; 323  :     }
; 324  :     result = PyObject_Call((PyObject *)func, arg, kw);

  0010e	4c 8b 44 24 70	 mov	 r8, QWORD PTR kw$[rsp]
  00113	48 8b 54 24 68	 mov	 rdx, QWORD PTR arg$[rsp]
  00118	48 8b 4c 24 60	 mov	 rcx, QWORD PTR func$[rsp]
  0011d	e8 00 00 00 00	 call	 PyObject_Call
  00122	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 325  :     Py_DECREF(arg);

  00127	48 8b 4c 24 68	 mov	 rcx, QWORD PTR arg$[rsp]
  0012c	e8 00 00 00 00	 call	 _Py_DecRef

; 326  :     return result;

  00131	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN11@method_cal:

; 327  : }

  00136	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013a	c3		 ret	 0
method_call ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_descr_get DD imagerel method_descr_get
	DD	imagerel method_descr_get+72
	DD	imagerel $unwind$method_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_descr_get DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT method_descr_get
_TEXT	SEGMENT
meth$ = 48
obj$ = 56
cls$ = 64
method_descr_get PROC					; COMDAT

; 331  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 332  :     /* Don't rebind an already bound method of a class that's not a base
; 333  :        class of cls. */
; 334  :     if (PyMethod_GET_SELF(meth) != NULL) {

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR meth$[rsp]
  00018	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001d	74 11		 je	 SHORT $LN1@method_des

; 335  :         /* Already bound */
; 336  :         Py_INCREF(meth);

  0001f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR meth$[rsp]
  00024	e8 00 00 00 00	 call	 _Py_IncRef

; 337  :         return meth;

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR meth$[rsp]
  0002e	eb 13		 jmp	 SHORT $LN2@method_des
$LN1@method_des:

; 338  :     }
; 339  :     /* Bind it to obj */
; 340  :     return PyMethod_New(PyMethod_GET_FUNCTION(meth), obj);

  00030	48 8b 54 24 38	 mov	 rdx, QWORD PTR obj$[rsp]
  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR meth$[rsp]
  0003a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0003e	e8 00 00 00 00	 call	 PyMethod_New
$LN2@method_des:

; 341  : }

  00043	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00047	c3		 ret	 0
method_descr_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	PyMethod_ClearFreeList
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMethod_ClearFreeList DD imagerel $LN7
	DD	imagerel $LN7+137
	DD	imagerel $unwind$PyMethod_ClearFreeList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMethod_ClearFreeList DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'u', 00H, 'm', 00H, 'f', 00H, 'r', 00H, 'e', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyMethod_ClearFreeList
_TEXT	SEGMENT
freelist_size$ = 32
im$20694 = 40
PyMethod_ClearFreeList PROC				; COMDAT

; 388  : {

$LN7:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 389  :     int freelist_size = numfree;

  00004	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  0000a	89 44 24 20	 mov	 DWORD PTR freelist_size$[rsp], eax

; 390  : 
; 391  :     if (Py_PXCTX)

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 04		 je	 SHORT $LN3@PyMethod_C

; 392  :         return 0;

  00017	33 c0		 xor	 eax, eax
  00019	eb 69		 jmp	 SHORT $LN4@PyMethod_C
$LN3@PyMethod_C:
$LN2@PyMethod_C:

; 393  : 
; 394  :     while (free_list) {

  0001b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR free_list, 0
  00023	74 36		 je	 SHORT $LN1@PyMethod_C

; 395  :         PyMethodObject *im = free_list;

  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list
  0002c	48 89 44 24 28	 mov	 QWORD PTR im$20694[rsp], rax

; 396  :         free_list = (PyMethodObject *)(im->im_self);

  00031	48 8b 44 24 28	 mov	 rax, QWORD PTR im$20694[rsp]
  00036	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0003a	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax

; 397  :         PyObject_GC_Del(im);

  00041	48 8b 4c 24 28	 mov	 rcx, QWORD PTR im$20694[rsp]
  00046	e8 00 00 00 00	 call	 PyObject_GC_Del

; 398  :         numfree--;

  0004b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  00051	ff c8		 dec	 eax
  00053	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 399  :     }

  00059	eb c0		 jmp	 SHORT $LN2@PyMethod_C
$LN1@PyMethod_C:

; 400  :     assert(numfree == 0);

  0005b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR numfree, 0
  00062	74 1c		 je	 SHORT $LN6@PyMethod_C
  00064	41 b8 90 01 00
	00		 mov	 r8d, 400		; 00000190H
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@NCFJIGPE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAl?$AAa?$AAs?$AAs?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007e	33 c0		 xor	 eax, eax
$LN6@PyMethod_C:

; 401  :     return freelist_size;

  00080	8b 44 24 20	 mov	 eax, DWORD PTR freelist_size$[rsp]
$LN4@PyMethod_C:

; 402  : }

  00084	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00088	c3		 ret	 0
PyMethod_ClearFreeList ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@EPHJPCJE@PyMethod_Fini?$AA@		; `string'
PUBLIC	PyMethod_Fini
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMethod_Fini DD imagerel $LN4
	DD	imagerel $LN4+51
	DD	imagerel $unwind$PyMethod_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMethod_Fini DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0O@EPHJPCJE@PyMethod_Fini?$AA@
CONST	SEGMENT
??_C@_0O@EPHJPCJE@PyMethod_Fini?$AA@ DB 'PyMethod_Fini', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyMethod_Fini
_TEXT	SEGMENT
PyMethod_Fini PROC					; COMDAT

; 406  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 407  :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN1@PyMethod_F@2
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 97 01 00
	00		 mov	 r8d, 407		; 00000197H
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EPHJPCJE@PyMethod_Fini?$AA@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyMethod_F@2:

; 408  :     (void)PyMethod_ClearFreeList();

  00029	e8 00 00 00 00	 call	 PyMethod_ClearFreeList

; 409  : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
PyMethod_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@DGLFAKJJ@free?5PyMethodObject?$AA@	; `string'
PUBLIC	_PyMethod_DebugMallocStats
EXTRN	_PyDebugAllocatorStats:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyMethod_DebugMallocStats DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$_PyMethod_DebugMallocStats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyMethod_DebugMallocStats DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BE@DGLFAKJJ@free?5PyMethodObject?$AA@
CONST	SEGMENT
??_C@_0BE@DGLFAKJJ@free?5PyMethodObject?$AA@ DB 'free PyMethodObject', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyMethod_DebugMallocStats
_TEXT	SEGMENT
out$ = 48
_PyMethod_DebugMallocStats PROC				; COMDAT

; 414  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 415  :     _PyDebugAllocatorStats(out,
; 416  :                            "free PyMethodObject",
; 417  :                            numfree, sizeof(PyMethodObject));

  00009	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  0000f	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR numfree
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@DGLFAKJJ@free?5PyMethodObject?$AA@
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  00022	e8 00 00 00 00	 call	 _PyDebugAllocatorStats

; 418  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
_PyMethod_DebugMallocStats ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@FNDNKJGP@PyInstanceMethod_New?$AA@	; `string'
PUBLIC	PyInstanceMethod_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInstanceMethod_New DD imagerel $LN13
	DD	imagerel $LN13+351
	DD	imagerel $unwind$PyInstanceMethod_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInstanceMethod_New DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BF@FNDNKJGP@PyInstanceMethod_New?$AA@
CONST	SEGMENT
??_C@_0BF@FNDNKJGP@PyInstanceMethod_New?$AA@ DB 'PyInstanceMethod_New', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInstanceMethod_New
_TEXT	SEGMENT
method$ = 48
g$20723 = 56
tv70 = 64
tv89 = 72
func$ = 96
PyInstanceMethod_New PROC				; COMDAT

; 425  : PyInstanceMethod_New(PyObject *func) {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 426  :     PyInstanceMethodObject *method;
; 427  :     method = PyObject_GC_New(PyInstanceMethodObject,
; 428  :                              &PyInstanceMethod_Type);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 13		 je	 SHORT $LN9@PyInstance
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyInstanceMethod_Type
  00019	e8 00 00 00 00	 call	 _PxObject_New
  0001e	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
  00023	eb 11		 jmp	 SHORT $LN10@PyInstance
$LN9@PyInstance:
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyInstanceMethod_Type
  0002c	e8 00 00 00 00	 call	 _PyObject_GC_New
  00031	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
$LN10@PyInstance:
  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR tv70[rsp]
  0003b	48 89 44 24 30	 mov	 QWORD PTR method$[rsp], rax

; 429  :     if (method == NULL) return NULL;

  00040	48 83 7c 24 30
	00		 cmp	 QWORD PTR method$[rsp], 0
  00046	75 07		 jne	 SHORT $LN6@PyInstance
  00048	33 c0		 xor	 eax, eax
  0004a	e9 0b 01 00 00	 jmp	 $LN7@PyInstance
$LN6@PyInstance:

; 430  :     Py_INCREF(func);

  0004f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR func$[rsp]
  00054	e8 00 00 00 00	 call	 _Py_IncRef

; 431  :     method->func = func;

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR method$[rsp]
  0005e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR func$[rsp]
  00063	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 432  :     _PyObject_GC_TRACK(method);

  00067	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006f	4c 8b 4c 24 30	 mov	 r9, QWORD PTR method$[rsp]
  00074	41 b8 b0 01 00
	00		 mov	 r8d, 432		; 000001b0H
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@FNDNKJGP@PyInstanceMethod_New?$AA@
  00088	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008d	85 c0		 test	 eax, eax
  0008f	0f 85 c0 00 00
	00		 jne	 $LN5@PyInstance
$LN4@PyInstance:
  00095	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0009d	4c 8b 4c 24 30	 mov	 r9, QWORD PTR method$[rsp]
  000a2	41 b8 b0 01 00
	00		 mov	 r8d, 432		; 000001b0H
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@FNDNKJGP@PyInstanceMethod_New?$AA@
  000b6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000bb	85 c0		 test	 eax, eax
  000bd	74 0b		 je	 SHORT $LN11@PyInstance
  000bf	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv89[rsp], 0
  000c8	eb 0e		 jmp	 SHORT $LN12@PyInstance
$LN11@PyInstance:
  000ca	48 8b 44 24 30	 mov	 rax, QWORD PTR method$[rsp]
  000cf	48 83 e8 18	 sub	 rax, 24
  000d3	48 89 44 24 48	 mov	 QWORD PTR tv89[rsp], rax
$LN12@PyInstance:
  000d8	48 8b 44 24 48	 mov	 rax, QWORD PTR tv89[rsp]
  000dd	48 89 44 24 38	 mov	 QWORD PTR g$20723[rsp], rax
  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20723[rsp]
  000e7	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000ec	74 0c		 je	 SHORT $LN1@PyInstance
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  000f5	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyInstance:
  000fa	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20723[rsp]
  000ff	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  00107	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20723[rsp]
  0010c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00113	48 89 08	 mov	 QWORD PTR [rax], rcx
  00116	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20723[rsp]
  0011b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00122	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00126	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0012a	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20723[rsp]
  0012f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00133	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20723[rsp]
  00138	48 89 08	 mov	 QWORD PTR [rax], rcx
  0013b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00142	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20723[rsp]
  00147	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0014b	33 c0		 xor	 eax, eax
  0014d	85 c0		 test	 eax, eax
  0014f	0f 85 40 ff ff
	ff		 jne	 $LN4@PyInstance
$LN5@PyInstance:

; 433  :     return (PyObject *)method;

  00155	48 8b 44 24 30	 mov	 rax, QWORD PTR method$[rsp]
$LN7@PyInstance:

; 434  : }

  0015a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0015e	c3		 ret	 0
PyInstanceMethod_New ENDP
_TEXT	ENDS
PUBLIC	PyInstanceMethod_Function
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInstanceMethod_Function DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$PyInstanceMethod_Function
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInstanceMethod_Function DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyInstanceMethod_Function
_TEXT	SEGMENT
im$ = 48
PyInstanceMethod_Function PROC				; COMDAT

; 438  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 439  :     if (!PyInstanceMethod_Check(im)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyInstanceMethod_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR im$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyInstance@2

; 440  :         PyErr_BadInternalCall();

  0001b	ba b8 01 00 00	 mov	 edx, 440		; 000001b8H
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 441  :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 09		 jmp	 SHORT $LN2@PyInstance@2
$LN1@PyInstance@2:

; 442  :     }
; 443  :     return PyInstanceMethod_GET_FUNCTION(im);

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR im$[rsp]
  00035	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
$LN2@PyInstance@2:

; 444  : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
PyInstanceMethod_Function ENDP
_TEXT	ENDS
_BSS	SEGMENT
?docstr@?1??instancemethod_get_doc@@9@9 DQ 01H DUP (?)	; `instancemethod_get_doc'::`2'::docstr
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_get_doc DD imagerel instancemethod_get_doc
	DD	imagerel instancemethod_get_doc+83
	DD	imagerel $unwind$instancemethod_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_get_doc DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT instancemethod_get_doc
_TEXT	SEGMENT
self$ = 48
context$ = 56
instancemethod_get_doc PROC				; COMDAT

; 456  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 457  :     static PyObject *docstr;
; 458  :     if (docstr == NULL) {

  0000e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?docstr@?1??instancemethod_get_doc@@9@9, 0
  00016	75 21		 jne	 SHORT $LN2@instanceme

; 459  :         docstr = PyUnicode_InternFromString("__doc__");

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  0001f	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00024	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?docstr@?1??instancemethod_get_doc@@9@9, rax

; 460  :         if (docstr == NULL)

  0002b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?docstr@?1??instancemethod_get_doc@@9@9, 0
  00033	75 04		 jne	 SHORT $LN1@instanceme

; 461  :             return NULL;

  00035	33 c0		 xor	 eax, eax
  00037	eb 15		 jmp	 SHORT $LN3@instanceme
$LN1@instanceme:
$LN2@instanceme:

; 462  :     }
; 463  :     return PyObject_GetAttr(PyInstanceMethod_GET_FUNCTION(self), docstr);

  00039	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?docstr@?1??instancemethod_get_doc@@9@9
  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00045	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00049	e8 00 00 00 00	 call	 PyObject_GetAttr
$LN3@instanceme:

; 464  : }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
instancemethod_get_doc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_getattro DD imagerel instancemethod_getattro
	DD	imagerel instancemethod_getattro+195
	DD	imagerel $unwind$instancemethod_getattro
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_getattro DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT instancemethod_getattro
_TEXT	SEGMENT
descr$ = 32
tp$ = 40
f$20773 = 48
self$ = 80
name$ = 88
instancemethod_getattro PROC				; COMDAT

; 473  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 474  :     PyTypeObject *tp = self->ob_type;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	48 89 44 24 28	 mov	 QWORD PTR tp$[rsp], rax

; 475  :     PyObject *descr = NULL;

  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR descr$[rsp], 0

; 476  : 
; 477  :     if (tp->tp_dict == NULL) {

  00025	48 8b 44 24 28	 mov	 rax, QWORD PTR tp$[rsp]
  0002a	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  00032	75 12		 jne	 SHORT $LN5@instanceme@2

; 478  :         if (PyType_Ready(tp) < 0)

  00034	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tp$[rsp]
  00039	e8 00 00 00 00	 call	 PyType_Ready
  0003e	85 c0		 test	 eax, eax
  00040	7d 04		 jge	 SHORT $LN4@instanceme@2

; 479  :             return NULL;

  00042	33 c0		 xor	 eax, eax
  00044	eb 78		 jmp	 SHORT $LN6@instanceme@2
$LN4@instanceme@2:
$LN5@instanceme@2:

; 480  :     }
; 481  :     descr = _PyType_Lookup(tp, name);

  00046	48 8b 54 24 58	 mov	 rdx, QWORD PTR name$[rsp]
  0004b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tp$[rsp]
  00050	e8 00 00 00 00	 call	 _PyType_Lookup
  00055	48 89 44 24 20	 mov	 QWORD PTR descr$[rsp], rax

; 482  : 
; 483  :     if (descr != NULL) {

  0005a	48 83 7c 24 20
	00		 cmp	 QWORD PTR descr$[rsp], 0
  00060	74 49		 je	 SHORT $LN3@instanceme@2

; 484  :         descrgetfunc f = TP_DESCR_GET(descr->ob_type);

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  00067	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006b	48 8b 80 68 01
	00 00		 mov	 rax, QWORD PTR [rax+360]
  00072	48 89 44 24 30	 mov	 QWORD PTR f$20773[rsp], rax

; 485  :         if (f != NULL)

  00077	48 83 7c 24 30
	00		 cmp	 QWORD PTR f$20773[rsp], 0
  0007d	74 1b		 je	 SHORT $LN2@instanceme@2

; 486  :             return f(descr, self, (PyObject *)self->ob_type);

  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00084	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00088	48 8b 54 24 50	 mov	 rdx, QWORD PTR self$[rsp]
  0008d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR descr$[rsp]
  00092	ff 54 24 30	 call	 QWORD PTR f$20773[rsp]
  00096	eb 26		 jmp	 SHORT $LN6@instanceme@2

; 487  :         else {

  00098	eb 11		 jmp	 SHORT $LN1@instanceme@2
$LN2@instanceme@2:

; 488  :             Py_INCREF(descr);

  0009a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR descr$[rsp]
  0009f	e8 00 00 00 00	 call	 _Py_IncRef

; 489  :             return descr;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  000a9	eb 13		 jmp	 SHORT $LN6@instanceme@2
$LN1@instanceme@2:
$LN3@instanceme@2:

; 490  :         }
; 491  :     }
; 492  : 
; 493  :     return PyObject_GetAttr(PyInstanceMethod_GET_FUNCTION(self), name);

  000ab	48 8b 54 24 58	 mov	 rdx, QWORD PTR name$[rsp]
  000b0	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b5	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000b9	e8 00 00 00 00	 call	 PyObject_GetAttr
$LN6@instanceme@2:

; 494  : }

  000be	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c2	c3		 ret	 0
instancemethod_getattro ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@FBLCJLOK@instancemethod_dealloc?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_dealloc DD imagerel instancemethod_dealloc
	DD	imagerel instancemethod_dealloc+277
	DD	imagerel $unwind$instancemethod_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BH@FBLCJLOK@instancemethod_dealloc?$AA@
CONST	SEGMENT
??_C@_0BH@FBLCJLOK@instancemethod_dealloc?$AA@ DB 'instancemethod_dealloc'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT instancemethod_dealloc
_TEXT	SEGMENT
g$20789 = 48
tv79 = 56
self$ = 80
instancemethod_dealloc PROC				; COMDAT

; 497  : instancemethod_dealloc(PyObject *self) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 498  :     _PyObject_GC_UNTRACK(self);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  00016	41 b8 f2 01 00
	00		 mov	 r8d, 498		; 000001f2H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@FBLCJLOK@instancemethod_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN4@instanceme@3
$LN3@instanceme@3:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  00044	41 b8 f2 01 00
	00		 mov	 r8d, 498		; 000001f2H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@FBLCJLOK@instancemethod_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN7@instanceme@3
  00061	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN8@instanceme@3
$LN7@instanceme@3:
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN8@instanceme@3:
  0007a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$20789[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20789[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN9@instanceme@3
  00090	41 b8 f2 01 00
	00		 mov	 r8d, 498		; 000001f2H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@NCFJIGPE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAl?$AAa?$AAs?$AAs?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN9@instanceme@3:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20789[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20789[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20789[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20789[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20789[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20789[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN3@instanceme@3
$LN4@instanceme@3:

; 499  :     Py_DECREF(PyInstanceMethod_GET_FUNCTION(self));

  000f8	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000fd	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00101	e8 00 00 00 00	 call	 _Py_DecRef

; 500  :     PyObject_GC_Del(self);

  00106	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0010b	e8 00 00 00 00	 call	 PyObject_GC_Del

; 501  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
instancemethod_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@JDLCDDOC@instancemethod_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_traverse DD imagerel instancemethod_traverse
	DD	imagerel instancemethod_traverse+116
	DD	imagerel $unwind$instancemethod_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BI@JDLCDDOC@instancemethod_traverse?$AA@
CONST	SEGMENT
??_C@_0BI@JDLCDDOC@instancemethod_traverse?$AA@ DB 'instancemethod_traver'
	DB	'se', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT instancemethod_traverse
_TEXT	SEGMENT
vret$20811 = 32
self$ = 64
visit$ = 72
arg$ = 80
instancemethod_traverse PROC				; COMDAT

; 504  : instancemethod_traverse(PyObject *self, visitproc visit, void *arg) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@instanceme@4:

; 505  :     Py_VISIT(PyInstanceMethod_GET_FUNCTION(self));

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@instanceme@4
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 f9 01 00
	00		 mov	 r8d, 505		; 000001f9H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@JDLCDDOC@instancemethod_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@instanceme@4:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN2@instanceme@4
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20811[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20811[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@instanceme@4
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20811[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@instanceme@4
$LN1@instanceme@4:
$LN2@instanceme@4:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@instanceme@4

; 506  :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@instanceme@4:

; 507  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
instancemethod_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_call DD imagerel instancemethod_call
	DD	imagerel instancemethod_call+48
	DD	imagerel $unwind$instancemethod_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_call DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT instancemethod_call
_TEXT	SEGMENT
self$ = 48
arg$ = 56
kw$ = 64
instancemethod_call PROC				; COMDAT

; 511  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 512  :     return PyObject_Call(PyMethod_GET_FUNCTION(self), arg, kw);

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR kw$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR arg$[rsp]
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00022	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00026	e8 00 00 00 00	 call	 PyObject_Call

; 513  : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
instancemethod_call ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_descr_get DD imagerel instancemethod_descr_get
	DD	imagerel instancemethod_descr_get+80
	DD	imagerel $unwind$instancemethod_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_descr_get DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT instancemethod_descr_get
_TEXT	SEGMENT
func$ = 32
descr$ = 64
obj$ = 72
type$ = 80
instancemethod_descr_get PROC				; COMDAT

; 516  : instancemethod_descr_get(PyObject *descr, PyObject *obj, PyObject *type) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 517  :     register PyObject *func = PyInstanceMethod_GET_FUNCTION(descr);

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  00018	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0001c	48 89 44 24 20	 mov	 QWORD PTR func$[rsp], rax

; 518  :     if (obj == NULL) {

  00021	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00027	75 13		 jne	 SHORT $LN2@instanceme@5

; 519  :         Py_INCREF(func);

  00029	48 8b 4c 24 20	 mov	 rcx, QWORD PTR func$[rsp]
  0002e	e8 00 00 00 00	 call	 _Py_IncRef

; 520  :         return func;

  00033	48 8b 44 24 20	 mov	 rax, QWORD PTR func$[rsp]
  00038	eb 11		 jmp	 SHORT $LN3@instanceme@5

; 521  :     }
; 522  :     else

  0003a	eb 0f		 jmp	 SHORT $LN1@instanceme@5
$LN2@instanceme@5:

; 523  :         return PyMethod_New(func, obj);

  0003c	48 8b 54 24 48	 mov	 rdx, QWORD PTR obj$[rsp]
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR func$[rsp]
  00046	e8 00 00 00 00	 call	 PyMethod_New
$LN1@instanceme@5:
$LN3@instanceme@5:

; 524  : }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
instancemethod_descr_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_richcompare DD imagerel instancemethod_richcompare
	DD	imagerel instancemethod_richcompare+272
	DD	imagerel $unwind$instancemethod_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_richcompare DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT instancemethod_richcompare
_TEXT	SEGMENT
res$ = 32
a$ = 40
b$ = 48
eq$ = 56
tv80 = 64
tv82 = 72
self$ = 96
other$ = 104
op$ = 112
instancemethod_richcompare PROC				; COMDAT

; 528  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 529  :     PyInstanceMethodObject *a, *b;
; 530  :     PyObject *res;
; 531  :     int eq;
; 532  : 
; 533  :     if ((op != Py_EQ && op != Py_NE) ||
; 534  :         !PyInstanceMethod_Check(self) ||
; 535  :         !PyInstanceMethod_Check(other))

  00013	83 7c 24 70 02	 cmp	 DWORD PTR op$[rsp], 2
  00018	74 07		 je	 SHORT $LN4@instanceme@6
  0001a	83 7c 24 70 03	 cmp	 DWORD PTR op$[rsp], 3
  0001f	75 24		 jne	 SHORT $LN5@instanceme@6
$LN4@instanceme@6:
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyInstanceMethod_Type
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0002d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00031	75 12		 jne	 SHORT $LN5@instanceme@6
  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyInstanceMethod_Type
  0003a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  0003f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00043	74 18		 je	 SHORT $LN6@instanceme@6
$LN5@instanceme@6:

; 536  :     {
; 537  :         Py_RETURN_NOTIMPLEMENTED;

  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0004c	e8 00 00 00 00	 call	 _Py_IncRef
  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00058	e9 ae 00 00 00	 jmp	 $LN7@instanceme@6
$LN6@instanceme@6:

; 538  :     }
; 539  :     a = (PyInstanceMethodObject *)self;

  0005d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00062	48 89 44 24 28	 mov	 QWORD PTR a$[rsp], rax

; 540  :     b = (PyInstanceMethodObject *)other;

  00067	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  0006c	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax

; 541  :     eq = PyObject_RichCompareBool(a->func, b->func, Py_EQ);

  00071	41 b8 02 00 00
	00		 mov	 r8d, 2
  00077	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  0007c	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  00085	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00089	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0008e	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 542  :     if (eq < 0)

  00092	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  00097	7d 04		 jge	 SHORT $LN3@instanceme@6

; 543  :         return NULL;

  00099	33 c0		 xor	 eax, eax
  0009b	eb 6e		 jmp	 SHORT $LN7@instanceme@6
$LN3@instanceme@6:

; 544  :     if (op == Py_EQ)

  0009d	83 7c 24 70 02	 cmp	 DWORD PTR op$[rsp], 2
  000a2	75 2d		 jne	 SHORT $LN2@instanceme@6

; 545  :         res = eq ? Py_True : Py_False;

  000a4	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  000a9	74 0e		 je	 SHORT $LN9@instanceme@6
  000ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000b2	48 89 44 24 40	 mov	 QWORD PTR tv80[rsp], rax
  000b7	eb 0c		 jmp	 SHORT $LN10@instanceme@6
$LN9@instanceme@6:
  000b9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  000c0	48 89 44 24 40	 mov	 QWORD PTR tv80[rsp], rax
$LN10@instanceme@6:
  000c5	48 8b 44 24 40	 mov	 rax, QWORD PTR tv80[rsp]
  000ca	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 546  :     else

  000cf	eb 2b		 jmp	 SHORT $LN1@instanceme@6
$LN2@instanceme@6:

; 547  :         res = eq ? Py_False : Py_True;

  000d1	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  000d6	74 0e		 je	 SHORT $LN11@instanceme@6
  000d8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  000df	48 89 44 24 48	 mov	 QWORD PTR tv82[rsp], rax
  000e4	eb 0c		 jmp	 SHORT $LN12@instanceme@6
$LN11@instanceme@6:
  000e6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000ed	48 89 44 24 48	 mov	 QWORD PTR tv82[rsp], rax
$LN12@instanceme@6:
  000f2	48 8b 44 24 48	 mov	 rax, QWORD PTR tv82[rsp]
  000f7	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@instanceme@6:

; 548  :     Py_INCREF(res);

  000fc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00101	e8 00 00 00 00	 call	 _Py_IncRef

; 549  :     return res;

  00106	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN7@instanceme@6:

; 550  : }

  0010b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0010f	c3		 ret	 0
instancemethod_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@MOMGEOKD@?$DMinstancemethod?5?$CFV?5at?5?$CFp?$DO?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_repr DD imagerel instancemethod_repr
	DD	imagerel instancemethod_repr+274
	DD	imagerel $unwind$instancemethod_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_repr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BK@MOMGEOKD@?$DMinstancemethod?5?$CFV?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BK@MOMGEOKD@?$DMinstancemethod?5?$CFV?5at?5?$CFp?$DO?$AA@ DB '<ins'
	DB	'tancemethod %V at %p>', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT instancemethod_repr
_TEXT	SEGMENT
defname$ = 32
result$ = 40
funcname$ = 48
func$ = 56
self$ = 80
instancemethod_repr PROC				; COMDAT

; 554  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 555  :     PyObject *func = PyInstanceMethod_Function(self);

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 PyInstanceMethod_Function
  00013	48 89 44 24 38	 mov	 QWORD PTR func$[rsp], rax

; 556  :     PyObject *funcname = NULL , *result = NULL;

  00018	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR funcname$[rsp], 0
  00021	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 557  :     char *defname = "?";

  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00031	48 89 44 24 20	 mov	 QWORD PTR defname$[rsp], rax

; 558  : 
; 559  :     if (func == NULL) {

  00036	48 83 7c 24 38
	00		 cmp	 QWORD PTR func$[rsp], 0
  0003c	75 18		 jne	 SHORT $LN9@instanceme@7

; 560  :         PyErr_BadInternalCall();

  0003e	ba 30 02 00 00	 mov	 edx, 560		; 00000230H
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@GPPDOAFF@?4?4?2Objects?2classobject?4c?$AA@
  0004a	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 561  :         return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	e9 b7 00 00 00	 jmp	 $LN10@instanceme@7
$LN9@instanceme@7:

; 562  :     }
; 563  : 
; 564  :     funcname = _PyObject_GetAttrId(func, &PyId___name__);

  00056	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___name__
  0005b	8b c0		 mov	 eax, eax
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00063	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0006c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00070	48 8b d0	 mov	 rdx, rax
  00073	48 8b 4c 24 38	 mov	 rcx, QWORD PTR func$[rsp]
  00078	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0007d	48 89 44 24 30	 mov	 QWORD PTR funcname$[rsp], rax

; 565  :     if (funcname == NULL) {

  00082	48 83 7c 24 30
	00		 cmp	 QWORD PTR funcname$[rsp], 0
  00088	75 1b		 jne	 SHORT $LN8@instanceme@7

; 566  :         if (!PyErr_ExceptionMatches(PyExc_AttributeError))

  0008a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00091	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00096	85 c0		 test	 eax, eax
  00098	75 04		 jne	 SHORT $LN7@instanceme@7

; 567  :             return NULL;

  0009a	33 c0		 xor	 eax, eax
  0009c	eb 6f		 jmp	 SHORT $LN10@instanceme@7
$LN7@instanceme@7:

; 568  :         PyErr_Clear();

  0009e	e8 00 00 00 00	 call	 PyErr_Clear
  000a3	eb 2b		 jmp	 SHORT $LN6@instanceme@7
$LN8@instanceme@7:

; 569  :     }
; 570  :     else if (!PyUnicode_Check(funcname)) {

  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR funcname$[rsp]
  000aa	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ae	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000b9	85 c0		 test	 eax, eax
  000bb	75 13		 jne	 SHORT $LN5@instanceme@7

; 571  :         Py_DECREF(funcname);

  000bd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR funcname$[rsp]
  000c2	e8 00 00 00 00	 call	 _Py_DecRef

; 572  :         funcname = NULL;

  000c7	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR funcname$[rsp], 0
$LN5@instanceme@7:
$LN6@instanceme@7:

; 573  :     }
; 574  : 
; 575  :     result = PyUnicode_FromFormat("<instancemethod %V at %p>",
; 576  :                                   funcname, defname, self);

  000d0	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  000d5	4c 8b 44 24 20	 mov	 r8, QWORD PTR defname$[rsp]
  000da	48 8b 54 24 30	 mov	 rdx, QWORD PTR funcname$[rsp]
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@MOMGEOKD@?$DMinstancemethod?5?$CFV?5at?5?$CFp?$DO?$AA@
  000e6	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000eb	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$LN4@instanceme@7:

; 577  : 
; 578  :     Py_XDECREF(funcname);

  000f0	48 83 7c 24 30
	00		 cmp	 QWORD PTR funcname$[rsp], 0
  000f6	74 0a		 je	 SHORT $LN1@instanceme@7
  000f8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR funcname$[rsp]
  000fd	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@instanceme@7:
  00102	33 c0		 xor	 eax, eax
  00104	85 c0		 test	 eax, eax
  00106	75 e8		 jne	 SHORT $LN4@instanceme@7

; 579  :     return result;

  00108	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN10@instanceme@7:

; 580  : }

  0010d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00111	c3		 ret	 0
instancemethod_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$instancemethod_new DD imagerel instancemethod_new
	DD	imagerel instancemethod_new+143
	DD	imagerel $unwind$instancemethod_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$instancemethod_new DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT instancemethod_new
_TEXT	SEGMENT
func$ = 48
type$ = 80
args$ = 88
kw$ = 96
instancemethod_new PROC					; COMDAT

; 605  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 606  :     PyObject *func;
; 607  : 
; 608  :     if (!_PyArg_NoKeywords("instancemethod", kw))

  00013	48 8b 54 24 60	 mov	 rdx, QWORD PTR kw$[rsp]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NKEHLIOI@instancemethod?$AA@
  0001f	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN3@instanceme@8

; 609  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 5e		 jmp	 SHORT $LN4@instanceme@8
$LN3@instanceme@8:

; 610  :     if (!PyArg_UnpackTuple(args, "instancemethod", 1, 1, &func))

  0002c	48 8d 44 24 30	 lea	 rax, QWORD PTR func$[rsp]
  00031	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00036	41 b9 01 00 00
	00		 mov	 r9d, 1
  0003c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@NKEHLIOI@instancemethod?$AA@
  00049	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0004e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00053	85 c0		 test	 eax, eax
  00055	75 04		 jne	 SHORT $LN2@instanceme@8

; 611  :         return NULL;

  00057	33 c0		 xor	 eax, eax
  00059	eb 2f		 jmp	 SHORT $LN4@instanceme@8
$LN2@instanceme@8:

; 612  :     if (!PyCallable_Check(func)) {

  0005b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  00060	e8 00 00 00 00	 call	 PyCallable_Check
  00065	85 c0		 test	 eax, eax
  00067	75 17		 jne	 SHORT $LN1@instanceme@8

; 613  :         PyErr_SetString(PyExc_TypeError,
; 614  :                         "first argument must be callable");

  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LJNCLGIM@first?5argument?5must?5be?5callable?$AA@
  00070	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00077	e8 00 00 00 00	 call	 PyErr_SetString

; 615  :         return NULL;

  0007c	33 c0		 xor	 eax, eax
  0007e	eb 0a		 jmp	 SHORT $LN4@instanceme@8
$LN1@instanceme@8:

; 616  :     }
; 617  : 
; 618  :     return PyInstanceMethod_New(func);

  00080	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  00085	e8 00 00 00 00	 call	 PyInstanceMethod_New
$LN4@instanceme@8:

; 619  : }

  0008a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0008e	c3		 ret	 0
instancemethod_new ENDP
_TEXT	ENDS
END
