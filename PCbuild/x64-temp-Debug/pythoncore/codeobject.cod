; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04NDFOBODE@code?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_0BC@GKIFBIPI@px_heapsize_total?$AA@	; `string'
PUBLIC	??_C@_0BB@NHEDMCIP@px_heapsize_hint?$AA@	; `string'
PUBLIC	??_C@_0BA@KCMIMEEK@px_heapsize_avg?$AA@		; `string'
PUBLIC	??_C@_0M@NMKIGMIF@px_execount?$AA@		; `string'
PUBLIC	??_C@_09LGHALADL@co_lnotab?$AA@			; `string'
PUBLIC	??_C@_0P@JJJJHJMP@co_firstlineno?$AA@		; `string'
PUBLIC	??_C@_07LJICJPDL@co_name?$AA@			; `string'
PUBLIC	??_C@_0M@FJDKFNEO@co_filename?$AA@		; `string'
PUBLIC	??_C@_0M@DIHPNBFP@co_cellvars?$AA@		; `string'
PUBLIC	??_C@_0M@LGABLIDJ@co_freevars?$AA@		; `string'
PUBLIC	??_C@_0M@KBDENPNM@co_varnames?$AA@		; `string'
PUBLIC	??_C@_08LFKAEBIO@co_names?$AA@			; `string'
PUBLIC	??_C@_09GCOHEAPF@co_consts?$AA@			; `string'
PUBLIC	??_C@_07KOBMBHDG@co_code?$AA@			; `string'
PUBLIC	??_C@_08OIDBGMIE@co_flags?$AA@			; `string'
PUBLIC	??_C@_0N@DPJPCAAC@co_stacksize?$AA@		; `string'
PUBLIC	??_C@_0L@LIELMDGN@co_nlocals?$AA@		; `string'
PUBLIC	??_C@_0BC@OGOCOIDC@co_kwonlyargcount?$AA@	; `string'
PUBLIC	??_C@_0M@HLFANOCM@co_argcount?$AA@		; `string'
PUBLIC	??_C@_0EA@KMGMBIME@0123456789ABCDEFGHIJKLMNOPQRSTUV@ ; `string'
PUBLIC	PyCode_Type
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
?emptystring@?1??PyCode_NewEmpty@@9@9 DQ 01H DUP (?)	; `PyCode_NewEmpty'::`2'::emptystring
?nulltuple@?1??PyCode_NewEmpty@@9@9 DQ 01H DUP (?)	; `PyCode_NewEmpty'::`2'::nulltuple
_BSS	ENDS
;	COMDAT ??_C@_04NDFOBODE@code?$AA@
CONST	SEGMENT
??_C@_04NDFOBODE@code?$AA@ DB 'code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GKIFBIPI@px_heapsize_total?$AA@
CONST	SEGMENT
??_C@_0BC@GKIFBIPI@px_heapsize_total?$AA@ DB 'px_heapsize_total', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NHEDMCIP@px_heapsize_hint?$AA@
CONST	SEGMENT
??_C@_0BB@NHEDMCIP@px_heapsize_hint?$AA@ DB 'px_heapsize_hint', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCMIMEEK@px_heapsize_avg?$AA@
CONST	SEGMENT
??_C@_0BA@KCMIMEEK@px_heapsize_avg?$AA@ DB 'px_heapsize_avg', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NMKIGMIF@px_execount?$AA@
CONST	SEGMENT
??_C@_0M@NMKIGMIF@px_execount?$AA@ DB 'px_execount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGHALADL@co_lnotab?$AA@
CONST	SEGMENT
??_C@_09LGHALADL@co_lnotab?$AA@ DB 'co_lnotab', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JJJJHJMP@co_firstlineno?$AA@
CONST	SEGMENT
??_C@_0P@JJJJHJMP@co_firstlineno?$AA@ DB 'co_firstlineno', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LJICJPDL@co_name?$AA@
CONST	SEGMENT
??_C@_07LJICJPDL@co_name?$AA@ DB 'co_name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FJDKFNEO@co_filename?$AA@
CONST	SEGMENT
??_C@_0M@FJDKFNEO@co_filename?$AA@ DB 'co_filename', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DIHPNBFP@co_cellvars?$AA@
CONST	SEGMENT
??_C@_0M@DIHPNBFP@co_cellvars?$AA@ DB 'co_cellvars', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LGABLIDJ@co_freevars?$AA@
CONST	SEGMENT
??_C@_0M@LGABLIDJ@co_freevars?$AA@ DB 'co_freevars', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KBDENPNM@co_varnames?$AA@
CONST	SEGMENT
??_C@_0M@KBDENPNM@co_varnames?$AA@ DB 'co_varnames', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LFKAEBIO@co_names?$AA@
CONST	SEGMENT
??_C@_08LFKAEBIO@co_names?$AA@ DB 'co_names', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GCOHEAPF@co_consts?$AA@
CONST	SEGMENT
??_C@_09GCOHEAPF@co_consts?$AA@ DB 'co_consts', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOBMBHDG@co_code?$AA@
CONST	SEGMENT
??_C@_07KOBMBHDG@co_code?$AA@ DB 'co_code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OIDBGMIE@co_flags?$AA@
CONST	SEGMENT
??_C@_08OIDBGMIE@co_flags?$AA@ DB 'co_flags', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DPJPCAAC@co_stacksize?$AA@
CONST	SEGMENT
??_C@_0N@DPJPCAAC@co_stacksize?$AA@ DB 'co_stacksize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LIELMDGN@co_nlocals?$AA@
CONST	SEGMENT
??_C@_0L@LIELMDGN@co_nlocals?$AA@ DB 'co_nlocals', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OGOCOIDC@co_kwonlyargcount?$AA@
CONST	SEGMENT
??_C@_0BC@OGOCOIDC@co_kwonlyargcount?$AA@ DB 'co_kwonlyargcount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLFANOCM@co_argcount?$AA@
CONST	SEGMENT
??_C@_0M@HLFANOCM@co_argcount?$AA@ DB 'co_argcount', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?name_chars@?1??all_name_chars@@9@9 DQ FLAT:??_C@_0EA@KMGMBIME@0123456789ABCDEFGHIJKLMNOPQRSTUV@ ; `all_name_chars'::`2'::name_chars
	ORG $+8
code_memberlist DQ FLAT:??_C@_0M@HLFANOCM@co_argcount?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BC@OGOCOIDC@co_kwonlyargcount?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000064H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@LIELMDGN@co_nlocals?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@DPJPCAAC@co_stacksize?$AA@
	DD	01H
	ORG $+4
	DQ	000000000000006cH
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08OIDBGMIE@co_flags?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07KOBMBHDG@co_code?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09GCOHEAPF@co_consts?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08LFKAEBIO@co_names?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@KBDENPNM@co_varnames?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000090H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@LGABLIDJ@co_freevars?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000098H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@DIHPNBFP@co_cellvars?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000a0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@FJDKFNEO@co_filename?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000b0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07LJICJPDL@co_name?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000b8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@JJJJHJMP@co_firstlineno?$AA@
	DD	01H
	ORG $+4
	DQ	00000000000000c0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09LGHALADL@co_lnotab?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000c8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@NMKIGMIF@px_execount?$AA@
	DD	013H
	ORG $+4
	DQ	00000000000000e0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BA@KCMIMEEK@px_heapsize_avg?$AA@
	DD	013H
	ORG $+4
	DQ	00000000000000e8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@NHEDMCIP@px_heapsize_hint?$AA@
	DD	013H
	ORG $+4
	DQ	00000000000000f0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BC@GKIFBIPI@px_heapsize_total?$AA@
	DD	013H
	ORG $+4
	DQ	00000000000000f8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
code_doc DB	'code(argcount, kwonlyargcount, nlocals, stacksize, flags'
	DB	', codestring,', 0aH, '      constants, names, varnames, filen'
	DB	'ame, name, firstlineno,', 0aH, '      lnotab[, freevars[, cel'
	DB	'lvars]])', 0aH, 0aH, 'Create a code object.  Not for the fain'
	DB	't of heart.', 00H
	ORG $+1
code_methods DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:code_sizeof
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyCode_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04NDFOBODE@code?$AA@
	DQ	0000000000000110H
	DQ	0000000000000000H
	DQ	FLAT:code_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:code_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:code_hash
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:code_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:code_richcompare
	DQ	00000000000000d8H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:code_methods
	DQ	FLAT:code_memberlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:code_new
	ORG $+72
_DATA	ENDS
;	COMDAT ??_C@_0EA@KMGMBIME@0123456789ABCDEFGHIJKLMNOPQRSTUV@
CONST	SEGMENT
??_C@_0EA@KMGMBIME@0123456789ABCDEFGHIJKLMNOPQRSTUV@ DB '0123456789ABCDEF'
	DB	'GHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz', 00H ; `string'
CONST	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0L@MAGENHEB@PyCode_New?$AA@		; `string'
PUBLIC	??_C@_0BI@MOGPFDIH@?4?4?2Objects?2codeobject?4c?$AA@ ; `string'
PUBLIC	PyCode_New
EXTRN	_PyMem_DebugFree:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	PyUnicode_Compare:PROC
EXTRN	memset:PROC
EXTRN	_PyMem_DebugMalloc:PROC
EXTRN	_PxMem_Malloc:PROC
EXTRN	PyUnicode_InternInPlace:PROC
EXTRN	PyTuple_GetItem:PROC
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	PyObject_CheckReadBuffer:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\codeobject.c
pdata	SEGMENT
$pdata$PyCode_New DD imagerel $LN32
	DD	imagerel $LN32+1781
	DD	imagerel $unwind$PyCode_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCode_New DD 021901H
	DD	0130119H
xdata	ENDS
;	COMDAT ??_C@_0L@MAGENHEB@PyCode_New?$AA@
CONST	SEGMENT
??_C@_0L@MAGENHEB@PyCode_New?$AA@ DB 'PyCode_New', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MOGPFDIH@?4?4?2Objects?2codeobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@MOGPFDIH@?4?4?2Objects?2codeobject?4c?$AA@ DB '..\Objects\codeo'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCode_New
_TEXT	SEGMENT
i$ = 32
cell2arg$ = 40
co$ = 48
n_cellvars$ = 56
v$20474 = 64
total_args$20478 = 72
alloc_size$20479 = 80
used_cell2arg$20481 = 88
cell$20491 = 96
j$20490 = 104
arg$20496 = 112
tv173 = 120
tv177 = 124
tv186 = 128
tv211 = 136
tv220 = 140
argcount$ = 160
kwonlyargcount$ = 168
nlocals$ = 176
stacksize$ = 184
flags$ = 192
code$ = 200
consts$ = 208
names$ = 216
varnames$ = 224
freevars$ = 232
cellvars$ = 240
filename$ = 248
name$ = 256
firstlineno$ = 264
lnotab$ = 272
PyCode_New PROC						; COMDAT

; 57   : {

$LN32:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 58   :     PyCodeObject *co;
; 59   :     unsigned char *cell2arg = NULL;

  00019	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR cell2arg$[rsp], 0

; 60   :     Py_ssize_t i, n_cellvars;
; 61   : 
; 62   :     Py_GUARD

  00022	e8 00 00 00 00	 call	 _Py_PXCTX
  00027	85 c0		 test	 eax, eax
  00029	74 1c		 je	 SHORT $LN18@PyCode_New
  0002b	45 33 c9	 xor	 r9d, r9d
  0002e	41 b8 3e 00 00
	00		 mov	 r8d, 62			; 0000003eH
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@MOGPFDIH@?4?4?2Objects?2codeobject?4c?$AA@
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@MAGENHEB@PyCode_New?$AA@
  00042	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN18@PyCode_New:

; 63   : 
; 64   :     /* Check argument types */
; 65   :     if (argcount < 0 || kwonlyargcount < 0 || nlocals < 0 ||
; 66   :         code == NULL ||
; 67   :         consts == NULL || !PyTuple_Check(consts) ||
; 68   :         names == NULL || !PyTuple_Check(names) ||
; 69   :         varnames == NULL || !PyTuple_Check(varnames) ||
; 70   :         freevars == NULL || !PyTuple_Check(freevars) ||
; 71   :         cellvars == NULL || !PyTuple_Check(cellvars) ||
; 72   :         name == NULL || !PyUnicode_Check(name) ||
; 73   :         filename == NULL || !PyUnicode_Check(filename) ||
; 74   :         lnotab == NULL || !PyBytes_Check(lnotab) ||
; 75   :         !PyObject_CheckReadBuffer(code)) {

  00047	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR argcount$[rsp], 0
  0004f	0f 8c 94 01 00
	00		 jl	 $LN16@PyCode_New
  00055	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR kwonlyargcount$[rsp], 0
  0005d	0f 8c 86 01 00
	00		 jl	 $LN16@PyCode_New
  00063	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR nlocals$[rsp], 0
  0006b	0f 8c 78 01 00
	00		 jl	 $LN16@PyCode_New
  00071	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR code$[rsp], 0
  0007a	0f 84 69 01 00
	00		 je	 $LN16@PyCode_New
  00080	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR consts$[rsp], 0
  00089	0f 84 5a 01 00
	00		 je	 $LN16@PyCode_New
  0008f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR consts$[rsp]
  00097	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0009b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a1	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  000a6	85 c0		 test	 eax, eax
  000a8	0f 84 3b 01 00
	00		 je	 $LN16@PyCode_New
  000ae	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR names$[rsp], 0
  000b7	0f 84 2c 01 00
	00		 je	 $LN16@PyCode_New
  000bd	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR names$[rsp]
  000c5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000cf	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  000d4	85 c0		 test	 eax, eax
  000d6	0f 84 0d 01 00
	00		 je	 $LN16@PyCode_New
  000dc	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR varnames$[rsp], 0
  000e5	0f 84 fe 00 00
	00		 je	 $LN16@PyCode_New
  000eb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR varnames$[rsp]
  000f3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000fd	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00102	85 c0		 test	 eax, eax
  00104	0f 84 df 00 00
	00		 je	 $LN16@PyCode_New
  0010a	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR freevars$[rsp], 0
  00113	0f 84 d0 00 00
	00		 je	 $LN16@PyCode_New
  00119	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR freevars$[rsp]
  00121	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00125	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0012b	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00130	85 c0		 test	 eax, eax
  00132	0f 84 b1 00 00
	00		 je	 $LN16@PyCode_New
  00138	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR cellvars$[rsp], 0
  00141	0f 84 a2 00 00
	00		 je	 $LN16@PyCode_New
  00147	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR cellvars$[rsp]
  0014f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00153	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00159	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0015e	85 c0		 test	 eax, eax
  00160	0f 84 83 00 00
	00		 je	 $LN16@PyCode_New
  00166	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR name$[rsp], 0
  0016f	74 78		 je	 SHORT $LN16@PyCode_New
  00171	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00179	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0017d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00183	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00188	85 c0		 test	 eax, eax
  0018a	74 5d		 je	 SHORT $LN16@PyCode_New
  0018c	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00195	74 52		 je	 SHORT $LN16@PyCode_New
  00197	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  0019f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001a3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001a9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001ae	85 c0		 test	 eax, eax
  001b0	74 37		 je	 SHORT $LN16@PyCode_New
  001b2	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR lnotab$[rsp], 0
  001bb	74 2c		 je	 SHORT $LN16@PyCode_New
  001bd	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR lnotab$[rsp]
  001c5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001c9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001cf	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001d4	85 c0		 test	 eax, eax
  001d6	74 11		 je	 SHORT $LN16@PyCode_New
  001d8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  001e0	e8 00 00 00 00	 call	 PyObject_CheckReadBuffer
  001e5	85 c0		 test	 eax, eax
  001e7	75 18		 jne	 SHORT $LN17@PyCode_New
$LN16@PyCode_New:

; 76   :         PyErr_BadInternalCall();

  001e9	ba 4c 00 00 00	 mov	 edx, 76			; 0000004cH
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@MOGPFDIH@?4?4?2Objects?2codeobject?4c?$AA@
  001f5	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 77   :         return NULL;

  001fa	33 c0		 xor	 eax, eax
  001fc	e9 ec 04 00 00	 jmp	 $LN19@PyCode_New
$LN17@PyCode_New:

; 78   :     }
; 79   :     n_cellvars = PyTuple_GET_SIZE(cellvars);

  00201	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR cellvars$[rsp]
  00209	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0020d	48 89 44 24 38	 mov	 QWORD PTR n_cellvars$[rsp], rax

; 80   :     intern_strings(names);

  00212	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR names$[rsp]
  0021a	e8 00 00 00 00	 call	 intern_strings

; 81   :     intern_strings(varnames);

  0021f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR varnames$[rsp]
  00227	e8 00 00 00 00	 call	 intern_strings

; 82   :     intern_strings(freevars);

  0022c	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR freevars$[rsp]
  00234	e8 00 00 00 00	 call	 intern_strings

; 83   :     intern_strings(cellvars);

  00239	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR cellvars$[rsp]
  00241	e8 00 00 00 00	 call	 intern_strings

; 84   :     /* Intern selected string constants */
; 85   :     for (i = PyTuple_GET_SIZE(consts); --i >= 0; ) {

  00246	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR consts$[rsp]
  0024e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00252	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN31@PyCode_New:
$LN15@PyCode_New:
  00257	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0025c	48 ff c8	 dec	 rax
  0025f	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
  00264	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  0026a	7c 43		 jl	 SHORT $LN14@PyCode_New

; 86   :         PyObject *v = PyTuple_GetItem(consts, i);

  0026c	48 8b 54 24 20	 mov	 rdx, QWORD PTR i$[rsp]
  00271	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  00279	e8 00 00 00 00	 call	 PyTuple_GetItem
  0027e	48 89 44 24 40	 mov	 QWORD PTR v$20474[rsp], rax

; 87   :         if (!all_name_chars(v))

  00283	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$20474[rsp]
  00288	e8 00 00 00 00	 call	 all_name_chars
  0028d	85 c0		 test	 eax, eax
  0028f	75 02		 jne	 SHORT $LN13@PyCode_New

; 88   :             continue;

  00291	eb c4		 jmp	 SHORT $LN15@PyCode_New
$LN13@PyCode_New:

; 89   :         PyUnicode_InternInPlace(&PyTuple_GET_ITEM(consts, i));

  00293	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR consts$[rsp]
  0029b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  002a0	48 8d 44 c8 70	 lea	 rax, QWORD PTR [rax+rcx*8+112]
  002a5	48 8b c8	 mov	 rcx, rax
  002a8	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 90   :     }

  002ad	eb a8		 jmp	 SHORT $LN31@PyCode_New
$LN14@PyCode_New:

; 91   :     /* Create mapping between cells and arguments if needed. */
; 92   :     if (n_cellvars) {

  002af	48 83 7c 24 38
	00		 cmp	 QWORD PTR n_cellvars$[rsp], 0
  002b5	0f 84 cc 01 00
	00		 je	 $LN12@PyCode_New

; 93   :         Py_ssize_t total_args = argcount + kwonlyargcount +
; 94   :             ((flags & CO_VARARGS) != 0) + ((flags & CO_VARKEYWORDS) != 0);

  002bb	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  002c2	83 e0 04	 and	 eax, 4
  002c5	85 c0		 test	 eax, eax
  002c7	74 0a		 je	 SHORT $LN21@PyCode_New
  002c9	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv173[rsp], 1
  002d1	eb 08		 jmp	 SHORT $LN22@PyCode_New
$LN21@PyCode_New:
  002d3	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv173[rsp], 0
$LN22@PyCode_New:
  002db	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  002e2	83 e0 08	 and	 eax, 8
  002e5	85 c0		 test	 eax, eax
  002e7	74 0a		 je	 SHORT $LN23@PyCode_New
  002e9	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR tv177[rsp], 1
  002f1	eb 08		 jmp	 SHORT $LN24@PyCode_New
$LN23@PyCode_New:
  002f3	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv177[rsp], 0
$LN24@PyCode_New:
  002fb	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR kwonlyargcount$[rsp]
  00302	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR argcount$[rsp]
  00309	03 c8		 add	 ecx, eax
  0030b	8b c1		 mov	 eax, ecx
  0030d	03 44 24 78	 add	 eax, DWORD PTR tv173[rsp]
  00311	03 44 24 7c	 add	 eax, DWORD PTR tv177[rsp]
  00315	48 98		 cdqe
  00317	48 89 44 24 48	 mov	 QWORD PTR total_args$20478[rsp], rax

; 95   :         Py_ssize_t alloc_size = sizeof(unsigned char) * n_cellvars;

  0031c	48 8b 44 24 38	 mov	 rax, QWORD PTR n_cellvars$[rsp]
  00321	48 89 44 24 50	 mov	 QWORD PTR alloc_size$20479[rsp], rax

; 96   :         int used_cell2arg = 0;

  00326	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR used_cell2arg$20481[rsp], 0

; 97   :         cell2arg = PyMem_MALLOC(alloc_size);

  0032e	e8 00 00 00 00	 call	 _Py_PXCTX
  00333	85 c0		 test	 eax, eax
  00335	74 14		 je	 SHORT $LN25@PyCode_New
  00337	48 8b 4c 24 50	 mov	 rcx, QWORD PTR alloc_size$20479[rsp]
  0033c	e8 00 00 00 00	 call	 _PxMem_Malloc
  00341	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv186[rsp], rax
  00349	eb 12		 jmp	 SHORT $LN26@PyCode_New
$LN25@PyCode_New:
  0034b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR alloc_size$20479[rsp]
  00350	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  00355	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv186[rsp], rax
$LN26@PyCode_New:
  0035d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv186[rsp]
  00365	48 89 44 24 28	 mov	 QWORD PTR cell2arg$[rsp], rax

; 98   :         if (cell2arg == NULL)

  0036a	48 83 7c 24 28
	00		 cmp	 QWORD PTR cell2arg$[rsp], 0
  00370	75 07		 jne	 SHORT $LN11@PyCode_New

; 99   :             return NULL;

  00372	33 c0		 xor	 eax, eax
  00374	e9 74 03 00 00	 jmp	 $LN19@PyCode_New
$LN11@PyCode_New:

; 100  :         memset(cell2arg, CO_CELL_NOT_AN_ARG, alloc_size);

  00379	4c 8b 44 24 50	 mov	 r8, QWORD PTR alloc_size$20479[rsp]
  0037e	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  00383	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cell2arg$[rsp]
  00388	e8 00 00 00 00	 call	 memset

; 101  :         /* Find cells which are also arguments. */
; 102  :         for (i = 0; i < n_cellvars; i++) {

  0038d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00396	eb 0d		 jmp	 SHORT $LN10@PyCode_New
$LN9@PyCode_New:
  00398	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0039d	48 ff c0	 inc	 rax
  003a0	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN10@PyCode_New:
  003a5	48 8b 44 24 38	 mov	 rax, QWORD PTR n_cellvars$[rsp]
  003aa	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  003af	0f 8d 8d 00 00
	00		 jge	 $LN8@PyCode_New

; 103  :             Py_ssize_t j;
; 104  :             PyObject *cell = PyTuple_GET_ITEM(cellvars, i);

  003b5	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR cellvars$[rsp]
  003bd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  003c2	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  003c7	48 89 44 24 60	 mov	 QWORD PTR cell$20491[rsp], rax

; 105  :             for (j = 0; j < total_args; j++) {

  003cc	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR j$20490[rsp], 0
  003d5	eb 0d		 jmp	 SHORT $LN7@PyCode_New
$LN6@PyCode_New:
  003d7	48 8b 44 24 68	 mov	 rax, QWORD PTR j$20490[rsp]
  003dc	48 ff c0	 inc	 rax
  003df	48 89 44 24 68	 mov	 QWORD PTR j$20490[rsp], rax
$LN7@PyCode_New:
  003e4	48 8b 44 24 48	 mov	 rax, QWORD PTR total_args$20478[rsp]
  003e9	48 39 44 24 68	 cmp	 QWORD PTR j$20490[rsp], rax
  003ee	7d 4d		 jge	 SHORT $LN5@PyCode_New

; 106  :                 PyObject *arg = PyTuple_GET_ITEM(varnames, j);

  003f0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR varnames$[rsp]
  003f8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR j$20490[rsp]
  003fd	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00402	48 89 44 24 70	 mov	 QWORD PTR arg$20496[rsp], rax

; 107  :                 if (!PyUnicode_Compare(cell, arg)) {

  00407	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$20496[rsp]
  0040c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cell$20491[rsp]
  00411	e8 00 00 00 00	 call	 PyUnicode_Compare
  00416	85 c0		 test	 eax, eax
  00418	75 21		 jne	 SHORT $LN4@PyCode_New

; 108  :                     cell2arg[i] = j;

  0041a	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0041f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cell2arg$[rsp]
  00424	48 03 c8	 add	 rcx, rax
  00427	48 8b c1	 mov	 rax, rcx
  0042a	0f b6 4c 24 68	 movzx	 ecx, BYTE PTR j$20490[rsp]
  0042f	88 08		 mov	 BYTE PTR [rax], cl

; 109  :                     used_cell2arg = 1;

  00431	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR used_cell2arg$20481[rsp], 1

; 110  :                     break;

  00439	eb 02		 jmp	 SHORT $LN5@PyCode_New
$LN4@PyCode_New:

; 111  :                 }
; 112  :             }

  0043b	eb 9a		 jmp	 SHORT $LN6@PyCode_New
$LN5@PyCode_New:

; 113  :         }

  0043d	e9 56 ff ff ff	 jmp	 $LN9@PyCode_New
$LN8@PyCode_New:

; 114  :         if (!used_cell2arg) {

  00442	83 7c 24 58 00	 cmp	 DWORD PTR used_cell2arg$20481[rsp], 0
  00447	75 3e		 jne	 SHORT $LN3@PyCode_New

; 115  :             PyMem_FREE(cell2arg);

  00449	e8 00 00 00 00	 call	 _Py_PXCTX
  0044e	85 c0		 test	 eax, eax
  00450	74 17		 je	 SHORT $LN27@PyCode_New
  00452	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cell2arg$[rsp]
  00457	e8 00 00 00 00	 call	 _PxMem_Free
  0045c	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv211[rsp], 0
  00467	eb 15		 jmp	 SHORT $LN28@PyCode_New
$LN27@PyCode_New:
  00469	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cell2arg$[rsp]
  0046e	e8 00 00 00 00	 call	 _PyMem_DebugFree
  00473	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv211[rsp], 0
$LN28@PyCode_New:

; 116  :             cell2arg = NULL;

  0047e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR cell2arg$[rsp], 0
$LN3@PyCode_New:
$LN12@PyCode_New:

; 117  :         }
; 118  :     }
; 119  :     co = PyObject_NEW(PyCodeObject, &PyCode_Type);

  00487	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCode_Type
  0048e	e8 00 00 00 00	 call	 _PyObject_NEW
  00493	48 89 44 24 30	 mov	 QWORD PTR co$[rsp], rax

; 120  :     if (co == NULL) {

  00498	48 83 7c 24 30
	00		 cmp	 QWORD PTR co$[rsp], 0
  0049e	75 44		 jne	 SHORT $LN2@PyCode_New

; 121  :         if (cell2arg)

  004a0	48 83 7c 24 28
	00		 cmp	 QWORD PTR cell2arg$[rsp], 0
  004a6	74 35		 je	 SHORT $LN1@PyCode_New

; 122  :             PyMem_FREE(cell2arg);

  004a8	e8 00 00 00 00	 call	 _Py_PXCTX
  004ad	85 c0		 test	 eax, eax
  004af	74 17		 je	 SHORT $LN29@PyCode_New
  004b1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cell2arg$[rsp]
  004b6	e8 00 00 00 00	 call	 _PxMem_Free
  004bb	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv220[rsp], 0
  004c6	eb 15		 jmp	 SHORT $LN30@PyCode_New
$LN29@PyCode_New:
  004c8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cell2arg$[rsp]
  004cd	e8 00 00 00 00	 call	 _PyMem_DebugFree
  004d2	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv220[rsp], 0
$LN30@PyCode_New:
$LN1@PyCode_New:

; 123  :         return NULL;

  004dd	33 c0		 xor	 eax, eax
  004df	e9 09 02 00 00	 jmp	 $LN19@PyCode_New
$LN2@PyCode_New:

; 124  :     }
; 125  :     co->co_argcount = argcount;

  004e4	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  004e9	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR argcount$[rsp]
  004f0	89 48 60	 mov	 DWORD PTR [rax+96], ecx

; 126  :     co->co_kwonlyargcount = kwonlyargcount;

  004f3	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  004f8	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR kwonlyargcount$[rsp]
  004ff	89 48 64	 mov	 DWORD PTR [rax+100], ecx

; 127  :     co->co_nlocals = nlocals;

  00502	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00507	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR nlocals$[rsp]
  0050e	89 48 68	 mov	 DWORD PTR [rax+104], ecx

; 128  :     co->co_stacksize = stacksize;

  00511	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00516	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR stacksize$[rsp]
  0051d	89 48 6c	 mov	 DWORD PTR [rax+108], ecx

; 129  :     co->co_flags = flags;

  00520	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00525	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR flags$[rsp]
  0052c	89 48 70	 mov	 DWORD PTR [rax+112], ecx

; 130  :     Py_INCREF(code);

  0052f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  00537	e8 00 00 00 00	 call	 _Py_IncRef

; 131  :     co->co_code = code;

  0053c	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00541	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  00549	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 132  :     Py_INCREF(consts);

  0054d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  00555	e8 00 00 00 00	 call	 _Py_IncRef

; 133  :     co->co_consts = consts;

  0055a	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  0055f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  00567	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 134  :     Py_INCREF(names);

  0056e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR names$[rsp]
  00576	e8 00 00 00 00	 call	 _Py_IncRef

; 135  :     co->co_names = names;

  0057b	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00580	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR names$[rsp]
  00588	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 136  :     Py_INCREF(varnames);

  0058f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR varnames$[rsp]
  00597	e8 00 00 00 00	 call	 _Py_IncRef

; 137  :     co->co_varnames = varnames;

  0059c	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  005a1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR varnames$[rsp]
  005a9	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx

; 138  :     Py_INCREF(freevars);

  005b0	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR freevars$[rsp]
  005b8	e8 00 00 00 00	 call	 _Py_IncRef

; 139  :     co->co_freevars = freevars;

  005bd	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  005c2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR freevars$[rsp]
  005ca	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 140  :     Py_INCREF(cellvars);

  005d1	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR cellvars$[rsp]
  005d9	e8 00 00 00 00	 call	 _Py_IncRef

; 141  :     co->co_cellvars = cellvars;

  005de	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  005e3	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR cellvars$[rsp]
  005eb	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx

; 142  :     co->co_cell2arg = cell2arg;

  005f2	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  005f7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cell2arg$[rsp]
  005fc	48 89 88 a8 00
	00 00		 mov	 QWORD PTR [rax+168], rcx

; 143  :     Py_INCREF(filename);

  00603	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  0060b	e8 00 00 00 00	 call	 _Py_IncRef

; 144  :     co->co_filename = filename;

  00610	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00615	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  0061d	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx

; 145  :     Py_INCREF(name);

  00624	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  0062c	e8 00 00 00 00	 call	 _Py_IncRef

; 146  :     co->co_name = name;

  00631	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00636	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  0063e	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx

; 147  :     co->co_firstlineno = firstlineno;

  00645	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  0064a	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR firstlineno$[rsp]
  00651	89 88 c0 00 00
	00		 mov	 DWORD PTR [rax+192], ecx

; 148  :     Py_INCREF(lnotab);

  00657	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR lnotab$[rsp]
  0065f	e8 00 00 00 00	 call	 _Py_IncRef

; 149  :     co->co_lnotab = lnotab;

  00664	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00669	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR lnotab$[rsp]
  00671	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx

; 150  :     co->co_zombieframe = NULL;

  00678	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  0067d	48 c7 80 d0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+208], 0

; 151  :     co->co_weakreflist = NULL;

  00688	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  0068d	48 c7 80 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+216], 0

; 152  : #ifdef WITH_PARALLEL
; 153  :     co->px_execount       = 0;

  00698	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  0069d	48 c7 80 e0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+224], 0

; 154  :     co->px_heapsize_avg   = 0;

  006a8	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  006ad	48 c7 80 e8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+232], 0

; 155  :     co->px_heapsize_hint  = 0;

  006b8	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  006bd	48 c7 80 f0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+240], 0

; 156  :     co->px_heapsize_total = 0;

  006c8	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  006cd	48 c7 80 f8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+248], 0

; 157  :     co->px = NULL;

  006d8	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  006dd	48 c7 80 00 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+256], 0

; 158  : #endif
; 159  :     return co;

  006e8	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
$LN19@PyCode_New:

; 160  : }

  006ed	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  006f4	c3		 ret	 0
PyCode_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	PyObject_Init:PROC
EXTRN	_PyObject_DebugMalloc:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$_PyObject_NEW DD imagerel _PyObject_NEW
	DD	imagerel _PyObject_NEW+62
	DD	imagerel $unwind$_PyObject_NEW
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_NEW DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_NEW
_TEXT	SEGMENT
tp$ = 48
_PyObject_NEW PROC					; COMDAT

; 293  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 294  :     Px_RETURN(_PxObject_New(tp))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0c		 je	 SHORT $LN1@PyObject_N
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tp$[rsp]
  00017	e8 00 00 00 00	 call	 _PxObject_New
  0001c	eb 1b		 jmp	 SHORT $LN2@PyObject_N
$LN1@PyObject_N:

; 295  :     return PyObject_Init((PyObject *)PyObject_MALLOC(_PyObject_SIZE(tp)), tp);

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR tp$[rsp]
  00023	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00027	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  0002c	48 8b 54 24 30	 mov	 rdx, QWORD PTR tp$[rsp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 PyObject_Init
$LN2@PyObject_N:

; 296  : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
_PyObject_NEW ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EE@OPHAAKLN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAu?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@ ; `string'
PUBLIC	??_C@_1CM@LIMMILAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@BMKLJDHP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	_PyUnicode_Ready:PROC
EXTRN	__imp__wassert:PROC
_BSS	SEGMENT
?ok_name_char@?1??all_name_chars@@9@9 DB 0100H DUP (?)	; `all_name_chars'::`2'::ok_name_char
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\codeobject.c
pdata	SEGMENT
$pdata$all_name_chars DD imagerel all_name_chars
	DD	imagerel all_name_chars+1080
	DD	imagerel $unwind$all_name_chars
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$all_name_chars DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_1EE@OPHAAKLN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAu?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@
CONST	SEGMENT
??_C@_1EE@OPHAAKLN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAu?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'u', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@LIMMILAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@LIMMILAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'u', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BMKLJDHP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@BMKLJDHP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'u', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT all_name_chars
_TEXT	SEGMENT
s$ = 32
u$ = 40
p$20368 = 48
tv82 = 56
tv186 = 60
tv184 = 64
tv183 = 68
tv230 = 72
tv239 = 80
o$ = 112
all_name_chars PROC					; COMDAT

; 12   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 13   :     static char ok_name_char[256];
; 14   :     static unsigned char *name_chars = (unsigned char *)NAME_CHARS;
; 15   :     PyUnicodeObject *u = (PyUnicodeObject *)o;

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR o$[rsp]
  0000e	48 89 44 24 28	 mov	 QWORD PTR u$[rsp], rax

; 16   :     const unsigned char *s;
; 17   : 
; 18   :     if (!PyUnicode_Check(o) || PyUnicode_READY(u) == -1 ||
; 19   :         PyUnicode_MAX_CHAR_VALUE(u) >= 128)

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR o$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00022	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00027	85 c0		 test	 eax, eax
  00029	0f 84 3b 02 00
	00		 je	 $LN8@all_name_c
  0002f	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  00034	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00038	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00043	85 c0		 test	 eax, eax
  00045	75 1c		 jne	 SHORT $LN12@all_name_c
  00047	41 b8 12 00 00
	00		 mov	 r8d, 18
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BMKLJDHP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00061	33 c0		 xor	 eax, eax
$LN12@all_name_c:
  00063	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  00068	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0006b	c1 e8 07	 shr	 eax, 7
  0006e	83 e0 01	 and	 eax, 1
  00071	85 c0		 test	 eax, eax
  00073	74 0a		 je	 SHORT $LN13@all_name_c
  00075	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  0007d	eb 0e		 jmp	 SHORT $LN14@all_name_c
$LN13@all_name_c:
  0007f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR u$[rsp]
  00084	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00089	89 44 24 38	 mov	 DWORD PTR tv82[rsp], eax
$LN14@all_name_c:
  0008d	83 7c 24 38 ff	 cmp	 DWORD PTR tv82[rsp], -1
  00092	0f 84 d2 01 00
	00		 je	 $LN8@all_name_c
  00098	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  0009d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000a0	c1 e8 07	 shr	 eax, 7
  000a3	83 e0 01	 and	 eax, 1
  000a6	85 c0		 test	 eax, eax
  000a8	75 1c		 jne	 SHORT $LN15@all_name_c
  000aa	41 b8 13 00 00
	00		 mov	 r8d, 19
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@LIMMILAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c4	33 c0		 xor	 eax, eax
$LN15@all_name_c:
  000c6	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  000cb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000cf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000da	85 c0		 test	 eax, eax
  000dc	75 1c		 jne	 SHORT $LN16@all_name_c
  000de	41 b8 13 00 00
	00		 mov	 r8d, 19
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BMKLJDHP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
  000f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f8	33 c0		 xor	 eax, eax
$LN16@all_name_c:
  000fa	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  000ff	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00102	c1 e8 07	 shr	 eax, 7
  00105	83 e0 01	 and	 eax, 1
  00108	85 c0		 test	 eax, eax
  0010a	75 1c		 jne	 SHORT $LN17@all_name_c
  0010c	41 b8 13 00 00
	00		 mov	 r8d, 19
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@LIMMILAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00126	33 c0		 xor	 eax, eax
$LN17@all_name_c:
  00128	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  0012d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00130	c1 e8 06	 shr	 eax, 6
  00133	83 e0 01	 and	 eax, 1
  00136	85 c0		 test	 eax, eax
  00138	74 0d		 je	 SHORT $LN26@all_name_c
  0013a	c7 44 24 3c 7f
	00 00 00	 mov	 DWORD PTR tv186[rsp], 127 ; 0000007fH
  00142	e9 19 01 00 00	 jmp	 $LN27@all_name_c
$LN26@all_name_c:
  00147	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  0014c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00150	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00156	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0015b	85 c0		 test	 eax, eax
  0015d	75 1c		 jne	 SHORT $LN18@all_name_c
  0015f	41 b8 13 00 00
	00		 mov	 r8d, 19
  00165	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BMKLJDHP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
  00173	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00179	33 c0		 xor	 eax, eax
$LN18@all_name_c:
  0017b	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  00180	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00183	c1 e8 07	 shr	 eax, 7
  00186	83 e0 01	 and	 eax, 1
  00189	85 c0		 test	 eax, eax
  0018b	75 1c		 jne	 SHORT $LN19@all_name_c
  0018d	41 b8 13 00 00
	00		 mov	 r8d, 19
  00193	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0019a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@LIMMILAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
  001a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a7	33 c0		 xor	 eax, eax
$LN19@all_name_c:
  001a9	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  001ae	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001b1	c1 e8 02	 shr	 eax, 2
  001b4	83 e0 07	 and	 eax, 7
  001b7	83 f8 01	 cmp	 eax, 1
  001ba	75 0d		 jne	 SHORT $LN24@all_name_c
  001bc	c7 44 24 40 ff
	00 00 00	 mov	 DWORD PTR tv184[rsp], 255 ; 000000ffH
  001c4	e9 8f 00 00 00	 jmp	 $LN25@all_name_c
$LN24@all_name_c:
  001c9	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  001ce	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001d2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001d8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001dd	85 c0		 test	 eax, eax
  001df	75 1c		 jne	 SHORT $LN20@all_name_c
  001e1	41 b8 13 00 00
	00		 mov	 r8d, 19
  001e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BMKLJDHP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001fb	33 c0		 xor	 eax, eax
$LN20@all_name_c:
  001fd	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  00202	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00205	c1 e8 07	 shr	 eax, 7
  00208	83 e0 01	 and	 eax, 1
  0020b	85 c0		 test	 eax, eax
  0020d	75 1c		 jne	 SHORT $LN21@all_name_c
  0020f	41 b8 13 00 00
	00		 mov	 r8d, 19
  00215	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0021c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@LIMMILAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
  00223	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00229	33 c0		 xor	 eax, eax
$LN21@all_name_c:
  0022b	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  00230	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00233	c1 e8 02	 shr	 eax, 2
  00236	83 e0 07	 and	 eax, 7
  00239	83 f8 02	 cmp	 eax, 2
  0023c	75 0a		 jne	 SHORT $LN22@all_name_c
  0023e	c7 44 24 44 ff
	ff 00 00	 mov	 DWORD PTR tv183[rsp], 65535 ; 0000ffffH
  00246	eb 08		 jmp	 SHORT $LN23@all_name_c
$LN22@all_name_c:
  00248	c7 44 24 44 ff
	ff 10 00	 mov	 DWORD PTR tv183[rsp], 1114111 ; 0010ffffH
$LN23@all_name_c:
  00250	8b 44 24 44	 mov	 eax, DWORD PTR tv183[rsp]
  00254	89 44 24 40	 mov	 DWORD PTR tv184[rsp], eax
$LN25@all_name_c:
  00258	8b 44 24 40	 mov	 eax, DWORD PTR tv184[rsp]
  0025c	89 44 24 3c	 mov	 DWORD PTR tv186[rsp], eax
$LN27@all_name_c:
  00260	81 7c 24 3c 80
	00 00 00	 cmp	 DWORD PTR tv186[rsp], 128 ; 00000080H
  00268	72 07		 jb	 SHORT $LN9@all_name_c
$LN8@all_name_c:

; 20   :         return 0;

  0026a	33 c0		 xor	 eax, eax
  0026c	e9 c2 01 00 00	 jmp	 $LN10@all_name_c
$LN9@all_name_c:

; 21   : 
; 22   :     if (ok_name_char[*name_chars] == 0) {

  00271	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?name_chars@?1??all_name_chars@@9@9
  00278	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0027b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ok_name_char@?1??all_name_chars@@9@9
  00282	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00286	85 c0		 test	 eax, eax
  00288	75 3c		 jne	 SHORT $LN7@all_name_c

; 23   :         unsigned char *p;
; 24   :         for (p = name_chars; *p; p++)

  0028a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?name_chars@?1??all_name_chars@@9@9
  00291	48 89 44 24 30	 mov	 QWORD PTR p$20368[rsp], rax
  00296	eb 0d		 jmp	 SHORT $LN6@all_name_c
$LN5@all_name_c:
  00298	48 8b 44 24 30	 mov	 rax, QWORD PTR p$20368[rsp]
  0029d	48 ff c0	 inc	 rax
  002a0	48 89 44 24 30	 mov	 QWORD PTR p$20368[rsp], rax
$LN6@all_name_c:
  002a5	48 8b 44 24 30	 mov	 rax, QWORD PTR p$20368[rsp]
  002aa	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002ad	85 c0		 test	 eax, eax
  002af	74 15		 je	 SHORT $LN4@all_name_c

; 25   :             ok_name_char[*p] = 1;

  002b1	48 8b 44 24 30	 mov	 rax, QWORD PTR p$20368[rsp]
  002b6	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ok_name_char@?1??all_name_chars@@9@9
  002c0	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
  002c4	eb d2		 jmp	 SHORT $LN5@all_name_c
$LN4@all_name_c:
$LN7@all_name_c:

; 26   :     }
; 27   :     s = PyUnicode_1BYTE_DATA(u);

  002c6	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  002cb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002cf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002d5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002da	85 c0		 test	 eax, eax
  002dc	75 1c		 jne	 SHORT $LN28@all_name_c
  002de	41 b8 1b 00 00
	00		 mov	 r8d, 27
  002e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  002eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BMKLJDHP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
  002f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002f8	33 c0		 xor	 eax, eax
$LN28@all_name_c:
  002fa	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  002ff	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00302	c1 e8 05	 shr	 eax, 5
  00305	83 e0 01	 and	 eax, 1
  00308	85 c0		 test	 eax, eax
  0030a	0f 84 a2 00 00
	00		 je	 $LN34@all_name_c
  00310	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  00315	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00319	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0031f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00324	85 c0		 test	 eax, eax
  00326	75 1c		 jne	 SHORT $LN29@all_name_c
  00328	41 b8 1b 00 00
	00		 mov	 r8d, 27
  0032e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00335	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BMKLJDHP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
  0033c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00342	33 c0		 xor	 eax, eax
$LN29@all_name_c:
  00344	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  00349	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0034c	c1 e8 07	 shr	 eax, 7
  0034f	83 e0 01	 and	 eax, 1
  00352	85 c0		 test	 eax, eax
  00354	75 1c		 jne	 SHORT $LN30@all_name_c
  00356	41 b8 1b 00 00
	00		 mov	 r8d, 27
  0035c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00363	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@LIMMILAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AA?$CJ?$AA?$AA@
  0036a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00370	33 c0		 xor	 eax, eax
$LN30@all_name_c:
  00372	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  00377	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0037a	c1 e8 06	 shr	 eax, 6
  0037d	83 e0 01	 and	 eax, 1
  00380	85 c0		 test	 eax, eax
  00382	74 12		 je	 SHORT $LN31@all_name_c
  00384	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  00389	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0038f	48 89 44 24 48	 mov	 QWORD PTR tv230[rsp], rax
  00394	eb 10		 jmp	 SHORT $LN32@all_name_c
$LN31@all_name_c:
  00396	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  0039b	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  003a1	48 89 44 24 48	 mov	 QWORD PTR tv230[rsp], rax
$LN32@all_name_c:
  003a6	48 8b 44 24 48	 mov	 rax, QWORD PTR tv230[rsp]
  003ab	48 89 44 24 50	 mov	 QWORD PTR tv239[rsp], rax
  003b0	eb 3c		 jmp	 SHORT $LN35@all_name_c
$LN34@all_name_c:
  003b2	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  003b7	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  003bf	75 1c		 jne	 SHORT $LN33@all_name_c
  003c1	41 b8 1b 00 00
	00		 mov	 r8d, 27
  003c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  003ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@OPHAAKLN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAu?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@
  003d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003db	33 c0		 xor	 eax, eax
$LN33@all_name_c:
  003dd	48 8b 44 24 28	 mov	 rax, QWORD PTR u$[rsp]
  003e2	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  003e9	48 89 44 24 50	 mov	 QWORD PTR tv239[rsp], rax
$LN35@all_name_c:
  003ee	48 8b 44 24 50	 mov	 rax, QWORD PTR tv239[rsp]
  003f3	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax
$LN3@all_name_c:

; 28   :     while (*s) {

  003f8	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  003fd	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00400	85 c0		 test	 eax, eax
  00402	74 2a		 je	 SHORT $LN2@all_name_c

; 29   :         if (ok_name_char[*s++] == 0)

  00404	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00409	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0040c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ok_name_char@?1??all_name_chars@@9@9
  00413	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00417	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0041c	48 ff c1	 inc	 rcx
  0041f	48 89 4c 24 20	 mov	 QWORD PTR s$[rsp], rcx
  00424	85 c0		 test	 eax, eax
  00426	75 04		 jne	 SHORT $LN1@all_name_c

; 30   :             return 0;

  00428	33 c0		 xor	 eax, eax
  0042a	eb 07		 jmp	 SHORT $LN10@all_name_c
$LN1@all_name_c:

; 31   :     }

  0042c	eb ca		 jmp	 SHORT $LN3@all_name_c
$LN2@all_name_c:

; 32   :     return 1;

  0042e	b8 01 00 00 00	 mov	 eax, 1
$LN10@all_name_c:

; 33   : }

  00433	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00437	c3		 ret	 0
all_name_chars ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@PIFEGBLP@non?9string?5found?5in?5code?5slot?$AA@ ; `string'
EXTRN	Py_FatalError:PROC
EXTRN	PyUnicode_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$intern_strings DD imagerel intern_strings
	DD	imagerel intern_strings+132
	DD	imagerel $unwind$intern_strings
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$intern_strings DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BO@PIFEGBLP@non?9string?5found?5in?5code?5slot?$AA@
CONST	SEGMENT
??_C@_0BO@PIFEGBLP@non?9string?5found?5in?5code?5slot?$AA@ DB 'non-string'
	DB	' found in code slot', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT intern_strings
_TEXT	SEGMENT
i$ = 32
v$20402 = 40
tuple$ = 64
intern_strings PROC					; COMDAT

; 37   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 38   :     Py_ssize_t i;
; 39   : 
; 40   :     for (i = PyTuple_GET_SIZE(tuple); --i >= 0; ) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tuple$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN4@intern_str:
  00017	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0001c	48 ff c8	 dec	 rax
  0001f	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
  00024	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  0002a	7c 53		 jl	 SHORT $LN3@intern_str

; 41   :         PyObject *v = PyTuple_GET_ITEM(tuple, i);

  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR tuple$[rsp]
  00031	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00036	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  0003b	48 89 44 24 28	 mov	 QWORD PTR v$20402[rsp], rax

; 42   :         if (v == NULL || !PyUnicode_CheckExact(v)) {

  00040	48 83 7c 24 28
	00		 cmp	 QWORD PTR v$20402[rsp], 0
  00046	74 12		 je	 SHORT $LN1@intern_str
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0004f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR v$20402[rsp]
  00054	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00058	74 0c		 je	 SHORT $LN2@intern_str
$LN1@intern_str:

; 43   :             Py_FatalError("non-string found in code slot");

  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@PIFEGBLP@non?9string?5found?5in?5code?5slot?$AA@
  00061	e8 00 00 00 00	 call	 Py_FatalError
$LN2@intern_str:

; 44   :         }
; 45   :         PyUnicode_InternInPlace(&PyTuple_GET_ITEM(tuple, i));

  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR tuple$[rsp]
  0006b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00070	48 8d 44 c8 70	 lea	 rax, QWORD PTR [rax+rcx*8+112]
  00075	48 8b c8	 mov	 rcx, rax
  00078	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 46   :     }

  0007d	eb 98		 jmp	 SHORT $LN4@intern_str
$LN3@intern_str:

; 47   : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
intern_strings ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	PyCode_NewEmpty
EXTRN	PyUnicode_DecodeFSDefault:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyBytes_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCode_NewEmpty DD imagerel $LN17
	DD	imagerel $LN17+443
	DD	imagerel $unwind$PyCode_NewEmpty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCode_NewEmpty DD 021601H
	DD	0150116H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCode_NewEmpty
_TEXT	SEGMENT
filename_ob$ = 128
funcname_ob$ = 136
result$ = 144
filename$ = 176
funcname$ = 184
firstlineno$ = 192
PyCode_NewEmpty PROC					; COMDAT

; 164  : {

$LN17:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 165  :     static PyObject *emptystring = NULL;
; 166  :     static PyObject *nulltuple = NULL;
; 167  :     PyObject *filename_ob = NULL;

  00016	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR filename_ob$[rsp], 0

; 168  :     PyObject *funcname_ob = NULL;

  00022	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR funcname_ob$[rsp], 0

; 169  :     PyCodeObject *result = NULL;

  0002e	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR result$[rsp], 0

; 170  :     if (emptystring == NULL) {

  0003a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?emptystring@?1??PyCode_NewEmpty@@9@9, 0
  00042	75 22		 jne	 SHORT $LN14@PyCode_New@2

; 171  :         emptystring = PyBytes_FromString("");

  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0004b	e8 00 00 00 00	 call	 PyBytes_FromString
  00050	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?emptystring@?1??PyCode_NewEmpty@@9@9, rax

; 172  :         if (emptystring == NULL)

  00057	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?emptystring@?1??PyCode_NewEmpty@@9@9, 0
  0005f	75 05		 jne	 SHORT $LN13@PyCode_New@2

; 173  :             goto failed;

  00061	e9 09 01 00 00	 jmp	 $failed$20542
$LN13@PyCode_New@2:
$LN14@PyCode_New@2:

; 174  :     }
; 175  :     if (nulltuple == NULL) {

  00066	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?nulltuple@?1??PyCode_NewEmpty@@9@9, 0
  0006e	75 1d		 jne	 SHORT $LN12@PyCode_New@2

; 176  :         nulltuple = PyTuple_New(0);

  00070	33 c9		 xor	 ecx, ecx
  00072	e8 00 00 00 00	 call	 PyTuple_New
  00077	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?nulltuple@?1??PyCode_NewEmpty@@9@9, rax

; 177  :         if (nulltuple == NULL)

  0007e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?nulltuple@?1??PyCode_NewEmpty@@9@9, 0
  00086	75 05		 jne	 SHORT $LN11@PyCode_New@2

; 178  :             goto failed;

  00088	e9 e2 00 00 00	 jmp	 $failed$20542
$LN11@PyCode_New@2:
$LN12@PyCode_New@2:

; 179  :     }
; 180  :     funcname_ob = PyUnicode_FromString(funcname);

  0008d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR funcname$[rsp]
  00095	e8 00 00 00 00	 call	 PyUnicode_FromString
  0009a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR funcname_ob$[rsp], rax

; 181  :     if (funcname_ob == NULL)

  000a2	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR funcname_ob$[rsp], 0
  000ab	75 05		 jne	 SHORT $LN10@PyCode_New@2

; 182  :         goto failed;

  000ad	e9 bd 00 00 00	 jmp	 $failed$20542
$LN10@PyCode_New@2:

; 183  :     filename_ob = PyUnicode_DecodeFSDefault(filename);

  000b2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000ba	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  000bf	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR filename_ob$[rsp], rax

; 184  :     if (filename_ob == NULL)

  000c7	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR filename_ob$[rsp], 0
  000d0	75 05		 jne	 SHORT $LN9@PyCode_New@2

; 185  :         goto failed;

  000d2	e9 98 00 00 00	 jmp	 $failed$20542
$LN9@PyCode_New@2:

; 186  : 
; 187  :     result = PyCode_New(0,                      /* argcount */
; 188  :                 0,                              /* kwonlyargcount */
; 189  :                 0,                              /* nlocals */
; 190  :                 0,                              /* stacksize */
; 191  :                 0,                              /* flags */
; 192  :                 emptystring,                    /* code */
; 193  :                 nulltuple,                      /* consts */
; 194  :                 nulltuple,                      /* names */
; 195  :                 nulltuple,                      /* varnames */
; 196  :                 nulltuple,                      /* freevars */
; 197  :                 nulltuple,                      /* cellvars */
; 198  :                 filename_ob,                    /* filename */
; 199  :                 funcname_ob,                    /* name */
; 200  :                 firstlineno,                    /* firstlineno */
; 201  :                 emptystring                     /* lnotab */
; 202  :                 );

  000d7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?emptystring@?1??PyCode_NewEmpty@@9@9
  000de	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  000e3	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR firstlineno$[rsp]
  000ea	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  000ee	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR funcname_ob$[rsp]
  000f6	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  000fb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR filename_ob$[rsp]
  00103	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00108	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?nulltuple@?1??PyCode_NewEmpty@@9@9
  0010f	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00114	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?nulltuple@?1??PyCode_NewEmpty@@9@9
  0011b	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00120	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?nulltuple@?1??PyCode_NewEmpty@@9@9
  00127	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0012c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?nulltuple@?1??PyCode_NewEmpty@@9@9
  00133	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00138	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?nulltuple@?1??PyCode_NewEmpty@@9@9
  0013f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00144	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?emptystring@?1??PyCode_NewEmpty@@9@9
  0014b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00150	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00158	45 33 c9	 xor	 r9d, r9d
  0015b	45 33 c0	 xor	 r8d, r8d
  0015e	33 d2		 xor	 edx, edx
  00160	33 c9		 xor	 ecx, ecx
  00162	e8 00 00 00 00	 call	 PyCode_New
  00167	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR result$[rsp], rax
$failed$20542:
$LN8@PyCode_New@2:

; 203  : 
; 204  : failed:
; 205  :     Py_XDECREF(funcname_ob);

  0016f	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR funcname_ob$[rsp], 0
  00178	74 0d		 je	 SHORT $LN5@PyCode_New@2
  0017a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR funcname_ob$[rsp]
  00182	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyCode_New@2:
  00187	33 c0		 xor	 eax, eax
  00189	85 c0		 test	 eax, eax
  0018b	75 e2		 jne	 SHORT $LN8@PyCode_New@2
$LN4@PyCode_New@2:

; 206  :     Py_XDECREF(filename_ob);

  0018d	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR filename_ob$[rsp], 0
  00196	74 0d		 je	 SHORT $LN1@PyCode_New@2
  00198	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR filename_ob$[rsp]
  001a0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyCode_New@2:
  001a5	33 c0		 xor	 eax, eax
  001a7	85 c0		 test	 eax, eax
  001a9	75 e2		 jne	 SHORT $LN4@PyCode_New@2

; 207  :     return result;

  001ab	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR result$[rsp]

; 208  : }

  001b3	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  001ba	c3		 ret	 0
PyCode_NewEmpty ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@CHEMDFMN@code?3?5nlocals?5must?5not?5be?5negati@ ; `string'
PUBLIC	??_C@_0CK@ENINDD@code?3?5kwonlyargcount?5must?5not?5be@ ; `string'
PUBLIC	??_C@_0CE@NPPBPEPC@code?3?5argcount?5must?5not?5be?5negat@ ; `string'
PUBLIC	??_C@_0BL@DMCDCODB@iiiiiSO?$CBO?$CBO?$CBUUiS?$HMO?$CBO?$CB?3code?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyArg_ParseTuple:PROC
EXTRN	PyTuple_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\objects\codeobject.c
pdata	SEGMENT
$pdata$code_new DD imagerel code_new
	DD	imagerel code_new+1024
	DD	imagerel $unwind$code_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_new DD 021601H
	DD	02b0116H
xdata	ENDS
;	COMDAT ??_C@_0CD@CHEMDFMN@code?3?5nlocals?5must?5not?5be?5negati@
CONST	SEGMENT
??_C@_0CD@CHEMDFMN@code?3?5nlocals?5must?5not?5be?5negati@ DB 'code: nloc'
	DB	'als must not be negative', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@ENINDD@code?3?5kwonlyargcount?5must?5not?5be@
CONST	SEGMENT
??_C@_0CK@ENINDD@code?3?5kwonlyargcount?5must?5not?5be@ DB 'code: kwonlya'
	DB	'rgcount must not be negative', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NPPBPEPC@code?3?5argcount?5must?5not?5be?5negat@
CONST	SEGMENT
??_C@_0CE@NPPBPEPC@code?3?5argcount?5must?5not?5be?5negat@ DB 'code: argc'
	DB	'ount must not be negative', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DMCDCODB@iiiiiSO?$CBO?$CBO?$CBUUiS?$HMO?$CBO?$CB?3code?$AA@
CONST	SEGMENT
??_C@_0BL@DMCDCODB@iiiiiSO?$CBO?$CBO?$CBUUiS?$HMO?$CBO?$CB?3code?$AA@ DB 'i'
	DB	'iiiiSO!O!O!UUiS|O!O!:code', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT code_new
_TEXT	SEGMENT
ourvarnames$ = 176
freevars$ = 184
ourcellvars$ = 192
flags$ = 200
cellvars$ = 208
names$ = 216
code$ = 224
argcount$ = 232
name$ = 240
kwonlyargcount$ = 248
nlocals$ = 252
lnotab$ = 256
firstlineno$ = 264
co$ = 272
stacksize$ = 280
filename$ = 288
ourfreevars$ = 296
ournames$ = 304
consts$ = 312
varnames$ = 320
type$ = 352
args$ = 360
kw$ = 368
code_new PROC						; COMDAT

; 288  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H

; 289  :     int argcount;
; 290  :     int kwonlyargcount;
; 291  :     int nlocals;
; 292  :     int stacksize;
; 293  :     int flags;
; 294  :     PyObject *co = NULL;

  00016	48 c7 84 24 10
	01 00 00 00 00
	00 00		 mov	 QWORD PTR co$[rsp], 0

; 295  :     PyObject *code;
; 296  :     PyObject *consts;
; 297  :     PyObject *names, *ournames = NULL;

  00022	48 c7 84 24 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR ournames$[rsp], 0

; 298  :     PyObject *varnames, *ourvarnames = NULL;

  0002e	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR ourvarnames$[rsp], 0

; 299  :     PyObject *freevars = NULL, *ourfreevars = NULL;

  0003a	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR freevars$[rsp], 0
  00046	48 c7 84 24 28
	01 00 00 00 00
	00 00		 mov	 QWORD PTR ourfreevars$[rsp], 0

; 300  :     PyObject *cellvars = NULL, *ourcellvars = NULL;

  00052	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR cellvars$[rsp], 0
  0005e	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR ourcellvars$[rsp], 0

; 301  :     PyObject *filename;
; 302  :     PyObject *name;
; 303  :     int firstlineno;
; 304  :     PyObject *lnotab;
; 305  : 
; 306  :     if (!PyArg_ParseTuple(args, "iiiiiSO!O!O!UUiS|O!O!:code",
; 307  :                           &argcount, &kwonlyargcount,
; 308  :                               &nlocals, &stacksize, &flags,
; 309  :                           &code,
; 310  :                           &PyTuple_Type, &consts,
; 311  :                           &PyTuple_Type, &names,
; 312  :                           &PyTuple_Type, &varnames,
; 313  :                           &filename, &name,
; 314  :                           &firstlineno, &lnotab,
; 315  :                           &PyTuple_Type, &freevars,
; 316  :                           &PyTuple_Type, &cellvars))

  0006a	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR cellvars$[rsp]
  00072	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], rax
  0007a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00081	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rax
  00089	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR freevars$[rsp]
  00091	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], rax
  00099	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  000a0	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rax
  000a8	48 8d 84 24 00
	01 00 00	 lea	 rax, QWORD PTR lnotab$[rsp]
  000b0	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rax
  000b8	48 8d 84 24 08
	01 00 00	 lea	 rax, QWORD PTR firstlineno$[rsp]
  000c0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rax
  000c8	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR name$[rsp]
  000d0	48 89 44 24 78	 mov	 QWORD PTR [rsp+120], rax
  000d5	48 8d 84 24 20
	01 00 00	 lea	 rax, QWORD PTR filename$[rsp]
  000dd	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  000e2	48 8d 84 24 40
	01 00 00	 lea	 rax, QWORD PTR varnames$[rsp]
  000ea	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  000ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  000f6	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  000fb	48 8d 84 24 d8
	00 00 00	 lea	 rax, QWORD PTR names$[rsp]
  00103	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00108	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  0010f	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00114	48 8d 84 24 38
	01 00 00	 lea	 rax, QWORD PTR consts$[rsp]
  0011c	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00121	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00128	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0012d	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR code$[rsp]
  00135	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0013a	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR flags$[rsp]
  00142	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00147	48 8d 84 24 18
	01 00 00	 lea	 rax, QWORD PTR stacksize$[rsp]
  0014f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00154	48 8d 84 24 fc
	00 00 00	 lea	 rax, QWORD PTR nlocals$[rsp]
  0015c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00161	4c 8d 8c 24 f8
	00 00 00	 lea	 r9, QWORD PTR kwonlyargcount$[rsp]
  00169	4c 8d 84 24 e8
	00 00 00	 lea	 r8, QWORD PTR argcount$[rsp]
  00171	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@DMCDCODB@iiiiiSO?$CBO?$CBO?$CBUUiS?$HMO?$CBO?$CB?3code?$AA@
  00178	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00180	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00185	85 c0		 test	 eax, eax
  00187	75 07		 jne	 SHORT $LN28@code_new

; 317  :         return NULL;

  00189	33 c0		 xor	 eax, eax
  0018b	e9 68 02 00 00	 jmp	 $LN29@code_new
$LN28@code_new:

; 318  : 
; 319  :     if (argcount < 0) {

  00190	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR argcount$[rsp], 0
  00198	7d 18		 jge	 SHORT $LN27@code_new

; 320  :         PyErr_SetString(
; 321  :             PyExc_ValueError,
; 322  :             "code: argcount must not be negative");

  0019a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@NPPBPEPC@code?3?5argcount?5must?5not?5be?5negat@
  001a1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001a8	e8 00 00 00 00	 call	 PyErr_SetString

; 323  :         goto cleanup;

  001ad	e9 c6 01 00 00	 jmp	 $cleanup$20712
$LN27@code_new:

; 324  :     }
; 325  : 
; 326  :     if (kwonlyargcount < 0) {

  001b2	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR kwonlyargcount$[rsp], 0
  001ba	7d 18		 jge	 SHORT $LN26@code_new

; 327  :         PyErr_SetString(
; 328  :             PyExc_ValueError,
; 329  :             "code: kwonlyargcount must not be negative");

  001bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@ENINDD@code?3?5kwonlyargcount?5must?5not?5be@
  001c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001ca	e8 00 00 00 00	 call	 PyErr_SetString

; 330  :         goto cleanup;

  001cf	e9 a4 01 00 00	 jmp	 $cleanup$20712
$LN26@code_new:

; 331  :     }
; 332  :     if (nlocals < 0) {

  001d4	83 bc 24 fc 00
	00 00 00	 cmp	 DWORD PTR nlocals$[rsp], 0
  001dc	7d 18		 jge	 SHORT $LN25@code_new

; 333  :         PyErr_SetString(
; 334  :             PyExc_ValueError,
; 335  :             "code: nlocals must not be negative");

  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@CHEMDFMN@code?3?5nlocals?5must?5not?5be?5negati@
  001e5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001ec	e8 00 00 00 00	 call	 PyErr_SetString

; 336  :         goto cleanup;

  001f1	e9 82 01 00 00	 jmp	 $cleanup$20712
$LN25@code_new:

; 337  :     }
; 338  : 
; 339  :     ournames = validate_and_copy_tuple(names);

  001f6	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR names$[rsp]
  001fe	e8 00 00 00 00	 call	 validate_and_copy_tuple
  00203	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR ournames$[rsp], rax

; 340  :     if (ournames == NULL)

  0020b	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR ournames$[rsp], 0
  00214	75 05		 jne	 SHORT $LN24@code_new

; 341  :         goto cleanup;

  00216	e9 5d 01 00 00	 jmp	 $cleanup$20712
$LN24@code_new:

; 342  :     ourvarnames = validate_and_copy_tuple(varnames);

  0021b	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR varnames$[rsp]
  00223	e8 00 00 00 00	 call	 validate_and_copy_tuple
  00228	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR ourvarnames$[rsp], rax

; 343  :     if (ourvarnames == NULL)

  00230	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR ourvarnames$[rsp], 0
  00239	75 05		 jne	 SHORT $LN23@code_new

; 344  :         goto cleanup;

  0023b	e9 38 01 00 00	 jmp	 $cleanup$20712
$LN23@code_new:

; 345  :     if (freevars)

  00240	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR freevars$[rsp], 0
  00249	74 17		 je	 SHORT $LN22@code_new

; 346  :         ourfreevars = validate_and_copy_tuple(freevars);

  0024b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR freevars$[rsp]
  00253	e8 00 00 00 00	 call	 validate_and_copy_tuple
  00258	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR ourfreevars$[rsp], rax

; 347  :     else

  00260	eb 0f		 jmp	 SHORT $LN21@code_new
$LN22@code_new:

; 348  :         ourfreevars = PyTuple_New(0);

  00262	33 c9		 xor	 ecx, ecx
  00264	e8 00 00 00 00	 call	 PyTuple_New
  00269	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR ourfreevars$[rsp], rax
$LN21@code_new:

; 349  :     if (ourfreevars == NULL)

  00271	48 83 bc 24 28
	01 00 00 00	 cmp	 QWORD PTR ourfreevars$[rsp], 0
  0027a	75 05		 jne	 SHORT $LN20@code_new

; 350  :         goto cleanup;

  0027c	e9 f7 00 00 00	 jmp	 $cleanup$20712
$LN20@code_new:

; 351  :     if (cellvars)

  00281	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR cellvars$[rsp], 0
  0028a	74 17		 je	 SHORT $LN19@code_new

; 352  :         ourcellvars = validate_and_copy_tuple(cellvars);

  0028c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR cellvars$[rsp]
  00294	e8 00 00 00 00	 call	 validate_and_copy_tuple
  00299	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR ourcellvars$[rsp], rax

; 353  :     else

  002a1	eb 0f		 jmp	 SHORT $LN18@code_new
$LN19@code_new:

; 354  :         ourcellvars = PyTuple_New(0);

  002a3	33 c9		 xor	 ecx, ecx
  002a5	e8 00 00 00 00	 call	 PyTuple_New
  002aa	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR ourcellvars$[rsp], rax
$LN18@code_new:

; 355  :     if (ourcellvars == NULL)

  002b2	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR ourcellvars$[rsp], 0
  002bb	75 05		 jne	 SHORT $LN17@code_new

; 356  :         goto cleanup;

  002bd	e9 b6 00 00 00	 jmp	 $cleanup$20712
$LN17@code_new:

; 357  : 
; 358  :     co = (PyObject *)PyCode_New(argcount, kwonlyargcount,
; 359  :                                 nlocals, stacksize, flags,
; 360  :                                 code, consts, ournames, ourvarnames,
; 361  :                                 ourfreevars, ourcellvars, filename,
; 362  :                                 name, firstlineno, lnotab);

  002c2	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR lnotab$[rsp]
  002ca	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  002cf	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR firstlineno$[rsp]
  002d6	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  002da	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR name$[rsp]
  002e2	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  002e7	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  002ef	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  002f4	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ourcellvars$[rsp]
  002fc	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00301	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR ourfreevars$[rsp]
  00309	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0030e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR ourvarnames$[rsp]
  00316	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0031b	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR ournames$[rsp]
  00323	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00328	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR consts$[rsp]
  00330	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00335	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  0033d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00342	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00349	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0034d	44 8b 8c 24 18
	01 00 00	 mov	 r9d, DWORD PTR stacksize$[rsp]
  00355	44 8b 84 24 fc
	00 00 00	 mov	 r8d, DWORD PTR nlocals$[rsp]
  0035d	8b 94 24 f8 00
	00 00		 mov	 edx, DWORD PTR kwonlyargcount$[rsp]
  00364	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR argcount$[rsp]
  0036b	e8 00 00 00 00	 call	 PyCode_New
  00370	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR co$[rsp], rax
$cleanup$20712:
$LN16@code_new:

; 363  :   cleanup:
; 364  :     Py_XDECREF(ournames);

  00378	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR ournames$[rsp], 0
  00381	74 0d		 je	 SHORT $LN13@code_new
  00383	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR ournames$[rsp]
  0038b	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@code_new:
  00390	33 c0		 xor	 eax, eax
  00392	85 c0		 test	 eax, eax
  00394	75 e2		 jne	 SHORT $LN16@code_new
$LN12@code_new:

; 365  :     Py_XDECREF(ourvarnames);

  00396	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR ourvarnames$[rsp], 0
  0039f	74 0d		 je	 SHORT $LN9@code_new
  003a1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ourvarnames$[rsp]
  003a9	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@code_new:
  003ae	33 c0		 xor	 eax, eax
  003b0	85 c0		 test	 eax, eax
  003b2	75 e2		 jne	 SHORT $LN12@code_new
$LN8@code_new:

; 366  :     Py_XDECREF(ourfreevars);

  003b4	48 83 bc 24 28
	01 00 00 00	 cmp	 QWORD PTR ourfreevars$[rsp], 0
  003bd	74 0d		 je	 SHORT $LN5@code_new
  003bf	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR ourfreevars$[rsp]
  003c7	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@code_new:
  003cc	33 c0		 xor	 eax, eax
  003ce	85 c0		 test	 eax, eax
  003d0	75 e2		 jne	 SHORT $LN8@code_new
$LN4@code_new:

; 367  :     Py_XDECREF(ourcellvars);

  003d2	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR ourcellvars$[rsp], 0
  003db	74 0d		 je	 SHORT $LN1@code_new
  003dd	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ourcellvars$[rsp]
  003e5	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@code_new:
  003ea	33 c0		 xor	 eax, eax
  003ec	85 c0		 test	 eax, eax
  003ee	75 e2		 jne	 SHORT $LN4@code_new

; 368  :     return co;

  003f0	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR co$[rsp]
$LN29@code_new:

; 369  : }

  003f8	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  003ff	c3		 ret	 0
code_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@BEDCFPIK@name?5tuples?5must?5contain?5only?5st@ ; `string'
EXTRN	_PyUnicode_Copy:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$validate_and_copy_tuple DD imagerel validate_and_copy_tuple
	DD	imagerel validate_and_copy_tuple+287
	DD	imagerel $unwind$validate_and_copy_tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_and_copy_tuple DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0DE@BEDCFPIK@name?5tuples?5must?5contain?5only?5st@
CONST	SEGMENT
??_C@_0DE@BEDCFPIK@name?5tuples?5must?5contain?5only?5st@ DB 'name tuples'
	DB	' must contain only strings, not ''%.500s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_and_copy_tuple
_TEXT	SEGMENT
newtuple$ = 32
i$ = 40
len$ = 48
item$ = 56
tup$ = 80
validate_and_copy_tuple PROC				; COMDAT

; 242  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 243  :     PyObject *newtuple;
; 244  :     PyObject *item;
; 245  :     Py_ssize_t i, len;
; 246  : 
; 247  :     len = PyTuple_GET_SIZE(tup);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR tup$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 89 44 24 30	 mov	 QWORD PTR len$[rsp], rax

; 248  :     newtuple = PyTuple_New(len);

  00017	48 8b 4c 24 30	 mov	 rcx, QWORD PTR len$[rsp]
  0001c	e8 00 00 00 00	 call	 PyTuple_New
  00021	48 89 44 24 20	 mov	 QWORD PTR newtuple$[rsp], rax

; 249  :     if (newtuple == NULL)

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR newtuple$[rsp], 0
  0002c	75 07		 jne	 SHORT $LN9@validate_a

; 250  :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	e9 e5 00 00 00	 jmp	 $LN10@validate_a
$LN9@validate_a:

; 251  : 
; 252  :     for (i = 0; i < len; i++) {

  00035	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0003e	eb 0d		 jmp	 SHORT $LN8@validate_a
$LN7@validate_a:
  00040	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00045	48 ff c0	 inc	 rax
  00048	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN8@validate_a:
  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR len$[rsp]
  00052	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00057	0f 8d b8 00 00
	00		 jge	 $LN6@validate_a

; 253  :         item = PyTuple_GET_ITEM(tup, i);

  0005d	48 8b 44 24 50	 mov	 rax, QWORD PTR tup$[rsp]
  00062	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00067	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  0006c	48 89 44 24 38	 mov	 QWORD PTR item$[rsp], rax

; 254  :         if (PyUnicode_CheckExact(item)) {

  00071	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00078	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  0007d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00081	75 0c		 jne	 SHORT $LN5@validate_a

; 255  :             Py_INCREF(item);

  00083	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  00088	e8 00 00 00 00	 call	 _Py_IncRef
  0008d	eb 6d		 jmp	 SHORT $LN4@validate_a
$LN5@validate_a:

; 256  :         }
; 257  :         else if (!PyUnicode_Check(item)) {

  0008f	48 8b 44 24 38	 mov	 rax, QWORD PTR item$[rsp]
  00094	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00098	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0009e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000a3	85 c0		 test	 eax, eax
  000a5	75 30		 jne	 SHORT $LN3@validate_a

; 258  :             PyErr_Format(
; 259  :                 PyExc_TypeError,
; 260  :                 "name tuples must contain only "
; 261  :                 "strings, not '%.500s'",
; 262  :                 item->ob_type->tp_name);

  000a7	48 8b 44 24 38	 mov	 rax, QWORD PTR item$[rsp]
  000ac	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b0	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@BEDCFPIK@name?5tuples?5must?5contain?5only?5st@
  000bb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c2	e8 00 00 00 00	 call	 PyErr_Format

; 263  :             Py_DECREF(newtuple);

  000c7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newtuple$[rsp]
  000cc	e8 00 00 00 00	 call	 _Py_DecRef

; 264  :             return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	eb 45		 jmp	 SHORT $LN10@validate_a

; 265  :         }
; 266  :         else {

  000d5	eb 25		 jmp	 SHORT $LN2@validate_a
$LN3@validate_a:

; 267  :             item = _PyUnicode_Copy(item);

  000d7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  000dc	e8 00 00 00 00	 call	 _PyUnicode_Copy
  000e1	48 89 44 24 38	 mov	 QWORD PTR item$[rsp], rax

; 268  :             if (item == NULL) {

  000e6	48 83 7c 24 38
	00		 cmp	 QWORD PTR item$[rsp], 0
  000ec	75 0e		 jne	 SHORT $LN1@validate_a

; 269  :                 Py_DECREF(newtuple);

  000ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newtuple$[rsp]
  000f3	e8 00 00 00 00	 call	 _Py_DecRef

; 270  :                 return NULL;

  000f8	33 c0		 xor	 eax, eax
  000fa	eb 1e		 jmp	 SHORT $LN10@validate_a
$LN1@validate_a:
$LN2@validate_a:
$LN4@validate_a:

; 271  :             }
; 272  :         }
; 273  :         PyTuple_SET_ITEM(newtuple, i, item);

  000fc	48 8b 44 24 20	 mov	 rax, QWORD PTR newtuple$[rsp]
  00101	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00106	48 8b 54 24 38	 mov	 rdx, QWORD PTR item$[rsp]
  0010b	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 274  :     }

  00110	e9 2b ff ff ff	 jmp	 $LN7@validate_a
$LN6@validate_a:

; 275  : 
; 276  :     return newtuple;

  00115	48 8b 44 24 20	 mov	 rax, QWORD PTR newtuple$[rsp]
$LN10@validate_a:

; 277  : }

  0011a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011e	c3		 ret	 0
validate_and_copy_tuple ENDP
_TEXT	ENDS
EXTRN	_PyObject_DebugFree:PROC
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	PyObject_GC_Del:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$code_dealloc DD imagerel code_dealloc
	DD	imagerel code_dealloc+493
	DD	imagerel $unwind$code_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_dealloc DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT code_dealloc
_TEXT	SEGMENT
tv149 = 32
co$ = 64
code_dealloc PROC					; COMDAT

; 373  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN39@code_deall:

; 374  :     Py_XDECREF(co->co_code);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0000e	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00013	74 0e		 je	 SHORT $LN36@code_deall
  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0001a	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0001e	e8 00 00 00 00	 call	 _Py_DecRef
$LN36@code_deall:
  00023	33 c0		 xor	 eax, eax
  00025	85 c0		 test	 eax, eax
  00027	75 e0		 jne	 SHORT $LN39@code_deall
$LN35@code_deall:

; 375  :     Py_XDECREF(co->co_consts);

  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0002e	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00036	74 11		 je	 SHORT $LN32@code_deall
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0003d	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00044	e8 00 00 00 00	 call	 _Py_DecRef
$LN32@code_deall:
  00049	33 c0		 xor	 eax, eax
  0004b	85 c0		 test	 eax, eax
  0004d	75 da		 jne	 SHORT $LN35@code_deall
$LN31@code_deall:

; 376  :     Py_XDECREF(co->co_names);

  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  00054	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0005c	74 11		 je	 SHORT $LN28@code_deall
  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  00063	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0006a	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@code_deall:
  0006f	33 c0		 xor	 eax, eax
  00071	85 c0		 test	 eax, eax
  00073	75 da		 jne	 SHORT $LN31@code_deall
$LN27@code_deall:

; 377  :     Py_XDECREF(co->co_varnames);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0007a	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00082	74 11		 je	 SHORT $LN24@code_deall
  00084	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  00089	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  00090	e8 00 00 00 00	 call	 _Py_DecRef
$LN24@code_deall:
  00095	33 c0		 xor	 eax, eax
  00097	85 c0		 test	 eax, eax
  00099	75 da		 jne	 SHORT $LN27@code_deall
$LN23@code_deall:

; 378  :     Py_XDECREF(co->co_freevars);

  0009b	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  000a0	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  000a8	74 11		 je	 SHORT $LN20@code_deall
  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  000af	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  000b6	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@code_deall:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 da		 jne	 SHORT $LN23@code_deall
$LN19@code_deall:

; 379  :     Py_XDECREF(co->co_cellvars);

  000c1	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  000c6	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  000ce	74 11		 je	 SHORT $LN16@code_deall
  000d0	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  000d5	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  000dc	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@code_deall:
  000e1	33 c0		 xor	 eax, eax
  000e3	85 c0		 test	 eax, eax
  000e5	75 da		 jne	 SHORT $LN19@code_deall
$LN15@code_deall:

; 380  :     Py_XDECREF(co->co_filename);

  000e7	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  000ec	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  000f4	74 11		 je	 SHORT $LN12@code_deall
  000f6	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  000fb	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  00102	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@code_deall:
  00107	33 c0		 xor	 eax, eax
  00109	85 c0		 test	 eax, eax
  0010b	75 da		 jne	 SHORT $LN15@code_deall
$LN11@code_deall:

; 381  :     Py_XDECREF(co->co_name);

  0010d	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  00112	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0011a	74 11		 je	 SHORT $LN8@code_deall
  0011c	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  00121	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00128	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@code_deall:
  0012d	33 c0		 xor	 eax, eax
  0012f	85 c0		 test	 eax, eax
  00131	75 da		 jne	 SHORT $LN11@code_deall
$LN7@code_deall:

; 382  :     Py_XDECREF(co->co_lnotab);

  00133	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  00138	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  00140	74 11		 je	 SHORT $LN4@code_deall
  00142	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  00147	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  0014e	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@code_deall:
  00153	33 c0		 xor	 eax, eax
  00155	85 c0		 test	 eax, eax
  00157	75 da		 jne	 SHORT $LN7@code_deall

; 383  :     if (co->co_cell2arg != NULL)

  00159	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0015e	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  00166	74 3d		 je	 SHORT $LN3@code_deall

; 384  :         PyMem_FREE(co->co_cell2arg);

  00168	e8 00 00 00 00	 call	 _Py_PXCTX
  0016d	85 c0		 test	 eax, eax
  0016f	74 1b		 je	 SHORT $LN42@code_deall
  00171	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  00176	48 8b 88 a8 00
	00 00		 mov	 rcx, QWORD PTR [rax+168]
  0017d	e8 00 00 00 00	 call	 _PxMem_Free
  00182	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  0018a	eb 19		 jmp	 SHORT $LN43@code_deall
$LN42@code_deall:
  0018c	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  00191	48 8b 88 a8 00
	00 00		 mov	 rcx, QWORD PTR [rax+168]
  00198	e8 00 00 00 00	 call	 _PyMem_DebugFree
  0019d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
$LN43@code_deall:
$LN3@code_deall:

; 385  :     if (co->co_zombieframe != NULL)

  001a5	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  001aa	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  001b2	74 11		 je	 SHORT $LN2@code_deall

; 386  :         PyObject_GC_Del(co->co_zombieframe);

  001b4	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  001b9	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  001c0	e8 00 00 00 00	 call	 PyObject_GC_Del
$LN2@code_deall:

; 387  :     if (co->co_weakreflist != NULL)

  001c5	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  001ca	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  001d2	74 0a		 je	 SHORT $LN1@code_deall

; 388  :         PyObject_ClearWeakRefs((PyObject*)co);

  001d4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR co$[rsp]
  001d9	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN1@code_deall:

; 389  :     PyObject_DEL(co);

  001de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR co$[rsp]
  001e3	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 390  : }

  001e8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001ec	c3		 ret	 0
code_dealloc ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$code_sizeof DD imagerel code_sizeof
	DD	imagerel code_sizeof+100
	DD	imagerel $unwind$code_sizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_sizeof DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT code_sizeof
_TEXT	SEGMENT
res$ = 32
co$ = 64
unused$ = 72
code_sizeof PROC					; COMDAT

; 394  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 395  :     Py_ssize_t res;
; 396  : 
; 397  :     res = sizeof(PyCodeObject);

  0000e	48 c7 44 24 20
	10 01 00 00	 mov	 QWORD PTR res$[rsp], 272 ; 00000110H

; 398  :     if (co->co_cell2arg != NULL && co->co_cellvars != NULL)

  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0001c	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  00024	74 2f		 je	 SHORT $LN1@code_sizeo
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0002b	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00033	74 20		 je	 SHORT $LN1@code_sizeo

; 399  :         res += PyTuple_GET_SIZE(co->co_cellvars) * sizeof(unsigned char);

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0003a	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00041	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00045	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0004a	48 03 c8	 add	 rcx, rax
  0004d	48 8b c1	 mov	 rax, rcx
  00050	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@code_sizeo:

; 400  :     return PyLong_FromSsize_t(res);

  00055	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0005a	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 401  : }

  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	c3		 ret	 0
code_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@BNKFAJCC@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$DP?$DP?$DP?0@ ; `string'
PUBLIC	??_C@_0CL@FMPDHGJG@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$CC?$CFU?$CC@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$code_repr DD imagerel code_repr
	DD	imagerel code_repr+186
	DD	imagerel $unwind$code_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_repr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0CK@BNKFAJCC@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$DP?$DP?$DP?0@
CONST	SEGMENT
??_C@_0CK@BNKFAJCC@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$DP?$DP?$DP?0@ DB '<'
	DB	'code object %U at %p, file ???, line %d>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FMPDHGJG@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$CC?$CFU?$CC@
CONST	SEGMENT
??_C@_0CL@FMPDHGJG@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$CC?$CFU?$CC@ DB '<'
	DB	'code object %U at %p, file "%U", line %d>', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT code_repr
_TEXT	SEGMENT
lineno$ = 48
co$ = 80
code_repr PROC						; COMDAT

; 405  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 406  :     int lineno;
; 407  :     if (co->co_firstlineno != 0)

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  0000e	83 b8 c0 00 00
	00 00		 cmp	 DWORD PTR [rax+192], 0
  00015	74 11		 je	 SHORT $LN4@code_repr

; 408  :         lineno = co->co_firstlineno;

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  0001c	8b 80 c0 00 00
	00		 mov	 eax, DWORD PTR [rax+192]
  00022	89 44 24 30	 mov	 DWORD PTR lineno$[rsp], eax

; 409  :     else

  00026	eb 08		 jmp	 SHORT $LN3@code_repr
$LN4@code_repr:

; 410  :         lineno = -1;

  00028	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR lineno$[rsp], -1
$LN3@code_repr:

; 411  :     if (co->co_filename && PyUnicode_Check(co->co_filename)) {

  00030	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00035	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  0003d	74 54		 je	 SHORT $LN2@code_repr
  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00044	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  0004b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00055	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0005a	85 c0		 test	 eax, eax
  0005c	74 35		 je	 SHORT $LN2@code_repr

; 412  :         return PyUnicode_FromFormat(
; 413  :             "<code object %U at %p, file \"%U\", line %d>",
; 414  :             co->co_name, co, co->co_filename, lineno);

  0005e	8b 44 24 30	 mov	 eax, DWORD PTR lineno$[rsp]
  00062	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00066	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  0006b	4c 8b 88 b0 00
	00 00		 mov	 r9, QWORD PTR [rax+176]
  00072	4c 8b 44 24 50	 mov	 r8, QWORD PTR co$[rsp]
  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  0007c	48 8b 90 b8 00
	00 00		 mov	 rdx, QWORD PTR [rax+184]
  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@FMPDHGJG@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$CC?$CFU?$CC@
  0008a	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0008f	eb 24		 jmp	 SHORT $LN5@code_repr

; 415  :     } else {

  00091	eb 22		 jmp	 SHORT $LN1@code_repr
$LN2@code_repr:

; 416  :         return PyUnicode_FromFormat(
; 417  :             "<code object %U at %p, file ???, line %d>",
; 418  :             co->co_name, co, lineno);

  00093	44 8b 4c 24 30	 mov	 r9d, DWORD PTR lineno$[rsp]
  00098	4c 8b 44 24 50	 mov	 r8, QWORD PTR co$[rsp]
  0009d	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  000a2	48 8b 90 b8 00
	00 00		 mov	 rdx, QWORD PTR [rax+184]
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@BNKFAJCC@?$DMcode?5object?5?$CFU?5at?5?$CFp?0?5file?5?$DP?$DP?$DP?0@
  000b0	e8 00 00 00 00	 call	 PyUnicode_FromFormat
$LN1@code_repr:
$LN5@code_repr:

; 419  :     }
; 420  : }

  000b5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b9	c3		 ret	 0
code_repr ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyObject_RichCompareBool:PROC
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$code_richcompare DD imagerel code_richcompare
	DD	imagerel code_richcompare+843
	DD	imagerel $unwind$code_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_richcompare DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT code_richcompare
_TEXT	SEGMENT
res$ = 32
cp$ = 40
co$ = 48
eq$ = 56
tv81 = 60
tv86 = 64
tv91 = 68
tv128 = 72
tv133 = 76
self$ = 96
other$ = 104
op$ = 112
code_richcompare PROC					; COMDAT

; 424  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 425  :     PyCodeObject *co, *cp;
; 426  :     int eq;
; 427  :     PyObject *res;
; 428  : 
; 429  :     if ((op != Py_EQ && op != Py_NE) ||
; 430  :         !PyCode_Check(self) ||
; 431  :         !PyCode_Check(other)) {

  00013	83 7c 24 70 02	 cmp	 DWORD PTR op$[rsp], 2
  00018	74 07		 je	 SHORT $LN18@code_richc
  0001a	83 7c 24 70 03	 cmp	 DWORD PTR op$[rsp], 3
  0001f	75 24		 jne	 SHORT $LN19@code_richc
$LN18@code_richc:
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0002d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00031	75 12		 jne	 SHORT $LN19@code_richc
  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  0003a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  0003f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00043	74 18		 je	 SHORT $LN20@code_richc
$LN19@code_richc:

; 432  :         Py_RETURN_NOTIMPLEMENTED;

  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0004c	e8 00 00 00 00	 call	 _Py_IncRef
  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00058	e9 e9 02 00 00	 jmp	 $LN21@code_richc
$LN20@code_richc:

; 433  :     }
; 434  : 
; 435  :     co = (PyCodeObject *)self;

  0005d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00062	48 89 44 24 30	 mov	 QWORD PTR co$[rsp], rax

; 436  :     cp = (PyCodeObject *)other;

  00067	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  0006c	48 89 44 24 28	 mov	 QWORD PTR cp$[rsp], rax

; 437  : 
; 438  :     eq = PyObject_RichCompareBool(co->co_name, cp->co_name, Py_EQ);

  00071	41 b8 02 00 00
	00		 mov	 r8d, 2
  00077	48 8b 44 24 28	 mov	 rax, QWORD PTR cp$[rsp]
  0007c	48 8b 90 b8 00
	00 00		 mov	 rdx, QWORD PTR [rax+184]
  00083	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00088	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0008f	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00094	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 439  :     if (eq <= 0) goto unequal;

  00098	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  0009d	7f 05		 jg	 SHORT $LN17@code_richc
  0009f	e9 67 02 00 00	 jmp	 $unequal$20852
$LN17@code_richc:

; 440  :     eq = co->co_argcount == cp->co_argcount;

  000a4	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  000a9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cp$[rsp]
  000ae	8b 49 60	 mov	 ecx, DWORD PTR [rcx+96]
  000b1	39 48 60	 cmp	 DWORD PTR [rax+96], ecx
  000b4	75 0a		 jne	 SHORT $LN23@code_richc
  000b6	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  000be	eb 08		 jmp	 SHORT $LN24@code_richc
$LN23@code_richc:
  000c0	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN24@code_richc:
  000c8	8b 44 24 3c	 mov	 eax, DWORD PTR tv81[rsp]
  000cc	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 441  :     if (!eq) goto unequal;

  000d0	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  000d5	75 05		 jne	 SHORT $LN16@code_richc
  000d7	e9 2f 02 00 00	 jmp	 $unequal$20852
$LN16@code_richc:

; 442  :     eq = co->co_kwonlyargcount == cp->co_kwonlyargcount;

  000dc	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  000e1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cp$[rsp]
  000e6	8b 49 64	 mov	 ecx, DWORD PTR [rcx+100]
  000e9	39 48 64	 cmp	 DWORD PTR [rax+100], ecx
  000ec	75 0a		 jne	 SHORT $LN25@code_richc
  000ee	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv86[rsp], 1
  000f6	eb 08		 jmp	 SHORT $LN26@code_richc
$LN25@code_richc:
  000f8	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN26@code_richc:
  00100	8b 44 24 40	 mov	 eax, DWORD PTR tv86[rsp]
  00104	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 443  :     if (!eq) goto unequal;

  00108	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  0010d	75 05		 jne	 SHORT $LN15@code_richc
  0010f	e9 f7 01 00 00	 jmp	 $unequal$20852
$LN15@code_richc:

; 444  :     eq = co->co_nlocals == cp->co_nlocals;

  00114	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00119	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cp$[rsp]
  0011e	8b 49 68	 mov	 ecx, DWORD PTR [rcx+104]
  00121	39 48 68	 cmp	 DWORD PTR [rax+104], ecx
  00124	75 0a		 jne	 SHORT $LN27@code_richc
  00126	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
  0012e	eb 08		 jmp	 SHORT $LN28@code_richc
$LN27@code_richc:
  00130	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN28@code_richc:
  00138	8b 44 24 44	 mov	 eax, DWORD PTR tv91[rsp]
  0013c	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 445  :     if (!eq) goto unequal;

  00140	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  00145	75 05		 jne	 SHORT $LN14@code_richc
  00147	e9 bf 01 00 00	 jmp	 $unequal$20852
$LN14@code_richc:

; 446  :     eq = co->co_flags == cp->co_flags;

  0014c	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00151	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cp$[rsp]
  00156	8b 49 70	 mov	 ecx, DWORD PTR [rcx+112]
  00159	39 48 70	 cmp	 DWORD PTR [rax+112], ecx
  0015c	75 0a		 jne	 SHORT $LN29@code_richc
  0015e	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv128[rsp], 1
  00166	eb 08		 jmp	 SHORT $LN30@code_richc
$LN29@code_richc:
  00168	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN30@code_richc:
  00170	8b 44 24 48	 mov	 eax, DWORD PTR tv128[rsp]
  00174	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 447  :     if (!eq) goto unequal;

  00178	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  0017d	75 05		 jne	 SHORT $LN13@code_richc
  0017f	e9 87 01 00 00	 jmp	 $unequal$20852
$LN13@code_richc:

; 448  :     eq = co->co_firstlineno == cp->co_firstlineno;

  00184	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00189	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cp$[rsp]
  0018e	8b 89 c0 00 00
	00		 mov	 ecx, DWORD PTR [rcx+192]
  00194	39 88 c0 00 00
	00		 cmp	 DWORD PTR [rax+192], ecx
  0019a	75 0a		 jne	 SHORT $LN31@code_richc
  0019c	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv133[rsp], 1
  001a4	eb 08		 jmp	 SHORT $LN32@code_richc
$LN31@code_richc:
  001a6	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv133[rsp], 0
$LN32@code_richc:
  001ae	8b 44 24 4c	 mov	 eax, DWORD PTR tv133[rsp]
  001b2	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 449  :     if (!eq) goto unequal;

  001b6	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  001bb	75 05		 jne	 SHORT $LN12@code_richc
  001bd	e9 49 01 00 00	 jmp	 $unequal$20852
$LN12@code_richc:

; 450  :     eq = PyObject_RichCompareBool(co->co_code, cp->co_code, Py_EQ);

  001c2	41 b8 02 00 00
	00		 mov	 r8d, 2
  001c8	48 8b 44 24 28	 mov	 rax, QWORD PTR cp$[rsp]
  001cd	48 8b 50 78	 mov	 rdx, QWORD PTR [rax+120]
  001d1	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  001d6	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  001da	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  001df	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 451  :     if (eq <= 0) goto unequal;

  001e3	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  001e8	7f 05		 jg	 SHORT $LN11@code_richc
  001ea	e9 1c 01 00 00	 jmp	 $unequal$20852
$LN11@code_richc:

; 452  :     eq = PyObject_RichCompareBool(co->co_consts, cp->co_consts, Py_EQ);

  001ef	41 b8 02 00 00
	00		 mov	 r8d, 2
  001f5	48 8b 44 24 28	 mov	 rax, QWORD PTR cp$[rsp]
  001fa	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  00201	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00206	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0020d	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00212	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 453  :     if (eq <= 0) goto unequal;

  00216	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  0021b	7f 05		 jg	 SHORT $LN10@code_richc
  0021d	e9 e9 00 00 00	 jmp	 $unequal$20852
$LN10@code_richc:

; 454  :     eq = PyObject_RichCompareBool(co->co_names, cp->co_names, Py_EQ);

  00222	41 b8 02 00 00
	00		 mov	 r8d, 2
  00228	48 8b 44 24 28	 mov	 rax, QWORD PTR cp$[rsp]
  0022d	48 8b 90 88 00
	00 00		 mov	 rdx, QWORD PTR [rax+136]
  00234	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  00239	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00240	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00245	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 455  :     if (eq <= 0) goto unequal;

  00249	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  0024e	7f 05		 jg	 SHORT $LN9@code_richc
  00250	e9 b6 00 00 00	 jmp	 $unequal$20852
$LN9@code_richc:

; 456  :     eq = PyObject_RichCompareBool(co->co_varnames, cp->co_varnames, Py_EQ);

  00255	41 b8 02 00 00
	00		 mov	 r8d, 2
  0025b	48 8b 44 24 28	 mov	 rax, QWORD PTR cp$[rsp]
  00260	48 8b 90 90 00
	00 00		 mov	 rdx, QWORD PTR [rax+144]
  00267	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  0026c	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  00273	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00278	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 457  :     if (eq <= 0) goto unequal;

  0027c	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  00281	7f 05		 jg	 SHORT $LN8@code_richc
  00283	e9 83 00 00 00	 jmp	 $unequal$20852
$LN8@code_richc:

; 458  :     eq = PyObject_RichCompareBool(co->co_freevars, cp->co_freevars, Py_EQ);

  00288	41 b8 02 00 00
	00		 mov	 r8d, 2
  0028e	48 8b 44 24 28	 mov	 rax, QWORD PTR cp$[rsp]
  00293	48 8b 90 98 00
	00 00		 mov	 rdx, QWORD PTR [rax+152]
  0029a	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  0029f	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  002a6	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  002ab	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 459  :     if (eq <= 0) goto unequal;

  002af	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  002b4	7f 02		 jg	 SHORT $LN7@code_richc
  002b6	eb 53		 jmp	 SHORT $unequal$20852
$LN7@code_richc:

; 460  :     eq = PyObject_RichCompareBool(co->co_cellvars, cp->co_cellvars, Py_EQ);

  002b8	41 b8 02 00 00
	00		 mov	 r8d, 2
  002be	48 8b 44 24 28	 mov	 rax, QWORD PTR cp$[rsp]
  002c3	48 8b 90 a0 00
	00 00		 mov	 rdx, QWORD PTR [rax+160]
  002ca	48 8b 44 24 30	 mov	 rax, QWORD PTR co$[rsp]
  002cf	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  002d6	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  002db	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 461  :     if (eq <= 0) goto unequal;

  002df	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  002e4	7f 02		 jg	 SHORT $LN6@code_richc
  002e6	eb 23		 jmp	 SHORT $unequal$20852
$LN6@code_richc:

; 462  : 
; 463  :     if (op == Py_EQ)

  002e8	83 7c 24 70 02	 cmp	 DWORD PTR op$[rsp], 2
  002ed	75 0e		 jne	 SHORT $LN5@code_richc

; 464  :         res = Py_True;

  002ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  002f6	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 465  :     else

  002fb	eb 0c		 jmp	 SHORT $LN4@code_richc
$LN5@code_richc:

; 466  :         res = Py_False;

  002fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00304	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN4@code_richc:

; 467  :     goto done;

  00309	eb 2c		 jmp	 SHORT $done$20868
$unequal$20852:

; 468  : 
; 469  :   unequal:
; 470  :     if (eq < 0)

  0030b	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  00310	7d 04		 jge	 SHORT $LN3@code_richc

; 471  :         return NULL;

  00312	33 c0		 xor	 eax, eax
  00314	eb 30		 jmp	 SHORT $LN21@code_richc
$LN3@code_richc:

; 472  :     if (op == Py_NE)

  00316	83 7c 24 70 03	 cmp	 DWORD PTR op$[rsp], 3
  0031b	75 0e		 jne	 SHORT $LN2@code_richc

; 473  :         res = Py_True;

  0031d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00324	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 474  :     else

  00329	eb 0c		 jmp	 SHORT $LN1@code_richc
$LN2@code_richc:

; 475  :         res = Py_False;

  0032b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00332	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@code_richc:
$done$20868:

; 476  : 
; 477  :   done:
; 478  :     Py_INCREF(res);

  00337	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0033c	e8 00 00 00 00	 call	 _Py_IncRef

; 479  :     return res;

  00341	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN21@code_richc:

; 480  : }

  00346	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0034a	c3		 ret	 0
code_richcompare ENDP
_TEXT	ENDS
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$code_hash DD imagerel code_hash
	DD	imagerel code_hash+418
	DD	imagerel $unwind$code_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$code_hash DD 010901H
	DD	0c209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT code_hash
_TEXT	SEGMENT
h2$ = 32
h$ = 40
h0$ = 48
h5$ = 56
h1$ = 64
h4$ = 72
h6$ = 80
h3$ = 88
co$ = 112
code_hash PROC						; COMDAT

; 484  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 485  :     Py_hash_t h, h0, h1, h2, h3, h4, h5, h6;
; 486  :     h0 = PyObject_Hash(co->co_name);

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR co$[rsp]
  0000e	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00015	e8 00 00 00 00	 call	 PyObject_Hash
  0001a	48 89 44 24 30	 mov	 QWORD PTR h0$[rsp], rax

; 487  :     if (h0 == -1) return -1;

  0001f	48 83 7c 24 30
	ff		 cmp	 QWORD PTR h0$[rsp], -1
  00025	75 0c		 jne	 SHORT $LN8@code_hash
  00027	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0002e	e9 6a 01 00 00	 jmp	 $LN9@code_hash
$LN8@code_hash:

; 488  :     h1 = PyObject_Hash(co->co_code);

  00033	48 8b 44 24 70	 mov	 rax, QWORD PTR co$[rsp]
  00038	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0003c	e8 00 00 00 00	 call	 PyObject_Hash
  00041	48 89 44 24 40	 mov	 QWORD PTR h1$[rsp], rax

; 489  :     if (h1 == -1) return -1;

  00046	48 83 7c 24 40
	ff		 cmp	 QWORD PTR h1$[rsp], -1
  0004c	75 0c		 jne	 SHORT $LN7@code_hash
  0004e	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00055	e9 43 01 00 00	 jmp	 $LN9@code_hash
$LN7@code_hash:

; 490  :     h2 = PyObject_Hash(co->co_consts);

  0005a	48 8b 44 24 70	 mov	 rax, QWORD PTR co$[rsp]
  0005f	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00066	e8 00 00 00 00	 call	 PyObject_Hash
  0006b	48 89 44 24 20	 mov	 QWORD PTR h2$[rsp], rax

; 491  :     if (h2 == -1) return -1;

  00070	48 83 7c 24 20
	ff		 cmp	 QWORD PTR h2$[rsp], -1
  00076	75 0c		 jne	 SHORT $LN6@code_hash
  00078	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0007f	e9 19 01 00 00	 jmp	 $LN9@code_hash
$LN6@code_hash:

; 492  :     h3 = PyObject_Hash(co->co_names);

  00084	48 8b 44 24 70	 mov	 rax, QWORD PTR co$[rsp]
  00089	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00090	e8 00 00 00 00	 call	 PyObject_Hash
  00095	48 89 44 24 58	 mov	 QWORD PTR h3$[rsp], rax

; 493  :     if (h3 == -1) return -1;

  0009a	48 83 7c 24 58
	ff		 cmp	 QWORD PTR h3$[rsp], -1
  000a0	75 0c		 jne	 SHORT $LN5@code_hash
  000a2	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  000a9	e9 ef 00 00 00	 jmp	 $LN9@code_hash
$LN5@code_hash:

; 494  :     h4 = PyObject_Hash(co->co_varnames);

  000ae	48 8b 44 24 70	 mov	 rax, QWORD PTR co$[rsp]
  000b3	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  000ba	e8 00 00 00 00	 call	 PyObject_Hash
  000bf	48 89 44 24 48	 mov	 QWORD PTR h4$[rsp], rax

; 495  :     if (h4 == -1) return -1;

  000c4	48 83 7c 24 48
	ff		 cmp	 QWORD PTR h4$[rsp], -1
  000ca	75 0c		 jne	 SHORT $LN4@code_hash
  000cc	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  000d3	e9 c5 00 00 00	 jmp	 $LN9@code_hash
$LN4@code_hash:

; 496  :     h5 = PyObject_Hash(co->co_freevars);

  000d8	48 8b 44 24 70	 mov	 rax, QWORD PTR co$[rsp]
  000dd	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  000e4	e8 00 00 00 00	 call	 PyObject_Hash
  000e9	48 89 44 24 38	 mov	 QWORD PTR h5$[rsp], rax

; 497  :     if (h5 == -1) return -1;

  000ee	48 83 7c 24 38
	ff		 cmp	 QWORD PTR h5$[rsp], -1
  000f4	75 0c		 jne	 SHORT $LN3@code_hash
  000f6	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  000fd	e9 9b 00 00 00	 jmp	 $LN9@code_hash
$LN3@code_hash:

; 498  :     h6 = PyObject_Hash(co->co_cellvars);

  00102	48 8b 44 24 70	 mov	 rax, QWORD PTR co$[rsp]
  00107	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  0010e	e8 00 00 00 00	 call	 PyObject_Hash
  00113	48 89 44 24 50	 mov	 QWORD PTR h6$[rsp], rax

; 499  :     if (h6 == -1) return -1;

  00118	48 83 7c 24 50
	ff		 cmp	 QWORD PTR h6$[rsp], -1
  0011e	75 09		 jne	 SHORT $LN2@code_hash
  00120	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00127	eb 74		 jmp	 SHORT $LN9@code_hash
$LN2@code_hash:

; 500  :     h = h0 ^ h1 ^ h2 ^ h3 ^ h4 ^ h5 ^ h6 ^
; 501  :         co->co_argcount ^ co->co_kwonlyargcount ^
; 502  :         co->co_nlocals ^ co->co_flags;

  00129	48 8b 44 24 40	 mov	 rax, QWORD PTR h1$[rsp]
  0012e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR h0$[rsp]
  00133	48 33 c8	 xor	 rcx, rax
  00136	48 8b c1	 mov	 rax, rcx
  00139	48 33 44 24 20	 xor	 rax, QWORD PTR h2$[rsp]
  0013e	48 33 44 24 58	 xor	 rax, QWORD PTR h3$[rsp]
  00143	48 33 44 24 48	 xor	 rax, QWORD PTR h4$[rsp]
  00148	48 33 44 24 38	 xor	 rax, QWORD PTR h5$[rsp]
  0014d	48 33 44 24 50	 xor	 rax, QWORD PTR h6$[rsp]
  00152	48 8b 4c 24 70	 mov	 rcx, QWORD PTR co$[rsp]
  00157	48 63 49 60	 movsxd	 rcx, DWORD PTR [rcx+96]
  0015b	48 33 c1	 xor	 rax, rcx
  0015e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR co$[rsp]
  00163	48 63 49 64	 movsxd	 rcx, DWORD PTR [rcx+100]
  00167	48 33 c1	 xor	 rax, rcx
  0016a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR co$[rsp]
  0016f	48 63 49 68	 movsxd	 rcx, DWORD PTR [rcx+104]
  00173	48 33 c1	 xor	 rax, rcx
  00176	48 8b 4c 24 70	 mov	 rcx, QWORD PTR co$[rsp]
  0017b	48 63 49 70	 movsxd	 rcx, DWORD PTR [rcx+112]
  0017f	48 33 c1	 xor	 rax, rcx
  00182	48 89 44 24 28	 mov	 QWORD PTR h$[rsp], rax

; 503  :     if (h == -1) h = -2;

  00187	48 83 7c 24 28
	ff		 cmp	 QWORD PTR h$[rsp], -1
  0018d	75 09		 jne	 SHORT $LN1@code_hash
  0018f	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR h$[rsp], -2
$LN1@code_hash:

; 504  :     return h;

  00198	48 8b 44 24 28	 mov	 rax, QWORD PTR h$[rsp]
$LN9@code_hash:

; 505  : }

  0019d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001a1	c3		 ret	 0
code_hash ENDP
_TEXT	ENDS
PUBLIC	PyCode_Addr2Line
EXTRN	PyBytes_AsString:PROC
EXTRN	PyBytes_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCode_Addr2Line DD imagerel $LN6
	DD	imagerel $LN6+198
	DD	imagerel $unwind$PyCode_Addr2Line
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCode_Addr2Line DD 010d01H
	DD	0820dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCode_Addr2Line
_TEXT	SEGMENT
p$ = 32
line$ = 40
size$ = 48
addr$ = 56
co$ = 80
addrq$ = 88
PyCode_Addr2Line PROC					; COMDAT

; 561  : {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 562  :     Py_ssize_t size = PyBytes_Size(co->co_lnotab) / 2;

  0000d	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00012	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  00019	e8 00 00 00 00	 call	 PyBytes_Size
  0001e	48 99		 cdq
  00020	48 2b c2	 sub	 rax, rdx
  00023	48 d1 f8	 sar	 rax, 1
  00026	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 563  :     unsigned char *p = (unsigned char*)PyBytes_AsString(co->co_lnotab);

  0002b	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00030	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  00037	e8 00 00 00 00	 call	 PyBytes_AsString
  0003c	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 564  :     int line = co->co_firstlineno;

  00041	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00046	8b 80 c0 00 00
	00		 mov	 eax, DWORD PTR [rax+192]
  0004c	89 44 24 28	 mov	 DWORD PTR line$[rsp], eax

; 565  :     int addr = 0;

  00050	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR addr$[rsp], 0
$LN3@PyCode_Add:

; 566  :     while (--size >= 0) {

  00058	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  0005d	48 ff c8	 dec	 rax
  00060	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax
  00065	48 83 7c 24 30
	00		 cmp	 QWORD PTR size$[rsp], 0
  0006b	7c 50		 jl	 SHORT $LN2@PyCode_Add

; 567  :         addr += *p++;

  0006d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00072	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00075	8b 4c 24 38	 mov	 ecx, DWORD PTR addr$[rsp]
  00079	03 c8		 add	 ecx, eax
  0007b	8b c1		 mov	 eax, ecx
  0007d	89 44 24 38	 mov	 DWORD PTR addr$[rsp], eax
  00081	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00086	48 ff c0	 inc	 rax
  00089	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 568  :         if (addr > addrq)

  0008e	8b 44 24 58	 mov	 eax, DWORD PTR addrq$[rsp]
  00092	39 44 24 38	 cmp	 DWORD PTR addr$[rsp], eax
  00096	7e 02		 jle	 SHORT $LN1@PyCode_Add

; 569  :             break;

  00098	eb 23		 jmp	 SHORT $LN2@PyCode_Add
$LN1@PyCode_Add:

; 570  :         line += *p++;

  0009a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000a2	8b 4c 24 28	 mov	 ecx, DWORD PTR line$[rsp]
  000a6	03 c8		 add	 ecx, eax
  000a8	8b c1		 mov	 eax, ecx
  000aa	89 44 24 28	 mov	 DWORD PTR line$[rsp], eax
  000ae	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000b3	48 ff c0	 inc	 rax
  000b6	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 571  :     }

  000bb	eb 9b		 jmp	 SHORT $LN3@PyCode_Add
$LN2@PyCode_Add:

; 572  :     return line;

  000bd	8b 44 24 28	 mov	 eax, DWORD PTR line$[rsp]

; 573  : }

  000c1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c5	c3		 ret	 0
PyCode_Addr2Line ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BC@FIMGHMAI@?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@HMAFKCJK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAl?$AAn?$AAo?$AAt?$AAa?$AAb?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	_PyCode_CheckLineNumber
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCode_CheckLineNumber DD imagerel $LN15
	DD	imagerel $LN15+524
	DD	imagerel $unwind$_PyCode_CheckLineNumber
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCode_CheckLineNumber DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT ??_C@_1BC@FIMGHMAI@?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@FIMGHMAI@?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'l'
	DB	00H, 'i', 00H, 'n', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@HMAFKCJK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAl?$AAn?$AAo?$AAt?$AAa?$AAb?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@HMAFKCJK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAl?$AAn?$AAo?$AAt?$AAa?$AAb?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'c', 00H, 'o', 00H, '-', 00H, '>', 00H, 'c', 00H, 'o', 00H
	DB	'_', 00H, 'l', 00H, 'n', 00H, 'o', 00H, 't', 00H, 'a', 00H, 'b'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyCode_CheckLineNumber
_TEXT	SEGMENT
p$ = 32
line$ = 40
size$ = 48
addr$ = 56
co$ = 80
lasti$ = 88
bounds$ = 96
_PyCode_CheckLineNumber PROC				; COMDAT

; 579  : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 580  :     Py_ssize_t size;
; 581  :     int addr, line;
; 582  :     unsigned char* p;
; 583  : 
; 584  :     p = (unsigned char*)PyBytes_AS_STRING(co->co_lnotab);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00017	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0001e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00022	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00028	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0002d	85 c0		 test	 eax, eax
  0002f	75 1c		 jne	 SHORT $LN12@PyCode_Che
  00031	41 b8 48 02 00
	00		 mov	 r8d, 584		; 00000248H
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@HMAFKCJK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAl?$AAn?$AAo?$AAt?$AAa?$AAb?$AA?$CJ?$AA?$AA@
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004b	33 c0		 xor	 eax, eax
$LN12@PyCode_Che:
  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00052	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00059	48 83 c0 78	 add	 rax, 120		; 00000078H
  0005d	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 585  :     size = PyBytes_GET_SIZE(co->co_lnotab) / 2;

  00062	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00067	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0006e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00072	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00078	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0007d	85 c0		 test	 eax, eax
  0007f	75 1c		 jne	 SHORT $LN13@PyCode_Che
  00081	41 b8 49 02 00
	00		 mov	 r8d, 585		; 00000249H
  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@HMAFKCJK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAl?$AAn?$AAo?$AAt?$AAa?$AAb?$AA?$CJ?$AA?$AA@
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0009b	33 c0		 xor	 eax, eax
$LN13@PyCode_Che:
  0009d	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  000a2	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  000a9	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ad	48 99		 cdq
  000af	48 2b c2	 sub	 rax, rdx
  000b2	48 d1 f8	 sar	 rax, 1
  000b5	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 586  : 
; 587  :     addr = 0;

  000ba	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR addr$[rsp], 0

; 588  :     line = co->co_firstlineno;

  000c2	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  000c7	8b 80 c0 00 00
	00		 mov	 eax, DWORD PTR [rax+192]
  000cd	89 44 24 28	 mov	 DWORD PTR line$[rsp], eax

; 589  :     assert(line > 0);

  000d1	83 7c 24 28 00	 cmp	 DWORD PTR line$[rsp], 0
  000d6	7f 1c		 jg	 SHORT $LN14@PyCode_Che
  000d8	41 b8 4d 02 00
	00		 mov	 r8d, 589		; 0000024dH
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@CBCKFKIC@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@FIMGHMAI@?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f2	33 c0		 xor	 eax, eax
$LN14@PyCode_Che:

; 590  : 
; 591  :     /* possible optimization: if f->f_lasti == instr_ub
; 592  :        (likely to be a common case) then we already know
; 593  :        instr_lb -- if we stored the matching value of p
; 594  :        somwhere we could skip the first while loop. */
; 595  : 
; 596  :     /* See lnotab_notes.txt for the description of
; 597  :        co_lnotab.  A point to remember: increments to p
; 598  :        come in (addr, line) pairs. */
; 599  : 
; 600  :     bounds->ap_lower = 0;

  000f4	48 8b 44 24 60	 mov	 rax, QWORD PTR bounds$[rsp]
  000f9	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN9@PyCode_Che:

; 601  :     while (size > 0) {

  000ff	48 83 7c 24 30
	00		 cmp	 QWORD PTR size$[rsp], 0
  00105	0f 8e 83 00 00
	00		 jle	 $LN8@PyCode_Che

; 602  :         if (addr + *p > lasti)

  0010b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00110	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00113	8b 4c 24 38	 mov	 ecx, DWORD PTR addr$[rsp]
  00117	03 c8		 add	 ecx, eax
  00119	8b c1		 mov	 eax, ecx
  0011b	3b 44 24 58	 cmp	 eax, DWORD PTR lasti$[rsp]
  0011f	7e 02		 jle	 SHORT $LN7@PyCode_Che

; 603  :             break;

  00121	eb 6b		 jmp	 SHORT $LN8@PyCode_Che
$LN7@PyCode_Che:

; 604  :         addr += *p++;

  00123	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00128	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0012b	8b 4c 24 38	 mov	 ecx, DWORD PTR addr$[rsp]
  0012f	03 c8		 add	 ecx, eax
  00131	8b c1		 mov	 eax, ecx
  00133	89 44 24 38	 mov	 DWORD PTR addr$[rsp], eax
  00137	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0013c	48 ff c0	 inc	 rax
  0013f	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 605  :         if (*p)

  00144	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00149	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0014c	85 c0		 test	 eax, eax
  0014e	74 0b		 je	 SHORT $LN6@PyCode_Che

; 606  :             bounds->ap_lower = addr;

  00150	48 8b 44 24 60	 mov	 rax, QWORD PTR bounds$[rsp]
  00155	8b 4c 24 38	 mov	 ecx, DWORD PTR addr$[rsp]
  00159	89 08		 mov	 DWORD PTR [rax], ecx
$LN6@PyCode_Che:

; 607  :         line += *p++;

  0015b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00160	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00163	8b 4c 24 28	 mov	 ecx, DWORD PTR line$[rsp]
  00167	03 c8		 add	 ecx, eax
  00169	8b c1		 mov	 eax, ecx
  0016b	89 44 24 28	 mov	 DWORD PTR line$[rsp], eax
  0016f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00174	48 ff c0	 inc	 rax
  00177	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 608  :         --size;

  0017c	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  00181	48 ff c8	 dec	 rax
  00184	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 609  :     }

  00189	e9 71 ff ff ff	 jmp	 $LN9@PyCode_Che
$LN8@PyCode_Che:

; 610  : 
; 611  :     if (size > 0) {

  0018e	48 83 7c 24 30
	00		 cmp	 QWORD PTR size$[rsp], 0
  00194	7e 61		 jle	 SHORT $LN5@PyCode_Che
$LN4@PyCode_Che:

; 612  :         while (--size >= 0) {

  00196	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  0019b	48 ff c8	 dec	 rax
  0019e	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax
  001a3	48 83 7c 24 30
	00		 cmp	 QWORD PTR size$[rsp], 0
  001a9	7c 3e		 jl	 SHORT $LN3@PyCode_Che

; 613  :             addr += *p++;

  001ab	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  001b0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001b3	8b 4c 24 38	 mov	 ecx, DWORD PTR addr$[rsp]
  001b7	03 c8		 add	 ecx, eax
  001b9	8b c1		 mov	 eax, ecx
  001bb	89 44 24 38	 mov	 DWORD PTR addr$[rsp], eax
  001bf	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  001c4	48 ff c0	 inc	 rax
  001c7	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 614  :             if (*p++)

  001cc	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  001d1	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001d4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  001d9	48 ff c1	 inc	 rcx
  001dc	48 89 4c 24 20	 mov	 QWORD PTR p$[rsp], rcx
  001e1	85 c0		 test	 eax, eax
  001e3	74 02		 je	 SHORT $LN2@PyCode_Che

; 615  :                 break;

  001e5	eb 02		 jmp	 SHORT $LN3@PyCode_Che
$LN2@PyCode_Che:

; 616  :         }

  001e7	eb ad		 jmp	 SHORT $LN4@PyCode_Che
$LN3@PyCode_Che:

; 617  :         bounds->ap_upper = addr;

  001e9	48 8b 44 24 60	 mov	 rax, QWORD PTR bounds$[rsp]
  001ee	8b 4c 24 38	 mov	 ecx, DWORD PTR addr$[rsp]
  001f2	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 618  :     }
; 619  :     else {

  001f5	eb 0c		 jmp	 SHORT $LN1@PyCode_Che
$LN5@PyCode_Che:

; 620  :         bounds->ap_upper = INT_MAX;

  001f7	48 8b 44 24 60	 mov	 rax, QWORD PTR bounds$[rsp]
  001fc	c7 40 04 ff ff
	ff 7f		 mov	 DWORD PTR [rax+4], 2147483647 ; 7fffffffH
$LN1@PyCode_Che:

; 621  :     }
; 622  : 
; 623  :     return line;

  00203	8b 44 24 28	 mov	 eax, DWORD PTR line$[rsp]

; 624  : }

  00207	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0020b	c3		 ret	 0
_PyCode_CheckLineNumber ENDP
_TEXT	ENDS
END
