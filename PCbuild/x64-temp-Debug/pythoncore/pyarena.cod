; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	PyArena_New
EXTRN	PyList_New:PROC
EXTRN	__imp_free:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	__imp_malloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyarena.c
pdata	SEGMENT
$pdata$PyArena_New DD imagerel $LN6
	DD	imagerel $LN6+239
	DD	imagerel $unwind$PyArena_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyArena_New DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyArena_New
_TEXT	SEGMENT
arena$ = 32
PyArena_New PROC					; COMDAT

; 129  : {

$LN6:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 130  :     PyArena* arena = (PyArena *)malloc(sizeof(PyArena));

  00004	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0000f	48 89 44 24 20	 mov	 QWORD PTR arena$[rsp], rax

; 131  :     if (!arena)

  00014	48 83 7c 24 20
	00		 cmp	 QWORD PTR arena$[rsp], 0
  0001a	75 0a		 jne	 SHORT $LN3@PyArena_Ne

; 132  :         return (PyArena*)PyErr_NoMemory();

  0001c	e8 00 00 00 00	 call	 PyErr_NoMemory
  00021	e9 c4 00 00 00	 jmp	 $LN4@PyArena_Ne
$LN3@PyArena_Ne:

; 133  : 
; 134  :     arena->a_head = block_new(DEFAULT_BLOCK_SIZE);

  00026	b9 00 20 00 00	 mov	 ecx, 8192		; 00002000H
  0002b	e8 00 00 00 00	 call	 block_new
  00030	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arena$[rsp]
  00035	48 89 01	 mov	 QWORD PTR [rcx], rax

; 135  :     arena->a_cur = arena->a_head;

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR arena$[rsp]
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arena$[rsp]
  00042	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00045	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 136  :     if (!arena->a_head) {

  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR arena$[rsp]
  0004e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00052	75 15		 jne	 SHORT $LN2@PyArena_Ne

; 137  :         free((void *)arena);

  00054	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arena$[rsp]
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 138  :         return (PyArena*)PyErr_NoMemory();

  0005f	e8 00 00 00 00	 call	 PyErr_NoMemory
  00064	e9 81 00 00 00	 jmp	 $LN4@PyArena_Ne
$LN2@PyArena_Ne:

; 139  :     }
; 140  :     arena->a_objects = PyList_New(0);

  00069	33 c9		 xor	 ecx, ecx
  0006b	e8 00 00 00 00	 call	 PyList_New
  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arena$[rsp]
  00075	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 141  :     if (!arena->a_objects) {

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR arena$[rsp]
  0007e	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00083	75 1f		 jne	 SHORT $LN1@PyArena_Ne

; 142  :         block_free(arena->a_head);

  00085	48 8b 44 24 20	 mov	 rax, QWORD PTR arena$[rsp]
  0008a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0008d	e8 00 00 00 00	 call	 block_free

; 143  :         free((void *)arena);

  00092	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arena$[rsp]
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 144  :         return (PyArena*)PyErr_NoMemory();

  0009d	e8 00 00 00 00	 call	 PyErr_NoMemory
  000a2	eb 46		 jmp	 SHORT $LN4@PyArena_Ne
$LN1@PyArena_Ne:

; 145  :     }
; 146  : #if defined(Py_DEBUG)
; 147  :     arena->total_allocs = 0;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR arena$[rsp]
  000a9	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 148  :     arena->total_size = 0;

  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR arena$[rsp]
  000b6	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 149  :     arena->total_blocks = 1;

  000be	48 8b 44 24 20	 mov	 rax, QWORD PTR arena$[rsp]
  000c3	48 c7 40 28 01
	00 00 00	 mov	 QWORD PTR [rax+40], 1

; 150  :     arena->total_block_size = DEFAULT_BLOCK_SIZE;

  000cb	48 8b 44 24 20	 mov	 rax, QWORD PTR arena$[rsp]
  000d0	48 c7 40 30 00
	20 00 00	 mov	 QWORD PTR [rax+48], 8192 ; 00002000H

; 151  :     arena->total_big_blocks = 0;

  000d8	48 8b 44 24 20	 mov	 rax, QWORD PTR arena$[rsp]
  000dd	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 152  : #endif
; 153  :     return arena;

  000e5	48 8b 44 24 20	 mov	 rax, QWORD PTR arena$[rsp]
$LN4@PyArena_Ne:

; 154  : }

  000ea	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ee	c3		 ret	 0
PyArena_New ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$block_new DD imagerel block_new
	DD	imagerel block_new+133
	DD	imagerel $unwind$block_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$block_new DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT block_new
_TEXT	SEGMENT
b$ = 32
size$ = 64
block_new PROC						; COMDAT

; 77   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 78   :     /* Allocate header and block as one unit.
; 79   :        ab_mem points just past header. */
; 80   :     block *b = (block *)malloc(sizeof(block) + size);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR size$[rsp]
  0000e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00012	48 8b c8	 mov	 rcx, rax
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0001b	48 89 44 24 20	 mov	 QWORD PTR b$[rsp], rax

; 81   :     if (!b)

  00020	48 83 7c 24 20
	00		 cmp	 QWORD PTR b$[rsp], 0
  00026	75 04		 jne	 SHORT $LN1@block_new

; 82   :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 54		 jmp	 SHORT $LN2@block_new
$LN1@block_new:

; 83   :     b->ab_size = size;

  0002c	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR size$[rsp]
  00036	48 89 08	 mov	 QWORD PTR [rax], rcx

; 84   :     b->ab_mem = (void *)(b + 1);

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
  0003e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00042	48 8b 4c 24 20	 mov	 rcx, QWORD PTR b$[rsp]
  00047	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 85   :     b->ab_next = NULL;

  0004b	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
  00050	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 86   :     b->ab_offset = (char *)_Py_ALIGN_UP(b->ab_mem, ALIGNMENT) -
; 87   :             (char *)(b->ab_mem);

  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
  0005d	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00061	48 83 c0 07	 add	 rax, 7
  00065	48 83 e0 f8	 and	 rax, -8
  00069	48 8b 4c 24 20	 mov	 rcx, QWORD PTR b$[rsp]
  0006e	48 2b 41 18	 sub	 rax, QWORD PTR [rcx+24]
  00072	48 8b 4c 24 20	 mov	 rcx, QWORD PTR b$[rsp]
  00077	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 88   :     return b;

  0007b	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
$LN2@block_new:

; 89   : }

  00080	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00084	c3		 ret	 0
block_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$block_free DD imagerel block_free
	DD	imagerel block_free+59
	DD	imagerel $unwind$block_free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$block_free DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT block_free
_TEXT	SEGMENT
next$20327 = 32
b$ = 64
block_free PROC						; COMDAT

; 92   : block_free(block *b) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@block_free:

; 93   :     while (b) {

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR b$[rsp], 0
  0000f	74 25		 je	 SHORT $LN1@block_free

; 94   :         block *next = b->ab_next;

  00011	48 8b 44 24 40	 mov	 rax, QWORD PTR b$[rsp]
  00016	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001a	48 89 44 24 20	 mov	 QWORD PTR next$20327[rsp], rax

; 95   :         free(b);

  0001f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b$[rsp]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 96   :         b = next;

  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR next$20327[rsp]
  0002f	48 89 44 24 40	 mov	 QWORD PTR b$[rsp], rax

; 97   :     }

  00034	eb d3		 jmp	 SHORT $LN2@block_free
$LN1@block_free:

; 98   : }

  00036	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003a	c3		 ret	 0
block_free ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_1M@OMAOBMMB@?$AAa?$AAr?$AAe?$AAn?$AAa?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@DPMMHLHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAa?$AAr?$AAe?$AAn?$AAa?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	PyArena_Free
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyArena_Free DD imagerel $LN4
	DD	imagerel $LN4+88
	DD	imagerel $unwind$PyArena_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyArena_Free DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_1M@OMAOBMMB@?$AAa?$AAr?$AAe?$AAn?$AAa?$AA?$AA@
CONST	SEGMENT
??_C@_1M@OMAOBMMB@?$AAa?$AAr?$AAe?$AAn?$AAa?$AA?$AA@ DB 'a', 00H, 'r', 00H
	DB	'e', 00H, 'n', 00H, 'a', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@DPMMHLHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAa?$AAr?$AAe?$AAn?$AAa?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@DPMMHLHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAa?$AAr?$AAe?$AAn?$AAa?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'p', 00H, 'y', 00H, 'a', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'a', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyArena_Free
_TEXT	SEGMENT
arena$ = 48
PyArena_Free PROC					; COMDAT

; 158  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 159  :     assert(arena);

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR arena$[rsp], 0
  0000f	75 1c		 jne	 SHORT $LN3@PyArena_Fr
  00011	41 b8 9f 00 00
	00		 mov	 r8d, 159		; 0000009fH
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@DPMMHLHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAa?$AAr?$AAe?$AAn?$AAa?$AA?4?$AAc?$AA?$AA@
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1M@OMAOBMMB@?$AAa?$AAr?$AAe?$AAn?$AAa?$AA?$AA@
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002b	33 c0		 xor	 eax, eax
$LN3@PyArena_Fr:

; 160  : #if defined(Py_DEBUG)
; 161  :     /*
; 162  :     fprintf(stderr,
; 163  :         "alloc=%d size=%d blocks=%d block_size=%d big=%d objects=%d\n",
; 164  :         arena->total_allocs, arena->total_size, arena->total_blocks,
; 165  :         arena->total_block_size, arena->total_big_blocks,
; 166  :         PyList_Size(arena->a_objects));
; 167  :     */
; 168  : #endif
; 169  :     block_free(arena->a_head);

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR arena$[rsp]
  00032	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00035	e8 00 00 00 00	 call	 block_free

; 170  :     /* This property normally holds, except when the code being compiled
; 171  :        is sys.getobjects(0), in which case there will be two references.
; 172  :     assert(arena->a_objects->ob_refcnt == 1);
; 173  :     */
; 174  : 
; 175  :     Py_DECREF(arena->a_objects);

  0003a	48 8b 44 24 30	 mov	 rax, QWORD PTR arena$[rsp]
  0003f	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00043	e8 00 00 00 00	 call	 _Py_DecRef

; 176  :     free(arena);

  00048	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arena$[rsp]
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 177  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
PyArena_Free ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	PyArena_Malloc
;	COMDAT pdata
; File c:\src\pyparallel\python\pyarena.c
pdata	SEGMENT
$pdata$PyArena_Malloc DD imagerel $LN6
	DD	imagerel $LN6+241
	DD	imagerel $unwind$PyArena_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyArena_Malloc DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyArena_Malloc
_TEXT	SEGMENT
p$ = 32
arena$ = 64
size$ = 72
PyArena_Malloc PROC					; COMDAT

; 181  : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 182  :     void *p = block_alloc(arena->a_cur, size);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR size$[rsp]
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR arena$[rsp]
  00018	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0001c	e8 00 00 00 00	 call	 block_alloc
  00021	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 183  :     if (!p)

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0002c	75 0a		 jne	 SHORT $LN3@PyArena_Ma

; 184  :         return PyErr_NoMemory();

  0002e	e8 00 00 00 00	 call	 PyErr_NoMemory
  00033	e9 b4 00 00 00	 jmp	 $LN4@PyArena_Ma
$LN3@PyArena_Ma:

; 185  : #if defined(Py_DEBUG)
; 186  :     arena->total_allocs++;

  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR arena$[rsp]
  0003d	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00041	48 ff c0	 inc	 rax
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arena$[rsp]
  00049	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 187  :     arena->total_size += size;

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR arena$[rsp]
  00052	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00056	48 03 44 24 48	 add	 rax, QWORD PTR size$[rsp]
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arena$[rsp]
  00060	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 188  : #endif
; 189  :     /* Reset cur if we allocated a new block. */
; 190  :     if (arena->a_cur->ab_next) {

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR arena$[rsp]
  00069	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0006d	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00072	74 73		 je	 SHORT $LN2@PyArena_Ma

; 191  :         arena->a_cur = arena->a_cur->ab_next;

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR arena$[rsp]
  00079	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0007d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arena$[rsp]
  00082	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00086	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 192  : #if defined(Py_DEBUG)
; 193  :         arena->total_blocks++;

  0008a	48 8b 44 24 40	 mov	 rax, QWORD PTR arena$[rsp]
  0008f	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00093	48 ff c0	 inc	 rax
  00096	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arena$[rsp]
  0009b	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 194  :         arena->total_block_size += arena->a_cur->ab_size;

  0009f	48 8b 44 24 40	 mov	 rax, QWORD PTR arena$[rsp]
  000a4	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arena$[rsp]
  000ad	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  000b1	48 03 08	 add	 rcx, QWORD PTR [rax]
  000b4	48 8b c1	 mov	 rax, rcx
  000b7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arena$[rsp]
  000bc	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 195  :         if (arena->a_cur->ab_size > DEFAULT_BLOCK_SIZE)

  000c0	48 8b 44 24 40	 mov	 rax, QWORD PTR arena$[rsp]
  000c5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c9	48 81 38 00 20
	00 00		 cmp	 QWORD PTR [rax], 8192	; 00002000H
  000d0	76 15		 jbe	 SHORT $LN1@PyArena_Ma

; 196  :             ++arena->total_big_blocks;

  000d2	48 8b 44 24 40	 mov	 rax, QWORD PTR arena$[rsp]
  000d7	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000db	48 ff c0	 inc	 rax
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arena$[rsp]
  000e3	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax
$LN1@PyArena_Ma:
$LN2@PyArena_Ma:

; 197  : #endif
; 198  :     }
; 199  :     return p;

  000e7	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN4@PyArena_Ma:

; 200  : }

  000ec	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f0	c3		 ret	 0
PyArena_Malloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EE@KEFDMGMH@?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAs?$AAi?$AAz@ ; `string'
PUBLIC	??_C@_1BI@GJFFMGJF@?$AA?$CB?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_13EPJEBPGL@?$AAb?$AA?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$block_alloc DD imagerel block_alloc
	DD	imagerel block_alloc+326
	DD	imagerel $unwind$block_alloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$block_alloc DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_1EE@KEFDMGMH@?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAs?$AAi?$AAz@
CONST	SEGMENT
??_C@_1EE@KEFDMGMH@?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAs?$AAi?$AAz@ DB 'b'
	DB	00H, '-', 00H, '>', 00H, 'a', 00H, 'b', 00H, '_', 00H, 'o', 00H
	DB	'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '+'
	DB	00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'b', 00H, '-', 00H, '>', 00H, 'a'
	DB	00H, 'b', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@GJFFMGJF@?$AA?$CB?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GJFFMGJF@?$AA?$CB?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ DB '!'
	DB	00H, 'b', 00H, '-', 00H, '>', 00H, 'a', 00H, 'b', 00H, '_', 00H
	DB	'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
CONST	SEGMENT
??_C@_13EPJEBPGL@?$AAb?$AA?$AA@ DB 'b', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT block_alloc
_TEXT	SEGMENT
p$ = 32
newbl$20342 = 40
tv76 = 48
b$ = 80
size$ = 88
block_alloc PROC					; COMDAT

; 102  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 103  :     void *p;
; 104  :     assert(b);

  0000e	48 83 7c 24 50
	00		 cmp	 QWORD PTR b$[rsp], 0
  00014	75 1c		 jne	 SHORT $LN5@block_allo
  00016	41 b8 68 00 00
	00		 mov	 r8d, 104		; 00000068H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@DPMMHLHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAa?$AAr?$AAe?$AAn?$AAa?$AA?4?$AAc?$AA?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13EPJEBPGL@?$AAb?$AA?$AA@
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00030	33 c0		 xor	 eax, eax
$LN5@block_allo:

; 105  :     size = _Py_SIZE_ROUND_UP(size, ALIGNMENT);

  00032	48 8b 44 24 58	 mov	 rax, QWORD PTR size$[rsp]
  00037	48 83 c0 07	 add	 rax, 7
  0003b	48 83 e0 f8	 and	 rax, -8
  0003f	48 89 44 24 58	 mov	 QWORD PTR size$[rsp], rax

; 106  :     if (b->ab_offset + size > b->ab_size) {

  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR b$[rsp]
  00049	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004d	48 03 44 24 58	 add	 rax, QWORD PTR size$[rsp]
  00052	48 8b 4c 24 50	 mov	 rcx, QWORD PTR b$[rsp]
  00057	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  0005a	76 7e		 jbe	 SHORT $LN2@block_allo

; 107  :         /* If we need to allocate more memory than will fit in
; 108  :            the default block, allocate a one-off block that is
; 109  :            exactly the right size. */
; 110  :         /* TODO(jhylton): Think about space waste at end of block */
; 111  :         block *newbl = block_new(
; 112  :                         size < DEFAULT_BLOCK_SIZE ?
; 113  :                         DEFAULT_BLOCK_SIZE : size);

  0005c	48 81 7c 24 58
	00 20 00 00	 cmp	 QWORD PTR size$[rsp], 8192 ; 00002000H
  00065	73 0b		 jae	 SHORT $LN6@block_allo
  00067	48 c7 44 24 30
	00 20 00 00	 mov	 QWORD PTR tv76[rsp], 8192 ; 00002000H
  00070	eb 0a		 jmp	 SHORT $LN7@block_allo
$LN6@block_allo:
  00072	48 8b 44 24 58	 mov	 rax, QWORD PTR size$[rsp]
  00077	48 89 44 24 30	 mov	 QWORD PTR tv76[rsp], rax
$LN7@block_allo:
  0007c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv76[rsp]
  00081	e8 00 00 00 00	 call	 block_new
  00086	48 89 44 24 28	 mov	 QWORD PTR newbl$20342[rsp], rax

; 114  :         if (!newbl)

  0008b	48 83 7c 24 28
	00		 cmp	 QWORD PTR newbl$20342[rsp], 0
  00091	75 07		 jne	 SHORT $LN1@block_allo

; 115  :             return NULL;

  00093	33 c0		 xor	 eax, eax
  00095	e9 a7 00 00 00	 jmp	 $LN3@block_allo
$LN1@block_allo:

; 116  :         assert(!b->ab_next);

  0009a	48 8b 44 24 50	 mov	 rax, QWORD PTR b$[rsp]
  0009f	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  000a4	74 1c		 je	 SHORT $LN8@block_allo
  000a6	41 b8 74 00 00
	00		 mov	 r8d, 116		; 00000074H
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@DPMMHLHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAa?$AAr?$AAe?$AAn?$AAa?$AA?4?$AAc?$AA?$AA@
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GJFFMGJF@?$AA?$CB?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c0	33 c0		 xor	 eax, eax
$LN8@block_allo:

; 117  :         b->ab_next = newbl;

  000c2	48 8b 44 24 50	 mov	 rax, QWORD PTR b$[rsp]
  000c7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR newbl$20342[rsp]
  000cc	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 118  :         b = newbl;

  000d0	48 8b 44 24 28	 mov	 rax, QWORD PTR newbl$20342[rsp]
  000d5	48 89 44 24 50	 mov	 QWORD PTR b$[rsp], rax
$LN2@block_allo:

; 119  :     }
; 120  : 
; 121  :     assert(b->ab_offset + size <= b->ab_size);

  000da	48 8b 44 24 50	 mov	 rax, QWORD PTR b$[rsp]
  000df	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e3	48 03 44 24 58	 add	 rax, QWORD PTR size$[rsp]
  000e8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR b$[rsp]
  000ed	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  000f0	76 1c		 jbe	 SHORT $LN9@block_allo
  000f2	41 b8 79 00 00
	00		 mov	 r8d, 121		; 00000079H
  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@DPMMHLHI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAa?$AAr?$AAe?$AAn?$AAa?$AA?4?$AAc?$AA?$AA@
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@KEFDMGMH@?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AA?9?$AA?$DO?$AAa?$AAb?$AA_?$AAs?$AAi?$AAz@
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010c	33 c0		 xor	 eax, eax
$LN9@block_allo:

; 122  :     p = (void *)(((char *)b->ab_mem) + b->ab_offset);

  0010e	48 8b 44 24 50	 mov	 rax, QWORD PTR b$[rsp]
  00113	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00117	48 8b 4c 24 50	 mov	 rcx, QWORD PTR b$[rsp]
  0011c	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00120	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 123  :     b->ab_offset += size;

  00125	48 8b 44 24 50	 mov	 rax, QWORD PTR b$[rsp]
  0012a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0012e	48 03 44 24 58	 add	 rax, QWORD PTR size$[rsp]
  00133	48 8b 4c 24 50	 mov	 rcx, QWORD PTR b$[rsp]
  00138	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 124  :     return p;

  0013c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN3@block_allo:

; 125  : }

  00141	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00145	c3		 ret	 0
block_alloc ENDP
_TEXT	ENDS
PUBLIC	PyArena_AddPyObject
EXTRN	PyList_Append:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyArena_AddPyObject DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$PyArena_AddPyObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyArena_AddPyObject DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyArena_AddPyObject
_TEXT	SEGMENT
r$ = 32
arena$ = 64
obj$ = 72
PyArena_AddPyObject PROC				; COMDAT

; 204  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 205  :     int r = PyList_Append(arena->a_objects, obj);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR obj$[rsp]
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR arena$[rsp]
  00018	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0001c	e8 00 00 00 00	 call	 PyList_Append
  00021	89 44 24 20	 mov	 DWORD PTR r$[rsp], eax

; 206  :     if (r >= 0) {

  00025	83 7c 24 20 00	 cmp	 DWORD PTR r$[rsp], 0
  0002a	7c 0a		 jl	 SHORT $LN1@PyArena_Ad

; 207  :         Py_DECREF(obj);

  0002c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00031	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyArena_Ad:

; 208  :     }
; 209  :     return r;

  00036	8b 44 24 20	 mov	 eax, DWORD PTR r$[rsp]

; 210  : }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
PyArena_AddPyObject ENDP
_TEXT	ENDS
END
