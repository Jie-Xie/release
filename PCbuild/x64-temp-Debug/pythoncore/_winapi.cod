; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07FFLJJADP@_winapi?$AA@			; `string'
PUBLIC	??_C@_09NOIIIIGM@WriteFile?$AA@			; `string'
PUBLIC	??_C@_0BE@CLKLPNNG@WaitForSingleObject?$AA@	; `string'
PUBLIC	??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@	; `string'
PUBLIC	??_C@_0O@LMMPCKDG@WaitNamedPipe?$AA@		; `string'
PUBLIC	??_C@_0BB@LOFPKPFA@TerminateProcess?$AA@	; `string'
PUBLIC	??_C@_0BI@DIHOHPCP@SetNamedPipeHandleState?$AA@	; `string'
PUBLIC	??_C@_08KLCHJOKF@ReadFile?$AA@			; `string'
PUBLIC	??_C@_0O@CBLPJHOM@PeekNamedPipe?$AA@		; `string'
PUBLIC	??_C@_0M@MMCMKPDL@OpenProcess?$AA@		; `string'
PUBLIC	??_C@_0L@LNAOMCPJ@GetVersion?$AA@		; `string'
PUBLIC	??_C@_0N@BKPPPGAL@GetStdHandle?$AA@		; `string'
PUBLIC	??_C@_0BC@PGJLHJFJ@GetModuleFileName?$AA@	; `string'
PUBLIC	??_C@_0N@HICKNDGL@GetLastError?$AA@		; `string'
PUBLIC	??_C@_0BD@OOONFEIA@GetExitCodeProcess?$AA@	; `string'
PUBLIC	??_C@_0BC@PMJGPBJJ@GetCurrentProcess?$AA@	; `string'
PUBLIC	??_C@_0M@LPAKIOHO@ExitProcess?$AA@		; `string'
PUBLIC	??_C@_0BA@KKBHKMMH@DuplicateHandle?$AA@		; `string'
PUBLIC	??_C@_0O@FGHFFHOP@CreateProcess?$AA@		; `string'
PUBLIC	??_C@_0L@FBIDOKLH@CreatePipe?$AA@		; `string'
PUBLIC	??_C@_0BA@JPNEEGJB@CreateNamedPipe?$AA@		; `string'
PUBLIC	??_C@_0L@KLBPNCIB@CreateFile?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BB@JNKPBCBE@ConnectNamedPipe?$AA@	; `string'
PUBLIC	??_C@_0M@JHJNLFGC@CloseHandle?$AA@		; `string'
PUBLIC	??_C@_06HOHPNJLC@buffer?$AA@			; `string'
PUBLIC	??_C@_04IAGNFIBA@size?$AA@			; `string'
PUBLIC	??_C@_0L@GFMJGGB@overlapped?$AA@		; `string'
PUBLIC	??_C@_06NCGDPKCC@handle?$AA@			; `string'
PUBLIC	??_C@_0BN@FALEEJEK@OVERLAPPED?5structure?5wrapper?$AA@ ; `string'
PUBLIC	??_C@_0BD@GGIAODBE@_winapi?4Overlapped?$AA@	; `string'
PUBLIC	??_C@_0BI@DAJGAKJH@overlapped?5event?5handle?$AA@ ; `string'
PUBLIC	??_C@_05GFHEIIDD@event?$AA@			; `string'
PUBLIC	??_C@_06JDKABGKH@cancel?$AA@			; `string'
PUBLIC	??_C@_09NEMCKDC@getbuffer?$AA@			; `string'
PUBLIC	??_C@_0BE@LHCFOKBA@GetOverlappedResult?$AA@	; `string'
PUBLIC	OverlappedType
;	COMDAT ??_C@_07FFLJJADP@_winapi?$AA@
CONST	SEGMENT
??_C@_07FFLJJADP@_winapi?$AA@ DB '_winapi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NOIIIIGM@WriteFile?$AA@
CONST	SEGMENT
??_C@_09NOIIIIGM@WriteFile?$AA@ DB 'WriteFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CLKLPNNG@WaitForSingleObject?$AA@
CONST	SEGMENT
??_C@_0BE@CLKLPNNG@WaitForSingleObject?$AA@ DB 'WaitForSingleObject', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@
CONST	SEGMENT
??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@ DB 'WaitForMultipleObjects'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LMMPCKDG@WaitNamedPipe?$AA@
CONST	SEGMENT
??_C@_0O@LMMPCKDG@WaitNamedPipe?$AA@ DB 'WaitNamedPipe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LOFPKPFA@TerminateProcess?$AA@
CONST	SEGMENT
??_C@_0BB@LOFPKPFA@TerminateProcess?$AA@ DB 'TerminateProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DIHOHPCP@SetNamedPipeHandleState?$AA@
CONST	SEGMENT
??_C@_0BI@DIHOHPCP@SetNamedPipeHandleState?$AA@ DB 'SetNamedPipeHandleSta'
	DB	'te', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLCHJOKF@ReadFile?$AA@
CONST	SEGMENT
??_C@_08KLCHJOKF@ReadFile?$AA@ DB 'ReadFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBLPJHOM@PeekNamedPipe?$AA@
CONST	SEGMENT
??_C@_0O@CBLPJHOM@PeekNamedPipe?$AA@ DB 'PeekNamedPipe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MMCMKPDL@OpenProcess?$AA@
CONST	SEGMENT
??_C@_0M@MMCMKPDL@OpenProcess?$AA@ DB 'OpenProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LNAOMCPJ@GetVersion?$AA@
CONST	SEGMENT
??_C@_0L@LNAOMCPJ@GetVersion?$AA@ DB 'GetVersion', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BKPPPGAL@GetStdHandle?$AA@
CONST	SEGMENT
??_C@_0N@BKPPPGAL@GetStdHandle?$AA@ DB 'GetStdHandle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PGJLHJFJ@GetModuleFileName?$AA@
CONST	SEGMENT
??_C@_0BC@PGJLHJFJ@GetModuleFileName?$AA@ DB 'GetModuleFileName', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HICKNDGL@GetLastError?$AA@
CONST	SEGMENT
??_C@_0N@HICKNDGL@GetLastError?$AA@ DB 'GetLastError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OOONFEIA@GetExitCodeProcess?$AA@
CONST	SEGMENT
??_C@_0BD@OOONFEIA@GetExitCodeProcess?$AA@ DB 'GetExitCodeProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PMJGPBJJ@GetCurrentProcess?$AA@
CONST	SEGMENT
??_C@_0BC@PMJGPBJJ@GetCurrentProcess?$AA@ DB 'GetCurrentProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LPAKIOHO@ExitProcess?$AA@
CONST	SEGMENT
??_C@_0M@LPAKIOHO@ExitProcess?$AA@ DB 'ExitProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKBHKMMH@DuplicateHandle?$AA@
CONST	SEGMENT
??_C@_0BA@KKBHKMMH@DuplicateHandle?$AA@ DB 'DuplicateHandle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FGHFFHOP@CreateProcess?$AA@
CONST	SEGMENT
??_C@_0O@FGHFFHOP@CreateProcess?$AA@ DB 'CreateProcess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FBIDOKLH@CreatePipe?$AA@
CONST	SEGMENT
??_C@_0L@FBIDOKLH@CreatePipe?$AA@ DB 'CreatePipe', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JPNEEGJB@CreateNamedPipe?$AA@
CONST	SEGMENT
??_C@_0BA@JPNEEGJB@CreateNamedPipe?$AA@ DB 'CreateNamedPipe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KLBPNCIB@CreateFile?$AA@
CONST	SEGMENT
??_C@_0L@KLBPNCIB@CreateFile?$AA@ DB 'CreateFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JNKPBCBE@ConnectNamedPipe?$AA@
CONST	SEGMENT
??_C@_0BB@JNKPBCBE@ConnectNamedPipe?$AA@ DB 'ConnectNamedPipe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JHJNLFGC@CloseHandle?$AA@
CONST	SEGMENT
??_C@_0M@JHJNLFGC@CloseHandle?$AA@ DB 'CloseHandle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer?$AA@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer?$AA@ DB 'buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAGNFIBA@size?$AA@
CONST	SEGMENT
??_C@_04IAGNFIBA@size?$AA@ DB 'size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GFMJGGB@overlapped?$AA@
CONST	SEGMENT
??_C@_0L@GFMJGGB@overlapped?$AA@ DB 'overlapped', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NCGDPKCC@handle?$AA@
CONST	SEGMENT
??_C@_06NCGDPKCC@handle?$AA@ DB 'handle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FALEEJEK@OVERLAPPED?5structure?5wrapper?$AA@
CONST	SEGMENT
??_C@_0BN@FALEEJEK@OVERLAPPED?5structure?5wrapper?$AA@ DB 'OVERLAPPED str'
	DB	'ucture wrapper', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GGIAODBE@_winapi?4Overlapped?$AA@
CONST	SEGMENT
??_C@_0BD@GGIAODBE@_winapi?4Overlapped?$AA@ DB '_winapi.Overlapped', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DAJGAKJH@overlapped?5event?5handle?$AA@
CONST	SEGMENT
??_C@_0BI@DAJGAKJH@overlapped?5event?5handle?$AA@ DB 'overlapped event ha'
	DB	'ndle', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFHEIIDD@event?$AA@
CONST	SEGMENT
??_C@_05GFHEIIDD@event?$AA@ DB 'event', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDKABGKH@cancel?$AA@
CONST	SEGMENT
??_C@_06JDKABGKH@cancel?$AA@ DB 'cancel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NEMCKDC@getbuffer?$AA@
CONST	SEGMENT
??_C@_09NEMCKDC@getbuffer?$AA@ DB 'getbuffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LHCFOKBA@GetOverlappedResult?$AA@
CONST	SEGMENT
??_C@_0BE@LHCFOKBA@GetOverlappedResult?$AA@ DB 'GetOverlappedResult', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
has_CancelIoEx DD 0ffffffffH
	ORG $+12
overlapped_methods DQ FLAT:??_C@_0BE@LHCFOKBA@GetOverlappedResult?$AA@
	DQ	FLAT:overlapped_GetOverlappedResult
	DD	08H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_09NEMCKDC@getbuffer?$AA@
	DQ	FLAT:overlapped_getbuffer
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_06JDKABGKH@cancel?$AA@
	DQ	FLAT:overlapped_cancel
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+24
overlapped_members DQ FLAT:??_C@_05GFHEIIDD@event?$AA@
	DD	012H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BI@DAJGAKJH@overlapped?5event?5handle?$AA@
	DQ	0000000000000000H
	ORG $+32
OverlappedType DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@GGIAODBE@_winapi?4Overlapped?$AA@
	DQ	00000000000000f0H
	DQ	0000000000000000H
	DQ	FLAT:overlapped_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:??_C@_0BN@FALEEJEK@OVERLAPPED?5structure?5wrapper?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:overlapped_methods
	DQ	FLAT:overlapped_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
CloseHandle_doc DB 'CloseHandle(handle) -> None', 0aH, 0aH, 'Close handle'
	DB	'.', 00H
	ORG $+5
?kwlist@?1??winapi_ConnectNamedPipe@@9@9 DQ FLAT:??_C@_06NCGDPKCC@handle?$AA@ ; `winapi_ConnectNamedPipe'::`2'::kwlist
	DQ	FLAT:??_C@_0L@GFMJGGB@overlapped?$AA@
	DQ	0000000000000000H
	ORG $+8
CreatePipe_doc DB 'CreatePipe(pipe_attrs, size) -> (read_handle, write_ha'
	DB	'ndle)', 0aH, 0aH, 'Create an anonymous pipe, and return handl'
	DB	'es to the read and', 0aH, 'write ends of the pipe.', 0aH, 0aH
	DB	'pipe_attrs is ignored internally and can be None.', 00H
	ORG $+11
CreateProcess_doc DB 'CreateProcess(app_name, cmd_line, proc_attrs, threa'
	DB	'd_attrs,', 0aH, '               inherit, flags, env_mapping, '
	DB	'curdir,', 0aH, '               startup_info) -> (proc_handle,'
	DB	' thread_handle,', 0aH, '                                 pid,'
	DB	' tid)', 0aH, 0aH, 'Create a new process and its primary threa'
	DB	'd. The return', 0aH, 'value is a tuple of the process handle,'
	DB	' thread handle,', 0aH, 'process ID, and thread ID.', 0aH, 0aH
	DB	'proc_attrs and thread_attrs are ignored internally and can be'
	DB	' None.', 00H
	ORG $+8
DuplicateHandle_doc DB 'DuplicateHandle(source_proc_handle, source_handle'
	DB	',', 0aH, '                 target_proc_handle, target_handle,'
	DB	' access,', 0aH, '                 inherit[, options]) -> hand'
	DB	'le', 0aH, 0aH, 'Return a duplicate handle object.', 0aH, 0aH, 'T'
	DB	'he duplicate handle refers to the same object as the original'
	DB	0aH, 'handle. Therefore, any changes to the object are reflect'
	DB	'ed', 0aH, 'through both handles.', 00H
	ORG $+14
GetCurrentProcess_doc DB 'GetCurrentProcess() -> handle', 0aH, 0aH, 'Retu'
	DB	'rn a handle object for the current process.', 00H
	ORG $+1
GetExitCodeProcess_doc DB 'GetExitCodeProcess(handle) -> Exit code', 0aH, 0aH
	DB	'Return the termination status of the specified process.', 00H
	ORG $+15
GetModuleFileName_doc DB 'GetModuleFileName(module) -> path', 0aH, 0aH, 'R'
	DB	'eturn the fully-qualified path for the file that contains', 0aH
	DB	'the specified module. The module must have been loaded by the'
	DB	0aH, 'current process.', 0aH, 0aH, 'The module parameter shoul'
	DB	'd be a handle to the loaded module', 0aH, 'whose path is bein'
	DB	'g requested. If this parameter is 0, ', 0aH, 'GetModuleFileNa'
	DB	'me retrieves the path of the executable file', 0aH, 'of the c'
	DB	'urrent process.', 00H
	ORG $+9
GetStdHandle_doc DB 'GetStdHandle(handle) -> integer', 0aH, 0aH, 'Return '
	DB	'a handle to the specified standard device', 0aH, '(STD_INPUT_'
	DB	'HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE).', 0aH, 'The int'
	DB	'eger associated with the handle object is returned.', 00H
	ORG $+10
GetVersion_doc DB 'GetVersion() -> version', 0aH, 0aH, 'Return the versio'
	DB	'n number of the current operating system.', 00H
	ORG $+4
?kwlist@?1??winapi_ReadFile@@9@9 DQ FLAT:??_C@_06NCGDPKCC@handle?$AA@ ; `winapi_ReadFile'::`2'::kwlist
	DQ	FLAT:??_C@_04IAGNFIBA@size?$AA@
	DQ	FLAT:??_C@_0L@GFMJGGB@overlapped?$AA@
	DQ	0000000000000000H
	ORG $+8
TerminateProcess_doc DB 'TerminateProcess(handle, exit_code) -> None', 0aH
	DB	0aH, 'Terminate the specified process and all of its threads.', 00H
	ORG $+11
WaitForSingleObject_doc DB 'WaitForSingleObject(handle, timeout) -> resul'
	DB	't', 0aH, 0aH, 'Wait until the specified object is in the sign'
	DB	'aled state or', 0aH, 'the time-out interval elapses. The time'
	DB	'out value is specified', 0aH, 'in milliseconds.', 00H
	ORG $+5
?kwlist@?1??winapi_WriteFile@@9@9 DQ FLAT:??_C@_06NCGDPKCC@handle?$AA@ ; `winapi_WriteFile'::`2'::kwlist
	DQ	FLAT:??_C@_06HOHPNJLC@buffer?$AA@
	DQ	FLAT:??_C@_0L@GFMJGGB@overlapped?$AA@
	DQ	0000000000000000H
winapi_functions DQ FLAT:??_C@_0M@JHJNLFGC@CloseHandle?$AA@
	DQ	FLAT:winapi_CloseHandle
	DD	01H
	ORG $+4
	DQ	FLAT:CloseHandle_doc
	DQ	FLAT:??_C@_0BB@JNKPBCBE@ConnectNamedPipe?$AA@
	DQ	FLAT:winapi_ConnectNamedPipe
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0L@KLBPNCIB@CreateFile?$AA@
	DQ	FLAT:winapi_CreateFile
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BA@JPNEEGJB@CreateNamedPipe?$AA@
	DQ	FLAT:winapi_CreateNamedPipe
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0L@FBIDOKLH@CreatePipe?$AA@
	DQ	FLAT:winapi_CreatePipe
	DD	01H
	ORG $+4
	DQ	FLAT:CreatePipe_doc
	DQ	FLAT:??_C@_0O@FGHFFHOP@CreateProcess?$AA@
	DQ	FLAT:winapi_CreateProcess
	DD	01H
	ORG $+4
	DQ	FLAT:CreateProcess_doc
	DQ	FLAT:??_C@_0BA@KKBHKMMH@DuplicateHandle?$AA@
	DQ	FLAT:winapi_DuplicateHandle
	DD	01H
	ORG $+4
	DQ	FLAT:DuplicateHandle_doc
	DQ	FLAT:??_C@_0M@LPAKIOHO@ExitProcess?$AA@
	DQ	FLAT:winapi_ExitProcess
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BC@PMJGPBJJ@GetCurrentProcess?$AA@
	DQ	FLAT:winapi_GetCurrentProcess
	DD	01H
	ORG $+4
	DQ	FLAT:GetCurrentProcess_doc
	DQ	FLAT:??_C@_0BD@OOONFEIA@GetExitCodeProcess?$AA@
	DQ	FLAT:winapi_GetExitCodeProcess
	DD	01H
	ORG $+4
	DQ	FLAT:GetExitCodeProcess_doc
	DQ	FLAT:??_C@_0N@HICKNDGL@GetLastError?$AA@
	DQ	FLAT:winapi_GetLastError
	DD	04H
	ORG $+4
	DQ	FLAT:GetCurrentProcess_doc
	DQ	FLAT:??_C@_0BC@PGJLHJFJ@GetModuleFileName?$AA@
	DQ	FLAT:winapi_GetModuleFileName
	DD	01H
	ORG $+4
	DQ	FLAT:GetModuleFileName_doc
	DQ	FLAT:??_C@_0N@BKPPPGAL@GetStdHandle?$AA@
	DQ	FLAT:winapi_GetStdHandle
	DD	01H
	ORG $+4
	DQ	FLAT:GetStdHandle_doc
	DQ	FLAT:??_C@_0L@LNAOMCPJ@GetVersion?$AA@
	DQ	FLAT:winapi_GetVersion
	DD	01H
	ORG $+4
	DQ	FLAT:GetVersion_doc
	DQ	FLAT:??_C@_0M@MMCMKPDL@OpenProcess?$AA@
	DQ	FLAT:winapi_OpenProcess
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0O@CBLPJHOM@PeekNamedPipe?$AA@
	DQ	FLAT:winapi_PeekNamedPipe
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_08KLCHJOKF@ReadFile?$AA@
	DQ	FLAT:winapi_ReadFile
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BI@DIHOHPCP@SetNamedPipeHandleState?$AA@
	DQ	FLAT:winapi_SetNamedPipeHandleState
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BB@LOFPKPFA@TerminateProcess?$AA@
	DQ	FLAT:winapi_TerminateProcess
	DD	01H
	ORG $+4
	DQ	FLAT:TerminateProcess_doc
	DQ	FLAT:??_C@_0O@LMMPCKDG@WaitNamedPipe?$AA@
	DQ	FLAT:winapi_WaitNamedPipe
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@
	DQ	FLAT:winapi_WaitForMultipleObjects
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	FLAT:??_C@_0BE@CLKLPNNG@WaitForSingleObject?$AA@
	DQ	FLAT:winapi_WaitForSingleObject
	DD	01H
	ORG $+4
	DQ	FLAT:WaitForSingleObject_doc
	DQ	FLAT:??_C@_09NOIIIIGM@WriteFile?$AA@
	DQ	FLAT:winapi_WriteFile
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
winapi_module DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07FFLJJADP@_winapi?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:winapi_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0BD@KHFACHNK@overlapped_dealloc?$AA@	; `string'
PUBLIC	??_C@_0BF@DPLCPCCK@?4?4?2Modules?2_winapi?4c?$AA@ ; `string'
PUBLIC	??_C@_0FJ@COFIDFEA@I?1O?5operations?5still?5in?5flight?5w@ ; `string'
EXTRN	_PyObject_DebugFree:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	PyBuffer_Release:PROC
EXTRN	__imp_SetLastError:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	__imp_GetOverlappedResult:PROC
EXTRN	__imp_GetLastError:PROC
_BSS	SEGMENT
Py_CancelIoEx DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\_winapi.c
pdata	SEGMENT
$pdata$overlapped_dealloc DD imagerel overlapped_dealloc
	DD	imagerel overlapped_dealloc+330
	DD	imagerel $unwind$overlapped_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$overlapped_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BD@KHFACHNK@overlapped_dealloc?$AA@
CONST	SEGMENT
??_C@_0BD@KHFACHNK@overlapped_dealloc?$AA@ DB 'overlapped_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DPLCPCCK@?4?4?2Modules?2_winapi?4c?$AA@
CONST	SEGMENT
??_C@_0BF@DPLCPCCK@?4?4?2Modules?2_winapi?4c?$AA@ DB '..\Modules\_winapi.'
	DB	'c', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@COFIDFEA@I?1O?5operations?5still?5in?5flight?5w@
CONST	SEGMENT
??_C@_0FJ@COFIDFEA@I?1O?5operations?5still?5in?5flight?5w@ DB 'I/O operat'
	DB	'ions still in flight while destroying Overlapped object, the '
	DB	'process may crash', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT overlapped_dealloc
_TEXT	SEGMENT
bytes$ = 48
err$ = 52
_py_tmp$121022 = 56
self$ = 80
overlapped_dealloc PROC					; COMDAT

; 105  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 106  :     DWORD bytes;
; 107  :     int err = GetLastError();

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0000f	89 44 24 34	 mov	 DWORD PTR err$[rsp], eax

; 108  :     if (self->pending) {

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00018	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  0001f	74 6e		 je	 SHORT $LN7@overlapped

; 109  :         /* make it a programming error to deallocate while operation
; 110  :            is pending, even if we can safely cancel it */
; 111  :         if (check_CancelIoEx() &&
; 112  :                 Py_CancelIoEx(self->handle, &self->overlapped))

  00021	e8 00 00 00 00	 call	 check_CancelIoEx
  00026	85 c0		 test	 eax, eax
  00028	74 4b		 je	 SHORT $LN6@overlapped
  0002a	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0002f	48 83 c0 60	 add	 rax, 96			; 00000060H
  00033	48 8b d0	 mov	 rdx, rax
  00036	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0003b	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR Py_CancelIoEx
  00048	85 c0		 test	 eax, eax
  0004a	74 29		 je	 SHORT $LN6@overlapped

; 113  :             GetOverlappedResult(self->handle, &self->overlapped, &bytes, TRUE);

  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00051	48 83 c0 60	 add	 rax, 96			; 00000060H
  00055	41 b9 01 00 00
	00		 mov	 r9d, 1
  0005b	4c 8d 44 24 30	 lea	 r8, QWORD PTR bytes$[rsp]
  00060	48 8b d0	 mov	 rdx, rax
  00063	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00068	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetOverlappedResult
$LN6@overlapped:

; 114  :         PyErr_SetString(PyExc_RuntimeError,
; 115  :                         "I/O operations still in flight while destroying "
; 116  :                         "Overlapped object, the process may crash");

  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FJ@COFIDFEA@I?1O?5operations?5still?5in?5flight?5w@
  0007c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00083	e8 00 00 00 00	 call	 PyErr_SetString

; 117  :         PyErr_WriteUnraisable(NULL);

  00088	33 c9		 xor	 ecx, ecx
  0008a	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN7@overlapped:

; 118  :     }
; 119  :     CloseHandle(self->overlapped.hEvent);

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00094	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 120  :     SetLastError(err);

  0009e	8b 4c 24 34	 mov	 ecx, DWORD PTR err$[rsp]
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetLastError

; 121  :     if (self->write_buffer.obj)

  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000ad	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  000b5	74 13		 je	 SHORT $LN5@overlapped

; 122  :         PyBuffer_Release(&self->write_buffer);

  000b7	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000bc	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  000c2	48 8b c8	 mov	 rcx, rax
  000c5	e8 00 00 00 00	 call	 PyBuffer_Release
$LN5@overlapped:
$LN4@overlapped:

; 123  :     Py_CLEAR(self->read_buffer);

  000ca	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000cf	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  000d7	74 5c		 je	 SHORT $LN1@overlapped
  000d9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e1	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000e6	4c 8b 88 90 00
	00 00		 mov	 r9, QWORD PTR [rax+144]
  000ed	41 b8 7b 00 00
	00		 mov	 r8d, 123		; 0000007bH
  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@DPLCPCCK@?4?4?2Modules?2_winapi?4c?$AA@
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@KHFACHNK@overlapped_dealloc?$AA@
  00101	e8 00 00 00 00	 call	 _PyParallel_Guard
  00106	85 c0		 test	 eax, eax
  00108	75 2b		 jne	 SHORT $LN1@overlapped
  0010a	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0010f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00116	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$121022[rsp], rax
  0011b	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00120	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0
  0012b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$121022[rsp]
  00130	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@overlapped:
  00135	33 c0		 xor	 eax, eax
  00137	85 c0		 test	 eax, eax
  00139	75 8f		 jne	 SHORT $LN4@overlapped

; 124  :     PyObject_Del(self);

  0013b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00140	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 125  : }

  00145	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00149	c3		 ret	 0
overlapped_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@COJLGOAG@CancelIoEx?$AA@		; `string'
PUBLIC	??_C@_08CPNIBGIE@KERNEL32?$AA@			; `string'
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_GetModuleHandleA:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_winapi.c
pdata	SEGMENT
$pdata$check_CancelIoEx DD imagerel check_CancelIoEx
	DD	imagerel check_CancelIoEx+105
	DD	imagerel $unwind$check_CancelIoEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_CancelIoEx DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@COJLGOAG@CancelIoEx?$AA@
CONST	SEGMENT
??_C@_0L@COJLGOAG@CancelIoEx?$AA@ DB 'CancelIoEx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPNIBGIE@KERNEL32?$AA@
CONST	SEGMENT
??_C@_08CPNIBGIE@KERNEL32?$AA@ DB 'KERNEL32', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT check_CancelIoEx
_TEXT	SEGMENT
hKernel32$120991 = 32
tv71 = 40
check_CancelIoEx PROC					; COMDAT

; 71   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 72   :     if (has_CancelIoEx == -1)

  00004	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR has_CancelIoEx, -1
  0000b	75 51		 jne	 SHORT $LN1@check_Canc

; 73   :     {
; 74   :         HINSTANCE hKernel32 = GetModuleHandle("KERNEL32");

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CPNIBGIE@KERNEL32?$AA@
  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleA
  0001a	48 89 44 24 20	 mov	 QWORD PTR hKernel32$120991[rsp], rax

; 75   :         * (FARPROC *) &Py_CancelIoEx = GetProcAddress(hKernel32,
; 76   :                                                       "CancelIoEx");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@COJLGOAG@CancelIoEx?$AA@
  00026	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hKernel32$120991[rsp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00031	48 89 05 00 00
	00 00		 mov	 QWORD PTR Py_CancelIoEx, rax

; 77   :         has_CancelIoEx = (Py_CancelIoEx != NULL);

  00038	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR Py_CancelIoEx, 0
  00040	74 0a		 je	 SHORT $LN4@check_Canc
  00042	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0004a	eb 08		 jmp	 SHORT $LN5@check_Canc
$LN4@check_Canc:
  0004c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN5@check_Canc:
  00054	8b 44 24 28	 mov	 eax, DWORD PTR tv71[rsp]
  00058	89 05 00 00 00
	00		 mov	 DWORD PTR has_CancelIoEx, eax
$LN1@check_Canc:

; 78   :     }
; 79   :     return has_CancelIoEx;

  0005e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR has_CancelIoEx

; 80   : }

  00064	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00068	c3		 ret	 0
check_CancelIoEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_02FOEOGEOO@II?$AA@			; `string'
PUBLIC	??_C@_1EC@GMENCEIP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa?$AAd?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1EM@IGCAEBII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa?$AAd?$AA_?$AAb?$AAu@ ; `string'
PUBLIC	??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	_PyBytes_Resize:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyBytes_Type:BYTE
EXTRN	PyErr_SetExcFromWindowsErr:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	PyEval_RestoreThread:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	PyObject_IsTrue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$overlapped_GetOverlappedResult DD imagerel overlapped_GetOverlappedResult
	DD	imagerel overlapped_GetOverlappedResult+519
	DD	imagerel $unwind$overlapped_GetOverlappedResult
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$overlapped_GetOverlappedResult DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_02FOEOGEOO@II?$AA@
CONST	SEGMENT
??_C@_02FOEOGEOO@II?$AA@ DB 'II', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@GMENCEIP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa?$AAd?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ@
CONST	SEGMENT
??_C@_1EC@GMENCEIP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa?$AAd?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '_', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@IGCAEBII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa?$AAd?$AA_?$AAb?$AAu@
CONST	SEGMENT
??_C@_1EM@IGCAEBII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa?$AAd?$AA_?$AAb?$AAu@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'E'
	DB	00H, 'x', 00H, 'a', 00H, 'c', 00H, 't', 00H, '(', 00H, 's', 00H
	DB	'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, '_', 00H, 'w', 00H, 'i'
	DB	00H, 'n', 00H, 'a', 00H, 'p', 00H, 'i', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT overlapped_GetOverlappedResult
_TEXT	SEGMENT
res$ = 32
transferred$ = 36
wait$ = 40
err$ = 44
_save$121038 = 48
tv70 = 56
tv80 = 60
tv81 = 64
self$ = 96
waitobj$ = 104
overlapped_GetOverlappedResult PROC			; COMDAT

; 129  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 130  :     int wait;
; 131  :     BOOL res;
; 132  :     DWORD transferred = 0;

  0000e	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR transferred$[rsp], 0

; 133  :     DWORD err;
; 134  : 
; 135  :     wait = PyObject_IsTrue(waitobj);

  00016	48 8b 4c 24 68	 mov	 rcx, QWORD PTR waitobj$[rsp]
  0001b	e8 00 00 00 00	 call	 PyObject_IsTrue
  00020	89 44 24 28	 mov	 DWORD PTR wait$[rsp], eax

; 136  :     if (wait < 0)

  00024	83 7c 24 28 00	 cmp	 DWORD PTR wait$[rsp], 0
  00029	7d 07		 jge	 SHORT $LN8@overlapped@2

; 137  :         return NULL;

  0002b	33 c0		 xor	 eax, eax
  0002d	e9 d0 01 00 00	 jmp	 $LN9@overlapped@2
$LN8@overlapped@2:

; 138  :     Py_BEGIN_ALLOW_THREADS

  00032	e8 00 00 00 00	 call	 PyEval_SaveThread
  00037	48 89 44 24 30	 mov	 QWORD PTR _save$121038[rsp], rax

; 139  :     res = GetOverlappedResult(self->handle, &self->overlapped, &transferred,
; 140  :                               wait != 0);

  0003c	83 7c 24 28 00	 cmp	 DWORD PTR wait$[rsp], 0
  00041	74 0a		 je	 SHORT $LN11@overlapped@2
  00043	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  0004b	eb 08		 jmp	 SHORT $LN12@overlapped@2
$LN11@overlapped@2:
  0004d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN12@overlapped@2:
  00055	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0005a	48 83 c0 60	 add	 rax, 96			; 00000060H
  0005e	44 8b 4c 24 38	 mov	 r9d, DWORD PTR tv70[rsp]
  00063	4c 8d 44 24 24	 lea	 r8, QWORD PTR transferred$[rsp]
  00068	48 8b d0	 mov	 rdx, rax
  0006b	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00070	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetOverlappedResult
  0007d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 141  :     Py_END_ALLOW_THREADS

  00081	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _save$121038[rsp]
  00086	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 142  : 
; 143  :     err = res ? ERROR_SUCCESS : GetLastError();

  0008b	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00090	74 0a		 je	 SHORT $LN13@overlapped@2
  00092	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
  0009a	eb 0a		 jmp	 SHORT $LN14@overlapped@2
$LN13@overlapped@2:
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000a2	89 44 24 3c	 mov	 DWORD PTR tv80[rsp], eax
$LN14@overlapped@2:
  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR tv80[rsp]
  000aa	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax

; 144  :     switch (err) {

  000ae	8b 44 24 2c	 mov	 eax, DWORD PTR err$[rsp]
  000b2	89 44 24 40	 mov	 DWORD PTR tv81[rsp], eax
  000b6	83 7c 24 40 00	 cmp	 DWORD PTR tv81[rsp], 0
  000bb	74 20		 je	 SHORT $LN5@overlapped@2
  000bd	81 7c 24 40 ea
	00 00 00	 cmp	 DWORD PTR tv81[rsp], 234 ; 000000eaH
  000c5	74 16		 je	 SHORT $LN5@overlapped@2
  000c7	81 7c 24 40 e3
	03 00 00	 cmp	 DWORD PTR tv81[rsp], 995 ; 000003e3H
  000cf	74 0c		 je	 SHORT $LN5@overlapped@2
  000d1	81 7c 24 40 e4
	03 00 00	 cmp	 DWORD PTR tv81[rsp], 996 ; 000003e4H
  000d9	74 22		 je	 SHORT $LN4@overlapped@2
  000db	eb 22		 jmp	 SHORT $LN3@overlapped@2
$LN5@overlapped@2:

; 145  :         case ERROR_SUCCESS:
; 146  :         case ERROR_MORE_DATA:
; 147  :         case ERROR_OPERATION_ABORTED:
; 148  :             self->completed = 1;

  000dd	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000e2	c7 80 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+140], 1

; 149  :             self->pending = 0;

  000ec	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000f1	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+136], 0

; 150  :             break;

  000fb	eb 26		 jmp	 SHORT $LN6@overlapped@2
$LN4@overlapped@2:

; 151  :         case ERROR_IO_INCOMPLETE:
; 152  :             break;

  000fd	eb 24		 jmp	 SHORT $LN6@overlapped@2
$LN3@overlapped@2:

; 153  :         default:
; 154  :             self->pending = 0;

  000ff	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00104	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+136], 0

; 155  :             return PyErr_SetExcFromWindowsErr(PyExc_IOError, err);

  0010e	8b 54 24 2c	 mov	 edx, DWORD PTR err$[rsp]
  00112	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00119	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  0011e	e9 df 00 00 00	 jmp	 $LN9@overlapped@2
$LN6@overlapped@2:

; 156  :     }
; 157  :     if (self->completed && self->read_buffer != NULL) {

  00123	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00128	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [rax+140], 0
  0012f	0f 84 b8 00 00
	00		 je	 $LN2@overlapped@2
  00135	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0013a	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00142	0f 84 a5 00 00
	00		 je	 $LN2@overlapped@2

; 158  :         assert(PyBytes_CheckExact(self->read_buffer));

  00148	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0014d	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytes_Type
  0015b	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  0015f	74 1c		 je	 SHORT $LN15@overlapped@2
  00161	41 b8 9e 00 00
	00		 mov	 r8d, 158		; 0000009eH
  00167	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@IGCAEBII@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa?$AAd?$AA_?$AAb?$AAu@
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0017b	33 c0		 xor	 eax, eax
$LN15@overlapped@2:

; 159  :         if (transferred != PyBytes_GET_SIZE(self->read_buffer) &&
; 160  :             _PyBytes_Resize(&self->read_buffer, transferred))

  0017d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00182	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00189	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0018d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00193	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00198	85 c0		 test	 eax, eax
  0019a	75 1c		 jne	 SHORT $LN16@overlapped@2
  0019c	41 b8 9f 00 00
	00		 mov	 r8d, 159		; 0000009fH
  001a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  001a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@GMENCEIP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa?$AAd?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ@
  001b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b6	33 c0		 xor	 eax, eax
$LN16@overlapped@2:
  001b8	8b 44 24 24	 mov	 eax, DWORD PTR transferred$[rsp]
  001bc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  001c1	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  001c8	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  001cc	74 1f		 je	 SHORT $LN1@overlapped@2
  001ce	8b 44 24 24	 mov	 eax, DWORD PTR transferred$[rsp]
  001d2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  001d7	48 81 c1 90 00
	00 00		 add	 rcx, 144		; 00000090H
  001de	8b d0		 mov	 edx, eax
  001e0	e8 00 00 00 00	 call	 _PyBytes_Resize
  001e5	85 c0		 test	 eax, eax
  001e7	74 04		 je	 SHORT $LN1@overlapped@2

; 161  :             return NULL;

  001e9	33 c0		 xor	 eax, eax
  001eb	eb 15		 jmp	 SHORT $LN9@overlapped@2
$LN1@overlapped@2:
$LN2@overlapped@2:

; 162  :     }
; 163  :     return Py_BuildValue("II", (unsigned) transferred, (unsigned) err);

  001ed	44 8b 44 24 2c	 mov	 r8d, DWORD PTR err$[rsp]
  001f2	8b 54 24 24	 mov	 edx, DWORD PTR transferred$[rsp]
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FOEOGEOO@II?$AA@
  001fd	e8 00 00 00 00	 call	 Py_BuildValue
$LN9@overlapped@2:

; 164  : }

  00202	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00206	c3		 ret	 0
overlapped_GetOverlappedResult ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0FD@CHCKJHFP@can?8t?5get?5read?5buffer?5before?5Get@ ; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$overlapped_getbuffer DD imagerel overlapped_getbuffer
	DD	imagerel overlapped_getbuffer+122
	DD	imagerel $unwind$overlapped_getbuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$overlapped_getbuffer DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0FD@CHCKJHFP@can?8t?5get?5read?5buffer?5before?5Get@
CONST	SEGMENT
??_C@_0FD@CHCKJHFP@can?8t?5get?5read?5buffer?5before?5Get@ DB 'can''t get'
	DB	' read buffer before GetOverlappedResult() signals the operati'
	DB	'on completed', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT overlapped_getbuffer
_TEXT	SEGMENT
res$ = 32
tv71 = 40
self$ = 64
overlapped_getbuffer PROC				; COMDAT

; 168  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 169  :     PyObject *res;
; 170  :     if (!self->completed) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [rax+140], 0
  00015	75 17		 jne	 SHORT $LN1@overlapped@3

; 171  :         PyErr_SetString(PyExc_ValueError,
; 172  :                         "can't get read buffer before GetOverlappedResult() "
; 173  :                         "signals the operation completed");

  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FD@CHCKJHFP@can?8t?5get?5read?5buffer?5before?5Get@
  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00025	e8 00 00 00 00	 call	 PyErr_SetString

; 174  :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 47		 jmp	 SHORT $LN2@overlapped@3
$LN1@overlapped@3:

; 175  :     }
; 176  :     res = self->read_buffer ? self->read_buffer : Py_None;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00033	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  0003b	74 13		 je	 SHORT $LN4@overlapped@3
  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00042	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00049	48 89 44 24 28	 mov	 QWORD PTR tv71[rsp], rax
  0004e	eb 0c		 jmp	 SHORT $LN5@overlapped@3
$LN4@overlapped@3:
  00050	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00057	48 89 44 24 28	 mov	 QWORD PTR tv71[rsp], rax
$LN5@overlapped@3:
  0005c	48 8b 44 24 28	 mov	 rax, QWORD PTR tv71[rsp]
  00061	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 177  :     Py_INCREF(res);

  00066	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0006b	e8 00 00 00 00	 call	 _Py_IncRef

; 178  :     return res;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN2@overlapped@3:

; 179  : }

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
overlapped_getbuffer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	__imp_CancelIo:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_winapi.c
pdata	SEGMENT
$pdata$overlapped_cancel DD imagerel overlapped_cancel
	DD	imagerel overlapped_cancel+193
	DD	imagerel $unwind$overlapped_cancel
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$overlapped_cancel DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT overlapped_cancel
_TEXT	SEGMENT
res$ = 32
_save$121076 = 40
self$ = 64
overlapped_cancel PROC					; COMDAT

; 183  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 184  :     BOOL res = TRUE;

  00009	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR res$[rsp], 1

; 185  : 
; 186  :     if (self->pending) {

  00011	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00016	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  0001d	74 57		 je	 SHORT $LN4@overlapped@4

; 187  :         Py_BEGIN_ALLOW_THREADS

  0001f	e8 00 00 00 00	 call	 PyEval_SaveThread
  00024	48 89 44 24 28	 mov	 QWORD PTR _save$121076[rsp], rax

; 188  :         if (check_CancelIoEx())

  00029	e8 00 00 00 00	 call	 check_CancelIoEx
  0002e	85 c0		 test	 eax, eax
  00030	74 24		 je	 SHORT $LN3@overlapped@4

; 189  :             res = Py_CancelIoEx(self->handle, &self->overlapped);

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00037	48 83 c0 60	 add	 rax, 96			; 00000060H
  0003b	48 8b d0	 mov	 rdx, rax
  0003e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00043	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR Py_CancelIoEx
  00050	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 190  :         else

  00054	eb 16		 jmp	 SHORT $LN2@overlapped@4
$LN3@overlapped@4:

; 191  :             res = CancelIo(self->handle);

  00056	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0005b	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CancelIo
  00068	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN2@overlapped@4:

; 192  :         Py_END_ALLOW_THREADS

  0006c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _save$121076[rsp]
  00071	e8 00 00 00 00	 call	 PyEval_RestoreThread
$LN4@overlapped@4:

; 193  :     }
; 194  : 
; 195  :     /* CancelIoEx returns ERROR_NOT_FOUND if the I/O completed in-between */
; 196  :     if (!res && GetLastError() != ERROR_NOT_FOUND)

  00076	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0007b	75 1d		 jne	 SHORT $LN1@overlapped@4
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00083	3d 90 04 00 00	 cmp	 eax, 1168		; 00000490H
  00088	74 10		 je	 SHORT $LN1@overlapped@4

; 197  :         return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  0008a	33 d2		 xor	 edx, edx
  0008c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00093	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  00098	eb 22		 jmp	 SHORT $LN5@overlapped@4
$LN1@overlapped@4:

; 198  :     self->pending = 0;

  0009a	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0009f	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+136], 0

; 199  :     Py_RETURN_NONE;

  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000b0	e8 00 00 00 00	 call	 _Py_IncRef
  000b5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN5@overlapped@4:

; 200  : }

  000bc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c0	c3		 ret	 0
overlapped_cancel ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@OFEENNP@K?3CloseHandle?$AA@		; `string'
EXTRN	PyErr_SetFromWindowsErr:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_CloseHandle DD imagerel winapi_CloseHandle
	DD	imagerel winapi_CloseHandle+119
	DD	imagerel $unwind$winapi_CloseHandle
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_CloseHandle DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0O@OFEENNP@K?3CloseHandle?$AA@
CONST	SEGMENT
??_C@_0O@OFEENNP@K?3CloseHandle?$AA@ DB 'K:CloseHandle', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_CloseHandle
_TEXT	SEGMENT
hObject$ = 32
success$ = 40
_save$121146 = 48
self$ = 80
args$ = 88
winapi_CloseHandle PROC					; COMDAT

; 287  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 288  :     HANDLE hObject;
; 289  :     BOOL success;
; 290  : 
; 291  :     if (!PyArg_ParseTuple(args, F_HANDLE ":CloseHandle", &hObject))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR hObject$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@OFEENNP@K?3CloseHandle?$AA@
  0001a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN2@winapi_Clo

; 292  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 46		 jmp	 SHORT $LN3@winapi_Clo
$LN2@winapi_Clo:

; 293  : 
; 294  :     Py_BEGIN_ALLOW_THREADS

  0002c	e8 00 00 00 00	 call	 PyEval_SaveThread
  00031	48 89 44 24 30	 mov	 QWORD PTR _save$121146[rsp], rax

; 295  :     success = CloseHandle(hObject);

  00036	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hObject$[rsp]
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
  00041	89 44 24 28	 mov	 DWORD PTR success$[rsp], eax

; 296  :     Py_END_ALLOW_THREADS

  00045	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _save$121146[rsp]
  0004a	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 297  : 
; 298  :     if (!success)

  0004f	83 7c 24 28 00	 cmp	 DWORD PTR success$[rsp], 0
  00054	75 09		 jne	 SHORT $LN1@winapi_Clo

; 299  :         return PyErr_SetFromWindowsErr(0);

  00056	33 c9		 xor	 ecx, ecx
  00058	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0005d	eb 13		 jmp	 SHORT $LN3@winapi_Clo
$LN1@winapi_Clo:

; 300  : 
; 301  :     Py_RETURN_NONE;

  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00066	e8 00 00 00 00	 call	 _Py_IncRef
  0006b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@winapi_Clo:

; 302  : }

  00072	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00076	c3		 ret	 0
winapi_CloseHandle ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@PILNFAEP@?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_03HLHKLOAF@K?$HMi?$AA@			; `string'
EXTRN	__imp_SetEvent:PROC
EXTRN	__imp_ConnectNamedPipe:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_ConnectNamedPipe DD imagerel winapi_ConnectNamedPipe
	DD	imagerel winapi_ConnectNamedPipe+384
	DD	imagerel $unwind$winapi_ConnectNamedPipe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_ConnectNamedPipe DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_1BK@PILNFAEP@?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@PILNFAEP@?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, 'u', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HLHKLOAF@K?$HMi?$AA@
CONST	SEGMENT
??_C@_03HLHKLOAF@K?$HMi?$AA@ DB 'K|i', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_ConnectNamedPipe
_TEXT	SEGMENT
success$ = 48
use_overlapped$ = 52
hNamedPipe$ = 56
overlapped$ = 64
_save$121173 = 72
err$121176 = 80
tv80 = 88
self$ = 112
args$ = 120
kwds$ = 128
winapi_ConnectNamedPipe PROC				; COMDAT

; 306  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 307  :     HANDLE hNamedPipe;
; 308  :     int use_overlapped = 0;

  00013	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR use_overlapped$[rsp], 0

; 309  :     BOOL success;
; 310  :     OverlappedObject *overlapped = NULL;

  0001b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR overlapped$[rsp], 0

; 311  :     static char *kwlist[] = {"handle", "overlapped", NULL};
; 312  : 
; 313  :     if (!PyArg_ParseTupleAndKeywords(args, kwds,
; 314  :                                      F_HANDLE "|" F_BOOL, kwlist,
; 315  :                                      &hNamedPipe, &use_overlapped))

  00024	48 8d 44 24 34	 lea	 rax, QWORD PTR use_overlapped$[rsp]
  00029	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002e	48 8d 44 24 38	 lea	 rax, QWORD PTR hNamedPipe$[rsp]
  00033	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00038	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??winapi_ConnectNamedPipe@@9@9
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03HLHKLOAF@K?$HMi?$AA@
  00046	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0004e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00053	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00058	85 c0		 test	 eax, eax
  0005a	75 07		 jne	 SHORT $LN9@winapi_Con

; 316  :         return NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	e9 18 01 00 00	 jmp	 $LN10@winapi_Con
$LN9@winapi_Con:

; 317  : 
; 318  :     if (use_overlapped) {

  00063	83 7c 24 34 00	 cmp	 DWORD PTR use_overlapped$[rsp], 0
  00068	74 1e		 je	 SHORT $LN8@winapi_Con

; 319  :         overlapped = new_overlapped(hNamedPipe);

  0006a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hNamedPipe$[rsp]
  0006f	e8 00 00 00 00	 call	 new_overlapped
  00074	48 89 44 24 40	 mov	 QWORD PTR overlapped$[rsp], rax

; 320  :         if (!overlapped)

  00079	48 83 7c 24 40
	00		 cmp	 QWORD PTR overlapped$[rsp], 0
  0007f	75 07		 jne	 SHORT $LN7@winapi_Con

; 321  :             return NULL;

  00081	33 c0		 xor	 eax, eax
  00083	e9 f3 00 00 00	 jmp	 $LN10@winapi_Con
$LN7@winapi_Con:
$LN8@winapi_Con:

; 322  :     }
; 323  : 
; 324  :     Py_BEGIN_ALLOW_THREADS

  00088	e8 00 00 00 00	 call	 PyEval_SaveThread
  0008d	48 89 44 24 48	 mov	 QWORD PTR _save$121173[rsp], rax

; 325  :     success = ConnectNamedPipe(hNamedPipe,
; 326  :                                overlapped ? &overlapped->overlapped : NULL);

  00092	48 83 7c 24 40
	00		 cmp	 QWORD PTR overlapped$[rsp], 0
  00098	74 10		 je	 SHORT $LN12@winapi_Con
  0009a	48 8b 44 24 40	 mov	 rax, QWORD PTR overlapped$[rsp]
  0009f	48 83 c0 60	 add	 rax, 96			; 00000060H
  000a3	48 89 44 24 58	 mov	 QWORD PTR tv80[rsp], rax
  000a8	eb 09		 jmp	 SHORT $LN13@winapi_Con
$LN12@winapi_Con:
  000aa	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv80[rsp], 0
$LN13@winapi_Con:
  000b3	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv80[rsp]
  000b8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hNamedPipe$[rsp]
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ConnectNamedPipe
  000c3	89 44 24 30	 mov	 DWORD PTR success$[rsp], eax

; 327  :     Py_END_ALLOW_THREADS

  000c7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _save$121173[rsp]
  000cc	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 328  : 
; 329  :     if (overlapped) {

  000d1	48 83 7c 24 40
	00		 cmp	 QWORD PTR overlapped$[rsp], 0
  000d7	74 7f		 je	 SHORT $LN6@winapi_Con

; 330  :         int err = GetLastError();

  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000df	89 44 24 50	 mov	 DWORD PTR err$121176[rsp], eax

; 331  :         /* Overlapped ConnectNamedPipe never returns a success code */
; 332  :         assert(success == 0);

  000e3	83 7c 24 30 00	 cmp	 DWORD PTR success$[rsp], 0
  000e8	74 1c		 je	 SHORT $LN14@winapi_Con
  000ea	41 b8 4c 01 00
	00		 mov	 r8d, 332		; 0000014cH
  000f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@PILNFAEP@?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00104	33 c0		 xor	 eax, eax
$LN14@winapi_Con:

; 333  :         if (err == ERROR_IO_PENDING)

  00106	81 7c 24 50 e5
	03 00 00	 cmp	 DWORD PTR err$121176[rsp], 997 ; 000003e5H
  0010e	75 11		 jne	 SHORT $LN5@winapi_Con

; 334  :             overlapped->pending = 1;

  00110	48 8b 44 24 40	 mov	 rax, QWORD PTR overlapped$[rsp]
  00115	c7 80 88 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+136], 1
  0011f	eb 30		 jmp	 SHORT $LN4@winapi_Con
$LN5@winapi_Con:

; 335  :         else if (err == ERROR_PIPE_CONNECTED)

  00121	81 7c 24 50 17
	02 00 00	 cmp	 DWORD PTR err$121176[rsp], 535 ; 00000217H
  00129	75 11		 jne	 SHORT $LN3@winapi_Con

; 336  :             SetEvent(overlapped->overlapped.hEvent);

  0012b	48 8b 44 24 40	 mov	 rax, QWORD PTR overlapped$[rsp]
  00130	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 337  :         else {

  0013a	eb 15		 jmp	 SHORT $LN2@winapi_Con
$LN3@winapi_Con:

; 338  :             Py_DECREF(overlapped);

  0013c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR overlapped$[rsp]
  00141	e8 00 00 00 00	 call	 _Py_DecRef

; 339  :             return PyErr_SetFromWindowsErr(err);

  00146	8b 4c 24 50	 mov	 ecx, DWORD PTR err$121176[rsp]
  0014a	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0014f	eb 2a		 jmp	 SHORT $LN10@winapi_Con
$LN2@winapi_Con:
$LN4@winapi_Con:

; 340  :         }
; 341  :         return (PyObject *) overlapped;

  00151	48 8b 44 24 40	 mov	 rax, QWORD PTR overlapped$[rsp]
  00156	eb 23		 jmp	 SHORT $LN10@winapi_Con
$LN6@winapi_Con:

; 342  :     }
; 343  :     if (!success)

  00158	83 7c 24 30 00	 cmp	 DWORD PTR success$[rsp], 0
  0015d	75 09		 jne	 SHORT $LN1@winapi_Con

; 344  :         return PyErr_SetFromWindowsErr(0);

  0015f	33 c9		 xor	 ecx, ecx
  00161	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00166	eb 13		 jmp	 SHORT $LN10@winapi_Con
$LN1@winapi_Con:

; 345  : 
; 346  :     Py_RETURN_NONE;

  00168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0016f	e8 00 00 00 00	 call	 _Py_IncRef
  00174	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN10@winapi_Con:

; 347  : }

  0017b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0017f	c3		 ret	 0
winapi_ConnectNamedPipe ENDP
_TEXT	ENDS
EXTRN	__imp_CreateEventA:PROC
EXTRN	memset:PROC
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_overlapped DD imagerel new_overlapped
	DD	imagerel new_overlapped+232
	DD	imagerel $unwind$new_overlapped
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_overlapped DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT new_overlapped
_TEXT	SEGMENT
self$ = 32
tv70 = 40
handle$ = 64
new_overlapped PROC					; COMDAT

; 260  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 261  :     OverlappedObject *self;
; 262  : 
; 263  :     self = PyObject_New(OverlappedObject, &OverlappedType);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 13		 je	 SHORT $LN4@new_overla
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:OverlappedType
  00019	e8 00 00 00 00	 call	 _PxObject_New
  0001e	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00023	eb 11		 jmp	 SHORT $LN5@new_overla
$LN4@new_overla:
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:OverlappedType
  0002c	e8 00 00 00 00	 call	 _PyObject_New
  00031	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
$LN5@new_overla:
  00036	48 8b 44 24 28	 mov	 rax, QWORD PTR tv70[rsp]
  0003b	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 264  :     if (!self)

  00040	48 83 7c 24 20
	00		 cmp	 QWORD PTR self$[rsp], 0
  00046	75 07		 jne	 SHORT $LN1@new_overla

; 265  :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 94 00 00 00	 jmp	 $LN2@new_overla
$LN1@new_overla:

; 266  :     self->handle = handle;

  0004f	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR handle$[rsp]
  00059	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 267  :     self->read_buffer = NULL;

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00065	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 268  :     self->pending = 0;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00075	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+136], 0

; 269  :     self->completed = 0;

  0007f	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00084	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+140], 0

; 270  :     memset(&self->overlapped, 0, sizeof(OVERLAPPED));

  0008e	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00093	48 83 c0 60	 add	 rax, 96			; 00000060H
  00097	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0009d	33 d2		 xor	 edx, edx
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	e8 00 00 00 00	 call	 memset

; 271  :     memset(&self->write_buffer, 0, sizeof(Py_buffer));

  000a7	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  000ac	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  000b2	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  000b8	33 d2		 xor	 edx, edx
  000ba	48 8b c8	 mov	 rcx, rax
  000bd	e8 00 00 00 00	 call	 memset

; 272  :     /* Manual reset, initially non-signalled */
; 273  :     self->overlapped.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);

  000c2	45 33 c9	 xor	 r9d, r9d
  000c5	45 33 c0	 xor	 r8d, r8d
  000c8	ba 01 00 00 00	 mov	 edx, 1
  000cd	33 c9		 xor	 ecx, ecx
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventA
  000d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  000da	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 274  :     return self;

  000de	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
$LN2@new_overla:

; 275  : }

  000e3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e7	c3		 ret	 0
new_overlapped ENDP
_TEXT	ENDS
PUBLIC	??_C@_01KNKLHLMO@K?$AA@				; `string'
PUBLIC	??_C@_07MHILPKDG@skkKkkK?$AA@			; `string'
EXTRN	__imp_CreateFileA:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_CreateFile DD imagerel winapi_CreateFile
	DD	imagerel winapi_CreateFile+238
	DD	imagerel $unwind$winapi_CreateFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_CreateFile DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_01KNKLHLMO@K?$AA@
CONST	SEGMENT
??_C@_01KNKLHLMO@K?$AA@ DB 'K', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MHILPKDG@skkKkkK?$AA@
CONST	SEGMENT
??_C@_07MHILPKDG@skkKkkK?$AA@ DB 'skkKkkK', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_CreateFile
_TEXT	SEGMENT
lpFileName$ = 80
dwShareMode$ = 88
hTemplateFile$ = 96
dwFlagsAndAttributes$ = 104
dwCreationDisposition$ = 108
dwDesiredAccess$ = 112
lpSecurityAttributes$ = 120
handle$ = 128
_save$121204 = 136
self$ = 160
args$ = 168
winapi_CreateFile PROC					; COMDAT

; 351  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 352  :     LPCTSTR lpFileName;
; 353  :     DWORD dwDesiredAccess;
; 354  :     DWORD dwShareMode;
; 355  :     LPSECURITY_ATTRIBUTES lpSecurityAttributes;
; 356  :     DWORD dwCreationDisposition;
; 357  :     DWORD dwFlagsAndAttributes;
; 358  :     HANDLE hTemplateFile;
; 359  :     HANDLE handle;
; 360  : 
; 361  :     if (!PyArg_ParseTuple(args, "s" F_DWORD F_DWORD F_POINTER
; 362  :                           F_DWORD F_DWORD F_HANDLE,
; 363  :                           &lpFileName, &dwDesiredAccess, &dwShareMode,
; 364  :                           &lpSecurityAttributes, &dwCreationDisposition,
; 365  :                           &dwFlagsAndAttributes, &hTemplateFile))

  00011	48 8d 44 24 60	 lea	 rax, QWORD PTR hTemplateFile$[rsp]
  00016	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0001b	48 8d 44 24 68	 lea	 rax, QWORD PTR dwFlagsAndAttributes$[rsp]
  00020	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00025	48 8d 44 24 6c	 lea	 rax, QWORD PTR dwCreationDisposition$[rsp]
  0002a	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0002f	48 8d 44 24 78	 lea	 rax, QWORD PTR lpSecurityAttributes$[rsp]
  00034	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00039	48 8d 44 24 58	 lea	 rax, QWORD PTR dwShareMode$[rsp]
  0003e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00043	4c 8d 4c 24 70	 lea	 r9, QWORD PTR dwDesiredAccess$[rsp]
  00048	4c 8d 44 24 50	 lea	 r8, QWORD PTR lpFileName$[rsp]
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07MHILPKDG@skkKkkK?$AA@
  00054	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005c	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00061	85 c0		 test	 eax, eax
  00063	75 04		 jne	 SHORT $LN2@winapi_Cre

; 366  :         return NULL;

  00065	33 c0		 xor	 eax, eax
  00067	eb 7d		 jmp	 SHORT $LN3@winapi_Cre
$LN2@winapi_Cre:

; 367  : 
; 368  :     Py_BEGIN_ALLOW_THREADS

  00069	e8 00 00 00 00	 call	 PyEval_SaveThread
  0006e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _save$121204[rsp], rax

; 369  :     handle = CreateFile(lpFileName, dwDesiredAccess,
; 370  :                         dwShareMode, lpSecurityAttributes,
; 371  :                         dwCreationDisposition,
; 372  :                         dwFlagsAndAttributes, hTemplateFile);

  00076	48 8b 44 24 60	 mov	 rax, QWORD PTR hTemplateFile$[rsp]
  0007b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00080	8b 44 24 68	 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rsp]
  00084	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00088	8b 44 24 6c	 mov	 eax, DWORD PTR dwCreationDisposition$[rsp]
  0008c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00090	4c 8b 4c 24 78	 mov	 r9, QWORD PTR lpSecurityAttributes$[rsp]
  00095	44 8b 44 24 58	 mov	 r8d, DWORD PTR dwShareMode$[rsp]
  0009a	8b 54 24 70	 mov	 edx, DWORD PTR dwDesiredAccess$[rsp]
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR lpFileName$[rsp]
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  000a9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR handle$[rsp], rax

; 373  :     Py_END_ALLOW_THREADS

  000b1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _save$121204[rsp]
  000b9	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 374  : 
; 375  :     if (handle == INVALID_HANDLE_VALUE)

  000be	48 83 bc 24 80
	00 00 00 ff	 cmp	 QWORD PTR handle$[rsp], -1
  000c7	75 09		 jne	 SHORT $LN1@winapi_Cre

; 376  :         return PyErr_SetFromWindowsErr(0);

  000c9	33 c9		 xor	 ecx, ecx
  000cb	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000d0	eb 14		 jmp	 SHORT $LN3@winapi_Cre
$LN1@winapi_Cre:

; 377  : 
; 378  :     return Py_BuildValue(F_HANDLE, handle);

  000d2	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR handle$[rsp]
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01KNKLHLMO@K?$AA@
  000e1	e8 00 00 00 00	 call	 Py_BuildValue
$LN3@winapi_Cre:

; 379  : }

  000e6	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000ed	c3		 ret	 0
winapi_CreateFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_08ODBBMLHL@skkkkkkK?$AA@			; `string'
EXTRN	__imp_CreateNamedPipeA:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_CreateNamedPipe DD imagerel winapi_CreateNamedPipe
	DD	imagerel winapi_CreateNamedPipe+262
	DD	imagerel $unwind$winapi_CreateNamedPipe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_CreateNamedPipe DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_08ODBBMLHL@skkkkkkK?$AA@
CONST	SEGMENT
??_C@_08ODBBMLHL@skkkkkkK?$AA@ DB 'skkkkkkK', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_CreateNamedPipe
_TEXT	SEGMENT
nMaxInstances$ = 80
lpName$ = 88
nInBufferSize$ = 96
nOutBufferSize$ = 100
dwOpenMode$ = 104
lpSecurityAttributes$ = 112
handle$ = 120
nDefaultTimeOut$ = 128
dwPipeMode$ = 132
_save$121227 = 136
self$ = 160
args$ = 168
winapi_CreateNamedPipe PROC				; COMDAT

; 383  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 384  :     LPCTSTR lpName;
; 385  :     DWORD dwOpenMode;
; 386  :     DWORD dwPipeMode;
; 387  :     DWORD nMaxInstances;
; 388  :     DWORD nOutBufferSize;
; 389  :     DWORD nInBufferSize;
; 390  :     DWORD nDefaultTimeOut;
; 391  :     LPSECURITY_ATTRIBUTES lpSecurityAttributes;
; 392  :     HANDLE handle;
; 393  : 
; 394  :     if (!PyArg_ParseTuple(args, "s" F_DWORD F_DWORD F_DWORD
; 395  :                           F_DWORD F_DWORD F_DWORD F_POINTER,
; 396  :                           &lpName, &dwOpenMode, &dwPipeMode,
; 397  :                           &nMaxInstances, &nOutBufferSize,
; 398  :                           &nInBufferSize, &nDefaultTimeOut,
; 399  :                           &lpSecurityAttributes))

  00011	48 8d 44 24 70	 lea	 rax, QWORD PTR lpSecurityAttributes$[rsp]
  00016	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0001b	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR nDefaultTimeOut$[rsp]
  00023	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00028	48 8d 44 24 60	 lea	 rax, QWORD PTR nInBufferSize$[rsp]
  0002d	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00032	48 8d 44 24 64	 lea	 rax, QWORD PTR nOutBufferSize$[rsp]
  00037	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0003c	48 8d 44 24 50	 lea	 rax, QWORD PTR nMaxInstances$[rsp]
  00041	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00046	48 8d 84 24 84
	00 00 00	 lea	 rax, QWORD PTR dwPipeMode$[rsp]
  0004e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00053	4c 8d 4c 24 68	 lea	 r9, QWORD PTR dwOpenMode$[rsp]
  00058	4c 8d 44 24 58	 lea	 r8, QWORD PTR lpName$[rsp]
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08ODBBMLHL@skkkkkkK?$AA@
  00064	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0006c	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00071	85 c0		 test	 eax, eax
  00073	75 07		 jne	 SHORT $LN2@winapi_Cre@2

; 400  :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	e9 82 00 00 00	 jmp	 $LN3@winapi_Cre@2
$LN2@winapi_Cre@2:

; 401  : 
; 402  :     Py_BEGIN_ALLOW_THREADS

  0007c	e8 00 00 00 00	 call	 PyEval_SaveThread
  00081	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _save$121227[rsp], rax

; 403  :     handle = CreateNamedPipe(lpName, dwOpenMode, dwPipeMode,
; 404  :                              nMaxInstances, nOutBufferSize,
; 405  :                              nInBufferSize, nDefaultTimeOut,
; 406  :                              lpSecurityAttributes);

  00089	48 8b 44 24 70	 mov	 rax, QWORD PTR lpSecurityAttributes$[rsp]
  0008e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00093	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR nDefaultTimeOut$[rsp]
  0009a	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0009e	8b 44 24 60	 mov	 eax, DWORD PTR nInBufferSize$[rsp]
  000a2	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000a6	8b 44 24 64	 mov	 eax, DWORD PTR nOutBufferSize$[rsp]
  000aa	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000ae	44 8b 4c 24 50	 mov	 r9d, DWORD PTR nMaxInstances$[rsp]
  000b3	44 8b 84 24 84
	00 00 00	 mov	 r8d, DWORD PTR dwPipeMode$[rsp]
  000bb	8b 54 24 68	 mov	 edx, DWORD PTR dwOpenMode$[rsp]
  000bf	48 8b 4c 24 58	 mov	 rcx, QWORD PTR lpName$[rsp]
  000c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateNamedPipeA
  000ca	48 89 44 24 78	 mov	 QWORD PTR handle$[rsp], rax

; 407  :     Py_END_ALLOW_THREADS

  000cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _save$121227[rsp]
  000d7	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 408  : 
; 409  :     if (handle == INVALID_HANDLE_VALUE)

  000dc	48 83 7c 24 78
	ff		 cmp	 QWORD PTR handle$[rsp], -1
  000e2	75 09		 jne	 SHORT $LN1@winapi_Cre@2

; 410  :         return PyErr_SetFromWindowsErr(0);

  000e4	33 c9		 xor	 ecx, ecx
  000e6	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000eb	eb 11		 jmp	 SHORT $LN3@winapi_Cre@2
$LN1@winapi_Cre@2:

; 411  : 
; 412  :     return Py_BuildValue(F_HANDLE, handle);

  000ed	48 8b 54 24 78	 mov	 rdx, QWORD PTR handle$[rsp]
  000f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01KNKLHLMO@K?$AA@
  000f9	e8 00 00 00 00	 call	 Py_BuildValue
$LN3@winapi_Cre@2:

; 413  : }

  000fe	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00105	c3		 ret	 0
winapi_CreateNamedPipe ENDP
_TEXT	ENDS
PUBLIC	??_C@_02BEEAOEKM@NN?$AA@			; `string'
PUBLIC	??_C@_0O@OLLGNKAD@Ok?3CreatePipe?$AA@		; `string'
EXTRN	PyLong_FromUnsignedLongLong:PROC
EXTRN	__imp_CreatePipe:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_CreatePipe DD imagerel winapi_CreatePipe
	DD	imagerel winapi_CreatePipe+172
	DD	imagerel $unwind$winapi_CreatePipe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_CreatePipe DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_02BEEAOEKM@NN?$AA@
CONST	SEGMENT
??_C@_02BEEAOEKM@NN?$AA@ DB 'NN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLLGNKAD@Ok?3CreatePipe?$AA@
CONST	SEGMENT
??_C@_0O@OLLGNKAD@Ok?3CreatePipe?$AA@ DB 'Ok:CreatePipe', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_CreatePipe
_TEXT	SEGMENT
pipe_attributes$ = 32
write_pipe$ = 40
size$ = 48
result$ = 52
read_pipe$ = 56
_save$121246 = 64
tv82 = 72
self$ = 96
args$ = 104
winapi_CreatePipe PROC					; COMDAT

; 425  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 426  :     HANDLE read_pipe;
; 427  :     HANDLE write_pipe;
; 428  :     BOOL result;
; 429  : 
; 430  :     PyObject* pipe_attributes; /* ignored */
; 431  :     DWORD size;
; 432  : 
; 433  :     if (! PyArg_ParseTuple(args, "O" F_DWORD ":CreatePipe",
; 434  :                            &pipe_attributes, &size))

  0000e	4c 8d 4c 24 30	 lea	 r9, QWORD PTR size$[rsp]
  00013	4c 8d 44 24 20	 lea	 r8, QWORD PTR pipe_attributes$[rsp]
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@OLLGNKAD@Ok?3CreatePipe?$AA@
  0001f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00024	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN2@winapi_Cre@3

; 435  :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 76		 jmp	 SHORT $LN3@winapi_Cre@3
$LN2@winapi_Cre@3:

; 436  : 
; 437  :     Py_BEGIN_ALLOW_THREADS

  00031	e8 00 00 00 00	 call	 PyEval_SaveThread
  00036	48 89 44 24 40	 mov	 QWORD PTR _save$121246[rsp], rax

; 438  :     result = CreatePipe(&read_pipe, &write_pipe, NULL, size);

  0003b	44 8b 4c 24 30	 mov	 r9d, DWORD PTR size$[rsp]
  00040	45 33 c0	 xor	 r8d, r8d
  00043	48 8d 54 24 28	 lea	 rdx, QWORD PTR write_pipe$[rsp]
  00048	48 8d 4c 24 38	 lea	 rcx, QWORD PTR read_pipe$[rsp]
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreatePipe
  00053	89 44 24 34	 mov	 DWORD PTR result$[rsp], eax

; 439  :     Py_END_ALLOW_THREADS

  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _save$121246[rsp]
  0005c	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 440  : 
; 441  :     if (! result)

  00061	83 7c 24 34 00	 cmp	 DWORD PTR result$[rsp], 0
  00066	75 0f		 jne	 SHORT $LN1@winapi_Cre@3

; 442  :         return PyErr_SetFromWindowsErr(GetLastError());

  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0006e	8b c8		 mov	 ecx, eax
  00070	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00075	eb 30		 jmp	 SHORT $LN3@winapi_Cre@3
$LN1@winapi_Cre@3:

; 443  : 
; 444  :     return Py_BuildValue(
; 445  :         "NN", HANDLE_TO_PYNUM(read_pipe), HANDLE_TO_PYNUM(write_pipe));

  00077	48 8b 4c 24 28	 mov	 rcx, QWORD PTR write_pipe$[rsp]
  0007c	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  00081	48 89 44 24 48	 mov	 QWORD PTR tv82[rsp], rax
  00086	48 8b 4c 24 38	 mov	 rcx, QWORD PTR read_pipe$[rsp]
  0008b	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  00090	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv82[rsp]
  00095	4c 8b c1	 mov	 r8, rcx
  00098	48 8b d0	 mov	 rdx, rax
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02BEEAOEKM@NN?$AA@
  000a2	e8 00 00 00 00	 call	 Py_BuildValue
$LN3@winapi_Cre@3:

; 446  : }

  000a7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ab	c3		 ret	 0
winapi_CreatePipe ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GHFOFHGJ@NNkk?$AA@			; `string'
PUBLIC	??_C@_09IBEKIOCM@hStdError?$AA@			; `string'
PUBLIC	??_C@_0L@ECAKFBIF@hStdOutput?$AA@		; `string'
PUBLIC	??_C@_09LOHKHNHP@hStdInput?$AA@			; `string'
PUBLIC	??_C@_0M@KKOBDLEJ@wShowWindow?$AA@		; `string'
PUBLIC	??_C@_07KIGAHELJ@dwFlags?$AA@			; `string'
PUBLIC	??_C@_0BI@BIAPMBPM@ZZOOikOZO?3CreateProcess?$AA@ ; `string'
EXTRN	__imp_CreateProcessW:PROC
EXTRN	PyUnicode_AsUnicode:PROC
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_CreateProcess DD imagerel winapi_CreateProcess
	DD	imagerel winapi_CreateProcess+727
	DD	imagerel $unwind$winapi_CreateProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_CreateProcess DD 021101H
	DD	02d0111H
xdata	ENDS
;	COMDAT ??_C@_04GHFOFHGJ@NNkk?$AA@
CONST	SEGMENT
??_C@_04GHFOFHGJ@NNkk?$AA@ DB 'NNkk', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IBEKIOCM@hStdError?$AA@
CONST	SEGMENT
??_C@_09IBEKIOCM@hStdError?$AA@ DB 'hStdError', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ECAKFBIF@hStdOutput?$AA@
CONST	SEGMENT
??_C@_0L@ECAKFBIF@hStdOutput?$AA@ DB 'hStdOutput', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LOHKHNHP@hStdInput?$AA@
CONST	SEGMENT
??_C@_09LOHKHNHP@hStdInput?$AA@ DB 'hStdInput', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KKOBDLEJ@wShowWindow?$AA@
CONST	SEGMENT
??_C@_0M@KKOBDLEJ@wShowWindow?$AA@ DB 'wShowWindow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KIGAHELJ@dwFlags?$AA@
CONST	SEGMENT
??_C@_07KIGAHELJ@dwFlags?$AA@ DB 'dwFlags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BIAPMBPM@ZZOOikOZO?3CreateProcess?$AA@
CONST	SEGMENT
??_C@_0BI@BIAPMBPM@ZZOOikOZO?3CreateProcess?$AA@ DB 'ZZOOikOZO:CreateProc'
	DB	'ess', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_CreateProcess
_TEXT	SEGMENT
current_directory$ = 96
wenvironment$ = 104
command_line$ = 112
environment$ = 120
creation_flags$ = 128
env_mapping$ = 136
process_attributes$ = 144
pi$ = 152
inherit_handles$ = 176
thread_attributes$ = 184
si$ = 192
application_name$ = 304
result$ = 312
startup_info$ = 320
_save$121413 = 328
tv164 = 336
self$ = 368
args$ = 376
winapi_CreateProcess PROC				; COMDAT

; 571  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H

; 572  :     BOOL result;
; 573  :     PROCESS_INFORMATION pi;
; 574  :     STARTUPINFOW si;
; 575  :     PyObject* environment;
; 576  :     wchar_t *wenvironment;
; 577  : 
; 578  :     wchar_t* application_name;
; 579  :     wchar_t* command_line;
; 580  :     PyObject* process_attributes; /* ignored */
; 581  :     PyObject* thread_attributes; /* ignored */
; 582  :     BOOL inherit_handles;
; 583  :     DWORD creation_flags;
; 584  :     PyObject* env_mapping;
; 585  :     wchar_t* current_directory;
; 586  :     PyObject* startup_info;
; 587  : 
; 588  :     if (! PyArg_ParseTuple(args, "ZZOO" F_BOOL F_DWORD "OZO:CreateProcess",
; 589  :                            &application_name,
; 590  :                            &command_line,
; 591  :                            &process_attributes,
; 592  :                            &thread_attributes,
; 593  :                            &inherit_handles,
; 594  :                            &creation_flags,
; 595  :                            &env_mapping,
; 596  :                            &current_directory,
; 597  :                            &startup_info))

  00011	48 8d 84 24 40
	01 00 00	 lea	 rax, QWORD PTR startup_info$[rsp]
  00019	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0001e	48 8d 44 24 60	 lea	 rax, QWORD PTR current_directory$[rsp]
  00023	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00028	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR env_mapping$[rsp]
  00030	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00035	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR creation_flags$[rsp]
  0003d	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00042	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR inherit_handles$[rsp]
  0004a	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0004f	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR thread_attributes$[rsp]
  00057	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0005c	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR process_attributes$[rsp]
  00064	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00069	4c 8d 4c 24 70	 lea	 r9, QWORD PTR command_line$[rsp]
  0006e	4c 8d 84 24 30
	01 00 00	 lea	 r8, QWORD PTR application_name$[rsp]
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@BIAPMBPM@ZZOOikOZO?3CreateProcess?$AA@
  0007d	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00085	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0008a	85 c0		 test	 eax, eax
  0008c	75 07		 jne	 SHORT $LN15@winapi_Cre@4

; 598  :         return NULL;

  0008e	33 c0		 xor	 eax, eax
  00090	e9 3a 02 00 00	 jmp	 $LN16@winapi_Cre@4
$LN15@winapi_Cre@4:

; 599  : 
; 600  :     ZeroMemory(&si, sizeof(si));

  00095	41 b8 68 00 00
	00		 mov	 r8d, 104		; 00000068H
  0009b	33 d2		 xor	 edx, edx
  0009d	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR si$[rsp]
  000a5	e8 00 00 00 00	 call	 memset

; 601  :     si.cb = sizeof(si);

  000aa	c7 84 24 c0 00
	00 00 68 00 00
	00		 mov	 DWORD PTR si$[rsp], 104	; 00000068H

; 602  : 
; 603  :     /* note: we only support a small subset of all SI attributes */
; 604  :     si.dwFlags = getulong(startup_info, "dwFlags");

  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07KIGAHELJ@dwFlags?$AA@
  000bc	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR startup_info$[rsp]
  000c4	e8 00 00 00 00	 call	 getulong
  000c9	89 84 24 fc 00
	00 00		 mov	 DWORD PTR si$[rsp+60], eax

; 605  :     si.wShowWindow = (WORD)getulong(startup_info, "wShowWindow");

  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@KKOBDLEJ@wShowWindow?$AA@
  000d7	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR startup_info$[rsp]
  000df	e8 00 00 00 00	 call	 getulong
  000e4	66 89 84 24 00
	01 00 00	 mov	 WORD PTR si$[rsp+64], ax

; 606  :     si.hStdInput = gethandle(startup_info, "hStdInput");

  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LOHKHNHP@hStdInput?$AA@
  000f3	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR startup_info$[rsp]
  000fb	e8 00 00 00 00	 call	 gethandle
  00100	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR si$[rsp+80], rax

; 607  :     si.hStdOutput = gethandle(startup_info, "hStdOutput");

  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@ECAKFBIF@hStdOutput?$AA@
  0010f	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR startup_info$[rsp]
  00117	e8 00 00 00 00	 call	 gethandle
  0011c	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR si$[rsp+88], rax

; 608  :     si.hStdError = gethandle(startup_info, "hStdError");

  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09IBEKIOCM@hStdError?$AA@
  0012b	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR startup_info$[rsp]
  00133	e8 00 00 00 00	 call	 gethandle
  00138	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR si$[rsp+96], rax

; 609  :     if (PyErr_Occurred())

  00140	e8 00 00 00 00	 call	 PyErr_Occurred
  00145	48 85 c0	 test	 rax, rax
  00148	74 07		 je	 SHORT $LN14@winapi_Cre@4

; 610  :         return NULL;

  0014a	33 c0		 xor	 eax, eax
  0014c	e9 7e 01 00 00	 jmp	 $LN16@winapi_Cre@4
$LN14@winapi_Cre@4:

; 611  : 
; 612  :     if (env_mapping != Py_None) {

  00151	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00158	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR env_mapping$[rsp], rax
  00160	74 59		 je	 SHORT $LN13@winapi_Cre@4

; 613  :         environment = getenvironment(env_mapping);

  00162	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR env_mapping$[rsp]
  0016a	e8 00 00 00 00	 call	 getenvironment
  0016f	48 89 44 24 78	 mov	 QWORD PTR environment$[rsp], rax

; 614  :         if (! environment)

  00174	48 83 7c 24 78
	00		 cmp	 QWORD PTR environment$[rsp], 0
  0017a	75 07		 jne	 SHORT $LN12@winapi_Cre@4

; 615  :             return NULL;

  0017c	33 c0		 xor	 eax, eax
  0017e	e9 4c 01 00 00	 jmp	 $LN16@winapi_Cre@4
$LN12@winapi_Cre@4:

; 616  :         wenvironment = PyUnicode_AsUnicode(environment);

  00183	48 8b 4c 24 78	 mov	 rcx, QWORD PTR environment$[rsp]
  00188	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  0018d	48 89 44 24 68	 mov	 QWORD PTR wenvironment$[rsp], rax

; 617  :         if (wenvironment == NULL)

  00192	48 83 7c 24 68
	00		 cmp	 QWORD PTR wenvironment$[rsp], 0
  00198	75 1f		 jne	 SHORT $LN11@winapi_Cre@4
$LN10@winapi_Cre@4:

; 618  :         {
; 619  :             Py_XDECREF(environment);

  0019a	48 83 7c 24 78
	00		 cmp	 QWORD PTR environment$[rsp], 0
  001a0	74 0a		 je	 SHORT $LN7@winapi_Cre@4
  001a2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR environment$[rsp]
  001a7	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@winapi_Cre@4:
  001ac	33 c0		 xor	 eax, eax
  001ae	85 c0		 test	 eax, eax
  001b0	75 e8		 jne	 SHORT $LN10@winapi_Cre@4

; 620  :             return NULL;

  001b2	33 c0		 xor	 eax, eax
  001b4	e9 16 01 00 00	 jmp	 $LN16@winapi_Cre@4
$LN11@winapi_Cre@4:

; 621  :         }
; 622  :     }
; 623  :     else {

  001b9	eb 12		 jmp	 SHORT $LN6@winapi_Cre@4
$LN13@winapi_Cre@4:

; 624  :         environment = NULL;

  001bb	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR environment$[rsp], 0

; 625  :         wenvironment = NULL;

  001c4	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR wenvironment$[rsp], 0
$LN6@winapi_Cre@4:

; 626  :     }
; 627  : 
; 628  :     Py_BEGIN_ALLOW_THREADS

  001cd	e8 00 00 00 00	 call	 PyEval_SaveThread
  001d2	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR _save$121413[rsp], rax

; 629  :     result = CreateProcessW(application_name,
; 630  :                            command_line,
; 631  :                            NULL,
; 632  :                            NULL,
; 633  :                            inherit_handles,
; 634  :                            creation_flags | CREATE_UNICODE_ENVIRONMENT,
; 635  :                            wenvironment,
; 636  :                            current_directory,
; 637  :                            &si,
; 638  :                            &pi);

  001da	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR creation_flags$[rsp]
  001e1	0f ba e8 0a	 bts	 eax, 10
  001e5	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR pi$[rsp]
  001ed	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001f2	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR si$[rsp]
  001fa	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR current_directory$[rsp]
  00204	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00209	48 8b 4c 24 68	 mov	 rcx, QWORD PTR wenvironment$[rsp]
  0020e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00213	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00217	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR inherit_handles$[rsp]
  0021e	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00222	45 33 c9	 xor	 r9d, r9d
  00225	45 33 c0	 xor	 r8d, r8d
  00228	48 8b 54 24 70	 mov	 rdx, QWORD PTR command_line$[rsp]
  0022d	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR application_name$[rsp]
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateProcessW
  0023b	89 84 24 38 01
	00 00		 mov	 DWORD PTR result$[rsp], eax

; 639  :     Py_END_ALLOW_THREADS

  00242	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR _save$121413[rsp]
  0024a	e8 00 00 00 00	 call	 PyEval_RestoreThread
$LN5@winapi_Cre@4:

; 640  : 
; 641  :     Py_XDECREF(environment);

  0024f	48 83 7c 24 78
	00		 cmp	 QWORD PTR environment$[rsp], 0
  00255	74 0a		 je	 SHORT $LN2@winapi_Cre@4
  00257	48 8b 4c 24 78	 mov	 rcx, QWORD PTR environment$[rsp]
  0025c	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@winapi_Cre@4:
  00261	33 c0		 xor	 eax, eax
  00263	85 c0		 test	 eax, eax
  00265	75 e8		 jne	 SHORT $LN5@winapi_Cre@4

; 642  : 
; 643  :     if (! result)

  00267	83 bc 24 38 01
	00 00 00	 cmp	 DWORD PTR result$[rsp], 0
  0026f	75 0f		 jne	 SHORT $LN1@winapi_Cre@4

; 644  :         return PyErr_SetFromWindowsErr(GetLastError());

  00271	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00277	8b c8		 mov	 ecx, eax
  00279	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0027e	eb 4f		 jmp	 SHORT $LN16@winapi_Cre@4
$LN1@winapi_Cre@4:

; 645  : 
; 646  :     return Py_BuildValue("NNkk",
; 647  :                          HANDLE_TO_PYNUM(pi.hProcess),
; 648  :                          HANDLE_TO_PYNUM(pi.hThread),
; 649  :                          pi.dwProcessId,
; 650  :                          pi.dwThreadId);

  00280	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pi$[rsp+8]
  00288	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  0028d	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv164[rsp], rax
  00295	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pi$[rsp]
  0029d	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  002a2	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR pi$[rsp+20]
  002a9	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  002ad	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR pi$[rsp+16]
  002b5	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR tv164[rsp]
  002bd	4c 8b c1	 mov	 r8, rcx
  002c0	48 8b d0	 mov	 rdx, rax
  002c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHFOFHGJ@NNkk?$AA@
  002ca	e8 00 00 00 00	 call	 Py_BuildValue
$LN16@winapi_Cre@4:

; 651  : }

  002cf	48 81 c4 68 01
	00 00		 add	 rsp, 360		; 00000168H
  002d6	c3		 ret	 0
winapi_CreateProcess ENDP
_TEXT	ENDS
EXTRN	PyLong_AsUnsignedLong:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyObject_GetAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$getulong DD imagerel getulong
	DD	imagerel getulong+84
	DD	imagerel $unwind$getulong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getulong DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT getulong
_TEXT	SEGMENT
value$ = 32
ret$ = 40
obj$ = 64
name$ = 72
getulong PROC						; COMDAT

; 452  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 453  :     PyObject* value;
; 454  :     unsigned long ret;
; 455  : 
; 456  :     value = PyObject_GetAttrString(obj, name);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00018	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0001d	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 457  :     if (! value) {

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00028	75 09		 jne	 SHORT $LN1@getulong

; 458  :         PyErr_Clear(); /* FIXME: propagate error? */

  0002a	e8 00 00 00 00	 call	 PyErr_Clear

; 459  :         return 0;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 1c		 jmp	 SHORT $LN2@getulong
$LN1@getulong:

; 460  :     }
; 461  :     ret = PyLong_AsUnsignedLong(value);

  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00038	e8 00 00 00 00	 call	 PyLong_AsUnsignedLong
  0003d	89 44 24 28	 mov	 DWORD PTR ret$[rsp], eax

; 462  :     Py_DECREF(value);

  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00046	e8 00 00 00 00	 call	 _Py_DecRef

; 463  :     return ret;

  0004b	8b 44 24 28	 mov	 eax, DWORD PTR ret$[rsp]
$LN2@getulong:

; 464  : }

  0004f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00053	c3		 ret	 0
getulong ENDP
_TEXT	ENDS
EXTRN	PyLong_AsUnsignedLongLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gethandle DD imagerel gethandle
	DD	imagerel gethandle+111
	DD	imagerel $unwind$gethandle
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gethandle DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gethandle
_TEXT	SEGMENT
value$ = 32
ret$ = 40
obj$ = 64
name$ = 72
gethandle PROC						; COMDAT

; 468  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 469  :     PyObject* value;
; 470  :     HANDLE ret;
; 471  : 
; 472  :     value = PyObject_GetAttrString(obj, name);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00018	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0001d	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 473  :     if (! value) {

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00028	75 09		 jne	 SHORT $LN3@gethandle

; 474  :         PyErr_Clear(); /* FIXME: propagate error? */

  0002a	e8 00 00 00 00	 call	 PyErr_Clear

; 475  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 37		 jmp	 SHORT $LN4@gethandle
$LN3@gethandle:

; 476  :     }
; 477  :     if (value == Py_None)

  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0003a	48 39 44 24 20	 cmp	 QWORD PTR value$[rsp], rax
  0003f	75 0b		 jne	 SHORT $LN2@gethandle

; 478  :         ret = NULL;

  00041	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR ret$[rsp], 0

; 479  :     else

  0004a	eb 0f		 jmp	 SHORT $LN1@gethandle
$LN2@gethandle:

; 480  :         ret = PYNUM_TO_HANDLE(value);

  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00051	e8 00 00 00 00	 call	 PyLong_AsUnsignedLongLong
  00056	48 89 44 24 28	 mov	 QWORD PTR ret$[rsp], rax
$LN1@gethandle:

; 481  :     Py_DECREF(value);

  0005b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00060	e8 00 00 00 00	 call	 _Py_DecRef

; 482  :     return ret;

  00065	48 8b 44 24 28	 mov	 rax, QWORD PTR ret$[rsp]
$LN4@gethandle:

; 483  : }

  0006a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006e	c3		 ret	 0
gethandle ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BC@IBPFHPPD@?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAn?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@CGCPMLIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@JNPNJFLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@GEAALFGA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CF@PGPLICDA@environment?5can?5only?5contain?5str@ ; `string'
PUBLIC	??_C@_0CH@FHCLFMNB@environment?5must?5be?5dictionary?5o@ ; `string'
EXTRN	PyMem_Free:PROC
EXTRN	PyUnicode_FromKindAndData:PROC
EXTRN	PyUnicode_AsUCS4:PROC
EXTRN	PyMem_Malloc:PROC
EXTRN	PyMapping_Values:PROC
EXTRN	PyMapping_Keys:PROC
EXTRN	PyMapping_Size:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyMapping_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$getenvironment DD imagerel getenvironment
	DD	imagerel getenvironment+1360
	DD	imagerel $unwind$getenvironment
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getenvironment DD 020c01H
	DD	013010cH
xdata	ENDS
;	COMDAT ??_C@_1BC@IBPFHPPD@?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAn?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@IBPFHPPD@?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAn?$AAd?$AA?$AA@ DB 'p'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@CGCPMLIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@CGCPMLIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@JNPNJFLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@JNPNJFLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H
	DB	'e', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@GEAALFGA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@GEAALFGA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'k', 00H
	DB	'e', 00H, 'y', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'k', 00H, 'e', 00H, 'y', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PGPLICDA@environment?5can?5only?5contain?5str@
CONST	SEGMENT
??_C@_0CF@PGPLICDA@environment?5can?5only?5contain?5str@ DB 'environment '
	DB	'can only contain strings', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FHCLFMNB@environment?5must?5be?5dictionary?5o@
CONST	SEGMENT
??_C@_0CH@FHCLFMNB@environment?5must?5be?5dictionary?5o@ DB 'environment '
	DB	'must be dictionary or None', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT getenvironment
_TEXT	SEGMENT
p$ = 32
res$ = 40
envsize$ = 48
values$ = 56
i$ = 64
end$ = 72
keys$ = 80
buffer$ = 88
totalsize$ = 96
value$121302 = 104
key$121300 = 112
value$121330 = 120
key$121328 = 128
environment$ = 160
getenvironment PROC					; COMDAT

; 487  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 488  :     Py_ssize_t i, envsize, totalsize;
; 489  :     Py_UCS4 *buffer = NULL, *p, *end;

  0000c	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 490  :     PyObject *keys, *values, *res;
; 491  : 
; 492  :     /* convert environment dictionary to windows environment string */
; 493  :     if (! PyMapping_Check(environment)) {

  00015	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR environment$[rsp]
  0001d	e8 00 00 00 00	 call	 PyMapping_Check
  00022	85 c0		 test	 eax, eax
  00024	75 1a		 jne	 SHORT $LN30@getenviron

; 494  :         PyErr_SetString(
; 495  :             PyExc_TypeError, "environment must be dictionary or None");

  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@FHCLFMNB@environment?5must?5be?5dictionary?5o@
  0002d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00034	e8 00 00 00 00	 call	 PyErr_SetString

; 496  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 08 05 00 00	 jmp	 $LN31@getenviron
$LN30@getenviron:

; 497  :     }
; 498  : 
; 499  :     envsize = PyMapping_Length(environment);

  00040	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR environment$[rsp]
  00048	e8 00 00 00 00	 call	 PyMapping_Size
  0004d	48 89 44 24 30	 mov	 QWORD PTR envsize$[rsp], rax

; 500  : 
; 501  :     keys = PyMapping_Keys(environment);

  00052	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR environment$[rsp]
  0005a	e8 00 00 00 00	 call	 PyMapping_Keys
  0005f	48 89 44 24 50	 mov	 QWORD PTR keys$[rsp], rax

; 502  :     values = PyMapping_Values(environment);

  00064	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR environment$[rsp]
  0006c	e8 00 00 00 00	 call	 PyMapping_Values
  00071	48 89 44 24 38	 mov	 QWORD PTR values$[rsp], rax

; 503  :     if (!keys || !values)

  00076	48 83 7c 24 50
	00		 cmp	 QWORD PTR keys$[rsp], 0
  0007c	74 08		 je	 SHORT $LN28@getenviron
  0007e	48 83 7c 24 38
	00		 cmp	 QWORD PTR values$[rsp], 0
  00084	75 05		 jne	 SHORT $LN29@getenviron
$LN28@getenviron:

; 504  :         goto error;

  00086	e9 81 04 00 00	 jmp	 $error$121296
$LN29@getenviron:

; 505  : 
; 506  :     totalsize = 1; /* trailing null character */

  0008b	48 c7 44 24 60
	01 00 00 00	 mov	 QWORD PTR totalsize$[rsp], 1

; 507  :     for (i = 0; i < envsize; i++) {

  00094	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0009d	eb 0d		 jmp	 SHORT $LN27@getenviron
$LN26@getenviron:
  0009f	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  000a4	48 ff c0	 inc	 rax
  000a7	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN27@getenviron:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR envsize$[rsp]
  000b1	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  000b6	0f 8d 6f 01 00
	00		 jge	 $LN25@getenviron

; 508  :         PyObject* key = PyList_GET_ITEM(keys, i);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR keys$[rsp]
  000c1	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000c5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  000ca	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000ce	48 89 44 24 70	 mov	 QWORD PTR key$121300[rsp], rax

; 509  :         PyObject* value = PyList_GET_ITEM(values, i);

  000d3	48 8b 44 24 38	 mov	 rax, QWORD PTR values$[rsp]
  000d8	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000dc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  000e1	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000e5	48 89 44 24 68	 mov	 QWORD PTR value$121302[rsp], rax

; 510  : 
; 511  :         if (! PyUnicode_Check(key) || ! PyUnicode_Check(value)) {

  000ea	48 8b 44 24 70	 mov	 rax, QWORD PTR key$121300[rsp]
  000ef	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000fe	85 c0		 test	 eax, eax
  00100	74 18		 je	 SHORT $LN23@getenviron
  00102	48 8b 44 24 68	 mov	 rax, QWORD PTR value$121302[rsp]
  00107	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00111	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00116	85 c0		 test	 eax, eax
  00118	75 18		 jne	 SHORT $LN24@getenviron
$LN23@getenviron:

; 512  :             PyErr_SetString(PyExc_TypeError,
; 513  :                 "environment can only contain strings");

  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@PGPLICDA@environment?5can?5only?5contain?5str@
  00121	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00128	e8 00 00 00 00	 call	 PyErr_SetString

; 514  :             goto error;

  0012d	e9 da 03 00 00	 jmp	 $error$121296
$LN24@getenviron:

; 515  :         }
; 516  :         totalsize += PyUnicode_GET_LENGTH(key) + 1;    /* +1 for '=' */

  00132	48 8b 44 24 70	 mov	 rax, QWORD PTR key$121300[rsp]
  00137	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0013b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00141	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00146	85 c0		 test	 eax, eax
  00148	75 1c		 jne	 SHORT $LN33@getenviron
  0014a	41 b8 04 02 00
	00		 mov	 r8d, 516		; 00000204H
  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00164	33 c0		 xor	 eax, eax
$LN33@getenviron:
  00166	48 8b 44 24 70	 mov	 rax, QWORD PTR key$121300[rsp]
  0016b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0016e	c1 e8 07	 shr	 eax, 7
  00171	83 e0 01	 and	 eax, 1
  00174	85 c0		 test	 eax, eax
  00176	75 1c		 jne	 SHORT $LN34@getenviron
  00178	41 b8 04 02 00
	00		 mov	 r8d, 516		; 00000204H
  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  00185	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@GEAALFGA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  0018c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00192	33 c0		 xor	 eax, eax
$LN34@getenviron:
  00194	48 8b 44 24 70	 mov	 rax, QWORD PTR key$121300[rsp]
  00199	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0019d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR totalsize$[rsp]
  001a2	48 8d 44 01 01	 lea	 rax, QWORD PTR [rcx+rax+1]
  001a7	48 89 44 24 60	 mov	 QWORD PTR totalsize$[rsp], rax

; 517  :         totalsize += PyUnicode_GET_LENGTH(value) + 1;  /* +1 for '\0' */

  001ac	48 8b 44 24 68	 mov	 rax, QWORD PTR value$121302[rsp]
  001b1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001b5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001bb	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001c0	85 c0		 test	 eax, eax
  001c2	75 1c		 jne	 SHORT $LN35@getenviron
  001c4	41 b8 05 02 00
	00		 mov	 r8d, 517		; 00000205H
  001ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  001d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@JNPNJFLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
  001d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001de	33 c0		 xor	 eax, eax
$LN35@getenviron:
  001e0	48 8b 44 24 68	 mov	 rax, QWORD PTR value$121302[rsp]
  001e5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001e8	c1 e8 07	 shr	 eax, 7
  001eb	83 e0 01	 and	 eax, 1
  001ee	85 c0		 test	 eax, eax
  001f0	75 1c		 jne	 SHORT $LN36@getenviron
  001f2	41 b8 05 02 00
	00		 mov	 r8d, 517		; 00000205H
  001f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@CGCPMLIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0020c	33 c0		 xor	 eax, eax
$LN36@getenviron:
  0020e	48 8b 44 24 68	 mov	 rax, QWORD PTR value$121302[rsp]
  00213	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00217	48 8b 4c 24 60	 mov	 rcx, QWORD PTR totalsize$[rsp]
  0021c	48 8d 44 01 01	 lea	 rax, QWORD PTR [rcx+rax+1]
  00221	48 89 44 24 60	 mov	 QWORD PTR totalsize$[rsp], rax

; 518  :     }

  00226	e9 74 fe ff ff	 jmp	 $LN26@getenviron
$LN25@getenviron:

; 519  : 
; 520  :     buffer = PyMem_Malloc(totalsize * sizeof(Py_UCS4));

  0022b	48 8b 44 24 60	 mov	 rax, QWORD PTR totalsize$[rsp]
  00230	48 c1 e0 02	 shl	 rax, 2
  00234	48 8b c8	 mov	 rcx, rax
  00237	e8 00 00 00 00	 call	 PyMem_Malloc
  0023c	48 89 44 24 58	 mov	 QWORD PTR buffer$[rsp], rax

; 521  :     if (! buffer)

  00241	48 83 7c 24 58
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00247	75 05		 jne	 SHORT $LN22@getenviron

; 522  :         goto error;

  00249	e9 be 02 00 00	 jmp	 $error$121296
$LN22@getenviron:

; 523  :     p = buffer;

  0024e	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00253	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 524  :     end = buffer + totalsize;

  00258	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  0025d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR totalsize$[rsp]
  00262	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00266	48 89 44 24 48	 mov	 QWORD PTR end$[rsp], rax

; 525  : 
; 526  :     for (i = 0; i < envsize; i++) {

  0026b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00274	eb 0d		 jmp	 SHORT $LN21@getenviron
$LN20@getenviron:
  00276	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  0027b	48 ff c0	 inc	 rax
  0027e	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN21@getenviron:
  00283	48 8b 44 24 30	 mov	 rax, QWORD PTR envsize$[rsp]
  00288	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  0028d	0f 8d cc 01 00
	00		 jge	 $LN19@getenviron

; 527  :         PyObject* key = PyList_GET_ITEM(keys, i);

  00293	48 8b 44 24 50	 mov	 rax, QWORD PTR keys$[rsp]
  00298	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0029c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  002a1	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  002a5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR key$121328[rsp], rax

; 528  :         PyObject* value = PyList_GET_ITEM(values, i);

  002ad	48 8b 44 24 38	 mov	 rax, QWORD PTR values$[rsp]
  002b2	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  002b6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  002bb	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  002bf	48 89 44 24 78	 mov	 QWORD PTR value$121330[rsp], rax

; 529  :         if (!PyUnicode_AsUCS4(key, p, end - p, 0))

  002c4	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  002c9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR end$[rsp]
  002ce	48 2b c8	 sub	 rcx, rax
  002d1	48 8b c1	 mov	 rax, rcx
  002d4	48 c1 f8 02	 sar	 rax, 2
  002d8	45 33 c9	 xor	 r9d, r9d
  002db	4c 8b c0	 mov	 r8, rax
  002de	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  002e3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR key$121328[rsp]
  002eb	e8 00 00 00 00	 call	 PyUnicode_AsUCS4
  002f0	48 85 c0	 test	 rax, rax
  002f3	75 05		 jne	 SHORT $LN18@getenviron

; 530  :             goto error;

  002f5	e9 12 02 00 00	 jmp	 $error$121296
$LN18@getenviron:

; 531  :         p += PyUnicode_GET_LENGTH(key);

  002fa	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR key$121328[rsp]
  00302	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00306	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0030c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00311	85 c0		 test	 eax, eax
  00313	75 1c		 jne	 SHORT $LN37@getenviron
  00315	41 b8 13 02 00
	00		 mov	 r8d, 531		; 00000213H
  0031b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  00322	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  00329	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0032f	33 c0		 xor	 eax, eax
$LN37@getenviron:
  00331	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR key$121328[rsp]
  00339	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0033c	c1 e8 07	 shr	 eax, 7
  0033f	83 e0 01	 and	 eax, 1
  00342	85 c0		 test	 eax, eax
  00344	75 1c		 jne	 SHORT $LN38@getenviron
  00346	41 b8 13 02 00
	00		 mov	 r8d, 531		; 00000213H
  0034c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  00353	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@GEAALFGA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  0035a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00360	33 c0		 xor	 eax, eax
$LN38@getenviron:
  00362	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR key$121328[rsp]
  0036a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0036e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00373	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00377	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 532  :         *p++ = '=';

  0037c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00381	c7 00 3d 00 00
	00		 mov	 DWORD PTR [rax], 61	; 0000003dH
  00387	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0038c	48 83 c0 04	 add	 rax, 4
  00390	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 533  :         if (!PyUnicode_AsUCS4(value, p, end - p, 0))

  00395	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0039a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR end$[rsp]
  0039f	48 2b c8	 sub	 rcx, rax
  003a2	48 8b c1	 mov	 rax, rcx
  003a5	48 c1 f8 02	 sar	 rax, 2
  003a9	45 33 c9	 xor	 r9d, r9d
  003ac	4c 8b c0	 mov	 r8, rax
  003af	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  003b4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value$121330[rsp]
  003b9	e8 00 00 00 00	 call	 PyUnicode_AsUCS4
  003be	48 85 c0	 test	 rax, rax
  003c1	75 05		 jne	 SHORT $LN17@getenviron

; 534  :             goto error;

  003c3	e9 44 01 00 00	 jmp	 $error$121296
$LN17@getenviron:

; 535  :         p += PyUnicode_GET_LENGTH(value);

  003c8	48 8b 44 24 78	 mov	 rax, QWORD PTR value$121330[rsp]
  003cd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003d1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003d7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003dc	85 c0		 test	 eax, eax
  003de	75 1c		 jne	 SHORT $LN39@getenviron
  003e0	41 b8 17 02 00
	00		 mov	 r8d, 535		; 00000217H
  003e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  003ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@JNPNJFLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
  003f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003fa	33 c0		 xor	 eax, eax
$LN39@getenviron:
  003fc	48 8b 44 24 78	 mov	 rax, QWORD PTR value$121330[rsp]
  00401	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00404	c1 e8 07	 shr	 eax, 7
  00407	83 e0 01	 and	 eax, 1
  0040a	85 c0		 test	 eax, eax
  0040c	75 1c		 jne	 SHORT $LN40@getenviron
  0040e	41 b8 17 02 00
	00		 mov	 r8d, 535		; 00000217H
  00414	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  0041b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@CGCPMLIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
  00422	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00428	33 c0		 xor	 eax, eax
$LN40@getenviron:
  0042a	48 8b 44 24 78	 mov	 rax, QWORD PTR value$121330[rsp]
  0042f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00433	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00438	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0043c	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 536  :         *p++ = '\0';

  00441	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00446	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  0044c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00451	48 83 c0 04	 add	 rax, 4
  00455	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 537  :     }

  0045a	e9 17 fe ff ff	 jmp	 $LN20@getenviron
$LN19@getenviron:

; 538  : 
; 539  :     /* add trailing null byte */
; 540  :     *p++ = '\0';

  0045f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00464	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  0046a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0046f	48 83 c0 04	 add	 rax, 4
  00473	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 541  :     assert(p == end);

  00478	48 8b 44 24 48	 mov	 rax, QWORD PTR end$[rsp]
  0047d	48 39 44 24 20	 cmp	 QWORD PTR p$[rsp], rax
  00482	74 1c		 je	 SHORT $LN41@getenviron
  00484	41 b8 1d 02 00
	00		 mov	 r8d, 541		; 0000021dH
  0048a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  00491	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@IBPFHPPD@?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAn?$AAd?$AA?$AA@
  00498	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0049e	33 c0		 xor	 eax, eax
$LN41@getenviron:
$LN16@getenviron:

; 542  : 
; 543  :     Py_XDECREF(keys);

  004a0	48 83 7c 24 50
	00		 cmp	 QWORD PTR keys$[rsp], 0
  004a6	74 0a		 je	 SHORT $LN13@getenviron
  004a8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keys$[rsp]
  004ad	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@getenviron:
  004b2	33 c0		 xor	 eax, eax
  004b4	85 c0		 test	 eax, eax
  004b6	75 e8		 jne	 SHORT $LN16@getenviron
$LN12@getenviron:

; 544  :     Py_XDECREF(values);

  004b8	48 83 7c 24 38
	00		 cmp	 QWORD PTR values$[rsp], 0
  004be	74 0a		 je	 SHORT $LN9@getenviron
  004c0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR values$[rsp]
  004c5	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@getenviron:
  004ca	33 c0		 xor	 eax, eax
  004cc	85 c0		 test	 eax, eax
  004ce	75 e8		 jne	 SHORT $LN12@getenviron

; 545  : 
; 546  :     res = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, buffer, p - buffer);

  004d0	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  004d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  004da	48 2b c8	 sub	 rcx, rax
  004dd	48 8b c1	 mov	 rax, rcx
  004e0	48 c1 f8 02	 sar	 rax, 2
  004e4	4c 8b c0	 mov	 r8, rax
  004e7	48 8b 54 24 58	 mov	 rdx, QWORD PTR buffer$[rsp]
  004ec	b9 04 00 00 00	 mov	 ecx, 4
  004f1	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
  004f6	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax

; 547  :     PyMem_Free(buffer);

  004fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  00500	e8 00 00 00 00	 call	 PyMem_Free

; 548  :     return res;

  00505	48 8b 44 24 28	 mov	 rax, QWORD PTR res$[rsp]
  0050a	eb 3c		 jmp	 SHORT $LN31@getenviron
$error$121296:

; 549  : 
; 550  :  error:
; 551  :     PyMem_Free(buffer);

  0050c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  00511	e8 00 00 00 00	 call	 PyMem_Free
$LN8@getenviron:

; 552  :     Py_XDECREF(keys);

  00516	48 83 7c 24 50
	00		 cmp	 QWORD PTR keys$[rsp], 0
  0051c	74 0a		 je	 SHORT $LN5@getenviron
  0051e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keys$[rsp]
  00523	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@getenviron:
  00528	33 c0		 xor	 eax, eax
  0052a	85 c0		 test	 eax, eax
  0052c	75 e8		 jne	 SHORT $LN8@getenviron
$LN4@getenviron:

; 553  :     Py_XDECREF(values);

  0052e	48 83 7c 24 38
	00		 cmp	 QWORD PTR values$[rsp], 0
  00534	74 0a		 je	 SHORT $LN1@getenviron
  00536	48 8b 4c 24 38	 mov	 rcx, QWORD PTR values$[rsp]
  0053b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@getenviron:
  00540	33 c0		 xor	 eax, eax
  00542	85 c0		 test	 eax, eax
  00544	75 e8		 jne	 SHORT $LN4@getenviron

; 554  :     return NULL;

  00546	33 c0		 xor	 eax, eax
$LN31@getenviron:

; 555  : }

  00548	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0054f	c3		 ret	 0
getenvironment ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@BOJJGNHK@KKKkik?3DuplicateHandle?$AA@	; `string'
EXTRN	__imp_DuplicateHandle:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_DuplicateHandle DD imagerel winapi_DuplicateHandle
	DD	imagerel winapi_DuplicateHandle+217
	DD	imagerel $unwind$winapi_DuplicateHandle
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_DuplicateHandle DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0BH@BOJJGNHK@KKKkik?3DuplicateHandle?$AA@
CONST	SEGMENT
??_C@_0BH@BOJJGNHK@KKKkik?3DuplicateHandle?$AA@ DB 'KKKkik:DuplicateHandl'
	DB	'e', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_DuplicateHandle
_TEXT	SEGMENT
source_handle$ = 64
source_process_handle$ = 72
options$ = 80
inherit_handle$ = 84
target_handle$ = 88
result$ = 96
target_process_handle$ = 104
desired_access$ = 112
_save$121443 = 120
self$ = 144
args$ = 152
winapi_DuplicateHandle PROC				; COMDAT

; 666  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 667  :     HANDLE target_handle;
; 668  :     BOOL result;
; 669  : 
; 670  :     HANDLE source_process_handle;
; 671  :     HANDLE source_handle;
; 672  :     HANDLE target_process_handle;
; 673  :     DWORD desired_access;
; 674  :     BOOL inherit_handle;
; 675  :     DWORD options = 0;

  00011	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR options$[rsp], 0

; 676  : 
; 677  :     if (! PyArg_ParseTuple(args,
; 678  :                            F_HANDLE F_HANDLE F_HANDLE F_DWORD F_BOOL F_DWORD
; 679  :                            ":DuplicateHandle",
; 680  :                            &source_process_handle,
; 681  :                            &source_handle,
; 682  :                            &target_process_handle,
; 683  :                            &desired_access,
; 684  :                            &inherit_handle,
; 685  :                            &options))

  00019	48 8d 44 24 50	 lea	 rax, QWORD PTR options$[rsp]
  0001e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00023	48 8d 44 24 54	 lea	 rax, QWORD PTR inherit_handle$[rsp]
  00028	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0002d	48 8d 44 24 70	 lea	 rax, QWORD PTR desired_access$[rsp]
  00032	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00037	48 8d 44 24 68	 lea	 rax, QWORD PTR target_process_handle$[rsp]
  0003c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00041	4c 8d 4c 24 40	 lea	 r9, QWORD PTR source_handle$[rsp]
  00046	4c 8d 44 24 48	 lea	 r8, QWORD PTR source_process_handle$[rsp]
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@BOJJGNHK@KKKkik?3DuplicateHandle?$AA@
  00052	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005a	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0005f	85 c0		 test	 eax, eax
  00061	75 04		 jne	 SHORT $LN2@winapi_Dup

; 686  :         return NULL;

  00063	33 c0		 xor	 eax, eax
  00065	eb 6a		 jmp	 SHORT $LN3@winapi_Dup
$LN2@winapi_Dup:

; 687  : 
; 688  :     Py_BEGIN_ALLOW_THREADS

  00067	e8 00 00 00 00	 call	 PyEval_SaveThread
  0006c	48 89 44 24 78	 mov	 QWORD PTR _save$121443[rsp], rax

; 689  :     result = DuplicateHandle(
; 690  :         source_process_handle,
; 691  :         source_handle,
; 692  :         target_process_handle,
; 693  :         &target_handle,
; 694  :         desired_access,
; 695  :         inherit_handle,
; 696  :         options
; 697  :     );

  00071	8b 44 24 50	 mov	 eax, DWORD PTR options$[rsp]
  00075	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00079	8b 44 24 54	 mov	 eax, DWORD PTR inherit_handle$[rsp]
  0007d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00081	8b 44 24 70	 mov	 eax, DWORD PTR desired_access$[rsp]
  00085	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00089	4c 8d 4c 24 58	 lea	 r9, QWORD PTR target_handle$[rsp]
  0008e	4c 8b 44 24 68	 mov	 r8, QWORD PTR target_process_handle$[rsp]
  00093	48 8b 54 24 40	 mov	 rdx, QWORD PTR source_handle$[rsp]
  00098	48 8b 4c 24 48	 mov	 rcx, QWORD PTR source_process_handle$[rsp]
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DuplicateHandle
  000a3	89 44 24 60	 mov	 DWORD PTR result$[rsp], eax

; 698  :     Py_END_ALLOW_THREADS

  000a7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _save$121443[rsp]
  000ac	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 699  : 
; 700  :     if (! result)

  000b1	83 7c 24 60 00	 cmp	 DWORD PTR result$[rsp], 0
  000b6	75 0f		 jne	 SHORT $LN1@winapi_Dup

; 701  :         return PyErr_SetFromWindowsErr(GetLastError());

  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000be	8b c8		 mov	 ecx, eax
  000c0	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000c5	eb 0a		 jmp	 SHORT $LN3@winapi_Dup
$LN1@winapi_Dup:

; 702  : 
; 703  :     return HANDLE_TO_PYNUM(target_handle);

  000c7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR target_handle$[rsp]
  000cc	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
$LN3@winapi_Dup:

; 704  : }

  000d1	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000d8	c3		 ret	 0
winapi_DuplicateHandle ENDP
_TEXT	ENDS
PUBLIC	??_C@_01JPJNBJEM@I?$AA@				; `string'
EXTRN	__imp_ExitProcess:PROC
EXTRN	__imp__CrtSetReportMode:PROC
EXTRN	__imp_SetErrorMode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_ExitProcess DD imagerel winapi_ExitProcess
	DD	imagerel winapi_ExitProcess+88
	DD	imagerel $unwind$winapi_ExitProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_ExitProcess DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_01JPJNBJEM@I?$AA@
CONST	SEGMENT
??_C@_01JPJNBJEM@I?$AA@ DB 'I', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_ExitProcess
_TEXT	SEGMENT
uExitCode$ = 32
self$ = 64
args$ = 72
winapi_ExitProcess PROC					; COMDAT

; 708  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 709  :     UINT uExitCode;
; 710  : 
; 711  :     if (!PyArg_ParseTuple(args, F_UINT, &uExitCode))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR uExitCode$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JPJNBJEM@I?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN1@winapi_Exi

; 712  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 27		 jmp	 SHORT $LN2@winapi_Exi
$LN1@winapi_Exi:

; 713  : 
; 714  :     #if defined(Py_DEBUG)
; 715  :         SetErrorMode(SEM_FAILCRITICALERRORS|SEM_NOALIGNMENTFAULTEXCEPT|
; 716  :                      SEM_NOGPFAULTERRORBOX|SEM_NOOPENFILEERRORBOX);

  0002c	b9 07 80 00 00	 mov	 ecx, 32775		; 00008007H
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetErrorMode

; 717  :         _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_DEBUG);

  00037	ba 02 00 00 00	 mov	 edx, 2
  0003c	b9 02 00 00 00	 mov	 ecx, 2
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtSetReportMode

; 718  :     #endif
; 719  : 
; 720  :     ExitProcess(uExitCode);

  00047	8b 4c 24 20	 mov	 ecx, DWORD PTR uExitCode$[rsp]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExitProcess

; 721  : 
; 722  :     return NULL;

  00051	33 c0		 xor	 eax, eax
$LN2@winapi_Exi:
$LN3@winapi_Exi:

; 723  : }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
winapi_ExitProcess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@JFGKBNB@?3GetCurrentProcess?$AA@	; `string'
EXTRN	__imp_GetCurrentProcess:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_GetCurrentProcess DD imagerel winapi_GetCurrentProcess
	DD	imagerel winapi_GetCurrentProcess+58
	DD	imagerel $unwind$winapi_GetCurrentProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetCurrentProcess DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BD@JFGKBNB@?3GetCurrentProcess?$AA@
CONST	SEGMENT
??_C@_0BD@JFGKBNB@?3GetCurrentProcess?$AA@ DB ':GetCurrentProcess', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_GetCurrentProcess
_TEXT	SEGMENT
self$ = 48
args$ = 56
winapi_GetCurrentProcess PROC				; COMDAT

; 732  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 733  :     if (! PyArg_ParseTuple(args, ":GetCurrentProcess"))

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@JFGKBNB@?3GetCurrentProcess?$AA@
  00015	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  0001a	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001f	85 c0		 test	 eax, eax
  00021	75 04		 jne	 SHORT $LN1@winapi_Get

; 734  :         return NULL;

  00023	33 c0		 xor	 eax, eax
  00025	eb 0e		 jmp	 SHORT $LN2@winapi_Get
$LN1@winapi_Get:

; 735  : 
; 736  :     return HANDLE_TO_PYNUM(GetCurrentProcess());

  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
$LN2@winapi_Get:

; 737  : }

  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
winapi_GetCurrentProcess ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@HCMDMFBA@K?3GetExitCodeProcess?$AA@	; `string'
EXTRN	PyLong_FromUnsignedLong:PROC
EXTRN	__imp_GetExitCodeProcess:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_GetExitCodeProcess DD imagerel winapi_GetExitCodeProcess
	DD	imagerel winapi_GetExitCodeProcess+100
	DD	imagerel $unwind$winapi_GetExitCodeProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetExitCodeProcess DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BF@HCMDMFBA@K?3GetExitCodeProcess?$AA@
CONST	SEGMENT
??_C@_0BF@HCMDMFBA@K?3GetExitCodeProcess?$AA@ DB 'K:GetExitCodeProcess', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_GetExitCodeProcess
_TEXT	SEGMENT
exit_code$ = 32
process$ = 40
result$ = 48
self$ = 80
args$ = 88
winapi_GetExitCodeProcess PROC				; COMDAT

; 746  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 747  :     DWORD exit_code;
; 748  :     BOOL result;
; 749  : 
; 750  :     HANDLE process;
; 751  :     if (! PyArg_ParseTuple(args, F_HANDLE ":GetExitCodeProcess", &process))

  0000e	4c 8d 44 24 28	 lea	 r8, QWORD PTR process$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@HCMDMFBA@K?3GetExitCodeProcess?$AA@
  0001a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN2@winapi_Get@2

; 752  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 33		 jmp	 SHORT $LN3@winapi_Get@2
$LN2@winapi_Get@2:

; 753  : 
; 754  :     result = GetExitCodeProcess(process, &exit_code);

  0002c	48 8d 54 24 20	 lea	 rdx, QWORD PTR exit_code$[rsp]
  00031	48 8b 4c 24 28	 mov	 rcx, QWORD PTR process$[rsp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetExitCodeProcess
  0003c	89 44 24 30	 mov	 DWORD PTR result$[rsp], eax

; 755  : 
; 756  :     if (! result)

  00040	83 7c 24 30 00	 cmp	 DWORD PTR result$[rsp], 0
  00045	75 0f		 jne	 SHORT $LN1@winapi_Get@2

; 757  :         return PyErr_SetFromWindowsErr(GetLastError());

  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00054	eb 09		 jmp	 SHORT $LN3@winapi_Get@2
$LN1@winapi_Get@2:

; 758  : 
; 759  :     return PyLong_FromUnsignedLong(exit_code);

  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR exit_code$[rsp]
  0005a	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
$LN3@winapi_Get@2:

; 760  : }

  0005f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00063	c3		 ret	 0
winapi_GetExitCodeProcess ENDP
_TEXT	ENDS
PUBLIC	??_C@_01DICPFPGM@k?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_GetLastError DD imagerel winapi_GetLastError
	DD	imagerel winapi_GetLastError+39
	DD	imagerel $unwind$winapi_GetLastError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetLastError DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_01DICPFPGM@k?$AA@
CONST	SEGMENT
??_C@_01DICPFPGM@k?$AA@ DB 'k', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_GetLastError
_TEXT	SEGMENT
self$ = 48
args$ = 56
winapi_GetLastError PROC				; COMDAT

; 764  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 765  :     return Py_BuildValue(F_DWORD, GetLastError());

  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00014	8b d0		 mov	 edx, eax
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0001d	e8 00 00 00 00	 call	 Py_BuildValue

; 766  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
winapi_GetLastError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NBAMEAJN@K?3GetModuleFileName?$AA@	; `string'
EXTRN	PyUnicode_FromWideChar:PROC
EXTRN	__imp_wcslen:PROC
EXTRN	__imp_GetModuleFileNameW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_GetModuleFileName DD imagerel winapi_GetModuleFileName
	DD	imagerel winapi_GetModuleFileName+140
	DD	imagerel $unwind$winapi_GetModuleFileName
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetModuleFileName DD 021101H
	DD	0490111H
xdata	ENDS
;	COMDAT ??_C@_0BE@NBAMEAJN@K?3GetModuleFileName?$AA@
CONST	SEGMENT
??_C@_0BE@NBAMEAJN@K?3GetModuleFileName?$AA@ DB 'K:GetModuleFileName', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_GetModuleFileName
_TEXT	SEGMENT
module$ = 32
result$ = 40
filename$ = 48
self$ = 592
args$ = 600
winapi_GetModuleFileName PROC				; COMDAT

; 782  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H

; 783  :     BOOL result;
; 784  :     HMODULE module;
; 785  :     WCHAR filename[MAX_PATH];
; 786  : 
; 787  :     if (! PyArg_ParseTuple(args, F_HANDLE ":GetModuleFileName",
; 788  :                            &module))

  00011	4c 8d 44 24 20	 lea	 r8, QWORD PTR module$[rsp]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NBAMEAJN@K?3GetModuleFileName?$AA@
  0001d	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00025	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002a	85 c0		 test	 eax, eax
  0002c	75 04		 jne	 SHORT $LN2@winapi_Get@3

; 789  :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	eb 52		 jmp	 SHORT $LN3@winapi_Get@3
$LN2@winapi_Get@3:

; 790  : 
; 791  :     result = GetModuleFileNameW(module, filename, MAX_PATH);

  00032	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00038	48 8d 54 24 30	 lea	 rdx, QWORD PTR filename$[rsp]
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR module$[rsp]
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleFileNameW
  00048	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax

; 792  :     filename[MAX_PATH-1] = '\0';

  0004c	33 c0		 xor	 eax, eax
  0004e	66 89 84 24 36
	02 00 00	 mov	 WORD PTR filename$[rsp+518], ax

; 793  : 
; 794  :     if (! result)

  00056	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  0005b	75 0f		 jne	 SHORT $LN1@winapi_Get@3

; 795  :         return PyErr_SetFromWindowsErr(GetLastError());

  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00063	8b c8		 mov	 ecx, eax
  00065	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0006a	eb 18		 jmp	 SHORT $LN3@winapi_Get@3
$LN1@winapi_Get@3:

; 796  : 
; 797  :     return PyUnicode_FromWideChar(filename, wcslen(filename));

  0006c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR filename$[rsp]
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  00077	48 8b d0	 mov	 rdx, rax
  0007a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR filename$[rsp]
  0007f	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
$LN3@winapi_Get@3:

; 798  : }

  00084	48 81 c4 48 02
	00 00		 add	 rsp, 584		; 00000248H
  0008b	c3		 ret	 0
winapi_GetModuleFileName ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@CHHDMOFM@k?3GetStdHandle?$AA@		; `string'
EXTRN	__imp_GetStdHandle:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_GetStdHandle DD imagerel winapi_GetStdHandle
	DD	imagerel winapi_GetStdHandle+146
	DD	imagerel $unwind$winapi_GetStdHandle
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetStdHandle DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0P@CHHDMOFM@k?3GetStdHandle?$AA@
CONST	SEGMENT
??_C@_0P@CHHDMOFM@k?3GetStdHandle?$AA@ DB 'k:GetStdHandle', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_GetStdHandle
_TEXT	SEGMENT
std_handle$ = 32
handle$ = 40
_save$121515 = 48
self$ = 80
args$ = 88
winapi_GetStdHandle PROC				; COMDAT

; 809  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 810  :     HANDLE handle;
; 811  :     DWORD std_handle;
; 812  : 
; 813  :     if (! PyArg_ParseTuple(args, F_DWORD ":GetStdHandle", &std_handle))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR std_handle$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@CHHDMOFM@k?3GetStdHandle?$AA@
  0001a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN3@winapi_Get@4

; 814  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 61		 jmp	 SHORT $LN4@winapi_Get@4
$LN3@winapi_Get@4:

; 815  : 
; 816  :     Py_BEGIN_ALLOW_THREADS

  0002c	e8 00 00 00 00	 call	 PyEval_SaveThread
  00031	48 89 44 24 30	 mov	 QWORD PTR _save$121515[rsp], rax

; 817  :     handle = GetStdHandle(std_handle);

  00036	8b 4c 24 20	 mov	 ecx, DWORD PTR std_handle$[rsp]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle
  00040	48 89 44 24 28	 mov	 QWORD PTR handle$[rsp], rax

; 818  :     Py_END_ALLOW_THREADS

  00045	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _save$121515[rsp]
  0004a	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 819  : 
; 820  :     if (handle == INVALID_HANDLE_VALUE)

  0004f	48 83 7c 24 28
	ff		 cmp	 QWORD PTR handle$[rsp], -1
  00055	75 0f		 jne	 SHORT $LN2@winapi_Get@4

; 821  :         return PyErr_SetFromWindowsErr(GetLastError());

  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0005d	8b c8		 mov	 ecx, eax
  0005f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00064	eb 27		 jmp	 SHORT $LN4@winapi_Get@4
$LN2@winapi_Get@4:

; 822  : 
; 823  :     if (! handle) {

  00066	48 83 7c 24 28
	00		 cmp	 QWORD PTR handle$[rsp], 0
  0006c	75 15		 jne	 SHORT $LN1@winapi_Get@4

; 824  :         Py_INCREF(Py_None);

  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00075	e8 00 00 00 00	 call	 _Py_IncRef

; 825  :         return Py_None;

  0007a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00081	eb 0a		 jmp	 SHORT $LN4@winapi_Get@4
$LN1@winapi_Get@4:

; 826  :     }
; 827  : 
; 828  :     /* note: returns integer, not handle object */
; 829  :     return HANDLE_TO_PYNUM(handle);

  00083	48 8b 4c 24 28	 mov	 rcx, QWORD PTR handle$[rsp]
  00088	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
$LN4@winapi_Get@4:

; 830  : }

  0008d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00091	c3		 ret	 0
winapi_GetStdHandle ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@FDECGLBP@?3GetVersion?$AA@		; `string'
EXTRN	__imp_GetVersion:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_GetVersion DD imagerel winapi_GetVersion
	DD	imagerel winapi_GetVersion+57
	DD	imagerel $unwind$winapi_GetVersion
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_GetVersion DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0M@FDECGLBP@?3GetVersion?$AA@
CONST	SEGMENT
??_C@_0M@FDECGLBP@?3GetVersion?$AA@ DB ':GetVersion', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_GetVersion
_TEXT	SEGMENT
self$ = 48
args$ = 56
winapi_GetVersion PROC					; COMDAT

; 839  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 840  :     if (! PyArg_ParseTuple(args, ":GetVersion"))

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@FDECGLBP@?3GetVersion?$AA@
  00015	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  0001a	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0001f	85 c0		 test	 eax, eax
  00021	75 04		 jne	 SHORT $LN1@winapi_Get@5

; 841  :         return NULL;

  00023	33 c0		 xor	 eax, eax
  00025	eb 0d		 jmp	 SHORT $LN2@winapi_Get@5
$LN1@winapi_Get@5:

; 842  : 
; 843  :     return PyLong_FromUnsignedLong(GetVersion());

  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetVersion
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
$LN2@winapi_Get@5:

; 844  : }

  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
winapi_GetVersion ENDP
_TEXT	ENDS
PUBLIC	??_C@_03PDJDBCCC@kik?$AA@			; `string'
EXTRN	__imp_OpenProcess:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_OpenProcess DD imagerel winapi_OpenProcess
	DD	imagerel winapi_OpenProcess+122
	DD	imagerel $unwind$winapi_OpenProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_OpenProcess DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_03PDJDBCCC@kik?$AA@
CONST	SEGMENT
??_C@_03PDJDBCCC@kik?$AA@ DB 'kik', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_OpenProcess
_TEXT	SEGMENT
dwProcessId$ = 48
bInheritHandle$ = 52
dwDesiredAccess$ = 56
handle$ = 64
self$ = 96
args$ = 104
winapi_OpenProcess PROC					; COMDAT

; 848  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 849  :     DWORD dwDesiredAccess;
; 850  :     BOOL bInheritHandle;
; 851  :     DWORD dwProcessId;
; 852  :     HANDLE handle;
; 853  : 
; 854  :     if (!PyArg_ParseTuple(args, F_DWORD F_BOOL F_DWORD,
; 855  :                           &dwDesiredAccess, &bInheritHandle, &dwProcessId))

  0000e	48 8d 44 24 30	 lea	 rax, QWORD PTR dwProcessId$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00018	4c 8d 4c 24 34	 lea	 r9, QWORD PTR bInheritHandle$[rsp]
  0001d	4c 8d 44 24 38	 lea	 r8, QWORD PTR dwDesiredAccess$[rsp]
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PDJDBCCC@kik?$AA@
  00029	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0002e	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00033	85 c0		 test	 eax, eax
  00035	75 04		 jne	 SHORT $LN2@winapi_Ope

; 856  :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	eb 3a		 jmp	 SHORT $LN3@winapi_Ope
$LN2@winapi_Ope:

; 857  : 
; 858  :     handle = OpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);

  0003b	44 8b 44 24 30	 mov	 r8d, DWORD PTR dwProcessId$[rsp]
  00040	8b 54 24 34	 mov	 edx, DWORD PTR bInheritHandle$[rsp]
  00044	8b 4c 24 38	 mov	 ecx, DWORD PTR dwDesiredAccess$[rsp]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OpenProcess
  0004e	48 89 44 24 40	 mov	 QWORD PTR handle$[rsp], rax

; 859  :     if (handle == NULL)

  00053	48 83 7c 24 40
	00		 cmp	 QWORD PTR handle$[rsp], 0
  00059	75 09		 jne	 SHORT $LN1@winapi_Ope

; 860  :         return PyErr_SetFromWindowsErr(0);

  0005b	33 c9		 xor	 ecx, ecx
  0005d	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00062	eb 11		 jmp	 SHORT $LN3@winapi_Ope
$LN1@winapi_Ope:

; 861  : 
; 862  :     return Py_BuildValue(F_HANDLE, handle);

  00064	48 8b 54 24 40	 mov	 rdx, QWORD PTR handle$[rsp]
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01KNKLHLMO@K?$AA@
  00070	e8 00 00 00 00	 call	 Py_BuildValue
$LN3@winapi_Ope:

; 863  : }

  00075	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00079	c3		 ret	 0
winapi_OpenProcess ENDP
_TEXT	ENDS
PUBLIC	??_C@_02PDIHAGKM@ii?$AA@			; `string'
PUBLIC	??_C@_03FGEJCPKM@Nii?$AA@			; `string'
PUBLIC	??_C@_1CG@OIDFLHOM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0O@LFIBEFCP@negative?5size?$AA@		; `string'
PUBLIC	??_C@_0BC@GOHLNLNE@K?$HMi?3PeekNamedPipe?$AA@	; `string'
EXTRN	__imp_PeekNamedPipe:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_PeekNamedPipe DD imagerel winapi_PeekNamedPipe
	DD	imagerel winapi_PeekNamedPipe+486
	DD	imagerel $unwind$winapi_PeekNamedPipe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_PeekNamedPipe DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_02PDIHAGKM@ii?$AA@
CONST	SEGMENT
??_C@_02PDIHAGKM@ii?$AA@ DB 'ii', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FGEJCPKM@Nii?$AA@
CONST	SEGMENT
??_C@_03FGEJCPKM@Nii?$AA@ DB 'Nii', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@OIDFLHOM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@OIDFLHOM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'b', 00H, 'u', 00H, 'f', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LFIBEFCP@negative?5size?$AA@
CONST	SEGMENT
??_C@_0O@LFIBEFCP@negative?5size?$AA@ DB 'negative size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GOHLNLNE@K?$HMi?3PeekNamedPipe?$AA@
CONST	SEGMENT
??_C@_0BC@GOHLNLNE@K?$HMi?3PeekNamedPipe?$AA@ DB 'K|i:PeekNamedPipe', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_PeekNamedPipe
_TEXT	SEGMENT
nleft$ = 48
navail$ = 52
size$ = 56
ret$ = 60
buf$ = 64
nread$ = 72
handle$ = 80
_save$121571 = 88
_save$121582 = 96
self$ = 128
args$ = 136
winapi_PeekNamedPipe PROC				; COMDAT

; 867  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 868  :     HANDLE handle;
; 869  :     int size = 0;

  0000e	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR size$[rsp], 0

; 870  :     PyObject *buf = NULL;

  00016	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buf$[rsp], 0

; 871  :     DWORD nread, navail, nleft;
; 872  :     BOOL ret;
; 873  : 
; 874  :     if (!PyArg_ParseTuple(args, F_HANDLE "|i:PeekNamedPipe" , &handle, &size))

  0001f	4c 8d 4c 24 38	 lea	 r9, QWORD PTR size$[rsp]
  00024	4c 8d 44 24 50	 lea	 r8, QWORD PTR handle$[rsp]
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@GOHLNLNE@K?$HMi?3PeekNamedPipe?$AA@
  00030	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00038	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0003d	85 c0		 test	 eax, eax
  0003f	75 07		 jne	 SHORT $LN8@winapi_Pee

; 875  :         return NULL;

  00041	33 c0		 xor	 eax, eax
  00043	e9 99 01 00 00	 jmp	 $LN9@winapi_Pee
$LN8@winapi_Pee:

; 876  : 
; 877  :     if (size < 0) {

  00048	83 7c 24 38 00	 cmp	 DWORD PTR size$[rsp], 0
  0004d	7d 1a		 jge	 SHORT $LN7@winapi_Pee

; 878  :         PyErr_SetString(PyExc_ValueError, "negative size");

  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LFIBEFCP@negative?5size?$AA@
  00056	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0005d	e8 00 00 00 00	 call	 PyErr_SetString

; 879  :         return NULL;

  00062	33 c0		 xor	 eax, eax
  00064	e9 78 01 00 00	 jmp	 $LN9@winapi_Pee
$LN7@winapi_Pee:

; 880  :     }
; 881  : 
; 882  :     if (size) {

  00069	83 7c 24 38 00	 cmp	 DWORD PTR size$[rsp], 0
  0006e	0f 84 02 01 00
	00		 je	 $LN6@winapi_Pee

; 883  :         buf = PyBytes_FromStringAndSize(NULL, size);

  00074	48 63 44 24 38	 movsxd	 rax, DWORD PTR size$[rsp]
  00079	48 8b d0	 mov	 rdx, rax
  0007c	33 c9		 xor	 ecx, ecx
  0007e	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00083	48 89 44 24 40	 mov	 QWORD PTR buf$[rsp], rax

; 884  :         if (!buf)

  00088	48 83 7c 24 40
	00		 cmp	 QWORD PTR buf$[rsp], 0
  0008e	75 07		 jne	 SHORT $LN5@winapi_Pee

; 885  :             return NULL;

  00090	33 c0		 xor	 eax, eax
  00092	e9 4a 01 00 00	 jmp	 $LN9@winapi_Pee
$LN5@winapi_Pee:

; 886  :         Py_BEGIN_ALLOW_THREADS

  00097	e8 00 00 00 00	 call	 PyEval_SaveThread
  0009c	48 89 44 24 58	 mov	 QWORD PTR _save$121571[rsp], rax

; 887  :         ret = PeekNamedPipe(handle, PyBytes_AS_STRING(buf), size, &nread,
; 888  :                             &navail, &nleft);

  000a1	48 8b 44 24 40	 mov	 rax, QWORD PTR buf$[rsp]
  000a6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000aa	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b0	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000b5	85 c0		 test	 eax, eax
  000b7	75 1c		 jne	 SHORT $LN11@winapi_Pee
  000b9	41 b8 77 03 00
	00		 mov	 r8d, 887		; 00000377H
  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@OIDFLHOM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d3	33 c0		 xor	 eax, eax
$LN11@winapi_Pee:
  000d5	48 8b 44 24 40	 mov	 rax, QWORD PTR buf$[rsp]
  000da	48 83 c0 78	 add	 rax, 120		; 00000078H
  000de	48 8d 4c 24 30	 lea	 rcx, QWORD PTR nleft$[rsp]
  000e3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e8	48 8d 4c 24 34	 lea	 rcx, QWORD PTR navail$[rsp]
  000ed	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000f2	4c 8d 4c 24 48	 lea	 r9, QWORD PTR nread$[rsp]
  000f7	44 8b 44 24 38	 mov	 r8d, DWORD PTR size$[rsp]
  000fc	48 8b d0	 mov	 rdx, rax
  000ff	48 8b 4c 24 50	 mov	 rcx, QWORD PTR handle$[rsp]
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekNamedPipe
  0010a	89 44 24 3c	 mov	 DWORD PTR ret$[rsp], eax

; 889  :         Py_END_ALLOW_THREADS

  0010e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _save$121571[rsp]
  00113	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 890  :         if (!ret) {

  00118	83 7c 24 3c 00	 cmp	 DWORD PTR ret$[rsp], 0
  0011d	75 1d		 jne	 SHORT $LN4@winapi_Pee

; 891  :             Py_DECREF(buf);

  0011f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  00124	e8 00 00 00 00	 call	 _Py_DecRef

; 892  :             return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  00129	33 d2		 xor	 edx, edx
  0012b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00132	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  00137	e9 a5 00 00 00	 jmp	 $LN9@winapi_Pee
$LN4@winapi_Pee:

; 893  :         }
; 894  :         if (_PyBytes_Resize(&buf, nread))

  0013c	8b 44 24 48	 mov	 eax, DWORD PTR nread$[rsp]
  00140	8b d0		 mov	 edx, eax
  00142	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00147	e8 00 00 00 00	 call	 _PyBytes_Resize
  0014c	85 c0		 test	 eax, eax
  0014e	74 07		 je	 SHORT $LN3@winapi_Pee

; 895  :             return NULL;

  00150	33 c0		 xor	 eax, eax
  00152	e9 8a 00 00 00	 jmp	 $LN9@winapi_Pee
$LN3@winapi_Pee:

; 896  :         return Py_BuildValue("Nii", buf, navail, nleft);

  00157	44 8b 4c 24 30	 mov	 r9d, DWORD PTR nleft$[rsp]
  0015c	44 8b 44 24 34	 mov	 r8d, DWORD PTR navail$[rsp]
  00161	48 8b 54 24 40	 mov	 rdx, QWORD PTR buf$[rsp]
  00166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FGEJCPKM@Nii?$AA@
  0016d	e8 00 00 00 00	 call	 Py_BuildValue
  00172	eb 6d		 jmp	 SHORT $LN9@winapi_Pee

; 897  :     }
; 898  :     else {

  00174	eb 6b		 jmp	 SHORT $LN2@winapi_Pee
$LN6@winapi_Pee:

; 899  :         Py_BEGIN_ALLOW_THREADS

  00176	e8 00 00 00 00	 call	 PyEval_SaveThread
  0017b	48 89 44 24 60	 mov	 QWORD PTR _save$121582[rsp], rax

; 900  :         ret = PeekNamedPipe(handle, NULL, 0, NULL, &navail, &nleft);

  00180	48 8d 44 24 30	 lea	 rax, QWORD PTR nleft$[rsp]
  00185	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0018a	48 8d 44 24 34	 lea	 rax, QWORD PTR navail$[rsp]
  0018f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00194	45 33 c9	 xor	 r9d, r9d
  00197	45 33 c0	 xor	 r8d, r8d
  0019a	33 d2		 xor	 edx, edx
  0019c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR handle$[rsp]
  001a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekNamedPipe
  001a7	89 44 24 3c	 mov	 DWORD PTR ret$[rsp], eax

; 901  :         Py_END_ALLOW_THREADS

  001ab	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _save$121582[rsp]
  001b0	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 902  :         if (!ret) {

  001b5	83 7c 24 3c 00	 cmp	 DWORD PTR ret$[rsp], 0
  001ba	75 10		 jne	 SHORT $LN1@winapi_Pee

; 903  :             return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  001bc	33 d2		 xor	 edx, edx
  001be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  001c5	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  001ca	eb 15		 jmp	 SHORT $LN9@winapi_Pee
$LN1@winapi_Pee:

; 904  :         }
; 905  :         return Py_BuildValue("ii", navail, nleft);

  001cc	44 8b 44 24 30	 mov	 r8d, DWORD PTR nleft$[rsp]
  001d1	8b 54 24 34	 mov	 edx, DWORD PTR navail$[rsp]
  001d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02PDIHAGKM@ii?$AA@
  001dc	e8 00 00 00 00	 call	 Py_BuildValue
$LN2@winapi_Pee:
$LN9@winapi_Pee:

; 906  :     }
; 907  : }

  001e1	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001e5	c3		 ret	 0
winapi_PeekNamedPipe ENDP
_TEXT	ENDS
PUBLIC	??_C@_02FLABHCGL@NI?$AA@			; `string'
PUBLIC	??_C@_0O@GOHKJJFP@Ki?$HMi?3ReadFile?$AA@	; `string'
EXTRN	__imp_ReadFile:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_ReadFile DD imagerel winapi_ReadFile
	DD	imagerel winapi_ReadFile+609
	DD	imagerel $unwind$winapi_ReadFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_ReadFile DD 021601H
	DD	0130116H
xdata	ENDS
;	COMDAT ??_C@_02FLABHCGL@NI?$AA@
CONST	SEGMENT
??_C@_02FLABHCGL@NI?$AA@ DB 'NI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GOHKJJFP@Ki?$HMi?3ReadFile?$AA@
CONST	SEGMENT
??_C@_0O@GOHKJJFP@Ki?$HMi?3ReadFile?$AA@ DB 'Ki|i:ReadFile', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_ReadFile
_TEXT	SEGMENT
size$ = 64
use_overlapped$ = 68
ret$ = 72
buf$ = 80
nread$ = 88
err$ = 92
overlapped$ = 96
handle$ = 104
_save$121618 = 112
tv88 = 120
tv138 = 128
self$ = 160
args$ = 168
kwds$ = 176
winapi_ReadFile PROC					; COMDAT

; 911  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 912  :     HANDLE handle;
; 913  :     int size;
; 914  :     DWORD nread;
; 915  :     PyObject *buf;
; 916  :     BOOL ret;
; 917  :     int use_overlapped = 0;

  00016	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR use_overlapped$[rsp], 0

; 918  :     DWORD err;
; 919  :     OverlappedObject *overlapped = NULL;

  0001e	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR overlapped$[rsp], 0

; 920  :     static char *kwlist[] = {"handle", "size", "overlapped", NULL};
; 921  : 
; 922  :     if (!PyArg_ParseTupleAndKeywords(args, kwds,
; 923  :                                      F_HANDLE "i|i:ReadFile", kwlist,
; 924  :                                      &handle, &size, &use_overlapped))

  00027	48 8d 44 24 44	 lea	 rax, QWORD PTR use_overlapped$[rsp]
  0002c	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00031	48 8d 44 24 40	 lea	 rax, QWORD PTR size$[rsp]
  00036	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0003b	48 8d 44 24 68	 lea	 rax, QWORD PTR handle$[rsp]
  00040	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00045	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??winapi_ReadFile@@9@9
  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@GOHKJJFP@Ki?$HMi?3ReadFile?$AA@
  00053	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0005b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00063	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00068	85 c0		 test	 eax, eax
  0006a	75 07		 jne	 SHORT $LN11@winapi_Rea

; 925  :         return NULL;

  0006c	33 c0		 xor	 eax, eax
  0006e	e9 e6 01 00 00	 jmp	 $LN12@winapi_Rea
$LN11@winapi_Rea:

; 926  : 
; 927  :     buf = PyBytes_FromStringAndSize(NULL, size);

  00073	48 63 44 24 40	 movsxd	 rax, DWORD PTR size$[rsp]
  00078	48 8b d0	 mov	 rdx, rax
  0007b	33 c9		 xor	 ecx, ecx
  0007d	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00082	48 89 44 24 50	 mov	 QWORD PTR buf$[rsp], rax

; 928  :     if (!buf)

  00087	48 83 7c 24 50
	00		 cmp	 QWORD PTR buf$[rsp], 0
  0008d	75 07		 jne	 SHORT $LN10@winapi_Rea

; 929  :         return NULL;

  0008f	33 c0		 xor	 eax, eax
  00091	e9 c3 01 00 00	 jmp	 $LN12@winapi_Rea
$LN10@winapi_Rea:

; 930  :     if (use_overlapped) {

  00096	83 7c 24 44 00	 cmp	 DWORD PTR use_overlapped$[rsp], 0
  0009b	74 39		 je	 SHORT $LN9@winapi_Rea

; 931  :         overlapped = new_overlapped(handle);

  0009d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR handle$[rsp]
  000a2	e8 00 00 00 00	 call	 new_overlapped
  000a7	48 89 44 24 60	 mov	 QWORD PTR overlapped$[rsp], rax

; 932  :         if (!overlapped) {

  000ac	48 83 7c 24 60
	00		 cmp	 QWORD PTR overlapped$[rsp], 0
  000b2	75 11		 jne	 SHORT $LN8@winapi_Rea

; 933  :             Py_DECREF(buf);

  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  000b9	e8 00 00 00 00	 call	 _Py_DecRef

; 934  :             return NULL;

  000be	33 c0		 xor	 eax, eax
  000c0	e9 94 01 00 00	 jmp	 $LN12@winapi_Rea
$LN8@winapi_Rea:

; 935  :         }
; 936  :         /* Steals reference to buf */
; 937  :         overlapped->read_buffer = buf;

  000c5	48 8b 44 24 60	 mov	 rax, QWORD PTR overlapped$[rsp]
  000ca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  000cf	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx
$LN9@winapi_Rea:

; 938  :     }
; 939  : 
; 940  :     Py_BEGIN_ALLOW_THREADS

  000d6	e8 00 00 00 00	 call	 PyEval_SaveThread
  000db	48 89 44 24 70	 mov	 QWORD PTR _save$121618[rsp], rax

; 941  :     ret = ReadFile(handle, PyBytes_AS_STRING(buf), size, &nread,
; 942  :                    overlapped ? &overlapped->overlapped : NULL);

  000e0	48 83 7c 24 60
	00		 cmp	 QWORD PTR overlapped$[rsp], 0
  000e6	74 10		 je	 SHORT $LN14@winapi_Rea
  000e8	48 8b 44 24 60	 mov	 rax, QWORD PTR overlapped$[rsp]
  000ed	48 83 c0 60	 add	 rax, 96			; 00000060H
  000f1	48 89 44 24 78	 mov	 QWORD PTR tv88[rsp], rax
  000f6	eb 09		 jmp	 SHORT $LN15@winapi_Rea
$LN14@winapi_Rea:
  000f8	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tv88[rsp], 0
$LN15@winapi_Rea:
  00101	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  00106	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00110	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00115	85 c0		 test	 eax, eax
  00117	75 1c		 jne	 SHORT $LN16@winapi_Rea
  00119	41 b8 ad 03 00
	00		 mov	 r8d, 941		; 000003adH
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@OIDFLHOM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?$AA@
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00133	33 c0		 xor	 eax, eax
$LN16@winapi_Rea:
  00135	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  0013a	48 83 c0 78	 add	 rax, 120		; 00000078H
  0013e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv88[rsp]
  00143	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00148	4c 8d 4c 24 58	 lea	 r9, QWORD PTR nread$[rsp]
  0014d	44 8b 44 24 40	 mov	 r8d, DWORD PTR size$[rsp]
  00152	48 8b d0	 mov	 rdx, rax
  00155	48 8b 4c 24 68	 mov	 rcx, QWORD PTR handle$[rsp]
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile
  00160	89 44 24 48	 mov	 DWORD PTR ret$[rsp], eax

; 943  :     Py_END_ALLOW_THREADS

  00164	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _save$121618[rsp]
  00169	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 944  : 
; 945  :     err = ret ? 0 : GetLastError();

  0016e	83 7c 24 48 00	 cmp	 DWORD PTR ret$[rsp], 0
  00173	74 0d		 je	 SHORT $LN17@winapi_Rea
  00175	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv138[rsp], 0
  00180	eb 0d		 jmp	 SHORT $LN18@winapi_Rea
$LN17@winapi_Rea:
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00188	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv138[rsp], eax
$LN18@winapi_Rea:
  0018f	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv138[rsp]
  00196	89 44 24 5c	 mov	 DWORD PTR err$[rsp], eax

; 946  : 
; 947  :     if (overlapped) {

  0019a	48 83 7c 24 60
	00		 cmp	 QWORD PTR overlapped$[rsp], 0
  001a0	74 5e		 je	 SHORT $LN7@winapi_Rea

; 948  :         if (!ret) {

  001a2	83 7c 24 48 00	 cmp	 DWORD PTR ret$[rsp], 0
  001a7	75 3f		 jne	 SHORT $LN6@winapi_Rea

; 949  :             if (err == ERROR_IO_PENDING)

  001a9	81 7c 24 5c e5
	03 00 00	 cmp	 DWORD PTR err$[rsp], 997 ; 000003e5H
  001b1	75 11		 jne	 SHORT $LN5@winapi_Rea

; 950  :                 overlapped->pending = 1;

  001b3	48 8b 44 24 60	 mov	 rax, QWORD PTR overlapped$[rsp]
  001b8	c7 80 88 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+136], 1
  001c2	eb 24		 jmp	 SHORT $LN4@winapi_Rea
$LN5@winapi_Rea:

; 951  :             else if (err != ERROR_MORE_DATA) {

  001c4	81 7c 24 5c ea
	00 00 00	 cmp	 DWORD PTR err$[rsp], 234 ; 000000eaH
  001cc	74 1a		 je	 SHORT $LN3@winapi_Rea

; 952  :                 Py_DECREF(overlapped);

  001ce	48 8b 4c 24 60	 mov	 rcx, QWORD PTR overlapped$[rsp]
  001d3	e8 00 00 00 00	 call	 _Py_DecRef

; 953  :                 return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  001d8	33 d2		 xor	 edx, edx
  001da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  001e1	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  001e6	eb 71		 jmp	 SHORT $LN12@winapi_Rea
$LN3@winapi_Rea:
$LN4@winapi_Rea:
$LN6@winapi_Rea:

; 954  :             }
; 955  :         }
; 956  :         return Py_BuildValue("NI", (PyObject *) overlapped, err);

  001e8	44 8b 44 24 5c	 mov	 r8d, DWORD PTR err$[rsp]
  001ed	48 8b 54 24 60	 mov	 rdx, QWORD PTR overlapped$[rsp]
  001f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FLABHCGL@NI?$AA@
  001f9	e8 00 00 00 00	 call	 Py_BuildValue
  001fe	eb 59		 jmp	 SHORT $LN12@winapi_Rea
$LN7@winapi_Rea:

; 957  :     }
; 958  : 
; 959  :     if (!ret && err != ERROR_MORE_DATA) {

  00200	83 7c 24 48 00	 cmp	 DWORD PTR ret$[rsp], 0
  00205	75 24		 jne	 SHORT $LN2@winapi_Rea
  00207	81 7c 24 5c ea
	00 00 00	 cmp	 DWORD PTR err$[rsp], 234 ; 000000eaH
  0020f	74 1a		 je	 SHORT $LN2@winapi_Rea

; 960  :         Py_DECREF(buf);

  00211	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00216	e8 00 00 00 00	 call	 _Py_DecRef

; 961  :         return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  0021b	33 d2		 xor	 edx, edx
  0021d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00224	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  00229	eb 2e		 jmp	 SHORT $LN12@winapi_Rea
$LN2@winapi_Rea:

; 962  :     }
; 963  :     if (_PyBytes_Resize(&buf, nread))

  0022b	8b 44 24 58	 mov	 eax, DWORD PTR nread$[rsp]
  0022f	8b d0		 mov	 edx, eax
  00231	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00236	e8 00 00 00 00	 call	 _PyBytes_Resize
  0023b	85 c0		 test	 eax, eax
  0023d	74 04		 je	 SHORT $LN1@winapi_Rea

; 964  :         return NULL;

  0023f	33 c0		 xor	 eax, eax
  00241	eb 16		 jmp	 SHORT $LN12@winapi_Rea
$LN1@winapi_Rea:

; 965  :     return Py_BuildValue("NI", buf, err);

  00243	44 8b 44 24 5c	 mov	 r8d, DWORD PTR err$[rsp]
  00248	48 8b 54 24 50	 mov	 rdx, QWORD PTR buf$[rsp]
  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FLABHCGL@NI?$AA@
  00254	e8 00 00 00 00	 call	 Py_BuildValue
$LN12@winapi_Rea:

; 966  : }

  00259	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00260	c3		 ret	 0
winapi_ReadFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_04NJKOLAOG@KOOO?$AA@			; `string'
EXTRN	__imp_SetNamedPipeHandleState:PROC
EXTRN	PyLong_AsUnsignedLongMask:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_SetNamedPipeHandleState DD imagerel winapi_SetNamedPipeHandleState
	DD	imagerel winapi_SetNamedPipeHandleState+282
	DD	imagerel $unwind$winapi_SetNamedPipeHandleState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_SetNamedPipeHandleState DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_04NJKOLAOG@KOOO?$AA@
CONST	SEGMENT
??_C@_04NJKOLAOG@KOOO?$AA@ DB 'KOOO', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_SetNamedPipeHandleState
_TEXT	SEGMENT
i$ = 48
dwArgs$ = 56
oArgs$ = 72
pArgs$ = 96
hNamedPipe$ = 120
self$ = 144
args$ = 152
winapi_SetNamedPipeHandleState PROC			; COMDAT

; 970  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 971  :     HANDLE hNamedPipe;
; 972  :     PyObject *oArgs[3];
; 973  :     DWORD dwArgs[3], *pArgs[3] = {NULL, NULL, NULL};

  00011	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR pArgs$[rsp], 0
  0001a	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR pArgs$[rsp+8], 0
  00023	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR pArgs$[rsp+16], 0

; 974  :     int i;
; 975  : 
; 976  :     if (!PyArg_ParseTuple(args, F_HANDLE "OOO",
; 977  :                           &hNamedPipe, &oArgs[0], &oArgs[1], &oArgs[2]))

  0002c	48 8d 44 24 58	 lea	 rax, QWORD PTR oArgs$[rsp+16]
  00031	48 8d 4c 24 50	 lea	 rcx, QWORD PTR oArgs$[rsp+8]
  00036	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0003b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00040	4c 8d 4c 24 48	 lea	 r9, QWORD PTR oArgs$[rsp]
  00045	4c 8d 44 24 78	 lea	 r8, QWORD PTR hNamedPipe$[rsp]
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NJKOLAOG@KOOO?$AA@
  00051	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00059	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0005e	85 c0		 test	 eax, eax
  00060	75 07		 jne	 SHORT $LN7@winapi_Set

; 978  :         return NULL;

  00062	33 c0		 xor	 eax, eax
  00064	e9 a9 00 00 00	 jmp	 $LN8@winapi_Set
$LN7@winapi_Set:

; 979  : 
; 980  :     PyErr_Clear();

  00069	e8 00 00 00 00	 call	 PyErr_Clear

; 981  : 
; 982  :     for (i = 0 ; i < 3 ; i++) {

  0006e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00076	eb 0a		 jmp	 SHORT $LN6@winapi_Set
$LN5@winapi_Set:
  00078	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0007c	ff c0		 inc	 eax
  0007e	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN6@winapi_Set:
  00082	83 7c 24 30 03	 cmp	 DWORD PTR i$[rsp], 3
  00087	7d 4f		 jge	 SHORT $LN4@winapi_Set

; 983  :         if (oArgs[i] != Py_None) {

  00089	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00095	48 39 4c c4 48	 cmp	 QWORD PTR oArgs$[rsp+rax*8], rcx
  0009a	74 3a		 je	 SHORT $LN3@winapi_Set

; 984  :             dwArgs[i] = PyLong_AsUnsignedLongMask(oArgs[i]);

  0009c	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  000a1	48 8b 4c c4 48	 mov	 rcx, QWORD PTR oArgs$[rsp+rax*8]
  000a6	e8 00 00 00 00	 call	 PyLong_AsUnsignedLongMask
  000ab	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  000b0	89 44 8c 38	 mov	 DWORD PTR dwArgs$[rsp+rcx*4], eax

; 985  :             if (PyErr_Occurred())

  000b4	e8 00 00 00 00	 call	 PyErr_Occurred
  000b9	48 85 c0	 test	 rax, rax
  000bc	74 04		 je	 SHORT $LN2@winapi_Set

; 986  :                 return NULL;

  000be	33 c0		 xor	 eax, eax
  000c0	eb 50		 jmp	 SHORT $LN8@winapi_Set
$LN2@winapi_Set:

; 987  :             pArgs[i] = &dwArgs[i];

  000c2	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  000c7	48 8d 44 84 38	 lea	 rax, QWORD PTR dwArgs$[rsp+rax*4]
  000cc	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  000d1	48 89 44 cc 60	 mov	 QWORD PTR pArgs$[rsp+rcx*8], rax
$LN3@winapi_Set:

; 988  :         }
; 989  :     }

  000d6	eb a0		 jmp	 SHORT $LN5@winapi_Set
$LN4@winapi_Set:

; 990  : 
; 991  :     if (!SetNamedPipeHandleState(hNamedPipe, pArgs[0], pArgs[1], pArgs[2]))

  000d8	4c 8b 4c 24 70	 mov	 r9, QWORD PTR pArgs$[rsp+16]
  000dd	4c 8b 44 24 68	 mov	 r8, QWORD PTR pArgs$[rsp+8]
  000e2	48 8b 54 24 60	 mov	 rdx, QWORD PTR pArgs$[rsp]
  000e7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR hNamedPipe$[rsp]
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetNamedPipeHandleState
  000f2	85 c0		 test	 eax, eax
  000f4	75 09		 jne	 SHORT $LN1@winapi_Set

; 992  :         return PyErr_SetFromWindowsErr(0);

  000f6	33 c9		 xor	 ecx, ecx
  000f8	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  000fd	eb 13		 jmp	 SHORT $LN8@winapi_Set
$LN1@winapi_Set:

; 993  : 
; 994  :     Py_RETURN_NONE;

  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00106	e8 00 00 00 00	 call	 _Py_IncRef
  0010b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN8@winapi_Set:

; 995  : }

  00112	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00119	c3		 ret	 0
winapi_SetNamedPipeHandleState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@INMEKOFM@KI?3TerminateProcess?$AA@	; `string'
EXTRN	__imp_TerminateProcess:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_TerminateProcess DD imagerel winapi_TerminateProcess
	DD	imagerel winapi_TerminateProcess+114
	DD	imagerel $unwind$winapi_TerminateProcess
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_TerminateProcess DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BE@INMEKOFM@KI?3TerminateProcess?$AA@
CONST	SEGMENT
??_C@_0BE@INMEKOFM@KI?3TerminateProcess?$AA@ DB 'KI:TerminateProcess', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_TerminateProcess
_TEXT	SEGMENT
exit_code$ = 32
process$ = 40
result$ = 48
self$ = 80
args$ = 88
winapi_TerminateProcess PROC				; COMDAT

; 1004 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1005 :     BOOL result;
; 1006 : 
; 1007 :     HANDLE process;
; 1008 :     UINT exit_code;
; 1009 :     if (! PyArg_ParseTuple(args, F_HANDLE F_UINT ":TerminateProcess",
; 1010 :                            &process, &exit_code))

  0000e	4c 8d 4c 24 20	 lea	 r9, QWORD PTR exit_code$[rsp]
  00013	4c 8d 44 24 28	 lea	 r8, QWORD PTR process$[rsp]
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@INMEKOFM@KI?3TerminateProcess?$AA@
  0001f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00024	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN2@winapi_Ter

; 1011 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 3c		 jmp	 SHORT $LN3@winapi_Ter
$LN2@winapi_Ter:

; 1012 : 
; 1013 :     result = TerminateProcess(process, exit_code);

  00031	8b 54 24 20	 mov	 edx, DWORD PTR exit_code$[rsp]
  00035	48 8b 4c 24 28	 mov	 rcx, QWORD PTR process$[rsp]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TerminateProcess
  00040	89 44 24 30	 mov	 DWORD PTR result$[rsp], eax

; 1014 : 
; 1015 :     if (! result)

  00044	83 7c 24 30 00	 cmp	 DWORD PTR result$[rsp], 0
  00049	75 0f		 jne	 SHORT $LN1@winapi_Ter

; 1016 :         return PyErr_SetFromWindowsErr(GetLastError());

  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00058	eb 13		 jmp	 SHORT $LN3@winapi_Ter
$LN1@winapi_Ter:

; 1017 : 
; 1018 :     Py_INCREF(Py_None);

  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00061	e8 00 00 00 00	 call	 _Py_IncRef

; 1019 :     return Py_None;

  00066	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@winapi_Ter:

; 1020 : }

  0006d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00071	c3		 ret	 0
winapi_TerminateProcess ENDP
_TEXT	ENDS
PUBLIC	??_C@_02NAAAECII@sk?$AA@			; `string'
EXTRN	__imp_WaitNamedPipeA:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_WaitNamedPipe DD imagerel winapi_WaitNamedPipe
	DD	imagerel winapi_WaitNamedPipe+128
	DD	imagerel $unwind$winapi_WaitNamedPipe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_WaitNamedPipe DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_02NAAAECII@sk?$AA@
CONST	SEGMENT
??_C@_02NAAAECII@sk?$AA@ DB 'sk', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_WaitNamedPipe
_TEXT	SEGMENT
success$ = 32
nTimeOut$ = 36
lpNamedPipeName$ = 40
_save$121687 = 48
self$ = 80
args$ = 88
winapi_WaitNamedPipe PROC				; COMDAT

; 1024 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1025 :     LPCTSTR lpNamedPipeName;
; 1026 :     DWORD nTimeOut;
; 1027 :     BOOL success;
; 1028 : 
; 1029 :     if (!PyArg_ParseTuple(args, "s" F_DWORD, &lpNamedPipeName, &nTimeOut))

  0000e	4c 8d 4c 24 24	 lea	 r9, QWORD PTR nTimeOut$[rsp]
  00013	4c 8d 44 24 28	 lea	 r8, QWORD PTR lpNamedPipeName$[rsp]
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02NAAAECII@sk?$AA@
  0001f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00024	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN2@winapi_Wai

; 1030 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 4a		 jmp	 SHORT $LN3@winapi_Wai
$LN2@winapi_Wai:

; 1031 : 
; 1032 :     Py_BEGIN_ALLOW_THREADS

  00031	e8 00 00 00 00	 call	 PyEval_SaveThread
  00036	48 89 44 24 30	 mov	 QWORD PTR _save$121687[rsp], rax

; 1033 :     success = WaitNamedPipe(lpNamedPipeName, nTimeOut);

  0003b	8b 54 24 24	 mov	 edx, DWORD PTR nTimeOut$[rsp]
  0003f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR lpNamedPipeName$[rsp]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitNamedPipeA
  0004a	89 44 24 20	 mov	 DWORD PTR success$[rsp], eax

; 1034 :     Py_END_ALLOW_THREADS

  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _save$121687[rsp]
  00053	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1035 : 
; 1036 :     if (!success)

  00058	83 7c 24 20 00	 cmp	 DWORD PTR success$[rsp], 0
  0005d	75 09		 jne	 SHORT $LN1@winapi_Wai

; 1037 :         return PyErr_SetFromWindowsErr(0);

  0005f	33 c9		 xor	 ecx, ecx
  00061	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00066	eb 13		 jmp	 SHORT $LN3@winapi_Wai
$LN1@winapi_Wai:

; 1038 : 
; 1039 :     Py_RETURN_NONE;

  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0006f	e8 00 00 00 00	 call	 _Py_IncRef
  00074	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@winapi_Wai:

; 1040 : }

  0007b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007f	c3		 ret	 0
winapi_WaitNamedPipe ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CK@FLAMJMFC@?$AAs?$AAi?$AAg?$AAi?$AAn?$AAt?$AA_?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DH@HEKFKPEM@need?5at?5most?5?$CFzd?5handles?0?5got?5a?5@ ; `string'
PUBLIC	??_C@_0CB@HMCKAPPK@sequence?5type?5expected?0?5got?5?8?$CFs?8@ ; `string'
PUBLIC	??_C@_0BM@JDIOBABC@Oi?$HMk?3WaitForMultipleObjects?$AA@ ; `string'
EXTRN	PyLong_FromLong:PROC
EXTRN	PyErr_SetFromErrno:PROC
EXTRN	__imp__errno:PROC
EXTRN	__imp_WaitForMultipleObjects:PROC
EXTRN	__imp_ResetEvent:PROC
EXTRN	_PyOS_SigintEvent:PROC
EXTRN	_PyOS_IsMainThread:PROC
EXTRN	PyArg_Parse:PROC
EXTRN	PySequence_GetItem:PROC
EXTRN	PySequence_Size:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PySequence_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_WaitForMultipleObjects DD imagerel winapi_WaitForMultipleObjects
	DD	imagerel winapi_WaitForMultipleObjects+692
	DD	imagerel $unwind$winapi_WaitForMultipleObjects
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_WaitForMultipleObjects DD 021101H
	DD	0510111H
xdata	ENDS
;	COMDAT ??_C@_1CK@FLAMJMFC@?$AAs?$AAi?$AAg?$AAi?$AAn?$AAt?$AA_?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@FLAMJMFC@?$AAs?$AAi?$AAg?$AAi?$AAn?$AAt?$AA_?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 's'
	DB	00H, 'i', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 't', 00H, '_', 00H
	DB	'e', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HEKFKPEM@need?5at?5most?5?$CFzd?5handles?0?5got?5a?5@
CONST	SEGMENT
??_C@_0DH@HEKFKPEM@need?5at?5most?5?$CFzd?5handles?0?5got?5a?5@ DB 'need '
	DB	'at most %zd handles, got a sequence of length %zd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HMCKAPPK@sequence?5type?5expected?0?5got?5?8?$CFs?8@
CONST	SEGMENT
??_C@_0CB@HMCKAPPK@sequence?5type?5expected?0?5got?5?8?$CFs?8@ DB 'sequen'
	DB	'ce type expected, got ''%s''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JDIOBABC@Oi?$HMk?3WaitForMultipleObjects?$AA@
CONST	SEGMENT
??_C@_0BM@JDIOBABC@Oi?$HMk?3WaitForMultipleObjects?$AA@ DB 'Oi|k:WaitForM'
	DB	'ultipleObjects', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_WaitForMultipleObjects
_TEXT	SEGMENT
sigint_event$ = 48
i$ = 56
nhandles$ = 64
handles$ = 80
milliseconds$ = 592
handle_seq$ = 600
wait_flag$ = 608
result$ = 612
v$121722 = 616
h$121721 = 624
_save$121734 = 632
self$ = 656
args$ = 664
winapi_WaitForMultipleObjects PROC			; COMDAT

; 1044 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 02
	00 00		 sub	 rsp, 648		; 00000288H

; 1045 :     DWORD result;
; 1046 :     PyObject *handle_seq;
; 1047 :     HANDLE handles[MAXIMUM_WAIT_OBJECTS];
; 1048 :     HANDLE sigint_event = NULL;

  00011	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR sigint_event$[rsp], 0

; 1049 :     Py_ssize_t nhandles, i;
; 1050 :     BOOL wait_flag;
; 1051 :     DWORD milliseconds = INFINITE;

  0001a	c7 84 24 50 02
	00 00 ff ff ff
	ff		 mov	 DWORD PTR milliseconds$[rsp], -1 ; ffffffffH

; 1052 : 
; 1053 :     if (!PyArg_ParseTuple(args, "O" F_BOOL "|" F_DWORD
; 1054 :                           ":WaitForMultipleObjects",
; 1055 :                           &handle_seq, &wait_flag, &milliseconds))

  00025	48 8d 84 24 50
	02 00 00	 lea	 rax, QWORD PTR milliseconds$[rsp]
  0002d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00032	4c 8d 8c 24 60
	02 00 00	 lea	 r9, QWORD PTR wait_flag$[rsp]
  0003a	4c 8d 84 24 58
	02 00 00	 lea	 r8, QWORD PTR handle_seq$[rsp]
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JDIOBABC@Oi?$HMk?3WaitForMultipleObjects?$AA@
  00049	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00051	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00056	85 c0		 test	 eax, eax
  00058	75 07		 jne	 SHORT $LN15@winapi_Wai@2

; 1056 :         return NULL;

  0005a	33 c0		 xor	 eax, eax
  0005c	e9 4b 02 00 00	 jmp	 $LN16@winapi_Wai@2
$LN15@winapi_Wai@2:

; 1057 : 
; 1058 :     if (!PySequence_Check(handle_seq)) {

  00061	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR handle_seq$[rsp]
  00069	e8 00 00 00 00	 call	 PySequence_Check
  0006e	85 c0		 test	 eax, eax
  00070	75 2a		 jne	 SHORT $LN14@winapi_Wai@2

; 1059 :         PyErr_Format(PyExc_TypeError,
; 1060 :                      "sequence type expected, got '%s'",
; 1061 :                      Py_TYPE(handle_seq)->tp_name);

  00072	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR handle_seq$[rsp]
  0007a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007e	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@HMCKAPPK@sequence?5type?5expected?0?5got?5?8?$CFs?8@
  00089	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00090	e8 00 00 00 00	 call	 PyErr_Format

; 1062 :         return NULL;

  00095	33 c0		 xor	 eax, eax
  00097	e9 10 02 00 00	 jmp	 $LN16@winapi_Wai@2
$LN14@winapi_Wai@2:

; 1063 :     }
; 1064 :     nhandles = PySequence_Length(handle_seq);

  0009c	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR handle_seq$[rsp]
  000a4	e8 00 00 00 00	 call	 PySequence_Size
  000a9	48 89 44 24 40	 mov	 QWORD PTR nhandles$[rsp], rax

; 1065 :     if (nhandles == -1)

  000ae	48 83 7c 24 40
	ff		 cmp	 QWORD PTR nhandles$[rsp], -1
  000b4	75 07		 jne	 SHORT $LN13@winapi_Wai@2

; 1066 :         return NULL;

  000b6	33 c0		 xor	 eax, eax
  000b8	e9 ef 01 00 00	 jmp	 $LN16@winapi_Wai@2
$LN13@winapi_Wai@2:

; 1067 :     if (nhandles < 0 || nhandles >= MAXIMUM_WAIT_OBJECTS - 1) {

  000bd	48 83 7c 24 40
	00		 cmp	 QWORD PTR nhandles$[rsp], 0
  000c3	7c 08		 jl	 SHORT $LN11@winapi_Wai@2
  000c5	48 83 7c 24 40
	3f		 cmp	 QWORD PTR nhandles$[rsp], 63 ; 0000003fH
  000cb	7c 25		 jl	 SHORT $LN12@winapi_Wai@2
$LN11@winapi_Wai@2:

; 1068 :         PyErr_Format(PyExc_ValueError,
; 1069 :                      "need at most %zd handles, got a sequence of length %zd",
; 1070 :                      MAXIMUM_WAIT_OBJECTS - 1, nhandles);

  000cd	4c 8b 4c 24 40	 mov	 r9, QWORD PTR nhandles$[rsp]
  000d2	41 b8 3f 00 00
	00		 mov	 r8d, 63			; 0000003fH
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@HEKFKPEM@need?5at?5most?5?$CFzd?5handles?0?5got?5a?5@
  000df	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000e6	e8 00 00 00 00	 call	 PyErr_Format

; 1071 :         return NULL;

  000eb	33 c0		 xor	 eax, eax
  000ed	e9 ba 01 00 00	 jmp	 $LN16@winapi_Wai@2
$LN12@winapi_Wai@2:

; 1072 :     }
; 1073 :     for (i = 0; i < nhandles; i++) {

  000f2	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000fb	eb 0d		 jmp	 SHORT $LN10@winapi_Wai@2
$LN9@winapi_Wai@2:
  000fd	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00102	48 ff c0	 inc	 rax
  00105	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN10@winapi_Wai@2:
  0010a	48 8b 44 24 40	 mov	 rax, QWORD PTR nhandles$[rsp]
  0010f	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  00114	0f 8d 84 00 00
	00		 jge	 $LN8@winapi_Wai@2

; 1074 :         HANDLE h;
; 1075 :         PyObject *v = PySequence_GetItem(handle_seq, i);

  0011a	48 8b 54 24 38	 mov	 rdx, QWORD PTR i$[rsp]
  0011f	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR handle_seq$[rsp]
  00127	e8 00 00 00 00	 call	 PySequence_GetItem
  0012c	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR v$121722[rsp], rax

; 1076 :         if (v == NULL)

  00134	48 83 bc 24 68
	02 00 00 00	 cmp	 QWORD PTR v$121722[rsp], 0
  0013d	75 07		 jne	 SHORT $LN7@winapi_Wai@2

; 1077 :             return NULL;

  0013f	33 c0		 xor	 eax, eax
  00141	e9 66 01 00 00	 jmp	 $LN16@winapi_Wai@2
$LN7@winapi_Wai@2:

; 1078 :         if (!PyArg_Parse(v, F_HANDLE, &h)) {

  00146	4c 8d 84 24 70
	02 00 00	 lea	 r8, QWORD PTR h$121721[rsp]
  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KNKLHLMO@K?$AA@
  00155	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR v$121722[rsp]
  0015d	e8 00 00 00 00	 call	 PyArg_Parse
  00162	85 c0		 test	 eax, eax
  00164	75 14		 jne	 SHORT $LN6@winapi_Wai@2

; 1079 :             Py_DECREF(v);

  00166	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR v$121722[rsp]
  0016e	e8 00 00 00 00	 call	 _Py_DecRef

; 1080 :             return NULL;

  00173	33 c0		 xor	 eax, eax
  00175	e9 32 01 00 00	 jmp	 $LN16@winapi_Wai@2
$LN6@winapi_Wai@2:

; 1081 :         }
; 1082 :         handles[i] = h;

  0017a	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  0017f	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR h$121721[rsp]
  00187	48 89 4c c4 50	 mov	 QWORD PTR handles$[rsp+rax*8], rcx

; 1083 :         Py_DECREF(v);

  0018c	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR v$121722[rsp]
  00194	e8 00 00 00 00	 call	 _Py_DecRef

; 1084 :     }

  00199	e9 5f ff ff ff	 jmp	 $LN9@winapi_Wai@2
$LN8@winapi_Wai@2:

; 1085 :     /* If this is the main thread then make the wait interruptible
; 1086 :        by Ctrl-C unless we are waiting for *all* handles */
; 1087 :     if (!wait_flag && _PyOS_IsMainThread()) {

  0019e	83 bc 24 60 02
	00 00 00	 cmp	 DWORD PTR wait_flag$[rsp], 0
  001a6	75 53		 jne	 SHORT $LN5@winapi_Wai@2
  001a8	e8 00 00 00 00	 call	 _PyOS_IsMainThread
  001ad	85 c0		 test	 eax, eax
  001af	74 4a		 je	 SHORT $LN5@winapi_Wai@2

; 1088 :         sigint_event = _PyOS_SigintEvent();

  001b1	e8 00 00 00 00	 call	 _PyOS_SigintEvent
  001b6	48 89 44 24 30	 mov	 QWORD PTR sigint_event$[rsp], rax

; 1089 :         assert(sigint_event != NULL);

  001bb	48 83 7c 24 30
	00		 cmp	 QWORD PTR sigint_event$[rsp], 0
  001c1	75 1c		 jne	 SHORT $LN18@winapi_Wai@2
  001c3	41 b8 41 04 00
	00		 mov	 r8d, 1089		; 00000441H
  001c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@OBEEAOLB@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAw?$AAi?$AAn?$AAa?$AAp?$AAi?$AA?4?$AAc?$AA?$AA@
  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FLAMJMFC@?$AAs?$AAi?$AAg?$AAi?$AAn?$AAt?$AA_?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  001d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001dd	33 c0		 xor	 eax, eax
$LN18@winapi_Wai@2:

; 1090 :         handles[nhandles++] = sigint_event;

  001df	48 8b 44 24 40	 mov	 rax, QWORD PTR nhandles$[rsp]
  001e4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sigint_event$[rsp]
  001e9	48 89 4c c4 50	 mov	 QWORD PTR handles$[rsp+rax*8], rcx
  001ee	48 8b 44 24 40	 mov	 rax, QWORD PTR nhandles$[rsp]
  001f3	48 ff c0	 inc	 rax
  001f6	48 89 44 24 40	 mov	 QWORD PTR nhandles$[rsp], rax
$LN5@winapi_Wai@2:

; 1091 :     }
; 1092 : 
; 1093 :     Py_BEGIN_ALLOW_THREADS

  001fb	e8 00 00 00 00	 call	 PyEval_SaveThread
  00200	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR _save$121734[rsp], rax

; 1094 :     if (sigint_event != NULL)

  00208	48 83 7c 24 30
	00		 cmp	 QWORD PTR sigint_event$[rsp], 0
  0020e	74 0b		 je	 SHORT $LN4@winapi_Wai@2

; 1095 :         ResetEvent(sigint_event);

  00210	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sigint_event$[rsp]
  00215	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ResetEvent
$LN4@winapi_Wai@2:

; 1096 :     result = WaitForMultipleObjects((DWORD) nhandles, handles,
; 1097 :                                     wait_flag, milliseconds);

  0021b	44 8b 8c 24 50
	02 00 00	 mov	 r9d, DWORD PTR milliseconds$[rsp]
  00223	44 8b 84 24 60
	02 00 00	 mov	 r8d, DWORD PTR wait_flag$[rsp]
  0022b	48 8d 54 24 50	 lea	 rdx, QWORD PTR handles$[rsp]
  00230	8b 4c 24 40	 mov	 ecx, DWORD PTR nhandles$[rsp]
  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForMultipleObjects
  0023a	89 84 24 64 02
	00 00		 mov	 DWORD PTR result$[rsp], eax

; 1098 :     Py_END_ALLOW_THREADS

  00241	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR _save$121734[rsp]
  00249	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1099 : 
; 1100 :     if (result == WAIT_FAILED)

  0024e	83 bc 24 64 02
	00 00 ff	 cmp	 DWORD PTR result$[rsp], -1 ; ffffffffH
  00256	75 12		 jne	 SHORT $LN3@winapi_Wai@2

; 1101 :         return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  00258	33 d2		 xor	 edx, edx
  0025a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00261	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  00266	eb 44		 jmp	 SHORT $LN16@winapi_Wai@2
  00268	eb 36		 jmp	 SHORT $LN2@winapi_Wai@2
$LN3@winapi_Wai@2:

; 1102 :     else if (sigint_event != NULL && result == WAIT_OBJECT_0 + nhandles - 1) {

  0026a	48 83 7c 24 30
	00		 cmp	 QWORD PTR sigint_event$[rsp], 0
  00270	74 2e		 je	 SHORT $LN1@winapi_Wai@2
  00272	8b 84 24 64 02
	00 00		 mov	 eax, DWORD PTR result$[rsp]
  00279	48 8b 4c 24 40	 mov	 rcx, QWORD PTR nhandles$[rsp]
  0027e	48 ff c9	 dec	 rcx
  00281	48 3b c1	 cmp	 rax, rcx
  00284	75 1a		 jne	 SHORT $LN1@winapi_Wai@2

; 1103 :         errno = EINTR;

  00286	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0028c	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 1104 :         return PyErr_SetFromErrno(PyExc_IOError);

  00292	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00299	e8 00 00 00 00	 call	 PyErr_SetFromErrno
  0029e	eb 0c		 jmp	 SHORT $LN16@winapi_Wai@2
$LN1@winapi_Wai@2:
$LN2@winapi_Wai@2:

; 1105 :     }
; 1106 : 
; 1107 :     return PyLong_FromLong((int) result);

  002a0	8b 8c 24 64 02
	00 00		 mov	 ecx, DWORD PTR result$[rsp]
  002a7	e8 00 00 00 00	 call	 PyLong_FromLong
$LN16@winapi_Wai@2:

; 1108 : }

  002ac	48 81 c4 88 02
	00 00		 add	 rsp, 648		; 00000288H
  002b3	c3		 ret	 0
winapi_WaitForMultipleObjects ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@PKLICEEP@Kk?3WaitForSingleObject?$AA@	; `string'
EXTRN	__imp_WaitForSingleObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_WaitForSingleObject DD imagerel winapi_WaitForSingleObject
	DD	imagerel winapi_WaitForSingleObject+124
	DD	imagerel $unwind$winapi_WaitForSingleObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_WaitForSingleObject DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BH@PKLICEEP@Kk?3WaitForSingleObject?$AA@
CONST	SEGMENT
??_C@_0BH@PKLICEEP@Kk?3WaitForSingleObject?$AA@ DB 'Kk:WaitForSingleObjec'
	DB	't', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_WaitForSingleObject
_TEXT	SEGMENT
milliseconds$ = 32
result$ = 36
handle$ = 40
_save$121758 = 48
self$ = 80
args$ = 88
winapi_WaitForSingleObject PROC				; COMDAT

; 1119 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1120 :     DWORD result;
; 1121 : 
; 1122 :     HANDLE handle;
; 1123 :     DWORD milliseconds;
; 1124 :     if (! PyArg_ParseTuple(args, F_HANDLE F_DWORD ":WaitForSingleObject",
; 1125 :                                  &handle,
; 1126 :                                  &milliseconds))

  0000e	4c 8d 4c 24 20	 lea	 r9, QWORD PTR milliseconds$[rsp]
  00013	4c 8d 44 24 28	 lea	 r8, QWORD PTR handle$[rsp]
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PKLICEEP@Kk?3WaitForSingleObject?$AA@
  0001f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00024	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN2@winapi_Wai@3

; 1127 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 46		 jmp	 SHORT $LN3@winapi_Wai@3
$LN2@winapi_Wai@3:

; 1128 : 
; 1129 :     Py_BEGIN_ALLOW_THREADS

  00031	e8 00 00 00 00	 call	 PyEval_SaveThread
  00036	48 89 44 24 30	 mov	 QWORD PTR _save$121758[rsp], rax

; 1130 :     result = WaitForSingleObject(handle, milliseconds);

  0003b	8b 54 24 20	 mov	 edx, DWORD PTR milliseconds$[rsp]
  0003f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR handle$[rsp]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject
  0004a	89 44 24 24	 mov	 DWORD PTR result$[rsp], eax

; 1131 :     Py_END_ALLOW_THREADS

  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _save$121758[rsp]
  00053	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1132 : 
; 1133 :     if (result == WAIT_FAILED)

  00058	83 7c 24 24 ff	 cmp	 DWORD PTR result$[rsp], -1 ; ffffffffH
  0005d	75 0f		 jne	 SHORT $LN1@winapi_Wai@3

; 1134 :         return PyErr_SetFromWindowsErr(GetLastError());

  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00065	8b c8		 mov	 ecx, eax
  00067	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0006c	eb 09		 jmp	 SHORT $LN3@winapi_Wai@3
$LN1@winapi_Wai@3:

; 1135 : 
; 1136 :     return PyLong_FromUnsignedLong(result);

  0006e	8b 4c 24 24	 mov	 ecx, DWORD PTR result$[rsp]
  00072	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
$LN3@winapi_Wai@3:

; 1137 : }

  00077	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007b	c3		 ret	 0
winapi_WaitForSingleObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_02DEPFLJBK@y?$CK?$AA@			; `string'
PUBLIC	??_C@_0P@LGIDPNAH@KO?$HMi?3WriteFile?$AA@	; `string'
EXTRN	__imp_WriteFile:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$winapi_WriteFile DD imagerel winapi_WriteFile
	DD	imagerel winapi_WriteFile+658
	DD	imagerel $unwind$winapi_WriteFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$winapi_WriteFile DD 021601H
	DD	01d0116H
xdata	ENDS
;	COMDAT ??_C@_02DEPFLJBK@y?$CK?$AA@
CONST	SEGMENT
??_C@_02DEPFLJBK@y?$CK?$AA@ DB 'y*', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LGIDPNAH@KO?$HMi?3WriteFile?$AA@
CONST	SEGMENT
??_C@_0P@LGIDPNAH@KO?$HMi?3WriteFile?$AA@ DB 'KO|i:WriteFile', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT winapi_WriteFile
_TEXT	SEGMENT
_buf$ = 64
bufobj$ = 144
written$ = 152
use_overlapped$ = 156
ret$ = 160
buf$ = 168
err$ = 176
overlapped$ = 184
handle$ = 192
_save$121798 = 200
tv90 = 208
tv132 = 216
self$ = 240
args$ = 248
kwds$ = 256
winapi_WriteFile PROC					; COMDAT

; 1141 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H

; 1142 :     HANDLE handle;
; 1143 :     Py_buffer _buf, *buf;
; 1144 :     PyObject *bufobj;
; 1145 :     DWORD written;
; 1146 :     BOOL ret;
; 1147 :     int use_overlapped = 0;

  00016	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR use_overlapped$[rsp], 0

; 1148 :     DWORD err;
; 1149 :     OverlappedObject *overlapped = NULL;

  00021	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR overlapped$[rsp], 0

; 1150 :     static char *kwlist[] = {"handle", "buffer", "overlapped", NULL};
; 1151 : 
; 1152 :     /* First get handle and use_overlapped to know which Py_buffer to use */
; 1153 :     if (!PyArg_ParseTupleAndKeywords(args, kwds,
; 1154 :                                      F_HANDLE "O|i:WriteFile", kwlist,
; 1155 :                                      &handle, &bufobj, &use_overlapped))

  0002d	48 8d 84 24 9c
	00 00 00	 lea	 rax, QWORD PTR use_overlapped$[rsp]
  00035	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0003a	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR bufobj$[rsp]
  00042	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00047	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR handle$[rsp]
  0004f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00054	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??winapi_WriteFile@@9@9
  0005b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@LGIDPNAH@KO?$HMi?3WriteFile?$AA@
  00062	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0006a	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00072	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00077	85 c0		 test	 eax, eax
  00079	75 07		 jne	 SHORT $LN14@winapi_Wri

; 1156 :         return NULL;

  0007b	33 c0		 xor	 eax, eax
  0007d	e9 08 02 00 00	 jmp	 $LN15@winapi_Wri
$LN14@winapi_Wri:

; 1157 : 
; 1158 :     if (use_overlapped) {

  00082	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR use_overlapped$[rsp], 0
  0008a	74 3f		 je	 SHORT $LN13@winapi_Wri

; 1159 :         overlapped = new_overlapped(handle);

  0008c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR handle$[rsp]
  00094	e8 00 00 00 00	 call	 new_overlapped
  00099	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR overlapped$[rsp], rax

; 1160 :         if (!overlapped)

  000a1	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR overlapped$[rsp], 0
  000aa	75 07		 jne	 SHORT $LN12@winapi_Wri

; 1161 :             return NULL;

  000ac	33 c0		 xor	 eax, eax
  000ae	e9 d7 01 00 00	 jmp	 $LN15@winapi_Wri
$LN12@winapi_Wri:

; 1162 :         buf = &overlapped->write_buffer;

  000b3	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR overlapped$[rsp]
  000bb	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  000c1	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR buf$[rsp], rax

; 1163 :     }
; 1164 :     else

  000c9	eb 0d		 jmp	 SHORT $LN11@winapi_Wri
$LN13@winapi_Wri:

; 1165 :         buf = &_buf;

  000cb	48 8d 44 24 40	 lea	 rax, QWORD PTR _buf$[rsp]
  000d0	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR buf$[rsp], rax
$LN11@winapi_Wri:

; 1166 : 
; 1167 :     if (!PyArg_Parse(bufobj, "y*", buf)) {

  000d8	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR buf$[rsp]
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DEPFLJBK@y?$CK?$AA@
  000e7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR bufobj$[rsp]
  000ef	e8 00 00 00 00	 call	 PyArg_Parse
  000f4	85 c0		 test	 eax, eax
  000f6	75 25		 jne	 SHORT $LN10@winapi_Wri
$LN9@winapi_Wri:

; 1168 :         Py_XDECREF(overlapped);

  000f8	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR overlapped$[rsp], 0
  00101	74 0d		 je	 SHORT $LN6@winapi_Wri
  00103	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR overlapped$[rsp]
  0010b	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@winapi_Wri:
  00110	33 c0		 xor	 eax, eax
  00112	85 c0		 test	 eax, eax
  00114	75 e2		 jne	 SHORT $LN9@winapi_Wri

; 1169 :         return NULL;

  00116	33 c0		 xor	 eax, eax
  00118	e9 6d 01 00 00	 jmp	 $LN15@winapi_Wri
$LN10@winapi_Wri:

; 1170 :     }
; 1171 : 
; 1172 :     Py_BEGIN_ALLOW_THREADS

  0011d	e8 00 00 00 00	 call	 PyEval_SaveThread
  00122	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR _save$121798[rsp], rax

; 1173 :     ret = WriteFile(handle, buf->buf, buf->len, &written,
; 1174 :                     overlapped ? &overlapped->overlapped : NULL);

  0012a	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR overlapped$[rsp], 0
  00133	74 16		 je	 SHORT $LN17@winapi_Wri
  00135	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR overlapped$[rsp]
  0013d	48 83 c0 60	 add	 rax, 96			; 00000060H
  00141	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv90[rsp], rax
  00149	eb 0c		 jmp	 SHORT $LN18@winapi_Wri
$LN17@winapi_Wri:
  0014b	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv90[rsp], 0
$LN18@winapi_Wri:
  00157	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv90[rsp]
  0015f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00164	4c 8d 8c 24 98
	00 00 00	 lea	 r9, QWORD PTR written$[rsp]
  0016c	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00174	44 8b 40 10	 mov	 r8d, DWORD PTR [rax+16]
  00178	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00180	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00183	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR handle$[rsp]
  0018b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile
  00191	89 84 24 a0 00
	00 00		 mov	 DWORD PTR ret$[rsp], eax

; 1175 :     Py_END_ALLOW_THREADS

  00198	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _save$121798[rsp]
  001a0	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1176 : 
; 1177 :     err = ret ? 0 : GetLastError();

  001a5	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR ret$[rsp], 0
  001ad	74 0d		 je	 SHORT $LN19@winapi_Wri
  001af	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv132[rsp], 0
  001ba	eb 0d		 jmp	 SHORT $LN20@winapi_Wri
$LN19@winapi_Wri:
  001bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  001c2	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv132[rsp], eax
$LN20@winapi_Wri:
  001c9	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR tv132[rsp]
  001d0	89 84 24 b0 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 1178 : 
; 1179 :     if (overlapped) {

  001d7	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR overlapped$[rsp], 0
  001e0	74 66		 je	 SHORT $LN5@winapi_Wri

; 1180 :         if (!ret) {

  001e2	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR ret$[rsp], 0
  001ea	75 3e		 jne	 SHORT $LN4@winapi_Wri

; 1181 :             if (err == ERROR_IO_PENDING)

  001ec	81 bc 24 b0 00
	00 00 e5 03 00
	00		 cmp	 DWORD PTR err$[rsp], 997 ; 000003e5H
  001f7	75 14		 jne	 SHORT $LN3@winapi_Wri

; 1182 :                 overlapped->pending = 1;

  001f9	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR overlapped$[rsp]
  00201	c7 80 88 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+136], 1

; 1183 :             else {

  0020b	eb 1d		 jmp	 SHORT $LN2@winapi_Wri
$LN3@winapi_Wri:

; 1184 :                 Py_DECREF(overlapped);

  0020d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR overlapped$[rsp]
  00215	e8 00 00 00 00	 call	 _Py_DecRef

; 1185 :                 return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  0021a	33 d2		 xor	 edx, edx
  0021c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00223	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  00228	eb 60		 jmp	 SHORT $LN15@winapi_Wri
$LN2@winapi_Wri:
$LN4@winapi_Wri:

; 1186 :             }
; 1187 :         }
; 1188 :         return Py_BuildValue("NI", (PyObject *) overlapped, err);

  0022a	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR err$[rsp]
  00232	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR overlapped$[rsp]
  0023a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FLABHCGL@NI?$AA@
  00241	e8 00 00 00 00	 call	 Py_BuildValue
  00246	eb 42		 jmp	 SHORT $LN15@winapi_Wri
$LN5@winapi_Wri:

; 1189 :     }
; 1190 : 
; 1191 :     PyBuffer_Release(buf);

  00248	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00250	e8 00 00 00 00	 call	 PyBuffer_Release

; 1192 :     if (!ret)

  00255	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR ret$[rsp], 0
  0025d	75 10		 jne	 SHORT $LN1@winapi_Wri

; 1193 :         return PyErr_SetExcFromWindowsErr(PyExc_IOError, 0);

  0025f	33 d2		 xor	 edx, edx
  00261	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00268	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr
  0026d	eb 1b		 jmp	 SHORT $LN15@winapi_Wri
$LN1@winapi_Wri:

; 1194 :     return Py_BuildValue("II", written, err);

  0026f	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR err$[rsp]
  00277	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR written$[rsp]
  0027e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FOEOGEOO@II?$AA@
  00285	e8 00 00 00 00	 call	 Py_BuildValue
$LN15@winapi_Wri:

; 1195 : }

  0028a	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  00291	c3		 ret	 0
winapi_WriteFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_04HIBGFPH@NULL?$AA@			; `string'
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
PUBLIC	??_C@_0N@MLFIMDEJ@WAIT_TIMEOUT?$AA@		; `string'
PUBLIC	??_C@_0O@BHMMAMPF@WAIT_OBJECT_0?$AA@		; `string'
PUBLIC	??_C@_07CONMCDML@SW_HIDE?$AA@			; `string'
PUBLIC	??_C@_0N@EDJFMDHN@STILL_ACTIVE?$AA@		; `string'
PUBLIC	??_C@_0BB@FJBFBONB@STD_ERROR_HANDLE?$AA@	; `string'
PUBLIC	??_C@_0BC@PDBIEEGD@STD_OUTPUT_HANDLE?$AA@	; `string'
PUBLIC	??_C@_0BB@NBEHNGDN@STD_INPUT_HANDLE?$AA@	; `string'
PUBLIC	??_C@_0BF@KPBHCKBG@STARTF_USESTDHANDLES?$AA@	; `string'
PUBLIC	??_C@_0BF@EKLPBPPK@STARTF_USESHOWWINDOW?$AA@	; `string'
PUBLIC	??_C@_0BD@FNKPIEBO@PROCESS_DUP_HANDLE?$AA@	; `string'
PUBLIC	??_C@_0BD@COCJCFIN@PROCESS_ALL_ACCESS?$AA@	; `string'
PUBLIC	??_C@_09GBJKLFDL@PIPE_WAIT?$AA@			; `string'
PUBLIC	??_C@_0BJ@KDCCODEA@PIPE_UNLIMITED_INSTANCES?$AA@ ; `string'
PUBLIC	??_C@_0BC@DPNGHAPK@PIPE_TYPE_MESSAGE?$AA@	; `string'
PUBLIC	??_C@_0BG@NOJMDBGL@PIPE_READMODE_MESSAGE?$AA@	; `string'
PUBLIC	??_C@_0BE@JNPGDFFP@PIPE_ACCESS_INBOUND?$AA@	; `string'
PUBLIC	??_C@_0BD@FFBOJLDP@PIPE_ACCESS_DUPLEX?$AA@	; `string'
PUBLIC	??_C@_0O@PDPODOPO@OPEN_EXISTING?$AA@		; `string'
PUBLIC	??_C@_0BF@JONJFBOM@NMPWAIT_WAIT_FOREVER?$AA@	; `string'
PUBLIC	??_C@_08LPDIFJIG@INFINITE?$AA@			; `string'
PUBLIC	??_C@_0O@DKHPBJPE@GENERIC_WRITE?$AA@		; `string'
PUBLIC	??_C@_0N@INABCMMB@GENERIC_READ?$AA@		; `string'
PUBLIC	??_C@_0BD@OFPOCHAM@FILE_GENERIC_WRITE?$AA@	; `string'
PUBLIC	??_C@_0BC@GMNABHGN@FILE_GENERIC_READ?$AA@	; `string'
PUBLIC	??_C@_0BF@IKEPHOOJ@FILE_FLAG_OVERLAPPED?$AA@	; `string'
PUBLIC	??_C@_0BO@PKHOEDGF@FILE_FLAG_FIRST_PIPE_INSTANCE?$AA@ ; `string'
PUBLIC	??_C@_0BC@BPAFPFHD@ERROR_SEM_TIMEOUT?$AA@	; `string'
PUBLIC	??_C@_0BF@PHEPDDDD@ERROR_PIPE_CONNECTED?$AA@	; `string'
PUBLIC	??_C@_0BA@KIGJMOFJ@ERROR_PIPE_BUSY?$AA@		; `string'
PUBLIC	??_C@_0BI@EDIDNLB@ERROR_OPERATION_ABORTED?$AA@	; `string'
PUBLIC	??_C@_0O@HIPCDKGC@ERROR_NO_DATA?$AA@		; `string'
PUBLIC	??_C@_0BK@FPFJCKNG@ERROR_NO_SYSTEM_RESOURCES?$AA@ ; `string'
PUBLIC	??_C@_0BG@JJLAGMLA@ERROR_NETNAME_DELETED?$AA@	; `string'
PUBLIC	??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@		; `string'
PUBLIC	??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@	; `string'
PUBLIC	??_C@_0BC@BJHNEMJG@ERROR_BROKEN_PIPE?$AA@	; `string'
PUBLIC	??_C@_0BF@ONPBHKDO@ERROR_ALREADY_EXISTS?$AA@	; `string'
PUBLIC	??_C@_0BH@MMLBEHAM@DUPLICATE_CLOSE_SOURCE?$AA@	; `string'
PUBLIC	??_C@_0BG@KAIAGNIF@DUPLICATE_SAME_ACCESS?$AA@	; `string'
PUBLIC	??_C@_0BJ@CNJAILLO@CREATE_NEW_PROCESS_GROUP?$AA@ ; `string'
PUBLIC	??_C@_0BD@HMIPFELD@CREATE_NEW_CONSOLE?$AA@	; `string'
PUBLIC	??_C@_0L@IAMABJLG@Overlapped?$AA@		; `string'
PUBLIC	PyInit__winapi
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__winapi DD imagerel $LN5
	DD	imagerel $LN5+1766
	DD	imagerel $unwind$PyInit__winapi
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__winapi DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_04HIBGFPH@NULL?$AA@
CONST	SEGMENT
??_C@_04HIBGFPH@NULL?$AA@ DB 'NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MLFIMDEJ@WAIT_TIMEOUT?$AA@
CONST	SEGMENT
??_C@_0N@MLFIMDEJ@WAIT_TIMEOUT?$AA@ DB 'WAIT_TIMEOUT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BHMMAMPF@WAIT_OBJECT_0?$AA@
CONST	SEGMENT
??_C@_0O@BHMMAMPF@WAIT_OBJECT_0?$AA@ DB 'WAIT_OBJECT_0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CONMCDML@SW_HIDE?$AA@
CONST	SEGMENT
??_C@_07CONMCDML@SW_HIDE?$AA@ DB 'SW_HIDE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EDJFMDHN@STILL_ACTIVE?$AA@
CONST	SEGMENT
??_C@_0N@EDJFMDHN@STILL_ACTIVE?$AA@ DB 'STILL_ACTIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FJBFBONB@STD_ERROR_HANDLE?$AA@
CONST	SEGMENT
??_C@_0BB@FJBFBONB@STD_ERROR_HANDLE?$AA@ DB 'STD_ERROR_HANDLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PDBIEEGD@STD_OUTPUT_HANDLE?$AA@
CONST	SEGMENT
??_C@_0BC@PDBIEEGD@STD_OUTPUT_HANDLE?$AA@ DB 'STD_OUTPUT_HANDLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NBEHNGDN@STD_INPUT_HANDLE?$AA@
CONST	SEGMENT
??_C@_0BB@NBEHNGDN@STD_INPUT_HANDLE?$AA@ DB 'STD_INPUT_HANDLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KPBHCKBG@STARTF_USESTDHANDLES?$AA@
CONST	SEGMENT
??_C@_0BF@KPBHCKBG@STARTF_USESTDHANDLES?$AA@ DB 'STARTF_USESTDHANDLES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKLPBPPK@STARTF_USESHOWWINDOW?$AA@
CONST	SEGMENT
??_C@_0BF@EKLPBPPK@STARTF_USESHOWWINDOW?$AA@ DB 'STARTF_USESHOWWINDOW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FNKPIEBO@PROCESS_DUP_HANDLE?$AA@
CONST	SEGMENT
??_C@_0BD@FNKPIEBO@PROCESS_DUP_HANDLE?$AA@ DB 'PROCESS_DUP_HANDLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@COCJCFIN@PROCESS_ALL_ACCESS?$AA@
CONST	SEGMENT
??_C@_0BD@COCJCFIN@PROCESS_ALL_ACCESS?$AA@ DB 'PROCESS_ALL_ACCESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GBJKLFDL@PIPE_WAIT?$AA@
CONST	SEGMENT
??_C@_09GBJKLFDL@PIPE_WAIT?$AA@ DB 'PIPE_WAIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KDCCODEA@PIPE_UNLIMITED_INSTANCES?$AA@
CONST	SEGMENT
??_C@_0BJ@KDCCODEA@PIPE_UNLIMITED_INSTANCES?$AA@ DB 'PIPE_UNLIMITED_INSTA'
	DB	'NCES', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DPNGHAPK@PIPE_TYPE_MESSAGE?$AA@
CONST	SEGMENT
??_C@_0BC@DPNGHAPK@PIPE_TYPE_MESSAGE?$AA@ DB 'PIPE_TYPE_MESSAGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NOJMDBGL@PIPE_READMODE_MESSAGE?$AA@
CONST	SEGMENT
??_C@_0BG@NOJMDBGL@PIPE_READMODE_MESSAGE?$AA@ DB 'PIPE_READMODE_MESSAGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JNPGDFFP@PIPE_ACCESS_INBOUND?$AA@
CONST	SEGMENT
??_C@_0BE@JNPGDFFP@PIPE_ACCESS_INBOUND?$AA@ DB 'PIPE_ACCESS_INBOUND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FFBOJLDP@PIPE_ACCESS_DUPLEX?$AA@
CONST	SEGMENT
??_C@_0BD@FFBOJLDP@PIPE_ACCESS_DUPLEX?$AA@ DB 'PIPE_ACCESS_DUPLEX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PDPODOPO@OPEN_EXISTING?$AA@
CONST	SEGMENT
??_C@_0O@PDPODOPO@OPEN_EXISTING?$AA@ DB 'OPEN_EXISTING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JONJFBOM@NMPWAIT_WAIT_FOREVER?$AA@
CONST	SEGMENT
??_C@_0BF@JONJFBOM@NMPWAIT_WAIT_FOREVER?$AA@ DB 'NMPWAIT_WAIT_FOREVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPDIFJIG@INFINITE?$AA@
CONST	SEGMENT
??_C@_08LPDIFJIG@INFINITE?$AA@ DB 'INFINITE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DKHPBJPE@GENERIC_WRITE?$AA@
CONST	SEGMENT
??_C@_0O@DKHPBJPE@GENERIC_WRITE?$AA@ DB 'GENERIC_WRITE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@INABCMMB@GENERIC_READ?$AA@
CONST	SEGMENT
??_C@_0N@INABCMMB@GENERIC_READ?$AA@ DB 'GENERIC_READ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OFPOCHAM@FILE_GENERIC_WRITE?$AA@
CONST	SEGMENT
??_C@_0BD@OFPOCHAM@FILE_GENERIC_WRITE?$AA@ DB 'FILE_GENERIC_WRITE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GMNABHGN@FILE_GENERIC_READ?$AA@
CONST	SEGMENT
??_C@_0BC@GMNABHGN@FILE_GENERIC_READ?$AA@ DB 'FILE_GENERIC_READ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IKEPHOOJ@FILE_FLAG_OVERLAPPED?$AA@
CONST	SEGMENT
??_C@_0BF@IKEPHOOJ@FILE_FLAG_OVERLAPPED?$AA@ DB 'FILE_FLAG_OVERLAPPED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PKHOEDGF@FILE_FLAG_FIRST_PIPE_INSTANCE?$AA@
CONST	SEGMENT
??_C@_0BO@PKHOEDGF@FILE_FLAG_FIRST_PIPE_INSTANCE?$AA@ DB 'FILE_FLAG_FIRST'
	DB	'_PIPE_INSTANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BPAFPFHD@ERROR_SEM_TIMEOUT?$AA@
CONST	SEGMENT
??_C@_0BC@BPAFPFHD@ERROR_SEM_TIMEOUT?$AA@ DB 'ERROR_SEM_TIMEOUT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHEPDDDD@ERROR_PIPE_CONNECTED?$AA@
CONST	SEGMENT
??_C@_0BF@PHEPDDDD@ERROR_PIPE_CONNECTED?$AA@ DB 'ERROR_PIPE_CONNECTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KIGJMOFJ@ERROR_PIPE_BUSY?$AA@
CONST	SEGMENT
??_C@_0BA@KIGJMOFJ@ERROR_PIPE_BUSY?$AA@ DB 'ERROR_PIPE_BUSY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EDIDNLB@ERROR_OPERATION_ABORTED?$AA@
CONST	SEGMENT
??_C@_0BI@EDIDNLB@ERROR_OPERATION_ABORTED?$AA@ DB 'ERROR_OPERATION_ABORTE'
	DB	'D', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HIPCDKGC@ERROR_NO_DATA?$AA@
CONST	SEGMENT
??_C@_0O@HIPCDKGC@ERROR_NO_DATA?$AA@ DB 'ERROR_NO_DATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FPFJCKNG@ERROR_NO_SYSTEM_RESOURCES?$AA@
CONST	SEGMENT
??_C@_0BK@FPFJCKNG@ERROR_NO_SYSTEM_RESOURCES?$AA@ DB 'ERROR_NO_SYSTEM_RES'
	DB	'OURCES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JJLAGMLA@ERROR_NETNAME_DELETED?$AA@
CONST	SEGMENT
??_C@_0BG@JJLAGMLA@ERROR_NETNAME_DELETED?$AA@ DB 'ERROR_NETNAME_DELETED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@
CONST	SEGMENT
??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@ DB 'ERROR_MORE_DATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@
CONST	SEGMENT
??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@ DB 'ERROR_IO_PENDING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BJHNEMJG@ERROR_BROKEN_PIPE?$AA@
CONST	SEGMENT
??_C@_0BC@BJHNEMJG@ERROR_BROKEN_PIPE?$AA@ DB 'ERROR_BROKEN_PIPE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ONPBHKDO@ERROR_ALREADY_EXISTS?$AA@
CONST	SEGMENT
??_C@_0BF@ONPBHKDO@ERROR_ALREADY_EXISTS?$AA@ DB 'ERROR_ALREADY_EXISTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MMLBEHAM@DUPLICATE_CLOSE_SOURCE?$AA@
CONST	SEGMENT
??_C@_0BH@MMLBEHAM@DUPLICATE_CLOSE_SOURCE?$AA@ DB 'DUPLICATE_CLOSE_SOURCE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KAIAGNIF@DUPLICATE_SAME_ACCESS?$AA@
CONST	SEGMENT
??_C@_0BG@KAIAGNIF@DUPLICATE_SAME_ACCESS?$AA@ DB 'DUPLICATE_SAME_ACCESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CNJAILLO@CREATE_NEW_PROCESS_GROUP?$AA@
CONST	SEGMENT
??_C@_0BJ@CNJAILLO@CREATE_NEW_PROCESS_GROUP?$AA@ DB 'CREATE_NEW_PROCESS_G'
	DB	'ROUP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HMIPFELD@CREATE_NEW_CONSOLE?$AA@
CONST	SEGMENT
??_C@_0BD@HMIPFELD@CREATE_NEW_CONSOLE?$AA@ DB 'CREATE_NEW_CONSOLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IAMABJLG@Overlapped?$AA@
CONST	SEGMENT
??_C@_0L@IAMABJLG@Overlapped?$AA@ DB 'Overlapped', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit__winapi
_TEXT	SEGMENT
d$ = 32
m$ = 40
PyInit__winapi PROC					; COMDAT

; 1265 : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1266 :     PyObject *d;
; 1267 :     PyObject *m;
; 1268 : 
; 1269 :     if (PyType_Ready(&OverlappedType) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:OverlappedType
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	7d 07		 jge	 SHORT $LN2@PyInit__wi

; 1270 :         return NULL;

  00014	33 c0		 xor	 eax, eax
  00016	e9 c6 06 00 00	 jmp	 $LN3@PyInit__wi
$LN2@PyInit__wi:

; 1271 : 
; 1272 :     m = PyModule_Create(&winapi_module);

  0001b	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:winapi_module
  00027	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  0002c	48 89 44 24 28	 mov	 QWORD PTR m$[rsp], rax

; 1273 :     if (m == NULL)

  00031	48 83 7c 24 28
	00		 cmp	 QWORD PTR m$[rsp], 0
  00037	75 07		 jne	 SHORT $LN1@PyInit__wi

; 1274 :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 a1 06 00 00	 jmp	 $LN3@PyInit__wi
$LN1@PyInit__wi:

; 1275 :     d = PyModule_GetDict(m);

  00040	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00045	e8 00 00 00 00	 call	 PyModule_GetDict
  0004a	48 89 44 24 20	 mov	 QWORD PTR d$[rsp], rax

; 1276 : 
; 1277 :     PyDict_SetItemString(d, "Overlapped", (PyObject *) &OverlappedType);

  0004f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:OverlappedType
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@IAMABJLG@Overlapped?$AA@
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00062	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1278 : 
; 1279 :     /* constants */
; 1280 :     WINAPI_CONSTANT(F_DWORD, CREATE_NEW_CONSOLE);

  00067	ba 10 00 00 00	 mov	 edx, 16
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00073	e8 00 00 00 00	 call	 Py_BuildValue
  00078	4c 8b c0	 mov	 r8, rax
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@HMIPFELD@CREATE_NEW_CONSOLE?$AA@
  00082	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00087	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1281 :     WINAPI_CONSTANT(F_DWORD, CREATE_NEW_PROCESS_GROUP);

  0008c	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00098	e8 00 00 00 00	 call	 Py_BuildValue
  0009d	4c 8b c0	 mov	 r8, rax
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CNJAILLO@CREATE_NEW_PROCESS_GROUP?$AA@
  000a7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  000ac	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1282 :     WINAPI_CONSTANT(F_DWORD, DUPLICATE_SAME_ACCESS);

  000b1	ba 02 00 00 00	 mov	 edx, 2
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  000bd	e8 00 00 00 00	 call	 Py_BuildValue
  000c2	4c 8b c0	 mov	 r8, rax
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@KAIAGNIF@DUPLICATE_SAME_ACCESS?$AA@
  000cc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  000d1	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1283 :     WINAPI_CONSTANT(F_DWORD, DUPLICATE_CLOSE_SOURCE);

  000d6	ba 01 00 00 00	 mov	 edx, 1
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  000e2	e8 00 00 00 00	 call	 Py_BuildValue
  000e7	4c 8b c0	 mov	 r8, rax
  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MMLBEHAM@DUPLICATE_CLOSE_SOURCE?$AA@
  000f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  000f6	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1284 :     WINAPI_CONSTANT(F_DWORD, ERROR_ALREADY_EXISTS);

  000fb	ba b7 00 00 00	 mov	 edx, 183		; 000000b7H
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00107	e8 00 00 00 00	 call	 Py_BuildValue
  0010c	4c 8b c0	 mov	 r8, rax
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@ONPBHKDO@ERROR_ALREADY_EXISTS?$AA@
  00116	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0011b	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1285 :     WINAPI_CONSTANT(F_DWORD, ERROR_BROKEN_PIPE);

  00120	ba 6d 00 00 00	 mov	 edx, 109		; 0000006dH
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0012c	e8 00 00 00 00	 call	 Py_BuildValue
  00131	4c 8b c0	 mov	 r8, rax
  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@BJHNEMJG@ERROR_BROKEN_PIPE?$AA@
  0013b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00140	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1286 :     WINAPI_CONSTANT(F_DWORD, ERROR_IO_PENDING);

  00145	ba e5 03 00 00	 mov	 edx, 997		; 000003e5H
  0014a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00151	e8 00 00 00 00	 call	 Py_BuildValue
  00156	4c 8b c0	 mov	 r8, rax
  00159	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@
  00160	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00165	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1287 :     WINAPI_CONSTANT(F_DWORD, ERROR_MORE_DATA);

  0016a	ba ea 00 00 00	 mov	 edx, 234		; 000000eaH
  0016f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00176	e8 00 00 00 00	 call	 Py_BuildValue
  0017b	4c 8b c0	 mov	 r8, rax
  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@
  00185	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0018a	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1288 :     WINAPI_CONSTANT(F_DWORD, ERROR_NETNAME_DELETED);

  0018f	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0019b	e8 00 00 00 00	 call	 Py_BuildValue
  001a0	4c 8b c0	 mov	 r8, rax
  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@JJLAGMLA@ERROR_NETNAME_DELETED?$AA@
  001aa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  001af	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1289 :     WINAPI_CONSTANT(F_DWORD, ERROR_NO_SYSTEM_RESOURCES);

  001b4	ba aa 05 00 00	 mov	 edx, 1450		; 000005aaH
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  001c0	e8 00 00 00 00	 call	 Py_BuildValue
  001c5	4c 8b c0	 mov	 r8, rax
  001c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@FPFJCKNG@ERROR_NO_SYSTEM_RESOURCES?$AA@
  001cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  001d4	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1290 :     WINAPI_CONSTANT(F_DWORD, ERROR_MORE_DATA);

  001d9	ba ea 00 00 00	 mov	 edx, 234		; 000000eaH
  001de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  001e5	e8 00 00 00 00	 call	 Py_BuildValue
  001ea	4c 8b c0	 mov	 r8, rax
  001ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@
  001f4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  001f9	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1291 :     WINAPI_CONSTANT(F_DWORD, ERROR_NETNAME_DELETED);

  001fe	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0020a	e8 00 00 00 00	 call	 Py_BuildValue
  0020f	4c 8b c0	 mov	 r8, rax
  00212	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@JJLAGMLA@ERROR_NETNAME_DELETED?$AA@
  00219	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0021e	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1292 :     WINAPI_CONSTANT(F_DWORD, ERROR_NO_DATA);

  00223	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  00228	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0022f	e8 00 00 00 00	 call	 Py_BuildValue
  00234	4c 8b c0	 mov	 r8, rax
  00237	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@HIPCDKGC@ERROR_NO_DATA?$AA@
  0023e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00243	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1293 :     WINAPI_CONSTANT(F_DWORD, ERROR_NO_SYSTEM_RESOURCES);

  00248	ba aa 05 00 00	 mov	 edx, 1450		; 000005aaH
  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00254	e8 00 00 00 00	 call	 Py_BuildValue
  00259	4c 8b c0	 mov	 r8, rax
  0025c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@FPFJCKNG@ERROR_NO_SYSTEM_RESOURCES?$AA@
  00263	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00268	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1294 :     WINAPI_CONSTANT(F_DWORD, ERROR_OPERATION_ABORTED);

  0026d	ba e3 03 00 00	 mov	 edx, 995		; 000003e3H
  00272	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00279	e8 00 00 00 00	 call	 Py_BuildValue
  0027e	4c 8b c0	 mov	 r8, rax
  00281	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@EDIDNLB@ERROR_OPERATION_ABORTED?$AA@
  00288	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0028d	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1295 :     WINAPI_CONSTANT(F_DWORD, ERROR_PIPE_BUSY);

  00292	ba e7 00 00 00	 mov	 edx, 231		; 000000e7H
  00297	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0029e	e8 00 00 00 00	 call	 Py_BuildValue
  002a3	4c 8b c0	 mov	 r8, rax
  002a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@KIGJMOFJ@ERROR_PIPE_BUSY?$AA@
  002ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  002b2	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1296 :     WINAPI_CONSTANT(F_DWORD, ERROR_PIPE_CONNECTED);

  002b7	ba 17 02 00 00	 mov	 edx, 535		; 00000217H
  002bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  002c3	e8 00 00 00 00	 call	 Py_BuildValue
  002c8	4c 8b c0	 mov	 r8, rax
  002cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@PHEPDDDD@ERROR_PIPE_CONNECTED?$AA@
  002d2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  002d7	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1297 :     WINAPI_CONSTANT(F_DWORD, ERROR_SEM_TIMEOUT);

  002dc	ba 79 00 00 00	 mov	 edx, 121		; 00000079H
  002e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  002e8	e8 00 00 00 00	 call	 Py_BuildValue
  002ed	4c 8b c0	 mov	 r8, rax
  002f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@BPAFPFHD@ERROR_SEM_TIMEOUT?$AA@
  002f7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  002fc	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1298 :     WINAPI_CONSTANT(F_DWORD, FILE_FLAG_FIRST_PIPE_INSTANCE);

  00301	ba 00 00 08 00	 mov	 edx, 524288		; 00080000H
  00306	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0030d	e8 00 00 00 00	 call	 Py_BuildValue
  00312	4c 8b c0	 mov	 r8, rax
  00315	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@PKHOEDGF@FILE_FLAG_FIRST_PIPE_INSTANCE?$AA@
  0031c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00321	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1299 :     WINAPI_CONSTANT(F_DWORD, FILE_FLAG_OVERLAPPED);

  00326	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  0032b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00332	e8 00 00 00 00	 call	 Py_BuildValue
  00337	4c 8b c0	 mov	 r8, rax
  0033a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@IKEPHOOJ@FILE_FLAG_OVERLAPPED?$AA@
  00341	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00346	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1300 :     WINAPI_CONSTANT(F_DWORD, FILE_GENERIC_READ);

  0034b	ba 89 00 12 00	 mov	 edx, 1179785		; 00120089H
  00350	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00357	e8 00 00 00 00	 call	 Py_BuildValue
  0035c	4c 8b c0	 mov	 r8, rax
  0035f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@GMNABHGN@FILE_GENERIC_READ?$AA@
  00366	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0036b	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1301 :     WINAPI_CONSTANT(F_DWORD, FILE_GENERIC_WRITE);

  00370	ba 16 01 12 00	 mov	 edx, 1179926		; 00120116H
  00375	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0037c	e8 00 00 00 00	 call	 Py_BuildValue
  00381	4c 8b c0	 mov	 r8, rax
  00384	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@OFPOCHAM@FILE_GENERIC_WRITE?$AA@
  0038b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00390	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1302 :     WINAPI_CONSTANT(F_DWORD, GENERIC_READ);

  00395	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  0039a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  003a1	e8 00 00 00 00	 call	 Py_BuildValue
  003a6	4c 8b c0	 mov	 r8, rax
  003a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@INABCMMB@GENERIC_READ?$AA@
  003b0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  003b5	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1303 :     WINAPI_CONSTANT(F_DWORD, GENERIC_WRITE);

  003ba	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  003bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  003c6	e8 00 00 00 00	 call	 Py_BuildValue
  003cb	4c 8b c0	 mov	 r8, rax
  003ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@DKHPBJPE@GENERIC_WRITE?$AA@
  003d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  003da	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1304 :     WINAPI_CONSTANT(F_DWORD, INFINITE);

  003df	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  003e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  003eb	e8 00 00 00 00	 call	 Py_BuildValue
  003f0	4c 8b c0	 mov	 r8, rax
  003f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LPDIFJIG@INFINITE?$AA@
  003fa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  003ff	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1305 :     WINAPI_CONSTANT(F_DWORD, NMPWAIT_WAIT_FOREVER);

  00404	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  00409	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00410	e8 00 00 00 00	 call	 Py_BuildValue
  00415	4c 8b c0	 mov	 r8, rax
  00418	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@JONJFBOM@NMPWAIT_WAIT_FOREVER?$AA@
  0041f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00424	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1306 :     WINAPI_CONSTANT(F_DWORD, OPEN_EXISTING);

  00429	ba 03 00 00 00	 mov	 edx, 3
  0042e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00435	e8 00 00 00 00	 call	 Py_BuildValue
  0043a	4c 8b c0	 mov	 r8, rax
  0043d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@PDPODOPO@OPEN_EXISTING?$AA@
  00444	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00449	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1307 :     WINAPI_CONSTANT(F_DWORD, PIPE_ACCESS_DUPLEX);

  0044e	ba 03 00 00 00	 mov	 edx, 3
  00453	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0045a	e8 00 00 00 00	 call	 Py_BuildValue
  0045f	4c 8b c0	 mov	 r8, rax
  00462	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@FFBOJLDP@PIPE_ACCESS_DUPLEX?$AA@
  00469	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0046e	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1308 :     WINAPI_CONSTANT(F_DWORD, PIPE_ACCESS_INBOUND);

  00473	ba 01 00 00 00	 mov	 edx, 1
  00478	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0047f	e8 00 00 00 00	 call	 Py_BuildValue
  00484	4c 8b c0	 mov	 r8, rax
  00487	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@JNPGDFFP@PIPE_ACCESS_INBOUND?$AA@
  0048e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00493	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1309 :     WINAPI_CONSTANT(F_DWORD, PIPE_READMODE_MESSAGE);

  00498	ba 02 00 00 00	 mov	 edx, 2
  0049d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  004a4	e8 00 00 00 00	 call	 Py_BuildValue
  004a9	4c 8b c0	 mov	 r8, rax
  004ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@NOJMDBGL@PIPE_READMODE_MESSAGE?$AA@
  004b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  004b8	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1310 :     WINAPI_CONSTANT(F_DWORD, PIPE_TYPE_MESSAGE);

  004bd	ba 04 00 00 00	 mov	 edx, 4
  004c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  004c9	e8 00 00 00 00	 call	 Py_BuildValue
  004ce	4c 8b c0	 mov	 r8, rax
  004d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DPNGHAPK@PIPE_TYPE_MESSAGE?$AA@
  004d8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  004dd	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1311 :     WINAPI_CONSTANT(F_DWORD, PIPE_UNLIMITED_INSTANCES);

  004e2	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  004e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  004ee	e8 00 00 00 00	 call	 Py_BuildValue
  004f3	4c 8b c0	 mov	 r8, rax
  004f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KDCCODEA@PIPE_UNLIMITED_INSTANCES?$AA@
  004fd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00502	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1312 :     WINAPI_CONSTANT(F_DWORD, PIPE_WAIT);

  00507	33 d2		 xor	 edx, edx
  00509	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00510	e8 00 00 00 00	 call	 Py_BuildValue
  00515	4c 8b c0	 mov	 r8, rax
  00518	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09GBJKLFDL@PIPE_WAIT?$AA@
  0051f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00524	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1313 :     WINAPI_CONSTANT(F_DWORD, PROCESS_ALL_ACCESS);

  00529	ba ff ff 1f 00	 mov	 edx, 2097151		; 001fffffH
  0052e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00535	e8 00 00 00 00	 call	 Py_BuildValue
  0053a	4c 8b c0	 mov	 r8, rax
  0053d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@COCJCFIN@PROCESS_ALL_ACCESS?$AA@
  00544	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00549	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1314 :     WINAPI_CONSTANT(F_DWORD, PROCESS_DUP_HANDLE);

  0054e	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00553	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0055a	e8 00 00 00 00	 call	 Py_BuildValue
  0055f	4c 8b c0	 mov	 r8, rax
  00562	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@FNKPIEBO@PROCESS_DUP_HANDLE?$AA@
  00569	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0056e	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1315 :     WINAPI_CONSTANT(F_DWORD, STARTF_USESHOWWINDOW);

  00573	ba 01 00 00 00	 mov	 edx, 1
  00578	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0057f	e8 00 00 00 00	 call	 Py_BuildValue
  00584	4c 8b c0	 mov	 r8, rax
  00587	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@EKLPBPPK@STARTF_USESHOWWINDOW?$AA@
  0058e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00593	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1316 :     WINAPI_CONSTANT(F_DWORD, STARTF_USESTDHANDLES);

  00598	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0059d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  005a4	e8 00 00 00 00	 call	 Py_BuildValue
  005a9	4c 8b c0	 mov	 r8, rax
  005ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KPBHCKBG@STARTF_USESTDHANDLES?$AA@
  005b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  005b8	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1317 :     WINAPI_CONSTANT(F_DWORD, STD_INPUT_HANDLE);

  005bd	ba f6 ff ff ff	 mov	 edx, -10		; fffffff6H
  005c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  005c9	e8 00 00 00 00	 call	 Py_BuildValue
  005ce	4c 8b c0	 mov	 r8, rax
  005d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@NBEHNGDN@STD_INPUT_HANDLE?$AA@
  005d8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  005dd	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1318 :     WINAPI_CONSTANT(F_DWORD, STD_OUTPUT_HANDLE);

  005e2	ba f5 ff ff ff	 mov	 edx, -11		; fffffff5H
  005e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  005ee	e8 00 00 00 00	 call	 Py_BuildValue
  005f3	4c 8b c0	 mov	 r8, rax
  005f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@PDBIEEGD@STD_OUTPUT_HANDLE?$AA@
  005fd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00602	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1319 :     WINAPI_CONSTANT(F_DWORD, STD_ERROR_HANDLE);

  00607	ba f4 ff ff ff	 mov	 edx, -12		; fffffff4H
  0060c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00613	e8 00 00 00 00	 call	 Py_BuildValue
  00618	4c 8b c0	 mov	 r8, rax
  0061b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@FJBFBONB@STD_ERROR_HANDLE?$AA@
  00622	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00627	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1320 :     WINAPI_CONSTANT(F_DWORD, STILL_ACTIVE);

  0062c	ba 03 01 00 00	 mov	 edx, 259		; 00000103H
  00631	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00638	e8 00 00 00 00	 call	 Py_BuildValue
  0063d	4c 8b c0	 mov	 r8, rax
  00640	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@EDJFMDHN@STILL_ACTIVE?$AA@
  00647	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0064c	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1321 :     WINAPI_CONSTANT(F_DWORD, SW_HIDE);

  00651	33 d2		 xor	 edx, edx
  00653	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0065a	e8 00 00 00 00	 call	 Py_BuildValue
  0065f	4c 8b c0	 mov	 r8, rax
  00662	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CONMCDML@SW_HIDE?$AA@
  00669	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  0066e	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1322 :     WINAPI_CONSTANT(F_DWORD, WAIT_OBJECT_0);

  00673	33 d2		 xor	 edx, edx
  00675	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  0067c	e8 00 00 00 00	 call	 Py_BuildValue
  00681	4c 8b c0	 mov	 r8, rax
  00684	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@BHMMAMPF@WAIT_OBJECT_0?$AA@
  0068b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00690	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1323 :     WINAPI_CONSTANT(F_DWORD, WAIT_TIMEOUT);

  00695	ba 02 01 00 00	 mov	 edx, 258		; 00000102H
  0069a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  006a1	e8 00 00 00 00	 call	 Py_BuildValue
  006a6	4c 8b c0	 mov	 r8, rax
  006a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MLFIMDEJ@WAIT_TIMEOUT?$AA@
  006b0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  006b5	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1324 : 
; 1325 :     WINAPI_CONSTANT("i", NULL);

  006ba	33 d2		 xor	 edx, edx
  006bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  006c3	e8 00 00 00 00	 call	 Py_BuildValue
  006c8	4c 8b c0	 mov	 r8, rax
  006cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04HIBGFPH@NULL?$AA@
  006d2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  006d7	e8 00 00 00 00	 call	 PyDict_SetItemString

; 1326 : 
; 1327 :     return m;

  006dc	48 8b 44 24 28	 mov	 rax, QWORD PTR m$[rsp]
$LN3@PyInit__wi:

; 1328 : }

  006e1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  006e5	c3		 ret	 0
PyInit__winapi ENDP
_TEXT	ENDS
END
