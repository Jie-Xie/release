; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07HKKFLOCI@marshal?$AA@			; `string'
PUBLIC	??_C@_05OCDPKIEO@loads?$AA@			; `string'
PUBLIC	??_C@_05HFMFBBBE@dumps?$AA@			; `string'
PUBLIC	??_C@_04EONOHKEP@load?$AA@			; `string'
PUBLIC	??_C@_04GGLOKIEE@dump?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
;	COMDAT ??_C@_07HKKFLOCI@marshal?$AA@
CONST	SEGMENT
??_C@_07HKKFLOCI@marshal?$AA@ DB 'marshal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OCDPKIEO@loads?$AA@
CONST	SEGMENT
??_C@_05OCDPKIEO@loads?$AA@ DB 'loads', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFMFBBBE@dumps?$AA@
CONST	SEGMENT
??_C@_05HFMFBBBE@dumps?$AA@ DB 'dumps', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EONOHKEP@load?$AA@
CONST	SEGMENT
??_C@_04EONOHKEP@load?$AA@ DB 'load', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGLOKIEE@dump?$AA@
CONST	SEGMENT
??_C@_04GGLOKIEE@dump?$AA@ DB 'dump', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
dump_doc DB	'dump(value, file[, version])', 0aH, 0aH, 'Write the valu'
	DB	'e on the open file. The value must be a supported type.', 0aH
	DB	'The file must be an open file object such as sys.stdout or re'
	DB	'turned by', 0aH, 'open() or os.popen(). It must be opened in '
	DB	'binary mode (''wb'' or ''w+b'').', 0aH, 0aH, 'If the value ha'
	DB	's (or contains an object that has) an unsupported type, a', 0aH
	DB	'ValueError exception is raised ', 0e2H, 080H, 094H, ' but gar'
	DB	'bage data will also be written', 0aH, 'to the file. The objec'
	DB	't will not be properly read back by load()', 0aH, 0aH, 'The v'
	DB	'ersion argument indicates the data format that dump should us'
	DB	'e.', 00H
	ORG $+3
load_doc DB	'load(file)', 0aH, 0aH, 'Read one value from the open fil'
	DB	'e and return it. If no valid value is', 0aH, 'read (e.g. beca'
	DB	'use the data has a different Python version', 0e2H, 080H, 099H
	DB	's', 0aH, 'incompatible marshal format), raise EOFError, Value'
	DB	'Error or TypeError.', 0aH, 'The file must be an open file obj'
	DB	'ect opened in binary mode (''rb'' or', 0aH, '''r+b'').', 0aH, 0aH
	DB	'Note: If an object containing an unsupported type was marshal'
	DB	'led with', 0aH, 'dump(), load() will substitute None for the '
	DB	'unmarshallable type.', 00H
	ORG $+4
dumps_doc DB	'dumps(value[, version])', 0aH, 0aH, 'Return the string t'
	DB	'hat would be written to a file by dump(value, file).', 0aH, 'T'
	DB	'he value must be a supported type. Raise a ValueError excepti'
	DB	'on if', 0aH, 'value has (or contains an object that has) an u'
	DB	'nsupported type.', 0aH, 0aH, 'The version argument indicates '
	DB	'the data format that dumps should use.', 00H
	ORG $+4
loads_doc DB	'loads(bytes)', 0aH, 0aH, 'Convert the bytes object to a '
	DB	'value. If no valid value is found, raise', 0aH, 'EOFError, Va'
	DB	'lueError or TypeError. Extra characters in the input are', 0aH
	DB	'ignored.', 00H
	ORG $+13
marshal_methods DQ FLAT:??_C@_04GGLOKIEE@dump?$AA@
	DQ	FLAT:marshal_dump
	DD	01H
	ORG $+4
	DQ	FLAT:dump_doc
	DQ	FLAT:??_C@_04EONOHKEP@load?$AA@
	DQ	FLAT:marshal_load
	DD	08H
	ORG $+4
	DQ	FLAT:load_doc
	DQ	FLAT:??_C@_05HFMFBBBE@dumps?$AA@
	DQ	FLAT:marshal_dumps
	DD	01H
	ORG $+4
	DQ	FLAT:dumps_doc
	DQ	FLAT:??_C@_05OCDPKIEO@loads?$AA@
	DQ	FLAT:marshal_loads
	DD	01H
	ORG $+4
	DQ	FLAT:loads_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
module_doc DB	'This module contains functions that can read and write P'
	DB	'ython values in', 0aH, 'a binary format. The format is specif'
	DB	'ic to Python, but independent of', 0aH, 'machine architecture'
	DB	' issues.', 0aH, 0aH, 'Not all Python object types are support'
	DB	'ed; in general, only objects', 0aH, 'whose value is independe'
	DB	'nt from a particular invocation of Python can be', 0aH, 'writ'
	DB	'ten and read by this module. The following types are supporte'
	DB	'd:', 0aH, 'None, integers, floating point numbers, strings, b'
	DB	'ytes, bytearrays,', 0aH, 'tuples, lists, sets, dictionaries, '
	DB	'and code objects, where it', 0aH, 'should be understood that '
	DB	'tuples, lists and dictionaries are only', 0aH, 'supported as '
	DB	'long as the values contained therein are themselves', 0aH, 's'
	DB	'upported; and recursive lists and dictionaries should not be '
	DB	'written', 0aH, '(they will cause infinite loops).', 0aH, 0aH, 'V'
	DB	'ariables:', 0aH, 0aH, 'version -- indicates the format that t'
	DB	'he module uses. Version 0 is the', 0aH, '    historical forma'
	DB	't, version 1 shares interned strings and version 2', 0aH, '  '
	DB	'  uses a binary format for floating point numbers.', 0aH, 0aH
	DB	'Functions:', 0aH, 0aH, 'dump() -- write value to a file', 0aH
	DB	'load() -- read value from a file', 0aH, 'dumps() -- write val'
	DB	'ue to a string', 0aH, 'loads() -- read value from a string', 00H
	ORG $+1
marshalmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07HKKFLOCI@marshal?$AA@
	DQ	FLAT:module_doc
	DQ	0000000000000000H
	DQ	FLAT:marshal_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_read@?1??marshal_load@@9@9 DQ 0000000000000000H	; `marshal_load'::`2'::PyId_read
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
?PyId_write@?1??marshal_dump@@9@9 DQ 0000000000000000H	; `marshal_dump'::`2'::PyId_write
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
?PyId_read@?4??r_string@@9@9 DQ 0000000000000000H	; `r_string'::`5'::PyId_read
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
PUBLIC	PyMarshal_WriteLongToFile
;	COMDAT pdata
; File c:\src\pyparallel\python\marshal.c
pdata	SEGMENT
$pdata$PyMarshal_WriteLongToFile DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$PyMarshal_WriteLongToFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_WriteLongToFile DD 011201H
	DD	0c212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyMarshal_WriteLongToFile
_TEXT	SEGMENT
wf$ = 32
x$ = 112
fp$ = 120
version$ = 128
PyMarshal_WriteLongToFile PROC				; COMDAT

; 438  : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 439  :     WFILE wf;
; 440  :     wf.fp = fp;

  00012	48 8b 44 24 78	 mov	 rax, QWORD PTR fp$[rsp]
  00017	48 89 44 24 20	 mov	 QWORD PTR wf$[rsp], rax

; 441  :     wf.error = WFERR_OK;

  0001c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR wf$[rsp+8], 0

; 442  :     wf.depth = 0;

  00024	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR wf$[rsp+12], 0

; 443  :     wf.version = version;

  0002c	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR version$[rsp]
  00033	89 44 24 58	 mov	 DWORD PTR wf$[rsp+56], eax

; 444  :     w_long(x, &wf);

  00037	48 8d 54 24 20	 lea	 rdx, QWORD PTR wf$[rsp]
  0003c	8b 4c 24 70	 mov	 ecx, DWORD PTR x$[rsp]
  00040	e8 00 00 00 00	 call	 w_long

; 445  : }

  00045	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00049	c3		 ret	 0
PyMarshal_WriteLongToFile ENDP
_TEXT	ENDS
EXTRN	__imp_putc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_long DD imagerel w_long
	DD	imagerel w_long+557
	DD	imagerel $unwind$w_long
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_long DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT w_long
_TEXT	SEGMENT
x$ = 48
p$ = 56
w_long	PROC						; COMDAT

; 120  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 121  :     w_byte((char)( x      & 0xff), p);

  0000d	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  00012	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00016	74 1e		 je	 SHORT $LN16@w_long
  00018	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  0001c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00021	0f be c0	 movsx	 eax, al
  00024	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  00029	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0002c	8b c8		 mov	 ecx, eax
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00034	eb 57		 jmp	 SHORT $LN15@w_long
$LN16@w_long:
  00036	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  0003b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  00040	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00044	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00048	74 2b		 je	 SHORT $LN14@w_long
  0004a	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  0004e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00053	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  00058	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  0005c	88 01		 mov	 BYTE PTR [rcx], al
  0005e	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  00063	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00067	48 ff c0	 inc	 rax
  0006a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  0006f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00073	eb 18		 jmp	 SHORT $LN13@w_long
$LN14@w_long:
  00075	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  00079	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0007e	0f be c0	 movsx	 eax, al
  00081	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$[rsp]
  00086	8b c8		 mov	 ecx, eax
  00088	e8 00 00 00 00	 call	 w_more
$LN13@w_long:
$LN15@w_long:

; 122  :     w_byte((char)((x>> 8) & 0xff), p);

  0008d	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  00092	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00096	74 21		 je	 SHORT $LN12@w_long
  00098	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  0009c	c1 f8 08	 sar	 eax, 8
  0009f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000a4	0f be c0	 movsx	 eax, al
  000a7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  000ac	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000af	8b c8		 mov	 ecx, eax
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  000b7	eb 5d		 jmp	 SHORT $LN11@w_long
$LN12@w_long:
  000b9	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  000be	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  000c3	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  000c7	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  000cb	74 2e		 je	 SHORT $LN10@w_long
  000cd	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  000d1	c1 f8 08	 sar	 eax, 8
  000d4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000d9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  000de	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  000e2	88 01		 mov	 BYTE PTR [rcx], al
  000e4	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  000e9	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  000ed	48 ff c0	 inc	 rax
  000f0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  000f5	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  000f9	eb 1b		 jmp	 SHORT $LN9@w_long
$LN10@w_long:
  000fb	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  000ff	c1 f8 08	 sar	 eax, 8
  00102	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00107	0f be c0	 movsx	 eax, al
  0010a	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$[rsp]
  0010f	8b c8		 mov	 ecx, eax
  00111	e8 00 00 00 00	 call	 w_more
$LN9@w_long:
$LN11@w_long:

; 123  :     w_byte((char)((x>>16) & 0xff), p);

  00116	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  0011b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0011f	74 21		 je	 SHORT $LN8@w_long
  00121	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  00125	c1 f8 10	 sar	 eax, 16
  00128	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0012d	0f be c0	 movsx	 eax, al
  00130	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  00135	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00138	8b c8		 mov	 ecx, eax
  0013a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00140	eb 5d		 jmp	 SHORT $LN7@w_long
$LN8@w_long:
  00142	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  00147	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  0014c	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00150	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00154	74 2e		 je	 SHORT $LN6@w_long
  00156	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  0015a	c1 f8 10	 sar	 eax, 16
  0015d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00162	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  00167	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  0016b	88 01		 mov	 BYTE PTR [rcx], al
  0016d	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  00172	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00176	48 ff c0	 inc	 rax
  00179	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  0017e	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00182	eb 1b		 jmp	 SHORT $LN5@w_long
$LN6@w_long:
  00184	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  00188	c1 f8 10	 sar	 eax, 16
  0018b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00190	0f be c0	 movsx	 eax, al
  00193	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$[rsp]
  00198	8b c8		 mov	 ecx, eax
  0019a	e8 00 00 00 00	 call	 w_more
$LN5@w_long:
$LN7@w_long:

; 124  :     w_byte((char)((x>>24) & 0xff), p);

  0019f	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  001a4	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001a8	74 21		 je	 SHORT $LN4@w_long
  001aa	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  001ae	c1 f8 18	 sar	 eax, 24
  001b1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001b6	0f be c0	 movsx	 eax, al
  001b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  001be	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  001c1	8b c8		 mov	 ecx, eax
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  001c9	eb 5d		 jmp	 SHORT $LN3@w_long
$LN4@w_long:
  001cb	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  001d0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  001d5	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  001d9	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  001dd	74 2e		 je	 SHORT $LN2@w_long
  001df	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  001e3	c1 f8 18	 sar	 eax, 24
  001e6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001eb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  001f0	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  001f4	88 01		 mov	 BYTE PTR [rcx], al
  001f6	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  001fb	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  001ff	48 ff c0	 inc	 rax
  00202	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  00207	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  0020b	eb 1b		 jmp	 SHORT $LN1@w_long
$LN2@w_long:
  0020d	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  00211	c1 f8 18	 sar	 eax, 24
  00214	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00219	0f be c0	 movsx	 eax, al
  0021c	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$[rsp]
  00221	8b c8		 mov	 ecx, eax
  00223	e8 00 00 00 00	 call	 w_more
$LN1@w_long:
$LN3@w_long:

; 125  : }

  00228	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0022c	c3		 ret	 0
w_long	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CM@EDALOFMD@?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CJ?$AA?$CI?$AAc?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EO@NKCNLAKI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAp@ ; `string'
PUBLIC	??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	__imp__wassert:PROC
EXTRN	_PyBytes_Resize:PROC
EXTRN	PyBytes_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_more DD imagerel w_more
	DD	imagerel w_more+414
	DD	imagerel $unwind$w_more
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_more DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT ??_C@_1CM@EDALOFMD@?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CJ?$AA?$CI?$AAc?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@EDALOFMD@?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CJ?$AA?$CI?$AAc?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@ DB '('
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H, '(', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, ')', 00H, '(', 00H, 'c', 00H, ')'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '(', 00H, 'c', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@NKCNLAKI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAp@
CONST	SEGMENT
??_C@_1EO@NKCNLAKI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAp@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H
	DB	'e', 00H, 's', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, '*', 00H, ')', 00H, 'p', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 't', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'l', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT w_more
_TEXT	SEGMENT
newsize$ = 32
size$ = 40
c$ = 64
p$ = 72
w_more	PROC						; COMDAT

; 77   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 78   :     Py_ssize_t size, newsize;
; 79   :     if (p->str == NULL)

  0000d	48 8b 44 24 48	 mov	 rax, QWORD PTR p$[rsp]
  00012	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00017	75 05		 jne	 SHORT $LN4@w_more

; 80   :         return; /* An error already occurred */

  00019	e9 7b 01 00 00	 jmp	 $LN5@w_more
$LN4@w_more:

; 81   :     size = PyBytes_Size(p->str);

  0001e	48 8b 44 24 48	 mov	 rax, QWORD PTR p$[rsp]
  00023	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00027	e8 00 00 00 00	 call	 PyBytes_Size
  0002c	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax

; 82   :     newsize = size + size + 1024;

  00031	48 8b 44 24 28	 mov	 rax, QWORD PTR size$[rsp]
  00036	48 8b 4c 24 28	 mov	 rcx, QWORD PTR size$[rsp]
  0003b	48 8d 84 08 00
	04 00 00	 lea	 rax, QWORD PTR [rax+rcx+1024]
  00043	48 89 44 24 20	 mov	 QWORD PTR newsize$[rsp], rax

; 83   :     if (newsize > 32*1024*1024) {

  00048	48 81 7c 24 20
	00 00 00 02	 cmp	 QWORD PTR newsize$[rsp], 33554432 ; 02000000H
  00051	7e 19		 jle	 SHORT $LN3@w_more

; 84   :         newsize = size + (size >> 3);           /* 12.5% overallocation */

  00053	48 8b 44 24 28	 mov	 rax, QWORD PTR size$[rsp]
  00058	48 c1 f8 03	 sar	 rax, 3
  0005c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR size$[rsp]
  00061	48 03 c8	 add	 rcx, rax
  00064	48 8b c1	 mov	 rax, rcx
  00067	48 89 44 24 20	 mov	 QWORD PTR newsize$[rsp], rax
$LN3@w_more:

; 85   :     }
; 86   :     if (_PyBytes_Resize(&p->str, newsize) != 0) {

  0006c	48 8b 44 24 48	 mov	 rax, QWORD PTR p$[rsp]
  00071	48 83 c0 18	 add	 rax, 24
  00075	48 8b 54 24 20	 mov	 rdx, QWORD PTR newsize$[rsp]
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 _PyBytes_Resize
  00082	85 c0		 test	 eax, eax
  00084	74 1f		 je	 SHORT $LN2@w_more

; 87   :         p->ptr = p->end = NULL;

  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR p$[rsp]
  0008b	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0
  00093	48 8b 44 24 48	 mov	 rax, QWORD PTR p$[rsp]
  00098	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 88   :     }
; 89   :     else {

  000a0	e9 f4 00 00 00	 jmp	 $LN1@w_more
$LN2@w_more:

; 90   :         p->ptr = PyBytes_AS_STRING((PyBytesObject *)p->str) + size;

  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR p$[rsp]
  000aa	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000ae	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b8	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000bd	85 c0		 test	 eax, eax
  000bf	75 1c		 jne	 SHORT $LN7@w_more
  000c1	41 b8 5a 00 00
	00		 mov	 r8d, 90			; 0000005aH
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@NKCNLAKI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAp@
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000db	33 c0		 xor	 eax, eax
$LN7@w_more:
  000dd	48 8b 44 24 48	 mov	 rax, QWORD PTR p$[rsp]
  000e2	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000e6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR size$[rsp]
  000eb	48 8d 44 08 78	 lea	 rax, QWORD PTR [rax+rcx+120]
  000f0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$[rsp]
  000f5	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 91   :         p->end =
; 92   :             PyBytes_AS_STRING((PyBytesObject *)p->str) + newsize;

  000f9	48 8b 44 24 48	 mov	 rax, QWORD PTR p$[rsp]
  000fe	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00102	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00106	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0010c	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00111	85 c0		 test	 eax, eax
  00113	75 1c		 jne	 SHORT $LN8@w_more
  00115	41 b8 5c 00 00
	00		 mov	 r8d, 92			; 0000005cH
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@NKCNLAKI@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAp@
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012f	33 c0		 xor	 eax, eax
$LN8@w_more:
  00131	48 8b 44 24 48	 mov	 rax, QWORD PTR p$[rsp]
  00136	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0013a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newsize$[rsp]
  0013f	48 8d 44 08 78	 lea	 rax, QWORD PTR [rax+rcx+120]
  00144	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$[rsp]
  00149	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 93   :         *p->ptr++ = Py_SAFE_DOWNCAST(c, int, char);

  0014d	0f be 44 24 40	 movsx	 eax, BYTE PTR c$[rsp]
  00152	3b 44 24 40	 cmp	 eax, DWORD PTR c$[rsp]
  00156	74 1c		 je	 SHORT $LN9@w_more
  00158	41 b8 5d 00 00
	00		 mov	 r8d, 93			; 0000005dH
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@EDALOFMD@?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CJ?$AA?$CI?$AAc?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00172	33 c0		 xor	 eax, eax
$LN9@w_more:
  00174	48 8b 44 24 48	 mov	 rax, QWORD PTR p$[rsp]
  00179	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0017d	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR c$[rsp]
  00182	88 08		 mov	 BYTE PTR [rax], cl
  00184	48 8b 44 24 48	 mov	 rax, QWORD PTR p$[rsp]
  00189	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0018d	48 ff c0	 inc	 rax
  00190	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$[rsp]
  00195	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
$LN1@w_more:
$LN5@w_more:

; 94   :     }
; 95   : }

  00199	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0019d	c3		 ret	 0
w_more	ENDP
_TEXT	ENDS
PUBLIC	PyMarshal_WriteObjectToFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_WriteObjectToFile DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$PyMarshal_WriteObjectToFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_WriteObjectToFile DD 011301H
	DD	0c213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyMarshal_WriteObjectToFile
_TEXT	SEGMENT
wf$ = 32
x$ = 112
fp$ = 120
version$ = 128
PyMarshal_WriteObjectToFile PROC			; COMDAT

; 449  : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 450  :     WFILE wf;
; 451  :     wf.fp = fp;

  00013	48 8b 44 24 78	 mov	 rax, QWORD PTR fp$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR wf$[rsp], rax

; 452  :     wf.error = WFERR_OK;

  0001d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR wf$[rsp+8], 0

; 453  :     wf.depth = 0;

  00025	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR wf$[rsp+12], 0

; 454  :     wf.version = version;

  0002d	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR version$[rsp]
  00034	89 44 24 58	 mov	 DWORD PTR wf$[rsp+56], eax

; 455  :     w_object(x, &wf);

  00038	48 8d 54 24 20	 lea	 rdx, QWORD PTR wf$[rsp]
  0003d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR x$[rsp]
  00042	e8 00 00 00 00	 call	 w_object

; 456  : }

  00047	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0004b	c3		 ret	 0
PyMarshal_WriteObjectToFile ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_1CI@CFDMCMDN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAt?$AAf?$AA8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_04LHHHFLPP@utf8?$AA@			; `string'
PUBLIC	??_C@_0O@BNPCNOJJ@surrogatepass?$AA@		; `string'
PUBLIC	??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyBuffer_Release:PROC
EXTRN	PyObject_GetBuffer:PROC
EXTRN	PyCode_Type:BYTE
EXTRN	PyIter_Next:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	PyObject_Size:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyFrozenSet_Type:BYTE
EXTRN	PySet_Type:BYTE
EXTRN	PyDict_Next:PROC
EXTRN	PyDict_Type:BYTE
EXTRN	PyList_Type:BYTE
EXTRN	PyTuple_Size:PROC
EXTRN	PyTuple_Type:BYTE
EXTRN	PyUnicode_AsEncodedString:PROC
EXTRN	PyUnicode_Type:BYTE
EXTRN	PyBytes_Type:BYTE
EXTRN	PyComplex_ImagAsDouble:PROC
EXTRN	PyComplex_RealAsDouble:PROC
EXTRN	PyComplex_Type:BYTE
EXTRN	PyMem_Free:PROC
EXTRN	strlen:PROC
EXTRN	PyOS_double_to_string:PROC
EXTRN	_PyFloat_Pack8:PROC
EXTRN	PyFloat_AsDouble:PROC
EXTRN	PyFloat_Type:BYTE
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	PyLong_Type:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_EllipsisObject:BYTE
EXTRN	PyExc_StopIteration:QWORD
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_object DD imagerel w_object
	DD	imagerel w_object+6320
	DD	imagerel $unwind$w_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_object DD 021101H
	DD	0210111H
xdata	ENDS
;	COMDAT ??_C@_1CI@CFDMCMDN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAt?$AAf?$AA8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@CFDMCMDN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAt?$AAf?$AA8?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'u', 00H, 't', 00H, 'f', 00H, '8', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LHHHFLPP@utf8?$AA@
CONST	SEGMENT
??_C@_04LHHHFLPP@utf8?$AA@ DB 'utf8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNPCNOJJ@surrogatepass?$AA@
CONST	SEGMENT
??_C@_0O@BNPCNOJJ@surrogatepass?$AA@ DB 'surrogatepass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'v', 00H, ')', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT w_object
_TEXT	SEGMENT
n$ = 48
i$ = 56
x$20571 = 64
ob$20573 = 72
buf$20584 = 80
buf$20592 = 88
buf$20611 = 96
buf$20621 = 104
utf8$20661 = 112
value$20718 = 120
key$20717 = 128
pos$20716 = 136
it$20734 = 144
value$20733 = 152
co$20766 = 160
view$20776 = 176
v$ = 272
p$ = 280
w_object PROC						; COMDAT

; 206  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 207  :     Py_ssize_t i, n;
; 208  : 
; 209  :     p->depth++;

  00011	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00019	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0001c	ff c0		 inc	 eax
  0001e	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00026	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 210  : 
; 211  :     if (p->depth > MAX_MARSHAL_STACK_DEPTH) {

  00029	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00031	81 78 0c dc 05
	00 00		 cmp	 DWORD PTR [rax+12], 1500 ; 000005dcH
  00038	7e 14		 jle	 SHORT $LN180@w_object

; 212  :         p->error = WFERR_NESTEDTOODEEP;

  0003a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00042	c7 40 08 02 00
	00 00		 mov	 DWORD PTR [rax+8], 2
  00049	e9 42 18 00 00	 jmp	 $LN179@w_object
$LN180@w_object:

; 213  :     }
; 214  :     else if (v == NULL) {

  0004e	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR v$[rsp], 0
  00057	0f 85 83 00 00
	00		 jne	 $LN178@w_object

; 215  :         w_byte(TYPE_NULL, p);

  0005d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00065	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00069	74 18		 je	 SHORT $LN177@w_object
  0006b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00073	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00076	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00081	eb 58		 jmp	 SHORT $LN176@w_object
$LN177@w_object:
  00083	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0008b	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00093	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00097	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  0009b	74 2c		 je	 SHORT $LN175@w_object
  0009d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  000a5	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  000a9	c6 00 30	 mov	 BYTE PTR [rax], 48	; 00000030H
  000ac	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  000b4	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  000b8	48 ff c0	 inc	 rax
  000bb	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  000c3	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  000c7	eb 12		 jmp	 SHORT $LN174@w_object
$LN175@w_object:
  000c9	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  000d1	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  000d6	e8 00 00 00 00	 call	 w_more
$LN174@w_object:
$LN176@w_object:

; 216  :     }
; 217  :     else if (v == Py_None) {

  000db	e9 b0 17 00 00	 jmp	 $LN173@w_object
$LN178@w_object:
  000e0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000e7	48 39 84 24 10
	01 00 00	 cmp	 QWORD PTR v$[rsp], rax
  000ef	0f 85 83 00 00
	00		 jne	 $LN172@w_object

; 218  :         w_byte(TYPE_NONE, p);

  000f5	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  000fd	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00101	74 18		 je	 SHORT $LN171@w_object
  00103	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0010b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0010e	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00113	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00119	eb 58		 jmp	 SHORT $LN170@w_object
$LN171@w_object:
  0011b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00123	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0012b	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0012f	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00133	74 2c		 je	 SHORT $LN169@w_object
  00135	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0013d	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00141	c6 00 4e	 mov	 BYTE PTR [rax], 78	; 0000004eH
  00144	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0014c	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00150	48 ff c0	 inc	 rax
  00153	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0015b	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  0015f	eb 12		 jmp	 SHORT $LN168@w_object
$LN169@w_object:
  00161	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00169	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0016e	e8 00 00 00 00	 call	 w_more
$LN168@w_object:
$LN170@w_object:

; 219  :     }
; 220  :     else if (v == PyExc_StopIteration) {

  00173	e9 18 17 00 00	 jmp	 $LN167@w_object
$LN172@w_object:
  00178	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_StopIteration
  0017f	48 39 84 24 10
	01 00 00	 cmp	 QWORD PTR v$[rsp], rax
  00187	0f 85 83 00 00
	00		 jne	 $LN166@w_object

; 221  :         w_byte(TYPE_STOPITER, p);

  0018d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00195	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00199	74 18		 je	 SHORT $LN165@w_object
  0019b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  001a3	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001a6	b9 53 00 00 00	 mov	 ecx, 83			; 00000053H
  001ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  001b1	eb 58		 jmp	 SHORT $LN164@w_object
$LN165@w_object:
  001b3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  001bb	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  001c3	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  001c7	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  001cb	74 2c		 je	 SHORT $LN163@w_object
  001cd	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  001d5	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  001d9	c6 00 53	 mov	 BYTE PTR [rax], 83	; 00000053H
  001dc	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  001e4	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  001e8	48 ff c0	 inc	 rax
  001eb	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  001f3	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  001f7	eb 12		 jmp	 SHORT $LN162@w_object
$LN163@w_object:
  001f9	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00201	b9 53 00 00 00	 mov	 ecx, 83			; 00000053H
  00206	e8 00 00 00 00	 call	 w_more
$LN162@w_object:
$LN164@w_object:

; 222  :     }
; 223  :     else if (v == Py_Ellipsis) {

  0020b	e9 80 16 00 00	 jmp	 $LN161@w_object
$LN166@w_object:
  00210	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_EllipsisObject
  00217	48 39 84 24 10
	01 00 00	 cmp	 QWORD PTR v$[rsp], rax
  0021f	0f 85 83 00 00
	00		 jne	 $LN160@w_object

; 224  :         w_byte(TYPE_ELLIPSIS, p);

  00225	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0022d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00231	74 18		 je	 SHORT $LN159@w_object
  00233	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0023b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0023e	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00243	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00249	eb 58		 jmp	 SHORT $LN158@w_object
$LN159@w_object:
  0024b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00253	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0025b	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0025f	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00263	74 2c		 je	 SHORT $LN157@w_object
  00265	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0026d	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00271	c6 00 2e	 mov	 BYTE PTR [rax], 46	; 0000002eH
  00274	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0027c	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00280	48 ff c0	 inc	 rax
  00283	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0028b	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  0028f	eb 12		 jmp	 SHORT $LN156@w_object
$LN157@w_object:
  00291	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00299	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  0029e	e8 00 00 00 00	 call	 w_more
$LN156@w_object:
$LN158@w_object:

; 225  :     }
; 226  :     else if (v == Py_False) {

  002a3	e9 e8 15 00 00	 jmp	 $LN155@w_object
$LN160@w_object:
  002a8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  002af	48 39 84 24 10
	01 00 00	 cmp	 QWORD PTR v$[rsp], rax
  002b7	0f 85 83 00 00
	00		 jne	 $LN154@w_object

; 227  :         w_byte(TYPE_FALSE, p);

  002bd	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  002c5	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  002c9	74 18		 je	 SHORT $LN153@w_object
  002cb	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  002d3	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  002d6	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  002db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  002e1	eb 58		 jmp	 SHORT $LN152@w_object
$LN153@w_object:
  002e3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  002eb	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  002f3	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  002f7	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  002fb	74 2c		 je	 SHORT $LN151@w_object
  002fd	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00305	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00309	c6 00 46	 mov	 BYTE PTR [rax], 70	; 00000046H
  0030c	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00314	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00318	48 ff c0	 inc	 rax
  0031b	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00323	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00327	eb 12		 jmp	 SHORT $LN150@w_object
$LN151@w_object:
  00329	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00331	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00336	e8 00 00 00 00	 call	 w_more
$LN150@w_object:
$LN152@w_object:

; 228  :     }
; 229  :     else if (v == Py_True) {

  0033b	e9 50 15 00 00	 jmp	 $LN149@w_object
$LN154@w_object:
  00340	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00347	48 39 84 24 10
	01 00 00	 cmp	 QWORD PTR v$[rsp], rax
  0034f	0f 85 83 00 00
	00		 jne	 $LN148@w_object

; 230  :         w_byte(TYPE_TRUE, p);

  00355	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0035d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00361	74 18		 je	 SHORT $LN147@w_object
  00363	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0036b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0036e	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  00373	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00379	eb 58		 jmp	 SHORT $LN146@w_object
$LN147@w_object:
  0037b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00383	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0038b	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0038f	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00393	74 2c		 je	 SHORT $LN145@w_object
  00395	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0039d	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  003a1	c6 00 54	 mov	 BYTE PTR [rax], 84	; 00000054H
  003a4	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  003ac	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  003b0	48 ff c0	 inc	 rax
  003b3	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  003bb	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  003bf	eb 12		 jmp	 SHORT $LN144@w_object
$LN145@w_object:
  003c1	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  003c9	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  003ce	e8 00 00 00 00	 call	 w_more
$LN144@w_object:
$LN146@w_object:

; 231  :     }
; 232  :     else if (PyLong_CheckExact(v)) {

  003d3	e9 b8 14 00 00	 jmp	 $LN143@w_object
$LN148@w_object:
  003d8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  003df	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  003e7	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  003eb	0f 85 df 00 00
	00		 jne	 $LN142@w_object

; 233  :         long x = PyLong_AsLong(v);

  003f1	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  003f9	e8 00 00 00 00	 call	 PyLong_AsLong
  003fe	89 44 24 40	 mov	 DWORD PTR x$20571[rsp], eax

; 234  :         if ((x == -1)  && PyErr_Occurred()) {

  00402	83 7c 24 40 ff	 cmp	 DWORD PTR x$20571[rsp], -1
  00407	75 33		 jne	 SHORT $LN141@w_object
  00409	e8 00 00 00 00	 call	 PyErr_Occurred
  0040e	48 85 c0	 test	 rax, rax
  00411	74 29		 je	 SHORT $LN141@w_object

; 235  :             PyLongObject *ob = (PyLongObject *)v;

  00413	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0041b	48 89 44 24 48	 mov	 QWORD PTR ob$20573[rsp], rax

; 236  :             PyErr_Clear();

  00420	e8 00 00 00 00	 call	 PyErr_Clear

; 237  :             w_PyLong(ob, p);

  00425	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  0042d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ob$20573[rsp]
  00432	e8 00 00 00 00	 call	 w_PyLong

; 238  :         }
; 239  :         else {

  00437	e9 8f 00 00 00	 jmp	 $LN140@w_object
$LN141@w_object:

; 240  : #if SIZEOF_LONG > 4
; 241  :             long y = Py_ARITHMETIC_RIGHT_SHIFT(long, x, 31);
; 242  :             if (y && y != -1) {
; 243  :                 /* Too large for TYPE_INT */
; 244  :                 w_PyLong((PyLongObject*)v, p);
; 245  :             }
; 246  :             else
; 247  : #endif
; 248  :             {
; 249  :                 w_byte(TYPE_INT, p);

  0043c	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00444	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00448	74 18		 je	 SHORT $LN139@w_object
  0044a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00452	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00455	b9 69 00 00 00	 mov	 ecx, 105		; 00000069H
  0045a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00460	eb 58		 jmp	 SHORT $LN138@w_object
$LN139@w_object:
  00462	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0046a	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00472	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00476	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  0047a	74 2c		 je	 SHORT $LN137@w_object
  0047c	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00484	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00488	c6 00 69	 mov	 BYTE PTR [rax], 105	; 00000069H
  0048b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00493	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00497	48 ff c0	 inc	 rax
  0049a	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  004a2	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  004a6	eb 12		 jmp	 SHORT $LN136@w_object
$LN137@w_object:
  004a8	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  004b0	b9 69 00 00 00	 mov	 ecx, 105		; 00000069H
  004b5	e8 00 00 00 00	 call	 w_more
$LN136@w_object:
$LN138@w_object:

; 250  :                 w_long(x, p);

  004ba	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  004c2	8b 4c 24 40	 mov	 ecx, DWORD PTR x$20571[rsp]
  004c6	e8 00 00 00 00	 call	 w_long
$LN140@w_object:

; 251  :             }
; 252  :         }

  004cb	e9 c0 13 00 00	 jmp	 $LN135@w_object
$LN142@w_object:

; 253  :     }
; 254  :     else if (PyFloat_CheckExact(v)) {

  004d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  004d7	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  004df	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  004e3	0f 85 5b 02 00
	00		 jne	 $LN134@w_object

; 255  :         if (p->version > 1) {

  004e9	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  004f1	83 78 38 01	 cmp	 DWORD PTR [rax+56], 1
  004f5	0f 8e cf 00 00
	00		 jle	 $LN133@w_object

; 256  :             unsigned char buf[8];
; 257  :             if (_PyFloat_Pack8(PyFloat_AsDouble(v),
; 258  :                                buf, 1) < 0) {

  004fb	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00503	e8 00 00 00 00	 call	 PyFloat_AsDouble
  00508	41 b8 01 00 00
	00		 mov	 r8d, 1
  0050e	48 8d 54 24 50	 lea	 rdx, QWORD PTR buf$20584[rsp]
  00513	e8 00 00 00 00	 call	 _PyFloat_Pack8
  00518	85 c0		 test	 eax, eax
  0051a	7d 14		 jge	 SHORT $LN132@w_object

; 259  :                 p->error = WFERR_UNMARSHALLABLE;

  0051c	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00524	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 260  :                 return;

  0052b	e9 78 13 00 00	 jmp	 $LN181@w_object
$LN132@w_object:

; 261  :             }
; 262  :             w_byte(TYPE_BINARY_FLOAT, p);

  00530	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00538	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0053c	74 18		 je	 SHORT $LN131@w_object
  0053e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00546	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00549	b9 67 00 00 00	 mov	 ecx, 103		; 00000067H
  0054e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00554	eb 58		 jmp	 SHORT $LN130@w_object
$LN131@w_object:
  00556	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0055e	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00566	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0056a	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  0056e	74 2c		 je	 SHORT $LN129@w_object
  00570	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00578	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0057c	c6 00 67	 mov	 BYTE PTR [rax], 103	; 00000067H
  0057f	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00587	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0058b	48 ff c0	 inc	 rax
  0058e	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00596	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  0059a	eb 12		 jmp	 SHORT $LN128@w_object
$LN129@w_object:
  0059c	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  005a4	b9 67 00 00 00	 mov	 ecx, 103		; 00000067H
  005a9	e8 00 00 00 00	 call	 w_more
$LN128@w_object:
$LN130@w_object:

; 263  :             w_string((char*)buf, 8, p);

  005ae	4c 8b 84 24 18
	01 00 00	 mov	 r8, QWORD PTR p$[rsp]
  005b6	ba 08 00 00 00	 mov	 edx, 8
  005bb	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$20584[rsp]
  005c0	e8 00 00 00 00	 call	 w_string

; 264  :         }
; 265  :         else {

  005c5	e9 75 01 00 00	 jmp	 $LN127@w_object
$LN133@w_object:

; 266  :             char *buf = PyOS_double_to_string(PyFloat_AS_DOUBLE(v),
; 267  :                                               'g', 17, 0, NULL);

  005ca	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  005d2	f2 0f 10 40 60	 movsdx	 xmm0, QWORD PTR [rax+96]
  005d7	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  005e0	45 33 c9	 xor	 r9d, r9d
  005e3	41 b8 11 00 00
	00		 mov	 r8d, 17
  005e9	b2 67		 mov	 dl, 103			; 00000067H
  005eb	e8 00 00 00 00	 call	 PyOS_double_to_string
  005f0	48 89 44 24 58	 mov	 QWORD PTR buf$20592[rsp], rax

; 268  :             if (!buf) {

  005f5	48 83 7c 24 58
	00		 cmp	 QWORD PTR buf$20592[rsp], 0
  005fb	75 14		 jne	 SHORT $LN126@w_object

; 269  :                 p->error = WFERR_NOMEMORY;

  005fd	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00605	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [rax+8], 3

; 270  :                 return;

  0060c	e9 97 12 00 00	 jmp	 $LN181@w_object
$LN126@w_object:

; 271  :             }
; 272  :             n = strlen(buf);

  00611	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buf$20592[rsp]
  00616	e8 00 00 00 00	 call	 strlen
  0061b	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 273  :             w_byte(TYPE_FLOAT, p);

  00620	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00628	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0062c	74 18		 je	 SHORT $LN125@w_object
  0062e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00636	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00639	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  0063e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00644	eb 58		 jmp	 SHORT $LN124@w_object
$LN125@w_object:
  00646	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0064e	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00656	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0065a	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  0065e	74 2c		 je	 SHORT $LN123@w_object
  00660	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00668	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0066c	c6 00 66	 mov	 BYTE PTR [rax], 102	; 00000066H
  0066f	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00677	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0067b	48 ff c0	 inc	 rax
  0067e	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00686	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  0068a	eb 12		 jmp	 SHORT $LN122@w_object
$LN123@w_object:
  0068c	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00694	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  00699	e8 00 00 00 00	 call	 w_more
$LN122@w_object:
$LN124@w_object:

; 274  :             w_byte((int)n, p);

  0069e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  006a6	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  006aa	74 17		 je	 SHORT $LN121@w_object
  006ac	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  006b4	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  006b7	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  006bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  006c1	eb 5b		 jmp	 SHORT $LN120@w_object
$LN121@w_object:
  006c3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  006cb	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  006d3	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  006d7	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  006db	74 30		 je	 SHORT $LN119@w_object
  006dd	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  006e5	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  006e9	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR n$[rsp]
  006ee	88 08		 mov	 BYTE PTR [rax], cl
  006f0	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  006f8	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  006fc	48 ff c0	 inc	 rax
  006ff	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00707	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  0070b	eb 11		 jmp	 SHORT $LN118@w_object
$LN119@w_object:
  0070d	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00715	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  00719	e8 00 00 00 00	 call	 w_more
$LN118@w_object:
$LN120@w_object:

; 275  :             w_string(buf, n, p);

  0071e	4c 8b 84 24 18
	01 00 00	 mov	 r8, QWORD PTR p$[rsp]
  00726	48 8b 54 24 30	 mov	 rdx, QWORD PTR n$[rsp]
  0072b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buf$20592[rsp]
  00730	e8 00 00 00 00	 call	 w_string

; 276  :             PyMem_Free(buf);

  00735	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buf$20592[rsp]
  0073a	e8 00 00 00 00	 call	 PyMem_Free
$LN127@w_object:

; 277  :         }

  0073f	e9 4c 11 00 00	 jmp	 $LN117@w_object
$LN134@w_object:

; 278  :     }
; 279  :     else if (PyComplex_CheckExact(v)) {

  00744	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyComplex_Type
  0074b	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00753	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00757	0f 85 9e 03 00
	00		 jne	 $LN116@w_object

; 280  :         if (p->version > 1) {

  0075d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00765	83 78 38 01	 cmp	 DWORD PTR [rax+56], 1
  00769	0f 8e 1b 01 00
	00		 jle	 $LN115@w_object

; 281  :             unsigned char buf[8];
; 282  :             if (_PyFloat_Pack8(PyComplex_RealAsDouble(v),
; 283  :                                buf, 1) < 0) {

  0076f	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00777	e8 00 00 00 00	 call	 PyComplex_RealAsDouble
  0077c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00782	48 8d 54 24 60	 lea	 rdx, QWORD PTR buf$20611[rsp]
  00787	e8 00 00 00 00	 call	 _PyFloat_Pack8
  0078c	85 c0		 test	 eax, eax
  0078e	7d 14		 jge	 SHORT $LN114@w_object

; 284  :                 p->error = WFERR_UNMARSHALLABLE;

  00790	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00798	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 285  :                 return;

  0079f	e9 04 11 00 00	 jmp	 $LN181@w_object
$LN114@w_object:

; 286  :             }
; 287  :             w_byte(TYPE_BINARY_COMPLEX, p);

  007a4	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  007ac	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  007b0	74 18		 je	 SHORT $LN113@w_object
  007b2	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  007ba	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  007bd	b9 79 00 00 00	 mov	 ecx, 121		; 00000079H
  007c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  007c8	eb 58		 jmp	 SHORT $LN112@w_object
$LN113@w_object:
  007ca	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  007d2	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  007da	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  007de	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  007e2	74 2c		 je	 SHORT $LN111@w_object
  007e4	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  007ec	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  007f0	c6 00 79	 mov	 BYTE PTR [rax], 121	; 00000079H
  007f3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  007fb	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  007ff	48 ff c0	 inc	 rax
  00802	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0080a	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  0080e	eb 12		 jmp	 SHORT $LN110@w_object
$LN111@w_object:
  00810	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00818	b9 79 00 00 00	 mov	 ecx, 121		; 00000079H
  0081d	e8 00 00 00 00	 call	 w_more
$LN110@w_object:
$LN112@w_object:

; 288  :             w_string((char*)buf, 8, p);

  00822	4c 8b 84 24 18
	01 00 00	 mov	 r8, QWORD PTR p$[rsp]
  0082a	ba 08 00 00 00	 mov	 edx, 8
  0082f	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$20611[rsp]
  00834	e8 00 00 00 00	 call	 w_string

; 289  :             if (_PyFloat_Pack8(PyComplex_ImagAsDouble(v),
; 290  :                                buf, 1) < 0) {

  00839	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00841	e8 00 00 00 00	 call	 PyComplex_ImagAsDouble
  00846	41 b8 01 00 00
	00		 mov	 r8d, 1
  0084c	48 8d 54 24 60	 lea	 rdx, QWORD PTR buf$20611[rsp]
  00851	e8 00 00 00 00	 call	 _PyFloat_Pack8
  00856	85 c0		 test	 eax, eax
  00858	7d 14		 jge	 SHORT $LN109@w_object

; 291  :                 p->error = WFERR_UNMARSHALLABLE;

  0085a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00862	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 292  :                 return;

  00869	e9 3a 10 00 00	 jmp	 $LN181@w_object
$LN109@w_object:

; 293  :             }
; 294  :             w_string((char*)buf, 8, p);

  0086e	4c 8b 84 24 18
	01 00 00	 mov	 r8, QWORD PTR p$[rsp]
  00876	ba 08 00 00 00	 mov	 edx, 8
  0087b	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$20611[rsp]
  00880	e8 00 00 00 00	 call	 w_string

; 295  :         }
; 296  :         else {

  00885	e9 6c 02 00 00	 jmp	 $LN108@w_object
$LN115@w_object:

; 297  :             char *buf;
; 298  :             w_byte(TYPE_COMPLEX, p);

  0088a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00892	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00896	74 18		 je	 SHORT $LN107@w_object
  00898	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  008a0	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  008a3	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  008a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  008ae	eb 58		 jmp	 SHORT $LN106@w_object
$LN107@w_object:
  008b0	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  008b8	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  008c0	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  008c4	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  008c8	74 2c		 je	 SHORT $LN105@w_object
  008ca	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  008d2	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  008d6	c6 00 78	 mov	 BYTE PTR [rax], 120	; 00000078H
  008d9	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  008e1	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  008e5	48 ff c0	 inc	 rax
  008e8	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  008f0	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  008f4	eb 12		 jmp	 SHORT $LN104@w_object
$LN105@w_object:
  008f6	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  008fe	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00903	e8 00 00 00 00	 call	 w_more
$LN104@w_object:
$LN106@w_object:

; 299  :             buf = PyOS_double_to_string(PyComplex_RealAsDouble(v),
; 300  :                                         'g', 17, 0, NULL);

  00908	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00910	e8 00 00 00 00	 call	 PyComplex_RealAsDouble
  00915	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0091e	45 33 c9	 xor	 r9d, r9d
  00921	41 b8 11 00 00
	00		 mov	 r8d, 17
  00927	b2 67		 mov	 dl, 103			; 00000067H
  00929	e8 00 00 00 00	 call	 PyOS_double_to_string
  0092e	48 89 44 24 68	 mov	 QWORD PTR buf$20621[rsp], rax

; 301  :             if (!buf) {

  00933	48 83 7c 24 68
	00		 cmp	 QWORD PTR buf$20621[rsp], 0
  00939	75 14		 jne	 SHORT $LN103@w_object

; 302  :                 p->error = WFERR_NOMEMORY;

  0093b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00943	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [rax+8], 3

; 303  :                 return;

  0094a	e9 59 0f 00 00	 jmp	 $LN181@w_object
$LN103@w_object:

; 304  :             }
; 305  :             n = strlen(buf);

  0094f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$20621[rsp]
  00954	e8 00 00 00 00	 call	 strlen
  00959	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 306  :             w_byte((int)n, p);

  0095e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00966	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0096a	74 17		 je	 SHORT $LN102@w_object
  0096c	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00974	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00977	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  0097b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00981	eb 5b		 jmp	 SHORT $LN101@w_object
$LN102@w_object:
  00983	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0098b	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00993	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00997	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  0099b	74 30		 je	 SHORT $LN100@w_object
  0099d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  009a5	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  009a9	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR n$[rsp]
  009ae	88 08		 mov	 BYTE PTR [rax], cl
  009b0	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  009b8	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  009bc	48 ff c0	 inc	 rax
  009bf	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  009c7	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  009cb	eb 11		 jmp	 SHORT $LN99@w_object
$LN100@w_object:
  009cd	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  009d5	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  009d9	e8 00 00 00 00	 call	 w_more
$LN99@w_object:
$LN101@w_object:

; 307  :             w_string(buf, n, p);

  009de	4c 8b 84 24 18
	01 00 00	 mov	 r8, QWORD PTR p$[rsp]
  009e6	48 8b 54 24 30	 mov	 rdx, QWORD PTR n$[rsp]
  009eb	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$20621[rsp]
  009f0	e8 00 00 00 00	 call	 w_string

; 308  :             PyMem_Free(buf);

  009f5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$20621[rsp]
  009fa	e8 00 00 00 00	 call	 PyMem_Free

; 309  :             buf = PyOS_double_to_string(PyComplex_ImagAsDouble(v),
; 310  :                                         'g', 17, 0, NULL);

  009ff	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00a07	e8 00 00 00 00	 call	 PyComplex_ImagAsDouble
  00a0c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00a15	45 33 c9	 xor	 r9d, r9d
  00a18	41 b8 11 00 00
	00		 mov	 r8d, 17
  00a1e	b2 67		 mov	 dl, 103			; 00000067H
  00a20	e8 00 00 00 00	 call	 PyOS_double_to_string
  00a25	48 89 44 24 68	 mov	 QWORD PTR buf$20621[rsp], rax

; 311  :             if (!buf) {

  00a2a	48 83 7c 24 68
	00		 cmp	 QWORD PTR buf$20621[rsp], 0
  00a30	75 14		 jne	 SHORT $LN98@w_object

; 312  :                 p->error = WFERR_NOMEMORY;

  00a32	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00a3a	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [rax+8], 3

; 313  :                 return;

  00a41	e9 62 0e 00 00	 jmp	 $LN181@w_object
$LN98@w_object:

; 314  :             }
; 315  :             n = strlen(buf);

  00a46	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$20621[rsp]
  00a4b	e8 00 00 00 00	 call	 strlen
  00a50	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 316  :             w_byte((int)n, p);

  00a55	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00a5d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00a61	74 17		 je	 SHORT $LN97@w_object
  00a63	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00a6b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00a6e	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  00a72	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00a78	eb 5b		 jmp	 SHORT $LN96@w_object
$LN97@w_object:
  00a7a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00a82	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00a8a	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00a8e	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00a92	74 30		 je	 SHORT $LN95@w_object
  00a94	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00a9c	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00aa0	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR n$[rsp]
  00aa5	88 08		 mov	 BYTE PTR [rax], cl
  00aa7	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00aaf	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00ab3	48 ff c0	 inc	 rax
  00ab6	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00abe	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00ac2	eb 11		 jmp	 SHORT $LN94@w_object
$LN95@w_object:
  00ac4	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00acc	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  00ad0	e8 00 00 00 00	 call	 w_more
$LN94@w_object:
$LN96@w_object:

; 317  :             w_string(buf, n, p);

  00ad5	4c 8b 84 24 18
	01 00 00	 mov	 r8, QWORD PTR p$[rsp]
  00add	48 8b 54 24 30	 mov	 rdx, QWORD PTR n$[rsp]
  00ae2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$20621[rsp]
  00ae7	e8 00 00 00 00	 call	 w_string

; 318  :             PyMem_Free(buf);

  00aec	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$20621[rsp]
  00af1	e8 00 00 00 00	 call	 PyMem_Free
$LN108@w_object:

; 319  :         }

  00af6	e9 95 0d 00 00	 jmp	 $LN93@w_object
$LN116@w_object:

; 320  :     }
; 321  :     else if (PyBytes_CheckExact(v)) {

  00afb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  00b02	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00b0a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00b0e	0f 85 19 01 00
	00		 jne	 $LN92@w_object

; 322  :         w_byte(TYPE_STRING, p);

  00b14	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00b1c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00b20	74 18		 je	 SHORT $LN91@w_object
  00b22	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00b2a	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00b2d	b9 73 00 00 00	 mov	 ecx, 115		; 00000073H
  00b32	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00b38	eb 58		 jmp	 SHORT $LN90@w_object
$LN91@w_object:
  00b3a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00b42	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00b4a	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00b4e	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00b52	74 2c		 je	 SHORT $LN89@w_object
  00b54	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00b5c	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00b60	c6 00 73	 mov	 BYTE PTR [rax], 115	; 00000073H
  00b63	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00b6b	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00b6f	48 ff c0	 inc	 rax
  00b72	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00b7a	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00b7e	eb 12		 jmp	 SHORT $LN88@w_object
$LN89@w_object:
  00b80	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00b88	b9 73 00 00 00	 mov	 ecx, 115		; 00000073H
  00b8d	e8 00 00 00 00	 call	 w_more
$LN88@w_object:
$LN90@w_object:

; 323  :         w_pstring(PyBytes_AS_STRING(v), PyBytes_GET_SIZE(v), p);

  00b92	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00b9a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00b9e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00ba4	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00ba9	85 c0		 test	 eax, eax
  00bab	75 1c		 jne	 SHORT $LN183@w_object
  00bad	41 b8 43 01 00
	00		 mov	 r8d, 323		; 00000143H
  00bb3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  00bba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  00bc1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00bc7	33 c0		 xor	 eax, eax
$LN183@w_object:
  00bc9	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00bd1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00bd5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00bdb	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00be0	85 c0		 test	 eax, eax
  00be2	75 1c		 jne	 SHORT $LN184@w_object
  00be4	41 b8 43 01 00
	00		 mov	 r8d, 323		; 00000143H
  00bea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  00bf1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  00bf8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00bfe	33 c0		 xor	 eax, eax
$LN184@w_object:
  00c00	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00c08	48 83 c0 78	 add	 rax, 120		; 00000078H
  00c0c	4c 8b 84 24 18
	01 00 00	 mov	 r8, QWORD PTR p$[rsp]
  00c14	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00c1c	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00c20	48 8b c8	 mov	 rcx, rax
  00c23	e8 00 00 00 00	 call	 w_pstring
  00c28	e9 63 0c 00 00	 jmp	 $LN87@w_object
$LN92@w_object:

; 324  :     }
; 325  :     else if (PyUnicode_CheckExact(v)) {

  00c2d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00c34	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00c3c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00c40	0f 85 6b 01 00
	00		 jne	 $LN86@w_object

; 326  :         PyObject *utf8;
; 327  :         utf8 = PyUnicode_AsEncodedString(v, "utf8", "surrogatepass");

  00c46	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@BNPCNOJJ@surrogatepass?$AA@
  00c4d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LHHHFLPP@utf8?$AA@
  00c54	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00c5c	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString
  00c61	48 89 44 24 70	 mov	 QWORD PTR utf8$20661[rsp], rax

; 328  :         if (utf8 == NULL) {

  00c66	48 83 7c 24 70
	00		 cmp	 QWORD PTR utf8$20661[rsp], 0
  00c6c	75 2c		 jne	 SHORT $LN85@w_object

; 329  :             p->depth--;

  00c6e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00c76	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00c79	ff c8		 dec	 eax
  00c7b	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00c83	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 330  :             p->error = WFERR_UNMARSHALLABLE;

  00c86	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00c8e	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 331  :             return;

  00c95	e9 0e 0c 00 00	 jmp	 $LN181@w_object
$LN85@w_object:

; 332  :         }
; 333  :         w_byte(TYPE_UNICODE, p);

  00c9a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00ca2	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00ca6	74 18		 je	 SHORT $LN84@w_object
  00ca8	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00cb0	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00cb3	b9 75 00 00 00	 mov	 ecx, 117		; 00000075H
  00cb8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00cbe	eb 58		 jmp	 SHORT $LN83@w_object
$LN84@w_object:
  00cc0	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00cc8	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00cd0	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00cd4	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00cd8	74 2c		 je	 SHORT $LN82@w_object
  00cda	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00ce2	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00ce6	c6 00 75	 mov	 BYTE PTR [rax], 117	; 00000075H
  00ce9	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00cf1	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00cf5	48 ff c0	 inc	 rax
  00cf8	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00d00	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00d04	eb 12		 jmp	 SHORT $LN81@w_object
$LN82@w_object:
  00d06	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00d0e	b9 75 00 00 00	 mov	 ecx, 117		; 00000075H
  00d13	e8 00 00 00 00	 call	 w_more
$LN81@w_object:
$LN83@w_object:

; 334  :         w_pstring(PyBytes_AS_STRING(utf8), PyBytes_GET_SIZE(utf8), p);

  00d18	48 8b 44 24 70	 mov	 rax, QWORD PTR utf8$20661[rsp]
  00d1d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00d21	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00d27	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00d2c	85 c0		 test	 eax, eax
  00d2e	75 1c		 jne	 SHORT $LN185@w_object
  00d30	41 b8 4e 01 00
	00		 mov	 r8d, 334		; 0000014eH
  00d36	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  00d3d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@CFDMCMDN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAt?$AAf?$AA8?$AA?$CJ?$AA?$AA@
  00d44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d4a	33 c0		 xor	 eax, eax
$LN185@w_object:
  00d4c	48 8b 44 24 70	 mov	 rax, QWORD PTR utf8$20661[rsp]
  00d51	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00d55	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00d5b	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00d60	85 c0		 test	 eax, eax
  00d62	75 1c		 jne	 SHORT $LN186@w_object
  00d64	41 b8 4e 01 00
	00		 mov	 r8d, 334		; 0000014eH
  00d6a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  00d71	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@CFDMCMDN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAt?$AAf?$AA8?$AA?$CJ?$AA?$AA@
  00d78	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d7e	33 c0		 xor	 eax, eax
$LN186@w_object:
  00d80	48 8b 44 24 70	 mov	 rax, QWORD PTR utf8$20661[rsp]
  00d85	48 83 c0 78	 add	 rax, 120		; 00000078H
  00d89	4c 8b 84 24 18
	01 00 00	 mov	 r8, QWORD PTR p$[rsp]
  00d91	48 8b 4c 24 70	 mov	 rcx, QWORD PTR utf8$20661[rsp]
  00d96	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00d9a	48 8b c8	 mov	 rcx, rax
  00d9d	e8 00 00 00 00	 call	 w_pstring

; 335  :         Py_DECREF(utf8);

  00da2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR utf8$20661[rsp]
  00da7	e8 00 00 00 00	 call	 _Py_DecRef
  00dac	e9 df 0a 00 00	 jmp	 $LN80@w_object
$LN86@w_object:

; 336  :     }
; 337  :     else if (PyTuple_CheckExact(v)) {

  00db1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00db8	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00dc0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00dc4	0f 85 28 01 00
	00		 jne	 $LN79@w_object

; 338  :         w_byte(TYPE_TUPLE, p);

  00dca	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00dd2	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00dd6	74 18		 je	 SHORT $LN78@w_object
  00dd8	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00de0	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00de3	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00de8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00dee	eb 58		 jmp	 SHORT $LN77@w_object
$LN78@w_object:
  00df0	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00df8	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00e00	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00e04	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00e08	74 2c		 je	 SHORT $LN76@w_object
  00e0a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00e12	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00e16	c6 00 28	 mov	 BYTE PTR [rax], 40	; 00000028H
  00e19	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00e21	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00e25	48 ff c0	 inc	 rax
  00e28	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00e30	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00e34	eb 12		 jmp	 SHORT $LN75@w_object
$LN76@w_object:
  00e36	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00e3e	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00e43	e8 00 00 00 00	 call	 w_more
$LN75@w_object:
$LN77@w_object:

; 339  :         n = PyTuple_Size(v);

  00e48	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00e50	e8 00 00 00 00	 call	 PyTuple_Size
  00e55	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax
$LN74@w_object:

; 340  :         W_SIZE(n, p);

  00e5a	48 81 7c 24 30
	ff ff ff 7f	 cmp	 QWORD PTR n$[rsp], 2147483647 ; 7fffffffH
  00e63	7e 2c		 jle	 SHORT $LN71@w_object
  00e65	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00e6d	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00e70	ff c8		 dec	 eax
  00e72	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00e7a	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00e7d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00e85	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1
  00e8c	e9 17 0a 00 00	 jmp	 $LN181@w_object
$LN71@w_object:
  00e91	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00e99	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  00e9d	e8 00 00 00 00	 call	 w_long
  00ea2	33 c0		 xor	 eax, eax
  00ea4	85 c0		 test	 eax, eax
  00ea6	75 b2		 jne	 SHORT $LN74@w_object

; 341  :         for (i = 0; i < n; i++) {

  00ea8	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00eb1	eb 0d		 jmp	 SHORT $LN70@w_object
$LN69@w_object:
  00eb3	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00eb8	48 ff c0	 inc	 rax
  00ebb	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN70@w_object:
  00ec0	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00ec5	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  00eca	7d 21		 jge	 SHORT $LN68@w_object

; 342  :             w_object(PyTuple_GET_ITEM(v, i), p);

  00ecc	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00ed4	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00edc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00ee1	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  00ee6	e8 00 00 00 00	 call	 w_object

; 343  :         }

  00eeb	eb c6		 jmp	 SHORT $LN69@w_object
$LN68@w_object:

; 344  :     }
; 345  :     else if (PyList_CheckExact(v)) {

  00eed	e9 9e 09 00 00	 jmp	 $LN67@w_object
$LN79@w_object:
  00ef2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyList_Type
  00ef9	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00f01	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00f05	0f 85 2a 01 00
	00		 jne	 $LN66@w_object

; 346  :         w_byte(TYPE_LIST, p);

  00f0b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00f13	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00f17	74 18		 je	 SHORT $LN65@w_object
  00f19	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00f21	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00f24	b9 5b 00 00 00	 mov	 ecx, 91			; 0000005bH
  00f29	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00f2f	eb 58		 jmp	 SHORT $LN64@w_object
$LN65@w_object:
  00f31	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00f39	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00f41	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00f45	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00f49	74 2c		 je	 SHORT $LN63@w_object
  00f4b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00f53	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00f57	c6 00 5b	 mov	 BYTE PTR [rax], 91	; 0000005bH
  00f5a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00f62	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00f66	48 ff c0	 inc	 rax
  00f69	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00f71	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00f75	eb 12		 jmp	 SHORT $LN62@w_object
$LN63@w_object:
  00f77	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00f7f	b9 5b 00 00 00	 mov	 ecx, 91			; 0000005bH
  00f84	e8 00 00 00 00	 call	 w_more
$LN62@w_object:
$LN64@w_object:

; 347  :         n = PyList_GET_SIZE(v);

  00f89	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00f91	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00f95	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax
$LN61@w_object:

; 348  :         W_SIZE(n, p);

  00f9a	48 81 7c 24 30
	ff ff ff 7f	 cmp	 QWORD PTR n$[rsp], 2147483647 ; 7fffffffH
  00fa3	7e 2c		 jle	 SHORT $LN58@w_object
  00fa5	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00fad	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00fb0	ff c8		 dec	 eax
  00fb2	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00fba	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00fbd	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00fc5	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1
  00fcc	e9 d7 08 00 00	 jmp	 $LN181@w_object
$LN58@w_object:
  00fd1	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00fd9	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  00fdd	e8 00 00 00 00	 call	 w_long
  00fe2	33 c0		 xor	 eax, eax
  00fe4	85 c0		 test	 eax, eax
  00fe6	75 b2		 jne	 SHORT $LN61@w_object

; 349  :         for (i = 0; i < n; i++) {

  00fe8	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00ff1	eb 0d		 jmp	 SHORT $LN57@w_object
$LN56@w_object:
  00ff3	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00ff8	48 ff c0	 inc	 rax
  00ffb	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN57@w_object:
  01000	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  01005	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  0100a	7d 24		 jge	 SHORT $LN55@w_object

; 350  :             w_object(PyList_GET_ITEM(v, i), p);

  0100c	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  01014	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  01018	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01020	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  01025	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  01029	e8 00 00 00 00	 call	 w_object

; 351  :         }

  0102e	eb c3		 jmp	 SHORT $LN56@w_object
$LN55@w_object:

; 352  :     }
; 353  :     else if (PyDict_CheckExact(v)) {

  01030	e9 5b 08 00 00	 jmp	 $LN54@w_object
$LN66@w_object:
  01035	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  0103c	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  01044	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  01048	74 19		 je	 SHORT $LN52@w_object
  0104a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  01051	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  01059	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  0105d	0f 85 ed 00 00
	00		 jne	 $LN53@w_object
$LN52@w_object:

; 354  :         Py_ssize_t pos;
; 355  :         PyObject *key, *value;
; 356  :         w_byte(TYPE_DICT, p);

  01063	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0106b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0106f	74 18		 je	 SHORT $LN51@w_object
  01071	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01079	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0107c	b9 7b 00 00 00	 mov	 ecx, 123		; 0000007bH
  01081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  01087	eb 58		 jmp	 SHORT $LN50@w_object
$LN51@w_object:
  01089	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01091	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01099	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0109d	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  010a1	74 2c		 je	 SHORT $LN49@w_object
  010a3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  010ab	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  010af	c6 00 7b	 mov	 BYTE PTR [rax], 123	; 0000007bH
  010b2	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  010ba	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  010be	48 ff c0	 inc	 rax
  010c1	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  010c9	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  010cd	eb 12		 jmp	 SHORT $LN48@w_object
$LN49@w_object:
  010cf	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  010d7	b9 7b 00 00 00	 mov	 ecx, 123		; 0000007bH
  010dc	e8 00 00 00 00	 call	 w_more
$LN48@w_object:
$LN50@w_object:

; 357  :         /* This one is NULL object terminated! */
; 358  :         pos = 0;

  010e1	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pos$20716[rsp], 0
$LN47@w_object:

; 359  :         while (PyDict_Next(v, &pos, &key, &value)) {

  010ed	4c 8d 4c 24 78	 lea	 r9, QWORD PTR value$20718[rsp]
  010f2	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR key$20717[rsp]
  010fa	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR pos$20716[rsp]
  01102	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0110a	e8 00 00 00 00	 call	 PyDict_Next
  0110f	85 c0		 test	 eax, eax
  01111	74 29		 je	 SHORT $LN46@w_object

; 360  :             w_object(key, p);

  01113	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  0111b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR key$20717[rsp]
  01123	e8 00 00 00 00	 call	 w_object

; 361  :             w_object(value, p);

  01128	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01130	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value$20718[rsp]
  01135	e8 00 00 00 00	 call	 w_object

; 362  :         }

  0113a	eb b1		 jmp	 SHORT $LN47@w_object
$LN46@w_object:

; 363  :         w_object((PyObject *)NULL, p);

  0113c	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01144	33 c9		 xor	 ecx, ecx
  01146	e8 00 00 00 00	 call	 w_object
  0114b	e9 40 07 00 00	 jmp	 $LN45@w_object
$LN53@w_object:

; 364  :     }
; 365  :     else if (PyAnySet_CheckExact(v)) {

  01150	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySet_Type
  01157	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0115f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  01163	74 19		 je	 SHORT $LN43@w_object
  01165	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFrozenSet_Type
  0116c	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  01174	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  01178	0f 85 9f 02 00
	00		 jne	 $LN44@w_object
$LN43@w_object:

; 366  :         PyObject *value, *it;
; 367  : 
; 368  :         if (PyObject_TypeCheck(v, &PySet_Type))

  0117e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySet_Type
  01185	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0118d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  01191	74 20		 je	 SHORT $LN41@w_object
  01193	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PySet_Type
  0119a	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  011a2	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  011a6	e8 00 00 00 00	 call	 PyType_IsSubtype
  011ab	85 c0		 test	 eax, eax
  011ad	0f 84 80 00 00
	00		 je	 $LN42@w_object
$LN41@w_object:

; 369  :             w_byte(TYPE_SET, p);

  011b3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  011bb	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  011bf	74 18		 je	 SHORT $LN40@w_object
  011c1	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  011c9	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  011cc	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  011d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  011d7	eb 58		 jmp	 SHORT $LN39@w_object
$LN40@w_object:
  011d9	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  011e1	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  011e9	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  011ed	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  011f1	74 2c		 je	 SHORT $LN38@w_object
  011f3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  011fb	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  011ff	c6 00 3c	 mov	 BYTE PTR [rax], 60	; 0000003cH
  01202	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0120a	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0120e	48 ff c0	 inc	 rax
  01211	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01219	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  0121d	eb 12		 jmp	 SHORT $LN37@w_object
$LN38@w_object:
  0121f	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01227	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0122c	e8 00 00 00 00	 call	 w_more
$LN37@w_object:
$LN39@w_object:

; 370  :         else

  01231	eb 7e		 jmp	 SHORT $LN36@w_object
$LN42@w_object:

; 371  :             w_byte(TYPE_FROZENSET, p);

  01233	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0123b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0123f	74 18		 je	 SHORT $LN35@w_object
  01241	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01249	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0124c	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  01251	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  01257	eb 58		 jmp	 SHORT $LN34@w_object
$LN35@w_object:
  01259	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01261	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01269	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0126d	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  01271	74 2c		 je	 SHORT $LN33@w_object
  01273	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0127b	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0127f	c6 00 3e	 mov	 BYTE PTR [rax], 62	; 0000003eH
  01282	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0128a	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0128e	48 ff c0	 inc	 rax
  01291	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01299	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  0129d	eb 12		 jmp	 SHORT $LN32@w_object
$LN33@w_object:
  0129f	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  012a7	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  012ac	e8 00 00 00 00	 call	 w_more
$LN32@w_object:
$LN34@w_object:
$LN36@w_object:

; 372  :         n = PyObject_Size(v);

  012b1	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  012b9	e8 00 00 00 00	 call	 PyObject_Size
  012be	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 373  :         if (n == -1) {

  012c3	48 83 7c 24 30
	ff		 cmp	 QWORD PTR n$[rsp], -1
  012c9	75 2c		 jne	 SHORT $LN31@w_object

; 374  :             p->depth--;

  012cb	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  012d3	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  012d6	ff c8		 dec	 eax
  012d8	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  012e0	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 375  :             p->error = WFERR_UNMARSHALLABLE;

  012e3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  012eb	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 376  :             return;

  012f2	e9 b1 05 00 00	 jmp	 $LN181@w_object
$LN31@w_object:
$LN30@w_object:

; 377  :         }
; 378  :         W_SIZE(n, p);

  012f7	48 81 7c 24 30
	ff ff ff 7f	 cmp	 QWORD PTR n$[rsp], 2147483647 ; 7fffffffH
  01300	7e 2c		 jle	 SHORT $LN27@w_object
  01302	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0130a	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0130d	ff c8		 dec	 eax
  0130f	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01317	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  0131a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01322	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1
  01329	e9 7a 05 00 00	 jmp	 $LN181@w_object
$LN27@w_object:
  0132e	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01336	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  0133a	e8 00 00 00 00	 call	 w_long
  0133f	33 c0		 xor	 eax, eax
  01341	85 c0		 test	 eax, eax
  01343	75 b2		 jne	 SHORT $LN30@w_object

; 379  :         it = PyObject_GetIter(v);

  01345	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0134d	e8 00 00 00 00	 call	 PyObject_GetIter
  01352	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR it$20734[rsp], rax

; 380  :         if (it == NULL) {

  0135a	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR it$20734[rsp], 0
  01363	75 2c		 jne	 SHORT $LN26@w_object

; 381  :             p->depth--;

  01365	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0136d	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  01370	ff c8		 dec	 eax
  01372	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0137a	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 382  :             p->error = WFERR_UNMARSHALLABLE;

  0137d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01385	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 383  :             return;

  0138c	e9 17 05 00 00	 jmp	 $LN181@w_object
$LN26@w_object:
$LN25@w_object:

; 384  :         }
; 385  :         while ((value = PyIter_Next(it)) != NULL) {

  01391	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR it$20734[rsp]
  01399	e8 00 00 00 00	 call	 PyIter_Next
  0139e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR value$20733[rsp], rax
  013a6	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR value$20733[rsp], 0
  013af	74 24		 je	 SHORT $LN24@w_object

; 386  :             w_object(value, p);

  013b1	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  013b9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR value$20733[rsp]
  013c1	e8 00 00 00 00	 call	 w_object

; 387  :             Py_DECREF(value);

  013c6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR value$20733[rsp]
  013ce	e8 00 00 00 00	 call	 _Py_DecRef

; 388  :         }

  013d3	eb bc		 jmp	 SHORT $LN25@w_object
$LN24@w_object:

; 389  :         Py_DECREF(it);

  013d5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR it$20734[rsp]
  013dd	e8 00 00 00 00	 call	 _Py_DecRef

; 390  :         if (PyErr_Occurred()) {

  013e2	e8 00 00 00 00	 call	 PyErr_Occurred
  013e7	48 85 c0	 test	 rax, rax
  013ea	74 2c		 je	 SHORT $LN23@w_object

; 391  :             p->depth--;

  013ec	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  013f4	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  013f7	ff c8		 dec	 eax
  013f9	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01401	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 392  :             p->error = WFERR_UNMARSHALLABLE;

  01404	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0140c	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 393  :             return;

  01413	e9 90 04 00 00	 jmp	 $LN181@w_object
$LN23@w_object:

; 394  :         }

  01418	e9 73 04 00 00	 jmp	 $LN22@w_object
$LN44@w_object:

; 395  :     }
; 396  :     else if (PyCode_Check(v)) {

  0141d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  01424	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0142c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  01430	0f 85 1f 02 00
	00		 jne	 $LN21@w_object

; 397  :         PyCodeObject *co = (PyCodeObject *)v;

  01436	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0143e	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR co$20766[rsp], rax

; 398  :         w_byte(TYPE_CODE, p);

  01446	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0144e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01452	74 18		 je	 SHORT $LN20@w_object
  01454	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0145c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0145f	b9 63 00 00 00	 mov	 ecx, 99			; 00000063H
  01464	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  0146a	eb 58		 jmp	 SHORT $LN19@w_object
$LN20@w_object:
  0146c	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01474	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0147c	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  01480	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  01484	74 2c		 je	 SHORT $LN18@w_object
  01486	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0148e	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  01492	c6 00 63	 mov	 BYTE PTR [rax], 99	; 00000063H
  01495	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0149d	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  014a1	48 ff c0	 inc	 rax
  014a4	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  014ac	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  014b0	eb 12		 jmp	 SHORT $LN17@w_object
$LN18@w_object:
  014b2	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  014ba	b9 63 00 00 00	 mov	 ecx, 99			; 00000063H
  014bf	e8 00 00 00 00	 call	 w_more
$LN17@w_object:
$LN19@w_object:

; 399  :         w_long(co->co_argcount, p);

  014c4	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  014cc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  014d4	8b 48 60	 mov	 ecx, DWORD PTR [rax+96]
  014d7	e8 00 00 00 00	 call	 w_long

; 400  :         w_long(co->co_kwonlyargcount, p);

  014dc	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  014e4	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  014ec	8b 48 64	 mov	 ecx, DWORD PTR [rax+100]
  014ef	e8 00 00 00 00	 call	 w_long

; 401  :         w_long(co->co_nlocals, p);

  014f4	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  014fc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  01504	8b 48 68	 mov	 ecx, DWORD PTR [rax+104]
  01507	e8 00 00 00 00	 call	 w_long

; 402  :         w_long(co->co_stacksize, p);

  0150c	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01514	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  0151c	8b 48 6c	 mov	 ecx, DWORD PTR [rax+108]
  0151f	e8 00 00 00 00	 call	 w_long

; 403  :         w_long(co->co_flags, p);

  01524	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  0152c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  01534	8b 48 70	 mov	 ecx, DWORD PTR [rax+112]
  01537	e8 00 00 00 00	 call	 w_long

; 404  :         w_object(co->co_code, p);

  0153c	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01544	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  0154c	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  01550	e8 00 00 00 00	 call	 w_object

; 405  :         w_object(co->co_consts, p);

  01555	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  0155d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  01565	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0156c	e8 00 00 00 00	 call	 w_object

; 406  :         w_object(co->co_names, p);

  01571	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01579	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  01581	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  01588	e8 00 00 00 00	 call	 w_object

; 407  :         w_object(co->co_varnames, p);

  0158d	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01595	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  0159d	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  015a4	e8 00 00 00 00	 call	 w_object

; 408  :         w_object(co->co_freevars, p);

  015a9	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  015b1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  015b9	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  015c0	e8 00 00 00 00	 call	 w_object

; 409  :         w_object(co->co_cellvars, p);

  015c5	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  015cd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  015d5	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  015dc	e8 00 00 00 00	 call	 w_object

; 410  :         w_object(co->co_filename, p);

  015e1	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  015e9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  015f1	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  015f8	e8 00 00 00 00	 call	 w_object

; 411  :         w_object(co->co_name, p);

  015fd	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01605	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  0160d	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  01614	e8 00 00 00 00	 call	 w_object

; 412  :         w_long(co->co_firstlineno, p);

  01619	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01621	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  01629	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [rax+192]
  0162f	e8 00 00 00 00	 call	 w_long

; 413  :         w_object(co->co_lnotab, p);

  01634	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  0163c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR co$20766[rsp]
  01644	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  0164b	e8 00 00 00 00	 call	 w_object
  01650	e9 3b 02 00 00	 jmp	 $LN16@w_object
$LN21@w_object:

; 414  :     }
; 415  :     else if (PyObject_CheckBuffer(v)) {

  01655	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0165d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01661	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  01669	0f 84 94 01 00
	00		 je	 $LN15@w_object
  0166f	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR v$[rsp]
  01677	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0167b	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  01682	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01686	0f 84 77 01 00
	00		 je	 $LN15@w_object

; 416  :         /* Write unknown buffer-style objects as a string */
; 417  :         Py_buffer view;
; 418  :         if (PyObject_GetBuffer(v, &view, PyBUF_SIMPLE) != 0) {

  0168c	45 33 c0	 xor	 r8d, r8d
  0168f	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR view$20776[rsp]
  01697	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0169f	e8 00 00 00 00	 call	 PyObject_GetBuffer
  016a4	85 c0		 test	 eax, eax
  016a6	0f 84 aa 00 00
	00		 je	 $LN14@w_object

; 419  :             w_byte(TYPE_UNKNOWN, p);

  016ac	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  016b4	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  016b8	74 18		 je	 SHORT $LN13@w_object
  016ba	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  016c2	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  016c5	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  016ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  016d0	eb 58		 jmp	 SHORT $LN12@w_object
$LN13@w_object:
  016d2	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  016da	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  016e2	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  016e6	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  016ea	74 2c		 je	 SHORT $LN11@w_object
  016ec	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  016f4	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  016f8	c6 00 3f	 mov	 BYTE PTR [rax], 63	; 0000003fH
  016fb	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01703	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  01707	48 ff c0	 inc	 rax
  0170a	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01712	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  01716	eb 12		 jmp	 SHORT $LN10@w_object
$LN11@w_object:
  01718	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01720	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  01725	e8 00 00 00 00	 call	 w_more
$LN10@w_object:
$LN12@w_object:

; 420  :             p->depth--;

  0172a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01732	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  01735	ff c8		 dec	 eax
  01737	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0173f	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 421  :             p->error = WFERR_UNMARSHALLABLE;

  01742	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0174a	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 422  :             return;

  01751	e9 52 01 00 00	 jmp	 $LN181@w_object
$LN14@w_object:

; 423  :         }
; 424  :         w_byte(TYPE_STRING, p);

  01756	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0175e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01762	74 18		 je	 SHORT $LN9@w_object
  01764	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0176c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0176f	b9 73 00 00 00	 mov	 ecx, 115		; 00000073H
  01774	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  0177a	eb 58		 jmp	 SHORT $LN8@w_object
$LN9@w_object:
  0177c	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01784	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0178c	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  01790	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  01794	74 2c		 je	 SHORT $LN7@w_object
  01796	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0179e	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  017a2	c6 00 73	 mov	 BYTE PTR [rax], 115	; 00000073H
  017a5	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  017ad	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  017b1	48 ff c0	 inc	 rax
  017b4	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  017bc	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  017c0	eb 12		 jmp	 SHORT $LN6@w_object
$LN7@w_object:
  017c2	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  017ca	b9 73 00 00 00	 mov	 ecx, 115		; 00000073H
  017cf	e8 00 00 00 00	 call	 w_more
$LN6@w_object:
$LN8@w_object:

; 425  :         w_pstring(view.buf, view.len, p);

  017d4	4c 8b 84 24 18
	01 00 00	 mov	 r8, QWORD PTR p$[rsp]
  017dc	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR view$20776[rsp+16]
  017e4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR view$20776[rsp]
  017ec	e8 00 00 00 00	 call	 w_pstring

; 426  :         PyBuffer_Release(&view);

  017f1	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR view$20776[rsp]
  017f9	e8 00 00 00 00	 call	 PyBuffer_Release

; 427  :     }
; 428  :     else {

  017fe	e9 8d 00 00 00	 jmp	 $LN5@w_object
$LN15@w_object:

; 429  :         w_byte(TYPE_UNKNOWN, p);

  01803	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0180b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0180f	74 18		 je	 SHORT $LN4@w_object
  01811	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01819	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0181c	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  01821	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  01827	eb 58		 jmp	 SHORT $LN3@w_object
$LN4@w_object:
  01829	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01831	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01839	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0183d	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  01841	74 2c		 je	 SHORT $LN2@w_object
  01843	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0184b	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0184f	c6 00 3f	 mov	 BYTE PTR [rax], 63	; 0000003fH
  01852	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0185a	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0185e	48 ff c0	 inc	 rax
  01861	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01869	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  0186d	eb 12		 jmp	 SHORT $LN1@w_object
$LN2@w_object:
  0186f	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01877	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  0187c	e8 00 00 00 00	 call	 w_more
$LN1@w_object:
$LN3@w_object:

; 430  :         p->error = WFERR_UNMARSHALLABLE;

  01881	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01889	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1
$LN5@w_object:
$LN16@w_object:
$LN22@w_object:
$LN45@w_object:
$LN54@w_object:
$LN67@w_object:
$LN80@w_object:
$LN87@w_object:
$LN93@w_object:
$LN117@w_object:
$LN135@w_object:
$LN143@w_object:
$LN149@w_object:
$LN155@w_object:
$LN161@w_object:
$LN167@w_object:
$LN173@w_object:
$LN179@w_object:

; 431  :     }
; 432  :     p->depth--;

  01890	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01898	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0189b	ff c8		 dec	 eax
  0189d	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  018a5	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
$LN181@w_object:

; 433  : }

  018a8	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  018af	c3		 ret	 0
w_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	__imp_fwrite:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\marshal.c
pdata	SEGMENT
$pdata$w_string DD imagerel w_string
	DD	imagerel w_string+231
	DD	imagerel $unwind$w_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_string DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT w_string
_TEXT	SEGMENT
s$ = 48
n$ = 56
p$ = 64
w_string PROC						; COMDAT

; 99   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 100  :     if (p->fp != NULL) {

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  00018	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0001c	74 22		 je	 SHORT $LN8@w_string

; 101  :         fwrite(s, 1, n, p->fp);

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  00023	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  00026	4c 8b 44 24 38	 mov	 r8, QWORD PTR n$[rsp]
  0002b	ba 01 00 00 00	 mov	 edx, 1
  00030	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite

; 102  :     }
; 103  :     else {

  0003b	e9 a2 00 00 00	 jmp	 $LN7@w_string
$LN8@w_string:
$LN6@w_string:

; 104  :         while (--n >= 0) {

  00040	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  00045	48 ff c8	 dec	 rax
  00048	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax
  0004d	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  00053	0f 8c 89 00 00
	00		 jl	 $LN5@w_string

; 105  :             w_byte(*s, p);

  00059	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  0005e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00062	74 1a		 je	 SHORT $LN4@w_string
  00064	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00069	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0006c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR p$[rsp]
  00071	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00074	8b c8		 mov	 ecx, eax
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  0007c	eb 52		 jmp	 SHORT $LN3@w_string
$LN4@w_string:
  0007e	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  00083	48 8b 4c 24 40	 mov	 rcx, QWORD PTR p$[rsp]
  00088	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0008c	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00090	74 2a		 je	 SHORT $LN2@w_string
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  00097	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0009b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000a0	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000a3	88 08		 mov	 BYTE PTR [rax], cl
  000a5	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  000aa	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  000ae	48 ff c0	 inc	 rax
  000b1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR p$[rsp]
  000b6	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  000ba	eb 14		 jmp	 SHORT $LN1@w_string
$LN2@w_string:
  000bc	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000c1	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000c4	48 8b 54 24 40	 mov	 rdx, QWORD PTR p$[rsp]
  000c9	8b c8		 mov	 ecx, eax
  000cb	e8 00 00 00 00	 call	 w_more
$LN1@w_string:
$LN3@w_string:

; 106  :             s++;

  000d0	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000d5	48 ff c0	 inc	 rax
  000d8	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 107  :         }

  000dd	e9 5e ff ff ff	 jmp	 $LN6@w_string
$LN5@w_string:
$LN7@w_string:

; 108  :     }
; 109  : }

  000e2	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e6	c3		 ret	 0
w_string ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_pstring DD imagerel w_pstring
	DD	imagerel w_pstring+107
	DD	imagerel $unwind$w_pstring
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_pstring DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT w_pstring
_TEXT	SEGMENT
s$ = 48
n$ = 56
p$ = 64
w_pstring PROC						; COMDAT

; 144  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@w_pstring:

; 145  :         W_SIZE(n, p);

  00013	48 81 7c 24 38
	ff ff ff 7f	 cmp	 QWORD PTR n$[rsp], 2147483647 ; 7fffffffH
  0001c	7e 20		 jle	 SHORT $LN1@w_pstring
  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  00023	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00026	ff c8		 dec	 eax
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR p$[rsp]
  0002d	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  00035	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1
  0003c	eb 28		 jmp	 SHORT $LN5@w_pstring
$LN1@w_pstring:
  0003e	48 8b 54 24 40	 mov	 rdx, QWORD PTR p$[rsp]
  00043	8b 4c 24 38	 mov	 ecx, DWORD PTR n$[rsp]
  00047	e8 00 00 00 00	 call	 w_long
  0004c	33 c0		 xor	 eax, eax
  0004e	85 c0		 test	 eax, eax
  00050	75 c1		 jne	 SHORT $LN4@w_pstring

; 146  :         w_string(s, n, p);

  00052	4c 8b 44 24 40	 mov	 r8, QWORD PTR p$[rsp]
  00057	48 8b 54 24 38	 mov	 rdx, QWORD PTR n$[rsp]
  0005c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00061	e8 00 00 00 00	 call	 w_string
$LN5@w_pstring:

; 147  : }

  00066	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006a	c3		 ret	 0
w_pstring ENDP
_TEXT	ENDS
PUBLIC	??_C@_1O@NHEGOPEB@?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@OKNEIOCH@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_PyLong DD imagerel w_PyLong
	DD	imagerel w_PyLong+621
	DD	imagerel $unwind$w_PyLong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_PyLong DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_1O@NHEGOPEB@?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1O@NHEGOPEB@?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'd', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@OKNEIOCH@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1O@OKNEIOCH@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'd', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT w_PyLong
_TEXT	SEGMENT
n$ = 32
i$ = 40
l$ = 48
d$ = 56
j$ = 64
tv86 = 72
tv143 = 80
ob$ = 112
p$ = 120
w_PyLong PROC						; COMDAT

; 163  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 164  :     Py_ssize_t i, j, n, l;
; 165  :     digit d;
; 166  : 
; 167  :     w_byte(TYPE_LONG, p);

  0000e	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  00013	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00017	74 15		 je	 SHORT $LN18@w_PyLong
  00019	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  0001e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00021	b9 6c 00 00 00	 mov	 ecx, 108		; 0000006cH
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  0002c	eb 46		 jmp	 SHORT $LN17@w_PyLong
$LN18@w_PyLong:
  0002e	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  00033	48 8b 4c 24 78	 mov	 rcx, QWORD PTR p$[rsp]
  00038	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0003c	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00040	74 23		 je	 SHORT $LN16@w_PyLong
  00042	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  00047	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0004b	c6 00 6c	 mov	 BYTE PTR [rax], 108	; 0000006cH
  0004e	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  00053	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00057	48 ff c0	 inc	 rax
  0005a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR p$[rsp]
  0005f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00063	eb 0f		 jmp	 SHORT $LN15@w_PyLong
$LN16@w_PyLong:
  00065	48 8b 54 24 78	 mov	 rdx, QWORD PTR p$[rsp]
  0006a	b9 6c 00 00 00	 mov	 ecx, 108		; 0000006cH
  0006f	e8 00 00 00 00	 call	 w_more
$LN15@w_PyLong:
$LN17@w_PyLong:

; 168  :     if (Py_SIZE(ob) == 0) {

  00074	48 8b 44 24 70	 mov	 rax, QWORD PTR ob$[rsp]
  00079	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0007e	75 11		 jne	 SHORT $LN14@w_PyLong

; 169  :         w_long((long)0, p);

  00080	48 8b 54 24 78	 mov	 rdx, QWORD PTR p$[rsp]
  00085	33 c9		 xor	 ecx, ecx
  00087	e8 00 00 00 00	 call	 w_long

; 170  :         return;

  0008c	e9 d7 01 00 00	 jmp	 $LN19@w_PyLong
$LN14@w_PyLong:

; 171  :     }
; 172  : 
; 173  :     /* set l to number of base PyLong_MARSHAL_BASE digits */
; 174  :     n = ABS(Py_SIZE(ob));

  00091	48 8b 44 24 70	 mov	 rax, QWORD PTR ob$[rsp]
  00096	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0009b	7d 13		 jge	 SHORT $LN21@w_PyLong
  0009d	48 8b 44 24 70	 mov	 rax, QWORD PTR ob$[rsp]
  000a2	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000a6	48 f7 d8	 neg	 rax
  000a9	48 89 44 24 48	 mov	 QWORD PTR tv86[rsp], rax
  000ae	eb 0e		 jmp	 SHORT $LN22@w_PyLong
$LN21@w_PyLong:
  000b0	48 8b 44 24 70	 mov	 rax, QWORD PTR ob$[rsp]
  000b5	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000b9	48 89 44 24 48	 mov	 QWORD PTR tv86[rsp], rax
$LN22@w_PyLong:
  000be	48 8b 44 24 48	 mov	 rax, QWORD PTR tv86[rsp]
  000c3	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 175  :     l = (n-1) * PyLong_MARSHAL_RATIO;

  000c8	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  000cd	48 8d 44 00 fe	 lea	 rax, QWORD PTR [rax+rax-2]
  000d2	48 89 44 24 30	 mov	 QWORD PTR l$[rsp], rax

; 176  :     d = ob->ob_digit[n-1];

  000d7	48 8b 44 24 70	 mov	 rax, QWORD PTR ob$[rsp]
  000dc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR n$[rsp]
  000e1	8b 44 88 6c	 mov	 eax, DWORD PTR [rax+rcx*4+108]
  000e5	89 44 24 38	 mov	 DWORD PTR d$[rsp], eax

; 177  :     assert(d != 0); /* a PyLong is always normalized */

  000e9	83 7c 24 38 00	 cmp	 DWORD PTR d$[rsp], 0
  000ee	75 1c		 jne	 SHORT $LN23@w_PyLong
  000f0	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@OKNEIOCH@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010a	33 c0		 xor	 eax, eax
$LN23@w_PyLong:
$LN13@w_PyLong:

; 178  :     do {
; 179  :         d >>= PyLong_MARSHAL_SHIFT;

  0010c	8b 44 24 38	 mov	 eax, DWORD PTR d$[rsp]
  00110	c1 e8 0f	 shr	 eax, 15
  00113	89 44 24 38	 mov	 DWORD PTR d$[rsp], eax

; 180  :         l++;

  00117	48 8b 44 24 30	 mov	 rax, QWORD PTR l$[rsp]
  0011c	48 ff c0	 inc	 rax
  0011f	48 89 44 24 30	 mov	 QWORD PTR l$[rsp], rax

; 181  :     } while (d != 0);

  00124	83 7c 24 38 00	 cmp	 DWORD PTR d$[rsp], 0
  00129	75 e1		 jne	 SHORT $LN13@w_PyLong

; 182  :     if (l > SIZE32_MAX) {

  0012b	48 81 7c 24 30
	ff ff ff 7f	 cmp	 QWORD PTR l$[rsp], 2147483647 ; 7fffffffH
  00134	7e 23		 jle	 SHORT $LN10@w_PyLong

; 183  :         p->depth--;

  00136	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  0013b	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0013e	ff c8		 dec	 eax
  00140	48 8b 4c 24 78	 mov	 rcx, QWORD PTR p$[rsp]
  00145	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 184  :         p->error = WFERR_UNMARSHALLABLE;

  00148	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  0014d	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 185  :         return;

  00154	e9 0f 01 00 00	 jmp	 $LN19@w_PyLong
$LN10@w_PyLong:

; 186  :     }
; 187  :     w_long((long)(Py_SIZE(ob) > 0 ? l : -l), p);

  00159	48 8b 44 24 70	 mov	 rax, QWORD PTR ob$[rsp]
  0015e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00163	7e 0c		 jle	 SHORT $LN24@w_PyLong
  00165	48 8b 44 24 30	 mov	 rax, QWORD PTR l$[rsp]
  0016a	48 89 44 24 50	 mov	 QWORD PTR tv143[rsp], rax
  0016f	eb 0d		 jmp	 SHORT $LN25@w_PyLong
$LN24@w_PyLong:
  00171	48 8b 44 24 30	 mov	 rax, QWORD PTR l$[rsp]
  00176	48 f7 d8	 neg	 rax
  00179	48 89 44 24 50	 mov	 QWORD PTR tv143[rsp], rax
$LN25@w_PyLong:
  0017e	48 8b 54 24 78	 mov	 rdx, QWORD PTR p$[rsp]
  00183	8b 4c 24 50	 mov	 ecx, DWORD PTR tv143[rsp]
  00187	e8 00 00 00 00	 call	 w_long

; 188  : 
; 189  :     for (i=0; i < n-1; i++) {

  0018c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00195	eb 0d		 jmp	 SHORT $LN9@w_PyLong
$LN8@w_PyLong:
  00197	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0019c	48 ff c0	 inc	 rax
  0019f	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN9@w_PyLong:
  001a4	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  001a9	48 ff c8	 dec	 rax
  001ac	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  001b1	7d 7c		 jge	 SHORT $LN7@w_PyLong

; 190  :         d = ob->ob_digit[i];

  001b3	48 8b 44 24 70	 mov	 rax, QWORD PTR ob$[rsp]
  001b8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  001bd	8b 44 88 70	 mov	 eax, DWORD PTR [rax+rcx*4+112]
  001c1	89 44 24 38	 mov	 DWORD PTR d$[rsp], eax

; 191  :         for (j=0; j < PyLong_MARSHAL_RATIO; j++) {

  001c5	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  001ce	eb 0d		 jmp	 SHORT $LN6@w_PyLong
$LN5@w_PyLong:
  001d0	48 8b 44 24 40	 mov	 rax, QWORD PTR j$[rsp]
  001d5	48 ff c0	 inc	 rax
  001d8	48 89 44 24 40	 mov	 QWORD PTR j$[rsp], rax
$LN6@w_PyLong:
  001dd	48 83 7c 24 40
	02		 cmp	 QWORD PTR j$[rsp], 2
  001e3	7d 22		 jge	 SHORT $LN4@w_PyLong

; 192  :             w_short(d & PyLong_MARSHAL_MASK, p);

  001e5	8b 44 24 38	 mov	 eax, DWORD PTR d$[rsp]
  001e9	25 ff 7f 00 00	 and	 eax, 32767		; 00007fffH
  001ee	48 8b 54 24 78	 mov	 rdx, QWORD PTR p$[rsp]
  001f3	8b c8		 mov	 ecx, eax
  001f5	e8 00 00 00 00	 call	 w_short

; 193  :             d >>= PyLong_MARSHAL_SHIFT;

  001fa	8b 44 24 38	 mov	 eax, DWORD PTR d$[rsp]
  001fe	c1 e8 0f	 shr	 eax, 15
  00201	89 44 24 38	 mov	 DWORD PTR d$[rsp], eax

; 194  :         }

  00205	eb c9		 jmp	 SHORT $LN5@w_PyLong
$LN4@w_PyLong:

; 195  :         assert (d == 0);

  00207	83 7c 24 38 00	 cmp	 DWORD PTR d$[rsp], 0
  0020c	74 1c		 je	 SHORT $LN26@w_PyLong
  0020e	41 b8 c3 00 00
	00		 mov	 r8d, 195		; 000000c3H
  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  0021b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@NHEGOPEB@?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00228	33 c0		 xor	 eax, eax
$LN26@w_PyLong:

; 196  :     }

  0022a	e9 68 ff ff ff	 jmp	 $LN8@w_PyLong
$LN7@w_PyLong:

; 197  :     d = ob->ob_digit[n-1];

  0022f	48 8b 44 24 70	 mov	 rax, QWORD PTR ob$[rsp]
  00234	48 8b 4c 24 20	 mov	 rcx, QWORD PTR n$[rsp]
  00239	8b 44 88 6c	 mov	 eax, DWORD PTR [rax+rcx*4+108]
  0023d	89 44 24 38	 mov	 DWORD PTR d$[rsp], eax
$LN3@w_PyLong:

; 198  :     do {
; 199  :         w_short(d & PyLong_MARSHAL_MASK, p);

  00241	8b 44 24 38	 mov	 eax, DWORD PTR d$[rsp]
  00245	25 ff 7f 00 00	 and	 eax, 32767		; 00007fffH
  0024a	48 8b 54 24 78	 mov	 rdx, QWORD PTR p$[rsp]
  0024f	8b c8		 mov	 ecx, eax
  00251	e8 00 00 00 00	 call	 w_short

; 200  :         d >>= PyLong_MARSHAL_SHIFT;

  00256	8b 44 24 38	 mov	 eax, DWORD PTR d$[rsp]
  0025a	c1 e8 0f	 shr	 eax, 15
  0025d	89 44 24 38	 mov	 DWORD PTR d$[rsp], eax

; 201  :     } while (d != 0);

  00261	83 7c 24 38 00	 cmp	 DWORD PTR d$[rsp], 0
  00266	75 d9		 jne	 SHORT $LN3@w_PyLong
$LN19@w_PyLong:

; 202  : }

  00268	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0026c	c3		 ret	 0
w_PyLong ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$w_short DD imagerel w_short
	DD	imagerel w_short+283
	DD	imagerel $unwind$w_short
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$w_short DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT w_short
_TEXT	SEGMENT
x$ = 48
p$ = 56
w_short	PROC						; COMDAT

; 113  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 114  :     w_byte((char)( x      & 0xff), p);

  0000d	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  00012	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00016	74 1e		 je	 SHORT $LN8@w_short
  00018	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  0001c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00021	0f be c0	 movsx	 eax, al
  00024	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  00029	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0002c	8b c8		 mov	 ecx, eax
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  00034	eb 57		 jmp	 SHORT $LN7@w_short
$LN8@w_short:
  00036	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  0003b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  00040	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00044	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00048	74 2b		 je	 SHORT $LN6@w_short
  0004a	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  0004e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00053	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  00058	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  0005c	88 01		 mov	 BYTE PTR [rcx], al
  0005e	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  00063	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00067	48 ff c0	 inc	 rax
  0006a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  0006f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00073	eb 18		 jmp	 SHORT $LN5@w_short
$LN6@w_short:
  00075	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  00079	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0007e	0f be c0	 movsx	 eax, al
  00081	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$[rsp]
  00086	8b c8		 mov	 ecx, eax
  00088	e8 00 00 00 00	 call	 w_more
$LN5@w_short:
$LN7@w_short:

; 115  :     w_byte((char)((x>> 8) & 0xff), p);

  0008d	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  00092	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00096	74 21		 je	 SHORT $LN4@w_short
  00098	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  0009c	c1 f8 08	 sar	 eax, 8
  0009f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000a4	0f be c0	 movsx	 eax, al
  000a7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  000ac	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000af	8b c8		 mov	 ecx, eax
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc
  000b7	eb 5d		 jmp	 SHORT $LN3@w_short
$LN4@w_short:
  000b9	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  000be	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  000c3	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  000c7	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  000cb	74 2e		 je	 SHORT $LN2@w_short
  000cd	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  000d1	c1 f8 08	 sar	 eax, 8
  000d4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000d9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  000de	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  000e2	88 01		 mov	 BYTE PTR [rcx], al
  000e4	48 8b 44 24 38	 mov	 rax, QWORD PTR p$[rsp]
  000e9	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  000ed	48 ff c0	 inc	 rax
  000f0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  000f5	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  000f9	eb 1b		 jmp	 SHORT $LN1@w_short
$LN2@w_short:
  000fb	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  000ff	c1 f8 08	 sar	 eax, 8
  00102	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00107	0f be c0	 movsx	 eax, al
  0010a	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$[rsp]
  0010f	8b c8		 mov	 ecx, eax
  00111	e8 00 00 00 00	 call	 w_more
$LN1@w_short:
$LN3@w_short:

; 116  : }

  00116	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0011a	c3		 ret	 0
w_short	ENDP
_TEXT	ENDS
PUBLIC	??_C@_15PLKPBCIH@?$AAf?$AAp?$AA?$AA@		; `string'
PUBLIC	PyMarshal_ReadShortFromFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_ReadShortFromFile DD imagerel $LN4
	DD	imagerel $LN4+107
	DD	imagerel $unwind$PyMarshal_ReadShortFromFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_ReadShortFromFile DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_15PLKPBCIH@?$AAf?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_15PLKPBCIH@?$AAf?$AAp?$AA?$AA@ DB 'f', 00H, 'p', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyMarshal_ReadShortFromFile
_TEXT	SEGMENT
rf$ = 32
fp$ = 112
PyMarshal_ReadShortFromFile PROC			; COMDAT

; 1140 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1141 :     RFILE rf;
; 1142 :     assert(fp);

  00009	48 83 7c 24 70
	00		 cmp	 QWORD PTR fp$[rsp], 0
  0000f	75 1c		 jne	 SHORT $LN3@PyMarshal_
  00011	41 b8 76 04 00
	00		 mov	 r8d, 1142		; 00000476H
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15PLKPBCIH@?$AAf?$AAp?$AA?$AA@
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002b	33 c0		 xor	 eax, eax
$LN3@PyMarshal_:

; 1143 :     rf.readable = NULL;

  0002d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+16], 0

; 1144 :     rf.fp = fp;

  00036	48 8b 44 24 70	 mov	 rax, QWORD PTR fp$[rsp]
  0003b	48 89 44 24 20	 mov	 QWORD PTR rf$[rsp], rax

; 1145 :     rf.current_filename = NULL;

  00040	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+32], 0

; 1146 :     rf.end = rf.ptr = NULL;

  00049	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+40], 0
  00052	48 8b 44 24 48	 mov	 rax, QWORD PTR rf$[rsp+40]
  00057	48 89 44 24 50	 mov	 QWORD PTR rf$[rsp+48], rax

; 1147 :     return r_short(&rf);

  0005c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR rf$[rsp]
  00061	e8 00 00 00 00	 call	 r_short

; 1148 : }

  00066	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0006a	c3		 ret	 0
PyMarshal_ReadShortFromFile ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_short DD imagerel r_short
	DD	imagerel r_short+97
	DD	imagerel $unwind$r_short
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_short DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT r_short
_TEXT	SEGMENT
x$ = 32
buffer$ = 36
p$ = 64
r_short	PROC						; COMDAT

; 535  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 536  :     register short x;
; 537  :     unsigned char buffer[2];
; 538  : 
; 539  :     r_string((char *) buffer, 2, p);

  00009	4c 8b 44 24 40	 mov	 r8, QWORD PTR p$[rsp]
  0000e	ba 02 00 00 00	 mov	 edx, 2
  00013	48 8d 4c 24 24	 lea	 rcx, QWORD PTR buffer$[rsp]
  00018	e8 00 00 00 00	 call	 r_string

; 540  :     x = buffer[0];

  0001d	0f b6 44 24 24	 movzx	 eax, BYTE PTR buffer$[rsp]
  00022	66 89 44 24 20	 mov	 WORD PTR x$[rsp], ax

; 541  :     x |= buffer[1] << 8;

  00027	0f b6 44 24 25	 movzx	 eax, BYTE PTR buffer$[rsp+1]
  0002c	c1 e0 08	 shl	 eax, 8
  0002f	0f bf 4c 24 20	 movsx	 ecx, WORD PTR x$[rsp]
  00034	0b c8		 or	 ecx, eax
  00036	8b c1		 mov	 eax, ecx
  00038	66 89 44 24 20	 mov	 WORD PTR x$[rsp], ax

; 542  :     /* Sign-extension, in case short greater than 16 bits */
; 543  :     x |= -(x & 0x8000);

  0003d	0f bf 44 24 20	 movsx	 eax, WORD PTR x$[rsp]
  00042	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00047	f7 d8		 neg	 eax
  00049	0f bf 4c 24 20	 movsx	 ecx, WORD PTR x$[rsp]
  0004e	0b c8		 or	 ecx, eax
  00050	8b c1		 mov	 eax, ecx
  00052	66 89 44 24 20	 mov	 WORD PTR x$[rsp], ax

; 544  :     return x;

  00057	0f bf 44 24 20	 movsx	 eax, WORD PTR x$[rsp]

; 545  : }

  0005c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00060	c3		 ret	 0
r_short	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@JGNOHBEK@EOF?5read?5where?5not?5expected?$AA@ ; `string'
PUBLIC	??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@ ; `string'
PUBLIC	??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CH@JEOLDDLK@f?4read?$CI?$CJ?5returned?5not?5bytes?5but?5@ ; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_EOFError:QWORD
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	memcpy:PROC
EXTRN	__imp_fread:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_string DD imagerel r_string
	DD	imagerel r_string+623
	DD	imagerel $unwind$r_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_string DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BM@JGNOHBEK@EOF?5read?5where?5not?5expected?$AA@
CONST	SEGMENT
??_C@_0BM@JGNOHBEK@EOF?5read?5where?5not?5expected?$AA@ DB 'EOF read wher'
	DB	'e not expected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@
CONST	SEGMENT
??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@ DB 'r'
	DB	'ead() returned too much data: %zd bytes requested, %zd return'
	DB	'ed', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JEOLDDLK@f?4read?$CI?$CJ?5returned?5not?5bytes?5but?5@
CONST	SEGMENT
??_C@_0CH@JEOLDDLK@f?4read?$CI?$CJ?5returned?5not?5bytes?5but?5@ DB 'f.re'
	DB	'ad() returned not bytes but %.100s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT r_string
_TEXT	SEGMENT
read$ = 32
ptr$ = 40
left$ = 48
data$20828 = 56
tv76 = 64
s$ = 96
n$ = 104
p$ = 112
r_string PROC						; COMDAT

; 464  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 465  :     char *ptr;
; 466  :     Py_ssize_t read, left;
; 467  : 
; 468  :     if (!p->readable) {

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR p$[rsp]
  00018	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0001d	0f 85 a9 00 00
	00		 jne	 $LN11@r_string

; 469  :         if (p->fp != NULL)

  00023	48 8b 44 24 70	 mov	 rax, QWORD PTR p$[rsp]
  00028	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002c	74 24		 je	 SHORT $LN10@r_string

; 470  :             /* The result fits into int because it must be <=n. */
; 471  :             read = fread(s, 1, n, p->fp);

  0002e	48 8b 44 24 70	 mov	 rax, QWORD PTR p$[rsp]
  00033	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  00036	4c 8b 44 24 68	 mov	 r8, QWORD PTR n$[rsp]
  0003b	ba 01 00 00 00	 mov	 edx, 1
  00040	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  0004b	48 89 44 24 20	 mov	 QWORD PTR read$[rsp], rax

; 472  :         else {

  00050	eb 75		 jmp	 SHORT $LN9@r_string
$LN10@r_string:

; 473  :             left = p->end - p->ptr;

  00052	48 8b 44 24 70	 mov	 rax, QWORD PTR p$[rsp]
  00057	48 8b 4c 24 70	 mov	 rcx, QWORD PTR p$[rsp]
  0005c	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  00060	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00064	48 2b c1	 sub	 rax, rcx
  00067	48 89 44 24 30	 mov	 QWORD PTR left$[rsp], rax

; 474  :             read = (left < n) ? left : n;

  0006c	48 8b 44 24 68	 mov	 rax, QWORD PTR n$[rsp]
  00071	48 39 44 24 30	 cmp	 QWORD PTR left$[rsp], rax
  00076	7d 0c		 jge	 SHORT $LN14@r_string
  00078	48 8b 44 24 30	 mov	 rax, QWORD PTR left$[rsp]
  0007d	48 89 44 24 40	 mov	 QWORD PTR tv76[rsp], rax
  00082	eb 0a		 jmp	 SHORT $LN15@r_string
$LN14@r_string:
  00084	48 8b 44 24 68	 mov	 rax, QWORD PTR n$[rsp]
  00089	48 89 44 24 40	 mov	 QWORD PTR tv76[rsp], rax
$LN15@r_string:
  0008e	48 8b 44 24 40	 mov	 rax, QWORD PTR tv76[rsp]
  00093	48 89 44 24 20	 mov	 QWORD PTR read$[rsp], rax

; 475  :             memcpy(s, p->ptr, read);

  00098	4c 8b 44 24 20	 mov	 r8, QWORD PTR read$[rsp]
  0009d	48 8b 44 24 70	 mov	 rax, QWORD PTR p$[rsp]
  000a2	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  000a6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000ab	e8 00 00 00 00	 call	 memcpy

; 476  :             p->ptr += read;

  000b0	48 8b 44 24 70	 mov	 rax, QWORD PTR p$[rsp]
  000b5	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  000b9	48 03 44 24 20	 add	 rax, QWORD PTR read$[rsp]
  000be	48 8b 4c 24 70	 mov	 rcx, QWORD PTR p$[rsp]
  000c3	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
$LN9@r_string:

; 477  :         }
; 478  :     }
; 479  :     else {

  000c7	e9 70 01 00 00	 jmp	 $LN8@r_string
$LN11@r_string:

; 480  :         _Py_IDENTIFIER(read);
; 481  : 
; 482  :         PyObject *data = _PyObject_CallMethodId(p->readable, &PyId_read, "n", n);

  000cc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_read@?4??r_string@@9@9
  000d1	8b c0		 mov	 eax, eax
  000d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000d9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e6	4c 8b 4c 24 68	 mov	 r9, QWORD PTR n$[rsp]
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  000f2	48 8b d0	 mov	 rdx, rax
  000f5	48 8b 44 24 70	 mov	 rax, QWORD PTR p$[rsp]
  000fa	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  000fe	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00103	48 89 44 24 38	 mov	 QWORD PTR data$20828[rsp], rax

; 483  :         read = 0;

  00108	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR read$[rsp], 0

; 484  :         if (data != NULL) {

  00111	48 83 7c 24 38
	00		 cmp	 QWORD PTR data$20828[rsp], 0
  00117	0f 84 1f 01 00
	00		 je	 $LN7@r_string

; 485  :             if (!PyBytes_Check(data)) {

  0011d	48 8b 44 24 38	 mov	 rax, QWORD PTR data$20828[rsp]
  00122	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00126	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0012c	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00131	85 c0		 test	 eax, eax
  00133	75 25		 jne	 SHORT $LN6@r_string

; 486  :                 PyErr_Format(PyExc_TypeError,
; 487  :                              "f.read() returned not bytes but %.100s",
; 488  :                              data->ob_type->tp_name);

  00135	48 8b 44 24 38	 mov	 rax, QWORD PTR data$20828[rsp]
  0013a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0013e	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00142	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@JEOLDDLK@f?4read?$CI?$CJ?5returned?5not?5bytes?5but?5@
  00149	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00150	e8 00 00 00 00	 call	 PyErr_Format

; 489  :             }
; 490  :             else {

  00155	e9 d8 00 00 00	 jmp	 $LN5@r_string
$LN6@r_string:

; 491  :                 read = PyBytes_GET_SIZE(data);

  0015a	48 8b 44 24 38	 mov	 rax, QWORD PTR data$20828[rsp]
  0015f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00163	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00169	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0016e	85 c0		 test	 eax, eax
  00170	75 1c		 jne	 SHORT $LN16@r_string
  00172	41 b8 eb 01 00
	00		 mov	 r8d, 491		; 000001ebH
  00178	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  0017f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018c	33 c0		 xor	 eax, eax
$LN16@r_string:
  0018e	48 8b 44 24 38	 mov	 rax, QWORD PTR data$20828[rsp]
  00193	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00197	48 89 44 24 20	 mov	 QWORD PTR read$[rsp], rax

; 492  :                 if (read > 0) {

  0019c	48 83 7c 24 20
	00		 cmp	 QWORD PTR read$[rsp], 0
  001a2	0f 8e 8a 00 00
	00		 jle	 $LN4@r_string

; 493  :                     if (read > n) {

  001a8	48 8b 44 24 68	 mov	 rax, QWORD PTR n$[rsp]
  001ad	48 39 44 24 20	 cmp	 QWORD PTR read$[rsp], rax
  001b2	7e 28		 jle	 SHORT $LN3@r_string

; 494  :                         PyErr_Format(PyExc_ValueError,
; 495  :                                     "read() returned too much data: "
; 496  :                                     "%zd bytes requested, %zd returned",
; 497  :                                     n, read);

  001b4	4c 8b 4c 24 20	 mov	 r9, QWORD PTR read$[rsp]
  001b9	4c 8b 44 24 68	 mov	 r8, QWORD PTR n$[rsp]
  001be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@
  001c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001cc	e8 00 00 00 00	 call	 PyErr_Format

; 498  :                         read = -1;

  001d1	48 c7 44 24 20
	ff ff ff ff	 mov	 QWORD PTR read$[rsp], -1

; 499  :                     }
; 500  :                     else {

  001da	eb 56		 jmp	 SHORT $LN2@r_string
$LN3@r_string:

; 501  :                         ptr = PyBytes_AS_STRING(data);

  001dc	48 8b 44 24 38	 mov	 rax, QWORD PTR data$20828[rsp]
  001e1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001e5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001eb	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001f0	85 c0		 test	 eax, eax
  001f2	75 1c		 jne	 SHORT $LN17@r_string
  001f4	41 b8 f5 01 00
	00		 mov	 r8d, 501		; 000001f5H
  001fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  00201	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
  00208	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0020e	33 c0		 xor	 eax, eax
$LN17@r_string:
  00210	48 8b 44 24 38	 mov	 rax, QWORD PTR data$20828[rsp]
  00215	48 83 c0 78	 add	 rax, 120		; 00000078H
  00219	48 89 44 24 28	 mov	 QWORD PTR ptr$[rsp], rax

; 502  :                         memcpy(s, ptr, read);

  0021e	4c 8b 44 24 20	 mov	 r8, QWORD PTR read$[rsp]
  00223	48 8b 54 24 28	 mov	 rdx, QWORD PTR ptr$[rsp]
  00228	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0022d	e8 00 00 00 00	 call	 memcpy
$LN2@r_string:
$LN4@r_string:
$LN5@r_string:

; 503  :                     }
; 504  :                 }
; 505  :             }
; 506  :             Py_DECREF(data);

  00232	48 8b 4c 24 38	 mov	 rcx, QWORD PTR data$20828[rsp]
  00237	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@r_string:
$LN8@r_string:

; 507  :         }
; 508  :     }
; 509  :     if (!PyErr_Occurred() && (read < n)) {

  0023c	e8 00 00 00 00	 call	 PyErr_Occurred
  00241	48 85 c0	 test	 rax, rax
  00244	75 1f		 jne	 SHORT $LN1@r_string
  00246	48 8b 44 24 68	 mov	 rax, QWORD PTR n$[rsp]
  0024b	48 39 44 24 20	 cmp	 QWORD PTR read$[rsp], rax
  00250	7d 13		 jge	 SHORT $LN1@r_string

; 510  :         PyErr_SetString(PyExc_EOFError, "EOF read where not expected");

  00252	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JGNOHBEK@EOF?5read?5where?5not?5expected?$AA@
  00259	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  00260	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@r_string:

; 511  :     }
; 512  :     return read;

  00265	48 8b 44 24 20	 mov	 rax, QWORD PTR read$[rsp]

; 513  : }

  0026a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0026e	c3		 ret	 0
r_string ENDP
_TEXT	ENDS
PUBLIC	PyMarshal_ReadLongFromFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_ReadLongFromFile DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$PyMarshal_ReadLongFromFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_ReadLongFromFile DD 010901H
	DD	0c209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyMarshal_ReadLongFromFile
_TEXT	SEGMENT
rf$ = 32
fp$ = 112
PyMarshal_ReadLongFromFile PROC				; COMDAT

; 1152 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1153 :     RFILE rf;
; 1154 :     rf.fp = fp;

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR fp$[rsp]
  0000e	48 89 44 24 20	 mov	 QWORD PTR rf$[rsp], rax

; 1155 :     rf.readable = NULL;

  00013	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+16], 0

; 1156 :     rf.current_filename = NULL;

  0001c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+32], 0

; 1157 :     rf.ptr = rf.end = NULL;

  00025	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+48], 0
  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR rf$[rsp+48]
  00033	48 89 44 24 48	 mov	 QWORD PTR rf$[rsp+40], rax

; 1158 :     return r_long(&rf);

  00038	48 8d 4c 24 20	 lea	 rcx, QWORD PTR rf$[rsp]
  0003d	e8 00 00 00 00	 call	 r_long

; 1159 : }

  00042	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00046	c3		 ret	 0
PyMarshal_ReadLongFromFile ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_long DD imagerel r_long
	DD	imagerel r_long+107
	DD	imagerel $unwind$r_long
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_long DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT r_long
_TEXT	SEGMENT
x$ = 32
buffer$ = 36
p$ = 64
r_long	PROC						; COMDAT

; 549  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 550  :     register long x;
; 551  :     unsigned char buffer[4];
; 552  : 
; 553  :     r_string((char *) buffer, 4, p);

  00009	4c 8b 44 24 40	 mov	 r8, QWORD PTR p$[rsp]
  0000e	ba 04 00 00 00	 mov	 edx, 4
  00013	48 8d 4c 24 24	 lea	 rcx, QWORD PTR buffer$[rsp]
  00018	e8 00 00 00 00	 call	 r_string

; 554  :     x = buffer[0];

  0001d	0f b6 44 24 24	 movzx	 eax, BYTE PTR buffer$[rsp]
  00022	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 555  :     x |= (long)buffer[1] << 8;

  00026	0f b6 44 24 25	 movzx	 eax, BYTE PTR buffer$[rsp+1]
  0002b	c1 e0 08	 shl	 eax, 8
  0002e	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  00032	0b c8		 or	 ecx, eax
  00034	8b c1		 mov	 eax, ecx
  00036	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 556  :     x |= (long)buffer[2] << 16;

  0003a	0f b6 44 24 26	 movzx	 eax, BYTE PTR buffer$[rsp+2]
  0003f	c1 e0 10	 shl	 eax, 16
  00042	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  00046	0b c8		 or	 ecx, eax
  00048	8b c1		 mov	 eax, ecx
  0004a	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 557  :     x |= (long)buffer[3] << 24;

  0004e	0f b6 44 24 27	 movzx	 eax, BYTE PTR buffer$[rsp+3]
  00053	c1 e0 18	 shl	 eax, 24
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR x$[rsp]
  0005a	0b c8		 or	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 558  : #if SIZEOF_LONG > 4
; 559  :     /* Sign extension for 64-bit machines */
; 560  :     x |= -(x & 0x80000000L);
; 561  : #endif
; 562  :     return x;

  00062	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]

; 563  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
r_long	ENDP
_TEXT	ENDS
PUBLIC	PyMarshal_ReadObjectFromFile
PUBLIC	PyMarshal_ReadObjectFromString
PUBLIC	PyMarshal_ReadLastObjectFromFile
EXTRN	_PyMem_DebugFree:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	_PyMem_DebugMalloc:PROC
EXTRN	_PxMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_ReadLastObjectFromFile DD imagerel $LN9
	DD	imagerel $LN9+236
	DD	imagerel $unwind$PyMarshal_ReadLastObjectFromFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_ReadLastObjectFromFile DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyMarshal_ReadLastObjectFromFile
_TEXT	SEGMENT
filesize$ = 32
pBuf$21315 = 40
v$21323 = 48
n$21321 = 56
tv76 = 64
tv91 = 72
fp$ = 96
PyMarshal_ReadLastObjectFromFile PROC			; COMDAT

; 1182 : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1183 : /* REASONABLE_FILE_LIMIT is by defn something big enough for Tkinter.pyc. */
; 1184 : #define REASONABLE_FILE_LIMIT (1L << 18)
; 1185 : #ifdef HAVE_FSTAT
; 1186 :     off_t filesize;
; 1187 :     filesize = getfilesize(fp);

  00009	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  0000e	e8 00 00 00 00	 call	 getfilesize
  00013	89 44 24 20	 mov	 DWORD PTR filesize$[rsp], eax

; 1188 :     if (filesize > 0 && filesize <= REASONABLE_FILE_LIMIT) {

  00017	83 7c 24 20 00	 cmp	 DWORD PTR filesize$[rsp], 0
  0001c	0f 8e bb 00 00
	00		 jle	 $LN2@PyMarshal_@2
  00022	81 7c 24 20 00
	00 04 00	 cmp	 DWORD PTR filesize$[rsp], 262144 ; 00040000H
  0002a	0f 8f ad 00 00
	00		 jg	 $LN2@PyMarshal_@2

; 1189 :         char* pBuf = (char *)PyMem_MALLOC(filesize);

  00030	e8 00 00 00 00	 call	 _Py_PXCTX
  00035	85 c0		 test	 eax, eax
  00037	74 14		 je	 SHORT $LN5@PyMarshal_@2
  00039	48 63 44 24 20	 movsxd	 rax, DWORD PTR filesize$[rsp]
  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 _PxMem_Malloc
  00046	48 89 44 24 40	 mov	 QWORD PTR tv76[rsp], rax
  0004b	eb 12		 jmp	 SHORT $LN6@PyMarshal_@2
$LN5@PyMarshal_@2:
  0004d	48 63 44 24 20	 movsxd	 rax, DWORD PTR filesize$[rsp]
  00052	48 8b c8	 mov	 rcx, rax
  00055	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  0005a	48 89 44 24 40	 mov	 QWORD PTR tv76[rsp], rax
$LN6@PyMarshal_@2:
  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR tv76[rsp]
  00064	48 89 44 24 28	 mov	 QWORD PTR pBuf$21315[rsp], rax

; 1190 :         if (pBuf != NULL) {

  00069	48 83 7c 24 28
	00		 cmp	 QWORD PTR pBuf$21315[rsp], 0
  0006f	74 6c		 je	 SHORT $LN1@PyMarshal_@2

; 1191 :             size_t n = fread(pBuf, 1, (size_t)filesize, fp);

  00071	48 63 44 24 20	 movsxd	 rax, DWORD PTR filesize$[rsp]
  00076	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fp$[rsp]
  0007b	4c 8b c0	 mov	 r8, rax
  0007e	ba 01 00 00 00	 mov	 edx, 1
  00083	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pBuf$21315[rsp]
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  0008e	48 89 44 24 38	 mov	 QWORD PTR n$21321[rsp], rax

; 1192 :             PyObject* v = PyMarshal_ReadObjectFromString(pBuf, n);

  00093	48 8b 54 24 38	 mov	 rdx, QWORD PTR n$21321[rsp]
  00098	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pBuf$21315[rsp]
  0009d	e8 00 00 00 00	 call	 PyMarshal_ReadObjectFromString
  000a2	48 89 44 24 30	 mov	 QWORD PTR v$21323[rsp], rax

; 1193 :             PyMem_FREE(pBuf);

  000a7	e8 00 00 00 00	 call	 _Py_PXCTX
  000ac	85 c0		 test	 eax, eax
  000ae	74 14		 je	 SHORT $LN7@PyMarshal_@2
  000b0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pBuf$21315[rsp]
  000b5	e8 00 00 00 00	 call	 _PxMem_Free
  000ba	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000c2	eb 12		 jmp	 SHORT $LN8@PyMarshal_@2
$LN7@PyMarshal_@2:
  000c4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pBuf$21315[rsp]
  000c9	e8 00 00 00 00	 call	 _PyMem_DebugFree
  000ce	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN8@PyMarshal_@2:

; 1194 :             return v;

  000d6	48 8b 44 24 30	 mov	 rax, QWORD PTR v$21323[rsp]
  000db	eb 0a		 jmp	 SHORT $LN3@PyMarshal_@2
$LN1@PyMarshal_@2:
$LN2@PyMarshal_@2:

; 1195 :         }
; 1196 : 
; 1197 :     }
; 1198 : #endif
; 1199 :     /* We don't have fstat, or we do but the file is larger than
; 1200 :      * REASONABLE_FILE_LIMIT or malloc failed -- read a byte at a time.
; 1201 :      */
; 1202 :     return PyMarshal_ReadObjectFromFile(fp);

  000dd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  000e2	e8 00 00 00 00	 call	 PyMarshal_ReadObjectFromFile
$LN3@PyMarshal_@2:

; 1203 : 
; 1204 : #undef REASONABLE_FILE_LIMIT
; 1205 : }

  000e7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000eb	c3		 ret	 0
PyMarshal_ReadLastObjectFromFile ENDP
_TEXT	ENDS
EXTRN	__imp_fileno:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$getfilesize DD imagerel getfilesize
	DD	imagerel getfilesize+54
	DD	imagerel $unwind$getfilesize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getfilesize DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT getfilesize
_TEXT	SEGMENT
st$ = 32
fp$ = 96
getfilesize PROC					; COMDAT

; 1165 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1166 :     struct stat st;
; 1167 :     if (fstat(fileno(fp), &st) != 0)

  00009	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00014	48 8d 54 24 20	 lea	 rdx, QWORD PTR st$[rsp]
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 fstat
  00020	85 c0		 test	 eax, eax
  00022	74 09		 je	 SHORT $LN2@getfilesiz

; 1168 :         return -1;

  00024	b8 ff ff ff ff	 mov	 eax, -1
  00029	eb 06		 jmp	 SHORT $LN3@getfilesiz

; 1169 :     else

  0002b	eb 04		 jmp	 SHORT $LN1@getfilesiz
$LN2@getfilesiz:

; 1170 :         return st.st_size;

  0002d	8b 44 24 34	 mov	 eax, DWORD PTR st$[rsp+20]
$LN1@getfilesiz:
$LN3@getfilesiz:

; 1171 : }

  00031	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00035	c3		 ret	 0
getfilesize ENDP
_TEXT	ENDS
EXTRN	__imp__fstat64i32:PROC
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sys\stat.inl
pdata	SEGMENT
$pdata$fstat DD	imagerel fstat
	DD	imagerel fstat+33
	DD	imagerel $unwind$fstat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fstat DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fstat
_TEXT	SEGMENT
_Desc$ = 48
_Stat$ = 56
fstat	PROC						; COMDAT

; 52   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 53   :     _STATIC_ASSERT( sizeof(struct stat) == sizeof(struct _stat64i32) );
; 54   :     return _fstat64i32(_Desc,(struct _stat64i32 *)_Stat);

  0000d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Stat$[rsp]
  00012	8b 4c 24 30	 mov	 ecx, DWORD PTR _Desc$[rsp]
  00016	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fstat64i32

; 55   : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
fstat	ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\python\marshal.c
pdata	SEGMENT
$pdata$PyMarshal_ReadObjectFromFile DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$PyMarshal_ReadObjectFromFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_ReadObjectFromFile DD 010901H
	DD	0e209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyMarshal_ReadObjectFromFile
_TEXT	SEGMENT
rf$ = 32
result$ = 96
fp$ = 128
PyMarshal_ReadObjectFromFile PROC			; COMDAT

; 1209 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1210 :     RFILE rf;
; 1211 :     PyObject *result;
; 1212 :     rf.fp = fp;

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR fp$[rsp]
  00011	48 89 44 24 20	 mov	 QWORD PTR rf$[rsp], rax

; 1213 :     rf.readable = NULL;

  00016	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+16], 0

; 1214 :     rf.current_filename = NULL;

  0001f	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+32], 0

; 1215 :     rf.depth = 0;

  00028	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR rf$[rsp+12], 0

; 1216 :     rf.ptr = rf.end = NULL;

  00030	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+48], 0
  00039	48 8b 44 24 50	 mov	 rax, QWORD PTR rf$[rsp+48]
  0003e	48 89 44 24 48	 mov	 QWORD PTR rf$[rsp+40], rax

; 1217 :     result = r_object(&rf);

  00043	48 8d 4c 24 20	 lea	 rcx, QWORD PTR rf$[rsp]
  00048	e8 00 00 00 00	 call	 r_object
  0004d	48 89 44 24 60	 mov	 QWORD PTR result$[rsp], rax

; 1218 :     return result;

  00052	48 8b 44 24 60	 mov	 rax, QWORD PTR result$[rsp]

; 1219 : }

  00057	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0005b	c3		 ret	 0
PyMarshal_ReadObjectFromFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@HHIDIMHG@bad?5marshal?5data?5?$CIunknown?5type?5c@ ; `string'
PUBLIC	??_C@_0CE@FAAPONDG@NULL?5object?5in?5marshal?5data?5for?5@ ; `string'
PUBLIC	??_C@_0CJ@KFLIJKG@bad?5marshal?5data?5?$CIset?5size?5out?5o@ ; `string'
PUBLIC	??_C@_0CF@CJJAIPOI@NULL?5object?5in?5marshal?5data?5for?5@ ; `string'
PUBLIC	??_C@_0CK@MIJMBDEN@bad?5marshal?5data?5?$CIlist?5size?5out?5@ ; `string'
PUBLIC	??_C@_0CG@PMGHMCHE@NULL?5object?5in?5marshal?5data?5for?5@ ; `string'
PUBLIC	??_C@_0CL@ENHOKCN@bad?5marshal?5data?5?$CItuple?5size?5out@ ; `string'
PUBLIC	??_C@_0CN@LMDCKOGJ@bad?5marshal?5data?5?$CIunicode?5size?5o@ ; `string'
PUBLIC	??_C@_0CM@MECHBKKI@bad?5marshal?5data?5?$CIstring?5size?5ou@ ; `string'
PUBLIC	$T21859
PUBLIC	$T21858
PUBLIC	__real@bff0000000000000
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OABGMDJP@recursion?5limit?5exceeded?$AA@ ; `string'
EXTRN	PyCode_New:PROC
EXTRN	PyUnicode_Compare:PROC
EXTRN	PySet_Add:PROC
EXTRN	PyFrozenSet_New:PROC
EXTRN	PySet_New:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyList_New:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyUnicode_DecodeUTF8:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyComplex_FromCComplex:PROC
EXTRN	_PyFloat_Unpack8:PROC
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyOS_string_to_double:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_object DD imagerel r_object
	DD	imagerel r_object+5393
	DD	imagerel $unwind$r_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_object DD 040e01H
	DD	07b010eH
	DD	060067007H
xdata	ENDS
;	COMDAT ??_C@_0CF@HHIDIMHG@bad?5marshal?5data?5?$CIunknown?5type?5c@
CONST	SEGMENT
??_C@_0CF@HHIDIMHG@bad?5marshal?5data?5?$CIunknown?5type?5c@ DB 'bad mars'
	DB	'hal data (unknown type code)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FAAPONDG@NULL?5object?5in?5marshal?5data?5for?5@
CONST	SEGMENT
??_C@_0CE@FAAPONDG@NULL?5object?5in?5marshal?5data?5for?5@ DB 'NULL objec'
	DB	't in marshal data for set', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KFLIJKG@bad?5marshal?5data?5?$CIset?5size?5out?5o@
CONST	SEGMENT
??_C@_0CJ@KFLIJKG@bad?5marshal?5data?5?$CIset?5size?5out?5o@ DB 'bad mars'
	DB	'hal data (set size out of range)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CJJAIPOI@NULL?5object?5in?5marshal?5data?5for?5@
CONST	SEGMENT
??_C@_0CF@CJJAIPOI@NULL?5object?5in?5marshal?5data?5for?5@ DB 'NULL objec'
	DB	't in marshal data for list', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MIJMBDEN@bad?5marshal?5data?5?$CIlist?5size?5out?5@
CONST	SEGMENT
??_C@_0CK@MIJMBDEN@bad?5marshal?5data?5?$CIlist?5size?5out?5@ DB 'bad mar'
	DB	'shal data (list size out of range)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PMGHMCHE@NULL?5object?5in?5marshal?5data?5for?5@
CONST	SEGMENT
??_C@_0CG@PMGHMCHE@NULL?5object?5in?5marshal?5data?5for?5@ DB 'NULL objec'
	DB	't in marshal data for tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@ENHOKCN@bad?5marshal?5data?5?$CItuple?5size?5out@
CONST	SEGMENT
??_C@_0CL@ENHOKCN@bad?5marshal?5data?5?$CItuple?5size?5out@ DB 'bad marsh'
	DB	'al data (tuple size out of range)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LMDCKOGJ@bad?5marshal?5data?5?$CIunicode?5size?5o@
CONST	SEGMENT
??_C@_0CN@LMDCKOGJ@bad?5marshal?5data?5?$CIunicode?5size?5o@ DB 'bad mars'
	DB	'hal data (unicode size out of range)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MECHBKKI@bad?5marshal?5data?5?$CIstring?5size?5ou@
CONST	SEGMENT
??_C@_0CM@MECHBKKI@bad?5marshal?5data?5?$CIstring?5size?5ou@ DB 'bad mars'
	DB	'hal data (string size out of range)', 00H	; `string'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT ??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@
CONST	SEGMENT
??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@ DB 'EOF read w'
	DB	'here object expected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OABGMDJP@recursion?5limit?5exceeded?$AA@
CONST	SEGMENT
??_C@_0BJ@OABGMDJP@recursion?5limit?5exceeded?$AA@ DB 'recursion limit ex'
	DB	'ceeded', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT r_object
_TEXT	SEGMENT
v$ = 128
n$ = 136
i$ = 140
retval$ = 144
type$ = 152
v2$ = 160
buf$20991 = 176
dx$20992 = 432
x$21001 = 440
buf$21000 = 448
buf$21008 = 464
c$21009 = 720
buf$21022 = 736
c$21023 = 744
buffer$21053 = 760
key$21121 = 768
val$21122 = 776
freevars$21176 = 784
flags$21167 = 792
cellvars$21178 = 800
names$21172 = 808
code$21168 = 816
argcount$21163 = 824
name$21182 = 832
kwonlyargcount$21164 = 840
nlocals$21165 = 844
lnotab$21185 = 848
firstlineno$21184 = 856
stacksize$21166 = 860
filename$21180 = 864
consts$21170 = 872
varnames$21174 = 880
$T21858 = 896
$T21859 = 912
tv78 = 928
tv92 = 936
tv282 = 944
tv281 = 952
tv296 = 960
tv306 = 964
tv390 = 968
p$ = 1008
r_object PROC						; COMDAT

; 673  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec d8 03
	00 00		 sub	 rsp, 984		; 000003d8H

; 674  :     /* NULL is a valid return value, it does not necessarily means that
; 675  :        an exception is set. */
; 676  :     PyObject *v, *v2;
; 677  :     long i, n;
; 678  :     int type = r_byte(p);

  0000e	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00016	e8 00 00 00 00	 call	 r_byte
  0001b	89 84 24 98 00
	00 00		 mov	 DWORD PTR type$[rsp], eax

; 679  :     PyObject *retval;
; 680  : 
; 681  :     p->depth++;

  00022	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0002a	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0002d	ff c0		 inc	 eax
  0002f	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00037	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 682  : 
; 683  :     if (p->depth > MAX_MARSHAL_STACK_DEPTH) {

  0003a	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00042	81 78 0c dc 05
	00 00		 cmp	 DWORD PTR [rax+12], 1500 ; 000005dcH
  00049	7e 32		 jle	 SHORT $LN142@r_object

; 684  :         p->depth--;

  0004b	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00053	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00056	ff c8		 dec	 eax
  00058	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00060	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 685  :         PyErr_SetString(PyExc_ValueError, "recursion limit exceeded");

  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@OABGMDJP@recursion?5limit?5exceeded?$AA@
  0006a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00071	e8 00 00 00 00	 call	 PyErr_SetString

; 686  :         return NULL;

  00076	33 c0		 xor	 eax, eax
  00078	e9 b3 13 00 00	 jmp	 $LN143@r_object
$LN142@r_object:

; 687  :     }
; 688  : 
; 689  :     switch (type) {

  0007d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR type$[rsp]
  00084	89 84 24 a0 03
	00 00		 mov	 DWORD PTR tv78[rsp], eax
  0008b	8b 84 24 a0 03
	00 00		 mov	 eax, DWORD PTR tv78[rsp]
  00092	ff c0		 inc	 eax
  00094	89 84 24 a0 03
	00 00		 mov	 DWORD PTR tv78[rsp], eax
  0009b	83 bc 24 a0 03
	00 00 7c	 cmp	 DWORD PTR tv78[rsp], 124 ; 0000007cH
  000a3	0f 87 48 13 00
	00		 ja	 $LN1@r_object
  000a9	48 63 84 24 a0
	03 00 00	 movsxd	 rax, DWORD PTR tv78[rsp]
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000b8	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN158@r_object[rcx+rax]
  000c0	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN159@r_object[rcx+rax*4]
  000c7	48 03 c1	 add	 rax, rcx
  000ca	ff e0		 jmp	 rax
$LN139@r_object:

; 690  : 
; 691  :     case EOF:
; 692  :         PyErr_SetString(PyExc_EOFError,
; 693  :                         "EOF read where object expected");

  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@
  000d3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  000da	e8 00 00 00 00	 call	 PyErr_SetString

; 694  :         retval = NULL;

  000df	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 695  :         break;

  000eb	e9 20 13 00 00	 jmp	 $LN140@r_object
$LN138@r_object:

; 696  : 
; 697  :     case TYPE_NULL:
; 698  :         retval = NULL;

  000f0	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 699  :         break;

  000fc	e9 0f 13 00 00	 jmp	 $LN140@r_object
$LN137@r_object:

; 700  : 
; 701  :     case TYPE_NONE:
; 702  :         Py_INCREF(Py_None);

  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00108	e8 00 00 00 00	 call	 _Py_IncRef

; 703  :         retval = Py_None;

  0010d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00114	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 704  :         break;

  0011c	e9 ef 12 00 00	 jmp	 $LN140@r_object
$LN136@r_object:

; 705  : 
; 706  :     case TYPE_STOPITER:
; 707  :         Py_INCREF(PyExc_StopIteration);

  00121	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  00128	e8 00 00 00 00	 call	 _Py_IncRef

; 708  :         retval = PyExc_StopIteration;

  0012d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_StopIteration
  00134	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 709  :         break;

  0013c	e9 cf 12 00 00	 jmp	 $LN140@r_object
$LN135@r_object:

; 710  : 
; 711  :     case TYPE_ELLIPSIS:
; 712  :         Py_INCREF(Py_Ellipsis);

  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_EllipsisObject
  00148	e8 00 00 00 00	 call	 _Py_IncRef

; 713  :         retval = Py_Ellipsis;

  0014d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_EllipsisObject
  00154	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 714  :         break;

  0015c	e9 af 12 00 00	 jmp	 $LN140@r_object
$LN134@r_object:

; 715  : 
; 716  :     case TYPE_FALSE:
; 717  :         Py_INCREF(Py_False);

  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00168	e8 00 00 00 00	 call	 _Py_IncRef

; 718  :         retval = Py_False;

  0016d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00174	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 719  :         break;

  0017c	e9 8f 12 00 00	 jmp	 $LN140@r_object
$LN133@r_object:

; 720  : 
; 721  :     case TYPE_TRUE:
; 722  :         Py_INCREF(Py_True);

  00181	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00188	e8 00 00 00 00	 call	 _Py_IncRef

; 723  :         retval = Py_True;

  0018d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00194	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 724  :         break;

  0019c	e9 6f 12 00 00	 jmp	 $LN140@r_object
$LN132@r_object:

; 725  : 
; 726  :     case TYPE_INT:
; 727  :         n = r_long(p);

  001a1	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  001a9	e8 00 00 00 00	 call	 r_long
  001ae	89 84 24 88 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 728  :         retval = PyErr_Occurred() ? NULL : PyLong_FromLong(n);

  001b5	e8 00 00 00 00	 call	 PyErr_Occurred
  001ba	48 85 c0	 test	 rax, rax
  001bd	74 0e		 je	 SHORT $LN145@r_object
  001bf	48 c7 84 24 a8
	03 00 00 00 00
	00 00		 mov	 QWORD PTR tv92[rsp], 0
  001cb	eb 14		 jmp	 SHORT $LN146@r_object
$LN145@r_object:
  001cd	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR n$[rsp]
  001d4	e8 00 00 00 00	 call	 PyLong_FromLong
  001d9	48 89 84 24 a8
	03 00 00	 mov	 QWORD PTR tv92[rsp], rax
$LN146@r_object:
  001e1	48 8b 84 24 a8
	03 00 00	 mov	 rax, QWORD PTR tv92[rsp]
  001e9	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 729  :         break;

  001f1	e9 1a 12 00 00	 jmp	 $LN140@r_object
$LN131@r_object:

; 730  : 
; 731  :     case TYPE_INT64:
; 732  :         retval = r_long64(p);

  001f6	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  001fe	e8 00 00 00 00	 call	 r_long64
  00203	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 733  :         break;

  0020b	e9 00 12 00 00	 jmp	 $LN140@r_object
$LN130@r_object:

; 734  : 
; 735  :     case TYPE_LONG:
; 736  :         retval = r_PyLong(p);

  00210	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00218	e8 00 00 00 00	 call	 r_PyLong
  0021d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 737  :         break;

  00225	e9 e6 11 00 00	 jmp	 $LN140@r_object
$LN129@r_object:

; 738  : 
; 739  :     case TYPE_FLOAT:
; 740  :         {
; 741  :             char buf[256];
; 742  :             double dx;
; 743  :             retval = NULL;

  0022a	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 744  :             n = r_byte(p);

  00236	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0023e	e8 00 00 00 00	 call	 r_byte
  00243	89 84 24 88 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 745  :             if (n == EOF) {

  0024a	83 bc 24 88 00
	00 00 ff	 cmp	 DWORD PTR n$[rsp], -1
  00252	75 18		 jne	 SHORT $LN128@r_object

; 746  :                 PyErr_SetString(PyExc_EOFError,
; 747  :                     "EOF read where object expected");

  00254	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@
  0025b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  00262	e8 00 00 00 00	 call	 PyErr_SetString

; 748  :                 break;

  00267	e9 a4 11 00 00	 jmp	 $LN140@r_object
$LN128@r_object:

; 749  :             }
; 750  :             if (r_string(buf, n, p) != n)

  0026c	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00274	4c 8b 84 24 f0
	03 00 00	 mov	 r8, QWORD PTR p$[rsp]
  0027c	48 8b d0	 mov	 rdx, rax
  0027f	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR buf$20991[rsp]
  00287	e8 00 00 00 00	 call	 r_string
  0028c	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  00294	48 3b c1	 cmp	 rax, rcx
  00297	74 05		 je	 SHORT $LN127@r_object

; 751  :                 break;

  00299	e9 72 11 00 00	 jmp	 $LN140@r_object
$LN127@r_object:

; 752  :             buf[n] = '\0';

  0029e	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  002a6	c6 84 04 b0 00
	00 00 00	 mov	 BYTE PTR buf$20991[rsp+rax], 0

; 753  :             dx = PyOS_string_to_double(buf, NULL, NULL);

  002ae	45 33 c0	 xor	 r8d, r8d
  002b1	33 d2		 xor	 edx, edx
  002b3	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR buf$20991[rsp]
  002bb	e8 00 00 00 00	 call	 PyOS_string_to_double
  002c0	f2 0f 11 84 24
	b0 01 00 00	 movsdx	 QWORD PTR dx$20992[rsp], xmm0

; 754  :             if (dx == -1.0 && PyErr_Occurred())

  002c9	f2 0f 10 84 24
	b0 01 00 00	 movsdx	 xmm0, QWORD PTR dx$20992[rsp]
  002d2	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  002da	7a 11		 jp	 SHORT $LN126@r_object
  002dc	75 0f		 jne	 SHORT $LN126@r_object
  002de	e8 00 00 00 00	 call	 PyErr_Occurred
  002e3	48 85 c0	 test	 rax, rax
  002e6	74 05		 je	 SHORT $LN126@r_object

; 755  :                 break;

  002e8	e9 23 11 00 00	 jmp	 $LN140@r_object
$LN126@r_object:

; 756  :             retval = PyFloat_FromDouble(dx);

  002ed	f2 0f 10 84 24
	b0 01 00 00	 movsdx	 xmm0, QWORD PTR dx$20992[rsp]
  002f6	e8 00 00 00 00	 call	 PyFloat_FromDouble
  002fb	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 757  :             break;

  00303	e9 08 11 00 00	 jmp	 $LN140@r_object
$LN125@r_object:

; 758  :         }
; 759  : 
; 760  :     case TYPE_BINARY_FLOAT:
; 761  :         {
; 762  :             unsigned char buf[8];
; 763  :             double x;
; 764  :             if (r_string((char*)buf, 8, p) != 8) {

  00308	4c 8b 84 24 f0
	03 00 00	 mov	 r8, QWORD PTR p$[rsp]
  00310	ba 08 00 00 00	 mov	 edx, 8
  00315	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR buf$21000[rsp]
  0031d	e8 00 00 00 00	 call	 r_string
  00322	48 83 f8 08	 cmp	 rax, 8
  00326	74 11		 je	 SHORT $LN124@r_object

; 765  :                 retval = NULL;

  00328	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 766  :                 break;

  00334	e9 d7 10 00 00	 jmp	 $LN140@r_object
$LN124@r_object:

; 767  :             }
; 768  :             x = _PyFloat_Unpack8(buf, 1);

  00339	ba 01 00 00 00	 mov	 edx, 1
  0033e	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR buf$21000[rsp]
  00346	e8 00 00 00 00	 call	 _PyFloat_Unpack8
  0034b	f2 0f 11 84 24
	b8 01 00 00	 movsdx	 QWORD PTR x$21001[rsp], xmm0

; 769  :             if (x == -1.0 && PyErr_Occurred()) {

  00354	f2 0f 10 84 24
	b8 01 00 00	 movsdx	 xmm0, QWORD PTR x$21001[rsp]
  0035d	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  00365	7a 1d		 jp	 SHORT $LN123@r_object
  00367	75 1b		 jne	 SHORT $LN123@r_object
  00369	e8 00 00 00 00	 call	 PyErr_Occurred
  0036e	48 85 c0	 test	 rax, rax
  00371	74 11		 je	 SHORT $LN123@r_object

; 770  :                 retval = NULL;

  00373	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 771  :                 break;

  0037f	e9 8c 10 00 00	 jmp	 $LN140@r_object
$LN123@r_object:

; 772  :             }
; 773  :             retval = PyFloat_FromDouble(x);

  00384	f2 0f 10 84 24
	b8 01 00 00	 movsdx	 xmm0, QWORD PTR x$21001[rsp]
  0038d	e8 00 00 00 00	 call	 PyFloat_FromDouble
  00392	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 774  :             break;

  0039a	e9 71 10 00 00	 jmp	 $LN140@r_object
$LN122@r_object:

; 775  :         }
; 776  : 
; 777  :     case TYPE_COMPLEX:
; 778  :         {
; 779  :             char buf[256];
; 780  :             Py_complex c;
; 781  :             retval = NULL;

  0039f	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 782  :             n = r_byte(p);

  003ab	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  003b3	e8 00 00 00 00	 call	 r_byte
  003b8	89 84 24 88 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 783  :             if (n == EOF) {

  003bf	83 bc 24 88 00
	00 00 ff	 cmp	 DWORD PTR n$[rsp], -1
  003c7	75 18		 jne	 SHORT $LN121@r_object

; 784  :                 PyErr_SetString(PyExc_EOFError,
; 785  :                     "EOF read where object expected");

  003c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@
  003d0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  003d7	e8 00 00 00 00	 call	 PyErr_SetString

; 786  :                 break;

  003dc	e9 2f 10 00 00	 jmp	 $LN140@r_object
$LN121@r_object:

; 787  :             }
; 788  :             if (r_string(buf, n, p) != n)

  003e1	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  003e9	4c 8b 84 24 f0
	03 00 00	 mov	 r8, QWORD PTR p$[rsp]
  003f1	48 8b d0	 mov	 rdx, rax
  003f4	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR buf$21008[rsp]
  003fc	e8 00 00 00 00	 call	 r_string
  00401	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  00409	48 3b c1	 cmp	 rax, rcx
  0040c	74 05		 je	 SHORT $LN120@r_object

; 789  :                 break;

  0040e	e9 fd 0f 00 00	 jmp	 $LN140@r_object
$LN120@r_object:

; 790  :             buf[n] = '\0';

  00413	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  0041b	c6 84 04 d0 01
	00 00 00	 mov	 BYTE PTR buf$21008[rsp+rax], 0

; 791  :             c.real = PyOS_string_to_double(buf, NULL, NULL);

  00423	45 33 c0	 xor	 r8d, r8d
  00426	33 d2		 xor	 edx, edx
  00428	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR buf$21008[rsp]
  00430	e8 00 00 00 00	 call	 PyOS_string_to_double
  00435	f2 0f 11 84 24
	d0 02 00 00	 movsdx	 QWORD PTR c$21009[rsp], xmm0

; 792  :             if (c.real == -1.0 && PyErr_Occurred())

  0043e	f2 0f 10 84 24
	d0 02 00 00	 movsdx	 xmm0, QWORD PTR c$21009[rsp]
  00447	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  0044f	7a 11		 jp	 SHORT $LN119@r_object
  00451	75 0f		 jne	 SHORT $LN119@r_object
  00453	e8 00 00 00 00	 call	 PyErr_Occurred
  00458	48 85 c0	 test	 rax, rax
  0045b	74 05		 je	 SHORT $LN119@r_object

; 793  :                 break;

  0045d	e9 ae 0f 00 00	 jmp	 $LN140@r_object
$LN119@r_object:

; 794  :             n = r_byte(p);

  00462	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0046a	e8 00 00 00 00	 call	 r_byte
  0046f	89 84 24 88 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 795  :             if (n == EOF) {

  00476	83 bc 24 88 00
	00 00 ff	 cmp	 DWORD PTR n$[rsp], -1
  0047e	75 18		 jne	 SHORT $LN118@r_object

; 796  :                 PyErr_SetString(PyExc_EOFError,
; 797  :                     "EOF read where object expected");

  00480	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@OFPCODJP@EOF?5read?5where?5object?5expected?$AA@
  00487	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EOFError
  0048e	e8 00 00 00 00	 call	 PyErr_SetString

; 798  :                 break;

  00493	e9 78 0f 00 00	 jmp	 $LN140@r_object
$LN118@r_object:

; 799  :             }
; 800  :             if (r_string(buf, n, p) != n)

  00498	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  004a0	4c 8b 84 24 f0
	03 00 00	 mov	 r8, QWORD PTR p$[rsp]
  004a8	48 8b d0	 mov	 rdx, rax
  004ab	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR buf$21008[rsp]
  004b3	e8 00 00 00 00	 call	 r_string
  004b8	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  004c0	48 3b c1	 cmp	 rax, rcx
  004c3	74 05		 je	 SHORT $LN117@r_object

; 801  :                 break;

  004c5	e9 46 0f 00 00	 jmp	 $LN140@r_object
$LN117@r_object:

; 802  :             buf[n] = '\0';

  004ca	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  004d2	c6 84 04 d0 01
	00 00 00	 mov	 BYTE PTR buf$21008[rsp+rax], 0

; 803  :             c.imag = PyOS_string_to_double(buf, NULL, NULL);

  004da	45 33 c0	 xor	 r8d, r8d
  004dd	33 d2		 xor	 edx, edx
  004df	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR buf$21008[rsp]
  004e7	e8 00 00 00 00	 call	 PyOS_string_to_double
  004ec	f2 0f 11 84 24
	d8 02 00 00	 movsdx	 QWORD PTR c$21009[rsp+8], xmm0

; 804  :             if (c.imag == -1.0 && PyErr_Occurred())

  004f5	f2 0f 10 84 24
	d8 02 00 00	 movsdx	 xmm0, QWORD PTR c$21009[rsp+8]
  004fe	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  00506	7a 11		 jp	 SHORT $LN116@r_object
  00508	75 0f		 jne	 SHORT $LN116@r_object
  0050a	e8 00 00 00 00	 call	 PyErr_Occurred
  0050f	48 85 c0	 test	 rax, rax
  00512	74 05		 je	 SHORT $LN116@r_object

; 805  :                 break;

  00514	e9 f7 0e 00 00	 jmp	 $LN140@r_object
$LN116@r_object:

; 806  :             retval = PyComplex_FromCComplex(c);

  00519	48 8d 84 24 80
	03 00 00	 lea	 rax, QWORD PTR $T21858[rsp]
  00521	48 8d 8c 24 d0
	02 00 00	 lea	 rcx, QWORD PTR c$21009[rsp]
  00529	48 8b f8	 mov	 rdi, rax
  0052c	48 8b f1	 mov	 rsi, rcx
  0052f	b9 10 00 00 00	 mov	 ecx, 16
  00534	f3 a4		 rep movsb
  00536	48 8d 8c 24 80
	03 00 00	 lea	 rcx, QWORD PTR $T21858[rsp]
  0053e	e8 00 00 00 00	 call	 PyComplex_FromCComplex
  00543	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 807  :             break;

  0054b	e9 c0 0e 00 00	 jmp	 $LN140@r_object
$LN115@r_object:

; 808  :         }
; 809  : 
; 810  :     case TYPE_BINARY_COMPLEX:
; 811  :         {
; 812  :             unsigned char buf[8];
; 813  :             Py_complex c;
; 814  :             if (r_string((char*)buf, 8, p) != 8) {

  00550	4c 8b 84 24 f0
	03 00 00	 mov	 r8, QWORD PTR p$[rsp]
  00558	ba 08 00 00 00	 mov	 edx, 8
  0055d	48 8d 8c 24 e0
	02 00 00	 lea	 rcx, QWORD PTR buf$21022[rsp]
  00565	e8 00 00 00 00	 call	 r_string
  0056a	48 83 f8 08	 cmp	 rax, 8
  0056e	74 11		 je	 SHORT $LN114@r_object

; 815  :                 retval = NULL;

  00570	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 816  :                 break;

  0057c	e9 8f 0e 00 00	 jmp	 $LN140@r_object
$LN114@r_object:

; 817  :             }
; 818  :             c.real = _PyFloat_Unpack8(buf, 1);

  00581	ba 01 00 00 00	 mov	 edx, 1
  00586	48 8d 8c 24 e0
	02 00 00	 lea	 rcx, QWORD PTR buf$21022[rsp]
  0058e	e8 00 00 00 00	 call	 _PyFloat_Unpack8
  00593	f2 0f 11 84 24
	e8 02 00 00	 movsdx	 QWORD PTR c$21023[rsp], xmm0

; 819  :             if (c.real == -1.0 && PyErr_Occurred()) {

  0059c	f2 0f 10 84 24
	e8 02 00 00	 movsdx	 xmm0, QWORD PTR c$21023[rsp]
  005a5	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  005ad	7a 1d		 jp	 SHORT $LN113@r_object
  005af	75 1b		 jne	 SHORT $LN113@r_object
  005b1	e8 00 00 00 00	 call	 PyErr_Occurred
  005b6	48 85 c0	 test	 rax, rax
  005b9	74 11		 je	 SHORT $LN113@r_object

; 820  :                 retval = NULL;

  005bb	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 821  :                 break;

  005c7	e9 44 0e 00 00	 jmp	 $LN140@r_object
$LN113@r_object:

; 822  :             }
; 823  :             if (r_string((char*)buf, 8, p) != 8) {

  005cc	4c 8b 84 24 f0
	03 00 00	 mov	 r8, QWORD PTR p$[rsp]
  005d4	ba 08 00 00 00	 mov	 edx, 8
  005d9	48 8d 8c 24 e0
	02 00 00	 lea	 rcx, QWORD PTR buf$21022[rsp]
  005e1	e8 00 00 00 00	 call	 r_string
  005e6	48 83 f8 08	 cmp	 rax, 8
  005ea	74 11		 je	 SHORT $LN112@r_object

; 824  :                 retval = NULL;

  005ec	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 825  :                 break;

  005f8	e9 13 0e 00 00	 jmp	 $LN140@r_object
$LN112@r_object:

; 826  :             }
; 827  :             c.imag = _PyFloat_Unpack8(buf, 1);

  005fd	ba 01 00 00 00	 mov	 edx, 1
  00602	48 8d 8c 24 e0
	02 00 00	 lea	 rcx, QWORD PTR buf$21022[rsp]
  0060a	e8 00 00 00 00	 call	 _PyFloat_Unpack8
  0060f	f2 0f 11 84 24
	f0 02 00 00	 movsdx	 QWORD PTR c$21023[rsp+8], xmm0

; 828  :             if (c.imag == -1.0 && PyErr_Occurred()) {

  00618	f2 0f 10 84 24
	f0 02 00 00	 movsdx	 xmm0, QWORD PTR c$21023[rsp+8]
  00621	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  00629	7a 1d		 jp	 SHORT $LN111@r_object
  0062b	75 1b		 jne	 SHORT $LN111@r_object
  0062d	e8 00 00 00 00	 call	 PyErr_Occurred
  00632	48 85 c0	 test	 rax, rax
  00635	74 11		 je	 SHORT $LN111@r_object

; 829  :                 retval = NULL;

  00637	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 830  :                 break;

  00643	e9 c8 0d 00 00	 jmp	 $LN140@r_object
$LN111@r_object:

; 831  :             }
; 832  :             retval = PyComplex_FromCComplex(c);

  00648	48 8d 84 24 90
	03 00 00	 lea	 rax, QWORD PTR $T21859[rsp]
  00650	48 8d 8c 24 e8
	02 00 00	 lea	 rcx, QWORD PTR c$21023[rsp]
  00658	48 8b f8	 mov	 rdi, rax
  0065b	48 8b f1	 mov	 rsi, rcx
  0065e	b9 10 00 00 00	 mov	 ecx, 16
  00663	f3 a4		 rep movsb
  00665	48 8d 8c 24 90
	03 00 00	 lea	 rcx, QWORD PTR $T21859[rsp]
  0066d	e8 00 00 00 00	 call	 PyComplex_FromCComplex
  00672	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 833  :             break;

  0067a	e9 91 0d 00 00	 jmp	 $LN140@r_object
$LN110@r_object:

; 834  :         }
; 835  : 
; 836  :     case TYPE_STRING:
; 837  :         n = r_long(p);

  0067f	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00687	e8 00 00 00 00	 call	 r_long
  0068c	89 84 24 88 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 838  :         if (PyErr_Occurred()) {

  00693	e8 00 00 00 00	 call	 PyErr_Occurred
  00698	48 85 c0	 test	 rax, rax
  0069b	74 11		 je	 SHORT $LN109@r_object

; 839  :             retval = NULL;

  0069d	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 840  :             break;

  006a9	e9 62 0d 00 00	 jmp	 $LN140@r_object
$LN109@r_object:

; 841  :         }
; 842  :         if (n < 0 || n > SIZE32_MAX) {

  006ae	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR n$[rsp], 0
  006b6	7c 0d		 jl	 SHORT $LN107@r_object
  006b8	81 bc 24 88 00
	00 00 ff ff ff
	7f		 cmp	 DWORD PTR n$[rsp], 2147483647 ; 7fffffffH
  006c3	7e 24		 jle	 SHORT $LN108@r_object
$LN107@r_object:

; 843  :             PyErr_SetString(PyExc_ValueError, "bad marshal data (string size out of range)");

  006c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@MECHBKKI@bad?5marshal?5data?5?$CIstring?5size?5ou@
  006cc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  006d3	e8 00 00 00 00	 call	 PyErr_SetString

; 844  :             retval = NULL;

  006d8	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 845  :             break;

  006e4	e9 27 0d 00 00	 jmp	 $LN140@r_object
$LN108@r_object:

; 846  :         }
; 847  :         v = PyBytes_FromStringAndSize((char *)NULL, n);

  006e9	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  006f1	48 8b d0	 mov	 rdx, rax
  006f4	33 c9		 xor	 ecx, ecx
  006f6	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  006fb	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR v$[rsp], rax

; 848  :         if (v == NULL) {

  00703	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR v$[rsp], 0
  0070c	75 11		 jne	 SHORT $LN106@r_object

; 849  :             retval = NULL;

  0070e	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 850  :             break;

  0071a	e9 f1 0c 00 00	 jmp	 $LN140@r_object
$LN106@r_object:

; 851  :         }
; 852  :         if (r_string(PyBytes_AS_STRING(v), n, p) != n) {

  0071f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00727	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0072b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00731	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00736	85 c0		 test	 eax, eax
  00738	75 1c		 jne	 SHORT $LN147@r_object
  0073a	41 b8 54 03 00
	00		 mov	 r8d, 852		; 00000354H
  00740	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  00747	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@KPAEGFOJ@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  0074e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00754	33 c0		 xor	 eax, eax
$LN147@r_object:
  00756	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  0075e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00766	48 83 c1 78	 add	 rcx, 120		; 00000078H
  0076a	4c 8b 84 24 f0
	03 00 00	 mov	 r8, QWORD PTR p$[rsp]
  00772	48 8b d0	 mov	 rdx, rax
  00775	e8 00 00 00 00	 call	 r_string
  0077a	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  00782	48 3b c1	 cmp	 rax, rcx
  00785	74 1e		 je	 SHORT $LN105@r_object

; 853  :             Py_DECREF(v);

  00787	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0078f	e8 00 00 00 00	 call	 _Py_DecRef

; 854  :             retval = NULL;

  00794	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 855  :             break;

  007a0	e9 6b 0c 00 00	 jmp	 $LN140@r_object
$LN105@r_object:

; 856  :         }
; 857  :         retval = v;

  007a5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  007ad	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 858  :         break;

  007b5	e9 56 0c 00 00	 jmp	 $LN140@r_object
$LN104@r_object:

; 859  : 
; 860  :     case TYPE_UNICODE:
; 861  :         {
; 862  :         char *buffer;
; 863  : 
; 864  :         n = r_long(p);

  007ba	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  007c2	e8 00 00 00 00	 call	 r_long
  007c7	89 84 24 88 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 865  :         if (PyErr_Occurred()) {

  007ce	e8 00 00 00 00	 call	 PyErr_Occurred
  007d3	48 85 c0	 test	 rax, rax
  007d6	74 11		 je	 SHORT $LN103@r_object

; 866  :             retval = NULL;

  007d8	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 867  :             break;

  007e4	e9 27 0c 00 00	 jmp	 $LN140@r_object
$LN103@r_object:

; 868  :         }
; 869  :         if (n < 0 || n > SIZE32_MAX) {

  007e9	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR n$[rsp], 0
  007f1	7c 0d		 jl	 SHORT $LN101@r_object
  007f3	81 bc 24 88 00
	00 00 ff ff ff
	7f		 cmp	 DWORD PTR n$[rsp], 2147483647 ; 7fffffffH
  007fe	7e 24		 jle	 SHORT $LN102@r_object
$LN101@r_object:

; 870  :             PyErr_SetString(PyExc_ValueError, "bad marshal data (unicode size out of range)");

  00800	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@LMDCKOGJ@bad?5marshal?5data?5?$CIunicode?5size?5o@
  00807	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0080e	e8 00 00 00 00	 call	 PyErr_SetString

; 871  :             retval = NULL;

  00813	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 872  :             break;

  0081f	e9 ec 0b 00 00	 jmp	 $LN140@r_object
$LN102@r_object:

; 873  :         }
; 874  :         buffer = PyMem_NEW(char, n);

  00824	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  0082c	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  00836	48 3b c1	 cmp	 rax, rcx
  00839	76 0e		 jbe	 SHORT $LN150@r_object
  0083b	48 c7 84 24 b0
	03 00 00 00 00
	00 00		 mov	 QWORD PTR tv282[rsp], 0
  00847	eb 4b		 jmp	 SHORT $LN151@r_object
$LN150@r_object:
  00849	e8 00 00 00 00	 call	 _Py_PXCTX
  0084e	85 c0		 test	 eax, eax
  00850	74 1a		 je	 SHORT $LN148@r_object
  00852	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  0085a	48 8b c8	 mov	 rcx, rax
  0085d	e8 00 00 00 00	 call	 _PxMem_Malloc
  00862	48 89 84 24 b8
	03 00 00	 mov	 QWORD PTR tv281[rsp], rax
  0086a	eb 18		 jmp	 SHORT $LN149@r_object
$LN148@r_object:
  0086c	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00874	48 8b c8	 mov	 rcx, rax
  00877	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  0087c	48 89 84 24 b8
	03 00 00	 mov	 QWORD PTR tv281[rsp], rax
$LN149@r_object:
  00884	48 8b 84 24 b8
	03 00 00	 mov	 rax, QWORD PTR tv281[rsp]
  0088c	48 89 84 24 b0
	03 00 00	 mov	 QWORD PTR tv282[rsp], rax
$LN151@r_object:
  00894	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR tv282[rsp]
  0089c	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR buffer$21053[rsp], rax

; 875  :         if (buffer == NULL) {

  008a4	48 83 bc 24 f8
	02 00 00 00	 cmp	 QWORD PTR buffer$21053[rsp], 0
  008ad	75 12		 jne	 SHORT $LN100@r_object

; 876  :             retval = PyErr_NoMemory();

  008af	e8 00 00 00 00	 call	 PyErr_NoMemory
  008b4	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 877  :             break;

  008bc	e9 4f 0b 00 00	 jmp	 $LN140@r_object
$LN100@r_object:

; 878  :         }
; 879  :         if (r_string(buffer, n, p) != n) {

  008c1	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  008c9	4c 8b 84 24 f0
	03 00 00	 mov	 r8, QWORD PTR p$[rsp]
  008d1	48 8b d0	 mov	 rdx, rax
  008d4	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR buffer$21053[rsp]
  008dc	e8 00 00 00 00	 call	 r_string
  008e1	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  008e9	48 3b c1	 cmp	 rax, rcx
  008ec	74 4c		 je	 SHORT $LN99@r_object

; 880  :             PyMem_DEL(buffer);

  008ee	e8 00 00 00 00	 call	 _Py_PXCTX
  008f3	85 c0		 test	 eax, eax
  008f5	74 1a		 je	 SHORT $LN152@r_object
  008f7	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR buffer$21053[rsp]
  008ff	e8 00 00 00 00	 call	 _PxMem_Free
  00904	c7 84 24 c0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv296[rsp], 0
  0090f	eb 18		 jmp	 SHORT $LN153@r_object
$LN152@r_object:
  00911	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR buffer$21053[rsp]
  00919	e8 00 00 00 00	 call	 _PyMem_DebugFree
  0091e	c7 84 24 c0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv296[rsp], 0
$LN153@r_object:

; 881  :             retval = NULL;

  00929	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 882  :             break;

  00935	e9 d6 0a 00 00	 jmp	 $LN140@r_object
$LN99@r_object:

; 883  :         }
; 884  :         v = PyUnicode_DecodeUTF8(buffer, n, "surrogatepass");

  0093a	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00942	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@BNPCNOJJ@surrogatepass?$AA@
  00949	48 8b d0	 mov	 rdx, rax
  0094c	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR buffer$21053[rsp]
  00954	e8 00 00 00 00	 call	 PyUnicode_DecodeUTF8
  00959	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR v$[rsp], rax

; 885  :         PyMem_DEL(buffer);

  00961	e8 00 00 00 00	 call	 _Py_PXCTX
  00966	85 c0		 test	 eax, eax
  00968	74 1a		 je	 SHORT $LN154@r_object
  0096a	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR buffer$21053[rsp]
  00972	e8 00 00 00 00	 call	 _PxMem_Free
  00977	c7 84 24 c4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv306[rsp], 0
  00982	eb 18		 jmp	 SHORT $LN155@r_object
$LN154@r_object:
  00984	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR buffer$21053[rsp]
  0098c	e8 00 00 00 00	 call	 _PyMem_DebugFree
  00991	c7 84 24 c4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv306[rsp], 0
$LN155@r_object:

; 886  :         retval = v;

  0099c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  009a4	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 887  :         break;

  009ac	e9 5f 0a 00 00	 jmp	 $LN140@r_object
$LN98@r_object:

; 888  :         }
; 889  : 
; 890  :     case TYPE_TUPLE:
; 891  :         n = r_long(p);

  009b1	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  009b9	e8 00 00 00 00	 call	 r_long
  009be	89 84 24 88 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 892  :         if (PyErr_Occurred()) {

  009c5	e8 00 00 00 00	 call	 PyErr_Occurred
  009ca	48 85 c0	 test	 rax, rax
  009cd	74 11		 je	 SHORT $LN97@r_object

; 893  :             retval = NULL;

  009cf	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 894  :             break;

  009db	e9 30 0a 00 00	 jmp	 $LN140@r_object
$LN97@r_object:

; 895  :         }
; 896  :         if (n < 0 || n > SIZE32_MAX) {

  009e0	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR n$[rsp], 0
  009e8	7c 0d		 jl	 SHORT $LN95@r_object
  009ea	81 bc 24 88 00
	00 00 ff ff ff
	7f		 cmp	 DWORD PTR n$[rsp], 2147483647 ; 7fffffffH
  009f5	7e 24		 jle	 SHORT $LN96@r_object
$LN95@r_object:

; 897  :             PyErr_SetString(PyExc_ValueError, "bad marshal data (tuple size out of range)");

  009f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@ENHOKCN@bad?5marshal?5data?5?$CItuple?5size?5out@
  009fe	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00a05	e8 00 00 00 00	 call	 PyErr_SetString

; 898  :             retval = NULL;

  00a0a	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 899  :             break;

  00a16	e9 f5 09 00 00	 jmp	 $LN140@r_object
$LN96@r_object:

; 900  :         }
; 901  :         v = PyTuple_New(n);

  00a1b	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00a23	48 8b c8	 mov	 rcx, rax
  00a26	e8 00 00 00 00	 call	 PyTuple_New
  00a2b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR v$[rsp], rax

; 902  :         if (v == NULL) {

  00a33	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR v$[rsp], 0
  00a3c	75 11		 jne	 SHORT $LN94@r_object

; 903  :             retval = NULL;

  00a3e	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 904  :             break;

  00a4a	e9 c1 09 00 00	 jmp	 $LN140@r_object
$LN94@r_object:

; 905  :         }
; 906  :         for (i = 0; i < n; i++) {

  00a4f	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00a5a	eb 10		 jmp	 SHORT $LN93@r_object
$LN92@r_object:
  00a5c	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00a63	ff c0		 inc	 eax
  00a65	89 84 24 8c 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN93@r_object:
  00a6c	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  00a73	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  00a7a	7d 7a		 jge	 SHORT $LN91@r_object

; 907  :             v2 = r_object(p);

  00a7c	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00a84	e8 00 00 00 00	 call	 r_object
  00a89	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR v2$[rsp], rax

; 908  :             if ( v2 == NULL ) {

  00a91	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR v2$[rsp], 0
  00a9a	75 38		 jne	 SHORT $LN90@r_object

; 909  :                 if (!PyErr_Occurred())

  00a9c	e8 00 00 00 00	 call	 PyErr_Occurred
  00aa1	48 85 c0	 test	 rax, rax
  00aa4	75 13		 jne	 SHORT $LN89@r_object

; 910  :                     PyErr_SetString(PyExc_TypeError,
; 911  :                         "NULL object in marshal data for tuple");

  00aa6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@PMGHMCHE@NULL?5object?5in?5marshal?5data?5for?5@
  00aad	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00ab4	e8 00 00 00 00	 call	 PyErr_SetString
$LN89@r_object:

; 912  :                 Py_DECREF(v);

  00ab9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00ac1	e8 00 00 00 00	 call	 _Py_DecRef

; 913  :                 v = NULL;

  00ac6	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR v$[rsp], 0

; 914  :                 break;

  00ad2	eb 22		 jmp	 SHORT $LN91@r_object
$LN90@r_object:

; 915  :             }
; 916  :             PyTuple_SET_ITEM(v, i, v2);

  00ad4	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00adc	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00ae4	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR v2$[rsp]
  00aec	48 89 54 c1 70	 mov	 QWORD PTR [rcx+rax*8+112], rdx

; 917  :         }

  00af1	e9 66 ff ff ff	 jmp	 $LN92@r_object
$LN91@r_object:

; 918  :         retval = v;

  00af6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00afe	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 919  :         break;

  00b06	e9 05 09 00 00	 jmp	 $LN140@r_object
$LN88@r_object:

; 920  : 
; 921  :     case TYPE_LIST:
; 922  :         n = r_long(p);

  00b0b	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00b13	e8 00 00 00 00	 call	 r_long
  00b18	89 84 24 88 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 923  :         if (PyErr_Occurred()) {

  00b1f	e8 00 00 00 00	 call	 PyErr_Occurred
  00b24	48 85 c0	 test	 rax, rax
  00b27	74 11		 je	 SHORT $LN87@r_object

; 924  :             retval = NULL;

  00b29	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 925  :             break;

  00b35	e9 d6 08 00 00	 jmp	 $LN140@r_object
$LN87@r_object:

; 926  :         }
; 927  :         if (n < 0 || n > SIZE32_MAX) {

  00b3a	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR n$[rsp], 0
  00b42	7c 0d		 jl	 SHORT $LN85@r_object
  00b44	81 bc 24 88 00
	00 00 ff ff ff
	7f		 cmp	 DWORD PTR n$[rsp], 2147483647 ; 7fffffffH
  00b4f	7e 24		 jle	 SHORT $LN86@r_object
$LN85@r_object:

; 928  :             PyErr_SetString(PyExc_ValueError, "bad marshal data (list size out of range)");

  00b51	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@MIJMBDEN@bad?5marshal?5data?5?$CIlist?5size?5out?5@
  00b58	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00b5f	e8 00 00 00 00	 call	 PyErr_SetString

; 929  :             retval = NULL;

  00b64	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 930  :             break;

  00b70	e9 9b 08 00 00	 jmp	 $LN140@r_object
$LN86@r_object:

; 931  :         }
; 932  :         v = PyList_New(n);

  00b75	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00b7d	48 8b c8	 mov	 rcx, rax
  00b80	e8 00 00 00 00	 call	 PyList_New
  00b85	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR v$[rsp], rax

; 933  :         if (v == NULL) {

  00b8d	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR v$[rsp], 0
  00b96	75 11		 jne	 SHORT $LN84@r_object

; 934  :             retval = NULL;

  00b98	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 935  :             break;

  00ba4	e9 67 08 00 00	 jmp	 $LN140@r_object
$LN84@r_object:

; 936  :         }
; 937  :         for (i = 0; i < n; i++) {

  00ba9	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00bb4	eb 10		 jmp	 SHORT $LN83@r_object
$LN82@r_object:
  00bb6	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00bbd	ff c0		 inc	 eax
  00bbf	89 84 24 8c 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN83@r_object:
  00bc6	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  00bcd	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  00bd4	7d 7d		 jge	 SHORT $LN81@r_object

; 938  :             v2 = r_object(p);

  00bd6	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00bde	e8 00 00 00 00	 call	 r_object
  00be3	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR v2$[rsp], rax

; 939  :             if ( v2 == NULL ) {

  00beb	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR v2$[rsp], 0
  00bf4	75 38		 jne	 SHORT $LN80@r_object

; 940  :                 if (!PyErr_Occurred())

  00bf6	e8 00 00 00 00	 call	 PyErr_Occurred
  00bfb	48 85 c0	 test	 rax, rax
  00bfe	75 13		 jne	 SHORT $LN79@r_object

; 941  :                     PyErr_SetString(PyExc_TypeError,
; 942  :                         "NULL object in marshal data for list");

  00c00	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@CJJAIPOI@NULL?5object?5in?5marshal?5data?5for?5@
  00c07	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00c0e	e8 00 00 00 00	 call	 PyErr_SetString
$LN79@r_object:

; 943  :                 Py_DECREF(v);

  00c13	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00c1b	e8 00 00 00 00	 call	 _Py_DecRef

; 944  :                 v = NULL;

  00c20	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR v$[rsp], 0

; 945  :                 break;

  00c2c	eb 25		 jmp	 SHORT $LN81@r_object
$LN80@r_object:

; 946  :             }
; 947  :             PyList_SET_ITEM(v, i, v2);

  00c2e	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00c36	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00c3e	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00c42	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR v2$[rsp]
  00c4a	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 948  :         }

  00c4e	e9 63 ff ff ff	 jmp	 $LN82@r_object
$LN81@r_object:

; 949  :         retval = v;

  00c53	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00c5b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 950  :         break;

  00c63	e9 a8 07 00 00	 jmp	 $LN140@r_object
$LN78@r_object:

; 951  : 
; 952  :     case TYPE_DICT:
; 953  :         v = PyDict_New();

  00c68	e8 00 00 00 00	 call	 PyDict_New
  00c6d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR v$[rsp], rax

; 954  :         if (v == NULL) {

  00c75	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR v$[rsp], 0
  00c7e	75 11		 jne	 SHORT $LN77@r_object

; 955  :             retval = NULL;

  00c80	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 956  :             break;

  00c8c	e9 7f 07 00 00	 jmp	 $LN140@r_object
$LN77@r_object:
$LN76@r_object:

; 957  :         }
; 958  :         for (;;) {
; 959  :             PyObject *key, *val;
; 960  :             key = r_object(p);

  00c91	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00c99	e8 00 00 00 00	 call	 r_object
  00c9e	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR key$21121[rsp], rax

; 961  :             if (key == NULL)

  00ca6	48 83 bc 24 00
	03 00 00 00	 cmp	 QWORD PTR key$21121[rsp], 0
  00caf	75 02		 jne	 SHORT $LN74@r_object

; 962  :                 break;

  00cb1	eb 6d		 jmp	 SHORT $LN75@r_object
$LN74@r_object:

; 963  :             val = r_object(p);

  00cb3	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00cbb	e8 00 00 00 00	 call	 r_object
  00cc0	48 89 84 24 08
	03 00 00	 mov	 QWORD PTR val$21122[rsp], rax

; 964  :             if (val != NULL)

  00cc8	48 83 bc 24 08
	03 00 00 00	 cmp	 QWORD PTR val$21122[rsp], 0
  00cd1	74 1d		 je	 SHORT $LN73@r_object

; 965  :                 PyDict_SetItem(v, key, val);

  00cd3	4c 8b 84 24 08
	03 00 00	 mov	 r8, QWORD PTR val$21122[rsp]
  00cdb	48 8b 94 24 00
	03 00 00	 mov	 rdx, QWORD PTR key$21121[rsp]
  00ce3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00ceb	e8 00 00 00 00	 call	 PyDict_SetItem
$LN73@r_object:

; 966  :             Py_DECREF(key);

  00cf0	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR key$21121[rsp]
  00cf8	e8 00 00 00 00	 call	 _Py_DecRef
$LN72@r_object:

; 967  :             Py_XDECREF(val);

  00cfd	48 83 bc 24 08
	03 00 00 00	 cmp	 QWORD PTR val$21122[rsp], 0
  00d06	74 0d		 je	 SHORT $LN69@r_object
  00d08	48 8b 8c 24 08
	03 00 00	 mov	 rcx, QWORD PTR val$21122[rsp]
  00d10	e8 00 00 00 00	 call	 _Py_DecRef
$LN69@r_object:
  00d15	33 c0		 xor	 eax, eax
  00d17	85 c0		 test	 eax, eax
  00d19	75 e2		 jne	 SHORT $LN72@r_object

; 968  :         }

  00d1b	e9 71 ff ff ff	 jmp	 $LN76@r_object
$LN75@r_object:

; 969  :         if (PyErr_Occurred()) {

  00d20	e8 00 00 00 00	 call	 PyErr_Occurred
  00d25	48 85 c0	 test	 rax, rax
  00d28	74 19		 je	 SHORT $LN68@r_object

; 970  :             Py_DECREF(v);

  00d2a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00d32	e8 00 00 00 00	 call	 _Py_DecRef

; 971  :             v = NULL;

  00d37	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR v$[rsp], 0
$LN68@r_object:

; 972  :         }
; 973  :         retval = v;

  00d43	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00d4b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 974  :         break;

  00d53	e9 b8 06 00 00	 jmp	 $LN140@r_object
$LN67@r_object:

; 975  : 
; 976  :     case TYPE_SET:
; 977  :     case TYPE_FROZENSET:
; 978  :         n = r_long(p);

  00d58	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00d60	e8 00 00 00 00	 call	 r_long
  00d65	89 84 24 88 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 979  :         if (PyErr_Occurred()) {

  00d6c	e8 00 00 00 00	 call	 PyErr_Occurred
  00d71	48 85 c0	 test	 rax, rax
  00d74	74 11		 je	 SHORT $LN66@r_object

; 980  :             retval = NULL;

  00d76	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 981  :             break;

  00d82	e9 89 06 00 00	 jmp	 $LN140@r_object
$LN66@r_object:

; 982  :         }
; 983  :         if (n < 0 || n > SIZE32_MAX) {

  00d87	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR n$[rsp], 0
  00d8f	7c 0d		 jl	 SHORT $LN64@r_object
  00d91	81 bc 24 88 00
	00 00 ff ff ff
	7f		 cmp	 DWORD PTR n$[rsp], 2147483647 ; 7fffffffH
  00d9c	7e 24		 jle	 SHORT $LN65@r_object
$LN64@r_object:

; 984  :             PyErr_SetString(PyExc_ValueError, "bad marshal data (set size out of range)");

  00d9e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KFLIJKG@bad?5marshal?5data?5?$CIset?5size?5out?5o@
  00da5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00dac	e8 00 00 00 00	 call	 PyErr_SetString

; 985  :             retval = NULL;

  00db1	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 986  :             break;

  00dbd	e9 4e 06 00 00	 jmp	 $LN140@r_object
$LN65@r_object:

; 987  :         }
; 988  :         v = (type == TYPE_SET) ? PySet_New(NULL) : PyFrozenSet_New(NULL);

  00dc2	83 bc 24 98 00
	00 00 3c	 cmp	 DWORD PTR type$[rsp], 60 ; 0000003cH
  00dca	75 11		 jne	 SHORT $LN156@r_object
  00dcc	33 c9		 xor	 ecx, ecx
  00dce	e8 00 00 00 00	 call	 PySet_New
  00dd3	48 89 84 24 c8
	03 00 00	 mov	 QWORD PTR tv390[rsp], rax
  00ddb	eb 0f		 jmp	 SHORT $LN157@r_object
$LN156@r_object:
  00ddd	33 c9		 xor	 ecx, ecx
  00ddf	e8 00 00 00 00	 call	 PyFrozenSet_New
  00de4	48 89 84 24 c8
	03 00 00	 mov	 QWORD PTR tv390[rsp], rax
$LN157@r_object:
  00dec	48 8b 84 24 c8
	03 00 00	 mov	 rax, QWORD PTR tv390[rsp]
  00df4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR v$[rsp], rax

; 989  :         if (v == NULL) {

  00dfc	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR v$[rsp], 0
  00e05	75 11		 jne	 SHORT $LN63@r_object

; 990  :             retval = NULL;

  00e07	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0

; 991  :             break;

  00e13	e9 f8 05 00 00	 jmp	 $LN140@r_object
$LN63@r_object:

; 992  :         }
; 993  :         for (i = 0; i < n; i++) {

  00e18	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00e23	eb 10		 jmp	 SHORT $LN62@r_object
$LN61@r_object:
  00e25	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00e2c	ff c0		 inc	 eax
  00e2e	89 84 24 8c 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN62@r_object:
  00e35	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  00e3c	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  00e43	0f 8d ac 00 00
	00		 jge	 $LN60@r_object

; 994  :             v2 = r_object(p);

  00e49	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00e51	e8 00 00 00 00	 call	 r_object
  00e56	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR v2$[rsp], rax

; 995  :             if ( v2 == NULL ) {

  00e5e	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR v2$[rsp], 0
  00e67	75 38		 jne	 SHORT $LN59@r_object

; 996  :                 if (!PyErr_Occurred())

  00e69	e8 00 00 00 00	 call	 PyErr_Occurred
  00e6e	48 85 c0	 test	 rax, rax
  00e71	75 13		 jne	 SHORT $LN58@r_object

; 997  :                     PyErr_SetString(PyExc_TypeError,
; 998  :                         "NULL object in marshal data for set");

  00e73	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FAAPONDG@NULL?5object?5in?5marshal?5data?5for?5@
  00e7a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00e81	e8 00 00 00 00	 call	 PyErr_SetString
$LN58@r_object:

; 999  :                 Py_DECREF(v);

  00e86	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00e8e	e8 00 00 00 00	 call	 _Py_DecRef

; 1000 :                 v = NULL;

  00e93	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR v$[rsp], 0

; 1001 :                 break;

  00e9f	eb 54		 jmp	 SHORT $LN60@r_object
$LN59@r_object:

; 1002 :             }
; 1003 :             if (PySet_Add(v, v2) == -1) {

  00ea1	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR v2$[rsp]
  00ea9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00eb1	e8 00 00 00 00	 call	 PySet_Add
  00eb6	83 f8 ff	 cmp	 eax, -1
  00eb9	75 28		 jne	 SHORT $LN57@r_object

; 1004 :                 Py_DECREF(v);

  00ebb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00ec3	e8 00 00 00 00	 call	 _Py_DecRef

; 1005 :                 Py_DECREF(v2);

  00ec8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR v2$[rsp]
  00ed0	e8 00 00 00 00	 call	 _Py_DecRef

; 1006 :                 v = NULL;

  00ed5	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR v$[rsp], 0

; 1007 :                 break;

  00ee1	eb 12		 jmp	 SHORT $LN60@r_object
$LN57@r_object:

; 1008 :             }
; 1009 :             Py_DECREF(v2);

  00ee3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR v2$[rsp]
  00eeb	e8 00 00 00 00	 call	 _Py_DecRef

; 1010 :         }

  00ef0	e9 30 ff ff ff	 jmp	 $LN61@r_object
$LN60@r_object:

; 1011 :         retval = v;

  00ef5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  00efd	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 1012 :         break;

  00f05	e9 06 05 00 00	 jmp	 $LN140@r_object
$LN56@r_object:

; 1013 : 
; 1014 :     case TYPE_CODE:
; 1015 :         {
; 1016 :             int argcount;
; 1017 :             int kwonlyargcount;
; 1018 :             int nlocals;
; 1019 :             int stacksize;
; 1020 :             int flags;
; 1021 :             PyObject *code = NULL;

  00f0a	48 c7 84 24 30
	03 00 00 00 00
	00 00		 mov	 QWORD PTR code$21168[rsp], 0

; 1022 :             PyObject *consts = NULL;

  00f16	48 c7 84 24 68
	03 00 00 00 00
	00 00		 mov	 QWORD PTR consts$21170[rsp], 0

; 1023 :             PyObject *names = NULL;

  00f22	48 c7 84 24 28
	03 00 00 00 00
	00 00		 mov	 QWORD PTR names$21172[rsp], 0

; 1024 :             PyObject *varnames = NULL;

  00f2e	48 c7 84 24 70
	03 00 00 00 00
	00 00		 mov	 QWORD PTR varnames$21174[rsp], 0

; 1025 :             PyObject *freevars = NULL;

  00f3a	48 c7 84 24 10
	03 00 00 00 00
	00 00		 mov	 QWORD PTR freevars$21176[rsp], 0

; 1026 :             PyObject *cellvars = NULL;

  00f46	48 c7 84 24 20
	03 00 00 00 00
	00 00		 mov	 QWORD PTR cellvars$21178[rsp], 0

; 1027 :             PyObject *filename = NULL;

  00f52	48 c7 84 24 60
	03 00 00 00 00
	00 00		 mov	 QWORD PTR filename$21180[rsp], 0

; 1028 :             PyObject *name = NULL;

  00f5e	48 c7 84 24 40
	03 00 00 00 00
	00 00		 mov	 QWORD PTR name$21182[rsp], 0

; 1029 :             int firstlineno;
; 1030 :             PyObject *lnotab = NULL;

  00f6a	48 c7 84 24 50
	03 00 00 00 00
	00 00		 mov	 QWORD PTR lnotab$21185[rsp], 0

; 1031 : 
; 1032 :             v = NULL;

  00f76	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR v$[rsp], 0

; 1033 : 
; 1034 :             /* XXX ignore long->int overflows for now */
; 1035 :             argcount = (int)r_long(p);

  00f82	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00f8a	e8 00 00 00 00	 call	 r_long
  00f8f	89 84 24 38 03
	00 00		 mov	 DWORD PTR argcount$21163[rsp], eax

; 1036 :             if (PyErr_Occurred())

  00f96	e8 00 00 00 00	 call	 PyErr_Occurred
  00f9b	48 85 c0	 test	 rax, rax
  00f9e	74 05		 je	 SHORT $LN55@r_object

; 1037 :                 goto code_error;

  00fa0	e9 2c 03 00 00	 jmp	 $code_error$21190
$LN55@r_object:

; 1038 :             kwonlyargcount = (int)r_long(p);

  00fa5	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00fad	e8 00 00 00 00	 call	 r_long
  00fb2	89 84 24 48 03
	00 00		 mov	 DWORD PTR kwonlyargcount$21164[rsp], eax

; 1039 :             if (PyErr_Occurred())

  00fb9	e8 00 00 00 00	 call	 PyErr_Occurred
  00fbe	48 85 c0	 test	 rax, rax
  00fc1	74 05		 je	 SHORT $LN54@r_object

; 1040 :                 goto code_error;

  00fc3	e9 09 03 00 00	 jmp	 $code_error$21190
$LN54@r_object:

; 1041 :             nlocals = (int)r_long(p);

  00fc8	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00fd0	e8 00 00 00 00	 call	 r_long
  00fd5	89 84 24 4c 03
	00 00		 mov	 DWORD PTR nlocals$21165[rsp], eax

; 1042 :             if (PyErr_Occurred())

  00fdc	e8 00 00 00 00	 call	 PyErr_Occurred
  00fe1	48 85 c0	 test	 rax, rax
  00fe4	74 05		 je	 SHORT $LN53@r_object

; 1043 :                 goto code_error;

  00fe6	e9 e6 02 00 00	 jmp	 $code_error$21190
$LN53@r_object:

; 1044 :             stacksize = (int)r_long(p);

  00feb	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00ff3	e8 00 00 00 00	 call	 r_long
  00ff8	89 84 24 5c 03
	00 00		 mov	 DWORD PTR stacksize$21166[rsp], eax

; 1045 :             if (PyErr_Occurred())

  00fff	e8 00 00 00 00	 call	 PyErr_Occurred
  01004	48 85 c0	 test	 rax, rax
  01007	74 05		 je	 SHORT $LN52@r_object

; 1046 :                 goto code_error;

  01009	e9 c3 02 00 00	 jmp	 $code_error$21190
$LN52@r_object:

; 1047 :             flags = (int)r_long(p);

  0100e	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01016	e8 00 00 00 00	 call	 r_long
  0101b	89 84 24 18 03
	00 00		 mov	 DWORD PTR flags$21167[rsp], eax

; 1048 :             if (PyErr_Occurred())

  01022	e8 00 00 00 00	 call	 PyErr_Occurred
  01027	48 85 c0	 test	 rax, rax
  0102a	74 05		 je	 SHORT $LN51@r_object

; 1049 :                 goto code_error;

  0102c	e9 a0 02 00 00	 jmp	 $code_error$21190
$LN51@r_object:

; 1050 :             code = r_object(p);

  01031	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01039	e8 00 00 00 00	 call	 r_object
  0103e	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR code$21168[rsp], rax

; 1051 :             if (code == NULL)

  01046	48 83 bc 24 30
	03 00 00 00	 cmp	 QWORD PTR code$21168[rsp], 0
  0104f	75 05		 jne	 SHORT $LN50@r_object

; 1052 :                 goto code_error;

  01051	e9 7b 02 00 00	 jmp	 $code_error$21190
$LN50@r_object:

; 1053 :             consts = r_object(p);

  01056	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0105e	e8 00 00 00 00	 call	 r_object
  01063	48 89 84 24 68
	03 00 00	 mov	 QWORD PTR consts$21170[rsp], rax

; 1054 :             if (consts == NULL)

  0106b	48 83 bc 24 68
	03 00 00 00	 cmp	 QWORD PTR consts$21170[rsp], 0
  01074	75 05		 jne	 SHORT $LN49@r_object

; 1055 :                 goto code_error;

  01076	e9 56 02 00 00	 jmp	 $code_error$21190
$LN49@r_object:

; 1056 :             names = r_object(p);

  0107b	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01083	e8 00 00 00 00	 call	 r_object
  01088	48 89 84 24 28
	03 00 00	 mov	 QWORD PTR names$21172[rsp], rax

; 1057 :             if (names == NULL)

  01090	48 83 bc 24 28
	03 00 00 00	 cmp	 QWORD PTR names$21172[rsp], 0
  01099	75 05		 jne	 SHORT $LN48@r_object

; 1058 :                 goto code_error;

  0109b	e9 31 02 00 00	 jmp	 $code_error$21190
$LN48@r_object:

; 1059 :             varnames = r_object(p);

  010a0	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  010a8	e8 00 00 00 00	 call	 r_object
  010ad	48 89 84 24 70
	03 00 00	 mov	 QWORD PTR varnames$21174[rsp], rax

; 1060 :             if (varnames == NULL)

  010b5	48 83 bc 24 70
	03 00 00 00	 cmp	 QWORD PTR varnames$21174[rsp], 0
  010be	75 05		 jne	 SHORT $LN47@r_object

; 1061 :                 goto code_error;

  010c0	e9 0c 02 00 00	 jmp	 $code_error$21190
$LN47@r_object:

; 1062 :             freevars = r_object(p);

  010c5	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  010cd	e8 00 00 00 00	 call	 r_object
  010d2	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR freevars$21176[rsp], rax

; 1063 :             if (freevars == NULL)

  010da	48 83 bc 24 10
	03 00 00 00	 cmp	 QWORD PTR freevars$21176[rsp], 0
  010e3	75 05		 jne	 SHORT $LN46@r_object

; 1064 :                 goto code_error;

  010e5	e9 e7 01 00 00	 jmp	 $code_error$21190
$LN46@r_object:

; 1065 :             cellvars = r_object(p);

  010ea	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  010f2	e8 00 00 00 00	 call	 r_object
  010f7	48 89 84 24 20
	03 00 00	 mov	 QWORD PTR cellvars$21178[rsp], rax

; 1066 :             if (cellvars == NULL)

  010ff	48 83 bc 24 20
	03 00 00 00	 cmp	 QWORD PTR cellvars$21178[rsp], 0
  01108	75 05		 jne	 SHORT $LN45@r_object

; 1067 :                 goto code_error;

  0110a	e9 c2 01 00 00	 jmp	 $code_error$21190
$LN45@r_object:

; 1068 :             filename = r_object(p);

  0110f	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01117	e8 00 00 00 00	 call	 r_object
  0111c	48 89 84 24 60
	03 00 00	 mov	 QWORD PTR filename$21180[rsp], rax

; 1069 :             if (filename == NULL)

  01124	48 83 bc 24 60
	03 00 00 00	 cmp	 QWORD PTR filename$21180[rsp], 0
  0112d	75 05		 jne	 SHORT $LN44@r_object

; 1070 :                 goto code_error;

  0112f	e9 9d 01 00 00	 jmp	 $code_error$21190
$LN44@r_object:

; 1071 :             if (PyUnicode_CheckExact(filename)) {

  01134	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  0113b	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR filename$21180[rsp]
  01143	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  01147	75 74		 jne	 SHORT $LN43@r_object

; 1072 :                 if (p->current_filename != NULL) {

  01149	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01151	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  01156	74 51		 je	 SHORT $LN42@r_object

; 1073 :                     if (!PyUnicode_Compare(filename, p->current_filename)) {

  01158	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01160	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  01164	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR filename$21180[rsp]
  0116c	e8 00 00 00 00	 call	 PyUnicode_Compare
  01171	85 c0		 test	 eax, eax
  01173	75 32		 jne	 SHORT $LN41@r_object

; 1074 :                         Py_DECREF(filename);

  01175	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR filename$21180[rsp]
  0117d	e8 00 00 00 00	 call	 _Py_DecRef

; 1075 :                         Py_INCREF(p->current_filename);

  01182	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0118a	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0118e	e8 00 00 00 00	 call	 _Py_IncRef

; 1076 :                         filename = p->current_filename;

  01193	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0119b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0119f	48 89 84 24 60
	03 00 00	 mov	 QWORD PTR filename$21180[rsp], rax
$LN41@r_object:

; 1077 :                     }
; 1078 :                 }
; 1079 :                 else {

  011a7	eb 14		 jmp	 SHORT $LN40@r_object
$LN42@r_object:

; 1080 :                     p->current_filename = filename;

  011a9	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR p$[rsp]
  011b1	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR filename$21180[rsp]
  011b9	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
$LN40@r_object:
$LN43@r_object:

; 1081 :                 }
; 1082 :             }
; 1083 :             name = r_object(p);

  011bd	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  011c5	e8 00 00 00 00	 call	 r_object
  011ca	48 89 84 24 40
	03 00 00	 mov	 QWORD PTR name$21182[rsp], rax

; 1084 :             if (name == NULL)

  011d2	48 83 bc 24 40
	03 00 00 00	 cmp	 QWORD PTR name$21182[rsp], 0
  011db	75 05		 jne	 SHORT $LN39@r_object

; 1085 :                 goto code_error;

  011dd	e9 ef 00 00 00	 jmp	 $code_error$21190
$LN39@r_object:

; 1086 :             firstlineno = (int)r_long(p);

  011e2	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  011ea	e8 00 00 00 00	 call	 r_long
  011ef	89 84 24 58 03
	00 00		 mov	 DWORD PTR firstlineno$21184[rsp], eax

; 1087 :             lnotab = r_object(p);

  011f6	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  011fe	e8 00 00 00 00	 call	 r_object
  01203	48 89 84 24 50
	03 00 00	 mov	 QWORD PTR lnotab$21185[rsp], rax

; 1088 :             if (lnotab == NULL)

  0120b	48 83 bc 24 50
	03 00 00 00	 cmp	 QWORD PTR lnotab$21185[rsp], 0
  01214	75 05		 jne	 SHORT $LN38@r_object

; 1089 :                 goto code_error;

  01216	e9 b6 00 00 00	 jmp	 $code_error$21190
$LN38@r_object:

; 1090 : 
; 1091 :             v = (PyObject *) PyCode_New(
; 1092 :                             argcount, kwonlyargcount,
; 1093 :                             nlocals, stacksize, flags,
; 1094 :                             code, consts, names, varnames,
; 1095 :                             freevars, cellvars, filename, name,
; 1096 :                             firstlineno, lnotab);

  0121b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR lnotab$21185[rsp]
  01223	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  01228	8b 84 24 58 03
	00 00		 mov	 eax, DWORD PTR firstlineno$21184[rsp]
  0122f	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  01233	48 8b 84 24 40
	03 00 00	 mov	 rax, QWORD PTR name$21182[rsp]
  0123b	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  01240	48 8b 84 24 60
	03 00 00	 mov	 rax, QWORD PTR filename$21180[rsp]
  01248	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  0124d	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR cellvars$21178[rsp]
  01255	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0125a	48 8b 84 24 10
	03 00 00	 mov	 rax, QWORD PTR freevars$21176[rsp]
  01262	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  01267	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR varnames$21174[rsp]
  0126f	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  01274	48 8b 84 24 28
	03 00 00	 mov	 rax, QWORD PTR names$21172[rsp]
  0127c	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  01281	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR consts$21170[rsp]
  01289	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0128e	48 8b 84 24 30
	03 00 00	 mov	 rax, QWORD PTR code$21168[rsp]
  01296	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0129b	8b 84 24 18 03
	00 00		 mov	 eax, DWORD PTR flags$21167[rsp]
  012a2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  012a6	44 8b 8c 24 5c
	03 00 00	 mov	 r9d, DWORD PTR stacksize$21166[rsp]
  012ae	44 8b 84 24 4c
	03 00 00	 mov	 r8d, DWORD PTR nlocals$21165[rsp]
  012b6	8b 94 24 48 03
	00 00		 mov	 edx, DWORD PTR kwonlyargcount$21164[rsp]
  012bd	8b 8c 24 38 03
	00 00		 mov	 ecx, DWORD PTR argcount$21163[rsp]
  012c4	e8 00 00 00 00	 call	 PyCode_New
  012c9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR v$[rsp], rax
$code_error$21190:
$LN37@r_object:

; 1097 : 
; 1098 :           code_error:
; 1099 :             Py_XDECREF(code);

  012d1	48 83 bc 24 30
	03 00 00 00	 cmp	 QWORD PTR code$21168[rsp], 0
  012da	74 0d		 je	 SHORT $LN34@r_object
  012dc	48 8b 8c 24 30
	03 00 00	 mov	 rcx, QWORD PTR code$21168[rsp]
  012e4	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@r_object:
  012e9	33 c0		 xor	 eax, eax
  012eb	85 c0		 test	 eax, eax
  012ed	75 e2		 jne	 SHORT $LN37@r_object
$LN33@r_object:

; 1100 :             Py_XDECREF(consts);

  012ef	48 83 bc 24 68
	03 00 00 00	 cmp	 QWORD PTR consts$21170[rsp], 0
  012f8	74 0d		 je	 SHORT $LN30@r_object
  012fa	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR consts$21170[rsp]
  01302	e8 00 00 00 00	 call	 _Py_DecRef
$LN30@r_object:
  01307	33 c0		 xor	 eax, eax
  01309	85 c0		 test	 eax, eax
  0130b	75 e2		 jne	 SHORT $LN33@r_object
$LN29@r_object:

; 1101 :             Py_XDECREF(names);

  0130d	48 83 bc 24 28
	03 00 00 00	 cmp	 QWORD PTR names$21172[rsp], 0
  01316	74 0d		 je	 SHORT $LN26@r_object
  01318	48 8b 8c 24 28
	03 00 00	 mov	 rcx, QWORD PTR names$21172[rsp]
  01320	e8 00 00 00 00	 call	 _Py_DecRef
$LN26@r_object:
  01325	33 c0		 xor	 eax, eax
  01327	85 c0		 test	 eax, eax
  01329	75 e2		 jne	 SHORT $LN29@r_object
$LN25@r_object:

; 1102 :             Py_XDECREF(varnames);

  0132b	48 83 bc 24 70
	03 00 00 00	 cmp	 QWORD PTR varnames$21174[rsp], 0
  01334	74 0d		 je	 SHORT $LN22@r_object
  01336	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR varnames$21174[rsp]
  0133e	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@r_object:
  01343	33 c0		 xor	 eax, eax
  01345	85 c0		 test	 eax, eax
  01347	75 e2		 jne	 SHORT $LN25@r_object
$LN21@r_object:

; 1103 :             Py_XDECREF(freevars);

  01349	48 83 bc 24 10
	03 00 00 00	 cmp	 QWORD PTR freevars$21176[rsp], 0
  01352	74 0d		 je	 SHORT $LN18@r_object
  01354	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR freevars$21176[rsp]
  0135c	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@r_object:
  01361	33 c0		 xor	 eax, eax
  01363	85 c0		 test	 eax, eax
  01365	75 e2		 jne	 SHORT $LN21@r_object
$LN17@r_object:

; 1104 :             Py_XDECREF(cellvars);

  01367	48 83 bc 24 20
	03 00 00 00	 cmp	 QWORD PTR cellvars$21178[rsp], 0
  01370	74 0d		 je	 SHORT $LN14@r_object
  01372	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR cellvars$21178[rsp]
  0137a	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@r_object:
  0137f	33 c0		 xor	 eax, eax
  01381	85 c0		 test	 eax, eax
  01383	75 e2		 jne	 SHORT $LN17@r_object
$LN13@r_object:

; 1105 :             Py_XDECREF(filename);

  01385	48 83 bc 24 60
	03 00 00 00	 cmp	 QWORD PTR filename$21180[rsp], 0
  0138e	74 0d		 je	 SHORT $LN10@r_object
  01390	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR filename$21180[rsp]
  01398	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@r_object:
  0139d	33 c0		 xor	 eax, eax
  0139f	85 c0		 test	 eax, eax
  013a1	75 e2		 jne	 SHORT $LN13@r_object
$LN9@r_object:

; 1106 :             Py_XDECREF(name);

  013a3	48 83 bc 24 40
	03 00 00 00	 cmp	 QWORD PTR name$21182[rsp], 0
  013ac	74 0d		 je	 SHORT $LN6@r_object
  013ae	48 8b 8c 24 40
	03 00 00	 mov	 rcx, QWORD PTR name$21182[rsp]
  013b6	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@r_object:
  013bb	33 c0		 xor	 eax, eax
  013bd	85 c0		 test	 eax, eax
  013bf	75 e2		 jne	 SHORT $LN9@r_object
$LN5@r_object:

; 1107 :             Py_XDECREF(lnotab);

  013c1	48 83 bc 24 50
	03 00 00 00	 cmp	 QWORD PTR lnotab$21185[rsp], 0
  013ca	74 0d		 je	 SHORT $LN2@r_object
  013cc	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR lnotab$21185[rsp]
  013d4	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@r_object:
  013d9	33 c0		 xor	 eax, eax
  013db	85 c0		 test	 eax, eax
  013dd	75 e2		 jne	 SHORT $LN5@r_object

; 1108 :         }
; 1109 :         retval = v;

  013df	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  013e7	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR retval$[rsp], rax

; 1110 :         break;

  013ef	eb 1f		 jmp	 SHORT $LN140@r_object
$LN1@r_object:

; 1111 : 
; 1112 :     default:
; 1113 :         /* Bogus data got written, which isn't ideal.
; 1114 :            This will let you keep working and recover. */
; 1115 :         PyErr_SetString(PyExc_ValueError, "bad marshal data (unknown type code)");

  013f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HHIDIMHG@bad?5marshal?5data?5?$CIunknown?5type?5c@
  013f8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  013ff	e8 00 00 00 00	 call	 PyErr_SetString

; 1116 :         retval = NULL;

  01404	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR retval$[rsp], 0
$LN140@r_object:

; 1117 :         break;
; 1118 : 
; 1119 :     }
; 1120 :     p->depth--;

  01410	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01418	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0141b	ff c8		 dec	 eax
  0141d	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01425	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 1121 :     return retval;

  01428	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR retval$[rsp]
$LN143@r_object:

; 1122 : }

  01430	48 81 c4 d8 03
	00 00		 add	 rsp, 984		; 000003d8H
  01437	5f		 pop	 rdi
  01438	5e		 pop	 rsi
  01439	c3		 ret	 0
  0143a	66 90		 npad	 2
$LN159@r_object:
  0143c	00 00 00 00	 DD	 $LN139@r_object
  01440	00 00 00 00	 DD	 $LN98@r_object
  01444	00 00 00 00	 DD	 $LN135@r_object
  01448	00 00 00 00	 DD	 $LN138@r_object
  0144c	00 00 00 00	 DD	 $LN67@r_object
  01450	00 00 00 00	 DD	 $LN134@r_object
  01454	00 00 00 00	 DD	 $LN131@r_object
  01458	00 00 00 00	 DD	 $LN137@r_object
  0145c	00 00 00 00	 DD	 $LN136@r_object
  01460	00 00 00 00	 DD	 $LN133@r_object
  01464	00 00 00 00	 DD	 $LN88@r_object
  01468	00 00 00 00	 DD	 $LN56@r_object
  0146c	00 00 00 00	 DD	 $LN129@r_object
  01470	00 00 00 00	 DD	 $LN125@r_object
  01474	00 00 00 00	 DD	 $LN132@r_object
  01478	00 00 00 00	 DD	 $LN130@r_object
  0147c	00 00 00 00	 DD	 $LN110@r_object
  01480	00 00 00 00	 DD	 $LN104@r_object
  01484	00 00 00 00	 DD	 $LN122@r_object
  01488	00 00 00 00	 DD	 $LN115@r_object
  0148c	00 00 00 00	 DD	 $LN78@r_object
  01490	00 00 00 00	 DD	 $LN1@r_object
$LN158@r_object:
  01494	00		 DB	 0
  01495	15		 DB	 21
  01496	15		 DB	 21
  01497	15		 DB	 21
  01498	15		 DB	 21
  01499	15		 DB	 21
  0149a	15		 DB	 21
  0149b	15		 DB	 21
  0149c	15		 DB	 21
  0149d	15		 DB	 21
  0149e	15		 DB	 21
  0149f	15		 DB	 21
  014a0	15		 DB	 21
  014a1	15		 DB	 21
  014a2	15		 DB	 21
  014a3	15		 DB	 21
  014a4	15		 DB	 21
  014a5	15		 DB	 21
  014a6	15		 DB	 21
  014a7	15		 DB	 21
  014a8	15		 DB	 21
  014a9	15		 DB	 21
  014aa	15		 DB	 21
  014ab	15		 DB	 21
  014ac	15		 DB	 21
  014ad	15		 DB	 21
  014ae	15		 DB	 21
  014af	15		 DB	 21
  014b0	15		 DB	 21
  014b1	15		 DB	 21
  014b2	15		 DB	 21
  014b3	15		 DB	 21
  014b4	15		 DB	 21
  014b5	15		 DB	 21
  014b6	15		 DB	 21
  014b7	15		 DB	 21
  014b8	15		 DB	 21
  014b9	15		 DB	 21
  014ba	15		 DB	 21
  014bb	15		 DB	 21
  014bc	15		 DB	 21
  014bd	01		 DB	 1
  014be	15		 DB	 21
  014bf	15		 DB	 21
  014c0	15		 DB	 21
  014c1	15		 DB	 21
  014c2	15		 DB	 21
  014c3	02		 DB	 2
  014c4	15		 DB	 21
  014c5	03		 DB	 3
  014c6	15		 DB	 21
  014c7	15		 DB	 21
  014c8	15		 DB	 21
  014c9	15		 DB	 21
  014ca	15		 DB	 21
  014cb	15		 DB	 21
  014cc	15		 DB	 21
  014cd	15		 DB	 21
  014ce	15		 DB	 21
  014cf	15		 DB	 21
  014d0	15		 DB	 21
  014d1	04		 DB	 4
  014d2	15		 DB	 21
  014d3	04		 DB	 4
  014d4	15		 DB	 21
  014d5	15		 DB	 21
  014d6	15		 DB	 21
  014d7	15		 DB	 21
  014d8	15		 DB	 21
  014d9	15		 DB	 21
  014da	15		 DB	 21
  014db	05		 DB	 5
  014dc	15		 DB	 21
  014dd	15		 DB	 21
  014de	06		 DB	 6
  014df	15		 DB	 21
  014e0	15		 DB	 21
  014e1	15		 DB	 21
  014e2	15		 DB	 21
  014e3	07		 DB	 7
  014e4	15		 DB	 21
  014e5	15		 DB	 21
  014e6	15		 DB	 21
  014e7	15		 DB	 21
  014e8	08		 DB	 8
  014e9	09		 DB	 9
  014ea	15		 DB	 21
  014eb	15		 DB	 21
  014ec	15		 DB	 21
  014ed	15		 DB	 21
  014ee	15		 DB	 21
  014ef	15		 DB	 21
  014f0	0a		 DB	 10
  014f1	15		 DB	 21
  014f2	15		 DB	 21
  014f3	15		 DB	 21
  014f4	15		 DB	 21
  014f5	15		 DB	 21
  014f6	15		 DB	 21
  014f7	15		 DB	 21
  014f8	0b		 DB	 11
  014f9	15		 DB	 21
  014fa	15		 DB	 21
  014fb	0c		 DB	 12
  014fc	0d		 DB	 13
  014fd	15		 DB	 21
  014fe	0e		 DB	 14
  014ff	15		 DB	 21
  01500	15		 DB	 21
  01501	0f		 DB	 15
  01502	15		 DB	 21
  01503	15		 DB	 21
  01504	15		 DB	 21
  01505	15		 DB	 21
  01506	15		 DB	 21
  01507	15		 DB	 21
  01508	10		 DB	 16
  01509	15		 DB	 21
  0150a	11		 DB	 17
  0150b	15		 DB	 21
  0150c	15		 DB	 21
  0150d	12		 DB	 18
  0150e	13		 DB	 19
  0150f	15		 DB	 21
  01510	14		 DB	 20
r_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	__imp_getc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\marshal.c
pdata	SEGMENT
$pdata$r_byte DD imagerel r_byte
	DD	imagerel r_byte+196
	DD	imagerel $unwind$r_byte
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_byte DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT r_byte
_TEXT	SEGMENT
n$ = 32
c$ = 40
ch$ = 44
tv79 = 48
tv77 = 52
p$ = 80
r_byte	PROC						; COMDAT

; 518  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 519  :     int c = EOF;

  00009	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR c$[rsp], -1

; 520  :     unsigned char ch;
; 521  :     Py_ssize_t n;
; 522  : 
; 523  :     if (!p->readable)

  00011	48 8b 44 24 50	 mov	 rax, QWORD PTR p$[rsp]
  00016	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0001b	75 74		 jne	 SHORT $LN3@r_byte

; 524  :         c = p->fp ? getc(p->fp) : rs_byte(p);

  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR p$[rsp]
  00022	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00026	74 14		 je	 SHORT $LN8@r_byte
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR p$[rsp]
  0002d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  00036	89 44 24 30	 mov	 DWORD PTR tv79[rsp], eax
  0003a	eb 4b		 jmp	 SHORT $LN9@r_byte
$LN8@r_byte:
  0003c	48 8b 44 24 50	 mov	 rax, QWORD PTR p$[rsp]
  00041	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  00046	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0004a	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  0004e	73 27		 jae	 SHORT $LN6@r_byte
  00050	48 8b 44 24 50	 mov	 rax, QWORD PTR p$[rsp]
  00055	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00059	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0005c	89 44 24 34	 mov	 DWORD PTR tv77[rsp], eax
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR p$[rsp]
  00065	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00069	48 ff c0	 inc	 rax
  0006c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  00071	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00075	eb 08		 jmp	 SHORT $LN7@r_byte
$LN6@r_byte:
  00077	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv77[rsp], -1
$LN7@r_byte:
  0007f	8b 44 24 34	 mov	 eax, DWORD PTR tv77[rsp]
  00083	89 44 24 30	 mov	 DWORD PTR tv79[rsp], eax
$LN9@r_byte:
  00087	8b 44 24 30	 mov	 eax, DWORD PTR tv79[rsp]
  0008b	89 44 24 28	 mov	 DWORD PTR c$[rsp], eax

; 525  :     else {

  0008f	eb 2a		 jmp	 SHORT $LN2@r_byte
$LN3@r_byte:

; 526  :         n = r_string((char *) &ch, 1, p);

  00091	4c 8b 44 24 50	 mov	 r8, QWORD PTR p$[rsp]
  00096	ba 01 00 00 00	 mov	 edx, 1
  0009b	48 8d 4c 24 2c	 lea	 rcx, QWORD PTR ch$[rsp]
  000a0	e8 00 00 00 00	 call	 r_string
  000a5	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 527  :         if (n > 0)

  000aa	48 83 7c 24 20
	00		 cmp	 QWORD PTR n$[rsp], 0
  000b0	7e 09		 jle	 SHORT $LN1@r_byte

; 528  :             c = ch;

  000b2	0f b6 44 24 2c	 movzx	 eax, BYTE PTR ch$[rsp]
  000b7	89 44 24 28	 mov	 DWORD PTR c$[rsp], eax
$LN1@r_byte:
$LN2@r_byte:

; 529  :     }
; 530  :     return c;

  000bb	8b 44 24 28	 mov	 eax, DWORD PTR c$[rsp]

; 531  : }

  000bf	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c3	c3		 ret	 0
r_byte	ENDP
_TEXT	ENDS
EXTRN	_PyLong_FromByteArray:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_long64 DD imagerel r_long64
	DD	imagerel r_long64+217
	DD	imagerel $unwind$r_long64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_long64 DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT r_long64
_TEXT	SEGMENT
lo4$ = 32
hi4$ = 36
result$ = 40
is_little_endian$20890 = 48
buf$20888 = 56
one$20889 = 64
p$ = 96
r_long64 PROC						; COMDAT

; 574  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 575  :     PyObject *result = NULL;

  00009	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 576  :     long lo4 = r_long(p);

  00012	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$[rsp]
  00017	e8 00 00 00 00	 call	 r_long
  0001c	89 44 24 20	 mov	 DWORD PTR lo4$[rsp], eax

; 577  :     long hi4 = r_long(p);

  00020	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$[rsp]
  00025	e8 00 00 00 00	 call	 r_long
  0002a	89 44 24 24	 mov	 DWORD PTR hi4$[rsp], eax

; 578  : 
; 579  :     if (!PyErr_Occurred()) {

  0002e	e8 00 00 00 00	 call	 PyErr_Occurred
  00033	48 85 c0	 test	 rax, rax
  00036	0f 85 93 00 00
	00		 jne	 $LN3@r_long64

; 580  : #if SIZEOF_LONG > 4
; 581  :         long x = (hi4 << 32) | (lo4 & 0xFFFFFFFFL);
; 582  :         result = PyLong_FromLong(x);
; 583  : #else
; 584  :         unsigned char buf[8];
; 585  :         int one = 1;

  0003c	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR one$20889[rsp], 1

; 586  :         int is_little_endian = (int)*(char*)&one;

  00044	0f be 44 24 40	 movsx	 eax, BYTE PTR one$20889[rsp]
  00049	89 44 24 30	 mov	 DWORD PTR is_little_endian$20890[rsp], eax

; 587  :         if (is_little_endian) {

  0004d	83 7c 24 30 00	 cmp	 DWORD PTR is_little_endian$20890[rsp], 0
  00052	74 2f		 je	 SHORT $LN2@r_long64

; 588  :             memcpy(buf, &lo4, 4);

  00054	41 b8 04 00 00
	00		 mov	 r8d, 4
  0005a	48 8d 54 24 20	 lea	 rdx, QWORD PTR lo4$[rsp]
  0005f	48 8d 4c 24 38	 lea	 rcx, QWORD PTR buf$20888[rsp]
  00064	e8 00 00 00 00	 call	 memcpy

; 589  :             memcpy(buf+4, &hi4, 4);

  00069	48 8d 44 24 3c	 lea	 rax, QWORD PTR buf$20888[rsp+4]
  0006e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00074	48 8d 54 24 24	 lea	 rdx, QWORD PTR hi4$[rsp]
  00079	48 8b c8	 mov	 rcx, rax
  0007c	e8 00 00 00 00	 call	 memcpy

; 590  :         }
; 591  :         else {

  00081	eb 2d		 jmp	 SHORT $LN1@r_long64
$LN2@r_long64:

; 592  :             memcpy(buf, &hi4, 4);

  00083	41 b8 04 00 00
	00		 mov	 r8d, 4
  00089	48 8d 54 24 24	 lea	 rdx, QWORD PTR hi4$[rsp]
  0008e	48 8d 4c 24 38	 lea	 rcx, QWORD PTR buf$20888[rsp]
  00093	e8 00 00 00 00	 call	 memcpy

; 593  :             memcpy(buf+4, &lo4, 4);

  00098	48 8d 44 24 3c	 lea	 rax, QWORD PTR buf$20888[rsp+4]
  0009d	41 b8 04 00 00
	00		 mov	 r8d, 4
  000a3	48 8d 54 24 20	 lea	 rdx, QWORD PTR lo4$[rsp]
  000a8	48 8b c8	 mov	 rcx, rax
  000ab	e8 00 00 00 00	 call	 memcpy
$LN1@r_long64:

; 594  :         }
; 595  :         result = _PyLong_FromByteArray(buf, 8, is_little_endian, 1);

  000b0	41 b9 01 00 00
	00		 mov	 r9d, 1
  000b6	44 8b 44 24 30	 mov	 r8d, DWORD PTR is_little_endian$20890[rsp]
  000bb	ba 08 00 00 00	 mov	 edx, 8
  000c0	48 8d 4c 24 38	 lea	 rcx, QWORD PTR buf$20888[rsp]
  000c5	e8 00 00 00 00	 call	 _PyLong_FromByteArray
  000ca	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$LN3@r_long64:

; 596  : #endif
; 597  :     }
; 598  :     return result;

  000cf	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]

; 599  : }

  000d4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000d8	c3		 ret	 0
r_long64 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@MHBIECJI@bad?5marshal?5data?5?$CIdigit?5out?5of?5r@ ; `string'
PUBLIC	??_C@_0CK@EOGHLNCL@bad?5marshal?5data?5?$CIunnormalized?5l@ ; `string'
PUBLIC	??_C@_0CK@EOJBGKLJ@bad?5marshal?5data?5?$CIlong?5size?5out?5@ ; `string'
EXTRN	_PyLong_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$r_PyLong DD imagerel r_PyLong
	DD	imagerel r_PyLong+705
	DD	imagerel $unwind$r_PyLong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$r_PyLong DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0CO@MHBIECJI@bad?5marshal?5data?5?$CIdigit?5out?5of?5r@
CONST	SEGMENT
??_C@_0CO@MHBIECJI@bad?5marshal?5data?5?$CIdigit?5out?5of?5r@ DB 'bad mar'
	DB	'shal data (digit out of range in long)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EOGHLNCL@bad?5marshal?5data?5?$CIunnormalized?5l@
CONST	SEGMENT
??_C@_0CK@EOGHLNCL@bad?5marshal?5data?5?$CIunnormalized?5l@ DB 'bad marsh'
	DB	'al data (unnormalized long data)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EOJBGKLJ@bad?5marshal?5data?5?$CIlong?5size?5out?5@
CONST	SEGMENT
??_C@_0CK@EOJBGKLJ@bad?5marshal?5data?5?$CIlong?5size?5out?5@ DB 'bad mar'
	DB	'shal data (long size out of range)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT r_PyLong
_TEXT	SEGMENT
i$ = 32
n$ = 36
md$ = 40
ob$ = 48
size$ = 56
shorts_in_top_digit$ = 60
d$ = 64
j$ = 68
tv77 = 72
tv83 = 76
tv94 = 80
p$ = 112
r_PyLong PROC						; COMDAT

; 603  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 604  :     PyLongObject *ob;
; 605  :     long n, size, i;
; 606  :     int j, md, shorts_in_top_digit;
; 607  :     digit d;
; 608  : 
; 609  :     n = r_long(p);

  00009	48 8b 4c 24 70	 mov	 rcx, QWORD PTR p$[rsp]
  0000e	e8 00 00 00 00	 call	 r_long
  00013	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax

; 610  :     if (PyErr_Occurred())

  00017	e8 00 00 00 00	 call	 PyErr_Occurred
  0001c	48 85 c0	 test	 rax, rax
  0001f	74 07		 je	 SHORT $LN22@r_PyLong

; 611  :         return NULL;

  00021	33 c0		 xor	 eax, eax
  00023	e9 94 02 00 00	 jmp	 $LN23@r_PyLong
$LN22@r_PyLong:

; 612  :     if (n == 0)

  00028	83 7c 24 24 00	 cmp	 DWORD PTR n$[rsp], 0
  0002d	75 0c		 jne	 SHORT $LN21@r_PyLong

; 613  :         return (PyObject *)_PyLong_New(0);

  0002f	33 c9		 xor	 ecx, ecx
  00031	e8 00 00 00 00	 call	 _PyLong_New
  00036	e9 81 02 00 00	 jmp	 $LN23@r_PyLong
$LN21@r_PyLong:

; 614  :     if (n < -SIZE32_MAX || n > SIZE32_MAX) {

  0003b	81 7c 24 24 01
	00 00 80	 cmp	 DWORD PTR n$[rsp], -2147483647 ; ffffffff80000001H
  00043	7c 0a		 jl	 SHORT $LN19@r_PyLong
  00045	81 7c 24 24 ff
	ff ff 7f	 cmp	 DWORD PTR n$[rsp], 2147483647 ; 7fffffffH
  0004d	7e 1a		 jle	 SHORT $LN20@r_PyLong
$LN19@r_PyLong:

; 615  :         PyErr_SetString(PyExc_ValueError,
; 616  :                        "bad marshal data (long size out of range)");

  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EOJBGKLJ@bad?5marshal?5data?5?$CIlong?5size?5out?5@
  00056	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0005d	e8 00 00 00 00	 call	 PyErr_SetString

; 617  :         return NULL;

  00062	33 c0		 xor	 eax, eax
  00064	e9 53 02 00 00	 jmp	 $LN23@r_PyLong
$LN20@r_PyLong:

; 618  :     }
; 619  : 
; 620  :     size = 1 + (ABS(n) - 1) / PyLong_MARSHAL_RATIO;

  00069	83 7c 24 24 00	 cmp	 DWORD PTR n$[rsp], 0
  0006e	7d 0c		 jge	 SHORT $LN25@r_PyLong
  00070	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  00074	f7 d8		 neg	 eax
  00076	89 44 24 48	 mov	 DWORD PTR tv77[rsp], eax
  0007a	eb 08		 jmp	 SHORT $LN26@r_PyLong
$LN25@r_PyLong:
  0007c	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  00080	89 44 24 48	 mov	 DWORD PTR tv77[rsp], eax
$LN26@r_PyLong:
  00084	8b 44 24 48	 mov	 eax, DWORD PTR tv77[rsp]
  00088	ff c8		 dec	 eax
  0008a	99		 cdq
  0008b	2b c2		 sub	 eax, edx
  0008d	d1 f8		 sar	 eax, 1
  0008f	ff c0		 inc	 eax
  00091	89 44 24 38	 mov	 DWORD PTR size$[rsp], eax

; 621  :     shorts_in_top_digit = 1 + (ABS(n) - 1) % PyLong_MARSHAL_RATIO;

  00095	83 7c 24 24 00	 cmp	 DWORD PTR n$[rsp], 0
  0009a	7d 0c		 jge	 SHORT $LN27@r_PyLong
  0009c	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  000a0	f7 d8		 neg	 eax
  000a2	89 44 24 4c	 mov	 DWORD PTR tv83[rsp], eax
  000a6	eb 08		 jmp	 SHORT $LN28@r_PyLong
$LN27@r_PyLong:
  000a8	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  000ac	89 44 24 4c	 mov	 DWORD PTR tv83[rsp], eax
$LN28@r_PyLong:
  000b0	8b 44 24 4c	 mov	 eax, DWORD PTR tv83[rsp]
  000b4	ff c8		 dec	 eax
  000b6	99		 cdq
  000b7	83 e0 01	 and	 eax, 1
  000ba	33 c2		 xor	 eax, edx
  000bc	2b c2		 sub	 eax, edx
  000be	ff c0		 inc	 eax
  000c0	89 44 24 3c	 mov	 DWORD PTR shorts_in_top_digit$[rsp], eax

; 622  :     ob = _PyLong_New(size);

  000c4	48 63 44 24 38	 movsxd	 rax, DWORD PTR size$[rsp]
  000c9	48 8b c8	 mov	 rcx, rax
  000cc	e8 00 00 00 00	 call	 _PyLong_New
  000d1	48 89 44 24 30	 mov	 QWORD PTR ob$[rsp], rax

; 623  :     if (ob == NULL)

  000d6	48 83 7c 24 30
	00		 cmp	 QWORD PTR ob$[rsp], 0
  000dc	75 07		 jne	 SHORT $LN18@r_PyLong

; 624  :         return NULL;

  000de	33 c0		 xor	 eax, eax
  000e0	e9 d7 01 00 00	 jmp	 $LN23@r_PyLong
$LN18@r_PyLong:

; 625  :     Py_SIZE(ob) = n > 0 ? size : -size;

  000e5	83 7c 24 24 00	 cmp	 DWORD PTR n$[rsp], 0
  000ea	7e 0a		 jle	 SHORT $LN29@r_PyLong
  000ec	8b 44 24 38	 mov	 eax, DWORD PTR size$[rsp]
  000f0	89 44 24 50	 mov	 DWORD PTR tv94[rsp], eax
  000f4	eb 0a		 jmp	 SHORT $LN30@r_PyLong
$LN29@r_PyLong:
  000f6	8b 44 24 38	 mov	 eax, DWORD PTR size$[rsp]
  000fa	f7 d8		 neg	 eax
  000fc	89 44 24 50	 mov	 DWORD PTR tv94[rsp], eax
$LN30@r_PyLong:
  00100	48 63 44 24 50	 movsxd	 rax, DWORD PTR tv94[rsp]
  00105	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ob$[rsp]
  0010a	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 626  : 
; 627  :     for (i = 0; i < size-1; i++) {

  0010e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00116	eb 0a		 jmp	 SHORT $LN17@r_PyLong
$LN16@r_PyLong:
  00118	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0011c	ff c0		 inc	 eax
  0011e	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN17@r_PyLong:
  00122	8b 44 24 38	 mov	 eax, DWORD PTR size$[rsp]
  00126	ff c8		 dec	 eax
  00128	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0012c	0f 8d 88 00 00
	00		 jge	 $LN15@r_PyLong

; 628  :         d = 0;

  00132	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR d$[rsp], 0

; 629  :         for (j=0; j < PyLong_MARSHAL_RATIO; j++) {

  0013a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00142	eb 0a		 jmp	 SHORT $LN14@r_PyLong
$LN13@r_PyLong:
  00144	8b 44 24 44	 mov	 eax, DWORD PTR j$[rsp]
  00148	ff c0		 inc	 eax
  0014a	89 44 24 44	 mov	 DWORD PTR j$[rsp], eax
$LN14@r_PyLong:
  0014e	83 7c 24 44 02	 cmp	 DWORD PTR j$[rsp], 2
  00153	7d 4e		 jge	 SHORT $LN12@r_PyLong

; 630  :             md = r_short(p);

  00155	48 8b 4c 24 70	 mov	 rcx, QWORD PTR p$[rsp]
  0015a	e8 00 00 00 00	 call	 r_short
  0015f	89 44 24 28	 mov	 DWORD PTR md$[rsp], eax

; 631  :             if (PyErr_Occurred())

  00163	e8 00 00 00 00	 call	 PyErr_Occurred
  00168	48 85 c0	 test	 rax, rax
  0016b	74 02		 je	 SHORT $LN11@r_PyLong

; 632  :                 break;

  0016d	eb 34		 jmp	 SHORT $LN12@r_PyLong
$LN11@r_PyLong:

; 633  :             if (md < 0 || md > PyLong_MARSHAL_BASE)

  0016f	83 7c 24 28 00	 cmp	 DWORD PTR md$[rsp], 0
  00174	7c 0a		 jl	 SHORT $LN9@r_PyLong
  00176	81 7c 24 28 00
	80 00 00	 cmp	 DWORD PTR md$[rsp], 32768 ; 00008000H
  0017e	7e 05		 jle	 SHORT $LN10@r_PyLong
$LN9@r_PyLong:

; 634  :                 goto bad_digit;

  00180	e9 18 01 00 00	 jmp	 $bad_digit$20929
$LN10@r_PyLong:

; 635  :             d += (digit)md << j*PyLong_MARSHAL_SHIFT;

  00185	8b 44 24 44	 mov	 eax, DWORD PTR j$[rsp]
  00189	6b c0 0f	 imul	 eax, 15
  0018c	0f b6 c8	 movzx	 ecx, al
  0018f	8b 44 24 28	 mov	 eax, DWORD PTR md$[rsp]
  00193	d3 e0		 shl	 eax, cl
  00195	8b 4c 24 40	 mov	 ecx, DWORD PTR d$[rsp]
  00199	03 c8		 add	 ecx, eax
  0019b	8b c1		 mov	 eax, ecx
  0019d	89 44 24 40	 mov	 DWORD PTR d$[rsp], eax

; 636  :         }

  001a1	eb a1		 jmp	 SHORT $LN13@r_PyLong
$LN12@r_PyLong:

; 637  :         ob->ob_digit[i] = d;

  001a3	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001a8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ob$[rsp]
  001ad	8b 54 24 40	 mov	 edx, DWORD PTR d$[rsp]
  001b1	89 54 81 70	 mov	 DWORD PTR [rcx+rax*4+112], edx

; 638  :     }

  001b5	e9 5e ff ff ff	 jmp	 $LN16@r_PyLong
$LN15@r_PyLong:

; 639  :     d = 0;

  001ba	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR d$[rsp], 0

; 640  :     for (j=0; j < shorts_in_top_digit; j++) {

  001c2	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  001ca	eb 0a		 jmp	 SHORT $LN8@r_PyLong
$LN7@r_PyLong:
  001cc	8b 44 24 44	 mov	 eax, DWORD PTR j$[rsp]
  001d0	ff c0		 inc	 eax
  001d2	89 44 24 44	 mov	 DWORD PTR j$[rsp], eax
$LN8@r_PyLong:
  001d6	8b 44 24 3c	 mov	 eax, DWORD PTR shorts_in_top_digit$[rsp]
  001da	39 44 24 44	 cmp	 DWORD PTR j$[rsp], eax
  001de	0f 8d 85 00 00
	00		 jge	 $LN6@r_PyLong

; 641  :         md = r_short(p);

  001e4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR p$[rsp]
  001e9	e8 00 00 00 00	 call	 r_short
  001ee	89 44 24 28	 mov	 DWORD PTR md$[rsp], eax

; 642  :         if (PyErr_Occurred())

  001f2	e8 00 00 00 00	 call	 PyErr_Occurred
  001f7	48 85 c0	 test	 rax, rax
  001fa	74 02		 je	 SHORT $LN5@r_PyLong

; 643  :             break;

  001fc	eb 6b		 jmp	 SHORT $LN6@r_PyLong
$LN5@r_PyLong:

; 644  :         if (md < 0 || md > PyLong_MARSHAL_BASE)

  001fe	83 7c 24 28 00	 cmp	 DWORD PTR md$[rsp], 0
  00203	7c 0a		 jl	 SHORT $LN3@r_PyLong
  00205	81 7c 24 28 00
	80 00 00	 cmp	 DWORD PTR md$[rsp], 32768 ; 00008000H
  0020d	7e 05		 jle	 SHORT $LN4@r_PyLong
$LN3@r_PyLong:

; 645  :             goto bad_digit;

  0020f	e9 89 00 00 00	 jmp	 $bad_digit$20929
$LN4@r_PyLong:

; 646  :         /* topmost marshal digit should be nonzero */
; 647  :         if (md == 0 && j == shorts_in_top_digit - 1) {

  00214	83 7c 24 28 00	 cmp	 DWORD PTR md$[rsp], 0
  00219	75 2d		 jne	 SHORT $LN2@r_PyLong
  0021b	8b 44 24 3c	 mov	 eax, DWORD PTR shorts_in_top_digit$[rsp]
  0021f	ff c8		 dec	 eax
  00221	39 44 24 44	 cmp	 DWORD PTR j$[rsp], eax
  00225	75 21		 jne	 SHORT $LN2@r_PyLong

; 648  :             Py_DECREF(ob);

  00227	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ob$[rsp]
  0022c	e8 00 00 00 00	 call	 _Py_DecRef

; 649  :             PyErr_SetString(PyExc_ValueError,
; 650  :                 "bad marshal data (unnormalized long data)");

  00231	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EOGHLNCL@bad?5marshal?5data?5?$CIunnormalized?5l@
  00238	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0023f	e8 00 00 00 00	 call	 PyErr_SetString

; 651  :             return NULL;

  00244	33 c0		 xor	 eax, eax
  00246	eb 74		 jmp	 SHORT $LN23@r_PyLong
$LN2@r_PyLong:

; 652  :         }
; 653  :         d += (digit)md << j*PyLong_MARSHAL_SHIFT;

  00248	8b 44 24 44	 mov	 eax, DWORD PTR j$[rsp]
  0024c	6b c0 0f	 imul	 eax, 15
  0024f	0f b6 c8	 movzx	 ecx, al
  00252	8b 44 24 28	 mov	 eax, DWORD PTR md$[rsp]
  00256	d3 e0		 shl	 eax, cl
  00258	8b 4c 24 40	 mov	 ecx, DWORD PTR d$[rsp]
  0025c	03 c8		 add	 ecx, eax
  0025e	8b c1		 mov	 eax, ecx
  00260	89 44 24 40	 mov	 DWORD PTR d$[rsp], eax

; 654  :     }

  00264	e9 63 ff ff ff	 jmp	 $LN7@r_PyLong
$LN6@r_PyLong:

; 655  :     if (PyErr_Occurred()) {

  00269	e8 00 00 00 00	 call	 PyErr_Occurred
  0026e	48 85 c0	 test	 rax, rax
  00271	74 0e		 je	 SHORT $LN1@r_PyLong

; 656  :         Py_DECREF(ob);

  00273	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ob$[rsp]
  00278	e8 00 00 00 00	 call	 _Py_DecRef

; 657  :         return NULL;

  0027d	33 c0		 xor	 eax, eax
  0027f	eb 3b		 jmp	 SHORT $LN23@r_PyLong
$LN1@r_PyLong:

; 658  :     }
; 659  :     /* top digit should be nonzero, else the resulting PyLong won't be
; 660  :        normalized */
; 661  :     ob->ob_digit[size-1] = d;

  00281	8b 44 24 38	 mov	 eax, DWORD PTR size$[rsp]
  00285	ff c8		 dec	 eax
  00287	48 98		 cdqe
  00289	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ob$[rsp]
  0028e	8b 54 24 40	 mov	 edx, DWORD PTR d$[rsp]
  00292	89 54 81 70	 mov	 DWORD PTR [rcx+rax*4+112], edx

; 662  :     return (PyObject *)ob;

  00296	48 8b 44 24 30	 mov	 rax, QWORD PTR ob$[rsp]
  0029b	eb 1f		 jmp	 SHORT $LN23@r_PyLong
$bad_digit$20929:

; 663  :   bad_digit:
; 664  :     Py_DECREF(ob);

  0029d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ob$[rsp]
  002a2	e8 00 00 00 00	 call	 _Py_DecRef

; 665  :     PyErr_SetString(PyExc_ValueError,
; 666  :                     "bad marshal data (digit out of range in long)");

  002a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@MHBIECJI@bad?5marshal?5data?5?$CIdigit?5out?5of?5r@
  002ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002b5	e8 00 00 00 00	 call	 PyErr_SetString

; 667  :     return NULL;

  002ba	33 c0		 xor	 eax, eax
$LN23@r_PyLong:

; 668  : }

  002bc	48 83 c4 68	 add	 rsp, 104		; 00000068H
  002c0	c3		 ret	 0
r_PyLong ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_ReadObjectFromString DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$PyMarshal_ReadObjectFromString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_ReadObjectFromString DD 010e01H
	DD	0e20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyMarshal_ReadObjectFromString
_TEXT	SEGMENT
rf$ = 32
result$ = 96
str$ = 128
len$ = 136
PyMarshal_ReadObjectFromString PROC			; COMDAT

; 1223 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1224 :     RFILE rf;
; 1225 :     PyObject *result;
; 1226 :     rf.fp = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR rf$[rsp], 0

; 1227 :     rf.readable = NULL;

  00017	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+16], 0

; 1228 :     rf.current_filename = NULL;

  00020	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+32], 0

; 1229 :     rf.ptr = str;

  00029	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00031	48 89 44 24 48	 mov	 QWORD PTR rf$[rsp+40], rax

; 1230 :     rf.end = str + len;

  00036	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  0003e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR str$[rsp]
  00046	48 03 c8	 add	 rcx, rax
  00049	48 8b c1	 mov	 rax, rcx
  0004c	48 89 44 24 50	 mov	 QWORD PTR rf$[rsp+48], rax

; 1231 :     rf.depth = 0;

  00051	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR rf$[rsp+12], 0

; 1232 :     result = r_object(&rf);

  00059	48 8d 4c 24 20	 lea	 rcx, QWORD PTR rf$[rsp]
  0005e	e8 00 00 00 00	 call	 r_object
  00063	48 89 44 24 60	 mov	 QWORD PTR result$[rsp], rax

; 1233 :     return result;

  00068	48 8b 44 24 60	 mov	 rax, QWORD PTR result$[rsp]

; 1234 : }

  0006d	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00071	c3		 ret	 0
PyMarshal_ReadObjectFromString ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@KIEDCEAF@object?5too?5deeply?5nested?5to?5mars@ ; `string'
PUBLIC	??_C@_0BG@GDKMCPFP@unmarshallable?5object?$AA@	; `string'
PUBLIC	??_C@_0CD@NNHJLEJO@too?5much?5marshal?5data?5for?5a?5stri@ ; `string'
PUBLIC	??_C@_1EO@CFENGJDN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAw@ ; `string'
PUBLIC	PyMarshal_WriteObjectToString
EXTRN	PyExc_OverflowError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_WriteObjectToString DD imagerel $LN18
	DD	imagerel $LN18+491
	DD	imagerel $unwind$PyMarshal_WriteObjectToString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_WriteObjectToString DD 010d01H
	DD	0e20dH
xdata	ENDS
;	COMDAT ??_C@_0CE@KIEDCEAF@object?5too?5deeply?5nested?5to?5mars@
CONST	SEGMENT
??_C@_0CE@KIEDCEAF@object?5too?5deeply?5nested?5to?5mars@ DB 'object too '
	DB	'deeply nested to marshal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GDKMCPFP@unmarshallable?5object?$AA@
CONST	SEGMENT
??_C@_0BG@GDKMCPFP@unmarshallable?5object?$AA@ DB 'unmarshallable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NNHJLEJO@too?5much?5marshal?5data?5for?5a?5stri@
CONST	SEGMENT
??_C@_0CD@NNHJLEJO@too?5much?5marshal?5data?5for?5a?5stri@ DB 'too much m'
	DB	'arshal data for a string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@CFENGJDN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAw@
CONST	SEGMENT
??_C@_1EO@CFENGJDN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAw@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H
	DB	'e', 00H, 's', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, '*', 00H, ')', 00H, 'w', 00H, 'f', 00H
	DB	'.', 00H, 's', 00H, 't', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyMarshal_WriteObjectToString
_TEXT	SEGMENT
wf$ = 32
base$21363 = 96
tv140 = 104
x$ = 128
version$ = 136
PyMarshal_WriteObjectToString PROC			; COMDAT

; 1238 : {

$LN18:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1239 :     WFILE wf;
; 1240 : 
; 1241 :     wf.fp = NULL;

  0000d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR wf$[rsp], 0

; 1242 :     wf.readable = NULL;

  00016	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR wf$[rsp+16], 0

; 1243 :     wf.str = PyBytes_FromStringAndSize((char *)NULL, 50);

  0001f	ba 32 00 00 00	 mov	 edx, 50			; 00000032H
  00024	33 c9		 xor	 ecx, ecx
  00026	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0002b	48 89 44 24 38	 mov	 QWORD PTR wf$[rsp+24], rax

; 1244 :     if (wf.str == NULL)

  00030	48 83 7c 24 38
	00		 cmp	 QWORD PTR wf$[rsp+24], 0
  00036	75 07		 jne	 SHORT $LN11@PyMarshal_@3

; 1245 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	e9 a7 01 00 00	 jmp	 $LN12@PyMarshal_@3
$LN11@PyMarshal_@3:

; 1246 :     wf.ptr = PyBytes_AS_STRING((PyBytesObject *)wf.str);

  0003f	48 8b 44 24 38	 mov	 rax, QWORD PTR wf$[rsp+24]
  00044	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00048	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0004e	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00053	85 c0		 test	 eax, eax
  00055	75 1c		 jne	 SHORT $LN14@PyMarshal_@3
  00057	41 b8 de 04 00
	00		 mov	 r8d, 1246		; 000004deH
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@CFENGJDN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAw@
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00071	33 c0		 xor	 eax, eax
$LN14@PyMarshal_@3:
  00073	48 8b 44 24 38	 mov	 rax, QWORD PTR wf$[rsp+24]
  00078	48 83 c0 78	 add	 rax, 120		; 00000078H
  0007c	48 89 44 24 48	 mov	 QWORD PTR wf$[rsp+40], rax

; 1247 :     wf.end = wf.ptr + PyBytes_Size(wf.str);

  00081	48 8b 4c 24 38	 mov	 rcx, QWORD PTR wf$[rsp+24]
  00086	e8 00 00 00 00	 call	 PyBytes_Size
  0008b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR wf$[rsp+40]
  00090	48 03 c8	 add	 rcx, rax
  00093	48 8b c1	 mov	 rax, rcx
  00096	48 89 44 24 50	 mov	 QWORD PTR wf$[rsp+48], rax

; 1248 :     wf.error = WFERR_OK;

  0009b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR wf$[rsp+8], 0

; 1249 :     wf.depth = 0;

  000a3	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR wf$[rsp+12], 0

; 1250 :     wf.version = version;

  000ab	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR version$[rsp]
  000b2	89 44 24 58	 mov	 DWORD PTR wf$[rsp+56], eax

; 1251 :     w_object(x, &wf);

  000b6	48 8d 54 24 20	 lea	 rdx, QWORD PTR wf$[rsp]
  000bb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR x$[rsp]
  000c3	e8 00 00 00 00	 call	 w_object

; 1252 :     if (wf.str != NULL) {

  000c8	48 83 7c 24 38
	00		 cmp	 QWORD PTR wf$[rsp+24], 0
  000ce	0f 84 aa 00 00
	00		 je	 $LN10@PyMarshal_@3

; 1253 :         char *base = PyBytes_AS_STRING((PyBytesObject *)wf.str);

  000d4	48 8b 44 24 38	 mov	 rax, QWORD PTR wf$[rsp+24]
  000d9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000dd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e3	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000e8	85 c0		 test	 eax, eax
  000ea	75 1c		 jne	 SHORT $LN15@PyMarshal_@3
  000ec	41 b8 e5 04 00
	00		 mov	 r8d, 1253		; 000004e5H
  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@PGOIAAEM@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAm?$AAa?$AAr?$AAs?$AAh?$AAa?$AAl?$AA?4?$AAc?$AA?$AA@
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@CFENGJDN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAw@
  00100	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00106	33 c0		 xor	 eax, eax
$LN15@PyMarshal_@3:
  00108	48 8b 44 24 38	 mov	 rax, QWORD PTR wf$[rsp+24]
  0010d	48 83 c0 78	 add	 rax, 120		; 00000078H
  00111	48 89 44 24 60	 mov	 QWORD PTR base$21363[rsp], rax

; 1254 :         if (wf.ptr - base > PY_SSIZE_T_MAX) {

  00116	48 8b 44 24 60	 mov	 rax, QWORD PTR base$21363[rsp]
  0011b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR wf$[rsp+40]
  00120	48 2b c8	 sub	 rcx, rax
  00123	48 8b c1	 mov	 rax, rcx
  00126	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  00130	48 3b c1	 cmp	 rax, rcx
  00133	7e 24		 jle	 SHORT $LN9@PyMarshal_@3

; 1255 :             Py_DECREF(wf.str);

  00135	48 8b 4c 24 38	 mov	 rcx, QWORD PTR wf$[rsp+24]
  0013a	e8 00 00 00 00	 call	 _Py_DecRef

; 1256 :             PyErr_SetString(PyExc_OverflowError,
; 1257 :                             "too much marshal data for a string");

  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@NNHJLEJO@too?5much?5marshal?5data?5for?5a?5stri@
  00146	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  0014d	e8 00 00 00 00	 call	 PyErr_SetString

; 1258 :             return NULL;

  00152	33 c0		 xor	 eax, eax
  00154	e9 8d 00 00 00	 jmp	 $LN12@PyMarshal_@3
$LN9@PyMarshal_@3:

; 1259 :         }
; 1260 :         if (_PyBytes_Resize(&wf.str, (Py_ssize_t)(wf.ptr - base)) < 0)

  00159	48 8b 44 24 60	 mov	 rax, QWORD PTR base$21363[rsp]
  0015e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR wf$[rsp+40]
  00163	48 2b c8	 sub	 rcx, rax
  00166	48 8b c1	 mov	 rax, rcx
  00169	48 8b d0	 mov	 rdx, rax
  0016c	48 8d 4c 24 38	 lea	 rcx, QWORD PTR wf$[rsp+24]
  00171	e8 00 00 00 00	 call	 _PyBytes_Resize
  00176	85 c0		 test	 eax, eax
  00178	7d 04		 jge	 SHORT $LN8@PyMarshal_@3

; 1261 :             return NULL;

  0017a	33 c0		 xor	 eax, eax
  0017c	eb 68		 jmp	 SHORT $LN12@PyMarshal_@3
$LN8@PyMarshal_@3:
$LN10@PyMarshal_@3:

; 1262 :     }
; 1263 :     if (wf.error != WFERR_OK) {

  0017e	83 7c 24 28 00	 cmp	 DWORD PTR wf$[rsp+8], 0
  00183	74 5c		 je	 SHORT $LN7@PyMarshal_@3
$LN6@PyMarshal_@3:

; 1264 :         Py_XDECREF(wf.str);

  00185	48 83 7c 24 38
	00		 cmp	 QWORD PTR wf$[rsp+24], 0
  0018b	74 0a		 je	 SHORT $LN3@PyMarshal_@3
  0018d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR wf$[rsp+24]
  00192	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyMarshal_@3:
  00197	33 c0		 xor	 eax, eax
  00199	85 c0		 test	 eax, eax
  0019b	75 e8		 jne	 SHORT $LN6@PyMarshal_@3

; 1265 :         if (wf.error == WFERR_NOMEMORY)

  0019d	83 7c 24 28 03	 cmp	 DWORD PTR wf$[rsp+8], 3
  001a2	75 07		 jne	 SHORT $LN2@PyMarshal_@3

; 1266 :             PyErr_NoMemory();

  001a4	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1267 :         else

  001a9	eb 32		 jmp	 SHORT $LN1@PyMarshal_@3
$LN2@PyMarshal_@3:

; 1268 :             PyErr_SetString(PyExc_ValueError,
; 1269 :               (wf.error==WFERR_UNMARSHALLABLE)?"unmarshallable object"
; 1270 :                :"object too deeply nested to marshal");

  001ab	83 7c 24 28 01	 cmp	 DWORD PTR wf$[rsp+8], 1
  001b0	75 0e		 jne	 SHORT $LN16@PyMarshal_@3
  001b2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BG@GDKMCPFP@unmarshallable?5object?$AA@
  001b9	48 89 44 24 68	 mov	 QWORD PTR tv140[rsp], rax
  001be	eb 0c		 jmp	 SHORT $LN17@PyMarshal_@3
$LN16@PyMarshal_@3:
  001c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CE@KIEDCEAF@object?5too?5deeply?5nested?5to?5mars@
  001c7	48 89 44 24 68	 mov	 QWORD PTR tv140[rsp], rax
$LN17@PyMarshal_@3:
  001cc	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv140[rsp]
  001d1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001d8	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@PyMarshal_@3:

; 1271 :         return NULL;

  001dd	33 c0		 xor	 eax, eax
  001df	eb 05		 jmp	 SHORT $LN12@PyMarshal_@3
$LN7@PyMarshal_@3:

; 1272 :     }
; 1273 :     return wf.str;

  001e1	48 8b 44 24 38	 mov	 rax, QWORD PTR wf$[rsp+24]
$LN12@PyMarshal_@3:

; 1274 : }

  001e6	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001ea	c3		 ret	 0
PyMarshal_WriteObjectToString ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_09GNLMAOPG@OO?$HMi?3dump?$AA@		; `string'
EXTRN	_PyArg_ParseTuple_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$marshal_dump DD imagerel marshal_dump
	DD	imagerel marshal_dump+174
	DD	imagerel $unwind$marshal_dump
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$marshal_dump DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GNLMAOPG@OO?$HMi?3dump?$AA@
CONST	SEGMENT
??_C@_09GNLMAOPG@OO?$HMi?3dump?$AA@ DB 'OO|i:dump', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT marshal_dump
_TEXT	SEGMENT
res$ = 48
x$ = 56
s$ = 64
f$ = 72
version$ = 80
self$ = 112
args$ = 120
marshal_dump PROC					; COMDAT

; 1280 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1281 :     /* XXX Quick hack -- need to do this differently */
; 1282 :     PyObject *x;
; 1283 :     PyObject *f;
; 1284 :     int version = Py_MARSHAL_VERSION;

  0000e	c7 44 24 50 02
	00 00 00	 mov	 DWORD PTR version$[rsp], 2

; 1285 :     PyObject *s;
; 1286 :     PyObject *res;
; 1287 :     _Py_IDENTIFIER(write);
; 1288 : 
; 1289 :     if (!PyArg_ParseTuple(args, "OO|i:dump", &x, &f, &version))

  00016	48 8d 44 24 50	 lea	 rax, QWORD PTR version$[rsp]
  0001b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00020	4c 8d 4c 24 48	 lea	 r9, QWORD PTR f$[rsp]
  00025	4c 8d 44 24 38	 lea	 r8, QWORD PTR x$[rsp]
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09GNLMAOPG@OO?$HMi?3dump?$AA@
  00031	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00036	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003b	85 c0		 test	 eax, eax
  0003d	75 04		 jne	 SHORT $LN2@marshal_du

; 1290 :         return NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	eb 66		 jmp	 SHORT $LN3@marshal_du
$LN2@marshal_du:

; 1291 :     s = PyMarshal_WriteObjectToString(x, version);

  00043	8b 54 24 50	 mov	 edx, DWORD PTR version$[rsp]
  00047	48 8b 4c 24 38	 mov	 rcx, QWORD PTR x$[rsp]
  0004c	e8 00 00 00 00	 call	 PyMarshal_WriteObjectToString
  00051	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax

; 1292 :     if (s == NULL)

  00056	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  0005c	75 04		 jne	 SHORT $LN1@marshal_du

; 1293 :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	eb 47		 jmp	 SHORT $LN3@marshal_du
$LN1@marshal_du:

; 1294 :     res = _PyObject_CallMethodId(f, &PyId_write, "O", s);

  00062	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_write@?1??marshal_dump@@9@9
  00067	8b c0		 mov	 eax, eax
  00069	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0006f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00078	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0007c	4c 8b 4c 24 40	 mov	 r9, QWORD PTR s$[rsp]
  00081	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00088	48 8b d0	 mov	 rdx, rax
  0008b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR f$[rsp]
  00090	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00095	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1295 :     Py_DECREF(s);

  0009a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0009f	e8 00 00 00 00	 call	 _Py_DecRef

; 1296 :     return res;

  000a4	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN3@marshal_du:

; 1297 : }

  000a9	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000ad	c3		 ret	 0
marshal_dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$marshal_load DD imagerel marshal_load
	DD	imagerel marshal_load+227
	DD	imagerel $unwind$marshal_load
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$marshal_load DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT marshal_load
_TEXT	SEGMENT
rf$ = 32
data$ = 96
result$ = 104
self$ = 128
f$ = 136
marshal_load PROC					; COMDAT

; 1314 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1315 :     PyObject *data, *result;
; 1316 :     _Py_IDENTIFIER(read);
; 1317 :     RFILE rf;
; 1318 : 
; 1319 :     /*
; 1320 :      * Make a call to the read method, but read zero bytes.
; 1321 :      * This is to ensure that the object passed in at least
; 1322 :      * has a read method which returns bytes.
; 1323 :      */
; 1324 :     data = _PyObject_CallMethodId(f, &PyId_read, "i", 0);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_read@?1??marshal_load@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	45 33 c9	 xor	 r9d, r9d
  0002b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  00032	48 8b d0	 mov	 rdx, rax
  00035	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  0003d	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00042	48 89 44 24 60	 mov	 QWORD PTR data$[rsp], rax

; 1325 :     if (data == NULL)

  00047	48 83 7c 24 60
	00		 cmp	 QWORD PTR data$[rsp], 0
  0004d	75 07		 jne	 SHORT $LN3@marshal_lo

; 1326 :         return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	e9 88 00 00 00	 jmp	 $LN4@marshal_lo
$LN3@marshal_lo:

; 1327 :     if (!PyBytes_Check(data)) {

  00056	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  0005b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00065	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0006a	85 c0		 test	 eax, eax
  0006c	75 2b		 jne	 SHORT $LN2@marshal_lo

; 1328 :         PyErr_Format(PyExc_TypeError,
; 1329 :                      "f.read() returned not bytes but %.100s",
; 1330 :                      data->ob_type->tp_name);

  0006e	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  00073	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00077	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@JEOLDDLK@f?4read?$CI?$CJ?5returned?5not?5bytes?5but?5@
  00082	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00089	e8 00 00 00 00	 call	 PyErr_Format

; 1331 :         result = NULL;

  0008e	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 1332 :     }
; 1333 :     else {

  00097	eb 36		 jmp	 SHORT $LN1@marshal_lo
$LN2@marshal_lo:

; 1334 :         rf.depth = 0;

  00099	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR rf$[rsp+12], 0

; 1335 :         rf.fp = NULL;

  000a1	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR rf$[rsp], 0

; 1336 :         rf.readable = f;

  000aa	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  000b2	48 89 44 24 30	 mov	 QWORD PTR rf$[rsp+16], rax

; 1337 :         rf.current_filename = NULL;

  000b7	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR rf$[rsp+32], 0

; 1338 :         result = read_object(&rf);

  000c0	48 8d 4c 24 20	 lea	 rcx, QWORD PTR rf$[rsp]
  000c5	e8 00 00 00 00	 call	 read_object
  000ca	48 89 44 24 68	 mov	 QWORD PTR result$[rsp], rax
$LN1@marshal_lo:

; 1339 :     }
; 1340 :     Py_DECREF(data);

  000cf	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  000d4	e8 00 00 00 00	 call	 _Py_DecRef

; 1341 :     return result;

  000d9	48 8b 44 24 68	 mov	 rax, QWORD PTR result$[rsp]
$LN4@marshal_lo:

; 1342 : }

  000de	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000e2	c3		 ret	 0
marshal_load ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@DEBICIBJ@NULL?5object?5in?5marshal?5data?5for?5@ ; `string'
PUBLIC	??_C@_0CK@PDHBPEAP@XXX?5readobject?5called?5with?5excep@ ; `string'
EXTRN	__imp_fprintf:PROC
EXTRN	__imp___iob_func:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_object DD imagerel read_object
	DD	imagerel read_object+111
	DD	imagerel $unwind$read_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_object DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CH@DEBICIBJ@NULL?5object?5in?5marshal?5data?5for?5@
CONST	SEGMENT
??_C@_0CH@DEBICIBJ@NULL?5object?5in?5marshal?5data?5for?5@ DB 'NULL objec'
	DB	't in marshal data for object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PDHBPEAP@XXX?5readobject?5called?5with?5excep@
CONST	SEGMENT
??_C@_0CK@PDHBPEAP@XXX?5readobject?5called?5with?5excep@ DB 'XXX readobje'
	DB	'ct called with exception set', 0aH, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT read_object
_TEXT	SEGMENT
v$ = 32
p$ = 64
read_object PROC					; COMDAT

; 1126 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1127 :     PyObject *v;
; 1128 :     if (PyErr_Occurred()) {

  00009	e8 00 00 00 00	 call	 PyErr_Occurred
  0000e	48 85 c0	 test	 rax, rax
  00011	74 1e		 je	 SHORT $LN2@read_objec

; 1129 :         fprintf(stderr, "XXX readobject called with exception set\n");

  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00019	48 83 c0 60	 add	 rax, 96			; 00000060H
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@PDHBPEAP@XXX?5readobject?5called?5with?5excep@
  00024	48 8b c8	 mov	 rcx, rax
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1130 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 39		 jmp	 SHORT $LN3@read_objec
$LN2@read_objec:

; 1131 :     }
; 1132 :     v = r_object(p);

  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR p$[rsp]
  00036	e8 00 00 00 00	 call	 r_object
  0003b	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 1133 :     if (v == NULL && !PyErr_Occurred())

  00040	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00046	75 1d		 jne	 SHORT $LN1@read_objec
  00048	e8 00 00 00 00	 call	 PyErr_Occurred
  0004d	48 85 c0	 test	 rax, rax
  00050	75 13		 jne	 SHORT $LN1@read_objec

; 1134 :         PyErr_SetString(PyExc_TypeError, "NULL object in marshal data for object");

  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@DEBICIBJ@NULL?5object?5in?5marshal?5data?5for?5@
  00059	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00060	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@read_objec:

; 1135 :     return v;

  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN3@read_objec:

; 1136 : }

  0006a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006e	c3		 ret	 0
read_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_09JNBMPFKB@O?$HMi?3dumps?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$marshal_dumps DD imagerel marshal_dumps
	DD	imagerel marshal_dumps+76
	DD	imagerel $unwind$marshal_dumps
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$marshal_dumps DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_09JNBMPFKB@O?$HMi?3dumps?$AA@
CONST	SEGMENT
??_C@_09JNBMPFKB@O?$HMi?3dumps?$AA@ DB 'O|i:dumps', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT marshal_dumps
_TEXT	SEGMENT
x$ = 32
version$ = 40
self$ = 64
args$ = 72
marshal_dumps PROC					; COMDAT

; 1359 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1360 :     PyObject *x;
; 1361 :     int version = Py_MARSHAL_VERSION;

  0000e	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR version$[rsp], 2

; 1362 :     if (!PyArg_ParseTuple(args, "O|i:dumps", &x, &version))

  00016	4c 8d 4c 24 28	 lea	 r9, QWORD PTR version$[rsp]
  0001b	4c 8d 44 24 20	 lea	 r8, QWORD PTR x$[rsp]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09JNBMPFKB@O?$HMi?3dumps?$AA@
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0002c	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00031	85 c0		 test	 eax, eax
  00033	75 04		 jne	 SHORT $LN1@marshal_du@2

; 1363 :         return NULL;

  00035	33 c0		 xor	 eax, eax
  00037	eb 0e		 jmp	 SHORT $LN2@marshal_du@2
$LN1@marshal_du@2:

; 1364 :     return PyMarshal_WriteObjectToString(x, version);

  00039	8b 54 24 28	 mov	 edx, DWORD PTR version$[rsp]
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00042	e8 00 00 00 00	 call	 PyMarshal_WriteObjectToString
$LN2@marshal_du@2:

; 1365 : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
marshal_dumps ENDP
_TEXT	ENDS
PUBLIC	??_C@_08INFBOMEP@y?$CK?3loads?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$marshal_loads DD imagerel marshal_loads
	DD	imagerel marshal_loads+204
	DD	imagerel $unwind$marshal_loads
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$marshal_loads DD 021101H
	DD	01b0111H
xdata	ENDS
;	COMDAT ??_C@_08INFBOMEP@y?$CK?3loads?$AA@
CONST	SEGMENT
??_C@_08INFBOMEP@y?$CK?3loads?$AA@ DB 'y*:loads', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT marshal_loads
_TEXT	SEGMENT
p$ = 32
n$ = 112
s$ = 120
rf$ = 128
result$ = 192
self$ = 224
args$ = 232
marshal_loads PROC					; COMDAT

; 1379 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 1380 :     RFILE rf;
; 1381 :     Py_buffer p;
; 1382 :     char *s;
; 1383 :     Py_ssize_t n;
; 1384 :     PyObject* result;
; 1385 :     if (!PyArg_ParseTuple(args, "y*:loads", &p))

  00011	4c 8d 44 24 20	 lea	 r8, QWORD PTR p$[rsp]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08INFBOMEP@y?$CK?3loads?$AA@
  0001d	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00025	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0002a	85 c0		 test	 eax, eax
  0002c	75 07		 jne	 SHORT $LN1@marshal_lo@2

; 1386 :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	e9 8f 00 00 00	 jmp	 $LN2@marshal_lo@2
$LN1@marshal_lo@2:

; 1387 :     s = p.buf;

  00035	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003a	48 89 44 24 78	 mov	 QWORD PTR s$[rsp], rax

; 1388 :     n = p.len;

  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp+16]
  00044	48 89 44 24 70	 mov	 QWORD PTR n$[rsp], rax

; 1389 :     rf.fp = NULL;

  00049	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rf$[rsp], 0

; 1390 :     rf.readable = NULL;

  00055	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rf$[rsp+16], 0

; 1391 :     rf.current_filename = NULL;

  00061	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rf$[rsp+32], 0

; 1392 :     rf.ptr = s;

  0006d	48 8b 44 24 78	 mov	 rax, QWORD PTR s$[rsp]
  00072	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR rf$[rsp+40], rax

; 1393 :     rf.end = s + n;

  0007a	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  0007f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR s$[rsp]
  00084	48 03 c8	 add	 rcx, rax
  00087	48 8b c1	 mov	 rax, rcx
  0008a	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR rf$[rsp+48], rax

; 1394 :     rf.depth = 0;

  00092	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rf$[rsp+12], 0

; 1395 :     result = read_object(&rf);

  0009d	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR rf$[rsp]
  000a5	e8 00 00 00 00	 call	 read_object
  000aa	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR result$[rsp], rax

; 1396 :     PyBuffer_Release(&p);

  000b2	48 8d 4c 24 20	 lea	 rcx, QWORD PTR p$[rsp]
  000b7	e8 00 00 00 00	 call	 PyBuffer_Release

; 1397 :     return result;

  000bc	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR result$[rsp]
$LN2@marshal_lo@2:

; 1398 : }

  000c4	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  000cb	c3		 ret	 0
marshal_loads ENDP
_TEXT	ENDS
PUBLIC	??_C@_07CPCPJPKL@version?$AA@			; `string'
PUBLIC	PyMarshal_Init
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMarshal_Init DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$PyMarshal_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMarshal_Init DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version?$AA@
CONST	SEGMENT
??_C@_07CPCPJPKL@version?$AA@ DB 'version', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyMarshal_Init
_TEXT	SEGMENT
mod$ = 32
PyMarshal_Init PROC					; COMDAT

; 1460 : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1461 :     PyObject *mod = PyModule_Create(&marshalmodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:marshalmodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 20	 mov	 QWORD PTR mod$[rsp], rax

; 1462 :     if (mod == NULL)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00020	75 04		 jne	 SHORT $LN1@PyMarshal_@4

; 1463 :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	eb 1c		 jmp	 SHORT $LN2@PyMarshal_@4
$LN1@PyMarshal_@4:

; 1464 :     PyModule_AddIntConstant(mod, "version", Py_MARSHAL_VERSION);

  00026	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CPCPJPKL@version?$AA@
  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mod$[rsp]
  00038	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1465 :     return mod;

  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR mod$[rsp]
$LN2@PyMarshal_@4:

; 1466 : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
PyMarshal_Init ENDP
_TEXT	ENDS
END
