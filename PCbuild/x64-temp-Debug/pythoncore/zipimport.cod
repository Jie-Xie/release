; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09INHLDGFD@zipimport?$AA@			; `string'
PUBLIC	??_C@_0L@BDJCADKN@decompress?$AA@		; `string'
PUBLIC	??_C@_0BG@NCACOKML@zipimport?4zipimporter?$AA@	; `string'
PUBLIC	??_C@_06MGHPCLOB@_files?$AA@			; `string'
PUBLIC	??_C@_06CHGOAPND@prefix?$AA@			; `string'
PUBLIC	??_C@_07NEJBDDEA@archive?$AA@			; `string'
PUBLIC	??_C@_0L@DIOPGJNK@is_package?$AA@		; `string'
PUBLIC	??_C@_0N@DMPBOHMK@get_filename?$AA@		; `string'
PUBLIC	??_C@_0L@HNCNOLCF@get_source?$AA@		; `string'
PUBLIC	??_C@_08LGIDPBCP@get_code?$AA@			; `string'
PUBLIC	??_C@_08JMDGDMHI@get_data?$AA@			; `string'
PUBLIC	??_C@_0M@KDCFJIEE@load_module?$AA@		; `string'
PUBLIC	??_C@_0M@NMMMOKMM@find_loader?$AA@		; `string'
PUBLIC	??_C@_0M@FAKMOBOL@find_module?$AA@		; `string'
PUBLIC	??_C@_07CLEHDIEJ@replace?$AA@			; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericGetAttr:PROC
_BSS	SEGMENT
zip_directory_cache DQ 01H DUP (?)
?importing_zlib@?1??get_decompress_func@@9@9 DD 01H DUP (?) ; `get_decompress_func'::`2'::importing_zlib
_BSS	ENDS
;	COMDAT ??_C@_09INHLDGFD@zipimport?$AA@
CONST	SEGMENT
??_C@_09INHLDGFD@zipimport?$AA@ DB 'zipimport', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BDJCADKN@decompress?$AA@
CONST	SEGMENT
??_C@_0L@BDJCADKN@decompress?$AA@ DB 'decompress', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NCACOKML@zipimport?4zipimporter?$AA@
CONST	SEGMENT
??_C@_0BG@NCACOKML@zipimport?4zipimporter?$AA@ DB 'zipimport.zipimporter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MGHPCLOB@_files?$AA@
CONST	SEGMENT
??_C@_06MGHPCLOB@_files?$AA@ DB '_files', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHGOAPND@prefix?$AA@
CONST	SEGMENT
??_C@_06CHGOAPND@prefix?$AA@ DB 'prefix', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NEJBDDEA@archive?$AA@
CONST	SEGMENT
??_C@_07NEJBDDEA@archive?$AA@ DB 'archive', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DIOPGJNK@is_package?$AA@
CONST	SEGMENT
??_C@_0L@DIOPGJNK@is_package?$AA@ DB 'is_package', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DMPBOHMK@get_filename?$AA@
CONST	SEGMENT
??_C@_0N@DMPBOHMK@get_filename?$AA@ DB 'get_filename', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HNCNOLCF@get_source?$AA@
CONST	SEGMENT
??_C@_0L@HNCNOLCF@get_source?$AA@ DB 'get_source', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LGIDPBCP@get_code?$AA@
CONST	SEGMENT
??_C@_08LGIDPBCP@get_code?$AA@ DB 'get_code', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JMDGDMHI@get_data?$AA@
CONST	SEGMENT
??_C@_08JMDGDMHI@get_data?$AA@ DB 'get_data', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KDCFJIEE@load_module?$AA@
CONST	SEGMENT
??_C@_0M@KDCFJIEE@load_module?$AA@ DB 'load_module', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NMMMOKMM@find_loader?$AA@
CONST	SEGMENT
??_C@_0M@NMMMOKMM@find_loader?$AA@ DB 'find_loader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FAKMOBOL@find_module?$AA@
CONST	SEGMENT
??_C@_0M@FAKMOBOL@find_module?$AA@ DB 'find_module', 00H ; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_decompress@?1??get_decompress_func@@9@9 DQ 0000000000000000H ; `get_decompress_func'::`2'::PyId_decompress
	DQ	FLAT:??_C@_0L@BDJCADKN@decompress?$AA@
	DQ	0000000000000000H
?PyId_replace@?1??zipimporter_get_data@@9@9 DQ 0000000000000000H ; `zipimporter_get_data'::`2'::PyId_replace
	DQ	FLAT:??_C@_07CLEHDIEJ@replace?$AA@
	DQ	0000000000000000H
?PyId_replace@?1??zipimporter_init@@9@9 DQ 0000000000000000H ; `zipimporter_init'::`2'::PyId_replace
	DQ	FLAT:??_C@_07CLEHDIEJ@replace?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_07CLEHDIEJ@replace?$AA@
CONST	SEGMENT
??_C@_07CLEHDIEJ@replace?$AA@ DB 'replace', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
zip_searchorder DB '/__init__.pyc', 00H
	ORG $+2
	DD	03H
	DB	'/__init__.pyo', 00H
	ORG $+2
	DD	03H
	DB	'/__init__.py', 00H
	ORG $+1
	ORG $+2
	DD	02H
	DB	'.pyc', 00H
	ORG $+9
	ORG $+2
	DD	01H
	DB	'.pyo', 00H
	ORG $+9
	ORG $+2
	DD	01H
	DB	'.py', 00H
	ORG $+10
	ORG $+2
	DD	00H
	DB	00H
	ORG $+13
	ORG $+2
	DD	00H
	ORG $+4
doc_find_module DB 'find_module(fullname, path=None) -> self or None.', 0aH
	DB	0aH, 'Search for a module specified by ''fullname''. ''fullnam'
	DB	'e'' must be the', 0aH, 'fully qualified (dotted) module name.'
	DB	' It returns the zipimporter', 0aH, 'instance itself if the mo'
	DB	'dule was found, or None if it wasn''t.', 0aH, 'The optional '''
	DB	'path'' argument is ignored -- it''s there for compatibility', 0aH
	DB	'with the importer protocol.', 00H
	ORG $+5
doc_find_loader DB 'find_loader(fullname, path=None) -> self, str or None'
	DB	'.', 0aH, 0aH, 'Search for a module specified by ''fullname''.'
	DB	' ''fullname'' must be the', 0aH, 'fully qualified (dotted) mo'
	DB	'dule name. It returns the zipimporter', 0aH, 'instance itself'
	DB	' if the module was found, a string containing the', 0aH, 'ful'
	DB	'l path name if it''s possibly a portion of a namespace packag'
	DB	'e,', 0aH, 'or None otherwise. The optional ''path'' argument '
	DB	'is ignored -- it''s', 0aH, ' there for compatibility with the'
	DB	' importer protocol.', 00H
	ORG $+8
doc_load_module DB 'load_module(fullname) -> module.', 0aH, 0aH, 'Load th'
	DB	'e module specified by ''fullname''. ''fullname'' must be the', 0aH
	DB	'fully qualified (dotted) module name. It returns the imported'
	DB	0aH, 'module, or raises ZipImportError if it wasn''t found.', 00H
	ORG $+11
doc_get_data DB	'get_data(pathname) -> string with file data.', 0aH, 0aH, 'R'
	DB	'eturn the data associated with ''pathname''. Raise IOError if'
	DB	0aH, 'the file wasn''t found.', 00H
	ORG $+14
doc_is_package DB 'is_package(fullname) -> bool.', 0aH, 0aH, 'Return True'
	DB	' if the module specified by fullname is a package.', 0aH, 'Ra'
	DB	'ise ZipImportError if the module couldn''t be found.', 00H
	ORG $+13
doc_get_code DB	'get_code(fullname) -> code object.', 0aH, 0aH, 'Return t'
	DB	'he code object for the specified module. Raise ZipImportError'
	DB	0aH, 'if the module couldn''t be found.', 00H
	ORG $+5
doc_get_source DB 'get_source(fullname) -> source string.', 0aH, 0aH, 'Re'
	DB	'turn the source code for the specified module. Raise ZipImpor'
	DB	'tError', 0aH, 'if the module couldn''t be found, return None '
	DB	'if the archive does', 0aH, 'contain the module, but has no so'
	DB	'urce for it.', 00H
	ORG $+3
doc_get_filename DB 'get_filename(fullname) -> filename string.', 0aH, 0aH
	DB	'Return the filename for the specified module.', 00H
	ORG $+6
zipimporter_methods DQ FLAT:??_C@_0M@FAKMOBOL@find_module?$AA@
	DQ	FLAT:zipimporter_find_module
	DD	01H
	ORG $+4
	DQ	FLAT:doc_find_module
	DQ	FLAT:??_C@_0M@NMMMOKMM@find_loader?$AA@
	DQ	FLAT:zipimporter_find_loader
	DD	01H
	ORG $+4
	DQ	FLAT:doc_find_loader
	DQ	FLAT:??_C@_0M@KDCFJIEE@load_module?$AA@
	DQ	FLAT:zipimporter_load_module
	DD	01H
	ORG $+4
	DQ	FLAT:doc_load_module
	DQ	FLAT:??_C@_08JMDGDMHI@get_data?$AA@
	DQ	FLAT:zipimporter_get_data
	DD	01H
	ORG $+4
	DQ	FLAT:doc_get_data
	DQ	FLAT:??_C@_08LGIDPBCP@get_code?$AA@
	DQ	FLAT:zipimporter_get_code
	DD	01H
	ORG $+4
	DQ	FLAT:doc_get_code
	DQ	FLAT:??_C@_0L@HNCNOLCF@get_source?$AA@
	DQ	FLAT:zipimporter_get_source
	DD	01H
	ORG $+4
	DQ	FLAT:doc_get_source
	DQ	FLAT:??_C@_0N@DMPBOHMK@get_filename?$AA@
	DQ	FLAT:zipimporter_get_filename
	DD	01H
	ORG $+4
	DQ	FLAT:doc_get_filename
	DQ	FLAT:??_C@_0L@DIOPGJNK@is_package?$AA@
	DQ	FLAT:zipimporter_is_package
	DD	01H
	ORG $+4
	DQ	FLAT:doc_is_package
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
zipimporter_members DQ FLAT:??_C@_07NEJBDDEA@archive?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06CHGOAPND@prefix?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06MGHPCLOB@_files?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
zipimporter_doc DB 'zipimporter(archivepath) -> zipimporter object', 0aH, 0aH
	DB	'Create a new zipimporter instance. ''archivepath'' must be a '
	DB	'path to', 0aH, 'a zipfile, or to a specific path inside a zip'
	DB	'file. For example, it can be', 0aH, '''/tmp/myimport.zip'', o'
	DB	'r ''/tmp/myimport.zip/mydirectory'', if mydirectory is a', 0aH
	DB	'valid directory inside the archive.', 0aH, 0aH, '''ZipImportE'
	DB	'rror is raised if ''archivepath'' doesn''t point to a valid Z'
	DB	'ip', 0aH, 'archive.', 0aH, 0aH, 'The ''archive'' attribute of'
	DB	' zipimporter objects contains the name of the', 0aH, 'zipfile'
	DB	' targeted.', 00H
	ORG $+5
ZipImporter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BG@NCACOKML@zipimport?4zipimporter?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:zipimporter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:zipimporter_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:zipimporter_doc
	DQ	FLAT:zipimporter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:zipimporter_methods
	DQ	FLAT:zipimporter_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:zipimporter_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
zipimport_doc DB 'zipimport provides support for importing Python modules'
	DB	' from Zip archives.', 0aH, 0aH, 'This module exports three ob'
	DB	'jects:', 0aH, '- zipimporter: a class; its constructor takes '
	DB	'a path to a Zip archive.', 0aH, '- ZipImportError: exception '
	DB	'raised by zipimporter objects. It''s a', 0aH, '  subclass of '
	DB	'ImportError, so it can be caught as ImportError, too.', 0aH, '-'
	DB	' _zip_directory_cache: a dict, mapping archive paths to zip d'
	DB	'irectory', 0aH, '  info dicts, as used in zipimporter._files.'
	DB	0aH, 0aH, 'It is usually not needed to use the zipimport modul'
	DB	'e explicitly; it is', 0aH, 'used by the builtin import mechan'
	DB	'ism for sys.path items that are paths', 0aH, 'to Zip archives'
	DB	'.', 00H
zipimportmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09INHLDGFD@zipimport?$AA@
	DQ	FLAT:zipimport_doc
	DQ	ffffffffffffffffH
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_04LMHJOLGJ@?$CFU?$CFc?$AA@		; `string'
PUBLIC	??_C@_1EO@EAMONLJF@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@ ; `string'
PUBLIC	??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@OKIAJMEB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0P@CLFECPDE@not?5a?5Zip?5file?$AA@	; `string'
PUBLIC	??_C@_0BB@MIFKEAM@zipimporter_init?$AA@		; `string'
PUBLIC	??_C@_0BH@DCMIAMFE@?4?4?2Modules?2zipimport?4c?$AA@ ; `string'
PUBLIC	_Py_IncRef
PUBLIC	_Py_DecRef
PUBLIC	??_C@_02KJDGAJLC@CC?$AA@			; `string'
PUBLIC	??_C@_0BG@GCDMHENG@archive?5path?5is?5empty?$AA@ ; `string'
PUBLIC	??_C@_1DC@CIKMINIA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0P@DHMMMBMF@O?$CG?3zipimporter?$AA@	; `string'
PUBLIC	??_C@_0O@EEGAHOFH@zipimporter?$CI?$CJ?$AA@	; `string'
EXTRN	PyUnicode_New:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyUnicode_Substring:PROC
EXTRN	PyUnicode_FindChar:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_stat:PROC
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	_PyUnicode_Ready:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyArg_ParseTuple:PROC
EXTRN	PyUnicode_FSDecoder:PROC
EXTRN	_PyArg_NoKeywords:PROC
EXTRN	_tls_index:DWORD
_BSS	SEGMENT
	ALIGN	8

ZipImportError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\zipimport.c
pdata	SEGMENT
$pdata$zipimporter_init DD imagerel zipimporter_init
	DD	imagerel zipimporter_init+2846
	DD	imagerel $unwind$zipimporter_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_init DD 021601H
	DD	01f0116H
xdata	ENDS
;	COMDAT ??_C@_04LMHJOLGJ@?$CFU?$CFc?$AA@
CONST	SEGMENT
??_C@_04LMHJOLGJ@?$CFU?$CFc?$AA@ DB '%U%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EAMONLJF@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
CONST	SEGMENT
??_C@_1EO@EAMONLJF@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, ')', 00H, ')'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, ')', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 'p', 00H, 'a', 00H, 't', 00H
	DB	'h', 00H, ')', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@OKIAJMEB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@OKIAJMEB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CLFECPDE@not?5a?5Zip?5file?$AA@
CONST	SEGMENT
??_C@_0P@CLFECPDE@not?5a?5Zip?5file?$AA@ DB 'not a Zip file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MIFKEAM@zipimporter_init?$AA@
CONST	SEGMENT
??_C@_0BB@MIFKEAM@zipimporter_init?$AA@ DB 'zipimporter_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DCMIAMFE@?4?4?2Modules?2zipimport?4c?$AA@
CONST	SEGMENT
??_C@_0BH@DCMIAMFE@?4?4?2Modules?2zipimport?4c?$AA@ DB '..\Modules\zipimp'
	DB	'ort.c', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02KJDGAJLC@CC?$AA@
CONST	SEGMENT
??_C@_02KJDGAJLC@CC?$AA@ DB 'CC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GCDMHENG@archive?5path?5is?5empty?$AA@
CONST	SEGMENT
??_C@_0BG@GCDMHENG@archive?5path?5is?5empty?$AA@ DB 'archive path is empt'
	DB	'y', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@CIKMINIA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@CIKMINIA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'p', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'h', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'z', 00H, 'i', 00H, 'p'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H
	DB	'.', 00H, 'c', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DHMMMBMF@O?$CG?3zipimporter?$AA@
CONST	SEGMENT
??_C@_0P@DHMMMBMF@O?$CG?3zipimporter?$AA@ DB 'O&:zipimporter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EEGAHOFH@zipimporter?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0O@EEGAHOFH@zipimporter?$CI?$CJ?$AA@ DB 'zipimporter()', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zipimporter_init
_TEXT	SEGMENT
files$ = 48
tmp$ = 56
len$ = 64
flen$ = 72
filename$ = 80
path$ = 88
statbuf$20436 = 96
rv$20437 = 144
_py_tmp$20447 = 152
_py_tmp$20455 = 160
tv88 = 168
tv213 = 172
tv324 = 176
tv333 = 184
tv451 = 192
tv390 = 200
tv399 = 208
tv450 = 216
tv437 = 224
tv446 = 232
self$ = 256
args$ = 264
kwds$ = 272
zipimporter_init PROC					; COMDAT

; 65   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H

; 66   :     PyObject *path, *files, *tmp;
; 67   :     PyObject *filename = NULL;

  00016	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR filename$[rsp], 0

; 68   :     Py_ssize_t len, flen;
; 69   : #ifdef ALTSEP
; 70   :     _Py_IDENTIFIER(replace);
; 71   : #endif
; 72   : 
; 73   :     if (!_PyArg_NoKeywords("zipimporter()", kwds))

  0001f	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EEGAHOFH@zipimporter?$CI?$CJ?$AA@
  0002e	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00033	85 c0		 test	 eax, eax
  00035	75 0a		 jne	 SHORT $LN34@zipimporte

; 74   :         return -1;

  00037	b8 ff ff ff ff	 mov	 eax, -1
  0003c	e9 d5 0a 00 00	 jmp	 $LN35@zipimporte
$LN34@zipimporte:

; 75   : 
; 76   :     if (!PyArg_ParseTuple(args, "O&:zipimporter",
; 77   :                           PyUnicode_FSDecoder, &path))

  00041	4c 8d 4c 24 58	 lea	 r9, QWORD PTR path$[rsp]
  00046	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyUnicode_FSDecoder
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@DHMMMBMF@O?$CG?3zipimporter?$AA@
  00054	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005c	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00061	85 c0		 test	 eax, eax
  00063	75 0a		 jne	 SHORT $LN33@zipimporte

; 78   :         return -1;

  00065	b8 ff ff ff ff	 mov	 eax, -1
  0006a	e9 a7 0a 00 00	 jmp	 $LN35@zipimporte
$LN33@zipimporte:

; 79   : 
; 80   :     if (PyUnicode_READY(path) == -1)

  0006f	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00074	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00078	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0007e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00083	85 c0		 test	 eax, eax
  00085	75 1c		 jne	 SHORT $LN37@zipimporte
  00087	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a1	33 c0		 xor	 eax, eax
$LN37@zipimporte:
  000a3	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  000a8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000ab	c1 e8 07	 shr	 eax, 7
  000ae	83 e0 01	 and	 eax, 1
  000b1	85 c0		 test	 eax, eax
  000b3	74 0d		 je	 SHORT $LN38@zipimporte
  000b5	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv88[rsp], 0
  000c0	eb 11		 jmp	 SHORT $LN39@zipimporte
$LN38@zipimporte:
  000c2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  000c7	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000cc	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv88[rsp], eax
$LN39@zipimporte:
  000d3	83 bc 24 a8 00
	00 00 ff	 cmp	 DWORD PTR tv88[rsp], -1
  000db	75 0a		 jne	 SHORT $LN32@zipimporte

; 81   :         return -1;

  000dd	b8 ff ff ff ff	 mov	 eax, -1
  000e2	e9 2f 0a 00 00	 jmp	 $LN35@zipimporte
$LN32@zipimporte:

; 82   : 
; 83   :     len = PyUnicode_GET_LENGTH(path);

  000e7	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  000ec	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000fb	85 c0		 test	 eax, eax
  000fd	75 1c		 jne	 SHORT $LN40@zipimporte
  000ff	41 b8 53 00 00
	00		 mov	 r8d, 83			; 00000053H
  00105	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0010c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  00113	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00119	33 c0		 xor	 eax, eax
$LN40@zipimporte:
  0011b	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00120	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00123	c1 e8 07	 shr	 eax, 7
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	75 1c		 jne	 SHORT $LN41@zipimporte
  0012d	41 b8 53 00 00
	00		 mov	 r8d, 83			; 00000053H
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CIKMINIA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00147	33 c0		 xor	 eax, eax
$LN41@zipimporte:
  00149	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0014e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00152	48 89 44 24 40	 mov	 QWORD PTR len$[rsp], rax

; 84   :     if (len == 0) {

  00157	48 83 7c 24 40
	00		 cmp	 QWORD PTR len$[rsp], 0
  0015d	75 18		 jne	 SHORT $LN31@zipimporte

; 85   :         PyErr_SetString(ZipImportError, "archive path is empty");

  0015f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@GCDMHENG@archive?5path?5is?5empty?$AA@
  00166	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  0016d	e8 00 00 00 00	 call	 PyErr_SetString

; 86   :         goto error;

  00172	e9 78 09 00 00	 jmp	 $error$20428
$LN31@zipimporte:

; 87   :     }
; 88   : 
; 89   : #ifdef ALTSEP
; 90   :     tmp = _PyObject_CallMethodId(path, &PyId_replace, "CC", ALTSEP, SEP);

  00177	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_replace@?1??zipimporter_init@@9@9
  0017c	8b c0		 mov	 eax, eax
  0017e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00184	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0018d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00191	c7 44 24 20 5c
	00 00 00	 mov	 DWORD PTR [rsp+32], 92	; 0000005cH
  00199	41 b9 2f 00 00
	00		 mov	 r9d, 47			; 0000002fH
  0019f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02KJDGAJLC@CC?$AA@
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  001ae	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  001b3	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 91   :     if (!tmp)

  001b8	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  001be	75 05		 jne	 SHORT $LN30@zipimporte

; 92   :         goto error;

  001c0	e9 2a 09 00 00	 jmp	 $error$20428
$LN30@zipimporte:

; 93   :     Py_DECREF(path);

  001c5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  001ca	e8 00 00 00 00	 call	 _Py_DecRef

; 94   :     path = tmp;

  001cf	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  001d4	48 89 44 24 58	 mov	 QWORD PTR path$[rsp], rax

; 95   : #endif
; 96   : 
; 97   :     filename = path;

  001d9	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  001de	48 89 44 24 50	 mov	 QWORD PTR filename$[rsp], rax

; 98   :     Py_INCREF(filename);

  001e3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  001e8	e8 00 00 00 00	 call	 _Py_IncRef

; 99   :     flen = len;

  001ed	48 8b 44 24 40	 mov	 rax, QWORD PTR len$[rsp]
  001f2	48 89 44 24 48	 mov	 QWORD PTR flen$[rsp], rax
$LN29@zipimporte:

; 100  :     for (;;) {
; 101  :         struct stat statbuf;
; 102  :         int rv;
; 103  : 
; 104  :         rv = _Py_stat(filename, &statbuf);

  001f7	48 8d 54 24 60	 lea	 rdx, QWORD PTR statbuf$20436[rsp]
  001fc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  00201	e8 00 00 00 00	 call	 _Py_stat
  00206	89 84 24 90 00
	00 00		 mov	 DWORD PTR rv$20437[rsp], eax

; 105  :         if (rv == -2)

  0020d	83 bc 24 90 00
	00 00 fe	 cmp	 DWORD PTR rv$20437[rsp], -2
  00215	75 05		 jne	 SHORT $LN27@zipimporte

; 106  :             goto error;

  00217	e9 d3 08 00 00	 jmp	 $error$20428
$LN27@zipimporte:

; 107  :         if (rv == 0) {

  0021c	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR rv$20437[rsp], 0
  00224	75 71		 jne	 SHORT $LN26@zipimporte

; 108  :             /* it exists */
; 109  :             if (!S_ISREG(statbuf.st_mode))

  00226	0f b7 44 24 66	 movzx	 eax, WORD PTR statbuf$20436[rsp+6]
  0022b	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00230	3d 00 80 00 00	 cmp	 eax, 32768		; 00008000H
  00235	74 5b		 je	 SHORT $LN25@zipimporte
$LN24@zipimporte:

; 110  :                 /* it's a not file */
; 111  :                 Py_CLEAR(filename);

  00237	48 83 7c 24 50
	00		 cmp	 QWORD PTR filename$[rsp], 0
  0023d	74 4d		 je	 SHORT $LN21@zipimporte
  0023f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00247	4c 8b 4c 24 50	 mov	 r9, QWORD PTR filename$[rsp]
  0024c	41 b8 6f 00 00
	00		 mov	 r8d, 111		; 0000006fH
  00252	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@DCMIAMFE@?4?4?2Modules?2zipimport?4c?$AA@
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MIFKEAM@zipimporter_init?$AA@
  00260	e8 00 00 00 00	 call	 _PyParallel_Guard
  00265	85 c0		 test	 eax, eax
  00267	75 23		 jne	 SHORT $LN21@zipimporte
  00269	48 8b 44 24 50	 mov	 rax, QWORD PTR filename$[rsp]
  0026e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR _py_tmp$20447[rsp], rax
  00276	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR filename$[rsp], 0
  0027f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20447[rsp]
  00287	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@zipimporte:
  0028c	33 c0		 xor	 eax, eax
  0028e	85 c0		 test	 eax, eax
  00290	75 a5		 jne	 SHORT $LN24@zipimporte
$LN25@zipimporte:

; 112  :             break;

  00292	e9 a4 00 00 00	 jmp	 $LN28@zipimporte
$LN26@zipimporte:
$LN20@zipimporte:

; 113  :         }
; 114  :         Py_CLEAR(filename);

  00297	48 83 7c 24 50
	00		 cmp	 QWORD PTR filename$[rsp], 0
  0029d	74 4d		 je	 SHORT $LN17@zipimporte
  0029f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002a7	4c 8b 4c 24 50	 mov	 r9, QWORD PTR filename$[rsp]
  002ac	41 b8 72 00 00
	00		 mov	 r8d, 114		; 00000072H
  002b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@DCMIAMFE@?4?4?2Modules?2zipimport?4c?$AA@
  002b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MIFKEAM@zipimporter_init?$AA@
  002c0	e8 00 00 00 00	 call	 _PyParallel_Guard
  002c5	85 c0		 test	 eax, eax
  002c7	75 23		 jne	 SHORT $LN17@zipimporte
  002c9	48 8b 44 24 50	 mov	 rax, QWORD PTR filename$[rsp]
  002ce	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _py_tmp$20455[rsp], rax
  002d6	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR filename$[rsp], 0
  002df	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20455[rsp]
  002e7	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@zipimporte:
  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	75 a5		 jne	 SHORT $LN20@zipimporte

; 115  :         /* back up one path element */
; 116  :         flen = PyUnicode_FindChar(path, SEP, 0, flen, -1);

  002f2	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  002fa	4c 8b 4c 24 48	 mov	 r9, QWORD PTR flen$[rsp]
  002ff	45 33 c0	 xor	 r8d, r8d
  00302	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  00307	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  0030c	e8 00 00 00 00	 call	 PyUnicode_FindChar
  00311	48 89 44 24 48	 mov	 QWORD PTR flen$[rsp], rax

; 117  :         if (flen == -1)

  00316	48 83 7c 24 48
	ff		 cmp	 QWORD PTR flen$[rsp], -1
  0031c	75 02		 jne	 SHORT $LN16@zipimporte

; 118  :             break;

  0031e	eb 1b		 jmp	 SHORT $LN28@zipimporte
$LN16@zipimporte:

; 119  :         filename = PyUnicode_Substring(path, 0, flen);

  00320	4c 8b 44 24 48	 mov	 r8, QWORD PTR flen$[rsp]
  00325	33 d2		 xor	 edx, edx
  00327	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  0032c	e8 00 00 00 00	 call	 PyUnicode_Substring
  00331	48 89 44 24 50	 mov	 QWORD PTR filename$[rsp], rax

; 120  :     }

  00336	e9 bc fe ff ff	 jmp	 $LN29@zipimporte
$LN28@zipimporte:

; 121  :     if (filename == NULL) {

  0033b	48 83 7c 24 50
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00341	75 18		 jne	 SHORT $LN15@zipimporte

; 122  :         PyErr_SetString(ZipImportError, "not a Zip file");

  00343	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@CLFECPDE@not?5a?5Zip?5file?$AA@
  0034a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  00351	e8 00 00 00 00	 call	 PyErr_SetString

; 123  :         goto error;

  00356	e9 94 07 00 00	 jmp	 $error$20428
$LN15@zipimporte:

; 124  :     }
; 125  : 
; 126  :     if (PyUnicode_READY(filename) < 0)

  0035b	48 8b 44 24 50	 mov	 rax, QWORD PTR filename$[rsp]
  00360	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00364	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0036a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0036f	85 c0		 test	 eax, eax
  00371	75 1c		 jne	 SHORT $LN42@zipimporte
  00373	41 b8 7e 00 00
	00		 mov	 r8d, 126		; 0000007eH
  00379	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00380	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@OKIAJMEB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00387	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0038d	33 c0		 xor	 eax, eax
$LN42@zipimporte:
  0038f	48 8b 44 24 50	 mov	 rax, QWORD PTR filename$[rsp]
  00394	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00397	c1 e8 07	 shr	 eax, 7
  0039a	83 e0 01	 and	 eax, 1
  0039d	85 c0		 test	 eax, eax
  0039f	74 0d		 je	 SHORT $LN43@zipimporte
  003a1	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv213[rsp], 0
  003ac	eb 11		 jmp	 SHORT $LN44@zipimporte
$LN43@zipimporte:
  003ae	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  003b3	e8 00 00 00 00	 call	 _PyUnicode_Ready
  003b8	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv213[rsp], eax
$LN44@zipimporte:
  003bf	83 bc 24 ac 00
	00 00 00	 cmp	 DWORD PTR tv213[rsp], 0
  003c7	7d 05		 jge	 SHORT $LN14@zipimporte

; 127  :         goto error;

  003c9	e9 21 07 00 00	 jmp	 $error$20428
$LN14@zipimporte:

; 128  : 
; 129  :     files = PyDict_GetItem(zip_directory_cache, filename);

  003ce	48 8b 54 24 50	 mov	 rdx, QWORD PTR filename$[rsp]
  003d3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR zip_directory_cache
  003da	e8 00 00 00 00	 call	 PyDict_GetItem
  003df	48 89 44 24 30	 mov	 QWORD PTR files$[rsp], rax

; 130  :     if (files == NULL) {

  003e4	48 83 7c 24 30
	00		 cmp	 QWORD PTR files$[rsp], 0
  003ea	75 3d		 jne	 SHORT $LN13@zipimporte

; 131  :         files = read_directory(filename);

  003ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  003f1	e8 00 00 00 00	 call	 read_directory
  003f6	48 89 44 24 30	 mov	 QWORD PTR files$[rsp], rax

; 132  :         if (files == NULL)

  003fb	48 83 7c 24 30
	00		 cmp	 QWORD PTR files$[rsp], 0
  00401	75 05		 jne	 SHORT $LN12@zipimporte

; 133  :             goto error;

  00403	e9 e7 06 00 00	 jmp	 $error$20428
$LN12@zipimporte:

; 134  :         if (PyDict_SetItem(zip_directory_cache, filename, files) != 0)

  00408	4c 8b 44 24 30	 mov	 r8, QWORD PTR files$[rsp]
  0040d	48 8b 54 24 50	 mov	 rdx, QWORD PTR filename$[rsp]
  00412	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR zip_directory_cache
  00419	e8 00 00 00 00	 call	 PyDict_SetItem
  0041e	85 c0		 test	 eax, eax
  00420	74 05		 je	 SHORT $LN11@zipimporte

; 135  :             goto error;

  00422	e9 c8 06 00 00	 jmp	 $error$20428
$LN11@zipimporte:

; 136  :     }
; 137  :     else

  00427	eb 0a		 jmp	 SHORT $LN10@zipimporte
$LN13@zipimporte:

; 138  :         Py_INCREF(files);

  00429	48 8b 4c 24 30	 mov	 rcx, QWORD PTR files$[rsp]
  0042e	e8 00 00 00 00	 call	 _Py_IncRef
$LN10@zipimporte:

; 139  :     self->files = files;

  00433	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0043b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR files$[rsp]
  00440	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 140  : 
; 141  :     /* Transfer reference */
; 142  :     self->archive = filename;

  00444	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0044c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  00451	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 143  :     filename = NULL;

  00455	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR filename$[rsp], 0

; 144  : 
; 145  :     /* Check if there is a prefix directory following the filename. */
; 146  :     if (flen != len) {

  0045e	48 8b 44 24 40	 mov	 rax, QWORD PTR len$[rsp]
  00463	48 39 44 24 48	 cmp	 QWORD PTR flen$[rsp], rax
  00468	0f 84 5e 06 00
	00		 je	 $LN9@zipimporte

; 147  :         tmp = PyUnicode_Substring(path, flen+1,
; 148  :                                   PyUnicode_GET_LENGTH(path));

  0046e	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00473	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00477	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0047d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00482	85 c0		 test	 eax, eax
  00484	75 1c		 jne	 SHORT $LN45@zipimporte
  00486	41 b8 94 00 00
	00		 mov	 r8d, 148		; 00000094H
  0048c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00493	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  0049a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004a0	33 c0		 xor	 eax, eax
$LN45@zipimporte:
  004a2	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  004a7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004aa	c1 e8 07	 shr	 eax, 7
  004ad	83 e0 01	 and	 eax, 1
  004b0	85 c0		 test	 eax, eax
  004b2	75 1c		 jne	 SHORT $LN46@zipimporte
  004b4	41 b8 94 00 00
	00		 mov	 r8d, 148		; 00000094H
  004ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  004c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CIKMINIA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  004c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004ce	33 c0		 xor	 eax, eax
$LN46@zipimporte:
  004d0	48 8b 44 24 48	 mov	 rax, QWORD PTR flen$[rsp]
  004d5	48 ff c0	 inc	 rax
  004d8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  004dd	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  004e1	48 8b d0	 mov	 rdx, rax
  004e4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  004e9	e8 00 00 00 00	 call	 PyUnicode_Substring
  004ee	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 149  :         if (tmp == NULL)

  004f3	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  004f9	75 05		 jne	 SHORT $LN8@zipimporte

; 150  :             goto error;

  004fb	e9 ef 05 00 00	 jmp	 $error$20428
$LN8@zipimporte:

; 151  :         self->prefix = tmp;

  00500	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00508	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  0050d	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 152  :         if (PyUnicode_READ_CHAR(path, len-1) != SEP) {

  00511	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00516	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0051a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00520	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00525	85 c0		 test	 eax, eax
  00527	75 1c		 jne	 SHORT $LN47@zipimporte
  00529	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  0052f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00536	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  0053d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00543	33 c0		 xor	 eax, eax
$LN47@zipimporte:
  00545	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0054a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0054d	c1 e8 07	 shr	 eax, 7
  00550	83 e0 01	 and	 eax, 1
  00553	85 c0		 test	 eax, eax
  00555	75 1c		 jne	 SHORT $LN48@zipimporte
  00557	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  0055d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00564	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CIKMINIA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  0056b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00571	33 c0		 xor	 eax, eax
$LN48@zipimporte:
  00573	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00578	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0057c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00582	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00587	85 c0		 test	 eax, eax
  00589	75 1c		 jne	 SHORT $LN49@zipimporte
  0058b	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  00591	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00598	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0059f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005a5	33 c0		 xor	 eax, eax
$LN49@zipimporte:
  005a7	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  005ac	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005af	c1 e8 07	 shr	 eax, 7
  005b2	83 e0 01	 and	 eax, 1
  005b5	85 c0		 test	 eax, eax
  005b7	75 1c		 jne	 SHORT $LN50@zipimporte
  005b9	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  005bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  005c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  005cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005d3	33 c0		 xor	 eax, eax
$LN50@zipimporte:
  005d5	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  005da	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005dd	c1 e8 02	 shr	 eax, 2
  005e0	83 e0 07	 and	 eax, 7
  005e3	83 f8 01	 cmp	 eax, 1
  005e6	0f 85 5a 01 00
	00		 jne	 $LN79@zipimporte
  005ec	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  005f1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  005f5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  005fb	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00600	85 c0		 test	 eax, eax
  00602	75 1c		 jne	 SHORT $LN51@zipimporte
  00604	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  0060a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00611	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00618	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0061e	33 c0		 xor	 eax, eax
$LN51@zipimporte:
  00620	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00625	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00628	c1 e8 05	 shr	 eax, 5
  0062b	83 e0 01	 and	 eax, 1
  0062e	85 c0		 test	 eax, eax
  00630	0f 84 ae 00 00
	00		 je	 $LN57@zipimporte
  00636	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0063b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0063f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00645	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0064a	85 c0		 test	 eax, eax
  0064c	75 1c		 jne	 SHORT $LN52@zipimporte
  0064e	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  00654	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0065b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00662	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00668	33 c0		 xor	 eax, eax
$LN52@zipimporte:
  0066a	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0066f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00672	c1 e8 07	 shr	 eax, 7
  00675	83 e0 01	 and	 eax, 1
  00678	85 c0		 test	 eax, eax
  0067a	75 1c		 jne	 SHORT $LN53@zipimporte
  0067c	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  00682	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00689	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00690	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00696	33 c0		 xor	 eax, eax
$LN53@zipimporte:
  00698	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0069d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006a0	c1 e8 06	 shr	 eax, 6
  006a3	83 e0 01	 and	 eax, 1
  006a6	85 c0		 test	 eax, eax
  006a8	74 15		 je	 SHORT $LN54@zipimporte
  006aa	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  006af	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  006b5	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv324[rsp], rax
  006bd	eb 13		 jmp	 SHORT $LN55@zipimporte
$LN54@zipimporte:
  006bf	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  006c4	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  006ca	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv324[rsp], rax
$LN55@zipimporte:
  006d2	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv324[rsp]
  006da	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv333[rsp], rax
  006e2	eb 3f		 jmp	 SHORT $LN58@zipimporte
$LN57@zipimporte:
  006e4	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  006e9	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  006f1	75 1c		 jne	 SHORT $LN56@zipimporte
  006f3	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  006f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00700	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@EAMONLJF@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  00707	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0070d	33 c0		 xor	 eax, eax
$LN56@zipimporte:
  0070f	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00714	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0071b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv333[rsp], rax
$LN58@zipimporte:
  00723	48 8b 44 24 40	 mov	 rax, QWORD PTR len$[rsp]
  00728	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv333[rsp]
  00730	48 03 c8	 add	 rcx, rax
  00733	48 8b c1	 mov	 rax, rcx
  00736	0f b6 40 ff	 movzx	 eax, BYTE PTR [rax-1]
  0073a	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv451[rsp], eax
  00741	e9 2b 03 00 00	 jmp	 $LN80@zipimporte
$LN79@zipimporte:
  00746	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0074b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0074f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00755	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0075a	85 c0		 test	 eax, eax
  0075c	75 1c		 jne	 SHORT $LN59@zipimporte
  0075e	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  00764	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0076b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00772	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00778	33 c0		 xor	 eax, eax
$LN59@zipimporte:
  0077a	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0077f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00782	c1 e8 07	 shr	 eax, 7
  00785	83 e0 01	 and	 eax, 1
  00788	85 c0		 test	 eax, eax
  0078a	75 1c		 jne	 SHORT $LN60@zipimporte
  0078c	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  00792	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00799	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  007a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007a6	33 c0		 xor	 eax, eax
$LN60@zipimporte:
  007a8	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  007ad	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  007b0	c1 e8 02	 shr	 eax, 2
  007b3	83 e0 07	 and	 eax, 7
  007b6	83 f8 02	 cmp	 eax, 2
  007b9	0f 85 55 01 00
	00		 jne	 $LN77@zipimporte
  007bf	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  007c4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007c8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  007ce	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  007d3	85 c0		 test	 eax, eax
  007d5	75 1c		 jne	 SHORT $LN61@zipimporte
  007d7	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  007dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  007e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  007eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007f1	33 c0		 xor	 eax, eax
$LN61@zipimporte:
  007f3	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  007f8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  007fb	c1 e8 05	 shr	 eax, 5
  007fe	83 e0 01	 and	 eax, 1
  00801	85 c0		 test	 eax, eax
  00803	0f 84 ae 00 00
	00		 je	 $LN67@zipimporte
  00809	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0080e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00812	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00818	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0081d	85 c0		 test	 eax, eax
  0081f	75 1c		 jne	 SHORT $LN62@zipimporte
  00821	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  00827	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0082e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00835	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0083b	33 c0		 xor	 eax, eax
$LN62@zipimporte:
  0083d	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00842	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00845	c1 e8 07	 shr	 eax, 7
  00848	83 e0 01	 and	 eax, 1
  0084b	85 c0		 test	 eax, eax
  0084d	75 1c		 jne	 SHORT $LN63@zipimporte
  0084f	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  00855	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0085c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00863	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00869	33 c0		 xor	 eax, eax
$LN63@zipimporte:
  0086b	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00870	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00873	c1 e8 06	 shr	 eax, 6
  00876	83 e0 01	 and	 eax, 1
  00879	85 c0		 test	 eax, eax
  0087b	74 15		 je	 SHORT $LN64@zipimporte
  0087d	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00882	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00888	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv390[rsp], rax
  00890	eb 13		 jmp	 SHORT $LN65@zipimporte
$LN64@zipimporte:
  00892	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00897	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0089d	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv390[rsp], rax
$LN65@zipimporte:
  008a5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv390[rsp]
  008ad	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv399[rsp], rax
  008b5	eb 3f		 jmp	 SHORT $LN68@zipimporte
$LN67@zipimporte:
  008b7	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  008bc	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  008c4	75 1c		 jne	 SHORT $LN66@zipimporte
  008c6	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  008cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  008d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@EAMONLJF@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  008da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008e0	33 c0		 xor	 eax, eax
$LN66@zipimporte:
  008e2	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  008e7	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  008ee	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv399[rsp], rax
$LN68@zipimporte:
  008f6	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv399[rsp]
  008fe	48 8b 4c 24 40	 mov	 rcx, QWORD PTR len$[rsp]
  00903	0f b7 44 48 fe	 movzx	 eax, WORD PTR [rax+rcx*2-2]
  00908	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv450[rsp], eax
  0090f	e9 4f 01 00 00	 jmp	 $LN78@zipimporte
$LN77@zipimporte:
  00914	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00919	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0091d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00923	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00928	85 c0		 test	 eax, eax
  0092a	75 1c		 jne	 SHORT $LN69@zipimporte
  0092c	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  00932	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00939	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00940	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00946	33 c0		 xor	 eax, eax
$LN69@zipimporte:
  00948	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0094d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00950	c1 e8 05	 shr	 eax, 5
  00953	83 e0 01	 and	 eax, 1
  00956	85 c0		 test	 eax, eax
  00958	0f 84 ae 00 00
	00		 je	 $LN75@zipimporte
  0095e	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00963	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00967	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0096d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00972	85 c0		 test	 eax, eax
  00974	75 1c		 jne	 SHORT $LN70@zipimporte
  00976	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  0097c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00983	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0098a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00990	33 c0		 xor	 eax, eax
$LN70@zipimporte:
  00992	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00997	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0099a	c1 e8 07	 shr	 eax, 7
  0099d	83 e0 01	 and	 eax, 1
  009a0	85 c0		 test	 eax, eax
  009a2	75 1c		 jne	 SHORT $LN71@zipimporte
  009a4	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  009aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  009b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  009b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009be	33 c0		 xor	 eax, eax
$LN71@zipimporte:
  009c0	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  009c5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  009c8	c1 e8 06	 shr	 eax, 6
  009cb	83 e0 01	 and	 eax, 1
  009ce	85 c0		 test	 eax, eax
  009d0	74 15		 je	 SHORT $LN72@zipimporte
  009d2	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  009d7	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  009dd	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv437[rsp], rax
  009e5	eb 13		 jmp	 SHORT $LN73@zipimporte
$LN72@zipimporte:
  009e7	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  009ec	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  009f2	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv437[rsp], rax
$LN73@zipimporte:
  009fa	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tv437[rsp]
  00a02	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv446[rsp], rax
  00a0a	eb 3f		 jmp	 SHORT $LN76@zipimporte
$LN75@zipimporte:
  00a0c	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00a11	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00a19	75 1c		 jne	 SHORT $LN74@zipimporte
  00a1b	41 b8 98 00 00
	00		 mov	 r8d, 152		; 00000098H
  00a21	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00a28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@EAMONLJF@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  00a2f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a35	33 c0		 xor	 eax, eax
$LN74@zipimporte:
  00a37	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00a3c	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00a43	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv446[rsp], rax
$LN76@zipimporte:
  00a4b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv446[rsp]
  00a53	48 8b 4c 24 40	 mov	 rcx, QWORD PTR len$[rsp]
  00a58	8b 44 88 fc	 mov	 eax, DWORD PTR [rax+rcx*4-4]
  00a5c	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv450[rsp], eax
$LN78@zipimporte:
  00a63	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR tv450[rsp]
  00a6a	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv451[rsp], eax
$LN80@zipimporte:
  00a71	83 bc 24 c0 00
	00 00 5c	 cmp	 DWORD PTR tv451[rsp], 92 ; 0000005cH
  00a79	74 4f		 je	 SHORT $LN7@zipimporte

; 153  :             /* add trailing SEP */
; 154  :             tmp = PyUnicode_FromFormat("%U%c", self->prefix, SEP);

  00a7b	41 b8 5c 00 00
	00		 mov	 r8d, 92			; 0000005cH
  00a81	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00a89	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  00a8d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LMHJOLGJ@?$CFU?$CFc?$AA@
  00a94	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00a99	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 155  :             if (tmp == NULL)

  00a9e	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00aa4	75 02		 jne	 SHORT $LN6@zipimporte

; 156  :                 goto error;

  00aa6	eb 47		 jmp	 SHORT $error$20428
$LN6@zipimporte:

; 157  :             Py_DECREF(self->prefix);

  00aa8	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00ab0	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00ab4	e8 00 00 00 00	 call	 _Py_DecRef

; 158  :             self->prefix = tmp;

  00ab9	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00ac1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  00ac6	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx
$LN7@zipimporte:

; 159  :         }
; 160  :     }
; 161  :     else

  00aca	eb 15		 jmp	 SHORT $LN5@zipimporte
$LN9@zipimporte:

; 162  :         self->prefix = PyUnicode_New(0, 0);

  00acc	33 d2		 xor	 edx, edx
  00ace	33 c9		 xor	 ecx, ecx
  00ad0	e8 00 00 00 00	 call	 PyUnicode_New
  00ad5	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00add	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
$LN5@zipimporte:

; 163  :     Py_DECREF(path);

  00ae1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  00ae6	e8 00 00 00 00	 call	 _Py_DecRef

; 164  :     return 0;

  00aeb	33 c0		 xor	 eax, eax
  00aed	eb 27		 jmp	 SHORT $LN35@zipimporte
$error$20428:

; 165  : 
; 166  : error:
; 167  :     Py_DECREF(path);

  00aef	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  00af4	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@zipimporte:

; 168  :     Py_XDECREF(filename);

  00af9	48 83 7c 24 50
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00aff	74 0a		 je	 SHORT $LN1@zipimporte
  00b01	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  00b06	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@zipimporte:
  00b0b	33 c0		 xor	 eax, eax
  00b0d	85 c0		 test	 eax, eax
  00b0f	75 e8		 jne	 SHORT $LN4@zipimporte

; 169  :     return -1;

  00b11	b8 ff ff ff ff	 mov	 eax, -1
$LN35@zipimporte:

; 170  : }

  00b16	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  00b1d	c3		 ret	 0
zipimporter_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@NIANNMO@zipimporter_traverse?$AA@	; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\zipimport.c
pdata	SEGMENT
$pdata$zipimporter_traverse DD imagerel zipimporter_traverse
	DD	imagerel zipimporter_traverse+126
	DD	imagerel $unwind$zipimporter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BF@NIANNMO@zipimporter_traverse?$AA@
CONST	SEGMENT
??_C@_0BF@NIANNMO@zipimporter_traverse?$AA@ DB 'zipimporter_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zipimporter_traverse
_TEXT	SEGMENT
self$ = 32
vret$20580 = 40
obj$ = 64
visit$ = 72
arg$ = 80
zipimporter_traverse PROC				; COMDAT

; 175  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 176  :     ZipImporter *self = (ZipImporter *)obj;

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax
$LN6@zipimporte@2:

; 177  :     Py_VISIT(self->files);

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	74 1c		 je	 SHORT $LN3@zipimporte@2
  00026	45 33 c9	 xor	 r9d, r9d
  00029	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@DCMIAMFE@?4?4?2Modules?2zipimport?4c?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@NIANNMO@zipimporter_traverse?$AA@
  0003d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@zipimporte@2:
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00047	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0004c	74 23		 je	 SHORT $LN2@zipimporte@2
  0004e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00053	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00058	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0005c	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00060	89 44 24 28	 mov	 DWORD PTR vret$20580[rsp], eax
  00064	83 7c 24 28 00	 cmp	 DWORD PTR vret$20580[rsp], 0
  00069	74 06		 je	 SHORT $LN1@zipimporte@2
  0006b	8b 44 24 28	 mov	 eax, DWORD PTR vret$20580[rsp]
  0006f	eb 08		 jmp	 SHORT $LN7@zipimporte@2
$LN1@zipimporte@2:
$LN2@zipimporte@2:
  00071	33 c0		 xor	 eax, eax
  00073	85 c0		 test	 eax, eax
  00075	75 a6		 jne	 SHORT $LN6@zipimporte@2

; 178  :     return 0;

  00077	33 c0		 xor	 eax, eax
$LN7@zipimporte@2:

; 179  : }

  00079	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007d	c3		 ret	 0
zipimporter_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipimporter_dealloc DD imagerel zipimporter_dealloc
	DD	imagerel zipimporter_dealloc+140
	DD	imagerel $unwind$zipimporter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipimporter_dealloc
_TEXT	SEGMENT
self$ = 48
zipimporter_dealloc PROC				; COMDAT

; 183  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 184  :     PyObject_GC_UnTrack(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN12@zipimporte@3:

; 185  :     Py_XDECREF(self->archive);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0001d	74 0e		 je	 SHORT $LN9@zipimporte@3
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00028	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@zipimporte@3:
  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 e0		 jne	 SHORT $LN12@zipimporte@3
$LN8@zipimporte@3:

; 186  :     Py_XDECREF(self->prefix);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00038	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0003d	74 0e		 je	 SHORT $LN5@zipimporte@3
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00044	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00048	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@zipimporte@3:
  0004d	33 c0		 xor	 eax, eax
  0004f	85 c0		 test	 eax, eax
  00051	75 e0		 jne	 SHORT $LN8@zipimporte@3
$LN4@zipimporte@3:

; 187  :     Py_XDECREF(self->files);

  00053	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00058	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0005d	74 0e		 je	 SHORT $LN1@zipimporte@3
  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00064	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00068	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@zipimporte@3:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 e0		 jne	 SHORT $LN4@zipimporte@3

; 188  :     Py_TYPE(self)->tp_free((PyObject *)self);

  00073	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00078	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00081	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 189  : }

  00087	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008b	c3		 ret	 0
zipimporter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@HMJGBKML@?$DMzipimporter?5object?5?$CC?$CFU?$CC?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BO@DEBMKMJK@?$DMzipimporter?5object?5?$CC?$CFU?$CFc?$CFU?$CC?$DO?$AA@ ; `string'
PUBLIC	??_C@_1EC@EENADNJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1DM@ODBOAOGP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BL@ILIPANBI@?$DMzipimporter?5object?5?$CC?$DP?$DP?$DP?$CC?$DO?$AA@ ; `string'
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipimporter_repr DD imagerel zipimporter_repr
	DD	imagerel zipimporter_repr+247
	DD	imagerel $unwind$zipimporter_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BK@HMJGBKML@?$DMzipimporter?5object?5?$CC?$CFU?$CC?$DO?$AA@
CONST	SEGMENT
??_C@_0BK@HMJGBKML@?$DMzipimporter?5object?5?$CC?$CFU?$CC?$DO?$AA@ DB '<z'
	DB	'ipimporter object "%U">', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DEBMKMJK@?$DMzipimporter?5object?5?$CC?$CFU?$CFc?$CFU?$CC?$DO?$AA@
CONST	SEGMENT
??_C@_0BO@DEBMKMJK@?$DMzipimporter?5object?5?$CC?$CFU?$CFc?$CFU?$CC?$DO?$AA@ DB '<'
	DB	'zipimporter object "%U%c%U">', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@EENADNJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ@
CONST	SEGMENT
??_C@_1EC@EENADNJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 's', 00H
	DB	'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'p', 00H, 'r'
	DB	00H, 'e', 00H, 'f', 00H, 'i', 00H, 'x', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@ODBOAOGP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@ODBOAOGP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H
	DB	'-', 00H, '>', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'i'
	DB	00H, 'x', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ILIPANBI@?$DMzipimporter?5object?5?$CC?$DP?$DP?$DP?$CC?$DO?$AA@
CONST	SEGMENT
??_C@_0BL@ILIPANBI@?$DMzipimporter?5object?5?$CC?$DP?$DP?$DP?$CC?$DO?$AA@ DB '<'
	DB	'zipimporter object "???">', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zipimporter_repr
_TEXT	SEGMENT
self$ = 48
zipimporter_repr PROC					; COMDAT

; 193  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 194  :     if (self->archive == NULL)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	75 16		 jne	 SHORT $LN4@zipimporte@4

; 195  :         return PyUnicode_FromString("<zipimporter object \"???\">");

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@ILIPANBI@?$DMzipimporter?5object?5?$CC?$DP?$DP?$DP?$CC?$DO?$AA@
  0001c	e8 00 00 00 00	 call	 PyUnicode_FromString
  00021	e9 cc 00 00 00	 jmp	 $LN5@zipimporte@4
  00026	e9 c7 00 00 00	 jmp	 $LN3@zipimporte@4
$LN4@zipimporte@4:

; 196  :     else if (self->prefix != NULL && PyUnicode_GET_LENGTH(self->prefix) != 0)

  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00030	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00035	0f 84 a2 00 00
	00		 je	 $LN2@zipimporte@4
  0003b	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00040	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00044	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00048	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0004e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00053	85 c0		 test	 eax, eax
  00055	75 1c		 jne	 SHORT $LN7@zipimporte@4
  00057	41 b8 c4 00 00
	00		 mov	 r8d, 196		; 000000c4H
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@ODBOAOGP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00071	33 c0		 xor	 eax, eax
$LN7@zipimporte@4:
  00073	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00078	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0007c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0007f	c1 e8 07	 shr	 eax, 7
  00082	83 e0 01	 and	 eax, 1
  00085	85 c0		 test	 eax, eax
  00087	75 1c		 jne	 SHORT $LN8@zipimporte@4
  00089	41 b8 c4 00 00
	00		 mov	 r8d, 196		; 000000c4H
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@EENADNJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ@
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a3	33 c0		 xor	 eax, eax
$LN8@zipimporte@4:
  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  000aa	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ae	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000b3	74 28		 je	 SHORT $LN2@zipimporte@4

; 197  :         return PyUnicode_FromFormat("<zipimporter object \"%U%c%U\">",
; 198  :                                     self->archive, SEP, self->prefix);

  000b5	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  000ba	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  000be	41 b8 5c 00 00
	00		 mov	 r8d, 92			; 0000005cH
  000c4	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  000c9	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@DEBMKMJK@?$DMzipimporter?5object?5?$CC?$CFU?$CFc?$CFU?$CC?$DO?$AA@
  000d4	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000d9	eb 17		 jmp	 SHORT $LN5@zipimporte@4

; 199  :     else

  000db	eb 15		 jmp	 SHORT $LN1@zipimporte@4
$LN2@zipimporte@4:

; 200  :         return PyUnicode_FromFormat("<zipimporter object \"%U\">",
; 201  :                                     self->archive);

  000dd	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  000e2	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@HMJGBKML@?$DMzipimporter?5object?5?$CC?$CFU?$CC?$DO?$AA@
  000ed	e8 00 00 00 00	 call	 PyUnicode_FromFormat
$LN1@zipimporte@4:
$LN3@zipimporte@4:
$LN5@zipimporte@4:

; 202  : }

  000f2	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000f6	c3		 ret	 0
zipimporter_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@FOJHLGJM@U?$HMO?3zipimporter?4find_module?$AA@ ; `string'
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipimporter_find_module DD imagerel zipimporter_find_module
	DD	imagerel zipimporter_find_module+198
	DD	imagerel $unwind$zipimporter_find_module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_find_module DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0BM@FOJHLGJM@U?$HMO?3zipimporter?4find_module?$AA@
CONST	SEGMENT
??_C@_0BM@FOJHLGJM@U?$HMO?3zipimporter?4find_module?$AA@ DB 'U|O:zipimpor'
	DB	'ter.find_module', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zipimporter_find_module
_TEXT	SEGMENT
self$ = 32
result$ = 40
fullname$ = 48
path$ = 56
namespace_portion$ = 64
tv74 = 72
obj$ = 96
args$ = 104
zipimporter_find_module PROC				; COMDAT

; 377  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 378  :     ZipImporter *self = (ZipImporter *)obj;

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR obj$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 379  :     PyObject *path = NULL;

  00018	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR path$[rsp], 0

; 380  :     PyObject *fullname;
; 381  :     PyObject *namespace_portion = NULL;

  00021	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR namespace_portion$[rsp], 0

; 382  :     PyObject *result = NULL;

  0002a	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 383  : 
; 384  :     if (!PyArg_ParseTuple(args, "U|O:zipimporter.find_module", &fullname, &path))

  00033	4c 8d 4c 24 38	 lea	 r9, QWORD PTR path$[rsp]
  00038	4c 8d 44 24 30	 lea	 r8, QWORD PTR fullname$[rsp]
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@FOJHLGJM@U?$HMO?3zipimporter?4find_module?$AA@
  00044	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00049	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0004e	85 c0		 test	 eax, eax
  00050	75 04		 jne	 SHORT $LN7@zipimporte@5

; 385  :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 6b		 jmp	 SHORT $LN8@zipimporte@5
$LN7@zipimporte@5:

; 386  : 
; 387  :     switch (find_loader(self, fullname, &namespace_portion)) {

  00056	4c 8d 44 24 40	 lea	 r8, QWORD PTR namespace_portion$[rsp]
  0005b	48 8b 54 24 30	 mov	 rdx, QWORD PTR fullname$[rsp]
  00060	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  00065	e8 00 00 00 00	 call	 find_loader
  0006a	89 44 24 48	 mov	 DWORD PTR tv74[rsp], eax
  0006e	83 7c 24 48 00	 cmp	 DWORD PTR tv74[rsp], 0
  00073	74 17		 je	 SHORT $LN4@zipimporte@5
  00075	83 7c 24 48 01	 cmp	 DWORD PTR tv74[rsp], 1
  0007a	74 1e		 je	 SHORT $LN2@zipimporte@5
  0007c	83 7c 24 48 02	 cmp	 DWORD PTR tv74[rsp], 2
  00081	74 25		 je	 SHORT $LN1@zipimporte@5
  00083	83 7c 24 48 03	 cmp	 DWORD PTR tv74[rsp], 3
  00088	74 06		 je	 SHORT $LN3@zipimporte@5
  0008a	eb 26		 jmp	 SHORT $LN5@zipimporte@5
$LN4@zipimporte@5:

; 388  :     case FL_ERROR:
; 389  :         return NULL;

  0008c	33 c0		 xor	 eax, eax
  0008e	eb 31		 jmp	 SHORT $LN8@zipimporte@5
$LN3@zipimporte@5:

; 390  :     case FL_NS_FOUND:
; 391  :         /* A namespace portion is not allowed via find_module, so return None. */
; 392  :         Py_DECREF(namespace_portion);

  00090	48 8b 4c 24 40	 mov	 rcx, QWORD PTR namespace_portion$[rsp]
  00095	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@zipimporte@5:

; 393  :         /* FALL THROUGH */
; 394  :     case FL_NOT_FOUND:
; 395  :         result = Py_None;

  0009a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000a1	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 396  :         break;

  000a6	eb 0a		 jmp	 SHORT $LN5@zipimporte@5
$LN1@zipimporte@5:

; 397  :     case FL_MODULE_FOUND:
; 398  :         result = (PyObject *)self;

  000a8	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  000ad	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$LN5@zipimporte@5:

; 399  :         break;
; 400  :     }
; 401  :     Py_INCREF(result);

  000b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000b7	e8 00 00 00 00	 call	 _Py_IncRef

; 402  :     return result;

  000bc	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN8@zipimporte@5:

; 403  : }

  000c1	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c5	c3		 ret	 0
zipimporter_find_module ENDP
_TEXT	ENDS
PUBLIC	??_C@_08NDALMICO@?$CFU?$CFc?$CFU?$CFU?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$find_loader DD imagerel find_loader
	DD	imagerel find_loader+217
	DD	imagerel $unwind$find_loader
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$find_loader DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_08NDALMICO@?$CFU?$CFc?$CFU?$CFU?$AA@
CONST	SEGMENT
??_C@_08NDALMICO@?$CFU?$CFc?$CFU?$CFU?$AA@ DB '%U%c%U%U', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT find_loader
_TEXT	SEGMENT
mi$ = 48
is_dir$20759 = 52
self$ = 80
fullname$ = 88
namespace_portion$ = 96
find_loader PROC					; COMDAT

; 341  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 342  :     enum zi_module_info mi;
; 343  : 
; 344  :     *namespace_portion = NULL;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR namespace_portion$[rsp]
  00018	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 345  : 
; 346  :     mi = get_module_info(self, fullname);

  0001f	48 8b 54 24 58	 mov	 rdx, QWORD PTR fullname$[rsp]
  00024	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00029	e8 00 00 00 00	 call	 get_module_info
  0002e	89 44 24 30	 mov	 DWORD PTR mi$[rsp], eax

; 347  :     if (mi == MI_ERROR)

  00032	83 7c 24 30 00	 cmp	 DWORD PTR mi$[rsp], 0
  00037	75 07		 jne	 SHORT $LN5@find_loade

; 348  :         return FL_ERROR;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 94 00 00 00	 jmp	 $LN6@find_loade
$LN5@find_loade:

; 349  :     if (mi == MI_NOT_FOUND) {

  00040	83 7c 24 30 01	 cmp	 DWORD PTR mi$[rsp], 1
  00045	0f 85 84 00 00
	00		 jne	 $LN4@find_loade

; 350  :         /* Not a module or regular package. See if this is a directory, and
; 351  :            therefore possibly a portion of a namespace package. */
; 352  :         int is_dir = check_is_directory(self, self->prefix, fullname);

  0004b	4c 8b 44 24 58	 mov	 r8, QWORD PTR fullname$[rsp]
  00050	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00055	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  00059	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0005e	e8 00 00 00 00	 call	 check_is_directory
  00063	89 44 24 34	 mov	 DWORD PTR is_dir$20759[rsp], eax

; 353  :         if (is_dir < 0)

  00067	83 7c 24 34 00	 cmp	 DWORD PTR is_dir$20759[rsp], 0
  0006c	7d 07		 jge	 SHORT $LN3@find_loade

; 354  :             return -1;

  0006e	b8 ff ff ff ff	 mov	 eax, -1
  00073	eb 5f		 jmp	 SHORT $LN6@find_loade
$LN3@find_loade:

; 355  :         if (is_dir) {

  00075	83 7c 24 34 00	 cmp	 DWORD PTR is_dir$20759[rsp], 0
  0007a	74 4c		 je	 SHORT $LN2@find_loade

; 356  :             /* This is possibly a portion of a namespace
; 357  :                package. Return the string representing its path,
; 358  :                without a trailing separator. */
; 359  :             *namespace_portion = PyUnicode_FromFormat("%U%c%U%U",
; 360  :                                                       self->archive, SEP,
; 361  :                                                       self->prefix, fullname);

  0007c	48 8b 44 24 58	 mov	 rax, QWORD PTR fullname$[rsp]
  00081	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00086	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0008b	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  0008f	41 b8 5c 00 00
	00		 mov	 r8d, 92			; 0000005cH
  00095	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0009a	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NDALMICO@?$CFU?$CFc?$CFU?$CFU?$AA@
  000a5	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR namespace_portion$[rsp]
  000af	48 89 01	 mov	 QWORD PTR [rcx], rax

; 362  :             if (*namespace_portion == NULL)

  000b2	48 8b 44 24 60	 mov	 rax, QWORD PTR namespace_portion$[rsp]
  000b7	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000bb	75 04		 jne	 SHORT $LN1@find_loade

; 363  :                 return FL_ERROR;

  000bd	33 c0		 xor	 eax, eax
  000bf	eb 13		 jmp	 SHORT $LN6@find_loade
$LN1@find_loade:

; 364  :             return FL_NS_FOUND;

  000c1	b8 03 00 00 00	 mov	 eax, 3
  000c6	eb 0c		 jmp	 SHORT $LN6@find_loade
$LN2@find_loade:

; 365  :         }
; 366  :         return FL_NOT_FOUND;

  000c8	b8 01 00 00 00	 mov	 eax, 1
  000cd	eb 05		 jmp	 SHORT $LN6@find_loade
$LN4@find_loade:

; 367  :     }
; 368  :     /* This is a module or package. */
; 369  :     return FL_MODULE_FOUND;

  000cf	b8 02 00 00 00	 mov	 eax, 2
$LN6@find_loade:

; 370  : }

  000d4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d8	c3		 ret	 0
find_loader ENDP
_TEXT	ENDS
PUBLIC	??_C@_06CGPBEMHF@?$CFU?$CFU?$CFc?$AA@		; `string'
EXTRN	PyDict_Contains:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_is_directory DD imagerel check_is_directory
	DD	imagerel check_is_directory+109
	DD	imagerel $unwind$check_is_directory
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_is_directory DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_06CGPBEMHF@?$CFU?$CFU?$CFc?$AA@
CONST	SEGMENT
??_C@_06CGPBEMHF@?$CFU?$CFU?$CFc?$AA@ DB '%U%U%c', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT check_is_directory
_TEXT	SEGMENT
res$ = 32
dirpath$ = 40
self$ = 64
prefix$ = 72
path$ = 80
check_is_directory PROC					; COMDAT

; 273  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 274  :     PyObject *dirpath;
; 275  :     int res;
; 276  : 
; 277  :     /* See if this is a "directory". If so, it's eligible to be part
; 278  :        of a namespace package. We test by seeing if the name, with an
; 279  :        appended path separator, exists. */
; 280  :     dirpath = PyUnicode_FromFormat("%U%U%c", prefix, path, SEP);

  00013	41 b9 5c 00 00
	00		 mov	 r9d, 92			; 0000005cH
  00019	4c 8b 44 24 50	 mov	 r8, QWORD PTR path$[rsp]
  0001e	48 8b 54 24 48	 mov	 rdx, QWORD PTR prefix$[rsp]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CGPBEMHF@?$CFU?$CFU?$CFc?$AA@
  0002a	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0002f	48 89 44 24 28	 mov	 QWORD PTR dirpath$[rsp], rax

; 281  :     if (dirpath == NULL)

  00034	48 83 7c 24 28
	00		 cmp	 QWORD PTR dirpath$[rsp], 0
  0003a	75 07		 jne	 SHORT $LN1@check_is_d

; 282  :         return -1;

  0003c	b8 ff ff ff ff	 mov	 eax, -1
  00041	eb 25		 jmp	 SHORT $LN2@check_is_d
$LN1@check_is_d:

; 283  :     /* If dirpath is present in self->files, we have a directory. */
; 284  :     res = PyDict_Contains(self->files, dirpath);

  00043	48 8b 54 24 28	 mov	 rdx, QWORD PTR dirpath$[rsp]
  00048	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004d	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00051	e8 00 00 00 00	 call	 PyDict_Contains
  00056	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 285  :     Py_DECREF(dirpath);

  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dirpath$[rsp]
  0005f	e8 00 00 00 00	 call	 _Py_DecRef

; 286  :     return res;

  00064	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN2@check_is_d:

; 287  : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
check_is_directory ENDP
_TEXT	ENDS
PUBLIC	??_C@_04PGLLPJDI@?$CFU?$CFs?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_module_info DD imagerel get_module_info
	DD	imagerel get_module_info+294
	DD	imagerel $unwind$get_module_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_module_info DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_04PGLLPJDI@?$CFU?$CFs?$AA@
CONST	SEGMENT
??_C@_04PGLLPJDI@?$CFU?$CFs?$AA@ DB '%U%s', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_module_info
_TEXT	SEGMENT
zso$ = 32
subname$ = 40
fullpath$ = 48
item$ = 56
path$ = 64
self$ = 96
fullname$ = 104
get_module_info PROC					; COMDAT

; 292  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 293  :     PyObject *subname;
; 294  :     PyObject *path, *fullpath, *item;
; 295  :     struct st_zip_searchorder *zso;
; 296  : 
; 297  :     subname = get_subname(fullname);

  0000e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR fullname$[rsp]
  00013	e8 00 00 00 00	 call	 get_subname
  00018	48 89 44 24 28	 mov	 QWORD PTR subname$[rsp], rax

; 298  :     if (subname == NULL)

  0001d	48 83 7c 24 28
	00		 cmp	 QWORD PTR subname$[rsp], 0
  00023	75 07		 jne	 SHORT $LN9@get_module

; 299  :         return MI_ERROR;

  00025	33 c0		 xor	 eax, eax
  00027	e9 f5 00 00 00	 jmp	 $LN10@get_module
$LN9@get_module:

; 300  : 
; 301  :     path = make_filename(self->prefix, subname);

  0002c	48 8b 54 24 28	 mov	 rdx, QWORD PTR subname$[rsp]
  00031	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00036	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0003a	e8 00 00 00 00	 call	 make_filename
  0003f	48 89 44 24 40	 mov	 QWORD PTR path$[rsp], rax

; 302  :     Py_DECREF(subname);

  00044	48 8b 4c 24 28	 mov	 rcx, QWORD PTR subname$[rsp]
  00049	e8 00 00 00 00	 call	 _Py_DecRef

; 303  :     if (path == NULL)

  0004e	48 83 7c 24 40
	00		 cmp	 QWORD PTR path$[rsp], 0
  00054	75 07		 jne	 SHORT $LN8@get_module

; 304  :         return MI_ERROR;

  00056	33 c0		 xor	 eax, eax
  00058	e9 c4 00 00 00	 jmp	 $LN10@get_module
$LN8@get_module:

; 305  : 
; 306  :     for (zso = zip_searchorder; *zso->suffix; zso++) {

  0005d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:zip_searchorder
  00064	48 89 44 24 20	 mov	 QWORD PTR zso$[rsp], rax
  00069	eb 0e		 jmp	 SHORT $LN7@get_module
$LN6@get_module:
  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR zso$[rsp]
  00070	48 83 c0 14	 add	 rax, 20
  00074	48 89 44 24 20	 mov	 QWORD PTR zso$[rsp], rax
$LN7@get_module:
  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR zso$[rsp]
  0007e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00081	85 c0		 test	 eax, eax
  00083	0f 84 89 00 00
	00		 je	 $LN5@get_module

; 307  :         fullpath = PyUnicode_FromFormat("%U%s", path, zso->suffix);

  00089	4c 8b 44 24 20	 mov	 r8, QWORD PTR zso$[rsp]
  0008e	48 8b 54 24 40	 mov	 rdx, QWORD PTR path$[rsp]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PGLLPJDI@?$CFU?$CFs?$AA@
  0009a	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0009f	48 89 44 24 30	 mov	 QWORD PTR fullpath$[rsp], rax

; 308  :         if (fullpath == NULL) {

  000a4	48 83 7c 24 30
	00		 cmp	 QWORD PTR fullpath$[rsp], 0
  000aa	75 0e		 jne	 SHORT $LN4@get_module

; 309  :             Py_DECREF(path);

  000ac	48 8b 4c 24 40	 mov	 rcx, QWORD PTR path$[rsp]
  000b1	e8 00 00 00 00	 call	 _Py_DecRef

; 310  :             return MI_ERROR;

  000b6	33 c0		 xor	 eax, eax
  000b8	eb 67		 jmp	 SHORT $LN10@get_module
$LN4@get_module:

; 311  :         }
; 312  :         item = PyDict_GetItem(self->files, fullpath);

  000ba	48 8b 54 24 30	 mov	 rdx, QWORD PTR fullpath$[rsp]
  000bf	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000c4	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000c8	e8 00 00 00 00	 call	 PyDict_GetItem
  000cd	48 89 44 24 38	 mov	 QWORD PTR item$[rsp], rax

; 313  :         Py_DECREF(fullpath);

  000d2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fullpath$[rsp]
  000d7	e8 00 00 00 00	 call	 _Py_DecRef

; 314  :         if (item != NULL) {

  000dc	48 83 7c 24 38
	00		 cmp	 QWORD PTR item$[rsp], 0
  000e2	74 29		 je	 SHORT $LN3@get_module

; 315  :             Py_DECREF(path);

  000e4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR path$[rsp]
  000e9	e8 00 00 00 00	 call	 _Py_DecRef

; 316  :             if (zso->type & IS_PACKAGE)

  000ee	48 8b 44 24 20	 mov	 rax, QWORD PTR zso$[rsp]
  000f3	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000f6	83 e0 02	 and	 eax, 2
  000f9	85 c0		 test	 eax, eax
  000fb	74 09		 je	 SHORT $LN2@get_module

; 317  :                 return MI_PACKAGE;

  000fd	b8 03 00 00 00	 mov	 eax, 3
  00102	eb 1d		 jmp	 SHORT $LN10@get_module

; 318  :             else

  00104	eb 07		 jmp	 SHORT $LN1@get_module
$LN2@get_module:

; 319  :                 return MI_MODULE;

  00106	b8 02 00 00 00	 mov	 eax, 2
  0010b	eb 14		 jmp	 SHORT $LN10@get_module
$LN1@get_module:
$LN3@get_module:

; 320  :         }
; 321  :     }

  0010d	e9 59 ff ff ff	 jmp	 $LN6@get_module
$LN5@get_module:

; 322  :     Py_DECREF(path);

  00112	48 8b 4c 24 40	 mov	 rcx, QWORD PTR path$[rsp]
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 323  :     return MI_NOT_FOUND;

  0011c	b8 01 00 00 00	 mov	 eax, 1
$LN10@get_module:

; 324  : }

  00121	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00125	c3		 ret	 0
get_module_info ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DK@FMNANCJK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAu?$AAl?$AAl?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@HGIMEGBD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAu?$AAl?$AAl?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_subname DD imagerel get_subname
	DD	imagerel get_subname+323
	DD	imagerel $unwind$get_subname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_subname DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_1DK@FMNANCJK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAu?$AAl?$AAl?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@FMNANCJK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAu?$AAl?$AAl?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'f', 00H
	DB	'u', 00H, 'l', 00H, 'l', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@HGIMEGBD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAu?$AAl?$AAl?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@HGIMEGBD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAu?$AAl?$AAl?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'f', 00H, 'u', 00H, 'l', 00H, 'l', 00H
	DB	'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_subname
_TEXT	SEGMENT
dot$ = 48
len$ = 56
tv78 = 64
fullname$ = 96
get_subname PROC					; COMDAT

; 207  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 208  :     Py_ssize_t len, dot;
; 209  :     if (PyUnicode_READY(fullname) < 0)

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR fullname$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00018	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0001d	85 c0		 test	 eax, eax
  0001f	75 1c		 jne	 SHORT $LN6@get_subnam
  00021	41 b8 d1 00 00
	00		 mov	 r8d, 209		; 000000d1H
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@HGIMEGBD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAu?$AAl?$AAl?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003b	33 c0		 xor	 eax, eax
$LN6@get_subnam:
  0003d	48 8b 44 24 60	 mov	 rax, QWORD PTR fullname$[rsp]
  00042	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00045	c1 e8 07	 shr	 eax, 7
  00048	83 e0 01	 and	 eax, 1
  0004b	85 c0		 test	 eax, eax
  0004d	74 0a		 je	 SHORT $LN7@get_subnam
  0004f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
  00057	eb 0e		 jmp	 SHORT $LN8@get_subnam
$LN7@get_subnam:
  00059	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fullname$[rsp]
  0005e	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00063	89 44 24 40	 mov	 DWORD PTR tv78[rsp], eax
$LN8@get_subnam:
  00067	83 7c 24 40 00	 cmp	 DWORD PTR tv78[rsp], 0
  0006c	7d 07		 jge	 SHORT $LN3@get_subnam

; 210  :         return NULL;

  0006e	33 c0		 xor	 eax, eax
  00070	e9 c9 00 00 00	 jmp	 $LN4@get_subnam
$LN3@get_subnam:

; 211  :     len = PyUnicode_GET_LENGTH(fullname);

  00075	48 8b 44 24 60	 mov	 rax, QWORD PTR fullname$[rsp]
  0007a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00084	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00089	85 c0		 test	 eax, eax
  0008b	75 1c		 jne	 SHORT $LN9@get_subnam
  0008d	41 b8 d3 00 00
	00		 mov	 r8d, 211		; 000000d3H
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@HGIMEGBD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAu?$AAl?$AAl?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a7	33 c0		 xor	 eax, eax
$LN9@get_subnam:
  000a9	48 8b 44 24 60	 mov	 rax, QWORD PTR fullname$[rsp]
  000ae	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000b1	c1 e8 07	 shr	 eax, 7
  000b4	83 e0 01	 and	 eax, 1
  000b7	85 c0		 test	 eax, eax
  000b9	75 1c		 jne	 SHORT $LN10@get_subnam
  000bb	41 b8 d3 00 00
	00		 mov	 r8d, 211		; 000000d3H
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@FMNANCJK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAu?$AAl?$AAl?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d5	33 c0		 xor	 eax, eax
$LN10@get_subnam:
  000d7	48 8b 44 24 60	 mov	 rax, QWORD PTR fullname$[rsp]
  000dc	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000e0	48 89 44 24 38	 mov	 QWORD PTR len$[rsp], rax

; 212  :     dot = PyUnicode_FindChar(fullname, '.', 0, len, -1);

  000e5	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  000ed	4c 8b 4c 24 38	 mov	 r9, QWORD PTR len$[rsp]
  000f2	45 33 c0	 xor	 r8d, r8d
  000f5	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  000fa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fullname$[rsp]
  000ff	e8 00 00 00 00	 call	 PyUnicode_FindChar
  00104	48 89 44 24 30	 mov	 QWORD PTR dot$[rsp], rax

; 213  :     if (dot == -1) {

  00109	48 83 7c 24 30
	ff		 cmp	 QWORD PTR dot$[rsp], -1
  0010f	75 13		 jne	 SHORT $LN2@get_subnam

; 214  :         Py_INCREF(fullname);

  00111	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fullname$[rsp]
  00116	e8 00 00 00 00	 call	 _Py_IncRef

; 215  :         return fullname;

  0011b	48 8b 44 24 60	 mov	 rax, QWORD PTR fullname$[rsp]
  00120	eb 1c		 jmp	 SHORT $LN4@get_subnam

; 216  :     } else

  00122	eb 1a		 jmp	 SHORT $LN1@get_subnam
$LN2@get_subnam:

; 217  :         return PyUnicode_Substring(fullname, dot+1, len);

  00124	48 8b 44 24 30	 mov	 rax, QWORD PTR dot$[rsp]
  00129	48 ff c0	 inc	 rax
  0012c	4c 8b 44 24 38	 mov	 r8, QWORD PTR len$[rsp]
  00131	48 8b d0	 mov	 rdx, rax
  00134	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fullname$[rsp]
  00139	e8 00 00 00 00	 call	 PyUnicode_Substring
$LN1@get_subnam:
$LN4@get_subnam:

; 218  : }

  0013e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00142	c3		 ret	 0
get_subname ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@LDMCEAJF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@CIIODLEP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyUnicode_FromKindAndData:PROC
EXTRN	PyMem_Free:PROC
EXTRN	PyUnicode_AsUCS4:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_filename DD imagerel make_filename
	DD	imagerel make_filename+736
	DD	imagerel $unwind$make_filename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_filename DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'n', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@LDMCEAJF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@LDMCEAJF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'p', 00H
	DB	'r', 00H, 'e', 00H, 'f', 00H, 'i', 00H, 'x', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@CIIODLEP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@CIIODLEP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'x', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT make_filename
_TEXT	SEGMENT
p$ = 32
pathobj$ = 40
len$ = 48
buf$ = 56
prefix$ = 80
name$ = 88
make_filename PROC					; COMDAT

; 227  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 228  :     PyObject *pathobj;
; 229  :     Py_UCS4 *p, *buf;
; 230  :     Py_ssize_t len;
; 231  : 
; 232  :     len = PyUnicode_GET_LENGTH(prefix) + PyUnicode_GET_LENGTH(name) + 1;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR prefix$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00022	85 c0		 test	 eax, eax
  00024	75 1c		 jne	 SHORT $LN10@make_filen
  00026	41 b8 e8 00 00
	00		 mov	 r8d, 232		; 000000e8H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@CIIODLEP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00040	33 c0		 xor	 eax, eax
$LN10@make_filen:
  00042	48 8b 44 24 50	 mov	 rax, QWORD PTR prefix$[rsp]
  00047	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0004a	c1 e8 07	 shr	 eax, 7
  0004d	83 e0 01	 and	 eax, 1
  00050	85 c0		 test	 eax, eax
  00052	75 1c		 jne	 SHORT $LN11@make_filen
  00054	41 b8 e8 00 00
	00		 mov	 r8d, 232		; 000000e8H
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@LDMCEAJF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006e	33 c0		 xor	 eax, eax
$LN11@make_filen:
  00070	48 8b 44 24 58	 mov	 rax, QWORD PTR name$[rsp]
  00075	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00079	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0007f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00084	85 c0		 test	 eax, eax
  00086	75 1c		 jne	 SHORT $LN12@make_filen
  00088	41 b8 e8 00 00
	00		 mov	 r8d, 232		; 000000e8H
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a2	33 c0		 xor	 eax, eax
$LN12@make_filen:
  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR name$[rsp]
  000a9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000ac	c1 e8 07	 shr	 eax, 7
  000af	83 e0 01	 and	 eax, 1
  000b2	85 c0		 test	 eax, eax
  000b4	75 1c		 jne	 SHORT $LN13@make_filen
  000b6	41 b8 e8 00 00
	00		 mov	 r8d, 232		; 000000e8H
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d0	33 c0		 xor	 eax, eax
$LN13@make_filen:
  000d2	48 8b 44 24 50	 mov	 rax, QWORD PTR prefix$[rsp]
  000d7	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000db	48 8b 4c 24 58	 mov	 rcx, QWORD PTR name$[rsp]
  000e0	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000e4	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  000e9	48 89 44 24 30	 mov	 QWORD PTR len$[rsp], rax

; 233  :     p = buf = PyMem_Malloc(sizeof(Py_UCS4) * len);

  000ee	48 8b 44 24 30	 mov	 rax, QWORD PTR len$[rsp]
  000f3	48 c1 e0 02	 shl	 rax, 2
  000f7	48 8b c8	 mov	 rcx, rax
  000fa	e8 00 00 00 00	 call	 PyMem_Malloc
  000ff	48 89 44 24 38	 mov	 QWORD PTR buf$[rsp], rax
  00104	48 8b 44 24 38	 mov	 rax, QWORD PTR buf$[rsp]
  00109	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 234  :     if (buf == NULL) {

  0010e	48 83 7c 24 38
	00		 cmp	 QWORD PTR buf$[rsp], 0
  00114	75 0c		 jne	 SHORT $LN7@make_filen

; 235  :         PyErr_NoMemory();

  00116	e8 00 00 00 00	 call	 PyErr_NoMemory

; 236  :         return NULL;

  0011b	33 c0		 xor	 eax, eax
  0011d	e9 b9 01 00 00	 jmp	 $LN8@make_filen
$LN7@make_filen:

; 237  :     }
; 238  : 
; 239  :     if (!PyUnicode_AsUCS4(prefix, p, len, 0)) {

  00122	45 33 c9	 xor	 r9d, r9d
  00125	4c 8b 44 24 30	 mov	 r8, QWORD PTR len$[rsp]
  0012a	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  0012f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR prefix$[rsp]
  00134	e8 00 00 00 00	 call	 PyUnicode_AsUCS4
  00139	48 85 c0	 test	 rax, rax
  0013c	75 11		 jne	 SHORT $LN6@make_filen

; 240  :         PyMem_Free(buf);

  0013e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR buf$[rsp]
  00143	e8 00 00 00 00	 call	 PyMem_Free

; 241  :         return NULL;

  00148	33 c0		 xor	 eax, eax
  0014a	e9 8c 01 00 00	 jmp	 $LN8@make_filen
$LN6@make_filen:

; 242  :     }
; 243  :     p += PyUnicode_GET_LENGTH(prefix);

  0014f	48 8b 44 24 50	 mov	 rax, QWORD PTR prefix$[rsp]
  00154	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00158	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0015e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00163	85 c0		 test	 eax, eax
  00165	75 1c		 jne	 SHORT $LN14@make_filen
  00167	41 b8 f3 00 00
	00		 mov	 r8d, 243		; 000000f3H
  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@CIIODLEP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00181	33 c0		 xor	 eax, eax
$LN14@make_filen:
  00183	48 8b 44 24 50	 mov	 rax, QWORD PTR prefix$[rsp]
  00188	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0018b	c1 e8 07	 shr	 eax, 7
  0018e	83 e0 01	 and	 eax, 1
  00191	85 c0		 test	 eax, eax
  00193	75 1c		 jne	 SHORT $LN15@make_filen
  00195	41 b8 f3 00 00
	00		 mov	 r8d, 243		; 000000f3H
  0019b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  001a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@LDMCEAJF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@
  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001af	33 c0		 xor	 eax, eax
$LN15@make_filen:
  001b1	48 8b 44 24 50	 mov	 rax, QWORD PTR prefix$[rsp]
  001b6	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001ba	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  001bf	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  001c3	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 244  :     len -= PyUnicode_GET_LENGTH(prefix);

  001c8	48 8b 44 24 50	 mov	 rax, QWORD PTR prefix$[rsp]
  001cd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001d1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001d7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001dc	85 c0		 test	 eax, eax
  001de	75 1c		 jne	 SHORT $LN16@make_filen
  001e0	41 b8 f4 00 00
	00		 mov	 r8d, 244		; 000000f4H
  001e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  001ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@CIIODLEP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@
  001f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001fa	33 c0		 xor	 eax, eax
$LN16@make_filen:
  001fc	48 8b 44 24 50	 mov	 rax, QWORD PTR prefix$[rsp]
  00201	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00204	c1 e8 07	 shr	 eax, 7
  00207	83 e0 01	 and	 eax, 1
  0020a	85 c0		 test	 eax, eax
  0020c	75 1c		 jne	 SHORT $LN17@make_filen
  0020e	41 b8 f4 00 00
	00		 mov	 r8d, 244		; 000000f4H
  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0021b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@LDMCEAJF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAr?$AAe?$AAf?$AAi?$AAx?$AA?$CJ?$AA?$AA@
  00222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00228	33 c0		 xor	 eax, eax
$LN17@make_filen:
  0022a	48 8b 44 24 50	 mov	 rax, QWORD PTR prefix$[rsp]
  0022f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00233	48 8b 4c 24 30	 mov	 rcx, QWORD PTR len$[rsp]
  00238	48 2b c8	 sub	 rcx, rax
  0023b	48 8b c1	 mov	 rax, rcx
  0023e	48 89 44 24 30	 mov	 QWORD PTR len$[rsp], rax

; 245  :     if (!PyUnicode_AsUCS4(name, p, len, 1)) {

  00243	41 b9 01 00 00
	00		 mov	 r9d, 1
  00249	4c 8b 44 24 30	 mov	 r8, QWORD PTR len$[rsp]
  0024e	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  00253	48 8b 4c 24 58	 mov	 rcx, QWORD PTR name$[rsp]
  00258	e8 00 00 00 00	 call	 PyUnicode_AsUCS4
  0025d	48 85 c0	 test	 rax, rax
  00260	75 0e		 jne	 SHORT $LN5@make_filen

; 246  :         PyMem_Free(buf);

  00262	48 8b 4c 24 38	 mov	 rcx, QWORD PTR buf$[rsp]
  00267	e8 00 00 00 00	 call	 PyMem_Free

; 247  :         return NULL;

  0026c	33 c0		 xor	 eax, eax
  0026e	eb 6b		 jmp	 SHORT $LN8@make_filen
$LN5@make_filen:

; 248  :     }
; 249  :     for (; *p; p++) {

  00270	eb 0e		 jmp	 SHORT $LN4@make_filen
$LN3@make_filen:
  00272	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00277	48 83 c0 04	 add	 rax, 4
  0027b	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN4@make_filen:
  00280	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00285	83 38 00	 cmp	 DWORD PTR [rax], 0
  00288	74 17		 je	 SHORT $LN2@make_filen

; 250  :         if (*p == '.')

  0028a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0028f	83 38 2e	 cmp	 DWORD PTR [rax], 46	; 0000002eH
  00292	75 0b		 jne	 SHORT $LN1@make_filen

; 251  :             *p = SEP;

  00294	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00299	c7 00 5c 00 00
	00		 mov	 DWORD PTR [rax], 92	; 0000005cH
$LN1@make_filen:

; 252  :     }

  0029f	eb d1		 jmp	 SHORT $LN3@make_filen
$LN2@make_filen:

; 253  :     pathobj = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND,
; 254  :                                         buf, p-buf);

  002a1	48 8b 44 24 38	 mov	 rax, QWORD PTR buf$[rsp]
  002a6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  002ab	48 2b c8	 sub	 rcx, rax
  002ae	48 8b c1	 mov	 rax, rcx
  002b1	48 c1 f8 02	 sar	 rax, 2
  002b5	4c 8b c0	 mov	 r8, rax
  002b8	48 8b 54 24 38	 mov	 rdx, QWORD PTR buf$[rsp]
  002bd	b9 04 00 00 00	 mov	 ecx, 4
  002c2	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
  002c7	48 89 44 24 28	 mov	 QWORD PTR pathobj$[rsp], rax

; 255  :     PyMem_Free(buf);

  002cc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR buf$[rsp]
  002d1	e8 00 00 00 00	 call	 PyMem_Free

; 256  :     return pathobj;

  002d6	48 8b 44 24 28	 mov	 rax, QWORD PTR pathobj$[rsp]
$LN8@make_filen:

; 257  : }

  002db	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002df	c3		 ret	 0
make_filename ENDP
_TEXT	ENDS
PUBLIC	??_C@_04ILKBKGDN@O?$FLO?$FN?$AA@		; `string'
PUBLIC	??_C@_03HCDAIKMA@O?$FL?$FN?$AA@			; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipimporter_find_loader DD imagerel zipimporter_find_loader
	DD	imagerel zipimporter_find_loader+253
	DD	imagerel $unwind$zipimporter_find_loader
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_find_loader DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_04ILKBKGDN@O?$FLO?$FN?$AA@
CONST	SEGMENT
??_C@_04ILKBKGDN@O?$FLO?$FN?$AA@ DB 'O[O]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HCDAIKMA@O?$FL?$FN?$AA@
CONST	SEGMENT
??_C@_03HCDAIKMA@O?$FL?$FN?$AA@ DB 'O[]', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zipimporter_find_loader
_TEXT	SEGMENT
self$ = 32
result$ = 40
fullname$ = 48
path$ = 56
namespace_portion$ = 64
tv74 = 72
obj$ = 96
args$ = 104
zipimporter_find_loader PROC				; COMDAT

; 413  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 414  :     ZipImporter *self = (ZipImporter *)obj;

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR obj$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 415  :     PyObject *path = NULL;

  00018	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR path$[rsp], 0

; 416  :     PyObject *fullname;
; 417  :     PyObject *result = NULL;

  00021	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 418  :     PyObject *namespace_portion = NULL;

  0002a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR namespace_portion$[rsp], 0

; 419  : 
; 420  :     if (!PyArg_ParseTuple(args, "U|O:zipimporter.find_module", &fullname, &path))

  00033	4c 8d 4c 24 38	 lea	 r9, QWORD PTR path$[rsp]
  00038	4c 8d 44 24 30	 lea	 r8, QWORD PTR fullname$[rsp]
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@FOJHLGJM@U?$HMO?3zipimporter?4find_module?$AA@
  00044	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00049	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0004e	85 c0		 test	 eax, eax
  00050	75 07		 jne	 SHORT $LN7@zipimporte@6

; 421  :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	e9 9f 00 00 00	 jmp	 $LN8@zipimporte@6
$LN7@zipimporte@6:

; 422  : 
; 423  :     switch (find_loader(self, fullname, &namespace_portion)) {

  00059	4c 8d 44 24 40	 lea	 r8, QWORD PTR namespace_portion$[rsp]
  0005e	48 8b 54 24 30	 mov	 rdx, QWORD PTR fullname$[rsp]
  00063	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  00068	e8 00 00 00 00	 call	 find_loader
  0006d	89 44 24 48	 mov	 DWORD PTR tv74[rsp], eax
  00071	83 7c 24 48 00	 cmp	 DWORD PTR tv74[rsp], 0
  00076	74 17		 je	 SHORT $LN4@zipimporte@6
  00078	83 7c 24 48 01	 cmp	 DWORD PTR tv74[rsp], 1
  0007d	74 14		 je	 SHORT $LN3@zipimporte@6
  0007f	83 7c 24 48 02	 cmp	 DWORD PTR tv74[rsp], 2
  00084	74 27		 je	 SHORT $LN2@zipimporte@6
  00086	83 7c 24 48 03	 cmp	 DWORD PTR tv74[rsp], 3
  0008b	74 38		 je	 SHORT $LN1@zipimporte@6
  0008d	eb 64		 jmp	 SHORT $LN5@zipimporte@6
$LN4@zipimporte@6:

; 424  :     case FL_ERROR:
; 425  :         return NULL;

  0008f	33 c0		 xor	 eax, eax
  00091	eb 65		 jmp	 SHORT $LN8@zipimporte@6
$LN3@zipimporte@6:

; 426  :     case FL_NOT_FOUND:        /* Not found, return (None, []) */
; 427  :         result = Py_BuildValue("O[]", Py_None);

  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03HCDAIKMA@O?$FL?$FN?$AA@
  000a1	e8 00 00 00 00	 call	 Py_BuildValue
  000a6	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 428  :         break;

  000ab	eb 46		 jmp	 SHORT $LN5@zipimporte@6
$LN2@zipimporte@6:

; 429  :     case FL_MODULE_FOUND:     /* Return (self, []) */
; 430  :         result = Py_BuildValue("O[]", self);

  000ad	48 8b 54 24 20	 mov	 rdx, QWORD PTR self$[rsp]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03HCDAIKMA@O?$FL?$FN?$AA@
  000b9	e8 00 00 00 00	 call	 Py_BuildValue
  000be	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 431  :         break;

  000c3	eb 2e		 jmp	 SHORT $LN5@zipimporte@6
$LN1@zipimporte@6:

; 432  :     case FL_NS_FOUND:         /* Return (None, [namespace_portion]) */
; 433  :         result = Py_BuildValue("O[O]", Py_None, namespace_portion);

  000c5	4c 8b 44 24 40	 mov	 r8, QWORD PTR namespace_portion$[rsp]
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04ILKBKGDN@O?$FLO?$FN?$AA@
  000d8	e8 00 00 00 00	 call	 Py_BuildValue
  000dd	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 434  :         Py_DECREF(namespace_portion);

  000e2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR namespace_portion$[rsp]
  000e7	e8 00 00 00 00	 call	 _Py_DecRef

; 435  :         return result;

  000ec	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  000f1	eb 05		 jmp	 SHORT $LN8@zipimporte@6
$LN5@zipimporte@6:

; 436  :     }
; 437  :     return result;

  000f3	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN8@zipimporte@6:

; 438  : }

  000f8	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000fc	c3		 ret	 0
zipimporter_find_loader ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@JMKOBLEO@import?5?$CFU?5?$CD?5loaded?5from?5Zip?5?$CFU?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@GGBGEOMG@zipimporter_load_module?$AA@	; `string'
PUBLIC	??_C@_08LPNIDJLN@__path__?$AA@			; `string'
PUBLIC	??_C@_03LHKGCLJD@?$FLN?$FN?$AA@			; `string'
PUBLIC	??_C@_0L@PADOMILC@__loader__?$AA@		; `string'
PUBLIC	??_C@_0BK@PKAMEPJP@U?3zipimporter?4load_module?$AA@ ; `string'
EXTRN	PySys_FormatStderr:PROC
EXTRN	Py_VerboseFlag:DWORD
EXTRN	PyImport_ExecCodeModuleObject:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyImport_AddModuleObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipimporter_load_module DD imagerel zipimporter_load_module
	DD	imagerel zipimporter_load_module+742
	DD	imagerel $unwind$zipimporter_load_module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_load_module DD 021101H
	DD	0150111H
xdata	ENDS
;	COMDAT ??_C@_0CA@JMKOBLEO@import?5?$CFU?5?$CD?5loaded?5from?5Zip?5?$CFU?6?$AA@
CONST	SEGMENT
??_C@_0CA@JMKOBLEO@import?5?$CFU?5?$CD?5loaded?5from?5Zip?5?$CFU?6?$AA@ DB 'i'
	DB	'mport %U # loaded from Zip %U', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GGBGEOMG@zipimporter_load_module?$AA@
CONST	SEGMENT
??_C@_0BI@GGBGEOMG@zipimporter_load_module?$AA@ DB 'zipimporter_load_modu'
	DB	'le', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPNIDJLN@__path__?$AA@
CONST	SEGMENT
??_C@_08LPNIDJLN@__path__?$AA@ DB '__path__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LHKGCLJD@?$FLN?$FN?$AA@
CONST	SEGMENT
??_C@_03LHKGCLJD@?$FLN?$FN?$AA@ DB '[N]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PADOMILC@__loader__?$AA@
CONST	SEGMENT
??_C@_0L@PADOMILC@__loader__?$AA@ DB '__loader__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PKAMEPJP@U?3zipimporter?4load_module?$AA@
CONST	SEGMENT
??_C@_0BK@PKAMEPJP@U?3zipimporter?4load_module?$AA@ DB 'U:zipimporter.loa'
	DB	'd_module', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zipimporter_load_module
_TEXT	SEGMENT
ispackage$ = 48
modpath$ = 56
dict$ = 64
code$ = 72
self$ = 80
fullname$ = 88
mod$ = 96
subname$20860 = 104
fullpath$20859 = 112
pkgpath$20858 = 120
err$20861 = 128
_py_tmp$20877 = 136
tv83 = 144
obj$ = 176
args$ = 184
zipimporter_load_module PROC				; COMDAT

; 443  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 444  :     ZipImporter *self = (ZipImporter *)obj;

  00011	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00019	48 89 44 24 50	 mov	 QWORD PTR self$[rsp], rax

; 445  :     PyObject *code = NULL, *mod, *dict;

  0001e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR code$[rsp], 0

; 446  :     PyObject *fullname;
; 447  :     PyObject *modpath = NULL;

  00027	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR modpath$[rsp], 0

; 448  :     int ispackage;
; 449  : 
; 450  :     if (!PyArg_ParseTuple(args, "U:zipimporter.load_module",
; 451  :                           &fullname))

  00030	4c 8d 44 24 58	 lea	 r8, QWORD PTR fullname$[rsp]
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PKAMEPJP@U?3zipimporter?4load_module?$AA@
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00044	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00049	85 c0		 test	 eax, eax
  0004b	75 07		 jne	 SHORT $LN23@zipimporte@7

; 452  :         return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	e9 8a 02 00 00	 jmp	 $LN24@zipimporte@7
$LN23@zipimporte@7:

; 453  :     if (PyUnicode_READY(fullname) == -1)

  00054	48 8b 44 24 58	 mov	 rax, QWORD PTR fullname$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN26@zipimporte@7
  0006c	41 b8 c5 01 00
	00		 mov	 r8d, 453		; 000001c5H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@HGIMEGBD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAu?$AAl?$AAl?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN26@zipimporte@7:
  00088	48 8b 44 24 58	 mov	 rax, QWORD PTR fullname$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0d		 je	 SHORT $LN27@zipimporte@7
  0009a	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv83[rsp], 0
  000a5	eb 11		 jmp	 SHORT $LN28@zipimporte@7
$LN27@zipimporte@7:
  000a7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR fullname$[rsp]
  000ac	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000b1	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv83[rsp], eax
$LN28@zipimporte@7:
  000b8	83 bc 24 90 00
	00 00 ff	 cmp	 DWORD PTR tv83[rsp], -1
  000c0	75 07		 jne	 SHORT $LN22@zipimporte@7

; 454  :         return NULL;

  000c2	33 c0		 xor	 eax, eax
  000c4	e9 15 02 00 00	 jmp	 $LN24@zipimporte@7
$LN22@zipimporte@7:

; 455  : 
; 456  :     code = get_module_code(self, fullname, &ispackage, &modpath);

  000c9	4c 8d 4c 24 38	 lea	 r9, QWORD PTR modpath$[rsp]
  000ce	4c 8d 44 24 30	 lea	 r8, QWORD PTR ispackage$[rsp]
  000d3	48 8b 54 24 58	 mov	 rdx, QWORD PTR fullname$[rsp]
  000d8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000dd	e8 00 00 00 00	 call	 get_module_code
  000e2	48 89 44 24 48	 mov	 QWORD PTR code$[rsp], rax

; 457  :     if (code == NULL)

  000e7	48 83 7c 24 48
	00		 cmp	 QWORD PTR code$[rsp], 0
  000ed	75 05		 jne	 SHORT $LN21@zipimporte@7

; 458  :         goto error;

  000ef	e9 b8 01 00 00	 jmp	 $error$20851
$LN21@zipimporte@7:

; 459  : 
; 460  :     mod = PyImport_AddModuleObject(fullname);

  000f4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR fullname$[rsp]
  000f9	e8 00 00 00 00	 call	 PyImport_AddModuleObject
  000fe	48 89 44 24 60	 mov	 QWORD PTR mod$[rsp], rax

; 461  :     if (mod == NULL)

  00103	48 83 7c 24 60
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00109	75 05		 jne	 SHORT $LN20@zipimporte@7

; 462  :         goto error;

  0010b	e9 9c 01 00 00	 jmp	 $error$20851
$LN20@zipimporte@7:

; 463  :     dict = PyModule_GetDict(mod);

  00110	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mod$[rsp]
  00115	e8 00 00 00 00	 call	 PyModule_GetDict
  0011a	48 89 44 24 40	 mov	 QWORD PTR dict$[rsp], rax

; 464  : 
; 465  :     /* mod.__loader__ = self */
; 466  :     if (PyDict_SetItemString(dict, "__loader__", (PyObject *)self) != 0)

  0011f	4c 8b 44 24 50	 mov	 r8, QWORD PTR self$[rsp]
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PADOMILC@__loader__?$AA@
  0012b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dict$[rsp]
  00130	e8 00 00 00 00	 call	 PyDict_SetItemString
  00135	85 c0		 test	 eax, eax
  00137	74 05		 je	 SHORT $LN19@zipimporte@7

; 467  :         goto error;

  00139	e9 6e 01 00 00	 jmp	 $error$20851
$LN19@zipimporte@7:

; 468  : 
; 469  :     if (ispackage) {

  0013e	83 7c 24 30 00	 cmp	 DWORD PTR ispackage$[rsp], 0
  00143	0f 84 b2 00 00
	00		 je	 $LN18@zipimporte@7

; 470  :         /* add __path__ to the module *before* the code gets
; 471  :            executed */
; 472  :         PyObject *pkgpath, *fullpath;
; 473  :         PyObject *subname = get_subname(fullname);

  00149	48 8b 4c 24 58	 mov	 rcx, QWORD PTR fullname$[rsp]
  0014e	e8 00 00 00 00	 call	 get_subname
  00153	48 89 44 24 68	 mov	 QWORD PTR subname$20860[rsp], rax

; 474  :         int err;
; 475  : 
; 476  :         fullpath = PyUnicode_FromFormat("%U%c%U%U",
; 477  :                                 self->archive, SEP,
; 478  :                                 self->prefix, subname);

  00158	48 8b 44 24 68	 mov	 rax, QWORD PTR subname$20860[rsp]
  0015d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00162	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00167	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  0016b	41 b8 5c 00 00
	00		 mov	 r8d, 92			; 0000005cH
  00171	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00176	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NDALMICO@?$CFU?$CFc?$CFU?$CFU?$AA@
  00181	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00186	48 89 44 24 70	 mov	 QWORD PTR fullpath$20859[rsp], rax

; 479  :         Py_DECREF(subname);

  0018b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR subname$20860[rsp]
  00190	e8 00 00 00 00	 call	 _Py_DecRef

; 480  :         if (fullpath == NULL)

  00195	48 83 7c 24 70
	00		 cmp	 QWORD PTR fullpath$20859[rsp], 0
  0019b	75 05		 jne	 SHORT $LN17@zipimporte@7

; 481  :             goto error;

  0019d	e9 0a 01 00 00	 jmp	 $error$20851
$LN17@zipimporte@7:

; 482  : 
; 483  :         pkgpath = Py_BuildValue("[N]", fullpath);

  001a2	48 8b 54 24 70	 mov	 rdx, QWORD PTR fullpath$20859[rsp]
  001a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03LHKGCLJD@?$FLN?$FN?$AA@
  001ae	e8 00 00 00 00	 call	 Py_BuildValue
  001b3	48 89 44 24 78	 mov	 QWORD PTR pkgpath$20858[rsp], rax

; 484  :         if (pkgpath == NULL)

  001b8	48 83 7c 24 78
	00		 cmp	 QWORD PTR pkgpath$20858[rsp], 0
  001be	75 05		 jne	 SHORT $LN16@zipimporte@7

; 485  :             goto error;

  001c0	e9 e7 00 00 00	 jmp	 $error$20851
$LN16@zipimporte@7:

; 486  :         err = PyDict_SetItemString(dict, "__path__", pkgpath);

  001c5	4c 8b 44 24 78	 mov	 r8, QWORD PTR pkgpath$20858[rsp]
  001ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LPNIDJLN@__path__?$AA@
  001d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dict$[rsp]
  001d6	e8 00 00 00 00	 call	 PyDict_SetItemString
  001db	89 84 24 80 00
	00 00		 mov	 DWORD PTR err$20861[rsp], eax

; 487  :         Py_DECREF(pkgpath);

  001e2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pkgpath$20858[rsp]
  001e7	e8 00 00 00 00	 call	 _Py_DecRef

; 488  :         if (err != 0)

  001ec	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR err$20861[rsp], 0
  001f4	74 05		 je	 SHORT $LN15@zipimporte@7

; 489  :             goto error;

  001f6	e9 b1 00 00 00	 jmp	 $error$20851
$LN15@zipimporte@7:
$LN18@zipimporte@7:

; 490  :     }
; 491  :     mod = PyImport_ExecCodeModuleObject(fullname, code, modpath, NULL);

  001fb	45 33 c9	 xor	 r9d, r9d
  001fe	4c 8b 44 24 38	 mov	 r8, QWORD PTR modpath$[rsp]
  00203	48 8b 54 24 48	 mov	 rdx, QWORD PTR code$[rsp]
  00208	48 8b 4c 24 58	 mov	 rcx, QWORD PTR fullname$[rsp]
  0020d	e8 00 00 00 00	 call	 PyImport_ExecCodeModuleObject
  00212	48 89 44 24 60	 mov	 QWORD PTR mod$[rsp], rax
$LN14@zipimporte@7:

; 492  :     Py_CLEAR(code);

  00217	48 83 7c 24 48
	00		 cmp	 QWORD PTR code$[rsp], 0
  0021d	74 4d		 je	 SHORT $LN11@zipimporte@7
  0021f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00227	4c 8b 4c 24 48	 mov	 r9, QWORD PTR code$[rsp]
  0022c	41 b8 ec 01 00
	00		 mov	 r8d, 492		; 000001ecH
  00232	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@DCMIAMFE@?4?4?2Modules?2zipimport?4c?$AA@
  00239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@GGBGEOMG@zipimporter_load_module?$AA@
  00240	e8 00 00 00 00	 call	 _PyParallel_Guard
  00245	85 c0		 test	 eax, eax
  00247	75 23		 jne	 SHORT $LN11@zipimporte@7
  00249	48 8b 44 24 48	 mov	 rax, QWORD PTR code$[rsp]
  0024e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _py_tmp$20877[rsp], rax
  00256	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR code$[rsp], 0
  0025f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20877[rsp]
  00267	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@zipimporte@7:
  0026c	33 c0		 xor	 eax, eax
  0026e	85 c0		 test	 eax, eax
  00270	75 a5		 jne	 SHORT $LN14@zipimporte@7

; 493  :     if (mod == NULL)

  00272	48 83 7c 24 60
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00278	75 02		 jne	 SHORT $LN10@zipimporte@7

; 494  :         goto error;

  0027a	eb 30		 jmp	 SHORT $error$20851
$LN10@zipimporte@7:

; 495  : 
; 496  :     if (Py_VerboseFlag)

  0027c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00283	74 16		 je	 SHORT $LN9@zipimporte@7

; 497  :         PySys_FormatStderr("import %U # loaded from Zip %U\n",
; 498  :                            fullname, modpath);

  00285	4c 8b 44 24 38	 mov	 r8, QWORD PTR modpath$[rsp]
  0028a	48 8b 54 24 58	 mov	 rdx, QWORD PTR fullname$[rsp]
  0028f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@JMKOBLEO@import?5?$CFU?5?$CD?5loaded?5from?5Zip?5?$CFU?6?$AA@
  00296	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN9@zipimporte@7:

; 499  :     Py_DECREF(modpath);

  0029b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR modpath$[rsp]
  002a0	e8 00 00 00 00	 call	 _Py_DecRef

; 500  :     return mod;

  002a5	48 8b 44 24 60	 mov	 rax, QWORD PTR mod$[rsp]
  002aa	eb 32		 jmp	 SHORT $LN24@zipimporte@7
$error$20851:
$LN8@zipimporte@7:

; 501  : error:
; 502  :     Py_XDECREF(code);

  002ac	48 83 7c 24 48
	00		 cmp	 QWORD PTR code$[rsp], 0
  002b2	74 0a		 je	 SHORT $LN5@zipimporte@7
  002b4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR code$[rsp]
  002b9	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@zipimporte@7:
  002be	33 c0		 xor	 eax, eax
  002c0	85 c0		 test	 eax, eax
  002c2	75 e8		 jne	 SHORT $LN8@zipimporte@7
$LN4@zipimporte@7:

; 503  :     Py_XDECREF(modpath);

  002c4	48 83 7c 24 38
	00		 cmp	 QWORD PTR modpath$[rsp], 0
  002ca	74 0a		 je	 SHORT $LN1@zipimporte@7
  002cc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR modpath$[rsp]
  002d1	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@zipimporte@7:
  002d6	33 c0		 xor	 eax, eax
  002d8	85 c0		 test	 eax, eax
  002da	75 e8		 jne	 SHORT $LN4@zipimporte@7

; 504  :     return NULL;

  002dc	33 c0		 xor	 eax, eax
$LN24@zipimporte@7:

; 505  : }

  002de	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  002e5	c3		 ret	 0
zipimporter_load_module ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@CNKJMFEB@U?3zipimporter?4get_filename?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipimporter_get_filename DD imagerel zipimporter_get_filename
	DD	imagerel zipimporter_get_filename+116
	DD	imagerel $unwind$zipimporter_get_filename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_get_filename DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0BL@CNKJMFEB@U?3zipimporter?4get_filename?$AA@
CONST	SEGMENT
??_C@_0BL@CNKJMFEB@U?3zipimporter?4get_filename?$AA@ DB 'U:zipimporter.ge'
	DB	't_filename', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zipimporter_get_filename
_TEXT	SEGMENT
ispackage$ = 32
modpath$ = 40
code$ = 48
self$ = 56
fullname$ = 64
obj$ = 96
args$ = 104
zipimporter_get_filename PROC				; COMDAT

; 510  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 511  :     ZipImporter *self = (ZipImporter *)obj;

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR obj$[rsp]
  00013	48 89 44 24 38	 mov	 QWORD PTR self$[rsp], rax

; 512  :     PyObject *fullname, *code, *modpath;
; 513  :     int ispackage;
; 514  : 
; 515  :     if (!PyArg_ParseTuple(args, "U:zipimporter.get_filename",
; 516  :                           &fullname))

  00018	4c 8d 44 24 40	 lea	 r8, QWORD PTR fullname$[rsp]
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@CNKJMFEB@U?3zipimporter?4get_filename?$AA@
  00024	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00029	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002e	85 c0		 test	 eax, eax
  00030	75 04		 jne	 SHORT $LN2@zipimporte@8

; 517  :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 39		 jmp	 SHORT $LN3@zipimporte@8
$LN2@zipimporte@8:

; 518  : 
; 519  :     /* Deciding the filename requires working out where the code
; 520  :        would come from if the module was actually loaded */
; 521  :     code = get_module_code(self, fullname, &ispackage, &modpath);

  00036	4c 8d 4c 24 28	 lea	 r9, QWORD PTR modpath$[rsp]
  0003b	4c 8d 44 24 20	 lea	 r8, QWORD PTR ispackage$[rsp]
  00040	48 8b 54 24 40	 mov	 rdx, QWORD PTR fullname$[rsp]
  00045	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  0004a	e8 00 00 00 00	 call	 get_module_code
  0004f	48 89 44 24 30	 mov	 QWORD PTR code$[rsp], rax

; 522  :     if (code == NULL)

  00054	48 83 7c 24 30
	00		 cmp	 QWORD PTR code$[rsp], 0
  0005a	75 04		 jne	 SHORT $LN1@zipimporte@8

; 523  :         return NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	eb 0f		 jmp	 SHORT $LN3@zipimporte@8
$LN1@zipimporte@8:

; 524  :     Py_DECREF(code); /* Only need the path info */

  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR code$[rsp]
  00065	e8 00 00 00 00	 call	 _Py_DecRef

; 525  : 
; 526  :     return modpath;

  0006a	48 8b 44 24 28	 mov	 rax, QWORD PTR modpath$[rsp]
$LN3@zipimporte@8:

; 527  : }

  0006f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00073	c3		 ret	 0
zipimporter_get_filename ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@MBMIOLGL@can?8t?5find?5module?5?$CFR?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KCAFKFKG@U?3zipimporter?4is_package?$AA@ ; `string'
EXTRN	PyBool_FromLong:PROC
EXTRN	PyErr_Format:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipimporter_is_package DD imagerel zipimporter_is_package
	DD	imagerel zipimporter_is_package+158
	DD	imagerel $unwind$zipimporter_is_package
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_is_package DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BF@MBMIOLGL@can?8t?5find?5module?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BF@MBMIOLGL@can?8t?5find?5module?5?$CFR?$AA@ DB 'can''t find modul'
	DB	'e %R', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KCAFKFKG@U?3zipimporter?4is_package?$AA@
CONST	SEGMENT
??_C@_0BJ@KCAFKFKG@U?3zipimporter?4is_package?$AA@ DB 'U:zipimporter.is_p'
	DB	'ackage', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zipimporter_is_package
_TEXT	SEGMENT
self$ = 32
fullname$ = 40
mi$ = 48
tv79 = 52
obj$ = 80
args$ = 88
zipimporter_is_package PROC				; COMDAT

; 532  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 533  :     ZipImporter *self = (ZipImporter *)obj;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 534  :     PyObject *fullname;
; 535  :     enum zi_module_info mi;
; 536  : 
; 537  :     if (!PyArg_ParseTuple(args, "U:zipimporter.is_package",
; 538  :                           &fullname))

  00018	4c 8d 44 24 28	 lea	 r8, QWORD PTR fullname$[rsp]
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KCAFKFKG@U?3zipimporter?4is_package?$AA@
  00024	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00029	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002e	85 c0		 test	 eax, eax
  00030	75 04		 jne	 SHORT $LN3@zipimporte@9

; 539  :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 63		 jmp	 SHORT $LN4@zipimporte@9
$LN3@zipimporte@9:

; 540  : 
; 541  :     mi = get_module_info(self, fullname);

  00036	48 8b 54 24 28	 mov	 rdx, QWORD PTR fullname$[rsp]
  0003b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  00040	e8 00 00 00 00	 call	 get_module_info
  00045	89 44 24 30	 mov	 DWORD PTR mi$[rsp], eax

; 542  :     if (mi == MI_ERROR)

  00049	83 7c 24 30 00	 cmp	 DWORD PTR mi$[rsp], 0
  0004e	75 04		 jne	 SHORT $LN2@zipimporte@9

; 543  :         return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	eb 45		 jmp	 SHORT $LN4@zipimporte@9
$LN2@zipimporte@9:

; 544  :     if (mi == MI_NOT_FOUND) {

  00054	83 7c 24 30 01	 cmp	 DWORD PTR mi$[rsp], 1
  00059	75 1c		 jne	 SHORT $LN1@zipimporte@9

; 545  :         PyErr_Format(ZipImportError, "can't find module %R", fullname);

  0005b	4c 8b 44 24 28	 mov	 r8, QWORD PTR fullname$[rsp]
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@MBMIOLGL@can?8t?5find?5module?5?$CFR?$AA@
  00067	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  0006e	e8 00 00 00 00	 call	 PyErr_Format

; 546  :         return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	eb 22		 jmp	 SHORT $LN4@zipimporte@9
$LN1@zipimporte@9:

; 547  :     }
; 548  :     return PyBool_FromLong(mi == MI_PACKAGE);

  00077	83 7c 24 30 03	 cmp	 DWORD PTR mi$[rsp], 3
  0007c	75 0a		 jne	 SHORT $LN6@zipimporte@9
  0007e	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  00086	eb 08		 jmp	 SHORT $LN7@zipimporte@9
$LN6@zipimporte@9:
  00088	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
$LN7@zipimporte@9:
  00090	8b 4c 24 34	 mov	 ecx, DWORD PTR tv79[rsp]
  00094	e8 00 00 00 00	 call	 PyBool_FromLong
$LN4@zipimporte@9:

; 549  : }

  00099	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009d	c3		 ret	 0
zipimporter_is_package ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EE@IBNIECBD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAa?$AAr?$AAc?$AAh?$AAi?$AAv?$AAe@ ; `string'
PUBLIC	??_C@_1DO@GFPFPDLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAa?$AAr?$AAc?$AAh?$AAi?$AAv?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BH@OGNKJCMP@U?3zipimporter?4get_data?$AA@ ; `string'
EXTRN	PyErr_SetFromErrnoWithFilenameObject:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	PyUnicode_Tailmatch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipimporter_get_data DD imagerel zipimporter_get_data
	DD	imagerel zipimporter_get_data+2076
	DD	imagerel $unwind$zipimporter_get_data
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_get_data DD 021101H
	DD	0170111H
xdata	ENDS
;	COMDAT ??_C@_1EE@IBNIECBD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAa?$AAr?$AAc?$AAh?$AAi?$AAv?$AAe@
CONST	SEGMENT
??_C@_1EE@IBNIECBD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAa?$AAr?$AAc?$AAh?$AAi?$AAv?$AAe@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 's', 00H
	DB	'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'a', 00H, 'r'
	DB	00H, 'c', 00H, 'h', 00H, 'i', 00H, 'v', 00H, 'e', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@GFPFPDLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAa?$AAr?$AAc?$AAh?$AAi?$AAv?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@GFPFPDLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAa?$AAr?$AAc?$AAh?$AAi?$AAv?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H
	DB	'-', 00H, '>', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H, 'i'
	DB	00H, 'v', 00H, 'e', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OGNKJCMP@U?3zipimporter?4get_data?$AA@
CONST	SEGMENT
??_C@_0BH@OGNKJCMP@U?3zipimporter?4get_data?$AA@ DB 'U:zipimporter.get_da'
	DB	'ta', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zipimporter_get_data
_TEXT	SEGMENT
path_start$ = 48
toc_entry$ = 56
key$ = 64
self$ = 72
len$ = 80
path$ = 88
path_len$ = 96
tv128 = 104
tv244 = 112
tv253 = 120
tv368 = 128
tv309 = 136
tv318 = 144
tv367 = 152
tv355 = 160
tv364 = 168
obj$ = 192
args$ = 200
zipimporter_get_data PROC				; COMDAT

; 554  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 555  :     ZipImporter *self = (ZipImporter *)obj;

  00011	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00019	48 89 44 24 48	 mov	 QWORD PTR self$[rsp], rax

; 556  :     PyObject *path, *key;
; 557  : #ifdef ALTSEP
; 558  :     _Py_IDENTIFIER(replace);
; 559  : #endif
; 560  :     PyObject *toc_entry;
; 561  :     Py_ssize_t path_start, path_len, len;
; 562  : 
; 563  :     if (!PyArg_ParseTuple(args, "U:zipimporter.get_data", &path))

  0001e	4c 8d 44 24 58	 lea	 r8, QWORD PTR path$[rsp]
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@OGNKJCMP@U?3zipimporter?4get_data?$AA@
  0002a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00032	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00037	85 c0		 test	 eax, eax
  00039	75 07		 jne	 SHORT $LN6@zipimporte@10

; 564  :         return NULL;

  0003b	33 c0		 xor	 eax, eax
  0003d	e9 d2 07 00 00	 jmp	 $LN7@zipimporte@10
$LN6@zipimporte@10:

; 565  : 
; 566  : #ifdef ALTSEP
; 567  :     path = _PyObject_CallMethodId(path, &PyId_replace, "CC", ALTSEP, SEP);

  00042	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_replace@?1??zipimporter_get_data@@9@9
  00047	8b c0		 mov	 eax, eax
  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0004f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00058	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0005c	c7 44 24 20 5c
	00 00 00	 mov	 DWORD PTR [rsp+32], 92	; 0000005cH
  00064	41 b9 2f 00 00
	00		 mov	 r9d, 47			; 0000002fH
  0006a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02KJDGAJLC@CC?$AA@
  00071	48 8b d0	 mov	 rdx, rax
  00074	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  00079	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  0007e	48 89 44 24 58	 mov	 QWORD PTR path$[rsp], rax

; 568  :     if (!path)

  00083	48 83 7c 24 58
	00		 cmp	 QWORD PTR path$[rsp], 0
  00089	75 07		 jne	 SHORT $LN5@zipimporte@10

; 569  :         return NULL;

  0008b	33 c0		 xor	 eax, eax
  0008d	e9 82 07 00 00	 jmp	 $LN7@zipimporte@10
$LN5@zipimporte@10:

; 570  : #else
; 571  :     Py_INCREF(path);
; 572  : #endif
; 573  :     if (PyUnicode_READY(path) == -1)

  00092	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00097	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0009b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000a6	85 c0		 test	 eax, eax
  000a8	75 1c		 jne	 SHORT $LN9@zipimporte@10
  000aa	41 b8 3d 02 00
	00		 mov	 r8d, 573		; 0000023dH
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c4	33 c0		 xor	 eax, eax
$LN9@zipimporte@10:
  000c6	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  000cb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000ce	c1 e8 07	 shr	 eax, 7
  000d1	83 e0 01	 and	 eax, 1
  000d4	85 c0		 test	 eax, eax
  000d6	74 0a		 je	 SHORT $LN10@zipimporte@10
  000d8	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
  000e0	eb 0e		 jmp	 SHORT $LN11@zipimporte@10
$LN10@zipimporte@10:
  000e2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  000e7	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ec	89 44 24 68	 mov	 DWORD PTR tv128[rsp], eax
$LN11@zipimporte@10:
  000f0	83 7c 24 68 ff	 cmp	 DWORD PTR tv128[rsp], -1
  000f5	75 05		 jne	 SHORT $LN4@zipimporte@10

; 574  :         goto error;

  000f7	e9 0c 07 00 00	 jmp	 $error$20960
$LN4@zipimporte@10:

; 575  : 
; 576  :     path_len = PyUnicode_GET_LENGTH(path);

  000fc	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00101	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00105	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0010b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00110	85 c0		 test	 eax, eax
  00112	75 1c		 jne	 SHORT $LN12@zipimporte@10
  00114	41 b8 40 02 00
	00		 mov	 r8d, 576		; 00000240H
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  00128	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012e	33 c0		 xor	 eax, eax
$LN12@zipimporte@10:
  00130	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00135	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00138	c1 e8 07	 shr	 eax, 7
  0013b	83 e0 01	 and	 eax, 1
  0013e	85 c0		 test	 eax, eax
  00140	75 1c		 jne	 SHORT $LN13@zipimporte@10
  00142	41 b8 40 02 00
	00		 mov	 r8d, 576		; 00000240H
  00148	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CIKMINIA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0015c	33 c0		 xor	 eax, eax
$LN13@zipimporte@10:
  0015e	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00163	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00167	48 89 44 24 60	 mov	 QWORD PTR path_len$[rsp], rax

; 577  : 
; 578  :     len = PyUnicode_GET_LENGTH(self->archive);

  0016c	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  00171	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00175	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00179	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0017f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00184	85 c0		 test	 eax, eax
  00186	75 1c		 jne	 SHORT $LN14@zipimporte@10
  00188	41 b8 42 02 00
	00		 mov	 r8d, 578		; 00000242H
  0018e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@GFPFPDLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAa?$AAr?$AAc?$AAh?$AAi?$AAv?$AAe?$AA?$CJ?$AA?$AA@
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a2	33 c0		 xor	 eax, eax
$LN14@zipimporte@10:
  001a4	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  001a9	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001ad	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001b0	c1 e8 07	 shr	 eax, 7
  001b3	83 e0 01	 and	 eax, 1
  001b6	85 c0		 test	 eax, eax
  001b8	75 1c		 jne	 SHORT $LN15@zipimporte@10
  001ba	41 b8 42 02 00
	00		 mov	 r8d, 578		; 00000242H
  001c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@IBNIECBD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAa?$AAr?$AAc?$AAh?$AAi?$AAv?$AAe@
  001ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d4	33 c0		 xor	 eax, eax
$LN15@zipimporte@10:
  001d6	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  001db	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001df	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001e3	48 89 44 24 50	 mov	 QWORD PTR len$[rsp], rax

; 579  :     path_start = 0;

  001e8	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR path_start$[rsp], 0

; 580  :     if (PyUnicode_Tailmatch(path, self->archive, 0, len, -1)
; 581  :         && PyUnicode_READ_CHAR(path, len) == SEP) {

  001f1	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  001f9	4c 8b 4c 24 50	 mov	 r9, QWORD PTR len$[rsp]
  001fe	45 33 c0	 xor	 r8d, r8d
  00201	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  00206	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0020a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  0020f	e8 00 00 00 00	 call	 PyUnicode_Tailmatch
  00214	48 85 c0	 test	 rax, rax
  00217	0f 84 62 05 00
	00		 je	 $LN3@zipimporte@10
  0021d	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00222	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00226	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0022c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00231	85 c0		 test	 eax, eax
  00233	75 1c		 jne	 SHORT $LN16@zipimporte@10
  00235	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  0023b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00242	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  00249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0024f	33 c0		 xor	 eax, eax
$LN16@zipimporte@10:
  00251	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00256	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00259	c1 e8 07	 shr	 eax, 7
  0025c	83 e0 01	 and	 eax, 1
  0025f	85 c0		 test	 eax, eax
  00261	75 1c		 jne	 SHORT $LN17@zipimporte@10
  00263	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  00269	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00270	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CIKMINIA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  00277	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0027d	33 c0		 xor	 eax, eax
$LN17@zipimporte@10:
  0027f	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00284	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00288	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0028e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00293	85 c0		 test	 eax, eax
  00295	75 1c		 jne	 SHORT $LN18@zipimporte@10
  00297	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  0029d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  002a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b1	33 c0		 xor	 eax, eax
$LN18@zipimporte@10:
  002b3	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  002b8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002bb	c1 e8 07	 shr	 eax, 7
  002be	83 e0 01	 and	 eax, 1
  002c1	85 c0		 test	 eax, eax
  002c3	75 1c		 jne	 SHORT $LN19@zipimporte@10
  002c5	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  002cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  002d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  002d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002df	33 c0		 xor	 eax, eax
$LN19@zipimporte@10:
  002e1	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  002e6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002e9	c1 e8 02	 shr	 eax, 2
  002ec	83 e0 07	 and	 eax, 7
  002ef	83 f8 01	 cmp	 eax, 1
  002f2	0f 85 47 01 00
	00		 jne	 $LN48@zipimporte@10
  002f8	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  002fd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00301	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00307	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0030c	85 c0		 test	 eax, eax
  0030e	75 1c		 jne	 SHORT $LN20@zipimporte@10
  00310	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  00316	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0031d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00324	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0032a	33 c0		 xor	 eax, eax
$LN20@zipimporte@10:
  0032c	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00331	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00334	c1 e8 05	 shr	 eax, 5
  00337	83 e0 01	 and	 eax, 1
  0033a	85 c0		 test	 eax, eax
  0033c	0f 84 a2 00 00
	00		 je	 $LN26@zipimporte@10
  00342	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00347	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0034b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00351	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00356	85 c0		 test	 eax, eax
  00358	75 1c		 jne	 SHORT $LN21@zipimporte@10
  0035a	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  00360	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00367	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0036e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00374	33 c0		 xor	 eax, eax
$LN21@zipimporte@10:
  00376	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0037b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0037e	c1 e8 07	 shr	 eax, 7
  00381	83 e0 01	 and	 eax, 1
  00384	85 c0		 test	 eax, eax
  00386	75 1c		 jne	 SHORT $LN22@zipimporte@10
  00388	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  0038e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00395	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0039c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003a2	33 c0		 xor	 eax, eax
$LN22@zipimporte@10:
  003a4	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  003a9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003ac	c1 e8 06	 shr	 eax, 6
  003af	83 e0 01	 and	 eax, 1
  003b2	85 c0		 test	 eax, eax
  003b4	74 12		 je	 SHORT $LN23@zipimporte@10
  003b6	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  003bb	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  003c1	48 89 44 24 70	 mov	 QWORD PTR tv244[rsp], rax
  003c6	eb 10		 jmp	 SHORT $LN24@zipimporte@10
$LN23@zipimporte@10:
  003c8	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  003cd	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  003d3	48 89 44 24 70	 mov	 QWORD PTR tv244[rsp], rax
$LN24@zipimporte@10:
  003d8	48 8b 44 24 70	 mov	 rax, QWORD PTR tv244[rsp]
  003dd	48 89 44 24 78	 mov	 QWORD PTR tv253[rsp], rax
  003e2	eb 3c		 jmp	 SHORT $LN27@zipimporte@10
$LN26@zipimporte@10:
  003e4	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  003e9	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  003f1	75 1c		 jne	 SHORT $LN25@zipimporte@10
  003f3	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  003f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00400	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@EAMONLJF@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  00407	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0040d	33 c0		 xor	 eax, eax
$LN25@zipimporte@10:
  0040f	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00414	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0041b	48 89 44 24 78	 mov	 QWORD PTR tv253[rsp], rax
$LN27@zipimporte@10:
  00420	48 8b 44 24 50	 mov	 rax, QWORD PTR len$[rsp]
  00425	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv253[rsp]
  0042a	48 03 c8	 add	 rcx, rax
  0042d	48 8b c1	 mov	 rax, rcx
  00430	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00433	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv368[rsp], eax
  0043a	e9 29 03 00 00	 jmp	 $LN49@zipimporte@10
$LN48@zipimporte@10:
  0043f	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00444	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00448	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0044e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00453	85 c0		 test	 eax, eax
  00455	75 1c		 jne	 SHORT $LN28@zipimporte@10
  00457	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  0045d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00464	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0046b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00471	33 c0		 xor	 eax, eax
$LN28@zipimporte@10:
  00473	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00478	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0047b	c1 e8 07	 shr	 eax, 7
  0047e	83 e0 01	 and	 eax, 1
  00481	85 c0		 test	 eax, eax
  00483	75 1c		 jne	 SHORT $LN29@zipimporte@10
  00485	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  0048b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00492	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00499	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0049f	33 c0		 xor	 eax, eax
$LN29@zipimporte@10:
  004a1	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  004a6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004a9	c1 e8 02	 shr	 eax, 2
  004ac	83 e0 07	 and	 eax, 7
  004af	83 f8 02	 cmp	 eax, 2
  004b2	0f 85 54 01 00
	00		 jne	 $LN46@zipimporte@10
  004b8	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  004bd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004c1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004c7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004cc	85 c0		 test	 eax, eax
  004ce	75 1c		 jne	 SHORT $LN30@zipimporte@10
  004d0	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  004d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  004dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004ea	33 c0		 xor	 eax, eax
$LN30@zipimporte@10:
  004ec	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  004f1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004f4	c1 e8 05	 shr	 eax, 5
  004f7	83 e0 01	 and	 eax, 1
  004fa	85 c0		 test	 eax, eax
  004fc	0f 84 ae 00 00
	00		 je	 $LN36@zipimporte@10
  00502	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00507	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0050b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00511	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00516	85 c0		 test	 eax, eax
  00518	75 1c		 jne	 SHORT $LN31@zipimporte@10
  0051a	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  00520	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00527	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0052e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00534	33 c0		 xor	 eax, eax
$LN31@zipimporte@10:
  00536	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0053b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0053e	c1 e8 07	 shr	 eax, 7
  00541	83 e0 01	 and	 eax, 1
  00544	85 c0		 test	 eax, eax
  00546	75 1c		 jne	 SHORT $LN32@zipimporte@10
  00548	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  0054e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00555	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0055c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00562	33 c0		 xor	 eax, eax
$LN32@zipimporte@10:
  00564	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00569	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0056c	c1 e8 06	 shr	 eax, 6
  0056f	83 e0 01	 and	 eax, 1
  00572	85 c0		 test	 eax, eax
  00574	74 15		 je	 SHORT $LN33@zipimporte@10
  00576	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0057b	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00581	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv309[rsp], rax
  00589	eb 13		 jmp	 SHORT $LN34@zipimporte@10
$LN33@zipimporte@10:
  0058b	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00590	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00596	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv309[rsp], rax
$LN34@zipimporte@10:
  0059e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv309[rsp]
  005a6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv318[rsp], rax
  005ae	eb 3f		 jmp	 SHORT $LN37@zipimporte@10
$LN36@zipimporte@10:
  005b0	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  005b5	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  005bd	75 1c		 jne	 SHORT $LN35@zipimporte@10
  005bf	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  005c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  005cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@EAMONLJF@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  005d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005d9	33 c0		 xor	 eax, eax
$LN35@zipimporte@10:
  005db	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  005e0	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  005e7	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv318[rsp], rax
$LN37@zipimporte@10:
  005ef	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv318[rsp]
  005f7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR len$[rsp]
  005fc	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00600	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv367[rsp], eax
  00607	e9 4e 01 00 00	 jmp	 $LN47@zipimporte@10
$LN46@zipimporte@10:
  0060c	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00611	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00615	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0061b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00620	85 c0		 test	 eax, eax
  00622	75 1c		 jne	 SHORT $LN38@zipimporte@10
  00624	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  0062a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00631	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00638	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0063e	33 c0		 xor	 eax, eax
$LN38@zipimporte@10:
  00640	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00645	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00648	c1 e8 05	 shr	 eax, 5
  0064b	83 e0 01	 and	 eax, 1
  0064e	85 c0		 test	 eax, eax
  00650	0f 84 ae 00 00
	00		 je	 $LN44@zipimporte@10
  00656	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0065b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0065f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00665	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0066a	85 c0		 test	 eax, eax
  0066c	75 1c		 jne	 SHORT $LN39@zipimporte@10
  0066e	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  00674	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0067b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJIPBJKP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00682	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00688	33 c0		 xor	 eax, eax
$LN39@zipimporte@10:
  0068a	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  0068f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00692	c1 e8 07	 shr	 eax, 7
  00695	83 e0 01	 and	 eax, 1
  00698	85 c0		 test	 eax, eax
  0069a	75 1c		 jne	 SHORT $LN40@zipimporte@10
  0069c	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  006a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  006a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCMDGCHF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$AA@
  006b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006b6	33 c0		 xor	 eax, eax
$LN40@zipimporte@10:
  006b8	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  006bd	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006c0	c1 e8 06	 shr	 eax, 6
  006c3	83 e0 01	 and	 eax, 1
  006c6	85 c0		 test	 eax, eax
  006c8	74 15		 je	 SHORT $LN41@zipimporte@10
  006ca	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  006cf	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  006d5	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv355[rsp], rax
  006dd	eb 13		 jmp	 SHORT $LN42@zipimporte@10
$LN41@zipimporte@10:
  006df	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  006e4	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  006ea	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv355[rsp], rax
$LN42@zipimporte@10:
  006f2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv355[rsp]
  006fa	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv364[rsp], rax
  00702	eb 3f		 jmp	 SHORT $LN45@zipimporte@10
$LN44@zipimporte@10:
  00704	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00709	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00711	75 1c		 jne	 SHORT $LN43@zipimporte@10
  00713	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  00719	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00720	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@EAMONLJF@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  00727	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0072d	33 c0		 xor	 eax, eax
$LN43@zipimporte@10:
  0072f	48 8b 44 24 58	 mov	 rax, QWORD PTR path$[rsp]
  00734	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0073b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv364[rsp], rax
$LN45@zipimporte@10:
  00743	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv364[rsp]
  0074b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR len$[rsp]
  00750	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00753	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv367[rsp], eax
$LN47@zipimporte@10:
  0075a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv367[rsp]
  00761	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv368[rsp], eax
$LN49@zipimporte@10:
  00768	83 bc 24 80 00
	00 00 5c	 cmp	 DWORD PTR tv368[rsp], 92 ; 0000005cH
  00770	75 0d		 jne	 SHORT $LN3@zipimporte@10

; 582  :         path_start = len + 1;

  00772	48 8b 44 24 50	 mov	 rax, QWORD PTR len$[rsp]
  00777	48 ff c0	 inc	 rax
  0077a	48 89 44 24 30	 mov	 QWORD PTR path_start$[rsp], rax
$LN3@zipimporte@10:

; 583  :     }
; 584  : 
; 585  :     key = PyUnicode_Substring(path, path_start, path_len);

  0077f	4c 8b 44 24 60	 mov	 r8, QWORD PTR path_len$[rsp]
  00784	48 8b 54 24 30	 mov	 rdx, QWORD PTR path_start$[rsp]
  00789	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  0078e	e8 00 00 00 00	 call	 PyUnicode_Substring
  00793	48 89 44 24 40	 mov	 QWORD PTR key$[rsp], rax

; 586  :     if (key == NULL)

  00798	48 83 7c 24 40
	00		 cmp	 QWORD PTR key$[rsp], 0
  0079e	75 02		 jne	 SHORT $LN2@zipimporte@10

; 587  :         goto error;

  007a0	eb 66		 jmp	 SHORT $error$20960
$LN2@zipimporte@10:

; 588  :     toc_entry = PyDict_GetItem(self->files, key);

  007a2	48 8b 54 24 40	 mov	 rdx, QWORD PTR key$[rsp]
  007a7	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  007ac	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  007b0	e8 00 00 00 00	 call	 PyDict_GetItem
  007b5	48 89 44 24 38	 mov	 QWORD PTR toc_entry$[rsp], rax

; 589  :     if (toc_entry == NULL) {

  007ba	48 83 7c 24 38
	00		 cmp	 QWORD PTR toc_entry$[rsp], 0
  007c0	75 1d		 jne	 SHORT $LN1@zipimporte@10

; 590  :         PyErr_SetFromErrnoWithFilenameObject(PyExc_IOError, key);

  007c2	48 8b 54 24 40	 mov	 rdx, QWORD PTR key$[rsp]
  007c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  007ce	e8 00 00 00 00	 call	 PyErr_SetFromErrnoWithFilenameObject

; 591  :         Py_DECREF(key);

  007d3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR key$[rsp]
  007d8	e8 00 00 00 00	 call	 _Py_DecRef

; 592  :         goto error;

  007dd	eb 29		 jmp	 SHORT $error$20960
$LN1@zipimporte@10:

; 593  :     }
; 594  :     Py_DECREF(key);

  007df	48 8b 4c 24 40	 mov	 rcx, QWORD PTR key$[rsp]
  007e4	e8 00 00 00 00	 call	 _Py_DecRef

; 595  :     Py_DECREF(path);

  007e9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  007ee	e8 00 00 00 00	 call	 _Py_DecRef

; 596  :     return get_data(self->archive, toc_entry);

  007f3	48 8b 54 24 38	 mov	 rdx, QWORD PTR toc_entry$[rsp]
  007f8	48 8b 44 24 48	 mov	 rax, QWORD PTR self$[rsp]
  007fd	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00801	e8 00 00 00 00	 call	 get_data
  00806	eb 0c		 jmp	 SHORT $LN7@zipimporte@10
$error$20960:

; 597  :   error:
; 598  :     Py_DECREF(path);

  00808	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  0080d	e8 00 00 00 00	 call	 _Py_DecRef

; 599  :     return NULL;

  00812	33 c0		 xor	 eax, eax
$LN7@zipimporte@10:

; 600  : }

  00814	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0081b	c3		 ret	 0
zipimporter_get_data ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@MMGPFPJI@U?3zipimporter?4get_code?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipimporter_get_code DD imagerel zipimporter_get_code
	DD	imagerel zipimporter_get_code+80
	DD	imagerel $unwind$zipimporter_get_code
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_get_code DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BH@MMGPFPJI@U?3zipimporter?4get_code?$AA@
CONST	SEGMENT
??_C@_0BH@MMGPFPJI@U?3zipimporter?4get_code?$AA@ DB 'U:zipimporter.get_co'
	DB	'de', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zipimporter_get_code
_TEXT	SEGMENT
self$ = 32
fullname$ = 40
obj$ = 64
args$ = 72
zipimporter_get_code PROC				; COMDAT

; 604  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 605  :     ZipImporter *self = (ZipImporter *)obj;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 606  :     PyObject *fullname;
; 607  : 
; 608  :     if (!PyArg_ParseTuple(args, "U:zipimporter.get_code", &fullname))

  00018	4c 8d 44 24 28	 lea	 r8, QWORD PTR fullname$[rsp]
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@MMGPFPJI@U?3zipimporter?4get_code?$AA@
  00024	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00029	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002e	85 c0		 test	 eax, eax
  00030	75 04		 jne	 SHORT $LN1@zipimporte@11

; 609  :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 15		 jmp	 SHORT $LN2@zipimporte@11
$LN1@zipimporte@11:

; 610  : 
; 611  :     return get_module_code(self, fullname, NULL, NULL);

  00036	45 33 c9	 xor	 r9d, r9d
  00039	45 33 c0	 xor	 r8d, r8d
  0003c	48 8b 54 24 28	 mov	 rdx, QWORD PTR fullname$[rsp]
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  00046	e8 00 00 00 00	 call	 get_module_code
$LN2@zipimporte@11:

; 612  : }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
zipimporter_get_code ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CK@FILHOKME@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_05DEOPIIA@?$CFU?4py?$AA@			; `string'
PUBLIC	??_C@_0BA@FPMBKODM@?$CFU?$CFc__init__?4py?$AA@	; `string'
PUBLIC	??_C@_0BJ@OHMHCHFJ@U?3zipimporter?4get_source?$AA@ ; `string'
EXTRN	PyUnicode_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipimporter_get_source DD imagerel zipimporter_get_source
	DD	imagerel zipimporter_get_source+558
	DD	imagerel $unwind$zipimporter_get_source
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipimporter_get_source DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_1CK@FILHOKME@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@FILHOKME@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05DEOPIIA@?$CFU?4py?$AA@
CONST	SEGMENT
??_C@_05DEOPIIA@?$CFU?4py?$AA@ DB '%U.py', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FPMBKODM@?$CFU?$CFc__init__?4py?$AA@
CONST	SEGMENT
??_C@_0BA@FPMBKODM@?$CFU?$CFc__init__?4py?$AA@ DB '%U%c__init__.py', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OHMHCHFJ@U?3zipimporter?4get_source?$AA@
CONST	SEGMENT
??_C@_0BJ@OHMHCHFJ@U?3zipimporter?4get_source?$AA@ DB 'U:zipimporter.get_'
	DB	'source', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zipimporter_get_source
_TEXT	SEGMENT
subname$ = 32
toc_entry$ = 40
self$ = 48
fullpath$ = 56
fullname$ = 64
path$ = 72
mi$ = 80
res$21099 = 88
bytes$21100 = 96
obj$ = 128
args$ = 136
zipimporter_get_source PROC				; COMDAT

; 616  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 617  :     ZipImporter *self = (ZipImporter *)obj;

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00016	48 89 44 24 30	 mov	 QWORD PTR self$[rsp], rax

; 618  :     PyObject *toc_entry;
; 619  :     PyObject *fullname, *subname, *path, *fullpath;
; 620  :     enum zi_module_info mi;
; 621  : 
; 622  :     if (!PyArg_ParseTuple(args, "U:zipimporter.get_source", &fullname))

  0001b	4c 8d 44 24 40	 lea	 r8, QWORD PTR fullname$[rsp]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@OHMHCHFJ@U?3zipimporter?4get_source?$AA@
  00027	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0002f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00034	85 c0		 test	 eax, eax
  00036	75 07		 jne	 SHORT $LN10@zipimporte@12

; 623  :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	e9 ea 01 00 00	 jmp	 $LN11@zipimporte@12
$LN10@zipimporte@12:

; 624  : 
; 625  :     mi = get_module_info(self, fullname);

  0003f	48 8b 54 24 40	 mov	 rdx, QWORD PTR fullname$[rsp]
  00044	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00049	e8 00 00 00 00	 call	 get_module_info
  0004e	89 44 24 50	 mov	 DWORD PTR mi$[rsp], eax

; 626  :     if (mi == MI_ERROR)

  00052	83 7c 24 50 00	 cmp	 DWORD PTR mi$[rsp], 0
  00057	75 07		 jne	 SHORT $LN9@zipimporte@12

; 627  :         return NULL;

  00059	33 c0		 xor	 eax, eax
  0005b	e9 c9 01 00 00	 jmp	 $LN11@zipimporte@12
$LN9@zipimporte@12:

; 628  :     if (mi == MI_NOT_FOUND) {

  00060	83 7c 24 50 01	 cmp	 DWORD PTR mi$[rsp], 1
  00065	75 1f		 jne	 SHORT $LN8@zipimporte@12

; 629  :         PyErr_Format(ZipImportError, "can't find module %R", fullname);

  00067	4c 8b 44 24 40	 mov	 r8, QWORD PTR fullname$[rsp]
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@MBMIOLGL@can?8t?5find?5module?5?$CFR?$AA@
  00073	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  0007a	e8 00 00 00 00	 call	 PyErr_Format

; 630  :         return NULL;

  0007f	33 c0		 xor	 eax, eax
  00081	e9 a3 01 00 00	 jmp	 $LN11@zipimporte@12
$LN8@zipimporte@12:

; 631  :     }
; 632  : 
; 633  :     subname = get_subname(fullname);

  00086	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fullname$[rsp]
  0008b	e8 00 00 00 00	 call	 get_subname
  00090	48 89 44 24 20	 mov	 QWORD PTR subname$[rsp], rax

; 634  :     if (subname == NULL)

  00095	48 83 7c 24 20
	00		 cmp	 QWORD PTR subname$[rsp], 0
  0009b	75 07		 jne	 SHORT $LN7@zipimporte@12

; 635  :         return NULL;

  0009d	33 c0		 xor	 eax, eax
  0009f	e9 85 01 00 00	 jmp	 $LN11@zipimporte@12
$LN7@zipimporte@12:

; 636  : 
; 637  :     path = make_filename(self->prefix, subname);

  000a4	48 8b 54 24 20	 mov	 rdx, QWORD PTR subname$[rsp]
  000a9	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  000ae	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000b2	e8 00 00 00 00	 call	 make_filename
  000b7	48 89 44 24 48	 mov	 QWORD PTR path$[rsp], rax

; 638  :     Py_DECREF(subname);

  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR subname$[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef

; 639  :     if (path == NULL)

  000c6	48 83 7c 24 48
	00		 cmp	 QWORD PTR path$[rsp], 0
  000cc	75 07		 jne	 SHORT $LN6@zipimporte@12

; 640  :         return NULL;

  000ce	33 c0		 xor	 eax, eax
  000d0	e9 54 01 00 00	 jmp	 $LN11@zipimporte@12
$LN6@zipimporte@12:

; 641  : 
; 642  :     if (mi == MI_PACKAGE)

  000d5	83 7c 24 50 03	 cmp	 DWORD PTR mi$[rsp], 3
  000da	75 1e		 jne	 SHORT $LN5@zipimporte@12

; 643  :         fullpath = PyUnicode_FromFormat("%U%c__init__.py", path, SEP);

  000dc	41 b8 5c 00 00
	00		 mov	 r8d, 92			; 0000005cH
  000e2	48 8b 54 24 48	 mov	 rdx, QWORD PTR path$[rsp]
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FPMBKODM@?$CFU?$CFc__init__?4py?$AA@
  000ee	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000f3	48 89 44 24 38	 mov	 QWORD PTR fullpath$[rsp], rax

; 644  :     else

  000f8	eb 16		 jmp	 SHORT $LN4@zipimporte@12
$LN5@zipimporte@12:

; 645  :         fullpath = PyUnicode_FromFormat("%U.py", path);

  000fa	48 8b 54 24 48	 mov	 rdx, QWORD PTR path$[rsp]
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DEOPIIA@?$CFU?4py?$AA@
  00106	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0010b	48 89 44 24 38	 mov	 QWORD PTR fullpath$[rsp], rax
$LN4@zipimporte@12:

; 646  :     Py_DECREF(path);

  00110	48 8b 4c 24 48	 mov	 rcx, QWORD PTR path$[rsp]
  00115	e8 00 00 00 00	 call	 _Py_DecRef

; 647  :     if (fullpath == NULL)

  0011a	48 83 7c 24 38
	00		 cmp	 QWORD PTR fullpath$[rsp], 0
  00120	75 07		 jne	 SHORT $LN3@zipimporte@12

; 648  :         return NULL;

  00122	33 c0		 xor	 eax, eax
  00124	e9 00 01 00 00	 jmp	 $LN11@zipimporte@12
$LN3@zipimporte@12:

; 649  : 
; 650  :     toc_entry = PyDict_GetItem(self->files, fullpath);

  00129	48 8b 54 24 38	 mov	 rdx, QWORD PTR fullpath$[rsp]
  0012e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00133	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00137	e8 00 00 00 00	 call	 PyDict_GetItem
  0013c	48 89 44 24 28	 mov	 QWORD PTR toc_entry$[rsp], rax

; 651  :     Py_DECREF(fullpath);

  00141	48 8b 4c 24 38	 mov	 rcx, QWORD PTR fullpath$[rsp]
  00146	e8 00 00 00 00	 call	 _Py_DecRef

; 652  :     if (toc_entry != NULL) {

  0014b	48 83 7c 24 28
	00		 cmp	 QWORD PTR toc_entry$[rsp], 0
  00151	0f 84 bf 00 00
	00		 je	 $LN2@zipimporte@12

; 653  :         PyObject *res, *bytes;
; 654  :         bytes = get_data(self->archive, toc_entry);

  00157	48 8b 54 24 28	 mov	 rdx, QWORD PTR toc_entry$[rsp]
  0015c	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00161	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00165	e8 00 00 00 00	 call	 get_data
  0016a	48 89 44 24 60	 mov	 QWORD PTR bytes$21100[rsp], rax

; 655  :         if (bytes == NULL)

  0016f	48 83 7c 24 60
	00		 cmp	 QWORD PTR bytes$21100[rsp], 0
  00175	75 07		 jne	 SHORT $LN1@zipimporte@12

; 656  :             return NULL;

  00177	33 c0		 xor	 eax, eax
  00179	e9 ab 00 00 00	 jmp	 $LN11@zipimporte@12
$LN1@zipimporte@12:

; 657  :         res = PyUnicode_FromStringAndSize(PyBytes_AS_STRING(bytes),
; 658  :                                           PyBytes_GET_SIZE(bytes));

  0017e	48 8b 44 24 60	 mov	 rax, QWORD PTR bytes$21100[rsp]
  00183	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00187	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0018d	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00192	85 c0		 test	 eax, eax
  00194	75 1c		 jne	 SHORT $LN13@zipimporte@12
  00196	41 b8 92 02 00
	00		 mov	 r8d, 658		; 00000292H
  0019c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FILHOKME@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  001aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b0	33 c0		 xor	 eax, eax
$LN13@zipimporte@12:
  001b2	48 8b 44 24 60	 mov	 rax, QWORD PTR bytes$21100[rsp]
  001b7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001bb	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001c1	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001c6	85 c0		 test	 eax, eax
  001c8	75 1c		 jne	 SHORT $LN14@zipimporte@12
  001ca	41 b8 91 02 00
	00		 mov	 r8d, 657		; 00000291H
  001d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  001d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FILHOKME@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  001de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001e4	33 c0		 xor	 eax, eax
$LN14@zipimporte@12:
  001e6	48 8b 44 24 60	 mov	 rax, QWORD PTR bytes$21100[rsp]
  001eb	48 83 c0 78	 add	 rax, 120		; 00000078H
  001ef	48 8b 4c 24 60	 mov	 rcx, QWORD PTR bytes$21100[rsp]
  001f4	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  001f8	48 8b c8	 mov	 rcx, rax
  001fb	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  00200	48 89 44 24 58	 mov	 QWORD PTR res$21099[rsp], rax

; 659  :         Py_DECREF(bytes);

  00205	48 8b 4c 24 60	 mov	 rcx, QWORD PTR bytes$21100[rsp]
  0020a	e8 00 00 00 00	 call	 _Py_DecRef

; 660  :         return res;

  0020f	48 8b 44 24 58	 mov	 rax, QWORD PTR res$21099[rsp]
  00214	eb 13		 jmp	 SHORT $LN11@zipimporte@12
$LN2@zipimporte@12:

; 661  :     }
; 662  : 
; 663  :     /* we have the module, but no source */
; 664  :     Py_INCREF(Py_None);

  00216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0021d	e8 00 00 00 00	 call	 _Py_IncRef

; 665  :     return Py_None;

  00222	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN11@zipimporte@12:

; 666  : }

  00229	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0022d	c3		 ret	 0
zipimporter_get_source ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@DAGBHPLA@?$CD?5zipimport?3?5found?5?$CFld?5names?5in?5@ ; `string'
PUBLIC	??_C@_0P@MKDHMPFK@read_directory?$AA@		; `string'
PUBLIC	??_C@_08GIJEMJIJ@Nhllnhhl?$AA@			; `string'
PUBLIC	??_C@_06HKKNHKHN@?$CFU?$CFc?$CFU?$AA@		; `string'
PUBLIC	??_C@_1DC@MONPFPIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0FG@JDPOMHML@bootstrap?5issue?3?5python?$CFi?$CFi?4zip?5@ ; `string'
PUBLIC	??_C@_05PAOMFHGM@cp437?$AA@			; `string'
PUBLIC	??_C@_05OJENGABA@ascii?$AA@			; `string'
PUBLIC	??_C@_05CAMHEFLG@utf?98?$AA@			; `string'
PUBLIC	??_C@_0BD@MDJLLLPP@not?5a?5Zip?5file?3?5?$CFR?$AA@ ; `string'
PUBLIC	??_C@_0BI@HHGCNGNN@can?8t?5read?5Zip?5file?3?5?$CFR?$AA@ ; `string'
PUBLIC	??_C@_0BI@PKKLABEO@can?8t?5open?5Zip?5file?3?5?$CFR?$AA@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
EXTRN	PyExc_NotImplementedError:QWORD
EXTRN	PyUnicode_Decode:PROC
EXTRN	PyThreadState_Get:PROC
EXTRN	__imp_getc:PROC
EXTRN	PyMarshal_ReadShortFromFile:PROC
EXTRN	PyMarshal_ReadLongFromFile:PROC
EXTRN	PyDict_New:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp_ftell:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_fseek:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	_Py_fopen:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_directory DD imagerel read_directory
	DD	imagerel read_directory+2062
	DD	imagerel $unwind$read_directory
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_directory DD 020c01H
	DD	047010cH
xdata	ENDS
;	COMDAT ??_C@_0CE@DAGBHPLA@?$CD?5zipimport?3?5found?5?$CFld?5names?5in?5@
CONST	SEGMENT
??_C@_0CE@DAGBHPLA@?$CD?5zipimport?3?5found?5?$CFld?5names?5in?5@ DB '# z'
	DB	'ipimport: found %ld names in %R', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MKDHMPFK@read_directory?$AA@
CONST	SEGMENT
??_C@_0P@MKDHMPFK@read_directory?$AA@ DB 'read_directory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GIJEMJIJ@Nhllnhhl?$AA@
CONST	SEGMENT
??_C@_08GIJEMJIJ@Nhllnhhl?$AA@ DB 'Nhllnhhl', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKKNHKHN@?$CFU?$CFc?$CFU?$AA@
CONST	SEGMENT
??_C@_06HKKNHKHN@?$CFU?$CFc?$CFU?$AA@ DB '%U%c%U', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@MONPFPIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@MONPFPIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@JDPOMHML@bootstrap?5issue?3?5python?$CFi?$CFi?4zip?5@
CONST	SEGMENT
??_C@_0FG@JDPOMHML@bootstrap?5issue?3?5python?$CFi?$CFi?4zip?5@ DB 'boots'
	DB	'trap issue: python%i%i.zip contains non-ASCII filenames witho'
	DB	'ut the unicode flag', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PAOMFHGM@cp437?$AA@
CONST	SEGMENT
??_C@_05PAOMFHGM@cp437?$AA@ DB 'cp437', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJENGABA@ascii?$AA@
CONST	SEGMENT
??_C@_05OJENGABA@ascii?$AA@ DB 'ascii', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CAMHEFLG@utf?98?$AA@
CONST	SEGMENT
??_C@_05CAMHEFLG@utf?98?$AA@ DB 'utf-8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MDJLLLPP@not?5a?5Zip?5file?3?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BD@MDJLLLPP@not?5a?5Zip?5file?3?5?$CFR?$AA@ DB 'not a Zip file: %R'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HHGCNGNN@can?8t?5read?5Zip?5file?3?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BI@HHGCNGNN@can?8t?5read?5Zip?5file?3?5?$CFR?$AA@ DB 'can''t read '
	DB	'Zip file: %R', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PKKLABEO@can?8t?5open?5Zip?5file?3?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BI@PKKLABEO@can?8t?5open?5Zip?5file?3?5?$CFR?$AA@ DB 'can''t open '
	DB	'Zip file: %R', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT read_directory
_TEXT	SEGMENT
endof_central_dir$ = 80
p$ = 104
bootstrap$ = 112
count$ = 116
crc$ = 120
files$ = 128
header_position$ = 136
file_size$ = 144
flags$ = 148
i$ = 152
fp$ = 160
nameobj$ = 168
time$ = 176
arc_offset$ = 184
name$ = 192
data_size$ = 464
header_offset$ = 472
file_offset$ = 480
l$ = 488
name_size$ = 492
date$ = 496
header_size$ = 500
path$ = 504
charset$ = 512
compress$ = 520
err$21228 = 524
t$21227 = 528
_py_tmp$21271 = 536
tv183 = 544
tv187 = 548
tv248 = 552
archive$ = 576
read_directory PROC					; COMDAT

; 855  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H

; 856  :     PyObject *files = NULL;

  0000c	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR files$[rsp], 0

; 857  :     FILE *fp;
; 858  :     unsigned short flags;
; 859  :     short compress, time, date, name_size;
; 860  :     long crc, data_size, file_size, header_size;
; 861  :     Py_ssize_t file_offset, header_position, header_offset;
; 862  :     long l, count;
; 863  :     Py_ssize_t i;
; 864  :     char name[MAXPATHLEN + 5];
; 865  :     PyObject *nameobj = NULL;

  00018	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR nameobj$[rsp], 0

; 866  :     char *p, endof_central_dir[22];
; 867  :     Py_ssize_t arc_offset;  /* Absolute offset to start of the zip-archive. */
; 868  :     PyObject *path;
; 869  :     const char *charset;
; 870  :     int bootstrap;
; 871  : 
; 872  :     fp = _Py_fopen(archive, "rb");

  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  0002b	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR archive$[rsp]
  00033	e8 00 00 00 00	 call	 _Py_fopen
  00038	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR fp$[rsp], rax

; 873  :     if (fp == NULL) {

  00040	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR fp$[rsp], 0
  00049	75 2c		 jne	 SHORT $LN48@read_direc

; 874  :         if (!PyErr_Occurred())

  0004b	e8 00 00 00 00	 call	 PyErr_Occurred
  00050	48 85 c0	 test	 rax, rax
  00053	75 1b		 jne	 SHORT $LN47@read_direc

; 875  :             PyErr_Format(ZipImportError, "can't open Zip file: %R", archive);

  00055	4c 8b 84 24 40
	02 00 00	 mov	 r8, QWORD PTR archive$[rsp]
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKKLABEO@can?8t?5open?5Zip?5file?3?5?$CFR?$AA@
  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  0006b	e8 00 00 00 00	 call	 PyErr_Format
$LN47@read_direc:

; 876  :         return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	e9 8f 07 00 00	 jmp	 $LN49@read_direc
$LN48@read_direc:

; 877  :     }
; 878  : 
; 879  :     if (fseek(fp, -22, SEEK_END) == -1) {

  00077	41 b8 02 00 00
	00		 mov	 r8d, 2
  0007d	ba ea ff ff ff	 mov	 edx, -22
  00082	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fseek
  00090	83 f8 ff	 cmp	 eax, -1
  00093	75 30		 jne	 SHORT $LN46@read_direc

; 880  :         fclose(fp);

  00095	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 881  :         PyErr_Format(ZipImportError, "can't read Zip file: %R", archive);

  000a3	4c 8b 84 24 40
	02 00 00	 mov	 r8, QWORD PTR archive$[rsp]
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HHGCNGNN@can?8t?5read?5Zip?5file?3?5?$CFR?$AA@
  000b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  000b9	e8 00 00 00 00	 call	 PyErr_Format

; 882  :         return NULL;

  000be	33 c0		 xor	 eax, eax
  000c0	e9 41 07 00 00	 jmp	 $LN49@read_direc
$LN46@read_direc:

; 883  :     }
; 884  :     header_position = ftell(fp);

  000c5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ftell
  000d3	48 98		 cdqe
  000d5	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR header_position$[rsp], rax

; 885  :     if (fread(endof_central_dir, 1, 22, fp) != 22) {

  000dd	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR fp$[rsp]
  000e5	41 b8 16 00 00
	00		 mov	 r8d, 22
  000eb	ba 01 00 00 00	 mov	 edx, 1
  000f0	48 8d 4c 24 50	 lea	 rcx, QWORD PTR endof_central_dir$[rsp]
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  000fb	48 83 f8 16	 cmp	 rax, 22
  000ff	74 30		 je	 SHORT $LN45@read_direc

; 886  :         fclose(fp);

  00101	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 887  :         PyErr_Format(ZipImportError, "can't read Zip file: %R", archive);

  0010f	4c 8b 84 24 40
	02 00 00	 mov	 r8, QWORD PTR archive$[rsp]
  00117	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HHGCNGNN@can?8t?5read?5Zip?5file?3?5?$CFR?$AA@
  0011e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  00125	e8 00 00 00 00	 call	 PyErr_Format

; 888  :         return NULL;

  0012a	33 c0		 xor	 eax, eax
  0012c	e9 d5 06 00 00	 jmp	 $LN49@read_direc
$LN45@read_direc:

; 889  :     }
; 890  :     if (get_long((unsigned char *)endof_central_dir) != 0x06054B50) {

  00131	48 8d 4c 24 50	 lea	 rcx, QWORD PTR endof_central_dir$[rsp]
  00136	e8 00 00 00 00	 call	 get_long
  0013b	3d 50 4b 05 06	 cmp	 eax, 101010256		; 06054b50H
  00140	74 30		 je	 SHORT $LN44@read_direc

; 891  :         /* Bad: End of Central Dir signature */
; 892  :         fclose(fp);

  00142	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 893  :         PyErr_Format(ZipImportError, "not a Zip file: %R", archive);

  00150	4c 8b 84 24 40
	02 00 00	 mov	 r8, QWORD PTR archive$[rsp]
  00158	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@MDJLLLPP@not?5a?5Zip?5file?3?5?$CFR?$AA@
  0015f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  00166	e8 00 00 00 00	 call	 PyErr_Format

; 894  :         return NULL;

  0016b	33 c0		 xor	 eax, eax
  0016d	e9 94 06 00 00	 jmp	 $LN49@read_direc
$LN44@read_direc:

; 895  :     }
; 896  : 
; 897  :     header_size = get_long((unsigned char *)endof_central_dir + 12);

  00172	48 8d 44 24 5c	 lea	 rax, QWORD PTR endof_central_dir$[rsp+12]
  00177	48 8b c8	 mov	 rcx, rax
  0017a	e8 00 00 00 00	 call	 get_long
  0017f	89 84 24 f4 01
	00 00		 mov	 DWORD PTR header_size$[rsp], eax

; 898  :     header_offset = get_long((unsigned char *)endof_central_dir + 16);

  00186	48 8d 44 24 60	 lea	 rax, QWORD PTR endof_central_dir$[rsp+16]
  0018b	48 8b c8	 mov	 rcx, rax
  0018e	e8 00 00 00 00	 call	 get_long
  00193	48 98		 cdqe
  00195	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR header_offset$[rsp], rax

; 899  :     arc_offset = header_position - header_offset - header_size;

  0019d	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR header_offset$[rsp]
  001a5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR header_position$[rsp]
  001ad	48 2b c8	 sub	 rcx, rax
  001b0	48 8b c1	 mov	 rax, rcx
  001b3	48 63 8c 24 f4
	01 00 00	 movsxd	 rcx, DWORD PTR header_size$[rsp]
  001bb	48 2b c1	 sub	 rax, rcx
  001be	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR arc_offset$[rsp], rax

; 900  :     header_offset += arc_offset;

  001c6	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR arc_offset$[rsp]
  001ce	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR header_offset$[rsp]
  001d6	48 03 c8	 add	 rcx, rax
  001d9	48 8b c1	 mov	 rax, rcx
  001dc	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR header_offset$[rsp], rax

; 901  : 
; 902  :     files = PyDict_New();

  001e4	e8 00 00 00 00	 call	 PyDict_New
  001e9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR files$[rsp], rax

; 903  :     if (files == NULL)

  001f1	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR files$[rsp], 0
  001fa	75 05		 jne	 SHORT $LN43@read_direc

; 904  :         goto error;

  001fc	e9 b9 05 00 00	 jmp	 $error$21223
$LN43@read_direc:

; 905  : 
; 906  :     /* Start of Central Directory */
; 907  :     count = 0;

  00201	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0
$LN42@read_direc:

; 908  :     for (;;) {
; 909  :         PyObject *t;
; 910  :         int err;
; 911  : 
; 912  :         if (fseek(fp, header_offset, 0) == -1)  /* Start of file header */

  00209	45 33 c0	 xor	 r8d, r8d
  0020c	8b 94 24 d8 01
	00 00		 mov	 edx, DWORD PTR header_offset$[rsp]
  00213	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  0021b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fseek
  00221	83 f8 ff	 cmp	 eax, -1
  00224	75 05		 jne	 SHORT $LN40@read_direc

; 913  :             goto fseek_error;

  00226	e9 26 05 00 00	 jmp	 $fseek_error$21230
$LN40@read_direc:

; 914  :         l = PyMarshal_ReadLongFromFile(fp);

  0022b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00233	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile
  00238	89 84 24 e8 01
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 915  :         if (l != 0x02014B50)

  0023f	81 bc 24 e8 01
	00 00 50 4b 01
	02		 cmp	 DWORD PTR l$[rsp], 33639248 ; 02014b50H
  0024a	74 05		 je	 SHORT $LN39@read_direc

; 916  :             break;              /* Bad: Central Dir File Header */

  0024c	e9 c4 04 00 00	 jmp	 $LN41@read_direc
$LN39@read_direc:

; 917  :         if (fseek(fp, header_offset + 8, 0) == -1)

  00251	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR header_offset$[rsp]
  00259	48 83 c0 08	 add	 rax, 8
  0025d	45 33 c0	 xor	 r8d, r8d
  00260	8b d0		 mov	 edx, eax
  00262	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  0026a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fseek
  00270	83 f8 ff	 cmp	 eax, -1
  00273	75 05		 jne	 SHORT $LN38@read_direc

; 918  :             goto fseek_error;

  00275	e9 d7 04 00 00	 jmp	 $fseek_error$21230
$LN38@read_direc:

; 919  :         flags = (unsigned short)PyMarshal_ReadShortFromFile(fp);

  0027a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00282	e8 00 00 00 00	 call	 PyMarshal_ReadShortFromFile
  00287	66 89 84 24 94
	00 00 00	 mov	 WORD PTR flags$[rsp], ax

; 920  :         compress = PyMarshal_ReadShortFromFile(fp);

  0028f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00297	e8 00 00 00 00	 call	 PyMarshal_ReadShortFromFile
  0029c	66 89 84 24 08
	02 00 00	 mov	 WORD PTR compress$[rsp], ax

; 921  :         time = PyMarshal_ReadShortFromFile(fp);

  002a4	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  002ac	e8 00 00 00 00	 call	 PyMarshal_ReadShortFromFile
  002b1	66 89 84 24 b0
	00 00 00	 mov	 WORD PTR time$[rsp], ax

; 922  :         date = PyMarshal_ReadShortFromFile(fp);

  002b9	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  002c1	e8 00 00 00 00	 call	 PyMarshal_ReadShortFromFile
  002c6	66 89 84 24 f0
	01 00 00	 mov	 WORD PTR date$[rsp], ax

; 923  :         crc = PyMarshal_ReadLongFromFile(fp);

  002ce	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  002d6	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile
  002db	89 44 24 78	 mov	 DWORD PTR crc$[rsp], eax

; 924  :         data_size = PyMarshal_ReadLongFromFile(fp);

  002df	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  002e7	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile
  002ec	89 84 24 d0 01
	00 00		 mov	 DWORD PTR data_size$[rsp], eax

; 925  :         file_size = PyMarshal_ReadLongFromFile(fp);

  002f3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  002fb	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile
  00300	89 84 24 90 00
	00 00		 mov	 DWORD PTR file_size$[rsp], eax

; 926  :         name_size = PyMarshal_ReadShortFromFile(fp);

  00307	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  0030f	e8 00 00 00 00	 call	 PyMarshal_ReadShortFromFile
  00314	66 89 84 24 ec
	01 00 00	 mov	 WORD PTR name_size$[rsp], ax

; 927  :         header_size = 46 + name_size +
; 928  :            PyMarshal_ReadShortFromFile(fp) +
; 929  :            PyMarshal_ReadShortFromFile(fp);

  0031c	0f bf 84 24 ec
	01 00 00	 movsx	 eax, WORD PTR name_size$[rsp]
  00324	89 84 24 20 02
	00 00		 mov	 DWORD PTR tv183[rsp], eax
  0032b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00333	e8 00 00 00 00	 call	 PyMarshal_ReadShortFromFile
  00338	8b 8c 24 20 02
	00 00		 mov	 ecx, DWORD PTR tv183[rsp]
  0033f	8d 44 01 2e	 lea	 eax, DWORD PTR [rcx+rax+46]
  00343	89 84 24 24 02
	00 00		 mov	 DWORD PTR tv187[rsp], eax
  0034a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00352	e8 00 00 00 00	 call	 PyMarshal_ReadShortFromFile
  00357	8b 8c 24 24 02
	00 00		 mov	 ecx, DWORD PTR tv187[rsp]
  0035e	03 c8		 add	 ecx, eax
  00360	8b c1		 mov	 eax, ecx
  00362	89 84 24 f4 01
	00 00		 mov	 DWORD PTR header_size$[rsp], eax

; 930  :         if (fseek(fp, header_offset + 42, 0) == -1)

  00369	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR header_offset$[rsp]
  00371	48 83 c0 2a	 add	 rax, 42			; 0000002aH
  00375	45 33 c0	 xor	 r8d, r8d
  00378	8b d0		 mov	 edx, eax
  0037a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00382	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fseek
  00388	83 f8 ff	 cmp	 eax, -1
  0038b	75 05		 jne	 SHORT $LN37@read_direc

; 931  :             goto fseek_error;

  0038d	e9 bf 03 00 00	 jmp	 $fseek_error$21230
$LN37@read_direc:

; 932  :         file_offset = PyMarshal_ReadLongFromFile(fp) + arc_offset;

  00392	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  0039a	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile
  0039f	48 98		 cdqe
  003a1	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR arc_offset$[rsp]
  003a9	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR file_offset$[rsp], rax

; 933  :         if (name_size > MAXPATHLEN)

  003b1	0f bf 84 24 ec
	01 00 00	 movsx	 eax, WORD PTR name_size$[rsp]
  003b9	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  003be	7e 0d		 jle	 SHORT $LN36@read_direc

; 934  :             name_size = MAXPATHLEN;

  003c0	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  003c5	66 89 84 24 ec
	01 00 00	 mov	 WORD PTR name_size$[rsp], ax
$LN36@read_direc:

; 935  : 
; 936  :         p = name;

  003cd	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR name$[rsp]
  003d5	48 89 44 24 68	 mov	 QWORD PTR p$[rsp], rax

; 937  :         for (i = 0; i < (Py_ssize_t)name_size; i++) {

  003da	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  003e6	eb 13		 jmp	 SHORT $LN35@read_direc
$LN34@read_direc:
  003e8	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  003f0	48 ff c0	 inc	 rax
  003f3	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN35@read_direc:
  003fb	48 0f bf 84 24
	ec 01 00 00	 movsx	 rax, WORD PTR name_size$[rsp]
  00404	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  0040c	7d 39		 jge	 SHORT $LN33@read_direc

; 938  :             *p = (char)getc(fp);

  0040e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00416	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getc
  0041c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR p$[rsp]
  00421	88 01		 mov	 BYTE PTR [rcx], al

; 939  :             if (*p == '/')

  00423	48 8b 44 24 68	 mov	 rax, QWORD PTR p$[rsp]
  00428	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0042b	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0042e	75 08		 jne	 SHORT $LN32@read_direc

; 940  :                 *p = SEP;

  00430	48 8b 44 24 68	 mov	 rax, QWORD PTR p$[rsp]
  00435	c6 00 5c	 mov	 BYTE PTR [rax], 92	; 0000005cH
$LN32@read_direc:

; 941  :             p++;

  00438	48 8b 44 24 68	 mov	 rax, QWORD PTR p$[rsp]
  0043d	48 ff c0	 inc	 rax
  00440	48 89 44 24 68	 mov	 QWORD PTR p$[rsp], rax

; 942  :         }

  00445	eb a1		 jmp	 SHORT $LN34@read_direc
$LN33@read_direc:

; 943  :         *p = 0;         /* Add terminating null byte */

  00447	48 8b 44 24 68	 mov	 rax, QWORD PTR p$[rsp]
  0044c	c6 00 00	 mov	 BYTE PTR [rax], 0

; 944  :         header_offset += header_size;

  0044f	48 63 84 24 f4
	01 00 00	 movsxd	 rax, DWORD PTR header_size$[rsp]
  00457	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR header_offset$[rsp]
  0045f	48 03 c8	 add	 rcx, rax
  00462	48 8b c1	 mov	 rax, rcx
  00465	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR header_offset$[rsp], rax

; 945  : 
; 946  :         bootstrap = 0;

  0046d	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR bootstrap$[rsp], 0

; 947  :         if (flags & 0x0800)

  00475	0f b7 84 24 94
	00 00 00	 movzx	 eax, WORD PTR flags$[rsp]
  0047d	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00482	85 c0		 test	 eax, eax
  00484	74 11		 je	 SHORT $LN31@read_direc

; 948  :             charset = "utf-8";

  00486	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05CAMHEFLG@utf?98?$AA@
  0048d	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR charset$[rsp], rax
  00495	eb 37		 jmp	 SHORT $LN30@read_direc
$LN31@read_direc:

; 949  :         else if (!PyThreadState_GET()->interp->codecs_initialized) {

  00497	e8 00 00 00 00	 call	 PyThreadState_Get
  0049c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  004a0	83 78 50 00	 cmp	 DWORD PTR [rax+80], 0
  004a4	75 19		 jne	 SHORT $LN29@read_direc

; 950  :             /* During bootstrap, we may need to load the encodings
; 951  :                package from a ZIP file. But the cp437 encoding is implemented
; 952  :                in Python in the encodings package.
; 953  : 
; 954  :                Break out of this dependency by assuming that the path to
; 955  :                the encodings module is ASCII-only. */
; 956  :             charset = "ascii";

  004a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05OJENGABA@ascii?$AA@
  004ad	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR charset$[rsp], rax

; 957  :             bootstrap = 1;

  004b5	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR bootstrap$[rsp], 1

; 958  :         }
; 959  :         else

  004bd	eb 0f		 jmp	 SHORT $LN28@read_direc
$LN29@read_direc:

; 960  :             charset = "cp437";

  004bf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05PAOMFHGM@cp437?$AA@
  004c6	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR charset$[rsp], rax
$LN28@read_direc:
$LN30@read_direc:

; 961  :         nameobj = PyUnicode_Decode(name, name_size, charset, NULL);

  004ce	48 0f bf 84 24
	ec 01 00 00	 movsx	 rax, WORD PTR name_size$[rsp]
  004d7	45 33 c9	 xor	 r9d, r9d
  004da	4c 8b 84 24 00
	02 00 00	 mov	 r8, QWORD PTR charset$[rsp]
  004e2	48 8b d0	 mov	 rdx, rax
  004e5	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR name$[rsp]
  004ed	e8 00 00 00 00	 call	 PyUnicode_Decode
  004f2	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR nameobj$[rsp], rax

; 962  :         if (nameobj == NULL) {

  004fa	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR nameobj$[rsp], 0
  00503	75 2b		 jne	 SHORT $LN27@read_direc

; 963  :             if (bootstrap)

  00505	83 7c 24 70 00	 cmp	 DWORD PTR bootstrap$[rsp], 0
  0050a	74 1f		 je	 SHORT $LN26@read_direc

; 964  :                 PyErr_Format(PyExc_NotImplementedError,
; 965  :                     "bootstrap issue: python%i%i.zip contains non-ASCII "
; 966  :                     "filenames without the unicode flag",
; 967  :                     PY_MAJOR_VERSION, PY_MINOR_VERSION);

  0050c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00512	41 b8 03 00 00
	00		 mov	 r8d, 3
  00518	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FG@JDPOMHML@bootstrap?5issue?3?5python?$CFi?$CFi?4zip?5@
  0051f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_NotImplementedError
  00526	e8 00 00 00 00	 call	 PyErr_Format
$LN26@read_direc:

; 968  :             goto error;

  0052b	e9 8a 02 00 00	 jmp	 $error$21223
$LN27@read_direc:

; 969  :         }
; 970  :         if (PyUnicode_READY(nameobj) == -1)

  00530	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR nameobj$[rsp]
  00538	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0053c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00542	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00547	85 c0		 test	 eax, eax
  00549	75 1c		 jne	 SHORT $LN51@read_direc
  0054b	41 b8 ca 03 00
	00		 mov	 r8d, 970		; 000003caH
  00551	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00558	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MONPFPIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0055f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00565	33 c0		 xor	 eax, eax
$LN51@read_direc:
  00567	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR nameobj$[rsp]
  0056f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00572	c1 e8 07	 shr	 eax, 7
  00575	83 e0 01	 and	 eax, 1
  00578	85 c0		 test	 eax, eax
  0057a	74 0d		 je	 SHORT $LN52@read_direc
  0057c	c7 84 24 28 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv248[rsp], 0
  00587	eb 14		 jmp	 SHORT $LN53@read_direc
$LN52@read_direc:
  00589	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR nameobj$[rsp]
  00591	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00596	89 84 24 28 02
	00 00		 mov	 DWORD PTR tv248[rsp], eax
$LN53@read_direc:
  0059d	83 bc 24 28 02
	00 00 ff	 cmp	 DWORD PTR tv248[rsp], -1
  005a5	75 05		 jne	 SHORT $LN25@read_direc

; 971  :             goto error;

  005a7	e9 0e 02 00 00	 jmp	 $error$21223
$LN25@read_direc:

; 972  :         path = PyUnicode_FromFormat("%U%c%U", archive, SEP, nameobj);

  005ac	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR nameobj$[rsp]
  005b4	41 b8 5c 00 00
	00		 mov	 r8d, 92			; 0000005cH
  005ba	48 8b 94 24 40
	02 00 00	 mov	 rdx, QWORD PTR archive$[rsp]
  005c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HKKNHKHN@?$CFU?$CFc?$CFU?$AA@
  005c9	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  005ce	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR path$[rsp], rax

; 973  :         if (path == NULL)

  005d6	48 83 bc 24 f8
	01 00 00 00	 cmp	 QWORD PTR path$[rsp], 0
  005df	75 05		 jne	 SHORT $LN24@read_direc

; 974  :             goto error;

  005e1	e9 d4 01 00 00	 jmp	 $error$21223
$LN24@read_direc:

; 975  :         t = Py_BuildValue("Nhllnhhl", path, compress, data_size,
; 976  :                           file_size, file_offset, time, date, crc);

  005e6	0f bf 84 24 f0
	01 00 00	 movsx	 eax, WORD PTR date$[rsp]
  005ee	0f bf 8c 24 b0
	00 00 00	 movsx	 ecx, WORD PTR time$[rsp]
  005f6	0f bf 94 24 08
	02 00 00	 movsx	 edx, WORD PTR compress$[rsp]
  005fe	44 8b 44 24 78	 mov	 r8d, DWORD PTR crc$[rsp]
  00603	44 89 44 24 40	 mov	 DWORD PTR [rsp+64], r8d
  00608	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0060c	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  00610	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR file_offset$[rsp]
  00618	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0061d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR file_size$[rsp]
  00624	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00628	44 8b 8c 24 d0
	01 00 00	 mov	 r9d, DWORD PTR data_size$[rsp]
  00630	44 8b c2	 mov	 r8d, edx
  00633	48 8b 94 24 f8
	01 00 00	 mov	 rdx, QWORD PTR path$[rsp]
  0063b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GIJEMJIJ@Nhllnhhl?$AA@
  00642	e8 00 00 00 00	 call	 Py_BuildValue
  00647	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR t$21227[rsp], rax

; 977  :         if (t == NULL)

  0064f	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR t$21227[rsp], 0
  00658	75 05		 jne	 SHORT $LN23@read_direc

; 978  :             goto error;

  0065a	e9 5b 01 00 00	 jmp	 $error$21223
$LN23@read_direc:

; 979  :         err = PyDict_SetItem(files, nameobj, t);

  0065f	4c 8b 84 24 10
	02 00 00	 mov	 r8, QWORD PTR t$21227[rsp]
  00667	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR nameobj$[rsp]
  0066f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR files$[rsp]
  00677	e8 00 00 00 00	 call	 PyDict_SetItem
  0067c	89 84 24 0c 02
	00 00		 mov	 DWORD PTR err$21228[rsp], eax
$LN22@read_direc:

; 980  :         Py_CLEAR(nameobj);

  00683	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR nameobj$[rsp], 0
  0068c	74 56		 je	 SHORT $LN19@read_direc
  0068e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00696	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR nameobj$[rsp]
  0069e	41 b8 d4 03 00
	00		 mov	 r8d, 980		; 000003d4H
  006a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@DCMIAMFE@?4?4?2Modules?2zipimport?4c?$AA@
  006ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@MKDHMPFK@read_directory?$AA@
  006b2	e8 00 00 00 00	 call	 _PyParallel_Guard
  006b7	85 c0		 test	 eax, eax
  006b9	75 29		 jne	 SHORT $LN19@read_direc
  006bb	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR nameobj$[rsp]
  006c3	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR _py_tmp$21271[rsp], rax
  006cb	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR nameobj$[rsp], 0
  006d7	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _py_tmp$21271[rsp]
  006df	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@read_direc:
  006e4	33 c0		 xor	 eax, eax
  006e6	85 c0		 test	 eax, eax
  006e8	75 99		 jne	 SHORT $LN22@read_direc

; 981  :         Py_DECREF(t);

  006ea	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR t$21227[rsp]
  006f2	e8 00 00 00 00	 call	 _Py_DecRef

; 982  :         if (err != 0)

  006f7	83 bc 24 0c 02
	00 00 00	 cmp	 DWORD PTR err$21228[rsp], 0
  006ff	74 05		 je	 SHORT $LN18@read_direc

; 983  :             goto error;

  00701	e9 b4 00 00 00	 jmp	 $error$21223
$LN18@read_direc:

; 984  :         count++;

  00706	8b 44 24 74	 mov	 eax, DWORD PTR count$[rsp]
  0070a	ff c0		 inc	 eax
  0070c	89 44 24 74	 mov	 DWORD PTR count$[rsp], eax

; 985  :     }

  00710	e9 f4 fa ff ff	 jmp	 $LN42@read_direc
$LN41@read_direc:

; 986  :     fclose(fp);

  00715	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  0071d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 987  :     if (Py_VerboseFlag)

  00723	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0072a	74 18		 je	 SHORT $LN17@read_direc

; 988  :         PySys_FormatStderr("# zipimport: found %ld names in %R\n",
; 989  :                            count, archive);

  0072c	4c 8b 84 24 40
	02 00 00	 mov	 r8, QWORD PTR archive$[rsp]
  00734	8b 54 24 74	 mov	 edx, DWORD PTR count$[rsp]
  00738	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@DAGBHPLA@?$CD?5zipimport?3?5found?5?$CFld?5names?5in?5@
  0073f	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN17@read_direc:

; 990  :     return files;

  00744	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR files$[rsp]
  0074c	e9 b5 00 00 00	 jmp	 $LN49@read_direc
$fseek_error$21230:

; 991  : fseek_error:
; 992  :     fclose(fp);

  00751	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  00759	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN16@read_direc:

; 993  :     Py_XDECREF(files);

  0075f	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR files$[rsp], 0
  00768	74 0d		 je	 SHORT $LN13@read_direc
  0076a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR files$[rsp]
  00772	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@read_direc:
  00777	33 c0		 xor	 eax, eax
  00779	85 c0		 test	 eax, eax
  0077b	75 e2		 jne	 SHORT $LN16@read_direc
$LN12@read_direc:

; 994  :     Py_XDECREF(nameobj);

  0077d	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR nameobj$[rsp], 0
  00786	74 0d		 je	 SHORT $LN9@read_direc
  00788	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR nameobj$[rsp]
  00790	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@read_direc:
  00795	33 c0		 xor	 eax, eax
  00797	85 c0		 test	 eax, eax
  00799	75 e2		 jne	 SHORT $LN12@read_direc

; 995  :     PyErr_Format(ZipImportError, "can't read Zip file: %R", archive);

  0079b	4c 8b 84 24 40
	02 00 00	 mov	 r8, QWORD PTR archive$[rsp]
  007a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HHGCNGNN@can?8t?5read?5Zip?5file?3?5?$CFR?$AA@
  007aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  007b1	e8 00 00 00 00	 call	 PyErr_Format

; 996  :     return NULL;

  007b6	33 c0		 xor	 eax, eax
  007b8	eb 4c		 jmp	 SHORT $LN49@read_direc
$error$21223:

; 997  : error:
; 998  :     fclose(fp);

  007ba	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fp$[rsp]
  007c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN8@read_direc:

; 999  :     Py_XDECREF(files);

  007c8	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR files$[rsp], 0
  007d1	74 0d		 je	 SHORT $LN5@read_direc
  007d3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR files$[rsp]
  007db	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@read_direc:
  007e0	33 c0		 xor	 eax, eax
  007e2	85 c0		 test	 eax, eax
  007e4	75 e2		 jne	 SHORT $LN8@read_direc
$LN4@read_direc:

; 1000 :     Py_XDECREF(nameobj);

  007e6	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR nameobj$[rsp], 0
  007ef	74 0d		 je	 SHORT $LN1@read_direc
  007f1	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR nameobj$[rsp]
  007f9	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@read_direc:
  007fe	33 c0		 xor	 eax, eax
  00800	85 c0		 test	 eax, eax
  00802	75 e2		 jne	 SHORT $LN4@read_direc

; 1001 :     return NULL;

  00804	33 c0		 xor	 eax, eax
$LN49@read_direc:

; 1002 : }

  00806	48 81 c4 38 02
	00 00		 add	 rsp, 568		; 00000238H
  0080d	c3		 ret	 0
read_directory ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_long DD imagerel get_long
	DD	imagerel get_long+94
	DD	imagerel $unwind$get_long
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_long DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT get_long
_TEXT	SEGMENT
x$ = 0
buf$ = 32
get_long PROC						; COMDAT

; 818  : get_long(unsigned char *buf) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 819  :     long x;
; 820  :     x =  buf[0];

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  0000e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00011	89 04 24	 mov	 DWORD PTR x$[rsp], eax

; 821  :     x |= (long)buf[1] <<  8;

  00014	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  00019	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0001d	c1 e0 08	 shl	 eax, 8
  00020	8b 0c 24	 mov	 ecx, DWORD PTR x$[rsp]
  00023	0b c8		 or	 ecx, eax
  00025	8b c1		 mov	 eax, ecx
  00027	89 04 24	 mov	 DWORD PTR x$[rsp], eax

; 822  :     x |= (long)buf[2] << 16;

  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  0002f	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00033	c1 e0 10	 shl	 eax, 16
  00036	8b 0c 24	 mov	 ecx, DWORD PTR x$[rsp]
  00039	0b c8		 or	 ecx, eax
  0003b	8b c1		 mov	 eax, ecx
  0003d	89 04 24	 mov	 DWORD PTR x$[rsp], eax

; 823  :     x |= (long)buf[3] << 24;

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  00045	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00049	c1 e0 18	 shl	 eax, 24
  0004c	8b 0c 24	 mov	 ecx, DWORD PTR x$[rsp]
  0004f	0b c8		 or	 ecx, eax
  00051	8b c1		 mov	 eax, ecx
  00053	89 04 24	 mov	 DWORD PTR x$[rsp], eax

; 824  : #if SIZEOF_LONG > 4
; 825  :     /* Sign extension for 64-bit machines */
; 826  :     x |= -(x & 0x80000000L);
; 827  : #endif
; 828  :     return x;

  00056	8b 04 24	 mov	 eax, DWORD PTR x$[rsp]

; 829  : }

  00059	48 83 c4 18	 add	 rsp, 24
  0005d	c3		 ret	 0
get_long ENDP
_TEXT	ENDS
PUBLIC	??_C@_02MPEHDMPO@Oi?$AA@			; `string'
PUBLIC	??_C@_0CK@CJGFPDKD@can?8t?5decompress?5data?$DL?5zlib?5not?5@ ; `string'
PUBLIC	??_C@_0BL@JLFLPJLA@zipimport?3?5can?8t?5read?5data?$AA@ ; `string'
PUBLIC	??_C@_0BM@NKCFKAJN@bad?5local?5file?5header?5in?5?$CFU?$AA@ ; `string'
PUBLIC	??_C@_0CA@GMBDHGEN@zipimport?3?5can?5not?5open?5file?5?$CFU?$AA@ ; `string'
PUBLIC	??_C@_08JAOLPNL@Olllllll?$AA@			; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyBytes_AsString:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_data DD imagerel get_data
	DD	imagerel get_data+1102
	DD	imagerel $unwind$get_data
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_data DD 021101H
	DD	01b0111H
xdata	ENDS
;	COMDAT ??_C@_02MPEHDMPO@Oi?$AA@
CONST	SEGMENT
??_C@_02MPEHDMPO@Oi?$AA@ DB 'Oi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CJGFPDKD@can?8t?5decompress?5data?$DL?5zlib?5not?5@
CONST	SEGMENT
??_C@_0CK@CJGFPDKD@can?8t?5decompress?5data?$DL?5zlib?5not?5@ DB 'can''t '
	DB	'decompress data; zlib not available', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JLFLPJLA@zipimport?3?5can?8t?5read?5data?$AA@
CONST	SEGMENT
??_C@_0BL@JLFLPJLA@zipimport?3?5can?8t?5read?5data?$AA@ DB 'zipimport: ca'
	DB	'n''t read data', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NKCFKAJN@bad?5local?5file?5header?5in?5?$CFU?$AA@
CONST	SEGMENT
??_C@_0BM@NKCFKAJN@bad?5local?5file?5header?5in?5?$CFU?$AA@ DB 'bad local'
	DB	' file header in %U', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GMBDHGEN@zipimport?3?5can?5not?5open?5file?5?$CFU?$AA@
CONST	SEGMENT
??_C@_0CA@GMBDHGEN@zipimport?3?5can?5not?5open?5file?5?$CFU?$AA@ DB 'zipi'
	DB	'mport: can not open file %U', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JAOLPNL@Olllllll?$AA@
CONST	SEGMENT
??_C@_08JAOLPNL@Olllllll?$AA@ DB 'Olllllll', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_data
_TEXT	SEGMENT
crc$ = 80
file_size$ = 84
bytes_size$ = 88
fp$ = 96
decompress$ = 104
time$ = 112
raw_data$ = 120
data_size$ = 128
datapath$ = 136
buf$ = 144
file_offset$ = 152
bytes_read$ = 160
date$ = 168
l$ = 172
data$ = 176
err$ = 184
compress$ = 188
tv139 = 192
tv152 = 196
archive$ = 224
toc_entry$ = 232
get_data PROC						; COMDAT

; 1041 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 1042 :     PyObject *raw_data, *data = NULL, *decompress;

  00011	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR data$[rsp], 0

; 1043 :     char *buf;
; 1044 :     FILE *fp;
; 1045 :     int err;
; 1046 :     Py_ssize_t bytes_read = 0;

  0001d	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR bytes_read$[rsp], 0

; 1047 :     long l;
; 1048 :     PyObject *datapath;
; 1049 :     long compress, data_size, file_size, file_offset, bytes_size;
; 1050 :     long time, date, crc;
; 1051 : 
; 1052 :     if (!PyArg_ParseTuple(toc_entry, "Olllllll", &datapath, &compress,
; 1053 :                           &data_size, &file_size, &file_offset, &time,
; 1054 :                           &date, &crc)) {

  00029	48 8d 44 24 50	 lea	 rax, QWORD PTR crc$[rsp]
  0002e	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00033	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR date$[rsp]
  0003b	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00040	48 8d 44 24 70	 lea	 rax, QWORD PTR time$[rsp]
  00045	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0004a	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR file_offset$[rsp]
  00052	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00057	48 8d 44 24 54	 lea	 rax, QWORD PTR file_size$[rsp]
  0005c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00061	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR data_size$[rsp]
  00069	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006e	4c 8d 8c 24 bc
	00 00 00	 lea	 r9, QWORD PTR compress$[rsp]
  00076	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR datapath$[rsp]
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08JAOLPNL@Olllllll?$AA@
  00085	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR toc_entry$[rsp]
  0008d	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00092	85 c0		 test	 eax, eax
  00094	75 07		 jne	 SHORT $LN15@get_data

; 1055 :         return NULL;

  00096	33 c0		 xor	 eax, eax
  00098	e9 a9 03 00 00	 jmp	 $LN16@get_data
$LN15@get_data:

; 1056 :     }
; 1057 : 
; 1058 :     fp = _Py_fopen(archive, "rb");

  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  000a4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR archive$[rsp]
  000ac	e8 00 00 00 00	 call	 _Py_fopen
  000b1	48 89 44 24 60	 mov	 QWORD PTR fp$[rsp], rax

; 1059 :     if (!fp) {

  000b6	48 83 7c 24 60
	00		 cmp	 QWORD PTR fp$[rsp], 0
  000bc	75 2c		 jne	 SHORT $LN14@get_data

; 1060 :         if (!PyErr_Occurred())

  000be	e8 00 00 00 00	 call	 PyErr_Occurred
  000c3	48 85 c0	 test	 rax, rax
  000c6	75 1b		 jne	 SHORT $LN13@get_data

; 1061 :             PyErr_Format(PyExc_IOError,
; 1062 :                "zipimport: can not open file %U", archive);

  000c8	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR archive$[rsp]
  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@GMBDHGEN@zipimport?3?5can?5not?5open?5file?5?$CFU?$AA@
  000d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000de	e8 00 00 00 00	 call	 PyErr_Format
$LN13@get_data:

; 1063 :         return NULL;

  000e3	33 c0		 xor	 eax, eax
  000e5	e9 5c 03 00 00	 jmp	 $LN16@get_data
$LN14@get_data:

; 1064 :     }
; 1065 : 
; 1066 :     /* Check to make sure the local file header is correct */
; 1067 :     if (fseek(fp, file_offset, 0) == -1) {

  000ea	45 33 c0	 xor	 r8d, r8d
  000ed	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR file_offset$[rsp]
  000f4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fseek
  000ff	83 f8 ff	 cmp	 eax, -1
  00102	75 2d		 jne	 SHORT $LN12@get_data

; 1068 :         fclose(fp);

  00104	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 1069 :         PyErr_Format(ZipImportError, "can't read Zip file: %R", archive);

  0010f	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR archive$[rsp]
  00117	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HHGCNGNN@can?8t?5read?5Zip?5file?3?5?$CFR?$AA@
  0011e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  00125	e8 00 00 00 00	 call	 PyErr_Format

; 1070 :         return NULL;

  0012a	33 c0		 xor	 eax, eax
  0012c	e9 15 03 00 00	 jmp	 $LN16@get_data
$LN12@get_data:

; 1071 :     }
; 1072 : 
; 1073 :     l = PyMarshal_ReadLongFromFile(fp);

  00131	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  00136	e8 00 00 00 00	 call	 PyMarshal_ReadLongFromFile
  0013b	89 84 24 ac 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 1074 :     if (l != 0x04034B50) {

  00142	81 bc 24 ac 00
	00 00 50 4b 03
	04		 cmp	 DWORD PTR l$[rsp], 67324752 ; 04034b50H
  0014d	74 2d		 je	 SHORT $LN11@get_data

; 1075 :         /* Bad: Local File Header */
; 1076 :         PyErr_Format(ZipImportError,
; 1077 :                      "bad local file header in %U",
; 1078 :                      archive);

  0014f	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR archive$[rsp]
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@NKCFKAJN@bad?5local?5file?5header?5in?5?$CFU?$AA@
  0015e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  00165	e8 00 00 00 00	 call	 PyErr_Format

; 1079 :         fclose(fp);

  0016a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  0016f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 1080 :         return NULL;

  00175	33 c0		 xor	 eax, eax
  00177	e9 ca 02 00 00	 jmp	 $LN16@get_data
$LN11@get_data:

; 1081 :     }
; 1082 :     if (fseek(fp, file_offset + 26, 0) == -1) {

  0017c	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR file_offset$[rsp]
  00183	83 c0 1a	 add	 eax, 26
  00186	45 33 c0	 xor	 r8d, r8d
  00189	8b d0		 mov	 edx, eax
  0018b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  00190	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fseek
  00196	83 f8 ff	 cmp	 eax, -1
  00199	75 2d		 jne	 SHORT $LN10@get_data

; 1083 :         fclose(fp);

  0019b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 1084 :         PyErr_Format(ZipImportError, "can't read Zip file: %R", archive);

  001a6	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR archive$[rsp]
  001ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HHGCNGNN@can?8t?5read?5Zip?5file?3?5?$CFR?$AA@
  001b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  001bc	e8 00 00 00 00	 call	 PyErr_Format

; 1085 :         return NULL;

  001c1	33 c0		 xor	 eax, eax
  001c3	e9 7e 02 00 00	 jmp	 $LN16@get_data
$LN10@get_data:

; 1086 :     }
; 1087 : 
; 1088 :     l = 30 + PyMarshal_ReadShortFromFile(fp) +
; 1089 :         PyMarshal_ReadShortFromFile(fp);        /* local header size */

  001c8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  001cd	e8 00 00 00 00	 call	 PyMarshal_ReadShortFromFile
  001d2	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv139[rsp], eax
  001d9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  001de	e8 00 00 00 00	 call	 PyMarshal_ReadShortFromFile
  001e3	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv139[rsp]
  001ea	8d 44 01 1e	 lea	 eax, DWORD PTR [rcx+rax+30]
  001ee	89 84 24 ac 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 1090 :     file_offset += l;           /* Start of file data */

  001f5	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  001fc	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR file_offset$[rsp]
  00203	03 c8		 add	 ecx, eax
  00205	8b c1		 mov	 eax, ecx
  00207	89 84 24 98 00
	00 00		 mov	 DWORD PTR file_offset$[rsp], eax

; 1091 : 
; 1092 :     bytes_size = compress == 0 ? data_size : data_size + 1;

  0020e	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR compress$[rsp], 0
  00216	75 10		 jne	 SHORT $LN18@get_data
  00218	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR data_size$[rsp]
  0021f	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv152[rsp], eax
  00226	eb 10		 jmp	 SHORT $LN19@get_data
$LN18@get_data:
  00228	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR data_size$[rsp]
  0022f	ff c0		 inc	 eax
  00231	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv152[rsp], eax
$LN19@get_data:
  00238	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv152[rsp]
  0023f	89 44 24 58	 mov	 DWORD PTR bytes_size$[rsp], eax

; 1093 :     if (bytes_size == 0)

  00243	83 7c 24 58 00	 cmp	 DWORD PTR bytes_size$[rsp], 0
  00248	75 0a		 jne	 SHORT $LN9@get_data

; 1094 :         bytes_size++;

  0024a	8b 44 24 58	 mov	 eax, DWORD PTR bytes_size$[rsp]
  0024e	ff c0		 inc	 eax
  00250	89 44 24 58	 mov	 DWORD PTR bytes_size$[rsp], eax
$LN9@get_data:

; 1095 :     raw_data = PyBytes_FromStringAndSize((char *)NULL, bytes_size);

  00254	48 63 44 24 58	 movsxd	 rax, DWORD PTR bytes_size$[rsp]
  00259	48 8b d0	 mov	 rdx, rax
  0025c	33 c9		 xor	 ecx, ecx
  0025e	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00263	48 89 44 24 78	 mov	 QWORD PTR raw_data$[rsp], rax

; 1096 : 
; 1097 :     if (raw_data == NULL) {

  00268	48 83 7c 24 78
	00		 cmp	 QWORD PTR raw_data$[rsp], 0
  0026e	75 12		 jne	 SHORT $LN8@get_data

; 1098 :         fclose(fp);

  00270	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  00275	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 1099 :         return NULL;

  0027b	33 c0		 xor	 eax, eax
  0027d	e9 c4 01 00 00	 jmp	 $LN16@get_data
$LN8@get_data:

; 1100 :     }
; 1101 :     buf = PyBytes_AsString(raw_data);

  00282	48 8b 4c 24 78	 mov	 rcx, QWORD PTR raw_data$[rsp]
  00287	e8 00 00 00 00	 call	 PyBytes_AsString
  0028c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR buf$[rsp], rax

; 1102 : 
; 1103 :     err = fseek(fp, file_offset, 0);

  00294	45 33 c0	 xor	 r8d, r8d
  00297	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR file_offset$[rsp]
  0029e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  002a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fseek
  002a9	89 84 24 b8 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 1104 :     if (err == 0) {

  002b0	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  002b8	75 2d		 jne	 SHORT $LN7@get_data

; 1105 :         bytes_read = fread(buf, 1, data_size, fp);

  002ba	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR data_size$[rsp]
  002c2	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fp$[rsp]
  002c7	4c 8b c0	 mov	 r8, rax
  002ca	ba 01 00 00 00	 mov	 edx, 1
  002cf	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  002d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  002dd	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR bytes_read$[rsp], rax

; 1106 :     } else {

  002e5	eb 2d		 jmp	 SHORT $LN6@get_data
$LN7@get_data:

; 1107 :         fclose(fp);

  002e7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  002ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 1108 :         PyErr_Format(ZipImportError, "can't read Zip file: %R", archive);

  002f2	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR archive$[rsp]
  002fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@HHGCNGNN@can?8t?5read?5Zip?5file?3?5?$CFR?$AA@
  00301	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  00308	e8 00 00 00 00	 call	 PyErr_Format

; 1109 :         return NULL;

  0030d	33 c0		 xor	 eax, eax
  0030f	e9 32 01 00 00	 jmp	 $LN16@get_data
$LN6@get_data:

; 1110 :     }
; 1111 :     fclose(fp);

  00314	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fp$[rsp]
  00319	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 1112 :     if (err || bytes_read != data_size) {

  0031f	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  00327	75 12		 jne	 SHORT $LN4@get_data
  00329	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR data_size$[rsp]
  00331	48 39 84 24 a0
	00 00 00	 cmp	 QWORD PTR bytes_read$[rsp], rax
  00339	74 24		 je	 SHORT $LN5@get_data
$LN4@get_data:

; 1113 :         PyErr_SetString(PyExc_IOError,
; 1114 :                         "zipimport: can't read data");

  0033b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@JLFLPJLA@zipimport?3?5can?8t?5read?5data?$AA@
  00342	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00349	e8 00 00 00 00	 call	 PyErr_SetString

; 1115 :         Py_DECREF(raw_data);

  0034e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR raw_data$[rsp]
  00353	e8 00 00 00 00	 call	 _Py_DecRef

; 1116 :         return NULL;

  00358	33 c0		 xor	 eax, eax
  0035a	e9 e7 00 00 00	 jmp	 $LN16@get_data
$LN5@get_data:

; 1117 :     }
; 1118 : 
; 1119 :     if (compress != 0) {

  0035f	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR compress$[rsp], 0
  00367	74 24		 je	 SHORT $LN3@get_data

; 1120 :         buf[data_size] = 'Z';  /* saw this in zipfile.py */

  00369	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR data_size$[rsp]
  00371	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00379	c6 04 01 5a	 mov	 BYTE PTR [rcx+rax], 90	; 0000005aH

; 1121 :         data_size++;

  0037d	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR data_size$[rsp]
  00384	ff c0		 inc	 eax
  00386	89 84 24 80 00
	00 00		 mov	 DWORD PTR data_size$[rsp], eax
$LN3@get_data:

; 1122 :     }
; 1123 :     buf[data_size] = '\0';

  0038d	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR data_size$[rsp]
  00395	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0039d	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1124 : 
; 1125 :     if (compress == 0) {  /* data is not compressed */

  003a1	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR compress$[rsp], 0
  003a9	75 34		 jne	 SHORT $LN2@get_data

; 1126 :         data = PyBytes_FromStringAndSize(buf, data_size);

  003ab	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR data_size$[rsp]
  003b3	48 8b d0	 mov	 rdx, rax
  003b6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  003be	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  003c3	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR data$[rsp], rax

; 1127 :         Py_DECREF(raw_data);

  003cb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR raw_data$[rsp]
  003d0	e8 00 00 00 00	 call	 _Py_DecRef

; 1128 :         return data;

  003d5	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  003dd	eb 67		 jmp	 SHORT $LN16@get_data
$LN2@get_data:

; 1129 :     }
; 1130 : 
; 1131 :     /* Decompress with zlib */
; 1132 :     decompress = get_decompress_func();

  003df	e8 00 00 00 00	 call	 get_decompress_func
  003e4	48 89 44 24 68	 mov	 QWORD PTR decompress$[rsp], rax

; 1133 :     if (decompress == NULL) {

  003e9	48 83 7c 24 68
	00		 cmp	 QWORD PTR decompress$[rsp], 0
  003ef	75 15		 jne	 SHORT $LN1@get_data

; 1134 :         PyErr_SetString(ZipImportError,
; 1135 :                         "can't decompress data; "
; 1136 :                         "zlib not available");

  003f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@CJGFPDKD@can?8t?5decompress?5data?$DL?5zlib?5not?5@
  003f8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  003ff	e8 00 00 00 00	 call	 PyErr_SetString

; 1137 :         goto error;

  00404	eb 2e		 jmp	 SHORT $error$21381
$LN1@get_data:

; 1138 :     }
; 1139 :     data = PyObject_CallFunction(decompress, "Oi", raw_data, -15);

  00406	41 b9 f1 ff ff
	ff		 mov	 r9d, -15
  0040c	4c 8b 44 24 78	 mov	 r8, QWORD PTR raw_data$[rsp]
  00411	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MPEHDMPO@Oi?$AA@
  00418	48 8b 4c 24 68	 mov	 rcx, QWORD PTR decompress$[rsp]
  0041d	e8 00 00 00 00	 call	 PyObject_CallFunction
  00422	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR data$[rsp], rax

; 1140 :     Py_DECREF(decompress);

  0042a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR decompress$[rsp]
  0042f	e8 00 00 00 00	 call	 _Py_DecRef
$error$21381:

; 1141 : error:
; 1142 :     Py_DECREF(raw_data);

  00434	48 8b 4c 24 78	 mov	 rcx, QWORD PTR raw_data$[rsp]
  00439	e8 00 00 00 00	 call	 _Py_DecRef

; 1143 :     return data;

  0043e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
$LN16@get_data:

; 1144 : }

  00446	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  0044d	c3		 ret	 0
get_data ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@FABGLHMK@?$CD?5zipimport?3?5zlib?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0M@DIMCGEGC@UNAVAILABLE?$AA@		; `string'
PUBLIC	??_C@_09LAIKOIHJ@available?$AA@			; `string'
PUBLIC	??_C@_04OLICEBLN@zlib?$AA@			; `string'
EXTRN	PySys_WriteStderr:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyImport_ImportModuleNoBlock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_decompress_func DD imagerel get_decompress_func
	DD	imagerel get_decompress_func+205
	DD	imagerel $unwind$get_decompress_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_decompress_func DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0BG@FABGLHMK@?$CD?5zipimport?3?5zlib?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BG@FABGLHMK@?$CD?5zipimport?3?5zlib?5?$CFs?6?$AA@ DB '# zipimport:'
	DB	' zlib %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DIMCGEGC@UNAVAILABLE?$AA@
CONST	SEGMENT
??_C@_0M@DIMCGEGC@UNAVAILABLE?$AA@ DB 'UNAVAILABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LAIKOIHJ@available?$AA@
CONST	SEGMENT
??_C@_09LAIKOIHJ@available?$AA@ DB 'available', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OLICEBLN@zlib?$AA@
CONST	SEGMENT
??_C@_04OLICEBLN@zlib?$AA@ DB 'zlib', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_decompress_func
_TEXT	SEGMENT
decompress$ = 32
zlib$ = 40
tv80 = 48
get_decompress_func PROC				; COMDAT

; 1009 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1010 :     static int importing_zlib = 0;
; 1011 :     PyObject *zlib;
; 1012 :     PyObject *decompress;
; 1013 :     _Py_IDENTIFIER(decompress);
; 1014 : 
; 1015 :     if (importing_zlib != 0)

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?importing_zlib@?1??get_decompress_func@@9@9, 0
  0000b	74 07		 je	 SHORT $LN4@get_decomp

; 1016 :         /* Someone has a zlib.py[co] in their Zip file;
; 1017 :            let's avoid a stack overflow. */
; 1018 :         return NULL;

  0000d	33 c0		 xor	 eax, eax
  0000f	e9 b4 00 00 00	 jmp	 $LN5@get_decomp
$LN4@get_decomp:

; 1019 :     importing_zlib = 1;

  00014	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?importing_zlib@?1??get_decompress_func@@9@9, 1

; 1020 :     zlib = PyImport_ImportModuleNoBlock("zlib");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OLICEBLN@zlib?$AA@
  00025	e8 00 00 00 00	 call	 PyImport_ImportModuleNoBlock
  0002a	48 89 44 24 28	 mov	 QWORD PTR zlib$[rsp], rax

; 1021 :     importing_zlib = 0;

  0002f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?importing_zlib@?1??get_decompress_func@@9@9, 0

; 1022 :     if (zlib != NULL) {

  00039	48 83 7c 24 28
	00		 cmp	 QWORD PTR zlib$[rsp], 0
  0003f	74 38		 je	 SHORT $LN3@get_decomp

; 1023 :         decompress = _PyObject_GetAttrId(zlib,
; 1024 :                                          &PyId_decompress);

  00041	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_decompress@?1??get_decompress_func@@9@9
  00046	8b c0		 mov	 eax, eax
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0004e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00057	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zlib$[rsp]
  00063	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00068	48 89 44 24 20	 mov	 QWORD PTR decompress$[rsp], rax

; 1025 :         Py_DECREF(zlib);

  0006d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zlib$[rsp]
  00072	e8 00 00 00 00	 call	 _Py_DecRef

; 1026 :     }
; 1027 :     else {

  00077	eb 0e		 jmp	 SHORT $LN2@get_decomp
$LN3@get_decomp:

; 1028 :         PyErr_Clear();

  00079	e8 00 00 00 00	 call	 PyErr_Clear

; 1029 :         decompress = NULL;

  0007e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR decompress$[rsp], 0
$LN2@get_decomp:

; 1030 :     }
; 1031 :     if (Py_VerboseFlag)

  00087	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0008e	74 33		 je	 SHORT $LN1@get_decomp

; 1032 :         PySys_WriteStderr("# zipimport: zlib %s\n",
; 1033 :             zlib != NULL ? "available": "UNAVAILABLE");

  00090	48 83 7c 24 28
	00		 cmp	 QWORD PTR zlib$[rsp], 0
  00096	74 0e		 je	 SHORT $LN7@get_decomp
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09LAIKOIHJ@available?$AA@
  0009f	48 89 44 24 30	 mov	 QWORD PTR tv80[rsp], rax
  000a4	eb 0c		 jmp	 SHORT $LN8@get_decomp
$LN7@get_decomp:
  000a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@DIMCGEGC@UNAVAILABLE?$AA@
  000ad	48 89 44 24 30	 mov	 QWORD PTR tv80[rsp], rax
$LN8@get_decomp:
  000b2	48 8b 54 24 30	 mov	 rdx, QWORD PTR tv80[rsp]
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@FABGLHMK@?$CD?5zipimport?3?5zlib?5?$CFs?6?$AA@
  000be	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN1@get_decomp:

; 1034 :     return decompress;

  000c3	48 8b 44 24 20	 mov	 rax, QWORD PTR decompress$[rsp]
$LN5@get_decomp:

; 1035 : }

  000c8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000cc	c3		 ret	 0
get_decompress_func ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@CFAELDOA@get_module_code?$AA@		; `string'
PUBLIC	??_C@_0BB@KODJLMOA@?$CD?5trying?5?$CFU?$CFc?$CFU?6?$AA@ ; `string'
EXTRN	PyTuple_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_module_code DD imagerel get_module_code
	DD	imagerel get_module_code+811
	DD	imagerel $unwind$get_module_code
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_module_code DD 021b01H
	DD	013011bH
xdata	ENDS
;	COMDAT ??_C@_0BA@CFAELDOA@get_module_code?$AA@
CONST	SEGMENT
??_C@_0BA@CFAELDOA@get_module_code?$AA@ DB 'get_module_code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KODJLMOA@?$CD?5trying?5?$CFU?$CFc?$CFU?6?$AA@
CONST	SEGMENT
??_C@_0BB@KODJLMOA@?$CD?5trying?5?$CFU?$CFc?$CFU?6?$AA@ DB '# trying %U%c'
	DB	'%U', 0aH, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_module_code
_TEXT	SEGMENT
zso$ = 48
subname$ = 56
toc_entry$ = 64
code$ = 72
fullpath$ = 80
path$ = 88
ispackage$21584 = 96
mtime$21583 = 104
isbytecode$21585 = 112
_py_tmp$21594 = 120
_py_tmp$21611 = 128
self$ = 160
fullname$ = 168
p_ispackage$ = 176
p_modpath$ = 184
get_module_code PROC					; COMDAT

; 1355 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1356 :     PyObject *code = NULL, *toc_entry, *subname;

  0001b	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR code$[rsp], 0

; 1357 :     PyObject *path, *fullpath = NULL;

  00024	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR fullpath$[rsp], 0

; 1358 :     struct st_zip_searchorder *zso;
; 1359 : 
; 1360 :     subname = get_subname(fullname);

  0002d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR fullname$[rsp]
  00035	e8 00 00 00 00	 call	 get_subname
  0003a	48 89 44 24 38	 mov	 QWORD PTR subname$[rsp], rax

; 1361 :     if (subname == NULL)

  0003f	48 83 7c 24 38
	00		 cmp	 QWORD PTR subname$[rsp], 0
  00045	75 07		 jne	 SHORT $LN26@get_module@2

; 1362 :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	e9 d5 02 00 00	 jmp	 $LN27@get_module@2
$LN26@get_module@2:

; 1363 : 
; 1364 :     path = make_filename(self->prefix, subname);

  0004e	48 8b 54 24 38	 mov	 rdx, QWORD PTR subname$[rsp]
  00053	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0005b	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0005f	e8 00 00 00 00	 call	 make_filename
  00064	48 89 44 24 58	 mov	 QWORD PTR path$[rsp], rax

; 1365 :     Py_DECREF(subname);

  00069	48 8b 4c 24 38	 mov	 rcx, QWORD PTR subname$[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_DecRef

; 1366 :     if (path == NULL)

  00073	48 83 7c 24 58
	00		 cmp	 QWORD PTR path$[rsp], 0
  00079	75 07		 jne	 SHORT $LN25@get_module@2

; 1367 :         return NULL;

  0007b	33 c0		 xor	 eax, eax
  0007d	e9 a1 02 00 00	 jmp	 $LN27@get_module@2
$LN25@get_module@2:

; 1368 : 
; 1369 :     for (zso = zip_searchorder; *zso->suffix; zso++) {

  00082	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:zip_searchorder
  00089	48 89 44 24 30	 mov	 QWORD PTR zso$[rsp], rax
  0008e	eb 0e		 jmp	 SHORT $LN24@get_module@2
$LN23@get_module@2:
  00090	48 8b 44 24 30	 mov	 rax, QWORD PTR zso$[rsp]
  00095	48 83 c0 14	 add	 rax, 20
  00099	48 89 44 24 30	 mov	 QWORD PTR zso$[rsp], rax
$LN24@get_module@2:
  0009e	48 8b 44 24 30	 mov	 rax, QWORD PTR zso$[rsp]
  000a3	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a6	85 c0		 test	 eax, eax
  000a8	0f 84 33 02 00
	00		 je	 $LN22@get_module@2

; 1370 :         code = NULL;

  000ae	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR code$[rsp], 0

; 1371 : 
; 1372 :         fullpath = PyUnicode_FromFormat("%U%s", path, zso->suffix);

  000b7	4c 8b 44 24 30	 mov	 r8, QWORD PTR zso$[rsp]
  000bc	48 8b 54 24 58	 mov	 rdx, QWORD PTR path$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PGLLPJDI@?$CFU?$CFs?$AA@
  000c8	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000cd	48 89 44 24 50	 mov	 QWORD PTR fullpath$[rsp], rax

; 1373 :         if (fullpath == NULL)

  000d2	48 83 7c 24 50
	00		 cmp	 QWORD PTR fullpath$[rsp], 0
  000d8	75 05		 jne	 SHORT $LN21@get_module@2

; 1374 :             goto exit;

  000da	e9 1d 02 00 00	 jmp	 $exit$21577
$LN21@get_module@2:

; 1375 : 
; 1376 :         if (Py_VerboseFlag > 1)

  000df	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR Py_VerboseFlag, 1
  000e6	7e 23		 jle	 SHORT $LN20@get_module@2

; 1377 :             PySys_FormatStderr("# trying %U%c%U\n",
; 1378 :                                self->archive, (int)SEP, fullpath);

  000e8	4c 8b 4c 24 50	 mov	 r9, QWORD PTR fullpath$[rsp]
  000ed	41 b8 5c 00 00
	00		 mov	 r8d, 92			; 0000005cH
  000f3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000fb	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KODJLMOA@?$CD?5trying?5?$CFU?$CFc?$CFU?6?$AA@
  00106	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN20@get_module@2:

; 1379 :         toc_entry = PyDict_GetItem(self->files, fullpath);

  0010b	48 8b 54 24 50	 mov	 rdx, QWORD PTR fullpath$[rsp]
  00110	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00118	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0011c	e8 00 00 00 00	 call	 PyDict_GetItem
  00121	48 89 44 24 40	 mov	 QWORD PTR toc_entry$[rsp], rax

; 1380 :         if (toc_entry != NULL) {

  00126	48 83 7c 24 40
	00		 cmp	 QWORD PTR toc_entry$[rsp], 0
  0012c	0f 84 4f 01 00
	00		 je	 $LN19@get_module@2

; 1381 :             time_t mtime = 0;

  00132	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR mtime$21583[rsp], 0

; 1382 :             int ispackage = zso->type & IS_PACKAGE;

  0013b	48 8b 44 24 30	 mov	 rax, QWORD PTR zso$[rsp]
  00140	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00143	83 e0 02	 and	 eax, 2
  00146	89 44 24 60	 mov	 DWORD PTR ispackage$21584[rsp], eax

; 1383 :             int isbytecode = zso->type & IS_BYTECODE;

  0014a	48 8b 44 24 30	 mov	 rax, QWORD PTR zso$[rsp]
  0014f	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00152	83 e0 01	 and	 eax, 1
  00155	89 44 24 70	 mov	 DWORD PTR isbytecode$21585[rsp], eax

; 1384 : 
; 1385 :             if (isbytecode) {

  00159	83 7c 24 70 00	 cmp	 DWORD PTR isbytecode$21585[rsp], 0
  0015e	74 2e		 je	 SHORT $LN18@get_module@2

; 1386 :                 mtime = get_mtime_of_source(self, fullpath);

  00160	48 8b 54 24 50	 mov	 rdx, QWORD PTR fullpath$[rsp]
  00165	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0016d	e8 00 00 00 00	 call	 get_mtime_of_source
  00172	48 89 44 24 68	 mov	 QWORD PTR mtime$21583[rsp], rax

; 1387 :                 if (mtime == (time_t)-1 && PyErr_Occurred()) {

  00177	48 83 7c 24 68
	ff		 cmp	 QWORD PTR mtime$21583[rsp], -1
  0017d	75 0f		 jne	 SHORT $LN17@get_module@2
  0017f	e8 00 00 00 00	 call	 PyErr_Occurred
  00184	48 85 c0	 test	 rax, rax
  00187	74 05		 je	 SHORT $LN17@get_module@2

; 1388 :                     goto exit;

  00189	e9 6e 01 00 00	 jmp	 $exit$21577
$LN17@get_module@2:
$LN18@get_module@2:
$LN16@get_module@2:

; 1389 :                 }
; 1390 :             }
; 1391 :             Py_CLEAR(fullpath);

  0018e	48 83 7c 24 50
	00		 cmp	 QWORD PTR fullpath$[rsp], 0
  00194	74 47		 je	 SHORT $LN13@get_module@2
  00196	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0019e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR fullpath$[rsp]
  001a3	41 b8 6f 05 00
	00		 mov	 r8d, 1391		; 0000056fH
  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@DCMIAMFE@?4?4?2Modules?2zipimport?4c?$AA@
  001b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@CFAELDOA@get_module_code?$AA@
  001b7	e8 00 00 00 00	 call	 _PyParallel_Guard
  001bc	85 c0		 test	 eax, eax
  001be	75 1d		 jne	 SHORT $LN13@get_module@2
  001c0	48 8b 44 24 50	 mov	 rax, QWORD PTR fullpath$[rsp]
  001c5	48 89 44 24 78	 mov	 QWORD PTR _py_tmp$21594[rsp], rax
  001ca	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR fullpath$[rsp], 0
  001d3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _py_tmp$21594[rsp]
  001d8	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@get_module@2:
  001dd	33 c0		 xor	 eax, eax
  001df	85 c0		 test	 eax, eax
  001e1	75 ab		 jne	 SHORT $LN16@get_module@2

; 1392 :             if (p_ispackage != NULL)

  001e3	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR p_ispackage$[rsp], 0
  001ec	74 0e		 je	 SHORT $LN12@get_module@2

; 1393 :                 *p_ispackage = ispackage;

  001ee	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR p_ispackage$[rsp]
  001f6	8b 4c 24 60	 mov	 ecx, DWORD PTR ispackage$21584[rsp]
  001fa	89 08		 mov	 DWORD PTR [rax], ecx
$LN12@get_module@2:

; 1394 :             code = get_code_from_data(self, ispackage,
; 1395 :                                       isbytecode, mtime,
; 1396 :                                       toc_entry);

  001fc	48 8b 44 24 40	 mov	 rax, QWORD PTR toc_entry$[rsp]
  00201	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00206	4c 8b 4c 24 68	 mov	 r9, QWORD PTR mtime$21583[rsp]
  0020b	44 8b 44 24 70	 mov	 r8d, DWORD PTR isbytecode$21585[rsp]
  00210	8b 54 24 60	 mov	 edx, DWORD PTR ispackage$21584[rsp]
  00214	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0021c	e8 00 00 00 00	 call	 get_code_from_data
  00221	48 89 44 24 48	 mov	 QWORD PTR code$[rsp], rax

; 1397 :             if (code == Py_None) {

  00226	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0022d	48 39 44 24 48	 cmp	 QWORD PTR code$[rsp], rax
  00232	75 0f		 jne	 SHORT $LN11@get_module@2

; 1398 :                 /* bad magic number or non-matching mtime
; 1399 :                    in byte code, try next */
; 1400 :                 Py_DECREF(code);

  00234	48 8b 4c 24 48	 mov	 rcx, QWORD PTR code$[rsp]
  00239	e8 00 00 00 00	 call	 _Py_DecRef

; 1401 :                 continue;

  0023e	e9 4d fe ff ff	 jmp	 $LN23@get_module@2
$LN11@get_module@2:

; 1402 :             }
; 1403 :             if (code != NULL && p_modpath != NULL) {

  00243	48 83 7c 24 48
	00		 cmp	 QWORD PTR code$[rsp], 0
  00249	74 32		 je	 SHORT $LN10@get_module@2
  0024b	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR p_modpath$[rsp], 0
  00254	74 27		 je	 SHORT $LN10@get_module@2

; 1404 :                 *p_modpath = PyTuple_GetItem(toc_entry, 0);

  00256	33 d2		 xor	 edx, edx
  00258	48 8b 4c 24 40	 mov	 rcx, QWORD PTR toc_entry$[rsp]
  0025d	e8 00 00 00 00	 call	 PyTuple_GetItem
  00262	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR p_modpath$[rsp]
  0026a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1405 :                 Py_INCREF(*p_modpath);

  0026d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR p_modpath$[rsp]
  00275	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00278	e8 00 00 00 00	 call	 _Py_IncRef
$LN10@get_module@2:

; 1406 :             }
; 1407 :             goto exit;

  0027d	eb 7d		 jmp	 SHORT $exit$21577

; 1408 :         }
; 1409 :         else

  0027f	eb 5b		 jmp	 SHORT $LN9@get_module@2
$LN19@get_module@2:
$LN8@get_module@2:

; 1410 :             Py_CLEAR(fullpath);

  00281	48 83 7c 24 50
	00		 cmp	 QWORD PTR fullpath$[rsp], 0
  00287	74 4d		 je	 SHORT $LN5@get_module@2
  00289	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00291	4c 8b 4c 24 50	 mov	 r9, QWORD PTR fullpath$[rsp]
  00296	41 b8 82 05 00
	00		 mov	 r8d, 1410		; 00000582H
  0029c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@DCMIAMFE@?4?4?2Modules?2zipimport?4c?$AA@
  002a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@CFAELDOA@get_module_code?$AA@
  002aa	e8 00 00 00 00	 call	 _PyParallel_Guard
  002af	85 c0		 test	 eax, eax
  002b1	75 23		 jne	 SHORT $LN5@get_module@2
  002b3	48 8b 44 24 50	 mov	 rax, QWORD PTR fullpath$[rsp]
  002b8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _py_tmp$21611[rsp], rax
  002c0	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR fullpath$[rsp], 0
  002c9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21611[rsp]
  002d1	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@get_module@2:
  002d6	33 c0		 xor	 eax, eax
  002d8	85 c0		 test	 eax, eax
  002da	75 a5		 jne	 SHORT $LN8@get_module@2
$LN9@get_module@2:

; 1411 :     }

  002dc	e9 af fd ff ff	 jmp	 $LN23@get_module@2
$LN22@get_module@2:

; 1412 :     PyErr_Format(ZipImportError, "can't find module %R", fullname);

  002e1	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR fullname$[rsp]
  002e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@MBMIOLGL@can?8t?5find?5module?5?$CFR?$AA@
  002f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  002f7	e8 00 00 00 00	 call	 PyErr_Format
$exit$21577:

; 1413 : exit:
; 1414 :     Py_DECREF(path);

  002fc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR path$[rsp]
  00301	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@get_module@2:

; 1415 :     Py_XDECREF(fullpath);

  00306	48 83 7c 24 50
	00		 cmp	 QWORD PTR fullpath$[rsp], 0
  0030c	74 0a		 je	 SHORT $LN1@get_module@2
  0030e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fullpath$[rsp]
  00313	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@get_module@2:
  00318	33 c0		 xor	 eax, eax
  0031a	85 c0		 test	 eax, eax
  0031c	75 e8		 jne	 SHORT $LN4@get_module@2

; 1416 :     return code;

  0031e	48 8b 44 24 48	 mov	 rax, QWORD PTR code$[rsp]
$LN27@get_module@2:

; 1417 : }

  00323	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0032a	c3		 ret	 0
get_module_code ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EK@GGLDEKOD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@ ; `string'
EXTRN	PyLong_AsLong:PROC
EXTRN	PyTuple_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_mtime_of_source DD imagerel get_mtime_of_source
	DD	imagerel get_mtime_of_source+858
	DD	imagerel $unwind$get_mtime_of_source
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_mtime_of_source DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_1EK@GGLDEKOD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@
CONST	SEGMENT
??_C@_1EK@GGLDEKOD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, ')', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H
	DB	'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_mtime_of_source
_TEXT	SEGMENT
stripped$ = 32
toc_entry$ = 40
mtime$ = 48
time$21523 = 56
date$21524 = 60
tv78 = 64
tv165 = 72
tv174 = 80
self$ = 112
path$ = 120
get_mtime_of_source PROC				; COMDAT

; 1301 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1302 :     PyObject *toc_entry, *stripped;
; 1303 :     time_t mtime;
; 1304 : 
; 1305 :     /* strip 'c' or 'o' from *.py[co] */
; 1306 :     if (PyUnicode_READY(path) == -1)

  0000e	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00022	85 c0		 test	 eax, eax
  00024	75 1c		 jne	 SHORT $LN7@get_mtime_
  00026	41 b8 1a 05 00
	00		 mov	 r8d, 1306		; 0000051aH
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00040	33 c0		 xor	 eax, eax
$LN7@get_mtime_:
  00042	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  00047	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0004a	c1 e8 07	 shr	 eax, 7
  0004d	83 e0 01	 and	 eax, 1
  00050	85 c0		 test	 eax, eax
  00052	74 0a		 je	 SHORT $LN8@get_mtime_
  00054	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
  0005c	eb 0e		 jmp	 SHORT $LN9@get_mtime_
$LN8@get_mtime_:
  0005e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR path$[rsp]
  00063	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00068	89 44 24 40	 mov	 DWORD PTR tv78[rsp], eax
$LN9@get_mtime_:
  0006c	83 7c 24 40 ff	 cmp	 DWORD PTR tv78[rsp], -1
  00071	75 0c		 jne	 SHORT $LN4@get_mtime_

; 1307 :         return (time_t)-1;

  00073	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0007a	e9 d6 02 00 00	 jmp	 $LN5@get_mtime_
$LN4@get_mtime_:

; 1308 :     stripped = PyUnicode_FromKindAndData(PyUnicode_KIND(path),
; 1309 :                                          PyUnicode_DATA(path),
; 1310 :                                          PyUnicode_GET_LENGTH(path) - 1);

  0007f	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  00084	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00088	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00093	85 c0		 test	 eax, eax
  00095	75 1c		 jne	 SHORT $LN10@get_mtime_
  00097	41 b8 1e 05 00
	00		 mov	 r8d, 1310		; 0000051eH
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  000a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b1	33 c0		 xor	 eax, eax
$LN10@get_mtime_:
  000b3	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  000b8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000bb	c1 e8 07	 shr	 eax, 7
  000be	83 e0 01	 and	 eax, 1
  000c1	85 c0		 test	 eax, eax
  000c3	75 1c		 jne	 SHORT $LN11@get_mtime_
  000c5	41 b8 1e 05 00
	00		 mov	 r8d, 1310		; 0000051eH
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CIKMINIA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000df	33 c0		 xor	 eax, eax
$LN11@get_mtime_:
  000e1	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  000e6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ea	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000f5	85 c0		 test	 eax, eax
  000f7	75 1c		 jne	 SHORT $LN12@get_mtime_
  000f9	41 b8 1d 05 00
	00		 mov	 r8d, 1309		; 0000051dH
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00113	33 c0		 xor	 eax, eax
$LN12@get_mtime_:
  00115	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  0011a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0011d	c1 e8 05	 shr	 eax, 5
  00120	83 e0 01	 and	 eax, 1
  00123	85 c0		 test	 eax, eax
  00125	0f 84 a2 00 00
	00		 je	 $LN18@get_mtime_
  0012b	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  00130	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00134	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0013a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0013f	85 c0		 test	 eax, eax
  00141	75 1c		 jne	 SHORT $LN13@get_mtime_
  00143	41 b8 1d 05 00
	00		 mov	 r8d, 1309		; 0000051dH
  00149	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  00157	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0015d	33 c0		 xor	 eax, eax
$LN13@get_mtime_:
  0015f	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  00164	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00167	c1 e8 07	 shr	 eax, 7
  0016a	83 e0 01	 and	 eax, 1
  0016d	85 c0		 test	 eax, eax
  0016f	75 1c		 jne	 SHORT $LN14@get_mtime_
  00171	41 b8 1d 05 00
	00		 mov	 r8d, 1309		; 0000051dH
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CIKMINIA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  00185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018b	33 c0		 xor	 eax, eax
$LN14@get_mtime_:
  0018d	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  00192	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00195	c1 e8 06	 shr	 eax, 6
  00198	83 e0 01	 and	 eax, 1
  0019b	85 c0		 test	 eax, eax
  0019d	74 12		 je	 SHORT $LN15@get_mtime_
  0019f	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  001a4	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  001aa	48 89 44 24 48	 mov	 QWORD PTR tv165[rsp], rax
  001af	eb 10		 jmp	 SHORT $LN16@get_mtime_
$LN15@get_mtime_:
  001b1	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  001b6	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  001bc	48 89 44 24 48	 mov	 QWORD PTR tv165[rsp], rax
$LN16@get_mtime_:
  001c1	48 8b 44 24 48	 mov	 rax, QWORD PTR tv165[rsp]
  001c6	48 89 44 24 50	 mov	 QWORD PTR tv174[rsp], rax
  001cb	eb 3c		 jmp	 SHORT $LN19@get_mtime_
$LN18@get_mtime_:
  001cd	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  001d2	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  001da	75 1c		 jne	 SHORT $LN17@get_mtime_
  001dc	41 b8 1d 05 00
	00		 mov	 r8d, 1309		; 0000051dH
  001e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@GGLDEKOD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001f6	33 c0		 xor	 eax, eax
$LN17@get_mtime_:
  001f8	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  001fd	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00204	48 89 44 24 50	 mov	 QWORD PTR tv174[rsp], rax
$LN19@get_mtime_:
  00209	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  0020e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00212	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00218	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0021d	85 c0		 test	 eax, eax
  0021f	75 1c		 jne	 SHORT $LN20@get_mtime_
  00221	41 b8 1c 05 00
	00		 mov	 r8d, 1308		; 0000051cH
  00227	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OHMNOEGJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0023b	33 c0		 xor	 eax, eax
$LN20@get_mtime_:
  0023d	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  00242	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00245	c1 e8 07	 shr	 eax, 7
  00248	83 e0 01	 and	 eax, 1
  0024b	85 c0		 test	 eax, eax
  0024d	75 1c		 jne	 SHORT $LN21@get_mtime_
  0024f	41 b8 1c 05 00
	00		 mov	 r8d, 1308		; 0000051cH
  00255	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@OINADHBL@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAi?$AAp?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CIKMINIA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA?$CJ?$AA?$AA@
  00263	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00269	33 c0		 xor	 eax, eax
$LN21@get_mtime_:
  0026b	48 8b 44 24 78	 mov	 rax, QWORD PTR path$[rsp]
  00270	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00274	48 ff c8	 dec	 rax
  00277	48 8b 4c 24 78	 mov	 rcx, QWORD PTR path$[rsp]
  0027c	8b 49 70	 mov	 ecx, DWORD PTR [rcx+112]
  0027f	c1 e9 02	 shr	 ecx, 2
  00282	83 e1 07	 and	 ecx, 7
  00285	4c 8b c0	 mov	 r8, rax
  00288	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv174[rsp]
  0028d	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
  00292	48 89 44 24 20	 mov	 QWORD PTR stripped$[rsp], rax

; 1311 :     if (stripped == NULL)

  00297	48 83 7c 24 20
	00		 cmp	 QWORD PTR stripped$[rsp], 0
  0029d	75 0c		 jne	 SHORT $LN3@get_mtime_

; 1312 :         return (time_t)-1;

  0029f	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  002a6	e9 aa 00 00 00	 jmp	 $LN5@get_mtime_
$LN3@get_mtime_:

; 1313 : 
; 1314 :     toc_entry = PyDict_GetItem(self->files, stripped);

  002ab	48 8b 54 24 20	 mov	 rdx, QWORD PTR stripped$[rsp]
  002b0	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  002b5	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  002b9	e8 00 00 00 00	 call	 PyDict_GetItem
  002be	48 89 44 24 28	 mov	 QWORD PTR toc_entry$[rsp], rax

; 1315 :     Py_DECREF(stripped);

  002c3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stripped$[rsp]
  002c8	e8 00 00 00 00	 call	 _Py_DecRef

; 1316 :     if (toc_entry != NULL && PyTuple_Check(toc_entry) &&
; 1317 :         PyTuple_Size(toc_entry) == 8) {

  002cd	48 83 7c 24 28
	00		 cmp	 QWORD PTR toc_entry$[rsp], 0
  002d3	74 72		 je	 SHORT $LN2@get_mtime_
  002d5	48 8b 44 24 28	 mov	 rax, QWORD PTR toc_entry$[rsp]
  002da	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002de	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002e4	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  002e9	85 c0		 test	 eax, eax
  002eb	74 5a		 je	 SHORT $LN2@get_mtime_
  002ed	48 8b 4c 24 28	 mov	 rcx, QWORD PTR toc_entry$[rsp]
  002f2	e8 00 00 00 00	 call	 PyTuple_Size
  002f7	48 83 f8 08	 cmp	 rax, 8
  002fb	75 4a		 jne	 SHORT $LN2@get_mtime_

; 1318 :         /* fetch the time stamp of the .py file for comparison
; 1319 :            with an embedded pyc time stamp */
; 1320 :         int time, date;
; 1321 :         time = PyLong_AsLong(PyTuple_GetItem(toc_entry, 5));

  002fd	ba 05 00 00 00	 mov	 edx, 5
  00302	48 8b 4c 24 28	 mov	 rcx, QWORD PTR toc_entry$[rsp]
  00307	e8 00 00 00 00	 call	 PyTuple_GetItem
  0030c	48 8b c8	 mov	 rcx, rax
  0030f	e8 00 00 00 00	 call	 PyLong_AsLong
  00314	89 44 24 38	 mov	 DWORD PTR time$21523[rsp], eax

; 1322 :         date = PyLong_AsLong(PyTuple_GetItem(toc_entry, 6));

  00318	ba 06 00 00 00	 mov	 edx, 6
  0031d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR toc_entry$[rsp]
  00322	e8 00 00 00 00	 call	 PyTuple_GetItem
  00327	48 8b c8	 mov	 rcx, rax
  0032a	e8 00 00 00 00	 call	 PyLong_AsLong
  0032f	89 44 24 3c	 mov	 DWORD PTR date$21524[rsp], eax

; 1323 :         mtime = parse_dostime(time, date);

  00333	8b 54 24 3c	 mov	 edx, DWORD PTR date$21524[rsp]
  00337	8b 4c 24 38	 mov	 ecx, DWORD PTR time$21523[rsp]
  0033b	e8 00 00 00 00	 call	 parse_dostime
  00340	48 89 44 24 30	 mov	 QWORD PTR mtime$[rsp], rax

; 1324 :     } else

  00345	eb 09		 jmp	 SHORT $LN1@get_mtime_
$LN2@get_mtime_:

; 1325 :         mtime = 0;

  00347	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR mtime$[rsp], 0
$LN1@get_mtime_:

; 1326 :     return mtime;

  00350	48 8b 44 24 30	 mov	 rax, QWORD PTR mtime$[rsp]
$LN5@get_mtime_:

; 1327 : }

  00355	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00359	c3		 ret	 0
get_mtime_of_source ENDP
_TEXT	ENDS
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_dostime DD imagerel parse_dostime
	DD	imagerel parse_dostime+138
	DD	imagerel $unwind$parse_dostime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_dostime DD 010c01H
	DD	0a20cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT parse_dostime
_TEXT	SEGMENT
stm$ = 32
dostime$ = 96
dosdate$ = 104
parse_dostime PROC					; COMDAT

; 1280 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1281 :     struct tm stm;
; 1282 : 
; 1283 :     memset((void *) &stm, '\0', sizeof(stm));

  0000c	41 b8 24 00 00
	00		 mov	 r8d, 36			; 00000024H
  00012	33 d2		 xor	 edx, edx
  00014	48 8d 4c 24 20	 lea	 rcx, QWORD PTR stm$[rsp]
  00019	e8 00 00 00 00	 call	 memset

; 1284 : 
; 1285 :     stm.tm_sec   =  (dostime        & 0x1f) * 2;

  0001e	8b 44 24 60	 mov	 eax, DWORD PTR dostime$[rsp]
  00022	83 e0 1f	 and	 eax, 31
  00025	d1 e0		 shl	 eax, 1
  00027	89 44 24 20	 mov	 DWORD PTR stm$[rsp], eax

; 1286 :     stm.tm_min   =  (dostime >> 5)  & 0x3f;

  0002b	8b 44 24 60	 mov	 eax, DWORD PTR dostime$[rsp]
  0002f	c1 f8 05	 sar	 eax, 5
  00032	83 e0 3f	 and	 eax, 63			; 0000003fH
  00035	89 44 24 24	 mov	 DWORD PTR stm$[rsp+4], eax

; 1287 :     stm.tm_hour  =  (dostime >> 11) & 0x1f;

  00039	8b 44 24 60	 mov	 eax, DWORD PTR dostime$[rsp]
  0003d	c1 f8 0b	 sar	 eax, 11
  00040	83 e0 1f	 and	 eax, 31
  00043	89 44 24 28	 mov	 DWORD PTR stm$[rsp+8], eax

; 1288 :     stm.tm_mday  =   dosdate        & 0x1f;

  00047	8b 44 24 68	 mov	 eax, DWORD PTR dosdate$[rsp]
  0004b	83 e0 1f	 and	 eax, 31
  0004e	89 44 24 2c	 mov	 DWORD PTR stm$[rsp+12], eax

; 1289 :     stm.tm_mon   = ((dosdate >> 5)  & 0x0f) - 1;

  00052	8b 44 24 68	 mov	 eax, DWORD PTR dosdate$[rsp]
  00056	c1 f8 05	 sar	 eax, 5
  00059	83 e0 0f	 and	 eax, 15
  0005c	ff c8		 dec	 eax
  0005e	89 44 24 30	 mov	 DWORD PTR stm$[rsp+16], eax

; 1290 :     stm.tm_year  = ((dosdate >> 9)  & 0x7f) + 80;

  00062	8b 44 24 68	 mov	 eax, DWORD PTR dosdate$[rsp]
  00066	c1 f8 09	 sar	 eax, 9
  00069	83 e0 7f	 and	 eax, 127		; 0000007fH
  0006c	83 c0 50	 add	 eax, 80			; 00000050H
  0006f	89 44 24 34	 mov	 DWORD PTR stm$[rsp+20], eax

; 1291 :     stm.tm_isdst =   -1; /* wday/yday is ignored */

  00073	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR stm$[rsp+32], -1

; 1292 : 
; 1293 :     return mktime(&stm);

  0007b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR stm$[rsp]
  00080	e8 00 00 00 00	 call	 mktime

; 1294 : }

  00085	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00089	c3		 ret	 0
parse_dostime ENDP
_TEXT	ENDS
EXTRN	__imp__mktime64:PROC
;	COMDAT pdata
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
pdata	SEGMENT
$pdata$mktime DD imagerel mktime
	DD	imagerel mktime+25
	DD	imagerel $unwind$mktime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mktime DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mktime
_TEXT	SEGMENT
_Tm$ = 48
mktime	PROC						; COMDAT

; 124  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 125  :     return _mktime64(_Tm);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Tm$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mktime64

; 126  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
mktime	ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\zipimport.c
pdata	SEGMENT
$pdata$get_code_from_data DD imagerel get_code_from_data
	DD	imagerel get_code_from_data+150
	DD	imagerel $unwind$get_code_from_data
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_code_from_data DD 011701H
	DD	08217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT get_code_from_data
_TEXT	SEGMENT
modpath$ = 32
code$ = 40
data$ = 48
self$ = 80
ispackage$ = 88
isbytecode$ = 96
mtime$ = 104
toc_entry$ = 112
get_code_from_data PROC					; COMDAT

; 1334 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1335 :     PyObject *data, *modpath, *code;
; 1336 : 
; 1337 :     data = get_data(self->archive, toc_entry);

  00017	48 8b 54 24 70	 mov	 rdx, QWORD PTR toc_entry$[rsp]
  0001c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00021	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00025	e8 00 00 00 00	 call	 get_data
  0002a	48 89 44 24 30	 mov	 QWORD PTR data$[rsp], rax

; 1338 :     if (data == NULL)

  0002f	48 83 7c 24 30
	00		 cmp	 QWORD PTR data$[rsp], 0
  00035	75 04		 jne	 SHORT $LN3@get_code_f

; 1339 :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	eb 56		 jmp	 SHORT $LN4@get_code_f
$LN3@get_code_f:

; 1340 : 
; 1341 :     modpath = PyTuple_GetItem(toc_entry, 0);

  0003b	33 d2		 xor	 edx, edx
  0003d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR toc_entry$[rsp]
  00042	e8 00 00 00 00	 call	 PyTuple_GetItem
  00047	48 89 44 24 20	 mov	 QWORD PTR modpath$[rsp], rax

; 1342 :     if (isbytecode)

  0004c	83 7c 24 60 00	 cmp	 DWORD PTR isbytecode$[rsp], 0
  00051	74 1b		 je	 SHORT $LN2@get_code_f

; 1343 :         code = unmarshal_code(modpath, data, mtime);

  00053	4c 8b 44 24 68	 mov	 r8, QWORD PTR mtime$[rsp]
  00058	48 8b 54 24 30	 mov	 rdx, QWORD PTR data$[rsp]
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR modpath$[rsp]
  00062	e8 00 00 00 00	 call	 unmarshal_code
  00067	48 89 44 24 28	 mov	 QWORD PTR code$[rsp], rax

; 1344 :     else

  0006c	eb 14		 jmp	 SHORT $LN1@get_code_f
$LN2@get_code_f:

; 1345 :         code = compile_source(modpath, data);

  0006e	48 8b 54 24 30	 mov	 rdx, QWORD PTR data$[rsp]
  00073	48 8b 4c 24 20	 mov	 rcx, QWORD PTR modpath$[rsp]
  00078	e8 00 00 00 00	 call	 compile_source
  0007d	48 89 44 24 28	 mov	 QWORD PTR code$[rsp], rax
$LN1@get_code_f:

; 1346 :     Py_DECREF(data);

  00082	48 8b 4c 24 30	 mov	 rcx, QWORD PTR data$[rsp]
  00087	e8 00 00 00 00	 call	 _Py_DecRef

; 1347 :     return code;

  0008c	48 8b 44 24 28	 mov	 rax, QWORD PTR code$[rsp]
$LN4@get_code_f:

; 1348 : }

  00091	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00095	c3		 ret	 0
get_code_from_data ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@HJHIEEDA@compiled?5module?5?$CFR?5is?5not?5a?5code@ ; `string'
PUBLIC	??_C@_0BE@INBCKGNC@?$CD?5?$CFR?5has?5bad?5mtime?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@OKNGGAHO@?$CD?5?$CFR?5has?5bad?5magic?6?$AA@ ; `string'
PUBLIC	??_C@_0N@LMPLNBME@bad?5pyc?5data?$AA@		; `string'
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyCode_Type:BYTE
EXTRN	PyMarshal_ReadObjectFromString:PROC
EXTRN	PyImport_GetMagicNumber:PROC
EXTRN	PyBytes_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$unmarshal_code DD imagerel unmarshal_code
	DD	imagerel unmarshal_code+360
	DD	imagerel $unwind$unmarshal_code
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unmarshal_code DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0CI@HJHIEEDA@compiled?5module?5?$CFR?5is?5not?5a?5code@
CONST	SEGMENT
??_C@_0CI@HJHIEEDA@compiled?5module?5?$CFR?5is?5not?5a?5code@ DB 'compile'
	DB	'd module %R is not a code object', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@INBCKGNC@?$CD?5?$CFR?5has?5bad?5mtime?6?$AA@
CONST	SEGMENT
??_C@_0BE@INBCKGNC@?$CD?5?$CFR?5has?5bad?5mtime?6?$AA@ DB '# %R has bad m'
	DB	'time', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OKNGGAHO@?$CD?5?$CFR?5has?5bad?5magic?6?$AA@
CONST	SEGMENT
??_C@_0BE@OKNGGAHO@?$CD?5?$CFR?5has?5bad?5magic?6?$AA@ DB '# %R has bad m'
	DB	'agic', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LMPLNBME@bad?5pyc?5data?$AA@
CONST	SEGMENT
??_C@_0N@LMPLNBME@bad?5pyc?5data?$AA@ DB 'bad pyc data', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT unmarshal_code
_TEXT	SEGMENT
code$ = 32
size$ = 40
buf$ = 48
tv71 = 56
pathname$ = 80
data$ = 88
mtime$ = 96
unmarshal_code PROC					; COMDAT

; 1166 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1167 :     PyObject *code;
; 1168 :     char *buf = PyBytes_AsString(data);

  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  00018	e8 00 00 00 00	 call	 PyBytes_AsString
  0001d	48 89 44 24 30	 mov	 QWORD PTR buf$[rsp], rax

; 1169 :     Py_ssize_t size = PyBytes_Size(data);

  00022	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  00027	e8 00 00 00 00	 call	 PyBytes_Size
  0002c	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax

; 1170 : 
; 1171 :     if (size <= 9) {

  00031	48 83 7c 24 28
	09		 cmp	 QWORD PTR size$[rsp], 9
  00037	7f 1a		 jg	 SHORT $LN7@unmarshal_

; 1172 :         PyErr_SetString(ZipImportError,
; 1173 :                         "bad pyc data");

  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@LMPLNBME@bad?5pyc?5data?$AA@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  00047	e8 00 00 00 00	 call	 PyErr_SetString

; 1174 :         return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	e9 10 01 00 00	 jmp	 $LN8@unmarshal_
$LN7@unmarshal_:

; 1175 :     }
; 1176 : 
; 1177 :     if (get_long((unsigned char *)buf) != PyImport_GetMagicNumber()) {

  00053	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  00058	e8 00 00 00 00	 call	 get_long
  0005d	89 44 24 38	 mov	 DWORD PTR tv71[rsp], eax
  00061	e8 00 00 00 00	 call	 PyImport_GetMagicNumber
  00066	8b 4c 24 38	 mov	 ecx, DWORD PTR tv71[rsp]
  0006a	3b c8		 cmp	 ecx, eax
  0006c	74 32		 je	 SHORT $LN6@unmarshal_

; 1178 :         if (Py_VerboseFlag)

  0006e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00075	74 11		 je	 SHORT $LN5@unmarshal_

; 1179 :             PySys_FormatStderr("# %R has bad magic\n",
; 1180 :                                pathname);

  00077	48 8b 54 24 50	 mov	 rdx, QWORD PTR pathname$[rsp]
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@OKNGGAHO@?$CD?5?$CFR?5has?5bad?5magic?6?$AA@
  00083	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN5@unmarshal_:

; 1181 :         Py_INCREF(Py_None);

  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0008f	e8 00 00 00 00	 call	 _Py_IncRef

; 1182 :         return Py_None;  /* signal caller to try alternative */

  00094	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0009b	e9 c3 00 00 00	 jmp	 $LN8@unmarshal_
$LN6@unmarshal_:

; 1183 :     }
; 1184 : 
; 1185 :     if (mtime != 0 && !eq_mtime(get_long((unsigned char *)buf + 4),
; 1186 :                                 mtime)) {

  000a0	48 83 7c 24 60
	00		 cmp	 QWORD PTR mtime$[rsp], 0
  000a6	74 53		 je	 SHORT $LN4@unmarshal_
  000a8	48 8b 44 24 30	 mov	 rax, QWORD PTR buf$[rsp]
  000ad	48 83 c0 04	 add	 rax, 4
  000b1	48 8b c8	 mov	 rcx, rax
  000b4	e8 00 00 00 00	 call	 get_long
  000b9	48 98		 cdqe
  000bb	48 8b 54 24 60	 mov	 rdx, QWORD PTR mtime$[rsp]
  000c0	48 8b c8	 mov	 rcx, rax
  000c3	e8 00 00 00 00	 call	 eq_mtime
  000c8	85 c0		 test	 eax, eax
  000ca	75 2f		 jne	 SHORT $LN4@unmarshal_

; 1187 :         if (Py_VerboseFlag)

  000cc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  000d3	74 11		 je	 SHORT $LN3@unmarshal_

; 1188 :             PySys_FormatStderr("# %R has bad mtime\n",
; 1189 :                                pathname);

  000d5	48 8b 54 24 50	 mov	 rdx, QWORD PTR pathname$[rsp]
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@INBCKGNC@?$CD?5?$CFR?5has?5bad?5mtime?6?$AA@
  000e1	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN3@unmarshal_:

; 1190 :         Py_INCREF(Py_None);

  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000ed	e8 00 00 00 00	 call	 _Py_IncRef

; 1191 :         return Py_None;  /* signal caller to try alternative */

  000f2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000f9	eb 68		 jmp	 SHORT $LN8@unmarshal_
$LN4@unmarshal_:

; 1192 :     }
; 1193 : 
; 1194 :     /* XXX the pyc's size field is ignored; timestamp collisions are probably
; 1195 :        unimportant with zip files. */
; 1196 :     code = PyMarshal_ReadObjectFromString(buf + 12, size - 12);

  000fb	48 8b 44 24 28	 mov	 rax, QWORD PTR size$[rsp]
  00100	48 83 e8 0c	 sub	 rax, 12
  00104	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  00109	48 83 c1 0c	 add	 rcx, 12
  0010d	48 8b d0	 mov	 rdx, rax
  00110	e8 00 00 00 00	 call	 PyMarshal_ReadObjectFromString
  00115	48 89 44 24 20	 mov	 QWORD PTR code$[rsp], rax

; 1197 :     if (code == NULL)

  0011a	48 83 7c 24 20
	00		 cmp	 QWORD PTR code$[rsp], 0
  00120	75 04		 jne	 SHORT $LN2@unmarshal_

; 1198 :         return NULL;

  00122	33 c0		 xor	 eax, eax
  00124	eb 3d		 jmp	 SHORT $LN8@unmarshal_
$LN2@unmarshal_:

; 1199 :     if (!PyCode_Check(code)) {

  00126	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  0012d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR code$[rsp]
  00132	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00136	74 26		 je	 SHORT $LN1@unmarshal_

; 1200 :         Py_DECREF(code);

  00138	48 8b 4c 24 20	 mov	 rcx, QWORD PTR code$[rsp]
  0013d	e8 00 00 00 00	 call	 _Py_DecRef

; 1201 :         PyErr_Format(PyExc_TypeError,
; 1202 :              "compiled module %R is not a code object",
; 1203 :              pathname);

  00142	4c 8b 44 24 50	 mov	 r8, QWORD PTR pathname$[rsp]
  00147	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@HJHIEEDA@compiled?5module?5?$CFR?5is?5not?5a?5code@
  0014e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00155	e8 00 00 00 00	 call	 PyErr_Format

; 1204 :         return NULL;

  0015a	33 c0		 xor	 eax, eax
  0015c	eb 05		 jmp	 SHORT $LN8@unmarshal_
$LN1@unmarshal_:

; 1205 :     }
; 1206 :     return code;

  0015e	48 8b 44 24 20	 mov	 rax, QWORD PTR code$[rsp]
$LN8@unmarshal_:

; 1207 : }

  00163	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00167	c3		 ret	 0
unmarshal_code ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$eq_mtime DD imagerel eq_mtime
	DD	imagerel eq_mtime+86
	DD	imagerel $unwind$eq_mtime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$eq_mtime DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT eq_mtime
_TEXT	SEGMENT
d$ = 0
tv68 = 8
t1$ = 32
t2$ = 40
eq_mtime PROC						; COMDAT

; 1151 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 1152 :     time_t d = t1 - t2;

  0000e	48 8b 44 24 28	 mov	 rax, QWORD PTR t2$[rsp]
  00013	48 8b 4c 24 20	 mov	 rcx, QWORD PTR t1$[rsp]
  00018	48 2b c8	 sub	 rcx, rax
  0001b	48 8b c1	 mov	 rax, rcx
  0001e	48 89 04 24	 mov	 QWORD PTR d$[rsp], rax

; 1153 :     if (d < 0)

  00022	48 83 3c 24 00	 cmp	 QWORD PTR d$[rsp], 0
  00027	7d 0b		 jge	 SHORT $LN1@eq_mtime

; 1154 :         d = -d;

  00029	48 8b 04 24	 mov	 rax, QWORD PTR d$[rsp]
  0002d	48 f7 d8	 neg	 rax
  00030	48 89 04 24	 mov	 QWORD PTR d$[rsp], rax
$LN1@eq_mtime:

; 1155 :     /* dostime only stores even seconds, so be lenient */
; 1156 :     return d <= 1;

  00034	48 83 3c 24 01	 cmp	 QWORD PTR d$[rsp], 1
  00039	7f 0a		 jg	 SHORT $LN4@eq_mtime
  0003b	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00043	eb 08		 jmp	 SHORT $LN5@eq_mtime
$LN4@eq_mtime:
  00045	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN5@eq_mtime:
  0004d	8b 44 24 08	 mov	 eax, DWORD PTR tv68[rsp]

; 1157 : }

  00051	48 83 c4 18	 add	 rsp, 24
  00055	c3		 ret	 0
eq_mtime ENDP
_TEXT	ENDS
EXTRN	Py_CompileStringExFlags:PROC
EXTRN	PyUnicode_EncodeFSDefault:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$compile_source DD imagerel compile_source
	DD	imagerel compile_source+171
	DD	imagerel $unwind$compile_source
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compile_source DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT compile_source
_TEXT	SEGMENT
pathbytes$ = 48
code$ = 56
fixed_source$ = 64
tv75 = 72
pathname$ = 96
source$ = 104
compile_source PROC					; COMDAT

; 1255 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1256 :     PyObject *code, *fixed_source, *pathbytes;
; 1257 : 
; 1258 :     pathbytes = PyUnicode_EncodeFSDefault(pathname);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pathname$[rsp]
  00013	e8 00 00 00 00	 call	 PyUnicode_EncodeFSDefault
  00018	48 89 44 24 30	 mov	 QWORD PTR pathbytes$[rsp], rax

; 1259 :     if (pathbytes == NULL)

  0001d	48 83 7c 24 30
	00		 cmp	 QWORD PTR pathbytes$[rsp], 0
  00023	75 04		 jne	 SHORT $LN2@compile_so

; 1260 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 7d		 jmp	 SHORT $LN3@compile_so
$LN2@compile_so:

; 1261 : 
; 1262 :     fixed_source = normalize_line_endings(source);

  00029	48 8b 4c 24 68	 mov	 rcx, QWORD PTR source$[rsp]
  0002e	e8 00 00 00 00	 call	 normalize_line_endings
  00033	48 89 44 24 40	 mov	 QWORD PTR fixed_source$[rsp], rax

; 1263 :     if (fixed_source == NULL) {

  00038	48 83 7c 24 40
	00		 cmp	 QWORD PTR fixed_source$[rsp], 0
  0003e	75 0e		 jne	 SHORT $LN1@compile_so

; 1264 :         Py_DECREF(pathbytes);

  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pathbytes$[rsp]
  00045	e8 00 00 00 00	 call	 _Py_DecRef

; 1265 :         return NULL;

  0004a	33 c0		 xor	 eax, eax
  0004c	eb 58		 jmp	 SHORT $LN3@compile_so
$LN1@compile_so:

; 1266 :     }
; 1267 : 
; 1268 :     code = Py_CompileString(PyBytes_AsString(fixed_source),
; 1269 :                             PyBytes_AsString(pathbytes),
; 1270 :                             Py_file_input);

  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pathbytes$[rsp]
  00053	e8 00 00 00 00	 call	 PyBytes_AsString
  00058	48 89 44 24 48	 mov	 QWORD PTR tv75[rsp], rax
  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fixed_source$[rsp]
  00062	e8 00 00 00 00	 call	 PyBytes_AsString
  00067	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  0006f	45 33 c9	 xor	 r9d, r9d
  00072	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  00078	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv75[rsp]
  0007d	48 8b d1	 mov	 rdx, rcx
  00080	48 8b c8	 mov	 rcx, rax
  00083	e8 00 00 00 00	 call	 Py_CompileStringExFlags
  00088	48 89 44 24 38	 mov	 QWORD PTR code$[rsp], rax

; 1271 :     Py_DECREF(pathbytes);

  0008d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pathbytes$[rsp]
  00092	e8 00 00 00 00	 call	 _Py_DecRef

; 1272 :     Py_DECREF(fixed_source);

  00097	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fixed_source$[rsp]
  0009c	e8 00 00 00 00	 call	 _Py_DecRef

; 1273 :     return code;

  000a1	48 8b 44 24 38	 mov	 rax, QWORD PTR code$[rsp]
$LN3@compile_so:

; 1274 : }

  000a6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000aa	c3		 ret	 0
compile_source ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@FBBALAI@zipimport?3?5no?5memory?5to?5allocate@ ; `string'
PUBLIC	??_C@_02NCJKDDL@?6?$AA?$AA@			; `string'
EXTRN	PyExc_MemoryError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$normalize_line_endings DD imagerel normalize_line_endings
	DD	imagerel normalize_line_endings+339
	DD	imagerel $unwind$normalize_line_endings
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$normalize_line_endings DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0CP@FBBALAI@zipimport?3?5no?5memory?5to?5allocate@
CONST	SEGMENT
??_C@_0CP@FBBALAI@zipimport?3?5no?5memory?5to?5allocate@ DB 'zipimport: n'
	DB	'o memory to allocate source buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NCJKDDL@?6?$AA?$AA@
CONST	SEGMENT
??_C@_02NCJKDDL@?6?$AA?$AA@ DB 0aH, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT normalize_line_endings
_TEXT	SEGMENT
p$ = 32
len$ = 40
q$ = 48
buf$ = 56
fixed_source$ = 64
source$ = 96
normalize_line_endings PROC				; COMDAT

; 1215 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1216 :     char *buf, *q, *p;
; 1217 :     PyObject *fixed_source;
; 1218 :     int len = 0;

  00009	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR len$[rsp], 0

; 1219 : 
; 1220 :     p = PyBytes_AsString(source);

  00011	48 8b 4c 24 60	 mov	 rcx, QWORD PTR source$[rsp]
  00016	e8 00 00 00 00	 call	 PyBytes_AsString
  0001b	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1221 :     if (p == NULL) {

  00020	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00026	75 16		 jne	 SHORT $LN8@normalize_

; 1222 :         return PyBytes_FromStringAndSize("\n\0", 2);

  00028	ba 02 00 00 00	 mov	 edx, 2
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02NCJKDDL@?6?$AA?$AA@
  00034	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00039	e9 10 01 00 00	 jmp	 $LN9@normalize_
$LN8@normalize_:

; 1223 :     }
; 1224 : 
; 1225 :     /* one char extra for trailing \n and one for terminating \0 */
; 1226 :     buf = (char *)PyMem_Malloc(PyBytes_Size(source) + 2);

  0003e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR source$[rsp]
  00043	e8 00 00 00 00	 call	 PyBytes_Size
  00048	48 83 c0 02	 add	 rax, 2
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	e8 00 00 00 00	 call	 PyMem_Malloc
  00054	48 89 44 24 38	 mov	 QWORD PTR buf$[rsp], rax

; 1227 :     if (buf == NULL) {

  00059	48 83 7c 24 38
	00		 cmp	 QWORD PTR buf$[rsp], 0
  0005f	75 1a		 jne	 SHORT $LN7@normalize_

; 1228 :         PyErr_SetString(PyExc_MemoryError,
; 1229 :                         "zipimport: no memory to allocate "
; 1230 :                         "source buffer");

  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@FBBALAI@zipimport?3?5no?5memory?5to?5allocate@
  00068	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  0006f	e8 00 00 00 00	 call	 PyErr_SetString

; 1231 :         return NULL;

  00074	33 c0		 xor	 eax, eax
  00076	e9 d3 00 00 00	 jmp	 $LN9@normalize_
$LN7@normalize_:

; 1232 :     }
; 1233 :     /* replace "\r\n?" by "\n" */
; 1234 :     for (q = buf; *p != '\0'; p++) {

  0007b	48 8b 44 24 38	 mov	 rax, QWORD PTR buf$[rsp]
  00080	48 89 44 24 30	 mov	 QWORD PTR q$[rsp], rax
  00085	eb 0d		 jmp	 SHORT $LN6@normalize_
$LN5@normalize_:
  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008c	48 ff c0	 inc	 rax
  0008f	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN6@normalize_:
  00094	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00099	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0009c	85 c0		 test	 eax, eax
  0009e	74 67		 je	 SHORT $LN4@normalize_

; 1235 :         if (*p == '\r') {

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000a5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a8	83 f8 0d	 cmp	 eax, 13
  000ab	75 32		 jne	 SHORT $LN3@normalize_

; 1236 :             *q++ = '\n';

  000ad	48 8b 44 24 30	 mov	 rax, QWORD PTR q$[rsp]
  000b2	c6 00 0a	 mov	 BYTE PTR [rax], 10
  000b5	48 8b 44 24 30	 mov	 rax, QWORD PTR q$[rsp]
  000ba	48 ff c0	 inc	 rax
  000bd	48 89 44 24 30	 mov	 QWORD PTR q$[rsp], rax

; 1237 :             if (*(p + 1) == '\n')

  000c2	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000c7	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  000cb	83 f8 0a	 cmp	 eax, 10
  000ce	75 0d		 jne	 SHORT $LN2@normalize_

; 1238 :                 p++;

  000d0	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000d5	48 ff c0	 inc	 rax
  000d8	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN2@normalize_:

; 1239 :         }
; 1240 :         else

  000dd	eb 1c		 jmp	 SHORT $LN1@normalize_
$LN3@normalize_:

; 1241 :             *q++ = *p;

  000df	48 8b 44 24 30	 mov	 rax, QWORD PTR q$[rsp]
  000e4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  000e9	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000ec	88 08		 mov	 BYTE PTR [rax], cl
  000ee	48 8b 44 24 30	 mov	 rax, QWORD PTR q$[rsp]
  000f3	48 ff c0	 inc	 rax
  000f6	48 89 44 24 30	 mov	 QWORD PTR q$[rsp], rax
$LN1@normalize_:

; 1242 :         len++;

  000fb	8b 44 24 28	 mov	 eax, DWORD PTR len$[rsp]
  000ff	ff c0		 inc	 eax
  00101	89 44 24 28	 mov	 DWORD PTR len$[rsp], eax

; 1243 :     }

  00105	eb 80		 jmp	 SHORT $LN5@normalize_
$LN4@normalize_:

; 1244 :     *q++ = '\n';  /* add trailing \n */

  00107	48 8b 44 24 30	 mov	 rax, QWORD PTR q$[rsp]
  0010c	c6 00 0a	 mov	 BYTE PTR [rax], 10
  0010f	48 8b 44 24 30	 mov	 rax, QWORD PTR q$[rsp]
  00114	48 ff c0	 inc	 rax
  00117	48 89 44 24 30	 mov	 QWORD PTR q$[rsp], rax

; 1245 :     *q = '\0';

  0011c	48 8b 44 24 30	 mov	 rax, QWORD PTR q$[rsp]
  00121	c6 00 00	 mov	 BYTE PTR [rax], 0

; 1246 :     fixed_source = PyBytes_FromStringAndSize(buf, len + 2);

  00124	8b 44 24 28	 mov	 eax, DWORD PTR len$[rsp]
  00128	83 c0 02	 add	 eax, 2
  0012b	48 98		 cdqe
  0012d	48 8b d0	 mov	 rdx, rax
  00130	48 8b 4c 24 38	 mov	 rcx, QWORD PTR buf$[rsp]
  00135	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0013a	48 89 44 24 40	 mov	 QWORD PTR fixed_source$[rsp], rax

; 1247 :     PyMem_Free(buf);

  0013f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR buf$[rsp]
  00144	e8 00 00 00 00	 call	 PyMem_Free

; 1248 :     return fixed_source;

  00149	48 8b 44 24 40	 mov	 rax, QWORD PTR fixed_source$[rsp]
$LN9@normalize_:

; 1249 : }

  0014e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00152	c3		 ret	 0
normalize_line_endings ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@DAAMIGMB@_zip_directory_cache?$AA@	; `string'
PUBLIC	??_C@_0M@NDJAEMK@zipimporter?$AA@		; `string'
PUBLIC	??_C@_0P@KPLNEBLJ@ZipImportError?$AA@		; `string'
PUBLIC	??_C@_0BJ@NPIJBMBH@zipimport?4ZipImportError?$AA@ ; `string'
PUBLIC	PyInit_zipimport
EXTRN	PyModule_AddObject:PROC
EXTRN	PyErr_NewException:PROC
EXTRN	PyExc_ImportError:QWORD
EXTRN	PyModule_Create2TraceRefs:PROC
EXTRN	Py_OptimizeFlag:DWORD
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_zipimport DD imagerel $LN11
	DD	imagerel $LN11+471
	DD	imagerel $unwind$PyInit_zipimport
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_zipimport DD 030701H
	DD	070038207H
	DD	06002H
xdata	ENDS
;	COMDAT ??_C@_0BF@DAAMIGMB@_zip_directory_cache?$AA@
CONST	SEGMENT
??_C@_0BF@DAAMIGMB@_zip_directory_cache?$AA@ DB '_zip_directory_cache', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NDJAEMK@zipimporter?$AA@
CONST	SEGMENT
??_C@_0M@NDJAEMK@zipimporter?$AA@ DB 'zipimporter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KPLNEBLJ@ZipImportError?$AA@
CONST	SEGMENT
??_C@_0P@KPLNEBLJ@ZipImportError?$AA@ DB 'ZipImportError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NPIJBMBH@zipimport?4ZipImportError?$AA@
CONST	SEGMENT
??_C@_0BJ@NPIJBMBH@zipimport?4ZipImportError?$AA@ DB 'zipimport.ZipImport'
	DB	'Error', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit_zipimport
_TEXT	SEGMENT
mod$ = 32
tmp$21651 = 40
PyInit_zipimport PROC					; COMDAT

; 1450 : {

$LN11:
  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1451 :     PyObject *mod;
; 1452 : 
; 1453 :     if (PyType_Ready(&ZipImporter_Type) < 0)

  00007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ZipImporter_Type
  0000e	e8 00 00 00 00	 call	 PyType_Ready
  00013	85 c0		 test	 eax, eax
  00015	7d 07		 jge	 SHORT $LN8@PyInit_zip

; 1454 :         return NULL;

  00017	33 c0		 xor	 eax, eax
  00019	e9 b2 01 00 00	 jmp	 $LN9@PyInit_zip
$LN8@PyInit_zip:

; 1455 : 
; 1456 :     /* Correct directory separator */
; 1457 :     zip_searchorder[0].suffix[0] = SEP;

  0001e	c6 05 00 00 00
	00 5c		 mov	 BYTE PTR zip_searchorder, 92 ; 0000005cH

; 1458 :     zip_searchorder[1].suffix[0] = SEP;

  00025	c6 05 14 00 00
	00 5c		 mov	 BYTE PTR zip_searchorder+20, 92 ; 0000005cH

; 1459 :     zip_searchorder[2].suffix[0] = SEP;

  0002c	c6 05 28 00 00
	00 5c		 mov	 BYTE PTR zip_searchorder+40, 92 ; 0000005cH

; 1460 :     if (Py_OptimizeFlag) {

  00033	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_OptimizeFlag, 0
  0003a	0f 84 9a 00 00
	00		 je	 $LN7@PyInit_zip

; 1461 :         /* Reverse *.pyc and *.pyo */
; 1462 :         struct st_zip_searchorder tmp;
; 1463 :         tmp = zip_searchorder[0];

  00040	48 8d 44 24 28	 lea	 rax, QWORD PTR tmp$21651[rsp]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:zip_searchorder
  0004c	48 8b f8	 mov	 rdi, rax
  0004f	48 8b f1	 mov	 rsi, rcx
  00052	b9 14 00 00 00	 mov	 ecx, 20
  00057	f3 a4		 rep movsb

; 1464 :         zip_searchorder[0] = zip_searchorder[1];

  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:zip_searchorder
  00060	48 8d 0d 14 00
	00 00		 lea	 rcx, OFFSET FLAT:zip_searchorder+20
  00067	48 8b f8	 mov	 rdi, rax
  0006a	48 8b f1	 mov	 rsi, rcx
  0006d	b9 14 00 00 00	 mov	 ecx, 20
  00072	f3 a4		 rep movsb

; 1465 :         zip_searchorder[1] = tmp;

  00074	48 8d 05 14 00
	00 00		 lea	 rax, OFFSET FLAT:zip_searchorder+20
  0007b	48 8d 4c 24 28	 lea	 rcx, QWORD PTR tmp$21651[rsp]
  00080	48 8b f8	 mov	 rdi, rax
  00083	48 8b f1	 mov	 rsi, rcx
  00086	b9 14 00 00 00	 mov	 ecx, 20
  0008b	f3 a4		 rep movsb

; 1466 :         tmp = zip_searchorder[3];

  0008d	48 8d 44 24 28	 lea	 rax, QWORD PTR tmp$21651[rsp]
  00092	48 8d 0d 3c 00
	00 00		 lea	 rcx, OFFSET FLAT:zip_searchorder+60
  00099	48 8b f8	 mov	 rdi, rax
  0009c	48 8b f1	 mov	 rsi, rcx
  0009f	b9 14 00 00 00	 mov	 ecx, 20
  000a4	f3 a4		 rep movsb

; 1467 :         zip_searchorder[3] = zip_searchorder[4];

  000a6	48 8d 05 3c 00
	00 00		 lea	 rax, OFFSET FLAT:zip_searchorder+60
  000ad	48 8d 0d 50 00
	00 00		 lea	 rcx, OFFSET FLAT:zip_searchorder+80
  000b4	48 8b f8	 mov	 rdi, rax
  000b7	48 8b f1	 mov	 rsi, rcx
  000ba	b9 14 00 00 00	 mov	 ecx, 20
  000bf	f3 a4		 rep movsb

; 1468 :         zip_searchorder[4] = tmp;

  000c1	48 8d 05 50 00
	00 00		 lea	 rax, OFFSET FLAT:zip_searchorder+80
  000c8	48 8d 4c 24 28	 lea	 rcx, QWORD PTR tmp$21651[rsp]
  000cd	48 8b f8	 mov	 rdi, rax
  000d0	48 8b f1	 mov	 rsi, rcx
  000d3	b9 14 00 00 00	 mov	 ecx, 20
  000d8	f3 a4		 rep movsb
$LN7@PyInit_zip:

; 1469 :     }
; 1470 : 
; 1471 :     mod = PyModule_Create(&zipimportmodule);

  000da	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:zipimportmodule
  000e6	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  000eb	48 89 44 24 20	 mov	 QWORD PTR mod$[rsp], rax

; 1472 :     if (mod == NULL)

  000f0	48 83 7c 24 20
	00		 cmp	 QWORD PTR mod$[rsp], 0
  000f6	75 07		 jne	 SHORT $LN6@PyInit_zip

; 1473 :         return NULL;

  000f8	33 c0		 xor	 eax, eax
  000fa	e9 d1 00 00 00	 jmp	 $LN9@PyInit_zip
$LN6@PyInit_zip:

; 1474 : 
; 1475 :     ZipImportError = PyErr_NewException("zipimport.ZipImportError",
; 1476 :                                         PyExc_ImportError, NULL);

  000ff	45 33 c0	 xor	 r8d, r8d
  00102	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ImportError
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPIJBMBH@zipimport?4ZipImportError?$AA@
  00110	e8 00 00 00 00	 call	 PyErr_NewException
  00115	48 89 05 00 00
	00 00		 mov	 QWORD PTR ZipImportError, rax

; 1477 :     if (ZipImportError == NULL)

  0011c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ZipImportError, 0
  00124	75 07		 jne	 SHORT $LN5@PyInit_zip

; 1478 :         return NULL;

  00126	33 c0		 xor	 eax, eax
  00128	e9 a3 00 00 00	 jmp	 $LN9@PyInit_zip
$LN5@PyInit_zip:

; 1479 : 
; 1480 :     Py_INCREF(ZipImportError);

  0012d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZipImportError
  00134	e8 00 00 00 00	 call	 _Py_IncRef

; 1481 :     if (PyModule_AddObject(mod, "ZipImportError",
; 1482 :                            ZipImportError) < 0)

  00139	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ZipImportError
  00140	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@KPLNEBLJ@ZipImportError?$AA@
  00147	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mod$[rsp]
  0014c	e8 00 00 00 00	 call	 PyModule_AddObject
  00151	85 c0		 test	 eax, eax
  00153	7d 04		 jge	 SHORT $LN4@PyInit_zip

; 1483 :         return NULL;

  00155	33 c0		 xor	 eax, eax
  00157	eb 77		 jmp	 SHORT $LN9@PyInit_zip
$LN4@PyInit_zip:

; 1484 : 
; 1485 :     Py_INCREF(&ZipImporter_Type);

  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ZipImporter_Type
  00160	e8 00 00 00 00	 call	 _Py_IncRef

; 1486 :     if (PyModule_AddObject(mod, "zipimporter",
; 1487 :                            (PyObject *)&ZipImporter_Type) < 0)

  00165	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ZipImporter_Type
  0016c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@NDJAEMK@zipimporter?$AA@
  00173	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mod$[rsp]
  00178	e8 00 00 00 00	 call	 PyModule_AddObject
  0017d	85 c0		 test	 eax, eax
  0017f	7d 04		 jge	 SHORT $LN3@PyInit_zip

; 1488 :         return NULL;

  00181	33 c0		 xor	 eax, eax
  00183	eb 4b		 jmp	 SHORT $LN9@PyInit_zip
$LN3@PyInit_zip:

; 1489 : 
; 1490 :     zip_directory_cache = PyDict_New();

  00185	e8 00 00 00 00	 call	 PyDict_New
  0018a	48 89 05 00 00
	00 00		 mov	 QWORD PTR zip_directory_cache, rax

; 1491 :     if (zip_directory_cache == NULL)

  00191	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR zip_directory_cache, 0
  00199	75 04		 jne	 SHORT $LN2@PyInit_zip

; 1492 :         return NULL;

  0019b	33 c0		 xor	 eax, eax
  0019d	eb 31		 jmp	 SHORT $LN9@PyInit_zip
$LN2@PyInit_zip:

; 1493 :     Py_INCREF(zip_directory_cache);

  0019f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR zip_directory_cache
  001a6	e8 00 00 00 00	 call	 _Py_IncRef

; 1494 :     if (PyModule_AddObject(mod, "_zip_directory_cache",
; 1495 :                            zip_directory_cache) < 0)

  001ab	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR zip_directory_cache
  001b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@DAAMIGMB@_zip_directory_cache?$AA@
  001b9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mod$[rsp]
  001be	e8 00 00 00 00	 call	 PyModule_AddObject
  001c3	85 c0		 test	 eax, eax
  001c5	7d 04		 jge	 SHORT $LN1@PyInit_zip

; 1496 :         return NULL;

  001c7	33 c0		 xor	 eax, eax
  001c9	eb 05		 jmp	 SHORT $LN9@PyInit_zip
$LN1@PyInit_zip:

; 1497 :     return mod;

  001cb	48 8b 44 24 20	 mov	 rax, QWORD PTR mod$[rsp]
$LN9@PyInit_zip:

; 1498 : }

  001d0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001d4	5f		 pop	 rdi
  001d5	5e		 pop	 rsi
  001d6	c3		 ret	 0
PyInit_zipimport ENDP
_TEXT	ENDS
END
