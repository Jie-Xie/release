; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ ; `string'
PUBLIC	inflate_fast
;	COMDAT pdata
; File c:\src\pyparallel\modules\zlib\inffast.c
pdata	SEGMENT
$pdata$inflate_fast DD imagerel $LN62
	DD	imagerel $LN62+3044
	DD	imagerel $unwind$inflate_fast
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$inflate_fast DD 021001H
	DD	0170110H
xdata	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ DB 'invalid litera'
	DB	'l/length code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@ DB 'invalid distance code'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ DB 'invalid dis'
	DB	'tance too far back', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT inflate_fast
_TEXT	SEGMENT
beg$ = 0
here$ = 8
window$ = 16
last$ = 24
dcode$ = 32
whave$ = 40
in$ = 48
len$ = 56
bits$ = 60
wnext$ = 64
lmask$ = 68
end$ = 72
lcode$ = 80
dist$ = 88
hold$ = 92
wsize$ = 96
dmask$ = 100
from$ = 104
op$ = 112
out$ = 120
state$ = 128
tv420 = 136
tv425 = 140
tv460 = 144
tv505 = 148
tv663 = 152
tv335 = 160
tv343 = 168
strm$ = 192
start$ = 200
inflate_fast PROC					; COMDAT

; 70   : {

$LN62:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 71   :     struct inflate_state FAR *state;
; 72   :     unsigned char FAR *in;      /* local strm->next_in */
; 73   :     unsigned char FAR *last;    /* while in < last, enough input available */
; 74   :     unsigned char FAR *out;     /* local strm->next_out */
; 75   :     unsigned char FAR *beg;     /* inflate()'s initial strm->next_out */
; 76   :     unsigned char FAR *end;     /* while out < end, enough space available */
; 77   : #ifdef INFLATE_STRICT
; 78   :     unsigned dmax;              /* maximum distance from zlib header */
; 79   : #endif
; 80   :     unsigned wsize;             /* window size or zero if not using window */
; 81   :     unsigned whave;             /* valid bytes in the window */
; 82   :     unsigned wnext;             /* window write index */
; 83   :     unsigned char FAR *window;  /* allocated sliding window, if wsize != 0 */
; 84   :     unsigned long hold;         /* local strm->hold */
; 85   :     unsigned bits;              /* local strm->bits */
; 86   :     code const FAR *lcode;      /* local strm->lencode */
; 87   :     code const FAR *dcode;      /* local strm->distcode */
; 88   :     unsigned lmask;             /* mask for first level of length codes */
; 89   :     unsigned dmask;             /* mask for first level of distance codes */
; 90   :     code here;                  /* retrieved table entry */
; 91   :     unsigned op;                /* code bits, operation, extra bits, or */
; 92   :                                 /*  window position, window bytes to copy */
; 93   :     unsigned len;               /* match length, unused bytes */
; 94   :     unsigned dist;              /* match distance */
; 95   :     unsigned char FAR *from;    /* where to copy match from */
; 96   : 
; 97   :     /* copy state to local variables */
; 98   :     state = (struct inflate_state FAR *)strm->state;

  00010	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00018	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0001c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR state$[rsp], rax

; 99   :     in = strm->next_in - OFF;

  00024	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 ff c8	 dec	 rax
  00032	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax

; 100  :     last = in + (strm->avail_in - 5);

  00037	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  0003f	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00042	83 e8 05	 sub	 eax, 5
  00045	8b c0		 mov	 eax, eax
  00047	48 8b 4c 24 30	 mov	 rcx, QWORD PTR in$[rsp]
  0004c	48 03 c8	 add	 rcx, rax
  0004f	48 8b c1	 mov	 rax, rcx
  00052	48 89 44 24 18	 mov	 QWORD PTR last$[rsp], rax

; 101  :     out = strm->next_out - OFF;

  00057	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  0005f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00063	48 ff c8	 dec	 rax
  00066	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax

; 102  :     beg = out - (start - strm->avail_out);

  0006b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00073	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00076	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR start$[rsp]
  0007d	2b c8		 sub	 ecx, eax
  0007f	8b c1		 mov	 eax, ecx
  00081	8b c0		 mov	 eax, eax
  00083	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00088	48 2b c8	 sub	 rcx, rax
  0008b	48 8b c1	 mov	 rax, rcx
  0008e	48 89 04 24	 mov	 QWORD PTR beg$[rsp], rax

; 103  :     end = out + (strm->avail_out - 257);

  00092	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  0009a	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0009d	2d 01 01 00 00	 sub	 eax, 257		; 00000101H
  000a2	8b c0		 mov	 eax, eax
  000a4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  000a9	48 03 c8	 add	 rcx, rax
  000ac	48 8b c1	 mov	 rax, rcx
  000af	48 89 44 24 48	 mov	 QWORD PTR end$[rsp], rax

; 104  : #ifdef INFLATE_STRICT
; 105  :     dmax = state->dmax;
; 106  : #endif
; 107  :     wsize = state->wsize;

  000b4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000bc	8b 40 2c	 mov	 eax, DWORD PTR [rax+44]
  000bf	89 44 24 60	 mov	 DWORD PTR wsize$[rsp], eax

; 108  :     whave = state->whave;

  000c3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000cb	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  000ce	89 44 24 28	 mov	 DWORD PTR whave$[rsp], eax

; 109  :     wnext = state->wnext;

  000d2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000da	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  000dd	89 44 24 40	 mov	 DWORD PTR wnext$[rsp], eax

; 110  :     window = state->window;

  000e1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000e9	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000ed	48 89 44 24 10	 mov	 QWORD PTR window$[rsp], rax

; 111  :     hold = state->hold;

  000f2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000fa	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  000fd	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 112  :     bits = state->bits;

  00101	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00109	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  0010c	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 113  :     lcode = state->lencode;

  00110	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00118	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0011c	48 89 44 24 50	 mov	 QWORD PTR lcode$[rsp], rax

; 114  :     dcode = state->distcode;

  00121	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00129	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0012d	48 89 44 24 20	 mov	 QWORD PTR dcode$[rsp], rax

; 115  :     lmask = (1U << state->lenbits) - 1;

  00132	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  0013a	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  0013d	b9 01 00 00 00	 mov	 ecx, 1
  00142	89 8c 24 88 00
	00 00		 mov	 DWORD PTR tv420[rsp], ecx
  00149	0f b6 c8	 movzx	 ecx, al
  0014c	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv420[rsp]
  00153	d3 e0		 shl	 eax, cl
  00155	ff c8		 dec	 eax
  00157	89 44 24 44	 mov	 DWORD PTR lmask$[rsp], eax

; 116  :     dmask = (1U << state->distbits) - 1;

  0015b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00163	8b 40 6c	 mov	 eax, DWORD PTR [rax+108]
  00166	b9 01 00 00 00	 mov	 ecx, 1
  0016b	89 8c 24 8c 00
	00 00		 mov	 DWORD PTR tv425[rsp], ecx
  00172	0f b6 c8	 movzx	 ecx, al
  00175	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv425[rsp]
  0017c	d3 e0		 shl	 eax, cl
  0017e	ff c8		 dec	 eax
  00180	89 44 24 64	 mov	 DWORD PTR dmask$[rsp], eax
$LN55@inflate_fa:

; 117  : 
; 118  :     /* decode literals and length/distances until end-of-block or not enough
; 119  :        input data or output space */
; 120  :     do {
; 121  :         if (bits < 15) {

  00184	83 7c 24 3c 0f	 cmp	 DWORD PTR bits$[rsp], 15
  00189	73 64		 jae	 SHORT $LN52@inflate_fa

; 122  :             hold += (unsigned long)(PUP(in)) << bits;

  0018b	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00190	48 ff c0	 inc	 rax
  00193	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  00198	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0019d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001a0	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  001a4	d3 e0		 shl	 eax, cl
  001a6	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  001aa	03 c8		 add	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 123  :             bits += 8;

  001b2	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  001b6	83 c0 08	 add	 eax, 8
  001b9	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 124  :             hold += (unsigned long)(PUP(in)) << bits;

  001bd	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  001c2	48 ff c0	 inc	 rax
  001c5	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  001ca	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  001cf	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001d2	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  001d6	d3 e0		 shl	 eax, cl
  001d8	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  001dc	03 c8		 add	 ecx, eax
  001de	8b c1		 mov	 eax, ecx
  001e0	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 125  :             bits += 8;

  001e4	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  001e8	83 c0 08	 add	 eax, 8
  001eb	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax
$LN52@inflate_fa:

; 126  :         }
; 127  :         here = lcode[hold & lmask];

  001ef	8b 44 24 44	 mov	 eax, DWORD PTR lmask$[rsp]
  001f3	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  001f7	23 c8		 and	 ecx, eax
  001f9	8b c1		 mov	 eax, ecx
  001fb	8b c0		 mov	 eax, eax
  001fd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR lcode$[rsp]
  00202	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00205	89 44 24 08	 mov	 DWORD PTR here$[rsp], eax
$dolen$4849:

; 128  :       dolen:
; 129  :         op = (unsigned)(here.bits);

  00209	0f b6 44 24 09	 movzx	 eax, BYTE PTR here$[rsp+1]
  0020e	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 130  :         hold >>= op;

  00212	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00216	0f b6 c8	 movzx	 ecx, al
  00219	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  0021d	d3 e8		 shr	 eax, cl
  0021f	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 131  :         bits -= op;

  00223	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00227	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  0022b	2b c8		 sub	 ecx, eax
  0022d	8b c1		 mov	 eax, ecx
  0022f	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 132  :         op = (unsigned)(here.op);

  00233	0f b6 44 24 08	 movzx	 eax, BYTE PTR here$[rsp]
  00238	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 133  :         if (op == 0) {                          /* literal */

  0023c	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00241	75 1e		 jne	 SHORT $LN51@inflate_fa

; 134  :             Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 135  :                     "inflate:         literal '%c'\n" :
; 136  :                     "inflate:         literal 0x%02x\n", here.val));
; 137  :             PUP(out) = (unsigned char)(here.val);

  00243	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00248	48 ff c0	 inc	 rax
  0024b	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00250	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00255	0f b6 4c 24 0a	 movzx	 ecx, BYTE PTR here$[rsp+2]
  0025a	88 08		 mov	 BYTE PTR [rax], cl
  0025c	e9 fe 07 00 00	 jmp	 $LN50@inflate_fa
$LN51@inflate_fa:

; 138  :         }
; 139  :         else if (op & 16) {                     /* length base */

  00261	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00265	83 e0 10	 and	 eax, 16
  00268	85 c0		 test	 eax, eax
  0026a	0f 84 71 07 00
	00		 je	 $LN49@inflate_fa

; 140  :             len = (unsigned)(here.val);

  00270	0f b7 44 24 0a	 movzx	 eax, WORD PTR here$[rsp+2]
  00275	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax

; 141  :             op &= 15;                           /* number of extra bits */

  00279	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0027d	83 e0 0f	 and	 eax, 15
  00280	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 142  :             if (op) {

  00284	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00289	0f 84 8f 00 00
	00		 je	 $LN48@inflate_fa

; 143  :                 if (bits < op) {

  0028f	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00293	39 44 24 3c	 cmp	 DWORD PTR bits$[rsp], eax
  00297	73 32		 jae	 SHORT $LN47@inflate_fa

; 144  :                     hold += (unsigned long)(PUP(in)) << bits;

  00299	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0029e	48 ff c0	 inc	 rax
  002a1	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  002a6	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  002ab	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002ae	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  002b2	d3 e0		 shl	 eax, cl
  002b4	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  002b8	03 c8		 add	 ecx, eax
  002ba	8b c1		 mov	 eax, ecx
  002bc	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 145  :                     bits += 8;

  002c0	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  002c4	83 c0 08	 add	 eax, 8
  002c7	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax
$LN47@inflate_fa:

; 146  :                 }
; 147  :                 len += (unsigned)hold & ((1U << op) - 1);

  002cb	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  002cf	b9 01 00 00 00	 mov	 ecx, 1
  002d4	89 8c 24 90 00
	00 00		 mov	 DWORD PTR tv460[rsp], ecx
  002db	0f b6 c8	 movzx	 ecx, al
  002de	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv460[rsp]
  002e5	d3 e0		 shl	 eax, cl
  002e7	ff c8		 dec	 eax
  002e9	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  002ed	23 c8		 and	 ecx, eax
  002ef	8b c1		 mov	 eax, ecx
  002f1	8b 4c 24 38	 mov	 ecx, DWORD PTR len$[rsp]
  002f5	03 c8		 add	 ecx, eax
  002f7	8b c1		 mov	 eax, ecx
  002f9	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax

; 148  :                 hold >>= op;

  002fd	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00301	0f b6 c8	 movzx	 ecx, al
  00304	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  00308	d3 e8		 shr	 eax, cl
  0030a	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 149  :                 bits -= op;

  0030e	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00312	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  00316	2b c8		 sub	 ecx, eax
  00318	8b c1		 mov	 eax, ecx
  0031a	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax
$LN48@inflate_fa:

; 150  :             }
; 151  :             Tracevv((stderr, "inflate:         length %u\n", len));
; 152  :             if (bits < 15) {

  0031e	83 7c 24 3c 0f	 cmp	 DWORD PTR bits$[rsp], 15
  00323	73 64		 jae	 SHORT $LN46@inflate_fa

; 153  :                 hold += (unsigned long)(PUP(in)) << bits;

  00325	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0032a	48 ff c0	 inc	 rax
  0032d	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  00332	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00337	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0033a	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  0033e	d3 e0		 shl	 eax, cl
  00340	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  00344	03 c8		 add	 ecx, eax
  00346	8b c1		 mov	 eax, ecx
  00348	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 154  :                 bits += 8;

  0034c	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00350	83 c0 08	 add	 eax, 8
  00353	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 155  :                 hold += (unsigned long)(PUP(in)) << bits;

  00357	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0035c	48 ff c0	 inc	 rax
  0035f	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  00364	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00369	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0036c	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  00370	d3 e0		 shl	 eax, cl
  00372	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  00376	03 c8		 add	 ecx, eax
  00378	8b c1		 mov	 eax, ecx
  0037a	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 156  :                 bits += 8;

  0037e	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00382	83 c0 08	 add	 eax, 8
  00385	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax
$LN46@inflate_fa:

; 157  :             }
; 158  :             here = dcode[hold & dmask];

  00389	8b 44 24 64	 mov	 eax, DWORD PTR dmask$[rsp]
  0038d	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  00391	23 c8		 and	 ecx, eax
  00393	8b c1		 mov	 eax, ecx
  00395	8b c0		 mov	 eax, eax
  00397	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dcode$[rsp]
  0039c	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0039f	89 44 24 08	 mov	 DWORD PTR here$[rsp], eax
$dodist$4864:

; 159  :           dodist:
; 160  :             op = (unsigned)(here.bits);

  003a3	0f b6 44 24 09	 movzx	 eax, BYTE PTR here$[rsp+1]
  003a8	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 161  :             hold >>= op;

  003ac	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  003b0	0f b6 c8	 movzx	 ecx, al
  003b3	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  003b7	d3 e8		 shr	 eax, cl
  003b9	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 162  :             bits -= op;

  003bd	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  003c1	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  003c5	2b c8		 sub	 ecx, eax
  003c7	8b c1		 mov	 eax, ecx
  003c9	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 163  :             op = (unsigned)(here.op);

  003cd	0f b6 44 24 08	 movzx	 eax, BYTE PTR here$[rsp]
  003d2	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 164  :             if (op & 16) {                      /* distance base */

  003d6	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  003da	83 e0 10	 and	 eax, 16
  003dd	85 c0		 test	 eax, eax
  003df	0f 84 96 05 00
	00		 je	 $LN45@inflate_fa

; 165  :                 dist = (unsigned)(here.val);

  003e5	0f b7 44 24 0a	 movzx	 eax, WORD PTR here$[rsp+2]
  003ea	89 44 24 58	 mov	 DWORD PTR dist$[rsp], eax

; 166  :                 op &= 15;                       /* number of extra bits */

  003ee	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  003f2	83 e0 0f	 and	 eax, 15
  003f5	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 167  :                 if (bits < op) {

  003f9	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  003fd	39 44 24 3c	 cmp	 DWORD PTR bits$[rsp], eax
  00401	73 6e		 jae	 SHORT $LN44@inflate_fa

; 168  :                     hold += (unsigned long)(PUP(in)) << bits;

  00403	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00408	48 ff c0	 inc	 rax
  0040b	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  00410	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00415	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00418	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  0041c	d3 e0		 shl	 eax, cl
  0041e	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  00422	03 c8		 add	 ecx, eax
  00424	8b c1		 mov	 eax, ecx
  00426	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 169  :                     bits += 8;

  0042a	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  0042e	83 c0 08	 add	 eax, 8
  00431	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 170  :                     if (bits < op) {

  00435	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00439	39 44 24 3c	 cmp	 DWORD PTR bits$[rsp], eax
  0043d	73 32		 jae	 SHORT $LN43@inflate_fa

; 171  :                         hold += (unsigned long)(PUP(in)) << bits;

  0043f	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00444	48 ff c0	 inc	 rax
  00447	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  0044c	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00451	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00454	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  00458	d3 e0		 shl	 eax, cl
  0045a	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  0045e	03 c8		 add	 ecx, eax
  00460	8b c1		 mov	 eax, ecx
  00462	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 172  :                         bits += 8;

  00466	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  0046a	83 c0 08	 add	 eax, 8
  0046d	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax
$LN43@inflate_fa:
$LN44@inflate_fa:

; 173  :                     }
; 174  :                 }
; 175  :                 dist += (unsigned)hold & ((1U << op) - 1);

  00471	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00475	b9 01 00 00 00	 mov	 ecx, 1
  0047a	89 8c 24 94 00
	00 00		 mov	 DWORD PTR tv505[rsp], ecx
  00481	0f b6 c8	 movzx	 ecx, al
  00484	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv505[rsp]
  0048b	d3 e0		 shl	 eax, cl
  0048d	ff c8		 dec	 eax
  0048f	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  00493	23 c8		 and	 ecx, eax
  00495	8b c1		 mov	 eax, ecx
  00497	8b 4c 24 58	 mov	 ecx, DWORD PTR dist$[rsp]
  0049b	03 c8		 add	 ecx, eax
  0049d	8b c1		 mov	 eax, ecx
  0049f	89 44 24 58	 mov	 DWORD PTR dist$[rsp], eax

; 176  : #ifdef INFLATE_STRICT
; 177  :                 if (dist > dmax) {
; 178  :                     strm->msg = (char *)"invalid distance too far back";
; 179  :                     state->mode = BAD;
; 180  :                     break;
; 181  :                 }
; 182  : #endif
; 183  :                 hold >>= op;

  004a3	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  004a7	0f b6 c8	 movzx	 ecx, al
  004aa	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  004ae	d3 e8		 shr	 eax, cl
  004b0	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 184  :                 bits -= op;

  004b4	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  004b8	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  004bc	2b c8		 sub	 ecx, eax
  004be	8b c1		 mov	 eax, ecx
  004c0	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 185  :                 Tracevv((stderr, "inflate:         distance %u\n", dist));
; 186  :                 op = (unsigned)(out - beg);     /* max distance in output */

  004c4	48 8b 04 24	 mov	 rax, QWORD PTR beg$[rsp]
  004c8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  004cd	48 2b c8	 sub	 rcx, rax
  004d0	48 8b c1	 mov	 rax, rcx
  004d3	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 187  :                 if (dist > op) {                /* see if copy from window */

  004d7	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  004db	39 44 24 58	 cmp	 DWORD PTR dist$[rsp], eax
  004df	0f 86 8f 03 00
	00		 jbe	 $LN42@inflate_fa

; 188  :                     op = dist - op;             /* distance back in window */

  004e5	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  004e9	8b 4c 24 58	 mov	 ecx, DWORD PTR dist$[rsp]
  004ed	2b c8		 sub	 ecx, eax
  004ef	8b c1		 mov	 eax, ecx
  004f1	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 189  :                     if (op > whave) {

  004f5	8b 44 24 28	 mov	 eax, DWORD PTR whave$[rsp]
  004f9	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  004fd	76 37		 jbe	 SHORT $LN41@inflate_fa

; 190  :                         if (state->sane) {

  004ff	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00507	83 b8 d8 1b 00
	00 00		 cmp	 DWORD PTR [rax+7128], 0
  0050e	74 26		 je	 SHORT $LN40@inflate_fa

; 191  :                             strm->msg =
; 192  :                                 (char *)"invalid distance too far back";

  00510	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00518	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@
  0051f	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 193  :                             state->mode = BAD;

  00523	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  0052b	c7 00 1d 00 00
	00		 mov	 DWORD PTR [rax], 29

; 194  :                             break;

  00531	e9 45 05 00 00	 jmp	 $LN53@inflate_fa
$LN40@inflate_fa:
$LN41@inflate_fa:

; 195  :                         }
; 196  : #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
; 197  :                         if (len <= op - whave) {
; 198  :                             do {
; 199  :                                 PUP(out) = 0;
; 200  :                             } while (--len);
; 201  :                             continue;
; 202  :                         }
; 203  :                         len -= op - whave;
; 204  :                         do {
; 205  :                             PUP(out) = 0;
; 206  :                         } while (--op > whave);
; 207  :                         if (op == 0) {
; 208  :                             from = out - dist;
; 209  :                             do {
; 210  :                                 PUP(out) = PUP(from);
; 211  :                             } while (--len);
; 212  :                             continue;
; 213  :                         }
; 214  : #endif
; 215  :                     }
; 216  :                     from = window - OFF;

  00536	48 8b 44 24 10	 mov	 rax, QWORD PTR window$[rsp]
  0053b	48 ff c8	 dec	 rax
  0053e	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 217  :                     if (wnext == 0) {           /* very common case */

  00543	83 7c 24 40 00	 cmp	 DWORD PTR wnext$[rsp], 0
  00548	0f 85 8b 00 00
	00		 jne	 $LN39@inflate_fa

; 218  :                         from += wsize - op;

  0054e	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00552	8b 4c 24 60	 mov	 ecx, DWORD PTR wsize$[rsp]
  00556	2b c8		 sub	 ecx, eax
  00558	8b c1		 mov	 eax, ecx
  0055a	8b c0		 mov	 eax, eax
  0055c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  00561	48 03 c8	 add	 rcx, rax
  00564	48 8b c1	 mov	 rax, rcx
  00567	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 219  :                         if (op < len) {         /* some from window */

  0056c	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  00570	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  00574	73 5e		 jae	 SHORT $LN38@inflate_fa

; 220  :                             len -= op;

  00576	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0057a	8b 4c 24 38	 mov	 ecx, DWORD PTR len$[rsp]
  0057e	2b c8		 sub	 ecx, eax
  00580	8b c1		 mov	 eax, ecx
  00582	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax
$LN37@inflate_fa:

; 221  :                             do {
; 222  :                                 PUP(out) = PUP(from);

  00586	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0058b	48 ff c0	 inc	 rax
  0058e	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00593	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00598	48 ff c0	 inc	 rax
  0059b	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  005a0	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  005a5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  005aa	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  005ad	88 08		 mov	 BYTE PTR [rax], cl

; 223  :                             } while (--op);

  005af	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  005b3	ff c8		 dec	 eax
  005b5	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  005b9	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  005be	75 c6		 jne	 SHORT $LN37@inflate_fa

; 224  :                             from = out - dist;  /* rest from output */

  005c0	8b 44 24 58	 mov	 eax, DWORD PTR dist$[rsp]
  005c4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  005c9	48 2b c8	 sub	 rcx, rax
  005cc	48 8b c1	 mov	 rax, rcx
  005cf	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN38@inflate_fa:

; 225  :                         }

  005d4	e9 a0 01 00 00	 jmp	 $LN34@inflate_fa
$LN39@inflate_fa:

; 226  :                     }
; 227  :                     else if (wnext < op) {      /* wrap around window */

  005d9	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  005dd	39 44 24 40	 cmp	 DWORD PTR wnext$[rsp], eax
  005e1	0f 83 0c 01 00
	00		 jae	 $LN33@inflate_fa

; 228  :                         from += wsize + wnext - op;

  005e7	8b 44 24 40	 mov	 eax, DWORD PTR wnext$[rsp]
  005eb	8b 4c 24 60	 mov	 ecx, DWORD PTR wsize$[rsp]
  005ef	03 c8		 add	 ecx, eax
  005f1	8b c1		 mov	 eax, ecx
  005f3	2b 44 24 70	 sub	 eax, DWORD PTR op$[rsp]
  005f7	8b c0		 mov	 eax, eax
  005f9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  005fe	48 03 c8	 add	 rcx, rax
  00601	48 8b c1	 mov	 rax, rcx
  00604	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 229  :                         op -= wnext;

  00609	8b 44 24 40	 mov	 eax, DWORD PTR wnext$[rsp]
  0060d	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  00611	2b c8		 sub	 ecx, eax
  00613	8b c1		 mov	 eax, ecx
  00615	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 230  :                         if (op < len) {         /* some from end of window */

  00619	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  0061d	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  00621	0f 83 c7 00 00
	00		 jae	 $LN32@inflate_fa

; 231  :                             len -= op;

  00627	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0062b	8b 4c 24 38	 mov	 ecx, DWORD PTR len$[rsp]
  0062f	2b c8		 sub	 ecx, eax
  00631	8b c1		 mov	 eax, ecx
  00633	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax
$LN31@inflate_fa:

; 232  :                             do {
; 233  :                                 PUP(out) = PUP(from);

  00637	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0063c	48 ff c0	 inc	 rax
  0063f	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00644	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00649	48 ff c0	 inc	 rax
  0064c	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00651	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00656	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  0065b	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0065e	88 08		 mov	 BYTE PTR [rax], cl

; 234  :                             } while (--op);

  00660	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00664	ff c8		 dec	 eax
  00666	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  0066a	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  0066f	75 c6		 jne	 SHORT $LN31@inflate_fa

; 235  :                             from = window - OFF;

  00671	48 8b 44 24 10	 mov	 rax, QWORD PTR window$[rsp]
  00676	48 ff c8	 dec	 rax
  00679	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 236  :                             if (wnext < len) {  /* some from start of window */

  0067e	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  00682	39 44 24 40	 cmp	 DWORD PTR wnext$[rsp], eax
  00686	73 66		 jae	 SHORT $LN28@inflate_fa

; 237  :                                 op = wnext;

  00688	8b 44 24 40	 mov	 eax, DWORD PTR wnext$[rsp]
  0068c	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 238  :                                 len -= op;

  00690	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00694	8b 4c 24 38	 mov	 ecx, DWORD PTR len$[rsp]
  00698	2b c8		 sub	 ecx, eax
  0069a	8b c1		 mov	 eax, ecx
  0069c	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax
$LN27@inflate_fa:

; 239  :                                 do {
; 240  :                                     PUP(out) = PUP(from);

  006a0	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  006a5	48 ff c0	 inc	 rax
  006a8	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  006ad	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  006b2	48 ff c0	 inc	 rax
  006b5	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  006ba	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  006bf	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  006c4	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  006c7	88 08		 mov	 BYTE PTR [rax], cl

; 241  :                                 } while (--op);

  006c9	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  006cd	ff c8		 dec	 eax
  006cf	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  006d3	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  006d8	75 c6		 jne	 SHORT $LN27@inflate_fa

; 242  :                                 from = out - dist;      /* rest from output */

  006da	8b 44 24 58	 mov	 eax, DWORD PTR dist$[rsp]
  006de	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  006e3	48 2b c8	 sub	 rcx, rax
  006e6	48 8b c1	 mov	 rax, rcx
  006e9	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN28@inflate_fa:
$LN32@inflate_fa:

; 243  :                             }
; 244  :                         }
; 245  :                     }
; 246  :                     else {                      /* contiguous in window */

  006ee	e9 86 00 00 00	 jmp	 $LN24@inflate_fa
$LN33@inflate_fa:

; 247  :                         from += wnext - op;

  006f3	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  006f7	8b 4c 24 40	 mov	 ecx, DWORD PTR wnext$[rsp]
  006fb	2b c8		 sub	 ecx, eax
  006fd	8b c1		 mov	 eax, ecx
  006ff	8b c0		 mov	 eax, eax
  00701	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  00706	48 03 c8	 add	 rcx, rax
  00709	48 8b c1	 mov	 rax, rcx
  0070c	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 248  :                         if (op < len) {         /* some from window */

  00711	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  00715	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  00719	73 5e		 jae	 SHORT $LN23@inflate_fa

; 249  :                             len -= op;

  0071b	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0071f	8b 4c 24 38	 mov	 ecx, DWORD PTR len$[rsp]
  00723	2b c8		 sub	 ecx, eax
  00725	8b c1		 mov	 eax, ecx
  00727	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax
$LN22@inflate_fa:

; 250  :                             do {
; 251  :                                 PUP(out) = PUP(from);

  0072b	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00730	48 ff c0	 inc	 rax
  00733	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00738	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0073d	48 ff c0	 inc	 rax
  00740	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00745	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0074a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  0074f	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00752	88 08		 mov	 BYTE PTR [rax], cl

; 252  :                             } while (--op);

  00754	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00758	ff c8		 dec	 eax
  0075a	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  0075e	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00763	75 c6		 jne	 SHORT $LN22@inflate_fa

; 253  :                             from = out - dist;  /* rest from output */

  00765	8b 44 24 58	 mov	 eax, DWORD PTR dist$[rsp]
  00769	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0076e	48 2b c8	 sub	 rcx, rax
  00771	48 8b c1	 mov	 rax, rcx
  00774	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN23@inflate_fa:
$LN24@inflate_fa:
$LN34@inflate_fa:
$LN19@inflate_fa:

; 254  :                         }
; 255  :                     }
; 256  :                     while (len > 2) {

  00779	83 7c 24 38 02	 cmp	 DWORD PTR len$[rsp], 2
  0077e	0f 86 8b 00 00
	00		 jbe	 $LN18@inflate_fa

; 257  :                         PUP(out) = PUP(from);

  00784	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00789	48 ff c0	 inc	 rax
  0078c	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00791	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00796	48 ff c0	 inc	 rax
  00799	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  0079e	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  007a3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  007a8	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  007ab	88 08		 mov	 BYTE PTR [rax], cl

; 258  :                         PUP(out) = PUP(from);

  007ad	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  007b2	48 ff c0	 inc	 rax
  007b5	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  007ba	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  007bf	48 ff c0	 inc	 rax
  007c2	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  007c7	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  007cc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  007d1	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  007d4	88 08		 mov	 BYTE PTR [rax], cl

; 259  :                         PUP(out) = PUP(from);

  007d6	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  007db	48 ff c0	 inc	 rax
  007de	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  007e3	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  007e8	48 ff c0	 inc	 rax
  007eb	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  007f0	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  007f5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  007fa	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  007fd	88 08		 mov	 BYTE PTR [rax], cl

; 260  :                         len -= 3;

  007ff	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  00803	83 e8 03	 sub	 eax, 3
  00806	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax

; 261  :                     }

  0080a	e9 6a ff ff ff	 jmp	 $LN19@inflate_fa
$LN18@inflate_fa:

; 262  :                     if (len) {

  0080f	83 7c 24 38 00	 cmp	 DWORD PTR len$[rsp], 0
  00814	74 59		 je	 SHORT $LN17@inflate_fa

; 263  :                         PUP(out) = PUP(from);

  00816	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0081b	48 ff c0	 inc	 rax
  0081e	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00823	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00828	48 ff c0	 inc	 rax
  0082b	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00830	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00835	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  0083a	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0083d	88 08		 mov	 BYTE PTR [rax], cl

; 264  :                         if (len > 1)

  0083f	83 7c 24 38 01	 cmp	 DWORD PTR len$[rsp], 1
  00844	76 29		 jbe	 SHORT $LN16@inflate_fa

; 265  :                             PUP(out) = PUP(from);

  00846	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0084b	48 ff c0	 inc	 rax
  0084e	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00853	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00858	48 ff c0	 inc	 rax
  0085b	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00860	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00865	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  0086a	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0086d	88 08		 mov	 BYTE PTR [rax], cl
$LN16@inflate_fa:
$LN17@inflate_fa:

; 266  :                     }
; 267  :                 }
; 268  :                 else {

  0086f	e9 05 01 00 00	 jmp	 $LN15@inflate_fa
$LN42@inflate_fa:

; 269  :                     from = out - dist;          /* copy direct from output */

  00874	8b 44 24 58	 mov	 eax, DWORD PTR dist$[rsp]
  00878	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0087d	48 2b c8	 sub	 rcx, rax
  00880	48 8b c1	 mov	 rax, rcx
  00883	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN14@inflate_fa:

; 270  :                     do {                        /* minimum length is three */
; 271  :                         PUP(out) = PUP(from);

  00888	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0088d	48 ff c0	 inc	 rax
  00890	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00895	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0089a	48 ff c0	 inc	 rax
  0089d	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  008a2	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  008a7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  008ac	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  008af	88 08		 mov	 BYTE PTR [rax], cl

; 272  :                         PUP(out) = PUP(from);

  008b1	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  008b6	48 ff c0	 inc	 rax
  008b9	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  008be	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  008c3	48 ff c0	 inc	 rax
  008c6	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  008cb	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  008d0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  008d5	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  008d8	88 08		 mov	 BYTE PTR [rax], cl

; 273  :                         PUP(out) = PUP(from);

  008da	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  008df	48 ff c0	 inc	 rax
  008e2	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  008e7	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  008ec	48 ff c0	 inc	 rax
  008ef	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  008f4	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  008f9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  008fe	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00901	88 08		 mov	 BYTE PTR [rax], cl

; 274  :                         len -= 3;

  00903	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  00907	83 e8 03	 sub	 eax, 3
  0090a	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax

; 275  :                     } while (len > 2);

  0090e	83 7c 24 38 02	 cmp	 DWORD PTR len$[rsp], 2
  00913	0f 87 6f ff ff
	ff		 ja	 $LN14@inflate_fa

; 276  :                     if (len) {

  00919	83 7c 24 38 00	 cmp	 DWORD PTR len$[rsp], 0
  0091e	74 59		 je	 SHORT $LN11@inflate_fa

; 277  :                         PUP(out) = PUP(from);

  00920	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00925	48 ff c0	 inc	 rax
  00928	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  0092d	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00932	48 ff c0	 inc	 rax
  00935	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  0093a	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0093f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  00944	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00947	88 08		 mov	 BYTE PTR [rax], cl

; 278  :                         if (len > 1)

  00949	83 7c 24 38 01	 cmp	 DWORD PTR len$[rsp], 1
  0094e	76 29		 jbe	 SHORT $LN10@inflate_fa

; 279  :                             PUP(out) = PUP(from);

  00950	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00955	48 ff c0	 inc	 rax
  00958	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  0095d	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00962	48 ff c0	 inc	 rax
  00965	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  0096a	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0096f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR from$[rsp]
  00974	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00977	88 08		 mov	 BYTE PTR [rax], cl
$LN10@inflate_fa:
$LN11@inflate_fa:
$LN15@inflate_fa:

; 280  :                     }
; 281  :                 }

  00979	eb 64		 jmp	 SHORT $LN9@inflate_fa
$LN45@inflate_fa:

; 282  :             }
; 283  :             else if ((op & 64) == 0) {          /* 2nd level distance code */

  0097b	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0097f	83 e0 40	 and	 eax, 64			; 00000040H
  00982	85 c0		 test	 eax, eax
  00984	75 33		 jne	 SHORT $LN8@inflate_fa

; 284  :                 here = dcode[here.val + (hold & ((1U << op) - 1))];

  00986	0f b7 44 24 0a	 movzx	 eax, WORD PTR here$[rsp+2]
  0098b	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  0098f	ba 01 00 00 00	 mov	 edx, 1
  00994	d3 e2		 shl	 edx, cl
  00996	8b ca		 mov	 ecx, edx
  00998	ff c9		 dec	 ecx
  0099a	8b 54 24 5c	 mov	 edx, DWORD PTR hold$[rsp]
  0099e	23 d1		 and	 edx, ecx
  009a0	8b ca		 mov	 ecx, edx
  009a2	03 c1		 add	 eax, ecx
  009a4	8b c0		 mov	 eax, eax
  009a6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dcode$[rsp]
  009ab	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  009ae	89 44 24 08	 mov	 DWORD PTR here$[rsp], eax

; 285  :                 goto dodist;

  009b2	e9 ec f9 ff ff	 jmp	 $dodist$4864

; 286  :             }
; 287  :             else {

  009b7	eb 26		 jmp	 SHORT $LN7@inflate_fa
$LN8@inflate_fa:

; 288  :                 strm->msg = (char *)"invalid distance code";

  009b9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  009c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@
  009c8	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 289  :                 state->mode = BAD;

  009cc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  009d4	c7 00 1d 00 00
	00		 mov	 DWORD PTR [rax], 29

; 290  :                 break;

  009da	e9 9c 00 00 00	 jmp	 $LN53@inflate_fa
$LN7@inflate_fa:
$LN9@inflate_fa:

; 291  :             }

  009df	eb 7e		 jmp	 SHORT $LN6@inflate_fa
$LN49@inflate_fa:

; 292  :         }
; 293  :         else if ((op & 64) == 0) {              /* 2nd level length code */

  009e1	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  009e5	83 e0 40	 and	 eax, 64			; 00000040H
  009e8	85 c0		 test	 eax, eax
  009ea	75 33		 jne	 SHORT $LN5@inflate_fa

; 294  :             here = lcode[here.val + (hold & ((1U << op) - 1))];

  009ec	0f b7 44 24 0a	 movzx	 eax, WORD PTR here$[rsp+2]
  009f1	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  009f5	ba 01 00 00 00	 mov	 edx, 1
  009fa	d3 e2		 shl	 edx, cl
  009fc	8b ca		 mov	 ecx, edx
  009fe	ff c9		 dec	 ecx
  00a00	8b 54 24 5c	 mov	 edx, DWORD PTR hold$[rsp]
  00a04	23 d1		 and	 edx, ecx
  00a06	8b ca		 mov	 ecx, edx
  00a08	03 c1		 add	 eax, ecx
  00a0a	8b c0		 mov	 eax, eax
  00a0c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR lcode$[rsp]
  00a11	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00a14	89 44 24 08	 mov	 DWORD PTR here$[rsp], eax

; 295  :             goto dolen;

  00a18	e9 ec f7 ff ff	 jmp	 $dolen$4849
  00a1d	eb 40		 jmp	 SHORT $LN4@inflate_fa
$LN5@inflate_fa:

; 296  :         }
; 297  :         else if (op & 32) {                     /* end-of-block */

  00a1f	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00a23	83 e0 20	 and	 eax, 32			; 00000020H
  00a26	85 c0		 test	 eax, eax
  00a28	74 12		 je	 SHORT $LN3@inflate_fa

; 298  :             Tracevv((stderr, "inflate:         end of block\n"));
; 299  :             state->mode = TYPE;

  00a2a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00a32	c7 00 0b 00 00
	00		 mov	 DWORD PTR [rax], 11

; 300  :             break;

  00a38	eb 41		 jmp	 SHORT $LN53@inflate_fa

; 301  :         }
; 302  :         else {

  00a3a	eb 23		 jmp	 SHORT $LN2@inflate_fa
$LN3@inflate_fa:

; 303  :             strm->msg = (char *)"invalid literal/length code";

  00a3c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00a44	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@
  00a4b	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 304  :             state->mode = BAD;

  00a4f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00a57	c7 00 1d 00 00
	00		 mov	 DWORD PTR [rax], 29

; 305  :             break;

  00a5d	eb 1c		 jmp	 SHORT $LN53@inflate_fa
$LN2@inflate_fa:
$LN4@inflate_fa:
$LN6@inflate_fa:
$LN50@inflate_fa:

; 306  :         }
; 307  :     } while (in < last && out < end);

  00a5f	48 8b 44 24 18	 mov	 rax, QWORD PTR last$[rsp]
  00a64	48 39 44 24 30	 cmp	 QWORD PTR in$[rsp], rax
  00a69	73 10		 jae	 SHORT $LN1@inflate_fa
  00a6b	48 8b 44 24 48	 mov	 rax, QWORD PTR end$[rsp]
  00a70	48 39 44 24 78	 cmp	 QWORD PTR out$[rsp], rax
  00a75	0f 82 09 f7 ff
	ff		 jb	 $LN55@inflate_fa
$LN1@inflate_fa:
$LN53@inflate_fa:

; 308  : 
; 309  :     /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
; 310  :     len = bits >> 3;

  00a7b	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00a7f	c1 e8 03	 shr	 eax, 3
  00a82	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax

; 311  :     in -= len;

  00a86	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  00a8a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR in$[rsp]
  00a8f	48 2b c8	 sub	 rcx, rax
  00a92	48 8b c1	 mov	 rax, rcx
  00a95	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax

; 312  :     bits -= len << 3;

  00a9a	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  00a9e	c1 e0 03	 shl	 eax, 3
  00aa1	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  00aa5	2b c8		 sub	 ecx, eax
  00aa7	8b c1		 mov	 eax, ecx
  00aa9	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 313  :     hold &= (1U << bits) - 1;

  00aad	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00ab1	b9 01 00 00 00	 mov	 ecx, 1
  00ab6	89 8c 24 98 00
	00 00		 mov	 DWORD PTR tv663[rsp], ecx
  00abd	0f b6 c8	 movzx	 ecx, al
  00ac0	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv663[rsp]
  00ac7	d3 e0		 shl	 eax, cl
  00ac9	ff c8		 dec	 eax
  00acb	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  00acf	23 c8		 and	 ecx, eax
  00ad1	8b c1		 mov	 eax, ecx
  00ad3	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 314  : 
; 315  :     /* update state and return */
; 316  :     strm->next_in = in + OFF;

  00ad7	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00adc	48 ff c0	 inc	 rax
  00adf	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  00ae7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 317  :     strm->next_out = out + OFF;

  00aea	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00aef	48 ff c0	 inc	 rax
  00af2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  00afa	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 318  :     strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));

  00afe	48 8b 44 24 18	 mov	 rax, QWORD PTR last$[rsp]
  00b03	48 39 44 24 30	 cmp	 QWORD PTR in$[rsp], rax
  00b08	73 1e		 jae	 SHORT $LN58@inflate_fa
  00b0a	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00b0f	48 8b 4c 24 18	 mov	 rcx, QWORD PTR last$[rsp]
  00b14	48 2b c8	 sub	 rcx, rax
  00b17	48 8b c1	 mov	 rax, rcx
  00b1a	48 83 c0 05	 add	 rax, 5
  00b1e	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv335[rsp], rax
  00b26	eb 23		 jmp	 SHORT $LN59@inflate_fa
$LN58@inflate_fa:
  00b28	48 8b 44 24 18	 mov	 rax, QWORD PTR last$[rsp]
  00b2d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR in$[rsp]
  00b32	48 2b c8	 sub	 rcx, rax
  00b35	48 8b c1	 mov	 rax, rcx
  00b38	b9 05 00 00 00	 mov	 ecx, 5
  00b3d	48 2b c8	 sub	 rcx, rax
  00b40	48 8b c1	 mov	 rax, rcx
  00b43	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv335[rsp], rax
$LN59@inflate_fa:
  00b4b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00b53	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv335[rsp]
  00b5a	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 319  :     strm->avail_out = (unsigned)(out < end ?
; 320  :                                  257 + (end - out) : 257 - (out - end));

  00b5d	48 8b 44 24 48	 mov	 rax, QWORD PTR end$[rsp]
  00b62	48 39 44 24 78	 cmp	 QWORD PTR out$[rsp], rax
  00b67	73 20		 jae	 SHORT $LN60@inflate_fa
  00b69	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00b6e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR end$[rsp]
  00b73	48 2b c8	 sub	 rcx, rax
  00b76	48 8b c1	 mov	 rax, rcx
  00b79	48 05 01 01 00
	00		 add	 rax, 257		; 00000101H
  00b7f	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv343[rsp], rax
  00b87	eb 23		 jmp	 SHORT $LN61@inflate_fa
$LN60@inflate_fa:
  00b89	48 8b 44 24 48	 mov	 rax, QWORD PTR end$[rsp]
  00b8e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00b93	48 2b c8	 sub	 rcx, rax
  00b96	48 8b c1	 mov	 rax, rcx
  00b99	b9 01 01 00 00	 mov	 ecx, 257		; 00000101H
  00b9e	48 2b c8	 sub	 rcx, rax
  00ba1	48 8b c1	 mov	 rax, rcx
  00ba4	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv343[rsp], rax
$LN61@inflate_fa:
  00bac	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00bb4	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv343[rsp]
  00bbb	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 321  :     state->hold = hold;

  00bbe	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00bc6	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  00bca	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 322  :     state->bits = bits;

  00bcd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00bd5	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  00bd9	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 323  :     return;
; 324  : }

  00bdc	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00be3	c3		 ret	 0
inflate_fast ENDP
_TEXT	ENDS
END
