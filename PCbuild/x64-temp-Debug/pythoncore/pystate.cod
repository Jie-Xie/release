; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_PyThreadState_Current
PUBLIC	_PyThreadState_GetFrame
_BSS	SEGMENT
head_mutex DQ	01H DUP (?)
autoInterpreterState DQ 01H DUP (?)
autoTLSkey DD	01H DUP (?)
	ALIGN	8

interp_head DQ	01H DUP (?)
_PyThreadState_Current DQ 01H DUP (?)
_PyThreadState_GetFrame DQ 01H DUP (?)
_BSS	ENDS
PUBLIC	??_C@_0CJ@FJGDJPCA@Can?8t?5initialize?5threads?5for?5int@ ; `string'
PUBLIC	PyInterpreterState_New
EXTRN	PyThread_release_lock:PROC
EXTRN	PyThread_acquire_lock:PROC
EXTRN	Py_FatalError:PROC
EXTRN	PyThread_allocate_lock:PROC
EXTRN	__imp_malloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pystate.c
pdata	SEGMENT
$pdata$PyInterpreterState_New DD imagerel $LN6
	DD	imagerel $LN6+283
	DD	imagerel $unwind$PyInterpreterState_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInterpreterState_New DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CJ@FJGDJPCA@Can?8t?5initialize?5threads?5for?5int@
CONST	SEGMENT
??_C@_0CJ@FJGDJPCA@Can?8t?5initialize?5threads?5for?5int@ DB 'Can''t init'
	DB	'ialize threads for interpreter', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInterpreterState_New
_TEXT	SEGMENT
interp$ = 32
PyInterpreterState_New PROC				; COMDAT

; 61   : {

$LN6:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 62   :     PyInterpreterState *interp = (PyInterpreterState *)
; 63   :                                  malloc(sizeof(PyInterpreterState));

  00004	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0000f	48 89 44 24 20	 mov	 QWORD PTR interp$[rsp], rax

; 64   : 
; 65   :     if (interp != NULL) {

  00014	48 83 7c 24 20
	00		 cmp	 QWORD PTR interp$[rsp], 0
  0001a	0f 84 f1 00 00
	00		 je	 $LN2@PyInterpre

; 66   :         HEAD_INIT();

  00020	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR head_mutex, 0
  00028	75 0c		 jne	 SHORT $LN5@PyInterpre
  0002a	e8 00 00 00 00	 call	 PyThread_allocate_lock
  0002f	48 89 05 00 00
	00 00		 mov	 QWORD PTR head_mutex, rax
$LN5@PyInterpre:

; 67   : #ifdef WITH_THREAD
; 68   :         if (head_mutex == NULL)

  00036	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR head_mutex, 0
  0003e	75 0c		 jne	 SHORT $LN1@PyInterpre

; 69   :             Py_FatalError("Can't initialize threads for interpreter");

  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@FJGDJPCA@Can?8t?5initialize?5threads?5for?5int@
  00047	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyInterpre:

; 70   : #endif
; 71   :         interp->modules = NULL;

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  00051	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 72   :         interp->modules_by_index = NULL;

  00059	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  0005e	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 73   :         interp->sysdict = NULL;

  00066	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  0006b	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 74   :         interp->builtins = NULL;

  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  00078	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 75   :         interp->tstate_head = NULL;

  00080	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  00085	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 76   :         interp->codec_search_path = NULL;

  0008d	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  00092	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 77   :         interp->codec_search_cache = NULL;

  0009a	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  0009f	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 78   :         interp->codec_error_registry = NULL;

  000a7	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  000ac	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 79   :         interp->codecs_initialized = 0;

  000b4	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  000b9	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [rax+80], 0

; 80   :         interp->fscodec_initialized = 0;

  000c0	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  000c5	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [rax+84], 0

; 81   :         interp->importlib = NULL;

  000cc	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  000d1	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 82   : #ifdef HAVE_DLOPEN
; 83   : #ifdef RTLD_NOW
; 84   :         interp->dlopenflags = RTLD_NOW;
; 85   : #else
; 86   :         interp->dlopenflags = RTLD_LAZY;
; 87   : #endif
; 88   : #endif
; 89   : #ifdef WITH_TSC
; 90   :         interp->tscdump = 0;
; 91   : #endif
; 92   : 
; 93   :         HEAD_LOCK();

  000d9	ba 01 00 00 00	 mov	 edx, 1
  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  000e5	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 94   :         interp->next = interp_head;

  000ea	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  000ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR interp_head
  000f6	48 89 08	 mov	 QWORD PTR [rax], rcx

; 95   :         interp_head = interp;

  000f9	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  000fe	48 89 05 00 00
	00 00		 mov	 QWORD PTR interp_head, rax

; 96   :         HEAD_UNLOCK();

  00105	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  0010c	e8 00 00 00 00	 call	 PyThread_release_lock
$LN2@PyInterpre:

; 97   :     }
; 98   : 
; 99   :     return interp;

  00111	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]

; 100  : }

  00116	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011a	c3		 ret	 0
PyInterpreterState_New ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@ ; `string'
PUBLIC	??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@	; `string'
PUBLIC	PyThreadState_Clear
PUBLIC	PyInterpreterState_Clear
EXTRN	_PyParallel_Guard:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInterpreterState_Clear DD imagerel $LN38
	DD	imagerel $LN38+1005
	DD	imagerel $unwind$PyInterpreterState_Clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInterpreterState_Clear DD 020c01H
	DD	011010cH
xdata	ENDS
;	COMDAT ??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
CONST	SEGMENT
??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@ DB 'PyInterpreterState_C'
	DB	'lear', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
CONST	SEGMENT
??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@ DB '..\Python\pystate.c', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInterpreterState_Clear
_TEXT	SEGMENT
p$ = 48
_py_tmp$20395 = 56
_py_tmp$20403 = 64
_py_tmp$20411 = 72
_py_tmp$20419 = 80
_py_tmp$20427 = 88
_py_tmp$20435 = 96
_py_tmp$20443 = 104
_py_tmp$20451 = 112
interp$ = 144
PyInterpreterState_Clear PROC				; COMDAT

; 105  : {

$LN38:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 106  :     PyThreadState *p;
; 107  :     HEAD_LOCK();

  0000c	ba 01 00 00 00	 mov	 edx, 1
  00011	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00018	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 108  :     for (p = interp->tstate_head; p != NULL; p = p->next)

  0001d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00025	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00029	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax
  0002e	eb 0d		 jmp	 SHORT $LN35@PyInterpre@2
$LN34@PyInterpre@2:
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  00035	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00038	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax
$LN35@PyInterpre@2:
  0003d	48 83 7c 24 30
	00		 cmp	 QWORD PTR p$[rsp], 0
  00043	74 0c		 je	 SHORT $LN33@PyInterpre@2

; 109  :         PyThreadState_Clear(p);

  00045	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  0004a	e8 00 00 00 00	 call	 PyThreadState_Clear
  0004f	eb df		 jmp	 SHORT $LN34@PyInterpre@2
$LN33@PyInterpre@2:

; 110  :     HEAD_UNLOCK();

  00051	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00058	e8 00 00 00 00	 call	 PyThread_release_lock
$LN32@PyInterpre@2:

; 111  :     Py_CLEAR(interp->codec_search_path);

  0005d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00065	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0006a	74 5c		 je	 SHORT $LN29@PyInterpre@2
  0006c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00074	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  0007c	4c 8b 48 38	 mov	 r9, QWORD PTR [rax+56]
  00080	41 b8 6f 00 00
	00		 mov	 r8d, 111		; 0000006fH
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  00094	e8 00 00 00 00	 call	 _PyParallel_Guard
  00099	85 c0		 test	 eax, eax
  0009b	75 2b		 jne	 SHORT $LN29@PyInterpre@2
  0009d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  000a5	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000a9	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20395[rsp], rax
  000ae	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  000b6	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0
  000be	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20395[rsp]
  000c3	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@PyInterpre@2:
  000c8	33 c0		 xor	 eax, eax
  000ca	85 c0		 test	 eax, eax
  000cc	75 8f		 jne	 SHORT $LN32@PyInterpre@2
$LN28@PyInterpre@2:

; 112  :     Py_CLEAR(interp->codec_search_cache);

  000ce	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  000d6	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  000db	74 5c		 je	 SHORT $LN25@PyInterpre@2
  000dd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  000ed	4c 8b 48 40	 mov	 r9, QWORD PTR [rax+64]
  000f1	41 b8 70 00 00
	00		 mov	 r8d, 112		; 00000070H
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  00105	e8 00 00 00 00	 call	 _PyParallel_Guard
  0010a	85 c0		 test	 eax, eax
  0010c	75 2b		 jne	 SHORT $LN25@PyInterpre@2
  0010e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00116	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0011a	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$20403[rsp], rax
  0011f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00127	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0
  0012f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$20403[rsp]
  00134	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@PyInterpre@2:
  00139	33 c0		 xor	 eax, eax
  0013b	85 c0		 test	 eax, eax
  0013d	75 8f		 jne	 SHORT $LN28@PyInterpre@2
$LN24@PyInterpre@2:

; 113  :     Py_CLEAR(interp->codec_error_registry);

  0013f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00147	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  0014c	74 5c		 je	 SHORT $LN21@PyInterpre@2
  0014e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00156	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  0015e	4c 8b 48 48	 mov	 r9, QWORD PTR [rax+72]
  00162	41 b8 71 00 00
	00		 mov	 r8d, 113		; 00000071H
  00168	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0016f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  00176	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017b	85 c0		 test	 eax, eax
  0017d	75 2b		 jne	 SHORT $LN21@PyInterpre@2
  0017f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00187	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0018b	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$20411[rsp], rax
  00190	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00198	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0
  001a0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$20411[rsp]
  001a5	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@PyInterpre@2:
  001aa	33 c0		 xor	 eax, eax
  001ac	85 c0		 test	 eax, eax
  001ae	75 8f		 jne	 SHORT $LN24@PyInterpre@2
$LN20@PyInterpre@2:

; 114  :     Py_CLEAR(interp->modules);

  001b0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  001b8	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  001bd	74 5c		 je	 SHORT $LN17@PyInterpre@2
  001bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  001cf	4c 8b 48 10	 mov	 r9, QWORD PTR [rax+16]
  001d3	41 b8 72 00 00
	00		 mov	 r8d, 114		; 00000072H
  001d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  001e7	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ec	85 c0		 test	 eax, eax
  001ee	75 2b		 jne	 SHORT $LN17@PyInterpre@2
  001f0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  001f8	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001fc	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$20419[rsp], rax
  00201	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00209	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  00211	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$20419[rsp]
  00216	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@PyInterpre@2:
  0021b	33 c0		 xor	 eax, eax
  0021d	85 c0		 test	 eax, eax
  0021f	75 8f		 jne	 SHORT $LN20@PyInterpre@2
$LN16@PyInterpre@2:

; 115  :     Py_CLEAR(interp->modules_by_index);

  00221	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00229	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0022e	74 5c		 je	 SHORT $LN13@PyInterpre@2
  00230	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00238	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00240	4c 8b 48 18	 mov	 r9, QWORD PTR [rax+24]
  00244	41 b8 73 00 00
	00		 mov	 r8d, 115		; 00000073H
  0024a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  00251	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  00258	e8 00 00 00 00	 call	 _PyParallel_Guard
  0025d	85 c0		 test	 eax, eax
  0025f	75 2b		 jne	 SHORT $LN13@PyInterpre@2
  00261	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00269	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0026d	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$20427[rsp], rax
  00272	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  0027a	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
  00282	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$20427[rsp]
  00287	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyInterpre@2:
  0028c	33 c0		 xor	 eax, eax
  0028e	85 c0		 test	 eax, eax
  00290	75 8f		 jne	 SHORT $LN16@PyInterpre@2
$LN12@PyInterpre@2:

; 116  :     Py_CLEAR(interp->sysdict);

  00292	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  0029a	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  0029f	74 5c		 je	 SHORT $LN9@PyInterpre@2
  002a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002a9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  002b1	4c 8b 48 20	 mov	 r9, QWORD PTR [rax+32]
  002b5	41 b8 74 00 00
	00		 mov	 r8d, 116		; 00000074H
  002bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  002c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  002c9	e8 00 00 00 00	 call	 _PyParallel_Guard
  002ce	85 c0		 test	 eax, eax
  002d0	75 2b		 jne	 SHORT $LN9@PyInterpre@2
  002d2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  002da	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  002de	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$20435[rsp], rax
  002e3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  002eb	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0
  002f3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$20435[rsp]
  002f8	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyInterpre@2:
  002fd	33 c0		 xor	 eax, eax
  002ff	85 c0		 test	 eax, eax
  00301	75 8f		 jne	 SHORT $LN12@PyInterpre@2
$LN8@PyInterpre@2:

; 117  :     Py_CLEAR(interp->builtins);

  00303	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  0030b	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00310	74 5c		 je	 SHORT $LN5@PyInterpre@2
  00312	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0031a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00322	4c 8b 48 28	 mov	 r9, QWORD PTR [rax+40]
  00326	41 b8 75 00 00
	00		 mov	 r8d, 117		; 00000075H
  0032c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  00333	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  0033a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0033f	85 c0		 test	 eax, eax
  00341	75 2b		 jne	 SHORT $LN5@PyInterpre@2
  00343	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  0034b	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0034f	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$20443[rsp], rax
  00354	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  0035c	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
  00364	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$20443[rsp]
  00369	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyInterpre@2:
  0036e	33 c0		 xor	 eax, eax
  00370	85 c0		 test	 eax, eax
  00372	75 8f		 jne	 SHORT $LN8@PyInterpre@2
$LN4@PyInterpre@2:

; 118  :     Py_CLEAR(interp->importlib);

  00374	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  0037c	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00381	74 5c		 je	 SHORT $LN1@PyInterpre@2
  00383	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0038b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  00393	4c 8b 48 30	 mov	 r9, QWORD PTR [rax+48]
  00397	41 b8 76 00 00
	00		 mov	 r8d, 118		; 00000076H
  0039d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  003a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BGOGNKBP@PyInterpreterState_Clear?$AA@
  003ab	e8 00 00 00 00	 call	 _PyParallel_Guard
  003b0	85 c0		 test	 eax, eax
  003b2	75 2b		 jne	 SHORT $LN1@PyInterpre@2
  003b4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  003bc	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  003c0	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$20451[rsp], rax
  003c5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR interp$[rsp]
  003cd	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0
  003d5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$20451[rsp]
  003da	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyInterpre@2:
  003df	33 c0		 xor	 eax, eax
  003e1	85 c0		 test	 eax, eax
  003e3	75 8f		 jne	 SHORT $LN4@PyInterpre@2

; 119  : }

  003e5	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  003ec	c3		 ret	 0
PyInterpreterState_Clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@NINALOJI@PyInterpreterState_Delete?3?5remai@ ; `string'
PUBLIC	??_C@_0CK@KOPFEEPG@PyInterpreterState_Delete?3?5inval@ ; `string'
PUBLIC	PyInterpreterState_Delete
EXTRN	PyThread_free_lock:PROC
EXTRN	__imp_free:PROC
EXTRN	_PyParallel_DeletingInterpreterState:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pystate.c
pdata	SEGMENT
$pdata$PyInterpreterState_Delete DD imagerel $LN10
	DD	imagerel $LN10+226
	DD	imagerel $unwind$PyInterpreterState_Delete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInterpreterState_Delete DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CN@NINALOJI@PyInterpreterState_Delete?3?5remai@
CONST	SEGMENT
??_C@_0CN@NINALOJI@PyInterpreterState_Delete?3?5remai@ DB 'PyInterpreterS'
	DB	'tate_Delete: remaining threads', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KOPFEEPG@PyInterpreterState_Delete?3?5inval@
CONST	SEGMENT
??_C@_0CK@KOPFEEPG@PyInterpreterState_Delete?3?5inval@ DB 'PyInterpreterS'
	DB	'tate_Delete: invalid interp', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInterpreterState_Delete
_TEXT	SEGMENT
p$ = 32
interp$ = 64
PyInterpreterState_Delete PROC				; COMDAT

; 136  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 137  :     PyInterpreterState **p;
; 138  :     zapthreads(interp);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  0000e	e8 00 00 00 00	 call	 zapthreads

; 139  :     HEAD_LOCK();

  00013	ba 01 00 00 00	 mov	 edx, 1
  00018	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  0001f	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 140  :     for (p = &interp_head; ; p = &(*p)->next) {

  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:interp_head
  0002b	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  00030	eb 0d		 jmp	 SHORT $LN7@PyInterpre@3
$LN6@PyInterpre@3:
  00032	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00037	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003a	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN7@PyInterpre@3:

; 141  :         if (*p == NULL)

  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00044	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00048	75 0c		 jne	 SHORT $LN4@PyInterpre@3

; 142  :             Py_FatalError(
; 143  :                 "PyInterpreterState_Delete: invalid interp");

  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@KOPFEEPG@PyInterpreterState_Delete?3?5inval@
  00051	e8 00 00 00 00	 call	 Py_FatalError
$LN4@PyInterpre@3:

; 144  :         if (*p == interp)

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  00060	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00063	75 02		 jne	 SHORT $LN3@PyInterpre@3

; 145  :             break;

  00065	eb 02		 jmp	 SHORT $LN5@PyInterpre@3
$LN3@PyInterpre@3:

; 146  :     }

  00067	eb c9		 jmp	 SHORT $LN6@PyInterpre@3
$LN5@PyInterpre@3:

; 147  :     if (interp->tstate_head != NULL)

  00069	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  0006e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00073	74 0c		 je	 SHORT $LN2@PyInterpre@3

; 148  :         Py_FatalError("PyInterpreterState_Delete: remaining threads");

  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@NINALOJI@PyInterpreterState_Delete?3?5remai@
  0007c	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PyInterpre@3:

; 149  : #ifdef WITH_PARALLEL
; 150  :     _PyParallel_DeletingInterpreterState(interp);

  00081	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  00086	e8 00 00 00 00	 call	 _PyParallel_DeletingInterpreterState

; 151  : #endif
; 152  :     *p = interp->next;

  0008b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00090	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  00095	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00098	48 89 08	 mov	 QWORD PTR [rax], rcx

; 153  :     HEAD_UNLOCK();

  0009b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  000a2	e8 00 00 00 00	 call	 PyThread_release_lock

; 154  :     free(interp);

  000a7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 155  : #ifdef WITH_THREAD
; 156  :     if (interp_head == NULL && head_mutex != NULL) {

  000b2	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR interp_head, 0
  000ba	75 21		 jne	 SHORT $LN1@PyInterpre@3
  000bc	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR head_mutex, 0
  000c4	74 17		 je	 SHORT $LN1@PyInterpre@3

; 157  :         PyThread_free_lock(head_mutex);

  000c6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  000cd	e8 00 00 00 00	 call	 PyThread_free_lock

; 158  :         head_mutex = NULL;

  000d2	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR head_mutex, 0
$LN1@PyInterpre@3:

; 159  :     }
; 160  : #endif
; 161  : }

  000dd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e1	c3		 ret	 0
PyInterpreterState_Delete ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_Delete
;	COMDAT pdata
pdata	SEGMENT
$pdata$zapthreads DD imagerel zapthreads
	DD	imagerel zapthreads+48
	DD	imagerel $unwind$zapthreads
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zapthreads DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zapthreads
_TEXT	SEGMENT
p$ = 32
interp$ = 64
zapthreads PROC						; COMDAT

; 124  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@zapthreads:

; 125  :     PyThreadState *p;
; 126  :     /* No need to lock the mutex here because this should only happen
; 127  :        when the threads are all really dead (XXX famous last words). */
; 128  :     while ((p = interp->tstate_head) != NULL) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  0000e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00012	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  00017	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0001d	74 0c		 je	 SHORT $LN1@zapthreads

; 129  :         PyThreadState_Delete(p);

  0001f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00024	e8 00 00 00 00	 call	 PyThreadState_Delete

; 130  :     }

  00029	eb de		 jmp	 SHORT $LN2@zapthreads
$LN1@zapthreads:

; 131  : }

  0002b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002f	c3		 ret	 0
zapthreads ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_New DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$PyThreadState_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_New DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyThreadState_New
_TEXT	SEGMENT
interp$ = 48
PyThreadState_New PROC					; COMDAT

; 239  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 240  :     return new_threadstate(interp, 1);

  00009	ba 01 00 00 00	 mov	 edx, 1
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR interp$[rsp]
  00013	e8 00 00 00 00	 call	 new_threadstate

; 241  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
PyThreadState_New ENDP
_TEXT	ENDS
PUBLIC	_PyThreadState_Init
EXTRN	PyThread_get_thread_ident:PROC
EXTRN	_PyParallel_CreatedNewThreadState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_threadstate DD imagerel new_threadstate
	DD	imagerel new_threadstate+512
	DD	imagerel $unwind$new_threadstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_threadstate DD 010d01H
	DD	0620dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT new_threadstate
_TEXT	SEGMENT
tstate$ = 32
interp$ = 64
init$ = 72
new_threadstate PROC					; COMDAT

; 174  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 175  :     PyThreadState *tstate = (PyThreadState *)malloc(sizeof(PyThreadState));

  0000d	b9 b0 00 00 00	 mov	 ecx, 176		; 000000b0H
  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00018	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 176  : 
; 177  :     if (_PyThreadState_GetFrame == NULL)

  0001d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyThreadState_GetFrame, 0
  00025	75 0e		 jne	 SHORT $LN5@new_thread

; 178  :         _PyThreadState_GetFrame = threadstate_getframe;

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:threadstate_getframe
  0002e	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyThreadState_GetFrame, rax
$LN5@new_thread:

; 179  : 
; 180  : #ifdef WITH_PARALLEL
; 181  :     if (tstate != NULL) {

  00035	48 83 7c 24 20
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  0003b	74 23		 je	 SHORT $LN4@new_thread

; 182  :         if (!_PyParallel_CreatedNewThreadState(tstate)) {

  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  00042	e8 00 00 00 00	 call	 _PyParallel_CreatedNewThreadState
  00047	48 85 c0	 test	 rax, rax
  0004a	75 14		 jne	 SHORT $LN3@new_thread

; 183  :             free(tstate);

  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 184  :             tstate = NULL;

  00057	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR tstate$[rsp], 0
$LN3@new_thread:
$LN4@new_thread:

; 185  :         }
; 186  :     }
; 187  : #endif
; 188  : 
; 189  :     if (tstate != NULL) {

  00060	48 83 7c 24 20
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  00066	0f 84 8a 01 00
	00		 je	 $LN2@new_thread

; 190  :         tstate->interp = interp;

  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  00076	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 191  : 
; 192  :         tstate->frame = NULL;

  0007a	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0007f	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 193  :         tstate->recursion_depth = 0;

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0008c	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [rax+24], 0

; 194  :         tstate->overflowed = 0;

  00093	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00098	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0

; 195  :         tstate->recursion_critical = 0;

  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  000a1	c6 40 1d 00	 mov	 BYTE PTR [rax+29], 0

; 196  :         tstate->tracing = 0;

  000a5	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  000aa	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [rax+32], 0

; 197  :         tstate->use_tracing = 0;

  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  000b6	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [rax+36], 0

; 198  :         tstate->tick_counter = 0;

  000bd	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  000c2	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+128], 0

; 199  :         tstate->gilstate_counter = 0;

  000cc	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  000d1	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+132], 0

; 200  :         tstate->async_exc = NULL;

  000db	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  000e0	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0

; 201  : #ifdef WITH_THREAD
; 202  :         tstate->thread_id = PyThread_get_thread_ident();

  000eb	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  000f0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  000f5	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax

; 203  : #else
; 204  :         tstate->thread_id = 0;
; 205  : #endif
; 206  : 
; 207  :         tstate->dict = NULL;

  000fb	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00100	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 208  : 
; 209  :         tstate->curexc_type = NULL;

  00108	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0010d	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 210  :         tstate->curexc_value = NULL;

  00115	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0011a	48 c7 40 50 00
	00 00 00	 mov	 QWORD PTR [rax+80], 0

; 211  :         tstate->curexc_traceback = NULL;

  00122	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00127	48 c7 40 58 00
	00 00 00	 mov	 QWORD PTR [rax+88], 0

; 212  : 
; 213  :         tstate->exc_type = NULL;

  0012f	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00134	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 214  :         tstate->exc_value = NULL;

  0013c	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00141	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 215  :         tstate->exc_traceback = NULL;

  00149	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0014e	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 216  : 
; 217  :         tstate->c_profilefunc = NULL;

  00156	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0015b	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 218  :         tstate->c_tracefunc = NULL;

  00163	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00168	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 219  :         tstate->c_profileobj = NULL;

  00170	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00175	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 220  :         tstate->c_traceobj = NULL;

  0017d	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00182	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 221  : 
; 222  :         tstate->trash_delete_nesting = 0;

  0018a	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0018f	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+148], 0

; 223  :         tstate->trash_delete_later = NULL;

  00199	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0019e	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0

; 224  : 
; 225  :         if (init)

  001a9	83 7c 24 48 00	 cmp	 DWORD PTR init$[rsp], 0
  001ae	74 0a		 je	 SHORT $LN1@new_thread

; 226  :             _PyThreadState_Init(tstate);

  001b0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  001b5	e8 00 00 00 00	 call	 _PyThreadState_Init
$LN1@new_thread:

; 227  : 
; 228  :         HEAD_LOCK();

  001ba	ba 01 00 00 00	 mov	 edx, 1
  001bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  001c6	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 229  :         tstate->next = interp->tstate_head;

  001cb	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  001d0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR interp$[rsp]
  001d5	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001d9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 230  :         interp->tstate_head = tstate;

  001dc	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  001e1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  001e6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 231  :         HEAD_UNLOCK();

  001ea	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  001f1	e8 00 00 00 00	 call	 PyThread_release_lock
$LN2@new_thread:

; 232  :     }
; 233  : 
; 234  :     return tstate;

  001f6	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]

; 235  : }

  001fb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001ff	c3		 ret	 0
new_threadstate ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT threadstate_getframe
_TEXT	SEGMENT
self$ = 8
threadstate_getframe PROC				; COMDAT

; 167  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 168  :     return self->frame;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR self$[rsp]
  0000a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 169  : }

  0000e	c3		 ret	 0
threadstate_getframe ENDP
_TEXT	ENDS
PUBLIC	_PyThreadState_Prealloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyThreadState_Prealloc DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$_PyThreadState_Prealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyThreadState_Prealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyThreadState_Prealloc
_TEXT	SEGMENT
interp$ = 48
_PyThreadState_Prealloc PROC				; COMDAT

; 245  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 246  :     return new_threadstate(interp, 0);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR interp$[rsp]
  00010	e8 00 00 00 00	 call	 new_threadstate

; 247  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
_PyThreadState_Prealloc ENDP
_TEXT	ENDS
EXTRN	_PyParallel_InitializedThreadState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyThreadState_Init DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$_PyThreadState_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyThreadState_Init DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyThreadState_Init
_TEXT	SEGMENT
tstate$ = 48
_PyThreadState_Init PROC				; COMDAT

; 251  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 252  : #ifdef WITH_THREAD
; 253  :     _PyGILState_NoteThreadState(tstate);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tstate$[rsp]
  0000e	e8 00 00 00 00	 call	 _PyGILState_NoteThreadState

; 254  : #endif
; 255  : #ifdef WITH_PARALLEL
; 256  :     _PyParallel_InitializedThreadState(tstate);

  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tstate$[rsp]
  00018	e8 00 00 00 00	 call	 _PyParallel_InitializedThreadState

; 257  : #endif
; 258  : 
; 259  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
_PyThreadState_Init ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_Get
PUBLIC	PyState_FindModule
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyState_FindModule DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$PyState_FindModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyState_FindModule DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyState_FindModule
_TEXT	SEGMENT
res$ = 32
index$ = 40
state$ = 48
tv78 = 56
module$ = 80
PyState_FindModule PROC					; COMDAT

; 263  : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 264  :     Py_ssize_t index = module->m_base.m_index;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR module$[rsp]
  0000e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00012	48 89 44 24 28	 mov	 QWORD PTR index$[rsp], rax

; 265  :     PyInterpreterState *state = PyThreadState_GET()->interp;

  00017	e8 00 00 00 00	 call	 PyThreadState_Get
  0001c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00020	48 89 44 24 30	 mov	 QWORD PTR state$[rsp], rax

; 266  :     PyObject *res;
; 267  :     if (index == 0)

  00025	48 83 7c 24 28
	00		 cmp	 QWORD PTR index$[rsp], 0
  0002b	75 04		 jne	 SHORT $LN3@PyState_Fi

; 268  :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 6b		 jmp	 SHORT $LN4@PyState_Fi
$LN3@PyState_Fi:

; 269  :     if (state->modules_by_index == NULL)

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR state$[rsp]
  00036	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0003b	75 04		 jne	 SHORT $LN2@PyState_Fi

; 270  :         return NULL;

  0003d	33 c0		 xor	 eax, eax
  0003f	eb 5b		 jmp	 SHORT $LN4@PyState_Fi
$LN2@PyState_Fi:

; 271  :     if (index >= PyList_GET_SIZE(state->modules_by_index))

  00041	48 8b 44 24 30	 mov	 rax, QWORD PTR state$[rsp]
  00046	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0004a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004e	48 39 44 24 28	 cmp	 QWORD PTR index$[rsp], rax
  00053	7c 04		 jl	 SHORT $LN1@PyState_Fi

; 272  :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	eb 43		 jmp	 SHORT $LN4@PyState_Fi
$LN1@PyState_Fi:

; 273  :     res = PyList_GET_ITEM(state->modules_by_index, index);

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR state$[rsp]
  0005e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00062	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00066	48 8b 4c 24 28	 mov	 rcx, QWORD PTR index$[rsp]
  0006b	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0006f	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 274  :     return res==Py_None ? NULL : res;

  00074	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0007b	48 39 44 24 20	 cmp	 QWORD PTR res$[rsp], rax
  00080	75 0b		 jne	 SHORT $LN6@PyState_Fi
  00082	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv78[rsp], 0
  0008b	eb 0a		 jmp	 SHORT $LN7@PyState_Fi
$LN6@PyState_Fi:
  0008d	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00092	48 89 44 24 38	 mov	 QWORD PTR tv78[rsp], rax
$LN7@PyState_Fi:
  00097	48 8b 44 24 38	 mov	 rax, QWORD PTR tv78[rsp]
$LN4@PyState_Fi:

; 275  : }

  0009c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a0	c3		 ret	 0
PyState_FindModule ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	_PyState_AddModule
EXTRN	PyList_SetItem:PROC
EXTRN	PyList_Append:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyState_AddModule DD imagerel $LN9
	DD	imagerel $LN9+194
	DD	imagerel $unwind$_PyState_AddModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyState_AddModule DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyState_AddModule
_TEXT	SEGMENT
state$ = 32
module$ = 64
def$ = 72
_PyState_AddModule PROC					; COMDAT

; 279  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 280  :     PyInterpreterState *state = PyThreadState_GET()->interp;

  0000e	e8 00 00 00 00	 call	 PyThreadState_Get
  00013	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00017	48 89 44 24 20	 mov	 QWORD PTR state$[rsp], rax

; 281  :     if (!def)

  0001c	48 83 7c 24 48
	00		 cmp	 QWORD PTR def$[rsp], 0
  00022	75 0a		 jne	 SHORT $LN6@PyState_Ad

; 282  :         return -1;

  00024	b8 ff ff ff ff	 mov	 eax, -1
  00029	e9 8f 00 00 00	 jmp	 $LN7@PyState_Ad
$LN6@PyState_Ad:

; 283  :     if (!state->modules_by_index) {

  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR state$[rsp]
  00033	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00038	75 23		 jne	 SHORT $LN5@PyState_Ad

; 284  :         state->modules_by_index = PyList_New(0);

  0003a	33 c9		 xor	 ecx, ecx
  0003c	e8 00 00 00 00	 call	 PyList_New
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR state$[rsp]
  00046	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 285  :         if (!state->modules_by_index)

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR state$[rsp]
  0004f	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00054	75 07		 jne	 SHORT $LN4@PyState_Ad

; 286  :             return -1;

  00056	b8 ff ff ff ff	 mov	 eax, -1
  0005b	eb 60		 jmp	 SHORT $LN7@PyState_Ad
$LN4@PyState_Ad:
$LN5@PyState_Ad:
$LN3@PyState_Ad:

; 287  :     }
; 288  :     while(PyList_GET_SIZE(state->modules_by_index) <= def->m_base.m_index)

  0005d	48 8b 44 24 20	 mov	 rax, QWORD PTR state$[rsp]
  00062	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00066	48 8b 4c 24 48	 mov	 rcx, QWORD PTR def$[rsp]
  0006b	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0006f	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  00073	7f 22		 jg	 SHORT $LN2@PyState_Ad

; 289  :         if (PyList_Append(state->modules_by_index, Py_None) < 0)

  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  0007c	48 8b 44 24 20	 mov	 rax, QWORD PTR state$[rsp]
  00081	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00085	e8 00 00 00 00	 call	 PyList_Append
  0008a	85 c0		 test	 eax, eax
  0008c	7d 07		 jge	 SHORT $LN1@PyState_Ad

; 290  :             return -1;

  0008e	b8 ff ff ff ff	 mov	 eax, -1
  00093	eb 28		 jmp	 SHORT $LN7@PyState_Ad
$LN1@PyState_Ad:

; 291  :     Py_INCREF(module);

  00095	eb c6		 jmp	 SHORT $LN3@PyState_Ad
$LN2@PyState_Ad:
  00097	48 8b 4c 24 40	 mov	 rcx, QWORD PTR module$[rsp]
  0009c	e8 00 00 00 00	 call	 _Py_IncRef

; 292  :     return PyList_SetItem(state->modules_by_index,
; 293  :                           def->m_base.m_index, module);

  000a1	4c 8b 44 24 40	 mov	 r8, QWORD PTR module$[rsp]
  000a6	48 8b 44 24 48	 mov	 rax, QWORD PTR def$[rsp]
  000ab	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  000af	48 8b 44 24 20	 mov	 rax, QWORD PTR state$[rsp]
  000b4	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  000b8	e8 00 00 00 00	 call	 PyList_SetItem
$LN7@PyState_Ad:

; 294  : }

  000bd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c1	c3		 ret	 0
_PyState_AddModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@DAMJNHLL@PyState_AddModule?3?5Module?5alread@ ; `string'
PUBLIC	??_C@_0CN@JCEKIGBO@PyState_AddModule?3?5Module?5Defini@ ; `string'
PUBLIC	PyState_AddModule
;	COMDAT pdata
; File c:\src\pyparallel\python\pystate.c
pdata	SEGMENT
$pdata$PyState_AddModule DD imagerel $LN7
	DD	imagerel $LN7+169
	DD	imagerel $unwind$PyState_AddModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyState_AddModule DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CJ@DAMJNHLL@PyState_AddModule?3?5Module?5alread@
CONST	SEGMENT
??_C@_0CJ@DAMJNHLL@PyState_AddModule?3?5Module?5alread@ DB 'PyState_AddMo'
	DB	'dule: Module already added!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JCEKIGBO@PyState_AddModule?3?5Module?5Defini@
CONST	SEGMENT
??_C@_0CN@JCEKIGBO@PyState_AddModule?3?5Module?5Defini@ DB 'PyState_AddMo'
	DB	'dule: Module Definition is NULL', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyState_AddModule
_TEXT	SEGMENT
index$ = 32
state$ = 40
module$ = 64
def$ = 72
PyState_AddModule PROC					; COMDAT

; 298  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 299  :     Py_ssize_t index;
; 300  :     PyInterpreterState *state = PyThreadState_GET()->interp;

  0000e	e8 00 00 00 00	 call	 PyThreadState_Get
  00013	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00017	48 89 44 24 28	 mov	 QWORD PTR state$[rsp], rax

; 301  :     if (!def) {

  0001c	48 83 7c 24 48
	00		 cmp	 QWORD PTR def$[rsp], 0
  00022	75 13		 jne	 SHORT $LN4@PyState_Ad@2

; 302  :         Py_FatalError("PyState_AddModule: Module Definition is NULL");

  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@JCEKIGBO@PyState_AddModule?3?5Module?5Defini@
  0002b	e8 00 00 00 00	 call	 Py_FatalError

; 303  :         return -1;

  00030	b8 ff ff ff ff	 mov	 eax, -1
  00035	eb 6d		 jmp	 SHORT $LN5@PyState_Ad@2
$LN4@PyState_Ad@2:

; 304  :     }
; 305  :     index = def->m_base.m_index;

  00037	48 8b 44 24 48	 mov	 rax, QWORD PTR def$[rsp]
  0003c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00040	48 89 44 24 20	 mov	 QWORD PTR index$[rsp], rax

; 306  :     if (state->modules_by_index) {

  00045	48 8b 44 24 28	 mov	 rax, QWORD PTR state$[rsp]
  0004a	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0004f	74 44		 je	 SHORT $LN3@PyState_Ad@2

; 307  :         if(PyList_GET_SIZE(state->modules_by_index) >= index) {

  00051	48 8b 44 24 28	 mov	 rax, QWORD PTR state$[rsp]
  00056	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0005a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR index$[rsp]
  0005f	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  00063	7c 30		 jl	 SHORT $LN2@PyState_Ad@2

; 308  :             if(module == PyList_GET_ITEM(state->modules_by_index, index)) {

  00065	48 8b 44 24 28	 mov	 rax, QWORD PTR state$[rsp]
  0006a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0006e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00072	48 8b 4c 24 20	 mov	 rcx, QWORD PTR index$[rsp]
  00077	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0007b	48 39 44 24 40	 cmp	 QWORD PTR module$[rsp], rax
  00080	75 13		 jne	 SHORT $LN1@PyState_Ad@2

; 309  :                 Py_FatalError("PyState_AddModule: Module already added!");

  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@DAMJNHLL@PyState_AddModule?3?5Module?5alread@
  00089	e8 00 00 00 00	 call	 Py_FatalError

; 310  :                 return -1;

  0008e	b8 ff ff ff ff	 mov	 eax, -1
  00093	eb 0f		 jmp	 SHORT $LN5@PyState_Ad@2
$LN1@PyState_Ad@2:
$LN2@PyState_Ad@2:
$LN3@PyState_Ad@2:

; 311  :             }
; 312  :         }
; 313  :     }
; 314  :     return _PyState_AddModule(module, def);

  00095	48 8b 54 24 48	 mov	 rdx, QWORD PTR def$[rsp]
  0009a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR module$[rsp]
  0009f	e8 00 00 00 00	 call	 _PyState_AddModule
$LN5@PyState_Ad@2:

; 315  : }

  000a4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a8	c3		 ret	 0
PyState_AddModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@NPLJAGMG@PyState_RemoveModule?3?5Module?5ind@ ; `string'
PUBLIC	??_C@_0DO@GMPBODCD@PyState_RemoveModule?3?5Interprete@ ; `string'
PUBLIC	??_C@_0CM@KMNLLHD@PyState_RemoveModule?3?5Module?5ind@ ; `string'
PUBLIC	PyState_RemoveModule
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyState_RemoveModule DD imagerel $LN6
	DD	imagerel $LN6+165
	DD	imagerel $unwind$PyState_RemoveModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyState_RemoveModule DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0DC@NPLJAGMG@PyState_RemoveModule?3?5Module?5ind@
CONST	SEGMENT
??_C@_0DC@NPLJAGMG@PyState_RemoveModule?3?5Module?5ind@ DB 'PyState_Remov'
	DB	'eModule: Module index out of bounds.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@GMPBODCD@PyState_RemoveModule?3?5Interprete@
CONST	SEGMENT
??_C@_0DO@GMPBODCD@PyState_RemoveModule?3?5Interprete@ DB 'PyState_Remove'
	DB	'Module: Interpreters module-list not acessible.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KMNLLHD@PyState_RemoveModule?3?5Module?5ind@
CONST	SEGMENT
??_C@_0CM@KMNLLHD@PyState_RemoveModule?3?5Module?5ind@ DB 'PyState_Remove'
	DB	'Module: Module index invalid.', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyState_RemoveModule
_TEXT	SEGMENT
index$ = 32
state$ = 40
def$ = 64
PyState_RemoveModule PROC				; COMDAT

; 319  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 320  :     Py_ssize_t index = def->m_base.m_index;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR def$[rsp]
  0000e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00012	48 89 44 24 20	 mov	 QWORD PTR index$[rsp], rax

; 321  :     PyInterpreterState *state = PyThreadState_GET()->interp;

  00017	e8 00 00 00 00	 call	 PyThreadState_Get
  0001c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00020	48 89 44 24 28	 mov	 QWORD PTR state$[rsp], rax

; 322  :     if (index == 0) {

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR index$[rsp], 0
  0002b	75 13		 jne	 SHORT $LN3@PyState_Re

; 323  :         Py_FatalError("PyState_RemoveModule: Module index invalid.");

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@KMNLLHD@PyState_RemoveModule?3?5Module?5ind@
  00034	e8 00 00 00 00	 call	 Py_FatalError

; 324  :         return -1;

  00039	b8 ff ff ff ff	 mov	 eax, -1
  0003e	eb 60		 jmp	 SHORT $LN4@PyState_Re
$LN3@PyState_Re:

; 325  :     }
; 326  :     if (state->modules_by_index == NULL) {

  00040	48 8b 44 24 28	 mov	 rax, QWORD PTR state$[rsp]
  00045	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0004a	75 13		 jne	 SHORT $LN2@PyState_Re

; 327  :         Py_FatalError("PyState_RemoveModule: Interpreters module-list not acessible.");

  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DO@GMPBODCD@PyState_RemoveModule?3?5Interprete@
  00053	e8 00 00 00 00	 call	 Py_FatalError

; 328  :         return -1;

  00058	b8 ff ff ff ff	 mov	 eax, -1
  0005d	eb 41		 jmp	 SHORT $LN4@PyState_Re
$LN2@PyState_Re:

; 329  :     }
; 330  :     if (index > PyList_GET_SIZE(state->modules_by_index)) {

  0005f	48 8b 44 24 28	 mov	 rax, QWORD PTR state$[rsp]
  00064	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00068	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006c	48 39 44 24 20	 cmp	 QWORD PTR index$[rsp], rax
  00071	7e 13		 jle	 SHORT $LN1@PyState_Re

; 331  :         Py_FatalError("PyState_RemoveModule: Module index out of bounds.");

  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DC@NPLJAGMG@PyState_RemoveModule?3?5Module?5ind@
  0007a	e8 00 00 00 00	 call	 Py_FatalError

; 332  :         return -1;

  0007f	b8 ff ff ff ff	 mov	 eax, -1
  00084	eb 1a		 jmp	 SHORT $LN4@PyState_Re
$LN1@PyState_Re:

; 333  :     }
; 334  :     return PyList_SetItem(state->modules_by_index, index, Py_None);

  00086	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0008d	48 8b 54 24 20	 mov	 rdx, QWORD PTR index$[rsp]
  00092	48 8b 44 24 28	 mov	 rax, QWORD PTR state$[rsp]
  00097	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0009b	e8 00 00 00 00	 call	 PyList_SetItem
$LN4@PyState_Re:

; 335  : }

  000a0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a4	c3		 ret	 0
PyState_RemoveModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@	; `string'
PUBLIC	??_C@_0DI@DNBDENBA@PyThreadState_Clear?3?5warning?3?5th@ ; `string'
EXTRN	_PyParallel_ClearingThreadState:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	Py_VerboseFlag:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_Clear DD imagerel $LN48
	DD	imagerel $LN48+1376
	DD	imagerel $unwind$PyThreadState_Clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_Clear DD 020c01H
	DD	013010cH
xdata	ENDS
;	COMDAT ??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
CONST	SEGMENT
??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@ DB 'PyThreadState_Clear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@DNBDENBA@PyThreadState_Clear?3?5warning?3?5th@
CONST	SEGMENT
??_C@_0DI@DNBDENBA@PyThreadState_Clear?3?5warning?3?5th@ DB 'PyThreadStat'
	DB	'e_Clear: warning: thread still has a frame', 0aH, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyThreadState_Clear
_TEXT	SEGMENT
_py_tmp$20597 = 48
_py_tmp$20605 = 56
_py_tmp$20613 = 64
_py_tmp$20621 = 72
_py_tmp$20629 = 80
_py_tmp$20637 = 88
_py_tmp$20645 = 96
_py_tmp$20653 = 104
_py_tmp$20661 = 112
_py_tmp$20671 = 120
_py_tmp$20679 = 128
tstate$ = 160
PyThreadState_Clear PROC				; COMDAT

; 339  : {

$LN48:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 340  :     if (Py_VerboseFlag && tstate->frame != NULL)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00013	74 29		 je	 SHORT $LN45@PyThreadSt
  00015	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  0001d	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00022	74 1a		 je	 SHORT $LN45@PyThreadSt

; 341  :         fprintf(stderr,
; 342  :           "PyThreadState_Clear: warning: thread still has a frame\n");

  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0002a	48 83 c0 60	 add	 rax, 96			; 00000060H
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@DNBDENBA@PyThreadState_Clear?3?5warning?3?5th@
  00035	48 8b c8	 mov	 rcx, rax
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
$LN45@PyThreadSt:

; 343  : 
; 344  : #ifdef WITH_PARALLEL
; 345  :     _PyParallel_ClearingThreadState(tstate);

  0003e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tstate$[rsp]
  00046	e8 00 00 00 00	 call	 _PyParallel_ClearingThreadState
$LN44@PyThreadSt:

; 346  : #endif
; 347  : 
; 348  :     Py_CLEAR(tstate->frame);

  0004b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00053	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00058	74 5c		 je	 SHORT $LN41@PyThreadSt
  0005a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00062	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  0006a	4c 8b 48 10	 mov	 r9, QWORD PTR [rax+16]
  0006e	41 b8 5c 01 00
	00		 mov	 r8d, 348		; 0000015cH
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  00082	e8 00 00 00 00	 call	 _PyParallel_Guard
  00087	85 c0		 test	 eax, eax
  00089	75 2b		 jne	 SHORT $LN41@PyThreadSt
  0008b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00093	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00097	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20597[rsp], rax
  0009c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  000a4	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  000ac	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20597[rsp]
  000b1	e8 00 00 00 00	 call	 _Py_DecRef
$LN41@PyThreadSt:
  000b6	33 c0		 xor	 eax, eax
  000b8	85 c0		 test	 eax, eax
  000ba	75 8f		 jne	 SHORT $LN44@PyThreadSt
$LN40@PyThreadSt:

; 349  : 
; 350  :     Py_CLEAR(tstate->dict);

  000bc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  000c4	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  000c9	74 5c		 je	 SHORT $LN37@PyThreadSt
  000cb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  000db	4c 8b 48 78	 mov	 r9, QWORD PTR [rax+120]
  000df	41 b8 5e 01 00
	00		 mov	 r8d, 350		; 0000015eH
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  000f3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f8	85 c0		 test	 eax, eax
  000fa	75 2b		 jne	 SHORT $LN37@PyThreadSt
  000fc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00104	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00108	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20605[rsp], rax
  0010d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00115	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
  0011d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20605[rsp]
  00122	e8 00 00 00 00	 call	 _Py_DecRef
$LN37@PyThreadSt:
  00127	33 c0		 xor	 eax, eax
  00129	85 c0		 test	 eax, eax
  0012b	75 8f		 jne	 SHORT $LN40@PyThreadSt
$LN36@PyThreadSt:

; 351  :     Py_CLEAR(tstate->async_exc);

  0012d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00135	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0013d	74 65		 je	 SHORT $LN33@PyThreadSt
  0013f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00147	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  0014f	4c 8b 88 88 00
	00 00		 mov	 r9, QWORD PTR [rax+136]
  00156	41 b8 5f 01 00
	00		 mov	 r8d, 351		; 0000015fH
  0015c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  00163	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  0016a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0016f	85 c0		 test	 eax, eax
  00171	75 31		 jne	 SHORT $LN33@PyThreadSt
  00173	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  0017b	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00182	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$20613[rsp], rax
  00187	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  0018f	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0
  0019a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$20613[rsp]
  0019f	e8 00 00 00 00	 call	 _Py_DecRef
$LN33@PyThreadSt:
  001a4	33 c0		 xor	 eax, eax
  001a6	85 c0		 test	 eax, eax
  001a8	75 83		 jne	 SHORT $LN36@PyThreadSt
$LN32@PyThreadSt:

; 352  : 
; 353  :     Py_CLEAR(tstate->curexc_type);

  001aa	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  001b2	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  001b7	74 5c		 je	 SHORT $LN29@PyThreadSt
  001b9	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  001c9	4c 8b 48 48	 mov	 r9, QWORD PTR [rax+72]
  001cd	41 b8 61 01 00
	00		 mov	 r8d, 353		; 00000161H
  001d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  001e1	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e6	85 c0		 test	 eax, eax
  001e8	75 2b		 jne	 SHORT $LN29@PyThreadSt
  001ea	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  001f2	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  001f6	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$20621[rsp], rax
  001fb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00203	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0
  0020b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$20621[rsp]
  00210	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@PyThreadSt:
  00215	33 c0		 xor	 eax, eax
  00217	85 c0		 test	 eax, eax
  00219	75 8f		 jne	 SHORT $LN32@PyThreadSt
$LN28@PyThreadSt:

; 354  :     Py_CLEAR(tstate->curexc_value);

  0021b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00223	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00228	74 5c		 je	 SHORT $LN25@PyThreadSt
  0022a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00232	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  0023a	4c 8b 48 50	 mov	 r9, QWORD PTR [rax+80]
  0023e	41 b8 62 01 00
	00		 mov	 r8d, 354		; 00000162H
  00244	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0024b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  00252	e8 00 00 00 00	 call	 _PyParallel_Guard
  00257	85 c0		 test	 eax, eax
  00259	75 2b		 jne	 SHORT $LN25@PyThreadSt
  0025b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00263	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00267	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$20629[rsp], rax
  0026c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00274	48 c7 40 50 00
	00 00 00	 mov	 QWORD PTR [rax+80], 0
  0027c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$20629[rsp]
  00281	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@PyThreadSt:
  00286	33 c0		 xor	 eax, eax
  00288	85 c0		 test	 eax, eax
  0028a	75 8f		 jne	 SHORT $LN28@PyThreadSt
$LN24@PyThreadSt:

; 355  :     Py_CLEAR(tstate->curexc_traceback);

  0028c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00294	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  00299	74 5c		 je	 SHORT $LN21@PyThreadSt
  0029b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002a3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  002ab	4c 8b 48 58	 mov	 r9, QWORD PTR [rax+88]
  002af	41 b8 63 01 00
	00		 mov	 r8d, 355		; 00000163H
  002b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  002bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  002c3	e8 00 00 00 00	 call	 _PyParallel_Guard
  002c8	85 c0		 test	 eax, eax
  002ca	75 2b		 jne	 SHORT $LN21@PyThreadSt
  002cc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  002d4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002d8	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$20637[rsp], rax
  002dd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  002e5	48 c7 40 58 00
	00 00 00	 mov	 QWORD PTR [rax+88], 0
  002ed	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$20637[rsp]
  002f2	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@PyThreadSt:
  002f7	33 c0		 xor	 eax, eax
  002f9	85 c0		 test	 eax, eax
  002fb	75 8f		 jne	 SHORT $LN24@PyThreadSt
$LN20@PyThreadSt:

; 356  : 
; 357  :     Py_CLEAR(tstate->exc_type);

  002fd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00305	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0030a	74 5c		 je	 SHORT $LN17@PyThreadSt
  0030c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00314	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  0031c	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00320	41 b8 65 01 00
	00		 mov	 r8d, 357		; 00000165H
  00326	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0032d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  00334	e8 00 00 00 00	 call	 _PyParallel_Guard
  00339	85 c0		 test	 eax, eax
  0033b	75 2b		 jne	 SHORT $LN17@PyThreadSt
  0033d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00345	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00349	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$20645[rsp], rax
  0034e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00356	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0035e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$20645[rsp]
  00363	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@PyThreadSt:
  00368	33 c0		 xor	 eax, eax
  0036a	85 c0		 test	 eax, eax
  0036c	75 8f		 jne	 SHORT $LN20@PyThreadSt
$LN16@PyThreadSt:

; 358  :     Py_CLEAR(tstate->exc_value);

  0036e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00376	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0037b	74 5c		 je	 SHORT $LN13@PyThreadSt
  0037d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00385	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  0038d	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  00391	41 b8 66 01 00
	00		 mov	 r8d, 358		; 00000166H
  00397	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0039e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  003a5	e8 00 00 00 00	 call	 _PyParallel_Guard
  003aa	85 c0		 test	 eax, eax
  003ac	75 2b		 jne	 SHORT $LN13@PyThreadSt
  003ae	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  003b6	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  003ba	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$20653[rsp], rax
  003bf	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  003c7	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  003cf	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$20653[rsp]
  003d4	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyThreadSt:
  003d9	33 c0		 xor	 eax, eax
  003db	85 c0		 test	 eax, eax
  003dd	75 8f		 jne	 SHORT $LN16@PyThreadSt
$LN12@PyThreadSt:

; 359  :     Py_CLEAR(tstate->exc_traceback);

  003df	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  003e7	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  003ec	74 5c		 je	 SHORT $LN9@PyThreadSt
  003ee	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003f6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  003fe	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00402	41 b8 67 01 00
	00		 mov	 r8d, 359		; 00000167H
  00408	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  0040f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  00416	e8 00 00 00 00	 call	 _PyParallel_Guard
  0041b	85 c0		 test	 eax, eax
  0041d	75 2b		 jne	 SHORT $LN9@PyThreadSt
  0041f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00427	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0042b	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$20661[rsp], rax
  00430	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00438	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  00440	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$20661[rsp]
  00445	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyThreadSt:
  0044a	33 c0		 xor	 eax, eax
  0044c	85 c0		 test	 eax, eax
  0044e	75 8f		 jne	 SHORT $LN12@PyThreadSt

; 360  : 
; 361  :     tstate->c_profilefunc = NULL;

  00450	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00458	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 362  :     tstate->c_tracefunc = NULL;

  00460	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00468	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0
$LN8@PyThreadSt:

; 363  :     Py_CLEAR(tstate->c_profileobj);

  00470	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00478	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0047d	74 5c		 je	 SHORT $LN5@PyThreadSt
  0047f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00487	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  0048f	4c 8b 48 38	 mov	 r9, QWORD PTR [rax+56]
  00493	41 b8 6b 01 00
	00		 mov	 r8d, 363		; 0000016bH
  00499	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  004a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  004a7	e8 00 00 00 00	 call	 _PyParallel_Guard
  004ac	85 c0		 test	 eax, eax
  004ae	75 2b		 jne	 SHORT $LN5@PyThreadSt
  004b0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  004b8	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  004bc	48 89 44 24 78	 mov	 QWORD PTR _py_tmp$20671[rsp], rax
  004c1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  004c9	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0
  004d1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _py_tmp$20671[rsp]
  004d6	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyThreadSt:
  004db	33 c0		 xor	 eax, eax
  004dd	85 c0		 test	 eax, eax
  004df	75 8f		 jne	 SHORT $LN8@PyThreadSt
$LN4@PyThreadSt:

; 364  :     Py_CLEAR(tstate->c_traceobj);

  004e1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  004e9	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  004ee	74 62		 je	 SHORT $LN1@PyThreadSt
  004f0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004f8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00500	4c 8b 48 40	 mov	 r9, QWORD PTR [rax+64]
  00504	41 b8 6c 01 00
	00		 mov	 r8d, 364		; 0000016cH
  0050a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HFKIGPM@?4?4?2Python?2pystate?4c?$AA@
  00511	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CJAFDPIG@PyThreadState_Clear?$AA@
  00518	e8 00 00 00 00	 call	 _PyParallel_Guard
  0051d	85 c0		 test	 eax, eax
  0051f	75 31		 jne	 SHORT $LN1@PyThreadSt
  00521	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00529	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0052d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _py_tmp$20679[rsp], rax
  00535	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  0053d	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0
  00545	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20679[rsp]
  0054d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyThreadSt:
  00552	33 c0		 xor	 eax, eax
  00554	85 c0		 test	 eax, eax
  00556	75 89		 jne	 SHORT $LN4@PyThreadSt

; 365  : 
; 366  : }

  00558	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0055f	c3		 ret	 0
PyThreadState_Clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@DPDPLJDG@PyThreadState_Delete?3?5tstate?5is?5@ ; `string'
EXTRN	PyThread_delete_key_value:PROC
EXTRN	PyThread_get_key_value:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_Delete DD imagerel $LN5
	DD	imagerel $LN5+89
	DD	imagerel $unwind$PyThreadState_Delete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_Delete DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CO@DPDPLJDG@PyThreadState_Delete?3?5tstate?5is?5@
CONST	SEGMENT
??_C@_0CO@DPDPLJDG@PyThreadState_Delete?3?5tstate?5is?5@ DB 'PyThreadStat'
	DB	'e_Delete: tstate is still current', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyThreadState_Delete
_TEXT	SEGMENT
tstate$ = 48
PyThreadState_Delete PROC				; COMDAT

; 413  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 414  :     if (tstate == _Py_atomic_load_relaxed(&_PyThreadState_Current))

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
  00010	48 39 44 24 30	 cmp	 QWORD PTR tstate$[rsp], rax
  00015	75 0c		 jne	 SHORT $LN2@PyThreadSt@2

; 415  :         Py_FatalError("PyThreadState_Delete: tstate is still current");

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@DPDPLJDG@PyThreadState_Delete?3?5tstate?5is?5@
  0001e	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PyThreadSt@2:

; 416  : #ifdef WITH_THREAD
; 417  :     if (autoInterpreterState && PyThread_get_key_value(autoTLSkey) == tstate)

  00023	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR autoInterpreterState, 0
  0002b	74 1d		 je	 SHORT $LN1@PyThreadSt@2
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00033	e8 00 00 00 00	 call	 PyThread_get_key_value
  00038	48 3b 44 24 30	 cmp	 rax, QWORD PTR tstate$[rsp]
  0003d	75 0b		 jne	 SHORT $LN1@PyThreadSt@2

; 418  :         PyThread_delete_key_value(autoTLSkey);

  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00045	e8 00 00 00 00	 call	 PyThread_delete_key_value
$LN1@PyThreadSt@2:

; 419  : #endif /* WITH_THREAD */
; 420  :     tstate_delete_common(tstate);

  0004a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tstate$[rsp]
  0004f	e8 00 00 00 00	 call	 tstate_delete_common

; 421  : }

  00054	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00058	c3		 ret	 0
PyThreadState_Delete ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DN@HCOPHJKM@PyThreadState_Delete?3?5circular?5l@ ; `string'
PUBLIC	??_C@_0ED@HMJHEGFJ@PyThreadState_Delete?3?5small?5circ@ ; `string'
PUBLIC	??_C@_0CF@JIOGOBAC@PyThreadState_Delete?3?5invalid?5ts@ ; `string'
PUBLIC	??_C@_0CC@KDKMJKDP@PyThreadState_Delete?3?5NULL?5inter@ ; `string'
PUBLIC	??_C@_0CC@KGLHHLIF@PyThreadState_Delete?3?5NULL?5tstat@ ; `string'
EXTRN	_PyParallel_DeletingThreadState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tstate_delete_common DD imagerel tstate_delete_common
	DD	imagerel tstate_delete_common+291
	DD	imagerel $unwind$tstate_delete_common
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tstate_delete_common DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0DN@HCOPHJKM@PyThreadState_Delete?3?5circular?5l@
CONST	SEGMENT
??_C@_0DN@HCOPHJKM@PyThreadState_Delete?3?5circular?5l@ DB 'PyThreadState'
	DB	'_Delete: circular list(!) and tstate not found.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@HMJHEGFJ@PyThreadState_Delete?3?5small?5circ@
CONST	SEGMENT
??_C@_0ED@HMJHEGFJ@PyThreadState_Delete?3?5small?5circ@ DB 'PyThreadState'
	DB	'_Delete: small circular list(!) and tstate not found.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JIOGOBAC@PyThreadState_Delete?3?5invalid?5ts@
CONST	SEGMENT
??_C@_0CF@JIOGOBAC@PyThreadState_Delete?3?5invalid?5ts@ DB 'PyThreadState'
	DB	'_Delete: invalid tstate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KDKMJKDP@PyThreadState_Delete?3?5NULL?5inter@
CONST	SEGMENT
??_C@_0CC@KDKMJKDP@PyThreadState_Delete?3?5NULL?5inter@ DB 'PyThreadState'
	DB	'_Delete: NULL interp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KGLHHLIF@PyThreadState_Delete?3?5NULL?5tstat@
CONST	SEGMENT
??_C@_0CC@KGLHHLIF@PyThreadState_Delete?3?5NULL?5tstat@ DB 'PyThreadState'
	DB	'_Delete: NULL tstate', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tstate_delete_common
_TEXT	SEGMENT
p$ = 32
prev_p$ = 40
interp$ = 48
tstate$ = 80
tstate_delete_common PROC				; COMDAT

; 372  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 373  :     PyInterpreterState *interp;
; 374  :     PyThreadState **p;
; 375  :     PyThreadState *prev_p = NULL;

  00009	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR prev_p$[rsp], 0

; 376  :     if (tstate == NULL)

  00012	48 83 7c 24 50
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  00018	75 0c		 jne	 SHORT $LN9@tstate_del

; 377  :         Py_FatalError("PyThreadState_Delete: NULL tstate");

  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@KGLHHLIF@PyThreadState_Delete?3?5NULL?5tstat@
  00021	e8 00 00 00 00	 call	 Py_FatalError
$LN9@tstate_del:

; 378  :     interp = tstate->interp;

  00026	48 8b 44 24 50	 mov	 rax, QWORD PTR tstate$[rsp]
  0002b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002f	48 89 44 24 30	 mov	 QWORD PTR interp$[rsp], rax

; 379  :     if (interp == NULL)

  00034	48 83 7c 24 30
	00		 cmp	 QWORD PTR interp$[rsp], 0
  0003a	75 0c		 jne	 SHORT $LN8@tstate_del

; 380  :         Py_FatalError("PyThreadState_Delete: NULL interp");

  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@KDKMJKDP@PyThreadState_Delete?3?5NULL?5inter@
  00043	e8 00 00 00 00	 call	 Py_FatalError
$LN8@tstate_del:

; 381  : #ifdef WITH_PARALLEL
; 382  :     _PyParallel_DeletingThreadState(tstate);

  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tstate$[rsp]
  0004d	e8 00 00 00 00	 call	 _PyParallel_DeletingThreadState

; 383  : #endif
; 384  :     HEAD_LOCK();

  00052	ba 01 00 00 00	 mov	 edx, 1
  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  0005e	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 385  :     for (p = &interp->tstate_head; ; p = &(*p)->next) {

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR interp$[rsp]
  00068	48 83 c0 08	 add	 rax, 8
  0006c	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  00071	eb 0d		 jmp	 SHORT $LN7@tstate_del
$LN6@tstate_del:
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN7@tstate_del:

; 386  :         if (*p == NULL)

  00080	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00085	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00089	75 0c		 jne	 SHORT $LN4@tstate_del

; 387  :             Py_FatalError(
; 388  :                 "PyThreadState_Delete: invalid tstate");

  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@JIOGOBAC@PyThreadState_Delete?3?5invalid?5ts@
  00092	e8 00 00 00 00	 call	 Py_FatalError
$LN4@tstate_del:

; 389  :         if (*p == tstate)

  00097	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tstate$[rsp]
  000a1	48 39 08	 cmp	 QWORD PTR [rax], rcx
  000a4	75 02		 jne	 SHORT $LN3@tstate_del

; 390  :             break;

  000a6	eb 4f		 jmp	 SHORT $LN5@tstate_del
$LN3@tstate_del:

; 391  :         /* Sanity check.  These states should never happen but if
; 392  :          * they do we must abort.  Otherwise we'll end up spinning in
; 393  :          * in a tight loop with the lock held.  A similar check is done
; 394  :          * in thread.c find_key().  */
; 395  :         if (*p == prev_p)

  000a8	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000ad	48 8b 4c 24 28	 mov	 rcx, QWORD PTR prev_p$[rsp]
  000b2	48 39 08	 cmp	 QWORD PTR [rax], rcx
  000b5	75 0c		 jne	 SHORT $LN2@tstate_del

; 396  :             Py_FatalError(
; 397  :                 "PyThreadState_Delete: small circular list(!)"
; 398  :                 " and tstate not found.");

  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0ED@HMJHEGFJ@PyThreadState_Delete?3?5small?5circ@
  000be	e8 00 00 00 00	 call	 Py_FatalError
$LN2@tstate_del:

; 399  :         prev_p = *p;

  000c3	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cb	48 89 44 24 28	 mov	 QWORD PTR prev_p$[rsp], rax

; 400  :         if ((*p)->next == interp->tstate_head)

  000d0	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000d5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR interp$[rsp]
  000dd	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000e1	48 39 08	 cmp	 QWORD PTR [rax], rcx
  000e4	75 0c		 jne	 SHORT $LN1@tstate_del

; 401  :             Py_FatalError(
; 402  :                 "PyThreadState_Delete: circular list(!) and"
; 403  :                 " tstate not found.");

  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DN@HCOPHJKM@PyThreadState_Delete?3?5circular?5l@
  000ed	e8 00 00 00 00	 call	 Py_FatalError
$LN1@tstate_del:

; 404  :     }

  000f2	e9 7c ff ff ff	 jmp	 $LN6@tstate_del
$LN5@tstate_del:

; 405  :     *p = tstate->next;

  000f7	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000fc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tstate$[rsp]
  00101	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00104	48 89 08	 mov	 QWORD PTR [rax], rcx

; 406  :     HEAD_UNLOCK();

  00107	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  0010e	e8 00 00 00 00	 call	 PyThread_release_lock

; 407  :     free(tstate);

  00113	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tstate$[rsp]
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 408  : }

  0011e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00122	c3		 ret	 0
tstate_delete_common ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@BCCBJFCH@PyThreadState_DeleteCurrent?3?5no?5@ ; `string'
PUBLIC	PyThreadState_DeleteCurrent
EXTRN	PyEval_ReleaseLock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_DeleteCurrent DD imagerel $LN5
	DD	imagerel $LN5+106
	DD	imagerel $unwind$PyThreadState_DeleteCurrent
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_DeleteCurrent DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CP@BCCBJFCH@PyThreadState_DeleteCurrent?3?5no?5@
CONST	SEGMENT
??_C@_0CP@BCCBJFCH@PyThreadState_DeleteCurrent?3?5no?5@ DB 'PyThreadState'
	DB	'_DeleteCurrent: no current tstate', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyThreadState_DeleteCurrent
_TEXT	SEGMENT
tstate$ = 32
PyThreadState_DeleteCurrent PROC			; COMDAT

; 427  : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 428  :     PyThreadState *tstate = (PyThreadState*)_Py_atomic_load_relaxed(
; 429  :         &_PyThreadState_Current);

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
  0000b	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 430  :     if (tstate == NULL)

  00010	48 83 7c 24 20
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  00016	75 0c		 jne	 SHORT $LN2@PyThreadSt@3

; 431  :         Py_FatalError(
; 432  :             "PyThreadState_DeleteCurrent: no current tstate");

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CP@BCCBJFCH@PyThreadState_DeleteCurrent?3?5no?5@
  0001f	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PyThreadSt@3:

; 433  :     _Py_atomic_store_relaxed(&_PyThreadState_Current, NULL);

  00024	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR _PyThreadState_Current, 0

; 434  :     if (autoInterpreterState && PyThread_get_key_value(autoTLSkey) == tstate)

  0002f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR autoInterpreterState, 0
  00037	74 1d		 je	 SHORT $LN1@PyThreadSt@3
  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  0003f	e8 00 00 00 00	 call	 PyThread_get_key_value
  00044	48 3b 44 24 20	 cmp	 rax, QWORD PTR tstate$[rsp]
  00049	75 0b		 jne	 SHORT $LN1@PyThreadSt@3

; 435  :         PyThread_delete_key_value(autoTLSkey);

  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00051	e8 00 00 00 00	 call	 PyThread_delete_key_value
$LN1@PyThreadSt@3:

; 436  :     tstate_delete_common(tstate);

  00056	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  0005b	e8 00 00 00 00	 call	 tstate_delete_common

; 437  :     PyEval_ReleaseLock();

  00060	e8 00 00 00 00	 call	 PyEval_ReleaseLock

; 438  : }

  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	c3		 ret	 0
PyThreadState_DeleteCurrent ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@HHNGIJOJ@PyThreadState_Get?3?5no?5current?5th@ ; `string'
EXTRN	_PyParallel_GetThreadState:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_Get DD imagerel $LN6
	DD	imagerel $LN6+77
	DD	imagerel $unwind$PyThreadState_Get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_Get DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CF@HHNGIJOJ@PyThreadState_Get?3?5no?5current?5th@
CONST	SEGMENT
??_C@_0CF@HHNGIJOJ@PyThreadState_Get?3?5no?5current?5th@ DB 'PyThreadStat'
	DB	'e_Get: no current thread', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyThreadState_Get
_TEXT	SEGMENT
tstate$ = 32
tv67 = 40
PyThreadState_Get PROC					; COMDAT

; 444  : {

$LN6:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 445  :     PyThreadState *tstate = _PyThreadState_XGET();

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 0c		 je	 SHORT $LN4@PyThreadSt@4
  0000d	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00012	48 89 44 24 28	 mov	 QWORD PTR tv67[rsp], rax
  00017	eb 0c		 jmp	 SHORT $LN5@PyThreadSt@4
$LN4@PyThreadSt@4:
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
  00020	48 89 44 24 28	 mov	 QWORD PTR tv67[rsp], rax
$LN5@PyThreadSt@4:
  00025	48 8b 44 24 28	 mov	 rax, QWORD PTR tv67[rsp]
  0002a	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 446  :     if (tstate == NULL)

  0002f	48 83 7c 24 20
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  00035	75 0c		 jne	 SHORT $LN1@PyThreadSt@4

; 447  :         Py_FatalError("PyThreadState_Get: no current thread");

  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@HHNGIJOJ@PyThreadState_Get?3?5no?5current?5th@
  0003e	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyThreadSt@4:

; 448  : 
; 449  :     return tstate;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]

; 450  : }

  00048	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004c	c3		 ret	 0
PyThreadState_Get ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_XGet
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_XGet DD imagerel $LN5
	DD	imagerel $LN5+47
	DD	imagerel $unwind$PyThreadState_XGet
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_XGet DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyThreadState_XGet
_TEXT	SEGMENT
tv67 = 32
PyThreadState_XGet PROC					; COMDAT

; 454  : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 455  :     return _PyThreadState_XGET();

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 0c		 je	 SHORT $LN3@PyThreadSt@5
  0000d	e8 00 00 00 00	 call	 _PyParallel_GetThreadState
  00012	48 89 44 24 20	 mov	 QWORD PTR tv67[rsp], rax
  00017	eb 0c		 jmp	 SHORT $LN4@PyThreadSt@5
$LN3@PyThreadSt@5:
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
  00020	48 89 44 24 20	 mov	 QWORD PTR tv67[rsp], rax
$LN4@PyThreadSt@5:
  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR tv67[rsp]

; 456  : }

  0002a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002e	c3		 ret	 0
PyThreadState_XGet ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@NHFFCBPO@Invalid?5thread?5state?5for?5this?5th@ ; `string'
PUBLIC	PyGILState_GetThisThreadState
PUBLIC	??_C@_1DO@PGBNPHLA@?$AAn?$AAe?$AAw?$AAt?$AAs?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GA@CFLMCCGN@?$AAo?$AAl?$AAd?$AAt?$AAs?$AA?9?$AA?$DO?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA_?$AAi?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAg?$AAe?$AAt?$AA_?$AAc?$AAu?$AAr?$AAr@ ; `string'
PUBLIC	??_C@_1DO@MCODAOHB@?$AAo?$AAl?$AAd?$AAt?$AAs?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	PyThreadState_Swap
EXTRN	__imp__errno:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_Swap DD imagerel $LN10
	DD	imagerel $LN10+286
	DD	imagerel $unwind$PyThreadState_Swap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_Swap DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0CF@NHFFCBPO@Invalid?5thread?5state?5for?5this?5th@
CONST	SEGMENT
??_C@_0CF@NHFFCBPO@Invalid?5thread?5state?5for?5this?5th@ DB 'Invalid thr'
	DB	'ead state for this thread', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@PGBNPHLA@?$AAn?$AAe?$AAw?$AAt?$AAs?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@PGBNPHLA@?$AAn?$AAe?$AAw?$AAt?$AAs?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, 't', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'i', 00H, 's', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'e', 00H, 'l', 00H, '_', 00H, 't', 00H
	DB	'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@CFLMCCGN@?$AAo?$AAl?$AAd?$AAt?$AAs?$AA?9?$AA?$DO?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA_?$AAi?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAg?$AAe?$AAt?$AA_?$AAc?$AAu?$AAr?$AAr@
CONST	SEGMENT
??_C@_1GA@CFLMCCGN@?$AAo?$AAl?$AAd?$AAt?$AAs?$AA?9?$AA?$DO?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA_?$AAi?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAg?$AAe?$AAt?$AA_?$AAc?$AAu?$AAr?$AAr@ DB 'o'
	DB	00H, 'l', 00H, 'd', 00H, 't', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	't', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '_'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'_', 00H, 'P', 00H, 'y', 00H, '_', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, '_', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, '_', 00H, 't', 00H, 'h', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, '_', 00H, 'i', 00H, 'd', 00H, '(', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@MCODAOHB@?$AAo?$AAl?$AAd?$AAt?$AAs?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@MCODAOHB@?$AAo?$AAl?$AAd?$AAt?$AAs?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'o'
	DB	00H, 'l', 00H, 'd', 00H, 't', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'i', 00H, 's', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'e', 00H, 'l', 00H, '_', 00H, 't', 00H
	DB	'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'p', 00H, 'y', 00H, 's', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyThreadState_Swap
_TEXT	SEGMENT
oldts$ = 32
check$20748 = 40
err$20747 = 48
newts$ = 80
PyThreadState_Swap PROC					; COMDAT

; 460  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 461  :     PyThreadState *oldts = (PyThreadState*)_Py_atomic_load_relaxed(
; 462  :         &_PyThreadState_Current);

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
  00010	48 89 44 24 20	 mov	 QWORD PTR oldts$[rsp], rax

; 463  : #ifdef WITH_PARALLEL
; 464  :     /* Make sure oldts and newts aren't parallel. */
; 465  :     if (oldts) {

  00015	48 83 7c 24 20
	00		 cmp	 QWORD PTR oldts$[rsp], 0
  0001b	74 5b		 je	 SHORT $LN4@PyThreadSt@6

; 466  :         assert(oldts->is_parallel_thread == 0);

  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR oldts$[rsp]
  00022	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [rax+168], 0
  00029	74 1c		 je	 SHORT $LN7@PyThreadSt@6
  0002b	41 b8 d2 01 00
	00		 mov	 r8d, 466		; 000001d2H
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@MCODAOHB@?$AAo?$AAl?$AAd?$AAt?$AAs?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00045	33 c0		 xor	 eax, eax
$LN7@PyThreadSt@6:

; 467  :         assert(oldts->thread_id == _Py_get_current_thread_id());

  00047	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72
  0004f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR oldts$[rsp]
  00054	39 81 90 00 00
	00		 cmp	 DWORD PTR [rcx+144], eax
  0005a	74 1c		 je	 SHORT $LN8@PyThreadSt@6
  0005c	41 b8 d3 01 00
	00		 mov	 r8d, 467		; 000001d3H
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GA@CFLMCCGN@?$AAo?$AAl?$AAd?$AAt?$AAs?$AA?9?$AA?$DO?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA_?$AAi?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAg?$AAe?$AAt?$AA_?$AAc?$AAu?$AAr?$AAr@
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00076	33 c0		 xor	 eax, eax
$LN8@PyThreadSt@6:
$LN4@PyThreadSt@6:

; 468  :     }
; 469  :     if (newts)

  00078	48 83 7c 24 50
	00		 cmp	 QWORD PTR newts$[rsp], 0
  0007e	74 2a		 je	 SHORT $LN3@PyThreadSt@6

; 470  :         assert(newts->is_parallel_thread == 0);

  00080	48 8b 44 24 50	 mov	 rax, QWORD PTR newts$[rsp]
  00085	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [rax+168], 0
  0008c	74 1c		 je	 SHORT $LN9@PyThreadSt@6
  0008e	41 b8 d6 01 00
	00		 mov	 r8d, 470		; 000001d6H
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@PGBNPHLA@?$AAn?$AAe?$AAw?$AAt?$AAs?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a8	33 c0		 xor	 eax, eax
$LN9@PyThreadSt@6:
$LN3@PyThreadSt@6:

; 471  : #endif
; 472  : 
; 473  :     _Py_atomic_store_relaxed(&_PyThreadState_Current, newts);

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR newts$[rsp]
  000af	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyThreadState_Current, rax

; 474  :     /* It should not be possible for more than one thread state
; 475  :        to be used for a thread.  Check this the best we can in debug
; 476  :        builds.
; 477  :     */
; 478  : #if defined(Py_DEBUG) && defined(WITH_THREAD)
; 479  :     if (newts) {

  000b6	48 83 7c 24 50
	00		 cmp	 QWORD PTR newts$[rsp], 0
  000bc	74 56		 je	 SHORT $LN2@PyThreadSt@6

; 480  :         /* This can be called from PyEval_RestoreThread(). Similar
; 481  :            to it, we need to ensure errno doesn't change.
; 482  :         */
; 483  :         int err = errno;

  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000c4	8b 00		 mov	 eax, DWORD PTR [rax]
  000c6	89 44 24 30	 mov	 DWORD PTR err$20747[rsp], eax

; 484  :         PyThreadState *check = PyGILState_GetThisThreadState();

  000ca	e8 00 00 00 00	 call	 PyGILState_GetThisThreadState
  000cf	48 89 44 24 28	 mov	 QWORD PTR check$20748[rsp], rax

; 485  :         if (check && check->interp == newts->interp && check != newts)

  000d4	48 83 7c 24 28
	00		 cmp	 QWORD PTR check$20748[rsp], 0
  000da	74 2c		 je	 SHORT $LN1@PyThreadSt@6
  000dc	48 8b 44 24 28	 mov	 rax, QWORD PTR check$20748[rsp]
  000e1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR newts$[rsp]
  000e6	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000ea	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  000ee	75 18		 jne	 SHORT $LN1@PyThreadSt@6
  000f0	48 8b 44 24 50	 mov	 rax, QWORD PTR newts$[rsp]
  000f5	48 39 44 24 28	 cmp	 QWORD PTR check$20748[rsp], rax
  000fa	74 0c		 je	 SHORT $LN1@PyThreadSt@6

; 486  :             Py_FatalError("Invalid thread state for this thread");

  000fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@NHFFCBPO@Invalid?5thread?5state?5for?5this?5th@
  00103	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyThreadSt@6:

; 487  :         errno = err;

  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0010e	8b 4c 24 30	 mov	 ecx, DWORD PTR err$20747[rsp]
  00112	89 08		 mov	 DWORD PTR [rax], ecx
$LN2@PyThreadSt@6:

; 488  :     }
; 489  : #endif
; 490  :     return oldts;

  00114	48 8b 44 24 20	 mov	 rax, QWORD PTR oldts$[rsp]

; 491  : }

  00119	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011d	c3		 ret	 0
PyThreadState_Swap ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_GetDict
EXTRN	PyErr_Clear:PROC
EXTRN	PyDict_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_GetDict DD imagerel $LN6
	DD	imagerel $LN6+89
	DD	imagerel $unwind$PyThreadState_GetDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_GetDict DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyThreadState_GetDict
_TEXT	SEGMENT
tstate$ = 32
d$20759 = 40
PyThreadState_GetDict PROC				; COMDAT

; 501  : {

$LN6:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 502  :     PyThreadState *tstate = PyThreadState_XGET();

  00004	e8 00 00 00 00	 call	 PyThreadState_XGet
  00009	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 503  :     if (tstate == NULL)

  0000e	48 83 7c 24 20
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  00014	75 04		 jne	 SHORT $LN3@PyThreadSt@7

; 504  :         return NULL;

  00016	33 c0		 xor	 eax, eax
  00018	eb 3a		 jmp	 SHORT $LN4@PyThreadSt@7
$LN3@PyThreadSt@7:

; 505  : 
; 506  :     if (tstate->dict == NULL) {

  0001a	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0001f	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00024	75 25		 jne	 SHORT $LN2@PyThreadSt@7

; 507  :         PyObject *d;
; 508  :         tstate->dict = d = PyDict_New();

  00026	e8 00 00 00 00	 call	 PyDict_New
  0002b	48 89 44 24 28	 mov	 QWORD PTR d$20759[rsp], rax
  00030	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00035	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$20759[rsp]
  0003a	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 509  :         if (d == NULL)

  0003e	48 83 7c 24 28
	00		 cmp	 QWORD PTR d$20759[rsp], 0
  00044	75 05		 jne	 SHORT $LN1@PyThreadSt@7

; 510  :             PyErr_Clear();

  00046	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@PyThreadSt@7:
$LN2@PyThreadSt@7:

; 511  :     }
; 512  :     return tstate->dict;

  0004b	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00050	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
$LN4@PyThreadSt@7:

; 513  : }

  00054	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00058	c3		 ret	 0
PyThreadState_GetDict ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_SetAsyncExc
EXTRN	_PyEval_SignalAsyncExc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_SetAsyncExc DD imagerel $LN15
	DD	imagerel $LN15+242
	DD	imagerel $unwind$PyThreadState_SetAsyncExc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_SetAsyncExc DD 010d01H
	DD	0820dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyThreadState_SetAsyncExc
_TEXT	SEGMENT
p$ = 32
tstate$ = 40
interp$ = 48
old_exc$20775 = 56
id$ = 80
exc$ = 88
PyThreadState_SetAsyncExc PROC				; COMDAT

; 525  : PyThreadState_SetAsyncExc(long id, PyObject *exc) {

$LN15:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 526  :     PyThreadState *tstate = PyThreadState_GET();

  0000d	e8 00 00 00 00	 call	 PyThreadState_Get
  00012	48 89 44 24 28	 mov	 QWORD PTR tstate$[rsp], rax

; 527  :     PyInterpreterState *interp = tstate->interp;

  00017	48 8b 44 24 28	 mov	 rax, QWORD PTR tstate$[rsp]
  0001c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00020	48 89 44 24 30	 mov	 QWORD PTR interp$[rsp], rax

; 528  :     PyThreadState *p;
; 529  : 
; 530  :     /* Although the GIL is held, a few C API functions can be called
; 531  :      * without the GIL held, and in particular some that create and
; 532  :      * destroy thread and interpreter states.  Those can mutate the
; 533  :      * list of thread states we're traversing, so to prevent that we lock
; 534  :      * head_mutex for the duration.
; 535  :      */
; 536  :     HEAD_LOCK();

  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00031	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 537  :     for (p = interp->tstate_head; p != NULL; p = p->next) {

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR interp$[rsp]
  0003b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003f	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  00044	eb 0d		 jmp	 SHORT $LN12@PyThreadSt@8
$LN11@PyThreadSt@8:
  00046	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0004b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004e	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN12@PyThreadSt@8:
  00053	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00059	0f 84 80 00 00
	00		 je	 $LN10@PyThreadSt@8

; 538  :         if (p->thread_id == id) {

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00064	8b 4c 24 50	 mov	 ecx, DWORD PTR id$[rsp]
  00068	39 88 90 00 00
	00		 cmp	 DWORD PTR [rax+144], ecx
  0006e	75 6a		 jne	 SHORT $LN9@PyThreadSt@8

; 539  :             /* Tricky:  we need to decref the current value
; 540  :              * (if any) in p->async_exc, but that can in turn
; 541  :              * allow arbitrary Python code to run, including
; 542  :              * perhaps calls to this function.  To prevent
; 543  :              * deadlock, we need to release head_mutex before
; 544  :              * the decref.
; 545  :              */
; 546  :             PyObject *old_exc = p->async_exc;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00075	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  0007c	48 89 44 24 38	 mov	 QWORD PTR old_exc$20775[rsp], rax
$LN8@PyThreadSt@8:

; 547  :             Py_XINCREF(exc);

  00081	48 83 7c 24 58
	00		 cmp	 QWORD PTR exc$[rsp], 0
  00087	74 0a		 je	 SHORT $LN5@PyThreadSt@8
  00089	48 8b 4c 24 58	 mov	 rcx, QWORD PTR exc$[rsp]
  0008e	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@PyThreadSt@8:
  00093	33 c0		 xor	 eax, eax
  00095	85 c0		 test	 eax, eax
  00097	75 e8		 jne	 SHORT $LN8@PyThreadSt@8

; 548  :             p->async_exc = exc;

  00099	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR exc$[rsp]
  000a3	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 549  :             HEAD_UNLOCK();

  000aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  000b1	e8 00 00 00 00	 call	 PyThread_release_lock
$LN4@PyThreadSt@8:

; 550  :             Py_XDECREF(old_exc);

  000b6	48 83 7c 24 38
	00		 cmp	 QWORD PTR old_exc$20775[rsp], 0
  000bc	74 0a		 je	 SHORT $LN1@PyThreadSt@8
  000be	48 8b 4c 24 38	 mov	 rcx, QWORD PTR old_exc$20775[rsp]
  000c3	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyThreadSt@8:
  000c8	33 c0		 xor	 eax, eax
  000ca	85 c0		 test	 eax, eax
  000cc	75 e8		 jne	 SHORT $LN4@PyThreadSt@8

; 551  :             _PyEval_SignalAsyncExc();

  000ce	e8 00 00 00 00	 call	 _PyEval_SignalAsyncExc

; 552  :             return 1;

  000d3	b8 01 00 00 00	 mov	 eax, 1
  000d8	eb 13		 jmp	 SHORT $LN13@PyThreadSt@8
$LN9@PyThreadSt@8:

; 553  :         }
; 554  :     }

  000da	e9 67 ff ff ff	 jmp	 $LN11@PyThreadSt@8
$LN10@PyThreadSt@8:

; 555  :     HEAD_UNLOCK();

  000df	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  000e6	e8 00 00 00 00	 call	 PyThread_release_lock

; 556  :     return 0;

  000eb	33 c0		 xor	 eax, eax
$LN13@PyThreadSt@8:

; 557  : }

  000ed	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f1	c3		 ret	 0
PyThreadState_SetAsyncExc ENDP
_TEXT	ENDS
PUBLIC	PyInterpreterState_Head
; Function compile flags: /Odtp
;	COMDAT PyInterpreterState_Head
_TEXT	SEGMENT
PyInterpreterState_Head PROC				; COMDAT

; 566  :     return interp_head;

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR interp_head

; 567  : }

  00007	c3		 ret	 0
PyInterpreterState_Head ENDP
_TEXT	ENDS
PUBLIC	PyInterpreterState_Next
; Function compile flags: /Odtp
;	COMDAT PyInterpreterState_Next
_TEXT	SEGMENT
interp$ = 8
PyInterpreterState_Next PROC				; COMDAT

; 570  : PyInterpreterState_Next(PyInterpreterState *interp) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 571  :     return interp->next;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR interp$[rsp]
  0000a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 572  : }

  0000d	c3		 ret	 0
PyInterpreterState_Next ENDP
_TEXT	ENDS
PUBLIC	PyInterpreterState_ThreadHead
; Function compile flags: /Odtp
;	COMDAT PyInterpreterState_ThreadHead
_TEXT	SEGMENT
interp$ = 8
PyInterpreterState_ThreadHead PROC			; COMDAT

; 575  : PyInterpreterState_ThreadHead(PyInterpreterState *interp) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 576  :     return interp->tstate_head;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR interp$[rsp]
  0000a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 577  : }

  0000e	c3		 ret	 0
PyInterpreterState_ThreadHead ENDP
_TEXT	ENDS
PUBLIC	PyThreadState_Next
; Function compile flags: /Odtp
;	COMDAT PyThreadState_Next
_TEXT	SEGMENT
tstate$ = 8
PyThreadState_Next PROC					; COMDAT

; 580  : PyThreadState_Next(PyThreadState *tstate) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 581  :     return tstate->next;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR tstate$[rsp]
  0000a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 582  : }

  0000d	c3		 ret	 0
PyThreadState_Next ENDP
_TEXT	ENDS
PUBLIC	_PyThread_CurrentFrames
EXTRN	PyDict_SetItem:PROC
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyThread_CurrentFrames DD imagerel $LN13
	DD	imagerel $LN13+275
	DD	imagerel $unwind$_PyThread_CurrentFrames
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyThread_CurrentFrames DD 010401H
	DD	0a204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyThread_CurrentFrames
_TEXT	SEGMENT
i$ = 32
result$ = 40
t$20808 = 48
id$20813 = 56
stat$20814 = 64
frame$20815 = 72
_PyThread_CurrentFrames PROC				; COMDAT

; 591  : {

$LN13:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 592  :     PyObject *result;
; 593  :     PyInterpreterState *i;
; 594  : 
; 595  :     result = PyDict_New();

  00004	e8 00 00 00 00	 call	 PyDict_New
  00009	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 596  :     if (result == NULL)

  0000e	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00014	75 07		 jne	 SHORT $LN10@PyThread_C

; 597  :         return NULL;

  00016	33 c0		 xor	 eax, eax
  00018	e9 f1 00 00 00	 jmp	 $LN11@PyThread_C
$LN10@PyThread_C:

; 598  : 
; 599  :     /* for i in all interpreters:
; 600  :      *     for t in all of i's thread states:
; 601  :      *          if t's frame isn't NULL, map t's id to its frame
; 602  :      * Because these lists can mutate even when the GIL is held, we
; 603  :      * need to grab head_mutex for the duration.
; 604  :      */
; 605  :     HEAD_LOCK();

  0001d	ba 01 00 00 00	 mov	 edx, 1
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  00029	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 606  :     for (i = interp_head; i != NULL; i = i->next) {

  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR interp_head
  00035	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
  0003a	eb 0d		 jmp	 SHORT $LN9@PyThread_C
$LN8@PyThread_C:
  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00041	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00044	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN9@PyThread_C:
  00049	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  0004f	0f 84 8e 00 00
	00		 je	 $LN7@PyThread_C

; 607  :         PyThreadState *t;
; 608  :         for (t = i->tstate_head; t != NULL; t = t->next) {

  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0005a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005e	48 89 44 24 30	 mov	 QWORD PTR t$20808[rsp], rax
  00063	eb 0d		 jmp	 SHORT $LN6@PyThread_C
$LN5@PyThread_C:
  00065	48 8b 44 24 30	 mov	 rax, QWORD PTR t$20808[rsp]
  0006a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006d	48 89 44 24 30	 mov	 QWORD PTR t$20808[rsp], rax
$LN6@PyThread_C:
  00072	48 83 7c 24 30
	00		 cmp	 QWORD PTR t$20808[rsp], 0
  00078	74 64		 je	 SHORT $LN4@PyThread_C

; 609  :             PyObject *id;
; 610  :             int stat;
; 611  :             struct _frame *frame = t->frame;

  0007a	48 8b 44 24 30	 mov	 rax, QWORD PTR t$20808[rsp]
  0007f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00083	48 89 44 24 48	 mov	 QWORD PTR frame$20815[rsp], rax

; 612  :             if (frame == NULL)

  00088	48 83 7c 24 48
	00		 cmp	 QWORD PTR frame$20815[rsp], 0
  0008e	75 02		 jne	 SHORT $LN3@PyThread_C

; 613  :                 continue;

  00090	eb d3		 jmp	 SHORT $LN5@PyThread_C
$LN3@PyThread_C:

; 614  :             id = PyLong_FromLong(t->thread_id);

  00092	48 8b 44 24 30	 mov	 rax, QWORD PTR t$20808[rsp]
  00097	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [rax+144]
  0009d	e8 00 00 00 00	 call	 PyLong_FromLong
  000a2	48 89 44 24 38	 mov	 QWORD PTR id$20813[rsp], rax

; 615  :             if (id == NULL)

  000a7	48 83 7c 24 38
	00		 cmp	 QWORD PTR id$20813[rsp], 0
  000ad	75 02		 jne	 SHORT $LN2@PyThread_C

; 616  :                 goto Fail;

  000af	eb 45		 jmp	 SHORT $Fail$20820
$LN2@PyThread_C:

; 617  :             stat = PyDict_SetItem(result, id, (PyObject *)frame);

  000b1	4c 8b 44 24 48	 mov	 r8, QWORD PTR frame$20815[rsp]
  000b6	48 8b 54 24 38	 mov	 rdx, QWORD PTR id$20813[rsp]
  000bb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000c0	e8 00 00 00 00	 call	 PyDict_SetItem
  000c5	89 44 24 40	 mov	 DWORD PTR stat$20814[rsp], eax

; 618  :             Py_DECREF(id);

  000c9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR id$20813[rsp]
  000ce	e8 00 00 00 00	 call	 _Py_DecRef

; 619  :             if (stat < 0)

  000d3	83 7c 24 40 00	 cmp	 DWORD PTR stat$20814[rsp], 0
  000d8	7d 02		 jge	 SHORT $LN1@PyThread_C

; 620  :                 goto Fail;

  000da	eb 1a		 jmp	 SHORT $Fail$20820
$LN1@PyThread_C:

; 621  :         }

  000dc	eb 87		 jmp	 SHORT $LN5@PyThread_C
$LN4@PyThread_C:

; 622  :     }

  000de	e9 59 ff ff ff	 jmp	 $LN8@PyThread_C
$LN7@PyThread_C:

; 623  :     HEAD_UNLOCK();

  000e3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  000ea	e8 00 00 00 00	 call	 PyThread_release_lock

; 624  :     return result;

  000ef	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  000f4	eb 18		 jmp	 SHORT $LN11@PyThread_C
$Fail$20820:

; 625  : 
; 626  :  Fail:
; 627  :     HEAD_UNLOCK();

  000f6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR head_mutex
  000fd	e8 00 00 00 00	 call	 PyThread_release_lock

; 628  :     Py_DECREF(result);

  00102	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00107	e8 00 00 00 00	 call	 _Py_DecRef

; 629  :     return NULL;

  0010c	33 c0		 xor	 eax, eax
$LN11@PyThread_C:

; 630  : }

  0010e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00112	c3		 ret	 0
_PyThread_CurrentFrames ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DC@MPILPHGD@?$AAt?$AA?9?$AA?$DO?$AAg?$AAi?$AAl?$AAs?$AAt?$AAa?$AAt?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FG@GHLNBACJ@?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA_?$AAg?$AAe?$AAt?$AA_?$AAk?$AAe?$AAy?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CI?$AAa?$AAu?$AAt?$AAo?$AAT?$AAL?$AAS?$AAk?$AAe@ ; `string'
PUBLIC	??_C@_0BN@ODJKKAJF@Could?5not?5allocate?5TLS?5entry?$AA@ ; `string'
PUBLIC	??_C@_1O@IKFFAHBC@?$AAi?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AA?$AA@ ; `string'
PUBLIC	_PyGILState_Init
EXTRN	PyThread_create_key:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGILState_Init DD imagerel $LN8
	DD	imagerel $LN8+203
	DD	imagerel $unwind$_PyGILState_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGILState_Init DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_1DC@MPILPHGD@?$AAt?$AA?9?$AA?$DO?$AAg?$AAi?$AAl?$AAs?$AAt?$AAa?$AAt?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@MPILPHGD@?$AAt?$AA?9?$AA?$DO?$AAg?$AAi?$AAl?$AAs?$AAt?$AAa?$AAt?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 't'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'i', 00H, 'l', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@GHLNBACJ@?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA_?$AAg?$AAe?$AAt?$AA_?$AAk?$AAe?$AAy?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CI?$AAa?$AAu?$AAt?$AAo?$AAT?$AAL?$AAS?$AAk?$AAe@
CONST	SEGMENT
??_C@_1FG@GHLNBACJ@?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA_?$AAg?$AAe?$AAt?$AA_?$AAk?$AAe?$AAy?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CI?$AAa?$AAu?$AAt?$AAo?$AAT?$AAL?$AAS?$AAk?$AAe@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'd', 00H, '_', 00H, 'g', 00H, 'e', 00H, 't', 00H, '_', 00H, 'k'
	DB	00H, 'e', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, '(', 00H, 'a', 00H, 'u', 00H, 't', 00H, 'o'
	DB	00H, 'T', 00H, 'L', 00H, 'S', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ODJKKAJF@Could?5not?5allocate?5TLS?5entry?$AA@
CONST	SEGMENT
??_C@_0BN@ODJKKAJF@Could?5not?5allocate?5TLS?5entry?$AA@ DB 'Could not al'
	DB	'locate TLS entry', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@IKFFAHBC@?$AAi?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1O@IKFFAHBC@?$AAi?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AA?$AA@ DB 'i', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 't', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyGILState_Init
_TEXT	SEGMENT
i$ = 48
t$ = 56
_PyGILState_Init PROC					; COMDAT

; 656  : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 657  :     assert(i && t); /* must init with valid states */

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR i$[rsp], 0
  00014	74 08		 je	 SHORT $LN4@PyGILState
  00016	48 83 7c 24 38
	00		 cmp	 QWORD PTR t$[rsp], 0
  0001c	75 1c		 jne	 SHORT $LN5@PyGILState
$LN4@PyGILState:
  0001e	41 b8 91 02 00
	00		 mov	 r8d, 657		; 00000291H
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@IKFFAHBC@?$AAi?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AA?$AA@
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00038	33 c0		 xor	 eax, eax
$LN5@PyGILState:

; 658  :     autoTLSkey = PyThread_create_key();

  0003a	e8 00 00 00 00	 call	 PyThread_create_key
  0003f	89 05 00 00 00
	00		 mov	 DWORD PTR autoTLSkey, eax

; 659  :     if (autoTLSkey == -1)

  00045	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR autoTLSkey, -1
  0004c	75 0c		 jne	 SHORT $LN1@PyGILState

; 660  :         Py_FatalError("Could not allocate TLS entry");

  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@ODJKKAJF@Could?5not?5allocate?5TLS?5entry?$AA@
  00055	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyGILState:

; 661  :     autoInterpreterState = i;

  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  0005f	48 89 05 00 00
	00 00		 mov	 QWORD PTR autoInterpreterState, rax

; 662  :     assert(PyThread_get_key_value(autoTLSkey) == NULL);

  00066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  0006c	e8 00 00 00 00	 call	 PyThread_get_key_value
  00071	48 85 c0	 test	 rax, rax
  00074	74 1c		 je	 SHORT $LN6@PyGILState
  00076	41 b8 96 02 00
	00		 mov	 r8d, 662		; 00000296H
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FG@GHLNBACJ@?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA_?$AAg?$AAe?$AAt?$AA_?$AAk?$AAe?$AAy?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CI?$AAa?$AAu?$AAt?$AAo?$AAT?$AAL?$AAS?$AAk?$AAe@
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00090	33 c0		 xor	 eax, eax
$LN6@PyGILState:

; 663  :     assert(t->gilstate_counter == 0);

  00092	48 8b 44 24 38	 mov	 rax, QWORD PTR t$[rsp]
  00097	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [rax+132], 0
  0009e	74 1c		 je	 SHORT $LN7@PyGILState
  000a0	41 b8 97 02 00
	00		 mov	 r8d, 663		; 00000297H
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@MPILPHGD@?$AAt?$AA?9?$AA?$DO?$AAg?$AAi?$AAl?$AAs?$AAt?$AAa?$AAt?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ba	33 c0		 xor	 eax, eax
$LN7@PyGILState:

; 664  : 
; 665  :     _PyGILState_NoteThreadState(t);

  000bc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR t$[rsp]
  000c1	e8 00 00 00 00	 call	 _PyGILState_NoteThreadState

; 666  : }

  000c6	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ca	c3		 ret	 0
_PyGILState_Init ENDP
_TEXT	ENDS
PUBLIC	_PyGILState_Fini
EXTRN	PyThread_delete_key:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGILState_Fini DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$_PyGILState_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGILState_Fini DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyGILState_Fini
_TEXT	SEGMENT
_PyGILState_Fini PROC					; COMDAT

; 670  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 671  :     PyThread_delete_key(autoTLSkey);

  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  0000a	e8 00 00 00 00	 call	 PyThread_delete_key

; 672  :     autoInterpreterState = NULL;

  0000f	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR autoInterpreterState, 0

; 673  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
_PyGILState_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@IEEAKDBK@Couldn?8t?5create?5autoTLSkey?5mappi@ ; `string'
PUBLIC	_PyGILState_Reinit
EXTRN	PyThread_set_key_value:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGILState_Reinit DD imagerel $LN5
	DD	imagerel $LN5+102
	DD	imagerel $unwind$_PyGILState_Reinit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGILState_Reinit DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CD@IEEAKDBK@Couldn?8t?5create?5autoTLSkey?5mappi@
CONST	SEGMENT
??_C@_0CD@IEEAKDBK@Couldn?8t?5create?5autoTLSkey?5mappi@ DB 'Couldn''t cr'
	DB	'eate autoTLSkey mapping', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyGILState_Reinit
_TEXT	SEGMENT
tstate$ = 32
_PyGILState_Reinit PROC					; COMDAT

; 681  : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 682  :     PyThreadState *tstate = PyGILState_GetThisThreadState();

  00004	e8 00 00 00 00	 call	 PyGILState_GetThisThreadState
  00009	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 683  :     PyThread_delete_key(autoTLSkey);

  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00014	e8 00 00 00 00	 call	 PyThread_delete_key

; 684  :     if ((autoTLSkey = PyThread_create_key()) == -1)

  00019	e8 00 00 00 00	 call	 PyThread_create_key
  0001e	89 05 00 00 00
	00		 mov	 DWORD PTR autoTLSkey, eax
  00024	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR autoTLSkey, -1
  0002b	75 0c		 jne	 SHORT $LN2@PyGILState@2

; 685  :         Py_FatalError("Could not allocate TLS entry");

  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@ODJKKAJF@Could?5not?5allocate?5TLS?5entry?$AA@
  00034	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PyGILState@2:

; 686  : 
; 687  :     /* If the thread had an associated auto thread state, reassociate it with
; 688  :      * the new key. */
; 689  :     if (tstate && PyThread_set_key_value(autoTLSkey, (void *)tstate) < 0)

  00039	48 83 7c 24 20
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  0003f	74 20		 je	 SHORT $LN1@PyGILState@2
  00041	48 8b 54 24 20	 mov	 rdx, QWORD PTR tstate$[rsp]
  00046	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  0004c	e8 00 00 00 00	 call	 PyThread_set_key_value
  00051	85 c0		 test	 eax, eax
  00053	7d 0c		 jge	 SHORT $LN1@PyGILState@2

; 690  :         Py_FatalError("Couldn't create autoTLSkey mapping");

  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@IEEAKDBK@Couldn?8t?5create?5autoTLSkey?5mappi@
  0005c	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyGILState@2:

; 691  : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
_PyGILState_Reinit ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGILState_NoteThreadState DD imagerel _PyGILState_NoteThreadState
	DD	imagerel _PyGILState_NoteThreadState+73
	DD	imagerel $unwind$_PyGILState_NoteThreadState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGILState_NoteThreadState DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyGILState_NoteThreadState
_TEXT	SEGMENT
tstate$ = 48
_PyGILState_NoteThreadState PROC			; COMDAT

; 700  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 701  :     /* If autoTLSkey isn't initialized, this must be the very first
; 702  :        threadstate created in Py_Initialize().  Don't do anything for now
; 703  :        (we'll be back here when _PyGILState_Init is called). */
; 704  :     if (!autoInterpreterState)

  00009	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR autoInterpreterState, 0
  00011	75 02		 jne	 SHORT $LN2@PyGILState@3

; 705  :         return;

  00013	eb 2f		 jmp	 SHORT $LN3@PyGILState@3
$LN2@PyGILState@3:

; 706  : 
; 707  :     /* Stick the thread state for this thread in thread local storage.
; 708  : 
; 709  :        The only situation where you can legitimately have more than one
; 710  :        thread state for an OS level thread is when there are multiple
; 711  :        interpreters, when:
; 712  : 
; 713  :            a) You shouldn't really be using the PyGILState_ APIs anyway,
; 714  :           and:
; 715  : 
; 716  :            b) The slightly odd way PyThread_set_key_value works (see
; 717  :           comments by its implementation) means that the first thread
; 718  :           state created for that given OS level thread will "win",
; 719  :           which seems reasonable behaviour.
; 720  :     */
; 721  :     if (PyThread_set_key_value(autoTLSkey, (void *)tstate) < 0)

  00015	48 8b 54 24 30	 mov	 rdx, QWORD PTR tstate$[rsp]
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00020	e8 00 00 00 00	 call	 PyThread_set_key_value
  00025	85 c0		 test	 eax, eax
  00027	7d 0c		 jge	 SHORT $LN1@PyGILState@3

; 722  :         Py_FatalError("Couldn't create autoTLSkey mapping");

  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@IEEAKDBK@Couldn?8t?5create?5autoTLSkey?5mappi@
  00030	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyGILState@3:

; 723  : 
; 724  :     /* PyGILState_Release must not try to delete this thread state. */
; 725  :     tstate->gilstate_counter = 1;

  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  0003a	c7 80 84 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+132], 1
$LN3@PyGILState@3:

; 726  : }

  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	c3		 ret	 0
_PyGILState_NoteThreadState ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyGILState_GetThisThreadState DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$PyGILState_GetThisThreadState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGILState_GetThisThreadState DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyGILState_GetThisThreadState
_TEXT	SEGMENT
PyGILState_GetThisThreadState PROC			; COMDAT

; 731  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 732  :     if (autoInterpreterState == NULL)

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR autoInterpreterState, 0
  0000c	75 04		 jne	 SHORT $LN1@PyGILState@4

; 733  :         return NULL;

  0000e	33 c0		 xor	 eax, eax
  00010	eb 0b		 jmp	 SHORT $LN2@PyGILState@4
$LN1@PyGILState@4:

; 734  :     return (PyThreadState *)PyThread_get_key_value(autoTLSkey);

  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00018	e8 00 00 00 00	 call	 PyThread_get_key_value
$LN2@PyGILState@4:

; 735  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
PyGILState_GetThisThreadState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@FFMKDLNJ@Couldn?8t?5create?5thread?9state?5for@ ; `string'
PUBLIC	??_C@_1CK@EPMOKJED@?$AAa?$AAu?$AAt?$AAo?$AAI?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	PyGILState_Ensure
EXTRN	PyEval_RestoreThread:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyGILState_Ensure DD imagerel $LN10
	DD	imagerel $LN10+217
	DD	imagerel $unwind$PyGILState_Ensure
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGILState_Ensure DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0CM@FFMKDLNJ@Couldn?8t?5create?5thread?9state?5for@
CONST	SEGMENT
??_C@_0CM@FFMKDLNJ@Couldn?8t?5create?5thread?9state?5for@ DB 'Couldn''t c'
	DB	'reate thread-state for new thread', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@EPMOKJED@?$AAa?$AAu?$AAt?$AAo?$AAI?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EPMOKJED@?$AAa?$AAu?$AAt?$AAo?$AAI?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AA@ DB 'a'
	DB	00H, 'u', 00H, 't', 00H, 'o', 00H, 'I', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyGILState_Ensure
_TEXT	SEGMENT
current$ = 32
tcur$ = 40
tv85 = 48
PyGILState_Ensure PROC					; COMDAT

; 739  : {

$LN10:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 740  :     int current;
; 741  :     PyThreadState *tcur;
; 742  :     /* Note that we do not auto-init Python here - apart from
; 743  :        potential races with 2 threads auto-initializing, pep-311
; 744  :        spells out other issues.  Embedders are expected to have
; 745  :        called Py_Initialize() and usually PyEval_InitThreads().
; 746  :     */
; 747  :     assert(autoInterpreterState); /* Py_Initialize() hasn't been called! */

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR autoInterpreterState, 0
  0000c	75 1c		 jne	 SHORT $LN7@PyGILState@5
  0000e	41 b8 eb 02 00
	00		 mov	 r8d, 747		; 000002ebH
  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@EPMOKJED@?$AAa?$AAu?$AAt?$AAo?$AAI?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00028	33 c0		 xor	 eax, eax
$LN7@PyGILState@5:

; 748  :     tcur = (PyThreadState *)PyThread_get_key_value(autoTLSkey);

  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  00030	e8 00 00 00 00	 call	 PyThread_get_key_value
  00035	48 89 44 24 28	 mov	 QWORD PTR tcur$[rsp], rax

; 749  :     if (tcur == NULL) {

  0003a	48 83 7c 24 28
	00		 cmp	 QWORD PTR tcur$[rsp], 0
  00040	75 3e		 jne	 SHORT $LN4@PyGILState@5

; 750  :         /* Create a new thread state for this thread */
; 751  :         tcur = PyThreadState_New(autoInterpreterState);

  00042	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR autoInterpreterState
  00049	e8 00 00 00 00	 call	 PyThreadState_New
  0004e	48 89 44 24 28	 mov	 QWORD PTR tcur$[rsp], rax

; 752  :         if (tcur == NULL)

  00053	48 83 7c 24 28
	00		 cmp	 QWORD PTR tcur$[rsp], 0
  00059	75 0c		 jne	 SHORT $LN3@PyGILState@5

; 753  :             Py_FatalError("Couldn't create thread-state for new thread");

  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@FFMKDLNJ@Couldn?8t?5create?5thread?9state?5for@
  00062	e8 00 00 00 00	 call	 Py_FatalError
$LN3@PyGILState@5:

; 754  :         /* This is our thread state!  We'll need to delete it in the
; 755  :            matching call to PyGILState_Release(). */
; 756  :         tcur->gilstate_counter = 0;

  00067	48 8b 44 24 28	 mov	 rax, QWORD PTR tcur$[rsp]
  0006c	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+132], 0

; 757  :         current = 0; /* new thread state is never current */

  00076	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR current$[rsp], 0

; 758  :     }
; 759  :     else

  0007e	eb 0e		 jmp	 SHORT $LN2@PyGILState@5
$LN4@PyGILState@5:

; 760  :         current = PyThreadState_IsCurrent(tcur);

  00080	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tcur$[rsp]
  00085	e8 00 00 00 00	 call	 PyThreadState_IsCurrent
  0008a	89 44 24 20	 mov	 DWORD PTR current$[rsp], eax
$LN2@PyGILState@5:

; 761  :     if (current == 0)

  0008e	83 7c 24 20 00	 cmp	 DWORD PTR current$[rsp], 0
  00093	75 0a		 jne	 SHORT $LN1@PyGILState@5

; 762  :         PyEval_RestoreThread(tcur);

  00095	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tcur$[rsp]
  0009a	e8 00 00 00 00	 call	 PyEval_RestoreThread
$LN1@PyGILState@5:

; 763  :     /* Update our counter in the thread-state - no need for locks:
; 764  :        - tcur will remain valid as we hold the GIL.
; 765  :        - the counter is safe as we are the only thread "allowed"
; 766  :          to modify this value
; 767  :     */
; 768  :     ++tcur->gilstate_counter;

  0009f	48 8b 44 24 28	 mov	 rax, QWORD PTR tcur$[rsp]
  000a4	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [rax+132]
  000aa	ff c0		 inc	 eax
  000ac	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tcur$[rsp]
  000b1	89 81 84 00 00
	00		 mov	 DWORD PTR [rcx+132], eax

; 769  :     return current ? PyGILState_LOCKED : PyGILState_UNLOCKED;

  000b7	83 7c 24 20 00	 cmp	 DWORD PTR current$[rsp], 0
  000bc	74 0a		 je	 SHORT $LN8@PyGILState@5
  000be	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
  000c6	eb 08		 jmp	 SHORT $LN9@PyGILState@5
$LN8@PyGILState@5:
  000c8	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv85[rsp], 1
$LN9@PyGILState@5:
  000d0	8b 44 24 30	 mov	 eax, DWORD PTR tv85[rsp]

; 770  : }

  000d4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d8	c3		 ret	 0
PyGILState_Ensure ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FA@OBDKBOKM@?$AAP?$AAy?$AAG?$AAI?$AAL?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAG?$AAe?$AAt?$AAT?$AAh?$AAi?$AAs?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyThreadState_IsCurrent DD imagerel PyThreadState_IsCurrent
	DD	imagerel PyThreadState_IsCurrent+90
	DD	imagerel $unwind$PyThreadState_IsCurrent
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyThreadState_IsCurrent DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1FA@OBDKBOKM@?$AAP?$AAy?$AAG?$AAI?$AAL?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAG?$AAe?$AAt?$AAT?$AAh?$AAi?$AAs?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN@
CONST	SEGMENT
??_C@_1FA@OBDKBOKM@?$AAP?$AAy?$AAG?$AAI?$AAL?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAG?$AAe?$AAt?$AAT?$AAh?$AAi?$AAs?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN@ DB 'P'
	DB	00H, 'y', 00H, 'G', 00H, 'I', 00H, 'L', 00H, 'S', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, '_', 00H, 'G', 00H, 'e', 00H, 't'
	DB	00H, 'T', 00H, 'h', 00H, 'i', 00H, 's', 00H, 'T', 00H, 'h', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, '(', 00H, ')', 00H, '=', 00H, '=', 00H
	DB	't', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyThreadState_IsCurrent
_TEXT	SEGMENT
tv71 = 32
tstate$ = 64
PyThreadState_IsCurrent PROC				; COMDAT

; 645  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 646  :     /* Must be the tstate for this thread */
; 647  :     assert(PyGILState_GetThisThreadState()==tstate);

  00009	e8 00 00 00 00	 call	 PyGILState_GetThisThreadState
  0000e	48 3b 44 24 40	 cmp	 rax, QWORD PTR tstate$[rsp]
  00013	74 1c		 je	 SHORT $LN3@PyThreadSt@9
  00015	41 b8 87 02 00
	00		 mov	 r8d, 647		; 00000287H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FA@OBDKBOKM@?$AAP?$AAy?$AAG?$AAI?$AAL?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAG?$AAe?$AAt?$AAT?$AAh?$AAi?$AAs?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN@
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002f	33 c0		 xor	 eax, eax
$LN3@PyThreadSt@9:

; 648  :     return tstate == _Py_atomic_load_relaxed(&_PyThreadState_Current);

  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
  00038	48 39 44 24 40	 cmp	 QWORD PTR tstate$[rsp], rax
  0003d	75 0a		 jne	 SHORT $LN4@PyThreadSt@9
  0003f	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  00047	eb 08		 jmp	 SHORT $LN5@PyThreadSt@9
$LN4@PyThreadSt@9:
  00049	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN5@PyThreadSt@9:
  00051	8b 44 24 20	 mov	 eax, DWORD PTR tv71[rsp]

; 649  : }

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
PyThreadState_IsCurrent ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EA@JKMMMGFN@?$AAo?$AAl?$AAd?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAG?$AAI?$AAL?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAU?$AAN?$AAL?$AAO?$AAC?$AAK?$AAE?$AAD?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@KDNIJGFB@?$AAt?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAg?$AAi?$AAl?$AAs?$AAt?$AAa?$AAt?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@JFCDHOBA@?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAI?$AAs?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AAt?$AAc?$AAu?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DB@OENECCGK@This?5thread?5state?5must?5be?5curren@ ; `string'
PUBLIC	??_C@_0EB@DNGILOPL@auto?9releasing?5thread?9state?0?5but@ ; `string'
PUBLIC	PyGILState_Release
EXTRN	PyEval_SaveThread:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyGILState_Release DD imagerel $LN11
	DD	imagerel $LN11+261
	DD	imagerel $unwind$PyGILState_Release
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGILState_Release DD 010801H
	DD	06208H
xdata	ENDS
;	COMDAT ??_C@_1EA@JKMMMGFN@?$AAo?$AAl?$AAd?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAG?$AAI?$AAL?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAU?$AAN?$AAL?$AAO?$AAC?$AAK?$AAE?$AAD?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@JKMMMGFN@?$AAo?$AAl?$AAd?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAG?$AAI?$AAL?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAU?$AAN?$AAL?$AAO?$AAC?$AAK?$AAE?$AAD?$AA?$AA@ DB 'o'
	DB	00H, 'l', 00H, 'd', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'y'
	DB	00H, 'G', 00H, 'I', 00H, 'L', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'U', 00H, 'N', 00H, 'L', 00H, 'O'
	DB	00H, 'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@KDNIJGFB@?$AAt?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAg?$AAi?$AAl?$AAs?$AAt?$AAa?$AAt?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@KDNIJGFB@?$AAt?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAg?$AAi?$AAl?$AAs?$AAt?$AAa?$AAt?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 't'
	DB	00H, 'c', 00H, 'u', 00H, 'r', 00H, '-', 00H, '>', 00H, 'g', 00H
	DB	'i', 00H, 'l', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@JFCDHOBA@?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAI?$AAs?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AAt?$AAc?$AAu?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@JFCDHOBA@?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAI?$AAs?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AAt?$AAc?$AAu?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'd', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '_'
	DB	00H, 'I', 00H, 's', 00H, 'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, '(', 00H, 't', 00H, 'c', 00H, 'u'
	DB	00H, 'r', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OENECCGK@This?5thread?5state?5must?5be?5curren@
CONST	SEGMENT
??_C@_0DB@OENECCGK@This?5thread?5state?5must?5be?5curren@ DB 'This thread'
	DB	' state must be current when releasing', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DNGILOPL@auto?9releasing?5thread?9state?0?5but@
CONST	SEGMENT
??_C@_0EB@DNGILOPL@auto?9releasing?5thread?9state?0?5but@ DB 'auto-releas'
	DB	'ing thread-state, but no thread-state for this thread', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyGILState_Release
_TEXT	SEGMENT
tcur$ = 32
oldstate$ = 64
PyGILState_Release PROC					; COMDAT

; 774  : {

$LN11:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 775  :     PyThreadState *tcur = (PyThreadState *)PyThread_get_key_value(
; 776  :                                                             autoTLSkey);

  00008	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR autoTLSkey
  0000e	e8 00 00 00 00	 call	 PyThread_get_key_value
  00013	48 89 44 24 20	 mov	 QWORD PTR tcur$[rsp], rax

; 777  :     if (tcur == NULL)

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR tcur$[rsp], 0
  0001e	75 0c		 jne	 SHORT $LN5@PyGILState@6

; 778  :         Py_FatalError("auto-releasing thread-state, "
; 779  :                       "but no thread-state for this thread");

  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EB@DNGILOPL@auto?9releasing?5thread?9state?0?5but@
  00027	e8 00 00 00 00	 call	 Py_FatalError
$LN5@PyGILState@6:

; 780  :     /* We must hold the GIL and have our thread state current */
; 781  :     /* XXX - remove the check - the assert should be fine,
; 782  :        but while this is very new (April 2003), the extra check
; 783  :        by release-only users can't hurt.
; 784  :     */
; 785  :     if (! PyThreadState_IsCurrent(tcur))

  0002c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tcur$[rsp]
  00031	e8 00 00 00 00	 call	 PyThreadState_IsCurrent
  00036	85 c0		 test	 eax, eax
  00038	75 0c		 jne	 SHORT $LN4@PyGILState@6

; 786  :         Py_FatalError("This thread state must be current when releasing");

  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@OENECCGK@This?5thread?5state?5must?5be?5curren@
  00041	e8 00 00 00 00	 call	 Py_FatalError
$LN4@PyGILState@6:

; 787  :     assert(PyThreadState_IsCurrent(tcur));

  00046	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tcur$[rsp]
  0004b	e8 00 00 00 00	 call	 PyThreadState_IsCurrent
  00050	85 c0		 test	 eax, eax
  00052	75 1c		 jne	 SHORT $LN8@PyGILState@6
  00054	41 b8 13 03 00
	00		 mov	 r8d, 787		; 00000313H
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@JFCDHOBA@?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAI?$AAs?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AAt?$AAc?$AAu?$AAr?$AA?$CJ?$AA?$AA@
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006e	33 c0		 xor	 eax, eax
$LN8@PyGILState@6:

; 788  :     --tcur->gilstate_counter;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR tcur$[rsp]
  00075	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [rax+132]
  0007b	ff c8		 dec	 eax
  0007d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tcur$[rsp]
  00082	89 81 84 00 00
	00		 mov	 DWORD PTR [rcx+132], eax

; 789  :     assert(tcur->gilstate_counter >= 0); /* illegal counter value */

  00088	48 8b 44 24 20	 mov	 rax, QWORD PTR tcur$[rsp]
  0008d	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [rax+132], 0
  00094	7d 1c		 jge	 SHORT $LN9@PyGILState@6
  00096	41 b8 15 03 00
	00		 mov	 r8d, 789		; 00000315H
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@KDNIJGFB@?$AAt?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAg?$AAi?$AAl?$AAs?$AAt?$AAa?$AAt?$AAe?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b0	33 c0		 xor	 eax, eax
$LN9@PyGILState@6:

; 790  : 
; 791  :     /* If we're going to destroy this thread-state, we must
; 792  :      * clear it while the GIL is held, as destructors may run.
; 793  :      */
; 794  :     if (tcur->gilstate_counter == 0) {

  000b2	48 8b 44 24 20	 mov	 rax, QWORD PTR tcur$[rsp]
  000b7	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [rax+132], 0
  000be	75 34		 jne	 SHORT $LN3@PyGILState@6

; 795  :         /* can't have been locked when we created it */
; 796  :         assert(oldstate == PyGILState_UNLOCKED);

  000c0	83 7c 24 40 01	 cmp	 DWORD PTR oldstate$[rsp], 1
  000c5	74 1c		 je	 SHORT $LN10@PyGILState@6
  000c7	41 b8 1c 03 00
	00		 mov	 r8d, 796		; 0000031cH
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@BBEJAPJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?4?$AAc?$AA?$AA@
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@JKMMMGFN@?$AAo?$AAl?$AAd?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAG?$AAI?$AAL?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAU?$AAN?$AAL?$AAO?$AAC?$AAK?$AAE?$AAD?$AA?$AA@
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e1	33 c0		 xor	 eax, eax
$LN10@PyGILState@6:

; 797  :         PyThreadState_Clear(tcur);

  000e3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tcur$[rsp]
  000e8	e8 00 00 00 00	 call	 PyThreadState_Clear

; 798  :         /* Delete the thread-state.  Note this releases the GIL too!
; 799  :          * It's vital that the GIL be held here, to avoid shutdown
; 800  :          * races; see bugs 225673 and 1061968 (that nasty bug has a
; 801  :          * habit of coming back).
; 802  :          */
; 803  :         PyThreadState_DeleteCurrent();

  000ed	e8 00 00 00 00	 call	 PyThreadState_DeleteCurrent
  000f2	eb 0c		 jmp	 SHORT $LN2@PyGILState@6
$LN3@PyGILState@6:

; 804  :     }
; 805  :     /* Release the lock if necessary */
; 806  :     else if (oldstate == PyGILState_UNLOCKED)

  000f4	83 7c 24 40 01	 cmp	 DWORD PTR oldstate$[rsp], 1
  000f9	75 05		 jne	 SHORT $LN1@PyGILState@6

; 807  :         PyEval_SaveThread();

  000fb	e8 00 00 00 00	 call	 PyEval_SaveThread
$LN1@PyGILState@6:
$LN2@PyGILState@6:

; 808  : }

  00100	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00104	c3		 ret	 0
PyGILState_Release ENDP
_TEXT	ENDS
END
