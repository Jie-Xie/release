; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08LHJFAFGD@operator?$AA@			; `string'
PUBLIC	??_C@_0BG@EMEAEPLI@operator?4methodcaller?$AA@	; `string'
PUBLIC	??_C@_0BE@CNOAMID@operator?4attrgetter?$AA@	; `string'
PUBLIC	??_C@_0BE@KGDNJIHD@operator?4itemgetter?$AA@	; `string'
PUBLIC	??_C@_0BA@CCHAPNEK@_compare_digest?$AA@		; `string'
PUBLIC	??_C@_06DHPPIHIH@__ge__?$AA@			; `string'
PUBLIC	??_C@_0BK@FPMEPBOP@ge?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DO?$DNb?4?$AA@ ; `string'
PUBLIC	??_C@_02FFKMGEKK@ge?$AA@			; `string'
PUBLIC	??_C@_06NPFKLHHN@__gt__?$AA@			; `string'
PUBLIC	??_C@_0BJ@NIMNJJGI@gt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DOb?4?$AA@ ; `string'
PUBLIC	??_C@_02GHFEHLK@gt?$AA@				; `string'
PUBLIC	??_C@_06DKOPOFPG@__ne__?$AA@			; `string'
PUBLIC	??_C@_0BK@PEAHKJH@ne?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$CB?$DNb?4?$AA@ ; `string'
PUBLIC	??_C@_02FKHNFPCF@ne?$AA@			; `string'
PUBLIC	??_C@_06JCEEBECP@__eq__?$AA@			; `string'
PUBLIC	??_C@_0BK@KOIEKNMF@eq?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DN?$DNb?4?$AA@ ; `string'
PUBLIC	??_C@_02HIIGGHJB@eq?$AA@			; `string'
PUBLIC	??_C@_06EACPLGJG@__le__?$AA@			; `string'
PUBLIC	??_C@_0BK@ICHKGCML@le?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DM?$DNb?4?$AA@ ; `string'
PUBLIC	??_C@_02FJPJILEL@le?$AA@			; `string'
PUBLIC	??_C@_06KIIKIGGM@__lt__?$AA@			; `string'
PUBLIC	??_C@_0BJ@GLCCHEAH@lt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DMb?4?$AA@ ; `string'
PUBLIC	??_C@_02KCAKIFL@lt?$AA@				; `string'
PUBLIC	??_C@_08JKFONAME@__ipow__?$AA@			; `string'
PUBLIC	??_C@_0CD@GFFFGOPL@a?5?$DN?5ipow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?$DN?5@ ; `string'
PUBLIC	??_C@_04OFDFNOGO@ipow?$AA@			; `string'
PUBLIC	??_C@_07HPCNAFMM@__pow__?$AA@			; `string'
PUBLIC	??_C@_0BN@NBBILNGN@pow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03JGHBODFD@pow?$AA@			; `string'
PUBLIC	??_C@_0M@CEPPLJAO@__delitem__?$AA@		; `string'
PUBLIC	??_C@_0CD@LEKNCCCN@delitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5del?5a?$FLb@ ; `string'
PUBLIC	??_C@_07IGPEBMGC@delitem?$AA@			; `string'
PUBLIC	??_C@_0M@EONDAJAB@__setitem__?$AA@		; `string'
PUBLIC	??_C@_0CG@NIJAIGAO@setitem?$CIa?0?5b?0?5c?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN@ ; `string'
PUBLIC	??_C@_07BPAPKEKG@setitem?$AA@			; `string'
PUBLIC	??_C@_0M@GAJGCIJD@__getitem__?$AA@		; `string'
PUBLIC	??_C@_0BP@FOGACANC@getitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN?4?$AA@ ; `string'
PUBLIC	??_C@_07OHPOJLHH@getitem?$AA@			; `string'
PUBLIC	??_C@_0M@CPHBPOKP@__iconcat__?$AA@		; `string'
PUBLIC	??_C@_0DM@IIMJEMCO@a?5?$DN?5iconcat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL@ ; `string'
PUBLIC	??_C@_07BLFCPMNF@iconcat?$AA@			; `string'
PUBLIC	??_C@_0L@BECBLOCO@__concat__?$AA@		; `string'
PUBLIC	??_C@_0DG@BBGMCNCL@concat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?0?5f@ ; `string'
PUBLIC	??_C@_06CMLIEHFC@concat?$AA@			; `string'
PUBLIC	??_C@_07GMCKKGKN@__ior__?$AA@			; `string'
PUBLIC	??_C@_0CB@BDPNKJBP@a?5?$DN?5ior?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?$DN?5b?4@ ; `string'
PUBLIC	??_C@_03MGBHAPAD@ior?$AA@			; `string'
PUBLIC	??_C@_08EBNDKCJL@__ixor__?$AA@			; `string'
PUBLIC	??_C@_0CC@FHKCFHJB@a?5?$DN?5ixor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?$DN?5b@ ; `string'
PUBLIC	??_C@_04FNPGACME@ixor?$AA@			; `string'
PUBLIC	??_C@_08CNBINADL@__iand__?$AA@			; `string'
PUBLIC	??_C@_0CC@BIFIECDB@a?5?$DN?5iand?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?$DN?5b@ ; `string'
PUBLIC	??_C@_04GNLNMFDB@iand?$AA@			; `string'
PUBLIC	??_C@_0M@MPLFEGLF@__irshift__?$AA@		; `string'
PUBLIC	??_C@_0CG@NHPOICPP@a?5?$DN?5irshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO@ ; `string'
PUBLIC	??_C@_07ELFNKKAO@irshift?$AA@			; `string'
PUBLIC	??_C@_0M@KLLHNPFG@__ilshift__?$AA@		; `string'
PUBLIC	??_C@_0CG@OKINCJM@a?5?$DN?5ilshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM@ ; `string'
PUBLIC	??_C@_07HMLMENJN@ilshift?$AA@			; `string'
PUBLIC	??_C@_08GHLKDJPA@__imod__?$AA@			; `string'
PUBLIC	??_C@_0CC@GGMLGKPB@a?5?$DN?5imod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?$DN?5b@ ; `string'
PUBLIC	??_C@_04CGKJBALO@imod?$AA@			; `string'
PUBLIC	??_C@_0N@LEBOILNI@__itruediv__?$AA@		; `string'
PUBLIC	??_C@_0CF@GLKGJJHG@a?5?$DN?5itruediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5@ ; `string'
PUBLIC	??_C@_08DKMBKIAC@itruediv?$AA@			; `string'
PUBLIC	??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@		; `string'
PUBLIC	??_C@_0CI@FPDCBEOO@a?5?$DN?5ifloordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a@ ; `string'
PUBLIC	??_C@_09BENDIJEO@ifloordiv?$AA@			; `string'
PUBLIC	??_C@_08IIFOJODM@__imul__?$AA@			; `string'
PUBLIC	??_C@_0CC@EAIEMNKM@a?5?$DN?5imul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$DN?5b@ ; `string'
PUBLIC	??_C@_04PPMBLMBA@imul?$AA@			; `string'
PUBLIC	??_C@_08FBFNIKOE@__isub__?$AA@			; `string'
PUBLIC	??_C@_0CC@JKCPOOGH@a?5?$DN?5isub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?$DN?5b@ ; `string'
PUBLIC	??_C@_04NBIELBDC@isub?$AA@			; `string'
PUBLIC	??_C@_08GHKIMIJK@__iadd__?$AA@			; `string'
PUBLIC	??_C@_0CC@KKACEDDN@a?5?$DN?5iadd?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?$DN?5b@ ; `string'
PUBLIC	??_C@_04GACKEAOH@iadd?$AA@			; `string'
PUBLIC	??_C@_06MKEBKDGA@__or__?$AA@			; `string'
PUBLIC	??_C@_0BM@NDAOEIHO@or_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03NHKIDKBD@or_?$AA@			; `string'
PUBLIC	??_C@_07KEKAHHJD@__xor__?$AA@			; `string'
PUBLIC	??_C@_0BM@PDBHLGAG@xor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03COLCDPPJ@xor?$AA@			; `string'
PUBLIC	??_C@_07MIGLAFDD@__and__?$AA@			; `string'
PUBLIC	??_C@_0BN@KEHNNOM@and_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?5b?4?$AA@ ; `string'
PUBLIC	??_C@_04DEILPEEI@and_?$AA@			; `string'
PUBLIC	??_C@_07FEEEMJMJ@__not__?$AA@			; `string'
PUBLIC	??_C@_0BK@JLOIIDCO@not_?$CIa?$CJ?5?9?9?5Same?5as?5not?5a?4?$AA@ ; `string'
PUBLIC	??_C@_04BCEBKHIM@not_?$AA@			; `string'
PUBLIC	??_C@_0L@PEOFAGDE@__rshift__?$AA@		; `string'
PUBLIC	??_C@_0CA@GEBKPAJK@rshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO?$DO?5b?4?$AA@ ; `string'
PUBLIC	??_C@_06HMLHBBIJ@rshift?$AA@			; `string'
PUBLIC	??_C@_0L@JAOHJPNH@__lshift__?$AA@		; `string'
PUBLIC	??_C@_0CA@OEBAEPHD@lshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM?$DM?5b?4?$AA@ ; `string'
PUBLIC	??_C@_06ELFGPGBK@lshift?$AA@			; `string'
PUBLIC	??_C@_0L@OIINOIMI@__invert__?$AA@		; `string'
PUBLIC	??_C@_0BJ@PKLNHGAH@invert?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@ ; `string'
PUBLIC	??_C@_06CIAPFFAP@invert?$AA@			; `string'
PUBLIC	??_C@_07NOCIBIEK@__inv__?$AA@			; `string'
PUBLIC	??_C@_0BG@DLLGEIOG@inv?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@ ; `string'
PUBLIC	??_C@_03KDLJKADA@inv?$AA@			; `string'
PUBLIC	??_C@_07MAFFIHBE@__abs__?$AA@			; `string'
PUBLIC	??_C@_0BK@IOGGIPNN@abs?$CIa?$CJ?5?9?9?5Same?5as?5abs?$CIa?$CJ?4?$AA@ ; `string'
PUBLIC	??_C@_03BCGAIFPO@abs?$AA@			; `string'
PUBLIC	??_C@_07PAEPJCJL@__pos__?$AA@			; `string'
PUBLIC	??_C@_0BG@HEKJOMHG@pos?$CIa?$CJ?5?9?9?5Same?5as?5?$CLa?4?$AA@ ; `string'
PUBLIC	??_C@_03PCBNCGFH@pos?$AA@			; `string'
PUBLIC	??_C@_07FMFICJBJ@__neg__?$AA@			; `string'
PUBLIC	??_C@_0BG@FMJKMNBM@neg?$CIa?$CJ?5?9?9?5Same?5as?5?9a?4?$AA@ ; `string'
PUBLIC	??_C@_03GBOCFEHI@neg?$AA@			; `string'
PUBLIC	??_C@_07ICMJOMPI@__mod__?$AA@			; `string'
PUBLIC	??_C@_0BM@PEKEDJKI@mod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03FFONCNID@mod?$AA@			; `string'
PUBLIC	??_C@_0M@COJKGICO@__truediv__?$AA@		; `string'
PUBLIC	??_C@_0CA@CADKHFMC@truediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?5b?4?$AA@ ; `string'
PUBLIC	??_C@_07EJCKFEDK@truediv?$AA@			; `string'
PUBLIC	??_C@_0N@BBCJEIH@__floordiv__?$AA@		; `string'
PUBLIC	??_C@_0CC@DEHEOIJ@floordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?1?5b@ ; `string'
PUBLIC	??_C@_08DMKCNKCM@floordiv?$AA@			; `string'
PUBLIC	??_C@_07GNCNELDE@__mul__?$AA@			; `string'
PUBLIC	??_C@_0BM@GCDDMIJI@mul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03IMIFIBCN@mul?$AA@			; `string'
PUBLIC	??_C@_07LECOFPOM@__sub__?$AA@			; `string'
PUBLIC	??_C@_0BM@KJKINDPD@sub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03KCMAIMAP@sub?$AA@			; `string'
PUBLIC	??_C@_07ICNLBNJC@__add__?$AA@			; `string'
PUBLIC	??_C@_0BM@DBPKGABM@add?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03BDGOHNNK@add?$AA@			; `string'
PUBLIC	??_C@_09NLFDFNNH@__index__?$AA@			; `string'
PUBLIC	??_C@_0CC@BIKLHAKK@index?$CIa?$CJ?5?9?9?5Same?5as?5a?4__index__?$CI@ ; `string'
PUBLIC	??_C@_05FKHKFDID@index?$AA@			; `string'
PUBLIC	??_C@_0CE@PAAJOOMJ@is_not?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5not@ ; `string'
PUBLIC	??_C@_06JIGJLOBN@is_not?$AA@			; `string'
PUBLIC	??_C@_0BN@EIIILEPK@is_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5b?4?$AA@ ; `string'
PUBLIC	??_C@_03PDABAPPI@is_?$AA@			; `string'
PUBLIC	??_C@_0DL@DEHBHGPO@countOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5numb@ ; `string'
PUBLIC	??_C@_07GIJGNPIL@countOf?$AA@			; `string'
PUBLIC	??_C@_0DD@GINKOOGK@indexOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5firs@ ; `string'
PUBLIC	??_C@_07KKKNJHGA@indexOf?$AA@			; `string'
PUBLIC	??_C@_0N@MCIOADFH@__contains__?$AA@		; `string'
PUBLIC	??_C@_0DL@MAEHMEEG@contains?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5b?5in?5a@ ; `string'
PUBLIC	??_C@_08JKMOLGCD@contains?$AA@			; `string'
PUBLIC	??_C@_0DH@EOBJDMEA@truth?$CIa?$CJ?5?9?9?5Return?5True?5if?5a?5is?5@ ; `string'
PUBLIC	??_C@_05PPKBNDKJ@truth?$AA@			; `string'
EXTRN	PyObject_GenericGetAttr:PROC
;	COMDAT ??_C@_08LHJFAFGD@operator?$AA@
CONST	SEGMENT
??_C@_08LHJFAFGD@operator?$AA@ DB 'operator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EMEAEPLI@operator?4methodcaller?$AA@
CONST	SEGMENT
??_C@_0BG@EMEAEPLI@operator?4methodcaller?$AA@ DB 'operator.methodcaller', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CNOAMID@operator?4attrgetter?$AA@
CONST	SEGMENT
??_C@_0BE@CNOAMID@operator?4attrgetter?$AA@ DB 'operator.attrgetter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KGDNJIHD@operator?4itemgetter?$AA@
CONST	SEGMENT
??_C@_0BE@KGDNJIHD@operator?4itemgetter?$AA@ DB 'operator.itemgetter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CCHAPNEK@_compare_digest?$AA@
CONST	SEGMENT
??_C@_0BA@CCHAPNEK@_compare_digest?$AA@ DB '_compare_digest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHPPIHIH@__ge__?$AA@
CONST	SEGMENT
??_C@_06DHPPIHIH@__ge__?$AA@ DB '__ge__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FPMEPBOP@ge?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DO?$DNb?4?$AA@
CONST	SEGMENT
??_C@_0BK@FPMEPBOP@ge?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DO?$DNb?4?$AA@ DB 'g'
	DB	'e(a, b) -- Same as a>=b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FFKMGEKK@ge?$AA@
CONST	SEGMENT
??_C@_02FFKMGEKK@ge?$AA@ DB 'ge', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPFKLHHN@__gt__?$AA@
CONST	SEGMENT
??_C@_06NPFKLHHN@__gt__?$AA@ DB '__gt__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NIMNJJGI@gt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DOb?4?$AA@
CONST	SEGMENT
??_C@_0BJ@NIMNJJGI@gt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DOb?4?$AA@ DB 'gt'
	DB	'(a, b) -- Same as a>b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GHFEHLK@gt?$AA@
CONST	SEGMENT
??_C@_02GHFEHLK@gt?$AA@ DB 'gt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKOPOFPG@__ne__?$AA@
CONST	SEGMENT
??_C@_06DKOPOFPG@__ne__?$AA@ DB '__ne__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PEAHKJH@ne?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$CB?$DNb?4?$AA@
CONST	SEGMENT
??_C@_0BK@PEAHKJH@ne?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$CB?$DNb?4?$AA@ DB 'n'
	DB	'e(a, b) -- Same as a!=b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FKHNFPCF@ne?$AA@
CONST	SEGMENT
??_C@_02FKHNFPCF@ne?$AA@ DB 'ne', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCEEBECP@__eq__?$AA@
CONST	SEGMENT
??_C@_06JCEEBECP@__eq__?$AA@ DB '__eq__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KOIEKNMF@eq?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DN?$DNb?4?$AA@
CONST	SEGMENT
??_C@_0BK@KOIEKNMF@eq?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DN?$DNb?4?$AA@ DB 'e'
	DB	'q(a, b) -- Same as a==b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIIGGHJB@eq?$AA@
CONST	SEGMENT
??_C@_02HIIGGHJB@eq?$AA@ DB 'eq', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06EACPLGJG@__le__?$AA@
CONST	SEGMENT
??_C@_06EACPLGJG@__le__?$AA@ DB '__le__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ICHKGCML@le?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DM?$DNb?4?$AA@
CONST	SEGMENT
??_C@_0BK@ICHKGCML@le?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DM?$DNb?4?$AA@ DB 'l'
	DB	'e(a, b) -- Same as a<=b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FJPJILEL@le?$AA@
CONST	SEGMENT
??_C@_02FJPJILEL@le?$AA@ DB 'le', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06KIIKIGGM@__lt__?$AA@
CONST	SEGMENT
??_C@_06KIIKIGGM@__lt__?$AA@ DB '__lt__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GLCCHEAH@lt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DMb?4?$AA@
CONST	SEGMENT
??_C@_0BJ@GLCCHEAH@lt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DMb?4?$AA@ DB 'lt'
	DB	'(a, b) -- Same as a<b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCAKIFL@lt?$AA@
CONST	SEGMENT
??_C@_02KCAKIFL@lt?$AA@ DB 'lt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKFONAME@__ipow__?$AA@
CONST	SEGMENT
??_C@_08JKFONAME@__ipow__?$AA@ DB '__ipow__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GFFFGOPL@a?5?$DN?5ipow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?$DN?5@
CONST	SEGMENT
??_C@_0CD@GFFFGOPL@a?5?$DN?5ipow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?$DN?5@ DB 'a'
	DB	' = ipow(a, b) -- Same as a **= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OFDFNOGO@ipow?$AA@
CONST	SEGMENT
??_C@_04OFDFNOGO@ipow?$AA@ DB 'ipow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HPCNAFMM@__pow__?$AA@
CONST	SEGMENT
??_C@_07HPCNAFMM@__pow__?$AA@ DB '__pow__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NBBILNGN@pow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?5b?4?$AA@
CONST	SEGMENT
??_C@_0BN@NBBILNGN@pow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?5b?4?$AA@ DB 'p'
	DB	'ow(a, b) -- Same as a ** b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JGHBODFD@pow?$AA@
CONST	SEGMENT
??_C@_03JGHBODFD@pow?$AA@ DB 'pow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CEPPLJAO@__delitem__?$AA@
CONST	SEGMENT
??_C@_0M@CEPPLJAO@__delitem__?$AA@ DB '__delitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LEKNCCCN@delitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5del?5a?$FLb@
CONST	SEGMENT
??_C@_0CD@LEKNCCCN@delitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5del?5a?$FLb@ DB 'd'
	DB	'elitem(a, b) -- Same as del a[b].', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IGPEBMGC@delitem?$AA@
CONST	SEGMENT
??_C@_07IGPEBMGC@delitem?$AA@ DB 'delitem', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EONDAJAB@__setitem__?$AA@
CONST	SEGMENT
??_C@_0M@EONDAJAB@__setitem__?$AA@ DB '__setitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NIJAIGAO@setitem?$CIa?0?5b?0?5c?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN@
CONST	SEGMENT
??_C@_0CG@NIJAIGAO@setitem?$CIa?0?5b?0?5c?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN@ DB 's'
	DB	'etitem(a, b, c) -- Same as a[b] = c.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BPAPKEKG@setitem?$AA@
CONST	SEGMENT
??_C@_07BPAPKEKG@setitem?$AA@ DB 'setitem', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAJGCIJD@__getitem__?$AA@
CONST	SEGMENT
??_C@_0M@GAJGCIJD@__getitem__?$AA@ DB '__getitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FOGACANC@getitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN?4?$AA@
CONST	SEGMENT
??_C@_0BP@FOGACANC@getitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN?4?$AA@ DB 'g'
	DB	'etitem(a, b) -- Same as a[b].', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHPOJLHH@getitem?$AA@
CONST	SEGMENT
??_C@_07OHPOJLHH@getitem?$AA@ DB 'getitem', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CPHBPOKP@__iconcat__?$AA@
CONST	SEGMENT
??_C@_0M@CPHBPOKP@__iconcat__?$AA@ DB '__iconcat__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@IIMJEMCO@a?5?$DN?5iconcat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL@
CONST	SEGMENT
??_C@_0DM@IIMJEMCO@a?5?$DN?5iconcat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL@ DB 'a'
	DB	' = iconcat(a, b) -- Same as a += b, for a and b sequences.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BLFCPMNF@iconcat?$AA@
CONST	SEGMENT
??_C@_07BLFCPMNF@iconcat?$AA@ DB 'iconcat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BECBLOCO@__concat__?$AA@
CONST	SEGMENT
??_C@_0L@BECBLOCO@__concat__?$AA@ DB '__concat__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@BBGMCNCL@concat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?0?5f@
CONST	SEGMENT
??_C@_0DG@BBGMCNCL@concat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?0?5f@ DB 'c'
	DB	'oncat(a, b) -- Same as a + b, for a and b sequences.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMLIEHFC@concat?$AA@
CONST	SEGMENT
??_C@_06CMLIEHFC@concat?$AA@ DB 'concat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMCKKGKN@__ior__?$AA@
CONST	SEGMENT
??_C@_07GMCKKGKN@__ior__?$AA@ DB '__ior__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BDPNKJBP@a?5?$DN?5ior?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?$DN?5b?4@
CONST	SEGMENT
??_C@_0CB@BDPNKJBP@a?5?$DN?5ior?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?$DN?5b?4@ DB 'a'
	DB	' = ior(a, b) -- Same as a |= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGBHAPAD@ior?$AA@
CONST	SEGMENT
??_C@_03MGBHAPAD@ior?$AA@ DB 'ior', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EBNDKCJL@__ixor__?$AA@
CONST	SEGMENT
??_C@_08EBNDKCJL@__ixor__?$AA@ DB '__ixor__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FHKCFHJB@a?5?$DN?5ixor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?$DN?5b@
CONST	SEGMENT
??_C@_0CC@FHKCFHJB@a?5?$DN?5ixor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?$DN?5b@ DB 'a'
	DB	' = ixor(a, b) -- Same as a ^= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNPGACME@ixor?$AA@
CONST	SEGMENT
??_C@_04FNPGACME@ixor?$AA@ DB 'ixor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CNBINADL@__iand__?$AA@
CONST	SEGMENT
??_C@_08CNBINADL@__iand__?$AA@ DB '__iand__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BIFIECDB@a?5?$DN?5iand?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?$DN?5b@
CONST	SEGMENT
??_C@_0CC@BIFIECDB@a?5?$DN?5iand?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?$DN?5b@ DB 'a'
	DB	' = iand(a, b) -- Same as a &= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GNLNMFDB@iand?$AA@
CONST	SEGMENT
??_C@_04GNLNMFDB@iand?$AA@ DB 'iand', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPLFEGLF@__irshift__?$AA@
CONST	SEGMENT
??_C@_0M@MPLFEGLF@__irshift__?$AA@ DB '__irshift__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NHPOICPP@a?5?$DN?5irshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO@
CONST	SEGMENT
??_C@_0CG@NHPOICPP@a?5?$DN?5irshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO@ DB 'a'
	DB	' = irshift(a, b) -- Same as a >>= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELFNKKAO@irshift?$AA@
CONST	SEGMENT
??_C@_07ELFNKKAO@irshift?$AA@ DB 'irshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KLLHNPFG@__ilshift__?$AA@
CONST	SEGMENT
??_C@_0M@KLLHNPFG@__ilshift__?$AA@ DB '__ilshift__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OKINCJM@a?5?$DN?5ilshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM@
CONST	SEGMENT
??_C@_0CG@OKINCJM@a?5?$DN?5ilshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM@ DB 'a'
	DB	' = ilshift(a, b) -- Same as a <<= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HMLMENJN@ilshift?$AA@
CONST	SEGMENT
??_C@_07HMLMENJN@ilshift?$AA@ DB 'ilshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHLKDJPA@__imod__?$AA@
CONST	SEGMENT
??_C@_08GHLKDJPA@__imod__?$AA@ DB '__imod__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GGMLGKPB@a?5?$DN?5imod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?$DN?5b@
CONST	SEGMENT
??_C@_0CC@GGMLGKPB@a?5?$DN?5imod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?$DN?5b@ DB 'a'
	DB	' = imod(a, b) -- Same as a %= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGKJBALO@imod?$AA@
CONST	SEGMENT
??_C@_04CGKJBALO@imod?$AA@ DB 'imod', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEBOILNI@__itruediv__?$AA@
CONST	SEGMENT
??_C@_0N@LEBOILNI@__itruediv__?$AA@ DB '__itruediv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GLKGJJHG@a?5?$DN?5itruediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5@
CONST	SEGMENT
??_C@_0CF@GLKGJJHG@a?5?$DN?5itruediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5@ DB 'a'
	DB	' = itruediv(a, b) -- Same as a /= b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DKMBKIAC@itruediv?$AA@
CONST	SEGMENT
??_C@_08DKMBKIAC@itruediv?$AA@ DB 'itruediv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@
CONST	SEGMENT
??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@ DB '__ifloordiv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FPDCBEOO@a?5?$DN?5ifloordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a@
CONST	SEGMENT
??_C@_0CI@FPDCBEOO@a?5?$DN?5ifloordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a@ DB 'a'
	DB	' = ifloordiv(a, b) -- Same as a //= b.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BENDIJEO@ifloordiv?$AA@
CONST	SEGMENT
??_C@_09BENDIJEO@ifloordiv?$AA@ DB 'ifloordiv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IIFOJODM@__imul__?$AA@
CONST	SEGMENT
??_C@_08IIFOJODM@__imul__?$AA@ DB '__imul__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EAIEMNKM@a?5?$DN?5imul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$DN?5b@
CONST	SEGMENT
??_C@_0CC@EAIEMNKM@a?5?$DN?5imul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$DN?5b@ DB 'a'
	DB	' = imul(a, b) -- Same as a *= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPMBLMBA@imul?$AA@
CONST	SEGMENT
??_C@_04PPMBLMBA@imul?$AA@ DB 'imul', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBFNIKOE@__isub__?$AA@
CONST	SEGMENT
??_C@_08FBFNIKOE@__isub__?$AA@ DB '__isub__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JKCPOOGH@a?5?$DN?5isub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?$DN?5b@
CONST	SEGMENT
??_C@_0CC@JKCPOOGH@a?5?$DN?5isub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?$DN?5b@ DB 'a'
	DB	' = isub(a, b) -- Same as a -= b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NBIELBDC@isub?$AA@
CONST	SEGMENT
??_C@_04NBIELBDC@isub?$AA@ DB 'isub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHKIMIJK@__iadd__?$AA@
CONST	SEGMENT
??_C@_08GHKIMIJK@__iadd__?$AA@ DB '__iadd__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KKACEDDN@a?5?$DN?5iadd?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?$DN?5b@
CONST	SEGMENT
??_C@_0CC@KKACEDDN@a?5?$DN?5iadd?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?$DN?5b@ DB 'a'
	DB	' = iadd(a, b) -- Same as a += b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GACKEAOH@iadd?$AA@
CONST	SEGMENT
??_C@_04GACKEAOH@iadd?$AA@ DB 'iadd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MKEBKDGA@__or__?$AA@
CONST	SEGMENT
??_C@_06MKEBKDGA@__or__?$AA@ DB '__or__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NDAOEIHO@or_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@NDAOEIHO@or_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?5b?4?$AA@ DB 'o'
	DB	'r_(a, b) -- Same as a | b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NHKIDKBD@or_?$AA@
CONST	SEGMENT
??_C@_03NHKIDKBD@or_?$AA@ DB 'or_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KEKAHHJD@__xor__?$AA@
CONST	SEGMENT
??_C@_07KEKAHHJD@__xor__?$AA@ DB '__xor__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PDBHLGAG@xor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@PDBHLGAG@xor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?5b?4?$AA@ DB 'x'
	DB	'or(a, b) -- Same as a ^ b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03COLCDPPJ@xor?$AA@
CONST	SEGMENT
??_C@_03COLCDPPJ@xor?$AA@ DB 'xor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MIGLAFDD@__and__?$AA@
CONST	SEGMENT
??_C@_07MIGLAFDD@__and__?$AA@ DB '__and__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KEHNNOM@and_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?5b?4?$AA@
CONST	SEGMENT
??_C@_0BN@KEHNNOM@and_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?5b?4?$AA@ DB 'a'
	DB	'nd_(a, b) -- Same as a & b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DEILPEEI@and_?$AA@
CONST	SEGMENT
??_C@_04DEILPEEI@and_?$AA@ DB 'and_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FEEEMJMJ@__not__?$AA@
CONST	SEGMENT
??_C@_07FEEEMJMJ@__not__?$AA@ DB '__not__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JLOIIDCO@not_?$CIa?$CJ?5?9?9?5Same?5as?5not?5a?4?$AA@
CONST	SEGMENT
??_C@_0BK@JLOIIDCO@not_?$CIa?$CJ?5?9?9?5Same?5as?5not?5a?4?$AA@ DB 'not_('
	DB	'a) -- Same as not a.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCEBKHIM@not_?$AA@
CONST	SEGMENT
??_C@_04BCEBKHIM@not_?$AA@ DB 'not_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PEOFAGDE@__rshift__?$AA@
CONST	SEGMENT
??_C@_0L@PEOFAGDE@__rshift__?$AA@ DB '__rshift__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GEBKPAJK@rshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO?$DO?5b?4?$AA@
CONST	SEGMENT
??_C@_0CA@GEBKPAJK@rshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO?$DO?5b?4?$AA@ DB 'r'
	DB	'shift(a, b) -- Same as a >> b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMLHBBIJ@rshift?$AA@
CONST	SEGMENT
??_C@_06HMLHBBIJ@rshift?$AA@ DB 'rshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JAOHJPNH@__lshift__?$AA@
CONST	SEGMENT
??_C@_0L@JAOHJPNH@__lshift__?$AA@ DB '__lshift__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OEBAEPHD@lshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM?$DM?5b?4?$AA@
CONST	SEGMENT
??_C@_0CA@OEBAEPHD@lshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM?$DM?5b?4?$AA@ DB 'l'
	DB	'shift(a, b) -- Same as a << b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELFGPGBK@lshift?$AA@
CONST	SEGMENT
??_C@_06ELFGPGBK@lshift?$AA@ DB 'lshift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OIINOIMI@__invert__?$AA@
CONST	SEGMENT
??_C@_0L@OIINOIMI@__invert__?$AA@ DB '__invert__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PKLNHGAH@invert?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
CONST	SEGMENT
??_C@_0BJ@PKLNHGAH@invert?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@ DB 'inve'
	DB	'rt(a) -- Same as ~a.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CIAPFFAP@invert?$AA@
CONST	SEGMENT
??_C@_06CIAPFFAP@invert?$AA@ DB 'invert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NOCIBIEK@__inv__?$AA@
CONST	SEGMENT
??_C@_07NOCIBIEK@__inv__?$AA@ DB '__inv__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DLLGEIOG@inv?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
CONST	SEGMENT
??_C@_0BG@DLLGEIOG@inv?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@ DB 'inv(a) '
	DB	'-- Same as ~a.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KDLJKADA@inv?$AA@
CONST	SEGMENT
??_C@_03KDLJKADA@inv?$AA@ DB 'inv', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFFIHBE@__abs__?$AA@
CONST	SEGMENT
??_C@_07MAFFIHBE@__abs__?$AA@ DB '__abs__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IOGGIPNN@abs?$CIa?$CJ?5?9?9?5Same?5as?5abs?$CIa?$CJ?4?$AA@
CONST	SEGMENT
??_C@_0BK@IOGGIPNN@abs?$CIa?$CJ?5?9?9?5Same?5as?5abs?$CIa?$CJ?4?$AA@ DB 'a'
	DB	'bs(a) -- Same as abs(a).', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BCGAIFPO@abs?$AA@
CONST	SEGMENT
??_C@_03BCGAIFPO@abs?$AA@ DB 'abs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PAEPJCJL@__pos__?$AA@
CONST	SEGMENT
??_C@_07PAEPJCJL@__pos__?$AA@ DB '__pos__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HEKJOMHG@pos?$CIa?$CJ?5?9?9?5Same?5as?5?$CLa?4?$AA@
CONST	SEGMENT
??_C@_0BG@HEKJOMHG@pos?$CIa?$CJ?5?9?9?5Same?5as?5?$CLa?4?$AA@ DB 'pos(a) '
	DB	'-- Same as +a.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PCBNCGFH@pos?$AA@
CONST	SEGMENT
??_C@_03PCBNCGFH@pos?$AA@ DB 'pos', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FMFICJBJ@__neg__?$AA@
CONST	SEGMENT
??_C@_07FMFICJBJ@__neg__?$AA@ DB '__neg__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMJKMNBM@neg?$CIa?$CJ?5?9?9?5Same?5as?5?9a?4?$AA@
CONST	SEGMENT
??_C@_0BG@FMJKMNBM@neg?$CIa?$CJ?5?9?9?5Same?5as?5?9a?4?$AA@ DB 'neg(a) --'
	DB	' Same as -a.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03GBOCFEHI@neg?$AA@
CONST	SEGMENT
??_C@_03GBOCFEHI@neg?$AA@ DB 'neg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICMJOMPI@__mod__?$AA@
CONST	SEGMENT
??_C@_07ICMJOMPI@__mod__?$AA@ DB '__mod__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PEKEDJKI@mod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@PEKEDJKI@mod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?5b?4?$AA@ DB 'm'
	DB	'od(a, b) -- Same as a % b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFONCNID@mod?$AA@
CONST	SEGMENT
??_C@_03FFONCNID@mod?$AA@ DB 'mod', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@COJKGICO@__truediv__?$AA@
CONST	SEGMENT
??_C@_0M@COJKGICO@__truediv__?$AA@ DB '__truediv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CADKHFMC@truediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?5b?4?$AA@
CONST	SEGMENT
??_C@_0CA@CADKHFMC@truediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?5b?4?$AA@ DB 't'
	DB	'ruediv(a, b) -- Same as a / b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EJCKFEDK@truediv?$AA@
CONST	SEGMENT
??_C@_07EJCKFEDK@truediv?$AA@ DB 'truediv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BBCJEIH@__floordiv__?$AA@
CONST	SEGMENT
??_C@_0N@BBCJEIH@__floordiv__?$AA@ DB '__floordiv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DEHEOIJ@floordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?1?5b@
CONST	SEGMENT
??_C@_0CC@DEHEOIJ@floordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?1?5b@ DB 'f'
	DB	'loordiv(a, b) -- Same as a // b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DMKCNKCM@floordiv?$AA@
CONST	SEGMENT
??_C@_08DMKCNKCM@floordiv?$AA@ DB 'floordiv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GNCNELDE@__mul__?$AA@
CONST	SEGMENT
??_C@_07GNCNELDE@__mul__?$AA@ DB '__mul__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GCDDMIJI@mul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@GCDDMIJI@mul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?5b?4?$AA@ DB 'm'
	DB	'ul(a, b) -- Same as a * b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IMIFIBCN@mul?$AA@
CONST	SEGMENT
??_C@_03IMIFIBCN@mul?$AA@ DB 'mul', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LECOFPOM@__sub__?$AA@
CONST	SEGMENT
??_C@_07LECOFPOM@__sub__?$AA@ DB '__sub__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KJKINDPD@sub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@KJKINDPD@sub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?5b?4?$AA@ DB 's'
	DB	'ub(a, b) -- Same as a - b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCMAIMAP@sub?$AA@
CONST	SEGMENT
??_C@_03KCMAIMAP@sub?$AA@ DB 'sub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICNLBNJC@__add__?$AA@
CONST	SEGMENT
??_C@_07ICNLBNJC@__add__?$AA@ DB '__add__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DBPKGABM@add?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?4?$AA@
CONST	SEGMENT
??_C@_0BM@DBPKGABM@add?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?4?$AA@ DB 'a'
	DB	'dd(a, b) -- Same as a + b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BDGOHNNK@add?$AA@
CONST	SEGMENT
??_C@_03BDGOHNNK@add?$AA@ DB 'add', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLFDFNNH@__index__?$AA@
CONST	SEGMENT
??_C@_09NLFDFNNH@__index__?$AA@ DB '__index__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BIKLHAKK@index?$CIa?$CJ?5?9?9?5Same?5as?5a?4__index__?$CI@
CONST	SEGMENT
??_C@_0CC@BIKLHAKK@index?$CIa?$CJ?5?9?9?5Same?5as?5a?4__index__?$CI@ DB 'i'
	DB	'ndex(a) -- Same as a.__index__()', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKHKFDID@index?$AA@
CONST	SEGMENT
??_C@_05FKHKFDID@index?$AA@ DB 'index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PAAJOOMJ@is_not?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5not@
CONST	SEGMENT
??_C@_0CE@PAAJOOMJ@is_not?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5not@ DB 'i'
	DB	's_not(a, b) -- Same as a is not b.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JIGJLOBN@is_not?$AA@
CONST	SEGMENT
??_C@_06JIGJLOBN@is_not?$AA@ DB 'is_not', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EIIILEPK@is_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5b?4?$AA@
CONST	SEGMENT
??_C@_0BN@EIIILEPK@is_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5b?4?$AA@ DB 'i'
	DB	's_(a, b) -- Same as a is b.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PDABAPPI@is_?$AA@
CONST	SEGMENT
??_C@_03PDABAPPI@is_?$AA@ DB 'is_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@DEHBHGPO@countOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5numb@
CONST	SEGMENT
??_C@_0DL@DEHBHGPO@countOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5numb@ DB 'co'
	DB	'untOf(a, b) -- Return the number of times b occurs in a.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GIJGNPIL@countOf?$AA@
CONST	SEGMENT
??_C@_07GIJGNPIL@countOf?$AA@ DB 'countOf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GINKOOGK@indexOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5firs@
CONST	SEGMENT
??_C@_0DD@GINKOOGK@indexOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5firs@ DB 'in'
	DB	'dexOf(a, b) -- Return the first index of b in a.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KKKNJHGA@indexOf?$AA@
CONST	SEGMENT
??_C@_07KKKNJHGA@indexOf?$AA@ DB 'indexOf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MCIOADFH@__contains__?$AA@
CONST	SEGMENT
??_C@_0N@MCIOADFH@__contains__?$AA@ DB '__contains__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@MAEHMEEG@contains?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5b?5in?5a@
CONST	SEGMENT
??_C@_0DL@MAEHMEEG@contains?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5b?5in?5a@ DB 'c'
	DB	'ontains(a, b) -- Same as b in a (note reversed operands).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKMOLGCD@contains?$AA@
CONST	SEGMENT
??_C@_08JKMOLGCD@contains?$AA@ DB 'contains', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@EOBJDMEA@truth?$CIa?$CJ?5?9?9?5Return?5True?5if?5a?5is?5@
CONST	SEGMENT
??_C@_0DH@EOBJDMEA@truth?$CIa?$CJ?5?9?9?5Return?5True?5if?5a?5is?5@ DB 't'
	DB	'ruth(a) -- Return True if a is true, False otherwise.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPKBNDKJ@truth?$AA@
CONST	SEGMENT
??_C@_05PPKBNDKJ@truth?$AA@ DB 'truth', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
operator_doc DB	'Operator interface.', 0aH, 0aH, 'This module exports a s'
	DB	'et of functions implemented in C corresponding', 0aH, 'to the'
	DB	' intrinsic operators of Python.  For example, operator.add(x,'
	DB	' y)', 0aH, 'is equivalent to the expression x+y.  The functio'
	DB	'n names are those', 0aH, 'used for special methods; variants '
	DB	'without leading and trailing', 0aH, '''__'' are also provided'
	DB	' for convenience.', 00H
	ORG $+3
compare_digest__doc__ DB 'compare_digest(a, b) -> bool', 0aH, 0aH, 'Retur'
	DB	'n ''a == b''.  This function uses an approach designed to pre'
	DB	'vent', 0aH, 'timing analysis, making it appropriate for crypt'
	DB	'ography.', 0aH, 'a and b must both be of the same type: eithe'
	DB	'r str (ASCII only),', 0aH, 'or any type that supports the buf'
	DB	'fer protocol (e.g. bytes).', 0aH, 0aH, 'Note: If a and b are '
	DB	'of different lengths, or if an error occurs,', 0aH, 'a timing'
	DB	' attack could theoretically reveal information about the', 0aH
	DB	'types and lengths of a and b--but not their values.', 0aH, 00H
	ORG $+15
operator_methods DQ FLAT:??_C@_05PPKBNDKJ@truth?$AA@
	DQ	FLAT:truth
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0DH@EOBJDMEA@truth?$CIa?$CJ?5?9?9?5Return?5True?5if?5a?5is?5@
	DQ	FLAT:??_C@_08JKMOLGCD@contains?$AA@
	DQ	FLAT:op_contains
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DL@MAEHMEEG@contains?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5b?5in?5a@
	DQ	FLAT:??_C@_0N@MCIOADFH@__contains__?$AA@
	DQ	FLAT:op_contains
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DL@MAEHMEEG@contains?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5b?5in?5a@
	DQ	FLAT:??_C@_07KKKNJHGA@indexOf?$AA@
	DQ	FLAT:indexOf
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DD@GINKOOGK@indexOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5firs@
	DQ	FLAT:??_C@_07GIJGNPIL@countOf?$AA@
	DQ	FLAT:countOf
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DL@DEHBHGPO@countOf?$CIa?0?5b?$CJ?5?9?9?5Return?5the?5numb@
	DQ	FLAT:??_C@_03PDABAPPI@is_?$AA@
	DQ	FLAT:is_
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BN@EIIILEPK@is_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5b?4?$AA@
	DQ	FLAT:??_C@_06JIGJLOBN@is_not?$AA@
	DQ	FLAT:is_not
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CE@PAAJOOMJ@is_not?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5is?5not@
	DQ	FLAT:??_C@_05FKHKFDID@index?$AA@
	DQ	FLAT:op_index
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0CC@BIKLHAKK@index?$CIa?$CJ?5?9?9?5Same?5as?5a?4__index__?$CI@
	DQ	FLAT:??_C@_09NLFDFNNH@__index__?$AA@
	DQ	FLAT:op_index
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0CC@BIKLHAKK@index?$CIa?$CJ?5?9?9?5Same?5as?5a?4__index__?$CI@
	DQ	FLAT:??_C@_03BDGOHNNK@add?$AA@
	DQ	FLAT:op_add
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@DBPKGABM@add?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?4?$AA@
	DQ	FLAT:??_C@_07ICNLBNJC@__add__?$AA@
	DQ	FLAT:op_add
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@DBPKGABM@add?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?4?$AA@
	DQ	FLAT:??_C@_03KCMAIMAP@sub?$AA@
	DQ	FLAT:op_sub
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@KJKINDPD@sub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?5b?4?$AA@
	DQ	FLAT:??_C@_07LECOFPOM@__sub__?$AA@
	DQ	FLAT:op_sub
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@KJKINDPD@sub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?5b?4?$AA@
	DQ	FLAT:??_C@_03IMIFIBCN@mul?$AA@
	DQ	FLAT:op_mul
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@GCDDMIJI@mul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?5b?4?$AA@
	DQ	FLAT:??_C@_07GNCNELDE@__mul__?$AA@
	DQ	FLAT:op_mul
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@GCDDMIJI@mul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?5b?4?$AA@
	DQ	FLAT:??_C@_08DMKCNKCM@floordiv?$AA@
	DQ	FLAT:op_floordiv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@DEHEOIJ@floordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?1?5b@
	DQ	FLAT:??_C@_0N@BBCJEIH@__floordiv__?$AA@
	DQ	FLAT:op_floordiv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@DEHEOIJ@floordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?1?5b@
	DQ	FLAT:??_C@_07EJCKFEDK@truediv?$AA@
	DQ	FLAT:op_truediv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@CADKHFMC@truediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?5b?4?$AA@
	DQ	FLAT:??_C@_0M@COJKGICO@__truediv__?$AA@
	DQ	FLAT:op_truediv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@CADKHFMC@truediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?1?5b?4?$AA@
	DQ	FLAT:??_C@_03FFONCNID@mod?$AA@
	DQ	FLAT:op_mod
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@PEKEDJKI@mod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?5b?4?$AA@
	DQ	FLAT:??_C@_07ICMJOMPI@__mod__?$AA@
	DQ	FLAT:op_mod
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@PEKEDJKI@mod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?5b?4?$AA@
	DQ	FLAT:??_C@_03GBOCFEHI@neg?$AA@
	DQ	FLAT:op_neg
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@FMJKMNBM@neg?$CIa?$CJ?5?9?9?5Same?5as?5?9a?4?$AA@
	DQ	FLAT:??_C@_07FMFICJBJ@__neg__?$AA@
	DQ	FLAT:op_neg
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@FMJKMNBM@neg?$CIa?$CJ?5?9?9?5Same?5as?5?9a?4?$AA@
	DQ	FLAT:??_C@_03PCBNCGFH@pos?$AA@
	DQ	FLAT:op_pos
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@HEKJOMHG@pos?$CIa?$CJ?5?9?9?5Same?5as?5?$CLa?4?$AA@
	DQ	FLAT:??_C@_07PAEPJCJL@__pos__?$AA@
	DQ	FLAT:op_pos
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@HEKJOMHG@pos?$CIa?$CJ?5?9?9?5Same?5as?5?$CLa?4?$AA@
	DQ	FLAT:??_C@_03BCGAIFPO@abs?$AA@
	DQ	FLAT:op_abs
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BK@IOGGIPNN@abs?$CIa?$CJ?5?9?9?5Same?5as?5abs?$CIa?$CJ?4?$AA@
	DQ	FLAT:??_C@_07MAFFIHBE@__abs__?$AA@
	DQ	FLAT:op_abs
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BK@IOGGIPNN@abs?$CIa?$CJ?5?9?9?5Same?5as?5abs?$CIa?$CJ?4?$AA@
	DQ	FLAT:??_C@_03KDLJKADA@inv?$AA@
	DQ	FLAT:op_inv
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@DLLGEIOG@inv?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
	DQ	FLAT:??_C@_07NOCIBIEK@__inv__?$AA@
	DQ	FLAT:op_inv
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BG@DLLGEIOG@inv?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
	DQ	FLAT:??_C@_06CIAPFFAP@invert?$AA@
	DQ	FLAT:op_invert
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@PKLNHGAH@invert?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
	DQ	FLAT:??_C@_0L@OIINOIMI@__invert__?$AA@
	DQ	FLAT:op_invert
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@PKLNHGAH@invert?$CIa?$CJ?5?9?9?5Same?5as?5?$HOa?4?$AA@
	DQ	FLAT:??_C@_06ELFGPGBK@lshift?$AA@
	DQ	FLAT:op_lshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@OEBAEPHD@lshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM?$DM?5b?4?$AA@
	DQ	FLAT:??_C@_0L@JAOHJPNH@__lshift__?$AA@
	DQ	FLAT:op_lshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@OEBAEPHD@lshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM?$DM?5b?4?$AA@
	DQ	FLAT:??_C@_06HMLHBBIJ@rshift?$AA@
	DQ	FLAT:op_rshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@GEBKPAJK@rshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO?$DO?5b?4?$AA@
	DQ	FLAT:??_C@_0L@PEOFAGDE@__rshift__?$AA@
	DQ	FLAT:op_rshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CA@GEBKPAJK@rshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO?$DO?5b?4?$AA@
	DQ	FLAT:??_C@_04BCEBKHIM@not_?$AA@
	DQ	FLAT:op_not_
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BK@JLOIIDCO@not_?$CIa?$CJ?5?9?9?5Same?5as?5not?5a?4?$AA@
	DQ	FLAT:??_C@_07FEEEMJMJ@__not__?$AA@
	DQ	FLAT:op_not_
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0BK@JLOIIDCO@not_?$CIa?$CJ?5?9?9?5Same?5as?5not?5a?4?$AA@
	DQ	FLAT:??_C@_04DEILPEEI@and_?$AA@
	DQ	FLAT:op_and_
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BN@KEHNNOM@and_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?5b?4?$AA@
	DQ	FLAT:??_C@_07MIGLAFDD@__and__?$AA@
	DQ	FLAT:op_and_
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BN@KEHNNOM@and_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?5b?4?$AA@
	DQ	FLAT:??_C@_03COLCDPPJ@xor?$AA@
	DQ	FLAT:op_xor
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@PDBHLGAG@xor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?5b?4?$AA@
	DQ	FLAT:??_C@_07KEKAHHJD@__xor__?$AA@
	DQ	FLAT:op_xor
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@PDBHLGAG@xor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?5b?4?$AA@
	DQ	FLAT:??_C@_03NHKIDKBD@or_?$AA@
	DQ	FLAT:op_or_
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@NDAOEIHO@or_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?5b?4?$AA@
	DQ	FLAT:??_C@_06MKEBKDGA@__or__?$AA@
	DQ	FLAT:op_or_
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BM@NDAOEIHO@or_?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?5b?4?$AA@
	DQ	FLAT:??_C@_04GACKEAOH@iadd?$AA@
	DQ	FLAT:op_iadd
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@KKACEDDN@a?5?$DN?5iadd?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?$DN?5b@
	DQ	FLAT:??_C@_08GHKIMIJK@__iadd__?$AA@
	DQ	FLAT:op_iadd
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@KKACEDDN@a?5?$DN?5iadd?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?$DN?5b@
	DQ	FLAT:??_C@_04NBIELBDC@isub?$AA@
	DQ	FLAT:op_isub
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@JKCPOOGH@a?5?$DN?5isub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?$DN?5b@
	DQ	FLAT:??_C@_08FBFNIKOE@__isub__?$AA@
	DQ	FLAT:op_isub
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@JKCPOOGH@a?5?$DN?5isub?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?9?$DN?5b@
	DQ	FLAT:??_C@_04PPMBLMBA@imul?$AA@
	DQ	FLAT:op_imul
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@EAIEMNKM@a?5?$DN?5imul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$DN?5b@
	DQ	FLAT:??_C@_08IIFOJODM@__imul__?$AA@
	DQ	FLAT:op_imul
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@EAIEMNKM@a?5?$DN?5imul?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$DN?5b@
	DQ	FLAT:??_C@_09BENDIJEO@ifloordiv?$AA@
	DQ	FLAT:op_ifloordiv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CI@FPDCBEOO@a?5?$DN?5ifloordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a@
	DQ	FLAT:??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@
	DQ	FLAT:op_ifloordiv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CI@FPDCBEOO@a?5?$DN?5ifloordiv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a@
	DQ	FLAT:??_C@_08DKMBKIAC@itruediv?$AA@
	DQ	FLAT:op_itruediv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CF@GLKGJJHG@a?5?$DN?5itruediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5@
	DQ	FLAT:??_C@_0N@LEBOILNI@__itruediv__?$AA@
	DQ	FLAT:op_itruediv
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CF@GLKGJJHG@a?5?$DN?5itruediv?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5@
	DQ	FLAT:??_C@_04CGKJBALO@imod?$AA@
	DQ	FLAT:op_imod
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@GGMLGKPB@a?5?$DN?5imod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?$DN?5b@
	DQ	FLAT:??_C@_08GHLKDJPA@__imod__?$AA@
	DQ	FLAT:op_imod
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@GGMLGKPB@a?5?$DN?5imod?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CF?$DN?5b@
	DQ	FLAT:??_C@_07HMLMENJN@ilshift?$AA@
	DQ	FLAT:op_ilshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@OKINCJM@a?5?$DN?5ilshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM@
	DQ	FLAT:??_C@_0M@KLLHNPFG@__ilshift__?$AA@
	DQ	FLAT:op_ilshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@OKINCJM@a?5?$DN?5ilshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DM@
	DQ	FLAT:??_C@_07ELFNKKAO@irshift?$AA@
	DQ	FLAT:op_irshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@NHPOICPP@a?5?$DN?5irshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO@
	DQ	FLAT:??_C@_0M@MPLFEGLF@__irshift__?$AA@
	DQ	FLAT:op_irshift
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@NHPOICPP@a?5?$DN?5irshift?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$DO@
	DQ	FLAT:??_C@_04GNLNMFDB@iand?$AA@
	DQ	FLAT:op_iand
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@BIFIECDB@a?5?$DN?5iand?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?$DN?5b@
	DQ	FLAT:??_C@_08CNBINADL@__iand__?$AA@
	DQ	FLAT:op_iand
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@BIFIECDB@a?5?$DN?5iand?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CG?$DN?5b@
	DQ	FLAT:??_C@_04FNPGACME@ixor?$AA@
	DQ	FLAT:op_ixor
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@FHKCFHJB@a?5?$DN?5ixor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?$DN?5b@
	DQ	FLAT:??_C@_08EBNDKCJL@__ixor__?$AA@
	DQ	FLAT:op_ixor
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CC@FHKCFHJB@a?5?$DN?5ixor?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$FO?$DN?5b@
	DQ	FLAT:??_C@_03MGBHAPAD@ior?$AA@
	DQ	FLAT:op_ior
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CB@BDPNKJBP@a?5?$DN?5ior?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?$DN?5b?4@
	DQ	FLAT:??_C@_07GMCKKGKN@__ior__?$AA@
	DQ	FLAT:op_ior
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CB@BDPNKJBP@a?5?$DN?5ior?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$HM?$DN?5b?4@
	DQ	FLAT:??_C@_06CMLIEHFC@concat?$AA@
	DQ	FLAT:op_concat
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DG@BBGMCNCL@concat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?0?5f@
	DQ	FLAT:??_C@_0L@BECBLOCO@__concat__?$AA@
	DQ	FLAT:op_concat
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DG@BBGMCNCL@concat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL?5b?0?5f@
	DQ	FLAT:??_C@_07BLFCPMNF@iconcat?$AA@
	DQ	FLAT:op_iconcat
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DM@IIMJEMCO@a?5?$DN?5iconcat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL@
	DQ	FLAT:??_C@_0M@CPHBPOKP@__iconcat__?$AA@
	DQ	FLAT:op_iconcat
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DM@IIMJEMCO@a?5?$DN?5iconcat?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CL@
	DQ	FLAT:??_C@_07OHPOJLHH@getitem?$AA@
	DQ	FLAT:op_getitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BP@FOGACANC@getitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN?4?$AA@
	DQ	FLAT:??_C@_0M@GAJGCIJD@__getitem__?$AA@
	DQ	FLAT:op_getitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BP@FOGACANC@getitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN?4?$AA@
	DQ	FLAT:??_C@_07BPAPKEKG@setitem?$AA@
	DQ	FLAT:op_setitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@NIJAIGAO@setitem?$CIa?0?5b?0?5c?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN@
	DQ	FLAT:??_C@_0M@EONDAJAB@__setitem__?$AA@
	DQ	FLAT:op_setitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CG@NIJAIGAO@setitem?$CIa?0?5b?0?5c?$CJ?5?9?9?5Same?5as?5a?$FLb?$FN@
	DQ	FLAT:??_C@_07IGPEBMGC@delitem?$AA@
	DQ	FLAT:op_delitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CD@LEKNCCCN@delitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5del?5a?$FLb@
	DQ	FLAT:??_C@_0M@CEPPLJAO@__delitem__?$AA@
	DQ	FLAT:op_delitem
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CD@LEKNCCCN@delitem?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5del?5a?$FLb@
	DQ	FLAT:??_C@_03JGHBODFD@pow?$AA@
	DQ	FLAT:op_pow
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BN@NBBILNGN@pow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?5b?4?$AA@
	DQ	FLAT:??_C@_07HPCNAFMM@__pow__?$AA@
	DQ	FLAT:op_pow
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BN@NBBILNGN@pow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?5b?4?$AA@
	DQ	FLAT:??_C@_04OFDFNOGO@ipow?$AA@
	DQ	FLAT:op_ipow
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CD@GFFFGOPL@a?5?$DN?5ipow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?$DN?5@
	DQ	FLAT:??_C@_08JKFONAME@__ipow__?$AA@
	DQ	FLAT:op_ipow
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CD@GFFFGOPL@a?5?$DN?5ipow?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?5?$CK?$CK?$DN?5@
	DQ	FLAT:??_C@_02KCAKIFL@lt?$AA@
	DQ	FLAT:op_lt
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@GLCCHEAH@lt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DMb?4?$AA@
	DQ	FLAT:??_C@_06KIIKIGGM@__lt__?$AA@
	DQ	FLAT:op_lt
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@GLCCHEAH@lt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DMb?4?$AA@
	DQ	FLAT:??_C@_02FJPJILEL@le?$AA@
	DQ	FLAT:op_le
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@ICHKGCML@le?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DM?$DNb?4?$AA@
	DQ	FLAT:??_C@_06EACPLGJG@__le__?$AA@
	DQ	FLAT:op_le
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@ICHKGCML@le?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DM?$DNb?4?$AA@
	DQ	FLAT:??_C@_02HIIGGHJB@eq?$AA@
	DQ	FLAT:op_eq
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@KOIEKNMF@eq?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DN?$DNb?4?$AA@
	DQ	FLAT:??_C@_06JCEEBECP@__eq__?$AA@
	DQ	FLAT:op_eq
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@KOIEKNMF@eq?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DN?$DNb?4?$AA@
	DQ	FLAT:??_C@_02FKHNFPCF@ne?$AA@
	DQ	FLAT:op_ne
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@PEAHKJH@ne?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$CB?$DNb?4?$AA@
	DQ	FLAT:??_C@_06DKOPOFPG@__ne__?$AA@
	DQ	FLAT:op_ne
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@PEAHKJH@ne?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$CB?$DNb?4?$AA@
	DQ	FLAT:??_C@_02GHFEHLK@gt?$AA@
	DQ	FLAT:op_gt
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@NIMNJJGI@gt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DOb?4?$AA@
	DQ	FLAT:??_C@_06NPFKLHHN@__gt__?$AA@
	DQ	FLAT:op_gt
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@NIMNJJGI@gt?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DOb?4?$AA@
	DQ	FLAT:??_C@_02FFKMGEKK@ge?$AA@
	DQ	FLAT:op_ge
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@FPMEPBOP@ge?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DO?$DNb?4?$AA@
	DQ	FLAT:??_C@_06DHPPIHIH@__ge__?$AA@
	DQ	FLAT:op_ge
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BK@FPMEPBOP@ge?$CIa?0?5b?$CJ?5?9?9?5Same?5as?5a?$DO?$DNb?4?$AA@
	DQ	FLAT:??_C@_0BA@CCHAPNEK@_compare_digest?$AA@
	DQ	FLAT:compare_digest
	DD	01H
	ORG $+4
	DQ	FLAT:compare_digest__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
itemgetter_doc DB 'itemgetter(item, ...) --> itemgetter object', 0aH, 0aH
	DB	'Return a callable object that fetches the given item(s) from '
	DB	'its operand.', 0aH, 'After f = itemgetter(2), the call f(r) r'
	DB	'eturns r[2].', 0aH, 'After g = itemgetter(2, 5, 3), the call '
	DB	'g(r) returns (r[2], r[5], r[3])', 00H
	ORG $+12
itemgetter_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BE@KGDNJIHD@operator?4itemgetter?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:itemgetter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:itemgetter_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:itemgetter_doc
	DQ	FLAT:itemgetter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:itemgetter_new
	DQ	0000000000000000H
	ORG $+64
attrgetter_doc DB 'attrgetter(attr, ...) --> attrgetter object', 0aH, 0aH
	DB	'Return a callable object that fetches the given attribute(s) '
	DB	'from its operand.', 0aH, 'After f = attrgetter(''name''), the'
	DB	' call f(r) returns r.name.', 0aH, 'After g = attrgetter(''nam'
	DB	'e'', ''date''), the call g(r) returns (r.name, r.date).', 0aH
	DB	'After h = attrgetter(''name.first'', ''name.last''), the call'
	DB	' h(r) returns', 0aH, '(r.name.first, r.name.last).', 00H
	ORG $+6
attrgetter_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BE@CNOAMID@operator?4attrgetter?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:attrgetter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:attrgetter_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:attrgetter_doc
	DQ	FLAT:attrgetter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:attrgetter_new
	DQ	0000000000000000H
	ORG $+64
methodcaller_doc DB 'methodcaller(name, ...) --> methodcaller object', 0aH
	DB	0aH, 'Return a callable object that calls the given method on '
	DB	'its operand.', 0aH, 'After f = methodcaller(''name''), the ca'
	DB	'll f(r) returns r.name().', 0aH, 'After g = methodcaller(''na'
	DB	'me'', ''date'', foo=1), the call g(r) returns', 0aH, 'r.name('
	DB	'''date'', foo=1).', 00H
	ORG $+14
methodcaller_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BG@EMEAEPLI@operator?4methodcaller?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:methodcaller_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:methodcaller_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:methodcaller_doc
	DQ	FLAT:methodcaller_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:methodcaller_new
	DQ	0000000000000000H
	ORG $+64
operatormodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08LHJFAFGD@operator?$AA@
	DQ	FLAT:operator_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:operator_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
EXTRN	PyBool_FromLong:PROC
EXTRN	PyObject_IsTrue:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\operator.c
pdata	SEGMENT
$pdata$truth DD	imagerel truth
	DD	imagerel truth+53
	DD	imagerel $unwind$truth
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$truth DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT truth
_TEXT	SEGMENT
r$ = 32
s$ = 64
a1$ = 72
truth	PROC						; COMDAT

; 68   : spami(truth            , PyObject_IsTrue)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR a1$[rsp]
  00013	e8 00 00 00 00	 call	 PyObject_IsTrue
  00018	89 44 24 20	 mov	 DWORD PTR r$[rsp], eax
  0001c	83 7c 24 20 ff	 cmp	 DWORD PTR r$[rsp], -1
  00021	75 04		 jne	 SHORT $LN1@truth
  00023	33 c0		 xor	 eax, eax
  00025	eb 09		 jmp	 SHORT $LN2@truth
$LN1@truth:
  00027	8b 4c 24 20	 mov	 ecx, DWORD PTR r$[rsp]
  0002b	e8 00 00 00 00	 call	 PyBool_FromLong
$LN2@truth:
  00030	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00034	c3		 ret	 0
truth	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06GDNJBEGP@op_add?$AA@			; `string'
EXTRN	PyNumber_Add:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_add DD imagerel op_add
	DD	imagerel op_add+91
	DD	imagerel $unwind$op_add
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_add DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_06GDNJBEGP@op_add?$AA@
CONST	SEGMENT
??_C@_06GDNJBEGP@op_add?$AA@ DB 'op_add', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_add
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_add	PROC						; COMDAT

; 69   : spam2(op_add           , PyNumber_Add)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GDNJBEGP@op_add?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_add
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_add
$LN1@op_add:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_Add
$LN2@op_add:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_add	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06NCHHOFLK@op_sub?$AA@			; `string'
EXTRN	PyNumber_Subtract:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_sub DD imagerel op_sub
	DD	imagerel op_sub+91
	DD	imagerel $unwind$op_sub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_sub DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_06NCHHOFLK@op_sub?$AA@
CONST	SEGMENT
??_C@_06NCHHOFLK@op_sub?$AA@ DB 'op_sub', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_sub
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_sub	PROC						; COMDAT

; 70   : spam2(op_sub           , PyNumber_Subtract)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NCHHOFLK@op_sub?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_sub
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_sub
$LN1@op_sub:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_Subtract
$LN2@op_sub:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_sub	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06PMDCOIJI@op_mul?$AA@			; `string'
EXTRN	PyNumber_Multiply:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_mul DD imagerel op_mul
	DD	imagerel op_mul+91
	DD	imagerel $unwind$op_mul
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_mul DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_06PMDCOIJI@op_mul?$AA@
CONST	SEGMENT
??_C@_06PMDCOIJI@op_mul?$AA@ DB 'op_mul', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_mul
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_mul	PROC						; COMDAT

; 71   : spam2(op_mul           , PyNumber_Multiply)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06PMDCOIJI@op_mul?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_mul
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_mul
$LN1@op_mul:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_Multiply
$LN2@op_mul:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_mul	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@ENIFHEKC@op_floordiv?$AA@		; `string'
EXTRN	PyNumber_FloorDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_floordiv DD imagerel op_floordiv
	DD	imagerel op_floordiv+91
	DD	imagerel $unwind$op_floordiv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_floordiv DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0M@ENIFHEKC@op_floordiv?$AA@
CONST	SEGMENT
??_C@_0M@ENIFHEKC@op_floordiv?$AA@ DB 'op_floordiv', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_floordiv
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_floordiv PROC					; COMDAT

; 72   : spam2(op_floordiv      , PyNumber_FloorDivide)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@ENIFHEKC@op_floordiv?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_floordi
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_floordi
$LN1@op_floordi:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_FloorDivide
$LN2@op_floordi:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_floordiv ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@NPABFDHO@op_truediv?$AA@		; `string'
EXTRN	PyNumber_TrueDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_truediv DD imagerel op_truediv
	DD	imagerel op_truediv+91
	DD	imagerel $unwind$op_truediv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_truediv DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0L@NPABFDHO@op_truediv?$AA@
CONST	SEGMENT
??_C@_0L@NPABFDHO@op_truediv?$AA@ DB 'op_truediv', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_truediv
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_truediv PROC						; COMDAT

; 73   : spam2(op_truediv       , PyNumber_TrueDivide)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NPABFDHO@op_truediv?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_truediv
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_truediv
$LN1@op_truediv:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_TrueDivide
$LN2@op_truediv:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_truediv ENDP
_TEXT	ENDS
PUBLIC	??_C@_06CFFKEEDG@op_mod?$AA@			; `string'
EXTRN	PyNumber_Remainder:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_mod DD imagerel op_mod
	DD	imagerel op_mod+91
	DD	imagerel $unwind$op_mod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_mod DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_06CFFKEEDG@op_mod?$AA@
CONST	SEGMENT
??_C@_06CFFKEEDG@op_mod?$AA@ DB 'op_mod', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_mod
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_mod	PROC						; COMDAT

; 74   : spam2(op_mod           , PyNumber_Remainder)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06CFFKEEDG@op_mod?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_mod
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_mod
$LN1@op_mod:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_Remainder
$LN2@op_mod:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_mod	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Negative:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_neg DD imagerel op_neg
	DD	imagerel op_neg+29
	DD	imagerel $unwind$op_neg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_neg DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT op_neg
_TEXT	SEGMENT
s$ = 48
a1$ = 56
op_neg	PROC						; COMDAT

; 75   : spam1(op_neg           , PyNumber_Negative)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR a1$[rsp]
  00013	e8 00 00 00 00	 call	 PyNumber_Negative
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
op_neg	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Positive:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_pos DD imagerel op_pos
	DD	imagerel op_pos+29
	DD	imagerel $unwind$op_pos
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_pos DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT op_pos
_TEXT	SEGMENT
s$ = 48
a1$ = 56
op_pos	PROC						; COMDAT

; 76   : spam1(op_pos           , PyNumber_Positive)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR a1$[rsp]
  00013	e8 00 00 00 00	 call	 PyNumber_Positive
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
op_pos	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Absolute:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_abs DD imagerel op_abs
	DD	imagerel op_abs+29
	DD	imagerel $unwind$op_abs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_abs DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT op_abs
_TEXT	SEGMENT
s$ = 48
a1$ = 56
op_abs	PROC						; COMDAT

; 77   : spam1(op_abs           , PyNumber_Absolute)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR a1$[rsp]
  00013	e8 00 00 00 00	 call	 PyNumber_Absolute
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
op_abs	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Invert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_inv DD imagerel op_inv
	DD	imagerel op_inv+29
	DD	imagerel $unwind$op_inv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_inv DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT op_inv
_TEXT	SEGMENT
s$ = 48
a1$ = 56
op_inv	PROC						; COMDAT

; 78   : spam1(op_inv           , PyNumber_Invert)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR a1$[rsp]
  00013	e8 00 00 00 00	 call	 PyNumber_Invert
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
op_inv	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_invert DD imagerel op_invert
	DD	imagerel op_invert+29
	DD	imagerel $unwind$op_invert
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_invert DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT op_invert
_TEXT	SEGMENT
s$ = 48
a1$ = 56
op_invert PROC						; COMDAT

; 79   : spam1(op_invert        , PyNumber_Invert)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR a1$[rsp]
  00013	e8 00 00 00 00	 call	 PyNumber_Invert
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
op_invert ENDP
_TEXT	ENDS
PUBLIC	??_C@_09GJPJDMFA@op_lshift?$AA@			; `string'
EXTRN	PyNumber_Lshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_lshift DD imagerel op_lshift
	DD	imagerel op_lshift+91
	DD	imagerel $unwind$op_lshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_lshift DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_09GJPJDMFA@op_lshift?$AA@
CONST	SEGMENT
??_C@_09GJPJDMFA@op_lshift?$AA@ DB 'op_lshift', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_lshift
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_lshift PROC						; COMDAT

; 80   : spam2(op_lshift        , PyNumber_Lshift)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09GJPJDMFA@op_lshift?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_lshift
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_lshift
$LN1@op_lshift:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_Lshift
$LN2@op_lshift:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_lshift ENDP
_TEXT	ENDS
PUBLIC	??_C@_09FOBINLMD@op_rshift?$AA@			; `string'
EXTRN	PyNumber_Rshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_rshift DD imagerel op_rshift
	DD	imagerel op_rshift+91
	DD	imagerel $unwind$op_rshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_rshift DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_09FOBINLMD@op_rshift?$AA@
CONST	SEGMENT
??_C@_09FOBINLMD@op_rshift?$AA@ DB 'op_rshift', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_rshift
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_rshift PROC						; COMDAT

; 81   : spam2(op_rshift        , PyNumber_Rshift)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09FOBINLMD@op_rshift?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_rshift
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_rshift
$LN1@op_rshift:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_Rshift
$LN2@op_rshift:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_rshift ENDP
_TEXT	ENDS
EXTRN	PyObject_Not:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_not_ DD imagerel op_not_
	DD	imagerel op_not_+53
	DD	imagerel $unwind$op_not_
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_not_ DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT op_not_
_TEXT	SEGMENT
r$ = 32
s$ = 64
a1$ = 72
op_not_	PROC						; COMDAT

; 82   : spami(op_not_          , PyObject_Not)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR a1$[rsp]
  00013	e8 00 00 00 00	 call	 PyObject_Not
  00018	89 44 24 20	 mov	 DWORD PTR r$[rsp], eax
  0001c	83 7c 24 20 ff	 cmp	 DWORD PTR r$[rsp], -1
  00021	75 04		 jne	 SHORT $LN1@op_not_
  00023	33 c0		 xor	 eax, eax
  00025	eb 09		 jmp	 SHORT $LN2@op_not_
$LN1@op_not_:
  00027	8b 4c 24 20	 mov	 ecx, DWORD PTR r$[rsp]
  0002b	e8 00 00 00 00	 call	 PyBool_FromLong
$LN2@op_not_:
  00030	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00034	c3		 ret	 0
op_not_	ENDP
_TEXT	ENDS
PUBLIC	??_C@_07IPPAAECC@op_and_?$AA@			; `string'
EXTRN	PyNumber_And:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_and_ DD imagerel op_and_
	DD	imagerel op_and_+91
	DD	imagerel $unwind$op_and_
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_and_ DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_07IPPAAECC@op_and_?$AA@
CONST	SEGMENT
??_C@_07IPPAAECC@op_and_?$AA@ DB 'op_and_', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_and_
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_and_	PROC						; COMDAT

; 83   : spam2(op_and_          , PyNumber_And)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07IPPAAECC@op_and_?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_and_
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_and_
$LN1@op_and_:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_And
$LN2@op_and_:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_and_	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06FOAFFGEM@op_xor?$AA@			; `string'
EXTRN	PyNumber_Xor:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_xor DD imagerel op_xor
	DD	imagerel op_xor+91
	DD	imagerel $unwind$op_xor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_xor DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_06FOAFFGEM@op_xor?$AA@
CONST	SEGMENT
??_C@_06FOAFFGEM@op_xor?$AA@ DB 'op_xor', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_xor
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_xor	PROC						; COMDAT

; 84   : spam2(op_xor           , PyNumber_Xor)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06FOAFFGEM@op_xor?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_xor
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_xor
$LN1@op_xor:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_Xor
$LN2@op_xor:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_xor	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06KHBPFDKG@op_or_?$AA@			; `string'
EXTRN	PyNumber_Or:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_or_ DD imagerel op_or_
	DD	imagerel op_or_+91
	DD	imagerel $unwind$op_or_
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_or_ DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_06KHBPFDKG@op_or_?$AA@
CONST	SEGMENT
??_C@_06KHBPFDKG@op_or_?$AA@ DB 'op_or_', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_or_
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_or_	PROC						; COMDAT

; 85   : spam2(op_or_           , PyNumber_Or)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06KHBPFDKG@op_or_?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_or_
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_or_
$LN1@op_or_:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_Or
$LN2@op_or_:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_or_	ENDP
_TEXT	ENDS
PUBLIC	??_C@_07NLFBLAIN@op_iadd?$AA@			; `string'
EXTRN	PyNumber_InPlaceAdd:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_iadd DD imagerel op_iadd
	DD	imagerel op_iadd+91
	DD	imagerel $unwind$op_iadd
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_iadd DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_07NLFBLAIN@op_iadd?$AA@
CONST	SEGMENT
??_C@_07NLFBLAIN@op_iadd?$AA@ DB 'op_iadd', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_iadd
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_iadd	PROC						; COMDAT

; 86   : spam2(op_iadd          , PyNumber_InPlaceAdd)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NLFBLAIN@op_iadd?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_iadd
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_iadd
$LN1@op_iadd:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_InPlaceAdd
$LN2@op_iadd:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_iadd	ENDP
_TEXT	ENDS
PUBLIC	??_C@_07GKPPEBFI@op_isub?$AA@			; `string'
EXTRN	PyNumber_InPlaceSubtract:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_isub DD imagerel op_isub
	DD	imagerel op_isub+91
	DD	imagerel $unwind$op_isub
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_isub DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_07GKPPEBFI@op_isub?$AA@
CONST	SEGMENT
??_C@_07GKPPEBFI@op_isub?$AA@ DB 'op_isub', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_isub
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_isub	PROC						; COMDAT

; 87   : spam2(op_isub          , PyNumber_InPlaceSubtract)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07GKPPEBFI@op_isub?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_isub
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_isub
$LN1@op_isub:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_InPlaceSubtract
$LN2@op_isub:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_isub	ENDP
_TEXT	ENDS
PUBLIC	??_C@_07EELKEMHK@op_imul?$AA@			; `string'
EXTRN	PyNumber_InPlaceMultiply:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_imul DD imagerel op_imul
	DD	imagerel op_imul+91
	DD	imagerel $unwind$op_imul
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_imul DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_07EELKEMHK@op_imul?$AA@
CONST	SEGMENT
??_C@_07EELKEMHK@op_imul?$AA@ DB 'op_imul', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_imul
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_imul	PROC						; COMDAT

; 88   : spam2(op_imul          , PyNumber_InPlaceMultiply)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07EELKEMHK@op_imul?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_imul
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_imul
$LN1@op_imul:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_InPlaceMultiply
$LN2@op_imul:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_imul	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BOKCAAMH@op_ifloordiv?$AA@		; `string'
EXTRN	PyNumber_InPlaceFloorDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ifloordiv DD imagerel op_ifloordiv
	DD	imagerel op_ifloordiv+91
	DD	imagerel $unwind$op_ifloordiv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ifloordiv DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0N@BOKCAAMH@op_ifloordiv?$AA@
CONST	SEGMENT
??_C@_0N@BOKCAAMH@op_ifloordiv?$AA@ DB 'op_ifloordiv', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_ifloordiv
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_ifloordiv PROC					; COMDAT

; 89   : spam2(op_ifloordiv     , PyNumber_InPlaceFloorDivide)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@BOKCAAMH@op_ifloordiv?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_ifloord
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_ifloord
$LN1@op_ifloord:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_InPlaceFloorDivide
$LN2@op_ifloord:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_ifloordiv ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@ELOGAGIM@op_itruediv?$AA@		; `string'
EXTRN	PyNumber_InPlaceTrueDivide:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_itruediv DD imagerel op_itruediv
	DD	imagerel op_itruediv+91
	DD	imagerel $unwind$op_itruediv
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_itruediv DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0M@ELOGAGIM@op_itruediv?$AA@
CONST	SEGMENT
??_C@_0M@ELOGAGIM@op_itruediv?$AA@ DB 'op_itruediv', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_itruediv
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_itruediv PROC					; COMDAT

; 90   : spam2(op_itruediv      , PyNumber_InPlaceTrueDivide)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@ELOGAGIM@op_itruediv?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_itruedi
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_itruedi
$LN1@op_itruedi:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_InPlaceTrueDivide
$LN2@op_itruedi:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_itruediv ENDP
_TEXT	ENDS
PUBLIC	??_C@_07JNNCOANE@op_imod?$AA@			; `string'
EXTRN	PyNumber_InPlaceRemainder:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_imod DD imagerel op_imod
	DD	imagerel op_imod+91
	DD	imagerel $unwind$op_imod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_imod DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_07JNNCOANE@op_imod?$AA@
CONST	SEGMENT
??_C@_07JNNCOANE@op_imod?$AA@ DB 'op_imod', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_imod
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_imod	PROC						; COMDAT

; 91   : spam2(op_imod          , PyNumber_InPlaceRemainder)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JNNCOANE@op_imod?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_imod
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_imod
$LN1@op_imod:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_InPlaceRemainder
$LN2@op_imod:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_imod	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@OKJHEKNJ@op_ilshift?$AA@		; `string'
EXTRN	PyNumber_InPlaceLshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ilshift DD imagerel op_ilshift
	DD	imagerel op_ilshift+91
	DD	imagerel $unwind$op_ilshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ilshift DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0L@OKJHEKNJ@op_ilshift?$AA@
CONST	SEGMENT
??_C@_0L@OKJHEKNJ@op_ilshift?$AA@ DB 'op_ilshift', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_ilshift
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_ilshift PROC						; COMDAT

; 92   : spam2(op_ilshift       , PyNumber_InPlaceLshift)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@OKJHEKNJ@op_ilshift?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_ilshift
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_ilshift
$LN1@op_ilshift:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_InPlaceLshift
$LN2@op_ilshift:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_ilshift ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@NNHGKNEK@op_irshift?$AA@		; `string'
EXTRN	PyNumber_InPlaceRshift:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_irshift DD imagerel op_irshift
	DD	imagerel op_irshift+91
	DD	imagerel $unwind$op_irshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_irshift DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0L@NNHGKNEK@op_irshift?$AA@
CONST	SEGMENT
??_C@_0L@NNHGKNEK@op_irshift?$AA@ DB 'op_irshift', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_irshift
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_irshift PROC						; COMDAT

; 93   : spam2(op_irshift       , PyNumber_InPlaceRshift)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NNHGKNEK@op_irshift?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_irshift
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_irshift
$LN1@op_irshift:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_InPlaceRshift
$LN2@op_irshift:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_irshift ENDP
_TEXT	ENDS
PUBLIC	??_C@_07NGMGDFFL@op_iand?$AA@			; `string'
EXTRN	PyNumber_InPlaceAnd:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_iand DD imagerel op_iand
	DD	imagerel op_iand+91
	DD	imagerel $unwind$op_iand
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_iand DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_07NGMGDFFL@op_iand?$AA@
CONST	SEGMENT
??_C@_07NGMGDFFL@op_iand?$AA@ DB 'op_iand', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_iand
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_iand	PROC						; COMDAT

; 94   : spam2(op_iand          , PyNumber_InPlaceAnd)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NGMGDFFL@op_iand?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_iand
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_iand
$LN1@op_iand:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_InPlaceAnd
$LN2@op_iand:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_iand	ENDP
_TEXT	ENDS
PUBLIC	??_C@_07OGINPCKO@op_ixor?$AA@			; `string'
EXTRN	PyNumber_InPlaceXor:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ixor DD imagerel op_ixor
	DD	imagerel op_ixor+91
	DD	imagerel $unwind$op_ixor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ixor DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_07OGINPCKO@op_ixor?$AA@
CONST	SEGMENT
??_C@_07OGINPCKO@op_ixor?$AA@ DB 'op_ixor', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_ixor
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_ixor	PROC						; COMDAT

; 95   : spam2(op_ixor          , PyNumber_InPlaceXor)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07OGINPCKO@op_ixor?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_ixor
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_ixor
$LN1@op_ixor:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_InPlaceXor
$LN2@op_ixor:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_ixor	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06LGKAGGLG@op_ior?$AA@			; `string'
EXTRN	PyNumber_InPlaceOr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ior DD imagerel op_ior
	DD	imagerel op_ior+91
	DD	imagerel $unwind$op_ior
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ior DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_06LGKAGGLG@op_ior?$AA@
CONST	SEGMENT
??_C@_06LGKAGGLG@op_ior?$AA@ DB 'op_ior', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_ior
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_ior	PROC						; COMDAT

; 96   : spam2(op_ior           , PyNumber_InPlaceOr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06LGKAGGLG@op_ior?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_ior
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_ior
$LN1@op_ior:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
$LN2@op_ior:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_ior	ENDP
_TEXT	ENDS
PUBLIC	??_C@_09OBHINBI@op_concat?$AA@			; `string'
EXTRN	PySequence_Concat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_concat DD imagerel op_concat
	DD	imagerel op_concat+91
	DD	imagerel $unwind$op_concat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_concat DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_09OBHINBI@op_concat?$AA@
CONST	SEGMENT
??_C@_09OBHINBI@op_concat?$AA@ DB 'op_concat', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_concat
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_concat PROC						; COMDAT

; 97   : spam2(op_concat        , PySequence_Concat)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09OBHINBI@op_concat?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_concat
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_concat
$LN1@op_concat:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PySequence_Concat
$LN2@op_concat:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_concat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@INHJPLJB@op_iconcat?$AA@		; `string'
EXTRN	PySequence_InPlaceConcat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_iconcat DD imagerel op_iconcat
	DD	imagerel op_iconcat+91
	DD	imagerel $unwind$op_iconcat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_iconcat DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0L@INHJPLJB@op_iconcat?$AA@
CONST	SEGMENT
??_C@_0L@INHJPLJB@op_iconcat?$AA@ DB 'op_iconcat', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_iconcat
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_iconcat PROC						; COMDAT

; 98   : spam2(op_iconcat       , PySequence_InPlaceConcat)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@INHJPLJB@op_iconcat?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_iconcat
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_iconcat
$LN1@op_iconcat:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PySequence_InPlaceConcat
$LN2@op_iconcat:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_iconcat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@OLOJBIKN@op_contains?$AA@		; `string'
EXTRN	PySequence_Contains:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_contains DD imagerel op_contains
	DD	imagerel op_contains+115
	DD	imagerel $unwind$op_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_contains DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0M@OLOJBIKN@op_contains?$AA@
CONST	SEGMENT
??_C@_0M@OLOJBIKN@op_contains?$AA@ DB 'op_contains', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_contains
_TEXT	SEGMENT
a1$ = 48
r$ = 56
a2$ = 64
s$ = 96
a$ = 104
op_contains PROC					; COMDAT

; 99   : spami2b(op_contains     , PySequence_Contains)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000e	48 8d 44 24 40	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OLOJBIKN@op_contains?$AA@
  00035	48 8b 4c 24 68	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN2@op_contain
  00043	33 c0		 xor	 eax, eax
  00045	eb 27		 jmp	 SHORT $LN3@op_contain
$LN2@op_contain:
  00047	48 8b 54 24 40	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PySequence_Contains
  00056	89 44 24 38	 mov	 DWORD PTR r$[rsp], eax
  0005a	83 7c 24 38 ff	 cmp	 DWORD PTR r$[rsp], -1
  0005f	75 04		 jne	 SHORT $LN1@op_contain
  00061	33 c0		 xor	 eax, eax
  00063	eb 09		 jmp	 SHORT $LN3@op_contain
$LN1@op_contain:
  00065	8b 4c 24 38	 mov	 ecx, DWORD PTR r$[rsp]
  00069	e8 00 00 00 00	 call	 PyBool_FromLong
$LN3@op_contain:
  0006e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00072	c3		 ret	 0
op_contains ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PySequence_Index:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$indexOf DD imagerel indexOf
	DD	imagerel indexOf+118
	DD	imagerel $unwind$indexOf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$indexOf DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT indexOf
_TEXT	SEGMENT
a1$ = 48
r$ = 56
a2$ = 64
s$ = 96
a$ = 104
indexOf	PROC						; COMDAT

; 100  : spamn2(indexOf         , PySequence_Index)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000e	48 8d 44 24 40	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07KKKNJHGA@indexOf?$AA@
  00035	48 8b 4c 24 68	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN2@indexOf
  00043	33 c0		 xor	 eax, eax
  00045	eb 2a		 jmp	 SHORT $LN3@indexOf
$LN2@indexOf:
  00047	48 8b 54 24 40	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PySequence_Index
  00056	48 89 44 24 38	 mov	 QWORD PTR r$[rsp], rax
  0005b	48 83 7c 24 38
	ff		 cmp	 QWORD PTR r$[rsp], -1
  00061	75 04		 jne	 SHORT $LN1@indexOf
  00063	33 c0		 xor	 eax, eax
  00065	eb 0a		 jmp	 SHORT $LN3@indexOf
$LN1@indexOf:
  00067	48 8b 4c 24 38	 mov	 rcx, QWORD PTR r$[rsp]
  0006c	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN3@indexOf:
  00071	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00075	c3		 ret	 0
indexOf	ENDP
_TEXT	ENDS
EXTRN	PySequence_Count:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$countOf DD imagerel countOf
	DD	imagerel countOf+118
	DD	imagerel $unwind$countOf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$countOf DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT countOf
_TEXT	SEGMENT
a1$ = 48
r$ = 56
a2$ = 64
s$ = 96
a$ = 104
countOf	PROC						; COMDAT

; 101  : spamn2(countOf         , PySequence_Count)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000e	48 8d 44 24 40	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07GIJGNPIL@countOf?$AA@
  00035	48 8b 4c 24 68	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN2@countOf
  00043	33 c0		 xor	 eax, eax
  00045	eb 2a		 jmp	 SHORT $LN3@countOf
$LN2@countOf:
  00047	48 8b 54 24 40	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PySequence_Count
  00056	48 89 44 24 38	 mov	 QWORD PTR r$[rsp], rax
  0005b	48 83 7c 24 38
	ff		 cmp	 QWORD PTR r$[rsp], -1
  00061	75 04		 jne	 SHORT $LN1@countOf
  00063	33 c0		 xor	 eax, eax
  00065	eb 0a		 jmp	 SHORT $LN3@countOf
$LN1@countOf:
  00067	48 8b 4c 24 38	 mov	 rcx, QWORD PTR r$[rsp]
  0006c	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN3@countOf:
  00071	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00075	c3		 ret	 0
countOf	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@HBNFJMDD@op_getitem?$AA@		; `string'
EXTRN	PyObject_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_getitem DD imagerel op_getitem
	DD	imagerel op_getitem+91
	DD	imagerel $unwind$op_getitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_getitem DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0L@HBNFJMDD@op_getitem?$AA@
CONST	SEGMENT
??_C@_0L@HBNFJMDD@op_getitem?$AA@ DB 'op_getitem', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_getitem
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_getitem PROC						; COMDAT

; 102  : spam2(op_getitem       , PyObject_GetItem)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@HBNFJMDD@op_getitem?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_getitem
  00043	33 c0		 xor	 eax, eax
  00045	eb 0f		 jmp	 SHORT $LN2@op_getitem
$LN1@op_getitem:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyObject_GetItem
$LN2@op_getitem:
  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
op_getitem ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0L@BANPBLCG@op_delitem?$AA@		; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyObject_DelItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_delitem DD imagerel op_delitem
	DD	imagerel op_delitem+119
	DD	imagerel $unwind$op_delitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_delitem DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0L@BANPBLCG@op_delitem?$AA@
CONST	SEGMENT
??_C@_0L@BANPBLCG@op_delitem?$AA@ DB 'op_delitem', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_delitem
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_delitem PROC						; COMDAT

; 103  : spam2n(op_delitem       , PyObject_DelItem)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@BANPBLCG@op_delitem?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN2@op_delitem
  00043	33 c0		 xor	 eax, eax
  00045	eb 2b		 jmp	 SHORT $LN3@op_delitem
$LN2@op_delitem:
  00047	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00051	e8 00 00 00 00	 call	 PyObject_DelItem
  00056	83 f8 ff	 cmp	 eax, -1
  00059	75 04		 jne	 SHORT $LN1@op_delitem
  0005b	33 c0		 xor	 eax, eax
  0005d	eb 13		 jmp	 SHORT $LN3@op_delitem
$LN1@op_delitem:
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00066	e8 00 00 00 00	 call	 _Py_IncRef
  0006b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@op_delitem:
  00072	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00076	c3		 ret	 0
op_delitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@IJCEKDOC@op_setitem?$AA@		; `string'
EXTRN	PyObject_SetItem:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\operator.c
pdata	SEGMENT
$pdata$op_setitem DD imagerel op_setitem
	DD	imagerel op_setitem+134
	DD	imagerel $unwind$op_setitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_setitem DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0L@IJCEKDOC@op_setitem?$AA@
CONST	SEGMENT
??_C@_0L@IJCEKDOC@op_setitem?$AA@ DB 'op_setitem', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_setitem
_TEXT	SEGMENT
a1$ = 64
a3$ = 72
a2$ = 80
s$ = 112
a$ = 120
op_setitem PROC						; COMDAT

; 104  : spam3n(op_setitem      , PyObject_SetItem)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000e	48 8d 44 24 48	 lea	 rax, QWORD PTR a3$[rsp]
  00013	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR a2$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 8d 44 24 40	 lea	 rax, QWORD PTR a1$[rsp]
  00027	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00032	41 b8 03 00 00
	00		 mov	 r8d, 3
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@IJCEKDOC@op_setitem?$AA@
  0003f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR a$[rsp]
  00044	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00049	85 c0		 test	 eax, eax
  0004b	75 04		 jne	 SHORT $LN2@op_setitem
  0004d	33 c0		 xor	 eax, eax
  0004f	eb 30		 jmp	 SHORT $LN3@op_setitem
$LN2@op_setitem:
  00051	4c 8b 44 24 48	 mov	 r8, QWORD PTR a3$[rsp]
  00056	48 8b 54 24 50	 mov	 rdx, QWORD PTR a2$[rsp]
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR a1$[rsp]
  00060	e8 00 00 00 00	 call	 PyObject_SetItem
  00065	83 f8 ff	 cmp	 eax, -1
  00068	75 04		 jne	 SHORT $LN1@op_setitem
  0006a	33 c0		 xor	 eax, eax
  0006c	eb 13		 jmp	 SHORT $LN3@op_setitem
$LN1@op_setitem:
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00075	e8 00 00 00 00	 call	 _Py_IncRef
  0007a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@op_setitem:
  00081	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00085	c3		 ret	 0
op_setitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_05NHLNJCFO@op_lt?$AA@			; `string'
EXTRN	PyObject_RichCompare:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_lt DD	imagerel op_lt
	DD	imagerel op_lt+94
	DD	imagerel $unwind$op_lt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_lt DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_05NHLNJCFO@op_lt?$AA@
CONST	SEGMENT
??_C@_05NHLNJCFO@op_lt?$AA@ DB 'op_lt', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_lt
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_lt	PROC						; COMDAT

; 105  : spamrc(op_lt           , Py_LT)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NHLNJCFO@op_lt?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_lt
  00043	33 c0		 xor	 eax, eax
  00045	eb 12		 jmp	 SHORT $LN2@op_lt
$LN1@op_lt:
  00047	45 33 c0	 xor	 r8d, r8d
  0004a	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00054	e8 00 00 00 00	 call	 PyObject_RichCompare
$LN2@op_lt:
  00059	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005d	c3		 ret	 0
op_lt	ENDP
_TEXT	ENDS
PUBLIC	??_C@_05IEGELBEO@op_le?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_le DD	imagerel op_le
	DD	imagerel op_le+97
	DD	imagerel $unwind$op_le
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_le DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_05IEGELBEO@op_le?$AA@
CONST	SEGMENT
??_C@_05IEGELBEO@op_le?$AA@ DB 'op_le', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_le
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_le	PROC						; COMDAT

; 106  : spamrc(op_le           , Py_LE)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IEGELBEO@op_le?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_le
  00043	33 c0		 xor	 eax, eax
  00045	eb 15		 jmp	 SHORT $LN2@op_le
$LN1@op_le:
  00047	41 b8 01 00 00
	00		 mov	 r8d, 1
  0004d	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00057	e8 00 00 00 00	 call	 PyObject_RichCompare
$LN2@op_le:
  0005c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00060	c3		 ret	 0
op_le	ENDP
_TEXT	ENDS
PUBLIC	??_C@_05KFBLFNJE@op_eq?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_eq DD	imagerel op_eq
	DD	imagerel op_eq+97
	DD	imagerel $unwind$op_eq
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_eq DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_05KFBLFNJE@op_eq?$AA@
CONST	SEGMENT
??_C@_05KFBLFNJE@op_eq?$AA@ DB 'op_eq', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_eq
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_eq	PROC						; COMDAT

; 107  : spamrc(op_eq           , Py_EQ)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KFBLFNJE@op_eq?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_eq
  00043	33 c0		 xor	 eax, eax
  00045	eb 15		 jmp	 SHORT $LN2@op_eq
$LN1@op_eq:
  00047	41 b8 02 00 00
	00		 mov	 r8d, 2
  0004d	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00057	e8 00 00 00 00	 call	 PyObject_RichCompare
$LN2@op_eq:
  0005c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00060	c3		 ret	 0
op_eq	ENDP
_TEXT	ENDS
PUBLIC	??_C@_05IHOAGFCA@op_ne?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ne DD	imagerel op_ne
	DD	imagerel op_ne+97
	DD	imagerel $unwind$op_ne
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ne DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_05IHOAGFCA@op_ne?$AA@
CONST	SEGMENT
??_C@_05IHOAGFCA@op_ne?$AA@ DB 'op_ne', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_ne
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_ne	PROC						; COMDAT

; 108  : spamrc(op_ne           , Py_NE)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IHOAGFCA@op_ne?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_ne
  00043	33 c0		 xor	 eax, eax
  00045	eb 15		 jmp	 SHORT $LN2@op_ne
$LN1@op_ne:
  00047	41 b8 03 00 00
	00		 mov	 r8d, 3
  0004d	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00057	e8 00 00 00 00	 call	 PyObject_RichCompare
$LN2@op_ne:
  0005c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00060	c3		 ret	 0
op_ne	ENDP
_TEXT	ENDS
PUBLIC	??_C@_05NLOIHNLP@op_gt?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_gt DD	imagerel op_gt
	DD	imagerel op_gt+97
	DD	imagerel $unwind$op_gt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_gt DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_05NLOIHNLP@op_gt?$AA@
CONST	SEGMENT
??_C@_05NLOIHNLP@op_gt?$AA@ DB 'op_gt', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_gt
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_gt	PROC						; COMDAT

; 109  : spamrc(op_gt           , Py_GT)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NLOIHNLP@op_gt?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_gt
  00043	33 c0		 xor	 eax, eax
  00045	eb 15		 jmp	 SHORT $LN2@op_gt
$LN1@op_gt:
  00047	41 b8 04 00 00
	00		 mov	 r8d, 4
  0004d	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00057	e8 00 00 00 00	 call	 PyObject_RichCompare
$LN2@op_gt:
  0005c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00060	c3		 ret	 0
op_gt	ENDP
_TEXT	ENDS
PUBLIC	??_C@_05IIDBFOKP@op_ge?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ge DD	imagerel op_ge
	DD	imagerel op_ge+97
	DD	imagerel $unwind$op_ge
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ge DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_05IIDBFOKP@op_ge?$AA@
CONST	SEGMENT
??_C@_05IIDBFOKP@op_ge?$AA@ DB 'op_ge', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT op_ge
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_ge	PROC						; COMDAT

; 110  : spamrc(op_ge           , Py_GE)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IIDBFOKP@op_ge?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	75 04		 jne	 SHORT $LN1@op_ge
  00043	33 c0		 xor	 eax, eax
  00045	eb 15		 jmp	 SHORT $LN2@op_ge
$LN1@op_ge:
  00047	41 b8 05 00 00
	00		 mov	 r8d, 5
  0004d	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00057	e8 00 00 00 00	 call	 PyObject_RichCompare
$LN2@op_ge:
  0005c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00060	c3		 ret	 0
op_ge	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Power:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_pow DD imagerel op_pow
	DD	imagerel op_pow+98
	DD	imagerel $unwind$op_pow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_pow DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT op_pow
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_pow	PROC						; COMDAT

; 114  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 115  :     PyObject *a1, *a2;
; 116  :     if (PyArg_UnpackTuple(a,"pow", 2, 2, &a1, &a2))

  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03JGHBODFD@pow?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	74 18		 je	 SHORT $LN1@op_pow

; 117  :         return PyNumber_Power(a1, a2, Py_None);

  00043	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0004a	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00054	e8 00 00 00 00	 call	 PyNumber_Power
  00059	eb 02		 jmp	 SHORT $LN2@op_pow
$LN1@op_pow:

; 118  :     return NULL;

  0005b	33 c0		 xor	 eax, eax
$LN2@op_pow:

; 119  : }

  0005d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00061	c3		 ret	 0
op_pow	ENDP
_TEXT	ENDS
EXTRN	PyNumber_InPlacePower:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_ipow DD imagerel op_ipow
	DD	imagerel op_ipow+98
	DD	imagerel $unwind$op_ipow
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_ipow DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT op_ipow
_TEXT	SEGMENT
a1$ = 48
a2$ = 56
s$ = 80
a$ = 88
op_ipow	PROC						; COMDAT

; 123  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 124  :     PyObject *a1, *a2;
; 125  :     if (PyArg_UnpackTuple(a,"ipow", 2, 2, &a1, &a2))

  0000e	48 8d 44 24 38	 lea	 rax, QWORD PTR a2$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OFDFNOGO@ipow?$AA@
  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR a$[rsp]
  0003a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003f	85 c0		 test	 eax, eax
  00041	74 18		 je	 SHORT $LN1@op_ipow

; 126  :         return PyNumber_InPlacePower(a1, a2, Py_None);

  00043	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0004a	48 8b 54 24 38	 mov	 rdx, QWORD PTR a2$[rsp]
  0004f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a1$[rsp]
  00054	e8 00 00 00 00	 call	 PyNumber_InPlacePower
  00059	eb 02		 jmp	 SHORT $LN2@op_ipow
$LN1@op_ipow:

; 127  :     return NULL;

  0005b	33 c0		 xor	 eax, eax
$LN2@op_ipow:

; 128  : }

  0005d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00061	c3		 ret	 0
op_ipow	ENDP
_TEXT	ENDS
EXTRN	PyNumber_Index:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$op_index DD imagerel op_index
	DD	imagerel op_index+29
	DD	imagerel $unwind$op_index
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$op_index DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT op_index
_TEXT	SEGMENT
s$ = 48
a$ = 56
op_index PROC						; COMDAT

; 132  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 133  :     return PyNumber_Index(a);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR a$[rsp]
  00013	e8 00 00 00 00	 call	 PyNumber_Index

; 134  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
op_index ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_ DD	imagerel is_
	DD	imagerel is_+144
	DD	imagerel $unwind$is_
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_ DD	010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT is_
_TEXT	SEGMENT
a1$ = 48
result$ = 56
a2$ = 64
tv73 = 72
s$ = 96
a$ = 104
is_	PROC						; COMDAT

; 138  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 139  :     PyObject *a1, *a2, *result = NULL;

  0000e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 140  :     if (PyArg_UnpackTuple(a,"is_", 2, 2, &a1, &a2)) {

  00017	48 8d 44 24 40	 lea	 rax, QWORD PTR a2$[rsp]
  0001c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00021	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	41 b9 02 00 00
	00		 mov	 r9d, 2
  00031	41 b8 02 00 00
	00		 mov	 r8d, 2
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PDABAPPI@is_?$AA@
  0003e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR a$[rsp]
  00043	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00048	85 c0		 test	 eax, eax
  0004a	74 3a		 je	 SHORT $LN1@is_

; 141  :         result = (a1 == a2) ? Py_True : Py_False;

  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR a2$[rsp]
  00051	48 39 44 24 30	 cmp	 QWORD PTR a1$[rsp], rax
  00056	75 0e		 jne	 SHORT $LN4@is_
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0005f	48 89 44 24 48	 mov	 QWORD PTR tv73[rsp], rax
  00064	eb 0c		 jmp	 SHORT $LN5@is_
$LN4@is_:
  00066	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0006d	48 89 44 24 48	 mov	 QWORD PTR tv73[rsp], rax
$LN5@is_:
  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR tv73[rsp]
  00077	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 142  :         Py_INCREF(result);

  0007c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  00081	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@is_:

; 143  :     }
; 144  :     return result;

  00086	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]

; 145  : }

  0008b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0008f	c3		 ret	 0
is_	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_not DD imagerel is_not
	DD	imagerel is_not+144
	DD	imagerel $unwind$is_not
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_not DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT is_not
_TEXT	SEGMENT
a1$ = 48
result$ = 56
a2$ = 64
tv73 = 72
s$ = 96
a$ = 104
is_not	PROC						; COMDAT

; 149  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 150  :     PyObject *a1, *a2, *result = NULL;

  0000e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 151  :     if (PyArg_UnpackTuple(a,"is_not", 2, 2, &a1, &a2)) {

  00017	48 8d 44 24 40	 lea	 rax, QWORD PTR a2$[rsp]
  0001c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00021	48 8d 44 24 30	 lea	 rax, QWORD PTR a1$[rsp]
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	41 b9 02 00 00
	00		 mov	 r9d, 2
  00031	41 b8 02 00 00
	00		 mov	 r8d, 2
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06JIGJLOBN@is_not?$AA@
  0003e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR a$[rsp]
  00043	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00048	85 c0		 test	 eax, eax
  0004a	74 3a		 je	 SHORT $LN1@is_not

; 152  :         result = (a1 != a2) ? Py_True : Py_False;

  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR a2$[rsp]
  00051	48 39 44 24 30	 cmp	 QWORD PTR a1$[rsp], rax
  00056	74 0e		 je	 SHORT $LN4@is_not
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0005f	48 89 44 24 48	 mov	 QWORD PTR tv73[rsp], rax
  00064	eb 0c		 jmp	 SHORT $LN5@is_not
$LN4@is_not:
  00066	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0006d	48 89 44 24 48	 mov	 QWORD PTR tv73[rsp], rax
$LN5@is_not:
  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR tv73[rsp]
  00077	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 153  :         Py_INCREF(result);

  0007c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  00081	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@is_not:

; 154  :     }
; 155  :     return result;

  00086	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]

; 156  : }

  0008b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0008f	c3		 ret	 0
is_not	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@ ; `string'
PUBLIC	??_C@_0EM@IKPOLIEF@unsupported?5operand?5types?$CIs?$CJ?5or?5@ ; `string'
PUBLIC	??_C@_1EE@PCPICPBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAa?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@ ; `string'
PUBLIC	??_C@_1EE@PACGCIDO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@ ; `string'
PUBLIC	??_C@_0DN@MHNBEPFD@comparing?5strings?5with?5non?9ASCII@ ; `string'
PUBLIC	??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BC@DNPOKLOK@OO?3compare_digest?$AA@	; `string'
EXTRN	PyBuffer_Release:PROC
EXTRN	PyExc_BufferError:QWORD
EXTRN	PyObject_GetBuffer:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_PyUnicode_Ready:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$compare_digest DD imagerel compare_digest
	DD	imagerel compare_digest+1987
	DD	imagerel $unwind$compare_digest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compare_digest DD 021101H
	DD	0250111H
xdata	ENDS
;	COMDAT ??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
CONST	SEGMENT
??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@ DB 'Buffer mus'
	DB	't be single dimension', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@IKPOLIEF@unsupported?5operand?5types?$CIs?$CJ?5or?5@
CONST	SEGMENT
??_C@_0EM@IKPOLIEF@unsupported?5operand?5types?$CIs?$CJ?5or?5@ DB 'unsupp'
	DB	'orted operand types(s) or combination of types: ''%.100s'' an'
	DB	'd ''%.100s''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@PCPICPBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAa?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@
CONST	SEGMENT
??_C@_1EE@PCPICPBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAa?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'a', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@PACGCIDO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@
CONST	SEGMENT
??_C@_1EE@PACGCIDO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'b', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@MHNBEPFD@comparing?5strings?5with?5non?9ASCII@
CONST	SEGMENT
??_C@_0DN@MHNBEPFD@comparing?5strings?5with?5non?9ASCII@ DB 'comparing st'
	DB	'rings with non-ASCII characters is not supported', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'b', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'a', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'b', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'a', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '.', 00H
	DB	'c', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DNPOKLOK@OO?3compare_digest?$AA@
CONST	SEGMENT
??_C@_0BC@DNPOKLOK@OO?3compare_digest?$AA@ DB 'OO:compare_digest', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT compare_digest
_TEXT	SEGMENT
rc$ = 32
a$ = 40
b$ = 48
view_b$20928 = 64
view_a$20927 = 144
tv92 = 224
tv140 = 228
tv254 = 232
tv263 = 240
tv298 = 248
tv307 = 256
tv316 = 264
tv328 = 268
tv325 = 272
tv327 = 276
self$ = 304
args$ = 312
compare_digest PROC					; COMDAT

; 225  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H

; 226  :     PyObject *a, *b;
; 227  :     int rc;
; 228  : 
; 229  :     if (!PyArg_ParseTuple(args, "OO:compare_digest", &a, &b)) {

  00011	4c 8d 4c 24 30	 lea	 r9, QWORD PTR b$[rsp]
  00016	4c 8d 44 24 28	 lea	 r8, QWORD PTR a$[rsp]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DNPOKLOK@OO?3compare_digest?$AA@
  00022	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0002a	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002f	85 c0		 test	 eax, eax
  00031	75 07		 jne	 SHORT $LN12@compare_di

; 230  :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 81 07 00 00	 jmp	 $LN13@compare_di
$LN12@compare_di:

; 231  :     }
; 232  : 
; 233  :     /* ASCII unicode string */
; 234  :     if(PyUnicode_Check(a) && PyUnicode_Check(b)) {

  0003a	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  0003f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00043	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00049	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0004e	85 c0		 test	 eax, eax
  00050	0f 84 63 05 00
	00		 je	 $LN11@compare_di
  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  0005b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00065	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0006a	85 c0		 test	 eax, eax
  0006c	0f 84 47 05 00
	00		 je	 $LN11@compare_di

; 235  :         if (PyUnicode_READY(a) == -1 || PyUnicode_READY(b) == -1) {

  00072	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  00077	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00081	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00086	85 c0		 test	 eax, eax
  00088	75 1c		 jne	 SHORT $LN15@compare_di
  0008a	41 b8 eb 00 00
	00		 mov	 r8d, 235		; 000000ebH
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a4	33 c0		 xor	 eax, eax
$LN15@compare_di:
  000a6	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  000ab	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000ae	c1 e8 07	 shr	 eax, 7
  000b1	83 e0 01	 and	 eax, 1
  000b4	85 c0		 test	 eax, eax
  000b6	74 0d		 je	 SHORT $LN16@compare_di
  000b8	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv92[rsp], 0
  000c3	eb 11		 jmp	 SHORT $LN17@compare_di
$LN16@compare_di:
  000c5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR a$[rsp]
  000ca	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000cf	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv92[rsp], eax
$LN17@compare_di:
  000d6	83 bc 24 e0 00
	00 00 ff	 cmp	 DWORD PTR tv92[rsp], -1
  000de	74 6e		 je	 SHORT $LN9@compare_di
  000e0	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  000e5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ef	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000f4	85 c0		 test	 eax, eax
  000f6	75 1c		 jne	 SHORT $LN18@compare_di
  000f8	41 b8 eb 00 00
	00		 mov	 r8d, 235		; 000000ebH
  000fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00112	33 c0		 xor	 eax, eax
$LN18@compare_di:
  00114	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00119	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0011c	c1 e8 07	 shr	 eax, 7
  0011f	83 e0 01	 and	 eax, 1
  00122	85 c0		 test	 eax, eax
  00124	74 0d		 je	 SHORT $LN19@compare_di
  00126	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv140[rsp], 0
  00131	eb 11		 jmp	 SHORT $LN20@compare_di
$LN19@compare_di:
  00133	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  00138	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0013d	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv140[rsp], eax
$LN20@compare_di:
  00144	83 bc 24 e4 00
	00 00 ff	 cmp	 DWORD PTR tv140[rsp], -1
  0014c	75 07		 jne	 SHORT $LN10@compare_di
$LN9@compare_di:

; 236  :             return NULL;

  0014e	33 c0		 xor	 eax, eax
  00150	e9 66 06 00 00	 jmp	 $LN13@compare_di
$LN10@compare_di:

; 237  :         }
; 238  :         if (!PyUnicode_IS_ASCII(a) || !PyUnicode_IS_ASCII(b)) {

  00155	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  0015a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0015e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00164	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00169	85 c0		 test	 eax, eax
  0016b	75 1c		 jne	 SHORT $LN21@compare_di
  0016d	41 b8 ee 00 00
	00		 mov	 r8d, 238		; 000000eeH
  00173	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  00181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00187	33 c0		 xor	 eax, eax
$LN21@compare_di:
  00189	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  0018e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00191	c1 e8 07	 shr	 eax, 7
  00194	83 e0 01	 and	 eax, 1
  00197	85 c0		 test	 eax, eax
  00199	75 1c		 jne	 SHORT $LN22@compare_di
  0019b	41 b8 ee 00 00
	00		 mov	 r8d, 238		; 000000eeH
  001a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  001a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b5	33 c0		 xor	 eax, eax
$LN22@compare_di:
  001b7	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  001bc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001bf	c1 e8 06	 shr	 eax, 6
  001c2	83 e0 01	 and	 eax, 1
  001c5	85 c0		 test	 eax, eax
  001c7	74 74		 je	 SHORT $LN7@compare_di
  001c9	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  001ce	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001d2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001d8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001dd	85 c0		 test	 eax, eax
  001df	75 1c		 jne	 SHORT $LN23@compare_di
  001e1	41 b8 ee 00 00
	00		 mov	 r8d, 238		; 000000eeH
  001e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001fb	33 c0		 xor	 eax, eax
$LN23@compare_di:
  001fd	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00202	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00205	c1 e8 07	 shr	 eax, 7
  00208	83 e0 01	 and	 eax, 1
  0020b	85 c0		 test	 eax, eax
  0020d	75 1c		 jne	 SHORT $LN24@compare_di
  0020f	41 b8 ee 00 00
	00		 mov	 r8d, 238		; 000000eeH
  00215	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  0021c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  00223	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00229	33 c0		 xor	 eax, eax
$LN24@compare_di:
  0022b	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00230	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00233	c1 e8 06	 shr	 eax, 6
  00236	83 e0 01	 and	 eax, 1
  00239	85 c0		 test	 eax, eax
  0023b	75 1a		 jne	 SHORT $LN8@compare_di
$LN7@compare_di:

; 239  :             PyErr_SetString(PyExc_TypeError,
; 240  :                             "comparing strings with non-ASCII characters is "
; 241  :                             "not supported");

  0023d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@MHNBEPFD@comparing?5strings?5with?5non?9ASCII@
  00244	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0024b	e8 00 00 00 00	 call	 PyErr_SetString

; 242  :             return NULL;

  00250	33 c0		 xor	 eax, eax
  00252	e9 64 05 00 00	 jmp	 $LN13@compare_di
$LN8@compare_di:

; 243  :         }
; 244  : 
; 245  :         rc = _tscmp(PyUnicode_DATA(a),
; 246  :                     PyUnicode_DATA(b),
; 247  :                     PyUnicode_GET_LENGTH(a),
; 248  :                     PyUnicode_GET_LENGTH(b));

  00257	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  0025c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00260	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00266	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0026b	85 c0		 test	 eax, eax
  0026d	75 1c		 jne	 SHORT $LN25@compare_di
  0026f	41 b8 f8 00 00
	00		 mov	 r8d, 248		; 000000f8H
  00275	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  0027c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  00283	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00289	33 c0		 xor	 eax, eax
$LN25@compare_di:
  0028b	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00290	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00293	c1 e8 07	 shr	 eax, 7
  00296	83 e0 01	 and	 eax, 1
  00299	85 c0		 test	 eax, eax
  0029b	75 1c		 jne	 SHORT $LN26@compare_di
  0029d	41 b8 f8 00 00
	00		 mov	 r8d, 248		; 000000f8H
  002a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  002aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  002b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b7	33 c0		 xor	 eax, eax
$LN26@compare_di:
  002b9	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  002be	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002c2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002c8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002cd	85 c0		 test	 eax, eax
  002cf	75 1c		 jne	 SHORT $LN27@compare_di
  002d1	41 b8 f7 00 00
	00		 mov	 r8d, 247		; 000000f7H
  002d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  002e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002eb	33 c0		 xor	 eax, eax
$LN27@compare_di:
  002ed	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  002f2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002f5	c1 e8 07	 shr	 eax, 7
  002f8	83 e0 01	 and	 eax, 1
  002fb	85 c0		 test	 eax, eax
  002fd	75 1c		 jne	 SHORT $LN28@compare_di
  002ff	41 b8 f7 00 00
	00		 mov	 r8d, 247		; 000000f7H
  00305	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  0030c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  00313	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00319	33 c0		 xor	 eax, eax
$LN28@compare_di:
  0031b	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00320	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00324	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0032a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0032f	85 c0		 test	 eax, eax
  00331	75 1c		 jne	 SHORT $LN29@compare_di
  00333	41 b8 f6 00 00
	00		 mov	 r8d, 246		; 000000f6H
  00339	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  00340	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  00347	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0034d	33 c0		 xor	 eax, eax
$LN29@compare_di:
  0034f	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00354	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00357	c1 e8 05	 shr	 eax, 5
  0035a	83 e0 01	 and	 eax, 1
  0035d	85 c0		 test	 eax, eax
  0035f	0f 84 ae 00 00
	00		 je	 $LN35@compare_di
  00365	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  0036a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0036e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00374	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00379	85 c0		 test	 eax, eax
  0037b	75 1c		 jne	 SHORT $LN30@compare_di
  0037d	41 b8 f6 00 00
	00		 mov	 r8d, 246		; 000000f6H
  00383	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  0038a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CHIKBFM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  00391	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00397	33 c0		 xor	 eax, eax
$LN30@compare_di:
  00399	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  0039e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003a1	c1 e8 07	 shr	 eax, 7
  003a4	83 e0 01	 and	 eax, 1
  003a7	85 c0		 test	 eax, eax
  003a9	75 1c		 jne	 SHORT $LN31@compare_di
  003ab	41 b8 f6 00 00
	00		 mov	 r8d, 246		; 000000f6H
  003b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  003b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@KGBPLJCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  003bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003c5	33 c0		 xor	 eax, eax
$LN31@compare_di:
  003c7	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  003cc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003cf	c1 e8 06	 shr	 eax, 6
  003d2	83 e0 01	 and	 eax, 1
  003d5	85 c0		 test	 eax, eax
  003d7	74 15		 je	 SHORT $LN32@compare_di
  003d9	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  003de	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  003e4	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv254[rsp], rax
  003ec	eb 13		 jmp	 SHORT $LN33@compare_di
$LN32@compare_di:
  003ee	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  003f3	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  003f9	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv254[rsp], rax
$LN33@compare_di:
  00401	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv254[rsp]
  00409	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv263[rsp], rax
  00411	eb 3f		 jmp	 SHORT $LN36@compare_di
$LN35@compare_di:
  00413	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00418	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00420	75 1c		 jne	 SHORT $LN34@compare_di
  00422	41 b8 f6 00 00
	00		 mov	 r8d, 246		; 000000f6H
  00428	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  0042f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@PACGCIDO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAb?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@
  00436	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0043c	33 c0		 xor	 eax, eax
$LN34@compare_di:
  0043e	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00443	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0044a	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv263[rsp], rax
$LN36@compare_di:
  00452	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  00457	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0045b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00461	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00466	85 c0		 test	 eax, eax
  00468	75 1c		 jne	 SHORT $LN37@compare_di
  0046a	41 b8 f5 00 00
	00		 mov	 r8d, 245		; 000000f5H
  00470	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  00477	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  0047e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00484	33 c0		 xor	 eax, eax
$LN37@compare_di:
  00486	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  0048b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0048e	c1 e8 05	 shr	 eax, 5
  00491	83 e0 01	 and	 eax, 1
  00494	85 c0		 test	 eax, eax
  00496	0f 84 ae 00 00
	00		 je	 $LN43@compare_di
  0049c	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  004a1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004a5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004ab	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004b0	85 c0		 test	 eax, eax
  004b2	75 1c		 jne	 SHORT $LN38@compare_di
  004b4	41 b8 f5 00 00
	00		 mov	 r8d, 245		; 000000f5H
  004ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  004c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IEOMNDPC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  004c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004ce	33 c0		 xor	 eax, eax
$LN38@compare_di:
  004d0	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  004d5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004d8	c1 e8 07	 shr	 eax, 7
  004db	83 e0 01	 and	 eax, 1
  004de	85 c0		 test	 eax, eax
  004e0	75 1c		 jne	 SHORT $LN39@compare_di
  004e2	41 b8 f5 00 00
	00		 mov	 r8d, 245		; 000000f5H
  004e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  004ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@CAILMLIK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AA?$CJ?$AA?$AA@
  004f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004fc	33 c0		 xor	 eax, eax
$LN39@compare_di:
  004fe	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  00503	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00506	c1 e8 06	 shr	 eax, 6
  00509	83 e0 01	 and	 eax, 1
  0050c	85 c0		 test	 eax, eax
  0050e	74 15		 je	 SHORT $LN40@compare_di
  00510	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  00515	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0051b	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv298[rsp], rax
  00523	eb 13		 jmp	 SHORT $LN41@compare_di
$LN40@compare_di:
  00525	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  0052a	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00530	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv298[rsp], rax
$LN41@compare_di:
  00538	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv298[rsp]
  00540	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv307[rsp], rax
  00548	eb 3f		 jmp	 SHORT $LN44@compare_di
$LN43@compare_di:
  0054a	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  0054f	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00557	75 1c		 jne	 SHORT $LN42@compare_di
  00559	41 b8 f5 00 00
	00		 mov	 r8d, 245		; 000000f5H
  0055f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  00566	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@PCPICPBJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAa?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAa?$AAn@
  0056d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00573	33 c0		 xor	 eax, eax
$LN42@compare_di:
  00575	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  0057a	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00581	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv307[rsp], rax
$LN44@compare_di:
  00589	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  0058e	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00592	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  00597	4c 8b 40 60	 mov	 r8, QWORD PTR [rax+96]
  0059b	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR tv263[rsp]
  005a3	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv307[rsp]
  005ab	e8 00 00 00 00	 call	 _tscmp
  005b0	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 249  :     }
; 250  :     /* fallback to buffer interface for bytes, bytesarray and other */
; 251  :     else {

  005b4	e9 f9 01 00 00	 jmp	 $LN6@compare_di
$LN11@compare_di:

; 252  :         Py_buffer view_a;
; 253  :         Py_buffer view_b;
; 254  : 
; 255  :         if ((PyObject_CheckBuffer(a) == 0) & (PyObject_CheckBuffer(b) == 0)) {

  005b9	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  005be	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  005c2	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  005ca	74 23		 je	 SHORT $LN45@compare_di
  005cc	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  005d1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  005d5	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  005dc	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  005e0	74 0d		 je	 SHORT $LN45@compare_di
  005e2	c7 84 24 08 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv316[rsp], 1
  005ed	eb 0b		 jmp	 SHORT $LN46@compare_di
$LN45@compare_di:
  005ef	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv316[rsp], 0
$LN46@compare_di:
  005fa	83 bc 24 08 01
	00 00 00	 cmp	 DWORD PTR tv316[rsp], 0
  00602	75 0d		 jne	 SHORT $LN51@compare_di
  00604	c7 84 24 0c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv328[rsp], 1
  0060f	eb 0b		 jmp	 SHORT $LN52@compare_di
$LN51@compare_di:
  00611	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv328[rsp], 0
$LN52@compare_di:
  0061c	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00621	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00625	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  0062d	74 23		 je	 SHORT $LN47@compare_di
  0062f	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00634	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00638	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  0063f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00643	74 0d		 je	 SHORT $LN47@compare_di
  00645	c7 84 24 10 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv325[rsp], 1
  00650	eb 0b		 jmp	 SHORT $LN48@compare_di
$LN47@compare_di:
  00652	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN48@compare_di:
  0065d	83 bc 24 10 01
	00 00 00	 cmp	 DWORD PTR tv325[rsp], 0
  00665	75 0d		 jne	 SHORT $LN49@compare_di
  00667	c7 84 24 14 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv327[rsp], 1
  00672	eb 0b		 jmp	 SHORT $LN50@compare_di
$LN49@compare_di:
  00674	c7 84 24 14 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv327[rsp], 0
$LN50@compare_di:
  0067f	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR tv327[rsp]
  00686	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR tv328[rsp]
  0068d	23 c8		 and	 ecx, eax
  0068f	8b c1		 mov	 eax, ecx
  00691	85 c0		 test	 eax, eax
  00693	74 34		 je	 SHORT $LN5@compare_di

; 256  :             PyErr_Format(PyExc_TypeError,
; 257  :                          "unsupported operand types(s) or combination of types: "
; 258  :                          "'%.100s' and '%.100s'",
; 259  :                          Py_TYPE(a)->tp_name, Py_TYPE(b)->tp_name);

  00695	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  0069a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0069e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR a$[rsp]
  006a3	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  006a7	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  006ab	4c 8b 41 70	 mov	 r8, QWORD PTR [rcx+112]
  006af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EM@IKPOLIEF@unsupported?5operand?5types?$CIs?$CJ?5or?5@
  006b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  006bd	e8 00 00 00 00	 call	 PyErr_Format

; 260  :             return NULL;

  006c2	33 c0		 xor	 eax, eax
  006c4	e9 f2 00 00 00	 jmp	 $LN13@compare_di
$LN5@compare_di:

; 261  :         }
; 262  : 
; 263  :         if (PyObject_GetBuffer(a, &view_a, PyBUF_SIMPLE) == -1) {

  006c9	45 33 c0	 xor	 r8d, r8d
  006cc	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR view_a$20927[rsp]
  006d4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR a$[rsp]
  006d9	e8 00 00 00 00	 call	 PyObject_GetBuffer
  006de	83 f8 ff	 cmp	 eax, -1
  006e1	75 07		 jne	 SHORT $LN4@compare_di

; 264  :             return NULL;

  006e3	33 c0		 xor	 eax, eax
  006e5	e9 d1 00 00 00	 jmp	 $LN13@compare_di
$LN4@compare_di:

; 265  :         }
; 266  :         if (view_a.ndim > 1) {

  006ea	83 bc 24 b4 00
	00 00 01	 cmp	 DWORD PTR view_a$20927[rsp+36], 1
  006f2	7e 27		 jle	 SHORT $LN3@compare_di

; 267  :             PyErr_SetString(PyExc_BufferError,
; 268  :                             "Buffer must be single dimension");

  006f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  006fb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  00702	e8 00 00 00 00	 call	 PyErr_SetString

; 269  :             PyBuffer_Release(&view_a);

  00707	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR view_a$20927[rsp]
  0070f	e8 00 00 00 00	 call	 PyBuffer_Release

; 270  :             return NULL;

  00714	33 c0		 xor	 eax, eax
  00716	e9 a0 00 00 00	 jmp	 $LN13@compare_di
$LN3@compare_di:

; 271  :         }
; 272  : 
; 273  :         if (PyObject_GetBuffer(b, &view_b, PyBUF_SIMPLE) == -1) {

  0071b	45 33 c0	 xor	 r8d, r8d
  0071e	48 8d 54 24 40	 lea	 rdx, QWORD PTR view_b$20928[rsp]
  00723	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  00728	e8 00 00 00 00	 call	 PyObject_GetBuffer
  0072d	83 f8 ff	 cmp	 eax, -1
  00730	75 11		 jne	 SHORT $LN2@compare_di

; 274  :             PyBuffer_Release(&view_a);

  00732	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR view_a$20927[rsp]
  0073a	e8 00 00 00 00	 call	 PyBuffer_Release

; 275  :             return NULL;

  0073f	33 c0		 xor	 eax, eax
  00741	eb 78		 jmp	 SHORT $LN13@compare_di
$LN2@compare_di:

; 276  :         }
; 277  :         if (view_b.ndim > 1) {

  00743	83 7c 24 64 01	 cmp	 DWORD PTR view_b$20928[rsp+36], 1
  00748	7e 2e		 jle	 SHORT $LN1@compare_di

; 278  :             PyErr_SetString(PyExc_BufferError,
; 279  :                             "Buffer must be single dimension");

  0074a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@DGKHNIN@Buffer?5must?5be?5single?5dimension?$AA@
  00751	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BufferError
  00758	e8 00 00 00 00	 call	 PyErr_SetString

; 280  :             PyBuffer_Release(&view_a);

  0075d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR view_a$20927[rsp]
  00765	e8 00 00 00 00	 call	 PyBuffer_Release

; 281  :             PyBuffer_Release(&view_b);

  0076a	48 8d 4c 24 40	 lea	 rcx, QWORD PTR view_b$20928[rsp]
  0076f	e8 00 00 00 00	 call	 PyBuffer_Release

; 282  :             return NULL;

  00774	33 c0		 xor	 eax, eax
  00776	eb 43		 jmp	 SHORT $LN13@compare_di
$LN1@compare_di:

; 283  :         }
; 284  : 
; 285  :         rc = _tscmp((const unsigned char*)view_a.buf,
; 286  :                     (const unsigned char*)view_b.buf,
; 287  :                     view_a.len,
; 288  :                     view_b.len);

  00778	4c 8b 4c 24 50	 mov	 r9, QWORD PTR view_b$20928[rsp+16]
  0077d	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR view_a$20927[rsp+16]
  00785	48 8b 54 24 40	 mov	 rdx, QWORD PTR view_b$20928[rsp]
  0078a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR view_a$20927[rsp]
  00792	e8 00 00 00 00	 call	 _tscmp
  00797	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 289  : 
; 290  :         PyBuffer_Release(&view_a);

  0079b	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR view_a$20927[rsp]
  007a3	e8 00 00 00 00	 call	 PyBuffer_Release

; 291  :         PyBuffer_Release(&view_b);

  007a8	48 8d 4c 24 40	 lea	 rcx, QWORD PTR view_b$20928[rsp]
  007ad	e8 00 00 00 00	 call	 PyBuffer_Release
$LN6@compare_di:

; 292  :     }
; 293  : 
; 294  :     return PyBool_FromLong(rc);

  007b2	8b 4c 24 20	 mov	 ecx, DWORD PTR rc$[rsp]
  007b6	e8 00 00 00 00	 call	 PyBool_FromLong
$LN13@compare_di:

; 295  : }

  007bb	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  007c2	c3		 ret	 0
compare_digest ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tscmp DD imagerel _tscmp
	DD	imagerel _tscmp+240
	DD	imagerel $unwind$_tscmp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tscmp DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tscmp
_TEXT	SEGMENT
length$ = 0
i$ = 8
left$ = 16
right$ = 24
result$ = 32
tv83 = 36
a$ = 64
b$ = 72
len_a$ = 80
len_b$ = 88
_tscmp	PROC						; COMDAT

; 176  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 177  :     /* The volatile type declarations make sure that the compiler has no
; 178  :      * chance to optimize and fold the code in any way that may change
; 179  :      * the timing.
; 180  :      */
; 181  :     volatile Py_ssize_t length;
; 182  :     volatile const unsigned char *left;
; 183  :     volatile const unsigned char *right;
; 184  :     Py_ssize_t i;
; 185  :     unsigned char result;
; 186  : 
; 187  :     /* loop count depends on length of b */
; 188  :     length = len_b;

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR len_b$[rsp]
  0001d	48 89 04 24	 mov	 QWORD PTR length$[rsp], rax

; 189  :     left = NULL;

  00021	48 c7 44 24 10
	00 00 00 00	 mov	 QWORD PTR left$[rsp], 0

; 190  :     right = b;

  0002a	48 8b 44 24 48	 mov	 rax, QWORD PTR b$[rsp]
  0002f	48 89 44 24 18	 mov	 QWORD PTR right$[rsp], rax

; 191  : 
; 192  :     /* don't use else here to keep the amount of CPU instructions constant,
; 193  :      * volatile forces re-evaluation
; 194  :      *  */
; 195  :     if (len_a == length) {

  00034	48 8b 04 24	 mov	 rax, QWORD PTR length$[rsp]
  00038	48 39 44 24 50	 cmp	 QWORD PTR len_a$[rsp], rax
  0003d	75 0f		 jne	 SHORT $LN5@tscmp

; 196  :         left = *((volatile const unsigned char**)&a);

  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  00044	48 89 44 24 10	 mov	 QWORD PTR left$[rsp], rax

; 197  :         result = 0;

  00049	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp], 0
$LN5@tscmp:

; 198  :     }
; 199  :     if (len_a != length) {

  0004e	48 8b 04 24	 mov	 rax, QWORD PTR length$[rsp]
  00052	48 39 44 24 50	 cmp	 QWORD PTR len_a$[rsp], rax
  00057	74 0f		 je	 SHORT $LN4@tscmp

; 200  :         left = b;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR b$[rsp]
  0005e	48 89 44 24 10	 mov	 QWORD PTR left$[rsp], rax

; 201  :         result = 1;

  00063	c6 44 24 20 01	 mov	 BYTE PTR result$[rsp], 1
$LN4@tscmp:

; 202  :     }
; 203  : 
; 204  :     for (i=0; i < length; i++) {

  00068	48 c7 44 24 08
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00071	eb 0d		 jmp	 SHORT $LN3@tscmp
$LN2@tscmp:
  00073	48 8b 44 24 08	 mov	 rax, QWORD PTR i$[rsp]
  00078	48 ff c0	 inc	 rax
  0007b	48 89 44 24 08	 mov	 QWORD PTR i$[rsp], rax
$LN3@tscmp:
  00080	48 8b 04 24	 mov	 rax, QWORD PTR length$[rsp]
  00084	48 39 44 24 08	 cmp	 QWORD PTR i$[rsp], rax
  00089	7d 41		 jge	 SHORT $LN1@tscmp

; 205  :         result |= *left++ ^ *right++;

  0008b	48 8b 44 24 10	 mov	 rax, QWORD PTR left$[rsp]
  00090	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00093	0f b6 c0	 movzx	 eax, al
  00096	48 8b 4c 24 18	 mov	 rcx, QWORD PTR right$[rsp]
  0009b	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0009e	0f b6 c9	 movzx	 ecx, cl
  000a1	33 c1		 xor	 eax, ecx
  000a3	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR result$[rsp]
  000a8	0b c8		 or	 ecx, eax
  000aa	8b c1		 mov	 eax, ecx
  000ac	88 44 24 20	 mov	 BYTE PTR result$[rsp], al
  000b0	48 8b 44 24 18	 mov	 rax, QWORD PTR right$[rsp]
  000b5	48 ff c0	 inc	 rax
  000b8	48 89 44 24 18	 mov	 QWORD PTR right$[rsp], rax
  000bd	48 8b 44 24 10	 mov	 rax, QWORD PTR left$[rsp]
  000c2	48 ff c0	 inc	 rax
  000c5	48 89 44 24 10	 mov	 QWORD PTR left$[rsp], rax

; 206  :     }

  000ca	eb a7		 jmp	 SHORT $LN2@tscmp
$LN1@tscmp:

; 207  : 
; 208  :     return (result == 0);

  000cc	0f b6 44 24 20	 movzx	 eax, BYTE PTR result$[rsp]
  000d1	85 c0		 test	 eax, eax
  000d3	75 0a		 jne	 SHORT $LN8@tscmp
  000d5	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
  000dd	eb 08		 jmp	 SHORT $LN9@tscmp
$LN8@tscmp:
  000df	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN9@tscmp:
  000e7	8b 44 24 24	 mov	 eax, DWORD PTR tv83[rsp]

; 209  : }

  000eb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ef	c3		 ret	 0
_tscmp	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LAGLDNDE@itemgetter?$AA@		; `string'
PUBLIC	??_C@_0N@JBFKIHDO@itemgetter?$CI?$CJ?$AA@	; `string'
EXTRN	PyObject_GC_Track:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$itemgetter_new DD imagerel itemgetter_new
	DD	imagerel itemgetter_new+256
	DD	imagerel $unwind$itemgetter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$itemgetter_new DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0L@LAGLDNDE@itemgetter?$AA@
CONST	SEGMENT
??_C@_0L@LAGLDNDE@itemgetter?$AA@ DB 'itemgetter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JBFKIHDO@itemgetter?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0N@JBFKIHDO@itemgetter?$CI?$CJ?$AA@ DB 'itemgetter()', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT itemgetter_new
_TEXT	SEGMENT
nitems$ = 48
ig$ = 56
item$ = 64
tv83 = 72
type$ = 96
args$ = 104
kwds$ = 112
itemgetter_new PROC					; COMDAT

; 385  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 386  :     itemgetterobject *ig;
; 387  :     PyObject *item;
; 388  :     Py_ssize_t nitems;
; 389  : 
; 390  :     if (!_PyArg_NoKeywords("itemgetter()", kwds))

  00013	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwds$[rsp]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@JBFKIHDO@itemgetter?$CI?$CJ?$AA@
  0001f	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00024	85 c0		 test	 eax, eax
  00026	75 07		 jne	 SHORT $LN5@itemgetter

; 391  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	e9 cc 00 00 00	 jmp	 $LN6@itemgetter
$LN5@itemgetter:

; 392  : 
; 393  :     nitems = PyTuple_GET_SIZE(args);

  0002f	48 8b 44 24 68	 mov	 rax, QWORD PTR args$[rsp]
  00034	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00038	48 89 44 24 30	 mov	 QWORD PTR nitems$[rsp], rax

; 394  :     if (nitems <= 1) {

  0003d	48 83 7c 24 30
	01		 cmp	 QWORD PTR nitems$[rsp], 1
  00043	7f 34		 jg	 SHORT $LN4@itemgetter

; 395  :         if (!PyArg_UnpackTuple(args, "itemgetter", 1, 1, &item))

  00045	48 8d 44 24 40	 lea	 rax, QWORD PTR item$[rsp]
  0004a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004f	41 b9 01 00 00
	00		 mov	 r9d, 1
  00055	41 b8 01 00 00
	00		 mov	 r8d, 1
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LAGLDNDE@itemgetter?$AA@
  00062	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00067	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0006c	85 c0		 test	 eax, eax
  0006e	75 07		 jne	 SHORT $LN3@itemgetter

; 396  :             return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	e9 84 00 00 00	 jmp	 $LN6@itemgetter
$LN3@itemgetter:

; 397  :     } else

  00077	eb 0a		 jmp	 SHORT $LN2@itemgetter
$LN4@itemgetter:

; 398  :         item = args;

  00079	48 8b 44 24 68	 mov	 rax, QWORD PTR args$[rsp]
  0007e	48 89 44 24 40	 mov	 QWORD PTR item$[rsp], rax
$LN2@itemgetter:

; 399  : 
; 400  :     /* create itemgetterobject structure */
; 401  :     ig = PyObject_GC_New(itemgetterobject, &itemgetter_type);

  00083	e8 00 00 00 00	 call	 _Py_PXCTX
  00088	85 c0		 test	 eax, eax
  0008a	74 13		 je	 SHORT $LN8@itemgetter
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:itemgetter_type
  00093	e8 00 00 00 00	 call	 _PxObject_New
  00098	48 89 44 24 48	 mov	 QWORD PTR tv83[rsp], rax
  0009d	eb 11		 jmp	 SHORT $LN9@itemgetter
$LN8@itemgetter:
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:itemgetter_type
  000a6	e8 00 00 00 00	 call	 _PyObject_GC_New
  000ab	48 89 44 24 48	 mov	 QWORD PTR tv83[rsp], rax
$LN9@itemgetter:
  000b0	48 8b 44 24 48	 mov	 rax, QWORD PTR tv83[rsp]
  000b5	48 89 44 24 38	 mov	 QWORD PTR ig$[rsp], rax

; 402  :     if (ig == NULL)

  000ba	48 83 7c 24 38
	00		 cmp	 QWORD PTR ig$[rsp], 0
  000c0	75 04		 jne	 SHORT $LN1@itemgetter

; 403  :         return NULL;

  000c2	33 c0		 xor	 eax, eax
  000c4	eb 35		 jmp	 SHORT $LN6@itemgetter
$LN1@itemgetter:

; 404  : 
; 405  :     Py_INCREF(item);

  000c6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR item$[rsp]
  000cb	e8 00 00 00 00	 call	 _Py_IncRef

; 406  :     ig->item = item;

  000d0	48 8b 44 24 38	 mov	 rax, QWORD PTR ig$[rsp]
  000d5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR item$[rsp]
  000da	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 407  :     ig->nitems = nitems;

  000de	48 8b 44 24 38	 mov	 rax, QWORD PTR ig$[rsp]
  000e3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR nitems$[rsp]
  000e8	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 408  : 
; 409  :     PyObject_GC_Track(ig);

  000ec	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ig$[rsp]
  000f1	e8 00 00 00 00	 call	 PyObject_GC_Track

; 410  :     return (PyObject *)ig;

  000f6	48 8b 44 24 38	 mov	 rax, QWORD PTR ig$[rsp]
$LN6@itemgetter:

; 411  : }

  000fb	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ff	c3		 ret	 0
itemgetter_new ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$itemgetter_dealloc DD imagerel itemgetter_dealloc
	DD	imagerel itemgetter_dealloc+66
	DD	imagerel $unwind$itemgetter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$itemgetter_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT itemgetter_dealloc
_TEXT	SEGMENT
ig$ = 48
itemgetter_dealloc PROC					; COMDAT

; 415  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 416  :     PyObject_GC_UnTrack(ig);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ig$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN4@itemgetter@2:

; 417  :     Py_XDECREF(ig->item);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR ig$[rsp]
  00018	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001d	74 0e		 je	 SHORT $LN1@itemgetter@2
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR ig$[rsp]
  00024	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00028	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@itemgetter@2:
  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 e0		 jne	 SHORT $LN4@itemgetter@2

; 418  :     PyObject_GC_Del(ig);

  00033	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ig$[rsp]
  00038	e8 00 00 00 00	 call	 PyObject_GC_Del

; 419  : }

  0003d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00041	c3		 ret	 0
itemgetter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NLCIHFKF@itemgetter_traverse?$AA@	; `string'
PUBLIC	??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\operator.c
pdata	SEGMENT
$pdata$itemgetter_traverse DD imagerel itemgetter_traverse
	DD	imagerel itemgetter_traverse+116
	DD	imagerel $unwind$itemgetter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$itemgetter_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BE@NLCIHFKF@itemgetter_traverse?$AA@
CONST	SEGMENT
??_C@_0BE@NLCIHFKF@itemgetter_traverse?$AA@ DB 'itemgetter_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@
CONST	SEGMENT
??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@ DB '..\Modules\operato'
	DB	'r.c', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT itemgetter_traverse
_TEXT	SEGMENT
vret$21148 = 32
ig$ = 64
visit$ = 72
arg$ = 80
itemgetter_traverse PROC				; COMDAT

; 423  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@itemgetter@3:

; 424  :     Py_VISIT(ig->item);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@itemgetter@3
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 a8 01 00
	00		 mov	 r8d, 424		; 000001a8H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@NLCIHFKF@itemgetter_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@itemgetter@3:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR ig$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 23		 je	 SHORT $LN2@itemgetter@3
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR ig$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21148[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21148[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@itemgetter@3
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21148[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@itemgetter@3
$LN1@itemgetter@3:
$LN2@itemgetter@3:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@itemgetter@3

; 425  :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@itemgetter@3:

; 426  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
itemgetter_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EK@FDCIKBAH@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAi?$AAg?$AA?9?$AA?$DO?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAi@ ; `string'
PUBLIC	??_C@_1DA@DIIDNCDG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAg?$AA?9?$AA?$DO?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$itemgetter_call DD imagerel itemgetter_call
	DD	imagerel itemgetter_call+383
	DD	imagerel $unwind$itemgetter_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$itemgetter_call DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_1EK@FDCIKBAH@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAi?$AAg?$AA?9?$AA?$DO?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAi@
CONST	SEGMENT
??_C@_1EK@FDCIKBAH@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAi?$AAg?$AA?9?$AA?$DO?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAi@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'G', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'S', 00H, 'I'
	DB	00H, 'Z', 00H, 'E', 00H, '(', 00H, 'i', 00H, 'g', 00H, '-', 00H
	DB	'>', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'm', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@DIIDNCDG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAg?$AA?9?$AA?$DO?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@DIIDNCDG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAg?$AA?9?$AA?$DO?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'i', 00H, 'g', 00H, '-', 00H, '>', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'm', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT itemgetter_call
_TEXT	SEGMENT
i$ = 48
nitems$ = 56
result$ = 64
obj$ = 72
val$21179 = 80
item$21178 = 88
ig$ = 112
args$ = 120
kw$ = 128
itemgetter_call PROC					; COMDAT

; 430  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 431  :     PyObject *obj, *result;
; 432  :     Py_ssize_t i, nitems=ig->nitems;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR ig$[rsp]
  00018	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0001c	48 89 44 24 38	 mov	 QWORD PTR nitems$[rsp], rax

; 433  : 
; 434  :     if (!PyArg_UnpackTuple(args, "itemgetter", 1, 1, &obj))

  00021	48 8d 44 24 48	 lea	 rax, QWORD PTR obj$[rsp]
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	41 b9 01 00 00
	00		 mov	 r9d, 1
  00031	41 b8 01 00 00
	00		 mov	 r8d, 1
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LAGLDNDE@itemgetter?$AA@
  0003e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00043	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00048	85 c0		 test	 eax, eax
  0004a	75 07		 jne	 SHORT $LN7@itemgetter@4

; 435  :         return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	e9 27 01 00 00	 jmp	 $LN8@itemgetter@4
$LN7@itemgetter@4:

; 436  :     if (nitems == 1)

  00053	48 83 7c 24 38
	01		 cmp	 QWORD PTR nitems$[rsp], 1
  00059	75 18		 jne	 SHORT $LN6@itemgetter@4

; 437  :         return PyObject_GetItem(obj, ig->item);

  0005b	48 8b 44 24 70	 mov	 rax, QWORD PTR ig$[rsp]
  00060	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  00064	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00069	e8 00 00 00 00	 call	 PyObject_GetItem
  0006e	e9 07 01 00 00	 jmp	 $LN8@itemgetter@4
$LN6@itemgetter@4:

; 438  : 
; 439  :     assert(PyTuple_Check(ig->item));

  00073	48 8b 44 24 70	 mov	 rax, QWORD PTR ig$[rsp]
  00078	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0007c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00080	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00086	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0008b	85 c0		 test	 eax, eax
  0008d	75 1c		 jne	 SHORT $LN10@itemgetter@4
  0008f	41 b8 b7 01 00
	00		 mov	 r8d, 439		; 000001b7H
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@DIIDNCDG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAg?$AA?9?$AA?$DO?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a9	33 c0		 xor	 eax, eax
$LN10@itemgetter@4:

; 440  :     assert(PyTuple_GET_SIZE(ig->item) == nitems);

  000ab	48 8b 44 24 70	 mov	 rax, QWORD PTR ig$[rsp]
  000b0	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR nitems$[rsp]
  000b9	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  000bd	74 1c		 je	 SHORT $LN11@itemgetter@4
  000bf	41 b8 b8 01 00
	00		 mov	 r8d, 440		; 000001b8H
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@FDCIKBAH@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAi?$AAg?$AA?9?$AA?$DO?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAi@
  000d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d9	33 c0		 xor	 eax, eax
$LN11@itemgetter@4:

; 441  : 
; 442  :     result = PyTuple_New(nitems);

  000db	48 8b 4c 24 38	 mov	 rcx, QWORD PTR nitems$[rsp]
  000e0	e8 00 00 00 00	 call	 PyTuple_New
  000e5	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 443  :     if (result == NULL)

  000ea	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  000f0	75 07		 jne	 SHORT $LN5@itemgetter@4

; 444  :         return NULL;

  000f2	33 c0		 xor	 eax, eax
  000f4	e9 81 00 00 00	 jmp	 $LN8@itemgetter@4
$LN5@itemgetter@4:

; 445  : 
; 446  :     for (i=0 ; i < nitems ; i++) {

  000f9	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00102	eb 0d		 jmp	 SHORT $LN4@itemgetter@4
$LN3@itemgetter@4:
  00104	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00109	48 ff c0	 inc	 rax
  0010c	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN4@itemgetter@4:
  00111	48 8b 44 24 38	 mov	 rax, QWORD PTR nitems$[rsp]
  00116	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  0011b	7d 58		 jge	 SHORT $LN2@itemgetter@4

; 447  :         PyObject *item, *val;
; 448  :         item = PyTuple_GET_ITEM(ig->item, i);

  0011d	48 8b 44 24 70	 mov	 rax, QWORD PTR ig$[rsp]
  00122	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00126	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  0012b	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00130	48 89 44 24 58	 mov	 QWORD PTR item$21178[rsp], rax

; 449  :         val = PyObject_GetItem(obj, item);

  00135	48 8b 54 24 58	 mov	 rdx, QWORD PTR item$21178[rsp]
  0013a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  0013f	e8 00 00 00 00	 call	 PyObject_GetItem
  00144	48 89 44 24 50	 mov	 QWORD PTR val$21179[rsp], rax

; 450  :         if (val == NULL) {

  00149	48 83 7c 24 50
	00		 cmp	 QWORD PTR val$21179[rsp], 0
  0014f	75 0e		 jne	 SHORT $LN1@itemgetter@4

; 451  :             Py_DECREF(result);

  00151	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  00156	e8 00 00 00 00	 call	 _Py_DecRef

; 452  :             return NULL;

  0015b	33 c0		 xor	 eax, eax
  0015d	eb 1b		 jmp	 SHORT $LN8@itemgetter@4
$LN1@itemgetter@4:

; 453  :         }
; 454  :         PyTuple_SET_ITEM(result, i, val);

  0015f	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00164	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00169	48 8b 54 24 50	 mov	 rdx, QWORD PTR val$21179[rsp]
  0016e	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 455  :     }

  00173	eb 8f		 jmp	 SHORT $LN3@itemgetter@4
$LN2@itemgetter@4:

; 456  :     return result;

  00175	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
$LN8@itemgetter@4:

; 457  : }

  0017a	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0017e	c3		 ret	 0
itemgetter_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EK@EOADCKIN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@ ; `string'
PUBLIC	??_C@_1DC@JIEGLAEH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CA@LAAKKGAK@attribute?5name?5must?5be?5a?5string?$AA@ ; `string'
PUBLIC	??_C@_0L@BEIIKJME@attrgetter?$AA@		; `string'
PUBLIC	??_C@_0N@HCIEJFDN@attrgetter?$CI?$CJ?$AA@	; `string'
EXTRN	PyUnicode_Substring:PROC
EXTRN	PyUnicode_InternInPlace:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$attrgetter_new DD imagerel attrgetter_new
	DD	imagerel attrgetter_new+1891
	DD	imagerel $unwind$attrgetter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$attrgetter_new DD 021601H
	DD	01d0116H
xdata	ENDS
;	COMDAT ??_C@_1EK@EOADCKIN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@
CONST	SEGMENT
??_C@_1EK@EOADCKIN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'm', 00H, ')', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H
	DB	'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@JIEGLAEH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@JIEGLAEH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LAAKKGAK@attribute?5name?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0CA@LAAKKGAK@attribute?5name?5must?5be?5a?5string?$AA@ DB 'attribut'
	DB	'e name must be a string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BEIIKJME@attrgetter?$AA@
CONST	SEGMENT
??_C@_0L@BEIIKJME@attrgetter?$AA@ DB 'attrgetter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HCIEJFDN@attrgetter?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0N@HCIEJFDN@attrgetter?$CI?$CJ?$AA@ DB 'attrgetter()', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT attrgetter_new
_TEXT	SEGMENT
ag$ = 48
attr$ = 56
char_idx$ = 64
idx$ = 72
nattrs$ = 80
kind$21242 = 88
item_len$21240 = 96
data$21241 = 104
dot_count$21243 = 112
item$21238 = 120
unibuff_till$21299 = 128
attr_chain_item$21297 = 136
attr_chain_idx$21300 = 144
unibuff_from$21298 = 152
attr_chain$21296 = 160
tv138 = 168
tv210 = 176
tv219 = 184
tv232 = 192
tv231 = 196
tv259 = 200
tv258 = 204
tv295 = 208
type$ = 240
args$ = 248
kwds$ = 256
attrgetter_new PROC					; COMDAT

; 522  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H

; 523  :     attrgetterobject *ag;
; 524  :     PyObject *attr;
; 525  :     Py_ssize_t nattrs, idx, char_idx;
; 526  : 
; 527  :     if (!_PyArg_NoKeywords("attrgetter()", kwds))

  00016	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HCIEJFDN@attrgetter?$CI?$CJ?$AA@
  00025	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  0002a	85 c0		 test	 eax, eax
  0002c	75 07		 jne	 SHORT $LN24@attrgetter

; 528  :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	e9 26 07 00 00	 jmp	 $LN25@attrgetter
$LN24@attrgetter:

; 529  : 
; 530  :     nattrs = PyTuple_GET_SIZE(args);

  00035	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  0003d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00041	48 89 44 24 50	 mov	 QWORD PTR nattrs$[rsp], rax

; 531  :     if (nattrs <= 1) {

  00046	48 83 7c 24 50
	01		 cmp	 QWORD PTR nattrs$[rsp], 1
  0004c	7f 35		 jg	 SHORT $LN23@attrgetter

; 532  :         if (!PyArg_UnpackTuple(args, "attrgetter", 1, 1, &attr))

  0004e	48 8d 44 24 38	 lea	 rax, QWORD PTR attr$[rsp]
  00053	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00058	41 b9 01 00 00
	00		 mov	 r9d, 1
  0005e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@BEIIKJME@attrgetter?$AA@
  0006b	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00073	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00078	85 c0		 test	 eax, eax
  0007a	75 07		 jne	 SHORT $LN22@attrgetter

; 533  :             return NULL;

  0007c	33 c0		 xor	 eax, eax
  0007e	e9 d8 06 00 00	 jmp	 $LN25@attrgetter
$LN22@attrgetter:
$LN23@attrgetter:

; 534  :     }
; 535  : 
; 536  :     attr = PyTuple_New(nattrs);

  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR nattrs$[rsp]
  00088	e8 00 00 00 00	 call	 PyTuple_New
  0008d	48 89 44 24 38	 mov	 QWORD PTR attr$[rsp], rax

; 537  :     if (attr == NULL)

  00092	48 83 7c 24 38
	00		 cmp	 QWORD PTR attr$[rsp], 0
  00098	75 07		 jne	 SHORT $LN21@attrgetter

; 538  :         return NULL;

  0009a	33 c0		 xor	 eax, eax
  0009c	e9 ba 06 00 00	 jmp	 $LN25@attrgetter
$LN21@attrgetter:

; 539  : 
; 540  :     /* prepare attr while checking args */
; 541  :     for (idx = 0; idx < nattrs; ++idx) {

  000a1	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR idx$[rsp], 0
  000aa	eb 0d		 jmp	 SHORT $LN20@attrgetter
$LN19@attrgetter:
  000ac	48 8b 44 24 48	 mov	 rax, QWORD PTR idx$[rsp]
  000b1	48 ff c0	 inc	 rax
  000b4	48 89 44 24 48	 mov	 QWORD PTR idx$[rsp], rax
$LN20@attrgetter:
  000b9	48 8b 44 24 50	 mov	 rax, QWORD PTR nattrs$[rsp]
  000be	48 39 44 24 48	 cmp	 QWORD PTR idx$[rsp], rax
  000c3	0f 8d 11 06 00
	00		 jge	 $LN18@attrgetter

; 542  :         PyObject *item = PyTuple_GET_ITEM(args, idx);

  000c9	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  000d1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR idx$[rsp]
  000d6	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  000db	48 89 44 24 78	 mov	 QWORD PTR item$21238[rsp], rax

; 543  :         Py_ssize_t item_len;
; 544  :         void *data;
; 545  :         unsigned int kind;
; 546  :         int dot_count;
; 547  : 
; 548  :         if (!PyUnicode_Check(item)) {

  000e0	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  000e5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ef	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000f4	85 c0		 test	 eax, eax
  000f6	75 24		 jne	 SHORT $LN17@attrgetter

; 549  :             PyErr_SetString(PyExc_TypeError,
; 550  :                             "attribute name must be a string");

  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@LAAKKGAK@attribute?5name?5must?5be?5a?5string?$AA@
  000ff	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00106	e8 00 00 00 00	 call	 PyErr_SetString

; 551  :             Py_DECREF(attr);

  0010b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR attr$[rsp]
  00110	e8 00 00 00 00	 call	 _Py_DecRef

; 552  :             return NULL;

  00115	33 c0		 xor	 eax, eax
  00117	e9 3f 06 00 00	 jmp	 $LN25@attrgetter
$LN17@attrgetter:

; 553  :         }
; 554  :         if (PyUnicode_READY(item)) {

  0011c	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  00121	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00125	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0012b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00130	85 c0		 test	 eax, eax
  00132	75 1c		 jne	 SHORT $LN27@attrgetter
  00134	41 b8 2a 02 00
	00		 mov	 r8d, 554		; 0000022aH
  0013a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014e	33 c0		 xor	 eax, eax
$LN27@attrgetter:
  00150	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  00155	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00158	c1 e8 07	 shr	 eax, 7
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	74 0d		 je	 SHORT $LN28@attrgetter
  00162	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv138[rsp], 0
  0016d	eb 11		 jmp	 SHORT $LN29@attrgetter
$LN28@attrgetter:
  0016f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR item$21238[rsp]
  00174	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00179	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv138[rsp], eax
$LN29@attrgetter:
  00180	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR tv138[rsp], 0
  00188	74 11		 je	 SHORT $LN16@attrgetter

; 555  :             Py_DECREF(attr);

  0018a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR attr$[rsp]
  0018f	e8 00 00 00 00	 call	 _Py_DecRef

; 556  :             return NULL;

  00194	33 c0		 xor	 eax, eax
  00196	e9 c0 05 00 00	 jmp	 $LN25@attrgetter
$LN16@attrgetter:

; 557  :         }
; 558  :         item_len = PyUnicode_GET_LENGTH(item);

  0019b	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  001a0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001a4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001aa	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001af	85 c0		 test	 eax, eax
  001b1	75 1c		 jne	 SHORT $LN30@attrgetter
  001b3	41 b8 2e 02 00
	00		 mov	 r8d, 558		; 0000022eH
  001b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  001c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001cd	33 c0		 xor	 eax, eax
$LN30@attrgetter:
  001cf	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  001d4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001d7	c1 e8 07	 shr	 eax, 7
  001da	83 e0 01	 and	 eax, 1
  001dd	85 c0		 test	 eax, eax
  001df	75 1c		 jne	 SHORT $LN31@attrgetter
  001e1	41 b8 2e 02 00
	00		 mov	 r8d, 558		; 0000022eH
  001e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@JIEGLAEH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001fb	33 c0		 xor	 eax, eax
$LN31@attrgetter:
  001fd	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  00202	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00206	48 89 44 24 60	 mov	 QWORD PTR item_len$21240[rsp], rax

; 559  :         kind = PyUnicode_KIND(item);

  0020b	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  00210	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00214	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0021a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0021f	85 c0		 test	 eax, eax
  00221	75 1c		 jne	 SHORT $LN32@attrgetter
  00223	41 b8 2f 02 00
	00		 mov	 r8d, 559		; 0000022fH
  00229	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  00230	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
  00237	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0023d	33 c0		 xor	 eax, eax
$LN32@attrgetter:
  0023f	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  00244	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00247	c1 e8 07	 shr	 eax, 7
  0024a	83 e0 01	 and	 eax, 1
  0024d	85 c0		 test	 eax, eax
  0024f	75 1c		 jne	 SHORT $LN33@attrgetter
  00251	41 b8 2f 02 00
	00		 mov	 r8d, 559		; 0000022fH
  00257	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@JIEGLAEH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0026b	33 c0		 xor	 eax, eax
$LN33@attrgetter:
  0026d	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  00272	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00275	c1 e8 02	 shr	 eax, 2
  00278	83 e0 07	 and	 eax, 7
  0027b	89 44 24 58	 mov	 DWORD PTR kind$21242[rsp], eax

; 560  :         data = PyUnicode_DATA(item);

  0027f	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  00284	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00288	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0028e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00293	85 c0		 test	 eax, eax
  00295	75 1c		 jne	 SHORT $LN34@attrgetter
  00297	41 b8 30 02 00
	00		 mov	 r8d, 560		; 00000230H
  0029d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  002a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b1	33 c0		 xor	 eax, eax
$LN34@attrgetter:
  002b3	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  002b8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002bb	c1 e8 05	 shr	 eax, 5
  002be	83 e0 01	 and	 eax, 1
  002c1	85 c0		 test	 eax, eax
  002c3	0f 84 ae 00 00
	00		 je	 $LN40@attrgetter
  002c9	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  002ce	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002d2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002d8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002dd	85 c0		 test	 eax, eax
  002df	75 1c		 jne	 SHORT $LN35@attrgetter
  002e1	41 b8 30 02 00
	00		 mov	 r8d, 560		; 00000230H
  002e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  002ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@FHCHNJKO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
  002f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002fb	33 c0		 xor	 eax, eax
$LN35@attrgetter:
  002fd	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  00302	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00305	c1 e8 07	 shr	 eax, 7
  00308	83 e0 01	 and	 eax, 1
  0030b	85 c0		 test	 eax, eax
  0030d	75 1c		 jne	 SHORT $LN36@attrgetter
  0030f	41 b8 30 02 00
	00		 mov	 r8d, 560		; 00000230H
  00315	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  0031c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@JIEGLAEH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$AA@
  00323	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00329	33 c0		 xor	 eax, eax
$LN36@attrgetter:
  0032b	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  00330	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00333	c1 e8 06	 shr	 eax, 6
  00336	83 e0 01	 and	 eax, 1
  00339	85 c0		 test	 eax, eax
  0033b	74 15		 je	 SHORT $LN37@attrgetter
  0033d	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  00342	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00348	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv210[rsp], rax
  00350	eb 13		 jmp	 SHORT $LN38@attrgetter
$LN37@attrgetter:
  00352	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  00357	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0035d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv210[rsp], rax
$LN38@attrgetter:
  00365	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv210[rsp]
  0036d	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv219[rsp], rax
  00375	eb 3f		 jmp	 SHORT $LN41@attrgetter
$LN40@attrgetter:
  00377	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  0037c	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00384	75 1c		 jne	 SHORT $LN39@attrgetter
  00386	41 b8 30 02 00
	00		 mov	 r8d, 560		; 00000230H
  0038c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  00393	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@EOADCKIN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAi?$AAt?$AAe?$AAm?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@
  0039a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003a0	33 c0		 xor	 eax, eax
$LN39@attrgetter:
  003a2	48 8b 44 24 78	 mov	 rax, QWORD PTR item$21238[rsp]
  003a7	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  003ae	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv219[rsp], rax
$LN41@attrgetter:
  003b6	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv219[rsp]
  003be	48 89 44 24 68	 mov	 QWORD PTR data$21241[rsp], rax

; 561  : 
; 562  :         /* check whethere the string is dotted */
; 563  :         dot_count = 0;

  003c3	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR dot_count$21243[rsp], 0

; 564  :         for (char_idx = 0; char_idx < item_len; ++char_idx) {

  003cb	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR char_idx$[rsp], 0
  003d4	eb 0d		 jmp	 SHORT $LN15@attrgetter
$LN14@attrgetter:
  003d6	48 8b 44 24 40	 mov	 rax, QWORD PTR char_idx$[rsp]
  003db	48 ff c0	 inc	 rax
  003de	48 89 44 24 40	 mov	 QWORD PTR char_idx$[rsp], rax
$LN15@attrgetter:
  003e3	48 8b 44 24 60	 mov	 rax, QWORD PTR item_len$21240[rsp]
  003e8	48 39 44 24 40	 cmp	 QWORD PTR char_idx$[rsp], rax
  003ed	7d 7c		 jge	 SHORT $LN13@attrgetter

; 565  :             if (PyUnicode_READ(kind, data, char_idx) == '.')

  003ef	83 7c 24 58 01	 cmp	 DWORD PTR kind$21242[rsp], 1
  003f4	75 1c		 jne	 SHORT $LN44@attrgetter
  003f6	48 8b 44 24 40	 mov	 rax, QWORD PTR char_idx$[rsp]
  003fb	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$21241[rsp]
  00400	48 03 c8	 add	 rcx, rax
  00403	48 8b c1	 mov	 rax, rcx
  00406	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00409	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv232[rsp], eax
  00410	eb 40		 jmp	 SHORT $LN45@attrgetter
$LN44@attrgetter:
  00412	83 7c 24 58 02	 cmp	 DWORD PTR kind$21242[rsp], 2
  00417	75 17		 jne	 SHORT $LN42@attrgetter
  00419	48 8b 44 24 68	 mov	 rax, QWORD PTR data$21241[rsp]
  0041e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR char_idx$[rsp]
  00423	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00427	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv231[rsp], eax
  0042e	eb 14		 jmp	 SHORT $LN43@attrgetter
$LN42@attrgetter:
  00430	48 8b 44 24 68	 mov	 rax, QWORD PTR data$21241[rsp]
  00435	48 8b 4c 24 40	 mov	 rcx, QWORD PTR char_idx$[rsp]
  0043a	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0043d	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv231[rsp], eax
$LN43@attrgetter:
  00444	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv231[rsp]
  0044b	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv232[rsp], eax
$LN45@attrgetter:
  00452	83 bc 24 c0 00
	00 00 2e	 cmp	 DWORD PTR tv232[rsp], 46 ; 0000002eH
  0045a	75 0a		 jne	 SHORT $LN12@attrgetter

; 566  :                 ++dot_count;

  0045c	8b 44 24 70	 mov	 eax, DWORD PTR dot_count$21243[rsp]
  00460	ff c0		 inc	 eax
  00462	89 44 24 70	 mov	 DWORD PTR dot_count$21243[rsp], eax
$LN12@attrgetter:

; 567  :         }

  00466	e9 6b ff ff ff	 jmp	 $LN14@attrgetter
$LN13@attrgetter:

; 568  : 
; 569  :         if (dot_count == 0) {

  0046b	83 7c 24 70 00	 cmp	 DWORD PTR dot_count$21243[rsp], 0
  00470	75 2d		 jne	 SHORT $LN11@attrgetter

; 570  :             Py_INCREF(item);

  00472	48 8b 4c 24 78	 mov	 rcx, QWORD PTR item$21238[rsp]
  00477	e8 00 00 00 00	 call	 _Py_IncRef

; 571  :             PyUnicode_InternInPlace(&item);

  0047c	48 8d 4c 24 78	 lea	 rcx, QWORD PTR item$21238[rsp]
  00481	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 572  :             PyTuple_SET_ITEM(attr, idx, item);

  00486	48 8b 44 24 38	 mov	 rax, QWORD PTR attr$[rsp]
  0048b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR idx$[rsp]
  00490	48 8b 54 24 78	 mov	 rdx, QWORD PTR item$21238[rsp]
  00495	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 573  :         } else { /* make it a tuple of non-dotted attrnames */

  0049a	e9 36 02 00 00	 jmp	 $LN10@attrgetter
$LN11@attrgetter:

; 574  :             PyObject *attr_chain = PyTuple_New(dot_count + 1);

  0049f	8b 44 24 70	 mov	 eax, DWORD PTR dot_count$21243[rsp]
  004a3	ff c0		 inc	 eax
  004a5	48 98		 cdqe
  004a7	48 8b c8	 mov	 rcx, rax
  004aa	e8 00 00 00 00	 call	 PyTuple_New
  004af	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR attr_chain$21296[rsp], rax

; 575  :             PyObject *attr_chain_item;
; 576  :             Py_ssize_t unibuff_from = 0;

  004b7	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR unibuff_from$21298[rsp], 0

; 577  :             Py_ssize_t unibuff_till = 0;

  004c3	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR unibuff_till$21299[rsp], 0

; 578  :             Py_ssize_t attr_chain_idx = 0;

  004cf	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR attr_chain_idx$21300[rsp], 0

; 579  : 
; 580  :             if (attr_chain == NULL) {

  004db	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR attr_chain$21296[rsp], 0
  004e4	75 11		 jne	 SHORT $LN9@attrgetter

; 581  :                 Py_DECREF(attr);

  004e6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR attr$[rsp]
  004eb	e8 00 00 00 00	 call	 _Py_DecRef

; 582  :                 return NULL;

  004f0	33 c0		 xor	 eax, eax
  004f2	e9 64 02 00 00	 jmp	 $LN25@attrgetter
$LN9@attrgetter:

; 583  :             }
; 584  : 
; 585  :             for (; dot_count > 0; --dot_count) {

  004f7	eb 0a		 jmp	 SHORT $LN8@attrgetter
$LN7@attrgetter:
  004f9	8b 44 24 70	 mov	 eax, DWORD PTR dot_count$21243[rsp]
  004fd	ff c8		 dec	 eax
  004ff	89 44 24 70	 mov	 DWORD PTR dot_count$21243[rsp], eax
$LN8@attrgetter:
  00503	83 7c 24 70 00	 cmp	 DWORD PTR dot_count$21243[rsp], 0
  00508	0f 8e 3e 01 00
	00		 jle	 $LN6@attrgetter
$LN5@attrgetter:

; 586  :                 while (PyUnicode_READ(kind, data, unibuff_till) != '.') {

  0050e	83 7c 24 58 01	 cmp	 DWORD PTR kind$21242[rsp], 1
  00513	75 1f		 jne	 SHORT $LN48@attrgetter
  00515	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR unibuff_till$21299[rsp]
  0051d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$21241[rsp]
  00522	48 03 c8	 add	 rcx, rax
  00525	48 8b c1	 mov	 rax, rcx
  00528	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0052b	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv259[rsp], eax
  00532	eb 46		 jmp	 SHORT $LN49@attrgetter
$LN48@attrgetter:
  00534	83 7c 24 58 02	 cmp	 DWORD PTR kind$21242[rsp], 2
  00539	75 1a		 jne	 SHORT $LN46@attrgetter
  0053b	48 8b 44 24 68	 mov	 rax, QWORD PTR data$21241[rsp]
  00540	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR unibuff_till$21299[rsp]
  00548	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0054c	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv258[rsp], eax
  00553	eb 17		 jmp	 SHORT $LN47@attrgetter
$LN46@attrgetter:
  00555	48 8b 44 24 68	 mov	 rax, QWORD PTR data$21241[rsp]
  0055a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR unibuff_till$21299[rsp]
  00562	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00565	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv258[rsp], eax
$LN47@attrgetter:
  0056c	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR tv258[rsp]
  00573	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv259[rsp], eax
$LN49@attrgetter:
  0057a	83 bc 24 c8 00
	00 00 2e	 cmp	 DWORD PTR tv259[rsp], 46 ; 0000002eH
  00582	74 18		 je	 SHORT $LN4@attrgetter

; 587  :                     ++unibuff_till;

  00584	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR unibuff_till$21299[rsp]
  0058c	48 ff c0	 inc	 rax
  0058f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR unibuff_till$21299[rsp], rax

; 588  :                 }

  00597	e9 72 ff ff ff	 jmp	 $LN5@attrgetter
$LN4@attrgetter:

; 589  :                 attr_chain_item = PyUnicode_Substring(item,
; 590  :                                       unibuff_from,
; 591  :                                       unibuff_till);

  0059c	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR unibuff_till$21299[rsp]
  005a4	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR unibuff_from$21298[rsp]
  005ac	48 8b 4c 24 78	 mov	 rcx, QWORD PTR item$21238[rsp]
  005b1	e8 00 00 00 00	 call	 PyUnicode_Substring
  005b6	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR attr_chain_item$21297[rsp], rax

; 592  :                 if (attr_chain_item == NULL) {

  005be	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR attr_chain_item$21297[rsp], 0
  005c7	75 1e		 jne	 SHORT $LN3@attrgetter

; 593  :                     Py_DECREF(attr_chain);

  005c9	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR attr_chain$21296[rsp]
  005d1	e8 00 00 00 00	 call	 _Py_DecRef

; 594  :                     Py_DECREF(attr);

  005d6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR attr$[rsp]
  005db	e8 00 00 00 00	 call	 _Py_DecRef

; 595  :                     return NULL;

  005e0	33 c0		 xor	 eax, eax
  005e2	e9 74 01 00 00	 jmp	 $LN25@attrgetter
$LN3@attrgetter:

; 596  :                 }
; 597  :                 PyUnicode_InternInPlace(&attr_chain_item);

  005e7	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR attr_chain_item$21297[rsp]
  005ef	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 598  :                 PyTuple_SET_ITEM(attr_chain, attr_chain_idx, attr_chain_item);

  005f4	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR attr_chain$21296[rsp]
  005fc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR attr_chain_idx$21300[rsp]
  00604	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR attr_chain_item$21297[rsp]
  0060c	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 599  :                 ++attr_chain_idx;

  00611	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR attr_chain_idx$21300[rsp]
  00619	48 ff c0	 inc	 rax
  0061c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR attr_chain_idx$21300[rsp], rax

; 600  :                 unibuff_till = unibuff_from = unibuff_till + 1;

  00624	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR unibuff_till$21299[rsp]
  0062c	48 ff c0	 inc	 rax
  0062f	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR unibuff_from$21298[rsp], rax
  00637	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR unibuff_from$21298[rsp]
  0063f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR unibuff_till$21299[rsp], rax

; 601  :             }

  00647	e9 ad fe ff ff	 jmp	 $LN7@attrgetter
$LN6@attrgetter:

; 602  : 
; 603  :             /* now add the last dotless name */
; 604  :             attr_chain_item = PyUnicode_Substring(item,
; 605  :                                                   unibuff_from, item_len);

  0064c	4c 8b 44 24 60	 mov	 r8, QWORD PTR item_len$21240[rsp]
  00651	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR unibuff_from$21298[rsp]
  00659	48 8b 4c 24 78	 mov	 rcx, QWORD PTR item$21238[rsp]
  0065e	e8 00 00 00 00	 call	 PyUnicode_Substring
  00663	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR attr_chain_item$21297[rsp], rax

; 606  :             if (attr_chain_item == NULL) {

  0066b	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR attr_chain_item$21297[rsp], 0
  00674	75 1e		 jne	 SHORT $LN2@attrgetter

; 607  :                 Py_DECREF(attr_chain);

  00676	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR attr_chain$21296[rsp]
  0067e	e8 00 00 00 00	 call	 _Py_DecRef

; 608  :                 Py_DECREF(attr);

  00683	48 8b 4c 24 38	 mov	 rcx, QWORD PTR attr$[rsp]
  00688	e8 00 00 00 00	 call	 _Py_DecRef

; 609  :                 return NULL;

  0068d	33 c0		 xor	 eax, eax
  0068f	e9 c7 00 00 00	 jmp	 $LN25@attrgetter
$LN2@attrgetter:

; 610  :             }
; 611  :             PyUnicode_InternInPlace(&attr_chain_item);

  00694	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR attr_chain_item$21297[rsp]
  0069c	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 612  :             PyTuple_SET_ITEM(attr_chain, attr_chain_idx, attr_chain_item);

  006a1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR attr_chain$21296[rsp]
  006a9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR attr_chain_idx$21300[rsp]
  006b1	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR attr_chain_item$21297[rsp]
  006b9	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 613  : 
; 614  :             PyTuple_SET_ITEM(attr, idx, attr_chain);

  006be	48 8b 44 24 38	 mov	 rax, QWORD PTR attr$[rsp]
  006c3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR idx$[rsp]
  006c8	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR attr_chain$21296[rsp]
  006d0	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx
$LN10@attrgetter:

; 615  :         }
; 616  :     }

  006d5	e9 d2 f9 ff ff	 jmp	 $LN19@attrgetter
$LN18@attrgetter:

; 617  : 
; 618  :     /* create attrgetterobject structure */
; 619  :     ag = PyObject_GC_New(attrgetterobject, &attrgetter_type);

  006da	e8 00 00 00 00	 call	 _Py_PXCTX
  006df	85 c0		 test	 eax, eax
  006e1	74 16		 je	 SHORT $LN50@attrgetter
  006e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attrgetter_type
  006ea	e8 00 00 00 00	 call	 _PxObject_New
  006ef	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv295[rsp], rax
  006f7	eb 14		 jmp	 SHORT $LN51@attrgetter
$LN50@attrgetter:
  006f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attrgetter_type
  00700	e8 00 00 00 00	 call	 _PyObject_GC_New
  00705	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv295[rsp], rax
$LN51@attrgetter:
  0070d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv295[rsp]
  00715	48 89 44 24 30	 mov	 QWORD PTR ag$[rsp], rax

; 620  :     if (ag == NULL) {

  0071a	48 83 7c 24 30
	00		 cmp	 QWORD PTR ag$[rsp], 0
  00720	75 0e		 jne	 SHORT $LN1@attrgetter

; 621  :         Py_DECREF(attr);

  00722	48 8b 4c 24 38	 mov	 rcx, QWORD PTR attr$[rsp]
  00727	e8 00 00 00 00	 call	 _Py_DecRef

; 622  :         return NULL;

  0072c	33 c0		 xor	 eax, eax
  0072e	eb 2b		 jmp	 SHORT $LN25@attrgetter
$LN1@attrgetter:

; 623  :     }
; 624  : 
; 625  :     ag->attr = attr;

  00730	48 8b 44 24 30	 mov	 rax, QWORD PTR ag$[rsp]
  00735	48 8b 4c 24 38	 mov	 rcx, QWORD PTR attr$[rsp]
  0073a	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 626  :     ag->nattrs = nattrs;

  0073e	48 8b 44 24 30	 mov	 rax, QWORD PTR ag$[rsp]
  00743	48 8b 4c 24 50	 mov	 rcx, QWORD PTR nattrs$[rsp]
  00748	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 627  : 
; 628  :     PyObject_GC_Track(ag);

  0074c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ag$[rsp]
  00751	e8 00 00 00 00	 call	 PyObject_GC_Track

; 629  :     return (PyObject *)ag;

  00756	48 8b 44 24 30	 mov	 rax, QWORD PTR ag$[rsp]
$LN25@attrgetter:

; 630  : }

  0075b	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  00762	c3		 ret	 0
attrgetter_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$attrgetter_dealloc DD imagerel attrgetter_dealloc
	DD	imagerel attrgetter_dealloc+66
	DD	imagerel $unwind$attrgetter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$attrgetter_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT attrgetter_dealloc
_TEXT	SEGMENT
ag$ = 48
attrgetter_dealloc PROC					; COMDAT

; 634  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 635  :     PyObject_GC_UnTrack(ag);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ag$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN4@attrgetter@2:

; 636  :     Py_XDECREF(ag->attr);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR ag$[rsp]
  00018	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001d	74 0e		 je	 SHORT $LN1@attrgetter@2
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR ag$[rsp]
  00024	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00028	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@attrgetter@2:
  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 e0		 jne	 SHORT $LN4@attrgetter@2

; 637  :     PyObject_GC_Del(ag);

  00033	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ag$[rsp]
  00038	e8 00 00 00 00	 call	 PyObject_GC_Del

; 638  : }

  0003d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00041	c3		 ret	 0
attrgetter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@FGNBODEG@attrgetter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$attrgetter_traverse DD imagerel attrgetter_traverse
	DD	imagerel attrgetter_traverse+116
	DD	imagerel $unwind$attrgetter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$attrgetter_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BE@FGNBODEG@attrgetter_traverse?$AA@
CONST	SEGMENT
??_C@_0BE@FGNBODEG@attrgetter_traverse?$AA@ DB 'attrgetter_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT attrgetter_traverse
_TEXT	SEGMENT
vret$21358 = 32
ag$ = 64
visit$ = 72
arg$ = 80
attrgetter_traverse PROC				; COMDAT

; 642  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@attrgetter@3:

; 643  :     Py_VISIT(ag->attr);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@attrgetter@3
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 83 02 00
	00		 mov	 r8d, 643		; 00000283H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FGNBODEG@attrgetter_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@attrgetter@3:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR ag$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 23		 je	 SHORT $LN2@attrgetter@3
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR ag$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21358[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21358[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@attrgetter@3
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21358[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@attrgetter@3
$LN1@attrgetter@3:
$LN2@attrgetter@3:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@attrgetter@3

; 644  :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@attrgetter@3:

; 645  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
attrgetter_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EK@LDIAMCIG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAa?$AAg?$AA?9?$AA?$DO?$AAa?$AAt?$AAt?$AAr?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAa@ ; `string'
PUBLIC	??_C@_1DA@OBMFPDIB@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAg?$AA?9?$AA?$DO?$AAa?$AAt?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$attrgetter_call DD imagerel attrgetter_call
	DD	imagerel attrgetter_call+391
	DD	imagerel $unwind$attrgetter_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$attrgetter_call DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_1EK@LDIAMCIG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAa?$AAg?$AA?9?$AA?$DO?$AAa?$AAt?$AAt?$AAr?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAa@
CONST	SEGMENT
??_C@_1EK@LDIAMCIG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAa?$AAg?$AA?9?$AA?$DO?$AAa?$AAt?$AAt?$AAr?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAa@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'G', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'S', 00H, 'I'
	DB	00H, 'Z', 00H, 'E', 00H, '(', 00H, 'a', 00H, 'g', 00H, '-', 00H
	DB	'>', 00H, 'a', 00H, 't', 00H, 't', 00H, 'r', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'n', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'r', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@OBMFPDIB@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAg?$AA?9?$AA?$DO?$AAa?$AAt?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@OBMFPDIB@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAg?$AA?9?$AA?$DO?$AAa?$AAt?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'a', 00H, 'g', 00H, '-', 00H, '>', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'r', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT attrgetter_call
_TEXT	SEGMENT
i$ = 48
nattrs$ = 56
result$ = 64
obj$ = 72
attr$21415 = 80
val$21416 = 88
ag$ = 112
args$ = 120
kw$ = 128
attrgetter_call PROC					; COMDAT

; 682  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 683  :     PyObject *obj, *result;
; 684  :     Py_ssize_t i, nattrs=ag->nattrs;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR ag$[rsp]
  00018	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0001c	48 89 44 24 38	 mov	 QWORD PTR nattrs$[rsp], rax

; 685  : 
; 686  :     if (!PyArg_UnpackTuple(args, "attrgetter", 1, 1, &obj))

  00021	48 8d 44 24 48	 lea	 rax, QWORD PTR obj$[rsp]
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	41 b9 01 00 00
	00		 mov	 r9d, 1
  00031	41 b8 01 00 00
	00		 mov	 r8d, 1
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@BEIIKJME@attrgetter?$AA@
  0003e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00043	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00048	85 c0		 test	 eax, eax
  0004a	75 07		 jne	 SHORT $LN7@attrgetter@4

; 687  :         return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	e9 2f 01 00 00	 jmp	 $LN8@attrgetter@4
$LN7@attrgetter@4:

; 688  :     if (ag->nattrs == 1) /* ag->attr is always a tuple */

  00053	48 8b 44 24 70	 mov	 rax, QWORD PTR ag$[rsp]
  00058	48 83 78 60 01	 cmp	 QWORD PTR [rax+96], 1
  0005d	75 1c		 jne	 SHORT $LN6@attrgetter@4

; 689  :         return dotted_getattr(obj, PyTuple_GET_ITEM(ag->attr, 0));

  0005f	48 8b 44 24 70	 mov	 rax, QWORD PTR ag$[rsp]
  00064	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00068	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  0006c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00071	e8 00 00 00 00	 call	 dotted_getattr
  00076	e9 07 01 00 00	 jmp	 $LN8@attrgetter@4
$LN6@attrgetter@4:

; 690  : 
; 691  :     assert(PyTuple_Check(ag->attr));

  0007b	48 8b 44 24 70	 mov	 rax, QWORD PTR ag$[rsp]
  00080	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00084	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00088	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008e	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00093	85 c0		 test	 eax, eax
  00095	75 1c		 jne	 SHORT $LN10@attrgetter@4
  00097	41 b8 b3 02 00
	00		 mov	 r8d, 691		; 000002b3H
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  000a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@OBMFPDIB@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAg?$AA?9?$AA?$DO?$AAa?$AAt?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b1	33 c0		 xor	 eax, eax
$LN10@attrgetter@4:

; 692  :     assert(PyTuple_GET_SIZE(ag->attr) == nattrs);

  000b3	48 8b 44 24 70	 mov	 rax, QWORD PTR ag$[rsp]
  000b8	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000bc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR nattrs$[rsp]
  000c1	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  000c5	74 1c		 je	 SHORT $LN11@attrgetter@4
  000c7	41 b8 b4 02 00
	00		 mov	 r8d, 692		; 000002b4H
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@BBHCFFBJ@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?4?$AAc?$AA?$AA@
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@LDIAMCIG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAa?$AAg?$AA?9?$AA?$DO?$AAa?$AAt?$AAt?$AAr?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAa@
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e1	33 c0		 xor	 eax, eax
$LN11@attrgetter@4:

; 693  : 
; 694  :     result = PyTuple_New(nattrs);

  000e3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR nattrs$[rsp]
  000e8	e8 00 00 00 00	 call	 PyTuple_New
  000ed	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 695  :     if (result == NULL)

  000f2	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  000f8	75 07		 jne	 SHORT $LN5@attrgetter@4

; 696  :         return NULL;

  000fa	33 c0		 xor	 eax, eax
  000fc	e9 81 00 00 00	 jmp	 $LN8@attrgetter@4
$LN5@attrgetter@4:

; 697  : 
; 698  :     for (i=0 ; i < nattrs ; i++) {

  00101	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0010a	eb 0d		 jmp	 SHORT $LN4@attrgetter@4
$LN3@attrgetter@4:
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00111	48 ff c0	 inc	 rax
  00114	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN4@attrgetter@4:
  00119	48 8b 44 24 38	 mov	 rax, QWORD PTR nattrs$[rsp]
  0011e	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  00123	7d 58		 jge	 SHORT $LN2@attrgetter@4

; 699  :         PyObject *attr, *val;
; 700  :         attr = PyTuple_GET_ITEM(ag->attr, i);

  00125	48 8b 44 24 70	 mov	 rax, QWORD PTR ag$[rsp]
  0012a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0012e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00133	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00138	48 89 44 24 50	 mov	 QWORD PTR attr$21415[rsp], rax

; 701  :         val = dotted_getattr(obj, attr);

  0013d	48 8b 54 24 50	 mov	 rdx, QWORD PTR attr$21415[rsp]
  00142	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00147	e8 00 00 00 00	 call	 dotted_getattr
  0014c	48 89 44 24 58	 mov	 QWORD PTR val$21416[rsp], rax

; 702  :         if (val == NULL) {

  00151	48 83 7c 24 58
	00		 cmp	 QWORD PTR val$21416[rsp], 0
  00157	75 0e		 jne	 SHORT $LN1@attrgetter@4

; 703  :             Py_DECREF(result);

  00159	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  0015e	e8 00 00 00 00	 call	 _Py_DecRef

; 704  :             return NULL;

  00163	33 c0		 xor	 eax, eax
  00165	eb 1b		 jmp	 SHORT $LN8@attrgetter@4
$LN1@attrgetter@4:

; 705  :         }
; 706  :         PyTuple_SET_ITEM(result, i, val);

  00167	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  0016c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00171	48 8b 54 24 58	 mov	 rdx, QWORD PTR val$21416[rsp]
  00176	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 707  :     }

  0017b	eb 8f		 jmp	 SHORT $LN3@attrgetter@4
$LN2@attrgetter@4:

; 708  :     return result;

  0017d	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
$LN8@attrgetter@4:

; 709  : }

  00182	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00186	c3		 ret	 0
attrgetter_call ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttr:PROC
EXTRN	PyTuple_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$dotted_getattr DD imagerel dotted_getattr
	DD	imagerel dotted_getattr+233
	DD	imagerel $unwind$dotted_getattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dotted_getattr DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dotted_getattr
_TEXT	SEGMENT
newobj$ = 32
attr_name$21372 = 40
name_count$21371 = 48
name_idx$21370 = 56
obj$ = 80
attr$ = 88
dotted_getattr PROC					; COMDAT

; 649  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 650  :     PyObject *newobj;
; 651  : 
; 652  :     /* attr is either a tuple or instance of str.
; 653  :        Ensured by the setup code of attrgetter_new */
; 654  :     if (PyTuple_CheckExact(attr)) { /* chained getattr */

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00015	48 8b 4c 24 58	 mov	 rcx, QWORD PTR attr$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	0f 85 91 00 00
	00		 jne	 $LN7@dotted_get

; 655  :         Py_ssize_t name_idx = 0, name_count;

  00024	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR name_idx$21370[rsp], 0

; 656  :         PyObject *attr_name;
; 657  : 
; 658  :         name_count = PyTuple_GET_SIZE(attr);

  0002d	48 8b 44 24 58	 mov	 rax, QWORD PTR attr$[rsp]
  00032	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00036	48 89 44 24 30	 mov	 QWORD PTR name_count$21371[rsp], rax

; 659  :         Py_INCREF(obj);

  0003b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00040	e8 00 00 00 00	 call	 _Py_IncRef

; 660  :         for (name_idx = 0; name_idx < name_count; ++name_idx) {

  00045	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR name_idx$21370[rsp], 0
  0004e	eb 0d		 jmp	 SHORT $LN6@dotted_get
$LN5@dotted_get:
  00050	48 8b 44 24 38	 mov	 rax, QWORD PTR name_idx$21370[rsp]
  00055	48 ff c0	 inc	 rax
  00058	48 89 44 24 38	 mov	 QWORD PTR name_idx$21370[rsp], rax
$LN6@dotted_get:
  0005d	48 8b 44 24 30	 mov	 rax, QWORD PTR name_count$21371[rsp]
  00062	48 39 44 24 38	 cmp	 QWORD PTR name_idx$21370[rsp], rax
  00067	7d 4a		 jge	 SHORT $LN4@dotted_get

; 661  :             attr_name = PyTuple_GET_ITEM(attr, name_idx);

  00069	48 8b 44 24 58	 mov	 rax, QWORD PTR attr$[rsp]
  0006e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR name_idx$21370[rsp]
  00073	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00078	48 89 44 24 28	 mov	 QWORD PTR attr_name$21372[rsp], rax

; 662  :             newobj = PyObject_GetAttr(obj, attr_name);

  0007d	48 8b 54 24 28	 mov	 rdx, QWORD PTR attr_name$21372[rsp]
  00082	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00087	e8 00 00 00 00	 call	 PyObject_GetAttr
  0008c	48 89 44 24 20	 mov	 QWORD PTR newobj$[rsp], rax

; 663  :             Py_DECREF(obj);

  00091	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00096	e8 00 00 00 00	 call	 _Py_DecRef

; 664  :             if (newobj == NULL) {

  0009b	48 83 7c 24 20
	00		 cmp	 QWORD PTR newobj$[rsp], 0
  000a1	75 04		 jne	 SHORT $LN3@dotted_get

; 665  :                 return NULL;

  000a3	33 c0		 xor	 eax, eax
  000a5	eb 3d		 jmp	 SHORT $LN8@dotted_get
$LN3@dotted_get:

; 666  :             }
; 667  :             /* here */
; 668  :             obj = newobj;

  000a7	48 8b 44 24 20	 mov	 rax, QWORD PTR newobj$[rsp]
  000ac	48 89 44 24 50	 mov	 QWORD PTR obj$[rsp], rax

; 669  :         }

  000b1	eb 9d		 jmp	 SHORT $LN5@dotted_get
$LN4@dotted_get:

; 670  :     } else { /* single getattr */

  000b3	eb 2a		 jmp	 SHORT $LN2@dotted_get
$LN7@dotted_get:

; 671  :         newobj = PyObject_GetAttr(obj, attr);

  000b5	48 8b 54 24 58	 mov	 rdx, QWORD PTR attr$[rsp]
  000ba	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  000bf	e8 00 00 00 00	 call	 PyObject_GetAttr
  000c4	48 89 44 24 20	 mov	 QWORD PTR newobj$[rsp], rax

; 672  :         if (newobj == NULL)

  000c9	48 83 7c 24 20
	00		 cmp	 QWORD PTR newobj$[rsp], 0
  000cf	75 04		 jne	 SHORT $LN1@dotted_get

; 673  :             return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	eb 0f		 jmp	 SHORT $LN8@dotted_get
$LN1@dotted_get:

; 674  :         obj = newobj;

  000d5	48 8b 44 24 20	 mov	 rax, QWORD PTR newobj$[rsp]
  000da	48 89 44 24 50	 mov	 QWORD PTR obj$[rsp], rax
$LN2@dotted_get:

; 675  :     }
; 676  : 
; 677  :     return obj;

  000df	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
$LN8@dotted_get:

; 678  : }

  000e4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e8	c3		 ret	 0
dotted_getattr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DK@JOKGBCGJ@methodcaller?5needs?5at?5least?5one?5@ ; `string'
EXTRN	PyTuple_GetSlice:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$methodcaller_new DD imagerel methodcaller_new
	DD	imagerel methodcaller_new+288
	DD	imagerel $unwind$methodcaller_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$methodcaller_new DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0DK@JOKGBCGJ@methodcaller?5needs?5at?5least?5one?5@
CONST	SEGMENT
??_C@_0DK@JOKGBCGJ@methodcaller?5needs?5at?5least?5one?5@ DB 'methodcalle'
	DB	'r needs at least one argument, the method name', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT methodcaller_new
_TEXT	SEGMENT
newargs$ = 32
name$ = 40
mc$ = 48
tv74 = 56
type$ = 80
args$ = 88
kwds$ = 96
methodcaller_new PROC					; COMDAT

; 777  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 778  :     methodcallerobject *mc;
; 779  :     PyObject *name, *newargs;
; 780  : 
; 781  :     if (PyTuple_GET_SIZE(args) < 1) {

  00013	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  00018	48 83 78 60 01	 cmp	 QWORD PTR [rax+96], 1
  0001d	7d 1a		 jge	 SHORT $LN7@methodcall

; 782  :         PyErr_SetString(PyExc_TypeError, "methodcaller needs at least "
; 783  :                         "one argument, the method name");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DK@JOKGBCGJ@methodcaller?5needs?5at?5least?5one?5@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 784  :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	e9 e2 00 00 00	 jmp	 $LN8@methodcall
$LN7@methodcall:

; 785  :     }
; 786  : 
; 787  :     /* create methodcallerobject structure */
; 788  :     mc = PyObject_GC_New(methodcallerobject, &methodcaller_type);

  00039	e8 00 00 00 00	 call	 _Py_PXCTX
  0003e	85 c0		 test	 eax, eax
  00040	74 13		 je	 SHORT $LN10@methodcall
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:methodcaller_type
  00049	e8 00 00 00 00	 call	 _PxObject_New
  0004e	48 89 44 24 38	 mov	 QWORD PTR tv74[rsp], rax
  00053	eb 11		 jmp	 SHORT $LN11@methodcall
$LN10@methodcall:
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:methodcaller_type
  0005c	e8 00 00 00 00	 call	 _PyObject_GC_New
  00061	48 89 44 24 38	 mov	 QWORD PTR tv74[rsp], rax
$LN11@methodcall:
  00066	48 8b 44 24 38	 mov	 rax, QWORD PTR tv74[rsp]
  0006b	48 89 44 24 30	 mov	 QWORD PTR mc$[rsp], rax

; 789  :     if (mc == NULL)

  00070	48 83 7c 24 30
	00		 cmp	 QWORD PTR mc$[rsp], 0
  00076	75 07		 jne	 SHORT $LN6@methodcall

; 790  :         return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 9c 00 00 00	 jmp	 $LN8@methodcall
$LN6@methodcall:

; 791  : 
; 792  :     newargs = PyTuple_GetSlice(args, 1, PyTuple_GET_SIZE(args));

  0007f	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  00084	4c 8b 40 60	 mov	 r8, QWORD PTR [rax+96]
  00088	ba 01 00 00 00	 mov	 edx, 1
  0008d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00092	e8 00 00 00 00	 call	 PyTuple_GetSlice
  00097	48 89 44 24 20	 mov	 QWORD PTR newargs$[rsp], rax

; 793  :     if (newargs == NULL) {

  0009c	48 83 7c 24 20
	00		 cmp	 QWORD PTR newargs$[rsp], 0
  000a2	75 0e		 jne	 SHORT $LN5@methodcall

; 794  :         Py_DECREF(mc);

  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mc$[rsp]
  000a9	e8 00 00 00 00	 call	 _Py_DecRef

; 795  :         return NULL;

  000ae	33 c0		 xor	 eax, eax
  000b0	eb 69		 jmp	 SHORT $LN8@methodcall
$LN5@methodcall:

; 796  :     }
; 797  :     mc->args = newargs;

  000b2	48 8b 44 24 30	 mov	 rax, QWORD PTR mc$[rsp]
  000b7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newargs$[rsp]
  000bc	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 798  : 
; 799  :     name = PyTuple_GET_ITEM(args, 0);

  000c0	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  000c5	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000c9	48 89 44 24 28	 mov	 QWORD PTR name$[rsp], rax

; 800  :     Py_INCREF(name);

  000ce	48 8b 4c 24 28	 mov	 rcx, QWORD PTR name$[rsp]
  000d3	e8 00 00 00 00	 call	 _Py_IncRef

; 801  :     mc->name = name;

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR mc$[rsp]
  000dd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR name$[rsp]
  000e2	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN4@methodcall:

; 802  : 
; 803  :     Py_XINCREF(kwds);

  000e6	48 83 7c 24 60
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  000ec	74 0a		 je	 SHORT $LN1@methodcall
  000ee	48 8b 4c 24 60	 mov	 rcx, QWORD PTR kwds$[rsp]
  000f3	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@methodcall:
  000f8	33 c0		 xor	 eax, eax
  000fa	85 c0		 test	 eax, eax
  000fc	75 e8		 jne	 SHORT $LN4@methodcall

; 804  :     mc->kwds = kwds;

  000fe	48 8b 44 24 30	 mov	 rax, QWORD PTR mc$[rsp]
  00103	48 8b 4c 24 60	 mov	 rcx, QWORD PTR kwds$[rsp]
  00108	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 805  : 
; 806  :     PyObject_GC_Track(mc);

  0010c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mc$[rsp]
  00111	e8 00 00 00 00	 call	 PyObject_GC_Track

; 807  :     return (PyObject *)mc;

  00116	48 8b 44 24 30	 mov	 rax, QWORD PTR mc$[rsp]
$LN8@methodcall:

; 808  : }

  0011b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011f	c3		 ret	 0
methodcaller_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$methodcaller_dealloc DD imagerel methodcaller_dealloc
	DD	imagerel methodcaller_dealloc+130
	DD	imagerel $unwind$methodcaller_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$methodcaller_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT methodcaller_dealloc
_TEXT	SEGMENT
mc$ = 48
methodcaller_dealloc PROC				; COMDAT

; 812  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 813  :     PyObject_GC_UnTrack(mc);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mc$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN12@methodcall@2:

; 814  :     Py_XDECREF(mc->name);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR mc$[rsp]
  00018	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0001d	74 0e		 je	 SHORT $LN9@methodcall@2
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR mc$[rsp]
  00024	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00028	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@methodcall@2:
  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 e0		 jne	 SHORT $LN12@methodcall@2
$LN8@methodcall@2:

; 815  :     Py_XDECREF(mc->args);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR mc$[rsp]
  00038	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0003d	74 0e		 je	 SHORT $LN5@methodcall@2
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR mc$[rsp]
  00044	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00048	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@methodcall@2:
  0004d	33 c0		 xor	 eax, eax
  0004f	85 c0		 test	 eax, eax
  00051	75 e0		 jne	 SHORT $LN8@methodcall@2
$LN4@methodcall@2:

; 816  :     Py_XDECREF(mc->kwds);

  00053	48 8b 44 24 30	 mov	 rax, QWORD PTR mc$[rsp]
  00058	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0005d	74 0e		 je	 SHORT $LN1@methodcall@2
  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR mc$[rsp]
  00064	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00068	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@methodcall@2:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 e0		 jne	 SHORT $LN4@methodcall@2

; 817  :     PyObject_GC_Del(mc);

  00073	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mc$[rsp]
  00078	e8 00 00 00 00	 call	 PyObject_GC_Del

; 818  : }

  0007d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00081	c3		 ret	 0
methodcaller_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@BBEIGJLO@methodcaller_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$methodcaller_traverse DD imagerel methodcaller_traverse
	DD	imagerel methodcaller_traverse+206
	DD	imagerel $unwind$methodcaller_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$methodcaller_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BG@BBEIGJLO@methodcaller_traverse?$AA@
CONST	SEGMENT
??_C@_0BG@BBEIGJLO@methodcaller_traverse?$AA@ DB 'methodcaller_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT methodcaller_traverse
_TEXT	SEGMENT
vret$21515 = 32
vret$21523 = 36
mc$ = 64
visit$ = 72
arg$ = 80
methodcaller_traverse PROC				; COMDAT

; 822  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@methodcall@3:

; 823  :     Py_VISIT(mc->args);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@methodcall@3
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 37 03 00
	00		 mov	 r8d, 823		; 00000337H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@BBEIGJLO@methodcaller_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@methodcall@3:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR mc$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 23		 je	 SHORT $LN8@methodcall@3
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR mc$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21515[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21515[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@methodcall@3
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21515[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@methodcall@3
$LN7@methodcall@3:
$LN8@methodcall@3:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@methodcall@3
$LN6@methodcall@3:

; 824  :     Py_VISIT(mc->kwds);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@methodcall@3
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 38 03 00
	00		 mov	 r8d, 824		; 00000338H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HPIKNNGK@?4?4?2Modules?2operator?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@BBEIGJLO@methodcaller_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@methodcall@3:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR mc$[rsp]
  00097	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0009c	74 23		 je	 SHORT $LN2@methodcall@3
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR mc$[rsp]
  000a8	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$21523[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$21523[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@methodcall@3
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$21523[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@methodcall@3
$LN1@methodcall@3:
$LN2@methodcall@3:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@methodcall@3

; 825  :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@methodcall@3:

; 826  : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
methodcaller_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@FFMENHEL@methodcaller?$AA@		; `string'
EXTRN	PyObject_Call:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$methodcaller_call DD imagerel methodcaller_call
	DD	imagerel methodcaller_call+155
	DD	imagerel $unwind$methodcaller_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$methodcaller_call DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0N@FFMENHEL@methodcaller?$AA@
CONST	SEGMENT
??_C@_0N@FFMENHEL@methodcaller?$AA@ DB 'methodcaller', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT methodcaller_call
_TEXT	SEGMENT
method$ = 48
result$ = 56
obj$ = 64
mc$ = 96
args$ = 104
kw$ = 112
methodcaller_call PROC					; COMDAT

; 830  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 831  :     PyObject *method, *obj, *result;
; 832  : 
; 833  :     if (!PyArg_UnpackTuple(args, "methodcaller", 1, 1, &obj))

  00013	48 8d 44 24 40	 lea	 rax, QWORD PTR obj$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0001d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00023	41 b8 01 00 00
	00		 mov	 r8d, 1
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@FFMENHEL@methodcaller?$AA@
  00030	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00035	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0003a	85 c0		 test	 eax, eax
  0003c	75 04		 jne	 SHORT $LN2@methodcall@4

; 834  :         return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 54		 jmp	 SHORT $LN3@methodcall@4
$LN2@methodcall@4:

; 835  :     method = PyObject_GetAttr(obj, mc->name);

  00042	48 8b 44 24 60	 mov	 rax, QWORD PTR mc$[rsp]
  00047	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00050	e8 00 00 00 00	 call	 PyObject_GetAttr
  00055	48 89 44 24 30	 mov	 QWORD PTR method$[rsp], rax

; 836  :     if (method == NULL)

  0005a	48 83 7c 24 30
	00		 cmp	 QWORD PTR method$[rsp], 0
  00060	75 04		 jne	 SHORT $LN1@methodcall@4

; 837  :         return NULL;

  00062	33 c0		 xor	 eax, eax
  00064	eb 30		 jmp	 SHORT $LN3@methodcall@4
$LN1@methodcall@4:

; 838  :     result = PyObject_Call(method, mc->args, mc->kwds);

  00066	48 8b 44 24 60	 mov	 rax, QWORD PTR mc$[rsp]
  0006b	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0006f	48 8b 44 24 60	 mov	 rax, QWORD PTR mc$[rsp]
  00074	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  00078	48 8b 4c 24 30	 mov	 rcx, QWORD PTR method$[rsp]
  0007d	e8 00 00 00 00	 call	 PyObject_Call
  00082	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 839  :     Py_DECREF(method);

  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR method$[rsp]
  0008c	e8 00 00 00 00	 call	 _Py_DecRef

; 840  :     return result;

  00091	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN3@methodcall@4:

; 841  : }

  00096	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0009a	c3		 ret	 0
methodcaller_call ENDP
_TEXT	ENDS
PUBLIC	PyInit_operator
EXTRN	PyModule_AddObject:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_operator DD imagerel $LN7
	DD	imagerel $LN7+222
	DD	imagerel $unwind$PyInit_operator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_operator DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyInit_operator
_TEXT	SEGMENT
m$ = 32
PyInit_operator PROC					; COMDAT

; 912  : {

$LN7:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 913  :     PyObject *m;
; 914  : 
; 915  :     /* Create the module and add the functions */
; 916  :     m = PyModule_Create(&operatormodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:operatormodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 20	 mov	 QWORD PTR m$[rsp], rax

; 917  :     if (m == NULL)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR m$[rsp], 0
  00020	75 07		 jne	 SHORT $LN4@PyInit_ope

; 918  :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 b0 00 00 00	 jmp	 $LN5@PyInit_ope
$LN4@PyInit_ope:

; 919  : 
; 920  :     if (PyType_Ready(&itemgetter_type) < 0)

  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:itemgetter_type
  00030	e8 00 00 00 00	 call	 PyType_Ready
  00035	85 c0		 test	 eax, eax
  00037	7d 07		 jge	 SHORT $LN3@PyInit_ope

; 921  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 99 00 00 00	 jmp	 $LN5@PyInit_ope
$LN3@PyInit_ope:

; 922  :     Py_INCREF(&itemgetter_type);

  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:itemgetter_type
  00047	e8 00 00 00 00	 call	 _Py_IncRef

; 923  :     PyModule_AddObject(m, "itemgetter", (PyObject *)&itemgetter_type);

  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:itemgetter_type
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LAGLDNDE@itemgetter?$AA@
  0005a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0005f	e8 00 00 00 00	 call	 PyModule_AddObject

; 924  : 
; 925  :     if (PyType_Ready(&attrgetter_type) < 0)

  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attrgetter_type
  0006b	e8 00 00 00 00	 call	 PyType_Ready
  00070	85 c0		 test	 eax, eax
  00072	7d 04		 jge	 SHORT $LN2@PyInit_ope

; 926  :         return NULL;

  00074	33 c0		 xor	 eax, eax
  00076	eb 61		 jmp	 SHORT $LN5@PyInit_ope
$LN2@PyInit_ope:

; 927  :     Py_INCREF(&attrgetter_type);

  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:attrgetter_type
  0007f	e8 00 00 00 00	 call	 _Py_IncRef

; 928  :     PyModule_AddObject(m, "attrgetter", (PyObject *)&attrgetter_type);

  00084	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:attrgetter_type
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@BEIIKJME@attrgetter?$AA@
  00092	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00097	e8 00 00 00 00	 call	 PyModule_AddObject

; 929  : 
; 930  :     if (PyType_Ready(&methodcaller_type) < 0)

  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:methodcaller_type
  000a3	e8 00 00 00 00	 call	 PyType_Ready
  000a8	85 c0		 test	 eax, eax
  000aa	7d 04		 jge	 SHORT $LN1@PyInit_ope

; 931  :         return NULL;

  000ac	33 c0		 xor	 eax, eax
  000ae	eb 29		 jmp	 SHORT $LN5@PyInit_ope
$LN1@PyInit_ope:

; 932  :     Py_INCREF(&methodcaller_type);

  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:methodcaller_type
  000b7	e8 00 00 00 00	 call	 _Py_IncRef

; 933  :     PyModule_AddObject(m, "methodcaller", (PyObject *)&methodcaller_type);

  000bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:methodcaller_type
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@FFMENHEL@methodcaller?$AA@
  000ca	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000cf	e8 00 00 00 00	 call	 PyModule_AddObject

; 934  :     return m;

  000d4	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
$LN5@PyInit_ope:

; 935  : }

  000d9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dd	c3		 ret	 0
PyInit_operator ENDP
_TEXT	ENDS
END
