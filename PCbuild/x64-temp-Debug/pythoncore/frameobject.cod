; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05MIJNFGED@frame?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_07JLOEJGHB@f_trace?$AA@			; `string'
PUBLIC	??_C@_08FDLCNFEJ@f_lineno?$AA@			; `string'
PUBLIC	??_C@_08BHOKOMIB@f_locals?$AA@			; `string'
PUBLIC	??_C@_07BMONJODI@f_lasti?$AA@			; `string'
PUBLIC	??_C@_09CHEKPDJP@f_globals?$AA@			; `string'
PUBLIC	??_C@_0L@JPBMANPF@f_builtins?$AA@		; `string'
PUBLIC	??_C@_06JNKOPFKK@f_code?$AA@			; `string'
PUBLIC	??_C@_06NLNNJACC@f_back?$AA@			; `string'
PUBLIC	PyFrame_Type
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
free_list DQ	01H DUP (?)
numfree	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_05MIJNFGED@frame?$AA@
CONST	SEGMENT
??_C@_05MIJNFGED@frame?$AA@ DB 'frame', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JLOEJGHB@f_trace?$AA@
CONST	SEGMENT
??_C@_07JLOEJGHB@f_trace?$AA@ DB 'f_trace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FDLCNFEJ@f_lineno?$AA@
CONST	SEGMENT
??_C@_08FDLCNFEJ@f_lineno?$AA@ DB 'f_lineno', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHOKOMIB@f_locals?$AA@
CONST	SEGMENT
??_C@_08BHOKOMIB@f_locals?$AA@ DB 'f_locals', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
frame_memberlist DQ FLAT:??_C@_06NLNNJACC@f_back?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06JNKOPFKK@f_code?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@JPBMANPF@f_builtins?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09CHEKPDJP@f_globals?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07BMONJODI@f_lasti?$AA@
	DD	01H
	ORG $+4
	DQ	00000000000000d0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
frame_getsetlist DQ FLAT:??_C@_08BHOKOMIB@f_locals?$AA@
	DQ	FLAT:frame_getlocals
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08FDLCNFEJ@f_lineno?$AA@
	DQ	FLAT:frame_getlineno
	DQ	FLAT:frame_setlineno
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07JLOEJGHB@f_trace?$AA@
	DQ	FLAT:frame_gettrace
	DQ	FLAT:frame_settrace
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
sizeof__doc__ DB 'F.__sizeof__() -> size of F in memory, in bytes', 00H
frame_methods DQ FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:frame_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:sizeof__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyFrame_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05MIJNFGED@frame?$AA@
	DQ	00000000000001e0H
	DQ	0000000000000008H
	DQ	FLAT:frame_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:frame_traverse
	DQ	FLAT:frame_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:frame_methods
	DQ	FLAT:frame_memberlist
	DQ	FLAT:frame_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+120
_DATA	ENDS
;	COMDAT ??_C@_07BMONJODI@f_lasti?$AA@
CONST	SEGMENT
??_C@_07BMONJODI@f_lasti?$AA@ DB 'f_lasti', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CHEKPDJP@f_globals?$AA@
CONST	SEGMENT
??_C@_09CHEKPDJP@f_globals?$AA@ DB 'f_globals', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JPBMANPF@f_builtins?$AA@
CONST	SEGMENT
??_C@_0L@JPBMANPF@f_builtins?$AA@ DB 'f_builtins', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNKOPFKK@f_code?$AA@
CONST	SEGMENT
??_C@_06JNKOPFKK@f_code?$AA@ DB 'f_code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NLNNJACC@f_back?$AA@
CONST	SEGMENT
??_C@_06NLNNJACC@f_back?$AA@ DB 'f_back', 00H		; `string'
CONST	ENDS
PUBLIC	_Py_IncRef
PUBLIC	PyFrame_FastToLocals
;	COMDAT pdata
; File c:\src\pyparallel\objects\frameobject.c
pdata	SEGMENT
$pdata$frame_getlocals DD imagerel frame_getlocals
	DD	imagerel frame_getlocals+58
	DD	imagerel $unwind$frame_getlocals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_getlocals DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT frame_getlocals
_TEXT	SEGMENT
f$ = 48
closure$ = 56
frame_getlocals PROC					; COMDAT

; 28   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 29   :     PyFrame_FastToLocals(f);

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  00013	e8 00 00 00 00	 call	 PyFrame_FastToLocals

; 30   :     Py_INCREF(f->f_locals);

  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  0001d	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  00024	e8 00 00 00 00	 call	 _Py_IncRef

; 31   :     return f->f_locals;

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  0002e	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]

; 32   : }

  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
frame_getlocals ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	PyFrame_GetLineNumber
EXTRN	PyCode_Addr2Line:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\frameobject.c
pdata	SEGMENT
$pdata$PyFrame_GetLineNumber DD imagerel $LN5
	DD	imagerel $LN5+69
	DD	imagerel $unwind$PyFrame_GetLineNumber
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_GetLineNumber DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFrame_GetLineNumber
_TEXT	SEGMENT
f$ = 48
PyFrame_GetLineNumber PROC				; COMDAT

; 36   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 37   :     if (f->f_trace)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  0000e	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  00016	74 0f		 je	 SHORT $LN2@PyFrame_Ge

; 38   :         return f->f_lineno;

  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  0001d	8b 80 d4 00 00
	00		 mov	 eax, DWORD PTR [rax+212]
  00023	eb 1b		 jmp	 SHORT $LN3@PyFrame_Ge

; 39   :     else

  00025	eb 19		 jmp	 SHORT $LN1@PyFrame_Ge
$LN2@PyFrame_Ge:

; 40   :         return PyCode_Addr2Line(f->f_code, f->f_lasti);

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  0002c	8b 90 d0 00 00
	00		 mov	 edx, DWORD PTR [rax+208]
  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00037	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0003b	e8 00 00 00 00	 call	 PyCode_Addr2Line
$LN1@PyFrame_Ge:
$LN3@PyFrame_Ge:

; 41   : }

  00040	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00044	c3		 ret	 0
PyFrame_GetLineNumber ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$frame_getlineno DD imagerel frame_getlineno
	DD	imagerel frame_getlineno+36
	DD	imagerel $unwind$frame_getlineno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_getlineno DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT frame_getlineno
_TEXT	SEGMENT
f$ = 48
closure$ = 56
frame_getlineno PROC					; COMDAT

; 45   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 46   :     return PyLong_FromLong(PyFrame_GetLineNumber(f));

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  00013	e8 00 00 00 00	 call	 PyFrame_GetLineNumber
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 PyLong_FromLong

; 47   : }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
frame_getlineno ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0CG@MHDHEJCF@can?8t?5jump?5into?5the?5middle?5of?5a?5@ ; `string'
PUBLIC	??_C@_0CM@FFLIIPOI@can?8t?5jump?5into?5or?5out?5of?5a?5?8fin@ ; `string'
PUBLIC	??_C@_1CI@MPHLFDGM@?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@BJHAOKPE@?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DE@JIOCPKME@can?8t?5jump?5to?5?8except?8?5line?5as?5t@ ; `string'
PUBLIC	??_C@_0CL@HBOPHCJE@line?5?$CFd?5comes?5after?5the?5current?5@ ; `string'
PUBLIC	??_C@_0CM@KMKPODEN@line?5?$CFd?5comes?5before?5the?5current@ ; `string'
PUBLIC	??_C@_0BE@KABHHPAP@lineno?5out?5of?5range?$AA@	; `string'
PUBLIC	??_C@_0DC@BMMFBOMD@f_lineno?5can?5only?5be?5set?5by?5a?5li@ ; `string'
PUBLIC	??_C@_0BK@CDEBPONC@lineno?5must?5be?5an?5integer?$AA@ ; `string'
EXTRN	__imp__wassert:PROC
EXTRN	memset:PROC
EXTRN	PyBytes_AsStringAndSize:PROC
EXTRN	PyLong_AsLongAndOverflow:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyLong_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$frame_setlineno DD imagerel frame_setlineno
	DD	imagerel frame_setlineno+2727
	DD	imagerel $unwind$frame_setlineno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_setlineno DD 021101H
	DD	0310111H
xdata	ENDS
;	COMDAT ??_C@_0CG@MHDHEJCF@can?8t?5jump?5into?5the?5middle?5of?5a?5@
CONST	SEGMENT
??_C@_0CG@MHDHEJCF@can?8t?5jump?5into?5the?5middle?5of?5a?5@ DB 'can''t j'
	DB	'ump into the middle of a block', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@FFLIIPOI@can?8t?5jump?5into?5or?5out?5of?5a?5?8fin@
CONST	SEGMENT
??_C@_0CM@FFLIIPOI@can?8t?5jump?5into?5or?5out?5of?5a?5?8fin@ DB 'can''t '
	DB	'jump into or out of a ''finally'' block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@MPHLFDGM@?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@MPHLFDGM@?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'b'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BJHAOKPE@?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@BJHAOKPE@?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'b'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'f', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JIOCPKME@can?8t?5jump?5to?5?8except?8?5line?5as?5t@
CONST	SEGMENT
??_C@_0DE@JIOCPKME@can?8t?5jump?5to?5?8except?8?5line?5as?5t@ DB 'can''t '
	DB	'jump to ''except'' line as there''s no exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HBOPHCJE@line?5?$CFd?5comes?5after?5the?5current?5@
CONST	SEGMENT
??_C@_0CL@HBOPHCJE@line?5?$CFd?5comes?5after?5the?5current?5@ DB 'line %d'
	DB	' comes after the current code block', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KMKPODEN@line?5?$CFd?5comes?5before?5the?5current@
CONST	SEGMENT
??_C@_0CM@KMKPODEN@line?5?$CFd?5comes?5before?5the?5current@ DB 'line %d '
	DB	'comes before the current code block', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KABHHPAP@lineno?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BE@KABHHPAP@lineno?5out?5of?5range?$AA@ DB 'lineno out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BMMFBOMD@f_lineno?5can?5only?5be?5set?5by?5a?5li@
CONST	SEGMENT
??_C@_0DC@BMMFBOMD@f_lineno?5can?5only?5be?5set?5by?5a?5li@ DB 'f_lineno '
	DB	'can only be set by a line trace function', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CDEBPONC@lineno?5must?5be?5an?5integer?$AA@
CONST	SEGMENT
??_C@_0BK@CDEBPONC@lineno?5must?5be?5an?5integer?$AA@ DB 'lineno must be '
	DB	'an integer', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT frame_setlineno
_TEXT	SEGMENT
blockstack$ = 32
min_delta_iblock$ = 112
in_finally$ = 128
l_new_lineno$ = 208
new_lasti_setup_addr$ = 212
max_addr$ = 216
min_addr$ = 220
line$ = 224
overflow$ = 228
lnotab_len$ = 232
code_len$ = 240
code$ = 248
new_iblock$ = 256
new_lineno$ = 260
new_lasti$ = 264
offset$ = 268
delta_iblock$ = 272
lnotab$ = 280
blockstack_top$ = 288
f_lasti_setup_addr$ = 292
min_iblock$ = 296
addr$ = 300
setup_op$ = 304
tmp$20588 = 312
op$20603 = 320
i$20622 = 324
setup_addr$20623 = 328
op$20639 = 332
b$20654 = 336
v$20658 = 344
tv153 = 352
tv157 = 356
tv180 = 360
tv261 = 364
tv271 = 368
tv291 = 372
tv304 = 376
f$ = 400
p_new_lineno$ = 408
frame_setlineno PROC					; COMDAT

; 66   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H

; 67   :     int new_lineno = 0;                 /* The new value of f_lineno */

  00011	c7 84 24 04 01
	00 00 00 00 00
	00		 mov	 DWORD PTR new_lineno$[rsp], 0

; 68   :     long l_new_lineno;
; 69   :     int overflow;
; 70   :     int new_lasti = 0;                  /* The new value of f_lasti */

  0001c	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR new_lasti$[rsp], 0

; 71   :     int new_iblock = 0;                 /* The new value of f_iblock */

  00027	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR new_iblock$[rsp], 0

; 72   :     unsigned char *code = NULL;         /* The bytecode for the frame... */

  00032	48 c7 84 24 f8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR code$[rsp], 0

; 73   :     Py_ssize_t code_len = 0;            /* ...and its length */

  0003e	48 c7 84 24 f0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR code_len$[rsp], 0

; 74   :     unsigned char *lnotab = NULL;       /* Iterating over co_lnotab */

  0004a	48 c7 84 24 18
	01 00 00 00 00
	00 00		 mov	 QWORD PTR lnotab$[rsp], 0

; 75   :     Py_ssize_t lnotab_len = 0;          /* (ditto) */

  00056	48 c7 84 24 e8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR lnotab_len$[rsp], 0

; 76   :     int offset = 0;                     /* (ditto) */

  00062	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR offset$[rsp], 0

; 77   :     int line = 0;                       /* (ditto) */

  0006d	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR line$[rsp], 0

; 78   :     int addr = 0;                       /* (ditto) */

  00078	c7 84 24 2c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR addr$[rsp], 0

; 79   :     int min_addr = 0;                   /* Scanning the SETUPs and POPs */

  00083	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR min_addr$[rsp], 0

; 80   :     int max_addr = 0;                   /* (ditto) */

  0008e	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR max_addr$[rsp], 0

; 81   :     int delta_iblock = 0;               /* (ditto) */

  00099	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR delta_iblock$[rsp], 0

; 82   :     int min_delta_iblock = 0;           /* (ditto) */

  000a4	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR min_delta_iblock$[rsp], 0

; 83   :     int min_iblock = 0;                 /* (ditto) */

  000ac	c7 84 24 28 01
	00 00 00 00 00
	00		 mov	 DWORD PTR min_iblock$[rsp], 0

; 84   :     int f_lasti_setup_addr = 0;         /* Policing no-jump-into-finally */

  000b7	c7 84 24 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR f_lasti_setup_addr$[rsp], 0

; 85   :     int new_lasti_setup_addr = 0;       /* (ditto) */

  000c2	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR new_lasti_setup_addr$[rsp], 0

; 86   :     int blockstack[CO_MAXBLOCKS];       /* Walking the 'finally' blocks */
; 87   :     int in_finally[CO_MAXBLOCKS];       /* (ditto) */
; 88   :     int blockstack_top = 0;             /* (ditto) */

  000cd	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR blockstack_top$[rsp], 0

; 89   :     unsigned char setup_op = 0;         /* (ditto) */

  000d8	c6 84 24 30 01
	00 00 00	 mov	 BYTE PTR setup_op$[rsp], 0

; 90   : 
; 91   :     /* f_lineno must be an integer. */
; 92   :     if (!PyLong_CheckExact(p_new_lineno)) {

  000e0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  000e7	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR p_new_lineno$[rsp]
  000ef	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000f3	74 1d		 je	 SHORT $LN54@frame_setl

; 93   :         PyErr_SetString(PyExc_ValueError,
; 94   :                         "lineno must be an integer");

  000f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CDEBPONC@lineno?5must?5be?5an?5integer?$AA@
  000fc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00103	e8 00 00 00 00	 call	 PyErr_SetString

; 95   :         return -1;

  00108	b8 ff ff ff ff	 mov	 eax, -1
  0010d	e9 8d 09 00 00	 jmp	 $LN55@frame_setl
$LN54@frame_setl:

; 96   :     }
; 97   : 
; 98   :     /* You can only do this from within a trace function, not via
; 99   :      * _getframe or similar hackery. */
; 100  :     if (!f->f_trace)

  00112	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0011a	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  00122	75 1d		 jne	 SHORT $LN53@frame_setl

; 101  :     {
; 102  :         PyErr_Format(PyExc_ValueError,
; 103  :                      "f_lineno can only be set by a"
; 104  :                      " line trace function");

  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@BMMFBOMD@f_lineno?5can?5only?5be?5set?5by?5a?5li@
  0012b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00132	e8 00 00 00 00	 call	 PyErr_Format

; 105  :         return -1;

  00137	b8 ff ff ff ff	 mov	 eax, -1
  0013c	e9 5e 09 00 00	 jmp	 $LN55@frame_setl
$LN53@frame_setl:

; 106  :     }
; 107  : 
; 108  :     /* Fail if the line comes before the start of the code block. */
; 109  :     l_new_lineno = PyLong_AsLongAndOverflow(p_new_lineno, &overflow);

  00141	48 8d 94 24 e4
	00 00 00	 lea	 rdx, QWORD PTR overflow$[rsp]
  00149	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR p_new_lineno$[rsp]
  00151	e8 00 00 00 00	 call	 PyLong_AsLongAndOverflow
  00156	89 84 24 d0 00
	00 00		 mov	 DWORD PTR l_new_lineno$[rsp], eax

; 110  :     if (overflow
; 111  : #if SIZEOF_LONG > SIZEOF_INT
; 112  :         || l_new_lineno > INT_MAX
; 113  :         || l_new_lineno < INT_MIN
; 114  : #endif
; 115  :        ) {

  0015d	83 bc 24 e4 00
	00 00 00	 cmp	 DWORD PTR overflow$[rsp], 0
  00165	74 1d		 je	 SHORT $LN52@frame_setl

; 116  :         PyErr_SetString(PyExc_ValueError,
; 117  :                         "lineno out of range");

  00167	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@KABHHPAP@lineno?5out?5of?5range?$AA@
  0016e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00175	e8 00 00 00 00	 call	 PyErr_SetString

; 118  :         return -1;

  0017a	b8 ff ff ff ff	 mov	 eax, -1
  0017f	e9 1b 09 00 00	 jmp	 $LN55@frame_setl
$LN52@frame_setl:

; 119  :     }
; 120  :     new_lineno = (int)l_new_lineno;

  00184	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR l_new_lineno$[rsp]
  0018b	89 84 24 04 01
	00 00		 mov	 DWORD PTR new_lineno$[rsp], eax

; 121  : 
; 122  :     if (new_lineno < f->f_code->co_firstlineno) {

  00192	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0019a	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0019e	8b 80 c0 00 00
	00		 mov	 eax, DWORD PTR [rax+192]
  001a4	39 84 24 04 01
	00 00		 cmp	 DWORD PTR new_lineno$[rsp], eax
  001ab	7d 2a		 jge	 SHORT $LN51@frame_setl

; 123  :         PyErr_Format(PyExc_ValueError,
; 124  :                      "line %d comes before the current code block",
; 125  :                      new_lineno);

  001ad	44 8b 84 24 04
	01 00 00	 mov	 r8d, DWORD PTR new_lineno$[rsp]
  001b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@KMKPODEN@line?5?$CFd?5comes?5before?5the?5current@
  001bc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001c3	e8 00 00 00 00	 call	 PyErr_Format

; 126  :         return -1;

  001c8	b8 ff ff ff ff	 mov	 eax, -1
  001cd	e9 cd 08 00 00	 jmp	 $LN55@frame_setl
  001d2	e9 61 01 00 00	 jmp	 $LN50@frame_setl
$LN51@frame_setl:

; 127  :     }
; 128  :     else if (new_lineno == f->f_code->co_firstlineno) {

  001d7	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  001df	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001e3	8b 80 c0 00 00
	00		 mov	 eax, DWORD PTR [rax+192]
  001e9	39 84 24 04 01
	00 00		 cmp	 DWORD PTR new_lineno$[rsp], eax
  001f0	75 29		 jne	 SHORT $LN49@frame_setl

; 129  :         new_lasti = 0;

  001f2	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR new_lasti$[rsp], 0

; 130  :         new_lineno = f->f_code->co_firstlineno;

  001fd	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00205	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00209	8b 80 c0 00 00
	00		 mov	 eax, DWORD PTR [rax+192]
  0020f	89 84 24 04 01
	00 00		 mov	 DWORD PTR new_lineno$[rsp], eax

; 131  :     }
; 132  :     else {

  00216	e9 1d 01 00 00	 jmp	 $LN48@frame_setl
$LN49@frame_setl:

; 133  :         /* Find the bytecode offset for the start of the given
; 134  :          * line, or the first code-owning line after it. */
; 135  :         char *tmp;
; 136  :         PyBytes_AsStringAndSize(f->f_code->co_lnotab,
; 137  :                                 &tmp, &lnotab_len);

  0021b	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00223	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00227	4c 8d 84 24 e8
	00 00 00	 lea	 r8, QWORD PTR lnotab_len$[rsp]
  0022f	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR tmp$20588[rsp]
  00237	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  0023e	e8 00 00 00 00	 call	 PyBytes_AsStringAndSize

; 138  :         lnotab = (unsigned char *) tmp;

  00243	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR tmp$20588[rsp]
  0024b	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR lnotab$[rsp], rax

; 139  :         addr = 0;

  00253	c7 84 24 2c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR addr$[rsp], 0

; 140  :         line = f->f_code->co_firstlineno;

  0025e	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00266	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0026a	8b 80 c0 00 00
	00		 mov	 eax, DWORD PTR [rax+192]
  00270	89 84 24 e0 00
	00 00		 mov	 DWORD PTR line$[rsp], eax

; 141  :         new_lasti = -1;

  00277	c7 84 24 08 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR new_lasti$[rsp], -1

; 142  :         for (offset = 0; offset < lnotab_len; offset += 2) {

  00282	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR offset$[rsp], 0
  0028d	eb 11		 jmp	 SHORT $LN47@frame_setl
$LN46@frame_setl:
  0028f	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR offset$[rsp]
  00296	83 c0 02	 add	 eax, 2
  00299	89 84 24 0c 01
	00 00		 mov	 DWORD PTR offset$[rsp], eax
$LN47@frame_setl:
  002a0	48 63 84 24 0c
	01 00 00	 movsxd	 rax, DWORD PTR offset$[rsp]
  002a8	48 3b 84 24 e8
	00 00 00	 cmp	 rax, QWORD PTR lnotab_len$[rsp]
  002b0	0f 8d 82 00 00
	00		 jge	 $LN45@frame_setl

; 143  :             addr += lnotab[offset];

  002b6	48 63 84 24 0c
	01 00 00	 movsxd	 rax, DWORD PTR offset$[rsp]
  002be	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR lnotab$[rsp]
  002c6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002ca	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  002d1	03 c8		 add	 ecx, eax
  002d3	8b c1		 mov	 eax, ecx
  002d5	89 84 24 2c 01
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 144  :             line += lnotab[offset+1];

  002dc	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR offset$[rsp]
  002e3	ff c0		 inc	 eax
  002e5	48 98		 cdqe
  002e7	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR lnotab$[rsp]
  002ef	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002f3	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR line$[rsp]
  002fa	03 c8		 add	 ecx, eax
  002fc	8b c1		 mov	 eax, ecx
  002fe	89 84 24 e0 00
	00 00		 mov	 DWORD PTR line$[rsp], eax

; 145  :             if (line >= new_lineno) {

  00305	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR new_lineno$[rsp]
  0030c	39 84 24 e0 00
	00 00		 cmp	 DWORD PTR line$[rsp], eax
  00313	7c 1e		 jl	 SHORT $LN44@frame_setl

; 146  :                 new_lasti = addr;

  00315	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0031c	89 84 24 08 01
	00 00		 mov	 DWORD PTR new_lasti$[rsp], eax

; 147  :                 new_lineno = line;

  00323	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR line$[rsp]
  0032a	89 84 24 04 01
	00 00		 mov	 DWORD PTR new_lineno$[rsp], eax

; 148  :                 break;

  00331	eb 05		 jmp	 SHORT $LN45@frame_setl
$LN44@frame_setl:

; 149  :             }
; 150  :         }

  00333	e9 57 ff ff ff	 jmp	 $LN46@frame_setl
$LN45@frame_setl:
$LN48@frame_setl:
$LN50@frame_setl:

; 151  :     }
; 152  : 
; 153  :     /* If we didn't reach the requested line, return an error. */
; 154  :     if (new_lasti == -1) {

  00338	83 bc 24 08 01
	00 00 ff	 cmp	 DWORD PTR new_lasti$[rsp], -1
  00340	75 25		 jne	 SHORT $LN43@frame_setl

; 155  :         PyErr_Format(PyExc_ValueError,
; 156  :                      "line %d comes after the current code block",
; 157  :                      new_lineno);

  00342	44 8b 84 24 04
	01 00 00	 mov	 r8d, DWORD PTR new_lineno$[rsp]
  0034a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@HBOPHCJE@line?5?$CFd?5comes?5after?5the?5current?5@
  00351	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00358	e8 00 00 00 00	 call	 PyErr_Format

; 158  :         return -1;

  0035d	b8 ff ff ff ff	 mov	 eax, -1
  00362	e9 38 07 00 00	 jmp	 $LN55@frame_setl
$LN43@frame_setl:

; 159  :     }
; 160  : 
; 161  :     /* We're now ready to look at the bytecode. */
; 162  :     PyBytes_AsStringAndSize(f->f_code->co_code, (char **)&code, &code_len);

  00367	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0036f	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00373	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR code_len$[rsp]
  0037b	48 8d 94 24 f8
	00 00 00	 lea	 rdx, QWORD PTR code$[rsp]
  00383	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00387	e8 00 00 00 00	 call	 PyBytes_AsStringAndSize

; 163  :     min_addr = MIN(new_lasti, f->f_lasti);

  0038c	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00394	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  0039a	39 84 24 08 01
	00 00		 cmp	 DWORD PTR new_lasti$[rsp], eax
  003a1	7d 10		 jge	 SHORT $LN57@frame_setl
  003a3	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR new_lasti$[rsp]
  003aa	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv153[rsp], eax
  003b1	eb 15		 jmp	 SHORT $LN58@frame_setl
$LN57@frame_setl:
  003b3	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  003bb	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  003c1	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv153[rsp], eax
$LN58@frame_setl:
  003c8	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR tv153[rsp]
  003cf	89 84 24 dc 00
	00 00		 mov	 DWORD PTR min_addr$[rsp], eax

; 164  :     max_addr = MAX(new_lasti, f->f_lasti);

  003d6	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  003de	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  003e4	39 84 24 08 01
	00 00		 cmp	 DWORD PTR new_lasti$[rsp], eax
  003eb	7e 10		 jle	 SHORT $LN59@frame_setl
  003ed	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR new_lasti$[rsp]
  003f4	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv157[rsp], eax
  003fb	eb 15		 jmp	 SHORT $LN60@frame_setl
$LN59@frame_setl:
  003fd	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00405	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  0040b	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv157[rsp], eax
$LN60@frame_setl:
  00412	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR tv157[rsp]
  00419	89 84 24 d8 00
	00 00		 mov	 DWORD PTR max_addr$[rsp], eax

; 165  : 
; 166  :     /* You can't jump onto a line with an 'except' statement on it -
; 167  :      * they expect to have an exception on the top of the stack, which
; 168  :      * won't be true if you jump to them.  They always start with code
; 169  :      * that either pops the exception using POP_TOP (plain 'except:'
; 170  :      * lines do this) or duplicates the exception on the stack using
; 171  :      * DUP_TOP (if there's an exception type specified).  See compile.c,
; 172  :      * 'com_try_except' for the full details.  There aren't any other
; 173  :      * cases (AFAIK) where a line's code can start with DUP_TOP or
; 174  :      * POP_TOP, but if any ever appear, they'll be subject to the same
; 175  :      * restriction (but with a different error message). */
; 176  :     if (code[new_lasti] == DUP_TOP || code[new_lasti] == POP_TOP) {

  00420	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR new_lasti$[rsp]
  00428	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  00430	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00434	83 f8 04	 cmp	 eax, 4
  00437	74 19		 je	 SHORT $LN41@frame_setl
  00439	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR new_lasti$[rsp]
  00441	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  00449	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0044d	83 f8 01	 cmp	 eax, 1
  00450	75 1d		 jne	 SHORT $LN42@frame_setl
$LN41@frame_setl:

; 177  :         PyErr_SetString(PyExc_ValueError,
; 178  :             "can't jump to 'except' line as there's no exception");

  00452	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@JIOCPKME@can?8t?5jump?5to?5?8except?8?5line?5as?5t@
  00459	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00460	e8 00 00 00 00	 call	 PyErr_SetString

; 179  :         return -1;

  00465	b8 ff ff ff ff	 mov	 eax, -1
  0046a	e9 30 06 00 00	 jmp	 $LN55@frame_setl
$LN42@frame_setl:

; 180  :     }
; 181  : 
; 182  :     /* You can't jump into or out of a 'finally' block because the 'try'
; 183  :      * block leaves something on the stack for the END_FINALLY to clean
; 184  :      * up.      So we walk the bytecode, maintaining a simulated blockstack.
; 185  :      * When we reach the old or new address and it's in a 'finally' block
; 186  :      * we note the address of the corresponding SETUP_FINALLY.  The jump
; 187  :      * is only legal if neither address is in a 'finally' block or
; 188  :      * they're both in the same one.  'blockstack' is a stack of the
; 189  :      * bytecode addresses of the SETUP_X opcodes, and 'in_finally' tracks
; 190  :      * whether we're in a 'finally' block at each blockstack level. */
; 191  :     f_lasti_setup_addr = -1;

  0046f	c7 84 24 24 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR f_lasti_setup_addr$[rsp], -1

; 192  :     new_lasti_setup_addr = -1;

  0047a	c7 84 24 d4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR new_lasti_setup_addr$[rsp], -1

; 193  :     memset(blockstack, '\0', sizeof(blockstack));

  00485	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  0048b	33 d2		 xor	 edx, edx
  0048d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR blockstack$[rsp]
  00492	e8 00 00 00 00	 call	 memset

; 194  :     memset(in_finally, '\0', sizeof(in_finally));

  00497	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  0049d	33 d2		 xor	 edx, edx
  0049f	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR in_finally$[rsp]
  004a7	e8 00 00 00 00	 call	 memset

; 195  :     blockstack_top = 0;

  004ac	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR blockstack_top$[rsp], 0

; 196  :     for (addr = 0; addr < code_len; addr++) {

  004b7	c7 84 24 2c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR addr$[rsp], 0
  004c2	eb 10		 jmp	 SHORT $LN40@frame_setl
$LN39@frame_setl:
  004c4	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  004cb	ff c0		 inc	 eax
  004cd	89 84 24 2c 01
	00 00		 mov	 DWORD PTR addr$[rsp], eax
$LN40@frame_setl:
  004d4	48 63 84 24 2c
	01 00 00	 movsxd	 rax, DWORD PTR addr$[rsp]
  004dc	48 3b 84 24 f0
	00 00 00	 cmp	 rax, QWORD PTR code_len$[rsp]
  004e4	0f 8d 95 02 00
	00		 jge	 $LN38@frame_setl

; 197  :         unsigned char op = code[addr];

  004ea	48 63 84 24 2c
	01 00 00	 movsxd	 rax, DWORD PTR addr$[rsp]
  004f2	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  004fa	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  004fe	88 84 24 40 01
	00 00		 mov	 BYTE PTR op$20603[rsp], al

; 198  :         switch (op) {

  00505	0f b6 84 24 40
	01 00 00	 movzx	 eax, BYTE PTR op$20603[rsp]
  0050d	88 84 24 68 01
	00 00		 mov	 BYTE PTR tv180[rsp], al
  00514	80 bc 24 68 01
	00 00 57	 cmp	 BYTE PTR tv180[rsp], 87	; 00000057H
  0051c	74 73		 je	 SHORT $LN34@frame_setl
  0051e	80 bc 24 68 01
	00 00 58	 cmp	 BYTE PTR tv180[rsp], 88	; 00000058H
  00526	0f 84 f4 00 00
	00		 je	 $LN30@frame_setl
  0052c	80 bc 24 68 01
	00 00 77	 cmp	 BYTE PTR tv180[rsp], 119 ; 00000077H
  00534	0f 86 3f 01 00
	00		 jbe	 $LN36@frame_setl
  0053a	80 bc 24 68 01
	00 00 7a	 cmp	 BYTE PTR tv180[rsp], 122 ; 0000007aH
  00542	76 0f		 jbe	 SHORT $LN35@frame_setl
  00544	80 bc 24 68 01
	00 00 8f	 cmp	 BYTE PTR tv180[rsp], 143 ; 0000008fH
  0054c	74 05		 je	 SHORT $LN35@frame_setl
  0054e	e9 26 01 00 00	 jmp	 $LN36@frame_setl
$LN35@frame_setl:

; 199  :         case SETUP_LOOP:
; 200  :         case SETUP_EXCEPT:
; 201  :         case SETUP_FINALLY:
; 202  :         case SETUP_WITH:
; 203  :             blockstack[blockstack_top++] = addr;

  00553	48 63 84 24 20
	01 00 00	 movsxd	 rax, DWORD PTR blockstack_top$[rsp]
  0055b	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00562	89 4c 84 20	 mov	 DWORD PTR blockstack$[rsp+rax*4], ecx
  00566	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blockstack_top$[rsp]
  0056d	ff c0		 inc	 eax
  0056f	89 84 24 20 01
	00 00		 mov	 DWORD PTR blockstack_top$[rsp], eax

; 204  :             in_finally[blockstack_top-1] = 0;

  00576	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blockstack_top$[rsp]
  0057d	ff c8		 dec	 eax
  0057f	48 98		 cdqe
  00581	c7 84 84 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR in_finally$[rsp+rax*4], 0

; 205  :             break;

  0058c	e9 e8 00 00 00	 jmp	 $LN36@frame_setl
$LN34@frame_setl:

; 206  : 
; 207  :         case POP_BLOCK:
; 208  :             assert(blockstack_top > 0);

  00591	83 bc 24 20 01
	00 00 00	 cmp	 DWORD PTR blockstack_top$[rsp], 0
  00599	7f 1c		 jg	 SHORT $LN61@frame_setl
  0059b	41 b8 d0 00 00
	00		 mov	 r8d, 208		; 000000d0H
  005a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  005a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BJHAOKPE@?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  005af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005b5	33 c0		 xor	 eax, eax
$LN61@frame_setl:

; 209  :             setup_op = code[blockstack[blockstack_top-1]];

  005b7	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blockstack_top$[rsp]
  005be	ff c8		 dec	 eax
  005c0	48 98		 cdqe
  005c2	48 63 44 84 20	 movsxd	 rax, DWORD PTR blockstack$[rsp+rax*4]
  005c7	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  005cf	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005d3	88 84 24 30 01
	00 00		 mov	 BYTE PTR setup_op$[rsp], al

; 210  :             if (setup_op == SETUP_FINALLY || setup_op == SETUP_WITH) {

  005da	0f b6 84 24 30
	01 00 00	 movzx	 eax, BYTE PTR setup_op$[rsp]
  005e2	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  005e5	74 0f		 je	 SHORT $LN32@frame_setl
  005e7	0f b6 84 24 30
	01 00 00	 movzx	 eax, BYTE PTR setup_op$[rsp]
  005ef	3d 8f 00 00 00	 cmp	 eax, 143		; 0000008fH
  005f4	75 18		 jne	 SHORT $LN33@frame_setl
$LN32@frame_setl:

; 211  :                 in_finally[blockstack_top-1] = 1;

  005f6	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blockstack_top$[rsp]
  005fd	ff c8		 dec	 eax
  005ff	48 98		 cdqe
  00601	c7 84 84 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR in_finally$[rsp+rax*4], 1

; 212  :             }
; 213  :             else {

  0060c	eb 10		 jmp	 SHORT $LN31@frame_setl
$LN33@frame_setl:

; 214  :                 blockstack_top--;

  0060e	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blockstack_top$[rsp]
  00615	ff c8		 dec	 eax
  00617	89 84 24 20 01
	00 00		 mov	 DWORD PTR blockstack_top$[rsp], eax
$LN31@frame_setl:

; 215  :             }
; 216  :             break;

  0061e	eb 59		 jmp	 SHORT $LN36@frame_setl
$LN30@frame_setl:

; 217  : 
; 218  :         case END_FINALLY:
; 219  :             /* Ignore END_FINALLYs for SETUP_EXCEPTs - they exist
; 220  :              * in the bytecode but don't correspond to an actual
; 221  :              * 'finally' block.  (If blockstack_top is 0, we must
; 222  :              * be seeing such an END_FINALLY.) */
; 223  :             if (blockstack_top > 0) {

  00620	83 bc 24 20 01
	00 00 00	 cmp	 DWORD PTR blockstack_top$[rsp], 0
  00628	7e 4f		 jle	 SHORT $LN29@frame_setl

; 224  :                 setup_op = code[blockstack[blockstack_top-1]];

  0062a	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blockstack_top$[rsp]
  00631	ff c8		 dec	 eax
  00633	48 98		 cdqe
  00635	48 63 44 84 20	 movsxd	 rax, DWORD PTR blockstack$[rsp+rax*4]
  0063a	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  00642	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00646	88 84 24 30 01
	00 00		 mov	 BYTE PTR setup_op$[rsp], al

; 225  :                 if (setup_op == SETUP_FINALLY || setup_op == SETUP_WITH) {

  0064d	0f b6 84 24 30
	01 00 00	 movzx	 eax, BYTE PTR setup_op$[rsp]
  00655	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00658	74 0f		 je	 SHORT $LN27@frame_setl
  0065a	0f b6 84 24 30
	01 00 00	 movzx	 eax, BYTE PTR setup_op$[rsp]
  00662	3d 8f 00 00 00	 cmp	 eax, 143		; 0000008fH
  00667	75 10		 jne	 SHORT $LN28@frame_setl
$LN27@frame_setl:

; 226  :                     blockstack_top--;

  00669	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blockstack_top$[rsp]
  00670	ff c8		 dec	 eax
  00672	89 84 24 20 01
	00 00		 mov	 DWORD PTR blockstack_top$[rsp], eax
$LN28@frame_setl:
$LN29@frame_setl:
$LN36@frame_setl:

; 227  :                 }
; 228  :             }
; 229  :             break;
; 230  :         }
; 231  : 
; 232  :         /* For the addresses we're interested in, see whether they're
; 233  :          * within a 'finally' block and if so, remember the address
; 234  :          * of the SETUP_FINALLY. */
; 235  :         if (addr == new_lasti || addr == f->f_lasti) {

  00679	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR new_lasti$[rsp]
  00680	39 84 24 2c 01
	00 00		 cmp	 DWORD PTR addr$[rsp], eax
  00687	74 1b		 je	 SHORT $LN25@frame_setl
  00689	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00691	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  00697	39 84 24 2c 01
	00 00		 cmp	 DWORD PTR addr$[rsp], eax
  0069e	0f 85 b8 00 00
	00		 jne	 $LN26@frame_setl
$LN25@frame_setl:

; 236  :             int i = 0;

  006a4	c7 84 24 44 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$20622[rsp], 0

; 237  :             int setup_addr = -1;

  006af	c7 84 24 48 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR setup_addr$20623[rsp], -1

; 238  :             for (i = blockstack_top-1; i >= 0; i--) {

  006ba	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blockstack_top$[rsp]
  006c1	ff c8		 dec	 eax
  006c3	89 84 24 44 01
	00 00		 mov	 DWORD PTR i$20622[rsp], eax
  006ca	eb 10		 jmp	 SHORT $LN24@frame_setl
$LN23@frame_setl:
  006cc	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR i$20622[rsp]
  006d3	ff c8		 dec	 eax
  006d5	89 84 24 44 01
	00 00		 mov	 DWORD PTR i$20622[rsp], eax
$LN24@frame_setl:
  006dc	83 bc 24 44 01
	00 00 00	 cmp	 DWORD PTR i$20622[rsp], 0
  006e4	7c 29		 jl	 SHORT $LN22@frame_setl

; 239  :                 if (in_finally[i]) {

  006e6	48 63 84 24 44
	01 00 00	 movsxd	 rax, DWORD PTR i$20622[rsp]
  006ee	83 bc 84 80 00
	00 00 00	 cmp	 DWORD PTR in_finally$[rsp+rax*4], 0
  006f6	74 15		 je	 SHORT $LN21@frame_setl

; 240  :                     setup_addr = blockstack[i];

  006f8	48 63 84 24 44
	01 00 00	 movsxd	 rax, DWORD PTR i$20622[rsp]
  00700	8b 44 84 20	 mov	 eax, DWORD PTR blockstack$[rsp+rax*4]
  00704	89 84 24 48 01
	00 00		 mov	 DWORD PTR setup_addr$20623[rsp], eax

; 241  :                     break;

  0070b	eb 02		 jmp	 SHORT $LN22@frame_setl
$LN21@frame_setl:

; 242  :                 }
; 243  :             }

  0070d	eb bd		 jmp	 SHORT $LN23@frame_setl
$LN22@frame_setl:

; 244  : 
; 245  :             if (setup_addr != -1) {

  0070f	83 bc 24 48 01
	00 00 ff	 cmp	 DWORD PTR setup_addr$20623[rsp], -1
  00717	74 43		 je	 SHORT $LN20@frame_setl

; 246  :                 if (addr == new_lasti) {

  00719	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR new_lasti$[rsp]
  00720	39 84 24 2c 01
	00 00		 cmp	 DWORD PTR addr$[rsp], eax
  00727	75 0e		 jne	 SHORT $LN19@frame_setl

; 247  :                     new_lasti_setup_addr = setup_addr;

  00729	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR setup_addr$20623[rsp]
  00730	89 84 24 d4 00
	00 00		 mov	 DWORD PTR new_lasti_setup_addr$[rsp], eax
$LN19@frame_setl:

; 248  :                 }
; 249  : 
; 250  :                 if (addr == f->f_lasti) {

  00737	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0073f	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  00745	39 84 24 2c 01
	00 00		 cmp	 DWORD PTR addr$[rsp], eax
  0074c	75 0e		 jne	 SHORT $LN18@frame_setl

; 251  :                     f_lasti_setup_addr = setup_addr;

  0074e	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR setup_addr$20623[rsp]
  00755	89 84 24 24 01
	00 00		 mov	 DWORD PTR f_lasti_setup_addr$[rsp], eax
$LN18@frame_setl:
$LN20@frame_setl:
$LN26@frame_setl:

; 252  :                 }
; 253  :             }
; 254  :         }
; 255  : 
; 256  :         if (op >= HAVE_ARGUMENT) {

  0075c	0f b6 84 24 40
	01 00 00	 movzx	 eax, BYTE PTR op$20603[rsp]
  00764	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  00767	7c 11		 jl	 SHORT $LN17@frame_setl

; 257  :             addr += 2;

  00769	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00770	83 c0 02	 add	 eax, 2
  00773	89 84 24 2c 01
	00 00		 mov	 DWORD PTR addr$[rsp], eax
$LN17@frame_setl:

; 258  :         }
; 259  :     }

  0077a	e9 45 fd ff ff	 jmp	 $LN39@frame_setl
$LN38@frame_setl:

; 260  : 
; 261  :     /* Verify that the blockstack tracking code didn't get lost. */
; 262  :     assert(blockstack_top == 0);

  0077f	83 bc 24 20 01
	00 00 00	 cmp	 DWORD PTR blockstack_top$[rsp], 0
  00787	74 1c		 je	 SHORT $LN62@frame_setl
  00789	41 b8 06 01 00
	00		 mov	 r8d, 262		; 00000106H
  0078f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00796	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@MPHLFDGM@?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0079d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007a3	33 c0		 xor	 eax, eax
$LN62@frame_setl:

; 263  : 
; 264  :     /* After all that, are we jumping into / out of a 'finally' block? */
; 265  :     if (new_lasti_setup_addr != f_lasti_setup_addr) {

  007a5	8b 84 24 24 01
	00 00		 mov	 eax, DWORD PTR f_lasti_setup_addr$[rsp]
  007ac	39 84 24 d4 00
	00 00		 cmp	 DWORD PTR new_lasti_setup_addr$[rsp], eax
  007b3	74 1d		 je	 SHORT $LN16@frame_setl

; 266  :         PyErr_SetString(PyExc_ValueError,
; 267  :                     "can't jump into or out of a 'finally' block");

  007b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@FFLIIPOI@can?8t?5jump?5into?5or?5out?5of?5a?5?8fin@
  007bc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  007c3	e8 00 00 00 00	 call	 PyErr_SetString

; 268  :         return -1;

  007c8	b8 ff ff ff ff	 mov	 eax, -1
  007cd	e9 cd 02 00 00	 jmp	 $LN55@frame_setl
$LN16@frame_setl:

; 269  :     }
; 270  : 
; 271  : 
; 272  :     /* Police block-jumping (you can't jump into the middle of a block)
; 273  :      * and ensure that the blockstack finishes up in a sensible state (by
; 274  :      * popping any blocks we're jumping out of).  We look at all the
; 275  :      * blockstack operations between the current position and the new
; 276  :      * one, and keep track of how many blocks we drop out of on the way.
; 277  :      * By also keeping track of the lowest blockstack position we see, we
; 278  :      * can tell whether the jump goes into any blocks without coming out
; 279  :      * again - in that case we raise an exception below. */
; 280  :     delta_iblock = 0;

  007d2	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR delta_iblock$[rsp], 0

; 281  :     for (addr = min_addr; addr < max_addr; addr++) {

  007dd	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR min_addr$[rsp]
  007e4	89 84 24 2c 01
	00 00		 mov	 DWORD PTR addr$[rsp], eax
  007eb	eb 10		 jmp	 SHORT $LN15@frame_setl
$LN14@frame_setl:
  007ed	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  007f4	ff c0		 inc	 eax
  007f6	89 84 24 2c 01
	00 00		 mov	 DWORD PTR addr$[rsp], eax
$LN15@frame_setl:
  007fd	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR max_addr$[rsp]
  00804	39 84 24 2c 01
	00 00		 cmp	 DWORD PTR addr$[rsp], eax
  0080b	0f 8d cc 00 00
	00		 jge	 $LN13@frame_setl

; 282  :         unsigned char op = code[addr];

  00811	48 63 84 24 2c
	01 00 00	 movsxd	 rax, DWORD PTR addr$[rsp]
  00819	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  00821	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00825	88 84 24 4c 01
	00 00		 mov	 BYTE PTR op$20639[rsp], al

; 283  :         switch (op) {

  0082c	0f b6 84 24 4c
	01 00 00	 movzx	 eax, BYTE PTR op$20639[rsp]
  00834	88 84 24 6c 01
	00 00		 mov	 BYTE PTR tv261[rsp], al
  0083b	80 bc 24 6c 01
	00 00 57	 cmp	 BYTE PTR tv261[rsp], 87	; 00000057H
  00843	74 32		 je	 SHORT $LN9@frame_setl
  00845	80 bc 24 6c 01
	00 00 77	 cmp	 BYTE PTR tv261[rsp], 119 ; 00000077H
  0084d	76 38		 jbe	 SHORT $LN11@frame_setl
  0084f	80 bc 24 6c 01
	00 00 7a	 cmp	 BYTE PTR tv261[rsp], 122 ; 0000007aH
  00857	76 0c		 jbe	 SHORT $LN10@frame_setl
  00859	80 bc 24 6c 01
	00 00 8f	 cmp	 BYTE PTR tv261[rsp], 143 ; 0000008fH
  00861	74 02		 je	 SHORT $LN10@frame_setl
  00863	eb 22		 jmp	 SHORT $LN11@frame_setl
$LN10@frame_setl:

; 284  :         case SETUP_LOOP:
; 285  :         case SETUP_EXCEPT:
; 286  :         case SETUP_FINALLY:
; 287  :         case SETUP_WITH:
; 288  :             delta_iblock++;

  00865	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR delta_iblock$[rsp]
  0086c	ff c0		 inc	 eax
  0086e	89 84 24 10 01
	00 00		 mov	 DWORD PTR delta_iblock$[rsp], eax

; 289  :             break;

  00875	eb 10		 jmp	 SHORT $LN11@frame_setl
$LN9@frame_setl:

; 290  : 
; 291  :         case POP_BLOCK:
; 292  :             delta_iblock--;

  00877	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR delta_iblock$[rsp]
  0087e	ff c8		 dec	 eax
  00880	89 84 24 10 01
	00 00		 mov	 DWORD PTR delta_iblock$[rsp], eax
$LN11@frame_setl:

; 293  :             break;
; 294  :         }
; 295  : 
; 296  :         min_delta_iblock = MIN(min_delta_iblock, delta_iblock);

  00887	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR delta_iblock$[rsp]
  0088e	39 44 24 70	 cmp	 DWORD PTR min_delta_iblock$[rsp], eax
  00892	7d 0d		 jge	 SHORT $LN63@frame_setl
  00894	8b 44 24 70	 mov	 eax, DWORD PTR min_delta_iblock$[rsp]
  00898	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv271[rsp], eax
  0089f	eb 0e		 jmp	 SHORT $LN64@frame_setl
$LN63@frame_setl:
  008a1	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR delta_iblock$[rsp]
  008a8	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv271[rsp], eax
$LN64@frame_setl:
  008af	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv271[rsp]
  008b6	89 44 24 70	 mov	 DWORD PTR min_delta_iblock$[rsp], eax

; 297  : 
; 298  :         if (op >= HAVE_ARGUMENT) {

  008ba	0f b6 84 24 4c
	01 00 00	 movzx	 eax, BYTE PTR op$20639[rsp]
  008c2	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  008c5	7c 11		 jl	 SHORT $LN8@frame_setl

; 299  :             addr += 2;

  008c7	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  008ce	83 c0 02	 add	 eax, 2
  008d1	89 84 24 2c 01
	00 00		 mov	 DWORD PTR addr$[rsp], eax
$LN8@frame_setl:

; 300  :         }
; 301  :     }

  008d8	e9 10 ff ff ff	 jmp	 $LN14@frame_setl
$LN13@frame_setl:

; 302  : 
; 303  :     /* Derive the absolute iblock values from the deltas. */
; 304  :     min_iblock = f->f_iblock + min_delta_iblock;

  008dd	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  008e5	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [rax+216]
  008eb	03 44 24 70	 add	 eax, DWORD PTR min_delta_iblock$[rsp]
  008ef	89 84 24 28 01
	00 00		 mov	 DWORD PTR min_iblock$[rsp], eax

; 305  :     if (new_lasti > f->f_lasti) {

  008f6	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  008fe	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  00904	39 84 24 08 01
	00 00		 cmp	 DWORD PTR new_lasti$[rsp], eax
  0090b	7e 1e		 jle	 SHORT $LN7@frame_setl

; 306  :         /* Forwards jump. */
; 307  :         new_iblock = f->f_iblock + delta_iblock;

  0090d	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00915	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [rax+216]
  0091b	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR delta_iblock$[rsp]
  00922	89 84 24 00 01
	00 00		 mov	 DWORD PTR new_iblock$[rsp], eax

; 308  :     }
; 309  :     else {

  00929	eb 1e		 jmp	 SHORT $LN6@frame_setl
$LN7@frame_setl:

; 310  :         /* Backwards jump. */
; 311  :         new_iblock = f->f_iblock - delta_iblock;

  0092b	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00933	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR delta_iblock$[rsp]
  0093a	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [rax+216]
  00940	2b c1		 sub	 eax, ecx
  00942	89 84 24 00 01
	00 00		 mov	 DWORD PTR new_iblock$[rsp], eax
$LN6@frame_setl:

; 312  :     }
; 313  : 
; 314  :     /* Are we jumping into a block? */
; 315  :     if (new_iblock > min_iblock) {

  00949	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR min_iblock$[rsp]
  00950	39 84 24 00 01
	00 00		 cmp	 DWORD PTR new_iblock$[rsp], eax
  00957	7e 1d		 jle	 SHORT $LN5@frame_setl

; 316  :         PyErr_SetString(PyExc_ValueError,
; 317  :                         "can't jump into the middle of a block");

  00959	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@MHDHEJCF@can?8t?5jump?5into?5the?5middle?5of?5a?5@
  00960	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00967	e8 00 00 00 00	 call	 PyErr_SetString

; 318  :         return -1;

  0096c	b8 ff ff ff ff	 mov	 eax, -1
  00971	e9 29 01 00 00	 jmp	 $LN55@frame_setl
$LN5@frame_setl:
$LN4@frame_setl:

; 319  :     }
; 320  : 
; 321  :     /* Pop any blocks that we're jumping out of. */
; 322  :     while (f->f_iblock > new_iblock) {

  00976	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0097e	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR new_iblock$[rsp]
  00985	39 88 d8 00 00
	00		 cmp	 DWORD PTR [rax+216], ecx
  0098b	0f 8e e2 00 00
	00		 jle	 $LN3@frame_setl

; 323  :         PyTryBlock *b = &f->f_blockstack[--f->f_iblock];

  00991	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00999	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [rax+216]
  0099f	ff c8		 dec	 eax
  009a1	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv291[rsp], eax
  009a8	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  009b0	8b 8c 24 74 01
	00 00		 mov	 ecx, DWORD PTR tv291[rsp]
  009b7	89 88 d8 00 00
	00		 mov	 DWORD PTR [rax+216], ecx
  009bd	48 63 84 24 74
	01 00 00	 movsxd	 rax, DWORD PTR tv291[rsp]
  009c5	48 6b c0 0c	 imul	 rax, 12
  009c9	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  009d1	48 8d 84 01 dc
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+220]
  009d9	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR b$20654[rsp], rax
$LN2@frame_setl:

; 324  :         while ((f->f_stacktop - f->f_valuestack) > b->b_level) {

  009e1	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  009e9	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  009f1	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  009f8	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  009ff	48 2b c1	 sub	 rax, rcx
  00a02	48 c1 f8 03	 sar	 rax, 3
  00a06	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR b$20654[rsp]
  00a0e	48 63 49 08	 movsxd	 rcx, DWORD PTR [rcx+8]
  00a12	48 3b c1	 cmp	 rax, rcx
  00a15	7e 57		 jle	 SHORT $LN1@frame_setl

; 325  :             PyObject *v = (*--f->f_stacktop);

  00a17	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00a1f	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00a26	48 83 e8 08	 sub	 rax, 8
  00a2a	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv304[rsp], rax
  00a32	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00a3a	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR tv304[rsp]
  00a42	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx
  00a49	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR tv304[rsp]
  00a51	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00a54	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR v$20658[rsp], rax

; 326  :             Py_DECREF(v);

  00a5c	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR v$20658[rsp]
  00a64	e8 00 00 00 00	 call	 _Py_DecRef

; 327  :         }

  00a69	e9 73 ff ff ff	 jmp	 $LN2@frame_setl
$LN1@frame_setl:

; 328  :     }

  00a6e	e9 03 ff ff ff	 jmp	 $LN4@frame_setl
$LN3@frame_setl:

; 329  : 
; 330  :     /* Finally set the new f_lineno and f_lasti and return OK. */
; 331  :     f->f_lineno = new_lineno;

  00a73	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00a7b	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR new_lineno$[rsp]
  00a82	89 88 d4 00 00
	00		 mov	 DWORD PTR [rax+212], ecx

; 332  :     f->f_lasti = new_lasti;

  00a88	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00a90	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR new_lasti$[rsp]
  00a97	89 88 d0 00 00
	00		 mov	 DWORD PTR [rax+208], ecx

; 333  :     return 0;

  00a9d	33 c0		 xor	 eax, eax
$LN55@frame_setl:

; 334  : }

  00a9f	48 81 c4 88 01
	00 00		 add	 rsp, 392		; 00000188H
  00aa6	c3		 ret	 0
frame_setlineno ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\objects\frameobject.c
pdata	SEGMENT
$pdata$frame_gettrace DD imagerel frame_gettrace
	DD	imagerel frame_gettrace+71
	DD	imagerel $unwind$frame_gettrace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_gettrace DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT frame_gettrace
_TEXT	SEGMENT
trace$ = 32
f$ = 64
closure$ = 72
frame_gettrace PROC					; COMDAT

; 338  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 339  :     PyObject* trace = f->f_trace;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00013	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  0001a	48 89 44 24 20	 mov	 QWORD PTR trace$[rsp], rax

; 340  : 
; 341  :     if (trace == NULL)

  0001f	48 83 7c 24 20
	00		 cmp	 QWORD PTR trace$[rsp], 0
  00025	75 0c		 jne	 SHORT $LN1@frame_gett

; 342  :         trace = Py_None;

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0002e	48 89 44 24 20	 mov	 QWORD PTR trace$[rsp], rax
$LN1@frame_gett:

; 343  : 
; 344  :     Py_INCREF(trace);

  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR trace$[rsp]
  00038	e8 00 00 00 00	 call	 _Py_IncRef

; 345  : 
; 346  :     return trace;

  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR trace$[rsp]

; 347  : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
frame_gettrace ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$frame_settrace DD imagerel frame_settrace
	DD	imagerel frame_settrace+129
	DD	imagerel $unwind$frame_settrace
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_settrace DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT frame_settrace
_TEXT	SEGMENT
old_value$ = 32
f$ = 64
v$ = 72
closure$ = 80
frame_settrace PROC					; COMDAT

; 351  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 352  :     PyObject* old_value;
; 353  : 
; 354  :     /* We rely on f_lineno being accurate when f_trace is set. */
; 355  :     f->f_lineno = PyFrame_GetLineNumber(f);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR f$[rsp]
  00018	e8 00 00 00 00	 call	 PyFrame_GetLineNumber
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR f$[rsp]
  00022	89 81 d4 00 00
	00		 mov	 DWORD PTR [rcx+212], eax

; 356  : 
; 357  :     old_value = f->f_trace;

  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  0002d	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  00034	48 89 44 24 20	 mov	 QWORD PTR old_value$[rsp], rax
$LN8@frame_sett:

; 358  :     Py_XINCREF(v);

  00039	48 83 7c 24 48
	00		 cmp	 QWORD PTR v$[rsp], 0
  0003f	74 0a		 je	 SHORT $LN5@frame_sett
  00041	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  00046	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@frame_sett:
  0004b	33 c0		 xor	 eax, eax
  0004d	85 c0		 test	 eax, eax
  0004f	75 e8		 jne	 SHORT $LN8@frame_sett

; 359  :     f->f_trace = v;

  00051	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00056	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  0005b	48 89 88 a8 00
	00 00		 mov	 QWORD PTR [rax+168], rcx
$LN4@frame_sett:

; 360  :     Py_XDECREF(old_value);

  00062	48 83 7c 24 20
	00		 cmp	 QWORD PTR old_value$[rsp], 0
  00068	74 0a		 je	 SHORT $LN1@frame_sett
  0006a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR old_value$[rsp]
  0006f	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@frame_sett:
  00074	33 c0		 xor	 eax, eax
  00076	85 c0		 test	 eax, eax
  00078	75 e8		 jne	 SHORT $LN4@frame_sett

; 361  : 
; 362  :     return 0;

  0007a	33 c0		 xor	 eax, eax

; 363  : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
frame_settrace ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@FMIPEGNB@frame_dealloc?$AA@		; `string'
PUBLIC	??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@ ; `string'
EXTRN	_PyTrash_thread_deposit_object:PROC
EXTRN	_PyTrash_thread_destroy_chain:PROC
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyThreadState_Get:PROC
EXTRN	PyObject_GC_UnTrack:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$frame_dealloc DD imagerel frame_dealloc
	DD	imagerel frame_dealloc+1311
	DD	imagerel $unwind$frame_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_dealloc DD 020c01H
	DD	011010cH
xdata	ENDS
;	COMDAT ??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
CONST	SEGMENT
??_C@_0O@FMIPEGNB@frame_dealloc?$AA@ DB 'frame_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@ DB '..\Objects\fram'
	DB	'eobject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT frame_dealloc
_TEXT	SEGMENT
p$ = 48
valuestack$ = 56
co$ = 64
_tstate$20719 = 72
_py_tmp$20728 = 80
_py_tmp$20753 = 88
_py_tmp$20761 = 96
_py_tmp$20769 = 104
_py_tmp$20777 = 112
_py_tmp$20785 = 120
f$ = 144
frame_dealloc PROC					; COMDAT

; 424  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 425  :     PyObject **p, **valuestack;
; 426  :     PyCodeObject *co;
; 427  :     Py_GUARD

  0000c	e8 00 00 00 00	 call	 _Py_PXCTX
  00011	85 c0		 test	 eax, eax
  00013	74 1c		 je	 SHORT $LN50@frame_deal
  00015	45 33 c9	 xor	 r9d, r9d
  00018	41 b8 ab 01 00
	00		 mov	 r8d, 427		; 000001abH
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  0002c	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN50@frame_deal:

; 428  : 
; 429  :     PyObject_GC_UnTrack(f);

  00031	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  00039	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN49@frame_deal:

; 430  :     Py_TRASHCAN_SAFE_BEGIN(f)

  0003e	e8 00 00 00 00	 call	 PyThreadState_Get
  00043	48 89 44 24 48	 mov	 QWORD PTR _tstate$20719[rsp], rax
  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR _tstate$20719[rsp]
  0004d	83 b8 94 00 00
	00 32		 cmp	 DWORD PTR [rax+148], 50	; 00000032H
  00054	0f 8d a6 04 00
	00		 jge	 $LN46@frame_deal
  0005a	48 8b 44 24 48	 mov	 rax, QWORD PTR _tstate$20719[rsp]
  0005f	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00065	ff c0		 inc	 eax
  00067	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _tstate$20719[rsp]
  0006c	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 431  :     /* Kill all local variables */
; 432  :     valuestack = f->f_valuestack;

  00072	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0007a	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00081	48 89 44 24 38	 mov	 QWORD PTR valuestack$[rsp], rax

; 433  :     for (p = f->f_localsplus; p < valuestack; p++)

  00086	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0008e	48 05 d0 01 00
	00		 add	 rax, 464		; 000001d0H
  00094	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax
  00099	eb 0e		 jmp	 SHORT $LN45@frame_deal
$LN44@frame_deal:
  0009b	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  000a0	48 83 c0 08	 add	 rax, 8
  000a4	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax
$LN45@frame_deal:
  000a9	48 8b 44 24 38	 mov	 rax, QWORD PTR valuestack$[rsp]
  000ae	48 39 44 24 30	 cmp	 QWORD PTR p$[rsp], rax
  000b3	73 63		 jae	 SHORT $LN43@frame_deal
$LN42@frame_deal:

; 434  :         Py_CLEAR(*p);

  000b5	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  000ba	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000be	74 50		 je	 SHORT $LN39@frame_deal
  000c0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c8	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  000cd	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000d0	41 b8 b2 01 00
	00		 mov	 r8d, 434		; 000001b2H
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  000e4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e9	85 c0		 test	 eax, eax
  000eb	75 23		 jne	 SHORT $LN39@frame_deal
  000ed	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  000f2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f5	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$20728[rsp], rax
  000fa	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  000ff	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00106	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$20728[rsp]
  0010b	e8 00 00 00 00	 call	 _Py_DecRef
$LN39@frame_deal:
  00110	33 c0		 xor	 eax, eax
  00112	85 c0		 test	 eax, eax
  00114	75 9f		 jne	 SHORT $LN42@frame_deal
  00116	eb 83		 jmp	 SHORT $LN44@frame_deal
$LN43@frame_deal:

; 435  : 
; 436  :     /* Free stack */
; 437  :     if (f->f_stacktop != NULL) {

  00118	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00120	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00128	74 50		 je	 SHORT $LN38@frame_deal

; 438  :         for (p = valuestack; p < f->f_stacktop; p++)

  0012a	48 8b 44 24 38	 mov	 rax, QWORD PTR valuestack$[rsp]
  0012f	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax
  00134	eb 0e		 jmp	 SHORT $LN37@frame_deal
$LN36@frame_deal:
  00136	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  0013b	48 83 c0 08	 add	 rax, 8
  0013f	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax
$LN37@frame_deal:
  00144	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0014c	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00153	48 39 44 24 30	 cmp	 QWORD PTR p$[rsp], rax
  00158	73 20		 jae	 SHORT $LN35@frame_deal
$LN34@frame_deal:

; 439  :             Py_XDECREF(*p);

  0015a	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  0015f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00163	74 0d		 je	 SHORT $LN31@frame_deal
  00165	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  0016a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0016d	e8 00 00 00 00	 call	 _Py_DecRef
$LN31@frame_deal:
  00172	33 c0		 xor	 eax, eax
  00174	85 c0		 test	 eax, eax
  00176	75 e2		 jne	 SHORT $LN34@frame_deal
  00178	eb bc		 jmp	 SHORT $LN36@frame_deal
$LN35@frame_deal:
$LN38@frame_deal:
$LN30@frame_deal:

; 440  :     }
; 441  : 
; 442  :     Py_XDECREF(f->f_back);

  0017a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00182	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00187	74 11		 je	 SHORT $LN27@frame_deal
  00189	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00191	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00195	e8 00 00 00 00	 call	 _Py_DecRef
$LN27@frame_deal:
  0019a	33 c0		 xor	 eax, eax
  0019c	85 c0		 test	 eax, eax
  0019e	75 da		 jne	 SHORT $LN30@frame_deal

; 443  :     Py_DECREF(f->f_builtins);

  001a0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  001a8	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  001af	e8 00 00 00 00	 call	 _Py_DecRef

; 444  :     Py_DECREF(f->f_globals);

  001b4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  001bc	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  001c3	e8 00 00 00 00	 call	 _Py_DecRef
$LN26@frame_deal:

; 445  :     Py_CLEAR(f->f_locals);

  001c8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  001d0	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  001d8	74 65		 je	 SHORT $LN23@frame_deal
  001da	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001e2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  001ea	4c 8b 88 90 00
	00 00		 mov	 r9, QWORD PTR [rax+144]
  001f1	41 b8 bd 01 00
	00		 mov	 r8d, 445		; 000001bdH
  001f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  00205	e8 00 00 00 00	 call	 _PyParallel_Guard
  0020a	85 c0		 test	 eax, eax
  0020c	75 31		 jne	 SHORT $LN23@frame_deal
  0020e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00216	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0021d	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$20753[rsp], rax
  00222	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0022a	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0
  00235	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$20753[rsp]
  0023a	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@frame_deal:
  0023f	33 c0		 xor	 eax, eax
  00241	85 c0		 test	 eax, eax
  00243	75 83		 jne	 SHORT $LN26@frame_deal
$LN22@frame_deal:

; 446  :     Py_CLEAR(f->f_trace);

  00245	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0024d	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  00255	74 65		 je	 SHORT $LN19@frame_deal
  00257	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0025f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00267	4c 8b 88 a8 00
	00 00		 mov	 r9, QWORD PTR [rax+168]
  0026e	41 b8 be 01 00
	00		 mov	 r8d, 446		; 000001beH
  00274	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0027b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  00282	e8 00 00 00 00	 call	 _PyParallel_Guard
  00287	85 c0		 test	 eax, eax
  00289	75 31		 jne	 SHORT $LN19@frame_deal
  0028b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00293	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  0029a	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$20761[rsp], rax
  0029f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  002a7	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0
  002b2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$20761[rsp]
  002b7	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@frame_deal:
  002bc	33 c0		 xor	 eax, eax
  002be	85 c0		 test	 eax, eax
  002c0	75 83		 jne	 SHORT $LN22@frame_deal
$LN18@frame_deal:

; 447  :     Py_CLEAR(f->f_exc_type);

  002c2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  002ca	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  002d2	74 65		 je	 SHORT $LN15@frame_deal
  002d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002dc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  002e4	4c 8b 88 b0 00
	00 00		 mov	 r9, QWORD PTR [rax+176]
  002eb	41 b8 bf 01 00
	00		 mov	 r8d, 447		; 000001bfH
  002f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  002f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  002ff	e8 00 00 00 00	 call	 _PyParallel_Guard
  00304	85 c0		 test	 eax, eax
  00306	75 31		 jne	 SHORT $LN15@frame_deal
  00308	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00310	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  00317	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$20769[rsp], rax
  0031c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00324	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0
  0032f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$20769[rsp]
  00334	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@frame_deal:
  00339	33 c0		 xor	 eax, eax
  0033b	85 c0		 test	 eax, eax
  0033d	75 83		 jne	 SHORT $LN18@frame_deal
$LN14@frame_deal:

; 448  :     Py_CLEAR(f->f_exc_value);

  0033f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00347	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0034f	74 65		 je	 SHORT $LN11@frame_deal
  00351	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00359	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00361	4c 8b 88 b8 00
	00 00		 mov	 r9, QWORD PTR [rax+184]
  00368	41 b8 c0 01 00
	00		 mov	 r8d, 448		; 000001c0H
  0036e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00375	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  0037c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00381	85 c0		 test	 eax, eax
  00383	75 31		 jne	 SHORT $LN11@frame_deal
  00385	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0038d	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00394	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$20777[rsp], rax
  00399	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  003a1	48 c7 80 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+184], 0
  003ac	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$20777[rsp]
  003b1	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@frame_deal:
  003b6	33 c0		 xor	 eax, eax
  003b8	85 c0		 test	 eax, eax
  003ba	75 83		 jne	 SHORT $LN14@frame_deal
$LN10@frame_deal:

; 449  :     Py_CLEAR(f->f_exc_traceback);

  003bc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  003c4	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  003cc	74 65		 je	 SHORT $LN7@frame_deal
  003ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003d6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  003de	4c 8b 88 c0 00
	00 00		 mov	 r9, QWORD PTR [rax+192]
  003e5	41 b8 c1 01 00
	00		 mov	 r8d, 449		; 000001c1H
  003eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  003f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIPEGNB@frame_dealloc?$AA@
  003f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  003fe	85 c0		 test	 eax, eax
  00400	75 31		 jne	 SHORT $LN7@frame_deal
  00402	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0040a	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00411	48 89 44 24 78	 mov	 QWORD PTR _py_tmp$20785[rsp], rax
  00416	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0041e	48 c7 80 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+192], 0
  00429	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _py_tmp$20785[rsp]
  0042e	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@frame_deal:
  00433	33 c0		 xor	 eax, eax
  00435	85 c0		 test	 eax, eax
  00437	75 83		 jne	 SHORT $LN10@frame_deal

; 450  : 
; 451  :     co = f->f_code;

  00439	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00441	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00445	48 89 44 24 40	 mov	 QWORD PTR co$[rsp], rax

; 452  :     if (co->co_zombieframe == NULL)

  0044a	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0044f	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  00457	75 16		 jne	 SHORT $LN6@frame_deal

; 453  :         co->co_zombieframe = f;

  00459	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0045e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  00466	48 89 88 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rcx
  0046d	eb 4b		 jmp	 SHORT $LN5@frame_deal
$LN6@frame_deal:

; 454  :     else if (numfree < PyFrame_MAXFREELIST) {

  0046f	81 3d 00 00 00
	00 c8 00 00 00	 cmp	 DWORD PTR numfree, 200	; 000000c8H
  00479	7d 32		 jge	 SHORT $LN4@frame_deal

; 455  :         ++numfree;

  0047b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  00481	ff c0		 inc	 eax
  00483	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 456  :         f->f_back = free_list;

  00489	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00491	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR free_list
  00498	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 457  :         free_list = f;

  0049c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  004a4	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax

; 458  :     }
; 459  :     else

  004ab	eb 0d		 jmp	 SHORT $LN3@frame_deal
$LN4@frame_deal:

; 460  :         PyObject_GC_Del(f);

  004ad	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  004b5	e8 00 00 00 00	 call	 PyObject_GC_Del
$LN3@frame_deal:
$LN5@frame_deal:

; 461  : 
; 462  :     Py_DECREF(co);

  004ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR co$[rsp]
  004bf	e8 00 00 00 00	 call	 _Py_DecRef

; 463  :     Py_TRASHCAN_SAFE_END(f)

  004c4	48 8b 44 24 48	 mov	 rax, QWORD PTR _tstate$20719[rsp]
  004c9	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  004cf	ff c8		 dec	 eax
  004d1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _tstate$20719[rsp]
  004d6	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
  004dc	48 8b 44 24 48	 mov	 rax, QWORD PTR _tstate$20719[rsp]
  004e1	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  004e9	74 13		 je	 SHORT $LN2@frame_deal
  004eb	48 8b 44 24 48	 mov	 rax, QWORD PTR _tstate$20719[rsp]
  004f0	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [rax+148], 0
  004f7	7f 05		 jg	 SHORT $LN2@frame_deal
  004f9	e8 00 00 00 00	 call	 _PyTrash_thread_destroy_chain
$LN2@frame_deal:
  004fe	eb 0d		 jmp	 SHORT $LN1@frame_deal
$LN46@frame_deal:
  00500	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  00508	e8 00 00 00 00	 call	 _PyTrash_thread_deposit_object
$LN1@frame_deal:
  0050d	33 c0		 xor	 eax, eax
  0050f	85 c0		 test	 eax, eax
  00511	0f 85 27 fb ff
	ff		 jne	 $LN49@frame_deal

; 464  : }

  00517	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0051e	c3		 ret	 0
frame_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@CCLEOHBL@frame_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$frame_traverse DD imagerel frame_traverse
	DD	imagerel frame_traverse+1420
	DD	imagerel $unwind$frame_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_traverse DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0P@CCLEOHBL@frame_traverse?$AA@
CONST	SEGMENT
??_C@_0P@CCLEOHBL@frame_traverse?$AA@ DB 'frame_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT frame_traverse
_TEXT	SEGMENT
p$ = 32
i$ = 40
slots$ = 44
fastlocals$ = 48
vret$20816 = 56
vret$20824 = 60
vret$20832 = 64
vret$20840 = 68
vret$20848 = 72
vret$20856 = 76
vret$20864 = 80
vret$20872 = 84
vret$20880 = 88
vret$20893 = 92
vret$20906 = 96
f$ = 128
visit$ = 136
arg$ = 144
frame_traverse PROC					; COMDAT

; 468  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H
$LN73@frame_trav:

; 469  :     PyObject **fastlocals, **p;
; 470  :     int i, slots;
; 471  : 
; 472  :     Py_VISIT(f->f_back);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN70@frame_trav
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 d8 01 00
	00		 mov	 r8d, 472		; 000001d8H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN70@frame_trav:
  00038	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00040	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00045	74 2f		 je	 SHORT $LN69@frame_trav
  00047	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  0004f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00057	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0005b	ff 94 24 88 00
	00 00		 call	 QWORD PTR visit$[rsp]
  00062	89 44 24 38	 mov	 DWORD PTR vret$20816[rsp], eax
  00066	83 7c 24 38 00	 cmp	 DWORD PTR vret$20816[rsp], 0
  0006b	74 09		 je	 SHORT $LN68@frame_trav
  0006d	8b 44 24 38	 mov	 eax, DWORD PTR vret$20816[rsp]
  00071	e9 11 05 00 00	 jmp	 $LN74@frame_trav
$LN68@frame_trav:
$LN69@frame_trav:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 97		 jne	 SHORT $LN73@frame_trav
$LN67@frame_trav:

; 473  :     Py_VISIT(f->f_code);

  0007c	e8 00 00 00 00	 call	 _Py_PXCTX
  00081	85 c0		 test	 eax, eax
  00083	74 1c		 je	 SHORT $LN64@frame_trav
  00085	45 33 c9	 xor	 r9d, r9d
  00088	41 b8 d9 01 00
	00		 mov	 r8d, 473		; 000001d9H
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  0009c	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN64@frame_trav:
  000a1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  000a9	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  000ae	74 2f		 je	 SHORT $LN63@frame_trav
  000b0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  000b8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  000c0	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  000c4	ff 94 24 88 00
	00 00		 call	 QWORD PTR visit$[rsp]
  000cb	89 44 24 3c	 mov	 DWORD PTR vret$20824[rsp], eax
  000cf	83 7c 24 3c 00	 cmp	 DWORD PTR vret$20824[rsp], 0
  000d4	74 09		 je	 SHORT $LN62@frame_trav
  000d6	8b 44 24 3c	 mov	 eax, DWORD PTR vret$20824[rsp]
  000da	e9 a8 04 00 00	 jmp	 $LN74@frame_trav
$LN62@frame_trav:
$LN63@frame_trav:
  000df	33 c0		 xor	 eax, eax
  000e1	85 c0		 test	 eax, eax
  000e3	75 97		 jne	 SHORT $LN67@frame_trav
$LN61@frame_trav:

; 474  :     Py_VISIT(f->f_builtins);

  000e5	e8 00 00 00 00	 call	 _Py_PXCTX
  000ea	85 c0		 test	 eax, eax
  000ec	74 1c		 je	 SHORT $LN58@frame_trav
  000ee	45 33 c9	 xor	 r9d, r9d
  000f1	41 b8 da 01 00
	00		 mov	 r8d, 474		; 000001daH
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  00105	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN58@frame_trav:
  0010a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00112	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0011a	74 32		 je	 SHORT $LN57@frame_trav
  0011c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  00124	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0012c	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00133	ff 94 24 88 00
	00 00		 call	 QWORD PTR visit$[rsp]
  0013a	89 44 24 40	 mov	 DWORD PTR vret$20832[rsp], eax
  0013e	83 7c 24 40 00	 cmp	 DWORD PTR vret$20832[rsp], 0
  00143	74 09		 je	 SHORT $LN56@frame_trav
  00145	8b 44 24 40	 mov	 eax, DWORD PTR vret$20832[rsp]
  00149	e9 39 04 00 00	 jmp	 $LN74@frame_trav
$LN56@frame_trav:
$LN57@frame_trav:
  0014e	33 c0		 xor	 eax, eax
  00150	85 c0		 test	 eax, eax
  00152	75 91		 jne	 SHORT $LN61@frame_trav
$LN55@frame_trav:

; 475  :     Py_VISIT(f->f_globals);

  00154	e8 00 00 00 00	 call	 _Py_PXCTX
  00159	85 c0		 test	 eax, eax
  0015b	74 1c		 je	 SHORT $LN52@frame_trav
  0015d	45 33 c9	 xor	 r9d, r9d
  00160	41 b8 db 01 00
	00		 mov	 r8d, 475		; 000001dbH
  00166	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  00174	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN52@frame_trav:
  00179	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00181	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00189	74 32		 je	 SHORT $LN51@frame_trav
  0018b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  00193	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0019b	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  001a2	ff 94 24 88 00
	00 00		 call	 QWORD PTR visit$[rsp]
  001a9	89 44 24 44	 mov	 DWORD PTR vret$20840[rsp], eax
  001ad	83 7c 24 44 00	 cmp	 DWORD PTR vret$20840[rsp], 0
  001b2	74 09		 je	 SHORT $LN50@frame_trav
  001b4	8b 44 24 44	 mov	 eax, DWORD PTR vret$20840[rsp]
  001b8	e9 ca 03 00 00	 jmp	 $LN74@frame_trav
$LN50@frame_trav:
$LN51@frame_trav:
  001bd	33 c0		 xor	 eax, eax
  001bf	85 c0		 test	 eax, eax
  001c1	75 91		 jne	 SHORT $LN55@frame_trav
$LN49@frame_trav:

; 476  :     Py_VISIT(f->f_locals);

  001c3	e8 00 00 00 00	 call	 _Py_PXCTX
  001c8	85 c0		 test	 eax, eax
  001ca	74 1c		 je	 SHORT $LN46@frame_trav
  001cc	45 33 c9	 xor	 r9d, r9d
  001cf	41 b8 dc 01 00
	00		 mov	 r8d, 476		; 000001dcH
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  001e3	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN46@frame_trav:
  001e8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  001f0	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  001f8	74 32		 je	 SHORT $LN45@frame_trav
  001fa	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  00202	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0020a	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  00211	ff 94 24 88 00
	00 00		 call	 QWORD PTR visit$[rsp]
  00218	89 44 24 48	 mov	 DWORD PTR vret$20848[rsp], eax
  0021c	83 7c 24 48 00	 cmp	 DWORD PTR vret$20848[rsp], 0
  00221	74 09		 je	 SHORT $LN44@frame_trav
  00223	8b 44 24 48	 mov	 eax, DWORD PTR vret$20848[rsp]
  00227	e9 5b 03 00 00	 jmp	 $LN74@frame_trav
$LN44@frame_trav:
$LN45@frame_trav:
  0022c	33 c0		 xor	 eax, eax
  0022e	85 c0		 test	 eax, eax
  00230	75 91		 jne	 SHORT $LN49@frame_trav
$LN43@frame_trav:

; 477  :     Py_VISIT(f->f_trace);

  00232	e8 00 00 00 00	 call	 _Py_PXCTX
  00237	85 c0		 test	 eax, eax
  00239	74 1c		 je	 SHORT $LN40@frame_trav
  0023b	45 33 c9	 xor	 r9d, r9d
  0023e	41 b8 dd 01 00
	00		 mov	 r8d, 477		; 000001ddH
  00244	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0024b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  00252	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN40@frame_trav:
  00257	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0025f	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  00267	74 32		 je	 SHORT $LN39@frame_trav
  00269	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  00271	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00279	48 8b 88 a8 00
	00 00		 mov	 rcx, QWORD PTR [rax+168]
  00280	ff 94 24 88 00
	00 00		 call	 QWORD PTR visit$[rsp]
  00287	89 44 24 4c	 mov	 DWORD PTR vret$20856[rsp], eax
  0028b	83 7c 24 4c 00	 cmp	 DWORD PTR vret$20856[rsp], 0
  00290	74 09		 je	 SHORT $LN38@frame_trav
  00292	8b 44 24 4c	 mov	 eax, DWORD PTR vret$20856[rsp]
  00296	e9 ec 02 00 00	 jmp	 $LN74@frame_trav
$LN38@frame_trav:
$LN39@frame_trav:
  0029b	33 c0		 xor	 eax, eax
  0029d	85 c0		 test	 eax, eax
  0029f	75 91		 jne	 SHORT $LN43@frame_trav
$LN37@frame_trav:

; 478  :     Py_VISIT(f->f_exc_type);

  002a1	e8 00 00 00 00	 call	 _Py_PXCTX
  002a6	85 c0		 test	 eax, eax
  002a8	74 1c		 je	 SHORT $LN34@frame_trav
  002aa	45 33 c9	 xor	 r9d, r9d
  002ad	41 b8 de 01 00
	00		 mov	 r8d, 478		; 000001deH
  002b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  002ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  002c1	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN34@frame_trav:
  002c6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  002ce	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  002d6	74 32		 je	 SHORT $LN33@frame_trav
  002d8	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  002e0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  002e8	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  002ef	ff 94 24 88 00
	00 00		 call	 QWORD PTR visit$[rsp]
  002f6	89 44 24 50	 mov	 DWORD PTR vret$20864[rsp], eax
  002fa	83 7c 24 50 00	 cmp	 DWORD PTR vret$20864[rsp], 0
  002ff	74 09		 je	 SHORT $LN32@frame_trav
  00301	8b 44 24 50	 mov	 eax, DWORD PTR vret$20864[rsp]
  00305	e9 7d 02 00 00	 jmp	 $LN74@frame_trav
$LN32@frame_trav:
$LN33@frame_trav:
  0030a	33 c0		 xor	 eax, eax
  0030c	85 c0		 test	 eax, eax
  0030e	75 91		 jne	 SHORT $LN37@frame_trav
$LN31@frame_trav:

; 479  :     Py_VISIT(f->f_exc_value);

  00310	e8 00 00 00 00	 call	 _Py_PXCTX
  00315	85 c0		 test	 eax, eax
  00317	74 1c		 je	 SHORT $LN28@frame_trav
  00319	45 33 c9	 xor	 r9d, r9d
  0031c	41 b8 df 01 00
	00		 mov	 r8d, 479		; 000001dfH
  00322	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00329	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  00330	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN28@frame_trav:
  00335	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0033d	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00345	74 32		 je	 SHORT $LN27@frame_trav
  00347	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  0034f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00357	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0035e	ff 94 24 88 00
	00 00		 call	 QWORD PTR visit$[rsp]
  00365	89 44 24 54	 mov	 DWORD PTR vret$20872[rsp], eax
  00369	83 7c 24 54 00	 cmp	 DWORD PTR vret$20872[rsp], 0
  0036e	74 09		 je	 SHORT $LN26@frame_trav
  00370	8b 44 24 54	 mov	 eax, DWORD PTR vret$20872[rsp]
  00374	e9 0e 02 00 00	 jmp	 $LN74@frame_trav
$LN26@frame_trav:
$LN27@frame_trav:
  00379	33 c0		 xor	 eax, eax
  0037b	85 c0		 test	 eax, eax
  0037d	75 91		 jne	 SHORT $LN31@frame_trav
$LN25@frame_trav:

; 480  :     Py_VISIT(f->f_exc_traceback);

  0037f	e8 00 00 00 00	 call	 _Py_PXCTX
  00384	85 c0		 test	 eax, eax
  00386	74 1c		 je	 SHORT $LN22@frame_trav
  00388	45 33 c9	 xor	 r9d, r9d
  0038b	41 b8 e0 01 00
	00		 mov	 r8d, 480		; 000001e0H
  00391	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00398	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  0039f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN22@frame_trav:
  003a4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  003ac	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  003b4	74 32		 je	 SHORT $LN21@frame_trav
  003b6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  003be	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  003c6	48 8b 88 c0 00
	00 00		 mov	 rcx, QWORD PTR [rax+192]
  003cd	ff 94 24 88 00
	00 00		 call	 QWORD PTR visit$[rsp]
  003d4	89 44 24 58	 mov	 DWORD PTR vret$20880[rsp], eax
  003d8	83 7c 24 58 00	 cmp	 DWORD PTR vret$20880[rsp], 0
  003dd	74 09		 je	 SHORT $LN20@frame_trav
  003df	8b 44 24 58	 mov	 eax, DWORD PTR vret$20880[rsp]
  003e3	e9 9f 01 00 00	 jmp	 $LN74@frame_trav
$LN20@frame_trav:
$LN21@frame_trav:
  003e8	33 c0		 xor	 eax, eax
  003ea	85 c0		 test	 eax, eax
  003ec	75 91		 jne	 SHORT $LN25@frame_trav

; 481  : 
; 482  :     /* locals */
; 483  :     slots = f->f_code->co_nlocals + PyTuple_GET_SIZE(f->f_code->co_cellvars) + PyTuple_GET_SIZE(f->f_code->co_freevars);

  003ee	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  003f6	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  003fa	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  003fe	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  00406	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  0040a	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00411	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]
  00415	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  0041d	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00421	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  00428	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]
  0042c	89 44 24 2c	 mov	 DWORD PTR slots$[rsp], eax

; 484  :     fastlocals = f->f_localsplus;

  00430	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00438	48 05 d0 01 00
	00		 add	 rax, 464		; 000001d0H
  0043e	48 89 44 24 30	 mov	 QWORD PTR fastlocals$[rsp], rax

; 485  :     for (i = slots; --i >= 0; ++fastlocals)

  00443	8b 44 24 2c	 mov	 eax, DWORD PTR slots$[rsp]
  00447	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
  0044b	eb 0e		 jmp	 SHORT $LN19@frame_trav
$LN18@frame_trav:
  0044d	48 8b 44 24 30	 mov	 rax, QWORD PTR fastlocals$[rsp]
  00452	48 83 c0 08	 add	 rax, 8
  00456	48 89 44 24 30	 mov	 QWORD PTR fastlocals$[rsp], rax
$LN19@frame_trav:
  0045b	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  0045f	ff c8		 dec	 eax
  00461	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
  00465	83 7c 24 28 00	 cmp	 DWORD PTR i$[rsp], 0
  0046a	7c 66		 jl	 SHORT $LN17@frame_trav
$LN16@frame_trav:

; 486  :         Py_VISIT(*fastlocals);

  0046c	e8 00 00 00 00	 call	 _Py_PXCTX
  00471	85 c0		 test	 eax, eax
  00473	74 1c		 je	 SHORT $LN13@frame_trav
  00475	45 33 c9	 xor	 r9d, r9d
  00478	41 b8 e6 01 00
	00		 mov	 r8d, 486		; 000001e6H
  0047e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00485	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  0048c	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN13@frame_trav:
  00491	48 8b 44 24 30	 mov	 rax, QWORD PTR fastlocals$[rsp]
  00496	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0049a	74 2b		 je	 SHORT $LN12@frame_trav
  0049c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  004a4	48 8b 44 24 30	 mov	 rax, QWORD PTR fastlocals$[rsp]
  004a9	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  004ac	ff 94 24 88 00
	00 00		 call	 QWORD PTR visit$[rsp]
  004b3	89 44 24 5c	 mov	 DWORD PTR vret$20893[rsp], eax
  004b7	83 7c 24 5c 00	 cmp	 DWORD PTR vret$20893[rsp], 0
  004bc	74 09		 je	 SHORT $LN11@frame_trav
  004be	8b 44 24 5c	 mov	 eax, DWORD PTR vret$20893[rsp]
  004c2	e9 c0 00 00 00	 jmp	 $LN74@frame_trav
$LN11@frame_trav:
$LN12@frame_trav:
  004c7	33 c0		 xor	 eax, eax
  004c9	85 c0		 test	 eax, eax
  004cb	75 9f		 jne	 SHORT $LN16@frame_trav
  004cd	e9 7b ff ff ff	 jmp	 $LN18@frame_trav
$LN17@frame_trav:

; 487  : 
; 488  :     /* stack */
; 489  :     if (f->f_stacktop != NULL) {

  004d2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  004da	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  004e2	0f 84 9d 00 00
	00		 je	 $LN10@frame_trav

; 490  :         for (p = f->f_valuestack; p < f->f_stacktop; p++)

  004e8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  004f0	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  004f7	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  004fc	eb 0e		 jmp	 SHORT $LN9@frame_trav
$LN8@frame_trav:
  004fe	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00503	48 83 c0 08	 add	 rax, 8
  00507	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN9@frame_trav:
  0050c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00514	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0051b	48 39 44 24 20	 cmp	 QWORD PTR p$[rsp], rax
  00520	73 63		 jae	 SHORT $LN7@frame_trav
$LN6@frame_trav:

; 491  :             Py_VISIT(*p);

  00522	e8 00 00 00 00	 call	 _Py_PXCTX
  00527	85 c0		 test	 eax, eax
  00529	74 1c		 je	 SHORT $LN3@frame_trav
  0052b	45 33 c9	 xor	 r9d, r9d
  0052e	41 b8 eb 01 00
	00		 mov	 r8d, 491		; 000001ebH
  00534	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0053b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCLEOHBL@frame_traverse?$AA@
  00542	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@frame_trav:
  00547	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0054c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00550	74 28		 je	 SHORT $LN2@frame_trav
  00552	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  0055a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0055f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00562	ff 94 24 88 00
	00 00		 call	 QWORD PTR visit$[rsp]
  00569	89 44 24 60	 mov	 DWORD PTR vret$20906[rsp], eax
  0056d	83 7c 24 60 00	 cmp	 DWORD PTR vret$20906[rsp], 0
  00572	74 06		 je	 SHORT $LN1@frame_trav
  00574	8b 44 24 60	 mov	 eax, DWORD PTR vret$20906[rsp]
  00578	eb 0d		 jmp	 SHORT $LN74@frame_trav
$LN1@frame_trav:
$LN2@frame_trav:
  0057a	33 c0		 xor	 eax, eax
  0057c	85 c0		 test	 eax, eax
  0057e	75 a2		 jne	 SHORT $LN6@frame_trav
  00580	e9 79 ff ff ff	 jmp	 $LN8@frame_trav
$LN7@frame_trav:
$LN10@frame_trav:

; 492  :     }
; 493  :     return 0;

  00585	33 c0		 xor	 eax, eax
$LN74@frame_trav:

; 494  : }

  00587	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0058b	c3		 ret	 0
frame_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@LBNCHPJM@frame_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$frame_clear DD imagerel frame_clear
	DD	imagerel frame_clear+946
	DD	imagerel $unwind$frame_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_clear DD 020c01H
	DD	011010cH
xdata	ENDS
;	COMDAT ??_C@_0M@LBNCHPJM@frame_clear?$AA@
CONST	SEGMENT
??_C@_0M@LBNCHPJM@frame_clear?$AA@ DB 'frame_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT frame_clear
_TEXT	SEGMENT
p$ = 48
i$ = 56
slots$ = 60
oldtop$ = 64
fastlocals$ = 72
_py_tmp$20924 = 80
_py_tmp$20932 = 88
_py_tmp$20940 = 96
_py_tmp$20948 = 104
_py_tmp$20961 = 112
_py_tmp$20974 = 120
f$ = 144
frame_clear PROC					; COMDAT

; 498  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 499  :     PyObject **fastlocals, **p, **oldtop;
; 500  :     int i, slots;
; 501  : 
; 502  :     /* Before anything else, make sure that this frame is clearly marked
; 503  :      * as being defunct!  Else, e.g., a generator reachable from this
; 504  :      * frame may also point to this frame, believe itself to still be
; 505  :      * active, and try cleaning up this frame again.
; 506  :      */
; 507  :     oldtop = f->f_stacktop;

  0000c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00014	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0001b	48 89 44 24 40	 mov	 QWORD PTR oldtop$[rsp], rax

; 508  :     f->f_stacktop = NULL;

  00020	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00028	48 c7 80 a0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+160], 0
$LN31@frame_clea:

; 509  : 
; 510  :     Py_CLEAR(f->f_exc_type);

  00033	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0003b	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  00043	74 65		 je	 SHORT $LN28@frame_clea
  00045	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00055	4c 8b 88 b0 00
	00 00		 mov	 r9, QWORD PTR [rax+176]
  0005c	41 b8 fe 01 00
	00		 mov	 r8d, 510		; 000001feH
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  00070	e8 00 00 00 00	 call	 _PyParallel_Guard
  00075	85 c0		 test	 eax, eax
  00077	75 31		 jne	 SHORT $LN28@frame_clea
  00079	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00081	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  00088	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$20924[rsp], rax
  0008d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00095	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$20924[rsp]
  000a5	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@frame_clea:
  000aa	33 c0		 xor	 eax, eax
  000ac	85 c0		 test	 eax, eax
  000ae	75 83		 jne	 SHORT $LN31@frame_clea
$LN27@frame_clea:

; 511  :     Py_CLEAR(f->f_exc_value);

  000b0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  000b8	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  000c0	74 65		 je	 SHORT $LN24@frame_clea
  000c2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ca	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  000d2	4c 8b 88 b8 00
	00 00		 mov	 r9, QWORD PTR [rax+184]
  000d9	41 b8 ff 01 00
	00		 mov	 r8d, 511		; 000001ffH
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  000ed	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f2	85 c0		 test	 eax, eax
  000f4	75 31		 jne	 SHORT $LN24@frame_clea
  000f6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  000fe	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00105	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$20932[rsp], rax
  0010a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00112	48 c7 80 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+184], 0
  0011d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$20932[rsp]
  00122	e8 00 00 00 00	 call	 _Py_DecRef
$LN24@frame_clea:
  00127	33 c0		 xor	 eax, eax
  00129	85 c0		 test	 eax, eax
  0012b	75 83		 jne	 SHORT $LN27@frame_clea
$LN23@frame_clea:

; 512  :     Py_CLEAR(f->f_exc_traceback);

  0012d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00135	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  0013d	74 65		 je	 SHORT $LN20@frame_clea
  0013f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00147	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0014f	4c 8b 88 c0 00
	00 00		 mov	 r9, QWORD PTR [rax+192]
  00156	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0015c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00163	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  0016a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0016f	85 c0		 test	 eax, eax
  00171	75 31		 jne	 SHORT $LN20@frame_clea
  00173	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0017b	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00182	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$20940[rsp], rax
  00187	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0018f	48 c7 80 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+192], 0
  0019a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$20940[rsp]
  0019f	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@frame_clea:
  001a4	33 c0		 xor	 eax, eax
  001a6	85 c0		 test	 eax, eax
  001a8	75 83		 jne	 SHORT $LN23@frame_clea
$LN19@frame_clea:

; 513  :     Py_CLEAR(f->f_trace);

  001aa	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  001b2	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  001ba	74 65		 je	 SHORT $LN16@frame_clea
  001bc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  001cc	4c 8b 88 a8 00
	00 00		 mov	 r9, QWORD PTR [rax+168]
  001d3	41 b8 01 02 00
	00		 mov	 r8d, 513		; 00000201H
  001d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  001e7	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ec	85 c0		 test	 eax, eax
  001ee	75 31		 jne	 SHORT $LN16@frame_clea
  001f0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  001f8	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  001ff	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$20948[rsp], rax
  00204	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0020c	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0
  00217	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$20948[rsp]
  0021c	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@frame_clea:
  00221	33 c0		 xor	 eax, eax
  00223	85 c0		 test	 eax, eax
  00225	75 83		 jne	 SHORT $LN19@frame_clea

; 514  : 
; 515  :     /* locals */
; 516  :     slots = f->f_code->co_nlocals + PyTuple_GET_SIZE(f->f_code->co_cellvars) + PyTuple_GET_SIZE(f->f_code->co_freevars);

  00227	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0022f	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00233	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  00237	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  0023f	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00243	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  0024a	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]
  0024e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  00256	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  0025a	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  00261	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]
  00265	89 44 24 3c	 mov	 DWORD PTR slots$[rsp], eax

; 517  :     fastlocals = f->f_localsplus;

  00269	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00271	48 05 d0 01 00
	00		 add	 rax, 464		; 000001d0H
  00277	48 89 44 24 48	 mov	 QWORD PTR fastlocals$[rsp], rax

; 518  :     for (i = slots; --i >= 0; ++fastlocals)

  0027c	8b 44 24 3c	 mov	 eax, DWORD PTR slots$[rsp]
  00280	89 44 24 38	 mov	 DWORD PTR i$[rsp], eax
  00284	eb 0e		 jmp	 SHORT $LN15@frame_clea
$LN14@frame_clea:
  00286	48 8b 44 24 48	 mov	 rax, QWORD PTR fastlocals$[rsp]
  0028b	48 83 c0 08	 add	 rax, 8
  0028f	48 89 44 24 48	 mov	 QWORD PTR fastlocals$[rsp], rax
$LN15@frame_clea:
  00294	8b 44 24 38	 mov	 eax, DWORD PTR i$[rsp]
  00298	ff c8		 dec	 eax
  0029a	89 44 24 38	 mov	 DWORD PTR i$[rsp], eax
  0029e	83 7c 24 38 00	 cmp	 DWORD PTR i$[rsp], 0
  002a3	7c 66		 jl	 SHORT $LN13@frame_clea
$LN12@frame_clea:

; 519  :         Py_CLEAR(*fastlocals);

  002a5	48 8b 44 24 48	 mov	 rax, QWORD PTR fastlocals$[rsp]
  002aa	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  002ae	74 50		 je	 SHORT $LN9@frame_clea
  002b0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002b8	48 8b 44 24 48	 mov	 rax, QWORD PTR fastlocals$[rsp]
  002bd	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  002c0	41 b8 07 02 00
	00		 mov	 r8d, 519		; 00000207H
  002c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  002cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  002d4	e8 00 00 00 00	 call	 _PyParallel_Guard
  002d9	85 c0		 test	 eax, eax
  002db	75 23		 jne	 SHORT $LN9@frame_clea
  002dd	48 8b 44 24 48	 mov	 rax, QWORD PTR fastlocals$[rsp]
  002e2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002e5	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$20961[rsp], rax
  002ea	48 8b 44 24 48	 mov	 rax, QWORD PTR fastlocals$[rsp]
  002ef	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  002f6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$20961[rsp]
  002fb	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@frame_clea:
  00300	33 c0		 xor	 eax, eax
  00302	85 c0		 test	 eax, eax
  00304	75 9f		 jne	 SHORT $LN12@frame_clea
  00306	e9 7b ff ff ff	 jmp	 $LN14@frame_clea
$LN13@frame_clea:

; 520  : 
; 521  :     /* stack */
; 522  :     if (oldtop != NULL) {

  0030b	48 83 7c 24 40
	00		 cmp	 QWORD PTR oldtop$[rsp], 0
  00311	0f 84 93 00 00
	00		 je	 $LN8@frame_clea

; 523  :         for (p = f->f_valuestack; p < oldtop; p++)

  00317	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0031f	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00326	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax
  0032b	eb 0e		 jmp	 SHORT $LN7@frame_clea
$LN6@frame_clea:
  0032d	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  00332	48 83 c0 08	 add	 rax, 8
  00336	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax
$LN7@frame_clea:
  0033b	48 8b 44 24 40	 mov	 rax, QWORD PTR oldtop$[rsp]
  00340	48 39 44 24 30	 cmp	 QWORD PTR p$[rsp], rax
  00345	73 63		 jae	 SHORT $LN5@frame_clea
$LN4@frame_clea:

; 524  :             Py_CLEAR(*p);

  00347	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  0034c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00350	74 50		 je	 SHORT $LN1@frame_clea
  00352	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0035a	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  0035f	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  00362	41 b8 0c 02 00
	00		 mov	 r8d, 524		; 0000020cH
  00368	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0036f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBNCHPJM@frame_clear?$AA@
  00376	e8 00 00 00 00	 call	 _PyParallel_Guard
  0037b	85 c0		 test	 eax, eax
  0037d	75 23		 jne	 SHORT $LN1@frame_clea
  0037f	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  00384	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00387	48 89 44 24 78	 mov	 QWORD PTR _py_tmp$20974[rsp], rax
  0038c	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  00391	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00398	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _py_tmp$20974[rsp]
  0039d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@frame_clea:
  003a2	33 c0		 xor	 eax, eax
  003a4	85 c0		 test	 eax, eax
  003a6	75 9f		 jne	 SHORT $LN4@frame_clea
  003a8	eb 83		 jmp	 SHORT $LN6@frame_clea
$LN5@frame_clea:
$LN8@frame_clea:

; 525  :     }
; 526  : }

  003aa	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  003b1	c3		 ret	 0
frame_clear ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$frame_sizeof DD imagerel frame_sizeof
	DD	imagerel frame_sizeof+133
	DD	imagerel $unwind$frame_sizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frame_sizeof DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT frame_sizeof
_TEXT	SEGMENT
res$ = 32
extras$ = 40
nfrees$ = 48
ncells$ = 56
f$ = 80
frame_sizeof PROC					; COMDAT

; 530  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 531  :     Py_ssize_t res, extras, ncells, nfrees;
; 532  : 
; 533  :     ncells = PyTuple_GET_SIZE(f->f_code->co_cellvars);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR f$[rsp]
  0000e	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00012	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00019	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0001d	48 89 44 24 38	 mov	 QWORD PTR ncells$[rsp], rax

; 534  :     nfrees = PyTuple_GET_SIZE(f->f_code->co_freevars);

  00022	48 8b 44 24 50	 mov	 rax, QWORD PTR f$[rsp]
  00027	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0002b	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00032	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00036	48 89 44 24 30	 mov	 QWORD PTR nfrees$[rsp], rax

; 535  :     extras = f->f_code->co_stacksize + f->f_code->co_nlocals +
; 536  :              ncells + nfrees;

  0003b	48 8b 44 24 50	 mov	 rax, QWORD PTR f$[rsp]
  00040	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00044	48 8b 4c 24 50	 mov	 rcx, QWORD PTR f$[rsp]
  00049	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  0004d	8b 40 6c	 mov	 eax, DWORD PTR [rax+108]
  00050	03 41 68	 add	 eax, DWORD PTR [rcx+104]
  00053	48 98		 cdqe
  00055	48 03 44 24 38	 add	 rax, QWORD PTR ncells$[rsp]
  0005a	48 03 44 24 30	 add	 rax, QWORD PTR nfrees$[rsp]
  0005f	48 89 44 24 28	 mov	 QWORD PTR extras$[rsp], rax

; 537  :     /* subtract one as it is already included in PyFrameObject */
; 538  :     res = sizeof(PyFrameObject) + (extras-1) * sizeof(PyObject *);

  00064	48 8b 44 24 28	 mov	 rax, QWORD PTR extras$[rsp]
  00069	48 8d 04 c5 d8
	01 00 00	 lea	 rax, QWORD PTR [rax*8+472]
  00071	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 539  : 
; 540  :     return PyLong_FromSsize_t(res);

  00076	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0007b	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 541  : }

  00080	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00084	c3		 ret	 0
frame_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@MNFFDJII@__builtins__?$AA@		; `string'
PUBLIC	_PyFrame_Init
EXTRN	PyUnicode_InternFromString:PROC
_BSS	SEGMENT
	ALIGN	8

builtin_object DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyFrame_Init DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$_PyFrame_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyFrame_Init DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__?$AA@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__?$AA@ DB '__builtins__', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyFrame_Init
_TEXT	SEGMENT
_PyFrame_Init PROC					; COMDAT

; 590  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 591  :     builtin_object = PyUnicode_InternFromString("__builtins__");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  0000b	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00010	48 89 05 00 00
	00 00		 mov	 QWORD PTR builtin_object, rax

; 592  :     if (builtin_object == NULL)

  00017	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR builtin_object, 0
  0001f	75 04		 jne	 SHORT $LN1@PyFrame_In

; 593  :         return 0;

  00021	33 c0		 xor	 eax, eax
  00023	eb 05		 jmp	 SHORT $LN2@PyFrame_In
$LN1@PyFrame_In:

; 594  :     return 1;

  00025	b8 01 00 00 00	 mov	 eax, 1
$LN2@PyFrame_In:

; 595  : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
_PyFrame_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_1BI@POJNACDA@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@		; `string'
PUBLIC	??_C@_1CE@GDECKNGM@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAc?$AAo?$AAd?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAd?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EA@HGLPNBID@?$AA?$CB?$AA_?$AAP?$AAx?$AA_?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAc?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAz?$AAo?$AAm?$AAb?$AAi?$AAe?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
PUBLIC	??_C@_1CC@CIFFDOKI@?$AAb?$AAu?$AAi?$AAl?$AAt?$AAi?$AAn?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	PyFrame_New
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyObject_GC_NewVar:PROC
EXTRN	_PxObject_NewVar:PROC
EXTRN	_Py_NewReference:PROC
EXTRN	_Px_TEST:PROC
EXTRN	_PyParallel_ExecutingCallbackFromMainThread:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
EXTRN	PyDict_GetItem:PROC
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	PyMapping_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFrame_New DD imagerel $LN51
	DD	imagerel $LN51+1894
	DD	imagerel $unwind$PyFrame_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_New DD 021b01H
	DD	013011bH
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@POJNACDA@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@POJNACDA@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'u', 00H, 'm', 00H, 'f', 00H, 'r', 00H, 'e', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@
CONST	SEGMENT
??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@ DB 'PyFrame_New', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@GDECKNGM@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAc?$AAo?$AAd?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAd?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@GDECKNGM@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAc?$AAo?$AAd?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAd?$AAe?$AA?$AA@ DB 'f'
	DB	00H, '-', 00H, '>', 00H, 'f', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@HGLPNBID@?$AA?$CB?$AA_?$AAP?$AAx?$AA_?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAc?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAz?$AAo?$AAm?$AAb?$AAi?$AAe?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@HGLPNBID@?$AA?$CB?$AA_?$AAP?$AAx?$AA_?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAc?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAz?$AAo?$AAm?$AAb?$AAi?$AAe?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, '_', 00H, 'P', 00H, 'x', 00H, '_', 00H, 'T', 00H, 'E', 00H
	DB	'S', 00H, 'T', 00H, '(', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '-', 00H, '>', 00H, 'c', 00H, 'o', 00H, '_', 00H, 'z', 00H
	DB	'o', 00H, 'm', 00H, 'b', 00H, 'i', 00H, 'e', 00H, 'f', 00H, 'r'
	DB	00H, 'a', 00H, 'm', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@CIFFDOKI@?$AAb?$AAu?$AAi?$AAl?$AAt?$AAi?$AAn?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@CIFFDOKI@?$AAb?$AAu?$AAi?$AAl?$AAt?$AAi?$AAn?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'b'
	DB	00H, 'u', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFrame_New
_TEXT	SEGMENT
i$ = 48
f$ = 56
builtins$ = 64
back$ = 72
extras$21072 = 80
nfrees$21074 = 88
ncells$21073 = 96
new_f$21093 = 104
g$21129 = 112
tv190 = 120
tv277 = 128
tstate$ = 160
code$ = 168
globals$ = 176
locals$ = 184
PyFrame_New PROC					; COMDAT

; 600  : {

$LN51:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 601  :     PyFrameObject *back = tstate->frame;

  0001b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tstate$[rsp]
  00023	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00027	48 89 44 24 48	 mov	 QWORD PTR back$[rsp], rax

; 602  :     PyFrameObject *f;
; 603  :     PyObject *builtins;
; 604  :     Py_ssize_t i;
; 605  : 
; 606  : #ifdef Py_DEBUG
; 607  :     if (code == NULL || globals == NULL || !PyDict_Check(globals) ||
; 608  :         (locals != NULL && !PyMapping_Check(locals))) {

  0002c	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR code$[rsp], 0
  00035	74 42		 je	 SHORT $LN38@PyFrame_Ne
  00037	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR globals$[rsp], 0
  00040	74 37		 je	 SHORT $LN38@PyFrame_Ne
  00042	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR globals$[rsp]
  0004a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00054	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00059	85 c0		 test	 eax, eax
  0005b	74 1c		 je	 SHORT $LN38@PyFrame_Ne
  0005d	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR locals$[rsp], 0
  00066	74 29		 je	 SHORT $LN39@PyFrame_Ne
  00068	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR locals$[rsp]
  00070	e8 00 00 00 00	 call	 PyMapping_Check
  00075	85 c0		 test	 eax, eax
  00077	75 18		 jne	 SHORT $LN39@PyFrame_Ne
$LN38@PyFrame_Ne:

; 609  :         PyErr_BadInternalCall();

  00079	ba 61 02 00 00	 mov	 edx, 609		; 00000261H
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00085	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 610  :         return NULL;

  0008a	33 c0		 xor	 eax, eax
  0008c	e9 cd 06 00 00	 jmp	 $LN40@PyFrame_Ne
$LN39@PyFrame_Ne:

; 611  :     }
; 612  : #endif
; 613  :     if (back == NULL || back->f_globals != globals) {

  00091	48 83 7c 24 48
	00		 cmp	 QWORD PTR back$[rsp], 0
  00097	74 1a		 je	 SHORT $LN36@PyFrame_Ne
  00099	48 8b 44 24 48	 mov	 rax, QWORD PTR back$[rsp]
  0009e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR globals$[rsp]
  000a6	48 39 88 88 00
	00 00		 cmp	 QWORD PTR [rax+136], rcx
  000ad	0f 84 ca 00 00
	00		 je	 $LN37@PyFrame_Ne
$LN36@PyFrame_Ne:

; 614  :         builtins = PyDict_GetItem(globals, builtin_object);

  000b3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR builtin_object
  000ba	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR globals$[rsp]
  000c2	e8 00 00 00 00	 call	 PyDict_GetItem
  000c7	48 89 44 24 40	 mov	 QWORD PTR builtins$[rsp], rax

; 615  :         if (builtins) {

  000cc	48 83 7c 24 40
	00		 cmp	 QWORD PTR builtins$[rsp], 0
  000d2	74 5e		 je	 SHORT $LN35@PyFrame_Ne

; 616  :             if (PyModule_Check(builtins)) {

  000d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  000db	48 8b 4c 24 40	 mov	 rcx, QWORD PTR builtins$[rsp]
  000e0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000e4	74 19		 je	 SHORT $LN33@PyFrame_Ne
  000e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  000ed	48 8b 44 24 40	 mov	 rax, QWORD PTR builtins$[rsp]
  000f2	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000f6	e8 00 00 00 00	 call	 PyType_IsSubtype
  000fb	85 c0		 test	 eax, eax
  000fd	74 33		 je	 SHORT $LN34@PyFrame_Ne
$LN33@PyFrame_Ne:

; 617  :                 builtins = PyModule_GetDict(builtins);

  000ff	48 8b 4c 24 40	 mov	 rcx, QWORD PTR builtins$[rsp]
  00104	e8 00 00 00 00	 call	 PyModule_GetDict
  00109	48 89 44 24 40	 mov	 QWORD PTR builtins$[rsp], rax

; 618  :                 assert(builtins != NULL);

  0010e	48 83 7c 24 40
	00		 cmp	 QWORD PTR builtins$[rsp], 0
  00114	75 1c		 jne	 SHORT $LN42@PyFrame_Ne
  00116	41 b8 6a 02 00
	00		 mov	 r8d, 618		; 0000026aH
  0011c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@CIFFDOKI@?$AAb?$AAu?$AAi?$AAl?$AAt?$AAi?$AAn?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00130	33 c0		 xor	 eax, eax
$LN42@PyFrame_Ne:
$LN34@PyFrame_Ne:
$LN35@PyFrame_Ne:

; 619  :             }
; 620  :         }
; 621  :         if (builtins == NULL) {

  00132	48 83 7c 24 40
	00		 cmp	 QWORD PTR builtins$[rsp], 0
  00138	75 37		 jne	 SHORT $LN32@PyFrame_Ne

; 622  :             /* No builtins!              Make up a minimal one
; 623  :                Give them 'None', at least. */
; 624  :             builtins = PyDict_New();

  0013a	e8 00 00 00 00	 call	 PyDict_New
  0013f	48 89 44 24 40	 mov	 QWORD PTR builtins$[rsp], rax

; 625  :             if (builtins == NULL ||
; 626  :                 PyDict_SetItemString(
; 627  :                     builtins, "None", Py_None) < 0)

  00144	48 83 7c 24 40
	00		 cmp	 QWORD PTR builtins$[rsp], 0
  0014a	74 1c		 je	 SHORT $LN30@PyFrame_Ne
  0014c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00153	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@
  0015a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR builtins$[rsp]
  0015f	e8 00 00 00 00	 call	 PyDict_SetItemString
  00164	85 c0		 test	 eax, eax
  00166	7d 07		 jge	 SHORT $LN31@PyFrame_Ne
$LN30@PyFrame_Ne:

; 628  :                 return NULL;

  00168	33 c0		 xor	 eax, eax
  0016a	e9 ef 05 00 00	 jmp	 $LN40@PyFrame_Ne
$LN31@PyFrame_Ne:

; 629  :         }
; 630  :         else

  0016f	eb 0a		 jmp	 SHORT $LN29@PyFrame_Ne
$LN32@PyFrame_Ne:

; 631  :             Py_INCREF(builtins);

  00171	48 8b 4c 24 40	 mov	 rcx, QWORD PTR builtins$[rsp]
  00176	e8 00 00 00 00	 call	 _Py_IncRef
$LN29@PyFrame_Ne:

; 632  : 
; 633  :     }
; 634  :     else {

  0017b	eb 3f		 jmp	 SHORT $LN28@PyFrame_Ne
$LN37@PyFrame_Ne:

; 635  :         /* If we share the globals, we share the builtins.
; 636  :            Save a lookup and a call. */
; 637  :         builtins = back->f_builtins;

  0017d	48 8b 44 24 48	 mov	 rax, QWORD PTR back$[rsp]
  00182	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00189	48 89 44 24 40	 mov	 QWORD PTR builtins$[rsp], rax

; 638  :         assert(builtins != NULL);

  0018e	48 83 7c 24 40
	00		 cmp	 QWORD PTR builtins$[rsp], 0
  00194	75 1c		 jne	 SHORT $LN43@PyFrame_Ne
  00196	41 b8 7e 02 00
	00		 mov	 r8d, 638		; 0000027eH
  0019c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@CIFFDOKI@?$AAb?$AAu?$AAi?$AAl?$AAt?$AAi?$AAn?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  001aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b0	33 c0		 xor	 eax, eax
$LN43@PyFrame_Ne:

; 639  :         Py_INCREF(builtins);

  001b2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR builtins$[rsp]
  001b7	e8 00 00 00 00	 call	 _Py_IncRef
$LN28@PyFrame_Ne:

; 640  :     }
; 641  : #ifndef WITH_PARALLEL
; 642  :     if (code->co_zombieframe != NULL) {
; 643  : #else
; 644  :     if (!Py_PXCTX && code->co_zombieframe != NULL &&
; 645  :         !_PyParallel_ExecutingCallbackFromMainThread()) {

  001bc	e8 00 00 00 00	 call	 _Py_PXCTX
  001c1	85 c0		 test	 eax, eax
  001c3	0f 85 bc 00 00
	00		 jne	 $LN27@PyFrame_Ne
  001c9	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  001d1	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  001d9	0f 84 a6 00 00
	00		 je	 $LN27@PyFrame_Ne
  001df	e8 00 00 00 00	 call	 _PyParallel_ExecutingCallbackFromMainThread
  001e4	85 c0		 test	 eax, eax
  001e6	0f 85 99 00 00
	00		 jne	 $LN27@PyFrame_Ne

; 646  :         assert(!_Px_TEST(code->co_zombieframe));

  001ec	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  001f4	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  001fb	e8 00 00 00 00	 call	 _Px_TEST
  00200	85 c0		 test	 eax, eax
  00202	74 1c		 je	 SHORT $LN44@PyFrame_Ne
  00204	41 b8 86 02 00
	00		 mov	 r8d, 646		; 00000286H
  0020a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00211	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@HGLPNBID@?$AA?$CB?$AA_?$AAP?$AAx?$AA_?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAc?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAz?$AAo?$AAm?$AAb?$AAi?$AAe?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00218	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0021e	33 c0		 xor	 eax, eax
$LN44@PyFrame_Ne:

; 647  : #endif
; 648  :         f = code->co_zombieframe;

  00220	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  00228	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  0022f	48 89 44 24 38	 mov	 QWORD PTR f$[rsp], rax

; 649  :         code->co_zombieframe = NULL;

  00234	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  0023c	48 c7 80 d0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+208], 0

; 650  :         _Py_NewReference((PyObject *)f);

  00247	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  0024c	e8 00 00 00 00	 call	 _Py_NewReference

; 651  :         assert(f->f_code == code);

  00251	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00256	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  0025e	48 39 48 78	 cmp	 QWORD PTR [rax+120], rcx
  00262	74 1c		 je	 SHORT $LN45@PyFrame_Ne
  00264	41 b8 8b 02 00
	00		 mov	 r8d, 651		; 0000028bH
  0026a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@GDECKNGM@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAc?$AAo?$AAd?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAd?$AAe?$AA?$AA@
  00278	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0027e	33 c0		 xor	 eax, eax
$LN45@PyFrame_Ne:

; 652  :     }
; 653  :     else {

  00280	e9 70 02 00 00	 jmp	 $LN26@PyFrame_Ne
$LN27@PyFrame_Ne:

; 654  :         Py_ssize_t extras, ncells, nfrees;
; 655  :         ncells = PyTuple_GET_SIZE(code->co_cellvars);

  00285	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  0028d	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00294	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00298	48 89 44 24 60	 mov	 QWORD PTR ncells$21073[rsp], rax

; 656  :         nfrees = PyTuple_GET_SIZE(code->co_freevars);

  0029d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  002a5	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  002ac	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  002b0	48 89 44 24 58	 mov	 QWORD PTR nfrees$21074[rsp], rax

; 657  :         extras = code->co_stacksize + code->co_nlocals + ncells + nfrees;

  002b5	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  002bd	8b 40 6c	 mov	 eax, DWORD PTR [rax+108]
  002c0	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  002c8	03 41 68	 add	 eax, DWORD PTR [rcx+104]
  002cb	48 98		 cdqe
  002cd	48 03 44 24 60	 add	 rax, QWORD PTR ncells$21073[rsp]
  002d2	48 03 44 24 58	 add	 rax, QWORD PTR nfrees$21074[rsp]
  002d7	48 89 44 24 50	 mov	 QWORD PTR extras$21072[rsp], rax

; 658  :         if (Py_PXCTX || free_list == NULL) {

  002dc	e8 00 00 00 00	 call	 _Py_PXCTX
  002e1	85 c0		 test	 eax, eax
  002e3	75 0a		 jne	 SHORT $LN24@PyFrame_Ne
  002e5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR free_list, 0
  002ed	75 5f		 jne	 SHORT $LN25@PyFrame_Ne
$LN24@PyFrame_Ne:

; 659  :             f = PyObject_GC_NewVar(PyFrameObject, &PyFrame_Type, extras);

  002ef	e8 00 00 00 00	 call	 _Py_PXCTX
  002f4	85 c0		 test	 eax, eax
  002f6	74 18		 je	 SHORT $LN46@PyFrame_Ne
  002f8	48 8b 54 24 50	 mov	 rdx, QWORD PTR extras$21072[rsp]
  002fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFrame_Type
  00304	e8 00 00 00 00	 call	 _PxObject_NewVar
  00309	48 89 44 24 78	 mov	 QWORD PTR tv190[rsp], rax
  0030e	eb 16		 jmp	 SHORT $LN47@PyFrame_Ne
$LN46@PyFrame_Ne:
  00310	48 8b 54 24 50	 mov	 rdx, QWORD PTR extras$21072[rsp]
  00315	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFrame_Type
  0031c	e8 00 00 00 00	 call	 _PyObject_GC_NewVar
  00321	48 89 44 24 78	 mov	 QWORD PTR tv190[rsp], rax
$LN47@PyFrame_Ne:
  00326	48 8b 44 24 78	 mov	 rax, QWORD PTR tv190[rsp]
  0032b	48 89 44 24 38	 mov	 QWORD PTR f$[rsp], rax

; 660  :             if (f == NULL) {

  00330	48 83 7c 24 38
	00		 cmp	 QWORD PTR f$[rsp], 0
  00336	75 11		 jne	 SHORT $LN23@PyFrame_Ne

; 661  :                 Py_DECREF(builtins);

  00338	48 8b 4c 24 40	 mov	 rcx, QWORD PTR builtins$[rsp]
  0033d	e8 00 00 00 00	 call	 _Py_DecRef

; 662  :                 return NULL;

  00342	33 c0		 xor	 eax, eax
  00344	e9 15 04 00 00	 jmp	 $LN40@PyFrame_Ne
$LN23@PyFrame_Ne:

; 663  :             }
; 664  :         }
; 665  :         else {

  00349	e9 d1 00 00 00	 jmp	 $LN22@PyFrame_Ne
$LN25@PyFrame_Ne:

; 666  :             Py_GUARD

  0034e	e8 00 00 00 00	 call	 _Py_PXCTX
  00353	85 c0		 test	 eax, eax
  00355	74 1c		 je	 SHORT $LN21@PyFrame_Ne
  00357	45 33 c9	 xor	 r9d, r9d
  0035a	41 b8 9a 02 00
	00		 mov	 r8d, 666		; 0000029aH
  00360	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  00367	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@
  0036e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@PyFrame_Ne:

; 667  :             assert(numfree > 0);

  00373	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR numfree, 0
  0037a	7f 1c		 jg	 SHORT $LN48@PyFrame_Ne
  0037c	41 b8 9b 02 00
	00		 mov	 r8d, 667		; 0000029bH
  00382	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00389	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@POJNACDA@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  00390	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00396	33 c0		 xor	 eax, eax
$LN48@PyFrame_Ne:

; 668  :             --numfree;

  00398	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  0039e	ff c8		 dec	 eax
  003a0	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 669  :             f = free_list;

  003a6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list
  003ad	48 89 44 24 38	 mov	 QWORD PTR f$[rsp], rax

; 670  :             free_list = free_list->f_back;

  003b2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list
  003b9	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  003bd	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax

; 671  :             if (Py_SIZE(f) < extras) {

  003c4	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  003c9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR extras$21072[rsp]
  003ce	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  003d2	7d 41		 jge	 SHORT $LN20@PyFrame_Ne

; 672  :                 PyFrameObject *new_f = PyObject_GC_Resize(PyFrameObject, f, extras);

  003d4	48 8b 54 24 50	 mov	 rdx, QWORD PTR extras$21072[rsp]
  003d9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  003de	e8 00 00 00 00	 call	 __PyObject_GC_RESIZE
  003e3	48 89 44 24 68	 mov	 QWORD PTR new_f$21093[rsp], rax

; 673  :                 if (new_f == NULL) {

  003e8	48 83 7c 24 68
	00		 cmp	 QWORD PTR new_f$21093[rsp], 0
  003ee	75 1b		 jne	 SHORT $LN19@PyFrame_Ne

; 674  :                     PyObject_GC_Del(f);

  003f0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  003f5	e8 00 00 00 00	 call	 PyObject_GC_Del

; 675  :                     Py_DECREF(builtins);

  003fa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR builtins$[rsp]
  003ff	e8 00 00 00 00	 call	 _Py_DecRef

; 676  :                     return NULL;

  00404	33 c0		 xor	 eax, eax
  00406	e9 53 03 00 00	 jmp	 $LN40@PyFrame_Ne
$LN19@PyFrame_Ne:

; 677  :                 }
; 678  :                 f = new_f;

  0040b	48 8b 44 24 68	 mov	 rax, QWORD PTR new_f$21093[rsp]
  00410	48 89 44 24 38	 mov	 QWORD PTR f$[rsp], rax
$LN20@PyFrame_Ne:

; 679  :             }
; 680  :             _Py_NewReference((PyObject *)f);

  00415	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  0041a	e8 00 00 00 00	 call	 _Py_NewReference
$LN22@PyFrame_Ne:

; 681  :         }
; 682  : 
; 683  :         f->f_code = code;

  0041f	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00424	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  0042c	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 684  :         extras = code->co_nlocals + ncells + nfrees;

  00430	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  00438	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  0043c	48 03 44 24 60	 add	 rax, QWORD PTR ncells$21073[rsp]
  00441	48 03 44 24 58	 add	 rax, QWORD PTR nfrees$21074[rsp]
  00446	48 89 44 24 50	 mov	 QWORD PTR extras$21072[rsp], rax

; 685  :         f->f_valuestack = f->f_localsplus + extras;

  0044b	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00450	48 8b 4c 24 50	 mov	 rcx, QWORD PTR extras$21072[rsp]
  00455	48 8d 84 c8 d0
	01 00 00	 lea	 rax, QWORD PTR [rax+rcx*8+464]
  0045d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  00462	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax

; 686  :         for (i=0; i<extras; i++)

  00469	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00472	eb 0d		 jmp	 SHORT $LN18@PyFrame_Ne
$LN17@PyFrame_Ne:
  00474	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00479	48 ff c0	 inc	 rax
  0047c	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN18@PyFrame_Ne:
  00481	48 8b 44 24 50	 mov	 rax, QWORD PTR extras$21072[rsp]
  00486	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  0048b	7d 18		 jge	 SHORT $LN16@PyFrame_Ne

; 687  :             f->f_localsplus[i] = NULL;

  0048d	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00492	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00497	48 c7 84 c8 d0
	01 00 00 00 00
	00 00		 mov	 QWORD PTR [rax+rcx*8+464], 0
  004a3	eb cf		 jmp	 SHORT $LN17@PyFrame_Ne
$LN16@PyFrame_Ne:

; 688  :         f->f_locals = NULL;

  004a5	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  004aa	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 689  :         f->f_trace = NULL;

  004b5	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  004ba	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0

; 690  :         f->f_exc_type = f->f_exc_value = f->f_exc_traceback = NULL;

  004c5	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  004ca	48 c7 80 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+192], 0
  004d5	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  004da	48 c7 80 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+184], 0
  004e5	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  004ea	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0
$LN26@PyFrame_Ne:

; 691  :     }
; 692  :     f->f_stacktop = f->f_valuestack;

  004f5	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  004fa	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  004ff	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  00506	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx

; 693  :     f->f_builtins = builtins;

  0050d	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00512	48 8b 4c 24 40	 mov	 rcx, QWORD PTR builtins$[rsp]
  00517	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN15@PyFrame_Ne:

; 694  :     Py_XINCREF(back);

  0051e	48 83 7c 24 48
	00		 cmp	 QWORD PTR back$[rsp], 0
  00524	74 0a		 je	 SHORT $LN12@PyFrame_Ne
  00526	48 8b 4c 24 48	 mov	 rcx, QWORD PTR back$[rsp]
  0052b	e8 00 00 00 00	 call	 _Py_IncRef
$LN12@PyFrame_Ne:
  00530	33 c0		 xor	 eax, eax
  00532	85 c0		 test	 eax, eax
  00534	75 e8		 jne	 SHORT $LN15@PyFrame_Ne

; 695  :     f->f_back = back;

  00536	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  0053b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR back$[rsp]
  00540	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 696  :     Py_INCREF(code);

  00544	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  0054c	e8 00 00 00 00	 call	 _Py_IncRef

; 697  :     Py_INCREF(globals);

  00551	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR globals$[rsp]
  00559	e8 00 00 00 00	 call	 _Py_IncRef

; 698  :     f->f_globals = globals;

  0055e	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00563	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR globals$[rsp]
  0056b	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 699  :     /* Most functions have CO_NEWLOCALS and CO_OPTIMIZED set. */
; 700  :     if ((code->co_flags & (CO_NEWLOCALS | CO_OPTIMIZED)) ==
; 701  :         (CO_NEWLOCALS | CO_OPTIMIZED))

  00572	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  0057a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0057d	83 e0 03	 and	 eax, 3
  00580	83 f8 03	 cmp	 eax, 3
  00583	75 05		 jne	 SHORT $LN11@PyFrame_Ne
  00585	e9 8d 00 00 00	 jmp	 $LN10@PyFrame_Ne
$LN11@PyFrame_Ne:

; 702  :         ; /* f_locals = NULL; will be set by PyFrame_FastToLocals() */
; 703  :     else if (code->co_flags & CO_NEWLOCALS) {

  0058a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR code$[rsp]
  00592	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00595	83 e0 02	 and	 eax, 2
  00598	85 c0		 test	 eax, eax
  0059a	74 3f		 je	 SHORT $LN9@PyFrame_Ne

; 704  :         locals = PyDict_New();

  0059c	e8 00 00 00 00	 call	 PyDict_New
  005a1	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR locals$[rsp], rax

; 705  :         if (locals == NULL) {

  005a9	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR locals$[rsp], 0
  005b2	75 11		 jne	 SHORT $LN8@PyFrame_Ne

; 706  :             Py_DECREF(f);

  005b4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  005b9	e8 00 00 00 00	 call	 _Py_DecRef

; 707  :             return NULL;

  005be	33 c0		 xor	 eax, eax
  005c0	e9 99 01 00 00	 jmp	 $LN40@PyFrame_Ne
$LN8@PyFrame_Ne:

; 708  :         }
; 709  :         f->f_locals = locals;

  005c5	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  005ca	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR locals$[rsp]
  005d2	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx

; 710  :     }
; 711  :     else {

  005d9	eb 3c		 jmp	 SHORT $LN7@PyFrame_Ne
$LN9@PyFrame_Ne:

; 712  :         if (locals == NULL)

  005db	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR locals$[rsp], 0
  005e4	75 10		 jne	 SHORT $LN6@PyFrame_Ne

; 713  :             locals = globals;

  005e6	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR globals$[rsp]
  005ee	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR locals$[rsp], rax
$LN6@PyFrame_Ne:

; 714  :         Py_INCREF(locals);

  005f6	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR locals$[rsp]
  005fe	e8 00 00 00 00	 call	 _Py_IncRef

; 715  :         f->f_locals = locals;

  00603	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00608	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR locals$[rsp]
  00610	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx
$LN7@PyFrame_Ne:
$LN10@PyFrame_Ne:

; 716  :     }
; 717  :     f->f_tstate = tstate;

  00617	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  0061c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tstate$[rsp]
  00624	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx

; 718  : 
; 719  :     f->f_lasti = -1;

  0062b	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00630	c7 80 d0 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+208], -1

; 720  :     f->f_lineno = code->co_firstlineno;

  0063a	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  0063f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  00647	8b 89 c0 00 00
	00		 mov	 ecx, DWORD PTR [rcx+192]
  0064d	89 88 d4 00 00
	00		 mov	 DWORD PTR [rax+212], ecx

; 721  :     f->f_iblock = 0;

  00653	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00658	c7 80 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+216], 0

; 722  : 
; 723  :     _PyObject_GC_TRACK(f);

  00662	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0066a	4c 8b 4c 24 38	 mov	 r9, QWORD PTR f$[rsp]
  0066f	41 b8 d3 02 00
	00		 mov	 r8d, 723		; 000002d3H
  00675	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0067c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@
  00683	e8 00 00 00 00	 call	 _PyParallel_Guard
  00688	85 c0		 test	 eax, eax
  0068a	0f 85 c9 00 00
	00		 jne	 $LN5@PyFrame_Ne
$LN4@PyFrame_Ne:
  00690	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00698	4c 8b 4c 24 38	 mov	 r9, QWORD PTR f$[rsp]
  0069d	41 b8 d3 02 00
	00		 mov	 r8d, 723		; 000002d3H
  006a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  006aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DBDMBBFJ@PyFrame_New?$AA@
  006b1	e8 00 00 00 00	 call	 _PyParallel_Guard
  006b6	85 c0		 test	 eax, eax
  006b8	74 0e		 je	 SHORT $LN49@PyFrame_Ne
  006ba	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv277[rsp], 0
  006c6	eb 11		 jmp	 SHORT $LN50@PyFrame_Ne
$LN49@PyFrame_Ne:
  006c8	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  006cd	48 83 e8 18	 sub	 rax, 24
  006d1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv277[rsp], rax
$LN50@PyFrame_Ne:
  006d9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv277[rsp]
  006e1	48 89 44 24 70	 mov	 QWORD PTR g$21129[rsp], rax
  006e6	48 8b 44 24 70	 mov	 rax, QWORD PTR g$21129[rsp]
  006eb	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  006f0	74 0c		 je	 SHORT $LN1@PyFrame_Ne
  006f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  006f9	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyFrame_Ne:
  006fe	48 8b 44 24 70	 mov	 rax, QWORD PTR g$21129[rsp]
  00703	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  0070b	48 8b 44 24 70	 mov	 rax, QWORD PTR g$21129[rsp]
  00710	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00717	48 89 08	 mov	 QWORD PTR [rax], rcx
  0071a	48 8b 44 24 70	 mov	 rax, QWORD PTR g$21129[rsp]
  0071f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00726	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0072a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0072e	48 8b 44 24 70	 mov	 rax, QWORD PTR g$21129[rsp]
  00733	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00737	48 8b 4c 24 70	 mov	 rcx, QWORD PTR g$21129[rsp]
  0073c	48 89 08	 mov	 QWORD PTR [rax], rcx
  0073f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00746	48 8b 4c 24 70	 mov	 rcx, QWORD PTR g$21129[rsp]
  0074b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0074f	33 c0		 xor	 eax, eax
  00751	85 c0		 test	 eax, eax
  00753	0f 85 37 ff ff
	ff		 jne	 $LN4@PyFrame_Ne
$LN5@PyFrame_Ne:

; 724  :     return f;

  00759	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
$LN40@PyFrame_Ne:

; 725  : }

  0075e	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00765	c3		 ret	 0
PyFrame_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@	; `string'
PUBLIC	??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ ; `string'
EXTRN	_PyObject_GC_Resize:PROC
EXTRN	_PxObject_Resize:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$__PyObject_GC_RESIZE DD imagerel __PyObject_GC_RESIZE
	DD	imagerel __PyObject_GC_RESIZE+95
	DD	imagerel $unwind$__PyObject_GC_RESIZE
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__PyObject_GC_RESIZE DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@
CONST	SEGMENT
??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@ DB '__PyObject_GC_RESIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
CONST	SEGMENT
??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ DB 'c:\src\pypa'
	DB	'rallel\include\objimpl.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT __PyObject_GC_RESIZE
_TEXT	SEGMENT
op$ = 64
nitems$ = 72
__PyObject_GC_RESIZE PROC				; COMDAT

; 372  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 373  :     if (Py_ISPX(op))

  0000e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00016	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001b	41 b8 75 01 00
	00		 mov	 r8d, 373		; 00000175H
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@
  0002f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00034	85 c0		 test	 eax, eax
  00036	74 13		 je	 SHORT $LN2@PyObject_G

; 374  :         return _PxObject_Resize(op, nitems);

  00038	48 8b 54 24 48	 mov	 rdx, QWORD PTR nitems$[rsp]
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00042	e8 00 00 00 00	 call	 _PxObject_Resize
  00047	eb 11		 jmp	 SHORT $LN3@PyObject_G

; 375  :     else

  00049	eb 0f		 jmp	 SHORT $LN1@PyObject_G
$LN2@PyObject_G:

; 376  :         return _PyObject_GC_Resize(op, nitems);

  0004b	48 8b 54 24 48	 mov	 rdx, QWORD PTR nitems$[rsp]
  00050	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00055	e8 00 00 00 00	 call	 _PyObject_GC_Resize
$LN1@PyObject_G:
$LN3@PyObject_G:

; 377  : }

  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
__PyObject_GC_RESIZE ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DHOBDPGA@XXX?5block?5stack?5overflow?$AA@ ; `string'
PUBLIC	PyFrame_BlockSetup
;	COMDAT pdata
; File c:\src\pyparallel\objects\frameobject.c
pdata	SEGMENT
$pdata$PyFrame_BlockSetup DD imagerel $LN4
	DD	imagerel $LN4+147
	DD	imagerel $unwind$PyFrame_BlockSetup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_BlockSetup DD 011701H
	DD	06217H
xdata	ENDS
;	COMDAT ??_C@_0BJ@DHOBDPGA@XXX?5block?5stack?5overflow?$AA@
CONST	SEGMENT
??_C@_0BJ@DHOBDPGA@XXX?5block?5stack?5overflow?$AA@ DB 'XXX block stack o'
	DB	'verflow', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFrame_BlockSetup
_TEXT	SEGMENT
b$ = 32
f$ = 64
type$ = 72
handler$ = 80
level$ = 88
PyFrame_BlockSetup PROC					; COMDAT

; 731  : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 732  :     PyTryBlock *b;
; 733  :     if (f->f_iblock >= CO_MAXBLOCKS)

  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  0001c	83 b8 d8 00 00
	00 14		 cmp	 DWORD PTR [rax+216], 20
  00023	7c 0c		 jl	 SHORT $LN1@PyFrame_Bl

; 734  :         Py_FatalError("XXX block stack overflow");

  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@DHOBDPGA@XXX?5block?5stack?5overflow?$AA@
  0002c	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyFrame_Bl:

; 735  :     b = &f->f_blockstack[f->f_iblock++];

  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00036	48 63 80 d8 00
	00 00		 movsxd	 rax, DWORD PTR [rax+216]
  0003d	48 6b c0 0c	 imul	 rax, 12
  00041	48 8b 4c 24 40	 mov	 rcx, QWORD PTR f$[rsp]
  00046	48 8d 84 01 dc
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+220]
  0004e	48 89 44 24 20	 mov	 QWORD PTR b$[rsp], rax
  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00058	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [rax+216]
  0005e	ff c0		 inc	 eax
  00060	48 8b 4c 24 40	 mov	 rcx, QWORD PTR f$[rsp]
  00065	89 81 d8 00 00
	00		 mov	 DWORD PTR [rcx+216], eax

; 736  :     b->b_type = type;

  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
  00070	8b 4c 24 48	 mov	 ecx, DWORD PTR type$[rsp]
  00074	89 08		 mov	 DWORD PTR [rax], ecx

; 737  :     b->b_level = level;

  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
  0007b	8b 4c 24 58	 mov	 ecx, DWORD PTR level$[rsp]
  0007f	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 738  :     b->b_handler = handler;

  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
  00087	8b 4c 24 50	 mov	 ecx, DWORD PTR handler$[rsp]
  0008b	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 739  : }

  0008e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00092	c3		 ret	 0
PyFrame_BlockSetup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@LGMLDJMK@XXX?5block?5stack?5underflow?$AA@ ; `string'
PUBLIC	PyFrame_BlockPop
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFrame_BlockPop DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$PyFrame_BlockPop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_BlockPop DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BK@LGMLDJMK@XXX?5block?5stack?5underflow?$AA@
CONST	SEGMENT
??_C@_0BK@LGMLDJMK@XXX?5block?5stack?5underflow?$AA@ DB 'XXX block stack '
	DB	'underflow', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFrame_BlockPop
_TEXT	SEGMENT
b$ = 32
tv70 = 40
f$ = 64
PyFrame_BlockPop PROC					; COMDAT

; 743  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 744  :     PyTryBlock *b;
; 745  :     if (f->f_iblock <= 0)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  0000e	83 b8 d8 00 00
	00 00		 cmp	 DWORD PTR [rax+216], 0
  00015	7f 0c		 jg	 SHORT $LN1@PyFrame_Bl@2

; 746  :         Py_FatalError("XXX block stack underflow");

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@LGMLDJMK@XXX?5block?5stack?5underflow?$AA@
  0001e	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyFrame_Bl@2:

; 747  :     b = &f->f_blockstack[--f->f_iblock];

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00028	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [rax+216]
  0002e	ff c8		 dec	 eax
  00030	89 44 24 28	 mov	 DWORD PTR tv70[rsp], eax
  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00039	8b 4c 24 28	 mov	 ecx, DWORD PTR tv70[rsp]
  0003d	89 88 d8 00 00
	00		 mov	 DWORD PTR [rax+216], ecx
  00043	48 63 44 24 28	 movsxd	 rax, DWORD PTR tv70[rsp]
  00048	48 6b c0 0c	 imul	 rax, 12
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR f$[rsp]
  00051	48 8d 84 01 dc
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+220]
  00059	48 89 44 24 20	 mov	 QWORD PTR b$[rsp], rax

; 748  :     return b;

  0005e	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]

; 749  : }

  00063	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00067	c3		 ret	 0
PyFrame_BlockPop ENDP
_TEXT	ENDS
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_Fetch:PROC
EXTRN	PyErr_Clear:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFrame_FastToLocals DD imagerel $LN12
	DD	imagerel $LN12+530
	DD	imagerel $unwind$PyFrame_FastToLocals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_FastToLocals DD 020c01H
	DD	011010cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFrame_FastToLocals
_TEXT	SEGMENT
error_type$ = 48
locals$ = 56
error_value$ = 64
fast$ = 72
nfreevars$ = 80
ncells$ = 84
map$ = 88
co$ = 96
error_traceback$ = 104
j$ = 112
tv68 = 120
f$ = 144
PyFrame_FastToLocals PROC				; COMDAT

; 850  : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 851  :     /* Merge fast locals into f->f_locals */
; 852  :     PyObject *locals, *map;
; 853  :     PyObject **fast;
; 854  :     PyObject *error_type, *error_value, *error_traceback;
; 855  :     PyCodeObject *co;
; 856  :     Py_ssize_t j;
; 857  :     int ncells, nfreevars;
; 858  :     if (f == NULL)

  0000c	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR f$[rsp], 0
  00015	75 05		 jne	 SHORT $LN9@PyFrame_Fa

; 859  :         return;

  00017	e9 ee 01 00 00	 jmp	 $LN10@PyFrame_Fa
$LN9@PyFrame_Fa:

; 860  :     locals = f->f_locals;

  0001c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00024	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0002b	48 89 44 24 38	 mov	 QWORD PTR locals$[rsp], rax

; 861  :     if (locals == NULL) {

  00030	48 83 7c 24 38
	00		 cmp	 QWORD PTR locals$[rsp], 0
  00036	75 3a		 jne	 SHORT $LN8@PyFrame_Fa

; 862  :         locals = f->f_locals = PyDict_New();

  00038	e8 00 00 00 00	 call	 PyDict_New
  0003d	48 89 44 24 78	 mov	 QWORD PTR tv68[rsp], rax
  00042	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0004a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv68[rsp]
  0004f	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx
  00056	48 8b 44 24 78	 mov	 rax, QWORD PTR tv68[rsp]
  0005b	48 89 44 24 38	 mov	 QWORD PTR locals$[rsp], rax

; 863  :         if (locals == NULL) {

  00060	48 83 7c 24 38
	00		 cmp	 QWORD PTR locals$[rsp], 0
  00066	75 0a		 jne	 SHORT $LN7@PyFrame_Fa

; 864  :             PyErr_Clear(); /* Can't report it :-( */

  00068	e8 00 00 00 00	 call	 PyErr_Clear

; 865  :             return;

  0006d	e9 98 01 00 00	 jmp	 $LN10@PyFrame_Fa
$LN7@PyFrame_Fa:
$LN8@PyFrame_Fa:

; 866  :         }
; 867  :     }
; 868  :     co = f->f_code;

  00072	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0007a	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0007e	48 89 44 24 60	 mov	 QWORD PTR co$[rsp], rax

; 869  :     map = co->co_varnames;

  00083	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  00088	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0008f	48 89 44 24 58	 mov	 QWORD PTR map$[rsp], rax

; 870  :     if (!PyTuple_Check(map))

  00094	48 8b 44 24 58	 mov	 rax, QWORD PTR map$[rsp]
  00099	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0009d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a3	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  000a8	85 c0		 test	 eax, eax
  000aa	75 05		 jne	 SHORT $LN6@PyFrame_Fa

; 871  :         return;

  000ac	e9 59 01 00 00	 jmp	 $LN10@PyFrame_Fa
$LN6@PyFrame_Fa:

; 872  :     PyErr_Fetch(&error_type, &error_value, &error_traceback);

  000b1	4c 8d 44 24 68	 lea	 r8, QWORD PTR error_traceback$[rsp]
  000b6	48 8d 54 24 40	 lea	 rdx, QWORD PTR error_value$[rsp]
  000bb	48 8d 4c 24 30	 lea	 rcx, QWORD PTR error_type$[rsp]
  000c0	e8 00 00 00 00	 call	 PyErr_Fetch

; 873  :     fast = f->f_localsplus;

  000c5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  000cd	48 05 d0 01 00
	00		 add	 rax, 464		; 000001d0H
  000d3	48 89 44 24 48	 mov	 QWORD PTR fast$[rsp], rax

; 874  :     j = PyTuple_GET_SIZE(map);

  000d8	48 8b 44 24 58	 mov	 rax, QWORD PTR map$[rsp]
  000dd	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000e1	48 89 44 24 70	 mov	 QWORD PTR j$[rsp], rax

; 875  :     if (j > co->co_nlocals)

  000e6	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  000eb	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  000ef	48 39 44 24 70	 cmp	 QWORD PTR j$[rsp], rax
  000f4	7e 0e		 jle	 SHORT $LN5@PyFrame_Fa

; 876  :         j = co->co_nlocals;

  000f6	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  000fb	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  000ff	48 89 44 24 70	 mov	 QWORD PTR j$[rsp], rax
$LN5@PyFrame_Fa:

; 877  :     if (co->co_nlocals)

  00104	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  00109	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  0010d	74 21		 je	 SHORT $LN4@PyFrame_Fa

; 878  :         map_to_dict(map, j, locals, fast, 0);

  0010f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00117	4c 8b 4c 24 48	 mov	 r9, QWORD PTR fast$[rsp]
  0011c	4c 8b 44 24 38	 mov	 r8, QWORD PTR locals$[rsp]
  00121	48 8b 54 24 70	 mov	 rdx, QWORD PTR j$[rsp]
  00126	48 8b 4c 24 58	 mov	 rcx, QWORD PTR map$[rsp]
  0012b	e8 00 00 00 00	 call	 map_to_dict
$LN4@PyFrame_Fa:

; 879  :     ncells = PyTuple_GET_SIZE(co->co_cellvars);

  00130	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  00135	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0013c	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0013f	89 44 24 54	 mov	 DWORD PTR ncells$[rsp], eax

; 880  :     nfreevars = PyTuple_GET_SIZE(co->co_freevars);

  00143	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  00148	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0014f	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00152	89 44 24 50	 mov	 DWORD PTR nfreevars$[rsp], eax

; 881  :     if (ncells || nfreevars) {

  00156	83 7c 24 54 00	 cmp	 DWORD PTR ncells$[rsp], 0
  0015b	75 0b		 jne	 SHORT $LN2@PyFrame_Fa
  0015d	83 7c 24 50 00	 cmp	 DWORD PTR nfreevars$[rsp], 0
  00162	0f 84 8e 00 00
	00		 je	 $LN3@PyFrame_Fa
$LN2@PyFrame_Fa:

; 882  :         map_to_dict(co->co_cellvars, ncells,
; 883  :                     locals, fast + co->co_nlocals, 1);

  00168	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  0016d	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  00171	48 8b 4c 24 48	 mov	 rcx, QWORD PTR fast$[rsp]
  00176	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0017a	48 63 4c 24 54	 movsxd	 rcx, DWORD PTR ncells$[rsp]
  0017f	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00187	4c 8b c8	 mov	 r9, rax
  0018a	4c 8b 44 24 38	 mov	 r8, QWORD PTR locals$[rsp]
  0018f	48 8b d1	 mov	 rdx, rcx
  00192	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  00197	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  0019e	e8 00 00 00 00	 call	 map_to_dict

; 884  :         /* If the namespace is unoptimized, then one of the
; 885  :            following cases applies:
; 886  :            1. It does not contain free variables, because it
; 887  :               uses import * or is a top-level namespace.
; 888  :            2. It is a class namespace.
; 889  :            We don't want to accidentally copy free variables
; 890  :            into the locals dict used by the class.
; 891  :         */
; 892  :         if (co->co_flags & CO_OPTIMIZED) {

  001a3	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  001a8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001ab	83 e0 01	 and	 eax, 1
  001ae	85 c0		 test	 eax, eax
  001b0	74 44		 je	 SHORT $LN1@PyFrame_Fa

; 893  :             map_to_dict(co->co_freevars, nfreevars,
; 894  :                         locals, fast + co->co_nlocals + ncells, 1);

  001b2	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  001b7	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  001bb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR fast$[rsp]
  001c0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c4	48 63 4c 24 54	 movsxd	 rcx, DWORD PTR ncells$[rsp]
  001c9	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  001cd	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR nfreevars$[rsp]
  001d2	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  001da	4c 8b c8	 mov	 r9, rax
  001dd	4c 8b 44 24 38	 mov	 r8, QWORD PTR locals$[rsp]
  001e2	48 8b d1	 mov	 rdx, rcx
  001e5	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  001ea	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  001f1	e8 00 00 00 00	 call	 map_to_dict
$LN1@PyFrame_Fa:
$LN3@PyFrame_Fa:

; 895  :         }
; 896  :     }
; 897  :     PyErr_Restore(error_type, error_value, error_traceback);

  001f6	4c 8b 44 24 68	 mov	 r8, QWORD PTR error_traceback$[rsp]
  001fb	48 8b 54 24 40	 mov	 rdx, QWORD PTR error_value$[rsp]
  00200	48 8b 4c 24 30	 mov	 rcx, QWORD PTR error_type$[rsp]
  00205	e8 00 00 00 00	 call	 PyErr_Restore
$LN10@PyFrame_Fa:

; 898  : }

  0020a	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00211	c3		 ret	 0
PyFrame_FastToLocals ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@GNPLLNCO@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@PEPCANAK@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AAm?$AAa?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAn?$AAm?$AAa?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@DAHAPMED@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAa?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyObject_SetItem:PROC
EXTRN	PyObject_DelItem:PROC
EXTRN	PyCell_Type:BYTE
EXTRN	PyTuple_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$map_to_dict DD imagerel map_to_dict
	DD	imagerel map_to_dict+439
	DD	imagerel $unwind$map_to_dict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$map_to_dict DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_1CI@GNPLLNCO@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@GNPLLNCO@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'C', 00H, 'e', 00H, 'l', 00H, 'l', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'k', 00H, 'e', 00H, 'y', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@PEPCANAK@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AAm?$AAa?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAn?$AAm?$AAa?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@PEPCANAK@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AAm?$AAa?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAn?$AAm?$AAa?$AAp?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H, 'm'
	DB	00H, 'a', 00H, 'p', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, 'n', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'd'
	DB	00H, 'i', 00H, 'c', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@DAHAPMED@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAa?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@DAHAPMED@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAa?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT map_to_dict
_TEXT	SEGMENT
j$ = 32
value$21178 = 40
key$21176 = 48
map$ = 80
nmap$ = 88
dict$ = 96
values$ = 104
deref$ = 112
map_to_dict PROC					; COMDAT

; 770  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 771  :     Py_ssize_t j;
; 772  :     assert(PyTuple_Check(map));

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR map$[rsp]
  0001d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00021	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00027	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0002c	85 c0		 test	 eax, eax
  0002e	75 1c		 jne	 SHORT $LN10@map_to_dic
  00030	41 b8 04 03 00
	00		 mov	 r8d, 772		; 00000304H
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@DAHAPMED@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAa?$AAp?$AA?$CJ?$AA?$AA@
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004a	33 c0		 xor	 eax, eax
$LN10@map_to_dic:

; 773  :     assert(PyDict_Check(dict));

  0004c	48 8b 44 24 60	 mov	 rax, QWORD PTR dict$[rsp]
  00051	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00055	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0005b	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00060	85 c0		 test	 eax, eax
  00062	75 1c		 jne	 SHORT $LN11@map_to_dic
  00064	41 b8 05 03 00
	00		 mov	 r8d, 773		; 00000305H
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007e	33 c0		 xor	 eax, eax
$LN11@map_to_dic:

; 774  :     assert(PyTuple_Size(map) >= nmap);

  00080	48 8b 4c 24 50	 mov	 rcx, QWORD PTR map$[rsp]
  00085	e8 00 00 00 00	 call	 PyTuple_Size
  0008a	48 3b 44 24 58	 cmp	 rax, QWORD PTR nmap$[rsp]
  0008f	7d 1c		 jge	 SHORT $LN12@map_to_dic
  00091	41 b8 06 03 00
	00		 mov	 r8d, 774		; 00000306H
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PEPCANAK@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AAm?$AAa?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAn?$AAm?$AAa?$AAp?$AA?$AA@
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ab	33 c0		 xor	 eax, eax
$LN12@map_to_dic:

; 775  :     for (j = nmap; --j >= 0; ) {

  000ad	48 8b 44 24 58	 mov	 rax, QWORD PTR nmap$[rsp]
  000b2	48 89 44 24 20	 mov	 QWORD PTR j$[rsp], rax
$LN7@map_to_dic:
  000b7	48 8b 44 24 20	 mov	 rax, QWORD PTR j$[rsp]
  000bc	48 ff c8	 dec	 rax
  000bf	48 89 44 24 20	 mov	 QWORD PTR j$[rsp], rax
  000c4	48 83 7c 24 20
	00		 cmp	 QWORD PTR j$[rsp], 0
  000ca	0f 8c e2 00 00
	00		 jl	 $LN6@map_to_dic

; 776  :         PyObject *key = PyTuple_GET_ITEM(map, j);

  000d0	48 8b 44 24 50	 mov	 rax, QWORD PTR map$[rsp]
  000d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR j$[rsp]
  000da	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  000df	48 89 44 24 30	 mov	 QWORD PTR key$21176[rsp], rax

; 777  :         PyObject *value = values[j];

  000e4	48 8b 44 24 68	 mov	 rax, QWORD PTR values$[rsp]
  000e9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR j$[rsp]
  000ee	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000f2	48 89 44 24 28	 mov	 QWORD PTR value$21178[rsp], rax

; 778  :         assert(PyUnicode_Check(key));

  000f7	48 8b 44 24 30	 mov	 rax, QWORD PTR key$21176[rsp]
  000fc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00100	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00106	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0010b	85 c0		 test	 eax, eax
  0010d	75 1c		 jne	 SHORT $LN13@map_to_dic
  0010f	41 b8 0a 03 00
	00		 mov	 r8d, 778		; 0000030aH
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  00123	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00129	33 c0		 xor	 eax, eax
$LN13@map_to_dic:

; 779  :         if (deref) {

  0012b	83 7c 24 70 00	 cmp	 DWORD PTR deref$[rsp], 0
  00130	74 3c		 je	 SHORT $LN5@map_to_dic

; 780  :             assert(PyCell_Check(value));

  00132	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  00139	48 8b 4c 24 28	 mov	 rcx, QWORD PTR value$21178[rsp]
  0013e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00142	74 1c		 je	 SHORT $LN14@map_to_dic
  00144	41 b8 0c 03 00
	00		 mov	 r8d, 780		; 0000030cH
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@GNPLLNCO@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
  00158	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0015e	33 c0		 xor	 eax, eax
$LN14@map_to_dic:

; 781  :             value = PyCell_GET(value);

  00160	48 8b 44 24 28	 mov	 rax, QWORD PTR value$21178[rsp]
  00165	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00169	48 89 44 24 28	 mov	 QWORD PTR value$21178[rsp], rax
$LN5@map_to_dic:

; 782  :         }
; 783  :         if (value == NULL) {

  0016e	48 83 7c 24 28
	00		 cmp	 QWORD PTR value$21178[rsp], 0
  00174	75 1a		 jne	 SHORT $LN4@map_to_dic

; 784  :             if (PyObject_DelItem(dict, key) != 0)

  00176	48 8b 54 24 30	 mov	 rdx, QWORD PTR key$21176[rsp]
  0017b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dict$[rsp]
  00180	e8 00 00 00 00	 call	 PyObject_DelItem
  00185	85 c0		 test	 eax, eax
  00187	74 05		 je	 SHORT $LN3@map_to_dic

; 785  :                 PyErr_Clear();

  00189	e8 00 00 00 00	 call	 PyErr_Clear
$LN3@map_to_dic:

; 786  :         }
; 787  :         else {

  0018e	eb 1d		 jmp	 SHORT $LN2@map_to_dic
$LN4@map_to_dic:

; 788  :             if (PyObject_SetItem(dict, key, value) != 0)

  00190	4c 8b 44 24 28	 mov	 r8, QWORD PTR value$21178[rsp]
  00195	48 8b 54 24 30	 mov	 rdx, QWORD PTR key$21176[rsp]
  0019a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dict$[rsp]
  0019f	e8 00 00 00 00	 call	 PyObject_SetItem
  001a4	85 c0		 test	 eax, eax
  001a6	74 05		 je	 SHORT $LN1@map_to_dic

; 789  :                 PyErr_Clear();

  001a8	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@map_to_dic:
$LN2@map_to_dic:

; 790  :         }
; 791  :     }

  001ad	e9 05 ff ff ff	 jmp	 $LN7@map_to_dic
$LN6@map_to_dic:

; 792  : }

  001b2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001b6	c3		 ret	 0
map_to_dict ENDP
_TEXT	ENDS
PUBLIC	PyFrame_LocalsToFast
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFrame_LocalsToFast DD imagerel $LN11
	DD	imagerel $LN11+521
	DD	imagerel $unwind$PyFrame_LocalsToFast
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_LocalsToFast DD 021001H
	DD	0110110H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyFrame_LocalsToFast
_TEXT	SEGMENT
error_type$ = 48
locals$ = 56
error_value$ = 64
fast$ = 72
nfreevars$ = 80
ncells$ = 84
map$ = 88
co$ = 96
error_traceback$ = 104
j$ = 112
f$ = 144
clear$ = 152
PyFrame_LocalsToFast PROC				; COMDAT

; 902  : {

$LN11:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 903  :     /* Merge f->f_locals into fast locals */
; 904  :     PyObject *locals, *map;
; 905  :     PyObject **fast;
; 906  :     PyObject *error_type, *error_value, *error_traceback;
; 907  :     PyCodeObject *co;
; 908  :     Py_ssize_t j;
; 909  :     int ncells, nfreevars;
; 910  :     if (f == NULL)

  00010	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR f$[rsp], 0
  00019	75 05		 jne	 SHORT $LN8@PyFrame_Lo

; 911  :         return;

  0001b	e9 e1 01 00 00	 jmp	 $LN9@PyFrame_Lo
$LN8@PyFrame_Lo:

; 912  :     locals = f->f_locals;

  00020	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  00028	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0002f	48 89 44 24 38	 mov	 QWORD PTR locals$[rsp], rax

; 913  :     co = f->f_code;

  00034	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0003c	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00040	48 89 44 24 60	 mov	 QWORD PTR co$[rsp], rax

; 914  :     map = co->co_varnames;

  00045	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  0004a	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00051	48 89 44 24 58	 mov	 QWORD PTR map$[rsp], rax

; 915  :     if (locals == NULL)

  00056	48 83 7c 24 38
	00		 cmp	 QWORD PTR locals$[rsp], 0
  0005c	75 05		 jne	 SHORT $LN7@PyFrame_Lo

; 916  :         return;

  0005e	e9 9e 01 00 00	 jmp	 $LN9@PyFrame_Lo
$LN7@PyFrame_Lo:

; 917  :     if (!PyTuple_Check(map))

  00063	48 8b 44 24 58	 mov	 rax, QWORD PTR map$[rsp]
  00068	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00072	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00077	85 c0		 test	 eax, eax
  00079	75 05		 jne	 SHORT $LN6@PyFrame_Lo

; 918  :         return;

  0007b	e9 81 01 00 00	 jmp	 $LN9@PyFrame_Lo
$LN6@PyFrame_Lo:

; 919  :     PyErr_Fetch(&error_type, &error_value, &error_traceback);

  00080	4c 8d 44 24 68	 lea	 r8, QWORD PTR error_traceback$[rsp]
  00085	48 8d 54 24 40	 lea	 rdx, QWORD PTR error_value$[rsp]
  0008a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR error_type$[rsp]
  0008f	e8 00 00 00 00	 call	 PyErr_Fetch

; 920  :     fast = f->f_localsplus;

  00094	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0009c	48 05 d0 01 00
	00		 add	 rax, 464		; 000001d0H
  000a2	48 89 44 24 48	 mov	 QWORD PTR fast$[rsp], rax

; 921  :     j = PyTuple_GET_SIZE(map);

  000a7	48 8b 44 24 58	 mov	 rax, QWORD PTR map$[rsp]
  000ac	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000b0	48 89 44 24 70	 mov	 QWORD PTR j$[rsp], rax

; 922  :     if (j > co->co_nlocals)

  000b5	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  000ba	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  000be	48 39 44 24 70	 cmp	 QWORD PTR j$[rsp], rax
  000c3	7e 0e		 jle	 SHORT $LN5@PyFrame_Lo

; 923  :         j = co->co_nlocals;

  000c5	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  000ca	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  000ce	48 89 44 24 70	 mov	 QWORD PTR j$[rsp], rax
$LN5@PyFrame_Lo:

; 924  :     if (co->co_nlocals)

  000d3	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  000d8	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  000dc	74 33		 je	 SHORT $LN4@PyFrame_Lo

; 925  :         dict_to_map(co->co_varnames, j, locals, fast, 0, clear);

  000de	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR clear$[rsp]
  000e5	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000e9	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000f1	4c 8b 4c 24 48	 mov	 r9, QWORD PTR fast$[rsp]
  000f6	4c 8b 44 24 38	 mov	 r8, QWORD PTR locals$[rsp]
  000fb	48 8b 54 24 70	 mov	 rdx, QWORD PTR j$[rsp]
  00100	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  00105	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  0010c	e8 00 00 00 00	 call	 dict_to_map
$LN4@PyFrame_Lo:

; 926  :     ncells = PyTuple_GET_SIZE(co->co_cellvars);

  00111	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  00116	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0011d	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00120	89 44 24 54	 mov	 DWORD PTR ncells$[rsp], eax

; 927  :     nfreevars = PyTuple_GET_SIZE(co->co_freevars);

  00124	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  00129	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00130	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00133	89 44 24 50	 mov	 DWORD PTR nfreevars$[rsp], eax

; 928  :     if (ncells || nfreevars) {

  00137	83 7c 24 54 00	 cmp	 DWORD PTR ncells$[rsp], 0
  0013c	75 0b		 jne	 SHORT $LN2@PyFrame_Lo
  0013e	83 7c 24 50 00	 cmp	 DWORD PTR nfreevars$[rsp], 0
  00143	0f 84 a4 00 00
	00		 je	 $LN3@PyFrame_Lo
$LN2@PyFrame_Lo:

; 929  :         dict_to_map(co->co_cellvars, ncells,
; 930  :                     locals, fast + co->co_nlocals, 1, clear);

  00149	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  0014e	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  00152	48 8b 4c 24 48	 mov	 rcx, QWORD PTR fast$[rsp]
  00157	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0015b	48 63 4c 24 54	 movsxd	 rcx, DWORD PTR ncells$[rsp]
  00160	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR clear$[rsp]
  00167	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  0016b	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00173	4c 8b c8	 mov	 r9, rax
  00176	4c 8b 44 24 38	 mov	 r8, QWORD PTR locals$[rsp]
  0017b	48 8b d1	 mov	 rdx, rcx
  0017e	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  00183	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  0018a	e8 00 00 00 00	 call	 dict_to_map

; 931  :         /* Same test as in PyFrame_FastToLocals() above. */
; 932  :         if (co->co_flags & CO_OPTIMIZED) {

  0018f	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  00194	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00197	83 e0 01	 and	 eax, 1
  0019a	85 c0		 test	 eax, eax
  0019c	74 4f		 je	 SHORT $LN1@PyFrame_Lo

; 933  :             dict_to_map(co->co_freevars, nfreevars,
; 934  :                 locals, fast + co->co_nlocals + ncells, 1,
; 935  :                 clear);

  0019e	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  001a3	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  001a7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR fast$[rsp]
  001ac	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001b0	48 63 4c 24 54	 movsxd	 rcx, DWORD PTR ncells$[rsp]
  001b5	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  001b9	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR nfreevars$[rsp]
  001be	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR clear$[rsp]
  001c5	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  001c9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  001d1	4c 8b c8	 mov	 r9, rax
  001d4	4c 8b 44 24 38	 mov	 r8, QWORD PTR locals$[rsp]
  001d9	48 8b d1	 mov	 rdx, rcx
  001dc	48 8b 44 24 60	 mov	 rax, QWORD PTR co$[rsp]
  001e1	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  001e8	e8 00 00 00 00	 call	 dict_to_map
$LN1@PyFrame_Lo:
$LN3@PyFrame_Lo:

; 936  :         }
; 937  :     }
; 938  :     PyErr_Restore(error_type, error_value, error_traceback);

  001ed	4c 8b 44 24 68	 mov	 r8, QWORD PTR error_traceback$[rsp]
  001f2	48 8b 54 24 40	 mov	 rdx, QWORD PTR error_value$[rsp]
  001f7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR error_type$[rsp]
  001fc	e8 00 00 00 00	 call	 PyErr_Restore
$LN9@PyFrame_Lo:

; 939  : }

  00201	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00208	c3		 ret	 0
PyFrame_LocalsToFast ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@IBAIMBO@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$FL?$AAj?$AA?$FN?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyCell_Set:PROC
EXTRN	PyObject_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_to_map DD imagerel dict_to_map
	DD	imagerel dict_to_map+587
	DD	imagerel $unwind$dict_to_map
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_to_map DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_1DA@IBAIMBO@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$FL?$AAj?$AA?$FN?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@IBAIMBO@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$FL?$AAj?$AA?$FN?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'C', 00H, 'e', 00H, 'l', 00H, 'l', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 's', 00H, '[', 00H
	DB	'j', 00H, ']', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT dict_to_map
_TEXT	SEGMENT
j$ = 32
value$21217 = 40
key$21215 = 48
map$ = 80
nmap$ = 88
dict$ = 96
values$ = 104
deref$ = 112
clear$ = 120
dict_to_map PROC					; COMDAT

; 818  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 819  :     Py_ssize_t j;
; 820  :     assert(PyTuple_Check(map));

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR map$[rsp]
  0001d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00021	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00027	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0002c	85 c0		 test	 eax, eax
  0002e	75 1c		 jne	 SHORT $LN24@dict_to_ma
  00030	41 b8 34 03 00
	00		 mov	 r8d, 820		; 00000334H
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@DAHAPMED@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAa?$AAp?$AA?$CJ?$AA?$AA@
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004a	33 c0		 xor	 eax, eax
$LN24@dict_to_ma:

; 821  :     assert(PyDict_Check(dict));

  0004c	48 8b 44 24 60	 mov	 rax, QWORD PTR dict$[rsp]
  00051	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00055	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0005b	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00060	85 c0		 test	 eax, eax
  00062	75 1c		 jne	 SHORT $LN25@dict_to_ma
  00064	41 b8 35 03 00
	00		 mov	 r8d, 821		; 00000335H
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007e	33 c0		 xor	 eax, eax
$LN25@dict_to_ma:

; 822  :     assert(PyTuple_Size(map) >= nmap);

  00080	48 8b 4c 24 50	 mov	 rcx, QWORD PTR map$[rsp]
  00085	e8 00 00 00 00	 call	 PyTuple_Size
  0008a	48 3b 44 24 58	 cmp	 rax, QWORD PTR nmap$[rsp]
  0008f	7d 1c		 jge	 SHORT $LN26@dict_to_ma
  00091	41 b8 36 03 00
	00		 mov	 r8d, 822		; 00000336H
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PEPCANAK@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AAm?$AAa?$AAp?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAn?$AAm?$AAa?$AAp?$AA?$AA@
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ab	33 c0		 xor	 eax, eax
$LN26@dict_to_ma:

; 823  :     for (j = nmap; --j >= 0; ) {

  000ad	48 8b 44 24 58	 mov	 rax, QWORD PTR nmap$[rsp]
  000b2	48 89 44 24 20	 mov	 QWORD PTR j$[rsp], rax
$LN29@dict_to_ma:
$LN21@dict_to_ma:
  000b7	48 8b 44 24 20	 mov	 rax, QWORD PTR j$[rsp]
  000bc	48 ff c8	 dec	 rax
  000bf	48 89 44 24 20	 mov	 QWORD PTR j$[rsp], rax
  000c4	48 83 7c 24 20
	00		 cmp	 QWORD PTR j$[rsp], 0
  000ca	0f 8c 76 01 00
	00		 jl	 $LN20@dict_to_ma

; 824  :         PyObject *key = PyTuple_GET_ITEM(map, j);

  000d0	48 8b 44 24 50	 mov	 rax, QWORD PTR map$[rsp]
  000d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR j$[rsp]
  000da	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  000df	48 89 44 24 30	 mov	 QWORD PTR key$21215[rsp], rax

; 825  :         PyObject *value = PyObject_GetItem(dict, key);

  000e4	48 8b 54 24 30	 mov	 rdx, QWORD PTR key$21215[rsp]
  000e9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dict$[rsp]
  000ee	e8 00 00 00 00	 call	 PyObject_GetItem
  000f3	48 89 44 24 28	 mov	 QWORD PTR value$21217[rsp], rax

; 826  :         assert(PyUnicode_Check(key));

  000f8	48 8b 44 24 30	 mov	 rax, QWORD PTR key$21215[rsp]
  000fd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00101	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00107	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0010c	85 c0		 test	 eax, eax
  0010e	75 1c		 jne	 SHORT $LN27@dict_to_ma
  00110	41 b8 3a 03 00
	00		 mov	 r8d, 826		; 0000033aH
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012a	33 c0		 xor	 eax, eax
$LN27@dict_to_ma:

; 827  :         /* We only care about NULLs if clear is true. */
; 828  :         if (value == NULL) {

  0012c	48 83 7c 24 28
	00		 cmp	 QWORD PTR value$21217[rsp], 0
  00132	75 11		 jne	 SHORT $LN19@dict_to_ma

; 829  :             PyErr_Clear();

  00134	e8 00 00 00 00	 call	 PyErr_Clear

; 830  :             if (!clear)

  00139	83 7c 24 78 00	 cmp	 DWORD PTR clear$[rsp], 0
  0013e	75 05		 jne	 SHORT $LN18@dict_to_ma

; 831  :                 continue;

  00140	e9 72 ff ff ff	 jmp	 $LN21@dict_to_ma
$LN18@dict_to_ma:
$LN19@dict_to_ma:

; 832  :         }
; 833  :         if (deref) {

  00145	83 7c 24 70 00	 cmp	 DWORD PTR deref$[rsp], 0
  0014a	74 73		 je	 SHORT $LN17@dict_to_ma

; 834  :             assert(PyCell_Check(values[j]));

  0014c	48 8b 44 24 68	 mov	 rax, QWORD PTR values$[rsp]
  00151	48 8b 4c 24 20	 mov	 rcx, QWORD PTR j$[rsp]
  00156	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCell_Type
  00161	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00165	74 1c		 je	 SHORT $LN28@dict_to_ma
  00167	41 b8 42 03 00
	00		 mov	 r8d, 834		; 00000342H
  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IBAIMBO@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$FL?$AAj?$AA?$FN?$AA?$CJ?$AA?$AA@
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00181	33 c0		 xor	 eax, eax
$LN28@dict_to_ma:

; 835  :             if (PyCell_GET(values[j]) != value) {

  00183	48 8b 44 24 68	 mov	 rax, QWORD PTR values$[rsp]
  00188	48 8b 4c 24 20	 mov	 rcx, QWORD PTR j$[rsp]
  0018d	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00191	48 8b 4c 24 28	 mov	 rcx, QWORD PTR value$21217[rsp]
  00196	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  0019a	74 21		 je	 SHORT $LN16@dict_to_ma

; 836  :                 if (PyCell_Set(values[j], value) < 0)

  0019c	48 8b 54 24 28	 mov	 rdx, QWORD PTR value$21217[rsp]
  001a1	48 8b 44 24 68	 mov	 rax, QWORD PTR values$[rsp]
  001a6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR j$[rsp]
  001ab	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  001af	e8 00 00 00 00	 call	 PyCell_Set
  001b4	85 c0		 test	 eax, eax
  001b6	7d 05		 jge	 SHORT $LN15@dict_to_ma

; 837  :                     PyErr_Clear();

  001b8	e8 00 00 00 00	 call	 PyErr_Clear
$LN15@dict_to_ma:
$LN16@dict_to_ma:

; 838  :             }

  001bd	eb 6a		 jmp	 SHORT $LN14@dict_to_ma
$LN17@dict_to_ma:

; 839  :         } else if (values[j] != value) {

  001bf	48 8b 44 24 68	 mov	 rax, QWORD PTR values$[rsp]
  001c4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR j$[rsp]
  001c9	48 8b 54 24 28	 mov	 rdx, QWORD PTR value$21217[rsp]
  001ce	48 39 14 c8	 cmp	 QWORD PTR [rax+rcx*8], rdx
  001d2	74 55		 je	 SHORT $LN13@dict_to_ma
$LN12@dict_to_ma:

; 840  :             Py_XINCREF(value);

  001d4	48 83 7c 24 28
	00		 cmp	 QWORD PTR value$21217[rsp], 0
  001da	74 0a		 je	 SHORT $LN9@dict_to_ma
  001dc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR value$21217[rsp]
  001e1	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@dict_to_ma:
  001e6	33 c0		 xor	 eax, eax
  001e8	85 c0		 test	 eax, eax
  001ea	75 e8		 jne	 SHORT $LN12@dict_to_ma
$LN8@dict_to_ma:

; 841  :             Py_XDECREF(values[j]);

  001ec	48 8b 44 24 68	 mov	 rax, QWORD PTR values$[rsp]
  001f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR j$[rsp]
  001f6	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  001fb	74 13		 je	 SHORT $LN5@dict_to_ma
  001fd	48 8b 44 24 68	 mov	 rax, QWORD PTR values$[rsp]
  00202	48 8b 4c 24 20	 mov	 rcx, QWORD PTR j$[rsp]
  00207	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0020b	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@dict_to_ma:
  00210	33 c0		 xor	 eax, eax
  00212	85 c0		 test	 eax, eax
  00214	75 d6		 jne	 SHORT $LN8@dict_to_ma

; 842  :             values[j] = value;

  00216	48 8b 44 24 68	 mov	 rax, QWORD PTR values$[rsp]
  0021b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR j$[rsp]
  00220	48 8b 54 24 28	 mov	 rdx, QWORD PTR value$21217[rsp]
  00225	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
$LN13@dict_to_ma:
$LN14@dict_to_ma:
$LN4@dict_to_ma:

; 843  :         }
; 844  :         Py_XDECREF(value);

  00229	48 83 7c 24 28
	00		 cmp	 QWORD PTR value$21217[rsp], 0
  0022f	74 0a		 je	 SHORT $LN1@dict_to_ma
  00231	48 8b 4c 24 28	 mov	 rcx, QWORD PTR value$21217[rsp]
  00236	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@dict_to_ma:
  0023b	33 c0		 xor	 eax, eax
  0023d	85 c0		 test	 eax, eax
  0023f	75 e8		 jne	 SHORT $LN4@dict_to_ma

; 845  :     }

  00241	e9 71 fe ff ff	 jmp	 $LN29@dict_to_ma
$LN20@dict_to_ma:

; 846  : }

  00246	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0024a	c3		 ret	 0
dict_to_map ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	PyFrame_ClearFreeList
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFrame_ClearFreeList DD imagerel $LN7
	DD	imagerel $LN7+139
	DD	imagerel $unwind$PyFrame_ClearFreeList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_ClearFreeList DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'u', 00H, 'm', 00H, 'f', 00H, 'r', 00H, 'e', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFrame_ClearFreeList
_TEXT	SEGMENT
freelist_size$ = 32
f$21313 = 40
PyFrame_ClearFreeList PROC				; COMDAT

; 944  : {

$LN7:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 945  :     int freelist_size = numfree;

  00004	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  0000a	89 44 24 20	 mov	 DWORD PTR freelist_size$[rsp], eax

; 946  :     if (Py_PXCTX)

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 04		 je	 SHORT $LN3@PyFrame_Cl

; 947  :         return 0;

  00017	33 c0		 xor	 eax, eax
  00019	eb 6b		 jmp	 SHORT $LN4@PyFrame_Cl
$LN3@PyFrame_Cl:
$LN2@PyFrame_Cl:

; 948  :     while (free_list != NULL) {

  0001b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR free_list, 0
  00023	74 38		 je	 SHORT $LN1@PyFrame_Cl

; 949  :         PyFrameObject *f = free_list;

  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list
  0002c	48 89 44 24 28	 mov	 QWORD PTR f$21313[rsp], rax

; 950  :         free_list = free_list->f_back;

  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list
  00038	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0003c	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax

; 951  :         PyObject_GC_Del(f);

  00043	48 8b 4c 24 28	 mov	 rcx, QWORD PTR f$21313[rsp]
  00048	e8 00 00 00 00	 call	 PyObject_GC_Del

; 952  :         --numfree;

  0004d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  00053	ff c8		 dec	 eax
  00055	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 953  :     }

  0005b	eb be		 jmp	 SHORT $LN2@PyFrame_Cl
$LN1@PyFrame_Cl:

; 954  :     assert(numfree == 0);

  0005d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR numfree, 0
  00064	74 1c		 je	 SHORT $LN6@PyFrame_Cl
  00066	41 b8 ba 03 00
	00		 mov	 r8d, 954		; 000003baH
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@BDDOCENJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00080	33 c0		 xor	 eax, eax
$LN6@PyFrame_Cl:

; 955  :     return freelist_size;

  00082	8b 44 24 20	 mov	 eax, DWORD PTR freelist_size$[rsp]
$LN4@PyFrame_Cl:

; 956  : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
PyFrame_ClearFreeList ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@MPOIGJCJ@PyFrame_Fini?$AA@		; `string'
PUBLIC	PyFrame_Fini
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyFrame_Fini DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$PyFrame_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyFrame_Fini DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0N@MPOIGJCJ@PyFrame_Fini?$AA@
CONST	SEGMENT
??_C@_0N@MPOIGJCJ@PyFrame_Fini?$AA@ DB 'PyFrame_Fini', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyFrame_Fini
_TEXT	SEGMENT
_py_tmp$21324 = 48
PyFrame_Fini PROC					; COMDAT

; 960  : {

$LN7:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 961  :     (void)PyFrame_ClearFreeList();

  00004	e8 00 00 00 00	 call	 PyFrame_ClearFreeList
$LN4@PyFrame_Fi:

; 962  :     Py_CLEAR(builtin_object);

  00009	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR builtin_object, 0
  00011	74 4d		 je	 SHORT $LN1@PyFrame_Fi
  00013	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001b	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR builtin_object
  00022	41 b8 c2 03 00
	00		 mov	 r8d, 962		; 000003c2H
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@HDIBDKDA@?4?4?2Objects?2frameobject?4c?$AA@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MPOIGJCJ@PyFrame_Fini?$AA@
  00036	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003b	85 c0		 test	 eax, eax
  0003d	75 21		 jne	 SHORT $LN1@PyFrame_Fi
  0003f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR builtin_object
  00046	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21324[rsp], rax
  0004b	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR builtin_object, 0
  00056	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21324[rsp]
  0005b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyFrame_Fi:
  00060	33 c0		 xor	 eax, eax
  00062	85 c0		 test	 eax, eax
  00064	75 a3		 jne	 SHORT $LN4@PyFrame_Fi

; 963  : }

  00066	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006a	c3		 ret	 0
PyFrame_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@BCDCGENP@free?5PyFrameObject?$AA@	; `string'
PUBLIC	_PyFrame_DebugMallocStats
EXTRN	_PyDebugAllocatorStats:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyFrame_DebugMallocStats DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$_PyFrame_DebugMallocStats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyFrame_DebugMallocStats DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BD@BCDCGENP@free?5PyFrameObject?$AA@
CONST	SEGMENT
??_C@_0BD@BCDCGENP@free?5PyFrameObject?$AA@ DB 'free PyFrameObject', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyFrame_DebugMallocStats
_TEXT	SEGMENT
out$ = 48
_PyFrame_DebugMallocStats PROC				; COMDAT

; 968  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 969  :     _PyDebugAllocatorStats(out,
; 970  :                            "free PyFrameObject",
; 971  :                            numfree, sizeof(PyFrameObject));

  00009	41 b9 e0 01 00
	00		 mov	 r9d, 480		; 000001e0H
  0000f	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR numfree
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BCDCGENP@free?5PyFrameObject?$AA@
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  00022	e8 00 00 00 00	 call	 _PyDebugAllocatorStats

; 972  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
_PyFrame_DebugMallocStats ENDP
_TEXT	ENDS
END
